sun.font.AttributeMap#entrySet()->Set>::: attribute map entry set
sun.font.AttributeMap#put(TextAttribute, Object)->Object::: attribute map put
sun.font.AttributeMap#getValues()->AttributeValues::: attribute map get values
sun.font.AttributeMap#toString()->String::: attribute map to string
sun.font.AttributeValues#getFamily()->String::: attribute values get family
sun.font.AttributeValues#setFamily(String)->void::: attribute values set family
sun.font.AttributeValues#getWeight()->float::: attribute values get weight
sun.font.AttributeValues#setWeight(float)->void::: attribute values set weight
sun.font.AttributeValues#getWidth()->float::: attribute values get width
sun.font.AttributeValues#setWidth(float)->void::: attribute values set width
sun.font.AttributeValues#getPosture()->float::: attribute values get posture
sun.font.AttributeValues#setPosture(float)->void::: attribute values set posture
sun.font.AttributeValues#getSize()->float::: attribute values get size
sun.font.AttributeValues#setSize(float)->void::: attribute values set size
sun.font.AttributeValues#getTransform()->AffineTransform::: attribute values get transform
sun.font.AttributeValues#setTransform(AffineTransform)->void::: attribute values set transform
sun.font.AttributeValues#setTransform(TransformAttribute)->void::: attribute values set transform
sun.font.AttributeValues#getSuperscript()->int::: attribute values get superscript
sun.font.AttributeValues#setSuperscript(int)->void::: attribute values set superscript
sun.font.AttributeValues#getFont()->Font::: attribute values get font
sun.font.AttributeValues#setFont(Font)->void::: attribute values set font
sun.font.AttributeValues#getCharReplacement()->GraphicAttribute::: attribute values get char replacement
sun.font.AttributeValues#setCharReplacement(GraphicAttribute)->void::: attribute values set char replacement
sun.font.AttributeValues#getForeground()->Paint::: attribute values get foreground
sun.font.AttributeValues#setForeground(Paint)->void::: attribute values set foreground
sun.font.AttributeValues#getBackground()->Paint::: attribute values get background
sun.font.AttributeValues#setBackground(Paint)->void::: attribute values set background
sun.font.AttributeValues#getUnderline()->int::: attribute values get underline
sun.font.AttributeValues#setUnderline(int)->void::: attribute values set underline
sun.font.AttributeValues#getStrikethrough()->boolean::: attribute values get strikethrough
sun.font.AttributeValues#setStrikethrough(boolean)->void::: attribute values set strikethrough
sun.font.AttributeValues#getRunDirection()->int::: attribute values get run direction
sun.font.AttributeValues#setRunDirection(int)->void::: attribute values set run direction
sun.font.AttributeValues#getBidiEmbedding()->int::: attribute values get bidi embedding
sun.font.AttributeValues#setBidiEmbedding(int)->void::: attribute values set bidi embedding
sun.font.AttributeValues#getJustification()->float::: attribute values get justification
sun.font.AttributeValues#setJustification(float)->void::: attribute values set justification
sun.font.AttributeValues#getInputMethodHighlight()->Object::: attribute values get input method highlight
sun.font.AttributeValues#setInputMethodHighlight(Annotation)->void::: attribute values set input method highlight
sun.font.AttributeValues#setInputMethodHighlight(InputMethodHighlight)->void::: attribute values set input method highlight
sun.font.AttributeValues#getInputMethodUnderline()->int::: attribute values get input method underline
sun.font.AttributeValues#setInputMethodUnderline(int)->void::: attribute values set input method underline
sun.font.AttributeValues#getSwapColors()->boolean::: attribute values get swap colors
sun.font.AttributeValues#setSwapColors(boolean)->void::: attribute values set swap colors
sun.font.AttributeValues#getNumericShaping()->NumericShaper::: attribute values get numeric shaping
sun.font.AttributeValues#setNumericShaping(NumericShaper)->void::: attribute values set numeric shaping
sun.font.AttributeValues#getKerning()->int::: attribute values get kerning
sun.font.AttributeValues#setKerning(int)->void::: attribute values set kerning
sun.font.AttributeValues#getTracking()->float::: attribute values get tracking
sun.font.AttributeValues#setTracking(float)->void::: attribute values set tracking
sun.font.AttributeValues#getLigatures()->int::: attribute values get ligatures
sun.font.AttributeValues#setLigatures(int)->void::: attribute values set ligatures
sun.font.AttributeValues#getBaselineTransform()->AffineTransform::: attribute values get baseline transform
sun.font.AttributeValues#getCharTransform()->AffineTransform::: attribute values get char transform
sun.font.AttributeValues#getMask(EAttribute)->int::: attribute values get mask
sun.font.AttributeValues#getMask(EAttribute...)->int::: attribute values get mask
sun.font.AttributeValues#unsetDefault()->void::: attribute values unset default
sun.font.AttributeValues#defineAll(int)->void::: attribute values define all
sun.font.AttributeValues#allDefined(int)->boolean::: attribute values all defined
sun.font.AttributeValues#anyDefined(int)->boolean::: attribute values any defined
sun.font.AttributeValues#anyNonDefault(int)->boolean::: attribute values any non default
sun.font.AttributeValues#isDefined(EAttribute)->boolean::: attribute values is defined
sun.font.AttributeValues#isNonDefault(EAttribute)->boolean::: attribute values is non default
sun.font.AttributeValues#setDefault(EAttribute)->void::: attribute values set default
sun.font.AttributeValues#unset(EAttribute)->void::: attribute values unset
sun.font.AttributeValues#set(EAttribute, AttributeValues)->void::: attribute values set
sun.font.AttributeValues#set(EAttribute, Object)->void::: attribute values set
sun.font.AttributeValues#get(EAttribute)->Object::: attribute values get
sun.font.AttributeValues#merge(Map)->AttributeValues::: attribute values merge
sun.font.AttributeValues#merge(Map, int)->AttributeValues::: attribute values merge
sun.font.AttributeValues#merge(AttributeValues)->AttributeValues::: attribute values merge
sun.font.AttributeValues#merge(AttributeValues, int)->AttributeValues::: attribute values merge
sun.font.AttributeValues#fromMap(Map)->AttributeValues::: attribute values from map
sun.font.AttributeValues#fromMap(Map, int)->AttributeValues::: attribute values from map
sun.font.AttributeValues#toMap(Map)->Map::: attribute values to map
sun.font.AttributeValues#is16Hashtable(Hashtable)->boolean::: attribute values is16 hashtable
sun.font.AttributeValues#fromSerializableHashtable(Hashtable)->AttributeValues::: attribute values from serializable hashtable
sun.font.AttributeValues#toSerializableHashtable()->Hashtable::: attribute values to serializable hashtable
sun.font.AttributeValues#hashCode()->int::: attribute values hash code
sun.font.AttributeValues#equals(Object)->boolean::: attribute values equals
sun.font.AttributeValues#equals(AttributeValues)->boolean::: attribute values equals
sun.font.AttributeValues#clone()->AttributeValues::: attribute values clone
sun.font.AttributeValues#toString()->String::: attribute values to string
sun.font.AttributeValues#getJustification(Map)->float::: attribute values get justification
sun.font.AttributeValues#getNumericShaping(Map)->NumericShaper::: attribute values get numeric shaping
sun.font.AttributeValues#applyIMHighlight()->AttributeValues:::If this has an imHighlight, create copy of this with those attributes applied to it
sun.font.AttributeValues#getBaselineTransform(Map)->AffineTransform::: attribute values get baseline transform
sun.font.AttributeValues#getCharTransform(Map)->AffineTransform::: attribute values get char transform
sun.font.AttributeValues#updateDerivedTransforms()->void::: attribute values update derived transforms
sun.font.AttributeValues#extractXRotation(AffineTransform, boolean)->AffineTransform::: attribute values extract rotation
sun.font.AttributeValues#extractYRotation(AffineTransform, boolean)->AffineTransform::: attribute values extract rotation
sun.font.BidiUtils#getLevels(Bidi, byte[], int)->void:::Return the level of each character into the levels array starting at start
sun.font.BidiUtils#getLevels(Bidi)->byte[]:::Return an array containing the resolved bidi level of each character, in logical order.
sun.font.BidiUtils#createVisualToLogicalMap(byte[])->int[]:::Given level data, compute a a visual to logical mapping
sun.font.BidiUtils#createInverseMap(int[])->int[]:::Return the inverse position map
sun.font.BidiUtils#createContiguousOrder(int[])->int[]:::Return an array containing contiguous values from 0 to length having the same ordering as the source array
sun.font.BidiUtils#createNormalizedMap(int[], byte[], int, int)->int[]:::Return an array containing the data in the values array from start up to limit, normalized to fall within the range from 0 up to limit - start
sun.font.BidiUtils#reorderVisually(byte[], Object[])->void:::Reorder the objects in the array into visual order based on their levels
sun.font.CharToGlyphMapper#getMissingGlyphCode()->int::: char to glyph mapper get missing glyph code
sun.font.CharToGlyphMapper#canDisplay(char)->boolean::: char to glyph mapper can display
sun.font.CharToGlyphMapper#canDisplay(int)->boolean::: char to glyph mapper can display
sun.font.CharToGlyphMapper#charToGlyph(char)->int::: char to glyph mapper char to glyph
sun.font.CharToGlyphMapper#charToGlyph(int)->int::: char to glyph mapper char to glyph
sun.font.CharToGlyphMapper#charToVariationGlyph(int, int)->int::: char to glyph mapper char to variation glyph
sun.font.CharToGlyphMapper#getNumGlyphs()->int::: char to glyph mapper get num glyphs
sun.font.CharToGlyphMapper#charsToGlyphs(int, char[], int[])->void::: char to glyph mapper chars to glyphs
sun.font.CharToGlyphMapper#charsToGlyphsNS(int, char[], int[])->boolean::: char to glyph mapper chars to glyphs s
sun.font.CharToGlyphMapper#charsToGlyphs(int, int[], int[])->void::: char to glyph mapper chars to glyphs
sun.font.CharToGlyphMapper#isVariationSelector(int)->boolean::: char to glyph mapper is variation selector
sun.font.CMap#initialize(TrueTypeFont)->CMap::: map initialize
sun.font.CMap#getConverter(short)->char[]::: map get converter
sun.font.CMap#getConverterMap(short)->char[]::: map get converter map
sun.font.CMap#createCMap(ByteBuffer, int, char[])->CMap::: map create map
sun.font.CMap#getGlyph(int)->char::: map get glyph
sun.font.CMap.CMapFormat4#getGlyph(int)->char::: map format4 get glyph
sun.font.CMap.CMapFormat0#getGlyph(int)->char::: map format0 get glyph
sun.font.CMap.CMapFormat2#getGlyph(int)->char::: map format2 get glyph
sun.font.CMap.CMapFormat6#getGlyph(int)->char::: map format6 get glyph
sun.font.CMap.CMapFormat8#getGlyph(int)->char::: map format8 get glyph
sun.font.CMap.CMapFormat10#getGlyph(int)->char::: map format10 get glyph
sun.font.CMap.CMapFormat12#getGlyph(int)->char::: map format12 get glyph
sun.font.CMap.NullCMapClass#getGlyph(int)->char::: null map class get glyph
sun.font.CMap#getControlCodeGlyph(int, boolean)->int::: map get control code glyph
sun.font.CMap#getFormatCharGlyph(int)->char::: map get format char glyph
sun.font.CMap#getVariationGlyph(int, int)->char::: map get variation glyph
sun.font.CodePointIterator#setToStart()->void::: code point iterator set to start
sun.font.CodePointIterator#setToLimit()->void::: code point iterator set to limit
sun.font.CodePointIterator#next()->int::: code point iterator next
sun.font.CodePointIterator#prev()->int::: code point iterator prev
sun.font.CodePointIterator#charIndex()->int::: code point iterator char index
sun.font.CodePointIterator#create(char[])->CodePointIterator::: code point iterator create
sun.font.CodePointIterator#create(char[], int, int)->CodePointIterator::: code point iterator create
sun.font.CodePointIterator#create(CharSequence)->CodePointIterator::: code point iterator create
sun.font.CodePointIterator#create(CharacterIterator)->CodePointIterator::: code point iterator create
sun.font.CharArrayCodePointIterator#setToStart()->void::: char array code point iterator set to start
sun.font.CharArrayCodePointIterator#setToLimit()->void::: char array code point iterator set to limit
sun.font.CharArrayCodePointIterator#next()->int::: char array code point iterator next
sun.font.CharArrayCodePointIterator#prev()->int::: char array code point iterator prev
sun.font.CharArrayCodePointIterator#charIndex()->int::: char array code point iterator char index
sun.font.CharSequenceCodePointIterator#setToStart()->void::: char sequence code point iterator set to start
sun.font.CharSequenceCodePointIterator#setToLimit()->void::: char sequence code point iterator set to limit
sun.font.CharSequenceCodePointIterator#next()->int::: char sequence code point iterator next
sun.font.CharSequenceCodePointIterator#prev()->int::: char sequence code point iterator prev
sun.font.CharSequenceCodePointIterator#charIndex()->int::: char sequence code point iterator char index
sun.font.CharacterIteratorCodePointIterator#setToStart()->void::: character iterator code point iterator set to start
sun.font.CharacterIteratorCodePointIterator#setToLimit()->void::: character iterator code point iterator set to limit
sun.font.CharacterIteratorCodePointIterator#next()->int::: character iterator code point iterator next
sun.font.CharacterIteratorCodePointIterator#prev()->int::: character iterator code point iterator prev
sun.font.CharacterIteratorCodePointIterator#charIndex()->int::: character iterator code point iterator char index
sun.font.CompositeFont#replaceComponentFont(PhysicalFont, PhysicalFont)->void::: composite font replace component font
sun.font.CompositeFont#isExcludedChar(int, int)->boolean::: composite font is excluded char
sun.font.CompositeFont#getStyleMetrics(float, float[], int)->void::: composite font get style metrics
sun.font.CompositeFont#getNumSlots()->int::: composite font get num slots
sun.font.CompositeFont#getSlotFont(int)->PhysicalFont::: composite font get slot font
sun.font.CompositeFont#createStrike(FontStrikeDesc)->FontStrike::: composite font create strike
sun.font.CompositeFont#isStdComposite()->boolean::: composite font is std composite
sun.font.CompositeFont#getValidatedGlyphCode(int)->int::: composite font get validated glyph code
sun.font.CompositeFont#getMapper()->CharToGlyphMapper::: composite font get mapper
sun.font.CompositeFont#hasSupplementaryChars()->boolean::: composite font has supplementary chars
sun.font.CompositeFont#getNumGlyphs()->int::: composite font get num glyphs
sun.font.CompositeFont#getMissingGlyphCode()->int::: composite font get missing glyph code
sun.font.CompositeFont#canDisplay(char)->boolean::: composite font can display
sun.font.CompositeFont#useAAForPtSize(int)->boolean::: composite font use for pt size
sun.font.CompositeFont#toString()->String::: composite font to string
sun.font.CompositeFontDescriptor#getFaceName()->String::: composite font descriptor get face name
sun.font.CompositeFontDescriptor#getCoreComponentCount()->int::: composite font descriptor get core component count
sun.font.CompositeFontDescriptor#getComponentFaceNames()->String[]::: composite font descriptor get component face names
sun.font.CompositeFontDescriptor#getComponentFileNames()->String[]::: composite font descriptor get component file names
sun.font.CompositeFontDescriptor#getExclusionRanges()->int[]::: composite font descriptor get exclusion ranges
sun.font.CompositeFontDescriptor#getExclusionRangeLimits()->int[]::: composite font descriptor get exclusion range limits
sun.font.CompositeGlyphMapper#compositeGlyphCode(int, int)->int::: composite glyph mapper composite glyph code
sun.font.CompositeGlyphMapper#getNumGlyphs()->int::: composite glyph mapper get num glyphs
sun.font.CompositeGlyphMapper#charToGlyph(int)->int::: composite glyph mapper char to glyph
sun.font.CompositeGlyphMapper#charToGlyph(int, int)->int::: composite glyph mapper char to glyph
sun.font.CompositeGlyphMapper#charToGlyph(char)->int::: composite glyph mapper char to glyph
sun.font.CompositeGlyphMapper#charsToGlyphsNS(int, char[], int[])->boolean::: composite glyph mapper chars to glyphs s
sun.font.CompositeGlyphMapper#charsToGlyphs(int, char[], int[])->void::: composite glyph mapper chars to glyphs
sun.font.CompositeGlyphMapper#charsToGlyphs(int, int[], int[])->void::: composite glyph mapper chars to glyphs
sun.font.CompositeStrike#getStrikeForGlyph(int)->PhysicalStrike::: composite strike get strike for glyph
sun.font.CompositeStrike#getStrikeForSlot(int)->PhysicalStrike::: composite strike get strike for slot
sun.font.CompositeStrike#getNumGlyphs()->int::: composite strike get num glyphs
sun.font.CompositeStrike#getFontMetrics()->StrikeMetrics::: composite strike get font metrics
sun.font.CompositeStrike#getGlyphImagePtrs(int[], long[], int)->void::: composite strike get glyph image ptrs
sun.font.CompositeStrike#getGlyphImagePtr(int)->long::: composite strike get glyph image ptr
sun.font.CompositeStrike#getGlyphImageBounds(int, Point2D.Float, Rectangle)->void::: composite strike get glyph image bounds
sun.font.CompositeStrike#getGlyphMetrics(int)->Point2D.Float::: composite strike get glyph metrics
sun.font.CompositeStrike#getCharMetrics(char)->Point2D.Float::: composite strike get char metrics
sun.font.CompositeStrike#getGlyphAdvance(int)->float::: composite strike get glyph advance
sun.font.CompositeStrike#getCodePointAdvance(int)->float::: composite strike get code point advance
sun.font.CompositeStrike#getGlyphOutlineBounds(int)->Rectangle2D.Float::: composite strike get glyph outline bounds
sun.font.CompositeStrike#getGlyphOutline(int, float, float)->GeneralPath::: composite strike get glyph outline
sun.font.CompositeStrike#getGlyphVectorOutline(int[], float, float)->GeneralPath::: composite strike get glyph vector outline
sun.font.CoreMetrics#get(LineMetrics)->CoreMetrics::: core metrics get
sun.font.CoreMetrics#hashCode()->int::: core metrics hash code
sun.font.CoreMetrics#equals(Object)->boolean::: core metrics equals
sun.font.CoreMetrics#equals(CoreMetrics)->boolean::: core metrics equals
sun.font.CoreMetrics#effectiveBaselineOffset(float[])->float::: core metrics effective baseline offset
sun.font.CreatedFontTracker#getTracker()->CreatedFontTracker::: created font tracker get tracker
sun.font.CreatedFontTracker#getNumBytes()->int::: created font tracker get num bytes
sun.font.CreatedFontTracker#addBytes(int)->void::: created font tracker add bytes
sun.font.CreatedFontTracker#subBytes(int)->void::: created font tracker sub bytes
sun.font.CreatedFontTracker#acquirePermit()->boolean::: created font tracker acquire permit
sun.font.CreatedFontTracker#releasePermit()->void::: created font tracker release permit
sun.font.CreatedFontTracker#add(File)->void::: created font tracker add
sun.font.CreatedFontTracker#set(File, OutputStream)->void::: created font tracker set
sun.font.CreatedFontTracker#remove(File)->void::: created font tracker remove
sun.font.Decoration.Label#getCoreMetrics()->CoreMetrics::: label get core metrics
sun.font.Decoration.Label#getLogicalBounds()->Rectangle2D::: label get logical bounds
sun.font.Decoration.Label#handleDraw(Graphics2D, float, float)->void::: label handle draw
sun.font.Decoration.Label#handleGetCharVisualBounds(int)->Rectangle2D::: label handle get char visual bounds
sun.font.Decoration.Label#handleGetVisualBounds()->Rectangle2D::: label handle get visual bounds
sun.font.Decoration.Label#handleGetOutline(float, float)->Shape::: label handle get outline
sun.font.Decoration#getPlainDecoration()->Decoration:::Return a Decoration which does nothing.
sun.font.Decoration#getDecoration(AttributeValues)->Decoration::: decoration get decoration
sun.font.Decoration#getDecoration(Map)->Decoration:::Return a Decoration appropriate for the given Map.
sun.font.Decoration#drawTextAndDecorations(Label, Graphics2D, float, float)->void::: decoration draw text and decorations
sun.font.Decoration#getVisualBounds(Label)->Rectangle2D::: decoration get visual bounds
sun.font.Decoration#getCharVisualBounds(Label, int)->Rectangle2D::: decoration get char visual bounds
sun.font.Decoration#getOutline(Label, float, float)->Shape::: decoration get outline
sun.font.DelegatingShape#getBounds()->Rectangle::: delegating shape get bounds
sun.font.DelegatingShape#getBounds2D()->Rectangle2D::: delegating shape get bounds2 d
sun.font.DelegatingShape#contains(double, double)->boolean::: delegating shape contains
sun.font.DelegatingShape#contains(Point2D)->boolean::: delegating shape contains
sun.font.DelegatingShape#intersects(double, double, double, double)->boolean::: delegating shape intersects
sun.font.DelegatingShape#intersects(Rectangle2D)->boolean::: delegating shape intersects
sun.font.DelegatingShape#contains(double, double, double, double)->boolean::: delegating shape contains
sun.font.DelegatingShape#contains(Rectangle2D)->boolean::: delegating shape contains
sun.font.DelegatingShape#getPathIterator(AffineTransform)->PathIterator::: delegating shape get path iterator
sun.font.DelegatingShape#getPathIterator(AffineTransform, double)->PathIterator::: delegating shape get path iterator
sun.font.ExtendedTextLabel#getNumCharacters()->int:::Return the number of characters represented by this label.
sun.font.ExtendedTextLabel#getCoreMetrics()->CoreMetrics:::Return the line metrics for all text in this label.
sun.font.ExtendedTextLabel#getCharX(int)->float:::Return the x location of the character at the given logical index.
sun.font.ExtendedTextLabel#getCharY(int)->float:::Return the y location of the character at the given logical index.
sun.font.ExtendedTextLabel#getCharAdvance(int)->float:::Return the advance of the character at the given logical index.
sun.font.ExtendedTextLabel#getCharVisualBounds(int, float, float)->Rectangle2D:::Return the visual bounds of the character at the given logical index
sun.font.ExtendedTextLabel#logicalToVisual(int)->int:::Return the visual index of the character at the given logical index.
sun.font.ExtendedTextLabel#visualToLogical(int)->int:::Return the logical index of the character at the given visual index.
sun.font.ExtendedTextLabel#getLineBreakIndex(int, float)->int:::Return the logical index of the character, starting with the character at logicalStart, whose accumulated advance exceeds width
sun.font.ExtendedTextLabel#getAdvanceBetween(int, int)->float:::Return the accumulated advances of all characters between logicalStart and logicalLimit.
sun.font.ExtendedTextLabel#caretAtOffsetIsValid(int)->boolean:::Return whether a caret can exist on the leading edge of the character at offset
sun.font.ExtendedTextLabel#getCharVisualBounds(int)->Rectangle2D:::A convenience overload of getCharVisualBounds that defaults the label origin to 0, 0.
sun.font.ExtendedTextLabel#getSubset(int, int, int)->TextLineComponent::: extended text label get subset
sun.font.ExtendedTextLabel#getNumJustificationInfos()->int:::Return the number of justification records this uses.
sun.font.ExtendedTextLabel#getJustificationInfos(GlyphJustificationInfo[], int, int, int)->void:::Return GlyphJustificationInfo objects for the characters between charStart and charLimit, starting at offset infoStart
sun.font.ExtendedTextLabel#applyJustificationDeltas(float[], int, boolean[])->TextLineComponent:::Apply deltas to the data in this component, starting at offset deltaStart, and return the new component
sun.font.ExtendedTextSourceLabel#getLogicalBounds()->Rectangle2D::: extended text source label get logical bounds
sun.font.ExtendedTextSourceLabel#getLogicalBounds(float, float)->Rectangle2D::: extended text source label get logical bounds
sun.font.ExtendedTextSourceLabel#getAdvance()->float::: extended text source label get advance
sun.font.ExtendedTextSourceLabel#getVisualBounds(float, float)->Rectangle2D::: extended text source label get visual bounds
sun.font.ExtendedTextSourceLabel#getAlignBounds(float, float)->Rectangle2D::: extended text source label get align bounds
sun.font.ExtendedTextSourceLabel#getItalicBounds(float, float)->Rectangle2D::: extended text source label get italic bounds
sun.font.ExtendedTextSourceLabel#getPixelBounds(FontRenderContext, float, float)->Rectangle::: extended text source label get pixel bounds
sun.font.ExtendedTextSourceLabel#isSimple()->boolean::: extended text source label is simple
sun.font.ExtendedTextSourceLabel#getBaselineTransform()->AffineTransform::: extended text source label get baseline transform
sun.font.ExtendedTextSourceLabel#handleGetOutline(float, float)->Shape::: extended text source label handle get outline
sun.font.ExtendedTextSourceLabel#getOutline(float, float)->Shape::: extended text source label get outline
sun.font.ExtendedTextSourceLabel#handleDraw(Graphics2D, float, float)->void::: extended text source label handle draw
sun.font.ExtendedTextSourceLabel#draw(Graphics2D, float, float)->void::: extended text source label draw
sun.font.ExtendedTextSourceLabel#createLogicalBounds()->Rectangle2D:::The logical bounds extends from the origin of the glyphvector to the position at which a following glyphvector's origin should be placed
sun.font.ExtendedTextSourceLabel#handleGetVisualBounds()->Rectangle2D::: extended text source label handle get visual bounds
sun.font.ExtendedTextSourceLabel#createAlignBounds()->Rectangle2D:::Like createLogicalBounds except ignore leading and logically trailing white space
sun.font.ExtendedTextSourceLabel#createItalicBounds()->Rectangle2D::: extended text source label create italic bounds
sun.font.ExtendedTextSourceLabel#createGV()->StandardGlyphVector::: extended text source label create v
sun.font.ExtendedTextSourceLabel#getNumCharacters()->int::: extended text source label get num characters
sun.font.ExtendedTextSourceLabel#getCoreMetrics()->CoreMetrics::: extended text source label get core metrics
sun.font.ExtendedTextSourceLabel#getCharX(int)->float::: extended text source label get char x
sun.font.ExtendedTextSourceLabel#getCharY(int)->float::: extended text source label get char y
sun.font.ExtendedTextSourceLabel#getCharAdvance(int)->float::: extended text source label get char advance
sun.font.ExtendedTextSourceLabel#handleGetCharVisualBounds(int)->Rectangle2D::: extended text source label handle get char visual bounds
sun.font.ExtendedTextSourceLabel#getCharVisualBounds(int, float, float)->Rectangle2D::: extended text source label get char visual bounds
sun.font.ExtendedTextSourceLabel#logicalToVisual(int)->int::: extended text source label logical to visual
sun.font.ExtendedTextSourceLabel#visualToLogical(int)->int::: extended text source label visual to logical
sun.font.ExtendedTextSourceLabel#getLineBreakIndex(int, float)->int::: extended text source label get line break index
sun.font.ExtendedTextSourceLabel#getAdvanceBetween(int, int)->float::: extended text source label get advance between
sun.font.ExtendedTextSourceLabel#caretAtOffsetIsValid(int)->boolean::: extended text source label caret at offset is valid
sun.font.ExtendedTextSourceLabel#createCharinfo()->float[]::: extended text source label create charinfo
sun.font.ExtendedTextSourceLabel#l2v(int)->int:::Map logical character index to visual character index
sun.font.ExtendedTextSourceLabel#v2l(int)->int:::Map visual character index to logical character index
sun.font.ExtendedTextSourceLabel#getSubset(int, int, int)->TextLineComponent::: extended text source label get subset
sun.font.ExtendedTextSourceLabel#toString()->String::: extended text source label to string
sun.font.ExtendedTextSourceLabel#getNumJustificationInfos()->int::: extended text source label get num justification infos
sun.font.ExtendedTextSourceLabel#getJustificationInfos(GlyphJustificationInfo[], int, int, int)->void::: extended text source label get justification infos
sun.font.ExtendedTextSourceLabel#applyJustificationDeltas(float[], int, boolean[])->TextLineComponent::: extended text source label apply justification deltas
sun.font.FileFont#createStrike(FontStrikeDesc)->FontStrike::: file font create strike
sun.font.FileFont#checkUseNatives()->boolean::: file font check use natives
sun.font.FileFont#close()->void::: file font close
sun.font.FileFont#readBlock(int, int)->ByteBuffer::: file font read block
sun.font.FileFont#canDoStyle(int)->boolean::: file font can do style
sun.font.FileFont#setFileToRemove(List, File, int, CreatedFontTracker)->void::: file font set file to remove
sun.font.FileFont#deregisterFontAndClearStrikeCache()->void::: file font deregister font and clear strike cache
sun.font.FileFont#getFontMetrics(long)->StrikeMetrics::: file font get font metrics
sun.font.FileFont#getGlyphAdvance(long, int)->float::: file font get glyph advance
sun.font.FileFont#getGlyphMetrics(long, int, Point2D.Float)->void::: file font get glyph metrics
sun.font.FileFont#getGlyphImage(long, int)->long::: file font get glyph image
sun.font.FileFont#getGlyphOutlineBounds(long, int)->Rectangle2D.Float::: file font get glyph outline bounds
sun.font.FileFont#getGlyphOutline(long, int, float, float)->GeneralPath::: file font get glyph outline
sun.font.FileFont#getGlyphVectorOutline(long, int[], int, float, float)->GeneralPath::: file font get glyph vector outline
sun.font.FileFont#getScaler()->FontScaler::: file font get scaler
sun.font.FileFont#getUnitsPerEm()->long::: file font get units per em
sun.font.FileFont#getPublicFileName()->String::: file font get public file name
sun.font.FileFontStrike#getNumGlyphs()->int::: file font strike get num glyphs
sun.font.FileFontStrike#getGlyphImageFromNative(int)->long::: file font strike get glyph image from native
sun.font.FileFontStrike#getGlyphImageFromWindows(int)->long::: file font strike get glyph image from windows
sun.font.FileFontStrike#getGlyphImageFromX11(int)->long::: file font strike get glyph image from x11
sun.font.FileFontStrike#getGlyphImagePtr(int)->long::: file font strike get glyph image ptr
sun.font.FileFontStrike#getGlyphImagePtrs(int[], long[], int)->void::: file font strike get glyph image ptrs
sun.font.FileFontStrike#getSlot0GlyphImagePtrs(int[], long[], int)->int::: file font strike get slot0 glyph image ptrs
sun.font.FileFontStrike#getCachedGlyphPtr(int)->long::: file font strike get cached glyph ptr
sun.font.FileFontStrike#getGlyphAdvance(int)->float::: file font strike get glyph advance
sun.font.FileFontStrike#getCodePointAdvance(int)->float::: file font strike get code point advance
sun.font.FileFontStrike#getGlyphImageBounds(int, Point2D.Float, Rectangle)->void:::Result and pt are both in device space.
sun.font.FileFontStrike#getFontMetrics()->StrikeMetrics::: file font strike get font metrics
sun.font.FileFontStrike#getGlyphMetrics(int)->Point2D.Float::: file font strike get glyph metrics
sun.font.FileFontStrike#getCharMetrics(char)->Point2D.Float::: file font strike get char metrics
sun.font.FileFontStrike#getGlyphOutlineBounds(int)->Rectangle2D.Float::: file font strike get glyph outline bounds
sun.font.FileFontStrike#getOutlineBounds(int)->Rectangle2D::: file font strike get outline bounds
sun.font.FileFontStrike#getGlyphOutline(int, float, float)->GeneralPath::: file font strike get glyph outline
sun.font.FileFontStrike#getGlyphVectorOutline(int[], float, float)->GeneralPath::: file font strike get glyph vector outline
sun.font.FileFontStrike#adjustPoint(Point2D.Float)->void::: file font strike adjust point
sun.font.Font2D#getStyle()->int::: font2 d get style
sun.font.Font2D#setStyle()->void::: font2 d set style
sun.font.Font2D#getWidth()->int::: font2 d get width
sun.font.Font2D#getWeight()->int::: font2 d get weight
sun.font.Font2D#getRank()->int::: font2 d get rank
sun.font.Font2D#setRank(int)->void::: font2 d set rank
sun.font.Font2D#getMapper()->CharToGlyphMapper::: font2 d get mapper
sun.font.Font2D#getValidatedGlyphCode(int)->int::: font2 d get validated glyph code
sun.font.Font2D#createStrike(FontStrikeDesc)->FontStrike::: font2 d create strike
sun.font.Font2D#getStrike(Font)->FontStrike::: font2 d get strike
sun.font.Font2D#getStrike(Font, AffineTransform, int, int)->FontStrike::: font2 d get strike
sun.font.Font2D#getStrike(Font, AffineTransform, AffineTransform, int, int)->FontStrike::: font2 d get strike
sun.font.Font2D#getStrike(Font, FontRenderContext)->FontStrike::: font2 d get strike
sun.font.Font2D#getStrike(FontStrikeDesc)->FontStrike::: font2 d get strike
sun.font.Font2D#removeFromCache(FontStrikeDesc)->void::: font2 d remove from cache
sun.font.Font2D#getFontMetrics(Font, AffineTransform, Object, Object, float[])->void:::The length of the metrics array must be >= 8
sun.font.Font2D#getStyleMetrics(float, float[], int)->void:::The length of the metrics array must be >= offset+4, and offset must be >= 0
sun.font.Font2D#getFontMetrics(Font, FontRenderContext, float[])->void:::The length of the metrics array must be >= 4
sun.font.Font2D#getTableBytes(int)->byte[]::: font2 d get table bytes
sun.font.Font2D#getPlatformNativeFontPtr()->long::: font2 d get platform native font ptr
sun.font.Font2D#getUnitsPerEm()->long::: font2 d get units per em
sun.font.Font2D#supportsEncoding(String)->boolean::: font2 d supports encoding
sun.font.Font2D#canDoStyle(int)->boolean::: font2 d can do style
sun.font.Font2D#useAAForPtSize(int)->boolean::: font2 d use for pt size
sun.font.Font2D#hasSupplementaryChars()->boolean::: font2 d has supplementary chars
sun.font.Font2D#getPostscriptName()->String::: font2 d get postscript name
sun.font.Font2D#getFontName(Locale)->String::: font2 d get font name
sun.font.Font2D#getFamilyName(Locale)->String::: font2 d get family name
sun.font.Font2D#getNumGlyphs()->int::: font2 d get num glyphs
sun.font.Font2D#charToGlyph(int)->int::: font2 d char to glyph
sun.font.Font2D#charToVariationGlyph(int, int)->int::: font2 d char to variation glyph
sun.font.Font2D#getMissingGlyphCode()->int::: font2 d get missing glyph code
sun.font.Font2D#canDisplay(char)->boolean::: font2 d can display
sun.font.Font2D#canDisplay(int)->boolean::: font2 d can display
sun.font.Font2D#getBaselineFor(char)->byte::: font2 d get baseline for
sun.font.Font2D#getItalicAngle(Font, AffineTransform, Object, Object)->float::: font2 d get italic angle
sun.font.FontAccess#setFontAccess(FontAccess)->void::: font access set font access
sun.font.FontAccess#getFontAccess()->FontAccess::: font access get font access
sun.font.FontAccess#getFont2D(Font)->Font2D::: font access get font2 d
sun.font.FontAccess#setFont2D(Font, Font2DHandle)->void::: font access set font2 d
sun.font.FontAccess#setCreatedFont(Font)->void::: font access set created font
sun.font.FontAccess#isCreatedFont(Font)->boolean::: font access is created font
sun.font.FontAccess#getFontPeer(Font)->FontPeer::: font access get font peer
sun.font.FontDesignMetrics#getMetrics(Font)->FontDesignMetrics::: font design metrics get metrics
sun.font.FontDesignMetrics#getMetrics(Font, FontRenderContext)->FontDesignMetrics::: font design metrics get metrics
sun.font.FontDesignMetrics#getFontRenderContext()->FontRenderContext::: font design metrics get font render context
sun.font.FontDesignMetrics#charWidth(char)->int::: font design metrics char width
sun.font.FontDesignMetrics#charWidth(int)->int::: font design metrics char width
sun.font.FontDesignMetrics#stringWidth(String)->int::: font design metrics string width
sun.font.FontDesignMetrics#charsWidth(char[], int, int)->int::: font design metrics chars width
sun.font.FontDesignMetrics#getSimpleBounds(char[], int, int)->Rectangle2D:::This method is called from java.awt.Font only after verifying the arguments and that the text is simple and there are no layout attributes, font transform etc.
sun.font.FontDesignMetrics#getWidths()->int[]::: font design metrics get widths
sun.font.FontDesignMetrics#getMaxAdvance()->int::: font design metrics get max advance
sun.font.FontDesignMetrics#getAscent()->int::: font design metrics get ascent
sun.font.FontDesignMetrics#getDescent()->int::: font design metrics get descent
sun.font.FontDesignMetrics#getLeading()->int::: font design metrics get leading
sun.font.FontDesignMetrics#getHeight()->int::: font design metrics get height
sun.font.FontFamily#getFamily(String)->FontFamily::: font family get family
sun.font.FontFamily#getAllFamilyNames()->String[]::: font family get all family names
sun.font.FontFamily#remove(Font2D)->void::: font family remove
sun.font.FontFamily#getFamilyName()->String::: font family get family name
sun.font.FontFamily#getRank()->int::: font family get rank
sun.font.FontFamily#setFont(Font2D, int)->void::: font family set font
sun.font.FontFamily#getFontWithExactStyleMatch(int)->Font2D::: font family get font with exact style match
sun.font.FontFamily#getFont(int)->Font2D::: font family get font
sun.font.FontFamily#getClosestStyle(int)->Font2D::: font family get closest style
sun.font.FontFamily#addLocaleNames(FontFamily, String[])->void::: font family add locale names
sun.font.FontFamily#getLocaleFamily(String)->FontFamily::: font family get locale family
sun.font.FontFamily#getAllFontFamilies()->FontFamily[]::: font family get all font families
sun.font.FontFamily#toString()->String::: font family to string
sun.font.FontLineMetrics#getNumChars()->int::: font line metrics get num chars
sun.font.FontLineMetrics#getAscent()->float::: font line metrics get ascent
sun.font.FontLineMetrics#getDescent()->float::: font line metrics get descent
sun.font.FontLineMetrics#getLeading()->float::: font line metrics get leading
sun.font.FontLineMetrics#getHeight()->float::: font line metrics get height
sun.font.FontLineMetrics#getBaselineIndex()->int::: font line metrics get baseline index
sun.font.FontLineMetrics#getBaselineOffsets()->float[]::: font line metrics get baseline offsets
sun.font.FontLineMetrics#getStrikethroughOffset()->float::: font line metrics get strikethrough offset
sun.font.FontLineMetrics#getStrikethroughThickness()->float::: font line metrics get strikethrough thickness
sun.font.FontLineMetrics#getUnderlineOffset()->float::: font line metrics get underline offset
sun.font.FontLineMetrics#getUnderlineThickness()->float::: font line metrics get underline thickness
sun.font.FontLineMetrics#hashCode()->int::: font line metrics hash code
sun.font.FontLineMetrics#equals(Object)->boolean::: font line metrics equals
sun.font.FontLineMetrics#clone()->Object::: font line metrics clone
sun.font.FontManager#registerFont(Font)->boolean:::Register a new font
sun.font.FontManager#deRegisterBadFont(Font2D)->void::: font manager de register bad font
sun.font.FontManager#findFont2D(String, int, int)->Font2D:::The client supplies a name and a style
sun.font.FontManager#createFont2D(File, int, boolean, boolean, CreatedFontTracker)->Font2D[]:::Creates a Font2D for the specified font file, that is expected to be in the specified font format (according to the constants in java.awt.Font)
sun.font.FontManager#usingPerAppContextComposites()->boolean:::If usingPerAppContextComposites is true, we are in "applet" (eg browser) environment and at least one context has selected an alternate composite font behaviour.
sun.font.FontManager#getNewComposite(String, int, Font2DHandle)->Font2DHandle:::Creates a derived composite font from the specified font (handle).
sun.font.FontManager#preferLocaleFonts()->void:::Indicates a preference for locale-specific fonts in the mapping of logical fonts to physical fonts
sun.font.FontManager#preferProportionalFonts()->void:::preferLocaleFonts() and preferProportionalFonts() are called to inform that the application could be using an alternate set of composite fonts, and so the implementation should try to create a CompositeFonts with this directive in mind.
sun.font.FontManagerFactory#getInstance()->FontManager:::Get a valid FontManager implementation for the current platform.
sun.font.FontManagerForSGE#getCreatedFonts()->Font[]:::Return an array of created Fonts, or null, if no fonts were created yet.
sun.font.FontManagerForSGE#getCreatedFontFamilyNames()->TreeMap:::Similar to getCreatedFonts, but returns a TreeMap of fonts by family name.
sun.font.FontManagerForSGE#getAllInstalledFonts()->Font[]:::Returns all fonts installed in this environment.
sun.font.FontManagerForSGE#getInstalledFontFamilyNames(Locale)->String[]::: font manager for e get installed font family names
sun.font.FontManagerForSGE#useAlternateFontforJALocales()->void::: font manager for e use alternate fontfor locales
sun.font.FontManagerNativeLibrary#load()->void::: font manager native library load
sun.font.FontResolver#getFontIndex(char)->int:::Return an index for the given character
sun.font.FontResolver#getFontIndex(int)->int::: font resolver get font index
sun.font.FontResolver#nextFontRunIndex(CodePointIterator)->int:::Determines the font index for the code point at the current position in the iterator, then advances the iterator to the first code point that has a different index or until the iterator is DONE, and returns the font index.
sun.font.FontResolver#getFont(int, Map)->Font:::Return a Font from a given font index with properties from attributes
sun.font.FontResolver#getInstance()->FontResolver:::Return a shared instance of FontResolver.
sun.font.FontRunIterator#init(CompositeFont, char[], int, int)->void::: font run iterator init
sun.font.FontRunIterator#getFont()->PhysicalFont::: font run iterator get font
sun.font.FontRunIterator#getGlyphMask()->int::: font run iterator get glyph mask
sun.font.FontRunIterator#getPos()->int::: font run iterator get pos
sun.font.FontRunIterator#next(int, int)->boolean::: font run iterator next
sun.font.FontRunIterator#next()->boolean::: font run iterator next
sun.font.FontRunIterator#nextCodePoint()->int::: font run iterator next code point
sun.font.FontRunIterator#nextCodePoint(int)->int::: font run iterator next code point
sun.font.FontRunIterator#pushback(int)->void::: font run iterator pushback
sun.font.FontScaler#getScaler(Font2D, int, boolean, int)->FontScaler::: font scaler get scaler
sun.font.FontScaler#getNullScaler()->FontScaler::: font scaler get null scaler
sun.font.FontScaler#getFontMetrics(long)->StrikeMetrics::: font scaler get font metrics
sun.font.FontScaler#getGlyphAdvance(long, int)->float::: font scaler get glyph advance
sun.font.FontScaler#getGlyphMetrics(long, int, Point2D.Float)->void::: font scaler get glyph metrics
sun.font.FontScaler#getGlyphImage(long, int)->long::: font scaler get glyph image
sun.font.FontScaler#getGlyphOutlineBounds(long, int)->Rectangle2D.Float::: font scaler get glyph outline bounds
sun.font.FontScaler#getGlyphOutline(long, int, float, float)->GeneralPath::: font scaler get glyph outline
sun.font.FontScaler#getGlyphVectorOutline(long, int[], int, float, float)->GeneralPath::: font scaler get glyph vector outline
sun.font.FontScaler#dispose()->void::: font scaler dispose
sun.font.FontScaler#disposeScaler()->void:::Used when the native resources held by the scaler need to be released before the 2D disposer runs.
sun.font.FontScaler#getNumGlyphs()->int::: font scaler get num glyphs
sun.font.FontScaler#getMissingGlyphCode()->int::: font scaler get missing glyph code
sun.font.FontScaler#getGlyphCode(char)->int::: font scaler get glyph code
sun.font.FontScaler#getGlyphPoint(long, int, int)->Point2D.Float::: font scaler get glyph point
sun.font.FontScaler#getUnitsPerEm()->long::: font scaler get units per em
sun.font.FontScaler#createScalerContext(double[], int, int, float, float, boolean)->long::: font scaler create scaler context
sun.font.FontScaler#invalidateScalerContext(long)->void::: font scaler invalidate scaler context
sun.font.FontStrike#getNumGlyphs()->int::: font strike get num glyphs
sun.font.FontStrike#getFontMetrics()->StrikeMetrics::: font strike get font metrics
sun.font.FontStrike#getGlyphImagePtrs(int[], long[], int)->void::: font strike get glyph image ptrs
sun.font.FontStrike#getGlyphImagePtr(int)->long::: font strike get glyph image ptr
sun.font.FontStrike#getGlyphImageBounds(int, Point2D.Float, Rectangle)->void::: font strike get glyph image bounds
sun.font.FontStrike#getGlyphMetrics(int)->Point2D.Float::: font strike get glyph metrics
sun.font.FontStrike#getCharMetrics(char)->Point2D.Float::: font strike get char metrics
sun.font.FontStrike#getGlyphAdvance(int)->float::: font strike get glyph advance
sun.font.FontStrike#getCodePointAdvance(int)->float::: font strike get code point advance
sun.font.FontStrike#getGlyphOutlineBounds(int)->Rectangle2D.Float::: font strike get glyph outline bounds
sun.font.FontStrike#getGlyphOutline(int, float, float)->GeneralPath::: font strike get glyph outline
sun.font.FontStrike#getGlyphVectorOutline(int[], float, float)->GeneralPath::: font strike get glyph vector outline
sun.font.FontStrikeDesc#hashCode()->int::: font strike desc hash code
sun.font.FontStrikeDesc#equals(Object)->boolean::: font strike desc equals
sun.font.FontStrikeDesc#getAAHintIntVal(Object, Font2D, int)->int::: font strike desc get hint int val
sun.font.FontStrikeDesc#getAAHintIntVal(Font2D, Font, FontRenderContext)->int::: font strike desc get hint int val
sun.font.FontStrikeDesc#getFMHintIntVal(Object)->int::: font strike desc get hint int val
sun.font.FontStrikeDesc#toString()->String::: font strike desc to string
sun.font.FontStrikeDisposer#dispose()->void::: font strike disposer dispose
sun.font.FontSubstitution#getCompositeFont2D()->CompositeFont::: font substitution get composite font2 d
sun.font.FontUtilities#getFont2D(Font)->Font2D:::Calls the private getFont2D() method in java.awt.Font objects.
sun.font.FontUtilities#isComplexScript(char[], int, int)->boolean:::Return true if there any characters which would trigger layout
sun.font.FontUtilities#isComplexText(char[], int, int)->boolean:::If there is anything in the text which triggers a case where char->glyph does not map 1:1 in straightforward left->right ordering, then this method returns true
sun.font.FontUtilities#isNonSimpleChar(char)->boolean::: font utilities is non simple char
sun.font.FontUtilities#isComplexCharCode(int)->boolean::: font utilities is complex char code
sun.font.FontUtilities#getLogger()->PlatformLogger::: font utilities get logger
sun.font.FontUtilities#isLogging()->boolean::: font utilities is logging
sun.font.FontUtilities#debugFonts()->boolean::: font utilities debug fonts
sun.font.FontUtilities#fontSupportsDefaultEncoding(Font)->boolean::: font utilities font supports default encoding
sun.font.FontUtilities#getCompositeFontUIResource(Font)->FontUIResource::: font utilities get composite font resource
sun.font.FontUtilities#mapFcName(String)->String::: font utilities map fc name
sun.font.FontUtilities#getFontConfigFUIR(String, int, int)->FontUIResource::: font utilities get font config r
sun.font.FontUtilities#textLayoutIsCompatible(Font)->boolean:::Used by windows printing to assess if a font is likely to be layout compatible with JDK TrueType fonts should be, but if they have no GPOS table, but do have a GSUB table, then they are probably older fonts GDI handles differently.
sun.font.FreetypeFontScaler#getFontMetrics(long)->StrikeMetrics::: freetype font scaler get font metrics
sun.font.FreetypeFontScaler#getGlyphAdvance(long, int)->float::: freetype font scaler get glyph advance
sun.font.FreetypeFontScaler#getGlyphMetrics(long, int, Point2D.Float)->void::: freetype font scaler get glyph metrics
sun.font.FreetypeFontScaler#getGlyphImage(long, int)->long::: freetype font scaler get glyph image
sun.font.FreetypeFontScaler#getGlyphOutlineBounds(long, int)->Rectangle2D.Float::: freetype font scaler get glyph outline bounds
sun.font.FreetypeFontScaler#getGlyphOutline(long, int, float, float)->GeneralPath::: freetype font scaler get glyph outline
sun.font.FreetypeFontScaler#getGlyphVectorOutline(long, int[], int, float, float)->GeneralPath::: freetype font scaler get glyph vector outline
sun.font.FreetypeFontScaler#dispose()->void::: freetype font scaler dispose
sun.font.FreetypeFontScaler#disposeScaler()->void::: freetype font scaler dispose scaler
sun.font.FreetypeFontScaler#getNumGlyphs()->int::: freetype font scaler get num glyphs
sun.font.FreetypeFontScaler#getMissingGlyphCode()->int::: freetype font scaler get missing glyph code
sun.font.FreetypeFontScaler#getGlyphCode(char)->int::: freetype font scaler get glyph code
sun.font.FreetypeFontScaler#getGlyphPoint(long, int, int)->Point2D.Float::: freetype font scaler get glyph point
sun.font.FreetypeFontScaler#getUnitsPerEm()->long::: freetype font scaler get units per em
sun.font.FreetypeFontScaler#createScalerContext(double[], int, int, float, float, boolean)->long::: freetype font scaler create scaler context
sun.font.FreetypeFontScaler#invalidateScalerContext(long)->void::: freetype font scaler invalidate scaler context
sun.font.GlyphDisposedListener#glyphDisposed(ArrayList)->void::: glyph disposed listener glyph disposed
sun.font.GlyphLayout.LayoutEngineKey#init(Font2D, int, int)->void::: layout engine key init
sun.font.GlyphLayout.LayoutEngineKey#copy()->LayoutEngineKey::: layout engine key copy
sun.font.GlyphLayout.LayoutEngineKey#font()->Font2D::: layout engine key font
sun.font.GlyphLayout.LayoutEngineKey#script()->int::: layout engine key script
sun.font.GlyphLayout.LayoutEngineKey#lang()->int::: layout engine key lang
sun.font.GlyphLayout.LayoutEngineKey#equals(Object)->boolean::: layout engine key equals
sun.font.GlyphLayout.LayoutEngineKey#hashCode()->int::: layout engine key hash code
sun.font.GlyphLayout.LayoutEngineFactory#getEngine(Font2D, int, int)->LayoutEngine:::Given a font, script, and language, determine a layout engine to use.
sun.font.GlyphLayout.LayoutEngineFactory#getEngine(LayoutEngineKey)->LayoutEngine:::Given a key, determine a layout engine to use.
sun.font.GlyphLayout.LayoutEngine#layout(FontStrikeDesc, float[], float, int, int, TextRecord, int, Point2D.Float, GVData)->void:::Given a strike descriptor, text, rtl flag, and starting point, append information about glyphs, positions, and character indices to the glyphvector data, and advance the point
sun.font.GlyphLayout#get(LayoutEngineFactory)->GlyphLayout:::Return a new instance of GlyphLayout, using the provided layout engine factory
sun.font.GlyphLayout#done(GlyphLayout)->void:::Return the old instance of GlyphLayout when you are done
sun.font.GlyphLayout#layout(Font, FontRenderContext, char[], int, int, int, StandardGlyphVector)->StandardGlyphVector:::Create a glyph vector.
sun.font.GlyphLayout.GVData#init(int)->void::: data init
sun.font.GlyphLayout.GVData#grow()->void::: data grow
sun.font.GlyphLayout.GVData#grow(int)->void::: data grow
sun.font.GlyphLayout.GVData#adjustPositions(AffineTransform)->void::: data adjust positions
sun.font.GlyphLayout.GVData#createGlyphVector(Font, FontRenderContext, StandardGlyphVector)->StandardGlyphVector::: data create glyph vector
sun.font.GlyphList#ensureCapacity(int)->void::: glyph list ensure capacity
sun.font.GlyphList#getInstance()->GlyphList::: glyph list get instance
sun.font.GlyphList#setFromString(FontInfo, String, float, float)->boolean::: glyph list set from string
sun.font.GlyphList#setFromChars(FontInfo, char[], int, int, float, float)->boolean::: glyph list set from chars
sun.font.GlyphList#setFromGlyphVector(FontInfo, GlyphVector, float, float)->void::: glyph list set from glyph vector
sun.font.GlyphList#getBounds()->int[]::: glyph list get bounds
sun.font.GlyphList#setGlyphIndex(int)->void::: glyph list set glyph index
sun.font.GlyphList#getMetrics()->int[]::: glyph list get metrics
sun.font.GlyphList#getGrayBits()->byte[]::: glyph list get gray bits
sun.font.GlyphList#getImages()->long[]::: glyph list get images
sun.font.GlyphList#usePositions()->boolean::: glyph list use positions
sun.font.GlyphList#getPositions()->float[]::: glyph list get positions
sun.font.GlyphList#getX()->float::: glyph list get x
sun.font.GlyphList#getY()->float::: glyph list get y
sun.font.GlyphList#getStrike()->Object::: glyph list get strike
sun.font.GlyphList#isSubPixPos()->boolean::: glyph list is sub pix pos
sun.font.GlyphList#isRGBOrder()->boolean::: glyph list is order
sun.font.GlyphList#dispose()->void::: glyph list dispose
sun.font.GlyphList#getNumGlyphs()->int::: glyph list get num glyphs
sun.font.GraphicComponent#isSimple()->boolean::: graphic component is simple
sun.font.GraphicComponent#getPixelBounds(FontRenderContext, float, float)->Rectangle::: graphic component get pixel bounds
sun.font.GraphicComponent#handleGetVisualBounds()->Rectangle2D::: graphic component handle get visual bounds
sun.font.GraphicComponent#getCoreMetrics()->CoreMetrics::: graphic component get core metrics
sun.font.GraphicComponent#createCoreMetrics(GraphicAttribute)->CoreMetrics::: graphic component create core metrics
sun.font.GraphicComponent#getItalicAngle()->float::: graphic component get italic angle
sun.font.GraphicComponent#getVisualBounds()->Rectangle2D::: graphic component get visual bounds
sun.font.GraphicComponent#handleGetOutline(float, float)->Shape::: graphic component handle get outline
sun.font.GraphicComponent#getBaselineTransform()->AffineTransform::: graphic component get baseline transform
sun.font.GraphicComponent#getOutline(float, float)->Shape::: graphic component get outline
sun.font.GraphicComponent#handleDraw(Graphics2D, float, float)->void::: graphic component handle draw
sun.font.GraphicComponent#draw(Graphics2D, float, float)->void::: graphic component draw
sun.font.GraphicComponent#getCharVisualBounds(int)->Rectangle2D::: graphic component get char visual bounds
sun.font.GraphicComponent#getNumCharacters()->int::: graphic component get num characters
sun.font.GraphicComponent#getCharX(int)->float::: graphic component get char x
sun.font.GraphicComponent#getCharY(int)->float::: graphic component get char y
sun.font.GraphicComponent#getCharAdvance(int)->float::: graphic component get char advance
sun.font.GraphicComponent#caretAtOffsetIsValid(int)->boolean::: graphic component caret at offset is valid
sun.font.GraphicComponent#handleGetCharVisualBounds(int)->Rectangle2D::: graphic component handle get char visual bounds
sun.font.GraphicComponent#getLineBreakIndex(int, float)->int::: graphic component get line break index
sun.font.GraphicComponent#getAdvanceBetween(int, int)->float::: graphic component get advance between
sun.font.GraphicComponent#getLogicalBounds()->Rectangle2D::: graphic component get logical bounds
sun.font.GraphicComponent#getAdvance()->float::: graphic component get advance
sun.font.GraphicComponent#getItalicBounds()->Rectangle2D::: graphic component get italic bounds
sun.font.GraphicComponent#getSubset(int, int, int)->TextLineComponent::: graphic component get subset
sun.font.GraphicComponent#toString()->String::: graphic component to string
sun.font.GraphicComponent#getNumJustificationInfos()->int:::Return the number of justification records this uses.
sun.font.GraphicComponent#getJustificationInfos(GlyphJustificationInfo[], int, int, int)->void:::Return GlyphJustificationInfo objects for the characters between charStart and charLimit, starting at offset infoStart
sun.font.GraphicComponent#applyJustificationDeltas(float[], int, boolean[])->TextLineComponent:::Apply deltas to the data in this component, starting at offset deltaStart, and return the new component
sun.font.LayoutPathImpl#pointToPath(double, double)->Point2D::: layout path impl point to path
sun.font.LayoutPathImpl#pathToPoint(double, double, boolean)->Point2D::: layout path impl path to point
sun.font.LayoutPathImpl#pointToPath(double, double, Point2D)->void::: layout path impl point to path
sun.font.LayoutPathImpl#pathToPoint(double, double, boolean, Point2D)->void::: layout path impl path to point
sun.font.LayoutPathImpl#start()->double::: layout path impl start
sun.font.LayoutPathImpl#end()->double::: layout path impl end
sun.font.LayoutPathImpl#length()->double::: layout path impl length
sun.font.LayoutPathImpl#mapShape(Shape)->Shape::: layout path impl map shape
sun.font.LayoutPathImpl#getPath(EndType, double...)->LayoutPathImpl:::Return a path representing the path from the origin through the points in order.
sun.font.LayoutPathImpl.SegmentPathBuilder#reset(int)->void:::Reset the builder for a new path
sun.font.LayoutPathImpl.SegmentPathBuilder#build(EndType, double...)->SegmentPath:::Automatically build from a list of points represented by pairs of doubles
sun.font.LayoutPathImpl.SegmentPathBuilder#moveTo(double, double)->void:::Move to a new point
sun.font.LayoutPathImpl.SegmentPathBuilder#lineTo(double, double)->void:::Connect to a new point
sun.font.LayoutPathImpl.SegmentPathBuilder#complete()->SegmentPath::: segment path builder complete
sun.font.LayoutPathImpl.SegmentPathBuilder#complete(EndType)->SegmentPath:::Complete building a SegmentPath
sun.font.LayoutPathImpl.SegmentPath#get(EndType, double...)->SegmentPath::: segment path get
sun.font.LayoutPathImpl.SegmentPath#pathToPoint(Point2D, boolean, Point2D)->void::: segment path path to point
sun.font.LayoutPathImpl.SegmentPath#pointToPath(Point2D, Point2D)->boolean::: segment path point to path
sun.font.LayoutPathImpl.SegmentPath#mapShape(Shape)->Shape::: segment path map shape
sun.font.LayoutPathImpl.SegmentPath#start()->double::: segment path start
sun.font.LayoutPathImpl.SegmentPath#end()->double::: segment path end
sun.font.LayoutPathImpl.SegmentPath#length()->double::: segment path length
sun.font.LayoutPathImpl.SegmentPath.LineInfo#set(double, double, double, double)->void:::Set the lineinfo to this line
sun.font.LayoutPathImpl.SegmentPath.LineInfo#set(LineInfo)->void::: line info set
sun.font.LayoutPathImpl.SegmentPath.LineInfo#pin(double, double, LineInfo)->boolean:::Return true if we intersect the infinitely tall rectangle with lo <= x < hi
sun.font.LayoutPathImpl.SegmentPath.LineInfo#pin(int, LineInfo)->boolean:::Return true if we intersect the segment at ix
sun.font.LayoutPathImpl.SegmentPath.Segment#init()->void::: segment init
sun.font.LayoutPathImpl.SegmentPath.Segment#move()->void::: segment move
sun.font.LayoutPathImpl.SegmentPath.Segment#close()->void::: segment close
sun.font.LayoutPathImpl.SegmentPath.Segment#line(LineInfo)->void::: segment line
sun.font.LayoutPathImpl.SegmentPath.Mapper#init()->void::: mapper init
sun.font.LayoutPathImpl.SegmentPath.Mapper#moveTo(double, double)->void::: mapper move to
sun.font.LayoutPathImpl.SegmentPath.Mapper#lineTo(double, double)->void::: mapper line to
sun.font.LayoutPathImpl.SegmentPath.Mapper#close()->void::: mapper close
sun.font.LayoutPathImpl.SegmentPath.Mapper#mapShape(Shape)->Shape::: mapper map shape
sun.font.LayoutPathImpl.SegmentPath#toString()->String::: segment path to string
sun.font.LayoutPathImpl.EmptyPath#pathToPoint(Point2D, boolean, Point2D)->void::: empty path path to point
sun.font.LayoutPathImpl.EmptyPath#pointToPath(Point2D, Point2D)->boolean::: empty path point to path
sun.font.LayoutPathImpl.EmptyPath#start()->double::: empty path start
sun.font.LayoutPathImpl.EmptyPath#end()->double::: empty path end
sun.font.LayoutPathImpl.EmptyPath#length()->double::: empty path length
sun.font.LayoutPathImpl.EmptyPath#mapShape(Shape)->Shape::: empty path map shape
sun.font.NativeFont#hasExternalBitmaps(String)->boolean::: native font has external bitmaps
sun.font.NativeFont#getMapper()->CharToGlyphMapper::: native font get mapper
sun.font.NativeFont#getDelegateFont()->PhysicalFont::: native font get delegate font
sun.font.NativeFont#createStrike(FontStrikeDesc)->FontStrike::: native font create strike
sun.font.NativeFont#getMaxCharBounds(FontRenderContext)->Rectangle2D::: native font get max char bounds
sun.font.NativeFont#getFontMetrics(long)->StrikeMetrics::: native font get font metrics
sun.font.NativeFont#getGlyphOutline(long, int, float, float)->GeneralPath::: native font get glyph outline
sun.font.NativeFont#getGlyphVectorOutline(long, int[], int, float, float)->GeneralPath::: native font get glyph vector outline
sun.font.NativeFont#getGlyphImage(long, int)->long::: native font get glyph image
sun.font.NativeFont#getGlyphMetrics(long, int, Point2D.Float)->void::: native font get glyph metrics
sun.font.NativeFont#getGlyphAdvance(long, int)->float::: native font get glyph advance
sun.font.NativeFont#getGlyphOutlineBounds(long, int)->Rectangle2D.Float::: native font get glyph outline bounds
sun.font.NativeStrike#getGlyphImagePtrs(int[], long[], int)->void::: native strike get glyph image ptrs
sun.font.NativeStrike#getGlyphImagePtr(int)->long::: native strike get glyph image ptr
sun.font.NativeStrike#getGlyphImagePtrNoCache(int)->long::: native strike get glyph image ptr no cache
sun.font.NativeStrike#getGlyphImageBounds(int, Point2D.Float, Rectangle)->void::: native strike get glyph image bounds
sun.font.NativeStrike#getGlyphMetrics(int)->Point2D.Float::: native strike get glyph metrics
sun.font.NativeStrike#getGlyphAdvance(int)->float::: native strike get glyph advance
sun.font.NativeStrike#getGlyphOutlineBounds(int)->Rectangle2D.Float::: native strike get glyph outline bounds
sun.font.NativeStrike#getGlyphOutline(int, float, float)->GeneralPath::: native strike get glyph outline
sun.font.NativeStrike#getGlyphVectorOutline(int[], float, float)->GeneralPath::: native strike get glyph vector outline
sun.font.NullFontScaler#getFontMetrics(long)->StrikeMetrics::: null font scaler get font metrics
sun.font.NullFontScaler#getGlyphAdvance(long, int)->float::: null font scaler get glyph advance
sun.font.NullFontScaler#getGlyphMetrics(long, int, Point2D.Float)->void::: null font scaler get glyph metrics
sun.font.NullFontScaler#getGlyphOutlineBounds(long, int)->Rectangle2D.Float::: null font scaler get glyph outline bounds
sun.font.NullFontScaler#getGlyphOutline(long, int, float, float)->GeneralPath::: null font scaler get glyph outline
sun.font.NullFontScaler#getGlyphVectorOutline(long, int[], int, float, float)->GeneralPath::: null font scaler get glyph vector outline
sun.font.NullFontScaler#createScalerContext(double[], int, int, float, float, boolean)->long::: null font scaler create scaler context
sun.font.NullFontScaler#invalidateScalerContext(long)->void::: null font scaler invalidate scaler context
sun.font.NullFontScaler#getNumGlyphs()->int::: null font scaler get num glyphs
sun.font.NullFontScaler#getMissingGlyphCode()->int::: null font scaler get missing glyph code
sun.font.NullFontScaler#getGlyphCode(char)->int::: null font scaler get glyph code
sun.font.NullFontScaler#getUnitsPerEm()->long::: null font scaler get units per em
sun.font.NullFontScaler#getGlyphPoint(long, int, int)->Point2D.Float::: null font scaler get glyph point
sun.font.NullFontScaler#getNullScalerContext()->long::: null font scaler get null scaler context
sun.font.NullFontScaler#getGlyphImage(long, int)->long::: null font scaler get glyph image
sun.font.PhysicalFont#equals(Object)->boolean::: physical font equals
sun.font.PhysicalFont#hashCode()->int::: physical font hash code
sun.font.PhysicalFont#getGlyphPoint(long, int, int)->Point2D.Float::: physical font get glyph point
sun.font.PhysicalFont#getFontMetrics(long)->StrikeMetrics::: physical font get font metrics
sun.font.PhysicalFont#getGlyphAdvance(long, int)->float::: physical font get glyph advance
sun.font.PhysicalFont#getGlyphMetrics(long, int, Point2D.Float)->void::: physical font get glyph metrics
sun.font.PhysicalFont#getGlyphImage(long, int)->long::: physical font get glyph image
sun.font.PhysicalFont#getGlyphOutlineBounds(long, int)->Rectangle2D.Float::: physical font get glyph outline bounds
sun.font.PhysicalFont#getGlyphOutline(long, int, float, float)->GeneralPath::: physical font get glyph outline
sun.font.PhysicalFont#getGlyphVectorOutline(long, int[], int, float, float)->GeneralPath::: physical font get glyph vector outline
sun.font.PhysicalStrike#getNumGlyphs()->int::: physical strike get num glyphs
sun.font.PhysicalStrike#getFontMetrics()->StrikeMetrics::: physical strike get font metrics
sun.font.PhysicalStrike#getCodePointAdvance(int)->float::: physical strike get code point advance
sun.font.PhysicalStrike#getCharMetrics(char)->Point2D.Float::: physical strike get char metrics
sun.font.PhysicalStrike#getSlot0GlyphImagePtrs(int[], long[], int)->int::: physical strike get slot0 glyph image ptrs
sun.font.PhysicalStrike#getGlyphPoint(int, int)->Point2D.Float::: physical strike get glyph point
sun.font.PhysicalStrike#adjustPoint(Point2D.Float)->void::: physical strike adjust point
sun.font.ScriptRun#init(char[], int, int)->void::: script run init
sun.font.ScriptRun#getScriptStart()->int:::Get the starting index of the current script run.
sun.font.ScriptRun#getScriptLimit()->int:::Get the index of the first character after the current script run.
sun.font.ScriptRun#getScriptCode()->int:::Get the script code for the script of the current script run.
sun.font.ScriptRun#next()->boolean:::Find the next script run
sun.font.ScriptRunData#getScript(int)->int::: script run data get script
sun.font.StandardGlyphVector#initGlyphVector(Font, FontRenderContext, int[], float[], int[], int)->void::: standard glyph vector init glyph vector
sun.font.StandardGlyphVector#getStandardGV(GlyphVector, FontInfo)->StandardGlyphVector::: standard glyph vector get standard v
sun.font.StandardGlyphVector#getFont()->Font::: standard glyph vector get font
sun.font.StandardGlyphVector#getFontRenderContext()->FontRenderContext::: standard glyph vector get font render context
sun.font.StandardGlyphVector#performDefaultLayout()->void::: standard glyph vector perform default layout
sun.font.StandardGlyphVector#getNumGlyphs()->int::: standard glyph vector get num glyphs
sun.font.StandardGlyphVector#getGlyphCode(int)->int::: standard glyph vector get glyph code
sun.font.StandardGlyphVector#getGlyphCodes(int, int, int[])->int[]::: standard glyph vector get glyph codes
sun.font.StandardGlyphVector#getGlyphCharIndex(int)->int::: standard glyph vector get glyph char index
sun.font.StandardGlyphVector#getGlyphCharIndices(int, int, int[])->int[]::: standard glyph vector get glyph char indices
sun.font.StandardGlyphVector#getLogicalBounds()->Rectangle2D::: standard glyph vector get logical bounds
sun.font.StandardGlyphVector#getVisualBounds()->Rectangle2D::: standard glyph vector get visual bounds
sun.font.StandardGlyphVector#getPixelBounds(FontRenderContext, float, float)->Rectangle::: standard glyph vector get pixel bounds
sun.font.StandardGlyphVector#getOutline()->Shape::: standard glyph vector get outline
sun.font.StandardGlyphVector#getOutline(float, float)->Shape::: standard glyph vector get outline
sun.font.StandardGlyphVector#getGlyphOutline(int)->Shape::: standard glyph vector get glyph outline
sun.font.StandardGlyphVector#getGlyphOutline(int, float, float)->Shape::: standard glyph vector get glyph outline
sun.font.StandardGlyphVector#getGlyphPosition(int)->Point2D::: standard glyph vector get glyph position
sun.font.StandardGlyphVector#setGlyphPosition(int, Point2D)->void::: standard glyph vector set glyph position
sun.font.StandardGlyphVector#getGlyphTransform(int)->AffineTransform::: standard glyph vector get glyph transform
sun.font.StandardGlyphVector#setGlyphTransform(int, AffineTransform)->void::: standard glyph vector set glyph transform
sun.font.StandardGlyphVector#getLayoutFlags()->int::: standard glyph vector get layout flags
sun.font.StandardGlyphVector#getGlyphPositions(int, int, float[])->float[]::: standard glyph vector get glyph positions
sun.font.StandardGlyphVector#getGlyphLogicalBounds(int)->Shape::: standard glyph vector get glyph logical bounds
sun.font.StandardGlyphVector#getGlyphVisualBounds(int)->Shape::: standard glyph vector get glyph visual bounds
sun.font.StandardGlyphVector#getGlyphPixelBounds(int, FontRenderContext, float, float)->Rectangle::: standard glyph vector get glyph pixel bounds
sun.font.StandardGlyphVector#getGlyphMetrics(int)->GlyphMetrics::: standard glyph vector get glyph metrics
sun.font.StandardGlyphVector#getGlyphJustificationInfo(int)->GlyphJustificationInfo::: standard glyph vector get glyph justification info
sun.font.StandardGlyphVector#equals(GlyphVector)->boolean::: standard glyph vector equals
sun.font.StandardGlyphVector#hashCode()->int:::As a concrete subclass of Object that implements equality, this must implement hashCode.
sun.font.StandardGlyphVector#equals(Object)->boolean:::Since we implement equality comparisons for GlyphVector, we implement the inherited Object.equals(Object) as well
sun.font.StandardGlyphVector#copy()->StandardGlyphVector:::Sometimes I wish java had covariant return types...
sun.font.StandardGlyphVector#clone()->Object:::As a concrete subclass of GlyphVector, this must implement clone.
sun.font.StandardGlyphVector#setGlyphPositions(float[], int, int, int)->void::: standard glyph vector set glyph positions
sun.font.StandardGlyphVector#setGlyphPositions(float[])->void:::Set all the glyph positions, including the 'after last glyph' position
sun.font.StandardGlyphVector#getGlyphPositions(float[])->float[]:::This is a convenience overload that gets all the glyph positions, which is what you usually want to do if you're getting more than one
sun.font.StandardGlyphVector#getGlyphTransforms(int, int, AffineTransform[])->AffineTransform[]:::Get transform information for the requested range of glyphs
sun.font.StandardGlyphVector#getGlyphTransforms()->AffineTransform[]:::Convenience overload for getGlyphTransforms(int, int, AffineTransform[], int);
sun.font.StandardGlyphVector#setGlyphTransforms(AffineTransform[], int, int, int)->void:::Set a number of glyph transforms
sun.font.StandardGlyphVector#setGlyphTransforms(AffineTransform[])->void:::Convenience overload of setGlyphTransforms(AffineTransform[], int, int, int).
sun.font.StandardGlyphVector#getGlyphInfo()->float[]:::For each glyph return posx, posy, advx, advy, visx, visy, visw, vish.
sun.font.StandardGlyphVector#pixellate(FontRenderContext, Point2D, Point)->void:::!!! not used currently, but might be by getPixelbounds?
sun.font.StandardGlyphVector#needsPositions(double[])->boolean::: standard glyph vector needs positions
sun.font.StandardGlyphVector#setupGlyphImages(long[], float[], double[])->Object::: standard glyph vector setup glyph images
sun.font.StandardGlyphVector#getValidatedGlyphs(int[])->int[]::: standard glyph vector get validated glyphs
sun.font.StandardGlyphVector.GlyphTransformInfo#equals(GlyphTransformInfo)->boolean::: glyph transform info equals
sun.font.StandardGlyphVector.GlyphTransformInfo#setGlyphTransform(int, AffineTransform)->void::: glyph transform info set glyph transform
sun.font.StandardGlyphVector.GlyphTransformInfo#getGlyphTransform(int)->AffineTransform::: glyph transform info get glyph transform
sun.font.StandardGlyphVector.GlyphTransformInfo#transformCount()->int::: glyph transform info transform count
sun.font.StandardGlyphVector.GlyphTransformInfo#setupGlyphImages(long[], float[], AffineTransform)->Object:::The strike cache works like this
sun.font.StandardGlyphVector.GlyphTransformInfo#getGlyphsPixelBounds(AffineTransform, float, float, int, int)->Rectangle::: glyph transform info get glyphs pixel bounds
sun.font.StandardGlyphVector.GlyphTransformInfo#getStrike(int)->GlyphStrike::: glyph transform info get strike
sun.font.StandardGlyphVector.GlyphStrike#create(StandardGlyphVector, AffineTransform, AffineTransform)->GlyphStrike::: glyph strike create
sun.font.StandardGlyphVector.GlyphStrike#getADL(ADL)->void::: glyph strike get l
sun.font.StandardGlyphVector.GlyphStrike#getGlyphPosition(int, int, float[], float[])->void::: glyph strike get glyph position
sun.font.StandardGlyphVector.GlyphStrike#addDefaultGlyphAdvance(int, Point2D.Float)->void::: glyph strike add default glyph advance
sun.font.StandardGlyphVector.GlyphStrike#getGlyphOutlineBounds(int, float, float)->Rectangle2D::: glyph strike get glyph outline bounds
sun.font.StandardGlyphVector.GlyphStrike#appendGlyphOutline(int, GeneralPath, float, float)->void::: glyph strike append glyph outline
sun.font.StandardGlyphVector#toString()->String::: standard glyph vector to string
sun.font.StandardGlyphVector#appendString(StringBuffer)->StringBuffer::: standard glyph vector append string
sun.font.StandardGlyphVector.ADL#toString()->String::: l to string
sun.font.StandardGlyphVector.ADL#toStringBuffer(StringBuffer)->StringBuffer::: l to string buffer
sun.font.StandardTextSource#getChars()->char[]::: standard text source get chars
sun.font.StandardTextSource#getStart()->int::: standard text source get start
sun.font.StandardTextSource#getLength()->int::: standard text source get length
sun.font.StandardTextSource#getContextStart()->int::: standard text source get context start
sun.font.StandardTextSource#getContextLength()->int::: standard text source get context length
sun.font.StandardTextSource#getLayoutFlags()->int::: standard text source get layout flags
sun.font.StandardTextSource#getBidiLevel()->int::: standard text source get bidi level
sun.font.StandardTextSource#getFont()->Font::: standard text source get font
sun.font.StandardTextSource#getFRC()->FontRenderContext::: standard text source get c
sun.font.StandardTextSource#getCoreMetrics()->CoreMetrics::: standard text source get core metrics
sun.font.StandardTextSource#getSubSource(int, int, int)->TextSource::: standard text source get sub source
sun.font.StandardTextSource#toString()->String::: standard text source to string
sun.font.StandardTextSource#toString(boolean)->String::: standard text source to string
sun.font.StrikeCache#getGlyphCacheDescription(long[])->void::: strike cache get glyph cache description
sun.font.StrikeCache#refStrike(FontStrike)->void::: strike cache ref strike
sun.font.StrikeCache#disposeStrike(FontStrikeDisposer)->void::: strike cache dispose strike
sun.font.StrikeCache#freeIntPointer(int)->void::: strike cache free int pointer
sun.font.StrikeCache#freeLongPointer(long)->void::: strike cache free long pointer
sun.font.StrikeCache#addGlyphDisposedListener(GlyphDisposedListener)->void::: strike cache add glyph disposed listener
sun.font.StrikeCache#getStrikeRef(FontStrike)->Reference::: strike cache get strike ref
sun.font.StrikeCache#getStrikeRef(FontStrike, boolean)->Reference::: strike cache get strike ref
sun.font.StrikeCache.DisposableStrike#getDisposer()->FontStrikeDisposer::: disposable strike get disposer
sun.font.StrikeCache.SoftDisposerRef#getDisposer()->FontStrikeDisposer::: soft disposer ref get disposer
sun.font.StrikeCache.WeakDisposerRef#getDisposer()->FontStrikeDisposer::: weak disposer ref get disposer
sun.font.StrikeMetrics#getAscent()->float::: strike metrics get ascent
sun.font.StrikeMetrics#getDescent()->float::: strike metrics get descent
sun.font.StrikeMetrics#getLeading()->float::: strike metrics get leading
sun.font.StrikeMetrics#getMaxAdvance()->float::: strike metrics get max advance
sun.font.StrikeMetrics#merge(StrikeMetrics)->void::: strike metrics merge
sun.font.StrikeMetrics#convertToUserSpace(AffineTransform)->void::: strike metrics convert to user space
sun.font.StrikeMetrics#toString()->String::: strike metrics to string
sun.font.SunFontManager#getInstance()->SunFontManager:::Returns the global SunFontManager instance
sun.font.SunFontManager#getTrueTypeFilter()->FilenameFilter::: sun font manager get true type filter
sun.font.SunFontManager#getType1Filter()->FilenameFilter::: sun font manager get type1 filter
sun.font.SunFontManager#usingPerAppContextComposites()->boolean::: sun font manager using per app context composites
sun.font.SunFontManager#getJDKFontDir()->String:::If the module image layout changes the location of JDK fonts, this will be updated to reflect that.
sun.font.SunFontManager#getEUDCFont()->TrueTypeFont::: sun font manager get font
sun.font.SunFontManager#getNewComposite(String, int, Font2DHandle)->Font2DHandle::: sun font manager get new composite
sun.font.SunFontManager#registerCompositeFont(String, String[], String[], int, int[], int[], boolean)->void::: sun font manager register composite font
sun.font.SunFontManager#registerCompositeFont(String, String[], String[], int, int[], int[], boolean, ConcurrentHashMap)->void::: sun font manager register composite font
sun.font.SunFontManager#addToFontList(PhysicalFont, int)->PhysicalFont::: sun font manager add to font list
sun.font.SunFontManager#getRegisteredFonts()->Font2D[]::: sun font manager get registered fonts
sun.font.SunFontManager#getPhysicalFonts()->PhysicalFont[]::: sun font manager get physical fonts
sun.font.SunFontManager#initialiseDeferredFonts()->void::: sun font manager initialise deferred fonts
sun.font.SunFontManager#registerDeferredJREFonts(String)->void::: sun font manager register deferred fonts
sun.font.SunFontManager#isDeferredFont(String)->boolean::: sun font manager is deferred font
sun.font.SunFontManager#findJREDeferredFont(String, int)->PhysicalFont::: sun font manager find deferred font
sun.font.SunFontManager#registerDeferredFont(String, String, String[], int, boolean, int)->void::: sun font manager register deferred font
sun.font.SunFontManager#initialiseDeferredFont(String)->PhysicalFont::: sun font manager initialise deferred font
sun.font.SunFontManager#isRegisteredFontFile(String)->boolean::: sun font manager is registered font file
sun.font.SunFontManager#getRegisteredFontFile(String)->PhysicalFont::: sun font manager get registered font file
sun.font.SunFontManager#registerFontFile(String, String[], int, boolean, int)->PhysicalFont::: sun font manager register font file
sun.font.SunFontManager#registerFonts(String[], String[][], int, int, boolean, int, boolean)->void::: sun font manager register fonts
sun.font.SunFontManager#getDefaultPhysicalFont()->PhysicalFont::: sun font manager get default physical font
sun.font.SunFontManager#getDefaultLogicalFont(int)->Font2D::: sun font manager get default logical font
sun.font.SunFontManager#populateFontFileNameMap(HashMap, HashMap, HashMap>, Locale)->void::: sun font manager populate font file name map
sun.font.SunFontManager#populateHardcodedFileNameMap()->HashMap:::default implementation does nothing.
sun.font.SunFontManager#findFontFromPlatformMap(String, int)->Font2D::: sun font manager find font from platform map
sun.font.SunFontManager#getFontNamesFromPlatform()->String[]::: sun font manager get font names from platform
sun.font.SunFontManager#gotFontsFromPlatform()->boolean::: sun font manager got fonts from platform
sun.font.SunFontManager#getFileNameForFontName(String)->String::: sun font manager get file name for font name
sun.font.SunFontManager#registerOtherFontFiles(HashSet)->void::: sun font manager register other font files
sun.font.SunFontManager#getFamilyNamesFromPlatform(TreeMap, Locale)->boolean::: sun font manager get family names from platform
sun.font.SunFontManager#findFont2D(String, int, int)->Font2D::: sun font manager find font2 d
sun.font.SunFontManager#usePlatformFontMetrics()->boolean::: sun font manager use platform font metrics
sun.font.SunFontManager#getNumFonts()->int::: sun font manager get num fonts
sun.font.SunFontManager#getFontPath(boolean)->String::: sun font manager get font path
sun.font.SunFontManager#createFont2D(File, int, boolean, boolean, CreatedFontTracker)->Font2D[]::: sun font manager create font2 d
sun.font.SunFontManager#getFullNameByFileName(String)->String::: sun font manager get full name by file name
sun.font.SunFontManager#deRegisterBadFont(Font2D)->void::: sun font manager de register bad font
sun.font.SunFontManager#replaceFont(PhysicalFont, PhysicalFont)->void::: sun font manager replace font
sun.font.SunFontManager#maybeUsingAlternateCompositeFonts()->boolean::: sun font manager maybe using alternate composite fonts
sun.font.SunFontManager#usingAlternateCompositeFonts()->boolean::: sun font manager using alternate composite fonts
sun.font.SunFontManager#useAlternateFontforJALocales()->void::: sun font manager use alternate fontfor locales
sun.font.SunFontManager#usingAlternateFontforJALocales()->boolean::: sun font manager using alternate fontfor locales
sun.font.SunFontManager#preferLocaleFonts()->void::: sun font manager prefer locale fonts
sun.font.SunFontManager#preferProportionalFonts()->void::: sun font manager prefer proportional fonts
sun.font.SunFontManager#registerFont(Font)->boolean::: sun font manager register font
sun.font.SunFontManager#getCreatedFontFamilyNames()->TreeMap::: sun font manager get created font family names
sun.font.SunFontManager#getCreatedFonts()->Font[]::: sun font manager get created fonts
sun.font.SunFontManager#getPlatformFontDirs(boolean)->String[]::: sun font manager get platform font dirs
sun.font.SunFontManager#getDefaultPlatformFont()->String[]:::Returns an array of two strings
sun.font.SunFontManager#getNativeNames(String, String)->String[]::: sun font manager get native names
sun.font.SunFontManager#getFileNameFromPlatformName(String)->String:::Returns a file name for the physical font represented by this platform font name
sun.font.SunFontManager#getFontConfiguration()->FontConfiguration:::Return the default font configuration.
sun.font.SunFontManager#getPlatformFontPath(boolean)->String::: sun font manager get platform font path
sun.font.SunFontManager#loadFonts()->void::: sun font manager load fonts
sun.font.SunFontManager#registerFontDirs(String)->void::: sun font manager register font dirs
sun.font.SunFontManager#registerFontsInDir(String)->void::: sun font manager register fonts in dir
sun.font.SunFontManager#registerFontsInDir(String, boolean, int, boolean, boolean)->void::: sun font manager register fonts in dir
sun.font.SunFontManager#registerFontDir(String)->void::: sun font manager register font dir
sun.font.SunFontManager#getDefaultFontFile()->String:::Returns file name for default font, either absolute or relative as needed by registerFontFile.
sun.font.SunFontManager#useAbsoluteFontFileNames()->boolean:::Whether registerFontFile expects absolute or relative font file names.
sun.font.SunFontManager#createFontConfiguration()->FontConfiguration:::Creates this environment's FontConfiguration.
sun.font.SunFontManager#createFontConfiguration(boolean, boolean)->FontConfiguration::: sun font manager create font configuration
sun.font.SunFontManager#getDefaultFontFaceName()->String:::Returns face name for default font, or null if no face names are used for CompositeFontDescriptors for this platform.
sun.font.SunFontManager#loadFontFiles()->void::: sun font manager load font files
sun.font.SunFontManager#addFontToPlatformFontPath(String)->void:::Notifies graphics environment that the logical font configuration uses the given platform font name
sun.font.SunFontManager#registerFontFile(String, String[], int, boolean)->void::: sun font manager register font file
sun.font.SunFontManager#registerPlatformFontsUsedByFontConfiguration()->void::: sun font manager register platform fonts used by font configuration
sun.font.SunFontManager#addToMissingFontFileList(String)->void::: sun font manager add to missing font file list
sun.font.SunFontManager#createCompositeFonts(ConcurrentHashMap, boolean, boolean)->void::: sun font manager create composite fonts
sun.font.SunFontManager#getAllInstalledFonts()->Font[]:::Returns all fonts installed in this environment.
sun.font.SunFontManager#getInstalledFontFamilyNames(Locale)->String[]:::Get a list of installed fonts in the requested Locale
sun.font.SunFontManager#addNativeFontFamilyNames(TreeMap, Locale)->void::: sun font manager add native font family names
sun.font.SunFontManager#register1dot0Fonts()->void::: sun font manager register1dot0 fonts
sun.font.SunFontManager#getJREFontFamilyNames(TreeMap, Locale)->void::: sun font manager get font family names
sun.font.SunFontManager#addToPool(FileFont)->void::: sun font manager add to pool
sun.font.SunFontManager#getFontConfigFUIR(String, int, int)->FontUIResource::: sun font manager get font config r
sun.font.SunLayoutEngine#instance()->LayoutEngineFactory::: sun layout engine instance
sun.font.SunLayoutEngine#getEngine(Font2D, int, int)->LayoutEngine::: sun layout engine get engine
sun.font.SunLayoutEngine#getEngine(LayoutEngineKey)->LayoutEngine::: sun layout engine get engine
sun.font.SunLayoutEngine#layout(FontStrikeDesc, float[], float, int, int, TextRecord, int, Point2D.Float, GVData)->void::: sun layout engine layout
sun.font.TextLabel#getVisualBounds(float, float)->Rectangle2D:::Return a rectangle that surrounds the text outline when this label is rendered at x, y.
sun.font.TextLabel#getLogicalBounds(float, float)->Rectangle2D:::Return a rectangle that corresponds to the logical bounds of the text when this label is rendered at x, y
sun.font.TextLabel#getAlignBounds(float, float)->Rectangle2D:::Return a rectangle that corresponds to the alignment bounds of the text when this label is rendered at x, y
sun.font.TextLabel#getItalicBounds(float, float)->Rectangle2D:::Return a rectangle that corresponds to the logical bounds of the text, adjusted to angle the leading and trailing edges by the italic angle.
sun.font.TextLabel#getOutline(float, float)->Shape:::Return an outline of the characters in the label when rendered at x, y.
sun.font.TextLabel#draw(Graphics2D, float, float)->void:::Render the label at x, y in the graphics.
sun.font.TextLabel#getVisualBounds()->Rectangle2D:::A convenience method that returns the visual bounds when rendered at 0, 0.
sun.font.TextLabel#getLogicalBounds()->Rectangle2D:::A convenience method that returns the logical bounds when rendered at 0, 0.
sun.font.TextLabel#getAlignBounds()->Rectangle2D:::A convenience method that returns the align bounds when rendered at 0, 0.
sun.font.TextLabel#getItalicBounds()->Rectangle2D:::A convenience method that returns the italic bounds when rendered at 0, 0.
sun.font.TextLabel#getOutline()->Shape:::A convenience method that returns the outline when rendered at 0, 0.
sun.font.TextLabel#draw(Graphics2D)->void:::A convenience method that renders the label at 0, 0.
sun.font.TextLabelFactory#getFontRenderContext()->FontRenderContext::: text label factory get font render context
sun.font.TextLabelFactory#getLineBidi()->Bidi::: text label factory get line bidi
sun.font.TextLabelFactory#setLineContext(int, int)->void:::Set a line context for the factory
sun.font.TextLabelFactory#createExtended(Font, CoreMetrics, Decoration, int, int)->ExtendedTextLabel:::Create an extended glyph array for the text between start and limit.
sun.font.TextLabelFactory#createSimple(Font, CoreMetrics, int, int)->TextLabel:::Create a simple glyph array for the text between start and limit.
sun.font.TextLineComponent#getCoreMetrics()->CoreMetrics::: text line component get core metrics
sun.font.TextLineComponent#draw(Graphics2D, float, float)->void::: text line component draw
sun.font.TextLineComponent#getCharVisualBounds(int)->Rectangle2D::: text line component get char visual bounds
sun.font.TextLineComponent#getVisualBounds()->Rectangle2D::: text line component get visual bounds
sun.font.TextLineComponent#getAdvance()->float::: text line component get advance
sun.font.TextLineComponent#getOutline(float, float)->Shape::: text line component get outline
sun.font.TextLineComponent#getNumCharacters()->int::: text line component get num characters
sun.font.TextLineComponent#getCharX(int)->float::: text line component get char x
sun.font.TextLineComponent#getCharY(int)->float::: text line component get char y
sun.font.TextLineComponent#getCharAdvance(int)->float::: text line component get char advance
sun.font.TextLineComponent#caretAtOffsetIsValid(int)->boolean::: text line component caret at offset is valid
sun.font.TextLineComponent#getLineBreakIndex(int, float)->int::: text line component get line break index
sun.font.TextLineComponent#getAdvanceBetween(int, int)->float::: text line component get advance between
sun.font.TextLineComponent#getLogicalBounds()->Rectangle2D::: text line component get logical bounds
sun.font.TextLineComponent#getItalicBounds()->Rectangle2D::: text line component get italic bounds
sun.font.TextLineComponent#getBaselineTransform()->AffineTransform::: text line component get baseline transform
sun.font.TextLineComponent#isSimple()->boolean::: text line component is simple
sun.font.TextLineComponent#getPixelBounds(FontRenderContext, float, float)->Rectangle::: text line component get pixel bounds
sun.font.TextLineComponent#getSubset(int, int, int)->TextLineComponent:::Return a TextLineComponent for the characters in the range start, limit
sun.font.TextLineComponent#getNumJustificationInfos()->int:::Return the number of justification records this uses.
sun.font.TextLineComponent#getJustificationInfos(GlyphJustificationInfo[], int, int, int)->void:::Return GlyphJustificationInfo objects for the characters between charStart and charLimit, starting at offset infoStart
sun.font.TextLineComponent#applyJustificationDeltas(float[], int, boolean[])->TextLineComponent:::Apply deltas to the data in this component, starting at offset deltaStart, and return the new component
sun.font.TextRecord#init(char[], int, int, int, int)->void::: text record init
sun.font.TextSource#getChars()->char[]:::Source character data.
sun.font.TextSource#getStart()->int:::Start of source data in char array returned from getChars.
sun.font.TextSource#getLength()->int:::Length of source data.
sun.font.TextSource#getContextStart()->int:::Start of context data in char array returned from getChars.
sun.font.TextSource#getContextLength()->int:::Length of context data.
sun.font.TextSource#getLayoutFlags()->int:::Return the layout flags
sun.font.TextSource#getBidiLevel()->int:::Bidi level of all the characters in context.
sun.font.TextSource#getFont()->Font:::Font for source data.
sun.font.TextSource#getFRC()->FontRenderContext:::Font render context to use when measuring or rendering source data.
sun.font.TextSource#getCoreMetrics()->CoreMetrics:::Line metrics for source data.
sun.font.TextSource#getSubSource(int, int, int)->TextSource:::Get subrange of this TextSource
sun.font.TextSource#toString(boolean)->String:::Get debugging info about this TextSource instance
sun.font.TextSourceLabel#getSource()->TextSource::: text source label get source
sun.font.TextSourceLabel#getLogicalBounds(float, float)->Rectangle2D::: text source label get logical bounds
sun.font.TextSourceLabel#getVisualBounds(float, float)->Rectangle2D::: text source label get visual bounds
sun.font.TextSourceLabel#getAlignBounds(float, float)->Rectangle2D::: text source label get align bounds
sun.font.TextSourceLabel#getItalicBounds(float, float)->Rectangle2D::: text source label get italic bounds
sun.font.TextSourceLabel#getPixelBounds(FontRenderContext, float, float)->Rectangle::: text source label get pixel bounds
sun.font.TextSourceLabel#getBaselineTransform()->AffineTransform::: text source label get baseline transform
sun.font.TextSourceLabel#getOutline(float, float)->Shape::: text source label get outline
sun.font.TextSourceLabel#draw(Graphics2D, float, float)->void::: text source label draw
sun.font.TextSourceLabel#createLogicalBounds()->Rectangle2D::: text source label create logical bounds
sun.font.TextSourceLabel#createVisualBounds()->Rectangle2D::: text source label create visual bounds
sun.font.TextSourceLabel#createItalicBounds()->Rectangle2D::: text source label create italic bounds
sun.font.TextSourceLabel#createAlignBounds()->Rectangle2D::: text source label create align bounds
sun.font.TextSourceLabel#createGV()->GlyphVector::: text source label create v
sun.font.TrueTypeFont#checkUseNatives()->boolean::: true type font check use natives
sun.font.TrueTypeFont#close()->void::: true type font close
sun.font.TrueTypeFont#readBlock(ByteBuffer, int, int)->int::: true type font read block
sun.font.TrueTypeFont#readBlock(int, int)->ByteBuffer::: true type font read block
sun.font.TrueTypeFont#readBytes(int, int)->byte[]::: true type font read bytes
sun.font.TrueTypeFont#init(int)->void::: true type font init
sun.font.TrueTypeFont#getCodePage()->String::: true type font get code page
sun.font.TrueTypeFont#supportsEncoding(String)->boolean::: true type font supports encoding
sun.font.TrueTypeFont#supportsJA()->boolean::: true type font supports a
sun.font.TrueTypeFont#getTableBuffer(int)->ByteBuffer::: true type font get table buffer
sun.font.TrueTypeFont#getTableBytes(int)->byte[]::: true type font get table bytes
sun.font.TrueTypeFont#getTableSize(int)->int::: true type font get table size
sun.font.TrueTypeFont#getTableOffset(int)->int::: true type font get table offset
sun.font.TrueTypeFont#getDirectoryEntry(int)->DirectoryEntry::: true type font get directory entry
sun.font.TrueTypeFont#useEmbeddedBitmapsForSize(int)->boolean::: true type font use embedded bitmaps for size
sun.font.TrueTypeFont#getFullName()->String::: true type font get full name
sun.font.TrueTypeFont#setStyle()->void::: true type font set style
sun.font.TrueTypeFont#getWidth()->int::: true type font get width
sun.font.TrueTypeFont#getWeight()->int::: true type font get weight
sun.font.TrueTypeFont#getStyleMetrics(float, float[], int)->void::: true type font get style metrics
sun.font.TrueTypeFont#initNames()->void::: true type font init names
sun.font.TrueTypeFont#lookupName(short, int)->String::: true type font lookup name
sun.font.TrueTypeFont#getFontCount()->int::: true type font get font count
sun.font.TrueTypeFont#getScaler()->FontScaler::: true type font get scaler
sun.font.TrueTypeFont#getPostscriptName()->String::: true type font get postscript name
sun.font.TrueTypeFont#getFontName(Locale)->String::: true type font get font name
sun.font.TrueTypeFont#getFamilyName(Locale)->String::: true type font get family name
sun.font.TrueTypeFont#getMapper()->CharToGlyphMapper::: true type font get mapper
sun.font.TrueTypeFont#initAllNames(int, HashSet)->void::: true type font init all names
sun.font.TrueTypeFont#getAllFamilyNames()->String[]::: true type font get all family names
sun.font.TrueTypeFont#getAllFullNames()->String[]::: true type font get all full names
sun.font.TrueTypeFont#getGlyphPoint(long, int, int)->Point2D.Float::: true type font get glyph point
sun.font.TrueTypeFont#useAAForPtSize(int)->boolean::: true type font use for pt size
sun.font.TrueTypeFont#hasSupplementaryChars()->boolean::: true type font has supplementary chars
sun.font.TrueTypeFont#toString()->String::: true type font to string
sun.font.TrueTypeGlyphMapper#getNumGlyphs()->int::: true type glyph mapper get num glyphs
sun.font.TrueTypeGlyphMapper#charToGlyph(char)->int::: true type glyph mapper char to glyph
sun.font.TrueTypeGlyphMapper#charToGlyph(int)->int::: true type glyph mapper char to glyph
sun.font.TrueTypeGlyphMapper#charToVariationGlyph(int, int)->int::: true type glyph mapper char to variation glyph
sun.font.TrueTypeGlyphMapper#charsToGlyphs(int, int[], int[])->void::: true type glyph mapper chars to glyphs
sun.font.TrueTypeGlyphMapper#charsToGlyphs(int, char[], int[])->void::: true type glyph mapper chars to glyphs
sun.font.TrueTypeGlyphMapper#charsToGlyphsNS(int, char[], int[])->boolean::: true type glyph mapper chars to glyphs s
sun.font.TrueTypeGlyphMapper#hasSupplementaryChars()->boolean::: true type glyph mapper has supplementary chars
sun.font.Type1Font#close()->void::: type1 font close
sun.font.Type1Font#readFile(ByteBuffer)->void::: type1 font read file
sun.font.Type1Font#readBlock(int, int)->ByteBuffer::: type1 font read block
sun.font.Type1Font#getFileSize()->int::: type1 font get file size
sun.font.Type1Font#getPostscriptName()->String::: type1 font get postscript name
sun.font.Type1Font#getScaler()->FontScaler::: type1 font get scaler
sun.font.Type1Font#getMapper()->CharToGlyphMapper::: type1 font get mapper
sun.font.Type1Font#getNumGlyphs()->int::: type1 font get num glyphs
sun.font.Type1Font#getMissingGlyphCode()->int::: type1 font get missing glyph code
sun.font.Type1Font#getGlyphCode(char)->int::: type1 font get glyph code
sun.font.Type1Font#toString()->String::: type1 font to string
sun.font.Type1GlyphMapper#getNumGlyphs()->int::: type1 glyph mapper get num glyphs
sun.font.Type1GlyphMapper#getMissingGlyphCode()->int::: type1 glyph mapper get missing glyph code
sun.font.Type1GlyphMapper#canDisplay(char)->boolean::: type1 glyph mapper can display
sun.font.Type1GlyphMapper#charToGlyph(char)->int::: type1 glyph mapper char to glyph
sun.font.Type1GlyphMapper#charToGlyph(int)->int::: type1 glyph mapper char to glyph
sun.font.Type1GlyphMapper#charsToGlyphs(int, char[], int[])->void::: type1 glyph mapper chars to glyphs
sun.font.Type1GlyphMapper#charsToGlyphs(int, int[], int[])->void::: type1 glyph mapper chars to glyphs
sun.font.Type1GlyphMapper#charsToGlyphsNS(int, char[], int[])->boolean::: type1 glyph mapper chars to glyphs s
sun.font.Underline#drawUnderline(Graphics2D, float, float, float, float)->void:::Draws the underline into g2d
sun.font.Underline#getLowerDrawLimit(float)->float:::Returns the bottom of the bounding rectangle for this underline.
sun.font.Underline#getUnderlineShape(float, float, float, float)->Shape:::Returns a Shape representing the underline
sun.font.Underline#getUnderline(Object)->Underline:::Return the Underline for the given value of TextAttribute.INPUT_METHOD_UNDERLINE or TextAttribute.UNDERLINE
sun.font.Underline#getUnderline(int)->Underline::: underline get underline

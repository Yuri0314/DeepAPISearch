AttributeMap#entrySet()::: attribute map entry set:::return->delegate->entrySet
AttributeMap#put(TextAttribute, Object)::: attribute map put:::return->delegate->put
AttributeMap#getValues()::: attribute map get values:::return
AttributeMap#delegate()::: attribute map delegate:::if->if->Thread->dumpStack->values->new->HashMap<TextAttribute,Object>->toMap->return
AttributeMap#toString()::: attribute map to string:::if->return->values->toString->return->super->toString
AttributeValues#getFamily()::: attribute values get family:::return
AttributeValues#setFamily(String)::: attribute values set family:::update
AttributeValues#getWeight()::: attribute values get weight:::return
AttributeValues#setWeight(float)::: attribute values set weight:::update
AttributeValues#getWidth()::: attribute values get width:::return
AttributeValues#setWidth(float)::: attribute values set width:::update
AttributeValues#getPosture()::: attribute values get posture:::return
AttributeValues#setPosture(float)::: attribute values set posture:::update
AttributeValues#getSize()::: attribute values get size:::return
AttributeValues#setSize(float)::: attribute values set size:::update
AttributeValues#getTransform()::: attribute values get transform:::return
AttributeValues#setTransform(AffineTransform)::: attribute values set transform:::f->isIdentity->new->AffineTransform->updateDerivedTransforms->update
AttributeValues#setTransform(TransformAttribute)::: attribute values set transform:::f->isIdentity->f->getTransform->updateDerivedTransforms->update
AttributeValues#getSuperscript()::: attribute values get superscript:::return
AttributeValues#setSuperscript(int)::: attribute values set superscript:::update
AttributeValues#getFont()::: attribute values get font:::return
AttributeValues#setFont(Font)::: attribute values set font:::update
AttributeValues#getCharReplacement()::: attribute values get char replacement:::return
AttributeValues#setCharReplacement(GraphicAttribute)::: attribute values set char replacement:::update
AttributeValues#getForeground()::: attribute values get foreground:::return
AttributeValues#setForeground(Paint)::: attribute values set foreground:::update
AttributeValues#getBackground()::: attribute values get background:::return
AttributeValues#setBackground(Paint)::: attribute values set background:::update
AttributeValues#getUnderline()::: attribute values get underline:::return
AttributeValues#setUnderline(int)::: attribute values set underline:::update
AttributeValues#getStrikethrough()::: attribute values get strikethrough:::return
AttributeValues#setStrikethrough(boolean)::: attribute values set strikethrough:::update
AttributeValues#getRunDirection()::: attribute values get run direction:::return
AttributeValues#setRunDirection(int)::: attribute values set run direction:::update
AttributeValues#getBidiEmbedding()::: attribute values get bidi embedding:::return
AttributeValues#setBidiEmbedding(int)::: attribute values set bidi embedding:::update
AttributeValues#getJustification()::: attribute values get justification:::return
AttributeValues#setJustification(float)::: attribute values set justification:::update
AttributeValues#getInputMethodHighlight()::: attribute values get input method highlight:::return
AttributeValues#setInputMethodHighlight(Annotation)::: attribute values set input method highlight:::update
AttributeValues#setInputMethodHighlight(InputMethodHighlight)::: attribute values set input method highlight:::update
AttributeValues#getInputMethodUnderline()::: attribute values get input method underline:::return
AttributeValues#setInputMethodUnderline(int)::: attribute values set input method underline:::update
AttributeValues#getSwapColors()::: attribute values get swap colors:::return
AttributeValues#setSwapColors(boolean)::: attribute values set swap colors:::update
AttributeValues#getNumericShaping()::: attribute values get numeric shaping:::return
AttributeValues#setNumericShaping(NumericShaper)::: attribute values set numeric shaping:::update
AttributeValues#getKerning()::: attribute values get kerning:::return
AttributeValues#setKerning(int)::: attribute values set kerning:::update
AttributeValues#getTracking()::: attribute values get tracking:::return
AttributeValues#setTracking(float)::: attribute values set tracking:::update
AttributeValues#getLigatures()::: attribute values get ligatures:::return
AttributeValues#setLigatures(int)::: attribute values set ligatures:::update
AttributeValues#getBaselineTransform()::: attribute values get baseline transform:::return
AttributeValues#getCharTransform()::: attribute values get char transform:::return
AttributeValues#getMask(EAttribute)::: attribute values get mask:::return
AttributeValues#getMask(EAttribute...)::: attribute values get mask:::mask->foreach->return
AttributeValues#unsetDefault()::: attribute values unset default:::
AttributeValues#defineAll(int)::: attribute values define all:::if->throw->new->InternalError
AttributeValues#allDefined(int)::: attribute values all defined:::return
AttributeValues#anyDefined(int)::: attribute values any defined:::return
AttributeValues#anyNonDefault(int)::: attribute values any non default:::return
AttributeValues#isDefined(EAttribute)::: attribute values is defined:::return
AttributeValues#isNonDefault(EAttribute)::: attribute values is non default:::return
AttributeValues#setDefault(EAttribute)::: attribute values set default:::if->throw->new->InternalError->i_set
AttributeValues#unset(EAttribute)::: attribute values unset:::if->throw->new->InternalError->i_set
AttributeValues#set(EAttribute, AttributeValues)::: attribute values set:::if->throw->new->InternalError->if->setDefault->else->if->i_set->update
AttributeValues#set(EAttribute, Object)::: attribute values set:::if->throw->new->InternalError->if->try->i_set->update->return->catch->finally->setDefault
AttributeValues#get(EAttribute)::: attribute values get:::if->throw->new->InternalError->if->return->i_get->return
AttributeValues#merge(Map)::: attribute values merge:::return->merge
AttributeValues#merge(Map, int)::: attribute values merge:::if->getValues->getValues->merge->else->if->map->isEmpty->foreach->map->entrySet->try->ea->EAttribute->e->getKey->forAttribute->if->e->getValue->set->catch->finally->return
AttributeValues#merge(AttributeValues)::: attribute values merge:::return->merge
AttributeValues#merge(AttributeValues, int)::: attribute values merge:::m->foreach->if->break->if->i_set->update->return
AttributeValues#fromMap(Map)::: attribute values from map:::return->fromMap
AttributeValues#fromMap(Map, int)::: attribute values from map:::return->new->AttributeValues->merge
AttributeValues#toMap(Map)::: attribute values to map:::if->new->HashMap<TextAttribute,Object>->for->m->i->return
AttributeValues#is16Hashtable(Hashtable)::: attribute values is16 hashtable:::return->ht->containsKey
AttributeValues#fromSerializableHashtable(Hashtable)::: attribute values from serializable hashtable:::result->new->AttributeValues->if->ht->isEmpty->foreach->ht->entrySet->key->e->getKey->val->e->getValue->if->key->equals->result->intValue->defineAll->else->try->ea->EAttribute->forAttribute->if->result->set->catch->finally->return
AttributeValues#toSerializableHashtable()::: attribute values to serializable hashtable:::ht->new->Hashtable<>->hashkey->for->m->i->ht->Integer->valueOf->put->return
AttributeValues#hashCode()::: attribute values hash code:::return
AttributeValues#equals(Object)::: attribute values equals:::try->return->equals->catch->finally->return
AttributeValues#equals(AttributeValues)::: attribute values equals:::if->return->if->return->return->equals->equals->equals->equals->equals->equals->equals->equals->equals
AttributeValues#clone()::: attribute values clone:::try->result->super->clone->if->new->AffineTransform->result->updateDerivedTransforms->return->catch->return->finally
AttributeValues#toString()::: attribute values to string:::b->new->StringBuilder->b->append->for->m->i->b->append->b->append->return->b->toString
AttributeValues#equals(Object, Object)::: attribute values equals:::return->lhs->equals
AttributeValues#update(EAttribute)::: attribute values update:::if->i_validate->if->i_equals->else->else->setDefault
AttributeValues#i_set(EAttribute, AttributeValues)::: attribute values i_set:::switch->break->break->break->break->break->updateDerivedTransforms->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->break->throw->new->InternalError
AttributeValues#i_equals(EAttribute, AttributeValues)::: attribute values i_equals:::switch->return->equals->return->return->return->return->return->equals->return->return->equals->return->equals->return->equals->return->equals->return->return->return->return->return->return->equals->return->return->return->equals->return->return->return->throw->new->InternalError
AttributeValues#i_set(EAttribute, Object)::: attribute values i_set:::switch->trim->break->floatValue->break->floatValue->break->floatValue->break->floatValue->break->if->ta->if->ta->isIdentity->else->ta->getTransform->else->new->AffineTransform->updateDerivedTransforms->break->intValue->break->break->break->break->break->intValue->break->booleanValue->break->if->equals->else->intValue->break->intValue->break->floatValue->break->if->at->at->getValue->else->break->intValue->break->booleanValue->break->break->intValue->break->intValue->break->floatValue->break->throw->new->InternalError
AttributeValues#i_get(EAttribute)::: attribute values i_get:::switch->return->return->Float->valueOf->return->Float->valueOf->return->Float->valueOf->return->Float->valueOf->return->new->TransformAttribute->return->Integer->valueOf->return->return->return->return->return->Integer->valueOf->return->Boolean->valueOf->switch->return->return->return->return->Integer->valueOf->return->Float->valueOf->return->return->Integer->valueOf->return->Boolean->valueOf->return->return->Integer->valueOf->return->Integer->valueOf->return->Float->valueOf->throw->new->InternalError
AttributeValues#i_validate(EAttribute)::: attribute values i_validate:::switch->if->family->length->return->return->return->return->return->if->transform->isIdentity->return->return->return->return->return->return->return->return->return->return->min->max->return->return->return->return->return->return->return->return->throw->new->InternalError
AttributeValues#getJustification(Map)::: attribute values get justification:::if->if->getValues->return->getValues->obj->map->get->if->return->floatValue->min->max->return
AttributeValues#getNumericShaping(Map)::: attribute values get numeric shaping:::if->if->getValues->return->getValues->obj->map->get->if->return->return
AttributeValues#applyIMHighlight():::If this has an imHighlight, create copy of this with those attributes applied to it:::if->hl->if->else->getValue->imStyles->hl->getStyle->if->tk->Toolkit->getDefaultToolkit->tk->mapInputMethodHighlight->if->return->clone->merge->return
AttributeValues#getBaselineTransform(Map)::: attribute values get baseline transform:::if->av->if->getValues->getValues->else->if->map->get->AttributeValues->fromMap->if->return->return
AttributeValues#getCharTransform(Map)::: attribute values get char transform:::if->av->if->getValues->getValues->else->if->map->get->AttributeValues->fromMap->if->return->return
AttributeValues#updateDerivedTransforms()::: attribute values update derived transforms:::if->else->new->AffineTransform->extractXRotation->if->charTransform->isIdentity->if->baselineTransform->isIdentity->if->else
AttributeValues#extractXRotation(AffineTransform, boolean)::: attribute values extract rotation:::return->new->Point2D.Double->extractRotation
AttributeValues#extractYRotation(AffineTransform, boolean)::: attribute values extract rotation:::return->new->Point2D.Double->extractRotation
AttributeValues#extractRotation(Point2D.Double, AffineTransform, boolean)::: attribute values extract rotation:::tx->deltaTransform->rtx->AffineTransform->getRotateInstance->try->rtxi->rtx->createInverse->dx->tx->getTranslateX->dy->tx->getTranslateY->tx->preConcatenate->if->if->tx->tx->getScaleX->tx->getShearY->tx->getShearX->tx->getScaleY->setTransform->rtx->rtx->getScaleX->rtx->getShearY->rtx->getShearX->rtx->getScaleY->setTransform->catch->return->finally->return
BidiUtils#getLevels(Bidi, byte[], int):::Return the level of each character into the levels array starting at start:::limit->bidi->getLength->if->throw->new->IndexOutOfBoundsException->runCount->bidi->getRunCount->p->for->i
BidiUtils#getLevels(Bidi):::Return an array containing the resolved bidi level of each character, in logical order.:::levels->bidi->getLength->new->byteArr->getLevels->return
BidiUtils#createVisualToLogicalMap(byte[]):::Given level data, compute a a visual to logical mapping:::len->mapping->new->intArr->lowestOddLevel->highestLevel->for->i->while->i->for->return
BidiUtils#createInverseMap(int[]):::Return the inverse position map:::if->return->result->new->intArr->for->i->return
BidiUtils#createContiguousOrder(int[]):::Return an array containing contiguous values from 0 to length having the same ordering as the source array:::if->return->computeContiguousOrder->return
BidiUtils#computeContiguousOrder(int[], int, int):::Compute a contiguous order for the range start, limit.:::result->new->intArr->for->i->for->i->if->for->i->k->for->if->return->return->createInverseMap
BidiUtils#createNormalizedMap(int[], byte[], int, int):::Return an array containing the data in the values array from start up to limit, normalized to fall within the range from 0 up to limit - start:::if->if->copyRange->canonical->primaryLevel->if->else->if->i->for->else->if->if->return->result->new->intArr->baseValue->if->else->if->System->arraycopy->else->for->j->return->else->return->computeContiguousOrder->else->return->return
BidiUtils#reorderVisually(byte[], Object[]):::Reorder the objects in the array into visual order based on their levels:::len->lowestOddLevel->highestLevel->for->i->while->i->for
CharToGlyphMapper#getMissingGlyphCode()::: char to glyph mapper get missing glyph code:::return
CharToGlyphMapper#canDisplay(char)::: char to glyph mapper can display:::glyph->charToGlyph->return
CharToGlyphMapper#canDisplay(int)::: char to glyph mapper can display:::glyph->charToGlyph->return
CharToGlyphMapper#charToGlyph(char)::: char to glyph mapper char to glyph:::chars->new->charArr->glyphs->new->intArr->charsToGlyphs->return
CharToGlyphMapper#charToGlyph(int)::: char to glyph mapper char to glyph:::chars->new->intArr->glyphs->new->intArr->charsToGlyphs->return
CharToGlyphMapper#charToVariationGlyph(int, int)::: char to glyph mapper char to variation glyph:::return->charToGlyph
CharToGlyphMapper#getNumGlyphs()::: char to glyph mapper get num glyphs:::
CharToGlyphMapper#charsToGlyphs(int, char[], int[])::: char to glyph mapper chars to glyphs:::
CharToGlyphMapper#charsToGlyphsNS(int, char[], int[])::: char to glyph mapper chars to glyphs s:::
CharToGlyphMapper#charsToGlyphs(int, int[], int[])::: char to glyph mapper chars to glyphs:::
CharToGlyphMapper#isVariationSelector(int)::: char to glyph mapper is variation selector:::return
CMap#initialize(TrueTypeFont)::: map initialize:::cmap->offset->platformID->encodingID->three0->three1->three2->three3->three4->three5->three6->three10->zero5->threeStar->cmapBuffer->font->getTableBuffer->cmapTableOffset->font->getTableSize->numberSubTables->cmapBuffer->getShort->for->i->if->if->createCMap->else->if->createCMap->else->if->createCMap->else->if->getConverterMap->createCMap->else->if->getConverterMap->createCMap->else->if->if->startsWith->startsWith->startsWith->getConverterMap->createCMap->else->getConverterMap->createCMap->else->if->getConverterMap->createCMap->else->if->getConverterMap->createCMap->else->cmapBuffer->getInt->createCMap->if->cmap->createUVS->return
CMap#getConverter(short)::: map get converter:::dBegin->dEnd->encoding->switch->break->break->break->break->break->return->try->convertedChars->new->charArr->for->i->inputBytes->new->byteArr->outputChars->new->charArr->j->firstByte->if->for->i->else->for->i->Charset->forName->newDecoder->onMalformedInput->onUnmappableCharacter->replaceWith->ByteBuffer->wrap->CharBuffer->wrap->decode->for->i->if->for->i->System->arraycopy->invertedChars->new->charArr->for->i->return->catch->e->printStackTrace->finally->return
CMap#getConverterMap(short)::: map get converter map:::if->getConverter->return
CMap#createCMap(ByteBuffer, int, char[])::: map create map:::subtableFormat->buffer->getChar->subtableLength->if->buffer->getChar->else->buffer->getInt->if->buffer->capacity->if->FontUtilities->isLogging->FontUtilities->getLogger->warning->switch->return->new->CMapFormat0->return->new->CMapFormat2->return->new->CMapFormat4->return->new->CMapFormat6->return->new->CMapFormat8->return->new->CMapFormat10->return->new->CMapFormat12->throw->buffer->getChar->new->RuntimeException
CMap#createUVS(ByteBuffer, int)::: map create s:::subtableFormat->buffer->getChar->if->subtableLength->buffer->getInt->if->buffer->capacity->if->FontUtilities->isLogging->FontUtilities->getLogger->warning->try->new->UVS->catch->t->printStackTrace->finally->return
CMap#getGlyph(int)::: map get glyph:::
CMap.CMapFormat4#getGlyph(int)::: map format4 get glyph:::origCharCode->index->glyphCode->controlGlyph->getControlCodeGlyph->if->return->if->left->right->while->if->else->if->rangeOffset->if->else->glyphIDIndex->if->if->getFormatCharGlyph->return
CMap.CMapFormat0#getGlyph(int)::: map format0 get glyph:::if->if->switch->return->return->else->return
CMap.CMapFormat2#getGlyph(int)::: map format2 get glyph:::origCharCode->controlGlyph->getControlCodeGlyph->if->return->if->highByte->lowByte->key->mapMe->if->else->if->firstCode->if->return->else->if->glyphArrayOffset->glyphSubArrayStart->glyphCode->if->return->return->getFormatCharGlyph
CMap.CMapFormat6#getGlyph(int)::: map format6 get glyph:::origCharCode->controlGlyph->getControlCodeGlyph->if->return->if->if->return->getFormatCharGlyph->else->return
CMap.CMapFormat8#getGlyph(int)::: map format8 get glyph:::if->throw->new->RuntimeException->return
CMap.CMapFormat10#getGlyph(int)::: map format10 get glyph:::if->throw->new->RuntimeException->code->if->return->else->return
CMap.CMapFormat12#getGlyph(int)::: map format12 get glyph:::origCharCode->controlGlyph->getControlCodeGlyph->if->return->probe->range->if->while->if->if->return->return->getFormatCharGlyph
CMap.NullCMapClass#getGlyph(int)::: null map class get glyph:::return
CMap#getControlCodeGlyph(int, boolean)::: map get control code glyph:::if->switch->return->else->if->return->return
CMap#getFormatCharGlyph(int)::: map get format char glyph:::if->if->return->return
CMap.UVS#getGlyph(int, int)::: s get glyph:::targetSelector->for->i->if->return->if->index->binarySearch->if->return->return
CMap#getVariationGlyph(int, int)::: map get variation glyph:::glyph->if->getGlyph->else->result->uvs->getGlyph->if->else->getGlyph->return
CodePointIterator#setToStart()::: code point iterator set to start:::
CodePointIterator#setToLimit()::: code point iterator set to limit:::
CodePointIterator#next()::: code point iterator next:::
CodePointIterator#prev()::: code point iterator prev:::
CodePointIterator#charIndex()::: code point iterator char index:::
CodePointIterator#create(char[])::: code point iterator create:::return->new->CharArrayCodePointIterator
CodePointIterator#create(char[], int, int)::: code point iterator create:::return->new->CharArrayCodePointIterator
CodePointIterator#create(CharSequence)::: code point iterator create:::return->new->CharSequenceCodePointIterator
CodePointIterator#create(CharacterIterator)::: code point iterator create:::return->new->CharacterIteratorCodePointIterator
CharArrayCodePointIterator#setToStart()::: char array code point iterator set to start:::
CharArrayCodePointIterator#setToLimit()::: char array code point iterator set to limit:::
CharArrayCodePointIterator#next()::: char array code point iterator next:::if->cp1->if->Character->isHighSurrogate->cp2->if->Character->isLowSurrogate->return->Character->toCodePoint->return->return
CharArrayCodePointIterator#prev()::: char array code point iterator prev:::if->cp2->if->Character->isLowSurrogate->cp1->if->Character->isHighSurrogate->return->Character->toCodePoint->return->return
CharArrayCodePointIterator#charIndex()::: char array code point iterator char index:::return
CharSequenceCodePointIterator#setToStart()::: char sequence code point iterator set to start:::
CharSequenceCodePointIterator#setToLimit()::: char sequence code point iterator set to limit:::text->length
CharSequenceCodePointIterator#next()::: char sequence code point iterator next:::if->text->length->cp1->text->charAt->if->Character->isHighSurrogate->text->length->cp2->text->charAt->if->Character->isLowSurrogate->return->Character->toCodePoint->return->return
CharSequenceCodePointIterator#prev()::: char sequence code point iterator prev:::if->cp2->text->charAt->if->Character->isLowSurrogate->cp1->text->charAt->if->Character->isHighSurrogate->return->Character->toCodePoint->return->return
CharSequenceCodePointIterator#charIndex()::: char sequence code point iterator char index:::return
CharacterIteratorCodePointIterator#setToStart()::: character iterator code point iterator set to start:::iter->iter->getBeginIndex->setIndex
CharacterIteratorCodePointIterator#setToLimit()::: character iterator code point iterator set to limit:::iter->iter->getEndIndex->setIndex
CharacterIteratorCodePointIterator#next()::: character iterator code point iterator next:::cp1->iter->current->if->cp2->iter->next->if->Character->isHighSurrogate->if->Character->isLowSurrogate->iter->next->return->Character->toCodePoint->return->return
CharacterIteratorCodePointIterator#prev()::: character iterator code point iterator prev:::cp2->iter->previous->if->if->Character->isLowSurrogate->cp1->iter->previous->if->Character->isHighSurrogate->return->Character->toCodePoint->iter->next->return->return
CharacterIteratorCodePointIterator#charIndex()::: character iterator code point iterator char index:::return->iter->getIndex
CompositeFont#doDeferredInitialisation(int)::: composite font do deferred initialisation:::if->return->fm->SunFontManager->getInstance->synchronized->if->new->StringArr->if->if->fm->initialiseDeferredFont->if->fm->getDefaultPhysicalFont->name->getFontName->if->else->if->equalsIgnoreCase->try->fm->findFont2D->catch->fm->getDefaultPhysicalFont->finally
CompositeFont#replaceComponentFont(PhysicalFont, PhysicalFont)::: composite font replace component font:::if->return->for->slot
CompositeFont#isExcludedChar(int, int)::: composite font is excluded char:::if->return->minIndex->maxIndex->if->curIndex->while->if->return->return
CompositeFont#getStyleMetrics(float, float[], int)::: composite font get style metrics:::font->getSlotFont->if->super->getStyleMetrics->else->font->getStyleMetrics
CompositeFont#getNumSlots()::: composite font get num slots:::return
CompositeFont#getSlotFont(int)::: composite font get slot font:::if->doDeferredInitialisation->fm->SunFontManager->getInstance->try->font->if->try->fm->findFont2D->catch->fm->getDefaultPhysicalFont->finally->return->catch->return->fm->getDefaultPhysicalFont->finally
CompositeFont#createStrike(FontStrikeDesc)::: composite font create strike:::return->new->CompositeStrike
CompositeFont#isStdComposite()::: composite font is std composite:::return
CompositeFont#getValidatedGlyphCode(int)::: composite font get validated glyph code:::slot->if->return->getMapper->getMissingGlyphCode->slotglyphCode->slotFont->getSlotFont->if->slotFont->getValidatedGlyphCode->slotFont->getMissingGlyphCode->return->getMapper->getMissingGlyphCode->else->return
CompositeFont#getMapper()::: composite font get mapper:::if->new->CompositeGlyphMapper->return
CompositeFont#hasSupplementaryChars()::: composite font has supplementary chars:::for->i->return
CompositeFont#getNumGlyphs()::: composite font get num glyphs:::if->getMapper->getNumGlyphs->return
CompositeFont#getMissingGlyphCode()::: composite font get missing glyph code:::return->getMapper->getMissingGlyphCode
CompositeFont#canDisplay(char)::: composite font can display:::return->getMapper->canDisplay
CompositeFont#useAAForPtSize(int)::: composite font use for pt size:::if->numCoreSlots->if->isStdComposite->for->slot->if->return->getSlotFont->useAAForPtSize
CompositeFont#toString()::: composite font to string:::ls->System->lineSeparator->componentsStr->for->i->return
CompositeFontDescriptor#getFaceName()::: composite font descriptor get face name:::return
CompositeFontDescriptor#getCoreComponentCount()::: composite font descriptor get core component count:::return
CompositeFontDescriptor#getComponentFaceNames()::: composite font descriptor get component face names:::return
CompositeFontDescriptor#getComponentFileNames()::: composite font descriptor get component file names:::return
CompositeFontDescriptor#getExclusionRanges()::: composite font descriptor get exclusion ranges:::return
CompositeFontDescriptor#getExclusionRangeLimits()::: composite font descriptor get exclusion range limits:::return
CompositeGlyphMapper#compositeGlyphCode(int, int)::: composite glyph mapper composite glyph code:::return
CompositeGlyphMapper#initMapper()::: composite glyph mapper init mapper:::if->if->new->intArrs->new->CharToGlyphMapperArr->font->getSlotFont->getMissingGlyphCode->compositeGlyphCode
CompositeGlyphMapper#getCachedGlyphCode(int)::: composite glyph mapper get cached glyph code:::if->return->gmap->if->return->return
CompositeGlyphMapper#setCachedGlyphCode(int, int)::: composite glyph mapper set cached glyph code:::if->return->index0->if->new->intArr->for->i
CompositeGlyphMapper#getSlotMapper(int)::: composite glyph mapper get slot mapper:::mapper->if->font->getSlotFont->getMapper->return
CompositeGlyphMapper#convertToGlyph(int)::: composite glyph mapper convert to glyph:::for->slot->return
CompositeGlyphMapper#getNumGlyphs()::: composite glyph mapper get num glyphs:::numGlyphs->for->slot->return
CompositeGlyphMapper#charToGlyph(int)::: composite glyph mapper char to glyph:::glyphCode->getCachedGlyphCode->if->convertToGlyph->return
CompositeGlyphMapper#charToGlyph(int, int)::: composite glyph mapper char to glyph:::if->mapper->getSlotMapper->glyphCode->mapper->charToGlyph->if->mapper->getMissingGlyphCode->return->compositeGlyphCode->return->charToGlyph
CompositeGlyphMapper#charToGlyph(char)::: composite glyph mapper char to glyph:::glyphCode->getCachedGlyphCode->if->convertToGlyph->return
CompositeGlyphMapper#charsToGlyphsNS(int, char[], int[])::: composite glyph mapper chars to glyphs s:::for->i->return
CompositeGlyphMapper#charsToGlyphs(int, char[], int[])::: composite glyph mapper chars to glyphs:::for->i
CompositeGlyphMapper#charsToGlyphs(int, int[], int[])::: composite glyph mapper chars to glyphs:::for->i
CompositeStrike#getStrikeForGlyph(int)::: composite strike get strike for glyph:::return->getStrikeForSlot
CompositeStrike#getStrikeForSlot(int)::: composite strike get strike for slot:::if->strike->if->compFont->getSlotFont->getStrike->return
CompositeStrike#getNumGlyphs()::: composite strike get num glyphs:::return->compFont->getNumGlyphs
CompositeStrike#getFontMetrics()::: composite strike get font metrics:::if->compMetrics->new->StrikeMetrics->for->s->return
CompositeStrike#getGlyphImagePtrs(int[], long[], int)::: composite strike get glyph image ptrs:::strike->getStrikeForSlot->numptrs->strike->getSlot0GlyphImagePtrs->if->return->for->i
CompositeStrike#getGlyphImagePtr(int)::: composite strike get glyph image ptr:::strike->getStrikeForGlyph->return->strike->getGlyphImagePtr
CompositeStrike#getGlyphImageBounds(int, Point2D.Float, Rectangle)::: composite strike get glyph image bounds:::strike->getStrikeForGlyph->strike->getGlyphImageBounds
CompositeStrike#getGlyphMetrics(int)::: composite strike get glyph metrics:::strike->getStrikeForGlyph->return->strike->getGlyphMetrics
CompositeStrike#getCharMetrics(char)::: composite strike get char metrics:::return->compFont->getMapper->charToGlyph->getGlyphMetrics
CompositeStrike#getGlyphAdvance(int)::: composite strike get glyph advance:::strike->getStrikeForGlyph->return->strike->getGlyphAdvance
CompositeStrike#getCodePointAdvance(int)::: composite strike get code point advance:::return->compFont->getMapper->charToGlyph->getGlyphAdvance
CompositeStrike#getGlyphOutlineBounds(int)::: composite strike get glyph outline bounds:::strike->getStrikeForGlyph->return->strike->getGlyphOutlineBounds
CompositeStrike#getGlyphOutline(int, float, float)::: composite strike get glyph outline:::strike->getStrikeForGlyph->path->strike->getGlyphOutline->if->return->new->GeneralPath->else->return
CompositeStrike#getGlyphVectorOutline(int[], float, float)::: composite strike get glyph vector outline:::path->gp->glyphIndex->tmpGlyphs->while->start->slot->while->tmpLen->new->intArr->for->i->getStrikeForSlot->getGlyphVectorOutline->if->else->if->path->append->if->return->new->GeneralPath->else->return
CoreMetrics#get(LineMetrics)::: core metrics get:::return
CoreMetrics#hashCode()::: core metrics hash code:::return->Float->floatToIntBits
CoreMetrics#equals(Object)::: core metrics equals:::try->return->equals->catch->return->finally
CoreMetrics#equals(CoreMetrics)::: core metrics equals:::if->if->return->return->return
CoreMetrics#effectiveBaselineOffset(float[])::: core metrics effective baseline offset:::switch->return->return->return
CreatedFontTracker#getTracker()::: created font tracker get tracker:::if->new->CreatedFontTracker->return
CreatedFontTracker#getNumBytes()::: created font tracker get num bytes:::return
CreatedFontTracker#addBytes(int)::: created font tracker add bytes:::
CreatedFontTracker#subBytes(int)::: created font tracker sub bytes:::
CreatedFontTracker#getCS():::Returns an AppContext-specific counting semaphore.:::appContext->AppContext->getAppContext->cs->appContext->get->if->new->Semaphore->appContext->put->return
CreatedFontTracker#acquirePermit()::: created font tracker acquire permit:::return->getCS->tryAcquire
CreatedFontTracker#releasePermit()::: created font tracker release permit:::getCS->release
CreatedFontTracker#add(File)::: created font tracker add:::TempFileDeletionHook->add
CreatedFontTracker#set(File, OutputStream)::: created font tracker set:::TempFileDeletionHook->set
CreatedFontTracker#remove(File)::: created font tracker remove:::TempFileDeletionHook->remove
CreatedFontTracker.TempFileDeletionHook#init()::: temp file deletion hook init:::if->AccessController->rootTG->ThreadGroupUtils->getRootThreadGroup->TempFileDeletionHook->runHooks->new->Thread->t->setContextClassLoader->Runtime->getRuntime->addShutdownHook->return->doPrivileged
CreatedFontTracker.TempFileDeletionHook#add(File)::: temp file deletion hook add:::init->files->put
CreatedFontTracker.TempFileDeletionHook#set(File, OutputStream)::: temp file deletion hook set:::files->put
CreatedFontTracker.TempFileDeletionHook#remove(File)::: temp file deletion hook remove:::files->remove
CreatedFontTracker.TempFileDeletionHook#runHooks()::: temp file deletion hook run hooks:::if->files->isEmpty->return->foreach->files->entrySet->try->if->entry->getValue->entry->getValue->close->catch->finally->entry->getKey->delete
Decoration.Label#getCoreMetrics()::: label get core metrics:::
Decoration.Label#getLogicalBounds()::: label get logical bounds:::
Decoration.Label#handleDraw(Graphics2D, float, float)::: label handle draw:::
Decoration.Label#handleGetCharVisualBounds(int)::: label handle get char visual bounds:::
Decoration.Label#handleGetVisualBounds()::: label handle get visual bounds:::
Decoration.Label#handleGetOutline(float, float)::: label handle get outline:::
Decoration#getPlainDecoration():::Return a Decoration which does nothing.:::return
Decoration#getDecoration(AttributeValues)::: decoration get decoration:::if->values->anyDefined->return->values->applyIMHighlight->return->values->getForeground->values->getBackground->values->getSwapColors->values->getStrikethrough->Underline->values->getUnderline->getUnderline->Underline->values->getInputMethodUnderline->getUnderline->new->DecorationImpl
Decoration#getDecoration(Map):::Return a Decoration appropriate for the given Map.:::if->return->return->AttributeValues->fromMap->getDecoration
Decoration#drawTextAndDecorations(Label, Graphics2D, float, float)::: decoration draw text and decorations:::label->handleDraw
Decoration#getVisualBounds(Label)::: decoration get visual bounds:::return->label->handleGetVisualBounds
Decoration#getCharVisualBounds(Label, int)::: decoration get char visual bounds:::return->label->handleGetCharVisualBounds
Decoration#getOutline(Label, float, float)::: decoration get outline:::return->label->handleGetOutline
Decoration.DecorationImpl#areEqual(Object, Object)::: decoration impl are equal:::if->return->else->return->lhs->equals
Decoration.DecorationImpl#equals(Object)::: decoration impl equals:::if->return->if->return->other->try->catch->return->finally->if->return->if->areEqual->return->if->areEqual->return->if->areEqual->return->return->areEqual
Decoration.DecorationImpl#hashCode()::: decoration impl hash code:::hc->if->if->if->stdUnderline->hashCode->return
Decoration.DecorationImpl#getUnderlineMaxY(CoreMetrics):::Return the bottom of the Rectangle which encloses pixels drawn by underlines.:::maxY->if->ulBottom->stdUnderline->getLowerDrawLimit->Math->max->if->ulBottom->imUnderline->getLowerDrawLimit->Math->max->return
Decoration.DecorationImpl#drawTextAndEmbellishments(Label, Graphics2D, float, float)::: decoration impl draw text and embellishments:::label->handleDraw->if->return->x1->x2->label->getLogicalBounds->getWidth->cm->label->getCoreMetrics->if->savedStroke->g2d->getStroke->g2d->new->BasicStroke->setStroke->strikeY->g2d->new->Line2D.Float->draw->g2d->setStroke->ulOffset->ulThickness->if->stdUnderline->drawUnderline->if->imUnderline->drawUnderline
Decoration.DecorationImpl#drawTextAndDecorations(Label, Graphics2D, float, float)::: decoration impl draw text and decorations:::if->drawTextAndEmbellishments->else->savedPaint->g2d->getPaint->foreground->background->if->if->if->bg->brightness->bg->getRed->bg->getGreen->bg->getBlue->else->else->else->if->bgArea->label->getLogicalBounds->bgArea->getX->bgArea->getY->bgArea->getWidth->bgArea->getHeight->new->Rectangle2D.Float->g2d->setPaint->g2d->fill->g2d->setPaint->drawTextAndEmbellishments->g2d->setPaint
Decoration.DecorationImpl#getVisualBounds(Label)::: decoration impl get visual bounds:::visBounds->label->handleGetVisualBounds->if->minX->lb->label->getLogicalBounds->minY->maxY->if->lb->getY->lb->getHeight->Math->label->getCoreMetrics->getUnderlineMaxY->max->ab->lb->getWidth->new->Rectangle2D.Float->visBounds->add->return
Decoration.DecorationImpl#getOutline(Label, float, float)::: decoration impl get outline:::if->return->label->handleGetOutline->cm->label->getCoreMetrics->ulThickness->ulOffset->lb->label->getLogicalBounds->x1->x2->lb->getWidth->area->if->ul->stdUnderline->getUnderlineShape->new->Area->if->stStroke->new->BasicStroke->shiftY->line->new->Line2D.Float->slArea->stStroke->createStrokedShape->new->Area->if->else->area->add->if->ul->imUnderline->getUnderlineShape->ulArea->new->Area->if->else->area->add->area->label->handleGetOutline->new->Area->add->return->new->GeneralPath
Decoration.DecorationImpl#toString()::: decoration impl to string:::sb->new->StringBuilder->sb->super->toString->append->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->if->sb->append->sb->append->return->sb->toString
DelegatingShape#getBounds()::: delegating shape get bounds:::return->delegate->getBounds
DelegatingShape#getBounds2D()::: delegating shape get bounds2 d:::return->delegate->getBounds2D
DelegatingShape#contains(double, double)::: delegating shape contains:::return->delegate->contains
DelegatingShape#contains(Point2D)::: delegating shape contains:::return->delegate->contains
DelegatingShape#intersects(double, double, double, double)::: delegating shape intersects:::return->delegate->intersects
DelegatingShape#intersects(Rectangle2D)::: delegating shape intersects:::return->delegate->intersects
DelegatingShape#contains(double, double, double, double)::: delegating shape contains:::return->delegate->contains
DelegatingShape#contains(Rectangle2D)::: delegating shape contains:::return->delegate->contains
DelegatingShape#getPathIterator(AffineTransform)::: delegating shape get path iterator:::return->delegate->getPathIterator
DelegatingShape#getPathIterator(AffineTransform, double)::: delegating shape get path iterator:::return->delegate->getPathIterator
ExtendedTextLabel#getNumCharacters():::Return the number of characters represented by this label.:::
ExtendedTextLabel#getCoreMetrics():::Return the line metrics for all text in this label.:::
ExtendedTextLabel#getCharX(int):::Return the x location of the character at the given logical index.:::
ExtendedTextLabel#getCharY(int):::Return the y location of the character at the given logical index.:::
ExtendedTextLabel#getCharAdvance(int):::Return the advance of the character at the given logical index.:::
ExtendedTextLabel#getCharVisualBounds(int, float, float):::Return the visual bounds of the character at the given logical index:::
ExtendedTextLabel#logicalToVisual(int):::Return the visual index of the character at the given logical index.:::
ExtendedTextLabel#visualToLogical(int):::Return the logical index of the character at the given visual index.:::
ExtendedTextLabel#getLineBreakIndex(int, float):::Return the logical index of the character, starting with the character at logicalStart, whose accumulated advance exceeds width:::
ExtendedTextLabel#getAdvanceBetween(int, int):::Return the accumulated advances of all characters between logicalStart and logicalLimit.:::
ExtendedTextLabel#caretAtOffsetIsValid(int):::Return whether a caret can exist on the leading edge of the character at offset:::
ExtendedTextLabel#getCharVisualBounds(int):::A convenience overload of getCharVisualBounds that defaults the label origin to 0, 0.:::return->getCharVisualBounds
ExtendedTextLabel#getSubset(int, int, int)::: extended text label get subset:::
ExtendedTextLabel#getNumJustificationInfos():::Return the number of justification records this uses.:::
ExtendedTextLabel#getJustificationInfos(GlyphJustificationInfo[], int, int, int):::Return GlyphJustificationInfo objects for the characters between charStart and charLimit, starting at offset infoStart:::
ExtendedTextLabel#applyJustificationDeltas(float[], int, boolean[]):::Apply deltas to the data in this component, starting at offset deltaStart, and return the new component:::
ExtendedTextSourceLabel#finishInit()::: extended text source label finish init:::source->getFont->atts->font->getAttributes->AttributeValues->getBaselineTransform->if->source->getCoreMetrics->else->charTX->AttributeValues->getCharTransform->if->new->AffineTransform->font->deriveFont->lm->font->source->getChars->source->getStart->source->getStart->source->getLength->source->getFRC->getLineMetrics->CoreMetrics->get
ExtendedTextSourceLabel#getLogicalBounds()::: extended text source label get logical bounds:::return->getLogicalBounds
ExtendedTextSourceLabel#getLogicalBounds(float, float)::: extended text source label get logical bounds:::if->createLogicalBounds->return->lb->getX->lb->getY->lb->getWidth->lb->getHeight->new->Rectangle2D.Float
ExtendedTextSourceLabel#getAdvance()::: extended text source label get advance:::if->createLogicalBounds->return->lb->getWidth
ExtendedTextSourceLabel#getVisualBounds(float, float)::: extended text source label get visual bounds:::if->decorator->getVisualBounds->return->vb->getX->vb->getY->vb->getWidth->vb->getHeight->new->Rectangle2D.Float
ExtendedTextSourceLabel#getAlignBounds(float, float)::: extended text source label get align bounds:::if->createAlignBounds->return->ab->getX->ab->getY->ab->getWidth->ab->getHeight->new->Rectangle2D.Float
ExtendedTextSourceLabel#getItalicBounds(float, float)::: extended text source label get italic bounds:::if->createItalicBounds->return->ib->getX->ib->getY->ib->getWidth->ib->getHeight->new->Rectangle2D.Float
ExtendedTextSourceLabel#getPixelBounds(FontRenderContext, float, float)::: extended text source label get pixel bounds:::return->getGV->getPixelBounds
ExtendedTextSourceLabel#isSimple()::: extended text source label is simple:::return->Decoration->getPlainDecoration
ExtendedTextSourceLabel#getBaselineTransform()::: extended text source label get baseline transform:::return
ExtendedTextSourceLabel#handleGetOutline(float, float)::: extended text source label handle get outline:::return->getGV->getOutline
ExtendedTextSourceLabel#getOutline(float, float)::: extended text source label get outline:::return->decorator->getOutline
ExtendedTextSourceLabel#handleDraw(Graphics2D, float, float)::: extended text source label handle draw:::g->getGV->drawGlyphVector
ExtendedTextSourceLabel#draw(Graphics2D, float, float)::: extended text source label draw:::decorator->drawTextAndDecorations
ExtendedTextSourceLabel#createLogicalBounds():::The logical bounds extends from the origin of the glyphvector to the position at which a following glyphvector's origin should be placed:::return->getGV->getLogicalBounds
ExtendedTextSourceLabel#handleGetVisualBounds()::: extended text source label handle get visual bounds:::return->getGV->getVisualBounds
ExtendedTextSourceLabel#createAlignBounds():::Like createLogicalBounds except ignore leading and logically trailing white space:::info->getCharinfo->al->at->aw->ah->if->return->new->Rectangle2D.Float->lineIsLTR->source->getLayoutFlags->rn->if->while->if->ln->while->Math->max->return->new->Rectangle2D.Float
ExtendedTextSourceLabel#createItalicBounds()::: extended text source label create italic bounds:::ia->lb->getLogicalBounds->l->lb->getMinX->t->r->lb->getMaxX->b->if->if->else->return->new->Rectangle2D.Float
ExtendedTextSourceLabel#getGV()::: extended text source label get v:::if->createGV->return
ExtendedTextSourceLabel#createGV()::: extended text source label create v:::frc->source->getFRC->flags->source->getLayoutFlags->context->source->getChars->start->source->getStart->length->source->getLength->gl->GlyphLayout->get->gl->layout->GlyphLayout->done->return
ExtendedTextSourceLabel#getNumCharacters()::: extended text source label get num characters:::return->source->getLength
ExtendedTextSourceLabel#getCoreMetrics()::: extended text source label get core metrics:::return
ExtendedTextSourceLabel#getCharX(int)::: extended text source label get char x:::validate->charinfo->getCharinfo->idx->l2v->if->return->else->return
ExtendedTextSourceLabel#getCharY(int)::: extended text source label get char y:::validate->charinfo->getCharinfo->idx->l2v->if->return->else->return
ExtendedTextSourceLabel#getCharAdvance(int)::: extended text source label get char advance:::validate->charinfo->getCharinfo->idx->l2v->if->return->else->return
ExtendedTextSourceLabel#handleGetCharVisualBounds(int)::: extended text source label handle get char visual bounds:::validate->charinfo->getCharinfo->l2v->if->return->new->Rectangle2D.Float->return->new->Rectangle2D.Float
ExtendedTextSourceLabel#getCharVisualBounds(int, float, float)::: extended text source label get char visual bounds:::bounds->decorator->getCharVisualBounds->if->bounds->bounds->getX->bounds->getY->bounds->getWidth->bounds->getHeight->setRect->return
ExtendedTextSourceLabel#validate(int)::: extended text source label validate:::if->throw->new->IllegalArgumentException->else->if->source->getLength->throw->source->getLength->new->IllegalArgumentException
ExtendedTextSourceLabel#logicalToVisual(int)::: extended text source label logical to visual:::validate->return->l2v
ExtendedTextSourceLabel#visualToLogical(int)::: extended text source label visual to logical:::validate->return->v2l
ExtendedTextSourceLabel#getLineBreakIndex(int, float)::: extended text source label get line break index:::charinfo->getCharinfo->length->source->getLength->while->cidx->l2v->if->break->adv->return
ExtendedTextSourceLabel#getAdvanceBetween(int, int)::: extended text source label get advance between:::a->charinfo->getCharinfo->while->cidx->l2v->if->break->return
ExtendedTextSourceLabel#caretAtOffsetIsValid(int)::: extended text source label caret at offset is valid:::if->source->getLength->return->c->source->getChars->source->getStart->if->return->v->l2v->idx->charinfo->getCharinfo->if->return->else->return
ExtendedTextSourceLabel#getCharinfo()::: extended text source label get charinfo:::if->createCharinfo->return
ExtendedTextSourceLabel#createCharinfo()::: extended text source label create charinfo:::gv->getGV->glyphinfo->try->gv->getGlyphInfo->catch->if->println->e->printStackTrace->gv->getNumGlyphs->new->floatArr->finally->numGlyphs->gv->getNumGlyphs->if->return->indices->gv->getGlyphCharIndices->charInfo->source->getLength->new->floatArr->if->println->println->println->for->i->minIndex->maxIndex->cp->cc->gp->gx->gxlimit->pdelta->xdelta->rtl->source->getLayoutFlags->if->cposl->cposr->cvisl->cvist->cvisr->cvisb->baseline->while->clusterExtraGlyphs->while->if->println->radvx->if->rposx->Math->min->Math->max->rvisw->if->rvisx->rvisy->Math->min->Math->min->Math->max->Math->max->Math->min->Math->max->if->println->tgt->if->else->if->println->while->if->if->if->println->break->if->println->if->chars->source->getChars->start->source->getStart->length->source->getLength->println->for->i->return
ExtendedTextSourceLabel#l2v(int):::Map logical character index to visual character index:::return->source->getLayoutFlags->source->getLength
ExtendedTextSourceLabel#v2l(int):::Map visual character index to logical character index:::return->source->getLayoutFlags->source->getLength
ExtendedTextSourceLabel#getSubset(int, int, int)::: extended text source label get subset:::return->source->getSubSource->new->ExtendedTextSourceLabel
ExtendedTextSourceLabel#toString()::: extended text source label to string:::if->return->source->toString->sb->new->StringBuilder->sb->super->toString->append->sb->append->sb->source->toString->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->if->sb->append->else->sb->append->for->i->sb->append->return->sb->toString
ExtendedTextSourceLabel#getNumJustificationInfos()::: extended text source label get num justification infos:::return->getGV->getNumGlyphs
ExtendedTextSourceLabel#getJustificationInfos(GlyphJustificationInfo[], int, int, int)::: extended text source label get justification infos:::gv->getGV->charinfo->getCharinfo->size->gv->getFont->getSize2D->nullInfo->new->GlyphJustificationInfo->spaceInfo->new->GlyphJustificationInfo->kanjiInfo->new->GlyphJustificationInfo->chars->source->getChars->offset->source->getStart->numGlyphs->gv->getNumGlyphs->minGlyph->maxGlyph->ltr->source->getLayoutFlags->if->source->getLength->if->else->for->i
ExtendedTextSourceLabel#applyJustificationDeltas(float[], int, boolean[])::: extended text source label apply justification deltas:::newCharinfo->getCharinfo->clone->newgv->getGV->clone->newPositions->newgv->getGlyphPositions->numGlyphs->newgv->getNumGlyphs->chars->source->getChars->offset->source->getStart->deltaPos->for->i->newgv->setGlyphPositions->result->new->ExtendedTextSourceLabel->return
FileFont#createStrike(FontStrikeDesc)::: file font create strike:::if->checkUseNatives->return->new->FileFontStrike
FileFont#checkUseNatives()::: file font check use natives:::return
FileFont#close()::: file font close:::
FileFont#readBlock(int, int)::: file font read block:::
FileFont#canDoStyle(int)::: file font can do style:::return
FileFont#setFileToRemove(List, File, int, CreatedFontTracker)::: file font set file to remove:::dr->new->CreatedFontFileDisposerRecord->foreach->Disposer->addObjectRecord
FileFont#deregisterFontAndClearStrikeCache()::: file font deregister font and clear strike cache:::fm->SunFontManager->getInstance->fm->deRegisterBadFont->foreach->strikeCache->values->if->strike->strikeRef->get->if->scaler->invalidateScalerContext->if->scaler->disposeScaler->FontScaler->getNullScaler
FileFont#getFontMetrics(long)::: file font get font metrics:::try->return->getScaler->getFontMetrics->catch->FontScaler->getNullScaler->return->getFontMetrics->finally
FileFont#getGlyphAdvance(long, int)::: file font get glyph advance:::try->return->getScaler->getGlyphAdvance->catch->FontScaler->getNullScaler->return->getGlyphAdvance->finally
FileFont#getGlyphMetrics(long, int, Point2D.Float)::: file font get glyph metrics:::try->getScaler->getGlyphMetrics->catch->FontScaler->getNullScaler->getGlyphMetrics->finally
FileFont#getGlyphImage(long, int)::: file font get glyph image:::try->return->getScaler->getGlyphImage->catch->FontScaler->getNullScaler->return->getGlyphImage->finally
FileFont#getGlyphOutlineBounds(long, int)::: file font get glyph outline bounds:::try->return->getScaler->getGlyphOutlineBounds->catch->FontScaler->getNullScaler->return->getGlyphOutlineBounds->finally
FileFont#getGlyphOutline(long, int, float, float)::: file font get glyph outline:::try->return->getScaler->getGlyphOutline->catch->FontScaler->getNullScaler->return->getGlyphOutline->finally
FileFont#getGlyphVectorOutline(long, int[], int, float, float)::: file font get glyph vector outline:::try->return->getScaler->getGlyphVectorOutline->catch->FontScaler->getNullScaler->return->getGlyphVectorOutline->finally
FileFont#getScaler()::: file font get scaler:::
FileFont#getUnitsPerEm()::: file font get units per em:::return->getScaler->getUnitsPerEm
FileFont.CreatedFontFileDisposerRecord#dispose()::: created font file disposer record dispose:::new->java.security.PrivilegedAction<Object>->doPrivileged
FileFont#getPublicFileName()::: file font get public file name:::sm->System->getSecurityManager->if->return->canReadProperty->try->sm->checkPropertyAccess->catch->finally->if->return->f->new->File->isTmpFile->try->AccessController->new->PrivilegedExceptionAction<Boolean>->doPrivileged->catch->finally->return
FileFontStrike#initNative()::: file font strike init native:::
FileFontStrike#getNumGlyphs()::: file font strike get num glyphs:::return->fileFont->getNumGlyphs
FileFontStrike#getGlyphImageFromNative(int)::: file font strike get glyph image from native:::if->return->getGlyphImageFromWindows->else->return->getGlyphImageFromX11
FileFontStrike#_getGlyphImageFromWindows(String, int, int, int, boolean)::: file font strike _get glyph image from windows:::
FileFontStrike#getGlyphImageFromWindows(int)::: file font strike get glyph image from windows:::family->fileFont->getFamilyName->style->fileFont->getStyle->size->ptr->_getGlyphImageFromWindows->if->advance->getGlyphAdvance->putFloat->return->else->return->fileFont->getGlyphImage
FileFontStrike#getGlyphImageFromX11(int)::: file font strike get glyph image from x11:::glyphPtr->charCode->for->i->return->fileFont->getGlyphImage
FileFontStrike#getGlyphImagePtr(int)::: file font strike get glyph image ptr:::if->return->glyphPtr->if->getCachedGlyphPtr->return->else->if->getGlyphImageFromNative->if->FontUtilities->isLogging->FontUtilities->getLogger->info->if->fileFont->getGlyphImage->return->setCachedGlyphPtr
FileFontStrike#getGlyphImagePtrs(int[], long[], int)::: file font strike get glyph image ptrs:::for->i
FileFontStrike#getSlot0GlyphImagePtrs(int[], long[], int)::: file font strike get slot0 glyph image ptrs:::convertedCnt->for->i->return
FileFontStrike#getCachedGlyphPtr(int)::: file font strike get cached glyph ptr:::try->return->getCachedGlyphPtrInternal->catch->nullScaler->FontScaler->getNullScaler->nullSC->NullFontScaler->getNullScalerContext->return->nullScaler->getGlyphImage->finally
FileFontStrike#getCachedGlyphPtrInternal(int)::: file font strike get cached glyph ptr internal:::switch->return->segIndex->if->subIndex->return->else->return->return->if->subIndex->return->else->return->return
FileFontStrike#setCachedGlyphPtr(int, long)::: file font strike set cached glyph ptr:::try->return->setCachedGlyphPtrInternal->catch->switch->StrikeCache->freeIntPointer->break->StrikeCache->freeLongPointer->break->nullScaler->FontScaler->getNullScaler->nullSC->NullFontScaler->getNullScalerContext->return->nullScaler->getGlyphImage->finally
FileFontStrike#setCachedGlyphPtrInternal(int, long)::: file font strike set cached glyph ptr internal:::switch->if->return->else->StrikeCache->freeIntPointer->return->segIndex->subIndex->if->new->intArr->if->return->else->StrikeCache->freeIntPointer->return->if->return->else->StrikeCache->freeLongPointer->return->if->new->longArr->if->return->else->StrikeCache->freeLongPointer->return->initGlyphCache->return->setCachedGlyphPtr
FileFontStrike#initGlyphCache()::: file font strike init glyph cache:::numGlyphs->mapper->getNumGlyphs->tmpFormat->if->numSegments->if->new->longArrs->else->new->intArrs->else->if->new->longArr->else->new->intArr
FileFontStrike#getGlyphAdvance(int)::: file font strike get glyph advance:::return->getGlyphAdvance
FileFontStrike#getGlyphAdvance(int, boolean)::: file font strike get glyph advance:::advance->if->return->if->if->if->metrics->new->Point2D.Float->deltaTransform->return->else->return->else->if->segIndex->subArray->if->if->if->metrics->new->Point2D.Float->deltaTransform->return->else->return->if->metrics->new->Point2D.Float->fileFont->getGlyphMetrics->return->if->getGlyphMetrics->else->glyphPtr->if->getGlyphImagePtr->else->getCachedGlyphPtr->if->getFloat->else->fileFont->getGlyphAdvance->if->else->if->segIndex->subIndex->if->new->floatArr->for->i->return
FileFontStrike#getCodePointAdvance(int)::: file font strike get code point advance:::return->mapper->charToGlyph->getGlyphAdvance
FileFontStrike#getGlyphImageBounds(int, Point2D.Float, Rectangle):::Result and pt are both in device space.:::ptr->getGlyphImagePtr->topLeftX->topLeftY->if->Math->floor->Math->floor->return->getFloat->getFloat->Math->floor->Math->floor->getShort->getShort->if->minx->getGlyphImageMinX->if
FileFontStrike#getGlyphImageMinX(long, int)::: file font strike get glyph image min x:::width->getChar->height->getChar->rowBytes->getChar->if->return->pixelData->getAddress->if->return->for->y->return
FileFontStrike#getFontMetrics()::: file font strike get font metrics:::if->fileFont->getFontMetrics->if->strikeMetrics->convertToUserSpace->return
FileFontStrike#getGlyphMetrics(int)::: file font strike get glyph metrics:::return->getGlyphMetrics
FileFontStrike#getGlyphMetrics(int, boolean)::: file font strike get glyph metrics:::metrics->new->Point2D.Float->if->return->glyphPtr->if->getGlyphImagePtr->else->getCachedGlyphPtr->if->new->Point2D.Float->getFloat->getFloat->if->invertDevTx->deltaTransform->else->key->Integer->valueOf->value->glyphMetricsMap->if->glyphMetricsMapRef->get->if->glyphMetricsMap->get->if->return->if->fileFont->getGlyphMetrics->if->invertDevTx->deltaTransform->new->Point2D.Float->if->new->ConcurrentHashMap<Integer,Point2D.Float>->new->SoftReference<ConcurrentHashMap<Integer,Point2D.Float>>->glyphMetricsMap->put->return
FileFontStrike#getCharMetrics(char)::: file font strike get char metrics:::return->mapper->charToGlyph->getGlyphMetrics
FileFontStrike#getGlyphOutlineBounds(int)::: file font strike get glyph outline bounds:::if->new->ConcurrentHashMap<Integer,Rectangle2D.Float>->key->Integer->valueOf->bounds->boundsMap->get->if->fileFont->getGlyphOutlineBounds->boundsMap->put->return
FileFontStrike#getOutlineBounds(int)::: file font strike get outline bounds:::return->fileFont->getGlyphOutlineBounds
FileFontStrike#getGlyphOutline(int, float, float)::: file font strike get glyph outline:::gp->outlineMap->if->outlineMapRef->get->if->outlineMap->get->if->fileFont->getGlyphOutline->if->new->ConcurrentHashMap<Integer,GeneralPath>->new->WeakReference<ConcurrentHashMap<Integer,GeneralPath>>->outlineMap->put->gp->clone->if->gp->AffineTransform->getTranslateInstance->transform->return
FileFontStrike#getGlyphVectorOutline(int[], float, float)::: file font strike get glyph vector outline:::return->fileFont->getGlyphVectorOutline
FileFontStrike#adjustPoint(Point2D.Float)::: file font strike adjust point:::if->invertDevTx->deltaTransform
Font2D#getStyle()::: font2 d get style:::return
Font2D#setStyle()::: font2 d set style:::fName->fullName->toLowerCase->for->i->for->i->for->i
Font2D#getWidth()::: font2 d get width:::return
Font2D#getWeight()::: font2 d get weight:::if->return->else->return
Font2D#getRank()::: font2 d get rank:::return
Font2D#setRank(int)::: font2 d set rank:::
Font2D#getMapper()::: font2 d get mapper:::
Font2D#getValidatedGlyphCode(int)::: font2 d get validated glyph code:::if->getMapper->getNumGlyphs->getMapper->getMissingGlyphCode->return
Font2D#createStrike(FontStrikeDesc)::: font2 d create strike:::
Font2D#getStrike(Font)::: font2 d get strike:::strike->lastFontStrike->get->if->return->else->return->getStrike
Font2D#getStrike(Font, AffineTransform, int, int)::: font2 d get strike:::ptSize->font->getSize2D->glyphTx->devTx->clone->glyphTx->scale->if->font->isTransformed->glyphTx->font->getTransform->concatenate->if->glyphTx->getTranslateX->glyphTx->getTranslateY->glyphTx->glyphTx->getScaleX->glyphTx->getShearY->glyphTx->getShearX->glyphTx->getScaleY->setTransform->desc->font->getStyle->new->FontStrikeDesc->return->getStrike
Font2D#getStrike(Font, AffineTransform, AffineTransform, int, int)::: font2 d get strike:::desc->font->getStyle->new->FontStrikeDesc->return->getStrike
Font2D#getStrike(Font, FontRenderContext)::: font2 d get strike:::at->frc->getTransform->ptSize->font->getSize2D->at->scale->if->font->isTransformed->at->font->getTransform->concatenate->if->at->getTranslateX->at->getTranslateY->at->at->getScaleX->at->getShearY->at->getShearX->at->getScaleY->setTransform->aa->FontStrikeDesc->getAAHintIntVal->fm->FontStrikeDesc->frc->getFractionalMetricsHint->getFMHintIntVal->desc->frc->getTransform->font->getStyle->new->FontStrikeDesc->return->getStrike
Font2D#getStrike(FontStrikeDesc)::: font2 d get strike:::return->getStrike
Font2D#getStrike(FontStrikeDesc, boolean)::: font2 d get strike:::strike->lastFontStrike->get->if->desc->equals->return->else->strikeRef->strikeCache->get->if->strikeRef->get->if->new->SoftReference<>->StrikeCache->refStrike->return->if->new->FontStrikeDesc->createStrike->txType->getType->if->strikeCache->size->StrikeCache->getStrikeRef->else->StrikeCache->getStrikeRef->strikeCache->put->new->SoftReference<>->StrikeCache->refStrike->return
Font2D#removeFromCache(FontStrikeDesc)::: font2 d remove from cache:::ref->strikeCache->get->if->o->ref->get->if->strikeCache->remove
Font2D#getFontMetrics(Font, AffineTransform, Object, Object, float[]):::The length of the metrics array must be >= 8:::aa->FontStrikeDesc->font->getSize->getAAHintIntVal->fm->FontStrikeDesc->getFMHintIntVal->strike->getStrike->strikeMetrics->strike->getFontMetrics->strikeMetrics->getAscent->strikeMetrics->getDescent->strikeMetrics->getLeading->strikeMetrics->getMaxAdvance->font->getSize2D->getStyleMetrics
Font2D#getStyleMetrics(float, float[], int):::The length of the metrics array must be >= offset+4, and offset must be >= 0:::
Font2D#getFontMetrics(Font, FontRenderContext, float[]):::The length of the metrics array must be >= 4:::strikeMetrics->getStrike->getFontMetrics->strikeMetrics->getAscent->strikeMetrics->getDescent->strikeMetrics->getLeading->strikeMetrics->getMaxAdvance
Font2D#getTableBytes(int)::: font2 d get table bytes:::return
Font2D#getPlatformNativeFontPtr()::: font2 d get platform native font ptr:::return
Font2D#getUnitsPerEm()::: font2 d get units per em:::return
Font2D#supportsEncoding(String)::: font2 d supports encoding:::return
Font2D#canDoStyle(int)::: font2 d can do style:::return
Font2D#useAAForPtSize(int)::: font2 d use for pt size:::return
Font2D#hasSupplementaryChars()::: font2 d has supplementary chars:::return
Font2D#getPostscriptName()::: font2 d get postscript name:::return
Font2D#getFontName(Locale)::: font2 d get font name:::return
Font2D#getFamilyName(Locale)::: font2 d get family name:::return
Font2D#getNumGlyphs()::: font2 d get num glyphs:::return->getMapper->getNumGlyphs
Font2D#charToGlyph(int)::: font2 d char to glyph:::return->getMapper->charToGlyph
Font2D#charToVariationGlyph(int, int)::: font2 d char to variation glyph:::return->getMapper->charToVariationGlyph
Font2D#getMissingGlyphCode()::: font2 d get missing glyph code:::return->getMapper->getMissingGlyphCode
Font2D#canDisplay(char)::: font2 d can display:::return->getMapper->canDisplay
Font2D#canDisplay(int)::: font2 d can display:::return->getMapper->canDisplay
Font2D#getBaselineFor(char)::: font2 d get baseline for:::return
Font2D#getItalicAngle(Font, AffineTransform, Object, Object)::: font2 d get italic angle:::aa->FontStrikeDesc->getAAHintIntVal->fm->FontStrikeDesc->getFMHintIntVal->strike->getStrike->metrics->strike->getFontMetrics->if->return->else->return
FontAccess#setFontAccess(FontAccess)::: font access set font access:::if->throw->new->InternalError
FontAccess#getFontAccess()::: font access get font access:::return
FontAccess#getFont2D(Font)::: font access get font2 d:::
FontAccess#setFont2D(Font, Font2DHandle)::: font access set font2 d:::
FontAccess#setCreatedFont(Font)::: font access set created font:::
FontAccess#isCreatedFont(Font)::: font access is created font:::
FontAccess#getFontPeer(Font)::: font access get font peer:::
FontDesignMetrics#getDefaultFrc()::: font design metrics get default frc:::if->tx->if->GraphicsEnvironment->isHeadless->new->AffineTransform->else->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->getDefaultTransform->new->FontRenderContext->return
FontDesignMetrics.KeyReference#dispose()::: key reference dispose:::if->metricsCache->get->metricsCache->remove
FontDesignMetrics.MetricsKey#init(Font, FontRenderContext)::: metrics key init:::font->hashCode->frc->hashCode
FontDesignMetrics.MetricsKey#equals(Object)::: metrics key equals:::if->return->return->font->equals->frc->equals
FontDesignMetrics.MetricsKey#hashCode()::: metrics key hash code:::return
FontDesignMetrics#getMetrics(Font)::: font design metrics get metrics:::return->getDefaultFrc->getMetrics
FontDesignMetrics#getMetrics(Font, FontRenderContext)::: font design metrics get metrics:::fm->SunFontManager->getInstance->if->fm->maybeUsingAlternateCompositeFonts->FontUtilities->getFont2D->return->new->FontDesignMetrics->m->r->usefontkey->frc->getDefaultFrc->equals->if->metricsCache->get->else->synchronized->init->metricsCache->get->if->r->get->if->new->FontDesignMetrics->if->metricsCache->new->KeyReference->put->else->newKey->new->MetricsKey->metricsCache->new->KeyReference->put->for->i->synchronized->if->return
FontDesignMetrics#initMatrixAndMetrics()::: font design metrics init matrix and metrics:::font2D->FontUtilities->getFont2D->font2D->getStrike->metrics->fontStrike->getFontMetrics->metrics->getAscent->metrics->getDescent->metrics->getLeading->metrics->getMaxAdvance->new->doubleArr->frcTx->getMatrix
FontDesignMetrics#initAdvCache()::: font design metrics init adv cache:::new->floatArr->for->i
FontDesignMetrics#readObject(ObjectInputStream)::: font design metrics read object:::in->defaultReadObject->if->getDefaultFrc->frc->isAntiAliased->frc->usesFractionalMetrics->frc->getTransform->else->new->FontRenderContext->initMatrixAndMetrics->initAdvCache
FontDesignMetrics#writeObject(ObjectOutputStream)::: font design metrics write object:::new->intArr->for->i->out->defaultWriteObject
FontDesignMetrics#handleCharWidth(int)::: font design metrics handle char width:::return->fontStrike->getCodePointAdvance
FontDesignMetrics#getLatinCharWidth(char)::: font design metrics get latin char width:::w->if->handleCharWidth->return
FontDesignMetrics#getFontRenderContext()::: font design metrics get font render context:::return
FontDesignMetrics#charWidth(char)::: font design metrics char width:::w->if->getLatinCharWidth->else->handleCharWidth->return
FontDesignMetrics#charWidth(int)::: font design metrics char width:::if->Character->isValidCodePoint->w->handleCharWidth->return
FontDesignMetrics#stringWidth(String)::: font design metrics string width:::width->if->font->hasLayoutAttributes->if->throw->new->NullPointerException->if->str->length->return->new->TextLayout->getAdvance->else->length->str->length->for->i->return
FontDesignMetrics#charsWidth(char[], int, int)::: font design metrics chars width:::width->if->font->hasLayoutAttributes->if->return->str->new->String->new->TextLayout->getAdvance->else->if->throw->new->IndexOutOfBoundsException->limit->for->i->return
FontDesignMetrics#getSimpleBounds(char[], int, int):::This method is called from java.awt.Font only after verifying the arguments and that the text is simple and there are no layout attributes, font transform etc.:::width->limit->for->i->height->return->new->Rectangle2D.Float
FontDesignMetrics#getWidths()::: font design metrics get widths:::widths->new->intArr->for->ch->return
FontDesignMetrics#getMaxAdvance()::: font design metrics get max advance:::return
FontDesignMetrics#getAscent()::: font design metrics get ascent:::return
FontDesignMetrics#getDescent()::: font design metrics get descent:::return
FontDesignMetrics#getLeading()::: font design metrics get leading:::return
FontDesignMetrics#getHeight()::: font design metrics get height:::if->getAscent->return
FontFamily#getFamily(String)::: font family get family:::return->familyNameMap->name->toLowerCase->get
FontFamily#getAllFamilyNames()::: font family get all family names:::return
FontFamily#remove(Font2D)::: font family remove:::name->font2D->getFamilyName->family->getFamily->if->return->if->if->if->if->if->familyNameMap->remove
FontFamily#getFamilyName()::: font family get family name:::return
FontFamily#getRank()::: font family get rank:::return
FontFamily#isFromSameSource(Font2D)::: font family is from same source:::if->return->existingFont->if->else->if->else->if->else->if->if->return->existDir->new->File->getParentFile->newFont->newDir->new->File->getParentFile->if->try->existDir->getCanonicalFile->catch->finally->if->try->newDir->getCanonicalFile->catch->finally->return->equals
FontFamily#preferredWidth(Font2D)::: font family preferred width:::newWidth->font->getWidth->if->return->if->return->if->Math->abs->Math->abs->if->FontUtilities->debugFonts->FontUtilities->getLogger->info->return->else->if->FontUtilities->debugFonts->FontUtilities->getLogger->info->return
FontFamily#closerWeight(Font2D, Font2D, int)::: font family closer weight:::if->font->getWidth->return->if->return->if->FontUtilities->debugFonts->FontUtilities->getLogger->currFont->getWeight->font->getWeight->info->newWeight->font->getWeight->switch->return->currFont->getWeight->return->Math->abs->Math->currFont->getWeight->abs->return
FontFamily#setFont(Font2D, int)::: font family set font:::if->FontUtilities->isLogging->msg->if->font->getFamilyName->else->FontUtilities->getLogger->info->if->font->getRank->isFromSameSource->if->FontUtilities->isLogging->FontUtilities->getLogger->font->getRank->warning->return->switch->if->preferredWidth->closerWeight->break->if->preferredWidth->closerWeight->break->if->preferredWidth->closerWeight->break->if->preferredWidth->closerWeight->break->break
FontFamily#getFontWithExactStyleMatch(int)::: font family get font with exact style match:::switch->return->return->return->return->return
FontFamily#getFont(int)::: font family get font:::switch->return->if->return->else->if->plain->canDoStyle->return->else->return->if->return->else->if->plain->canDoStyle->return->else->return->if->return->else->if->bold->canDoStyle->return->else->if->italic->canDoStyle->return->else->if->plain->canDoStyle->return->else->return->return
FontFamily#getClosestStyle(int)::: font family get closest style:::switch->if->return->else->if->return->else->return->if->return->else->if->return->else->return->if->return->else->if->return->else->return->if->return->else->if->return->else->return->return
FontFamily#addLocaleNames(FontFamily, String[])::: font family add locale names:::if->new->HashMap<String,FontFamily>->for->i
FontFamily#getLocaleFamily(String)::: font family get locale family:::if->return->return->allLocaleNames->name->toLowerCase->get
FontFamily#getAllFontFamilies()::: font family get all font families:::families->familyNameMap->values->return->families->new->FontFamilyArr->toArray
FontFamily#toString()::: font family to string:::return
FontLineMetrics#getNumChars()::: font line metrics get num chars:::return
FontLineMetrics#getAscent()::: font line metrics get ascent:::return
FontLineMetrics#getDescent()::: font line metrics get descent:::return
FontLineMetrics#getLeading()::: font line metrics get leading:::return
FontLineMetrics#getHeight()::: font line metrics get height:::return
FontLineMetrics#getBaselineIndex()::: font line metrics get baseline index:::return
FontLineMetrics#getBaselineOffsets()::: font line metrics get baseline offsets:::return->clone
FontLineMetrics#getStrikethroughOffset()::: font line metrics get strikethrough offset:::return
FontLineMetrics#getStrikethroughThickness()::: font line metrics get strikethrough thickness:::return
FontLineMetrics#getUnderlineOffset()::: font line metrics get underline offset:::return
FontLineMetrics#getUnderlineThickness()::: font line metrics get underline thickness:::return
FontLineMetrics#hashCode()::: font line metrics hash code:::return->cm->hashCode
FontLineMetrics#equals(Object)::: font line metrics equals:::try->return->cm->equals->catch->return->finally
FontLineMetrics#clone()::: font line metrics clone:::try->return->super->clone->catch->throw->new->InternalError->finally
FontManager#registerFont(Font):::Register a new font:::
FontManager#deRegisterBadFont(Font2D)::: font manager de register bad font:::
FontManager#findFont2D(String, int, int):::The client supplies a name and a style:::
FontManager#createFont2D(File, int, boolean, boolean, CreatedFontTracker):::Creates a Font2D for the specified font file, that is expected to be in the specified font format (according to the constants in java.awt.Font):::
FontManager#usingPerAppContextComposites():::If usingPerAppContextComposites is true, we are in "applet" (eg browser) environment and at least one context has selected an alternate composite font behaviour.:::
FontManager#getNewComposite(String, int, Font2DHandle):::Creates a derived composite font from the specified font (handle).:::
FontManager#preferLocaleFonts():::Indicates a preference for locale-specific fonts in the mapping of logical fonts to physical fonts:::
FontManager#preferProportionalFonts():::preferLocaleFonts() and preferProportionalFonts() are called to inform that the application could be using an alternate set of composite fonts, and so the implementation should try to create a CompositeFonts with this directive in mind.:::
FontManagerFactory#getInstance():::Get a valid FontManager implementation for the current platform.:::if->return->AccessController->new->PrivilegedAction<Object>->doPrivileged->return
FontManagerForSGE#getCreatedFonts():::Return an array of created Fonts, or null, if no fonts were created yet.:::
FontManagerForSGE#getCreatedFontFamilyNames():::Similar to getCreatedFonts, but returns a TreeMap of fonts by family name.:::
FontManagerForSGE#getAllInstalledFonts():::Returns all fonts installed in this environment.:::
FontManagerForSGE#getInstalledFontFamilyNames(Locale)::: font manager for e get installed font family names:::
FontManagerForSGE#useAlternateFontforJALocales()::: font manager for e use alternate fontfor locales:::
FontManagerNativeLibrary#load()::: font manager native library load:::
FontResolver#getAllFonts()::: font resolver get all fonts:::if->GraphicsEnvironment->getLocalGraphicsEnvironment->getAllFonts->for->i->return
FontResolver#getIndexFor(char):::Search fonts in order, and return "1" to indicate its in the default font, (or not found at all),  or the index of the first font which can display the given character, plus 2, if it is not in the default font.:::if->defaultFont->canDisplay->return->for->i->getAllFonts->return
FontResolver#getAllSCFonts()::: font resolver get all fonts:::if->fonts->new->ArrayList<Font>->indices->new->ArrayList<Integer>->for->i->getAllFonts->len->fonts->size->new->intArr->for->i->fonts->new->FontArr->toArray->return
FontResolver#getIndexFor(int)::: font resolver get index for:::if->defaultFont->canDisplay->return->for->i->getAllSCFonts->return
FontResolver#getFontIndex(char):::Return an index for the given character:::blockIndex->block->if->new->intArr->index->if->getIndexFor->return
FontResolver#getFontIndex(int)::: font resolver get font index:::if->return->getFontIndex->return->getIndexFor
FontResolver#nextFontRunIndex(CodePointIterator):::Determines the font index for the code point at the current position in the iterator, then advances the iterator to the first code point that has a different index or until the iterator is DONE, and returns the font index.:::cp->iter->next->fontIndex->if->getFontIndex->while->iter->next->if->getFontIndex->iter->prev->break->return
FontResolver#getFont(int, Map):::Return a Font from a given font index with properties from attributes:::font->if->return->font->deriveFont
FontResolver#getInstance():::Return a shared instance of FontResolver.:::if->new->FontResolver->return
FontRunIterator#init(CompositeFont, char[], int, int)::: font run iterator init:::if->throw->new->IllegalArgumentException->font->getMapper
FontRunIterator#getFont()::: font run iterator get font:::return->font->getSlotFont
FontRunIterator#getGlyphMask()::: font run iterator get glyph mask:::return
FontRunIterator#getPos()::: font run iterator get pos:::return
FontRunIterator#next(int, int)::: font run iterator next:::if->return->ch->nextCodePoint->sl->mapper->charToGlyph->while->nextCodePoint->mapper->charToGlyph->pushback->return
FontRunIterator#next()::: font run iterator next:::return->next
FontRunIterator#nextCodePoint()::: font run iterator next code point:::return->nextCodePoint
FontRunIterator#nextCodePoint(int)::: font run iterator next code point:::if->return->ch->if->nch->if->return
FontRunIterator#pushback(int)::: font run iterator pushback:::if->if->else
FontScaler#getScaler(Font2D, int, boolean, int)::: font scaler get scaler:::scaler->try->new->FreetypeFontScaler->Disposer->addObjectRecord->catch->getNullScaler->fm->FontManagerFactory->getInstance->fm->deRegisterBadFont->finally->return
FontScaler#getNullScaler()::: font scaler get null scaler:::if->new->NullFontScaler->return
FontScaler#getFontMetrics(long)::: font scaler get font metrics:::
FontScaler#getGlyphAdvance(long, int)::: font scaler get glyph advance:::
FontScaler#getGlyphMetrics(long, int, Point2D.Float)::: font scaler get glyph metrics:::
FontScaler#getGlyphImage(long, int)::: font scaler get glyph image:::
FontScaler#getGlyphOutlineBounds(long, int)::: font scaler get glyph outline bounds:::
FontScaler#getGlyphOutline(long, int, float, float)::: font scaler get glyph outline:::
FontScaler#getGlyphVectorOutline(long, int[], int, float, float)::: font scaler get glyph vector outline:::
FontScaler#dispose()::: font scaler dispose:::
FontScaler#disposeScaler():::Used when the native resources held by the scaler need to be released before the 2D disposer runs.:::
FontScaler#getNumGlyphs()::: font scaler get num glyphs:::
FontScaler#getMissingGlyphCode()::: font scaler get missing glyph code:::
FontScaler#getGlyphCode(char)::: font scaler get glyph code:::
FontScaler#getGlyphPoint(long, int, int)::: font scaler get glyph point:::
FontScaler#getUnitsPerEm()::: font scaler get units per em:::
FontScaler#createScalerContext(double[], int, int, float, float, boolean)::: font scaler create scaler context:::
FontScaler#invalidateScalerContext(long)::: font scaler invalidate scaler context:::
FontStrike#getNumGlyphs()::: font strike get num glyphs:::
FontStrike#getFontMetrics()::: font strike get font metrics:::
FontStrike#getGlyphImagePtrs(int[], long[], int)::: font strike get glyph image ptrs:::
FontStrike#getGlyphImagePtr(int)::: font strike get glyph image ptr:::
FontStrike#getGlyphImageBounds(int, Point2D.Float, Rectangle)::: font strike get glyph image bounds:::
FontStrike#getGlyphMetrics(int)::: font strike get glyph metrics:::
FontStrike#getCharMetrics(char)::: font strike get char metrics:::
FontStrike#getGlyphAdvance(int)::: font strike get glyph advance:::
FontStrike#getCodePointAdvance(int)::: font strike get code point advance:::
FontStrike#getGlyphOutlineBounds(int)::: font strike get glyph outline bounds:::
FontStrike#getGlyphOutline(int, float, float)::: font strike get glyph outline:::
FontStrike#getGlyphVectorOutline(int[], float, float)::: font strike get glyph vector outline:::
FontStrikeDesc#hashCode()::: font strike desc hash code:::if->glyphTx->hashCode->devTx->hashCode->return
FontStrikeDesc#equals(Object)::: font strike desc equals:::try->desc->return->equals->equals->catch->return->finally
FontStrikeDesc#getAAHintIntVal(Object, Font2D, int)::: font strike desc get hint int val:::if->return->else->if->return->else->if->if->font2D->useAAForPtSize->return->else->return->else->if->return->else->if->return->else->return
FontStrikeDesc#getAAHintIntVal(Font2D, Font, FontRenderContext)::: font strike desc get hint int val:::aa->frc->getAntiAliasingHint->if->return->else->if->return->else->if->ptSize->tx->frc->getTransform->if->tx->isIdentity->font->isTransformed->font->getSize->else->size->font->getSize2D->if->tx->isIdentity->font->getTransform->tx->scale->else->tx->scale->if->font->isTransformed->tx->font->getTransform->concatenate->shearx->tx->getShearX->scaley->tx->getScaleY->if->Math->sqrt->Math->abs->if->font2D->useAAForPtSize->return->else->return->else->if->return->else->if->return->else->return
FontStrikeDesc#getFMHintIntVal(Object)::: font strike desc get hint int val:::if->return->else->return
FontStrikeDesc#toString()::: font strike desc to string:::return
FontStrikeDisposer#dispose()::: font strike disposer dispose:::if->font2D->removeFromCache->StrikeCache->disposeStrike
FontSubstitution#getCompositeFont2D()::: font substitution get composite font2 d:::
FontUtilities#getFont2D(Font):::Calls the private getFont2D() method in java.awt.Font objects.:::return->FontAccess->getFontAccess->getFont2D
FontUtilities#isComplexScript(char[], int, int):::Return true if there any characters which would trigger layout:::for->i->return
FontUtilities#isComplexText(char[], int, int):::If there is anything in the text which triggers a case where char->glyph does not map 1:1 in straightforward left->right ordering, then this method returns true:::for->i->return
FontUtilities#isNonSimpleChar(char)::: font utilities is non simple char:::return->isComplexCharCode
FontUtilities#isComplexCharCode(int)::: font utilities is complex char code:::if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->return
FontUtilities#getLogger()::: font utilities get logger:::return
FontUtilities#isLogging()::: font utilities is logging:::return
FontUtilities#debugFonts()::: font utilities debug fonts:::return
FontUtilities#fontSupportsDefaultEncoding(Font)::: font utilities font supports default encoding:::return->getFont2D
FontUtilities#getCompositeFontUIResource(Font)::: font utilities get composite font resource:::fuir->new->FontUIResource->font2D->FontUtilities->getFont2D->if->return->fm->FontManagerFactory->getInstance->dialog->fm->font->getStyle->findFont2D->if->return->dialog2D->physicalFont->compMap->compMapRef->get->if->new->ConcurrentHashMap<PhysicalFont,CompositeFont>->new->SoftReference<>->compFont->compMap->get->if->new->CompositeFont->compMap->put->FontAccess->getFontAccess->setFont2D->FontAccess->getFontAccess->setCreatedFont->return
FontUtilities#mapFcName(String)::: font utilities map fc name:::for->i->return
FontUtilities#getFontConfigFUIR(String, int, int)::: font utilities get font config r:::mapped->mapFcName->if->fuir->fm->FontManagerFactory->getInstance->if->sfm->sfm->getFontConfigFUIR->else->new->FontUIResource->return
FontUtilities#textLayoutIsCompatible(Font):::Used by windows printing to assess if a font is likely to be layout compatible with JDK TrueType fonts should be, but if they have no GPOS table, but do have a GSUB table, then they are probably older fonts GDI handles differently.:::font2D->getFont2D->if->ttf->return->ttf->getDirectoryEntry->ttf->getDirectoryEntry->else->return
FreetypeFontScaler#initIDs(Class)::: freetype font scaler init ds:::
FreetypeFontScaler#invalidateScaler()::: freetype font scaler invalidate scaler:::throw->new->FontScalerException
FreetypeFontScaler#getFontMetrics(long)::: freetype font scaler get font metrics:::if->return->font->get->getFontMetricsNative->return->FontScaler->getNullScaler->getFontMetrics
FreetypeFontScaler#getGlyphAdvance(long, int)::: freetype font scaler get glyph advance:::if->return->font->get->getGlyphAdvanceNative->return->FontScaler->getNullScaler->getGlyphAdvance
FreetypeFontScaler#getGlyphMetrics(long, int, Point2D.Float)::: freetype font scaler get glyph metrics:::if->font->get->getGlyphMetricsNative->return->FontScaler->getNullScaler->getGlyphMetrics
FreetypeFontScaler#getGlyphImage(long, int)::: freetype font scaler get glyph image:::if->return->font->get->getGlyphImageNative->return->FontScaler->getNullScaler->getGlyphImage
FreetypeFontScaler#getGlyphOutlineBounds(long, int)::: freetype font scaler get glyph outline bounds:::if->return->font->get->getGlyphOutlineBoundsNative->return->FontScaler->getNullScaler->getGlyphOutlineBounds
FreetypeFontScaler#getGlyphOutline(long, int, float, float)::: freetype font scaler get glyph outline:::if->return->font->get->getGlyphOutlineNative->return->FontScaler->getNullScaler->getGlyphOutline
FreetypeFontScaler#getGlyphVectorOutline(long, int[], int, float, float)::: freetype font scaler get glyph vector outline:::if->return->font->get->getGlyphVectorOutlineNative->return->FontScaler->getNullScaler->getGlyphVectorOutline
FreetypeFontScaler#dispose()::: freetype font scaler dispose:::if->font->get->disposeNativeScaler
FreetypeFontScaler#disposeScaler()::: freetype font scaler dispose scaler:::if->dispose->new->Thread->start
FreetypeFontScaler#getNumGlyphs()::: freetype font scaler get num glyphs:::if->return->getNumGlyphsNative->return->FontScaler->getNullScaler->getNumGlyphs
FreetypeFontScaler#getMissingGlyphCode()::: freetype font scaler get missing glyph code:::if->return->getMissingGlyphCodeNative->return->FontScaler->getNullScaler->getMissingGlyphCode
FreetypeFontScaler#getGlyphCode(char)::: freetype font scaler get glyph code:::if->return->font->get->getGlyphCodeNative->return->FontScaler->getNullScaler->getGlyphCode
FreetypeFontScaler#getGlyphPoint(long, int, int)::: freetype font scaler get glyph point:::if->return->font->get->getGlyphPointNative->return->FontScaler->getNullScaler->getGlyphPoint
FreetypeFontScaler#getUnitsPerEm()::: freetype font scaler get units per em:::return->getUnitsPerEMNative
FreetypeFontScaler#createScalerContext(double[], int, int, float, float, boolean)::: freetype font scaler create scaler context:::if->return->createScalerContextNative->return->NullFontScaler->getNullScalerContext
FreetypeFontScaler#initNativeScaler(Font2D, int, int, boolean, int)::: freetype font scaler init native scaler:::
FreetypeFontScaler#getFontMetricsNative(Font2D, long, long)::: freetype font scaler get font metrics native:::
FreetypeFontScaler#getGlyphAdvanceNative(Font2D, long, long, int)::: freetype font scaler get glyph advance native:::
FreetypeFontScaler#getGlyphMetricsNative(Font2D, long, long, int, Point2D.Float)::: freetype font scaler get glyph metrics native:::
FreetypeFontScaler#getGlyphImageNative(Font2D, long, long, int)::: freetype font scaler get glyph image native:::
FreetypeFontScaler#getGlyphOutlineBoundsNative(Font2D, long, long, int)::: freetype font scaler get glyph outline bounds native:::
FreetypeFontScaler#getGlyphOutlineNative(Font2D, long, long, int, float, float)::: freetype font scaler get glyph outline native:::
FreetypeFontScaler#getGlyphVectorOutlineNative(Font2D, long, long, int[], int, float, float)::: freetype font scaler get glyph vector outline native:::
FreetypeFontScaler#getGlyphPointNative(Font2D, long, long, int, int)::: freetype font scaler get glyph point native:::
FreetypeFontScaler#disposeNativeScaler(Font2D, long)::: freetype font scaler dispose native scaler:::
FreetypeFontScaler#getGlyphCodeNative(Font2D, long, char)::: freetype font scaler get glyph code native:::
FreetypeFontScaler#getNumGlyphsNative(long)::: freetype font scaler get num glyphs native:::
FreetypeFontScaler#getMissingGlyphCodeNative(long)::: freetype font scaler get missing glyph code native:::
FreetypeFontScaler#getUnitsPerEMNative(long)::: freetype font scaler get units per native:::
FreetypeFontScaler#createScalerContextNative(long, double[], int, int, float, float)::: freetype font scaler create scaler context native:::
FreetypeFontScaler#invalidateScalerContext(long)::: freetype font scaler invalidate scaler context:::
GlyphDisposedListener#glyphDisposed(ArrayList)::: glyph disposed listener glyph disposed:::
GlyphLayout.LayoutEngineKey#init(Font2D, int, int)::: layout engine key init:::
GlyphLayout.LayoutEngineKey#copy()::: layout engine key copy:::return->new->LayoutEngineKey
GlyphLayout.LayoutEngineKey#font()::: layout engine key font:::return
GlyphLayout.LayoutEngineKey#script()::: layout engine key script:::return
GlyphLayout.LayoutEngineKey#lang()::: layout engine key lang:::return
GlyphLayout.LayoutEngineKey#equals(Object)::: layout engine key equals:::if->return->if->return->try->that->return->equals->catch->return->finally
GlyphLayout.LayoutEngineKey#hashCode()::: layout engine key hash code:::return->font->hashCode
GlyphLayout.LayoutEngineFactory#getEngine(Font2D, int, int):::Given a font, script, and language, determine a layout engine to use.:::
GlyphLayout.LayoutEngineFactory#getEngine(LayoutEngineKey):::Given a key, determine a layout engine to use.:::
GlyphLayout.LayoutEngine#layout(FontStrikeDesc, float[], float, int, int, TextRecord, int, Point2D.Float, GVData):::Given a strike descriptor, text, rtl flag, and starting point, append information about glyphs, positions, and character indices to the glyphvector data, and advance the point:::
GlyphLayout#get(LayoutEngineFactory):::Return a new instance of GlyphLayout, using the provided layout engine factory:::if->SunLayoutEngine->instance->result->synchronized->if->if->new->GlyphLayout->return
GlyphLayout#done(GlyphLayout):::Return the old instance of GlyphLayout when you are done:::
GlyphLayout.SDCache.SDKey#hashCode()::: key hash code:::return
GlyphLayout.SDCache.SDKey#equals(Object)::: key equals:::try->rhs->return->font->equals->frc->equals->catch->finally->return
GlyphLayout.SDCache#get(Font, FontRenderContext)::: cache get:::if->frc->isTransformed->transform->frc->getTransform->if->transform->getTranslateX->transform->getTranslateY->transform->getScaleX->transform->getShearY->transform->getShearX->transform->getScaleY->new->AffineTransform->frc->getAntiAliasingHint->frc->getFractionalMetricsHint->new->FontRenderContext->key->new->SDKey->cache->res->if->cacheRef->get->if->cache->get->if->new->SDCache->if->new->ConcurrentHashMap<SDKey,SDCache>->new->SoftReference<ConcurrentHashMap<SDKey,SDCache>>->else->if->cache->size->cache->clear->cache->put->return
GlyphLayout#layout(Font, FontRenderContext, char[], int, int, int, StandardGlyphVector):::Create a glyph vector.:::if->throw->new->IllegalArgumentException->init->if->font->hasLayoutAttributes->values->font->getAttributes->getValues->if->values->getKerning->if->values->getLigatures->txinfo->SDCache->get->getScaleX->getShearY->getShearX->getScaleY->_pt->setLocation->font->getSize2D->lim->min->max->if->if->if->if->lang->font2D->FontUtilities->getFont2D->if->getCompositeFont2D->_textRecord->init->start->if->_scriptRuns->init->_fontRuns->init->while->_scriptRuns->next->limit->_scriptRuns->getScriptLimit->script->_scriptRuns->getScriptCode->while->_fontRuns->next->pfont->_fontRuns->getFont->if->getDelegateFont->gmask->_fontRuns->getGlyphMask->pos->_fontRuns->getPos->nextEngineRecord->else->_scriptRuns->init->while->_scriptRuns->next->limit->_scriptRuns->getScriptLimit->script->_scriptRuns->getScriptCode->nextEngineRecord->ix->stop->dir->if->for->gv->if->new->StandardGlyphVector->if->FontUtilities->debugFonts->FontUtilities->getLogger->warning->else->_gvdata->createGlyphVector->return
GlyphLayout#init(int)::: glyph layout init:::init
GlyphLayout#nextEngineRecord(int, int, int, int, Font2D, int)::: glyph layout next engine record:::er->if->_erecords->size->new->EngineRecord->_erecords->add->else->_erecords->get->er->init
GlyphLayout.GVData#init(int)::: data init:::if->if->new->intArr->new->floatArr->new->intArr
GlyphLayout.GVData#grow()::: data grow:::grow
GlyphLayout.GVData#grow(int)::: data grow:::size->nglyphs->new->intArr->System->arraycopy->npositions->new->floatArr->System->arraycopy->nindices->new->intArr->System->arraycopy
GlyphLayout.GVData#adjustPositions(AffineTransform)::: data adjust positions:::invdtx->transform
GlyphLayout.GVData#createGlyphVector(Font, FontRenderContext, StandardGlyphVector)::: data create glyph vector:::if->if->ltr->rtl->rtlix->for->i->if->if->glyphs->new->intArr->System->arraycopy->positions->if->new->floatArr->System->arraycopy->indices->if->new->intArr->System->arraycopy->if->new->StandardGlyphVector->else->result->initGlyphVector->return
GlyphLayout.EngineRecord#init(int, int, Font2D, int, int, int)::: engine record init:::init->for->i->_lef->getEngine
GlyphLayout.EngineRecord#layout()::: engine record layout:::engine->layout
GlyphList#ensureCapacity(int)::: glyph list ensure capacity:::if->if->new->floatArr->if->new->intArr->new->charArr->new->longArr
GlyphList#getInstance()::: glyph list get instance:::if->inUse->compareAndSet->return->else->return->new->GlyphList
GlyphList#setFromString(FontInfo, String, float, float)::: glyph list set from string:::str->length->ensureCapacity->str->getChars->return->mapChars
GlyphList#setFromChars(FontInfo, char[], int, int, float, float)::: glyph list set from chars:::if->else->ensureCapacity->System->arraycopy->return->mapChars
GlyphList#mapChars(FontInfo, int)::: glyph list map chars:::if->getMapper->charsToGlyphsNS->return->getGlyphImagePtrs->return
GlyphList#setFromGlyphVector(FontInfo, GlyphVector, float, float)::: glyph list set from glyph vector:::sgv->StandardGlyphVector->getStandardGV->sgv->needsPositions->sgv->getNumGlyphs->ensureCapacity->sgv->setupGlyphImages
GlyphList#getBounds()::: glyph list get bounds:::if->throw->new->InternalError->if->new->intArr->fillBounds->return
GlyphList#setGlyphIndex(int)::: glyph list set glyph index:::if->return->gx->getFloat->gy->getFloat->if->Math->floor->Math->floor->else->Math->floor->Math->floor->getFloat->getFloat->getChar->getChar->getChar
GlyphList#getMetrics()::: glyph list get metrics:::return
GlyphList#getGrayBits()::: glyph list get gray bits:::len->if->Math->max->new->byteArr->else->if->new->byteArr->if->return->pixelDataAddress->getAddress->if->return->for->i->return
GlyphList#getImages()::: glyph list get images:::return
GlyphList#usePositions()::: glyph list use positions:::return
GlyphList#getPositions()::: glyph list get positions:::return
GlyphList#getX()::: glyph list get x:::return
GlyphList#getY()::: glyph list get y:::return
GlyphList#getStrike()::: glyph list get strike:::return
GlyphList#isSubPixPos()::: glyph list is sub pix pos:::return
GlyphList#isRGBOrder()::: glyph list is order:::return
GlyphList#dispose()::: glyph list dispose:::if->if->inUse->set
GlyphList#getNumGlyphs()::: glyph list get num glyphs:::return
GlyphList#fillBounds(int[])::: glyph list fill bounds:::xOffset->yOffset->wOffset->hOffset->xAdvOffset->yAdvOffset->if->return->bx0->by0->bx1->by1->posIndex->glx->gly->gw->gh->gx->gy->gx0->gy0->gx1->gy1->for->i->Math->floor->Math->floor->Math->floor->Math->floor
GraphicComponent#initLocalOrdering(int[], byte[], int, int):::Initialize graphicCount, also charsLtoV and levels arrays.:::if->else->BidiUtils->createNormalizedMap->if->else->new->byteArr->System->arraycopy
GraphicComponent#isSimple()::: graphic component is simple:::return
GraphicComponent#getPixelBounds(FontRenderContext, float, float)::: graphic component get pixel bounds:::throw->new->InternalError
GraphicComponent#handleGetVisualBounds()::: graphic component handle get visual bounds:::bounds->graphic->getBounds->width->bounds->getWidth->return->bounds->getX->bounds->getY->bounds->getHeight->new->Rectangle2D.Float
GraphicComponent#getCoreMetrics()::: graphic component get core metrics:::return
GraphicComponent#createCoreMetrics(GraphicAttribute)::: graphic component create core metrics:::return->graphic->getAscent->graphic->getDescent->graphic->getAscent->graphic->getDescent->graphic->getAlignment->new->floatArr->graphic->getAscent->graphic->getAscent->graphic->getAscent->graphic->getAscent->graphic->getDescent->graphic->getAscent->new->CoreMetrics
GraphicComponent#getItalicAngle()::: graphic component get italic angle:::return
GraphicComponent#getVisualBounds()::: graphic component get visual bounds:::if->decorator->getVisualBounds->bounds->new->Rectangle2D.Float->bounds->setRect->return
GraphicComponent#handleGetOutline(float, float)::: graphic component handle get outline:::matrix->if->tx->new->AffineTransform->return->graphic->getOutline->gp->new->GeneralPath->for->i->return
GraphicComponent#getBaselineTransform()::: graphic component get baseline transform:::return
GraphicComponent#getOutline(float, float)::: graphic component get outline:::return->decorator->getOutline
GraphicComponent#handleDraw(Graphics2D, float, float)::: graphic component handle draw:::for->i
GraphicComponent#draw(Graphics2D, float, float)::: graphic component draw:::decorator->drawTextAndDecorations
GraphicComponent#getCharVisualBounds(int)::: graphic component get char visual bounds:::return->decorator->getCharVisualBounds
GraphicComponent#getNumCharacters()::: graphic component get num characters:::return
GraphicComponent#getCharX(int)::: graphic component get char x:::visIndex->return
GraphicComponent#getCharY(int)::: graphic component get char y:::return
GraphicComponent#getCharAdvance(int)::: graphic component get char advance:::return
GraphicComponent#caretAtOffsetIsValid(int)::: graphic component caret at offset is valid:::return
GraphicComponent#handleGetCharVisualBounds(int)::: graphic component handle get char visual bounds:::bounds->graphic->getBounds->charBounds->new->Rectangle2D.Float->charBounds->setRect->return
GraphicComponent#getLineBreakIndex(int, float)::: graphic component get line break index:::index->if->return
GraphicComponent#getAdvanceBetween(int, int)::: graphic component get advance between:::return
GraphicComponent#getLogicalBounds()::: graphic component get logical bounds:::left->top->width->height->return->new->Rectangle2D.Float
GraphicComponent#getAdvance()::: graphic component get advance:::return
GraphicComponent#getItalicBounds()::: graphic component get italic bounds:::return->getLogicalBounds
GraphicComponent#getSubset(int, int, int)::: graphic component get subset:::if->throw->new->IllegalArgumentException->if->return->return->new->GraphicComponent
GraphicComponent#toString()::: graphic component to string:::return->getNumCharacters
GraphicComponent#getNumJustificationInfos():::Return the number of justification records this uses.:::return
GraphicComponent#getJustificationInfos(GlyphJustificationInfo[], int, int, int):::Return GlyphJustificationInfo objects for the characters between charStart and charLimit, starting at offset infoStart:::
GraphicComponent#applyJustificationDeltas(float[], int, boolean[]):::Apply deltas to the data in this component, starting at offset deltaStart, and return the new component:::return
LayoutPathImpl#pointToPath(double, double)::: layout path impl point to path:::pt->new->Point2D.Double->pointToPath->return
LayoutPathImpl#pathToPoint(double, double, boolean)::: layout path impl path to point:::pt->new->Point2D.Double->pathToPoint->return
LayoutPathImpl#pointToPath(double, double, Point2D)::: layout path impl point to path:::pt->setLocation->pointToPath
LayoutPathImpl#pathToPoint(double, double, boolean, Point2D)::: layout path impl path to point:::pt->setLocation->pathToPoint
LayoutPathImpl#start()::: layout path impl start:::
LayoutPathImpl#end()::: layout path impl end:::
LayoutPathImpl#length()::: layout path impl length:::
LayoutPathImpl#mapShape(Shape)::: layout path impl map shape:::
LayoutPathImpl#getPath(EndType, double...):::Return a path representing the path from the origin through the points in order.:::if->throw->new->IllegalArgumentException->return->SegmentPath->get
LayoutPathImpl.SegmentPathBuilder#reset(int):::Reset the builder for a new path:::if->new->doubleArr->else->if
LayoutPathImpl.SegmentPathBuilder#build(EndType, double...):::Automatically build from a list of points represented by pairs of doubles:::reset->for->i->return->complete
LayoutPathImpl.SegmentPathBuilder#moveTo(double, double):::Move to a new point:::nextPoint
LayoutPathImpl.SegmentPathBuilder#lineTo(double, double):::Connect to a new point:::nextPoint
LayoutPathImpl.SegmentPathBuilder#nextPoint(double, double, boolean):::Add a new point, and increment advance if connect is true:::if->return->if->if->new->doubleArr->if->if->return->if->t->new->doubleArr->System->arraycopy->if->dx->dy->sqrt
LayoutPathImpl.SegmentPathBuilder#complete()::: segment path builder complete:::return->complete
LayoutPathImpl.SegmentPathBuilder#complete(EndType):::Complete building a SegmentPath:::result->if->return->if->new->SegmentPath->reset->else->dataToAdopt->new->doubleArr->System->arraycopy->new->SegmentPath->reset->return
LayoutPathImpl.SegmentPath#get(EndType, double...)::: segment path get:::return->new->SegmentPathBuilder->build
LayoutPathImpl.SegmentPath#pathToPoint(Point2D, boolean, Point2D)::: segment path path to point:::locateAndGetIndex
LayoutPathImpl.SegmentPath#pointToPath(Point2D, Point2D)::: segment path point to path:::x->pt->getX->y->pt->getY->bx->by->bl->cd2->cx->cy->cl->ci->for->i->if->nx->ny->co->sqrt->if->result->setLocation->return->else->havePrev->haveFoll->doExtend->etype->isExtended->if->pp->new->Point2D.Double->calcoffset->fp->new->Point2D.Double->calcoffset->if->abs->abs->result->setLocation->return->else->result->setLocation->return->else->if->result->setLocation->calcoffset->return->else->result->setLocation->calcoffset->return
LayoutPathImpl.SegmentPath#calcoffset(int, boolean, Point2D):::Return the location of the point passed in result as mapped to the line indicated by index:::bx->by->px->result->getX->py->result->getY->dx->dy->l->rx->ry->if->if->else->if->result->setLocation
LayoutPathImpl.SegmentPath#mapShape(Shape)::: segment path map shape:::return->new->Mapper->mapShape
LayoutPathImpl.SegmentPath#start()::: segment path start:::return
LayoutPathImpl.SegmentPath#end()::: segment path end:::return
LayoutPathImpl.SegmentPath#length()::: segment path length:::return
LayoutPathImpl.SegmentPath#getClosedAdvance(double, boolean):::Get the 'modulus' of an advance on a closed path.:::if->etype->isClosed->count->length->length->if->length->return
LayoutPathImpl.SegmentPath#getSegmentIndexForAdvance(double, boolean):::Return the index of the segment associated with advance:::getClosedAdvance->i->lim->for->return
LayoutPathImpl.SegmentPath#map(int, double, double, Point2D):::Map a location based on the provided segment, returning in pt:::dx->dy->dl->ux->uy->pt->setLocation
LayoutPathImpl.SegmentPath#locateAndGetIndex(Point2D, boolean, Point2D):::Map the point, and return the segment index.:::a->loc->getX->o->loc->getY->seg->getSegmentIndexForAdvance->map->return
LayoutPathImpl.SegmentPath.LineInfo#set(double, double, double, double):::Set the lineinfo to this line:::dx->if->else->dy
LayoutPathImpl.SegmentPath.LineInfo#set(LineInfo)::: line info set:::
LayoutPathImpl.SegmentPath.LineInfo#pin(double, double, LineInfo):::Return true if we intersect the infinitely tall rectangle with lo <= x < hi:::result->set->if->if->if->if->if->if->return->else->if->if->if->if->if->return->return
LayoutPathImpl.SegmentPath.LineInfo#pin(int, LineInfo):::Return true if we intersect the segment at ix:::lo->hi->switch->break->if->if->break->break->return->pin
LayoutPathImpl.SegmentPath.Segment#init()::: segment init:::if->LOG->format->new->GeneralPath
LayoutPathImpl.SegmentPath.Segment#move()::: segment move:::if->LOG->format
LayoutPathImpl.SegmentPath.Segment#close()::: segment close:::if->if->LOG->format->gp->closePath
LayoutPathImpl.SegmentPath.Segment#line(LineInfo)::: segment line:::if->LOG->format->if->li->pin->if->LOG->format->sx->sy->lx->ly->if->LOG->format->if->if->if->LOG->format->gp->moveTo->else->if->LOG->format->gp->lineTo->if->LOG->format->gp->lineTo
LayoutPathImpl.SegmentPath.Mapper#init()::: mapper init:::if->LOG->format->foreach->s->init
LayoutPathImpl.SegmentPath.Mapper#moveTo(double, double)::: mapper move to:::if->LOG->format
LayoutPathImpl.SegmentPath.Mapper#lineTo(double, double)::: mapper line to:::if->LOG->format->if->if->return->if->foreach->s->move->li->set->foreach->s->line
LayoutPathImpl.SegmentPath.Mapper#close()::: mapper close:::if->LOG->format->lineTo->foreach->s->close
LayoutPathImpl.SegmentPath.Mapper#mapShape(Shape)::: mapper map shape:::if->LOG->format->pi->s->getPathIterator->if->LOG->format->init->coords->new->doubleArr->while->pi->isDone->switch->pi->currentSegment->close->break->moveTo->break->lineTo->break->break->pi->next->if->LOG->format->gp->new->GeneralPath->foreach->gp->append->return
LayoutPathImpl.SegmentPath#toString()::: segment path to string:::b->new->StringBuilder->b->append->b->etype->toString->append->b->append->for->i->b->append->return->b->toString
LayoutPathImpl.EmptyPath#pathToPoint(Point2D, boolean, Point2D)::: empty path path to point:::if->tx->transform->else->point->setLocation
LayoutPathImpl.EmptyPath#pointToPath(Point2D, Point2D)::: empty path point to path:::result->setLocation->if->try->tx->inverseTransform->catch->finally->return->result->getX
LayoutPathImpl.EmptyPath#start()::: empty path start:::return
LayoutPathImpl.EmptyPath#end()::: empty path end:::return
LayoutPathImpl.EmptyPath#length()::: empty path length:::return
LayoutPathImpl.EmptyPath#mapShape(Shape)::: empty path map shape:::if->return->tx->createTransformedShape->return
NativeFont#hasExternalBitmaps(String)::: native font has external bitmaps:::return
NativeFont#getMapper()::: native font get mapper:::return
NativeFont#getDelegateFont()::: native font get delegate font:::return
NativeFont#createStrike(FontStrikeDesc)::: native font create strike:::return
NativeFont#getMaxCharBounds(FontRenderContext)::: native font get max char bounds:::return
NativeFont#getFontMetrics(long)::: native font get font metrics:::return
NativeFont#getGlyphOutline(long, int, float, float)::: native font get glyph outline:::return
NativeFont#getGlyphVectorOutline(long, int[], int, float, float)::: native font get glyph vector outline:::return
NativeFont#getGlyphImage(long, int)::: native font get glyph image:::return
NativeFont#getGlyphMetrics(long, int, Point2D.Float)::: native font get glyph metrics:::
NativeFont#getGlyphAdvance(long, int)::: native font get glyph advance:::return
NativeFont#getGlyphOutlineBounds(long, int)::: native font get glyph outline bounds:::return->new->Rectangle2D.Float
NativeStrike#getGlyphImagePtrs(int[], long[], int)::: native strike get glyph image ptrs:::
NativeStrike#getGlyphImagePtr(int)::: native strike get glyph image ptr:::return
NativeStrike#getGlyphImagePtrNoCache(int)::: native strike get glyph image ptr no cache:::return
NativeStrike#getGlyphImageBounds(int, Point2D.Float, Rectangle)::: native strike get glyph image bounds:::
NativeStrike#getGlyphMetrics(int)::: native strike get glyph metrics:::return
NativeStrike#getGlyphAdvance(int)::: native strike get glyph advance:::return
NativeStrike#getGlyphOutlineBounds(int)::: native strike get glyph outline bounds:::return
NativeStrike#getGlyphOutline(int, float, float)::: native strike get glyph outline:::return
NativeStrike#getGlyphVectorOutline(int[], float, float)::: native strike get glyph vector outline:::return
NullFontScaler#getFontMetrics(long)::: null font scaler get font metrics:::return->new->StrikeMetrics
NullFontScaler#getGlyphAdvance(long, int)::: null font scaler get glyph advance:::return
NullFontScaler#getGlyphMetrics(long, int, Point2D.Float)::: null font scaler get glyph metrics:::
NullFontScaler#getGlyphOutlineBounds(long, int)::: null font scaler get glyph outline bounds:::return->new->Rectangle2D.Float
NullFontScaler#getGlyphOutline(long, int, float, float)::: null font scaler get glyph outline:::return->new->GeneralPath
NullFontScaler#getGlyphVectorOutline(long, int[], int, float, float)::: null font scaler get glyph vector outline:::return->new->GeneralPath
NullFontScaler#createScalerContext(double[], int, int, float, float, boolean)::: null font scaler create scaler context:::return->getNullScalerContext
NullFontScaler#invalidateScalerContext(long)::: null font scaler invalidate scaler context:::
NullFontScaler#getNumGlyphs()::: null font scaler get num glyphs:::return
NullFontScaler#getMissingGlyphCode()::: null font scaler get missing glyph code:::return
NullFontScaler#getGlyphCode(char)::: null font scaler get glyph code:::return
NullFontScaler#getUnitsPerEm()::: null font scaler get units per em:::return
NullFontScaler#getGlyphPoint(long, int, int)::: null font scaler get glyph point:::return
NullFontScaler#getNullScalerContext()::: null font scaler get null scaler context:::
NullFontScaler#getGlyphImage(long, int)::: null font scaler get glyph image:::
PhysicalFont#equals(Object)::: physical font equals:::return->o->getClass->this->getClass->equals
PhysicalFont#hashCode()::: physical font hash code:::return->fullName->hashCode
PhysicalFont#getGlyphPoint(long, int, int)::: physical font get glyph point:::return->new->Point2D.Float
PhysicalFont#getFontMetrics(long)::: physical font get font metrics:::
PhysicalFont#getGlyphAdvance(long, int)::: physical font get glyph advance:::
PhysicalFont#getGlyphMetrics(long, int, Point2D.Float)::: physical font get glyph metrics:::
PhysicalFont#getGlyphImage(long, int)::: physical font get glyph image:::
PhysicalFont#getGlyphOutlineBounds(long, int)::: physical font get glyph outline bounds:::
PhysicalFont#getGlyphOutline(long, int, float, float)::: physical font get glyph outline:::
PhysicalFont#getGlyphVectorOutline(long, int[], int, float, float)::: physical font get glyph vector outline:::
PhysicalStrike#getNumGlyphs()::: physical strike get num glyphs:::return->physicalFont->getNumGlyphs
PhysicalStrike#getFontMetrics()::: physical strike get font metrics:::if->physicalFont->getFontMetrics->return
PhysicalStrike#getCodePointAdvance(int)::: physical strike get code point advance:::return->physicalFont->getMapper->charToGlyph->getGlyphAdvance
PhysicalStrike#getCharMetrics(char)::: physical strike get char metrics:::return->physicalFont->getMapper->charToGlyph->getGlyphMetrics
PhysicalStrike#getSlot0GlyphImagePtrs(int[], long[], int)::: physical strike get slot0 glyph image ptrs:::return
PhysicalStrike#getGlyphPoint(int, int)::: physical strike get glyph point:::gp->ptKey->Integer->valueOf->if->synchronized->if->new->ConcurrentHashMap<Integer,Point2D.Float>->else->glyphPointMapCache->get->if->physicalFont->getGlyphPoint->adjustPoint->glyphPointMapCache->put->return
PhysicalStrike#adjustPoint(Point2D.Float)::: physical strike adjust point:::
ScriptRun#init(char[], int, int)::: script run init:::if->throw->new->IllegalArgumentException
ScriptRun#getScriptStart():::Get the starting index of the current script run.:::return
ScriptRun#getScriptLimit():::Get the index of the first character after the current script run.:::return
ScriptRun#getScriptCode():::Get the script code for the script of the current script run.:::return
ScriptRun#next():::Find the next script run:::startSP->if->return->ch->while->nextCodePoint->sc->ScriptRunData->getScript->pairIndex->getPairIndex->if->if->if->new->intArr->else->if->newstack->new->intArr->System->arraycopy->else->if->pi->while->if->else->if->if->sameScript->if->while->if->else->pushback->break->return
ScriptRun#nextCodePoint()::: script run next code point:::if->return->ch->if->nch->if->return
ScriptRun#pushback(int)::: script run pushback:::if->if->else
ScriptRun#sameScript(int, int):::Compare two script codes to see if they are in the same script:::return
ScriptRun#highBit(int):::Find the highest bit that's set in a word:::if->return->bit->if->if->if->if->if->return
ScriptRun#getPairIndex(int):::Search the pairedChars array for the given character.:::probe->index->if->while->if->if->return
ScriptRunData#getScript(int)::: script run data get script:::if->return->if->probe->index->if->while->if->return->throw->Integer->toString->new->IllegalArgumentException
StandardGlyphVector#getTracking(Font)::: standard glyph vector get tracking:::if->font->hasLayoutAttributes->values->font->getAttributes->getValues->return->values->getTracking->return
StandardGlyphVector#initGlyphVector(Font, FontRenderContext, int[], float[], int[], int)::: standard glyph vector init glyph vector:::initFontData
StandardGlyphVector#getStandardGV(GlyphVector, FontInfo)::: standard glyph vector get standard v:::if->aaHint->gv->getFontRenderContext->getAntiAliasingHint->if->frc->gv->getFontRenderContext->frc->getTransform->frc->getFractionalMetricsHint->new->FontRenderContext->return->new->StandardGlyphVector->if->return->return->gv->getFontRenderContext->new->StandardGlyphVector
StandardGlyphVector#getFont()::: standard glyph vector get font:::return
StandardGlyphVector#getFontRenderContext()::: standard glyph vector get font render context:::return
StandardGlyphVector#performDefaultLayout()::: standard glyph vector perform default layout:::if->getTracking->clearFlags
StandardGlyphVector#getNumGlyphs()::: standard glyph vector get num glyphs:::return
StandardGlyphVector#getGlyphCode(int)::: standard glyph vector get glyph code:::return
StandardGlyphVector#getGlyphCodes(int, int, int[])::: standard glyph vector get glyph codes:::if->throw->new->IllegalArgumentException->if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->if->new->intArr->for->i->return
StandardGlyphVector#getGlyphCharIndex(int)::: standard glyph vector get glyph char index:::if->throw->new->IndexOutOfBoundsException->if->if->getLayoutFlags->return->return->return
StandardGlyphVector#getGlyphCharIndices(int, int, int[])::: standard glyph vector get glyph char indices:::if->throw->new->IndexOutOfBoundsException->if->new->intArr->if->if->getLayoutFlags->for->i->n->else->for->i->n->else->for->i->return
StandardGlyphVector#getLogicalBounds()::: standard glyph vector get logical bounds:::setFRCTX->initPositions->lm->font->getLineMetrics->minX->minY->maxX->maxY->lm->getAscent->lm->getDescent->lm->getLeading->if->return->new->Rectangle2D.Float
StandardGlyphVector#getVisualBounds()::: standard glyph vector get visual bounds:::result->for->i->if->new->Rectangle2D.Float->return
StandardGlyphVector#getPixelBounds(FontRenderContext, float, float)::: standard glyph vector get pixel bounds:::return->getGlyphsPixelBounds
StandardGlyphVector#getOutline()::: standard glyph vector get outline:::return->getGlyphsOutline
StandardGlyphVector#getOutline(float, float)::: standard glyph vector get outline:::return->getGlyphsOutline
StandardGlyphVector#getGlyphOutline(int)::: standard glyph vector get glyph outline:::return->getGlyphsOutline
StandardGlyphVector#getGlyphOutline(int, float, float)::: standard glyph vector get glyph outline:::return->getGlyphsOutline
StandardGlyphVector#getGlyphPosition(int)::: standard glyph vector get glyph position:::initPositions->return->new->Point2D.Float
StandardGlyphVector#setGlyphPosition(int, Point2D)::: standard glyph vector set glyph position:::if->throw->new->IndexOutOfBoundsException->initPositions->ix2->pos->getX->pos->getY->if->clearCaches->addFlags
StandardGlyphVector#getGlyphTransform(int)::: standard glyph vector get glyph transform:::if->throw->new->IndexOutOfBoundsException->if->return->gti->getGlyphTransform->return
StandardGlyphVector#setGlyphTransform(int, AffineTransform)::: standard glyph vector set glyph transform:::if->throw->new->IndexOutOfBoundsException->if->if->newTX->isIdentity->return->new->GlyphTransformInfo->gti->setGlyphTransform->if->gti->transformCount
StandardGlyphVector#getLayoutFlags()::: standard glyph vector get layout flags:::if->if->ltr->rtl->rtlix->for->i->if->if->return
StandardGlyphVector#getGlyphPositions(int, int, float[])::: standard glyph vector get glyph positions:::if->throw->new->IllegalArgumentException->if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->return->internalGetGlyphPositions
StandardGlyphVector#getGlyphLogicalBounds(int)::: standard glyph vector get glyph logical bounds:::if->throw->new->IndexOutOfBoundsException->lbcache->if->lbcacheRef->get->new->ShapeArr->new->SoftReference<>->result->if->setFRCTX->initPositions->adl->new->ADL->gs->getGlyphStrike->gs->getADL->adv->getGlyphMetrics->wx->wy->hx->hy->x->y->gp->new->GeneralPath->gp->moveTo->gp->lineTo->gp->lineTo->gp->lineTo->gp->closePath->new->DelegatingShape->return
StandardGlyphVector#getGlyphVisualBounds(int)::: standard glyph vector get glyph visual bounds:::if->throw->new->IndexOutOfBoundsException->vbcache->if->vbcacheRef->get->new->ShapeArr->new->SoftReference<>->result->if->getGlyphOutlineBounds->new->DelegatingShape->return
StandardGlyphVector#getGlyphPixelBounds(int, FontRenderContext, float, float)::: standard glyph vector get glyph pixel bounds:::return->getGlyphsPixelBounds
StandardGlyphVector#getGlyphMetrics(int)::: standard glyph vector get glyph metrics:::if->throw->new->IndexOutOfBoundsException->vb->getGlyphVisualBounds->getBounds2D->pt->getGlyphPosition->vb->vb->getMinX->pt->getX->vb->getMinY->pt->getY->vb->getWidth->vb->getHeight->setRect->adv->getGlyphStrike->getGlyphMetrics->gm->new->GlyphMetrics->return
StandardGlyphVector#getGlyphJustificationInfo(int)::: standard glyph vector get glyph justification info:::if->throw->new->IndexOutOfBoundsException->return
StandardGlyphVector#equals(GlyphVector)::: standard glyph vector equals:::if->return->if->return->try->other->if->return->for->i->if->font->equals->return->if->frc->equals->return->if->if->initPositions->else->other->initPositions->if->for->i->if->return->else->return->gti->equals->catch->return->finally
StandardGlyphVector#hashCode():::As a concrete subclass of Object that implements equality, this must implement hashCode.:::return->font->hashCode
StandardGlyphVector#equals(Object):::Since we implement equality comparisons for GlyphVector, we implement the inherited Object.equals(Object) as well:::try->return->equals->catch->return->finally
StandardGlyphVector#copy():::Sometimes I wish java had covariant return types...:::return->clone
StandardGlyphVector#clone():::As a concrete subclass of GlyphVector, this must implement clone.:::try->result->super->clone->result->clearCaches->if->positions->clone->if->new->GlyphTransformInfo->return->catch->finally->return
StandardGlyphVector#setGlyphPositions(float[], int, int, int)::: standard glyph vector set glyph positions:::if->throw->new->IllegalArgumentException->initPositions->for->i->e->p->clearCaches->addFlags
StandardGlyphVector#setGlyphPositions(float[]):::Set all the glyph positions, including the 'after last glyph' position:::requiredLength->if->throw->new->IllegalArgumentException->srcPositions->clone->clearCaches->addFlags
StandardGlyphVector#getGlyphPositions(float[]):::This is a convenience overload that gets all the glyph positions, which is what you usually want to do if you're getting more than one:::return->internalGetGlyphPositions
StandardGlyphVector#getGlyphTransforms(int, int, AffineTransform[]):::Get transform information for the requested range of glyphs:::if->throw->new->IllegalArgumentException->if->return->if->new->AffineTransformArr->for->i->return
StandardGlyphVector#getGlyphTransforms():::Convenience overload for getGlyphTransforms(int, int, AffineTransform[], int);:::return->getGlyphTransforms
StandardGlyphVector#setGlyphTransforms(AffineTransform[], int, int, int):::Set a number of glyph transforms:::for->i->e
StandardGlyphVector#setGlyphTransforms(AffineTransform[]):::Convenience overload of setGlyphTransforms(AffineTransform[], int, int, int).:::setGlyphTransforms
StandardGlyphVector#getGlyphInfo():::For each glyph return posx, posy, advx, advy, visx, visy, visw, vish.:::setFRCTX->initPositions->result->new->floatArr->for->i->n->return
StandardGlyphVector#pixellate(FontRenderContext, Point2D, Point):::!!! not used currently, but might be by getPixelbounds?:::if->at->renderFRC->getTransform->at->transform->loc->getX->loc->getY->loc->setLocation->try->at->inverseTransform->catch->throw->new->IllegalArgumentException->finally
StandardGlyphVector#needsPositions(double[])::: standard glyph vector needs positions:::return->getLayoutFlags->matchTX
StandardGlyphVector#setupGlyphImages(long[], float[], double[])::: standard glyph vector setup glyph images:::initPositions->setRenderTransform->if->return->gti->setupGlyphImages->gs->getDefaultStrike->getGlyphImagePtrs->if->if->dtx->isIdentity->System->arraycopy->else->dtx->transform->return
StandardGlyphVector#matchTX(double[], AffineTransform)::: standard glyph vector match x:::return->rhs->getScaleX->rhs->getShearY->rhs->getShearX->rhs->getScaleY
StandardGlyphVector#getNonTranslateTX(AffineTransform)::: standard glyph vector get non translate x:::if->tx->getTranslateX->tx->getTranslateY->tx->getScaleX->tx->getShearY->tx->getShearX->tx->getScaleY->new->AffineTransform->return
StandardGlyphVector#equalNonTranslateTX(AffineTransform, AffineTransform)::: standard glyph vector equal non translate x:::return->lhs->getScaleX->rhs->getScaleX->lhs->getShearY->rhs->getShearY->lhs->getShearX->rhs->getShearX->lhs->getScaleY->rhs->getScaleY
StandardGlyphVector#setRenderTransform(double[])::: standard glyph vector set render transform:::if->matchTX->new->AffineTransform->resetDTX
StandardGlyphVector#setDTX(AffineTransform)::: standard glyph vector set x:::if->equalNonTranslateTX->getNonTranslateTX->resetDTX
StandardGlyphVector#setFRCTX()::: standard glyph vector set x:::if->equalNonTranslateTX->getNonTranslateTX->resetDTX
StandardGlyphVector#resetDTX(AffineTransform):::Change the dtx for the strike refs we use:::if->dtx->isIdentity->try->dtx->createInverse->catch->finally->if
StandardGlyphVector#getValidatedGlyphs(int[])::: standard glyph vector get validated glyphs:::len->vglyphs->new->intArr->for->i->return
StandardGlyphVector#init(Font, char[], int, int, FontRenderContext, int)::: standard glyph vector init:::if->throw->new->ArrayIndexOutOfBoundsException->if->getTracking->addFlags->if->temp->new->charArr->System->arraycopy->initFontData->new->intArr->font2D->getMapper->charsToGlyphs
StandardGlyphVector#initFontData()::: standard glyph vector init font data:::FontUtilities->getFont2D->if->getCompositeFont2D->s->font->getSize2D->if->font->isTransformed->font->getTransform->if->ftx->getTranslateX->ftx->getTranslateY->addFlags->ftx->ftx->getScaleX->ftx->getShearY->ftx->getShearX->ftx->getScaleY->setTransform->ftx->scale->else->AffineTransform->getScaleInstance->frc->getTransform->getNonTranslateTX->resetDTX
StandardGlyphVector#internalGetGlyphPositions(int, int, int, float[]):::Copy glyph position data into a result array starting at the indicated offset in the array:::if->new->floatArr->initPositions->for->i->e->p->return
StandardGlyphVector#getGlyphOutlineBounds(int)::: standard glyph vector get glyph outline bounds:::setFRCTX->initPositions->return->getGlyphStrike->getGlyphOutlineBounds
StandardGlyphVector#getGlyphsOutline(int, int, float, float):::Used by getOutline, getGlyphsOutline:::setFRCTX->initPositions->result->new->GeneralPath->for->i->e->n->return
StandardGlyphVector#getGlyphsPixelBounds(FontRenderContext, float, float, int, int)::: standard glyph vector get glyphs pixel bounds:::initPositions->tx->if->frc->equals->else->frc->getTransform->setDTX->if->return->gti->getGlyphsPixelBounds->fs->getDefaultStrike->result->r->new->Rectangle->pt->new->Point.Float->n->while->tx->transform->fs->getGlyphImageBounds->if->r->isEmpty->if->new->Rectangle->else->result->add->return
StandardGlyphVector#clearCaches(int)::: standard glyph vector clear caches:::if->lbcache->lbcacheRef->get->if->if->vbcache->vbcacheRef->get->if
StandardGlyphVector#clearCaches()::: standard glyph vector clear caches:::
StandardGlyphVector#initPositions():::Ensure that the positions array exists and holds position data:::if->setFRCTX->new->floatArr->trackPt->track->getTracking->if->font->getSize2D->new->Point2D.Float->pt->new->Point2D.Float->if->font->isTransformed->at->font->getTransform->at->transform->if->at->deltaTransform->for->i->n
StandardGlyphVector#addFlags(int):::OR newFlags with existing flags:::getLayoutFlags
StandardGlyphVector#clearFlags(int):::AND the complement of clearedFlags with existing flags:::getLayoutFlags
StandardGlyphVector#getGlyphStrike(int)::: standard glyph vector get glyph strike:::if->return->getDefaultStrike->else->return->gti->getStrike
StandardGlyphVector#getDefaultStrike()::: standard glyph vector get default strike:::gs->if->fsref->get->if->GlyphStrike->create->new->SoftReference<>->return
StandardGlyphVector.GlyphTransformInfo#equals(GlyphTransformInfo)::: glyph transform info equals:::if->return->if->return->if->return->if->return->for->i->return
StandardGlyphVector.GlyphTransformInfo#setGlyphTransform(int, AffineTransform)::: glyph transform info set glyph transform:::temp->new->doubleArr->isIdentity->if->newTX->isIdentity->else->newTX->getMatrix->if->if->return->new->intArr->else->addSlot->newIndex->if->else->i->for->oldIndex->if->removeSlot->if->for->i->if->System->arraycopy->else->if->if->sgv->clearCaches->sgv->clearFlags->return->ttemp->new->doubleArr->System->arraycopy->System->arraycopy->for->i->if->else->if->ttemp->new->doubleArr->System->arraycopy->System->arraycopy->sgv->clearCaches->sgv->addFlags
StandardGlyphVector.GlyphTransformInfo#getGlyphTransform(int)::: glyph transform info get glyph transform:::index->if->return->x->return->new->AffineTransform
StandardGlyphVector.GlyphTransformInfo#transformCount()::: glyph transform info transform count:::if->return->return
StandardGlyphVector.GlyphTransformInfo#setupGlyphImages(long[], float[], AffineTransform):::The strike cache works like this:::len->sl->getAllStrikes->for->i->tx->transform->return
StandardGlyphVector.GlyphTransformInfo#getGlyphsPixelBounds(AffineTransform, float, float, int, int)::: glyph transform info get glyphs pixel bounds:::result->r->new->Rectangle->pt->new->Point.Float->n->while->gs->getStrike->tx->transform->getGlyphImageBounds->if->r->isEmpty->if->new->Rectangle->else->result->add->return
StandardGlyphVector.GlyphTransformInfo#getStrike(int)::: glyph transform info get strike:::if->strikes->getStrikeArray->return->getStrikeAtIndex->return->sgv->getDefaultStrike
StandardGlyphVector.GlyphTransformInfo#getAllStrikes()::: glyph transform info get all strikes:::if->return->strikes->getStrikeArray->if->for->i->return
StandardGlyphVector.GlyphTransformInfo#getStrikeArray()::: glyph transform info get strike array:::strikes->if->strikesRef->get->if->transformCount->new->GlyphStrikeArr->new->SoftReference<>->return
StandardGlyphVector.GlyphTransformInfo#getStrikeAtIndex(GlyphStrike[], int)::: glyph transform info get strike at index:::strike->if->if->sgv->getDefaultStrike->else->ix->gtx->new->AffineTransform->GlyphStrike->create->return
StandardGlyphVector.GlyphStrike#create(StandardGlyphVector, AffineTransform, AffineTransform)::: glyph strike create:::dx->dy->tx->if->dtx->isIdentity->new->AffineTransform->if->tx->preConcatenate->tx->getTranslateX->tx->getTranslateY->if->dtx->isIdentity->tx->preConcatenate->ptSize->aaHint->getAntiAliasingHint->if->if->tx->isIdentity->tx->getType->shearx->tx->getShearX->if->scaley->tx->getScaleY->Math->sqrt->else->Math->tx->getScaleY->abs->aa->FontStrikeDesc->getAAHintIntVal->fm->FontStrikeDesc->getFractionalMetricsHint->getFMHintIntVal->desc->getStyle->new->FontStrikeDesc->f2d->if->getCompositeFont2D->strike->getStrike->return->new->GlyphStrike
StandardGlyphVector.GlyphStrike#getADL(ADL)::: glyph strike get l:::sm->strike->getFontMetrics->delta->if->isTransformed->new->Point2D.Float->getTransform->getTranslateX->getTransform->getTranslateY
StandardGlyphVector.GlyphStrike#getGlyphPosition(int, int, float[], float[])::: glyph strike get glyph position:::
StandardGlyphVector.GlyphStrike#addDefaultGlyphAdvance(int, Point2D.Float)::: glyph strike add default glyph advance:::adv->strike->getGlyphMetrics
StandardGlyphVector.GlyphStrike#getGlyphOutlineBounds(int, float, float)::: glyph strike get glyph outline bounds:::result->if->new->Rectangle2D.Float->result->strike->getGlyphOutlineBounds->setRect->else->gp->strike->getGlyphOutline->gp->transform->gp->getBounds2D->if->result->isEmpty->result->result->getMinX->result->getMinY->result->getWidth->result->getHeight->setRect->return
StandardGlyphVector.GlyphStrike#appendGlyphOutline(int, GeneralPath, float, float)::: glyph strike append glyph outline:::gp->if->strike->getGlyphOutline->else->strike->getGlyphOutline->gp->transform->gp->AffineTransform->getTranslateInstance->transform->iterator->gp->getPathIterator->result->append
StandardGlyphVector#toString()::: standard glyph vector to string:::return->appendString->toString
StandardGlyphVector#appendString(StringBuffer)::: standard glyph vector append string:::if->new->StringBuffer->try->buf->append->buf->font->toString->append->buf->append->buf->frc->toString->append->buf->append->buf->append->buf->append->for->i->buf->append->if->buf->append->buf->append->buf->append->for->i->buf->append->if->buf->append->buf->append->buf->append->for->i->buf->append->buf->append->if->getLayoutFlags->buf->append->else->if->buf->append->if->buf->append->if->buf->append->if->buf->append->catch->buf->append->e->getMessage->append->finally->buf->append->return
StandardGlyphVector.ADL#toString()::: l to string:::return->toStringBuffer->toString
StandardGlyphVector.ADL#toStringBuffer(StringBuffer)::: l to string buffer:::if->new->StringBuffer->result->append->result->append->result->append->result->append->result->append->result->append->result->append->result->append->result->append->result->append->result->append->result->append->return
StandardTextSource#getChars()::: standard text source get chars:::return
StandardTextSource#getStart()::: standard text source get start:::return
StandardTextSource#getLength()::: standard text source get length:::return
StandardTextSource#getContextStart()::: standard text source get context start:::return
StandardTextSource#getContextLength()::: standard text source get context length:::return
StandardTextSource#getLayoutFlags()::: standard text source get layout flags:::return
StandardTextSource#getBidiLevel()::: standard text source get bidi level:::return
StandardTextSource#getFont()::: standard text source get font:::return
StandardTextSource#getFRC()::: standard text source get c:::return
StandardTextSource#getCoreMetrics()::: standard text source get core metrics:::return
StandardTextSource#getSubSource(int, int, int)::: standard text source get sub source:::if->throw->new->IllegalArgumentException->level->if->ltr->if->throw->new->IllegalArgumentException->return->new->StandardTextSource
StandardTextSource#toString()::: standard text source to string:::return->toString
StandardTextSource#toString(boolean)::: standard text source to string:::sb->super->toString->new->StringBuilder->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->chStart->chLimit->if->else->for->i->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->return->sb->toString
StrikeCache#getGlyphCacheDescription(long[])::: strike cache get glyph cache description:::
StrikeCache#refStrike(FontStrike)::: strike cache ref strike:::index->if
StrikeCache#doDispose(FontStrikeDisposer)::: strike cache do dispose:::if->freeCachedIntMemory->else->if->freeCachedLongMemory->else->if->for->i->if->new->intArr->freeCachedIntMemory->else->if->for->i->if->new->longArr->freeCachedLongMemory->else->if->if->longAddresses->new->longArr->freeCachedLongMemory->else->new->intArr->freeCachedIntMemory
StrikeCache#longAddresses()::: strike cache long addresses:::return
StrikeCache#disposeStrike(FontStrikeDisposer)::: strike cache dispose strike:::if->doDispose->return->rq->ge->GraphicsEnvironment->getLocalGraphicsEnvironment->if->GraphicsEnvironment->isHeadless->gc->ge->getDefaultScreenDevice->getDefaultConfiguration->if->agc->bc->agc->getContext->if->bc->getRenderQueue->if->rq->lock->try->rq->new->Runnable->flushAndInvokeNow->catch->finally->rq->unlock->else->doDispose
StrikeCache#freeIntPointer(int)::: strike cache free int pointer:::
StrikeCache#freeLongPointer(long)::: strike cache free long pointer:::
StrikeCache#freeIntMemory(int[], long)::: strike cache free int memory:::
StrikeCache#freeLongMemory(long[], long)::: strike cache free long memory:::
StrikeCache#freeCachedIntMemory(int[], long)::: strike cache free cached int memory:::synchronized->if->disposeListeners->size->gids->for->i->if->notifyDisposeListeners->freeIntMemory
StrikeCache#freeCachedLongMemory(long[], long)::: strike cache free cached long memory:::synchronized->if->disposeListeners->size->gids->for->i->if->notifyDisposeListeners->freeLongMemory
StrikeCache#addGlyphDisposedListener(GlyphDisposedListener)::: strike cache add glyph disposed listener:::synchronized->disposeListeners->add
StrikeCache#notifyDisposeListeners(ArrayList)::: strike cache notify dispose listeners:::foreach->listener->glyphDisposed
StrikeCache#getStrikeRef(FontStrike)::: strike cache get strike ref:::return->getStrikeRef
StrikeCache#getStrikeRef(FontStrike, boolean)::: strike cache get strike ref:::if->if->return->new->WeakReference<>->else->return->new->SoftReference<>->if->return->new->WeakDisposerRef->else->return->new->SoftDisposerRef
StrikeCache.DisposableStrike#getDisposer()::: disposable strike get disposer:::
StrikeCache.SoftDisposerRef#getDisposer()::: soft disposer ref get disposer:::return
StrikeCache.WeakDisposerRef#getDisposer()::: weak disposer ref get disposer:::return
StrikeMetrics#getAscent()::: strike metrics get ascent:::return
StrikeMetrics#getDescent()::: strike metrics get descent:::return
StrikeMetrics#getLeading()::: strike metrics get leading:::return
StrikeMetrics#getMaxAdvance()::: strike metrics get max advance:::return
StrikeMetrics#merge(StrikeMetrics)::: strike metrics merge:::if->return->if->if->if->if->if->if->if->if->if->if
StrikeMetrics#convertToUserSpace(AffineTransform)::: strike metrics convert to user space:::pt2D->new->Point2D.Float->invTx->deltaTransform->invTx->deltaTransform->invTx->deltaTransform->invTx->deltaTransform->invTx->deltaTransform
StrikeMetrics#toString()::: strike metrics to string:::return
SunFontManager.TTFilter#accept(File, String)::: filter accept:::offset->name->length->if->return->else->return->name->startsWith->name->startsWith->name->startsWith->name->startsWith->name->startsWith->name->startsWith
SunFontManager.T1Filter#accept(File, String)::: t1 filter accept:::if->return->offset->name->length->if->return->else->return->name->startsWith->name->startsWith->name->startsWith->name->startsWith
SunFontManager.TTorT1Filter#accept(File, String)::: tor t1 filter accept:::offset->name->length->if->return->else->isTT->name->startsWith->name->startsWith->name->startsWith->name->startsWith->name->startsWith->name->startsWith->if->return->else->if->return->else->return->name->startsWith->name->startsWith->name->startsWith->name->startsWith
SunFontManager#getInstance():::Returns the global SunFontManager instance:::fm->FontManagerFactory->getInstance->return
SunFontManager#getTrueTypeFilter()::: sun font manager get true type filter:::return
SunFontManager#getType1Filter()::: sun font manager get type1 filter:::return
SunFontManager#usingPerAppContextComposites()::: sun font manager using per app context composites:::return
SunFontManager#getJDKFontDir():::If the module image layout changes the location of JDK fonts, this will be updated to reflect that.:::return
SunFontManager#getEUDCFont()::: sun font manager get font:::return
SunFontManager#initIDs()::: sun font manager init ds:::
SunFontManager#getNewComposite(String, int, Font2DHandle)::: sun font manager get new composite:::if->return->oldComp->oldFont->oldComp->getSlotFont->if->oldFont->getFamilyName->if->oldComp->getStyle->newFont->findFont2D->if->physicalFont->dialog2D->findFont2D->if->return->compFont->new->CompositeFont->newHandle->new->Font2DHandle->return
SunFontManager#registerCompositeFont(String, String[], String[], int, int[], int[], boolean)::: sun font manager register composite font:::cf->new->CompositeFont->addCompositeToFontList->synchronized
SunFontManager#registerCompositeFont(String, String[], String[], int, int[], int[], boolean, ConcurrentHashMap)::: sun font manager register composite font:::cf->SunFontManager->getInstance->new->CompositeFont->oldFont->altNameCache->compositeName->toLowerCase->get->if->altNameCache->compositeName->toLowerCase->put
SunFontManager#addCompositeToFontList(CompositeFont, int)::: sun font manager add composite to font list:::if->FontUtilities->isLogging->FontUtilities->getLogger->info->f->setRank->compositeFonts->put->fullNameToFont->toLowerCase->put->family->FontFamily->getFamily->if->new->FontFamily->family->setFont
SunFontManager#addToFontList(PhysicalFont, int)::: sun font manager add to font list:::fontName->familyName->if->equals->return->if->compositeFonts->containsKey->return->f->setRank->if->physicalFonts->containsKey->if->FontUtilities->isLogging->FontUtilities->getLogger->info->physicalFonts->put->family->FontFamily->getFamily->if->new->FontFamily->family->setFont->else->family->setFont->fullNameToFont->fontName->toLowerCase->put->return->else->newFont->oldFont->physicalFonts->get->if->return->if->oldFont->getRank->if->return->if->oldFont->getRank->if->oldTTFont->newTTFont->if->return->else->return->if->startsWith->if->FontUtilities->isLogging->FontUtilities->getLogger->warning->return->if->FontUtilities->isLogging->FontUtilities->getLogger->info->replaceFont->physicalFonts->put->fullNameToFont->fontName->toLowerCase->put->family->FontFamily->getFamily->if->new->FontFamily->family->setFont->else->family->setFont->return->else->return
SunFontManager#getRegisteredFonts()::: sun font manager get registered fonts:::physFonts->getPhysicalFonts->mcf->regFonts->new->Font2DArr->System->arraycopy->System->arraycopy->return
SunFontManager#getPhysicalFonts()::: sun font manager get physical fonts:::return->physicalFonts->values->new->PhysicalFontArr->toArray
SunFontManager#initialiseDeferredFonts()::: sun font manager initialise deferred fonts:::foreach->deferredFontFiles->keySet->initialiseDeferredFont
SunFontManager#registerDeferredJREFonts(String)::: sun font manager register deferred fonts:::foreach->deferredFontFiles->values->if->startsWith->initialiseDeferredFont
SunFontManager#isDeferredFont(String)::: sun font manager is deferred font:::return->deferredFontFiles->containsKey
SunFontManager#findJREDeferredFont(String, int)::: sun font manager find deferred font:::if->return->synchronized->if->otherFontFiles->new->HashSet<String>->foreach->deferredFontFiles->keySet->file->new->File->dir->file->getParent->fname->file->getName->if->dir->equals->continue->otherFontFiles->add->otherFontFiles->toArray->if->for->i->return
SunFontManager#findOtherDeferredFont(String, int)::: sun font manager find other deferred font:::foreach->deferredFontFiles->keySet->physicalFont->initialiseDeferredFont->if->physicalFont->getFontName->equalsIgnoreCase->physicalFont->getFamilyName->equalsIgnoreCase->return->return
SunFontManager#findDeferredFont(String, int)::: sun font manager find deferred font:::physicalFont->findJREDeferredFont->if->return->else->return->findOtherDeferredFont
SunFontManager#registerDeferredFont(String, String, String[], int, boolean, int)::: sun font manager register deferred font:::regInfo->new->FontRegistrationInfo->deferredFontFiles->put
SunFontManager#initialiseDeferredFont(String)::: sun font manager initialise deferred font:::if->return->if->FontUtilities->isLogging->FontUtilities->getLogger->info->physicalFont->regInfo->deferredFontFiles->get->if->deferredFontFiles->remove->registerFontFile->if->initialisedFonts->put->else->initialisedFonts->getDefaultPhysicalFont->put->else->handle->initialisedFonts->get->if->getDefaultPhysicalFont->else->return
SunFontManager#isRegisteredFontFile(String)::: sun font manager is registered font file:::return->registeredFonts->containsKey
SunFontManager#getRegisteredFontFile(String)::: sun font manager get registered font file:::return->registeredFonts->get
SunFontManager#registerFontFile(String, String[], int, boolean, int)::: sun font manager register font file:::regFont->registeredFonts->get->if->return->physicalFont->try->name->switch->fn->ttf->do->new->TrueTypeFont->pf->addToFontList->if->while->ttf->getFontCount->break->t1f->new->Type1Font->addToFontList->break->nf->new->NativeFont->addToFontList->break->if->FontUtilities->isLogging->FontUtilities->getLogger->info->catch->if->FontUtilities->isLogging->FontUtilities->getLogger->ffe->toString->warning->finally->if->registeredFonts->put->return
SunFontManager#registerFonts(String[], String[][], int, int, boolean, int, boolean)::: sun font manager register fonts:::for->i
SunFontManager#getDefaultPhysicalFont()::: sun font manager get default physical font:::if->getDefaultFontFaceName->findFont2D->if->i->physicalFonts->values->iterator->if->i->hasNext->i->next->else->throw->new->Error->return
SunFontManager#getDefaultLogicalFont(int)::: sun font manager get default logical font:::return->findFont2D
SunFontManager#dotStyleStr(int)::: sun font manager dot style str:::switch->return->return->return->return
SunFontManager#populateFontFileNameMap(HashMap, HashMap, HashMap>, Locale)::: sun font manager populate font file name map:::
SunFontManager#getFontFilesFromPath(boolean)::: sun font manager get font files from path:::filter->if->else->new->TTorT1Filter->return->AccessController->new->PrivilegedAction<Object>->doPrivileged
SunFontManager#resolveWindowsFonts()::: sun font manager resolve windows fonts:::unmappedFontNames->foreach->fontToFamilyNameMap->keySet->file->fontToFileMap->get->if->if->font->indexOf->newName->font->replaceFirst->fontToFileMap->get->if->fontToFamilyNameMap->containsKey->fontToFileMap->remove->fontToFileMap->put->else->if->font->equals->fontToFileMap->put->else->if->font->equals->fontToFileMap->get->if->fontToFileMap->remove->fontToFileMap->put->else->if->new->ArrayList<String>->unmappedFontNames->add->if->unmappedFontFiles->new->HashSet<String>->ffmapCopy->fontToFileMap->clone->foreach->fontToFamilyNameMap->keySet->ffmapCopy->remove->foreach->ffmapCopy->keySet->unmappedFontFiles->ffmapCopy->get->add->fontToFileMap->remove->resolveFontFiles->if->unmappedFontNames->size->registryFiles->new->ArrayList<String>->foreach->fontToFileMap->values->registryFiles->regFile->toLowerCase->add->foreach->getFontFilesFromPath->if->registryFiles->contains->unmappedFontFiles->add->resolveFontFiles->if->unmappedFontNames->size->sz->unmappedFontNames->size->for->i
SunFontManager#checkForUnreferencedFontFiles():::In some cases windows may have fonts in the fonts folder that don't show up in the registry or in the GDI calls to enumerate fonts:::if->return->if->return->registryFiles->new->ArrayList<String>->foreach->fontToFileMap->values->registryFiles->regFile->toLowerCase->add->fontToFileMap2->fontToFamilyNameMap2->familyToFontListMap2->foreach->getFontFilesFromPath->if->registryFiles->contains->if->FontUtilities->isLogging->FontUtilities->getLogger->info->f->getPathName->registerFontFile->if->continue->if->new->HashMap<String,String>->new->HashMap<String,String>->new->HashMap<String,ArrayList<String>>->fontName->f->getFontName->family->f->getFamilyName->familyLC->family->toLowerCase->fontToFamilyNameMap2->put->fontToFileMap2->put->fonts->familyToFontListMap2->get->if->new->ArrayList<String>->else->new->ArrayList<String>->fonts->add->familyToFontListMap2->put->if
SunFontManager#resolveFontFiles(HashSet, ArrayList)::: sun font manager resolve font files:::l->SunToolkit->getStartupLocale->foreach->try->fn->ttf->fullPath->getPathName->if->FontUtilities->isLogging->FontUtilities->getLogger->info->do->new->TrueTypeFont->fontName->ttf->getFontName->toLowerCase->if->unmappedFonts->contains->fontToFileMap->put->unmappedFonts->remove->if->FontUtilities->isLogging->FontUtilities->getLogger->info->while->ttf->getFontCount->catch->finally
SunFontManager#populateHardcodedFileNameMap():::default implementation does nothing.:::return->new->HashMap<String,FamilyDescription>
SunFontManager#findFontFromPlatformMap(String, int)::: sun font manager find font from platform map:::if->populateHardcodedFileNameMap->if->platformFontMap->size->return->spaceIndex->lcName->indexOf->firstWord->if->lcName->substring->fd->platformFontMap->get->if->return->styleIndex->if->lcName->equalsIgnoreCase->else->if->lcName->equalsIgnoreCase->else->if->lcName->equalsIgnoreCase->else->if->lcName->equalsIgnoreCase->if->lcName->equalsIgnoreCase->return->plainFile->boldFile->italicFile->boldItalicFile->failure->getPlatformFontDirs->if->getPathName->if->if->getPathName->if->if->getPathName->if->if->getPathName->if->if->if->FontUtilities->isLogging->FontUtilities->getLogger->info->platformFontMap->remove->return->files->new->java.security.PrivilegedAction<Boolean>->doPrivileged->if->if->FontUtilities->isLogging->FontUtilities->getLogger->info->platformFontMap->remove->return->font->for->f->fontFamily->FontFamily->getFamily->if->if->fontFamily->getFont->if->fontFamily->getClosestStyle->else->if->fontFamily->getFont->if->fontFamily->getClosestStyle->return
SunFontManager#getFullNameToFileMap()::: sun font manager get full name to file map:::if->getPlatformFontDirs->new->HashMap<String,String>->new->HashMap<String,String>->new->HashMap<String,ArrayList<String>>->populateFontFileNameMap->if->resolveWindowsFonts->if->FontUtilities->isLogging->logPlatformFontInfo->return
SunFontManager#logPlatformFontInfo()::: sun font manager log platform font info:::logger->FontUtilities->getLogger->for->i->foreach->fontToFileMap->keySet->logger->fontToFileMap->get->info->foreach->fontToFamilyNameMap->keySet->logger->fontToFamilyNameMap->get->info->foreach->familyToFontListMap->keySet->logger->familyToFontListMap->get->info
SunFontManager#getFontNamesFromPlatform()::: sun font manager get font names from platform:::if->getFullNameToFileMap->size->return->checkForUnreferencedFontFiles->fontNames->new->ArrayList<String>->foreach->familyToFontListMap->values->foreach->fontNames->add->return->fontNames->toArray
SunFontManager#gotFontsFromPlatform()::: sun font manager got fonts from platform:::return->getFullNameToFileMap->size
SunFontManager#getFileNameForFontName(String)::: sun font manager get file name for font name:::fontNameLC->fontName->toLowerCase->return->fontToFileMap->get
SunFontManager#registerFontFile(String)::: sun font manager register font file:::if->new->File->isAbsolute->registeredFonts->containsKey->fontFormat->fontRank->if->ttFilter->accept->else->if->t1Filter->accept->if->return->return->registerFontFile->return
SunFontManager#registerOtherFontFiles(HashSet)::: sun font manager register other font files:::if->getFullNameToFileMap->size->return->foreach->fontToFileMap->values->registerFontFile
SunFontManager#getFamilyNamesFromPlatform(TreeMap, Locale)::: sun font manager get family names from platform:::if->getFullNameToFileMap->size->return->checkForUnreferencedFontFiles->foreach->fontToFamilyNameMap->values->familyNames->name->toLowerCase->put->return
SunFontManager#getPathName(String)::: sun font manager get path name:::f->new->File->if->f->isAbsolute->return->else->if->return->else->path->new->java.security.PrivilegedAction<String>->doPrivileged->if->return->return
SunFontManager#findFontFromPlatform(String, int)::: sun font manager find font from platform:::if->getFullNameToFileMap->size->return->family->fontFile->familyName->fontToFamilyNameMap->get->if->fontToFileMap->get->familyToFontListMap->familyName->toLowerCase->get->else->familyToFontListMap->get->if->family->size->lcFontName->family->get->toLowerCase->if->fontToFamilyNameMap->get->if->return->fontList->family->toArray->if->return->for->f->physicalFont->if->getPathName->registerFontFile->for->f->font->fontFamily->FontFamily->getFamily->if->if->fontFamily->getFont->if->fontFamily->getClosestStyle->return
SunFontManager#findFont2D(String, int, int)::: sun font manager find font2 d:::lowerCaseName->name->toLowerCase->mapName->dotStyleStr->font->if->altNameCache->AppContext->getAppContext->get->if->altNameCache->get->else->else->fontNameCache->get->if->return->if->FontUtilities->isLogging->FontUtilities->getLogger->info->if->if->lowerCaseName->equals->else->if->lowerCaseName->equals->if->lowerCaseName->equals->family->FontFamily->getFamily->if->family->getFontWithExactStyleMatch->if->findDeferredFont->if->findFontFromPlatform->if->family->getFont->if->family->getClosestStyle->if->fontNameCache->put->return->fullNameToFont->get->if->if->fontNameCache->put->return->else->FontFamily->font->getFamilyName->getFamily->if->familyFont->family->getFont->if->fontNameCache->put->return->else->family->getClosestStyle->if->if->familyFont->canDoStyle->fontNameCache->put->return->if->findFontFromPlatformMap->if->FontUtilities->isLogging->FontUtilities->getLogger->info->if->fontNameCache->put->return->if->deferredFontFiles->size->findJREDeferredFont->if->fontNameCache->put->return->findFontFromPlatform->if->if->FontUtilities->isLogging->FontUtilities->getLogger->info->fontNameCache->put->return->if->deferredFontFiles->size->findDeferredFont->if->fontNameCache->put->return->if->if->lowerCaseName->equals->findFont2D->fontNameCache->put->register1dot0Fonts->ff->findFont2D->return->if->familyTable->nameTable->if->else->appContext->AppContext->getAppContext->tmp1->appContext->get->tmp2->appContext->get->familyTable->get->if->family->getFontWithExactStyleMatch->if->family->getFont->if->family->getClosestStyle->if->if->fontNameCache->put->return->nameTable->get->if->if->fontNameCache->put->return->if->if->FontUtilities->isLogging->FontUtilities->getLogger->info->loadFonts->return->findFont2D->if->if->FontUtilities->isLogging->FontUtilities->getLogger->info->loadFontFiles->return->findFont2D->if->findFont2DAllLocales->fontNameCache->put->return->if->compatName->getFontConfiguration->getFallbackFamilyName->if->findFont2D->fontNameCache->put->return->else->if->lowerCaseName->equals->findFont2D->fontNameCache->put->return->else->if->lowerCaseName->equals->findFont2D->fontNameCache->put->return->else->if->lowerCaseName->equals->findFont2D->fontNameCache->put->return->if->FontUtilities->isLogging->FontUtilities->getLogger->info->switch->return->getDefaultPhysicalFont->return->getDefaultLogicalFont->return
SunFontManager#usePlatformFontMetrics()::: sun font manager use platform font metrics:::return
SunFontManager#getNumFonts()::: sun font manager get num fonts:::return->physicalFonts->size
SunFontManager#fontSupportsEncoding(Font, String)::: sun font manager font supports encoding:::return->FontUtilities->getFont2D->supportsEncoding
SunFontManager#getFontPath(boolean)::: sun font manager get font path:::
SunFontManager#createFont2D(File, int, boolean, boolean, CreatedFontTracker)::: sun font manager create font2 d:::fList->new->ArrayList<Font2D>->cnt->fontFilePath->fontFile->getPath->font2D->fFile->_tracker->try->switch->new->TrueTypeFont->fList->add->if->break->getFontCount->index->while->fList->new->TrueTypeFont->add->break->new->Type1Font->fList->add->break->throw->new->FontFormatException->catch->if->new->java.security.PrivilegedAction<Object>->doPrivileged->throw->finally->if->FileFont->setFileToRemove->synchronized->if->new->Vector<File>->tmpFontFiles->add->if->fileCloserRunnable->new->Runnable->AccessController->rootTG->ThreadGroupUtils->getRootThreadGroup->new->Thread->fileCloser->setContextClassLoader->Runtime->getRuntime->addShutdownHook->return->doPrivileged->return->fList->new->Font2DArr->toArray
SunFontManager#getFullNameByFileName(String)::: sun font manager get full name by file name:::physFonts->getPhysicalFonts->for->i->return
SunFontManager#deRegisterBadFont(Font2D)::: sun font manager de register bad font:::if->return->else->if->FontUtilities->isLogging->FontUtilities->getLogger->severe->getDefaultPhysicalFont->replaceFont
SunFontManager#replaceFont(PhysicalFont, PhysicalFont)::: sun font manager replace font:::if->return->if->if->FontUtilities->isLogging->FontUtilities->getLogger->severe->physFonts->getPhysicalFonts->for->i->if->if->FontUtilities->isLogging->FontUtilities->getLogger->severe->return->physicalFonts->remove->fullNameToFont->toLowerCase->remove->FontFamily->remove->if->mapEntries->localeFullNamesToFont->entrySet->new->Map.Entry<?,?>Arr->toArray->for->i->for->i
SunFontManager#loadLocaleNames()::: sun font manager load locale names:::if->return->new->HashMap<String,TrueTypeFont>->fonts->getRegisteredFonts->for->i
SunFontManager#findFont2DAllLocales(String, int)::: sun font manager find font2 all locales:::if->FontUtilities->isLogging->FontUtilities->getLogger->info->if->loadLocaleNames->lowerCaseName->name->toLowerCase->font->family->FontFamily->getLocaleFamily->if->family->getFont->if->family->getClosestStyle->if->return->synchronized->localeFullNamesToFont->get->if->if->return->else->FontFamily->font->getFamilyName->getFamily->if->familyFont->family->getFont->if->return->else->family->getClosestStyle->if->if->familyFont->canDoStyle->return->return
SunFontManager#maybeUsingAlternateCompositeFonts()::: sun font manager maybe using alternate composite fonts:::return
SunFontManager#usingAlternateCompositeFonts()::: sun font manager using alternate composite fonts:::return->AppContext->getAppContext->get
SunFontManager#maybeMultiAppContext()::: sun font manager maybe multi app context:::appletSM->new->java.security.PrivilegedAction<Object>->doPrivileged->return->appletSM->booleanValue
SunFontManager#useAlternateFontforJALocales()::: sun font manager use alternate fontfor locales:::if->FontUtilities->isLogging->FontUtilities->getLogger->info->if->return->if->maybeMultiAppContext->else->appContext->AppContext->getAppContext->appContext->put
SunFontManager#usingAlternateFontforJALocales()::: sun font manager using alternate fontfor locales:::if->maybeMultiAppContext->return->else->appContext->AppContext->getAppContext->return->appContext->get
SunFontManager#preferLocaleFonts()::: sun font manager prefer locale fonts:::if->FontUtilities->isLogging->FontUtilities->getLogger->info->if->FontConfiguration->willReorderForStartupLocale->return->if->maybeMultiAppContext->if->return->createCompositeFonts->else->appContext->AppContext->getAppContext->if->appContext->get->return->appContext->put->acPropPref->appContext->get->altNameCache->new->ConcurrentHashMap<String,Font2D>->appContext->put->createCompositeFonts
SunFontManager#preferProportionalFonts()::: sun font manager prefer proportional fonts:::if->FontUtilities->isLogging->FontUtilities->getLogger->info->if->FontConfiguration->hasMonoToPropMap->return->if->maybeMultiAppContext->if->return->createCompositeFonts->else->appContext->AppContext->getAppContext->if->appContext->get->return->appContext->put->acLocalePref->appContext->get->altNameCache->new->ConcurrentHashMap<String,Font2D>->appContext->put->createCompositeFonts
SunFontManager#getInstalledNames()::: sun font manager get installed names:::if->l->getSystemStartupLocale->fontManager->SunFontManager->getInstance->installedFamilies->fontManager->getInstalledFontFamilyNames->installedFonts->fontManager->getAllInstalledFonts->names->new->HashSet<String>->for->i->for->i->return
SunFontManager#registerFont(Font)::: sun font manager register font:::if->return->synchronized->if->new->Hashtable<String,FontFamily>->new->Hashtable<String,Font2D>->if->FontAccess->getFontAccess->isCreatedFont->return->names->getInstalledNames->l->getSystemStartupLocale->familyName->font->getFamily->toLowerCase->fullName->font->getFontName->toLowerCase->if->names->contains->names->contains->return->familyTable->fullNameTable->if->maybeMultiAppContext->else->appContext->AppContext->getAppContext->tmp1->appContext->get->tmp2->appContext->get->if->new->Hashtable<String,FontFamily>->new->Hashtable<String,Font2D>->appContext->put->appContext->put->font2D->FontUtilities->getFont2D->style->font2D->getStyle->family->familyTable->get->if->font->getFamily->new->FontFamily->familyTable->put->if->family->getFont->removeFromCache->family->getFont->removeFromCache->family->getFont->removeFromCache->family->getFont->removeFromCache->fullNameTable->get->removeFromCache->family->setFont->fullNameTable->put->return
SunFontManager#removeFromCache(Font2D)::: sun font manager remove from cache:::if->return->keys->fontNameCache->keySet->toArray->for->k
SunFontManager#getCreatedFontFamilyNames()::: sun font manager get created font family names:::familyTable->if->else->if->appContext->AppContext->getAppContext->tmp->appContext->get->else->return->l->getSystemStartupLocale->synchronized->map->new->TreeMap<String,String>->foreach->familyTable->values->font2D->f->getFont->if->f->getClosestStyle->name->font2D->getFamilyName->map->name->toLowerCase->put->return
SunFontManager#getCreatedFonts()::: sun font manager get created fonts:::nameTable->if->else->if->appContext->AppContext->getAppContext->tmp->appContext->get->else->return->l->getSystemStartupLocale->synchronized->fonts->nameTable->size->new->FontArr->i->foreach->nameTable->values->font2D->getFontName->new->Font->return
SunFontManager#getPlatformFontDirs(boolean)::: sun font manager get platform font dirs:::if->return->path->getPlatformFontPath->parser->new->StringTokenizer->pathList->new->ArrayList<String>->try->while->parser->hasMoreTokens->pathList->parser->nextToken->add->catch->finally->pathList->new->StringArr->toArray->return
SunFontManager#getDefaultPlatformFont():::Returns an array of two strings:::
SunFontManager#addDirFonts(String, File, FilenameFilter, int, boolean, int, boolean, boolean)::: sun font manager add dir fonts:::ls->dirFile->list->if->return->fontNames->new->StringArr->nativeNames->new->StringArrs->fontCount->for->i->registerFonts->return
SunFontManager#getNativeNames(String, String)::: sun font manager get native names:::return
SunFontManager#getFileNameFromPlatformName(String):::Returns a file name for the physical font represented by this platform font name:::return->fontConfig->getFileNameFromPlatformName
SunFontManager#getFontConfiguration():::Return the default font configuration.:::return
SunFontManager#getPlatformFontPath(boolean)::: sun font manager get platform font path:::if->getFontPath->return
SunFontManager#loadFonts()::: sun font manager load fonts:::if->return->synchronized->if->FontUtilities->debugFonts->Thread->dumpStack->FontUtilities->getLogger->info->initialiseDeferredFonts->new->java.security.PrivilegedAction<Object>->doPrivileged
SunFontManager#registerFontDirs(String)::: sun font manager register font dirs:::return
SunFontManager#registerFontsOnPath(String, boolean, int, boolean, boolean)::: sun font manager register fonts on path:::parser->new->StringTokenizer->try->while->parser->hasMoreTokens->parser->nextToken->registerFontsInDir->catch->finally
SunFontManager#registerFontsInDir(String)::: sun font manager register fonts in dir:::registerFontsInDir
SunFontManager#registerFontsInDir(String, boolean, int, boolean, boolean)::: sun font manager register fonts in dir:::pathFile->new->File->addDirFonts->addDirFonts
SunFontManager#registerFontDir(String)::: sun font manager register font dir:::
SunFontManager#getDefaultFontFile():::Returns file name for default font, either absolute or relative as needed by registerFontFile.:::return
SunFontManager#useAbsoluteFontFileNames():::Whether registerFontFile expects absolute or relative font file names.:::return
SunFontManager#createFontConfiguration():::Creates this environment's FontConfiguration.:::
SunFontManager#createFontConfiguration(boolean, boolean)::: sun font manager create font configuration:::
SunFontManager#getDefaultFontFaceName():::Returns face name for default font, or null if no face names are used for CompositeFontDescriptors for this platform.:::return
SunFontManager#loadFontFiles()::: sun font manager load font files:::loadFonts->if->return->synchronized->if->FontUtilities->debugFonts->Thread->dumpStack->FontUtilities->getLogger->info->new->java.security.PrivilegedAction<Object>->doPrivileged
SunFontManager#initCompositeFonts(FontConfiguration, ConcurrentHashMap)::: sun font manager init composite fonts:::if->FontUtilities->isLogging->FontUtilities->getLogger->info->numCoreFonts->fontConfig->getNumberCoreFonts->fcFonts->fontConfig->getPlatformFontNames->for->f->registerPlatformFontsUsedByFontConfiguration->compositeFontInfo->fontConfig->get2DCompositeFontInfo->for->i
SunFontManager#addFontToPlatformFontPath(String):::Notifies graphics environment that the logical font configuration uses the given platform font name:::
SunFontManager#registerFontFile(String, String[], int, boolean)::: sun font manager register font file:::if->registeredFontFiles->contains->return->fontFormat->if->ttFilter->accept->else->if->t1Filter->accept->else->registeredFontFiles->add->if->registerDeferredFont->else->registerFontFile
SunFontManager#registerPlatformFontsUsedByFontConfiguration()::: sun font manager register platform fonts used by font configuration:::
SunFontManager#addToMissingFontFileList(String)::: sun font manager add to missing font file list:::if->new->HashSet<String>->missingFontFiles->add
SunFontManager#isNameForRegisteredFile(String)::: sun font manager is name for registered file:::fileName->getFileNameForFontName->if->return->return->registeredFontFiles->contains
SunFontManager#createCompositeFonts(ConcurrentHashMap, boolean, boolean)::: sun font manager create composite fonts:::fontConfig->createFontConfiguration->initCompositeFonts
SunFontManager#getAllInstalledFonts():::Returns all fonts installed in this environment.:::if->loadFonts->fontMapNames->new->TreeMap<>->allfonts->getRegisteredFonts->for->i->platformNames->getFontNamesFromPlatform->if->for->i->fontNames->if->fontMapNames->size->fontMapNames->size->new->StringArr->keyNames->fontMapNames->keySet->toArray->for->i->fonts->new->FontArr->for->i->copyFonts->new->FontArr->System->arraycopy->return
SunFontManager#getInstalledFontFamilyNames(Locale):::Get a list of installed fonts in the requested Locale:::if->Locale->getDefault->if->requestedLocale->equals->copyFamilies->new->StringArr->System->arraycopy->return->familyNames->new->TreeMap<String,String>->str->familyNames->str->toLowerCase->put->familyNames->str->toLowerCase->put->familyNames->str->toLowerCase->put->familyNames->str->toLowerCase->put->familyNames->str->toLowerCase->put->if->requestedLocale->getSystemStartupLocale->equals->getFamilyNamesFromPlatform->getJREFontFamilyNames->else->loadFontFiles->physicalfonts->getPhysicalFonts->for->i->addNativeFontFamilyNames->retval->familyNames->size->new->StringArr->keyNames->familyNames->keySet->toArray->for->i->if->requestedLocale->Locale->getDefault->equals->new->StringArr->System->arraycopy->return
SunFontManager#addNativeFontFamilyNames(TreeMap, Locale)::: sun font manager add native font family names:::
SunFontManager#register1dot0Fonts()::: sun font manager register1dot0 fonts:::new->java.security.PrivilegedAction<Object>->doPrivileged
SunFontManager#getJREFontFamilyNames(TreeMap, Locale)::: sun font manager get font family names:::registerDeferredJREFonts->physicalfonts->getPhysicalFonts->for->i
SunFontManager#getSystemStartupLocale()::: sun font manager get system startup locale:::if->new->java.security.PrivilegedAction<Object>->doPrivileged->return
SunFontManager#addToPool(FileFont)::: sun font manager add to pool:::fontFileToClose->freeSlot->synchronized->for->i->if->return->else->if->fontFileToClose->close
SunFontManager#getFontConfigFUIR(String, int, int)::: sun font manager get font config r:::return->new->FontUIResource
SunLayoutEngine#instance()::: sun layout engine instance:::if->new->SunLayoutEngine->return
SunLayoutEngine#getEngine(Font2D, int, int)::: sun layout engine get engine:::return->new->LayoutEngineKey->getEngine
SunLayoutEngine#getEngine(LayoutEngineKey)::: sun layout engine get engine:::cache->cacheref->get->if->new->ConcurrentHashMap<>->new->SoftReference<>->e->cache->get->if->copy->key->copy->new->SunLayoutEngine->cache->put->return
SunLayoutEngine#isAAT(Font2D)::: sun layout engine is t:::aatObj->synchronized->aatInfo->get->if->return->aatObj->booleanValue->aat->if->ttf->ttf->getDirectoryEntry->ttf->getDirectoryEntry->else->if->pf->pf->getTableBytes->pf->getTableBytes->synchronized->aatInfo->Boolean->valueOf->put->return
SunLayoutEngine#getFacePtr(Font2D)::: sun layout engine get face ptr:::ref->synchronized->facePtr->FaceRef->new->computeIfAbsent->return->ref->getNativePtr
SunLayoutEngine#layout(FontStrikeDesc, float[], float, int, int, TextRecord, int, Point2D.Float, GVData)::: sun layout engine layout:::font->key->font->strike->font->getStrike->pNativeFont->font->getPlatformNativeFontPtr->pFace->getFacePtr->if->isAAT->key->script->shape
SunLayoutEngine#shape(Font2D, FontStrike, float, float[], long, long, boolean, char[], GVData, int, int, int, int, Point2D.Float, int, int)::: sun layout engine shape:::
SunLayoutEngine#createFace(Font2D, boolean, long)::: sun layout engine create face:::
SunLayoutEngine#disposeFace(long)::: sun layout engine dispose face:::
SunLayoutEngine.FaceRef#getNativePtr()::: face ref get native ptr:::if->isAAT->font->getPlatformNativeFontPtr->createFace->if->Disposer->addObjectRecord->return
SunLayoutEngine.FaceRef#dispose()::: face ref dispose:::disposeFace
TextLabel#getVisualBounds(float, float):::Return a rectangle that surrounds the text outline when this label is rendered at x, y.:::
TextLabel#getLogicalBounds(float, float):::Return a rectangle that corresponds to the logical bounds of the text when this label is rendered at x, y:::
TextLabel#getAlignBounds(float, float):::Return a rectangle that corresponds to the alignment bounds of the text when this label is rendered at x, y:::
TextLabel#getItalicBounds(float, float):::Return a rectangle that corresponds to the logical bounds of the text, adjusted to angle the leading and trailing edges by the italic angle.:::
TextLabel#getOutline(float, float):::Return an outline of the characters in the label when rendered at x, y.:::
TextLabel#draw(Graphics2D, float, float):::Render the label at x, y in the graphics.:::
TextLabel#getVisualBounds():::A convenience method that returns the visual bounds when rendered at 0, 0.:::return->getVisualBounds
TextLabel#getLogicalBounds():::A convenience method that returns the logical bounds when rendered at 0, 0.:::return->getLogicalBounds
TextLabel#getAlignBounds():::A convenience method that returns the align bounds when rendered at 0, 0.:::return->getAlignBounds
TextLabel#getItalicBounds():::A convenience method that returns the italic bounds when rendered at 0, 0.:::return->getItalicBounds
TextLabel#getOutline():::A convenience method that returns the outline when rendered at 0, 0.:::return->getOutline
TextLabel#draw(Graphics2D):::A convenience method that renders the label at 0, 0.:::draw
TextLabelFactory#getFontRenderContext()::: text label factory get font render context:::return
TextLabelFactory#getLineBidi()::: text label factory get line bidi:::return
TextLabelFactory#setLineContext(int, int):::Set a line context for the factory:::if->bidi->createLineBidi
TextLabelFactory#createExtended(Font, CoreMetrics, Decoration, int, int):::Create an extended glyph array for the text between start and limit.:::if->throw->new->IllegalArgumentException->level->lineBidi->getLevelAt->linedir->lineBidi->baseIsLeftToRight->layoutFlags->if->if->source->new->StandardTextSource->return->new->ExtendedTextSourceLabel
TextLabelFactory#createSimple(Font, CoreMetrics, int, int):::Create a simple glyph array for the text between start and limit.:::if->throw->new->IllegalArgumentException->level->lineBidi->getLevelAt->linedir->lineBidi->baseIsLeftToRight->layoutFlags->if->if->source->new->StandardTextSource->return->new->TextSourceLabel
TextLineComponent#getCoreMetrics()::: text line component get core metrics:::
TextLineComponent#draw(Graphics2D, float, float)::: text line component draw:::
TextLineComponent#getCharVisualBounds(int)::: text line component get char visual bounds:::
TextLineComponent#getVisualBounds()::: text line component get visual bounds:::
TextLineComponent#getAdvance()::: text line component get advance:::
TextLineComponent#getOutline(float, float)::: text line component get outline:::
TextLineComponent#getNumCharacters()::: text line component get num characters:::
TextLineComponent#getCharX(int)::: text line component get char x:::
TextLineComponent#getCharY(int)::: text line component get char y:::
TextLineComponent#getCharAdvance(int)::: text line component get char advance:::
TextLineComponent#caretAtOffsetIsValid(int)::: text line component caret at offset is valid:::
TextLineComponent#getLineBreakIndex(int, float)::: text line component get line break index:::
TextLineComponent#getAdvanceBetween(int, int)::: text line component get advance between:::
TextLineComponent#getLogicalBounds()::: text line component get logical bounds:::
TextLineComponent#getItalicBounds()::: text line component get italic bounds:::
TextLineComponent#getBaselineTransform()::: text line component get baseline transform:::
TextLineComponent#isSimple()::: text line component is simple:::
TextLineComponent#getPixelBounds(FontRenderContext, float, float)::: text line component get pixel bounds:::
TextLineComponent#getSubset(int, int, int):::Return a TextLineComponent for the characters in the range start, limit:::
TextLineComponent#getNumJustificationInfos():::Return the number of justification records this uses.:::
TextLineComponent#getJustificationInfos(GlyphJustificationInfo[], int, int, int):::Return GlyphJustificationInfo objects for the characters between charStart and charLimit, starting at offset infoStart:::
TextLineComponent#applyJustificationDeltas(float[], int, boolean[]):::Apply deltas to the data in this component, starting at offset deltaStart, and return the new component:::
TextRecord#init(char[], int, int, int, int)::: text record init:::
TextSource#getChars():::Source character data.:::
TextSource#getStart():::Start of source data in char array returned from getChars.:::
TextSource#getLength():::Length of source data.:::
TextSource#getContextStart():::Start of context data in char array returned from getChars.:::
TextSource#getContextLength():::Length of context data.:::
TextSource#getLayoutFlags():::Return the layout flags:::
TextSource#getBidiLevel():::Bidi level of all the characters in context.:::
TextSource#getFont():::Font for source data.:::
TextSource#getFRC():::Font render context to use when measuring or rendering source data.:::
TextSource#getCoreMetrics():::Line metrics for source data.:::
TextSource#getSubSource(int, int, int):::Get subrange of this TextSource:::
TextSource#toString(boolean):::Get debugging info about this TextSource instance:::
TextSourceLabel#getSource()::: text source label get source:::return
TextSourceLabel#getLogicalBounds(float, float)::: text source label get logical bounds:::if->createLogicalBounds->return->lb->getX->lb->getY->lb->getWidth->lb->getHeight->new->Rectangle2D.Float
TextSourceLabel#getVisualBounds(float, float)::: text source label get visual bounds:::if->createVisualBounds->return->vb->getX->vb->getY->vb->getWidth->vb->getHeight->new->Rectangle2D.Float
TextSourceLabel#getAlignBounds(float, float)::: text source label get align bounds:::if->createAlignBounds->return->ab->getX->ab->getY->ab->getWidth->ab->getHeight->new->Rectangle2D.Float
TextSourceLabel#getItalicBounds(float, float)::: text source label get italic bounds:::if->createItalicBounds->return->ib->getX->ib->getY->ib->getWidth->ib->getHeight->new->Rectangle2D.Float
TextSourceLabel#getPixelBounds(FontRenderContext, float, float)::: text source label get pixel bounds:::return->getGV->getPixelBounds
TextSourceLabel#getBaselineTransform()::: text source label get baseline transform:::font->source->getFont->if->font->hasLayoutAttributes->return->AttributeValues->font->getAttributes->getBaselineTransform->return
TextSourceLabel#getOutline(float, float)::: text source label get outline:::return->getGV->getOutline
TextSourceLabel#draw(Graphics2D, float, float)::: text source label draw:::g->getGV->drawGlyphVector
TextSourceLabel#createLogicalBounds()::: text source label create logical bounds:::return->getGV->getLogicalBounds
TextSourceLabel#createVisualBounds()::: text source label create visual bounds:::return->getGV->getVisualBounds
TextSourceLabel#createItalicBounds()::: text source label create italic bounds:::return->getGV->getLogicalBounds
TextSourceLabel#createAlignBounds()::: text source label create align bounds:::return->createLogicalBounds
TextSourceLabel#getGV()::: text source label get v:::if->createGV->return
TextSourceLabel#createGV()::: text source label create v:::font->source->getFont->frc->source->getFRC->flags->source->getLayoutFlags->context->source->getChars->start->source->getStart->length->source->getLength->gl->GlyphLayout->get->gv->gl->layout->GlyphLayout->done->return
TrueTypeFont.TTDisposerRecord#dispose()::: disposer record dispose:::try->if->channel->close->catch->finally
TrueTypeFont#checkUseNatives()::: true type font check use natives:::if->return->if->getDirectoryEntry->GraphicsEnvironment->isHeadless->return->else->if->name->if->name->indexOf->return->else->if->NativeFont->hasExternalBitmaps->new->NativeFontArr->try->new->NativeFont->catch->finally->else->if->natNames->numNames->externalBitmaps->for->nn->if->return->new->NativeFontArr->for->nn->if->getMapper->getNumGlyphs->new->charArr->return
TrueTypeFont#open()::: true type font open:::return->open
TrueTypeFont#open(boolean)::: true type font open:::if->if->FontUtilities->isLogging->FontUtilities->getLogger->info->try->raf->new->java.security.PrivilegedAction<Object>->doPrivileged->raf->getChannel->size->if->fm->FontManagerFactory->getInstance->if->addToPool->catch->close->throw->e->toString->new->FontFormatException->Thread->interrupted->close->open->close->throw->e->toString->new->FontFormatException->finally->return
TrueTypeFont#close()::: true type font close:::disposerRecord->dispose
TrueTypeFont#readBlock(ByteBuffer, int, int)::: true type font read block:::bread->try->synchronized->if->open->if->if->if->FontUtilities->isLogging->msg->FontUtilities->getLogger->severe->return->else->buffer->clear->position->while->cnt->read->if->msg->currSize->size->if->if->FontUtilities->isLogging->FontUtilities->getLogger->severe->if->buffer->flip->if->FontUtilities->isLogging->FontUtilities->getLogger->severe->else->throw->new->IOException->buffer->flip->if->catch->if->FontUtilities->isLogging->FontUtilities->getLogger->severe->deregisterFontAndClearStrikeCache->Thread->interrupted->close->return->readBlock->if->FontUtilities->isLogging->FontUtilities->getLogger->severe->if->deregisterFontAndClearStrikeCache->finally->return
TrueTypeFont#readBlock(int, int)::: true type font read block:::buffer->ByteBuffer->allocate->try->synchronized->if->open->if->if->return->else->ByteBuffer->allocate->position->read->buffer->flip->catch->return->Thread->interrupted->close->readBlock->return->finally->return
TrueTypeFont#readBytes(int, int)::: true type font read bytes:::buffer->readBlock->if->buffer->hasArray->return->buffer->array->else->bufferBytes->buffer->limit->new->byteArr->buffer->get->return
TrueTypeFont#verify(boolean)::: true type font verify:::open
TrueTypeFont#init(int)::: true type font init:::headerOffset->buffer->readBlock->try->switch->buffer->getInt->buffer->getInt->buffer->getInt->if->throw->new->FontFormatException->readBlock->buffer->getInt->break->break->throw->getPublicFileName->new->FontFormatException->readBlock->buffer->getShort->bbuffer->readBlock->ibuffer->bbuffer->asIntBuffer->table->new->DirectoryEntryArr->for->i->if->getDirectoryEntry->throw->new->FontFormatException->if->getDirectoryEntry->throw->new->FontFormatException->if->getDirectoryEntry->getDirectoryEntry->throw->new->FontFormatException->initNames->catch->if->FontUtilities->isLogging->FontUtilities->getLogger->e->toString->severe->if->throw->else->throw->e->toString->new->FontFormatException->finally->if->throw->new->FontFormatException->os2_Table->getTableBuffer->setStyle->setCJKSupport
TrueTypeFont#getCodePage()::: true type font get code page:::if->return->if->new->sun.security.action.GetPropertyAction->doPrivileged->else->if->throw->new->InternalError->locale->getStartupLocale->language->locale->getLanguage->if->if->language->equals->country->locale->getCountry->if->for->i->if->return
TrueTypeFont#supportsEncoding(String)::: true type font supports encoding:::if->getCodePage->if->equals->return->encoding->toLowerCase->if->encoding->equals->else->if->encoding->equals->buffer->getTableBuffer->if->buffer->capacity->return->range1->buffer->getInt->range2->buffer->getInt->for->em->return
TrueTypeFont#setCJKSupport(ByteBuffer)::: true type font set support:::if->os2Table->capacity->return->range2->os2Table->getInt
TrueTypeFont#supportsJA()::: true type font supports a:::return
TrueTypeFont#getTableBuffer(int)::: true type font get table buffer:::entry->for->i->if->return->bread->buffer->ByteBuffer->allocate->synchronized->try->if->open->position->read->buffer->flip->catch->Thread->interrupted->close->return->getTableBuffer->return->return->finally->if->return->else->return
TrueTypeFont#getTableBytes(int)::: true type font get table bytes:::buffer->getTableBuffer->if->return->else->if->buffer->hasArray->try->return->buffer->array->catch->finally->data->getTableSize->new->byteArr->buffer->get->return
TrueTypeFont#getTableSize(int)::: true type font get table size:::for->i->return
TrueTypeFont#getTableOffset(int)::: true type font get table offset:::for->i->return
TrueTypeFont#getDirectoryEntry(int)::: true type font get directory entry:::for->i->return
TrueTypeFont#useEmbeddedBitmapsForSize(int)::: true type font use embedded bitmaps for size:::if->return->if->getDirectoryEntry->return->eblcTable->getTableBuffer->numSizes->eblcTable->getInt->for->i->return
TrueTypeFont#getFullName()::: true type font get full name:::return
TrueTypeFont#setStyle()::: true type font set style:::getTableBuffer->setStyle
TrueTypeFont#getWidth()::: true type font get width:::return->super->getWidth
TrueTypeFont#getWeight()::: true type font get weight:::return->super->getWeight
TrueTypeFont#setStyle(ByteBuffer)::: true type font set style:::if->return->if->os_2Table->capacity->os_2Table->getChar->os_2Table->getChar->if->os_2Table->capacity->super->setStyle->return->fsSelection->os_2Table->getChar->italic->bold->regular->if->super->setStyle->return->else->if->super->setStyle->return->switch->break->if->platName->endsWith->else->break
TrueTypeFont#setStrikethroughMetrics(ByteBuffer, int)::: true type font set strikethrough metrics:::if->os_2Table->capacity->return->sb->os_2Table->asShortBuffer->sb->get->sb->get
TrueTypeFont#setUnderlineMetrics(ByteBuffer, int)::: true type font set underline metrics:::if->postTable->capacity->return->sb->postTable->asShortBuffer->sb->get->sb->get
TrueTypeFont#getStyleMetrics(float, float[], int)::: true type font get style metrics:::if->head_Table->getTableBuffer->upem->if->head_Table->capacity->sb->head_Table->asShortBuffer->sb->get->if->os2_Table->getTableBuffer->setStrikethroughMetrics->post_Table->getTableBuffer->setUnderlineMetrics
TrueTypeFont#makeString(byte[], int, short, short)::: true type font make string:::if->if->oldbytes->oldlen->new->byteArr->for->i->charset->switch->break->break->break->break->break->break->break->break->break->try->return->new->String->catch->if->FontUtilities->isLogging->FontUtilities->getLogger->warning->return->new->String->return->finally
TrueTypeFont#initNames()::: true type font init names:::name->new->byteArr->buffer->getTableBuffer->if->sbuffer->buffer->asShortBuffer->sbuffer->get->numRecords->sbuffer->get->stringPtr->sbuffer->get->getStartupLocale->nameLocaleID->getLCIDFromLocale->getLanguageCompatibleLCIDsFromLocale->for->i->if->if
TrueTypeFont#lookupName(short, int)::: true type font lookup name:::foundName->name->new->byteArr->buffer->getTableBuffer->if->sbuffer->buffer->asShortBuffer->sbuffer->get->numRecords->sbuffer->get->stringPtr->sbuffer->get->for->i->return
TrueTypeFont#getFontCount()::: true type font get font count:::return
TrueTypeFont#getScaler()::: true type font get scaler:::if->FontScaler->getScaler->return
TrueTypeFont#getPostscriptName()::: true type font get postscript name:::name->lookupName->if->return->else->return
TrueTypeFont#getFontName(Locale)::: true type font get font name:::if->return->else->if->locale->equals->return->else->localeID->getLCIDFromLocale->name->lookupName->if->return->else->return
TrueTypeFont#addLCIDMapEntry(Map, String, short)::: true type font add map entry:::map->Short->valueOf->put
TrueTypeFont#createLCIDMap()::: true type font create map:::if->return->map->new->HashMap<String,Short>->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry->addLCIDMapEntry
TrueTypeFont#getLCIDFromLocale(Locale)::: true type font get from locale:::if->locale->equals->return->if->createLCIDMap->key->locale->toString->while->equals->lcidObject->lcidMap->get->if->return->lcidObject->shortValue->pos->key->lastIndexOf->if->return->key->substring->return
TrueTypeFont#getFamilyName(Locale)::: true type font get family name:::if->return->else->if->locale->equals->return->else->localeID->getLCIDFromLocale->name->lookupName->if->return->else->return
TrueTypeFont#getMapper()::: true type font get mapper:::if->new->TrueTypeGlyphMapper->return
TrueTypeFont#initAllNames(int, HashSet)::: true type font init all names:::name->new->byteArr->buffer->getTableBuffer->if->sbuffer->buffer->asShortBuffer->sbuffer->get->numRecords->sbuffer->get->stringPtr->sbuffer->get->for->i
TrueTypeFont#getAllFamilyNames()::: true type font get all family names:::aSet->new->HashSet<>->try->initAllNames->catch->finally->return->aSet->new->StringArr->toArray
TrueTypeFont#getAllFullNames()::: true type font get all full names:::aSet->new->HashSet<>->try->initAllNames->catch->finally->return->aSet->new->StringArr->toArray
TrueTypeFont#getGlyphPoint(long, int, int)::: true type font get glyph point:::try->return->getScaler->getGlyphPoint->catch->return->finally
TrueTypeFont#getGaspTable()::: true type font get gasp table:::if->return->buffer->getTableBuffer->if->return->new->charArr->cbuffer->buffer->asCharBuffer->format->cbuffer->get->if->return->new->charArr->numRanges->cbuffer->get->if->getTableSize->return->new->charArr->new->charArr->cbuffer->get->return
TrueTypeFont#useAAForPtSize(int)::: true type font use for pt size:::gasp->getGaspTable->if->for->i->return->if->return->else->return
TrueTypeFont#hasSupplementaryChars()::: true type font has supplementary chars:::return->getMapper->hasSupplementaryChars
TrueTypeFont#toString()::: true type font to string:::return->getPublicFileName
TrueTypeFont#isLanguageCompatible(short)::: true type font is language compatible:::foreach->if->return->return
TrueTypeFont#getLanguageCompatibleLCIDsFromLocale(Locale)::: true type font get language compatible ds from locale:::if->createLCIDMap->createLCIDLanguageCompatibilityMap->language->locale->getLanguage->result->lcidLanguageCompatibilityMap->get->return
TrueTypeFont#createLCIDLanguageCompatibilityMap()::: true type font create language compatibility map:::map->new->HashMap<>->sarr->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put->new->shortArr->map->put
TrueTypeGlyphMapper#getNumGlyphs()::: true type glyph mapper get num glyphs:::return
TrueTypeGlyphMapper#getGlyphFromCMAP(int)::: true type glyph mapper get glyph from p:::try->glyphCode->cmap->getGlyph->if->return->else->if->FontUtilities->isLogging->FontUtilities->getLogger->Integer->toHexString->Integer->toHexString->warning->return->catch->handleBadCMAP->return->finally
TrueTypeGlyphMapper#getGlyphFromCMAP(int, int)::: true type glyph mapper get glyph from p:::if->return->getGlyphFromCMAP->try->glyphCode->cmap->getVariationGlyph->if->return->else->if->FontUtilities->isLogging->FontUtilities->getLogger->Integer->toHexString->Integer->toHexString->Integer->toHexString->warning->return->catch->handleBadCMAP->return->finally
TrueTypeGlyphMapper#handleBadCMAP()::: true type glyph mapper handle bad p:::if->FontUtilities->isLogging->FontUtilities->getLogger->severe->SunFontManager->getInstance->deRegisterBadFont
TrueTypeGlyphMapper#remapJAChar(char)::: true type glyph mapper remap char:::return
TrueTypeGlyphMapper#remapJAIntChar(int)::: true type glyph mapper remap int char:::return
TrueTypeGlyphMapper#charToGlyph(char)::: true type glyph mapper char to glyph:::if->remapJAChar->glyph->getGlyphFromCMAP->if->font->checkUseNatives->return
TrueTypeGlyphMapper#charToGlyph(int)::: true type glyph mapper char to glyph:::if->remapJAIntChar->glyph->getGlyphFromCMAP->if->font->checkUseNatives->return
TrueTypeGlyphMapper#charToVariationGlyph(int, int)::: true type glyph mapper char to variation glyph:::if->remapJAIntChar->glyph->getGlyphFromCMAP->if->font->checkUseNatives->return
TrueTypeGlyphMapper#charsToGlyphs(int, int[], int[])::: true type glyph mapper chars to glyphs:::for->i
TrueTypeGlyphMapper#charsToGlyphs(int, char[], int[])::: true type glyph mapper chars to glyphs:::for->i
TrueTypeGlyphMapper#charsToGlyphsNS(int, char[], int[])::: true type glyph mapper chars to glyphs s:::for->i->return
TrueTypeGlyphMapper#hasSupplementaryChars()::: true type glyph mapper has supplementary chars:::return
Type1Font.T1DisposerRecord#dispose()::: t1 disposer record dispose:::new->java.security.PrivilegedAction<Object>->doPrivileged
Type1Font#getBuffer()::: type1 font get buffer:::mapBuf->bufferRef->get->if->try->raf->new->java.security.PrivilegedAction<Object>->doPrivileged->fc->raf->getChannel->fc->size->fc->map->mapBuf->position->new->WeakReference<>->fc->close->catch->throw->e->toString->new->FontFormatException->Thread->interrupted->return->getBuffer->throw->e->toString->new->FontFormatException->finally->return
Type1Font#close()::: type1 font close:::
Type1Font#readFile(ByteBuffer)::: type1 font read file:::raf->fc->try->new->java.security.PrivilegedAction<Object>->doPrivileged->raf->getChannel->while->buffer->remaining->fc->read->catch->try->if->raf->close->catch->finally->Thread->interrupted->readFile->finally->if->try->raf->close->catch->finally
Type1Font#readBlock(int, int)::: type1 font read block:::mappedBuf->try->getBuffer->if->mappedBuf->position->return->mappedBuf->slice->catch->return->finally
Type1Font#verify()::: type1 font verify:::bb->getBuffer->if->bb->capacity->throw->new->FontFormatException->val->bb->get->if->bb->get->verifyPFB->bb->position->else->verifyPFA->bb->position->initNames->if->throw->new->FontFormatException->setStyle
Type1Font#getFileSize()::: type1 font get file size:::if->try->getBuffer->catch->finally->return
Type1Font#verifyPFA(ByteBuffer)::: type1 font verify a:::if->bb->getShort->throw->new->FontFormatException
Type1Font#verifyPFB(ByteBuffer)::: type1 font verify b:::pos->while->try->segType->bb->getShort->if->bb->order->segLen->bb->getInt->bb->order->if->throw->new->FontFormatException->else->if->return->else->throw->new->FontFormatException->catch->throw->bue->toString->new->FontFormatException->throw->e->toString->new->FontFormatException->finally
Type1Font#initNames(ByteBuffer)::: type1 font init names:::eof->fontType->try->while->tokenType->nextTokenType->if->pos->bb->position->if->bb->get->s->getSimpleToken->if->equals->if->nextTokenType->getString->else->if->equals->if->nextTokenType->getString->else->if->equals->if->nextTokenType->getSimpleToken->else->if->equals->token->getSimpleToken->if->getSimpleToken->equals->else->while->bb->get->else->if->catch->throw->e->toString->new->FontFormatException->finally->if->equals->throw->new->FontFormatException->if->bb->position->if->bb->getShort->bb->position->formatType->getSimpleToken->if->formatType->startsWith->formatType->startsWith->throw->new->FontFormatException->getSimpleToken->if->if->fullName2FamilyName->else->if->else->psName2FullName->psName2FamilyName
Type1Font#fullName2FamilyName(String)::: type1 font full name2 family name:::res->token->len->start->end->name->length->while->while->name->charAt->if->name->substring->isStyleToken->return->name->substring->return
Type1Font#expandAbbreviation(String)::: type1 font expand abbreviation:::if->styleAbbreviationsMapping->containsKey->return->styleAbbreviationsMapping->get->return
Type1Font#isStyleToken(String)::: type1 font is style token:::return->styleNameTokes->contains
Type1Font#psName2FullName(String)::: type1 font ps name2 full name:::res->pos->name->indexOf->if->name->substring->expandName->name->substring->expandName->else->expandName->return
Type1Font#psName2FamilyName(String)::: type1 font ps name2 family name:::tmp->if->tmp->indexOf->tmp->tmp->indexOf->substring->return->expandName
Type1Font#nextCapitalLetter(String, int)::: type1 font next capital letter:::for->s->length->return
Type1Font#expandName(String, boolean)::: type1 font expand name:::res->s->length->new->StringBuilder->start->end->while->s->length->nextCapitalLetter->if->s->length->if->res->append->if->res->s->substring->expandAbbreviation->append->else->res->s->substring->append->return->res->toString
Type1Font#skip(ByteBuffer)::: type1 font skip:::b->bb->get->while->while->bb->get->if->break->while->bb->get->return
Type1Font#nextTokenType(ByteBuffer)::: type1 font next token type:::try->b->skip->while->if->return->else->if->return->else->if->skip->else->bb->get->catch->return->finally
Type1Font#getSimpleToken(ByteBuffer)::: type1 font get simple token:::while->bb->get->pos1->bb->position->while->bb->get->pos2->bb->position->nameBytes->new->byteArr->bb->position->bb->get->try->return->new->String->catch->return->new->String->finally
Type1Font#getString(ByteBuffer)::: type1 font get string:::pos1->bb->position->while->bb->get->pos2->bb->position->nameBytes->new->byteArr->bb->position->bb->get->try->return->new->String->catch->return->new->String->finally
Type1Font#getPostscriptName()::: type1 font get postscript name:::return
Type1Font#getScaler()::: type1 font get scaler:::if->FontScaler->getScaler->return
Type1Font#getMapper()::: type1 font get mapper:::if->new->Type1GlyphMapper->return
Type1Font#getNumGlyphs()::: type1 font get num glyphs:::try->return->getScaler->getNumGlyphs->catch->FontScaler->getNullScaler->return->getNumGlyphs->finally
Type1Font#getMissingGlyphCode()::: type1 font get missing glyph code:::try->return->getScaler->getMissingGlyphCode->catch->FontScaler->getNullScaler->return->getMissingGlyphCode->finally
Type1Font#getGlyphCode(char)::: type1 font get glyph code:::try->return->getScaler->getGlyphCode->catch->FontScaler->getNullScaler->return->getGlyphCode->finally
Type1Font#toString()::: type1 font to string:::return->getPublicFileName
Type1GlyphMapper#initMapper()::: type1 glyph mapper init mapper:::font->getScaler->try->scaler->getMissingGlyphCode->catch->FontScaler->getNullScaler->try->scaler->getMissingGlyphCode->catch->finally->finally
Type1GlyphMapper#getNumGlyphs()::: type1 glyph mapper get num glyphs:::try->return->scaler->getNumGlyphs->catch->FontScaler->getNullScaler->return->getNumGlyphs->finally
Type1GlyphMapper#getMissingGlyphCode()::: type1 glyph mapper get missing glyph code:::return
Type1GlyphMapper#canDisplay(char)::: type1 glyph mapper can display:::try->return->scaler->getGlyphCode->catch->FontScaler->getNullScaler->return->canDisplay->finally
Type1GlyphMapper#charToGlyph(char)::: type1 glyph mapper char to glyph:::try->return->scaler->getGlyphCode->catch->FontScaler->getNullScaler->return->charToGlyph->finally
Type1GlyphMapper#charToGlyph(int)::: type1 glyph mapper char to glyph:::if->return->else->try->return->scaler->getGlyphCode->catch->FontScaler->getNullScaler->return->charToGlyph->finally
Type1GlyphMapper#charsToGlyphs(int, char[], int[])::: type1 glyph mapper chars to glyphs:::for->i
Type1GlyphMapper#charsToGlyphs(int, int[], int[])::: type1 glyph mapper chars to glyphs:::for->i
Type1GlyphMapper#charsToGlyphsNS(int, char[], int[])::: type1 glyph mapper chars to glyphs s:::for->i->return
Underline#drawUnderline(Graphics2D, float, float, float, float):::Draws the underline into g2d:::
Underline#getLowerDrawLimit(float):::Returns the bottom of the bounding rectangle for this underline.:::
Underline#getUnderlineShape(float, float, float, float):::Returns a Shape representing the underline:::
Underline.StandardUnderline#createStroke(float)::: standard underline create stroke:::if->return->new->BasicStroke->else->return->new->BasicStroke
Underline.StandardUnderline#getLineThickness(float)::: standard underline get line thickness:::if->return->else->return
Underline.StandardUnderline#getStroke(float)::: standard underline get stroke:::lineThickness->getLineThickness->stroke->if->stroke->getLineWidth->createStroke->return
Underline.StandardUnderline#drawUnderline(Graphics2D, float, float, float, float)::: standard underline draw underline:::saveStroke->g2d->getStroke->g2d->getStroke->setStroke->g2d->new->Line2D.Float->draw->g2d->setStroke
Underline.StandardUnderline#getLowerDrawLimit(float)::: standard underline get lower draw limit:::return->getLineThickness
Underline.StandardUnderline#getUnderlineShape(float, float, float, float)::: standard underline get underline shape:::ulStroke->getStroke->line->new->Line2D.Float->return->ulStroke->createStrokedShape
Underline.IMGrayUnderline#drawUnderline(Graphics2D, float, float, float, float)::: gray underline draw underline:::saveStroke->g2d->getStroke->g2d->setStroke->drawLine->new->Line2D.Float->g2d->draw->g2d->draw->g2d->setStroke
Underline.IMGrayUnderline#getLowerDrawLimit(float)::: gray underline get lower draw limit:::return
Underline.IMGrayUnderline#getUnderlineShape(float, float, float, float)::: gray underline get underline shape:::gp->new->GeneralPath->line->new->Line2D.Float->gp->stroke->createStrokedShape->append->gp->stroke->createStrokedShape->append->return
Underline#getUnderline(Object):::Return the Underline for the given value of TextAttribute.INPUT_METHOD_UNDERLINE or TextAttribute.UNDERLINE:::if->return->return->UNDERLINES->get
Underline#getUnderline(int)::: underline get underline:::return

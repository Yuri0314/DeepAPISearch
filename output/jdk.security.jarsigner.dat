JarSigner.Builder#digestAlgorithm(String):::Sets the digest algorithm:::MessageDigest->Objects->requireNonNull->getInstance->new->StringArr->return
JarSigner.Builder#digestAlgorithm(String, Provider):::Sets the digest algorithm from the specified provider:::MessageDigest->Objects->requireNonNull->Objects->requireNonNull->getInstance->new->StringArr->return
JarSigner.Builder#signatureAlgorithm(String):::Sets the signature algorithm:::Signature->Objects->requireNonNull->getInstance->AlgorithmId->privateKey->getAlgorithm->checkKeyAndSigAlgMatch->return
JarSigner.Builder#signatureAlgorithm(String, Provider):::Sets the signature algorithm from the specified provider:::Signature->Objects->requireNonNull->Objects->requireNonNull->getInstance->AlgorithmId->privateKey->getAlgorithm->checkKeyAndSigAlgMatch->return
JarSigner.Builder#tsa(URI):::Sets the URI of the Time Stamping Authority (TSA).:::Objects->requireNonNull->return
JarSigner.Builder#signerName(String):::Sets the signer name:::if->name->isEmpty->name->length->throw->new->IllegalArgumentException->name->toUpperCase->for->j->name->length->return
JarSigner.Builder#eventHandler(BiConsumer):::Sets en event handler that will be triggered when a JarEntry is to be added, signed, or updated during the signing process:::Objects->requireNonNull->return
JarSigner.Builder#setProperty(String, String):::Sets an additional implementation-specific property indicated by the specified key.:::Objects->requireNonNull->Objects->requireNonNull->switch->key->toLowerCase->try->MessageDigest->getInstance->catch->throw->new->IllegalArgumentException->finally->break->break->switch->break->break->throw->new->IllegalArgumentException->break->switch->break->break->throw->new->IllegalArgumentException->break->break->break->throw->new->UnsupportedOperationException->return
JarSigner.Builder#getDefaultDigestAlgorithm():::Gets the default digest algorithm.:::return
JarSigner.Builder#getDefaultSignatureAlgorithm(PrivateKey):::Gets the default signature algorithm for a private key:::return->AlgorithmId->Objects->requireNonNull->getDefaultSigAlgForKey
JarSigner.Builder#build():::Builds a JarSigner object from the parameters set by the setter methods:::return->new->JarSigner
JarSigner#sign(ZipFile, OutputStream):::Signs a file into an OutputStream:::try->Objects->requireNonNull->Objects->requireNonNull->sign0->catch->throw->new->JarSignerException->throw->new->JarSignerException->throw->new->JarSignerException->throw->new->JarSignerException->finally
JarSigner#getDigestAlgorithm():::Returns the digest algorithm for this JarSigner:::return
JarSigner#getSignatureAlgorithm():::Returns the signature algorithm for this JarSigner:::return
JarSigner#getTsa():::Returns the URI of the Time Stamping Authority (TSA).:::return
JarSigner#getSignerName():::Returns the signer name of this JarSigner:::return
JarSigner#getProperty(String):::Returns the value of an additional implementation-specific property indicated by the specified key:::Objects->requireNonNull->switch->key->toLowerCase->return->return->return->Boolean->toString->return->Boolean->toString->return->return->throw->new->UnsupportedOperationException
JarSigner#sign0(ZipFile, OutputStream)::: jar signer sign0:::digests->try->new->MessageDigestArr->for->i->catch->throw->new->AssertionError->finally->ps->new->PrintStream->zos->new->ZipOutputStream->manifest->new->Manifest->mfEntries->manifest->getEntries->oldAttr->mfModified->mfCreated->mfRawBytes->mfFile->if->getManifestFile->zipFile->getInputStream->readAllBytes->manifest->new->ByteArrayInputStream->read->manifest->getMainAttributes->clone->else->mattr->manifest->getMainAttributes->mattr->toString->putValue->javaVendor->System->getProperty->jdkVersion->System->getProperty->mattr->putValue->new->ZipEntry->mfFiles->new->Vector<>->wasSigned->for->enum_->zipFile->entries->enum_->hasMoreElements->if->baos->new->ByteArrayOutputStream->manifest->write->if->newBytes->baos->toByteArray->if->oldAttr->manifest->getMainAttributes->equals->newPos->findHeaderEnd->oldPos->findHeaderEnd->if->System->arraycopy->else->lastBytes->new->byteArr->System->arraycopy->System->arraycopy->else->baos->toByteArray->if->new->ZipEntry->if->if->handler->mfFile->getName->accept->else->if->handler->mfFile->getName->accept->zos->putNextEntry->zos->write->manDig->new->ManifestDigester->sf->new->SignatureFile->block->signer->if->Signature->getInstance->else->Signature->getInstance->signer->initSign->baos->new->ByteArrayOutputStream->sf->write->content->baos->toByteArray->signer->update->signature->signer->sign->signingMechanism->if->loadSigningMechanism->params->signer->getAlgorithm->new->JarSignerParameters->sf->generateBlock->sfFilename->sf->getMetaName->bkFilename->sf->getBlockName->sfFile->new->ZipEntry->bkFile->new->ZipEntry->time->System->currentTimeMillis->sfFile->setTime->bkFile->setTime->zos->putNextEntry->sf->write->if->if->zipFile->getEntry->handler->accept->else->handler->accept->zos->putNextEntry->zos->write->if->if->zipFile->getEntry->handler->accept->else->handler->accept->for->i->mfFiles->size->for->enum_->zipFile->entries->enum_->hasMoreElements->zipFile->close->zos->close
JarSigner#writeEntry(ZipFile, ZipOutputStream, ZipEntry)::: jar signer write entry:::ze2->ze->getName->new->ZipEntry->ze2->ze->getMethod->setMethod->ze2->ze->getTime->setTime->ze2->ze->getComment->setComment->ze2->ze->getExtra->setExtra->if->ze->getMethod->ze2->ze->getSize->setSize->ze2->ze->getCrc->setCrc->os->putNextEntry->writeBytes
JarSigner#writeBytes(ZipFile, ZipEntry, ZipOutputStream)::: jar signer write bytes:::try->is->zf->getInputStream->is->transferTo->catch->finally
JarSigner#updateDigests(ZipEntry, ZipFile, MessageDigest[], Manifest)::: jar signer update digests:::update->attrs->mf->ze->getName->getAttributes->base64Digests->getDigests->for->i->return
JarSigner#getDigestAttributes(ZipEntry, ZipFile, MessageDigest[])::: jar signer get digest attributes:::base64Digests->getDigests->attrs->new->Attributes->for->i->return
JarSigner#getManifestFile(ZipFile)::: jar signer get manifest file:::ze->zf->getEntry->if->enum_->zf->entries->while->enum_->hasMoreElements->enum_->nextElement->if->ze->getName->equalsIgnoreCase->return
JarSigner#getDigests(ZipEntry, ZipFile, MessageDigest[])::: jar signer get digests:::n->i->try->is->zf->getInputStream->left->ze->getSize->buffer->new->byteArr->while->is->read->for->catch->finally->base64Digests->new->StringArr->for->return
JarSigner#findHeaderEnd(byte[])::: jar signer find header end:::newline->len->for->i->return
JarSigner#loadSigningMechanism(String, String)::: jar signer load signing mechanism:::cpString->PathList->System->getProperty->appendPath->PathList->System->getProperty->appendPath->PathList->appendPath->urls->PathList->pathToURLs->appClassLoader->new->URLClassLoader->try->signerClass->appClassLoader->loadClass->signer->signerClass->newInstance->return->catch->throw->new->IllegalArgumentException->finally
JarSigner.SignatureFile#write(OutputStream)::: signature file write:::sf->write
JarSigner.SignatureFile#getMetaName()::: signature file get meta name:::return
JarSigner.SignatureFile#getBlockName(PrivateKey)::: signature file get block name:::keyAlgorithm->privateKey->getAlgorithm->return
JarSigner.SignatureFile#generateBlock(ContentSignerParameters, boolean, ContentSigner)::: signature file generate block:::if->new->TimestampedSigner->return->signingMechanism->params->getTimestampingAuthority->params->getTimestampingAuthorityCertificate->generateSignedData
JarSigner.JarSignerParameters#getCommandLine()::: jar signer parameters get command line:::return
JarSigner.JarSignerParameters#getTimestampingAuthority()::: jar signer parameters get timestamping authority:::return
JarSigner.JarSignerParameters#getTimestampingAuthorityCertificate()::: jar signer parameters get timestamping authority certificate:::return
JarSigner.JarSignerParameters#getTSAPolicyID()::: jar signer parameters get policy d:::return
JarSigner.JarSignerParameters#getTSADigestAlg()::: jar signer parameters get digest alg:::return
JarSigner.JarSignerParameters#getSignature()::: jar signer parameters get signature:::return
JarSigner.JarSignerParameters#getSignatureAlgorithm()::: jar signer parameters get signature algorithm:::return
JarSigner.JarSignerParameters#getSignerCertificateChain()::: jar signer parameters get signer certificate chain:::return
JarSigner.JarSignerParameters#getContent()::: jar signer parameters get content:::return
JarSigner.JarSignerParameters#getSource()::: jar signer parameters get source:::return

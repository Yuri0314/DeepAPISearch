AppletInitializer#initialize(Applet, BeanContext)::: If passed to the appropriate variant of java.beans.Beans.instantiate this method will be called in order to associate the newly instantiated Applet (JavaBean) with its AppletContext, AppletStub, and Container:::
AppletInitializer#activate(Applet)::: Activate, and/or mark Applet active:::
BeanDescriptor#getBeanClass():::Gets the bean's Class object.:::return->get
BeanDescriptor#getCustomizerClass():::Gets the Class object for the bean's customizer.:::return->get
BeanInfo#getBeanDescriptor():::Returns the bean descriptor that provides overall information about the bean, such as its display name or its customizer.:::
BeanInfo#getEventSetDescriptors():::Returns the event descriptors of the bean that define the types of events fired by this bean.:::
BeanInfo#getDefaultEventIndex():::A bean may have a default event typically applied when this bean is used.:::
BeanInfo#getPropertyDescriptors():::Returns descriptors for all properties of the bean:::
BeanInfo#getDefaultPropertyIndex():::A bean may have a default property commonly updated when this bean is customized.:::
BeanInfo#getMethodDescriptors():::Returns the method descriptors of the bean that define the externally visible methods supported by this bean.:::
BeanInfo#getAdditionalBeanInfo():::This method enables the current BeanInfo object to return an arbitrary collection of other BeanInfo objects that provide additional information about the current bean:::
BeanInfo#getIcon(int):::Returns an image that can be used to represent the bean in toolboxes or toolbars:::
Beans#instantiate(ClassLoader, String, BeanContext)::: Instantiate a JavaBean:::return->Beans->instantiate
Beans#instantiate(ClassLoader, String, BeanContext, AppletInitializer):::Instantiate a bean:::ins->oins->result->serialized->serex->if->try->ClassLoader->getSystemClassLoader->catch->finally->serName->beanName->replace->concat->if->ClassLoader->getSystemResourceAsStream->else->cls->getResourceAsStream->if->try->if->new->ObjectInputStream->else->new->ObjectInputStreamWithLoader->oins->readObject->oins->close->catch->ins->close->ins->close->throw->finally->if->cl->try->ClassFinder->findClass->catch->if->throw->throw->finally->if->Modifier->cl->getModifiers->isPublic->throw->new->ClassNotFoundException->try->cl->newInstance->catch->throw->new->ClassNotFoundException->finally->if->stub->if->applet->needDummies->if->resourceName->if->beanName->replace->concat->else->beanName->replace->concat->objectUrl->codeBase->docBase->if->ClassLoader->getSystemResource->else->cls->getResource->if->s->objectUrl->toExternalForm->if->s->endsWith->ix->s->length->resourceName->length->s->substring->new->URL->s->lastIndexOf->if->s->substring->new->URL->context->new->BeansAppletContext->new->BeansAppletStub->applet->setStub->else->initializer->initialize->if->unsafeBeanContextAdd->if->applet->setSize->applet->init->if->else->initializer->activate->else->if->unsafeBeanContextAdd->return
Beans#getInstanceOf(Object, Class):::From a given bean, obtain an object representing a specified type view of that source object:::return
Beans#isInstanceOf(Object, Class):::Check if a bean can be viewed as a given target type:::return->Introspector->bean->getClass->isSubclass
Beans#isDesignTime():::Test if we are in design-mode.:::return->ThreadGroupContext->getContext->isDesignTime
Beans#isGuiAvailable():::Determines whether beans can assume a GUI is available.:::return->ThreadGroupContext->getContext->isGuiAvailable
ObjectInputStreamWithLoader#resolveClass(ObjectStreamClass):::Use the given ClassLoader rather than using the system class:::cname->classDesc->getName->return->ClassFinder->resolveClass
ChangeListenerMap#newArray(int):::Creates an array of listeners:::
ChangeListenerMap#newProxy(String, L):::Creates a proxy listener for the specified property.:::
ChangeListenerMap#add(String, L):::Adds a listener to the list of listeners for the specified property:::if->new->HashMap<>->array->get->size->clone->newArray->if->System->arraycopy->put
ChangeListenerMap#remove(String, L):::Removes a listener from the list of listeners for the specified property:::if->array->get->if->for->i
ChangeListenerMap#get(String):::Returns the list of listeners for the specified property.:::return->get
ChangeListenerMap#set(String, L[]):::Sets new list of listeners for the specified property.:::if->if->new->HashMap<>->put->else->if->remove->if->isEmpty
ChangeListenerMap#getListeners():::Returns all listeners in the map.:::if->return->newArray->list->new->ArrayList<>->listeners->get->if->foreach->list->add->foreach->entrySet->name->entry->getKey->if->foreach->entry->getValue->list->newProxy->add->return->list->list->size->newArray->toArray
ChangeListenerMap#getListeners(String):::Returns listeners that have been associated with the named property.:::if->listeners->get->if->return->listeners->clone->return->newArray
ChangeListenerMap#hasListeners(String):::Indicates whether the map contains at least one listener to be notified.:::if->return->array->get->return->get
ChangeListenerMap#getEntries():::Returns a set of entries from the map:::return->entrySet->Collections->emptySet
ChangeListenerMap#extract(L):::Extracts a real listener from the proxy listener:::
Customizer#setObject(Object):::Set the object to be customized:::
Customizer#addPropertyChangeListener(PropertyChangeListener):::Register a listener for the PropertyChange event:::
Customizer#removePropertyChangeListener(PropertyChangeListener):::Remove a listener for the PropertyChange event.:::
DefaultPersistenceDelegate#mutatesTo(Object, Object):::If the number of arguments in the specified constructor is non-zero and the class of oldInstance explicitly declares an "equals" method this method returns the value of oldInstance.equals(newInstance):::return->definesEquals->super->mutatesTo->oldInstance->equals
DefaultPersistenceDelegate#instantiate(Object, Encoder):::This default implementation of the instantiate method returns an expression containing the predefined method name "new" which denotes a call to a constructor with the arguments as specified in the DefaultPersistenceDelegate's constructor.:::nArgs->type->oldInstance->getClass->constructorArgs->new->ObjectArr->for->i->return->oldInstance->getClass->new->Expression
DefaultPersistenceDelegate#initialize(Class, Object, Object, Encoder):::This default implementation of the initialize method assumes all state held in objects of this type is exposed via the matching pairs of "setter" and "getter" methods in the order they are returned by the Introspector:::super->initialize->if->oldInstance->getClass->initBean
Encoder#writeObject(Object):::Write the specified object to the output stream:::if->return->info->o->getClass->getPersistenceDelegate->info->writeObject
Encoder#setExceptionListener(ExceptionListener):::Sets the exception handler for this stream to exceptionListener:::
Encoder#getExceptionListener():::Gets the exception handler for this stream.:::return
Encoder#getPersistenceDelegate(Class):::Returns the persistence delegate for the given type:::pd->find->if->MetaData->getPersistenceDelegate->if->register->return
Encoder#setPersistenceDelegate(Class, PersistenceDelegate):::Associates the specified persistence delegate with the given type.:::register
Encoder#remove(Object):::Removes the entry for this instance, returning the old entry.:::exp->bindings->remove->return->getValue
Encoder#get(Object):::Returns a tentative value for oldInstance in the environment created by this stream:::if->oldInstance->getClass->return->exp->bindings->get->return->getValue
Encoder#writeStatement(Statement):::Writes statement oldStm to the stream:::newStm->cloneStatement->if->oldStm->getTarget->try->newStm->execute->catch->getExceptionListener->new->Exception->exceptionThrown->finally
Encoder#writeExpression(Expression):::The implementation first checks to see if an expression with this value has already been written:::oldValue->getValue->if->get->return->bindings->cloneStatement->put->writeObject
EventHandler#getTarget():::Returns the object to which this event handler will send a message.:::return
EventHandler#getAction():::Returns the name of the target's writable property that this event handler will set, or the name of the method that this event handler will invoke on the target.:::return
EventHandler#getEventPropertyName():::Returns the property of the event that should be used in the action applied to the target.:::return
EventHandler#getListenerMethodName():::Returns the name of the method that will trigger the action:::return
EventHandler#invoke(Object, Method, Object[]):::Extract the appropriate property value from the event and pass it to the action associated with this EventHandler.:::acc->if->System->getSecurityManager->throw->new->SecurityException->return->AccessController->new->PrivilegedAction<Object>->doPrivileged
EventHandler#create(Class, Object, String):::Creates an implementation of listenerInterface in which all of the methods in the listener interface apply the handler's action to the target:::return->create
EventHandler#create(Class, Object, String, String):::    /** Creates an implementation of listenerInterface in which all of the methods pass the value of the event expression, eventPropertyName, to the final method in the statement, action, which is applied to the target:::return->create
EventHandler#create(Class, Object, String, String, String):::Creates an implementation of listenerInterface in which the method named listenerMethodName passes the value of the event expression, eventPropertyName, to the final method in the statement, action, which is applied to the target:::handler->new->EventHandler->if->throw->new->NullPointerException->loader->getClassLoader->interfaces->return->AccessController->new->PrivilegedAction<T>->doPrivileged
EventSetDescriptor#getListenerType():::Gets the Class object for the target interface.:::return->get
EventSetDescriptor#getListenerMethods():::Gets the methods of the target listener interface.:::methods->getListenerMethods0->if->if->new->MethodArr->for->i->setListenerMethods->return
EventSetDescriptor#getListenerMethodDescriptors():::Gets the MethodDescriptors of the target listener interface.:::return->clone
EventSetDescriptor#getAddListenerMethod():::Gets the method used to add event listeners.:::return->getMethod
EventSetDescriptor#getRemoveListenerMethod():::Gets the method used to remove event listeners.:::return->getMethod
EventSetDescriptor#getGetListenerMethod():::Gets the method used to access the registered event listeners.:::return->getMethod
EventSetDescriptor#setUnicast(boolean):::Mark an event set as unicast (or not).:::
EventSetDescriptor#isUnicast():::Normally event sources are multicast:::return
EventSetDescriptor#setInDefaultEventSet(boolean):::Marks an event set as being in the "default" set (or not):::
EventSetDescriptor#isInDefaultEventSet():::Reports if an event set is in the "default" set.:::return
ExceptionListener#exceptionThrown(Exception):::This method is called when a recoverable exception has been caught.:::
Expression#execute():::If the invoked method completes normally, the value it returns is copied in the {@code value property:::invoke->setValue
Expression#getValue():::If the value property of this instance is not already set, this method dynamically finds the method with the specified methodName on this target with these arguments and calls it:::if->invoke->setValue->return
Expression#setValue(Object):::Sets the value of this expression to value:::
Expression#toString():::Prints the value of this expression using a Java-style syntax.:::return->instanceName->super->toString
FeatureDescriptor#getName():::Gets the programmatic name of this feature.:::return
FeatureDescriptor#setName(String):::Sets the programmatic name of this feature.:::
FeatureDescriptor#getDisplayName():::Gets the localized display name of this feature.:::if->return->getName->return
FeatureDescriptor#setDisplayName(String):::Sets the localized display name of this feature.:::
FeatureDescriptor#isExpert():::The "expert" flag is used to distinguish between those features that are intended for expert users from those that are intended for normal users.:::return
FeatureDescriptor#setExpert(boolean):::The "expert" flag is used to distinguish between features that are intended for expert users from those that are intended for normal users.:::
FeatureDescriptor#isHidden():::The "hidden" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans.:::return
FeatureDescriptor#setHidden(boolean):::The "hidden" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans.:::
FeatureDescriptor#isPreferred():::The "preferred" flag is used to identify features that are particularly important for presenting to humans.:::return
FeatureDescriptor#setPreferred(boolean):::The "preferred" flag is used to identify features that are particularly important for presenting to humans.:::
FeatureDescriptor#getShortDescription():::Gets the short description of this feature.:::if->return->getDisplayName->return
FeatureDescriptor#setShortDescription(String):::You can associate a short descriptive string with a feature:::
FeatureDescriptor#setValue(String, Object):::Associate a named attribute with this feature.:::getTable->put
FeatureDescriptor#getValue(String):::Retrieve a named attribute with this feature.:::return->get
FeatureDescriptor#attributeNames():::Gets an enumeration of the locale-independent names of this feature.:::return->getTable->keys
FeatureDescriptor#setTransient(Transient):::Sets the "transient" attribute according to the annotation:::if->getValue->annotation->value->setValue
FeatureDescriptor#isTransient():::Indicates whether the feature is transient.:::value->getValue->return
FeatureDescriptor#getSoftReference(T):::Creates a new soft reference that refers to the given object.:::return->new->SoftReference<>
FeatureDescriptor#getWeakReference(T):::Creates a new weak reference that refers to the given object.:::return->new->WeakReference<>
FeatureDescriptor#getReturnType(Class, Method):::Resolves the return type of the method.:::if->method->getDeclaringClass->return->TypeResolver->TypeResolver->method->getGenericReturnType->resolveInClass->erase
FeatureDescriptor#getParameterTypes(Class, Method):::Resolves the parameter types of the method.:::if->method->getDeclaringClass->return->TypeResolver->TypeResolver->method->getGenericParameterTypes->resolveInClass->erase
FeatureDescriptor#toString():::Returns a string representation of the object.:::sb->getClass->getName->new->StringBuilder->sb->append->append->appendTo->appendTo->appendTo->appendTo->appendTo->if->isEmpty->sb->append->foreach->entrySet->sb->entry->getKey->append->append->entry->getValue->append->append->sb->sb->length->setLength->sb->append->appendTo->return->sb->append->toString
IndexedPropertyChangeEvent#getIndex():::Gets the index of the property that was changed.:::return
IndexedPropertyDescriptor#getIndexedReadMethod():::Gets the method that should be used to read an indexed property value.:::indexedReadMethod->get->if->cls->getClass0->if->isSet->return->nextMethodName->getBaseName->if->type->getIndexedPropertyType0->if->getBaseName->else->args->Introspector->findMethod->if->indexedReadMethodName->equals->Introspector->findMethod->setIndexedReadMethod0->return
IndexedPropertyDescriptor#setIndexedReadMethod(Method):::Sets the method that should be used to read an indexed property value.:::get->findIndexedPropertyType->setIndexedPropertyType->setIndexedReadMethod0
IndexedPropertyDescriptor#getIndexedWriteMethod():::Gets the method that should be used to write an indexed property value.:::indexedWriteMethod->get->if->cls->getClass0->if->isSet->return->type->getIndexedPropertyType0->if->try->getIndexedReadMethod->findIndexedPropertyType->setIndexedPropertyType->catch->propType->getPropertyType->if->propType->isArray->propType->getComponentType->finally->if->getBaseName->args->new->Class<?>Arr->Introspector->findMethod->if->if->indexedWriteMethod->getReturnType->equals->setIndexedWriteMethod0->return
IndexedPropertyDescriptor#setIndexedWriteMethod(Method):::Sets the method that should be used to write an indexed property value.:::type->getIndexedReadMethod->findIndexedPropertyType->setIndexedPropertyType->setIndexedWriteMethod0
IndexedPropertyDescriptor#getIndexedPropertyType():::Returns the Java type info for the indexed property:::type->getIndexedPropertyType0->if->try->getIndexedReadMethod->getIndexedWriteMethod->findIndexedPropertyType->setIndexedPropertyType->catch->finally->return
IndexedPropertyDescriptor#equals(Object):::Compares this PropertyDescriptor against the specified object:::if->return->if->other->otherIndexedReadMethod->other->getIndexedReadMethod->otherIndexedWriteMethod->other->getIndexedWriteMethod->if->getIndexedReadMethod->compareMethods->return->if->getIndexedWriteMethod->compareMethods->return->if->getIndexedPropertyType->other->getIndexedPropertyType->return->return->super->equals->return
IndexedPropertyDescriptor#hashCode():::Returns a hash code value for the object:::result->super->hashCode->indexedWriteMethodName->hashCode->indexedReadMethodName->hashCode->getIndexedPropertyType->getIndexedPropertyType->hashCode->return
Introspector#getBeanInfo(Class):::Introspect on a Java Bean and learn about all its properties, exposed methods, and events:::if->ReflectUtil->isPackageAccessible->return->new->Introspector->getBeanInfo->context->ThreadGroupContext->getContext->beanInfo->synchronized->context->getBeanInfo->if->new->Introspector->getBeanInfo->synchronized->context->putBeanInfo->return
Introspector#getBeanInfo(Class, int):::Introspect on a Java bean and learn about all its properties, exposed methods, and events, subject to some control flags:::return->getBeanInfo
Introspector#getBeanInfo(Class, Class):::Introspect on a Java bean and learn all about its properties, exposed methods, below a given "stop" point:::return->getBeanInfo
Introspector#getBeanInfo(Class, Class, int):::Introspect on a Java Bean and learn about all its properties, exposed methods and events, below a given stopClass point subject to some control flags:::bi->if->getBeanInfo->else->new->Introspector->getBeanInfo->return
Introspector#decapitalize(String):::Utility method to take a string and convert it to normal Java variable name capitalization:::if->name->length->return->if->name->length->Character->name->charAt->isUpperCase->Character->name->charAt->isUpperCase->return->chars->name->toCharArray->Character->toLowerCase->return->new->String
Introspector#flushFromCaches(Class):::Flush the Introspector's internal cached information for a given class:::if->throw->new->NullPointerException->synchronized->ThreadGroupContext->getContext->removeBeanInfo->declaredMethodCache->put
Introspector#findMethod(Class, String, int):::Find a target methodName on a given class.:::return->findMethod
Introspector#findMethod(Class, String, int, Class[]):::Find a target methodName with specific parameter list on a given class:::if->return->return->internalFindMethod
Introspector#isSubclass(Class, Class):::Return true if class a is either equivalent to class b, or if class a is a subclass of class b, i.e:::if->return->if->return->for->x->x->getSuperclass->return
Introspector#instantiate(Class, String):::Try to create an instance of a named class:::cl->sibling->getClassLoader->cls->ClassFinder->findClass->return->cls->newInstance
MethodDescriptor#getMethod():::Gets the method that this MethodDescriptor encapsulates.:::method->get->if->cls->getClass0->name->getName->if->params->getParams->if->for->i->else->Introspector->findMethod->setMethod->return
MethodDescriptor#getParameterDescriptors():::Gets the ParameterDescriptor for each of this MethodDescriptor's method's parameters.:::return->clone
NameGenerator#clear():::Clears the name cache:::valueToName->clear->nameToCount->clear
NameGenerator#unqualifiedClassName(Class):::Returns the root name of the class.:::if->type->isArray->return->type->getComponentType->unqualifiedClassName->name->type->getName->return->name->name->lastIndexOf->substring
NameGenerator#capitalize(String):::Returns a String which capitalizes the first letter of the string.:::if->name->length->return->return->name->substring->toUpperCase->name->substring
NameGenerator#instanceName(Object):::Returns a unique string which identifies the object instance:::if->return->if->return->unqualifiedClassName->else->result->valueToName->get->if->return->type->instance->getClass->className->unqualifiedClassName->size->nameToCount->get->instanceNumber->intValue->nameToCount->put->valueToName->put->return
PersistenceDelegate#writeObject(Object, Encoder):::The writeObject is a single entry point to the persistence and is used by an Encoder in the traditional mode of delegation:::newInstance->out->get->if->mutatesTo->out->remove->out->instantiate->writeExpression->else->oldInstance->getClass->initialize
PersistenceDelegate#mutatesTo(Object, Object):::Returns true if an equivalent copy of oldInstance may be created by applying a series of statements to newInstance:::return->oldInstance->getClass->newInstance->getClass
PersistenceDelegate#instantiate(Object, Encoder):::Returns an expression whose value is oldInstance:::
PersistenceDelegate#initialize(Class, Object, Object, Encoder):::Produce a series of statements with side effects on newInstance so that the new instance becomes equivalent to oldInstance:::superType->type->getSuperclass->info->out->getPersistenceDelegate->info->initialize
PropertyChangeEvent#getPropertyName():::Gets the programmatic name of the property that was changed.:::return
PropertyChangeEvent#getNewValue():::Gets the new value for the property, expressed as an Object.:::return
PropertyChangeEvent#getOldValue():::Gets the old value for the property, expressed as an Object.:::return
PropertyChangeEvent#setPropagationId(Object):::Sets the propagationId object for the event.:::
PropertyChangeEvent#getPropagationId():::The "propagationId" field is reserved for future use:::return
PropertyChangeEvent#toString():::Returns a string representation of the object.:::sb->getClass->getName->new->StringBuilder->sb->append->getPropertyName->append->appendTo->sb->append->getOldValue->append->sb->append->getNewValue->append->sb->append->getPropagationId->append->sb->append->getSource->append->return->sb->append->toString
PropertyChangeListenerProxy#propertyChange(PropertyChangeEvent):::Forwards the property change event to the listener delegate.:::getListener->propertyChange
PropertyChangeListenerProxy#getPropertyName():::Returns the name of the named property associated with the listener.:::return
PropertyChangeSupport#addPropertyChangeListener(PropertyChangeListener):::Add a PropertyChangeListener to the listener list:::if->return->if->proxy->proxy->getPropertyName->proxy->getListener->addPropertyChangeListener->else->add
PropertyChangeSupport#removePropertyChangeListener(PropertyChangeListener):::Remove a PropertyChangeListener from the listener list:::if->return->if->proxy->proxy->getPropertyName->proxy->getListener->removePropertyChangeListener->else->remove
PropertyChangeSupport#getPropertyChangeListeners():::Returns an array of all the listeners that were added to the PropertyChangeSupport object with addPropertyChangeListener():::return->getListeners
PropertyChangeSupport#addPropertyChangeListener(String, PropertyChangeListener):::Add a PropertyChangeListener for a specific property:::if->return->extract->if->add
PropertyChangeSupport#removePropertyChangeListener(String, PropertyChangeListener):::Remove a PropertyChangeListener for a specific property:::if->return->extract->if->remove
PropertyChangeSupport#getPropertyChangeListeners(String):::Returns an array of all the listeners which have been associated with the named property.:::return->getListeners
PropertyChangeSupport#firePropertyChange(String, Object, Object):::Reports a bound property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->oldValue->equals->new->PropertyChangeEvent->firePropertyChange
PropertyChangeSupport#firePropertyChange(String, int, int):::Reports an integer bound property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Integer->valueOf->Integer->valueOf->firePropertyChange
PropertyChangeSupport#firePropertyChange(String, boolean, boolean):::Reports a boolean bound property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Boolean->valueOf->Boolean->valueOf->firePropertyChange
PropertyChangeSupport#firePropertyChange(PropertyChangeEvent):::Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name:::oldValue->event->getOldValue->newValue->event->getNewValue->if->oldValue->equals->name->event->getPropertyName->common->get->named->get->fire->fire
PropertyChangeSupport#fireIndexedPropertyChange(String, int, Object, Object):::Reports a bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->oldValue->equals->new->IndexedPropertyChangeEvent->firePropertyChange
PropertyChangeSupport#fireIndexedPropertyChange(String, int, int, int):::Reports an integer bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Integer->valueOf->Integer->valueOf->fireIndexedPropertyChange
PropertyChangeSupport#fireIndexedPropertyChange(String, int, boolean, boolean):::Reports a boolean bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Boolean->valueOf->Boolean->valueOf->fireIndexedPropertyChange
PropertyChangeSupport#hasListeners(String):::Check if there are any listeners for a specific property, including those registered on all properties:::return->hasListeners
PropertyDescriptor#getPropertyType():::Returns the Java type info for the property:::type->getPropertyType0->if->try->getReadMethod->getWriteMethod->findPropertyType->setPropertyType->catch->finally->return
PropertyDescriptor#getReadMethod():::Gets the method that should be used to read the property value.:::readMethod->get->if->cls->getClass0->if->isSet->return->nextMethodName->getBaseName->if->type->getPropertyType0->if->getBaseName->else->Introspector->findMethod->if->readMethodName->equals->Introspector->findMethod->try->setReadMethod->catch->finally->return
PropertyDescriptor#setReadMethod(Method):::Sets the method that should be used to read the property value.:::get->findPropertyType->setPropertyType->setReadMethod0
PropertyDescriptor#getWriteMethod():::Gets the method that should be used to write the property value.:::writeMethod->get->if->cls->getClass0->if->isSet->return->type->getPropertyType0->if->try->getReadMethod->findPropertyType->setPropertyType->catch->return->finally->if->getBaseName->args->new->Class<?>Arr->Introspector->findMethod->if->if->writeMethod->getReturnType->equals->try->setWriteMethod->catch->finally->return
PropertyDescriptor#setWriteMethod(Method):::Sets the method that should be used to write the property value.:::getReadMethod->findPropertyType->setPropertyType->setWriteMethod0
PropertyDescriptor#setClass0(Class):::Overridden to ensure that a super class doesn't take precedent:::if->getClass0->clz->getClass0->isAssignableFrom->return->super->setClass0
PropertyDescriptor#isBound():::Updates to "bound" properties will cause a "PropertyChange" event to get fired when the property is changed.:::return
PropertyDescriptor#setBound(boolean):::Updates to "bound" properties will cause a "PropertyChange" event to get fired when the property is changed.:::
PropertyDescriptor#isConstrained():::Attempted updates to "Constrained" properties will cause a "VetoableChange" event to get fired when the property is changed.:::return
PropertyDescriptor#setConstrained(boolean):::Attempted updates to "Constrained" properties will cause a "VetoableChange" event to get fired when the property is changed.:::
PropertyDescriptor#setPropertyEditorClass(Class):::Normally PropertyEditors will be found using the PropertyEditorManager:::getWeakReference
PropertyDescriptor#getPropertyEditorClass():::Gets any explicit PropertyEditor Class that has been registered for this property.:::return->get
PropertyDescriptor#createPropertyEditor(Object):::Constructs an instance of a property editor using the current property editor class:::editor->cls->getPropertyEditorClass->if->isAssignableFrom->ReflectUtil->isPackageAccessible->ctor->if->try->cls->new->Class<?>Arr->getConstructor->catch->finally->try->if->cls->newInstance->else->ctor->new->ObjectArr->newInstance->catch->finally->return
PropertyDescriptor#equals(Object):::Compares this PropertyDescriptor against the specified object:::if->return->if->other->otherReadMethod->other->getReadMethod->otherWriteMethod->other->getWriteMethod->if->getReadMethod->compareMethods->return->if->getWriteMethod->compareMethods->return->if->getPropertyType->other->getPropertyType->getPropertyEditorClass->other->getPropertyEditorClass->other->isBound->other->isConstrained->return->return
PropertyDescriptor#compareMethods(Method, Method):::Package private helper method for Descriptor .equals methods.:::if->return->if->if->a->equals->return->return
PropertyDescriptor#hashCode():::Returns a hash code value for the object:::result->getPropertyType->getPropertyType->hashCode->getReadMethod->getReadMethod->hashCode->getWriteMethod->getWriteMethod->hashCode->getPropertyEditorClass->getPropertyEditorClass->hashCode->writeMethodName->hashCode->readMethodName->hashCode->getName->hashCode->return
PropertyEditor#setValue(Object):::Set (or change) the object that is to be edited:::
PropertyEditor#paintValue(java.awt.Graphics, java.awt.Rectangle):::Paint a representation of the value into a given area of screen real estate:::
PropertyEditor#getJavaInitializationString():::Returns a fragment of Java code that can be used to set a property to match the editors current state:::
PropertyEditor#getAsText():::Gets the property value as text.:::
PropertyEditor#setAsText(String):::Set the property value by parsing a given String:::
PropertyEditor#getTags():::If the property value must be one of a set of known tagged values, then this method should return an array of the tags:::
PropertyEditor#supportsCustomEditor():::Determines whether this property editor supports a custom editor.:::
PropertyEditor#addPropertyChangeListener(PropertyChangeListener):::Adds a listener for the value change:::
PropertyEditor#removePropertyChangeListener(PropertyChangeListener):::Removes a listener for the value change.:::
PropertyEditorManager#registerEditor(Class, Class):::Registers an editor class to edit values of the given target class:::sm->System->getSecurityManager->if->sm->checkPropertiesAccess->ThreadGroupContext->getContext->getPropertyEditorFinder->register
PropertyEditorManager#findEditor(Class):::Locate a value editor for a given target type.:::return->ThreadGroupContext->getContext->getPropertyEditorFinder->find
PropertyEditorManager#getEditorSearchPath():::Gets the package names that will be searched for property editors.:::return->ThreadGroupContext->getContext->getPropertyEditorFinder->getPackages
PropertyEditorManager#setEditorSearchPath(String[]):::Change the list of package names that will be used for          finding property editors:::sm->System->getSecurityManager->if->sm->checkPropertiesAccess->ThreadGroupContext->getContext->getPropertyEditorFinder->setPackages
PropertyEditorSupport#getSource():::Returns the bean that is used as the source of events:::return
PropertyEditorSupport#setSource(Object):::Sets the source bean:::
PropertyEditorSupport#setValue(Object):::Set (or change) the object that is to be edited.:::firePropertyChange
PropertyEditorSupport#getValue():::Gets the value of the property.:::return
PropertyEditorSupport#paintValue(java.awt.Graphics, java.awt.Rectangle):::Paint a representation of the value into a given area of screen real estate:::
PropertyEditorSupport#getJavaInitializationString():::This method is intended for use when generating Java code to set the value of the property:::return
PropertyEditorSupport#getAsText():::Gets the property value as a string suitable for presentation to a human to edit.:::return->toString
PropertyEditorSupport#setAsText(String):::Sets the property value by parsing a given String:::if->setValue->return->throw->new->java.lang.IllegalArgumentException
PropertyEditorSupport#getTags():::If the property value must be one of a set of known tagged values, then this method should return an array of the tag values:::return
PropertyEditorSupport#supportsCustomEditor():::Determines whether the propertyEditor can provide a custom editor.:::return
PropertyEditorSupport#addPropertyChangeListener(PropertyChangeListener):::Adds a listener for the value change:::if->new->java.util.Vector<>->listeners->addElement
PropertyEditorSupport#removePropertyChangeListener(PropertyChangeListener):::Removes a listener for the value change:::if->return->listeners->removeElement
PropertyEditorSupport#firePropertyChange():::Report that we have been modified to any interested listeners.:::targets->synchronized->if->return->unsafeClone->evt->new->PropertyChangeEvent->for->i->targets->size
PropertyVetoException#getPropertyChangeEvent():::Gets the vetoed PropertyChangeEvent.:::return
SimpleBeanInfo#getBeanDescriptor():::Deny knowledge about the class and customizer of the bean:::return
SimpleBeanInfo#getPropertyDescriptors():::Deny knowledge of properties:::return
SimpleBeanInfo#getDefaultPropertyIndex():::Deny knowledge of a default property:::return
SimpleBeanInfo#getEventSetDescriptors():::Deny knowledge of event sets:::return
SimpleBeanInfo#getDefaultEventIndex():::Deny knowledge of a default event:::return
SimpleBeanInfo#getMethodDescriptors():::Deny knowledge of methods:::return
SimpleBeanInfo#getAdditionalBeanInfo():::Claim there are no other relevant BeanInfo objects:::return
SimpleBeanInfo#getIcon(int):::Claim there are no icons available:::descriptor->getBeanDescriptor->if->type->descriptor->getBeanClass->if->type->getClassLoader->type->getAnnotation->name->type->getName->index->name->lastIndexOf->if->name->substring->equals->className->type->getSimpleName->switch->return->loadImage->return->loadImage->return->loadImage->return->loadImage->return
SimpleBeanInfo#loadImage(String):::This is a utility method to help in loading icon images:::try->url->getClass->getResource->if->ip->url->getContent->if->return->Toolkit->getDefaultToolkit->createImage->catch->finally->return
Statement#getTarget():::Returns the target object of this statement:::return
Statement#getMethodName():::Returns the name of the method to invoke:::return
Statement#getArguments():::Returns the arguments for the method to invoke:::return->clone
Statement#execute():::The execute method finds a method whose name is the same as the methodName property, and invokes the method on the target:::invoke
Statement#toString():::Prints the value of this statement using a Java-style syntax.:::target->getTarget->methodName->getMethodName->arguments->getArguments->if->result->instanceName->new->StringBuilder->n->for->i->result->append->return->result->toString
ThreadGroupContext#getContext():::Returns the appropriate ThreadGroupContext for the caller, as determined by its ThreadGroup.:::return->contexts->Thread->currentThread->getThreadGroup->get
VetoableChangeListener#vetoableChange(PropertyChangeEvent):::This method gets called when a constrained property is changed.:::
VetoableChangeListenerProxy#vetoableChange(PropertyChangeEvent):::Forwards the property change event to the listener delegate.:::getListener->vetoableChange
VetoableChangeListenerProxy#getPropertyName():::Returns the name of the named property associated with the listener.:::return
VetoableChangeSupport#addVetoableChangeListener(VetoableChangeListener):::Add a VetoableChangeListener to the listener list:::if->return->if->proxy->proxy->getPropertyName->proxy->getListener->addVetoableChangeListener->else->add
VetoableChangeSupport#removeVetoableChangeListener(VetoableChangeListener):::Remove a VetoableChangeListener from the listener list:::if->return->if->proxy->proxy->getPropertyName->proxy->getListener->removeVetoableChangeListener->else->remove
VetoableChangeSupport#getVetoableChangeListeners():::Returns an array of all the listeners that were added to the VetoableChangeSupport object with addVetoableChangeListener():::return->getListeners
VetoableChangeSupport#addVetoableChangeListener(String, VetoableChangeListener):::Add a VetoableChangeListener for a specific property:::if->return->extract->if->add
VetoableChangeSupport#removeVetoableChangeListener(String, VetoableChangeListener):::Remove a VetoableChangeListener for a specific property:::if->return->extract->if->remove
VetoableChangeSupport#getVetoableChangeListeners(String):::Returns an array of all the listeners which have been associated with the named property.:::return->getListeners
VetoableChangeSupport#fireVetoableChange(String, Object, Object):::Reports a constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->oldValue->equals->new->PropertyChangeEvent->fireVetoableChange
VetoableChangeSupport#fireVetoableChange(String, int, int):::Reports an integer constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Integer->valueOf->Integer->valueOf->fireVetoableChange
VetoableChangeSupport#fireVetoableChange(String, boolean, boolean):::Reports a boolean constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Boolean->valueOf->Boolean->valueOf->fireVetoableChange
VetoableChangeSupport#fireVetoableChange(PropertyChangeEvent):::Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name:::oldValue->event->getOldValue->newValue->event->getNewValue->if->oldValue->equals->name->event->getPropertyName->common->get->named->get->listeners->if->else->if->else->new->VetoableChangeListenerArr->System->arraycopy->System->arraycopy->if->current->try->while->vetoableChange->catch->new->PropertyChangeEvent->for->i->throw->finally
VetoableChangeSupport#hasListeners(String):::Check if there are any listeners for a specific property, including those registered on all properties:::return->hasListeners
Visibility#needsGui():::Determines whether this bean needs a GUI.:::
Visibility#dontUseGui():::This method instructs the bean that it should not use the Gui.:::
Visibility#okToUseGui():::This method instructs the bean that it is OK to use the Gui.:::
Visibility#avoidingGui():::Determines whether this bean is avoiding using a GUI.:::
XMLDecoder#close():::This method closes the input stream associated with this stream.:::if->parsingComplete->getCharacterStream->close->getByteStream->close
XMLDecoder#setExceptionListener(ExceptionListener):::Sets the exception handler for this stream to exceptionListener:::if->setExceptionListener
XMLDecoder#getExceptionListener():::Gets the exception handler for this stream.:::return->getExceptionListener
XMLDecoder#readObject():::Reads the next object from the underlying input stream.:::return->parsingComplete
XMLDecoder#setOwner(Object):::Sets the owner of this decoder to owner.:::
XMLDecoder#getOwner():::Gets the owner of this decoder.:::return
XMLDecoder#createHandler(Object, ExceptionListener, ClassLoader):::Creates a new handler for SAX parser that can be used to parse embedded XML archives created by the XMLEncoder class:::handler->new->DocumentHandler->handler->setOwner->handler->setExceptionListener->handler->setClassLoader->return
XMLEncoder#setOwner(Object):::Sets the owner of this encoder to owner.:::new->ObjectArr->new->Expression->writeExpression
XMLEncoder#getOwner():::Gets the owner of this encoder.:::return
XMLEncoder#writeObject(Object):::Write an XML representation of the specified object to the output.:::if->super->writeObject->else->new->ObjectArr->new->Statement->writeStatement
XMLEncoder#writeStatement(Statement):::Records the Statement so that the Encoder will produce the actual output when the stream is flushed:::internal->try->super->writeStatement->mark->target->oldStm->getTarget->if->method->oldStm->getMethodName->args->oldStm->getArguments->if->else->if->method->equals->else->if->method->equals->statementList->add->catch->getExceptionListener->new->Exception->exceptionThrown->finally
XMLEncoder#writeExpression(Expression):::Records the Expression so that the Encoder will produce the actual output when the stream is flushed:::internal->oldValue->getValue->if->get->getValueData->super->writeExpression
XMLEncoder#flush():::This method writes out the preamble associated with the XML encoding if it has not been written already and then writes out all of the values that been written to the stream since the last time flush was called:::if->if->quote->quote->writeln->System->getProperty->quote->getName->quote->writeln->statements->statementList->while->statements->isEmpty->s->statements->remove->if->s->getMethodName->equals->s->getArguments->outputValue->else->outputStatement->statement->getMissedStatement->while->outputStatement->getMissedStatement->try->out->flush->catch->getExceptionListener->exceptionThrown->finally->clear
XMLEncoder#close():::This method calls flush, writes the closing postamble and then closes the output stream associated with this stream.:::flush->writeln->try->out->close->catch->getExceptionListener->exceptionThrown->finally

AppletInitializer#initialize(Applet, BeanContext)::: If passed to the appropriate variant of java.beans.Beans.instantiate this method will be called in order to associate the newly instantiated Applet (JavaBean) with its AppletContext, AppletStub, and Container:::
AppletInitializer#activate(Applet)::: Activate, and/or mark Applet active:::
BeanDescriptor#getBeanClass():::Gets the bean's Class object.:::return->get
BeanDescriptor#getCustomizerClass():::Gets the Class object for the bean's customizer.:::return->get
BeanDescriptor#appendTo(StringBuilder)::: bean descriptor append to:::appendTo->appendTo
BeanInfo#getBeanDescriptor():::Returns the bean descriptor that provides overall information about the bean, such as its display name or its customizer.:::
BeanInfo#getEventSetDescriptors():::Returns the event descriptors of the bean that define the types of events fired by this bean.:::
BeanInfo#getDefaultEventIndex():::A bean may have a default event typically applied when this bean is used.:::
BeanInfo#getPropertyDescriptors():::Returns descriptors for all properties of the bean:::
BeanInfo#getDefaultPropertyIndex():::A bean may have a default property commonly updated when this bean is customized.:::
BeanInfo#getMethodDescriptors():::Returns the method descriptors of the bean that define the externally visible methods supported by this bean.:::
BeanInfo#getAdditionalBeanInfo():::This method enables the current BeanInfo object to return an arbitrary collection of other BeanInfo objects that provide additional information about the current bean:::
BeanInfo#getIcon(int):::Returns an image that can be used to represent the bean in toolboxes or toolbars:::
Beans#instantiate(ClassLoader, String)::: beans instantiate:::return->Beans->instantiate
Beans#instantiate(ClassLoader, String, BeanContext)::: Instantiate a JavaBean:::return->Beans->instantiate
Beans#instantiate(ClassLoader, String, BeanContext, AppletInitializer):::Instantiate a bean:::ins->oins->result->serialized->serex->if->try->ClassLoader->getSystemClassLoader->catch->finally->serName->beanName->replace->concat->if->ClassLoader->getSystemResourceAsStream->else->cls->getResourceAsStream->if->try->if->new->ObjectInputStream->else->new->ObjectInputStreamWithLoader->oins->readObject->oins->close->catch->ins->close->ins->close->throw->finally->if->cl->try->ClassFinder->findClass->catch->if->throw->throw->finally->if->Modifier->cl->getModifiers->isPublic->throw->new->ClassNotFoundException->try->cl->newInstance->catch->throw->new->ClassNotFoundException->finally->if->stub->if->applet->needDummies->if->resourceName->if->beanName->replace->concat->else->beanName->replace->concat->objectUrl->codeBase->docBase->if->ClassLoader->getSystemResource->else->cls->getResource->if->s->objectUrl->toExternalForm->if->s->endsWith->ix->s->length->resourceName->length->s->substring->new->URL->s->lastIndexOf->if->s->substring->new->URL->context->new->BeansAppletContext->new->BeansAppletStub->applet->setStub->else->initializer->initialize->if->unsafeBeanContextAdd->if->applet->setSize->applet->init->if->else->initializer->activate->else->if->unsafeBeanContextAdd->return
Beans#unsafeBeanContextAdd(BeanContext, Object)::: beans unsafe bean context add:::beanContext->add
Beans#getInstanceOf(Object, Class):::From a given bean, obtain an object representing a specified type view of that source object:::return
Beans#isInstanceOf(Object, Class):::Check if a bean can be viewed as a given target type:::return->Introspector->bean->getClass->isSubclass
Beans#isDesignTime():::Test if we are in design-mode.:::return->ThreadGroupContext->getContext->isDesignTime
Beans#isGuiAvailable():::Determines whether beans can assume a GUI is available.:::return->ThreadGroupContext->getContext->isGuiAvailable
Beans#setDesignTime(boolean)::: beans set design time:::sm->System->getSecurityManager->if->sm->checkPropertiesAccess->ThreadGroupContext->getContext->setDesignTime
Beans#setGuiAvailable(boolean)::: beans set gui available:::sm->System->getSecurityManager->if->sm->checkPropertiesAccess->ThreadGroupContext->getContext->setGuiAvailable
ObjectInputStreamWithLoader#resolveClass(ObjectStreamClass):::Use the given ClassLoader rather than using the system class:::cname->classDesc->getName->return->ClassFinder->resolveClass
BeansAppletContext#getAudioClip(URL)::: beans applet context get audio clip:::try->return->url->getContent->catch->return->finally
BeansAppletContext#getImage(URL)::: beans applet context get image:::o->imageCache->get->if->return->try->url->getContent->if->return->if->imageCache->put->return->img->target->createImage->imageCache->put->return->catch->return->finally
BeansAppletContext#getApplet(String)::: beans applet context get applet:::return
BeansAppletContext#getApplets()::: beans applet context get applets:::applets->new->Vector<>->applets->addElement->return->applets->elements
BeansAppletContext#showDocument(URL)::: beans applet context show document:::
BeansAppletContext#showDocument(URL, String)::: beans applet context show document:::
BeansAppletContext#showStatus(String)::: beans applet context show status:::
BeansAppletContext#setStream(String, InputStream)::: beans applet context set stream:::
BeansAppletContext#getStream(String)::: beans applet context get stream:::return
BeansAppletContext#getStreamKeys()::: beans applet context get stream keys:::return
BeansAppletStub#isActive()::: beans applet stub is active:::return
BeansAppletStub#getDocumentBase()::: beans applet stub get document base:::return
BeansAppletStub#getCodeBase()::: beans applet stub get code base:::return
BeansAppletStub#getParameter(String)::: beans applet stub get parameter:::return
BeansAppletStub#getAppletContext()::: beans applet stub get applet context:::return
BeansAppletStub#appletResize(int, int)::: beans applet stub applet resize:::
ChangeListenerMap#newArray(int):::Creates an array of listeners:::
ChangeListenerMap#newProxy(String, L):::Creates a proxy listener for the specified property.:::
ChangeListenerMap#add(String, L):::Adds a listener to the list of listeners for the specified property:::if->new->HashMap<>->array->get->size->clone->newArray->if->System->arraycopy->put
ChangeListenerMap#remove(String, L):::Removes a listener from the list of listeners for the specified property:::if->array->get->if->for->i
ChangeListenerMap#get(String):::Returns the list of listeners for the specified property.:::return->get
ChangeListenerMap#set(String, L[]):::Sets new list of listeners for the specified property.:::if->if->new->HashMap<>->put->else->if->remove->if->isEmpty
ChangeListenerMap#getListeners():::Returns all listeners in the map.:::if->return->newArray->list->new->ArrayList<>->listeners->get->if->foreach->list->add->foreach->entrySet->name->entry->getKey->if->foreach->entry->getValue->list->newProxy->add->return->list->list->size->newArray->toArray
ChangeListenerMap#getListeners(String):::Returns listeners that have been associated with the named property.:::if->listeners->get->if->return->listeners->clone->return->newArray
ChangeListenerMap#hasListeners(String):::Indicates whether the map contains at least one listener to be notified.:::if->return->array->get->return->get
ChangeListenerMap#getEntries():::Returns a set of entries from the map:::return->entrySet->Collections->emptySet
ChangeListenerMap#extract(L):::Extracts a real listener from the proxy listener:::
Customizer#setObject(Object):::Set the object to be customized:::
Customizer#addPropertyChangeListener(PropertyChangeListener):::Register a listener for the PropertyChange event:::
Customizer#removePropertyChangeListener(PropertyChangeListener):::Remove a listener for the PropertyChange event.:::
DefaultPersistenceDelegate#definesEquals(Class)::: default persistence delegate defines equals:::try->return->type->getMethod->getDeclaringClass->catch->return->finally
DefaultPersistenceDelegate#definesEquals(Object)::: default persistence delegate defines equals:::if->return->else->result->instance->getClass->definesEquals->return
DefaultPersistenceDelegate#mutatesTo(Object, Object):::If the number of arguments in the specified constructor is non-zero and the class of oldInstance explicitly declares an "equals" method this method returns the value of oldInstance.equals(newInstance):::return->definesEquals->super->mutatesTo->oldInstance->equals
DefaultPersistenceDelegate#instantiate(Object, Encoder):::This default implementation of the instantiate method returns an expression containing the predefined method name "new" which denotes a call to a constructor with the arguments as specified in the DefaultPersistenceDelegate's constructor.:::nArgs->type->oldInstance->getClass->constructorArgs->new->ObjectArr->for->i->return->oldInstance->getClass->new->Expression
DefaultPersistenceDelegate#findMethod(Class, String)::: default persistence delegate find method:::if->throw->new->IllegalArgumentException->pd->getPropertyDescriptor->if->throw->new->IllegalStateException->method->pd->getReadMethod->if->throw->new->IllegalStateException->return
DefaultPersistenceDelegate#doProperty(Class, PropertyDescriptor, Object, Object, Encoder)::: default persistence delegate do property:::getter->pd->getReadMethod->setter->pd->getWriteMethod->if->oldGetExp->getter->getName->new->ObjectArr->new->Expression->newGetExp->getter->getName->new->ObjectArr->new->Expression->oldValue->oldGetExp->getValue->newValue->newGetExp->getValue->out->writeExpression->if->Objects->out->get->equals->e->pd->getValue->if->Array->getLength->a->for->i->setter->getName->new->ObjectArr->invokeStatement
DefaultPersistenceDelegate#invokeStatement(Object, String, Object[], Encoder)::: default persistence delegate invoke statement:::out->new->Statement->writeStatement
DefaultPersistenceDelegate#initBean(Class, Object, Object, Encoder)::: default persistence delegate init bean:::foreach->type->getFields->if->ReflectUtil->field->getDeclaringClass->isPackageAccessible->continue->mod->field->getModifiers->if->Modifier->isFinal->Modifier->isStatic->Modifier->isTransient->continue->try->oldGetExp->new->ObjectArr->new->Expression->newGetExp->new->ObjectArr->new->Expression->oldValue->oldGetExp->getValue->newValue->newGetExp->getValue->out->writeExpression->if->Objects->out->get->equals->out->new->ObjectArr->new->Statement->writeStatement->catch->out->getExceptionListener->exceptionThrown->finally->info->try->Introspector->getBeanInfo->catch->return->finally->foreach->info->getPropertyDescriptors->if->d->isTransient->continue->try->doProperty->catch->out->getExceptionListener->exceptionThrown->finally->if->isAssignableFrom->return->foreach->info->getEventSetDescriptors->if->d->isTransient->continue->listenerType->d->getListenerType->if->continue->if->continue->oldL->new->EventListenerArr->newL->new->EventListenerArr->try->m->d->getGetListenerMethod->MethodUtil->new->ObjectArr->invoke->MethodUtil->new->ObjectArr->invoke->catch->try->m->type->new->Class<?>Arr->getMethod->MethodUtil->new->ObjectArr->invoke->MethodUtil->new->ObjectArr->invoke->catch->return->finally->finally->addListenerMethodName->d->getAddListenerMethod->getName->for->i->removeListenerMethodName->d->getRemoveListenerMethod->getName->for->i
DefaultPersistenceDelegate#initialize(Class, Object, Object, Encoder):::This default implementation of the initialize method assumes all state held in objects of this type is exposed via the matching pairs of "setter" and "getter" methods in the order they are returned by the Introspector:::super->initialize->if->oldInstance->getClass->initBean
DefaultPersistenceDelegate#getPropertyDescriptor(Class, String)::: default persistence delegate get property descriptor:::try->foreach->Introspector->getBeanInfo->getPropertyDescriptors->if->property->pd->getName->equals->return->catch->finally->return
DesignMode#setDesignTime(boolean)::: design mode set design time:::
DesignMode#isDesignTime()::: design mode is design time:::
Encoder#writeObject(Object):::Write the specified object to the output stream:::if->return->info->o->getClass->getPersistenceDelegate->info->writeObject
Encoder#setExceptionListener(ExceptionListener):::Sets the exception handler for this stream to exceptionListener:::
Encoder#getExceptionListener():::Gets the exception handler for this stream.:::return
Encoder#getValue(Expression)::: encoder get value:::try->return->exp->getValue->catch->getExceptionListener->exceptionThrown->throw->exp->toString->new->RuntimeException->finally
Encoder#getPersistenceDelegate(Class):::Returns the persistence delegate for the given type:::pd->find->if->MetaData->getPersistenceDelegate->if->register->return
Encoder#setPersistenceDelegate(Class, PersistenceDelegate):::Associates the specified persistence delegate with the given type.:::register
Encoder#remove(Object):::Removes the entry for this instance, returning the old entry.:::exp->bindings->remove->return->getValue
Encoder#get(Object):::Returns a tentative value for oldInstance in the environment created by this stream:::if->oldInstance->getClass->return->exp->bindings->get->return->getValue
Encoder#writeObject1(Object)::: encoder write object1:::o->get->if->writeObject->get->return
Encoder#cloneStatement(Statement)::: encoder clone statement:::oldTarget->oldExp->getTarget->newTarget->writeObject1->oldArgs->oldExp->getArguments->newArgs->new->ObjectArr->for->i->newExp->oldExp->getClass->equals->oldExp->getMethodName->new->Statement->oldExp->getMethodName->new->Expression->return
Encoder#writeStatement(Statement):::Writes statement oldStm to the stream:::newStm->cloneStatement->if->oldStm->getTarget->try->newStm->execute->catch->getExceptionListener->new->Exception->exceptionThrown->finally
Encoder#writeExpression(Expression):::The implementation first checks to see if an expression with this value has already been written:::oldValue->getValue->if->get->return->bindings->cloneStatement->put->writeObject
Encoder#clear()::: encoder clear:::bindings->clear
Encoder#setAttribute(Object, Object)::: encoder set attribute:::if->new->HashMap<>->attributes->put
Encoder#getAttribute(Object)::: encoder get attribute:::if->return->return->attributes->get
EventHandler#getTarget():::Returns the object to which this event handler will send a message.:::return
EventHandler#getAction():::Returns the name of the target's writable property that this event handler will set, or the name of the method that this event handler will invoke on the target.:::return
EventHandler#getEventPropertyName():::Returns the property of the event that should be used in the action applied to the target.:::return
EventHandler#getListenerMethodName():::Returns the name of the method that will trigger the action:::return
EventHandler#applyGetters(Object, String)::: event handler apply getters:::if->getters->equals->return->firstDot->getters->indexOf->if->getters->length->first->getters->substring->rest->getters->Math->getters->length->min->substring->try->getter->if->Statement->target->getClass->NameGenerator->capitalize->new->Class<?>Arr->getMethod->if->Statement->target->getClass->NameGenerator->capitalize->new->Class<?>Arr->getMethod->if->Statement->target->getClass->new->Class<?>Arr->getMethod->if->throw->new->RuntimeException->newTarget->MethodUtil->new->ObjectArr->invoke->return->applyGetters->catch->throw->new->RuntimeException->finally
EventHandler#invoke(Object, Method, Object[]):::Extract the appropriate property value from the event and pass it to the action associated with this EventHandler.:::acc->if->System->getSecurityManager->throw->new->SecurityException->return->AccessController->new->PrivilegedAction<Object>->doPrivileged
EventHandler#invokeInternal(Object, Method, Object[])::: event handler invoke internal:::methodName->method->getName->if->method->getDeclaringClass->if->methodName->equals->return->System->identityHashCode->else->if->methodName->equals->return->else->if->methodName->equals->return->proxy->getClass->getName->Integer->proxy->hashCode->toHexString->if->listenerMethodName->equals->argTypes->newArgs->if->new->ObjectArr->new->Class<?>Arr->else->input->getEventPropertyName->applyGetters->new->ObjectArr->new->Class<?>Arr->input->getClass->try->lastDot->action->lastIndexOf->if->action->substring->applyGetters->action->substring->targetMethod->Statement->target->getClass->getMethod->if->Statement->target->getClass->NameGenerator->capitalize->getMethod->if->argTypeString->throw->target->getClass->new->RuntimeException->return->MethodUtil->invoke->catch->throw->new->RuntimeException->th->ex->getTargetException->throw->new->RuntimeException->finally->return
EventHandler#create(Class, Object, String):::Creates an implementation of listenerInterface in which all of the methods in the listener interface apply the handler's action to the target:::return->create
EventHandler#create(Class, Object, String, String):::    /** Creates an implementation of listenerInterface in which all of the methods pass the value of the event expression, eventPropertyName, to the final method in the statement, action, which is applied to the target:::return->create
EventHandler#create(Class, Object, String, String, String):::Creates an implementation of listenerInterface in which the method named listenerMethodName passes the value of the event expression, eventPropertyName, to the final method in the statement, action, which is applied to the target:::handler->new->EventHandler->if->throw->new->NullPointerException->loader->getClassLoader->interfaces->return->AccessController->new->PrivilegedAction<T>->doPrivileged
EventHandler#getClassLoader(Class)::: event handler get class loader:::ReflectUtil->checkPackageAccess->loader->type->getClassLoader->if->Thread->currentThread->getContextClassLoader->if->ClassLoader->getSystemClassLoader->return
EventSetDescriptor#getListenerClassName(Class)::: event set descriptor get listener class name:::className->cls->getName->return->className->className->lastIndexOf->substring
EventSetDescriptor#getMethod(Class, String, int)::: event set descriptor get method:::if->return->method->Introspector->findMethod->if->Modifier->method->getModifiers->isStatic->throw->cls->getName->new->IntrospectionException->return
EventSetDescriptor#getListenerType():::Gets the Class object for the target interface.:::return->get
EventSetDescriptor#setListenerType(Class)::: event set descriptor set listener type:::getWeakReference
EventSetDescriptor#getListenerMethods():::Gets the methods of the target listener interface.:::methods->getListenerMethods0->if->if->new->MethodArr->for->i->setListenerMethods->return
EventSetDescriptor#setListenerMethods(Method[])::: event set descriptor set listener methods:::if->return->if->new->MethodDescriptorArr->for->i->getSoftReference
EventSetDescriptor#getListenerMethods0()::: event set descriptor get listener methods0:::return->get
EventSetDescriptor#getListenerMethodDescriptors():::Gets the MethodDescriptors of the target listener interface.:::return->clone
EventSetDescriptor#getAddListenerMethod():::Gets the method used to add event listeners.:::return->getMethod
EventSetDescriptor#setAddListenerMethod(Method)::: event set descriptor set add listener method:::if->return->if->getClass0->method->getDeclaringClass->setClass0->new->MethodDescriptor->method->getAnnotation->setTransient
EventSetDescriptor#getRemoveListenerMethod():::Gets the method used to remove event listeners.:::return->getMethod
EventSetDescriptor#setRemoveListenerMethod(Method)::: event set descriptor set remove listener method:::if->return->if->getClass0->method->getDeclaringClass->setClass0->new->MethodDescriptor->method->getAnnotation->setTransient
EventSetDescriptor#getGetListenerMethod():::Gets the method used to access the registered event listeners.:::return->getMethod
EventSetDescriptor#setGetListenerMethod(Method)::: event set descriptor set get listener method:::if->return->if->getClass0->method->getDeclaringClass->setClass0->new->MethodDescriptor->method->getAnnotation->setTransient
EventSetDescriptor#setUnicast(boolean):::Mark an event set as unicast (or not).:::
EventSetDescriptor#isUnicast():::Normally event sources are multicast:::return
EventSetDescriptor#setInDefaultEventSet(boolean):::Marks an event set as being in the "default" set (or not):::
EventSetDescriptor#isInDefaultEventSet():::Reports if an event set is in the "default" set.:::return
EventSetDescriptor#appendTo(StringBuilder)::: event set descriptor append to:::appendTo->appendTo->appendTo->getMethod->appendTo->getMethod->appendTo->getMethod->appendTo
EventSetDescriptor#getMethod(MethodDescriptor)::: event set descriptor get method:::return->descriptor->getMethod
ExceptionListener#exceptionThrown(Exception):::This method is called when a recoverable exception has been caught.:::
Expression#execute():::If the invoked method completes normally, the value it returns is copied in the {@code value property:::invoke->setValue
Expression#getValue():::If the value property of this instance is not already set, this method dynamically finds the method with the specified methodName on this target with these arguments and calls it:::if->invoke->setValue->return
Expression#setValue(Object):::Sets the value of this expression to value:::
Expression#instanceName(Object)::: expression instance name:::return->super->instanceName
Expression#toString():::Prints the value of this expression using a Java-style syntax.:::return->instanceName->super->toString
FeatureDescriptor#getName():::Gets the programmatic name of this feature.:::return
FeatureDescriptor#setName(String):::Sets the programmatic name of this feature.:::
FeatureDescriptor#getDisplayName():::Gets the localized display name of this feature.:::if->return->getName->return
FeatureDescriptor#setDisplayName(String):::Sets the localized display name of this feature.:::
FeatureDescriptor#isExpert():::The "expert" flag is used to distinguish between those features that are intended for expert users from those that are intended for normal users.:::return
FeatureDescriptor#setExpert(boolean):::The "expert" flag is used to distinguish between features that are intended for expert users from those that are intended for normal users.:::
FeatureDescriptor#isHidden():::The "hidden" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans.:::return
FeatureDescriptor#setHidden(boolean):::The "hidden" flag is used to identify features that are intended only for tool use, and which should not be exposed to humans.:::
FeatureDescriptor#isPreferred():::The "preferred" flag is used to identify features that are particularly important for presenting to humans.:::return
FeatureDescriptor#setPreferred(boolean):::The "preferred" flag is used to identify features that are particularly important for presenting to humans.:::
FeatureDescriptor#getShortDescription():::Gets the short description of this feature.:::if->return->getDisplayName->return
FeatureDescriptor#setShortDescription(String):::You can associate a short descriptive string with a feature:::
FeatureDescriptor#setValue(String, Object):::Associate a named attribute with this feature.:::getTable->put
FeatureDescriptor#getValue(String):::Retrieve a named attribute with this feature.:::return->get
FeatureDescriptor#attributeNames():::Gets an enumeration of the locale-independent names of this feature.:::return->getTable->keys
FeatureDescriptor#addTable(Hashtable):::Copies all values from the specified attribute table:::if->table->isEmpty->getTable->putAll
FeatureDescriptor#getTable():::Returns the initialized attribute table.:::if->new->Hashtable<>->return
FeatureDescriptor#setTransient(Transient):::Sets the "transient" attribute according to the annotation:::if->getValue->annotation->value->setValue
FeatureDescriptor#isTransient():::Indicates whether the feature is transient.:::value->getValue->return
FeatureDescriptor#setClass0(Class)::: feature descriptor set class0:::getWeakReference
FeatureDescriptor#getClass0()::: feature descriptor get class0:::return->get
FeatureDescriptor#getSoftReference(T):::Creates a new soft reference that refers to the given object.:::return->new->SoftReference<>
FeatureDescriptor#getWeakReference(T):::Creates a new weak reference that refers to the given object.:::return->new->WeakReference<>
FeatureDescriptor#getReturnType(Class, Method):::Resolves the return type of the method.:::if->method->getDeclaringClass->return->TypeResolver->TypeResolver->method->getGenericReturnType->resolveInClass->erase
FeatureDescriptor#getParameterTypes(Class, Method):::Resolves the parameter types of the method.:::if->method->getDeclaringClass->return->TypeResolver->TypeResolver->method->getGenericParameterTypes->resolveInClass->erase
FeatureDescriptor#toString():::Returns a string representation of the object.:::sb->getClass->getName->new->StringBuilder->sb->append->append->appendTo->appendTo->appendTo->appendTo->appendTo->if->isEmpty->sb->append->foreach->entrySet->sb->entry->getKey->append->append->entry->getValue->append->append->sb->sb->length->setLength->sb->append->appendTo->return->sb->append->toString
FeatureDescriptor#appendTo(StringBuilder)::: feature descriptor append to:::
FeatureDescriptor#appendTo(StringBuilder, String, Reference)::: feature descriptor append to:::if->reference->get->appendTo
FeatureDescriptor#appendTo(StringBuilder, String, Object)::: feature descriptor append to:::if->sb->append->append->append->append
FeatureDescriptor#appendTo(StringBuilder, String, boolean)::: feature descriptor append to:::if->sb->append->append
IndexedPropertyChangeEvent#getIndex():::Gets the index of the property that was changed.:::return
IndexedPropertyChangeEvent#appendTo(StringBuilder)::: indexed property change event append to:::sb->append->getIndex->append
IndexedPropertyDescriptor#getIndexedReadMethod():::Gets the method that should be used to read an indexed property value.:::indexedReadMethod->get->if->cls->getClass0->if->isSet->return->nextMethodName->getBaseName->if->type->getIndexedPropertyType0->if->getBaseName->else->args->Introspector->findMethod->if->indexedReadMethodName->equals->Introspector->findMethod->setIndexedReadMethod0->return
IndexedPropertyDescriptor#setIndexedReadMethod(Method):::Sets the method that should be used to read an indexed property value.:::get->findIndexedPropertyType->setIndexedPropertyType->setIndexedReadMethod0
IndexedPropertyDescriptor#setIndexedReadMethod0(Method)::: indexed property descriptor set indexed read method0:::set->if->return->readMethod->getDeclaringClass->setClass0->readMethod->getName->readMethod->getAnnotation->setTransient
IndexedPropertyDescriptor#getIndexedWriteMethod():::Gets the method that should be used to write an indexed property value.:::indexedWriteMethod->get->if->cls->getClass0->if->isSet->return->type->getIndexedPropertyType0->if->try->getIndexedReadMethod->findIndexedPropertyType->setIndexedPropertyType->catch->propType->getPropertyType->if->propType->isArray->propType->getComponentType->finally->if->getBaseName->args->new->Class<?>Arr->Introspector->findMethod->if->if->indexedWriteMethod->getReturnType->equals->setIndexedWriteMethod0->return
IndexedPropertyDescriptor#setIndexedWriteMethod(Method):::Sets the method that should be used to write an indexed property value.:::type->getIndexedReadMethod->findIndexedPropertyType->setIndexedPropertyType->setIndexedWriteMethod0
IndexedPropertyDescriptor#setIndexedWriteMethod0(Method)::: indexed property descriptor set indexed write method0:::set->if->return->writeMethod->getDeclaringClass->setClass0->writeMethod->getName->writeMethod->getAnnotation->setTransient
IndexedPropertyDescriptor#getIndexedPropertyType():::Returns the Java type info for the indexed property:::type->getIndexedPropertyType0->if->try->getIndexedReadMethod->getIndexedWriteMethod->findIndexedPropertyType->setIndexedPropertyType->catch->finally->return
IndexedPropertyDescriptor#setIndexedPropertyType(Class)::: indexed property descriptor set indexed property type:::getWeakReference
IndexedPropertyDescriptor#getIndexedPropertyType0()::: indexed property descriptor get indexed property type0:::return->get
IndexedPropertyDescriptor#findIndexedPropertyType(Method, Method)::: indexed property descriptor find indexed property type:::indexedPropertyType->if->params->getClass0->getParameterTypes->if->throw->new->IntrospectionException->if->throw->new->IntrospectionException->getClass0->getReturnType->if->throw->new->IntrospectionException->if->params->getClass0->getParameterTypes->if->throw->new->IntrospectionException->if->throw->new->IntrospectionException->if->isAssignableFrom->else->if->indexedPropertyType->isAssignableFrom->throw->getName->new->IntrospectionException->propertyType->getPropertyType->if->propertyType->isArray->propertyType->getComponentType->throw->getName->new->IntrospectionException->return
IndexedPropertyDescriptor#equals(Object):::Compares this PropertyDescriptor against the specified object:::if->return->if->other->otherIndexedReadMethod->other->getIndexedReadMethod->otherIndexedWriteMethod->other->getIndexedWriteMethod->if->getIndexedReadMethod->compareMethods->return->if->getIndexedWriteMethod->compareMethods->return->if->getIndexedPropertyType->other->getIndexedPropertyType->return->return->super->equals->return
IndexedPropertyDescriptor#updateGenericsFor(Class)::: indexed property descriptor update generics for:::super->updateGenericsFor->try->get->get->findIndexedPropertyType->setIndexedPropertyType->catch->setIndexedPropertyType->finally
IndexedPropertyDescriptor#hashCode():::Returns a hash code value for the object:::result->super->hashCode->indexedWriteMethodName->hashCode->indexedReadMethodName->hashCode->getIndexedPropertyType->getIndexedPropertyType->hashCode->return
IndexedPropertyDescriptor#appendTo(StringBuilder)::: indexed property descriptor append to:::super->appendTo->appendTo->get->appendTo->get->appendTo
Introspector#getBeanInfo(Class):::Introspect on a Java Bean and learn about all its properties, exposed methods, and events:::if->ReflectUtil->isPackageAccessible->return->new->Introspector->getBeanInfo->context->ThreadGroupContext->getContext->beanInfo->synchronized->context->getBeanInfo->if->new->Introspector->getBeanInfo->synchronized->context->putBeanInfo->return
Introspector#getBeanInfo(Class, int):::Introspect on a Java bean and learn about all its properties, exposed methods, and events, subject to some control flags:::return->getBeanInfo
Introspector#getBeanInfo(Class, Class):::Introspect on a Java bean and learn all about its properties, exposed methods, below a given "stop" point:::return->getBeanInfo
Introspector#getBeanInfo(Class, Class, int):::Introspect on a Java Bean and learn about all its properties, exposed methods and events, below a given stopClass point subject to some control flags:::bi->if->getBeanInfo->else->new->Introspector->getBeanInfo->return
Introspector#decapitalize(String):::Utility method to take a string and convert it to normal Java variable name capitalization:::if->name->length->return->if->name->length->Character->name->charAt->isUpperCase->Character->name->charAt->isUpperCase->return->chars->name->toCharArray->Character->toLowerCase->return->new->String
Introspector#getBeanInfoSearchPath()::: introspector get bean info search path:::return->ThreadGroupContext->getContext->getBeanInfoFinder->getPackages
Introspector#setBeanInfoSearchPath(String[])::: introspector set bean info search path:::sm->System->getSecurityManager->if->sm->checkPropertiesAccess->ThreadGroupContext->getContext->getBeanInfoFinder->setPackages
Introspector#flushCaches()::: introspector flush caches:::synchronized->ThreadGroupContext->getContext->clearBeanInfoCache->declaredMethodCache->clear
Introspector#flushFromCaches(Class):::Flush the Introspector's internal cached information for a given class:::if->throw->new->NullPointerException->synchronized->ThreadGroupContext->getContext->removeBeanInfo->declaredMethodCache->put
Introspector#getBeanInfo():::Constructs a GenericBeanInfo class from the state of the Introspector:::bd->getTargetBeanDescriptor->mds->getTargetMethodInfo->esds->getTargetEventInfo->pds->getTargetPropertyInfo->defaultEvent->getTargetDefaultEventIndex->defaultProperty->getTargetDefaultPropertyIndex->return->new->GenericBeanInfo
Introspector#findExplicitBeanInfo(Class):::Looks for an explicit BeanInfo class that corresponds to the Class:::return->ThreadGroupContext->getContext->getBeanInfoFinder->find
Introspector#getTargetPropertyInfo()::: introspector get target property info:::explicitProperties->if->getPropertyDescriptors->if->getPropertyDescriptors->addPropertyDescriptors->for->i->if->addPropertyDescriptors->else->foreach->ClassInfo->get->getProperties->entrySet->entry->getValue->getIndexed->new->IndexedPropertyDescriptor->new->PropertyDescriptor->addPropertyDescriptor->annotation->getAnnotation->if->annotation->defaultProperty->isEmpty->annotation->defaultProperty->processPropertyDescriptors->result->properties->values->properties->size->new->PropertyDescriptorArr->toArray->if->for->i->return
Introspector#addPropertyDescriptor(PropertyDescriptor):::Adds the property descriptor to the list store.:::propName->pd->getName->list->pdStore->get->if->new->ArrayList<>->pdStore->put->if->pd->getClass0->read->pd->getReadMethod->write->pd->getWriteMethod->cls->if->read->getGenericReturnType->if->write->getGenericParameterTypes->if->ipd->readI->ipd->getIndexedReadMethod->writeI->ipd->getIndexedWriteMethod->if->readI->getGenericReturnType->if->writeI->getGenericParameterTypes->if->new->IndexedPropertyDescriptor->pd->updateGenericsFor->else->if->new->PropertyDescriptor->pd->updateGenericsFor->list->add
Introspector#addPropertyDescriptors(PropertyDescriptor[])::: introspector add property descriptors:::if->foreach->addPropertyDescriptor
Introspector#getPropertyDescriptors(BeanInfo)::: introspector get property descriptors:::descriptors->info->getPropertyDescriptors->index->info->getDefaultPropertyIndex->if->getName->return
Introspector#processPropertyDescriptors():::Populates the property descriptor table by merging the lists of Property descriptors.:::if->new->TreeMap<>->list->pd->gpd->spd->ipd->igpd->ispd->it->pdStore->values->iterator->while->it->hasNext->it->next->for->i->list->size->for->i->list->size->if->if->else->if->else->if->mergePropertyWithIndexedProperty->else->if->mergePropertyWithIndexedProperty->else->mergePropertyDescriptor->if->else->mergePropertyDescriptor->if->else->propType->pd->getPropertyType->ipropType->ipd->getIndexedPropertyType->if->propType->isArray->propType->getComponentType->pd->getClass0->ipd->getClass0->isAssignableFrom->new->IndexedPropertyDescriptor->new->IndexedPropertyDescriptor->else->if->pd->getClass0->ipd->getClass0->isAssignableFrom->pd->getClass0->ipd->getClass0->isAssignableFrom->new->PropertyDescriptor->new->PropertyDescriptor->else->else->if->if->mergePropertyWithIndexedProperty->if->mergePropertyWithIndexedProperty->if->else->if->mergePropertyWithIndexedProperty->else->if->mergePropertyWithIndexedProperty->else->mergePropertyDescriptor->else->if->if->mergePropertyDescriptor->if->mergePropertyDescriptor->else->if->if->mergePropertyDescriptor->if->mergePropertyDescriptor->else->if->else->if->if->if->ipd->getIndexedReadMethod->ipd->getIndexedWriteMethod->new->PropertyDescriptor->if->list->size->list->get->if->properties->pd->getName->put
Introspector#isAssignable(Class, Class)::: introspector is assignable:::return->current->isAssignableFrom
Introspector#mergePropertyWithIndexedProperty(PropertyDescriptor, IndexedPropertyDescriptor)::: introspector merge property with indexed property:::type->pd->getPropertyType->if->type->isArray->type->getComponentType->ipd->getIndexedPropertyType->return->pd->getClass0->ipd->getClass0->isAssignableFrom->new->IndexedPropertyDescriptor->new->IndexedPropertyDescriptor->return
Introspector#mergePropertyDescriptor(IndexedPropertyDescriptor, PropertyDescriptor):::Adds the property descriptor to the indexedproperty descriptor only if the types are the same:::result->propType->pd->getPropertyType->ipropType->ipd->getIndexedPropertyType->if->propType->isArray->propType->getComponentType->if->pd->getClass0->ipd->getClass0->isAssignableFrom->new->IndexedPropertyDescriptor->else->new->IndexedPropertyDescriptor->else->if->ipd->getReadMethod->ipd->getWriteMethod->if->pd->getClass0->ipd->getClass0->isAssignableFrom->new->PropertyDescriptor->else->new->PropertyDescriptor->else->if->pd->getClass0->ipd->getClass0->isAssignableFrom->else->write->result->getWriteMethod->read->result->getReadMethod->if->result->getClass0->NameGenerator->result->getName->capitalize->findMethod->if->try->result->setReadMethod->catch->finally->if->result->getClass0->NameGenerator->result->getName->capitalize->new->Class<?>Arr->FeatureDescriptor->result->getClass0->getReturnType->findMethod->if->try->result->setWriteMethod->catch->finally->return
Introspector#mergePropertyDescriptor(PropertyDescriptor, PropertyDescriptor)::: introspector merge property descriptor:::if->pd1->getClass0->pd2->getClass0->isAssignableFrom->return->new->PropertyDescriptor->else->return->new->PropertyDescriptor
Introspector#mergePropertyDescriptor(IndexedPropertyDescriptor, IndexedPropertyDescriptor)::: introspector merge property descriptor:::if->ipd1->getClass0->ipd2->getClass0->isAssignableFrom->return->new->IndexedPropertyDescriptor->else->return->new->IndexedPropertyDescriptor
Introspector#getTargetEventInfo()::: introspector get target event info:::if->new->HashMap<>->explicitEvents->if->explicitBeanInfo->getEventSetDescriptors->ix->explicitBeanInfo->getDefaultEventIndex->if->getName->if->supers->superBeanInfo->getEventSetDescriptors->for->i->ix->superBeanInfo->getDefaultEventIndex->if->getName->for->i->if->for->i->else->foreach->ClassInfo->get->getEventSets->entrySet->methods->new->ArrayList<>->foreach->ClassInfo->entry->getValue->getListenerType->get->getMethods->if->isEventHandler->methods->add->entry->getKey->entry->getValue->methods->methods->size->new->MethodArr->toArray->new->EventSetDescriptor->addEvent->annotation->getAnnotation->if->annotation->defaultEventSet->isEmpty->annotation->defaultEventSet->result->if->events->size->else->events->size->new->EventSetDescriptorArr->events->values->toArray->if->for->i->return
Introspector#addEvent(EventSetDescriptor)::: introspector add event:::key->esd->getName->if->esd->getName->equals->old->events->get->if->events->put->return->composite->new->EventSetDescriptor->events->put
Introspector#getTargetMethodInfo()::: introspector get target method info:::if->new->HashMap<>->explicitMethods->if->explicitBeanInfo->getMethodDescriptors->if->supers->superBeanInfo->getMethodDescriptors->for->i->for->i->if->for->i->else->foreach->ClassInfo->get->getMethods->new->MethodDescriptor->addMethod->result->methods->size->new->MethodDescriptorArr->methods->values->toArray->return
Introspector#addMethod(MethodDescriptor)::: introspector add method:::name->md->getName->old->methods->get->if->methods->put->return->p1->md->getParamNames->p2->old->getParamNames->match->if->for->i->if->composite->new->MethodDescriptor->methods->put->return->longKey->makeQualifiedMethodName->methods->get->if->methods->put->return->composite->new->MethodDescriptor->methods->put
Introspector#makeQualifiedMethodName(String, String[]):::Creates a key for a method in a method cache.:::sb->new->StringBuilder->sb->append->for->i->return->sb->toString
Introspector#getTargetDefaultEventIndex()::: introspector get target default event index:::return
Introspector#getTargetDefaultPropertyIndex()::: introspector get target default property index:::return
Introspector#getTargetBeanDescriptor()::: introspector get target bean descriptor:::if->bd->explicitBeanInfo->getBeanDescriptor->if->return->return->findCustomizerClass->new->BeanDescriptor
Introspector#findCustomizerClass(Class)::: introspector find customizer class:::name->type->getName->try->ClassFinder->type->getClassLoader->findClass->if->isAssignableFrom->isAssignableFrom->return->catch->finally->return
Introspector#isEventHandler(Method)::: introspector is event handler:::argTypes->m->getGenericParameterTypes->if->return->return->TypeResolver->TypeResolver->resolveInClass->erase->isSubclass
Introspector#internalFindMethod(Class, String, int, Class[]):::Internal support for finding a target methodName with a given parameter list on a given class.:::for->cl->cl->getSuperclass->ifcs->start->getInterfaces->for->i->return
Introspector#findMethod(Class, String, int):::Find a target methodName on a given class.:::return->findMethod
Introspector#findMethod(Class, String, int, Class[]):::Find a target methodName with specific parameter list on a given class:::if->return->return->internalFindMethod
Introspector#isSubclass(Class, Class):::Return true if class a is either equivalent to class b, or if class a is a subclass of class b, i.e:::if->return->if->return->for->x->x->getSuperclass->return
Introspector#instantiate(Class, String):::Try to create an instance of a named class:::cl->sibling->getClassLoader->cls->ClassFinder->findClass->return->cls->newInstance
GenericBeanInfo#getPropertyDescriptors()::: generic bean info get property descriptors:::return
GenericBeanInfo#getDefaultPropertyIndex()::: generic bean info get default property index:::return
GenericBeanInfo#getEventSetDescriptors()::: generic bean info get event set descriptors:::return
GenericBeanInfo#getDefaultEventIndex()::: generic bean info get default event index:::return
GenericBeanInfo#getMethodDescriptors()::: generic bean info get method descriptors:::return
GenericBeanInfo#getBeanDescriptor()::: generic bean info get bean descriptor:::return
GenericBeanInfo#getIcon(int)::: generic bean info get icon:::targetBeanInfo->getTargetBeanInfo->if->return->targetBeanInfo->getIcon->return->super->getIcon
GenericBeanInfo#getTargetBeanInfo()::: generic bean info get target bean info:::if->return->targetBeanInfo->get->if->ThreadGroupContext->getContext->getBeanInfoFinder->getBeanClass->find->if->new->SoftReference<>->return
MetaData.NullPersistenceDelegate#initialize(Class, Object, Object, Encoder)::: null persistence delegate initialize:::
MetaData.NullPersistenceDelegate#instantiate(Object, Encoder)::: null persistence delegate instantiate:::return
MetaData.NullPersistenceDelegate#writeObject(Object, Encoder)::: null persistence delegate write object:::
MetaData.EnumPersistenceDelegate#mutatesTo(Object, Object)::: enum persistence delegate mutates to:::return
MetaData.EnumPersistenceDelegate#instantiate(Object, Encoder)::: enum persistence delegate instantiate:::e->return->new->ObjectArr->e->getDeclaringClass->e->name->new->Expression
MetaData.PrimitivePersistenceDelegate#mutatesTo(Object, Object)::: primitive persistence delegate mutates to:::return->oldInstance->equals
MetaData.PrimitivePersistenceDelegate#instantiate(Object, Encoder)::: primitive persistence delegate instantiate:::return->oldInstance->getClass->new->ObjectArr->oldInstance->toString->new->Expression
MetaData.ArrayPersistenceDelegate#mutatesTo(Object, Object)::: array persistence delegate mutates to:::return->oldInstance->getClass->newInstance->getClass->Array->getLength->Array->getLength
MetaData.ArrayPersistenceDelegate#instantiate(Object, Encoder)::: array persistence delegate instantiate:::oldClass->oldInstance->getClass->return->new->ObjectArr->oldClass->getComponentType->Array->getLength->new->Expression
MetaData.ArrayPersistenceDelegate#initialize(Class, Object, Object, Encoder)::: array persistence delegate initialize:::n->Array->getLength->for->i
MetaData.ProxyPersistenceDelegate#instantiate(Object, Encoder)::: proxy persistence delegate instantiate:::type->oldInstance->getClass->p->ih->getInvocationHandler->if->eh->args->new->Vector<>->args->type->getInterfaces->add->args->eh->getTarget->add->args->eh->getAction->add->if->eh->getEventPropertyName->args->eh->getEventPropertyName->add->if->eh->getListenerMethodName->args->setSize->args->eh->getListenerMethodName->add->return->args->toArray->new->Expression->return->new->ObjectArr->type->getClassLoader->type->getInterfaces->new->Expression
MetaData.java_lang_String_PersistenceDelegate#instantiate(Object, Encoder):::java_lang_ string_ persistence delegate instantiate:::return
MetaData.java_lang_String_PersistenceDelegate#writeObject(Object, Encoder):::java_lang_ string_ persistence delegate write object:::
MetaData.java_lang_Class_PersistenceDelegate#mutatesTo(Object, Object):::java_lang_ class_ persistence delegate mutates to:::return->oldInstance->equals
MetaData.java_lang_Class_PersistenceDelegate#instantiate(Object, Encoder):::java_lang_ class_ persistence delegate instantiate:::c->if->c->isPrimitive->field->try->PrimitiveWrapperMap->c->getName->getType->getDeclaredField->catch->println->finally->return->new->ObjectArr->new->Expression->else->if->return->new->ObjectArr->new->Expression->else->if->return->new->ObjectArr->new->Expression->else->newInstance->new->ObjectArr->c->getName->new->Expression->c->getClassLoader->return
MetaData.java_lang_reflect_Field_PersistenceDelegate#mutatesTo(Object, Object):::java_lang_reflect_ field_ persistence delegate mutates to:::return->oldInstance->equals
MetaData.java_lang_reflect_Field_PersistenceDelegate#instantiate(Object, Encoder):::java_lang_reflect_ field_ persistence delegate instantiate:::f->return->f->getDeclaringClass->new->ObjectArr->f->getName->new->Expression
MetaData.java_lang_reflect_Method_PersistenceDelegate#mutatesTo(Object, Object):::java_lang_reflect_ method_ persistence delegate mutates to:::return->oldInstance->equals
MetaData.java_lang_reflect_Method_PersistenceDelegate#instantiate(Object, Encoder):::java_lang_reflect_ method_ persistence delegate instantiate:::m->return->m->getDeclaringClass->new->ObjectArr->m->getName->m->getParameterTypes->new->Expression
MetaData.java_util_Date_PersistenceDelegate#mutatesTo(Object, Object):::java_util_ date_ persistence delegate mutates to:::if->super->mutatesTo->return->oldDate->newDate->return->oldDate->getTime->newDate->getTime
MetaData.java_util_Date_PersistenceDelegate#instantiate(Object, Encoder):::java_util_ date_ persistence delegate instantiate:::date->return->date->getClass->new->ObjectArr->date->getTime->new->Expression
MetaData.java_sql_Timestamp_PersistenceDelegate#getNanosMethod():::java_sql_ timestamp_ persistence delegate get nanos method:::try->c->Class->ClassLoader->getPlatformClassLoader->forName->return->c->getMethod->catch->return->throw->new->AssertionError->finally
MetaData.java_sql_Timestamp_PersistenceDelegate#getNanos(Object):::Invoke Timstamp getNanos.:::if->throw->new->AssertionError->try->return->getNanosMethod->invoke->catch->cause->e->getCause->if->throw->if->throw->throw->new->AssertionError->throw->new->AssertionError->finally
MetaData.java_sql_Timestamp_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_sql_ timestamp_ persistence delegate initialize:::nanos->getNanos->if->getNanos->out->new->ObjectArr->new->Statement->writeStatement
MetaData.java_util_Collections#mutatesTo(Object, Object):::java_util_ collections mutates to:::if->super->mutatesTo->return->if->return->oldInstance->equals->oldC->newC->return->oldC->size->newC->size->oldC->containsAll
MetaData.java_util_Collections#initialize(Class, Object, Object, Encoder):::java_util_ collections initialize:::
MetaData.java_util_Collections.EmptyList_PersistenceDelegate#instantiate(Object, Encoder)::: empty list_ persistence delegate instantiate:::return->new->Expression
MetaData.java_util_Collections.EmptySet_PersistenceDelegate#instantiate(Object, Encoder)::: empty set_ persistence delegate instantiate:::return->new->Expression
MetaData.java_util_Collections.EmptyMap_PersistenceDelegate#instantiate(Object, Encoder)::: empty map_ persistence delegate instantiate:::return->new->Expression
MetaData.java_util_Collections.SingletonList_PersistenceDelegate#instantiate(Object, Encoder)::: singleton list_ persistence delegate instantiate:::list->return->new->ObjectArr->list->get->new->Expression
MetaData.java_util_Collections.SingletonSet_PersistenceDelegate#instantiate(Object, Encoder)::: singleton set_ persistence delegate instantiate:::set->return->new->ObjectArr->set->iterator->next->new->Expression
MetaData.java_util_Collections.SingletonMap_PersistenceDelegate#instantiate(Object, Encoder)::: singleton map_ persistence delegate instantiate:::map->key->map->keySet->iterator->next->return->new->ObjectArr->map->get->new->Expression
MetaData.java_util_Collections.UnmodifiableCollection_PersistenceDelegate#instantiate(Object, Encoder)::: unmodifiable collection_ persistence delegate instantiate:::list->new->ArrayList<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.UnmodifiableList_PersistenceDelegate#instantiate(Object, Encoder)::: unmodifiable list_ persistence delegate instantiate:::list->new->LinkedList<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.UnmodifiableRandomAccessList_PersistenceDelegate#instantiate(Object, Encoder)::: unmodifiable random access list_ persistence delegate instantiate:::list->new->ArrayList<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.UnmodifiableSet_PersistenceDelegate#instantiate(Object, Encoder)::: unmodifiable set_ persistence delegate instantiate:::set->new->HashSet<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.UnmodifiableSortedSet_PersistenceDelegate#instantiate(Object, Encoder)::: unmodifiable sorted set_ persistence delegate instantiate:::set->new->TreeSet<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.UnmodifiableMap_PersistenceDelegate#instantiate(Object, Encoder)::: unmodifiable map_ persistence delegate instantiate:::map->new->HashMap<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.UnmodifiableSortedMap_PersistenceDelegate#instantiate(Object, Encoder)::: unmodifiable sorted map_ persistence delegate instantiate:::map->new->TreeMap<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.SynchronizedCollection_PersistenceDelegate#instantiate(Object, Encoder)::: synchronized collection_ persistence delegate instantiate:::list->new->ArrayList<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.SynchronizedList_PersistenceDelegate#instantiate(Object, Encoder)::: synchronized list_ persistence delegate instantiate:::list->new->LinkedList<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.SynchronizedRandomAccessList_PersistenceDelegate#instantiate(Object, Encoder)::: synchronized random access list_ persistence delegate instantiate:::list->new->ArrayList<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.SynchronizedSet_PersistenceDelegate#instantiate(Object, Encoder)::: synchronized set_ persistence delegate instantiate:::set->new->HashSet<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.SynchronizedSortedSet_PersistenceDelegate#instantiate(Object, Encoder)::: synchronized sorted set_ persistence delegate instantiate:::set->new->TreeSet<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.SynchronizedMap_PersistenceDelegate#instantiate(Object, Encoder)::: synchronized map_ persistence delegate instantiate:::map->new->HashMap<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collections.SynchronizedSortedMap_PersistenceDelegate#instantiate(Object, Encoder)::: synchronized sorted map_ persistence delegate instantiate:::map->new->TreeMap<>->return->new->ObjectArr->new->Expression
MetaData.java_util_Collection_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_util_ collection_ persistence delegate initialize:::oldO->newO->if->newO->size->new->ObjectArr->invokeStatement->for->i->oldO->iterator->i->hasNext
MetaData.java_util_List_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_util_ list_ persistence delegate initialize:::oldO->newO->oldSize->oldO->size->newSize->newO->size->if->new->ObjectArr->invokeStatement->for->i->for->i
MetaData.java_util_Map_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_util_ map_ persistence delegate initialize:::oldMap->newMap->if->foreach->newMap->keySet->toArray->if->oldMap->containsKey->new->ObjectArr->invokeStatement->foreach->oldMap->keySet->oldGetExp->new->ObjectArr->new->Expression->newGetExp->new->ObjectArr->new->Expression->try->oldValue->oldGetExp->getValue->newValue->newGetExp->getValue->out->writeExpression->if->Objects->out->get->equals->new->ObjectArr->invokeStatement->else->if->newMap->containsKey->new->ObjectArr->invokeStatement->catch->out->getExceptionListener->exceptionThrown->finally
MetaData.java_awt_Insets_PersistenceDelegate#mutatesTo(Object, Object):::java_awt_ insets_ persistence delegate mutates to:::return->oldInstance->equals
MetaData.java_awt_Insets_PersistenceDelegate#instantiate(Object, Encoder):::java_awt_ insets_ persistence delegate instantiate:::insets->args->new->ObjectArr->return->insets->getClass->new->Expression
MetaData.java_awt_Font_PersistenceDelegate#mutatesTo(Object, Object):::java_awt_ font_ persistence delegate mutates to:::return->oldInstance->equals
MetaData.java_awt_Font_PersistenceDelegate#instantiate(Object, Encoder):::java_awt_ font_ persistence delegate instantiate:::font->count->family->style->size->basic->font->getAttributes->clone->basic->size->new->HashMap<>->foreach->basic->keySet->value->basic->get->if->clone->put->if->if->else->if->if->equals->else->if->equals->else->if->if->equals->else->if->equals->else->if->if->number->number->intValue->if->number->floatValue->type->font->getClass->if->clone->size->return->new->ObjectArr->new->Expression->if->return->new->ObjectArr->new->Expression->return->new->ObjectArr->Font->getFont->new->Expression
MetaData.java_awt_AWTKeyStroke_PersistenceDelegate#mutatesTo(Object, Object):::java_awt_ key stroke_ persistence delegate mutates to:::return->oldInstance->equals
MetaData.java_awt_AWTKeyStroke_PersistenceDelegate#instantiate(Object, Encoder):::java_awt_ key stroke_ persistence delegate instantiate:::key->ch->key->getKeyChar->code->key->getKeyCode->mask->key->getModifiers->onKeyRelease->key->isOnKeyRelease->args->if->new->ObjectArr->new->ObjectArr->else->if->if->new->ObjectArr->new->ObjectArr->else->if->new->ObjectArr->if->throw->new->IllegalStateException->type->key->getClass->name->type->getName->index->name->lastIndexOf->if->name->substring->return->new->Expression
MetaData.StaticFieldsPersistenceDelegate#installFields(Encoder, Class)::: static fields persistence delegate install fields:::if->Modifier->cls->getModifiers->isPublic->isPackageAccessible->fields->cls->getFields->for->i
MetaData.StaticFieldsPersistenceDelegate#instantiate(Object, Encoder)::: static fields persistence delegate instantiate:::throw->new->RuntimeException
MetaData.StaticFieldsPersistenceDelegate#writeObject(Object, Encoder)::: static fields persistence delegate write object:::if->out->getAttribute->out->setAttribute->oldInstance->getClass->installFields->super->writeObject
MetaData.java_awt_MenuShortcut_PersistenceDelegate#mutatesTo(Object, Object):::java_awt_ menu shortcut_ persistence delegate mutates to:::return->oldInstance->equals
MetaData.java_awt_MenuShortcut_PersistenceDelegate#instantiate(Object, Encoder):::java_awt_ menu shortcut_ persistence delegate instantiate:::m->return->m->getClass->new->ObjectArr->m->getKey->Boolean->m->usesShiftModifier->valueOf->new->Expression
MetaData.java_awt_Component_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_awt_ component_ persistence delegate initialize:::super->initialize->c->c2->if->oldBackground->c->isBackgroundSet->c->getBackground->newBackground->c2->isBackgroundSet->c2->getBackground->if->Objects->equals->new->ObjectArr->invokeStatement->oldForeground->c->isForegroundSet->c->getForeground->newForeground->c2->isForegroundSet->c2->getForeground->if->Objects->equals->new->ObjectArr->invokeStatement->oldFont->c->isFontSet->c->getFont->newFont->c2->isFontSet->c2->getFont->if->Objects->equals->new->ObjectArr->invokeStatement->p->c->getParent->if->p->getLayout->locationCorrect->c->getLocation->c2->getLocation->equals->sizeCorrect->c->getSize->c2->getSize->equals->if->new->ObjectArr->c->getBounds->invokeStatement->else->if->new->ObjectArr->c->getLocation->invokeStatement->else->if->new->ObjectArr->c->getSize->invokeStatement
MetaData.java_awt_Container_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_awt_ container_ persistence delegate initialize:::super->initialize->if->return->oldC->oldChildren->oldC->getComponents->newC->newChildren->new->java.awt.ComponentArr->newC->getComponents->layout->oldC->getLayout->oldC->getLayout->oldLayeredPane->for->i
MetaData.java_awt_Choice_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_awt_ choice_ persistence delegate initialize:::super->initialize->m->n->for->i->n->getItemCount->m->getItemCount
MetaData.java_awt_Menu_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_awt_ menu_ persistence delegate initialize:::super->initialize->m->n->for->i->n->getItemCount->m->getItemCount
MetaData.java_awt_MenuBar_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_awt_ menu bar_ persistence delegate initialize:::super->initialize->m->n->for->i->n->getMenuCount->m->getMenuCount
MetaData.java_awt_List_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_awt_ list_ persistence delegate initialize:::super->initialize->m->n->for->i->n->getItemCount->m->getItemCount
MetaData.java_awt_BorderLayout_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_awt_ border layout_ persistence delegate initialize:::super->initialize->oldLayout->newLayout->foreach->oldC->oldLayout->getLayoutComponent->newC->newLayout->getLayoutComponent->if->new->ObjectArr->invokeStatement
MetaData.java_awt_CardLayout_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_awt_ card layout_ persistence delegate initialize:::super->initialize->if->getVector->isEmpty->foreach->getVector->args->MetaData->getPrivateFieldValue->MetaData->getPrivateFieldValue->invokeStatement
MetaData.java_awt_CardLayout_PersistenceDelegate#mutatesTo(Object, Object):::java_awt_ card layout_ persistence delegate mutates to:::return->super->mutatesTo->getVector->isEmpty
MetaData.java_awt_CardLayout_PersistenceDelegate#getVector(Object):::java_awt_ card layout_ persistence delegate get vector:::return->MetaData->getPrivateFieldValue
MetaData.java_awt_GridBagLayout_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::java_awt_ grid bag layout_ persistence delegate initialize:::super->initialize->if->getHashtable->isEmpty->foreach->getHashtable->entrySet->args->entry->getKey->entry->getValue->invokeStatement
MetaData.java_awt_GridBagLayout_PersistenceDelegate#mutatesTo(Object, Object):::java_awt_ grid bag layout_ persistence delegate mutates to:::return->super->mutatesTo->getHashtable->isEmpty
MetaData.java_awt_GridBagLayout_PersistenceDelegate#getHashtable(Object):::java_awt_ grid bag layout_ persistence delegate get hashtable:::return->MetaData->getPrivateFieldValue
MetaData.javax_swing_JFrame_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::javax_swing_ frame_ persistence delegate initialize:::super->initialize->oldC->newC->oldV->oldC->isVisible->newV->newC->isVisible->if->executeStatements->new->ObjectArr->Boolean->valueOf->invokeStatement
MetaData.javax_swing_DefaultListModel_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::javax_swing_ default list model_ persistence delegate initialize:::super->initialize->m->n->for->i->n->getSize->m->getSize
MetaData.javax_swing_DefaultComboBoxModel_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::javax_swing_ default combo box model_ persistence delegate initialize:::super->initialize->m->for->i->m->getSize
MetaData.javax_swing_tree_DefaultMutableTreeNode_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::javax_swing_tree_ default mutable tree node_ persistence delegate initialize:::super->initialize->m->n->for->i->n->getChildCount->m->getChildCount
MetaData.javax_swing_ToolTipManager_PersistenceDelegate#instantiate(Object, Encoder):::javax_swing_ tool tip manager_ persistence delegate instantiate:::return->new->ObjectArr->new->Expression
MetaData.javax_swing_JTabbedPane_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::javax_swing_ tabbed pane_ persistence delegate initialize:::super->initialize->p->for->i->p->getTabCount
MetaData.javax_swing_Box_PersistenceDelegate#mutatesTo(Object, Object):::javax_swing_ box_ persistence delegate mutates to:::return->super->mutatesTo->getAxis->getAxis->equals
MetaData.javax_swing_Box_PersistenceDelegate#instantiate(Object, Encoder):::javax_swing_ box_ persistence delegate instantiate:::return->oldInstance->getClass->new->ObjectArr->getAxis->new->Expression
MetaData.javax_swing_Box_PersistenceDelegate#getAxis(Object):::javax_swing_ box_ persistence delegate get axis:::box->return->MetaData->box->getLayout->getPrivateFieldValue
MetaData.javax_swing_JMenu_PersistenceDelegate#initialize(Class, Object, Object, Encoder):::javax_swing_ menu_ persistence delegate initialize:::super->initialize->m->c->m->getMenuComponents->for->i
MetaData.javax_swing_border_MatteBorder_PersistenceDelegate#instantiate(Object, Encoder):::javax_swing_border_ matte border_ persistence delegate instantiate:::border->insets->border->getBorderInsets->object->border->getTileIcon->if->border->getMatteColor->args->new->ObjectArr->return->border->getClass->new->Expression
MetaData.sun_swing_PrintColorUIResource_PersistenceDelegate#mutatesTo(Object, Object):::sun_swing_ print color resource_ persistence delegate mutates to:::return->oldInstance->equals
MetaData.sun_swing_PrintColorUIResource_PersistenceDelegate#instantiate(Object, Encoder):::sun_swing_ print color resource_ persistence delegate instantiate:::color->args->new->ObjectArr->color->getRGB->return->new->Expression
MetaData#getPersistenceDelegate(Class)::: meta data get persistence delegate:::if->return->if->isAssignableFrom->return->if->XMLEncoder->primitiveTypeFor->return->if->type->isArray->if->new->ArrayPersistenceDelegate->return->try->if->isProxyClass->if->new->ProxyPersistenceDelegate->return->catch->finally->typeName->type->getName->pd->getBeanAttribute->if->internalPersistenceDelegates->get->if->return->internalPersistenceDelegates->put->try->name->type->getName->c->Class->name->replace->forName->c->newInstance->internalPersistenceDelegates->put->catch->properties->getConstructorProperties->if->new->DefaultPersistenceDelegate->internalPersistenceDelegates->put->println->finally->return
MetaData#getConstructorProperties(Class)::: meta data get constructor properties:::names->length->foreach->type->getConstructors->value->getAnnotationValue->if->isValid->return
MetaData#getAnnotationValue(Constructor)::: meta data get annotation value:::annotation->constructor->getAnnotation->return->annotation->value
MetaData#isValid(Constructor, String[])::: meta data is valid:::parameters->constructor->getParameterTypes->if->return->foreach->if->return->return
MetaData#getBeanAttribute(Class, String)::: meta data get bean attribute:::try->return->Introspector->getBeanInfo->getBeanDescriptor->getValue->catch->return->finally
MetaData#getPrivateFieldValue(Object, String)::: meta data get private field value:::field->fields->get->if->index->name->lastIndexOf->className->name->substring->fieldName->name->substring->AccessController->new->PrivilegedAction<Field>->doPrivileged->fields->put->try->return->field->get->catch->throw->new->IllegalStateException->finally
MethodDescriptor#getMethod():::Gets the method that this MethodDescriptor encapsulates.:::method->get->if->cls->getClass0->name->getName->if->params->getParams->if->for->i->else->Introspector->findMethod->setMethod->return
MethodDescriptor#setMethod(Method)::: method descriptor set method:::if->return->if->getClass0->method->getDeclaringClass->setClass0->getClass0->getParameterTypes->setParams->set
MethodDescriptor#setParams(Class[])::: method descriptor set params:::if->return->new->StringArr->new->ArrayList<>->for->i
MethodDescriptor#getParamNames()::: method descriptor get param names:::return
MethodDescriptor#getParams()::: method descriptor get params:::clss->params->size->new->Class<?>Arr->for->i->params->size->return
MethodDescriptor#getParameterDescriptors():::Gets the ParameterDescriptor for each of this MethodDescriptor's method's parameters.:::return->clone
MethodDescriptor#resolve(Method, Method)::: method descriptor resolve:::if->return->if->return->return->oldMethod->isSynthetic->newMethod->isSynthetic
MethodDescriptor#appendTo(StringBuilder)::: method descriptor append to:::get->appendTo->if->sb->append->foreach->sb->append->append->sb->sb->length->setLength->sb->append
MethodRef#set(Method)::: method ref set:::if->else->method->toGenericString->new->SoftReference<>->method->getDeclaringClass->new->WeakReference<Class<?>>
MethodRef#isSet()::: method ref is set:::return
MethodRef#get()::: method ref get:::if->return->method->get->if->get->find->if->return->new->SoftReference<>->return->method->getDeclaringClass->isPackageAccessible
MethodRef#find(Class, String)::: method ref find:::if->foreach->type->getMethods->if->type->method->getDeclaringClass->equals->if->method->toGenericString->equals->return->return
NameGenerator#clear():::Clears the name cache:::valueToName->clear->nameToCount->clear
NameGenerator#unqualifiedClassName(Class):::Returns the root name of the class.:::if->type->isArray->return->type->getComponentType->unqualifiedClassName->name->type->getName->return->name->name->lastIndexOf->substring
NameGenerator#capitalize(String):::Returns a String which capitalizes the first letter of the string.:::if->name->length->return->return->name->substring->toUpperCase->name->substring
NameGenerator#instanceName(Object):::Returns a unique string which identifies the object instance:::if->return->if->return->unqualifiedClassName->else->result->valueToName->get->if->return->type->instance->getClass->className->unqualifiedClassName->size->nameToCount->get->instanceNumber->intValue->nameToCount->put->valueToName->put->return
PersistenceDelegate#writeObject(Object, Encoder):::The writeObject is a single entry point to the persistence and is used by an Encoder in the traditional mode of delegation:::newInstance->out->get->if->mutatesTo->out->remove->out->instantiate->writeExpression->else->oldInstance->getClass->initialize
PersistenceDelegate#mutatesTo(Object, Object):::Returns true if an equivalent copy of oldInstance may be created by applying a series of statements to newInstance:::return->oldInstance->getClass->newInstance->getClass
PersistenceDelegate#instantiate(Object, Encoder):::Returns an expression whose value is oldInstance:::
PersistenceDelegate#initialize(Class, Object, Object, Encoder):::Produce a series of statements with side effects on newInstance so that the new instance becomes equivalent to oldInstance:::superType->type->getSuperclass->info->out->getPersistenceDelegate->info->initialize
PropertyChangeEvent#getPropertyName():::Gets the programmatic name of the property that was changed.:::return
PropertyChangeEvent#getNewValue():::Gets the new value for the property, expressed as an Object.:::return
PropertyChangeEvent#getOldValue():::Gets the old value for the property, expressed as an Object.:::return
PropertyChangeEvent#setPropagationId(Object):::Sets the propagationId object for the event.:::
PropertyChangeEvent#getPropagationId():::The "propagationId" field is reserved for future use:::return
PropertyChangeEvent#toString():::Returns a string representation of the object.:::sb->getClass->getName->new->StringBuilder->sb->append->getPropertyName->append->appendTo->sb->append->getOldValue->append->sb->append->getNewValue->append->sb->append->getPropagationId->append->sb->append->getSource->append->return->sb->append->toString
PropertyChangeEvent#appendTo(StringBuilder)::: property change event append to:::
PropertyChangeListener#propertyChange(PropertyChangeEvent)::: property change listener property change:::
PropertyChangeListenerProxy#propertyChange(PropertyChangeEvent):::Forwards the property change event to the listener delegate.:::getListener->propertyChange
PropertyChangeListenerProxy#getPropertyName():::Returns the name of the named property associated with the listener.:::return
PropertyChangeSupport#addPropertyChangeListener(PropertyChangeListener):::Add a PropertyChangeListener to the listener list:::if->return->if->proxy->proxy->getPropertyName->proxy->getListener->addPropertyChangeListener->else->add
PropertyChangeSupport#removePropertyChangeListener(PropertyChangeListener):::Remove a PropertyChangeListener from the listener list:::if->return->if->proxy->proxy->getPropertyName->proxy->getListener->removePropertyChangeListener->else->remove
PropertyChangeSupport#getPropertyChangeListeners():::Returns an array of all the listeners that were added to the PropertyChangeSupport object with addPropertyChangeListener():::return->getListeners
PropertyChangeSupport#addPropertyChangeListener(String, PropertyChangeListener):::Add a PropertyChangeListener for a specific property:::if->return->extract->if->add
PropertyChangeSupport#removePropertyChangeListener(String, PropertyChangeListener):::Remove a PropertyChangeListener for a specific property:::if->return->extract->if->remove
PropertyChangeSupport#getPropertyChangeListeners(String):::Returns an array of all the listeners which have been associated with the named property.:::return->getListeners
PropertyChangeSupport#firePropertyChange(String, Object, Object):::Reports a bound property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->oldValue->equals->new->PropertyChangeEvent->firePropertyChange
PropertyChangeSupport#firePropertyChange(String, int, int):::Reports an integer bound property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Integer->valueOf->Integer->valueOf->firePropertyChange
PropertyChangeSupport#firePropertyChange(String, boolean, boolean):::Reports a boolean bound property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Boolean->valueOf->Boolean->valueOf->firePropertyChange
PropertyChangeSupport#firePropertyChange(PropertyChangeEvent):::Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name:::oldValue->event->getOldValue->newValue->event->getNewValue->if->oldValue->equals->name->event->getPropertyName->common->get->named->get->fire->fire
PropertyChangeSupport#fire(PropertyChangeListener[], PropertyChangeEvent)::: property change support fire:::if->foreach->listener->propertyChange
PropertyChangeSupport#fireIndexedPropertyChange(String, int, Object, Object):::Reports a bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->oldValue->equals->new->IndexedPropertyChangeEvent->firePropertyChange
PropertyChangeSupport#fireIndexedPropertyChange(String, int, int, int):::Reports an integer bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Integer->valueOf->Integer->valueOf->fireIndexedPropertyChange
PropertyChangeSupport#fireIndexedPropertyChange(String, int, boolean, boolean):::Reports a boolean bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Boolean->valueOf->Boolean->valueOf->fireIndexedPropertyChange
PropertyChangeSupport#hasListeners(String):::Check if there are any listeners for a specific property, including those registered on all properties:::return->hasListeners
PropertyChangeSupport#writeObject(ObjectOutputStream)::: property change support write object:::children->listeners->synchronized->foreach->getEntries->property->entry->getKey->if->entry->getValue->else->if->new->Hashtable<>->pcs->new->PropertyChangeSupport->entry->getValue->set->children->put->fields->s->putFields->fields->put->fields->put->fields->put->s->writeFields->if->foreach->if->s->writeObject->s->writeObject
PropertyChangeSupport#readObject(ObjectInputStream)::: property change support read object:::new->PropertyChangeListenerMap->fields->s->readFields->children->fields->get->fields->get->fields->get->listenerOrNull->while->s->readObject->add->if->foreach->children->entrySet->foreach->entry->getValue->getPropertyChangeListeners->entry->getKey->add
PropertyChangeSupport.PropertyChangeListenerMap#newArray(int):::Creates an array of PropertyChangeListener PropertyChangeListener objects:::return->new->PropertyChangeListenerArr
PropertyChangeSupport.PropertyChangeListenerMap#newProxy(String, PropertyChangeListener):::Creates a PropertyChangeListenerProxy PropertyChangeListenerProxy object for the specified property.:::return->new->PropertyChangeListenerProxy
PropertyChangeSupport.PropertyChangeListenerMap#extract(PropertyChangeListener)::: property change listener map extract:::while->getListener->return
PropertyDescriptor#getPropertyType():::Returns the Java type info for the property:::type->getPropertyType0->if->try->getReadMethod->getWriteMethod->findPropertyType->setPropertyType->catch->finally->return
PropertyDescriptor#setPropertyType(Class)::: property descriptor set property type:::getWeakReference
PropertyDescriptor#getPropertyType0()::: property descriptor get property type0:::return->get
PropertyDescriptor#getReadMethod():::Gets the method that should be used to read the property value.:::readMethod->get->if->cls->getClass0->if->isSet->return->nextMethodName->getBaseName->if->type->getPropertyType0->if->getBaseName->else->Introspector->findMethod->if->readMethodName->equals->Introspector->findMethod->try->setReadMethod->catch->finally->return
PropertyDescriptor#setReadMethod(Method):::Sets the method that should be used to read the property value.:::get->findPropertyType->setPropertyType->setReadMethod0
PropertyDescriptor#setReadMethod0(Method)::: property descriptor set read method0:::set->if->return->readMethod->getDeclaringClass->setClass0->readMethod->getName->readMethod->getAnnotation->setTransient
PropertyDescriptor#getWriteMethod():::Gets the method that should be used to write the property value.:::writeMethod->get->if->cls->getClass0->if->isSet->return->type->getPropertyType0->if->try->getReadMethod->findPropertyType->setPropertyType->catch->return->finally->if->getBaseName->args->new->Class<?>Arr->Introspector->findMethod->if->if->writeMethod->getReturnType->equals->try->setWriteMethod->catch->finally->return
PropertyDescriptor#setWriteMethod(Method):::Sets the method that should be used to write the property value.:::getReadMethod->findPropertyType->setPropertyType->setWriteMethod0
PropertyDescriptor#setWriteMethod0(Method)::: property descriptor set write method0:::set->if->return->writeMethod->getDeclaringClass->setClass0->writeMethod->getName->writeMethod->getAnnotation->setTransient
PropertyDescriptor#setClass0(Class):::Overridden to ensure that a super class doesn't take precedent:::if->getClass0->clz->getClass0->isAssignableFrom->return->super->setClass0
PropertyDescriptor#isBound():::Updates to "bound" properties will cause a "PropertyChange" event to get fired when the property is changed.:::return
PropertyDescriptor#setBound(boolean):::Updates to "bound" properties will cause a "PropertyChange" event to get fired when the property is changed.:::
PropertyDescriptor#isConstrained():::Attempted updates to "Constrained" properties will cause a "VetoableChange" event to get fired when the property is changed.:::return
PropertyDescriptor#setConstrained(boolean):::Attempted updates to "Constrained" properties will cause a "VetoableChange" event to get fired when the property is changed.:::
PropertyDescriptor#setPropertyEditorClass(Class):::Normally PropertyEditors will be found using the PropertyEditorManager:::getWeakReference
PropertyDescriptor#getPropertyEditorClass():::Gets any explicit PropertyEditor Class that has been registered for this property.:::return->get
PropertyDescriptor#createPropertyEditor(Object):::Constructs an instance of a property editor using the current property editor class:::editor->cls->getPropertyEditorClass->if->isAssignableFrom->ReflectUtil->isPackageAccessible->ctor->if->try->cls->new->Class<?>Arr->getConstructor->catch->finally->try->if->cls->newInstance->else->ctor->new->ObjectArr->newInstance->catch->finally->return
PropertyDescriptor#equals(Object):::Compares this PropertyDescriptor against the specified object:::if->return->if->other->otherReadMethod->other->getReadMethod->otherWriteMethod->other->getWriteMethod->if->getReadMethod->compareMethods->return->if->getWriteMethod->compareMethods->return->if->getPropertyType->other->getPropertyType->getPropertyEditorClass->other->getPropertyEditorClass->other->isBound->other->isConstrained->return->return
PropertyDescriptor#compareMethods(Method, Method):::Package private helper method for Descriptor .equals methods.:::if->return->if->if->a->equals->return->return
PropertyDescriptor#updateGenericsFor(Class)::: property descriptor update generics for:::setClass0->try->get->get->findPropertyType->setPropertyType->catch->setPropertyType->finally
PropertyDescriptor#findPropertyType(Method, Method):::Returns the property type that corresponds to the read and write method:::propertyType->try->if->params->getClass0->getParameterTypes->if->throw->new->IntrospectionException->getClass0->getReturnType->if->throw->readMethod->getName->new->IntrospectionException->if->params->getClass0->getParameterTypes->if->throw->new->IntrospectionException->if->isAssignableFrom->throw->new->IntrospectionException->catch->throw->finally->return
PropertyDescriptor#hashCode():::Returns a hash code value for the object:::result->getPropertyType->getPropertyType->hashCode->getReadMethod->getReadMethod->hashCode->getWriteMethod->getWriteMethod->hashCode->getPropertyEditorClass->getPropertyEditorClass->hashCode->writeMethodName->hashCode->readMethodName->hashCode->getName->hashCode->return
PropertyDescriptor#getBaseName()::: property descriptor get base name:::if->NameGenerator->getName->capitalize->return
PropertyDescriptor#appendTo(StringBuilder)::: property descriptor append to:::appendTo->appendTo->appendTo->appendTo->get->appendTo->get->appendTo
PropertyDescriptor#isAssignable(Method, Method)::: property descriptor is assignable:::if->return->if->return->if->m1->getName->m2->getName->equals->return->type1->m1->getDeclaringClass->type2->m2->getDeclaringClass->if->type1->isAssignableFrom->return->getClass0->getReturnType->getClass0->getReturnType->if->type1->isAssignableFrom->return->args1->getClass0->getParameterTypes->args2->getClass0->getParameterTypes->if->return->for->i->return
PropertyEditor#setValue(Object):::Set (or change) the object that is to be edited:::
PropertyEditor#getValue()::: property editor get value:::
PropertyEditor#isPaintable()::: property editor is paintable:::
PropertyEditor#paintValue(java.awt.Graphics, java.awt.Rectangle):::Paint a representation of the value into a given area of screen real estate:::
PropertyEditor#getJavaInitializationString():::Returns a fragment of Java code that can be used to set a property to match the editors current state:::
PropertyEditor#getAsText():::Gets the property value as text.:::
PropertyEditor#setAsText(String):::Set the property value by parsing a given String:::
PropertyEditor#getTags():::If the property value must be one of a set of known tagged values, then this method should return an array of the tags:::
PropertyEditor#getCustomEditor()::: property editor get custom editor:::
PropertyEditor#supportsCustomEditor():::Determines whether this property editor supports a custom editor.:::
PropertyEditor#addPropertyChangeListener(PropertyChangeListener):::Adds a listener for the value change:::
PropertyEditor#removePropertyChangeListener(PropertyChangeListener):::Removes a listener for the value change.:::
PropertyEditorManager#registerEditor(Class, Class):::Registers an editor class to edit values of the given target class:::sm->System->getSecurityManager->if->sm->checkPropertiesAccess->ThreadGroupContext->getContext->getPropertyEditorFinder->register
PropertyEditorManager#findEditor(Class):::Locate a value editor for a given target type.:::return->ThreadGroupContext->getContext->getPropertyEditorFinder->find
PropertyEditorManager#getEditorSearchPath():::Gets the package names that will be searched for property editors.:::return->ThreadGroupContext->getContext->getPropertyEditorFinder->getPackages
PropertyEditorManager#setEditorSearchPath(String[]):::Change the list of package names that will be used for          finding property editors:::sm->System->getSecurityManager->if->sm->checkPropertiesAccess->ThreadGroupContext->getContext->getPropertyEditorFinder->setPackages
PropertyEditorSupport#getSource():::Returns the bean that is used as the source of events:::return
PropertyEditorSupport#setSource(Object):::Sets the source bean:::
PropertyEditorSupport#setValue(Object):::Set (or change) the object that is to be edited.:::firePropertyChange
PropertyEditorSupport#getValue():::Gets the value of the property.:::return
PropertyEditorSupport#isPaintable()::: property editor support is paintable:::return
PropertyEditorSupport#paintValue(java.awt.Graphics, java.awt.Rectangle):::Paint a representation of the value into a given area of screen real estate:::
PropertyEditorSupport#getJavaInitializationString():::This method is intended for use when generating Java code to set the value of the property:::return
PropertyEditorSupport#getAsText():::Gets the property value as a string suitable for presentation to a human to edit.:::return->toString
PropertyEditorSupport#setAsText(String):::Sets the property value by parsing a given String:::if->setValue->return->throw->new->java.lang.IllegalArgumentException
PropertyEditorSupport#getTags():::If the property value must be one of a set of known tagged values, then this method should return an array of the tag values:::return
PropertyEditorSupport#getCustomEditor()::: property editor support get custom editor:::return
PropertyEditorSupport#supportsCustomEditor():::Determines whether the propertyEditor can provide a custom editor.:::return
PropertyEditorSupport#addPropertyChangeListener(PropertyChangeListener):::Adds a listener for the value change:::if->new->java.util.Vector<>->listeners->addElement
PropertyEditorSupport#removePropertyChangeListener(PropertyChangeListener):::Removes a listener for the value change:::if->return->listeners->removeElement
PropertyEditorSupport#firePropertyChange():::Report that we have been modified to any interested listeners.:::targets->synchronized->if->return->unsafeClone->evt->new->PropertyChangeEvent->for->i->targets->size
PropertyEditorSupport#unsafeClone(java.util.Vector)::: property editor support unsafe clone:::return->v->clone
PropertyVetoException#getPropertyChangeEvent():::Gets the vetoed PropertyChangeEvent.:::return
SimpleBeanInfo#getBeanDescriptor():::Deny knowledge about the class and customizer of the bean:::return
SimpleBeanInfo#getPropertyDescriptors():::Deny knowledge of properties:::return
SimpleBeanInfo#getDefaultPropertyIndex():::Deny knowledge of a default property:::return
SimpleBeanInfo#getEventSetDescriptors():::Deny knowledge of event sets:::return
SimpleBeanInfo#getDefaultEventIndex():::Deny knowledge of a default event:::return
SimpleBeanInfo#getMethodDescriptors():::Deny knowledge of methods:::return
SimpleBeanInfo#getAdditionalBeanInfo():::Claim there are no other relevant BeanInfo objects:::return
SimpleBeanInfo#getIcon(int):::Claim there are no icons available:::descriptor->getBeanDescriptor->if->type->descriptor->getBeanClass->if->type->getClassLoader->type->getAnnotation->name->type->getName->index->name->lastIndexOf->if->name->substring->equals->className->type->getSimpleName->switch->return->loadImage->return->loadImage->return->loadImage->return->loadImage->return
SimpleBeanInfo#loadStandardImage(String):::This is a utility method to help in loading standard icon images.:::return->AccessController->loadImage->doPrivileged
SimpleBeanInfo#loadImage(String, String):::This is a utility method to help in loading standard icon images.:::prefix->image->loadStandardImage->return->loadStandardImage
SimpleBeanInfo#loadImage(String):::This is a utility method to help in loading icon images:::try->url->getClass->getResource->if->ip->url->getContent->if->return->Toolkit->getDefaultToolkit->createImage->catch->finally->return
Statement#getTarget():::Returns the target object of this statement:::return
Statement#getMethodName():::Returns the name of the method to invoke:::return
Statement#getArguments():::Returns the arguments for the method to invoke:::return->clone
Statement#execute():::The execute method finds a method whose name is the same as the methodName property, and invokes the method on the target:::invoke
Statement#invoke()::: statement invoke:::acc->if->System->getSecurityManager->throw->new->SecurityException->try->return->AccessController->new->PrivilegedExceptionAction<Object>->doPrivileged->catch->throw->exception->getException->finally
Statement#invokeInternal()::: statement invoke internal:::target->getTarget->methodName->getMethodName->if->throw->new->NullPointerException->arguments->getArguments->if->else->arguments->clone->if->methodName->equals->name->if->return->ClassFinder->resolveClass->checkPackageAccess->argClasses->new->Class<?>Arr->for->i->m->if->if->methodName->equals->if->methodName->equals->isArray->result->Array->getComponentType->newInstance->for->i->return->if->methodName->equals->if->return->charAt->try->ConstructorFinder->findConstructor->catch->finally->if->getMethod->if->getMethod->else->if->target->getClass->isArray->methodName->equals->methodName->equals->index->intValue->if->methodName->equals->return->Array->get->else->Array->set->return->target->getClass->getMethod->if->try->if->return->MethodUtil->invoke->else->return->newInstance->catch->throw->target->getClass->new->Exception->te->ite->getTargetException->if->throw->else->throw->finally->throw->toString->new->NoSuchMethodException
Statement#instanceName(Object)::: statement instance name:::if->return->else->if->instance->getClass->return->else->return->NameGenerator->instance->getClass->unqualifiedClassName
Statement#toString():::Prints the value of this statement using a Java-style syntax.:::target->getTarget->methodName->getMethodName->arguments->getArguments->if->result->instanceName->new->StringBuilder->n->for->i->result->append->return->result->toString
Statement#getMethod(Class, String, Class...)::: statement get method:::try->return->MethodFinder->findMethod->catch->return->finally
ThreadGroupContext#getContext():::Returns the appropriate ThreadGroupContext for the caller, as determined by its ThreadGroup.:::return->contexts->Thread->currentThread->getThreadGroup->get
ThreadGroupContext#isDesignTime()::: thread group context is design time:::return
ThreadGroupContext#setDesignTime(boolean)::: thread group context set design time:::
ThreadGroupContext#isGuiAvailable()::: thread group context is gui available:::isGuiAvailable->return->isGuiAvailable->booleanValue->GraphicsEnvironment->isHeadless
ThreadGroupContext#setGuiAvailable(boolean)::: thread group context set gui available:::Boolean->valueOf
ThreadGroupContext#getBeanInfo(Class)::: thread group context get bean info:::return->get
ThreadGroupContext#putBeanInfo(Class, BeanInfo)::: thread group context put bean info:::if->new->WeakHashMap<>->return->put
ThreadGroupContext#removeBeanInfo(Class)::: thread group context remove bean info:::if->remove
ThreadGroupContext#clearBeanInfoCache()::: thread group context clear bean info cache:::if->clear
ThreadGroupContext#getBeanInfoFinder()::: thread group context get bean info finder:::if->new->BeanInfoFinder->return
ThreadGroupContext#getPropertyEditorFinder()::: thread group context get property editor finder:::if->new->PropertyEditorFinder->return
VetoableChangeListener#vetoableChange(PropertyChangeEvent):::This method gets called when a constrained property is changed.:::
VetoableChangeListenerProxy#vetoableChange(PropertyChangeEvent):::Forwards the property change event to the listener delegate.:::getListener->vetoableChange
VetoableChangeListenerProxy#getPropertyName():::Returns the name of the named property associated with the listener.:::return
VetoableChangeSupport#addVetoableChangeListener(VetoableChangeListener):::Add a VetoableChangeListener to the listener list:::if->return->if->proxy->proxy->getPropertyName->proxy->getListener->addVetoableChangeListener->else->add
VetoableChangeSupport#removeVetoableChangeListener(VetoableChangeListener):::Remove a VetoableChangeListener from the listener list:::if->return->if->proxy->proxy->getPropertyName->proxy->getListener->removeVetoableChangeListener->else->remove
VetoableChangeSupport#getVetoableChangeListeners():::Returns an array of all the listeners that were added to the VetoableChangeSupport object with addVetoableChangeListener():::return->getListeners
VetoableChangeSupport#addVetoableChangeListener(String, VetoableChangeListener):::Add a VetoableChangeListener for a specific property:::if->return->extract->if->add
VetoableChangeSupport#removeVetoableChangeListener(String, VetoableChangeListener):::Remove a VetoableChangeListener for a specific property:::if->return->extract->if->remove
VetoableChangeSupport#getVetoableChangeListeners(String):::Returns an array of all the listeners which have been associated with the named property.:::return->getListeners
VetoableChangeSupport#fireVetoableChange(String, Object, Object):::Reports a constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->oldValue->equals->new->PropertyChangeEvent->fireVetoableChange
VetoableChangeSupport#fireVetoableChange(String, int, int):::Reports an integer constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Integer->valueOf->Integer->valueOf->fireVetoableChange
VetoableChangeSupport#fireVetoableChange(String, boolean, boolean):::Reports a boolean constrained property update to listeners that have been registered to track updates of all properties or a property with the specified name:::if->Boolean->valueOf->Boolean->valueOf->fireVetoableChange
VetoableChangeSupport#fireVetoableChange(PropertyChangeEvent):::Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name:::oldValue->event->getOldValue->newValue->event->getNewValue->if->oldValue->equals->name->event->getPropertyName->common->get->named->get->listeners->if->else->if->else->new->VetoableChangeListenerArr->System->arraycopy->System->arraycopy->if->current->try->while->vetoableChange->catch->new->PropertyChangeEvent->for->i->throw->finally
VetoableChangeSupport#hasListeners(String):::Check if there are any listeners for a specific property, including those registered on all properties:::return->hasListeners
VetoableChangeSupport#writeObject(ObjectOutputStream)::: vetoable change support write object:::children->listeners->synchronized->foreach->getEntries->property->entry->getKey->if->entry->getValue->else->if->new->Hashtable<>->vcs->new->VetoableChangeSupport->entry->getValue->set->children->put->fields->s->putFields->fields->put->fields->put->fields->put->s->writeFields->if->foreach->if->s->writeObject->s->writeObject
VetoableChangeSupport#readObject(ObjectInputStream)::: vetoable change support read object:::new->VetoableChangeListenerMap->fields->s->readFields->children->fields->get->fields->get->fields->get->listenerOrNull->while->s->readObject->add->if->foreach->children->entrySet->foreach->entry->getValue->getVetoableChangeListeners->entry->getKey->add
VetoableChangeSupport.VetoableChangeListenerMap#newArray(int):::Creates an array of VetoableChangeListener VetoableChangeListener objects:::return->new->VetoableChangeListenerArr
VetoableChangeSupport.VetoableChangeListenerMap#newProxy(String, VetoableChangeListener):::Creates a VetoableChangeListenerProxy VetoableChangeListenerProxy object for the specified property.:::return->new->VetoableChangeListenerProxy
VetoableChangeSupport.VetoableChangeListenerMap#extract(VetoableChangeListener)::: vetoable change listener map extract:::while->getListener->return
Visibility#needsGui():::Determines whether this bean needs a GUI.:::
Visibility#dontUseGui():::This method instructs the bean that it should not use the Gui.:::
Visibility#okToUseGui():::This method instructs the bean that it is OK to use the Gui.:::
Visibility#avoidingGui():::Determines whether this bean is avoiding using a GUI.:::
WeakIdentityMap#get(Object)::: weak identity map get:::removeStaleEntries->if->hash->key->hashCode->table->index->getIndex->for->entry->synchronized->getIndex->for->entry->value->create->new->Entry<T>->if->if->else->removeStaleEntries->newTable->transfer->if->else->transfer->return
WeakIdentityMap#create(Object)::: weak identity map create:::
WeakIdentityMap#removeStaleEntries()::: weak identity map remove stale entries:::ref->poll->if->synchronized->do->entry->index->getIndex->prev->current->while->next->if->if->else->break->poll->while
WeakIdentityMap#transfer(Entry[], Entry[])::: weak identity map transfer:::for->i
WeakIdentityMap#newTable(int)::: weak identity map new table:::return->new->Entry<?>Arr
WeakIdentityMap#getIndex(Entry[], int)::: weak identity map get index:::return
WeakIdentityMap.Entry#isMatched(Object, int)::: entry is matched:::return->get
XMLDecoder#close():::This method closes the input stream associated with this stream.:::if->parsingComplete->getCharacterStream->close->getByteStream->close
XMLDecoder#close(Closeable)::: decoder close:::if->try->in->close->catch->getExceptionListener->exceptionThrown->finally
XMLDecoder#parsingComplete()::: decoder parsing complete:::if->return->if->if->System->getSecurityManager->throw->new->SecurityException->AccessController->new->PrivilegedAction<Void>->doPrivileged->getObjects->return
XMLDecoder#setExceptionListener(ExceptionListener):::Sets the exception handler for this stream to exceptionListener:::if->setExceptionListener
XMLDecoder#getExceptionListener():::Gets the exception handler for this stream.:::return->getExceptionListener
XMLDecoder#readObject():::Reads the next object from the underlying input stream.:::return->parsingComplete
XMLDecoder#setOwner(Object):::Sets the owner of this decoder to owner.:::
XMLDecoder#getOwner():::Gets the owner of this decoder.:::return
XMLDecoder#createHandler(Object, ExceptionListener, ClassLoader):::Creates a new handler for SAX parser that can be used to parse embedded XML archives created by the XMLEncoder class:::handler->new->DocumentHandler->handler->setOwner->handler->setExceptionListener->handler->setClassLoader->return
XMLEncoder#setOwner(Object):::Sets the owner of this encoder to owner.:::new->ObjectArr->new->Expression->writeExpression
XMLEncoder#getOwner():::Gets the owner of this encoder.:::return
XMLEncoder#writeObject(Object):::Write an XML representation of the specified object to the output.:::if->super->writeObject->else->new->ObjectArr->new->Statement->writeStatement
XMLEncoder#statementList(Object)::: encoder statement list:::list->targetToStatementList->get->if->new->ArrayList<>->targetToStatementList->put->return
XMLEncoder#mark(Object, boolean)::: encoder mark:::if->return->d->getValueData->exp->if->o->getClass->return->if->if->return->target->exp->getTarget->mark->if->statementList->add
XMLEncoder#mark(Statement)::: encoder mark:::args->stm->getArguments->for->i->stm->getTarget->mark
XMLEncoder#writeStatement(Statement):::Records the Statement so that the Encoder will produce the actual output when the stream is flushed:::internal->try->super->writeStatement->mark->target->oldStm->getTarget->if->method->oldStm->getMethodName->args->oldStm->getArguments->if->else->if->method->equals->else->if->method->equals->statementList->add->catch->getExceptionListener->new->Exception->exceptionThrown->finally
XMLEncoder#writeExpression(Expression):::Records the Expression so that the Encoder will produce the actual output when the stream is flushed:::internal->oldValue->getValue->if->get->getValueData->super->writeExpression
XMLEncoder#flush():::This method writes out the preamble associated with the XML encoding if it has not been written already and then writes out all of the values that been written to the stream since the last time flush was called:::if->if->quote->quote->writeln->System->getProperty->quote->getName->quote->writeln->statements->statementList->while->statements->isEmpty->s->statements->remove->if->s->getMethodName->equals->s->getArguments->outputValue->else->outputStatement->statement->getMissedStatement->while->outputStatement->getMissedStatement->try->out->flush->catch->getExceptionListener->exceptionThrown->finally->clear
XMLEncoder#clear()::: encoder clear:::super->clear->nameGenerator->clear->valueToExpression->clear->targetToStatementList->clear
XMLEncoder#getMissedStatement()::: encoder get missed statement:::foreach->values->for->i->statements->size->return
XMLEncoder#close():::This method calls flush, writes the closing postamble and then closes the output stream associated with this stream.:::flush->writeln->try->out->close->catch->getExceptionListener->exceptionThrown->finally
XMLEncoder#quote(String)::: encoder quote:::return
XMLEncoder#getValueData(Object)::: encoder get value data:::d->valueToExpression->get->if->new->ValueData->valueToExpression->put->return
XMLEncoder#isValidCharCode(int):::Returns true if the argument, a Unicode code point, is valid in XML documents:::return
XMLEncoder#writeln(String)::: encoder writeln:::try->sb->new->StringBuilder->for->i->sb->append->sb->append->sb->toString->write->catch->getExceptionListener->exceptionThrown->finally
XMLEncoder#outputValue(Object, Object, boolean)::: encoder output value:::if->writeln->return->if->getName->writeln->return->d->getValueData->if->target->getTarget->methodName->getMethodName->if->throw->new->NullPointerException->if->methodName->equals->f->if->Modifier->f->getModifiers->isStatic->f->getDeclaringClass->getName->quote->f->getName->quote->writeln->return->primitiveType->value->getClass->primitiveTypeFor->if->value->getClass->methodName->equals->primitiveTypeName->primitiveType->getName->if->code->charValue->if->isValidCharCode->createString->writeln->return->quoteCharCode->if->Character->valueOf->writeln->return->else->if->createString->writeln->return->if->if->quote->writeln->else->quote->outputXML->else->if->outputStatement
XMLEncoder#quoteCharCode(int)::: encoder quote char code:::switch->return->return->return->return->return->return->return
XMLEncoder#createString(int)::: encoder create string:::return->Integer->toString
XMLEncoder#createString(String)::: encoder create string:::sb->new->StringBuilder->sb->append->index->while->string->length->point->string->codePointAt->count->Character->charCount->if->isValidCharCode->string->substring->canEncode->value->quoteCharCode->if->sb->append->else->sb->appendCodePoint->else->sb->string->charAt->createString->append->sb->append->return->sb->toString
XMLEncoder#outputStatement(Statement, Object, boolean)::: encoder output statement:::target->exp->getTarget->methodName->exp->getMethodName->if->throw->new->NullPointerException->args->exp->getArguments->expression->exp->getClass->value->getValue->tag->attributes->d->getValueData->if->else->if->methodName->equals->getName->quote->toString->quote->new->ObjectArr->else->if->target->getClass->getName->quote->else->if->getValueData->statements->statementList->if->statements->contains->statements->add->outputValue->if->outputValue->return->if->instanceName->nameGenerator->instanceName->quote->if->methodName->equals->methodName->equals->toString->quote->new->ObjectArr->new->ObjectArr->else->if->methodName->startsWith->methodName->startsWith->if->methodName->length->Introspector->methodName->substring->decapitalize->quote->else->if->methodName->equals->methodName->equals->quote->outputXML
XMLEncoder#outputXML(String, String, Object, Object...)::: encoder output l:::statements->statementList->if->statements->size->writeln->return->writeln->for->i->while->statements->isEmpty->s->statements->remove->outputStatement->writeln
XMLEncoder#primitiveTypeFor(Class)::: encoder primitive type for:::if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->if->return->return

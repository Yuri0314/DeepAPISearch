ElementsTable#getModuleMode():::Returns the module documentation level mode.:::switch->accessFilter->getAccessValue->return->return
ElementsTable#getSpecifiedElements():::Returns a set of elements specified on the command line, including any inner classes.:::if->result->new->LinkedHashSet<>->result->addAll->result->addAll->result->addAll->Collections->unmodifiableSet->return
ElementsTable#getIncludedElements():::Returns a set of elements included elements:::if->result->new->LinkedHashSet<>->result->addAll->result->addAll->result->addAll->Collections->unmodifiableSet->return
ElementsTable#isIncluded(Element):::Returns true if the given element is included for consideration:::if->return->if->new->IncludedVisitor->return->includedVisitor->visit
ElementsTable#analyze():::Performs the final computation and freezes the collections:::computeSpecifiedModules->computeSpecifiedPackages->computeSpecifiedTypes->expandedModulePackages->computeModulePackages->initializeIncludedSets
ElementsTable#setClassArgList(List):::Returns the includes table after setting a class names specified on the command line.:::return
ElementsTable#setClassDeclList(List):::Returns the includes table after setting the parsed class names.:::return
ElementsTable#packages(Collection):::Returns an includes table after setting the specified package names.:::packageNames->stream->ModulePackage->new->map->cmdLinePackages->add->forEachOrdered->return
ElementsTable#getPackagesToParse():::Returns the aggregate set of included packages and specified sub packages.:::result->new->ArrayList<>->result->addAll->result->addAll->return
ElementsTable#getFilesToParse():::Returns an aggregated list of java file objects from the items specified on the command line:::result->new->ArrayList<>->addFilesForParser->addFilesForParser->return
ElementsTable#isSelected(Element):::Returns true if the element is selected, by applying the access filter checks:::if->toolEnv->isSynthetic->return->if->new->SimpleElementVisitor9<Boolean,Void>->return->visibleElementVisitor->visit
ElementsTable.ModifierFilter#checkModifier(Element):::Returns true if access is allowed.:::modifiers->e->getModifiers->fflag->if->modifiers->contains->else->if->modifiers->contains->else->if->modifiers->contains->filterSet->filterMap->e->getKind->getAllowedKind->get->return->filterSet->contains
JavadocClassFinder#getPackageFileKinds():::Override getPackageFileKinds to include search for package.html:::return
JavadocClassFinder#extraFileActions(PackageSymbol, JavaFileObject):::Override extraFileActions to check for package documentation:::if->fo->isNameCompatible
JavadocEnter#duplicateClass(DiagnosticPosition, ClassSymbol):::Don't complain about a duplicate class.:::
JavadocTool#keepComments():::For javadoc, the parser needs to keep comments:::return
JavadocTool#make0(Context)::: Construct a new javadoc tool.:::messager->try->JavadocClassFinder->preRegister->JavadocEnter->preRegister->JavadocMemberEnter->preRegister->JavadocTodo->preRegister->Messager->instance0->return->new->JavadocTool->catch->messager->ex->getMessage->error->return->finally
JavadocTool#isValidPackageName(String):::Is the given string a valid package name?:::if->s->contains->a->s->split->if->return->isValidPackageName0->isValidPackageName0->return->return->isValidPackageName0
JavadocTool#isValidClassName(String):::Return true if given file name is a valid class name (including "package-info").:::if->s->length->return->if->s->equals->return->if->cp->s->codePointAt->if->Character->isJavaIdentifierStart->return->for->j->Character->charCount->s->length->Character->charCount->else->if->Character->s->charAt->isJavaIdentifierStart->return->for->j->s->length->return
JavadocTool#listClasses(List):::From a list of top level trees, return the list of contained class definitions:::result->new->ArrayList<>->foreach->foreach->if->def->hasTag->result->add->return
Main#main(String...):::The main entry point called by the launcher:::System->execute->exit
Main#execute(String...):::Programmatic interface.:::jdoc->new->Start->return->jdoc->begin
Main#execute(String[], PrintWriter):::Programmatic interface.:::jdoc->new->Start->return->jdoc->begin
Main#execute(String[], PrintWriter, PrintWriter):::Programmatic interface.:::jdoc->new->Start->return->jdoc->begin
Messager#instance0(Context):::Get the current messager, which is also the compiler log.:::instance->context->get->if->throw->new->InternalError->return
Messager#getText(String, Object...):::get and format message string from resource:::return->messages->getLocalizedString
Messager#printError(String):::Print error message, increment error count:::printError
Messager#printWarning(String):::Print warning message, increment warning count:::printWarning
Messager#printNotice(String):::Print a message:::printNotice
Messager#notice(String, Object...):::Print a message.:::getText->printNotice
Messager#hasErrors():::Returns true if errors have been recorded.:::return
Messager#hasWarnings():::Returns true if warnings have been recorded.:::return
Messager#printErrorWarningCounts():::Print exit message.:::if->notice->if->notice
Start#usage():::Usage:::usage
Start#begin(String...):::Main program - external wrapper:::try->CommandLine->parse->return->Arrays->asList->Collections->emptySet->begin->catch->e->getMessage->error->return->finally
ToolEnvironment#loadClass(String):::Load a class by qualified name.:::try->nameImpl->names->fromString->mod->syms->Convert->packagePart->inferModule->c->finder->loadClass->return->catch->chk->completionError->return->finally
ToolEnvironment#notice(String):::Print a notice, iff quiet is not specified.:::if->return->messager->notice
ToolEnvironment#notice(String, String):::Print a notice, iff quiet is not specified.:::if->return->messager->notice

ControllerEventListener#controlChange(ShortMessage):::Invoked when a Sequencer has encountered and processed a control-change event of interest to this listener:::
Instrument#getPatch():::Obtains the Patch object that indicates the bank and program numbers where this instrument is to be stored in the synthesizer.:::return
MetaEventListener#meta(MetaMessage):::Invoked when a Sequencer has encountered and processed a MetaMessage in the Sequence it is processing.:::
MetaMessage#setMessage(int, byte[], int):::Sets the message parameters for a MetaMessage:::if->throw->new->InvalidMidiDataException->if->throw->new->InvalidMidiDataException->getVarIntLength->new->byteArr->writeVarInt->if->System->arraycopy
MetaMessage#getType():::Obtains the type of the MetaMessage.:::if->return->return
MetaMessage#getData():::Obtains a copy of the data for the meta message:::returnedArray->new->byteArr->System->arraycopy->return
MetaMessage#clone():::Creates a new object of the same class and with the same contents as this object.:::newData->new->byteArr->System->arraycopy->return->new->MetaMessage
MetaMessage#getVarIntLength(long)::: meta message get var int length:::length->do->while->return
MetaMessage#writeVarInt(byte[], int, long)::: meta message write var int:::shift->while->while
MidiChannel#noteOn(int, int):::Starts the specified note sounding:::
MidiChannel#noteOff(int, int):::Turns the specified note off:::
MidiChannel#noteOff(int):::Turns the specified note off.:::
MidiChannel#setPolyPressure(int, int):::Reacts to a change in the specified note's key pressure:::
MidiChannel#getPolyPressure(int):::Obtains the pressure with which the specified key is being depressed:::
MidiChannel#setChannelPressure(int):::Reacts to a change in the keyboard pressure:::
MidiChannel#getChannelPressure():::Obtains the channel's keyboard pressure:::
MidiChannel#controlChange(int, int):::Reacts to a change in the specified controller's value:::
MidiChannel#getController(int):::Obtains the current value of the specified controller:::
MidiChannel#programChange(int):::Changes a program (patch):::
MidiChannel#programChange(int, int):::Changes the program using bank and program (patch) numbers:::
MidiChannel#getProgram():::Obtains the current program number for this channel.:::
MidiChannel#setPitchBend(int):::Changes the pitch offset for all notes on this channel:::
MidiChannel#getPitchBend():::Obtains the upward or downward pitch offset for this channel:::
MidiChannel#resetAllControllers():::Resets all the implemented controllers to their default values.:::
MidiChannel#allNotesOff():::Turns off all notes that are currently sounding on this channel:::
MidiChannel#allSoundOff():::Immediately turns off all sounding notes on this channel, ignoring the state of the Hold Pedal and the internal decay rate of the current Instrument.:::
MidiChannel#localControl(boolean):::Turns local control on or off:::
MidiChannel#setMono(boolean):::Turns mono mode on or off:::
MidiChannel#getMono():::Obtains the current mono/poly mode:::
MidiChannel#setOmni(boolean):::Turns omni mode on or off:::
MidiChannel#getOmni():::Obtains the current omni mode:::
MidiChannel#setMute(boolean):::Sets the mute state for this channel:::
MidiChannel#getMute():::Obtains the current mute state for this channel:::
MidiChannel#setSolo(boolean):::Sets the solo state for this channel:::
MidiChannel#getSolo():::Obtains the current solo state for this channel:::
MidiDevice#getDeviceInfo():::Obtains information about the device, including its Java class and Strings containing its name, vendor, and description.:::
MidiDevice#open():::Opens the device, indicating that it should now acquire any system resources it requires and become operational:::
MidiDevice#close():::Closes the device, indicating that the device should now release any system resources it is using:::
MidiDevice#isOpen():::Reports whether the device is open.:::
MidiDevice#getMicrosecondPosition():::Obtains the current time-stamp of the device, in microseconds:::
MidiDevice#getMaxReceivers():::Obtains the maximum number of MIDI IN connections available on this MIDI device for receiving MIDI data.:::
MidiDevice#getMaxTransmitters():::Obtains the maximum number of MIDI OUT connections available on this MIDI device for transmitting MIDI data.:::
MidiDevice#getReceiver():::Obtains a MIDI IN receiver through which the MIDI device may receive MIDI data:::
MidiDevice#getReceivers():::Returns all currently active, non-closed receivers connected with this MidiDevice:::
MidiDevice#getTransmitter():::Obtains a MIDI OUT connection from which the MIDI device will transmit MIDI data:::
MidiDevice#getTransmitters():::Returns all currently active, non-closed transmitters connected with this MidiDevice:::
MidiDevice.Info#equals(Object):::Indicates whether the specified object is equal to this info object, returning true if the objects are the same.:::return->super->equals
MidiDevice.Info#hashCode():::Returns a hash code value for this info object.:::return->super->hashCode
MidiDevice.Info#getName():::Obtains the name of the device.:::return
MidiDevice.Info#getVendor():::Obtains the name of the company who supplies the device.:::return
MidiDevice.Info#getDescription():::Obtains the description of the device.:::return
MidiDevice.Info#getVersion():::Obtains the version of the device.:::return
MidiDevice.Info#toString():::Provides a string representation of the device information.:::return
MidiDeviceReceiver#getMidiDevice():::Obtains a MidiDevice object which is an owner of this Receiver.:::
MidiDeviceTransmitter#getMidiDevice():::Obtains a MidiDevice object which is an owner of this Transmitter.:::
MidiEvent#getMessage():::Obtains the MIDI message contained in the event.:::return
MidiEvent#setTick(long):::Sets the time-stamp for the event, in MIDI ticks.:::
MidiEvent#getTick():::Obtains the time-stamp for the event, in MIDI ticks.:::return
MidiFileFormat#getType():::Obtains the MIDI file type.:::return
MidiFileFormat#getDivisionType():::Obtains the timing division type for the MIDI file.:::return
MidiFileFormat#getResolution():::Obtains the timing resolution for the MIDI file:::return
MidiFileFormat#getByteLength():::Obtains the length of the MIDI file, expressed in 8-bit bytes.:::return
MidiFileFormat#getMicrosecondLength():::Obtains the length of the MIDI file, expressed in microseconds.:::return
MidiFileFormat#properties():::Obtain an unmodifiable map of properties:::ret->if->new->HashMap<>->else->properties->clone->return->Collections->unmodifiableMap
MidiFileFormat#getProperty(String):::Obtain the property value specified by the key:::if->return->return->properties->get
MidiMessage#setMessage(byte[], int):::Sets the data for the MIDI message:::if->throw->new->IndexOutOfBoundsException->if->new->byteArr->System->arraycopy
MidiMessage#getMessage():::Obtains the MIDI message data:::returnedArray->new->byteArr->System->arraycopy->return
MidiMessage#getStatus():::Obtains the status byte for the MIDI message:::if->return->return
MidiMessage#getLength():::Obtains the total length of the MIDI message in bytes:::return
MidiMessage#clone():::Creates a new object of the same class and with the same contents as this object.:::
MidiSystem#getMidiDeviceInfo():::Obtains an array of information objects representing the set of all MIDI devices available on the system:::allInfos->new->ArrayList<>->foreach->getMidiDeviceProviders->Collections->provider->getDeviceInfo->addAll->return->allInfos->allInfos->size->new->MidiDevice.InfoArr->toArray
MidiSystem#getMidiDevice(MidiDevice.Info):::Obtains the requested MIDI device.:::Objects->requireNonNull->foreach->getMidiDeviceProviders->if->provider->isDeviceSupported->return->provider->getDevice->throw->String->format->new->IllegalArgumentException
MidiSystem#getReceiver():::Obtains a MIDI receiver from an external MIDI port or other default device:::device->getDefaultDeviceWrapper->receiver->if->getReceiverReferenceCounting->else->device->getReceiver->if->new->MidiDeviceReceiverEnvelope->return
MidiSystem#getTransmitter():::Obtains a MIDI transmitter from an external MIDI port or other default source:::device->getDefaultDeviceWrapper->transmitter->if->getTransmitterReferenceCounting->else->device->getTransmitter->if->new->MidiDeviceTransmitterEnvelope->return
MidiSystem#getSynthesizer():::Obtains the default synthesizer:::return->getDefaultDeviceWrapper
MidiSystem#getSequencer():::Obtains the default Sequencer, connected to a default device:::return->getSequencer
MidiSystem#getSequencer(boolean):::Obtains the default Sequencer, optionally connected to a default device:::seq->getDefaultDeviceWrapper->if->rec->mue->try->synth->getSynthesizer->if->getReceiverReferenceCounting->else->synth->open->try->synth->getReceiver->catch->finally->if->synth->close->catch->if->finally->if->try->MidiSystem->getReceiver->catch->if->finally->if->seq->getTransmitter->setReceiver->if->setAutoConnect->else->if->throw->throw->new->MidiUnavailableException->return
MidiSystem#getSoundbank(InputStream):::Constructs a MIDI sound bank by reading it from the specified stream:::Objects->requireNonNull->sp->s->providers->getSoundbankReaders->for->i->providers->size->throw->new->InvalidMidiDataException
MidiSystem#getSoundbank(URL):::Constructs a Soundbank by reading it from the specified URL:::Objects->requireNonNull->sp->s->providers->getSoundbankReaders->for->i->providers->size->throw->new->InvalidMidiDataException
MidiSystem#getSoundbank(File):::Constructs a Soundbank by reading it from the specified File:::Objects->requireNonNull->sp->s->providers->getSoundbankReaders->for->i->providers->size->throw->new->InvalidMidiDataException
MidiSystem#getMidiFileFormat(InputStream):::Obtains the MIDI file format of the data in the specified input stream:::Objects->requireNonNull->providers->getMidiFileReaders->format->for->i->providers->size->if->throw->new->InvalidMidiDataException->else->return
MidiSystem#getMidiFileFormat(URL):::Obtains the MIDI file format of the data in the specified URL:::Objects->requireNonNull->providers->getMidiFileReaders->format->for->i->providers->size->if->throw->new->InvalidMidiDataException->else->return
MidiSystem#getMidiFileFormat(File):::Obtains the MIDI file format of the specified File:::Objects->requireNonNull->providers->getMidiFileReaders->format->for->i->providers->size->if->throw->new->InvalidMidiDataException->else->return
MidiSystem#getSequence(InputStream):::Obtains a MIDI sequence from the specified input stream:::Objects->requireNonNull->providers->getMidiFileReaders->sequence->for->i->providers->size->if->throw->new->InvalidMidiDataException->else->return
MidiSystem#getSequence(URL):::Obtains a MIDI sequence from the specified URL:::Objects->requireNonNull->providers->getMidiFileReaders->sequence->for->i->providers->size->if->throw->new->InvalidMidiDataException->else->return
MidiSystem#getSequence(File):::Obtains a MIDI sequence from the specified File:::Objects->requireNonNull->providers->getMidiFileReaders->sequence->for->i->providers->size->if->throw->new->InvalidMidiDataException->else->return
MidiSystem#getMidiFileTypes():::Obtains the set of MIDI file types for which file writing support is provided by the system.:::providers->getMidiFileWriters->allTypes->new->HashSet<>->for->i->providers->size->resultTypes->allTypes->size->new->intArr->index->iterator->allTypes->iterator->while->iterator->hasNext->integer->iterator->next->integer->intValue->return
MidiSystem#isFileTypeSupported(int):::Indicates whether file writing support for the specified MIDI file type is provided by the system.:::providers->getMidiFileWriters->for->i->providers->size->return
MidiSystem#getMidiFileTypes(Sequence):::Obtains the set of MIDI file types that the system can write from the sequence specified.:::Objects->requireNonNull->providers->getMidiFileWriters->allTypes->new->HashSet<>->for->i->providers->size->resultTypes->allTypes->size->new->intArr->index->iterator->allTypes->iterator->while->iterator->hasNext->integer->iterator->next->integer->intValue->return
MidiSystem#isFileTypeSupported(int, Sequence):::Indicates whether a MIDI file of the file type specified can be written from the sequence indicated.:::Objects->requireNonNull->providers->getMidiFileWriters->for->i->providers->size->return
MidiSystem#write(Sequence, int, OutputStream):::Writes a stream of bytes representing a file of the MIDI file type indicated to the output stream provided.:::Objects->requireNonNull->Objects->requireNonNull->providers->getMidiFileWriters->bytesWritten->for->i->providers->size->if->throw->new->IllegalArgumentException->return
MidiSystem#write(Sequence, int, File):::Writes a stream of bytes representing a file of the MIDI file type indicated to the external file provided.:::Objects->requireNonNull->Objects->requireNonNull->providers->getMidiFileWriters->bytesWritten->for->i->providers->size->if->throw->new->IllegalArgumentException->return
MidiSystem#getMidiDeviceProviders():::Obtains the list of MidiDeviceProviders installed on the system.:::return->getProviders
MidiSystem#getSoundbankReaders():::Obtains the list of SoundbankReaders installed on the system.:::return->getProviders
MidiSystem#getMidiFileWriters():::Obtains the list of MidiFileWriters installed on the system.:::return->getProviders
MidiSystem#getMidiFileReaders():::Obtains the list of MidiFileReaders installed on the system.:::return->getProviders
MidiSystem#getDefaultDeviceWrapper(Class):::Attempts to locate and return a default MidiDevice of the specified type:::try->return->getDefaultDevice->catch->mae->new->MidiUnavailableException->mae->initCause->throw->finally
MidiSystem#getDefaultDevice(Class):::Attempts to locate and return a default MidiDevice of the specified type.:::providers->getMidiDeviceProviders->providerClassName->JDK13Services->getDefaultProviderClassName->instanceName->JDK13Services->getDefaultInstanceName->device->if->defaultProvider->getNamedProvider->if->if->getNamedDevice->if->return->getFirstDevice->if->return->if->getNamedDevice->if->return->getFirstDevice->if->return->throw->new->IllegalArgumentException
MidiSystem#getNamedProvider(String, List):::Return a MidiDeviceProvider of a given class from the list of MidiDeviceProviders.:::for->i->providers->size->return
MidiSystem#getNamedDevice(String, MidiDeviceProvider, Class):::Return a MidiDevice with a given name from a given MidiDeviceProvider.:::device->getNamedDevice->if->return->if->getNamedDevice->if->return->return
MidiSystem#getNamedDevice(String, MidiDeviceProvider, Class, boolean, boolean):::Return a MidiDevice with a given name from a given MidiDeviceProvider.:::infos->provider->getDeviceInfo->for->i->return
MidiSystem#getNamedDevice(String, List, Class):::Return a MidiDevice with a given name from a list of MidiDeviceProviders.:::device->getNamedDevice->if->return->if->getNamedDevice->if->return->return
MidiSystem#getNamedDevice(String, List, Class, boolean, boolean):::Return a MidiDevice with a given name from a list of MidiDeviceProviders.:::for->i->providers->size->return
MidiSystem#getFirstDevice(MidiDeviceProvider, Class):::From a given MidiDeviceProvider, return the first appropriate device.:::device->getFirstDevice->if->return->if->getFirstDevice->if->return->return
MidiSystem#getFirstDevice(MidiDeviceProvider, Class, boolean, boolean):::From a given MidiDeviceProvider, return the first appropriate device.:::infos->provider->getDeviceInfo->for->j->return
MidiSystem#getFirstDevice(List, Class):::From a List of MidiDeviceProviders, return the first appropriate MidiDevice.:::device->getFirstDevice->if->return->if->getFirstDevice->if->return->return
MidiSystem#getFirstDevice(List, Class, boolean, boolean):::From a List of MidiDeviceProviders, return the first appropriate MidiDevice.:::for->i->providers->size->return
MidiSystem#isAppropriateDevice(MidiDevice, Class, boolean, boolean):::Checks if a MidiDevice is appropriate:::if->deviceClass->isInstance->return->else->if->if->device->getMaxReceivers->device->getMaxTransmitters->return->return
MidiSystem#getProviders(Class):::Obtains the set of services currently installed on the system using the SPI mechanism in 1.3.:::return->JDK13Services->getProviders
Patch#getBank():::Returns the number of the bank that contains the instrument whose location this Patch specifies.:::return
Patch#getProgram():::Returns the index, within a bank, of the instrument whose location this Patch specifies.:::return
Receiver#send(MidiMessage, long):::Sends a MIDI message and time-stamp to this receiver:::
Receiver#close():::Indicates that the application has finished using the receiver, and that limited resources it requires may be released or made available:::
Sequence#getDivisionType():::Obtains the timing division type for this sequence.:::return
Sequence#getResolution():::Obtains the timing resolution for this sequence:::return
Sequence#createTrack():::Creates a new, initially empty track as part of this sequence:::track->new->Track->tracks->addElement->return
Sequence#deleteTrack(Track):::Removes the specified track from the sequence.:::return->tracks->removeElement
Sequence#getTracks():::Obtains an array containing all the tracks in this sequence:::return->tracks->new->TrackArr->toArray
Sequence#getMicrosecondLength():::Obtains the duration of this sequence, expressed in microseconds.:::return->getTickLength->tick2microsecond
Sequence#getTickLength():::Obtains the duration of this sequence, expressed in MIDI ticks.:::length->synchronized->for->i->tracks->size->return
Sequence#getPatchList():::Obtains a list of patches referenced in this sequence:::return->new->PatchArr
Sequencer#setSequence(Sequence):::Sets the current sequence on which the sequencer operates:::
Sequencer#setSequence(InputStream):::Sets the current sequence on which the sequencer operates:::
Sequencer#getSequence():::Obtains the sequence on which the Sequencer is currently operating:::
Sequencer#start():::Starts playback of the MIDI data in the currently loaded sequence:::
Sequencer#stop():::Stops recording, if active, and playback of the currently loaded sequence, if any.:::
Sequencer#isRunning():::Indicates whether the Sequencer is currently running:::
Sequencer#startRecording():::Starts recording and playback of MIDI data:::
Sequencer#stopRecording():::Stops recording, if active:::
Sequencer#isRecording():::Indicates whether the Sequencer is currently recording:::
Sequencer#recordEnable(Track, int):::Prepares the specified track for recording events received on a particular channel:::
Sequencer#recordDisable(Track):::Disables recording to the specified track:::
Sequencer#getTempoInBPM():::Obtains the current tempo, expressed in beats per minute:::
Sequencer#setTempoInBPM(float):::Sets the tempo in beats per minute:::
Sequencer#getTempoInMPQ():::Obtains the current tempo, expressed in microseconds per quarter note:::
Sequencer#setTempoInMPQ(float):::Sets the tempo in microseconds per quarter note:::
Sequencer#setTempoFactor(float):::Scales the sequencer's actual playback tempo by the factor provided:::
Sequencer#getTempoFactor():::Returns the current tempo factor for the sequencer:::
Sequencer#getTickLength():::Obtains the length of the current sequence, expressed in MIDI ticks, or 0 if no sequence is set.:::
Sequencer#getTickPosition():::Obtains the current position in the sequence, expressed in MIDI ticks:::
Sequencer#setTickPosition(long):::Sets the current sequencer position in MIDI ticks.:::
Sequencer#getMicrosecondLength():::Obtains the length of the current sequence, expressed in microseconds, or 0 if no sequence is set.:::
Sequencer#getMicrosecondPosition():::Obtains the current position in the sequence, expressed in microseconds.:::
Sequencer#setMicrosecondPosition(long):::Sets the current position in the sequence, expressed in microseconds.:::
Sequencer#setMasterSyncMode(SyncMode):::Sets the source of timing information used by this sequencer:::
Sequencer#getMasterSyncMode():::Obtains the current master synchronization mode for this sequencer.:::
Sequencer#getMasterSyncModes():::Obtains the set of master synchronization modes supported by this sequencer.:::
Sequencer#setSlaveSyncMode(SyncMode):::Sets the slave synchronization mode for the sequencer:::
Sequencer#getSlaveSyncMode():::Obtains the current slave synchronization mode for this sequencer.:::
Sequencer#getSlaveSyncModes():::Obtains the set of slave synchronization modes supported by the sequencer.:::
Sequencer#setTrackMute(int, boolean):::Sets the mute state for a track:::
Sequencer#getTrackMute(int):::Obtains the current mute state for a track:::
Sequencer#setTrackSolo(int, boolean):::Sets the solo state for a track:::
Sequencer#getTrackSolo(int):::Obtains the current solo state for a track:::
Sequencer#addMetaEventListener(MetaEventListener):::Registers a meta-event listener to receive notification whenever a meta-event is encountered in the sequence and processed by the sequencer:::
Sequencer#removeMetaEventListener(MetaEventListener):::Removes the specified meta-event listener from this sequencer's list of registered listeners, if in fact the listener is registered.:::
Sequencer#addControllerEventListener(ControllerEventListener, int[]):::Registers a controller event listener to receive notification whenever the sequencer processes a control-change event of the requested type or types:::
Sequencer#removeControllerEventListener(ControllerEventListener, int[]):::Removes a controller event listener's interest in one or more types of controller event:::
Sequencer#setLoopStartPoint(long):::Sets the first MIDI tick that will be played in the loop:::
Sequencer#getLoopStartPoint():::Obtains the start position of the loop, in MIDI ticks.:::
Sequencer#setLoopEndPoint(long):::Sets the last MIDI tick that will be played in the loop:::
Sequencer#getLoopEndPoint():::Obtains the end position of the loop, in MIDI ticks.:::
Sequencer#setLoopCount(int):::Sets the number of repetitions of the loop for playback:::
Sequencer#getLoopCount():::Obtains the number of repetitions for playback.:::
Sequencer.SyncMode#equals(Object):::Indicates whether the specified object is equal to this synchronization mode, returning true if the objects are the same.:::return->super->equals
Sequencer.SyncMode#hashCode():::Returns a hash code value for this synchronization mode.:::return->super->hashCode
Sequencer.SyncMode#toString():::Provides this synchronization mode's name as the string representation of the mode.:::return
ShortMessage#setMessage(int):::Sets the parameters for a MIDI message that takes no data bytes.:::dataLength->getDataLength->if->throw->new->InvalidMidiDataException->setMessage
ShortMessage#setMessage(int, int, int):::Sets the parameters for a MIDI message that takes one or two data bytes:::dataLength->getDataLength->if->if->throw->new->InvalidMidiDataException->if->if->throw->new->InvalidMidiDataException->if->new->byteArr->if->if
ShortMessage#setMessage(int, int, int, int):::Sets the short message parameters for a channel message which takes up to two data bytes:::if->throw->Integer->toHexString->new->InvalidMidiDataException->if->throw->new->InvalidMidiDataException->setMessage
ShortMessage#getChannel():::Obtains the MIDI channel associated with this event:::return->getStatus
ShortMessage#getCommand():::Obtains the MIDI command associated with this event:::return->getStatus
ShortMessage#getData1():::Obtains the first data byte in the message.:::if->return->return
ShortMessage#getData2():::Obtains the second data byte in the message.:::if->return->return
ShortMessage#clone():::Creates a new object of the same class and with the same contents as this object.:::newData->new->byteArr->System->arraycopy->return->new->ShortMessage
ShortMessage#getDataLength(int):::Retrieves the number of data bytes associated with a particular status byte value.:::switch->return->return->return->switch->return->return->throw->new->InvalidMidiDataException
Soundbank#getName():::Obtains the name of the sound bank.:::
Soundbank#getVersion():::Obtains the version string for the sound bank.:::
Soundbank#getVendor():::Obtains a string naming the company that provides the sound bank.:::
Soundbank#getDescription():::Obtains a textual description of the sound bank, suitable for display.:::
Soundbank#getResources():::Extracts a list of non-Instrument resources contained in the sound bank.:::
Soundbank#getInstruments():::Obtains a list of instruments contained in this sound bank.:::
Soundbank#getInstrument(Patch):::Obtains an Instrument from the given Patch.:::
SoundbankResource#getSoundbank():::Obtains the sound bank that contains this SoundbankResource.:::return
SoundbankResource#getName():::Obtains the name of the resource:::return
SoundbankResource#getDataClass():::Obtains the class used by this sample to represent its data:::return
SoundbankResource#getData():::Obtains the sampled audio that is stored in this SoundbankResource:::
Synthesizer#getMaxPolyphony():::Obtains the maximum number of notes that this synthesizer can sound simultaneously.:::
Synthesizer#getLatency():::Obtains the processing latency incurred by this synthesizer, expressed in microseconds:::
Synthesizer#getChannels():::Obtains the set of MIDI channels controlled by this synthesizer:::
Synthesizer#getVoiceStatus():::Obtains the current status of the voices produced by this synthesizer:::
Synthesizer#isSoundbankSupported(Soundbank):::Informs the caller whether this synthesizer is capable of loading instruments from the specified soundbank:::
Synthesizer#loadInstrument(Instrument):::Makes a particular instrument available for synthesis:::
Synthesizer#unloadInstrument(Instrument):::Unloads a particular instrument.:::
Synthesizer#remapInstrument(Instrument, Instrument):::Remaps an instrument:::
Synthesizer#getDefaultSoundbank():::Obtains the default soundbank for the synthesizer, if one exists:::
Synthesizer#getAvailableInstruments():::Obtains a list of instruments that come with the synthesizer:::
Synthesizer#getLoadedInstruments():::Obtains a list of the instruments that are currently loaded onto this Synthesizer.:::
Synthesizer#loadAllInstruments(Soundbank):::Loads onto the Synthesizer all instruments contained in the specified Soundbank.:::
Synthesizer#unloadAllInstruments(Soundbank):::Unloads all instruments contained in the specified Soundbank.:::
Synthesizer#loadInstruments(Soundbank, Patch[]):::Loads the instruments referenced by the specified patches, from the specified Soundbank:::
Synthesizer#unloadInstruments(Soundbank, Patch[]):::Unloads the instruments referenced by the specified patches, from the MIDI sound bank specified.:::
SysexMessage#setMessage(byte[], int):::Sets the data for the system exclusive message:::status->if->throw->Integer->toHexString->new->InvalidMidiDataException->super->setMessage
SysexMessage#setMessage(int, byte[], int):::Sets the data for the system exclusive message.:::if->throw->Integer->toHexString->new->InvalidMidiDataException->if->throw->new->IndexOutOfBoundsException->if->new->byteArr->if->System->arraycopy
SysexMessage#getData():::Obtains a copy of the data for the system exclusive message:::returnedArray->new->byteArr->System->arraycopy->return
SysexMessage#clone():::Creates a new object of the same class and with the same contents as this object.:::newData->new->byteArr->System->arraycopy->return->new->SysexMessage
Track#add(MidiEvent):::Adds a new event to the track:::if->return->synchronized->if->set->contains->eventsCount->eventsList->size->lastEvent->if->eventsList->get->if->if->eotEvent->lastEvent->getTick->setTick->else->eotEvent->setTick->eventsList->add->set->add->eventsList->size->if->MidiUtils->event->getMessage->isMetaEndOfTrack->if->event->getTick->eotEvent->getTick->eotEvent->event->getTick->setTick->return->set->add->i->for->if->eventsList->set->if->eotEvent->getTick->event->getTick->eotEvent->event->getTick->setTick->eventsList->add->else->eventsList->add->return->return
Track#remove(MidiEvent):::Removes the specified event from the track.:::synchronized->if->set->remove->i->eventsList->indexOf->if->eventsList->remove->return->return
Track#get(int):::Obtains the event at the specified index.:::try->synchronized->return->eventsList->get->catch->throw->ioobe->getMessage->new->ArrayIndexOutOfBoundsException->finally
Track#size():::Obtains the number of events in this track.:::synchronized->return->eventsList->size
Track#ticks():::Obtains the length of the track, expressed in MIDI ticks:::ret->synchronized->if->eventsList->size->eventsList->eventsList->size->get->getTick->return
Track.ImmutableEndOfTrack#setMessage(int, byte[], int)::: immutable end of track set message:::throw->new->InvalidMidiDataException
Transmitter#setReceiver(Receiver):::Sets the receiver to which this transmitter will deliver MIDI messages:::
Transmitter#getReceiver():::Obtains the current receiver to which this transmitter will deliver MIDI messages.:::
Transmitter#close():::Indicates that the application has finished using the transmitter, and that limited resources it requires may be released or made available:::

javax.sound.midi.ControllerEventListener#controlChange(ShortMessage)->void:::Invoked when a Sequencer has encountered and processed a control-change event of interest to this listener
javax.sound.midi.Instrument#getPatch()->Patch:::Obtains the Patch object that indicates the bank and program numbers where this instrument is to be stored in the synthesizer.
javax.sound.midi.MetaEventListener#meta(MetaMessage)->void:::Invoked when a Sequencer has encountered and processed a MetaMessage in the Sequence it is processing.
javax.sound.midi.MetaMessage#setMessage(int, byte[], int)->void:::Sets the message parameters for a MetaMessage
javax.sound.midi.MetaMessage#getType()->int:::Obtains the type of the MetaMessage.
javax.sound.midi.MetaMessage#getData()->byte[]:::Obtains a copy of the data for the meta message
javax.sound.midi.MetaMessage#clone()->Object:::Creates a new object of the same class and with the same contents as this object.
javax.sound.midi.MidiChannel#noteOn(int, int)->void:::Starts the specified note sounding
javax.sound.midi.MidiChannel#noteOff(int, int)->void:::Turns the specified note off
javax.sound.midi.MidiChannel#noteOff(int)->void:::Turns the specified note off.
javax.sound.midi.MidiChannel#setPolyPressure(int, int)->void:::Reacts to a change in the specified note's key pressure
javax.sound.midi.MidiChannel#getPolyPressure(int)->int:::Obtains the pressure with which the specified key is being depressed
javax.sound.midi.MidiChannel#setChannelPressure(int)->void:::Reacts to a change in the keyboard pressure
javax.sound.midi.MidiChannel#getChannelPressure()->int:::Obtains the channel's keyboard pressure
javax.sound.midi.MidiChannel#controlChange(int, int)->void:::Reacts to a change in the specified controller's value
javax.sound.midi.MidiChannel#getController(int)->int:::Obtains the current value of the specified controller
javax.sound.midi.MidiChannel#programChange(int)->void:::Changes a program (patch)
javax.sound.midi.MidiChannel#programChange(int, int)->void:::Changes the program using bank and program (patch) numbers
javax.sound.midi.MidiChannel#getProgram()->int:::Obtains the current program number for this channel.
javax.sound.midi.MidiChannel#setPitchBend(int)->void:::Changes the pitch offset for all notes on this channel
javax.sound.midi.MidiChannel#getPitchBend()->int:::Obtains the upward or downward pitch offset for this channel
javax.sound.midi.MidiChannel#resetAllControllers()->void:::Resets all the implemented controllers to their default values.
javax.sound.midi.MidiChannel#allNotesOff()->void:::Turns off all notes that are currently sounding on this channel
javax.sound.midi.MidiChannel#allSoundOff()->void:::Immediately turns off all sounding notes on this channel, ignoring the state of the Hold Pedal and the internal decay rate of the current Instrument.
javax.sound.midi.MidiChannel#localControl(boolean)->boolean:::Turns local control on or off
javax.sound.midi.MidiChannel#setMono(boolean)->void:::Turns mono mode on or off
javax.sound.midi.MidiChannel#getMono()->boolean:::Obtains the current mono/poly mode
javax.sound.midi.MidiChannel#setOmni(boolean)->void:::Turns omni mode on or off
javax.sound.midi.MidiChannel#getOmni()->boolean:::Obtains the current omni mode
javax.sound.midi.MidiChannel#setMute(boolean)->void:::Sets the mute state for this channel
javax.sound.midi.MidiChannel#getMute()->boolean:::Obtains the current mute state for this channel
javax.sound.midi.MidiChannel#setSolo(boolean)->void:::Sets the solo state for this channel
javax.sound.midi.MidiChannel#getSolo()->boolean:::Obtains the current solo state for this channel
javax.sound.midi.MidiDevice#getDeviceInfo()->Info:::Obtains information about the device, including its Java class and Strings containing its name, vendor, and description.
javax.sound.midi.MidiDevice#open()->void:::Opens the device, indicating that it should now acquire any system resources it requires and become operational
javax.sound.midi.MidiDevice#close()->void:::Closes the device, indicating that the device should now release any system resources it is using
javax.sound.midi.MidiDevice#isOpen()->boolean:::Reports whether the device is open.
javax.sound.midi.MidiDevice#getMicrosecondPosition()->long:::Obtains the current time-stamp of the device, in microseconds
javax.sound.midi.MidiDevice#getMaxReceivers()->int:::Obtains the maximum number of MIDI IN connections available on this MIDI device for receiving MIDI data.
javax.sound.midi.MidiDevice#getMaxTransmitters()->int:::Obtains the maximum number of MIDI OUT connections available on this MIDI device for transmitting MIDI data.
javax.sound.midi.MidiDevice#getReceiver()->Receiver:::Obtains a MIDI IN receiver through which the MIDI device may receive MIDI data
javax.sound.midi.MidiDevice#getReceivers()->List:::Returns all currently active, non-closed receivers connected with this MidiDevice
javax.sound.midi.MidiDevice#getTransmitter()->Transmitter:::Obtains a MIDI OUT connection from which the MIDI device will transmit MIDI data
javax.sound.midi.MidiDevice#getTransmitters()->List:::Returns all currently active, non-closed transmitters connected with this MidiDevice
javax.sound.midi.MidiDevice.Info#equals(Object)->boolean:::Indicates whether the specified object is equal to this info object, returning true if the objects are the same.
javax.sound.midi.MidiDevice.Info#hashCode()->int:::Returns a hash code value for this info object.
javax.sound.midi.MidiDevice.Info#getName()->String:::Obtains the name of the device.
javax.sound.midi.MidiDevice.Info#getVendor()->String:::Obtains the name of the company who supplies the device.
javax.sound.midi.MidiDevice.Info#getDescription()->String:::Obtains the description of the device.
javax.sound.midi.MidiDevice.Info#getVersion()->String:::Obtains the version of the device.
javax.sound.midi.MidiDevice.Info#toString()->String:::Provides a string representation of the device information.
javax.sound.midi.MidiDeviceReceiver#getMidiDevice()->MidiDevice:::Obtains a MidiDevice object which is an owner of this Receiver.
javax.sound.midi.MidiDeviceTransmitter#getMidiDevice()->MidiDevice:::Obtains a MidiDevice object which is an owner of this Transmitter.
javax.sound.midi.MidiEvent#getMessage()->MidiMessage:::Obtains the MIDI message contained in the event.
javax.sound.midi.MidiEvent#setTick(long)->void:::Sets the time-stamp for the event, in MIDI ticks.
javax.sound.midi.MidiEvent#getTick()->long:::Obtains the time-stamp for the event, in MIDI ticks.
javax.sound.midi.MidiFileFormat#getType()->int:::Obtains the MIDI file type.
javax.sound.midi.MidiFileFormat#getDivisionType()->float:::Obtains the timing division type for the MIDI file.
javax.sound.midi.MidiFileFormat#getResolution()->int:::Obtains the timing resolution for the MIDI file
javax.sound.midi.MidiFileFormat#getByteLength()->int:::Obtains the length of the MIDI file, expressed in 8-bit bytes.
javax.sound.midi.MidiFileFormat#getMicrosecondLength()->long:::Obtains the length of the MIDI file, expressed in microseconds.
javax.sound.midi.MidiFileFormat#properties()->Map:::Obtain an unmodifiable map of properties
javax.sound.midi.MidiFileFormat#getProperty(String)->Object:::Obtain the property value specified by the key
javax.sound.midi.MidiMessage#setMessage(byte[], int)->void:::Sets the data for the MIDI message
javax.sound.midi.MidiMessage#getMessage()->byte[]:::Obtains the MIDI message data
javax.sound.midi.MidiMessage#getStatus()->int:::Obtains the status byte for the MIDI message
javax.sound.midi.MidiMessage#getLength()->int:::Obtains the total length of the MIDI message in bytes
javax.sound.midi.MidiMessage#clone()->Object:::Creates a new object of the same class and with the same contents as this object.
javax.sound.midi.MidiSystem#getMidiDeviceInfo()->MidiDevice.Info[]:::Obtains an array of information objects representing the set of all MIDI devices available on the system
javax.sound.midi.MidiSystem#getMidiDevice(MidiDevice.Info)->MidiDevice:::Obtains the requested MIDI device.
javax.sound.midi.MidiSystem#getReceiver()->Receiver:::Obtains a MIDI receiver from an external MIDI port or other default device
javax.sound.midi.MidiSystem#getTransmitter()->Transmitter:::Obtains a MIDI transmitter from an external MIDI port or other default source
javax.sound.midi.MidiSystem#getSynthesizer()->Synthesizer:::Obtains the default synthesizer
javax.sound.midi.MidiSystem#getSequencer()->Sequencer:::Obtains the default Sequencer, connected to a default device
javax.sound.midi.MidiSystem#getSequencer(boolean)->Sequencer:::Obtains the default Sequencer, optionally connected to a default device
javax.sound.midi.MidiSystem#getSoundbank(InputStream)->Soundbank:::Constructs a MIDI sound bank by reading it from the specified stream
javax.sound.midi.MidiSystem#getSoundbank(URL)->Soundbank:::Constructs a Soundbank by reading it from the specified URL
javax.sound.midi.MidiSystem#getSoundbank(File)->Soundbank:::Constructs a Soundbank by reading it from the specified File
javax.sound.midi.MidiSystem#getMidiFileFormat(InputStream)->MidiFileFormat:::Obtains the MIDI file format of the data in the specified input stream
javax.sound.midi.MidiSystem#getMidiFileFormat(URL)->MidiFileFormat:::Obtains the MIDI file format of the data in the specified URL
javax.sound.midi.MidiSystem#getMidiFileFormat(File)->MidiFileFormat:::Obtains the MIDI file format of the specified File
javax.sound.midi.MidiSystem#getSequence(InputStream)->Sequence:::Obtains a MIDI sequence from the specified input stream
javax.sound.midi.MidiSystem#getSequence(URL)->Sequence:::Obtains a MIDI sequence from the specified URL
javax.sound.midi.MidiSystem#getSequence(File)->Sequence:::Obtains a MIDI sequence from the specified File
javax.sound.midi.MidiSystem#getMidiFileTypes()->int[]:::Obtains the set of MIDI file types for which file writing support is provided by the system.
javax.sound.midi.MidiSystem#isFileTypeSupported(int)->boolean:::Indicates whether file writing support for the specified MIDI file type is provided by the system.
javax.sound.midi.MidiSystem#getMidiFileTypes(Sequence)->int[]:::Obtains the set of MIDI file types that the system can write from the sequence specified.
javax.sound.midi.MidiSystem#isFileTypeSupported(int, Sequence)->boolean:::Indicates whether a MIDI file of the file type specified can be written from the sequence indicated.
javax.sound.midi.MidiSystem#write(Sequence, int, OutputStream)->int:::Writes a stream of bytes representing a file of the MIDI file type indicated to the output stream provided.
javax.sound.midi.MidiSystem#write(Sequence, int, File)->int:::Writes a stream of bytes representing a file of the MIDI file type indicated to the external file provided.
javax.sound.midi.Patch#getBank()->int:::Returns the number of the bank that contains the instrument whose location this Patch specifies.
javax.sound.midi.Patch#getProgram()->int:::Returns the index, within a bank, of the instrument whose location this Patch specifies.
javax.sound.midi.Receiver#send(MidiMessage, long)->void:::Sends a MIDI message and time-stamp to this receiver
javax.sound.midi.Receiver#close()->void:::Indicates that the application has finished using the receiver, and that limited resources it requires may be released or made available
javax.sound.midi.Sequence#getDivisionType()->float:::Obtains the timing division type for this sequence.
javax.sound.midi.Sequence#getResolution()->int:::Obtains the timing resolution for this sequence
javax.sound.midi.Sequence#createTrack()->Track:::Creates a new, initially empty track as part of this sequence
javax.sound.midi.Sequence#deleteTrack(Track)->boolean:::Removes the specified track from the sequence.
javax.sound.midi.Sequence#getTracks()->Track[]:::Obtains an array containing all the tracks in this sequence
javax.sound.midi.Sequence#getMicrosecondLength()->long:::Obtains the duration of this sequence, expressed in microseconds.
javax.sound.midi.Sequence#getTickLength()->long:::Obtains the duration of this sequence, expressed in MIDI ticks.
javax.sound.midi.Sequence#getPatchList()->Patch[]:::Obtains a list of patches referenced in this sequence
javax.sound.midi.Sequencer#setSequence(Sequence)->void:::Sets the current sequence on which the sequencer operates
javax.sound.midi.Sequencer#setSequence(InputStream)->void:::Sets the current sequence on which the sequencer operates
javax.sound.midi.Sequencer#getSequence()->Sequence:::Obtains the sequence on which the Sequencer is currently operating
javax.sound.midi.Sequencer#start()->void:::Starts playback of the MIDI data in the currently loaded sequence
javax.sound.midi.Sequencer#stop()->void:::Stops recording, if active, and playback of the currently loaded sequence, if any.
javax.sound.midi.Sequencer#isRunning()->boolean:::Indicates whether the Sequencer is currently running
javax.sound.midi.Sequencer#startRecording()->void:::Starts recording and playback of MIDI data
javax.sound.midi.Sequencer#stopRecording()->void:::Stops recording, if active
javax.sound.midi.Sequencer#isRecording()->boolean:::Indicates whether the Sequencer is currently recording
javax.sound.midi.Sequencer#recordEnable(Track, int)->void:::Prepares the specified track for recording events received on a particular channel
javax.sound.midi.Sequencer#recordDisable(Track)->void:::Disables recording to the specified track
javax.sound.midi.Sequencer#getTempoInBPM()->float:::Obtains the current tempo, expressed in beats per minute
javax.sound.midi.Sequencer#setTempoInBPM(float)->void:::Sets the tempo in beats per minute
javax.sound.midi.Sequencer#getTempoInMPQ()->float:::Obtains the current tempo, expressed in microseconds per quarter note
javax.sound.midi.Sequencer#setTempoInMPQ(float)->void:::Sets the tempo in microseconds per quarter note
javax.sound.midi.Sequencer#setTempoFactor(float)->void:::Scales the sequencer's actual playback tempo by the factor provided
javax.sound.midi.Sequencer#getTempoFactor()->float:::Returns the current tempo factor for the sequencer
javax.sound.midi.Sequencer#getTickLength()->long:::Obtains the length of the current sequence, expressed in MIDI ticks, or 0 if no sequence is set.
javax.sound.midi.Sequencer#getTickPosition()->long:::Obtains the current position in the sequence, expressed in MIDI ticks
javax.sound.midi.Sequencer#setTickPosition(long)->void:::Sets the current sequencer position in MIDI ticks.
javax.sound.midi.Sequencer#getMicrosecondLength()->long:::Obtains the length of the current sequence, expressed in microseconds, or 0 if no sequence is set.
javax.sound.midi.Sequencer#getMicrosecondPosition()->long:::Obtains the current position in the sequence, expressed in microseconds.
javax.sound.midi.Sequencer#setMicrosecondPosition(long)->void:::Sets the current position in the sequence, expressed in microseconds.
javax.sound.midi.Sequencer#setMasterSyncMode(SyncMode)->void:::Sets the source of timing information used by this sequencer
javax.sound.midi.Sequencer#getMasterSyncMode()->SyncMode:::Obtains the current master synchronization mode for this sequencer.
javax.sound.midi.Sequencer#getMasterSyncModes()->SyncMode[]:::Obtains the set of master synchronization modes supported by this sequencer.
javax.sound.midi.Sequencer#setSlaveSyncMode(SyncMode)->void:::Sets the slave synchronization mode for the sequencer
javax.sound.midi.Sequencer#getSlaveSyncMode()->SyncMode:::Obtains the current slave synchronization mode for this sequencer.
javax.sound.midi.Sequencer#getSlaveSyncModes()->SyncMode[]:::Obtains the set of slave synchronization modes supported by the sequencer.
javax.sound.midi.Sequencer#setTrackMute(int, boolean)->void:::Sets the mute state for a track
javax.sound.midi.Sequencer#getTrackMute(int)->boolean:::Obtains the current mute state for a track
javax.sound.midi.Sequencer#setTrackSolo(int, boolean)->void:::Sets the solo state for a track
javax.sound.midi.Sequencer#getTrackSolo(int)->boolean:::Obtains the current solo state for a track
javax.sound.midi.Sequencer#addMetaEventListener(MetaEventListener)->boolean:::Registers a meta-event listener to receive notification whenever a meta-event is encountered in the sequence and processed by the sequencer
javax.sound.midi.Sequencer#removeMetaEventListener(MetaEventListener)->void:::Removes the specified meta-event listener from this sequencer's list of registered listeners, if in fact the listener is registered.
javax.sound.midi.Sequencer#addControllerEventListener(ControllerEventListener, int[])->int[]:::Registers a controller event listener to receive notification whenever the sequencer processes a control-change event of the requested type or types
javax.sound.midi.Sequencer#removeControllerEventListener(ControllerEventListener, int[])->int[]:::Removes a controller event listener's interest in one or more types of controller event
javax.sound.midi.Sequencer#setLoopStartPoint(long)->void:::Sets the first MIDI tick that will be played in the loop
javax.sound.midi.Sequencer#getLoopStartPoint()->long:::Obtains the start position of the loop, in MIDI ticks.
javax.sound.midi.Sequencer#setLoopEndPoint(long)->void:::Sets the last MIDI tick that will be played in the loop
javax.sound.midi.Sequencer#getLoopEndPoint()->long:::Obtains the end position of the loop, in MIDI ticks.
javax.sound.midi.Sequencer#setLoopCount(int)->void:::Sets the number of repetitions of the loop for playback
javax.sound.midi.Sequencer#getLoopCount()->int:::Obtains the number of repetitions for playback.
javax.sound.midi.Sequencer.SyncMode#equals(Object)->boolean:::Indicates whether the specified object is equal to this synchronization mode, returning true if the objects are the same.
javax.sound.midi.Sequencer.SyncMode#hashCode()->int:::Returns a hash code value for this synchronization mode.
javax.sound.midi.Sequencer.SyncMode#toString()->String:::Provides this synchronization mode's name as the string representation of the mode.
javax.sound.midi.ShortMessage#setMessage(int)->void:::Sets the parameters for a MIDI message that takes no data bytes.
javax.sound.midi.ShortMessage#setMessage(int, int, int)->void:::Sets the parameters for a MIDI message that takes one or two data bytes
javax.sound.midi.ShortMessage#setMessage(int, int, int, int)->void:::Sets the short message parameters for a channel message which takes up to two data bytes
javax.sound.midi.ShortMessage#getChannel()->int:::Obtains the MIDI channel associated with this event
javax.sound.midi.ShortMessage#getCommand()->int:::Obtains the MIDI command associated with this event
javax.sound.midi.ShortMessage#getData1()->int:::Obtains the first data byte in the message.
javax.sound.midi.ShortMessage#getData2()->int:::Obtains the second data byte in the message.
javax.sound.midi.ShortMessage#clone()->Object:::Creates a new object of the same class and with the same contents as this object.
javax.sound.midi.ShortMessage#getDataLength(int)->int:::Retrieves the number of data bytes associated with a particular status byte value.
javax.sound.midi.Soundbank#getName()->String:::Obtains the name of the sound bank.
javax.sound.midi.Soundbank#getVersion()->String:::Obtains the version string for the sound bank.
javax.sound.midi.Soundbank#getVendor()->String:::Obtains a string naming the company that provides the sound bank.
javax.sound.midi.Soundbank#getDescription()->String:::Obtains a textual description of the sound bank, suitable for display.
javax.sound.midi.Soundbank#getResources()->SoundbankResource[]:::Extracts a list of non-Instrument resources contained in the sound bank.
javax.sound.midi.Soundbank#getInstruments()->Instrument[]:::Obtains a list of instruments contained in this sound bank.
javax.sound.midi.Soundbank#getInstrument(Patch)->Instrument:::Obtains an Instrument from the given Patch.
javax.sound.midi.SoundbankResource#getSoundbank()->Soundbank:::Obtains the sound bank that contains this SoundbankResource.
javax.sound.midi.SoundbankResource#getName()->String:::Obtains the name of the resource
javax.sound.midi.SoundbankResource#getDataClass()->Class:::Obtains the class used by this sample to represent its data
javax.sound.midi.SoundbankResource#getData()->Object:::Obtains the sampled audio that is stored in this SoundbankResource
javax.sound.midi.Synthesizer#getMaxPolyphony()->int:::Obtains the maximum number of notes that this synthesizer can sound simultaneously.
javax.sound.midi.Synthesizer#getLatency()->long:::Obtains the processing latency incurred by this synthesizer, expressed in microseconds
javax.sound.midi.Synthesizer#getChannels()->MidiChannel[]:::Obtains the set of MIDI channels controlled by this synthesizer
javax.sound.midi.Synthesizer#getVoiceStatus()->VoiceStatus[]:::Obtains the current status of the voices produced by this synthesizer
javax.sound.midi.Synthesizer#isSoundbankSupported(Soundbank)->boolean:::Informs the caller whether this synthesizer is capable of loading instruments from the specified soundbank
javax.sound.midi.Synthesizer#loadInstrument(Instrument)->boolean:::Makes a particular instrument available for synthesis
javax.sound.midi.Synthesizer#unloadInstrument(Instrument)->void:::Unloads a particular instrument.
javax.sound.midi.Synthesizer#remapInstrument(Instrument, Instrument)->boolean:::Remaps an instrument
javax.sound.midi.Synthesizer#getDefaultSoundbank()->Soundbank:::Obtains the default soundbank for the synthesizer, if one exists
javax.sound.midi.Synthesizer#getAvailableInstruments()->Instrument[]:::Obtains a list of instruments that come with the synthesizer
javax.sound.midi.Synthesizer#getLoadedInstruments()->Instrument[]:::Obtains a list of the instruments that are currently loaded onto this Synthesizer.
javax.sound.midi.Synthesizer#loadAllInstruments(Soundbank)->boolean:::Loads onto the Synthesizer all instruments contained in the specified Soundbank.
javax.sound.midi.Synthesizer#unloadAllInstruments(Soundbank)->void:::Unloads all instruments contained in the specified Soundbank.
javax.sound.midi.Synthesizer#loadInstruments(Soundbank, Patch[])->boolean:::Loads the instruments referenced by the specified patches, from the specified Soundbank
javax.sound.midi.Synthesizer#unloadInstruments(Soundbank, Patch[])->void:::Unloads the instruments referenced by the specified patches, from the MIDI sound bank specified.
javax.sound.midi.SysexMessage#setMessage(byte[], int)->void:::Sets the data for the system exclusive message
javax.sound.midi.SysexMessage#setMessage(int, byte[], int)->void:::Sets the data for the system exclusive message.
javax.sound.midi.SysexMessage#getData()->byte[]:::Obtains a copy of the data for the system exclusive message
javax.sound.midi.SysexMessage#clone()->Object:::Creates a new object of the same class and with the same contents as this object.
javax.sound.midi.Track#add(MidiEvent)->boolean:::Adds a new event to the track
javax.sound.midi.Track#remove(MidiEvent)->boolean:::Removes the specified event from the track.
javax.sound.midi.Track#get(int)->MidiEvent:::Obtains the event at the specified index.
javax.sound.midi.Track#size()->int:::Obtains the number of events in this track.
javax.sound.midi.Track#ticks()->long:::Obtains the length of the track, expressed in MIDI ticks
javax.sound.midi.Transmitter#setReceiver(Receiver)->void:::Sets the receiver to which this transmitter will deliver MIDI messages
javax.sound.midi.Transmitter#getReceiver()->Receiver:::Obtains the current receiver to which this transmitter will deliver MIDI messages.
javax.sound.midi.Transmitter#close()->void:::Indicates that the application has finished using the transmitter, and that limited resources it requires may be released or made available

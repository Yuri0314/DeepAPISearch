jdk.internal.net.http.AbstractAsyncSSLConnection#getConnectionFlow()->SSLTube::: abstract async connection get connection flow
jdk.internal.net.http.AbstractAsyncSSLConnection#getALPN()->CompletableFuture::: abstract async connection get n
jdk.internal.net.http.AbstractAsyncSSLConnection#getEngine()->SSLEngine::: abstract async connection get engine
jdk.internal.net.http.AbstractAsyncSSLConnection#isSecure()->boolean::: abstract async connection is secure
jdk.internal.net.http.AbstractSubscription#demand()->Demand:::Returns the subscription's demand.
jdk.internal.net.http.AsyncEvent#channel()->SelectableChannel:::Returns the channel
jdk.internal.net.http.AsyncEvent#interestOps()->int:::Returns the selector interest op flags OR'd
jdk.internal.net.http.AsyncEvent#handle()->void:::Called when event occurs
jdk.internal.net.http.AsyncEvent#abort(IOException)->void:::Called when an error occurs during registration, or when the selector has been shut down
jdk.internal.net.http.AsyncEvent#repeating()->boolean::: async event repeating
jdk.internal.net.http.AsyncSSLConnection#connectAsync(Exchange)->CompletableFuture::: async connection connect async
jdk.internal.net.http.AsyncSSLConnection#finishConnect()->CompletableFuture::: async connection finish connect
jdk.internal.net.http.AsyncSSLConnection#connected()->boolean::: async connection connected
jdk.internal.net.http.AsyncSSLConnection#publisher()->HttpPublisher::: async connection publisher
jdk.internal.net.http.AsyncSSLConnection#isProxied()->boolean::: async connection is proxied
jdk.internal.net.http.AsyncSSLConnection#channel()->SocketChannel::: async connection channel
jdk.internal.net.http.AsyncSSLConnection#cacheKey()->ConnectionPool.CacheKey::: async connection cache key
jdk.internal.net.http.AsyncSSLConnection#close()->void::: async connection close
jdk.internal.net.http.AsyncSSLConnection#getConnectionFlow()->SSLTube::: async connection get connection flow
jdk.internal.net.http.AsyncSSLTunnelConnection#connectAsync(Exchange)->CompletableFuture::: async tunnel connection connect async
jdk.internal.net.http.AsyncSSLTunnelConnection#finishConnect()->CompletableFuture::: async tunnel connection finish connect
jdk.internal.net.http.AsyncSSLTunnelConnection#isTunnel()->boolean::: async tunnel connection is tunnel
jdk.internal.net.http.AsyncSSLTunnelConnection#connected()->boolean::: async tunnel connection connected
jdk.internal.net.http.AsyncSSLTunnelConnection#publisher()->HttpPublisher::: async tunnel connection publisher
jdk.internal.net.http.AsyncSSLTunnelConnection#toString()->String::: async tunnel connection to string
jdk.internal.net.http.AsyncSSLTunnelConnection#cacheKey()->ConnectionPool.CacheKey::: async tunnel connection cache key
jdk.internal.net.http.AsyncSSLTunnelConnection#close()->void::: async tunnel connection close
jdk.internal.net.http.AsyncSSLTunnelConnection#channel()->SocketChannel::: async tunnel connection channel
jdk.internal.net.http.AsyncSSLTunnelConnection#isProxied()->boolean::: async tunnel connection is proxied
jdk.internal.net.http.AsyncSSLTunnelConnection#getConnectionFlow()->SSLTube::: async tunnel connection get connection flow
jdk.internal.net.http.AsyncTriggerEvent#channel()->SelectableChannel:::Returns null
jdk.internal.net.http.AsyncTriggerEvent#interestOps()->int:::Returns 0
jdk.internal.net.http.AsyncTriggerEvent#handle()->void::: async trigger event handle
jdk.internal.net.http.AsyncTriggerEvent#abort(IOException)->void::: async trigger event abort
jdk.internal.net.http.AsyncTriggerEvent#repeating()->boolean::: async trigger event repeating
jdk.internal.net.http.AuthenticationFilter#request(HttpRequestImpl, MultiExchange)->void::: authentication filter request
jdk.internal.net.http.AuthenticationFilter.AuthInfo#retryWithCredentials(PasswordAuthentication)->AuthInfo::: auth info retry with credentials
jdk.internal.net.http.AuthenticationFilter#response(Response)->HttpRequestImpl::: authentication filter response
jdk.internal.net.http.AuthenticationFilter#getCache(MultiExchange)->Cache::: authentication filter get cache
jdk.internal.net.http.AuthenticationFilter.Cache#get(URI, boolean)->CacheEntry::: cache get
jdk.internal.net.http.AuthenticationFilter.Cache#remove(String, URI, boolean)->void::: cache remove
jdk.internal.net.http.AuthenticationFilter.Cache#remove(CacheEntry)->void::: cache remove
jdk.internal.net.http.AuthenticationFilter.Cache#store(String, URI, boolean, PasswordAuthentication)->void::: cache store
jdk.internal.net.http.AuthenticationFilter#normalize(URI, boolean)->URI::: authentication filter normalize
jdk.internal.net.http.AuthenticationFilter.CacheEntry#value()->PasswordAuthentication::: cache entry value
jdk.internal.net.http.AuthenticationFilter.CacheEntry#equalsKey(URI, boolean)->boolean::: cache entry equals key
jdk.internal.net.http.BufferingSubscriber#onSubscribe(Flow.Subscription)->void::: buffering subscriber on subscribe
jdk.internal.net.http.BufferingSubscriber#onNext(List)->void::: buffering subscriber on next
jdk.internal.net.http.BufferingSubscriber#onError(Throwable)->void::: buffering subscriber on error
jdk.internal.net.http.BufferingSubscriber#onComplete()->void::: buffering subscriber on complete
jdk.internal.net.http.BufferingSubscriber#getBody()->CompletionStage::: buffering subscriber get body
jdk.internal.net.http.ConnectionPool.CacheKey#equals(Object)->boolean::: cache key equals
jdk.internal.net.http.ConnectionPool.CacheKey#hashCode()->int::: cache key hash code
jdk.internal.net.http.ConnectionPool#dbgString()->String::: connection pool dbg string
jdk.internal.net.http.ConnectionPool#start()->void::: connection pool start
jdk.internal.net.http.ConnectionPool#cacheKey(InetSocketAddress, InetSocketAddress)->CacheKey::: connection pool cache key
jdk.internal.net.http.ConnectionPool#getConnection(boolean, InetSocketAddress, InetSocketAddress)->HttpConnection::: connection pool get connection
jdk.internal.net.http.ConnectionPool#returnToPool(HttpConnection)->void:::Returns the connection to the pool.
jdk.internal.net.http.ConnectionPool#returnToPool(HttpConnection, Instant, long)->void::: connection pool return to pool
jdk.internal.net.http.ConnectionPool#purgeExpiredConnectionsAndReturnNextDeadline()->long:::Purge expired connection and return the number of milliseconds in which the next connection is scheduled to expire
jdk.internal.net.http.ConnectionPool#purgeExpiredConnectionsAndReturnNextDeadline(Instant)->long::: connection pool purge expired connections and return next deadline
jdk.internal.net.http.ConnectionPool#stop()->void::: connection pool stop
jdk.internal.net.http.ConnectionPool#contains(HttpConnection)->boolean::: connection pool contains
jdk.internal.net.http.ConnectionPool#cleanup(HttpConnection, Throwable)->void::: connection pool cleanup
jdk.internal.net.http.CookieFilter#request(HttpRequestImpl, MultiExchange)->void::: cookie filter request
jdk.internal.net.http.CookieFilter#response(Response)->HttpRequestImpl::: cookie filter response
jdk.internal.net.http.Exchange#getPushGroup()->PushGroup::: exchange get push group
jdk.internal.net.http.Exchange#executor()->Executor::: exchange executor
jdk.internal.net.http.Exchange#request()->HttpRequestImpl::: exchange request
jdk.internal.net.http.Exchange#client()->HttpClientImpl::: exchange client
jdk.internal.net.http.Exchange.ConnectionAborter#connection(HttpConnection)->void::: connection aborter connection
jdk.internal.net.http.Exchange.ConnectionAborter#closeConnection()->void::: connection aborter close connection
jdk.internal.net.http.Exchange#readBodyAsync(HttpResponse.BodyHandler)->CompletableFuture::: exchange read body async
jdk.internal.net.http.Exchange#ignoreBody()->CompletableFuture:::Called after a redirect or similar kind of retry where a body might be sent but we don't want it
jdk.internal.net.http.Exchange#released()->void:::Called when a new exchange is created to replace this exchange
jdk.internal.net.http.Exchange#cancel()->void::: exchange cancel
jdk.internal.net.http.Exchange#cancel(IOException)->void::: exchange cancel
jdk.internal.net.http.Exchange#h2Upgrade()->void::: exchange h2 upgrade
jdk.internal.net.http.Exchange#getCancelCause()->IOException::: exchange get cancel cause
jdk.internal.net.http.Exchange#responseAsync()->CompletableFuture::: exchange response async
jdk.internal.net.http.Exchange#responseAsyncImpl(HttpConnection)->CompletableFuture::: exchange response async impl
jdk.internal.net.http.Exchange#responseAsyncImpl0(HttpConnection)->CompletableFuture::: exchange response async impl0
jdk.internal.net.http.Exchange#ignoreBody(HttpResponse.ResponseInfo)->HttpResponse.BodySubscriber::: exchange ignore body
jdk.internal.net.http.Exchange#version()->HttpClient.Version::: exchange version
jdk.internal.net.http.Exchange#dbgString()->String::: exchange dbg string
jdk.internal.net.http.ExchangeImpl#getExchange()->Exchange::: exchange impl get exchange
jdk.internal.net.http.ExchangeImpl#connection()->HttpConnection:::Returns the HttpConnection instance to which this exchange is assigned.
jdk.internal.net.http.ExchangeImpl#get(Exchange, HttpConnection)->CompletableFuture>:::Initiates a new exchange and assigns it to a connection if one exists already
jdk.internal.net.http.ExchangeImpl#sendHeadersAsync()->CompletableFuture>::: exchange impl send headers async
jdk.internal.net.http.ExchangeImpl#sendBodyAsync()->CompletableFuture>:::Sends a request body, after request headers have been sent.
jdk.internal.net.http.ExchangeImpl#readBodyAsync(HttpResponse.BodyHandler, boolean, Executor)->CompletableFuture::: exchange impl read body async
jdk.internal.net.http.ExchangeImpl#ignoreBody()->CompletableFuture:::Ignore/consume the body.
jdk.internal.net.http.ExchangeImpl#getResponseAsync(Executor)->CompletableFuture:::Gets the response headers
jdk.internal.net.http.ExchangeImpl#cancel()->void:::Cancels a request
jdk.internal.net.http.ExchangeImpl#cancel(IOException)->void:::Cancels a request with a cause
jdk.internal.net.http.ExchangeImpl#released()->void:::Called when the exchange is released, so that cleanup actions may be performed - such as deregistering callbacks
jdk.internal.net.http.ExchangeImpl#completed()->void:::Called when the exchange is completed, so that cleanup actions may be performed - such as deregistering callbacks
jdk.internal.net.http.ExchangeImpl#isCanceled()->boolean:::Returns true if this exchange was canceled.
jdk.internal.net.http.ExchangeImpl#getCancelCause()->Throwable:::Returns the cause for which this exchange was canceled, if available.
jdk.internal.net.http.FilterFactory#addFilter(Class)->void::: filter factory add filter
jdk.internal.net.http.FilterFactory#getFilterChain()->LinkedList::: filter factory get filter chain
jdk.internal.net.http.HeaderFilter#request(HttpRequestImpl, MultiExchange)->void::: header filter request
jdk.internal.net.http.HeaderFilter#response(Response)->HttpRequestImpl:::Returns null if response ok to be given to user
jdk.internal.net.http.HeaderParser#findKey(int)->String::: header parser find key
jdk.internal.net.http.HeaderParser#findValue(int)->String::: header parser find value
jdk.internal.net.http.HeaderParser#findValue(String)->String::: header parser find value
jdk.internal.net.http.HeaderParser#findValue(String, String)->String::: header parser find value
jdk.internal.net.http.HeaderParser.ParserIterator#hasNext()->boolean::: parser iterator has next
jdk.internal.net.http.HeaderParser.ParserIterator#next()->String::: parser iterator next
jdk.internal.net.http.HeaderParser#keys()->Iterator::: header parser keys
jdk.internal.net.http.HeaderParser#toString()->String::: header parser to string
jdk.internal.net.http.Http1AsyncReceiver.Http1AsyncDelegate#tryAsyncReceive(ByteBuffer)->boolean:::Receives and handles a byte buffer reference.
jdk.internal.net.http.Http1AsyncReceiver.Http1AsyncDelegate#onReadError(Throwable)->void:::Called when an exception is raised.
jdk.internal.net.http.Http1AsyncReceiver.Http1AsyncDelegate#onSubscribe(AbstractSubscription)->void:::Must be called before any other method on the delegate
jdk.internal.net.http.Http1AsyncReceiver.Http1AsyncDelegate#subscription()->AbstractSubscription:::Returns the subscription that was passed to onSubscribe
jdk.internal.net.http.Http1AsyncReceiver.Http1AsyncDelegate#close(Throwable)->void:::Called to make sure resources are released when the when the Http1AsyncReceiver is stopped.
jdk.internal.net.http.Http1AsyncReceiver#setRetryOnError(boolean)->void::: http1 async receiver set retry on error
jdk.internal.net.http.Http1AsyncReceiver#clear()->void::: http1 async receiver clear
jdk.internal.net.http.Http1AsyncReceiver#subscribe(Http1AsyncDelegate)->void::: http1 async receiver subscribe
jdk.internal.net.http.Http1AsyncReceiver#remaining()->long::: http1 async receiver remaining
jdk.internal.net.http.Http1AsyncReceiver#unsubscribe(Http1AsyncDelegate)->void::: http1 async receiver unsubscribe
jdk.internal.net.http.Http1AsyncReceiver#onReadError(Throwable)->void::: http1 async receiver on read error
jdk.internal.net.http.Http1AsyncReceiver#stop()->void::: http1 async receiver stop
jdk.internal.net.http.Http1AsyncReceiver#subscriber()->TubeSubscriber:::Returns the TubeSubscriber for reading from the connection flow.
jdk.internal.net.http.Http1AsyncReceiver.Http1TubeSubscriber#onSubscribe(Flow.Subscription)->void::: http1 tube subscriber on subscribe
jdk.internal.net.http.Http1AsyncReceiver.Http1TubeSubscriber#requestMore()->void::: http1 tube subscriber request more
jdk.internal.net.http.Http1AsyncReceiver.Http1TubeSubscriber#onNext(List)->void::: http1 tube subscriber on next
jdk.internal.net.http.Http1AsyncReceiver.Http1TubeSubscriber#onError(Throwable)->void::: http1 tube subscriber on error
jdk.internal.net.http.Http1AsyncReceiver.Http1TubeSubscriber#onComplete()->void::: http1 tube subscriber on complete
jdk.internal.net.http.Http1AsyncReceiver.Http1TubeSubscriber#dropSubscription()->void::: http1 tube subscriber drop subscription
jdk.internal.net.http.Http1AsyncReceiver#drain(ByteBuffer)->ByteBuffer::: http1 async receiver drain
jdk.internal.net.http.Http1AsyncReceiver#dbgString()->String::: http1 async receiver dbg string
jdk.internal.net.http.Http1Exchange.DataPair#toString()->String::: data pair to string
jdk.internal.net.http.Http1Exchange.Http1BodySubscriber#request(long)->void::: http1 body subscriber request
jdk.internal.net.http.Http1Exchange.Http1BodySubscriber#currentStateMessage()->String:::A current-state message suitable for inclusion in an exception detail message.
jdk.internal.net.http.Http1Exchange.Http1BodySubscriber#isSubscribed()->boolean::: http1 body subscriber is subscribed
jdk.internal.net.http.Http1Exchange.Http1BodySubscriber#setSubscription(Flow.Subscription)->void::: http1 body subscriber set subscription
jdk.internal.net.http.Http1Exchange.Http1BodySubscriber#cancelSubscription()->void::: http1 body subscriber cancel subscription
jdk.internal.net.http.Http1Exchange.Http1BodySubscriber#completeSubscriber(Logger)->Http1BodySubscriber::: http1 body subscriber complete subscriber
jdk.internal.net.http.Http1Exchange#toString()->String::: http1 exchange to string
jdk.internal.net.http.Http1Exchange#request()->HttpRequestImpl::: http1 exchange request
jdk.internal.net.http.Http1Exchange#connection()->HttpConnection::: http1 exchange connection
jdk.internal.net.http.Http1Exchange#sendHeadersAsync()->CompletableFuture>::: http1 exchange send headers async
jdk.internal.net.http.Http1Exchange#sendBodyAsync()->CompletableFuture>::: http1 exchange send body async
jdk.internal.net.http.Http1Exchange#getResponseAsync(Executor)->CompletableFuture::: http1 exchange get response async
jdk.internal.net.http.Http1Exchange#readBodyAsync(BodyHandler, boolean, Executor)->CompletableFuture::: http1 exchange read body async
jdk.internal.net.http.Http1Exchange#ignoreBody()->CompletableFuture::: http1 exchange ignore body
jdk.internal.net.http.Http1Exchange#drainLeftOverBytes()->ByteBuffer::: http1 exchange drain left over bytes
jdk.internal.net.http.Http1Exchange#released()->void::: http1 exchange released
jdk.internal.net.http.Http1Exchange#completed()->void::: http1 exchange completed
jdk.internal.net.http.Http1Exchange#cancel()->void:::Cancel checks to see if request and responseAsync finished already
jdk.internal.net.http.Http1Exchange#cancel(IOException)->void:::Cancel checks to see if request and responseAsync finished already
jdk.internal.net.http.Http1Exchange#isCanceled()->boolean:::Returns true if this exchange was canceled.
jdk.internal.net.http.Http1Exchange#getCancelCause()->Throwable:::Returns the cause for which this exchange was canceled, if available.
jdk.internal.net.http.Http1Exchange#appendToOutgoing(Throwable)->void:::Convenience for #appendToOutgoing(DataPair), with just a Throwable.
jdk.internal.net.http.Http1Exchange#appendToOutgoing(List)->void:::Convenience for #appendToOutgoing(DataPair), with just data.
jdk.internal.net.http.Http1Exchange.Http1Publisher#subscribe(Flow.Subscriber>)->void::: http1 publisher subscribe
jdk.internal.net.http.Http1Exchange.Http1Publisher#dbgString()->String::: http1 publisher dbg string
jdk.internal.net.http.Http1Exchange.Http1Publisher.WriteTask#run()->void::: write task run
jdk.internal.net.http.Http1Exchange.Http1Publisher.Http1WriteSubscription#request(long)->void::: http1 write subscription request
jdk.internal.net.http.Http1Exchange.Http1Publisher.Http1WriteSubscription#cancel()->void::: http1 write subscription cancel
jdk.internal.net.http.Http1Exchange#dbgString()->String::: http1 exchange dbg string
jdk.internal.net.http.Http1HeaderParser#statusLine()->String:::Returns the status-line.
jdk.internal.net.http.Http1HeaderParser#responseCode()->int:::Returns the response code.
jdk.internal.net.http.Http1HeaderParser#headers()->HttpHeaders:::Returns the headers, possibly empty.
jdk.internal.net.http.Http1HeaderParser#currentStateMessage()->String:::A current-state message suitable for inclusion in an exception detail message.
jdk.internal.net.http.Http1HeaderParser#parse(ByteBuffer)->boolean:::Parses HTTP/1.X status-line and headers from the given bytes
jdk.internal.net.http.Http1Request#finished()->boolean::: http1 request finished
jdk.internal.net.http.Http1Request#setFinished()->void::: http1 request set finished
jdk.internal.net.http.Http1Request#headers()->List::: http1 request headers
jdk.internal.net.http.Http1Request#continueRequest()->Http1BodySubscriber::: http1 request continue request
jdk.internal.net.http.Http1Request.StreamSubscriber#onSubscribe(Flow.Subscription)->void::: stream subscriber on subscribe
jdk.internal.net.http.Http1Request.StreamSubscriber#onNext(ByteBuffer)->void::: stream subscriber on next
jdk.internal.net.http.Http1Request.StreamSubscriber#currentStateMessage()->String::: stream subscriber current state message
jdk.internal.net.http.Http1Request.StreamSubscriber#onError(Throwable)->void::: stream subscriber on error
jdk.internal.net.http.Http1Request.StreamSubscriber#onComplete()->void::: stream subscriber on complete
jdk.internal.net.http.Http1Request.FixedContentSubscriber#onSubscribe(Flow.Subscription)->void::: fixed content subscriber on subscribe
jdk.internal.net.http.Http1Request.FixedContentSubscriber#onNext(ByteBuffer)->void::: fixed content subscriber on next
jdk.internal.net.http.Http1Request.FixedContentSubscriber#currentStateMessage()->String::: fixed content subscriber current state message
jdk.internal.net.http.Http1Request.FixedContentSubscriber#onError(Throwable)->void::: fixed content subscriber on error
jdk.internal.net.http.Http1Request.FixedContentSubscriber#onComplete()->void::: fixed content subscriber on complete
jdk.internal.net.http.Http1Response#readHeadersAsync(Executor)->CompletableFuture::: http1 response read headers async
jdk.internal.net.http.Http1Response#completed()->void::: http1 response completed
jdk.internal.net.http.Http1Response#finished()->boolean::: http1 response finished
jdk.internal.net.http.Http1Response#fixupContentLen(long)->long:::Return known fixed content length or -1 if chunked, or -2 if no content-length information in which case, connection termination delimits the response body
jdk.internal.net.http.Http1Response#ignoreBody(Executor)->CompletableFuture:::Read up to MAX_IGNORE bytes discarding
jdk.internal.net.http.Http1Response.Http1BodySubscriber#getBody()->CompletionStage::: http1 body subscriber get body
jdk.internal.net.http.Http1Response.Http1BodySubscriber#onSubscribe(Flow.Subscription)->void::: http1 body subscriber on subscribe
jdk.internal.net.http.Http1Response.Http1BodySubscriber#onNext(List)->void::: http1 body subscriber on next
jdk.internal.net.http.Http1Response.Http1BodySubscriber#onError(Throwable)->void::: http1 body subscriber on error
jdk.internal.net.http.Http1Response.Http1BodySubscriber#onComplete()->void::: http1 body subscriber on complete
jdk.internal.net.http.Http1Response#readBody(HttpResponse.BodySubscriber, boolean, Executor)->CompletableFuture::: http1 response read body
jdk.internal.net.http.Http1Response#responseHeaders()->HttpHeaders::: http1 response response headers
jdk.internal.net.http.Http1Response#responseCode()->int::: http1 response response code
jdk.internal.net.http.Http1Response#onReadError(Throwable)->void::: http1 response on read error
jdk.internal.net.http.Http1Response#receiver(State)->Receiver::: http1 response receiver
jdk.internal.net.http.Http1Response.Receiver#start(T)->void::: receiver start
jdk.internal.net.http.Http1Response.Receiver#completion()->CompletableFuture::: receiver completion
jdk.internal.net.http.Http1Response.Receiver#tryAsyncReceive(ByteBuffer)->boolean::: receiver try async receive
jdk.internal.net.http.Http1Response.Receiver#onReadError(Throwable)->void::: receiver on read error
jdk.internal.net.http.Http1Response.Receiver#handle(ByteBuffer, T, CompletableFuture)->void::: receiver handle
jdk.internal.net.http.Http1Response.Receiver#reset()->void::: receiver reset
jdk.internal.net.http.Http1Response.Receiver#accept(ByteBuffer, T, CompletableFuture)->boolean::: receiver accept
jdk.internal.net.http.Http1Response.Receiver#onSubscribe(AbstractSubscription)->void::: receiver on subscribe
jdk.internal.net.http.Http1Response.Receiver#subscription()->AbstractSubscription::: receiver subscription
jdk.internal.net.http.Http1Response.HeadersReader#subscription()->AbstractSubscription::: headers reader subscription
jdk.internal.net.http.Http1Response.HeadersReader#onSubscribe(AbstractSubscription)->void::: headers reader on subscribe
jdk.internal.net.http.Http1Response.HeadersReader#reset()->void::: headers reader reset
jdk.internal.net.http.Http1Response.HeadersReader#start(Http1HeaderParser)->void::: headers reader start
jdk.internal.net.http.Http1Response.HeadersReader#completion()->CompletableFuture::: headers reader completion
jdk.internal.net.http.Http1Response.HeadersReader#tryAsyncReceive(ByteBuffer)->boolean::: headers reader try async receive
jdk.internal.net.http.Http1Response.HeadersReader#onReadError(Throwable)->void::: headers reader on read error
jdk.internal.net.http.Http1Response.HeadersReader#handle(ByteBuffer, Http1HeaderParser, CompletableFuture)->void::: headers reader handle
jdk.internal.net.http.Http1Response.HeadersReader#close(Throwable)->void::: headers reader close
jdk.internal.net.http.Http1Response.BodyReader#reset()->void::: body reader reset
jdk.internal.net.http.Http1Response.BodyReader#start(BodyParser)->void::: body reader start
jdk.internal.net.http.Http1Response.BodyReader#completion()->CompletableFuture::: body reader completion
jdk.internal.net.http.Http1Response.BodyReader#tryAsyncReceive(ByteBuffer)->boolean::: body reader try async receive
jdk.internal.net.http.Http1Response.BodyReader#onReadError(Throwable)->void::: body reader on read error
jdk.internal.net.http.Http1Response.BodyReader#subscription()->AbstractSubscription::: body reader subscription
jdk.internal.net.http.Http1Response.BodyReader#onSubscribe(AbstractSubscription)->void::: body reader on subscribe
jdk.internal.net.http.Http1Response.BodyReader#handle(ByteBuffer, BodyParser, CompletableFuture)->void::: body reader handle
jdk.internal.net.http.Http1Response.BodyReader#onComplete(Throwable)->void::: body reader on complete
jdk.internal.net.http.Http1Response.BodyReader#close(Throwable)->void::: body reader close
jdk.internal.net.http.Http1Response.BodyReader#toString()->String::: body reader to string
jdk.internal.net.http.Http2ClientImpl#getConnectionFor(HttpRequestImpl, Exchange)->CompletableFuture:::When HTTP/2 requested only
jdk.internal.net.http.Http2ClientImpl#offerConnection(Http2Connection)->boolean::: http2 client impl offer connection
jdk.internal.net.http.Http2ClientImpl#deleteConnection(Http2Connection)->void::: http2 client impl delete connection
jdk.internal.net.http.Http2ClientImpl#stop()->void::: http2 client impl stop
jdk.internal.net.http.Http2ClientImpl#client()->HttpClientImpl::: http2 client impl client
jdk.internal.net.http.Http2ClientImpl#getSettingsString()->String:::Returns the client settings as a base64 (url) encoded string
jdk.internal.net.http.Http2ClientImpl#getConnectionWindowSize(SettingsFrame)->int::: http2 client impl get connection window size
jdk.internal.net.http.Http2ClientImpl#getClientSettings()->SettingsFrame::: http2 client impl get client settings
jdk.internal.net.http.Http2Connection#createAsync(HttpConnection, Http2ClientImpl, Exchange, Supplier)->CompletableFuture::: http2 connection create async
jdk.internal.net.http.Http2Connection#createAsync(HttpRequestImpl, Http2ClientImpl, Exchange)->CompletableFuture::: http2 connection create async
jdk.internal.net.http.Http2Connection#client()->HttpClientImpl::: http2 connection client
jdk.internal.net.http.Http2Connection#reserveStream(boolean)->boolean::: http2 connection reserve stream
jdk.internal.net.http.Http2Connection#finalStream()->boolean::: http2 connection final stream
jdk.internal.net.http.Http2Connection#setFinalStream()->void:::Mark this connection so no more streams created on it and it will close when all are complete.
jdk.internal.net.http.Http2Connection#keyFor(HttpConnection)->String::: http2 connection key for
jdk.internal.net.http.Http2Connection#keyFor(URI, InetSocketAddress)->String::: http2 connection key for
jdk.internal.net.http.Http2Connection#keyString(boolean, boolean, String, int)->String::: http2 connection key string
jdk.internal.net.http.Http2Connection#key()->String::: http2 connection key
jdk.internal.net.http.Http2Connection#offerConnection()->boolean::: http2 connection offer connection
jdk.internal.net.http.Http2Connection#getInitialSendWindowSize()->int::: http2 connection get initial send window size
jdk.internal.net.http.Http2Connection#maxConcurrentClientInitiatedStreams()->int::: http2 connection max concurrent client initiated streams
jdk.internal.net.http.Http2Connection#maxConcurrentServerInitiatedStreams()->int::: http2 connection max concurrent server initiated streams
jdk.internal.net.http.Http2Connection#close()->void::: http2 connection close
jdk.internal.net.http.Http2Connection#asyncReceive(ByteBuffer)->void::: http2 connection async receive
jdk.internal.net.http.Http2Connection#getRecordedCause()->Throwable::: http2 connection get recorded cause
jdk.internal.net.http.Http2Connection#shutdown(Throwable)->void::: http2 connection shutdown
jdk.internal.net.http.Http2Connection#processFrame(Http2Frame)->void:::Handles stream 0 (common) frames that apply to whole connection and passes other stream specific frames to that Stream object
jdk.internal.net.http.Http2Connection#dropDataFrame(DataFrame)->void::: http2 connection drop data frame
jdk.internal.net.http.Http2Connection#ensureWindowUpdated(DataFrame)->void::: http2 connection ensure window updated
jdk.internal.net.http.Http2Connection#resetStream(int, int)->void::: http2 connection reset stream
jdk.internal.net.http.Http2Connection#decrementStreamsCount(int)->void::: http2 connection decrement streams count
jdk.internal.net.http.Http2Connection#closeStream(int)->void::: http2 connection close stream
jdk.internal.net.http.Http2Connection#getMaxSendFrameSize()->int:::Max frame size we are allowed to send
jdk.internal.net.http.Http2Connection#getMaxReceiveFrameSize()->int:::Max frame size we will receive
jdk.internal.net.http.Http2Connection#getStream(int)->Stream:::Returns an existing Stream with given id, or null if doesn't exist
jdk.internal.net.http.Http2Connection#createStream(Exchange)->Stream:::Creates Stream with given id.
jdk.internal.net.http.Http2Connection#createPushStream(Stream, Exchange)->Stream.PushedStream::: http2 connection create push stream
jdk.internal.net.http.Http2Connection#putStream(Stream, int)->void::: http2 connection put stream
jdk.internal.net.http.Http2Connection#sendFrame(Http2Frame)->void::: http2 connection send frame
jdk.internal.net.http.Http2Connection#sendDataFrame(DataFrame)->void::: http2 connection send data frame
jdk.internal.net.http.Http2Connection#sendUnorderedFrame(Http2Frame)->void::: http2 connection send unordered frame
jdk.internal.net.http.Http2Connection.Http2TubeSubscriber#processQueue()->void::: http2 tube subscriber process queue
jdk.internal.net.http.Http2Connection.Http2TubeSubscriber#onSubscribe(Flow.Subscription)->void::: http2 tube subscriber on subscribe
jdk.internal.net.http.Http2Connection.Http2TubeSubscriber#onNext(List)->void::: http2 tube subscriber on next
jdk.internal.net.http.Http2Connection.Http2TubeSubscriber#onError(Throwable)->void::: http2 tube subscriber on error
jdk.internal.net.http.Http2Connection.Http2TubeSubscriber#onComplete()->void::: http2 tube subscriber on complete
jdk.internal.net.http.Http2Connection.Http2TubeSubscriber#dropSubscription()->void::: http2 tube subscriber drop subscription
jdk.internal.net.http.Http2Connection#isActive()->boolean::: http2 connection is active
jdk.internal.net.http.Http2Connection#toString()->String::: http2 connection to string
jdk.internal.net.http.Http2Connection#dbgString()->String::: http2 connection dbg string
jdk.internal.net.http.Http2Connection.HeaderDecoder#onDecoded(CharSequence, CharSequence)->void::: header decoder on decoded
jdk.internal.net.http.Http2Connection.HeaderDecoder#headers()->HttpHeaders::: header decoder headers
jdk.internal.net.http.Http2Connection.ValidatingHeadersConsumer#reset()->void:::Called when END_HEADERS was received
jdk.internal.net.http.Http2Connection.ValidatingHeadersConsumer#onDecoded(CharSequence, CharSequence)->void::: validating headers consumer on decoded
jdk.internal.net.http.Http2Connection.ConnectionWindowUpdateSender#getStreamId()->int::: connection window update sender get stream id
jdk.internal.net.http.Http2Connection.ALPNException#getConnection()->AbstractAsyncSSLConnection::: exception get connection
jdk.internal.net.http.HttpClientBuilderImpl#cookieHandler(CookieHandler)->HttpClientBuilderImpl::: http client builder impl cookie handler
jdk.internal.net.http.HttpClientBuilderImpl#connectTimeout(Duration)->HttpClientBuilderImpl::: http client builder impl connect timeout
jdk.internal.net.http.HttpClientBuilderImpl#sslContext(SSLContext)->HttpClientBuilderImpl::: http client builder impl ssl context
jdk.internal.net.http.HttpClientBuilderImpl#sslParameters(SSLParameters)->HttpClientBuilderImpl::: http client builder impl ssl parameters
jdk.internal.net.http.HttpClientBuilderImpl#executor(Executor)->HttpClientBuilderImpl::: http client builder impl executor
jdk.internal.net.http.HttpClientBuilderImpl#followRedirects(HttpClient.Redirect)->HttpClientBuilderImpl::: http client builder impl follow redirects
jdk.internal.net.http.HttpClientBuilderImpl#version(HttpClient.Version)->HttpClientBuilderImpl::: http client builder impl version
jdk.internal.net.http.HttpClientBuilderImpl#priority(int)->HttpClientBuilderImpl::: http client builder impl priority
jdk.internal.net.http.HttpClientBuilderImpl#proxy(ProxySelector)->HttpClientBuilderImpl::: http client builder impl proxy
jdk.internal.net.http.HttpClientBuilderImpl#authenticator(Authenticator)->HttpClientBuilderImpl::: http client builder impl authenticator
jdk.internal.net.http.HttpClientBuilderImpl#build()->HttpClient::: http client builder impl build
jdk.internal.net.http.HttpClientFacade#getOperationsTracker()->Tracker::: http client facade get operations tracker
jdk.internal.net.http.HttpClientFacade#cookieHandler()->Optional::: http client facade cookie handler
jdk.internal.net.http.HttpClientFacade#connectTimeout()->Optional::: http client facade connect timeout
jdk.internal.net.http.HttpClientFacade#followRedirects()->Redirect::: http client facade follow redirects
jdk.internal.net.http.HttpClientFacade#proxy()->Optional::: http client facade proxy
jdk.internal.net.http.HttpClientFacade#sslContext()->SSLContext::: http client facade ssl context
jdk.internal.net.http.HttpClientFacade#sslParameters()->SSLParameters::: http client facade ssl parameters
jdk.internal.net.http.HttpClientFacade#authenticator()->Optional::: http client facade authenticator
jdk.internal.net.http.HttpClientFacade#version()->HttpClient.Version::: http client facade version
jdk.internal.net.http.HttpClientFacade#executor()->Optional::: http client facade executor
jdk.internal.net.http.HttpClientFacade#send(HttpRequest, HttpResponse.BodyHandler)->HttpResponse::: http client facade send
jdk.internal.net.http.HttpClientFacade#sendAsync(HttpRequest, HttpResponse.BodyHandler)->CompletableFuture>::: http client facade send async
jdk.internal.net.http.HttpClientFacade#sendAsync(HttpRequest, BodyHandler, PushPromiseHandler)->CompletableFuture>::: http client facade send async
jdk.internal.net.http.HttpClientFacade#newWebSocketBuilder()->WebSocket.Builder::: http client facade new web socket builder
jdk.internal.net.http.HttpClientFacade#toString()->String::: http client facade to string
jdk.internal.net.http.HttpClientImpl.DelegatingExecutor#delegate()->Executor::: delegating executor delegate
jdk.internal.net.http.HttpClientImpl.DelegatingExecutor#execute(Runnable)->void::: delegating executor execute
jdk.internal.net.http.HttpClientImpl#create(HttpClientBuilderImpl)->HttpClientFacade::: http client impl create
jdk.internal.net.http.HttpClientImpl#facade()->HttpClientFacade::: http client impl facade
jdk.internal.net.http.HttpClientImpl#reference()->long::: http client impl reference
jdk.internal.net.http.HttpClientImpl#unreference()->long::: http client impl unreference
jdk.internal.net.http.HttpClientImpl#streamReference()->long::: http client impl stream reference
jdk.internal.net.http.HttpClientImpl#streamUnreference()->long::: http client impl stream unreference
jdk.internal.net.http.HttpClientImpl#webSocketOpen()->long::: http client impl web socket open
jdk.internal.net.http.HttpClientImpl#webSocketClose()->long::: http client impl web socket close
jdk.internal.net.http.HttpClientImpl#referenceCount()->long::: http client impl reference count
jdk.internal.net.http.HttpClientImpl.HttpClientTracker#getOutstandingOperations()->long::: http client tracker get outstanding operations
jdk.internal.net.http.HttpClientImpl.HttpClientTracker#getOutstandingHttpOperations()->long::: http client tracker get outstanding http operations
jdk.internal.net.http.HttpClientImpl.HttpClientTracker#getOutstandingHttp2Streams()->long::: http client tracker get outstanding http2 streams
jdk.internal.net.http.HttpClientImpl.HttpClientTracker#getOutstandingWebSocketOperations()->long::: http client tracker get outstanding web socket operations
jdk.internal.net.http.HttpClientImpl.HttpClientTracker#isFacadeReferenced()->boolean::: http client tracker is facade referenced
jdk.internal.net.http.HttpClientImpl.HttpClientTracker#getName()->String::: http client tracker get name
jdk.internal.net.http.HttpClientImpl#getOperationsTracker()->Tracker::: http client impl get operations tracker
jdk.internal.net.http.HttpClientImpl#isReferenced()->boolean::: http client impl is referenced
jdk.internal.net.http.HttpClientImpl#registerEvent(AsyncEvent)->void:::Wait for activity on given exchange
jdk.internal.net.http.HttpClientImpl#eventUpdated(AsyncEvent)->void:::Allows an AsyncEvent to modify its interestOps.
jdk.internal.net.http.HttpClientImpl#isSelectorThread()->boolean::: http client impl is selector thread
jdk.internal.net.http.HttpClientImpl#client2()->Http2ClientImpl::: http client impl client2
jdk.internal.net.http.HttpClientImpl#send(HttpRequest, BodyHandler)->HttpResponse::: http client impl send
jdk.internal.net.http.HttpClientImpl#sendAsync(HttpRequest, BodyHandler)->CompletableFuture>::: http client impl send async
jdk.internal.net.http.HttpClientImpl#sendAsync(HttpRequest, BodyHandler, PushPromiseHandler)->CompletableFuture>::: http client impl send async
jdk.internal.net.http.HttpClientImpl#debugInterestOps(SelectableChannel)->String::: http client impl debug interest ops
jdk.internal.net.http.HttpClientImpl#theSSLContext()->SSLContext::: http client impl the context
jdk.internal.net.http.HttpClientImpl#sslContext()->SSLContext::: http client impl ssl context
jdk.internal.net.http.HttpClientImpl#sslParameters()->SSLParameters::: http client impl ssl parameters
jdk.internal.net.http.HttpClientImpl#authenticator()->Optional::: http client impl authenticator
jdk.internal.net.http.HttpClientImpl#theExecutor()->DelegatingExecutor::: http client impl the executor
jdk.internal.net.http.HttpClientImpl#executor()->Optional::: http client impl executor
jdk.internal.net.http.HttpClientImpl#connectionPool()->ConnectionPool::: http client impl connection pool
jdk.internal.net.http.HttpClientImpl#followRedirects()->Redirect::: http client impl follow redirects
jdk.internal.net.http.HttpClientImpl#cookieHandler()->Optional::: http client impl cookie handler
jdk.internal.net.http.HttpClientImpl#connectTimeout()->Optional::: http client impl connect timeout
jdk.internal.net.http.HttpClientImpl#proxy()->Optional::: http client impl proxy
jdk.internal.net.http.HttpClientImpl#proxySelector()->ProxySelector::: http client impl proxy selector
jdk.internal.net.http.HttpClientImpl#newWebSocketBuilder()->WebSocket.Builder::: http client impl new web socket builder
jdk.internal.net.http.HttpClientImpl#version()->Version::: http client impl version
jdk.internal.net.http.HttpClientImpl#dbgString()->String::: http client impl dbg string
jdk.internal.net.http.HttpClientImpl#toString()->String::: http client impl to string
jdk.internal.net.http.HttpClientImpl#filterChain()->LinkedList::: http client impl filter chain
jdk.internal.net.http.HttpClientImpl#registerTimer(TimeoutEvent)->void::: http client impl register timer
jdk.internal.net.http.HttpClientImpl#cancelTimer(TimeoutEvent)->void::: http client impl cancel timer
jdk.internal.net.http.HttpClientImpl#getReceiveBufferSize()->int::: http client impl get receive buffer size
jdk.internal.net.http.HttpClientImpl#getSSLBufferSupplier()->BufferSupplier::: http client impl get buffer supplier
jdk.internal.net.http.HttpConnection#addTrailingOperation(CompletionStage)->void::: http connection add trailing operation
jdk.internal.net.http.HttpConnection#client()->HttpClientImpl::: http connection client
jdk.internal.net.http.HttpConnection#connectAsync(Exchange)->CompletableFuture:::Initiates the connect phase
jdk.internal.net.http.HttpConnection#finishConnect()->CompletableFuture:::Finishes the connection phase
jdk.internal.net.http.HttpConnection#connected()->boolean:::Tells whether, or not, this connection is connected to its destination.
jdk.internal.net.http.HttpConnection#isSecure()->boolean:::Tells whether, or not, this connection is secure ( over SSL )
jdk.internal.net.http.HttpConnection#isProxied()->boolean:::Tells whether, or not, this connection is proxied
jdk.internal.net.http.HttpConnection#isOpen()->boolean:::Tells whether, or not, this connection is open.
jdk.internal.net.http.HttpConnection.HttpPublisher#enqueue(List)->void::: http publisher enqueue
jdk.internal.net.http.HttpConnection.HttpPublisher#enqueueUnordered(List)->void::: http publisher enqueue unordered
jdk.internal.net.http.HttpConnection.HttpPublisher#signalEnqueued()->void::: http publisher signal enqueued
jdk.internal.net.http.HttpConnection#publisher()->HttpPublisher:::Returns the HTTP publisher associated with this connection
jdk.internal.net.http.HttpConnection#getConnection(InetSocketAddress, HttpClientImpl, HttpRequestImpl, Version)->HttpConnection:::Factory for retrieving HttpConnections
jdk.internal.net.http.HttpConnection#headerFilter(HttpRequestImpl)->BiPredicate:::This method is used to build a filter that will accept or veto (header-name, value) tuple for transmission on the wire
jdk.internal.net.http.HttpConnection#closeOrReturnToCache(HttpHeaders)->void::: http connection close or return to cache
jdk.internal.net.http.HttpConnection#isTunnel()->boolean::: http connection is tunnel
jdk.internal.net.http.HttpConnection#channel()->SocketChannel::: http connection channel
jdk.internal.net.http.HttpConnection#address()->InetSocketAddress::: http connection address
jdk.internal.net.http.HttpConnection#cacheKey()->ConnectionPool.CacheKey::: http connection cache key
jdk.internal.net.http.HttpConnection#close()->void:::Closes this connection, by returning the socket to its connection pool.
jdk.internal.net.http.HttpConnection#getConnectionFlow()->FlowTube::: http connection get connection flow
jdk.internal.net.http.HttpConnection.PlainHttpPublisher#subscribe(Flow.Subscriber>)->void::: plain http publisher subscribe
jdk.internal.net.http.HttpConnection.PlainHttpPublisher#flushTask(DeferredCompleter)->void::: plain http publisher flush task
jdk.internal.net.http.HttpConnection.PlainHttpPublisher#signal()->void::: plain http publisher signal
jdk.internal.net.http.HttpConnection.PlainHttpPublisher.HttpWriteSubscription#request(long)->void::: http write subscription request
jdk.internal.net.http.HttpConnection.PlainHttpPublisher.HttpWriteSubscription#cancel()->void::: http write subscription cancel
jdk.internal.net.http.HttpConnection.PlainHttpPublisher.HttpWriteSubscription#flush()->void::: http write subscription flush
jdk.internal.net.http.HttpConnection.PlainHttpPublisher#enqueue(List)->void::: plain http publisher enqueue
jdk.internal.net.http.HttpConnection.PlainHttpPublisher#enqueueUnordered(List)->void::: plain http publisher enqueue unordered
jdk.internal.net.http.HttpConnection.PlainHttpPublisher#signalEnqueued()->void::: plain http publisher signal enqueued
jdk.internal.net.http.HttpConnection#dbgString()->String::: http connection dbg string
jdk.internal.net.http.HttpConnection#toString()->String::: http connection to string
jdk.internal.net.http.HttpRequestBuilderImpl#uri(URI)->HttpRequestBuilderImpl::: http request builder impl uri
jdk.internal.net.http.HttpRequestBuilderImpl#checkURI(URI)->void::: http request builder impl check i
jdk.internal.net.http.HttpRequestBuilderImpl#copy()->HttpRequestBuilderImpl::: http request builder impl copy
jdk.internal.net.http.HttpRequestBuilderImpl#setHeader(String, String)->HttpRequestBuilderImpl::: http request builder impl set header
jdk.internal.net.http.HttpRequestBuilderImpl#header(String, String)->HttpRequestBuilderImpl::: http request builder impl header
jdk.internal.net.http.HttpRequestBuilderImpl#headers(String...)->HttpRequestBuilderImpl::: http request builder impl headers
jdk.internal.net.http.HttpRequestBuilderImpl#expectContinue(boolean)->HttpRequestBuilderImpl::: http request builder impl expect continue
jdk.internal.net.http.HttpRequestBuilderImpl#version(HttpClient.Version)->HttpRequestBuilderImpl::: http request builder impl version
jdk.internal.net.http.HttpRequestBuilderImpl#headersBuilder()->HttpHeadersBuilder::: http request builder impl headers builder
jdk.internal.net.http.HttpRequestBuilderImpl#uri()->URI::: http request builder impl uri
jdk.internal.net.http.HttpRequestBuilderImpl#method()->String::: http request builder impl method
jdk.internal.net.http.HttpRequestBuilderImpl#expectContinue()->boolean::: http request builder impl expect continue
jdk.internal.net.http.HttpRequestBuilderImpl#bodyPublisher()->BodyPublisher::: http request builder impl body publisher
jdk.internal.net.http.HttpRequestBuilderImpl#version()->Optional::: http request builder impl version
jdk.internal.net.http.HttpRequestBuilderImpl#GET()->HttpRequest.Builder::: http request builder impl  t
jdk.internal.net.http.HttpRequestBuilderImpl#POST(BodyPublisher)->HttpRequest.Builder::: http request builder impl  t
jdk.internal.net.http.HttpRequestBuilderImpl#DELETE()->HttpRequest.Builder::: http request builder impl  e
jdk.internal.net.http.HttpRequestBuilderImpl#PUT(BodyPublisher)->HttpRequest.Builder::: http request builder impl  t
jdk.internal.net.http.HttpRequestBuilderImpl#method(String, BodyPublisher)->HttpRequest.Builder::: http request builder impl method
jdk.internal.net.http.HttpRequestBuilderImpl#build()->HttpRequest::: http request builder impl build
jdk.internal.net.http.HttpRequestBuilderImpl#buildForWebSocket()->HttpRequestImpl::: http request builder impl build for web socket
jdk.internal.net.http.HttpRequestBuilderImpl#timeout(Duration)->HttpRequest.Builder::: http request builder impl timeout
jdk.internal.net.http.HttpRequestBuilderImpl#timeout()->Duration::: http request builder impl timeout
jdk.internal.net.http.HttpRequestImpl#newInstanceForRedirection(URI, String, HttpRequestImpl)->HttpRequestImpl:::Returns a new instance suitable for redirection.
jdk.internal.net.http.HttpRequestImpl#newInstanceForAuthentication(HttpRequestImpl)->HttpRequestImpl:::Returns a new instance suitable for authentication.
jdk.internal.net.http.HttpRequestImpl#isConnect()->boolean::: http request impl is connect
jdk.internal.net.http.HttpRequestImpl#createPushRequest(HttpRequestImpl, HttpHeaders)->HttpRequestImpl:::Creates a HttpRequestImpl from the given set of Headers and the associated "parent" request
jdk.internal.net.http.HttpRequestImpl#toString()->String::: http request impl to string
jdk.internal.net.http.HttpRequestImpl#headers()->HttpHeaders::: http request impl headers
jdk.internal.net.http.HttpRequestImpl#authority()->InetSocketAddress::: http request impl authority
jdk.internal.net.http.HttpRequestImpl#setH2Upgrade(Http2ClientImpl)->void::: http request impl set h2 upgrade
jdk.internal.net.http.HttpRequestImpl#expectContinue()->boolean::: http request impl expect continue
jdk.internal.net.http.HttpRequestImpl#proxy()->InetSocketAddress::: http request impl proxy
jdk.internal.net.http.HttpRequestImpl#secure()->boolean::: http request impl secure
jdk.internal.net.http.HttpRequestImpl#setProxy(Proxy)->void::: http request impl set proxy
jdk.internal.net.http.HttpRequestImpl#isWebSocket(boolean)->void::: http request impl is web socket
jdk.internal.net.http.HttpRequestImpl#isWebSocket()->boolean::: http request impl is web socket
jdk.internal.net.http.HttpRequestImpl#bodyPublisher()->Optional::: http request impl body publisher
jdk.internal.net.http.HttpRequestImpl#method()->String:::Returns the request method for this request
jdk.internal.net.http.HttpRequestImpl#uri()->URI::: http request impl uri
jdk.internal.net.http.HttpRequestImpl#timeout()->Optional::: http request impl timeout
jdk.internal.net.http.HttpRequestImpl#getUserHeaders()->HttpHeaders::: http request impl get user headers
jdk.internal.net.http.HttpRequestImpl#getSystemHeadersBuilder()->HttpHeadersBuilder::: http request impl get system headers builder
jdk.internal.net.http.HttpRequestImpl#version()->Optional::: http request impl version
jdk.internal.net.http.HttpRequestImpl#addSystemHeader(String, String)->void::: http request impl add system header
jdk.internal.net.http.HttpRequestImpl#setSystemHeader(String, String)->void::: http request impl set system header
jdk.internal.net.http.HttpRequestImpl#getAddress()->InetSocketAddress::: http request impl get address
jdk.internal.net.http.HttpResponseImpl#statusCode()->int::: http response impl status code
jdk.internal.net.http.HttpResponseImpl#request()->HttpRequest::: http response impl request
jdk.internal.net.http.HttpResponseImpl#previousResponse()->Optional>::: http response impl previous response
jdk.internal.net.http.HttpResponseImpl#headers()->HttpHeaders::: http response impl headers
jdk.internal.net.http.HttpResponseImpl#body()->T::: http response impl body
jdk.internal.net.http.HttpResponseImpl#sslSession()->Optional::: http response impl ssl session
jdk.internal.net.http.HttpResponseImpl#uri()->URI::: http response impl uri
jdk.internal.net.http.HttpResponseImpl#version()->HttpClient.Version::: http response impl version
jdk.internal.net.http.HttpResponseImpl#rawChannel()->RawChannel:::Returns a RawChannel that may be used for WebSocket protocol.
jdk.internal.net.http.HttpResponseImpl#toString()->String::: http response impl to string
jdk.internal.net.http.ImmutableHttpRequest#method()->String::: immutable http request method
jdk.internal.net.http.ImmutableHttpRequest#uri()->URI::: immutable http request uri
jdk.internal.net.http.ImmutableHttpRequest#headers()->HttpHeaders::: immutable http request headers
jdk.internal.net.http.ImmutableHttpRequest#bodyPublisher()->Optional::: immutable http request body publisher
jdk.internal.net.http.ImmutableHttpRequest#expectContinue()->boolean::: immutable http request expect continue
jdk.internal.net.http.ImmutableHttpRequest#timeout()->Optional::: immutable http request timeout
jdk.internal.net.http.ImmutableHttpRequest#version()->Optional::: immutable http request version
jdk.internal.net.http.ImmutableHttpRequest#toString()->String::: immutable http request to string
jdk.internal.net.http.LineSubscriberAdapter#onSubscribe(Subscription)->void::: line subscriber adapter on subscribe
jdk.internal.net.http.LineSubscriberAdapter#onNext(List)->void::: line subscriber adapter on next
jdk.internal.net.http.LineSubscriberAdapter#onError(Throwable)->void::: line subscriber adapter on error
jdk.internal.net.http.LineSubscriberAdapter#onComplete()->void::: line subscriber adapter on complete
jdk.internal.net.http.LineSubscriberAdapter#getBody()->CompletionStage::: line subscriber adapter get body
jdk.internal.net.http.LineSubscriberAdapter#create(S, Function, Charset, String)->LineSubscriberAdapter::: line subscriber adapter create
jdk.internal.net.http.LineSubscriberAdapter.LineSubscription#request(long)->void::: line subscription request
jdk.internal.net.http.LineSubscriberAdapter.LineSubscription#cancel()->void::: line subscription cancel
jdk.internal.net.http.LineSubscriberAdapter.LineSubscription#submit(List)->void::: line subscription submit
jdk.internal.net.http.LineSubscriberAdapter.LineSubscription#signalComplete()->void::: line subscription signal complete
jdk.internal.net.http.LineSubscriberAdapter.LineSubscription#signalError(Throwable)->void::: line subscription signal error
jdk.internal.net.http.LineSubscriberAdapter.LineSubscription#create(Flow.Subscription, Charset, String, Flow.Subscriber, CompletableFuture)->LineSubscription::: line subscription create
jdk.internal.net.http.MultiExchange#getExchange()->Exchange::: multi exchange get exchange
jdk.internal.net.http.MultiExchange#client()->HttpClientImpl::: multi exchange client
jdk.internal.net.http.MultiExchange#version()->HttpClient.Version::: multi exchange version
jdk.internal.net.http.MultiExchange#cancel(IOException)->void::: multi exchange cancel
jdk.internal.net.http.MultiExchange#responseAsync(Executor)->CompletableFuture>::: multi exchange response async
jdk.internal.net.http.MultiExchange.NullSubscription#request(long)->void::: null subscription request
jdk.internal.net.http.MultiExchange.NullSubscription#cancel()->void::: null subscription cancel
jdk.internal.net.http.PlainHttpConnection.ConnectTimerEvent#handle()->void::: connect timer event handle
jdk.internal.net.http.PlainHttpConnection.ConnectTimerEvent#toString()->String::: connect timer event to string
jdk.internal.net.http.PlainHttpConnection.ConnectEvent#channel()->SelectableChannel::: connect event channel
jdk.internal.net.http.PlainHttpConnection.ConnectEvent#interestOps()->int::: connect event interest ops
jdk.internal.net.http.PlainHttpConnection.ConnectEvent#handle()->void::: connect event handle
jdk.internal.net.http.PlainHttpConnection.ConnectEvent#abort(IOException)->void::: connect event abort
jdk.internal.net.http.PlainHttpConnection#connectAsync(Exchange)->CompletableFuture::: plain http connection connect async
jdk.internal.net.http.PlainHttpConnection#finishConnect()->CompletableFuture::: plain http connection finish connect
jdk.internal.net.http.PlainHttpConnection#channel()->SocketChannel::: plain http connection channel
jdk.internal.net.http.PlainHttpConnection#getConnectionFlow()->FlowTube::: plain http connection get connection flow
jdk.internal.net.http.PlainHttpConnection#publisher()->HttpPublisher::: plain http connection publisher
jdk.internal.net.http.PlainHttpConnection#toString()->String::: plain http connection to string
jdk.internal.net.http.PlainHttpConnection#close()->void:::Closes this connection
jdk.internal.net.http.PlainHttpConnection#cacheKey()->ConnectionPool.CacheKey::: plain http connection cache key
jdk.internal.net.http.PlainHttpConnection#connected()->boolean::: plain http connection connected
jdk.internal.net.http.PlainHttpConnection#isSecure()->boolean::: plain http connection is secure
jdk.internal.net.http.PlainHttpConnection#isProxied()->boolean::: plain http connection is proxied
jdk.internal.net.http.PlainProxyConnection#cacheKey()->ConnectionPool.CacheKey::: plain proxy connection cache key
jdk.internal.net.http.PlainProxyConnection#isProxied()->boolean::: plain proxy connection is proxied
jdk.internal.net.http.PlainTunnelingConnection#connectAsync(Exchange)->CompletableFuture::: plain tunneling connection connect async
jdk.internal.net.http.PlainTunnelingConnection#finishConnect()->CompletableFuture::: plain tunneling connection finish connect
jdk.internal.net.http.PlainTunnelingConnection#isTunnel()->boolean::: plain tunneling connection is tunnel
jdk.internal.net.http.PlainTunnelingConnection#publisher()->HttpPublisher::: plain tunneling connection publisher
jdk.internal.net.http.PlainTunnelingConnection#connected()->boolean::: plain tunneling connection connected
jdk.internal.net.http.PlainTunnelingConnection#channel()->SocketChannel::: plain tunneling connection channel
jdk.internal.net.http.PlainTunnelingConnection#getConnectionFlow()->FlowTube::: plain tunneling connection get connection flow
jdk.internal.net.http.PlainTunnelingConnection#cacheKey()->ConnectionPool.CacheKey::: plain tunneling connection cache key
jdk.internal.net.http.PlainTunnelingConnection#close()->void::: plain tunneling connection close
jdk.internal.net.http.PlainTunnelingConnection#isSecure()->boolean::: plain tunneling connection is secure
jdk.internal.net.http.PlainTunnelingConnection#isProxied()->boolean::: plain tunneling connection is proxied
jdk.internal.net.http.PrivilegedExecutor#execute(Runnable)->void::: privileged executor execute
jdk.internal.net.http.PullPublisher#subscribe(Flow.Subscriber)->void::: pull publisher subscribe
jdk.internal.net.http.PushGroup.Acceptor#bodyHandler()->BodyHandler::: acceptor body handler
jdk.internal.net.http.PushGroup.Acceptor#cf()->CompletableFuture>::: acceptor cf
jdk.internal.net.http.PushGroup.Acceptor#accepted()->boolean::: acceptor accepted
jdk.internal.net.http.PushGroup#acceptPushRequest(HttpRequest)->Acceptor::: push group accept push request
jdk.internal.net.http.PushGroup#noMorePushes(boolean)->void::: push group no more pushes
jdk.internal.net.http.PushGroup#pushesCF()->CompletableFuture::: push group pushes f
jdk.internal.net.http.PushGroup#noMorePushes()->boolean::: push group no more pushes
jdk.internal.net.http.PushGroup#pushCompleted()->void::: push group push completed
jdk.internal.net.http.PushGroup#checkIfCompleted()->void::: push group check if completed
jdk.internal.net.http.PushGroup#pushError(Throwable)->void::: push group push error
jdk.internal.net.http.RawChannelTube.CleanupChecker#run()->void::: cleanup checker run
jdk.internal.net.http.RawChannelTube.WriteSubscription#request(long)->void::: write subscription request
jdk.internal.net.http.RawChannelTube.WriteSubscription#cancel()->void::: write subscription cancel
jdk.internal.net.http.RawChannelTube.WritePublisher#subscribe(Flow.Subscriber>)->void::: write publisher subscribe
jdk.internal.net.http.RawChannelTube.ReadSubscriber#checkEvents()->void::: read subscriber check events
jdk.internal.net.http.RawChannelTube.ReadSubscriber#onSubscribe(Flow.Subscription)->void::: read subscriber on subscribe
jdk.internal.net.http.RawChannelTube.ReadSubscriber#onNext(List)->void::: read subscriber on next
jdk.internal.net.http.RawChannelTube.ReadSubscriber#onError(Throwable)->void::: read subscriber on error
jdk.internal.net.http.RawChannelTube.ReadSubscriber#onComplete()->void::: read subscriber on complete
jdk.internal.net.http.RawChannelTube#registerEvent(RawEvent)->void::: raw channel tube register event
jdk.internal.net.http.RawChannelTube#initialByteBuffer()->ByteBuffer:::Hands over the initial bytes
jdk.internal.net.http.RawChannelTube#read()->ByteBuffer::: raw channel tube read
jdk.internal.net.http.RawChannelTube#write(ByteBuffer[], int, int)->long::: raw channel tube write
jdk.internal.net.http.RawChannelTube#shutdownInput()->void:::Shutdown the connection for reading without closing the channel
jdk.internal.net.http.RawChannelTube#shutdownOutput()->void:::Shutdown the connection for writing without closing the channel
jdk.internal.net.http.RawChannelTube#close()->void:::Closes this channel.
jdk.internal.net.http.RedirectFilter#request(HttpRequestImpl, MultiExchange)->void::: redirect filter request
jdk.internal.net.http.RedirectFilter#response(Response)->HttpRequestImpl::: redirect filter response
jdk.internal.net.http.RequestPublishers.ByteArrayPublisher#copy(byte[], int, int)->List::: byte array publisher copy
jdk.internal.net.http.RequestPublishers.ByteArrayPublisher#subscribe(Flow.Subscriber)->void::: byte array publisher subscribe
jdk.internal.net.http.RequestPublishers.ByteArrayPublisher#contentLength()->long::: byte array publisher content length
jdk.internal.net.http.RequestPublishers.IterablePublisher.ByteBufferIterator#hasNext()->boolean::: byte buffer iterator has next
jdk.internal.net.http.RequestPublishers.IterablePublisher.ByteBufferIterator#next()->ByteBuffer::: byte buffer iterator next
jdk.internal.net.http.RequestPublishers.IterablePublisher.ByteBufferIterator#getBuffer()->ByteBuffer::: byte buffer iterator get buffer
jdk.internal.net.http.RequestPublishers.IterablePublisher.ByteBufferIterator#copy()->void::: byte buffer iterator copy
jdk.internal.net.http.RequestPublishers.IterablePublisher#iterator()->Iterator::: iterable publisher iterator
jdk.internal.net.http.RequestPublishers.IterablePublisher#subscribe(Flow.Subscriber)->void::: iterable publisher subscribe
jdk.internal.net.http.RequestPublishers.IterablePublisher#computeLength(Iterable)->long::: iterable publisher compute length
jdk.internal.net.http.RequestPublishers.IterablePublisher#contentLength()->long::: iterable publisher content length
jdk.internal.net.http.RequestPublishers.EmptyPublisher#contentLength()->long::: empty publisher content length
jdk.internal.net.http.RequestPublishers.EmptyPublisher#subscribe(Flow.Subscriber)->void::: empty publisher subscribe
jdk.internal.net.http.RequestPublishers.FilePublisher#create(Path)->FilePublisher:::Factory for creating FilePublisher
jdk.internal.net.http.RequestPublishers.FilePublisher#subscribe(Flow.Subscriber)->void::: file publisher subscribe
jdk.internal.net.http.RequestPublishers.FilePublisher#contentLength()->long::: file publisher content length
jdk.internal.net.http.RequestPublishers.StreamIterator#hasNext()->boolean::: stream iterator has next
jdk.internal.net.http.RequestPublishers.StreamIterator#next()->ByteBuffer::: stream iterator next
jdk.internal.net.http.RequestPublishers.InputStreamPublisher#subscribe(Flow.Subscriber)->void::: input stream publisher subscribe
jdk.internal.net.http.RequestPublishers.InputStreamPublisher#iterableOf(InputStream)->Iterable::: input stream publisher iterable of
jdk.internal.net.http.RequestPublishers.InputStreamPublisher#contentLength()->long::: input stream publisher content length
jdk.internal.net.http.RequestPublishers.PublisherAdapter#contentLength()->long::: publisher adapter content length
jdk.internal.net.http.RequestPublishers.PublisherAdapter#subscribe(Flow.Subscriber)->void::: publisher adapter subscribe
jdk.internal.net.http.Response#request()->HttpRequestImpl::: response request
jdk.internal.net.http.Response#version()->HttpClient.Version::: response version
jdk.internal.net.http.Response#headers()->HttpHeaders::: response headers
jdk.internal.net.http.Response#statusCode()->int::: response status code
jdk.internal.net.http.Response#getSSLSession()->SSLSession::: response get session
jdk.internal.net.http.Response#toString()->String::: response to string
jdk.internal.net.http.ResponseBodyHandlers.PathBodyHandler#create(Path, List)->PathBodyHandler:::Factory for creating PathBodyHandler
jdk.internal.net.http.ResponseBodyHandlers.PathBodyHandler#apply(ResponseInfo)->BodySubscriber::: path body handler apply
jdk.internal.net.http.ResponseBodyHandlers.PushPromisesHandlerWithMap#applyPushPromise(HttpRequest, HttpRequest, Function, CompletableFuture>>)->void::: push promises handler with map apply push promise
jdk.internal.net.http.ResponseBodyHandlers.FileDownloadBodyHandler#create(Path, List)->FileDownloadBodyHandler:::Factory for creating FileDownloadBodyHandler
jdk.internal.net.http.ResponseBodyHandlers.FileDownloadBodyHandler#unchecked(ResponseInfo, String)->UncheckedIOException::: file download body handler unchecked
jdk.internal.net.http.ResponseBodyHandlers.FileDownloadBodyHandler#apply(ResponseInfo)->BodySubscriber::: file download body handler apply
jdk.internal.net.http.ResponseContent#contentChunked()->boolean::: response content content chunked
jdk.internal.net.http.ResponseContent.BodyParser#onSubscribe(AbstractSubscription)->void::: body parser on subscribe
jdk.internal.net.http.ResponseContent.BodyParser#currentStateMessage()->String::: body parser current state message
jdk.internal.net.http.ResponseContent#getBodyParser(Consumer)->BodyParser::: response content get body parser
jdk.internal.net.http.ResponseContent.ChunkedBodyParser#dbgString()->String::: chunked body parser dbg string
jdk.internal.net.http.ResponseContent.ChunkedBodyParser#onSubscribe(AbstractSubscription)->void::: chunked body parser on subscribe
jdk.internal.net.http.ResponseContent.ChunkedBodyParser#currentStateMessage()->String::: chunked body parser current state message
jdk.internal.net.http.ResponseContent.ChunkedBodyParser#accept(ByteBuffer)->void::: chunked body parser accept
jdk.internal.net.http.ResponseContent.ChunkedBodyParser#tryReadOneHunk(ByteBuffer)->ByteBuffer:::Returns a ByteBuffer containing chunk of data or a "hunk" of data (a chunk of a chunk if the chunk size is larger than our ByteBuffers)
jdk.internal.net.http.ResponseContent.UnknownLengthBodyParser#dbgString()->String::: unknown length body parser dbg string
jdk.internal.net.http.ResponseContent.UnknownLengthBodyParser#onSubscribe(AbstractSubscription)->void::: unknown length body parser on subscribe
jdk.internal.net.http.ResponseContent.UnknownLengthBodyParser#currentStateMessage()->String::: unknown length body parser current state message
jdk.internal.net.http.ResponseContent.UnknownLengthBodyParser#accept(ByteBuffer)->void::: unknown length body parser accept
jdk.internal.net.http.ResponseContent.UnknownLengthBodyParser#complete()->void:::Must be called externally when connection has closed and therefore no more bytes can be read
jdk.internal.net.http.ResponseContent.FixedLengthBodyParser#dbgString()->String::: fixed length body parser dbg string
jdk.internal.net.http.ResponseContent.FixedLengthBodyParser#onSubscribe(AbstractSubscription)->void::: fixed length body parser on subscribe
jdk.internal.net.http.ResponseContent.FixedLengthBodyParser#currentStateMessage()->String::: fixed length body parser current state message
jdk.internal.net.http.ResponseContent.FixedLengthBodyParser#accept(ByteBuffer)->void::: fixed length body parser accept
jdk.internal.net.http.ResponseInfoImpl#statusCode()->int:::Provides the response status code
jdk.internal.net.http.ResponseInfoImpl#headers()->HttpHeaders:::Provides the response headers
jdk.internal.net.http.ResponseInfoImpl#version()->HttpClient.Version:::provides the response protocol version
jdk.internal.net.http.ResponseSubscribers.ConsumerSubscriber#getBody()->CompletionStage::: consumer subscriber get body
jdk.internal.net.http.ResponseSubscribers.ConsumerSubscriber#onSubscribe(Flow.Subscription)->void::: consumer subscriber on subscribe
jdk.internal.net.http.ResponseSubscribers.ConsumerSubscriber#onNext(List)->void::: consumer subscriber on next
jdk.internal.net.http.ResponseSubscribers.ConsumerSubscriber#onError(Throwable)->void::: consumer subscriber on error
jdk.internal.net.http.ResponseSubscribers.ConsumerSubscriber#onComplete()->void::: consumer subscriber on complete
jdk.internal.net.http.ResponseSubscribers.PathSubscriber#create(Path, List)->PathSubscriber:::Factory for creating PathSubscriber
jdk.internal.net.http.ResponseSubscribers.PathSubscriber#onSubscribe(Flow.Subscription)->void::: path subscriber on subscribe
jdk.internal.net.http.ResponseSubscribers.PathSubscriber#onNext(List)->void::: path subscriber on next
jdk.internal.net.http.ResponseSubscribers.PathSubscriber#onError(Throwable)->void::: path subscriber on error
jdk.internal.net.http.ResponseSubscribers.PathSubscriber#onComplete()->void::: path subscriber on complete
jdk.internal.net.http.ResponseSubscribers.PathSubscriber#getBody()->CompletionStage::: path subscriber get body
jdk.internal.net.http.ResponseSubscribers.ByteArraySubscriber#onSubscribe(Flow.Subscription)->void::: byte array subscriber on subscribe
jdk.internal.net.http.ResponseSubscribers.ByteArraySubscriber#onNext(List)->void::: byte array subscriber on next
jdk.internal.net.http.ResponseSubscribers.ByteArraySubscriber#onError(Throwable)->void::: byte array subscriber on error
jdk.internal.net.http.ResponseSubscribers.ByteArraySubscriber#onComplete()->void::: byte array subscriber on complete
jdk.internal.net.http.ResponseSubscribers.ByteArraySubscriber#getBody()->CompletionStage::: byte array subscriber get body
jdk.internal.net.http.ResponseSubscribers.HttpResponseInputStream#getBody()->CompletionStage::: http response input stream get body
jdk.internal.net.http.ResponseSubscribers.HttpResponseInputStream#read(byte[], int, int)->int::: http response input stream read
jdk.internal.net.http.ResponseSubscribers.HttpResponseInputStream#read()->int::: http response input stream read
jdk.internal.net.http.ResponseSubscribers.HttpResponseInputStream#onSubscribe(Flow.Subscription)->void::: http response input stream on subscribe
jdk.internal.net.http.ResponseSubscribers.HttpResponseInputStream#onNext(List)->void::: http response input stream on next
jdk.internal.net.http.ResponseSubscribers.HttpResponseInputStream#onError(Throwable)->void::: http response input stream on error
jdk.internal.net.http.ResponseSubscribers.HttpResponseInputStream#onComplete()->void::: http response input stream on complete
jdk.internal.net.http.ResponseSubscribers.HttpResponseInputStream#close()->void::: http response input stream close
jdk.internal.net.http.ResponseSubscribers#createLineStream()->BodySubscriber>::: response subscribers create line stream
jdk.internal.net.http.ResponseSubscribers#createLineStream(Charset)->BodySubscriber>::: response subscribers create line stream
jdk.internal.net.http.ResponseSubscribers.NullSubscriber#onSubscribe(Flow.Subscription)->void::: null subscriber on subscribe
jdk.internal.net.http.ResponseSubscribers.NullSubscriber#onNext(List)->void::: null subscriber on next
jdk.internal.net.http.ResponseSubscribers.NullSubscriber#onError(Throwable)->void::: null subscriber on error
jdk.internal.net.http.ResponseSubscribers.NullSubscriber#onComplete()->void::: null subscriber on complete
jdk.internal.net.http.ResponseSubscribers.NullSubscriber#getBody()->CompletionStage::: null subscriber get body
jdk.internal.net.http.ResponseSubscribers.SubscriberAdapter#onSubscribe(Subscription)->void::: subscriber adapter on subscribe
jdk.internal.net.http.ResponseSubscribers.SubscriberAdapter#onNext(List)->void::: subscriber adapter on next
jdk.internal.net.http.ResponseSubscribers.SubscriberAdapter#onError(Throwable)->void::: subscriber adapter on error
jdk.internal.net.http.ResponseSubscribers.SubscriberAdapter#onComplete()->void::: subscriber adapter on complete
jdk.internal.net.http.ResponseSubscribers.SubscriberAdapter#getBody()->CompletionStage::: subscriber adapter get body
jdk.internal.net.http.ResponseSubscribers.MappingSubscriber#getBody()->CompletionStage::: mapping subscriber get body
jdk.internal.net.http.ResponseSubscribers.MappingSubscriber#onSubscribe(Flow.Subscription)->void::: mapping subscriber on subscribe
jdk.internal.net.http.ResponseSubscribers.MappingSubscriber#onNext(List)->void::: mapping subscriber on next
jdk.internal.net.http.ResponseSubscribers.MappingSubscriber#onError(Throwable)->void::: mapping subscriber on error
jdk.internal.net.http.ResponseSubscribers.MappingSubscriber#onComplete()->void::: mapping subscriber on complete
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber.SubscriberRef#get()->Flow.Subscriber>::: subscriber ref get
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber.SubscriberRef#clear()->Flow.Subscriber>::: subscriber ref clear
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber.SubscriptionRef#request(long)->void::: subscription ref request
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber.SubscriptionRef#cancel()->void::: subscription ref cancel
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber.SubscriptionRef#subscribe()->void::: subscription ref subscribe
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber.SubscriptionRef#toString()->String::: subscription ref to string
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber#onSubscribe(Flow.Subscription)->void::: publishing body subscriber on subscribe
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber#onNext(List)->void::: publishing body subscriber on next
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber#onError(Throwable)->void::: publishing body subscriber on error
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber#onComplete()->void::: publishing body subscriber on complete
jdk.internal.net.http.ResponseSubscribers.PublishingBodySubscriber#getBody()->CompletionStage>>::: publishing body subscriber get body
jdk.internal.net.http.ResponseSubscribers#createPublisher()->BodySubscriber>>::: response subscribers create publisher
jdk.internal.net.http.ResponseTimerEvent#of(MultiExchange)->ResponseTimerEvent::: response timer event of
jdk.internal.net.http.ResponseTimerEvent#handle()->void::: response timer event handle
jdk.internal.net.http.ResponseTimerEvent#toString()->String::: response timer event to string
jdk.internal.net.http.SocketTube#isFinished()->boolean:::Returns true if this flow is finished
jdk.internal.net.http.SocketTube#subscribe(Flow.Subscriber>)->void::: socket tube subscribe
jdk.internal.net.http.SocketTube#onSubscribe(Flow.Subscription)->void::: socket tube on subscribe
jdk.internal.net.http.SocketTube#onNext(List)->void::: socket tube on next
jdk.internal.net.http.SocketTube#onError(Throwable)->void::: socket tube on error
jdk.internal.net.http.SocketTube#onComplete()->void::: socket tube on complete
jdk.internal.net.http.SocketTube#signalClosed()->void::: socket tube signal closed
jdk.internal.net.http.SocketTube#debugState(String)->void::: socket tube debug state
jdk.internal.net.http.SocketTube.BufferSource#getBuffer()->ByteBuffer:::Returns a buffer to read data from the socket.
jdk.internal.net.http.SocketTube.BufferSource#append(List, ByteBuffer, int)->List:::Appends the read-data in buffer to the list of buffer to be sent downstream to the subscriber
jdk.internal.net.http.SocketTube.BufferSource#returnUnused(ByteBuffer)->void:::Returns the given unused buffer, previously obtained from getBuffer.
jdk.internal.net.http.SocketTube#connectFlows(TubePublisher, TubeSubscriber)->void::: socket tube connect flows
jdk.internal.net.http.SocketTube#toString()->String::: socket tube to string
jdk.internal.net.http.SocketTube#dbgString()->String::: socket tube dbg string
jdk.internal.net.http.SocketTube#channelDescr()->String::: socket tube channel descr
jdk.internal.net.http.Stream#connection()->HttpConnection::: stream connection
jdk.internal.net.http.Stream#deRegister()->boolean::: stream de register
jdk.internal.net.http.Stream#readBodyAsync(HttpResponse.BodyHandler, boolean, Executor)->CompletableFuture::: stream read body async
jdk.internal.net.http.Stream#toString()->String::: stream to string
jdk.internal.net.http.Stream#receiveData(BodySubscriber, Executor)->CompletableFuture::: stream receive data
jdk.internal.net.http.Stream#sendBodyAsync()->CompletableFuture>::: stream send body async
jdk.internal.net.http.Stream#incoming(Http2Frame)->void:::Entry point from Http2Connection reader thread
jdk.internal.net.http.Stream#otherFrame(Http2Frame)->void::: stream other frame
jdk.internal.net.http.Stream#rspHeadersConsumer()->DecodingCallback::: stream rsp headers consumer
jdk.internal.net.http.Stream#handleResponse()->void::: stream handle response
jdk.internal.net.http.Stream#incoming_reset(ResetFrame)->void::: stream incoming_reset
jdk.internal.net.http.Stream#handleReset(ResetFrame, Flow.Subscriber)->void::: stream handle reset
jdk.internal.net.http.Stream#incoming_priority(PriorityFrame)->void::: stream incoming_priority
jdk.internal.net.http.Stream#incoming_pushPromise(HttpRequestImpl, PushedStream)->void::: stream incoming_push promise
jdk.internal.net.http.Stream#getRequestPseudoHeaders()->HttpHeaders::: stream get request pseudo headers
jdk.internal.net.http.Stream#setEndStreamReceived()->void:::Sets endStreamReceived
jdk.internal.net.http.Stream#sendHeadersAsync()->CompletableFuture>::: stream send headers async
jdk.internal.net.http.Stream#released()->void::: stream released
jdk.internal.net.http.Stream#completed()->void::: stream completed
jdk.internal.net.http.Stream#registerStream(int)->void::: stream register stream
jdk.internal.net.http.Stream#signalWindowUpdate()->void::: stream signal window update
jdk.internal.net.http.Stream.RequestSubscriber#onSubscribe(Flow.Subscription)->void::: request subscriber on subscribe
jdk.internal.net.http.Stream.RequestSubscriber#onNext(ByteBuffer)->void::: request subscriber on next
jdk.internal.net.http.Stream.RequestSubscriber#onError(Throwable)->void::: request subscriber on error
jdk.internal.net.http.Stream.RequestSubscriber#onComplete()->void::: request subscriber on complete
jdk.internal.net.http.Stream.RequestSubscriber#trySend()->void::: request subscriber try send
jdk.internal.net.http.Stream#ignoreBody()->CompletableFuture:::Send a RESET frame to tell server to stop sending data on this stream
jdk.internal.net.http.Stream#getDataFrame(ByteBuffer)->DataFrame::: stream get data frame
jdk.internal.net.http.Stream#getResponseAsync(Executor)->CompletableFuture::: stream get response async
jdk.internal.net.http.Stream#completeResponse(Response)->void:::Completes the first uncompleted CF on list, and removes it
jdk.internal.net.http.Stream#requestSent()->void::: stream request sent
jdk.internal.net.http.Stream#responseReceived()->void::: stream response received
jdk.internal.net.http.Stream#completeResponseExceptionally(Throwable)->void:::same as above but for errors
jdk.internal.net.http.Stream#sendBodyImpl()->CompletableFuture::: stream send body impl
jdk.internal.net.http.Stream#cancel()->void::: stream cancel
jdk.internal.net.http.Stream#onSubscriptionError(Throwable)->void::: stream on subscription error
jdk.internal.net.http.Stream#cancel(IOException)->void::: stream cancel
jdk.internal.net.http.Stream#connectionClosing(Throwable)->void::: stream connection closing
jdk.internal.net.http.Stream#cancelImpl(Throwable)->void::: stream cancel impl
jdk.internal.net.http.Stream#close()->void::: stream close
jdk.internal.net.http.Stream.PushedStream#responseCF()->CompletableFuture>::: pushed stream response f
jdk.internal.net.http.Stream.PushedStream#setPushHandler(HttpResponse.BodyHandler)->void::: pushed stream set push handler
jdk.internal.net.http.Stream.PushedStream#getPushHandler()->HttpResponse.BodyHandler::: pushed stream get push handler
jdk.internal.net.http.Stream.PushedStream#sendBodyAsync()->CompletableFuture>::: pushed stream send body async
jdk.internal.net.http.Stream.PushedStream#sendHeadersAsync()->CompletableFuture>::: pushed stream send headers async
jdk.internal.net.http.Stream.PushedStream#getResponseAsync(Executor)->CompletableFuture::: pushed stream get response async
jdk.internal.net.http.Stream.PushedStream#readBodyAsync(HttpResponse.BodyHandler, boolean, Executor)->CompletableFuture::: pushed stream read body async
jdk.internal.net.http.Stream.PushedStream#completeResponse(Response)->void::: pushed stream complete response
jdk.internal.net.http.Stream.PushedStream#completeResponseExceptionally(Throwable)->void::: pushed stream complete response exceptionally
jdk.internal.net.http.Stream.PushedStream#handleResponse()->void::: pushed stream handle response
jdk.internal.net.http.Stream.StreamWindowUpdateSender#getStreamId()->int::: stream window update sender get stream id
jdk.internal.net.http.Stream.StreamWindowUpdateSender#dbgString()->String::: stream window update sender dbg string
jdk.internal.net.http.Stream#isCanceled()->boolean:::Returns true if this exchange was canceled.
jdk.internal.net.http.Stream#getCancelCause()->Throwable:::Returns the cause for which this exchange was canceled, if available.
jdk.internal.net.http.Stream#dbgString()->String::: stream dbg string
jdk.internal.net.http.TimeoutEvent#handle()->void::: timeout event handle
jdk.internal.net.http.TimeoutEvent#deadline()->Instant::: timeout event deadline
jdk.internal.net.http.TimeoutEvent#compareTo(TimeoutEvent)->int::: timeout event compare to
jdk.internal.net.http.TimeoutEvent#toString()->String::: timeout event to string
jdk.internal.net.http.WindowController#registerStream(int, int)->void:::Registers the given stream with this controller.
jdk.internal.net.http.WindowController#removeStream(int)->void:::Removes/De-registers the given stream with this controller.
jdk.internal.net.http.WindowController#tryAcquire(int, int, Stream)->int:::Attempts to acquire the requested amount of Send Window for the given stream
jdk.internal.net.http.WindowController#increaseConnectionWindow(int)->boolean:::Increases the Send Window size for the connection
jdk.internal.net.http.WindowController#increaseStreamWindow(int, int)->boolean:::Increases the Send Window size for the given stream
jdk.internal.net.http.WindowController#adjustActiveStreams(int)->void:::Adjusts, either increases or decreases, the active streams registered with this controller
jdk.internal.net.http.WindowController#connectionWindowSize()->int:::Returns the Send Window size for the connection.
jdk.internal.net.http.WindowController#streamWindowSize(int)->int:::Returns the Send Window size for the given stream.
jdk.internal.net.http.WindowUpdateSender#getStreamId()->int::: window update sender get stream id
jdk.internal.net.http.WindowUpdateSender#update(int)->void::: window update sender update
jdk.internal.net.http.WindowUpdateSender#sendWindowUpdate(int)->void::: window update sender send window update
jdk.internal.net.http.WindowUpdateSender#dbgString()->String::: window update sender dbg string

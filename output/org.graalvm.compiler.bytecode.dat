org.graalvm.compiler.bytecode.BridgeMethodUtils#getBridgedMethod(ResolvedJavaMethod)->ResolvedJavaMethod:::Gets the method bridged to by a ResolvedJavaMethod#isBridge() bridge method
org.graalvm.compiler.bytecode.BridgeMethodUtils#getAnnotation(Class, ResolvedJavaMethod)->T:::A helper for ResolvedJavaMethod#getAnnotation(Class) that handles the absence of annotations on bridge methods where the bridged method has annotations.
org.graalvm.compiler.bytecode.BridgeMethodUtils#getAnnotations(ResolvedJavaMethod)->Annotation[]:::A helper for ResolvedJavaMethod#getAnnotations() that handles the absence of annotations on bridge methods where the bridged method has annotations.
org.graalvm.compiler.bytecode.BridgeMethodUtils#getDeclaredAnnotations(ResolvedJavaMethod)->Annotation[]:::A helper for ResolvedJavaMethod#getDeclaredAnnotations() that handles the absence of annotations on bridge methods where the bridged method has annotations.
org.graalvm.compiler.bytecode.BridgeMethodUtils#getParameterAnnotations(ResolvedJavaMethod)->Annotation[][]:::A helper for ResolvedJavaMethod#getParameterAnnotations() that handles the absence of parameter annotations on bridge methods where the bridged method has parameter annotations.
org.graalvm.compiler.bytecode.BridgeMethodUtils#getParameterAnnotation(Class, int, ResolvedJavaMethod)->T:::A helper for ResolvedJavaMethod#getParameterAnnotation(Class, int) that handles the absence of parameter annotations on bridge methods where the bridged method has parameter annotations.
org.graalvm.compiler.bytecode.Bytecode#getMethod()->ResolvedJavaMethod:::Gets the method this object supplies bytecode for.
org.graalvm.compiler.bytecode.Bytecode#getCode()->byte[]::: bytecode get code
org.graalvm.compiler.bytecode.Bytecode#getCodeSize()->int::: bytecode get code size
org.graalvm.compiler.bytecode.Bytecode#getMaxStackSize()->int::: bytecode get max stack size
org.graalvm.compiler.bytecode.Bytecode#getMaxLocals()->int::: bytecode get max locals
org.graalvm.compiler.bytecode.Bytecode#getConstantPool()->ConstantPool::: bytecode get constant pool
org.graalvm.compiler.bytecode.Bytecode#getLineNumberTable()->LineNumberTable::: bytecode get line number table
org.graalvm.compiler.bytecode.Bytecode#getLocalVariableTable()->LocalVariableTable::: bytecode get local variable table
org.graalvm.compiler.bytecode.Bytecode#asStackTraceElement(int)->StackTraceElement::: bytecode as stack trace element
org.graalvm.compiler.bytecode.Bytecode#getProfilingInfo()->ProfilingInfo::: bytecode get profiling info
org.graalvm.compiler.bytecode.Bytecode#getExceptionHandlers()->ExceptionHandler[]::: bytecode get exception handlers
org.graalvm.compiler.bytecode.Bytecode#getOrigin()->BytecodeProvider:::Gets the BytecodeProvider from which this object was acquired.
org.graalvm.compiler.bytecode.Bytecode#toLocation(Bytecode, int)->String::: bytecode to location
org.graalvm.compiler.bytecode.Bytecode#appendLocation(StringBuilder, Bytecode, int)->StringBuilder::: bytecode append location
org.graalvm.compiler.bytecode.BytecodeDisassembler#disassembleOne(ResolvedJavaMethod, int)->String::: bytecode disassembler disassemble one
org.graalvm.compiler.bytecode.BytecodeDisassembler#disassemble(ResolvedJavaMethod)->String:::Disassembles the bytecode of a given method in a javap-like format.
org.graalvm.compiler.bytecode.BytecodeDisassembler#disassemble(ResolvedJavaMethod, int, int)->String:::Disassembles the bytecode of a given method in a javap-like format.
org.graalvm.compiler.bytecode.BytecodeDisassembler#disassemble(Bytecode)->String:::Disassembles code in a javap-like format.
org.graalvm.compiler.bytecode.BytecodeDisassembler#disassemble(Bytecode, int, int)->String:::Disassembles code in a javap-like format.
org.graalvm.compiler.bytecode.BytecodeDisassembler#getInvokedMethodAt(ResolvedJavaMethod, int)->JavaMethod::: bytecode disassembler get invoked method at
org.graalvm.compiler.bytecode.BytecodeDisassembler#getBytecodeAt(ResolvedJavaMethod, int)->int::: bytecode disassembler get bytecode at
org.graalvm.compiler.bytecode.BytecodeLookupSwitch#offsetAt(int)->int::: bytecode lookup switch offset at
org.graalvm.compiler.bytecode.BytecodeLookupSwitch#keyAt(int)->int::: bytecode lookup switch key at
org.graalvm.compiler.bytecode.BytecodeLookupSwitch#numberOfCases()->int::: bytecode lookup switch number of cases
org.graalvm.compiler.bytecode.BytecodeLookupSwitch#size()->int::: bytecode lookup switch size
org.graalvm.compiler.bytecode.BytecodeProvider#getBytecode(ResolvedJavaMethod)->Bytecode:::Gets a Bytecode object that supplies bytecode properties for method.
org.graalvm.compiler.bytecode.BytecodeProvider#supportsInvokedynamic()->boolean:::Determines if this provider supports the INVOKEDYNAMIC bytecode.
org.graalvm.compiler.bytecode.BytecodeProvider#shouldRecordMethodDependencies()->boolean:::Determines if methods parsed using this provider should be recorded so that method redefinition can invalidate the resulting code.
org.graalvm.compiler.bytecode.Bytecodes#isCommutative(int)->boolean:::Determines if an opcode is commutative.
org.graalvm.compiler.bytecode.Bytecodes#lengthOf(int)->int:::Gets the length of an instruction denoted by a given opcode.
org.graalvm.compiler.bytecode.Bytecodes#stackEffectOf(int)->int:::Gets the effect on the depth of the expression stack of an instruction denoted by a given opcode.
org.graalvm.compiler.bytecode.Bytecodes#nameOf(int)->String:::Gets the lower-case mnemonic for a given opcode.
org.graalvm.compiler.bytecode.Bytecodes#baseNameOf(int)->String:::Allocation-free version of #nameOf(int).
org.graalvm.compiler.bytecode.Bytecodes#valueOf(String)->int:::Gets the opcode corresponding to a given mnemonic.
org.graalvm.compiler.bytecode.Bytecodes#canTrap(int)->boolean:::Determines if a given opcode denotes an instruction that can cause an implicit exception.
org.graalvm.compiler.bytecode.Bytecodes#isLoad(int)->boolean:::Determines if a given opcode denotes an instruction that loads a local variable to the operand stack.
org.graalvm.compiler.bytecode.Bytecodes#isStop(int)->boolean:::Determines if a given opcode denotes an instruction that ends a basic block and does not let control flow fall through to its lexical successor.
org.graalvm.compiler.bytecode.Bytecodes#isInvoke(int)->boolean:::Determines if a given opcode denotes an instruction that stores a value to a local variable after popping it from the operand stack.
org.graalvm.compiler.bytecode.Bytecodes#isStore(int)->boolean:::Determines if a given opcode denotes an instruction that stores a value to a local variable after popping it from the operand stack.
org.graalvm.compiler.bytecode.Bytecodes#isBlockEnd(int)->boolean:::Determines if a given opcode is an instruction that delimits a basic block.
org.graalvm.compiler.bytecode.Bytecodes#isBranch(int)->boolean:::Determines if a given opcode is an instruction that has a 2 or 4 byte operand that is an offset to another instruction in the same method
org.graalvm.compiler.bytecode.Bytecodes#isConditionalBranch(int)->boolean:::Determines if a given opcode denotes a conditional branch.
org.graalvm.compiler.bytecode.Bytecodes#operator(int)->String:::Gets the arithmetic operator name for a given opcode
org.graalvm.compiler.bytecode.Bytecodes#isIfBytecode(int)->boolean::: bytecodes is if bytecode
org.graalvm.compiler.bytecode.BytecodeStream#next()->void:::Advances to the next bytecode.
org.graalvm.compiler.bytecode.BytecodeStream#nextBCI()->int:::Gets the next bytecode index (no side-effects).
org.graalvm.compiler.bytecode.BytecodeStream#currentBCI()->int:::Gets the current bytecode index.
org.graalvm.compiler.bytecode.BytecodeStream#endBCI()->int:::Gets the bytecode index of the end of the code.
org.graalvm.compiler.bytecode.BytecodeStream#currentBC()->int:::Gets the current opcode
org.graalvm.compiler.bytecode.BytecodeStream#readLocalIndex()->int:::Reads the index of a local variable for one of the load or store instructions
org.graalvm.compiler.bytecode.BytecodeStream#readIncrement()->int:::Read the delta for an Bytecodes#IINC bytecode.
org.graalvm.compiler.bytecode.BytecodeStream#readBranchDest()->int:::Read the destination of a Bytecodes#GOTO or IF instructions.
org.graalvm.compiler.bytecode.BytecodeStream#readInt(int)->int:::Read a signed 4-byte integer from the bytecode stream at the specified bytecode index.
org.graalvm.compiler.bytecode.BytecodeStream#readUByte(int)->int:::Reads an unsigned, 1-byte value from the bytecode stream at the specified bytecode index.
org.graalvm.compiler.bytecode.BytecodeStream#readCPI()->char:::Reads a constant pool index for the current instruction.
org.graalvm.compiler.bytecode.BytecodeStream#readCPI4()->int:::Reads a constant pool index for an invokedynamic instruction.
org.graalvm.compiler.bytecode.BytecodeStream#readByte()->byte:::Reads a signed, 1-byte value for the current instruction (e.g
org.graalvm.compiler.bytecode.BytecodeStream#readShort()->short:::Reads a signed, 2-byte short for the current instruction (e.g
org.graalvm.compiler.bytecode.BytecodeStream#setBCI(int)->void:::Sets the bytecode index to the specified value
org.graalvm.compiler.bytecode.BytecodeSwitch#bci()->int:::Gets the current bytecode index.
org.graalvm.compiler.bytecode.BytecodeSwitch#targetAt(int)->int:::Gets the index of the instruction denoted by the i'th switch target.
org.graalvm.compiler.bytecode.BytecodeSwitch#defaultTarget()->int:::Gets the index of the instruction for the default switch target.
org.graalvm.compiler.bytecode.BytecodeSwitch#defaultOffset()->int:::Gets the offset from the start of the switch instruction to the default switch target.
org.graalvm.compiler.bytecode.BytecodeSwitch#keyAt(int)->int:::Gets the key at i'th switch target index.
org.graalvm.compiler.bytecode.BytecodeSwitch#offsetAt(int)->int:::Gets the offset from the start of the switch instruction for the i'th switch target.
org.graalvm.compiler.bytecode.BytecodeSwitch#numberOfCases()->int:::Gets the number of switch targets.
org.graalvm.compiler.bytecode.BytecodeSwitch#size()->int:::Gets the total size in bytes of the switch instruction.
org.graalvm.compiler.bytecode.BytecodeTableSwitch#lowKey()->int:::Gets the low key of the table switch.
org.graalvm.compiler.bytecode.BytecodeTableSwitch#highKey()->int:::Gets the high key of the table switch.
org.graalvm.compiler.bytecode.BytecodeTableSwitch#keyAt(int)->int::: bytecode table switch key at
org.graalvm.compiler.bytecode.BytecodeTableSwitch#offsetAt(int)->int::: bytecode table switch offset at
org.graalvm.compiler.bytecode.BytecodeTableSwitch#numberOfCases()->int::: bytecode table switch number of cases
org.graalvm.compiler.bytecode.BytecodeTableSwitch#size()->int::: bytecode table switch size
org.graalvm.compiler.bytecode.Bytes#beS1(byte[], int)->int:::Gets a signed 1-byte value.
org.graalvm.compiler.bytecode.Bytes#beS2(byte[], int)->int:::Gets a signed 2-byte big-endian value.
org.graalvm.compiler.bytecode.Bytes#beU1(byte[], int)->int:::Gets an unsigned 1-byte value.
org.graalvm.compiler.bytecode.Bytes#beU2(byte[], int)->int:::Gets an unsigned 2-byte big-endian value.
org.graalvm.compiler.bytecode.Bytes#beS4(byte[], int)->int:::Gets a signed 4-byte big-endian value.
org.graalvm.compiler.bytecode.Bytes#beSVar(byte[], int, boolean)->int:::Gets either a signed 2-byte or a signed 4-byte big-endian value.
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getOrigin()->BytecodeProvider::: resolved java method bytecode get origin
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getMethod()->ResolvedJavaMethod::: resolved java method bytecode get method
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getCode()->byte[]::: resolved java method bytecode get code
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getCodeSize()->int::: resolved java method bytecode get code size
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getMaxStackSize()->int::: resolved java method bytecode get max stack size
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getMaxLocals()->int::: resolved java method bytecode get max locals
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getConstantPool()->ConstantPool::: resolved java method bytecode get constant pool
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getLineNumberTable()->LineNumberTable::: resolved java method bytecode get line number table
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getLocalVariableTable()->LocalVariableTable::: resolved java method bytecode get local variable table
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getExceptionHandlers()->ExceptionHandler[]::: resolved java method bytecode get exception handlers
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#asStackTraceElement(int)->StackTraceElement::: resolved java method bytecode as stack trace element
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#getProfilingInfo()->ProfilingInfo::: resolved java method bytecode get profiling info
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecode#toString()->String::: resolved java method bytecode to string
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecodeProvider#getBytecode(ResolvedJavaMethod)->Bytecode::: resolved java method bytecode provider get bytecode
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecodeProvider#supportsInvokedynamic()->boolean::: resolved java method bytecode provider supports invokedynamic
org.graalvm.compiler.bytecode.ResolvedJavaMethodBytecodeProvider#shouldRecordMethodDependencies()->boolean::: resolved java method bytecode provider should record method dependencies

BridgeMethodUtils#getBridgedMethod(ResolvedJavaMethod):::Gets the method bridged to by a ResolvedJavaMethod#isBridge() bridge method:::code->new->ResolvedJavaMethodBytecode->stream->code->getCode->new->BytecodeStream->opcode->stream->currentBC->bridged->calledAbstractMethodErrorConstructor->while->switch->cpi->stream->readCPI->cp->code->getConstantPool->cp->loadReferencedType->method->cp->lookupMethod->if->method->getName->bridge->getName->equals->if->assertionsEnabled->return->else->if->method->getName->equals->method->getDeclaringClass->getName->equals->break->if->return->stream->next->stream->currentBC->if->dis->new->BytecodeDisassembler->disassemble->throw->String->bridge->format->format->new->InternalError->return
BridgeMethodUtils#getAnnotation(Class, ResolvedJavaMethod):::A helper for ResolvedJavaMethod#getAnnotation(Class) that handles the absence of annotations on bridge methods where the bridged method has annotations.:::a->method->getAnnotation->if->method->isBridge->bridged->getBridgedMethod->if->bridged->getAnnotation->return
BridgeMethodUtils#getAnnotations(ResolvedJavaMethod):::A helper for ResolvedJavaMethod#getAnnotations() that handles the absence of annotations on bridge methods where the bridged method has annotations.:::a->method->getAnnotations->if->method->isBridge->bridged->getBridgedMethod->if->bridged->getAnnotations->return
BridgeMethodUtils#getDeclaredAnnotations(ResolvedJavaMethod):::A helper for ResolvedJavaMethod#getDeclaredAnnotations() that handles the absence of annotations on bridge methods where the bridged method has annotations.:::a->method->getAnnotations->if->method->isBridge->bridged->getBridgedMethod->if->bridged->getDeclaredAnnotations->return
BridgeMethodUtils#getParameterAnnotations(ResolvedJavaMethod):::A helper for ResolvedJavaMethod#getParameterAnnotations() that handles the absence of parameter annotations on bridge methods where the bridged method has parameter annotations.:::a->method->getParameterAnnotations->if->method->isBridge->bridged->getBridgedMethod->if->bridged->getParameterAnnotations->return
BridgeMethodUtils#getParameterAnnotation(Class, int, ResolvedJavaMethod):::A helper for ResolvedJavaMethod#getParameterAnnotation(Class, int) that handles the absence of parameter annotations on bridge methods where the bridged method has parameter annotations.:::a->method->getParameterAnnotation->if->method->isBridge->bridged->getBridgedMethod->if->bridged->getParameterAnnotation->return
Bytecode#getMethod():::Gets the method this object supplies bytecode for.:::
Bytecode#getOrigin():::Gets the BytecodeProvider from which this object was acquired.:::
BytecodeDisassembler#disassemble(ResolvedJavaMethod):::Disassembles the bytecode of a given method in a javap-like format.:::return->disassemble
BytecodeDisassembler#disassemble(ResolvedJavaMethod, int, int):::Disassembles the bytecode of a given method in a javap-like format.:::return->new->ResolvedJavaMethodBytecode->disassemble
BytecodeDisassembler#disassemble(Bytecode):::Disassembles code in a javap-like format.:::return->disassemble
BytecodeDisassembler#disassemble(Bytecode, int, int):::Disassembles code in a javap-like format.:::if->code->getCode->return->method->code->getMethod->cp->code->getConstantPool->stream->code->getCode->new->BytecodeStream->buf->new->StringBuilder->opcode->stream->currentBC->try->while->bci->stream->currentBCI->if->mnemonic->Bytecodes->nameOf->buf->String->format->append->if->stream->nextBCI->decodeOperand->if->buf->String->format->append->stream->next->stream->currentBC->catch->throw->String->method->format->buf->toString->format->new->RuntimeException->finally->return->buf->toString
BytecodeProvider#getBytecode(ResolvedJavaMethod):::Gets a Bytecode object that supplies bytecode properties for method.:::
BytecodeProvider#supportsInvokedynamic():::Determines if this provider supports the INVOKEDYNAMIC bytecode.:::
BytecodeProvider#shouldRecordMethodDependencies():::Determines if methods parsed using this provider should be recorded so that method redefinition can invalidate the resulting code.:::
Bytecodes#isCommutative(int):::Determines if an opcode is commutative.:::return
Bytecodes#lengthOf(int):::Gets the length of an instruction denoted by a given opcode.:::return
Bytecodes#stackEffectOf(int):::Gets the effect on the depth of the expression stack of an instruction denoted by a given opcode.:::return
Bytecodes#nameOf(int):::Gets the lower-case mnemonic for a given opcode.:::name->if->return->return
Bytecodes#baseNameOf(int):::Allocation-free version of #nameOf(int).:::name->if->return->return
Bytecodes#valueOf(String):::Gets the opcode corresponding to a given mnemonic.:::for->opcode->throw->new->IllegalArgumentException
Bytecodes#canTrap(int):::Determines if a given opcode denotes an instruction that can cause an implicit exception.:::return
Bytecodes#isLoad(int):::Determines if a given opcode denotes an instruction that loads a local variable to the operand stack.:::return
Bytecodes#isStop(int):::Determines if a given opcode denotes an instruction that ends a basic block and does not let control flow fall through to its lexical successor.:::return
Bytecodes#isInvoke(int):::Determines if a given opcode denotes an instruction that stores a value to a local variable after popping it from the operand stack.:::return
Bytecodes#isStore(int):::Determines if a given opcode denotes an instruction that stores a value to a local variable after popping it from the operand stack.:::return
Bytecodes#isBlockEnd(int):::Determines if a given opcode is an instruction that delimits a basic block.:::return
Bytecodes#isBranch(int):::Determines if a given opcode is an instruction that has a 2 or 4 byte operand that is an offset to another instruction in the same method:::return
Bytecodes#isConditionalBranch(int):::Determines if a given opcode denotes a conditional branch.:::return
Bytecodes#operator(int):::Gets the arithmetic operator name for a given opcode:::switch->return->return->return->return->return->return->return->return->return->return->return->return->nameOf
BytecodeStream#next():::Advances to the next bytecode.:::setBCI
BytecodeStream#nextBCI():::Gets the next bytecode index (no side-effects).:::return
BytecodeStream#currentBCI():::Gets the current bytecode index.:::return
BytecodeStream#endBCI():::Gets the bytecode index of the end of the code.:::return
BytecodeStream#currentBC():::Gets the current opcode:::if->return->Bytes->beU1->else->return
BytecodeStream#readLocalIndex():::Reads the index of a local variable for one of the load or store instructions:::if->return->Bytes->beU2->return->Bytes->beU1
BytecodeStream#readIncrement():::Read the delta for an Bytecodes#IINC bytecode.:::if->return->Bytes->beS2->return->Bytes->beS1
BytecodeStream#readBranchDest():::Read the destination of a Bytecodes#GOTO or IF instructions.:::if->return->Bytes->beS4->else->return->Bytes->beS2
BytecodeStream#readInt(int):::Read a signed 4-byte integer from the bytecode stream at the specified bytecode index.:::return->Bytes->beS4
BytecodeStream#readUByte(int):::Reads an unsigned, 1-byte value from the bytecode stream at the specified bytecode index.:::return->Bytes->beU1
BytecodeStream#readCPI():::Reads a constant pool index for the current instruction.:::if->return->Bytes->beU1->return->Bytes->beU2
BytecodeStream#readCPI4():::Reads a constant pool index for an invokedynamic instruction.:::return->Bytes->beS4
BytecodeStream#readByte():::Reads a signed, 1-byte value for the current instruction (e.g:::return
BytecodeStream#readShort():::Reads a signed, 2-byte short for the current instruction (e.g:::return->Bytes->beS2
BytecodeStream#setBCI(int):::Sets the bytecode index to the specified value:::if->Bytes->beU1->lengthOf->else
BytecodeSwitch#bci():::Gets the current bytecode index.:::return
BytecodeSwitch#targetAt(int):::Gets the index of the instruction denoted by the i'th switch target.:::return->offsetAt
BytecodeSwitch#defaultTarget():::Gets the index of the instruction for the default switch target.:::return->defaultOffset
BytecodeSwitch#defaultOffset():::Gets the offset from the start of the switch instruction to the default switch target.:::return->stream->readInt
BytecodeSwitch#keyAt(int):::Gets the key at i'th switch target index.:::
BytecodeSwitch#offsetAt(int):::Gets the offset from the start of the switch instruction for the i'th switch target.:::
BytecodeSwitch#numberOfCases():::Gets the number of switch targets.:::
BytecodeSwitch#size():::Gets the total size in bytes of the switch instruction.:::
BytecodeTableSwitch#lowKey():::Gets the low key of the table switch.:::return->stream->readInt
BytecodeTableSwitch#highKey():::Gets the high key of the table switch.:::return->stream->readInt
Bytes#beS1(byte[], int):::Gets a signed 1-byte value.:::return
Bytes#beS2(byte[], int):::Gets a signed 2-byte big-endian value.:::return
Bytes#beU1(byte[], int):::Gets an unsigned 1-byte value.:::return
Bytes#beU2(byte[], int):::Gets an unsigned 2-byte big-endian value.:::return
Bytes#beS4(byte[], int):::Gets a signed 4-byte big-endian value.:::return
Bytes#beSVar(byte[], int, boolean):::Gets either a signed 2-byte or a signed 4-byte big-endian value.:::if->return->beS4->else->return->beS2

sun.security.jgss.spnego.NegTokenInit#encode()->byte[]::: neg token init encode
sun.security.jgss.spnego.NegTokenInit#getMechTypes()->byte[]::: neg token init get mech types
sun.security.jgss.spnego.NegTokenInit#getMechTypeList()->Oid[]::: neg token init get mech type list
sun.security.jgss.spnego.NegTokenInit#getReqFlags()->BitArray::: neg token init get req flags
sun.security.jgss.spnego.NegTokenInit#getMechToken()->byte[]::: neg token init get mech token
sun.security.jgss.spnego.NegTokenInit#getMechListMIC()->byte[]::: neg token init get mech list c
sun.security.jgss.spnego.NegTokenTarg#encode()->byte[]::: neg token targ encode
sun.security.jgss.spnego.NegTokenTarg#getNegotiatedResult()->int::: neg token targ get negotiated result
sun.security.jgss.spnego.NegTokenTarg#getSupportedMech()->Oid::: neg token targ get supported mech
sun.security.jgss.spnego.NegTokenTarg#getResponseToken()->byte[]::: neg token targ get response token
sun.security.jgss.spnego.NegTokenTarg#getMechListMIC()->byte[]::: neg token targ get mech list c
sun.security.jgss.spnego.SpNegoContext#requestConf(boolean)->void:::Requests that confidentiality be available.
sun.security.jgss.spnego.SpNegoContext#getConfState()->boolean:::Is confidentiality available?
sun.security.jgss.spnego.SpNegoContext#requestInteg(boolean)->void:::Requests that integrity be available.
sun.security.jgss.spnego.SpNegoContext#requestDelegPolicy(boolean)->void:::Requests that deleg policy be respected.
sun.security.jgss.spnego.SpNegoContext#getIntegState()->boolean:::Is integrity available?
sun.security.jgss.spnego.SpNegoContext#getDelegPolicyState()->boolean:::Is deleg policy respected?
sun.security.jgss.spnego.SpNegoContext#requestCredDeleg(boolean)->void:::Requests that credential delegation be done during context establishment.
sun.security.jgss.spnego.SpNegoContext#getCredDelegState()->boolean:::Is credential delegation enabled?
sun.security.jgss.spnego.SpNegoContext#requestMutualAuth(boolean)->void:::Requests that mutual authentication be done during context establishment
sun.security.jgss.spnego.SpNegoContext#getMutualAuthState()->boolean:::Is mutual authentication enabled? Since this is from the client's perspective, it essentially meas that the server is being authenticated.
sun.security.jgss.spnego.SpNegoContext#getMech()->Oid:::Returns the mechanism oid.
sun.security.jgss.spnego.SpNegoContext#getNegotiatedMech()->Oid::: sp nego context get negotiated mech
sun.security.jgss.spnego.SpNegoContext#getProvider()->Provider::: sp nego context get provider
sun.security.jgss.spnego.SpNegoContext#dispose()->void::: sp nego context dispose
sun.security.jgss.spnego.SpNegoContext#isInitiator()->boolean:::Tests if this is the initiator side of the context.
sun.security.jgss.spnego.SpNegoContext#isProtReady()->boolean:::Tests if the context can be used for per-message service
sun.security.jgss.spnego.SpNegoContext#initSecContext(InputStream, int)->byte[]:::Initiator context establishment call
sun.security.jgss.spnego.SpNegoContext#acceptSecContext(InputStream, int)->byte[]:::Acceptor's context establishment call
sun.security.jgss.spnego.SpNegoContext#isEstablished()->boolean::: sp nego context is established
sun.security.jgss.spnego.SpNegoContext#isMechContextEstablished()->boolean::: sp nego context is mech context established
sun.security.jgss.spnego.SpNegoContext#export()->byte[]::: sp nego context export
sun.security.jgss.spnego.SpNegoContext#setChannelBinding(ChannelBinding)->void:::Sets the channel bindings to be used during context establishment.
sun.security.jgss.spnego.SpNegoContext#getChannelBinding()->ChannelBinding::: sp nego context get channel binding
sun.security.jgss.spnego.SpNegoContext#requestAnonymity(boolean)->void::: sp nego context request anonymity
sun.security.jgss.spnego.SpNegoContext#getAnonymityState()->boolean::: sp nego context get anonymity state
sun.security.jgss.spnego.SpNegoContext#requestLifetime(int)->void:::Requests the desired lifetime
sun.security.jgss.spnego.SpNegoContext#getLifetime()->int:::The lifetime remaining for this context.
sun.security.jgss.spnego.SpNegoContext#isTransferable()->boolean::: sp nego context is transferable
sun.security.jgss.spnego.SpNegoContext#requestSequenceDet(boolean)->void:::Requests that sequence checking be done on the GSS wrap and MIC tokens.
sun.security.jgss.spnego.SpNegoContext#getSequenceDetState()->boolean:::Is sequence checking enabled on the GSS Wrap and MIC tokens? We enable sequence checking if replay detection is enabled.
sun.security.jgss.spnego.SpNegoContext#requestReplayDet(boolean)->void:::Requests that replay detection be done on the GSS wrap and MIC tokens.
sun.security.jgss.spnego.SpNegoContext#getReplayDetState()->boolean:::Is replay detection enabled on the GSS wrap and MIC tokens? We enable replay detection if sequence checking is enabled.
sun.security.jgss.spnego.SpNegoContext#getTargName()->GSSNameSpi::: sp nego context get targ name
sun.security.jgss.spnego.SpNegoContext#getSrcName()->GSSNameSpi::: sp nego context get src name
sun.security.jgss.spnego.SpNegoContext#getDelegCred()->GSSCredentialSpi:::Returns the delegated credential for the context
sun.security.jgss.spnego.SpNegoContext#getWrapSizeLimit(int, boolean, int)->int::: sp nego context get wrap size limit
sun.security.jgss.spnego.SpNegoContext#wrap(byte[], int, int, MessageProp)->byte[]::: sp nego context wrap
sun.security.jgss.spnego.SpNegoContext#wrap(InputStream, OutputStream, MessageProp)->void::: sp nego context wrap
sun.security.jgss.spnego.SpNegoContext#unwrap(byte[], int, int, MessageProp)->byte[]::: sp nego context unwrap
sun.security.jgss.spnego.SpNegoContext#unwrap(InputStream, OutputStream, MessageProp)->void::: sp nego context unwrap
sun.security.jgss.spnego.SpNegoContext#getMIC(byte[], int, int, MessageProp)->byte[]::: sp nego context get c
sun.security.jgss.spnego.SpNegoContext#getMIC(InputStream, OutputStream, MessageProp)->void::: sp nego context get c
sun.security.jgss.spnego.SpNegoContext#verifyMIC(byte[], int, int, byte[], int, int, MessageProp)->void::: sp nego context verify c
sun.security.jgss.spnego.SpNegoContext#verifyMIC(InputStream, InputStream, MessageProp)->void::: sp nego context verify c
sun.security.jgss.spnego.SpNegoContext#inquireSecContext(String)->Object:::Retrieve attribute of the context for type.
sun.security.jgss.spnego.SpNegoCredElement#getInternalMech()->Oid::: sp nego cred element get internal mech
sun.security.jgss.spnego.SpNegoCredElement#getInternalCred()->GSSCredentialSpi::: sp nego cred element get internal cred
sun.security.jgss.spnego.SpNegoCredElement#getProvider()->Provider::: sp nego cred element get provider
sun.security.jgss.spnego.SpNegoCredElement#dispose()->void::: sp nego cred element dispose
sun.security.jgss.spnego.SpNegoCredElement#getName()->GSSNameSpi::: sp nego cred element get name
sun.security.jgss.spnego.SpNegoCredElement#getInitLifetime()->int::: sp nego cred element get init lifetime
sun.security.jgss.spnego.SpNegoCredElement#getAcceptLifetime()->int::: sp nego cred element get accept lifetime
sun.security.jgss.spnego.SpNegoCredElement#isInitiatorCredential()->boolean::: sp nego cred element is initiator credential
sun.security.jgss.spnego.SpNegoCredElement#isAcceptorCredential()->boolean::: sp nego cred element is acceptor credential
sun.security.jgss.spnego.SpNegoCredElement#getMechanism()->Oid::: sp nego cred element get mechanism
sun.security.jgss.spnego.SpNegoCredElement#impersonate(GSSNameSpi)->GSSCredentialSpi::: sp nego cred element impersonate
sun.security.jgss.spnego.SpNegoMechFactory#getNameElement(String, Oid)->GSSNameSpi::: sp nego mech factory get name element
sun.security.jgss.spnego.SpNegoMechFactory#getNameElement(byte[], Oid)->GSSNameSpi::: sp nego mech factory get name element
sun.security.jgss.spnego.SpNegoMechFactory#getCredentialElement(GSSNameSpi, int, int, int)->GSSCredentialSpi::: sp nego mech factory get credential element
sun.security.jgss.spnego.SpNegoMechFactory#getMechanismContext(GSSNameSpi, GSSCredentialSpi, int)->GSSContextSpi::: sp nego mech factory get mechanism context
sun.security.jgss.spnego.SpNegoMechFactory#getMechanismContext(GSSCredentialSpi)->GSSContextSpi::: sp nego mech factory get mechanism context
sun.security.jgss.spnego.SpNegoMechFactory#getMechanismContext(byte[])->GSSContextSpi::: sp nego mech factory get mechanism context
sun.security.jgss.spnego.SpNegoMechFactory#getMechanismOid()->Oid::: sp nego mech factory get mechanism oid
sun.security.jgss.spnego.SpNegoMechFactory#getProvider()->Provider::: sp nego mech factory get provider
sun.security.jgss.spnego.SpNegoMechFactory#getNameTypes()->Oid[]::: sp nego mech factory get name types
sun.security.jgss.spnego.SpNegoToken#encode()->byte[]:::Returns the individual encoded SPNEGO token
sun.security.jgss.spnego.SpNegoToken#getEncoded()->byte[]:::Returns the encoded SPNEGO token Note: inserts the required CHOICE tags
sun.security.jgss.spnego.SpNegoToken#getType()->int:::Returns the SPNEGO token type
sun.security.jgss.spnego.SpNegoToken#getTokenName(int)->String:::Returns a string representing the token type.
sun.security.jgss.spnego.SpNegoToken#getNegoResultType(int)->NegoResult:::Returns the enumerated type of the Negotiation result.
sun.security.jgss.spnego.SpNegoToken#getNegoResultString(int)->String:::Returns a string representing the negotiation result.
sun.security.jgss.spnego.SpNegoToken#checkNextField(int, int)->int:::Checks if the context tag in a sequence is in correct order

SpNegoContext#requestConf(boolean):::Requests that confidentiality be available.:::if->isInitiator
SpNegoContext#getConfState():::Is confidentiality available?:::return
SpNegoContext#requestInteg(boolean):::Requests that integrity be available.:::if->isInitiator
SpNegoContext#requestDelegPolicy(boolean):::Requests that deleg policy be respected.:::if->isInitiator
SpNegoContext#getIntegState():::Is integrity available?:::return
SpNegoContext#getDelegPolicyState():::Is deleg policy respected?:::if->isInitiator->return->getDelegPolicyState->else->return
SpNegoContext#requestCredDeleg(boolean):::Requests that credential delegation be done during context establishment.:::if->isInitiator
SpNegoContext#getCredDelegState():::Is credential delegation enabled?:::if->isInitiator->return->mechContext->getCredDelegState->else->return
SpNegoContext#requestMutualAuth(boolean):::Requests that mutual authentication be done during context establishment:::if->isInitiator
SpNegoContext#getMutualAuthState():::Is mutual authentication enabled? Since this is from the client's perspective, it essentially meas that the server is being authenticated.:::return
SpNegoContext#getMech():::Returns the mechanism oid.:::if->isEstablished->return->getNegotiatedMech->return
SpNegoContext#isInitiator():::Tests if this is the initiator side of the context.:::return
SpNegoContext#isProtReady():::Tests if the context can be used for per-message service:::return
SpNegoContext#initSecContext(InputStream, int):::Initiator context establishment call:::retVal->initToken->mechToken->errorCode->if->printState->println->if->isInitiator->throw->new->GSSException->try->if->mechList->getAvailableMechs->getEncodedMechs->GSS_initSecContext->getContextFlags->new->NegTokenInit->if->SpNegoToken->initToken->getType->getTokenName->println->initToken->getEncoded->else->if->if->throw->new->GSSException->server_token->is->available->new->byteArr->SpNegoToken->readFully->if->SpNegoToken->getHexBytes->println->targToken->new->NegTokenTarg->if->SpNegoToken->targToken->getType->getTokenName->println->targToken->getSupportedMech->if->throw->new->GSSException->negoResult->result->targToken->getNegotiatedResult->switch->break->break->break->break->if->throw->internal_mech->toString->new->GSSException->if->accept_token->targToken->getResponseToken->if->if->isMechContextEstablished->throw->new->GSSException->else->GSS_initSecContext->if->GSSUtil->useMSInterop->micToken->targToken->getMechListMIC->if->verifyMechListMIC->throw->new->GSSException->if->isMechContextEstablished->if->GSSUtil->getMechStr->println->else->new->NegTokenInit->if->SpNegoToken->initToken->getType->getTokenName->println->initToken->getEncoded->else->if->println->if->if->SpNegoToken->getHexBytes->println->catch->gssException->e->getMessage->new->GSSException->gssException->initCause->throw->gssException->e->getMessage->new->GSSException->gssException->initCause->throw->finally->return
SpNegoContext#acceptSecContext(InputStream, int):::Acceptor's context establishment call:::retVal->negoResult->valid->if->printState->println->if->isInitiator->throw->new->GSSException->try->if->token->is->available->new->byteArr->SpNegoToken->readFully->if->SpNegoToken->getHexBytes->println->initToken->new->NegTokenInit->if->SpNegoToken->initToken->getType->getTokenName->println->mechList->initToken->getMechTypeList->initToken->getMechTypes->if->supported_mechSet->getAvailableMechs->mech_wanted->negotiate_mech_type->if->accept_token->if->equals->GSSUtil->isKerberosMech->GSSUtil->isKerberosMech->if->mech_wanted->equals->println->mechToken->initToken->getMechToken->if->throw->new->GSSException->GSS_acceptSecContext->else->if->GSSUtil->useMSInterop->initToken->getMechListMIC->verifyMechListMIC->if->if->isMechContextEstablished->setContextFlags->if->GSSUtil->getMechStr->println->else->else->if->println->println->targToken->negoResult->ordinal->new->NegTokenTarg->if->SpNegoToken->targToken->getType->getTokenName->println->targToken->getEncoded->else->if->token->is->available->new->byteArr->SpNegoToken->readFully->if->SpNegoToken->getHexBytes->println->inputToken->new->NegTokenTarg->if->SpNegoToken->inputToken->getType->getTokenName->println->client_token->inputToken->getResponseToken->accept_token->GSS_acceptSecContext->if->if->if->isMechContextEstablished->else->else->targToken->negoResult->ordinal->new->NegTokenTarg->if->SpNegoToken->targToken->getType->getTokenName->println->targToken->getEncoded->else->if->println->if->SpNegoToken->getHexBytes->println->catch->gssException->e->getMessage->new->GSSException->gssException->initCause->throw->finally->if->setContextFlags->return
SpNegoContext#setChannelBinding(ChannelBinding):::Sets the channel bindings to be used during context establishment.:::
SpNegoContext#requestLifetime(int):::Requests the desired lifetime:::if->isInitiator
SpNegoContext#getLifetime():::The lifetime remaining for this context.:::if->return->mechContext->getLifetime->else->return
SpNegoContext#requestSequenceDet(boolean):::Requests that sequence checking be done on the GSS wrap and MIC tokens.:::if->isInitiator
SpNegoContext#getSequenceDetState():::Is sequence checking enabled on the GSS Wrap and MIC tokens? We enable sequence checking if replay detection is enabled.:::return
SpNegoContext#requestReplayDet(boolean):::Requests that replay detection be done on the GSS wrap and MIC tokens.:::if->isInitiator
SpNegoContext#getReplayDetState():::Is replay detection enabled on the GSS wrap and MIC tokens? We enable replay detection if sequence checking is enabled.:::return
SpNegoContext#getDelegCred():::Returns the delegated credential for the context:::if->throw->new->GSSException->if->delegCred->mechContext->getDelegCred->if->return->initiate->if->delegCred->getUsage->mechCred->delegCred->getElement->cred->new->SpNegoCredElement->return->cred->getInternalCred->else->throw->new->GSSException
SpNegoContext#inquireSecContext(String):::Retrieve attribute of the context for type.:::if->throw->new->GSSException->if->return->inquireSecContext->else->throw->new->GSSException
SpNegoToken#encode():::Returns the individual encoded SPNEGO token:::
SpNegoToken#getEncoded():::Returns the encoded SPNEGO token Note: inserts the required CHOICE tags:::token->new->DerOutputStream->token->encode->write->switch->initToken->new->DerOutputStream->initToken->DerValue->createTag->write->return->initToken->toByteArray->targToken->new->DerOutputStream->targToken->DerValue->createTag->write->return->targToken->toByteArray->return->token->toByteArray
SpNegoToken#getType():::Returns the SPNEGO token type:::return
SpNegoToken#getTokenName(int):::Returns a string representing the token type.:::switch->return->return->return
SpNegoToken#getNegoResultType(int):::Returns the enumerated type of the Negotiation result.:::switch->return->return->return->return
SpNegoToken#getNegoResultString(int):::Returns a string representing the negotiation result.:::switch->return->return->return->return
SpNegoToken#checkNextField(int, int):::Checks if the context tag in a sequence is in correct order:::if->return->else->throw->new->GSSException

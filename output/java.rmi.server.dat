java.rmi.server.LoaderHandler#loadClass(String)->Class:::Loads a class from the location specified by the java.rmi.server.codebase property.
java.rmi.server.LoaderHandler#loadClass(URL, String)->Class:::Loads a class from a URL.
java.rmi.server.LoaderHandler#getSecurityContext(ClassLoader)->Object:::Returns the security context of the given class loader.
java.rmi.server.LogStream#log(String)->LogStream:::Return the LogStream identified by the given name
java.rmi.server.LogStream#getDefaultStream()->PrintStream:::Return the current default stream for new logs.
java.rmi.server.LogStream#setDefaultStream(PrintStream)->void:::Set the default stream for new logs.
java.rmi.server.LogStream#getOutputStream()->OutputStream:::Return the current stream to which output from this log is sent.
java.rmi.server.LogStream#setOutputStream(OutputStream)->void:::Set the stream to which output from this log is sent.
java.rmi.server.LogStream#write(int)->void:::Write a byte of data to the stream
java.rmi.server.LogStream#write(byte[], int, int)->void:::Write a subarray of bytes
java.rmi.server.LogStream#toString()->String:::Return log name as string representation.
java.rmi.server.LogStream#parseLevel(String)->int:::Convert a string name of a logging level to its internal integer representation.
java.rmi.server.ObjID#write(ObjectOutput)->void:::Marshals a binary representation of this ObjID to an ObjectOutput instance
java.rmi.server.ObjID#read(ObjectInput)->ObjID:::Constructs and returns a new ObjID instance by unmarshalling a binary representation from an ObjectInput instance
java.rmi.server.ObjID#hashCode()->int:::Returns the hash code value for this object identifier, the object number.
java.rmi.server.ObjID#equals(Object)->boolean:::Compares the specified object with this ObjID for equality
java.rmi.server.ObjID#toString()->String::: obj d to string
java.rmi.server.Operation#getOperation()->String:::Returns the name of the method.
java.rmi.server.Operation#toString()->String:::Returns the string representation of the operation.
java.rmi.server.RemoteCall#getOutputStream()->ObjectOutput:::Return the output stream the stub/skeleton should put arguments/results into.
java.rmi.server.RemoteCall#releaseOutputStream()->void:::Release the output stream; in some transports this would release the stream.
java.rmi.server.RemoteCall#getInputStream()->ObjectInput:::Get the InputStream that the stub/skeleton should get results/arguments from.
java.rmi.server.RemoteCall#releaseInputStream()->void:::Release the input stream
java.rmi.server.RemoteCall#getResultStream(boolean)->ObjectOutput:::Returns an output stream (may put out header information relating to the success of the call)
java.rmi.server.RemoteCall#executeCall()->void:::Do whatever it takes to execute the call.
java.rmi.server.RemoteCall#done()->void:::Allow cleanup after the remote call has completed.
java.rmi.server.RemoteObject#getRef()->RemoteRef:::Returns the remote reference for the remote object
java.rmi.server.RemoteObject#toStub(Remote)->Remote:::Returns the stub for the remote object obj passed as a parameter
java.rmi.server.RemoteObject#hashCode()->int:::Returns a hashcode for a remote object
java.rmi.server.RemoteObject#equals(Object)->boolean:::Compares two remote objects for equality
java.rmi.server.RemoteObject#toString()->String:::Returns a String that represents the value of this remote object.
java.rmi.server.RemoteObjectInvocationHandler#invoke(Object, Method, Object[])->Object:::Processes a method invocation made on the encapsulating proxy instance, proxy, and returns the result
java.rmi.server.RemoteRef#invoke(Remote, java.lang.reflect.Method, Object[], long)->Object:::Invoke a method
java.rmi.server.RemoteRef#newCall(RemoteObject, Operation[], int, long)->RemoteCall:::Creates an appropriate call object for a new remote method invocation on this object
java.rmi.server.RemoteRef#invoke(RemoteCall)->void:::Executes the remote call
java.rmi.server.RemoteRef#done(RemoteCall)->void:::Allows the remote reference to clean up (or reuse) the connection
java.rmi.server.RemoteRef#getRefClass(java.io.ObjectOutput)->String:::Returns the class name of the ref type to be serialized onto the stream 'out'.
java.rmi.server.RemoteRef#remoteHashCode()->int:::Returns a hashcode for a remote object
java.rmi.server.RemoteRef#remoteEquals(RemoteRef)->boolean:::Compares two remote objects for equality
java.rmi.server.RemoteRef#remoteToString()->String:::Returns a String that represents the reference of this remote object.
java.rmi.server.RemoteServer#getClientHost()->String:::Returns a string representation of the client host for the remote method invocation being processed in the current thread.
java.rmi.server.RemoteServer#setLog(java.io.OutputStream)->void:::Log RMI calls to the output stream out
java.rmi.server.RemoteServer#getLog()->java.io.PrintStream:::Returns stream for the RMI call log.
java.rmi.server.RemoteStub#setRef(RemoteStub, RemoteRef)->void:::Throws UnsupportedOperationException.
java.rmi.server.RMIClassLoader#loadClass(String)->Class:::Loads the class with the specified name
java.rmi.server.RMIClassLoader#loadClass(URL, String)->Class:::Loads a class from a codebase URL
java.rmi.server.RMIClassLoader#loadClass(String, String)->Class:::Loads a class from a codebase URL path
java.rmi.server.RMIClassLoader#loadClass(String, String, ClassLoader)->Class:::Loads a class from a codebase URL path, optionally using the supplied loader
java.rmi.server.RMIClassLoader#loadProxyClass(String, String[], ClassLoader)->Class:::Loads a dynamic proxy class (see java.lang.reflect.Proxy) that implements a set of interfaces with the given names from a codebase URL path
java.rmi.server.RMIClassLoader#getClassLoader(String)->ClassLoader:::Returns a class loader that loads classes from the given codebase URL path
java.rmi.server.RMIClassLoader#getClassAnnotation(Class)->String::: class loader get class annotation
java.rmi.server.RMIClassLoader#getDefaultProviderInstance()->RMIClassLoaderSpi:::Returns the canonical instance of the default provider for the service provider interface RMIClassLoaderSpi
java.rmi.server.RMIClassLoader#getSecurityContext(ClassLoader)->Object:::Returns the security context of the given class loader.
java.rmi.server.RMIClassLoaderSpi#loadClass(String, String, ClassLoader)->Class:::Provides the implementation for RMIClassLoader#loadClass(URL,String), RMIClassLoader#loadClass(String,String), and RMIClassLoader#loadClass(String,String,ClassLoader)
java.rmi.server.RMIClassLoaderSpi#loadProxyClass(String, String[], ClassLoader)->Class:::Provides the implementation for RMIClassLoader#loadProxyClass(String,String[],ClassLoader)
java.rmi.server.RMIClassLoaderSpi#getClassLoader(String)->ClassLoader:::Provides the implementation for RMIClassLoader#getClassLoader(String)
java.rmi.server.RMIClassLoaderSpi#getClassAnnotation(Class)->String:::Provides the implementation for RMIClassLoader#getClassAnnotation(Class)
java.rmi.server.RMIClientSocketFactory#createSocket(String, int)->Socket:::Create a client socket connected to the specified host and port.
java.rmi.server.RMIFailureHandler#failure(Exception)->boolean:::The failure callback is invoked when the RMI runtime is unable to create a ServerSocket via the RMISocketFactory
java.rmi.server.RMIServerSocketFactory#createServerSocket(int)->ServerSocket:::Create a server socket on the specified port (port 0 indicates an anonymous port).
java.rmi.server.RMISocketFactory#createSocket(String, int)->Socket:::Creates a client socket connected to the specified host and port.
java.rmi.server.RMISocketFactory#createServerSocket(int)->ServerSocket:::Create a server socket on the specified port (port 0 indicates an anonymous port).
java.rmi.server.RMISocketFactory#setSocketFactory(RMISocketFactory)->void:::Set the global socket factory from which RMI gets sockets (if the remote object is not associated with a specific client and/or server socket factory)
java.rmi.server.RMISocketFactory#getSocketFactory()->RMISocketFactory:::Returns the socket factory set by the setSocketFactory method
java.rmi.server.RMISocketFactory#getDefaultSocketFactory()->RMISocketFactory:::Returns a reference to the default socket factory used by this RMI implementation
java.rmi.server.RMISocketFactory#setFailureHandler(RMIFailureHandler)->void:::Sets the failure handler to be called by the RMI runtime if server socket creation fails
java.rmi.server.RMISocketFactory#getFailureHandler()->RMIFailureHandler:::Returns the handler for socket creation failure set by the setFailureHandler method.
java.rmi.server.ServerCloneException#getMessage()->String:::Returns the detail message, including the message from the cause, if any, of this exception.
java.rmi.server.ServerCloneException#getCause()->Throwable:::Returns the cause of this exception
java.rmi.server.ServerRef#exportObject(Remote, Object)->RemoteStub:::Creates a client stub object for the supplied Remote object
java.rmi.server.ServerRef#getClientHost()->String:::Returns the hostname of the current client
java.rmi.server.Skeleton#dispatch(Remote, RemoteCall, int, long)->void:::Unmarshals arguments, calls the actual remote object implementation, and marshals the return value or any exception.
java.rmi.server.Skeleton#getOperations()->Operation[]:::Returns the operations supported by the skeleton.
java.rmi.server.UID#hashCode()->int:::Returns the hash code value for this UID.
java.rmi.server.UID#equals(Object)->boolean:::Compares the specified object with this UID for equality
java.rmi.server.UID#toString()->String:::Returns a string representation of this UID.
java.rmi.server.UID#write(DataOutput)->void:::Marshals a binary representation of this UID to a DataOutput instance
java.rmi.server.UID#read(DataInput)->UID:::Constructs and returns a new UID instance by unmarshalling a binary representation from an DataInput instance
java.rmi.server.UnicastRemoteObject#clone()->Object:::Returns a clone of the remote object that is distinct from the original.
java.rmi.server.UnicastRemoteObject#exportObject(Remote)->RemoteStub:::Exports the remote object to make it available to receive incoming calls using an anonymous port
java.rmi.server.UnicastRemoteObject#exportObject(Remote, int)->Remote:::Exports the remote object to make it available to receive incoming calls, using the particular supplied port
java.rmi.server.UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory)->Remote:::Exports the remote object to make it available to receive incoming calls, using a transport specified by the given socket factory
java.rmi.server.UnicastRemoteObject#exportObject(Remote, int, ObjectInputFilter)->Remote:::Exports the remote object to make it available to receive incoming calls, using the particular supplied port and ObjectInputFilter filter
java.rmi.server.UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory, ObjectInputFilter)->Remote:::Exports the remote object to make it available to receive incoming calls, using a transport specified by the given socket factory and ObjectInputFilter filter
java.rmi.server.UnicastRemoteObject#unexportObject(Remote, boolean)->boolean:::Removes the remote object, obj, from the RMI runtime
java.rmi.server.Unreferenced#unreferenced()->void:::Called by the RMI runtime sometime after the runtime determines that the reference list, the list of clients referencing the remote object, becomes empty.

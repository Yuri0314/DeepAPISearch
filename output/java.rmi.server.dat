LoaderHandler#loadClass(String):::Loads a class from the location specified by the java.rmi.server.codebase property.:::
LoaderHandler#loadClass(URL, String):::Loads a class from a URL.:::
LoaderHandler#getSecurityContext(ClassLoader):::Returns the security context of the given class loader.:::
LogStream#log(String):::Return the LogStream identified by the given name:::stream->synchronized->known->get->if->new->LogStream->known->put->return
LogStream#getDefaultStream():::Return the current default stream for new logs.:::return
LogStream#setDefaultStream(PrintStream):::Set the default stream for new logs.:::sm->System->getSecurityManager->if->sm->new->java.util.logging.LoggingPermission->checkPermission
LogStream#getOutputStream():::Return the current stream to which output from this log is sent.:::return
LogStream#setOutputStream(OutputStream):::Set the stream to which output from this log is sent.:::new->OutputStreamWriter
LogStream#write(int):::Write a byte of data to the stream:::if->synchronized->synchronized->buffer->setLength->buffer->new->Date->toString->append->buffer->append->buffer->append->buffer->append->buffer->Thread->currentThread->getName->append->buffer->append->try->logWriter->buffer->toString->write->logWriter->flush->bufOut->writeTo->logOut->write->logOut->flush->catch->setError->finally->bufOut->reset->else->super->write
LogStream#write(byte[], int, int):::Write a subarray of bytes:::if->throw->new->ArrayIndexOutOfBoundsException->for->i
LogStream#toString():::Return log name as string representation.:::return
LogStream#parseLevel(String):::Convert a string name of a logging level to its internal integer representation.:::if->s->length->return->try->return->Integer->parseInt->catch->finally->if->s->length->return->if->s->toUpperCase->startsWith->return->else->if->s->toUpperCase->startsWith->return->else->if->s->toUpperCase->startsWith->return->return
ObjID#write(ObjectOutput):::Marshals a binary representation of this ObjID to an ObjectOutput instance:::out->writeLong->space->write
ObjID#read(ObjectInput):::Constructs and returns a new ObjID instance by unmarshalling a binary representation from an ObjectInput instance:::num->in->readLong->space->UID->read->return->new->ObjID
ObjID#hashCode():::Returns the hash code value for this object identifier, the object number.:::return
ObjID#equals(Object):::Compares the specified object with this ObjID for equality:::if->id->return->space->equals->else->return
Operation#getOperation():::Returns the name of the method.:::return
Operation#toString():::Returns the string representation of the operation.:::return
RemoteCall#getOutputStream():::Return the output stream the stub/skeleton should put arguments/results into.:::
RemoteCall#releaseOutputStream():::Release the output stream; in some transports this would release the stream.:::
RemoteCall#getInputStream():::Get the InputStream that the stub/skeleton should get results/arguments from.:::
RemoteCall#releaseInputStream():::Release the input stream:::
RemoteCall#getResultStream(boolean):::Returns an output stream (may put out header information relating to the success of the call):::
RemoteCall#executeCall():::Do whatever it takes to execute the call.:::
RemoteCall#done():::Allow cleanup after the remote call has completed.:::
RemoteObject#getRef():::Returns the remote reference for the remote object:::return
RemoteObject#toStub(Remote):::Returns the stub for the remote object obj passed as a parameter:::if->Proxy->obj->getClass->isProxyClass->Proxy->getInvocationHandler->return->else->return->getStub
RemoteObject#hashCode():::Returns a hashcode for a remote object:::return->super->hashCode->ref->remoteHashCode
RemoteObject#equals(Object):::Compares two remote objects for equality:::if->if->return->else->return->ref->remoteEquals->else->if->return->obj->equals->else->return
RemoteObject#toString():::Returns a String that represents the value of this remote object.:::classname->Util->getClass->getUnqualifiedName->return->ref->remoteToString
RemoteObjectInvocationHandler#invoke(Object, Method, Object[]):::Processes a method invocation made on the encapsulating proxy instance, proxy, and returns the result:::if->Proxy->proxy->getClass->isProxyClass->throw->new->IllegalArgumentException->if->Proxy->getInvocationHandler->throw->new->IllegalArgumentException->if->method->getDeclaringClass->return->invokeObjectMethod->else->if->method->getName->equals->method->getParameterCount->return->else->return->invokeRemoteMethod
RemoteRef#invoke(Remote, java.lang.reflect.Method, Object[], long):::Invoke a method:::
RemoteRef#newCall(RemoteObject, Operation[], int, long):::Creates an appropriate call object for a new remote method invocation on this object:::
RemoteRef#invoke(RemoteCall):::Executes the remote call:::
RemoteRef#done(RemoteCall):::Allows the remote reference to clean up (or reuse) the connection:::
RemoteRef#getRefClass(java.io.ObjectOutput):::Returns the class name of the ref type to be serialized onto the stream 'out'.:::
RemoteRef#remoteHashCode():::Returns a hashcode for a remote object:::
RemoteRef#remoteEquals(RemoteRef):::Compares two remote objects for equality:::
RemoteRef#remoteToString():::Returns a String that represents the reference of this remote object.:::
RemoteServer#getClientHost():::Returns a string representation of the client host for the remote method invocation being processed in the current thread.:::return->getClientHost
RemoteServer#setLog(java.io.OutputStream):::Log RMI calls to the output stream out:::setOutputStream
RemoteServer#getLog():::Returns stream for the RMI call log.:::return->getPrintStream
RemoteStub#setRef(RemoteStub, RemoteRef):::Throws UnsupportedOperationException.:::throw->new->UnsupportedOperationException
RMIClassLoader#loadClass(String):::Loads the class with the specified name:::return->loadClass
RMIClassLoader#loadClass(URL, String):::Loads a class from a codebase URL:::return->provider->codebase->toString->loadClass
RMIClassLoader#loadClass(String, String):::Loads a class from a codebase URL path:::return->provider->loadClass
RMIClassLoader#loadClass(String, String, ClassLoader):::Loads a class from a codebase URL path, optionally using the supplied loader:::return->provider->loadClass
RMIClassLoader#loadProxyClass(String, String[], ClassLoader):::Loads a dynamic proxy class (see java.lang.reflect.Proxy) that implements a set of interfaces with the given names from a codebase URL path:::return->provider->loadProxyClass
RMIClassLoader#getClassLoader(String):::Returns a class loader that loads classes from the given codebase URL path:::return->provider->getClassLoader
RMIClassLoader#getDefaultProviderInstance():::Returns the canonical instance of the default provider for the service provider interface RMIClassLoaderSpi:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return
RMIClassLoader#getSecurityContext(ClassLoader):::Returns the security context of the given class loader.:::return->getSecurityContext
RMIClassLoaderSpi#loadClass(String, String, ClassLoader):::Provides the implementation for RMIClassLoader#loadClass(URL,String), RMIClassLoader#loadClass(String,String), and RMIClassLoader#loadClass(String,String,ClassLoader):::
RMIClassLoaderSpi#loadProxyClass(String, String[], ClassLoader):::Provides the implementation for RMIClassLoader#loadProxyClass(String,String[],ClassLoader):::
RMIClassLoaderSpi#getClassLoader(String):::Provides the implementation for RMIClassLoader#getClassLoader(String):::
RMIClassLoaderSpi#getClassAnnotation(Class):::Provides the implementation for RMIClassLoader#getClassAnnotation(Class):::
RMIClientSocketFactory#createSocket(String, int):::Create a client socket connected to the specified host and port.:::
RMIFailureHandler#failure(Exception):::The failure callback is invoked when the RMI runtime is unable to create a ServerSocket via the RMISocketFactory:::
RMIServerSocketFactory#createServerSocket(int):::Create a server socket on the specified port (port 0 indicates an anonymous port).:::
RMISocketFactory#createSocket(String, int):::Creates a client socket connected to the specified host and port.:::
RMISocketFactory#createServerSocket(int):::Create a server socket on the specified port (port 0 indicates an anonymous port).:::
RMISocketFactory#setSocketFactory(RMISocketFactory):::Set the global socket factory from which RMI gets sockets (if the remote object is not associated with a specific client and/or server socket factory):::if->throw->new->SocketException->security->System->getSecurityManager->if->security->checkSetFactory
RMISocketFactory#getSocketFactory():::Returns the socket factory set by the setSocketFactory method:::return
RMISocketFactory#getDefaultSocketFactory():::Returns a reference to the default socket factory used by this RMI implementation:::if->new->sun.rmi.transport.tcp.TCPDirectSocketFactory->return
RMISocketFactory#setFailureHandler(RMIFailureHandler):::Sets the failure handler to be called by the RMI runtime if server socket creation fails:::security->System->getSecurityManager->if->security->checkSetFactory
RMISocketFactory#getFailureHandler():::Returns the handler for socket creation failure set by the setFailureHandler method.:::return
ServerCloneException#getMessage():::Returns the detail message, including the message from the cause, if any, of this exception.:::if->return->super->getMessage->else->return->super->getMessage->detail->toString
ServerCloneException#getCause():::Returns the cause of this exception:::return
ServerRef#exportObject(Remote, Object):::Creates a client stub object for the supplied Remote object:::
ServerRef#getClientHost():::Returns the hostname of the current client:::
Skeleton#dispatch(Remote, RemoteCall, int, long):::Unmarshals arguments, calls the actual remote object implementation, and marshals the return value or any exception.:::
Skeleton#getOperations():::Returns the operations supported by the skeleton.:::
UID#hashCode():::Returns the hash code value for this UID.:::return
UID#equals(Object):::Compares the specified object with this UID for equality:::if->uid->return->else->return
UID#toString():::Returns a string representation of this UID.:::return->Integer->toString->Long->toString->Integer->toString
UID#write(DataOutput):::Marshals a binary representation of this UID to a DataOutput instance:::out->writeInt->out->writeLong->out->writeShort
UID#read(DataInput):::Constructs and returns a new UID instance by unmarshalling a binary representation from an DataInput instance:::unique->in->readInt->time->in->readLong->count->in->readShort->return->new->UID
UnicastRemoteObject#clone():::Returns a clone of the remote object that is distinct from the original.:::try->cloned->super->clone->cloned->reexport->return->catch->throw->new->ServerCloneException->finally
UnicastRemoteObject#exportObject(Remote):::Exports the remote object to make it available to receive incoming calls using an anonymous port:::return->new->UnicastServerRef->exportObject
UnicastRemoteObject#exportObject(Remote, int):::Exports the remote object to make it available to receive incoming calls, using the particular supplied port:::return->new->UnicastServerRef->exportObject
UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory):::Exports the remote object to make it available to receive incoming calls, using a transport specified by the given socket factory:::return->new->UnicastServerRef2->exportObject
UnicastRemoteObject#exportObject(Remote, int, ObjectInputFilter):::Exports the remote object to make it available to receive incoming calls, using the particular supplied port and ObjectInputFilter filter:::return->new->LiveRef->new->UnicastServerRef->exportObject
UnicastRemoteObject#exportObject(Remote, int, RMIClientSocketFactory, RMIServerSocketFactory, ObjectInputFilter):::Exports the remote object to make it available to receive incoming calls, using a transport specified by the given socket factory and ObjectInputFilter filter:::return->new->UnicastServerRef2->exportObject
UnicastRemoteObject#unexportObject(Remote, boolean):::Removes the remote object, obj, from the RMI runtime:::return->unexportObject
Unreferenced#unreferenced():::Called by the RMI runtime sometime after the runtime determines that the reference list, the list of clients referencing the remote object, becomes empty.:::

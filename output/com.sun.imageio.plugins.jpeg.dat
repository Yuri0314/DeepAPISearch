com.sun.imageio.plugins.jpeg.AdobeMarkerSegment#getNativeNode()->IIOMetadataNode::: adobe marker segment get native node
com.sun.imageio.plugins.jpeg.AdobeMarkerSegment#updateFromNativeNode(Node, boolean)->void::: adobe marker segment update from native node
com.sun.imageio.plugins.jpeg.AdobeMarkerSegment#write(ImageOutputStream)->void:::Writes the data for this segment to the stream in valid JPEG format.
com.sun.imageio.plugins.jpeg.AdobeMarkerSegment#writeAdobeSegment(ImageOutputStream, int)->void::: adobe marker segment write adobe segment
com.sun.imageio.plugins.jpeg.AdobeMarkerSegment#print()->void::: adobe marker segment print
com.sun.imageio.plugins.jpeg.COMMarkerSegment#getComment()->String:::Returns the array encoded as a String, using ISO-Latin-1 encoding
com.sun.imageio.plugins.jpeg.COMMarkerSegment#getNativeNode()->IIOMetadataNode:::Returns an IIOMetadataNode containing the data array as a user object and a string encoded using ISO-8895-1, as an attribute.
com.sun.imageio.plugins.jpeg.COMMarkerSegment#write(ImageOutputStream)->void:::Writes the data for this segment to the stream in valid JPEG format, directly from the data array.
com.sun.imageio.plugins.jpeg.COMMarkerSegment#print()->void::: marker segment print
com.sun.imageio.plugins.jpeg.DHTMarkerSegment#clone()->Object::: marker segment clone
com.sun.imageio.plugins.jpeg.DHTMarkerSegment#getNativeNode()->IIOMetadataNode::: marker segment get native node
com.sun.imageio.plugins.jpeg.DHTMarkerSegment#write(ImageOutputStream)->void:::Writes the data for this segment to the stream in valid JPEG format.
com.sun.imageio.plugins.jpeg.DHTMarkerSegment#print()->void::: marker segment print
com.sun.imageio.plugins.jpeg.DHTMarkerSegment#getHtableFromNode(Node)->Htable::: marker segment get htable from node
com.sun.imageio.plugins.jpeg.DHTMarkerSegment#addHtable(JPEGHuffmanTable, boolean, int)->void::: marker segment add htable
com.sun.imageio.plugins.jpeg.DHTMarkerSegment.Htable#clone()->Object::: htable clone
com.sun.imageio.plugins.jpeg.DHTMarkerSegment.Htable#getNativeNode()->IIOMetadataNode::: htable get native node
com.sun.imageio.plugins.jpeg.DHTMarkerSegment.Htable#print()->void::: htable print
com.sun.imageio.plugins.jpeg.DQTMarkerSegment#clone()->Object::: marker segment clone
com.sun.imageio.plugins.jpeg.DQTMarkerSegment#getNativeNode()->IIOMetadataNode::: marker segment get native node
com.sun.imageio.plugins.jpeg.DQTMarkerSegment#write(ImageOutputStream)->void:::Writes the data for this segment to the stream in valid JPEG format.
com.sun.imageio.plugins.jpeg.DQTMarkerSegment#print()->void::: marker segment print
com.sun.imageio.plugins.jpeg.DQTMarkerSegment#getChromaForLuma(Qtable)->Qtable:::Assuming the given table was generated by scaling the "standard" visually lossless luminance table, extract the scale factor that was used.
com.sun.imageio.plugins.jpeg.DQTMarkerSegment#getQtableFromNode(Node)->Qtable::: marker segment get qtable from node
com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable#clone()->Object::: qtable clone
com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable#getNativeNode()->IIOMetadataNode::: qtable get native node
com.sun.imageio.plugins.jpeg.DQTMarkerSegment.Qtable#print()->void::: qtable print
com.sun.imageio.plugins.jpeg.DRIMarkerSegment#getNativeNode()->IIOMetadataNode::: marker segment get native node
com.sun.imageio.plugins.jpeg.DRIMarkerSegment#updateFromNativeNode(Node, boolean)->void::: marker segment update from native node
com.sun.imageio.plugins.jpeg.DRIMarkerSegment#write(ImageOutputStream)->void:::Writes the data for this segment to the stream in valid JPEG format.
com.sun.imageio.plugins.jpeg.DRIMarkerSegment#print()->void::: marker segment print
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#clone()->Object:::Returns a deep-copy clone of this object.
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#addJFXX(JPEGBuffer, JPEGImageReader)->void:::Add an JFXX extension marker segment from the stream wrapped in the JPEGBuffer to the list of extension segments.
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#addICC(JPEGBuffer)->void:::Adds an ICC Profile APP2 segment from the stream wrapped in the JPEGBuffer.
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#addICC(ICC_ColorSpace)->void:::Add an ICC Profile APP2 segment by constructing it from the given ICC_ColorSpace object.
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#getNativeNode()->IIOMetadataNode:::Returns a tree of DOM nodes representing this object and any subordinate JFXX extension or ICC Profile segments.
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#updateFromNativeNode(Node, boolean)->void:::Updates the data in this object from the given DOM Node tree
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#getThumbnailWidth(int)->int::: marker segment get thumbnail width
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#getThumbnailHeight(int)->int::: marker segment get thumbnail height
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#getThumbnail(ImageInputStream, int, JPEGImageReader)->BufferedImage::: marker segment get thumbnail
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#write(ImageOutputStream, JPEGImageWriter)->void:::Writes the data for this segment to the stream in valid JPEG format
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#write(ImageOutputStream, BufferedImage, JPEGImageWriter)->void:::Writes the data for this segment to the stream in valid JPEG format
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#writeThumbnailData(ImageOutputStream, int[], JPEGImageWriter)->void::: marker segment write thumbnail data
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#writeWithThumbs(ImageOutputStream, List, JPEGImageWriter)->void:::Write out this JFIF Marker Segment, including a thumbnail or appending a series of JFXX Marker Segments, as appropriate
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#writeDefaultJFIF(ImageOutputStream, List, ICC_Profile, JPEGImageWriter)->void:::Writes out a default JFIF marker segment to the given output stream
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#print()->void:::Prints out the contents of this object to System.out for debugging.
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment#setThumbnail(BufferedImage)->void::: extension marker segment set thumbnail
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment#clone()->Object::: extension marker segment clone
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment#getNativeNode()->IIOMetadataNode::: extension marker segment get native node
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment#write(ImageOutputStream, JPEGImageWriter)->void::: extension marker segment write
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFExtensionMarkerSegment#print()->void::: extension marker segment print
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb#getLength()->int::: thumb get length
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb#getWidth()->int::: thumb get width
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb#getHeight()->int::: thumb get height
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb#getThumbnail(ImageInputStream, JPEGImageReader)->BufferedImage::: thumb get thumbnail
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb#print()->void::: thumb print
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb#getNativeNode()->IIOMetadataNode::: thumb get native node
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb#write(ImageOutputStream, JPEGImageWriter)->void::: thumb write
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumb#clone()->Object::: thumb clone
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed#readByteBuffer(ImageInputStream, byte[], JPEGImageReader, float, float)->void::: thumb uncompressed read byte buffer
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed#getWidth()->int::: thumb uncompressed get width
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed#getHeight()->int::: thumb uncompressed get height
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed#getNativeNode()->IIOMetadataNode::: thumb uncompressed get native node
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed#write(ImageOutputStream, JPEGImageWriter)->void::: thumb uncompressed write
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed#writePixels(ImageOutputStream, JPEGImageWriter)->void::: thumb uncompressed write pixels
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbUncompressed#print()->void::: thumb uncompressed print
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB#getLength()->int::: thumb b get length
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB#getThumbnail(ImageInputStream, JPEGImageReader)->BufferedImage::: thumb b get thumbnail
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbRGB#write(ImageOutputStream, JPEGImageWriter)->void::: thumb b write
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette#getLength()->int::: thumb palette get length
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette#getThumbnail(ImageInputStream, JPEGImageReader)->BufferedImage::: thumb palette get thumbnail
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbPalette#write(ImageOutputStream, JPEGImageWriter)->void::: thumb palette write
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG#getWidth()->int::: thumb g get width
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG#getHeight()->int::: thumb g get height
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG#getThumbnail(ImageInputStream, JPEGImageReader)->BufferedImage::: thumb g get thumbnail
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG#clone()->Object::: thumb g clone
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG#getNativeNode()->IIOMetadataNode::: thumb g get native node
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG#getLength()->int::: thumb g get length
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG#write(ImageOutputStream, JPEGImageWriter)->void::: thumb g write
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.JFIFThumbJPEG#print()->void::: thumb g print
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment#writeICC(ICC_Profile, ImageOutputStream)->void:::Write out the given profile to the stream, embedded in the necessary number of APP2 segments, per the ICC spec
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment#clone()->Object::: marker segment clone
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment#addData(JPEGBuffer)->boolean::: marker segment add data
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment#getNativeNode()->IIOMetadataNode::: marker segment get native node
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment#write(ImageOutputStream)->void:::No-op
com.sun.imageio.plugins.jpeg.JFIFMarkerSegment.ICCMarkerSegment#print()->void::: marker segment print
com.sun.imageio.plugins.jpeg.JPEG#isNonStandardICC(ColorSpace)->boolean:::Returns true if the given ColorSpace object is an instance of ICC_ColorSpace but is not one of the standard ColorSpaces returned by ColorSpace.getInstance().
com.sun.imageio.plugins.jpeg.JPEG#isJFIFcompliant(ImageTypeSpecifier, boolean)->boolean:::Returns true if the given imageType can be used in a JFIF file
com.sun.imageio.plugins.jpeg.JPEG#transformForType(ImageTypeSpecifier, boolean)->int:::Given an image type, return the Adobe transform corresponding to that type, or ADOBE_IMPOSSIBLE if the image type is incompatible with an Adobe marker segment
com.sun.imageio.plugins.jpeg.JPEG#convertToLinearQuality(float)->float:::Converts an ImageWriteParam (i.e
com.sun.imageio.plugins.jpeg.JPEG#getDefaultQTables()->JPEGQTable[]:::Return an array of default, visually lossless quantization tables.
com.sun.imageio.plugins.jpeg.JPEG#getDefaultHuffmanTables(boolean)->JPEGHuffmanTable[]:::Return an array of default Huffman tables.
com.sun.imageio.plugins.jpeg.JPEGBuffer#loadBuf(int)->void:::Ensures that there are at least count bytes available in the buffer, loading more data and moving any remaining bytes to the front
com.sun.imageio.plugins.jpeg.JPEGBuffer#readData(byte[])->void:::Fills the data array from the stream, starting with the buffer and then reading directly from the stream if necessary
com.sun.imageio.plugins.jpeg.JPEGBuffer#skipData(int)->void:::Skips count bytes, leaving the buffer in an appropriate state
com.sun.imageio.plugins.jpeg.JPEGBuffer#pushBack()->void:::Push back the remaining contents of the buffer by repositioning the input stream.
com.sun.imageio.plugins.jpeg.JPEGBuffer#getStreamPosition()->long:::Return the stream position corresponding to the next available byte in the buffer.
com.sun.imageio.plugins.jpeg.JPEGBuffer#scanForFF(JPEGImageReader)->boolean:::Scan the buffer until the next 0xff byte, reloading the buffer as necessary
com.sun.imageio.plugins.jpeg.JPEGBuffer#print(int)->void:::Prints the contents of the buffer, in hex.
com.sun.imageio.plugins.jpeg.JPEGImageMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)->boolean::: image metadata format can node appear
com.sun.imageio.plugins.jpeg.JPEGImageMetadataFormat#getInstance()->IIOMetadataFormat::: image metadata format get instance
com.sun.imageio.plugins.jpeg.JPEGImageMetadataFormatResources#getContents()->Object[][]::: image metadata format resources get contents
com.sun.imageio.plugins.jpeg.JPEGImageReader#warningOccurred(int)->void:::Called by the native code or other classes to signal a warning
com.sun.imageio.plugins.jpeg.JPEGImageReader#warningWithMessage(String)->void:::The library has it's own error facility that emits warning messages
com.sun.imageio.plugins.jpeg.JPEGImageReader#setInput(Object, boolean, boolean)->void::: image reader set input
com.sun.imageio.plugins.jpeg.JPEGImageReader#getNumImages(boolean)->int::: image reader get num images
com.sun.imageio.plugins.jpeg.JPEGImageReader#getWidth(int)->int::: image reader get width
com.sun.imageio.plugins.jpeg.JPEGImageReader#getHeight(int)->int::: image reader get height
com.sun.imageio.plugins.jpeg.JPEGImageReader#getRawImageType(int)->ImageTypeSpecifier::: image reader get raw image type
com.sun.imageio.plugins.jpeg.JPEGImageReader#getImageTypes(int)->Iterator::: image reader get image types
com.sun.imageio.plugins.jpeg.JPEGImageReader#getDefaultReadParam()->ImageReadParam::: image reader get default read param
com.sun.imageio.plugins.jpeg.JPEGImageReader#getStreamMetadata()->IIOMetadata::: image reader get stream metadata
com.sun.imageio.plugins.jpeg.JPEGImageReader#getImageMetadata(int)->IIOMetadata::: image reader get image metadata
com.sun.imageio.plugins.jpeg.JPEGImageReader#read(int, ImageReadParam)->BufferedImage::: image reader read
com.sun.imageio.plugins.jpeg.JPEGImageReader#thumbnailStarted(int)->void::: image reader thumbnail started
com.sun.imageio.plugins.jpeg.JPEGImageReader#thumbnailProgress(float)->void::: image reader thumbnail progress
com.sun.imageio.plugins.jpeg.JPEGImageReader#thumbnailComplete()->void::: image reader thumbnail complete
com.sun.imageio.plugins.jpeg.JPEGImageReader#abort()->void::: image reader abort
com.sun.imageio.plugins.jpeg.JPEGImageReader#canReadRaster()->boolean::: image reader can read raster
com.sun.imageio.plugins.jpeg.JPEGImageReader#readRaster(int, ImageReadParam)->Raster::: image reader read raster
com.sun.imageio.plugins.jpeg.JPEGImageReader#readerSupportsThumbnails()->boolean::: image reader reader supports thumbnails
com.sun.imageio.plugins.jpeg.JPEGImageReader#getNumThumbnails(int)->int::: image reader get num thumbnails
com.sun.imageio.plugins.jpeg.JPEGImageReader#getThumbnailWidth(int, int)->int::: image reader get thumbnail width
com.sun.imageio.plugins.jpeg.JPEGImageReader#getThumbnailHeight(int, int)->int::: image reader get thumbnail height
com.sun.imageio.plugins.jpeg.JPEGImageReader#readThumbnail(int, int)->BufferedImage::: image reader read thumbnail
com.sun.imageio.plugins.jpeg.JPEGImageReader#reset()->void::: image reader reset
com.sun.imageio.plugins.jpeg.JPEGImageReader#dispose()->void::: image reader dispose
com.sun.imageio.plugins.jpeg.ImageTypeIterator#hasNext()->boolean::: image type iterator has next
com.sun.imageio.plugins.jpeg.ImageTypeIterator#next()->ImageTypeSpecifier::: image type iterator next
com.sun.imageio.plugins.jpeg.ImageTypeIterator#remove()->void::: image type iterator remove
com.sun.imageio.plugins.jpeg.ImageTypeProducer#getType()->ImageTypeSpecifier::: image type producer get type
com.sun.imageio.plugins.jpeg.ImageTypeProducer#getTypeProducer(int)->ImageTypeProducer::: image type producer get type producer
com.sun.imageio.plugins.jpeg.ImageTypeProducer#produce()->ImageTypeSpecifier::: image type producer produce
com.sun.imageio.plugins.jpeg.JPEGImageReaderResources#getContents()->Object[][]::: image reader resources get contents
com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi#getDescription(Locale)->String::: image reader spi get description
com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi#canDecodeInput(Object)->boolean::: image reader spi can decode input
com.sun.imageio.plugins.jpeg.JPEGImageReaderSpi#createReaderInstance(Object)->ImageReader::: image reader spi create reader instance
com.sun.imageio.plugins.jpeg.JPEGImageWriter#setOutput(Object)->void::: image writer set output
com.sun.imageio.plugins.jpeg.JPEGImageWriter#getDefaultWriteParam()->ImageWriteParam::: image writer get default write param
com.sun.imageio.plugins.jpeg.JPEGImageWriter#getDefaultStreamMetadata(ImageWriteParam)->IIOMetadata::: image writer get default stream metadata
com.sun.imageio.plugins.jpeg.JPEGImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)->IIOMetadata::: image writer get default image metadata
com.sun.imageio.plugins.jpeg.JPEGImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)->IIOMetadata::: image writer convert stream metadata
com.sun.imageio.plugins.jpeg.JPEGImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)->IIOMetadata::: image writer convert image metadata
com.sun.imageio.plugins.jpeg.JPEGImageWriter#getNumThumbnailsSupported(ImageTypeSpecifier, ImageWriteParam, IIOMetadata, IIOMetadata)->int::: image writer get num thumbnails supported
com.sun.imageio.plugins.jpeg.JPEGImageWriter#getPreferredThumbnailSizes(ImageTypeSpecifier, ImageWriteParam, IIOMetadata, IIOMetadata)->Dimension[]::: image writer get preferred thumbnail sizes
com.sun.imageio.plugins.jpeg.JPEGImageWriter#canWriteRasters()->boolean::: image writer can write rasters
com.sun.imageio.plugins.jpeg.JPEGImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)->void::: image writer write
com.sun.imageio.plugins.jpeg.JPEGImageWriter#canWriteSequence()->boolean::: image writer can write sequence
com.sun.imageio.plugins.jpeg.JPEGImageWriter#prepareWriteSequence(IIOMetadata)->void::: image writer prepare write sequence
com.sun.imageio.plugins.jpeg.JPEGImageWriter#writeToSequence(IIOImage, ImageWriteParam)->void::: image writer write to sequence
com.sun.imageio.plugins.jpeg.JPEGImageWriter#endWriteSequence()->void::: image writer end write sequence
com.sun.imageio.plugins.jpeg.JPEGImageWriter#abort()->void::: image writer abort
com.sun.imageio.plugins.jpeg.JPEGImageWriter#clearAbortRequest()->void::: image writer clear abort request
com.sun.imageio.plugins.jpeg.JPEGImageWriter#reset()->void::: image writer reset
com.sun.imageio.plugins.jpeg.JPEGImageWriter#dispose()->void::: image writer dispose
com.sun.imageio.plugins.jpeg.JPEGImageWriter#warningOccurred(int)->void:::Called by the native code or other classes to signal a warning
com.sun.imageio.plugins.jpeg.JPEGImageWriter#warningWithMessage(String)->void:::The library has it's own error facility that emits warning messages
com.sun.imageio.plugins.jpeg.JPEGImageWriter#thumbnailStarted(int)->void::: image writer thumbnail started
com.sun.imageio.plugins.jpeg.JPEGImageWriter#thumbnailProgress(float)->void::: image writer thumbnail progress
com.sun.imageio.plugins.jpeg.JPEGImageWriter#thumbnailComplete()->void::: image writer thumbnail complete
com.sun.imageio.plugins.jpeg.JPEGImageWriterResources#getContents()->Object[][]::: image writer resources get contents
com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi#getDescription(Locale)->String::: image writer spi get description
com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi#isFormatLossless()->boolean::: image writer spi is format lossless
com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi#canEncodeImage(ImageTypeSpecifier)->boolean::: image writer spi can encode image
com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi#createWriterInstance(Object)->ImageWriter::: image writer spi create writer instance
com.sun.imageio.plugins.jpeg.JPEGMetadata#findMarkerSegment(int)->MarkerSegment:::Returns the first MarkerSegment object in the list with the given tag, or null if none is found.
com.sun.imageio.plugins.jpeg.JPEGMetadata#findMarkerSegment(Class, boolean)->MarkerSegment:::Returns the first or last MarkerSegment object in the list of the given class, or null if none is found.
com.sun.imageio.plugins.jpeg.JPEGMetadata#clone()->Object::: metadata clone
com.sun.imageio.plugins.jpeg.JPEGMetadata#getAsTree(String)->Node::: metadata get as tree
com.sun.imageio.plugins.jpeg.JPEGMetadata#getNativeTree()->IIOMetadataNode::: metadata get native tree
com.sun.imageio.plugins.jpeg.JPEGMetadata#getStandardChromaNode()->IIOMetadataNode::: metadata get standard chroma node
com.sun.imageio.plugins.jpeg.JPEGMetadata#getStandardCompressionNode()->IIOMetadataNode::: metadata get standard compression node
com.sun.imageio.plugins.jpeg.JPEGMetadata#getStandardDimensionNode()->IIOMetadataNode::: metadata get standard dimension node
com.sun.imageio.plugins.jpeg.JPEGMetadata#getStandardTextNode()->IIOMetadataNode::: metadata get standard text node
com.sun.imageio.plugins.jpeg.JPEGMetadata#getStandardTransparencyNode()->IIOMetadataNode::: metadata get standard transparency node
com.sun.imageio.plugins.jpeg.JPEGMetadata#isReadOnly()->boolean::: metadata is read only
com.sun.imageio.plugins.jpeg.JPEGMetadata#mergeTree(String, Node)->void::: metadata merge tree
com.sun.imageio.plugins.jpeg.JPEGMetadata#setFromTree(String, Node)->void::: metadata set from tree
com.sun.imageio.plugins.jpeg.JPEGMetadata#setFromMarkerSequenceNode(Node)->void::: metadata set from marker sequence node
com.sun.imageio.plugins.jpeg.JPEGMetadata#writeToStream(ImageOutputStream, boolean, boolean, List, ICC_Profile, boolean, int, JPEGImageWriter)->void::: metadata write to stream
com.sun.imageio.plugins.jpeg.JPEGMetadata#reset()->void::: metadata reset
com.sun.imageio.plugins.jpeg.JPEGMetadata#print()->void::: metadata print
com.sun.imageio.plugins.jpeg.JPEGMetadataFormat#addStreamElements(String)->void::: metadata format add stream elements
com.sun.imageio.plugins.jpeg.JPEGMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)->boolean::: metadata format can node appear
com.sun.imageio.plugins.jpeg.JPEGMetadataFormat#isInSubtree(String, String)->boolean:::Returns true if the named element occurs in the subtree of the format starting with the node named by subtreeName, including the node itself
com.sun.imageio.plugins.jpeg.JPEGStreamMetadataFormat#getInstance()->IIOMetadataFormat::: stream metadata format get instance
com.sun.imageio.plugins.jpeg.JPEGStreamMetadataFormatResources#getContents()->Object[][]::: stream metadata format resources get contents
com.sun.imageio.plugins.jpeg.MarkerSegment#clone()->Object:::Deep copy of data array.
com.sun.imageio.plugins.jpeg.MarkerSegment#loadData(JPEGBuffer)->void:::We have determined that we don't know the type, so load the data using the length parameter.
com.sun.imageio.plugins.jpeg.MarkerSegment#getNativeNode()->IIOMetadataNode::: marker segment get native node
com.sun.imageio.plugins.jpeg.MarkerSegment#getAttributeValue(Node, NamedNodeMap, String, int, int, boolean)->int::: marker segment get attribute value
com.sun.imageio.plugins.jpeg.MarkerSegment#writeTag(ImageOutputStream)->void:::Writes the marker, tag, and length
com.sun.imageio.plugins.jpeg.MarkerSegment#write(ImageOutputStream)->void:::Writes the data for this segment to the stream in valid JPEG format.
com.sun.imageio.plugins.jpeg.MarkerSegment#write2bytes(ImageOutputStream, int)->void::: marker segment write2bytes
com.sun.imageio.plugins.jpeg.MarkerSegment#printTag(String)->void::: marker segment print tag
com.sun.imageio.plugins.jpeg.MarkerSegment#print()->void::: marker segment print
com.sun.imageio.plugins.jpeg.SOFMarkerSegment#clone()->Object::: marker segment clone
com.sun.imageio.plugins.jpeg.SOFMarkerSegment#getNativeNode()->IIOMetadataNode::: marker segment get native node
com.sun.imageio.plugins.jpeg.SOFMarkerSegment#updateFromNativeNode(Node, boolean)->void::: marker segment update from native node
com.sun.imageio.plugins.jpeg.SOFMarkerSegment#write(ImageOutputStream)->void:::Writes the data for this segment to the stream in valid JPEG format.
com.sun.imageio.plugins.jpeg.SOFMarkerSegment#print()->void::: marker segment print
com.sun.imageio.plugins.jpeg.SOFMarkerSegment#getIDencodedCSType()->int::: marker segment get dencoded type
com.sun.imageio.plugins.jpeg.SOFMarkerSegment#getComponentSpec(byte, int, int)->ComponentSpec::: marker segment get component spec
com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec#clone()->Object::: component spec clone
com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec#getNativeNode()->IIOMetadataNode::: component spec get native node
com.sun.imageio.plugins.jpeg.SOFMarkerSegment.ComponentSpec#print()->void::: component spec print
com.sun.imageio.plugins.jpeg.SOSMarkerSegment#clone()->Object::: marker segment clone
com.sun.imageio.plugins.jpeg.SOSMarkerSegment#getNativeNode()->IIOMetadataNode::: marker segment get native node
com.sun.imageio.plugins.jpeg.SOSMarkerSegment#updateFromNativeNode(Node, boolean)->void::: marker segment update from native node
com.sun.imageio.plugins.jpeg.SOSMarkerSegment#write(ImageOutputStream)->void:::Writes the data for this segment to the stream in valid JPEG format.
com.sun.imageio.plugins.jpeg.SOSMarkerSegment#print()->void::: marker segment print
com.sun.imageio.plugins.jpeg.SOSMarkerSegment#getScanComponentSpec(byte, int)->ScanComponentSpec::: marker segment get scan component spec
com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec#clone()->Object::: scan component spec clone
com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec#getNativeNode()->IIOMetadataNode::: scan component spec get native node
com.sun.imageio.plugins.jpeg.SOSMarkerSegment.ScanComponentSpec#print()->void::: scan component spec print

BasicCDebugInfoDataBase#beginConstruction():::Supports lazy instantiation and references between types and       symbols via insertion using arbitrary Object keys that are       wrapped by LazyTypes:::if->Assert->that->new->HashMap->new->ArrayList->new->HashMap->new->ArrayList->new->HashMap->new->BasicLineNumberMapping
BasicCDebugInfoDataBase#addType(Object, Type):::Add a type which may later in construction be referred to via a       LazyType with this key:::if->Assert->that->if->if->lazyTypeMap->put->throw->new->RuntimeException->else->types->add
BasicCDebugInfoDataBase#addBlock(Object, BlockSym):::Add a BlockSym to the debug information database:::if->Assert->that->lazySymMap->put->blocks->add
BasicCDebugInfoDataBase#resolveType(Type, Type, ResolveListener, String):::Intended only to be used by the BasicType implementation.:::basicTargetType->if->Assert->that->if->basicTargetType->isLazy->resolved->lazyTypeMap->getKey->get->if->listener->resolveFailed->return->if->resolved->isLazy->if->resolved->isConst->resolved->isVolatile->resolved->resolveTypes->if->resolved->isLazy->listener->getKey->intValue->resolved->isConst->resolved->isVolatile->resolveFailed->return->return
BasicCDebugInfoDataBase#resolveType(Sym, Type, ResolveListener, String):::Intended only to be usd by the BasicSym implementation.:::basicTargetType->if->Assert->that->if->basicTargetType->isLazy->resolved->lazyTypeMap->getKey->get->if->listener->resolveFailed->return->if->resolved->isLazy->if->resolved->isConst->resolved->isVolatile->resolved->resolveTypes->if->resolved->isLazy->listener->resolveFailed->return->return
BasicCDebugInfoDataBase#resolveSym(Sym, Sym, ResolveListener, String):::Intended only to be usd by the BasicSym implementation.:::if->return->basicTargetSym->if->Assert->that->if->basicTargetSym->isLazy->resolved->lazySymMap->getKey->get->if->listener->resolveFailed->return->if->resolved->isLazy->listener->resolveFailed->return->return
BasicDebugEvent#setType(DebugEvent.Type):::Mutators for convenience:::
BasicDebugEvent#newLoadObjectLoadEvent(ThreadProxy, Address):::Factory methods for convenience:::return->newAddressEvent
BasicField#setOffset(long):::Nonstatic fields only: set offset of field:::if->throw->new->RuntimeException
BasicField#getOffset():::Nonstatic fields only: get offset of field:::if->throw->new->RuntimeException->return
BasicField#setAddress(Address):::Static fields only: set address of field:::if->throw->new->RuntimeException
BasicField#getAddress():::Static fields only: get address of field:::if->throw->new->RuntimeException->return
BasicLineNumberInfo#getSourceFileName():::Not specified whether this is an absolute or relative path.:::return
BasicLineNumberInfo#getEndPC():::FIXME: specify whether this is inclusive or exclusive (currently       when BasicLineNumberMapping.recomputeEndPCs() is called, this is       exclusive):::return
BasicLineNumberInfo#setEndPC(Address):::For recomputing end PCs if they are not available in the debug info:::
BasicLineNumberMapping#addLineNumberInfo(BasicLineNumberInfo):::Add line number information for the given PC:::if->new->ArrayList->infoList->add
BasicLineNumberMapping#sort():::Sort the line number information by increasing starting program       counter:::if->return->Collections->new->Comparator->sort
BasicLineNumberMapping#recomputeEndPCs():::Recomputes the ending PCs of each interval based on the starting       PC of the next one:::if->return->for->i->infoList->size
BasicSym#resolve(BasicCDebugInfoDataBase, ResolveListener):::Resolve type and symbol references in this symbol:::
BasicType#setName(String):::For use during resolution only:::
ResolveListener#resolveFailed(Type, LazyType, String):::Indicates failure to resolve a type within another type:::
ResolveListener#resolveFailed(Type, String):::Indicates failure to resolve the address of a static field in a       type:::
ResolveListener#resolveFailed(Sym, LazyType, String):::Indicates failure to resolve reference to a type from a symbol:::
ResolveListener#resolveFailed(Sym, LazyBlockSym, String):::Indicates failure to resolve reference from one symbol to       another (currently occurs only from BlockSyms to other BlockSyms):::

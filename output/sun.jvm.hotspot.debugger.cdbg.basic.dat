sun.jvm.hotspot.debugger.cdbg.basic.BasicArrayType#asArray()->ArrayType::: basic array type as array
sun.jvm.hotspot.debugger.cdbg.basic.BasicArrayType#getElementType()->Type::: basic array type get element type
sun.jvm.hotspot.debugger.cdbg.basic.BasicArrayType#getLength()->int::: basic array type get length
sun.jvm.hotspot.debugger.cdbg.basic.BasicArrayType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: basic array type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicArrayType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic array type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicArrayType#createCVVariant(int)->Type::: basic array type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicArrayType#visit(TypeVisitor)->void::: basic array type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicBaseClass#getAccessControl()->int::: basic base class get access control
sun.jvm.hotspot.debugger.cdbg.basic.BasicBaseClass#isVirtual()->boolean::: basic base class is virtual
sun.jvm.hotspot.debugger.cdbg.basic.BasicBaseClass#getType()->Type::: basic base class get type
sun.jvm.hotspot.debugger.cdbg.basic.BasicBaseClass#resolveTypes(Type, BasicCDebugInfoDataBase, ResolveListener)->void::: basic base class resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicBitType#asBit()->BitType::: basic bit type as bit
sun.jvm.hotspot.debugger.cdbg.basic.BasicBitType#getSize()->int::: basic bit type get size
sun.jvm.hotspot.debugger.cdbg.basic.BasicBitType#isUnsigned()->boolean::: basic bit type is unsigned
sun.jvm.hotspot.debugger.cdbg.basic.BasicBitType#getSizeInBits()->int::: basic bit type get size in bits
sun.jvm.hotspot.debugger.cdbg.basic.BasicBitType#getOffset()->int::: basic bit type get offset
sun.jvm.hotspot.debugger.cdbg.basic.BasicBitType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: basic bit type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicBitType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic bit type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicBitType#createCVVariant(int)->Type::: basic bit type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicBitType#visit(TypeVisitor)->void::: basic bit type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicBlockSym#asBlock()->BlockSym::: basic block sym as block
sun.jvm.hotspot.debugger.cdbg.basic.BasicBlockSym#getParent()->BlockSym::: basic block sym get parent
sun.jvm.hotspot.debugger.cdbg.basic.BasicBlockSym#getLength()->long::: basic block sym get length
sun.jvm.hotspot.debugger.cdbg.basic.BasicBlockSym#getAddress()->Address::: basic block sym get address
sun.jvm.hotspot.debugger.cdbg.basic.BasicBlockSym#getNumLocals()->int::: basic block sym get num locals
sun.jvm.hotspot.debugger.cdbg.basic.BasicBlockSym#getLocal(int)->LocalSym::: basic block sym get local
sun.jvm.hotspot.debugger.cdbg.basic.BasicBlockSym#addLocal(LocalSym)->void::: basic block sym add local
sun.jvm.hotspot.debugger.cdbg.basic.BasicBlockSym#resolve(BasicCDebugInfoDataBase, ResolveListener)->void::: basic block sym resolve
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#beginConstruction()->void:::Supports lazy instantiation and references between types and       symbols via insertion using arbitrary Object keys that are       wrapped by LazyTypes
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#addType(Object, Type)->void:::Add a type which may later in construction be referred to via a       LazyType with this key
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#resolve(ResolveListener)->void::: basic debug info data base resolve
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#endConstruction()->void::: basic debug info data base end construction
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#lookupType(String)->Type::: basic debug info data base lookup type
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#lookupType(String, int)->Type::: basic debug info data base lookup type
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#iterate(TypeVisitor)->void::: basic debug info data base iterate
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#addBlock(Object, BlockSym)->void:::Add a BlockSym to the debug information database
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#addGlobalSym(GlobalSym)->void::: basic debug info data base add global sym
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#debugInfoForPC(Address)->BlockSym::: basic debug info data base debug info for c
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#lookupSym(String)->GlobalSym::: basic debug info data base lookup sym
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#addLineNumberInfo(BasicLineNumberInfo)->void::: basic debug info data base add line number info
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#lineNumberForPC(Address)->LineNumberInfo::: basic debug info data base line number for c
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#iterate(LineNumberVisitor)->void::: basic debug info data base iterate
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#resolveType(Type, Type, ResolveListener, String)->Type:::Intended only to be used by the BasicType implementation.
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#resolveType(Sym, Type, ResolveListener, String)->Type:::Intended only to be usd by the BasicSym implementation.
sun.jvm.hotspot.debugger.cdbg.basic.BasicCDebugInfoDataBase#resolveSym(Sym, Sym, ResolveListener, String)->Sym:::Intended only to be usd by the BasicSym implementation.
sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame#dbg()->CDebugger::: basic frame dbg
sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame#loadObjectForPC()->LoadObject::: basic frame load object for c
sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame#blockForPC()->BlockSym::: basic frame block for c
sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame#closestSymbolToPC()->ClosestSymbol::: basic frame closest symbol to c
sun.jvm.hotspot.debugger.cdbg.basic.BasicCFrame#iterateLocals(ObjectVisitor)->void::: basic frame iterate locals
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#asCompound()->CompoundType::: basic compound type as compound
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#getNumBaseClasses()->int::: basic compound type get num base classes
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#getBaseClass(int)->BaseClass::: basic compound type get base class
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#addBaseClass(BaseClass)->void::: basic compound type add base class
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#getNumFields()->int::: basic compound type get num fields
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#getField(int)->Field::: basic compound type get field
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#addField(Field)->void::: basic compound type add field
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#isClass()->boolean::: basic compound type is class
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#isStruct()->boolean::: basic compound type is struct
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#isUnion()->boolean::: basic compound type is union
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: basic compound type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic compound type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#createCVVariant(int)->Type::: basic compound type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicCompoundType#visit(TypeVisitor)->void::: basic compound type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#getType()->DebugEvent.Type::: basic debug event get type
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#getThread()->ThreadProxy::: basic debug event get thread
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#getPC()->Address::: basic debug event get c
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#getWasWrite()->boolean::: basic debug event get was write
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#getAddress()->Address::: basic debug event get address
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#getUnknownEventDetail()->String::: basic debug event get unknown event detail
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#setType(DebugEvent.Type)->void:::Mutators for convenience
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#setThread(ThreadProxy)->void::: basic debug event set thread
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#setPC(Address)->void::: basic debug event set c
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#setWasWrite(boolean)->void::: basic debug event set was write
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#setAddress(Address)->void::: basic debug event set address
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#setUnknownEventDetail(String)->void::: basic debug event set unknown event detail
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#newLoadObjectLoadEvent(ThreadProxy, Address)->BasicDebugEvent:::Factory methods for convenience
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#newLoadObjectUnloadEvent(ThreadProxy, Address)->BasicDebugEvent::: basic debug event new load object unload event
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#newBreakpointEvent(ThreadProxy, Address)->BasicDebugEvent::: basic debug event new breakpoint event
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#newSingleStepEvent(ThreadProxy, Address)->BasicDebugEvent::: basic debug event new single step event
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#newAccessViolationEvent(ThreadProxy, Address, boolean, Address)->BasicDebugEvent::: basic debug event new access violation event
sun.jvm.hotspot.debugger.cdbg.basic.BasicDebugEvent#newUnknownEvent(ThreadProxy, String)->BasicDebugEvent::: basic debug event new unknown event
sun.jvm.hotspot.debugger.cdbg.basic.BasicDoubleType#asDouble()->DoubleType::: basic double type as double
sun.jvm.hotspot.debugger.cdbg.basic.BasicDoubleType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic double type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicDoubleType#createCVVariant(int)->Type::: basic double type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicDoubleType#visit(TypeVisitor)->void::: basic double type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#asEnum()->EnumType::: basic enum type as enum
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#getSize()->int::: basic enum type get size
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#isUnsigned()->boolean::: basic enum type is unsigned
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#addEnum(String, long)->void::: basic enum type add enum
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#getNumEnumerates()->int::: basic enum type get num enumerates
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#getEnumName(int)->String::: basic enum type get enum name
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#getEnumValue(int)->long::: basic enum type get enum value
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#enumNameForValue(long)->String::: basic enum type enum name for value
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: basic enum type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic enum type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#createCVVariant(int)->Type::: basic enum type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicEnumType#visit(TypeVisitor)->void::: basic enum type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicField#getAccessControl()->int::: basic field get access control
sun.jvm.hotspot.debugger.cdbg.basic.BasicField#getName()->String::: basic field get name
sun.jvm.hotspot.debugger.cdbg.basic.BasicField#getType()->Type::: basic field get type
sun.jvm.hotspot.debugger.cdbg.basic.BasicField#isStatic()->boolean::: basic field is static
sun.jvm.hotspot.debugger.cdbg.basic.BasicField#setOffset(long)->void:::Nonstatic fields only: set offset of field
sun.jvm.hotspot.debugger.cdbg.basic.BasicField#getOffset()->long:::Nonstatic fields only: get offset of field
sun.jvm.hotspot.debugger.cdbg.basic.BasicField#setAddress(Address)->void:::Static fields only: set address of field
sun.jvm.hotspot.debugger.cdbg.basic.BasicField#getAddress()->Address:::Static fields only: get address of field
sun.jvm.hotspot.debugger.cdbg.basic.BasicField#resolveTypes(Type, BasicCDebugInfoDataBase, ResolveListener)->void::: basic field resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicFloatType#asFloat()->FloatType::: basic float type as float
sun.jvm.hotspot.debugger.cdbg.basic.BasicFloatType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic float type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicFloatType#createCVVariant(int)->Type::: basic float type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicFloatType#visit(TypeVisitor)->void::: basic float type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionSym#asFunction()->FunctionSym::: basic function sym as function
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionSym#getType()->Type::: basic function sym get type
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionSym#isModuleLocal()->boolean::: basic function sym is module local
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionSym#resolve(BasicCDebugInfoDataBase, ResolveListener)->void::: basic function sym resolve
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionSym#toString()->String::: basic function sym to string
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType#asFunction()->FunctionType::: basic function type as function
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType#getReturnType()->Type::: basic function type get return type
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType#getNumArguments()->int::: basic function type get num arguments
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType#getArgumentType(int)->Type::: basic function type get argument type
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType#addArgumentType(Type)->void::: basic function type add argument type
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: basic function type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic function type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType#createCVVariant(int)->Type::: basic function type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicFunctionType#visit(TypeVisitor)->void::: basic function type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicGlobalSym#asGlobal()->GlobalSym::: basic global sym as global
sun.jvm.hotspot.debugger.cdbg.basic.BasicGlobalSym#getType()->Type::: basic global sym get type
sun.jvm.hotspot.debugger.cdbg.basic.BasicGlobalSym#getAddress()->Address::: basic global sym get address
sun.jvm.hotspot.debugger.cdbg.basic.BasicGlobalSym#isModuleLocal()->boolean::: basic global sym is module local
sun.jvm.hotspot.debugger.cdbg.basic.BasicGlobalSym#resolve(BasicCDebugInfoDataBase, ResolveListener)->void::: basic global sym resolve
sun.jvm.hotspot.debugger.cdbg.basic.BasicIndexableFieldIdentifier#getType()->Type::: basic indexable field identifier get type
sun.jvm.hotspot.debugger.cdbg.basic.BasicIndexableFieldIdentifier#getIndex()->int::: basic indexable field identifier get index
sun.jvm.hotspot.debugger.cdbg.basic.BasicIndexableFieldIdentifier#toString()->String::: basic indexable field identifier to string
sun.jvm.hotspot.debugger.cdbg.basic.BasicIntType#asInt()->IntType::: basic int type as int
sun.jvm.hotspot.debugger.cdbg.basic.BasicIntType#getIntSize()->int::: basic int type get int size
sun.jvm.hotspot.debugger.cdbg.basic.BasicIntType#isUnsigned()->boolean::: basic int type is unsigned
sun.jvm.hotspot.debugger.cdbg.basic.BasicIntType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic int type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicIntType#createCVVariant(int)->Type::: basic int type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicIntType#visit(TypeVisitor)->void::: basic int type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberInfo#getSourceFileName()->String:::Not specified whether this is an absolute or relative path.
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberInfo#getLineNumber()->int::: basic line number info get line number
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberInfo#getStartPC()->Address::: basic line number info get start c
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberInfo#getEndPC()->Address:::FIXME: specify whether this is inclusive or exclusive (currently       when BasicLineNumberMapping.recomputeEndPCs() is called, this is       exclusive)
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberInfo#setEndPC(Address)->void:::For recomputing end PCs if they are not available in the debug info
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberMapping#addLineNumberInfo(BasicLineNumberInfo)->void:::Add line number information for the given PC
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberMapping#sort()->void:::Sort the line number information by increasing starting program       counter
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberMapping#recomputeEndPCs()->void:::Recomputes the ending PCs of each interval based on the starting       PC of the next one
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberMapping#lineNumberForPC(Address)->BasicLineNumberInfo::: basic line number mapping line number for c
sun.jvm.hotspot.debugger.cdbg.basic.BasicLineNumberMapping#iterate(LineNumberVisitor)->void::: basic line number mapping iterate
sun.jvm.hotspot.debugger.cdbg.basic.BasicLocalSym#asLocal()->LocalSym::: basic local sym as local
sun.jvm.hotspot.debugger.cdbg.basic.BasicLocalSym#getType()->Type::: basic local sym get type
sun.jvm.hotspot.debugger.cdbg.basic.BasicLocalSym#getFrameOffset()->long::: basic local sym get frame offset
sun.jvm.hotspot.debugger.cdbg.basic.BasicLocalSym#resolve(BasicCDebugInfoDataBase, ResolveListener)->void::: basic local sym resolve
sun.jvm.hotspot.debugger.cdbg.basic.BasicMemberFunctionType#asMemberFunction()->MemberFunctionType::: basic member function type as member function
sun.jvm.hotspot.debugger.cdbg.basic.BasicMemberFunctionType#getContainingClass()->Type::: basic member function type get containing class
sun.jvm.hotspot.debugger.cdbg.basic.BasicMemberFunctionType#getThisType()->Type::: basic member function type get this type
sun.jvm.hotspot.debugger.cdbg.basic.BasicMemberFunctionType#getThisAdjust()->long::: basic member function type get this adjust
sun.jvm.hotspot.debugger.cdbg.basic.BasicMemberFunctionType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: basic member function type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicMemberFunctionType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic member function type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicMemberFunctionType#createCVVariant(int)->Type::: basic member function type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicMemberFunctionType#visit(TypeVisitor)->void::: basic member function type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicNamedFieldIdentifier#getName()->String::: basic named field identifier get name
sun.jvm.hotspot.debugger.cdbg.basic.BasicNamedFieldIdentifier#getType()->Type::: basic named field identifier get type
sun.jvm.hotspot.debugger.cdbg.basic.BasicNamedFieldIdentifier#toString()->String::: basic named field identifier to string
sun.jvm.hotspot.debugger.cdbg.basic.BasicPointerType#asPointer()->PointerType::: basic pointer type as pointer
sun.jvm.hotspot.debugger.cdbg.basic.BasicPointerType#getTargetType()->Type::: basic pointer type get target type
sun.jvm.hotspot.debugger.cdbg.basic.BasicPointerType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: basic pointer type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicPointerType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic pointer type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicPointerType#createCVVariant(int)->Type::: basic pointer type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicPointerType#visit(TypeVisitor)->void::: basic pointer type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicRefType#asRef()->RefType::: basic ref type as ref
sun.jvm.hotspot.debugger.cdbg.basic.BasicRefType#getTargetType()->Type::: basic ref type get target type
sun.jvm.hotspot.debugger.cdbg.basic.BasicRefType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: basic ref type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicRefType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic ref type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicRefType#createCVVariant(int)->Type::: basic ref type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicRefType#visit(TypeVisitor)->void::: basic ref type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#getName()->String::: basic sym get name
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#toString()->String::: basic sym to string
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#asBlock()->BlockSym::: basic sym as block
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#asFunction()->FunctionSym::: basic sym as function
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#asGlobal()->GlobalSym::: basic sym as global
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#asLocal()->LocalSym::: basic sym as local
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#isBlock()->boolean::: basic sym is block
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#isFunction()->boolean::: basic sym is function
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#isGlobal()->boolean::: basic sym is global
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#isLocal()->boolean::: basic sym is local
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#isLazy()->boolean::: basic sym is lazy
sun.jvm.hotspot.debugger.cdbg.basic.BasicSym#resolve(BasicCDebugInfoDataBase, ResolveListener)->void:::Resolve type and symbol references in this symbol
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#getName()->String::: basic type get name
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#setName(String)->void:::For use during resolution only
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#getSize()->int::: basic type get size
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asBit()->BitType::: basic type as bit
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asInt()->IntType::: basic type as int
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asEnum()->EnumType::: basic type as enum
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asFloat()->FloatType::: basic type as float
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asDouble()->DoubleType::: basic type as double
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asPointer()->PointerType::: basic type as pointer
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asArray()->ArrayType::: basic type as array
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asRef()->RefType::: basic type as ref
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asCompound()->CompoundType::: basic type as compound
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asFunction()->FunctionType::: basic type as function
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asMemberFunction()->MemberFunctionType::: basic type as member function
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#asVoid()->VoidType::: basic type as void
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isBit()->boolean::: basic type is bit
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isInt()->boolean::: basic type is int
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isEnum()->boolean::: basic type is enum
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isFloat()->boolean::: basic type is float
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isDouble()->boolean::: basic type is double
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isPointer()->boolean::: basic type is pointer
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isArray()->boolean::: basic type is array
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isRef()->boolean::: basic type is ref
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isCompound()->boolean::: basic type is compound
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isFunction()->boolean::: basic type is function
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isMemberFunction()->boolean::: basic type is member function
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isVoid()->boolean::: basic type is void
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isConst()->boolean::: basic type is const
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isVolatile()->boolean::: basic type is volatile
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: basic type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#isLazy()->boolean::: basic type is lazy
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#iterateObject(Address, ObjectVisitor)->void::: basic type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#getCVVariant(int)->Type::: basic type get variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#toString()->String::: basic type to string
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#createCVVariant(int)->Type::: basic type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#findCVVariant(int)->Type::: basic type find variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#addCVVariant(Type)->void::: basic type add variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicType#visit(TypeVisitor)->void::: basic type visit
sun.jvm.hotspot.debugger.cdbg.basic.BasicVoidType#asVoid()->VoidType::: basic void type as void
sun.jvm.hotspot.debugger.cdbg.basic.BasicVoidType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: basic void type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.BasicVoidType#createCVVariant(int)->Type::: basic void type create variant
sun.jvm.hotspot.debugger.cdbg.basic.BasicVoidType#visit(TypeVisitor)->void::: basic void type visit
sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym#asBlock()->BlockSym::: lazy block sym as block
sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym#isLazy()->boolean::: lazy block sym is lazy
sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym#getKey()->Object::: lazy block sym get key
sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym#getParent()->BlockSym::: lazy block sym get parent
sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym#getLength()->long::: lazy block sym get length
sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym#getAddress()->Address::: lazy block sym get address
sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym#getNumLocals()->int::: lazy block sym get num locals
sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym#getLocal(int)->LocalSym::: lazy block sym get local
sun.jvm.hotspot.debugger.cdbg.basic.LazyBlockSym#resolve(BasicCDebugInfoDataBase, ResolveListener)->void::: lazy block sym resolve
sun.jvm.hotspot.debugger.cdbg.basic.LazyType#isLazy()->boolean::: lazy type is lazy
sun.jvm.hotspot.debugger.cdbg.basic.LazyType#getKey()->Object::: lazy type get key
sun.jvm.hotspot.debugger.cdbg.basic.LazyType#resolveTypes(BasicCDebugInfoDataBase, ResolveListener)->Type::: lazy type resolve types
sun.jvm.hotspot.debugger.cdbg.basic.LazyType#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void::: lazy type iterate object
sun.jvm.hotspot.debugger.cdbg.basic.LazyType#createCVVariant(int)->Type::: lazy type create variant
sun.jvm.hotspot.debugger.cdbg.basic.LazyType#visit(TypeVisitor)->void::: lazy type visit
sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener#resolveFailed(Type, LazyType, String)->void:::Indicates failure to resolve a type within another type
sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener#resolveFailed(Type, String)->void:::Indicates failure to resolve the address of a static field in a       type
sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener#resolveFailed(Sym, LazyType, String)->void:::Indicates failure to resolve reference to a type from a symbol
sun.jvm.hotspot.debugger.cdbg.basic.ResolveListener#resolveFailed(Sym, LazyBlockSym, String)->void:::Indicates failure to resolve reference from one symbol to       another (currently occurs only from BlockSyms to other BlockSyms)

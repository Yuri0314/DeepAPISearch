AbsoluteIterator#setRestartable(boolean)::: absolute iterator set restartable:::_source->setRestartable
AbsoluteIterator#setStartNode(int)::: absolute iterator set start node:::if->_source->setStartNode->resetPosition->return
AbsoluteIterator#next()::: absolute iterator next:::return->_source->next->returnNode
AbsoluteIterator#cloneIterator()::: absolute iterator clone iterator:::try->clone->super->clone->_source->cloneIterator->clone->resetPosition->return->catch->BasisLibrary->e->toString->runTimeError->return->finally
AbsoluteIterator#reset()::: absolute iterator reset:::_source->reset->return->resetPosition
AbsoluteIterator#setMark()::: absolute iterator set mark:::_source->setMark
AbsoluteIterator#gotoMark()::: absolute iterator goto mark:::_source->gotoMark
AdaptiveResultTreeImpl#getNestedDOM()::: adaptive result tree impl get nested m:::return
AdaptiveResultTreeImpl#getDocument()::: adaptive result tree impl get document:::if->return->_dom->getDocument->else->return->super->getDocument
AdaptiveResultTreeImpl#getStringValue()::: adaptive result tree impl get string value:::if->return->_dom->getStringValue->else->return->super->getStringValue
AdaptiveResultTreeImpl#getIterator()::: adaptive result tree impl get iterator:::if->return->_dom->getIterator->else->return->super->getIterator
AdaptiveResultTreeImpl#getChildren(int)::: adaptive result tree impl get children:::if->return->_dom->getChildren->else->return->super->getChildren
AdaptiveResultTreeImpl#getTypedChildren(int)::: adaptive result tree impl get typed children:::if->return->_dom->getTypedChildren->else->return->super->getTypedChildren
AdaptiveResultTreeImpl#getAxisIterator(int)::: adaptive result tree impl get axis iterator:::if->return->_dom->getAxisIterator->else->return->super->getAxisIterator
AdaptiveResultTreeImpl#getTypedAxisIterator(int, int)::: adaptive result tree impl get typed axis iterator:::if->return->_dom->getTypedAxisIterator->else->return->super->getTypedAxisIterator
AdaptiveResultTreeImpl#getNthDescendant(int, int, boolean)::: adaptive result tree impl get nth descendant:::if->return->_dom->getNthDescendant->else->return->super->getNthDescendant
AdaptiveResultTreeImpl#getNamespaceAxisIterator(int, int)::: adaptive result tree impl get namespace axis iterator:::if->return->_dom->getNamespaceAxisIterator->else->return->super->getNamespaceAxisIterator
AdaptiveResultTreeImpl#getNodeValueIterator(DTMAxisIterator, int, String, boolean)::: adaptive result tree impl get node value iterator:::if->return->_dom->getNodeValueIterator->else->return->super->getNodeValueIterator
AdaptiveResultTreeImpl#orderNodes(DTMAxisIterator, int)::: adaptive result tree impl order nodes:::if->return->_dom->orderNodes->else->return->super->orderNodes
AdaptiveResultTreeImpl#getNodeName(int)::: adaptive result tree impl get node name:::if->return->_dom->getNodeName->else->return->super->getNodeName
AdaptiveResultTreeImpl#getNodeNameX(int)::: adaptive result tree impl get node name x:::if->return->_dom->getNodeNameX->else->return->super->getNodeNameX
AdaptiveResultTreeImpl#getNamespaceName(int)::: adaptive result tree impl get namespace name:::if->return->_dom->getNamespaceName->else->return->super->getNamespaceName
AdaptiveResultTreeImpl#getExpandedTypeID(int)::: adaptive result tree impl get expanded type d:::if->return->_dom->getExpandedTypeID->else->return->super->getExpandedTypeID
AdaptiveResultTreeImpl#getNamespaceType(int)::: adaptive result tree impl get namespace type:::if->return->_dom->getNamespaceType->else->return->super->getNamespaceType
AdaptiveResultTreeImpl#getParent(int)::: adaptive result tree impl get parent:::if->return->_dom->getParent->else->return->super->getParent
AdaptiveResultTreeImpl#getAttributeNode(int, int)::: adaptive result tree impl get attribute node:::if->return->_dom->getAttributeNode->else->return->super->getAttributeNode
AdaptiveResultTreeImpl#getStringValueX(int)::: adaptive result tree impl get string value x:::if->return->_dom->getStringValueX->else->return->super->getStringValueX
AdaptiveResultTreeImpl#copy(int, SerializationHandler)::: adaptive result tree impl copy:::if->_dom->copy->else->super->copy
AdaptiveResultTreeImpl#copy(DTMAxisIterator, SerializationHandler)::: adaptive result tree impl copy:::if->_dom->copy->else->super->copy
AdaptiveResultTreeImpl#shallowCopy(int, SerializationHandler)::: adaptive result tree impl shallow copy:::if->return->_dom->shallowCopy->else->return->super->shallowCopy
AdaptiveResultTreeImpl#lessThan(int, int)::: adaptive result tree impl less than:::if->return->_dom->lessThan->else->return->super->lessThan
AdaptiveResultTreeImpl#characters(int, SerializationHandler):::Dispatch the character content of a node to an output handler:::if->_dom->characters->else->super->characters
AdaptiveResultTreeImpl#makeNode(int)::: adaptive result tree impl make node:::if->return->_dom->makeNode->else->return->super->makeNode
AdaptiveResultTreeImpl#makeNode(DTMAxisIterator)::: adaptive result tree impl make node:::if->return->_dom->makeNode->else->return->super->makeNode
AdaptiveResultTreeImpl#makeNodeList(int)::: adaptive result tree impl make node list:::if->return->_dom->makeNodeList->else->return->super->makeNodeList
AdaptiveResultTreeImpl#makeNodeList(DTMAxisIterator)::: adaptive result tree impl make node list:::if->return->_dom->makeNodeList->else->return->super->makeNodeList
AdaptiveResultTreeImpl#getLanguage(int)::: adaptive result tree impl get language:::if->return->_dom->getLanguage->else->return->super->getLanguage
AdaptiveResultTreeImpl#getSize()::: adaptive result tree impl get size:::if->return->_dom->getSize->else->return->super->getSize
AdaptiveResultTreeImpl#getDocumentURI(int)::: adaptive result tree impl get document i:::if->return->_dom->getDocumentURI->else->return
AdaptiveResultTreeImpl#setFilter(StripFilter)::: adaptive result tree impl set filter:::if->_dom->setFilter->else->super->setFilter
AdaptiveResultTreeImpl#setupMapping(String[], String[], int[], String[])::: adaptive result tree impl setup mapping:::if->_dom->setupMapping->else->super->setupMapping
AdaptiveResultTreeImpl#isElement(int)::: adaptive result tree impl is element:::if->return->_dom->isElement->else->return->super->isElement
AdaptiveResultTreeImpl#isAttribute(int)::: adaptive result tree impl is attribute:::if->return->_dom->isAttribute->else->return->super->isAttribute
AdaptiveResultTreeImpl#lookupNamespace(int, String)::: adaptive result tree impl lookup namespace:::if->return->_dom->lookupNamespace->else->return->super->lookupNamespace
AdaptiveResultTreeImpl#getNodeIdent(int):::Return the node identity from a node handle.:::if->return->_dom->getNodeIdent->else->return->super->getNodeIdent
AdaptiveResultTreeImpl#getNodeHandle(int):::Return the node handle from a node identity.:::if->return->_dom->getNodeHandle->else->return->super->getNodeHandle
AdaptiveResultTreeImpl#getResultTreeFrag(int, int)::: adaptive result tree impl get result tree frag:::if->return->_dom->getResultTreeFrag->else->return->super->getResultTreeFrag
AdaptiveResultTreeImpl#getOutputDomBuilder()::: adaptive result tree impl get output dom builder:::return
AdaptiveResultTreeImpl#getNSType(int)::: adaptive result tree impl get type:::if->return->_dom->getNSType->else->return->super->getNSType
AdaptiveResultTreeImpl#getUnparsedEntityURI(String)::: adaptive result tree impl get unparsed entity i:::if->return->_dom->getUnparsedEntityURI->else->return->super->getUnparsedEntityURI
AdaptiveResultTreeImpl#getElementsWithIDs()::: adaptive result tree impl get elements with ds:::if->return->_dom->getElementsWithIDs->else->return->super->getElementsWithIDs
AdaptiveResultTreeImpl#maybeEmitStartElement()::: adaptive result tree impl maybe emit start element:::if->index->if->_openElementName->indexOf->_dom->startElement->else->uri->_dom->_openElementName->substring->getNamespaceURI->_dom->_openElementName->substring->startElement
AdaptiveResultTreeImpl#prepareNewDOM()::: adaptive result tree impl prepare new m:::_dtmManager->getDTM->_dom->startDocument->for->i
AdaptiveResultTreeImpl#startDocument()::: adaptive result tree impl start document:::
AdaptiveResultTreeImpl#endDocument()::: adaptive result tree impl end document:::if->_dom->endDocument->else->super->endDocument
AdaptiveResultTreeImpl#characters(String)::: adaptive result tree impl characters:::if->str->toCharArray->str->length->characters->else->super->characters
AdaptiveResultTreeImpl#characters(char[], int, int)::: adaptive result tree impl characters:::if->maybeEmitStartElement->_dom->characters->else->super->characters
AdaptiveResultTreeImpl#setEscaping(boolean)::: adaptive result tree impl set escaping:::if->return->_dom->setEscaping->else->return->super->setEscaping
AdaptiveResultTreeImpl#startElement(String)::: adaptive result tree impl start element:::if->prepareNewDOM->maybeEmitStartElement->_attributes->clear
AdaptiveResultTreeImpl#startElement(String, String, String)::: adaptive result tree impl start element:::startElement
AdaptiveResultTreeImpl#startElement(String, String, String, Attributes)::: adaptive result tree impl start element:::startElement
AdaptiveResultTreeImpl#endElement(String)::: adaptive result tree impl end element:::maybeEmitStartElement->_dom->endElement
AdaptiveResultTreeImpl#endElement(String, String, String)::: adaptive result tree impl end element:::endElement
AdaptiveResultTreeImpl#addAttribute(String, String)::: adaptive result tree impl add attribute:::colonpos->qName->indexOf->uri->localName->if->prefix->qName->substring->qName->substring->_dom->getNamespaceURI->addAttribute
AdaptiveResultTreeImpl#addUniqueAttribute(String, String, int)::: adaptive result tree impl add unique attribute:::addAttribute
AdaptiveResultTreeImpl#addAttribute(String, String, String, String, String)::: adaptive result tree impl add attribute:::if->_attributes->addAttribute->else->BasisLibrary->runTimeError
AdaptiveResultTreeImpl#namespaceAfterStartElement(String, String)::: adaptive result tree impl namespace after start element:::if->prepareNewDOM->_dom->startPrefixMapping
AdaptiveResultTreeImpl#comment(String)::: adaptive result tree impl comment:::if->prepareNewDOM->maybeEmitStartElement->chars->comment->toCharArray->_dom->comment
AdaptiveResultTreeImpl#comment(char[], int, int)::: adaptive result tree impl comment:::if->prepareNewDOM->maybeEmitStartElement->_dom->comment
AdaptiveResultTreeImpl#processingInstruction(String, String)::: adaptive result tree impl processing instruction:::if->prepareNewDOM->maybeEmitStartElement->_dom->processingInstruction
AdaptiveResultTreeImpl#setFeature(String, boolean)::: adaptive result tree impl set feature:::if->_dom->setFeature
AdaptiveResultTreeImpl#setProperty(String, Object)::: adaptive result tree impl set property:::if->_dom->setProperty
AdaptiveResultTreeImpl#getAxisTraverser(int)::: adaptive result tree impl get axis traverser:::if->return->_dom->getAxisTraverser->else->return->super->getAxisTraverser
AdaptiveResultTreeImpl#hasChildNodes(int)::: adaptive result tree impl has child nodes:::if->return->_dom->hasChildNodes->else->return->super->hasChildNodes
AdaptiveResultTreeImpl#getFirstChild(int)::: adaptive result tree impl get first child:::if->return->_dom->getFirstChild->else->return->super->getFirstChild
AdaptiveResultTreeImpl#getLastChild(int)::: adaptive result tree impl get last child:::if->return->_dom->getLastChild->else->return->super->getLastChild
AdaptiveResultTreeImpl#getAttributeNode(int, String, String)::: adaptive result tree impl get attribute node:::if->return->_dom->getAttributeNode->else->return->super->getAttributeNode
AdaptiveResultTreeImpl#getFirstAttribute(int)::: adaptive result tree impl get first attribute:::if->return->_dom->getFirstAttribute->else->return->super->getFirstAttribute
AdaptiveResultTreeImpl#getFirstNamespaceNode(int, boolean)::: adaptive result tree impl get first namespace node:::if->return->_dom->getFirstNamespaceNode->else->return->super->getFirstNamespaceNode
AdaptiveResultTreeImpl#getNextSibling(int)::: adaptive result tree impl get next sibling:::if->return->_dom->getNextSibling->else->return->super->getNextSibling
AdaptiveResultTreeImpl#getPreviousSibling(int)::: adaptive result tree impl get previous sibling:::if->return->_dom->getPreviousSibling->else->return->super->getPreviousSibling
AdaptiveResultTreeImpl#getNextAttribute(int)::: adaptive result tree impl get next attribute:::if->return->_dom->getNextAttribute->else->return->super->getNextAttribute
AdaptiveResultTreeImpl#getNextNamespaceNode(int, int, boolean)::: adaptive result tree impl get next namespace node:::if->return->_dom->getNextNamespaceNode->else->return->super->getNextNamespaceNode
AdaptiveResultTreeImpl#getOwnerDocument(int)::: adaptive result tree impl get owner document:::if->return->_dom->getOwnerDocument->else->return->super->getOwnerDocument
AdaptiveResultTreeImpl#getDocumentRoot(int)::: adaptive result tree impl get document root:::if->return->_dom->getDocumentRoot->else->return->super->getDocumentRoot
AdaptiveResultTreeImpl#getStringValue(int)::: adaptive result tree impl get string value:::if->return->_dom->getStringValue->else->return->super->getStringValue
AdaptiveResultTreeImpl#getStringValueChunkCount(int)::: adaptive result tree impl get string value chunk count:::if->return->_dom->getStringValueChunkCount->else->return->super->getStringValueChunkCount
AdaptiveResultTreeImpl#getStringValueChunk(int, int, int[])::: adaptive result tree impl get string value chunk:::if->return->_dom->getStringValueChunk->else->return->super->getStringValueChunk
AdaptiveResultTreeImpl#getExpandedTypeID(String, String, int)::: adaptive result tree impl get expanded type d:::if->return->_dom->getExpandedTypeID->else->return->super->getExpandedTypeID
AdaptiveResultTreeImpl#getLocalNameFromExpandedNameID(int)::: adaptive result tree impl get local name from expanded name d:::if->return->_dom->getLocalNameFromExpandedNameID->else->return->super->getLocalNameFromExpandedNameID
AdaptiveResultTreeImpl#getNamespaceFromExpandedNameID(int)::: adaptive result tree impl get namespace from expanded name d:::if->return->_dom->getNamespaceFromExpandedNameID->else->return->super->getNamespaceFromExpandedNameID
AdaptiveResultTreeImpl#getLocalName(int)::: adaptive result tree impl get local name:::if->return->_dom->getLocalName->else->return->super->getLocalName
AdaptiveResultTreeImpl#getPrefix(int)::: adaptive result tree impl get prefix:::if->return->_dom->getPrefix->else->return->super->getPrefix
AdaptiveResultTreeImpl#getNamespaceURI(int)::: adaptive result tree impl get namespace i:::if->return->_dom->getNamespaceURI->else->return->super->getNamespaceURI
AdaptiveResultTreeImpl#getNodeValue(int)::: adaptive result tree impl get node value:::if->return->_dom->getNodeValue->else->return->super->getNodeValue
AdaptiveResultTreeImpl#getNodeType(int)::: adaptive result tree impl get node type:::if->return->_dom->getNodeType->else->return->super->getNodeType
AdaptiveResultTreeImpl#getLevel(int)::: adaptive result tree impl get level:::if->return->_dom->getLevel->else->return->super->getLevel
AdaptiveResultTreeImpl#isSupported(String, String)::: adaptive result tree impl is supported:::if->return->_dom->isSupported->else->return->super->isSupported
AdaptiveResultTreeImpl#getDocumentBaseURI()::: adaptive result tree impl get document base i:::if->return->_dom->getDocumentBaseURI->else->return->super->getDocumentBaseURI
AdaptiveResultTreeImpl#setDocumentBaseURI(String)::: adaptive result tree impl set document base i:::if->_dom->setDocumentBaseURI->else->super->setDocumentBaseURI
AdaptiveResultTreeImpl#getDocumentSystemIdentifier(int)::: adaptive result tree impl get document system identifier:::if->return->_dom->getDocumentSystemIdentifier->else->return->super->getDocumentSystemIdentifier
AdaptiveResultTreeImpl#getDocumentEncoding(int)::: adaptive result tree impl get document encoding:::if->return->_dom->getDocumentEncoding->else->return->super->getDocumentEncoding
AdaptiveResultTreeImpl#getDocumentStandalone(int)::: adaptive result tree impl get document standalone:::if->return->_dom->getDocumentStandalone->else->return->super->getDocumentStandalone
AdaptiveResultTreeImpl#getDocumentVersion(int)::: adaptive result tree impl get document version:::if->return->_dom->getDocumentVersion->else->return->super->getDocumentVersion
AdaptiveResultTreeImpl#getDocumentAllDeclarationsProcessed()::: adaptive result tree impl get document all declarations processed:::if->return->_dom->getDocumentAllDeclarationsProcessed->else->return->super->getDocumentAllDeclarationsProcessed
AdaptiveResultTreeImpl#getDocumentTypeDeclarationSystemIdentifier()::: adaptive result tree impl get document type declaration system identifier:::if->return->_dom->getDocumentTypeDeclarationSystemIdentifier->else->return->super->getDocumentTypeDeclarationSystemIdentifier
AdaptiveResultTreeImpl#getDocumentTypeDeclarationPublicIdentifier()::: adaptive result tree impl get document type declaration public identifier:::if->return->_dom->getDocumentTypeDeclarationPublicIdentifier->else->return->super->getDocumentTypeDeclarationPublicIdentifier
AdaptiveResultTreeImpl#getElementById(String)::: adaptive result tree impl get element by id:::if->return->_dom->getElementById->else->return->super->getElementById
AdaptiveResultTreeImpl#supportsPreStripping()::: adaptive result tree impl supports pre stripping:::if->return->_dom->supportsPreStripping->else->return->super->supportsPreStripping
AdaptiveResultTreeImpl#isNodeAfter(int, int)::: adaptive result tree impl is node after:::if->return->_dom->isNodeAfter->else->return->super->isNodeAfter
AdaptiveResultTreeImpl#isCharacterElementContentWhitespace(int)::: adaptive result tree impl is character element content whitespace:::if->return->_dom->isCharacterElementContentWhitespace->else->return->super->isCharacterElementContentWhitespace
AdaptiveResultTreeImpl#isDocumentAllDeclarationsProcessed(int)::: adaptive result tree impl is document all declarations processed:::if->return->_dom->isDocumentAllDeclarationsProcessed->else->return->super->isDocumentAllDeclarationsProcessed
AdaptiveResultTreeImpl#isAttributeSpecified(int)::: adaptive result tree impl is attribute specified:::if->return->_dom->isAttributeSpecified->else->return->super->isAttributeSpecified
AdaptiveResultTreeImpl#dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean)::: adaptive result tree impl dispatch characters events:::if->_dom->dispatchCharactersEvents->else->super->dispatchCharactersEvents
AdaptiveResultTreeImpl#dispatchToEvents(int, org.xml.sax.ContentHandler)::: adaptive result tree impl dispatch to events:::if->_dom->dispatchToEvents->else->super->dispatchToEvents
AdaptiveResultTreeImpl#getNode(int)::: adaptive result tree impl get node:::if->return->_dom->getNode->else->return->super->getNode
AdaptiveResultTreeImpl#needsTwoThreads()::: adaptive result tree impl needs two threads:::if->return->_dom->needsTwoThreads->else->return->super->needsTwoThreads
AdaptiveResultTreeImpl#getContentHandler()::: adaptive result tree impl get content handler:::if->return->_dom->getContentHandler->else->return->super->getContentHandler
AdaptiveResultTreeImpl#getLexicalHandler()::: adaptive result tree impl get lexical handler:::if->return->_dom->getLexicalHandler->else->return->super->getLexicalHandler
AdaptiveResultTreeImpl#getEntityResolver()::: adaptive result tree impl get entity resolver:::if->return->_dom->getEntityResolver->else->return->super->getEntityResolver
AdaptiveResultTreeImpl#getDTDHandler()::: adaptive result tree impl get handler:::if->return->_dom->getDTDHandler->else->return->super->getDTDHandler
AdaptiveResultTreeImpl#getErrorHandler()::: adaptive result tree impl get error handler:::if->return->_dom->getErrorHandler->else->return->super->getErrorHandler
AdaptiveResultTreeImpl#getDeclHandler()::: adaptive result tree impl get decl handler:::if->return->_dom->getDeclHandler->else->return->super->getDeclHandler
AdaptiveResultTreeImpl#appendChild(int, boolean, boolean)::: adaptive result tree impl append child:::if->_dom->appendChild->else->super->appendChild
AdaptiveResultTreeImpl#appendTextChild(String)::: adaptive result tree impl append text child:::if->_dom->appendTextChild->else->super->appendTextChild
AdaptiveResultTreeImpl#getSourceLocatorFor(int)::: adaptive result tree impl get source locator for:::if->return->_dom->getSourceLocatorFor->else->return->super->getSourceLocatorFor
AdaptiveResultTreeImpl#documentRegistration()::: adaptive result tree impl document registration:::if->_dom->documentRegistration->else->super->documentRegistration
AdaptiveResultTreeImpl#documentRelease()::: adaptive result tree impl document release:::if->_dom->documentRelease->else->super->documentRelease
AdaptiveResultTreeImpl#release()::: adaptive result tree impl release:::if->_dom->release->super->release
AnyNodeCounter#setStartNode(int)::: any node counter set start node:::_document->getExpandedTypeID->return
AnyNodeCounter#getCounter()::: any node counter get counter:::result->if->if->return->else->if->Double->isNaN->return->else->if->Double->isInfinite->return->else->if->Double->isInfinite->return->else->return->formatNumbers->else->next->root->_document->getDocument->while->matchesFrom->if->matchesCount->return->formatNumbers
AnyNodeCounter#getDefaultNodeCounter(Translet, DOM, DTMAxisIterator)::: any node counter get default node counter:::return->new->DefaultAnyNodeCounter
AnyNodeCounter.DefaultAnyNodeCounter#getCounter()::: default any node counter get counter:::result->if->if->return->else->if->Double->isNaN->return->else->if->Double->isInfinite->return->else->if->Double->isInfinite->return->else->else->next->ntype->_document->getExpandedTypeID->root->_document->getDocument->while->if->_document->getExpandedTypeID->if->break->else->return->formatNumbers
ArrayNodeListIterator#next()::: array node list iterator next:::return
ArrayNodeListIterator#reset()::: array node list iterator reset:::return
ArrayNodeListIterator#getLast()::: array node list iterator get last:::return
ArrayNodeListIterator#getPosition()::: array node list iterator get position:::return
ArrayNodeListIterator#setMark()::: array node list iterator set mark:::
ArrayNodeListIterator#gotoMark()::: array node list iterator goto mark:::
ArrayNodeListIterator#setStartNode(int)::: array node list iterator set start node:::if->return
ArrayNodeListIterator#getStartNode()::: array node list iterator get start node:::return
ArrayNodeListIterator#isReverse()::: array node list iterator is reverse:::return
ArrayNodeListIterator#cloneIterator()::: array node list iterator clone iterator:::return->new->ArrayNodeListIterator
ArrayNodeListIterator#setRestartable(boolean)::: array node list iterator set restartable:::
ArrayNodeListIterator#getNodeByPosition(int)::: array node list iterator get node by position:::return
BitArray#setMask(int):::Set the mask for this bit array:::
BitArray#getMask():::See setMask():::return
BitArray#size():::Returns the size of this bit array (in bits).:::return
BitArray#getBit(int):::Returns true if the given bit is set:::if->if->throw->new->Error->return
BitArray#getNextBit(int):::Returns the next set bit from a given position:::for->i->return
BitArray#getBitNumber(int)::: bit array get bit number:::if->return->if->for->return
BitArray#data():::Returns the integer array in which the bit array is contained:::return
BitArray#setBit(int):::Sets a given bit:::if->if->throw->new->Error->if->return->i->if->if
BitArray#merge(BitArray):::Merge two bit arrays:::if->else->if->start->stop->if->if->for->i->else->if->for->i->return
BitArray#resize(int):::Resizes the bit array - try to avoid using this method!!!:::if->newBits->new->intArr->System->arraycopy
BitArray#cloneArray()::: bit array clone array:::return->new->BitArray
BitArray#writeExternal(ObjectOutput)::: bit array write external:::out->writeInt->out->writeInt->out->writeObject->out->flush
BitArray#readExternal(ObjectInput):::Read the whole tree from a file (serialized):::in->readInt->in->readInt->in->readObject
CachedNodeListIterator#setRestartable(boolean)::: cached node list iterator set restartable:::
CachedNodeListIterator#setStartNode(int)::: cached node list iterator set start node:::if->_source->setStartNode->resetPosition->return
CachedNodeListIterator#next()::: cached node list iterator next:::return->getNode
CachedNodeListIterator#getPosition()::: cached node list iterator get position:::return
CachedNodeListIterator#getNodeByPosition(int)::: cached node list iterator get node by position:::return->getNode
CachedNodeListIterator#getNode(int)::: cached node list iterator get node:::if->return->_nodes->at->else->if->node->_source->next->if->_nodes->add->else->return->else->return
CachedNodeListIterator#cloneIterator()::: cached node list iterator clone iterator:::clone->new->ClonedNodeListIterator->return
CachedNodeListIterator#reset()::: cached node list iterator reset:::return
CachedNodeListIterator#setMark()::: cached node list iterator set mark:::_source->setMark
CachedNodeListIterator#gotoMark()::: cached node list iterator goto mark:::_source->gotoMark
ClonedNodeListIterator#setRestartable(boolean)::: cloned node list iterator set restartable:::
ClonedNodeListIterator#setStartNode(int)::: cloned node list iterator set start node:::return
ClonedNodeListIterator#next()::: cloned node list iterator next:::return->_source->getNode
ClonedNodeListIterator#getPosition()::: cloned node list iterator get position:::return
ClonedNodeListIterator#getNodeByPosition(int)::: cloned node list iterator get node by position:::return->_source->getNode
ClonedNodeListIterator#cloneIterator()::: cloned node list iterator clone iterator:::return->_source->cloneIterator
ClonedNodeListIterator#reset()::: cloned node list iterator reset:::return
ClonedNodeListIterator#setMark()::: cloned node list iterator set mark:::_source->setMark
ClonedNodeListIterator#gotoMark()::: cloned node list iterator goto mark:::_source->gotoMark
CollatorFactoryBase#getCollator(String, String)::: collator factory base get collator:::return->Collator->new->Locale->getInstance
CollatorFactoryBase#getCollator(Locale)::: collator factory base get collator:::if->return->else->return->Collator->getInstance
CurrentNodeListFilter#test(int, int, int, int, AbstractTranslet, DTMAxisIterator)::: current node list filter test:::
CurrentNodeListIterator#forceNaturalOrder()::: current node list iterator force natural order:::return
CurrentNodeListIterator#setRestartable(boolean)::: current node list iterator set restartable:::_source->setRestartable
CurrentNodeListIterator#isReverse()::: current node list iterator is reverse:::return
CurrentNodeListIterator#cloneIterator()::: current node list iterator clone iterator:::try->clone->super->clone->_nodes->clone->_source->cloneIterator->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
CurrentNodeListIterator#reset()::: current node list iterator reset:::return->resetPosition
CurrentNodeListIterator#next()::: current node list iterator next:::last->_nodes->cardinality->currentNode->translet->for->index->return
CurrentNodeListIterator#setStartNode(int)::: current node list iterator set start node:::if->_source->setStartNode->_nodes->clear->while->_source->next->_nodes->add->resetPosition->return
CurrentNodeListIterator#getLast()::: current node list iterator get last:::if->computePositionOfLast->return
CurrentNodeListIterator#setMark()::: current node list iterator set mark:::
CurrentNodeListIterator#gotoMark()::: current node list iterator goto mark:::
CurrentNodeListIterator#computePositionOfLast()::: current node list iterator compute position of last:::last->_nodes->cardinality->currNode->translet->lastPosition->for->index->return
DocumentCache.CachedDocument#loadDocument(String):::Loads the document and updates build-time (latency) statistics:::try->stamp->System->currentTimeMillis->_dtmManager->new->InputSource->new->SAXSource->getDTM->_dom->setDocumentURI->thisTime->System->currentTimeMillis->if->else->catch->finally
DocumentCache.CachedDocument#getDocument()::: cached document get document:::return
DocumentCache.CachedDocument#getFirstReferenced()::: cached document get first referenced:::return
DocumentCache.CachedDocument#getLastReferenced()::: cached document get last referenced:::return
DocumentCache.CachedDocument#getAccessCount()::: cached document get access count:::return
DocumentCache.CachedDocument#incAccessCount()::: cached document inc access count:::
DocumentCache.CachedDocument#getLastModified()::: cached document get last modified:::return
DocumentCache.CachedDocument#setLastModified(long)::: cached document set last modified:::
DocumentCache.CachedDocument#getLatency()::: cached document get latency:::return
DocumentCache.CachedDocument#getLastChecked()::: cached document get last checked:::return
DocumentCache.CachedDocument#setLastChecked(long)::: cached document set last checked:::
DocumentCache.CachedDocument#getEstimatedSize()::: cached document get estimated size:::if->return->_dom->getSize->else->return
DocumentCache#getLastModified(String):::Returns the time-stamp for a document's last update:::try->url->new->URL->connection->url->openConnection->timestamp->connection->getLastModified->if->if->url->getProtocol->equals->localfile->Paths->url->toURI->get->toFile->localfile->lastModified->return->catch->return->System->currentTimeMillis->finally
DocumentCache#lookupDocument(String)::: document cache lookup document:::return->_references->get
DocumentCache#insertDocument(String, CachedDocument)::: document cache insert document:::if->else->_references->remove->if->_references->put
DocumentCache#replaceDocument(String, CachedDocument)::: document cache replace document:::if->insertDocument->else->_references->put
DocumentCache#retrieveDocument(String, String, Translet):::Returns a document either by finding it in the cache or downloading it and putting it in the cache.:::doc->uri->if->baseURI->equals->try->SystemIDResolver->getAbsoluteURI->catch->finally->if->lookupDocument->new->CachedDocument->if->return->doc->getLastModified->setLastModified->insertDocument->else->now->System->currentTimeMillis->chk->doc->getLastChecked->doc->setLastChecked->if->doc->setLastChecked->last->getLastModified->if->doc->getLastModified->new->CachedDocument->if->return->doc->getLastModified->setLastModified->replaceDocument->dom->doc->getDocument->if->return->doc->incAccessCount->translet->translet->prepassDocument->return->doc->getDocument
DocumentCache#getStatistics(PrintWriter):::Outputs the cache statistics:::out->println->for->i->out->println
DOMAdapter#setupMapping(String[], String[], int[], String[])::: adapter setup mapping:::
DOMAdapter#getNamesArray()::: adapter get names array:::return
DOMAdapter#getUrisArray()::: adapter get uris array:::return
DOMAdapter#getTypesArray()::: adapter get types array:::return
DOMAdapter#getNamespaceArray()::: adapter get namespace array:::return
DOMAdapter#getDOMImpl()::: adapter get impl:::return
DOMAdapter#getMapping()::: adapter get mapping:::if->if->_enhancedDOM->getMapping->return
DOMAdapter#getReverse()::: adapter get reverse:::if->if->_enhancedDOM->getReverseMapping->return
DOMAdapter#getNSMapping()::: adapter get mapping:::if->if->_enhancedDOM->getNamespaceMapping->return
DOMAdapter#getNSReverse()::: adapter get reverse:::if->if->_enhancedDOM->getReverseNamespaceMapping->return
DOMAdapter#getIterator():::Returns singleton iterator containg the document root:::return->_dom->getIterator
DOMAdapter#getStringValue()::: adapter get string value:::return->_dom->getStringValue
DOMAdapter#getChildren(int)::: adapter get children:::if->return->_enhancedDOM->getChildren->else->iterator->_dom->getChildren->return->iterator->setStartNode
DOMAdapter#setFilter(StripFilter)::: adapter set filter:::
DOMAdapter#getTypedChildren(int)::: adapter get typed children:::reverse->getReverse->if->return->_enhancedDOM->getTypedChildren->else->return->_dom->getTypedChildren
DOMAdapter#getNamespaceAxisIterator(int, int)::: adapter get namespace axis iterator:::return->_dom->getNSReverse->getNamespaceAxisIterator
DOMAdapter#getAxisIterator(int)::: adapter get axis iterator:::if->return->_enhancedDOM->getAxisIterator->else->return->_dom->getAxisIterator
DOMAdapter#getTypedAxisIterator(int, int)::: adapter get typed axis iterator:::reverse->getReverse->if->return->_enhancedDOM->getTypedAxisIterator->else->return->_dom->getTypedAxisIterator
DOMAdapter#getMultiDOMMask()::: adapter get multi mask:::return
DOMAdapter#setMultiDOMMask(int)::: adapter set multi mask:::
DOMAdapter#getNthDescendant(int, int, boolean)::: adapter get nth descendant:::return->_dom->getReverse->getNthDescendant
DOMAdapter#getNodeValueIterator(DTMAxisIterator, int, String, boolean)::: adapter get node value iterator:::return->_dom->getNodeValueIterator
DOMAdapter#orderNodes(DTMAxisIterator, int)::: adapter order nodes:::return->_dom->orderNodes
DOMAdapter#getExpandedTypeID(int)::: adapter get expanded type d:::mapping->getMapping->type->if->_enhancedDOM->getExpandedTypeID2->else->if->_dom->getExpandedTypeID->else->_dom->getExpandedTypeID->return
DOMAdapter#getNamespaceType(int)::: adapter get namespace type:::return->getNSMapping->_dom->getNSType
DOMAdapter#getNSType(int)::: adapter get type:::return->_dom->getNSType
DOMAdapter#getParent(int)::: adapter get parent:::return->_dom->getParent
DOMAdapter#getAttributeNode(int, int)::: adapter get attribute node:::return->_dom->getReverse->getAttributeNode
DOMAdapter#getNodeName(int)::: adapter get node name:::if->return->return->_dom->getNodeName
DOMAdapter#getNodeNameX(int)::: adapter get node name x:::if->return->return->_dom->getNodeNameX
DOMAdapter#getNamespaceName(int)::: adapter get namespace name:::if->return->return->_dom->getNamespaceName
DOMAdapter#getStringValueX(int)::: adapter get string value x:::if->return->_enhancedDOM->getStringValueX->else->if->return->return->_dom->getStringValueX
DOMAdapter#copy(int, SerializationHandler)::: adapter copy:::_dom->copy
DOMAdapter#copy(DTMAxisIterator, SerializationHandler)::: adapter copy:::_dom->copy
DOMAdapter#shallowCopy(int, SerializationHandler)::: adapter shallow copy:::if->return->_enhancedDOM->shallowCopy->else->return->_dom->shallowCopy
DOMAdapter#lessThan(int, int)::: adapter less than:::return->_dom->lessThan
DOMAdapter#characters(int, SerializationHandler)::: adapter characters:::if->_enhancedDOM->characters->else->_dom->characters
DOMAdapter#makeNode(int)::: adapter make node:::return->_dom->makeNode
DOMAdapter#makeNode(DTMAxisIterator)::: adapter make node:::return->_dom->makeNode
DOMAdapter#makeNodeList(int)::: adapter make node list:::return->_dom->makeNodeList
DOMAdapter#makeNodeList(DTMAxisIterator)::: adapter make node list:::return->_dom->makeNodeList
DOMAdapter#getLanguage(int)::: adapter get language:::return->_dom->getLanguage
DOMAdapter#getSize()::: adapter get size:::return->_dom->getSize
DOMAdapter#setDocumentURI(String)::: adapter set document i:::if->_enhancedDOM->setDocumentURI
DOMAdapter#getDocumentURI()::: adapter get document i:::if->return->_enhancedDOM->getDocumentURI->else->return
DOMAdapter#getDocumentURI(int)::: adapter get document i:::return->_dom->getDocumentURI
DOMAdapter#getDocument()::: adapter get document:::return->_dom->getDocument
DOMAdapter#isElement(int)::: adapter is element:::return->_dom->isElement
DOMAdapter#isAttribute(int)::: adapter is attribute:::return->_dom->isAttribute
DOMAdapter#getNodeIdent(int)::: adapter get node ident:::return->_dom->getNodeIdent
DOMAdapter#getNodeHandle(int)::: adapter get node handle:::return->_dom->getNodeHandle
DOMAdapter#getResultTreeFrag(int, int):::Return a instance of a DOM class to be used as an RTF:::if->return->_enhancedDOM->getResultTreeFrag->else->return->_dom->getResultTreeFrag
DOMAdapter#getResultTreeFrag(int, int, boolean):::Return a instance of a DOM class to be used as an RTF:::if->return->_enhancedDOM->getResultTreeFrag->else->return->_dom->getResultTreeFrag
DOMAdapter#getOutputDomBuilder():::Returns a SerializationHandler class wrapped in a SAX adapter.:::return->_dom->getOutputDomBuilder
DOMAdapter#lookupNamespace(int, String)::: adapter lookup namespace:::return->_dom->lookupNamespace
DOMAdapter#getUnparsedEntityURI(String)::: adapter get unparsed entity i:::return->_dom->getUnparsedEntityURI
DOMAdapter#getElementsWithIDs()::: adapter get elements with ds:::return->_dom->getElementsWithIDs
DOMAdapter#release()::: adapter release:::_dom->release
DOMWSFilter#getShouldStripSpace(int, DTM):::Test whether whitespace-only text nodes are visible in the logical view of DTM:::if->dom->type->if->mappableDOM->mapping->if->else->m_mappings->get->if->mappableDOM->m_translet->getNamesArray->m_translet->getUrisArray->m_translet->getTypesArray->getMapping->m_mappings->put->expType->mappableDOM->getExpandedTypeID->if->else->else->return->if->m_filter->stripSpace->return->else->return->else->return
DupFilterIterator#setStartNode(int):::Set the start node for this iterator:::if->sourceIsKeyIndex->if->return->if->_source->setStartNode->_nodes->clear->while->_source->next->_nodes->add->if->_nodes->sort->_nodes->cardinality->resetPosition->return
DupFilterIterator#next()::: dup filter iterator next:::while->next->_nodes->at->if->return->returnNode->return
DupFilterIterator#cloneIterator()::: dup filter iterator clone iterator:::try->clone->super->clone->_nodes->clone->_source->cloneIterator->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
DupFilterIterator#setRestartable(boolean)::: dup filter iterator set restartable:::_source->setRestartable
DupFilterIterator#setMark()::: dup filter iterator set mark:::
DupFilterIterator#gotoMark()::: dup filter iterator goto mark:::
DupFilterIterator#reset()::: dup filter iterator reset:::return->resetPosition
EmptyFilter#test(int)::: empty filter test:::return
Filter#test(int)::: filter test:::
FilteredStepIterator#next()::: filtered step iterator next:::node->while->super->next->if->_filter->test->return->returnNode->return
FilterIterator#isReverse()::: filter iterator is reverse:::return
FilterIterator#setRestartable(boolean)::: filter iterator set restartable:::_source->setRestartable
FilterIterator#cloneIterator()::: filter iterator clone iterator:::try->clone->super->clone->_source->cloneIterator->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
FilterIterator#reset()::: filter iterator reset:::_source->reset->return->resetPosition
FilterIterator#next()::: filter iterator next:::node->while->_source->next->if->_filter->acceptNode->return->returnNode->return
FilterIterator#setStartNode(int)::: filter iterator set start node:::if->_source->setStartNode->return->resetPosition->return
FilterIterator#setMark()::: filter iterator set mark:::_source->setMark
FilterIterator#gotoMark()::: filter iterator goto mark:::_source->gotoMark
ForwardPositionIterator#cloneIterator()::: forward position iterator clone iterator:::try->clone->super->clone->_source->cloneIterator->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
ForwardPositionIterator#next()::: forward position iterator next:::return->_source->next->returnNode
ForwardPositionIterator#setStartNode(int)::: forward position iterator set start node:::_source->setStartNode->return
ForwardPositionIterator#reset()::: forward position iterator reset:::_source->reset->return->resetPosition
ForwardPositionIterator#setMark()::: forward position iterator set mark:::_source->setMark
ForwardPositionIterator#gotoMark()::: forward position iterator goto mark:::_source->gotoMark
KeyIndex#setRestartable(boolean)::: key index set restartable:::
KeyIndex#add(String, int, int):::Adds a node to the node list for a given value:::if->new->HashMap<>->_rootToIndexMap->put->nodes->_index->get->if->new->IntegerArray->_index->put->nodes->add->else->if->nodes->nodes->cardinality->at->nodes->add
KeyIndex#merge(KeyIndex):::Merge the current value's nodeset set by lookupKey() with _nodes.:::if->return->if->if->clone->else->_nodes->merge
KeyIndex#lookupId(Object):::This method must be called by the code generated by the id() function prior to returning the node iterator:::values->new->StringTokenizer->while->values->hasMoreElements->token->values->nextElement->nodes->_index->get->if->_enhancedDOM->hasDOMSource->getDOMNodeById->if->continue->if->nodes->clone->else->_nodes->merge
KeyIndex#getDOMNodeById(String):::Return an IntegerArray for the DOM Node which has the given id.:::nodes->if->ident->_enhancedDOM->getElementById->if->root->_enhancedDOM->getDocument->index->_rootToIndexMap->get->if->new->HashMap<>->_rootToIndexMap->put->else->index->get->if->new->IntegerArray->index->put->nodes->_enhancedDOM->getNodeHandle->add->return
KeyIndex#lookupKey(Object):::This method must be called by the code generated by the key() function prior to returning the node iterator. Use of an instance of this class as a DTMAxisIterator is deprecated.:::nodes->_index->get->nodes->clone
KeyIndex#next():::Callers should not call next() after it returns END. Use of an instance of this class as a DTMAxisIterator is deprecated.:::if->return->return->_nodes->cardinality->_dom->_nodes->at->getNodeHandle
KeyIndex#containsID(int, Object):::Given a context node and the argument to the XPath id function, checks whether the context node is in the set of nodes that results from that reference to the id function:::string->rootHandle->_dom->getAxisIterator->setStartNode->next->index->_rootToIndexMap->get->values->new->StringTokenizer->while->values->hasMoreElements->token->values->nextElement->nodes->if->index->get->if->_enhancedDOM->hasDOMSource->getDOMNodeById->if->nodes->indexOf->return->return
KeyIndex#containsKey(int, Object):::Given a context node and the second argument to the XSLT key function, checks whether the context node is in the set of nodes that results from that reference to the key function:::rootHandle->_dom->getAxisIterator->setStartNode->next->index->_rootToIndexMap->get->if->nodes->index->get->return->nodes->indexOf->return
KeyIndex#reset():::Resets the iterator to the last start node. Use of an instance of this class as a DTMAxisIterator is deprecated.:::return
KeyIndex#getLast():::Returns the number of elements in this iterator. Use of an instance of this class as a DTMAxisIterator is deprecated.:::return->_nodes->cardinality
KeyIndex#getPosition():::Returns the position of the current node in the set. Use of an instance of this class as a DTMAxisIterator is deprecated.:::return
KeyIndex#setMark():::Remembers the current node for the next call to gotoMark(). Use of an instance of this class as a DTMAxisIterator is deprecated.:::
KeyIndex#gotoMark():::Restores the current node remembered by setMark(). Use of an instance of this class as a DTMAxisIterator is deprecated.:::
KeyIndex#setStartNode(int):::Set start to END should 'close' the iterator, i.e:::if->else->if->return
KeyIndex#getStartNode():::Get start to END should 'close' the iterator, i.e:::return
KeyIndex#isReverse():::True if this iterator has a reversed axis. Use of an instance of this class as a DTMAxisIterator is deprecated.:::return
KeyIndex#cloneIterator():::Returns a deep copy of this iterator. Use of an instance of this class as a DTMAxisIterator is deprecated.:::other->new->KeyIndex->return
KeyIndex#setDom(DOM, int)::: key index set dom:::if->getDTM->if->else->if->idom->getDOMImpl->if
KeyIndex#getKeyIndexIterator(Object, boolean):::Create a KeyIndexIterator that iterates over the nodes that result from a reference to the XSLT key function or XPath id function.:::if->return->getKeyIndexIterator->else->return->BasisLibrary->stringF->getKeyIndexIterator
KeyIndex#getKeyIndexIterator(String, boolean):::Create a KeyIndexIterator that iterates over the nodes that result from a reference to the XSLT key function or XPath id function.:::return->new->KeyIndexIterator
KeyIndex#getKeyIndexIterator(DTMAxisIterator, boolean):::Create a KeyIndexIterator that iterates over the nodes that result from a reference to the XSLT key function or XPath id function.:::return->new->KeyIndexIterator
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#step():::Advance to the next node represented by this HeapNode:::if->_nodes->cardinality->_nodes->at->else->return
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#cloneHeapNode():::Creates a deep copy of this HeapNode:::clone->super->cloneHeapNode->return
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#setMark():::Remembers the current node for the next call to #gotoMark().:::
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#gotoMark():::Restores the current node remembered by #setMark().:::
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#isLessThan(HeapNode):::Performs a comparison of the two heap nodes:::return
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#setStartNode(int):::Sets context with respect to which this heap node is evaluated. This has no real effect on this kind of heap node:::return
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#reset():::Reset the heap node back to its beginning.:::return
KeyIndex.KeyIndexIterator#lookupNodes(int, String):::Retrieve nodes for a particular key value or a particular id argument value.:::result->index->_rootToIndexMap->get->if->values->new->StringTokenizer->while->values->hasMoreElements->token->values->nextElement->nodes->if->index->get->if->_enhancedDOM->hasDOMSource->getDOMNodeById->if->if->nodes->clone->else->result->merge->else->if->index->get->return
KeyIndex.KeyIndexIterator#setStartNode(int):::Set context node for the iterator:::if->_keyValueIterator->setStartNode->init->return->super->setStartNode
KeyIndex.KeyIndexIterator#next():::Get the next node in the iteration.:::nodeHandle->if->if->_nodes->cardinality->_nodes->at->returnNode->else->else->super->next->return
KeyIndex.KeyIndexIterator#reset():::Resets the iterator to the last start node.:::if->init->else->super->reset->return->resetPosition
KeyIndex.KeyIndexIterator#init():::Evaluate the reference to the key or id function with the context specified by #setStartNode(int) and set up this iterator to iterate over the DTM nodes that are to be returned.:::super->init->rootHandle->_dom->getAxisIterator->setStartNode->next->if->lookupNodes->if->else->keyValues->_keyValueIterator->reset->retrievedKeyValueIdx->foundNodes->for->keyValueNode->keyValues->next->keyValues->next->if
KeyIndex.KeyIndexIterator#getLast():::Returns the number of nodes in this iterator.:::return->_nodes->cardinality->super->getLast
KeyIndex.KeyIndexIterator#getNodeByPosition(int):::Return the node at the given position.:::node->if->if->if->_nodes->cardinality->_nodes->at->else->_nodes->cardinality->else->super->getNodeByPosition->return
LoadDocument#documentF(Object, DTMAxisIterator, String, AbstractTranslet, DOM):::Interprets the arguments passed from the document() function (see com/sun/org/apache/xalan/internal/xsltc/compiler/DocumentCall.java) and returns an iterator containing the requested nodes:::baseURI->arg2FirstNode->arg2->next->if->return->EmptyIterator->getInstance->else->dom->getDocumentURI->if->SystemIDResolver->isAbsoluteURI->SystemIDResolver->getAbsoluteURIFromRelative->try->if->if->length->return->document->else->return->document->else->if->return->document->else->err->arg1->toString->throw->new->IllegalArgumentException->catch->throw->new->TransletException->finally
LoadDocument#documentF(Object, String, AbstractTranslet, DOM):::Interprets the arguments passed from the document() function (see com/sun/org/apache/xalan/internal/xsltc/compiler/DocumentCall.java) and returns an iterator containing the requested nodes:::try->if->if->baseURI->if->SystemIDResolver->isAbsoluteURI->SystemIDResolver->getAbsoluteURIFromRelative->href->if->href->length->templates->translet->getTemplates->sdom->if->templates->getStylesheetDOM->if->return->document->else->return->document->else->return->document->else->if->return->document->else->err->arg->toString->throw->new->IllegalArgumentException->catch->throw->new->TransletException->finally
LoadDocument#document(String, String, AbstractTranslet, DOM)::: load document document:::return->document
LoadDocument#document(String, String, AbstractTranslet, DOM, boolean)::: load document document:::try->originalUri->multiplexer->if->base->equals->SystemIDResolver->getAbsoluteURI->if->uri->equals->return->EmptyIterator->getInstance->mask->multiplexer->getDocumentMask->if->newDom->multiplexer->getDOMAdapter->getDOMImpl->if->return->getDocument->new->SingletonIterator->cache->translet->getDOMCache->newdom->multiplexer->nextMask->if->cache->retrieveDocument->if->e->new->FileNotFoundException->throw->new->TransletException->else->accessError->SecuritySupport->translet->getAllowedProtocols->checkAccess->if->msg->SecuritySupport->sanitizePath->new->ErrorMsg->throw->msg->toString->new->Exception->dtmManager->multiplexer->getDTMManager->enhancedDOM->dtmManager->new->StreamSource->translet->hasIdCall->getDTM->if->templates->translet->getTemplates->if->templates->setStylesheetDOM->translet->prepassDocument->enhancedDOM->setDocumentURI->domAdapter->translet->makeDOMAdapter->multiplexer->addDOMAdapter->translet->newdom->getDocument->buildKeys->return->newdom->getDocument->new->SingletonIterator->catch->throw->finally
LoadDocument#document(DTMAxisIterator, String, AbstractTranslet, DOM)::: load document document:::union->new->UnionIterator->node->while->arg1->next->uri->dom->getStringValueX->if->dom->getDocumentURI->if->SystemIDResolver->isAbsoluteURI->SystemIDResolver->getAbsoluteURIFromRelative->union->document->addIterator->return
LoadDocument#document(DOM, AbstractTranslet, DOM):::Create a DTMAxisIterator for the newdom:::dtmManager->getDTMManager->if->migrateTo->translet->prepassDocument->domAdapter->translet->makeDOMAdapter->addDOMAdapter->translet->newdom->getDocument->buildKeys->return->newdom->getDocument->new->SingletonIterator
MatchingIterator#setRestartable(boolean)::: matching iterator set restartable:::_source->setRestartable
MatchingIterator#cloneIterator()::: matching iterator clone iterator:::try->clone->super->clone->_source->cloneIterator->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
MatchingIterator#setStartNode(int)::: matching iterator set start node:::if->_source->setStartNode->while->_source->next->return
MatchingIterator#reset()::: matching iterator reset:::_source->reset->return->resetPosition
MatchingIterator#next()::: matching iterator next:::return->_source->next
MatchingIterator#getLast()::: matching iterator get last:::if->_source->getLast->return
MatchingIterator#getPosition()::: matching iterator get position:::return
MatchingIterator#setMark()::: matching iterator set mark:::_source->setMark
MatchingIterator#gotoMark()::: matching iterator goto mark:::_source->gotoMark
MultiDOM.AxisIterator#next()::: axis iterator next:::if->return->return->_source->next
MultiDOM.AxisIterator#setRestartable(boolean)::: axis iterator set restartable:::if->_source->setRestartable
MultiDOM.AxisIterator#setStartNode(int)::: axis iterator set start node:::if->return->dom->if->if->getAxisIterator->else->if->getTypedChildren->else->getTypedAxisIterator->_source->setStartNode->return
MultiDOM.AxisIterator#reset()::: axis iterator reset:::if->_source->reset->return
MultiDOM.AxisIterator#getLast()::: axis iterator get last:::if->return->_source->getLast->else->return
MultiDOM.AxisIterator#getPosition()::: axis iterator get position:::if->return->_source->getPosition->else->return
MultiDOM.AxisIterator#isReverse()::: axis iterator is reverse:::return->Axis->isReverse
MultiDOM.AxisIterator#setMark()::: axis iterator set mark:::if->_source->setMark
MultiDOM.AxisIterator#gotoMark()::: axis iterator goto mark:::if->_source->gotoMark
MultiDOM.AxisIterator#cloneIterator()::: axis iterator clone iterator:::clone->new->AxisIterator->if->_source->cloneIterator->return
MultiDOM.NodeValueIterator#isReverse()::: node value iterator is reverse:::return
MultiDOM.NodeValueIterator#cloneIterator()::: node value iterator clone iterator:::try->clone->super->clone->_source->cloneIterator->clone->setRestartable->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
MultiDOM.NodeValueIterator#setRestartable(boolean)::: node value iterator set restartable:::_source->setRestartable
MultiDOM.NodeValueIterator#reset()::: node value iterator reset:::_source->reset->return->resetPosition
MultiDOM.NodeValueIterator#next()::: node value iterator next:::node->while->_source->next->val->getStringValueX->if->_value->equals->if->return->returnNode->else->return->getParent->returnNode->return
MultiDOM.NodeValueIterator#setStartNode(int)::: node value iterator set start node:::if->_source->setStartNode->return->resetPosition->return
MultiDOM.NodeValueIterator#setMark()::: node value iterator set mark:::_source->setMark
MultiDOM.NodeValueIterator#gotoMark()::: node value iterator goto mark:::_source->gotoMark
MultiDOM#nextMask()::: multi m next mask:::return
MultiDOM#setupMapping(String[], String[], int[], String[])::: multi m setup mapping:::
MultiDOM#addDOMAdapter(DOMAdapter)::: multi m add adapter:::return->addDOMAdapter
MultiDOM#addDOMAdapter(DOMAdapter, boolean)::: multi m add adapter:::dom->adapter->getDOMImpl->domNo->dtmSize->dtmIds->if->dtmdb->dtmdb->getDTMIDs->dtmIds->size->dtmIds->elementAt->else->if->simpleRTF->simpleRTF->getDocument->if->oldSize->do->while->newArray->new->DOMAdapterArr->System->arraycopy->if->else->if->domPos->for->i->if->uri->adapter->getDocumentURI->_documents->put->if->adaptiveRTF->nestedDom->adaptiveRTF->getNestedDOM->if->newAdapter->adapter->getNamesArray->adapter->getUrisArray->adapter->getTypesArray->adapter->getNamespaceArray->new->DOMAdapter->addDOMAdapter->return
MultiDOM#getDocumentMask(String)::: multi m get document mask:::domIdx->_documents->get->if->return->else->return->domIdx->intValue
MultiDOM#getDOMAdapter(String)::: multi m get adapter:::domIdx->_documents->get->if->return->else->return->domIdx->intValue
MultiDOM#getDocument()::: multi m get document:::return->_main->getDocument
MultiDOM#getDTMManager()::: multi m get manager:::return
MultiDOM#getIterator():::Returns singleton iterator containing the document root:::return->_main->getIterator
MultiDOM#getStringValue()::: multi m get string value:::return->_main->getStringValue
MultiDOM#getChildren(int)::: multi m get children:::return->getDTMId->getChildren
MultiDOM#getTypedChildren(int)::: multi m get typed children:::return->new->AxisIterator
MultiDOM#getAxisIterator(int)::: multi m get axis iterator:::return->new->AxisIterator
MultiDOM#getTypedAxisIterator(int, int)::: multi m get typed axis iterator:::return->new->AxisIterator
MultiDOM#getNthDescendant(int, int, boolean)::: multi m get nth descendant:::return->getDTMId->getNthDescendant
MultiDOM#getNodeValueIterator(DTMAxisIterator, int, String, boolean)::: multi m get node value iterator:::return->new->NodeValueIterator
MultiDOM#getNamespaceAxisIterator(int, int)::: multi m get namespace axis iterator:::iterator->_main->getNamespaceAxisIterator->return
MultiDOM#orderNodes(DTMAxisIterator, int)::: multi m order nodes:::return->getDTMId->orderNodes
MultiDOM#getExpandedTypeID(int)::: multi m get expanded type d:::if->return->getExpandedTypeID->else->return
MultiDOM#getNamespaceType(int)::: multi m get namespace type:::return->getDTMId->getNamespaceType
MultiDOM#getNSType(int)::: multi m get type:::return->getDTMId->getNSType
MultiDOM#getParent(int)::: multi m get parent:::if->return->return->getParent
MultiDOM#getAttributeNode(int, int)::: multi m get attribute node:::if->return->return->getAttributeNode
MultiDOM#getNodeName(int)::: multi m get node name:::if->return->return->getNodeName
MultiDOM#getNodeNameX(int)::: multi m get node name x:::if->return->return->getNodeNameX
MultiDOM#getNamespaceName(int)::: multi m get namespace name:::if->return->return->getNamespaceName
MultiDOM#getStringValueX(int)::: multi m get string value x:::if->return->return->getStringValueX
MultiDOM#copy(int, SerializationHandler)::: multi m copy:::if->copy
MultiDOM#copy(DTMAxisIterator, SerializationHandler)::: multi m copy:::node->while->nodes->next->copy
MultiDOM#shallowCopy(int, SerializationHandler)::: multi m shallow copy:::if->return->return->shallowCopy
MultiDOM#lessThan(int, int)::: multi m less than:::if->return->if->return->dom1->getDTMId->dom2->getDTMId->return->lessThan
MultiDOM#characters(int, SerializationHandler)::: multi m characters:::if->characters
MultiDOM#setFilter(StripFilter)::: multi m set filter:::for->dom
MultiDOM#makeNode(int)::: multi m make node:::if->return->return->getDTMId->makeNode
MultiDOM#makeNode(DTMAxisIterator)::: multi m make node:::return->_main->makeNode
MultiDOM#makeNodeList(int)::: multi m make node list:::if->return->return->getDTMId->makeNodeList
MultiDOM#makeNodeList(DTMAxisIterator)::: multi m make node list:::index->iter->next->if->return->new->DTMAxisIterNodeList->iter->reset->return->getDTMId->makeNodeList
MultiDOM#getLanguage(int)::: multi m get language:::return->getDTMId->getLanguage
MultiDOM#getSize()::: multi m get size:::size->for->i->return
MultiDOM#getDocumentURI(int)::: multi m get document i:::if->return->getDocumentURI
MultiDOM#isElement(int)::: multi m is element:::if->return->return->isElement
MultiDOM#isAttribute(int)::: multi m is attribute:::if->return->return->isAttribute
MultiDOM#getDTMId(int)::: multi m get id:::if->return->id->while->return
MultiDOM#getDTM(int)::: multi m get m:::return->getDTMId
MultiDOM#getNodeIdent(int)::: multi m get node ident:::return->getNodeIdent
MultiDOM#getNodeHandle(int)::: multi m get node handle:::return->_main->getNodeHandle
MultiDOM#getResultTreeFrag(int, int)::: multi m get result tree frag:::return->_main->getResultTreeFrag
MultiDOM#getResultTreeFrag(int, int, boolean)::: multi m get result tree frag:::return->_main->getResultTreeFrag
MultiDOM#getMain()::: multi m get main:::return
MultiDOM#getOutputDomBuilder():::Returns a DOMBuilder class wrapped in a SAX adapter.:::return->_main->getOutputDomBuilder
MultiDOM#lookupNamespace(int, String)::: multi m lookup namespace:::return->_main->lookupNamespace
MultiDOM#getUnparsedEntityURI(String)::: multi m get unparsed entity i:::return->_main->getUnparsedEntityURI
MultiDOM#getElementsWithIDs()::: multi m get elements with ds:::return->_main->getElementsWithIDs
MultiDOM#release()::: multi m release:::_main->release
MultiDOM#isMatchingAdapterEntry(DOM, DOMAdapter)::: multi m is matching adapter entry:::dom->adapter->getDOMImpl->return->getNestedDOM->getDOMImpl
MultiDOM#removeDOMAdapter(DOMAdapter)::: multi m remove adapter:::_documents->adapter->getDocumentURI->remove->dom->adapter->getDOMImpl->if->ids->getDTMIDs->idsSize->ids->size->for->i->else->id->dom->getDocument->if->isMatchingAdapterEntry->else->found->for->i
MultipleNodeCounter#setStartNode(int)::: multiple node counter set start node:::_document->getExpandedTypeID->_document->getAxisIterator->return
MultipleNodeCounter#getCounter()::: multiple node counter get counter:::if->if->return->else->if->Double->isNaN->return->else->if->Double->isInfinite->return->else->if->Double->isInfinite->return->else->return->formatNumbers->ancestors->new->IntegerArray->next->ancestors->add->while->_document->getParent->matchesFrom->ancestors->add->nAncestors->ancestors->cardinality->counters->new->intArr->for->i->for->j->i->return->formatNumbers
MultipleNodeCounter#getDefaultNodeCounter(Translet, DOM, DTMAxisIterator)::: multiple node counter get default node counter:::return->new->DefaultMultipleNodeCounter
MultiValuedNodeHeapIterator.HeapNode#step():::Advance to the next node represented by this HeapNode:::
MultiValuedNodeHeapIterator.HeapNode#cloneHeapNode():::Creates a deep copy of this HeapNode:::clone->try->super->clone->catch->BasisLibrary->e->toString->runTimeError->return->finally->return
MultiValuedNodeHeapIterator.HeapNode#setMark():::Remembers the current node for the next call to #gotoMark().:::
MultiValuedNodeHeapIterator.HeapNode#gotoMark():::Restores the current node remembered by #setMark().:::
MultiValuedNodeHeapIterator.HeapNode#isLessThan(HeapNode):::Performs a comparison of the two heap nodes:::
MultiValuedNodeHeapIterator.HeapNode#setStartNode(int):::Sets context with respect to which this heap node is evaluated.:::
MultiValuedNodeHeapIterator.HeapNode#reset():::Reset the heap node back to its beginning.:::
MultiValuedNodeHeapIterator#cloneIterator()::: multi valued node heap iterator clone iterator:::heapCopy->new->HeapNodeArr->try->clone->super->clone->for->i->clone->setRestartable->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
MultiValuedNodeHeapIterator#addHeapNode(HeapNode)::: multi valued node heap iterator add heap node:::if->newArray->new->HeapNodeArr->System->arraycopy
MultiValuedNodeHeapIterator#next()::: multi valued node heap iterator next:::while->smallest->if->if->temp->else->return->else->if->step->else->step->heapify->return->returnNode->heapify->return
MultiValuedNodeHeapIterator#setStartNode(int)::: multi valued node heap iterator set start node:::if->for->i->for->i->return->resetPosition->return
MultiValuedNodeHeapIterator#init()::: multi valued node heap iterator init:::for->i
MultiValuedNodeHeapIterator#heapify(int)::: multi valued node heap iterator heapify:::for->r->l->smallest
MultiValuedNodeHeapIterator#setMark()::: multi valued node heap iterator set mark:::for->i
MultiValuedNodeHeapIterator#gotoMark()::: multi valued node heap iterator goto mark:::for->i->for->i
MultiValuedNodeHeapIterator#reset()::: multi valued node heap iterator reset:::for->i->for->i->return->resetPosition
NodeCounter#setStartNode(int):::Set the start node for this counter:::
NodeCounter#setValue(double):::If the user specified a value attribute, use this instead of counting nodes.:::return
NodeCounter#setFormatting(String, String, String, String, String):::Sets formatting fields before calling formatNumbers().:::parseStringToAnInt->setTokens
NodeCounter#parseStringToAnInt(String):::Effectively does the same thing as Integer.parseInt(String s) except instead of throwing a NumberFormatException, it returns 0:::if->return->result->negative->radix->i->max->s->length->limit->multmin->digit->if->if->s->charAt->else->if->Character->s->charAt->digit->if->return->else->while->Character->s->charAt->digit->if->return->if->return->if->return->else->return->if->if->return->else->return->else->return
NodeCounter#setTokens(String)::: node counter set tokens:::if->format->equals->return->length->_format->length->isFirst->_separToks->clear->_formatToks->clear->for->j->i->_separToks->size->_formatToks->size->if->if->if->if->_separToks->add->if
NodeCounter#setDefaultFormatting():::Sets formatting fields to their default values.:::setFormatting->return
NodeCounter#getCounter():::Returns the position of <tt>node</tt> according to the level and the from and count patterns.:::
NodeCounter#getCounter(String, String, String, String, String):::Returns the position of <tt>node</tt> according to the level and the from and count patterns:::setFormatting->return->getCounter
NodeCounter#matchesCount(int):::Returns true if <tt>node</tt> matches the count pattern:::return->_document->getExpandedTypeID
NodeCounter#matchesFrom(int):::Returns true if <tt>node</tt> matches the from pattern:::return
NodeCounter#formatNumbers(int):::Format a single value according to the format parameters.:::return->new->intArr->formatNumbers
NodeCounter#formatNumbers(int[]):::Format a sequence of values according to the format paramaters set by calling setFormatting().:::nValues->isEmpty->for->i->if->return->isFirst->t->n->s->_tempBuffer->setLength->buffer->if->buffer->_separToks->get->append->while->value->if->if->buffer->_separToks->get->append->_formatToks->get->formatValue->if->if->if->buffer->_separToks->_separToks->size->get->append->return->buffer->toString
NodeCounter#formatValue(int, String, StringBuilder):::Format a single value based on the appropriate formatting token:::c->format->charAt->if->Character->isDigit->zero->Character->getNumericValue->temp->if->new->StringBuilder->s->n->while->for->i->format->length->s->length->temp->append->if->for->i->temp->length->else->if->_letterValue->equals->buffer->romanValue->append->else->if->_letterValue->equals->buffer->romanValue->toUpperCase->append->else->min->max->if->else->while->Character->isLetterOrDigit->buffer->alphaValue->append
NodeCounter#alphaValue(int, int, int)::: node counter alpha value:::if->return->range->last->if->return->alphaValue->else->return
NodeCounter#romanValue(int)::: node counter roman value:::if->return->return
NodeIteratorBase#setRestartable(boolean):::Setter for _isRestartable flag.:::
NodeIteratorBase#setStartNode(int):::Initialize iterator using a node:::
NodeIteratorBase#reset():::Reset this iterator using state from last call to setStartNode().:::temp->setStartNode->return
NodeIteratorBase#includeSelf():::Setter for _includeSelf flag.:::return
NodeIteratorBase#getLast():::Default implementation of getLast():::if->temp->setMark->reset->do->while->next->gotoMark->return
NodeIteratorBase#getPosition():::Returns the position() in this iterator.:::return
NodeIteratorBase#isReverse():::Indicates if position in this iterator is computed in reverse document order:::return
NodeIteratorBase#cloneIterator():::Clones and resets this iterator:::try->clone->super->clone->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
NodeIteratorBase#returnNode(int):::Utility method that increments position and returns its argument.:::return
NodeIteratorBase#resetPosition():::Reset the position in this iterator.:::return
NodeSortRecord#initialize(int, int, DOM, SortSettings):::This method allows the caller to set the values that could not be passed to the default constructor.:::levels->settings->getSortOrders->new->ObjectArr->colFactClassname->try->SecuritySupport->getSystemProperty->catch->finally->if->try->candObj->ObjectFactory->findProviderClass->catch->throw->new->TransletException->finally->locales->settings->getLocales->new->CollatorArr->for->i->else->settings->getCollators
NodeSortRecord#getNode():::Returns the node for this sort object:::return
NodeSortRecord#compareDocOrder(NodeSortRecord)::: node sort record compare doc order:::return
NodeSortRecord#stringValue(int):::Get the string or numeric value of a specific level key for this sort element:::if->translet->_settings->getTranslet->locales->_settings->getLocales->caseOrder->_settings->getCaseOrders->str->extractValueFromDOM->key->StringComparable->getComparator->return->return
NodeSortRecord#numericValue(int)::: node sort record numeric value:::if->translet->_settings->getTranslet->str->extractValueFromDOM->num->try->Double->parseDouble->catch->finally->return->return
NodeSortRecord#compareTo(NodeSortRecord):::Compare this sort element to another:::cmp->level->sortOrder->_settings->getSortOrders->levels->_settings->getSortOrders->compareTypes->_settings->getTypes->for->return
NodeSortRecord#getCollator():::Returns the array of Collators used for text comparisons in this object:::return
NodeSortRecord#extractValueFromDOM(DOM, int, int, AbstractTranslet, int):::Extract the sort value for a level of this key.:::
NodeSortRecordFactory#makeNodeSortRecord(int, int):::Create an instance of a sub-class of NodeSortRecord:::try->sortRecord->_class->getConstructor->newInstance->sortRecord->initialize->return->catch->throw->ex->getMessage->new->InstantiationException->finally
NodeSortRecordFactory#getClassName()::: node sort record factory get class name:::return
NodeSortRecordFactory#setLang(String[])::: node sort record factory set lang:::
NthIterator#setRestartable(boolean)::: nth iterator set restartable:::_source->setRestartable
NthIterator#cloneIterator()::: nth iterator clone iterator:::try->clone->super->clone->_source->cloneIterator->return->catch->BasisLibrary->e->toString->runTimeError->return->finally
NthIterator#next()::: nth iterator next:::if->return->_source->getNodeByPosition->return
NthIterator#setStartNode(int)::: nth iterator set start node:::if->_source->setStartNode->return
NthIterator#reset()::: nth iterator reset:::_source->reset->return
NthIterator#getLast()::: nth iterator get last:::return
NthIterator#getPosition()::: nth iterator get position:::return
NthIterator#setMark()::: nth iterator set mark:::_source->setMark
NthIterator#gotoMark()::: nth iterator goto mark:::_source->gotoMark
SAXImpl#setDocumentURI(String):::Define the origin of the document from which the tree was built:::if->SystemIDResolver->getAbsoluteURI->setDocumentBaseURI
SAXImpl#getDocumentURI():::Returns the origin of the document from which the tree was built:::baseURI->getDocumentBaseURI->return
SAXImpl#getDocumentURI(int)::: impl get document i:::return->getDocumentURI
SAXImpl#setupMapping(String[], String[], int[], String[])::: impl setup mapping:::
SAXImpl#lookupNamespace(int, String):::Lookup a namespace URI from a prefix starting at node:::anode->nsnode->ancestors->new->AncestorIterator->if->isElement->ancestors->includeSelf->ancestors->setStartNode->while->ancestors->next->namespaces->new->NamespaceIterator->namespaces->setStartNode->while->namespaces->next->if->getLocalName->equals->return->getNodeValue->BasisLibrary->runTimeError->return
SAXImpl#isElement(int):::Returns 'true' if a specific node is an element (of any type):::return->getNodeType
SAXImpl#isAttribute(int):::Returns 'true' if a specific node is an attribute (of any type):::return->getNodeType
SAXImpl#getSize():::Returns the number of nodes in the tree (used for indexing):::return->getNumberOfNodes
SAXImpl#setFilter(StripFilter):::Part of the DOM interface - no function here.:::
SAXImpl#lessThan(int, int):::Returns true if node1 comes before node2 in document order:::if->return->if->return->return
SAXImpl#makeNode(int):::Create an org.w3c.dom.Node from a node in the tree:::if->new->NodeArr->nodeID->makeNodeIdentity->if->return->else->if->return->new->DTMNodeProxy->else->return->new->DTMNodeProxy
SAXImpl#makeNode(DTMAxisIterator):::Create an org.w3c.dom.Node from a node in an iterator The iterator most be started before this method is called:::return->iter->next->makeNode
SAXImpl#makeNodeList(int):::Create an org.w3c.dom.NodeList from a node in the tree:::if->new->NodeListArr->nodeID->makeNodeIdentity->if->return->else->if->return->new->SingletonIterator->new->DTMAxisIterNodeList->else->return->new->SingletonIterator->new->DTMAxisIterNodeList
SAXImpl#makeNodeList(DTMAxisIterator):::Create an org.w3c.dom.NodeList from a node iterator The iterator most be started before this method is called:::return->new->DTMAxisIterNodeList
SAXImpl.TypedNamespaceIterator#next():::Get the next node in the iteration.:::if->_nsPrefix->length->return->node->for->super->next->super->next->return
SAXImpl.NodeValueIterator#isReverse()::: node value iterator is reverse:::return
SAXImpl.NodeValueIterator#cloneIterator()::: node value iterator clone iterator:::try->clone->super->clone->_source->cloneIterator->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
SAXImpl.NodeValueIterator#setRestartable(boolean)::: node value iterator set restartable:::_source->setRestartable
SAXImpl.NodeValueIterator#reset()::: node value iterator reset:::_source->reset->return->resetPosition
SAXImpl.NodeValueIterator#next()::: node value iterator next:::node->while->_source->next->val->getStringValueX->if->_value->equals->if->return->returnNode->else->return->getParent->returnNode->return
SAXImpl.NodeValueIterator#setStartNode(int)::: node value iterator set start node:::if->_source->setStartNode->return->resetPosition->return
SAXImpl.NodeValueIterator#setMark()::: node value iterator set mark:::_source->setMark
SAXImpl.NodeValueIterator#gotoMark()::: node value iterator goto mark:::_source->gotoMark
SAXImpl#getNodeValueIterator(DTMAxisIterator, int, String, boolean)::: impl get node value iterator:::return->new->NodeValueIterator
SAXImpl#orderNodes(DTMAxisIterator, int):::Encapsulates an iterator in an OrderedIterator to ensure node order:::return->new->DupFilterIterator
SAXImpl#getIterator():::Returns singleton iterator containg the document root Works for them main document (mark == 0):::return->getDocument->new->SingletonIterator
SAXImpl#getNSType(int):::Get mapping from DOM namespace types to external namespace types:::s->getNamespaceURI->if->return->eType->getIdForNamespace->return->_nsIndex->get
SAXImpl#getNamespaceType(int):::Returns the namespace type of a specific node:::return->super->getNamespaceType
SAXImpl#getGeneralizedType(String):::Returns the internal type associated with an expanded QName:::return->getGeneralizedType
SAXImpl#getGeneralizedType(String, boolean):::Returns the internal type associated with an expanded QName:::lName->ns->index->code->if->name->lastIndexOf->name->substring->lNameStartIdx->if->name->charAt->else->name->substring->return->m_expandedNameTable->getExpandedTypeID
SAXImpl#getMapping(String[], String[], int[]):::Get mapping from DOM element/attribute types to external types:::if->return->getMapping2->i->namesLength->exLength->m_expandedNameTable->getSize->result->new->shortArr->for->for->for->return
SAXImpl#getReverseMapping(String[], String[], int[]):::Get mapping from external element/attribute types to DOM types:::i->result->new->intArr->for->for->return
SAXImpl#getMapping2(String[], String[], int[]):::Get mapping from DOM element/attribute types to external types:::i->namesLength->exLength->m_expandedNameTable->getSize->generalizedTypes->if->new->intArr->resultLength->for->result->new->shortArr->for->for->for->return
SAXImpl#getNamespaceMapping(String[]):::Get mapping from DOM namespace types to external namespace types:::i->nsLength->mappingLength->result->new->shortArr->for->for->return
SAXImpl#getReverseNamespaceMapping(String[]):::Get mapping from external namespace types to DOM namespace types:::i->length->result->new->shortArr->for->return
SAXImpl#migrateTo(DTMManager):::Migrate a DTM built with an old DTMManager to a new DTMManager:::super->migrateTo->if
SAXImpl#getElementById(String):::Return the node identity for a given id String:::node->_document->getElementById->if->id->_node2Ids->get->return->else->return
SAXImpl#hasDOMSource():::Return true if the input source is DOMSource.:::return
SAXImpl#xmlSpaceDefine(String, int):::Call this when an xml:space attribute is encountered to define the whitespace strip/preserve settings.:::setting->val->equals->if
SAXImpl#xmlSpaceRevert(int):::Call this from endElement() to revert strip/preserve setting to whatever it was before the corresponding startElement().:::if
SAXImpl#getShouldStripWhitespace():::Find out whether or not to strip whitespace nodes.:::return->super->getShouldStripWhitespace
SAXImpl#handleTextEscaping():::Creates a text-node and checks if it is a whitespace node.:::if->_type->if->new->BitArray->if->_dontEscape->size->_dontEscape->_dontEscape->size->resize->_dontEscape->setBit
SAXImpl#characters(char[], int, int):::SAX2: Receive notification of character data.:::super->characters->getNumberOfNodes
SAXImpl#startDocument():::SAX2: Receive notification of the beginning of a document.:::super->startDocument->_nsIndex->put->definePrefixAndUri
SAXImpl#endDocument():::SAX2: Receive notification of the end of a document.:::super->endDocument->handleTextEscaping->m_expandedNameTable->getSize
SAXImpl#startElement(String, String, String, Attributes, Node):::Specialized interface used by DOM2SAX:::this->startElement->if->_node2Ids->m_parents->peek->put
SAXImpl#startElement(String, String, String, Attributes):::SAX2: Receive notification of the beginning of an element.:::super->startElement->handleTextEscaping->if->index->attributes->getIndex->if->attributes->getValue->m_parents->peek->xmlSpaceDefine
SAXImpl#endElement(String, String, String):::SAX2: Receive notification of the end of an element.:::super->endElement->handleTextEscaping->if->xmlSpaceRevert
SAXImpl#processingInstruction(String, String):::SAX2: Receive notification of a processing instruction.:::super->processingInstruction->handleTextEscaping
SAXImpl#ignorableWhitespace(char[], int, int):::SAX2: Receive notification of ignorable whitespace in element content:::super->ignorableWhitespace->getNumberOfNodes
SAXImpl#startPrefixMapping(String, String):::SAX2: Begin the scope of a prefix-URI Namespace mapping.:::super->startPrefixMapping->handleTextEscaping->definePrefixAndUri
SAXImpl#definePrefixAndUri(String, String)::: impl define prefix and uri:::eType->getIdForNamespace->if->_nsIndex->get->_nsIndex->put
SAXImpl#comment(char[], int, int):::SAX2: Report an XML comment anywhere in the document.:::super->comment->handleTextEscaping
SAXImpl#setEscaping(boolean)::: impl set escaping:::temp->return
SAXImpl#print(int, int):::Prints the whole tree to standard output:::switch->getNodeType->getFirstChild->print->break->getStringValueX->print->break->name->getNodeName->print->for->a->getFirstAttribute->getNextAttribute->print->for->child->getFirstChild->getNextSibling->println->break
SAXImpl#getNodeName(int):::Returns the name of a node (attribute or element).:::nodeh->type->getNodeType->switch->return->return->this->getLocalName->return->super->getNodeName
SAXImpl#getNamespaceName(int):::Returns the namespace URI to which a node belongs:::if->return->s->return->getNamespaceURI
SAXImpl#getAttributeNode(int, int):::Returns the attribute node of a given type (if any) for an element:::for->attr->getFirstAttribute->getNextAttribute->return
SAXImpl#getAttributeValue(int, int):::Returns the value of a given attribute type of a given element:::attr->getAttributeNode->return->getStringValueX
SAXImpl#getAttributeValue(String, int):::This method is for testing/debugging only:::return->getGeneralizedType->getAttributeValue
SAXImpl#getChildren(int):::Returns an iterator with all the children of a given node:::return->new->ChildrenIterator->setStartNode
SAXImpl#getTypedChildren(int):::Returns an iterator with all children of a specific type for a given node (element):::return->new->TypedChildrenIterator
SAXImpl#getAxisIterator(int):::This is a shortcut to the iterators that implement the supported XPath axes (only namespace::) is not supported:::switch->return->new->SingletonIterator->return->new->ChildrenIterator->return->new->ParentIterator->return->new->AncestorIterator->return->new->AncestorIterator->includeSelf->return->new->AttributeIterator->return->new->DescendantIterator->return->new->DescendantIterator->includeSelf->return->new->FollowingIterator->return->new->PrecedingIterator->return->new->FollowingSiblingIterator->return->new->PrecedingSiblingIterator->return->new->NamespaceIterator->return->new->RootIterator->BasisLibrary->Axis->getNames->runTimeError->return
SAXImpl#getTypedAxisIterator(int, int):::Similar to getAxisIterator, but this one returns an iterator containing nodes of a typed axis (ex.: child::foo):::if->return->new->TypedChildrenIterator->if->return->switch->return->new->TypedSingletonIterator->return->new->TypedChildrenIterator->return->new->ParentIterator->setNodeType->return->new->TypedAncestorIterator->return->new->TypedAncestorIterator->includeSelf->return->new->TypedAttributeIterator->return->new->TypedDescendantIterator->return->new->TypedDescendantIterator->includeSelf->return->new->TypedFollowingIterator->return->new->TypedPrecedingIterator->return->new->TypedFollowingSiblingIterator->return->new->TypedPrecedingSiblingIterator->return->new->TypedNamespaceIterator->return->new->TypedRootIterator->BasisLibrary->Axis->getNames->runTimeError->return
SAXImpl#getNamespaceAxisIterator(int, int):::Do not think that this returns an iterator for the namespace axis:::if->return->else->switch->return->new->NamespaceChildrenIterator->return->new->NamespaceAttributeIterator->return->new->NamespaceWildcardIterator
SAXImpl.NamespaceWildcardIterator#setStartNode(int):::Set start to END should 'close' the iterator, i.e:::if->m_baseIterator->setStartNode->resetPosition->return
SAXImpl.NamespaceWildcardIterator#next():::Get the next node in the iteration.:::node->while->m_baseIterator->next->if->getNSType->return->returnNode->return
SAXImpl.NamespaceWildcardIterator#cloneIterator():::Returns a deep copy of this iterator:::try->nestedClone->m_baseIterator->cloneIterator->clone->super->clone->return->catch->BasisLibrary->e->toString->runTimeError->return->finally
SAXImpl.NamespaceWildcardIterator#isReverse():::True if this iterator has a reversed axis.:::return->m_baseIterator->isReverse
SAXImpl.NamespaceWildcardIterator#setMark()::: namespace wildcard iterator set mark:::m_baseIterator->setMark
SAXImpl.NamespaceWildcardIterator#gotoMark()::: namespace wildcard iterator goto mark:::m_baseIterator->gotoMark
SAXImpl.NamespaceChildrenIterator#setStartNode(int):::Set start to END should 'close' the iterator, i.e:::if->getDocument->if->return->resetPosition->return
SAXImpl.NamespaceChildrenIterator#next():::Get the next node in the iteration.:::if->for->node->makeNodeIdentity->_firstch->_nextsib->_nextsib->return
SAXImpl.NamespaceAttributeIterator#setStartNode(int):::Set start to END should 'close' the iterator, i.e:::if->getDocument->if->nsType->for->getFirstAttribute->getNextAttribute->return->resetPosition->return
SAXImpl.NamespaceAttributeIterator#next():::Get the next node in the iteration.:::node->nsType->nextNode->if->return->for->getNextAttribute->getNextAttribute->return->returnNode
SAXImpl#getTypedDescendantIterator(int):::Returns an iterator with all descendants of a node that are of a given type.:::return->new->TypedDescendantIterator
SAXImpl#getNthDescendant(int, int, boolean):::Returns the nth descendant of a node:::return->new->NthDescendantIterator
SAXImpl#characters(int, SerializationHandler):::Copy the string value of a node directly to an output handler:::if->try->dispatchCharactersEvents->catch->throw->new->TransletException->finally
SAXImpl#copy(DTMAxisIterator, SerializationHandler):::Copy a node-set to an output handler:::node->while->nodes->next->copy
SAXImpl#copy(SerializationHandler):::Copy the whole tree to an output handler:::getDocument->copy
SAXImpl#copy(int, SerializationHandler):::Performs a deep copy (ref:::copy
SAXImpl#copy(int, SerializationHandler, boolean)::: impl copy:::nodeID->makeNodeIdentity->eType->_exptype2->type->_exptype2Type->try->switch->for->c->_firstch2->_nextsib2->break->copyPI->break->handler->getStringValueX->comment->break->oldEscapeSetting->escapeBit->if->_dontEscape->getNodeIdent->getBit->if->handler->setEscaping->copyTextNode->if->handler->setEscaping->break->copyAttribute->break->handler->getNodeNameX->getNodeValue->namespaceAfterStartElement->break->if->name->copyElement->copyNS->copyAttributes->for->c->_firstch2->_nextsib2->handler->endElement->else->uri->getNamespaceName->if->uri->length->prefix->getPrefix->handler->namespaceAfterStartElement->handler->getNodeName->getNodeValue->addAttribute->break->catch->throw->new->TransletException->finally
SAXImpl#copyPI(int, SerializationHandler):::Copies a processing instruction node to an output handler:::target->getNodeName->value->getStringValueX->try->handler->processingInstruction->catch->throw->new->TransletException->finally
SAXImpl#shallowCopy(int, SerializationHandler):::Performs a shallow copy (ref:::nodeID->makeNodeIdentity->exptype->_exptype2->type->_exptype2Type->try->switch->name->copyElement->copyNS->return->return->copyTextNode->return->copyPI->return->handler->getStringValueX->comment->return->handler->getNodeNameX->getNodeValue->namespaceAfterStartElement->return->copyAttribute->return->uri1->getNamespaceName->if->uri1->length->prefix->getPrefix->handler->namespaceAfterStartElement->handler->getNodeName->getNodeValue->addAttribute->return->catch->throw->new->TransletException->finally
SAXImpl#getLanguage(int):::Returns a node' defined language for a node (if any):::parent->while->if->getNodeType->langAttr->getAttributeNode->if->return->getNodeValue->getParent->return
SAXImpl#getBuilder():::Returns an instance of the DOMBuilder inner class This class will consume the input document through a SAX2 interface and populate the tree.:::return
SAXImpl#getOutputDomBuilder():::Return a SerializationHandler for output handling:::return->new->ToXMLSAXHandler
SAXImpl#getResultTreeFrag(int, int):::Return a instance of a DOM class to be used as an RTF:::return->getResultTreeFrag
SAXImpl#getResultTreeFrag(int, int, boolean):::Return a instance of a DOM class to be used as an RTF:::if->if->dtmPos->_dtmManager->getFirstFreeDTMID->rtf->new->SimpleResultTreeImpl->_dtmManager->addDTM->return->else->return->new->SimpleResultTreeImpl->else->if->if->dtmPos->_dtmManager->getFirstFreeDTMID->rtf->new->AdaptiveResultTreeImpl->_dtmManager->addDTM->return->else->return->new->AdaptiveResultTreeImpl->else->return->_dtmManager->getDTM
SAXImpl#getElementsWithIDs():::Return the attributes map.:::return
SAXImpl#getUnparsedEntityURI(String):::The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3.3 Unparsed Entities]):::if->uri->doctype->_document->getDoctype->if->entities->doctype->getEntities->if->return->entity->entities->getNamedItem->if->return->notationName->entity->getNotationName->if->entity->getSystemId->if->entity->getPublicId->return->else->return->super->getUnparsedEntityURI
SAXImpl#release()::: impl release:::_dtmManager->release
SimpleResultTreeImpl.SimpleIterator#next()::: simple iterator next:::if->while->if->if->return->getNodeHandle->returnNode->else->else->return->getNodeHandle->returnNode->return->else->while->if->if->return->getNodeHandle->returnNode->else->else->return->getNodeHandle->returnNode->return
SimpleResultTreeImpl.SimpleIterator#setStartNode(int)::: simple iterator set start node:::nodeID->getNodeIdent->if->if->else->if->return
SimpleResultTreeImpl.SimpleIterator#setMark()::: simple iterator set mark:::
SimpleResultTreeImpl.SimpleIterator#gotoMark()::: simple iterator goto mark:::
SimpleResultTreeImpl.SingletonIterator#setMark()::: singleton iterator set mark:::
SimpleResultTreeImpl.SingletonIterator#gotoMark()::: singleton iterator goto mark:::
SimpleResultTreeImpl.SingletonIterator#setStartNode(int)::: singleton iterator set start node:::getNodeIdent->return
SimpleResultTreeImpl.SingletonIterator#next()::: singleton iterator next:::if->return->if->if->return->getNodeHandle->else->return->getNodeHandle->return
SimpleResultTreeImpl#getDTMManager()::: simple result tree impl get manager:::return
SimpleResultTreeImpl#getDocument()::: simple result tree impl get document:::return
SimpleResultTreeImpl#getStringValue()::: simple result tree impl get string value:::return
SimpleResultTreeImpl#getIterator()::: simple result tree impl get iterator:::return->getDocument->new->SingletonIterator
SimpleResultTreeImpl#getChildren(int)::: simple result tree impl get children:::return->new->SimpleIterator->setStartNode
SimpleResultTreeImpl#getTypedChildren(int)::: simple result tree impl get typed children:::return->new->SimpleIterator
SimpleResultTreeImpl#getAxisIterator(int)::: simple result tree impl get axis iterator:::switch->return->new->SimpleIterator->return->new->SimpleIterator->return->new->SimpleIterator->includeSelf->return->new->SimpleIterator->includeSelf->return->new->SingletonIterator->return
SimpleResultTreeImpl#getTypedAxisIterator(int, int)::: simple result tree impl get typed axis iterator:::switch->return->new->SimpleIterator->return->new->SimpleIterator->return->new->SimpleIterator->includeSelf->return->new->SimpleIterator->includeSelf->return->new->SingletonIterator->return
SimpleResultTreeImpl#getNthDescendant(int, int, boolean)::: simple result tree impl get nth descendant:::return
SimpleResultTreeImpl#getNamespaceAxisIterator(int, int)::: simple result tree impl get namespace axis iterator:::return
SimpleResultTreeImpl#getNodeValueIterator(DTMAxisIterator, int, String, boolean)::: simple result tree impl get node value iterator:::return
SimpleResultTreeImpl#orderNodes(DTMAxisIterator, int)::: simple result tree impl order nodes:::return
SimpleResultTreeImpl#getNodeName(int)::: simple result tree impl get node name:::if->getNodeIdent->return->else->return
SimpleResultTreeImpl#getNodeNameX(int)::: simple result tree impl get node name x:::return
SimpleResultTreeImpl#getNamespaceName(int)::: simple result tree impl get namespace name:::return
SimpleResultTreeImpl#getExpandedTypeID(int)::: simple result tree impl get expanded type d:::nodeID->getNodeIdent->if->return->else->if->return->else->return
SimpleResultTreeImpl#getNamespaceType(int)::: simple result tree impl get namespace type:::return
SimpleResultTreeImpl#getParent(int)::: simple result tree impl get parent:::nodeID->getNodeIdent->return->getNodeHandle
SimpleResultTreeImpl#getAttributeNode(int, int)::: simple result tree impl get attribute node:::return
SimpleResultTreeImpl#getStringValueX(int)::: simple result tree impl get string value x:::nodeID->getNodeIdent->if->return->else->return
SimpleResultTreeImpl#copy(int, SerializationHandler)::: simple result tree impl copy:::characters
SimpleResultTreeImpl#copy(DTMAxisIterator, SerializationHandler)::: simple result tree impl copy:::node->while->nodes->next->copy
SimpleResultTreeImpl#shallowCopy(int, SerializationHandler)::: simple result tree impl shallow copy:::characters->return
SimpleResultTreeImpl#lessThan(int, int)::: simple result tree impl less than:::if->return->else->if->return->else->return
SimpleResultTreeImpl#characters(int, SerializationHandler):::Dispatch the character content of a node to an output handler:::nodeID->getNodeIdent->if->escapeBit->oldEscapeSetting->try->for->i->catch->throw->new->TransletException->finally
SimpleResultTreeImpl#makeNode(int)::: simple result tree impl make node:::return
SimpleResultTreeImpl#makeNode(DTMAxisIterator)::: simple result tree impl make node:::return
SimpleResultTreeImpl#makeNodeList(int)::: simple result tree impl make node list:::return
SimpleResultTreeImpl#makeNodeList(DTMAxisIterator)::: simple result tree impl make node list:::return
SimpleResultTreeImpl#getLanguage(int)::: simple result tree impl get language:::return
SimpleResultTreeImpl#getSize()::: simple result tree impl get size:::return
SimpleResultTreeImpl#getDocumentURI(int)::: simple result tree impl get document i:::return
SimpleResultTreeImpl#setFilter(StripFilter)::: simple result tree impl set filter:::
SimpleResultTreeImpl#setupMapping(String[], String[], int[], String[])::: simple result tree impl setup mapping:::
SimpleResultTreeImpl#isElement(int)::: simple result tree impl is element:::return
SimpleResultTreeImpl#isAttribute(int)::: simple result tree impl is attribute:::return
SimpleResultTreeImpl#lookupNamespace(int, String)::: simple result tree impl lookup namespace:::return
SimpleResultTreeImpl#getNodeIdent(int):::Return the node identity from a node handle.:::return
SimpleResultTreeImpl#getNodeHandle(int):::Return the node handle from a node identity.:::return
SimpleResultTreeImpl#getResultTreeFrag(int, int)::: simple result tree impl get result tree frag:::return
SimpleResultTreeImpl#getResultTreeFrag(int, int, boolean)::: simple result tree impl get result tree frag:::return
SimpleResultTreeImpl#getOutputDomBuilder()::: simple result tree impl get output dom builder:::return
SimpleResultTreeImpl#getNSType(int)::: simple result tree impl get type:::return
SimpleResultTreeImpl#getUnparsedEntityURI(String)::: simple result tree impl get unparsed entity i:::return
SimpleResultTreeImpl#getElementsWithIDs()::: simple result tree impl get elements with ds:::return
SimpleResultTreeImpl#startDocument()::: simple result tree impl start document:::
SimpleResultTreeImpl#endDocument()::: simple result tree impl end document:::if->else->buffer->new->StringBuffer->for->i->buffer->toString
SimpleResultTreeImpl#characters(String)::: simple result tree impl characters:::if->newTextArray->new->StringArr->System->arraycopy->if->if->new->BitArray->if->_dontEscape->size->_dontEscape->_dontEscape->size->resize->_dontEscape->setBit
SimpleResultTreeImpl#characters(char[], int, int)::: simple result tree impl characters:::if->newTextArray->new->StringArr->System->arraycopy->if->if->new->BitArray->if->_dontEscape->size->_dontEscape->_dontEscape->size->resize->_dontEscape->setBit->new->String
SimpleResultTreeImpl#setEscaping(boolean)::: simple result tree impl set escaping:::temp->return
SimpleResultTreeImpl#setFeature(String, boolean)::: simple result tree impl set feature:::
SimpleResultTreeImpl#setProperty(String, Object)::: simple result tree impl set property:::
SimpleResultTreeImpl#getAxisTraverser(int)::: simple result tree impl get axis traverser:::return
SimpleResultTreeImpl#hasChildNodes(int)::: simple result tree impl has child nodes:::return->getNodeIdent
SimpleResultTreeImpl#getFirstChild(int)::: simple result tree impl get first child:::nodeID->getNodeIdent->if->return->getNodeHandle->else->return
SimpleResultTreeImpl#getLastChild(int)::: simple result tree impl get last child:::return->getFirstChild
SimpleResultTreeImpl#getAttributeNode(int, String, String)::: simple result tree impl get attribute node:::return
SimpleResultTreeImpl#getFirstAttribute(int)::: simple result tree impl get first attribute:::return
SimpleResultTreeImpl#getFirstNamespaceNode(int, boolean)::: simple result tree impl get first namespace node:::return
SimpleResultTreeImpl#getNextSibling(int)::: simple result tree impl get next sibling:::return
SimpleResultTreeImpl#getPreviousSibling(int)::: simple result tree impl get previous sibling:::return
SimpleResultTreeImpl#getNextAttribute(int)::: simple result tree impl get next attribute:::return
SimpleResultTreeImpl#getNextNamespaceNode(int, int, boolean)::: simple result tree impl get next namespace node:::return
SimpleResultTreeImpl#getOwnerDocument(int)::: simple result tree impl get owner document:::return->getDocument
SimpleResultTreeImpl#getDocumentRoot(int)::: simple result tree impl get document root:::return->getDocument
SimpleResultTreeImpl#getStringValue(int)::: simple result tree impl get string value:::return->getStringValueX->new->XMLStringDefault
SimpleResultTreeImpl#getStringValueChunkCount(int)::: simple result tree impl get string value chunk count:::return
SimpleResultTreeImpl#getStringValueChunk(int, int, int[])::: simple result tree impl get string value chunk:::return
SimpleResultTreeImpl#getExpandedTypeID(String, String, int)::: simple result tree impl get expanded type d:::return
SimpleResultTreeImpl#getLocalNameFromExpandedNameID(int)::: simple result tree impl get local name from expanded name d:::return
SimpleResultTreeImpl#getNamespaceFromExpandedNameID(int)::: simple result tree impl get namespace from expanded name d:::return
SimpleResultTreeImpl#getLocalName(int)::: simple result tree impl get local name:::return
SimpleResultTreeImpl#getPrefix(int)::: simple result tree impl get prefix:::return
SimpleResultTreeImpl#getNamespaceURI(int)::: simple result tree impl get namespace i:::return
SimpleResultTreeImpl#getNodeValue(int)::: simple result tree impl get node value:::return->getNodeIdent
SimpleResultTreeImpl#getNodeType(int)::: simple result tree impl get node type:::nodeID->getNodeIdent->if->return->else->if->return->else->return
SimpleResultTreeImpl#getLevel(int)::: simple result tree impl get level:::nodeID->getNodeIdent->if->return->else->if->return->else->return
SimpleResultTreeImpl#isSupported(String, String)::: simple result tree impl is supported:::return
SimpleResultTreeImpl#getDocumentBaseURI()::: simple result tree impl get document base i:::return
SimpleResultTreeImpl#setDocumentBaseURI(String)::: simple result tree impl set document base i:::
SimpleResultTreeImpl#getDocumentSystemIdentifier(int)::: simple result tree impl get document system identifier:::return
SimpleResultTreeImpl#getDocumentEncoding(int)::: simple result tree impl get document encoding:::return
SimpleResultTreeImpl#getDocumentStandalone(int)::: simple result tree impl get document standalone:::return
SimpleResultTreeImpl#getDocumentVersion(int)::: simple result tree impl get document version:::return
SimpleResultTreeImpl#getDocumentAllDeclarationsProcessed()::: simple result tree impl get document all declarations processed:::return
SimpleResultTreeImpl#getDocumentTypeDeclarationSystemIdentifier()::: simple result tree impl get document type declaration system identifier:::return
SimpleResultTreeImpl#getDocumentTypeDeclarationPublicIdentifier()::: simple result tree impl get document type declaration public identifier:::return
SimpleResultTreeImpl#getElementById(String)::: simple result tree impl get element by id:::return
SimpleResultTreeImpl#supportsPreStripping()::: simple result tree impl supports pre stripping:::return
SimpleResultTreeImpl#isNodeAfter(int, int)::: simple result tree impl is node after:::return->lessThan
SimpleResultTreeImpl#isCharacterElementContentWhitespace(int)::: simple result tree impl is character element content whitespace:::return
SimpleResultTreeImpl#isDocumentAllDeclarationsProcessed(int)::: simple result tree impl is document all declarations processed:::return
SimpleResultTreeImpl#isAttributeSpecified(int)::: simple result tree impl is attribute specified:::return
SimpleResultTreeImpl#dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean)::: simple result tree impl dispatch characters events:::
SimpleResultTreeImpl#dispatchToEvents(int, org.xml.sax.ContentHandler)::: simple result tree impl dispatch to events:::
SimpleResultTreeImpl#getNode(int)::: simple result tree impl get node:::return->makeNode
SimpleResultTreeImpl#needsTwoThreads()::: simple result tree impl needs two threads:::return
SimpleResultTreeImpl#getContentHandler()::: simple result tree impl get content handler:::return
SimpleResultTreeImpl#getLexicalHandler()::: simple result tree impl get lexical handler:::return
SimpleResultTreeImpl#getEntityResolver()::: simple result tree impl get entity resolver:::return
SimpleResultTreeImpl#getDTDHandler()::: simple result tree impl get handler:::return
SimpleResultTreeImpl#getErrorHandler()::: simple result tree impl get error handler:::return
SimpleResultTreeImpl#getDeclHandler()::: simple result tree impl get decl handler:::return
SimpleResultTreeImpl#appendChild(int, boolean, boolean)::: simple result tree impl append child:::
SimpleResultTreeImpl#appendTextChild(String)::: simple result tree impl append text child:::
SimpleResultTreeImpl#getSourceLocatorFor(int)::: simple result tree impl get source locator for:::return
SimpleResultTreeImpl#documentRegistration()::: simple result tree impl document registration:::
SimpleResultTreeImpl#documentRelease()::: simple result tree impl document release:::
SimpleResultTreeImpl#migrateTo(DTMManager)::: simple result tree impl migrate to:::
SimpleResultTreeImpl#release()::: simple result tree impl release:::if->_dtmManager->release
SingleNodeCounter#setStartNode(int)::: single node counter set start node:::_document->getExpandedTypeID->_document->getAxisIterator->return
SingleNodeCounter#getCounter()::: single node counter get counter:::result->if->if->return->else->if->Double->isNaN->return->else->if->Double->isInfinite->return->else->if->Double->isInfinite->return->else->else->next->matchesCount->matchesCount->if->while->_document->getParent->if->matchesCount->break->if->matchesFrom->break->if->from->if->while->_document->getParent->if->matchesFrom->break->if->_countSiblings->setStartNode->do->if->matchesCount->while->_countSiblings->next->return->formatNumbers->return->formatNumbers->return->formatNumbers
SingleNodeCounter#getDefaultNodeCounter(Translet, DOM, DTMAxisIterator)::: single node counter get default node counter:::return->new->DefaultSingleNodeCounter
SingleNodeCounter.DefaultSingleNodeCounter#setStartNode(int)::: default single node counter set start node:::_document->getExpandedTypeID->_document->_document->getExpandedTypeID->getTypedAxisIterator->return
SingleNodeCounter.DefaultSingleNodeCounter#getCounter()::: default single node counter get counter:::result->if->if->return->else->if->Double->isNaN->return->else->if->Double->isInfinite->return->else->if->Double->isInfinite->return->else->else->next->_countSiblings->setStartNode->while->_countSiblings->next->return->formatNumbers
SingletonIterator#setStartNode(int):::Override the value of <tt>_node</tt> only when this object was constructed using the empty constructor.:::if->return->resetPosition->else->if->if->return->resetPosition->return
SingletonIterator#reset()::: singleton iterator reset:::if->return->resetPosition->else->temp->setStartNode->return
SingletonIterator#next()::: singleton iterator next:::result->return->returnNode
SingletonIterator#setMark()::: singleton iterator set mark:::
SingletonIterator#gotoMark()::: singleton iterator goto mark:::
SortingIterator#next()::: sorting iterator next:::return->getNode
SortingIterator#setStartNode(int)::: sorting iterator set start node:::try->_source->setStartNode->new->NodeSortRecordArr->while->_source->next->_factory->makeNodeSortRecord->addRecord->quicksort->return->catch->return->finally
SortingIterator#getPosition()::: sorting iterator get position:::return
SortingIterator#getLast()::: sorting iterator get last:::return
SortingIterator#setMark()::: sorting iterator set mark:::_source->setMark
SortingIterator#gotoMark()::: sorting iterator goto mark:::_source->gotoMark
SortingIterator#cloneIterator():::Clone a SortingIterator by cloning its source iterator and then sharing the factory and the array of NodeSortRecords.:::try->clone->super->clone->_source->cloneIterator->clone->setRestartable->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
SortingIterator#addRecord(NodeSortRecord)::: sorting iterator add record:::if->newArray->new->NodeSortRecordArr->System->arraycopy
SortingIterator#quicksort(int, int)::: sorting iterator quicksort:::while->q->partition->quicksort
SortingIterator#partition(int, int)::: sorting iterator partition:::x->i->j->while->while->x->compareTo->while->x->compareTo->if->t->else->return
SortSettings#getTranslet()::: sort settings get translet:::return
SortSettings#getSortOrders()::: sort settings get sort orders:::return
SortSettings#getTypes()::: sort settings get types:::return
SortSettings#getLocales()::: sort settings get locales:::return
SortSettings#getCollators()::: sort settings get collators:::return
SortSettings#getCaseOrders()::: sort settings get case orders:::return
StepIterator#setRestartable(boolean)::: step iterator set restartable:::_source->setRestartable->_iterator->setRestartable
StepIterator#cloneIterator()::: step iterator clone iterator:::try->clone->super->clone->_source->cloneIterator->_iterator->cloneIterator->setRestartable->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
StepIterator#setStartNode(int)::: step iterator set start node:::if->_source->setStartNode->_iterator->_source->next->setStartNode->return->resetPosition->return
StepIterator#reset()::: step iterator reset:::_source->reset->_iterator->_source->next->setStartNode->return->resetPosition
StepIterator#next()::: step iterator next:::for->node
StepIterator#setMark()::: step iterator set mark:::_source->setMark->_iterator->setMark
StepIterator#gotoMark()::: step iterator goto mark:::_source->gotoMark->_iterator->gotoMark
StripWhitespaceFilter#stripSpace(DOM, int, int)::: strip whitespace filter strip space:::
UnionIterator.LookAheadIterator#step()::: look ahead iterator step:::iterator->next->return
UnionIterator.LookAheadIterator#cloneHeapNode()::: look ahead iterator clone heap node:::clone->super->cloneHeapNode->iterator->cloneIterator->return
UnionIterator.LookAheadIterator#setMark()::: look ahead iterator set mark:::super->setMark->iterator->setMark
UnionIterator.LookAheadIterator#gotoMark()::: look ahead iterator goto mark:::super->gotoMark->iterator->gotoMark
UnionIterator.LookAheadIterator#isLessThan(HeapNode)::: look ahead iterator is less than:::comparand->return->_dom->lessThan
UnionIterator.LookAheadIterator#setStartNode(int)::: look ahead iterator set start node:::iterator->setStartNode->return
UnionIterator.LookAheadIterator#reset()::: look ahead iterator reset:::iterator->reset->return
UnionIterator#addIterator(DTMAxisIterator)::: union iterator add iterator:::new->LookAheadIterator->addHeapNode->return
XSLTCDTMManager#newInstance():::Obtain a new instance of a DTMManager:::return->new->XSLTCDTMManager
XSLTCDTMManager#createNewDTMManagerInstance():::Creates a new instance of the XSLTC DTM Manager service:::return->newInstance
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::return->getDTM
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::return->getDTM
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::return->getDTM
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean, boolean, int, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::return->getDTM
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean, boolean, int, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::if->source->getSystemId->println->dtmPos->getFirstFreeDTMID->documentID->if->staxSource->staxevent2sax->staxStream2SAX->if->staxSource->getXMLEventReader->xmlEventReader->staxSource->getXMLEventReader->new->StAXEvent2SAX->else->if->staxSource->getXMLStreamReader->xmlStreamReader->staxSource->getXMLStreamReader->new->StAXStream2SAX->dtm->if->new->SAXImpl->else->new->SAXImpl->dtm->source->getSystemId->setDocumentURI->addDTM->try->if->staxevent2sax->setContentHandler->staxevent2sax->parse->else->if->staxStream2SAX->setContentHandler->staxStream2SAX->parse->catch->throw->throw->new->com.sun.org.apache.xml.internal.utils.WrappedRuntimeException->finally->return->else->if->domsrc->node->domsrc->getNode->dom2sax->new->DOM2SAX->dtm->if->new->SAXImpl->else->new->SAXImpl->dtm->source->getSystemId->setDocumentURI->addDTM->dom2sax->setContentHandler->try->dom2sax->parse->catch->throw->throw->new->com.sun.org.apache.xml.internal.utils.WrappedRuntimeException->finally->return->else->isSAXSource->isStreamSource->if->reader->xmlSource->if->else->getXMLReader->SAXSource->sourceToInputSource->urlOfSource->xmlSource->getSystemId->if->try->SystemIDResolver->getAbsoluteURI->catch->println->finally->xmlSource->setSystemId->dtm->if->new->SAXImpl->else->new->SAXImpl->addDTM->if->return->reader->dtm->getBuilder->setContentHandler->if->reader->getDTDHandler->reader->setDTDHandler->if->reader->getErrorHandler->reader->setErrorHandler->try->reader->setProperty->catch->finally->try->reader->parse->catch->throw->throw->new->com.sun.org.apache.xml.internal.utils.WrappedRuntimeException->finally->if->releaseXMLReader->if->println->dtm->dumpDTM->return->else->throw->XMLMessages->new->ObjectArr->createXMLMessage->new->DTMException

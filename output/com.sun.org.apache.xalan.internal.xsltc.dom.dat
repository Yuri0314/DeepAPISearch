AdaptiveResultTreeImpl#characters(int, SerializationHandler):::Dispatch the character content of a node to an output handler:::if->_dom->characters->else->super->characters
AdaptiveResultTreeImpl#getNodeIdent(int):::Return the node identity from a node handle.:::if->return->_dom->getNodeIdent->else->return->super->getNodeIdent
AdaptiveResultTreeImpl#getNodeHandle(int):::Return the node handle from a node identity.:::if->return->_dom->getNodeHandle->else->return->super->getNodeHandle
BitArray#setMask(int):::Set the mask for this bit array:::
BitArray#getMask():::See setMask():::return
BitArray#size():::Returns the size of this bit array (in bits).:::return
BitArray#getBit(int):::Returns true if the given bit is set:::if->if->throw->new->Error->return
BitArray#getNextBit(int):::Returns the next set bit from a given position:::for->i->return
BitArray#data():::Returns the integer array in which the bit array is contained:::return
BitArray#setBit(int):::Sets a given bit:::if->if->throw->new->Error->if->return->i->if->if
BitArray#merge(BitArray):::Merge two bit arrays:::if->else->if->start->stop->if->if->for->i->else->if->for->i->return
BitArray#resize(int):::Resizes the bit array - try to avoid using this method!!!:::if->newBits->new->intArr->System->arraycopy
BitArray#readExternal(ObjectInput):::Read the whole tree from a file (serialized):::in->readInt->in->readInt->in->readObject
DocumentCache.CachedDocument#loadDocument(String):::Loads the document and updates build-time (latency) statistics:::try->stamp->System->currentTimeMillis->_dtmManager->new->InputSource->new->SAXSource->getDTM->_dom->setDocumentURI->thisTime->System->currentTimeMillis->if->else->catch->finally
DocumentCache#retrieveDocument(String, String, Translet):::Returns a document either by finding it in the cache or downloading it and putting it in the cache.:::doc->uri->if->baseURI->equals->try->SystemIDResolver->getAbsoluteURI->catch->finally->if->lookupDocument->new->CachedDocument->if->return->doc->getLastModified->setLastModified->insertDocument->else->now->System->currentTimeMillis->chk->doc->getLastChecked->doc->setLastChecked->if->doc->setLastChecked->last->getLastModified->if->doc->getLastModified->new->CachedDocument->if->return->doc->getLastModified->setLastModified->replaceDocument->dom->doc->getDocument->if->return->doc->incAccessCount->translet->translet->prepassDocument->return->doc->getDocument
DocumentCache#getStatistics(PrintWriter):::Outputs the cache statistics:::out->println->for->i->out->println
DOMAdapter#getIterator():::Returns singleton iterator containg the document root:::return->_dom->getIterator
DOMAdapter#getResultTreeFrag(int, int):::Return a instance of a DOM class to be used as an RTF:::if->return->_enhancedDOM->getResultTreeFrag->else->return->_dom->getResultTreeFrag
DOMAdapter#getResultTreeFrag(int, int, boolean):::Return a instance of a DOM class to be used as an RTF:::if->return->_enhancedDOM->getResultTreeFrag->else->return->_dom->getResultTreeFrag
DOMAdapter#getOutputDomBuilder():::Returns a SerializationHandler class wrapped in a SAX adapter.:::return->_dom->getOutputDomBuilder
DOMWSFilter#getShouldStripSpace(int, DTM):::Test whether whitespace-only text nodes are visible in the logical view of DTM:::if->dom->type->if->mappableDOM->mapping->if->else->m_mappings->get->if->mappableDOM->m_translet->getNamesArray->m_translet->getUrisArray->m_translet->getTypesArray->getMapping->m_mappings->put->expType->mappableDOM->getExpandedTypeID->if->else->else->return->if->m_filter->stripSpace->return->else->return->else->return
DupFilterIterator#setStartNode(int):::Set the start node for this iterator:::if->sourceIsKeyIndex->if->return->if->_source->setStartNode->_nodes->clear->while->_source->next->_nodes->add->if->_nodes->sort->_nodes->cardinality->resetPosition->return
KeyIndex#add(String, int, int):::Adds a node to the node list for a given value:::if->new->HashMap<>->_rootToIndexMap->put->nodes->_index->get->if->new->IntegerArray->_index->put->nodes->add->else->if->nodes->nodes->cardinality->at->nodes->add
KeyIndex#merge(KeyIndex):::Merge the current value's nodeset set by lookupKey() with _nodes.:::if->return->if->if->clone->else->_nodes->merge
KeyIndex#lookupId(Object):::This method must be called by the code generated by the id() function prior to returning the node iterator:::values->new->StringTokenizer->while->values->hasMoreElements->token->values->nextElement->nodes->_index->get->if->_enhancedDOM->hasDOMSource->getDOMNodeById->if->continue->if->nodes->clone->else->_nodes->merge
KeyIndex#getDOMNodeById(String):::Return an IntegerArray for the DOM Node which has the given id.:::nodes->if->ident->_enhancedDOM->getElementById->if->root->_enhancedDOM->getDocument->index->_rootToIndexMap->get->if->new->HashMap<>->_rootToIndexMap->put->else->index->get->if->new->IntegerArray->index->put->nodes->_enhancedDOM->getNodeHandle->add->return
KeyIndex#lookupKey(Object):::This method must be called by the code generated by the key() function prior to returning the node iterator. Use of an instance of this class as a DTMAxisIterator is deprecated.:::nodes->_index->get->nodes->clone
KeyIndex#next():::Callers should not call next() after it returns END. Use of an instance of this class as a DTMAxisIterator is deprecated.:::if->return->return->_nodes->cardinality->_dom->_nodes->at->getNodeHandle
KeyIndex#containsID(int, Object):::Given a context node and the argument to the XPath id function, checks whether the context node is in the set of nodes that results from that reference to the id function:::string->rootHandle->_dom->getAxisIterator->setStartNode->next->index->_rootToIndexMap->get->values->new->StringTokenizer->while->values->hasMoreElements->token->values->nextElement->nodes->if->index->get->if->_enhancedDOM->hasDOMSource->getDOMNodeById->if->nodes->indexOf->return->return
KeyIndex#containsKey(int, Object):::Given a context node and the second argument to the XSLT key function, checks whether the context node is in the set of nodes that results from that reference to the key function:::rootHandle->_dom->getAxisIterator->setStartNode->next->index->_rootToIndexMap->get->if->nodes->index->get->return->nodes->indexOf->return
KeyIndex#reset():::Resets the iterator to the last start node. Use of an instance of this class as a DTMAxisIterator is deprecated.:::return
KeyIndex#getLast():::Returns the number of elements in this iterator. Use of an instance of this class as a DTMAxisIterator is deprecated.:::return->_nodes->cardinality
KeyIndex#getPosition():::Returns the position of the current node in the set. Use of an instance of this class as a DTMAxisIterator is deprecated.:::return
KeyIndex#setMark():::Remembers the current node for the next call to gotoMark(). Use of an instance of this class as a DTMAxisIterator is deprecated.:::
KeyIndex#gotoMark():::Restores the current node remembered by setMark(). Use of an instance of this class as a DTMAxisIterator is deprecated.:::
KeyIndex#setStartNode(int):::Set start to END should 'close' the iterator, i.e:::if->else->if->return
KeyIndex#getStartNode():::Get start to END should 'close' the iterator, i.e:::return
KeyIndex#isReverse():::True if this iterator has a reversed axis. Use of an instance of this class as a DTMAxisIterator is deprecated.:::return
KeyIndex#cloneIterator():::Returns a deep copy of this iterator. Use of an instance of this class as a DTMAxisIterator is deprecated.:::other->new->KeyIndex->return
KeyIndex#getKeyIndexIterator(Object, boolean):::Create a KeyIndexIterator that iterates over the nodes that result from a reference to the XSLT key function or XPath id function.:::if->return->getKeyIndexIterator->else->return->BasisLibrary->stringF->getKeyIndexIterator
KeyIndex#getKeyIndexIterator(String, boolean):::Create a KeyIndexIterator that iterates over the nodes that result from a reference to the XSLT key function or XPath id function.:::return->new->KeyIndexIterator
KeyIndex#getKeyIndexIterator(DTMAxisIterator, boolean):::Create a KeyIndexIterator that iterates over the nodes that result from a reference to the XSLT key function or XPath id function.:::return->new->KeyIndexIterator
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#step():::Advance to the next node represented by this HeapNode:::if->_nodes->cardinality->_nodes->at->else->return
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#cloneHeapNode():::Creates a deep copy of this HeapNode:::clone->super->cloneHeapNode->return
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#setMark():::Remembers the current node for the next call to #gotoMark().:::
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#gotoMark():::Restores the current node remembered by #setMark().:::
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#isLessThan(HeapNode):::Performs a comparison of the two heap nodes:::return
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#setStartNode(int):::Sets context with respect to which this heap node is evaluated. This has no real effect on this kind of heap node:::return
KeyIndex.KeyIndexIterator.KeyIndexHeapNode#reset():::Reset the heap node back to its beginning.:::return
KeyIndex.KeyIndexIterator#lookupNodes(int, String):::Retrieve nodes for a particular key value or a particular id argument value.:::result->index->_rootToIndexMap->get->if->values->new->StringTokenizer->while->values->hasMoreElements->token->values->nextElement->nodes->if->index->get->if->_enhancedDOM->hasDOMSource->getDOMNodeById->if->if->nodes->clone->else->result->merge->else->if->index->get->return
KeyIndex.KeyIndexIterator#setStartNode(int):::Set context node for the iterator:::if->_keyValueIterator->setStartNode->init->return->super->setStartNode
KeyIndex.KeyIndexIterator#next():::Get the next node in the iteration.:::nodeHandle->if->if->_nodes->cardinality->_nodes->at->returnNode->else->else->super->next->return
KeyIndex.KeyIndexIterator#reset():::Resets the iterator to the last start node.:::if->init->else->super->reset->return->resetPosition
KeyIndex.KeyIndexIterator#init():::Evaluate the reference to the key or id function with the context specified by #setStartNode(int) and set up this iterator to iterate over the DTM nodes that are to be returned.:::super->init->rootHandle->_dom->getAxisIterator->setStartNode->next->if->lookupNodes->if->else->keyValues->_keyValueIterator->reset->retrievedKeyValueIdx->foundNodes->for->keyValueNode->keyValues->next->keyValues->next->if
KeyIndex.KeyIndexIterator#getLast():::Returns the number of nodes in this iterator.:::return->_nodes->cardinality->super->getLast
KeyIndex.KeyIndexIterator#getNodeByPosition(int):::Return the node at the given position.:::node->if->if->if->_nodes->cardinality->_nodes->at->else->_nodes->cardinality->else->super->getNodeByPosition->return
LoadDocument#documentF(Object, DTMAxisIterator, String, AbstractTranslet, DOM):::Interprets the arguments passed from the document() function (see com/sun/org/apache/xalan/internal/xsltc/compiler/DocumentCall.java) and returns an iterator containing the requested nodes:::baseURI->arg2FirstNode->arg2->next->if->return->EmptyIterator->getInstance->else->dom->getDocumentURI->if->SystemIDResolver->isAbsoluteURI->SystemIDResolver->getAbsoluteURIFromRelative->try->if->if->length->return->document->else->return->document->else->if->return->document->else->err->arg1->toString->throw->new->IllegalArgumentException->catch->throw->new->TransletException->finally
LoadDocument#documentF(Object, String, AbstractTranslet, DOM):::Interprets the arguments passed from the document() function (see com/sun/org/apache/xalan/internal/xsltc/compiler/DocumentCall.java) and returns an iterator containing the requested nodes:::try->if->if->baseURI->if->SystemIDResolver->isAbsoluteURI->SystemIDResolver->getAbsoluteURIFromRelative->href->if->href->length->templates->translet->getTemplates->sdom->if->templates->getStylesheetDOM->if->return->document->else->return->document->else->return->document->else->if->return->document->else->err->arg->toString->throw->new->IllegalArgumentException->catch->throw->new->TransletException->finally
MultiDOM#getIterator():::Returns singleton iterator containing the document root:::return->_main->getIterator
MultiDOM#getOutputDomBuilder():::Returns a DOMBuilder class wrapped in a SAX adapter.:::return->_main->getOutputDomBuilder
MultiValuedNodeHeapIterator.HeapNode#step():::Advance to the next node represented by this HeapNode:::
MultiValuedNodeHeapIterator.HeapNode#cloneHeapNode():::Creates a deep copy of this HeapNode:::clone->try->super->clone->catch->BasisLibrary->e->toString->runTimeError->return->finally->return
MultiValuedNodeHeapIterator.HeapNode#setMark():::Remembers the current node for the next call to #gotoMark().:::
MultiValuedNodeHeapIterator.HeapNode#gotoMark():::Restores the current node remembered by #setMark().:::
MultiValuedNodeHeapIterator.HeapNode#isLessThan(HeapNode):::Performs a comparison of the two heap nodes:::
MultiValuedNodeHeapIterator.HeapNode#setStartNode(int):::Sets context with respect to which this heap node is evaluated.:::
MultiValuedNodeHeapIterator.HeapNode#reset():::Reset the heap node back to its beginning.:::
NodeCounter#setStartNode(int):::Set the start node for this counter:::
NodeCounter#setValue(double):::If the user specified a value attribute, use this instead of counting nodes.:::return
NodeCounter#setFormatting(String, String, String, String, String):::Sets formatting fields before calling formatNumbers().:::parseStringToAnInt->setTokens
NodeCounter#setDefaultFormatting():::Sets formatting fields to their default values.:::setFormatting->return
NodeCounter#getCounter():::Returns the position of <tt>node</tt> according to the level and the from and count patterns.:::
NodeCounter#getCounter(String, String, String, String, String):::Returns the position of <tt>node</tt> according to the level and the from and count patterns:::setFormatting->return->getCounter
NodeCounter#matchesCount(int):::Returns true if <tt>node</tt> matches the count pattern:::return->_document->getExpandedTypeID
NodeCounter#matchesFrom(int):::Returns true if <tt>node</tt> matches the from pattern:::return
NodeCounter#formatNumbers(int):::Format a single value according to the format parameters.:::return->new->intArr->formatNumbers
NodeCounter#formatNumbers(int[]):::Format a sequence of values according to the format paramaters set by calling setFormatting().:::nValues->isEmpty->for->i->if->return->isFirst->t->n->s->_tempBuffer->setLength->buffer->if->buffer->_separToks->get->append->while->value->if->if->buffer->_separToks->get->append->_formatToks->get->formatValue->if->if->if->buffer->_separToks->_separToks->size->get->append->return->buffer->toString
NodeIteratorBase#setRestartable(boolean):::Setter for _isRestartable flag.:::
NodeIteratorBase#setStartNode(int):::Initialize iterator using a node:::
NodeIteratorBase#reset():::Reset this iterator using state from last call to setStartNode().:::temp->setStartNode->return
NodeIteratorBase#includeSelf():::Setter for _includeSelf flag.:::return
NodeIteratorBase#getLast():::Default implementation of getLast():::if->temp->setMark->reset->do->while->next->gotoMark->return
NodeIteratorBase#getPosition():::Returns the position() in this iterator.:::return
NodeIteratorBase#isReverse():::Indicates if position in this iterator is computed in reverse document order:::return
NodeIteratorBase#cloneIterator():::Clones and resets this iterator:::try->clone->super->clone->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
NodeIteratorBase#returnNode(int):::Utility method that increments position and returns its argument.:::return
NodeIteratorBase#resetPosition():::Reset the position in this iterator.:::return
NodeSortRecord#initialize(int, int, DOM, SortSettings):::This method allows the caller to set the values that could not be passed to the default constructor.:::levels->settings->getSortOrders->new->ObjectArr->colFactClassname->try->SecuritySupport->getSystemProperty->catch->finally->if->try->candObj->ObjectFactory->findProviderClass->catch->throw->new->TransletException->finally->locales->settings->getLocales->new->CollatorArr->for->i->else->settings->getCollators
NodeSortRecord#getNode():::Returns the node for this sort object:::return
NodeSortRecord#compareTo(NodeSortRecord):::Compare this sort element to another:::cmp->level->sortOrder->_settings->getSortOrders->levels->_settings->getSortOrders->compareTypes->_settings->getTypes->for->return
NodeSortRecord#getCollator():::Returns the array of Collators used for text comparisons in this object:::return
NodeSortRecord#extractValueFromDOM(DOM, int, int, AbstractTranslet, int):::Extract the sort value for a level of this key.:::
NodeSortRecordFactory#makeNodeSortRecord(int, int):::Create an instance of a sub-class of NodeSortRecord:::try->sortRecord->_class->getConstructor->newInstance->sortRecord->initialize->return->catch->throw->ex->getMessage->new->InstantiationException->finally
SAXImpl#setDocumentURI(String):::Define the origin of the document from which the tree was built:::if->SystemIDResolver->getAbsoluteURI->setDocumentBaseURI
SAXImpl#getDocumentURI():::Returns the origin of the document from which the tree was built:::baseURI->getDocumentBaseURI->return
SAXImpl#lookupNamespace(int, String):::Lookup a namespace URI from a prefix starting at node:::anode->nsnode->ancestors->new->AncestorIterator->if->isElement->ancestors->includeSelf->ancestors->setStartNode->while->ancestors->next->namespaces->new->NamespaceIterator->namespaces->setStartNode->while->namespaces->next->if->getLocalName->equals->return->getNodeValue->BasisLibrary->runTimeError->return
SAXImpl#isElement(int):::Returns 'true' if a specific node is an element (of any type):::return->getNodeType
SAXImpl#isAttribute(int):::Returns 'true' if a specific node is an attribute (of any type):::return->getNodeType
SAXImpl#getSize():::Returns the number of nodes in the tree (used for indexing):::return->getNumberOfNodes
SAXImpl#setFilter(StripFilter):::Part of the DOM interface - no function here.:::
SAXImpl#lessThan(int, int):::Returns true if node1 comes before node2 in document order:::if->return->if->return->return
SAXImpl#makeNode(int):::Create an org.w3c.dom.Node from a node in the tree:::if->new->NodeArr->nodeID->makeNodeIdentity->if->return->else->if->return->new->DTMNodeProxy->else->return->new->DTMNodeProxy
SAXImpl#makeNode(DTMAxisIterator):::Create an org.w3c.dom.Node from a node in an iterator The iterator most be started before this method is called:::return->iter->next->makeNode
SAXImpl#makeNodeList(int):::Create an org.w3c.dom.NodeList from a node in the tree:::if->new->NodeListArr->nodeID->makeNodeIdentity->if->return->else->if->return->new->SingletonIterator->new->DTMAxisIterNodeList->else->return->new->SingletonIterator->new->DTMAxisIterNodeList
SAXImpl#makeNodeList(DTMAxisIterator):::Create an org.w3c.dom.NodeList from a node iterator The iterator most be started before this method is called:::return->new->DTMAxisIterNodeList
SAXImpl.TypedNamespaceIterator#next():::Get the next node in the iteration.:::if->_nsPrefix->length->return->node->for->super->next->super->next->return
SAXImpl#orderNodes(DTMAxisIterator, int):::Encapsulates an iterator in an OrderedIterator to ensure node order:::return->new->DupFilterIterator
SAXImpl#getIterator():::Returns singleton iterator containg the document root Works for them main document (mark == 0):::return->getDocument->new->SingletonIterator
SAXImpl#getNSType(int):::Get mapping from DOM namespace types to external namespace types:::s->getNamespaceURI->if->return->eType->getIdForNamespace->return->_nsIndex->get
SAXImpl#getNamespaceType(int):::Returns the namespace type of a specific node:::return->super->getNamespaceType
SAXImpl#getGeneralizedType(String):::Returns the internal type associated with an expanded QName:::return->getGeneralizedType
SAXImpl#getGeneralizedType(String, boolean):::Returns the internal type associated with an expanded QName:::lName->ns->index->code->if->name->lastIndexOf->name->substring->lNameStartIdx->if->name->charAt->else->name->substring->return->m_expandedNameTable->getExpandedTypeID
SAXImpl#getMapping(String[], String[], int[]):::Get mapping from DOM element/attribute types to external types:::if->return->getMapping2->i->namesLength->exLength->m_expandedNameTable->getSize->result->new->shortArr->for->for->for->return
SAXImpl#getReverseMapping(String[], String[], int[]):::Get mapping from external element/attribute types to DOM types:::i->result->new->intArr->for->for->return
SAXImpl#getNamespaceMapping(String[]):::Get mapping from DOM namespace types to external namespace types:::i->nsLength->mappingLength->result->new->shortArr->for->for->return
SAXImpl#getReverseNamespaceMapping(String[]):::Get mapping from external namespace types to DOM namespace types:::i->length->result->new->shortArr->for->return
SAXImpl#migrateTo(DTMManager):::Migrate a DTM built with an old DTMManager to a new DTMManager:::super->migrateTo->if
SAXImpl#getElementById(String):::Return the node identity for a given id String:::node->_document->getElementById->if->id->_node2Ids->get->return->else->return
SAXImpl#hasDOMSource():::Return true if the input source is DOMSource.:::return
SAXImpl#getShouldStripWhitespace():::Find out whether or not to strip whitespace nodes.:::return->super->getShouldStripWhitespace
SAXImpl#characters(char[], int, int):::SAX2: Receive notification of character data.:::super->characters->getNumberOfNodes
SAXImpl#startDocument():::SAX2: Receive notification of the beginning of a document.:::super->startDocument->_nsIndex->put->definePrefixAndUri
SAXImpl#endDocument():::SAX2: Receive notification of the end of a document.:::super->endDocument->handleTextEscaping->m_expandedNameTable->getSize
SAXImpl#startElement(String, String, String, Attributes, Node):::Specialized interface used by DOM2SAX:::this->startElement->if->_node2Ids->m_parents->peek->put
SAXImpl#startElement(String, String, String, Attributes):::SAX2: Receive notification of the beginning of an element.:::super->startElement->handleTextEscaping->if->index->attributes->getIndex->if->attributes->getValue->m_parents->peek->xmlSpaceDefine
SAXImpl#endElement(String, String, String):::SAX2: Receive notification of the end of an element.:::super->endElement->handleTextEscaping->if->xmlSpaceRevert
SAXImpl#processingInstruction(String, String):::SAX2: Receive notification of a processing instruction.:::super->processingInstruction->handleTextEscaping
SAXImpl#ignorableWhitespace(char[], int, int):::SAX2: Receive notification of ignorable whitespace in element content:::super->ignorableWhitespace->getNumberOfNodes
SAXImpl#startPrefixMapping(String, String):::SAX2: Begin the scope of a prefix-URI Namespace mapping.:::super->startPrefixMapping->handleTextEscaping->definePrefixAndUri
SAXImpl#comment(char[], int, int):::SAX2: Report an XML comment anywhere in the document.:::super->comment->handleTextEscaping
SAXImpl#print(int, int):::Prints the whole tree to standard output:::switch->getNodeType->getFirstChild->print->break->getStringValueX->print->break->name->getNodeName->print->for->a->getFirstAttribute->getNextAttribute->print->for->child->getFirstChild->getNextSibling->println->break
SAXImpl#getNodeName(int):::Returns the name of a node (attribute or element).:::nodeh->type->getNodeType->switch->return->return->this->getLocalName->return->super->getNodeName
SAXImpl#getNamespaceName(int):::Returns the namespace URI to which a node belongs:::if->return->s->return->getNamespaceURI
SAXImpl#getAttributeNode(int, int):::Returns the attribute node of a given type (if any) for an element:::for->attr->getFirstAttribute->getNextAttribute->return
SAXImpl#getAttributeValue(int, int):::Returns the value of a given attribute type of a given element:::attr->getAttributeNode->return->getStringValueX
SAXImpl#getAttributeValue(String, int):::This method is for testing/debugging only:::return->getGeneralizedType->getAttributeValue
SAXImpl#getChildren(int):::Returns an iterator with all the children of a given node:::return->new->ChildrenIterator->setStartNode
SAXImpl#getTypedChildren(int):::Returns an iterator with all children of a specific type for a given node (element):::return->new->TypedChildrenIterator
SAXImpl#getAxisIterator(int):::This is a shortcut to the iterators that implement the supported XPath axes (only namespace::) is not supported:::switch->return->new->SingletonIterator->return->new->ChildrenIterator->return->new->ParentIterator->return->new->AncestorIterator->return->new->AncestorIterator->includeSelf->return->new->AttributeIterator->return->new->DescendantIterator->return->new->DescendantIterator->includeSelf->return->new->FollowingIterator->return->new->PrecedingIterator->return->new->FollowingSiblingIterator->return->new->PrecedingSiblingIterator->return->new->NamespaceIterator->return->new->RootIterator->BasisLibrary->Axis->getNames->runTimeError->return
SAXImpl#getTypedAxisIterator(int, int):::Similar to getAxisIterator, but this one returns an iterator containing nodes of a typed axis (ex.: child::foo):::if->return->new->TypedChildrenIterator->if->return->switch->return->new->TypedSingletonIterator->return->new->TypedChildrenIterator->return->new->ParentIterator->setNodeType->return->new->TypedAncestorIterator->return->new->TypedAncestorIterator->includeSelf->return->new->TypedAttributeIterator->return->new->TypedDescendantIterator->return->new->TypedDescendantIterator->includeSelf->return->new->TypedFollowingIterator->return->new->TypedPrecedingIterator->return->new->TypedFollowingSiblingIterator->return->new->TypedPrecedingSiblingIterator->return->new->TypedNamespaceIterator->return->new->TypedRootIterator->BasisLibrary->Axis->getNames->runTimeError->return
SAXImpl#getNamespaceAxisIterator(int, int):::Do not think that this returns an iterator for the namespace axis:::if->return->else->switch->return->new->NamespaceChildrenIterator->return->new->NamespaceAttributeIterator->return->new->NamespaceWildcardIterator
SAXImpl.NamespaceWildcardIterator#setStartNode(int):::Set start to END should 'close' the iterator, i.e:::if->m_baseIterator->setStartNode->resetPosition->return
SAXImpl.NamespaceWildcardIterator#next():::Get the next node in the iteration.:::node->while->m_baseIterator->next->if->getNSType->return->returnNode->return
SAXImpl.NamespaceWildcardIterator#cloneIterator():::Returns a deep copy of this iterator:::try->nestedClone->m_baseIterator->cloneIterator->clone->super->clone->return->catch->BasisLibrary->e->toString->runTimeError->return->finally
SAXImpl.NamespaceWildcardIterator#isReverse():::True if this iterator has a reversed axis.:::return->m_baseIterator->isReverse
SAXImpl.NamespaceChildrenIterator#setStartNode(int):::Set start to END should 'close' the iterator, i.e:::if->getDocument->if->return->resetPosition->return
SAXImpl.NamespaceChildrenIterator#next():::Get the next node in the iteration.:::if->for->node->makeNodeIdentity->_firstch->_nextsib->_nextsib->return
SAXImpl.NamespaceAttributeIterator#setStartNode(int):::Set start to END should 'close' the iterator, i.e:::if->getDocument->if->nsType->for->getFirstAttribute->getNextAttribute->return->resetPosition->return
SAXImpl.NamespaceAttributeIterator#next():::Get the next node in the iteration.:::node->nsType->nextNode->if->return->for->getNextAttribute->getNextAttribute->return->returnNode
SAXImpl#getTypedDescendantIterator(int):::Returns an iterator with all descendants of a node that are of a given type.:::return->new->TypedDescendantIterator
SAXImpl#getNthDescendant(int, int, boolean):::Returns the nth descendant of a node:::return->new->NthDescendantIterator
SAXImpl#characters(int, SerializationHandler):::Copy the string value of a node directly to an output handler:::if->try->dispatchCharactersEvents->catch->throw->new->TransletException->finally
SAXImpl#copy(DTMAxisIterator, SerializationHandler):::Copy a node-set to an output handler:::node->while->nodes->next->copy
SAXImpl#copy(SerializationHandler):::Copy the whole tree to an output handler:::getDocument->copy
SAXImpl#copy(int, SerializationHandler):::Performs a deep copy (ref:::copy
SAXImpl#shallowCopy(int, SerializationHandler):::Performs a shallow copy (ref:::nodeID->makeNodeIdentity->exptype->_exptype2->type->_exptype2Type->try->switch->name->copyElement->copyNS->return->return->copyTextNode->return->copyPI->return->handler->getStringValueX->comment->return->handler->getNodeNameX->getNodeValue->namespaceAfterStartElement->return->copyAttribute->return->uri1->getNamespaceName->if->uri1->length->prefix->getPrefix->handler->namespaceAfterStartElement->handler->getNodeName->getNodeValue->addAttribute->return->catch->throw->new->TransletException->finally
SAXImpl#getLanguage(int):::Returns a node' defined language for a node (if any):::parent->while->if->getNodeType->langAttr->getAttributeNode->if->return->getNodeValue->getParent->return
SAXImpl#getBuilder():::Returns an instance of the DOMBuilder inner class This class will consume the input document through a SAX2 interface and populate the tree.:::return
SAXImpl#getOutputDomBuilder():::Return a SerializationHandler for output handling:::return->new->ToXMLSAXHandler
SAXImpl#getResultTreeFrag(int, int):::Return a instance of a DOM class to be used as an RTF:::return->getResultTreeFrag
SAXImpl#getResultTreeFrag(int, int, boolean):::Return a instance of a DOM class to be used as an RTF:::if->if->dtmPos->_dtmManager->getFirstFreeDTMID->rtf->new->SimpleResultTreeImpl->_dtmManager->addDTM->return->else->return->new->SimpleResultTreeImpl->else->if->if->dtmPos->_dtmManager->getFirstFreeDTMID->rtf->new->AdaptiveResultTreeImpl->_dtmManager->addDTM->return->else->return->new->AdaptiveResultTreeImpl->else->return->_dtmManager->getDTM
SAXImpl#getElementsWithIDs():::Return the attributes map.:::return
SAXImpl#getUnparsedEntityURI(String):::The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3.3 Unparsed Entities]):::if->uri->doctype->_document->getDoctype->if->entities->doctype->getEntities->if->return->entity->entities->getNamedItem->if->return->notationName->entity->getNotationName->if->entity->getSystemId->if->entity->getPublicId->return->else->return->super->getUnparsedEntityURI
SimpleResultTreeImpl#characters(int, SerializationHandler):::Dispatch the character content of a node to an output handler:::nodeID->getNodeIdent->if->escapeBit->oldEscapeSetting->try->for->i->catch->throw->new->TransletException->finally
SimpleResultTreeImpl#getNodeIdent(int):::Return the node identity from a node handle.:::return
SimpleResultTreeImpl#getNodeHandle(int):::Return the node handle from a node identity.:::return
SingletonIterator#setStartNode(int):::Override the value of <tt>_node</tt> only when this object was constructed using the empty constructor.:::if->return->resetPosition->else->if->if->return->resetPosition->return
SortingIterator#cloneIterator():::Clone a SortingIterator by cloning its source iterator and then sharing the factory and the array of NodeSortRecords.:::try->clone->super->clone->_source->cloneIterator->clone->setRestartable->return->clone->reset->catch->BasisLibrary->e->toString->runTimeError->return->finally
XSLTCDTMManager#newInstance():::Obtain a new instance of a DTMManager:::return->new->XSLTCDTMManager
XSLTCDTMManager#createNewDTMManagerInstance():::Creates a new instance of the XSLTC DTM Manager service:::return->newInstance
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::return->getDTM
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::return->getDTM
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::return->getDTM
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean, boolean, int, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::return->getDTM
XSLTCDTMManager#getDTM(Source, boolean, DTMWSFilter, boolean, boolean, boolean, int, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::if->source->getSystemId->println->dtmPos->getFirstFreeDTMID->documentID->if->staxSource->staxevent2sax->staxStream2SAX->if->staxSource->getXMLEventReader->xmlEventReader->staxSource->getXMLEventReader->new->StAXEvent2SAX->else->if->staxSource->getXMLStreamReader->xmlStreamReader->staxSource->getXMLStreamReader->new->StAXStream2SAX->dtm->if->new->SAXImpl->else->new->SAXImpl->dtm->source->getSystemId->setDocumentURI->addDTM->try->if->staxevent2sax->setContentHandler->staxevent2sax->parse->else->if->staxStream2SAX->setContentHandler->staxStream2SAX->parse->catch->throw->throw->new->com.sun.org.apache.xml.internal.utils.WrappedRuntimeException->finally->return->else->if->domsrc->node->domsrc->getNode->dom2sax->new->DOM2SAX->dtm->if->new->SAXImpl->else->new->SAXImpl->dtm->source->getSystemId->setDocumentURI->addDTM->dom2sax->setContentHandler->try->dom2sax->parse->catch->throw->throw->new->com.sun.org.apache.xml.internal.utils.WrappedRuntimeException->finally->return->else->isSAXSource->isStreamSource->if->reader->xmlSource->if->else->getXMLReader->SAXSource->sourceToInputSource->urlOfSource->xmlSource->getSystemId->if->try->SystemIDResolver->getAbsoluteURI->catch->println->finally->xmlSource->setSystemId->dtm->if->new->SAXImpl->else->new->SAXImpl->addDTM->if->return->reader->dtm->getBuilder->setContentHandler->if->reader->getDTDHandler->reader->setDTDHandler->if->reader->getErrorHandler->reader->setErrorHandler->try->reader->setProperty->catch->finally->try->reader->parse->catch->throw->throw->new->com.sun.org.apache.xml.internal.utils.WrappedRuntimeException->finally->if->releaseXMLReader->if->println->dtm->dumpDTM->return->else->throw->XMLMessages->new->ObjectArr->createXMLMessage->new->DTMException

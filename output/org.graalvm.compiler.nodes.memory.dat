org.graalvm.compiler.nodes.memory.Plugin_MemoryAnchorNode_anchor#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ memory anchor node_anchor execute
org.graalvm.compiler.nodes.memory.Plugin_MemoryAnchorNode_anchor#getSource()->Class::: plugin_ memory anchor node_anchor get source
org.graalvm.compiler.nodes.memory.PluginFactory_MemoryAnchorNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ memory anchor node register plugins
org.graalvm.compiler.nodes.memory.AbstractWriteNode#stateAfter()->FrameState::: abstract write node state after
org.graalvm.compiler.nodes.memory.AbstractWriteNode#setStateAfter(FrameState)->void::: abstract write node set state after
org.graalvm.compiler.nodes.memory.AbstractWriteNode#hasSideEffect()->boolean::: abstract write node has side effect
org.graalvm.compiler.nodes.memory.AbstractWriteNode#value()->ValueNode::: abstract write node value
org.graalvm.compiler.nodes.memory.AbstractWriteNode#isAllowedUsageType(InputType)->boolean::: abstract write node is allowed usage type
org.graalvm.compiler.nodes.memory.AbstractWriteNode#getLastLocationAccess()->MemoryNode::: abstract write node get last location access
org.graalvm.compiler.nodes.memory.AbstractWriteNode#setLastLocationAccess(MemoryNode)->void::: abstract write node set last location access
org.graalvm.compiler.nodes.memory.AbstractWriteNode#getAccessStamp()->Stamp::: abstract write node get access stamp
org.graalvm.compiler.nodes.memory.Access#getAddress()->AddressNode::: access get address
org.graalvm.compiler.nodes.memory.Access#setAddress(AddressNode)->void::: access set address
org.graalvm.compiler.nodes.memory.Access#getLocationIdentity()->LocationIdentity::: access get location identity
org.graalvm.compiler.nodes.memory.Access#canNullCheck()->boolean::: access can null check
org.graalvm.compiler.nodes.memory.FixedAccessNode#getAddress()->AddressNode::: fixed access node get address
org.graalvm.compiler.nodes.memory.FixedAccessNode#setAddress(AddressNode)->void::: fixed access node set address
org.graalvm.compiler.nodes.memory.FixedAccessNode#getLocationIdentity()->LocationIdentity::: fixed access node get location identity
org.graalvm.compiler.nodes.memory.FixedAccessNode#getNullCheck()->boolean::: fixed access node get null check
org.graalvm.compiler.nodes.memory.FixedAccessNode#setNullCheck(boolean)->void::: fixed access node set null check
org.graalvm.compiler.nodes.memory.FixedAccessNode#canDeoptimize()->boolean::: fixed access node can deoptimize
org.graalvm.compiler.nodes.memory.FixedAccessNode#getGuard()->GuardingNode::: fixed access node get guard
org.graalvm.compiler.nodes.memory.FixedAccessNode#setGuard(GuardingNode)->void::: fixed access node set guard
org.graalvm.compiler.nodes.memory.FixedAccessNode#getBarrierType()->BarrierType::: fixed access node get barrier type
org.graalvm.compiler.nodes.memory.FloatableAccessNode#asFloatingNode()->FloatingAccessNode::: floatable access node as floating node
org.graalvm.compiler.nodes.memory.FloatableAccessNode#setForceFixed(boolean)->void::: floatable access node set force fixed
org.graalvm.compiler.nodes.memory.FloatableAccessNode#canFloat()->boolean:::AccessNodes can float only if their location identities are not ANY_LOCATION
org.graalvm.compiler.nodes.memory.FloatingAccessNode#getAddress()->AddressNode::: floating access node get address
org.graalvm.compiler.nodes.memory.FloatingAccessNode#setAddress(AddressNode)->void::: floating access node set address
org.graalvm.compiler.nodes.memory.FloatingAccessNode#getLocationIdentity()->LocationIdentity::: floating access node get location identity
org.graalvm.compiler.nodes.memory.FloatingAccessNode#getBarrierType()->BarrierType::: floating access node get barrier type
org.graalvm.compiler.nodes.memory.FloatingAccessNode#canNullCheck()->boolean::: floating access node can null check
org.graalvm.compiler.nodes.memory.FloatingAccessNode#asFixedNode()->FixedAccessNode::: floating access node as fixed node
org.graalvm.compiler.nodes.memory.FloatingReadNode#getLastLocationAccess()->MemoryNode::: floating read node get last location access
org.graalvm.compiler.nodes.memory.FloatingReadNode#setLastLocationAccess(MemoryNode)->void::: floating read node set last location access
org.graalvm.compiler.nodes.memory.FloatingReadNode#generate(NodeLIRBuilderTool)->void::: floating read node generate
org.graalvm.compiler.nodes.memory.FloatingReadNode#canonical(CanonicalizerTool)->Node::: floating read node canonical
org.graalvm.compiler.nodes.memory.FloatingReadNode#asFixedNode()->FixedAccessNode::: floating read node as fixed node
org.graalvm.compiler.nodes.memory.FloatingReadNode#verify()->boolean::: floating read node verify
org.graalvm.compiler.nodes.memory.FloatingReadNode#getAccessStamp()->Stamp::: floating read node get access stamp
org.graalvm.compiler.nodes.memory.HeapAccess#getBarrierType()->BarrierType:::Gets the write barrier type for that particular access.
org.graalvm.compiler.nodes.memory.LIRLowerableAccess#getAccessStamp()->Stamp::: lowerable access get access stamp
org.graalvm.compiler.nodes.memory.MemoryAccess#getLocationIdentity()->LocationIdentity::: memory access get location identity
org.graalvm.compiler.nodes.memory.MemoryAccess#getLastLocationAccess()->MemoryNode::: memory access get last location access
org.graalvm.compiler.nodes.memory.MemoryAccess#setLastLocationAccess(MemoryNode)->void::: memory access set last location access
org.graalvm.compiler.nodes.memory.MemoryAnchorNode#generate(NodeLIRBuilderTool)->void::: memory anchor node generate
org.graalvm.compiler.nodes.memory.MemoryAnchorNode#canonical(CanonicalizerTool)->Node::: memory anchor node canonical
org.graalvm.compiler.nodes.memory.MemoryAnchorNode#anchor()->Memory::: memory anchor node anchor
org.graalvm.compiler.nodes.memory.MemoryCheckpoint.Single#getLocationIdentity()->LocationIdentity:::This method is used to determine which memory location is killed by this node
org.graalvm.compiler.nodes.memory.MemoryCheckpoint.Multi#getLocationIdentities()->LocationIdentity[]:::This method is used to determine which set of memory locations is killed by this node
org.graalvm.compiler.nodes.memory.MemoryCheckpoint.TypeAssertion#correctType(Node)->boolean::: type assertion correct type
org.graalvm.compiler.nodes.memory.MemoryMap#getLastLocationAccess(LocationIdentity)->MemoryNode:::Gets the last node that that (potentially) wrote to locationIdentity.
org.graalvm.compiler.nodes.memory.MemoryMap#getLocations()->Iterable:::Gets the location identities in the domain of this map.
org.graalvm.compiler.nodes.memory.MemoryMapNode#isEmpty()->boolean::: memory map node is empty
org.graalvm.compiler.nodes.memory.MemoryMapNode#getLastLocationAccess(LocationIdentity)->MemoryNode::: memory map node get last location access
org.graalvm.compiler.nodes.memory.MemoryMapNode#getLocations()->Collection::: memory map node get locations
org.graalvm.compiler.nodes.memory.MemoryMapNode#toMap()->EconomicMap::: memory map node to map
org.graalvm.compiler.nodes.memory.MemoryMapNode#generate(NodeLIRBuilderTool)->void::: memory map node generate
org.graalvm.compiler.nodes.memory.MemoryPhiNode#getLocationIdentity()->LocationIdentity::: memory phi node get location identity
org.graalvm.compiler.nodes.memory.MemoryPhiNode#values()->NodeInputList::: memory phi node values
org.graalvm.compiler.nodes.memory.MemoryPhiNode#valueDescription()->String::: memory phi node value description
org.graalvm.compiler.nodes.memory.ReadNode#getLastLocationAccess()->MemoryNode::: read node get last location access
org.graalvm.compiler.nodes.memory.ReadNode#setLastLocationAccess(MemoryNode)->void::: read node set last location access
org.graalvm.compiler.nodes.memory.ReadNode#generate(NodeLIRBuilderTool)->void::: read node generate
org.graalvm.compiler.nodes.memory.ReadNode#canonical(CanonicalizerTool)->Node::: read node canonical
org.graalvm.compiler.nodes.memory.ReadNode#asFloatingNode()->FloatingAccessNode::: read node as floating node
org.graalvm.compiler.nodes.memory.ReadNode#isAllowedUsageType(InputType)->boolean::: read node is allowed usage type
org.graalvm.compiler.nodes.memory.ReadNode#canonicalizeRead(ValueNode, AddressNode, LocationIdentity, CanonicalizerTool)->ValueNode::: read node canonicalize read
org.graalvm.compiler.nodes.memory.ReadNode#virtualize(VirtualizerTool)->void::: read node virtualize
org.graalvm.compiler.nodes.memory.ReadNode#canNullCheck()->boolean::: read node can null check
org.graalvm.compiler.nodes.memory.ReadNode#getAccessStamp()->Stamp::: read node get access stamp
org.graalvm.compiler.nodes.memory.WriteNode#generate(NodeLIRBuilderTool)->void::: write node generate
org.graalvm.compiler.nodes.memory.WriteNode#canNullCheck()->boolean::: write node can null check
org.graalvm.compiler.nodes.memory.WriteNode#getAccessStamp()->Stamp::: write node get access stamp
org.graalvm.compiler.nodes.memory.WriteNode#canonical(CanonicalizerTool)->Node::: write node canonical

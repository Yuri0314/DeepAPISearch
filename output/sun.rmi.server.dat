sun.rmi.server.ActivatableRef#getStub(ActivationDesc, ActivationID)->Remote:::Returns the stub for the remote object whose class is specified in the activation descriptor
sun.rmi.server.ActivatableRef#invoke(Remote, java.lang.reflect.Method, Object[], long)->Object:::Invoke method on remote object
sun.rmi.server.ActivatableRef#newCall(RemoteObject, Operation[], int, long)->RemoteCall:::This call is used by the old 1.1 stub protocol and is unsupported since activation requires 1.2 stubs.
sun.rmi.server.ActivatableRef#invoke(RemoteCall)->void:::This call is used by the old 1.1 stub protocol and is unsupported since activation requires 1.2 stubs.
sun.rmi.server.ActivatableRef#done(RemoteCall)->void:::This call is used by the old 1.1 stub protocol and is unsupported since activation requires 1.2 stubs.
sun.rmi.server.ActivatableRef#getRefClass(ObjectOutput)->String:::Returns the class of the ref type to be serialized
sun.rmi.server.ActivatableRef#writeExternal(ObjectOutput)->void:::Write out external representation for remote ref.
sun.rmi.server.ActivatableRef#readExternal(ObjectInput)->void:::Read in external representation for remote ref.
sun.rmi.server.ActivatableRef#remoteToString()->String:::Method from object, forward from RemoteObject
sun.rmi.server.ActivatableRef#remoteHashCode()->int:::default implementation of hashCode for remote objects
sun.rmi.server.ActivatableRef#remoteEquals(RemoteRef)->boolean:::default implementation of equals for remote objects
sun.rmi.server.ActivatableServerRef#getRefClass(ObjectOutput)->String:::Returns the class of the ref type to be serialized
sun.rmi.server.ActivatableServerRef#getClientRef()->RemoteRef:::Return the client remote reference for this remoteRef
sun.rmi.server.ActivatableServerRef#writeExternal(ObjectOutput)->void:::Prevents serialization (because deserializaion is impossible).
sun.rmi.server.Activation.ActivatorImpl#activate(ActivationID, boolean)->MarshalledObject::: activator impl activate
sun.rmi.server.Activation.ActivationMonitorImpl#inactiveObject(ActivationID)->void::: activation monitor impl inactive object
sun.rmi.server.Activation.ActivationMonitorImpl#activeObject(ActivationID, MarshalledObject)->void::: activation monitor impl active object
sun.rmi.server.Activation.ActivationMonitorImpl#inactiveGroup(ActivationGroupID, long)->void::: activation monitor impl inactive group
sun.rmi.server.Activation.SameHostOnlyServerRef#unmarshalCustomCallData(ObjectInput)->void::: same host only server ref unmarshal custom call data
sun.rmi.server.Activation.ActivationSystemImpl#registerObject(ActivationDesc)->ActivationID::: activation system impl register object
sun.rmi.server.Activation.ActivationSystemImpl#unregisterObject(ActivationID)->void::: activation system impl unregister object
sun.rmi.server.Activation.ActivationSystemImpl#registerGroup(ActivationGroupDesc)->ActivationGroupID::: activation system impl register group
sun.rmi.server.Activation.ActivationSystemImpl#activeGroup(ActivationGroupID, ActivationInstantiator, long)->ActivationMonitor::: activation system impl active group
sun.rmi.server.Activation.ActivationSystemImpl#unregisterGroup(ActivationGroupID)->void::: activation system impl unregister group
sun.rmi.server.Activation.ActivationSystemImpl#setActivationDesc(ActivationID, ActivationDesc)->ActivationDesc::: activation system impl set activation desc
sun.rmi.server.Activation.ActivationSystemImpl#setActivationGroupDesc(ActivationGroupID, ActivationGroupDesc)->ActivationGroupDesc::: activation system impl set activation group desc
sun.rmi.server.Activation.ActivationSystemImpl#getActivationDesc(ActivationID)->ActivationDesc::: activation system impl get activation desc
sun.rmi.server.Activation.ActivationSystemImpl#getActivationGroupDesc(ActivationGroupID)->ActivationGroupDesc::: activation system impl get activation group desc
sun.rmi.server.Activation.ActivationSystemImpl#shutdown()->void:::Shutdown the activation system
sun.rmi.server.Activation.DefaultExecPolicy#checkExecCommand(ActivationGroupDesc, String[])->void::: default exec policy check exec command
sun.rmi.server.Activation.DefaultExecPolicy#checkConfiguration()->void:::Prints warning message if installed Policy is the default Policy implementation and globally granted permissions do not include AllPermission or any ExecPermissions/ExecOptionPermissions.
sun.rmi.server.Activation#main(String[])->void:::Main program to start the activation system
sun.rmi.server.PipeWriter#run()->void:::Create a thread to listen and read from input stream, in
sun.rmi.server.PipeWriter#plugTogetherPair(InputStream, OutputStream, InputStream, OutputStream)->void:::Allow plugging together two pipes at a time, to associate output from an execed process
sun.rmi.server.ActivationGroupImpl#newInstance(ActivationID, ActivationDesc)->MarshalledObject:::Creates a new instance of an activatable remote object
sun.rmi.server.ActivationGroupImpl#inactiveObject(ActivationID)->boolean:::The group's inactiveObject method is called indirectly via a call to the Activatable.inactive method
sun.rmi.server.ActivationGroupImpl#activeObject(ActivationID, Remote)->void:::The group's activeObject method is called when an object is exported (either by Activatable object construction or an explicit call to Activatable.exportObject
sun.rmi.server.ActivationGroupInit#main(String[])->void:::Main program to start a VM for an activation group.
sun.rmi.server.DeserializationChecker#check(Method, ObjectStreamClass, int, int)->void:::Will be called to check a descriptor
sun.rmi.server.DeserializationChecker#checkProxyClass(Method, String[], int, int)->void:::Will be called to validate a Proxy interfaces from a remote user before loading it.
sun.rmi.server.DeserializationChecker#end(int)->void:::Inform of the completion of parameter deserialisation for a method invocation
sun.rmi.server.Dispatcher#dispatch(Remote, RemoteCall)->void:::Call to dispatch to the remote object (on the server side)
sun.rmi.server.LoaderHandler#loadClass(String, String, ClassLoader)->Class:::Load a class from a network location (one or more URLs), but first try to resolve the named class through the given "default loader".
sun.rmi.server.LoaderHandler#getClassAnnotation(Class)->String:::Returns the class annotation (representing the location for a class) that RMI will use to annotate the call stream when marshalling objects of the given class.
sun.rmi.server.LoaderHandler#getClassLoader(String)->ClassLoader:::Returns a classloader that loads classes from the given codebase URL path
sun.rmi.server.LoaderHandler#getSecurityContext(ClassLoader)->Object:::Return the security context of the given class loader.
sun.rmi.server.LoaderHandler#registerCodebaseLoader(ClassLoader)->void:::Register a class loader as one whose classes should always be annotated with the value of the "java.rmi.server.codebase" property.
sun.rmi.server.LoaderHandler#loadProxyClass(String, String[], ClassLoader)->Class:::Define and return a dynamic proxy class in a class loader with URLs supplied in the given location
sun.rmi.server.MarshalInputStream#getDoneCallback(Object)->Runnable:::Returns a callback previously registered via the setDoneCallback method with given key, or null if no callback has yet been registered with that key.
sun.rmi.server.MarshalInputStream#setDoneCallback(Object, Runnable)->void:::Registers a callback to make when this stream's done() method is invoked, along with a key for retrieving the same callback instance subsequently from the getDoneCallback method.
sun.rmi.server.MarshalInputStream#done()->void:::Indicates that the user of this MarshalInputStream is done reading objects from it, so all callbacks registered with the setDoneCallback method should now be (synchronously) executed
sun.rmi.server.MarshalInputStream#close()->void:::Closes this stream, implicitly invoking done() first.
sun.rmi.server.MarshalInputStream#resolveClass(ObjectStreamClass)->Class:::resolveClass is extended to acquire (if present) the location from which to load the specified class
sun.rmi.server.MarshalInputStream#resolveProxyClass(String[])->Class:::resolveProxyClass is extended to acquire (if present) the location to determine the class loader to define the proxy class in.
sun.rmi.server.MarshalInputStream#readLocation()->Object:::Return the location for the class in the stream
sun.rmi.server.MarshalInputStream#skipDefaultResolveClass()->void:::Set a flag to indicate that the superclass's default resolveClass() implementation should not be invoked by our resolveClass().
sun.rmi.server.MarshalInputStream#useCodebaseOnly()->void:::Disable code downloading except from the URL specified by the "java.rmi.server.codebase" property.
sun.rmi.server.MarshalOutputStream#replaceObject(Object)->Object:::Checks for objects that are instances of java.rmi.Remote that need to be serialized as proxy objects.
sun.rmi.server.MarshalOutputStream#annotateClass(Class)->void:::Serializes a location from which to load the specified class.
sun.rmi.server.MarshalOutputStream#annotateProxyClass(Class)->void:::Serializes a location from which to load the specified class.
sun.rmi.server.MarshalOutputStream#writeLocation(String)->void:::Writes the location for the class into the stream
sun.rmi.server.UnicastRef#getLiveRef()->LiveRef:::Returns the current value of this UnicastRef's underlying LiveRef
sun.rmi.server.UnicastRef#invoke(Remote, Method, Object[], long)->Object:::Invoke a method
sun.rmi.server.UnicastRef#marshalCustomCallData(ObjectOutput)->void::: unicast ref marshal custom call data
sun.rmi.server.UnicastRef#marshalValue(Class, Object, ObjectOutput)->void:::Marshal value to an ObjectOutput sink using RMI's serialization format for parameters or return values.
sun.rmi.server.UnicastRef#unmarshalValue(Class, ObjectInput)->Object:::Unmarshal value from an ObjectInput source using RMI's serialization format for parameters or return values.
sun.rmi.server.UnicastRef#newCall(RemoteObject, Operation[], int, long)->RemoteCall:::Create an appropriate call object for a new call on this object
sun.rmi.server.UnicastRef#invoke(RemoteCall)->void:::Invoke makes the remote call present in the RemoteCall object
sun.rmi.server.UnicastRef#done(RemoteCall)->void:::Done should only be called if the invoke returns successfully (non-exceptionally) to the stub
sun.rmi.server.UnicastRef#logClientCall(Object, Object)->void:::Log the details of an outgoing call
sun.rmi.server.UnicastRef#getRefClass(ObjectOutput)->String:::Returns the class of the ref type to be serialized
sun.rmi.server.UnicastRef#writeExternal(ObjectOutput)->void:::Write out external representation for remote ref.
sun.rmi.server.UnicastRef#readExternal(ObjectInput)->void:::Read in external representation for remote ref.
sun.rmi.server.UnicastRef#remoteToString()->String:::Method from object, forward from RemoteObject
sun.rmi.server.UnicastRef#remoteHashCode()->int:::default implementation of hashCode for remote objects
sun.rmi.server.UnicastRef#remoteEquals(RemoteRef)->boolean:::default implementation of equals for remote objects
sun.rmi.server.UnicastRef2#getRefClass(ObjectOutput)->String:::Returns the class of the ref type to be serialized
sun.rmi.server.UnicastRef2#writeExternal(ObjectOutput)->void:::Write out external representation for remote ref.
sun.rmi.server.UnicastRef2#readExternal(ObjectInput)->void:::Read in external representation for remote ref.
sun.rmi.server.UnicastServerRef#exportObject(Remote, Object)->RemoteStub:::With the addition of support for dynamic proxies as stubs, this method is obsolete because it returns RemoteStub instead of the more general Remote
sun.rmi.server.UnicastServerRef#exportObject(Remote, Object, boolean)->Remote:::Export this object, create the skeleton and stubs for this dispatcher
sun.rmi.server.UnicastServerRef#getClientHost()->String:::Return the hostname of the current client
sun.rmi.server.UnicastServerRef#setSkeleton(Remote)->void:::Discovers and sets the appropriate skeleton for the impl.
sun.rmi.server.UnicastServerRef#dispatch(Remote, RemoteCall)->void:::Call to dispatch to the remote object (on the server side)
sun.rmi.server.UnicastServerRef#unmarshalCustomCallData(ObjectInput)->void:::Sets a filter for invocation arguments, if a filter has been set
sun.rmi.server.UnicastServerRef#clearStackTraces(Throwable)->void:::Clear the stack trace of the given Throwable by replacing it with an empty StackTraceElement array, and do the same for all of its chained causative exceptions.
sun.rmi.server.UnicastServerRef#getRefClass(ObjectOutput)->String:::Returns the class of the ref type to be serialized.
sun.rmi.server.UnicastServerRef#getClientRef()->RemoteRef:::Return the client remote reference for this remoteRef
sun.rmi.server.UnicastServerRef#writeExternal(ObjectOutput)->void:::Write out external representation for remote ref.
sun.rmi.server.UnicastServerRef#readExternal(ObjectInput)->void:::Read in external representation for remote ref.
sun.rmi.server.UnicastServerRef2#getRefClass(ObjectOutput)->String:::Returns the class of the ref type to be serialized
sun.rmi.server.UnicastServerRef2#getClientRef()->RemoteRef:::Return the client remote reference for this remoteRef
sun.rmi.server.Util#createProxy(Class, RemoteRef, boolean)->Remote:::Returns a proxy for the specified implClass
sun.rmi.server.Util#createSkeleton(Remote)->Skeleton:::Locate and return the Skeleton for the specified remote object
sun.rmi.server.Util#computeMethodHash(Method)->long:::Compute the "method hash" of a remote method
sun.rmi.server.Util#getUnqualifiedName(Class)->String:::Returns the binary name of the given type without package qualification
sun.rmi.server.WeakClassHashMap#get(Class)->V::: weak class hash map get
sun.rmi.server.WeakClassHashMap#computeValue(Class)->V::: weak class hash map compute value

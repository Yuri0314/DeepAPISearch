ActivatableRef#getStub(ActivationDesc, ActivationID):::Returns the stub for the remote object whose class is specified in the activation descriptor:::className->desc->getClassName->try->cl->RMIClassLoader->desc->getLocation->loadClass->clientRef->new->ActivatableRef->return->Util->createProxy->catch->throw->new->StubNotFoundException->throw->new->StubNotFoundException->throw->new->StubNotFoundException->finally
ActivatableRef#invoke(Remote, java.lang.reflect.Method, Object[], long):::Invoke method on remote object:::force->localRef->exception->synchronized->if->activate->else->for->retries->throw
ActivatableRef#getRef():::private method to obtain the ref for a call.:::if->activate->return
ActivatableRef#activate(boolean):::private method to activate the remote object:::try->proxy->id->activate->newRef->if->getRef->else->handler->Proxy->getInvocationHandler->handler->getRef->return->catch->throw->new->ConnectException->throw->new->ConnectIOException->throw->new->NoSuchObjectException->throw->new->ActivateFailedException->finally
ActivatableRef#newCall(RemoteObject, Operation[], int, long):::This call is used by the old 1.1 stub protocol and is unsupported since activation requires 1.2 stubs.:::throw->new->UnsupportedOperationException
ActivatableRef#invoke(RemoteCall):::This call is used by the old 1.1 stub protocol and is unsupported since activation requires 1.2 stubs.:::throw->new->UnsupportedOperationException
ActivatableRef#done(RemoteCall):::This call is used by the old 1.1 stub protocol and is unsupported since activation requires 1.2 stubs.:::throw->new->UnsupportedOperationException
ActivatableRef#getRefClass(ObjectOutput):::Returns the class of the ref type to be serialized:::return
ActivatableRef#writeExternal(ObjectOutput):::Write out external representation for remote ref.:::localRef->out->writeObject->if->out->writeUTF->else->out->localRef->getRefClass->writeUTF->localRef->writeExternal
ActivatableRef#readExternal(ObjectInput):::Read in external representation for remote ref.:::in->readObject->className->in->readUTF->if->className->equals->return->try->refClass->Class->forName->refClass->newInstance->ref->readExternal->catch->throw->new->UnmarshalException->throw->new->UnmarshalException->finally
ActivatableRef#remoteToString():::Method from object, forward from RemoteObject:::return->Util->getClass->getUnqualifiedName
ActivatableRef#remoteHashCode():::default implementation of hashCode for remote objects:::return->id->hashCode
ActivatableRef#remoteEquals(RemoteRef):::default implementation of equals for remote objects:::if->return->id->equals->return
ActivatableServerRef#getRefClass(ObjectOutput):::Returns the class of the ref type to be serialized:::return
ActivatableServerRef#getClientRef():::Return the client remote reference for this remoteRef:::return->new->UnicastRef2->new->ActivatableRef
ActivatableServerRef#writeExternal(ObjectOutput):::Prevents serialization (because deserializaion is impossible).:::throw->new->NotSerializableException
Activation#getInt(String, int)::: activation get int:::return->AccessController->Integer->getInteger->doPrivileged
Activation#startActivation(int, RMIServerSocketFactory, String, String[]):::Recover activation state from the reliable log and initialize activation services.:::log->new->ActLogHandler->new->ReliableLog->state->log->recover->state->init
Activation#init(int, RMIServerSocketFactory, ReliableLog, String[]):::Initialize the Activation instantiation; start activation services.:::new->ShutdownHook->getInt->Runtime->getRuntime->addShutdownHook->gids->groupTable->keySet->new->ActivationGroupIDArr->toArray->synchronized->new->Object->new->ActivatorImpl->RemoteObject->toStub->new->ActivationSystemImpl->RemoteObject->toStub->new->ActivationMonitorImpl->initCommand->new->SystemRegistryImpl->if->synchronized->initLock->notifyAll->for->i
Activation#readObject(ObjectInputStream):::Previous versions used HashMap instead of ConcurrentHashMap:::ois->defaultReadObject->if->new->ConcurrentHashMap<>->if->new->ConcurrentHashMap<>
Activation.SystemRegistryImpl#getSystemStub():::Waits for systemStub to be initialized and returns its initialized value:::interrupted->while->try->wait->catch->finally->if->Thread->currentThread->interrupt->return
Activation.SystemRegistryImpl#lookup(String):::Returns the activation system stub if the specified name matches the activation system's class name, otherwise returns the result of invoking super.lookup with the specified name.:::if->name->equals->return->getSystemStub->else->return->super->lookup
Activation.SystemRegistryImpl#list()::: system registry impl list:::list1->super->list->length->list2->new->StringArr->if->System->arraycopy->return
Activation.SystemRegistryImpl#bind(String, Remote)::: system registry impl bind:::if->name->equals->throw->new->AccessException->else->RegistryImpl->checkAccess->super->bind
Activation.SystemRegistryImpl#unbind(String)::: system registry impl unbind:::if->name->equals->throw->new->AccessException->else->RegistryImpl->checkAccess->super->unbind
Activation.SystemRegistryImpl#rebind(String, Remote)::: system registry impl rebind:::if->name->equals->throw->new->AccessException->else->RegistryImpl->checkAccess->super->rebind
Activation.ActivatorImpl#activate(ActivationID, boolean)::: activator impl activate:::checkShutdown->return->getGroupEntry->activate
Activation.ActivationMonitorImpl#inactiveObject(ActivationID)::: activation monitor impl inactive object:::try->checkShutdown->catch->return->finally->RegistryImpl->checkAccess->getGroupEntry->inactiveObject
Activation.ActivationMonitorImpl#activeObject(ActivationID, MarshalledObject)::: activation monitor impl active object:::try->checkShutdown->catch->return->finally->RegistryImpl->checkAccess->getGroupEntry->activeObject
Activation.ActivationMonitorImpl#inactiveGroup(ActivationGroupID, long)::: activation monitor impl inactive group:::try->checkShutdown->catch->return->finally->RegistryImpl->checkAccess->getGroupEntry->inactiveGroup
Activation.SameHostOnlyServerRef#unmarshalCustomCallData(ObjectInput)::: same host only server ref unmarshal custom call data:::RegistryImpl->checkAccess->super->unmarshalCustomCallData
Activation.ActivationSystemImpl#registerObject(ActivationDesc)::: activation system impl register object:::checkShutdown->groupID->desc->getGroupID->id->new->ActivationID->getGroupEntry->registerObject->return
Activation.ActivationSystemImpl#unregisterObject(ActivationID)::: activation system impl unregister object:::checkShutdown->getGroupEntry->unregisterObject
Activation.ActivationSystemImpl#registerGroup(ActivationGroupDesc)::: activation system impl register group:::checkShutdown->checkArgs->id->new->ActivationGroupID->entry->new->GroupEntry->groupTable->put->new->LogRegisterGroup->addLogRecord->return
Activation.ActivationSystemImpl#activeGroup(ActivationGroupID, ActivationInstantiator, long)::: activation system impl active group:::checkShutdown->getGroupEntry->activeGroup->return
Activation.ActivationSystemImpl#unregisterGroup(ActivationGroupID)::: activation system impl unregister group:::checkShutdown->removeGroupEntry->unregisterGroup
Activation.ActivationSystemImpl#setActivationDesc(ActivationID, ActivationDesc)::: activation system impl set activation desc:::checkShutdown->if->getGroupID->desc->getGroupID->equals->throw->new->ActivationException->return->getGroupEntry->setActivationDesc
Activation.ActivationSystemImpl#setActivationGroupDesc(ActivationGroupID, ActivationGroupDesc)::: activation system impl set activation group desc:::checkShutdown->checkArgs->return->getGroupEntry->setActivationGroupDesc
Activation.ActivationSystemImpl#getActivationDesc(ActivationID)::: activation system impl get activation desc:::checkShutdown->return->getGroupEntry->getActivationDesc
Activation.ActivationSystemImpl#getActivationGroupDesc(ActivationGroupID)::: activation system impl get activation group desc:::checkShutdown->return->getGroupEntry
Activation.ActivationSystemImpl#shutdown():::Shutdown the activation system:::lock->if->synchronized->synchronized->if->new->Shutdown->start
Activation#checkShutdown()::: activation check shutdown:::lock->if->synchronized->if->throw->new->ActivationException
Activation#unexport(Remote)::: activation unexport:::for
Activation.Shutdown#run()::: shutdown run:::try->unexport->unexport->foreach->groupTable->values->groupEntry->shutdown->Runtime->getRuntime->removeShutdownHook->unexport->try->synchronized->log->close->catch->finally->catch->finally->getTextResource->println->System->exit
Activation.ShutdownHook#run()::: shutdown hook run:::synchronized->foreach->groupTable->values->groupEntry->shutdownFast
Activation#getGroupID(ActivationID):::Returns the groupID for a given id of an object in the group:::groupID->idTable->get->if->return->throw->new->UnknownObjectException
Activation#getGroupEntry(ActivationGroupID, boolean):::Returns the group entry for the group id, optionally removing it:::if->id->getClass->entry->if->groupTable->remove->else->groupTable->get->if->return->throw->new->UnknownGroupException
Activation#getGroupEntry(ActivationGroupID):::Returns the group entry for the group id:::return->getGroupEntry
Activation#removeGroupEntry(ActivationGroupID):::Removes and returns the group entry for the group id:::return->getGroupEntry
Activation#getGroupEntry(ActivationID):::Returns the group entry for the object's id:::gid->getGroupID->entry->groupTable->get->if->return->throw->new->UnknownObjectException
Activation.GroupEntry#restartServices()::: group entry restart services:::iter->synchronized->if->restartSet->isEmpty->return->new->HashSet<ActivationID>->iterator->while->iter->hasNext->id->iter->next->try->activate->catch->if->return->getTextResource->println->e->printStackTrace->finally
Activation.GroupEntry#activeGroup(ActivationInstantiator, long)::: group entry active group:::if->throw->new->ActivationException->if->if->group->equals->return->else->throw->new->ActivationException->if->throw->new->ActivationException->notifyAll
Activation.GroupEntry#checkRemoved()::: group entry check removed:::if->throw->new->UnknownGroupException
Activation.GroupEntry#getObjectEntry(ActivationID)::: group entry get object entry:::if->throw->new->UnknownObjectException->objEntry->objects->get->if->throw->new->UnknownObjectException->return
Activation.GroupEntry#registerObject(ActivationID, ActivationDesc, boolean)::: group entry register object:::checkRemoved->objects->new->ObjectEntry->put->if->desc->getRestartMode->restartSet->add->idTable->put->if->new->LogRegisterObject->addLogRecord
Activation.GroupEntry#unregisterObject(ActivationID, boolean)::: group entry unregister object:::objEntry->getObjectEntry->objects->remove->if->getRestartMode->restartSet->remove->idTable->remove->if->new->LogUnregisterObject->addLogRecord
Activation.GroupEntry#unregisterGroup(boolean)::: group entry unregister group:::checkRemoved->foreach->objects->entrySet->id->entry->getKey->idTable->remove->objEntry->entry->getValue->objects->clear->restartSet->clear->reset->childGone->if->new->LogUnregisterGroup->addLogRecord
Activation.GroupEntry#setActivationDesc(ActivationID, ActivationDesc, boolean)::: group entry set activation desc:::objEntry->getObjectEntry->oldDesc->if->desc->getRestartMode->restartSet->add->else->restartSet->remove->if->new->LogUpdateDesc->addLogRecord->return
Activation.GroupEntry#getActivationDesc(ActivationID)::: group entry get activation desc:::return->getObjectEntry
Activation.GroupEntry#setActivationGroupDesc(ActivationGroupID, ActivationGroupDesc, boolean)::: group entry set activation group desc:::checkRemoved->oldDesc->if->new->LogUpdateGroupDesc->addLogRecord->return
Activation.GroupEntry#inactiveGroup(long, boolean)::: group entry inactive group:::checkRemoved->if->throw->new->UnknownGroupException->reset->if->terminate->else->if->watchdog->noRestart
Activation.GroupEntry#activeObject(ActivationID, MarshalledObject)::: group entry active object:::getObjectEntry
Activation.GroupEntry#inactiveObject(ActivationID)::: group entry inactive object:::getObjectEntry->reset
Activation.GroupEntry#reset()::: group entry reset:::foreach->objects->values->objectEntry->reset
Activation.GroupEntry#childGone()::: group entry child gone:::if->watchdog->dispose->notifyAll
Activation.GroupEntry#terminate()::: group entry terminate:::if->child->destroy->System->currentTimeMillis->notifyAll
Activation.GroupEntry#await()::: group entry await:::while->switch->return->terminate->try->child->exitValue->catch->now->System->currentTimeMillis->if->try->wait->catch->finally->continue->finally->childGone->return->try->wait->catch->finally
Activation.GroupEntry#shutdownFast()::: group entry shutdown fast:::p->if->p->destroy
Activation.GroupEntry#shutdown()::: group entry shutdown:::reset->terminate->await
Activation.GroupEntry#activate(ActivationID, boolean)::: group entry activate:::detail->for->tries->throw->new->ActivationException
Activation.GroupEntry#getInstantiator(ActivationGroupID):::Returns the instantiator for the group specified by id and entry:::await->if->return->checkRemoved->acquired->try->Pstartgroup->argv->activationArgs->checkArgs->if->sb->new->StringBuilder->j->for->MessageFormat->getTextResource->sb->toString->format->println->try->Runtime->getRuntime->exec->new->Watchdog->watchdog->start->new->LogGroupIncarnation->addLogRecord->PipeWriter->child->getInputStream->child->getErrorStream->plugTogetherPair->try->out->child->getOutputStream->new->MarshalOutputStream->out->writeObject->out->writeObject->out->writeLong->out->flush->catch->finally->catch->terminate->throw->new->ActivationException->finally->try->now->System->currentTimeMillis->stop->do->wait->if->return->System->currentTimeMillis->while->catch->finally->terminate->throw->new->ActivationException->catch->finally->if->Vstartgroup
Activation.GroupEntry.Watchdog#run()::: watchdog run:::if->return->try->groupProcess->waitFor->catch->return->finally->restart->synchronized->if->return->interrupted->if->reset->childGone->if->restartServices
Activation.GroupEntry.Watchdog#dispose():::Marks this thread as one that is no longer needed:::if->interrupt
Activation.GroupEntry.Watchdog#noRestart():::Marks this thread as no longer needing to restart objects.:::
Activation#activationArgs(ActivationGroupDesc)::: activation activation args:::cmdenv->desc->getCommandEnvironment->argv->new->ArrayList<>->argv->cmdenv->getCommandPath->cmdenv->getCommandPath->add->if->cmdenv->getCommandOptions->argv->Arrays->cmdenv->getCommandOptions->asList->addAll->props->desc->getPropertyOverrides->if->for->p->props->propertyNames->p->hasMoreElements->for->i->realArgv->argv->size->new->StringArr->System->argv->toArray->arraycopy->return
Activation#checkArgs(ActivationGroupDesc, String[])::: activation check args:::if->if->activationArgs->try->execPolicyMethod->invoke->catch->targetException->e->getTargetException->if->throw->else->throw->execPolicyMethod->getName->new->ActivationException->throw->execPolicyMethod->getName->new->ActivationException->finally
Activation.ObjectEntry#activate(ActivationID, boolean, ActivationInstantiator)::: object entry activate:::nstub->if->throw->new->UnknownObjectException->else->if->return->inst->newInstance->return
Activation.ObjectEntry#reset()::: object entry reset:::
Activation#addLogRecord(LogRecord):::Add a record to the activation log:::synchronized->checkShutdown->try->log->update->catch->getTextResource->println->e->printStackTrace->finally->if->return->try->log->snapshot->catch->getTextResource->println->e->printStackTrace->try->system->shutdown->catch->finally->throw->new->ActivationException->finally
Activation.ActLogHandler#initialSnapshot()::: act log handler initial snapshot:::return->new->Activation
Activation.ActLogHandler#applyUpdate(Object, Object)::: act log handler apply update:::return->apply
Activation.LogRecord#apply(Object)::: log record apply:::
Activation.LogRegisterObject#apply(Object)::: log register object apply:::try->desc->getGroupID->getGroupEntry->registerObject->catch->MessageFormat->getTextResource->format->println->ignore->printStackTrace->finally->return
Activation.LogUnregisterObject#apply(Object)::: log unregister object apply:::try->getGroupEntry->unregisterObject->catch->MessageFormat->getTextResource->format->println->ignore->printStackTrace->finally->return
Activation.LogRegisterGroup#apply(Object)::: log register group apply:::new->GroupEntry->put->return
Activation.LogUpdateDesc#apply(Object)::: log update desc apply:::try->getGroupEntry->setActivationDesc->catch->MessageFormat->getTextResource->format->println->ignore->printStackTrace->finally->return
Activation.LogUpdateGroupDesc#apply(Object)::: log update group desc apply:::try->getGroupEntry->setActivationGroupDesc->catch->MessageFormat->getTextResource->format->println->ignore->printStackTrace->finally->return
Activation.LogUnregisterGroup#apply(Object)::: log unregister group apply:::entry->remove->try->entry->unregisterGroup->catch->MessageFormat->getTextResource->format->println->ignore->printStackTrace->finally->return
Activation.LogGroupIncarnation#apply(Object)::: log group incarnation apply:::try->entry->getGroupEntry->catch->MessageFormat->getTextResource->format->println->ignore->printStackTrace->finally->return
Activation#initCommand(String[]):::Initialize command to exec a default group.:::new->StringArr->AccessController->new->PrivilegedAction<Void>->doPrivileged->System->arraycopy
Activation#bomb(String)::: activation bomb:::println->MessageFormat->getTextResource->format->println->System->exit
Activation.DefaultExecPolicy#checkExecCommand(ActivationGroupDesc, String[])::: default exec policy check exec command:::perms->getExecPermissions->props->desc->getPropertyOverrides->if->p->props->propertyNames->while->p->hasMoreElements->name->p->nextElement->value->props->getProperty->option->try->new->ExecOptionPermission->checkPermission->catch->if->value->equals->new->ExecOptionPermission->checkPermission->else->throw->finally->groupClassName->desc->getClassName->if->groupClassName->getName->equals->desc->getLocation->desc->getData->throw->new->AccessControlException->cmdenv->desc->getCommandEnvironment->if->path->cmdenv->getCommandPath->if->new->ExecPermission->checkPermission->options->cmdenv->getCommandOptions->if->foreach->new->ExecOptionPermission->checkPermission
Activation.DefaultExecPolicy#checkConfiguration():::Prints warning message if installed Policy is the default Policy implementation and globally granted permissions do not include AllPermission or any ExecPermissions/ExecOptionPermissions.:::policy->AccessController->new->PrivilegedAction<Policy>->doPrivileged->if->return->perms->getExecPermissions->for->e->perms->elements->e->hasMoreElements->getTextResource->println
Activation.DefaultExecPolicy#getExecPermissions()::: default exec policy get exec permissions:::perms->AccessController->new->PrivilegedAction<PermissionCollection>->doPrivileged->return
Activation.DefaultExecPolicy#checkPermission(PermissionCollection, Permission)::: default exec policy check permission:::if->perms->implies->throw->p->toString->new->AccessControlException
Activation#main(String[]):::Main program to start the activation system:::stop->if->System->getSecurityManager->System->new->SecurityManager->setSecurityManager->try->port->ssf->inheritedChannel->AccessController->new->PrivilegedExceptionAction<Channel>->doPrivileged->if->AccessController->new->PrivilegedExceptionAction<Void>->doPrivileged->serverSocket->socket->serverSocket->getLocalPort->new->ActivationServerSocketFactory->new->Date->println->getTextResource->println->log->childArgs->new->ArrayList<>->for->i->if->if->getTextResource->bomb->else->AccessController->Boolean->getBoolean->doPrivileged->execPolicyClassName->AccessController->System->getProperty->doPrivileged->if->if->DefaultExecPolicy->checkConfiguration->if->execPolicyClassName->equals->if->execPolicyClassName->equals->execPolicyClassName->equals->getName->try->execPolicyClass->getRMIClass->tmp->execPolicyClass->newInstance->execPolicyClass->getMethod->catch->if->getTextResource->println->e->printStackTrace->getTextResource->bomb->finally->if->finalPort->AccessController->new->PrivilegedAction<Void>->doPrivileged->system->ActivationGroup->getSystem->system->shutdown->System->exit->childArgs->childArgs->size->new->StringArr->toArray->startActivation->while->try->Thread->sleep->catch->finally->catch->MessageFormat->getTextResource->format->println->e->printStackTrace->finally->System->exit
Activation#getTextResource(String):::Retrieves text resources from the locale-specific properties file.:::if->try->ResourceBundle->getBundle->catch->finally->if->return->val->try->getString->catch->finally->if->return->else->return
Activation#getRMIClass(String)::: activation get class:::return->RMIClassLoader->loadClass
Activation#Pstartgroup():::Acquire the group semaphore and return a group name:::while->checkShutdown->if->return->try->wait->catch->finally
Activation#Vstartgroup():::Release the group semaphore:::notifyAll
Activation.ActivationServerSocketFactory#createServerSocket(int):::Returns the server socket specified during construction wrapped in a 'DelayedAcceptServerSocket'.:::return->new->DelayedAcceptServerSocket
Activation.DelayedAcceptServerSocket#bind(SocketAddress)::: delayed accept server socket bind:::serverSocket->bind
Activation.DelayedAcceptServerSocket#bind(SocketAddress, int)::: delayed accept server socket bind:::serverSocket->bind
Activation.DelayedAcceptServerSocket#getInetAddress()::: delayed accept server socket get inet address:::return->AccessController->new->PrivilegedAction<InetAddress>->doPrivileged
Activation.DelayedAcceptServerSocket#getLocalPort()::: delayed accept server socket get local port:::return->serverSocket->getLocalPort
Activation.DelayedAcceptServerSocket#getLocalSocketAddress()::: delayed accept server socket get local socket address:::return->AccessController->new->PrivilegedAction<SocketAddress>->doPrivileged
Activation.DelayedAcceptServerSocket#accept():::Delays calling accept on the underlying server socket until the remote service is bound in the registry.:::synchronized->try->while->initLock->wait->catch->throw->new->AssertionError->finally->return->serverSocket->accept
Activation.DelayedAcceptServerSocket#close()::: delayed accept server socket close:::serverSocket->close
Activation.DelayedAcceptServerSocket#getChannel()::: delayed accept server socket get channel:::return->serverSocket->getChannel
Activation.DelayedAcceptServerSocket#isBound()::: delayed accept server socket is bound:::return->serverSocket->isBound
Activation.DelayedAcceptServerSocket#isClosed()::: delayed accept server socket is closed:::return->serverSocket->isClosed
Activation.DelayedAcceptServerSocket#setSoTimeout(int)::: delayed accept server socket set so timeout:::serverSocket->setSoTimeout
Activation.DelayedAcceptServerSocket#getSoTimeout()::: delayed accept server socket get so timeout:::return->serverSocket->getSoTimeout
Activation.DelayedAcceptServerSocket#setReuseAddress(boolean)::: delayed accept server socket set reuse address:::serverSocket->setReuseAddress
Activation.DelayedAcceptServerSocket#getReuseAddress()::: delayed accept server socket get reuse address:::return->serverSocket->getReuseAddress
Activation.DelayedAcceptServerSocket#toString()::: delayed accept server socket to string:::return->serverSocket->toString
Activation.DelayedAcceptServerSocket#setReceiveBufferSize(int)::: delayed accept server socket set receive buffer size:::serverSocket->setReceiveBufferSize
Activation.DelayedAcceptServerSocket#getReceiveBufferSize()::: delayed accept server socket get receive buffer size:::return->serverSocket->getReceiveBufferSize
PipeWriter#run():::Create a thread to listen and read from input stream, in:::buf->new->byteArr->count->try->while->in->read->write->lastInBuffer->bufOut->toString->bufOut->reset->if->lastInBuffer->length->out->createAnnotation->println->out->flush->catch->finally
PipeWriter#write(byte[], int, int):::Write a subarray of bytes:::if->throw->new->ArrayIndexOutOfBoundsException->for->i
PipeWriter#write(byte):::Write a byte of data to the stream:::i->for->bufOut->write->if->lineSeparator->new->String->equals->out->createAnnotation->bufOut->toString->print->out->flush->bufOut->reset->if->out->checkError->throw->new->IOException->else
PipeWriter#createAnnotation():::Create an annotation string to be printed out after a new line and end of stream.:::return->new->Date->toString
PipeWriter#plugTogetherPair(InputStream, OutputStream, InputStream, OutputStream):::Allow plugging together two pipes at a time, to associate output from an execed process:::inThread->outThread->nExecs->getNumExec->AccessController->new->PipeWriter->new->NewThreadAction->doPrivileged->AccessController->new->PipeWriter->new->NewThreadAction->doPrivileged->inThread->start->outThread->start
PipeWriter#getNumExec()::: pipe writer get num exec:::return
ActivationGroupImpl.ServerSocketFactoryImpl#createServerSocket(int)::: server socket factory impl create server socket:::sf->RMISocketFactory->getSocketFactory->if->RMISocketFactory->getDefaultSocketFactory->return->sf->createServerSocket
ActivationGroupImpl#acquireLock(ActivationID)::: activation group impl acquire lock:::waitForID->for
ActivationGroupImpl#releaseLock(ActivationID)::: activation group impl release lock:::synchronized->lockedIDs->lockedIDs->indexOf->remove->synchronized->id->notifyAll
ActivationGroupImpl#newInstance(ActivationID, ActivationDesc):::Creates a new instance of an activatable remote object:::RegistryImpl->checkAccess->if->groupID->desc->getGroupID->equals->throw->new->ActivationException->try->acquireLock->synchronized->if->throw->new->InactiveGroupException->entry->active->get->if->return->className->desc->getClassName->cl->RMIClassLoader->desc->getLocation->loadClass->asSubclass->impl->t->Thread->currentThread->savedCcl->t->getContextClassLoader->objcl->cl->getClassLoader->ccl->covers->try->AccessController->new->PrivilegedExceptionAction<Remote>->doPrivileged->catch->e->pae->getException->if->throw->else->if->throw->else->if->throw->else->if->throw->else->if->throw->else->if->throw->finally->new->ActiveEntry->active->put->return->catch->throw->new->ActivationException->throw->e->getTargetException->new->ActivationException->throw->new->ActivationException->finally->releaseLock->checkInactiveGroup
ActivationGroupImpl#inactiveObject(ActivationID):::The group's inactiveObject method is called indirectly via a call to the Activatable.inactive method:::try->acquireLock->synchronized->if->throw->new->ActivationException->entry->active->get->if->throw->new->UnknownObjectException->try->if->Activatable->unexportObject->return->catch->finally->try->super->inactiveObject->catch->finally->active->remove->catch->finally->releaseLock->checkInactiveGroup->return
ActivationGroupImpl#checkInactiveGroup()::: activation group impl check inactive group:::groupMarkedInactive->synchronized->if->active->size->lockedIDs->size->if->try->super->inactiveGroup->catch->finally->try->UnicastRemoteObject->unexportObject->catch->finally
ActivationGroupImpl#activeObject(ActivationID, Remote):::The group's activeObject method is called when an object is exported (either by Activatable object construction or an explicit call to Activatable.exportObject:::try->acquireLock->synchronized->if->throw->new->ActivationException->if->active->contains->entry->new->ActiveEntry->active->put->try->super->activeObject->catch->finally->catch->finally->releaseLock->checkInactiveGroup
ActivationGroupImpl#covers(ClassLoader, ClassLoader):::Returns true if the first argument is either equal to, or is a descendant of, the second argument:::if->return->else->if->return->do->if->return->sub->getParent->while->return
ActivationGroupInit#main(String[]):::Main program to start a VM for an activation group.:::try->if->System->getSecurityManager->System->new->SecurityManager->setSecurityManager->in->new->MarshalInputStream->id->in->readObject->desc->in->readObject->incarnation->in->readLong->ActivationGroup->createGroup->catch->println->e->printStackTrace->finally->try->close->catch->finally
DeserializationChecker#check(Method, ObjectStreamClass, int, int):::Will be called to check a descriptor:::
DeserializationChecker#checkProxyClass(Method, String[], int, int):::Will be called to validate a Proxy interfaces from a remote user before loading it.:::
DeserializationChecker#end(int):::Inform of the completion of parameter deserialisation for a method invocation:::
Dispatcher#dispatch(Remote, RemoteCall):::Call to dispatch to the remote object (on the server side):::
LoaderHandler#getDefaultCodebaseURLs():::Returns an array of URLs initialized with the value of the java.rmi.server.codebase property as the URL path.:::if->if->pathToURLs->else->new->URLArr->return
LoaderHandler#loadClass(String, String, ClassLoader):::Load a class from a network location (one or more URLs), but first try to resolve the named class through the given "default loader".:::if->loaderLog->isLoggable->loaderLog->log->urls->if->pathToURLs->else->getDefaultCodebaseURLs->if->try->c->loadClassForName->if->loaderLog->isLoggable->loaderLog->c->getClassLoader->log->return->catch->finally->return->loadClass
LoaderHandler#getClassAnnotation(Class):::Returns the class annotation (representing the location for a class) that RMI will use to annotate the call stream when marshalling objects of the given class.:::name->cl->getName->nameLength->name->length->if->name->charAt->i->while->name->charAt->if->name->charAt->return->loader->cl->getClassLoader->if->codebaseLoaders->containsKey->return->annotation->if->getClassAnnotation->else->if->try->urls->getURLs->if->sm->System->getSecurityManager->if->perms->new->Permissions->for->i->urlsToPath->catch->finally->if->return->else->return
LoaderHandler#getClassLoader(String):::Returns a classloader that loads classes from the given codebase URL path:::parent->getRMIContextClassLoader->urls->if->pathToURLs->else->getDefaultCodebaseURLs->sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->else->return->loader->lookupLoader->if->loader->checkPermissions->return
LoaderHandler#getSecurityContext(ClassLoader):::Return the security context of the given class loader.:::if->urls->getURLs->if->return->return
LoaderHandler#registerCodebaseLoader(ClassLoader):::Register a class loader as one whose classes should always be annotated with the value of the "java.rmi.server.codebase" property.:::codebaseLoaders->put
LoaderHandler#loadClass(URL[], String):::Load a class from the RMI class loader corresponding to the given codebase URL path in the current execution context.:::parent->getRMIContextClassLoader->if->loaderLog->isLoggable->loaderLog->log->sm->System->getSecurityManager->if->try->c->Class->forName->if->loaderLog->isLoggable->loaderLog->c->getClassLoader->log->return->catch->if->loaderLog->isLoggable->loaderLog->log->throw->e->getMessage->e->getException->new->ClassNotFoundException->finally->loader->lookupLoader->try->if->loader->checkPermissions->catch->try->c->loadClassForName->if->loaderLog->isLoggable->loaderLog->c->getClassLoader->log->return->catch->if->loaderLog->isLoggable->loaderLog->log->throw->new->ClassNotFoundException->finally->finally->try->c->loadClassForName->if->loaderLog->isLoggable->loaderLog->c->getClassLoader->log->return->catch->if->loaderLog->isLoggable->loaderLog->log->throw->finally
LoaderHandler#loadProxyClass(String, String[], ClassLoader):::Define and return a dynamic proxy class in a class loader with URLs supplied in the given location:::if->loaderLog->isLoggable->loaderLog->Arrays->asList->log->parent->getRMIContextClassLoader->if->loaderLog->isLoggable->loaderLog->log->urls->if->pathToURLs->else->getDefaultCodebaseURLs->sm->System->getSecurityManager->if->try->c->loadProxyClass->if->loaderLog->isLoggable->loaderLog->c->getClassLoader->log->return->catch->if->loaderLog->isLoggable->loaderLog->log->throw->e->getMessage->e->getException->new->ClassNotFoundException->finally->loader->lookupLoader->try->if->loader->checkPermissions->catch->try->c->loadProxyClass->if->loaderLog->isLoggable->loaderLog->c->getClassLoader->log->return->catch->if->loaderLog->isLoggable->loaderLog->log->throw->new->ClassNotFoundException->finally->finally->try->c->loadProxyClass->if->loaderLog->isLoggable->loaderLog->c->getClassLoader->log->return->catch->if->loaderLog->isLoggable->loaderLog->log->throw->finally
LoaderHandler#loadProxyClass(String[], ClassLoader, ClassLoader, boolean):::Define a proxy class in the default loader if appropriate:::proxyLoader->classObjs->new->Class<?>Arr->nonpublic->if->try->loadProxyInterfaces->if->loaderLog->isLoggable->definingLoaders->new->ClassLoaderArr->for->i->loaderLog->Arrays->asList->log->catch->break->finally->if->if->try->return->Proxy->getProxyClass->catch->finally->return->loadProxyClass->loadProxyInterfaces->if->loaderLog->isLoggable->definingLoaders->new->ClassLoaderArr->for->i->loaderLog->Arrays->asList->log->if->return->loadProxyClass
LoaderHandler#loadProxyClass(ClassLoader, Class[]):::Define a proxy class in the given class loader:::try->return->Proxy->getProxyClass->catch->throw->new->ClassNotFoundException->finally
LoaderHandler#loadProxyInterfaces(String[], ClassLoader, Class[], boolean[])::: loader handler load proxy interfaces:::nonpublicLoader->for->i->return
LoaderHandler#pathToURLs(String):::Convert a string containing a space-separated list of URLs into a corresponding array of URL objects, throwing a MalformedURLException if any of the URLs are invalid.:::synchronized->v->pathToURLsCache->get->if->return->st->new->StringTokenizer->urls->st->countTokens->new->URLArr->for->i->st->hasMoreTokens->synchronized->pathToURLsCache->new->ObjectArr->new->SoftReference<String>->put->return
LoaderHandler#urlsToPath(URL[]):::Convert an array of URL objects into a corresponding string containing a space-separated list of URLs:::if->return->else->if->return->toExternalForm->else->path->toExternalForm->new->StringBuilder->for->i->return->path->toString
LoaderHandler#getRMIContextClassLoader():::Return the class loader to be used as the parent for an RMI class loader used in the current execution context.:::return->Thread->currentThread->getContextClassLoader
LoaderHandler#lookupLoader(URL[], ClassLoader):::Look up the RMI class loader for the given codebase URL path and the given parent class loader:::entry->loader->synchronized->while->refQueue->poll->if->loaderTable->remove->key->new->LoaderKey->loaderTable->get->if->entry->get->if->loaderTable->remove->acc->getLoaderAccessControlContext->new->java.security.PrivilegedAction<Loader>->doPrivileged->new->LoaderEntry->loaderTable->put->return
LoaderHandler.LoaderKey#hashCode()::: loader key hash code:::return
LoaderHandler.LoaderKey#equals(Object)::: loader key equals:::if->other->if->return->if->return->if->return->for->i->return->else->return
LoaderHandler#getLoaderAccessControlContext(URL[]):::Return the access control context that a loader for the given codebase URL path should execute with.:::perms->new->java.security.PrivilegedAction<PermissionCollection>->doPrivileged->perms->new->RuntimePermission->add->perms->new->java.util.PropertyPermission->add->addPermissionsForURLs->pd->new->CodeSource->new->ProtectionDomain->return->new->ProtectionDomainArr->new->AccessControlContext
LoaderHandler#addPermissionsForURLs(URL[], PermissionCollection, boolean):::Adds to the specified permission collection the permissions necessary to load classes from a loader with the specified URL path; if "forLoader" is true, also adds URL-specific permissions necessary for the security context that such a loader operates within, such as permissions necessary for granting automatic permissions to classes defined by the loader:::for->i
LoaderHandler.Loader#getClassAnnotation():::Return the string to be annotated with all classes loaded from this class loader.:::return
LoaderHandler.Loader#checkPermissions():::Check that the current access control context has all of the permissions necessary to load classes from this loader.:::sm->System->getSecurityManager->if->enum_->permissions->elements->while->enum_->hasMoreElements->sm->enum_->nextElement->checkPermission
LoaderHandler.Loader#getPermissions(CodeSource):::Return the permissions to be granted to code loaded from the given code source.:::perms->super->getPermissions->return
LoaderHandler.Loader#toString():::Return a string representation of this loader (useful for debugging).:::return->super->toString
LoaderHandler.Loader#loadClass(String, boolean)::: loader load class:::if->ReflectUtil->checkPackageAccess->return->super->loadClass
LoaderHandler#loadClassForName(String, boolean, ClassLoader)::: loader handler load class for name:::if->ReflectUtil->checkPackageAccess->return->Class->forName
MarshalInputStream#getDoneCallback(Object):::Returns a callback previously registered via the setDoneCallback method with given key, or null if no callback has yet been registered with that key.:::return->doneCallbacks->get
MarshalInputStream#setDoneCallback(Object, Runnable):::Registers a callback to make when this stream's done() method is invoked, along with a key for retrieving the same callback instance subsequently from the getDoneCallback method.:::doneCallbacks->put
MarshalInputStream#done():::Indicates that the user of this MarshalInputStream is done reading objects from it, so all callbacks registered with the setDoneCallback method should now be (synchronously) executed:::iter->doneCallbacks->values->iterator->while->iter->hasNext->callback->iter->next->callback->run->doneCallbacks->clear
MarshalInputStream#close():::Closes this stream, implicitly invoking done() first.:::done->super->close
MarshalInputStream#resolveClass(ObjectStreamClass):::resolveClass is extended to acquire (if present) the location from which to load the specified class:::annotation->readLocation->className->classDesc->getName->defaultLoader->latestUserDefinedLoader->codebase->if->try->return->RMIClassLoader->loadClass->catch->return->checkSunClass->try->if->Character->className->charAt->isLowerCase->className->indexOf->return->super->resolveClass->catch->finally->throw->finally
MarshalInputStream#resolveProxyClass(String[]):::resolveProxyClass is extended to acquire (if present) the location to determine the class loader to define the proxy class in.:::annotation->readLocation->defaultLoader->latestUserDefinedLoader->codebase->if->return->RMIClassLoader->loadProxyClass
MarshalInputStream#latestUserDefinedLoader()::: marshal input stream latest user defined loader:::return->latestUserDefinedLoader
MarshalInputStream#checkSunClass(String, AccessControlException):::Fix for 4179055: Need to assist resolving sun stubs; resolve class locally if it is a "permitted" sun class:::perm->e->getPermission->name->if->perm->getName->resolvedClass->permittedSunClasses->get->if->name->equals->name->equals->throw->return
MarshalInputStream#readLocation():::Return the location for the class in the stream:::return->readObject
MarshalInputStream#skipDefaultResolveClass():::Set a flag to indicate that the superclass's default resolveClass() implementation should not be invoked by our resolveClass().:::
MarshalInputStream#useCodebaseOnly():::Disable code downloading except from the URL specified by the "java.rmi.server.codebase" property.:::
MarshalOutputStream#replaceObject(Object):::Checks for objects that are instances of java.rmi.Remote that need to be serialized as proxy objects.:::if->target->ObjectTable->getTarget->if->return->target->getStub->return
MarshalOutputStream#annotateClass(Class):::Serializes a location from which to load the specified class.:::getClassAnnotation->writeLocation
MarshalOutputStream#annotateProxyClass(Class):::Serializes a location from which to load the specified class.:::annotateClass
MarshalOutputStream#writeLocation(String):::Writes the location for the class into the stream:::writeObject
UnicastRef#getLiveRef():::Returns the current value of this UnicastRef's underlying LiveRef:::return
UnicastRef#invoke(Remote, Method, Object[], long):::Invoke a method:::if->clientRefLog->isLoggable->clientRefLog->log->if->clientCallLog->isLoggable->logClientCall->conn->ref->getChannel->newConnection->call->reuse->alreadyFreed->try->if->clientRefLog->isLoggable->clientRefLog->log->ref->getObjID->new->StreamRemoteCall->try->out->call->getOutputStream->marshalCustomCallData->types->method->getParameterTypes->for->i->catch->clientRefLog->log->throw->new->MarshalException->finally->call->executeCall->try->rtype->method->getReturnType->if->return->in->call->getInputStream->returnValue->unmarshalValue->clientRefLog->log->ref->getChannel->free->return->catch->discardPendingRefs->clientRefLog->e->getClass->getName->log->throw->new->UnmarshalException->finally->try->call->done->catch->finally->catch->if->getServerException->throw->throw->throw->finally->if->if->clientRefLog->isLoggable->clientRefLog->log->ref->getChannel->free
UnicastRef#marshalCustomCallData(ObjectOutput)::: unicast ref marshal custom call data:::
UnicastRef#marshalValue(Class, Object, ObjectOutput):::Marshal value to an ObjectOutput sink using RMI's serialization format for parameters or return values.:::if->type->isPrimitive->if->out->intValue->writeInt->else->if->out->booleanValue->writeBoolean->else->if->out->byteValue->writeByte->else->if->out->charValue->writeChar->else->if->out->shortValue->writeShort->else->if->out->longValue->writeLong->else->if->out->floatValue->writeFloat->else->if->out->doubleValue->writeDouble->else->throw->new->Error->else->out->writeObject
UnicastRef#unmarshalValue(Class, ObjectInput):::Unmarshal value from an ObjectInput source using RMI's serialization format for parameters or return values.:::if->type->isPrimitive->if->return->Integer->in->readInt->valueOf->else->if->return->Boolean->in->readBoolean->valueOf->else->if->return->Byte->in->readByte->valueOf->else->if->return->Character->in->readChar->valueOf->else->if->return->Short->in->readShort->valueOf->else->if->return->Long->in->readLong->valueOf->else->if->return->Float->in->readFloat->valueOf->else->if->return->Double->in->readDouble->valueOf->else->throw->new->Error->else->if->return->SharedSecrets->getJavaObjectInputStreamReadString->readString->else->return->in->readObject
UnicastRef#newCall(RemoteObject, Operation[], int, long):::Create an appropriate call object for a new call on this object:::clientRefLog->log->conn->ref->getChannel->newConnection->try->clientRefLog->log->if->clientCallLog->isLoggable->logClientCall->call->ref->getObjID->new->StreamRemoteCall->try->call->getOutputStream->marshalCustomCallData->catch->throw->new->MarshalException->finally->return->catch->ref->getChannel->free->throw->finally
UnicastRef#invoke(RemoteCall):::Invoke makes the remote call present in the RemoteCall object:::try->clientRefLog->log->call->executeCall->catch->clientRefLog->log->free->throw->clientRefLog->log->free->throw->clientRefLog->log->free->throw->clientRefLog->log->free->throw->finally
UnicastRef#free(RemoteCall, boolean):::Private method to free a connection.:::conn->getConnection->ref->getChannel->free
UnicastRef#done(RemoteCall):::Done should only be called if the invoke returns successfully (non-exceptionally) to the stub:::clientRefLog->log->free->try->call->done->catch->finally
UnicastRef#logClientCall(Object, Object):::Log the details of an outgoing call:::clientCallLog->obj->getClass->getName->ref->getObjID->toString->log
UnicastRef#getRefClass(ObjectOutput):::Returns the class of the ref type to be serialized:::return
UnicastRef#writeExternal(ObjectOutput):::Write out external representation for remote ref.:::ref->write
UnicastRef#readExternal(ObjectInput):::Read in external representation for remote ref.:::LiveRef->read
UnicastRef#remoteToString():::Method from object, forward from RemoteObject:::return->Util->getClass->getUnqualifiedName
UnicastRef#remoteHashCode():::default implementation of hashCode for remote objects:::return->ref->hashCode
UnicastRef#remoteEquals(RemoteRef):::default implementation of equals for remote objects:::if->return->ref->remoteEquals->return
UnicastRef2#getRefClass(ObjectOutput):::Returns the class of the ref type to be serialized:::return
UnicastRef2#writeExternal(ObjectOutput):::Write out external representation for remote ref.:::ref->write
UnicastRef2#readExternal(ObjectInput):::Read in external representation for remote ref.:::LiveRef->read
UnicastServerRef#exportObject(Remote, Object):::With the addition of support for dynamic proxies as stubs, this method is obsolete because it returns RemoteStub instead of the more general Remote:::return->exportObject
UnicastServerRef#exportObject(Remote, Object, boolean):::Export this object, create the skeleton and stubs for this dispatcher:::implClass->impl->getClass->stub->try->Util->getClientRef->createProxy->catch->throw->new->ExportException->finally->if->setSkeleton->target->ref->getObjID->new->Target->ref->exportObject->hashToMethod_Maps->get->return
UnicastServerRef#getClientHost():::Return the hostname of the current client:::return->TCPTransport->getClientHost
UnicastServerRef#setSkeleton(Remote):::Discovers and sets the appropriate skeleton for the impl.:::if->withoutSkeletons->impl->getClass->containsKey->try->Util->createSkeleton->catch->withoutSkeletons->impl->getClass->put->finally
UnicastServerRef#dispatch(Remote, RemoteCall):::Call to dispatch to the remote object (on the server side):::num->op->try->in->try->call->getInputStream->in->readInt->catch->throw->new->UnmarshalException->finally->if->oldDispatch->return->else->if->throw->new->UnmarshalException->try->in->readLong->catch->throw->new->UnmarshalException->finally->marshalStream->marshalStream->skipDefaultResolveClass->method->hashToMethod_Map->get->if->throw->new->UnmarshalException->logCall->types->method->getParameterTypes->params->new->ObjectArr->try->unmarshalCustomCallData->for->i->catch->discardPendingRefs->throw->discardPendingRefs->throw->new->UnmarshalException->finally->call->releaseInputStream->result->try->method->invoke->catch->throw->e->getTargetException->finally->try->out->call->getResultStream->rtype->method->getReturnType->if->marshalValue->catch->throw->new->MarshalException->finally->catch->origEx->logCallException->out->call->getResultStream->if->new->ServerError->else->if->new->ServerException->if->clearStackTraces->out->writeObject->if->throw->new->IOException->finally->call->releaseInputStream->call->releaseOutputStream
UnicastServerRef#unmarshalCustomCallData(ObjectInput):::Sets a filter for invocation arguments, if a filter has been set:::if->ois->AccessController->ois->setObjectInputFilter->return->doPrivileged
UnicastServerRef#oldDispatch(Remote, RemoteCall, int):::Handle server-side dispatch using the RMI 1.1 stub/skeleton protocol, given a non-negative operation number or negative method hash that has already been read from the call stream:::hash->in->call->getInputStream->try->clazz->Class->forName->if->clazz->skel->getClass->isAssignableFrom->useCodebaseOnly->catch->finally->try->in->readLong->catch->throw->new->UnmarshalException->finally->operations->skel->getOperations->logCall->unmarshalCustomCallData->skel->dispatch
UnicastServerRef#clearStackTraces(Throwable):::Clear the stack trace of the given Throwable by replacing it with an empty StackTraceElement array, and do the same for all of its chained causative exceptions.:::empty->new->StackTraceElementArr->while->t->setStackTrace->t->getCause
UnicastServerRef#logCall(Remote, Object):::Log the details of an incoming call:::if->callLog->isLoggable->clientHost->try->getClientHost->catch->finally->callLog->obj->getClass->getName->ref->getObjID->toString->log
UnicastServerRef#logCallException(Throwable):::Log the exception detail of an incoming call.:::if->callLog->isLoggable->clientHost->try->getClientHost->catch->finally->callLog->log->if->log->synchronized->log->println->log->ref->getObjID->Thread->currentThread->getName->new->Date->println->e->printStackTrace
UnicastServerRef#getRefClass(ObjectOutput):::Returns the class of the ref type to be serialized.:::return
UnicastServerRef#getClientRef():::Return the client remote reference for this remoteRef:::return->new->UnicastRef
UnicastServerRef#writeExternal(ObjectOutput):::Write out external representation for remote ref.:::
UnicastServerRef#readExternal(ObjectInput):::Read in external representation for remote ref.:::
UnicastServerRef.HashToMethod_Maps#computeValue(Class)::: hash to method_ maps compute value:::map->new->HashMap<>->for->cl->cl->getSuperclass->return
UnicastServerRef2#getRefClass(ObjectOutput):::Returns the class of the ref type to be serialized:::return
UnicastServerRef2#getClientRef():::Return the client remote reference for this remoteRef:::return->new->UnicastRef2
Util#createProxy(Class, RemoteRef, boolean):::Returns a proxy for the specified implClass:::remoteClass->try->getRemoteClass->catch->throw->implClass->getName->new->StubNotFoundException->finally->if->stubClassExists->return->createStub->loader->implClass->getClassLoader->interfaces->getRemoteInterfaces->handler->new->RemoteObjectInvocationHandler->try->return->AccessController->new->PrivilegedAction<Remote>->doPrivileged->catch->throw->new->StubNotFoundException->finally
Util#stubClassExists(Class):::Returns true if a stub class for the given impl class can be loaded, otherwise returns false.:::if->withoutStubs->containsKey->try->Class->remoteClass->getName->remoteClass->getClassLoader->forName->return->catch->withoutStubs->put->finally->return
Util#getRemoteClass(Class)::: util get remote class:::while->interfaces->cl->getInterfaces->for->i->cl->getSuperclass->throw->new->ClassNotFoundException
Util#getRemoteInterfaces(Class):::Returns an array containing the remote interfaces implemented by the given class.:::list->new->ArrayList<>->getRemoteInterfaces->return->list->list->size->new->Class<?>Arr->toArray
Util#getRemoteInterfaces(ArrayList>, Class):::Fills the given array list with the remote interfaces implemented by the given class.:::superclass->cl->getSuperclass->if->getRemoteInterfaces->interfaces->cl->getInterfaces->for->i
Util#checkMethod(Method):::Verifies that the supplied method has at least one declared exception type that is RemoteException or one of its superclasses:::ex->m->getExceptionTypes->for->i->throw->new->IllegalArgumentException
Util#createStub(Class, RemoteRef):::Creates a RemoteStub instance for the specified class, constructed with the specified RemoteRef:::stubname->remoteClass->getName->try->stubcl->Class->remoteClass->getClassLoader->forName->cons->stubcl->getConstructor->return->cons->new->ObjectArr->newInstance->catch->throw->new->StubNotFoundException->throw->new->StubNotFoundException->throw->new->StubNotFoundException->throw->new->StubNotFoundException->throw->new->StubNotFoundException->throw->new->StubNotFoundException->finally
Util#createSkeleton(Remote):::Locate and return the Skeleton for the specified remote object:::cl->try->object->getClass->getRemoteClass->catch->throw->object->getClass->getName->new->SkeletonNotFoundException->finally->skelname->cl->getName->try->skelcl->Class->cl->getClassLoader->forName->return->skelcl->newInstance->catch->throw->new->SkeletonNotFoundException->throw->new->SkeletonNotFoundException->throw->new->SkeletonNotFoundException->throw->new->SkeletonNotFoundException->finally
Util#computeMethodHash(Method):::Compute the "method hash" of a remote method:::hash->sink->new->ByteArrayOutputStream->try->md->MessageDigest->getInstance->out->new->DigestOutputStream->new->DataOutputStream->s->getMethodNameAndDescriptor->if->serverRefLog->isLoggable->serverRefLog->log->out->writeUTF->out->flush->hasharray->md->digest->for->i->Math->min->catch->throw->complain->getMessage->new->SecurityException->finally->return
Util#getMethodNameAndDescriptor(Method):::Return a string consisting of the given method's name followed by its "method descriptor", as appropriate for use in the computation of the "method hash":::desc->m->getName->new->StringBuilder->desc->append->paramTypes->m->getParameterTypes->for->i->desc->append->returnType->m->getReturnType->if->desc->append->else->desc->getTypeDescriptor->append->return->desc->toString
Util#getTypeDescriptor(Class):::Get the descriptor of a particular type, as appropriate for either a parameter or return type in a method descriptor.:::if->type->isPrimitive->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->throw->new->Error->else->if->type->isArray->return->type->getName->replace->else->return->type->getName->replace
Util#getUnqualifiedName(Class):::Returns the binary name of the given type without package qualification:::binaryName->c->getName->return->binaryName->binaryName->lastIndexOf->substring
WeakClassHashMap#get(Class)::: weak class hash map get:::valueCell->synchronized->internalMap->get->if->new->ValueCell<V>->internalMap->put->synchronized->value->if->get->if->computeValue->new->SoftReference<V>->return
WeakClassHashMap#computeValue(Class)::: weak class hash map compute value:::

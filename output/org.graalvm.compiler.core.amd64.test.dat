org.graalvm.compiler.core.amd64.test.AMD64AddressLoweringTest#checkAMD64()->void::: d64 address lowering test check d64
org.graalvm.compiler.core.amd64.test.AMD64AddressLoweringTest#convertBaseAndIndexToDisplacement()->void::: d64 address lowering test convert base and index to displacement
org.graalvm.compiler.core.amd64.test.AMD64AddressLoweringTest#convertBaseToDisplacement()->void::: d64 address lowering test convert base to displacement
org.graalvm.compiler.core.amd64.test.AMD64AddressLoweringTest#convertBaseAndShiftedIndexToDisplacement()->void::: d64 address lowering test convert base and shifted index to displacement
org.graalvm.compiler.core.amd64.test.AMD64AddressLoweringTest#convertBaseAndNegatedShiftedIndexToDisplacement()->void::: d64 address lowering test convert base and negated shifted index to displacement
org.graalvm.compiler.core.amd64.test.AMD64AddressLoweringTest#convertNegatedBaseAndNegatedShiftedIndexToDisplacement()->void::: d64 address lowering test convert negated base and negated shifted index to displacement
org.graalvm.compiler.core.amd64.test.AMD64AddressLoweringTest#convertNegatedShiftedBaseAndNegatedIndexToDisplacement()->void::: d64 address lowering test convert negated shifted base and negated index to displacement
org.graalvm.compiler.core.amd64.test.AMD64AddressLoweringTest#convertTwoLevelsOfNegatedShiftedBaseAndNegatedIndexToDisplacement()->void::: d64 address lowering test convert two levels of negated shifted base and negated index to displacement
org.graalvm.compiler.core.amd64.test.AMD64AllocatorTest#checkAMD64()->void::: d64 allocator test check d64
org.graalvm.compiler.core.amd64.test.AMD64AllocatorTest#test1()->void::: d64 allocator test test1
org.graalvm.compiler.core.amd64.test.AMD64AllocatorTest#test1snippet(long)->long::: d64 allocator test test1snippet
org.graalvm.compiler.core.amd64.test.AMD64AllocatorTest#test2()->void::: d64 allocator test test2
org.graalvm.compiler.core.amd64.test.AMD64AllocatorTest#test2snippet(long)->long::: d64 allocator test test2snippet
org.graalvm.compiler.core.amd64.test.AMD64AllocatorTest#test3()->void::: d64 allocator test test3
org.graalvm.compiler.core.amd64.test.AMD64AllocatorTest#test3snippet(long)->long::: d64 allocator test test3snippet
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#checkAMD64()->void::: d64 match rule test check d64
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#test1Snippet(TestClass, TestClass, TestClass)->int::: d64 match rule test test1 snippet
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#test1()->void:::Verifies, if the match rules in AMD64NodeMatchRules do work on the graphs by compiling and checking if the expected LIR instruction show up.
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testVolatileExtensionSnippet()->long::: d64 match rule test test volatile extension snippet
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testVolatileExtension()->void::: d64 match rule test test volatile extension
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testLoadTestNoMatchSnippet()->short:::Can't match test and load of input because of volatile store in between.
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testLoadTestNoMatch()->void::: d64 match rule test test load test no match
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testAddLoadSnippet()->int:::Should match as an add with a memory operand.
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testAddLoad()->void::: d64 match rule test test add load
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testAddLoadNoMatchSnippet()->int:::Can't match as an add with a memory operand because the other add input is too late.
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testAddLoadNoMatch()->void::: d64 match rule test test add load no match
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testVolatileExtensionDifferentBlocksSnippet(boolean)->long:::sign extension and load are in different blocks but can still be matched as a single instruction.
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testVolatileExtensionDifferentBlocks()->void::: d64 match rule test test volatile extension different blocks
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testAddLoadDifferentBlocksNoMatchSnippet(boolean)->int:::Add and load are not in the same block and one input is too late: can't match.
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testAddLoadDifferentBlocksNoMatch()->void::: d64 match rule test test add load different blocks no match
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testAddLoadDifferentBlocksSnippet(boolean)->int:::Add and load are in different blocks but can still match.
org.graalvm.compiler.core.amd64.test.AMD64MatchRuleTest#testAddLoadDifferentBlocks()->void::: d64 match rule test test add load different blocks
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#checkAMD64()->void::: constant stack move test check d64
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testCopyByte(LoadConstantStackSpecByte)->byte::: constant stack move test test copy byte
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testByte()->byte::: constant stack move test test byte
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#runByte()->void::: constant stack move test run byte
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testCopyShort(LoadConstantStackSpecShort)->short::: constant stack move test test copy short
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testShort()->short::: constant stack move test test short
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#runShort()->void::: constant stack move test run short
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testCopyInt(LoadConstantStackSpecInteger)->int::: constant stack move test test copy int
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testInt()->int::: constant stack move test test int
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#runInt()->void::: constant stack move test run int
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testCopyLong(LoadConstantStackSpecLong)->long::: constant stack move test test copy long
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testLong()->long::: constant stack move test test long
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#runLong()->void::: constant stack move test run long
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testCopyFloat(LoadConstantStackSpecFloat)->float::: constant stack move test test copy float
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testFloat()->float::: constant stack move test test float
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#runFloat()->void::: constant stack move test run float
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testCopyDouble(LoadConstantStackSpecDouble)->double::: constant stack move test test copy double
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#testDouble()->double::: constant stack move test test double
org.graalvm.compiler.core.amd64.test.ConstantStackMoveTest#runDouble()->void::: constant stack move test run double
org.graalvm.compiler.core.amd64.test.StackStoreTest#checkAMD64()->void::: stack store test check d64
org.graalvm.compiler.core.amd64.test.StackStoreTest#testShortStackSlot(LIRTestSpecification, int)->int::: stack store test test short stack slot
org.graalvm.compiler.core.amd64.test.StackStoreTest#testShortStackSlot2(LIRTestSpecification, int)->short::: stack store test test short stack slot2
org.graalvm.compiler.core.amd64.test.StackStoreTest#test0(int)->int::: stack store test test0
org.graalvm.compiler.core.amd64.test.StackStoreTest#run0()->void::: stack store test run0
org.graalvm.compiler.core.amd64.test.StackStoreTest#test1(int)->int::: stack store test test1
org.graalvm.compiler.core.amd64.test.StackStoreTest#run1()->void::: stack store test run1
org.graalvm.compiler.core.amd64.test.StackStoreTest#test2(int)->int::: stack store test test2
org.graalvm.compiler.core.amd64.test.StackStoreTest#run2()->void::: stack store test run2

AMD64MatchRuleTest#test1():::Verifies, if the match rules in AMD64NodeMatchRules do work on the graphs by compiling and checking if the expected LIR instruction show up.:::getResolvedJavaMethod->compile->lir->getLIR->found->foreach->lir->lir->codeEmittingOrder->getLIRforBlock->if->getOpcode->toString->equals->assertFalse->assertTrue
AMD64MatchRuleTest#testLoadTestNoMatchSnippet():::Can't match test and load of input because of volatile store in between.:::v->if->return->return
AMD64MatchRuleTest#testAddLoadSnippet():::Should match as an add with a memory operand.:::v1->v2->return
AMD64MatchRuleTest#testAddLoadNoMatchSnippet():::Can't match as an add with a memory operand because the other add input is too late.:::v1->v2->return
AMD64MatchRuleTest#testVolatileExtensionDifferentBlocksSnippet(boolean):::sign extension and load are in different blocks but can still be matched as a single instruction.:::v->if->return->return
AMD64MatchRuleTest#testAddLoadDifferentBlocksNoMatchSnippet(boolean):::Add and load are not in the same block and one input is too late: can't match.:::v1->if->v2->return->return
AMD64MatchRuleTest#testAddLoadDifferentBlocksSnippet(boolean):::Add and load are in different blocks but can still match.:::v2->v1->if->return->return

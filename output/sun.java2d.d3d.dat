sun.java2d.d3d.D3DBlitLoops#register()->void::: d3 blit loops register
sun.java2d.d3d.D3DBlitLoops#Blit(SurfaceData, SurfaceData, Composite, Region, AffineTransform, int, int, int, int, int, double, double, double, double, int, boolean)->void::: d3 blit loops  blit
sun.java2d.d3d.D3DBlitLoops#IsoBlit(SurfaceData, SurfaceData, BufferedImage, BufferedImageOp, Composite, Region, AffineTransform, int, int, int, int, int, double, double, double, double, boolean)->void:::Note: The srcImg and biop parameters are only used when invoked from the D3DBufImgOps.renderImageWithOp() method; in all other cases, this method can be called with null values for those two parameters, and they will be effectively ignored.
sun.java2d.d3d.D3DSurfaceToSurfaceBlit#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: d3 surface to surface blit  blit
sun.java2d.d3d.D3DSurfaceToSurfaceScale#Scale(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, double, double, double, double)->void::: d3 surface to surface scale  scale
sun.java2d.d3d.D3DSurfaceToSurfaceTransform#Transform(SurfaceData, SurfaceData, Composite, Region, AffineTransform, int, int, int, int, int, int, int)->void::: d3 surface to surface transform  transform
sun.java2d.d3d.D3DRTTSurfaceToSurfaceBlit#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: d3 surface to surface blit  blit
sun.java2d.d3d.D3DRTTSurfaceToSurfaceScale#Scale(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, double, double, double, double)->void::: d3 surface to surface scale  scale
sun.java2d.d3d.D3DRTTSurfaceToSurfaceTransform#Transform(SurfaceData, SurfaceData, Composite, Region, AffineTransform, int, int, int, int, int, int, int)->void::: d3 surface to surface transform  transform
sun.java2d.d3d.D3DSurfaceToSwBlit#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: d3 surface to sw blit  blit
sun.java2d.d3d.D3DSwToSurfaceBlit#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: d3 sw to surface blit  blit
sun.java2d.d3d.D3DSwToSurfaceScale#Scale(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, double, double, double, double)->void::: d3 sw to surface scale  scale
sun.java2d.d3d.D3DSwToSurfaceTransform#Transform(SurfaceData, SurfaceData, Composite, Region, AffineTransform, int, int, int, int, int, int, int)->void::: d3 sw to surface transform  transform
sun.java2d.d3d.D3DSwToTextureBlit#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: d3 sw to texture blit  blit
sun.java2d.d3d.D3DTextureToSurfaceBlit#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: d3 texture to surface blit  blit
sun.java2d.d3d.D3DTextureToSurfaceScale#Scale(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, double, double, double, double)->void::: d3 texture to surface scale  scale
sun.java2d.d3d.D3DTextureToSurfaceTransform#Transform(SurfaceData, SurfaceData, Composite, Region, AffineTransform, int, int, int, int, int, int, int)->void::: d3 texture to surface transform  transform
sun.java2d.d3d.D3DGeneralBlit#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: d3 general blit  blit
sun.java2d.d3d.D3DGeneralTransformedBlit#Transform(SurfaceData, SurfaceData, Composite, Region, AffineTransform, int, int, int, int, int, int, int)->void::: d3 general transformed blit  transform
sun.java2d.d3d.D3DSurfaceToGDIWindowSurfaceBlit#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: d3 surface to window surface blit  blit
sun.java2d.d3d.D3DSurfaceToGDIWindowSurfaceScale#Scale(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, double, double, double, double)->void::: d3 surface to window surface scale  scale
sun.java2d.d3d.D3DSurfaceToGDIWindowSurfaceTransform#Transform(SurfaceData, SurfaceData, Composite, Region, AffineTransform, int, int, int, int, int, int, int)->void::: d3 surface to window surface transform  transform
sun.java2d.d3d.D3DBufImgOps#renderImageWithOp(SunGraphics2D, BufferedImage, BufferedImageOp, int, int)->boolean:::This method is called from D3DDrawImage.transformImage() only
sun.java2d.d3d.D3DContext#invalidateCurrentContext()->void:::Invalidates the currentContext field to ensure that we properly revalidate the D3DContext (make it current, etc.) next time through the validate() method
sun.java2d.d3d.D3DContext#setScratchSurface(D3DContext)->void:::Sets the current context on the native level to be the one passed as the argument
sun.java2d.d3d.D3DContext#getRenderQueue()->RenderQueue::: d3 context get render queue
sun.java2d.d3d.D3DContext#saveState()->void::: d3 context save state
sun.java2d.d3d.D3DContext#restoreState()->void::: d3 context restore state
sun.java2d.d3d.D3DContext#getDevice()->D3DGraphicsDevice::: d3 context get device
sun.java2d.d3d.D3DContext.D3DContextCaps#toString()->String::: d3 context caps to string
sun.java2d.d3d.D3DDrawImage#renderImageXform(SunGraphics2D, Image, AffineTransform, int, int, int, int, int, Color)->void::: d3 draw image render image xform
sun.java2d.d3d.D3DDrawImage#transformImage(SunGraphics2D, BufferedImage, BufferedImageOp, int, int)->void::: d3 draw image transform image
sun.java2d.d3d.D3DGraphicsConfig#createManagedSurface(int, int, int)->SurfaceData::: d3 graphics config create managed surface
sun.java2d.d3d.D3DGraphicsConfig#displayChanged()->void::: d3 graphics config display changed
sun.java2d.d3d.D3DGraphicsConfig#getColorModel(int)->ColorModel::: d3 graphics config get color model
sun.java2d.d3d.D3DGraphicsConfig#toString()->String::: d3 graphics config to string
sun.java2d.d3d.D3DGraphicsConfig#createSurfaceData(WComponentPeer, int)->SurfaceData:::Creates a new SurfaceData that will be associated with the given WComponentPeer
sun.java2d.d3d.D3DGraphicsConfig#assertOperationSupported(Component, int, BufferCapabilities)->void:::Checks that the requested configuration is natively supported; if not, an AWTException is thrown.
sun.java2d.d3d.D3DGraphicsConfig#createBackBuffer(WComponentPeer)->VolatileImage:::Creates a D3D-based backbuffer for the given peer and returns the image wrapper.
sun.java2d.d3d.D3DGraphicsConfig#flip(WComponentPeer, Component, VolatileImage, int, int, int, int, BufferCapabilities.FlipContents)->void:::Performs the native D3D flip operation for the given target Component.
sun.java2d.d3d.D3DGraphicsConfig#getBufferCapabilities()->BufferCapabilities::: d3 graphics config get buffer capabilities
sun.java2d.d3d.D3DGraphicsConfig#getImageCapabilities()->ImageCapabilities::: d3 graphics config get image capabilities
sun.java2d.d3d.D3DGraphicsConfig#getD3DDevice()->D3DGraphicsDevice::: d3 graphics config get d3 device
sun.java2d.d3d.D3DGraphicsConfig#getContext()->D3DContext::: d3 graphics config get context
sun.java2d.d3d.D3DGraphicsConfig#createCompatibleVolatileImage(int, int, int, int)->VolatileImage::: d3 graphics config create compatible volatile image
sun.java2d.d3d.D3DGraphicsConfig#getContextCapabilities()->ContextCapabilities::: d3 graphics config get context capabilities
sun.java2d.d3d.D3DGraphicsDevice#createDevice(int)->D3DGraphicsDevice:::Used to construct a Direct3D-enabled GraphicsDevice.
sun.java2d.d3d.D3DGraphicsDevice#isCapPresent(int)->boolean::: d3 graphics device is cap present
sun.java2d.d3d.D3DGraphicsDevice#isD3DEnabledOnDevice()->boolean::: d3 graphics device is d3 enabled on device
sun.java2d.d3d.D3DGraphicsDevice#isD3DAvailable()->boolean:::Returns true if d3d pipeline has been successfully initialized.
sun.java2d.d3d.D3DGraphicsDevice#enterFullScreenExclusive(int, WindowPeer)->void::: d3 graphics device enter full screen exclusive
sun.java2d.d3d.D3DGraphicsDevice#exitFullScreenExclusive(int, WindowPeer)->void::: d3 graphics device exit full screen exclusive
sun.java2d.d3d.D3DGraphicsDevice#addFSWindowListener(Window)->void::: d3 graphics device add window listener
sun.java2d.d3d.D3DGraphicsDevice#removeFSWindowListener(Window)->void::: d3 graphics device remove window listener
sun.java2d.d3d.D3DGraphicsDevice#getCurrentDisplayMode(int)->DisplayMode::: d3 graphics device get current display mode
sun.java2d.d3d.D3DGraphicsDevice#configDisplayMode(int, WindowPeer, int, int, int, int)->void::: d3 graphics device config display mode
sun.java2d.d3d.D3DGraphicsDevice#enumDisplayModes(int, ArrayList)->void::: d3 graphics device enum display modes
sun.java2d.d3d.D3DGraphicsDevice#getAvailableAcceleratedMemory()->int::: d3 graphics device get available accelerated memory
sun.java2d.d3d.D3DGraphicsDevice#getConfigurations()->GraphicsConfiguration[]::: d3 graphics device get configurations
sun.java2d.d3d.D3DGraphicsDevice#getDefaultConfiguration()->GraphicsConfiguration::: d3 graphics device get default configuration
sun.java2d.d3d.D3DGraphicsDevice#isD3DAvailableOnDevice(int)->boolean::: d3 graphics device is d3 available on device
sun.java2d.d3d.D3DGraphicsDevice#getContext()->D3DContext::: d3 graphics device get context
sun.java2d.d3d.D3DGraphicsDevice#getContextCapabilities()->ContextCapabilities::: d3 graphics device get context capabilities
sun.java2d.d3d.D3DGraphicsDevice#displayChanged()->void::: d3 graphics device display changed
sun.java2d.d3d.D3DGraphicsDevice#invalidate(int)->void::: d3 graphics device invalidate
sun.java2d.d3d.D3DMaskBlit#register()->void::: d3 mask blit register
sun.java2d.d3d.D3DMaskBlit#validateContext(SurfaceData, Composite, Region)->void::: d3 mask blit validate context
sun.java2d.d3d.D3DMaskFill#register()->void::: d3 mask fill register
sun.java2d.d3d.D3DMaskFill#maskFill(int, int, int, int, int, int, int, byte[])->void::: d3 mask fill mask fill
sun.java2d.d3d.D3DMaskFill#validateContext(SunGraphics2D, Composite, int)->void::: d3 mask fill validate context
sun.java2d.d3d.D3DPaints#isValid(SunGraphics2D)->boolean:::Attempts to locate an implementation corresponding to the paint state of the provided SunGraphics2D object
sun.java2d.d3d.D3DPaints#isPaintValid(SunGraphics2D)->boolean:::Returns true if this implementation is able to accelerate the Paint object associated with, and under the conditions of, the provided SunGraphics2D instance; otherwise returns false.
sun.java2d.d3d.D3DRenderer#validateContext(SunGraphics2D)->void::: d3 renderer validate context
sun.java2d.d3d.D3DRenderer#validateContextAA(SunGraphics2D)->void::: d3 renderer validate context a
sun.java2d.d3d.D3DRenderer#copyArea(SunGraphics2D, int, int, int, int, int, int)->void::: d3 renderer copy area
sun.java2d.d3d.D3DRenderer#drawPoly(int[], int[], int, boolean, int, int)->void::: d3 renderer draw poly
sun.java2d.d3d.D3DRenderer#traceWrap()->D3DRenderer::: d3 renderer trace wrap
sun.java2d.d3d.D3DRenderQueue#getInstance()->D3DRenderQueue:::Returns the single D3DRenderQueue instance
sun.java2d.d3d.D3DRenderQueue#sync()->void:::Flushes the single D3DRenderQueue instance synchronously
sun.java2d.d3d.D3DRenderQueue#restoreDevices()->void:::Attempt to restore the devices if they're in the lost state
sun.java2d.d3d.D3DRenderQueue#isRenderQueueThread()->boolean::: d3 render queue is render queue thread
sun.java2d.d3d.D3DRenderQueue#disposeGraphicsConfig(long)->void:::Disposes the native memory associated with the given native graphics config info pointer on the single queue flushing thread.
sun.java2d.d3d.D3DRenderQueue#flushNow()->void::: d3 render queue flush now
sun.java2d.d3d.D3DRenderQueue#flushAndInvokeNow(Runnable)->void::: d3 render queue flush and invoke now
sun.java2d.d3d.D3DScreenUpdateManager#createScreenSurface(Win32GraphicsConfig, WComponentPeer, int, boolean)->SurfaceData:::If possible, creates a D3DWindowSurfaceData (which is actually a back-buffer surface)
sun.java2d.d3d.D3DScreenUpdateManager#canUseD3DOnScreen(WComponentPeer, Win32GraphicsConfig, int)->boolean:::Determines if we can use a d3d surface for onscreen rendering for this peer
sun.java2d.d3d.D3DScreenUpdateManager#createGraphics(SurfaceData, WComponentPeer, Color, Color, Font)->Graphics2D:::Creates a graphics object for the passed in surface data
sun.java2d.d3d.D3DScreenUpdateManager#dropScreenSurface(SurfaceData)->void::: d3 screen update manager drop screen surface
sun.java2d.d3d.D3DScreenUpdateManager#getReplacementScreenSurface(WComponentPeer, SurfaceData)->SurfaceData::: d3 screen update manager get replacement screen surface
sun.java2d.d3d.D3DScreenUpdateManager#wakeUpUpdateThread()->void:::Wakes up the screen updater thread
sun.java2d.d3d.D3DScreenUpdateManager#runUpdateNow()->void:::Wakes up the screen updater thread and waits for the completion of the update
sun.java2d.d3d.D3DScreenUpdateManager#run()->void::: d3 screen update manager run
sun.java2d.d3d.D3DSurfaceData#getDefaultScaleX()->double::: d3 surface data get default scale x
sun.java2d.d3d.D3DSurfaceData#getDefaultScaleY()->double::: d3 surface data get default scale y
sun.java2d.d3d.D3DSurfaceData#makeProxyFor(SurfaceData)->SurfaceDataProxy::: d3 surface data make proxy for
sun.java2d.d3d.D3DSurfaceData#createData(WComponentPeer, Image)->D3DSurfaceData:::Creates a SurfaceData object representing the back buffer of a double-buffered on-screen Window.
sun.java2d.d3d.D3DSurfaceData#createData(WComponentPeer)->D3DSurfaceData:::Returns a WINDOW type of surface - a swap chain which serves as an on-screen surface, handled by the D3DScreenUpdateManager
sun.java2d.d3d.D3DSurfaceData#createData(D3DGraphicsConfig, int, int, ColorModel, Image, int)->D3DSurfaceData:::Creates a SurfaceData object representing an off-screen buffer (either a plain surface or Texture).
sun.java2d.d3d.D3DSurfaceData#initSurface()->void:::Initializes the appropriate D3D offscreen surface based on the value of the type parameter
sun.java2d.d3d.D3DSurfaceData#getContext()->D3DContext:::Returns the D3DContext for the GraphicsConfig associated with this surface.
sun.java2d.d3d.D3DSurfaceData#getType()->int:::Returns one of the surface type constants defined above.
sun.java2d.d3d.D3DSurfaceData.D3DDataBufferNative#getElem(int, int, SurfaceData)->int::: d3 data buffer native get elem
sun.java2d.d3d.D3DSurfaceData.D3DDataBufferNative#setElem(int, int, int, SurfaceData)->void::: d3 data buffer native set elem
sun.java2d.d3d.D3DSurfaceData#getRaster(int, int, int, int)->Raster::: d3 surface data get raster
sun.java2d.d3d.D3DSurfaceData#canRenderLCDText(SunGraphics2D)->boolean:::For now, we can only render LCD text if:   - the pixel shaders are available, and   - blending is disabled, and   - the source color is opaque   - and the destination is opaque
sun.java2d.d3d.D3DSurfaceData#disableAccelerationForSurface()->void:::If acceleration should no longer be used for this surface
sun.java2d.d3d.D3DSurfaceData#validatePipe(SunGraphics2D)->void::: d3 surface data validate pipe
sun.java2d.d3d.D3DSurfaceData#getMaskFill(SunGraphics2D)->MaskFill::: d3 surface data get mask fill
sun.java2d.d3d.D3DSurfaceData#copyArea(SunGraphics2D, int, int, int, int, int, int)->boolean::: d3 surface data copy area
sun.java2d.d3d.D3DSurfaceData#flush()->void::: d3 surface data flush
sun.java2d.d3d.D3DSurfaceData#dispose(long)->void:::Disposes the native resources associated with the given D3DSurfaceData (referenced by the pData parameter)
sun.java2d.d3d.D3DSurfaceData#swapBuffers(D3DSurfaceData, int, int, int, int)->void::: d3 surface data swap buffers
sun.java2d.d3d.D3DSurfaceData#getDestination()->Object:::Returns destination Image associated with this SurfaceData.
sun.java2d.d3d.D3DSurfaceData#getBounds()->Rectangle::: d3 surface data get bounds
sun.java2d.d3d.D3DSurfaceData#getNativeBounds()->Rectangle::: d3 surface data get native bounds
sun.java2d.d3d.D3DSurfaceData#getDeviceConfiguration()->GraphicsConfiguration::: d3 surface data get device configuration
sun.java2d.d3d.D3DSurfaceData#getReplacement()->SurfaceData::: d3 surface data get replacement
sun.java2d.d3d.D3DSurfaceData#restoreSurface()->void:::Attempts to restore the surface by initializing the native data
sun.java2d.d3d.D3DSurfaceData#getPeer()->WComponentPeer::: d3 surface data get peer
sun.java2d.d3d.D3DSurfaceData#setSurfaceLost(boolean)->void:::We need to let the surface manager know that the surface is lost so that for example BufferStrategy.contentsLost() returns correct result
sun.java2d.d3d.D3DSurfaceData#getNativeResource(int)->long:::Returns a pointer to the native resource of specified resType associated with this surface
sun.java2d.d3d.D3DSurfaceData.D3DWindowSurfaceData#getReplacement()->SurfaceData:::  Overridden to use ScreenUpdateManager to obtain the replacement surface.
sun.java2d.d3d.D3DSurfaceData.D3DWindowSurfaceData#getDestination()->Object:::Returns destination Component associated with this SurfaceData.
sun.java2d.d3d.D3DSurfaceData.D3DWindowSurfaceData#disableAccelerationForSurface()->void::: d3 window surface data disable acceleration for surface
sun.java2d.d3d.D3DSurfaceData.D3DWindowSurfaceData#restoreSurface()->void::: d3 window surface data restore surface
sun.java2d.d3d.D3DSurfaceData.D3DWindowSurfaceData#isDirty()->boolean::: d3 window surface data is dirty
sun.java2d.d3d.D3DSurfaceData.D3DWindowSurfaceData#markClean()->void::: d3 window surface data mark clean
sun.java2d.d3d.D3DSurfaceData#updateWindowAccelImpl(long, long, int, int)->boolean:::Updates the layered window with the contents of the surface.
sun.java2d.d3d.D3DSurfaceDataProxy#createProxy(SurfaceData, D3DGraphicsConfig)->SurfaceDataProxy::: d3 surface data proxy create proxy
sun.java2d.d3d.D3DSurfaceDataProxy#validateSurfaceData(SurfaceData, SurfaceData, int, int)->SurfaceData::: d3 surface data proxy validate surface data
sun.java2d.d3d.D3DSurfaceDataProxy#isSupportedOperation(SurfaceData, int, CompositeType, Color)->boolean::: d3 surface data proxy is supported operation
sun.java2d.d3d.D3DTextRenderer#drawGlyphList(int, boolean, boolean, boolean, int, float, float, long[], float[])->void::: d3 text renderer draw glyph list
sun.java2d.d3d.D3DTextRenderer#validateContext(SunGraphics2D, Composite)->void::: d3 text renderer validate context
sun.java2d.d3d.D3DTextRenderer#traceWrap()->D3DTextRenderer::: d3 text renderer trace wrap
sun.java2d.d3d.D3DVolatileSurfaceManager#isAccelerationEnabled()->boolean::: d3 volatile surface manager is acceleration enabled
sun.java2d.d3d.D3DVolatileSurfaceManager#setAccelerationEnabled(boolean)->void::: d3 volatile surface manager set acceleration enabled
sun.java2d.d3d.D3DVolatileSurfaceManager#initAcceleratedSurface()->SurfaceData:::Create a pbuffer-based SurfaceData object (or init the backbuffer of an existing window if this is a double buffered GraphicsConfig).
sun.java2d.d3d.D3DVolatileSurfaceManager#isConfigValid(GraphicsConfiguration)->boolean::: d3 volatile surface manager is config valid
sun.java2d.d3d.D3DVolatileSurfaceManager#restoreAcceleratedSurface()->void:::Note that we create a new surface instead of restoring an old one
sun.java2d.d3d.D3DVolatileSurfaceManager#restoreContents()->SurfaceData:::We're asked to restore contents by the accelerated surface, which means that it had been lost.
sun.java2d.d3d.D3DVolatileSurfaceManager#handleVItoScreenOp(SurfaceData, SurfaceData)->void:::If the destination surface's peer can potentially handle accelerated on-screen rendering then it is likely that the condition which resulted in VI to Screen operation is temporary, so this method sets the restore countdown in hope that the on-screen accelerated rendering will resume
sun.java2d.d3d.D3DVolatileSurfaceManager#initContents()->void::: d3 volatile surface manager init contents

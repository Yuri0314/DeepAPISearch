ComparableWord#equal(ComparableWord):::Compares this word with the specified value.:::
ComparableWord#notEqual(ComparableWord):::Compares this word with the specified value.:::
LocationIdentity.AnyLocationIdentity#isImmutable()::: any location identity is immutable:::return
LocationIdentity.AnyLocationIdentity#toString()::: any location identity to string:::return
LocationIdentity.InitLocationIdentity#isImmutable()::: init location identity is immutable:::return
LocationIdentity.InitLocationIdentity#toString()::: init location identity to string:::return
LocationIdentity#any():::Indicates that the given location is the union of all possible mutable locations:::return
LocationIdentity#init():::Location only allowed to be used for writes:::return
LocationIdentity#isImmutable():::Denotes a location is unchanging in all cases:::
LocationIdentity#isMutable():::The inversion of #isImmutable.:::return->isImmutable
LocationIdentity#isAny():::Returns true if this location identity is #any.:::return
LocationIdentity#isInit():::Returns true if this location identity is #init.:::return
LocationIdentity#isSingle():::Returns true if this location identity is not #any.:::return
LocationIdentity#overlaps(LocationIdentity):::Returns true if the memory slice denoted by this location identity may overlap with the provided other location identity.:::return->isAny->other->isAny->this->equals
Pointer#toObject():::Unsafe conversion of this Pointer to a Java language object:::
Pointer#toObjectNonNull():::Unsafe conversion of this Pointer to a Java language object:::
Pointer#readByte(WordBase, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readChar(WordBase, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readShort(WordBase, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readInt(WordBase, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readLong(WordBase, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readFloat(WordBase, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readDouble(WordBase, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readWord(WordBase, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readObject(WordBase, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readByte(int, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readChar(int, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readShort(int, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readInt(int, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readLong(int, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readFloat(int, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readDouble(int, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readWord(int, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#readObject(int, LocationIdentity):::Reads the memory at address (this + offset):::
Pointer#writeByte(WordBase, byte, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeChar(WordBase, char, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeShort(WordBase, short, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeInt(WordBase, int, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeLong(WordBase, long, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeFloat(WordBase, float, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeDouble(WordBase, double, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeWord(WordBase, WordBase, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#initializeLong(WordBase, long, LocationIdentity):::Initializes the memory at address (this + offset):::
Pointer#writeObject(WordBase, Object, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeByte(int, byte, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeChar(int, char, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeShort(int, short, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeInt(int, int, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeLong(int, long, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeFloat(int, float, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeDouble(int, double, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#writeWord(int, WordBase, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#initializeLong(int, long, LocationIdentity):::Initializes the memory at address (this + offset):::
Pointer#writeObject(int, Object, LocationIdentity):::Writes the memory at address (this + offset):::
Pointer#readByte(WordBase):::Reads the memory at address (this + offset):::
Pointer#readChar(WordBase):::Reads the memory at address (this + offset):::
Pointer#readShort(WordBase):::Reads the memory at address (this + offset):::
Pointer#readInt(WordBase):::Reads the memory at address (this + offset):::
Pointer#readLong(WordBase):::Reads the memory at address (this + offset):::
Pointer#readFloat(WordBase):::Reads the memory at address (this + offset):::
Pointer#readDouble(WordBase):::Reads the memory at address (this + offset):::
Pointer#readWord(WordBase):::Reads the memory at address (this + offset):::
Pointer#readObject(WordBase):::Reads the memory at address (this + offset):::
Pointer#readByte(int):::Reads the memory at address (this + offset):::
Pointer#readChar(int):::Reads the memory at address (this + offset):::
Pointer#readShort(int):::Reads the memory at address (this + offset):::
Pointer#readInt(int):::Reads the memory at address (this + offset):::
Pointer#readLong(int):::Reads the memory at address (this + offset):::
Pointer#readFloat(int):::Reads the memory at address (this + offset):::
Pointer#readDouble(int):::Reads the memory at address (this + offset):::
Pointer#readWord(int):::Reads the memory at address (this + offset):::
Pointer#readObject(int):::Reads the memory at address (this + offset):::
Pointer#writeByte(WordBase, byte):::Writes the memory at address (this + offset):::
Pointer#writeChar(WordBase, char):::Writes the memory at address (this + offset):::
Pointer#writeShort(WordBase, short):::Writes the memory at address (this + offset):::
Pointer#writeInt(WordBase, int):::Writes the memory at address (this + offset):::
Pointer#writeLong(WordBase, long):::Writes the memory at address (this + offset):::
Pointer#writeFloat(WordBase, float):::Writes the memory at address (this + offset):::
Pointer#writeDouble(WordBase, double):::Writes the memory at address (this + offset):::
Pointer#writeWord(WordBase, WordBase):::Writes the memory at address (this + offset):::
Pointer#writeObject(WordBase, Object):::Writes the memory at address (this + offset):::
Pointer#compareAndSwapInt(WordBase, int, int, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#compareAndSwapLong(WordBase, long, long, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#compareAndSwapWord(WordBase, T, T, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#compareAndSwapObject(WordBase, Object, Object, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#logicCompareAndSwapInt(WordBase, int, int, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#logicCompareAndSwapLong(WordBase, long, long, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#logicCompareAndSwapWord(WordBase, WordBase, WordBase, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#logicCompareAndSwapObject(WordBase, Object, Object, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#writeByte(int, byte):::Writes the memory at address (this + offset):::
Pointer#writeChar(int, char):::Writes the memory at address (this + offset):::
Pointer#writeShort(int, short):::Writes the memory at address (this + offset):::
Pointer#writeInt(int, int):::Writes the memory at address (this + offset):::
Pointer#writeLong(int, long):::Writes the memory at address (this + offset):::
Pointer#writeFloat(int, float):::Writes the memory at address (this + offset):::
Pointer#writeDouble(int, double):::Writes the memory at address (this + offset):::
Pointer#writeWord(int, WordBase):::Writes the memory at address (this + offset):::
Pointer#writeObject(int, Object):::Writes the memory at address (this + offset):::
Pointer#compareAndSwapInt(int, int, int, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#compareAndSwapLong(int, long, long, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#compareAndSwapWord(int, T, T, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#compareAndSwapObject(int, Object, Object, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#logicCompareAndSwapInt(int, int, int, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#logicCompareAndSwapLong(int, long, long, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#logicCompareAndSwapWord(int, WordBase, WordBase, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#logicCompareAndSwapObject(int, Object, Object, LocationIdentity):::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value:::
Pointer#add(UnsignedWord):::Returns a Pointer whose value is (this + val).:::
Pointer#add(int):::Returns a Pointer whose value is (this + val).:::
Pointer#subtract(UnsignedWord):::Returns a Pointer whose value is (this - val).:::
Pointer#subtract(int):::Returns a Pointer whose value is (this - val).:::
Pointer#and(UnsignedWord):::Returns a Pointer whose value is (this & val).:::
Pointer#and(int):::Returns a Pointer whose value is (this & val).:::
Pointer#or(UnsignedWord):::Returns a Pointer whose value is (this | val).:::
Pointer#or(int):::Returns a Pointer whose value is (this | val).:::
PointerBase#isNull():::Returns true if this pointer is the WordFactory#nullPointer null pointer.:::
PointerBase#isNonNull():::Returns true if this pointer is not the WordFactory#nullPointer null pointer.:::
SignedWord#add(SignedWord):::Returns a Signed whose value is (this + val).:::
SignedWord#subtract(SignedWord):::Returns a Signed whose value is (this - val).:::
SignedWord#multiply(SignedWord):::Returns a Signed whose value is (this * val).:::
SignedWord#signedDivide(SignedWord):::Returns a Signed whose value is (this / val).:::
SignedWord#signedRemainder(SignedWord):::Returns a Signed whose value is (this % val).:::
SignedWord#shiftLeft(UnsignedWord):::Returns a Signed whose value is (this << n).:::
SignedWord#signedShiftRight(UnsignedWord):::Returns a Signed whose value is (this >> n):::
SignedWord#and(SignedWord):::Returns a Signed whose value is (this & val):::
SignedWord#ord or(SignedWord):::Returns a Signed whose value is (this | val):::
SignedWord#xor(SignedWord):::Returns a Signed whose value is (this ^ val):::
SignedWord#not():::Returns a Signed whose value is (~this):::
SignedWord#equal(SignedWord):::Compares this Signed with the specified value.:::
SignedWord#notEqual(SignedWord):::Compares this Signed with the specified value.:::
SignedWord#lessThan(SignedWord):::Compares this Signed with the specified value.:::
SignedWord#lessOrEqual(SignedWord):::Compares this Signed with the specified value.:::
SignedWord#greaterThan(SignedWord):::Compares this Signed with the specified value.:::
SignedWord#greaterOrEqual(SignedWord):::Compares this Signed with the specified value.:::
SignedWord#add(int):::Returns a Signed whose value is (this + val).:::
SignedWord#subtract(int):::Returns a Signed whose value is (this - val).:::
SignedWord#multiply(int):::Returns a Signed whose value is (this * val).:::
SignedWord#signedDivide(int):::Returns a Signed whose value is (this / val).:::
SignedWord#signedRemainder(int):::Returns a Signed whose value is (this % val).:::
SignedWord#shiftLeft(int):::Returns a Signed whose value is (this << n).:::
SignedWord#signedShiftRight(int):::Returns a Signed whose value is (this >> n):::
SignedWord#and(int):::Returns a Signed whose value is (this & val):::
SignedWord#ord or(int):::Returns a Signed whose value is (this | val):::
SignedWord#xor(int):::Returns a Signed whose value is (this ^ val):::
SignedWord#equal(int):::Compares this Signed with the specified value.:::
SignedWord#notEqual(int):::Compares this Signed with the specified value.:::
SignedWord#lessThan(int):::Compares this Signed with the specified value.:::
SignedWord#lessOrEqual(int):::Compares this Signed with the specified value.:::
SignedWord#greaterThan(int):::Compares this Signed with the specified value.:::
SignedWord#greaterOrEqual(int):::Compares this Signed with the specified value.:::
UnsignedWord#add(UnsignedWord):::Returns a Unsigned whose value is (this + val).:::
UnsignedWord#subtract(UnsignedWord):::Returns a Unsigned whose value is (this - val).:::
UnsignedWord#multiply(UnsignedWord):::Returns a Unsigned whose value is (this * val).:::
UnsignedWord#unsignedDivide(UnsignedWord):::Returns a Unsigned whose value is (this / val).:::
UnsignedWord#unsignedRemainder(UnsignedWord):::Returns a Unsigned whose value is (this % val).:::
UnsignedWord#shiftLeft(UnsignedWord):::Returns a Unsigned whose value is (this << n).:::
UnsignedWord#unsignedShiftRight(UnsignedWord):::Returns a Unsigned whose value is (this >>> n):::
UnsignedWord#and(UnsignedWord):::Returns a Unsigned whose value is (this & val).:::
UnsignedWord#ord or(UnsignedWord):::Returns a Unsigned whose value is (this | val).:::
UnsignedWord#xor(UnsignedWord):::Returns a Unsigned whose value is (this ^ val).:::
UnsignedWord#not():::Returns a Unsigned whose value is (~this).:::
UnsignedWord#equal(UnsignedWord):::Compares this Unsigned with the specified value.:::
UnsignedWord#notEqual(UnsignedWord):::Compares this Unsigned with the specified value.:::
UnsignedWord#belowThan(UnsignedWord):::Compares this Unsigned with the specified value.:::
UnsignedWord#belowOrEqual(UnsignedWord):::Compares this Unsigned with the specified value.:::
UnsignedWord#aboveThan(UnsignedWord):::Compares this Unsigned with the specified value.:::
UnsignedWord#aboveOrEqual(UnsignedWord):::Compares this Unsigned with the specified value.:::
UnsignedWord#add(int):::Returns a Unsigned whose value is (this + val):::
UnsignedWord#subtract(int):::Returns a Unsigned whose value is (this - val):::
UnsignedWord#multiply(int):::Returns a Unsigned whose value is (this * val):::
UnsignedWord#unsignedDivide(int):::Returns a Unsigned whose value is (this / val):::
UnsignedWord#unsignedRemainder(int):::Returns a Unsigned whose value is (this % val):::
UnsignedWord#shiftLeft(int):::Returns a Unsigned whose value is (this << n):::
UnsignedWord#unsignedShiftRight(int):::Returns a Unsigned whose value is (this >>> n):::
UnsignedWord#and(int):::Returns a Unsigned whose value is (this & val):::
UnsignedWord#ord or(int):::Returns a Unsigned whose value is (this | val):::
UnsignedWord#xor(int):::Returns a Unsigned whose value is (this ^ val):::
UnsignedWord#equal(int):::Compares this Unsigned with the specified value:::
UnsignedWord#notEqual(int):::Compares this Unsigned with the specified value:::
UnsignedWord#belowThan(int):::Compares this Unsigned with the specified value:::
UnsignedWord#belowOrEqual(int):::Compares this Unsigned with the specified value:::
UnsignedWord#aboveThan(int):::Compares this Unsigned with the specified value:::
UnsignedWord#aboveOrEqual(int):::Compares this Unsigned with the specified value:::
WordBase#rawValue():::Conversion to a Java primitive value.:::
WordBase#equals(Object):::This is deprecated because of the easy to mistype name collision between #equals and the other word based equality routines:::
WordFactory#zero():::The constant 0, i.e., the word with no bits set:::return->WordBoxFactory->box
WordFactory#nullPointer():::The null pointer, i.e., the pointer with no bits set:::return->WordBoxFactory->box
WordFactory#unsigned(long):::Unsafe conversion from a Java long value to a Word:::return->WordBoxFactory->box
WordFactory#pointer(long):::Unsafe conversion from a Java long value to a PointerBase pointer:::return->WordBoxFactory->box
WordFactory#unsigned(int):::Unsafe conversion from a Java int value to a Word:::return->WordBoxFactory->box
WordFactory#signed(long):::Unsafe conversion from a Java long value to a Word:::return->WordBoxFactory->box
WordFactory#signed(int):::Unsafe conversion from a Java int value to a Word:::return->WordBoxFactory->box

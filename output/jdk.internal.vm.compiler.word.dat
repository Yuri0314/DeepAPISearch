jdk.internal.vm.compiler.word.ComparableWord#equal(ComparableWord)->boolean:::Compares this word with the specified value.
jdk.internal.vm.compiler.word.ComparableWord#notEqual(ComparableWord)->boolean:::Compares this word with the specified value.
jdk.internal.vm.compiler.word.LocationIdentity#any()->LocationIdentity:::Indicates that the given location is the union of all possible mutable locations
jdk.internal.vm.compiler.word.LocationIdentity#init()->LocationIdentity:::Location only allowed to be used for writes
jdk.internal.vm.compiler.word.LocationIdentity#isImmutable()->boolean:::Denotes a location is unchanging in all cases
jdk.internal.vm.compiler.word.LocationIdentity#isMutable()->boolean:::The inversion of #isImmutable.
jdk.internal.vm.compiler.word.LocationIdentity#isAny()->boolean:::Returns true if this location identity is #any.
jdk.internal.vm.compiler.word.LocationIdentity#isInit()->boolean:::Returns true if this location identity is #init.
jdk.internal.vm.compiler.word.LocationIdentity#isSingle()->boolean:::Returns true if this location identity is not #any.
jdk.internal.vm.compiler.word.LocationIdentity#overlaps(LocationIdentity)->boolean:::Returns true if the memory slice denoted by this location identity may overlap with the provided other location identity.
jdk.internal.vm.compiler.word.Pointer#toObject()->Object:::Unsafe conversion of this Pointer to a Java language object
jdk.internal.vm.compiler.word.Pointer#toObjectNonNull()->Object:::Unsafe conversion of this Pointer to a Java language object
jdk.internal.vm.compiler.word.Pointer#readByte(WordBase, LocationIdentity)->byte:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readChar(WordBase, LocationIdentity)->char:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readShort(WordBase, LocationIdentity)->short:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readInt(WordBase, LocationIdentity)->int:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readLong(WordBase, LocationIdentity)->long:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readFloat(WordBase, LocationIdentity)->float:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readDouble(WordBase, LocationIdentity)->double:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readWord(WordBase, LocationIdentity)->T:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readObject(WordBase, LocationIdentity)->Object:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readByte(int, LocationIdentity)->byte:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readChar(int, LocationIdentity)->char:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readShort(int, LocationIdentity)->short:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readInt(int, LocationIdentity)->int:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readLong(int, LocationIdentity)->long:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readFloat(int, LocationIdentity)->float:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readDouble(int, LocationIdentity)->double:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readWord(int, LocationIdentity)->T:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readObject(int, LocationIdentity)->Object:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeByte(WordBase, byte, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeChar(WordBase, char, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeShort(WordBase, short, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeInt(WordBase, int, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeLong(WordBase, long, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeFloat(WordBase, float, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeDouble(WordBase, double, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeWord(WordBase, WordBase, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#initializeLong(WordBase, long, LocationIdentity)->void:::Initializes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeObject(WordBase, Object, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeByte(int, byte, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeChar(int, char, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeShort(int, short, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeInt(int, int, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeLong(int, long, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeFloat(int, float, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeDouble(int, double, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeWord(int, WordBase, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#initializeLong(int, long, LocationIdentity)->void:::Initializes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeObject(int, Object, LocationIdentity)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readByte(WordBase)->byte:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readChar(WordBase)->char:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readShort(WordBase)->short:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readInt(WordBase)->int:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readLong(WordBase)->long:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readFloat(WordBase)->float:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readDouble(WordBase)->double:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readWord(WordBase)->T:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readObject(WordBase)->Object:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readByte(int)->byte:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readChar(int)->char:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readShort(int)->short:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readInt(int)->int:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readLong(int)->long:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readFloat(int)->float:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readDouble(int)->double:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readWord(int)->T:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#readObject(int)->Object:::Reads the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeByte(WordBase, byte)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeChar(WordBase, char)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeShort(WordBase, short)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeInt(WordBase, int)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeLong(WordBase, long)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeFloat(WordBase, float)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeDouble(WordBase, double)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeWord(WordBase, WordBase)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeObject(WordBase, Object)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#compareAndSwapInt(WordBase, int, int, LocationIdentity)->int:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#compareAndSwapLong(WordBase, long, long, LocationIdentity)->long:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#compareAndSwapWord(WordBase, T, T, LocationIdentity)->T:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#compareAndSwapObject(WordBase, Object, Object, LocationIdentity)->Object:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#logicCompareAndSwapInt(WordBase, int, int, LocationIdentity)->boolean:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#logicCompareAndSwapLong(WordBase, long, long, LocationIdentity)->boolean:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#logicCompareAndSwapWord(WordBase, WordBase, WordBase, LocationIdentity)->boolean:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#logicCompareAndSwapObject(WordBase, Object, Object, LocationIdentity)->boolean:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#writeByte(int, byte)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeChar(int, char)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeShort(int, short)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeInt(int, int)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeLong(int, long)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeFloat(int, float)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeDouble(int, double)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeWord(int, WordBase)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#writeObject(int, Object)->void:::Writes the memory at address (this + offset)
jdk.internal.vm.compiler.word.Pointer#compareAndSwapInt(int, int, int, LocationIdentity)->int:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#compareAndSwapLong(int, long, long, LocationIdentity)->long:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#compareAndSwapWord(int, T, T, LocationIdentity)->T:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#compareAndSwapObject(int, Object, Object, LocationIdentity)->Object:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#logicCompareAndSwapInt(int, int, int, LocationIdentity)->boolean:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#logicCompareAndSwapLong(int, long, long, LocationIdentity)->boolean:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#logicCompareAndSwapWord(int, WordBase, WordBase, LocationIdentity)->boolean:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#logicCompareAndSwapObject(int, Object, Object, LocationIdentity)->boolean:::In a single atomic step, compares the memory at address (this + offset) to the expected value, and if equal, exchanges it for the new value
jdk.internal.vm.compiler.word.Pointer#add(UnsignedWord)->Pointer:::Returns a Pointer whose value is (this + val).
jdk.internal.vm.compiler.word.Pointer#add(int)->Pointer:::Returns a Pointer whose value is (this + val).
jdk.internal.vm.compiler.word.Pointer#subtract(UnsignedWord)->Pointer:::Returns a Pointer whose value is (this - val).
jdk.internal.vm.compiler.word.Pointer#subtract(int)->Pointer:::Returns a Pointer whose value is (this - val).
jdk.internal.vm.compiler.word.Pointer#and(UnsignedWord)->Pointer:::Returns a Pointer whose value is (this & val).
jdk.internal.vm.compiler.word.Pointer#and(int)->Pointer:::Returns a Pointer whose value is (this & val).
jdk.internal.vm.compiler.word.Pointer#or(UnsignedWord)->Pointer:::Returns a Pointer whose value is (this | val).
jdk.internal.vm.compiler.word.Pointer#or(int)->Pointer:::Returns a Pointer whose value is (this | val).
jdk.internal.vm.compiler.word.PointerBase#isNull()->boolean:::Returns true if this pointer is the WordFactory#nullPointer null pointer.
jdk.internal.vm.compiler.word.PointerBase#isNonNull()->boolean:::Returns true if this pointer is not the WordFactory#nullPointer null pointer.
jdk.internal.vm.compiler.word.SignedWord#add(SignedWord)->SignedWord:::Returns a Signed whose value is (this + val).
jdk.internal.vm.compiler.word.SignedWord#subtract(SignedWord)->SignedWord:::Returns a Signed whose value is (this - val).
jdk.internal.vm.compiler.word.SignedWord#multiply(SignedWord)->SignedWord:::Returns a Signed whose value is (this * val).
jdk.internal.vm.compiler.word.SignedWord#signedDivide(SignedWord)->SignedWord:::Returns a Signed whose value is (this / val).
jdk.internal.vm.compiler.word.SignedWord#signedRemainder(SignedWord)->SignedWord:::Returns a Signed whose value is (this % val).
jdk.internal.vm.compiler.word.SignedWord#shiftLeft(UnsignedWord)->SignedWord:::Returns a Signed whose value is (this << n).
jdk.internal.vm.compiler.word.SignedWord#signedShiftRight(UnsignedWord)->SignedWord:::Returns a Signed whose value is (this >> n)
jdk.internal.vm.compiler.word.SignedWord#and(SignedWord)->SignedWord:::Returns a Signed whose value is (this & val)
jdk.internal.vm.compiler.word.SignedWord#ord or(SignedWord)->SignedW:::Returns a Signed whose value is (this | val)
jdk.internal.vm.compiler.word.SignedWord#xor(SignedWord)->SignedWord:::Returns a Signed whose value is (this ^ val)
jdk.internal.vm.compiler.word.SignedWord#not()->SignedWord:::Returns a Signed whose value is (~this)
jdk.internal.vm.compiler.word.SignedWord#equal(SignedWord)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#notEqual(SignedWord)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#lessThan(SignedWord)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#lessOrEqual(SignedWord)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#greaterThan(SignedWord)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#greaterOrEqual(SignedWord)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#add(int)->SignedWord:::Returns a Signed whose value is (this + val).
jdk.internal.vm.compiler.word.SignedWord#subtract(int)->SignedWord:::Returns a Signed whose value is (this - val).
jdk.internal.vm.compiler.word.SignedWord#multiply(int)->SignedWord:::Returns a Signed whose value is (this * val).
jdk.internal.vm.compiler.word.SignedWord#signedDivide(int)->SignedWord:::Returns a Signed whose value is (this / val).
jdk.internal.vm.compiler.word.SignedWord#signedRemainder(int)->SignedWord:::Returns a Signed whose value is (this % val).
jdk.internal.vm.compiler.word.SignedWord#shiftLeft(int)->SignedWord:::Returns a Signed whose value is (this << n).
jdk.internal.vm.compiler.word.SignedWord#signedShiftRight(int)->SignedWord:::Returns a Signed whose value is (this >> n)
jdk.internal.vm.compiler.word.SignedWord#and(int)->SignedWord:::Returns a Signed whose value is (this & val)
jdk.internal.vm.compiler.word.SignedWord#ord or(int)->SignedW:::Returns a Signed whose value is (this | val)
jdk.internal.vm.compiler.word.SignedWord#xor(int)->SignedWord:::Returns a Signed whose value is (this ^ val)
jdk.internal.vm.compiler.word.SignedWord#equal(int)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#notEqual(int)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#lessThan(int)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#lessOrEqual(int)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#greaterThan(int)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.SignedWord#greaterOrEqual(int)->boolean:::Compares this Signed with the specified value.
jdk.internal.vm.compiler.word.UnsignedWord#add(UnsignedWord)->UnsignedWord:::Returns a Unsigned whose value is (this + val).
jdk.internal.vm.compiler.word.UnsignedWord#subtract(UnsignedWord)->UnsignedWord:::Returns a Unsigned whose value is (this - val).
jdk.internal.vm.compiler.word.UnsignedWord#multiply(UnsignedWord)->UnsignedWord:::Returns a Unsigned whose value is (this * val).
jdk.internal.vm.compiler.word.UnsignedWord#unsignedDivide(UnsignedWord)->UnsignedWord:::Returns a Unsigned whose value is (this / val).
jdk.internal.vm.compiler.word.UnsignedWord#unsignedRemainder(UnsignedWord)->UnsignedWord:::Returns a Unsigned whose value is (this % val).
jdk.internal.vm.compiler.word.UnsignedWord#shiftLeft(UnsignedWord)->UnsignedWord:::Returns a Unsigned whose value is (this << n).
jdk.internal.vm.compiler.word.UnsignedWord#unsignedShiftRight(UnsignedWord)->UnsignedWord:::Returns a Unsigned whose value is (this >>> n)
jdk.internal.vm.compiler.word.UnsignedWord#and(UnsignedWord)->UnsignedWord:::Returns a Unsigned whose value is (this & val).
jdk.internal.vm.compiler.word.UnsignedWord#ord or(UnsignedWord)->UnsignedW:::Returns a Unsigned whose value is (this | val).
jdk.internal.vm.compiler.word.UnsignedWord#xor(UnsignedWord)->UnsignedWord:::Returns a Unsigned whose value is (this ^ val).
jdk.internal.vm.compiler.word.UnsignedWord#not()->UnsignedWord:::Returns a Unsigned whose value is (~this).
jdk.internal.vm.compiler.word.UnsignedWord#equal(UnsignedWord)->boolean:::Compares this Unsigned with the specified value.
jdk.internal.vm.compiler.word.UnsignedWord#notEqual(UnsignedWord)->boolean:::Compares this Unsigned with the specified value.
jdk.internal.vm.compiler.word.UnsignedWord#belowThan(UnsignedWord)->boolean:::Compares this Unsigned with the specified value.
jdk.internal.vm.compiler.word.UnsignedWord#belowOrEqual(UnsignedWord)->boolean:::Compares this Unsigned with the specified value.
jdk.internal.vm.compiler.word.UnsignedWord#aboveThan(UnsignedWord)->boolean:::Compares this Unsigned with the specified value.
jdk.internal.vm.compiler.word.UnsignedWord#aboveOrEqual(UnsignedWord)->boolean:::Compares this Unsigned with the specified value.
jdk.internal.vm.compiler.word.UnsignedWord#add(int)->UnsignedWord:::Returns a Unsigned whose value is (this + val)
jdk.internal.vm.compiler.word.UnsignedWord#subtract(int)->UnsignedWord:::Returns a Unsigned whose value is (this - val)
jdk.internal.vm.compiler.word.UnsignedWord#multiply(int)->UnsignedWord:::Returns a Unsigned whose value is (this * val)
jdk.internal.vm.compiler.word.UnsignedWord#unsignedDivide(int)->UnsignedWord:::Returns a Unsigned whose value is (this / val)
jdk.internal.vm.compiler.word.UnsignedWord#unsignedRemainder(int)->UnsignedWord:::Returns a Unsigned whose value is (this % val)
jdk.internal.vm.compiler.word.UnsignedWord#shiftLeft(int)->UnsignedWord:::Returns a Unsigned whose value is (this << n)
jdk.internal.vm.compiler.word.UnsignedWord#unsignedShiftRight(int)->UnsignedWord:::Returns a Unsigned whose value is (this >>> n)
jdk.internal.vm.compiler.word.UnsignedWord#and(int)->UnsignedWord:::Returns a Unsigned whose value is (this & val)
jdk.internal.vm.compiler.word.UnsignedWord#ord or(int)->UnsignedW:::Returns a Unsigned whose value is (this | val)
jdk.internal.vm.compiler.word.UnsignedWord#xor(int)->UnsignedWord:::Returns a Unsigned whose value is (this ^ val)
jdk.internal.vm.compiler.word.UnsignedWord#equal(int)->boolean:::Compares this Unsigned with the specified value
jdk.internal.vm.compiler.word.UnsignedWord#notEqual(int)->boolean:::Compares this Unsigned with the specified value
jdk.internal.vm.compiler.word.UnsignedWord#belowThan(int)->boolean:::Compares this Unsigned with the specified value
jdk.internal.vm.compiler.word.UnsignedWord#belowOrEqual(int)->boolean:::Compares this Unsigned with the specified value
jdk.internal.vm.compiler.word.UnsignedWord#aboveThan(int)->boolean:::Compares this Unsigned with the specified value
jdk.internal.vm.compiler.word.UnsignedWord#aboveOrEqual(int)->boolean:::Compares this Unsigned with the specified value
jdk.internal.vm.compiler.word.WordBase#rawValue()->long:::Conversion to a Java primitive value.
jdk.internal.vm.compiler.word.WordBase#equals(Object)->boolean:::This is deprecated because of the easy to mistype name collision between #equals and the other word based equality routines
jdk.internal.vm.compiler.word.WordFactory#zero()->T:::The constant 0, i.e., the word with no bits set
jdk.internal.vm.compiler.word.WordFactory#nullPointer()->T:::The null pointer, i.e., the pointer with no bits set
jdk.internal.vm.compiler.word.WordFactory#unsigned(long)->T:::Unsafe conversion from a Java long value to a Word
jdk.internal.vm.compiler.word.WordFactory#pointer(long)->T:::Unsafe conversion from a Java long value to a PointerBase pointer
jdk.internal.vm.compiler.word.WordFactory#unsigned(int)->T:::Unsafe conversion from a Java int value to a Word
jdk.internal.vm.compiler.word.WordFactory#signed(long)->T:::Unsafe conversion from a Java long value to a Word
jdk.internal.vm.compiler.word.WordFactory#signed(int)->T:::Unsafe conversion from a Java int value to a Word

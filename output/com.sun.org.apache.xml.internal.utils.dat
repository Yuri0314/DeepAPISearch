AttList#getLength():::Get the number of attribute nodes in the list:::return->m_attrs->getLength
AttList#getURI(int):::Look up an attribute's Namespace URI by index.:::ns->DOM2Helper->m_attrs->item->getNamespaceOfNode->if->return
AttList#getLocalName(int):::Look up an attribute's local name by index.:::return->DOM2Helper->m_attrs->item->getLocalNameOfNode
AttList#getQName(int):::Look up an attribute's qualified name by index.:::return->m_attrs->item->getName
AttList#getType(int):::Get the attribute's node type by index:::return
AttList#getValue(int):::Get the attribute's node value by index:::return->m_attrs->item->getValue
AttList#getType(String):::Get the attribute's node type by name:::return
AttList#getType(String, String):::Look up an attribute's type by Namespace name.:::return
AttList#getValue(String):::Look up an attribute's value by name.:::attr->m_attrs->getNamedItem->return->attr->getValue
AttList#getValue(String, String):::Look up an attribute's value by Namespace name.:::a->m_attrs->getNamedItemNS->return->a->getNodeValue
AttList#getIndex(String, String):::Look up the index of an attribute by Namespace name.:::for->i->m_attrs->getLength->return
AttList#getIndex(String):::Look up the index of an attribute by raw XML 1.0 name.:::for->i->m_attrs->getLength->return
BoolStack#size():::Get the length of the list.:::return
BoolStack#clear():::Clears the stack.:::
BoolStack#push(boolean):::Pushes an item onto the top of this stack.:::if->grow->return
BoolStack#pop():::Removes the object at the top of this stack and returns that object as the value of this function.:::return
BoolStack#popAndTop():::Removes the object at the top of this stack and returns the next object at the top as the value of this function.:::return
BoolStack#setTop(boolean):::Set the item at the top of this stack:::
BoolStack#peek():::Looks at the object at the top of this stack without removing it from the stack.:::return
BoolStack#peekOrFalse():::Looks at the object at the top of this stack without removing it from the stack:::return
BoolStack#peekOrTrue():::Looks at the object at the top of this stack without removing it from the stack:::return
BoolStack#isEmpty():::Tests if this stack is empty.:::return
CharKey#setChar(char):::Get the hash value of the character.:::
CharKey#hashCode():::Get the hash value of the character.:::return
CharKey#equals(Object):::Override of equals() for this object:::return
DefaultErrorHandler#warning(SAXParseException):::Receive notification of a warning:::printLocation->m_pw->exception->getMessage->println
DefaultErrorHandler#error(SAXParseException):::Receive notification of a recoverable error:::throw
DefaultErrorHandler#fatalError(SAXParseException):::Receive notification of a non-recoverable error:::throw
DefaultErrorHandler#warning(TransformerException):::Receive notification of a warning:::printLocation->m_pw->exception->getMessage->println
DefaultErrorHandler#error(TransformerException):::Receive notification of a recoverable error:::if->throw->else->printLocation->m_pw->exception->getMessage->println
DefaultErrorHandler#fatalError(TransformerException):::Receive notification of a non-recoverable error:::if->throw->else->printLocation->m_pw->exception->getMessage->println
DOM2Helper#getLocalNameOfNode(Node):::Returns the local name of the given node, as defined by the XML Namespaces specification:::name->n->getLocalName->return->getLocalNameOfNodeFallback
DOM2Helper#getNamespaceOfNode(Node):::Returns the Namespace Name (Namespace URI) for the given node:::return->n->getNamespaceURI
DOM2Helper#isNodeAfter(Node, Node):::Figure out whether node2 should be considered as being later in the document than node1, in Document Order as defined by the XPath model:::if->isNodeTheSame->return->isNodeAfter->parent1->getParentOfNode->parent2->getParentOfNode->if->isNodeTheSame->if->isNodeAfterSibling->else->nParents1->nParents2->while->getParentOfNode->while->getParentOfNode->startNode1->startNode2->if->adjust->for->i->else->if->adjust->for->i->prevChild1->prevChild2->while->if->isNodeTheSame->if->break->else->isNodeAfterSibling->break->getParentOfNode->getParentOfNode->return
DOM2Helper#isNodeTheSame(Node, Node):::Use DTMNodeProxy to determine whether two nodes are the same.:::if->return->equals->else->return
DOM2Helper#getParentOfNode(Node):::Get the XPath-model parent of a node:::parent->node->getParentNode->if->node->getNodeType->getOwnerElement->return
DOMBuilder#getRootDocument():::Get the root document or DocumentFragment of the DOM being created.:::return
DOMBuilder#getRootNode():::Get the root node of the DOM tree.:::return
DOMBuilder#getCurrentNode():::Get the node currently being processed.:::return
DOMBuilder#setNextSibling(Node):::Set the next sibling node, which is where the result nodes should be inserted before.:::
DOMBuilder#getNextSibling():::Return the next sibling node.:::return
DOMBuilder#getWriter():::Return null since there is no Writer for this class.:::return
DOMBuilder#append(Node):::Append a node to the current container.:::currentNode->if->if->currentNode->insertBefore->else->currentNode->appendChild->else->if->if->m_docFrag->insertBefore->else->m_docFrag->appendChild->else->ok->type->newNode->getNodeType->if->data->newNode->getNodeValue->if->data->trim->length->throw->XMLMessages->createXMLMessage->new->org.xml.sax.SAXException->else->if->if->m_doc->getDocumentElement->throw->XMLMessages->createXMLMessage->new->org.xml.sax.SAXException->if->if->m_doc->insertBefore->else->m_doc->appendChild
DOMBuilder#setDocumentLocator(Locator):::Receive an object for locating the origin of SAX document events:::
DOMBuilder#startDocument():::Receive notification of the beginning of a document:::
DOMBuilder#endDocument():::Receive notification of the end of a document:::
DOMBuilder#startElement(String, String, String, Attributes):::Receive notification of the beginning of an element:::elem->if->ns->length->m_doc->createElementNS->else->m_doc->createElementNS->append->try->nAtts->atts->getLength->if->for->i->m_elemStack->push->catch->throw->new->org.xml.sax.SAXException->finally
DOMBuilder#endElement(String, String, String):::Receive notification of the end of an element:::m_elemStack->pop->m_elemStack->isEmpty->m_elemStack->peek
DOMBuilder#setIDAttribute(String, Element):::Set an ID string to node association in the ID table.:::
DOMBuilder#characters(char[], int, int):::Receive notification of character data:::if->isOutsideDocElem->isWhiteSpace->return->if->cdata->return->s->new->String->childNode->m_currentNode->getLastChild->if->childNode->getNodeType->appendData->else->text->m_doc->createTextNode->append
DOMBuilder#charactersRaw(char[], int, int):::If available, when the disable-output-escaping attribute is used, output raw text without escaping:::if->isOutsideDocElem->isWhiteSpace->return->s->new->String->m_doc->createProcessingInstruction->append->m_doc->createTextNode->append
DOMBuilder#startEntity(String):::Report the beginning of an entity:::
DOMBuilder#endEntity(String):::Report the end of an entity.:::
DOMBuilder#entityReference(String):::Receive notivication of a entityReference.:::m_doc->createEntityReference->append
DOMBuilder#ignorableWhitespace(char[], int, int):::Receive notification of ignorable whitespace in element content:::if->isOutsideDocElem->return->s->new->String->m_doc->createTextNode->append
DOMBuilder#processingInstruction(String, String):::Receive notification of a processing instruction:::m_doc->createProcessingInstruction->append
DOMBuilder#comment(char[], int, int):::Report an XML comment anywhere in the document:::m_doc->new->String->createComment->append
DOMBuilder#startCDATA():::Report the start of a CDATA section.:::m_doc->createCDATASection->append
DOMBuilder#endCDATA():::Report the end of a CDATA section.:::
DOMBuilder#cdata(char[], int, int):::Receive notification of cdata:::if->isOutsideDocElem->isWhiteSpace->return->s->new->String->section->m_currentNode->getLastChild->section->appendData
DOMBuilder#startDTD(String, String, String):::Report the start of DTD declarations, if any:::
DOMBuilder#endDTD():::Report the end of DTD declarations.:::
DOMBuilder#startPrefixMapping(String, String):::Begin the scope of a prefix-URI Namespace mapping:::
DOMBuilder#endPrefixMapping(String):::End the scope of a prefix-URI mapping:::
DOMBuilder#skippedEntity(String):::Receive notification of a skipped entity:::
ElemDesc#is(int):::"is (this element described by these flags)":::return
ElemDesc#setAttr(String, int):::Set a new attribute for this element:::if->new->HashMap<>->m_attrs->put
ElemDesc#isAttrFlagSet(String, int):::Find out if a flag is set in a given attribute of this element:::if->_flags->m_attrs->get->if->return->return
FastStringBuffer#size():::Get the length of the list:::return
FastStringBuffer#length():::Get the length of the list:::return
FastStringBuffer#reset():::Discard the content of the FastStringBuffer, and most of the memory that was allocated by it, restoring the initial state:::innermost->while->new->charArrs->new->charArr
FastStringBuffer#setLength(int):::Directly set how much of the FastStringBuffer's storage is to be considered part of its content:::if->m_innerFSB->setLength->else->if
FastStringBuffer#toString():::Note that this operation has been somewhat deoptimized by the shift to a chunked array, as there is no factory method to produce a String object directly from an array of arrays and hence a double copy is needed:::length->return->new->StringBuffer->getString->toString
FastStringBuffer#append(char):::Append a single character onto the FastStringBuffer, growing the storage if necessary:::chunk->lastchunk->if->else->i->if->newarray->new->charArrs->System->arraycopy->if->if->new->FastStringBuffer->new->charArr
FastStringBuffer#append(String):::Append the contents of a String onto the FastStringBuffer, growing the storage if necessary:::if->return->strlen->value->length->if->return->copyfrom->chunk->available->while->if->value->getChars->if->i->if->newarray->new->charArrs->System->arraycopy->if->if->new->FastStringBuffer->new->charArr
FastStringBuffer#append(StringBuffer):::Append the contents of a StringBuffer onto the FastStringBuffer, growing the storage if necessary:::if->return->strlen->value->length->if->return->copyfrom->chunk->available->while->if->value->getChars->if->i->if->newarray->new->charArrs->System->arraycopy->if->if->new->FastStringBuffer->new->charArr
FastStringBuffer#append(char[], int, int):::Append part of the contents of a Character Array onto the FastStringBuffer,  growing the storage if necessary:::strlen->if->return->copyfrom->chunk->available->while->if->System->arraycopy->if->i->if->newarray->new->charArrs->System->arraycopy->if->if->new->FastStringBuffer->new->charArr
FastStringBuffer#append(FastStringBuffer):::Append the contents of another FastStringBuffer onto this FastStringBuffer, growing the storage if necessary:::if->return->strlen->value->length->if->return->copyfrom->chunk->available->while->if->sourcechunk->sourcecolumn->runlength->if->System->arraycopy->if->System->arraycopy->if->i->if->newarray->new->charArrs->System->arraycopy->if->if->new->FastStringBuffer->new->charArr
FastStringBuffer#getString(StringBuffer, int, int, int):::Internal support for toString() and getString():::stop->stopChunk->stopColumn->for->i->if->m_innerFSB->getString->else->if->sb->append->return
FastStringBuffer#charAt(int):::Get a single character from the string buffer.:::startChunk->if->return->m_innerFSB->charAt->else->return
FastStringBuffer#sendSAXcharacters(org.xml.sax.ContentHandler, int, int):::Sends the specified range of characters as one or more SAX characters() events:::startChunk->startColumn->if->ch->characters->return->stop->stopChunk->stopColumn->for->i->if->m_innerFSB->sendSAXcharacters->else->if->ch->characters
FastStringBuffer#sendNormalizedSAXcharacters(org.xml.sax.ContentHandler, int, int):::Sends the specified range of characters as one or more SAX characters() events, normalizing the characters according to XSLT rules.:::stateForNextChunk->stop->startChunk->startColumn->stopChunk->stopColumn->for->i->if->m_innerFSB->sendNormalizedSAXcharacters->else->if->sendNormalizedSAXcharacters->return
FastStringBuffer#sendNormalizedSAXcharacters(char[], int, int, org.xml.sax.ContentHandler, int):::Internal method to directly normalize and dispatch the character array:::processingLeadingWhitespace->seenWhitespace->suppressTrailingWhitespace->currPos->limit->if->for->XMLCharacterRecognizer->isWhiteSpace->if->return->while->startNonWhitespace->for->XMLCharacterRecognizer->isWhiteSpace->if->if->handler->characters->handler->characters->startWhitespace->for->XMLCharacterRecognizer->isWhiteSpace->if->return
FastStringBuffer#sendNormalizedSAXcharacters(char[], int, int, org.xml.sax.ContentHandler):::Directly normalize and dispatch the character array.:::sendNormalizedSAXcharacters
FastStringBuffer#sendSAXComment(org.xml.sax.ext.LexicalHandler, int, int):::Sends the specified range of characters as sax Comment:::comment->getString->ch->comment->toCharArray->comment
IntStack#push(int):::Pushes an item onto the top of this stack.:::if->newMap->new->intArr->System->arraycopy->return
IntStack#pop():::Removes the object at the top of this stack and returns that object as the value of this function.:::return
IntStack#peek():::Looks at the object at the top of this stack without removing it from the stack.:::try->return->catch->throw->new->EmptyStackException->finally
IntStack#peek(int):::Looks at the object at the position the stack counting down n items.:::try->return->catch->throw->new->EmptyStackException->finally
IntStack#setTop(int):::Sets an object at a the top of the statck:::try->catch->throw->new->EmptyStackException->finally
IntStack#empty():::Tests if this stack is empty.:::return
IntStack#search(int):::Returns where an object is on this stack.:::i->lastIndexOf->if->return->size->return
IntStack#clone():::Returns clone of current IntStack:::return->super->clone
IntVector#size():::Get the length of the list.:::return
IntVector#setSize(int):::Get the length of the list.:::
IntVector#addElement(int):::Append a int onto the vector.:::if->newMap->new->intArr->System->arraycopy
IntVector#addElements(int, int):::Append several int values onto the vector.:::if->newMap->new->intArr->System->arraycopy->for->i
IntVector#addElements(int):::Append several slots onto the vector, but do not set the values.:::if->newMap->new->intArr->System->arraycopy
IntVector#insertElementAt(int, int):::Inserts the specified node in this vector at the specified index:::if->newMap->new->intArr->System->arraycopy->if->System->arraycopy
IntVector#removeAllElements():::Inserts the specified node in this vector at the specified index:::for->i
IntVector#removeElement(int):::Removes the first occurrence of the argument from this vector:::for->i->return
IntVector#removeElementAt(int):::Deletes the component at the specified index:::if->System->arraycopy->else
IntVector#setElementAt(int, int):::Sets the component at the specified index of this vector to be the specified object:::
IntVector#elementAt(int):::Get the nth element.:::return
IntVector#contains(int):::Tell if the table contains the given node.:::for->i->return
IntVector#indexOf(int, int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::for->i->return
IntVector#indexOf(int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::for->i->return
IntVector#lastIndexOf(int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::for->i->return
IntVector#clone():::Returns clone of current IntVector:::return->new->IntVector
ListingErrorHandler#warning(SAXParseException):::Receive notification of a warning:::logExceptionLocation->m_pw->exception->getMessage->println->m_pw->flush->if->getThrowOnWarning->throw
ListingErrorHandler#error(SAXParseException):::Receive notification of a recoverable error:::logExceptionLocation->m_pw->exception->getMessage->println->m_pw->flush->if->getThrowOnError->throw
ListingErrorHandler#fatalError(SAXParseException):::Receive notification of a non-recoverable error:::logExceptionLocation->m_pw->exception->getMessage->println->m_pw->flush->if->getThrowOnFatalError->throw
ListingErrorHandler#warning(TransformerException):::Receive notification of a warning:::logExceptionLocation->m_pw->exception->getMessage->println->m_pw->flush->if->getThrowOnWarning->throw
ListingErrorHandler#error(TransformerException):::Receive notification of a recoverable error:::logExceptionLocation->m_pw->exception->getMessage->println->m_pw->flush->if->getThrowOnError->throw
ListingErrorHandler#fatalError(TransformerException):::Receive notification of a non-recoverable error:::logExceptionLocation->m_pw->exception->getMessage->println->m_pw->flush->if->getThrowOnError->throw
ListingErrorHandler#logExceptionLocation(PrintWriter, Throwable):::Print out location information about the exception:::if->new->PrintWriter->locator->cause->do->if->new->SAXSourceLocator->else->if->causeLocator->getLocator->if->if->getCause->else->if->getException->else->if->getException->else->while->if->id->locator->getPublicId->locator->getPublicId->locator->getPublicId->locator->getSystemId->locator->getSystemId->pw->locator->getLineNumber->locator->getColumnNumber->print->pw->exception->getMessage->println->pw->cause->getMessage->println->logSourceLine->else->pw->print->pw->exception->getMessage->println->pw->cause->getMessage->println
ListingErrorHandler#logSourceLine(PrintWriter, SourceLocator):::Print out the specific source line that caused the exception, if possible to load it.:::if->return->if->new->PrintWriter->url->locator->getSystemId->if->pw->println->pw->println->return->try->line->locator->getLineNumber->column->locator->getColumnNumber->pw->getSourceLine->println->buf->new->StringBuffer->for->i->buf->append->pw->buf->toString->println->catch->pw->e->getMessage->println->pw->println->finally
ListingErrorHandler#getSourceLine(String, int):::Return the specific source line that caused the exception, if possible to load it; allow exceptions to be thrown.:::url->try->new->URL->catch->indexOfColon->sourceUrl->indexOf->indexOfSlash->sourceUrl->indexOf->if->throw->else->SystemIDResolver->getAbsoluteURI->new->URL->finally->line->is->br->try->uc->url->openConnection->uc->getInputStream->new->InputStreamReader->new->BufferedReader->for->i->catch->finally->br->close->is->close->return
ListingErrorHandler#setThrowOnWarning(boolean):::User-settable behavior: when to re-throw exceptions:::
ListingErrorHandler#getThrowOnWarning():::User-settable behavior: when to re-throw exceptions.:::return
ListingErrorHandler#setThrowOnError(boolean):::User-settable behavior: when to re-throw exceptions:::
ListingErrorHandler#getThrowOnError():::User-settable behavior: when to re-throw exceptions.:::return
ListingErrorHandler#setThrowOnFatalError(boolean):::User-settable behavior: when to re-throw exceptions:::
ListingErrorHandler#getThrowOnFatalError():::User-settable behavior: when to re-throw exceptions.:::return
MutableAttrListImpl#addAttribute(String, String, String, String, String):::Add an attribute to the end of the list:::if->index->this->getIndex->if->this->setAttribute->else->super->addAttribute
MutableAttrListImpl#addAttributes(Attributes):::Add the contents of the attribute list to this list.:::nAtts->atts->getLength->for->i
MutableAttrListImpl#contains(String):::Return true if list contains the given (raw) attribute name.:::return->getValue
NodeConsumer#setOriginatingNode(Node):::Set the node that is originating the SAX event.:::
NodeVector#clone():::Get a cloned LocPathIterator.:::clone->super->clone->if->new->intArr->System->arraycopy->return
NodeVector#size():::Get the length of the list.:::return
NodeVector#addElement(int):::Append a Node onto the vector.:::if->if->new->intArr->else->newMap->new->intArr->System->arraycopy
NodeVector#push(int):::Append a Node onto the vector.:::ff->if->if->new->intArr->else->newMap->new->intArr->System->arraycopy
NodeVector#pop():::Pop a node from the tail of the vector and return the result.:::n->return
NodeVector#popAndTop():::Pop a node from the tail of the vector and return the top of the stack after the pop.:::return
NodeVector#popQuick():::Pop a node from the tail of the vector.:::
NodeVector#peepOrNull():::Return the node at the top of the stack without popping the stack:::return
NodeVector#pushPair(int, int):::Push a pair of nodes into the stack:::if->new->intArr->else->if->newMap->new->intArr->System->arraycopy
NodeVector#popPair():::Pop a pair of nodes from the tail of the stack:::
NodeVector#setTail(int):::Set the tail of the stack to the given node:::
NodeVector#setTailSub1(int):::Set the given node one position from the tail:::
NodeVector#peepTail():::Return the node at the tail of the vector without popping Special purpose method for TransformerImpl, pushElemTemplateElement:::return
NodeVector#peepTailSub1():::Return the node one position from the tail without popping:::return
NodeVector#insertInOrder(int):::Insert a node in order in the list.:::for->i->addElement
NodeVector#insertElementAt(int, int):::Inserts the specified node in this vector at the specified index:::if->new->intArr->else->if->newMap->new->intArr->System->arraycopy->if->System->arraycopy
NodeVector#appendNodes(NodeVector):::Append the nodes to the list.:::nNodes->nodes->size->if->new->intArr->else->if->newMap->new->intArr->System->arraycopy->System->arraycopy
NodeVector#removeAllElements():::Inserts the specified node in this vector at the specified index:::if->return->for->i
NodeVector#RemoveAllNoClear():::Set the length to zero, but don't clear the array.:::if->return
NodeVector#removeElement(int):::Removes the first occurrence of the argument from this vector:::if->return->for->i->return
NodeVector#removeElementAt(int):::Deletes the component at the specified index:::if->return->if->System->arraycopy->else
NodeVector#setElementAt(int, int):::Sets the component at the specified index of this vector to be the specified object:::if->new->intArr->if->addElement
NodeVector#elementAt(int):::Get the nth element.:::if->return->return
NodeVector#contains(int):::Tell if the table contains the given node.:::if->return->for->i->return
NodeVector#indexOf(int, int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::if->return->for->i->return
NodeVector#indexOf(int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::if->return->for->i->return
NodeVector#sort(int[], int, int):::Sort an array using a quicksort algorithm.:::lo->hi->if->return->else->if->if->T->return->mid->pivot->while->while->while->if->T->sort->sort
NodeVector#sort():::Sort an array using a quicksort algorithm.:::sort
ObjectPool#getInstanceIfFree():::Get an instance of the given object in this pool if available:::if->freeStack->isEmpty->result->freeStack->freeStack->size->remove->return->return
ObjectPool#getInstance():::Get an instance of the given object in this pool:::if->freeStack->isEmpty->try->return->objectType->getConstructor->newInstance->catch->finally->throw->XMLMessages->createXMLMessage->new->RuntimeException->else->result->freeStack->freeStack->size->remove->return
ObjectPool#freeInstance(Object):::Add an instance of the given object to the pool:::freeStack->add
ObjectStack#push(Object):::Pushes an item onto the top of this stack.:::if->newMap->new->ObjectArr->System->arraycopy->return
ObjectStack#pop():::Removes the object at the top of this stack and returns that object as the value of this function.:::val->return
ObjectStack#peek():::Looks at the object at the top of this stack without removing it from the stack.:::try->return->catch->throw->new->EmptyStackException->finally
ObjectStack#peek(int):::Looks at the object at the position the stack counting down n items.:::try->return->catch->throw->new->EmptyStackException->finally
ObjectStack#setTop(Object):::Sets an object at a the top of the statck:::try->catch->throw->new->EmptyStackException->finally
ObjectStack#empty():::Tests if this stack is empty.:::return
ObjectStack#search(Object):::Returns where an object is on this stack.:::i->lastIndexOf->if->return->size->return
ObjectStack#clone():::Returns clone of current ObjectStack:::return->super->clone
ObjectVector#size():::Get the length of the list.:::return
ObjectVector#setSize(int):::Get the length of the list.:::
ObjectVector#addElement(Object):::Append an object onto the vector.:::if->newMap->new->ObjectArr->System->arraycopy
ObjectVector#addElements(Object, int):::Append several Object values onto the vector.:::if->newMap->new->ObjectArr->System->arraycopy->for->i
ObjectVector#addElements(int):::Append several slots onto the vector, but do not set the values.:::if->newMap->new->ObjectArr->System->arraycopy
ObjectVector#insertElementAt(Object, int):::Inserts the specified object in this vector at the specified index:::if->newMap->new->ObjectArr->System->arraycopy->if->System->arraycopy
ObjectVector#removeAllElements():::Remove all elements objects from the list.:::for->i
ObjectVector#removeElement(Object):::Removes the first occurrence of the argument from this vector:::for->i->return
ObjectVector#removeElementAt(int):::Deletes the component at the specified index:::if->System->arraycopy->else
ObjectVector#setElementAt(Object, int):::Sets the component at the specified index of this vector to be the specified object:::
ObjectVector#elementAt(int):::Get the nth element.:::return
ObjectVector#contains(Object):::Tell if the table contains the given Object.:::for->i->return
ObjectVector#indexOf(Object, int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::for->i->return
ObjectVector#indexOf(Object):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::for->i->return
ObjectVector#lastIndexOf(Object):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::for->i->return
ObjectVector#clone():::Returns clone of current ObjectVector:::return->new->ObjectVector
PrefixResolver#getNamespaceForPrefix(String):::Given a namespace, get the corrisponding prefix:::
PrefixResolver#getNamespaceForPrefix(String, org.w3c.dom.Node):::Given a namespace, get the corresponding prefix, based on the context node.:::
PrefixResolver#getBaseIdentifier():::Return the base identifier.:::
PrefixResolverDefault#getNamespaceForPrefix(String):::Given a namespace, get the corrisponding prefix:::return->getNamespaceForPrefix
PrefixResolverDefault#getNamespaceForPrefix(String, org.w3c.dom.Node):::Given a namespace, get the corrisponding prefix:::parent->namespace->if->prefix->equals->else->type->while->parent->getNodeType->if->if->parent->getNodeName->indexOf->return->parent->getNamespaceURI->nnm->parent->getAttributes->for->i->nnm->getLength->parent->getParentNode->return
PrefixResolverDefault#getBaseIdentifier():::Return the base identifier.:::return
QName#getNamespaceURI():::Returns the namespace URI:::return
QName#getPrefix():::Returns the namespace prefix:::return
QName#getLocalName():::Returns the local part of the qualified name.:::return
QName#toString():::Return the string representation of the qualified name, using the prefix if available, or the '{ns}foo' notation if not:::return
QName#toNamespacedString():::Return the string representation of the qualified name using the the '{ns}foo' notation:::return
QName#getNamespace():::Get the namespace of the qualified name.:::return->getNamespaceURI
QName#getLocalPart():::Get the local part of the qualified name.:::return->getLocalName
QName#hashCode():::Return the cached hashcode of the qualified name.:::return
QName#equals(String, String):::Override equals and agree that we're equal if the passed object is a string and it matches the name of the arg.:::thisnamespace->getNamespaceURI->return->getLocalName->equals->thisnamespace->equals
QName#equals(Object):::Override equals and agree that we're equal if the passed object is a QName and it matches the name of the arg.:::if->return->if->qname->thisnamespace->getNamespaceURI->thatnamespace->qname->getNamespaceURI->return->getLocalName->qname->getLocalName->equals->thisnamespace->equals->else->return
QName#getQNameFromString(String):::Given a string, create and return a QName object:::tokenizer->new->StringTokenizer->qname->s1->tokenizer->nextToken->s2->tokenizer->hasMoreTokens->tokenizer->nextToken->if->new->QName->else->new->QName->return
QName#isXMLNSDecl(String):::This function tells if a raw attribute name is a xmlns attribute.:::return->attRawName->startsWith->attRawName->equals->attRawName->startsWith
QName#getPrefixFromXMLNSDecl(String):::This function tells if a raw attribute name is a xmlns attribute.:::index->attRawName->indexOf->return->attRawName->substring
QName#getLocalPart(String):::Returns the local name of the given node.:::index->qname->indexOf->return->qname->substring
QName#getPrefixPart(String):::Returns the local name of the given node.:::index->qname->indexOf->return->qname->substring
RawCharacterHandler#charactersRaw(char[], int, int):::Serialize the characters without escaping.:::
SafeThread#eraseThreadLocals():::Drops all thread locals (and inherited thread locals).:::UNSAFE->putObject->UNSAFE->putObject
SAXSourceLocator#getPublicId():::Return the public identifier for the current document event:::return->super->getPublicId->m_locator->getPublicId
SAXSourceLocator#getSystemId():::Return the system identifier for the current document event:::return->super->getSystemId->m_locator->getSystemId
SAXSourceLocator#getLineNumber():::Return the line number where the current document event ends:::return->super->getLineNumber->m_locator->getLineNumber
SAXSourceLocator#getColumnNumber():::Return the column number where the current document event ends:::return->super->getColumnNumber->m_locator->getColumnNumber
SerializableLocatorImpl#getPublicId():::Return the saved public identifier.:::return
SerializableLocatorImpl#getSystemId():::Return the saved system identifier.:::return
SerializableLocatorImpl#getLineNumber():::Return the saved line number (1-based).:::return
SerializableLocatorImpl#getColumnNumber():::Return the saved column number (1-based).:::return
SerializableLocatorImpl#setPublicId(String):::Set the public identifier for this locator.:::
SerializableLocatorImpl#setSystemId(String):::Set the system identifier for this locator.:::
SerializableLocatorImpl#setLineNumber(int):::Set the line number for this locator (1-based).:::
SerializableLocatorImpl#setColumnNumber(int):::Set the column number for this locator (1-based).:::
StringBufferPool#get():::Get the first free instance of a string buffer, or create one if there are no free instances.:::return->m_stringBufPool->getInstance
StringBufferPool#free(FastStringBuffer):::Return a string buffer back to the pool.:::sb->setLength->m_stringBufPool->freeInstance
StringToIntTable#getLength():::Get the length of the list.:::return
StringToIntTable#put(String, int):::Append a string onto the vector.:::if->newMap->new->StringArr->System->arraycopy->newValues->new->intArr->System->arraycopy
StringToIntTable#get(String):::Tell if the table contains the given string.:::for->i->return
StringToIntTable#getIgnoreCase(String):::Tell if the table contains the given string:::if->return->for->i->return
StringToIntTable#contains(String):::Tell if the table contains the given string.:::for->i->return
StringToIntTable#keys():::Return array of keys in the table.:::keysArr->new->StringArr->for->i->return
StringToStringTable#getLength():::Get the length of the list.:::return
StringToStringTable#put(String, String):::Append a string onto the vector:::if->newMap->new->StringArr->System->arraycopy
StringToStringTable#get(String):::Tell if the table contains the given string.:::for->i->return
StringToStringTable#remove(String):::Remove the given string and its value from this table.:::for->i
StringToStringTable#getIgnoreCase(String):::Tell if the table contains the given string:::if->return->for->i->return
StringToStringTable#getByValue(String):::Tell if the table contains the given string in the value.:::for->i->return
StringToStringTable#elementAt(int):::Get the nth element.:::return
StringToStringTable#contains(String):::Tell if the table contains the given string.:::for->i->return
StringToStringTable#containsValue(String):::Tell if the table contains the given string.:::for->i->return
StringToStringTableVector#getLength():::Get the length of the list.:::return
StringToStringTableVector#size():::Get the length of the list.:::return
StringToStringTableVector#addElement(StringToStringTable):::Append a StringToStringTable object onto the vector.:::if->newMap->new->StringToStringTableArr->System->arraycopy
StringToStringTableVector#get(String):::Given a string, find the last added occurance value that matches the key.:::for->i->return
StringToStringTableVector#containsKey(String):::Given a string, find out if there is a value in this table that matches the key.:::for->i->return
StringToStringTableVector#removeLastElem():::Remove the last element.:::if
StringToStringTableVector#elementAt(int):::Get the nth element.:::return
StringToStringTableVector#contains(StringToStringTable):::Tell if the table contains the given StringToStringTable.:::for->i->return
StringVector#getLength():::Get the length of the list.:::return
StringVector#size():::Get the length of the list.:::return
StringVector#addElement(String):::Append a string onto the vector.:::if->newMap->new->StringArr->System->arraycopy
StringVector#elementAt(int):::Get the nth element.:::return
StringVector#contains(String):::Tell if the table contains the given string.:::if->return->for->i->return
StringVector#containsIgnoreCase(String):::Tell if the table contains the given string:::if->return->for->i->return
StringVector#push(String):::Tell if the table contains the given string.:::if->newMap->new->StringArr->System->arraycopy
StringVector#pop():::Pop the tail of this vector.:::if->return->s->return
StringVector#peek():::Get the string at the tail of this vector without popping.:::return
StylesheetPIHandler#setURIResolver(URIResolver):::Get the object that will be used to resolve URIs in href in xml-stylesheet processing instruction.:::
StylesheetPIHandler#getURIResolver():::Get the object that will be used to resolve URIs in href in xml-stylesheet processing instruction.:::return
StylesheetPIHandler#getAssociatedStylesheet():::Return the last stylesheet found that match the constraints.:::sz->m_stylesheets->size->if->source->m_stylesheets->get->return->else->return
StylesheetPIHandler#processingInstruction(String, String):::Handle the xml-stylesheet processing instruction.:::if->target->equals->href->type->title->media->charset->alternate->tokenizer->new->StringTokenizer->lookedAhead->source->token->while->tokenizer->hasMoreTokens->if->tokenizer->nextToken->else->if->tokenizer->hasMoreTokens->token->equals->token->equals->token->equals->continue->name->if->name->equals->tokenizer->nextToken->while->tokenizer->hasMoreTokens->token->equals->token->equals->token->equals->tokenizer->nextToken->token->token->length->substring->else->if->name->equals->tokenizer->nextToken->while->tokenizer->hasMoreTokens->token->equals->token->equals->token->equals->tokenizer->nextToken->if->tokenizer->hasMoreTokens->tokenizer->nextToken->while->token->equals->tokenizer->hasMoreTokens->tokenizer->nextToken->if->tokenizer->hasMoreTokens->tokenizer->nextToken->else->break->href->href->length->substring->try->if->m_uriResolver->resolve->else->SystemIDResolver->getAbsoluteURI->new->InputSource->new->SAXSource->catch->throw->new->org.xml.sax.SAXException->finally->else->if->name->equals->tokenizer->nextToken->while->tokenizer->hasMoreTokens->token->equals->token->equals->token->equals->tokenizer->nextToken->token->token->length->substring->else->if->name->equals->tokenizer->nextToken->while->tokenizer->hasMoreTokens->token->equals->token->equals->token->equals->tokenizer->nextToken->token->token->length->substring->else->if->name->equals->tokenizer->nextToken->while->tokenizer->hasMoreTokens->token->equals->token->equals->token->equals->tokenizer->nextToken->token->token->length->substring->else->if->name->equals->tokenizer->nextToken->while->tokenizer->hasMoreTokens->token->equals->token->equals->token->equals->tokenizer->nextToken->token->token->length->substring->equals->if->type->equals->type->equals->type->equals->if->if->if->media->equals->return->else->return->if->if->if->charset->equals->return->else->return->if->if->if->title->equals->return->else->return->m_stylesheets->add
StylesheetPIHandler#startElement(String, String, String, Attributes):::The spec notes that "The xml-stylesheet processing instruction is allowed only in the prolog of an XML document.", so, at least for right now, I'm going to go ahead an throw a TransformerException in order to stop the parse.:::throw->new->StopParseException
StylesheetPIHandler#setBaseId(String):::Added additional getter and setter methods for the Base Id to fix bugzilla bug 24187:::
SuballocatedByteVector#size():::Get the length of the list.:::return
SuballocatedByteVector#addElement(byte):::Append a byte onto the vector.:::if->else->index->offset->if->newsize->newMap->new->byteArrs->System->arraycopy->block->if->new->byteArr
SuballocatedByteVector#removeAllElements():::Wipe it out.:::
SuballocatedByteVector#setElementAt(byte, int):::Sets the component at the specified index of this vector to be the specified object:::if->return->index->offset->if->newsize->newMap->new->byteArrs->System->arraycopy->block->if->new->byteArr->if
SuballocatedByteVector#elementAt(int):::Get the nth element:::if->return->return
SuballocatedByteVector#indexOf(byte, int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::if->return->bindex->boffset->maxindex->block->for->maxoffset->for->offset->return
SuballocatedByteVector#indexOf(byte):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::return->indexOf
SuballocatedIntVector#size():::Get the length of the list.:::return
SuballocatedIntVector#setSize(int):::Set the length of the list:::if
SuballocatedIntVector#addElement(int):::Append a int onto the vector.:::indexRelativeToCache->if->else->index->offset->if->newsize->newMap->new->intArrs->System->arraycopy->block->if->new->intArr
SuballocatedIntVector#removeAllElements():::Wipe it out:::
SuballocatedIntVector#setElementAt(int, int):::Sets the component at the specified index of this vector to be the specified object:::if->else->index->offset->if->newsize->newMap->new->intArrs->System->arraycopy->block->if->new->intArr->if
SuballocatedIntVector#elementAt(int):::Get the nth element:::if->return->return
SuballocatedIntVector#indexOf(int, int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::if->return->bindex->boffset->maxindex->block->for->maxoffset->for->offset->return
SuballocatedIntVector#indexOf(int):::Searches for the first occurence of the given argument, beginning the search at index, and testing for equality using the equals method.:::return->indexOf
SuballocatedIntVector#getMap0():::Return the internal m_map0 array:::return
SuballocatedIntVector#getMap():::Return the m_map double array:::return
SystemIDResolver#getAbsoluteURIFromRelative(String):::Get an absolute URI from a given relative URI (local path):::if->localPath->length->return->absolutePath->if->isAbsolutePath->try->getAbsolutePathFromRelativePath->catch->return->finally->urlString->if->if->absolutePath->startsWith->else->else->return->replaceChars
SystemIDResolver#isAbsoluteURI(String):::Return true if the systemId denotes an absolute URI .:::if->isWindowsAbsolutePath->return->fragmentIndex->systemId->indexOf->queryIndex->systemId->indexOf->slashIndex->systemId->indexOf->colonIndex->systemId->indexOf->index->systemId->length->if->if->if->return
SystemIDResolver#isAbsolutePath(String):::Return true if the local path is an absolute path.:::if->return->file->new->File->return->file->isAbsolute
SystemIDResolver#getAbsoluteURI(String):::Take a SystemID string and try to turn it into a good absolute URI.:::absoluteURI->if->isAbsoluteURI->if->systemId->startsWith->str->systemId->substring->if->str->startsWith->if->str->startsWith->str->startsWith->secondColonIndex->systemId->indexOf->if->localPath->systemId->substring->try->if->isAbsolutePath->systemId->substring->getAbsolutePathFromRelativePath->catch->return->finally->else->return->systemId->substring->getAbsoluteURIFromRelative->return->replaceChars->else->return->else->return->getAbsoluteURIFromRelative
SystemIDResolver#getAbsoluteURI(String, String):::Take a SystemID string and try to turn it into a good absolute URI.:::if->return->getAbsoluteURI->absoluteBase->getAbsoluteURI->uri->try->baseURI->new->URI->new->URI->catch->throw->new->TransformerException->finally->return->uri->toString->replaceChars
ThreadControllerWrapper.ThreadController#run(Runnable, int):::Will get a thread from the pool, execute the task and return the thread to the pool:::t->new->SafeThread->t->start->return
ThreadControllerWrapper.ThreadController#waitThread(Thread, Runnable):::Wait until the task is completed on the worker thread.:::worker->join
TreeWalker#getContentHandler():::Get the ContentHandler used for the tree walk.:::return
TreeWalker#setContentHandler(ContentHandler):::Get the ContentHandler used for the tree walk.:::
TreeWalker#traverse(Node):::Perform a pre-order traversal non-recursive style:::startDocument->traverseFragment->endDocument
TreeWalker#traverseFragment(Node):::Perform a pre-order traversal non-recursive style:::top->while->startNode->nextNode->pos->getFirstChild->while->endNode->if->top->equals->break->pos->getNextSibling->if->pos->getParentNode->if->top->equals->if->endNode->break
TreeWalker#traverse(Node, Node):::Perform a pre-order traversal non-recursive style:::startDocument->while->startNode->nextNode->pos->getFirstChild->while->endNode->if->top->equals->break->pos->getNextSibling->if->pos->getParentNode->if->top->equals->break->endDocument
TreeWalker#startNode(Node):::Start processing given node:::if->setOriginatingNode->if->loc->m_locator->loc->getColumnNumber->setColumnNumber->m_locator->loc->getLineNumber->setLineNumber->m_locator->loc->getPublicId->setPublicId->m_locator->loc->getSystemId->setSystemId->else->m_locator->setColumnNumber->m_locator->setLineNumber->switch->node->getNodeType->data->getData->if->lh->lh->data->toCharArray->data->length->comment->break->break->break->atts->getAttributes->nAttrs->atts->getLength->for->i->ns->DOM2Helper->getNamespaceOfNode->if->DOM2Helper->getLocalNameOfNode->node->getNodeName->new->AttList->startElement->break->pi->name->pi->getNodeName->if->name->equals->else->pi->getNodeName->pi->getData->processingInstruction->break->isLexH->lh->if->lh->startCDATA->dispatachChars->if->lh->endCDATA->break->if->m_contentHandler->processingInstruction->dispatachChars->m_contentHandler->processingInstruction->else->dispatachChars->break->eref->if->eref->getNodeName->startEntity->else->break
TreeWalker#endNode(Node):::End processing of given node:::switch->node->getNodeType->break->ns->DOM2Helper->getNamespaceOfNode->if->DOM2Helper->getLocalNameOfNode->node->getNodeName->endElement->atts->getAttributes->nAttrs->atts->getLength->for->i->break->break->eref->if->lh->lh->eref->getNodeName->endEntity->break
Trie#put(String, Object):::Put an object into the trie for lookup.:::len->key->length->if->new->charArr->node->for->i->ret->return
Trie#get(String):::Get an object that matches the key.:::len->key->length->if->return->node->switch->return->ch->key->charAt->if->if->return->return->key->getChars->for->i->return
UnImplNode#error(String):::Throw an error.:::this->getClass->getName->println->throw->XMLMessages->createXMLMessage->new->RuntimeException
UnImplNode#error(String, Object[]):::Throw an error.:::this->getClass->getName->println->throw->XMLMessages->createXMLMessage->new->RuntimeException
UnImplNode#appendChild(Node):::Unimplemented:::error->return
UnImplNode#hasChildNodes():::Unimplemented:::error->return
UnImplNode#getNodeType():::Unimplemented:::error->return
UnImplNode#getParentNode():::Unimplemented:::error->return
UnImplNode#getChildNodes():::Unimplemented:::error->return
UnImplNode#getFirstChild():::Unimplemented:::error->return
UnImplNode#getLastChild():::Unimplemented:::error->return
UnImplNode#getNextSibling():::Unimplemented:::error->return
UnImplNode#getLength():::Unimplemented:::error->return
UnImplNode#item(int):::Unimplemented:::error->return
UnImplNode#getOwnerDocument():::Unimplemented:::error->return
UnImplNode#getTagName():::Unimplemented:::error->return
UnImplNode#getNodeName():::Unimplemented:::error->return
UnImplNode#normalize():::Unimplemented:::error
UnImplNode#getElementsByTagName(String):::Unimplemented:::error->return
UnImplNode#removeAttributeNode(Attr):::Unimplemented:::error->return
UnImplNode#setAttributeNode(Attr):::Unimplemented:::error->return
UnImplNode#hasAttribute(String):::Unimplemented:::error->return
UnImplNode#hasAttributeNS(String, String):::Unimplemented:::error->return
UnImplNode#getAttributeNode(String):::Unimplemented:::error->return
UnImplNode#removeAttribute(String):::Unimplemented:::error
UnImplNode#setAttribute(String, String):::Unimplemented:::error
UnImplNode#getAttribute(String):::Unimplemented:::error->return
UnImplNode#hasAttributes():::Unimplemented:::error->return
UnImplNode#getElementsByTagNameNS(String, String):::Unimplemented:::error->return
UnImplNode#setAttributeNodeNS(Attr):::Unimplemented:::error->return
UnImplNode#getAttributeNodeNS(String, String):::Unimplemented:::error->return
UnImplNode#removeAttributeNS(String, String):::Unimplemented:::error
UnImplNode#setAttributeNS(String, String, String):::Unimplemented:::error
UnImplNode#getAttributeNS(String, String):::Unimplemented:::error->return
UnImplNode#getPreviousSibling():::Unimplemented:::error->return
UnImplNode#cloneNode(boolean):::Unimplemented:::error->return
UnImplNode#getNodeValue():::Unimplemented:::error->return
UnImplNode#setNodeValue(String):::Unimplemented:::error
UnImplNode#setValue(String):::Unimplemented:::error
UnImplNode#getOwnerElement():::Unimplemented:::error->return
UnImplNode#getSpecified():::Unimplemented:::error->return
UnImplNode#getAttributes():::Unimplemented:::error->return
UnImplNode#insertBefore(Node, Node):::Unimplemented:::error->return
UnImplNode#replaceChild(Node, Node):::Unimplemented:::error->return
UnImplNode#removeChild(Node):::Unimplemented:::error->return
UnImplNode#isSupported(String, String):::Tests whether the DOM implementation implements a specific feature and that feature is supported by this node.:::return
UnImplNode#getNamespaceURI():::Unimplemented:::error->return
UnImplNode#getPrefix():::Unimplemented:::error->return
UnImplNode#setPrefix(String):::Unimplemented:::error
UnImplNode#getLocalName():::Unimplemented:::error->return
UnImplNode#getDoctype():::Unimplemented:::error->return
UnImplNode#getImplementation():::Unimplemented:::error->return
UnImplNode#getDocumentElement():::Unimplemented:::error->return
UnImplNode#createElement(String):::Unimplemented:::error->return
UnImplNode#createDocumentFragment():::Unimplemented:::error->return
UnImplNode#createTextNode(String):::Unimplemented:::error->return
UnImplNode#createComment(String):::Unimplemented:::error->return
UnImplNode#createCDATASection(String):::Unimplemented:::error->return
UnImplNode#createProcessingInstruction(String, String):::Unimplemented:::error->return
UnImplNode#createAttribute(String):::Unimplemented:::error->return
UnImplNode#createEntityReference(String):::Unimplemented:::error->return
UnImplNode#importNode(Node, boolean):::Unimplemented:::error->return
UnImplNode#createElementNS(String, String):::Unimplemented:::error->return
UnImplNode#createAttributeNS(String, String):::Unimplemented:::error->return
UnImplNode#getElementById(String):::Unimplemented:::error->return
UnImplNode#setData(String):::Set Node data:::error
UnImplNode#substringData(int, int):::Unimplemented.:::error->return
UnImplNode#appendData(String):::Unimplemented.:::error
UnImplNode#insertData(int, String):::Unimplemented.:::error
UnImplNode#deleteData(int, int):::Unimplemented.:::error
UnImplNode#replaceData(int, int, String):::Unimplemented.:::error
UnImplNode#splitText(int):::Unimplemented.:::error->return
UnImplNode#adoptNode(Node):::NEEDSDOC Method adoptNode   NEEDSDOC @param source  NEEDSDOC (adoptNode) @return:::error->return
UnImplNode#getInputEncoding():::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.:::error->return
UnImplNode#setInputEncoding(String):::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.:::error
UnImplNode#getStandalone():::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.:::error->return
UnImplNode#setStandalone(boolean):::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.:::error
UnImplNode#getStrictErrorChecking():::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.:::error->return
UnImplNode#setStrictErrorChecking(boolean):::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.:::error
UnImplNode#getVersion():::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.:::error->return
UnImplNode#setVersion(String):::EXPERIMENTAL! Based on the Document Object Model (DOM) Level 3 Core Working Draft of 5 June 2001.:::error
UnImplNode#getUserData(String):::Retrieves the object associated to a key on a this node:::return->getOwnerDocument->getUserData
UnImplNode#getFeature(String, String)::: This method returns a specialized object which implements the specialized APIs of the specified feature and version:::return->isSupported
UnImplNode#isEqualNode(Node):::Tests whether two nodes are equal:::if->return->if->arg->getNodeType->getNodeType->return->if->getNodeName->if->arg->getNodeName->return->else->if->getNodeName->arg->getNodeName->equals->return->if->getLocalName->if->arg->getLocalName->return->else->if->getLocalName->arg->getLocalName->equals->return->if->getNamespaceURI->if->arg->getNamespaceURI->return->else->if->getNamespaceURI->arg->getNamespaceURI->equals->return->if->getPrefix->if->arg->getPrefix->return->else->if->getPrefix->arg->getPrefix->equals->return->if->getNodeValue->if->arg->getNodeValue->return->else->if->getNodeValue->arg->getNodeValue->equals->return->return
UnImplNode#lookupNamespaceURI(String):::DOM Level 3 - Experimental: Look up the namespace URI associated to the given prefix, starting from this node:::type->this->getNodeType->switch->namespace->this->getNamespaceURI->prefix->this->getPrefix->if->if->return->else->if->prefix->equals->return->if->this->hasAttributes->map->this->getAttributes->length->map->getLength->for->i->return->return->if->this->getOwnerElement->getNodeType->return->getOwnerElement->lookupNamespaceURI->return->return
UnImplNode#isDefaultNamespace(String)::: DOM Level 3: Experimental  This method checks if the specified namespaceURI is the  default namespace or not.:::return
UnImplNode#lookupPrefix(String):::DOM Level 3 - Experimental: Look up the prefix associated to the given namespace URI, starting from this node.:::if->return->type->this->getNodeType->switch->return->if->this->getOwnerElement->getNodeType->return->getOwnerElement->lookupPrefix->return->return
UnImplNode#isSameNode(Node):::Returns whether this node is the same node as the given one:::return
UnImplNode#setTextContent(String):::This attribute returns the text content of this node and its descendants:::setNodeValue
UnImplNode#getTextContent():::This attribute returns the text content of this node and its descendants:::return->getNodeValue
UnImplNode#compareDocumentPosition(Node):::Compares a node with this node with regard to their position in the document.:::return
UnImplNode#getBaseURI():::The absolute base URI of this node or null if undefined:::return
UnImplNode#renameNode(Node, String, String):::DOM Level 3 WD - Experimental:::return
UnImplNode#normalizeDocument()::: DOM Level 3 WD - Experimental  Normalize document.:::
UnImplNode#getDomConfig()::: The configuration used when Document.normalizeDocument is invoked.:::return
UnImplNode#setDocumentURI(String):::DOM Level 3 WD - Experimental.:::
UnImplNode#getDocumentURI():::DOM Level 3 WD - Experimental:::return
UnImplNode#getActualEncoding():::DOM Level 3 WD - Experimental:::return
UnImplNode#setActualEncoding(String):::DOM Level 3 WD - Experimental:::
UnImplNode#replaceWholeText(String):::DOM Level 3 WD - Experimental.:::return
UnImplNode#getWholeText():::DOM Level 3 WD - Experimental:::return
UnImplNode#isWhitespaceInElementContent():::DOM Level 3 WD - Experimental:::return
UnImplNode#setIdAttribute(boolean):::NON-DOM: set the type of this attribute to be ID type.:::
UnImplNode#setIdAttribute(String, boolean):::DOM Level 3: register the given attribute node as an ID attribute:::
UnImplNode#setIdAttributeNode(Attr, boolean):::DOM Level 3: register the given attribute node as an ID attribute:::
UnImplNode#setIdAttributeNS(String, String, boolean):::DOM Level 3: register the given attribute node as an ID attribute:::
UnImplNode#getSchemaTypeInfo():::Method getSchemaTypeInfo.:::return
URI#getScheme():::Get the scheme for this URI.:::return
URI#getSchemeSpecificPart():::Get the scheme-specific part for this URI (everything following the scheme and the first colon):::schemespec->new->StringBuilder->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->if->schemespec->append->schemespec->append->if->schemespec->append->schemespec->append->return->schemespec->toString
URI#getUserinfo():::Get the userinfo for this URI.:::return
URI#getHost():::Get the host for this URI.:::return
URI#getPort():::Get the port for this URI.:::return
URI#getPath(boolean, boolean):::Get the path for this URI (optionally with the query string and fragment).:::pathString->new->StringBuilder->if->pathString->append->pathString->append->if->pathString->append->pathString->append->return->pathString->toString
URI#getPath():::Get the path for this URI:::return
URI#getQueryString():::Get the query string for this URI.:::return
URI#getFragment():::Get the fragment for this URI.:::return
URI#setScheme(String):::Set the scheme for this URI:::if->throw->XMLMessages->createXMLMessage->new->MalformedURIException->if->isConformantSchemeName->throw->XMLMessages->createXMLMessage->new->MalformedURIException->p_scheme->toLowerCase
URI#setUserinfo(String):::Set the userinfo for this URI:::if->else->if->throw->new->MalformedURIException->index->end->p_userinfo->length->testChar->while->p_userinfo->charAt->if->if->p_userinfo->charAt->isHex->p_userinfo->charAt->isHex->throw->new->MalformedURIException->else->if->isUnreservedCharacter->USERINFO_CHARACTERS->indexOf->throw->new->MalformedURIException
URI#setHost(String):::Set the host for this URI:::if->p_host->trim->length->else->if->isWellFormedAddress->throw->XMLMessages->createXMLMessage->new->MalformedURIException
URI#setPort(int):::Set the port for this URI:::if->if->throw->XMLMessages->createXMLMessage->new->MalformedURIException->else->if->throw->XMLMessages->createXMLMessage->new->MalformedURIException
URI#setPath(String):::Set the path for this URI:::if->else->initializePath
URI#appendPath(String):::Append to the end of the path of this URI:::if->p_addToPath->trim->length->return->if->isURIString->throw->XMLMessages->new->ObjectArr->createXMLMessage->new->MalformedURIException->if->m_path->trim->length->if->p_addToPath->startsWith->else->else->if->m_path->endsWith->if->p_addToPath->startsWith->m_path->p_addToPath->substring->concat->else->m_path->concat->else->if->p_addToPath->startsWith->m_path->concat->else->m_path->concat
URI#setQueryString(String):::Set the query string for this URI:::if->else->if->isGenericURI->throw->new->MalformedURIException->else->if->getPath->throw->new->MalformedURIException->else->if->isURIString->throw->new->MalformedURIException->else
URI#setFragment(String):::Set the fragment for this URI:::if->else->if->isGenericURI->throw->XMLMessages->createXMLMessage->new->MalformedURIException->else->if->getPath->throw->XMLMessages->createXMLMessage->new->MalformedURIException->else->if->isURIString->throw->XMLMessages->createXMLMessage->new->MalformedURIException->else
URI#equals(Object):::Determines if the passed-in Object is equivalent to this URI.:::if->testURI->if->m_scheme->equals->m_userinfo->equals->m_host->equals->m_path->equals->m_queryString->equals->m_fragment->equals->return->return
URI#toString():::Get the URI as a string specification:::uriSpecString->new->StringBuilder->if->uriSpecString->append->uriSpecString->append->uriSpecString->getSchemeSpecificPart->append->return->uriSpecString->toString
URI#isGenericURI():::Get the indicator as to whether this URI uses the "generic URI" syntax.:::return
URI#isConformantSchemeName(String):::Determine whether a scheme conforms to the rules for a scheme name:::if->p_scheme->trim->length->return->if->p_scheme->charAt->isAlpha->return->testChar->for->i->p_scheme->length->return
URI#isWellFormedAddress(String):::Determine whether a string is syntactically capable of representing a valid IPv4 address or the domain name of a network host:::if->return->address->p_address->trim->addrLength->address->length->if->return->if->address->startsWith->address->startsWith->return->index->address->lastIndexOf->if->address->endsWith->address->substring->lastIndexOf->if->p_address->charAt->isDigit->testChar->numDots->for->i->if->return->else->testChar->for->i->return
WrappedRuntimeException#getException():::Get the checked exception that this runtime exception wraps.:::return
XML11Char#isXML11Space(int):::Returns true if the specified character is a space character as amdended in the XML 1.1 specification.:::return
XML11Char#isXML11Valid(int):::Returns true if the specified character is valid:::return
XML11Char#isXML11Invalid(int):::Returns true if the specified character is invalid.:::return->isXML11Valid
XML11Char#isXML11ValidLiteral(int):::Returns true if the specified character is valid and permitted outside of a character reference:::return
XML11Char#isXML11Content(int):::Returns true if the specified character can be considered content in an external parsed entity.:::return
XML11Char#isXML11InternalEntityContent(int):::Returns true if the specified character can be considered content in an internal parsed entity.:::return
XML11Char#isXML11NameStart(int):::Returns true if the specified character is a valid name start character as defined by production [4] in the XML 1.1 specification.:::return
XML11Char#isXML11Name(int):::Returns true if the specified character is a valid name character as defined by production [4a] in the XML 1.1 specification.:::return
XML11Char#isXML11NCNameStart(int):::Returns true if the specified character is a valid NCName start character as defined by production [4] in Namespaces in XML 1.1 recommendation.:::return
XML11Char#isXML11NCName(int):::Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML 1.1 recommendation.:::return
XML11Char#isXML11NameHighSurrogate(int):::Returns whether the given character is a valid high surrogate for a name character:::return
XML11Char#isXML11ValidName(String):::Check to see if a string is a valid Name according to [5] in the XML 1.1 Recommendation:::length->name->length->if->return->i->ch->name->charAt->if->isXML11NameStart->if->isXML11NameHighSurrogate->ch2->name->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11NameStart->return->else->return->while->name->charAt->if->isXML11Name->if->isXML11NameHighSurrogate->ch2->name->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11Name->return->else->return->return
XML11Char#isXML11ValidNCName(String):::Check to see if a string is a valid NCName according to [4] from the XML Namespaces 1.1 Recommendation:::length->ncName->length->if->return->i->ch->ncName->charAt->if->isXML11NCNameStart->if->isXML11NameHighSurrogate->ch2->ncName->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11NCNameStart->return->else->return->while->ncName->charAt->if->isXML11NCName->if->isXML11NameHighSurrogate->ch2->ncName->charAt->if->XMLChar->isLowSurrogate->XMLChar->supplemental->isXML11NCName->return->else->return->return
XML11Char#isXML11ValidNmtoken(String):::Check to see if a string is a valid Nmtoken according to [7] in the XML 1.1 Recommendation:::length->nmtoken->length->if->return->for->i->return
XML11Char#isXML11ValidQName(String):::Simple check to determine if qname is legal:::colon->str->indexOf->if->str->length->return->if->prefix->str->substring->localPart->str->substring->return->isXML11ValidNCName->isXML11ValidNCName->else->return->isXML11ValidNCName
XMLChar#isSupplemental(int):::Returns true if the specified character is a supplemental character.:::return
XMLChar#supplemental(char, char):::Returns true the supplemental character corresponding to the given surrogates.:::return
XMLChar#highSurrogate(int):::Returns the high surrogate of a supplemental character:::return
XMLChar#lowSurrogate(int):::Returns the low surrogate of a supplemental character:::return
XMLChar#isHighSurrogate(int):::Returns whether the given character is a high surrogate:::return
XMLChar#isLowSurrogate(int):::Returns whether the given character is a low surrogate:::return
XMLChar#isValid(int):::Returns true if the specified character is valid:::return
XMLChar#isInvalid(int):::Returns true if the specified character is invalid.:::return->isValid
XMLChar#isContent(int):::Returns true if the specified character can be considered content.:::return
XMLChar#isMarkup(int):::Returns true if the specified character can be considered markup:::return
XMLChar#isSpace(int):::Returns true if the specified character is a space character as defined by production [3] in the XML 1.0 specification.:::return
XMLChar#isNameStart(int):::Returns true if the specified character is a valid name start character as defined by production [5] in the XML 1.0 specification.:::return
XMLChar#isName(int):::Returns true if the specified character is a valid name character as defined by production [4] in the XML 1.0 specification.:::return
XMLChar#isNCNameStart(int):::Returns true if the specified character is a valid NCName start character as defined by production [4] in Namespaces in XML recommendation.:::return
XMLChar#isNCName(int):::Returns true if the specified character is a valid NCName character as defined by production [5] in Namespaces in XML recommendation.:::return
XMLChar#isPubid(int):::Returns true if the specified character is a valid Pubid character as defined by production [13] in the XML 1.0 specification.:::return
XMLChar#isValidName(String):::Check to see if a string is a valid Name according to [5] in the XML 1.0 Recommendation:::if->name->length->return->ch->name->charAt->if->isNameStart->return->for->i->name->length->return
XMLChar#isValidNCName(String):::Check to see if a string is a valid NCName according to [4] from the XML Namespaces 1.0 Recommendation:::if->ncName->length->return->ch->ncName->charAt->if->isNCNameStart->return->for->i->ncName->length->return
XMLChar#isValidNmtoken(String):::Check to see if a string is a valid Nmtoken according to [7] in the XML 1.0 Recommendation:::if->nmtoken->length->return->for->i->nmtoken->length->return
XMLChar#isValidIANAEncoding(String):::Returns true if the encoding name is a valid IANA encoding:::if->length->ianaEncoding->length->if->c->ianaEncoding->charAt->if->for->i->return->return
XMLChar#isValidJavaEncoding(String):::Returns true if the encoding name is a valid Java encoding:::if->length->javaEncoding->length->if->for->i->return->return
XMLChar#isValidQName(String):::Simple check to determine if qname is legal:::colon->str->indexOf->if->str->length->return->if->prefix->str->substring->localPart->str->substring->return->isValidNCName->isValidNCName->else->return->isValidNCName
XMLCharacterRecognizer#isWhiteSpace(char):::Returns whether the specified <var>ch</var> conforms to the XML 1.0 definition of whitespace:::return
XMLCharacterRecognizer#isWhiteSpace(char[], int, int):::Tell if the string is whitespace.:::end->for->s->return
XMLCharacterRecognizer#isWhiteSpace(StringBuffer):::Tell if the string is whitespace.:::n->buf->length->for->i->return
XMLCharacterRecognizer#isWhiteSpace(String):::Tell if the string is whitespace.:::if->n->s->length->for->i->return
XMLReaderManager#getInstance(boolean):::Retrieves the singleton reader manager:::m_singletonManager->setOverrideDefaultParser->return
XMLReaderManager#getXMLReader():::Retrieves a cached XMLReader for this thread, or creates a new XMLReader, if the existing reader is in use:::reader->if->new->ThreadLocal<>->if->new->HashMap<>->rw->m_readers->get->threadHasReader->factory->SecuritySupport->getSystemProperty->if->m_inUse->get->reader->getClass->getName->equals->m_inUse->put->else->JdkXmlUtils->getXMLReader->if->m_readers->new->ReaderWrapper->set->m_inUse->put->JdkXmlUtils->setXMLReaderPropertyIfSupport->JdkXmlUtils->setXMLReaderPropertyIfSupport->lastProperty->try->if->foreach->values->limit->apiProperty->reader->_xmlSecurityManager->getLimitValueAsString->setProperty->if->_xmlSecurityManager->printEntityCountInfo->reader->setProperty->catch->XMLSecurityManager->reader->getClass->getName->printWarning->finally->supportCatalog->try->reader->setFeature->catch->finally->if->try->foreach->values->reader->f->getPropertyName->_catalogFeatures->get->setProperty->catch->finally->return
XMLReaderManager#releaseXMLReader(XMLReader):::Mark the cached XMLReader as available:::rw->m_readers->get->if->m_inUse->remove
XMLReaderManager#overrideDefaultParser():::Return the state of the services mechanism feature.:::return
XMLReaderManager#setOverrideDefaultParser(boolean):::Set the state of the services mechanism feature.:::
XMLReaderManager#setFeature(String, boolean):::Set feature:::if->name->equals->else->if->equals
XMLReaderManager#getProperty(String):::Get property value:::if->name->equals->return->else->if->name->equals->return->return
XMLReaderManager#setProperty(String, Object):::Set property.:::if->name->equals->else->if->name->equals->else->if->equals->else->if->equals->JdkXmlUtils->getValue
XMLString#dispatchCharactersEvents(org.xml.sax.ContentHandler):::Directly call the characters method on the passed ContentHandler for the string-value:::
XMLString#dispatchAsComment(org.xml.sax.ext.LexicalHandler):::Directly call the comment method on the passed LexicalHandler for the string-value.:::
XMLString#fixWhiteSpace(boolean, boolean, boolean):::Conditionally trim all leading and trailing whitespace in the specified String:::
XMLString#length():::Returns the length of this string.:::
XMLString#charAt(int):::Returns the character at the specified index:::
XMLString#getChars(int, int, char[], int):::Copies characters from this string into the destination character array.:::
XMLString#equals(XMLString):::Compares this string to the specified object:::
XMLString#equals(String):::Compares this string to the specified String:::
XMLString#equals(Object):::Compares this string to the specified object:::
XMLString#equalsIgnoreCase(String):::Compares this String to another String, ignoring case considerations:::
XMLString#compareTo(XMLString):::Compares two strings lexicographically.:::
XMLString#compareToIgnoreCase(XMLString):::Compares two strings lexicographically, ignoring case considerations:::
XMLString#startsWith(String, int):::Tests if this string starts with the specified prefix beginning a specified index.:::
XMLString#startsWith(XMLString, int):::Tests if this string starts with the specified prefix beginning a specified index.:::
XMLString#startsWith(String):::Tests if this string starts with the specified prefix.:::
XMLString#startsWith(XMLString):::Tests if this string starts with the specified prefix.:::
XMLString#endsWith(String):::Tests if this string ends with the specified suffix.:::
XMLString#hashCode():::Returns a hashcode for this string:::
XMLString#indexOf(int):::Returns the index within this string of the first occurrence of the specified character:::
XMLString#indexOf(int, int):::Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index:::
XMLString#lastIndexOf(int):::Returns the index within this string of the last occurrence of the specified character:::
XMLString#lastIndexOf(int, int):::Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index:::
XMLString#indexOf(String):::Returns the index within this string of the first occurrence of the specified substring:::
XMLString#indexOf(XMLString):::Returns the index within this string of the first occurrence of the specified substring:::
XMLString#indexOf(String, int):::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index:::
XMLString#lastIndexOf(String):::Returns the index within this string of the rightmost occurrence of the specified substring:::
XMLString#lastIndexOf(String, int):::Returns the index within this string of the last occurrence of the specified substring.:::
XMLString#substring(int):::Returns a new string that is a substring of this string:::
XMLString#substring(int, int):::Returns a new string that is a substring of this string:::
XMLString#concat(String):::Concatenates the specified string to the end of this string.:::
XMLString#toLowerCase(Locale):::Converts all of the characters in this String to lower case using the rules of the given Locale.:::
XMLString#toLowerCase():::Converts all of the characters in this String to lower case using the rules of the default locale, which is returned by Locale.getDefault:::
XMLString#toUpperCase(Locale):::Converts all of the characters in this String to upper case using the rules of the given locale.:::
XMLString#toUpperCase():::Converts all of the characters in this String to upper case using the rules of the default locale, which is returned by Locale.getDefault:::
XMLString#trim():::Removes white space from both ends of this string:::
XMLString#toString():::This object (which is already a string!) is itself returned.:::
XMLString#hasString():::Tell if this object contains a java String object.:::
XMLString#toDouble():::Convert a string to a double -- Allowed input is in fixed notation ddd.fff.:::
XMLStringDefault#dispatchCharactersEvents(org.xml.sax.ContentHandler):::Directly call the characters method on the passed ContentHandler for the string-value:::
XMLStringDefault#dispatchAsComment(org.xml.sax.ext.LexicalHandler):::Directly call the comment method on the passed LexicalHandler for the string-value.:::
XMLStringDefault#fixWhiteSpace(boolean, boolean, boolean):::Conditionally trim all leading and trailing whitespace in the specified String:::return->m_str->trim->new->XMLStringDefault
XMLStringDefault#length():::Returns the length of this string.:::return->m_str->length
XMLStringDefault#charAt(int):::Returns the character at the specified index:::return->m_str->charAt
XMLStringDefault#getChars(int, int, char[], int):::Copies characters from this string into the destination character array.:::destIndex->for->i
XMLStringDefault#equals(String):::Compares this string to the specified String:::return->m_str->equals
XMLStringDefault#equals(XMLString):::Compares this string to the specified object:::return->m_str->anObject->toString->equals
XMLStringDefault#equals(Object):::Compares this string to the specified object:::return->m_str->equals
XMLStringDefault#equalsIgnoreCase(String):::Compares this String to another String, ignoring case considerations:::return->m_str->equalsIgnoreCase
XMLStringDefault#compareTo(XMLString):::Compares two strings lexicographically.:::return->m_str->anotherString->toString->compareTo
XMLStringDefault#compareToIgnoreCase(XMLString):::Compares two strings lexicographically, ignoring case considerations:::return->m_str->str->toString->compareToIgnoreCase
XMLStringDefault#startsWith(String, int):::Tests if this string starts with the specified prefix beginning a specified index.:::return->m_str->startsWith
XMLStringDefault#startsWith(XMLString, int):::Tests if this string starts with the specified prefix beginning a specified index.:::return->m_str->prefix->toString->startsWith
XMLStringDefault#startsWith(String):::Tests if this string starts with the specified prefix.:::return->m_str->startsWith
XMLStringDefault#startsWith(XMLString):::Tests if this string starts with the specified prefix.:::return->m_str->prefix->toString->startsWith
XMLStringDefault#endsWith(String):::Tests if this string ends with the specified suffix.:::return->m_str->endsWith
XMLStringDefault#hashCode():::Returns a hashcode for this string:::return->m_str->hashCode
XMLStringDefault#indexOf(int):::Returns the index within this string of the first occurrence of the specified character:::return->m_str->indexOf
XMLStringDefault#indexOf(int, int):::Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index:::return->m_str->indexOf
XMLStringDefault#lastIndexOf(int):::Returns the index within this string of the last occurrence of the specified character:::return->m_str->lastIndexOf
XMLStringDefault#lastIndexOf(int, int):::Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index:::return->m_str->lastIndexOf
XMLStringDefault#indexOf(String):::Returns the index within this string of the first occurrence of the specified substring:::return->m_str->indexOf
XMLStringDefault#indexOf(XMLString):::Returns the index within this string of the first occurrence of the specified substring:::return->m_str->str->toString->indexOf
XMLStringDefault#indexOf(String, int):::Returns the index within this string of the first occurrence of the specified substring, starting at the specified index:::return->m_str->indexOf
XMLStringDefault#lastIndexOf(String):::Returns the index within this string of the rightmost occurrence of the specified substring:::return->m_str->lastIndexOf
XMLStringDefault#lastIndexOf(String, int):::Returns the index within this string of the last occurrence of the specified substring.:::return->m_str->lastIndexOf
XMLStringDefault#substring(int):::Returns a new string that is a substring of this string:::return->m_str->substring->new->XMLStringDefault
XMLStringDefault#substring(int, int):::Returns a new string that is a substring of this string:::return->m_str->substring->new->XMLStringDefault
XMLStringDefault#concat(String):::Concatenates the specified string to the end of this string.:::return->m_str->concat->new->XMLStringDefault
XMLStringDefault#toLowerCase(Locale):::Converts all of the characters in this String to lower case using the rules of the given Locale.:::return->m_str->toLowerCase->new->XMLStringDefault
XMLStringDefault#toLowerCase():::Converts all of the characters in this String to lower case using the rules of the default locale, which is returned by Locale.getDefault:::return->m_str->toLowerCase->new->XMLStringDefault
XMLStringDefault#toUpperCase(Locale):::Converts all of the characters in this String to upper case using the rules of the given locale.:::return->m_str->toUpperCase->new->XMLStringDefault
XMLStringDefault#toUpperCase():::Converts all of the characters in this String to upper case using the rules of the default locale, which is returned by Locale.getDefault:::return->m_str->toUpperCase->new->XMLStringDefault
XMLStringDefault#trim():::Removes white space from both ends of this string:::return->m_str->trim->new->XMLStringDefault
XMLStringDefault#toString():::This object (which is already a string!) is itself returned.:::return
XMLStringDefault#hasString():::Tell if this object contains a java String object.:::return
XMLStringDefault#toDouble():::Convert a string to a double -- Allowed input is in fixed notation ddd.fff.:::try->return->Double->valueOf->doubleValue->catch->return->finally
XMLStringFactory#newstr(String):::Create a new XMLString from a Java string.:::
XMLStringFactory#newstr(FastStringBuffer, int, int):::Create a XMLString from a FastStringBuffer.:::
XMLStringFactory#newstr(char[], int, int):::Create a XMLString from a FastStringBuffer.:::
XMLStringFactory#emptystr():::Get a cheap representation of an empty string.:::
XMLStringFactoryDefault#newstr(String):::Create a new XMLString from a Java string.:::return->new->XMLStringDefault
XMLStringFactoryDefault#newstr(FastStringBuffer, int, int):::Create a XMLString from a FastStringBuffer.:::return->fsb->getString->new->XMLStringDefault
XMLStringFactoryDefault#newstr(char[], int, int):::Create a XMLString from a FastStringBuffer.:::return->new->String->new->XMLStringDefault
XMLStringFactoryDefault#emptystr():::Get a cheap representation of an empty string.:::return

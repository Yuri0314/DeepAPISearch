jdk.nashorn.internal.lookup.Lookup#emptyGetter(Object)->Object:::Empty getter implementation
jdk.nashorn.internal.lookup.Lookup#emptySetter(Object, Object)->void:::Empty setter implementation
jdk.nashorn.internal.lookup.Lookup#emptyGetter(Class)->MethodHandle:::Return a method handle to the empty getter, with a different return type value
jdk.nashorn.internal.lookup.Lookup#typeErrorThrower(Object)->Object:::Getter function that always throws type error
jdk.nashorn.internal.lookup.Lookup#filterArgumentType(MethodHandle, int, Class)->MethodHandle:::This method filters primitive argument types using JavaScript semantics
jdk.nashorn.internal.lookup.Lookup#filterReturnType(MethodHandle, Class)->MethodHandle:::This method filters primitive return types using JavaScript semantics
jdk.nashorn.internal.lookup.MethodHandleFactory#stripName(Object)->String:::Helper function that takes a class or an object with a toString override and shortens it to notation after last dot
jdk.nashorn.internal.lookup.MethodHandleFactory#getFunctionality()->MethodHandleFunctionality:::Return the method handle functionality used for all method handle operations
jdk.nashorn.internal.lookup.MethodHandleFactory#traceReturn(DebugLogger, Object)->Object:::Tracer that is applied before a value is returned from the traced function
jdk.nashorn.internal.lookup.MethodHandleFactory#traceReturnVoid(DebugLogger)->void::: method handle factory trace return void
jdk.nashorn.internal.lookup.MethodHandleFactory#traceArgs(DebugLogger, String, int, Object...)->void:::Tracer that is applied before a function is called, printing the arguments
jdk.nashorn.internal.lookup.MethodHandleFactory#addDebugPrintout(MethodHandle, Object)->MethodHandle:::Add a debug printout to a method handle, tracing parameters and return values Output will be unconditional to stderr
jdk.nashorn.internal.lookup.MethodHandleFactory#addDebugPrintout(DebugLogger, Level, MethodHandle, Object)->MethodHandle:::Add a debug printout to a method handle, tracing parameters and return values
jdk.nashorn.internal.lookup.MethodHandleFactory#addDebugPrintout(MethodHandle, int, boolean, Object)->MethodHandle:::Add a debug printout to a method handle, tracing parameters and return values Output will be unconditional to stderr
jdk.nashorn.internal.lookup.MethodHandleFactory#addDebugPrintout(DebugLogger, Level, MethodHandle, int, boolean, Object)->MethodHandle:::Add a debug printout to a method handle, tracing parameters and return values
jdk.nashorn.internal.lookup.MethodHandleFunctionality#filterArguments(MethodHandle, int, MethodHandle...)->MethodHandle:::Wrapper for MethodHandles#filterArguments(MethodHandle, int, MethodHandle...)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#filterReturnValue(MethodHandle, MethodHandle)->MethodHandle:::Wrapper for MethodHandles#filterReturnValue(MethodHandle, MethodHandle)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#guardWithTest(MethodHandle, MethodHandle, MethodHandle)->MethodHandle:::Wrapper for MethodHandles#guardWithTest(MethodHandle, MethodHandle, MethodHandle)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#insertArguments(MethodHandle, int, Object...)->MethodHandle:::Wrapper for MethodHandles#insertArguments(MethodHandle, int, Object...)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#dropArguments(MethodHandle, int, Class...)->MethodHandle:::Wrapper for MethodHandles#dropArguments(MethodHandle, int, Class...)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#dropArguments(MethodHandle, int, List>)->MethodHandle:::Wrapper for MethodHandles#dropArguments(MethodHandle, int, List)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#foldArguments(MethodHandle, MethodHandle)->MethodHandle:::Wrapper for MethodHandles#foldArguments(MethodHandle, MethodHandle)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#explicitCastArguments(MethodHandle, MethodType)->MethodHandle:::Wrapper for MethodHandles#explicitCastArguments(MethodHandle, MethodType)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#arrayElementGetter(Class)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles#arrayElementGetter(Class)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#arrayElementSetter(Class)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles#arrayElementSetter(Class)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#throwException(Class, Class)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles#throwException(Class, Class)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#catchException(MethodHandle, Class, MethodHandle)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles#catchException(MethodHandle, Class, MethodHandle)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#constant(Class, Object)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles#constant(Class, Object)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#identity(Class)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles#identity(Class)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#asType(MethodHandle, MethodType)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandle#asType(MethodType)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#asCollector(MethodHandle, Class, int)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandle#asCollector(Class, int)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#asSpreader(MethodHandle, Class, int)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandle#asSpreader(Class, int)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#bindTo(MethodHandle, Object)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandle#bindTo(Object)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#getter(MethodHandles.Lookup, Class, String, Class)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles.Lookup#findGetter(Class, String, Class)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#staticGetter(MethodHandles.Lookup, Class, String, Class)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles.Lookup#findStaticGetter(Class, String, Class)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#setter(MethodHandles.Lookup, Class, String, Class)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles.Lookup#findSetter(Class, String, Class)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#staticSetter(MethodHandles.Lookup, Class, String, Class)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles.Lookup#findStaticSetter(Class, String, Class)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#find(Method)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles.Lookup#unreflect(Method)  Unreflect a method as a method handle
jdk.nashorn.internal.lookup.MethodHandleFunctionality#findStatic(MethodHandles.Lookup, Class, String, MethodType)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles.Lookup#findStatic(Class, String, MethodType)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#findVirtual(MethodHandles.Lookup, Class, String, MethodType)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles.Lookup#findVirtual(Class, String, MethodType)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#findSpecial(MethodHandles.Lookup, Class, String, MethodType, Class)->MethodHandle:::Wrapper for java.lang.invoke.MethodHandles.Lookup#findSpecial(Class, String, MethodType, Class)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#createSwitchPoint()->SwitchPoint:::Wrapper for SwitchPoint creation
jdk.nashorn.internal.lookup.MethodHandleFunctionality#guardWithTest(SwitchPoint, MethodHandle, MethodHandle)->MethodHandle:::Wrapper for SwitchPoint#guardWithTest(MethodHandle, MethodHandle)
jdk.nashorn.internal.lookup.MethodHandleFunctionality#type(Class, Class...)->MethodType:::Wrapper for MethodType#methodType(Class, Class...)

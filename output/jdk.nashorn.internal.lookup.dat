Lookup#emptyGetter(Object):::Empty getter implementation:::return
Lookup#emptySetter(Object, Object):::Empty setter implementation:::
Lookup#emptyGetter(Class):::Return a method handle to the empty getter, with a different return type value:::return->filterReturnType
Lookup#typeErrorThrower(Object):::Getter function that always throws type error:::throw->ScriptRuntime->safeToString->typeError
Lookup#filterArgumentType(MethodHandle, int, Class):::This method filters primitive argument types using JavaScript semantics:::to->mh->type->parameterType->if->else->if->if->return->MH->methodHandle->filterArguments->else->if->if->return->MH->methodHandle->filterArguments->else->if->return->MH->methodHandle->filterArguments->else->if->from->isPrimitive->if->return->MH->methodHandle->filterArguments->else->if->return->MH->methodHandle->filterArguments->else->if->return->MH->methodHandle->filterArguments->else->if->to->isPrimitive->return->return->MH->mh->type->changeParameterType->explicitCastArguments
Lookup#filterReturnType(MethodHandle, Class):::This method filters primitive return types using JavaScript semantics:::retType->mh->type->returnType->if->else->if->if->return->MH->methodHandle->filterReturnValue->else->if->if->return->MH->methodHandle->filterReturnValue->else->if->return->MH->methodHandle->filterReturnValue->else->if->retType->isPrimitive->if->return->MH->methodHandle->filterReturnValue->else->if->return->MH->methodHandle->filterReturnValue->else->if->return->MH->methodHandle->filterReturnValue->else->if->type->isPrimitive->return->return->MH->mh->type->changeReturnType->explicitCastArguments
Lookup#findOwnMH(String, Class, Class...)::: lookup find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
MethodHandleFactory#stripName(Object):::Helper function that takes a class or an object with a toString override and shortens it to notation after last dot:::if->return->if->return->getSimpleName->return->obj->toString
MethodHandleFactory#getFunctionality():::Return the method handle functionality used for all method handle operations:::return
MethodHandleFactory#err(String)::: method handle factory err:::Context->getContext->getErr->println
MethodHandleFactory#traceReturn(DebugLogger, Object):::Tracer that is applied before a value is returned from the traced function:::str->VOID_TAG->equals->stripName->value->getClass->stripName->if->err->else->if->logger->isEnabled->logger->log->return
MethodHandleFactory#traceReturnVoid(DebugLogger)::: method handle factory trace return void:::traceReturn
MethodHandleFactory#traceArgs(DebugLogger, String, int, Object...):::Tracer that is applied before a function is called, printing the arguments:::sb->new->StringBuilder->sb->append->for->i->if->sb->toString->err->else->logger->log->stacktrace
MethodHandleFactory#stacktrace(DebugLogger)::: method handle factory stacktrace:::if->return->baos->new->ByteArrayOutputStream->ps->new->PrintStream->new->Throwable->printStackTrace->st->baos->toString->if->err->else->logger->log
MethodHandleFactory#argString(Object)::: method handle factory arg string:::if->return->if->arg->getClass->isArray->list->new->ArrayList<>->foreach->list->argString->add->return->list->toString->if->return->arg->toString->Debug->getMap->id->return->arg->toString
MethodHandleFactory#addDebugPrintout(MethodHandle, Object):::Add a debug printout to a method handle, tracing parameters and return values Output will be unconditional to stderr:::return->addDebugPrintout
MethodHandleFactory#addDebugPrintout(DebugLogger, Level, MethodHandle, Object):::Add a debug printout to a method handle, tracing parameters and return values:::return->addDebugPrintout
MethodHandleFactory#addDebugPrintout(MethodHandle, int, boolean, Object):::Add a debug printout to a method handle, tracing parameters and return values Output will be unconditional to stderr:::return->addDebugPrintout
MethodHandleFactory#addDebugPrintout(DebugLogger, Level, MethodHandle, int, boolean, Object):::Add a debug printout to a method handle, tracing parameters and return values:::type->mh->type->if->logger->isLoggable->return->trace->MethodHandles->insertArguments->MethodHandles->trace->type->parameterCount->asCollector->type->changeReturnType->asType->foldArguments->retType->type->returnType->if->if->traceReturn->MethodHandles->insertArguments->MethodHandles->traceReturn->traceReturn->type->changeParameterType->changeReturnType->asType->filterReturnValue->else->MethodHandles->MethodHandles->insertArguments->filterReturnValue->return
MethodHandleFactory.StandardMethodHandleFunctionality#initLogger(Context)::: standard method handle functionality init logger:::return->context->this->getClass->getLogger
MethodHandleFactory.StandardMethodHandleFunctionality#getLogger()::: standard method handle functionality get logger:::return
MethodHandleFactory.StandardMethodHandleFunctionality#describe(Object...)::: standard method handle functionality describe:::sb->new->StringBuilder->for->i->return->sb->toString
MethodHandleFactory.StandardMethodHandleFunctionality#debug(MethodHandle, String, Object...)::: standard method handle functionality debug:::if->log->isEnabled->if->stacktrace->return->describe->addDebugPrintout->return
MethodHandleFactory.StandardMethodHandleFunctionality#filterArguments(MethodHandle, int, MethodHandle...)::: standard method handle functionality filter arguments:::mh->MethodHandles->filterArguments->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#filterReturnValue(MethodHandle, MethodHandle)::: standard method handle functionality filter return value:::mh->MethodHandles->filterReturnValue->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#guardWithTest(MethodHandle, MethodHandle, MethodHandle)::: standard method handle functionality guard with test:::mh->MethodHandles->guardWithTest->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#insertArguments(MethodHandle, int, Object...)::: standard method handle functionality insert arguments:::mh->MethodHandles->insertArguments->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#dropArguments(MethodHandle, int, Class...)::: standard method handle functionality drop arguments:::mh->MethodHandles->dropArguments->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#dropArguments(MethodHandle, int, List>)::: standard method handle functionality drop arguments:::mh->MethodHandles->dropArguments->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#asType(MethodHandle, MethodType)::: standard method handle functionality as type:::mh->handle->asType->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#bindTo(MethodHandle, Object)::: standard method handle functionality bind to:::mh->handle->bindTo->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#foldArguments(MethodHandle, MethodHandle)::: standard method handle functionality fold arguments:::mh->MethodHandles->foldArguments->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#explicitCastArguments(MethodHandle, MethodType)::: standard method handle functionality explicit cast arguments:::mh->MethodHandles->explicitCastArguments->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#arrayElementGetter(Class)::: standard method handle functionality array element getter:::mh->MethodHandles->arrayElementGetter->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#arrayElementSetter(Class)::: standard method handle functionality array element setter:::mh->MethodHandles->arrayElementSetter->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#throwException(Class, Class)::: standard method handle functionality throw exception:::mh->MethodHandles->throwException->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#catchException(MethodHandle, Class, MethodHandle)::: standard method handle functionality catch exception:::mh->MethodHandles->catchException->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#constant(Class, Object)::: standard method handle functionality constant:::mh->MethodHandles->constant->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#identity(Class)::: standard method handle functionality identity:::mh->MethodHandles->identity->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#asCollector(MethodHandle, Class, int)::: standard method handle functionality as collector:::mh->handle->asCollector->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#asSpreader(MethodHandle, Class, int)::: standard method handle functionality as spreader:::mh->handle->asSpreader->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#getter(MethodHandles.Lookup, Class, String, Class)::: standard method handle functionality getter:::try->mh->explicitLookup->findGetter->return->debug->catch->throw->new->LookupException->finally
MethodHandleFactory.StandardMethodHandleFunctionality#staticGetter(MethodHandles.Lookup, Class, String, Class)::: standard method handle functionality static getter:::try->mh->explicitLookup->findStaticGetter->return->debug->catch->throw->new->LookupException->finally
MethodHandleFactory.StandardMethodHandleFunctionality#setter(MethodHandles.Lookup, Class, String, Class)::: standard method handle functionality setter:::try->mh->explicitLookup->findSetter->return->debug->catch->throw->new->LookupException->finally
MethodHandleFactory.StandardMethodHandleFunctionality#staticSetter(MethodHandles.Lookup, Class, String, Class)::: standard method handle functionality static setter:::try->mh->explicitLookup->findStaticSetter->return->debug->catch->throw->new->LookupException->finally
MethodHandleFactory.StandardMethodHandleFunctionality#find(Method)::: standard method handle functionality find:::try->mh->PUBLIC_LOOKUP->unreflect->return->debug->catch->throw->new->LookupException->finally
MethodHandleFactory.StandardMethodHandleFunctionality#findStatic(MethodHandles.Lookup, Class, String, MethodType)::: standard method handle functionality find static:::try->mh->explicitLookup->findStatic->return->debug->catch->throw->new->LookupException->finally
MethodHandleFactory.StandardMethodHandleFunctionality#findSpecial(MethodHandles.Lookup, Class, String, MethodType, Class)::: standard method handle functionality find special:::try->mh->explicitLookup->findSpecial->return->debug->catch->throw->new->LookupException->finally
MethodHandleFactory.StandardMethodHandleFunctionality#findVirtual(MethodHandles.Lookup, Class, String, MethodType)::: standard method handle functionality find virtual:::try->mh->explicitLookup->findVirtual->return->debug->catch->throw->new->LookupException->finally
MethodHandleFactory.StandardMethodHandleFunctionality#createSwitchPoint()::: standard method handle functionality create switch point:::sp->new->SwitchPoint->log->log->return
MethodHandleFactory.StandardMethodHandleFunctionality#guardWithTest(SwitchPoint, MethodHandle, MethodHandle)::: standard method handle functionality guard with test:::mh->sp->guardWithTest->return->debug
MethodHandleFactory.StandardMethodHandleFunctionality#type(Class, Class...)::: standard method handle functionality type:::mt->MethodType->methodType->log->Arrays->toString->log->return
MethodHandleFunctionality#filterArguments(MethodHandle, int, MethodHandle...):::Wrapper for MethodHandles#filterArguments(MethodHandle, int, MethodHandle...):::
MethodHandleFunctionality#filterReturnValue(MethodHandle, MethodHandle):::Wrapper for MethodHandles#filterReturnValue(MethodHandle, MethodHandle):::
MethodHandleFunctionality#guardWithTest(MethodHandle, MethodHandle, MethodHandle):::Wrapper for MethodHandles#guardWithTest(MethodHandle, MethodHandle, MethodHandle):::
MethodHandleFunctionality#insertArguments(MethodHandle, int, Object...):::Wrapper for MethodHandles#insertArguments(MethodHandle, int, Object...):::
MethodHandleFunctionality#dropArguments(MethodHandle, int, Class...):::Wrapper for MethodHandles#dropArguments(MethodHandle, int, Class...):::
MethodHandleFunctionality#dropArguments(MethodHandle, int, List>):::Wrapper for MethodHandles#dropArguments(MethodHandle, int, List):::
MethodHandleFunctionality#foldArguments(MethodHandle, MethodHandle):::Wrapper for MethodHandles#foldArguments(MethodHandle, MethodHandle):::
MethodHandleFunctionality#explicitCastArguments(MethodHandle, MethodType):::Wrapper for MethodHandles#explicitCastArguments(MethodHandle, MethodType):::
MethodHandleFunctionality#arrayElementGetter(Class):::Wrapper for java.lang.invoke.MethodHandles#arrayElementGetter(Class):::
MethodHandleFunctionality#arrayElementSetter(Class):::Wrapper for java.lang.invoke.MethodHandles#arrayElementSetter(Class):::
MethodHandleFunctionality#throwException(Class, Class):::Wrapper for java.lang.invoke.MethodHandles#throwException(Class, Class):::
MethodHandleFunctionality#catchException(MethodHandle, Class, MethodHandle):::Wrapper for java.lang.invoke.MethodHandles#catchException(MethodHandle, Class, MethodHandle):::
MethodHandleFunctionality#constant(Class, Object):::Wrapper for java.lang.invoke.MethodHandles#constant(Class, Object):::
MethodHandleFunctionality#identity(Class):::Wrapper for java.lang.invoke.MethodHandles#identity(Class):::
MethodHandleFunctionality#asType(MethodHandle, MethodType):::Wrapper for java.lang.invoke.MethodHandle#asType(MethodType):::
MethodHandleFunctionality#asCollector(MethodHandle, Class, int):::Wrapper for java.lang.invoke.MethodHandle#asCollector(Class, int):::
MethodHandleFunctionality#asSpreader(MethodHandle, Class, int):::Wrapper for java.lang.invoke.MethodHandle#asSpreader(Class, int):::
MethodHandleFunctionality#bindTo(MethodHandle, Object):::Wrapper for java.lang.invoke.MethodHandle#bindTo(Object):::
MethodHandleFunctionality#getter(MethodHandles.Lookup, Class, String, Class):::Wrapper for java.lang.invoke.MethodHandles.Lookup#findGetter(Class, String, Class):::
MethodHandleFunctionality#staticGetter(MethodHandles.Lookup, Class, String, Class):::Wrapper for java.lang.invoke.MethodHandles.Lookup#findStaticGetter(Class, String, Class):::
MethodHandleFunctionality#setter(MethodHandles.Lookup, Class, String, Class):::Wrapper for java.lang.invoke.MethodHandles.Lookup#findSetter(Class, String, Class):::
MethodHandleFunctionality#staticSetter(MethodHandles.Lookup, Class, String, Class):::Wrapper for java.lang.invoke.MethodHandles.Lookup#findStaticSetter(Class, String, Class):::
MethodHandleFunctionality#find(Method):::Wrapper for java.lang.invoke.MethodHandles.Lookup#unreflect(Method)  Unreflect a method as a method handle:::
MethodHandleFunctionality#findStatic(MethodHandles.Lookup, Class, String, MethodType):::Wrapper for java.lang.invoke.MethodHandles.Lookup#findStatic(Class, String, MethodType):::
MethodHandleFunctionality#findVirtual(MethodHandles.Lookup, Class, String, MethodType):::Wrapper for java.lang.invoke.MethodHandles.Lookup#findVirtual(Class, String, MethodType):::
MethodHandleFunctionality#findSpecial(MethodHandles.Lookup, Class, String, MethodType, Class):::Wrapper for java.lang.invoke.MethodHandles.Lookup#findSpecial(Class, String, MethodType, Class):::
MethodHandleFunctionality#createSwitchPoint():::Wrapper for SwitchPoint creation:::
MethodHandleFunctionality#guardWithTest(SwitchPoint, MethodHandle, MethodHandle):::Wrapper for SwitchPoint#guardWithTest(MethodHandle, MethodHandle):::
MethodHandleFunctionality#type(Class, Class...):::Wrapper for MethodType#methodType(Class, Class...):::

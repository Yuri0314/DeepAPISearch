org.graalvm.compiler.phases.contract.NodeCostUtil#computeGraphSize(StructuredGraph)->int::: node cost util compute graph size
org.graalvm.compiler.phases.contract.NodeCostUtil#computeGraphCycles(StructuredGraph, boolean)->double::: node cost util compute graph cycles
org.graalvm.compiler.phases.contract.NodeCostUtil#phaseFulfillsSizeContract(StructuredGraph, int, int, PhaseSizeContract)->void::: node cost util phase fulfills size contract
org.graalvm.compiler.phases.contract.PhaseSizeContract#codeSizeIncrease()->float:::Returns a factor >=1 that determines what the final code size in terms of the sum of the node code sizes NodeSize of all nodes is.
org.graalvm.compiler.phases.contract.PhaseSizeContract#checkContract()->boolean::: phase size contract check contract
org.graalvm.compiler.phases.contract.PhaseSizeContract#contractorName()->String::: phase size contract contractor name
org.graalvm.compiler.phases.contract.VerifyNodeCosts#verifyNodeClass(Class)->void::: verify node costs verify node class

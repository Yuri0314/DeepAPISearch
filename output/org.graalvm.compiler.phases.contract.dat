NodeCostUtil#computeGraphSize(StructuredGraph)::: node cost util compute graph size:::sizeComputationCount->graph->getDebug->increment->size->foreach->graph->getNodes->n->estimatedNodeSize->return
NodeCostUtil#computeGraphCycles(StructuredGraph, boolean)::: node cost util compute graph cycles:::blockToNodes->cfg->if->schedule->new->SchedulePhase->schedule->apply->graph->getLastSchedule->getCFG->graph->getLastSchedule->getBlockToNodesMap->get->else->ControlFlowGraph->compute->nodes->new->BlockMap<>->foreach->cfg->getBlocks->curNodes->new->ArrayList<>->foreach->b->getNodes->curNodes->add->nodes->put->nodes->get->weightedCycles->debug->graph->getDebug->try->s->debug->scope->foreach->cfg->getBlocks->foreach->blockToNodes->apply->probWeighted->n->estimatedNodeCycles->block->getRelativeFrequency->if->debug->isLogEnabled->debug->n->estimatedNodeCycles->block->getRelativeFrequency->n->estimatedNodeSize->block->getRelativeFrequency->log->catch->finally->return
NodeCostUtil#deltaCompare(double, double, double)::: node cost util delta compare:::if->Math->abs->return->return->Double->compare
NodeCostUtil#phaseFulfillsSizeContract(StructuredGraph, int, int, PhaseSizeContract)::: node cost util phase fulfills size contract:::sizeVerificationCount->graph->getDebug->increment->codeSizeIncrease->contract->codeSizeIncrease->graphSizeDelta->if->deltaCompare->method->graph->method->increase->throw->contract->contractorName->method->format->new->VerificationError
PhaseSizeContract#codeSizeIncrease():::Returns a factor >=1 that determines what the final code size in terms of the sum of the node code sizes NodeSize of all nodes is.:::
PhaseSizeContract#checkContract()::: phase size contract check contract:::return
PhaseSizeContract#contractorName()::: phase size contract contractor name:::
VerifyNodeCosts#verifyNodeClass(Class)::: verify node costs verify node class:::nodeClass->if->nodeClass->isAssignableFrom->if->clazz->isAnnotationPresent->throw->clazz->getName->new->VerifyPhase.VerificationError->if->Modifier->clazz->getModifiers->isAbstract->cyclesSet->getType->getType->return->cur->cycles->walkCHUntil->sizeSet->getType->getType->return->cur->size->walkCHUntil->if->throw->clazz->getName->new->VerifyPhase.VerificationError->if->throw->clazz->getName->new->VerifyPhase.VerificationError
VerifyNodeCosts#getType(Class)::: verify node costs get type:::try->return->NodeClass->get->catch->throw->c->getName->new->VerifyPhase.VerificationError->finally
VerifyNodeCosts#walkCHUntil(NodeClass, NodeClass, Predicate>)::: verify node costs walk until:::cur->while->if->p->test->return->cur->getSuperNodeClass->return

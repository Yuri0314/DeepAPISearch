AttributeListImpl#setAttributeList(AttributeList):::Set the attribute list, discarding previous contents:::count->atts->getLength->clear->for->i
AttributeListImpl#addAttribute(String, String, String):::Add an attribute to an attribute list:::names->add->types->add->values->add
AttributeListImpl#removeAttribute(String):::Remove an attribute from the list:::i->names->indexOf->if->names->remove->types->remove->values->remove
AttributeListImpl#clear():::Clear the attribute list:::names->clear->types->clear->values->clear
AttributeListImpl#getLength():::Return the number of attributes in the list.:::return->names->size
AttributeListImpl#getName(int):::Get the name of an attribute (by position).:::if->return->try->return->names->get->catch->return->finally
AttributeListImpl#getType(int):::Get the type of an attribute (by position).:::if->return->try->return->types->get->catch->return->finally
AttributeListImpl#getValue(int):::Get the value of an attribute (by position).:::if->return->try->return->values->get->catch->return->finally
AttributeListImpl#getType(String):::Get the type of an attribute (by name).:::return->names->indexOf->getType
AttributeListImpl#getValue(String):::Get the value of an attribute (by name).:::return->names->indexOf->getValue
AttributesImpl#getLength():::Return the number of attributes in the list.:::return
AttributesImpl#getURI(int):::Return an attribute's Namespace URI.:::if->return->else->return
AttributesImpl#getLocalName(int):::Return an attribute's local name.:::if->return->else->return
AttributesImpl#getQName(int):::Return an attribute's qualified (prefixed) name.:::if->return->else->return
AttributesImpl#getType(int):::Return an attribute's type by index.:::if->return->else->return
AttributesImpl#getValue(int):::Return an attribute's value by index.:::if->return->else->return
AttributesImpl#getIndex(String, String):::Look up an attribute's index by Namespace name:::max->for->i->return
AttributesImpl#getIndex(String):::Look up an attribute's index by qualified (prefixed) name.:::max->for->i->return
AttributesImpl#getType(String, String):::Look up an attribute's type by Namespace-qualified name.:::max->for->i->return
AttributesImpl#getType(String):::Look up an attribute's type by qualified (prefixed) name.:::max->for->i->return
AttributesImpl#getValue(String, String):::Look up an attribute's value by Namespace-qualified name.:::max->for->i->return
AttributesImpl#getValue(String):::Look up an attribute's value by qualified (prefixed) name.:::max->for->i->return
AttributesImpl#clear():::Clear the attribute list for reuse:::if->for->i
AttributesImpl#setAttributes(Attributes):::Copy an entire Attributes object:::clear->atts->getLength->if->new->StringArr->for->i
AttributesImpl#addAttribute(String, String, String, String, String):::Add an attribute to the end of the list:::ensureCapacity
AttributesImpl#setAttribute(int, String, String, String, String, String):::Set an attribute in the list:::if->else->badIndex
AttributesImpl#removeAttribute(int):::Remove an attribute from the list.:::if->if->System->arraycopy->else->badIndex
AttributesImpl#setURI(int, String):::Set the Namespace URI of a specific attribute.:::if->else->badIndex
AttributesImpl#setLocalName(int, String):::Set the local name of a specific attribute.:::if->else->badIndex
AttributesImpl#setQName(int, String):::Set the qualified name of a specific attribute.:::if->else->badIndex
AttributesImpl#setType(int, String):::Set the type of a specific attribute.:::if->else->badIndex
AttributesImpl#setValue(int, String):::Set the value of a specific attribute.:::if->else->badIndex
DefaultHandler#resolveEntity(String, String):::Resolve an external entity:::return
DefaultHandler#notationDecl(String, String, String):::Receive notification of a notation declaration:::
DefaultHandler#unparsedEntityDecl(String, String, String, String):::Receive notification of an unparsed entity declaration:::
DefaultHandler#setDocumentLocator(Locator):::Receive a Locator object for document events:::
DefaultHandler#startDocument():::Receive notification of the beginning of the document:::
DefaultHandler#endDocument():::Receive notification of the end of the document:::
DefaultHandler#startPrefixMapping(String, String):::Receive notification of the start of a Namespace mapping:::
DefaultHandler#endPrefixMapping(String):::Receive notification of the end of a Namespace mapping:::
DefaultHandler#startElement(String, String, String, Attributes):::Receive notification of the start of an element:::
DefaultHandler#endElement(String, String, String):::Receive notification of the end of an element:::
DefaultHandler#characters(char[], int, int):::Receive notification of character data inside an element:::
DefaultHandler#ignorableWhitespace(char[], int, int):::Receive notification of ignorable whitespace in element content:::
DefaultHandler#processingInstruction(String, String):::Receive notification of a processing instruction:::
DefaultHandler#skippedEntity(String):::Receive notification of a skipped entity:::
DefaultHandler#warning(SAXParseException):::Receive notification of a parser warning:::
DefaultHandler#error(SAXParseException):::Receive notification of a recoverable parser error:::
DefaultHandler#fatalError(SAXParseException):::Report a fatal XML parsing error:::throw
LocatorImpl#getPublicId():::Return the saved public identifier.:::return
LocatorImpl#getSystemId():::Return the saved system identifier.:::return
LocatorImpl#getLineNumber():::Return the saved line number (1-based).:::return
LocatorImpl#getColumnNumber():::Return the saved column number (1-based).:::return
LocatorImpl#setPublicId(String):::Set the public identifier for this locator.:::
LocatorImpl#setSystemId(String):::Set the system identifier for this locator.:::
LocatorImpl#setLineNumber(int):::Set the line number for this locator (1-based).:::
LocatorImpl#setColumnNumber(int):::Set the column number for this locator (1-based).:::
NamespaceSupport#reset():::Reset this Namespace support object for reuse:::new->ContextArr->new->Context->currentContext->declarePrefix
NamespaceSupport#pushContext():::Start a new Namespace context:::max->if->newContexts->new->ContextArr->System->arraycopy->if->new->Context->if->currentContext->setParent
NamespaceSupport#popContext():::Revert to the previous Namespace context:::clear->if->throw->new->EmptyStackException
NamespaceSupport#declarePrefix(String, String):::Declare a Namespace prefix:::if->prefix->equals->prefix->equals->return->else->currentContext->declarePrefix->return
NamespaceSupport#processName(String, String[], boolean):::Process a raw XML qualified name, after all declarations in the current context have been handled by #declarePrefix declarePrefix():::myParts->currentContext->processName->if->return->else->return
NamespaceSupport#getURI(String):::Look up a prefix and get the currently-mapped Namespace URI:::return->currentContext->getURI
NamespaceSupport#getPrefixes():::Return an enumeration of all prefixes whose declarations are active in the current context:::return->currentContext->getPrefixes
NamespaceSupport#getPrefix(String):::Return one of the prefixes mapped to a Namespace URI:::return->currentContext->getPrefix
NamespaceSupport#getPrefixes(String):::Return an enumeration of all prefixes for a given URI whose declarations are active in the current context:::prefixes->new->ArrayList<>->allPrefixes->getPrefixes->while->allPrefixes->hasMoreElements->prefix->allPrefixes->nextElement->if->uri->getURI->equals->prefixes->add->return->Collections->enumeration
NamespaceSupport#getDeclaredPrefixes():::Return an enumeration of all prefixes declared in this context:::return->currentContext->getDeclaredPrefixes
NamespaceSupport#setNamespaceDeclUris(boolean):::Controls whether namespace declaration attributes are placed into the #NSDECL NSDECL namespace by #processName processName():::if->throw->new->IllegalStateException->if->return->if->currentContext->declarePrefix->else->new->Context->currentContext->declarePrefix
NamespaceSupport#isNamespaceDeclUris():::Returns true if namespace declaration attributes are placed into a namespace:::return
NamespaceSupport.Context#setParent(Context):::(Re)set the parent of this Namespace context:::
NamespaceSupport.Context#clear():::Makes associated state become collectible, invalidating this context:::
NamespaceSupport.Context#declarePrefix(String, String):::Declare a Namespace prefix for this context.:::if->copyTables->if->new->ArrayList<>->prefix->intern->uri->intern->if->equals->if->equals->else->else->prefixTable->put->uriTable->put->declarations->add
NamespaceSupport.Context#processName(String, boolean):::Process an XML qualified name in this context.:::name->table->if->else->table->get->if->return->new->StringArr->qName->intern->index->qName->indexOf->if->if->if->else->else->if->else->else->prefix->qName->substring->local->qName->substring->uri->if->equals->else->prefixTable->get->if->equals->return->local->intern->table->put->return
NamespaceSupport.Context#getURI(String):::Look up the URI associated with a prefix in this context.:::if->equals->return->else->if->return->else->return->prefixTable->get
NamespaceSupport.Context#getPrefix(String):::Look up one of the prefixes associated with a URI in this context:::if->return->else->return->uriTable->get
NamespaceSupport.Context#getDeclaredPrefixes():::Return an enumeration of prefixes declared in this context.:::if->return->else->return->Collections->enumeration
NamespaceSupport.Context#getPrefixes():::Return an enumeration of all prefixes currently in force:::if->return->else->return->Collections->prefixTable->keySet->enumeration
NewInstance#newInstance(Class, ClassLoader, String):::Creates a new instance of the specified class name  Package private so this code is not exposed at the API level.:::classLoader->Objects->requireNonNull->className->Objects->requireNonNull->if->className->equals->return->type->new->com.sun.org.apache.xerces.internal.parsers.SAXParser->cast->internal->if->System->getSecurityManager->if->className->startsWith->driverClass->if->Class->forName->else->classLoader->loadClass->try->return->type->driverClass->getConstructor->newInstance->cast->catch->throw->ex->getMessage->new->InstantiationException->finally
ParserAdapter#setFeature(String, boolean):::Set a feature flag for the parser:::if->name->equals->checkNotParsing->if->else->if->name->equals->checkNotParsing->if->else->if->name->equals->checkNotParsing->else->throw->new->SAXNotRecognizedException
ParserAdapter#getFeature(String):::Check a parser feature flag:::if->name->equals->return->else->if->name->equals->return->else->if->name->equals->return->else->throw->new->SAXNotRecognizedException
ParserAdapter#setProperty(String, Object):::Set a parser property:::throw->new->SAXNotRecognizedException
ParserAdapter#getProperty(String):::Get a parser property:::throw->new->SAXNotRecognizedException
ParserAdapter#setEntityResolver(EntityResolver):::Set the entity resolver.:::
ParserAdapter#getEntityResolver():::Return the current entity resolver.:::return
ParserAdapter#setDTDHandler(DTDHandler):::Set the DTD handler.:::
ParserAdapter#getDTDHandler():::Return the current DTD handler.:::return
ParserAdapter#setContentHandler(ContentHandler):::Set the content handler.:::
ParserAdapter#getContentHandler():::Return the current content handler.:::return
ParserAdapter#setErrorHandler(ErrorHandler):::Set the error handler.:::
ParserAdapter#getErrorHandler():::Return the current error handler.:::return
ParserAdapter#parse(String):::Parse an XML document.:::new->InputSource->parse
ParserAdapter#parse(InputSource):::Parse an XML document.:::if->throw->new->SAXException->setupParser->try->parser->parse->catch->finally
ParserAdapter#setDocumentLocator(Locator):::Adapter implementation method; do not call:::if->contentHandler->setDocumentLocator
ParserAdapter#startDocument():::Adapter implementation method; do not call:::if->contentHandler->startDocument
ParserAdapter#endDocument():::Adapter implementation method; do not call:::if->contentHandler->endDocument
ParserAdapter#startElement(String, AttributeList):::Adapter implementation method; do not call:::exceptions->if->if->attAdapter->setAttributeList->contentHandler->qName->intern->startElement->return->nsSupport->pushContext->length->qAtts->getLength->for->i->atts->clear->for->i->if->for->i->exceptions->size->if->name->processName->contentHandler->startElement
ParserAdapter#endElement(String):::Adapter implementation method; do not call:::if->if->contentHandler->qName->intern->endElement->return->names->processName->if->contentHandler->endElement->ePrefixes->nsSupport->getDeclaredPrefixes->while->ePrefixes->hasMoreElements->prefix->ePrefixes->nextElement->contentHandler->endPrefixMapping->nsSupport->popContext
ParserAdapter#characters(char[], int, int):::Adapter implementation method; do not call:::if->contentHandler->characters
ParserAdapter#ignorableWhitespace(char[], int, int):::Adapter implementation method; do not call:::if->contentHandler->ignorableWhitespace
ParserAdapter#processingInstruction(String, String):::Adapter implementation method; do not call:::if->contentHandler->processingInstruction
ParserAdapter#reportError(String):::Report a non-fatal error.:::if->errorHandler->makeException->error
ParserAdapter.AttributeListAdapter#setAttributeList(AttributeList):::Set the embedded AttributeList:::
ParserAdapter.AttributeListAdapter#getLength():::Return the length of the attribute list.:::return->qAtts->getLength
ParserAdapter.AttributeListAdapter#getURI(int):::Return the Namespace URI of the specified attribute.:::return
ParserAdapter.AttributeListAdapter#getLocalName(int):::Return the local name of the specified attribute.:::return
ParserAdapter.AttributeListAdapter#getQName(int):::Return the qualified (prefixed) name of the specified attribute.:::return->qAtts->getName->intern
ParserAdapter.AttributeListAdapter#getType(int):::Return the type of the specified attribute.:::return->qAtts->getType->intern
ParserAdapter.AttributeListAdapter#getValue(int):::Return the value of the specified attribute.:::return->qAtts->getValue
ParserAdapter.AttributeListAdapter#getIndex(String, String):::Look up an attribute index by Namespace name.:::return
ParserAdapter.AttributeListAdapter#getIndex(String):::Look up an attribute index by qualified (prefixed) name.:::max->atts->getLength->for->i->return
ParserAdapter.AttributeListAdapter#getType(String, String):::Look up the type of an attribute by Namespace name.:::return
ParserAdapter.AttributeListAdapter#getType(String):::Look up the type of an attribute by qualified (prefixed) name.:::return->qAtts->getType->intern
ParserAdapter.AttributeListAdapter#getValue(String, String):::Look up the value of an attribute by Namespace name.:::return
ParserAdapter.AttributeListAdapter#getValue(String):::Look up the value of an attribute by qualified (prefixed) name.:::return->qAtts->getValue
ParserFactory#makeParser():::Create a new SAX parser using the `org.xml.sax.parser' system property:::className->SecuritySupport->getSystemProperty->if->throw->new->NullPointerException->else->return->makeParser
ParserFactory#makeParser(String):::Create a new SAX parser object using the class name provided:::return->NewInstance->SecuritySupport->getClassLoader->newInstance
XMLFilterImpl#setParent(XMLReader):::Set the parent reader:::
XMLFilterImpl#getParent():::Get the parent reader.:::return
XMLFilterImpl#setFeature(String, boolean):::Set the value of a feature:::if->parent->setFeature->else->throw->new->SAXNotRecognizedException
XMLFilterImpl#getFeature(String):::Look up the value of a feature:::if->return->parent->getFeature->else->throw->new->SAXNotRecognizedException
XMLFilterImpl#setProperty(String, Object):::Set the value of a property:::if->parent->setProperty->else->throw->new->SAXNotRecognizedException
XMLFilterImpl#getProperty(String):::Look up the value of a property.:::if->return->parent->getProperty->else->throw->new->SAXNotRecognizedException
XMLFilterImpl#setEntityResolver(EntityResolver):::Set the entity resolver.:::
XMLFilterImpl#getEntityResolver():::Get the current entity resolver.:::return
XMLFilterImpl#setDTDHandler(DTDHandler):::Set the DTD event handler.:::
XMLFilterImpl#getDTDHandler():::Get the current DTD event handler.:::return
XMLFilterImpl#setContentHandler(ContentHandler):::Set the content event handler.:::
XMLFilterImpl#getContentHandler():::Get the content event handler.:::return
XMLFilterImpl#setErrorHandler(ErrorHandler):::Set the error event handler.:::
XMLFilterImpl#getErrorHandler():::Get the current error event handler.:::return
XMLFilterImpl#parse(InputSource):::Parse a document.:::setupParse->parent->parse
XMLFilterImpl#parse(String):::Parse a document.:::new->InputSource->parse
XMLFilterImpl#resolveEntity(String, String):::Filter an external entity resolution.:::if->return->entityResolver->resolveEntity->else->return
XMLFilterImpl#notationDecl(String, String, String):::Filter a notation declaration event.:::if->dtdHandler->notationDecl
XMLFilterImpl#unparsedEntityDecl(String, String, String, String):::Filter an unparsed entity declaration event.:::if->dtdHandler->unparsedEntityDecl
XMLFilterImpl#setDocumentLocator(Locator):::Filter a new document locator event.:::if->contentHandler->setDocumentLocator
XMLFilterImpl#startDocument():::Filter a start document event.:::if->contentHandler->startDocument
XMLFilterImpl#endDocument():::Filter an end document event.:::if->contentHandler->endDocument
XMLFilterImpl#startPrefixMapping(String, String):::Filter a start Namespace prefix mapping event.:::if->contentHandler->startPrefixMapping
XMLFilterImpl#endPrefixMapping(String):::Filter an end Namespace prefix mapping event.:::if->contentHandler->endPrefixMapping
XMLFilterImpl#startElement(String, String, String, Attributes):::Filter a start element event.:::if->contentHandler->startElement
XMLFilterImpl#endElement(String, String, String):::Filter an end element event.:::if->contentHandler->endElement
XMLFilterImpl#characters(char[], int, int):::Filter a character data event.:::if->contentHandler->characters
XMLFilterImpl#ignorableWhitespace(char[], int, int):::Filter an ignorable whitespace event.:::if->contentHandler->ignorableWhitespace
XMLFilterImpl#processingInstruction(String, String):::Filter a processing instruction event.:::if->contentHandler->processingInstruction
XMLFilterImpl#skippedEntity(String):::Filter a skipped entity event.:::if->contentHandler->skippedEntity
XMLFilterImpl#warning(SAXParseException):::Filter a warning event.:::if->errorHandler->warning
XMLFilterImpl#error(SAXParseException):::Filter an error event.:::if->errorHandler->error
XMLFilterImpl#fatalError(SAXParseException):::Filter a fatal error event.:::if->errorHandler->fatalError
XMLReaderAdapter#setLocale(Locale):::Set the locale for error reporting:::throw->new->SAXNotSupportedException
XMLReaderAdapter#setEntityResolver(EntityResolver):::Register the entity resolver.:::xmlReader->setEntityResolver
XMLReaderAdapter#setDTDHandler(DTDHandler):::Register the DTD event handler.:::xmlReader->setDTDHandler
XMLReaderAdapter#setDocumentHandler(DocumentHandler):::Register the SAX1 document event handler:::
XMLReaderAdapter#setErrorHandler(ErrorHandler):::Register the error event handler.:::xmlReader->setErrorHandler
XMLReaderAdapter#parse(String):::Parse the document:::new->InputSource->parse
XMLReaderAdapter#parse(InputSource):::Parse the document:::setupXMLReader->xmlReader->parse
XMLReaderAdapter#setDocumentLocator(Locator):::Set a document locator.:::if->documentHandler->setDocumentLocator
XMLReaderAdapter#startDocument():::Start document event.:::if->documentHandler->startDocument
XMLReaderAdapter#endDocument():::End document event.:::if->documentHandler->endDocument
XMLReaderAdapter#startPrefixMapping(String, String):::Adapt a SAX2 start prefix mapping event.:::
XMLReaderAdapter#endPrefixMapping(String):::Adapt a SAX2 end prefix mapping event.:::
XMLReaderAdapter#startElement(String, String, String, Attributes):::Adapt a SAX2 start element event.:::if->qAtts->setAttributes->documentHandler->startElement
XMLReaderAdapter#endElement(String, String, String):::Adapt a SAX2 end element event.:::if->documentHandler->endElement
XMLReaderAdapter#characters(char[], int, int):::Adapt a SAX2 characters event.:::if->documentHandler->characters
XMLReaderAdapter#ignorableWhitespace(char[], int, int):::Adapt a SAX2 ignorable whitespace event.:::if->documentHandler->ignorableWhitespace
XMLReaderAdapter#processingInstruction(String, String):::Adapt a SAX2 processing instruction event.:::if->documentHandler->processingInstruction
XMLReaderAdapter#skippedEntity(String):::Adapt a SAX2 skipped entity event.:::
XMLReaderAdapter.AttributesAdapter#setAttributes(Attributes):::Set the embedded Attributes object.:::
XMLReaderAdapter.AttributesAdapter#getLength():::Return the number of attributes.:::return->attributes->getLength
XMLReaderAdapter.AttributesAdapter#getName(int):::Return the qualified (prefixed) name of an attribute by position.:::return->attributes->getQName
XMLReaderAdapter.AttributesAdapter#getType(int):::Return the type of an attribute by position.:::return->attributes->getType
XMLReaderAdapter.AttributesAdapter#getValue(int):::Return the value of an attribute by position.:::return->attributes->getValue
XMLReaderAdapter.AttributesAdapter#getType(String):::Return the type of an attribute by qualified (prefixed) name.:::return->attributes->getType
XMLReaderAdapter.AttributesAdapter#getValue(String):::Return the value of an attribute by qualified (prefixed) name.:::return->attributes->getValue
XMLReaderFactory#createXMLReader():::Obtains a new instance of a org.xml.sax.XMLReader:::className->cl->SecuritySupport->getClassLoader->try->SecuritySupport->getSystemProperty->catch->finally->if->provider->findServiceProvider->if->return->if->jarLookup->if->return->new->com.sun.org.apache.xerces.internal.parsers.SAXParser->return->loadClass
XMLReaderFactory#createXMLReader(String):::Attempt to create an XML reader from a class name:::return->SecuritySupport->getClassLoader->loadClass

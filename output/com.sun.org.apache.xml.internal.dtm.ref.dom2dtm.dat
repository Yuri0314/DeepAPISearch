DOM2DTM#addNode(Node, int, int, int):::Construct the node map from the node.:::nodeIndex->m_nodes->size->if->m_dtmIdent->size->try->if->throw->new->ClassCastException->mgrD->id->mgrD->getFirstFreeDTMID->mgrD->addDTM->m_dtmIdent->addElement->catch->XMLMessages->createXMLMessage->error->finally->type->if->node->getNodeType->else->if->name->node->getNodeName->if->name->startsWith->name->equals->m_nodes->add->m_firstch->setElementAt->m_nextsib->setElementAt->m_prevsib->setElementAt->m_parent->setElementAt->if->if->m_firstch->elementAt->m_firstch->setElementAt->nsURI->node->getNamespaceURI->localName->node->getNodeName->node->getLocalName->if->node->getNodeName->exnt->if->node->getLocalName->expandedNameID->exnt->getExpandedTypeID->exnt->getExpandedTypeID->m_exptype->setElementAt->indexNode->if->m_nextsib->setElementAt->if->declareNamespaceInContext->return
DOM2DTM#getNumberOfNodes():::Get the number of nodes that have been added.:::return->m_nodes->size
DOM2DTM#nextNode():::This method iterates to the next node that will be added to the table:::if->return->pos->next->nexttype->do->if->pos->hasChildNodes->pos->getFirstChild->if->next->getNodeType->next->getNextSibling->if->pos->getNodeType->if->wsv->m_wsfilter->makeNodeHandle->getShouldStripSpace->shouldStrip->getShouldStripWhitespace->pushShouldStripWhitespace->else->if->if->m_firstch->elementAt->m_firstch->setElementAt->while->pos->getNextSibling->if->next->getNodeType->next->getNextSibling->if->break->pos->getParentNode->if->if->println->for->if->pos->getNodeType->if->println->else->popShouldStripWhitespace->if->m_firstch->setElementAt->else->m_nextsib->setElementAt->m_parent->elementAt->if->if->next->getNodeType->if->while->if->m_nextsib->setElementAt->if->println->for->i->m_nodes->size->return->suppressNode->lastTextNode->next->getNodeType->if->getShouldStripWhitespace->n->while->if->n->getNodeType->XMLCharacterRecognizer->n->getNodeValue->isWhiteSpace->logicalNextDOMTextNode->else->if->pos->getNodeName->toLowerCase->equals->if->nextindex->addNode->if->attrIndex->attrs->next->getAttributes->attrsize->attrs->getLength->if->for->i->if->makeNodeHandle->new->DOM2DTMdefaultNamespaceDeclarationNode->addNode->m_firstch->setElementAt->if->m_nextsib->setElementAt->if->return
DOM2DTM#getNode(int):::Return an DOM node for the given node.:::identity->makeNodeIdentity->return->m_nodes->get
DOM2DTM#lookupNode(int):::Get a Node from an identity index:::return->m_nodes->get
DOM2DTM#getNextNodeIdentity(int):::Get the next node identity value in the list, and call the iterator if it hasn't been added yet.:::if->m_nodes->size->if->nextNode->return
DOM2DTM#getHandleOfNode(Node):::Get the handle from a Node:::if->if->m_root->getNodeType->node->getOwnerDocument->m_root->getNodeType->m_root->getOwnerDocument->node->getOwnerDocument->for->cursor->cursor->getNodeType->cursor->getParentNode->getOwnerElement->return
DOM2DTM#getAttributeNode(int, String, String):::Retrieves an attribute node by by qualified name and namespace URI.:::if->type->getNodeType->if->identity->makeNodeIdentity->while->getNextNodeIdentity->_type->if->node->lookupNode->nodeuri->node->getNamespaceURI->if->nodelocalname->node->getLocalName->if->nodeuri->equals->name->equals->return->makeNodeHandle->else->break->return
DOM2DTM#getStringValue(int):::Get the string-value of a node as a String object (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value).:::type->getNodeType->node->getNode->if->buf->StringBufferPool->get->s->try->getNodeData->buf->length->buf->toString->catch->finally->StringBufferPool->free->return->m_xstrf->newstr->else->if->buf->StringBufferPool->get->while->buf->node->getNodeValue->append->logicalNextDOMTextNode->s->buf->length->buf->toString->StringBufferPool->free->return->m_xstrf->newstr->else->return->m_xstrf->node->getNodeValue->newstr
DOM2DTM#isWhitespace(int):::Determine if the string-value of a node is whitespace:::type->getNodeType->node->getNode->if->buf->StringBufferPool->get->while->buf->node->getNodeValue->append->logicalNextDOMTextNode->b->buf->buf->length->isWhitespace->StringBufferPool->free->return->return
DOM2DTM#getNodeData(Node, FastStringBuffer):::Retrieve the text content of a DOM subtree, appending it into a user-supplied FastStringBuffer object:::switch->node->getNodeType->for->child->node->getFirstChild->child->getNextSibling->break->buf->node->getNodeValue->append->break->break->break
DOM2DTM#getNodeName(int):::Given a node handle, return its DOM-style node name:::node->getNode->return->node->getNodeName
DOM2DTM#getNodeNameX(int):::Given a node handle, return the XPath node name:::name->type->getNodeType->switch->node->getNode->node->getNodeName->if->name->startsWith->QName->getLocalPart->else->if->name->equals->break->node->getNode->node->getNodeName->break->return
DOM2DTM#getLocalName(int):::Given a node handle, return its XPath-style localname:::if->id->makeNodeIdentity->if->return->newnode->m_nodes->get->newname->newnode->getLocalName->if->qname->newnode->getNodeName->if->qname->charAt->else->index->qname->indexOf->qname->substring->return->else->name->type->getNodeType->switch->node->getNode->node->getLocalName->if->qname->node->getNodeName->index->qname->indexOf->qname->substring->break->return
DOM2DTM#getPrefix(int):::Given a namespace handle, return the prefix that the namespace decl is mapping:::prefix->type->getNodeType->switch->node->getNode->qname->node->getNodeName->index->qname->indexOf->qname->substring->break->node->getNode->qname->node->getNodeName->index->qname->indexOf->qname->substring->break->return
DOM2DTM#getNamespaceURI(int):::Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to.)  %REVIEW% Null or ""? -sb:::if->id->makeNodeIdentity->if->return->node->m_nodes->get->return->node->getNamespaceURI->else->nsuri->type->getNodeType->switch->node->getNode->node->getNamespaceURI->break->return
DOM2DTM#getNodeValue(int):::Given a node handle, return its node value:::type->makeNodeIdentity->_exptype->getNodeType->if->return->getNode->getNodeValue->node->getNode->n->logicalNextDOMTextNode->if->return->node->getNodeValue->buf->StringBufferPool->get->buf->node->getNodeValue->append->while->buf->n->getNodeValue->append->logicalNextDOMTextNode->s->buf->length->buf->toString->StringBufferPool->free->return
DOM2DTM#getDocumentTypeDeclarationSystemIdentifier():::  A document type declaration information item has the following properties:      1:::doc->if->m_root->getNodeType->else->m_root->getOwnerDocument->if->dtd->doc->getDoctype->if->return->dtd->getSystemId->return
DOM2DTM#getDocumentTypeDeclarationPublicIdentifier():::Return the public identifier of the external subset, normalized as described in 4.2.2 External Entities [XML]:::doc->if->m_root->getNodeType->else->m_root->getOwnerDocument->if->dtd->doc->getDoctype->if->return->dtd->getPublicId->return
DOM2DTM#getElementById(String):::Returns the Element whose ID is given by elementId:::doc->m_root->getNodeType->m_root->getOwnerDocument->if->elem->doc->getElementById->if->elemHandle->getHandleFromNode->if->identity->m_nodes->size->while->getNextNodeIdentity->node->getNode->if->getHandleFromNode->break->return->return
DOM2DTM#getUnparsedEntityURI(String):::The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3.3 Unparsed Entities]):::url->doc->m_root->getNodeType->m_root->getOwnerDocument->if->doctype->doc->getDoctype->if->entities->doctype->getEntities->if->return->entity->entities->getNamedItem->if->return->notationName->entity->getNotationName->if->entity->getSystemId->if->entity->getPublicId->else->return
DOM2DTM#isAttributeSpecified(int):::    5:::type->getNodeType->if->attr->getNode->return->attr->getSpecified->return
DOM2DTM#setIncrementalSAXSource(IncrementalSAXSource):::Bind an IncrementalSAXSource to this DTM:::
DOM2DTM#getContentHandler():::getContentHandler returns "our SAX builder" -- the thing that someone else should send SAX events to in order to extend this DTM model.:::return
DOM2DTM#getLexicalHandler():::Return this DTM's lexical handler:::return
DOM2DTM#getEntityResolver():::Return this DTM's EntityResolver.:::return
DOM2DTM#getDTDHandler():::Return this DTM's DTDHandler.:::return
DOM2DTM#getErrorHandler():::Return this DTM's ErrorHandler.:::return
DOM2DTM#getDeclHandler():::Return this DTM's DeclHandler.:::return
DOM2DTM#dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean):::Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value):::if->str->getStringValue->str->fixWhiteSpace->str->dispatchCharactersEvents->else->type->getNodeType->node->getNode->dispatchNodeData->if->while->logicalNextDOMTextNode->dispatchNodeData
DOM2DTM#dispatchNodeData(Node, org.xml.sax.ContentHandler, int):::Retrieve the text content of a DOM subtree, appending it into a user-supplied FastStringBuffer object:::switch->node->getNodeType->for->child->node->getFirstChild->child->getNextSibling->break->if->break->str->node->getNodeValue->if->characters->else->ch->str->toCharArray->str->length->characters->break->break
DOM2DTM#dispatchToEvents(int, org.xml.sax.ContentHandler):::Directly create SAX parser events from a subtree.:::treeWalker->prevCH->treeWalker->getContentHandler->if->new->TreeWalker->treeWalker->setContentHandler->try->node->getNode->treeWalker->traverseFragment->catch->finally->treeWalker->setContentHandler
DOM2DTM#setProperty(String, Object):::For the moment all the run time properties are ignored by this class.:::
DOM2DTM#getSourceLocatorFor(int):::No source information is available for DOM2DTM, so return null here.:::return
DOM2DTMdefaultNamespaceDeclarationNode#getHandleOfNode():::Non-DOM method, part of the temporary kluge %REVIEW% This would be a pruning problem, but since it will always be added to the root element and we prune on elements, we shouldn't have to worry.:::return
DOM2DTMdefaultNamespaceDeclarationNode#setUserData(String, Object, UserDataHandler):::Associate an object to a key on this node:::return->getOwnerDocument->setUserData
DOM2DTMdefaultNamespaceDeclarationNode#getUserData(String):::Retrieves the object associated to a key on a this node:::return->getOwnerDocument->getUserData
DOM2DTMdefaultNamespaceDeclarationNode#getFeature(String, String)::: This method returns a specialized object which implements the specialized APIs of the specified feature and version:::return->isSupported
DOM2DTMdefaultNamespaceDeclarationNode#isEqualNode(Node):::Tests whether two nodes are equal:::if->return->if->arg->getNodeType->getNodeType->return->if->getNodeName->if->arg->getNodeName->return->else->if->getNodeName->arg->getNodeName->equals->return->if->getLocalName->if->arg->getLocalName->return->else->if->getLocalName->arg->getLocalName->equals->return->if->getNamespaceURI->if->arg->getNamespaceURI->return->else->if->getNamespaceURI->arg->getNamespaceURI->equals->return->if->getPrefix->if->arg->getPrefix->return->else->if->getPrefix->arg->getPrefix->equals->return->if->getNodeValue->if->arg->getNodeValue->return->else->if->getNodeValue->arg->getNodeValue->equals->return->return
DOM2DTMdefaultNamespaceDeclarationNode#lookupNamespaceURI(String):::DOM Level 3 - Experimental: Look up the namespace URI associated to the given prefix, starting from this node:::type->this->getNodeType->switch->namespace->this->getNamespaceURI->prefix->this->getPrefix->if->if->return->else->if->prefix->equals->return->if->this->hasAttributes->map->this->getAttributes->length->map->getLength->for->i->return->return->if->this->getOwnerElement->getNodeType->return->getOwnerElement->lookupNamespaceURI->return->return
DOM2DTMdefaultNamespaceDeclarationNode#isDefaultNamespace(String)::: DOM Level 3: Experimental  This method checks if the specified namespaceURI is the  default namespace or not.:::return
DOM2DTMdefaultNamespaceDeclarationNode#lookupPrefix(String):::DOM Level 3 - Experimental: Look up the prefix associated to the given namespace URI, starting from this node.:::if->return->type->this->getNodeType->switch->return->if->this->getOwnerElement->getNodeType->return->getOwnerElement->lookupPrefix->return->return
DOM2DTMdefaultNamespaceDeclarationNode#isSameNode(Node):::Returns whether this node is the same node as the given one:::return
DOM2DTMdefaultNamespaceDeclarationNode#setTextContent(String):::This attribute returns the text content of this node and its descendants:::setNodeValue
DOM2DTMdefaultNamespaceDeclarationNode#getTextContent():::This attribute returns the text content of this node and its descendants:::return->getNodeValue
DOM2DTMdefaultNamespaceDeclarationNode#compareDocumentPosition(Node):::Compares a node with this node with regard to their position in the document.:::return
DOM2DTMdefaultNamespaceDeclarationNode#getBaseURI():::The absolute base URI of this node or null if undefined:::return

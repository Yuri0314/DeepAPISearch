Temporal#isSupported(TemporalUnit):::Checks if the specified unit is supported:::
Temporal#with(TemporalAdjuster):::Returns an adjusted object of the same type as this object with the adjustment made:::adjuster.adjustInto
Temporal#with(TemporalField, long):::Returns an object of the same type as this object with the specified field altered:::
Temporal#plus(TemporalAmount):::Returns an object of the same type as this object with an amount added:::amount.addTo
Temporal#plus(long, TemporalUnit):::Returns an object of the same type as this object with the specified period added:::
Temporal#minus(TemporalAmount):::Returns an object of the same type as this object with an amount subtracted:::amount.subtractFrom
Temporal#minus(long, TemporalUnit):::Returns an object of the same type as this object with the specified period subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
Temporal#until(Temporal, TemporalUnit):::Calculates the amount of time until another temporal in terms of the specified unit:::
TemporalAccessor#isSupported(TemporalField):::Checks if the specified field is supported:::
TemporalAccessor#range(TemporalField):::Gets the range of valid values for the specified field:::this.isSupported->field.range->Objects.requireNonNull->field.rangeRefinedBy
TemporalAccessor#get(TemporalField):::Gets the value of the specified field as an int:::this.range->range.isIntValue->this.getLong->range.isValidValue
TemporalAccessor#getLong(TemporalField):::Gets the value of the specified field as a long:::
TemporalAccessor#query(TemporalQuery):::Queries this date-time:::TemporalQueries.zoneId->TemporalQueries.chronology->TemporalQueries.precision->query.queryFrom
TemporalAdjuster#adjustInto(Temporal):::Adjusts the specified temporal object:::
TemporalAdjusters#ofDateAdjuster(UnaryOperator):::Obtains a TemporalAdjuster that wraps a date adjuster:::Objects.requireNonNull->LocalDate.from->dateBasedAdjuster.apply->temporal.with
TemporalAdjusters#firstDayOfMonth():::Returns the "first day of month" adjuster, which returns a new date set to the first day of the current month:::temporal.with
TemporalAdjusters#lastDayOfMonth():::Returns the "last day of month" adjuster, which returns a new date set to the last day of the current month:::temporal.range(DAY_OF_MONTH).getMaximum->temporal.with
TemporalAdjusters#firstDayOfNextMonth():::Returns the "first day of next month" adjuster, which returns a new date set to the first day of the next month:::temporal.with(DAY_OF_MONTH, 1).plus
TemporalAdjusters#firstDayOfYear():::Returns the "first day of year" adjuster, which returns a new date set to the first day of the current year:::temporal.with
TemporalAdjusters#lastDayOfYear():::Returns the "last day of year" adjuster, which returns a new date set to the last day of the current year:::temporal.range(DAY_OF_YEAR).getMaximum->temporal.with
TemporalAdjusters#firstDayOfNextYear():::Returns the "first day of next year" adjuster, which returns a new date set to the first day of the next year:::temporal.with(DAY_OF_YEAR, 1).plus
TemporalAdjusters#firstInMonth(DayOfWeek):::Returns the first in month adjuster, which returns a new date in the same month with the first matching day-of-week:::TemporalAdjusters.dayOfWeekInMonth
TemporalAdjusters#lastInMonth(DayOfWeek):::Returns the last in month adjuster, which returns a new date in the same month with the last matching day-of-week:::TemporalAdjusters.dayOfWeekInMonth
TemporalAdjusters#dayOfWeekInMonth(int, DayOfWeek):::Returns the day-of-week in month adjuster, which returns a new date with the ordinal day-of-week based on the month:::Objects.requireNonNull->dayOfWeek.getValue->temporal.range(DAY_OF_MONTH).getMaximum->temporal.with->temp.get->temp.plus->temporal.with->temp.get->temp.plus
TemporalAdjusters#next(DayOfWeek):::Returns the next day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted:::dayOfWeek.getValue->temporal.get->temporal.plus
TemporalAdjusters#nextOrSame(DayOfWeek):::Returns the next-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week after the date being adjusted unless it is already on that day in which case the same object is returned:::dayOfWeek.getValue->temporal.get->temporal.plus
TemporalAdjusters#previous(DayOfWeek):::Returns the previous day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted:::dayOfWeek.getValue->temporal.get->temporal.minus
TemporalAdjusters#previousOrSame(DayOfWeek):::Returns the previous-or-same day-of-week adjuster, which adjusts the date to the first occurrence of the specified day-of-week before the date being adjusted unless it is already on that day in which case the same object is returned:::dayOfWeek.getValue->temporal.get->temporal.minus
TemporalAmount#get(TemporalUnit):::Returns the value of the requested unit:::
TemporalAmount#getUnits():::Returns the list of units uniquely defining the value of this TemporalAmount:::
TemporalAmount#addTo(Temporal):::Adds to the specified temporal object:::
TemporalAmount#subtractFrom(Temporal):::Subtracts this object from the specified temporal object:::
TemporalField#getDisplayName(Locale):::Gets the display name for the field in the requested locale:::Objects.requireNonNull->this.toString
TemporalField#getBaseUnit():::Gets the unit that the field is measured in:::
TemporalField#getRangeUnit():::Gets the range that the field is bound by:::
TemporalField#range():::Gets the range of valid values for the field:::
TemporalField#isDateBased():::Checks if this field represents a component of a date:::
TemporalField#isTimeBased():::Checks if this field represents a component of a time:::
TemporalField#isSupportedBy(TemporalAccessor):::Checks if this field is supported by the temporal object:::
TemporalField#rangeRefinedBy(TemporalAccessor):::Get the range of valid values for this field using the temporal object to refine the result:::
TemporalField#getFrom(TemporalAccessor):::Gets the value of this field from the specified temporal object:::
TemporalField#adjustInto(R, long):::Returns a copy of the specified temporal object with the value of this field set:::
TemporalField#resolve(Map, TemporalAccessor, ResolverStyle):::Resolves this field to provide a simpler alternative or a date:::
TemporalField#toString():::Gets a descriptive name for the field:::
TemporalQueries#zoneId():::A strict query for the ZoneId:::
TemporalQueries#chronology():::A query for the Chronology:::
TemporalQueries#precision():::A query for the smallest supported unit:::
TemporalQueries#zone():::A lenient query for the ZoneId, falling back to the ZoneOffset:::
TemporalQueries#offset():::A query for ZoneOffset returning null if not found:::
TemporalQueries#localDate():::A query for LocalDate returning null if not found:::
TemporalQueries#localTime():::A query for LocalTime returning null if not found:::
TemporalQuery#queryFrom(TemporalAccessor):::Queries the specified temporal object:::
TemporalUnit#getDuration():::Gets the duration of this unit, which may be an estimate:::
TemporalUnit#isDurationEstimated():::Checks if the duration of the unit is an estimate:::
TemporalUnit#isDateBased():::Checks if this unit represents a component of a date:::
TemporalUnit#isTimeBased():::Checks if this unit represents a component of a time:::
TemporalUnit#isSupportedBy(Temporal):::Checks if this unit is supported by the specified temporal object:::this.isTimeBased->this.isDateBased->temporal.plus->temporal.plus
TemporalUnit#addTo(R, long):::Returns a copy of the specified temporal object with the specified period added:::
TemporalUnit#between(Temporal, Temporal):::Calculates the amount of time between two temporal objects:::
TemporalUnit#toString():::Gets a descriptive name for the unit:::
ValueRange#of(long, long):::Obtains a fixed value range:::
ValueRange#of(long, long, long):::Obtains a variable value range:::this.of
ValueRange#of(long, long, long, long):::Obtains a fully variable value range:::
ValueRange#isFixed():::Is the value range fixed and fully known:::
ValueRange#getMinimum():::Gets the minimum value that the field can take:::
ValueRange#getLargestMinimum():::Gets the largest possible minimum value that the field can take:::
ValueRange#getSmallestMaximum():::Gets the smallest possible maximum value that the field can take:::
ValueRange#getMaximum():::Gets the maximum value that the field can take:::
ValueRange#isIntValue():::Checks if all values in the range fit in an int:::this.getMinimum->this.getMaximum
ValueRange#isValidValue(long):::Checks if the value is within the valid range:::this.getMinimum->this.getMaximum
ValueRange#isValidIntValue(long):::Checks if the value is within the valid range and that all values in the range fit in an int:::this.isIntValue->this.isValidValue
ValueRange#checkValidValue(long, TemporalField):::Checks that the specified value is valid:::this.isValidValue->this.genInvalidFieldMessage
ValueRange#checkValidIntValue(long, TemporalField):::Checks that the specified value is valid and fits in an int:::this.isValidIntValue->this.genInvalidFieldMessage
ValueRange#equals(Object):::Checks if this range is equal to another range:::
ValueRange#hashCode():::A hash code for this range.:::
ValueRange#toString():::Outputs this range as a String:::buf.append->buf.append('/').append->buf.append(" - ").append->buf.append('/').append->buf.toString
WeekFields#of(Locale):::Obtains an instance of WeekFields appropriate for a locale:::Objects.requireNonNull->CalendarDataUtility.retrieveFirstDayOfWeek->DayOfWeek.SUNDAY.plus->CalendarDataUtility.retrieveMinimalDaysInFirstWeek->WeekFields.of
WeekFields#of(DayOfWeek, int):::Obtains an instance of WeekFields from the first day-of-week and minimal days:::firstDayOfWeek.toString->CACHE.get->CACHE.putIfAbsent->CACHE.get
WeekFields#getFirstDayOfWeek():::Gets the first day-of-week:::
WeekFields#getMinimalDaysInFirstWeek():::Gets the minimal number of days in the first week:::
WeekFields#dayOfWeek():::Returns a field to access the day of week based on this WeekFields:::
WeekFields#weekOfMonth():::Returns a field to access the week of month based on this WeekFields:::
WeekFields#weekOfYear():::Returns a field to access the week of year based on this WeekFields:::
WeekFields#weekOfWeekBasedYear():::Returns a field to access the week of a week-based-year based on this WeekFields:::
WeekFields#weekBasedYear():::Returns a field to access the year of a week-based-year based on this WeekFields:::
WeekFields#equals(Object):::Checks if this WeekFields is equal to the specified object:::this.hashCode->object.hashCode
WeekFields#hashCode():::A hash code for this WeekFields.:::firstDayOfWeek.ordinal
WeekFields#toString():::A string representation of this WeekFields instance.:::
WeekFields.ComputedDayOfField#ofDayOfWeekField(WeekFields):::Returns a field to access the day of week, computed based on a WeekFields:::
WeekFields.ComputedDayOfField#ofWeekOfMonthField(WeekFields):::Returns a field to access the week of month, computed based on a WeekFields.:::
WeekFields.ComputedDayOfField#ofWeekOfYearField(WeekFields):::Returns a field to access the week of year, computed based on a WeekFields.:::
WeekFields.ComputedDayOfField#ofWeekOfWeekBasedYearField(WeekFields):::Returns a field to access the week of week-based-year, computed based on a WeekFields.:::
WeekFields.ComputedDayOfField#ofWeekBasedYearField(WeekFields):::Returns a field to access the week of week-based-year, computed based on a WeekFields.:::ChronoField.YEAR.range

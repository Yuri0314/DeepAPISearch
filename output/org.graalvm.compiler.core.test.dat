AllocSpy#isEnabled()::: alloc spy is enabled:::return
AllocSpy#prop(String)::: alloc spy prop:::return->getSimpleName
AllocSpy#open(Object)::: alloc spy open:::if->return->new->AllocSpy->return
AllocSpy#close()::: alloc spy close:::current->set->ps->ps->println->if->print->if->print
AllocSpy#printLine(PrintStream, char, int)::: alloc spy print line:::charArr->new->charArr->Arrays->fill->printStream->new->String->printf
AllocSpy#print(PrintStream, Map, String, int, int, int)::: alloc spy print:::if->map->isEmpty->return->list->map->values->new->ArrayList<>->Collections->sort->total->foreach->cv->getCount->ps->list->size->printf->max->list->get->getCount->lineSize->printLine->formatString->for->i->list->size->printLine
AllocSpy#bytesPerGraalContext(String)::: alloc spy bytes per graal context:::return->getCounter
AllocSpy#instancesPerGraalContext(String)::: alloc spy instances per graal context:::return->getCounter
AllocSpy#getCounter(String, Map)::: alloc spy get counter:::count->map->get->if->new->CountedValue->map->put->return
AllocSpy#excludeFrame(String)::: alloc spy exclude frame:::foreach->if->className->startsWith->return->return
AllocSpy.GraalContextSampler#sampleAllocation(int, String, Object, long)::: graal context sampler sample allocation:::scope->current->get->if->sb->new->StringBuilder->t->new->Throwable->remainingGraalFrames->foreach->t->getStackTrace->if->break->className->e->getClassName->isGraalFrame->className->contains->if->sb->length->sb->append->append->else->if->excludeFrame->sb->append->append->if->sb->append->append->append->sb->append->append->if->context->sb->toString->if->scope->bytesPerGraalContext->add->if->scope->instancesPerGraalContext->inc
AllocSpy.GraalContextSampler#append(StringBuilder, StackTraceElement)::: graal context sampler append:::className->e->getClassName->period->className->lastIndexOf->if->sb->className->length->append->else->sb->append->sb->append->e->getMethodName->append->if->e->isNativeMethod->sb->append->else->if->e->getFileName->e->getLineNumber->sb->append->e->getFileName->append->append->e->getLineNumber->append->append->else->sb->append->return
AllocSpy.CountedValue#compareTo(CountedValue)::: counted value compare to:::if->return->else->if->return->return
AllocSpy.CountedValue#toString()::: counted value to string:::return
AllocSpy.CountedValue#inc()::: counted value inc:::
AllocSpy.CountedValue#add(int)::: counted value add:::
AllocSpy.CountedValue#getCount()::: counted value get count:::return
AllocSpy.CountedValue#getValue()::: counted value get value:::return
ArrayLengthProviderTest#test0Snippet(ArrayList, boolean)::: array length provider test test0 snippet:::while->array->toArray->if->return->if->if->return->return
ArrayLengthProviderTest#test1Snippet(ArrayList, boolean, boolean)::: array length provider test test1 snippet:::while->array->toArray->if->if->return->return
ArrayLengthProviderTest#toArray(List)::: array length provider test to array:::return->list->size->new->ObjectArr
ArrayLengthProviderTest#test0()::: array length provider test test0:::Arrays->asList->new->ArrayList<>->test
ArrayLengthProviderTest#test1()::: array length provider test test1:::Arrays->asList->new->ArrayList<>->test
BasePhaseBinaryGraphTest#createPhase()::: base phase binary graph test create phase:::new->MyPhase
BasePhaseBinaryGraphTest#createPrinter()::: base phase binary graph test create printer:::DebugContext->disabled->new->BinaryGraphPrinter
BasePhaseBinaryGraphTest#phaseNameIsRecognizedAsType()::: base phase binary graph test phase name is recognized as type:::res->printer->phase->getName->typeName->getName->assertEquals
BasePhaseBinaryGraphTest.MyPhase#run(StructuredGraph, Void)::: my phase run:::
BasePhaseBinaryGraphTest.MyPhase#getName()::: my phase get name:::return->super->getName
BciBlockMappingTest#test()::: bci block mapping test test:::parseEager
BciBlockMappingTest#blackhole(String, String)::: bci block mapping test blackhole:::
BciBlockMappingTest#run()::: bci block mapping test run:::blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole->blackhole
BoxingEliminationTest#referenceSnippet1()::: boxing elimination test reference snippet1:::return
BoxingEliminationTest#referenceSnippet2()::: boxing elimination test reference snippet2:::return
BoxingEliminationTest#boxedShort()::: boxing elimination test boxed short:::return
BoxingEliminationTest#boxedObjectShort()::: boxing elimination test boxed object short:::return
BoxingEliminationTest#boxedObjectInteger()::: boxing elimination test boxed object integer:::return
BoxingEliminationTest#boxedInteger()::: boxing elimination test boxed integer:::return
BoxingEliminationTest#constantBoxedShort()::: boxing elimination test constant boxed short:::return
BoxingEliminationTest#test1()::: boxing elimination test test1:::compareGraphs
BoxingEliminationTest#test1Snippet()::: boxing elimination test test1 snippet:::return->boxedShort
BoxingEliminationTest#test2()::: boxing elimination test test2:::compareGraphs
BoxingEliminationTest#test2Snippet()::: boxing elimination test test2 snippet:::return->boxedObjectShort
BoxingEliminationTest#test3()::: boxing elimination test test3:::compareGraphs
BoxingEliminationTest#test3Snippet()::: boxing elimination test test3 snippet:::b->boxedShort->if->boxedShort->return
BoxingEliminationTest#test4()::: boxing elimination test test4:::compareGraphs
BoxingEliminationTest#test4Snippet()::: boxing elimination test test4 snippet:::return->constantBoxedShort
BoxingEliminationTest#testLoop()::: boxing elimination test test loop:::compareGraphs
BoxingEliminationTest#testLoopSnippet(int, int)::: boxing elimination test test loop snippet:::sum->for->i->return
BoxingEliminationTest#referenceLoopSnippet(int, int)::: boxing elimination test reference loop snippet:::sum->for->i->return
BoxingEliminationTest#testLoop2()::: boxing elimination test test loop2:::compareGraphs
BoxingEliminationTest#testLoop2Snippet(int, Integer)::: boxing elimination test test loop2 snippet:::sum->for->i->return
BoxingEliminationTest#referenceLoop2Snippet(int, Integer)::: boxing elimination test reference loop2 snippet:::sum0->if->else->sum->for->i->return
BoxingEliminationTest#referenceIfSnippet(int)::: boxing elimination test reference if snippet:::result->if->else->return
BoxingEliminationTest#testIf()::: boxing elimination test test if:::compareGraphs
BoxingEliminationTest#testIfSnippet(int)::: boxing elimination test test if snippet:::result->if->boxedInteger->else->boxedObjectInteger->return
BoxingEliminationTest#testComparison()::: boxing elimination test test comparison:::compareGraphs->compareGraphs
BoxingEliminationTest#testComparison1Snippet(int, int)::: boxing elimination test test comparison1 snippet:::return
BoxingEliminationTest#testComparison2Snippet(int, int)::: boxing elimination test test comparison2 snippet:::x->y->return
BoxingEliminationTest#referenceComparisonSnippet(int, int)::: boxing elimination test reference comparison snippet:::return
BoxingEliminationTest#testLateCanonicalization()::: boxing elimination test test late canonicalization:::compareGraphs
BoxingEliminationTest#testLateCanonicalizationSnippet(int)::: boxing elimination test test late canonicalization snippet:::x->y->return
BoxingEliminationTest#referenceLateCanonicalizationSnippet(int)::: boxing elimination test reference late canonicalization snippet:::return
BoxingEliminationTest#materializeReferenceSnippet(int)::: boxing elimination test materialize reference snippet:::return->Integer->valueOf
BoxingEliminationTest#materializeTest1Snippet(int)::: boxing elimination test materialize test1 snippet:::v->if->return->else->return
BoxingEliminationTest#materializeTest1()::: boxing elimination test materialize test1:::test
BoxingEliminationTest#intTest1Snippet()::: boxing elimination test int test1 snippet:::return->Integer->valueOf
BoxingEliminationTest#intTest1()::: boxing elimination test int test1:::result->getResult->Assert->result->isConstant->assertTrue->Assert->result->asJavaConstant->asInt->assertEquals
BoxingEliminationTest#mergeTest1Snippet(boolean, int, int)::: boxing elimination test merge test1 snippet:::v->if->else->return
BoxingEliminationTest#mergeTest1()::: boxing elimination test merge test1:::processMethod
BoxingEliminationTest#equalsTest1Snippet(int, int)::: boxing elimination test equals test1 snippet:::a->b->return
BoxingEliminationTest#equalsTest1()::: boxing elimination test equals test1:::processMethod
BoxingEliminationTest#loopTest1Snippet(int, int)::: boxing elimination test loop test1 snippet:::sum->for->i->return
BoxingEliminationTest#loopTest1()::: boxing elimination test loop test1:::processMethod
BoxingEliminationTest#getResult(String)::: boxing elimination test get result:::processMethod->graph->getNodes->count->assertDeepEquals->return->graph->getNodes->first->result
BoxingEliminationTest#processMethod(String)::: boxing elimination test process method:::parseEager->context->getDefaultHighTierContext->createInliningPhase->apply->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply
BoxingEliminationTest#compareGraphs(String, String)::: boxing elimination test compare graphs:::compareGraphs
BoxingEliminationTest#compareGraphs(String, String, boolean, boolean)::: boxing elimination test compare graphs:::parseEager->context->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->canonicalizer->apply->createInliningPhase->apply->if->new->DefaultLoopPolicies->new->LoopPeelingPhase->apply->new->DeadCodeEliminationPhase->apply->canonicalizer->apply->graph->getOptions->new->PartialEscapePhase->apply->new->DeadCodeEliminationPhase->apply->canonicalizer->apply->referenceGraph->parseEager->createInliningPhase->apply->new->DeadCodeEliminationPhase->apply->new->CanonicalizerPhase->apply->assertEquals
BoxingTest#boxSnippet(int)::: boxing test box snippet:::return
BoxingTest#test0()::: boxing test test0:::test
BoxingTest#test5()::: boxing test test5:::test
BoxingTest#testMinus5()::: boxing test test minus5:::test
BoxingTest#test300()::: boxing test test300:::test
BoxingTest#testMinus300()::: boxing test test minus300:::test
ByteBufferTest.Ret#equals(Object)::: ret equals:::if->return->other->if->return->if->return->if->return->if->return->if->Float->floatToRawIntBits->Float->floatToRawIntBits->return->if->Double->doubleToRawLongBits->Double->doubleToRawLongBits->return->return
ByteBufferTest.Ret#hashCode()::: ret hash code:::return
ByteBufferTest.Ret#toString()::: ret to string:::return->String->Float->floatToRawIntBits->Double->doubleToRawLongBits->format
ByteBufferTest#data()::: byte buffer test data:::ret->new->ArrayList<>->ret->new->ObjectArr->add->ret->new->ObjectArr->add->return
ByteBufferTest#alignedReadSnippet(byte[])::: byte buffer test aligned read snippet:::buffer->ByteBuffer->wrap->order->ret->new->Ret->buffer->get->buffer->get->buffer->getShort->buffer->getInt->buffer->getLong->buffer->getDouble->buffer->getFloat->return
ByteBufferTest#testReadAligned()::: byte buffer test test read aligned:::input->new->byteArr->for->i->test
ByteBufferTest#alignedWriteSnippet(byte, byte, short, int, long, double, float)::: byte buffer test aligned write snippet:::ret->new->byteArr->buffer->ByteBuffer->wrap->order->buffer->put->buffer->put->buffer->putShort->buffer->putInt->buffer->putLong->buffer->putDouble->buffer->putFloat->return
ByteBufferTest#testWriteAligned()::: byte buffer test test write aligned:::test
ByteBufferTest#unalignedReadSnippet(byte[])::: byte buffer test unaligned read snippet:::buffer->ByteBuffer->wrap->order->ret->new->Ret->buffer->get->buffer->getShort->buffer->getInt->buffer->getLong->buffer->getDouble->buffer->getFloat->return
ByteBufferTest#testReadUnaligned()::: byte buffer test test read unaligned:::input->new->byteArr->for->i->test
ByteBufferTest#unalignedWriteSnippet(byte, short, int, long, double, float)::: byte buffer test unaligned write snippet:::ret->new->byteArr->buffer->ByteBuffer->wrap->order->buffer->put->buffer->putShort->buffer->putInt->buffer->putLong->buffer->putDouble->buffer->putFloat->return
ByteBufferTest#testWriteUnaligned()::: byte buffer test test write unaligned:::test
CanonicalizedConversionTest#checkLowTierGraph(StructuredGraph)::: canonicalized conversion test check low tier graph:::reinterpretCount->floatEqualsCount->addCount->foreach->graph->getNodes->if->else->if->else->if->Assert->fail->else->if->Assert->assertEquals->Assert->assertEquals->Assert->assertEquals
CanonicalizedConversionTest#test4()::: canonicalized conversion test test4:::test->test->test
CanonicalizedConversionTest#snippet4(float)::: canonicalized conversion test snippet4:::return->Float->floatToIntBits->Float->floatToIntBits->Float->floatToIntBits
CanonicalizedConversionTest#test5()::: canonicalized conversion test test5:::test->test->test
CanonicalizedConversionTest#snippet5(double)::: canonicalized conversion test snippet5:::return->Double->doubleToLongBits->Double->doubleToLongBits->Double->doubleToLongBits
CheckGraalInvariants#shouldVerifyEquals(ResolvedJavaMethod)::: check graal invariants should verify equals:::if->m->getName->equals->c->m->getDeclaringClass->if->c->getName->equals->c->getName->equals->return->return
CheckGraalInvariants#relativeFileName(String)::: check graal invariants relative file name:::lastFileSeparatorIndex->absolutePath->lastIndexOf->return->absolutePath->substring
CheckGraalInvariants.InvariantsTool#shouldProcess(String)::: invariants tool should process:::if->classpathEntry->endsWith->name->new->File->getName->return->name->contains->name->contains->name->contains->return
CheckGraalInvariants.InvariantsTool#getClassPath()::: invariants tool get class path:::bootclasspath->if->System->getProperty->else->System->getProperty->System->getProperty->return
CheckGraalInvariants.InvariantsTool#shouldLoadClass(String)::: invariants tool should load class:::if->className->equals->className->startsWith->return->if->if->className->equals->return->else->if->className->equals->return->return
CheckGraalInvariants.InvariantsTool#handleClassLoadingException(Throwable)::: invariants tool handle class loading exception:::GraalError->shouldNotReachHere
CheckGraalInvariants.InvariantsTool#handleParsingException(Throwable)::: invariants tool handle parsing exception:::GraalError->shouldNotReachHere
CheckGraalInvariants.InvariantsTool#shouldVerifyFoldableMethods()::: invariants tool should verify foldable methods:::return
CheckGraalInvariants#test()::: check graal invariants test:::assumeManagementLibraryIsLoadable->new->InvariantsTool->runTest
CheckGraalInvariants#runTest(InvariantsTool)::: check graal invariants run test:::rt->Graal->getRequiredCapability->providers->rt->getHostBackend->getProviders->metaAccess->providers->getMetaAccess->graphBuilderSuite->new->PhaseSuite<>->plugins->new->InvocationPlugins->new->Plugins->config->GraphBuilderConfiguration->getDefault->withEagerResolving->withUnresolvedIsError->graphBuilderSuite->new->GraphBuilderPhase->appendPhase->context->new->HighTierContext->Assume->desiredAssertionStatus->assumeTrue->bootclasspath->tool->getClassPath->Assert->assertNotNull->classNames->new->ArrayList<>->foreach->bootclasspath->split->if->tool->shouldProcess->try->zipFile->new->File->new->ZipFile->for->entry->zipFile->entries->entry->hasMoreElements->catch->Assert->ex->toString->fail->finally->Assert->classNames->isEmpty->assertFalse->property->System->getName->getProperty->filters->property->split->options->getInitialOptions->factory->new->CompilerThreadFactory->availableProcessors->Runtime->getRuntime->availableProcessors->executor->new->LinkedBlockingQueue<Runnable>->new->ThreadPoolExecutor->errors->Collections->new->ArrayList<>->synchronizedList->verifiers->new->ArrayList<>->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyUsageWithEquals->add->verifiers->new->VerifyDebugUsage->add->verifiers->new->VerifyCallerSensitiveMethods->add->verifiers->new->VerifyVirtualizableUsage->add->verifiers->new->VerifyUpdateUsages->add->verifiers->new->VerifyBailoutUsage->add->verifiers->new->VerifySystemPropertyUsage->add->verifiers->new->VerifyInstanceOfUsage->add->verifiers->new->VerifyGraphAddUsage->add->verifiers->new->VerifyBufferUsage->add->verifiers->new->VerifyGetOptionsUsage->add->verifiers->new->VerifyUnsafeAccess->add->foldableMethodsVerifier->new->VerifyFoldableMethods->if->tool->shouldVerifyFoldableMethods->verifiers->add->foreach->getDeclaredMethods->method->metaAccess->lookupJavaMethod->try->debug->DebugContext->create->graph->new->StructuredGraph.Builder->method->build->try->s->debug->disableIntercept->ds->debug->scope->graphBuilderSuite->apply->graph->getNodes->filter->PhiNode->inferStamp->forEach->checkGraph->errors->String->format->add->catch->errors->String->printStackTraceToString->format->add->finally->catch->finally->if->errors->isEmpty->classNames->a->compareTo->sort->classes->initializeClasses->foreach->className->c->getName->executor->try->checkClass->catch->errors->String->printStackTraceToString->format->add->finally->execute->type->metaAccess->lookupJavaType->methods->new->ArrayList<>->methods->Arrays->type->getDeclaredMethods->asList->addAll->methods->Arrays->type->getDeclaredConstructors->asList->addAll->clinit->type->getClassInitializer->if->methods->add->foreach->if->Modifier->method->getModifiers->isNative->Modifier->method->getModifiers->isAbstract->else->methodName->method->getName->if->matches->executor->try->debug->DebugContext->create->isSubstitution->method->getAnnotation->method->getAnnotation->graph->new->StructuredGraph.Builder->method->setIsSubstitution->build->try->s->debug->disableIntercept->ds->debug->scope->checkMethod->graphBuilderSuite->apply->graph->getNodes->filter->PhiNode->inferStamp->forEach->checkGraph->catch->errors->e->getMessage->add->try->tool->handleParsingException->catch->errors->String->printStackTraceToString->format->add->finally->finally->catch->finally->execute->executor->shutdown->try->executor->awaitTermination->catch->throw->new->RuntimeException->finally->if->tool->shouldVerifyFoldableMethods->try->foldableMethodsVerifier->finish->catch->errors->e->getMessage->add->finally->if->errors->isEmpty->msg->new->StringBuilder->nl->String->format->foreach->if->msg->length->msg->append->msg->append->Assert->msg->toString->fail
CheckGraalInvariants#isInNativeImage(String)::: check graal invariants is in native image:::return->className->startsWith
CheckGraalInvariants#isGSON(String)::: check graal invariants is n:::return->className->contains
CheckGraalInvariants#initializeClasses(InvariantsTool, List)::: check graal invariants initialize classes:::classes->classNames->size->new->ArrayList<>->foreach->if->tool->shouldLoadClass->continue->try->c->Class->getClassLoader->forName->classes->add->catch->tool->handleClassLoadingException->finally->return
CheckGraalInvariants#checkClass(Class, MetaAccessProvider, List>)::: check graal invariants check class:::if->isAssignableFrom->if->c->getAnnotation->throw->String->c->getName->getSimpleName->format->new->AssertionError->VerifyNodeCosts->verifyNodeClass->foreach->verifier->verifyClass
CheckGraalInvariants#checkMethod(ResolvedJavaMethod)::: check graal invariants check method:::if->method->getAnnotation->parameterAnnotations->method->getParameterAnnotations->for->i
CheckGraalInvariants#checkGraph(List>, HighTierContext, StructuredGraph):::Checks the invariants for a single graph.:::foreach->if->graph->method->shouldVerifyEquals->verifier->apply->else->verifier->apply->if->graph->method->isBridge->BridgeMethodUtils->graph->method->getBridgedMethod
CheckGraalInvariants#matches(String[], String)::: check graal invariants matches:::if->return->foreach->if->s->contains->return->return
CheckGraalInvariants#printStackTraceToString(Throwable)::: check graal invariants print stack trace to string:::sw->new->StringWriter->t->new->PrintWriter->printStackTrace->return->sw->toString
CheckGraalInvariants.BadUsageWithEquals#test01(Value)::: bad usage with equals test01:::return
CheckGraalInvariants.BadUsageWithEquals#test02(Register)::: bad usage with equals test02:::return
CheckGraalInvariants.BadUsageWithEquals#test03(RegisterCategory)::: bad usage with equals test03:::return
CheckGraalInvariants.BadUsageWithEquals#test04(JavaType)::: bad usage with equals test04:::return
CheckGraalInvariants.BadUsageWithEquals#test05(JavaField)::: bad usage with equals test05:::return
CheckGraalInvariants.BadUsageWithEquals#test06(JavaMethod)::: bad usage with equals test06:::return
CheckGraalInvariants.BadUsageWithEquals#test07(LocationIdentity)::: bad usage with equals test07:::return
CheckGraalInvariants.BadUsageWithEquals#test08(LIRKind)::: bad usage with equals test08:::return
CheckGraalInvariants.BadUsageWithEquals#test09(ArithmeticOpTable)::: bad usage with equals test09:::return
CheckGraalInvariants.BadUsageWithEquals#test10(ArithmeticOpTable.Op)::: bad usage with equals test10:::return
CheckGraalInvariants.BadUsageWithEquals#test12(Value)::: bad usage with equals test12:::return
CheckGraalInvariants.BadUsageWithEquals#test13(Register)::: bad usage with equals test13:::return
CheckGraalInvariants.BadUsageWithEquals#test14(RegisterCategory)::: bad usage with equals test14:::return
CheckGraalInvariants.BadUsageWithEquals#test15(JavaType)::: bad usage with equals test15:::return
CheckGraalInvariants.BadUsageWithEquals#test16(JavaField)::: bad usage with equals test16:::return
CheckGraalInvariants.BadUsageWithEquals#test17(JavaMethod)::: bad usage with equals test17:::return
CheckGraalInvariants.BadUsageWithEquals#test18(LocationIdentity)::: bad usage with equals test18:::return
CheckGraalInvariants.BadUsageWithEquals#test19(LIRKind)::: bad usage with equals test19:::return
CheckGraalInvariants.BadUsageWithEquals#test20(ArithmeticOpTable)::: bad usage with equals test20:::return
CheckGraalInvariants.BadUsageWithEquals#test21(ArithmeticOpTable.Op)::: bad usage with equals test21:::return
CommonedConstantsTest#test0Snippet(String[], int)::: commoned constants test test0 snippet:::result->try->Array->get->catch->finally->if->return
CommonedConstantsTest#test0()::: commoned constants test test0:::javaMethod->getResolvedJavaMethod->javaMethod->reprofile->test0Snippet->test->test->test->test
CommonedConstantsTest#noninlineLength(char[])::: commoned constants test noninline length:::return
CommonedConstantsTest#test1Snippet(String):::A constant with usages before and after a non-inlined call.:::if->return->noninlineLength->sChars->s->toCharArray->count->for->i->return
CommonedConstantsTest#test1()::: commoned constants test test1:::getInitialOptions->createSuites->getHighTier->findPhase->remove->new->String->test1Snippet->test->test->test
CommonedConstantsTest#test2Snippet(String):::A constant with only usage in a loop.:::sChars->s->toCharArray->count->for->i->return
CommonedConstantsTest#test2()::: commoned constants test test2:::new->String->test2Snippet->test->test->test
CompareCanonicalizerTest#getCanonicalizedGraph(String)::: compare canonicalizer test get canonicalized graph:::graph->parseEager->new->CanonicalizerPhase->getProviders->apply->return
CompareCanonicalizerTest#getResult(StructuredGraph)::: compare canonicalizer test get result:::graph->start->next->assertTrue->ret->graph->start->next->return->ret->result
CompareCanonicalizerTest#testCanonicalComparison()::: compare canonicalizer test test canonical comparison:::referenceGraph->parseEager->for->i->new->CanonicalizerPhase->getProviders->apply->for->i
CompareCanonicalizerTest#referenceCanonicalComparison(int, int)::: compare canonicalizer test reference canonical comparison:::if->return->else->return
CompareCanonicalizerTest#canonicalCompare1(int, int)::: compare canonicalizer test canonical compare1:::if->return->else->return
CompareCanonicalizerTest#canonicalCompare2(int, int)::: compare canonicalizer test canonical compare2:::if->return->else->return
CompareCanonicalizerTest#canonicalCompare3(int, int)::: compare canonicalizer test canonical compare3:::if->return->else->return
CompareCanonicalizerTest#testIntegerTest()::: compare canonicalizer test test integer test:::for->i
CompareCanonicalizerTest#integerTest1(int, int)::: compare canonicalizer test integer test1:::return
CompareCanonicalizerTest#integerTest2(long, long)::: compare canonicalizer test integer test2:::return
CompareCanonicalizerTest#integerTest3(long, long)::: compare canonicalizer test integer test3:::c->return
CompareCanonicalizerTest#integerTest4(int, int)::: compare canonicalizer test integer test4:::c->return
CompareCanonicalizerTest#testIntegerTestCanonicalization()::: compare canonicalizer test test integer test canonicalization:::result->getCanonicalizedGraph->getResult->result->isConstant->result->asJavaConstant->asLong->assertTrue->getCanonicalizedGraph->getResult->result->isConstant->result->asJavaConstant->asLong->assertTrue->graph->getCanonicalizedGraph->graph->getNodes->count->assertDeepEquals->graph->getNodes->first->result->assertTrue
CompareCanonicalizerTest#integerTestCanonicalization1(boolean)::: compare canonicalizer test integer test canonicalization1:::x->if->return->else->return
CompareCanonicalizerTest#integerTestCanonicalization2(boolean)::: compare canonicalizer test integer test canonicalization2:::x->y->if->return->else->return
CompareCanonicalizerTest#integerTestCanonicalization3(boolean)::: compare canonicalizer test integer test canonicalization3:::x->y->if->return->else->return
CompareCanonicalizerTest2#getCanonicalizedGraph(String)::: compare canonicalizer test2 get canonicalized graph:::graph->getRegularGraph->new->CanonicalizerPhase->getProviders->apply->return
CompareCanonicalizerTest2#getRegularGraph(String)::: compare canonicalizer test2 get regular graph:::graph->parseEager->return
CompareCanonicalizerTest2#test0()::: compare canonicalizer test2 test0:::getCanonicalizedGraph->getRegularGraph->assertEquals
CompareCanonicalizerTest2#integerTestCanonicalization0(int)::: compare canonicalizer test2 integer test canonicalization0:::
CompareCanonicalizerTest2#test1()::: compare canonicalizer test2 test1:::getCanonicalizedGraph->getRegularGraph->assertEquals
CompareCanonicalizerTest2#integerTestCanonicalization1(int)::: compare canonicalizer test2 integer test canonicalization1:::
CompareCanonicalizerTest2#test2()::: compare canonicalizer test2 test2:::getCanonicalizedGraph->getCanonicalizedGraph->assertEquals->getCanonicalizedGraph->getCanonicalizedGraph->assertEquals
CompareCanonicalizerTest2#integerTestCanonicalization2a(Object[])::: compare canonicalizer test2 integer test canonicalization2a:::return
CompareCanonicalizerTest2#integerTestCanonicalization2b(Object[])::: compare canonicalizer test2 integer test canonicalization2b:::return
CompareCanonicalizerTest2#integerTestCanonicalization2Reference(Object[])::: compare canonicalizer test2 integer test canonicalization2 reference:::return
CompareCanonicalizerTest2#test3()::: compare canonicalizer test2 test3:::getCanonicalizedGraph->getCanonicalizedGraph->assertEquals
CompareCanonicalizerTest2#integerTestCanonicalization3(Object[])::: compare canonicalizer test2 integer test canonicalization3:::return
CompareCanonicalizerTest2#integerTestCanonicalization3Reference(Object[])::: compare canonicalizer test2 integer test canonicalization3 reference:::return
CompareCanonicalizerTest3#test00()::: compare canonicalizer test3 test00:::assertCanonicallyEqual
CompareCanonicalizerTest3#integerTestCanonicalization00(char)::: compare canonicalizer test3 integer test canonicalization00:::if->else
CompareCanonicalizerTest3#referenceSnippet00(char)::: compare canonicalizer test3 reference snippet00:::
CompareCanonicalizerTest3#test01()::: compare canonicalizer test3 test01:::assertCanonicallyEqual
CompareCanonicalizerTest3#integerTestCanonicalization01(char)::: compare canonicalizer test3 integer test canonicalization01:::if->Integer->compareUnsigned->else
CompareCanonicalizerTest3#referenceSnippet01(char)::: compare canonicalizer test3 reference snippet01:::if->else
CompareCanonicalizerTest3#test1()::: compare canonicalizer test3 test1:::assertCanonicallyEqual
CompareCanonicalizerTest3#integerTestCanonicalization1(char[])::: compare canonicalizer test3 integer test canonicalization1:::len->if->Integer->compareUnsigned->else
CompareCanonicalizerTest3#referenceSnippet1(char[])::: compare canonicalizer test3 reference snippet1:::len->if->Integer->compareUnsigned->else
CompareCanonicalizerTest3#test2()::: compare canonicalizer test3 test2:::assertCanonicallyEqual
CompareCanonicalizerTest3#integerTestCanonicalization2(int)::: compare canonicalizer test3 integer test canonicalization2:::if->else
CompareCanonicalizerTest3#referenceSnippet2(int)::: compare canonicalizer test3 reference snippet2:::if->else
CompareCanonicalizerTest3#test3()::: compare canonicalizer test3 test3:::assertCanonicallyEqual
CompareCanonicalizerTest3#integerTestCanonicalization3(int)::: compare canonicalizer test3 integer test canonicalization3:::if->else
CompareCanonicalizerTest3#referenceSnippet3(int)::: compare canonicalizer test3 reference snippet3:::if->else
CompareCanonicalizerTest3#test4()::: compare canonicalizer test3 test4:::assertCanonicallyEqual
CompareCanonicalizerTest3#integerTestCanonicalization4(int)::: compare canonicalizer test3 integer test canonicalization4:::if->else
CompareCanonicalizerTest3#referenceSnippet4(int)::: compare canonicalizer test3 reference snippet4:::if->else
CompareCanonicalizerTest3#test5()::: compare canonicalizer test3 test5:::assertCanonicallyEqual
CompareCanonicalizerTest3#integerTestCanonicalization5(int)::: compare canonicalizer test3 integer test canonicalization5:::if->else
CompareCanonicalizerTest3#referenceSnippet5(int)::: compare canonicalizer test3 reference snippet5:::if->else
CompareCanonicalizerTest3#test6()::: compare canonicalizer test3 test6:::assertCanonicallyEqual
CompareCanonicalizerTest3#integerTestCanonicalization6(int)::: compare canonicalizer test3 integer test canonicalization6:::if->else
CompareCanonicalizerTest3#referenceSnippet6(int)::: compare canonicalizer test3 reference snippet6:::if->else
CompareCanonicalizerTest3#test7()::: compare canonicalizer test3 test7:::assertCanonicallyEqual
CompareCanonicalizerTest3#integerTestCanonicalization7(int)::: compare canonicalizer test3 integer test canonicalization7:::if->else
CompareCanonicalizerTest3#referenceSnippet7(int)::: compare canonicalizer test3 reference snippet7:::if->else
CompareCanonicalizerTest3#assertCanonicallyEqual(String, String)::: compare canonicalizer test3 assert canonically equal:::graph->parseEager->context->getProviders->canonicalizer->new->CanonicalizerPhase->canonicalizer->apply->new->GuardLoweringPhase->getProviders->getTargetProvider->graph->getProfilingInfo->new->MidTierContext->apply->new->FrameStateAssignmentPhase->apply->canonicalizer->apply->referenceGraph->parseEager->canonicalizer->apply->new->GuardLoweringPhase->getProviders->getTargetProvider->graph->getProfilingInfo->new->MidTierContext->apply->new->FrameStateAssignmentPhase->apply->canonicalizer->apply->canonicalizer->apply->assertEquals
CompareCanonicalizerTest3#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: compare canonicalizer test3 bytecode parser should inline invoke:::return->createStandardInlineInfo
ConcreteSubtypeTest.AbstractBase#check()::: abstract base check:::
ConcreteSubtypeTest.Subclass#check()::: subclass check:::throw->new->InternalError
ConcreteSubtypeTest.SubSubclass#check()::: sub subclass check:::
ConcreteSubtypeTest#callAbstractType(AbstractBase)::: concrete subtype test call abstract type:::object->check
ConcreteSubtypeTest#testLeafAbstractType():::Test that #callAbstractType gets compiled into an empty method with a ConcreteSubtype assumption on AbstractBase and Subclass:::resolveAndInitialize->resolveAndInitialize->new->ConcreteSubtype->testAssumptionInvalidate
ConditionalEliminationMulTest#snippet01(int)::: conditional elimination mul test snippet01:::if->if->shouldBeOptimizedAway
ConditionalEliminationMulTest#snippet02(int)::: conditional elimination mul test snippet02:::if->if->shouldBeOptimizedAway
ConditionalEliminationMulTest#snippet03(int)::: conditional elimination mul test snippet03:::if->shouldBeOptimizedAway
ConditionalEliminationMulTest#testConditionalEliminated01()::: conditional elimination mul test test conditional eliminated01:::assertOptimized
ConditionalEliminationMulTest#testConditionalEliminated02()::: conditional elimination mul test test conditional eliminated02:::assertOptimized
ConditionalEliminationMulTest#testConditionalEliminated03()::: conditional elimination mul test test conditional eliminated03:::assertOptimized
ConditionalEliminationMulTest#assertOptimized(String)::: conditional elimination mul test assert optimized:::prepareGraph->assertOptimizedAway
ConditionalEliminationMulTest#prepareGraph(String)::: conditional elimination mul test prepare graph:::graph->parseEager->context->getDefaultHighTierContext->new->ConditionalEliminationPhase->apply->c->new->CanonicalizerPhase->c->apply->new->ConditionalEliminationPhase->apply->c->apply->return
ConditionalEliminationPiTest#testSnippet1(int)::: conditional elimination pi test test snippet1:::phi->if->oracle->if->else->return->else->oracle->if->else->return->if->Double->doubleToRawLongBits->Double->doubleToRawLongBits->return->return
ConditionalEliminationPiTest#test1()::: conditional elimination pi test test1:::test
ConditionalEliminationTest1#referenceSnippet(int)::: conditional elimination test1 reference snippet:::if
ConditionalEliminationTest1#test1()::: conditional elimination test1 test1:::testConditionalElimination
ConditionalEliminationTest1#test1Snippet(int)::: conditional elimination test1 test1 snippet:::if->if->if->if->if
ConditionalEliminationTest1#test2()::: conditional elimination test1 test2:::testConditionalElimination
ConditionalEliminationTest1#test2Snippet(int)::: conditional elimination test1 test2 snippet:::if->if->if->if
ConditionalEliminationTest1#test3()::: conditional elimination test1 test3:::testConditionalElimination
ConditionalEliminationTest1#test3Snippet(int)::: conditional elimination test1 test3 snippet:::if->if->if->if->if->if->if->if->else
ConditionalEliminationTest1#test4Snippet(int, int)::: conditional elimination test1 test4 snippet:::if->GraalDirectives->controlFlowAnchor->if
ConditionalEliminationTest1#test4()::: conditional elimination test1 test4:::testConditionalElimination
ConditionalEliminationTest1#test5Snippet(int, int)::: conditional elimination test1 test5 snippet:::if->GraalDirectives->controlFlowAnchor->if->GraalDirectives->controlFlowAnchor->else->GraalDirectives->controlFlowAnchor->if->GraalDirectives->controlFlowAnchor
ConditionalEliminationTest1#test5()::: conditional elimination test1 test5:::testConditionalElimination
ConditionalEliminationTest10#testSnippet1(TestClass)::: conditional elimination test10 test snippet1:::result->if->GraalDirectives->controlFlowAnchor->GraalDirectives->controlFlowAnchor->return
ConditionalEliminationTest10#test1()::: conditional elimination test10 test1:::test
ConditionalEliminationTest10#testSnippet2(TestClass)::: conditional elimination test10 test snippet2:::result->if->GraalDirectives->controlFlowAnchor->else->GraalDirectives->controlFlowAnchor->if->GraalDirectives->controlFlowAnchor->return
ConditionalEliminationTest10#test2()::: conditional elimination test10 test2:::test
ConditionalEliminationTest10#test(String, int)::: conditional elimination test10 test:::graph->parseEager->context->getProviders->new->CanonicalizerPhase->new->LoweringPhase->apply->new->ConditionalEliminationPhase->apply->Assert->graph->getNodes->filter->count->assertEquals
ConditionalEliminationTest11#referenceSnippet(int)::: conditional elimination test11 reference snippet:::if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test1()::: conditional elimination test11 test1:::testConditionalElimination
ConditionalEliminationTest11#test1Snippet(int)::: conditional elimination test11 test1 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test2Snippet(int)::: conditional elimination test11 test2 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test2()::: conditional elimination test11 test2:::testConditionalElimination
ConditionalEliminationTest11#test3Snippet(int)::: conditional elimination test11 test3 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test3()::: conditional elimination test11 test3:::testConditionalElimination
ConditionalEliminationTest11#test4Snippet(int)::: conditional elimination test11 test4 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test4()::: conditional elimination test11 test4:::testConditionalElimination
ConditionalEliminationTest11#test5Snippet(int)::: conditional elimination test11 test5 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->if->return->return
ConditionalEliminationTest11#test5()::: conditional elimination test11 test5:::testConditionalElimination
ConditionalEliminationTest11#test6Snippet(int)::: conditional elimination test11 test6 snippet:::if->GraalDirectives->deoptimize->if->GraalDirectives->deoptimize->return
ConditionalEliminationTest11#reference6Snippet(int)::: conditional elimination test11 reference6 snippet:::if->GraalDirectives->deoptimize->GraalDirectives->deoptimize->return
ConditionalEliminationTest11#test6()::: conditional elimination test11 test6:::testConditionalElimination
ConditionalEliminationTest11#test7Snippet(int)::: conditional elimination test11 test7 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#reference7Snippet(int)::: conditional elimination test11 reference7 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test7()::: conditional elimination test11 test7:::testConditionalElimination
ConditionalEliminationTest11#test8Snippet(int)::: conditional elimination test11 test8 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#reference8Snippet(int)::: conditional elimination test11 reference8 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test8()::: conditional elimination test11 test8:::testConditionalElimination
ConditionalEliminationTest11#test9Snippet(int)::: conditional elimination test11 test9 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#reference9Snippet(int)::: conditional elimination test11 reference9 snippet:::if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test9()::: conditional elimination test11 test9:::testConditionalElimination
ConditionalEliminationTest11.ByteHolder#byteValue()::: byte holder byte value:::return
ConditionalEliminationTest11#test10Snippet(ByteHolder)::: conditional elimination test11 test10 snippet:::v->b->byteValue->a->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#reference10Snippet(ByteHolder)::: conditional elimination test11 reference10 snippet:::v->b->byteValue->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test10()::: conditional elimination test11 test10:::testConditionalElimination
ConditionalEliminationTest11#test11Snippet(ByteHolder)::: conditional elimination test11 test11 snippet:::v->b->byteValue->a->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#reference11Snippet(ByteHolder)::: conditional elimination test11 reference11 snippet:::v->b->byteValue->if->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest11#test11()::: conditional elimination test11 test11:::testConditionalElimination
ConditionalEliminationTest12#referenceMethod(Object)::: conditional elimination test12 reference method:::if->if->return->else->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest12#testMethod(Object)::: conditional elimination test12 test method:::if->if->if->b->if->return->else->GraalDirectives->deoptimizeAndInvalidate->else->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest12#testFloatingGuards()::: conditional elimination test12 test floating guards:::d->new->D->testConditionalElimination
ConditionalEliminationTest13#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: conditional elimination test13 bytecode parser should inline invoke:::return->createStandardInlineInfo
ConditionalEliminationTest13#referenceSnippet1(int)::: conditional elimination test13 reference snippet1:::if->Integer->compareUnsigned->else
ConditionalEliminationTest13#testSnippet1(int)::: conditional elimination test13 test snippet1:::if->Integer->compareUnsigned->else
ConditionalEliminationTest13#referenceSnippet2(int)::: conditional elimination test13 reference snippet2:::if
ConditionalEliminationTest13#testSnippet2(int)::: conditional elimination test13 test snippet2:::if->if
ConditionalEliminationTest13#testSnippet3(int)::: conditional elimination test13 test snippet3:::if->if
ConditionalEliminationTest13#referenceSnippet4(int)::: conditional elimination test13 reference snippet4:::
ConditionalEliminationTest13#testSnippet4(int)::: conditional elimination test13 test snippet4:::if->Integer->compareUnsigned->else
ConditionalEliminationTest13#testSnippet5(int)::: conditional elimination test13 test snippet5:::if->if
ConditionalEliminationTest13#referenceSnippet6(int)::: conditional elimination test13 reference snippet6:::if
ConditionalEliminationTest13#testSnippet6(int)::: conditional elimination test13 test snippet6:::if->if
ConditionalEliminationTest13#testSnippet7(int)::: conditional elimination test13 test snippet7:::if->if
ConditionalEliminationTest13#testSnippet8(int)::: conditional elimination test13 test snippet8:::if->Integer->compareUnsigned->else
ConditionalEliminationTest13#referenceSnippet9(int)::: conditional elimination test13 reference snippet9:::if->Integer->compareUnsigned->else
ConditionalEliminationTest13#testSnippet9(int)::: conditional elimination test13 test snippet9:::if->Integer->compareUnsigned->else
ConditionalEliminationTest13#either(int, int)::: conditional elimination test13 either:::return
ConditionalEliminationTest13#testSnippet10(int)::: conditional elimination test13 test snippet10:::if->Integer->either->compareUnsigned->else
ConditionalEliminationTest13#referenceSnippet11(int)::: conditional elimination test13 reference snippet11:::if->Integer->compareUnsigned
ConditionalEliminationTest13#testSnippet11(int)::: conditional elimination test13 test snippet11:::if->Integer->compareUnsigned->if->Integer->compareUnsigned
ConditionalEliminationTest13#referenceSnippet12(int)::: conditional elimination test13 reference snippet12:::if->Integer->compareUnsigned->else
ConditionalEliminationTest13#testSnippet12(int)::: conditional elimination test13 test snippet12:::if->Integer->compareUnsigned->else
ConditionalEliminationTest13#testSnippet13(int)::: conditional elimination test13 test snippet13:::x->either->if->if->else
ConditionalEliminationTest13#referenceSnippet14(int)::: conditional elimination test13 reference snippet14:::x->either->if->else
ConditionalEliminationTest13#testSnippet14(int)::: conditional elimination test13 test snippet14:::x->either->if->if->else
ConditionalEliminationTest13#test1()::: conditional elimination test13 test1:::testConditionalElimination
ConditionalEliminationTest13#test2()::: conditional elimination test13 test2:::testConditionalElimination
ConditionalEliminationTest13#test3()::: conditional elimination test13 test3:::testConditionalElimination
ConditionalEliminationTest13#test4()::: conditional elimination test13 test4:::testConditionalElimination
ConditionalEliminationTest13#test5()::: conditional elimination test13 test5:::testConditionalElimination
ConditionalEliminationTest13#test6()::: conditional elimination test13 test6:::testConditionalElimination
ConditionalEliminationTest13#test7()::: conditional elimination test13 test7:::testConditionalElimination
ConditionalEliminationTest13#test8()::: conditional elimination test13 test8:::testConditionalElimination
ConditionalEliminationTest13#test9()::: conditional elimination test13 test9:::testConditionalElimination
ConditionalEliminationTest13#test10()::: conditional elimination test13 test10:::testConditionalElimination
ConditionalEliminationTest13#test11()::: conditional elimination test13 test11:::testConditionalElimination
ConditionalEliminationTest13#test12()::: conditional elimination test13 test12:::testConditionalElimination
ConditionalEliminationTest13#test13()::: conditional elimination test13 test13:::testConditionalElimination
ConditionalEliminationTest13#test14()::: conditional elimination test13 test14:::testConditionalElimination
ConditionalEliminationTest13#prepareGraph(StructuredGraph, CanonicalizerPhase, CoreProviders, boolean)::: conditional elimination test13 prepare graph:::super->prepareGraph->graph->clearAllStateAfter->graph->setGuardsStage->debug->graph->getDebug->debug->dump->canonicalizer->apply
ConditionalEliminationTest14#test1Snippet(Object[])::: conditional elimination test14 test1 snippet:::a5->a7->a6->if
ConditionalEliminationTest14#test1()::: conditional elimination test14 test1:::graph->parseEager->canonicalizer->new->CanonicalizerPhase->context->getProviders->new->LoweringPhase->apply->new->FloatingReadPhase->apply->new->IterativeConditionalEliminationPhase->apply->Assert->graph->getNodes->count->assertEquals->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->count->assertEquals->boundsChecks->graph->getNodes->getReason->filter->Assert->boundsChecks->count->assertEquals->condition->boundsChecks->first->getCondition->Assert->getY->ConstantNode->forInt->valueEquals->assertTrue
ConditionalEliminationTest15#checkNodeCount(String, Class, int)::: conditional elimination test15 check node count:::graph->parseEager->canonicalizer->new->CanonicalizerPhase->context->getProviders->new->CanonicalizerPhase->new->LoweringPhase->apply->canonicalizer->apply->new->EarlyReadEliminationPhase->apply->new->IterativeConditionalEliminationPhase->apply->getDebugContext->dump->Assert->graph->getNodes->filter->count->assertEquals
ConditionalEliminationTest15#testRedundantIntegerLessThanNode(int, int[])::: conditional elimination test15 test redundant integer less than node:::while->if->return->return
ConditionalEliminationTest15#testRedundantIntegerLessThanNode2(int, int[])::: conditional elimination test15 test redundant integer less than node2:::while->if->return->return
ConditionalEliminationTest15#testRedundantSignedLessThanNode()::: conditional elimination test15 test redundant signed less than node:::checkNodeCount->checkNodeCount
ConditionalEliminationTest16#resetType()::: conditional elimination test16 reset type:::
ConditionalEliminationTest16#testCastExactInstance(Object)::: conditional elimination test16 test cast exact instance:::if->object->getClass->return->intValue->GraalDirectives->deoptimizeAndInvalidate->return
ConditionalEliminationTest16#checkHighTierGraph(StructuredGraph)::: conditional elimination test16 check high tier graph:::if->foreach->graph->getNodes->filter->if->param->index->newParam->StampPair->StampFactory->TypeReference->getMetaAccess->lookupJavaType->createExactTrusted->object->createSingle->new->ParameterNode->graph->addWithoutUnique->param->replaceAtUsages->param->safeDelete->break->new->CanonicalizerPhase->getDefaultHighTierContext->apply->super->checkHighTierGraph
ConditionalEliminationTest16#checkMidTierGraph(StructuredGraph)::: conditional elimination test16 check mid tier graph:::count->foreach->graph->getNodes->filter->node->getGuard->assertTrue->assertTrue->super->checkMidTierGraph
ConditionalEliminationTest16#test1()::: conditional elimination test16 test1:::method->getResolvedJavaMethod->graph->parseForCompile->compile
ConditionalEliminationTest16.Base#getValue1()::: base get value1:::return
ConditionalEliminationTest16.Base#getBase()::: base get base:::return
ConditionalEliminationTest16.Box#getValue1()::: box get value1:::return
ConditionalEliminationTest16.BiggerBox#getValue2()::: bigger box get value2:::return
ConditionalEliminationTest16#testCastExactTwiceInstance(Base, boolean)::: conditional elimination test16 test cast exact twice instance:::if->GraalDirectives->deoptimizeAndInvalidate->return->total->if->box->if->System->identityHashCode->getValue2->return
ConditionalEliminationTest16#test2()::: conditional elimination test16 test2:::box->new->BiggerBox->method->getResolvedJavaMethod->graph->parseForCompile->compile->test
ConditionalEliminationTest2#search(Entry, String, Entry)::: conditional elimination test2 search:::current->do->while->if->else->next->if->if->equals->return->if->return->while
ConditionalEliminationTest2#testRedundantComparesSnippet(int[])::: conditional elimination test2 test redundant compares snippet:::if->return->return
ConditionalEliminationTest2#testRedundantCompares()::: conditional elimination test2 test redundant compares:::graph->parseEager->canonicalizer->new->CanonicalizerPhase->context->getProviders->new->LoweringPhase->apply->canonicalizer->apply->new->FloatingReadPhase->apply->new->ConditionalEliminationPhase->apply->canonicalizer->apply->graph->getNodes->filter->count->assertDeepEquals
ConditionalEliminationTest2#testInstanceOfCheckCastSnippet(Object)::: conditional elimination test2 test instance of check cast snippet:::if->return->return
ConditionalEliminationTest2#testInstanceOfCheckCastLowered()::: conditional elimination test2 test instance of check cast lowered:::graph->parseEager->canonicalizer->new->CanonicalizerPhase->context->getProviders->new->LoweringPhase->apply->canonicalizer->apply->new->ConditionalEliminationPhase->apply->canonicalizer->apply->graph->getNodes->filter->count->assertDeepEquals
ConditionalEliminationTest2#checkInstanceOfCount(String, int)::: conditional elimination test2 check instance of count:::graph->parseEager->canonicalizer->new->CanonicalizerPhase->context->getProviders->canonicalizer->apply->new->ConditionalEliminationPhase->apply->getDebugContext->dump->canonicalizer->apply->Assert->graph->getNodes->filter->count->assertEquals
ConditionalEliminationTest2#testRedundantInstanceOfClass(Object)::: conditional elimination test2 test redundant instance of class:::if->value->getClass->return->return
ConditionalEliminationTest2#testRedundantInstanceOfArray(Object)::: conditional elimination test2 test redundant instance of array:::if->value->getClass->return->return
ConditionalEliminationTest2#testRedundantInstanceOfPrecise(Object)::: conditional elimination test2 test redundant instance of precise:::if->value->getClass->return->return
ConditionalEliminationTest2#testRedundantInstanceOfImplicitNonNull(Object)::: conditional elimination test2 test redundant instance of implicit non null:::if->value->getClass->return->return
ConditionalEliminationTest2#testRedundantInstanceOf()::: conditional elimination test2 test redundant instance of:::checkInstanceOfCount->checkInstanceOfCount->checkInstanceOfCount->checkInstanceOfCount
ConditionalEliminationTest2#testNonRedundantInstanceOfClass(Object)::: conditional elimination test2 test non redundant instance of class:::if->return->value->getClass->return
ConditionalEliminationTest2#testNonRedundantInstanceOfArray(Object)::: conditional elimination test2 test non redundant instance of array:::if->return->value->getClass->return
ConditionalEliminationTest2#testNonRedundantInstanceOfImplicitNonNull(Object)::: conditional elimination test2 test non redundant instance of implicit non null:::if->return->value->getClass->return
ConditionalEliminationTest2#testNonRedundantInstanceOf()::: conditional elimination test2 test non redundant instance of:::checkInstanceOfCount->checkInstanceOfCount->checkInstanceOfCount
ConditionalEliminationTest3#referenceSnippet(int, int)::: conditional elimination test3 reference snippet:::sum->for->i->return
ConditionalEliminationTest3#test1()::: conditional elimination test3 test1:::testConditionalElimination
ConditionalEliminationTest3#test1Snippet(int, int)::: conditional elimination test3 test1 snippet:::sum->for->i->if->return->return
ConditionalEliminationTest3#test2()::: conditional elimination test3 test2:::testConditionalElimination
ConditionalEliminationTest3#test2Snippet(int, int)::: conditional elimination test3 test2 snippet:::sum->for->i->return
ConditionalEliminationTest4#reference1Snippet(int, int)::: conditional elimination test4 reference1 snippet:::if->return->return
ConditionalEliminationTest4#test1Snippet(int, int)::: conditional elimination test4 test1 snippet:::if->if->return->return
ConditionalEliminationTest4#test1()::: conditional elimination test4 test1:::testConditionalElimination
ConditionalEliminationTest4#reference2Snippet(int, int)::: conditional elimination test4 reference2 snippet:::if->return->return
ConditionalEliminationTest4#test2Snippet(int, int)::: conditional elimination test4 test2 snippet:::if->if->return->return
ConditionalEliminationTest4#test2()::: conditional elimination test4 test2:::testConditionalElimination
ConditionalEliminationTest5#reference1Snippet(Object)::: conditional elimination test5 reference1 snippet:::if
ConditionalEliminationTest5#test1Snippet(Object)::: conditional elimination test5 test1 snippet:::if->if
ConditionalEliminationTest5#test1()::: conditional elimination test5 test1:::testConditionalElimination
ConditionalEliminationTest5#reference2Snippet(A)::: conditional elimination test5 reference2 snippet:::if
ConditionalEliminationTest5#test2Snippet(A)::: conditional elimination test5 test2 snippet:::if->newVal->if
ConditionalEliminationTest5#test2()::: conditional elimination test5 test2:::testConditionalElimination
ConditionalEliminationTest5#reference3Snippet(Object, Object)::: conditional elimination test5 reference3 snippet:::if->proxyA->if
ConditionalEliminationTest5#test3Snippet(Object, Object)::: conditional elimination test5 test3 snippet:::if->proxyA->if->if
ConditionalEliminationTest5#test3()::: conditional elimination test5 test3:::testConditionalElimination
ConditionalEliminationTest5#reference4Snippet(Object)::: conditional elimination test5 reference4 snippet:::if->GraalDirectives->deoptimizeAndInvalidate
ConditionalEliminationTest5#test4Snippet1(Object)::: conditional elimination test5 test4 snippet1:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate
ConditionalEliminationTest5#test4Snippet2(Object)::: conditional elimination test5 test4 snippet2:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate
ConditionalEliminationTest5#test4Snippet3(Object)::: conditional elimination test5 test4 snippet3:::pi->if->GraalDirectives->deoptimizeAndInvalidate
ConditionalEliminationTest5#test4Snippet4(Object)::: conditional elimination test5 test4 snippet4:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate
ConditionalEliminationTest5#test4Snippet5(Object)::: conditional elimination test5 test4 snippet5:::pi->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate
ConditionalEliminationTest5#test4()::: conditional elimination test5 test4:::testConditionalElimination->testConditionalElimination->testConditionalElimination->testConditionalElimination
ConditionalEliminationTest5#test5()::: conditional elimination test5 test5:::testConditionalElimination
ConditionalEliminationTest6#reference1Snippet(Object, B)::: conditional elimination test6 reference1 snippet:::if->return->return
ConditionalEliminationTest6#test1Snippet(Object, B)::: conditional elimination test6 test1 snippet:::if->if->return->else->return->return
ConditionalEliminationTest6#test1()::: conditional elimination test6 test1:::testConditionalElimination
ConditionalEliminationTest6#test2Snippet(Object, B)::: conditional elimination test6 test2 snippet:::if->if->return->else->return->return
ConditionalEliminationTest6#test2()::: conditional elimination test6 test2:::testConditionalElimination
ConditionalEliminationTest6#test3Snippet(Object, B)::: conditional elimination test6 test3 snippet:::if->if->return->else->return->return
ConditionalEliminationTest6#test3()::: conditional elimination test6 test3:::testConditionalElimination
ConditionalEliminationTest7#test1Snippet(int, Object)::: conditional elimination test7 test1 snippet:::sum->for->j->s->return->s->length
ConditionalEliminationTest7#test1()::: conditional elimination test7 test1:::testProxies
ConditionalEliminationTest7#test2Snippet(int, Object)::: conditional elimination test7 test2 snippet:::sum->for->j->s->return->s->length
ConditionalEliminationTest7#test2()::: conditional elimination test7 test2:::testProxies
ConditionalEliminationTest7#test3Snippet(int, Object)::: conditional elimination test7 test3 snippet:::sum->while->while->while->while->while->if->break->s->return->s->length
ConditionalEliminationTest7#test3()::: conditional elimination test7 test3:::testProxies
ConditionalEliminationTest8#test1Snippet(int, Object)::: conditional elimination test8 test1 snippet:::sum->if->return->for->j->return->length
ConditionalEliminationTest8#test1()::: conditional elimination test8 test1:::testProxies
ConditionalEliminationTest9#referenceSnippet(int)::: conditional elimination test9 reference snippet:::if->GraalDirectives->deoptimize->return
ConditionalEliminationTest9#test1()::: conditional elimination test9 test1:::testConditionalElimination
ConditionalEliminationTest9#test1Snippet(int)::: conditional elimination test9 test1 snippet:::if->if->GraalDirectives->deoptimize->if->GraalDirectives->deoptimize->return
ConditionalEliminationTestBase#getDefaultHighTierContext():::These tests assume all code paths in called routines are reachable so disable removal of dead code based on method profiles.:::return->getProviders->getDefaultGraphBuilderSuite->remove->new->HighTierContext
ConditionalEliminationTestBase#testConditionalElimination(String, String)::: conditional elimination test base test conditional elimination:::testConditionalElimination
ConditionalEliminationTestBase#testConditionalElimination(String, String, boolean, boolean)::: conditional elimination test base test conditional elimination:::graph->parseEager->debug->graph->getDebug->debug->dump->context->getProviders->canonicalizer1->new->CanonicalizerPhase->canonicalizer->new->CanonicalizerPhase->try->scope->debug->scope->prepareGraph->new->IterativeConditionalEliminationPhase->apply->canonicalizer->apply->canonicalizer->apply->catch->debug->handle->finally->referenceGraph->parseEager->try->scope->debug->scope->prepareGraph->if->new->ConditionalEliminationPhase->apply->canonicalizer->apply->canonicalizer->apply->catch->debug->handle->finally->assertEquals
ConditionalEliminationTestBase#prepareGraph(StructuredGraph, CanonicalizerPhase, CoreProviders, boolean)::: conditional elimination test base prepare graph:::if->new->ConvertDeoptimizeToGuardPhase->apply->new->LoweringPhase->apply->canonicalizer->apply->canonicalizer->apply->new->ConvertDeoptimizeToGuardPhase->apply
ConditionalEliminationTestBase#testProxies(String, int)::: conditional elimination test base test proxies:::graph->parseEager->context->getProviders->canonicalizer1->new->CanonicalizerPhase->canonicalizer1->disableSimplification->canonicalizer1->apply->canonicalizer->new->CanonicalizerPhase->new->LoweringPhase->apply->canonicalizer->apply->baseProxyCount->graph->getNodes->filter->count->new->ConditionalEliminationPhase->apply->canonicalizer->apply->graph->getOptions->new->SchedulePhase->apply->actualProxiesCreated->graph->getNodes->filter->count->Assert->assertEquals
ConditionalNodeTest#test0()::: conditional node test test0:::test->test
ConditionalNodeTest#conditionalTest0(int)::: conditional node test conditional test0:::value->if->else->return->Math->max
ConditionalNodeTest#test1()::: conditional node test test1:::test->test
ConditionalNodeTest#conditionalTest1(int)::: conditional node test conditional test1:::value->if->else->return->Math->max
ConditionalNodeTest#test2()::: conditional node test test2:::test->test
ConditionalNodeTest#conditionalTest2(int)::: conditional node test conditional test2:::value->if->else->return->Math->min
ConditionalNodeTest#test3()::: conditional node test test3:::test->test
ConditionalNodeTest#conditionalTest3(int)::: conditional node test conditional test3:::value->if->else->return->Math->min
ConditionalNodeTest#test4()::: conditional node test test4:::test->test
ConditionalNodeTest#conditionalTest4(ConditionalNodeTest, int)::: conditional node test conditional test4:::if->else->return
ConditionTest#testImplies()::: condition test test implies:::rand->new->Random->foreach->Condition->values->foreach->Condition->values->implies->c1->implies->if->for->i
ConditionTest#testJoin()::: condition test test join:::rand->new->Random->foreach->Condition->values->foreach->Condition->values->join->c1->join->c2->join->assertEquals->if->for->i
ConditionTest#testMeet()::: condition test test meet:::rand->new->Random->foreach->Condition->values->foreach->Condition->values->meet->c1->meet->c2->meet->assertEquals->if->for->i
ConstantArrayReadFoldingTest#test1Snippet(double)::: constant array read folding test test1 snippet:::foreach->E->values->if->return->throw->new->IllegalArgumentException
ConstantArrayReadFoldingTest#test1()::: constant array read folding test test1:::test->test
CopyOfVirtualizationTest#checkMidTierGraph(StructuredGraph)::: copy of virtualization test check mid tier graph:::graph->getNodes->filter->count->assertTrue->super->checkMidTierGraph
CopyOfVirtualizationTest#byteCopyOfVirtualization(int)::: copy of virtualization test byte copy of virtualization:::array->new->byteArr->return->Arrays->copyOf
CopyOfVirtualizationTest#shortCopyOfVirtualization(int)::: copy of virtualization test short copy of virtualization:::array->new->shortArr->return->Arrays->copyOf
CopyOfVirtualizationTest#charCopyOfVirtualization(int)::: copy of virtualization test char copy of virtualization:::array->new->charArr->return->Arrays->copyOf
CopyOfVirtualizationTest#intCopyOfVirtualization(int)::: copy of virtualization test int copy of virtualization:::array->new->intArr->return->Arrays->copyOf
CopyOfVirtualizationTest#longCopyOfVirtualization(int)::: copy of virtualization test long copy of virtualization:::array->new->longArr->return->Arrays->copyOf
CopyOfVirtualizationTest#floatCopyOfVirtualization(int)::: copy of virtualization test float copy of virtualization:::array->new->floatArr->return->Arrays->copyOf
CopyOfVirtualizationTest#doubleCopyOfVirtualization(int)::: copy of virtualization test double copy of virtualization:::array->new->doubleArr->return->Arrays->copyOf
CopyOfVirtualizationTest#objectCopyOfVirtualization(int)::: copy of virtualization test object copy of virtualization:::array->new->ObjectArr->return->Arrays->copyOf
CopyOfVirtualizationTest#testCopyOfVirtualization()::: copy of virtualization test test copy of virtualization:::test->test->test->test->test->test->test->test
CopyOfVirtualizationTest#byteCopyOfVirtualizableAllocation()::: copy of virtualization test byte copy of virtualizable allocation:::return->Arrays->copyOf
CopyOfVirtualizationTest#shortCopyOfVirtualizableAllocation()::: copy of virtualization test short copy of virtualizable allocation:::return->Arrays->copyOf
CopyOfVirtualizationTest#charCopyOfVirtualizableAllocation()::: copy of virtualization test char copy of virtualizable allocation:::return->Arrays->copyOf
CopyOfVirtualizationTest#intCopyOfVirtualizableAllocation()::: copy of virtualization test int copy of virtualizable allocation:::return->Arrays->copyOf
CopyOfVirtualizationTest#longCopyOfVirtualizableAllocation()::: copy of virtualization test long copy of virtualizable allocation:::return->Arrays->copyOf
CopyOfVirtualizationTest#floatCopyOfVirtualizableAllocation()::: copy of virtualization test float copy of virtualizable allocation:::return->Arrays->copyOf
CopyOfVirtualizationTest#doubleCopyOfVirtualizableAllocation()::: copy of virtualization test double copy of virtualizable allocation:::return->Arrays->copyOf
CopyOfVirtualizationTest#objectCopyOfVirtualizableAllocation()::: copy of virtualization test object copy of virtualizable allocation:::return->Arrays->copyOf
CopyOfVirtualizationTest#testCopyOfVirtualizableAllocation()::: copy of virtualization test test copy of virtualizable allocation:::test->test->test->test->test->test->test->test
CountedLoopTest.IVProperty#get(InductionVariable)::: property get:::
CountedLoopTest.StaticIVProperty#get(InductionVariable)::: static property get:::
CountedLoopTest.IVPredicate#test(InductionVariable)::: predicate test:::
CountedLoopTest#get(IVProperty, StaticIVProperty, IVPredicate, int):::Get a property of an induction variable.:::return
CountedLoopTest#get(IVProperty, int)::: counted loop test get:::return
CountedLoopTest#get(IVProperty, StaticIVProperty, IVPredicate, long)::: counted loop test get:::return
CountedLoopTest#get(IVProperty, long)::: counted loop test get:::return
CountedLoopTest.Result#hashCode()::: result hash code:::prime->result->Long->hashCode->Long->hashCode->return
CountedLoopTest.Result#equals(Object)::: result equals:::if->return->other->return
CountedLoopTest.Result#toString()::: result to string:::return->String->format
CountedLoopTest#incrementSnippet(int, int, int)::: counted loop test increment snippet:::i->inc->ret->new->Result->for->InductionVariable->exitValueNode->get->return
CountedLoopTest#increment1()::: counted loop test increment1:::testCounted
CountedLoopTest#increment2()::: counted loop test increment2:::testCounted
CountedLoopTest#increment3()::: counted loop test increment3:::testCounted
CountedLoopTest#increment4()::: counted loop test increment4:::testCounted
CountedLoopTest#increment5()::: counted loop test increment5:::testCounted
CountedLoopTest#increment6()::: counted loop test increment6:::testCounted
CountedLoopTest#increment7()::: counted loop test increment7:::testCounted
CountedLoopTest#increment8()::: counted loop test increment8:::testCounted
CountedLoopTest#incrementEqSnippet(int, int, int)::: counted loop test increment eq snippet:::i->inc->ret->new->Result->for->InductionVariable->exitValueNode->get->return
CountedLoopTest#incrementEq1()::: counted loop test increment eq1:::testCounted
CountedLoopTest#incrementEq2()::: counted loop test increment eq2:::testCounted
CountedLoopTest#incrementEq3()::: counted loop test increment eq3:::testCounted
CountedLoopTest#incrementEq4()::: counted loop test increment eq4:::testCounted
CountedLoopTest#incrementEq5()::: counted loop test increment eq5:::testCounted
CountedLoopTest#incrementEq6()::: counted loop test increment eq6:::testCounted
CountedLoopTest#incrementEq7()::: counted loop test increment eq7:::testCounted
CountedLoopTest#incrementEq8()::: counted loop test increment eq8:::testCounted
CountedLoopTest#decrementSnippet(int, int, int)::: counted loop test decrement snippet:::i->dec->ret->new->Result->for->InductionVariable->exitValueNode->get->return
CountedLoopTest#decrement1()::: counted loop test decrement1:::testCounted
CountedLoopTest#decrement2()::: counted loop test decrement2:::testCounted
CountedLoopTest#decrement3()::: counted loop test decrement3:::testCounted
CountedLoopTest#decrement4()::: counted loop test decrement4:::testCounted
CountedLoopTest#decrement5()::: counted loop test decrement5:::testCounted
CountedLoopTest#decrementEqSnippet(int, int, int)::: counted loop test decrement eq snippet:::i->dec->ret->new->Result->for->InductionVariable->exitValueNode->get->return
CountedLoopTest#decrementEq1()::: counted loop test decrement eq1:::testCounted
CountedLoopTest#decrementEq2()::: counted loop test decrement eq2:::testCounted
CountedLoopTest#decrementEq3()::: counted loop test decrement eq3:::testCounted
CountedLoopTest#decrementEq4()::: counted loop test decrement eq4:::testCounted
CountedLoopTest#decrementEq5()::: counted loop test decrement eq5:::testCounted
CountedLoopTest#decrementEq6()::: counted loop test decrement eq6:::testCounted
CountedLoopTest#twoVariablesSnippet()::: counted loop test two variables snippet:::ret->new->Result->j->for->i->InductionVariable->exitValueNode->get->return
CountedLoopTest#testTwoVariables()::: counted loop test test two variables:::testCounted
CountedLoopTest#incrementNeqSnippet(int)::: counted loop test increment neq snippet:::i->posLimit->ret->new->Result->for->InductionVariable->exitValueNode->get->return
CountedLoopTest#decrementNeq()::: counted loop test decrement neq:::testCounted
CountedLoopTest#decrementNeqSnippet(int)::: counted loop test decrement neq snippet:::i->posLimit->ret->new->Result->for->InductionVariable->exitValueNode->get->return
CountedLoopTest#incrementNeq()::: counted loop test increment neq:::testCounted
CountedLoopTest#incrementLongSnippet(long, long, long)::: counted loop test increment long snippet:::i->inc->ret->new->Result->for->InductionVariable->exitValueNode->get->return
CountedLoopTest#incrementLong1()::: counted loop test increment long1:::testCounted
CountedLoopTest#incrementLong2()::: counted loop test increment long2:::testCounted
CountedLoopTest#incrementLong3()::: counted loop test increment long3:::testCounted
CountedLoopTest#incrementLong4()::: counted loop test increment long4:::testCounted
CountedLoopTest#incrementLong5()::: counted loop test increment long5:::testCounted
CountedLoopTest#incrementLong6()::: counted loop test increment long6:::testCounted
CountedLoopTest.IVPropertyNode#rewrite(LoopsData)::: property node rewrite:::inductionVariable->loops->getInductionVariable->inductionVariable->getLoop->isCounted->assertTrue->node->if->if->staticCheck->test->ConstantNode->staticProperty->get->graph->forLong->if->property->get->replaceAtUsagesAndDelete
CountedLoopTest.IVPropertyNode#generate(NodeLIRBuilderTool)::: property node generate:::gen->gen->operand->setResult
CountedLoopTest#registerInvocationPlugins(InvocationPlugins)::: counted loop test register invocation plugins:::r->new->Registration->registerPlugins->registerPlugins->super->registerInvocationPlugins
CountedLoopTest#registerPlugins(Registration, JavaKind)::: counted loop test register plugins:::r->ivKind->toJavaClass->new->InvocationPlugin->register2->r->ivKind->toJavaClass->new->InvocationPlugin->register4
CountedLoopTest#checkHighTierGraph(StructuredGraph)::: counted loop test check high tier graph:::loops->new->LoopsData->loops->detectedCountedLoops->foreach->graph->getNodes->filter->node->rewrite
CountedLoopTest#getDefaultHighTierContext()::: counted loop test get default high tier context:::return->getProviders->getDefaultGraphBuilderSuite->new->HighTierContext
CountedLoopTest#getArgumentToBind()::: counted loop test get argument to bind:::return
CountedLoopTest#testCounted(String, Object...)::: counted loop test test counted:::test->test
CountedLoopTest2#countedDeoptLoop0(int)::: counted loop test2 counted deopt loop0:::v->for->i->GraalDirectives->deoptimizeAndInvalidate->return
CountedLoopTest2#test0()::: counted loop test2 test0:::test
CountedLoopTest2#countedDeoptLoop1(int)::: counted loop test2 counted deopt loop1:::v->for->i->if->if->GraalDirectives->controlFlowAnchor->else->GraalDirectives->controlFlowAnchor->else->GraalDirectives->controlFlowAnchor->GraalDirectives->deoptimizeAndInvalidate->return
CountedLoopTest2#test1()::: counted loop test2 test1:::test
CountedLoopTest2#countedDeoptLoop2(int, float)::: counted loop test2 counted deopt loop2:::v->if->if->for->i->else->for->i->else->for->i->GraalDirectives->deoptimizeAndInvalidate->return
CountedLoopTest2#test2()::: counted loop test2 test2:::test
CountedLoopTest2#test(String)::: counted loop test2 test:::test
CountedLoopTest2#test(String, int)::: counted loop test2 test:::graph->parseEager->loops->new->LoopsData->Assert->loops->loops->size->assertEquals->foreach->loops->loops->Assert->loop->detectCounted->assertTrue->finalGraph->getFinalGraph->new->LoopsData->Assert->loops->loops->size->assertEquals->nonStartDeopts->finalGraph->getNodes->return->stateBefore->filter->Assert->nonStartDeopts->isNotEmpty->assertTrue
CustomizedBytecodePatternTest#getClass(String)::: customized bytecode pattern test get class:::return->getClassLoader->new->CachedLoader->findClass
CustomizedBytecodePatternTest#getClassBL(String, MethodHandles.Lookup)::: customized bytecode pattern test get class l:::gen->className->replace->generateClass->defineClass->loadedClass->try->if->getDeclaredMethod->defineClass->invoke->else->MethodHandles->lookup->getClass->getDeclaredMethod->defineClass->invoke->catch->throw->new->ClassNotFoundException->finally->return
CustomizedBytecodePatternTest.CachedLoader#findClass(String)::: cached loader find class:::if->name->equals->if->gen->name->replace->generateClass->defineClass->return->else->return->super->findClass
CustomizedBytecodePatternTest#generateClass(String)::: customized bytecode pattern test generate class:::
DegeneratedLoopsTest#referenceSnippet(int)::: degenerated loops test reference snippet:::return
DegeneratedLoopsTest#test1()::: degenerated loops test test1:::test
DegeneratedLoopsTest#test1Snippet(int)::: degenerated loops test test1 snippet:::for->return
DegeneratedLoopsTest#test()::: degenerated loops test test:::
DegeneratedLoopsTest#test(String)::: degenerated loops test test:::debug->getDebugContext->try->s->debug->new->DebugDumpScope->scope->graph->parseEager->context->getDefaultHighTierContext->createInliningPhase->apply->new->CanonicalizerPhase->apply->debug->dump->referenceGraph->parseEager->debug->dump->assertEquals->catch->throw->debug->handle->finally
DeMorganCanonicalizationTest#or(int, int)::: de morgan canonicalization test or:::return
DeMorganCanonicalizationTest#and(int, int)::: de morgan canonicalization test and:::return
DeMorganCanonicalizationTest#testAnd()::: de morgan canonicalization test test and:::g->getInitialOptions->parseEager->new->CanonicalizerPhase->getDefaultHighTierContext->apply->Assert->g->getNodes->filter->count->assertEquals->Assert->g->getNodes->filter->count->assertEquals->g->method->and->new->Result->testAgainstExpected->g->method->and->new->Result->testAgainstExpected->g->method->and->new->Result->testAgainstExpected->g->method->and->new->Result->testAgainstExpected
DeMorganCanonicalizationTest#testOr()::: de morgan canonicalization test test or:::g->getInitialOptions->parseEager->new->CanonicalizerPhase->getDefaultHighTierContext->apply->Assert->g->getNodes->filter->count->assertEquals->Assert->g->getNodes->filter->count->assertEquals->g->method->or->new->Result->testAgainstExpected->g->method->or->new->Result->testAgainstExpected->g->method->or->new->Result->testAgainstExpected->g->method->or->new->Result->testAgainstExpected
DirectByteBufferTest.Ret#equals(Object)::: ret equals:::if->return->other->if->return->if->return->if->return->if->return->if->Float->floatToRawIntBits->Float->floatToRawIntBits->return->if->Double->doubleToRawLongBits->Double->doubleToRawLongBits->return->return
DirectByteBufferTest.Ret#hashCode()::: ret hash code:::return
DirectByteBufferTest.Ret#toString()::: ret to string:::return->String->Float->floatToRawIntBits->Double->doubleToRawLongBits->format
DirectByteBufferTest#data()::: direct byte buffer test data:::ret->new->ArrayList<>->ret->new->ObjectArr->add->ret->new->ObjectArr->add->return
DirectByteBufferTest#alignedReadSnippet(byte[])::: direct byte buffer test aligned read snippet:::buffer->makeDirect->ret->new->Ret->buffer->get->buffer->get->buffer->getShort->buffer->getInt->buffer->getLong->buffer->getDouble->buffer->getFloat->return
DirectByteBufferTest#testReadAligned()::: direct byte buffer test test read aligned:::input->new->byteArr->for->i->test
DirectByteBufferTest#alignedWriteSnippet(byte, byte, short, int, long, double, float)::: direct byte buffer test aligned write snippet:::ret->new->byteArr->buffer->makeDirect->buffer->put->buffer->put->buffer->putShort->buffer->putInt->buffer->putLong->buffer->putDouble->buffer->putFloat->buffer->position->buffer->get->return
DirectByteBufferTest#testWriteAligned()::: direct byte buffer test test write aligned:::test
DirectByteBufferTest#unalignedReadSnippet(byte[])::: direct byte buffer test unaligned read snippet:::buffer->makeDirect->ret->new->Ret->buffer->get->buffer->getShort->buffer->getInt->buffer->getLong->buffer->getDouble->buffer->getFloat->return
DirectByteBufferTest#testReadUnaligned()::: direct byte buffer test test read unaligned:::input->new->byteArr->for->i->test
DirectByteBufferTest#unalignedWriteSnippet(byte, short, int, long, double, float)::: direct byte buffer test unaligned write snippet:::ret->new->byteArr->buffer->makeDirect->buffer->put->buffer->putShort->buffer->putInt->buffer->putLong->buffer->putDouble->buffer->putFloat->buffer->position->buffer->get->return
DirectByteBufferTest#testWriteUnaligned()::: direct byte buffer test test write unaligned:::test
DirectByteBufferTest#makeDirect(byte[], ByteOrder)::: direct byte buffer test make direct:::length->buffer->ByteBuffer->allocateDirect->order->buffer->put->buffer->position->return
DirectByteBufferTest#makeDirect(int, ByteOrder)::: direct byte buffer test make direct:::buffer->ByteBuffer->allocateDirect->order->buffer->position->return
DontReuseArgumentSpaceTest#createSuites(OptionValues)::: dont reuse argument space test create suites:::return->super->new->OptionValues->createSuites
DontReuseArgumentSpaceTest#killArguments(int, int, int, int, int, int, int, int, int, int)::: dont reuse argument space test kill arguments:::return
DontReuseArgumentSpaceTest#callTwice(int, int, int, int, int, int, int, int, int, int)::: dont reuse argument space test call twice:::killArguments->return->killArguments
DontReuseArgumentSpaceTest#run0()::: dont reuse argument space test run0:::callTwice->javaMethod->getResolvedJavaMethod->graph->parseEager->compilationResult->compile->debug->getDebugContext->getBackend->createDefaultInstalledCode->test
DumpPathTest#snippet()::: dump path test snippet:::return->new->String
DumpPathTest#testDump()::: dump path test test dump:::assumeManagementLibraryIsLoadable->dumpDirectoryPath->Files->createTempDirectory->extensions->new->StringArr->overrides->OptionValues->newOptionMap->overrides->dumpDirectoryPath->toString->put->overrides->put->overrides->put->overrides->put->overrides->put->getInitialOptions->new->OptionValues->test->checkForFiles->removeDirectory
DumpPathTest#checkForFiles(Path, String[]):::Check that the given directory contains file or directory names with all the given extensions.:::paths->new->StringArr->try->stream->Files->newDirectoryStream->foreach->fileName->filePath->getFileName->toString->for->i->catch->finally->for->i->for->i
EnumSwitchTest#test1Snippet(E)::: enum switch test test1 snippet:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return
EnumSwitchTest#test1()::: enum switch test test1:::foreach->E->values->test->new->ObjectArr->test
EnumSwitchTest#test2Snippet(E)::: enum switch test test2 snippet:::switch->return->return->return
EnumSwitchTest#test2()::: enum switch test test2:::foreach->E->values->test->new->ObjectArr->test
EnumSwitchTest#createSuites(OptionValues)::: enum switch test create suites:::ret->super->createSuites->ret->getHighTier->new->Phase->prependPhase->ret->getHighTier->findPhase->new->Phase->add->return
EnumValuesTest#iterateUnits()::: enum values test iterate units:::foreach->TimeUnit->values
EnumValuesTest#empty()::: enum values test empty:::
EnumValuesTest#test0()::: enum values test test0:::getFinalGraph->getFinalGraph->assertEquals
EnumValuesTest#getNanosValues()::: enum values test get nanos values:::return->TimeUnit->values
EnumValuesTest#getNanos()::: enum values test get nanos:::return
EnumValuesTest#test1()::: enum values test test1:::getFinalGraph->getFinalGraph->assertEquals
FinalizableSubclassTest.WithFinalizerAAAA#finalize()::: with finalizer a finalize:::super->finalize
FinalizableSubclassTest#parseAndProcess(Class, AllowAssumptions)::: finalizable subclass test parse and process:::constructors->cl->getConstructors->Assert->assertTrue->javaMethod->getMetaAccess->lookupJavaMethod->options->getInitialOptions->graph->getDebugContext->new->StructuredGraph.Builder->method->build->conf->GraphBuilderConfiguration->getDefaultGraphBuilderPlugins->getSnippetDefault->getProviders->new->GraphBuilderPhase.Instance->apply->context->getProviders->getDefaultGraphBuilderSuite->new->HighTierContext->createInliningPhase->apply->new->CanonicalizerPhase->apply->return
FinalizableSubclassTest#checkForRegisterFinalizeNode(Class, boolean, AllowAssumptions)::: finalizable subclass test check for register finalize node:::graph->parseAndProcess->Assert->graph->getNodes->filter->count->assertTrue->noFinalizerAssumption->assumptions->graph->getAssumptions->if->foreach->if->else->if->Assert->assertTrue
FinalizableSubclassTest#test1():::Use a custom class loader to generate classes, to make sure the given classes are loaded in correct order.:::debug->getDebugContext->for->i
FinalizableSubclassTest.ClassTemplateLoader#findClass(String)::: class template loader find class:::nameReplaced->name->replaceAll->if->cache->containsKey->return->cache->get->classData->try->is->getResourceAsStream->baos->new->ByteArrayOutputStream->buf->new->byteArr->size->while->is->read->baos->write->baos->flush->baos->toByteArray->catch->Assert->fail->finally->dumpStringsInByteArray->index->while->indexOfAAAA->replaceAAAA->dumpStringsInByteArray->c->defineClass->cache->put->return
FinalizableSubclassTest.ClassTemplateLoader#indexOfAAAA(byte[], int)::: class template loader index of a:::for->i->return
FinalizableSubclassTest.ClassTemplateLoader#replaceAAAA(byte[], int, String)::: class template loader replace a:::for->i
FinalizableSubclassTest.ClassTemplateLoader#dumpStringsInByteArray(DebugContext, byte[])::: class template loader dump strings in byte array:::wasChar->sb->new->StringBuilder->foreach->if->if->debug->log->sb->setLength->sb->String->format->append->else->debug->log
FindUniqueConcreteMethodBugTest#test():::Executing ResolvedJavaType#findUniqueConcreteMethod(ResolvedJavaMethod) for the method Person#getName() on the type AbstractPerson should return null as both PersonImpl and TenantImpl provide implementations (namely PersonImpl#getName() and Tenant#getName()).:::ifaceMethod->getMetaAccess->getDeclaredMethod->lookupJavaMethod->person->new->PersonImpl->tenant->new->TenantImpl->person->getName->tenant->getName->for->i->test->actual->getMetaAccess->lookupJavaType->findUniqueConcreteMethod->Assert->String->valueOf->assertNull
FindUniqueConcreteMethodBugTest#getLabelLength(AbstractPerson)::: find unique concrete method bug test get label length:::return->person->getName->length
FindUniqueConcreteMethodBugTest.Person#getName()::: person get name:::
FindUniqueConcreteMethodBugTest.Person#getId()::: person get id:::return
FindUniqueConcreteMethodBugTest.Tenant#getName()::: tenant get name:::return->getAddress
FindUniqueConcreteMethodBugTest.Tenant#getAddress()::: tenant get address:::
FindUniqueConcreteMethodBugTest.PersonImpl#getName()::: person impl get name:::return
FindUniqueConcreteMethodBugTest.TenantImpl#getAddress()::: tenant impl get address:::return->String->valueOf
FindUniqueDefaultMethodTest.Interface1#v1()::: interface1 v1:::return
FindUniqueDefaultMethodTest.Implementor1#callV1()::: implementor1 call v1:::return->v1
FindUniqueDefaultMethodTest#testFindUnique():::HotSpot has an internal mismatch with CHA and default methods:::cType->getMetaAccess->lookupJavaType->cType->initialize->v1Method->getMetaAccess->this->getMethod->lookupJavaMethod->method->cType->findUniqueConcreteMethod->assertDeepEquals
FindUniqueDefaultMethodTest.Interface2#v1()::: interface2 v1:::return
FindUniqueDefaultMethodTest.Base2#v2()::: base2 v2:::return
FindUniqueDefaultMethodTest.Implementor2#callV1()::: implementor2 call v1:::return->v1
FindUniqueDefaultMethodTest.Implementor2#callV2()::: implementor2 call v2:::return->v2
FindUniqueDefaultMethodTest#testInherited():::This test illustrates a common pattern where a method at the root of a hierarchy is the only implementation and can be statically inlined.:::s->new->Subclass2->testConstantReturn
FindUniqueDefaultMethodTest#testDefault():::Test same pattern as above but using default methods instead:::s->new->Subclass2->testConstantReturn
FindUniqueDefaultMethodTest#runDefault(Implementor2)::: find unique default method test run default:::return->i->callV1
FindUniqueDefaultMethodTest#runInherited(Implementor2)::: find unique default method test run inherited:::return->i->callV2
FindUniqueDefaultMethodTest#testConstantReturn(String, Object)::: find unique default method test test constant return:::result->buildGraph->ret->result->getNodes->first->result->getNodes->count->assertDeepEquals->ret->result->isConstant->assertDeepEquals->ret->result->asJavaConstant->asBoxedPrimitive->assertDeepEquals
FindUniqueDefaultMethodTest#buildGraph(String)::: find unique default method test build graph:::debug->getDebugContext->try->s->debug->getMetaAccess->getMethod->lookupJavaMethod->scope->graph->parseEager->graph->method->compile->debug->dump->return->catch->throw->debug->handle->finally
FloatingReadTest#changeField(Container)::: floating read test change field:::
FloatingReadTest#test1Snippet()::: floating read test test1 snippet:::c->new->Container->return
FloatingReadTest#test1()::: floating read test test1:::test
FloatingReadTest#test(String)::: floating read test test:::debug->getDebugContext->try->s->debug->new->DebugDumpScope->scope->graph->parseEager->context->getProviders->new->CanonicalizerPhase->new->LoweringPhase->apply->new->FloatingReadPhase->apply->returnNode->monitorexit->foreach->graph->getNodes->if->else->if->debug->dump->Assert->assertNotNull->Assert->assertNotNull->Assert->returnNode->result->assertTrue->read->returnNode->result->assertOrderedAfterSchedule->catch->throw->debug->handle->finally
FloatOptimizationTest#test1()::: float optimization test test1:::test
FloatOptimizationTest#test1Snippet(double)::: float optimization test test1 snippet:::return
FloatOptimizationTest#test2()::: float optimization test test2:::test
FloatOptimizationTest#test2Snippet(float)::: float optimization test test2 snippet:::return
FloatOptimizationTest#test3()::: float optimization test test3:::test
FloatOptimizationTest#test3Snippet(double)::: float optimization test test3 snippet:::return
FloatOptimizationTest#test4()::: float optimization test test4:::test
FloatOptimizationTest#test4Snippet(float)::: float optimization test test4 snippet:::return
FloatOptimizationTest#assertDeepEquals(String, Object, Object, double)::: float optimization test assert deep equals:::if->e->a->if->Double->doubleToRawLongBits->Double->doubleToRawLongBits->Assert->Double->doubleToRawLongBits->Double->doubleToRawLongBits->fail->else->super->assertDeepEquals
GraalCompilerAssumptionsTest#testAssumptionInvalidate(String, Assumption, String)::: graal compiler assumptions test test assumption invalidate:::testAssumption
GraalCompilerAssumptionsTest#testAssumption(String, Assumption, String, boolean):::Checks the behavior of class loading on Assumption invalidation:::javaMethod->getResolvedJavaMethod->graph->parseEager->graph->getAssumptions->isEmpty->assertTrue->checkGraph->compilationResult->compile->installedCode->getBackend->graph->getDebug->createDefaultInstalledCode->installedCode->isValid->assertTrue->if->fullName->getClass->getName->try->Class->forName->catch->fail->finally->installedCode->isValid->assertTrue
GraalCompilerAssumptionsTest#checkGraph(Assumption, StructuredGraph)::: graal compiler assumptions test check graph:::found->foreach->graph->getAssumptions->if->expectedAssumption->equals->assertTrue
GraalCompilerAssumptionsTest#resolveAndInitialize(Class):::Converts a Class to an initialized ResolvedJavaType.:::type->getMetaAccess->lookupJavaType->type->initialize->return
GraalCompilerTest#getInitialOptions():::Gets the initial option values provided by the Graal runtime:::return->Graal->getRequiredCapability
GraalCompilerTest#exportPackage(Class, String):::Exports the package named packageName declared in moduleMember's module to this object's module:::if->JLModule->getClass->exportPackageTo
GraalCompilerTest#checkHighTierGraph(StructuredGraph):::Can be overridden by unit tests to verify properties of the graph.:::
GraalCompilerTest#checkMidTierGraph(StructuredGraph):::Can be overridden by unit tests to verify properties of the graph.:::
GraalCompilerTest#checkLowTierGraph(StructuredGraph):::Can be overridden by unit tests to verify properties of the graph.:::
GraalCompilerTest#breakpoint()::: graal compiler test breakpoint:::
GraalCompilerTest#breakpoint(int)::: graal compiler test breakpoint:::
GraalCompilerTest#shouldBeOptimizedAway()::: graal compiler test should be optimized away:::
GraalCompilerTest#createSuites(OptionValues)::: graal compiler test create suites:::ret->backend->getSuites->getDefaultSuites->copy->iter->ret->getHighTier->findPhase->if->ret->getHighTier->findPhase->iter->new->Phase->add->ret->getHighTier->new->Phase->appendPhase->ret->getMidTier->new->Phase->appendPhase->ret->getLowTier->new->Phase->appendPhase->return
GraalCompilerTest#createLIRSuites(OptionValues)::: graal compiler test create suites:::ret->backend->getSuites->getDefaultLIRSuites->copy->return
GraalCompilerTest#afterTest()::: graal compiler test after test:::if->synchronized->if->extendedInvocationPlugins->removeTestPlugins->super->afterTest
GraalCompilerTest#getDebugContext():::Gets a DebugContext object corresponding to options, creating a new one if none currently exists:::return->getInitialOptions->getDebugContext
GraalCompilerTest#getDebugHandlersFactories()::: graal compiler test get debug handlers factories:::return->Collections->getSnippetReflection->new->GraalDebugHandlersFactory->singletonList
GraalCompilerTest#assertEquals(StructuredGraph, StructuredGraph)::: graal compiler test assert equals:::assertEquals
GraalCompilerTest#countUnusedConstants(StructuredGraph)::: graal compiler test count unused constants:::total->foreach->getConstantNodes->if->node->hasNoUsages->return
GraalCompilerTest#getNodeCountExcludingUnusedConstants(StructuredGraph)::: graal compiler test get node count excluding unused constants:::return->graph->getNodeCount->countUnusedConstants
GraalCompilerTest#assertEquals(StructuredGraph, StructuredGraph, boolean, boolean)::: graal compiler test assert equals:::expectedString->getCanonicalGraphString->actualString->getCanonicalGraphString->mismatchString->compareGraphStrings->if->getNodeCountExcludingUnusedConstants->getNodeCountExcludingUnusedConstants->expected->getDebug->dump->graph->getDebug->dump->Assert->expected->getNodeCount->graph->getNodeCount->fail->if->expectedString->equals->expected->getDebug->dump->graph->getDebug->dump->Assert->fail
GraalCompilerTest#compareGraphStrings(StructuredGraph, String, StructuredGraph, String)::: graal compiler test compare graph strings:::if->expectedString->equals->expectedLines->expectedString->split->actualLines->actualString->split->diffIndex->limit->Math->min->marker->for->i->if->if->Arrays->copyOf->else->Arrays->copyOf->ediff->String->join->adiff->String->join->return->else->return
GraalCompilerTest#assertOptimizedAway(StructuredGraph)::: graal compiler test assert optimized away:::Assert->g->getNodes->filter->count->assertEquals
GraalCompilerTest#assertConstantReturn(StructuredGraph, int)::: graal compiler test assert constant return:::graphString->getCanonicalGraphString->Assert->graph->getNodes->count->assertEquals->result->graph->getNodes->first->result->Assert->result->isConstant->assertTrue->Assert->result->asJavaConstant->getJavaKind->assertEquals->Assert->result->asJavaConstant->asInt->assertEquals
GraalCompilerTest#getCanonicalGraphString(StructuredGraph, boolean, boolean)::: graal compiler test get canonical graph string:::schedule->new->SchedulePhase->schedule->apply->scheduleResult->graph->getLastSchedule->canonicalId->graph->createNodeMap->nextId->constantsLines->new->ArrayList<>->result->new->StringBuilder->foreach->scheduleResult->getCFG->getBlocks->result->append->append->append->if->scheduleResult->getCFG->getStartBlock->result->append->result->append->foreach->block->getSuccessors->result->append->append->result->append->foreach->scheduleResult->getBlockToNodesMap->get->if->node->isAlive->if->if->name->node->toString->node->getClass->getSimpleName->if->constantsLines->add->else->constantsLines->filteredUsageCount->add->else->id->if->canonicalId->get->canonicalId->get->else->canonicalId->set->name->node->getClass->getSimpleName->result->append->append->append->append->if->result->append->result->field->append->if->result->append->result->filteredUsageCount->append->result->append->result->append->constantsLinesResult->new->StringBuilder->constantsLinesResult->constantsLines->size->append->append->Collections->sort->foreach->constantsLinesResult->append->constantsLinesResult->append->return->constantsLinesResult->toString->result->toString
GraalCompilerTest#filteredUsageCount(Node)::: graal compiler test filtered usage count:::return->node->usages->filter->count
GraalCompilerTest#getScheduledGraphString(StructuredGraph)::: graal compiler test get scheduled graph string:::schedule->new->SchedulePhase->schedule->apply->scheduleResult->graph->getLastSchedule->result->new->StringBuilder->blocks->scheduleResult->getCFG->getBlocks->foreach->result->append->append->append->if->scheduleResult->getCFG->getStartBlock->result->append->result->append->foreach->block->getSuccessors->result->append->append->result->append->foreach->scheduleResult->getBlockToNodesMap->get->result->String->format->append->return->result->toString
GraalCompilerTest#getBackend()::: graal compiler test get backend:::return
GraalCompilerTest#getProviders()::: graal compiler test get providers:::return
GraalCompilerTest#getDefaultHighTierContext()::: graal compiler test get default high tier context:::return->getProviders->getDefaultGraphBuilderSuite->getOptimisticOptimizations->new->HighTierContext
GraalCompilerTest#getDefaultMidTierContext()::: graal compiler test get default mid tier context:::return->getProviders->getTargetProvider->getOptimisticOptimizations->new->MidTierContext
GraalCompilerTest#getSnippetReflection()::: graal compiler test get snippet reflection:::return->Graal->getRequiredCapability
GraalCompilerTest#getTarget()::: graal compiler test get target:::return->getTargetProvider->getTarget
GraalCompilerTest#getTargetProvider()::: graal compiler test get target provider:::return->getBackend
GraalCompilerTest#getCodeCache()::: graal compiler test get code cache:::return->getProviders->getCodeCache
GraalCompilerTest#getConstantReflection()::: graal compiler test get constant reflection:::return->getProviders->getConstantReflection
GraalCompilerTest#getMetaAccess()::: graal compiler test get meta access:::return->getProviders->getMetaAccess
GraalCompilerTest#getLowerer()::: graal compiler test get lowerer:::return->getProviders->getLowerer
GraalCompilerTest#createInliningPhase()::: graal compiler test create inlining phase:::return->new->CanonicalizerPhase->createInliningPhase
GraalCompilerTest#createInliningPhase(CanonicalizerPhase)::: graal compiler test create inlining phase:::return->createInliningPhase
GraalCompilerTest.GreedyTestInliningPolicy#previousLowLevelGraphSize(InlineInfo)::: greedy test inlining policy previous low level graph size:::return
GraalCompilerTest#createInliningPhase(Map, CanonicalizerPhase)::: graal compiler test create inlining phase:::return->new->GreedyTestInliningPolicy->new->InliningPhase
GraalCompilerTest#getCompilationId(ResolvedJavaMethod)::: graal compiler test get compilation id:::return->getBackend->getCompilationIdentifier
GraalCompilerTest#getOrCreateCompilationId(ResolvedJavaMethod, StructuredGraph)::: graal compiler test get or create compilation id:::if->return->graph->compilationId->return->getCompilationId
GraalCompilerTest#testN(int, String, Object...)::: graal compiler test test n:::errors->new->ArrayList<>->threads->new->ThreadArr->for->i->for->i->if->errors->isEmpty->throw->errors->size->errors->errors->size->new->ThrowableArr->toArray->new->MultiCauseAssertionError
GraalCompilerTest#referenceInvoke(ResolvedJavaMethod, Object, Object...)::: graal compiler test reference invoke:::return->invoke
GraalCompilerTest.Result#toString()::: result to string:::return->returnValue->toString
GraalCompilerTest#before(ResolvedJavaMethod):::Called before a test is executed.:::
GraalCompilerTest#after():::Called after a test is executed.:::
GraalCompilerTest#executeExpected(ResolvedJavaMethod, Object, Object...)::: graal compiler test execute expected:::before->try->return->referenceInvoke->new->Result->catch->return->e->getTargetException->new->Result->throw->new->RuntimeException->finally->after
GraalCompilerTest#executeActual(ResolvedJavaMethod, Object, Object...)::: graal compiler test execute actual:::return->getInitialOptions->executeActual
GraalCompilerTest#executeActual(OptionValues, ResolvedJavaMethod, Object, Object...)::: graal compiler test execute actual:::before->executeArgs->argsWithReceiver->checkArgs->compiledMethod->getCode->try->return->compiledMethod->executeVarargs->new->Result->catch->return->new->Result->finally->after
GraalCompilerTest#checkArgs(ResolvedJavaMethod, Object[])::: graal compiler test check args:::sig->method->toParameterTypes->Assert->assertEquals->for->i
GraalCompilerTest#argsWithReceiver(Object, Object...):::Prepends a non-null receiver argument to a given list or args.:::executeArgs->if->else->new->ObjectArr->for->i->return->applyArgSuppliers
GraalCompilerTest#test(String, Object...)::: graal compiler test test:::return->getInitialOptions->test
GraalCompilerTest#test(OptionValues, String, Object...)::: graal compiler test test:::try->method->getResolvedJavaMethod->receiver->method->isStatic->return->test->catch->return->finally
GraalCompilerTest#supply(ArgSupplier):::Convenience method for using an ArgSupplier lambda in a varargs list.:::return
GraalCompilerTest#test(ResolvedJavaMethod, Object, Object...)::: graal compiler test test:::return->getInitialOptions->test
GraalCompilerTest#test(OptionValues, ResolvedJavaMethod, Object, Object...)::: graal compiler test test:::expect->executeExpected->if->getCodeCache->testAgainstExpected->return
GraalCompilerTest#applyArgSuppliers(Object...):::Process a given set of arguments, converting any ArgSupplier argument to the argument it supplies.:::res->for->i->return
GraalCompilerTest#testAgainstExpected(ResolvedJavaMethod, Result, Object, Object...)::: graal compiler test test against expected:::getInitialOptions->Collections->emptySet->testAgainstExpected
GraalCompilerTest#testAgainstExpected(ResolvedJavaMethod, Result, Set, Object, Object...)::: graal compiler test test against expected:::getInitialOptions->testAgainstExpected
GraalCompilerTest#testAgainstExpected(OptionValues, ResolvedJavaMethod, Result, Object, Object...)::: graal compiler test test against expected:::Collections->emptySet->testAgainstExpected
GraalCompilerTest#testAgainstExpected(OptionValues, ResolvedJavaMethod, Result, Set, Object, Object...)::: graal compiler test test against expected:::actual->executeActualCheckDeopt->assertEquals
GraalCompilerTest#executeActualCheckDeopt(OptionValues, ResolvedJavaMethod, Set, Object, Object...)::: graal compiler test execute actual check deopt:::deoptCounts->new->EnumMap<>->profile->method->getProfilingInfo->foreach->deoptCounts->profile->getDeoptimizationCount->put->actual->executeActual->method->getProfilingInfo->foreach->Assert->deoptCounts->get->profile->getDeoptimizationCount->assertEquals->return
GraalCompilerTest#assertEquals(Result, Result)::: graal compiler test assert equals:::if->Assert->assertTrue->Assert->getClass->getClass->assertEquals->if->getMessage->C2_OMIT_STACK_TRACE_IN_FAST_THROW_EXCEPTIONS->getClass->contains->Assert->getMessage->getMessage->assertEquals->else->if->throw->new->AssertionError->assertDeepEquals
GraalCompilerTest#getCode(ResolvedJavaMethod):::Gets installed code for a given method, compiling it first if necessary:::return->getInitialOptions->getCode
GraalCompilerTest#getCode(ResolvedJavaMethod, OptionValues)::: graal compiler test get code:::return->getCode
GraalCompilerTest#getCode(ResolvedJavaMethod, StructuredGraph):::Gets installed code for a given method, compiling it first if necessary.:::return->getInitialOptions->graph->getOptions->getCode
GraalCompilerTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean):::Gets installed code for a given method and graph, compiling it first if necessary.:::return->getInitialOptions->graph->getOptions->getCode
GraalCompilerTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues):::Gets installed code for a given method and graph, compiling it first if necessary.:::useCache->getArgumentToBind->if->cached->cache->get->if->if->cached->isValid->return->for->retry->throw->GraalError->shouldNotReachHere
GraalCompilerTest#parseForCompile(ResolvedJavaMethod, OptionValues):::Used to produce a graph for a method about to be compiled by #compile(ResolvedJavaMethod, StructuredGraph) if the second parameter to that method is null:::return->getCompilationId->parseEager
GraalCompilerTest#parseForCompile(ResolvedJavaMethod, DebugContext)::: graal compiler test parse for compile:::return->parseEager
GraalCompilerTest#parseForCompile(ResolvedJavaMethod)::: graal compiler test parse for compile:::return->getCompilationId->getInitialOptions->parseEager
GraalCompilerTest#parseForCompile(ResolvedJavaMethod, CompilationIdentifier, OptionValues)::: graal compiler test parse for compile:::return->parseEager
GraalCompilerTest#compile(ResolvedJavaMethod, StructuredGraph):::Compiles a given method.:::options->getInitialOptions->graph->getOptions->compilationId->getOrCreateCompilationId->return->new->CompilationResult->compile
GraalCompilerTest#compile(ResolvedJavaMethod, StructuredGraph, CompilationIdentifier)::: graal compiler test compile:::options->getInitialOptions->graph->getOptions->return->new->CompilationResult->compile
GraalCompilerTest#compile(ResolvedJavaMethod, StructuredGraph, OptionValues)::: graal compiler test compile:::compilationId->getOrCreateCompilationId->return->new->CompilationResult->compile
GraalCompilerTest#getOptimisticOptimizations()::: graal compiler test get optimistic optimizations:::return
GraalCompilerTest#compile(ResolvedJavaMethod, StructuredGraph, CompilationResult, CompilationIdentifier, OptionValues):::Compiles a given method.:::graphToCompile->parseForCompile->debug->graphToCompile->getDebug->try->s->debug->scope->request->getProviders->getBackend->getDefaultGraphBuilderSuite->getOptimisticOptimizations->graphToCompile->getProfilingInfo->createSuites->createLIRSuites->new->Request<>->return->GraalCompiler->compile->catch->throw->debug->handle->finally
GraalCompilerTest#getFinalGraph(String)::: graal compiler test get final graph:::return->getResolvedJavaMethod->getFinalGraph
GraalCompilerTest#getFinalGraph(ResolvedJavaMethod)::: graal compiler test get final graph:::graph->parseForCompile->applyFrontEnd->return
GraalCompilerTest#applyFrontEnd(StructuredGraph)::: graal compiler test apply front end:::debug->graph->getDebug->try->s->debug->scope->GraalCompiler->getProviders->getBackend->getDefaultGraphBuilderSuite->getOptimisticOptimizations->graph->getProfilingInfo->graph->getOptions->createSuites->emitFrontEnd->catch->throw->debug->handle->finally
GraalCompilerTest#getSpeculationLog()::: graal compiler test get speculation log:::return
GraalCompilerTest#addMethod(DebugContext, ResolvedJavaMethod, CompilationResult)::: graal compiler test add method:::return->backend->addInstalledCode
GraalCompilerTest#addDefaultMethod(DebugContext, ResolvedJavaMethod, CompilationResult)::: graal compiler test add default method:::return->backend->createDefaultInstalledCode
GraalCompilerTest#asResolvedJavaMethod(Executable):::Converts a reflection Method to a ResolvedJavaMethod.:::javaMethod->getMetaAccess->lookupJavaMethod->methodMap->put->return
GraalCompilerTest#getResolvedJavaMethod(String)::: graal compiler test get resolved java method:::return->getMethod->asResolvedJavaMethod
GraalCompilerTest#getResolvedJavaMethod(Class, String)::: graal compiler test get resolved java method:::return->getMethod->asResolvedJavaMethod
GraalCompilerTest#getResolvedJavaMethod(Class, String, Class...)::: graal compiler test get resolved java method:::return->getMethod->asResolvedJavaMethod
GraalCompilerTest#lookupMethod(ResolvedJavaMethod):::Gets the reflection Method from which a given ResolvedJavaMethod was created or null if javaMethod does not correspond to a reflection method.:::return->methodMap->get
GraalCompilerTest#invoke(ResolvedJavaMethod, Object, Object...)::: graal compiler test invoke:::method->lookupMethod->Assert->assertTrue->if->method->isAccessible->method->setAccessible->if->return->applyArgSuppliers->invoke->return->applyArgSuppliers->newInstance
GraalCompilerTest#parseProfiled(String, AllowAssumptions):::Parses a Java method in GraphBuilderConfiguration#getDefault default mode to produce a graph.:::method->getResolvedJavaMethod->return->builder->getDefaultGraphBuilderSuite->parse
GraalCompilerTest#parseProfiled(ResolvedJavaMethod, AllowAssumptions):::Parses a Java method in GraphBuilderConfiguration#getDefault default mode to produce a graph.:::return->builder->getDefaultGraphBuilderSuite->parse
GraalCompilerTest#parseEager(String, AllowAssumptions):::Parses a Java method with GraphBuilderConfiguration#withEagerResolving(boolean) set to true to produce a graph.:::method->getResolvedJavaMethod->return->builder->getEagerGraphBuilderSuite->parse
GraalCompilerTest#parseEager(String, AllowAssumptions, OptionValues):::Parses a Java method with GraphBuilderConfiguration#withEagerResolving(boolean) set to true to produce a graph.:::method->getResolvedJavaMethod->return->builder->getEagerGraphBuilderSuite->parse
GraalCompilerTest#parseEager(String, AllowAssumptions, DebugContext)::: graal compiler test parse eager:::method->getResolvedJavaMethod->return->builder->getEagerGraphBuilderSuite->parse
GraalCompilerTest#parseEager(ResolvedJavaMethod, AllowAssumptions):::Parses a Java method with GraphBuilderConfiguration#withEagerResolving(boolean) set to true to produce a graph.:::return->builder->getEagerGraphBuilderSuite->parse
GraalCompilerTest#parseEager(ResolvedJavaMethod, AllowAssumptions, DebugContext)::: graal compiler test parse eager:::return->builder->getEagerGraphBuilderSuite->parse
GraalCompilerTest#parseEager(ResolvedJavaMethod, AllowAssumptions, OptionValues):::Parses a Java method with GraphBuilderConfiguration#withEagerResolving(boolean) set to true to produce a graph.:::return->builder->getEagerGraphBuilderSuite->parse
GraalCompilerTest#parseEager(ResolvedJavaMethod, AllowAssumptions, CompilationIdentifier, OptionValues):::Parses a Java method with GraphBuilderConfiguration#withEagerResolving(boolean) set to true to produce a graph.:::return->builder->getEagerGraphBuilderSuite->parse
GraalCompilerTest#builder(ResolvedJavaMethod, AllowAssumptions, DebugContext)::: graal compiler test builder:::options->debug->getOptions->return->new->Builder->method->getCompilationId->compilationId
GraalCompilerTest#builder(ResolvedJavaMethod, AllowAssumptions)::: graal compiler test builder:::options->getInitialOptions->return->getDebugContext->new->Builder->method->getCompilationId->compilationId
GraalCompilerTest#builder(ResolvedJavaMethod, AllowAssumptions, CompilationIdentifier, OptionValues)::: graal compiler test builder:::return->compilationId->toString->getDebugContext->new->Builder->method->compilationId
GraalCompilerTest#builder(ResolvedJavaMethod, AllowAssumptions, OptionValues)::: graal compiler test builder:::return->getDebugContext->new->Builder->method->getCompilationId->compilationId
GraalCompilerTest#getDebugGraphBuilderSuite()::: graal compiler test get debug graph builder suite:::return->GraphBuilderConfiguration->getDefaultGraphBuilderPlugins->getDefault->withFullInfopoints->getCustomGraphBuilderSuite
GraalCompilerTest#parse(StructuredGraph.Builder, PhaseSuite)::: graal compiler test parse:::javaMethod->builder->getMethod->builder->getSpeculationLog->speculationLog->if->builder->getCancellable->builder->getCancellable->cancellable->graph->builder->build->debug->graph->getDebug->try->ds->debug->scope->graphBuilderSuite->getDefaultHighTierContext->apply->args->getArgumentToBind->if->bindArguments->return->catch->throw->debug->handle->finally
GraalCompilerTest#bindArguments(StructuredGraph, Object[])::: graal compiler test bind arguments:::m->graph->method->receiver->m->getModifiers->isStatic->args->argsWithReceiver->parameterTypes->m->toParameterTypes->foreach->graph->getNodes->c->getSnippetReflection->param->index->getJavaKind->param->index->forBoxed->replacement->ConstantNode->getMetaAccess->forConstant->param->replaceAtUsages
GraalCompilerTest#getArgumentToBind()::: graal compiler test get argument to bind:::return
GraalCompilerTest#getEagerGraphBuilderSuite()::: graal compiler test get eager graph builder suite:::return->GraphBuilderConfiguration->getDefaultGraphBuilderPlugins->getDefault->withEagerResolving->withUnresolvedIsError->getCustomGraphBuilderSuite
GraalCompilerTest#getCancellable(ResolvedJavaMethod):::Gets the cancellable that should be associated with a graph being created by any of the parse...() methods.:::return
GraalCompilerTest#getDefaultGraphBuilderPlugins()::: graal compiler test get default graph builder plugins:::suite->backend->getSuites->getDefaultGraphBuilderSuite->defaultPlugins->suite->findPhase->previous->getGraphBuilderConfig->getPlugins->return->new->Plugins
GraalCompilerTest#getDefaultGraphBuilderSuite()::: graal compiler test get default graph builder suite:::return->backend->getSuites->getDefaultGraphBuilderSuite->copy
GraalCompilerTest#registerInvocationPlugins(InvocationPlugins):::Registers extra invocation plugins for this test:::invocationPlugins->new->InvocationPlugin->register->invocationPlugins->new->InvocationPlugin->register->invocationPlugins->new->InvocationPlugin->register
GraalCompilerTest#getCustomGraphBuilderSuite(GraphBuilderConfiguration)::: graal compiler test get custom graph builder suite:::suite->getDefaultGraphBuilderSuite->iterator->suite->findPhase->initializeInvocationPluginExtensions->gbConfCopy->gbConf->copy->editGraphBuilderConfiguration->iterator->remove->iterator->new->GraphBuilderPhase->add->return
GraalCompilerTest#initializeInvocationPluginExtensions()::: graal compiler test initialize invocation plugin extensions:::if->synchronized->if->invocationPlugins->new->InvocationPlugins->registerInvocationPlugins->getReplacements->getGraphBuilderPlugins->getInvocationPlugins->extendedInvocationPlugins->addTestPlugins
GraalCompilerTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)::: graal compiler test edit graph builder configuration:::conf->getPlugins->new->InlineInvokePlugin->prependInlineInvokePlugin->return
GraalCompilerTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[]):::Supplements BytecodeParserForceInline and BytecodeParserNeverInline in terms of allowing a test to influence the inlining decision made during bytecode parsing.:::return
GraalCompilerTest#getReplacements()::: graal compiler test get replacements:::return->getProviders->getReplacements
GraalCompilerTest#branchProbability(double, boolean):::Inject a probability for a branch condition into the profiling information of this test case.:::return->GraalDirectives->injectBranchProbability
GraalCompilerTest#iterationCount(double, boolean):::Inject an iteration count for a loop condition into the profiling information of this test case.:::return->GraalDirectives->injectIterationCount
GraalCompilerTest#isArchitecture(String):::Test if the current test runs on the given platform:::return->name->backend->getTarget->getName->equals
GraalDebugHandlersFactoryTest#createUniqueTest()::: graal debug handlers factory test create unique test:::maxFileNameLengthField->getDeclaredField->try->maxFileNameLengthField->setAccessible->catch->Assume->ex->getClass->getSimpleName->equals->assumeFalse->finally->maxFileNameLength->maxFileNameLengthField->getInt->createUniqueMethod->getDeclaredMethod->createUniqueMethod->setAccessible->tmpDir->Files->Paths->get->createTempDirectory->options->OptionValues->tmpDir->toString->asMap->new->OptionValues->try->foreach->new->booleanArr->foreach->new->StringArr->for->i->catch->finally->deleteTree
GraalDebugHandlersFactoryTest#deleteTree(Path)::: graal debug handlers factory test delete tree:::Files->walk->Comparator->reverseOrder->sorted->Path->toFile->map->File->delete->forEach
GraphEncoderTest#test01()::: graph encoder test test01:::testStringMethods
GraphEncoderTest#test02()::: graph encoder test test02:::testStringMethods
GraphEncoderTest#testStringMethods(boolean)::: graph encoder test test string methods:::originalGraphs->new->ArrayList<>->foreach->getDeclaredMethods->javaMethod->getMetaAccess->lookupJavaMethod->if->javaMethod->hasBytecodes->originalGraph->parseEager->if->context->getProviders->new->CanonicalizerPhase->apply->originalGraphs->add->encoder->getTarget->new->GraphEncoder->foreach->encoder->prepare->encoder->finishPrepare->startOffsets->new->HashMap<>->foreach->startOffsets->encoder->encode->put->foreach->encodedGraph->encoder->getEncoding->startOffsets->get->encoder->getObjects->encoder->getNodeClasses->new->EncodedGraph->encoder->verifyEncoding
GraphResetDebugTest#testSnippet()::: graph reset debug test test snippet:::
GraphResetDebugTest#test1()::: graph reset debug test test1:::assumeManagementLibraryIsLoadable->map->EconomicMap->create->map->put->debug->new->OptionValues->getDebugContext->graph->parseEager->resetSucceeded->try->scope->debug->scope->graph->DebugContext->getInitialOptions->disabled->resetDebug->catch->finally->Assert->assertFalse
GraphScheduleTest#assertOrderedAfterSchedule(StructuredGraph, Node, Node)::: graph schedule test assert ordered after schedule:::assertOrderedAfterSchedule
GraphScheduleTest#assertOrderedAfterSchedule(StructuredGraph, SchedulePhase.SchedulingStrategy, Node, Node)::: graph schedule test assert ordered after schedule:::ibp->new->SchedulePhase->ibp->apply->assertOrderedAfterLastSchedule
GraphScheduleTest#assertOrderedAfterLastSchedule(StructuredGraph, Node, Node)::: graph schedule test assert ordered after last schedule:::graph->getLastSchedule->assertOrderedAfterSchedule
GraphScheduleTest#assertOrderedAfterSchedule(ScheduleResult, Node, Node)::: graph schedule test assert ordered after schedule:::nodeToBlock->ibp->getCFG->getNodeToBlock->bBlock->nodeToBlock->get->aBlock->nodeToBlock->get->if->instructions->ibp->nodesFor->Assert->instructions->indexOf->instructions->indexOf->assertTrue->else->block->while->if->return->block->getDominator->Assert->fail
GraphScheduleTest#getSpeculationLog()::: graph schedule test get speculation log:::return->getCodeCache->createSpeculationLog
GuardPrioritiesTest#growing(int)::: guard priorities test growing:::if->GraalDirectives->deoptimizeAndInvalidateWithSpeculation
GuardPrioritiesTest#growingTest()::: guard priorities test growing test:::getInitialOptions->getValue->assumeTrue->graph->prepareGraph->guards->graph->getNodes->n->inputs->filter->isNotEmpty->filter->isNotEmpty->assertThat->hasCount->assumeThat->iterator->guards->iterator->g1->iterator->next->g2->iterator->next->g1->getSpeculation->equals->g2->getSpeculation->equals->assertTrue->withSpeculation->g1->getSpeculation->equals->withoutSpeculation->g1->getSpeculation->equals->assertOrderedAfterSchedule
GuardPrioritiesTest#prepareGraph(String)::: guard priorities test prepare graph:::graph->parseEager->highTierContext->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->new->ConvertDeoptimizeToGuardPhase->apply->new->LoweringPhase->apply->new->FloatingReadPhase->apply->return
GuardPrioritiesTest#unknownCondition(Integer, Object, int[], Integer)::: guard priorities test unknown condition:::if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidate->if->GraalDirectives->deoptimizeAndInvalidateWithSpeculation->return
GuardPrioritiesTest#unknownTest()::: guard priorities test unknown test:::getInitialOptions->getValue->assumeTrue->graph->prepareGraph->new->SchedulePhase->apply->foreach->graph->getNodes->foreach->graph->getNodes->if->g1->getSpeculation->equals->g2->getSpeculation->equals->withSpeculation->g1->getSpeculation->equals->withoutSpeculation->g1->getSpeculation->equals->if->withoutSpeculation->isNegated->withoutSpeculation->getCondition->isNullNode->withoutSpeculation->getCondition->if->isNullNode->getValue->isNullNode->getValue->index->assertOrderedAfterLastSchedule->continue->assertOrderedAfterLastSchedule
HashCodeTest.OverrideHashCode#hashCode()::: override hash code hash code:::return
HashCodeTest#initialize(Class)::: hash code test initialize:::try->Class->c->getName->c->getClassLoader->forName->catch->throw->new->AssertionError->finally
HashCodeTest#hashCodeSnippet01(Object)::: hash code test hash code snippet01:::return->o->hashCode
HashCodeTest#systemIdentityHashCodeSnippet01(Object)::: hash code test system identity hash code snippet01:::return->System->identityHashCode
HashCodeTest#hashCodeFoldSnippet01()::: hash code test hash code fold snippet01:::return->NonOverridingConstant->hashCode
HashCodeTest#identityHashCodeFoldSnippet01()::: hash code test identity hash code fold snippet01:::return->System->identityHashCode
HashCodeTest#identityHashCodeFoldOverridingSnippet01()::: hash code test identity hash code fold overriding snippet01:::return->System->identityHashCode
HashCodeTest#dontOverrideHashCodeFinalClass(DontOverrideHashCode)::: hash code test dont override hash code final class:::return->o->hashCode
HashCodeTest#test01()::: hash code test test01:::new->Object->test
HashCodeTest#test02()::: hash code test test02:::new->Object->test
HashCodeTest#test03()::: hash code test test03:::g->buildGraphAfterMidTier->Assert->g->getNodes->filter->count->assertEquals
HashCodeTest#test04()::: hash code test test04:::g->buildGraphAfterMidTier->Assert->g->getNodes->filter->count->assertEquals
HashCodeTest#test05()::: hash code test test05:::g->buildGraphAfterMidTier->Assert->g->getNodes->filter->count->assertEquals
HashCodeTest#test06()::: hash code test test06:::initialize->g->buildGraphAfterMidTier->Assert->g->getNodes->filter->count->assertEquals
HashCodeTest#buildGraphAfterMidTier(String)::: hash code test build graph after mid tier:::g->getResolvedJavaMethod->parseForCompile->options->getInitialOptions->new->HighTier->getDefaultHighTierContext->apply->new->MidTier->getProviders->getTargetProvider->g->getProfilingInfo->new->MidTierContext->apply->return
HashMapGetTest#mapGet(HashMap, Integer)::: hash map get test map get:::map->get
HashMapGetTest#hashMapTest()::: hash map get test hash map test:::map->new->HashMap<>->get->getResolvedJavaMethod->for->i->test->foreach->lastCompiledGraph->getNodes->condition->ifNode->condition->if->ifNode->getTrueSuccessorProbability->ifNode->trueSuccessor->next->ifNode->trueSuccessor->ifNode->trueSuccessor->next->assertTrue
IfCanonicalizerTest#referenceSnippet(int)::: if canonicalizer test reference snippet:::return
IfCanonicalizerTest#test1()::: if canonicalizer test test1:::test
IfCanonicalizerTest#test1Snippet(int)::: if canonicalizer test test1 snippet:::if->return->else->return
IfCanonicalizerTest#test2()::: if canonicalizer test test2:::test
IfCanonicalizerTest#test2Snippet(int)::: if canonicalizer test test2 snippet:::if->if->if->return->else->return->return
IfCanonicalizerTest#test3()::: if canonicalizer test test3:::test
IfCanonicalizerTest#test3Snippet(int)::: if canonicalizer test test3 snippet:::if->if->if->return->else->if->if->if->if->return->else->return->return
IfCanonicalizerTest#test4()::: if canonicalizer test test4:::test
IfCanonicalizerTest#test4Snippet(int)::: if canonicalizer test test4 snippet:::if->return->return
IfCanonicalizerTest#test5()::: if canonicalizer test test5:::test
IfCanonicalizerTest#test5Snippet(int)::: if canonicalizer test test5 snippet:::val->if->if->return->return
IfCanonicalizerTest#test6()::: if canonicalizer test test6:::testCombinedIf->new->intArr->test
IfCanonicalizerTest#test6Snippet(int[])::: if canonicalizer test test6 snippet:::i->if->return->return
IfCanonicalizerTest#test7()::: if canonicalizer test test7:::testCombinedIf->test
IfCanonicalizerTest#test7Snippet(int)::: if canonicalizer test test7 snippet:::if->return->return
IfCanonicalizerTest#test8()::: if canonicalizer test test8:::testCombinedIf->test
IfCanonicalizerTest#test8Snippet(int)::: if canonicalizer test test8 snippet:::if->return->return
IfCanonicalizerTest#test9()::: if canonicalizer test test9:::testCombinedIf->test->test
IfCanonicalizerTest#test9Snippet(int)::: if canonicalizer test test9 snippet:::return
IfCanonicalizerTest#test10()::: if canonicalizer test test10:::test
IfCanonicalizerTest#test10Snippet(int, int)::: if canonicalizer test test10 snippet:::return
IfCanonicalizerTest#test11()::: if canonicalizer test test11:::test
IfCanonicalizerTest#test11Snippet(int, int)::: if canonicalizer test test11 snippet:::normalizeCompare->normalizeCompareLong->if->return->return
IfCanonicalizerTest#normalizeCompareLong(int, int)::: if canonicalizer test normalize compare long:::return
IfCanonicalizerTest#testCombinedIf(String, int)::: if canonicalizer test test combined if:::graph->parseEager->context->getProviders->new->CanonicalizerPhase->new->LoweringPhase->apply->new->FloatingReadPhase->apply->midContext->getProviders->getTargetProvider->graph->getProfilingInfo->new->MidTierContext->new->GuardLoweringPhase->apply->new->CanonicalizerPhase->new->LoweringPhase->apply->new->CanonicalizerPhase->apply->graph->getNodes->filter->count->assertDeepEquals
IfCanonicalizerTest#test(String)::: if canonicalizer test test:::graph->parseEager->debug->graph->getDebug->param->graph->getNodes->iterator->next->constant->ConstantNode->forInt->foreach->param->usages->snapshot->if->n->replaceFirstInput->debug->dump->new->CanonicalizerPhase->getProviders->apply->foreach->param->usages->filter->snapshot->fs->replaceFirstInput->param->safeDelete->referenceGraph->parseEager->assertEquals
IfReorderTest#test1()::: if reorder test test1:::new->ArrayList<>->test
IfReorderTest#test1Snippet(Object)::: if reorder test test1 snippet:::if->branchProbability->return->if->branchProbability->return->return
ImplicitNullCheckTest#test1Snippet(Object)::: implicit null check test test1 snippet:::if->GraalDirectives->guardingNonNull->return->return
ImplicitNullCheckTest#test1()::: implicit null check test test1:::test
ImplicitNullCheckTest#test(String)::: implicit null check test test:::debug->getDebugContext->try->s->debug->new->DebugDumpScope->scope->graph->parseEager->context->getProviders->new->CanonicalizerPhase->new->LoweringPhase->apply->new->FloatingReadPhase->apply->midTierContext->getProviders->getTargetProvider->graph->getProfilingInfo->new->MidTierContext->new->GuardLoweringPhase->apply->Assert->graph->getNodes->count->assertEquals->Assert->graph->getNodes->filter->first->canNullCheck->assertTrue->catch->throw->debug->handle->finally
InfopointReasonTest#testMethod()::: infopoint reason test test method:::sb->new->StringBuilder->foreach->sb->append->append->sb->sb->length->sb->length->replace->return->sb->toString
InfopointReasonTest#callInfopoints()::: infopoint reason test call infopoints:::method->getResolvedJavaMethod->graph->parseEager->cr->graph->method->getProviders->getBackend->getDefaultGraphBuilderSuite->graph->getProfilingInfo->graph->getOptions->createSuites->graph->getOptions->createLIRSuites->graph->compilationId->new->CompilationResult->compileGraph->foreach->cr->getInfopoints->assertNotNull->if->assertDeepEquals
InfopointReasonTest#lineInfopoints()::: infopoint reason test line infopoints:::method->getResolvedJavaMethod->graph->AllowAssumptions->OptAssumptions->getInitialOptions->getValue->ifTrue->builder->getDebugGraphBuilderSuite->parse->graphLineSPs->foreach->graph->getNodes->filter->if->ipn->getReason->assertTrue->graphBuilderSuite->GraphBuilderConfiguration->getDefaultGraphBuilderPlugins->getDefault->withFullInfopoints->getCustomGraphBuilderSuite->cr->graph->method->getProviders->getBackend->graph->getProfilingInfo->graph->getOptions->createSuites->graph->getOptions->createLIRSuites->graph->compilationId->new->CompilationResult->compileGraph->lineSPs->foreach->cr->getInfopoints->assertNotNull->if->assertTrue
InstalledCodeInvalidationTest#recurse(InstalledCode, int)::: installed code invalidation test recurse:::if->code->executeVarargs->else->GraalDirectives->deoptimizeAndInvalidate->code->invalidate->if->GraalDirectives->inCompiledCode->throw->new->InternalError
InstalledCodeInvalidationTest#testInstalledCodeInvalidation():::Test that after uncommon trapping in an installed code it's still possible to invalidate all existing activations of that installed code.:::code->getMetaAccess->getMethod->lookupJavaMethod->getCode->code->executeVarargs
IntegerDivPowerOf2Test#positiveDivByPowerOf2(boolean)::: integer div power of2 test positive div by power of2:::val->GraalDirectives->blackhole->return
IntegerDivPowerOf2Test#testPositiveDivByPowerOf2()::: integer div power of2 test test positive div by power of2:::graph->getResolvedJavaMethod->parseForCompile->countShiftNode->assertTrue
IntegerDivPowerOf2Test#countShiftNode(StructuredGraph)::: integer div power of2 test count shift node:::return->graph->getNodes->filter->count
IntegerDivPowerOf2Test#unknownDivByPowerOf2(boolean)::: integer div power of2 test unknown div by power of2:::val->GraalDirectives->blackhole->return
IntegerDivPowerOf2Test#testUnknownDivByPowerOf2()::: integer div power of2 test test unknown div by power of2:::graph->getResolvedJavaMethod->parseForCompile->graph->getNodes->filter->count->assertTrue
IntegerDivRemConstantTest#intDivPositiveConstant(int)::: integer div rem constant test int div positive constant:::return
IntegerDivRemConstantTest#testIntDivPositiveConstant()::: integer div rem constant test test int div positive constant:::test->test->test->test->test
IntegerDivRemConstantTest#intDivIntegerMax(int)::: integer div rem constant test int div integer max:::return
IntegerDivRemConstantTest#testIntDivIntegerMax()::: integer div rem constant test test int div integer max:::test->test->test->test->test
IntegerDivRemConstantTest#intDivNegativeConstant(int)::: integer div rem constant test int div negative constant:::return
IntegerDivRemConstantTest#testIntDivNegativeConstant()::: integer div rem constant test test int div negative constant:::test->test->test->test->test
IntegerDivRemConstantTest#intDivIntegerMinOdd(int)::: integer div rem constant test int div integer min odd:::return
IntegerDivRemConstantTest#testIntDivIntegerMinOdd()::: integer div rem constant test test int div integer min odd:::test->test->test->test->test
IntegerDivRemConstantTest#longDivPositiveConstant(long)::: integer div rem constant test long div positive constant:::return
IntegerDivRemConstantTest#testLongDivPositiveConstant()::: integer div rem constant test test long div positive constant:::test->test->test->test->test
IntegerDivRemConstantTest#longDivLongMax(long)::: integer div rem constant test long div long max:::return
IntegerDivRemConstantTest#testLongDivLongMax()::: integer div rem constant test test long div long max:::test->test->test->test->test
IntegerDivRemConstantTest#longDivNegativeConstant(long)::: integer div rem constant test long div negative constant:::return
IntegerDivRemConstantTest#testLongDivNegativeConstant()::: integer div rem constant test test long div negative constant:::test->test->test->test->test
IntegerDivRemConstantTest#longDivLongMinOdd(long)::: integer div rem constant test long div long min odd:::return
IntegerDivRemConstantTest#testLongDivLongMinOdd()::: integer div rem constant test test long div long min odd:::test->test->test->test->test
IntegerDivRemConstantTest#intRemPositiveConstant(int)::: integer div rem constant test int rem positive constant:::return
IntegerDivRemConstantTest#testIntRemPositiveConstant()::: integer div rem constant test test int rem positive constant:::test->test->test->test->test
IntegerDivRemConstantTest#intRemNegativeConstant(int)::: integer div rem constant test int rem negative constant:::return
IntegerDivRemConstantTest#testIntRemNegativeConstant()::: integer div rem constant test test int rem negative constant:::test->test->test->test->test
IntegerDivRemConstantTest#intRemZero(int)::: integer div rem constant test int rem zero:::return
IntegerDivRemConstantTest#testIntRemZero()::: integer div rem constant test test int rem zero:::test->test->test->test->test
IntegerDivRemConstantTest#intRemMax(int)::: integer div rem constant test int rem max:::return
IntegerDivRemConstantTest#testIntRemMax()::: integer div rem constant test test int rem max:::test->test->test->test->test
IntegerDivRemConstantTest#intRemMin(int)::: integer div rem constant test int rem min:::return
IntegerDivRemConstantTest#testIntRemMin()::: integer div rem constant test test int rem min:::test->test->test->test->test
IntegerDivRemConstantTest#longRemPositiveConstant(long)::: integer div rem constant test long rem positive constant:::return
IntegerDivRemConstantTest#intRemPowerOf2(int)::: integer div rem constant test int rem power of2:::return
IntegerDivRemConstantTest#testIntRemPowerOf2()::: integer div rem constant test test int rem power of2:::test->test->test->test->test
IntegerDivRemConstantTest#testLongRemPositiveConstant()::: integer div rem constant test test long rem positive constant:::test->test->test->test->test
IntegerDivRemConstantTest#longRemNegativeConstant(long)::: integer div rem constant test long rem negative constant:::return
IntegerDivRemConstantTest#testLongRemNegativeConstant()::: integer div rem constant test test long rem negative constant:::test->test->test->test->test
IntegerDivRemConstantTest#longRemZero(long)::: integer div rem constant test long rem zero:::return
IntegerDivRemConstantTest#testLongRemZero()::: integer div rem constant test test long rem zero:::test->test->test->test->test
IntegerDivRemConstantTest#longRemMax(long)::: integer div rem constant test long rem max:::return
IntegerDivRemConstantTest#testLongRemMax()::: integer div rem constant test test long rem max:::test->test->test->test->test
IntegerDivRemConstantTest#longRemMin(long)::: integer div rem constant test long rem min:::return
IntegerDivRemConstantTest#testLongRemMin()::: integer div rem constant test test long rem min:::test->test->test->test->test
IntegerDivRemConstantTest#longRemPowerOf2(long)::: integer div rem constant test long rem power of2:::return
IntegerDivRemConstantTest#testLongRemPowerOf2()::: integer div rem constant test test long rem power of2:::test->test->test->test->test
IntegerEqualsCanonicalizerTest#testSubtractEqualsZero()::: integer equals canonicalizer test test subtract equals zero:::test
IntegerEqualsCanonicalizerTest#testSubtractEqualsZeroReference(int, int)::: integer equals canonicalizer test test subtract equals zero reference:::if->return->return
IntegerEqualsCanonicalizerTest#testSubtractEqualsZeroSnippet(int, int)::: integer equals canonicalizer test test subtract equals zero snippet:::if->return->return
IntegerEqualsCanonicalizerTest#testSubtractEqualsZeroLong()::: integer equals canonicalizer test test subtract equals zero long:::test
IntegerEqualsCanonicalizerTest#testSubtractEqualsZeroLongReference(long, long)::: integer equals canonicalizer test test subtract equals zero long reference:::if->return->return
IntegerEqualsCanonicalizerTest#testSubtractEqualsZeroLongSnippet(long, long)::: integer equals canonicalizer test test subtract equals zero long snippet:::if->return->return
IntegerEqualsCanonicalizerTest#testShiftEquals():::Tests the canonicalization of (x >>> const) == 0 to x |test| (-1 << const).:::test
IntegerEqualsCanonicalizerTest#testShiftEqualsSnippet(int, int[], int)::: integer equals canonicalizer test test shift equals snippet:::
IntegerEqualsCanonicalizerTest#testShiftEqualsReference(int, int[], int)::: integer equals canonicalizer test test shift equals reference:::
IntegerEqualsCanonicalizerTest#testCompare()::: integer equals canonicalizer test test compare:::test
IntegerEqualsCanonicalizerTest#testCompareSnippet(int, int, int[], int[])::: integer equals canonicalizer test test compare snippet:::tempX->array1Length->array2Length
IntegerEqualsCanonicalizerTest#testCompareReference(int, int, int[], int[])::: integer equals canonicalizer test test compare reference:::array1Length->array2Length
IntegerEqualsCanonicalizerTest#testNormalIntegerTest(int)::: integer equals canonicalizer test test normal integer test:::return
IntegerEqualsCanonicalizerTest#testAlternateIntegerTest(int)::: integer equals canonicalizer test test alternate integer test:::return
IntegerEqualsCanonicalizerTest#testIntegerTest()::: integer equals canonicalizer test test integer test:::test
IntegerEqualsCanonicalizerTest#test(String, String)::: integer equals canonicalizer test test:::graph->getCanonicalizedGraph->referenceGraph->getCanonicalizedGraph->assertEquals
IntegerEqualsCanonicalizerTest#getCanonicalizedGraph(String)::: integer equals canonicalizer test get canonicalized graph:::graph->parseEager->new->CanonicalizerPhase->getProviders->apply->foreach->graph->getNodes->snapshot->state->replaceAtUsages->state->safeDelete->return
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck()::: overflow test test overflow check:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck01()::: overflow test test overflow check01:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck02()::: overflow test test overflow check02:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck03()::: overflow test test overflow check03:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertFalse
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck04()::: overflow test test overflow check04:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertFalse
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck05()::: overflow test test overflow check05:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck06()::: overflow test test overflow check06:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue->Assert->IntegerStamp->multiplicationOverflows->assertFalse->Assert->IntegerStamp->multiplicationOverflows->assertFalse
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck07()::: overflow test test overflow check07:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck08()::: overflow test test overflow check08:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck09()::: overflow test test overflow check09:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck10()::: overflow test test overflow check10:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue
IntegerStampMulFoldTest.OverflowTest#testOverflowCheck11()::: overflow test test overflow check11:::a->b->Assert->IntegerStamp->multiplicationOverflows->assertTrue
IntegerStampMulFoldTest.FoldTest#computeStamp()::: fold test compute stamp:::a->StampFactory->forInteger->b->StampFactory->forInteger->result->foldMul->for->l1
IntegerStampMulFoldTest.FoldTest#data()::: fold test data:::tests->new->ArrayList<>->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->addTest->return
IntegerStampMulFoldTest.FoldTest#addTest(ArrayList, long, long, long, long, int)::: fold test add test:::tests->new->ObjectArr->add
IntegerStampMulFoldTest#foldMul(IntegerStamp, IntegerStamp)::: integer stamp mul fold test fold mul:::return->getMul->foldStamp
IntegerStampShiftTest#unsignedShiftPositiveInt(boolean)::: integer stamp shift test unsigned shift positive int:::h->return
IntegerStampShiftTest#testUnsignedShiftPositiveInt()::: integer stamp shift test test unsigned shift positive int:::test
IntegerStampShiftTest#unsignedShiftNegativeInt(boolean)::: integer stamp shift test unsigned shift negative int:::h->return
IntegerStampShiftTest#testUnsignedShiftNegativeInt()::: integer stamp shift test test unsigned shift negative int:::test
IntegerStampShiftTest#unsignedShiftPositiveLong(boolean)::: integer stamp shift test unsigned shift positive long:::h->return
IntegerStampShiftTest#testUnsignedShiftPositiveLong()::: integer stamp shift test test unsigned shift positive long:::test
IntegerStampShiftTest#unsignedShiftNegativeLong(boolean)::: integer stamp shift test unsigned shift negative long:::h->return
IntegerStampShiftTest#testUnsignedShiftNegativeLong()::: integer stamp shift test test unsigned shift negative long:::test
InterfaceMethodHandleTest.I#m()::: i m:::
InterfaceMethodHandleTest.I#m2(int, int, int, int, int, int, int, int, int, int)::: i m2:::
InterfaceMethodHandleTest.A#m()::: a m:::return
InterfaceMethodHandleTest.A#m2(int, int, int, int, int, int, int, int, int, int)::: a m2:::return
InterfaceMethodHandleTest.M2Thrower#m()::: m2 thrower m:::return
InterfaceMethodHandleTest.M2Thrower#m2(int, int, int, int, int, int, int, int, int, int)::: m2 thrower m2:::throw->new->InternalError
InterfaceMethodHandleTest#invokeInterfaceHandle(I)::: interface method handle test invoke interface handle:::return->INTERFACE_HANDLE_M->invokeExact
InterfaceMethodHandleTest#testInvokeInterface01()::: interface method handle test test invoke interface01:::new->A->test
InterfaceMethodHandleTest#testInvokeInterface02()::: interface method handle test test invoke interface02:::loader->findClass->getDeclaredConstructor->newInstance->test
InterfaceMethodHandleTest#invokeInterfaceHandle2(I, int, int, int, int, int, int, int, int, int, int)::: interface method handle test invoke interface handle2:::return->INTERFACE_HANDLE_M2->invokeExact
InterfaceMethodHandleTest#addMethod(DebugContext, ResolvedJavaMethod, CompilationResult)::: interface method handle test add method:::if->method->getDeclaringClass->getMetaAccess->lookupJavaType->equals->return->getBackend->createDefaultInstalledCode->return->super->addMethod
InterfaceMethodHandleTest#testInvokeInterface03():::Try to exercise a mixed calling sequence with regular JIT code calling a method handle that can't be inlined with an implementation compiled by Graal that throws an exception.:::goodInstance->new->A->badInstance->new->M2Thrower->getMetaAccess->getMethod->lookupJavaMethod->getCode->for->x
InterfaceMethodHandleTest.Gen#bytesForB():::Construct a type which claims to implement I but with incorrect access on I#m so that an exception must be thrown.:::cw->new->ClassWriter->mv->jvmName->NAME->replace->cw->new->StringArr->BASENAME->replace->visit->cw->visitMethod->mv->visitCode->l0->new->Label->mv->visitLabel->mv->visitVarInsn->mv->visitMethodInsn->mv->visitInsn->l1->new->Label->mv->visitLabel->mv->visitMaxs->mv->visitEnd->cw->visitMethod->mv->visitCode->new->Label->mv->visitLabel->mv->visitInsn->mv->visitInsn->new->Label->mv->visitLabel->mv->visitMaxs->mv->visitEnd->cw->visitEnd->cw->visitMethod->mv->visitCode->new->Label->mv->visitLabel->mv->visitInsn->mv->visitInsn->new->Label->mv->visitLabel->mv->visitMaxs->mv->visitEnd->cw->visitEnd->return->cw->toByteArray
InterfaceMethodHandleTest.AsmLoader#findClass(String)::: asm loader find class:::if->name->equals->if->return->bytes->Gen->bytesForB->return->defineClass->else->return->super->findClass
InvocationPluginsTest#assertNotIsEmpty(InvocationPlugins)::: invocation plugins test assert not is empty:::childInvocationPlugins->new->InvocationPlugins->invocationPlugins->isEmpty->assertFalse->childInvocationPlugins->isEmpty->assertFalse->invocationPlugins->closeRegistration->invocationPlugins->isEmpty->assertFalse->childInvocationPlugins->isEmpty->assertFalse
InvocationPluginsTest#testIsEmptyWithNormalRegistration()::: invocation plugins test test is empty with normal registration:::invocationPlugins->new->InvocationPlugins->invocationPlugins->isEmpty->assertTrue->r->new->Registration->r->new->InvocationPlugin->register1->assertNotIsEmpty
InvocationPluginsTest#testIsEmptyWithDeferredRegistration()::: invocation plugins test test is empty with deferred registration:::invocationPlugins->new->InvocationPlugins->invocationPlugins->isEmpty->assertTrue->invocationPlugins->new->Runnable->defer->assertNotIsEmpty
InvocationPluginsTest#testIsEmptyWithLateRegistration()::: invocation plugins test test is empty with late registration:::invocationPlugins->new->InvocationPlugins->invocationPlugins->isEmpty->assertTrue->try->lr->new->LateRegistration->lr->new->InvocationPlugin->register->catch->finally->assertNotIsEmpty
InvokeExceptionTest#throwException(int)::: invoke exception test throw exception:::if->throw->new->RuntimeException
InvokeExceptionTest#test1()::: invoke exception test test1:::for->i->test
InvokeExceptionTest#test1Snippet(int)::: invoke exception test test1 snippet:::throwException
InvokeExceptionTest#test(String)::: invoke exception test test:::graph->parseProfiled->hints->new->HashMap<>->foreach->graph->getInvokes->hints->put->context->getDefaultHighTierContext->new->CanonicalizerPhase->createInliningPhase->apply->new->CanonicalizerPhase->apply->new->DeadCodeEliminationPhase->apply
InvokeHintsTest#const1()::: invoke hints test const1:::return
InvokeHintsTest#const7()::: invoke hints test const7:::return
InvokeHintsTest#referenceSnippet()::: invoke hints test reference snippet:::return
InvokeHintsTest#test1()::: invoke hints test test1:::test
InvokeHintsTest#test1Snippet()::: invoke hints test test1 snippet:::return->const7
InvokeHintsTest#test2()::: invoke hints test test2:::test
InvokeHintsTest#test2Snippet()::: invoke hints test test2 snippet:::return->const1->const1->const1->const1->const1->const1->const1
InvokeHintsTest#test(String)::: invoke hints test test:::graph->parseEager->hints->new->HashMap<>->foreach->graph->getInvokes->hints->put->context->getDefaultHighTierContext->new->CanonicalizerPhase->createInliningPhase->apply->new->CanonicalizerPhase->apply->new->DeadCodeEliminationPhase->apply->referenceGraph->parseEager->assertEquals
LockEliminationTest.A#getValue()::: a get value:::return
LockEliminationTest#testSynchronizedSnippet(A, A)::: lock elimination test test synchronized snippet:::synchronized->synchronized
LockEliminationTest#testLock()::: lock elimination test test lock:::new->A->new->A->test->graph->getGraph->new->CanonicalizerPhase->getProviders->apply->new->LockEliminationPhase->apply->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals
LockEliminationTest#testSynchronizedMethodSnippet(A)::: lock elimination test test synchronized method snippet:::value1->x->getValue->value2->x->getValue
LockEliminationTest#testSynchronizedMethod()::: lock elimination test test synchronized method:::new->A->test->graph->getGraph->new->CanonicalizerPhase->getProviders->apply->new->LockEliminationPhase->apply->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals
LockEliminationTest#testUnrolledSyncSnippet(Object)::: lock elimination test test unrolled sync snippet:::for->i
LockEliminationTest#testUnrolledSync()::: lock elimination test test unrolled sync:::graph->getGraph->canonicalizer->new->CanonicalizerPhase->canonicalizer->getProviders->apply->context->getDefaultHighTierContext->new->DefaultLoopPolicies->new->LoopFullUnrollPhase->apply->new->LockEliminationPhase->apply->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals
LockEliminationTest#getGraph(String, boolean)::: lock elimination test get graph:::method->getResolvedJavaMethod->graph->parseEager->context->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->canonicalizer->apply->createInliningPhase->apply->new->CanonicalizerPhase->apply->new->DeadCodeEliminationPhase->apply->if->graph->getOptions->new->PartialEscapePhase->apply->new->CanonicalizerPhase->new->LoweringPhase->apply->return
LockEliminationTest#testEscapeAnalysisSnippet(A)::: lock elimination test test escape analysis snippet:::newA->new->A->synchronized->synchronized->synchronized->synchronized
LockEliminationTest#testEscapeAnalysis()::: lock elimination test test escape analysis:::graph->getGraph->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals->new->LockEliminationPhase->apply->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals
LongNodeChainTest#testLongAddChain()::: long node chain test test long add chain:::longAddChain->longAddChain
LongNodeChainTest#longAddChain(boolean)::: long node chain test long add chain:::context->getDefaultHighTierContext->options->getInitialOptions->graph->DebugContext->create->new->StructuredGraph.Builder->build->constant->graph->ConstantNode->forPrimitive->unique->value->if->opaque->graph->new->OpaqueNode->unique->addNode->graph->new->AddNode->unique->for->i->opaque->remove->else->for->i->returnNode->graph->new->ReturnNode->add->graph->start->setNext->foreach->new->SchedulePhase->apply->new->CanonicalizerPhase->apply->asConstant->returnNode->result->asConstant->Assert->asConstant->asInt->assertEquals
LoopFullUnrollTest#testMinToMax(int)::: loop full unroll test test min to max:::ret->current->for->i->return
LoopFullUnrollTest#runMinToMax()::: loop full unroll test run min to max:::test
LoopFullUnrollTest#testMinTo0(int)::: loop full unroll test test min to0:::ret->current->for->i->return
LoopFullUnrollTest#runMinTo0()::: loop full unroll test run min to0:::test
LoopFullUnrollTest#testNegativeTripCount(int)::: loop full unroll test test negative trip count:::ret->current->for->i->return
LoopFullUnrollTest#runNegativeTripCount()::: loop full unroll test run negative trip count:::test
LoopFullUnrollTest#test(String, int)::: loop full unroll test test:::debug->getDebugContext->try->s->debug->getClass->getSimpleName->new->DebugDumpScope->scope->graph->parseEager->context->getProviders->new->CanonicalizerPhase->new->DefaultLoopPolicies->new->LoopFullUnrollPhase->apply->graph->getNodes->filter->count->assertTrue->catch->throw->debug->handle->finally
LoopUnswitchTest#referenceSnippet1(int)::: loop unswitch test reference snippet1:::sum->if->for->i->else->for->i->return
LoopUnswitchTest#test1Snippet(int)::: loop unswitch test test1 snippet:::sum->for->i->return
LoopUnswitchTest#referenceSnippet2(int)::: loop unswitch test reference snippet2:::sum->switch->for->i->break->for->i->break->for->i->break->for->i->break->return
LoopUnswitchTest#test2Snippet(int)::: loop unswitch test test2 snippet:::sum->for->i->return
LoopUnswitchTest#test1()::: loop unswitch test test1:::test
LoopUnswitchTest#test2()::: loop unswitch test test2:::test
LoopUnswitchTest#test(String, String)::: loop unswitch test test:::debug->getDebugContext->graph->parseEager->referenceGraph->parseEager->new->DefaultLoopPolicies->new->LoopUnswitchingPhase->apply->graph->clearAllStateAfter->referenceGraph->clearAllStateAfter->new->CanonicalizerPhase->getProviders->apply->new->CanonicalizerPhase->getProviders->apply->try->s->debug->new->DebugDumpScope->scope->assertEquals->catch->throw->debug->handle->finally
MarkUnsafeAccessTest#getRaw()::: mark unsafe access test get raw:::unsafe->getInt
MarkUnsafeAccessTest#get()::: mark unsafe access test get:::unsafe->getInt
MarkUnsafeAccessTest#putRaw()::: mark unsafe access test put raw:::unsafe->putInt
MarkUnsafeAccessTest#put()::: mark unsafe access test put:::unsafe->putInt
MarkUnsafeAccessTest#cas()::: mark unsafe access test cas:::unsafe->compareAndSwapInt
MarkUnsafeAccessTest#noAccess()::: mark unsafe access test no access:::unsafe->addressSize->unsafe->pageSize
MarkUnsafeAccessTest#assertHasUnsafe(String, boolean)::: mark unsafe access test assert has unsafe:::Assert->getResolvedJavaMethod->compile->hasUnsafeAccess->assertEquals
MarkUnsafeAccessTest#testGet()::: mark unsafe access test test get:::assertHasUnsafe->assertHasUnsafe
MarkUnsafeAccessTest#testPut()::: mark unsafe access test test put:::assertHasUnsafe->assertHasUnsafe
MarkUnsafeAccessTest#testCas()::: mark unsafe access test test cas:::assertHasUnsafe
MarkUnsafeAccessTest#testNoAcces()::: mark unsafe access test test no acces:::assertHasUnsafe
MarkUnsafeAccessTest.MappedByteBufferGetter#get(MappedByteBuffer)::: mapped byte buffer getter get:::
MarkUnsafeAccessTest#testStandard()::: mark unsafe access test test standard:::MappedByteBuffer->get->testMappedByteBuffer
MarkUnsafeAccessTest#testCompiled()::: mark unsafe access test test compiled:::Assume->System->getProperty->equalsIgnoreCase->assumeFalse->getMethod->new->Class<?>Arr->getMethod->asResolvedJavaMethod->mbbClass->getMetaAccess->lookupJavaType->getMethodImpl->mbbClass->findUniqueConcreteMethod->getResult->Assert->assertNotNull->graph->parseForCompile->highContext->getDefaultHighTierContext->new->CanonicalizerPhase->apply->new->InlineEverythingPolicy->new->CanonicalizerPhase->new->InliningPhase->apply->compiledCode->getCode->try->return->compiledCode->executeVarargs->catch->Assert->fail->return->finally->testMappedByteBuffer
MarkUnsafeAccessTest#testMappedByteBuffer(MappedByteBufferGetter)::: mark unsafe access test test mapped byte buffer:::tmp->Files->createTempFile->tmp->toFile->deleteOnExit->tmpFileChannel->FileChannel->open->bb->ByteBuffer->allocate->while->bb->remaining->bb->putInt->for->i->tmpFileChannel->force->mbb->tmpFileChannel->map->Assert->mbb->get->assertEquals->mbb->mbb->position->position->Assert->mbb->get->assertEquals->truncated->try->tmpFileChannel->truncate->tmpFileChannel->force->catch->finally->Assume->assumeTrue->try->mbb->position->getter->get->new->File->exists->catch->return->finally->Assert->fail
MatchRuleTest#getLIR()::: match rule test get r:::return
MatchRuleTest#createLIRSuites(OptionValues)::: match rule test create suites:::suites->super->createLIRSuites->suites->getPreAllocationOptimizationStage->new->CheckPhase->appendPhase->return
MatchRuleTest.CheckPhase#run(TargetDescription, LIRGenerationResult, PreAllocationOptimizationContext)::: check phase run:::lirGenRes->getLIR
MatchRuleTest#checkLIR(String, Predicate, int)::: match rule test check r:::getResolvedJavaMethod->compile->actualOpNum->foreach->lir->lir->codeEmittingOrder->getLIRforBlock->if->predicate->test->Assert->assertEquals
MemoryArithmeticTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)::: memory arithmetic test get code:::return->super->getCode
MemoryArithmeticTest#before(ResolvedJavaMethod):::Called before a test is executed.:::method->reprofile
MemoryArithmeticTest#testBooleanCompare(FieldObject, boolean)::: memory arithmetic test test boolean compare:::if->return->return
MemoryArithmeticTest#testBooleanCompareConstant1(FieldObject)::: memory arithmetic test test boolean compare constant1:::if->return->return
MemoryArithmeticTest#testBooleanCompareConstant2(FieldObject)::: memory arithmetic test test boolean compare constant2:::if->return->return
MemoryArithmeticTest#testBooleanCompares()::: memory arithmetic test test boolean compares:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testBooleanNullCompares()::: memory arithmetic test test boolean null compares:::test
MemoryArithmeticTest#testBooleanNullCompares1()::: memory arithmetic test test boolean null compares1:::test
MemoryArithmeticTest#testBooleanNullCompares2()::: memory arithmetic test test boolean null compares2:::test
MemoryArithmeticTest#testByteCompare(FieldObject, byte)::: memory arithmetic test test byte compare:::if->return->return
MemoryArithmeticTest#testByteCompareConstant1(FieldObject)::: memory arithmetic test test byte compare constant1:::if->return->return
MemoryArithmeticTest#testByteCompareConstant2(FieldObject)::: memory arithmetic test test byte compare constant2:::if->return->return
MemoryArithmeticTest#testByteCompares()::: memory arithmetic test test byte compares:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullCompares()::: memory arithmetic test test byte null compares:::test
MemoryArithmeticTest#testByteNullCompares1()::: memory arithmetic test test byte null compares1:::test
MemoryArithmeticTest#testByteNullCompares2()::: memory arithmetic test test byte null compares2:::test
MemoryArithmeticTest#testByteCompareLess(FieldObject, byte)::: memory arithmetic test test byte compare less:::if->return->return
MemoryArithmeticTest#testByteCompareLessConstant1(FieldObject)::: memory arithmetic test test byte compare less constant1:::if->return->return
MemoryArithmeticTest#testByteCompareLessConstant2(FieldObject)::: memory arithmetic test test byte compare less constant2:::if->return->return
MemoryArithmeticTest#testByteComparesLess()::: memory arithmetic test test byte compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullComparesLess()::: memory arithmetic test test byte null compares less:::test
MemoryArithmeticTest#testByteNullComparesLess1()::: memory arithmetic test test byte null compares less1:::test
MemoryArithmeticTest#testByteNullComparesLess2()::: memory arithmetic test test byte null compares less2:::test
MemoryArithmeticTest#testByteSwappedCompareLess(FieldObject, byte)::: memory arithmetic test test byte swapped compare less:::if->return->return
MemoryArithmeticTest#testByteSwappedCompareLessConstant1(FieldObject)::: memory arithmetic test test byte swapped compare less constant1:::if->return->return
MemoryArithmeticTest#testByteSwappedCompareLessConstant2(FieldObject)::: memory arithmetic test test byte swapped compare less constant2:::if->return->return
MemoryArithmeticTest#testByteSwappedComparesLess()::: memory arithmetic test test byte swapped compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullSwappedComparesLess()::: memory arithmetic test test byte null swapped compares less:::test
MemoryArithmeticTest#testByteNullSwappedComparesLess1()::: memory arithmetic test test byte null swapped compares less1:::test
MemoryArithmeticTest#testByteNullSwappedComparesLess2()::: memory arithmetic test test byte null swapped compares less2:::test
MemoryArithmeticTest#testByteCompareLessEqual(FieldObject, byte)::: memory arithmetic test test byte compare less equal:::if->return->return
MemoryArithmeticTest#testByteCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test byte compare less equal constant1:::if->return->return
MemoryArithmeticTest#testByteCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test byte compare less equal constant2:::if->return->return
MemoryArithmeticTest#testByteComparesLessEqual()::: memory arithmetic test test byte compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullComparesLessEqual()::: memory arithmetic test test byte null compares less equal:::test
MemoryArithmeticTest#testByteNullComparesLessEqual1()::: memory arithmetic test test byte null compares less equal1:::test
MemoryArithmeticTest#testByteNullComparesLessEqual2()::: memory arithmetic test test byte null compares less equal2:::test
MemoryArithmeticTest#testByteSwappedCompareLessEqual(FieldObject, byte)::: memory arithmetic test test byte swapped compare less equal:::if->return->return
MemoryArithmeticTest#testByteSwappedCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test byte swapped compare less equal constant1:::if->return->return
MemoryArithmeticTest#testByteSwappedCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test byte swapped compare less equal constant2:::if->return->return
MemoryArithmeticTest#testByteSwappedComparesLessEqual()::: memory arithmetic test test byte swapped compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullSwappedComparesLessEqual()::: memory arithmetic test test byte null swapped compares less equal:::test
MemoryArithmeticTest#testByteNullSwappedComparesLessEqual1()::: memory arithmetic test test byte null swapped compares less equal1:::test
MemoryArithmeticTest#testByteNullSwappedComparesLessEqual2()::: memory arithmetic test test byte null swapped compares less equal2:::test
MemoryArithmeticTest#testByteCompareGreater(FieldObject, byte)::: memory arithmetic test test byte compare greater:::if->return->return
MemoryArithmeticTest#testByteCompareGreaterConstant1(FieldObject)::: memory arithmetic test test byte compare greater constant1:::if->return->return
MemoryArithmeticTest#testByteCompareGreaterConstant2(FieldObject)::: memory arithmetic test test byte compare greater constant2:::if->return->return
MemoryArithmeticTest#testByteComparesGreater()::: memory arithmetic test test byte compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullComparesGreater()::: memory arithmetic test test byte null compares greater:::test
MemoryArithmeticTest#testByteNullComparesGreater1()::: memory arithmetic test test byte null compares greater1:::test
MemoryArithmeticTest#testByteNullComparesGreater2()::: memory arithmetic test test byte null compares greater2:::test
MemoryArithmeticTest#testByteSwappedCompareGreater(FieldObject, byte)::: memory arithmetic test test byte swapped compare greater:::if->return->return
MemoryArithmeticTest#testByteSwappedCompareGreaterConstant1(FieldObject)::: memory arithmetic test test byte swapped compare greater constant1:::if->return->return
MemoryArithmeticTest#testByteSwappedCompareGreaterConstant2(FieldObject)::: memory arithmetic test test byte swapped compare greater constant2:::if->return->return
MemoryArithmeticTest#testByteSwappedComparesGreater()::: memory arithmetic test test byte swapped compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullSwappedComparesGreater()::: memory arithmetic test test byte null swapped compares greater:::test
MemoryArithmeticTest#testByteNullSwappedComparesGreater1()::: memory arithmetic test test byte null swapped compares greater1:::test
MemoryArithmeticTest#testByteNullSwappedComparesGreater2()::: memory arithmetic test test byte null swapped compares greater2:::test
MemoryArithmeticTest#testByteCompareGreaterEqual(FieldObject, byte)::: memory arithmetic test test byte compare greater equal:::if->return->return
MemoryArithmeticTest#testByteCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test byte compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testByteCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test byte compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testByteComparesGreaterEqual()::: memory arithmetic test test byte compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullComparesGreaterEqual()::: memory arithmetic test test byte null compares greater equal:::test
MemoryArithmeticTest#testByteNullComparesGreaterEqual1()::: memory arithmetic test test byte null compares greater equal1:::test
MemoryArithmeticTest#testByteNullComparesGreaterEqual2()::: memory arithmetic test test byte null compares greater equal2:::test
MemoryArithmeticTest#testByteSwappedCompareGreaterEqual(FieldObject, byte)::: memory arithmetic test test byte swapped compare greater equal:::if->return->return
MemoryArithmeticTest#testByteSwappedCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test byte swapped compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testByteSwappedCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test byte swapped compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testByteSwappedComparesGreaterEqual()::: memory arithmetic test test byte swapped compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullSwappedComparesGreaterEqual()::: memory arithmetic test test byte null swapped compares greater equal:::test
MemoryArithmeticTest#testByteNullSwappedComparesGreaterEqual1()::: memory arithmetic test test byte null swapped compares greater equal1:::test
MemoryArithmeticTest#testByteNullSwappedComparesGreaterEqual2()::: memory arithmetic test test byte null swapped compares greater equal2:::test
MemoryArithmeticTest#testShortCompare(FieldObject, short)::: memory arithmetic test test short compare:::if->return->return
MemoryArithmeticTest#testShortCompareConstant1(FieldObject)::: memory arithmetic test test short compare constant1:::if->return->return
MemoryArithmeticTest#testShortCompareConstant2(FieldObject)::: memory arithmetic test test short compare constant2:::if->return->return
MemoryArithmeticTest#testShortCompares()::: memory arithmetic test test short compares:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullCompares()::: memory arithmetic test test short null compares:::test
MemoryArithmeticTest#testShortNullCompares1()::: memory arithmetic test test short null compares1:::test
MemoryArithmeticTest#testShortNullCompares2()::: memory arithmetic test test short null compares2:::test
MemoryArithmeticTest#testShortCompareLess(FieldObject, short)::: memory arithmetic test test short compare less:::if->return->return
MemoryArithmeticTest#testShortCompareLessConstant1(FieldObject)::: memory arithmetic test test short compare less constant1:::if->return->return
MemoryArithmeticTest#testShortCompareLessConstant2(FieldObject)::: memory arithmetic test test short compare less constant2:::if->return->return
MemoryArithmeticTest#testShortComparesLess()::: memory arithmetic test test short compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullComparesLess()::: memory arithmetic test test short null compares less:::test
MemoryArithmeticTest#testShortNullComparesLess1()::: memory arithmetic test test short null compares less1:::test
MemoryArithmeticTest#testShortNullComparesLess2()::: memory arithmetic test test short null compares less2:::test
MemoryArithmeticTest#testShortSwappedCompareLess(FieldObject, short)::: memory arithmetic test test short swapped compare less:::if->return->return
MemoryArithmeticTest#testShortSwappedCompareLessConstant1(FieldObject)::: memory arithmetic test test short swapped compare less constant1:::if->return->return
MemoryArithmeticTest#testShortSwappedCompareLessConstant2(FieldObject)::: memory arithmetic test test short swapped compare less constant2:::if->return->return
MemoryArithmeticTest#testShortSwappedComparesLess()::: memory arithmetic test test short swapped compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullSwappedComparesLess()::: memory arithmetic test test short null swapped compares less:::test
MemoryArithmeticTest#testShortNullSwappedComparesLess1()::: memory arithmetic test test short null swapped compares less1:::test
MemoryArithmeticTest#testShortNullSwappedComparesLess2()::: memory arithmetic test test short null swapped compares less2:::test
MemoryArithmeticTest#testShortCompareLessEqual(FieldObject, short)::: memory arithmetic test test short compare less equal:::if->return->return
MemoryArithmeticTest#testShortCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test short compare less equal constant1:::if->return->return
MemoryArithmeticTest#testShortCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test short compare less equal constant2:::if->return->return
MemoryArithmeticTest#testShortComparesLessEqual()::: memory arithmetic test test short compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullComparesLessEqual()::: memory arithmetic test test short null compares less equal:::test
MemoryArithmeticTest#testShortNullComparesLessEqual1()::: memory arithmetic test test short null compares less equal1:::test
MemoryArithmeticTest#testShortNullComparesLessEqual2()::: memory arithmetic test test short null compares less equal2:::test
MemoryArithmeticTest#testShortSwappedCompareLessEqual(FieldObject, short)::: memory arithmetic test test short swapped compare less equal:::if->return->return
MemoryArithmeticTest#testShortSwappedCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test short swapped compare less equal constant1:::if->return->return
MemoryArithmeticTest#testShortSwappedCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test short swapped compare less equal constant2:::if->return->return
MemoryArithmeticTest#testShortSwappedComparesLessEqual()::: memory arithmetic test test short swapped compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullSwappedComparesLessEqual()::: memory arithmetic test test short null swapped compares less equal:::test
MemoryArithmeticTest#testShortNullSwappedComparesLessEqual1()::: memory arithmetic test test short null swapped compares less equal1:::test
MemoryArithmeticTest#testShortNullSwappedComparesLessEqual2()::: memory arithmetic test test short null swapped compares less equal2:::test
MemoryArithmeticTest#testShortCompareGreater(FieldObject, short)::: memory arithmetic test test short compare greater:::if->return->return
MemoryArithmeticTest#testShortCompareGreaterConstant1(FieldObject)::: memory arithmetic test test short compare greater constant1:::if->return->return
MemoryArithmeticTest#testShortCompareGreaterConstant2(FieldObject)::: memory arithmetic test test short compare greater constant2:::if->return->return
MemoryArithmeticTest#testShortComparesGreater()::: memory arithmetic test test short compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullComparesGreater()::: memory arithmetic test test short null compares greater:::test
MemoryArithmeticTest#testShortNullComparesGreater1()::: memory arithmetic test test short null compares greater1:::test
MemoryArithmeticTest#testShortNullComparesGreater2()::: memory arithmetic test test short null compares greater2:::test
MemoryArithmeticTest#testShortSwappedCompareGreater(FieldObject, short)::: memory arithmetic test test short swapped compare greater:::if->return->return
MemoryArithmeticTest#testShortSwappedCompareGreaterConstant1(FieldObject)::: memory arithmetic test test short swapped compare greater constant1:::if->return->return
MemoryArithmeticTest#testShortSwappedCompareGreaterConstant2(FieldObject)::: memory arithmetic test test short swapped compare greater constant2:::if->return->return
MemoryArithmeticTest#testShortSwappedComparesGreater()::: memory arithmetic test test short swapped compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullSwappedComparesGreater()::: memory arithmetic test test short null swapped compares greater:::test
MemoryArithmeticTest#testShortNullSwappedComparesGreater1()::: memory arithmetic test test short null swapped compares greater1:::test
MemoryArithmeticTest#testShortNullSwappedComparesGreater2()::: memory arithmetic test test short null swapped compares greater2:::test
MemoryArithmeticTest#testShortCompareGreaterEqual(FieldObject, short)::: memory arithmetic test test short compare greater equal:::if->return->return
MemoryArithmeticTest#testShortCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test short compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testShortCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test short compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testShortComparesGreaterEqual()::: memory arithmetic test test short compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullComparesGreaterEqual()::: memory arithmetic test test short null compares greater equal:::test
MemoryArithmeticTest#testShortNullComparesGreaterEqual1()::: memory arithmetic test test short null compares greater equal1:::test
MemoryArithmeticTest#testShortNullComparesGreaterEqual2()::: memory arithmetic test test short null compares greater equal2:::test
MemoryArithmeticTest#testShortSwappedCompareGreaterEqual(FieldObject, short)::: memory arithmetic test test short swapped compare greater equal:::if->return->return
MemoryArithmeticTest#testShortSwappedCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test short swapped compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testShortSwappedCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test short swapped compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testShortSwappedComparesGreaterEqual()::: memory arithmetic test test short swapped compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullSwappedComparesGreaterEqual()::: memory arithmetic test test short null swapped compares greater equal:::test
MemoryArithmeticTest#testShortNullSwappedComparesGreaterEqual1()::: memory arithmetic test test short null swapped compares greater equal1:::test
MemoryArithmeticTest#testShortNullSwappedComparesGreaterEqual2()::: memory arithmetic test test short null swapped compares greater equal2:::test
MemoryArithmeticTest#testCharCompare(FieldObject, char)::: memory arithmetic test test char compare:::if->return->return
MemoryArithmeticTest#testCharCompareConstant1(FieldObject)::: memory arithmetic test test char compare constant1:::if->return->return
MemoryArithmeticTest#testCharCompareConstant2(FieldObject)::: memory arithmetic test test char compare constant2:::if->return->return
MemoryArithmeticTest#testCharCompares()::: memory arithmetic test test char compares:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullCompares()::: memory arithmetic test test char null compares:::test
MemoryArithmeticTest#testCharNullCompares1()::: memory arithmetic test test char null compares1:::test
MemoryArithmeticTest#testCharNullCompares2()::: memory arithmetic test test char null compares2:::test
MemoryArithmeticTest#testCharCompareLess(FieldObject, char)::: memory arithmetic test test char compare less:::if->return->return
MemoryArithmeticTest#testCharCompareLessConstant1(FieldObject)::: memory arithmetic test test char compare less constant1:::if->return->return
MemoryArithmeticTest#testCharCompareLessConstant2(FieldObject)::: memory arithmetic test test char compare less constant2:::if->return->return
MemoryArithmeticTest#testCharComparesLess()::: memory arithmetic test test char compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullComparesLess()::: memory arithmetic test test char null compares less:::test
MemoryArithmeticTest#testCharNullComparesLess1()::: memory arithmetic test test char null compares less1:::test
MemoryArithmeticTest#testCharNullComparesLess2()::: memory arithmetic test test char null compares less2:::test
MemoryArithmeticTest#testCharSwappedCompareLess(FieldObject, char)::: memory arithmetic test test char swapped compare less:::if->return->return
MemoryArithmeticTest#testCharSwappedCompareLessConstant1(FieldObject)::: memory arithmetic test test char swapped compare less constant1:::if->return->return
MemoryArithmeticTest#testCharSwappedCompareLessConstant2(FieldObject)::: memory arithmetic test test char swapped compare less constant2:::if->return->return
MemoryArithmeticTest#testCharSwappedComparesLess()::: memory arithmetic test test char swapped compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullSwappedComparesLess()::: memory arithmetic test test char null swapped compares less:::test
MemoryArithmeticTest#testCharNullSwappedComparesLess1()::: memory arithmetic test test char null swapped compares less1:::test
MemoryArithmeticTest#testCharNullSwappedComparesLess2()::: memory arithmetic test test char null swapped compares less2:::test
MemoryArithmeticTest#testCharCompareLessEqual(FieldObject, char)::: memory arithmetic test test char compare less equal:::if->return->return
MemoryArithmeticTest#testCharCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test char compare less equal constant1:::if->return->return
MemoryArithmeticTest#testCharCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test char compare less equal constant2:::if->return->return
MemoryArithmeticTest#testCharComparesLessEqual()::: memory arithmetic test test char compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullComparesLessEqual()::: memory arithmetic test test char null compares less equal:::test
MemoryArithmeticTest#testCharNullComparesLessEqual1()::: memory arithmetic test test char null compares less equal1:::test
MemoryArithmeticTest#testCharNullComparesLessEqual2()::: memory arithmetic test test char null compares less equal2:::test
MemoryArithmeticTest#testCharSwappedCompareLessEqual(FieldObject, char)::: memory arithmetic test test char swapped compare less equal:::if->return->return
MemoryArithmeticTest#testCharSwappedCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test char swapped compare less equal constant1:::if->return->return
MemoryArithmeticTest#testCharSwappedCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test char swapped compare less equal constant2:::if->return->return
MemoryArithmeticTest#testCharSwappedComparesLessEqual()::: memory arithmetic test test char swapped compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullSwappedComparesLessEqual()::: memory arithmetic test test char null swapped compares less equal:::test
MemoryArithmeticTest#testCharNullSwappedComparesLessEqual1()::: memory arithmetic test test char null swapped compares less equal1:::test
MemoryArithmeticTest#testCharNullSwappedComparesLessEqual2()::: memory arithmetic test test char null swapped compares less equal2:::test
MemoryArithmeticTest#testCharCompareGreater(FieldObject, char)::: memory arithmetic test test char compare greater:::if->return->return
MemoryArithmeticTest#testCharCompareGreaterConstant1(FieldObject)::: memory arithmetic test test char compare greater constant1:::if->return->return
MemoryArithmeticTest#testCharCompareGreaterConstant2(FieldObject)::: memory arithmetic test test char compare greater constant2:::if->return->return
MemoryArithmeticTest#testCharComparesGreater()::: memory arithmetic test test char compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullComparesGreater()::: memory arithmetic test test char null compares greater:::test
MemoryArithmeticTest#testCharNullComparesGreater1()::: memory arithmetic test test char null compares greater1:::test
MemoryArithmeticTest#testCharNullComparesGreater2()::: memory arithmetic test test char null compares greater2:::test
MemoryArithmeticTest#testCharSwappedCompareGreater(FieldObject, char)::: memory arithmetic test test char swapped compare greater:::if->return->return
MemoryArithmeticTest#testCharSwappedCompareGreaterConstant1(FieldObject)::: memory arithmetic test test char swapped compare greater constant1:::if->return->return
MemoryArithmeticTest#testCharSwappedCompareGreaterConstant2(FieldObject)::: memory arithmetic test test char swapped compare greater constant2:::if->return->return
MemoryArithmeticTest#testCharSwappedComparesGreater()::: memory arithmetic test test char swapped compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullSwappedComparesGreater()::: memory arithmetic test test char null swapped compares greater:::test
MemoryArithmeticTest#testCharNullSwappedComparesGreater1()::: memory arithmetic test test char null swapped compares greater1:::test
MemoryArithmeticTest#testCharNullSwappedComparesGreater2()::: memory arithmetic test test char null swapped compares greater2:::test
MemoryArithmeticTest#testCharCompareGreaterEqual(FieldObject, char)::: memory arithmetic test test char compare greater equal:::if->return->return
MemoryArithmeticTest#testCharCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test char compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testCharCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test char compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testCharComparesGreaterEqual()::: memory arithmetic test test char compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullComparesGreaterEqual()::: memory arithmetic test test char null compares greater equal:::test
MemoryArithmeticTest#testCharNullComparesGreaterEqual1()::: memory arithmetic test test char null compares greater equal1:::test
MemoryArithmeticTest#testCharNullComparesGreaterEqual2()::: memory arithmetic test test char null compares greater equal2:::test
MemoryArithmeticTest#testCharSwappedCompareGreaterEqual(FieldObject, char)::: memory arithmetic test test char swapped compare greater equal:::if->return->return
MemoryArithmeticTest#testCharSwappedCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test char swapped compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testCharSwappedCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test char swapped compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testCharSwappedComparesGreaterEqual()::: memory arithmetic test test char swapped compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullSwappedComparesGreaterEqual()::: memory arithmetic test test char null swapped compares greater equal:::test
MemoryArithmeticTest#testCharNullSwappedComparesGreaterEqual1()::: memory arithmetic test test char null swapped compares greater equal1:::test
MemoryArithmeticTest#testCharNullSwappedComparesGreaterEqual2()::: memory arithmetic test test char null swapped compares greater equal2:::test
MemoryArithmeticTest#testIntCompare(FieldObject, int)::: memory arithmetic test test int compare:::if->return->return
MemoryArithmeticTest#testIntCompareConstant1(FieldObject)::: memory arithmetic test test int compare constant1:::if->return->return
MemoryArithmeticTest#testIntCompareConstant2(FieldObject)::: memory arithmetic test test int compare constant2:::if->return->return
MemoryArithmeticTest#testIntCompares()::: memory arithmetic test test int compares:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullCompares()::: memory arithmetic test test int null compares:::test
MemoryArithmeticTest#testIntNullCompares1()::: memory arithmetic test test int null compares1:::test
MemoryArithmeticTest#testIntNullCompares2()::: memory arithmetic test test int null compares2:::test
MemoryArithmeticTest#testIntCompareLess(FieldObject, int)::: memory arithmetic test test int compare less:::if->return->return
MemoryArithmeticTest#testIntCompareLessConstant1(FieldObject)::: memory arithmetic test test int compare less constant1:::if->return->return
MemoryArithmeticTest#testIntCompareLessConstant2(FieldObject)::: memory arithmetic test test int compare less constant2:::if->return->return
MemoryArithmeticTest#testIntComparesLess()::: memory arithmetic test test int compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullComparesLess()::: memory arithmetic test test int null compares less:::test
MemoryArithmeticTest#testIntNullComparesLess1()::: memory arithmetic test test int null compares less1:::test
MemoryArithmeticTest#testIntNullComparesLess2()::: memory arithmetic test test int null compares less2:::test
MemoryArithmeticTest#testIntSwappedCompareLess(FieldObject, int)::: memory arithmetic test test int swapped compare less:::if->return->return
MemoryArithmeticTest#testIntSwappedCompareLessConstant1(FieldObject)::: memory arithmetic test test int swapped compare less constant1:::if->return->return
MemoryArithmeticTest#testIntSwappedCompareLessConstant2(FieldObject)::: memory arithmetic test test int swapped compare less constant2:::if->return->return
MemoryArithmeticTest#testIntSwappedComparesLess()::: memory arithmetic test test int swapped compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullSwappedComparesLess()::: memory arithmetic test test int null swapped compares less:::test
MemoryArithmeticTest#testIntNullSwappedComparesLess1()::: memory arithmetic test test int null swapped compares less1:::test
MemoryArithmeticTest#testIntNullSwappedComparesLess2()::: memory arithmetic test test int null swapped compares less2:::test
MemoryArithmeticTest#testIntCompareLessEqual(FieldObject, int)::: memory arithmetic test test int compare less equal:::if->return->return
MemoryArithmeticTest#testIntCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test int compare less equal constant1:::if->return->return
MemoryArithmeticTest#testIntCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test int compare less equal constant2:::if->return->return
MemoryArithmeticTest#testIntComparesLessEqual()::: memory arithmetic test test int compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullComparesLessEqual()::: memory arithmetic test test int null compares less equal:::test
MemoryArithmeticTest#testIntNullComparesLessEqual1()::: memory arithmetic test test int null compares less equal1:::test
MemoryArithmeticTest#testIntNullComparesLessEqual2()::: memory arithmetic test test int null compares less equal2:::test
MemoryArithmeticTest#testIntSwappedCompareLessEqual(FieldObject, int)::: memory arithmetic test test int swapped compare less equal:::if->return->return
MemoryArithmeticTest#testIntSwappedCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test int swapped compare less equal constant1:::if->return->return
MemoryArithmeticTest#testIntSwappedCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test int swapped compare less equal constant2:::if->return->return
MemoryArithmeticTest#testIntSwappedComparesLessEqual()::: memory arithmetic test test int swapped compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullSwappedComparesLessEqual()::: memory arithmetic test test int null swapped compares less equal:::test
MemoryArithmeticTest#testIntNullSwappedComparesLessEqual1()::: memory arithmetic test test int null swapped compares less equal1:::test
MemoryArithmeticTest#testIntNullSwappedComparesLessEqual2()::: memory arithmetic test test int null swapped compares less equal2:::test
MemoryArithmeticTest#testIntCompareGreater(FieldObject, int)::: memory arithmetic test test int compare greater:::if->return->return
MemoryArithmeticTest#testIntCompareGreaterConstant1(FieldObject)::: memory arithmetic test test int compare greater constant1:::if->return->return
MemoryArithmeticTest#testIntCompareGreaterConstant2(FieldObject)::: memory arithmetic test test int compare greater constant2:::if->return->return
MemoryArithmeticTest#testIntComparesGreater()::: memory arithmetic test test int compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullComparesGreater()::: memory arithmetic test test int null compares greater:::test
MemoryArithmeticTest#testIntNullComparesGreater1()::: memory arithmetic test test int null compares greater1:::test
MemoryArithmeticTest#testIntNullComparesGreater2()::: memory arithmetic test test int null compares greater2:::test
MemoryArithmeticTest#testIntSwappedCompareGreater(FieldObject, int)::: memory arithmetic test test int swapped compare greater:::if->return->return
MemoryArithmeticTest#testIntSwappedCompareGreaterConstant1(FieldObject)::: memory arithmetic test test int swapped compare greater constant1:::if->return->return
MemoryArithmeticTest#testIntSwappedCompareGreaterConstant2(FieldObject)::: memory arithmetic test test int swapped compare greater constant2:::if->return->return
MemoryArithmeticTest#testIntSwappedComparesGreater()::: memory arithmetic test test int swapped compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullSwappedComparesGreater()::: memory arithmetic test test int null swapped compares greater:::test
MemoryArithmeticTest#testIntNullSwappedComparesGreater1()::: memory arithmetic test test int null swapped compares greater1:::test
MemoryArithmeticTest#testIntNullSwappedComparesGreater2()::: memory arithmetic test test int null swapped compares greater2:::test
MemoryArithmeticTest#testIntCompareGreaterEqual(FieldObject, int)::: memory arithmetic test test int compare greater equal:::if->return->return
MemoryArithmeticTest#testIntCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test int compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testIntCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test int compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testIntComparesGreaterEqual()::: memory arithmetic test test int compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullComparesGreaterEqual()::: memory arithmetic test test int null compares greater equal:::test
MemoryArithmeticTest#testIntNullComparesGreaterEqual1()::: memory arithmetic test test int null compares greater equal1:::test
MemoryArithmeticTest#testIntNullComparesGreaterEqual2()::: memory arithmetic test test int null compares greater equal2:::test
MemoryArithmeticTest#testIntSwappedCompareGreaterEqual(FieldObject, int)::: memory arithmetic test test int swapped compare greater equal:::if->return->return
MemoryArithmeticTest#testIntSwappedCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test int swapped compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testIntSwappedCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test int swapped compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testIntSwappedComparesGreaterEqual()::: memory arithmetic test test int swapped compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullSwappedComparesGreaterEqual()::: memory arithmetic test test int null swapped compares greater equal:::test
MemoryArithmeticTest#testIntNullSwappedComparesGreaterEqual1()::: memory arithmetic test test int null swapped compares greater equal1:::test
MemoryArithmeticTest#testIntNullSwappedComparesGreaterEqual2()::: memory arithmetic test test int null swapped compares greater equal2:::test
MemoryArithmeticTest#testFloatCompare(FieldObject, float)::: memory arithmetic test test float compare:::if->return->return
MemoryArithmeticTest#testFloatCompareConstant1(FieldObject)::: memory arithmetic test test float compare constant1:::if->return->return
MemoryArithmeticTest#testFloatCompareConstant2(FieldObject)::: memory arithmetic test test float compare constant2:::if->return->return
MemoryArithmeticTest#testFloatCompares()::: memory arithmetic test test float compares:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullCompares()::: memory arithmetic test test float null compares:::test
MemoryArithmeticTest#testFloatNullCompares1()::: memory arithmetic test test float null compares1:::test
MemoryArithmeticTest#testFloatNullCompares2()::: memory arithmetic test test float null compares2:::test
MemoryArithmeticTest#testFloatCompareLess(FieldObject, float)::: memory arithmetic test test float compare less:::if->return->return
MemoryArithmeticTest#testFloatCompareLessConstant1(FieldObject)::: memory arithmetic test test float compare less constant1:::if->return->return
MemoryArithmeticTest#testFloatCompareLessConstant2(FieldObject)::: memory arithmetic test test float compare less constant2:::if->return->return
MemoryArithmeticTest#testFloatComparesLess()::: memory arithmetic test test float compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullComparesLess()::: memory arithmetic test test float null compares less:::test
MemoryArithmeticTest#testFloatNullComparesLess1()::: memory arithmetic test test float null compares less1:::test
MemoryArithmeticTest#testFloatNullComparesLess2()::: memory arithmetic test test float null compares less2:::test
MemoryArithmeticTest#testFloatSwappedCompareLess(FieldObject, float)::: memory arithmetic test test float swapped compare less:::if->return->return
MemoryArithmeticTest#testFloatSwappedCompareLessConstant1(FieldObject)::: memory arithmetic test test float swapped compare less constant1:::if->return->return
MemoryArithmeticTest#testFloatSwappedCompareLessConstant2(FieldObject)::: memory arithmetic test test float swapped compare less constant2:::if->return->return
MemoryArithmeticTest#testFloatSwappedComparesLess()::: memory arithmetic test test float swapped compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullSwappedComparesLess()::: memory arithmetic test test float null swapped compares less:::test
MemoryArithmeticTest#testFloatNullSwappedComparesLess1()::: memory arithmetic test test float null swapped compares less1:::test
MemoryArithmeticTest#testFloatNullSwappedComparesLess2()::: memory arithmetic test test float null swapped compares less2:::test
MemoryArithmeticTest#testFloatCompareLessEqual(FieldObject, float)::: memory arithmetic test test float compare less equal:::if->return->return
MemoryArithmeticTest#testFloatCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test float compare less equal constant1:::if->return->return
MemoryArithmeticTest#testFloatCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test float compare less equal constant2:::if->return->return
MemoryArithmeticTest#testFloatComparesLessEqual()::: memory arithmetic test test float compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullComparesLessEqual()::: memory arithmetic test test float null compares less equal:::test
MemoryArithmeticTest#testFloatNullComparesLessEqual1()::: memory arithmetic test test float null compares less equal1:::test
MemoryArithmeticTest#testFloatNullComparesLessEqual2()::: memory arithmetic test test float null compares less equal2:::test
MemoryArithmeticTest#testFloatSwappedCompareLessEqual(FieldObject, float)::: memory arithmetic test test float swapped compare less equal:::if->return->return
MemoryArithmeticTest#testFloatSwappedCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test float swapped compare less equal constant1:::if->return->return
MemoryArithmeticTest#testFloatSwappedCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test float swapped compare less equal constant2:::if->return->return
MemoryArithmeticTest#testFloatSwappedComparesLessEqual()::: memory arithmetic test test float swapped compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullSwappedComparesLessEqual()::: memory arithmetic test test float null swapped compares less equal:::test
MemoryArithmeticTest#testFloatNullSwappedComparesLessEqual1()::: memory arithmetic test test float null swapped compares less equal1:::test
MemoryArithmeticTest#testFloatNullSwappedComparesLessEqual2()::: memory arithmetic test test float null swapped compares less equal2:::test
MemoryArithmeticTest#testFloatCompareGreater(FieldObject, float)::: memory arithmetic test test float compare greater:::if->return->return
MemoryArithmeticTest#testFloatCompareGreaterConstant1(FieldObject)::: memory arithmetic test test float compare greater constant1:::if->return->return
MemoryArithmeticTest#testFloatCompareGreaterConstant2(FieldObject)::: memory arithmetic test test float compare greater constant2:::if->return->return
MemoryArithmeticTest#testFloatComparesGreater()::: memory arithmetic test test float compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullComparesGreater()::: memory arithmetic test test float null compares greater:::test
MemoryArithmeticTest#testFloatNullComparesGreater1()::: memory arithmetic test test float null compares greater1:::test
MemoryArithmeticTest#testFloatNullComparesGreater2()::: memory arithmetic test test float null compares greater2:::test
MemoryArithmeticTest#testFloatSwappedCompareGreater(FieldObject, float)::: memory arithmetic test test float swapped compare greater:::if->return->return
MemoryArithmeticTest#testFloatSwappedCompareGreaterConstant1(FieldObject)::: memory arithmetic test test float swapped compare greater constant1:::if->return->return
MemoryArithmeticTest#testFloatSwappedCompareGreaterConstant2(FieldObject)::: memory arithmetic test test float swapped compare greater constant2:::if->return->return
MemoryArithmeticTest#testFloatSwappedComparesGreater()::: memory arithmetic test test float swapped compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullSwappedComparesGreater()::: memory arithmetic test test float null swapped compares greater:::test
MemoryArithmeticTest#testFloatNullSwappedComparesGreater1()::: memory arithmetic test test float null swapped compares greater1:::test
MemoryArithmeticTest#testFloatNullSwappedComparesGreater2()::: memory arithmetic test test float null swapped compares greater2:::test
MemoryArithmeticTest#testFloatCompareGreaterEqual(FieldObject, float)::: memory arithmetic test test float compare greater equal:::if->return->return
MemoryArithmeticTest#testFloatCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test float compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testFloatCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test float compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testFloatComparesGreaterEqual()::: memory arithmetic test test float compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullComparesGreaterEqual()::: memory arithmetic test test float null compares greater equal:::test
MemoryArithmeticTest#testFloatNullComparesGreaterEqual1()::: memory arithmetic test test float null compares greater equal1:::test
MemoryArithmeticTest#testFloatNullComparesGreaterEqual2()::: memory arithmetic test test float null compares greater equal2:::test
MemoryArithmeticTest#testFloatSwappedCompareGreaterEqual(FieldObject, float)::: memory arithmetic test test float swapped compare greater equal:::if->return->return
MemoryArithmeticTest#testFloatSwappedCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test float swapped compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testFloatSwappedCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test float swapped compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testFloatSwappedComparesGreaterEqual()::: memory arithmetic test test float swapped compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullSwappedComparesGreaterEqual()::: memory arithmetic test test float null swapped compares greater equal:::test
MemoryArithmeticTest#testFloatNullSwappedComparesGreaterEqual1()::: memory arithmetic test test float null swapped compares greater equal1:::test
MemoryArithmeticTest#testFloatNullSwappedComparesGreaterEqual2()::: memory arithmetic test test float null swapped compares greater equal2:::test
MemoryArithmeticTest#testLongCompare(FieldObject, long)::: memory arithmetic test test long compare:::if->return->return
MemoryArithmeticTest#testLongCompareConstant1(FieldObject)::: memory arithmetic test test long compare constant1:::if->return->return
MemoryArithmeticTest#testLongCompareConstant2(FieldObject)::: memory arithmetic test test long compare constant2:::if->return->return
MemoryArithmeticTest#testLongCompares()::: memory arithmetic test test long compares:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullCompares()::: memory arithmetic test test long null compares:::test
MemoryArithmeticTest#testLongNullCompares1()::: memory arithmetic test test long null compares1:::test
MemoryArithmeticTest#testLongNullCompares2()::: memory arithmetic test test long null compares2:::test
MemoryArithmeticTest#testLongCompareLess(FieldObject, long)::: memory arithmetic test test long compare less:::if->return->return
MemoryArithmeticTest#testLongCompareLessConstant1(FieldObject)::: memory arithmetic test test long compare less constant1:::if->return->return
MemoryArithmeticTest#testLongCompareLessConstant2(FieldObject)::: memory arithmetic test test long compare less constant2:::if->return->return
MemoryArithmeticTest#testLongComparesLess()::: memory arithmetic test test long compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullComparesLess()::: memory arithmetic test test long null compares less:::test
MemoryArithmeticTest#testLongNullComparesLess1()::: memory arithmetic test test long null compares less1:::test
MemoryArithmeticTest#testLongNullComparesLess2()::: memory arithmetic test test long null compares less2:::test
MemoryArithmeticTest#testLongSwappedCompareLess(FieldObject, long)::: memory arithmetic test test long swapped compare less:::if->return->return
MemoryArithmeticTest#testLongSwappedCompareLessConstant1(FieldObject)::: memory arithmetic test test long swapped compare less constant1:::if->return->return
MemoryArithmeticTest#testLongSwappedCompareLessConstant2(FieldObject)::: memory arithmetic test test long swapped compare less constant2:::if->return->return
MemoryArithmeticTest#testLongSwappedComparesLess()::: memory arithmetic test test long swapped compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullSwappedComparesLess()::: memory arithmetic test test long null swapped compares less:::test
MemoryArithmeticTest#testLongNullSwappedComparesLess1()::: memory arithmetic test test long null swapped compares less1:::test
MemoryArithmeticTest#testLongNullSwappedComparesLess2()::: memory arithmetic test test long null swapped compares less2:::test
MemoryArithmeticTest#testLongCompareLessEqual(FieldObject, long)::: memory arithmetic test test long compare less equal:::if->return->return
MemoryArithmeticTest#testLongCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test long compare less equal constant1:::if->return->return
MemoryArithmeticTest#testLongCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test long compare less equal constant2:::if->return->return
MemoryArithmeticTest#testLongComparesLessEqual()::: memory arithmetic test test long compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullComparesLessEqual()::: memory arithmetic test test long null compares less equal:::test
MemoryArithmeticTest#testLongNullComparesLessEqual1()::: memory arithmetic test test long null compares less equal1:::test
MemoryArithmeticTest#testLongNullComparesLessEqual2()::: memory arithmetic test test long null compares less equal2:::test
MemoryArithmeticTest#testLongSwappedCompareLessEqual(FieldObject, long)::: memory arithmetic test test long swapped compare less equal:::if->return->return
MemoryArithmeticTest#testLongSwappedCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test long swapped compare less equal constant1:::if->return->return
MemoryArithmeticTest#testLongSwappedCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test long swapped compare less equal constant2:::if->return->return
MemoryArithmeticTest#testLongSwappedComparesLessEqual()::: memory arithmetic test test long swapped compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullSwappedComparesLessEqual()::: memory arithmetic test test long null swapped compares less equal:::test
MemoryArithmeticTest#testLongNullSwappedComparesLessEqual1()::: memory arithmetic test test long null swapped compares less equal1:::test
MemoryArithmeticTest#testLongNullSwappedComparesLessEqual2()::: memory arithmetic test test long null swapped compares less equal2:::test
MemoryArithmeticTest#testLongCompareGreater(FieldObject, long)::: memory arithmetic test test long compare greater:::if->return->return
MemoryArithmeticTest#testLongCompareGreaterConstant1(FieldObject)::: memory arithmetic test test long compare greater constant1:::if->return->return
MemoryArithmeticTest#testLongCompareGreaterConstant2(FieldObject)::: memory arithmetic test test long compare greater constant2:::if->return->return
MemoryArithmeticTest#testLongComparesGreater()::: memory arithmetic test test long compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullComparesGreater()::: memory arithmetic test test long null compares greater:::test
MemoryArithmeticTest#testLongNullComparesGreater1()::: memory arithmetic test test long null compares greater1:::test
MemoryArithmeticTest#testLongNullComparesGreater2()::: memory arithmetic test test long null compares greater2:::test
MemoryArithmeticTest#testLongSwappedCompareGreater(FieldObject, long)::: memory arithmetic test test long swapped compare greater:::if->return->return
MemoryArithmeticTest#testLongSwappedCompareGreaterConstant1(FieldObject)::: memory arithmetic test test long swapped compare greater constant1:::if->return->return
MemoryArithmeticTest#testLongSwappedCompareGreaterConstant2(FieldObject)::: memory arithmetic test test long swapped compare greater constant2:::if->return->return
MemoryArithmeticTest#testLongSwappedComparesGreater()::: memory arithmetic test test long swapped compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullSwappedComparesGreater()::: memory arithmetic test test long null swapped compares greater:::test
MemoryArithmeticTest#testLongNullSwappedComparesGreater1()::: memory arithmetic test test long null swapped compares greater1:::test
MemoryArithmeticTest#testLongNullSwappedComparesGreater2()::: memory arithmetic test test long null swapped compares greater2:::test
MemoryArithmeticTest#testLongCompareGreaterEqual(FieldObject, long)::: memory arithmetic test test long compare greater equal:::if->return->return
MemoryArithmeticTest#testLongCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test long compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testLongCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test long compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testLongComparesGreaterEqual()::: memory arithmetic test test long compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullComparesGreaterEqual()::: memory arithmetic test test long null compares greater equal:::test
MemoryArithmeticTest#testLongNullComparesGreaterEqual1()::: memory arithmetic test test long null compares greater equal1:::test
MemoryArithmeticTest#testLongNullComparesGreaterEqual2()::: memory arithmetic test test long null compares greater equal2:::test
MemoryArithmeticTest#testLongSwappedCompareGreaterEqual(FieldObject, long)::: memory arithmetic test test long swapped compare greater equal:::if->return->return
MemoryArithmeticTest#testLongSwappedCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test long swapped compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testLongSwappedCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test long swapped compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testLongSwappedComparesGreaterEqual()::: memory arithmetic test test long swapped compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullSwappedComparesGreaterEqual()::: memory arithmetic test test long null swapped compares greater equal:::test
MemoryArithmeticTest#testLongNullSwappedComparesGreaterEqual1()::: memory arithmetic test test long null swapped compares greater equal1:::test
MemoryArithmeticTest#testLongNullSwappedComparesGreaterEqual2()::: memory arithmetic test test long null swapped compares greater equal2:::test
MemoryArithmeticTest#testDoubleCompare(FieldObject, double)::: memory arithmetic test test double compare:::if->return->return
MemoryArithmeticTest#testDoubleCompareConstant1(FieldObject)::: memory arithmetic test test double compare constant1:::if->return->return
MemoryArithmeticTest#testDoubleCompareConstant2(FieldObject)::: memory arithmetic test test double compare constant2:::if->return->return
MemoryArithmeticTest#testDoubleCompares()::: memory arithmetic test test double compares:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullCompares()::: memory arithmetic test test double null compares:::test
MemoryArithmeticTest#testDoubleNullCompares1()::: memory arithmetic test test double null compares1:::test
MemoryArithmeticTest#testDoubleNullCompares2()::: memory arithmetic test test double null compares2:::test
MemoryArithmeticTest#testDoubleCompareLess(FieldObject, double)::: memory arithmetic test test double compare less:::if->return->return
MemoryArithmeticTest#testDoubleCompareLessConstant1(FieldObject)::: memory arithmetic test test double compare less constant1:::if->return->return
MemoryArithmeticTest#testDoubleCompareLessConstant2(FieldObject)::: memory arithmetic test test double compare less constant2:::if->return->return
MemoryArithmeticTest#testDoubleComparesLess()::: memory arithmetic test test double compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullComparesLess()::: memory arithmetic test test double null compares less:::test
MemoryArithmeticTest#testDoubleNullComparesLess1()::: memory arithmetic test test double null compares less1:::test
MemoryArithmeticTest#testDoubleNullComparesLess2()::: memory arithmetic test test double null compares less2:::test
MemoryArithmeticTest#testDoubleSwappedCompareLess(FieldObject, double)::: memory arithmetic test test double swapped compare less:::if->return->return
MemoryArithmeticTest#testDoubleSwappedCompareLessConstant1(FieldObject)::: memory arithmetic test test double swapped compare less constant1:::if->return->return
MemoryArithmeticTest#testDoubleSwappedCompareLessConstant2(FieldObject)::: memory arithmetic test test double swapped compare less constant2:::if->return->return
MemoryArithmeticTest#testDoubleSwappedComparesLess()::: memory arithmetic test test double swapped compares less:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullSwappedComparesLess()::: memory arithmetic test test double null swapped compares less:::test
MemoryArithmeticTest#testDoubleNullSwappedComparesLess1()::: memory arithmetic test test double null swapped compares less1:::test
MemoryArithmeticTest#testDoubleNullSwappedComparesLess2()::: memory arithmetic test test double null swapped compares less2:::test
MemoryArithmeticTest#testDoubleCompareLessEqual(FieldObject, double)::: memory arithmetic test test double compare less equal:::if->return->return
MemoryArithmeticTest#testDoubleCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test double compare less equal constant1:::if->return->return
MemoryArithmeticTest#testDoubleCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test double compare less equal constant2:::if->return->return
MemoryArithmeticTest#testDoubleComparesLessEqual()::: memory arithmetic test test double compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullComparesLessEqual()::: memory arithmetic test test double null compares less equal:::test
MemoryArithmeticTest#testDoubleNullComparesLessEqual1()::: memory arithmetic test test double null compares less equal1:::test
MemoryArithmeticTest#testDoubleNullComparesLessEqual2()::: memory arithmetic test test double null compares less equal2:::test
MemoryArithmeticTest#testDoubleSwappedCompareLessEqual(FieldObject, double)::: memory arithmetic test test double swapped compare less equal:::if->return->return
MemoryArithmeticTest#testDoubleSwappedCompareLessEqualConstant1(FieldObject)::: memory arithmetic test test double swapped compare less equal constant1:::if->return->return
MemoryArithmeticTest#testDoubleSwappedCompareLessEqualConstant2(FieldObject)::: memory arithmetic test test double swapped compare less equal constant2:::if->return->return
MemoryArithmeticTest#testDoubleSwappedComparesLessEqual()::: memory arithmetic test test double swapped compares less equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullSwappedComparesLessEqual()::: memory arithmetic test test double null swapped compares less equal:::test
MemoryArithmeticTest#testDoubleNullSwappedComparesLessEqual1()::: memory arithmetic test test double null swapped compares less equal1:::test
MemoryArithmeticTest#testDoubleNullSwappedComparesLessEqual2()::: memory arithmetic test test double null swapped compares less equal2:::test
MemoryArithmeticTest#testDoubleCompareGreater(FieldObject, double)::: memory arithmetic test test double compare greater:::if->return->return
MemoryArithmeticTest#testDoubleCompareGreaterConstant1(FieldObject)::: memory arithmetic test test double compare greater constant1:::if->return->return
MemoryArithmeticTest#testDoubleCompareGreaterConstant2(FieldObject)::: memory arithmetic test test double compare greater constant2:::if->return->return
MemoryArithmeticTest#testDoubleComparesGreater()::: memory arithmetic test test double compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullComparesGreater()::: memory arithmetic test test double null compares greater:::test
MemoryArithmeticTest#testDoubleNullComparesGreater1()::: memory arithmetic test test double null compares greater1:::test
MemoryArithmeticTest#testDoubleNullComparesGreater2()::: memory arithmetic test test double null compares greater2:::test
MemoryArithmeticTest#testDoubleSwappedCompareGreater(FieldObject, double)::: memory arithmetic test test double swapped compare greater:::if->return->return
MemoryArithmeticTest#testDoubleSwappedCompareGreaterConstant1(FieldObject)::: memory arithmetic test test double swapped compare greater constant1:::if->return->return
MemoryArithmeticTest#testDoubleSwappedCompareGreaterConstant2(FieldObject)::: memory arithmetic test test double swapped compare greater constant2:::if->return->return
MemoryArithmeticTest#testDoubleSwappedComparesGreater()::: memory arithmetic test test double swapped compares greater:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullSwappedComparesGreater()::: memory arithmetic test test double null swapped compares greater:::test
MemoryArithmeticTest#testDoubleNullSwappedComparesGreater1()::: memory arithmetic test test double null swapped compares greater1:::test
MemoryArithmeticTest#testDoubleNullSwappedComparesGreater2()::: memory arithmetic test test double null swapped compares greater2:::test
MemoryArithmeticTest#testDoubleCompareGreaterEqual(FieldObject, double)::: memory arithmetic test test double compare greater equal:::if->return->return
MemoryArithmeticTest#testDoubleCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test double compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testDoubleCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test double compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testDoubleComparesGreaterEqual()::: memory arithmetic test test double compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullComparesGreaterEqual()::: memory arithmetic test test double null compares greater equal:::test
MemoryArithmeticTest#testDoubleNullComparesGreaterEqual1()::: memory arithmetic test test double null compares greater equal1:::test
MemoryArithmeticTest#testDoubleNullComparesGreaterEqual2()::: memory arithmetic test test double null compares greater equal2:::test
MemoryArithmeticTest#testDoubleSwappedCompareGreaterEqual(FieldObject, double)::: memory arithmetic test test double swapped compare greater equal:::if->return->return
MemoryArithmeticTest#testDoubleSwappedCompareGreaterEqualConstant1(FieldObject)::: memory arithmetic test test double swapped compare greater equal constant1:::if->return->return
MemoryArithmeticTest#testDoubleSwappedCompareGreaterEqualConstant2(FieldObject)::: memory arithmetic test test double swapped compare greater equal constant2:::if->return->return
MemoryArithmeticTest#testDoubleSwappedComparesGreaterEqual()::: memory arithmetic test test double swapped compares greater equal:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullSwappedComparesGreaterEqual()::: memory arithmetic test test double null swapped compares greater equal:::test
MemoryArithmeticTest#testDoubleNullSwappedComparesGreaterEqual1()::: memory arithmetic test test double null swapped compares greater equal1:::test
MemoryArithmeticTest#testDoubleNullSwappedComparesGreaterEqual2()::: memory arithmetic test test double null swapped compares greater equal2:::test
MemoryArithmeticTest#testObjectCompare(FieldObject, Object)::: memory arithmetic test test object compare:::if->return->return
MemoryArithmeticTest#testObjectCompareConstant1(FieldObject)::: memory arithmetic test test object compare constant1:::if->return->return
MemoryArithmeticTest#testObjectCompareConstant2(FieldObject)::: memory arithmetic test test object compare constant2:::if->return->return
MemoryArithmeticTest#testObjectCompares()::: memory arithmetic test test object compares:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testObjectNullCompares()::: memory arithmetic test test object null compares:::test
MemoryArithmeticTest#testObjectNullCompares1()::: memory arithmetic test test object null compares1:::test
MemoryArithmeticTest#testObjectNullCompares2()::: memory arithmetic test test object null compares2:::test
MemoryArithmeticTest#testByteAdd(FieldObject, byte)::: memory arithmetic test test byte add:::return
MemoryArithmeticTest#testByteAddConstant1(FieldObject)::: memory arithmetic test test byte add constant1:::return
MemoryArithmeticTest#testByteAddConstant2(FieldObject)::: memory arithmetic test test byte add constant2:::return
MemoryArithmeticTest#testByteAdds()::: memory arithmetic test test byte adds:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullAdd()::: memory arithmetic test test byte null add:::test
MemoryArithmeticTest#testShortAdd(FieldObject, short)::: memory arithmetic test test short add:::return
MemoryArithmeticTest#testShortAddConstant1(FieldObject)::: memory arithmetic test test short add constant1:::return
MemoryArithmeticTest#testShortAddConstant2(FieldObject)::: memory arithmetic test test short add constant2:::return
MemoryArithmeticTest#testShortAdds()::: memory arithmetic test test short adds:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullAdd()::: memory arithmetic test test short null add:::test
MemoryArithmeticTest#testCharAdd(FieldObject, char)::: memory arithmetic test test char add:::return
MemoryArithmeticTest#testCharAddConstant1(FieldObject)::: memory arithmetic test test char add constant1:::return
MemoryArithmeticTest#testCharAddConstant2(FieldObject)::: memory arithmetic test test char add constant2:::return
MemoryArithmeticTest#testCharAdds()::: memory arithmetic test test char adds:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullAdd()::: memory arithmetic test test char null add:::test
MemoryArithmeticTest#testIntAdd(FieldObject, int)::: memory arithmetic test test int add:::return
MemoryArithmeticTest#testIntAddConstant1(FieldObject)::: memory arithmetic test test int add constant1:::return
MemoryArithmeticTest#testIntAddConstant2(FieldObject)::: memory arithmetic test test int add constant2:::return
MemoryArithmeticTest#testIntAdds()::: memory arithmetic test test int adds:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullAdd()::: memory arithmetic test test int null add:::test
MemoryArithmeticTest#testLongAdd(FieldObject, long)::: memory arithmetic test test long add:::return
MemoryArithmeticTest#testLongAddConstant1(FieldObject)::: memory arithmetic test test long add constant1:::return
MemoryArithmeticTest#testLongAddConstant2(FieldObject)::: memory arithmetic test test long add constant2:::return
MemoryArithmeticTest#testLongAdds()::: memory arithmetic test test long adds:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullAdd()::: memory arithmetic test test long null add:::test
MemoryArithmeticTest#testFloatAdd(FieldObject, float)::: memory arithmetic test test float add:::return
MemoryArithmeticTest#testFloatAddConstant1(FieldObject)::: memory arithmetic test test float add constant1:::return
MemoryArithmeticTest#testFloatAddConstant2(FieldObject)::: memory arithmetic test test float add constant2:::return
MemoryArithmeticTest#testFloatAdds()::: memory arithmetic test test float adds:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullAdd()::: memory arithmetic test test float null add:::test
MemoryArithmeticTest#testDoubleAdd(FieldObject, double)::: memory arithmetic test test double add:::return
MemoryArithmeticTest#testDoubleAddConstant1(FieldObject)::: memory arithmetic test test double add constant1:::return
MemoryArithmeticTest#testDoubleAddConstant2(FieldObject)::: memory arithmetic test test double add constant2:::return
MemoryArithmeticTest#testDoubleAdds()::: memory arithmetic test test double adds:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullAdd()::: memory arithmetic test test double null add:::test
MemoryArithmeticTest#testByteSub(FieldObject, byte)::: memory arithmetic test test byte sub:::return
MemoryArithmeticTest#testByteSubConstant1(FieldObject)::: memory arithmetic test test byte sub constant1:::return
MemoryArithmeticTest#testByteSubConstant2(FieldObject)::: memory arithmetic test test byte sub constant2:::return
MemoryArithmeticTest#testByteSubs()::: memory arithmetic test test byte subs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullSub()::: memory arithmetic test test byte null sub:::test
MemoryArithmeticTest#testShortSub(FieldObject, short)::: memory arithmetic test test short sub:::return
MemoryArithmeticTest#testShortSubConstant1(FieldObject)::: memory arithmetic test test short sub constant1:::return
MemoryArithmeticTest#testShortSubConstant2(FieldObject)::: memory arithmetic test test short sub constant2:::return
MemoryArithmeticTest#testShortSubs()::: memory arithmetic test test short subs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullSub()::: memory arithmetic test test short null sub:::test
MemoryArithmeticTest#testCharSub(FieldObject, char)::: memory arithmetic test test char sub:::return
MemoryArithmeticTest#testCharSubConstant1(FieldObject)::: memory arithmetic test test char sub constant1:::return
MemoryArithmeticTest#testCharSubConstant2(FieldObject)::: memory arithmetic test test char sub constant2:::return
MemoryArithmeticTest#testCharSubs()::: memory arithmetic test test char subs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullSub()::: memory arithmetic test test char null sub:::test
MemoryArithmeticTest#testIntSub(FieldObject, int)::: memory arithmetic test test int sub:::return
MemoryArithmeticTest#testIntSubConstant1(FieldObject)::: memory arithmetic test test int sub constant1:::return
MemoryArithmeticTest#testIntSubConstant2(FieldObject)::: memory arithmetic test test int sub constant2:::return
MemoryArithmeticTest#testIntSubs()::: memory arithmetic test test int subs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullSub()::: memory arithmetic test test int null sub:::test
MemoryArithmeticTest#testLongSub(FieldObject, long)::: memory arithmetic test test long sub:::return
MemoryArithmeticTest#testLongSubConstant1(FieldObject)::: memory arithmetic test test long sub constant1:::return
MemoryArithmeticTest#testLongSubConstant2(FieldObject)::: memory arithmetic test test long sub constant2:::return
MemoryArithmeticTest#testLongSubs()::: memory arithmetic test test long subs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullSub()::: memory arithmetic test test long null sub:::test
MemoryArithmeticTest#testFloatSub(FieldObject, float)::: memory arithmetic test test float sub:::return
MemoryArithmeticTest#testFloatSubConstant1(FieldObject)::: memory arithmetic test test float sub constant1:::return
MemoryArithmeticTest#testFloatSubConstant2(FieldObject)::: memory arithmetic test test float sub constant2:::return
MemoryArithmeticTest#testFloatSubs()::: memory arithmetic test test float subs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullSub()::: memory arithmetic test test float null sub:::test
MemoryArithmeticTest#testDoubleSub(FieldObject, double)::: memory arithmetic test test double sub:::return
MemoryArithmeticTest#testDoubleSubConstant1(FieldObject)::: memory arithmetic test test double sub constant1:::return
MemoryArithmeticTest#testDoubleSubConstant2(FieldObject)::: memory arithmetic test test double sub constant2:::return
MemoryArithmeticTest#testDoubleSubs()::: memory arithmetic test test double subs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullSub()::: memory arithmetic test test double null sub:::test
MemoryArithmeticTest#testByteMul(FieldObject, byte)::: memory arithmetic test test byte mul:::return
MemoryArithmeticTest#testByteMulConstant1(FieldObject)::: memory arithmetic test test byte mul constant1:::return
MemoryArithmeticTest#testByteMulConstant2(FieldObject)::: memory arithmetic test test byte mul constant2:::return
MemoryArithmeticTest#testByteMuls()::: memory arithmetic test test byte muls:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullMul()::: memory arithmetic test test byte null mul:::test
MemoryArithmeticTest#testShortMul(FieldObject, short)::: memory arithmetic test test short mul:::return
MemoryArithmeticTest#testShortMulConstant1(FieldObject)::: memory arithmetic test test short mul constant1:::return
MemoryArithmeticTest#testShortMulConstant2(FieldObject)::: memory arithmetic test test short mul constant2:::return
MemoryArithmeticTest#testShortMuls()::: memory arithmetic test test short muls:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullMul()::: memory arithmetic test test short null mul:::test
MemoryArithmeticTest#testCharMul(FieldObject, char)::: memory arithmetic test test char mul:::return
MemoryArithmeticTest#testCharMulConstant1(FieldObject)::: memory arithmetic test test char mul constant1:::return
MemoryArithmeticTest#testCharMulConstant2(FieldObject)::: memory arithmetic test test char mul constant2:::return
MemoryArithmeticTest#testCharMuls()::: memory arithmetic test test char muls:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullMul()::: memory arithmetic test test char null mul:::test
MemoryArithmeticTest#testIntMul(FieldObject, int)::: memory arithmetic test test int mul:::return
MemoryArithmeticTest#testIntMulConstant1(FieldObject)::: memory arithmetic test test int mul constant1:::return
MemoryArithmeticTest#testIntMulConstant2(FieldObject)::: memory arithmetic test test int mul constant2:::return
MemoryArithmeticTest#testIntMuls()::: memory arithmetic test test int muls:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullMul()::: memory arithmetic test test int null mul:::test
MemoryArithmeticTest#testLongMul(FieldObject, long)::: memory arithmetic test test long mul:::return
MemoryArithmeticTest#testLongMulConstant1(FieldObject)::: memory arithmetic test test long mul constant1:::return
MemoryArithmeticTest#testLongMulConstant2(FieldObject)::: memory arithmetic test test long mul constant2:::return
MemoryArithmeticTest#testLongMuls()::: memory arithmetic test test long muls:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullMul()::: memory arithmetic test test long null mul:::test
MemoryArithmeticTest#testFloatMul(FieldObject, float)::: memory arithmetic test test float mul:::return
MemoryArithmeticTest#testFloatMulConstant1(FieldObject)::: memory arithmetic test test float mul constant1:::return
MemoryArithmeticTest#testFloatMulConstant2(FieldObject)::: memory arithmetic test test float mul constant2:::return
MemoryArithmeticTest#testFloatMuls()::: memory arithmetic test test float muls:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullMul()::: memory arithmetic test test float null mul:::test
MemoryArithmeticTest#testDoubleMul(FieldObject, double)::: memory arithmetic test test double mul:::return
MemoryArithmeticTest#testDoubleMulConstant1(FieldObject)::: memory arithmetic test test double mul constant1:::return
MemoryArithmeticTest#testDoubleMulConstant2(FieldObject)::: memory arithmetic test test double mul constant2:::return
MemoryArithmeticTest#testDoubleMuls()::: memory arithmetic test test double muls:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullMul()::: memory arithmetic test test double null mul:::test
MemoryArithmeticTest#testByteDiv(FieldObject, byte)::: memory arithmetic test test byte div:::return
MemoryArithmeticTest#testByteDivConstant1(FieldObject)::: memory arithmetic test test byte div constant1:::return
MemoryArithmeticTest#testByteDivConstant2(FieldObject)::: memory arithmetic test test byte div constant2:::return
MemoryArithmeticTest#testByteDivs()::: memory arithmetic test test byte divs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullDiv()::: memory arithmetic test test byte null div:::test
MemoryArithmeticTest#testShortDiv(FieldObject, short)::: memory arithmetic test test short div:::return
MemoryArithmeticTest#testShortDivConstant1(FieldObject)::: memory arithmetic test test short div constant1:::return
MemoryArithmeticTest#testShortDivConstant2(FieldObject)::: memory arithmetic test test short div constant2:::return
MemoryArithmeticTest#testShortDivs()::: memory arithmetic test test short divs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullDiv()::: memory arithmetic test test short null div:::test
MemoryArithmeticTest#testCharDiv(FieldObject, char)::: memory arithmetic test test char div:::return
MemoryArithmeticTest#testCharDivConstant1(FieldObject)::: memory arithmetic test test char div constant1:::return
MemoryArithmeticTest#testCharDivConstant2(FieldObject)::: memory arithmetic test test char div constant2:::return
MemoryArithmeticTest#testCharDivs()::: memory arithmetic test test char divs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullDiv()::: memory arithmetic test test char null div:::test
MemoryArithmeticTest#testIntDiv(FieldObject, int)::: memory arithmetic test test int div:::return
MemoryArithmeticTest#testIntDivConstant1(FieldObject)::: memory arithmetic test test int div constant1:::return
MemoryArithmeticTest#testIntDivConstant2(FieldObject)::: memory arithmetic test test int div constant2:::return
MemoryArithmeticTest#testIntDivs()::: memory arithmetic test test int divs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullDiv()::: memory arithmetic test test int null div:::test
MemoryArithmeticTest#testLongDiv(FieldObject, long)::: memory arithmetic test test long div:::return
MemoryArithmeticTest#testLongDivConstant1(FieldObject)::: memory arithmetic test test long div constant1:::return
MemoryArithmeticTest#testLongDivConstant2(FieldObject)::: memory arithmetic test test long div constant2:::return
MemoryArithmeticTest#testLongDivs()::: memory arithmetic test test long divs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullDiv()::: memory arithmetic test test long null div:::test
MemoryArithmeticTest#testFloatDiv(FieldObject, float)::: memory arithmetic test test float div:::return
MemoryArithmeticTest#testFloatDivConstant1(FieldObject)::: memory arithmetic test test float div constant1:::return
MemoryArithmeticTest#testFloatDivConstant2(FieldObject)::: memory arithmetic test test float div constant2:::return
MemoryArithmeticTest#testFloatDivs()::: memory arithmetic test test float divs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testFloatNullDiv()::: memory arithmetic test test float null div:::test
MemoryArithmeticTest#testDoubleDiv(FieldObject, double)::: memory arithmetic test test double div:::return
MemoryArithmeticTest#testDoubleDivConstant1(FieldObject)::: memory arithmetic test test double div constant1:::return
MemoryArithmeticTest#testDoubleDivConstant2(FieldObject)::: memory arithmetic test test double div constant2:::return
MemoryArithmeticTest#testDoubleDivs()::: memory arithmetic test test double divs:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testDoubleNullDiv()::: memory arithmetic test test double null div:::test
MemoryArithmeticTest#testByteOr(FieldObject, byte)::: memory arithmetic test test byte or:::return
MemoryArithmeticTest#testByteOrConstant1(FieldObject)::: memory arithmetic test test byte or constant1:::return
MemoryArithmeticTest#testByteOrConstant2(FieldObject)::: memory arithmetic test test byte or constant2:::return
MemoryArithmeticTest#testByteOrs()::: memory arithmetic test test byte ors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullOr()::: memory arithmetic test test byte null or:::test
MemoryArithmeticTest#testShortOr(FieldObject, short)::: memory arithmetic test test short or:::return
MemoryArithmeticTest#testShortOrConstant1(FieldObject)::: memory arithmetic test test short or constant1:::return
MemoryArithmeticTest#testShortOrConstant2(FieldObject)::: memory arithmetic test test short or constant2:::return
MemoryArithmeticTest#testShortOrs()::: memory arithmetic test test short ors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullOr()::: memory arithmetic test test short null or:::test
MemoryArithmeticTest#testCharOr(FieldObject, char)::: memory arithmetic test test char or:::return
MemoryArithmeticTest#testCharOrConstant1(FieldObject)::: memory arithmetic test test char or constant1:::return
MemoryArithmeticTest#testCharOrConstant2(FieldObject)::: memory arithmetic test test char or constant2:::return
MemoryArithmeticTest#testCharOrs()::: memory arithmetic test test char ors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullOr()::: memory arithmetic test test char null or:::test
MemoryArithmeticTest#testIntOr(FieldObject, int)::: memory arithmetic test test int or:::return
MemoryArithmeticTest#testIntOrConstant1(FieldObject)::: memory arithmetic test test int or constant1:::return
MemoryArithmeticTest#testIntOrConstant2(FieldObject)::: memory arithmetic test test int or constant2:::return
MemoryArithmeticTest#testIntOrs()::: memory arithmetic test test int ors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullOr()::: memory arithmetic test test int null or:::test
MemoryArithmeticTest#testLongOr(FieldObject, long)::: memory arithmetic test test long or:::return
MemoryArithmeticTest#testLongOrConstant1(FieldObject)::: memory arithmetic test test long or constant1:::return
MemoryArithmeticTest#testLongOrConstant2(FieldObject)::: memory arithmetic test test long or constant2:::return
MemoryArithmeticTest#testLongOrs()::: memory arithmetic test test long ors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullOr()::: memory arithmetic test test long null or:::test
MemoryArithmeticTest#testByteXor(FieldObject, byte)::: memory arithmetic test test byte xor:::return
MemoryArithmeticTest#testByteXorConstant1(FieldObject)::: memory arithmetic test test byte xor constant1:::return
MemoryArithmeticTest#testByteXorConstant2(FieldObject)::: memory arithmetic test test byte xor constant2:::return
MemoryArithmeticTest#testByteXors()::: memory arithmetic test test byte xors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullXor()::: memory arithmetic test test byte null xor:::test
MemoryArithmeticTest#testShortXor(FieldObject, short)::: memory arithmetic test test short xor:::return
MemoryArithmeticTest#testShortXorConstant1(FieldObject)::: memory arithmetic test test short xor constant1:::return
MemoryArithmeticTest#testShortXorConstant2(FieldObject)::: memory arithmetic test test short xor constant2:::return
MemoryArithmeticTest#testShortXors()::: memory arithmetic test test short xors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullXor()::: memory arithmetic test test short null xor:::test
MemoryArithmeticTest#testCharXor(FieldObject, char)::: memory arithmetic test test char xor:::return
MemoryArithmeticTest#testCharXorConstant1(FieldObject)::: memory arithmetic test test char xor constant1:::return
MemoryArithmeticTest#testCharXorConstant2(FieldObject)::: memory arithmetic test test char xor constant2:::return
MemoryArithmeticTest#testCharXors()::: memory arithmetic test test char xors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullXor()::: memory arithmetic test test char null xor:::test
MemoryArithmeticTest#testIntXor(FieldObject, int)::: memory arithmetic test test int xor:::return
MemoryArithmeticTest#testIntXorConstant1(FieldObject)::: memory arithmetic test test int xor constant1:::return
MemoryArithmeticTest#testIntXorConstant2(FieldObject)::: memory arithmetic test test int xor constant2:::return
MemoryArithmeticTest#testIntXors()::: memory arithmetic test test int xors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullXor()::: memory arithmetic test test int null xor:::test
MemoryArithmeticTest#testLongXor(FieldObject, long)::: memory arithmetic test test long xor:::return
MemoryArithmeticTest#testLongXorConstant1(FieldObject)::: memory arithmetic test test long xor constant1:::return
MemoryArithmeticTest#testLongXorConstant2(FieldObject)::: memory arithmetic test test long xor constant2:::return
MemoryArithmeticTest#testLongXors()::: memory arithmetic test test long xors:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullXor()::: memory arithmetic test test long null xor:::test
MemoryArithmeticTest#testByteAnd(FieldObject, byte)::: memory arithmetic test test byte and:::return
MemoryArithmeticTest#testByteAndConstant1(FieldObject)::: memory arithmetic test test byte and constant1:::return
MemoryArithmeticTest#testByteAndConstant2(FieldObject)::: memory arithmetic test test byte and constant2:::return
MemoryArithmeticTest#testByteAnds()::: memory arithmetic test test byte ands:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testByteNullAnd()::: memory arithmetic test test byte null and:::test
MemoryArithmeticTest#testShortAnd(FieldObject, short)::: memory arithmetic test test short and:::return
MemoryArithmeticTest#testShortAndConstant1(FieldObject)::: memory arithmetic test test short and constant1:::return
MemoryArithmeticTest#testShortAndConstant2(FieldObject)::: memory arithmetic test test short and constant2:::return
MemoryArithmeticTest#testShortAnds()::: memory arithmetic test test short ands:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testShortNullAnd()::: memory arithmetic test test short null and:::test
MemoryArithmeticTest#testCharAnd(FieldObject, char)::: memory arithmetic test test char and:::return
MemoryArithmeticTest#testCharAndConstant1(FieldObject)::: memory arithmetic test test char and constant1:::return
MemoryArithmeticTest#testCharAndConstant2(FieldObject)::: memory arithmetic test test char and constant2:::return
MemoryArithmeticTest#testCharAnds()::: memory arithmetic test test char ands:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testCharNullAnd()::: memory arithmetic test test char null and:::test
MemoryArithmeticTest#testIntAnd(FieldObject, int)::: memory arithmetic test test int and:::return
MemoryArithmeticTest#testIntAndConstant1(FieldObject)::: memory arithmetic test test int and constant1:::return
MemoryArithmeticTest#testIntAndConstant2(FieldObject)::: memory arithmetic test test int and constant2:::return
MemoryArithmeticTest#testIntAnds()::: memory arithmetic test test int ands:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullAnd()::: memory arithmetic test test int null and:::test
MemoryArithmeticTest#testLongAnd(FieldObject, long)::: memory arithmetic test test long and:::return
MemoryArithmeticTest#testLongAndConstant1(FieldObject)::: memory arithmetic test test long and constant1:::return
MemoryArithmeticTest#testLongAndConstant2(FieldObject)::: memory arithmetic test test long and constant2:::return
MemoryArithmeticTest#testLongAnds()::: memory arithmetic test test long ands:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullAnd()::: memory arithmetic test test long null and:::test
MemoryArithmeticTest#testIntMask(FieldObject, int)::: memory arithmetic test test int mask:::if->return->return
MemoryArithmeticTest#testIntMaskConstant1(FieldObject)::: memory arithmetic test test int mask constant1:::return
MemoryArithmeticTest#testIntMaskConstant2(FieldObject)::: memory arithmetic test test int mask constant2:::return
MemoryArithmeticTest#testIntMasks()::: memory arithmetic test test int masks:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testIntNullMask()::: memory arithmetic test test int null mask:::test
MemoryArithmeticTest#testLongMask(FieldObject, long)::: memory arithmetic test test long mask:::if->return->return
MemoryArithmeticTest#testLongMaskConstant1(FieldObject)::: memory arithmetic test test long mask constant1:::return
MemoryArithmeticTest#testLongMaskConstant2(FieldObject)::: memory arithmetic test test long mask constant2:::return
MemoryArithmeticTest#testLongMasks()::: memory arithmetic test test long masks:::f->new->FieldObject->test->test->test
MemoryArithmeticTest#testLongNullMask()::: memory arithmetic test test long null mask:::test
MemoryArithmeticTest#doConvertByteInt(FieldObject)::: memory arithmetic test do convert byte int:::return
MemoryArithmeticTest#testConvertByteInt()::: memory arithmetic test test convert byte int:::test->test
MemoryArithmeticTest#doConvertShortInt(FieldObject)::: memory arithmetic test do convert short int:::return
MemoryArithmeticTest#testConvertShortInt()::: memory arithmetic test test convert short int:::test->test
MemoryArithmeticTest#doConvertCharInt(FieldObject)::: memory arithmetic test do convert char int:::return
MemoryArithmeticTest#testConvertCharInt()::: memory arithmetic test test convert char int:::test->test
MemoryArithmeticTest#doConvertLongInt(FieldObject)::: memory arithmetic test do convert long int:::return
MemoryArithmeticTest#testConvertLongInt()::: memory arithmetic test test convert long int:::test->test
MemoryArithmeticTest#doConvertFloatInt(FieldObject)::: memory arithmetic test do convert float int:::return
MemoryArithmeticTest#testConvertFloatInt()::: memory arithmetic test test convert float int:::test->test
MemoryArithmeticTest#doConvertDoubleInt(FieldObject)::: memory arithmetic test do convert double int:::return
MemoryArithmeticTest#testConvertDoubleInt()::: memory arithmetic test test convert double int:::test->test
MemoryArithmeticTest#doConvertByteLong(FieldObject)::: memory arithmetic test do convert byte long:::return
MemoryArithmeticTest#testConvertByteLong()::: memory arithmetic test test convert byte long:::test->test
MemoryArithmeticTest#doConvertShortLong(FieldObject)::: memory arithmetic test do convert short long:::return
MemoryArithmeticTest#testConvertShortLong()::: memory arithmetic test test convert short long:::test->test
MemoryArithmeticTest#doConvertCharLong(FieldObject)::: memory arithmetic test do convert char long:::return
MemoryArithmeticTest#testConvertCharLong()::: memory arithmetic test test convert char long:::test->test
MemoryArithmeticTest#doConvertIntLong(FieldObject)::: memory arithmetic test do convert int long:::return
MemoryArithmeticTest#testConvertIntLong()::: memory arithmetic test test convert int long:::test->test
MemoryArithmeticTest#doConvertFloatLong(FieldObject)::: memory arithmetic test do convert float long:::return
MemoryArithmeticTest#testConvertFloatLong()::: memory arithmetic test test convert float long:::test->test
MemoryArithmeticTest#doConvertDoubleLong(FieldObject)::: memory arithmetic test do convert double long:::return
MemoryArithmeticTest#testConvertDoubleLong()::: memory arithmetic test test convert double long:::test->test
MemoryArithmeticTest#doConvertByteFloat(FieldObject)::: memory arithmetic test do convert byte float:::return
MemoryArithmeticTest#testConvertByteFloat()::: memory arithmetic test test convert byte float:::test->test
MemoryArithmeticTest#doConvertShortFloat(FieldObject)::: memory arithmetic test do convert short float:::return
MemoryArithmeticTest#testConvertShortFloat()::: memory arithmetic test test convert short float:::test->test
MemoryArithmeticTest#doConvertCharFloat(FieldObject)::: memory arithmetic test do convert char float:::return
MemoryArithmeticTest#testConvertCharFloat()::: memory arithmetic test test convert char float:::test->test
MemoryArithmeticTest#doConvertIntFloat(FieldObject)::: memory arithmetic test do convert int float:::return
MemoryArithmeticTest#testConvertIntFloat()::: memory arithmetic test test convert int float:::test->test
MemoryArithmeticTest#doConvertLongFloat(FieldObject)::: memory arithmetic test do convert long float:::return
MemoryArithmeticTest#testConvertLongFloat()::: memory arithmetic test test convert long float:::test->test
MemoryArithmeticTest#doConvertDoubleFloat(FieldObject)::: memory arithmetic test do convert double float:::return
MemoryArithmeticTest#testConvertDoubleFloat()::: memory arithmetic test test convert double float:::test->test
MemoryArithmeticTest#doConvertByteDouble(FieldObject)::: memory arithmetic test do convert byte double:::return
MemoryArithmeticTest#testConvertByteDouble()::: memory arithmetic test test convert byte double:::test->test
MemoryArithmeticTest#doConvertShortDouble(FieldObject)::: memory arithmetic test do convert short double:::return
MemoryArithmeticTest#testConvertShortDouble()::: memory arithmetic test test convert short double:::test->test
MemoryArithmeticTest#doConvertCharDouble(FieldObject)::: memory arithmetic test do convert char double:::return
MemoryArithmeticTest#testConvertCharDouble()::: memory arithmetic test test convert char double:::test->test
MemoryArithmeticTest#doConvertIntDouble(FieldObject)::: memory arithmetic test do convert int double:::return
MemoryArithmeticTest#testConvertIntDouble()::: memory arithmetic test test convert int double:::test->test
MemoryArithmeticTest#doConvertLongDouble(FieldObject)::: memory arithmetic test do convert long double:::return
MemoryArithmeticTest#testConvertLongDouble()::: memory arithmetic test test convert long double:::test->test
MemoryArithmeticTest#doConvertFloatDouble(FieldObject)::: memory arithmetic test do convert float double:::return
MemoryArithmeticTest#testConvertFloatDouble()::: memory arithmetic test test convert float double:::test->test
MemoryGraphCanonicalizeTest#simpleElimination(TestObject)::: memory graph canonicalize test simple elimination:::
MemoryGraphCanonicalizeTest#testSimpleElimination()::: memory graph canonicalize test test simple elimination:::testGraph
MemoryGraphCanonicalizeTest#complexElimination(TestObject)::: memory graph canonicalize test complex elimination:::if->else->new->Object
MemoryGraphCanonicalizeTest#testComplexElimination()::: memory graph canonicalize test test complex elimination:::testGraph
MemoryGraphCanonicalizeTest#testGraph(String, int)::: memory graph canonicalize test test graph:::graph->parseEager->context->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->new->CanonicalizerPhase->new->LoweringPhase->apply->new->FloatingReadPhase->new->IncrementalCanonicalizerPhase<>->apply->new->CanonicalizerPhase->apply->writes->graph->getNodes->filter->count->assertTrue
MemoryScheduleTest#testSimpleSnippet():::In this test the read should be scheduled before the write.:::try->return->catch->finally
MemoryScheduleTest#testSimple()::: memory schedule test test simple:::foreach->TestMode->values->schedule->getFinalSchedule->graph->schedule->getCFG->assertReadAndWriteInSameBlock->graph->getNodes->filter->first->graph->getNodes->filter->first->assertOrderedAfterSchedule
MemoryScheduleTest#testSplit1Snippet(int):::In this case the read should be scheduled in the first block.:::try->return->catch->finally->if->else
MemoryScheduleTest#testSplit1()::: memory schedule test test split1:::foreach->TestMode->values->schedule->getFinalSchedule->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testSplit2Snippet(int):::Here the read should float to the end.:::try->return->catch->finally->if->else
MemoryScheduleTest#testSplit2()::: memory schedule test test split2:::schedule->getFinalSchedule->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testLoop1Snippet(int, int):::Here the read should not float to the end.:::try->return->catch->finally->for->i->GraalDirectives->injectBranchProbability
MemoryScheduleTest#testLoop1()::: memory schedule test test loop1:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testLoop2Snippet(int, int):::Here the read should float to the end.:::try->return->catch->finally->for->i->GraalDirectives->injectBranchProbability
MemoryScheduleTest#testLoop2()::: memory schedule test test loop2:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testLoop3Snippet(int):::Here the read should float out of the loop.:::j->for->i->GraalDirectives->injectBranchProbability->return
MemoryScheduleTest#testLoop3()::: memory schedule test test loop3:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testStringReplaceSnippet(String)::: memory schedule test test string replace snippet:::return->input->replace
MemoryScheduleTest#testStringReplace()::: memory schedule test test string replace:::getFinalSchedule->test
MemoryScheduleTest#testLoop5Snippet(int, int, MemoryScheduleTest):::Here the read should float out of the loop.:::ret->bb->for->i->GraalDirectives->injectBranchProbability->return
MemoryScheduleTest#testLoop5()::: memory schedule test test loop5:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testLoop6Snippet(int, int, MemoryScheduleTest):::Here the read should not float out of the loop.:::ret->bb->for->i->GraalDirectives->injectBranchProbability->return
MemoryScheduleTest#testLoop6()::: memory schedule test test loop6:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testLoop7Snippet(int, int, MemoryScheduleTest):::Here the read should not float out of the loop.:::ret->bb->for->i->GraalDirectives->injectBranchProbability->return
MemoryScheduleTest#testLoop7()::: memory schedule test test loop7:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testLoop8Snippet(int, int):::Here the read should not float to the end.:::result->for->i->GraalDirectives->injectBranchProbability->GraalDirectives->controlFlowAnchor->return
MemoryScheduleTest#testLoop8()::: memory schedule test test loop8:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testLoop9Snippet(int, int):::Here the read should float after the loop.:::for->i->GraalDirectives->controlFlowAnchor->return
MemoryScheduleTest#testLoop9()::: memory schedule test test loop9:::schedule->getFinalSchedule->graph->schedule->getCFG->getStartBlock->getBeginNode->graph->graph->getNodes->hasCount->assertThat->ret->graph->getNodes->first->ret->result->instanceOf->assertThat->readBlock->schedule->getNodeToBlockMap->ret->result->get->Assert->readBlock->getLoopDepth->assertEquals
MemoryScheduleTest#testIfRead1Snippet(int):::Here the read should not float to the end.:::res->if->return
MemoryScheduleTest#testIfRead1()::: memory schedule test test if read1:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadAndWriteInSameBlock
MemoryScheduleTest#testIfRead2Snippet(int):::Here the read should float in the else block.:::res->if->else->return
MemoryScheduleTest#testIfRead2()::: memory schedule test test if read2:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->schedule->getCFG->getNodes->filter->count->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks->assertReadAndWriteInSameBlock
MemoryScheduleTest#testIfRead3Snippet(int):::Here the read should float to the end, right before the write.:::if->res->return
MemoryScheduleTest#testIfRead3()::: memory schedule test test if read3:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testIfRead4Snippet(int):::Here the read should be just in the if branch (with the write).:::if->res->return->else->return
MemoryScheduleTest#testIfRead4()::: memory schedule test test if read4:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks->assertReadAndWriteInSameBlock
MemoryScheduleTest#testIfRead5Snippet(int):::Here the read should float to the end.:::if->return
MemoryScheduleTest#testIfRead5()::: memory schedule test test if read5:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks->assertReadAndWriteInSameBlock
MemoryScheduleTest#testAntiDependencySnippet(int)::: memory schedule test test anti dependency snippet:::res->if->return
MemoryScheduleTest#testAntiDependency()::: memory schedule test test anti dependency:::schedule->getFinalSchedule->schedule->getCFG->getBlocks->assertDeepEquals->assertReadBeforeAllWritesInStartBlock
MemoryScheduleTest#testBlockScheduleSnippet():::testing scheduling within a block.:::res->return
MemoryScheduleTest#testBlockSchedule()::: memory schedule test test block schedule:::schedule->getFinalSchedule->graph->schedule->getCFG->writeNodes->graph->getNodes->filter->schedule->getCFG->getBlocks->assertDeepEquals->writeNodes->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals->read->graph->getNodes->filter->first->writes->new->WriteNodeArr->i->foreach->assertOrderedAfterSchedule->assertOrderedAfterSchedule->for->j
MemoryScheduleTest#testBlockSchedule2Snippet(int):::read should move inside the loop (out of loop is disabled).:::res->for->i->return
MemoryScheduleTest#testBlockSchedule2()::: memory schedule test test block schedule2:::schedule->getFinalSchedule->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks->assertReadAndWriteInSameBlock
MemoryScheduleTest#testProxySnippet()::: memory schedule test test proxy snippet:::while->list->new->ArrayList<>->while->list->size->if->return
MemoryScheduleTest#testProxy()::: memory schedule test test proxy:::schedule->getFinalSchedule->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#testStringHashCodeSnippet()::: memory schedule test test string hash code snippet:::h->if->val->for->i->return
MemoryScheduleTest#testStringHashCode()::: memory schedule test test string hash code:::schedule->getFinalSchedule->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks->test
MemoryScheduleTest#testLoop4Snippet(int)::: memory schedule test test loop4 snippet:::a->new->intArr->for->i->GraalDirectives->injectBranchProbability->i->iwrap->sum->while->GraalDirectives->injectBranchProbability->return
MemoryScheduleTest#testLoop4()::: memory schedule test test loop4:::schedule->getFinalSchedule->assertReadWithinStartBlock->assertReadWithinAllReturnBlocks
MemoryScheduleTest#assertReadWithinAllReturnBlocks(ScheduleResult, boolean)::: memory schedule test assert read within all return blocks:::graph->schedule->getCFG->graph->getNodes->isNotEmpty->assertTrue->withRead->returnBlocks->foreach->graph->getNodes->block->schedule->getCFG->getNodeToBlock->get->foreach->schedule->getBlockToNodesMap->get->if->break->assertDeepEquals
MemoryScheduleTest#assertReadWithinStartBlock(ScheduleResult, boolean)::: memory schedule test assert read within start block:::readEncountered->foreach->schedule->getBlockToNodesMap->schedule->getCFG->getStartBlock->get->if->assertDeepEquals
MemoryScheduleTest#assertReadAndWriteInSameBlock(ScheduleResult, boolean)::: memory schedule test assert read and write in same block:::graph->schedule->getCFG->read->graph->getNodes->filter->first->write->graph->getNodes->filter->first->schedule->getCFG->blockFor->schedule->getCFG->blockFor->assertTrue
MemoryScheduleTest#assertReadBeforeAllWritesInStartBlock(ScheduleResult)::: memory schedule test assert read before all writes in start block:::writeNodeFound->readNodeFound->foreach->schedule->schedule->getCFG->getStartBlock->nodesFor->if->assertTrue->else->if->assertTrue
MemoryScheduleTest#getFinalSchedule(String, TestMode)::: memory schedule test get final schedule:::return->getFinalSchedule
MemoryScheduleTest#getFinalSchedule(String, TestMode, SchedulingStrategy)::: memory schedule test get final schedule:::options->getInitialOptions->new->OptionValues->graph->parseEager->debug->graph->getDebug->try->d->debug->scope->context->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->canonicalizer->apply->if->createInliningPhase->apply->new->LoweringPhase->apply->if->graph->clearAllStateAfter->debug->dump->new->FloatingReadPhase->apply->new->RemoveValueProxyPhase->apply->midContext->getProviders->getTargetProvider->graph->getProfilingInfo->new->MidTierContext->new->GuardLoweringPhase->apply->new->LoweringPhase->apply->new->LoweringPhase->apply->schedule->new->SchedulePhase->schedule->apply->graph->getNodes->filter->count->assertDeepEquals->return->graph->getLastSchedule->catch->throw->debug->handle->finally
MergeCanonicalizerTest#getDefaultHighTierContext():::These tests assume all code paths are reachable so disable profile based dead code removal.:::return->getProviders->getDefaultGraphBuilderSuite->remove->new->HighTierContext
MergeCanonicalizerTest#testSplitReturn()::: merge canonicalizer test test split return:::test->testReturnCount
MergeCanonicalizerTest#testSplitReturnSnippet(int)::: merge canonicalizer test test split return snippet:::v->if->else->i->return
MergeCanonicalizerTest#testReturnCount(String, int)::: merge canonicalizer test test return count:::graph->parseEager->new->CanonicalizerPhase->getProviders->apply->new->CanonicalizerPhase->getProviders->apply->graph->getDebug->dump->graph->getNodes->count->assertDeepEquals
MethodHandleEagerResolution#getBackingCharArray(String)::: method handle eager resolution get backing char array:::try->return->FIELD_HANDLE->invokeExact->catch->throw->new->IllegalStateException->finally
MethodHandleEagerResolution#testFieldInvokeExact()::: method handle eager resolution test field invoke exact:::graph->parseEager->graph->getNodes->filter->isEmpty->assertTrue
MonitorGraphTest#referenceSnippet(int)::: monitor graph test reference snippet:::return
MonitorGraphTest#const1()::: monitor graph test const1:::return
MonitorGraphTest#test1()::: monitor graph test test1:::test
MonitorGraphTest#test1Snippet(int)::: monitor graph test test1 snippet:::return->const1
MonitorGraphTest#test2()::: monitor graph test test2:::graph->parseAndProcess->monitors->graph->getNodes->Assert->monitors->count->assertEquals->Assert->monitors->first->stateAfter->assertEquals
MonitorGraphTest#test2Snippet(int)::: monitor graph test test2 snippet:::return->const2
MonitorGraphTest#const2()::: monitor graph test const2:::return
MonitorGraphTest#parseAndProcess(String)::: monitor graph test parse and process:::graph->parseEager->param->graph->getNodes->first->if->constant->ConstantNode->forInt->foreach->param->usages->snapshot->if->n->replaceFirstInput->hints->new->HashMap<>->foreach->graph->getInvokes->hints->put->context->getDefaultHighTierContext->new->CanonicalizerPhase->createInliningPhase->apply->new->CanonicalizerPhase->apply->new->DeadCodeEliminationPhase->apply->return
MonitorGraphTest#test(String)::: monitor graph test test:::graph->parseAndProcess->referenceGraph->parseEager->assertEquals
NarrowingReadTest#testNarrowReadSnippetByte(Long)::: narrowing read test test narrow read snippet byte:::return->l->longValue
NarrowingReadTest#testNarrowReadByte()::: narrowing read test test narrow read byte:::Long->valueOf->test
NarrowingReadTest#testNarrowReadSnippetShort(Long)::: narrowing read test test narrow read snippet short:::return->l->longValue
NarrowingReadTest#testNarrowReadShort()::: narrowing read test test narrow read short:::Long->valueOf->test
NarrowingReadTest#testNarrowReadSnippetInt(Long)::: narrowing read test test narrow read snippet int:::return->l->longValue
NarrowingReadTest#testNarrowReadInt()::: narrowing read test test narrow read int:::Long->valueOf->test
NarrowingReadTest#testNarrowReadSnippetIntToLong(Long)::: narrowing read test test narrow read snippet int to long:::return->l->longValue
NarrowingReadTest#testNarrowReadIntToLong()::: narrowing read test test narrow read int to long:::Long->valueOf->test
NestedArithmeticTest#runNestedLoopTry()::: nested arithmetic test run nested loop try:::checksum->i3->i5->for->i4->return
NestedArithmeticTest#nestedLoopTryTest()::: nested arithmetic test nested loop try test:::test
NestedArithmeticTest.FloatSupplier#get()::: float supplier get:::
NestedArithmeticTest#absConvert()::: nested arithmetic test abs convert:::i2->i16->i17->i18->i19->l1->for->i1->result->return
NestedArithmeticTest#absConvertTest()::: nested arithmetic test abs convert test:::test
NestedLoopTest#test1()::: nested loop test test1:::test
NestedLoopTest#test2()::: nested loop test test2:::test
NestedLoopTest#test3()::: nested loop test test3:::test
NestedLoopTest#test4()::: nested loop test test4:::test
NestedLoopTest#test1Snippet(int)::: nested loop test test1 snippet:::while->a->while->b->while->c->if->d->break
NestedLoopTest#test2Snippet(int)::: nested loop test test2 snippet:::while->a->try->while->b->while->c->if->d->break->catch->finally
NestedLoopTest#test3Snippet(int)::: nested loop test test3 snippet:::while->try->while->b->while->c->if->d->a->break->catch->finally
NestedLoopTest#test4Snippet(int)::: nested loop test test4 snippet:::while->try->while->b->while->c->if->d->break->if->a->throw->new->Exception->catch->finally
NestedLoopTest#an a()::: nested loop test a:::
NestedLoopTest#boolean b()::: nested loop test b:::
NestedLoopTest#c()::: nested loop test c:::
NestedLoopTest#d()::: nested loop test d:::
NestedLoopTest#getInvoke(String, StructuredGraph)::: nested loop test get invoke:::foreach->graph->getNodes->if->callTarget->targetMethod->getName->equals->return->callTarget->invoke->return
NestedLoopTest#test(String, int, int, int)::: nested loop test test:::graph->parseEager->debug->graph->getDebug->debug->dump->cfg->ControlFlowGraph->compute->Assert->cfg->getLoops->size->assertEquals->rootLoop->cfg->getLoops->get->nestedLoop->cfg->getLoops->get->innerMostLoop->cfg->getLoops->get->a->getInvoke->b->getInvoke->c->getInvoke->d->getInvoke->Assert->containsDirect->assertTrue->Assert->containsDirect->assertTrue->Assert->containsDirect->assertTrue->Assert->containsDirect->assertTrue->Assert->contains->assertTrue->Assert->contains->assertTrue->Assert->rootLoop->getLoopExits->size->assertEquals->Assert->nestedLoop->getLoopExits->size->assertEquals->Assert->innerMostLoop->getLoopExits->size->assertEquals->debug->dump
NestedLoopTest#contains(Loop, Invoke, ControlFlowGraph)::: nested loop test contains:::block->cfg->blockFor->Assert->assertNotNull->return->loop->getBlocks->contains
NestedLoopTest#containsDirect(Loop, Invoke, ControlFlowGraph)::: nested loop test contains direct:::foreach->loop->getChildren->if->contains->return->return->contains
NewInstanceTest#parseAndProcess(Class)::: new instance test parse and process:::constructors->cl->getConstructors->Assert->assertTrue->javaMethod->getMetaAccess->lookupJavaMethod->options->getInitialOptions->graph->getDebugContext->new->StructuredGraph.Builder->method->build->conf->GraphBuilderConfiguration->getDefaultGraphBuilderPlugins->getSnippetDefault->withUnresolvedIsError->getProviders->new->GraphBuilderPhase.Instance->apply->return
NewInstanceTest#checkGraph(Class, int, int)::: new instance test check graph:::graph->parseAndProcess->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->count->assertEquals
NewInstanceTest#test1():::Use a custom class loader to generate classes, substitute class names at the allocation site.:::checkGraph->loader1->new->ClassTemplateLoader->loader1->findClass->checkGraph->loader2->new->ClassTemplateLoader->loader2->findClass->checkGraph
NewInstanceTest.ClassTemplateLoader#findClass(String)::: class template loader find class:::classData->try->is->getResourceAsStream->baos->new->ByteArrayOutputStream->buf->new->byteArr->size->while->is->read->baos->write->baos->flush->baos->toByteArray->catch->Assert->fail->finally->index->while->indexOfTemplate->replaceTemplate->c->defineClass->return
NewInstanceTest.ClassTemplateLoader#indexOfTemplate(byte[], int, String)::: class template loader index of template:::for->i->return
NewInstanceTest.ClassTemplateLoader#replaceTemplate(byte[], int, String)::: class template loader replace template:::for->i->replace->length
NodePosIteratorTest#testInputs()::: node pos iterator test test inputs:::n->new->TestNode->i1->ConstantNode->forInt->i2->ConstantNode->forDouble->i3->ConstantNode->forInt->i4->ConstantNode->forInt->new->ValueNodeArr->new->NodeInputList<>->inputs->n->inputs->iterator->inputs->iterator->Assert->iterator->hasNext->assertTrue->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertFalse->Assert->iterator->hasNext->assertFalse->positionIterator->n->inputPositions->iterator->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->next->toString->assertEquals->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->next->toString->assertEquals->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->next->toString->assertEquals->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->next->toString->assertEquals->Assert->positionIterator->hasNext->assertFalse->Assert->positionIterator->hasNext->assertFalse->inputs->iterator->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->initialize->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertFalse->inputs->iterator->initialize->initialize->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertFalse
NodePosIteratorTest#testSuccessors()::: node pos iterator test test successors:::n->new->TestNode->s1->new->EndNode->s2->new->EndNode->s3->new->EndNode->s4->new->EndNode->new->NodeArr->new->NodeSuccessorList<>->successors->n->successors->iterator->successors->iterator->Assert->iterator->hasNext->assertTrue->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertFalse->Assert->iterator->hasNext->assertFalse->positionIterator->n->successorPositions->iterator->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->hasNext->assertTrue->Assert->getSimpleName->positionIterator->next->toString->assertEquals->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->hasNext->assertTrue->Assert->getSimpleName->positionIterator->next->toString->assertEquals->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->hasNext->assertTrue->Assert->getSimpleName->positionIterator->next->toString->assertEquals->Assert->positionIterator->hasNext->assertTrue->Assert->positionIterator->hasNext->assertTrue->Assert->getSimpleName->positionIterator->next->toString->assertEquals->Assert->positionIterator->hasNext->assertFalse->Assert->positionIterator->hasNext->assertFalse->successors->iterator->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->initialize->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertFalse->successors->iterator->initialize->initialize->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertTrue->Assert->iterator->next->assertEquals->Assert->iterator->hasNext->assertFalse
NodePropertiesTest#test1Snippet(int)::: node properties test test1 snippet:::x->if->else->b->c->return
NodePropertiesTest#test2Snippet(int)::: node properties test test2 snippet:::x->if->else->return
NodePropertiesTest#testLoop01(int)::: node properties test test loop01:::res->for->i->GraalDirectives->injectIterationCount->return
NodePropertiesTest#testLoop02(int)::: node properties test test loop02:::res->for->i->GraalDirectives->injectIterationCount->return
NodePropertiesTest#testLoop03(int)::: node properties test test loop03:::res->for->i->GraalDirectives->injectIterationCount->return
NodePropertiesTest#testLoop04(int)::: node properties test test loop04:::res->for->i->GraalDirectives->injectIterationCount->return
NodePropertiesTest#testLoop05(int)::: node properties test test loop05:::res->for->i->GraalDirectives->injectIterationCount->return
NodePropertiesTest#dontInline(int)::: node properties test dont inline:::res->for->i->return
NodePropertiesTest#untrused01(int)::: node properties test untrused01:::return->dontInline
NodePropertiesTest#arrayLoadTest(int)::: node properties test array load test:::return->hashCode
NodePropertiesTest#arrayStoreTest(int)::: node properties test array store test:::return
NodePropertiesTest#fieldLoad(int)::: node properties test field load:::return->sideEffect->hashCode
NodePropertiesTest#fieldStore(int)::: node properties test field store:::return
NodePropertiesTest#testCanonicalizationExample()::: node properties test test canonicalization example:::htc->getDefaultHighTierContext->c1->new->ImprovementSavingCanonicalizer->g1->getResolvedJavaMethod->parseForCompile->new->CanonicalizerPhase->apply->c2->new->ImprovementSavingCanonicalizer->g2->getResolvedJavaMethod->parseForCompile->new->CanonicalizerPhase->apply->Assert->assertEquals->Assert->assertEquals
NodePropertiesTest#prepareGraphForLoopFrequencies(StructuredGraph, HighTierContext)::: node properties test prepare graph for loop frequencies:::new->CanonicalizerPhase->apply->ComputeLoopFrequenciesClosure->compute
NodePropertiesTest#assertFrequency(StructuredGraph, int)::: node properties test assert frequency:::loopBeginNodes->g->getNodes->loopBeginNode->loopBeginNodes->first->Assert->loopBeginNode->loopFrequency->assertEquals
NodePropertiesTest#testDifferentLoopFaster()::: node properties test test different loop faster:::htc->getDefaultHighTierContext->g1->getResolvedJavaMethod->parseForCompile->g2->getResolvedJavaMethod->parseForCompile->prepareGraphForLoopFrequencies->prepareGraphForLoopFrequencies->assertFrequency->assertFrequency->gc1->new->GraphCostPhase->gc2->new->GraphCostPhase->gc1->apply->gc2->apply->g1->getDebug->log->Assert->assertTrue->Assert->assertTrue
NodePropertiesTest#testSameLoopMoreIterationsCostlier()::: node properties test test same loop more iterations costlier:::htc->getDefaultHighTierContext->g1->getResolvedJavaMethod->parseForCompile->g2->getResolvedJavaMethod->parseForCompile->prepareGraphForLoopFrequencies->prepareGraphForLoopFrequencies->assertFrequency->assertFrequency->gc1->new->GraphCostPhase->gc2->new->GraphCostPhase->gc1->apply->gc2->apply->g1->getDebug->log->Assert->assertTrue->Assert->assertTrue
NodePropertiesTest#testDifferentLoopsInnerOuter()::: node properties test test different loops inner outer:::htc->getDefaultHighTierContext->g1->getResolvedJavaMethod->parseForCompile->g2->getResolvedJavaMethod->parseForCompile->prepareGraphForLoopFrequencies->prepareGraphForLoopFrequencies->assertFrequency->gc1->new->GraphCostPhase->gc2->new->GraphCostPhase->gc1->apply->gc2->apply->g1->getDebug->log->Assert->assertTrue
NodePropertiesTest#testGraphCost()::: node properties test test graph cost:::g1->getResolvedJavaMethod->parseForCompile->g2->getResolvedJavaMethod->parseForCompile->htc->getDefaultHighTierContext->new->CanonicalizerPhase->apply->new->CanonicalizerPhase->apply->gc1->new->GraphCostPhase->gc2->new->GraphCostPhase->gc1->apply->gc2->apply->g1->getDebug->log->Assert->assertTrue->Assert->assertTrue
NodePropertiesTest#testExpectUntrusted()::: node properties test test expect untrusted:::g1->getResolvedJavaMethod->parseForCompile->htc->getDefaultHighTierContext->new->CanonicalizerPhase->apply->gc1->new->GraphCostPhase->gc1->apply
NodePropertiesTest#testArrayLoad()::: node properties test test array load:::g1->getResolvedJavaMethod->parseForCompile->htc->getDefaultHighTierContext->new->CanonicalizerPhase->apply->gc1->new->GraphCostPhase->gc1->apply->Assert->assertEquals
NodePropertiesTest#testArrayStore()::: node properties test test array store:::g1->getResolvedJavaMethod->parseForCompile->htc->getDefaultHighTierContext->new->CanonicalizerPhase->apply->gc1->new->GraphCostPhase->gc1->apply->Assert->assertEquals
NodePropertiesTest#testFieldLoad()::: node properties test test field load:::g1->getResolvedJavaMethod->parseForCompile->htc->getDefaultHighTierContext->new->CanonicalizerPhase->apply->gc1->new->GraphCostPhase->gc1->apply->Assert->assertEquals
NodePropertiesTest#testFieldStore()::: node properties test test field store:::g1->getResolvedJavaMethod->parseForCompile->htc->getDefaultHighTierContext->new->CanonicalizerPhase->apply->gc1->new->GraphCostPhase->gc1->apply->Assert->assertEquals
NodePropertiesTest.ImprovementSavingCanonicalizer#simplify(Node, SimplifierTool)::: improvement saving canonicalizer simplify:::if->bc->canonicalized->bc->bc->getX->bc->getY->canonical->if->node->estimatedNodeCycles->canonicalized->estimatedNodeCycles
NodePropertiesTest.GraphCostPhase#run(StructuredGraph, CoreProviders)::: graph cost phase run:::NodeCostUtil->computeGraphCycles->NodeCostUtil->computeGraphSize
OffHeapUnsafeAccessTest#initUnsafe()::: off heap unsafe access test init unsafe:::try->return->Unsafe->getUnsafe->catch->try->theUnsafe->getDeclaredField->theUnsafe->setAccessible->return->theUnsafe->get->catch->throw->new->RuntimeException->finally->finally
OffHeapUnsafeAccessTest#unboxByteAndStore(long, byte[])::: off heap unsafe access test unbox byte and store:::val->UNSAFE->putByte->UNSAFE->putByte->return
OffHeapUnsafeAccessTest#unboxCharAndStore(long, char[])::: off heap unsafe access test unbox char and store:::val->UNSAFE->putChar->UNSAFE->putChar->return
OffHeapUnsafeAccessTest#unboxIntAndStore(long, int[])::: off heap unsafe access test unbox int and store:::val->UNSAFE->putInt->UNSAFE->putInt->return
OffHeapUnsafeAccessTest#unboxLongAndStore(long, long[])::: off heap unsafe access test unbox long and store:::val->UNSAFE->putLong->UNSAFE->putLong->UNSAFE->putAddress->return
OffHeapUnsafeAccessTest#unboxFloatAndStore(long, float[])::: off heap unsafe access test unbox float and store:::val->UNSAFE->putFloat->UNSAFE->putFloat->return
OffHeapUnsafeAccessTest#unboxDoubleAndStore(long, double[])::: off heap unsafe access test unbox double and store:::val->UNSAFE->putDouble->UNSAFE->putDouble->return
OffHeapUnsafeAccessTest#assertExactlyOneArrayLoad(JavaKind)::: off heap unsafe access test assert exactly one array load:::total->foreach->lastCompiledGraph->getNodes->filter->if->read->getLocationIdentity->NamedLocationIdentity->getArrayLocation->equals->Assert->assertEquals
OffHeapUnsafeAccessTest#testGet()::: off heap unsafe access test test get:::buf->allocBuf->if->try->new->byteArr->test->assertExactlyOneArrayLoad->new->charArr->test->assertExactlyOneArrayLoad->new->intArr->test->assertExactlyOneArrayLoad->new->longArr->test->assertExactlyOneArrayLoad->new->floatArr->test->assertExactlyOneArrayLoad->new->doubleArr->test->assertExactlyOneArrayLoad->catch->finally->UNSAFE->freeMemory
OffHeapUnsafeAccessTest#allocBuf()::: off heap unsafe access test alloc buf:::try->return->UNSAFE->allocateMemory->catch->return->finally
OnStackReplacementTest#test1()::: on stack replacement test test1:::test
OnStackReplacementTest#test1Snippet()::: on stack replacement test test1 snippet:::for->i->Thread->currentThread->isInterrupted
OptionsVerifierTest#verifyOptions()::: options verifier test verify options:::try->cp->new->Classpath->checked->new->HashSet<>->foreach->OptionsParser->getOptionsLoader->foreach->OptionsVerifier->desc->getDeclaringClass->checkClass->catch->finally
OptionsVerifierTest.Classpath#close()::: classpath close:::foreach->entries->values->if->close
OptionsVerifierTest.Classpath#getInputStream(String)::: classpath get input stream:::foreach->entries->values->if->path->classFilePath->replace->new->File->if->path->exists->return->Files->path->toPath->readAllBytes->else->ucl->try->in->ucl->getResourceAsStream->if->buffer->new->ByteArrayOutputStream->nRead->data->new->byteArr->while->in->read->buffer->write->return->buffer->toByteArray->catch->finally->return
OptionsVerifierTest.OptionsVerifier#checkClass(Class, OptionDescriptor, Set>, Classpath)::: options verifier check class:::if->checked->contains->checked->add->superclass->cls->getSuperclass->if->superclass->equals->checkClass->classFilePath->cls->getName->replace->cr->Objects->cp->getInputStream->cls->getName->requireNonNull->new->ClassReader->cv->new->OptionsVerifier->cr->accept
OptionsVerifierTest.OptionsVerifier#resolve(String)::: options verifier resolve:::try->return->Class->name->replace->forName->catch->throw->new->InternalError->finally
OptionsVerifierTest.OptionsVerifier#visitSource(String, String)::: options verifier visit source:::
OptionsVerifierTest.OptionsVerifier#verify(boolean, String)::: options verifier verify:::if->error
OptionsVerifierTest.OptionsVerifier#error(String)::: options verifier error:::errorMessage->option->getName->cls->getSimpleName->option->getDeclaringClass->getSimpleName->option->getName->option->getDeclaringClass->getSimpleName->format->throw->new->InternalError
OptionsVerifierTest.OptionsVerifier#visitMethod(int, String, String, String, String[])::: options verifier visit method:::if->name->equals->return->new->MethodVisitor->else->return
PhiCreationTests#test():::Dummy method to avoid javac dead code elimination.:::
PhiCreationTests#test1()::: phi creation tests test1:::graph->parseEager->Assert->graph->getNodes->filter->iterator->hasNext->assertFalse
PhiCreationTests#test1Snippet(int)::: phi creation tests test1 snippet:::if->test->return
PhiCreationTests#test2()::: phi creation tests test2:::graph->parseEager->Assert->graph->getNodes->filter->iterator->hasNext->assertFalse
PhiCreationTests#test2Snippet(int)::: phi creation tests test2 snippet:::while->test->return
PhiCreationTests#test3()::: phi creation tests test3:::graph->parseEager->debug->graph->getDebug->debug->dump->Assert->graph->getNodes->filter->iterator->hasNext->assertFalse
PhiCreationTests#test3Snippet(int)::: phi creation tests test3 snippet:::while->while->test->return
PhiCreationTests#test4()::: phi creation tests test4:::graph->parseEager->debug->graph->getDebug->debug->dump->Assert->graph->getNodes->filter->iterator->hasNext->assertFalse
PhiCreationTests#test4Snippet(int)::: phi creation tests test4 snippet:::b->while->while->while->try->test->catch->finally->while->while->try->test->catch->finally->return
ProfilingInfoTest#testBranchTakenProbability()::: profiling info test test branch taken probability:::info->profile->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals->profile->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals->profile->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals->continueProfiling->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals->resetProfile->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals->Assert->info->getBranchTakenProbability->assertEquals->Assert->info->getExecutionCount->assertEquals
ProfilingInfoTest#branchProbabilitySnippet(int)::: profiling info test branch probability snippet:::if->return->else->if->return->else->return
ProfilingInfoTest#testSwitchProbabilities()::: profiling info test test switch probabilities:::info->profile->Assert->new->doubleArr->info->getSwitchProbabilities->assertArrayEquals->profile->Assert->new->doubleArr->info->getSwitchProbabilities->assertArrayEquals->profile->Assert->new->doubleArr->info->getSwitchProbabilities->assertArrayEquals->resetProfile->Assert->info->getSwitchProbabilities->assertNull
ProfilingInfoTest#switchProbabilitySnippet(int)::: profiling info test switch probability snippet:::switch->return->return->return
ProfilingInfoTest#testProfileInvokeVirtual()::: profiling info test test profile invoke virtual:::testTypeProfile
ProfilingInfoTest#invokeVirtualSnippet(Object)::: profiling info test invoke virtual snippet:::return->obj->hashCode
ProfilingInfoTest#testTypeProfileInvokeInterface()::: profiling info test test type profile invoke interface:::testTypeProfile
ProfilingInfoTest#invokeInterfaceSnippet(CharSequence)::: profiling info test invoke interface snippet:::return->a->length
ProfilingInfoTest#testTypeProfileCheckCast()::: profiling info test test type profile check cast:::testTypeProfile
ProfilingInfoTest#checkCastSnippet(Object)::: profiling info test check cast snippet:::try->return->catch->return->finally
ProfilingInfoTest#testTypeProfileInstanceOf()::: profiling info test test type profile instance of:::testTypeProfile
ProfilingInfoTest#instanceOfSnippet(Object)::: profiling info test instance of snippet:::return
ProfilingInfoTest#testTypeProfile(String, int)::: profiling info test test type profile:::stringType->getMetaAccess->lookupJavaType->stringBuilderType->getMetaAccess->lookupJavaType->info->profile->typeProfile->info->getTypeProfile->Assert->typeProfile->getNotRecordedProbability->assertEquals->Assert->typeProfile->getTypes->assertEquals->Assert->typeProfile->getTypes->getType->assertEquals->Assert->typeProfile->getTypes->getProbability->assertEquals->new->StringBuilder->continueProfiling->info->getTypeProfile->Assert->typeProfile->getNotRecordedProbability->assertEquals->Assert->typeProfile->getTypes->assertEquals->Assert->typeProfile->getTypes->getType->assertEquals->Assert->typeProfile->getTypes->getType->assertEquals->Assert->typeProfile->getTypes->getProbability->assertEquals->Assert->typeProfile->getTypes->getProbability->assertEquals->resetProfile->info->getTypeProfile->Assert->assertNull
ProfilingInfoTest#testExceptionSeen()::: profiling info test test exception seen:::info->profile->Assert->info->getExceptionSeen->assertEquals->profile->Assert->info->getExceptionSeen->assertEquals->resetProfile->Assert->info->getExceptionSeen->assertEquals->new->intArr->profile->Assert->info->getExceptionSeen->assertEquals->new->intArr->profile->Assert->info->getExceptionSeen->assertEquals->resetProfile->Assert->info->getExceptionSeen->assertEquals->profile->Assert->info->getExceptionSeen->assertEquals->profile->Assert->info->getExceptionSeen->assertEquals->resetProfile->Assert->info->getExceptionSeen->assertEquals->profile->Assert->info->getExceptionSeen->assertEquals->profile->Assert->info->getExceptionSeen->assertEquals->resetProfile->Assert->info->getExceptionSeen->assertEquals
ProfilingInfoTest#nullPointerExceptionSnippet(Object)::: profiling info test null pointer exception snippet:::try->return->obj->hashCode->catch->return->finally
ProfilingInfoTest#arrayIndexOutOfBoundsExceptionSnippet(int[])::: profiling info test array index out of bounds exception snippet:::try->return->catch->return->finally
ProfilingInfoTest#checkCastExceptionSnippet(Object)::: profiling info test check cast exception snippet:::try->return->length->catch->return->finally
ProfilingInfoTest#invokeWithExceptionSnippet(boolean)::: profiling info test invoke with exception snippet:::try->return->throwException->catch->return->finally
ProfilingInfoTest#throwException(boolean)::: profiling info test throw exception:::if->throw->new->IllegalArgumentException->else->return
ProfilingInfoTest#testNullSeen()::: profiling info test test null seen:::testNullSeen->testNullSeen
ProfilingInfoTest#testNullSeen(String)::: profiling info test test null seen:::info->profile->Assert->info->getNullSeen->assertEquals->continueProfiling->Assert->info->getNullSeen->assertEquals->new->Object->continueProfiling->Assert->info->getNullSeen->assertEquals->if->info->getNullSeen->continueProfiling->Assert->info->getNullSeen->assertEquals->continueProfiling->Assert->info->getNullSeen->assertEquals->new->Object->continueProfiling->Assert->info->getNullSeen->assertEquals->resetProfile->Assert->info->getNullSeen->assertEquals
ProfilingInfoTest#profile(String, Object...)::: profiling info test profile:::return->profile
ProfilingInfoTest#continueProfiling(String, Object...)::: profiling info test continue profiling:::profile
ProfilingInfoTest#continueProfiling(int, String, Object...)::: profiling info test continue profiling:::profile
ProfilingInfoTest#profile(boolean, int, String, Object...)::: profiling info test profile:::javaMethod->getResolvedJavaMethod->Assert->javaMethod->isStatic->assertTrue->if->javaMethod->reprofile->for->i->info->javaMethod->getProfilingInfo->info->setMature->return
ProfilingInfoTest#resetProfile(String)::: profiling info test reset profile:::javaMethod->getResolvedJavaMethod->javaMethod->reprofile
PushNodesThroughPiTest#test1Snippet(A)::: push nodes through pi test test1 snippet:::c->ret->return
PushNodesThroughPiTest#test1()::: push nodes through pi test test1:::snippet->debug->getDebugContext->try->s->debug->new->DebugDumpScope->scope->graph->compileTestSnippet->foreach->graph->getNodes->filter->address->rn->getAddress->disp->address->getOffset->asJavaConstant->asLong->receiverType->StampTool->address->getBase->typeOrNull->field->receiverType->rn->getStackKind->findInstanceFieldWithOffset->if->field->getName->equals->Assert->address->getBase->assertTrue->else->Assert->address->getBase->toString->address->getBase->assertTrue->Assert->graph->getNodes->filter->count->assertTrue->catch->throw->debug->handle->finally
PushNodesThroughPiTest#compileTestSnippet(String)::: push nodes through pi test compile test snippet:::graph->parseEager->context->getProviders->canonicalizer->new->CanonicalizerPhase->new->LoweringPhase->apply->canonicalizer->apply->canonicalizer->apply->return
PushThroughIfTest#testSnippet(boolean)::: push through if test test snippet:::i->if->else->return
PushThroughIfTest#referenceSnippet(boolean)::: push through if test reference snippet:::return
PushThroughIfTest#test1()::: push through if test test1:::test
PushThroughIfTest#test(String, String)::: push through if test test:::graph->parseEager->debug->graph->getDebug->debug->dump->foreach->graph->getNodes->snapshot->fs->replaceAtUsages->GraphUtil->killWithUnusedFloatingInputs->new->CanonicalizerPhase->getProviders->apply->new->CanonicalizerPhase->getProviders->apply->referenceGraph->parseEager->foreach->referenceGraph->getNodes->snapshot->fs->replaceAtUsages->GraphUtil->killWithUnusedFloatingInputs->new->CanonicalizerPhase->getProviders->apply->assertEquals
ReadAfterCheckCastTest#test1Snippet(A)::: read after check cast test test1 snippet:::if->b->return->else->b->return
ReadAfterCheckCastTest#test1()::: read after check cast test test1:::test
ReadAfterCheckCastTest#test(String)::: read after check cast test test:::debug->getDebugContext->try->s->debug->new->DebugDumpScope->scope->graph->parseEager->context->getProviders->canonicalizer->new->CanonicalizerPhase->new->LoweringPhase->apply->new->FloatingReadPhase->apply->canonicalizer->apply->debug->dump->foreach->graph->getNodes->first->usages->filter->Assert->node->getLocationIdentity->isImmutable->assertTrue->catch->throw->debug->handle->finally
ReassociateAndCanonicalTest#test1()::: reassociate and canonical test test1:::test
ReassociateAndCanonicalTest#test1Snippet()::: reassociate and canonical test test1 snippet:::return
ReassociateAndCanonicalTest#ref1Snippet()::: reassociate and canonical test ref1 snippet:::return
ReassociateAndCanonicalTest#test2()::: reassociate and canonical test test2:::test
ReassociateAndCanonicalTest#test2Snippet()::: reassociate and canonical test test2 snippet:::return
ReassociateAndCanonicalTest#ref2Snippet()::: reassociate and canonical test ref2 snippet:::return
ReassociateAndCanonicalTest#test3()::: reassociate and canonical test test3:::test
ReassociateAndCanonicalTest#test3Snippet()::: reassociate and canonical test test3 snippet:::return
ReassociateAndCanonicalTest#ref3Snippet()::: reassociate and canonical test ref3 snippet:::return
ReassociateAndCanonicalTest#test4()::: reassociate and canonical test test4:::test
ReassociateAndCanonicalTest#test4Snippet()::: reassociate and canonical test test4 snippet:::return
ReassociateAndCanonicalTest#ref4Snippet()::: reassociate and canonical test ref4 snippet:::return
ReassociateAndCanonicalTest#test5()::: reassociate and canonical test test5:::test
ReassociateAndCanonicalTest#test5Snippet()::: reassociate and canonical test test5 snippet:::return
ReassociateAndCanonicalTest#ref5Snippet()::: reassociate and canonical test ref5 snippet:::return
ReassociateAndCanonicalTest#test6()::: reassociate and canonical test test6:::test
ReassociateAndCanonicalTest#test6Snippet()::: reassociate and canonical test test6 snippet:::return
ReassociateAndCanonicalTest#ref6Snippet()::: reassociate and canonical test ref6 snippet:::return
ReassociateAndCanonicalTest#test7()::: reassociate and canonical test test7:::test
ReassociateAndCanonicalTest#test7Snippet()::: reassociate and canonical test test7 snippet:::return
ReassociateAndCanonicalTest#ref7Snippet()::: reassociate and canonical test ref7 snippet:::return
ReassociateAndCanonicalTest#test8()::: reassociate and canonical test test8:::test
ReassociateAndCanonicalTest#test8Snippet()::: reassociate and canonical test test8 snippet:::return
ReassociateAndCanonicalTest#ref8Snippet()::: reassociate and canonical test ref8 snippet:::return
ReassociateAndCanonicalTest#test9()::: reassociate and canonical test test9:::test
ReassociateAndCanonicalTest#test9Snippet()::: reassociate and canonical test test9 snippet:::return
ReassociateAndCanonicalTest#ref9Snippet()::: reassociate and canonical test ref9 snippet:::return
ReassociateAndCanonicalTest#test10()::: reassociate and canonical test test10:::test
ReassociateAndCanonicalTest#test10Snippet()::: reassociate and canonical test test10 snippet:::return
ReassociateAndCanonicalTest#ref10Snippet()::: reassociate and canonical test ref10 snippet:::return
ReassociateAndCanonicalTest#test11()::: reassociate and canonical test test11:::test
ReassociateAndCanonicalTest#test11Snippet()::: reassociate and canonical test test11 snippet:::return
ReassociateAndCanonicalTest#ref11Snippet()::: reassociate and canonical test ref11 snippet:::return
ReassociateAndCanonicalTest#test12()::: reassociate and canonical test test12:::test
ReassociateAndCanonicalTest#test12Snippet()::: reassociate and canonical test test12 snippet:::return
ReassociateAndCanonicalTest#ref12Snippet()::: reassociate and canonical test ref12 snippet:::return
ReassociateAndCanonicalTest#test13()::: reassociate and canonical test test13:::test
ReassociateAndCanonicalTest#test13Snippet()::: reassociate and canonical test test13 snippet:::return
ReassociateAndCanonicalTest#ref13Snippet()::: reassociate and canonical test ref13 snippet:::return
ReassociateAndCanonicalTest#test14()::: reassociate and canonical test test14:::test
ReassociateAndCanonicalTest#test14Snippet()::: reassociate and canonical test test14 snippet:::return
ReassociateAndCanonicalTest#ref14Snippet()::: reassociate and canonical test ref14 snippet:::return
ReassociateAndCanonicalTest#test15()::: reassociate and canonical test test15:::test
ReassociateAndCanonicalTest#test15Snippet()::: reassociate and canonical test test15 snippet:::return
ReassociateAndCanonicalTest#ref15Snippet()::: reassociate and canonical test ref15 snippet:::return
ReassociateAndCanonicalTest#test16()::: reassociate and canonical test test16:::test
ReassociateAndCanonicalTest#test16Snippet()::: reassociate and canonical test test16 snippet:::return
ReassociateAndCanonicalTest#ref16Snippet()::: reassociate and canonical test ref16 snippet:::return
ReassociateAndCanonicalTest#test(String, String)::: reassociate and canonical test test:::testGraph->parseEager->new->CanonicalizerPhase->getProviders->apply->refGraph->parseEager->new->CanonicalizerPhase->getProviders->apply->assertEquals
ReentrantBlockIteratorTest#oneBlock()::: reentrant block iterator test one block:::return
ReentrantBlockIteratorTest#fourBlock(int)::: reentrant block iterator test four block:::if->else->GraalDirectives->controlFlowAnchor->return
ReentrantBlockIteratorTest#loopBlocks(int)::: reentrant block iterator test loop blocks:::phi->for->i->return
ReentrantBlockIteratorTest#loopBlocks2(int)::: reentrant block iterator test loop blocks2:::phi->for->i->for->i->return
ReentrantBlockIteratorTest#loopBlocks3(char[], int, int, char[], int, int, int)::: reentrant block iterator test loop blocks3:::if->return->if->if->return->first->max->for->i->return
ReentrantBlockIteratorTest#loopBlocks4(int, int, int)::: reentrant block iterator test loop blocks4:::phi->for->i->return
ReentrantBlockIteratorTest#test01()::: reentrant block iterator test test01:::blocks->getVisitedBlocksInOrder->assertOrder
ReentrantBlockIteratorTest#test02()::: reentrant block iterator test test02:::blocks->getVisitedBlocksInOrder->assertOrder
ReentrantBlockIteratorTest#test03()::: reentrant block iterator test test03:::blocks->getVisitedBlocksInOrder->assertOrder
ReentrantBlockIteratorTest#test04()::: reentrant block iterator test test04:::blocks->getVisitedBlocksInOrder->assertOrder
ReentrantBlockIteratorTest#test05()::: reentrant block iterator test test05:::blocks->getVisitedBlocksInOrder->assertVisited
ReentrantBlockIteratorTest#test06()::: reentrant block iterator test test06:::getVisitedBlocksInOrder
ReentrantBlockIteratorTest#assertOrder(List, int...)::: reentrant block iterator test assert order:::if->blocks->size->Assert->Arrays->blocks->toArray->toString->Arrays->toString->fail->for->i->blocks->size
ReentrantBlockIteratorTest#assertVisited(List, int...)::: reentrant block iterator test assert visited:::if->blocks->size->Assert->Arrays->blocks->toArray->toString->Arrays->toString->fail->for->i->blocks->size
ReentrantBlockIteratorTest#getVisitedBlocksInOrder(String)::: reentrant block iterator test get visited blocks in order:::graph->parseEager->graph->setGuardsStage->blocks->new->ArrayList<>->voidState->new->VoidState->closure->new->BlockIteratorClosure<VoidState>->cfg->ControlFlowGraph->compute->ReentrantBlockIterator->cfg->getStartBlock->apply->graph->getOptions->new->SchedulePhase->apply->return
ReferenceGetLoopTest#checkMidTierGraph(StructuredGraph)::: reference get loop test check mid tier graph:::loops->new->LoopsData->found->foreach->loops->loops->foreach->loop->inside->nodes->if->access->location->access->getLocationIdentity->if->field->getField->if->field->getName->equals->field->getDeclaringClass->getMetaAccess->lookupJavaType->equals->if->getCanonicalGraphString->assertTrue
ReferenceGetLoopTest#test()::: reference get loop test test:::getMetaAccess->getMethod->lookupJavaMethod->getCode
ReferenceGetLoopTest#testSnippet()::: reference get loop test test snippet:::while->ref->get
ReflectionOptionDescriptors#extractEntries(Properties, String, boolean):::Extracts name/value entries from a set of properties based on a given name prefix.:::matches->EconomicMap->create->foreach->properties->entrySet->name->e->getKey->if->name->startsWith->value->e->getValue->if->name->prefix->length->substring->matches->put->return
ReflectionOptionDescriptors#addOption(Class, String, String)::: reflection option descriptors add option:::try->f->declaringClass->getDeclaredField->if->f->getType->isAssignableFrom->throw->String->getName->format->new->IllegalArgumentException->if->Modifier->f->getModifiers->isStatic->throw->String->format->new->IllegalArgumentException->f->setAccessible->declaredType->f->getAnnotatedType->getType->if->throw->String->format->new->IllegalArgumentException->pt->actualTypeArguments->pt->getActualTypeArguments->optionValueType->descriptors->OptionDescriptor->f->get->create->put->catch->throw->new->IllegalArgumentException->finally
ReflectionOptionDescriptors#iterator()::: reflection option descriptors iterator:::return->descriptors->getValues->iterator
ReflectionOptionDescriptors#get(String)::: reflection option descriptors get:::return->descriptors->get
ReverseBytesIntoArrayRegressionTest#toHexBytes(byte[])::: reverse bytes into array regression test to hex bytes:::buf->new->Formatter->foreach->buf->format->return->buf->toString->trim
ReverseBytesIntoArrayRegressionTest#assertDeepEquals(Object, Object)::: reverse bytes into array regression test assert deep equals:::if->super->toHexBytes->toHexBytes->assertDeepEquals->super->assertDeepEquals
ReverseBytesIntoArrayRegressionTest#test1()::: reverse bytes into array regression test test1:::test
ReverseBytesIntoArrayRegressionTest#serialize(int)::: reverse bytes into array regression test serialize:::v->Integer->reverseBytes->ba->new->byteArr->return
ScalarTypeSystemTest#referenceSnippet1(int)::: scalar type system test reference snippet1:::if->return->else->return
ScalarTypeSystemTest#test1()::: scalar type system test test1:::test
ScalarTypeSystemTest#test1Snippet(int)::: scalar type system test test1 snippet:::if->if->return->else->return->else->return
ScalarTypeSystemTest#test2()::: scalar type system test test2:::test
ScalarTypeSystemTest#test2Snippet(int)::: scalar type system test test2 snippet:::if->if->return->else->return->else->return
ScalarTypeSystemTest#test3()::: scalar type system test test3:::test
ScalarTypeSystemTest#referenceSnippet2(int, int)::: scalar type system test reference snippet2:::if->return->else->return
ScalarTypeSystemTest#test3Snippet(int, int)::: scalar type system test test3 snippet:::if->if->return->else->return->else->return
ScalarTypeSystemTest#referenceSnippet3(int, int)::: scalar type system test reference snippet3:::if->return->else->return
ScalarTypeSystemTest#test6()::: scalar type system test test6:::test
ScalarTypeSystemTest#test6Snippet(int, int)::: scalar type system test test6 snippet:::if->if->return->else->return->else->return
ScalarTypeSystemTest#test(String, String)::: scalar type system test test:::graph->parseEager->graph->getDebug->dump->context->getProviders->new->CanonicalizerPhase->apply->referenceGraph->parseEager->assertEquals
SchedulingTest#testValueProxyInputsSnippet(int)::: scheduling test test value proxy inputs snippet:::i->while->v->if->return
SchedulingTest#testValueProxyInputs()::: scheduling test test value proxy inputs:::graph->parseEager->foreach->graph->getNodes->filter->snapshot->fs->replaceAtUsages->GraphUtil->killWithUnusedFloatingInputs->schedulePhase->new->SchedulePhase->schedulePhase->apply->schedule->graph->getLastSchedule->nodeToBlock->schedule->getCFG->getNodeToBlock->graph->getNodes->filter->count->assertTrue->loopExit->graph->getNodes->filter->first->list->schedule->nodeToBlock->get->nodesFor->foreach->graph->getNodes->filter->if->node->toString->nodeToBlock->get->nodeToBlock->get->assertTrue->list->indexOf->list->indexOf->list->indexOf->list->indexOf->assertTrue
SchedulingTest2#testSnippet()::: scheduling test2 test snippet:::return->test
SchedulingTest2#test()::: scheduling test2 test:::return
SchedulingTest2#testValueProxyInputs()::: scheduling test2 test value proxy inputs:::graph->parseEager->debug->graph->getDebug->returnNode->graph->getNodes->first->beginNode->graph->new->BeginNode->add->returnNode->replaceAtPredecessor->beginNode->setNext->debug->dump->schedulePhase->new->SchedulePhase->schedulePhase->apply->schedule->graph->getLastSchedule->blockToNodesMap->schedule->getBlockToNodesMap->nodeToBlock->schedule->getNodeToBlockMap->schedule->getCFG->getBlocks->assertDeepEquals->foreach->graph->getNodes->filter->if->node->toString->nodeToBlock->get->nodeToBlock->get->nodeToBlock->get->nodeToBlock->get->assertTrue->foreach->graph->getNodes->block->nodeToBlock->get->fs->toString->schedule->getCFG->getStartBlock->assertTrue->foreach->fs->usages->if->stateAfter->usage->toString->nodeToBlock->get->assertTrue->if->block->getBeginNode->map->blockToNodesMap->get->map->indexOf->map->indexOf->map->indexOf->map->indexOf->assertTrue->context->getProviders->new->CanonicalizerPhase->new->LoweringPhase->apply->new->CanonicalizerPhase->new->LoweringPhase->apply->midContext->getProviders->getTargetProvider->graph->getProfilingInfo->new->MidTierContext->new->GuardLoweringPhase->apply->phase->new->FrameStateAssignmentPhase->phase->apply->schedulePhase->apply->graph->getLastSchedule->schedule->getBlockToNodesMap->schedule->getNodeToBlockMap->foreach->graph->getNodes->block->nodeToBlock->get->fs->toString->schedule->getCFG->getStartBlock->assertTrue->foreach->fs->usages->if->stateAfter->stateDuring->usage->toString->nodeToBlock->get->assertTrue->if->block->getBeginNode->map->blockToNodesMap->get->map->indexOf->map->indexOf->map->indexOf->map->indexOf->assertTrue
ShortCircuitNodeTest#test1()::: short circuit node test test1:::getResolvedJavaMethod->executeActual
ShortCircuitNodeTest#test1Snippet(int, int)::: short circuit node test test1 snippet:::v->if->if->i->else->if->test2->i
ShortCircuitNodeTest#test2(int, int)::: short circuit node test test2:::return
SimpleCFGTest#dumpGraph(StructuredGraph)::: simple test dump graph:::debug->graph->getDebug->debug->dump
SimpleCFGTest#testImplies()::: simple test test implies:::options->getInitialOptions->debug->DebugContext->getSnippetReflection->new->GraalDebugHandlersFactory->create->graph->new->StructuredGraph.Builder->build->trueEnd->graph->new->EndNode->add->falseEnd->graph->new->EndNode->add->trueBegin->graph->new->BeginNode->add->trueBegin->setNext->falseBegin->graph->new->BeginNode->add->falseBegin->setNext->ifNode->graph->new->IfNode->add->graph->start->setNext->merge->graph->new->MergeNode->add->merge->addForwardEnd->merge->addForwardEnd->returnNode->graph->new->ReturnNode->add->merge->setNext->dumpGraph->cfg->ControlFlowGraph->compute->blocks->cfg->getBlocks->assertDeepEquals->cfg->graph->start->blockFor->assertDeepEquals->cfg->blockFor->assertDeepEquals->cfg->blockFor->assertDeepEquals->cfg->blockFor->assertDeepEquals->cfg->blockFor->assertDeepEquals->cfg->blockFor->assertDeepEquals->cfg->blockFor->assertDeepEquals->cfg->blockFor->assertDeepEquals->assertDominator->assertDominator->assertDominator->assertDominator->assertDominatedSize->assertDominatedSize->assertDominatedSize->assertDominatedSize->assertPostdominator->assertPostdominator->assertPostdominator->assertPostdominator
SimpleCFGTest#assertDominator(Block, Block)::: simple test assert dominator:::Assert->block->getDominator->assertEquals
SimpleCFGTest#assertDominatedSize(Block, int)::: simple test assert dominated size:::count->domChild->block->getFirstDominated->while->domChild->getDominatedSibling->Assert->assertEquals
SimpleCFGTest#assertPostdominator(Block, Block)::: simple test assert postdominator:::Assert->block->getPostdominator->assertEquals
StableArrayReadFoldingTest#parseForCompile(ResolvedJavaMethod, CompilationIdentifier, OptionValues)::: stable array read folding test parse for compile:::graph->super->parseForCompile->foreach->graph->getNodes->filter->snapshot->if->getConstantReflection->constantNode->asJavaConstant->readArrayLength->newConstantNode->graph->ConstantNode->constantNode->asJavaConstant->getMetaAccess->forConstant->unique->constantNode->replaceAndDelete->return
StableArrayReadFoldingTest#killWithSameType()::: stable array read folding test kill with same type:::beforeKill->UNSAFE->getBoolean->afterKill->UNSAFE->getBoolean->return
StableArrayReadFoldingTest#testKillWithSameType()::: stable array read folding test test kill with same type:::method->getResolvedJavaMethod->new->Result->testAgainstExpected
StableArrayReadFoldingTest#killWithDifferentType()::: stable array read folding test kill with different type:::beforeKill->UNSAFE->getByte->afterKill->UNSAFE->getByte->return
StableArrayReadFoldingTest#testKillWithDifferentType()::: stable array read folding test test kill with different type:::method->getResolvedJavaMethod->new->Result->testAgainstExpected
StableArrayReadFoldingTest#killWithSameTypeUnaligned()::: stable array read folding test kill with same type unaligned:::beforeKill->UNSAFE->getInt->afterKill->UNSAFE->getInt->return
StableArrayReadFoldingTest#testKillWithSameTypeUnaligned()::: stable array read folding test test kill with same type unaligned:::Assume->getTarget->assumeTrue->method->getResolvedJavaMethod->new->Result->testAgainstExpected
StableArrayReadFoldingTest#killWithDifferentTypeUnaligned()::: stable array read folding test kill with different type unaligned:::beforeKill->UNSAFE->getByte->afterKill->UNSAFE->getByte->return
StableArrayReadFoldingTest#testKillWithDifferentTypeUnaligned()::: stable array read folding test test kill with different type unaligned:::Assume->getTarget->assumeTrue->method->getResolvedJavaMethod->new->Result->testAgainstExpected
StampCanonicalizerTest#andStamp(int, int)::: stamp canonicalizer test and stamp:::v->return
StampCanonicalizerTest#testAnd()::: stamp canonicalizer test test and:::testZeroReturn
StampCanonicalizerTest#shiftLeftStamp1(int)::: stamp canonicalizer test shift left stamp1:::v->return
StampCanonicalizerTest#shiftLeftStamp2(int)::: stamp canonicalizer test shift left stamp2:::v->if->return
StampCanonicalizerTest#testShift()::: stamp canonicalizer test test shift:::testZeroReturn->testZeroReturn
StampCanonicalizerTest#upperBoundShiftStamp1(int)::: stamp canonicalizer test upper bound shift stamp1:::v->return
StampCanonicalizerTest#upperBoundShiftStamp2(int)::: stamp canonicalizer test upper bound shift stamp2:::v->return
StampCanonicalizerTest#testUpperBoundShift()::: stamp canonicalizer test test upper bound shift:::testZeroReturn->testZeroReturn
StampCanonicalizerTest#divStamp1(int[])::: stamp canonicalizer test div stamp1:::v->return
StampCanonicalizerTest#divStamp2(int[])::: stamp canonicalizer test div stamp2:::v->return
StampCanonicalizerTest#testDiv()::: stamp canonicalizer test test div:::testZeroReturn->testZeroReturn
StampCanonicalizerTest#distinctMask(int, int)::: stamp canonicalizer test distinct mask:::x->y->return
StampCanonicalizerTest#testDistinctMask()::: stamp canonicalizer test test distinct mask:::testZeroReturn
StampCanonicalizerTest#testZeroReturn(String)::: stamp canonicalizer test test zero return:::graph->parseEager->new->CanonicalizerPhase->getProviders->apply->new->DeadCodeEliminationPhase->apply->assertConstantReturn
StampMemoryAccessTest#testReadPrimitive()::: stamp memory access test test read primitive:::memory->getConstantReflection->getMemoryAccessProvider->stamp->StampFactory->forKind->objectBase->getSnippetReflection->forObject->stamp->readConstant->assertTrue->arrayBase->getSnippetReflection->new->intArr->forObject->stamp->readConstant->assertTrue
StampMemoryAccessTest#testReadObject()::: stamp memory access test test read object:::memory->getConstantReflection->getMemoryAccessProvider->stamp->StampFactory->forKind->objectBase->getSnippetReflection->forObject->stamp->readConstant->assertTrue->arrayBase->getSnippetReflection->new->intArr->forObject->stamp->readConstant->assertTrue
StaticInterfaceFieldTest.C#test()::: c test:::return
StaticInterfaceFieldTest#test()::: static interface field test test:::eagerlyParseMethod
StaticInterfaceFieldTest#eagerlyParseMethod(Class, String)::: static interface field test eagerly parse method:::rt->Graal->getRequiredCapability->providers->rt->getHostBackend->getProviders->metaAccess->providers->getMetaAccess->graphBuilderSuite->new->PhaseSuite<>->plugins->new->InvocationPlugins->new->Plugins->config->GraphBuilderConfiguration->getDefault->withEagerResolving->withUnresolvedIsError->graphBuilderSuite->new->GraphBuilderPhase->appendPhase->context->new->HighTierContext->Assume->desiredAssertionStatus->assumeTrue->m->getMethod->method->metaAccess->lookupJavaMethod->options->getInitialOptions->debug->DebugContext->create->graph->new->StructuredGraph.Builder->method->build->try->s->debug->disableIntercept->ds->debug->scope->graphBuilderSuite->apply->catch->throw->debug->handle->finally
StraighteningTest#ref(int, int)::: straightening test ref:::return
StraighteningTest#test1Snippet(int, int)::: straightening test test1 snippet:::c->if->if->return->return
StraighteningTest#test3Snippet(int, int)::: straightening test test3 snippet:::val->System->currentTimeMillis->c->if->if->return->return
StraighteningTest#test2Snippet(int, int)::: straightening test test2 snippet:::c->if->else->return
StraighteningTest#test1()::: straightening test test1:::test
StraighteningTest#test2()::: straightening test test2:::test
StraighteningTest#test3()::: straightening test test3:::test
StraighteningTest#test(String)::: straightening test test:::graph->parseEager->debug->graph->getDebug->debug->dump->new->CanonicalizerPhase->getProviders->apply->referenceGraph->parseEager->assertEquals
SubWordArrayStoreTest#data()::: sub word array store test data:::ret->new->ArrayList<>->foreach->new->intArr->foreach->new->booleanArr->foreach->new->booleanArr->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->return
SubWordArrayStoreTest#testArrayStore()::: sub word array store test test array store:::testClass->getName->kind->toString->getClass->getResolvedJavaMethod->test
SubWordArrayStoreTest#arrayBaseOffset(JavaKind)::: sub word array store test array base offset:::switch->return->UNSAFE->arrayBaseOffset->return->UNSAFE->arrayBaseOffset->return->UNSAFE->arrayBaseOffset->return->UNSAFE->arrayBaseOffset->throw->GraalError->shouldNotReachHere
SubWordArrayStoreTest#toASMType(JavaKind)::: sub word array store test to type:::switch->return->return->return->return->throw->GraalError->shouldNotReachHere
SubWordArrayStoreTest#toArrayStoreOpcode(JavaKind)::: sub word array store test to array store opcode:::switch->return->return->return->throw->GraalError->shouldNotReachHere
SubWordArrayStoreTest#toArrayLoadOpcode(JavaKind)::: sub word array store test to array load opcode:::switch->return->return->return->throw->GraalError->shouldNotReachHere
SubWordArrayStoreTest#generateClass(String)::: sub word array store test generate class:::cw->new->ClassWriter->cw->visit->fieldName->fieldDescriptor->kind->getTypeChar->field->cw->visitField->field->visitEnd->clinit->cw->visitMethod->clinit->visitCode->clinit->visitIntInsn->clinit->toASMType->visitIntInsn->clinit->visitFieldInsn->clinit->visitInsn->clinit->visitMaxs->clinit->visitEnd->snippet->cw->visitMethod->snippet->visitCode->if->SubWordTestUtil->getUnsafe->snippet->visitFieldInsn->snippet->arrayBaseOffset->visitLdcInsn->snippet->visitLdcInsn->snippet->SubWordTestUtil->getUnsafePutMethodName->kind->getTypeChar->visitMethodInsn->else->snippet->visitFieldInsn->snippet->visitInsn->snippet->visitLdcInsn->snippet->toArrayStoreOpcode->visitInsn->if->SubWordTestUtil->getUnsafe->snippet->visitFieldInsn->snippet->arrayBaseOffset->visitLdcInsn->snippet->SubWordTestUtil->getUnsafePutMethodName->kind->getTypeChar->visitMethodInsn->else->snippet->visitFieldInsn->snippet->visitInsn->snippet->toArrayLoadOpcode->visitInsn->snippet->visitLdcInsn->SubWordTestUtil->convertToKind->SubWordTestUtil->testEqual->snippet->visitMaxs->snippet->visitEnd->cw->visitEnd->return->cw->toByteArray
SubWordFieldStoreTest#data()::: sub word field store test data:::ret->new->ArrayList<>->foreach->new->intArr->foreach->new->booleanArr->foreach->new->booleanArr->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->return
SubWordFieldStoreTest#testFieldStore()::: sub word field store test test field store:::testClass->getName->kind->toString->getClass->getResolvedJavaMethod->test
SubWordFieldStoreTest#generateClass(String)::: sub word field store test generate class:::cw->new->ClassWriter->cw->visit->fieldName->fieldDescriptor->Character->kind->getTypeChar->toString->field->cw->visitField->field->visitEnd->snippet->cw->new->StringArr->visitMethod->snippet->visitCode->if->snippet->Type->getObjectType->visitLdcInsn->snippet->visitLdcInsn->snippet->visitMethodInsn->snippet->visitVarInsn->SubWordTestUtil->getUnsafe->snippet->visitVarInsn->snippet->visitMethodInsn->snippet->visitVarInsn->SubWordTestUtil->getUnsafe->snippet->visitVarInsn->snippet->visitMethodInsn->snippet->visitVarInsn->SubWordTestUtil->getUnsafe->snippet->visitVarInsn->snippet->visitVarInsn->snippet->visitLdcInsn->snippet->SubWordTestUtil->getUnsafePutMethodName->kind->getTypeChar->visitMethodInsn->else->snippet->visitLdcInsn->snippet->visitFieldInsn->if->if->snippet->Type->getObjectType->visitLdcInsn->snippet->visitLdcInsn->snippet->visitMethodInsn->snippet->visitVarInsn->SubWordTestUtil->getUnsafe->snippet->visitVarInsn->snippet->visitMethodInsn->snippet->visitVarInsn->SubWordTestUtil->getUnsafe->snippet->visitVarInsn->snippet->visitMethodInsn->snippet->visitVarInsn->SubWordTestUtil->getUnsafe->snippet->visitVarInsn->snippet->visitVarInsn->snippet->SubWordTestUtil->getUnsafePutMethodName->kind->getTypeChar->visitMethodInsn->else->snippet->visitFieldInsn->snippet->visitLdcInsn->SubWordTestUtil->convertToKind->SubWordTestUtil->testEqual->snippet->visitMaxs->snippet->visitEnd->cw->visitEnd->return->cw->toByteArray
SubWordInputTest#data()::: sub word input test data:::ret->new->ArrayList<>->foreach->new->intArr->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->return
SubWordInputTest#testSubWordInput()::: sub word input test test sub word input:::testClass->getName->kind->toString->getClass->wrapper->getResolvedJavaMethod->expected->executeExpected->getResolvedJavaMethod->getInitialOptions->getCode->executeExpected->assertEquals->Collections->emptySet->testAgainstExpected
SubWordInputTest#generateClass(String)::: sub word input test generate class:::cw->new->ClassWriter->cw->visit->typeChar->kind->getTypeChar->getDescriptor->get->cw->visitMethod->get->visitCode->get->visitVarInsn->get->visitInsn->get->visitMaxs->get->visitEnd->snippet->cw->visitMethod->snippet->visitCode->snippet->visitVarInsn->snippet->visitMethodInsn->snippet->visitVarInsn->SubWordTestUtil->convertToKind->SubWordTestUtil->testEqual->snippet->visitMaxs->snippet->visitEnd->cw->visitEnd->return->cw->toByteArray
SubWordInputTest2#data()::: sub word input test2 data:::ret->new->ArrayList<>->foreach->new->intArr->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->return
SubWordInputTest2#testSubWordInput()::: sub word input test2 test sub word input:::testClass->getName->kind->toString->getClass->wrapper->getResolvedJavaMethod->expected->executeExpected->getResolvedJavaMethod->getInitialOptions->getCode->executeExpected->assertEquals->Collections->emptySet->testAgainstExpected
SubWordInputTest2#generateClass(String)::: sub word input test2 generate class:::cw->new->ClassWriter->cw->visit->typeChar->kind->getTypeChar->getDescriptor->get->cw->visitMethod->get->visitCode->get->visitVarInsn->label->new->Label->get->visitJumpInsn->get->visitInsn->get->visitInsn->get->visitLabel->get->visitInsn->get->visitInsn->get->visitMaxs->get->visitEnd->snippet->cw->visitMethod->snippet->visitCode->snippet->visitVarInsn->snippet->visitMethodInsn->snippet->visitInsn->snippet->visitMaxs->snippet->visitEnd->cw->visitEnd->return->cw->toByteArray
SubWordReturnTest#data()::: sub word return test data:::ret->new->ArrayList<>->foreach->new->intArr->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->ret->new->ObjectArr->add->return
SubWordReturnTest#testSubWordReturn()::: sub word return test test sub word return:::testClass->getName->kind->toString->getClass->method->getResolvedJavaMethod->test
SubWordReturnTest.ByteGetter#get()::: byte getter get:::return
SubWordReturnTest.ByteGetter#testByteSnippet()::: byte getter test byte snippet:::return->get
SubWordReturnTest#generateClass(String)::: sub word return test generate class:::cw->new->ClassWriter->cw->visit->intField->cw->visitField->intField->visitEnd->get->cw->kind->getTypeChar->visitMethod->get->visitCode->get->visitFieldInsn->get->visitInsn->get->visitMaxs->get->visitEnd->snippet->cw->visitMethod->snippet->visitCode->snippet->kind->getTypeChar->visitMethodInsn->snippet->visitInsn->snippet->visitMaxs->snippet->visitEnd->cw->visitEnd->return->cw->toByteArray
SubWordTestUtil#convertToKind(MethodVisitor, JavaKind)::: sub word test util convert to kind:::switch->snippet->visitInsn->snippet->visitInsn->break->snippet->visitInsn->break->snippet->visitInsn->break->snippet->visitInsn->break->throw->GraalError->shouldNotReachHere
SubWordTestUtil#testEqual(MethodVisitor)::: sub word test util test equal:::label->new->Label->snippet->visitJumpInsn->snippet->visitInsn->snippet->visitInsn->snippet->visitLabel->snippet->visitInsn->snippet->visitInsn
SubWordTestUtil#getUnsafe(MethodVisitor)::: sub word test util get unsafe:::snippet->getName->replace->visitFieldInsn
SubWordTestUtil#getUnsafePutMethodName(JavaKind)::: sub word test util get unsafe put method name:::name->kind->getJavaName->return->name->substring->toUpperCase->name->substring
SwitchCanonicalizerTest#divByPowerOf2(int)::: switch canonicalizer test div by power of2:::switch->return->hashCode->return
SwitchCanonicalizerTest#testDivByPowerOf2()::: switch canonicalizer test test div by power of2:::shouldFoldSwitch
SwitchCanonicalizerTest#divByNonPowerOf2(int)::: switch canonicalizer test div by non power of2:::switch->return->hashCode->return
SwitchCanonicalizerTest#testDivByNonPowerOf2()::: switch canonicalizer test test div by non power of2:::shouldFoldSwitch
SwitchCanonicalizerTest#remByPowerOf2(int)::: switch canonicalizer test rem by power of2:::switch->return->hashCode->return
SwitchCanonicalizerTest#testRemByPowerOf2()::: switch canonicalizer test test rem by power of2:::shouldFoldSwitch
SwitchCanonicalizerTest#remByPowerOf2PositiveX(int)::: switch canonicalizer test rem by power of2 positive x:::n0->switch->return->hashCode->return
SwitchCanonicalizerTest#testRemByPowerOf2PositiveX()::: switch canonicalizer test test rem by power of2 positive x:::shouldFoldSwitch
SwitchCanonicalizerTest#remByPowerOf2NegativeX(int)::: switch canonicalizer test rem by power of2 negative x:::n0->switch->return->hashCode->return
SwitchCanonicalizerTest#testRemByPowerOf2NegativeX()::: switch canonicalizer test test rem by power of2 negative x:::shouldFoldSwitch
SwitchCanonicalizerTest#remByNonPowerOf2(int)::: switch canonicalizer test rem by non power of2:::switch->return->hashCode->return
SwitchCanonicalizerTest#testRemByNonPowerOf2()::: switch canonicalizer test test rem by non power of2:::shouldFoldSwitch
SwitchCanonicalizerTest#shouldFoldSwitch(String)::: switch canonicalizer test should fold switch:::graph->getResolvedJavaMethod->parseForCompile->new->CanonicalizerPhase->getDefaultHighTierContext->apply->graph->hasNode->assertFalse
SwitchDyingLoopTest#snippet(int, int)::: switch dying loop test snippet:::r->for->i->return
SwitchDyingLoopTest#test()::: switch dying loop test test:::canonicalizerPhase->new->CanonicalizerPhase->highTierContext->getDefaultHighTierContext->graph->parseEager->graph->getNodes->hasCount->assertThat->graph->getNodes->hasCount->assertThat->canonicalizerPhase->apply->graph->getNodes->hasCount->assertThat->graph->getNodes->hasCount->assertThat->parameter->graph->getParameter->assertNotNull->parameter->StampFactory->forInteger->setStamp->canonicalizerPhase->apply->graph->getNodes->isEmpty->assertThat->graph->getNodes->hasCount->assertThat
SwitchFoldingTest#referenceSnippet(int)::: switch folding test reference snippet:::switch->return->return->return->return->return->return->return->return->return->return
SwitchFoldingTest#reference2Snippet(int)::: switch folding test reference2 snippet:::switch->return->return->return->return
SwitchFoldingTest#reference3Snippet(int)::: switch folding test reference3 snippet:::switch->return->return->return
SwitchFoldingTest#test1Snippet(int)::: switch folding test test1 snippet:::if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->return
SwitchFoldingTest#test1()::: switch folding test test1:::test1
SwitchFoldingTest#test2Snippet(int)::: switch folding test test2 snippet:::switch->return->return->return->return->return->switch->return->return->return->return->return
SwitchFoldingTest#test2()::: switch folding test test2:::test1
SwitchFoldingTest#test3Snippet(int)::: switch folding test test3 snippet:::switch->return->switch->return->switch->return->switch->return->switch->return->switch->return->switch->return->switch->return->switch->return->return
SwitchFoldingTest#test3()::: switch folding test test3:::test1
SwitchFoldingTest#test4Snippet(int)::: switch folding test test4 snippet:::switch->return->return->return->return->return->return->return->if->return->else->if->return->else->return
SwitchFoldingTest#test4()::: switch folding test test4:::test1
SwitchFoldingTest#test5Snippet(int)::: switch folding test test5 snippet:::switch->return->switch->return->switch->return->switch->return->switch->return->switch->return->switch->return->if->return->else->if->return->else->return
SwitchFoldingTest#test5()::: switch folding test test5:::test1
SwitchFoldingTest#test6Snippet(int)::: switch folding test test6 snippet:::if->return->else->switch->return->if->return->else->if->return->else->switch->return->return->return->if->return->else->if->return->else->return
SwitchFoldingTest#test6()::: switch folding test test6:::test1
SwitchFoldingTest#test7Snippet(int)::: switch folding test test7 snippet:::if->return->else->switch->return->return->return
SwitchFoldingTest#test7()::: switch folding test test7:::test2
SwitchFoldingTest#test8Snippet(int)::: switch folding test test8 snippet:::switch->return->switch->switch->return->return
SwitchFoldingTest#test8()::: switch folding test test8:::test3
SwitchFoldingTest#reference4Snippet(int)::: switch folding test reference4 snippet:::switch->return->return->return->return->return
SwitchFoldingTest#test9Snippet(int)::: switch folding test test9 snippet:::switch->return->return->if->return->else->if->return->else->return
SwitchFoldingTest#test9()::: switch folding test test9:::test4
SwitchFoldingTest#reference5Snippet(int)::: switch folding test reference5 snippet:::switch->return->return->return->return->return
SwitchFoldingTest#test10Snippet(int)::: switch folding test test10 snippet:::if->return->else->if->return->else->switch->return->return
SwitchFoldingTest#test10()::: switch folding test test10:::test5
SwitchFoldingTest#test1(String)::: switch folding test test1:::test
SwitchFoldingTest#test2(String)::: switch folding test test2:::test
SwitchFoldingTest#test3(String)::: switch folding test test3:::test
SwitchFoldingTest#test4(String)::: switch folding test test4:::test
SwitchFoldingTest#test5(String)::: switch folding test test5:::test
SwitchFoldingTest#test(String, String)::: switch folding test test:::graph->parseEager->debug->graph->getDebug->debug->dump->new->CanonicalizerPhase->getProviders->apply->referenceGraph->parseEager->assertEquals
SwitchTest#test1(int)::: switch test test1:::switch->return->return
SwitchTest#run1()::: switch test run1:::method->getResolvedJavaMethod->compiled->executeActual->new->Result->assertEquals
TrivialInliningExplosionTest#trivial()::: trivial inlining explosion test trivial:::trivial->trivial->trivial
TrivialInliningExplosionTest#main()::: trivial inlining explosion test main:::trivial->trivial->trivial->trivial->trivial->trivial->trivial->trivial->trivial
TrivialInliningExplosionTest#parseForCompile(ResolvedJavaMethod, CompilationIdentifier, OptionValues)::: trivial inlining explosion test parse for compile:::graph->super->parseForCompile->graph->getNodeCount->return
TrivialInliningExplosionTest#test()::: trivial inlining explosion test test:::methodm0->getResolvedJavaMethod->Assert->methodm0->getCodeSize->getInitialOptions->getValue->assertTrue->test->afterCompileSize->lastCompiledGraph->getNodeCount->Assert->assertTrue->Assert->assertTrue
TwoSlotMarkerClearingTest#testTwoSlotMarkerClearing()::: two slot marker clearing test test two slot marker clearing:::testClass->getClass->t1->getResolvedJavaMethod->parseForCompile->t2->getResolvedJavaMethod->parseForCompile
TwoSlotMarkerClearingTest#generateClass(String)::: two slot marker clearing test generate class:::cw->new->ClassWriter->cw->visit->getDescriptor->t1->cw->visitMethod->t1->visitCode->t1->visitVarInsn->t1->visitVarInsn->t1->visitVarInsn->label->new->Label->t1->visitJumpInsn->t1->visitVarInsn->t1->visitInsn->t1->visitLabel->t1->visitVarInsn->t1->visitInsn->t1->visitMaxs->t1->visitEnd->t2->cw->visitMethod->t2->visitCode->t2->visitVarInsn->t2->visitVarInsn->t2->visitVarInsn->label1->new->Label->t2->visitJumpInsn->t2->visitVarInsn->t2->visitInsn->t2->visitLabel->t2->visitVarInsn->t2->visitInsn->t2->visitMaxs->t2->visitEnd->cw->visitEnd->return->cw->toByteArray
TypeSystemTest#test3()::: type system test test3:::test
TypeSystemTest#referenceSnippet3(Object)::: type system test reference snippet3:::if->return->else->return
TypeSystemTest#test3Snippet(Object)::: type system test test3 snippet:::if->if->return->else->return->else->return
TypeSystemTest#test4()::: type system test test4:::test
TypeSystemTest#test4Snippet(Object)::: type system test test4 snippet:::if->o2->if->return->else->return->else->return
TypeSystemTest#test5()::: type system test test5:::test
TypeSystemTest#referenceSnippet5(Object, Object)::: type system test reference snippet5:::if->if->return->else->if->return->if->return->return
TypeSystemTest#test5Snippet(Object, Object)::: type system test test5 snippet:::if->if->if->return->return->else->if->if->return->return->if->return->return
TypeSystemTest#test6()::: type system test test6:::testHelper
TypeSystemTest#test6Snippet(int)::: type system test test6 snippet:::o->if->new->FileInputStream->if->new->byteArr->new->ByteArrayInputStream->if->new->BufferedInputStream->return->available
TypeSystemTest#test7()::: type system test test7:::test
TypeSystemTest#test7Snippet(int)::: type system test test7 snippet:::return
TypeSystemTest#referenceSnippet7(int)::: type system test reference snippet7:::return
TypeSystemTest#test(String, String)::: type system test test:::graph->parseEager->debug->graph->getDebug->debug->dump->new->ConditionalEliminationPhase->getProviders->apply->new->CanonicalizerPhase->getProviders->apply->new->CanonicalizerPhase->getProviders->apply->referenceGraph->parseEager->new->ConditionalEliminationPhase->getProviders->apply->new->CanonicalizerPhase->getProviders->apply->new->CanonicalizerPhase->getProviders->apply->assertEquals
TypeSystemTest#assertEquals(StructuredGraph, StructuredGraph)::: type system test assert equals:::debug->graph->getDebug->if->getNodeCountExcludingUnusedConstants->getNodeCountExcludingUnusedConstants->debug->dump->debug->dump->Assert->expected->getNodeCount->graph->getNodeCount->fail
TypeSystemTest#outputGraph(StructuredGraph, String)::: type system test output graph:::TTY->println->schedulePhase->graph->getOptions->new->SchedulePhase->schedulePhase->apply->schedule->graph->getLastSchedule->foreach->schedule->getCFG->getBlocks->TTY->print->if->schedule->getCFG->getStartBlock->TTY->print->TTY->print->foreach->block->getSuccessors->TTY->print->TTY->println->foreach->schedule->getBlockToNodesMap->get->outputNode
TypeSystemTest#outputNode(Node)::: type system test output node:::TTY->node->getUsageCount->print->foreach->node->inputs->TTY->input->toString->print->TTY->println->if->foreach->phis->outputNode
TypeSystemTest#testHelper(String, Class)::: type system test test helper:::graph->parseEager->new->CanonicalizerPhase->getProviders->apply->new->CanonicalizerPhase->getProviders->apply->debug->graph->getDebug->debug->dump->Assert->graph->getNodes->filter->iterator->hasNext->assertFalse
TypeWriterTest#putValue(TypeWriter, long)::: type writer test put value:::if->TypeConversion->isS1->writer->putS1->if->TypeConversion->isU1->writer->putU1->if->TypeConversion->isS2->writer->putS2->if->TypeConversion->isU2->writer->putU2->if->TypeConversion->isS4->writer->putS4->if->TypeConversion->isU4->writer->putU4->writer->putS8->writer->putSV->if->writer->putUV
TypeWriterTest#checkValue(TypeReader, long)::: type writer test check value:::if->TypeConversion->isS1->Assert->reader->getS1->assertEquals->if->TypeConversion->isU1->Assert->reader->getU1->assertEquals->if->TypeConversion->isS2->Assert->reader->getS2->assertEquals->if->TypeConversion->isU2->Assert->reader->getU2->assertEquals->if->TypeConversion->isS4->Assert->reader->getS4->assertEquals->if->TypeConversion->isU4->Assert->reader->getU4->assertEquals->Assert->reader->getS8->assertEquals->Assert->reader->getSV->assertEquals->if->Assert->reader->getUV->assertEquals
TypeWriterTest#putValues(TypeWriter)::: type writer test put values:::for->i
TypeWriterTest#checkValues(TypeReader)::: type writer test check values:::for->i
TypeWriterTest#test01(boolean)::: type writer test test01:::writer->UnsafeArrayTypeWriter->create->putValues->array->TypeConversion->writer->getBytesWritten->asU4->new->byteArr->writer->toArray->reader->UnsafeArrayTypeReader->create->checkValues
TypeWriterTest#test01a()::: type writer test test01a:::getTarget->supportsUnalignedMemoryAccess->test01
TypeWriterTest#test01b()::: type writer test test01b:::test01
TypeWriterTest#checkSignedSize(TypeWriter, long, long)::: type writer test check signed size:::sizeBefore->writer->getBytesWritten->writer->putSV->Assert->writer->getBytesWritten->assertEquals
TypeWriterTest#checkUnsignedSize(TypeWriter, long, long)::: type writer test check unsigned size:::sizeBefore->writer->getBytesWritten->writer->putUV->Assert->writer->getBytesWritten->assertEquals
TypeWriterTest#checkSizes(TypeWriter)::: type writer test check sizes:::checkSignedSize->checkSignedSize->checkSignedSize->checkSignedSize->checkSignedSize->checkSignedSize->checkSignedSize->checkSignedSize->checkSignedSize->checkSignedSize->checkSignedSize->checkUnsignedSize->checkUnsignedSize->checkUnsignedSize->checkUnsignedSize->checkUnsignedSize->checkUnsignedSize->checkUnsignedSize
TypeWriterTest#test02a()::: type writer test test02a:::UnsafeArrayTypeWriter->getTarget->supportsUnalignedMemoryAccess->create->checkSizes
TypeWriterTest#test02b()::: type writer test test02b:::UnsafeArrayTypeWriter->create->checkSizes
UnbalancedMonitorsTest#runWrongOrder()::: unbalanced monitors test run wrong order:::checkForBailout
UnbalancedMonitorsTest#runTooFewExits()::: unbalanced monitors test run too few exits:::checkForBailout
UnbalancedMonitorsTest#runTooManyExits()::: unbalanced monitors test run too many exits:::checkForBailout
UnbalancedMonitorsTest#runTooFewExitsExceptional()::: unbalanced monitors test run too few exits exceptional:::checkForBailout
UnbalancedMonitorsTest#runTooManyExitsExceptional()::: unbalanced monitors test run too many exits exceptional:::checkForBailout
UnbalancedMonitorsTest#checkForBailout(String)::: unbalanced monitors test check for bailout:::method->LOADER->findClass->getResolvedJavaMethod->try->options->getInitialOptions->graph->getDebugContext->new->StructuredGraph.Builder->method->build->plugins->new->InvocationPlugins->new->Plugins->graphBuilderConfig->GraphBuilderConfiguration->getDefault->withEagerResolving->withUnresolvedIsError->optimisticOpts->graphBuilder->getProviders->new->GraphBuilderPhase.Instance->graphBuilder->apply->catch->if->e->getMessage->contains->return->throw->finally->assertTrue
UnbalancedMonitorsTest.Gen#generateClass()::: gen generate class:::cw->new->ClassWriter->cw->visit->cw->visitSource->cw->visitInnerClass->visitConstructor->visitWrongOrder->visitBlockStructured->visitBlockStructured->visitBlockStructured->visitBlockStructured->cw->visitEnd->return->cw->toByteArray
UnbalancedMonitorsTest.Gen#visitBlockStructured(ClassWriter, boolean, boolean)::: gen visit block structured:::name->exceptionalExitCount->normalExitCount->mv->cw->visitMethod->mv->visitCode->l0->new->Label->l1->new->Label->l2->new->Label->mv->visitTryCatchBlock->l3->new->Label->mv->visitTryCatchBlock->l4->new->Label->l5->new->Label->l6->new->Label->mv->visitTryCatchBlock->l7->new->Label->mv->visitTryCatchBlock->l8->new->Label->mv->visitLabel->mv->visitVarInsn->mv->visitInsn->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->mv->visitVarInsn->mv->visitInsn->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->mv->visitVarInsn->mv->visitVarInsn->mv->visitMethodInsn->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->for->i->mv->visitLabel->mv->visitInsn->mv->visitLabel->mv->new->ObjectArr->new->ObjectArr->visitFrame->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->mv->visitInsn->mv->visitLabel->mv->new->ObjectArr->new->ObjectArr->visitFrame->for->i->mv->visitLabel->mv->visitInsn->l9->new->Label->mv->visitLabel->mv->visitMaxs->mv->visitEnd
UnbalancedMonitorsTest.Gen#visitWrongOrder(ClassWriter)::: gen visit wrong order:::mv->cw->visitMethod->mv->visitCode->l0->new->Label->l1->new->Label->l2->new->Label->mv->visitTryCatchBlock->l3->new->Label->mv->visitTryCatchBlock->l4->new->Label->l5->new->Label->l6->new->Label->mv->visitTryCatchBlock->l7->new->Label->mv->visitTryCatchBlock->l8->new->Label->mv->visitLabel->mv->visitVarInsn->mv->visitInsn->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->mv->visitVarInsn->mv->visitInsn->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->mv->visitVarInsn->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->mv->visitInsn->mv->visitLabel->mv->new->ObjectArr->new->ObjectArr->visitFrame->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->mv->visitInsn->mv->visitLabel->mv->new->ObjectArr->new->ObjectArr->visitFrame->mv->visitVarInsn->mv->visitInsn->mv->visitLabel->mv->visitInsn->l9->new->Label->mv->visitLabel->mv->visitMaxs->mv->visitEnd
UnbalancedMonitorsTest.Gen#visitConstructor(ClassWriter)::: gen visit constructor:::mv->cw->visitMethod->mv->visitCode->l0->new->Label->mv->visitLabel->mv->visitVarInsn->mv->visitMethodInsn->l1->new->Label->mv->visitLabel->mv->visitInsn->l2->new->Label->mv->visitLabel->mv->visitMaxs->mv->visitEnd
UnbalancedMonitorsTest.AsmLoader#findClass(String)::: asm loader find class:::if->name->equals->if->return->bytes->Gen->generateClass->return->defineClass->else->return->super->findClass
UncheckedInterfaceProviderTest#snippet(Runnable, Runnable[])::: unchecked interface provider test snippet:::GraalDirectives->blackhole->GraalDirectives->blackhole->GraalDirectives->blackhole->GraalDirectives->blackhole->GraalDirectives->interfaceReturn->blackhole->GraalDirectives->interfaceArrayReturn->blackhole->GraalDirectives->interfaceReturnException->blackhole->GraalDirectives->interfaceArrayReturnException->blackhole
UncheckedInterfaceProviderTest#interfaceReturn()::: unchecked interface provider test interface return:::return->new->A
UncheckedInterfaceProviderTest#interfaceArrayReturn()::: unchecked interface provider test interface array return:::return->new->RunnableArr->new->A->new->B->new->C->new->D
UncheckedInterfaceProviderTest#interfaceReturnException()::: unchecked interface provider test interface return exception:::return->new->A
UncheckedInterfaceProviderTest#interfaceArrayReturnException()::: unchecked interface provider test interface array return exception:::return->new->RunnableArr->new->A->new->B->new->C->new->D
UncheckedInterfaceProviderTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: unchecked interface provider test bytecode parser should inline invoke:::if->method->getName->startsWith->method->getName->startsWith->if->method->getName->equals->return->return->return->super->bytecodeParserShouldInlineInvoke
UncheckedInterfaceProviderTest#setup()::: unchecked interface provider test setup:::interfaceArrayReturn
UncheckedInterfaceProviderTest#test()::: unchecked interface provider test test:::graph->parseEager->foreach->graph->getNodes->filter->Assert->b->getValue->instanceOf->is->assertThat->uncheckedStamp->b->getValue->uncheckedStamp->context->b->getValue->toString->Assert->assertNotNull->uncheckedType->StampTool->typeOrNull->type->StampTool->b->getValue->typeOrNull->Assert->arrayDepth->arrayDepth->assertEquals->Assert->type->getElementalType->isJavaLangObject->assertTrue->Assert->assertNotNull->Assert->uncheckedType->getElementalType->isInterface->assertTrue
UncheckedInterfaceProviderTest#arrayDepth(ResolvedJavaType)::: unchecked interface provider test array depth:::depth->t->while->t->isArray->t->getComponentType->return
UncheckedInterfaceProviderTest.A#run()::: a run:::
UncheckedInterfaceProviderTest.B#run()::: b run:::
UncheckedInterfaceProviderTest.C#run()::: c run:::
UncheckedInterfaceProviderTest.D#run()::: d run:::
UnsafeReadEliminationTest#test1Snippet(double)::: unsafe read elimination test test1 snippet:::m->if->UNSAFE->putDouble->else->UNSAFE->getLong->return->UNSAFE->getLong
UnsafeReadEliminationTest#test2Snippet(A, int)::: unsafe read elimination test test2 snippet:::phi->if->r->UNSAFE->putDouble->else->r->UNSAFE->putLong->GraalDirectives->controlFlowAnchor->UNSAFE->getDouble->return
UnsafeReadEliminationTest#test01()::: unsafe read elimination test test01:::graph->parseEager->testEarlyReadElimination
UnsafeReadEliminationTest#test02()::: unsafe read elimination test test02:::graph->parseEager->testPartialEscapeReadElimination
UnsafeReadEliminationTest#test03()::: unsafe read elimination test test03:::graph->parseEager->testEarlyReadElimination
UnsafeReadEliminationTest#test04()::: unsafe read elimination test test04:::graph->parseEager->testEarlyReadElimination
UnsafeReadEliminationTest#testEarlyReadElimination(StructuredGraph, int, int)::: unsafe read elimination test test early read elimination:::context->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->canonicalizer->apply->new->EarlyReadEliminationPhase->apply->Assert->graph->getNodes->filter->count->assertEquals->new->LoweringPhase->apply->canonicalizer->apply->new->EarlyReadEliminationPhase->apply->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->count->assertEquals
UnsafeReadEliminationTest#testPartialEscapeReadElimination(StructuredGraph, int, int)::: unsafe read elimination test test partial escape read elimination:::options->graph->getOptions->context->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->canonicalizer->apply->new->PartialEscapePhase->apply->Assert->graph->getNodes->filter->count->assertEquals->new->LoweringPhase->apply->canonicalizer->apply->new->PartialEscapePhase->apply->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->count->assertEquals
UnsafeReadEliminationTest#testWriteIntToByteArraySnippet()::: unsafe read elimination test test write int to byte array snippet:::array->new->byteArr->UNSAFE->putInt->return
UnsafeReadEliminationTest#testWriteIntToByteArray()::: unsafe read elimination test test write int to byte array:::test
UnsafeReadEliminationTest#testWriteSignedExtendedByteToByteArraySnippet(byte)::: unsafe read elimination test test write signed extended byte to byte array snippet:::array->new->byteArr->UNSAFE->putInt->return
UnsafeReadEliminationTest#testWriteSignedExtendedByteToByteArray()::: unsafe read elimination test test write signed extended byte to byte array:::test
UnsafeReadEliminationTest#testWriteLongToIntArraySnippet()::: unsafe read elimination test test write long to int array snippet:::array->new->intArr->UNSAFE->putLong->return
UnsafeReadEliminationTest#testWriteLongToIntArray()::: unsafe read elimination test test write long to int array:::test
UnsafeReadEliminationTest#testWriteByteToIntArraySnippet()::: unsafe read elimination test test write byte to int array snippet:::array->new->intArr->UNSAFE->putByte->return
UnsafeReadEliminationTest#testWriteByteToIntArray()::: unsafe read elimination test test write byte to int array:::test
UnsafeReadEliminationTest#testWriteIntToLongArraySnippet()::: unsafe read elimination test test write int to long array snippet:::array->new->longArr->UNSAFE->putInt->return
UnsafeReadEliminationTest#testWriteIntToLongArray()::: unsafe read elimination test test write int to long array:::test
UnsafeReadEliminationTest#testWriteFloatToIntArraySnippet()::: unsafe read elimination test test write float to int array snippet:::array->new->floatArr->UNSAFE->Float->floatToRawIntBits->putInt->return
UnsafeReadEliminationTest#testWriteFloatToIntArray()::: unsafe read elimination test test write float to int array:::test
UnsafeReadEliminationTest#alignedKill()::: unsafe read elimination test aligned kill:::beforeKill->UNSAFE->getInt->afterKill->UNSAFE->getInt->return
UnsafeReadEliminationTest#testAlignedKill()::: unsafe read elimination test test aligned kill:::test
UnsafeReadEliminationTest#unalignedKill()::: unsafe read elimination test unaligned kill:::beforeKill->UNSAFE->getInt->afterKill->UNSAFE->getInt->return
UnsafeReadEliminationTest#testUnalignedKill()::: unsafe read elimination test test unaligned kill:::test
UnsafeReadEliminationTest#killBooleanAccessToBooleanArrayViaBASTORE()::: unsafe read elimination test kill boolean access to boolean array via e:::beforeKill->UNSAFE->getBoolean->afterKill->UNSAFE->getBoolean->return
UnsafeReadEliminationTest#testKillBooleanAccessToBooleanArrayViaBASTORE()::: unsafe read elimination test test kill boolean access to boolean array via e:::test
UnsafeReadEliminationTest#killByteAccessToBooleanArrayViaBASTORE()::: unsafe read elimination test kill byte access to boolean array via e:::beforeKill->UNSAFE->getByte->afterKill->UNSAFE->getByte->return
UnsafeReadEliminationTest#testKillByteAccessToBooleanArrayViaBASTORE()::: unsafe read elimination test test kill byte access to boolean array via e:::test
UnsafeReadEliminationTest#unsafeWriteToBooleanArray()::: unsafe read elimination test unsafe write to boolean array:::UNSAFE->putByte->result->UNSAFE->getBoolean->return
UnsafeReadEliminationTest#testUnsafeWriteToBooleanArray()::: unsafe read elimination test test unsafe write to boolean array:::test
UnsafeVirtualizationTest#unsafeSnippet1(double)::: unsafe virtualization test unsafe snippet1:::a->new->A->UNSAFE->putDouble->return->UNSAFE->getInt->UNSAFE->getInt
UnsafeVirtualizationTest#unsafeSnippet2a(int)::: unsafe virtualization test unsafe snippet2a:::a->new->A->UNSAFE->putDouble->return->UNSAFE->getLong
UnsafeVirtualizationTest#unsafeSnippet2b(int)::: unsafe virtualization test unsafe snippet2b:::a->new->A->UNSAFE->putDouble->return->UNSAFE->getLong
UnsafeVirtualizationTest#unsafeSnippet3a(int)::: unsafe virtualization test unsafe snippet3a:::a->new->A->UNSAFE->putDouble->UNSAFE->putInt->return->UNSAFE->getLong
UnsafeVirtualizationTest#unsafeSnippet3b(int)::: unsafe virtualization test unsafe snippet3b:::a->new->A->UNSAFE->putDouble->UNSAFE->putInt->return->UNSAFE->getLong
UnsafeVirtualizationTest#unsafeSnippet4(double)::: unsafe virtualization test unsafe snippet4:::a->new->A->UNSAFE->putDouble->UNSAFE->putDouble->return->UNSAFE->getInt->UNSAFE->getInt
UnsafeVirtualizationTest#testUnsafePEA01()::: unsafe virtualization test test unsafe a01:::testPartialEscapeReadElimination->testPartialEscapeReadElimination
UnsafeVirtualizationTest#testUnsafePEA02()::: unsafe virtualization test test unsafe a02:::testPartialEscapeReadElimination->testPartialEscapeReadElimination->testPartialEscapeReadElimination->testPartialEscapeReadElimination
UnsafeVirtualizationTest#testUnsafePEA03()::: unsafe virtualization test test unsafe a03:::testPartialEscapeReadElimination->testPartialEscapeReadElimination->testPartialEscapeReadElimination->testPartialEscapeReadElimination
UnsafeVirtualizationTest#testUnsafePEA04()::: unsafe virtualization test test unsafe a04:::testPartialEscapeReadElimination->testPartialEscapeReadElimination
UnsafeVirtualizationTest#testPartialEscapeReadElimination(String, boolean, Object...)::: unsafe virtualization test test partial escape read elimination:::method->getResolvedJavaMethod->graph->parseEager->options->graph->getOptions->context->getDefaultHighTierContext->canonicalizer->new->CanonicalizerPhase->if->canonicalizer->apply->r->executeExpected->new->PartialEscapePhase->apply->try->code->getCode->result->code->executeVarargs->new->Result->assertEquals->catch->e->toString->assertFalse->finally
UnsignedLongTest#testEquals()::: unsigned long test test equals:::fortyTwo->new->UnsignedLong->Assert->fortyTwo->equals->assertTrue->Assert->fortyTwo->equals->assertFalse->longFortyTwo->new->UnsignedLong->Assert->longFortyTwo->equals->assertTrue->Assert->longFortyTwo->equals->assertFalse->longUnsigned->new->UnsignedLong->Assert->longUnsigned->equals->assertTrue->Assert->longUnsigned->equals->assertFalse
UnsignedLongTest#testIsLessThan()::: unsigned long test test is less than:::fortyTwo->new->UnsignedLong->Assert->fortyTwo->isLessThan->assertTrue->Assert->fortyTwo->isLessThan->assertFalse->Assert->fortyTwo->isLessThan->assertFalse->Assert->fortyTwo->isLessThan->assertTrue->longUnsigned->new->UnsignedLong->Assert->longUnsigned->isLessThan->assertTrue->Assert->longUnsigned->isLessThan->assertFalse->Assert->longUnsigned->isLessThan->assertFalse->Assert->longUnsigned->isLessThan->assertFalse
UnsignedLongTest#testIsLessOrEqualTo()::: unsigned long test test is less or equal to:::fortyTwo->new->UnsignedLong->Assert->fortyTwo->isLessOrEqualTo->assertTrue->Assert->fortyTwo->isLessOrEqualTo->assertTrue->Assert->fortyTwo->isLessOrEqualTo->assertFalse->Assert->fortyTwo->isLessOrEqualTo->assertTrue->longUnsigned->new->UnsignedLong->Assert->longUnsigned->isLessOrEqualTo->assertTrue->Assert->longUnsigned->isLessOrEqualTo->assertFalse->Assert->longUnsigned->isLessOrEqualTo->assertFalse->Assert->longUnsigned->isLessOrEqualTo->assertTrue
UnsignedLongTest#testTimes()::: unsigned long test test times:::fortyTwo->new->UnsignedLong->Assert->fortyTwo->times->asLong->assertEquals->Assert->fortyTwo->times->asLong->assertEquals
UnsignedLongTest#testTimesException()::: unsigned long test test times exception:::fortyTwo->new->UnsignedLong->fortyTwo->times
UnsignedLongTest#testMinus()::: unsigned long test test minus:::fortyTwo->new->UnsignedLong->Assert->fortyTwo->minus->asLong->assertEquals->Assert->fortyTwo->minus->asLong->assertEquals->longUnsigned->new->UnsignedLong->Assert->longUnsigned->minus->asLong->assertEquals
UnsignedLongTest#testMinusException()::: unsigned long test test minus exception:::fortyTwo->new->UnsignedLong->fortyTwo->minus
UnsignedLongTest#testMinusException2()::: unsigned long test test minus exception2:::longUnsigned->new->UnsignedLong->longUnsigned->minus
UnsignedLongTest#testPlus()::: unsigned long test test plus:::fortyTwo->new->UnsignedLong->Assert->fortyTwo->plus->asLong->assertEquals->Assert->fortyTwo->plus->asLong->assertEquals->longUnsigned->new->UnsignedLong->Assert->longUnsigned->plus->asLong->assertEquals
UnsignedLongTest#testPlusException()::: unsigned long test test plus exception:::fortyTwo->new->UnsignedLong->fortyTwo->plus
UnsignedLongTest#testPlusException2()::: unsigned long test test plus exception2:::longUnsigned->new->UnsignedLong->longUnsigned->plus
UnsignedLongTest#testWrappingTimes()::: unsigned long test test wrapping times:::fortyTwo->new->UnsignedLong->Assert->fortyTwo->wrappingTimes->asLong->assertEquals
UnsignedLongTest#testWrappingPlus()::: unsigned long test test wrapping plus:::fortyTwo->new->UnsignedLong->Assert->fortyTwo->wrappingPlus->asLong->assertEquals->longUnsigned->new->UnsignedLong->Assert->longUnsigned->wrappingPlus->asLong->assertEquals
UnusedArray#smallArray()::: unused array small array:::array->new->byteArr
UnusedArray#largeArray()::: unused array large array:::array->new->byteArr
UnusedArray#unknownArray(int)::: unused array unknown array:::array->new->byteArr
UnusedArray#testSmall()::: unused array test small:::test
UnusedArray#testLarge()::: unused array test large:::test
UnusedArray#testUnknown()::: unused array test unknown:::test
UnusedArray#test(String)::: unused array test:::graph->parseEager->new->CanonicalizerPhase->getProviders->apply->newArrayNodes->graph->getNodes->filter->isEmpty->assertThat
VerifyBailoutUsage#getPackageName(Class)::: verify bailout usage get package name:::classNameWithPackage->c->getName->simpleName->c->getSimpleName->return->classNameWithPackage->classNameWithPackage->length->simpleName->length->substring
VerifyBailoutUsage#matchesPrefix(String)::: verify bailout usage matches prefix:::foreach->if->packageName->startsWith->return->return
VerifyBailoutUsage#verify(StructuredGraph, CoreProviders)::: verify bailout usage verify:::bailoutType->context->getMetaAccess->lookupJavaType->caller->graph->method->holderQualified->caller->format->holderUnqualified->caller->format->packageName->holderQualified->holderQualified->length->holderUnqualified->length->substring->if->matchesPrefix->foreach->graph->getNodes->callee->t->targetMethod->if->callee->getDeclaringClass->equals->if->callee->getName->equals->throw->callee->format->caller->format->getName->getName->new->VerificationError
VerifyBailoutUsageTest.InvalidBailoutUsagePhase1#run(StructuredGraph)::: invalid bailout usage phase1 run:::throw->new->BailoutException
VerifyBailoutUsageTest.InvalidBailoutUsagePhase2#run(StructuredGraph)::: invalid bailout usage phase2 run:::throw->new->GraalError->new->BailoutException
VerifyBailoutUsageTest.InvalidBailoutUsagePhase3#run(StructuredGraph)::: invalid bailout usage phase3 run:::throw->new->BailoutException
VerifyBailoutUsageTest.ValidPermanentBailoutUsage#run(StructuredGraph)::: valid permanent bailout usage run:::throw->new->PermanentBailoutException
VerifyBailoutUsageTest.ValidRetryableBailoutUsage#run(StructuredGraph)::: valid retryable bailout usage run:::throw->new->RetryableBailoutException
VerifyBailoutUsageTest#testInvalidBailout01()::: verify bailout usage test test invalid bailout01:::testBailoutUsage
VerifyBailoutUsageTest#testInvalidBailout02()::: verify bailout usage test test invalid bailout02:::testBailoutUsage
VerifyBailoutUsageTest#testInvalidBailout03()::: verify bailout usage test test invalid bailout03:::testBailoutUsage
VerifyBailoutUsageTest#testValidPermanentBailout()::: verify bailout usage test test valid permanent bailout:::testBailoutUsage
VerifyBailoutUsageTest#testValidRetryableBailout()::: verify bailout usage test test valid retryable bailout:::testBailoutUsage
VerifyBailoutUsageTest#testBailoutUsage(Class)::: verify bailout usage test test bailout usage:::rt->Graal->getRequiredCapability->providers->rt->getHostBackend->getProviders->metaAccess->providers->getMetaAccess->graphBuilderSuite->new->PhaseSuite<>->plugins->new->InvocationPlugins->new->Plugins->config->GraphBuilderConfiguration->getDefault->withEagerResolving->withUnresolvedIsError->graphBuilderSuite->new->GraphBuilderPhase->appendPhase->context->new->HighTierContext->options->getInitialOptions->debug->DebugContext->create->foreach->c->getDeclaredMethods->if->Modifier->m->getModifiers->isNative->Modifier->m->getModifiers->isAbstract->method->metaAccess->lookupJavaMethod->graph->new->StructuredGraph.Builder->method->build->graphBuilderSuite->apply->try->s->debug->disableIntercept->new->VerifyBailoutUsage->apply->catch->finally
VerifyBufferUsage#verify(StructuredGraph, CoreProviders)::: verify buffer usage verify:::caller->graph->method->foreach->graph->getNodes->callee->t->targetMethod->calleeClassName->callee->getDeclaringClass->getName->calleeName->callee->getName->if->bufferTypes->contains->bufferMethods->contains->callee->getSignature->getReturnKind->isPrimitive->e->caller->t->invoke->bci->asStackTraceElement->receiverType->t->arguments->get->stamp->type->if->receiverType->getName->equals->throw->receiverType->toJavaName->callee->format->new->VerificationError
VerifyCallerSensitiveMethods#checkContract()::: verify caller sensitive methods check contract:::return
VerifyCallerSensitiveMethods#verify(StructuredGraph, CoreProviders)::: verify caller sensitive methods verify:::invoke->callsReflectionGetCallerClass->annotation->graph->method->getAnnotation->if->if->e->graph->method->invoke->bci->asStackTraceElement->throw->String->format->new->VerificationError->else->if->throw->String->graph->method->format->format->new->VerificationError
VerifyCallerSensitiveMethods#callsReflectionGetCallerClass(StructuredGraph, CoreProviders)::: verify caller sensitive methods calls reflection get caller class:::reflectionType->context->getMetaAccess->lookupJavaType->foreach->graph->getNodes->callee->t->targetMethod->if->callee->getDeclaringClass->equals->if->callee->getName->equals->return->t->invoke->return
VerifyDebugUsage#checkContract()::: verify debug usage check contract:::return
VerifyDebugUsage#verify(StructuredGraph, CoreProviders)::: verify debug usage verify:::context->getMetaAccess->debugType->metaAccess->lookupJavaType->nodeType->metaAccess->lookupJavaType->stringType->metaAccess->lookupJavaType->graalErrorType->metaAccess->lookupJavaType->foreach->graph->getNodes->callee->t->targetMethod->calleeName->callee->getName->if->callee->getDeclaringClass->equals->isDump->calleeName->equals->if->calleeName->equals->calleeName->equals->calleeName->equals->t->arguments->verifyParameters->if->callee->getDeclaringClass->isAssignableFrom->if->calleeName->equals->calleeName->equals->t->arguments->verifyParameters->if->callee->getDeclaringClass->isAssignableFrom->graph->method->getDeclaringClass->isAssignableFrom->if->calleeName->equals->t->arguments->verifyParameters->if->calleeName->equals->callee->getSignature->getParameterCount->t->arguments->verifyParameters
VerifyDebugUsage#verifyParameters(MethodCallTargetNode, StructuredGraph, NodeInputList, ResolvedJavaType, int)::: verify debug usage verify parameters:::if->callTarget->targetMethod->isVarArgs->args->args->count->get->unpacked->args->snapshot->new->ArrayList<>->varArgParameter->unpacked->unpacked->size->remove->firstVarArg->unpacked->size->foreach->varArgParameter->usages->if->si->unpacked->si->value->add->verifyParameters->else->verifyParameters
VerifyDebugUsage#verifyParameters(StructuredGraph, MethodCallTargetNode, List, ResolvedJavaType, int, int)::: verify debug usage verify parameters:::verifiedCallee->debugCallTarget->targetMethod->dumpLevel->argIdx->varArgsElementIndex->reportVarArgs->for->i->args->size
VerifyDebugUsage#verifyDumpLevelParameter(StructuredGraph, MethodCallTargetNode, ResolvedJavaMethod, ValueNode):::The level arg for the Debug.dump(...) methods must be a reference to one of the Debug.*_LEVEL constants.:::c->arg->asConstant->if->dumpLevel->asInt->if->DebugLevels->contains->e->callerGraph->method->debugCallTarget->invoke->bci->asStackTraceElement->throw->verifiedCallee->format->new->VerificationError->return->e->callerGraph->method->debugCallTarget->invoke->bci->asStackTraceElement->throw->verifiedCallee->format->new->VerificationError
VerifyDebugUsage#verifyDumpObjectParameter(StructuredGraph, MethodCallTargetNode, ValueNode, ResolvedJavaMethod, Integer)::: verify debug usage verify dump object parameter:::argType->arg->stamp->type->if->metaAccess->lookupJavaType->isAssignableFrom->verifyStructuredGraphDumping
VerifyDebugUsage#verifyStructuredGraphDumping(StructuredGraph, MethodCallTargetNode, ResolvedJavaMethod, Integer):::Verifies that dumping a StructuredGraph at level DebugContext#BASIC_LEVEL or DebugContext#INFO_LEVEL only occurs in white-listed methods.:::if->e->callerGraph->method->debugCallTarget->invoke->bci->asStackTraceElement->qualifiedMethod->e->getClassName->e->getMethodName->if->BasicLevelStructuredGraphDumpWhitelist->contains->throw->verifiedCallee->format->getClass->getName->new->VerificationError->else->if->e->callerGraph->method->debugCallTarget->invoke->bci->asStackTraceElement->qualifiedMethod->e->getClassName->e->getMethodName->if->InfoLevelStructuredGraphDumpWhitelist->contains->throw->verifiedCallee->format->getClass->getName->new->VerificationError
VerifyDebugUsage#verifyStringConcat(StructuredGraph, ResolvedJavaMethod, int, int, int, ResolvedJavaMethod):::Checks that a given call is not to StringBuffer#toString() or StringBuilder#toString().:::if->callee->getDeclaringClass->getName->equals->callee->getDeclaringClass->getName->equals->e->callerGraph->method->asStackTraceElement->if->throw->verifiedCallee->format->new->VerificationError->else->throw->verifiedCallee->format->new->VerificationError
VerifyDebugUsage#verifyToStringCall(StructuredGraph, ResolvedJavaMethod, ResolvedJavaType, ResolvedJavaMethod, int, int, int):::Checks that a given call is not to Object#toString().:::if->callee->getSignature->getParameterCount->callee->getSignature->callee->getDeclaringClass->getReturnType->equals->e->callerGraph->method->asStackTraceElement->if->throw->verifiedCallee->format->new->VerificationError->else->throw->verifiedCallee->format->new->VerificationError
VerifyDebugUsage#verifyFormatCall(StructuredGraph, ResolvedJavaMethod, ResolvedJavaType, ResolvedJavaMethod, int, int, int):::Checks that a given call is not to String#format(String, Object...) or String#format(java.util.Locale, String, Object...).:::if->callee->getDeclaringClass->equals->callee->getSignature->callee->getDeclaringClass->getReturnType->equals->e->callerGraph->method->asStackTraceElement->if->throw->verifiedCallee->format->verifiedCallee->format->new->VerificationError->else->throw->verifiedCallee->format->verifiedCallee->format->new->VerificationError
VerifyDebugUsageTest.InvalidLogUsagePhase#run(StructuredGraph)::: invalid log usage phase run:::debug->graph->getDebug->foreach->graph->getNodes->debug->n->toString->log
VerifyDebugUsageTest.InvalidLogAndIndentUsagePhase#run(StructuredGraph)::: invalid log and indent usage phase run:::debug->graph->getDebug->try->i->debug->graph->toString->logAndIndent->foreach->graph->getNodes->debug->log->catch->finally
VerifyDebugUsageTest.InvalidDumpUsagePhase#run(StructuredGraph)::: invalid dump usage phase run:::debug->graph->getDebug->debug->graph->toString->dump
VerifyDebugUsageTest.InvalidDumpLevelPhase#run(StructuredGraph)::: invalid dump level phase run:::debug->graph->getDebug->debug->dump
VerifyDebugUsageTest.NonConstantDumpLevelPhase#run(StructuredGraph)::: non constant dump level phase run:::debug->graph->getDebug->debug->getLevel->dump
VerifyDebugUsageTest.NonConstantDumpLevelPhase#getLevel()::: non constant dump level phase get level:::return
VerifyDebugUsageTest.InvalidVerifyUsagePhase#run(StructuredGraph)::: invalid verify usage phase run:::debug->graph->getDebug->debug->graph->toString->verify
VerifyDebugUsageTest.InvalidConcatLogUsagePhase#run(StructuredGraph)::: invalid concat log usage phase run:::debug->graph->getDebug->foreach->graph->getNodes->debug->log
VerifyDebugUsageTest.InvalidConcatLogAndIndentUsagePhase#run(StructuredGraph)::: invalid concat log and indent usage phase run:::debug->graph->getDebug->try->i->debug->logAndIndent->foreach->graph->getNodes->debug->log->catch->finally
VerifyDebugUsageTest.InvalidConcatDumpUsagePhase#run(StructuredGraph)::: invalid concat dump usage phase run:::debug->graph->getDebug->debug->dump
VerifyDebugUsageTest.InvalidConcatVerifyUsagePhase#run(StructuredGraph)::: invalid concat verify usage phase run:::debug->graph->getDebug->debug->verify
VerifyDebugUsageTest.ValidLogUsagePhase#run(StructuredGraph)::: valid log usage phase run:::debug->graph->getDebug->foreach->graph->getNodes->debug->log
VerifyDebugUsageTest.ValidLogAndIndentUsagePhase#run(StructuredGraph)::: valid log and indent usage phase run:::debug->graph->getDebug->try->i->debug->logAndIndent->foreach->graph->getNodes->debug->log->catch->finally
VerifyDebugUsageTest.ValidDumpUsagePhase#run(StructuredGraph)::: valid dump usage phase run:::debug->graph->getDebug->debug->dump
VerifyDebugUsageTest.ValidVerifyUsagePhase#run(StructuredGraph)::: valid verify usage phase run:::debug->graph->getDebug->debug->verify
VerifyDebugUsageTest.InvalidGraalErrorGuaranteePhase#run(StructuredGraph)::: invalid graal error guarantee phase run:::GraalError->graph->getNodes->count->graph->toString->guarantee
VerifyDebugUsageTest.ValidGraalErrorGuaranteePhase#run(StructuredGraph)::: valid graal error guarantee phase run:::GraalError->graph->getNodes->count->guarantee
VerifyDebugUsageTest.InvalidGraalErrorCtorPhase#run(StructuredGraph)::: invalid graal error ctor phase run:::graph->toString->new->GraalError
VerifyDebugUsageTest.ValidGraalErrorCtorPhase#run(StructuredGraph)::: valid graal error ctor phase run:::new->GraalError
VerifyDebugUsageTest#testLogInvalid()::: verify debug usage test test log invalid:::testDebugUsageClass
VerifyDebugUsageTest#testLogAndIndentInvalid()::: verify debug usage test test log and indent invalid:::testDebugUsageClass
VerifyDebugUsageTest#testVerifyInvalid()::: verify debug usage test test verify invalid:::testDebugUsageClass
VerifyDebugUsageTest#testDumpInvalid()::: verify debug usage test test dump invalid:::testDebugUsageClass
VerifyDebugUsageTest#testDumpLevelInvalid()::: verify debug usage test test dump level invalid:::testDebugUsageClass
VerifyDebugUsageTest#testDumpNonConstantLevelInvalid()::: verify debug usage test test dump non constant level invalid:::testDebugUsageClass
VerifyDebugUsageTest#testLogInvalidConcat()::: verify debug usage test test log invalid concat:::testDebugUsageClass
VerifyDebugUsageTest#testLogAndIndentInvalidConcat()::: verify debug usage test test log and indent invalid concat:::testDebugUsageClass
VerifyDebugUsageTest#testVerifyInvalidConcat()::: verify debug usage test test verify invalid concat:::testDebugUsageClass
VerifyDebugUsageTest#testDumpInvalidConcat()::: verify debug usage test test dump invalid concat:::testDebugUsageClass
VerifyDebugUsageTest#testLogValid()::: verify debug usage test test log valid:::testDebugUsageClass
VerifyDebugUsageTest#testLogAndIndentValid()::: verify debug usage test test log and indent valid:::testDebugUsageClass
VerifyDebugUsageTest#testVerifyValid()::: verify debug usage test test verify valid:::testDebugUsageClass
VerifyDebugUsageTest#testDumpValid()::: verify debug usage test test dump valid:::testDebugUsageClass
VerifyDebugUsageTest#testGraalGuaranteeInvalid()::: verify debug usage test test graal guarantee invalid:::testDebugUsageClass
VerifyDebugUsageTest#testGraalGuaranteeValid()::: verify debug usage test test graal guarantee valid:::testDebugUsageClass
VerifyDebugUsageTest#testGraalCtorInvalid()::: verify debug usage test test graal ctor invalid:::testDebugUsageClass
VerifyDebugUsageTest#testGraalCtorValid()::: verify debug usage test test graal ctor valid:::testDebugUsageClass
VerifyDebugUsageTest#testDebugUsageClass(Class)::: verify debug usage test test debug usage class:::rt->Graal->getRequiredCapability->providers->rt->getHostBackend->getProviders->metaAccess->providers->getMetaAccess->graphBuilderSuite->new->PhaseSuite<>->plugins->new->InvocationPlugins->new->Plugins->config->GraphBuilderConfiguration->getDefault->withEagerResolving->withUnresolvedIsError->graphBuilderSuite->new->GraphBuilderPhase->appendPhase->context->new->HighTierContext->options->getInitialOptions->debug->DebugContext->create->foreach->c->getDeclaredMethods->if->Modifier->m->getModifiers->isNative->Modifier->m->getModifiers->isAbstract->method->metaAccess->lookupJavaMethod->graph->new->StructuredGraph.Builder->method->build->graphBuilderSuite->apply->try->s->debug->disableIntercept->new->VerifyDebugUsage->apply->catch->finally
VerifyFoldableMethods#checkContract()::: verify foldable methods check contract:::return
VerifyFoldableMethods#verify(StructuredGraph, CoreProviders)::: verify foldable methods verify:::method->graph->method->if->method->getAnnotation->foldables->putIfAbsent->else->if->context->getMetaAccess->lookupJavaType->if->generatedInvocationPluginType->method->getDeclaringClass->isAssignableFrom->foreach->graph->getNodes->callee->t->targetMethod->if->callee->getAnnotation->foldables->put
VerifyFoldableMethods#finish()::: verify foldable methods finish:::uncalled->foldables->entrySet->stream->e->getValue->filter->e->getKey->format->map->Collectors->System->lineSeparator->joining->collect->if->uncalled->length->throw->String->getSimpleName->format->new->VerificationError
VerifyGetOptionsUsage#lookupMethod(Class, String)::: verify get options usage lookup method:::foreach->klass->getDeclaredMethods->if->m->getName->equals->return->throw->new->InternalError
VerifyGetOptionsUsage#verify(StructuredGraph, CoreProviders)::: verify get options usage verify:::metaAccess->context->getMetaAccess->canonicalizerToolClass->metaAccess->lookupJavaType->hasTool->method->graph->method->try->parameters->method->getParameters->if->foreach->if->parameter->getType->getName->canonicalizerToolClass->getName->equals->break->catch->finally->if->getOptionsMethod->metaAccess->lookupMethod->lookupJavaMethod->foreach->graph->getNodes->callee->t->targetMethod->if->callee->equals->if->throw->method->getName->method->getDeclaringClass->getName->new->VerificationError
VerifyGraphAddUsage#verify(StructuredGraph, CoreProviders)::: verify graph add usage verify:::allowed->foreach->declaringClass->graph->method->getDeclaringClass->if->context->getMetaAccess->lookupJavaType->isAssignableFrom->if->addOrUniqueMethod->context->getMetaAccess->lookupJavaMethod->foreach->graph->getNodes->callee->t->targetMethod->if->callee->equals->nodeArgument->t->arguments->get->seen->EconomicSet->create->checkNonFactory
VerifyGraphAddUsage#checkNonFactory(StructuredGraph, EconomicSet, CoreProviders, ValueNode)::: verify graph add usage check non factory:::if->seen->contains->return->seen->add->if->foreach->values->checkNonFactory->else->if->object->checkNonFactory->else->if->return->else->if->return->else->if->value->checkNonFactory->else->if->callTarget->targetMethod->context->getMetaAccess->lookupJavaMethod->equals->return->else->if->throw->graph->method->getName->graph->method->getDeclaringClass->getName->new->VerificationError
VerifyInstanceOfUsage#checkContract()::: verify instance of usage check contract:::return
VerifyInstanceOfUsage#verify(StructuredGraph, CoreProviders)::: verify instance of usage verify:::bailoutType->new->ResolvedJavaTypeArr->for->i->method->graph->method->declaringClass->method->getDeclaringClass->if->context->getMetaAccess->isTrustedInterface->foreach->graph->getNodes->filter->type->io->type->getType->foreach->if->forbiddenType->equals->name->forbiddenType->getUnqualifiedName->enclosingType->forbiddenType->getEnclosingType->if->name->enclosingType->getUnqualifiedName->length->length->substring->throw->method->format->new->VerificationError
VerifyInstanceOfUsage#isTrustedInterface(ResolvedJavaType, MetaAccessProvider)::: verify instance of usage is trusted interface:::foreach->trusted->metaAccess->lookupJavaType->if->trusted->equals->return->return
VerifySystemPropertyUsage#verify(StructuredGraph, CoreProviders)::: verify system property usage verify:::metaAccess->context->getMetaAccess->systemType->metaAccess->lookupJavaType->boxTypes->new->ResolvedJavaTypeArr->for->i->caller->graph->method->holderQualified->caller->format->holderUnqualified->caller->format->packageName->holderQualified->equals->holderQualified->holderQualified->length->holderUnqualified->length->substring->if->packageName->startsWith->if->else->return->else->if->holderQualified->equals->caller->getName->equals->return->else->if->packageName->startsWith->packageName->startsWith->return->else->if->packageName->startsWith->return->foreach->graph->getNodes->callee->t->targetMethod->if->callee->getDeclaringClass->equals->if->callee->getName->equals->callee->getName->equals->throw->callee->format->caller->format->new->VerificationError->else->for->i
VerifyUnsafeAccess#verify(StructuredGraph, CoreProviders)::: verify unsafe access verify:::metaAccess->context->getMetaAccess->unsafeType->metaAccess->lookupJavaType->caller->graph->method->holderQualified->caller->format->holderUnqualified->caller->format->packageName->holderQualified->equals->holderQualified->holderQualified->length->holderUnqualified->length->substring->if->holderQualified->getName->equals->holderQualified->equals->caller->getName->equals->return->else->if->packageName->startsWith->packageName->startsWith->return->if->caller->getSignature->caller->getDeclaringClass->getReturnType->equals->if->caller->isPublic->if->holderQualified->getName->equals->caller->getName->equals->else->throw->caller->format->new->VerificationError->foreach->graph->getNodes->filter->typeRef->node->type->if->if->unsafeType->typeRef->getType->isAssignableFrom->throw->unsafeType->toJavaName->caller->format->getName->new->VerificationError->foreach->graph->getNodes->callee->t->targetMethod->if->callee->getDeclaringClass->equals->if->callee->getName->equals->throw->callee->format->caller->format->getName->new->VerificationError
VerifyUnsafeAccess#verifyClass(Class, MetaAccessProvider)::: verify unsafe access verify class:::foreach->c->getDeclaredFields->modifiers->field->getModifiers->if->field->getType->isPublic->isProtected->throw->getName->new->VerificationError
VerifyUpdateUsages#checkContract()::: verify update usages check contract:::return
VerifyUpdateUsages#verify(StructuredGraph, CoreProviders)::: verify update usages verify:::if->graph->method->isConstructor->return->stores->graph->getNodes->filter->snapshot->declaringClass->graph->method->getDeclaringClass->nodeInputList->context->getMetaAccess->lookupJavaType->storeField1->storeField2->foreach->if->store->field->isNodeInput->if->else->if->else->throw->getSimpleName->getSimpleName->graph->method->format->new->VerificationError->if->return->if->nodeType->context->getMetaAccess->lookupJavaType->foreach->graph->getNodes->filter->callee->call->targetMethod->if->callee->getDeclaringClass->equals->callee->getName->equals->callee->getName->equals->return->throw->graph->method->format->storeField1->field->getName->getName->getName->new->VerificationError->else->if->storeField1->value->storeField2->value->load1->storeField1->value->load2->storeField2->value->if->load1->object->storeField1->object->load2->object->storeField2->object->storeField1->object->storeField2->object->load1->field->storeField2->field->equals->load2->field->storeField1->field->equals->return->throw->graph->method->format->storeField1->field->getName->storeField2->field->getName->getName->getName->new->VerificationError
VerifyUpdateUsages#isNodeInput(ResolvedJavaField, ResolvedJavaType, ResolvedJavaType)::: verify update usages is node input:::return->declaringClass->field->getDeclaringClass->isAssignableFrom->field->getAnnotation->field->getAnnotation->field->getType->equals
VerifyUsageWithEquals#checkContract()::: verify usage with equals check contract:::return
VerifyUsageWithEquals#isTrustedInterface(Class)::: verify usage with equals is trusted interface:::foreach->if->trusted->isAssignableFrom->return->return
VerifyUsageWithEquals#isAssignableToRestrictedType(ValueNode, MetaAccessProvider):::Determines whether the type of node is assignable to the #restrictedClass.:::if->node->stamp->restrictedType->metaAccess->lookupJavaType->nodeType->StampTool->typeOrNull->if->field->getType->if->target->callTarget->targetMethod->target->getSignature->target->getDeclaringClass->getReturnType->if->StampTool->uncheckedStamp->typeOrNull->if->restrictedType->isAssignableFrom->return->return
VerifyUsageWithEquals#isNullConstant(ValueNode)::: verify usage with equals is null constant:::return->node->isConstant->node->isNullConstant
VerifyUsageWithEquals#isEqualsMethod(ResolvedJavaMethod)::: verify usage with equals is equals method:::if->method->getName->equals->sig->method->getSignature->if->sig->getReturnKind->if->sig->getParameterCount->ptype->sig->method->getDeclaringClass->getParameterType->if->ptype->isJavaLangObject->return->return
VerifyUsageWithEquals#isThisParameter(ValueNode)::: verify usage with equals is this parameter:::return->index
VerifyUsageWithEquals#isIllegalUsage(ResolvedJavaMethod, ValueNode, ValueNode, MetaAccessProvider):::Checks whether the type of x is assignable to the restricted type and that y is not a null constant.:::if->isAssignableToRestrictedType->isNullConstant->if->isEqualsMethod->isThisParameter->isThisParameter->return->return->return
VerifyUsageWithEquals#verify(StructuredGraph, CoreProviders)::: verify usage with equals verify:::foreach->graph->getNodes->filter->method->graph->method->restrictedType->context->getMetaAccess->lookupJavaType->if->method->getDeclaringClass->equals->else->if->cn->getX->cn->getY->context->getMetaAccess->isIllegalUsage->cn->getY->cn->getX->context->getMetaAccess->isIllegalUsage->throw->restrictedClass->getName->cn->getX->cn->getY->new->VerificationError
VerifyVirtualizableTest.InvalidEffectNodeAdd#virtualize(VirtualizerTool)::: invalid effect node add virtualize:::graph->new->ArrayLengthNode->add
VerifyVirtualizableTest.InvalidEffectNodeAddWithoutUnique#virtualize(VirtualizerTool)::: invalid effect node add without unique virtualize:::graph->new->ArrayLengthNode->addWithoutUnique
VerifyVirtualizableTest.InvalidEffectNodeAddOrUnique#virtualize(VirtualizerTool)::: invalid effect node add or unique virtualize:::graph->new->ArrayLengthNode->addOrUnique
VerifyVirtualizableTest.InvalidEffectNodeAddWithoutUniqueWithInputs#virtualize(VirtualizerTool)::: invalid effect node add without unique with inputs virtualize:::graph->new->ArrayLengthNode->addOrUnique
VerifyVirtualizableTest.InvalidEffectNodeAddOrUniqueWithInputs#virtualize(VirtualizerTool)::: invalid effect node add or unique with inputs virtualize:::graph->new->ArrayLengthNode->addOrUnique
VerifyVirtualizableTest.ValidEffectNodeAdd#virtualize(VirtualizerTool)::: valid effect node add virtualize:::graph->ConstantNode->forBoolean->add
VerifyVirtualizableTest.ValidEffectNodeAddWithoutUnique#virtualize(VirtualizerTool)::: valid effect node add without unique virtualize:::graph->ConstantNode->forBoolean->addWithoutUnique
VerifyVirtualizableTest.ValidEffectNodeAddOrUnique#virtualize(VirtualizerTool)::: valid effect node add or unique virtualize:::graph->ConstantNode->forBoolean->addOrUnique
VerifyVirtualizableTest.ValidEffectNodeAddWithoutUniqueWithInputs#virtualize(VirtualizerTool)::: valid effect node add without unique with inputs virtualize:::graph->ConstantNode->forBoolean->addOrUnique
VerifyVirtualizableTest.ValidEffectNodeAddOrUniqueWithInputs#virtualize(VirtualizerTool)::: valid effect node add or unique with inputs virtualize:::graph->ConstantNode->forBoolean->addOrUnique
VerifyVirtualizableTest#testInvalidAdd()::: verify virtualizable test test invalid add:::testVirtualizableEffects
VerifyVirtualizableTest#testInvalidAddWithoutUnique()::: verify virtualizable test test invalid add without unique:::testVirtualizableEffects
VerifyVirtualizableTest#testInvalidAddOrUnique()::: verify virtualizable test test invalid add or unique:::testVirtualizableEffects
VerifyVirtualizableTest#testInvalidAddWithoutUniqueWithInputs()::: verify virtualizable test test invalid add without unique with inputs:::testVirtualizableEffects
VerifyVirtualizableTest#testInvalidAddOrUniqueWithInputs()::: verify virtualizable test test invalid add or unique with inputs:::testVirtualizableEffects
VerifyVirtualizableTest#testValidAdd()::: verify virtualizable test test valid add:::testVirtualizableEffects
VerifyVirtualizableTest#testValidAddWithoutUnique()::: verify virtualizable test test valid add without unique:::testVirtualizableEffects
VerifyVirtualizableTest#testValidAddOrUnique()::: verify virtualizable test test valid add or unique:::testVirtualizableEffects
VerifyVirtualizableTest#testValidAddWithoutUniqueWithInputs()::: verify virtualizable test test valid add without unique with inputs:::testVirtualizableEffects
VerifyVirtualizableTest#testValidAddOrUniqueWithInputs()::: verify virtualizable test test valid add or unique with inputs:::testVirtualizableEffects
VerifyVirtualizableTest#testVirtualizableEffects(Class)::: verify virtualizable test test virtualizable effects:::rt->Graal->getRequiredCapability->providers->rt->getHostBackend->getProviders->metaAccess->providers->getMetaAccess->graphBuilderSuite->new->PhaseSuite<>->plugins->new->InvocationPlugins->new->Plugins->config->GraphBuilderConfiguration->getDefault->withEagerResolving->withUnresolvedIsError->graphBuilderSuite->new->GraphBuilderPhase->appendPhase->context->new->HighTierContext->options->getInitialOptions->debug->DebugContext->create->foreach->c->getDeclaredMethods->if->Modifier->m->getModifiers->isNative->Modifier->m->getModifiers->isAbstract->method->metaAccess->lookupJavaMethod->graph->new->StructuredGraph.Builder->method->build->graphBuilderSuite->apply->try->s->debug->disableIntercept->new->VerifyVirtualizableUsage->apply->catch->finally
VerifyVirtualizableUsage#checkContract()::: verify virtualizable usage check contract:::return
VerifyVirtualizableUsage#verify(StructuredGraph, CoreProviders)::: verify virtualizable usage verify:::graphType->context->getMetaAccess->lookupJavaType->virtualizableType->context->getMetaAccess->lookupJavaType->constantNodeType->context->getMetaAccess->lookupJavaType->if->virtualizableType->graph->method->getDeclaringClass->isAssignableFrom->graph->method->getName->equals->foreach->graph->getNodes->bci->t->invoke->bci->callee->t->targetMethod->calleeName->callee->getName->if->callee->getDeclaringClass->equals->if->calleeName->equals->calleeName->equals->calleeName->equals->calleeName->equals->calleeName->equals->graph->method->t->arguments->verifyVirtualizableEffectArguments
VerifyVirtualizableUsage#verifyVirtualizableEffectArguments(ResolvedJavaType, ResolvedJavaMethod, ResolvedJavaMethod, int, NodeInputList, int)::: verify virtualizable usage verify virtualizable effect arguments:::i->foreach->if->argStamp->stamp->if->objectStamp->argStampType->objectStamp->type->if->argStampType->equals->e->caller->asStackTraceElement->throw->callee->format->new->VerificationError
ZeroSignExtendTest#testSnippet1(char[])::: zero sign extend test test snippet1:::x->return
ZeroSignExtendTest#testSnippet2(char[])::: zero sign extend test test snippet2:::y->return
ZeroSignExtendTest#testSnippet3(short[])::: zero sign extend test test snippet3:::x->return
ZeroSignExtendTest#testSnippet4(short[])::: zero sign extend test test snippet4:::y->return
ZeroSignExtendTest#testSnippet5(byte[])::: zero sign extend test test snippet5:::x->return
ZeroSignExtendTest#testSnippet6(byte[])::: zero sign extend test test snippet6:::y->return
ZeroSignExtendTest#test()::: zero sign extend test test:::input1->new->charArr->input2->new->charArr->input3->new->shortArr->input4->new->shortArr->input5->new->byteArr->input6->new->byteArr->test->test->test->test->test->test

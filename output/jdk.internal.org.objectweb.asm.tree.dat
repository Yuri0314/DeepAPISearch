AbstractInsnNode#getOpcode():::Returns the opcode of this instruction.:::return
AbstractInsnNode#getType():::Returns the type of this instruction.:::
AbstractInsnNode#getPrevious():::Returns the previous instruction in the list to which this instruction belongs, if any.:::return
AbstractInsnNode#getNext():::Returns the next instruction in the list to which this instruction belongs, if any.:::return
AbstractInsnNode#accept(MethodVisitor):::Makes the given code visitor visit this instruction.:::
AbstractInsnNode#acceptAnnotations(MethodVisitor):::Makes the given visitor visit the annotations of this instruction.:::n->visibleTypeAnnotations->size->for->i->invisibleTypeAnnotations->size->for->i
AbstractInsnNode#clone(Map):::Returns a copy of this instruction.:::
AbstractInsnNode#clone(LabelNode, Map):::Returns the clone of the given label.:::return->map->get
AbstractInsnNode#clone(List, Map):::Returns the clones of the given labels.:::clones->labels->size->new->LabelNodeArr->for->i->return
AbstractInsnNode#cloneAnnotations(AbstractInsnNode):::Clones the annotations of the given instruction into this instruction.:::if->new->ArrayList<TypeAnnotationNode>->for->i->size->if->new->ArrayList<TypeAnnotationNode>->for->i->size->return
AnnotationNode#visit(String, Object)::: annotation node visit:::if->new->ArrayList<Object>->if->values->add->if->v->l->new->ArrayList<Byte>->foreach->l->add->values->add->else->if->v->l->new->ArrayList<Boolean>->foreach->l->add->values->add->else->if->v->l->new->ArrayList<Short>->foreach->l->add->values->add->else->if->v->l->new->ArrayList<Character>->foreach->l->add->values->add->else->if->v->l->new->ArrayList<Integer>->foreach->l->add->values->add->else->if->v->l->new->ArrayList<Long>->foreach->l->add->values->add->else->if->v->l->new->ArrayList<Float>->foreach->l->add->values->add->else->if->v->l->new->ArrayList<Double>->foreach->l->add->values->add->else->values->add
AnnotationNode#visitEnum(String, String, String)::: annotation node visit enum:::if->new->ArrayList<Object>->if->values->add->values->new->StringArr->add
AnnotationNode#visitAnnotation(String, String)::: annotation node visit annotation:::if->new->ArrayList<Object>->if->values->add->annotation->new->AnnotationNode->values->add->return
AnnotationNode#visitArray(String)::: annotation node visit array:::if->new->ArrayList<Object>->if->values->add->array->new->ArrayList<Object>->values->add->return->new->AnnotationNode
AnnotationNode#visitEnd()::: annotation node visit end:::
AnnotationNode#check(int):::Checks that this annotation node is compatible with the given ASM API version:::
AnnotationNode#accept(AnnotationVisitor):::Makes the given visitor visit this annotation.:::if->if->for->i->values->size->av->visitEnd
AnnotationNode#accept(AnnotationVisitor, String, Object):::Makes the given visitor visit a given annotation value.:::if->if->typeconst->av->visitEnum->else->if->an->an->av->visitAnnotation->accept->else->if->v->av->visitArray->if->array->for->j->array->size->v->visitEnd->else->av->visit
ClassNode#visit(int, int, String, String, String, String[])::: class node visit:::if->Arrays->asList->addAll
ClassNode#visitSource(String, String)::: class node visit source:::
ClassNode#visitModule(String, int, String)::: class node visit module:::return->new->ModuleNode
ClassNode#visitOuterClass(String, String, String)::: class node visit outer class:::
ClassNode#visitAnnotation(String, boolean)::: class node visit annotation:::an->new->AnnotationNode->if->if->new->ArrayList<AnnotationNode>->visibleAnnotations->add->else->if->new->ArrayList<AnnotationNode>->invisibleAnnotations->add->return
ClassNode#visitTypeAnnotation(int, TypePath, String, boolean)::: class node visit type annotation:::an->new->TypeAnnotationNode->if->if->new->ArrayList<TypeAnnotationNode>->visibleTypeAnnotations->add->else->if->new->ArrayList<TypeAnnotationNode>->invisibleTypeAnnotations->add->return
ClassNode#visitAttribute(Attribute)::: class node visit attribute:::if->new->ArrayList<Attribute>->attrs->add
ClassNode#visitInnerClass(String, String, String, int)::: class node visit inner class:::icn->new->InnerClassNode->innerClasses->add
ClassNode#visitField(int, String, String, String, Object)::: class node visit field:::fn->new->FieldNode->fields->add->return
ClassNode#visitMethod(int, String, String, String, String[])::: class node visit method:::mn->new->MethodNode->methods->add->return
ClassNode#visitEnd()::: class node visit end:::
ClassNode#check(int):::Checks that this class node is compatible with the given ASM API version:::if->if->throw->new->RuntimeException->if->if->visibleTypeAnnotations->size->throw->new->RuntimeException->if->invisibleTypeAnnotations->size->throw->new->RuntimeException->i->n->visibleAnnotations->size->for->invisibleAnnotations->size->for->visibleTypeAnnotations->size->for->invisibleTypeAnnotations->size->for->foreach->f->check->foreach->m->check
ClassNode#accept(ClassVisitor):::Makes the given class visitor visit this class.:::interfaces->size->new->StringArr->toArray->cv->visit->if->cv->visitSource->if->module->accept->if->cv->visitOuterClass->i->n->visibleAnnotations->size->for->invisibleAnnotations->size->for->visibleTypeAnnotations->size->for->invisibleTypeAnnotations->size->for->attrs->size->for->for->innerClasses->size->for->fields->size->for->methods->size->cv->visitEnd
FieldInsnNode#setOpcode(int):::Sets the opcode of this instruction.:::
FieldInsnNode#getType()::: field insn node get type:::return
FieldInsnNode#accept(MethodVisitor)::: field insn node accept:::mv->visitFieldInsn->acceptAnnotations
FieldInsnNode#clone(Map)::: field insn node clone:::return->new->FieldInsnNode->cloneAnnotations
FieldNode#visitAnnotation(String, boolean)::: field node visit annotation:::an->new->AnnotationNode->if->if->new->ArrayList<AnnotationNode>->visibleAnnotations->add->else->if->new->ArrayList<AnnotationNode>->invisibleAnnotations->add->return
FieldNode#visitTypeAnnotation(int, TypePath, String, boolean)::: field node visit type annotation:::an->new->TypeAnnotationNode->if->if->new->ArrayList<TypeAnnotationNode>->visibleTypeAnnotations->add->else->if->new->ArrayList<TypeAnnotationNode>->invisibleTypeAnnotations->add->return
FieldNode#visitAttribute(Attribute)::: field node visit attribute:::if->new->ArrayList<Attribute>->attrs->add
FieldNode#visitEnd()::: field node visit end:::
FieldNode#check(int):::Checks that this field node is compatible with the given ASM API version:::if->if->visibleTypeAnnotations->size->throw->new->RuntimeException->if->invisibleTypeAnnotations->size->throw->new->RuntimeException
FieldNode#accept(ClassVisitor):::Makes the given class visitor visit this field.:::fv->cv->visitField->if->return->i->n->visibleAnnotations->size->for->invisibleAnnotations->size->for->visibleTypeAnnotations->size->for->invisibleTypeAnnotations->size->for->attrs->size->for->fv->visitEnd
FrameNode#getType()::: frame node get type:::return
FrameNode#accept(MethodVisitor):::Makes the given visitor visit this stack map frame.:::switch->mv->local->size->asArray->stack->size->asArray->visitFrame->break->mv->local->size->asArray->visitFrame->break->mv->local->size->visitFrame->break->mv->visitFrame->break->mv->asArray->visitFrame->break
FrameNode#clone(Map)::: frame node clone:::clone->new->FrameNode->if->new->ArrayList<Object>->for->i->local->size->if->new->ArrayList<Object>->for->i->stack->size->return
FrameNode#asList(int, Object[])::: frame node as list:::return->Arrays->asList->subList
FrameNode#asArray(List)::: frame node as array:::objs->l->size->new->ObjectArr->for->i->return
IincInsnNode#getType()::: iinc insn node get type:::return
IincInsnNode#accept(MethodVisitor)::: iinc insn node accept:::mv->visitIincInsn->acceptAnnotations
IincInsnNode#clone(Map)::: iinc insn node clone:::return->new->IincInsnNode->cloneAnnotations
InnerClassNode#accept(ClassVisitor):::Makes the given class visitor visit this inner class.:::cv->visitInnerClass
InsnList#size():::Returns the number of instructions in this list.:::return
InsnList#getFirst():::Returns the first instruction in this list.:::return
InsnList#getLast():::Returns the last instruction in this list.:::return
InsnList#get(int):::Returns the instruction whose index is given:::if->throw->new->IndexOutOfBoundsException->if->toArray->return
InsnList#contains(AbstractInsnNode):::Returns <tt>true</tt> if the given instruction belongs to this list:::i->while->return
InsnList#indexOf(AbstractInsnNode):::Returns the index of the given instruction in this list:::if->toArray->return
InsnList#accept(MethodVisitor):::Makes the given visitor visit all of the instructions in this list.:::insn->while->insn->accept
InsnList#iterator():::Returns an iterator over the instructions in this list.:::return->iterator
InsnList#iterator(int):::Returns an iterator over the instructions in this list.:::return->new->InsnListIterator
InsnList#toArray():::Returns an array containing all of the instructions in this list.:::i->elem->insns->new->AbstractInsnNodeArr->while->return
InsnList#set(AbstractInsnNode, AbstractInsnNode):::Replaces an instruction of this list with another instruction.:::next->if->else->prev->if->else->if->index->else
InsnList#add(AbstractInsnNode):::Adds the given instruction to the end of this list.:::if->else
InsnList#add(InsnList):::Adds the given instructions to the end of this list.:::if->return->if->else->elem->insns->removeAll
InsnList#insert(AbstractInsnNode):::Inserts the given instruction at the begining of this list.:::if->else
InsnList#insert(InsnList):::Inserts the given instructions at the begining of this list.:::if->return->if->else->elem->insns->removeAll
InsnList#insert(AbstractInsnNode, AbstractInsnNode):::Inserts the given instruction after the specified instruction.:::next->if->else
InsnList#insert(AbstractInsnNode, InsnList):::Inserts the given instructions after the specified instruction.:::if->return->ifirst->ilast->next->if->else->insns->removeAll
InsnList#insertBefore(AbstractInsnNode, AbstractInsnNode):::Inserts the given instruction before the specified instruction.:::prev->if->else
InsnList#insertBefore(AbstractInsnNode, InsnList):::Inserts the given instructions before the specified instruction.:::if->return->ifirst->ilast->prev->if->else->insns->removeAll
InsnList#remove(AbstractInsnNode):::Removes the given instruction from this list.:::next->prev->if->if->else->else->if->else
InsnList#removeAll(boolean):::Removes all of the instructions of this list.:::if->insn->while->next
InsnList#clear():::Removes all of the instructions of this list.:::removeAll
InsnList#resetLabels():::Reset all labels in the instruction list:::insn->while->if->resetLabel
InsnList.InsnListIterator#hasNext()::: insn list iterator has next:::return
InsnList.InsnListIterator#next()::: insn list iterator next:::if->throw->new->NoSuchElementException->result->return
InsnList.InsnListIterator#remove()::: insn list iterator remove:::if->if->else->InsnList.this->remove->else->throw->new->IllegalStateException
InsnList.InsnListIterator#hasPrevious()::: insn list iterator has previous:::return
InsnList.InsnListIterator#previous()::: insn list iterator previous:::result->return
InsnList.InsnListIterator#nextIndex()::: insn list iterator next index:::if->return->size->if->toArray->return
InsnList.InsnListIterator#previousIndex()::: insn list iterator previous index:::if->return->if->toArray->return
InsnList.InsnListIterator#add(Object)::: insn list iterator add:::if->InsnList.this->insertBefore->else->if->InsnList.this->insert->else->InsnList.this->add
InsnList.InsnListIterator#set(Object)::: insn list iterator set:::if->InsnList.this->set->if->else->else->throw->new->IllegalStateException
InsnNode#getType()::: insn node get type:::return
InsnNode#accept(MethodVisitor):::Makes the given visitor visit this instruction.:::mv->visitInsn->acceptAnnotations
InsnNode#clone(Map)::: insn node clone:::return->new->InsnNode->cloneAnnotations
IntInsnNode#setOpcode(int):::Sets the opcode of this instruction.:::
IntInsnNode#getType()::: int insn node get type:::return
IntInsnNode#accept(MethodVisitor)::: int insn node accept:::mv->visitIntInsn->acceptAnnotations
IntInsnNode#clone(Map)::: int insn node clone:::return->new->IntInsnNode->cloneAnnotations
InvokeDynamicInsnNode#getType()::: invoke dynamic insn node get type:::return
InvokeDynamicInsnNode#accept(MethodVisitor)::: invoke dynamic insn node accept:::mv->visitInvokeDynamicInsn->acceptAnnotations
InvokeDynamicInsnNode#clone(Map)::: invoke dynamic insn node clone:::return->new->InvokeDynamicInsnNode->cloneAnnotations
JumpInsnNode#setOpcode(int):::Sets the opcode of this instruction.:::
JumpInsnNode#getType()::: jump insn node get type:::return
JumpInsnNode#accept(MethodVisitor)::: jump insn node accept:::mv->label->getLabel->visitJumpInsn->acceptAnnotations
JumpInsnNode#clone(Map)::: jump insn node clone:::return->clone->new->JumpInsnNode->cloneAnnotations
LabelNode#getType()::: label node get type:::return
LabelNode#getLabel()::: label node get label:::if->new->Label->return
LabelNode#accept(MethodVisitor)::: label node accept:::cv->getLabel->visitLabel
LabelNode#clone(Map)::: label node clone:::return->labels->get
LabelNode#resetLabel()::: label node reset label:::
LdcInsnNode#getType()::: ldc insn node get type:::return
LdcInsnNode#accept(MethodVisitor)::: ldc insn node accept:::mv->visitLdcInsn->acceptAnnotations
LdcInsnNode#clone(Map)::: ldc insn node clone:::return->new->LdcInsnNode->cloneAnnotations
LineNumberNode#getType()::: line number node get type:::return
LineNumberNode#accept(MethodVisitor)::: line number node accept:::mv->start->getLabel->visitLineNumber
LineNumberNode#clone(Map)::: line number node clone:::return->clone->new->LineNumberNode
LocalVariableAnnotationNode#accept(MethodVisitor, boolean):::Makes the given visitor visit this type annotation.:::start->size->new->LabelArr->end->size->new->LabelArr->index->size->new->intArr->for->i->mv->visitLocalVariableAnnotation->accept
LocalVariableNode#accept(MethodVisitor):::Makes the given visitor visit this local variable declaration.:::mv->start->getLabel->end->getLabel->visitLocalVariable
LookupSwitchInsnNode#getType()::: lookup switch insn node get type:::return
LookupSwitchInsnNode#accept(MethodVisitor)::: lookup switch insn node accept:::keys->size->new->intArr->for->i->labels->size->new->LabelArr->for->i->mv->dflt->getLabel->visitLookupSwitchInsn->acceptAnnotations
LookupSwitchInsnNode#clone(Map)::: lookup switch insn node clone:::clone->clone->clone->new->LookupSwitchInsnNode->addAll->return->clone->cloneAnnotations
MethodInsnNode#setOpcode(int):::Sets the opcode of this instruction.:::
MethodInsnNode#getType()::: method insn node get type:::return
MethodInsnNode#accept(MethodVisitor)::: method insn node accept:::mv->visitMethodInsn->acceptAnnotations
MethodInsnNode#clone(Map)::: method insn node clone:::return->new->MethodInsnNode
MethodNode#visitParameter(String, int)::: method node visit parameter:::if->new->ArrayList<ParameterNode>->parameters->new->ParameterNode->add
MethodNode#visitAnnotationDefault()::: method node visit annotation default:::return->new->ArrayList<Object>->new->AnnotationNode
MethodNode#visitAnnotation(String, boolean)::: method node visit annotation:::an->new->AnnotationNode->if->if->new->ArrayList<AnnotationNode>->visibleAnnotations->add->else->if->new->ArrayList<AnnotationNode>->invisibleAnnotations->add->return
MethodNode#visitTypeAnnotation(int, TypePath, String, boolean)::: method node visit type annotation:::an->new->TypeAnnotationNode->if->if->new->ArrayList<TypeAnnotationNode>->visibleTypeAnnotations->add->else->if->new->ArrayList<TypeAnnotationNode>->invisibleTypeAnnotations->add->return
MethodNode#visitParameterAnnotation(int, String, boolean)::: method node visit parameter annotation:::an->new->AnnotationNode->if->if->params->Type->getArgumentTypes->new->List<?>Arr->if->new->ArrayList<AnnotationNode>->add->else->if->params->Type->getArgumentTypes->new->List<?>Arr->if->new->ArrayList<AnnotationNode>->add->return
MethodNode#visitAttribute(Attribute)::: method node visit attribute:::if->new->ArrayList<Attribute>->attrs->add
MethodNode#visitCode()::: method node visit code:::
MethodNode#visitFrame(int, int, Object[], int, Object[])::: method node visit frame:::instructions->getLabelNodes->getLabelNodes->new->FrameNode->add
MethodNode#visitInsn(int)::: method node visit insn:::instructions->new->InsnNode->add
MethodNode#visitIntInsn(int, int)::: method node visit int insn:::instructions->new->IntInsnNode->add
MethodNode#visitVarInsn(int, int)::: method node visit var insn:::instructions->new->VarInsnNode->add
MethodNode#visitTypeInsn(int, String)::: method node visit type insn:::instructions->new->TypeInsnNode->add
MethodNode#visitFieldInsn(int, String, String, String)::: method node visit field insn:::instructions->new->FieldInsnNode->add
MethodNode#visitMethodInsn(int, String, String, String)::: method node visit method insn:::if->super->visitMethodInsn->return->instructions->new->MethodInsnNode->add
MethodNode#visitMethodInsn(int, String, String, String, boolean)::: method node visit method insn:::if->super->visitMethodInsn->return->instructions->new->MethodInsnNode->add
MethodNode#visitInvokeDynamicInsn(String, String, Handle, Object...)::: method node visit invoke dynamic insn:::instructions->new->InvokeDynamicInsnNode->add
MethodNode#visitJumpInsn(int, Label)::: method node visit jump insn:::instructions->getLabelNode->new->JumpInsnNode->add
MethodNode#visitLabel(Label)::: method node visit label:::instructions->getLabelNode->add
MethodNode#visitLdcInsn(Object)::: method node visit ldc insn:::instructions->new->LdcInsnNode->add
MethodNode#visitIincInsn(int, int)::: method node visit iinc insn:::instructions->new->IincInsnNode->add
MethodNode#visitTableSwitchInsn(int, int, Label, Label...)::: method node visit table switch insn:::instructions->getLabelNode->getLabelNodes->new->TableSwitchInsnNode->add
MethodNode#visitLookupSwitchInsn(Label, int[], Label[])::: method node visit lookup switch insn:::instructions->getLabelNode->getLabelNodes->new->LookupSwitchInsnNode->add
MethodNode#visitMultiANewArrayInsn(String, int)::: method node visit multi new array insn:::instructions->new->MultiANewArrayInsnNode->add
MethodNode#visitInsnAnnotation(int, TypePath, String, boolean)::: method node visit insn annotation:::insn->instructions->getLast->while->insn->getOpcode->insn->getPrevious->an->new->TypeAnnotationNode->if->if->new->ArrayList<TypeAnnotationNode>->add->else->if->new->ArrayList<TypeAnnotationNode>->add->return
MethodNode#visitTryCatchBlock(Label, Label, Label, String)::: method node visit try catch block:::tryCatchBlocks->getLabelNode->getLabelNode->getLabelNode->new->TryCatchBlockNode->add
MethodNode#visitTryCatchAnnotation(int, TypePath, String, boolean)::: method node visit try catch annotation:::tcb->tryCatchBlocks->get->an->new->TypeAnnotationNode->if->if->new->ArrayList<TypeAnnotationNode>->add->else->if->new->ArrayList<TypeAnnotationNode>->add->return
MethodNode#visitLocalVariable(String, String, String, Label, Label, int)::: method node visit local variable:::localVariables->getLabelNode->getLabelNode->new->LocalVariableNode->add
MethodNode#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean)::: method node visit local variable annotation:::an->getLabelNodes->getLabelNodes->new->LocalVariableAnnotationNode->if->if->new->ArrayList<LocalVariableAnnotationNode>->visibleLocalVariableAnnotations->add->else->if->new->ArrayList<LocalVariableAnnotationNode>->invisibleLocalVariableAnnotations->add->return
MethodNode#visitLineNumber(int, Label)::: method node visit line number:::instructions->getLabelNode->new->LineNumberNode->add
MethodNode#visitMaxs(int, int)::: method node visit maxs:::
MethodNode#visitEnd()::: method node visit end:::
MethodNode#getLabelNode(Label):::Returns the LabelNode corresponding to the given Label:::if->new->LabelNode->return
MethodNode#getLabelNodes(Label[])::: method node get label nodes:::nodes->new->LabelNodeArr->for->i->return
MethodNode#getLabelNodes(Object[])::: method node get label nodes:::nodes->new->ObjectArr->for->i->return
MethodNode#check(int):::Checks that this method node is compatible with the given ASM API version:::if->if->visibleTypeAnnotations->size->throw->new->RuntimeException->if->invisibleTypeAnnotations->size->throw->new->RuntimeException->n->tryCatchBlocks->size->for->i->for->i->instructions->size->if->visibleLocalVariableAnnotations->size->throw->new->RuntimeException->if->invisibleLocalVariableAnnotations->size->throw->new->RuntimeException
MethodNode#accept(ClassVisitor):::Makes the given class visitor visit this method.:::exceptions->size->new->StringArr->toArray->mv->cv->visitMethod->if->accept
MethodNode#accept(MethodVisitor):::Makes the given method visitor visit this method.:::i->j->n->parameters->size->for->if->av->mv->visitAnnotationDefault->AnnotationNode->accept->if->av->visitEnd->visibleAnnotations->size->for->invisibleAnnotations->size->for->visibleTypeAnnotations->size->for->invisibleTypeAnnotations->size->for->for->for->if->instructions->resetLabels->attrs->size->for->if->instructions->size->mv->visitCode->tryCatchBlocks->size->for->instructions->accept->localVariables->size->for->visibleLocalVariableAnnotations->size->for->invisibleLocalVariableAnnotations->size->for->mv->visitMaxs->mv->visitEnd
ModuleExportNode#accept(ModuleVisitor):::Makes the given module visitor visit this export declaration.:::mv->modules->new->StringArr->toArray->visitExport
ModuleNode#visitMainClass(String)::: module node visit main class:::
ModuleNode#visitPackage(String)::: module node visit package:::if->new->ArrayList<String>->packages->add
ModuleNode#visitRequire(String, int, String)::: module node visit require:::if->new->ArrayList<ModuleRequireNode>->requires->new->ModuleRequireNode->add
ModuleNode#visitExport(String, int, String...)::: module node visit export:::if->new->ArrayList<ModuleExportNode>->moduleList->if->new->ArrayList<String>->for->i->exports->new->ModuleExportNode->add
ModuleNode#visitOpen(String, int, String...)::: module node visit open:::if->new->ArrayList<ModuleOpenNode>->moduleList->if->new->ArrayList<String>->for->i->opens->new->ModuleOpenNode->add
ModuleNode#visitUse(String)::: module node visit use:::if->new->ArrayList<String>->uses->add
ModuleNode#visitProvide(String, String...)::: module node visit provide:::if->new->ArrayList<ModuleProvideNode>->providerList->new->ArrayList<String>->for->i->provides->new->ModuleProvideNode->add
ModuleNode#visitEnd()::: module node visit end:::
ModuleNode#accept(ClassVisitor)::: module node accept:::mv->cv->visitModule->if->return->if->mv->visitMainClass->if->for->i->packages->size->if->for->i->requires->size->if->for->i->exports->size->if->for->i->opens->size->if->for->i->uses->size->if->for->i->provides->size
ModuleOpenNode#accept(ModuleVisitor):::Makes the given module visitor visit this open declaration.:::mv->modules->new->StringArr->toArray->visitExport
ModuleProvideNode#accept(ModuleVisitor):::Makes the given module visitor visit this require declaration.:::mv->providers->new->StringArr->toArray->visitProvide
ModuleRequireNode#accept(ModuleVisitor):::Makes the given module visitor visit this require directive.:::mv->visitRequire
MultiANewArrayInsnNode#getType()::: multi new array insn node get type:::return
MultiANewArrayInsnNode#accept(MethodVisitor)::: multi new array insn node accept:::mv->visitMultiANewArrayInsn->acceptAnnotations
MultiANewArrayInsnNode#clone(Map)::: multi new array insn node clone:::return->new->MultiANewArrayInsnNode->cloneAnnotations
ParameterNode#accept(MethodVisitor):::Makes the given visitor visit this parameter declaration.:::mv->visitParameter
TableSwitchInsnNode#getType()::: table switch insn node get type:::return
TableSwitchInsnNode#accept(MethodVisitor)::: table switch insn node accept:::labels->size->new->LabelArr->for->i->mv->dflt->getLabel->visitTableSwitchInsn->acceptAnnotations
TableSwitchInsnNode#clone(Map)::: table switch insn node clone:::return->clone->clone->new->TableSwitchInsnNode->cloneAnnotations
TryCatchBlockNode#updateIndex(int):::Updates the index of this try catch block in the method's list of try catch block nodes:::newTypeRef->if->foreach->if->foreach
TryCatchBlockNode#accept(MethodVisitor):::Makes the given visitor visit this try catch block.:::mv->start->getLabel->end->getLabel->handler->getLabel->visitTryCatchBlock->n->visibleTypeAnnotations->size->for->i->invisibleTypeAnnotations->size->for->i
TypeInsnNode#setOpcode(int):::Sets the opcode of this instruction.:::
TypeInsnNode#getType()::: type insn node get type:::return
TypeInsnNode#accept(MethodVisitor)::: type insn node accept:::mv->visitTypeInsn->acceptAnnotations
TypeInsnNode#clone(Map)::: type insn node clone:::return->new->TypeInsnNode->cloneAnnotations
VarInsnNode#setOpcode(int):::Sets the opcode of this instruction.:::
VarInsnNode#getType()::: var insn node get type:::return
VarInsnNode#accept(MethodVisitor)::: var insn node accept:::mv->visitVarInsn->acceptAnnotations
VarInsnNode#clone(Map)::: var insn node clone:::return->new->VarInsnNode->cloneAnnotations

IconManager#getImage(String)::: icon manager get image:::return->getResource->new->ImageIcon
IconManager#getSmallIcon(ImageIcon)::: icon manager get small icon:::return->icon->getImage->getScaledInstance->new->ImageIcon
OperationEntry#setPanel(boolean, JButton, XOperations)::: operation entry set panel:::try->params->operation->getSignature->new->JLabel->add->new->XTextFieldArr->for->i->new->JLabel->add->validate->doLayout->catch->e->getMessage->println->finally
OperationEntry#getSignature()::: operation entry get signature:::params->operation->getSignature->result->new->StringArr->for->i->return
OperationEntry#getParameters()::: operation entry get parameters:::params->operation->getSignature->signature->new->StringArr->for->i->return->Utils->getParameters
OperationEntry#getReturnType()::: operation entry get return type:::return->operation->getReturnType
TableSorter#newDataAvailable(TableModelEvent)::: table sorter new data available:::super->newDataAvailable->getRowCount->new->intArr->for->i->sort
TableSorter#addTableModelListener(TableModelListener)::: table sorter add table model listener:::evtListenerList->add->super->addTableModelListener
TableSorter#removeTableModelListener(TableModelListener)::: table sorter remove table model listener:::evtListenerList->remove->super->removeTableModelListener
TableSorter#removeListeners()::: table sorter remove listeners:::foreach->super->removeTableModelListener
TableSorter#restoreListeners()::: table sorter restore listeners:::foreach->super->addTableModelListener
TableSorter#compare(Object, Object)::: table sorter compare:::if->return->if->return->if->return->else->if->o1->getClass->o2->getClass->equals->return->compareTo->else->return->o1->toString->o2->toString->compareTo
TableSorter#sort(int, boolean)::: table sorter sort:::attrs->if->attrs->isEditing->attrs->cancelCellEditing->removeListeners->if->JConsole->isDebug->println->getRowCount->quickSort->restoreListeners->if->for->i->getRowCount
TableSorter#compareS(Object, Object, boolean)::: table sorter compare s:::if->return->compare->else->return->compare
TableSorter#compareG(Object, Object, boolean)::: table sorter compare g:::if->return->compare->else->return->compare
TableSorter#quickSort(int, int, int, boolean)::: table sorter quick sort:::lo->hi->mid->if->getValueAt->while->while->getValueAt->compareS->while->getValueAt->compareG->if->swap->if->quickSort->if->quickSort
TableSorter#getRow(int)::: table sorter get row:::return->dataVector->elementAt
TableSorter#setRow(Vector, int)::: table sorter set row:::dataVector->setElementAt
TableSorter#swap(int, int, int)::: table sorter swap:::data->getRow->getRow->setRow->setRow->a
TableSorter#sortByColumn(int)::: table sorter sort by column:::sortByColumn
TableSorter#sortByColumn(int, boolean)::: table sorter sort by column:::sort
TableSorter#getIndexOfRow(int)::: table sorter get index of row:::return
TableSorter#addMouseListenerToHeaderInTable(JTable)::: table sorter add mouse listener to header in table:::tableView->getColumnModel->th->tableView->getTableHeader->th->addMouseListener
TableSorter#mouseClicked(MouseEvent)::: table sorter mouse clicked:::viewColumn->columnModel->e->getX->getColumnIndexAtX->column->tableView->convertColumnIndexToModel->if->e->getClickCount->if->attrs->attrs->sortRequested->tableView->invalidate->sortByColumn->tableView->validate->tableView->repaint
TableSorter#mousePressed(MouseEvent)::: table sorter mouse pressed:::
TableSorter#mouseEntered(MouseEvent)::: table sorter mouse entered:::
TableSorter#mouseExited(MouseEvent)::: table sorter mouse exited:::
TableSorter#mouseReleased(MouseEvent)::: table sorter mouse released:::
ThreadDialog#run()::: thread dialog run:::pane->new->JOptionPane->dialog->pane->createDialog->dialog->setResizable->dialog->setVisible
Utils#getClass(String):::This method returns the class matching the name className:::c->if->primitiveMap->get->return->return->Class->forName
Utils#isUniformCollection(Collection, Class):::Check if the given collection is a uniform collection of the given type.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->c->isEmpty->return->foreach->if->e->o->getClass->isAssignableFrom->return->return
Utils#canBeRenderedAsArray(Object):::Check if the given element denotes a supported array-friendly data structure, i.e:::if->isSupportedArray->return->if->c->if->c->isEmpty->return->else->return->isUniformCollection->isUniformCollection->if->return->return
Utils#isSupportedArray(Object):::Check if the given element is an array:::if->elem->getClass->isArray->return->ct->elem->getClass->getComponentType->if->ct->isArray->return->if->Array->getLength->isAssignableFrom->isAssignableFrom->return->return
Utils#getArrayClassName(String):::This method provides a readable classname if it's an array, i.e:::className->if->name->startsWith->index->name->lastIndexOf->name->name->length->substring->if->className->startsWith->className->className->length->substring->else->try->c->Class->forName->c->getComponentType->getName->catch->throw->new->IllegalArgumentException->finally->return
Utils#getReadableClassName(String):::This methods provides a readable classname:::className->getArrayClassName->if->return->index->name->lastIndexOf->brackets->new->StringBuilder->for->i->return->brackets->toString
Utils#isEditableType(String):::This method tells whether the type is editable (means can be created with a String or not):::return->editableTypes->contains
Utils#getDefaultValue(String):::This method inserts a default value for the standard java types, else it inserts the text name of the expected class type:::if->numericalTypes->contains->extraNumericalTypes->contains->return->if->booleanTypes->contains->return->getReadableClassName->i->type->lastIndexOf->if->return->type->type->length->substring->else->return
Utils#newStringConstructor(String, String):::Try to create a Java object using a one-string-param constructor.:::c->Utils->getClass->getConstructor->try->return->c->newInstance->catch->t->e->getTargetException->if->throw->else->throw->finally
Utils#createNumberFromStringValue(String):::Try to convert a string value into a numerical value.:::suffix->value->value->length->substring->if->equalsIgnoreCase->return->Long->value->value->length->substring->valueOf->if->equalsIgnoreCase->return->Float->value->value->length->substring->valueOf->if->equalsIgnoreCase->return->Double->value->value->length->substring->valueOf->try->return->Integer->valueOf->catch->finally->try->return->Long->valueOf->catch->finally->try->return->Double->valueOf->catch->finally->throw->new->NumberFormatException
Utils#createObjectFromString(String, String):::This method attempts to create an object of the given "type" using the "value" parameter:::result->if->primitiveToWrapper->containsKey->if->type->getName->equals->value->charAt->else->primitiveToWrapper->get->getName->newStringConstructor->else->if->type->getName->equals->value->charAt->else->if->Utils->getClass->isAssignableFrom->createNumberFromStringValue->else->if->value->equals->else->newStringConstructor->return
Utils#getParameters(XTextField[], String[]):::This method is responsible for converting the inputs given by the user into a useful object array for passing into a parameter array.:::result->new->ObjectArr->userInput->for->i->return
Utils#getActualException(Throwable):::If the exception is wrapped, unwrap it.:::if->e->getCause->if->t->e->getCause->if->return->return
Utils.EditFocusAdapter#focusLost(FocusEvent)::: edit focus adapter focus lost:::editor->stopCellEditing
Utils.CopyKeyAdapter#keyPressed(KeyEvent)::: copy key adapter key pressed:::ks->KeyStroke->e->getKeyCode->e->getModifiersEx->getKeyStroke->comp->e->getSource->for->i->if->tableNavigationKeys->e->getKeyCode->contains->e->consume
Utils.CopyKeyAdapter#keyTyped(KeyEvent)::: copy key adapter key typed:::e->consume
XArrayDataViewer#isViewableValue(Object)::: array data viewer is viewable value:::return->Utils->canBeRenderedAsArray
XArrayDataViewer#loadArray(Object)::: array data viewer load array:::comp->if->isViewableValue->arr->if->toArray->else->if->entrySet->toArray->else->if->else->length->Array->getLength->new->ObjectArr->for->i->arrayEditor->new->JEditorPane->arrayEditor->setContentType->arrayEditor->setEditable->evenRowColor->arrayEditor->getBackground->red->evenRowColor->getRed->green->evenRowColor->getGreen->blue->evenRowColor->getBlue->evenRowColorStr->oddRowColor->new->Color->oddRowColorStr->oddRowColor->getRed->oddRowColor->getGreen->oddRowColor->getBlue->foreground->arrayEditor->getForeground->textColor->String->foreground->getRGB->format->sb->new->StringBuilder->sb->append->append->append->for->i->if->sb->append->append->append->sb->append->arrayEditor->sb->toString->setText->scrollp->new->JScrollPane->return
XArrayDataViewer#htmlize(String)::: array data viewer htmlize:::return->value->replace->replace
XDataViewer#registerForMouseEvent(Component, MouseListener)::: data viewer register for mouse event:::if->pane->pane->getViewport->getView->if->container->components->container->getComponents->for->i->if->comp->addMouseListener
XDataViewer#dispose(MBeansTab)::: data viewer dispose:::XPlottingViewer->dispose
XDataViewer#isViewableValue(Object)::: data viewer is viewable value:::ret->if->XArrayDataViewer->isViewableValue->return->if->XOpenTypeViewer->isViewableValue->return->if->XPlottingViewer->isViewableValue->return->return
XDataViewer#getViewerType(Object)::: data viewer get viewer type:::if->XArrayDataViewer->isViewableValue->return->if->XOpenTypeViewer->isViewableValue->return->if->XPlottingViewer->isViewableValue->return->return
XDataViewer#getActionLabel(int)::: data viewer get action label:::if->return->if->return->return
XDataViewer#createOperationViewer(Object, XMBean)::: data viewer create operation viewer:::if->return->if->return->return->createAttributeViewer
XDataViewer#createNotificationViewer(Object)::: data viewer create notification viewer:::comp->if->return->if->XArrayDataViewer->loadArray->return->if->XOpenTypeViewer->loadOpenType->return->return
XDataViewer#createAttributeViewer(Object, XMBean, String, JTable)::: data viewer create attribute viewer:::comp->if->XArrayDataViewer->loadArray->return->if->XOpenTypeViewer->loadOpenType->return->if->XPlottingViewer->loadPlotting->return->return
XMBean#getMBeanServerConnection()::: bean get bean server connection:::return->mbeansTab->getMBeanServerConnection
XMBean#getSnapshotMBeanServerConnection()::: bean get snapshot bean server connection:::return->mbeansTab->getSnapshotMBeanServerConnection
XMBean#isBroadcaster()::: bean is broadcaster:::synchronized->if->try->getMBeanServerConnection->getObjectName->isInstanceOf->catch->if->JConsole->isDebug->println->e->printStackTrace->return->finally->return
XMBean#invoke(String)::: bean invoke:::result->getMBeanServerConnection->getObjectName->new->ObjectArr->new->StringArr->invoke->return
XMBean#invoke(String, Object[], String[])::: bean invoke:::result->getMBeanServerConnection->getObjectName->invoke->return
XMBean#setAttribute(Attribute)::: bean set attribute:::getMBeanServerConnection->getObjectName->setAttribute
XMBean#getAttribute(String)::: bean get attribute:::return->getSnapshotMBeanServerConnection->getObjectName->getAttribute
XMBean#getAttributes(String[])::: bean get attributes:::return->getSnapshotMBeanServerConnection->getObjectName->getAttributes
XMBean#getAttributes(MBeanAttributeInfo[])::: bean get attributes:::attributeString->new->StringArr->for->i->return->getAttributes
XMBean#getObjectName()::: bean get object name:::return
XMBean#getMBeanInfo()::: bean get bean info:::synchronized->if->getMBeanServerConnection->getMBeanInfo->return
XMBean#equals(Object)::: bean equals:::if->return->if->return->if->return->that->return->getObjectName->that->getObjectName->equals
XMBean#hashCode()::: bean hash code:::return->objectName->hashCode
XMBean#getText()::: bean get text:::return
XMBean#setText(String)::: bean set text:::
XMBean#getIcon()::: bean get icon:::return
XMBean#setIcon(Icon)::: bean set icon:::
XMBean#toString()::: bean to string:::return->getText
XMBeanAttributes#prepareRenderer(TableCellRenderer, int, int)::: bean attributes prepare renderer:::if->getRowCount->return->else->return->super->prepareRenderer
XMBeanAttributes#updateRowHeight(Object, int)::: bean attributes update row height:::cell->if->if->cell->isInited->cell->getHeight->setRowHeight->else->if->setRowHeight->else->if->setRowHeight
XMBeanAttributes#getCellRenderer(int, int)::: bean attributes get cell renderer:::if->getRowCount->return->else->if->obj->getModel->getValueAt->if->cell->if->cell->isInited->renderer->cell->getRenderer->renderer->getToolTip->setToolTipText->return->renderer->super->getCellRenderer->if->isCellError->if->isColumnEditable->isWritable->Utils->getClassName->isEditableType->renderer->getDefaultColor->setForeground->return
XMBeanAttributes#setColumnEditors()::: bean attributes set column editors:::tcm->getColumnModel->for->i
XMBeanAttributes#cancelCellEditing()::: bean attributes cancel cell editing:::if->LOGGER->isLoggable->LOGGER->getEditingRow->log->tableCellEditor->getCellEditor->if->tableCellEditor->cancelCellEditing
XMBeanAttributes#stopCellEditing()::: bean attributes stop cell editing:::if->LOGGER->isLoggable->LOGGER->getEditingRow->log->tableCellEditor->getCellEditor->if->tableCellEditor->stopCellEditing
XMBeanAttributes#editCellAt(int, int, EventObject)::: bean attributes edit cell at:::if->LOGGER->isLoggable->LOGGER->log->if->JConsole->isDebug->getValueName->getValue->println->retVal->super->editCellAt->if->tableCellEditor->getColumnModel->getColumn->getCellEditor->if->requestFocus->return
XMBeanAttributes#isCellEditable(int, int)::: bean attributes is cell editable:::if->isColumnEditable->return->obj->getModel->getValueAt->if->cell->return->cell->isMaximized->return
XMBeanAttributes#setValueAt(Object, int, int)::: bean attributes set value at:::if->isCellError->isColumnEditable->isWritable->Utils->getClassName->isEditableType->if->JConsole->isDebug->getValueName->println->super->setValueAt
XMBeanAttributes#isTableEditable()::: bean attributes is table editable:::return
XMBeanAttributes#setTableValue(Object, int)::: bean attributes set table value:::
XMBeanAttributes#isColumnEditable(int)::: bean attributes is column editable:::if->getColumnCount->return->getColumnName->equals->else->return
XMBeanAttributes#getClassName(int)::: bean attributes get class name:::index->convertRowToIndex->if->return->getType->else->return
XMBeanAttributes#getValueName(int)::: bean attributes get value name:::index->convertRowToIndex->if->return->getName->else->return
XMBeanAttributes#getValue(int)::: bean attributes get value:::val->getModel->getValueAt->return
XMBeanAttributes#getToolTip(int, int)::: bean attributes get tool tip:::if->isCellError->return->unavailableAttributes->getValueName->get->if->isColumnEditable->value->getValue->tip->if->value->toString->if->isAttributeViewable->return->if->index->convertRowToIndex->if->return->getDescription->return
XMBeanAttributes#isWritable(int)::: bean attributes is writable:::index->convertRowToIndex->if->return->isWritable->else->return
XMBeanAttributes#getRowCount():::Override JTable method in order to make any call to this method atomic with TableModel elements.:::return->super->getRowCount
XMBeanAttributes#isReadable(int)::: bean attributes is readable:::index->convertRowToIndex->if->return->isReadable->else->return
XMBeanAttributes#isCellError(int, int)::: bean attributes is cell error:::return->isColumnEditable->unavailableAttributes->getValueName->containsKey
XMBeanAttributes#isAttributeViewable(int, int)::: bean attributes is attribute viewable:::isViewable->if->obj->getModel->getValueAt->if->return
XMBeanAttributes#loadAttributes(XMBean, MBeanInfo)::: bean attributes load attributes:::load->new->SwingWorker<Runnable,Void>->mbeansTab->workerAdd
XMBeanAttributes#doLoadAttributes(XMBean, MBeanInfo)::: bean attributes do load attributes:::if->return->curMBeanInfo->mbean->getMBeanInfo->attrsInfo->curMBeanInfo->getAttributes->attrs->new->HashMap<String,Object>->unavailableAttrs->new->HashMap<String,Object>->viewableAttrs->new->HashMap<String,Object>->list->try->mbean->getAttributes->catch->if->JConsole->isDebug->mbean->getObjectName->println->e->printStackTrace->new->AttributeList->for->i->finally->try->att_length->list->size->for->i->if->for->i->catch->for->i->finally->return->new->Runnable
XMBeanAttributes#collapse(String, Component)::: bean attributes collapse:::row->getSelectedRow->obj->getModel->getValueAt->if->cancelCellEditing->cell->cell->reset->cell->getHeight->setRowHeight->editCellAt->invalidate->repaint
XMBeanAttributes#updateZoomedCell(int, int)::: bean attributes update zoomed cell:::obj->getModel->getValueAt->cell->if->if->cell->isInited->elem->cell->getValue->attributeName->getModel->getValueAt->comp->mbeansTab->getDataViewer->createAttributeViewer->if->if->getRowHeight->cell->super->getCellRenderer->init->XDataViewer->registerForMouseEvent->else->return->cell->switchState->cell->getHeight->setRowHeight->if->cell->isMaximized->cancelCellEditing->editCellAt->invalidate->repaint->return
XMBeanAttributes#refreshAttributes()::: bean attributes refresh attributes:::refreshAttributes
XMBeanAttributes#refreshAttributes(boolean)::: bean attributes refresh attributes:::sw->new->SwingWorker<Void,Void>->mbeansTab->workerAdd
XMBeanAttributes#columnMarginChanged(ChangeEvent)::: bean attributes column margin changed:::if->isEditing->stopCellEditing->super->columnMarginChanged
XMBeanAttributes#sortRequested(int)::: bean attributes sort requested:::if->isEditing->stopCellEditing->super->sortRequested
XMBeanAttributes#emptyTable()::: bean attributes empty table:::getModel->emptyTable
XMBeanAttributes#emptyTable(DefaultTableModel)::: bean attributes empty table:::model->removeTableModelListener->super->emptyTable
XMBeanAttributes#isViewable(Attribute)::: bean attributes is viewable:::data->attribute->getValue->return->XDataViewer->isViewableValue
XMBeanAttributes#removeAttributes()::: bean attributes remove attributes:::if->attributes->clear->if->unavailableAttributes->clear->if->viewableAttributes->clear
XMBeanAttributes#getZoomedCell(XMBean, String, Object)::: bean attributes get zoomed cell:::synchronized->viewers->if->viewersCache->containsKey->viewersCache->get->else->new->HashMap<String,ZoomedCell>->cell->if->viewers->containsKey->viewers->get->cell->setValue->if->cell->isMaximized->cell->getType->comp->mbeansTab->getDataViewer->createAttributeViewer->cell->cell->getMinRenderer->cell->getMinHeight->init->XDataViewer->registerForMouseEvent->else->new->ZoomedCell->viewers->put->viewersCache->put->return
XMBeanAttributes#addTableData(DefaultTableModel, XMBean, MBeanAttributeInfo[], HashMap, HashMap, HashMap)::: bean attributes add table data:::rowData->new->ObjectArr->col1Width->col2Width->for->i->updateColumnWidth
XMBeanAttributes#updateColumnWidth(int, int)::: bean attributes update column width:::colModel->getColumnModel->if->getPreferredScrollableViewportSize->getWidth->getPreferredScrollableViewportSize->getWidth->colModel->getColumn->setPreferredWidth
XMBeanAttributes.AttributesMouseListener#mousePressed(MouseEvent)::: attributes mouse listener mouse pressed:::if->e->getButton->if->e->getClickCount->row->XMBeanAttributes.this->getSelectedRow->col->XMBeanAttributes.this->getSelectedColumn->if->return->if->return->XMBeanAttributes.this->updateZoomedCell
XMBeanAttributes.ValueCellEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int)::: value cell editor get table cell editor component:::val->if->obj->getModel->getValueAt->if->cell->if->cell->getRenderer->zr->cell->getRenderer->return->zr->getComponent->else->comp->super->getTableCellEditorComponent->if->isCellError->isWritable->Utils->getClassName->isEditableType->textField->setEditable->return->return->super->getTableCellEditorComponent
XMBeanAttributes.ValueCellEditor#stopCellEditing()::: value cell editor stop cell editing:::editingRow->getEditingRow->editingColumn->getEditingColumn->if->obj->getModel->getValueAt->if->cell->if->cell->isMaximized->this->cancelCellEditing->return->return->super->stopCellEditing
XMBeanAttributes.MaximizedCellRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)::: maximized cell renderer get table cell renderer component:::return
XMBeanAttributes.MaximizedCellRenderer#getComponent()::: maximized cell renderer get component:::return
XMBeanAttributes.ZoomedCell#isInited()::: zoomed cell is inited:::return
XMBeanAttributes.ZoomedCell#getValue()::: zoomed cell get value:::return
XMBeanAttributes.ZoomedCell#setValue(Object)::: zoomed cell set value:::
XMBeanAttributes.ZoomedCell#init(TableCellRenderer, Component, int)::: zoomed cell init:::new->MaximizedCellRenderer
XMBeanAttributes.ZoomedCell#getType()::: zoomed cell get type:::return
XMBeanAttributes.ZoomedCell#reset()::: zoomed cell reset:::
XMBeanAttributes.ZoomedCell#switchState()::: zoomed cell switch state:::
XMBeanAttributes.ZoomedCell#isMaximized()::: zoomed cell is maximized:::return
XMBeanAttributes.ZoomedCell#minimize()::: zoomed cell minimize:::
XMBeanAttributes.ZoomedCell#maximize()::: zoomed cell maximize:::
XMBeanAttributes.ZoomedCell#getHeight()::: zoomed cell get height:::if->return->else->return->maxRenderer->getComponent->getPreferredSize->getHeight
XMBeanAttributes.ZoomedCell#getMinHeight()::: zoomed cell get min height:::return
XMBeanAttributes.ZoomedCell#toString()::: zoomed cell to string:::if->return->if->value->getClass->isArray->name->Utils->value->getClass->getName->getArrayClassName->length->Array->getLength->return->if->return->value->getClass->getName->return->value->toString
XMBeanAttributes.ZoomedCell#getRenderer()::: zoomed cell get renderer:::if->return->else->return
XMBeanAttributes.ZoomedCell#getMinRenderer()::: zoomed cell get min renderer:::return
XMBeanAttributes.AttributesListener#tableChanged(TableModelEvent)::: attributes listener table changed:::if->e->getColumn->isColumnEditable->model->e->getSource->tableValue->model->e->getFirstRow->e->getColumn->getValueAt->if->LOGGER->isLoggable->LOGGER->e->getFirstRow->e->getLastRow->e->getColumn->log->if->try->Utils->e->getFirstRow->getClassName->createObjectFromString->catch->popupAndLog->finally->attributeName->e->getFirstRow->getValueName->attribute->new->Attribute->setAttribute
XMBeanAttributes.AttributesListener#setAttribute(Attribute, String)::: attributes listener set attribute:::setAttribute->new->SwingWorker<Void,Void>->mbeansTab->workerAdd
XMBeanAttributes.AttributesListener#popupAndLog(Throwable, String, String)::: attributes listener popup and log:::Utils->getActualException->if->JConsole->isDebug->ex->printStackTrace->message->ex->getMessage->ex->getMessage->ex->toString->EventQueue->new->ThreadDialog->invokeLater
XMBeanInfo.ReadOnlyDefaultTableModel#setValueAt(Object, int, int)::: read only default table model set value at:::
XMBeanInfo.TableRowDivider#toString()::: table row divider to string:::return
XMBeanInfo.MBeanInfoTableCellRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)::: bean info table cell renderer get table cell renderer component:::comp->super->getTableCellRendererComponent->if->label->value->toString->new->JLabel->label->label->getForeground->ensureContrast->setBackground->label->setOpaque->return->return
XMBeanInfo.MBeanInfoTableCellEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int)::: bean info table cell editor get table cell editor component:::comp->super->getTableCellEditorComponent->if->label->value->toString->new->JLabel->label->label->getForeground->ensureContrast->setBackground->label->setOpaque->return->return
XMBeanInfo#emptyInfoTable()::: bean info empty info table:::tableModel->infoTable->getModel->while->tableModel->getRowCount->tableModel->removeRow
XMBeanInfo#emptyDescTable()::: bean info empty desc table:::tableModel->descTable->getModel->while->tableModel->getRowCount->tableModel->removeRow
XMBeanInfo#addDescriptor(Descriptor, String)::: bean info add descriptor:::if->desc->getFieldNames->tableModel->descTable->getModel->rowData->new->ObjectArr->new->TableRowDivider->new->TableRowDivider->tableModel->addRow->foreach->desc->getFieldNames->fieldValue->desc->getFieldValue->if->Arrays->toString->else->if->Arrays->toString->else->if->Arrays->toString->else->if->Arrays->toString->else->if->Arrays->toString->else->if->Arrays->toString->else->if->Arrays->toString->else->if->Arrays->toString->else->if->Arrays->toString->else->tableModel->addRow->tableModel->new->TableModelEvent->newDataAvailable
XMBeanInfo#addMBeanInfo(XMBean, MBeanInfo)::: bean info add bean info:::emptyInfoTable->emptyDescTable->infoBorderPanel->getBorder->setTitle->text->tableModel->infoTable->getModel->rowData->new->ObjectArr->new->TableRowDivider->new->TableRowDivider->tableModel->addRow->mbean->getObjectName->tableModel->addRow->mbeanInfo->getClassName->tableModel->addRow->mbeanInfo->getDescription->tableModel->addRow->mbeanInfo->getDescriptor->addDescriptor->i->foreach->mbeanInfo->getConstructors->addMBeanConstructorInfo->j->foreach->mbci->getSignature->addMBeanParameterInfo->tableModel->new->TableModelEvent->newDataAvailable
XMBeanInfo#addMBeanAttributeInfo(MBeanAttributeInfo)::: bean info add bean attribute info:::emptyInfoTable->emptyDescTable->infoBorderPanel->getBorder->setTitle->text->tableModel->infoTable->getModel->rowData->new->ObjectArr->new->TableRowDivider->new->TableRowDivider->tableModel->addRow->mbai->getName->tableModel->addRow->mbai->getDescription->tableModel->addRow->mbai->isReadable->tableModel->addRow->mbai->isWritable->tableModel->addRow->mbai->isIs->tableModel->addRow->mbai->getType->tableModel->addRow->mbai->getDescriptor->addDescriptor->tableModel->new->TableModelEvent->newDataAvailable
XMBeanInfo#addMBeanOperationInfo(MBeanOperationInfo)::: bean info add bean operation info:::emptyInfoTable->emptyDescTable->infoBorderPanel->getBorder->setTitle->text->tableModel->infoTable->getModel->rowData->new->ObjectArr->new->TableRowDivider->new->TableRowDivider->tableModel->addRow->mboi->getName->tableModel->addRow->mboi->getDescription->tableModel->addRow->switch->mboi->getImpact->break->break->break->break->tableModel->addRow->mboi->getReturnType->tableModel->addRow->mboi->getDescriptor->addDescriptor->i->foreach->mboi->getSignature->addMBeanParameterInfo->tableModel->new->TableModelEvent->newDataAvailable
XMBeanInfo#addMBeanNotificationInfo(MBeanNotificationInfo)::: bean info add bean notification info:::emptyInfoTable->emptyDescTable->infoBorderPanel->getBorder->setTitle->text->tableModel->infoTable->getModel->rowData->new->ObjectArr->new->TableRowDivider->new->TableRowDivider->tableModel->addRow->mbni->getName->tableModel->addRow->mbni->getDescription->tableModel->addRow->Arrays->mbni->getNotifTypes->toString->tableModel->addRow->mbni->getDescriptor->addDescriptor->tableModel->new->TableModelEvent->newDataAvailable
XMBeanInfo#addMBeanConstructorInfo(MBeanConstructorInfo, String)::: bean info add bean constructor info:::tableModel->infoTable->getModel->rowData->new->ObjectArr->new->TableRowDivider->new->TableRowDivider->tableModel->addRow->mbci->getName->tableModel->addRow->mbci->getDescription->tableModel->addRow->mbci->getDescriptor->addDescriptor->tableModel->new->TableModelEvent->newDataAvailable
XMBeanInfo#addMBeanParameterInfo(MBeanParameterInfo, String)::: bean info add bean parameter info:::tableModel->infoTable->getModel->rowData->new->ObjectArr->new->TableRowDivider->new->TableRowDivider->tableModel->addRow->mbpi->getName->tableModel->addRow->mbpi->getDescription->tableModel->addRow->mbpi->getType->tableModel->addRow->mbpi->getDescriptor->addDescriptor->tableModel->new->TableModelEvent->newDataAvailable
XMBeanNotifications#cancelCellEditing()::: bean notifications cancel cell editing:::tce->getCellEditor->if->tce->cancelCellEditing
XMBeanNotifications#stopCellEditing()::: bean notifications stop cell editing:::tce->getCellEditor->if->tce->stopCellEditing
XMBeanNotifications#isCellEditable(int, int)::: bean notifications is cell editable:::cell->getUserDataCell->if->return->cell->isMaximized->return
XMBeanNotifications#setValueAt(Object, int, int)::: bean notifications set value at:::
XMBeanNotifications#prepareRenderer(TableCellRenderer, int, int)::: bean notifications prepare renderer:::if->getRowCount->return->comp->super->prepareRenderer->if->comp->getFont->normalFont->deriveFont->cell->getUserDataCell->if->comp->setFont->size->cell->getHeight->if->if->getRowHeight->setRowHeight->else->comp->setFont->return
XMBeanNotifications#getCellRenderer(int, int)::: bean notifications get cell renderer:::if->getRowCount->return->renderer->toolTip->cell->getUserDataCell->if->cell->isInited->cell->getRenderer->else->super->getCellRenderer->if->cell->toString->else->val->getModel->getValueAt->if->val->toString->renderer->setToolTipText->return
XMBeanNotifications#getUserDataCell(int, int)::: bean notifications get user data cell:::obj->getModel->getValueAt->if->return->return
XMBeanNotifications#dispose()::: bean notifications dispose:::listeners->clear
XMBeanNotifications#getReceivedNotifications(XMBean)::: bean notifications get received notifications:::listener->listeners->mbean->getObjectName->get->if->return->else->return->listener->getReceivedNotifications
XMBeanNotifications#clearCurrentNotifications()::: bean notifications clear current notifications:::emptyTable->if->currentListener->clear->return->else->return
XMBeanNotifications#unregisterListener(DefaultMutableTreeNode)::: bean notifications unregister listener:::mbean->node->getUserObject->getData->return->mbean->getObjectName->unregister
XMBeanNotifications#registerListener(DefaultMutableTreeNode)::: bean notifications register listener:::mbean->node->getUserObject->getData->if->try->mbean->getMBeanServerConnection->addNotificationListener->catch->if->JConsole->isDebug->println->e->printStackTrace->finally->listener->listeners->mbean->getObjectName->get->if->new->XMBeanNotificationsListener->listeners->mbean->getObjectName->put->else->if->listener->isRegistered->emptyTable->listener->register
XMBeanNotifications#handleNotification(Notification, Object)::: bean notifications handle notification:::try->if->mbean->getMBeanName->if->notif->getType->indexOf->unregister->catch->if->JConsole->isDebug->println->e->printStackTrace->finally
XMBeanNotifications#disableNotifications()::: bean notifications disable notifications:::emptyTable
XMBeanNotifications#unregister(ObjectName)::: bean notifications unregister:::listener->listeners->get->if->listener->isRegistered->listener->unregister->return->else->return
XMBeanNotifications#addNotificationsListener(NotificationListener)::: bean notifications add notifications listener:::notificationListenersList->add
XMBeanNotifications#removeNotificationsListener(NotificationListener)::: bean notifications remove notifications listener:::notificationListenersList->remove
XMBeanNotifications#fireNotificationReceived(XMBeanNotificationsListener, XMBean, DefaultMutableTreeNode, Object[], long)::: bean notifications fire notification received:::if->tableModel->getModel->if->tableModel->insertRow->repaint->notif->new->Notification->notif->setUserData->foreach->nl->handleNotification
XMBeanNotifications#updateModel(List)::: bean notifications update model:::emptyTable->tableModel->getModel->foreach->tableModel->addRow
XMBeanNotifications#isListenerRegistered(XMBean)::: bean notifications is listener registered:::listener->listeners->mbean->getObjectName->get->if->return->return->listener->isRegistered
XMBeanNotifications#loadNotifications(XMBean)::: bean notifications load notifications:::listener->listeners->mbean->getObjectName->get->emptyTable->if->data->listener->getData->updateModel->validate->repaint->else
XMBeanNotifications#setColumnEditors()::: bean notifications set column editors:::tcm->getColumnModel->for->i
XMBeanNotifications#isTableEditable()::: bean notifications is table editable:::return
XMBeanNotifications#emptyTable()::: bean notifications empty table:::model->getModel->while->model->getRowCount->model->removeRow->validate
XMBeanNotifications#updateUserDataCell(int, int)::: bean notifications update user data cell:::obj->getModel->getValueAt->if->cell->if->cell->isInited->if->getRowHeight->cell->super->getCellRenderer->init->cell->switchState->cell->getHeight->setRowHeight->if->cell->isMaximized->cancelCellEditing->editCellAt->invalidate->repaint
XMBeanNotifications.UserDataCellRenderer#getTableCellRendererComponent(JTable, Object, boolean, boolean, int, int)::: user data cell renderer get table cell renderer component:::return
XMBeanNotifications.UserDataCellRenderer#getComponent()::: user data cell renderer get component:::return
XMBeanNotifications.UserDataCell#toString()::: user data cell to string:::if->return->if->userData->getClass->isArray->name->Utils->userData->getClass->getName->getArrayClassName->length->Array->getLength->return->if->return->userData->getClass->getName->return->userData->toString
XMBeanNotifications.UserDataCell#isInited()::: user data cell is inited:::return
XMBeanNotifications.UserDataCell#init(TableCellRenderer, int)::: user data cell init:::
XMBeanNotifications.UserDataCell#switchState()::: user data cell switch state:::
XMBeanNotifications.UserDataCell#isMaximized()::: user data cell is maximized:::return
XMBeanNotifications.UserDataCell#minimize()::: user data cell minimize:::
XMBeanNotifications.UserDataCell#maximize()::: user data cell maximize:::
XMBeanNotifications.UserDataCell#getHeight()::: user data cell get height:::if->return->else->return->maxRenderer->getComponent->getPreferredSize->getHeight
XMBeanNotifications.UserDataCell#getRenderer()::: user data cell get renderer:::if->return->else->return
XMBeanNotifications.NotifMouseListener#mousePressed(MouseEvent)::: notif mouse listener mouse pressed:::if->e->getButton->if->e->getClickCount->row->XMBeanNotifications.this->getSelectedRow->col->XMBeanNotifications.this->getSelectedColumn->if->return->if->return->XMBeanNotifications.this->updateUserDataCell
XMBeanNotifications.UserDataCellEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int)::: user data cell editor get table cell editor component:::val->if->obj->getModel->getValueAt->if->cell->if->cell->getRenderer->zr->cell->getRenderer->return->zr->getComponent->else->comp->super->getTableCellEditorComponent->textField->setEditable->return->return->super->getTableCellEditorComponent
XMBeanNotifications.UserDataCellEditor#stopCellEditing()::: user data cell editor stop cell editing:::editingRow->getEditingRow->editingColumn->getEditingColumn->if->obj->getModel->getValueAt->if->cell->if->cell->isMaximized->cancelCellEditing->return->return->super->stopCellEditing
XMBeanNotifications.XMBeanNotificationsListener#getData()::: bean notifications listener get data:::return
XMBeanNotifications.XMBeanNotificationsListener#clear()::: bean notifications listener clear:::data->clear
XMBeanNotifications.XMBeanNotificationsListener#isRegistered()::: bean notifications listener is registered:::return
XMBeanNotifications.XMBeanNotificationsListener#unregister()::: bean notifications listener unregister:::try->xmbean->getMBeanServerConnection->xmbean->getObjectName->removeNotificationListener->catch->if->JConsole->isDebug->println->e->printStackTrace->finally
XMBeanNotifications.XMBeanNotificationsListener#getReceivedNotifications()::: bean notifications listener get received notifications:::return
XMBeanNotifications.XMBeanNotificationsListener#register(DefaultMutableTreeNode)::: bean notifications listener register:::clear->try->xmbean->getMBeanServerConnection->xmbean->getObjectName->addNotificationListener->catch->if->JConsole->isDebug->println->e->printStackTrace->finally
XMBeanNotifications.XMBeanNotificationsListener#handleNotification(Notification, Object)::: bean notifications listener handle notification:::EventQueue->new->Runnable->invokeLater
XMBeanOperations#updateOperations(MBeanOperationInfo[])::: bean operations update operations:::mbeanOperations->new->ArrayList<MBeanOperationInfo>->foreach->if->operation->getSignature->operation->getName->startsWith->operation->getReturnType->equals->operation->getSignature->operation->getName->startsWith->operation->getReturnType->equals->operation->getName->startsWith->operation->getReturnType->equals->mbeanOperations->add->return->mbeanOperations->new->MBeanOperationInfoArr->toArray
XNodeInfo#getType()::: node info get type:::return
XNodeInfo#getData()::: node info get data:::return
XNodeInfo#getLabel()::: node info get label:::return
XNodeInfo#getToolTipText()::: node info get tool tip text:::return
XNodeInfo#toString()::: node info to string:::return
XObject#equals(Object)::: object equals:::if->return->Objects->getObject->equals->return
XObject#hashCode()::: object hash code:::return->object->hashCode
XObject#getObject()::: object get object:::return
XObject#useHashCodeRepresentation(boolean)::: object use hash code representation:::
XObject#hashCodeRepresentation()::: object hash code representation:::return
XObject#setObject(Object)::: object set object:::try->text->if->getIcon->setIcon->if->getText->getText->else->if->getIcon->setIcon->if->getText->getText->else->if->getText->object->toString->setIcon->if->if->object->hashCode->setText->catch->e->getMessage->println->finally
XOpenTypeViewer.XOpenTypeDataListener#mousePressed(MouseEvent)::: open type data listener mouse pressed:::if->e->getButton->if->e->getClickCount->elem->getSelectedViewedOpenType->if->try->elem->viewed->catch->finally
XOpenTypeViewer.XOpenTypeDataListener#getSelectedViewedOpenType()::: open type data listener get selected viewed open type:::row->getSelectedRow->col->getSelectedColumn->elem->getModel->getValueAt->if->return->else->return
XOpenTypeViewer.Navigatable#incrElement()::: navigatable incr element:::
XOpenTypeViewer.Navigatable#decrElement()::: navigatable decr element:::
XOpenTypeViewer.Navigatable#canDecrement()::: navigatable can decrement:::
XOpenTypeViewer.Navigatable#canIncrement()::: navigatable can increment:::
XOpenTypeViewer.Navigatable#getElementCount()::: navigatable get element count:::
XOpenTypeViewer.Navigatable#getSelectedElementIndex()::: navigatable get selected element index:::
XOpenTypeViewer.XOpenTypeData#getViewedParent()::: open type data get viewed parent:::return
XOpenTypeViewer.XOpenTypeData#getToolTip(int, int)::: open type data get tool tip:::if->value->getModel->getValueAt->if->if->isClickableElement->return->value->toString->else->return->value->toString->return
XOpenTypeViewer.XOpenTypeData#getCellRenderer(int, int)::: open type data get cell renderer:::tcr->super->getCellRenderer->tcr->getToolTip->setToolTipText->return
XOpenTypeViewer.XOpenTypeData#renderKey(String, Component)::: open type data render key:::comp->setFont
XOpenTypeViewer.XOpenTypeData#prepareRenderer(TableCellRenderer, int, int)::: open type data prepare renderer:::comp->super->prepareRenderer->if->comp->getFont->normalFont->deriveFont->o->getModel->getValueAt->if->key->o->toString->renderKey->else->if->isClickableElement->comp->setFont->else->comp->setFont->return
XOpenTypeViewer.XOpenTypeData#isClickableElement(Object)::: open type data is clickable element:::if->if->return->getElementCount->else->return->return
XOpenTypeViewer.XOpenTypeData#updateColumnWidth()::: open type data update column width:::if->colModel->getColumnModel->if->if->getPreferredScrollableViewportSize->getWidth->getPreferredScrollableViewportSize->getWidth->colModel->getColumn->setPreferredWidth->return->Math->max->if->getPreferredScrollableViewportSize->getWidth->getPreferredScrollableViewportSize->getWidth->colModel->getColumn->setPreferredWidth->colModel->getColumn->setPreferredWidth
XOpenTypeViewer.XOpenTypeData#viewed(XOpenTypeViewer)::: open type data viewed:::
XOpenTypeViewer.XOpenTypeData#initTable(String[])::: open type data init table:::setRowSelectionAllowed->setColumnSelectionAllowed->getTableHeader->setReorderingAllowed->getModel->setColumnIdentifiers->for->e->getColumnModel->getColumns->e->hasMoreElements->new->Utils.CopyKeyAdapter->addKeyListener->setAutoResizeMode->new->Dimension->setPreferredScrollableViewportSize
XOpenTypeViewer.XOpenTypeData#emptyTable()::: open type data empty table:::invalidate->while->getModel->getRowCount->getModel->removeRow->validate
XOpenTypeViewer.XOpenTypeData#setValueAt(Object, int, int)::: open type data set value at:::
XOpenTypeViewer.TabularDataComparator#compare(CompositeData, CompositeData)::: tabular data comparator compare:::foreach->c1->o1->get->c2->o2->get->if->result->compareTo->if->return->return
XOpenTypeViewer.XTabularData#accessFirstElement(TabularData)::: tabular data access first element:::if->tabular->values->size->return->return->tabular->values->toArray
XOpenTypeViewer.XTabularData#renderKey(String, Component)::: tabular data render key:::if->comp->getFont->normalFont->deriveFont->foreach->type->getIndexNames->if->key->equals->comp->setFont
XOpenTypeViewer.XTabularData#getElementCount()::: tabular data get element count:::return
XOpenTypeViewer.XTabularData#getSelectedElementIndex()::: tabular data get selected element index:::return
XOpenTypeViewer.XTabularData#incrElement()::: tabular data incr element:::loadCompositeData
XOpenTypeViewer.XTabularData#decrElement()::: tabular data decr element:::loadCompositeData
XOpenTypeViewer.XTabularData#canDecrement()::: tabular data can decrement:::if->return->else->return
XOpenTypeViewer.XTabularData#canIncrement()::: tabular data can increment:::if->return->else->return
XOpenTypeViewer.XTabularData#toString()::: tabular data to string:::return->type->getDescription
XOpenTypeViewer.XCompositeData#viewed(XOpenTypeViewer)::: composite data viewed:::viewer->setOpenType->updateColumnWidth
XOpenTypeViewer.XCompositeData#toString()::: composite data to string:::return->composite->getCompositeType->getTypeName
XOpenTypeViewer.XCompositeData#formatKey(String)::: composite data format key:::return
XOpenTypeViewer.XCompositeData#load(CompositeData)::: composite data load:::type->data->getCompositeType->keys->type->keySet->it->keys->iterator->rowData->new->ObjectArr->while->it->hasNext->key->it->next->val->data->get->formatKey->if->else->openType->type->getType->if->new->XCompositeData->else->if->new->XArrayData->else->if->else->if->new->XTabularData->str->if->toString->if->str->length->str->length->if->toString->if->str->length->str->length->getModel->addRow
XOpenTypeViewer.XCompositeData#loadCompositeData(CompositeData)::: composite data load composite data:::emptyTable->load->tableModel->getModel->tableModel->new->TableModelEvent->newDataAvailable
XOpenTypeViewer.XArrayData#viewed(XOpenTypeViewer)::: array data viewed:::if->throw->new->Exception->if->throw->new->Exception->super->viewed
XOpenTypeViewer.XArrayData#getElementCount()::: array data get element count:::return
XOpenTypeViewer.XArrayData#getSelectedElementIndex()::: array data get selected element index:::return
XOpenTypeViewer.XArrayData#renderKey(String, Component)::: array data render key:::if->comp->getFont->normalFont->deriveFont->if->comp->setFont
XOpenTypeViewer.XArrayData#incrElement()::: array data incr element:::loadCompositeData
XOpenTypeViewer.XArrayData#decrElement()::: array data decr element:::loadCompositeData
XOpenTypeViewer.XArrayData#canDecrement()::: array data can decrement:::if->return->return
XOpenTypeViewer.XArrayData#canIncrement()::: array data can increment:::if->return->return
XOpenTypeViewer.XArrayData#loadArray()::: array data load array:::if->if->loadCompositeData->else->load
XOpenTypeViewer.XArrayData#load()::: array data load:::rowData->new->ObjectArr->Array->getLength->for->i
XOpenTypeViewer.XArrayData#toString()::: array data to string:::if->return->else->return->elemType->getTypeName
XOpenTypeViewer#isViewableValue(Object):::The supplied value is viewable iff: - it's a CompositeData/TabularData, or - it's a non-empty array of CompositeData/TabularData, or - it's a non-empty Collection of CompositeData/TabularData.:::if->return->if->return->Array->getLength->if->c->if->c->isEmpty->return->else->return->Utils->isUniformCollection->Utils->isUniformCollection->return
XOpenTypeViewer#loadOpenType(Object)::: open type viewer load open type:::comp->if->isViewableValue->open->new->XOpenTypeViewer->return
XOpenTypeViewer#setOpenType(XOpenTypeData)::: open type viewer set open type:::if->current->removeMouseListener->if->current->getViewedParent->prev->setEnabled->else->prev->setEnabled->current->addMouseListener->if->tabularPrev->setEnabled->tabularNext->setEnabled->tabularLabel->setText->tabularLabel->setEnabled->else->tabular->tabularNext->tabular->canIncrement->setEnabled->tabularPrev->tabular->canDecrement->setEnabled->hasMoreThanOneElement->tabular->canIncrement->tabular->canDecrement->if->tabularLabel->Resources->String->tabular->getSelectedElementIndex->format->String->tabular->getElementCount->format->format->setText->else->tabularLabel->setText->tabularLabel->setEnabled->if->incr->setEnabled->decr->setEnabled->compositeLabel->setText->compositeLabel->setEnabled->else->array->incr->array->canIncrement->setEnabled->decr->array->canDecrement->setEnabled->hasMoreThanOneElement->array->canIncrement->array->canDecrement->if->compositeLabel->Resources->String->array->getSelectedElementIndex->format->String->array->getElementCount->format->format->setText->else->compositeLabel->setText->compositeLabel->setEnabled->container->invalidate->container->setViewportView->container->validate
XOpenTypeViewer#actionPerformed(ActionEvent)::: open type viewer action performed:::if->event->getSource->b->event->getSource->if->parent->current->getViewedParent->try->parent->viewed->catch->finally->else->if->incrElement->try->current->viewed->catch->finally->else->if->decrElement->try->current->viewed->catch->finally->else->if->incrElement->try->current->viewed->catch->finally->else->if->decrElement->try->current->viewed->catch->finally
XOpenTypeViewer#setupDisplay(XOpenTypeData)::: open type viewer setup display:::setBackground->new->JScrollPane->buttons->new->FlowLayout->new->JPanel->new->JButton->new->JButton->tabularButtons->new->FlowLayout->new->JPanel->tabularButtons->add->tabularPrev->addActionListener->new->JLabel->tabularLabel->setEnabled->tabularButtons->add->tabularButtons->add->tabularNext->addActionListener->tabularButtons->setBackground->new->JButton->prev->addActionListener->buttons->add->new->JButton->incr->addActionListener->new->JButton->decr->addActionListener->array->new->JPanel->array->setBackground->array->add->new->JLabel->compositeLabel->setEnabled->array->add->array->add->buttons->add->new->BorderLayout->setLayout->buttons->setBackground->navigationPanel->new->BorderLayout->new->JPanel->navigationPanel->setBackground->navigationPanel->add->navigationPanel->add->add->add->d->container->getPreferredSize->getWidth->container->getPreferredSize->getHeight->new->Dimension->setPreferredSize
XOperations#removeOperations()::: operations remove operations:::removeAll
XOperations#loadOperations(XMBean, MBeanInfo)::: operations load operations:::operations->mbeanInfo->getOperations->invalidate->listeners->getComponents->for->i->removeAll->new->BorderLayout->setLayout->methodButton->methodLabel->innerPanelLeft->innerPanelRight->outerPanelLeft->outerPanelRight->new->GridLayout->new->JPanel->new->GridLayout->new->JPanel->for->i->add->add->validate
XOperations#isCallable(MBeanParameterInfo[])::: operations is callable:::for->i->return
XOperations#actionPerformed(ActionEvent)::: operations action performed:::e->getSource->performInvokeRequest
XOperations#performInvokeRequest(JButton)::: operations perform invoke request:::entryIf->operationEntryTable->get->new->SwingWorker<Object,Void>->execute
XOperations#addOperationsListener(NotificationListener)::: operations add operations listener:::notificationListenersList->add
XOperations#removeOperationsListener(NotificationListener)::: operations remove operations listener:::notificationListenersList->remove
XOperations#fireChangedNotification(String, Object, Object)::: operations fire changed notification:::n->new->Notification->foreach->nl->handleNotification
XOperations#updateOperations(MBeanOperationInfo[])::: operations update operations:::
XPlotter#addValues(long, long...)::: plotter add values:::super->addValues->table->repaint
XPlottingViewer#dispose(MBeansTab)::: plotting viewer dispose:::it->plotterCache->keySet->iterator->while->it->hasNext->key->it->next->if->key->String->tab->hashCode->valueOf->startsWith->it->remove->timerCache->keySet->iterator->while->it->hasNext->key->it->next->if->key->String->tab->hashCode->valueOf->startsWith->t->timerCache->get->t->cancel->it->remove
XPlottingViewer#isViewableValue(Object)::: plotting viewer is viewable value:::return
XPlottingViewer#loadPlotting(XMBean, String, Object, JTable, MBeansTab)::: plotting viewer load plotting:::comp->if->isViewableValue->key->String->tab->hashCode->valueOf->String->mbean->hashCode->valueOf->mbean->getObjectName->getCanonicalName->plotter->plotterCache->get->if->new->XPlottingViewer->plotterCache->put->return
XPlottingViewer#actionPerformed(ActionEvent)::: plotting viewer action performed:::plotterCache->remove->t->timerCache->remove->t->cancel->collapse
XPlottingViewer#createPlotter(XMBean, String, String, JTable)::: plotting viewer create plotter:::plotter->new->XPlotter->plotter->createSequence->timerTask->new->TimerTask->timerName->timer->new->Timer->timer->tab->getUpdateInterval->schedule->timerCache->put->return
XPlottingViewer#setupDisplay(Plotter)::: plotting viewer setup display:::buttonPanel->new->JPanel->gbl->new->GridBagLayout->buttonPanel->setLayout->new->BorderLayout->setLayout->new->JButton->plotButton->addActionListener->plotButton->setEnabled->buttonConstraints->new->GridBagConstraints->gbl->setConstraints->buttonPanel->add->if->attributeName->length->plotterLabelPanel->new->JPanel->label->new->JLabel->gbl2->new->GridBagLayout->plotterLabelPanel->setLayout->labelConstraints->new->GridBagConstraints->gbl2->setConstraints->plotterLabelPanel->add->add->setPlotter->add->repaint
XSheet#dispose()::: sheet dispose:::clear->XDataViewer->dispose->mbeanNotifications->dispose
XSheet#setupScreen()::: sheet setup screen:::new->BorderLayout->setLayout->BorderFactory->createLineBorder->setBorder->new->JPanel->mainPanel->new->BorderLayout->setLayout->add->new->JPanel->add->new->JButton->refreshButton->Resources->getMnemonicInt->setMnemonic->refreshButton->setToolTipText->refreshButton->addActionListener->new->JButton->clearButton->Resources->getMnemonicInt->setMnemonic->clearButton->setToolTipText->clearButton->addActionListener->new->JButton->subscribeButton->Resources->getMnemonicInt->setMnemonic->subscribeButton->setToolTipText->subscribeButton->addActionListener->new->JButton->unsubscribeButton->Resources->getMnemonicInt->setMnemonic->unsubscribeButton->setToolTipText->unsubscribeButton->addActionListener->new->XMBeanAttributes->new->XMBeanOperations->mbeanOperations->addOperationsListener->new->XMBeanNotifications->mbeanNotifications->addNotificationsListener->new->XMBeanInfo
XSheet#isSelectedNode(DefaultMutableTreeNode, DefaultMutableTreeNode)::: sheet is selected node:::return
XSheet#showErrorDialog(Object, String)::: sheet show error dialog:::new->ThreadDialog->run
XSheet#isMBeanNode(DefaultMutableTreeNode)::: sheet is bean node:::userObject->node->getUserObject->if->uo->return->uo->getType->equals->return
XSheet#displayNode(DefaultMutableTreeNode)::: sheet display node:::clear->displayEmptyNode->if->return->userObject->node->getUserObject->if->uo->switch->uo->getType->displayMBeanNode->break->displayEmptyNode->break->displayMBeanAttributesNode->break->displayMBeanOperationsNode->break->displayMBeanNotificationsNode->break->displayMetadataNode->break->displayEmptyNode->break->else->displayEmptyNode
XSheet#displayMBeanNode(DefaultMutableTreeNode)::: sheet display bean node:::uo->node->getUserObject->if->uo->getType->equals->return->uo->getData->sw->new->SwingWorker<MBeanInfo,Void>->sw->execute
XSheet#displayMetadataNode(DefaultMutableTreeNode)::: sheet display metadata node:::uo->node->getUserObject->mbi->switch->uo->getType->sw->new->SwingWorker<MBeanAttributeInfo,Void>->sw->execute->break->operData->uo->getData->mboi->mbeanOperations->new->MBeanOperationInfoArr->new->MBeanInfo->loadOperations->invalidate->mainPanel->removeAll->operationPanel->new->BorderLayout->new->JPanel->operationBorderPanel->new->BorderLayout->new->JPanel->operationBorderPanel->BorderFactory->createTitledBorder->setBorder->operationBorderPanel->new->JScrollPane->add->operationPanel->add->mbi->addMBeanOperationInfo->operationPanel->add->mainPanel->add->southPanel->setVisible->southPanel->removeAll->validate->repaint->break->notifData->uo->getData->invalidate->mainPanel->removeAll->mbi->addMBeanNotificationInfo->mainPanel->add->southPanel->setVisible->southPanel->removeAll->validate->repaint->break
XSheet#displayMBeanAttributesNode(DefaultMutableTreeNode)::: sheet display bean attributes node:::uo->node->getUserObject->if->uo->getType->equals->return->uo->getData->xmb->sw->new->SwingWorker<MBeanInfo,Void>->sw->execute
XSheet#displayMBeanOperationsNode(DefaultMutableTreeNode)::: sheet display bean operations node:::uo->node->getUserObject->if->uo->getType->equals->return->uo->getData->sw->new->SwingWorker<MBeanInfo,Void>->sw->execute
XSheet#displayMBeanNotificationsNode(DefaultMutableTreeNode)::: sheet display bean notifications node:::uo->node->getUserObject->if->uo->getType->equals->return->uo->getData->mbeanNotifications->loadNotifications->updateNotifications->invalidate->mainPanel->removeAll->borderPanel->new->BorderLayout->new->JPanel->borderPanel->BorderFactory->createTitledBorder->setBorder->borderPanel->new->JScrollPane->add->mainPanel->add->southPanel->removeAll->southPanel->add->southPanel->add->southPanel->add->southPanel->setVisible->subscribeButton->setEnabled->unsubscribeButton->setEnabled->clearButton->setEnabled->validate->repaint
XSheet#displayEmptyNode()::: sheet display empty node:::invalidate->mainPanel->removeAll->southPanel->removeAll->validate->repaint
XSheet#registerListener():::Subscribe button action.:::new->SwingWorker<Void,Void>->execute
XSheet#unregisterListener():::Unsubscribe button action.:::new->SwingWorker<Boolean,Void>->execute
XSheet#refreshAttributes():::Refresh button action.:::mbeanAttributes->refreshAttributes
XSheet#updateNotifications()::: sheet update notifications:::if->mbeanNotifications->isListenerRegistered->received->mbeanNotifications->getReceivedNotifications->updateReceivedNotifications->else->clearNotifications
XSheet#updateReceivedNotifications(DefaultMutableTreeNode, long, boolean)::: sheet update received notifications:::text->selectedNode->mbeansTab->getTree->getLastSelectedPathComponent->if->updateNotificationsNodeLabel
XSheet#clearNotifications()::: sheet clear notifications:::updateNotificationsNodeLabel
XSheet#clearNotifications0()::: sheet clear notifications0:::updateNotificationsNodeLabel
XSheet#updateNotificationsNodeLabel(DefaultMutableTreeNode, String)::: sheet update notifications node label:::synchronized->mbeansTab->getTree->invalidate->oldUserObject->node->getUserObject->newUserObject->oldUserObject->getType->oldUserObject->getData->oldUserObject->getToolTipText->new->XNodeInfo->node->setUserObject->model->mbeansTab->getTree->getModel->model->nodeChanged->validate->repaint
XSheet#clearCurrentNotifications()::: sheet clear current notifications:::mbeanNotifications->clearCurrentNotifications->if->mbeanNotifications->isListenerRegistered->clearNotifications0->else->clearNotifications
XSheet#clear()::: sheet clear:::mbeanAttributes->stopCellEditing->mbeanAttributes->emptyTable->mbeanAttributes->removeAttributes->mbeanOperations->removeOperations->mbeanNotifications->stopCellEditing->mbeanNotifications->emptyTable->mbeanNotifications->disableNotifications
XSheet#handleNotification(Notification, Object)::: sheet handle notification:::if->e->getType->equals->message->if->textArea->new->JTextArea->textArea->setEditable->textArea->setEnabled->textArea->textArea->getLineCount->setRows->else->comp->mbeansTab->getDataViewer->createOperationViewer->if->textArea->handback->toString->new->JTextArea->textArea->setEditable->textArea->setEnabled->textArea->textArea->getLineCount->setRows->scrollPane->new->JScrollPane->d->scrollPane->getPreferredSize->if->d->getWidth->d->getHeight->scrollPane->new->Dimension->setPreferredSize->else->if->new->JScrollPane->d->comp->getPreferredSize->if->d->getWidth->d->getHeight->comp->new->Dimension->setPreferredSize->e->getSource->new->ThreadDialog->run->else->if->e->getType->equals->emitter->received->e->getUserData->received->longValue->updateReceivedNotifications
XSheet#actionPerformed(ActionEvent)::: sheet action performed:::if->e->getSource->button->e->getSource->if->refreshAttributes->return->if->clearCurrentNotifications->return->if->registerListener->return->if->unregisterListener->return
XTable#getDefaultColor()::: table get default color:::return
XTable#getEditableColor()::: table get editable color:::return
XTable#sortRequested(int):::Called by TableSorter if a mouse event requests to sort the rows.:::
XTable#getSelectedIndex():::This returns the select index as the table was at initialization:::return->getSelectedRow->convertRowToIndex
XTable#convertRowToIndex(int)::: table convert row to index:::if->return->if->getModel->return->getModel->getIndexOfRow->else->return
XTable#emptyTable()::: table empty table:::model->getModel->while->model->getRowCount->model->removeRow
XTable#isTableEditable()::: table is table editable:::
XTable#isColumnEditable(int)::: table is column editable:::
XTable#isReadable(int)::: table is readable:::
XTable#isWritable(int)::: table is writable:::
XTable#isCellError(int, int)::: table is cell error:::
XTable#isAttributeViewable(int, int)::: table is attribute viewable:::
XTable#setTableValue(Object, int)::: table set table value:::
XTable#getValue(int)::: table get value:::
XTable#getClassName(int)::: table get class name:::
XTable#getValueName(int)::: table get value name:::
XTable#isReadWrite(int)::: table is read write:::return->isReadable->isWritable
XTable#isCellEditable(int, int)::: table is cell editable:::return->isTableEditable->isColumnEditable->isWritable->Utils->getClassName->isEditableType
XTable#isCellDroppable(int, int)::: table is cell droppable:::return->isTableEditable->isColumnEditable->isWritable
XTable#getToolTip(int, int)::: table get tool tip:::return
XTable#getCellRenderer(int, int):::This method sets read write rows to be blue, and other rows to be their default rendered colour.:::tcr->super->getCellRenderer->tcr->getToolTip->setToolTipText->if->tcr->getForeground->if->return->if->tcr->setForeground->return->if->isCellError->tcr->setForeground->else->if->isCellEditable->tcr->setForeground->else->tcr->setForeground->return
XTable#prepareRenderer(TableCellRenderer, int, int)::: table prepare renderer:::comp->super->prepareRenderer->if->comp->getFont->normalFont->deriveFont->if->isAttributeViewable->comp->setFont->else->comp->setFont->return
XTextField#setNullSelectionAllowed(boolean)::: text field set null selection allowed:::
XTextField#getNullSelectionAllowed()::: text field get null selection allowed:::return
XTextField#init(Object, Class)::: text field init:::fieldEditable->Utils->expectedClass->getName->isEditableType->clearObject->if->textField->value->toString->setText->else->textField->setText->textField->setToolTipText->if->if->textField->isEditable->textField->setEditable->else->if->textField->isEditable->textField->setEditable
XTextField#clearObject()::: text field clear object:::textField->getDocument->removeDocumentListener->setDefaultColors
XTextField#setDefaultColors()::: text field set default colors:::
XTextField#setHorizontalAlignment(int)::: text field set horizontal alignment:::textField->setHorizontalAlignment
XTextField#buildJMenuItem(XObject, int)::: text field build menu item:::if->return->xobject->getText->new->JMenuItem->else->if->return->xobject->getText->new->JMenuItem->else->if->return->new->JMenuItem->else->return
XTextField#actionPerformed(ActionEvent)::: text field action performed:::if->e->getSource->if->operation->performInvokeRequest
XTextField#getValue():::This method returns either the user inputted String, or an XObject if one was dropped on the input field.:::if->if->return->else->return->else->return->textField->getText
XTextField#changedUpdate(DocumentEvent)::: text field changed update:::clearObject
XTextField#removeUpdate(DocumentEvent)::: text field remove update:::clearObject
XTextField#insertUpdate(DocumentEvent)::: text field insert update:::clearObject
XTextFieldEditor#actionPerformed(ActionEvent)::: text field editor action performed:::super->actionPerformed->if->e->getSource->e->getSource->fireEditingStopped
XTextFieldEditor#dropSuccess()::: text field editor drop success:::fireEditingStopped
XTextFieldEditor#addCellEditorListener(CellEditorListener)::: text field editor add cell editor listener:::evtListenerList->add
XTextFieldEditor#removeCellEditorListener(CellEditorListener)::: text field editor remove cell editor listener:::evtListenerList->remove
XTextFieldEditor#fireEditingStopped()::: text field editor fire editing stopped:::listener->listeners->evtListenerList->getListenerList->for->i
XTextFieldEditor#fireEditingCanceled()::: text field editor fire editing canceled:::listener->listeners->evtListenerList->getListenerList->for->i
XTextFieldEditor#cancelCellEditing()::: text field editor cancel cell editing:::fireEditingCanceled
XTextFieldEditor#stopCellEditing()::: text field editor stop cell editing:::fireEditingStopped->return
XTextFieldEditor#isCellEditable(EventObject)::: text field editor is cell editable:::return
XTextFieldEditor#shouldSelectCell(EventObject)::: text field editor should select cell:::return
XTextFieldEditor#getCellEditorValue()::: text field editor get cell editor value:::object->getValue->if->return->getObject->else->return
XTextFieldEditor#getTableCellEditorComponent(JTable, Object, boolean, int, int)::: text field editor get table cell editor component:::className->if->mytable->mytable->getClassName->else->getName->try->Utils->getClass->init->catch->finally->return
XTree#removeChildNode(DefaultMutableTreeNode)::: tree remove child node:::model->getModel->model->removeNodeFromParent
XTree#addChildNode(DefaultMutableTreeNode, DefaultMutableTreeNode, int)::: tree add child node:::model->getModel->model->insertNodeInto
XTree#addChildNode(DefaultMutableTreeNode, DefaultMutableTreeNode)::: tree add child node:::childCount->parent->getChildCount->if->addChildNode->return->if->comparableChild->for->i->addChildNode->return->addChildNode
XTree#removeAll()::: tree remove all:::model->getModel->root->model->getRoot->root->removeAllChildren->model->nodeStructureChanged->nodes->clear
XTree#removeMBeanFromView(ObjectName)::: tree remove bean from view:::node->dn->new->Dn->if->dn->getTokenCount->model->getModel->token->dn->getToken->hashKey->dn->getHashKey->nodes->get->if->node->isRoot->if->hasNonMetadataNodes->removeMetadataNodes->label->token->getValue->userObject->token->getTokenValue->new->XNodeInfo->changeNodeValue->else->parent->node->getParent->model->removeNodeFromParent->nodes->remove->removeParentFromView
XTree#hasNonMetadataNodes(DefaultMutableTreeNode):::Returns true if any of the children nodes is a non MBean metadata node.:::for->e->node->children->e->hasMoreElements->return
XTree#hasMetadataNodes(DefaultMutableTreeNode):::Returns true if any of the children nodes is an MBean metadata node.:::for->e->node->children->e->hasMoreElements->return
XTree#isMetadataNode(DefaultMutableTreeNode):::Returns true if the given node is an MBean metadata node.:::uo->node->getUserObject->if->switch->getType->return->return->else->return
XTree#removeMetadataNodes(DefaultMutableTreeNode)::: tree remove metadata nodes:::metadataNodes->new->HashSet<DefaultMutableTreeNode>->model->getModel->for->e->node->children->e->hasMoreElements->foreach->model->removeNodeFromParent
XTree#removeParentFromView(Dn, int, DefaultMutableTreeNode)::: tree remove parent from view:::if->node->isRoot->node->isLeaf->node->getUserObject->getType->equals->parent->node->getParent->removeChildNode->hashKey->dn->dn->getToken->getHashKey->nodes->remove->removeParentFromView->return
XTree#addMBeansToView(Set)::: tree add beans to view:::dns->new->TreeSet<Dn>->foreach->dn->new->Dn->dns->add->foreach->mbean->dn->getObjectName->xmbean->new->XMBean->addMBeanToView
XTree#addMBeanToView(ObjectName)::: tree add bean to view:::xmbean->new->XMBean->dn->new->Dn->addMBeanToView
XTree#addMBeanToView(ObjectName, XMBean, Dn)::: tree add bean to view:::childNode->parentNode->token->dn->getToken->hashKey->dn->getHashKey->if->nodes->containsKey->nodes->get->data->createNodeValue->label->data->toString->userObject->mbean->toString->new->XNodeInfo->changeNodeValue->return->createDnNode->nodes->put->for->i->dn->getTokenCount
XTree#changeNodeValue(DefaultMutableTreeNode, XNodeInfo)::: tree change node value:::if->clone->node->clone->clone->setUserObject->if->compareTo->node->setUserObject->model->getModel->model->nodeChanged->else->parent->node->getParent->removeChildNode->node->setUserObject->addChildNode->else->node->setUserObject->model->getModel->model->nodeChanged->if->nodeValue->getType->equals->removeMetadataNodes->treeNodes->node->getPath->path->new->TreePath->if->isExpanded->addMetadataNodes->if->getLastSelectedPathComponent->selectionPath->getSelectionPath->clearSelection->setSelectionPath
XTree#createDomainNode(Dn, Token):::Creates the domain node.:::node->new->ComparableDefaultMutableTreeNode->label->dn->getDomain->userObject->new->XNodeInfo->node->setUserObject->return
XTree#createDnNode(Dn, Token, XMBean):::Creates the node corresponding to the whole Dn, i.e:::node->new->ComparableDefaultMutableTreeNode->data->createNodeValue->label->data->toString->userObject->xmbean->getObjectName->toString->new->XNodeInfo->node->setUserObject->return
XTree#createSubDnNode(Dn, Token):::Creates the node corresponding to a subDn, i.e:::node->new->ComparableDefaultMutableTreeNode->label->isKeyValueView->token->getTokenValue->token->getValue->userObject->token->getTokenValue->new->XNodeInfo->node->setUserObject->return
XTree#createNodeValue(XMBean, Token)::: tree create node value:::label->isKeyValueView->token->getTokenValue->token->getValue->xmbean->setText->return
XTree#extractKeyValuePairs(String, ObjectName):::Parses the MBean ObjectName comma-separated properties string and puts the individual key/value pairs into the map:::map->new->LinkedHashMap<String,String>->eq->props->indexOf->while->key->props->substring->value->mbean->getKeyProperty->map->put->props->key->length->value->length->substring->if->props->startsWith->props->substring->props->indexOf->return
XTree#getKeyPropertyListString(ObjectName):::Returns the ordered key property list that will be used to build the MBean tree:::props->mbean->getKeyPropertyListString->map->extractKeyValuePairs->sb->new->StringBuilder->foreach->if->map->containsKey->sb->append->append->map->get->append->append->map->remove->foreach->map->entrySet->sb->entry->getKey->append->append->entry->getValue->append->append->orderedKeyPropertyListString->sb->toString->orderedKeyPropertyListString->orderedKeyPropertyListString->length->substring->return
XTree#addMetadataNodes(DefaultMutableTreeNode)::: tree add metadata nodes:::mbean->node->getUserObject->getData->model->getModel->sw->new->MBeanInfoNodesSwingWorker->if->sw->execute
XTree.MBeanInfoNodesSwingWorker#doInBackground()::: bean info nodes swing worker do in background:::result->new->ObjectArr->mbean->getMBeanInfo->mbean->isBroadcaster->return
XTree.MBeanInfoNodesSwingWorker#done()::: bean info nodes swing worker done:::try->result->get->mbeanInfo->isBroadcaster->if->addMBeanInfoNodes->catch->t->Utils->getActualException->if->JConsole->isDebug->t->printStackTrace->finally
XTree.MBeanInfoNodesSwingWorker#addMBeanInfoNodes(DefaultTreeModel, DefaultMutableTreeNode, XMBean, MBeanInfo, Boolean)::: bean info nodes swing worker add bean info nodes:::ai->mbeanInfo->getAttributes->oi->mbeanInfo->getOperations->ni->mbeanInfo->getNotifications->childIndex->if->attributes->new->DefaultMutableTreeNode->attributesUO->new->XNodeInfo->attributes->setUserObject->node->insert->foreach->attribute->new->DefaultMutableTreeNode->attributeUO->new->ObjectArr->mbai->getName->new->XNodeInfo->attribute->setUserObject->attribute->setAllowsChildren->attributes->add->if->operations->new->DefaultMutableTreeNode->operationsUO->new->XNodeInfo->operations->setUserObject->node->insert->foreach->sb->new->StringBuilder->foreach->mboi->getSignature->sb->mbpi->getType->append->append->signature->sb->toString->if->signature->length->signature->signature->length->substring->toolTipText->mboi->getName->operation->new->DefaultMutableTreeNode->operationUO->new->ObjectArr->mboi->getName->new->XNodeInfo->operation->setUserObject->operation->setAllowsChildren->operations->add->if->isBroadcaster->booleanValue->notifications->new->DefaultMutableTreeNode->notificationsUO->new->XNodeInfo->notifications->setUserObject->node->insert->if->foreach->notification->new->DefaultMutableTreeNode->notificationUO->mbni->getName->new->XNodeInfo->notification->setUserObject->notification->setAllowsChildren->notifications->add->model->reload
XTree#isTreeView()::: tree is tree view:::if->getTreeViewValue->return
XTree#getTreeViewValue()::: tree get tree view value:::tv->System->getProperty->return->tv->equals
XTree#isKeyValueView()::: tree is key value view:::return
XTree.ComparableDefaultMutableTreeNode#compareTo(DefaultMutableTreeNode)::: comparable default mutable tree node compare to:::return->this->toString->node->toString->compareTo
XTree.Dn#getObjectName()::: dn get object name:::return
XTree.Dn#getDomain()::: dn get domain:::return
XTree.Dn#getKeyPropertyList()::: dn get key property list:::return
XTree.Dn#getToken(int)::: dn get token:::return->tokens->get
XTree.Dn#getTokenCount()::: dn get token count:::return->tokens->size
XTree.Dn#getHashDn()::: dn get hash dn:::return
XTree.Dn#getHashKey(Token)::: dn get hash key:::begin->hashDn->token->getTokenValue->indexOf->return->hashDn->hashDn->length->substring
XTree.Dn#computeHashDn()::: dn compute hash dn:::if->tokens->isEmpty->return->hdn->new->StringBuilder->for->i->tokens->size->hdn->hdn->length->substring
XTree.Dn#toString()::: dn to string:::return
XTree.Dn#compareTo(Dn)::: dn compare to:::return->this->toString->dn->toString->compareTo
XTree.Token#getTokenType()::: token get token type:::return
XTree.Token#getTokenValue()::: token get token value:::return
XTree.Token#getKey()::: token get key:::return
XTree.Token#getValue()::: token get value:::return
XTree.Token#buildKeyValue()::: token build key value:::index->tokenValue->indexOf->if->else->tokenValue->substring->tokenValue->tokenValue->length->substring
XTreeRenderer#getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean)::: tree renderer get tree cell renderer component:::super->getTreeCellRendererComponent->userObject->getUserObject->if->node->node->getToolTipText->setToolTipText->switch->node->getType->xmbean->node->getData->xmbean->getIcon->setIcon->break->break->setIcon->break->setIcon->break->else->setToolTipText->return

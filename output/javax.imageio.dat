IIOImage#getRenderedImage():::Returns the currently set RenderedImage, or null if only a Raster is available.:::synchronized->return
IIOImage#setRenderedImage(RenderedImage):::Sets the current RenderedImage:::synchronized->if->throw->new->IllegalArgumentException
IIOImage#hasRaster():::Returns true if this IIOImage stores a Raster rather than a RenderedImage.:::synchronized->return
IIOImage#getRaster():::Returns the currently set Raster, or null if only a RenderedImage is available.:::synchronized->return
IIOImage#setRaster(Raster):::Sets the current Raster:::synchronized->if->throw->new->IllegalArgumentException
IIOImage#getNumThumbnails():::Returns the number of thumbnails stored in this IIOImage.:::return->thumbnails->size
IIOImage#getThumbnail(int):::Returns a thumbnail associated with the main image.:::if->throw->new->IndexOutOfBoundsException->return->thumbnails->get
IIOImage#getThumbnails():::Returns the current List of thumbnail BufferedImages, or null if none is set:::return
IIOImage#setThumbnails(List):::Sets the list of thumbnails to a new List of BufferedImages, or to null:::
IIOImage#getMetadata():::Returns a reference to the current IIOMetadata object, or null is none is set.:::return
IIOImage#setMetadata(IIOMetadata):::Sets the IIOMetadata to a new object, or null.:::
IIOParam#setSourceRegion(Rectangle):::Sets the source region of interest:::if->return->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->sourceRegion->clone
IIOParam#getSourceRegion():::Returns the source region to be used:::if->return->return->sourceRegion->clone
IIOParam#setSourceSubsampling(int, int, int, int):::Specifies a decimation subsampling to apply on I/O:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->if->throw->new->IllegalStateException
IIOParam#getSourceXSubsampling():::Returns the number of source columns to advance for each pixel:::return
IIOParam#getSourceYSubsampling():::Returns the number of rows to advance for each pixel:::return
IIOParam#getSubsamplingXOffset():::Returns the horizontal offset of the subsampling grid:::return
IIOParam#getSubsamplingYOffset():::Returns the vertical offset of the subsampling grid:::return
IIOParam#setSourceBands(int[]):::Sets the indices of the source bands to be used:::if->else->numBands->for->i->sourceBands->clone
IIOParam#getSourceBands():::Returns the set of source bands to be used:::if->return->return->sourceBands->clone
IIOParam#setDestinationType(ImageTypeSpecifier):::Sets the desired image type for the destination image, using an ImageTypeSpecifier:::
IIOParam#getDestinationType():::Returns the type of image to be returned by the read, if one was set by a call to setDestination(ImageTypeSpecifier), as an ImageTypeSpecifier:::return
IIOParam#setDestinationOffset(Point):::Specifies the offset in the destination image at which future decoded pixels are to be placed, when reading, or where a region will be written, when writing:::if->throw->new->IllegalArgumentException->destinationOffset->clone
IIOParam#getDestinationOffset():::Returns the offset in the destination image at which pixels are to be placed:::return->destinationOffset->clone
IIOParam#setController(IIOParamController):::Sets the IIOParamController to be used to provide settings for this IIOParam object when the activateController method is called, overriding any default controller:::
IIOParam#getController():::Returns whatever IIOParamController is currently installed:::return
IIOParam#getDefaultController():::Returns the default IIOParamController, if there is one, regardless of the currently installed controller:::return
IIOParam#hasController():::Returns true if there is a controller installed for this IIOParam object:::return
IIOParam#activateController():::Activates the installed IIOParamController for this IIOParam object and returns the resulting value:::if->hasController->throw->new->IllegalStateException->return->getController->activate
IIOParamController#activate(IIOParam):::Activates the controller:::
ImageIO#scanForPlugins():::Scans for plug-ins on the application class path, loads their service provider classes, and registers a service provider instance for each one found with the IIORegistry:::theRegistry->registerApplicationClasspathSpis
ImageIO.CacheInfo#getUseCache()::: cache info get use cache:::return
ImageIO.CacheInfo#setUseCache(boolean)::: cache info set use cache:::
ImageIO.CacheInfo#getCacheDirectory()::: cache info get cache directory:::return
ImageIO.CacheInfo#setCacheDirectory(File)::: cache info set cache directory:::
ImageIO.CacheInfo#getHasPermission()::: cache info get has permission:::return
ImageIO.CacheInfo#setHasPermission(Boolean)::: cache info set has permission:::
ImageIO#getCacheInfo():::Returns the CacheInfo object associated with this ThreadGroup.:::context->AppContext->getAppContext->info->context->get->if->new->CacheInfo->context->put->return
ImageIO#getTempDir():::Returns the default temporary (cache) directory as defined by the java.io.tmpdir system property.:::a->new->GetPropertyAction->return->AccessController->doPrivileged
ImageIO#hasCachePermission():::Determines whether the caller has write access to the cache directory, stores the result in the CacheInfo object, and returns the decision:::hasPermission->getCacheInfo->getHasPermission->if->return->hasPermission->booleanValue->else->try->security->System->getSecurityManager->if->cachedir->getCacheDirectory->cachepath->if->cachedir->getPath->else->getTempDir->if->cachepath->isEmpty->getCacheInfo->setHasPermission->return->filepath->if->filepath->endsWith->security->new->FilePermission->checkPermission->catch->getCacheInfo->setHasPermission->return->finally->getCacheInfo->setHasPermission->return
ImageIO#setUseCache(boolean):::Sets a flag indicating whether a disk-based cache file should be used when creating ImageInputStreams and ImageOutputStreams:::getCacheInfo->setUseCache
ImageIO#getUseCache():::Returns the current value set by setUseCache, or true if no explicit setting has been made.:::return->getCacheInfo->getUseCache
ImageIO#setCacheDirectory(File):::Sets the directory where cache files are to be created:::if->cacheDirectory->isDirectory->throw->new->IllegalArgumentException->getCacheInfo->setCacheDirectory->getCacheInfo->setHasPermission
ImageIO#getCacheDirectory():::Returns the current value set by setCacheDirectory, or null if no explicit setting has been made.:::return->getCacheInfo->getCacheDirectory
ImageIO#createImageInputStream(Object):::Returns an ImageInputStream that will take its input from the given Object:::if->throw->new->IllegalArgumentException->iter->try->theRegistry->getServiceProviders->catch->return->finally->usecache->getUseCache->hasCachePermission->while->iter->hasNext->spi->iter->next->if->spi->getInputClass->isInstance->try->return->spi->getCacheDirectory->createInputStreamInstance->catch->throw->new->IIOException->finally->return
ImageIO#createImageOutputStream(Object):::Returns an ImageOutputStream that will send its output to the given Object:::if->throw->new->IllegalArgumentException->iter->try->theRegistry->getServiceProviders->catch->return->finally->usecache->getUseCache->hasCachePermission->while->iter->hasNext->spi->iter->next->if->spi->getOutputClass->isInstance->try->return->spi->getCacheDirectory->createOutputStreamInstance->catch->throw->new->IIOException->finally->return
ImageIO#getReaderWriterInfo(Class, SpiInfo)::: image o get reader writer info:::iter->try->theRegistry->getServiceProviders->catch->return->new->StringArr->finally->s->new->HashSet<>->while->iter->hasNext->spi->iter->next->info->spiInfo->info->if->Collections->addAll->return->s->s->size->new->StringArr->toArray
ImageIO#getReaderFormatNames():::Returns an array of Strings listing all of the informal format names understood by the current set of registered readers.:::return->getReaderWriterInfo
ImageIO#getReaderMIMETypes():::Returns an array of Strings listing all of the MIME types understood by the current set of registered readers.:::return->getReaderWriterInfo
ImageIO#getReaderFileSuffixes():::Returns an array of Strings listing all of the file suffixes associated with the formats understood by the current set of registered readers.:::return->getReaderWriterInfo
ImageIO.ImageReaderIterator#hasNext()::: image reader iterator has next:::return->iter->hasNext
ImageIO.ImageReaderIterator#next()::: image reader iterator next:::spi->try->iter->next->return->spi->createReaderInstance->catch->theRegistry->deregisterServiceProvider->finally->return
ImageIO.ImageReaderIterator#remove()::: image reader iterator remove:::throw->new->UnsupportedOperationException
ImageIO.CanDecodeInputFilter#filter(Object)::: can decode input filter filter:::try->spi->stream->if->canDecode->if->stream->mark->try->spi->canDecodeInput->catch->finally->if->stream->reset->return->catch->return->finally
ImageIO.CanEncodeImageAndFormatFilter#filter(Object)::: can encode image and format filter filter:::spi->return->Arrays->spi->getFormatNames->asList->contains->spi->canEncodeImage
ImageIO.ContainsFilter#filter(Object)::: contains filter filter:::try->return->method->invoke->contains->catch->return->finally
ImageIO#getImageReaders(Object):::Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode the supplied Object, typically an ImageInputStream:::if->throw->new->IllegalArgumentException->iter->try->theRegistry->new->CanDecodeInputFilter->getServiceProviders->catch->return->Collections->emptyIterator->finally->return->new->ImageReaderIterator
ImageIO#getImageReadersByFormatName(String):::Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode the named format.:::if->throw->new->IllegalArgumentException->iter->try->theRegistry->new->ContainsFilter->getServiceProviders->catch->return->Collections->emptyIterator->finally->return->new->ImageReaderIterator
ImageIO#getImageReadersBySuffix(String):::Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode files with the given suffix.:::if->throw->new->IllegalArgumentException->iter->try->theRegistry->new->ContainsFilter->getServiceProviders->catch->return->Collections->emptyIterator->finally->return->new->ImageReaderIterator
ImageIO#getImageReadersByMIMEType(String):::Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode files with the given MIME type.:::if->throw->new->IllegalArgumentException->iter->try->theRegistry->new->ContainsFilter->getServiceProviders->catch->return->Collections->emptyIterator->finally->return->new->ImageReaderIterator
ImageIO#getWriterFormatNames():::Returns an array of Strings listing all of the informal format names understood by the current set of registered writers.:::return->getReaderWriterInfo
ImageIO#getWriterMIMETypes():::Returns an array of Strings listing all of the MIME types understood by the current set of registered writers.:::return->getReaderWriterInfo
ImageIO#getWriterFileSuffixes():::Returns an array of Strings listing all of the file suffixes associated with the formats understood by the current set of registered writers.:::return->getReaderWriterInfo
ImageIO.ImageWriterIterator#hasNext()::: image writer iterator has next:::return->iter->hasNext
ImageIO.ImageWriterIterator#next()::: image writer iterator next:::spi->try->iter->next->return->spi->createWriterInstance->catch->theRegistry->deregisterServiceProvider->finally->return
ImageIO.ImageWriterIterator#remove()::: image writer iterator remove:::throw->new->UnsupportedOperationException
ImageIO#contains(String[], String)::: image o contains:::for->i->return
ImageIO#getImageWritersByFormatName(String):::Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode the named format.:::if->throw->new->IllegalArgumentException->iter->try->theRegistry->new->ContainsFilter->getServiceProviders->catch->return->Collections->emptyIterator->finally->return->new->ImageWriterIterator
ImageIO#getImageWritersBySuffix(String):::Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode files with the given suffix.:::if->throw->new->IllegalArgumentException->iter->try->theRegistry->new->ContainsFilter->getServiceProviders->catch->return->Collections->emptyIterator->finally->return->new->ImageWriterIterator
ImageIO#getImageWritersByMIMEType(String):::Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode files with the given MIME type.:::if->throw->new->IllegalArgumentException->iter->try->theRegistry->new->ContainsFilter->getServiceProviders->catch->return->Collections->emptyIterator->finally->return->new->ImageWriterIterator
ImageIO#getImageWriter(ImageReader):::Returns an ImageWriter corresponding to the given ImageReader, if there is one, or null if the plug-in for this ImageReader does not specify a corresponding ImageWriter, or if the given ImageReader is not registered:::if->throw->new->IllegalArgumentException->readerSpi->reader->getOriginatingProvider->if->readerSpiIter->try->theRegistry->getServiceProviders->catch->return->finally->while->readerSpiIter->hasNext->temp->readerSpiIter->next->if->temp->isOwnReader->break->if->return->writerNames->readerSpi->getImageWriterSpiNames->if->return->writerSpiClass->try->Class->ClassLoader->getSystemClassLoader->forName->catch->return->finally->writerSpi->theRegistry->getServiceProviderByClass->if->return->try->return->writerSpi->createWriterInstance->catch->theRegistry->deregisterServiceProvider->return->finally
ImageIO#getImageReader(ImageWriter):::Returns an ImageReader corresponding to the given ImageWriter, if there is one, or null if the plug-in for this ImageWriter does not specify a corresponding ImageReader, or if the given ImageWriter is not registered:::if->throw->new->IllegalArgumentException->writerSpi->writer->getOriginatingProvider->if->writerSpiIter->try->theRegistry->getServiceProviders->catch->return->finally->while->writerSpiIter->hasNext->temp->writerSpiIter->next->if->temp->isOwnWriter->break->if->return->readerNames->writerSpi->getImageReaderSpiNames->if->return->readerSpiClass->try->Class->ClassLoader->getSystemClassLoader->forName->catch->return->finally->readerSpi->theRegistry->getServiceProviderByClass->if->return->try->return->readerSpi->createReaderInstance->catch->theRegistry->deregisterServiceProvider->return->finally
ImageIO#getImageWriters(ImageTypeSpecifier, String):::Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode images of the given layout (specified using an ImageTypeSpecifier) in the given format.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->iter->try->theRegistry->new->CanEncodeImageAndFormatFilter->getServiceProviders->catch->return->Collections->emptyIterator->finally->return->new->ImageWriterIterator
ImageIO.ImageTranscoderIterator#hasNext()::: image transcoder iterator has next:::return->iter->hasNext
ImageIO.ImageTranscoderIterator#next()::: image transcoder iterator next:::spi->iter->next->return->spi->createTranscoderInstance
ImageIO.ImageTranscoderIterator#remove()::: image transcoder iterator remove:::throw->new->UnsupportedOperationException
ImageIO.TranscoderFilter#filter(Object)::: transcoder filter filter:::spi->readerName->spi->getReaderServiceProviderName->writerName->spi->getWriterServiceProviderName->return->readerName->equals->writerName->equals
ImageIO#getImageTranscoders(ImageReader, ImageWriter):::Returns an Iterator containing all currently registered ImageTranscoders that claim to be able to transcode between the metadata of the given ImageReader and ImageWriter.:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->readerSpi->reader->getOriginatingProvider->writerSpi->writer->getOriginatingProvider->filter->new->TranscoderFilter->iter->try->theRegistry->getServiceProviders->catch->return->Collections->emptyIterator->finally->return->new->ImageTranscoderIterator
ImageIO#read(File):::Returns a BufferedImage as the result of decoding a supplied File with an ImageReader chosen automatically from among those currently registered:::if->throw->new->IllegalArgumentException->if->input->canRead->throw->new->IIOException->stream->createImageInputStream->if->throw->new->IIOException->bi->read->if->stream->close->return
ImageIO#read(InputStream):::Returns a BufferedImage as the result of decoding a supplied InputStream with an ImageReader chosen automatically from among those currently registered:::if->throw->new->IllegalArgumentException->stream->createImageInputStream->if->throw->new->IIOException->bi->read->if->stream->close->return
ImageIO#read(URL):::Returns a BufferedImage as the result of decoding a supplied URL with an ImageReader chosen automatically from among those currently registered:::if->throw->new->IllegalArgumentException->istream->try->input->openStream->catch->throw->new->IIOException->finally->stream->createImageInputStream->if->istream->close->throw->new->IIOException->bi->try->read->if->stream->close->catch->finally->istream->close->return
ImageIO#read(ImageInputStream):::Returns a BufferedImage as the result of decoding a supplied ImageInputStream with an ImageReader chosen automatically from among those currently registered:::if->throw->new->IllegalArgumentException->iter->getImageReaders->if->iter->hasNext->return->reader->iter->next->param->reader->getDefaultReadParam->reader->setInput->bi->try->reader->read->catch->finally->reader->dispose->stream->close->return
ImageIO#write(RenderedImage, String, ImageOutputStream):::Writes an image using the an arbitrary ImageWriter that supports the given format to an ImageOutputStream:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->getWriter->doWrite
ImageIO#write(RenderedImage, String, File):::Writes an image using an arbitrary ImageWriter that supports the given format to a File:::if->throw->new->IllegalArgumentException->writer->getWriter->if->return->output->delete->stream->createImageOutputStream->if->throw->new->IIOException->try->return->doWrite->catch->finally->stream->close
ImageIO#write(RenderedImage, String, OutputStream):::Writes an image using an arbitrary ImageWriter that supports the given format to an OutputStream:::if->throw->new->IllegalArgumentException->stream->createImageOutputStream->if->throw->new->IIOException->try->return->getWriter->doWrite->catch->finally->stream->close
ImageIO#getWriter(RenderedImage, String):::Returns ImageWriter instance according to given rendered image and image format or null if there is no appropriate writer.:::type->ImageTypeSpecifier->createFromRenderedImage->iter->getImageWriters->if->iter->hasNext->return->iter->next->else->return
ImageIO#doWrite(RenderedImage, ImageWriter, ImageOutputStream):::Writes image to output stream  using given image writer.:::if->return->writer->setOutput->try->writer->write->catch->finally->writer->dispose->output->flush->return
ImageReader#getFormatName():::Returns a String identifying the format of the input source:::return->originatingProvider->getFormatNames
ImageReader#getOriginatingProvider():::Returns the ImageReaderSpi that was passed in on the constructor:::return
ImageReader#setInput(Object, boolean, boolean):::Sets the input source to use to the given ImageInputStream or other Object:::if->found->if->classes->originatingProvider->getInputTypes->for->i->else->if->if->throw->new->IllegalArgumentException
ImageReader#setInput(Object, boolean):::Sets the input source to use to the given ImageInputStream or other Object:::setInput
ImageReader#setInput(Object):::Sets the input source to use to the given ImageInputStream or other Object:::setInput
ImageReader#getInput():::Returns the ImageInputStream or other Object previously set as the input source:::return
ImageReader#isSeekForwardOnly():::Returns true if the current input source has been marked as seek forward only by passing true as the seekForwardOnly argument to the setInput method.:::return
ImageReader#isIgnoringMetadata():::Returns true if the current input source has been marked as allowing metadata to be ignored by passing true as the ignoreMetadata argument to the setInput method.:::return
ImageReader#getMinIndex():::Returns the lowest valid index for reading an image, thumbnail, or image metadata:::return
ImageReader#getAvailableLocales():::Returns an array of Locales that may be used to localize warning listeners and compression settings:::if->return->else->return->availableLocales->clone
ImageReader#setLocale(Locale):::Sets the current Locale of this ImageReader to the given value:::if->locales->getAvailableLocales->found->if->for->i->if->throw->new->IllegalArgumentException
ImageReader#getLocale():::Returns the currently set Locale, or null if none has been set.:::return
ImageReader#getNumImages(boolean):::Returns the number of images, not including thumbnails, available from the current input source:::
ImageReader#getWidth(int):::Returns the width in pixels of the given image within the input source:::
ImageReader#getHeight(int):::Returns the height in pixels of the given image within the input source:::
ImageReader#isRandomAccessEasy(int):::Returns true if the storage format of the given image places no inherent impediment on random access to pixels:::return
ImageReader#getAspectRatio(int):::Returns the aspect ratio of the given image (that is, its width divided by its height) as a float:::return->getWidth->getHeight
ImageReader#getRawImageType(int):::Returns an ImageTypeSpecifier indicating the SampleModel and ColorModel which most closely represents the "raw" internal format of the image:::return->getImageTypes->next
ImageReader#getImageTypes(int):::Returns an Iterator containing possible image types to which the given image may be decoded, in the form of ImageTypeSpecifierss:::
ImageReader#getDefaultReadParam():::Returns a default ImageReadParam object appropriate for this format:::return->new->ImageReadParam
ImageReader#getStreamMetadata():::Returns an IIOMetadata object representing the metadata associated with the input source as a whole (i.e., not associated with any particular image), or null if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available.:::
ImageReader#getStreamMetadata(String, Set):::Returns an IIOMetadata object representing the metadata associated with the input source as a whole (i.e., not associated with any particular image):::return->getMetadata
ImageReader#getMetadata(String, Set, boolean, int)::: image reader get metadata:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->metadata->getStreamMetadata->getImageMetadata->if->if->metadata->isStandardMetadataFormatSupported->formatName->equals->return->nativeName->metadata->getNativeMetadataFormatName->if->formatName->equals->return->extraNames->metadata->getExtraMetadataFormatNames->if->for->i->return
ImageReader#getImageMetadata(int):::Returns an IIOMetadata object containing metadata associated with the given image, or null if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available.:::
ImageReader#getImageMetadata(int, String, Set):::Returns an IIOMetadata object representing the metadata associated with the given image, or null if the reader does not support reading metadata or none is available:::return->getMetadata
ImageReader#read(int):::Reads the image indexed by imageIndex and returns it as a complete BufferedImage, using a default ImageReadParam:::return->read
ImageReader#read(int, ImageReadParam):::Reads the image indexed by imageIndex and returns it as a complete BufferedImage, using a supplied ImageReadParam:::
ImageReader#readAll(int, ImageReadParam):::Reads the image indexed by imageIndex and returns an IIOImage containing the image, thumbnails, and associated image metadata, using a supplied ImageReadParam:::if->getMinIndex->throw->new->IndexOutOfBoundsException->im->read->thumbnails->numThumbnails->getNumThumbnails->if->new->ArrayList<>->for->j->metadata->getImageMetadata->return->new->IIOImage
ImageReader#readAll(Iterator):::Returns an Iterator containing all the images, thumbnails, and metadata, starting at the index given by getMinIndex, from the input source in the form of IIOImage objects:::output->new->ArrayList<>->imageIndex->getMinIndex->processSequenceStarted->while->param->if->params->hasNext->o->params->next->if->if->else->throw->new->IllegalArgumentException->bi->try->read->catch->break->finally->thumbnails->numThumbnails->getNumThumbnails->if->new->ArrayList<>->for->j->metadata->getImageMetadata->im->new->IIOImage->output->add->processSequenceComplete->return->output->iterator
ImageReader#canReadRaster():::Returns true if this plug-in supports reading just a java.awt.image.Raster Raster of pixel data:::return
ImageReader#readRaster(int, ImageReadParam):::Returns a new Raster object containing the raw pixel data from the image stream, without any color conversion applied:::throw->new->UnsupportedOperationException
ImageReader#isImageTiled(int):::Returns true if the image is organized into tiles, that is, equal-sized non-overlapping rectangles:::return
ImageReader#getTileWidth(int):::Returns the width of a tile in the given image:::return->getWidth
ImageReader#getTileHeight(int):::Returns the height of a tile in the given image:::return->getHeight
ImageReader#getTileGridXOffset(int):::Returns the X coordinate of the upper-left corner of tile (0, 0) in the given image:::return
ImageReader#getTileGridYOffset(int):::Returns the Y coordinate of the upper-left corner of tile (0, 0) in the given image:::return
ImageReader#readTile(int, int, int):::Reads the tile indicated by the tileX and tileY arguments, returning it as a BufferedImage:::if->throw->new->IllegalArgumentException->return->read
ImageReader#readTileRaster(int, int, int):::Returns a new Raster object containing the raw pixel data from the tile, without any color conversion applied:::if->canReadRaster->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException->return->readRaster
ImageReader#readAsRenderedImage(int, ImageReadParam):::Returns a RenderedImage object that contains the contents of the image indexed by imageIndex:::return->read
ImageReader#readerSupportsThumbnails():::Returns true if the image format understood by this reader supports thumbnail preview images associated with it:::return
ImageReader#hasThumbnails(int):::Returns true if the given image has thumbnail preview images associated with it:::return->getNumThumbnails
ImageReader#getNumThumbnails(int):::Returns the number of thumbnail preview images associated with the given image:::return
ImageReader#getThumbnailWidth(int, int):::Returns the width of the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex:::return->readThumbnail->getWidth
ImageReader#getThumbnailHeight(int, int):::Returns the height of the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex:::return->readThumbnail->getHeight
ImageReader#readThumbnail(int, int):::Returns the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex as a BufferedImage:::throw->new->UnsupportedOperationException
ImageReader#abort():::Requests that any current read operation be aborted:::
ImageReader#abortRequested():::Returns true if a request to abort the current read operation has been made since the reader was instantiated or clearAbortRequest was called.:::return
ImageReader#clearAbortRequest():::Clears any previous abort request:::
ImageReader#addToList(List, T)::: image reader add to list:::if->new->ArrayList<>->l->add->return
ImageReader#removeFromList(List, T)::: image reader remove from list:::if->return->l->remove->if->l->size->return
ImageReader#addIIOReadWarningListener(IIOReadWarningListener):::Adds an IIOReadWarningListener to the list of registered warning listeners:::if->return->addToList->getLocale->addToList
ImageReader#removeIIOReadWarningListener(IIOReadWarningListener):::Removes an IIOReadWarningListener from the list of registered error listeners:::if->return->index->warningListeners->indexOf->if->warningListeners->remove->warningLocales->remove->if->warningListeners->size
ImageReader#removeAllIIOReadWarningListeners():::Removes all currently registered IIOReadWarningListener objects:::
ImageReader#addIIOReadProgressListener(IIOReadProgressListener):::Adds an IIOReadProgressListener to the list of registered progress listeners:::if->return->addToList
ImageReader#removeIIOReadProgressListener(IIOReadProgressListener):::Removes an IIOReadProgressListener from the list of registered progress listeners:::if->return->removeFromList
ImageReader#removeAllIIOReadProgressListeners():::Removes all currently registered IIOReadProgressListener objects:::
ImageReader#addIIOReadUpdateListener(IIOReadUpdateListener):::Adds an IIOReadUpdateListener to the list of registered update listeners:::if->return->addToList
ImageReader#removeIIOReadUpdateListener(IIOReadUpdateListener):::Removes an IIOReadUpdateListener from the list of registered update listeners:::if->return->removeFromList
ImageReader#removeAllIIOReadUpdateListeners():::Removes all currently registered IIOReadUpdateListener objects:::
ImageReader#processSequenceStarted(int):::Broadcasts the start of an sequence of image reads to all registered IIOReadProgressListeners by calling their sequenceStarted method:::if->return->numListeners->progressListeners->size->for->i
ImageReader#processSequenceComplete():::Broadcasts the completion of an sequence of image reads to all registered IIOReadProgressListeners by calling their sequenceComplete method:::if->return->numListeners->progressListeners->size->for->i
ImageReader#processImageStarted(int):::Broadcasts the start of an image read to all registered IIOReadProgressListeners by calling their imageStarted method:::if->return->numListeners->progressListeners->size->for->i
ImageReader#processImageProgress(float):::Broadcasts the current percentage of image completion to all registered IIOReadProgressListeners by calling their imageProgress method:::if->return->numListeners->progressListeners->size->for->i
ImageReader#processImageComplete():::Broadcasts the completion of an image read to all registered IIOReadProgressListeners by calling their imageComplete method:::if->return->numListeners->progressListeners->size->for->i
ImageReader#processThumbnailStarted(int, int):::Broadcasts the start of a thumbnail read to all registered IIOReadProgressListeners by calling their thumbnailStarted method:::if->return->numListeners->progressListeners->size->for->i
ImageReader#processThumbnailProgress(float):::Broadcasts the current percentage of thumbnail completion to all registered IIOReadProgressListeners by calling their thumbnailProgress method:::if->return->numListeners->progressListeners->size->for->i
ImageReader#processThumbnailComplete():::Broadcasts the completion of a thumbnail read to all registered IIOReadProgressListeners by calling their thumbnailComplete method:::if->return->numListeners->progressListeners->size->for->i
ImageReader#processReadAborted():::Broadcasts that the read has been aborted to all registered IIOReadProgressListeners by calling their readAborted method:::if->return->numListeners->progressListeners->size->for->i
ImageReader#processPassStarted(BufferedImage, int, int, int, int, int, int, int, int[]):::Broadcasts the beginning of a progressive pass to all registered IIOReadUpdateListeners by calling their passStarted method:::if->return->numListeners->updateListeners->size->for->i
ImageReader#processImageUpdate(BufferedImage, int, int, int, int, int, int, int[]):::Broadcasts the update of a set of samples to all registered IIOReadUpdateListeners by calling their imageUpdate method:::if->return->numListeners->updateListeners->size->for->i
ImageReader#processPassComplete(BufferedImage):::Broadcasts the end of a progressive pass to all registered IIOReadUpdateListeners by calling their passComplete method:::if->return->numListeners->updateListeners->size->for->i
ImageReader#processThumbnailPassStarted(BufferedImage, int, int, int, int, int, int, int, int[]):::Broadcasts the beginning of a thumbnail progressive pass to all registered IIOReadUpdateListeners by calling their thumbnailPassStarted method:::if->return->numListeners->updateListeners->size->for->i
ImageReader#processThumbnailUpdate(BufferedImage, int, int, int, int, int, int, int[]):::Broadcasts the update of a set of samples in a thumbnail image to all registered IIOReadUpdateListeners by calling their thumbnailUpdate method:::if->return->numListeners->updateListeners->size->for->i
ImageReader#processThumbnailPassComplete(BufferedImage):::Broadcasts the end of a thumbnail progressive pass to all registered IIOReadUpdateListeners by calling their thumbnailPassComplete method:::if->return->numListeners->updateListeners->size->for->i
ImageReader#processWarningOccurred(String):::Broadcasts a warning message to all registered IIOReadWarningListeners by calling their warningOccurred method:::if->return->if->throw->new->IllegalArgumentException->numListeners->warningListeners->size->for->i
ImageReader#processWarningOccurred(String, String):::Broadcasts a localized warning message to all registered IIOReadWarningListeners by calling their warningOccurred method with a string taken from a ResourceBundle:::if->return->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->numListeners->warningListeners->size->for->i
ImageReader#reset():::Restores the ImageReader to its initial state:::setInput->setLocale->removeAllIIOReadUpdateListeners->removeAllIIOReadProgressListeners->removeAllIIOReadWarningListeners->clearAbortRequest
ImageReader#dispose():::Allows any resources held by this object to be released:::
ImageReader#getSourceRegion(ImageReadParam, int, int):::A utility method that may be used by readers to compute the region of the source image that should be read, taking into account any source region and subsampling offset settings in the supplied ImageReadParam:::sourceRegion->new->Rectangle->if->region->param->getSourceRegion->if->sourceRegion->intersection->subsampleXOffset->param->getSubsamplingXOffset->subsampleYOffset->param->getSubsamplingYOffset->return
ImageReader#computeRegions(ImageReadParam, int, int, BufferedImage, Rectangle, Rectangle):::Computes the source region of interest and the destination region of interest, taking the width and height of the source image, an optional destination image, and an optional ImageReadParam into account:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->srcRegion->setBounds->destRegion->setBounds->periodX->periodY->gridX->gridY->if->paramSrcRegion->param->getSourceRegion->if->srcRegion->srcRegion->intersection->setBounds->param->getSourceXSubsampling->param->getSourceYSubsampling->param->getSubsamplingXOffset->param->getSubsamplingYOffset->srcRegion->translate->destRegion->param->getDestinationOffset->setLocation->if->delta->if->delta->subsampledWidth->subsampledHeight->if->destImageRect->image->getWidth->image->getHeight->new->Rectangle->destRegion->destRegion->intersection->setBounds->if->destRegion->isEmpty->throw->new->IllegalArgumentException->deltaX->image->getWidth->if->deltaY->image->getHeight->if->if->srcRegion->isEmpty->destRegion->isEmpty->throw->new->IllegalArgumentException
ImageReader#checkReadParamBandSettings(ImageReadParam, int, int):::A utility method that may be used by readers to test the validity of the source and destination band settings of an ImageReadParam:::srcBands->dstBands->if->param->getSourceBands->param->getDestinationBands->paramSrcBandLength->paramDstBandLength->if->throw->new->IllegalArgumentException->if->for->i->if->for->i
ImageReader#getDestination(ImageReadParam, Iterator, int, int):::Returns the BufferedImage to which decoded pixel data should be written:::if->imageTypes->hasNext->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->dest->imageType->if->param->getDestination->if->return->param->getDestinationType->if->o->imageTypes->next->if->throw->new->IllegalArgumentException->else->foundIt->while->imageTypes->hasNext->type->imageTypes->next->if->type->equals->break->if->throw->new->IIOException->srcRegion->new->Rectangle->destRegion->new->Rectangle->computeRegions->destWidth->destHeight->return->imageType->createBufferedImage
ImageReadParam#setDestinationType(ImageTypeSpecifier)::: image read param set destination type:::super->setDestinationType->setDestination
ImageReadParam#setDestination(BufferedImage):::Supplies a BufferedImage to be used as the destination for decoded pixel data:::
ImageReadParam#getDestination():::Returns the BufferedImage currently set by the setDestination method, or null if none is set.:::return
ImageReadParam#setDestinationBands(int[]):::Sets the indices of the destination bands where data will be placed:::if->else->numBands->for->i->destinationBands->clone
ImageReadParam#getDestinationBands():::Returns the set of band indices where data will be placed:::if->return->else->return->destinationBands->clone
ImageReadParam#canSetSourceRenderSize():::Returns true if this reader allows the source image to be rendered at an arbitrary size as part of the decoding process, by means of the setSourceRenderSize method:::return
ImageReadParam#setSourceRenderSize(Dimension):::If the image is able to be rendered at an arbitrary size, sets the source width and height to the supplied values:::if->canSetSourceRenderSize->throw->new->UnsupportedOperationException->if->else->if->throw->new->IllegalArgumentException->size->clone
ImageReadParam#getSourceRenderSize():::Returns the width and height of the source image as it will be rendered during decoding, if they have been set via the setSourceRenderSize method:::return->sourceRenderSize->clone
ImageReadParam#setSourceProgressivePasses(int, int):::Sets the range of progressive passes that will be decoded:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
ImageReadParam#getSourceMinProgressivePass():::Returns the index of the first progressive pass that will be decoded:::return
ImageReadParam#getSourceMaxProgressivePass():::If getSourceNumProgressivePasses is equal to Integer.MAX_VALUE, returns Integer.MAX_VALUE:::if->return->else->return
ImageReadParam#getSourceNumProgressivePasses():::Returns the number of the progressive passes that will be decoded:::return
ImageTranscoder#convertStreamMetadata(IIOMetadata, ImageWriteParam):::Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding:::
ImageTranscoder#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam):::Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding:::
ImageTypeSpecifier#createPacked(ColorSpace, int, int, int, int, int, boolean):::Returns a specifier for a packed image format that will use a DirectColorModel and a packed SampleModel to store each pixel packed into in a single byte, short, or int.:::return->new->ImageTypeSpecifier.Packed
ImageTypeSpecifier#createComponentCM(ColorSpace, int, int, boolean, boolean)::: image type specifier create component m:::transparency->numBits->new->intArr->bits->DataBuffer->getDataTypeSize->for->i->return->new->ComponentColorModel
ImageTypeSpecifier.Interleaved#equals(Object)::: interleaved equals:::if->return->that->if->equals->return->for->i->return
ImageTypeSpecifier.Interleaved#hashCode()::: interleaved hash code:::return->super->hashCode
ImageTypeSpecifier#createInterleaved(ColorSpace, int[], int, boolean, boolean):::Returns a specifier for an interleaved image format that will use a ComponentColorModel and a PixelInterleavedSampleModel to store each pixel component in a separate byte, short, or int.:::return->new->ImageTypeSpecifier.Interleaved
ImageTypeSpecifier.Banded#equals(Object)::: banded equals:::if->return->that->if->equals->return->for->i->for->i->return
ImageTypeSpecifier.Banded#hashCode()::: banded hash code:::return->super->hashCode
ImageTypeSpecifier#createBanded(ColorSpace, int[], int[], int, boolean, boolean):::Returns a specifier for a banded image format that will use a ComponentColorModel and a BandedSampleModel to store each channel in a separate array.:::return->new->ImageTypeSpecifier.Banded
ImageTypeSpecifier#createGrayscale(int, int, boolean):::Returns a specifier for a grayscale image format that will pack pixels of the given bit depth into array elements of the specified data type.:::return->new->ImageTypeSpecifier.Grayscale
ImageTypeSpecifier#createGrayscale(int, int, boolean, boolean):::Returns a specifier for a grayscale plus alpha image format that will pack pixels of the given bit depth into array elements of the specified data type.:::return->new->ImageTypeSpecifier.Grayscale
ImageTypeSpecifier#createIndexed(byte[], byte[], byte[], byte[], int, int):::Returns a specifier for an indexed-color image format that will pack index values of the given bit depth into array elements of the specified data type.:::return->new->ImageTypeSpecifier.Indexed
ImageTypeSpecifier#createFromBufferedImageType(int):::Returns an ImageTypeSpecifier that encodes one of the standard BufferedImage types (other than TYPE_CUSTOM).:::if->return->getSpecifier->else->if->throw->new->IllegalArgumentException->else->throw->new->IllegalArgumentException
ImageTypeSpecifier#createFromRenderedImage(RenderedImage):::Returns an ImageTypeSpecifier that encodes the layout of a RenderedImage (which may be a BufferedImage).:::if->throw->new->IllegalArgumentException->if->bufferedImageType->getType->if->return->getSpecifier->return->new->ImageTypeSpecifier
ImageTypeSpecifier#getBufferedImageType():::Returns an int containing one of the enumerated constant values describing image formats from BufferedImage.:::bi->createBufferedImage->return->bi->getType
ImageTypeSpecifier#getNumComponents():::Return the number of color components specified by this object:::return->colorModel->getNumComponents
ImageTypeSpecifier#getNumBands():::Return the number of bands specified by this object:::return->sampleModel->getNumBands
ImageTypeSpecifier#getBitsPerBand(int):::Return the number of bits used to represent samples of the given band.:::if->getNumBands->throw->new->IllegalArgumentException->return->sampleModel->getSampleSize
ImageTypeSpecifier#getSampleModel():::Returns a SampleModel based on the settings encapsulated within this object:::return
ImageTypeSpecifier#getSampleModel(int, int):::Returns a SampleModel based on the settings encapsulated within this object:::if->throw->new->IllegalArgumentException->return->sampleModel->createCompatibleSampleModel
ImageTypeSpecifier#getColorModel():::Returns the ColorModel specified by this object.:::return
ImageTypeSpecifier#createBufferedImage(int, int):::Creates a BufferedImage with a given width and height according to the specification embodied in this object.:::try->sampleModel->getSampleModel->raster->Raster->new->Point->createWritableRaster->return->colorModel->isAlphaPremultiplied->new->Hashtable<>->new->BufferedImage->catch->throw->new->IllegalArgumentException->finally
ImageTypeSpecifier#equals(Object):::Returns true if the given Object is an ImageTypeSpecifier and has a SampleModel and ColorModel that are equal to those of this object.:::if->return->that->return->colorModel->equals->sampleModel->equals
ImageTypeSpecifier#hashCode():::Returns the hash code for this ImageTypeSpecifier.:::return->colorModel->hashCode->sampleModel->hashCode
ImageTypeSpecifier#getSpecifier(int)::: image type specifier get specifier:::if->createSpecifier->return
ImageTypeSpecifier#createSpecifier(int)::: image type specifier create specifier:::switch->return->createPacked->return->createPacked->return->createPacked->return->createPacked->return->new->intArr->createInterleaved->return->new->intArr->createInterleaved->return->new->intArr->createInterleaved->return->createPacked->return->createPacked->return->createGrayscale->return->createGrayscale->return->createGrayscale->bi->new->BufferedImage->icm->bi->getColorModel->mapSize->icm->getMapSize->redLUT->new->byteArr->greenLUT->new->byteArr->blueLUT->new->byteArr->alphaLUT->new->byteArr->icm->getReds->icm->getGreens->icm->getBlues->icm->getAlphas->return->createIndexed->throw->new->IllegalArgumentException
ImageWriteParam#clonePreferredTileSizes(Dimension[])::: image write param clone preferred tile sizes:::if->return->temp->new->DimensionArr->for->i->return
ImageWriteParam#getLocale():::Returns the currently set Locale, or null if only a default Locale is supported.:::return
ImageWriteParam#canWriteTiles():::Returns true if the writer can perform tiling while writing:::return
ImageWriteParam#canOffsetTiles():::Returns true if the writer can perform tiling with non-zero grid offsets while writing:::return
ImageWriteParam#setTilingMode(int):::Determines whether the image will be tiled in the output stream and, if it will, how the tiling parameters will be determined:::if->canWriteTiles->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException->if->unsetTiling
ImageWriteParam#getTilingMode():::Returns the current tiling mode, if tiling is supported:::if->canWriteTiles->throw->new->UnsupportedOperationException->return
ImageWriteParam#getPreferredTileSizes():::Returns an array of Dimensions indicating the legal size ranges for tiles as they will be encoded in the output file or stream:::if->canWriteTiles->throw->new->UnsupportedOperationException->return->clonePreferredTileSizes
ImageWriteParam#setTiling(int, int, int, int):::Specifies that the image should be tiled in the output stream:::if->canWriteTiles->throw->new->UnsupportedOperationException->if->getTilingMode->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->tilesOffset->if->canOffsetTiles->throw->new->UnsupportedOperationException->if->ok->for->i->if->throw->new->IllegalArgumentException
ImageWriteParam#unsetTiling():::Removes any previous tile grid parameters specified by calls to setTiling:::if->canWriteTiles->throw->new->UnsupportedOperationException->if->getTilingMode->throw->new->IllegalStateException
ImageWriteParam#getTileWidth():::Returns the width of each tile in an image as it will be written to the output stream:::if->canWriteTiles->throw->new->UnsupportedOperationException->if->getTilingMode->throw->new->IllegalStateException->if->throw->new->IllegalStateException->return
ImageWriteParam#getTileHeight():::Returns the height of each tile in an image as it will be written to the output stream:::if->canWriteTiles->throw->new->UnsupportedOperationException->if->getTilingMode->throw->new->IllegalStateException->if->throw->new->IllegalStateException->return
ImageWriteParam#getTileGridXOffset():::Returns the horizontal tile grid offset of an image as it will be written to the output stream:::if->canWriteTiles->throw->new->UnsupportedOperationException->if->getTilingMode->throw->new->IllegalStateException->if->throw->new->IllegalStateException->return
ImageWriteParam#getTileGridYOffset():::Returns the vertical tile grid offset of an image as it will be written to the output stream:::if->canWriteTiles->throw->new->UnsupportedOperationException->if->getTilingMode->throw->new->IllegalStateException->if->throw->new->IllegalStateException->return
ImageWriteParam#canWriteProgressive():::Returns true if the writer can write out images as a series of passes of progressively increasing quality.:::return
ImageWriteParam#setProgressiveMode(int):::Specifies that the writer is to write the image out in a progressive mode such that the stream will contain a series of scans of increasing quality:::if->canWriteProgressive->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException
ImageWriteParam#getProgressiveMode():::Returns the current mode for writing the stream in a progressive manner.:::if->canWriteProgressive->throw->new->UnsupportedOperationException->return
ImageWriteParam#canWriteCompressed():::Returns true if this writer supports compression.:::return
ImageWriteParam#setCompressionMode(int):::Specifies whether compression is to be performed, and if so how compression parameters are to be determined:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->throw->new->IllegalArgumentException->if->unsetCompression
ImageWriteParam#getCompressionMode():::Returns the current compression mode, if compression is supported.:::if->canWriteCompressed->throw->new->UnsupportedOperationException->return
ImageWriteParam#getCompressionTypes():::Returns a list of available compression types, as an array or Strings, or null if a compression type may not be chosen using these interfaces:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->return->return->compressionTypes->clone
ImageWriteParam#setCompressionType(String):::Sets the compression type to one of the values indicated by getCompressionTypes:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException->legalTypes->getCompressionTypes->if->throw->new->UnsupportedOperationException->if->found->if->for->i->if->throw->new->IllegalArgumentException
ImageWriteParam#getCompressionType():::Returns the currently set compression type, or null if none has been set:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException->return
ImageWriteParam#unsetCompression():::Removes any previous compression type and quality settings:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException
ImageWriteParam#getLocalizedCompressionTypeName():::Returns a localized version of the name of the current compression type, using the Locale returned by getLocale:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException->if->getCompressionType->throw->new->IllegalStateException->return->getCompressionType
ImageWriteParam#isCompressionLossless():::Returns true if the current compression type provides lossless compression:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException->if->getCompressionTypes->getCompressionType->throw->new->IllegalStateException->return
ImageWriteParam#setCompressionQuality(float):::Sets the compression quality to a value between 0 and 1:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException->if->getCompressionTypes->getCompressionType->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException
ImageWriteParam#getCompressionQuality():::Returns the current compression quality setting:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException->if->getCompressionTypes->getCompressionType->throw->new->IllegalStateException->return
ImageWriteParam#getBitRate(float):::Returns a float indicating an estimate of the number of bits of output data for each bit of input image data at the given quality level:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException->if->getCompressionTypes->getCompressionType->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->return
ImageWriteParam#getCompressionQualityDescriptions():::Returns an array of Strings that may be used along with getCompressionQualityValues as part of a user interface for setting or displaying the compression quality level:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException->if->getCompressionTypes->getCompressionType->throw->new->IllegalStateException->return
ImageWriteParam#getCompressionQualityValues():::Returns an array of floats that may be used along with getCompressionQualityDescriptions as part of a user interface for setting or displaying the compression quality level:::if->canWriteCompressed->throw->new->UnsupportedOperationException->if->getCompressionMode->throw->new->IllegalStateException->if->getCompressionTypes->getCompressionType->throw->new->IllegalStateException->return
ImageWriter#getOriginatingProvider():::Returns the ImageWriterSpi object that created this ImageWriter, or null if this object was not created through the IIORegistry:::return
ImageWriter#setOutput(Object):::Sets the destination to the given ImageOutputStream or other Object:::if->provider->getOriginatingProvider->if->classes->provider->getOutputTypes->found->for->i->if->throw->new->IllegalArgumentException
ImageWriter#getOutput():::Returns the ImageOutputStream or other Object set by the most recent call to the setOutput method:::return
ImageWriter#getAvailableLocales():::Returns an array of Locales that may be used to localize warning listeners and compression settings:::return->availableLocales->clone
ImageWriter#setLocale(Locale):::Sets the current Locale of this ImageWriter to the given value:::if->locales->getAvailableLocales->found->if->for->i->if->throw->new->IllegalArgumentException
ImageWriter#getLocale():::Returns the currently set Locale, or null if none has been set:::return
ImageWriter#getDefaultWriteParam():::Returns a new ImageWriteParam object of the appropriate type for this file format containing default values, that is, those values that would be used if no ImageWriteParam object were specified:::return->getLocale->new->ImageWriteParam
ImageWriter#getDefaultStreamMetadata(ImageWriteParam):::Returns an IIOMetadata object containing default values for encoding a stream of images:::
ImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam):::Returns an IIOMetadata object containing default values for encoding an image of the given type:::
ImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)::: image writer convert stream metadata:::
ImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)::: image writer convert image metadata:::
ImageWriter#getNumThumbnailsSupported(ImageTypeSpecifier, ImageWriteParam, IIOMetadata, IIOMetadata):::Returns the number of thumbnails supported by the format being written, given the image type and any additional write parameters and metadata objects that will be used during encoding:::return
ImageWriter#getPreferredThumbnailSizes(ImageTypeSpecifier, ImageWriteParam, IIOMetadata, IIOMetadata):::Returns an array of Dimensions indicating the legal size ranges for thumbnail images as they will be encoded in the output file or stream:::return
ImageWriter#canWriteRasters():::Returns true if the methods that take an IIOImage parameter are capable of dealing with a Raster (as opposed to RenderedImage) source image:::return
ImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam):::Appends a complete image stream containing a single image and associated stream and image metadata and thumbnails to the output:::
ImageWriter#write(IIOImage):::Appends a complete image stream containing a single image with default metadata and thumbnails to the output:::write
ImageWriter#write(RenderedImage):::Appends a complete image stream consisting of a single image with default metadata and thumbnails to the output:::new->IIOImage->write
ImageWriter#unsupported()::: image writer unsupported:::if->getOutput->throw->new->IllegalStateException->throw->new->UnsupportedOperationException
ImageWriter#canWriteSequence():::Returns true if the writer is able to append an image to an image stream that already contains header information and possibly prior images:::return
ImageWriter#prepareWriteSequence(IIOMetadata):::Prepares a stream to accept a series of subsequent writeToSequence calls, using the provided stream metadata object:::unsupported
ImageWriter#writeToSequence(IIOImage, ImageWriteParam):::Appends a single image and possibly associated metadata and thumbnails, to the output:::unsupported
ImageWriter#endWriteSequence():::Completes the writing of a sequence of images begun with prepareWriteSequence:::unsupported
ImageWriter#canReplaceStreamMetadata():::Returns true if it is possible to replace the stream metadata already present in the output:::if->getOutput->throw->new->IllegalStateException->return
ImageWriter#replaceStreamMetadata(IIOMetadata):::Replaces the stream metadata in the output with new information:::unsupported
ImageWriter#canReplaceImageMetadata(int):::Returns true if it is possible to replace the image metadata associated with an existing image with index imageIndex:::if->getOutput->throw->new->IllegalStateException->return
ImageWriter#replaceImageMetadata(int, IIOMetadata):::Replaces the image metadata associated with an existing image:::unsupported
ImageWriter#canInsertImage(int):::Returns true if the writer supports the insertion of a new image at the given index:::if->getOutput->throw->new->IllegalStateException->return
ImageWriter#writeInsert(int, IIOImage, ImageWriteParam):::Inserts a new image into an existing image stream:::unsupported
ImageWriter#canRemoveImage(int):::Returns true if the writer supports the removal of an existing image at the given index:::if->getOutput->throw->new->IllegalStateException->return
ImageWriter#removeImage(int):::Removes an image from the stream:::unsupported
ImageWriter#canWriteEmpty():::Returns true if the writer supports the writing of a complete image stream consisting of a single image with undefined pixel values and associated metadata and thumbnails to the output:::if->getOutput->throw->new->IllegalStateException->return
ImageWriter#prepareWriteEmpty(IIOMetadata, ImageTypeSpecifier, int, int, IIOMetadata, List, ImageWriteParam):::Begins the writing of a complete image stream, consisting of a single image with undefined pixel values and associated metadata and thumbnails, to the output:::unsupported
ImageWriter#endWriteEmpty():::Completes the writing of a new image that was begun with a prior call to prepareWriteEmpty:::if->getOutput->throw->new->IllegalStateException->throw->new->IllegalStateException
ImageWriter#canInsertEmpty(int):::Returns true if the writer supports the insertion of a new, empty image at the given index:::if->getOutput->throw->new->IllegalStateException->return
ImageWriter#prepareInsertEmpty(int, ImageTypeSpecifier, int, int, IIOMetadata, List, ImageWriteParam):::Begins the insertion of a new image with undefined pixel values into an existing image stream:::unsupported
ImageWriter#endInsertEmpty():::Completes the insertion of a new image that was begun with a prior call to prepareInsertEmpty:::unsupported
ImageWriter#canReplacePixels(int):::Returns true if the writer allows pixels of the given image to be replaced using the replacePixels methods:::if->getOutput->throw->new->IllegalStateException->return
ImageWriter#prepareReplacePixels(int, Rectangle):::Prepares the writer to handle a series of calls to the replacePixels methods:::unsupported
ImageWriter#replacePixels(RenderedImage, ImageWriteParam):::Replaces a portion of an image already present in the output with a portion of the given image:::unsupported
ImageWriter#replacePixels(Raster, ImageWriteParam):::Replaces a portion of an image already present in the output with a portion of the given Raster:::unsupported
ImageWriter#endReplacePixels():::Terminates a sequence of calls to replacePixels:::unsupported
ImageWriter#abort():::Requests that any current write operation be aborted:::
ImageWriter#abortRequested():::Returns true if a request to abort the current write operation has been made since the writer was instantiated or clearAbortRequest was called.:::return
ImageWriter#clearAbortRequest():::Clears any previous abort request:::
ImageWriter#addIIOWriteWarningListener(IIOWriteWarningListener):::Adds an IIOWriteWarningListener to the list of registered warning listeners:::if->return->ImageReader->addToList->ImageReader->getLocale->addToList
ImageWriter#removeIIOWriteWarningListener(IIOWriteWarningListener):::Removes an IIOWriteWarningListener from the list of registered warning listeners:::if->return->index->warningListeners->indexOf->if->warningListeners->remove->warningLocales->remove->if->warningListeners->size
ImageWriter#removeAllIIOWriteWarningListeners():::Removes all currently registered IIOWriteWarningListener objects:::
ImageWriter#addIIOWriteProgressListener(IIOWriteProgressListener):::Adds an IIOWriteProgressListener to the list of registered progress listeners:::if->return->ImageReader->addToList
ImageWriter#removeIIOWriteProgressListener(IIOWriteProgressListener):::Removes an IIOWriteProgressListener from the list of registered progress listeners:::if->return->ImageReader->removeFromList
ImageWriter#removeAllIIOWriteProgressListeners():::Removes all currently registered IIOWriteProgressListener objects:::
ImageWriter#processImageStarted(int):::Broadcasts the start of an image write to all registered IIOWriteProgressListeners by calling their imageStarted method:::if->return->numListeners->progressListeners->size->for->i
ImageWriter#processImageProgress(float):::Broadcasts the current percentage of image completion to all registered IIOWriteProgressListeners by calling their imageProgress method:::if->return->numListeners->progressListeners->size->for->i
ImageWriter#processImageComplete():::Broadcasts the completion of an image write to all registered IIOWriteProgressListeners by calling their imageComplete method:::if->return->numListeners->progressListeners->size->for->i
ImageWriter#processThumbnailStarted(int, int):::Broadcasts the start of a thumbnail write to all registered IIOWriteProgressListeners by calling their thumbnailStarted method:::if->return->numListeners->progressListeners->size->for->i
ImageWriter#processThumbnailProgress(float):::Broadcasts the current percentage of thumbnail completion to all registered IIOWriteProgressListeners by calling their thumbnailProgress method:::if->return->numListeners->progressListeners->size->for->i
ImageWriter#processThumbnailComplete():::Broadcasts the completion of a thumbnail write to all registered IIOWriteProgressListeners by calling their thumbnailComplete method:::if->return->numListeners->progressListeners->size->for->i
ImageWriter#processWriteAborted():::Broadcasts that the write has been aborted to all registered IIOWriteProgressListeners by calling their writeAborted method:::if->return->numListeners->progressListeners->size->for->i
ImageWriter#processWarningOccurred(int, String):::Broadcasts a warning message to all registered IIOWriteWarningListeners by calling their warningOccurred method:::if->return->if->throw->new->IllegalArgumentException->numListeners->warningListeners->size->for->i
ImageWriter#processWarningOccurred(int, String, String):::Broadcasts a localized warning message to all registered IIOWriteWarningListeners by calling their warningOccurred method with a string taken from a ResourceBundle:::if->return->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->numListeners->warningListeners->size->for->i
ImageWriter#reset():::Restores the ImageWriter to its initial state:::setOutput->setLocale->removeAllIIOWriteWarningListeners->removeAllIIOWriteProgressListeners->clearAbortRequest
ImageWriter#dispose():::Allows any resources held by this object to be released:::

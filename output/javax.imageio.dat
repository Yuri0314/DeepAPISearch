javax.imageio.IIOImage#getRenderedImage()->RenderedImage:::Returns the currently set RenderedImage, or null if only a Raster is available.
javax.imageio.IIOImage#setRenderedImage(RenderedImage)->void:::Sets the current RenderedImage
javax.imageio.IIOImage#hasRaster()->boolean:::Returns true if this IIOImage stores a Raster rather than a RenderedImage.
javax.imageio.IIOImage#getRaster()->Raster:::Returns the currently set Raster, or null if only a RenderedImage is available.
javax.imageio.IIOImage#setRaster(Raster)->void:::Sets the current Raster
javax.imageio.IIOImage#getNumThumbnails()->int:::Returns the number of thumbnails stored in this IIOImage.
javax.imageio.IIOImage#getThumbnail(int)->BufferedImage:::Returns a thumbnail associated with the main image.
javax.imageio.IIOImage#getThumbnails()->List:::Returns the current List of thumbnail BufferedImages, or null if none is set
javax.imageio.IIOImage#setThumbnails(List)->void:::Sets the list of thumbnails to a new List of BufferedImages, or to null
javax.imageio.IIOImage#getMetadata()->IIOMetadata:::Returns a reference to the current IIOMetadata object, or null is none is set.
javax.imageio.IIOImage#setMetadata(IIOMetadata)->void:::Sets the IIOMetadata to a new object, or null.
javax.imageio.IIOParam#setSourceRegion(Rectangle)->void:::Sets the source region of interest
javax.imageio.IIOParam#getSourceRegion()->Rectangle:::Returns the source region to be used
javax.imageio.IIOParam#setSourceSubsampling(int, int, int, int)->void:::Specifies a decimation subsampling to apply on I/O
javax.imageio.IIOParam#getSourceXSubsampling()->int:::Returns the number of source columns to advance for each pixel
javax.imageio.IIOParam#getSourceYSubsampling()->int:::Returns the number of rows to advance for each pixel
javax.imageio.IIOParam#getSubsamplingXOffset()->int:::Returns the horizontal offset of the subsampling grid
javax.imageio.IIOParam#getSubsamplingYOffset()->int:::Returns the vertical offset of the subsampling grid
javax.imageio.IIOParam#setSourceBands(int[])->void:::Sets the indices of the source bands to be used
javax.imageio.IIOParam#getSourceBands()->int[]:::Returns the set of source bands to be used
javax.imageio.IIOParam#setDestinationType(ImageTypeSpecifier)->void:::Sets the desired image type for the destination image, using an ImageTypeSpecifier
javax.imageio.IIOParam#getDestinationType()->ImageTypeSpecifier:::Returns the type of image to be returned by the read, if one was set by a call to setDestination(ImageTypeSpecifier), as an ImageTypeSpecifier
javax.imageio.IIOParam#setDestinationOffset(Point)->void:::Specifies the offset in the destination image at which future decoded pixels are to be placed, when reading, or where a region will be written, when writing
javax.imageio.IIOParam#getDestinationOffset()->Point:::Returns the offset in the destination image at which pixels are to be placed
javax.imageio.IIOParam#setController(IIOParamController)->void:::Sets the IIOParamController to be used to provide settings for this IIOParam object when the activateController method is called, overriding any default controller
javax.imageio.IIOParam#getController()->IIOParamController:::Returns whatever IIOParamController is currently installed
javax.imageio.IIOParam#getDefaultController()->IIOParamController:::Returns the default IIOParamController, if there is one, regardless of the currently installed controller
javax.imageio.IIOParam#hasController()->boolean:::Returns true if there is a controller installed for this IIOParam object
javax.imageio.IIOParam#activateController()->boolean:::Activates the installed IIOParamController for this IIOParam object and returns the resulting value
javax.imageio.IIOParamController#activate(IIOParam)->boolean:::Activates the controller
javax.imageio.ImageIO#scanForPlugins()->void:::Scans for plug-ins on the application class path, loads their service provider classes, and registers a service provider instance for each one found with the IIORegistry
javax.imageio.ImageIO.CacheInfo#getUseCache()->boolean::: cache info get use cache
javax.imageio.ImageIO.CacheInfo#setUseCache(boolean)->void::: cache info set use cache
javax.imageio.ImageIO.CacheInfo#getCacheDirectory()->File::: cache info get cache directory
javax.imageio.ImageIO.CacheInfo#setCacheDirectory(File)->void::: cache info set cache directory
javax.imageio.ImageIO.CacheInfo#getHasPermission()->Boolean::: cache info get has permission
javax.imageio.ImageIO.CacheInfo#setHasPermission(Boolean)->void::: cache info set has permission
javax.imageio.ImageIO#setUseCache(boolean)->void:::Sets a flag indicating whether a disk-based cache file should be used when creating ImageInputStreams and ImageOutputStreams
javax.imageio.ImageIO#getUseCache()->boolean:::Returns the current value set by setUseCache, or true if no explicit setting has been made.
javax.imageio.ImageIO#setCacheDirectory(File)->void:::Sets the directory where cache files are to be created
javax.imageio.ImageIO#getCacheDirectory()->File:::Returns the current value set by setCacheDirectory, or null if no explicit setting has been made.
javax.imageio.ImageIO#createImageInputStream(Object)->ImageInputStream:::Returns an ImageInputStream that will take its input from the given Object
javax.imageio.ImageIO#createImageOutputStream(Object)->ImageOutputStream:::Returns an ImageOutputStream that will send its output to the given Object
javax.imageio.ImageIO#getReaderFormatNames()->String[]:::Returns an array of Strings listing all of the informal format names understood by the current set of registered readers.
javax.imageio.ImageIO#getReaderMIMETypes()->String[]:::Returns an array of Strings listing all of the MIME types understood by the current set of registered readers.
javax.imageio.ImageIO#getReaderFileSuffixes()->String[]:::Returns an array of Strings listing all of the file suffixes associated with the formats understood by the current set of registered readers.
javax.imageio.ImageIO.ImageReaderIterator#hasNext()->boolean::: image reader iterator has next
javax.imageio.ImageIO.ImageReaderIterator#next()->ImageReader::: image reader iterator next
javax.imageio.ImageIO.ImageReaderIterator#remove()->void::: image reader iterator remove
javax.imageio.ImageIO.CanDecodeInputFilter#filter(Object)->boolean::: can decode input filter filter
javax.imageio.ImageIO.CanEncodeImageAndFormatFilter#filter(Object)->boolean::: can encode image and format filter filter
javax.imageio.ImageIO.ContainsFilter#filter(Object)->boolean::: contains filter filter
javax.imageio.ImageIO#getImageReaders(Object)->Iterator:::Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode the supplied Object, typically an ImageInputStream
javax.imageio.ImageIO#getImageReadersByFormatName(String)->Iterator:::Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode the named format.
javax.imageio.ImageIO#getImageReadersBySuffix(String)->Iterator:::Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode files with the given suffix.
javax.imageio.ImageIO#getImageReadersByMIMEType(String)->Iterator:::Returns an Iterator containing all currently registered ImageReaders that claim to be able to decode files with the given MIME type.
javax.imageio.ImageIO#getWriterFormatNames()->String[]:::Returns an array of Strings listing all of the informal format names understood by the current set of registered writers.
javax.imageio.ImageIO#getWriterMIMETypes()->String[]:::Returns an array of Strings listing all of the MIME types understood by the current set of registered writers.
javax.imageio.ImageIO#getWriterFileSuffixes()->String[]:::Returns an array of Strings listing all of the file suffixes associated with the formats understood by the current set of registered writers.
javax.imageio.ImageIO.ImageWriterIterator#hasNext()->boolean::: image writer iterator has next
javax.imageio.ImageIO.ImageWriterIterator#next()->ImageWriter::: image writer iterator next
javax.imageio.ImageIO.ImageWriterIterator#remove()->void::: image writer iterator remove
javax.imageio.ImageIO#getImageWritersByFormatName(String)->Iterator:::Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode the named format.
javax.imageio.ImageIO#getImageWritersBySuffix(String)->Iterator:::Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode files with the given suffix.
javax.imageio.ImageIO#getImageWritersByMIMEType(String)->Iterator:::Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode files with the given MIME type.
javax.imageio.ImageIO#getImageWriter(ImageReader)->ImageWriter:::Returns an ImageWriter corresponding to the given ImageReader, if there is one, or null if the plug-in for this ImageReader does not specify a corresponding ImageWriter, or if the given ImageReader is not registered
javax.imageio.ImageIO#getImageReader(ImageWriter)->ImageReader:::Returns an ImageReader corresponding to the given ImageWriter, if there is one, or null if the plug-in for this ImageWriter does not specify a corresponding ImageReader, or if the given ImageWriter is not registered
javax.imageio.ImageIO#getImageWriters(ImageTypeSpecifier, String)->Iterator:::Returns an Iterator containing all currently registered ImageWriters that claim to be able to encode images of the given layout (specified using an ImageTypeSpecifier) in the given format.
javax.imageio.ImageIO.ImageTranscoderIterator#hasNext()->boolean::: image transcoder iterator has next
javax.imageio.ImageIO.ImageTranscoderIterator#next()->ImageTranscoder::: image transcoder iterator next
javax.imageio.ImageIO.ImageTranscoderIterator#remove()->void::: image transcoder iterator remove
javax.imageio.ImageIO.TranscoderFilter#filter(Object)->boolean::: transcoder filter filter
javax.imageio.ImageIO#getImageTranscoders(ImageReader, ImageWriter)->Iterator:::Returns an Iterator containing all currently registered ImageTranscoders that claim to be able to transcode between the metadata of the given ImageReader and ImageWriter.
javax.imageio.ImageIO#read(File)->BufferedImage:::Returns a BufferedImage as the result of decoding a supplied File with an ImageReader chosen automatically from among those currently registered
javax.imageio.ImageIO#read(InputStream)->BufferedImage:::Returns a BufferedImage as the result of decoding a supplied InputStream with an ImageReader chosen automatically from among those currently registered
javax.imageio.ImageIO#read(URL)->BufferedImage:::Returns a BufferedImage as the result of decoding a supplied URL with an ImageReader chosen automatically from among those currently registered
javax.imageio.ImageIO#read(ImageInputStream)->BufferedImage:::Returns a BufferedImage as the result of decoding a supplied ImageInputStream with an ImageReader chosen automatically from among those currently registered
javax.imageio.ImageIO#write(RenderedImage, String, ImageOutputStream)->boolean:::Writes an image using the an arbitrary ImageWriter that supports the given format to an ImageOutputStream
javax.imageio.ImageIO#write(RenderedImage, String, File)->boolean:::Writes an image using an arbitrary ImageWriter that supports the given format to a File
javax.imageio.ImageIO#write(RenderedImage, String, OutputStream)->boolean:::Writes an image using an arbitrary ImageWriter that supports the given format to an OutputStream
javax.imageio.ImageReader#getFormatName()->String:::Returns a String identifying the format of the input source
javax.imageio.ImageReader#getOriginatingProvider()->ImageReaderSpi:::Returns the ImageReaderSpi that was passed in on the constructor
javax.imageio.ImageReader#setInput(Object, boolean, boolean)->void:::Sets the input source to use to the given ImageInputStream or other Object
javax.imageio.ImageReader#setInput(Object, boolean)->void:::Sets the input source to use to the given ImageInputStream or other Object
javax.imageio.ImageReader#setInput(Object)->void:::Sets the input source to use to the given ImageInputStream or other Object
javax.imageio.ImageReader#getInput()->Object:::Returns the ImageInputStream or other Object previously set as the input source
javax.imageio.ImageReader#isSeekForwardOnly()->boolean:::Returns true if the current input source has been marked as seek forward only by passing true as the seekForwardOnly argument to the setInput method.
javax.imageio.ImageReader#isIgnoringMetadata()->boolean:::Returns true if the current input source has been marked as allowing metadata to be ignored by passing true as the ignoreMetadata argument to the setInput method.
javax.imageio.ImageReader#getMinIndex()->int:::Returns the lowest valid index for reading an image, thumbnail, or image metadata
javax.imageio.ImageReader#getAvailableLocales()->Locale[]:::Returns an array of Locales that may be used to localize warning listeners and compression settings
javax.imageio.ImageReader#setLocale(Locale)->void:::Sets the current Locale of this ImageReader to the given value
javax.imageio.ImageReader#getLocale()->Locale:::Returns the currently set Locale, or null if none has been set.
javax.imageio.ImageReader#getNumImages(boolean)->int:::Returns the number of images, not including thumbnails, available from the current input source
javax.imageio.ImageReader#getWidth(int)->int:::Returns the width in pixels of the given image within the input source
javax.imageio.ImageReader#getHeight(int)->int:::Returns the height in pixels of the given image within the input source
javax.imageio.ImageReader#isRandomAccessEasy(int)->boolean:::Returns true if the storage format of the given image places no inherent impediment on random access to pixels
javax.imageio.ImageReader#getAspectRatio(int)->float:::Returns the aspect ratio of the given image (that is, its width divided by its height) as a float
javax.imageio.ImageReader#getRawImageType(int)->ImageTypeSpecifier:::Returns an ImageTypeSpecifier indicating the SampleModel and ColorModel which most closely represents the "raw" internal format of the image
javax.imageio.ImageReader#getImageTypes(int)->Iterator:::Returns an Iterator containing possible image types to which the given image may be decoded, in the form of ImageTypeSpecifierss
javax.imageio.ImageReader#getDefaultReadParam()->ImageReadParam:::Returns a default ImageReadParam object appropriate for this format
javax.imageio.ImageReader#getStreamMetadata()->IIOMetadata:::Returns an IIOMetadata object representing the metadata associated with the input source as a whole (i.e., not associated with any particular image), or null if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available.
javax.imageio.ImageReader#getStreamMetadata(String, Set)->IIOMetadata:::Returns an IIOMetadata object representing the metadata associated with the input source as a whole (i.e., not associated with any particular image)
javax.imageio.ImageReader#getImageMetadata(int)->IIOMetadata:::Returns an IIOMetadata object containing metadata associated with the given image, or null if the reader does not support reading metadata, is set to ignore metadata, or if no metadata is available.
javax.imageio.ImageReader#getImageMetadata(int, String, Set)->IIOMetadata:::Returns an IIOMetadata object representing the metadata associated with the given image, or null if the reader does not support reading metadata or none is available
javax.imageio.ImageReader#read(int)->BufferedImage:::Reads the image indexed by imageIndex and returns it as a complete BufferedImage, using a default ImageReadParam
javax.imageio.ImageReader#read(int, ImageReadParam)->BufferedImage:::Reads the image indexed by imageIndex and returns it as a complete BufferedImage, using a supplied ImageReadParam
javax.imageio.ImageReader#readAll(int, ImageReadParam)->IIOImage:::Reads the image indexed by imageIndex and returns an IIOImage containing the image, thumbnails, and associated image metadata, using a supplied ImageReadParam
javax.imageio.ImageReader#readAll(Iterator)->Iterator:::Returns an Iterator containing all the images, thumbnails, and metadata, starting at the index given by getMinIndex, from the input source in the form of IIOImage objects
javax.imageio.ImageReader#canReadRaster()->boolean:::Returns true if this plug-in supports reading just a java.awt.image.Raster Raster of pixel data
javax.imageio.ImageReader#readRaster(int, ImageReadParam)->Raster:::Returns a new Raster object containing the raw pixel data from the image stream, without any color conversion applied
javax.imageio.ImageReader#isImageTiled(int)->boolean:::Returns true if the image is organized into tiles, that is, equal-sized non-overlapping rectangles
javax.imageio.ImageReader#getTileWidth(int)->int:::Returns the width of a tile in the given image
javax.imageio.ImageReader#getTileHeight(int)->int:::Returns the height of a tile in the given image
javax.imageio.ImageReader#getTileGridXOffset(int)->int:::Returns the X coordinate of the upper-left corner of tile (0, 0) in the given image
javax.imageio.ImageReader#getTileGridYOffset(int)->int:::Returns the Y coordinate of the upper-left corner of tile (0, 0) in the given image
javax.imageio.ImageReader#readTile(int, int, int)->BufferedImage:::Reads the tile indicated by the tileX and tileY arguments, returning it as a BufferedImage
javax.imageio.ImageReader#readTileRaster(int, int, int)->Raster:::Returns a new Raster object containing the raw pixel data from the tile, without any color conversion applied
javax.imageio.ImageReader#readAsRenderedImage(int, ImageReadParam)->RenderedImage:::Returns a RenderedImage object that contains the contents of the image indexed by imageIndex
javax.imageio.ImageReader#readerSupportsThumbnails()->boolean:::Returns true if the image format understood by this reader supports thumbnail preview images associated with it
javax.imageio.ImageReader#hasThumbnails(int)->boolean:::Returns true if the given image has thumbnail preview images associated with it
javax.imageio.ImageReader#getNumThumbnails(int)->int:::Returns the number of thumbnail preview images associated with the given image
javax.imageio.ImageReader#getThumbnailWidth(int, int)->int:::Returns the width of the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex
javax.imageio.ImageReader#getThumbnailHeight(int, int)->int:::Returns the height of the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex
javax.imageio.ImageReader#readThumbnail(int, int)->BufferedImage:::Returns the thumbnail preview image indexed by thumbnailIndex, associated with the image indexed by ImageIndex as a BufferedImage
javax.imageio.ImageReader#abort()->void:::Requests that any current read operation be aborted
javax.imageio.ImageReader#abortRequested()->boolean:::Returns true if a request to abort the current read operation has been made since the reader was instantiated or clearAbortRequest was called.
javax.imageio.ImageReader#clearAbortRequest()->void:::Clears any previous abort request
javax.imageio.ImageReader#addToList(List, T)->List::: image reader add to list
javax.imageio.ImageReader#removeFromList(List, T)->List::: image reader remove from list
javax.imageio.ImageReader#addIIOReadWarningListener(IIOReadWarningListener)->void:::Adds an IIOReadWarningListener to the list of registered warning listeners
javax.imageio.ImageReader#removeIIOReadWarningListener(IIOReadWarningListener)->void:::Removes an IIOReadWarningListener from the list of registered error listeners
javax.imageio.ImageReader#removeAllIIOReadWarningListeners()->void:::Removes all currently registered IIOReadWarningListener objects
javax.imageio.ImageReader#addIIOReadProgressListener(IIOReadProgressListener)->void:::Adds an IIOReadProgressListener to the list of registered progress listeners
javax.imageio.ImageReader#removeIIOReadProgressListener(IIOReadProgressListener)->void:::Removes an IIOReadProgressListener from the list of registered progress listeners
javax.imageio.ImageReader#removeAllIIOReadProgressListeners()->void:::Removes all currently registered IIOReadProgressListener objects
javax.imageio.ImageReader#addIIOReadUpdateListener(IIOReadUpdateListener)->void:::Adds an IIOReadUpdateListener to the list of registered update listeners
javax.imageio.ImageReader#removeIIOReadUpdateListener(IIOReadUpdateListener)->void:::Removes an IIOReadUpdateListener from the list of registered update listeners
javax.imageio.ImageReader#removeAllIIOReadUpdateListeners()->void:::Removes all currently registered IIOReadUpdateListener objects
javax.imageio.ImageReader#processSequenceStarted(int)->void:::Broadcasts the start of an sequence of image reads to all registered IIOReadProgressListeners by calling their sequenceStarted method
javax.imageio.ImageReader#processSequenceComplete()->void:::Broadcasts the completion of an sequence of image reads to all registered IIOReadProgressListeners by calling their sequenceComplete method
javax.imageio.ImageReader#processImageStarted(int)->void:::Broadcasts the start of an image read to all registered IIOReadProgressListeners by calling their imageStarted method
javax.imageio.ImageReader#processImageProgress(float)->void:::Broadcasts the current percentage of image completion to all registered IIOReadProgressListeners by calling their imageProgress method
javax.imageio.ImageReader#processImageComplete()->void:::Broadcasts the completion of an image read to all registered IIOReadProgressListeners by calling their imageComplete method
javax.imageio.ImageReader#processThumbnailStarted(int, int)->void:::Broadcasts the start of a thumbnail read to all registered IIOReadProgressListeners by calling their thumbnailStarted method
javax.imageio.ImageReader#processThumbnailProgress(float)->void:::Broadcasts the current percentage of thumbnail completion to all registered IIOReadProgressListeners by calling their thumbnailProgress method
javax.imageio.ImageReader#processThumbnailComplete()->void:::Broadcasts the completion of a thumbnail read to all registered IIOReadProgressListeners by calling their thumbnailComplete method
javax.imageio.ImageReader#processReadAborted()->void:::Broadcasts that the read has been aborted to all registered IIOReadProgressListeners by calling their readAborted method
javax.imageio.ImageReader#processPassStarted(BufferedImage, int, int, int, int, int, int, int, int[])->void:::Broadcasts the beginning of a progressive pass to all registered IIOReadUpdateListeners by calling their passStarted method
javax.imageio.ImageReader#processImageUpdate(BufferedImage, int, int, int, int, int, int, int[])->void:::Broadcasts the update of a set of samples to all registered IIOReadUpdateListeners by calling their imageUpdate method
javax.imageio.ImageReader#processPassComplete(BufferedImage)->void:::Broadcasts the end of a progressive pass to all registered IIOReadUpdateListeners by calling their passComplete method
javax.imageio.ImageReader#processThumbnailPassStarted(BufferedImage, int, int, int, int, int, int, int, int[])->void:::Broadcasts the beginning of a thumbnail progressive pass to all registered IIOReadUpdateListeners by calling their thumbnailPassStarted method
javax.imageio.ImageReader#processThumbnailUpdate(BufferedImage, int, int, int, int, int, int, int[])->void:::Broadcasts the update of a set of samples in a thumbnail image to all registered IIOReadUpdateListeners by calling their thumbnailUpdate method
javax.imageio.ImageReader#processThumbnailPassComplete(BufferedImage)->void:::Broadcasts the end of a thumbnail progressive pass to all registered IIOReadUpdateListeners by calling their thumbnailPassComplete method
javax.imageio.ImageReader#processWarningOccurred(String)->void:::Broadcasts a warning message to all registered IIOReadWarningListeners by calling their warningOccurred method
javax.imageio.ImageReader#processWarningOccurred(String, String)->void:::Broadcasts a localized warning message to all registered IIOReadWarningListeners by calling their warningOccurred method with a string taken from a ResourceBundle
javax.imageio.ImageReader#reset()->void:::Restores the ImageReader to its initial state
javax.imageio.ImageReader#dispose()->void:::Allows any resources held by this object to be released
javax.imageio.ImageReader#getSourceRegion(ImageReadParam, int, int)->Rectangle:::A utility method that may be used by readers to compute the region of the source image that should be read, taking into account any source region and subsampling offset settings in the supplied ImageReadParam
javax.imageio.ImageReader#computeRegions(ImageReadParam, int, int, BufferedImage, Rectangle, Rectangle)->void:::Computes the source region of interest and the destination region of interest, taking the width and height of the source image, an optional destination image, and an optional ImageReadParam into account
javax.imageio.ImageReader#checkReadParamBandSettings(ImageReadParam, int, int)->void:::A utility method that may be used by readers to test the validity of the source and destination band settings of an ImageReadParam
javax.imageio.ImageReader#getDestination(ImageReadParam, Iterator, int, int)->BufferedImage:::Returns the BufferedImage to which decoded pixel data should be written
javax.imageio.ImageReadParam#setDestinationType(ImageTypeSpecifier)->void::: image read param set destination type
javax.imageio.ImageReadParam#setDestination(BufferedImage)->void:::Supplies a BufferedImage to be used as the destination for decoded pixel data
javax.imageio.ImageReadParam#getDestination()->BufferedImage:::Returns the BufferedImage currently set by the setDestination method, or null if none is set.
javax.imageio.ImageReadParam#setDestinationBands(int[])->void:::Sets the indices of the destination bands where data will be placed
javax.imageio.ImageReadParam#getDestinationBands()->int[]:::Returns the set of band indices where data will be placed
javax.imageio.ImageReadParam#canSetSourceRenderSize()->boolean:::Returns true if this reader allows the source image to be rendered at an arbitrary size as part of the decoding process, by means of the setSourceRenderSize method
javax.imageio.ImageReadParam#setSourceRenderSize(Dimension)->void:::If the image is able to be rendered at an arbitrary size, sets the source width and height to the supplied values
javax.imageio.ImageReadParam#getSourceRenderSize()->Dimension:::Returns the width and height of the source image as it will be rendered during decoding, if they have been set via the setSourceRenderSize method
javax.imageio.ImageReadParam#setSourceProgressivePasses(int, int)->void:::Sets the range of progressive passes that will be decoded
javax.imageio.ImageReadParam#getSourceMinProgressivePass()->int:::Returns the index of the first progressive pass that will be decoded
javax.imageio.ImageReadParam#getSourceMaxProgressivePass()->int:::If getSourceNumProgressivePasses is equal to Integer.MAX_VALUE, returns Integer.MAX_VALUE
javax.imageio.ImageReadParam#getSourceNumProgressivePasses()->int:::Returns the number of the progressive passes that will be decoded
javax.imageio.ImageTranscoder#convertStreamMetadata(IIOMetadata, ImageWriteParam)->IIOMetadata:::Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding
javax.imageio.ImageTranscoder#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)->IIOMetadata:::Returns an IIOMetadata object that may be used for encoding and optionally modified using its document interfaces or other interfaces specific to the writer plug-in that will be used for encoding
javax.imageio.ImageTypeSpecifier#createPacked(ColorSpace, int, int, int, int, int, boolean)->ImageTypeSpecifier:::Returns a specifier for a packed image format that will use a DirectColorModel and a packed SampleModel to store each pixel packed into in a single byte, short, or int.
javax.imageio.ImageTypeSpecifier#createComponentCM(ColorSpace, int, int, boolean, boolean)->ColorModel::: image type specifier create component m
javax.imageio.ImageTypeSpecifier.Interleaved#equals(Object)->boolean::: interleaved equals
javax.imageio.ImageTypeSpecifier.Interleaved#hashCode()->int::: interleaved hash code
javax.imageio.ImageTypeSpecifier#createInterleaved(ColorSpace, int[], int, boolean, boolean)->ImageTypeSpecifier:::Returns a specifier for an interleaved image format that will use a ComponentColorModel and a PixelInterleavedSampleModel to store each pixel component in a separate byte, short, or int.
javax.imageio.ImageTypeSpecifier.Banded#equals(Object)->boolean::: banded equals
javax.imageio.ImageTypeSpecifier.Banded#hashCode()->int::: banded hash code
javax.imageio.ImageTypeSpecifier#createBanded(ColorSpace, int[], int[], int, boolean, boolean)->ImageTypeSpecifier:::Returns a specifier for a banded image format that will use a ComponentColorModel and a BandedSampleModel to store each channel in a separate array.
javax.imageio.ImageTypeSpecifier#createGrayscale(int, int, boolean)->ImageTypeSpecifier:::Returns a specifier for a grayscale image format that will pack pixels of the given bit depth into array elements of the specified data type.
javax.imageio.ImageTypeSpecifier#createGrayscale(int, int, boolean, boolean)->ImageTypeSpecifier:::Returns a specifier for a grayscale plus alpha image format that will pack pixels of the given bit depth into array elements of the specified data type.
javax.imageio.ImageTypeSpecifier#createIndexed(byte[], byte[], byte[], byte[], int, int)->ImageTypeSpecifier:::Returns a specifier for an indexed-color image format that will pack index values of the given bit depth into array elements of the specified data type.
javax.imageio.ImageTypeSpecifier#createFromBufferedImageType(int)->ImageTypeSpecifier:::Returns an ImageTypeSpecifier that encodes one of the standard BufferedImage types (other than TYPE_CUSTOM).
javax.imageio.ImageTypeSpecifier#createFromRenderedImage(RenderedImage)->ImageTypeSpecifier:::Returns an ImageTypeSpecifier that encodes the layout of a RenderedImage (which may be a BufferedImage).
javax.imageio.ImageTypeSpecifier#getBufferedImageType()->int:::Returns an int containing one of the enumerated constant values describing image formats from BufferedImage.
javax.imageio.ImageTypeSpecifier#getNumComponents()->int:::Return the number of color components specified by this object
javax.imageio.ImageTypeSpecifier#getNumBands()->int:::Return the number of bands specified by this object
javax.imageio.ImageTypeSpecifier#getBitsPerBand(int)->int:::Return the number of bits used to represent samples of the given band.
javax.imageio.ImageTypeSpecifier#getSampleModel()->SampleModel:::Returns a SampleModel based on the settings encapsulated within this object
javax.imageio.ImageTypeSpecifier#getSampleModel(int, int)->SampleModel:::Returns a SampleModel based on the settings encapsulated within this object
javax.imageio.ImageTypeSpecifier#getColorModel()->ColorModel:::Returns the ColorModel specified by this object.
javax.imageio.ImageTypeSpecifier#createBufferedImage(int, int)->BufferedImage:::Creates a BufferedImage with a given width and height according to the specification embodied in this object.
javax.imageio.ImageTypeSpecifier#equals(Object)->boolean:::Returns true if the given Object is an ImageTypeSpecifier and has a SampleModel and ColorModel that are equal to those of this object.
javax.imageio.ImageTypeSpecifier#hashCode()->int:::Returns the hash code for this ImageTypeSpecifier.
javax.imageio.ImageWriteParam#getLocale()->Locale:::Returns the currently set Locale, or null if only a default Locale is supported.
javax.imageio.ImageWriteParam#canWriteTiles()->boolean:::Returns true if the writer can perform tiling while writing
javax.imageio.ImageWriteParam#canOffsetTiles()->boolean:::Returns true if the writer can perform tiling with non-zero grid offsets while writing
javax.imageio.ImageWriteParam#setTilingMode(int)->void:::Determines whether the image will be tiled in the output stream and, if it will, how the tiling parameters will be determined
javax.imageio.ImageWriteParam#getTilingMode()->int:::Returns the current tiling mode, if tiling is supported
javax.imageio.ImageWriteParam#getPreferredTileSizes()->Dimension[]:::Returns an array of Dimensions indicating the legal size ranges for tiles as they will be encoded in the output file or stream
javax.imageio.ImageWriteParam#setTiling(int, int, int, int)->void:::Specifies that the image should be tiled in the output stream
javax.imageio.ImageWriteParam#unsetTiling()->void:::Removes any previous tile grid parameters specified by calls to setTiling
javax.imageio.ImageWriteParam#getTileWidth()->int:::Returns the width of each tile in an image as it will be written to the output stream
javax.imageio.ImageWriteParam#getTileHeight()->int:::Returns the height of each tile in an image as it will be written to the output stream
javax.imageio.ImageWriteParam#getTileGridXOffset()->int:::Returns the horizontal tile grid offset of an image as it will be written to the output stream
javax.imageio.ImageWriteParam#getTileGridYOffset()->int:::Returns the vertical tile grid offset of an image as it will be written to the output stream
javax.imageio.ImageWriteParam#canWriteProgressive()->boolean:::Returns true if the writer can write out images as a series of passes of progressively increasing quality.
javax.imageio.ImageWriteParam#setProgressiveMode(int)->void:::Specifies that the writer is to write the image out in a progressive mode such that the stream will contain a series of scans of increasing quality
javax.imageio.ImageWriteParam#getProgressiveMode()->int:::Returns the current mode for writing the stream in a progressive manner.
javax.imageio.ImageWriteParam#canWriteCompressed()->boolean:::Returns true if this writer supports compression.
javax.imageio.ImageWriteParam#setCompressionMode(int)->void:::Specifies whether compression is to be performed, and if so how compression parameters are to be determined
javax.imageio.ImageWriteParam#getCompressionMode()->int:::Returns the current compression mode, if compression is supported.
javax.imageio.ImageWriteParam#getCompressionTypes()->String[]:::Returns a list of available compression types, as an array or Strings, or null if a compression type may not be chosen using these interfaces
javax.imageio.ImageWriteParam#setCompressionType(String)->void:::Sets the compression type to one of the values indicated by getCompressionTypes
javax.imageio.ImageWriteParam#getCompressionType()->String:::Returns the currently set compression type, or null if none has been set
javax.imageio.ImageWriteParam#unsetCompression()->void:::Removes any previous compression type and quality settings
javax.imageio.ImageWriteParam#getLocalizedCompressionTypeName()->String:::Returns a localized version of the name of the current compression type, using the Locale returned by getLocale
javax.imageio.ImageWriteParam#isCompressionLossless()->boolean:::Returns true if the current compression type provides lossless compression
javax.imageio.ImageWriteParam#setCompressionQuality(float)->void:::Sets the compression quality to a value between 0 and 1
javax.imageio.ImageWriteParam#getCompressionQuality()->float:::Returns the current compression quality setting
javax.imageio.ImageWriteParam#getBitRate(float)->float:::Returns a float indicating an estimate of the number of bits of output data for each bit of input image data at the given quality level
javax.imageio.ImageWriteParam#getCompressionQualityDescriptions()->String[]:::Returns an array of Strings that may be used along with getCompressionQualityValues as part of a user interface for setting or displaying the compression quality level
javax.imageio.ImageWriteParam#getCompressionQualityValues()->float[]:::Returns an array of floats that may be used along with getCompressionQualityDescriptions as part of a user interface for setting or displaying the compression quality level
javax.imageio.ImageWriter#getOriginatingProvider()->ImageWriterSpi:::Returns the ImageWriterSpi object that created this ImageWriter, or null if this object was not created through the IIORegistry
javax.imageio.ImageWriter#setOutput(Object)->void:::Sets the destination to the given ImageOutputStream or other Object
javax.imageio.ImageWriter#getOutput()->Object:::Returns the ImageOutputStream or other Object set by the most recent call to the setOutput method
javax.imageio.ImageWriter#getAvailableLocales()->Locale[]:::Returns an array of Locales that may be used to localize warning listeners and compression settings
javax.imageio.ImageWriter#setLocale(Locale)->void:::Sets the current Locale of this ImageWriter to the given value
javax.imageio.ImageWriter#getLocale()->Locale:::Returns the currently set Locale, or null if none has been set
javax.imageio.ImageWriter#getDefaultWriteParam()->ImageWriteParam:::Returns a new ImageWriteParam object of the appropriate type for this file format containing default values, that is, those values that would be used if no ImageWriteParam object were specified
javax.imageio.ImageWriter#getDefaultStreamMetadata(ImageWriteParam)->IIOMetadata:::Returns an IIOMetadata object containing default values for encoding a stream of images
javax.imageio.ImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)->IIOMetadata:::Returns an IIOMetadata object containing default values for encoding an image of the given type
javax.imageio.ImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)->IIOMetadata::: image writer convert stream metadata
javax.imageio.ImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)->IIOMetadata::: image writer convert image metadata
javax.imageio.ImageWriter#getNumThumbnailsSupported(ImageTypeSpecifier, ImageWriteParam, IIOMetadata, IIOMetadata)->int:::Returns the number of thumbnails supported by the format being written, given the image type and any additional write parameters and metadata objects that will be used during encoding
javax.imageio.ImageWriter#getPreferredThumbnailSizes(ImageTypeSpecifier, ImageWriteParam, IIOMetadata, IIOMetadata)->Dimension[]:::Returns an array of Dimensions indicating the legal size ranges for thumbnail images as they will be encoded in the output file or stream
javax.imageio.ImageWriter#canWriteRasters()->boolean:::Returns true if the methods that take an IIOImage parameter are capable of dealing with a Raster (as opposed to RenderedImage) source image
javax.imageio.ImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)->void:::Appends a complete image stream containing a single image and associated stream and image metadata and thumbnails to the output
javax.imageio.ImageWriter#write(IIOImage)->void:::Appends a complete image stream containing a single image with default metadata and thumbnails to the output
javax.imageio.ImageWriter#write(RenderedImage)->void:::Appends a complete image stream consisting of a single image with default metadata and thumbnails to the output
javax.imageio.ImageWriter#canWriteSequence()->boolean:::Returns true if the writer is able to append an image to an image stream that already contains header information and possibly prior images
javax.imageio.ImageWriter#prepareWriteSequence(IIOMetadata)->void:::Prepares a stream to accept a series of subsequent writeToSequence calls, using the provided stream metadata object
javax.imageio.ImageWriter#writeToSequence(IIOImage, ImageWriteParam)->void:::Appends a single image and possibly associated metadata and thumbnails, to the output
javax.imageio.ImageWriter#endWriteSequence()->void:::Completes the writing of a sequence of images begun with prepareWriteSequence
javax.imageio.ImageWriter#canReplaceStreamMetadata()->boolean:::Returns true if it is possible to replace the stream metadata already present in the output
javax.imageio.ImageWriter#replaceStreamMetadata(IIOMetadata)->void:::Replaces the stream metadata in the output with new information
javax.imageio.ImageWriter#canReplaceImageMetadata(int)->boolean:::Returns true if it is possible to replace the image metadata associated with an existing image with index imageIndex
javax.imageio.ImageWriter#replaceImageMetadata(int, IIOMetadata)->void:::Replaces the image metadata associated with an existing image
javax.imageio.ImageWriter#canInsertImage(int)->boolean:::Returns true if the writer supports the insertion of a new image at the given index
javax.imageio.ImageWriter#writeInsert(int, IIOImage, ImageWriteParam)->void:::Inserts a new image into an existing image stream
javax.imageio.ImageWriter#canRemoveImage(int)->boolean:::Returns true if the writer supports the removal of an existing image at the given index
javax.imageio.ImageWriter#removeImage(int)->void:::Removes an image from the stream
javax.imageio.ImageWriter#canWriteEmpty()->boolean:::Returns true if the writer supports the writing of a complete image stream consisting of a single image with undefined pixel values and associated metadata and thumbnails to the output
javax.imageio.ImageWriter#prepareWriteEmpty(IIOMetadata, ImageTypeSpecifier, int, int, IIOMetadata, List, ImageWriteParam)->void:::Begins the writing of a complete image stream, consisting of a single image with undefined pixel values and associated metadata and thumbnails, to the output
javax.imageio.ImageWriter#endWriteEmpty()->void:::Completes the writing of a new image that was begun with a prior call to prepareWriteEmpty
javax.imageio.ImageWriter#canInsertEmpty(int)->boolean:::Returns true if the writer supports the insertion of a new, empty image at the given index
javax.imageio.ImageWriter#prepareInsertEmpty(int, ImageTypeSpecifier, int, int, IIOMetadata, List, ImageWriteParam)->void:::Begins the insertion of a new image with undefined pixel values into an existing image stream
javax.imageio.ImageWriter#endInsertEmpty()->void:::Completes the insertion of a new image that was begun with a prior call to prepareInsertEmpty
javax.imageio.ImageWriter#canReplacePixels(int)->boolean:::Returns true if the writer allows pixels of the given image to be replaced using the replacePixels methods
javax.imageio.ImageWriter#prepareReplacePixels(int, Rectangle)->void:::Prepares the writer to handle a series of calls to the replacePixels methods
javax.imageio.ImageWriter#replacePixels(RenderedImage, ImageWriteParam)->void:::Replaces a portion of an image already present in the output with a portion of the given image
javax.imageio.ImageWriter#replacePixels(Raster, ImageWriteParam)->void:::Replaces a portion of an image already present in the output with a portion of the given Raster
javax.imageio.ImageWriter#endReplacePixels()->void:::Terminates a sequence of calls to replacePixels
javax.imageio.ImageWriter#abort()->void:::Requests that any current write operation be aborted
javax.imageio.ImageWriter#abortRequested()->boolean:::Returns true if a request to abort the current write operation has been made since the writer was instantiated or clearAbortRequest was called.
javax.imageio.ImageWriter#clearAbortRequest()->void:::Clears any previous abort request
javax.imageio.ImageWriter#addIIOWriteWarningListener(IIOWriteWarningListener)->void:::Adds an IIOWriteWarningListener to the list of registered warning listeners
javax.imageio.ImageWriter#removeIIOWriteWarningListener(IIOWriteWarningListener)->void:::Removes an IIOWriteWarningListener from the list of registered warning listeners
javax.imageio.ImageWriter#removeAllIIOWriteWarningListeners()->void:::Removes all currently registered IIOWriteWarningListener objects
javax.imageio.ImageWriter#addIIOWriteProgressListener(IIOWriteProgressListener)->void:::Adds an IIOWriteProgressListener to the list of registered progress listeners
javax.imageio.ImageWriter#removeIIOWriteProgressListener(IIOWriteProgressListener)->void:::Removes an IIOWriteProgressListener from the list of registered progress listeners
javax.imageio.ImageWriter#removeAllIIOWriteProgressListeners()->void:::Removes all currently registered IIOWriteProgressListener objects
javax.imageio.ImageWriter#processImageStarted(int)->void:::Broadcasts the start of an image write to all registered IIOWriteProgressListeners by calling their imageStarted method
javax.imageio.ImageWriter#processImageProgress(float)->void:::Broadcasts the current percentage of image completion to all registered IIOWriteProgressListeners by calling their imageProgress method
javax.imageio.ImageWriter#processImageComplete()->void:::Broadcasts the completion of an image write to all registered IIOWriteProgressListeners by calling their imageComplete method
javax.imageio.ImageWriter#processThumbnailStarted(int, int)->void:::Broadcasts the start of a thumbnail write to all registered IIOWriteProgressListeners by calling their thumbnailStarted method
javax.imageio.ImageWriter#processThumbnailProgress(float)->void:::Broadcasts the current percentage of thumbnail completion to all registered IIOWriteProgressListeners by calling their thumbnailProgress method
javax.imageio.ImageWriter#processThumbnailComplete()->void:::Broadcasts the completion of a thumbnail write to all registered IIOWriteProgressListeners by calling their thumbnailComplete method
javax.imageio.ImageWriter#processWriteAborted()->void:::Broadcasts that the write has been aborted to all registered IIOWriteProgressListeners by calling their writeAborted method
javax.imageio.ImageWriter#processWarningOccurred(int, String)->void:::Broadcasts a warning message to all registered IIOWriteWarningListeners by calling their warningOccurred method
javax.imageio.ImageWriter#processWarningOccurred(int, String, String)->void:::Broadcasts a localized warning message to all registered IIOWriteWarningListeners by calling their warningOccurred method with a string taken from a ResourceBundle
javax.imageio.ImageWriter#reset()->void:::Restores the ImageWriter to its initial state
javax.imageio.ImageWriter#dispose()->void:::Allows any resources held by this object to be released

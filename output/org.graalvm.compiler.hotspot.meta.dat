HotSpotAOTProfilingPlugin_OptionDescriptors#get(String)::: hot spot profiling plugin_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return
HotSpotAOTProfilingPlugin_OptionDescriptors#iterator()::: hot spot profiling plugin_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
HotSpotProfilingPlugin_OptionDescriptors#get(String)::: hot spot profiling plugin_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return
HotSpotProfilingPlugin_OptionDescriptors#iterator()::: hot spot profiling plugin_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
AddressLoweringHotSpotSuitesProvider#createSuites(OptionValues)::: address lowering hot spot suites provider create suites:::suites->super->createSuites->findPhase->suites->getLowTier->findPhase->if->suites->getLowTier->findPhase->findPhase->previous->findPhase->add->return
DefaultHotSpotLoweringProvider#initialize(OptionValues, Iterable, HotSpotProviders, GraalHotSpotVMConfig)::: default hot spot lowering provider initialize:::super->providers->getSnippetReflection->initialize->new->InstanceOfSnippets.Templates->new->NewObjectSnippets.Templates->new->MonitorSnippets.Templates->new->HotSpotG1WriteBarrierSnippets.Templates->new->HotSpotSerialWriteBarrierSnippets.Templates->new->LoadExceptionObjectSnippets.Templates->new->UnsafeLoadSnippets.Templates->new->AssertionSnippets.Templates->new->HotSpotArraycopySnippets->providers->getSnippetReflection->new->ArrayCopySnippets.Templates->new->StringToBytesSnippets.Templates->new->HashCodeSnippets.Templates->new->ResolveConstantSnippets.Templates->new->ObjectCloneSnippets.Templates->new->ForeignCallSnippets.Templates->if->else->new->ProfileSnippets.Templates
DefaultHotSpotLoweringProvider#getArraycopySnippets()::: default hot spot lowering provider get arraycopy snippets:::return
DefaultHotSpotLoweringProvider#getMonitorSnippets()::: default hot spot lowering provider get monitor snippets:::return
DefaultHotSpotLoweringProvider#lower(Node, LoweringTool)::: default hot spot lowering provider lower:::graph->n->graph->try->context->n->withNodeSourcePosition->if->lowerInvoke->else->if->lowerLoadMethodNode->else->if->lowerGetClassNode->else->if->lowerStoreHubNode->else->if->lowerOSRStartNode->else->if->lowerBytecodeExceptionNode->else->if->instanceOfNode->if->graph->getGuardsStage->areDeoptsFixed->instanceofSnippets->lower->else->if->instanceOfNode->allowsNull->object->instanceOfNode->getValue->newTypeCheck->graph->InstanceOfNode->instanceOfNode->type->instanceOfNode->profile->instanceOfNode->getAnchor->create->addOrUniqueWithInputs->newNode->LogicNode->graph->IsNullNode->create->unique->or->instanceOfNode->replaceAndDelete->else->if->instanceOfDynamicNode->if->graph->getGuardsStage->areDeoptsFixed->instanceofSnippets->lower->else->mirror->instanceOfDynamicNode->getMirrorOrHub->if->mirror->stamp->getStackKind->classGetHub->graph->new->ClassGetHubNode->unique->instanceOfDynamicNode->setMirror->if->instanceOfDynamicNode->allowsNull->object->instanceOfDynamicNode->getObject->newTypeCheck->graph->InstanceOfDynamicNode->graph->getAssumptions->tool->getConstantReflection->instanceOfDynamicNode->getMirrorOrHub->create->addOrUniqueWithInputs->newNode->LogicNode->graph->IsNullNode->create->unique->or->instanceOfDynamicNode->replaceAndDelete->else->if->if->graph->getGuardsStage->areDeoptsFixed->instanceofSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->newObjectSnippets->lower->else->if->newInstanceNode->if->newInstanceNode->getClassClass->classClassMirror->constantReflection->metaAccess->lookupJavaType->asJavaClass->classClass->ConstantNode->tool->getMetaAccess->forConstant->newInstanceNode->setClassClass->if->graph->getGuardsStage->areFrameStatesAtDeopts->newObjectSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->newObjectSnippets->lower->else->if->dynamicNewArrayNode->if->dynamicNewArrayNode->getVoidClass->voidClassMirror->constantReflection->metaAccess->lookupJavaType->asJavaClass->voidClass->ConstantNode->tool->getMetaAccess->forConstant->dynamicNewArrayNode->setVoidClass->if->graph->getGuardsStage->areFrameStatesAtDeopts->newObjectSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->newObjectSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->monitorSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->monitorSnippets->lower->else->if->arraycopySnippets->lower->else->if->arraycopySnippets->lower->else->if->g1WriteBarrierSnippets->lower->else->if->g1WriteBarrierSnippets->lower->else->if->g1WriteBarrierSnippets->lower->else->if->serialWriteBarrierSnippets->lower->else->if->serialWriteBarrierSnippets->lower->else->if->g1WriteBarrierSnippets->lower->else->if->g1WriteBarrierSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->newObjectSnippets->lower->else->if->exceptionObjectSnippets->lower->else->if->assertionSnippets->lower->else->if->if->graph->getGuardsStage->areDeoptsFixed->stringToBytesSnippets->lower->else->if->else->if->else->if->lowerClassGetHubNode->else->if->lowerHubGetClassNode->else->if->lowerKlassLayoutHelperNode->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->lowerComputeObjectAddressNode->else->if->hashCodeSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->resolveConstantSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->resolveConstantSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->resolveConstantSnippets->lower->else->if->if->graph->getGuardsStage->areFrameStatesAtDeopts->resolveConstantSnippets->lower->else->if->profileSnippets->lower->else->super->lower->catch->finally
DefaultHotSpotLoweringProvider#lowerComputeObjectAddressNode(ComputeObjectAddressNode)::: default hot spot lowering provider lower compute object address node:::foreach->n->usages->snapshot->if->fixed->graph->n->graph->address->graph->n->getObject->new->GetObjectAddressNode->add->graph->addBeforeFixed->add->graph->n->getOffset->new->AddNode->addOrUnique->use->replaceFirstInput->else->throw->GraalError->shouldNotReachHere->GraphUtil->unlinkFixedNode->n->safeDelete
DefaultHotSpotLoweringProvider#lowerKlassLayoutHelperNode(KlassLayoutHelperNode, LoweringTool)::: default hot spot lowering provider lower klass layout helper node:::if->tool->getLoweringStage->return->graph->n->graph->address->n->getHub->runtime->getVMConfig->createOffsetAddress->n->graph->n->stamp->new->FloatingReadNode->unique->replaceAtUsagesAndDelete
DefaultHotSpotLoweringProvider#lowerHubGetClassNode(HubGetClassNode, LoweringTool)::: default hot spot lowering provider lower hub get class node:::if->tool->getLoweringStage->return->hub->n->getHub->vmConfig->runtime->getVMConfig->graph->n->graph->mirrorAddress->createOffsetAddress->read->graph->StampFactory->forKind->n->stamp->new->FloatingReadNode->unique->if->address->createOffsetAddress->graph->n->stamp->new->FloatingReadNode->unique->n->replaceAtUsagesAndDelete
DefaultHotSpotLoweringProvider#lowerClassGetHubNode(ClassGetHubNode, LoweringTool)::: default hot spot lowering provider lower class get hub node:::if->tool->getLoweringStage->return->graph->n->graph->address->n->getValue->runtime->getVMConfig->createOffsetAddress->read->graph->n->stamp->new->FloatingReadNode->unique->n->replaceAtUsagesAndDelete
DefaultHotSpotLoweringProvider#lowerInvoke(Invoke, LoweringTool, StructuredGraph)::: default hot spot lowering provider lower invoke:::if->invoke->callTarget->callTarget->invoke->callTarget->parameters->callTarget->arguments->receiver->parameters->isEmpty->parameters->get->if->callTarget->isStatic->if->receiver->stamp->StampTool->isPointerNonNull->nonNullReceiver->invoke->asNode->createNullCheckedValue->parameters->set->signature->callTarget->targetMethod->getSignature->callTarget->isStatic->callTarget->targetMethod->getDeclaringClass->toParameterTypes->loweredCallTarget->options->graph->getOptions->if->InlineVTableStubs->getValue->callTarget->invokeKind->isIndirect->AlwaysInlineVTableStubs->getValue->invoke->isPolymorphic->hsMethod->callTarget->targetMethod->receiverType->invoke->getReceiverType->if->hsMethod->isInVirtualMethodTable->wordKind->runtime->getTarget->hub->createReadHub->metaspaceMethod->createReadVirtualMethod->methodCompiledEntryOffset->runtime->getVMConfig->address->createOffsetAddress->compiledEntry->graph->any->StampFactory->forKind->new->ReadNode->add->graph->parameters->parameters->size->new->ValueNodeArr->toArray->callTarget->returnStamp->callTarget->targetMethod->callTarget->invokeKind->new->HotSpotIndirectCallTargetNode->add->graph->invoke->asNode->addBeforeFixed->graph->addAfterFixed->if->graph->parameters->parameters->size->new->ValueNodeArr->toArray->callTarget->returnStamp->callTarget->targetMethod->callTarget->invokeKind->new->HotSpotDirectCallTargetNode->add->callTarget->replaceAndDelete
DefaultHotSpotLoweringProvider#getOopEncoding()::: default hot spot lowering provider get oop encoding:::return->runtime->getVMConfig->getOopEncoding
DefaultHotSpotLoweringProvider#loadCompressedStamp(ObjectStamp)::: default hot spot lowering provider load compressed stamp:::return->HotSpotNarrowOopStamp->getOopEncoding->compressed
DefaultHotSpotLoweringProvider#newCompressionNode(CompressionOp, ValueNode)::: default hot spot lowering provider new compression node:::return->getOopEncoding->new->HotSpotCompressionNode
DefaultHotSpotLoweringProvider#staticFieldBase(StructuredGraph, ResolvedJavaField)::: default hot spot lowering provider static field base:::field->base->constantReflection->field->getDeclaringClass->asJavaClass->return->ConstantNode->forConstant
DefaultHotSpotLoweringProvider#createReadArrayComponentHub(StructuredGraph, ValueNode, FixedNode)::: default hot spot lowering provider create read array component hub:::address->runtime->getVMConfig->createOffsetAddress->return->graph->KlassPointerStamp->klassNonNull->AbstractBeginNode->prevBegin->new->FloatingReadNode->unique
DefaultHotSpotLoweringProvider#lowerUnsafeLoadNode(RawLoadNode, LoweringTool)::: default hot spot lowering provider lower unsafe load node:::graph->load->graph->if->graph->getGuardsStage->allowsFloatingGuards->addReadBarrier->unsafeLoadSnippets->lower->else->super->lowerUnsafeLoadNode
DefaultHotSpotLoweringProvider#lowerLoadMethodNode(LoadMethodNode)::: default hot spot lowering provider lower load method node:::graph->loadMethodNode->graph->method->loadMethodNode->getMethod->metaspaceMethod->loadMethodNode->getHub->loadMethodNode->getReceiverType->createReadVirtualMethod->graph->replaceFixed
DefaultHotSpotLoweringProvider#lowerGetClassNode(GetClassNode, LoweringTool, StructuredGraph)::: default hot spot lowering provider lower get class node:::stampProvider->tool->getStampProvider->hub->graph->getClass->getObject->new->LoadHubNode->unique->hubGetClass->graph->tool->getMetaAccess->new->HubGetClassNode->unique->getClass->replaceAtUsagesAndDelete->hub->lower->hubGetClass->lower
DefaultHotSpotLoweringProvider#lowerStoreHubNode(StoreHubNode, StructuredGraph)::: default hot spot lowering provider lower store hub node:::hub->storeHub->getObject->storeHub->getValue->createWriteHub->graph->replaceFixed
DefaultHotSpotLoweringProvider#lowerOSRStartNode(OSRStartNode)::: default hot spot lowering provider lower start node:::graph->osrStart->graph->if->graph->getGuardsStage->newStart->graph->new->StartNode->add->buffer->graph->StampPair->StampFactory->runtime->getTarget->forKind->createSingle->new->ParameterNode->addWithoutUnique->migrationEnd->graph->new->ForeignCallNode->add->migrationEnd->osrStart->stateAfter->setStateAfter->newStart->setNext->next->osrStart->next->osrStart->setNext->migrationEnd->setNext->graph->setStart->wordSize->localsOffset->graph->method->getMaxLocals->foreach->graph->getNodes->size->osrLocal->getStackKind->getSlotCount->offset->osrLocal->index->address->createOffsetAddress->load->graph->any->osrLocal->stamp->new->ReadNode->add->osrLocal->replaceAndDelete->graph->addBeforeFixed->lockCount->osrStart->stateAfter->locksSize->locksOffset->graph->method->getMaxLocals->foreach->graph->getNodes->monitorID->osrMonitorEnter->getMonitorId->lock->osrMonitorEnter->object->index->lock->index->offsetDisplacedHeader->offsetLockObject->addressDisplacedHeader->createOffsetAddress->loadDisplacedHeader->graph->any->lock->stamp->new->ReadNode->add->graph->addBeforeFixed->beginLockScope->graph->lock->getStackKind->monitorID->getLockDepth->new->BeginLockScopeNode->add->graph->addBeforeFixed->addressDisplacedMark->runtime->getVMConfig->createOffsetAddress->writeStackSlot->graph->new->WriteNode->add->graph->addBeforeFixed->addressLockObject->createOffsetAddress->loadObject->graph->any->lock->stamp->new->ReadNode->add->lock->replaceAndDelete->graph->addBeforeFixed->osrStart->replaceAtUsagesAndDelete
DefaultHotSpotLoweringProvider.Exceptions#clearStackTrace(RuntimeException)::: exceptions clear stack trace:::ex->new->StackTraceElementArr->setStackTrace->return
DefaultHotSpotLoweringProvider#throwCachedException(BytecodeExceptionNode)::: default hot spot lowering provider throw cached exception:::if->throw->new->InternalError->exception->node->getExceptionKind->get->graph->node->graph->exceptionNode->ConstantNode->constantReflection->forObject->forConstant->graph->replaceFixedWithFloating
DefaultHotSpotLoweringProvider#lowerBytecodeExceptionNode(BytecodeExceptionNode)::: default hot spot lowering provider lower bytecode exception node:::if->OmitHotExceptionStacktrace->node->getOptions->getValue->throwCachedException->return->descriptor->node->getExceptionKind->get->graph->node->graph->foreignCallNode->graph->node->stamp->node->getArguments->new->ForeignCallNode->add->graph->replaceFixedWithFixed
DefaultHotSpotLoweringProvider#addReadBarrier(RawLoadNode)::: default hot spot lowering provider add read barrier:::if->runtime->getVMConfig->load->graph->getGuardsStage->load->object->getStackKind->load->accessKind->StampTool->load->object->isPointerAlwaysNull->type->StampTool->load->object->typeOrNull->if->type->isArray->return->return
DefaultHotSpotLoweringProvider#createReadVirtualMethod(StructuredGraph, ValueNode, HotSpotResolvedJavaMethod, ResolvedJavaType)::: default hot spot lowering provider create read virtual method:::return->method->vtableEntryOffset->createReadVirtualMethod
DefaultHotSpotLoweringProvider#createReadVirtualMethod(StructuredGraph, ValueNode, int)::: default hot spot lowering provider create read virtual method:::methodStamp->MethodPointerStamp->methodNonNull->address->createOffsetAddress->metaspaceMethod->graph->any->new->ReadNode->add->return
DefaultHotSpotLoweringProvider#createReadHub(StructuredGraph, ValueNode, LoweringTool)::: default hot spot lowering provider create read hub:::if->tool->getLoweringStage->return->graph->tool->getStampProvider->new->LoadHubNode->unique->hubStamp->KlassPointerStamp->klassNonNull->if->runtime->getVMConfig->hubStamp->runtime->getVMConfig->getKlassEncoding->compressed->address->runtime->getVMConfig->createOffsetAddress->hubLocation->runtime->getVMConfig->memoryRead->graph->new->FloatingReadNode->unique->if->runtime->getVMConfig->return->HotSpotCompressionNode->runtime->getVMConfig->getKlassEncoding->uncompress->else->return
DefaultHotSpotLoweringProvider#createWriteHub(StructuredGraph, ValueNode, ValueNode)::: default hot spot lowering provider create write hub:::writeValue->if->runtime->getVMConfig->HotSpotCompressionNode->runtime->getVMConfig->getKlassEncoding->compress->address->runtime->getVMConfig->createOffsetAddress->return->graph->new->WriteNode->add
DefaultHotSpotLoweringProvider#fieldLoadBarrierType(ResolvedJavaField)::: default hot spot lowering provider field load barrier type:::loadField->if->loadField->getJavaKind->metaAccess->lookupJavaType->loadField->getDeclaringClass->equals->loadField->getName->equals->return->return->super->fieldLoadBarrierType
DefaultHotSpotLoweringProvider#fieldOffset(ResolvedJavaField)::: default hot spot lowering provider field offset:::return->f->getOffset
DefaultHotSpotLoweringProvider#arrayLengthOffset()::: default hot spot lowering provider array length offset:::return->runtime->getVMConfig->arrayOopDescLengthOffset
DefaultHotSpotLoweringProvider#getStorageKind(ResolvedJavaField)::: default hot spot lowering provider get storage kind:::return->field->getJavaKind
DefaultHotSpotLoweringProvider#getObjectCloneSnippets()::: default hot spot lowering provider get object clone snippets:::return
DefaultHotSpotLoweringProvider#getForeignCallSnippets()::: default hot spot lowering provider get foreign call snippets:::return
HotSpotAOTProfilingPlugin#shouldProfile(GraphBuilderContext, ResolvedJavaMethod)::: hot spot profiling plugin should profile:::return->super->shouldProfile->method->getDeclaringClass->getFingerprint
HotSpotAOTProfilingPlugin#invokeNotifyFreqLog(OptionValues)::: hot spot profiling plugin invoke notify freq log:::return->getValue
HotSpotAOTProfilingPlugin#invokeInlineeNotifyFreqLog(OptionValues)::: hot spot profiling plugin invoke inlinee notify freq log:::return->getValue
HotSpotAOTProfilingPlugin#invokeProfilePobabilityLog(OptionValues)::: hot spot profiling plugin invoke profile pobability log:::return->getValue
HotSpotAOTProfilingPlugin#backedgeNotifyFreqLog(OptionValues)::: hot spot profiling plugin backedge notify freq log:::return->getValue
HotSpotAOTProfilingPlugin#backedgeProfilePobabilityLog(OptionValues)::: hot spot profiling plugin backedge profile pobability log:::return->getValue
HotSpotClassInitializationPlugin#shouldApply(GraphBuilderContext, ResolvedJavaType)::: hot spot class initialization plugin should apply:::if->builder->parsingIntrinsic->if->type->isArray->method->builder->getGraph->method->methodHolder->method->getDeclaringClass->return->type->isAssignableFrom->type->isInterface->else->if->type->getComponentType->isPrimitive->return->return
HotSpotClassInitializationPlugin#apply(GraphBuilderContext, ResolvedJavaType, Supplier, ValueNode[])::: hot spot class initialization plugin apply:::if->shouldApply->hubStamp->builder->getStampProvider->StampFactory->objectNonNull->createHubStamp->hub->builder->ConstantNode->klass->builder->getMetaAccess->builder->getGraph->forConstant->append->result->builder->type->isArray->new->ResolveConstantNode->new->InitializeKlassNode->append->result->frameState->get->setStateBefore->if->return->return
HotSpotClassInitializationPlugin#supportsLazyInitialization(ConstantPool)::: hot spot class initialization plugin supports lazy initialization:::return
HotSpotClassInitializationPlugin#loadReferencedType(GraphBuilderContext, ConstantPool, int, int)::: hot spot class initialization plugin load referenced type:::if->loadReferencedType->else->cp->loadReferencedType
HotSpotConstantFieldProvider#isStableField(ResolvedJavaField, ConstantFieldTool)::: hot spot constant field provider is stable field:::if->return->if->field->isStatic->tool->getOptions->isStaticFieldConstant->return->if->isStable->return->return->super->isStableField
HotSpotConstantFieldProvider#isFinalField(ResolvedJavaField, ConstantFieldTool)::: hot spot constant field provider is final field:::if->field->isStatic->tool->getOptions->isStaticFieldConstant->return->return->super->isFinalField
HotSpotConstantFieldProvider#isStaticFieldConstant(ResolvedJavaField, OptionValues)::: hot spot constant field provider is static field constant:::declaringClass->field->getDeclaringClass->return->declaringClass->isInitialized->declaringClass->getName->equals
HotSpotDisassemblerProvider#disassembleCompiledCode(CodeCacheProvider, CompilationResult)::: hot spot disassembler provider disassemble compiled code:::return
HotSpotDisassemblerProvider#disassembleInstalledCode(CodeCacheProvider, CompilationResult, InstalledCode)::: hot spot disassembler provider disassemble installed code:::return->disassemble
HotSpotDisassemblerProvider#getName()::: hot spot disassembler provider get name:::return
HotSpotForeignCallsProvider#getNativeABICallerSaveRegisters():::Gets the registers that must be saved across a foreign call into the runtime.:::
HotSpotForeignCallsProvider#getStubs():::Gets the set of stubs linked to by the foreign calls represented by this object.:::
HotSpotForeignCallsProviderImpl#register(HotSpotForeignCallLinkage):::Registers the linkage for a foreign call.:::foreignCalls->linkage->getDescriptor->put->return
HotSpotForeignCallsProviderImpl#isRegistered(ForeignCallDescriptor):::Return true if the descriptor has already been registered.:::return->foreignCalls->containsKey
HotSpotForeignCallsProviderImpl#registerStubCall(ForeignCallDescriptor, Transition, Reexecutability, LocationIdentity...):::Creates and registers the details for linking a foreign call to a Stub.:::return->HotSpotForeignCallLinkageImpl->create->register
HotSpotForeignCallsProviderImpl#registerForeignCall(ForeignCallDescriptor, long, CallingConvention.Type, RegisterEffect, Transition, Reexecutability, LocationIdentity...):::Creates and registers the linkage for a foreign call.:::resultType->descriptor->getResultType->return->HotSpotForeignCallLinkageImpl->create->register
HotSpotForeignCallsProviderImpl#linkForeignCall(OptionValues, HotSpotProviders, ForeignCallDescriptor, long, boolean, Transition, Reexecutability, LocationIdentity...):::Creates a ForeignCallStub stub for the foreign call described by descriptor if address != 0.:::if->stub->new->ForeignCallStub->linkage->stub->getLinkage->targetLinkage->stub->getTargetLinkage->linkage->setCompiledStub->register->register
HotSpotForeignCallsProviderImpl#lookupForeignCall(ForeignCallDescriptor)::: hot spot foreign calls provider impl lookup foreign call:::callTarget->foreignCalls->get->if->throw->GraalError->shouldNotReachHere->callTarget->runtime->getHostBackend->finalizeAddress->return
HotSpotForeignCallsProviderImpl#isAvailable(ForeignCallDescriptor)::: hot spot foreign calls provider impl is available:::return->foreignCalls->containsKey
HotSpotForeignCallsProviderImpl#isReexecutable(ForeignCallDescriptor)::: hot spot foreign calls provider impl is reexecutable:::return->foreignCalls->get->isReexecutable
HotSpotForeignCallsProviderImpl#canDeoptimize(ForeignCallDescriptor)::: hot spot foreign calls provider impl can deoptimize:::return->foreignCalls->get->needsDebugInfo
HotSpotForeignCallsProviderImpl#isGuaranteedSafepoint(ForeignCallDescriptor)::: hot spot foreign calls provider impl is guaranteed safepoint:::return->foreignCalls->get->isGuaranteedSafepoint
HotSpotForeignCallsProviderImpl#getKilledLocations(ForeignCallDescriptor)::: hot spot foreign calls provider impl get killed locations:::return->foreignCalls->get->getKilledLocations
HotSpotForeignCallsProviderImpl#getValueKind(JavaKind)::: hot spot foreign calls provider impl get value kind:::return->LIRKind->codeCache->getTarget->fromJavaKind
HotSpotForeignCallsProviderImpl#getStubs()::: hot spot foreign calls provider impl get stubs:::stubs->new->ArrayList<>->foreach->foreignCalls->getValues->if->linkage->isCompiledStub->stub->linkage->getStub->stubs->add->return
HotSpotGCProvider#getBarrierSet()::: hot spot provider get barrier set:::return
HotSpotGCProvider#createBarrierSet(GraalHotSpotVMConfig)::: hot spot provider create barrier set:::useDeferredInitBarriers->if->return->new->G1BarrierSet->else->return->new->CardTableBarrierSet
HotSpotGCProvider#isWriteToNewObject(FixedAccessNode):::For initializing writes, the last allocation executed by the JVM is guaranteed to be automatically card marked so it's safe to skip the card mark in the emitted code.:::if->initializingWrite->getLocationIdentity->isInit->return->base->initializingWrite->getAddress->getBase->if->pred->initializingWrite->predecessor->while->if->return->if->initializingWrite->getDebug->log->return->pred->predecessor->initializingWrite->getDebug->log->return
HotSpotGraalConstantFieldProvider#isStaticFieldConstant(ResolvedJavaField, OptionValues)::: hot spot graal constant field provider is static field constant:::return->super->isStaticFieldConstant->ImmutableCode->getValue->isEmbeddableField
HotSpotGraalConstantFieldProvider#isEmbeddableField(ResolvedJavaField)::: hot spot graal constant field provider is embeddable field:::if->synchronized->if->fields->new->ArrayList<>->try->fields->metaAccess->getDeclaredField->lookupJavaField->add->fields->metaAccess->getDeclaredField->lookupJavaField->add->characterCacheClass->getDeclaredClasses->fields->metaAccess->characterCacheClass->getDeclaredField->lookupJavaField->add->byteCacheClass->getDeclaredClasses->fields->metaAccess->byteCacheClass->getDeclaredField->lookupJavaField->add->shortCacheClass->getDeclaredClasses->fields->metaAccess->shortCacheClass->getDeclaredField->lookupJavaField->add->integerCacheClass->getDeclaredClasses->fields->metaAccess->integerCacheClass->getDeclaredField->lookupJavaField->add->longCacheClass->getDeclaredClasses->fields->metaAccess->longCacheClass->getDeclaredField->lookupJavaField->add->fields->metaAccess->getDeclaredField->lookupJavaField->add->fields->metaAccess->getDeclaredField->lookupJavaField->add->catch->throw->new->GraalError->finally->return->nonEmbeddableFields->contains
HotSpotGraalConstantFieldProvider#isFinalFieldValueConstant(ResolvedJavaField, JavaConstant, ConstantFieldTool)::: hot spot graal constant field provider is final field value constant:::if->super->isFinalFieldValueConstant->return->if->field->isStatic->receiver->tool->getReceiver->if->getSnippetCounterType->isInstance->getNodeClassType->isInstance->return->return
HotSpotGraalConstantFieldProvider#isStableFieldValueConstant(ResolvedJavaField, JavaConstant, ConstantFieldTool)::: hot spot graal constant field provider is stable field value constant:::if->super->isStableFieldValueConstant->return->if->field->isStatic->receiver->tool->getReceiver->if->getHotSpotVMConfigType->isInstance->return->return
HotSpotGraalConstantFieldProvider#getHotSpotVMConfigType()::: hot spot graal constant field provider get hot spot config type:::if->metaAccess->lookupJavaType->return
HotSpotGraalConstantFieldProvider#getSnippetCounterType()::: hot spot graal constant field provider get snippet counter type:::if->metaAccess->lookupJavaType->return
HotSpotGraalConstantFieldProvider#getNodeClassType()::: hot spot graal constant field provider get node class type:::if->metaAccess->lookupJavaType->return
HotSpotGraphBuilderPlugins#create(CompilerConfiguration, GraalHotSpotVMConfig, HotSpotWordTypes, MetaAccessProvider, ConstantReflectionProvider, SnippetReflectionProvider, ForeignCallsProvider, ReplacementsImpl, OptionValues):::Creates a Plugins object that should be used when running on HotSpot.:::invocationPlugins->new->HotSpotInvocationPlugins->plugins->new->Plugins->nodeIntrinsificationProvider->new->NodeIntrinsificationProvider->wordOperationPlugin->new->HotSpotWordOperationPlugin->nodePlugin->new->HotSpotNodePlugin->plugins->appendTypePlugin->plugins->appendNodePlugin->if->GeneratePIC->getValue->plugins->constantReflection->getMethodHandleAccess->new->MethodHandlePlugin->appendNodePlugin->plugins->appendInlineInvokePlugin->if->InlineDuringParsing->getValue->plugins->new->InlineDuringParsingPlugin->appendInlineInvokePlugin->if->GeneratePIC->getValue->plugins->new->HotSpotClassInitializationPlugin->setClassInitializationPlugin->if->TieredAOT->getValue->plugins->new->HotSpotAOTProfilingPlugin->setProfilingPlugin->invocationPlugins->new->Runnable->defer->return
HotSpotGraphBuilderPlugins#registerObjectPlugins(InvocationPlugins, OptionValues, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register object plugins:::r->new->Registration->if->GeneratePIC->getValue->r->new->InvocationPlugin->register1->r->registerMethodSubstitution->if->config->inlineNotify->r->registerMethodSubstitution->if->config->inlineNotifyAll->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerClassPlugins(Plugins, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register class plugins:::r->plugins->getInvocationPlugins->new->Registration->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->if->config->getFieldOffset->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerCallSitePlugins(InvocationPlugins)::: hot spot graph builder plugins register call site plugins:::plugin->new->InvocationPlugin->plugins->register->plugins->register->plugins->register
HotSpotGraphBuilderPlugins#registerReflectionPlugins(InvocationPlugins, BytecodeProvider)::: hot spot graph builder plugins register reflection plugins:::r->new->Registration->r->new->InvocationPlugin->register0->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerUnsafePlugins(InvocationPlugins, BytecodeProvider)::: hot spot graph builder plugins register unsafe plugins:::r->if->new->Registration->else->new->Registration->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#getMetaspaceConstantPool(GraphBuilderContext, ValueNode, WordTypes, GraalHotSpotVMConfig):::Emits a node to get the metaspace ConstantPool pointer given the value of the constantPoolOop field in a ConstantPool value.:::value->b->nullCheckedValue->klass->b->ClassGetHubNode->b->getMetaAccess->b->getConstantReflection->create->add->notCompressible->constantsAddress->b->b->ConstantNode->forLong->add->new->OffsetAddressNode->add->return->WordOperationPlugin->wordTypes->getWordKind->readOp
HotSpotGraphBuilderPlugins#readMetaspaceConstantPoolElement(GraphBuilderContext, ValueNode, ValueNode, JavaKind, WordTypes, GraalHotSpotVMConfig):::Emits a node representing an element in a metaspace ConstantPool.:::constants->getMetaspaceConstantPool->shift->CodeUtil->wordTypes->getWordKind->getByteCount->log2->scaledIndex->b->IntegerConvertNode->StampFactory->forKind->convert->b->ConstantNode->forInt->add->new->LeftShiftNode->add->offset->b->b->ConstantNode->forLong->add->new->AddNode->add->elementAddress->b->new->OffsetAddressNode->add->notCompressible->elementValue->WordOperationPlugin->NamedLocationIdentity->getArrayLocation->readOp->b->addPush->return
HotSpotGraphBuilderPlugins#registerConstantPoolPlugins(InvocationPlugins, WordTypes, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register constant pool plugins:::r->new->Registration->r->new->InvocationPlugin->register2->r->new->InvocationPlugin->register3->r->new->InvocationPlugin->register3->r->new->InvocationPlugin->register3->r->new->InvocationPlugin->register3
HotSpotGraphBuilderPlugins#registerSystemPlugins(InvocationPlugins, ForeignCallsProvider)::: hot spot graph builder plugins register system plugins:::r->new->Registration->r->new->ForeignCallPlugin->register0->r->new->ForeignCallPlugin->register0->r->new->InvocationPlugin->register1->r->new->InvocationPlugin->register5
HotSpotGraphBuilderPlugins#registerArrayPlugins(InvocationPlugins, BytecodeProvider)::: hot spot graph builder plugins register array plugins:::r->new->Registration->r->setAllowOverwrite->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerStringPlugins(InvocationPlugins, BytecodeProvider)::: hot spot graph builder plugins register string plugins:::if->utf16r->new->Registration->utf16r->registerMethodSubstitution->utf16r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerThreadPlugins(InvocationPlugins, MetaAccessProvider, WordTypes, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register thread plugins:::r->new->Registration->r->new->InvocationPlugin->register0->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#cbcUsesImplNames(GraalHotSpotVMConfig)::: hot spot graph builder plugins cbc uses impl names:::foreach->config->getStore->getIntrinsics->if->equals->if->equals->return->else->if->equals->return->throw->GraalError->shouldNotReachHere
HotSpotGraphBuilderPlugins#registerAESPlugins(InvocationPlugins, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register plugins:::if->arch->decryptSuffix->arch->equals->r->new->Registration->implNames->cbcUsesImplNames->cbcEncryptName->cbcDecryptName->r->registerMethodSubstitution->r->registerMethodSubstitution->new->Registration->r->registerMethodSubstitution->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerBigIntegerPlugins(InvocationPlugins, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register big integer plugins:::r->new->Registration->if->config->useMultiplyToLenIntrinsic->if->r->registerMethodSubstitution->else->r->registerMethodSubstitution->if->config->useMulAddIntrinsic->r->registerMethodSubstitution->if->config->useMontgomeryMultiplyIntrinsic->r->registerMethodSubstitution->if->config->useMontgomerySquareIntrinsic->r->registerMethodSubstitution->if->config->useSquareToLenIntrinsic->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerSHAPlugins(InvocationPlugins, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register plugins:::useSha1->config->useSHA1Intrinsics->useSha256->config->useSHA256Intrinsics->useSha512->config->useSHA512Intrinsics->if->r->new->Registration->r->registerMethodSubstitution->if->r->new->Registration->r->registerMethodSubstitution->if->r->new->Registration->r->registerMethodSubstitution->if->r->new->Registration->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerGHASHPlugins(InvocationPlugins, GraalHotSpotVMConfig, MetaAccessProvider, ForeignCallsProvider)::: hot spot graph builder plugins register plugins:::if->config->useGHASHIntrinsics->r->new->Registration->r->new->InvocationPlugin->register5
HotSpotGraphBuilderPlugins#registerCounterModePlugins(InvocationPlugins, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register counter mode plugins:::if->r->new->Registration->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerBase64Plugins(InvocationPlugins, GraalHotSpotVMConfig, MetaAccessProvider, ForeignCallsProvider)::: hot spot graph builder plugins register base64 plugins:::if->config->useBase64Intrinsics->r->new->Registration->r->new->InvocationPlugin->register7
HotSpotGraphBuilderPlugins#registerCRC32Plugins(InvocationPlugins, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register c32 plugins:::if->r->new->Registration->r->registerMethodSubstitution->if->r->registerMethodSubstitution->r->registerMethodSubstitution->else->r->registerMethodSubstitution->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerCRC32CPlugins(InvocationPlugins, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register c32 plugins:::if->r->new->Registration->r->registerMethodSubstitution->r->registerMethodSubstitution
HotSpotGraphBuilderPlugins#registerArraysSupportPlugins(InvocationPlugins, GraalHotSpotVMConfig, BytecodeProvider)::: hot spot graph builder plugins register arrays support plugins:::if->r->new->Registration->r->registerMethodSubstitution
HotSpotHostForeignCallsProvider#link(Stub)::: hot spot host foreign calls provider link:::stub->getLinkage->setCompiledStub
HotSpotHostForeignCallsProvider#lookupCheckcastArraycopyDescriptor(boolean)::: hot spot host foreign calls provider lookup checkcast arraycopy descriptor:::return
HotSpotHostForeignCallsProvider#lookupArraycopyDescriptor(JavaKind, boolean, boolean, boolean, boolean)::: hot spot host foreign calls provider lookup arraycopy descriptor:::if->return->if->return->get->return->get
HotSpotHostForeignCallsProvider#registerArraycopyDescriptor(EconomicMap, JavaKind, boolean, boolean, boolean, boolean, long)::: hot spot host foreign calls provider register arraycopy descriptor:::desc->descMap->get->if->buildDescriptor->descMap->put->if->else->if->put->else->put
HotSpotHostForeignCallsProvider#buildDescriptor(JavaKind, boolean, boolean, boolean, boolean, long)::: hot spot host foreign calls provider build descriptor:::name->desc->new->ForeignCallDescriptor->killed->LocationIdentity->any->NamedLocationIdentity->getArrayLocation->registerForeignCall->return
HotSpotHostForeignCallsProvider#registerCheckcastArraycopyDescriptor(boolean, long)::: hot spot host foreign calls provider register checkcast arraycopy descriptor:::name->desc->new->ForeignCallDescriptor->killed->NamedLocationIdentity->any->registerForeignCall
HotSpotHostForeignCallsProvider#registerArrayCopy(JavaKind, long, long, long, long)::: hot spot host foreign calls provider register array copy:::registerArrayCopy
HotSpotHostForeignCallsProvider#registerArrayCopy(JavaKind, long, long, long, long, boolean)::: hot spot host foreign calls provider register array copy:::descMap->EconomicMap->create->registerArraycopyDescriptor->registerArraycopyDescriptor->registerArraycopyDescriptor->registerArraycopyDescriptor->if->killAnyDescMap->EconomicMap->create->registerArraycopyDescriptor->registerArraycopyDescriptor->registerArraycopyDescriptor->registerArraycopyDescriptor
HotSpotHostForeignCallsProvider#initialize(HotSpotProviders, OptionValues)::: hot spot host foreign calls provider initialize:::c->runtime->getVMConfig->registerForeignCall->registerForeignCall->registerForeignCall->if->registerForeignCall->registerForeignCall->registerForeignCall->registerForeignCall->registerMathStubs->registerForeignCall->registerForeignCall->any->registerForeignCall->any->registerForeignCall->any->registerForeignCall->CreateExceptionStub->registerForeignCalls->registerForeignCall->registerForeignCall->linkForeignCall->linkForeignCall->linkForeignCall->linkForeignCall->if->c->areNullAllocationStubsAvailable->linkForeignCall->linkForeignCall->linkForeignCall->linkForeignCall->foreignCalls->get->new->ExceptionHandlerStub->link->any->registerStubCall->new->UnwindExceptionToCallerStub->link->registerStubCall->new->VerifyOopStub->link->exceptionRuntimeCalls->exceptionRuntimeCalls->get->any->registerStubCall->new->ArrayStoreExceptionStub->link->exceptionRuntimeCalls->get->any->registerStubCall->new->ClassCastExceptionStub->link->exceptionRuntimeCalls->get->any->registerStubCall->new->NullPointerExceptionStub->link->exceptionRuntimeCalls->get->any->registerStubCall->new->OutOfBoundsExceptionStub->link->exceptionRuntimeCalls->get->any->registerStubCall->new->DivisionByZeroExceptionStub->link->exceptionRuntimeCalls->get->any->registerStubCall->new->IntegerExactOverflowExceptionStub->link->exceptionRuntimeCalls->get->any->registerStubCall->new->LongExactOverflowExceptionStub->link->linkForeignCall->any->linkForeignCall->any->linkForeignCall->any->linkForeignCall->any->linkForeignCall->any->linkForeignCall->linkForeignCall->linkForeignCall->linkForeignCall->linkForeignCall->linkForeignCall->linkForeignCall->linkForeignCall->linkForeignCall->if->GeneratePIC->getValue->registerForeignCall->cr->HotSpotJVMCIRuntime->runtime->getConfigStore->new->CompilerRuntimeHotSpotVMConfig->linkForeignCall->any->linkForeignCall->any->linkForeignCall->linkForeignCall->any->linkForeignCall->linkForeignCall->linkForeignCall->any->linkForeignCall->registerArrayCopy->registerArrayCopy->registerArrayCopy->registerArrayCopy->registerArrayCopy->registerArrayCopy->registerArrayCopy->registerArrayCopy->registerArrayCopy->registerArrayCopy->registerCheckcastArraycopyDescriptor->registerCheckcastArraycopyDescriptor->NamedLocationIdentity->any->registerForeignCall->NamedLocationIdentity->any->registerForeignCall->if->c->useMultiplyToLenIntrinsic->NamedLocationIdentity->getArrayLocation->registerForeignCall->if->c->useSHA1Intrinsics->NamedLocationIdentity->any->registerForeignCall->NamedLocationIdentity->any->registerForeignCall->if->c->useSHA256Intrinsics->NamedLocationIdentity->any->registerForeignCall->NamedLocationIdentity->any->registerForeignCall->if->c->useSHA512Intrinsics->NamedLocationIdentity->any->registerForeignCall->NamedLocationIdentity->any->registerForeignCall->if->c->useGHASHIntrinsics->NamedLocationIdentity->any->registerForeignCall->if->c->useBase64Intrinsics->NamedLocationIdentity->any->registerForeignCall->if->c->useMulAddIntrinsic->NamedLocationIdentity->getArrayLocation->registerForeignCall->if->c->useMontgomeryMultiplyIntrinsic->NamedLocationIdentity->getArrayLocation->registerForeignCall->if->c->useMontgomerySquareIntrinsic->NamedLocationIdentity->getArrayLocation->registerForeignCall->if->c->useSquareToLenIntrinsic->NamedLocationIdentity->getArrayLocation->registerForeignCall->if->try->NamedLocationIdentity->getArrayLocation->registerForeignCall->NamedLocationIdentity->getArrayLocation->registerForeignCall->NamedLocationIdentity->getArrayLocation->registerForeignCall->catch->if->e->getCause->throw->finally->try->NamedLocationIdentity->getArrayLocation->registerForeignCall->NamedLocationIdentity->getArrayLocation->registerForeignCall->NamedLocationIdentity->getArrayLocation->registerForeignCall->catch->if->e->getCause->throw->finally->if->NamedLocationIdentity->any->registerForeignCall->if->NamedLocationIdentity->any->registerForeignCall
HotSpotHostForeignCallsProvider#getForeignCall(ForeignCallDescriptor)::: hot spot host foreign calls provider get foreign call:::return->foreignCalls->get
HotSpotHostForeignCallsProvider#registerMathStubs(GraalHotSpotVMConfig, HotSpotProviders, OptionValues)::: hot spot host foreign calls provider register math stubs:::registerForeignCall->registerForeignCall->registerForeignCall->registerForeignCall->registerForeignCall->registerForeignCall->registerForeignCall
HotSpotInvocationPlugins#register(InvocationPlugin, boolean, boolean, Type, String, Type...)::: hot spot invocation plugins register:::if->if->name->equals->return->super->register
HotSpotInvocationPlugins#checkNewNodes(GraphBuilderContext, InvocationPlugin, NodeIterable)::: hot spot invocation plugins check new nodes:::foreach->if->if->b->getOptions->getValue->foreach->if->node->hasUsages->c->if->c->getStackKind->AheadOfTimeVerificationPhase->isIllegalObjectConstant->if->isClass->else->if->node->usages->n->hasUsages->filter->isNotEmpty->throw->new->AssertionError->super->checkNewNodes
HotSpotInvocationPlugins#isClass(ConstantNode)::: hot spot invocation plugins is class:::type->StampTool->typeOrNull->return->type->getName->equals
HotSpotInvocationPlugins#canBeIntrinsified(ResolvedJavaType)::: hot spot invocation plugins can be intrinsified:::return->intrinsificationPredicate->test
HotSpotInvokeDynamicPlugin#isResolvedDynamicInvoke(ConstantPool, int, int)::: hot spot invoke dynamic plugin is resolved dynamic invoke:::if->if->hscp->isInstance->return->try->return->isResolvedDynamicInvokeMH->invoke->catch->throw->GraalError->shouldNotReachHere->finally->throw->GraalError->shouldNotReachHere
HotSpotInvokeDynamicPlugin#isResolvedDynamicInvoke(GraphBuilderContext, int, int)::: hot spot invoke dynamic plugin is resolved dynamic invoke:::constantPool->builder->getCode->getConstantPool->if->return->return->isResolvedDynamicInvoke
HotSpotInvokeDynamicPlugin#supportsDynamicInvoke(GraphBuilderContext, int, int)::: hot spot invoke dynamic plugin supports dynamic invoke:::return
HotSpotInvokeDynamicPlugin#getDynamicTypeStore()::: hot spot invoke dynamic plugin get dynamic type store:::return
HotSpotInvokeDynamicPlugin#recordDynamicMethod(GraphBuilderContext, int, int, ResolvedJavaMethod)::: hot spot invoke dynamic plugin record dynamic method:::method->builder->getMethod->methodHolder->method->getDeclaringClass->adapter->if->dynoStore->recordAdapter
HotSpotInvokeDynamicPlugin#genAppendixNode(GraphBuilderContext, int, int, JavaConstant, FrameState)::: hot spot invoke dynamic plugin gen appendix node:::appendix->method->builder->getMethod->methodHolder->method->getDeclaringClass->if->dynoStore->recordAppendix->appendixNode->ConstantNode->builder->getMetaAccess->builder->getGraph->forConstant->appendixStamp->appendixNode->stamp->resolveStamp->appendixStamp->unrestricted->resolveNode->new->ResolveDynamicConstantNode->added->builder->append->added->setStateBefore->return
HotSpotInvokeDynamicPlugin.DynamicTypeStore#recordAdapter(int, HotSpotResolvedObjectType, int, HotSpotResolvedJavaMethod)::: dynamic type store record adapter:::
HotSpotInvokeDynamicPlugin.DynamicTypeStore#recordAppendix(int, HotSpotResolvedObjectType, int, JavaConstant)::: dynamic type store record appendix:::
HotSpotLoweringProvider#initialize(OptionValues, Iterable, HotSpotProviders, GraalHotSpotVMConfig)::: hot spot lowering provider initialize:::
HotSpotLoweringProvider#getObjectCloneSnippets()::: hot spot lowering provider get object clone snippets:::
HotSpotLoweringProvider#getForeignCallSnippets()::: hot spot lowering provider get foreign call snippets:::
HotSpotNodePlugin#canChangeStackKind(GraphBuilderContext)::: hot spot node plugin can change stack kind:::if->b->parsingIntrinsic->return->wordOperationPlugin->canChangeStackKind->return
HotSpotNodePlugin#interceptType(GraphBuilderTool, JavaType, boolean)::: hot spot node plugin intercept type:::if->b->parsingIntrinsic->return->wordOperationPlugin->interceptType->return
HotSpotNodePlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: hot spot node plugin handle invoke:::if->b->parsingIntrinsic->wordOperationPlugin->handleInvoke->return->return
HotSpotNodePlugin#handleLoadField(GraphBuilderContext, ValueNode, ResolvedJavaField)::: hot spot node plugin handle load field:::if->ImmutableCode->b->getOptions->getValue->b->parsingIntrinsic->if->object->isConstant->asJavaConstant->object->asJavaConstant->if->tryReadField->return->if->b->parsingIntrinsic->wordOperationPlugin->handleLoadField->return->return
HotSpotNodePlugin#handleLoadStaticField(GraphBuilderContext, ResolvedJavaField)::: hot spot node plugin handle load static field:::if->ImmutableCode->b->getOptions->getValue->b->parsingIntrinsic->if->tryReadField->return->if->b->parsingIntrinsic->wordOperationPlugin->handleLoadStaticField->return->return
HotSpotNodePlugin#tryReadField(GraphBuilderContext, ResolvedJavaField, JavaConstant)::: hot spot node plugin try read field:::return->tryConstantFold
HotSpotNodePlugin#tryConstantFold(GraphBuilderContext, ResolvedJavaField, JavaConstant)::: hot spot node plugin try constant fold:::result->ConstantFoldUtil->b->getConstantFieldProvider->b->getConstantReflection->b->getMetaAccess->b->getOptions->tryConstantFold->if->b->getGraph->unique->b->field->getJavaKind->push->return->return
HotSpotNodePlugin#handleStoreField(GraphBuilderContext, ValueNode, ResolvedJavaField, ValueNode)::: hot spot node plugin handle store field:::if->b->parsingIntrinsic->wordOperationPlugin->handleStoreField->return->return
HotSpotNodePlugin#handleStoreStaticField(GraphBuilderContext, ResolvedJavaField, ValueNode)::: hot spot node plugin handle store static field:::if->b->parsingIntrinsic->wordOperationPlugin->handleStoreStaticField->return->return
HotSpotNodePlugin#handleLoadIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, JavaKind)::: hot spot node plugin handle load indexed:::if->b->parsingIntrinsic->wordOperationPlugin->handleLoadIndexed->return->return
HotSpotNodePlugin#handleStoreIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, GuardingNode, JavaKind, ValueNode)::: hot spot node plugin handle store indexed:::if->b->parsingIntrinsic->wordOperationPlugin->handleStoreIndexed->return->return
HotSpotNodePlugin#handleCheckCast(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)::: hot spot node plugin handle check cast:::if->b->parsingIntrinsic->wordOperationPlugin->handleCheckCast->return->return
HotSpotNodePlugin#handleInstanceOf(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)::: hot spot node plugin handle instance of:::if->b->parsingIntrinsic->wordOperationPlugin->handleInstanceOf->return->return
HotSpotNodePlugin#instrumentExceptionDispatch(StructuredGraph, FixedWithNextNode)::: hot spot node plugin instrument exception dispatch:::id->graph->compilationId->if->request->getRequest->if->compileState->request->getJvmciEnv->if->canPostOnExceptionsOffset->canPostOnExceptions->UNSAFE->getByte->if->thread->graph->wordTypes->getWordKind->new->CurrentJavaThreadNode->unique->offset->graph->ConstantNode->forLong->unique->address->graph->new->OffsetAddressNode->unique->shouldPostException->graph->StampFactory->intValue->new->ReadNode->add->afterExceptionLoaded->setNext->zero->graph->ConstantNode->forInt->unique->cond->graph->new->IntegerEqualsNode->unique->check->graph->new->FixedGuardNode->add->shouldPostException->setNext->return->return
HotSpotObjdumpDisassemblerProvider#disassembleCompiledCode(CodeCacheProvider, CompilationResult)::: hot spot objdump disassembler provider disassemble compiled code:::if->return->tmp->try->File->createTempFile->try->fos->new->FileOutputStream->fos->compResult->getTargetCode->write->catch->finally->cmdline->arch->Services->getSavedProperties->get->if->arch->equals->arch->equals->new->StringArr->tmp->getAbsolutePath->else->if->arch->equals->new->StringArr->tmp->getAbsolutePath->else->return->p->Pattern->compile->target->codeCache->getTarget->regConfig->codeCache->getRegisterConfig->fp->regConfig->getFrameRegister->slotFormatter->new->DefaultRefMapFormatter->annotations->new->HashMap<>->foreach->compResult->getDataPatches->toString->putAnnotation->foreach->compResult->getMarks->codeCache->getMarkName->putAnnotation->foreach->compResult->getCodeAnnotations->a->toString->putAnnotation->foreach->compResult->getInfopoints->if->call->if->CodeUtil->new->StringBuilder->append->toString->putAnnotation->codeCache->getTargetName->putAnnotation->else->if->CodeUtil->new->StringBuilder->append->toString->putAnnotation->putAnnotation->proc->Runtime->getRuntime->exec->is->proc->getInputStream->sb->new->StringBuilder->isr->new->InputStreamReader->try->br->new->BufferedReader->line->while->br->readLine->m->p->matcher->if->m->find->address->Integer->m->group->parseInt->annotation->annotations->get->if->annotation->replace->sb->append->append->append->m->replaceAll->sb->append->append->catch->finally->try->ebr->proc->getErrorStream->new->InputStreamReader->new->BufferedReader->errLine->ebr->readLine->if->CollectionsUtil->String->valueOf->quoteShellArg->mapAndJoin->println->println->while->ebr->readLine->println->catch->finally->return->sb->toString->catch->e->printStackTrace->return->finally->if->tmp->delete
HotSpotObjdumpDisassemblerProvider#quoteShellArg(String):::Reliably quote a string as a single shell command argument.:::if->arg->isEmpty->return->m->SAFE_SHELL_ARG->matcher->if->m->matches->return->return->arg->replace
HotSpotObjdumpDisassemblerProvider#getObjdump():::Searches for a valid GNU objdump executable.:::foreach->new->StringArr->try->cmd->proc->Runtime->getRuntime->exec->is->proc->getInputStream->exitValue->proc->waitFor->if->buf->is->available->new->byteArr->pos->while->read->is->read->output->new->String->if->output->contains->return->catch->finally->return
HotSpotObjdumpDisassemblerProvider#putAnnotation(Map, int, String)::: hot spot objdump disassembler provider put annotation:::newAnnotation->annotations->getOrDefault->annotations->put
HotSpotObjdumpDisassemblerProvider#disassembleInstalledCode(CodeCacheProvider, CompilationResult, InstalledCode)::: hot spot objdump disassembler provider disassemble installed code:::return->disassemble
HotSpotObjdumpDisassemblerProvider#getName()::: hot spot objdump disassembler provider get name:::return
HotSpotProfilingPlugin#invokeNotifyFreqLog(OptionValues)::: hot spot profiling plugin invoke notify freq log:::
HotSpotProfilingPlugin#invokeInlineeNotifyFreqLog(OptionValues)::: hot spot profiling plugin invoke inlinee notify freq log:::
HotSpotProfilingPlugin#invokeProfilePobabilityLog(OptionValues)::: hot spot profiling plugin invoke profile pobability log:::
HotSpotProfilingPlugin#backedgeNotifyFreqLog(OptionValues)::: hot spot profiling plugin backedge notify freq log:::
HotSpotProfilingPlugin#backedgeProfilePobabilityLog(OptionValues)::: hot spot profiling plugin backedge profile pobability log:::
HotSpotProfilingPlugin#shouldProfile(GraphBuilderContext, ResolvedJavaMethod)::: hot spot profiling plugin should profile:::return->builder->parsingIntrinsic
HotSpotProfilingPlugin#profileInvoke(GraphBuilderContext, ResolvedJavaMethod, FrameState)::: hot spot profiling plugin profile invoke:::options->builder->getOptions->if->getValue->method->isClassInitializer->p->builder->invokeNotifyFreqLog->invokeProfilePobabilityLog->new->ProfileInvokeNode->append->p->setStateBefore
HotSpotProfilingPlugin#profileGoto(GraphBuilderContext, ResolvedJavaMethod, int, int, FrameState)::: hot spot profiling plugin profile goto:::options->builder->getOptions->if->getValue->p->builder->backedgeNotifyFreqLog->backedgeProfilePobabilityLog->new->ProfileBranchNode->append->p->setStateBefore
HotSpotProfilingPlugin#profileIf(GraphBuilderContext, ResolvedJavaMethod, int, LogicNode, int, int, FrameState)::: hot spot profiling plugin profile if:::options->builder->getOptions->if->getValue->negate->targetBci->if->else->trueValue->builder->ConstantNode->forBoolean->append->falseValue->builder->ConstantNode->forBoolean->append->branchCondition->builder->new->ConditionalNode->append->p->builder->backedgeNotifyFreqLog->backedgeProfilePobabilityLog->new->ProfileBranchNode->append->p->setStateBefore
HotSpotProviders#getCodeCache()::: hot spot providers get code cache:::return->super->getCodeCache
HotSpotProviders#getForeignCalls()::: hot spot providers get foreign calls:::return->super->getForeignCalls
HotSpotProviders#getSuites()::: hot spot providers get suites:::return
HotSpotProviders#getRegisters()::: hot spot providers get registers:::return
HotSpotProviders#getSnippetReflection()::: hot spot providers get snippet reflection:::return
HotSpotProviders#getGraphBuilderPlugins()::: hot spot providers get graph builder plugins:::return
HotSpotProviders#getWordTypes()::: hot spot providers get word types:::return
HotSpotProviders#getGC()::: hot spot providers get c:::return
HotSpotProviders#copyWith(MetaAccessProvider)::: hot spot providers copy with:::return->getCodeCache->getConstantReflection->getConstantFieldProvider->getForeignCalls->getLowerer->getReplacements->getSuites->getRegisters->getSnippetReflection->getWordTypes->getGraphBuilderPlugins->getGC->new->HotSpotProviders
HotSpotProviders#copyWith(CodeCacheProvider)::: hot spot providers copy with:::return->getMetaAccess->getConstantReflection->getConstantFieldProvider->getForeignCalls->getLowerer->getReplacements->getSuites->getRegisters->getSnippetReflection->getWordTypes->getGraphBuilderPlugins->getGC->new->HotSpotProviders
HotSpotProviders#copyWith(ConstantReflectionProvider)::: hot spot providers copy with:::return->getMetaAccess->getCodeCache->getConstantFieldProvider->getForeignCalls->getLowerer->getReplacements->getSuites->getRegisters->getSnippetReflection->getWordTypes->getGraphBuilderPlugins->getGC->new->HotSpotProviders
HotSpotProviders#copyWith(ConstantFieldProvider)::: hot spot providers copy with:::return->getMetaAccess->getCodeCache->getConstantReflection->getForeignCalls->getLowerer->getReplacements->getSuites->getRegisters->getSnippetReflection->getWordTypes->getGraphBuilderPlugins->getGC->new->HotSpotProviders
HotSpotProviders#copyWith(ForeignCallsProvider)::: hot spot providers copy with:::return->getMetaAccess->getCodeCache->getConstantReflection->getConstantFieldProvider->getLowerer->getReplacements->getSuites->getRegisters->getSnippetReflection->getWordTypes->getGraphBuilderPlugins->getGC->new->HotSpotProviders
HotSpotProviders#copyWith(LoweringProvider)::: hot spot providers copy with:::return->getMetaAccess->getCodeCache->getConstantReflection->getConstantFieldProvider->getForeignCalls->getReplacements->getSuites->getRegisters->getSnippetReflection->getWordTypes->getGraphBuilderPlugins->getGC->new->HotSpotProviders
HotSpotProviders#copyWith(Replacements)::: hot spot providers copy with:::return->getMetaAccess->getCodeCache->getConstantReflection->getConstantFieldProvider->getForeignCalls->getLowerer->getSuites->getRegisters->getSnippetReflection->getWordTypes->getGraphBuilderPlugins->getGC->new->HotSpotProviders
HotSpotProviders#copyWith(Plugins)::: hot spot providers copy with:::return->getMetaAccess->getCodeCache->getConstantReflection->getConstantFieldProvider->getForeignCalls->getLowerer->getReplacements->getSuites->getRegisters->getSnippetReflection->getWordTypes->getGC->new->HotSpotProviders
HotSpotRegisters#getThreadRegister()::: hot spot registers get thread register:::return
HotSpotRegisters#getHeapBaseRegister()::: hot spot registers get heap base register:::return
HotSpotRegisters#getStackPointerRegister()::: hot spot registers get stack pointer register:::return
HotSpotRegistersProvider#getThreadRegister():::Gets the register holding the current thread.:::
HotSpotRegistersProvider#getHeapBaseRegister():::Gets the register holding the heap base address for compressed pointers.:::
HotSpotRegistersProvider#getStackPointerRegister():::Gets the stack pointer register.:::
HotSpotSnippetReflectionProvider#forObject(Object)::: hot spot snippet reflection provider for object:::return->constantReflection->forObject
HotSpotSnippetReflectionProvider#asObject(Class, JavaConstant)::: hot spot snippet reflection provider as object:::if->constant->isNull->return->if->hsConstant->return->hsConstant->asObject->return
HotSpotSnippetReflectionProvider#forBoxed(JavaKind, Object)::: hot spot snippet reflection provider for boxed:::if->return->forObject->else->return->JavaConstant->forBoxedPrimitive
HotSpotSnippetReflectionProvider#getInjectedNodeIntrinsicParameter(Class)::: hot spot snippet reflection provider get injected node intrinsic parameter:::config->runtime->getVMConfig->if->wordTypes->getClass->runtime->getClass->config->getClass->if->type->isAssignableFrom->return->type->cast->if->type->isAssignableFrom->return->type->cast->if->type->isAssignableFrom->return->type->cast->return
HotSpotSnippetReflectionProvider#originalClass(ResolvedJavaType)::: hot spot snippet reflection provider original class:::return->runtime->getMirror
HotSpotStampProvider#createHubStamp(ObjectStamp)::: hot spot stamp provider create hub stamp:::return->KlassPointerStamp->klassNonNull
HotSpotStampProvider#createMethodStamp()::: hot spot stamp provider create method stamp:::return->MethodPointerStamp->methodNonNull
HotSpotSuitesProvider#createSuites(OptionValues)::: hot spot suites provider create suites:::ret->defaultSuitesCreator->createSuites->if->ImmutableCode->getValue->ret->getHighTier->new->LoadJavaMirrorWithKlassPhase->appendPhase->if->VerifyPhases->getValue->ret->getHighTier->new->AheadOfTimeVerificationPhase->appendPhase->if->GeneratePIC->getValue->highTierLowering->ret->getHighTier->findPhase->highTierLowering->previous->highTierLowering->new->EliminateRedundantInitializationPhase->add->if->getValue->highTierLowering->getValue->new->FinalizeProfileNodesPhase->add->midTierLowering->ret->getMidTier->findPhase->midTierLowering->new->ReplaceConstantNodesPhase->add->if->Inline->getValue->iter->ret->getHighTier->findPhase->inlining->iter->previous->canonicalizer->inlining->getCanonicalizer->iter->new->AOTInliningPolicy->new->InliningPhase->set->return
HotSpotSuitesProvider#createGraphBuilderSuite()::: hot spot suites provider create graph builder suite:::suite->defaultSuitesCreator->getDefaultGraphBuilderSuite->copy->return
HotSpotSuitesProvider#appendGraphEncoderTest(PhaseSuite):::When assertions are enabled, we encode and decode every parsed graph, to ensure that the encoding and decoding process work correctly:::suite->new->BasePhase<HighTierContext>->appendPhase->return
HotSpotSuitesProvider#withNodeSourcePosition(PhaseSuite):::Modifies a given GraphBuilderConfiguration to record per node source information.:::newGbs->gbs->copy->graphBuilderPhase->newGbs->findPhase->previous->graphBuilderConfig->graphBuilderPhase->getGraphBuilderConfig->newGraphBuilderPhase->graphBuilderConfig->withNodeSourcePosition->new->GraphBuilderPhase->newGbs->findPhase->set->return
HotSpotSuitesProvider#createLIRSuites(OptionValues)::: hot spot suites provider create suites:::suites->defaultSuitesCreator->createLIRSuites->profileInstructions->getValue->if->suites->getPostAllocationOptimizationStage->new->HotSpotInstructionProfiling->appendPhase->if->Assertions->detailedAssertionsEnabled->suites->getPostAllocationOptimizationStage->new->VerifyMaxRegisterSizePhase->appendPhase->return
HotSpotUnsafeSubstitutions#copyMemory(Object, Object, long, Object, long, long)::: hot spot unsafe substitutions copy memory:::srcAddr->WordFactory->ComputeObjectAddressNode->get->unsigned->dstAddr->WordFactory->ComputeObjectAddressNode->get->unsigned->size->WordFactory->signed->HotSpotBackend->unsafeArraycopy
HotSpotWordOperationPlugin#createLoadIndexedNode(ValueNode, ValueNode, GuardingNode)::: hot spot word operation plugin create load indexed node:::arrayType->StampTool->typeOrNull->componentStamp->wordTypes->arrayType->getComponentType->getWordStamp->if->return->new->LoadIndexedPointerNode->else->return->super->createLoadIndexedNode
HotSpotWordOperationPlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])::: hot spot word operation plugin handle invoke:::if->wordTypes->isWordOperation->return->operation->BridgeMethodUtils->getAnnotation->if->wordTypes->b->getMethod->getDeclaringClass->getWordOperation->processWordOperation->return->processHotSpotWordOperation->return
HotSpotWordOperationPlugin#processHotSpotWordOperation(GraphBuilderContext, ResolvedJavaMethod, ValueNode[], HotSpotOperation)::: hot spot word operation plugin process hot spot word operation:::returnKind->method->getSignature->getReturnKind->switch->operation->opcode->opcode->operation->opcode->left->right->comparison->b->new->PointerEqualsNode->add->eqValue->b->forBoolean->add->neValue->b->forBoolean->add->b->ConditionalNode->create->addPush->break->pointer->isNull->b->IsNullNode->create->add->b->ConditionalNode->b->forBoolean->add->b->forBoolean->add->create->addPush->break->b->StampFactory->forKind->new->PointerCastNode->addPush->break->b->KlassPointerStamp->klass->new->PointerCastNode->addPush->break->b->MethodPointerStamp->method->new->PointerCastNode->addPush->break->readStamp->KlassPointerStamp->klass->address->makeAddress->location->if->any->else->snippetReflection->asJavaConstant->asObject->read->b->new->ReadNode->add->b->push->break->throw->GraalError->operation->opcode->shouldNotReachHere

org.graalvm.compiler.hotspot.meta.HotSpotAOTProfilingPlugin_OptionDescriptors#get(String)->OptionDescriptor::: hot spot profiling plugin_ option descriptors get
org.graalvm.compiler.hotspot.meta.HotSpotAOTProfilingPlugin_OptionDescriptors#iterator()->Iterator::: hot spot profiling plugin_ option descriptors iterator
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin_OptionDescriptors#get(String)->OptionDescriptor::: hot spot profiling plugin_ option descriptors get
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin_OptionDescriptors#iterator()->Iterator::: hot spot profiling plugin_ option descriptors iterator
org.graalvm.compiler.hotspot.meta.AddressLoweringHotSpotSuitesProvider#createSuites(OptionValues)->Suites::: address lowering hot spot suites provider create suites
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#initialize(OptionValues, Iterable, HotSpotProviders, GraalHotSpotVMConfig)->void::: default hot spot lowering provider initialize
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#getArraycopySnippets()->ArrayCopySnippets.Templates::: default hot spot lowering provider get arraycopy snippets
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#getMonitorSnippets()->MonitorSnippets.Templates::: default hot spot lowering provider get monitor snippets
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#lower(Node, LoweringTool)->void::: default hot spot lowering provider lower
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#loadCompressedStamp(ObjectStamp)->Stamp::: default hot spot lowering provider load compressed stamp
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#newCompressionNode(CompressionOp, ValueNode)->ValueNode::: default hot spot lowering provider new compression node
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#staticFieldBase(StructuredGraph, ResolvedJavaField)->ValueNode::: default hot spot lowering provider static field base
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#createReadArrayComponentHub(StructuredGraph, ValueNode, FixedNode)->ValueNode::: default hot spot lowering provider create read array component hub
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#lowerUnsafeLoadNode(RawLoadNode, LoweringTool)->void::: default hot spot lowering provider lower unsafe load node
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#createReadHub(StructuredGraph, ValueNode, LoweringTool)->ValueNode::: default hot spot lowering provider create read hub
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#fieldLoadBarrierType(ResolvedJavaField)->BarrierType::: default hot spot lowering provider field load barrier type
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#fieldOffset(ResolvedJavaField)->int::: default hot spot lowering provider field offset
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#arrayLengthOffset()->int::: default hot spot lowering provider array length offset
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#getStorageKind(ResolvedJavaField)->JavaKind::: default hot spot lowering provider get storage kind
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#getObjectCloneSnippets()->ObjectCloneSnippets.Templates::: default hot spot lowering provider get object clone snippets
org.graalvm.compiler.hotspot.meta.DefaultHotSpotLoweringProvider#getForeignCallSnippets()->ForeignCallSnippets.Templates::: default hot spot lowering provider get foreign call snippets
org.graalvm.compiler.hotspot.meta.HotSpotAOTProfilingPlugin#shouldProfile(GraphBuilderContext, ResolvedJavaMethod)->boolean::: hot spot profiling plugin should profile
org.graalvm.compiler.hotspot.meta.HotSpotAOTProfilingPlugin#invokeNotifyFreqLog(OptionValues)->int::: hot spot profiling plugin invoke notify freq log
org.graalvm.compiler.hotspot.meta.HotSpotAOTProfilingPlugin#invokeInlineeNotifyFreqLog(OptionValues)->int::: hot spot profiling plugin invoke inlinee notify freq log
org.graalvm.compiler.hotspot.meta.HotSpotAOTProfilingPlugin#invokeProfilePobabilityLog(OptionValues)->int::: hot spot profiling plugin invoke profile pobability log
org.graalvm.compiler.hotspot.meta.HotSpotAOTProfilingPlugin#backedgeNotifyFreqLog(OptionValues)->int::: hot spot profiling plugin backedge notify freq log
org.graalvm.compiler.hotspot.meta.HotSpotAOTProfilingPlugin#backedgeProfilePobabilityLog(OptionValues)->int::: hot spot profiling plugin backedge profile pobability log
org.graalvm.compiler.hotspot.meta.HotSpotClassInitializationPlugin#apply(GraphBuilderContext, ResolvedJavaType, Supplier, ValueNode[])->boolean::: hot spot class initialization plugin apply
org.graalvm.compiler.hotspot.meta.HotSpotClassInitializationPlugin#supportsLazyInitialization(ConstantPool)->boolean::: hot spot class initialization plugin supports lazy initialization
org.graalvm.compiler.hotspot.meta.HotSpotClassInitializationPlugin#loadReferencedType(GraphBuilderContext, ConstantPool, int, int)->void::: hot spot class initialization plugin load referenced type
org.graalvm.compiler.hotspot.meta.HotSpotConstantFieldProvider#isStableField(ResolvedJavaField, ConstantFieldTool)->boolean::: hot spot constant field provider is stable field
org.graalvm.compiler.hotspot.meta.HotSpotConstantFieldProvider#isFinalField(ResolvedJavaField, ConstantFieldTool)->boolean::: hot spot constant field provider is final field
org.graalvm.compiler.hotspot.meta.HotSpotConstantFieldProvider#isStaticFieldConstant(ResolvedJavaField, OptionValues)->boolean::: hot spot constant field provider is static field constant
org.graalvm.compiler.hotspot.meta.HotSpotDisassemblerProvider#disassembleCompiledCode(CodeCacheProvider, CompilationResult)->String::: hot spot disassembler provider disassemble compiled code
org.graalvm.compiler.hotspot.meta.HotSpotDisassemblerProvider#disassembleInstalledCode(CodeCacheProvider, CompilationResult, InstalledCode)->String::: hot spot disassembler provider disassemble installed code
org.graalvm.compiler.hotspot.meta.HotSpotDisassemblerProvider#getName()->String::: hot spot disassembler provider get name
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProvider#getNativeABICallerSaveRegisters()->Value[]:::Gets the registers that must be saved across a foreign call into the runtime.
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProvider#getStubs()->List:::Gets the set of stubs linked to by the foreign calls represented by this object.
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#register(HotSpotForeignCallLinkage)->HotSpotForeignCallLinkage:::Registers the linkage for a foreign call.
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#isRegistered(ForeignCallDescriptor)->boolean:::Return true if the descriptor has already been registered.
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#registerStubCall(ForeignCallDescriptor, Transition, Reexecutability, LocationIdentity...)->HotSpotForeignCallLinkage:::Creates and registers the details for linking a foreign call to a Stub.
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#registerForeignCall(ForeignCallDescriptor, long, CallingConvention.Type, RegisterEffect, Transition, Reexecutability, LocationIdentity...)->HotSpotForeignCallLinkage:::Creates and registers the linkage for a foreign call.
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#linkForeignCall(OptionValues, HotSpotProviders, ForeignCallDescriptor, long, boolean, Transition, Reexecutability, LocationIdentity...)->void:::Creates a ForeignCallStub stub for the foreign call described by descriptor if address != 0.
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#lookupForeignCall(ForeignCallDescriptor)->HotSpotForeignCallLinkage::: hot spot foreign calls provider impl lookup foreign call
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#isAvailable(ForeignCallDescriptor)->boolean::: hot spot foreign calls provider impl is available
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#isReexecutable(ForeignCallDescriptor)->boolean::: hot spot foreign calls provider impl is reexecutable
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#canDeoptimize(ForeignCallDescriptor)->boolean::: hot spot foreign calls provider impl can deoptimize
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#isGuaranteedSafepoint(ForeignCallDescriptor)->boolean::: hot spot foreign calls provider impl is guaranteed safepoint
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#getKilledLocations(ForeignCallDescriptor)->LocationIdentity[]::: hot spot foreign calls provider impl get killed locations
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#getValueKind(JavaKind)->LIRKind::: hot spot foreign calls provider impl get value kind
org.graalvm.compiler.hotspot.meta.HotSpotForeignCallsProviderImpl#getStubs()->List::: hot spot foreign calls provider impl get stubs
org.graalvm.compiler.hotspot.meta.HotSpotGCProvider#getBarrierSet()->BarrierSet::: hot spot provider get barrier set
org.graalvm.compiler.hotspot.meta.HotSpotGCProvider#isWriteToNewObject(FixedAccessNode)->boolean:::For initializing writes, the last allocation executed by the JVM is guaranteed to be automatically card marked so it's safe to skip the card mark in the emitted code.
org.graalvm.compiler.hotspot.meta.HotSpotGraalConstantFieldProvider#isStaticFieldConstant(ResolvedJavaField, OptionValues)->boolean::: hot spot graal constant field provider is static field constant
org.graalvm.compiler.hotspot.meta.HotSpotGraalConstantFieldProvider#isEmbeddableField(ResolvedJavaField)->boolean::: hot spot graal constant field provider is embeddable field
org.graalvm.compiler.hotspot.meta.HotSpotGraalConstantFieldProvider#isFinalFieldValueConstant(ResolvedJavaField, JavaConstant, ConstantFieldTool)->boolean::: hot spot graal constant field provider is final field value constant
org.graalvm.compiler.hotspot.meta.HotSpotGraalConstantFieldProvider#isStableFieldValueConstant(ResolvedJavaField, JavaConstant, ConstantFieldTool)->boolean::: hot spot graal constant field provider is stable field value constant
org.graalvm.compiler.hotspot.meta.HotSpotGraphBuilderPlugins#create(CompilerConfiguration, GraalHotSpotVMConfig, HotSpotWordTypes, MetaAccessProvider, ConstantReflectionProvider, SnippetReflectionProvider, ForeignCallsProvider, ReplacementsImpl, OptionValues)->Plugins:::Creates a Plugins object that should be used when running on HotSpot.
org.graalvm.compiler.hotspot.meta.HotSpotGraphBuilderPlugins#cbcUsesImplNames(GraalHotSpotVMConfig)->boolean::: hot spot graph builder plugins cbc uses impl names
org.graalvm.compiler.hotspot.meta.HotSpotHostForeignCallsProvider#link(Stub)->void::: hot spot host foreign calls provider link
org.graalvm.compiler.hotspot.meta.HotSpotHostForeignCallsProvider#lookupCheckcastArraycopyDescriptor(boolean)->ForeignCallDescriptor::: hot spot host foreign calls provider lookup checkcast arraycopy descriptor
org.graalvm.compiler.hotspot.meta.HotSpotHostForeignCallsProvider#lookupArraycopyDescriptor(JavaKind, boolean, boolean, boolean, boolean)->ForeignCallDescriptor::: hot spot host foreign calls provider lookup arraycopy descriptor
org.graalvm.compiler.hotspot.meta.HotSpotHostForeignCallsProvider#initialize(HotSpotProviders, OptionValues)->void::: hot spot host foreign calls provider initialize
org.graalvm.compiler.hotspot.meta.HotSpotHostForeignCallsProvider#getForeignCall(ForeignCallDescriptor)->HotSpotForeignCallLinkage::: hot spot host foreign calls provider get foreign call
org.graalvm.compiler.hotspot.meta.HotSpotHostForeignCallsProvider#registerMathStubs(GraalHotSpotVMConfig, HotSpotProviders, OptionValues)->void::: hot spot host foreign calls provider register math stubs
org.graalvm.compiler.hotspot.meta.HotSpotInvocationPlugins#register(InvocationPlugin, boolean, boolean, Type, String, Type...)->void::: hot spot invocation plugins register
org.graalvm.compiler.hotspot.meta.HotSpotInvocationPlugins#checkNewNodes(GraphBuilderContext, InvocationPlugin, NodeIterable)->void::: hot spot invocation plugins check new nodes
org.graalvm.compiler.hotspot.meta.HotSpotInvocationPlugins#canBeIntrinsified(ResolvedJavaType)->boolean::: hot spot invocation plugins can be intrinsified
org.graalvm.compiler.hotspot.meta.HotSpotInvokeDynamicPlugin#isResolvedDynamicInvoke(GraphBuilderContext, int, int)->boolean::: hot spot invoke dynamic plugin is resolved dynamic invoke
org.graalvm.compiler.hotspot.meta.HotSpotInvokeDynamicPlugin#supportsDynamicInvoke(GraphBuilderContext, int, int)->boolean::: hot spot invoke dynamic plugin supports dynamic invoke
org.graalvm.compiler.hotspot.meta.HotSpotInvokeDynamicPlugin#getDynamicTypeStore()->DynamicTypeStore::: hot spot invoke dynamic plugin get dynamic type store
org.graalvm.compiler.hotspot.meta.HotSpotInvokeDynamicPlugin#recordDynamicMethod(GraphBuilderContext, int, int, ResolvedJavaMethod)->void::: hot spot invoke dynamic plugin record dynamic method
org.graalvm.compiler.hotspot.meta.HotSpotInvokeDynamicPlugin#genAppendixNode(GraphBuilderContext, int, int, JavaConstant, FrameState)->ValueNode::: hot spot invoke dynamic plugin gen appendix node
org.graalvm.compiler.hotspot.meta.HotSpotInvokeDynamicPlugin.DynamicTypeStore#recordAdapter(int, HotSpotResolvedObjectType, int, HotSpotResolvedJavaMethod)->void::: dynamic type store record adapter
org.graalvm.compiler.hotspot.meta.HotSpotInvokeDynamicPlugin.DynamicTypeStore#recordAppendix(int, HotSpotResolvedObjectType, int, JavaConstant)->JavaConstant::: dynamic type store record appendix
org.graalvm.compiler.hotspot.meta.HotSpotLoweringProvider#initialize(OptionValues, Iterable, HotSpotProviders, GraalHotSpotVMConfig)->void::: hot spot lowering provider initialize
org.graalvm.compiler.hotspot.meta.HotSpotLoweringProvider#getObjectCloneSnippets()->ObjectCloneSnippets.Templates::: hot spot lowering provider get object clone snippets
org.graalvm.compiler.hotspot.meta.HotSpotLoweringProvider#getForeignCallSnippets()->ForeignCallSnippets.Templates::: hot spot lowering provider get foreign call snippets
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#canChangeStackKind(GraphBuilderContext)->boolean::: hot spot node plugin can change stack kind
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#interceptType(GraphBuilderTool, JavaType, boolean)->StampPair::: hot spot node plugin intercept type
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->boolean::: hot spot node plugin handle invoke
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#handleLoadField(GraphBuilderContext, ValueNode, ResolvedJavaField)->boolean::: hot spot node plugin handle load field
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#handleLoadStaticField(GraphBuilderContext, ResolvedJavaField)->boolean::: hot spot node plugin handle load static field
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#handleStoreField(GraphBuilderContext, ValueNode, ResolvedJavaField, ValueNode)->boolean::: hot spot node plugin handle store field
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#handleStoreStaticField(GraphBuilderContext, ResolvedJavaField, ValueNode)->boolean::: hot spot node plugin handle store static field
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#handleLoadIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, JavaKind)->boolean::: hot spot node plugin handle load indexed
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#handleStoreIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, GuardingNode, JavaKind, ValueNode)->boolean::: hot spot node plugin handle store indexed
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#handleCheckCast(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)->boolean::: hot spot node plugin handle check cast
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#handleInstanceOf(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)->boolean::: hot spot node plugin handle instance of
org.graalvm.compiler.hotspot.meta.HotSpotNodePlugin#instrumentExceptionDispatch(StructuredGraph, FixedWithNextNode)->FixedWithNextNode::: hot spot node plugin instrument exception dispatch
org.graalvm.compiler.hotspot.meta.HotSpotObjdumpDisassemblerProvider#disassembleCompiledCode(CodeCacheProvider, CompilationResult)->String::: hot spot objdump disassembler provider disassemble compiled code
org.graalvm.compiler.hotspot.meta.HotSpotObjdumpDisassemblerProvider#quoteShellArg(String)->String:::Reliably quote a string as a single shell command argument.
org.graalvm.compiler.hotspot.meta.HotSpotObjdumpDisassemblerProvider#disassembleInstalledCode(CodeCacheProvider, CompilationResult, InstalledCode)->String::: hot spot objdump disassembler provider disassemble installed code
org.graalvm.compiler.hotspot.meta.HotSpotObjdumpDisassemblerProvider#getName()->String::: hot spot objdump disassembler provider get name
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin#invokeNotifyFreqLog(OptionValues)->int::: hot spot profiling plugin invoke notify freq log
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin#invokeInlineeNotifyFreqLog(OptionValues)->int::: hot spot profiling plugin invoke inlinee notify freq log
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin#invokeProfilePobabilityLog(OptionValues)->int::: hot spot profiling plugin invoke profile pobability log
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin#backedgeNotifyFreqLog(OptionValues)->int::: hot spot profiling plugin backedge notify freq log
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin#backedgeProfilePobabilityLog(OptionValues)->int::: hot spot profiling plugin backedge profile pobability log
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin#shouldProfile(GraphBuilderContext, ResolvedJavaMethod)->boolean::: hot spot profiling plugin should profile
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin#profileInvoke(GraphBuilderContext, ResolvedJavaMethod, FrameState)->void::: hot spot profiling plugin profile invoke
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin#profileGoto(GraphBuilderContext, ResolvedJavaMethod, int, int, FrameState)->void::: hot spot profiling plugin profile goto
org.graalvm.compiler.hotspot.meta.HotSpotProfilingPlugin#profileIf(GraphBuilderContext, ResolvedJavaMethod, int, LogicNode, int, int, FrameState)->void::: hot spot profiling plugin profile if
org.graalvm.compiler.hotspot.meta.HotSpotProviders#getCodeCache()->HotSpotCodeCacheProvider::: hot spot providers get code cache
org.graalvm.compiler.hotspot.meta.HotSpotProviders#getForeignCalls()->HotSpotForeignCallsProvider::: hot spot providers get foreign calls
org.graalvm.compiler.hotspot.meta.HotSpotProviders#getSuites()->SuitesProvider::: hot spot providers get suites
org.graalvm.compiler.hotspot.meta.HotSpotProviders#getRegisters()->HotSpotRegistersProvider::: hot spot providers get registers
org.graalvm.compiler.hotspot.meta.HotSpotProviders#getSnippetReflection()->SnippetReflectionProvider::: hot spot providers get snippet reflection
org.graalvm.compiler.hotspot.meta.HotSpotProviders#getGraphBuilderPlugins()->Plugins::: hot spot providers get graph builder plugins
org.graalvm.compiler.hotspot.meta.HotSpotProviders#getWordTypes()->HotSpotWordTypes::: hot spot providers get word types
org.graalvm.compiler.hotspot.meta.HotSpotProviders#getGC()->HotSpotGCProvider::: hot spot providers get c
org.graalvm.compiler.hotspot.meta.HotSpotProviders#copyWith(MetaAccessProvider)->Providers::: hot spot providers copy with
org.graalvm.compiler.hotspot.meta.HotSpotProviders#copyWith(CodeCacheProvider)->Providers::: hot spot providers copy with
org.graalvm.compiler.hotspot.meta.HotSpotProviders#copyWith(ConstantReflectionProvider)->Providers::: hot spot providers copy with
org.graalvm.compiler.hotspot.meta.HotSpotProviders#copyWith(ConstantFieldProvider)->Providers::: hot spot providers copy with
org.graalvm.compiler.hotspot.meta.HotSpotProviders#copyWith(ForeignCallsProvider)->Providers::: hot spot providers copy with
org.graalvm.compiler.hotspot.meta.HotSpotProviders#copyWith(LoweringProvider)->Providers::: hot spot providers copy with
org.graalvm.compiler.hotspot.meta.HotSpotProviders#copyWith(Replacements)->Providers::: hot spot providers copy with
org.graalvm.compiler.hotspot.meta.HotSpotProviders#copyWith(Plugins)->Providers::: hot spot providers copy with
org.graalvm.compiler.hotspot.meta.HotSpotRegisters#getThreadRegister()->Register::: hot spot registers get thread register
org.graalvm.compiler.hotspot.meta.HotSpotRegisters#getHeapBaseRegister()->Register::: hot spot registers get heap base register
org.graalvm.compiler.hotspot.meta.HotSpotRegisters#getStackPointerRegister()->Register::: hot spot registers get stack pointer register
org.graalvm.compiler.hotspot.meta.HotSpotRegistersProvider#getThreadRegister()->Register:::Gets the register holding the current thread.
org.graalvm.compiler.hotspot.meta.HotSpotRegistersProvider#getHeapBaseRegister()->Register:::Gets the register holding the heap base address for compressed pointers.
org.graalvm.compiler.hotspot.meta.HotSpotRegistersProvider#getStackPointerRegister()->Register:::Gets the stack pointer register.
org.graalvm.compiler.hotspot.meta.HotSpotSnippetReflectionProvider#forObject(Object)->JavaConstant::: hot spot snippet reflection provider for object
org.graalvm.compiler.hotspot.meta.HotSpotSnippetReflectionProvider#asObject(Class, JavaConstant)->T::: hot spot snippet reflection provider as object
org.graalvm.compiler.hotspot.meta.HotSpotSnippetReflectionProvider#forBoxed(JavaKind, Object)->JavaConstant::: hot spot snippet reflection provider for boxed
org.graalvm.compiler.hotspot.meta.HotSpotSnippetReflectionProvider#getInjectedNodeIntrinsicParameter(Class)->T::: hot spot snippet reflection provider get injected node intrinsic parameter
org.graalvm.compiler.hotspot.meta.HotSpotSnippetReflectionProvider#originalClass(ResolvedJavaType)->Class::: hot spot snippet reflection provider original class
org.graalvm.compiler.hotspot.meta.HotSpotStampProvider#createHubStamp(ObjectStamp)->Stamp::: hot spot stamp provider create hub stamp
org.graalvm.compiler.hotspot.meta.HotSpotStampProvider#createMethodStamp()->Stamp::: hot spot stamp provider create method stamp
org.graalvm.compiler.hotspot.meta.HotSpotSuitesProvider#createSuites(OptionValues)->Suites::: hot spot suites provider create suites
org.graalvm.compiler.hotspot.meta.HotSpotSuitesProvider#createGraphBuilderSuite()->PhaseSuite::: hot spot suites provider create graph builder suite
org.graalvm.compiler.hotspot.meta.HotSpotSuitesProvider#withNodeSourcePosition(PhaseSuite)->PhaseSuite:::Modifies a given GraphBuilderConfiguration to record per node source information.
org.graalvm.compiler.hotspot.meta.HotSpotSuitesProvider#createLIRSuites(OptionValues)->LIRSuites::: hot spot suites provider create suites
org.graalvm.compiler.hotspot.meta.HotSpotUnsafeSubstitutions#copyMemory(Object, Object, long, Object, long, long)->void::: hot spot unsafe substitutions copy memory
org.graalvm.compiler.hotspot.meta.HotSpotWordOperationPlugin#createLoadIndexedNode(ValueNode, ValueNode, GuardingNode)->LoadIndexedNode::: hot spot word operation plugin create load indexed node
org.graalvm.compiler.hotspot.meta.HotSpotWordOperationPlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->boolean::: hot spot word operation plugin handle invoke
org.graalvm.compiler.hotspot.meta.HotSpotWordOperationPlugin#processHotSpotWordOperation(GraphBuilderContext, ResolvedJavaMethod, ValueNode[], HotSpotOperation)->void::: hot spot word operation plugin process hot spot word operation

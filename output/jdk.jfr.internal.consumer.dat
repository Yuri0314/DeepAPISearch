ChunkHeader#nextHeader()::: chunk header next header:::return->new->ChunkHeader
ChunkHeader#readMetadata()::: chunk header read metadata:::input->position->input->readInt->id->input->readLong->if->throw->new->IOException->input->readLong->input->readLong->metadataId->input->readLong->Logger->log->return->MetadataDescriptor->read
ChunkHeader#isLastChunk()::: chunk header is last chunk:::return
ChunkHeader#getMajor()::: chunk header get major:::return
ChunkHeader#getMinor()::: chunk header get minor:::return
ChunkHeader#getAbsoluteChunkStart()::: chunk header get absolute chunk start:::return
ChunkHeader#getConstantPoolPosition()::: chunk header get constant pool position:::return
ChunkHeader#getStartTicks()::: chunk header get start ticks:::return
ChunkHeader#getTicksPerSecond()::: chunk header get ticks per second:::return
ChunkHeader#getStartNanos()::: chunk header get start nanos:::return
ChunkHeader#getEnd()::: chunk header get end:::return
ChunkHeader#getSize()::: chunk header get size:::return
ChunkHeader#getDurationNanos()::: chunk header get duration nanos:::return
ChunkHeader#getInput()::: chunk header get input:::return
ChunkHeader#verifyMagic(DataInput)::: chunk header verify magic:::foreach->if->input->readByte->throw->new->IOException
ChunkHeader#getEventStart()::: chunk header get event start:::return
RecordingInput.Block#contains(long)::: block contains:::return
RecordingInput.Block#read(RandomAccessFile, int)::: block read:::file->getFilePointer->if->new->byteArr->file->readFully
RecordingInput.Block#get(long)::: block get:::return
RecordingInput#readByte()::: recording input read byte:::if->currentBlock->contains->position->return->currentBlock->get
RecordingInput#readFully(byte[], int, int)::: recording input read fully:::for->i
RecordingInput#readFully(byte[])::: recording input read fully:::readFully
RecordingInput#readRawShort()::: recording input read raw short:::b0->readByte->b1->readByte->return
RecordingInput#readDouble()::: recording input read double:::return->Double->readRawLong->longBitsToDouble
RecordingInput#readFloat()::: recording input read float:::return->Float->readRawInt->intBitsToFloat
RecordingInput#readRawInt()::: recording input read raw int:::b0->readByte->b1->readByte->b2->readByte->b3->readByte->return
RecordingInput#readRawLong()::: recording input read raw long:::b0->readByte->b1->readByte->b2->readByte->b3->readByte->b4->readByte->b5->readByte->b6->readByte->b7->readByte->return
RecordingInput#position()::: recording input position:::return
RecordingInput#position(long)::: recording input position:::if->currentBlock->contains->if->previousBlock->contains->if->size->throw->size->new->EOFException->blockStart->calculateBlockStart->trimToFileSize->file->seek->amount->Math->size->min->previousBlock->read->tmp
RecordingInput#trimToFileSize(long)::: recording input trim to file size:::return->Math->size->Math->max->min
RecordingInput#calculateBlockStart(long)::: recording input calculate block start:::if->currentBlock->contains->return->if->currentBlock->contains->return->return
RecordingInput#size()::: recording input size:::return
RecordingInput#close()::: recording input close:::file->close
RecordingInput#skipBytes(int)::: recording input skip bytes:::position->position->position->return->position
RecordingInput#readBoolean()::: recording input read boolean:::return->readByte
RecordingInput#readUnsignedByte()::: recording input read unsigned byte:::return->readByte
RecordingInput#readUnsignedShort()::: recording input read unsigned short:::return->readShort
RecordingInput#readLine()::: recording input read line:::throw->new->UnsupportedOperationException
RecordingInput#readUTF()::: recording input read f:::return->readByte->readEncodedString
RecordingInput#readEncodedString(byte)::: recording input read encoded string:::if->return->if->return->size->readInt->if->c->new->charArr->for->i->return->new->String->bytes->new->byteArr->readFully->if->return->new->String->if->return->new->String->throw->new->IOException
RecordingInput#readChar()::: recording input read char:::return->readLong
RecordingInput#readShort()::: recording input read short:::return->readLong
RecordingInput#readInt()::: recording input read int:::return->readLong
RecordingInput#readLong()::: recording input read long:::b0->readByte->ret->if->return->b1->readByte->if->return->b2->readByte->if->return->b3->readByte->if->return->b4->readByte->if->return->b5->readByte->if->return->b6->readByte->if->return->b7->readByte->if->return->b8->readByte->return
RecordingInternals#isLastEventInChunk(RecordingFile)::: recording internals is last event in chunk:::
RecordingInternals#getOffsetDataTime(RecordedObject, String)::: recording internals get offset data time:::
RecordingInternals#readTypes(RecordingFile)::: recording internals read types:::
RecordingInternals#sort(List)::: recording internals sort:::

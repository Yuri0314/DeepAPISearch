AttributeMap#setNamedItem(Node):::Adds an attribute using its nodeName attribute.:::errCheck->ownerNode->ownerDocument->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->arg->getOwnerDocument->ownerNode->ownerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->arg->getNodeType->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->argn->if->argn->isOwned->if->argn->getOwnerElement->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->argn->isOwned->i->argn->getNodeName->findNamePoint->previous->if->nodes->get->nodes->set->ownerNode->ownerDocument->previous->isOwned->previous->isSpecified->else->if->new->ArrayList<>->nodes->add->ownerNode->ownerDocument->setAttrNode->if->argn->isNormalized->ownerNode->isNormalized->return
AttributeMap#setNamedItemNS(Node):::Adds an attribute using its namespaceURI and localName.:::errCheck->ownerNode->ownerDocument->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->arg->getOwnerDocument->ownerNode->ownerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->arg->getNodeType->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->argn->if->argn->isOwned->if->argn->getOwnerElement->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->argn->isOwned->i->argn->getNamespaceURI->argn->getLocalName->findNamePoint->previous->if->nodes->get->nodes->set->ownerNode->ownerDocument->previous->isOwned->previous->isSpecified->else->arg->getNodeName->findNamePoint->if->nodes->get->nodes->add->else->if->new->ArrayList<>->nodes->add->ownerNode->ownerDocument->setAttrNode->if->argn->isNormalized->ownerNode->isNormalized->return
AttributeMap#safeRemoveNamedItem(String):::Same as removeNamedItem except that it simply returns null if the specified name is not found.:::return->internalRemoveNamedItem
AttributeMap#removeItem(Node, boolean):::NON-DOM: Remove the node object  NOTE: Specifically removes THIS NODE -- not the node with this name, nor the node with these contents:::index->if->size->nodes->size->for->i->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->remove
AttributeMap#internalRemoveNamedItem(String, boolean):::Internal removeNamedItem method allowing to specify whether an exception must be thrown if the specified name is not found.:::if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->i->findNamePoint->if->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->else->return->return->nodes->get->remove
AttributeMap#removeNamedItemNS(String, String):::Introduced in DOM Level 2:::return->internalRemoveNamedItemNS
AttributeMap#safeRemoveNamedItemNS(String, String):::Same as removeNamedItem except that it simply returns null if the specified local name and namespace URI is not found.:::return->internalRemoveNamedItemNS
AttributeMap#internalRemoveNamedItemNS(String, String, boolean):::Internal removeNamedItemNS method allowing to specify whether an exception must be thrown if the specified local name and namespace URI is not found.:::ownerDocument->ownerNode->ownerDocument->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->i->findNamePoint->if->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->else->return->n->nodes->get->if->n->isIdAttribute->ownerDocument->n->getValue->removeIdentifier->nodeName->n->getNodeName->if->hasDefaults->defaults->getDefaultAttributes->d->if->defaults->getNamedItem->j->findNamePoint->if->findNamePoint->clone->d->cloneNode->if->d->getLocalName->clone->isOwned->clone->isSpecified->nodes->set->if->clone->isIdAttribute->ownerDocument->clone->getNodeValue->putIdentifier->else->nodes->remove->else->nodes->remove->else->nodes->remove->n->isOwned->n->isSpecified->n->isIdAttribute->ownerDocument->removedAttrNode->return
AttributeMap#cloneContent(NamedNodeMapImpl):::Override parent's method to set the ownerNode correctly:::srcnodes->if->size->srcnodes->size->if->if->new->ArrayList<>->else->nodes->clear->for->i
AttributeMap#moveSpecifiedAttributes(AttributeMap):::Move specified attributes from the given map to this one:::nsize->size->for->i
AttributeMap#reconcileDefaults(NamedNodeMapImpl):::Get this AttributeMap in sync with the given "defaults" map.:::nsize->nodes->size->for->i->if->return->if->nodes->size->cloneContent->else->dsize->size->for->n
AttrImpl#setOwnerDocument(CoreDocumentImpl):::NON-DOM set the ownerDocument of this node and its children:::if->needsSyncChildren->synchronizeChildren->super->setOwnerDocument->if->hasStringValue->for->child
AttrImpl#setIdAttribute(boolean):::NON-DOM: set the type of this attribute to be ID type.:::if->needsSyncData->synchronizeData->isIdAttribute
AttrImpl#isId():::DOM Level 3: isId:::return->isIdAttribute
AttrImpl#getNodeType():::A short integer indicating what type of node this is:::return
AttrImpl#getNodeName():::Returns the attribute name:::if->needsSyncData->synchronizeData->return
AttrImpl#setNodeValue(String):::Implicit in the rerouting of getNodeValue to getValue is the need to redefine setNodeValue, for symmetry's sake:::setValue
AttrImpl#getSchemaTypeInfo():::Method getSchemaTypeInfo.:::return
AttrImpl#getNodeValue():::In Attribute objects, NodeValue is considered a synonym for Value.:::return->getValue
AttrImpl#getName():::In Attributes, NodeName is considered a synonym for the attribute's Name:::if->needsSyncData->synchronizeData->return
AttrImpl#setValue(String):::The DOM doesn't clearly define what setValue(null) means:::ownerDocument->ownerDocument->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->ownerElement->getOwnerElement->oldvalue->textNode->if->needsSyncData->synchronizeData->if->needsSyncChildren->synchronizeChildren->if->if->ownerDocument->getMutationEvents->if->hasStringValue->ownerDocument->createTextNode->textNode->isFirstChild->textNode->isOwned->hasStringValue->internalRemoveChild->else->getValue->while->internalRemoveChild->else->if->hasStringValue->else->getValue->firstChild->firstChild->isFirstChild->needsSyncChildren->if->isIdAttribute->ownerDocument->removeIdentifier->isSpecified->if->ownerDocument->getMutationEvents->if->ownerDocument->createTextNode->else->internalInsertBefore->hasStringValue->ownerDocument->modifiedAttrValue->else->hasStringValue->changed->if->isIdAttribute->ownerDocument->putIdentifier
AttrImpl#getValue():::The "string value" of an Attribute is its text representation, which in turn is a concatenation of the string values of its children.:::if->needsSyncData->synchronizeData->if->needsSyncChildren->synchronizeChildren->if->return->if->hasStringValue->return->firstChild->data->if->firstChild->getNodeType->getEntityRefValue->else->firstChild->getNodeValue->node->if->return->value->new->StringBuffer->while->if->node->getNodeType->getEntityRefValue->if->return->value->append->else->value->node->getNodeValue->append->return->value->toString
AttrImpl#getSpecified():::The "specified" flag is true if and only if this attribute's value was explicitly specified in the original document:::if->needsSyncData->synchronizeData->return->isSpecified
AttrImpl#getElement():::Returns the element node that this attribute is associated with, or null if the attribute has not been added to an element.:::return->isOwned
AttrImpl#getOwnerElement():::Returns the element node that this attribute is associated with, or null if the attribute has not been added to an element.:::return->isOwned
AttrImpl#setSpecified(boolean):::NON-DOM, for use by parser:::if->needsSyncData->synchronizeData->isSpecified
AttrImpl#setType(Object):::NON-DOM: used by the parser:::
AttrImpl#toString():::NON-DOM method for debugging convenience:::return->getName->getValue
AttrImpl#hasChildNodes():::Test whether this node has any children:::if->needsSyncChildren->synchronizeChildren->return
AttrImpl#getChildNodes():::Obtain a NodeList enumerating all children of this node:::if->needsSyncChildren->synchronizeChildren->return
AttrImpl#getFirstChild():::The first child of this Node, or null if none.:::if->needsSyncChildren->synchronizeChildren->makeChildNode->return
AttrImpl#getLastChild():::The last child of this Node, or null if none.:::if->needsSyncChildren->synchronizeChildren->return->lastChild
AttrImpl#insertBefore(Node, Node):::Move one or more node(s) to our list of children:::return->internalInsertBefore
AttrImpl#internalInsertBefore(Node, Node, boolean):::NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able to control which mutation events are spawned:::ownerDocument->ownerDocument->errorChecking->if->newChild->getNodeType->if->for->kid->newChild->getFirstChild->kid->getNextSibling->while->newChild->hasChildNodes->newChild->getFirstChild->insertBefore->return->if->refChild->getNextSibling->removeChild->insertBefore->return->if->needsSyncChildren->synchronizeChildren->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->newChild->getOwnerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->ownerDocument->isKidOK->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->refChild->getParentNode->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->treeSafe->for->a->a->parentNode->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->makeChildNode->ownerDocument->insertingNode->newInternal->oldparent->newInternal->parentNode->if->oldparent->removeChild->refInternal->newInternal->isOwned->firstChild->if->newInternal->isFirstChild->else->if->lastChild->else->if->firstChild->isFirstChild->newInternal->isFirstChild->else->prev->changed->ownerDocument->insertedNode->checkNormalizationAfterInsert->return
AttrImpl#removeChild(Node):::Remove a child from this Node:::if->hasStringValue->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->internalRemoveChild
AttrImpl#internalRemoveChild(Node, boolean):::NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able to control which mutation events are spawned:::ownerDocument->ownerDocument->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->oldChild->getParentNode->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->oldInternal->ownerDocument->removingNode->if->oldInternal->isFirstChild->firstChild->if->firstChild->isFirstChild->else->prev->next->if->firstChild->else->oldPreviousSibling->oldInternal->previousSibling->oldInternal->isOwned->changed->ownerDocument->removedNode->checkNormalizationAfterRemove->return
AttrImpl#replaceChild(Node, Node):::Make newChild occupy the location that oldChild used to have:::makeChildNode->ownerDocument->ownerDocument->ownerDocument->replacingNode->internalInsertBefore->if->internalRemoveChild->ownerDocument->replacedNode->return
AttrImpl#getLength():::NodeList method: Count the immediate children of this node:::if->hasStringValue->return->node->length->for->return
AttrImpl#item(int):::NodeList method: Return the Nth immediate child of this node, or null if the index is out of bounds.:::if->hasStringValue->if->return->else->makeChildNode->return->if->return->node->for->i->return
AttrImpl#isEqualNode(Node):::DOM Level 3 WD- Experimental:::return->super->isEqualNode
AttrImpl#isDerivedFrom(String, String, int):::Introduced in DOM Level 3:::return
AttrImpl#setReadOnly(boolean, boolean):::Override default behavior so that if deep is true, children are also toggled.:::super->setReadOnly->if->if->needsSyncChildren->synchronizeChildren->if->hasStringValue->return->for->mykid
AttrImpl#synchronizeChildren():::Override this method in subclass to hook in efficient internal data structure.:::needsSyncChildren
AttrImpl#checkNormalizationAfterInsert(ChildNode):::Checks the normalized state of this node after inserting a child:::if->insertedChild->getNodeType->prev->insertedChild->previousSibling->next->if->prev->getNodeType->next->getNodeType->isNormalized->else->if->insertedChild->isNormalized->isNormalized
AttrImpl#checkNormalizationAfterRemove(ChildNode):::Checks the normalized of this node after removing a child:::if->previousSibling->getNodeType->next->if->next->getNodeType->isNormalized
AttrNSImpl#getNamespaceURI():::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->return
AttrNSImpl#getPrefix():::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->index->name->indexOf->return->name->substring
AttrNSImpl#setPrefix(String):::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->if->ownerDocument->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->prefix->length->if->CoreDocumentImpl->ownerDocument->isXML11Version->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->prefix->indexOf->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->prefix->equals->if->namespaceURI->equals->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->else->if->prefix->equals->if->namespaceURI->equals->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->else->if->name->equals->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->prefix->length->else
AttrNSImpl#getLocalName():::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->return
AttrNSImpl#isDerivedFrom(String, String, int):::Introduced in DOM Level 3:::if->if->return->isDOMDerivedFrom->return
CDATASectionImpl#getNodeType():::A short integer indicating what type of node this is:::return
CDATASectionImpl#getNodeName():::Returns the node name.:::return
CharacterDataImpl#getChildNodes():::Returns an empty node list.:::return
CharacterDataImpl#setNodeValueInternal(String):::Convenience wrapper for calling setNodeValueInternal when we are not performing a replacement operation:::setNodeValueInternal
CharacterDataImpl#setNodeValueInternal(String, boolean):::This function added so that we can distinguish whether  setNodeValue has been called from some other DOM functions:::ownerDocument->ownerDocument->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->needsSyncData->synchronizeData->oldvalue->ownerDocument->modifyingCharacterData->ownerDocument->modifiedCharacterData
CharacterDataImpl#setNodeValue(String):::Sets the content, possibly firing related events, and updating ranges (via notification to the document):::setNodeValueInternal->ownerDocument->replacedText
CharacterDataImpl#getData():::Retrieve character data currently stored in this node.:::if->needsSyncData->synchronizeData->return
CharacterDataImpl#getLength():::Report number of characters currently stored in this node's data:::if->needsSyncData->synchronizeData->return->data->length
CharacterDataImpl#appendData(String):::Concatenate additional characters onto the end of the data stored in this node:::if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->return->if->needsSyncData->synchronizeData->setNodeValue
CharacterDataImpl#deleteData(int, int):::Remove a range of characters from the node's value:::internalDeleteData
CharacterDataImpl#internalDeleteData(int, int, boolean):::NON-DOM INTERNAL: Within DOM actions, we sometimes need to be able to control which mutation events are spawned:::ownerDocument->ownerDocument->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->needsSyncData->synchronizeData->tailLength->Math->data->length->max->try->value->data->substring->data->substring->setNodeValueInternal->ownerDocument->deletedText->catch->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->finally
CharacterDataImpl#insertData(int, String):::Insert additional characters into the data stored in this node, at the offset specified.:::internalInsertData
CharacterDataImpl#internalInsertData(int, String, boolean):::NON-DOM INTERNAL: Within DOM actions, we sometimes need to be able to control which mutation events are spawned:::ownerDocument->ownerDocument->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->needsSyncData->synchronizeData->try->value->new->StringBuffer->insert->toString->setNodeValueInternal->ownerDocument->data->length->insertedText->catch->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->finally
CharacterDataImpl#replaceData(int, int, String):::Replace a series of characters at the specified (zero-based) offset with a new string, NOT necessarily of the same length:::ownerDocument->ownerDocument->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->needsSyncData->synchronizeData->ownerDocument->replacingData->oldvalue->internalDeleteData->internalInsertData->ownerDocument->replacedCharacterData
CharacterDataImpl#setData(String):::Store character data into this node.:::setNodeValue
CharacterDataImpl#substringData(int, int):::Substring is more than a convenience function:::if->needsSyncData->synchronizeData->length->data->length->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->tailIndex->Math->min->return->data->substring
ChildNode#cloneNode(boolean):::Returns a duplicate of a given node:::newnode->super->cloneNode->newnode->isFirstChild->return
ChildNode#getParentNode():::Returns the parent node of this node:::return->isOwned
ChildNode#getNextSibling():::The next child of this node's parent, or null if none:::return
ChildNode#getPreviousSibling():::The previous child of this node's parent, or null if none:::return->isFirstChild
CommentImpl#getNodeType():::A short integer indicating what type of node this is:::return
CommentImpl#getNodeName():::Returns the node name.:::return
CoreDocumentImpl#getNodeType():::Returns the node type.:::return
CoreDocumentImpl#getNodeName():::Returns the node name.:::return
CoreDocumentImpl#cloneNode(boolean):::Deep-clone a document, including fixing ownerDoc for the cloned children:::newdoc->new->CoreDocumentImpl->callUserDataHandlers->cloneNode->return
CoreDocumentImpl#cloneNode(CoreDocumentImpl, boolean):::internal method to share code with subclass:::if->needsSyncChildren->synchronizeChildren->if->reversedIdentifiers->if->identifiers->size->new->HashMap<>->foreach->identifiers->keySet->reversedIdentifiers->identifiers->get->put->for->kid
CoreDocumentImpl#insertBefore(Node, Node):::Since a Document may contain at most one top-level Element child, and at most one DocumentType declaraction, we need to subclass our add-children methods to implement this constraint:::type->newChild->getNodeType->if->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->newChild->getOwnerDocument->super->insertBefore->if->else->if->return
CoreDocumentImpl#removeChild(Node):::Since insertBefore caches the docElement (and, currently, docType), removeChild has to know how to undo the cache  REVISIT: According to the spec it is not allowed to alter neither the document element nor the document type in any way:::super->removeChild->type->oldChild->getNodeType->if->else->if->return
CoreDocumentImpl#replaceChild(Node, Node):::Since we cache the docElement (and, currently, docType), replaceChild has to update the cache  REVISIT: According to the spec it is not allowed to alter neither the document element nor the document type in any way:::if->newChild->getOwnerDocument->if->oldChild->getNodeType->newChild->getNodeType->oldChild->getNodeType->newChild->getNodeType->throw->DOMMessageFormatter->formatMessage->new->DOMException->super->replaceChild->type->oldChild->getNodeType->if->else->if->return
CoreDocumentImpl#createAttribute(String):::Factory method; creates an Attribute having this Document as its OwnerDoc.:::if->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->new->AttrImpl
CoreDocumentImpl#createCDATASection(String):::Factory method; creates a CDATASection having this Document as its OwnerDoc.:::return->new->CDATASectionImpl
CoreDocumentImpl#createComment(String):::Factory method; creates a Comment having this Document as its OwnerDoc.:::return->new->CommentImpl
CoreDocumentImpl#createDocumentFragment():::Factory method; creates a DocumentFragment having this Document as its OwnerDoc.:::return->new->DocumentFragmentImpl
CoreDocumentImpl#createElement(String):::Factory method; creates an Element having this Document as its OwnerDoc.:::if->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->new->ElementImpl
CoreDocumentImpl#createEntityReference(String):::Factory method; creates an EntityReference having this Document as its OwnerDoc.:::if->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->new->EntityReferenceImpl
CoreDocumentImpl#createProcessingInstruction(String, String):::Factory method; creates a ProcessingInstruction having this Document as its OwnerDoc.:::if->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->new->ProcessingInstructionImpl
CoreDocumentImpl#createTextNode(String):::Factory method; creates a Text node having this Document as its OwnerDoc.:::return->new->TextImpl
CoreDocumentImpl#getDoctype():::For XML, this provides access to the Document Type Definition:::if->needsSyncChildren->synchronizeChildren->return
CoreDocumentImpl#getDocumentElement():::Convenience method, allowing direct access to the child node which is considered the root of the actual document content:::if->needsSyncChildren->synchronizeChildren->return
CoreDocumentImpl#getElementsByTagName(String):::Return a live collection of all descendent Elements (not just immediate children) having the specified tag name.:::return->new->DeepNodeListImpl
CoreDocumentImpl#getImplementation():::Retrieve information describing the abilities of this particular DOM implementation:::return->CoreDOMImplementationImpl->getDOMImplementation
CoreDocumentImpl#getErrorChecking():::Returns true if the DOM implementation performs error checking.:::return
CoreDocumentImpl#getInputEncoding():::DOM Level 3 CR - Experimental:::return
CoreDocumentImpl#setInputEncoding(String):::DOM Internal (Was a DOM L3 Core WD public interface method setActualEncoding )  An attribute specifying the actual encoding of this document:::
CoreDocumentImpl#setXmlEncoding(String):::DOM Internal (Was a DOM L3 Core WD public interface method setXMLEncoding )  An attribute specifying, as part of the XML declaration, the encoding of this document:::
CoreDocumentImpl#getXmlEncoding():::DOM Level 3 WD - Experimental:::return
CoreDocumentImpl#setXmlVersion(String):::DOM Level 3 CR - Experimental:::if->return->if->value->equals->value->equals->if->getXmlVersion->equals->isNormalized->else->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->getXmlVersion->equals->else
CoreDocumentImpl#setXmlStandalone(boolean):::DOM Level 3 CR - Experimental:::
CoreDocumentImpl#getXmlStandalone():::DOM Level 3 WD - Experimental:::return
CoreDocumentImpl#getDocumentURI():::DOM Level 3 WD - Experimental:::return
CoreDocumentImpl#renameNode(Node, String, String):::DOM Level 3 WD - Experimental:::if->n->getOwnerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->switch->n->getNodeType->el->if->rename->callUserDataHandlers->else->if->if->colon1->name->indexOf->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->el->rename->callUserDataHandlers->else->nel->new->ElementNSImpl->copyEventListeners->data->removeUserDataTable->parent->el->getParentNode->nextSib->el->getNextSibling->if->parent->removeChild->child->el->getFirstChild->while->el->removeChild->nel->appendChild->el->getFirstChild->nel->moveSpecifiedAttributes->setUserDataTable->callUserDataHandlers->if->parent->insertBefore->renamedElement->return->at->el->at->getOwnerElement->if->el->removeAttributeNode->if->rename->if->el->setAttributeNodeNS->callUserDataHandlers->else->if->at->rename->if->el->setAttributeNode->callUserDataHandlers->else->nat->new->AttrNSImpl->copyEventListeners->data->removeUserDataTable->child->at->getFirstChild->while->at->removeChild->nat->appendChild->at->getFirstChild->setUserDataTable->callUserDataHandlers->if->el->setAttributeNode->renamedAttrNode->return->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException
CoreDocumentImpl#normalizeDocument()::: DOM Level 3 WD - Experimental  Normalize document.:::if->isNormalized->isNormalizeDocRequired->return->if->needsSyncChildren->synchronizeChildren->if->new->DOMNormalizer->if->new->DOMConfigurationImpl->else->fConfiguration->reset->domNormalizer->normalizeDocument->isNormalized
CoreDocumentImpl#getDomConfig():::DOM Level 3 CR - Experimental   The configuration used when Document.normalizeDocument is invoked.:::if->new->DOMConfigurationImpl->return
CoreDocumentImpl#getBaseURI():::Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI:::if->fDocumentURI->length->try->return->new->URI->toString->catch->return->finally->return
CoreDocumentImpl#setDocumentURI(String):::DOM Level 3 WD - Experimental.:::
CoreDocumentImpl#getAsync():::DOM Level 3 WD - Experimental:::return
CoreDocumentImpl#setAsync(boolean):::DOM Level 3 WD - Experimental:::if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException
CoreDocumentImpl#abort():::DOM Level 3 WD - Experimental:::
CoreDocumentImpl#load(String):::DOM Level 3 WD - Experimental:::return
CoreDocumentImpl#loadXML(String):::DOM Level 3 WD - Experimental:::return
CoreDocumentImpl#saveXML(Node):::DOM Level 3 WD - Experimental:::if->node->getOwnerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->domImplLS->DOMImplementationImpl->getDOMImplementation->xmlWriter->domImplLS->createLSSerializer->if->return->xmlWriter->writeToString
CoreDocumentImpl#setMutationEvents(boolean):::Sets whether the DOM implementation generates mutation events upon operations.:::
CoreDocumentImpl#getMutationEvents():::Returns true if the DOM implementation generates mutation events.:::return
CoreDocumentImpl#createDocumentType(String, String, String):::NON-DOM Factory method; creates a DocumentType having this Document as its OwnerDoc:::return->new->DocumentTypeImpl
CoreDocumentImpl#createEntity(String):::NON-DOM Factory method; creates an Entity having this Document as its OwnerDoc:::if->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->new->EntityImpl
CoreDocumentImpl#createNotation(String):::NON-DOM Factory method; creates a Notation having this Document as its OwnerDoc:::if->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->new->NotationImpl
CoreDocumentImpl#createElementDefinition(String):::NON-DOM Factory method: creates an element definition:::if->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->new->ElementDefinitionImpl
CoreDocumentImpl#getNodeNumber():::NON-DOM: Get the number associated with this document:::if->cd->CoreDOMImplementationImpl->getDOMImplementation->cd->assignDocumentNumber->return
CoreDocumentImpl#getNodeNumber(Node):::NON-DOM: Get a number associated with a node created with respect to this document:::num->if->new->HashMap<>->nodeTable->put->else->n->nodeTable->get->if->nodeTable->put->else->n->intValue->return
CoreDocumentImpl#importNode(Node, boolean):::Copies a node from another document to this document:::return->importNode
CoreDocumentImpl#adoptNode(Node):::DOM Level 3 WD - Experimental Change the node's ownerDocument, and its subtree, to this Document:::node->userData->try->catch->return->finally->if->return->else->if->source->getOwnerDocument->thisImpl->this->getImplementation->otherImpl->source->getOwnerDocument->getImplementation->if->if->undeferChildren->else->if->else->return->else->if->undeferChildren->switch->node->getNodeType->attr->if->attr->getOwnerElement->attr->getOwnerElement->removeAttributeNode->attr->isSpecified->node->getUserDataRecord->attr->setOwnerDocument->if->setUserDataTable->break->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->node->getUserDataRecord->parent->node->getParentNode->if->parent->removeChild->child->while->node->getFirstChild->node->removeChild->node->setOwnerDocument->if->setUserDataTable->if->break->entities->docType->getEntities->entityNode->entities->node->getNodeName->getNamedItem->if->break->for->entityNode->getFirstChild->child->getNextSibling->break->node->getUserDataRecord->parent->node->getParentNode->if->parent->removeChild->node->setOwnerDocument->if->setUserDataTable->reconcileDefaultAttributes->break->node->getUserDataRecord->parent->node->getParentNode->if->parent->removeChild->node->setOwnerDocument->if->setUserDataTable->if->callUserDataHandlers->return
CoreDocumentImpl#undeferChildren(Node):::Traverses the DOM Tree and expands deferred nodes and their children.:::top->while->if->needsSyncData->synchronizeData->attributes->node->getAttributes->if->length->attributes->getLength->for->i->nextNode->node->getFirstChild->while->if->top->equals->break->node->getNextSibling->if->node->getParentNode->if->top->equals->break
CoreDocumentImpl#getElementById(String):::Introduced in DOM Level 2 Returns the Element whose ID is given by elementId:::return->getIdentifier
CoreDocumentImpl#clearIdentifiers():::Remove all identifiers from the ID table:::if->identifiers->clear
CoreDocumentImpl#putIdentifier(String, Element):::Registers an identifier name with a specified element node:::if->removeIdentifier->return->if->needsSyncData->synchronizeData->if->new->HashMap<>->identifiers->put
CoreDocumentImpl#getIdentifier(String):::Returns a previously registered element with the specified identifier name, or null if no element is registered.:::if->needsSyncData->synchronizeData->if->return->elem->identifiers->get->if->parent->elem->getParentNode->while->if->return->parent->getParentNode->return
CoreDocumentImpl#removeIdentifier(String):::Removes a previously registered element with the specified identifier name.:::if->needsSyncData->synchronizeData->if->return->identifiers->remove
CoreDocumentImpl#createElementNS(String, String):::Introduced in DOM Level 2:::return->new->ElementNSImpl
CoreDocumentImpl#createElementNS(String, String, String):::NON-DOM: a factory method used by the Xerces DOM parser to create an element.:::return->new->ElementNSImpl
CoreDocumentImpl#createAttributeNS(String, String):::Introduced in DOM Level 2:::return->new->AttrNSImpl
CoreDocumentImpl#createAttributeNS(String, String, String):::NON-DOM: a factory method used by the Xerces DOM parser to create an element.:::return->new->AttrNSImpl
CoreDocumentImpl#getElementsByTagNameNS(String, String):::Introduced in DOM Level 2:::return->new->DeepNodeListImpl
CoreDocumentImpl#clone():::Clone.:::newdoc->super->clone->return
CoreDocumentImpl#isValidQName(String, String, boolean):::Checks if the given qualified name is legal with respect to the version of XML to which this document must conform.:::if->return->validNCName->if->XMLChar->isValidNCName->XMLChar->isValidNCName->else->XML11Char->isXML11ValidNCName->XML11Char->isXML11ValidNCName->return
CoreDocumentImpl#isKidOK(Node, Node):::Uses the kidOK lookup table to check whether the proposed tree structure is legal.:::if->parent->getNodeType->return->child->getNodeType->return->parent->getNodeType->child->getNodeType
CoreDocumentImpl#changed():::Denotes that this node has changed.:::
CoreDocumentImpl#changes():::Returns the number of changes to this node.:::return
CoreDocumentImpl#getNodeListCache(ParentNode):::Returns a NodeListCache for the given node.:::if->return->new->NodeListCache->c->if->return
CoreDocumentImpl#freeNodeListCache(NodeListCache):::Puts the given NodeListCache in the free list:::
CoreDocumentImpl#setUserData(Node, String, Object, UserDataHandler):::Associate an object to a key on this node:::if->if->t->nodeUserData->get->if->r->t->remove->if->return->return->else->t->if->new->HashMap<>->new->HashMap<>->nodeUserData->put->else->nodeUserData->get->if->new->HashMap<>->nodeUserData->put->r->t->new->UserDataRecord->put->if->return->return
CoreDocumentImpl#getUserData(Node, String):::Retrieves the object associated to a key on a this node:::if->return->t->nodeUserData->get->if->return->r->t->get->if->return->return
CoreDocumentImpl#removeUserDataTable(Node):::Remove user data table for the given node.:::if->return->return->nodeUserData->get
CoreDocumentImpl#setUserDataTable(Node, Map):::Set user data table for the given node.:::if->new->HashMap<>->if->nodeUserData->put
CoreDocumentImpl#callUserDataHandlers(Node, Node, short):::Call user data handlers when a node is deleted (finalized):::if->return->if->t->getUserDataRecord->if->t->isEmpty->return->callUserDataHandlers
CoreDocumentImpl#callUserDataHandlers(Node, Node, short, Map):::Call user data handlers when a node is deleted (finalized):::if->userData->isEmpty->return->userData->keySet->stream->r->userData->get->if->handle->forEach
CoreDocumentImpl#checkQName(String, String):::Checks if the given qualified name is legal with respect to the version of XML to which this document must conform.:::if->return->validNCName->if->XMLChar->isValidNCName->XMLChar->isValidNCName->else->XML11Char->isXML11ValidNCName->XML11Char->isXML11ValidNCName->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException
CoreDocumentImpl#isXML11Version():::We could have more xml versions in future , but for now we could do with this to handle XML 1.0 and 1.1:::return
CoreDocumentImpl#setUserData(NodeImpl, Object):::NON-DOM: kept for backward compatibility Store user data related to a given node This is a place where we could use weak references! Indeed, the node here won't be GC'ed as long as some user data is attached to it, since the userData table will have a reference to the node.:::setUserData
CoreDocumentImpl#getUserData(NodeImpl):::NON-DOM: kept for backward compatibility Retreive user data related to a given node:::return->getUserData
CoreDocumentImpl#replacedText(NodeImpl):::A method to be called when some text was changed in a text node, so that live objects can be notified.:::
CoreDocumentImpl#deletedText(NodeImpl, int, int):::A method to be called when some text was deleted from a text node, so that live objects can be notified.:::
CoreDocumentImpl#insertedText(NodeImpl, int, int):::A method to be called when some text was inserted into a text node, so that live objects can be notified.:::
CoreDocumentImpl#modifyingCharacterData(NodeImpl, boolean):::A method to be called when a character data node is about to be modified:::
CoreDocumentImpl#modifiedCharacterData(NodeImpl, String, String, boolean):::A method to be called when a character data node has been modified:::
CoreDocumentImpl#insertingNode(NodeImpl, boolean):::A method to be called when a node is about to be inserted in the tree.:::
CoreDocumentImpl#insertedNode(NodeImpl, NodeImpl, boolean):::A method to be called when a node has been inserted in the tree.:::
CoreDocumentImpl#removingNode(NodeImpl, NodeImpl, boolean):::A method to be called when a node is about to be removed from the tree.:::
CoreDocumentImpl#removedNode(NodeImpl, boolean):::A method to be called when a node has been removed from the tree.:::
CoreDocumentImpl#replacingNode(NodeImpl):::A method to be called when a node is about to be replaced in the tree.:::
CoreDocumentImpl#replacedNode(NodeImpl):::A method to be called when a node has been replaced in the tree.:::
CoreDocumentImpl#replacingData(NodeImpl):::A method to be called when a character data node is about to be replaced:::
CoreDocumentImpl#replacedCharacterData(NodeImpl, String, String)::: method to be called when a character data node has been replaced.:::
CoreDocumentImpl#modifiedAttrValue(AttrImpl, String):::A method to be called when an attribute value has been modified:::
CoreDocumentImpl#setAttrNode(AttrImpl, AttrImpl):::A method to be called when an attribute node has been set:::
CoreDocumentImpl#removedAttrNode(AttrImpl, NodeImpl, String):::A method to be called when an attribute node has been removed:::
CoreDocumentImpl#renamedAttrNode(Attr, Attr):::A method to be called when an attribute node has been renamed:::
CoreDocumentImpl#renamedElement(Element, Element):::A method to be called when an element has been renamed:::
CoreDOMImplementationImpl#getDOMImplementation():::NON-DOM: Obtain and return the single shared object:::return
CoreDOMImplementationImpl#hasFeature(String, String):::Test if the DOM implementation supports a specific "feature" -- currently meaning language and level thereof.:::anyVersion->version->length->if->feature->startsWith->feature->substring->return->feature->equalsIgnoreCase->version->equals->version->equals->version->equals->feature->equalsIgnoreCase->version->equals->version->equals->version->equals->feature->equalsIgnoreCase->version->equals->version->equals->feature->equalsIgnoreCase->version->equals->feature->equalsIgnoreCase->version->equals
CoreDOMImplementationImpl#createDocumentType(String, String, String):::Introduced in DOM Level 2:::checkQName->return->new->DocumentTypeImpl
CoreDOMImplementationImpl#createDocument(String, String, DocumentType):::Introduced in DOM Level 2:::if->doctype->getOwnerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->doc->createDocument->if->e->doc->createElementNS->doc->appendChild->return
CoreDOMImplementationImpl#getFeature(String, String):::DOM Level 3 WD - Experimental.:::if->singleton->hasFeature->return->return
CoreDOMImplementationImpl#createLSParser(short, String):::DOM Level 3 LS CR - Experimental:::if->equals->equals->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->schemaType->equals->return->new->XML11DTDConfiguration->new->DOMParserImpl->else->return->new->XIncludeAwareParserConfiguration->new->DOMParserImpl
CoreDOMImplementationImpl#createLSSerializer():::DOM Level 3 LS CR - Experimental:::return->new->com.sun.org.apache.xml.internal.serializer.dom3.LSSerializerImpl
CoreDOMImplementationImpl#createLSInput():::DOM Level 3 LS CR - Experimental:::return->new->DOMInputImpl
CoreDOMImplementationImpl#getValidator(String, String):::NON-DOM: retrieve validator.:::if->while->ref->holder->ref->get->if->val->return->return->new->XMLSchemaValidator->else->if->if->equals->while->ref->holder->ref->get->if->val->return->return->new->XML11DTDValidator->else->while->ref->holder->ref->get->if->val->return->return->new->XMLDTDValidator->return
CoreDOMImplementationImpl#releaseValidator(String, String, RevalidationHandler):::NON-DOM: release validator:::if->if->newarray->new->SoftReferenceArr->System->arraycopy->ref->if->holder->ref->get->if->return->new->RevalidationHandlerHolder->new->SoftReference->else->if->if->equals->if->newarray->new->SoftReferenceArr->System->arraycopy->ref->if->holder->ref->get->if->return->new->RevalidationHandlerHolder->new->SoftReference->else->if->newarray->new->SoftReferenceArr->System->arraycopy->ref->if->holder->ref->get->if->return->new->RevalidationHandlerHolder->new->SoftReference
CoreDOMImplementationImpl#getDTDLoader(String):::NON-DOM: retrieve DTD loader:::if->equals->while->ref->holder->ref->get->if->val->return->return->new->XML11DTDProcessor->else->while->ref->holder->ref->get->if->val->return->return->new->XMLDTDLoader
CoreDOMImplementationImpl#releaseDTDLoader(String, XMLDTDLoader):::NON-DOM: release DTD loader:::if->equals->if->newarray->new->SoftReferenceArr->System->arraycopy->ref->if->holder->ref->get->if->return->new->XMLDTDLoaderHolder->new->SoftReference->else->if->newarray->new->SoftReferenceArr->System->arraycopy->ref->if->holder->ref->get->if->return->new->XMLDTDLoaderHolder->new->SoftReference
CoreDOMImplementationImpl#assignDocumentNumber():::NON-DOM:  increment document/doctype counter:::return
CoreDOMImplementationImpl#assignDocTypeNumber():::NON-DOM:  increment document/doctype counter:::return
DeepNodeListImpl#getLength():::Returns the length of the node list.:::item->return->nodes->size
DeepNodeListImpl#item(int):::Returns the node at the specified index.:::thisNode->if->rootNode->changes->new->ArrayList<>->rootNode->changes->currentSize->nodes->size->if->return->nodes->get->else->if->else->nodes->get->while->nodes->size->nextMatchingElementAfter->if->nodes->add->return
DeepNodeListImpl#nextMatchingElementAfter(Node):::Iterative tree-walker:::next->while->if->current->hasChildNodes->current->getFirstChild->else->if->current->getNextSibling->else->for->current->getParentNode->if->current->getNodeType->if->if->tagName->equals->getTagName->equals->return->else->if->tagName->equals->if->nsName->equals->return->else->el->if->el->getNamespaceURI->nsName->el->getNamespaceURI->equals->return->else->el->if->el->getLocalName->el->getLocalName->equals->if->nsName->equals->return->else->if->el->getNamespaceURI->nsName->el->getNamespaceURI->equals->return->return
DeferredAttrImpl#getNodeIndex():::Returns the node index.:::return
DeferredAttrImpl#synchronizeData():::Synchronizes the data (name and value) for fast nodes.:::needsSyncData->ownerDocument->ownerDocument->ownerDocument->getNodeName->extra->ownerDocument->getNodeExtra->isSpecified->isIdAttribute->extraNode->ownerDocument->getLastChild->ownerDocument->getTypeInfo
DeferredAttrImpl#synchronizeChildren():::Synchronizes the node's children with the internal structure:::ownerDocument->ownerDocument->ownerDocument->synchronizeChildren
DeferredAttrNSImpl#getNodeIndex():::Returns the node index.:::return
DeferredAttrNSImpl#synchronizeData():::Synchronizes the data (name and value) for fast nodes.:::needsSyncData->ownerDocument->ownerDocument->ownerDocument->getNodeName->index->name->indexOf->if->else->name->substring->extra->ownerDocument->getNodeExtra->isSpecified->isIdAttribute->ownerDocument->getNodeURI->extraNode->ownerDocument->getLastChild->ownerDocument->getTypeInfo
DeferredAttrNSImpl#synchronizeChildren():::Synchronizes the node's children with the internal structure:::ownerDocument->ownerDocument->ownerDocument->synchronizeChildren
DeferredCDATASectionImpl#getNodeIndex():::Returns the node index.:::return
DeferredCDATASectionImpl#synchronizeData():::Synchronizes the data (name and value) for fast nodes.:::needsSyncData->ownerDocument->this->ownerDocument->ownerDocument->getNodeValueString
DeferredCommentImpl#getNodeIndex():::Returns the node index.:::return
DeferredCommentImpl#synchronizeData():::Synchronizes the data (name and value) for fast nodes.:::needsSyncData->ownerDocument->this->ownerDocument->ownerDocument->getNodeValueString
DeferredDocumentImpl#getImplementation():::Retrieve information describing the abilities of this particular DOM implementation:::return->DeferredDOMImplementationImpl->getDOMImplementation
DeferredDocumentImpl#getNamespacesEnabled():::Returns the cached parser.getNamespaces() value.:::return
DeferredDocumentImpl#createDeferredDocument():::Creates a document node in the table.:::nodeIndex->createNode->return
DeferredDocumentImpl#createDeferredDocumentType(String, String, String):::Creates a doctype.:::nodeIndex->createNode->chunk->index->setChunkValue->setChunkValue->setChunkValue->return
DeferredDocumentImpl#createDeferredNotation(String, String, String, String):::Creates a notation in the table.:::nodeIndex->createNode->chunk->index->extraDataIndex->createNode->echunk->eindex->setChunkValue->setChunkValue->setChunkValue->setChunkIndex->setChunkValue->return
DeferredDocumentImpl#createDeferredEntity(String, String, String, String, String):::Creates an entity in the table.:::nodeIndex->createNode->chunk->index->extraDataIndex->createNode->echunk->eindex->setChunkValue->setChunkValue->setChunkValue->setChunkIndex->setChunkValue->setChunkValue->setChunkValue->extraDataIndex2->createNode->echunk2->eindex2->setChunkIndex->setChunkValue->return
DeferredDocumentImpl#setInputEncoding(int, String):::DOM Internal  An attribute specifying the actual encoding of this document:::nodeIndex->getNodeExtra->extraDataIndex->getNodeExtra->echunk->eindex->setChunkValue
DeferredDocumentImpl#createDeferredEntityReference(String, String):::Creates an entity reference node in the table.:::nodeIndex->createNode->chunk->index->setChunkValue->setChunkValue->return
DeferredDocumentImpl#createDeferredElement(String, String, Object):::Creates an element node with a URI in the table and type information.:::elementNodeIndex->createNode->elementChunk->elementIndex->setChunkValue->setChunkValue->setChunkValue->return
DeferredDocumentImpl#createDeferredElement(String):::Creates an element node in the table.:::return->createDeferredElement
DeferredDocumentImpl#createDeferredElement(String, String):::Creates an element node with a URI in the table.:::elementNodeIndex->createNode->elementChunk->elementIndex->setChunkValue->setChunkValue->return
DeferredDocumentImpl#setDeferredAttribute(int, String, String, String, boolean, boolean, Object):::This method is used by the DOMParser to create attributes.:::attrNodeIndex->createDeferredAttribute->attrChunk->attrIndex->setChunkIndex->elementChunk->elementIndex->lastAttrNodeIndex->getChunkIndex->if->setChunkIndex->setChunkIndex->extra->getChunkIndex->if->setChunkIndex->value->getChunkValue->putIdentifier->if->extraDataIndex->createNode->echunk->eindex->setChunkIndex->setChunkValue->return
DeferredDocumentImpl#createDeferredAttribute(String, String, boolean):::Creates an attribute in the table.:::return->createDeferredAttribute
DeferredDocumentImpl#createDeferredAttribute(String, String, String, boolean):::Creates an attribute with a URI in the table.:::nodeIndex->createNode->chunk->index->setChunkValue->setChunkValue->setChunkValue->extra->setChunkIndex->return
DeferredDocumentImpl#createDeferredElementDefinition(String):::Creates an element definition in the table.:::nodeIndex->createNode->chunk->index->setChunkValue->return
DeferredDocumentImpl#createDeferredTextNode(String, boolean):::Creates a text node in the table.:::nodeIndex->createNode->chunk->index->setChunkValue->setChunkIndex->return
DeferredDocumentImpl#createDeferredCDATASection(String):::Creates a CDATA section node in the table.:::nodeIndex->createNode->chunk->index->setChunkValue->return
DeferredDocumentImpl#createDeferredProcessingInstruction(String, String):::Creates a processing instruction node in the table.:::nodeIndex->createNode->chunk->index->setChunkValue->setChunkValue->return
DeferredDocumentImpl#createDeferredComment(String):::Creates a comment node in the table.:::nodeIndex->createNode->chunk->index->setChunkValue->return
DeferredDocumentImpl#cloneNode(int, boolean):::Creates a clone of the specified node.:::nchunk->nindex->nodeType->cloneIndex->createNode->cchunk->cindex->setChunkValue->setChunkValue->setChunkValue->extraIndex->if->if->cloneNode->setChunkIndex->if->prevIndex->childIndex->getLastChild->while->clonedChildIndex->cloneNode->insertBefore->getRealPrevSibling->return
DeferredDocumentImpl#appendChild(int, int):::Appends a child to the specified parent in the table.:::pchunk->pindex->cchunk->cindex->setChunkIndex->olast->getChunkIndex->setChunkIndex->setChunkIndex
DeferredDocumentImpl#setAttributeNode(int, int):::Adds an attribute node to the specified element.:::echunk->eindex->achunk->aindex->attrName->getChunkValue->oldAttrIndex->getChunkIndex->nextIndex->oachunk->oaindex->while->oldAttrName->getChunkValue->if->oldAttrName->equals->break->getChunkIndex->if->prevIndex->getChunkIndex->if->setChunkIndex->else->pchunk->pindex->setChunkIndex->clearChunkIndex->clearChunkValue->clearChunkValue->clearChunkIndex->clearChunkIndex->attrTextIndex->clearChunkIndex->atchunk->atindex->clearChunkIndex->clearChunkValue->clearChunkIndex->clearChunkIndex->prevIndex->getChunkIndex->setChunkIndex->setChunkIndex->return
DeferredDocumentImpl#setIdAttributeNode(int, int):::Adds an attribute node to the specified element.:::chunk->index->extra->getChunkIndex->setChunkIndex->value->getChunkValue->putIdentifier
DeferredDocumentImpl#setIdAttribute(int):::Sets type of attribute:::chunk->index->extra->getChunkIndex->setChunkIndex
DeferredDocumentImpl#insertBefore(int, int, int):::Inserts a child before the specified node in the table.:::if->appendChild->return->nchunk->nindex->rchunk->rindex->previousIndex->getChunkIndex->setChunkIndex->setChunkIndex->return
DeferredDocumentImpl#setAsLastChild(int, int):::Sets the last child of the parentIndex to childIndex.:::pchunk->pindex->setChunkIndex
DeferredDocumentImpl#getParentNode(int):::Returns the parent node of the given node:::return->getParentNode
DeferredDocumentImpl#getParentNode(int, boolean):::Returns the parent node of the given node.:::if->return->chunk->index->return->clearChunkIndex->getChunkIndex
DeferredDocumentImpl#getLastChild(int):::Returns the last child of the given node.:::return->getLastChild
DeferredDocumentImpl#getLastChild(int, boolean):::Returns the last child of the given node.:::if->return->chunk->index->return->clearChunkIndex->getChunkIndex
DeferredDocumentImpl#getPrevSibling(int):::Returns the prev sibling of the given node:::return->getPrevSibling
DeferredDocumentImpl#getPrevSibling(int, boolean):::Returns the prev sibling of the given node.:::if->return->chunk->index->type->getChunkIndex->if->do->getChunkIndex->if->break->getChunkIndex->while->else->getChunkIndex->return
DeferredDocumentImpl#getRealPrevSibling(int):::Returns the real prev sibling of the given node, directly from the data structures:::return->getRealPrevSibling
DeferredDocumentImpl#getRealPrevSibling(int, boolean):::Returns the real prev sibling of the given node.:::if->return->chunk->index->return->clearChunkIndex->getChunkIndex
DeferredDocumentImpl#lookupElementDefinition(String):::Returns the index of the element definition in the table with the specified name index, or -1 if no such definition exists.:::if->docTypeIndex->nchunk->nindex->for->index->getChunkIndex->getChunkIndex->if->return->for->index->getChunkIndex->getChunkIndex->return
DeferredDocumentImpl#getNodeObject(int):::Instantiates the requested node object.:::if->return->chunk->index->type->getChunkIndex->if->clearChunkIndex->node->switch->if->new->DeferredAttrNSImpl->else->new->DeferredAttrImpl->break->new->DeferredCDATASectionImpl->break->new->DeferredCommentImpl->break->break->new->DeferredDocumentTypeImpl->break->if->println->if->new->DeferredElementNSImpl->else->new->DeferredElementImpl->if->idIndex->binarySearch->while->if->println->println->name->if->if->println->print->putIdentifier0->if->else->break->new->DeferredEntityImpl->break->new->DeferredEntityReferenceImpl->break->new->DeferredNotationImpl->break->new->DeferredProcessingInstructionImpl->break->new->DeferredTextImpl->break->new->DeferredElementDefinitionImpl->break->throw->new->IllegalArgumentException->if->return->throw->new->IllegalArgumentException
DeferredDocumentImpl#getNodeName(int):::Returns the name of the given node.:::return->getNodeName
DeferredDocumentImpl#getNodeName(int, boolean):::Returns the name of the given node.:::if->return->chunk->index->return->clearChunkValue->getChunkValue
DeferredDocumentImpl#getNodeValueString(int):::Returns the real value of the given node.:::return->getNodeValueString
DeferredDocumentImpl#getNodeValueString(int, boolean):::Returns the real value of the given node.:::if->return->chunk->index->value->clearChunkValue->getChunkValue->if->return->type->getChunkIndex->if->prevSib->getRealPrevSibling->if->getNodeType->fStrChunks->add->do->getChunkValue->fStrChunks->add->getChunkIndex->if->break->while->getNodeType->chunkCount->fStrChunks->size->for->i->fBufferStr->toString->fStrChunks->clear->fBufferStr->setLength->return->else->if->child->getLastChild->if->fBufferStr->append->while->getChunkValue->fStrChunks->add->getChunkIndex->for->i->fStrChunks->size->fBufferStr->toString->fStrChunks->clear->fBufferStr->setLength->return->return
DeferredDocumentImpl#getNodeValue(int):::Returns the value of the given node.:::return->getNodeValue
DeferredDocumentImpl#getTypeInfo(int):::Clears the type info that is stored in the fNodeValue array:::if->return->chunk->index->value->if->c->if->return
DeferredDocumentImpl#getNodeValue(int, boolean):::Returns the value of the given node.:::if->return->chunk->index->return->clearChunkValue->getChunkValue
DeferredDocumentImpl#getNodeExtra(int):::Returns the extra info of the given node:::return->getNodeExtra
DeferredDocumentImpl#getNodeExtra(int, boolean):::Returns the extra info of the given node.:::if->return->chunk->index->return->clearChunkIndex->getChunkIndex
DeferredDocumentImpl#getNodeType(int):::Returns the type of the given node.:::return->getNodeType
DeferredDocumentImpl#getNodeType(int, boolean):::Returns the type of the given node.:::if->return->chunk->index->return->clearChunkIndex->getChunkIndex
DeferredDocumentImpl#getAttribute(int, String):::Returns the attribute value of the given name.:::if->return->echunk->eindex->attrIndex->getChunkIndex->while->achunk->aindex->if->getChunkValue->return->getChunkValue->getChunkIndex->return
DeferredDocumentImpl#getNodeURI(int):::Returns the URI of the given node.:::return->getNodeURI
DeferredDocumentImpl#getNodeURI(int, boolean):::Returns the URI of the given node.:::if->return->chunk->index->return->clearChunkValue->getChunkValue
DeferredDocumentImpl#putIdentifier(String, int):::Registers an identifier name with a specified element node.:::if->getChunkValue->println->if->new->StringArr->new->intArr->if->idName->new->StringArr->System->arraycopy->idElement->new->intArr->System->arraycopy
DeferredDocumentImpl#print():::Prints out the tables.:::if->print->print->print->print->print->print->print->println->for->i->if->println->for->i->println
DeferredDocumentImpl#getNodeIndex():::Returns the node index.:::return
DeferredDocumentImpl#synchronizeData():::Synchronizes the node's data.:::needsSyncData->if->path->new->IntVector->for->i
DeferredDocumentImpl#synchronizeChildren():::Synchronizes the node's children with the internal structure:::if->needsSyncData->synchronizeData->if->needsSyncChildren->return->orig->needsSyncChildren->getNodeType->first->last->for->index->getLastChild->getPrevSibling->if->first->isFirstChild->lastChild
DeferredDocumentImpl#synchronizeChildren(AttrImpl, int):::Synchronizes the node's children with the internal structure:::orig->getMutationEvents->setMutationEvents->a->needsSyncChildren->last->getLastChild->prev->getPrevSibling->if->getNodeValueString->a->hasStringValue->else->firstNode->lastNode->for->index->getPrevSibling->if->firstNode->isFirstChild->a->lastChild->a->hasStringValue->setMutationEvents
DeferredDocumentImpl#synchronizeChildren(ParentNode, int):::Synchronizes the node's children with the internal structure:::orig->getMutationEvents->setMutationEvents->p->needsSyncChildren->firstNode->lastNode->for->index->getLastChild->getPrevSibling->if->firstNode->isFirstChild->p->lastChild->setMutationEvents
DeferredDocumentImpl#ensureCapacity(int):::Ensures that the internal tables are large enough.:::if->new->intArrs->new->ObjectArrs->new->ObjectArrs->new->intArrs->new->intArrs->new->intArrs->new->ObjectArrs->new->intArrs->else->if->newsize->newArray->new->intArrs->System->arraycopy->newStrArray->new->ObjectArrs->System->arraycopy->new->ObjectArrs->System->arraycopy->new->intArrs->System->arraycopy->new->intArrs->System->arraycopy->new->intArrs->System->arraycopy->new->ObjectArrs->System->arraycopy->new->intArrs->System->arraycopy->else->if->return->createChunk->createChunk->createChunk->createChunk->createChunk->createChunk->createChunk->createChunk->return
DeferredDocumentImpl#createNode(short):::Creates a node of the specified type.:::chunk->index->ensureCapacity->setChunkIndex->return
DeferredDocumentImpl#binarySearch(int[], int, int, int):::Performs a binary search for a target value in an array of values:::if->println->while->middle->value->if->print->print->if->while->if->println->return->if->else->if->println->return
DeferredDocumentImpl.IntVector#size():::Returns the length of this vector.:::return
DeferredDocumentImpl.IntVector#elementAt(int):::Returns the element at the specified index.:::return
DeferredDocumentImpl.IntVector#addElement(int):::Appends an element to the end of the vector.:::ensureCapacity
DeferredDocumentImpl.IntVector#removeAllElements():::Clears the vector.:::
DeferredDocumentTypeImpl#getNodeIndex():::Returns the node index.:::return
DeferredDocumentTypeImpl#synchronizeData():::Synchronizes the data (name and value) for fast nodes.:::needsSyncData->ownerDocument->ownerDocument->getNodeName->ownerDocument->getNodeValue->ownerDocument->getNodeURI->extraDataIndex->ownerDocument->getNodeExtra->ownerDocument->getNodeValue
DeferredDocumentTypeImpl#synchronizeChildren():::Synchronizes the entities, notations, and elements.:::orig->ownerDocument->getMutationEvents->ownerDocument->setMutationEvents->needsSyncChildren->ownerDocument->new->NamedNodeMapImpl->new->NamedNodeMapImpl->new->NamedNodeMapImpl->last->for->index->ownerDocument->getLastChild->ownerDocument->getPrevSibling->ownerDocument->setMutationEvents->setReadOnly
DeferredDOMImplementationImpl#getDOMImplementation():::NON-DOM: Obtain and return the single shared object:::return
DeferredElementDefinitionImpl#getNodeIndex():::Returns the node index.:::return
DeferredElementDefinitionImpl#synchronizeData():::Synchronizes the data (name and value) for fast nodes.:::needsSyncData->ownerDocument->ownerDocument->getNodeName
DeferredElementDefinitionImpl#synchronizeChildren():::Synchronizes the default attribute values.:::orig->ownerDocument->getMutationEvents->ownerDocument->setMutationEvents->needsSyncChildren->ownerDocument->new->NamedNodeMapImpl->for->nodeIndex->ownerDocument->getLastChild->ownerDocument->getPrevSibling->ownerDocument->setMutationEvents
DeferredElementImpl#getNodeIndex():::Returns the node index.:::return
DeferredElementImpl#synchronizeData():::Synchronizes the data (name and value) for fast nodes.:::needsSyncData->ownerDocument->orig->ownerDocument->getNodeName->setupDefaultAttributes->index->ownerDocument->getNodeExtra->if->attrs->getAttributes->do->attr->ownerDocument->getNodeObject->attrs->setNamedItem->ownerDocument->getPrevSibling->while
DeferredElementNSImpl#getNodeIndex():::Returns the node index.:::return
DeferredElementNSImpl#synchronizeData():::Synchronizes the data (name and value) for fast nodes.:::needsSyncData->ownerDocument->orig->ownerDocument->getNodeName->index->name->indexOf->if->else->name->substring->ownerDocument->getNodeURI->ownerDocument->getTypeInfo->setupDefaultAttributes->attrIndex->ownerDocument->getNodeExtra->if->attrs->getAttributes->seenSchemaDefault->do->attr->ownerDocument->getNodeObject->if->attr->getSpecified->attr->getNamespaceURI->attr->getNamespaceURI->attr->getName->indexOf->attrs->setNamedItemNS->else->attrs->setNamedItem->ownerDocument->getPrevSibling->while
DeferredElementNSImpl#synchronizeChildren():::Synchronizes the node's children with the internal structure:::ownerDocument->ownerDocument->ownerDocument->synchronizeChildren
DeferredEntityImpl#getNodeIndex():::Returns the node index.:::return
DeferredEntityImpl#synchronizeData():::Synchronize the entity data:::needsSyncData->ownerDocument->ownerDocument->getNodeName->ownerDocument->getNodeValue->ownerDocument->getNodeURI->extraDataIndex->ownerDocument->getNodeExtra->ownerDocument->getNodeType->ownerDocument->getNodeName->ownerDocument->getNodeValue->ownerDocument->getNodeURI->extraIndex2->ownerDocument->getNodeExtra->ownerDocument->getNodeName->ownerDocument->getNodeValue
DeferredEntityImpl#synchronizeChildren():::Synchronize the children.:::needsSyncChildren->isReadOnly->ownerDocument->ownerDocument->ownerDocument->synchronizeChildren->setReadOnly
DeferredEntityReferenceImpl#getNodeIndex():::Returns the node index.:::return
DeferredEntityReferenceImpl#synchronizeData():::Synchronize the entity data:::needsSyncData->ownerDocument->ownerDocument->getNodeName->ownerDocument->getNodeValue
DeferredEntityReferenceImpl#synchronizeChildren():::Synchronize the children.:::needsSyncChildren->isReadOnly->ownerDocument->ownerDocument->ownerDocument->synchronizeChildren->setReadOnly
DeferredNode#getNodeIndex():::Returns the node index.:::
DeferredNotationImpl#getNodeIndex():::Returns the node index.:::return
DeferredNotationImpl#synchronizeData():::Synchronizes the data:::needsSyncData->ownerDocument->this->ownerDocument->ownerDocument->getNodeName->ownerDocument->getNodeType->ownerDocument->getNodeValue->ownerDocument->getNodeURI->extraDataIndex->ownerDocument->getNodeExtra->ownerDocument->getNodeType->ownerDocument->getNodeName
DeferredProcessingInstructionImpl#getNodeIndex():::Returns the node index.:::return
DeferredProcessingInstructionImpl#synchronizeData():::Synchronizes the data.:::needsSyncData->ownerDocument->this->ownerDocument->ownerDocument->getNodeName->ownerDocument->getNodeValueString
DeferredTextImpl#getNodeIndex():::Returns the node index.:::return
DeferredTextImpl#synchronizeData():::Synchronizes the underlying data.:::needsSyncData->ownerDocument->this->ownerDocument->ownerDocument->getNodeValueString->ownerDocument->getNodeExtra->isIgnorableWhitespace
DocumentFragmentImpl#getNodeType():::A short integer indicating what type of node this is:::return
DocumentFragmentImpl#getNodeName():::Returns the node name.:::return
DocumentFragmentImpl#normalize():::Override default behavior to call normalize() on this Node's children:::if->isNormalized->return->if->needsSyncChildren->synchronizeChildren->kid->next->for->isNormalized
DocumentImpl#cloneNode(boolean):::Deep-clone a document, including fixing ownerDoc for the cloned children:::newdoc->new->DocumentImpl->callUserDataHandlers->cloneNode->return
DocumentImpl#getImplementation():::Retrieve information describing the abilities of this particular DOM implementation:::return->DOMImplementationImpl->getDOMImplementation
DocumentImpl#createNodeIterator(Node, short, NodeFilter):::NON-DOM extension: Create and return a NodeIterator:::return->createNodeIterator
DocumentImpl#createNodeIterator(Node, int, NodeFilter, boolean):::Create and return a NodeIterator:::if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->iterator->new->NodeIteratorImpl->if->new->ArrayList<>->iterators->add->return
DocumentImpl#createTreeWalker(Node, short, NodeFilter):::NON-DOM extension: Create and return a TreeWalker.:::return->createTreeWalker
DocumentImpl#createTreeWalker(Node, int, NodeFilter, boolean):::Create and return a TreeWalker.:::if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->new->TreeWalkerImpl
DocumentImpl#removeNodeIterator(NodeIterator):::This is not called by the developer client:::if->return->if->return->iterators->remove
DocumentImpl#removeRange(Range):::Not a client function:::if->return->if->return->ranges->remove
DocumentImpl#replacedText(NodeImpl):::A method to be called when some text was changed in a text node, so that live objects can be notified.:::if->size->ranges->size->for->i
DocumentImpl#deletedText(NodeImpl, int, int):::A method to be called when some text was deleted from a text node, so that live objects can be notified.:::if->size->ranges->size->for->i
DocumentImpl#insertedText(NodeImpl, int, int):::A method to be called when some text was inserted into a text node, so that live objects can be notified.:::if->size->ranges->size->for->i
DocumentImpl#splitData(Node, Node, int):::A method to be called when a text node has been split, so that live objects can be notified.:::if->size->ranges->size->for->i
DocumentImpl#createEvent(String):::Introduced in DOM Level 2:::if->type->equalsIgnoreCase->equals->return->new->EventImpl->if->type->equalsIgnoreCase->equals->return->new->MutationEventImpl->else->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException
DocumentImpl#setMutationEvents(boolean):::Sets whether the DOM implementation generates mutation events upon operations.:::
DocumentImpl#getMutationEvents():::Returns true if the DOM implementation generates mutation events.:::return
DocumentImpl#setEventListeners(NodeImpl, List):::Store event listener registered on a given node This is another place where we could use weak references! Indeed, the node here won't be GC'ed as long as some listener is registered on it, since the eventsListeners table will have a reference to the node.:::if->new->HashMap<>->if->eventListeners->remove->if->eventListeners->isEmpty->else->eventListeners->put
DocumentImpl#getEventListeners(NodeImpl):::Retreive event listener registered on a given node:::if->return->return->eventListeners->get
DocumentImpl#addEventListener(NodeImpl, String, EventListener, boolean):::Introduced in DOM Level 2:::if->type->equals->return->removeEventListener->nodeListeners->getEventListeners->if->new->ArrayList<>->setEventListeners->nodeListeners->new->LEntry->add->lc->LCount->lookup->if->else
DocumentImpl#removeEventListener(NodeImpl, String, EventListener, boolean):::Introduced in DOM Level 2:::if->type->equals->return->nodeListeners->getEventListeners->if->return->for->i->nodeListeners->size
DocumentImpl#dispatchEvent(NodeImpl, Event):::Introduced in DOM Level 2:::if->return->evt->if->equals->msg->DOMMessageFormatter->formatMessage->throw->new->EventException->lc->LCount->evt->getType->lookup->if->return->pv->new->ArrayList<>->p->n->p->getParentNode->while->pv->add->n->getParentNode->if->for->j->pv->size->if->nodeListeners->getEventListeners->if->nl->nodeListeners->clone->nlsize->nl->size->for->i->if->pvsize->pv->size->for->j->if->return
DocumentImpl#dispatchEventToSubtree(Node, Event):::NON-DOM INTERNAL: DOMNodeInsertedIntoDocument and ...RemovedFrom..:::dispatchEvent->if->n->getNodeType->a->n->getAttributes->for->i->a->getLength->n->getFirstChild->dispatchingEventToSubtree
DocumentImpl#dispatchingEventToSubtree(Node, Event):::Dispatches event to the target node's descendents recursively:::if->return->dispatchEvent->if->n->getNodeType->a->n->getAttributes->for->i->a->getLength->n->getFirstChild->dispatchingEventToSubtree->n->getNextSibling->dispatchingEventToSubtree
DocumentImpl#dispatchAggregateEvents(NodeImpl, EnclosingAttr):::NON-DOM INTERNAL: Convenience wrapper for calling dispatchAggregateEvents when the context was established by savedEnclosingAttr.:::if->dispatchAggregateEvents->else->dispatchAggregateEvents
DocumentImpl#dispatchAggregateEvents(NodeImpl, AttrImpl, String, short):::NON-DOM INTERNAL: Generate the "aggregated" post-mutation events DOMAttrModified and DOMSubtreeModified:::owner->if->lc->LCount->lookup->enclosingAttr->getOwnerElement->if->if->me->new->MutationEventImpl->me->enclosingAttr->getNodeValue->enclosingAttr->getNodeName->initMutationEvent->owner->dispatchEvent->lc->LCount->lookup->if->me->new->MutationEventImpl->me->initMutationEvent->if->dispatchEvent->if->dispatchEvent->else->dispatchEvent
DocumentImpl#saveEnclosingAttr(NodeImpl):::NON-DOM INTERNAL: Pre-mutation context check, in preparation for later generating DOMAttrModified events:::lc->LCount->lookup->if->eventAncestor->while->if->return->type->eventAncestor->getNodeType->if->retval->new->EnclosingAttr->getNodeValue->return->else->if->eventAncestor->parentNode->else->if->eventAncestor->parentNode->else->return
DocumentImpl#modifyingCharacterData(NodeImpl, boolean):::A method to be called when a character data node has been modified:::if->if->saveEnclosingAttr
DocumentImpl#modifiedCharacterData(NodeImpl, String, String, boolean):::A method to be called when a character data node has been modified:::if->if->lc->LCount->lookup->if->me->new->MutationEventImpl->me->initMutationEvent->dispatchEvent->dispatchAggregateEvents
DocumentImpl#replacedCharacterData(NodeImpl, String, String):::A method to be called when a character data node has been replaced:::modifiedCharacterData
DocumentImpl#insertingNode(NodeImpl, boolean):::A method to be called when a node is about to be inserted in the tree.:::if->if->saveEnclosingAttr
DocumentImpl#insertedNode(NodeImpl, NodeImpl, boolean):::A method to be called when a node has been inserted in the tree.:::if->lc->LCount->lookup->if->me->new->MutationEventImpl->me->initMutationEvent->dispatchEvent->LCount->lookup->if->eventAncestor->if->getOwnerElement->if->p->while->if->p->getNodeType->getOwnerElement->else->p->parentNode->if->eventAncestor->getNodeType->me->new->MutationEventImpl->me->initMutationEvent->dispatchEventToSubtree->if->dispatchAggregateEvents->if->size->ranges->size->for->i
DocumentImpl#removingNode(NodeImpl, NodeImpl, boolean):::A method to be called when a node is about to be removed from the tree.:::if->size->iterators->size->for->i->if->size->ranges->size->for->i->if->if->saveEnclosingAttr->lc->LCount->lookup->if->me->new->MutationEventImpl->me->initMutationEvent->dispatchEvent->LCount->lookup->if->eventAncestor->if->getOwnerElement->if->for->p->eventAncestor->parentNode->p->parentNode->if->eventAncestor->getNodeType->me->new->MutationEventImpl->me->initMutationEvent->dispatchEventToSubtree
DocumentImpl#removedNode(NodeImpl, boolean):::A method to be called when a node has been removed from the tree.:::if->if->dispatchAggregateEvents
DocumentImpl#replacingNode(NodeImpl):::A method to be called when a node is about to be replaced in the tree.:::if->saveEnclosingAttr
DocumentImpl#replacingData(NodeImpl):::A method to be called when character data is about to be replaced in the tree.:::if->saveEnclosingAttr
DocumentImpl#replacedNode(NodeImpl):::A method to be called when a node has been replaced in the tree.:::if->dispatchAggregateEvents
DocumentImpl#modifiedAttrValue(AttrImpl, String):::A method to be called when an attribute value has been modified:::if->dispatchAggregateEvents
DocumentImpl#setAttrNode(AttrImpl, AttrImpl):::A method to be called when an attribute node has been set:::if->if->dispatchAggregateEvents->else->previous->getNodeValue->dispatchAggregateEvents
DocumentImpl#removedAttrNode(AttrImpl, NodeImpl, String):::A method to be called when an attribute node has been removed:::if->lc->LCount->lookup->if->me->new->MutationEventImpl->me->attr->getNodeValue->initMutationEvent->dispatchEvent->dispatchAggregateEvents
DocumentImpl#renamedAttrNode(Attr, Attr):::A method to be called when an attribute node has been renamed:::
DocumentImpl#renamedElement(Element, Element):::A method to be called when an element has been renamed:::
DocumentTypeImpl#getPublicId():::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->return
DocumentTypeImpl#getSystemId():::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->return
DocumentTypeImpl#setInternalSubset(String):::NON-DOM:::if->needsSyncData->synchronizeData
DocumentTypeImpl#getInternalSubset():::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->return
DocumentTypeImpl#getNodeType():::A short integer indicating what type of node this is:::return
DocumentTypeImpl#getNodeName():::Returns the document type name:::if->needsSyncData->synchronizeData->return
DocumentTypeImpl#cloneNode(boolean):::Clones the node.:::newnode->super->cloneNode->entities->cloneMap->notations->cloneMap->elements->cloneMap->return
DocumentTypeImpl#isEqualNode(Node):::DOM Level 3 WD- Experimental:::if->super->isEqualNode->return->if->needsSyncData->synchronizeData->argDocType->if->getPublicId->argDocType->getPublicId->getPublicId->argDocType->getPublicId->getSystemId->argDocType->getSystemId->getSystemId->argDocType->getSystemId->getInternalSubset->argDocType->getInternalSubset->getInternalSubset->argDocType->getInternalSubset->return->if->getPublicId->if->getPublicId->argDocType->getPublicId->equals->return->if->getSystemId->if->getSystemId->argDocType->getSystemId->equals->return->if->getInternalSubset->if->getInternalSubset->argDocType->getInternalSubset->equals->return->argEntities->if->return->if->if->entities->getLength->argEntities->getLength->return->for->index->entities->item->argNotations->if->return->if->if->notations->getLength->argNotations->getLength->return->for->index->notations->item->return
DocumentTypeImpl#setOwnerDocument(CoreDocumentImpl):::NON-DOM set the ownerDocument of this node and its children:::super->setOwnerDocument->entities->setOwnerDocument->notations->setOwnerDocument->elements->setOwnerDocument
DocumentTypeImpl#getNodeNumber():::NON-DOM         Get the number associated with this doctype.:::if->getOwnerDocument->return->super->getNodeNumber->if->cd->CoreDOMImplementationImpl->getDOMImplementation->cd->assignDocTypeNumber->return
DocumentTypeImpl#getName():::Name of this document type:::if->needsSyncData->synchronizeData->return
DocumentTypeImpl#getEntities():::Access the collection of general Entities, both external and internal, defined in the DTD:::if->needsSyncChildren->synchronizeChildren->return
DocumentTypeImpl#getNotations():::Access the collection of Notations defined in the DTD:::if->needsSyncChildren->synchronizeChildren->return
DocumentTypeImpl#setReadOnly(boolean, boolean):::NON-DOM: Subclassed to flip the entities' and notations' readonly switch as well.:::if->needsSyncChildren->synchronizeChildren->super->setReadOnly->elements->setReadOnly->entities->setReadOnly->notations->setReadOnly
DocumentTypeImpl#getElements():::NON-DOM: Access the collection of ElementDefinitions.:::if->needsSyncChildren->synchronizeChildren->return
DOMConfigurationImpl#parse(XMLInputSource):::Parse an XML document:::
DOMConfigurationImpl#setDocumentHandler(XMLDocumentHandler):::Sets the document handler on the last component in the pipeline to receive information about the document.:::
DOMConfigurationImpl#getDocumentHandler():::Returns the registered document handler.:::return
DOMConfigurationImpl#setDTDHandler(XMLDTDHandler):::Sets the DTD handler.:::
DOMConfigurationImpl#getDTDHandler():::Returns the registered DTD handler.:::return
DOMConfigurationImpl#setDTDContentModelHandler(XMLDTDContentModelHandler):::Sets the DTD content model handler.:::
DOMConfigurationImpl#getDTDContentModelHandler():::Returns the registered DTD content model handler.:::return
DOMConfigurationImpl#setEntityResolver(XMLEntityResolver):::Sets the resolver used to resolve external entities:::fProperties->put
DOMConfigurationImpl#getEntityResolver():::Return the current entity resolver.:::return->fProperties->get
DOMConfigurationImpl#setErrorHandler(XMLErrorHandler):::Allow an application to register an error event handler:::if->fProperties->put
DOMConfigurationImpl#getErrorHandler():::Return the current error handler.:::return->fProperties->get
DOMConfigurationImpl#getFeature(String):::Returns the state of a feature.:::if->featureId->equals->return->return->super->getFeature
DOMConfigurationImpl#setFeature(String, boolean):::Set the state of a feature:::super->setFeature
DOMConfigurationImpl#setProperty(String, Object):::setProperty:::super->setProperty
DOMConfigurationImpl#setLocale(Locale):::Set the locale to use for messages.:::fErrorReporter->setLocale
DOMConfigurationImpl#getLocale():::Returns the locale.:::return
DOMConfigurationImpl#setParameter(String, Object):::DOM Level 3 WD - Experimental:::found->if->state->booleanValue->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->setFeature->if->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->if->setFeature->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->if->throw->newFeatureNotSupportedError->else->if->name->equalsIgnoreCase->if->throw->newFeatureNotSupportedError->else->if->name->equalsIgnoreCase->if->throw->newFeatureNotSupportedError->else->if->name->equalsIgnoreCase->else->if->if->name->equalsIgnoreCase->if->fErrorHandlerWrapper->setErrorHandler->setErrorHandler->else->throw->newTypeMismatchError->else->if->name->equalsIgnoreCase->if->try->new->DOMEntityResolverWrapper->setEntityResolver->catch->finally->else->throw->newTypeMismatchError->else->if->name->equalsIgnoreCase->if->try->if->setProperty->else->t->new->StringTokenizer->if->t->hasMoreTokens->locations->new->ArrayList<>->locations->t->nextToken->add->while->t->hasMoreTokens->locations->t->nextToken->add->locations->locations->size->new->StringArr->toArray->setProperty->else->new->StringArr->setProperty->catch->finally->else->throw->newTypeMismatchError->else->if->name->equalsIgnoreCase->if->try->if->setProperty->else->if->value->equals->setProperty->else->if->value->equals->setProperty->catch->finally->else->throw->newTypeMismatchError->else->if->name->equalsIgnoreCase->if->try->setEntityResolver->catch->finally->else->throw->newTypeMismatchError->else->if->name->equalsIgnoreCase->if->setProperty->else->throw->newTypeMismatchError->else->if->name->equalsIgnoreCase->if->setProperty->else->throw->newTypeMismatchError->else->throw->newFeatureNotFoundError
DOMConfigurationImpl#getParameter(String):::DOM Level 3 WD - Experimental:::if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->fErrorHandlerWrapper->getErrorHandler->else->if->name->equalsIgnoreCase->entityResolver->getEntityResolver->if->return->getEntityResolver->return->else->if->name->equalsIgnoreCase->return->getProperty->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->getEntityResolver->else->if->name->equalsIgnoreCase->return->getProperty->else->if->name->equalsIgnoreCase->return->getProperty->else->if->name->equalsIgnoreCase->return->getProperty->else->throw->newFeatureNotFoundError
DOMConfigurationImpl#canSetParameter(String, Object):::DOM Level 3 WD - Experimental:::if->return->if->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->return->value->equals->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->return->value->equals->else->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->value->equals->value->equals->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->return
DOMConfigurationImpl#getParameterNames()::: DOM Level 3 CR - Experimental:::if->parameters->new->ArrayList<>->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->new->DOMStringListImpl->return
DOMConfigurationImpl#reset():::reset all components before parsing:::if->fValidationManager->reset->count->fComponents->size->for->i
DOMConfigurationImpl#checkProperty(String):::Check a property:::if->propertyId->startsWith->suffixLength->propertyId->length->length->if->length->propertyId->endsWith->return->return->super->checkProperty
DOMErrorImpl#getRelatedException():::The related platform dependent exception if any.exception is a reserved word, we need to rename it.Change to "relatedException":::return
DOMImplementationImpl#getDOMImplementation():::NON-DOM: Obtain and return the single shared object:::return
DOMImplementationImpl#hasFeature(String, String):::Test if the DOM implementation supports a specific "feature" -- currently meaning language and level thereof.:::if->feature->length->return->result->super->hasFeature->if->anyVersion->version->length->if->feature->startsWith->feature->substring->return->feature->equalsIgnoreCase->version->equals->feature->equalsIgnoreCase->version->equals->feature->equalsIgnoreCase->version->equals->feature->equalsIgnoreCase->version->equals->feature->equalsIgnoreCase->version->equals->return
DOMImplementationImpl#createDocument(String, String, DocumentType):::Introduced in DOM Level 2:::if->return->new->DocumentImpl->else->if->doctype->getOwnerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->doc->new->DocumentImpl->e->doc->createElementNS->doc->appendChild->return
DOMImplementationListImpl#item(int):::Returns the indexth item in the collection.:::try->return->fImplementations->get->catch->return->finally
DOMImplementationListImpl#getLength():::Returns the number of DOMImplementations in the list.:::return->fImplementations->size
DOMImplementationSourceImpl#getDOMImplementation(String):::A method to request a DOM implementation.:::impl->CoreDOMImplementationImpl->getDOMImplementation->if->testImpl->return->DOMImplementationImpl->getDOMImplementation->if->testImpl->return->return
DOMImplementationSourceImpl#getDOMImplementationList(String):::A method to request a list of DOM implementations that support the specified features and versions, as specified in .:::impl->CoreDOMImplementationImpl->getDOMImplementation->implementations->new->ArrayList<>->if->testImpl->implementations->add->DOMImplementationImpl->getDOMImplementation->if->testImpl->implementations->add->return->new->DOMImplementationListImpl
DOMInputImpl#getCharacterStream()::: An attribute of a language-binding dependent type that represents a stream of 16-bit units:::return
DOMInputImpl#getStringData():::A string attribute that represents a sequence of 16 bit units (utf-16 encoded characters):::return
DOMInputImpl#setEncoding(String)::: The character encoding, if known:::
DOMInputImpl#getPublicId():::The public identifier for this input source:::return
DOMInputImpl#setPublicId(String):::The public identifier for this input source:::
DOMInputImpl#getSystemId():::The system identifier, a URI reference , for this input source:::return
DOMInputImpl#setSystemId(String):::The system identifier, a URI reference , for this input source:::
DOMInputImpl#getBaseURI()::: The base URI to be used (see section 5.1.4 in ) for resolving relative URIs to absolute URIs:::return
DOMInputImpl#setBaseURI(String)::: The base URI to be used (see section 5.1.4 in ) for resolving relative URIs to absolute URIs:::
DOMInputImpl#getCertifiedText()::: If set to true, assume that the input is certified (see section 2.13 in [XML 1.1]) when parsing [XML 1.1].:::return
DOMLocatorImpl#getLineNumber():::The line number where the error occured, or -1 if there is no line number available.:::return
DOMLocatorImpl#getColumnNumber():::The column number where the error occured, or -1 if there is no column number available.:::return
DOMLocatorImpl#getUri():::The URI where the error occured, or null if there is no URI available.:::return
DOMLocatorImpl#getByteOffset():::The byte offset into the input source this locator is pointing to or -1 if there is no byte offset available:::return
DOMLocatorImpl#getUtf16Offset():::The UTF-16, as defined in [Unicode] and Amendment 1 of [ISO/IEC 10646], offset into the input source this locator is pointing to or -1 if there is no UTF-16 offset available.:::return
DOMMessageFormatter#formatMessage(String, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::resourceBundle->getResourceBundle->if->init->getResourceBundle->if->throw->new->MissingResourceException->msg->try->resourceBundle->getString->if->try->format->catch->resourceBundle->getString->resourceBundle->getString->finally->catch->resourceBundle->getString->throw->new->MissingResourceException->finally->if->if->str->new->StringBuffer->str->append->for->i->return
DOMMessageFormatter#init():::Initialize Message Formatter.:::if->SecuritySupport->getResourceBundle->SecuritySupport->getResourceBundle->SecuritySupport->getResourceBundle->else->SecuritySupport->getResourceBundle->SecuritySupport->getResourceBundle->SecuritySupport->getResourceBundle
DOMMessageFormatter#setLocale(Locale):::setLocale to be used by the formatter.:::
DOMNormalizer#normalizeDocument(CoreDocumentImpl, DOMConfigurationImpl):::Normalizes document:::xmlVersion->fDocument->getXmlVersion->schemaType->schemaLocations->fConfiguration->getProperty->fNamespaceContext->reset->fNamespaceContext->declarePrefix->if->schemaLang->fConfiguration->getProperty->if->schemaLang->equals->getValidator->fConfiguration->setFeature->fConfiguration->setFeature->else->if->fConfiguration->getProperty->fConfiguration->setDTDValidatorFactory->getValidator->fConfiguration->setFeature->fDocument->clearIdentifiers->if->reset->else->fConfiguration->getParameter->if->fValidationHandler->setDocumentHandler->fValidationHandler->new->SimpleLocator->startDocument->fValidationHandler->fDocument->getXmlVersion->fDocument->getXmlEncoding->fDocument->getXmlStandalone->xmlDecl->try->if->processDTD->kid->next->for->fDocument->getFirstChild->if->fValidationHandler->endDocument->fValidationHandler->setDocumentHandler->releaseValidator->catch->if->fValidationHandler->setDocumentHandler->releaseValidator->if->return->throw->finally
DOMNormalizer#normalizeNode(Node):::This method acts as if the document was going through a save and load cycle, putting the document in a "normal" form:::type->node->getNodeType->wellformed->switch->if->println->break->if->node->getNodeName->println->if->if->fDocument->isXMLVersionChanged->if->CoreDocumentImpl->node->getPrefix->node->getLocalName->fDocument->isXML11Version->isValidQName->else->CoreDocumentImpl->node->getNodeName->fDocument->isXML11Version->isXMLName->if->msg->DOMMessageFormatter->new->ObjectArr->node->getNodeName->formatMessage->reportDOMError->fNamespaceContext->pushContext->fLocalNSBinder->reset->elem->if->elem->needsSyncChildren->elem->synchronizeChildren->attributes->elem->hasAttributes->elem->getAttributes->if->namespaceFixUp->if->if->elem->hasAttributes->elem->getAttributes->if->for->i->attributes->getLength->else->if->for->i->attributes->getLength->if->fAttrProxy->setAttributes->updateQName->fValidationHandler->startElement->kid->next->for->elem->getFirstChild->if->node->getNodeName->println->for->elem->getFirstChild->if->updateQName->fValidationHandler->endElement->fNamespaceContext->popContext->break->if->println->if->prevSibling->node->getPreviousSibling->parent->node->getParentNode->parent->removeChild->if->prevSibling->getNodeType->nextSibling->prevSibling->getNextSibling->if->nextSibling->getNodeType->prevSibling->getNodeValue->insertData->parent->removeChild->return->else->if->commentdata->getData->fDocument->isXML11Version->isCommentWF->if->fValidationHandler->comment->break->if->node->getNodeName->println->if->prevSibling->node->getPreviousSibling->parent->node->getParentNode->setReadOnly->expandEntityRef->parent->removeChild->next->prevSibling->getNextSibling->parent->getFirstChild->if->prevSibling->getNodeType->next->getNodeType->return->return->else->if->fDocument->isXMLVersionChanged->CoreDocumentImpl->node->getNodeName->fDocument->isXML11Version->isXMLName->break->if->println->if->prevSibling->node->getPreviousSibling->if->prevSibling->getNodeType->node->getNodeValue->appendData->node->getParentNode->removeChild->return->else->text->fDocument->node->getNodeValue->createTextNode->parent->node->getParentNode->parent->replaceChild->return->if->fValidationHandler->startCDATA->fValidationHandler->node->getNodeValue->characterData->fValidationHandler->endCDATA->value->node->getNodeValue->if->index->parent->node->getParentNode->if->node->getNodeValue->fDocument->isXML11Version->isXMLCharWF->while->value->indexOf->node->value->substring->setNodeValue->value->substring->firstSplitNode->newChild->fDocument->createCDATASection->parent->node->getNextSibling->insertBefore->msg->DOMMessageFormatter->formatMessage->reportDOMError->else->if->fDocument->isXML11Version->isCDataWF->break->if->node->getNodeValue->println->next->node->getNextSibling->if->next->getNodeType->next->getNodeValue->appendData->node->getParentNode->removeChild->return->else->if->node->getNodeValue->length->node->getParentNode->removeChild->else->nextType->next->getNodeType->if->if->node->getNodeValue->fDocument->isXML11Version->isXMLCharWF->if->fValidationHandler->node->getNodeValue->characterData->if->if->setIgnorableWhitespace->else->setIgnorableWhitespace->if->println->else->if->println->break->if->pinode->target->pinode->getTarget->if->fDocument->isXML11Version->XML11Char->isXML11ValidName->else->XMLChar->isValidName->if->msg->DOMMessageFormatter->new->ObjectArr->node->getNodeName->formatMessage->reportDOMError->pinode->getData->fDocument->isXML11Version->isXMLCharWF->if->fValidationHandler->getTarget->processingInstruction->return
DOMNormalizer#isCDataWF(DOMErrorHandler, DOMErrorImpl, DOMLocatorImpl, String, boolean):::Check if CDATA section is well-formed:::if->datavalue->length->return->dataarray->datavalue->toCharArray->datalength->if->i->while->c->if->XML11Char->isXML11Invalid->if->XMLChar->isHighSurrogate->c2->if->XMLChar->isLowSurrogate->XMLChar->XMLChar->supplemental->isSupplemental->continue->msg->DOMMessageFormatter->new->ObjectArr->Integer->toString->formatMessage->reportDOMError->else->if->count->if->while->if->msg->DOMMessageFormatter->formatMessage->reportDOMError->else->i->while->c->if->XMLChar->isInvalid->if->XMLChar->isHighSurrogate->c2->if->XMLChar->isLowSurrogate->XMLChar->XMLChar->supplemental->isSupplemental->continue->msg->DOMMessageFormatter->new->ObjectArr->Integer->toString->formatMessage->reportDOMError->else->if->count->if->while->if->msg->DOMMessageFormatter->formatMessage->reportDOMError
DOMNormalizer#isXMLCharWF(DOMErrorHandler, DOMErrorImpl, DOMLocatorImpl, String, boolean):::NON-DOM: check for valid XML characters as per the XML version:::if->datavalue->length->return->dataarray->datavalue->toCharArray->datalength->if->i->while->if->XML11Char->isXML11Invalid->ch->if->XMLChar->isHighSurrogate->ch2->if->XMLChar->isLowSurrogate->XMLChar->XMLChar->supplemental->isSupplemental->continue->msg->DOMMessageFormatter->new->ObjectArr->Integer->toString->formatMessage->reportDOMError->else->i->while->if->XMLChar->isInvalid->ch->if->XMLChar->isHighSurrogate->ch2->if->XMLChar->isLowSurrogate->XMLChar->XMLChar->supplemental->isSupplemental->continue->msg->DOMMessageFormatter->new->ObjectArr->Integer->toString->formatMessage->reportDOMError
DOMNormalizer#isCommentWF(DOMErrorHandler, DOMErrorImpl, DOMLocatorImpl, String, boolean):::NON-DOM: check if value of the comment is well-formed:::if->datavalue->length->return->dataarray->datavalue->toCharArray->datalength->if->i->while->c->if->XML11Char->isXML11Invalid->if->XMLChar->isHighSurrogate->c2->if->XMLChar->isLowSurrogate->XMLChar->XMLChar->supplemental->isSupplemental->continue->msg->DOMMessageFormatter->new->ObjectArr->Integer->toString->formatMessage->reportDOMError->else->if->msg->DOMMessageFormatter->formatMessage->reportDOMError->else->i->while->c->if->XMLChar->isInvalid->if->XMLChar->isHighSurrogate->c2->if->XMLChar->isLowSurrogate->XMLChar->XMLChar->supplemental->isSupplemental->continue->msg->DOMMessageFormatter->new->ObjectArr->Integer->toString->formatMessage->reportDOMError->else->if->msg->DOMMessageFormatter->formatMessage->reportDOMError
DOMNormalizer#isAttrValueWF(DOMErrorHandler, DOMErrorImpl, DOMLocatorImpl, NamedNodeMap, Attr, String, boolean):::NON-DOM: check if attribute value is well-formed:::if->hasStringValue->isXMLCharWF->else->children->a->getChildNodes->for->j->children->getLength
DOMNormalizer#reportDOMError(DOMErrorHandler, DOMErrorImpl, DOMLocatorImpl, String, short, String):::Reports a DOM error to the user handler:::if->error->reset->if->errorHandler->handleError->throw->new->AbortException->if->throw->new->AbortException
DOMNormalizer.XMLAttributesProxy#addAttribute(QName, String, String):::This method adds default declarations:::index->fElement->getXercesAttribute->if->attr->fElement->getOwnerDocument->createAttributeNS->attr->setNodeValue->fElement->setXercesAttributeNode->fDTDTypes->insertElementAt->fAugmentations->new->AugmentationsImpl->insertElementAt->attr->setSpecified->else->return
DOMNormalizer.XMLAttributesProxy#setAugmentations(int, Augmentations):::Sets the augmentations of the attribute at the specified index.:::fAugmentations->setElementAt
DOMNormalizer#startDocument(XMLLocator, String, NamespaceContext, Augmentations):::The start of the document.:::
DOMNormalizer#xmlDecl(String, String, String, Augmentations):::Notifies of the presence of an XMLDecl line in the document:::
DOMNormalizer#doctypeDecl(String, String, String, Augmentations):::Notifies of the presence of the DOCTYPE line in the document.:::
DOMNormalizer#comment(XMLString, Augmentations):::A comment.:::
DOMNormalizer#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::
DOMNormalizer#startElement(QName, XMLAttributes, Augmentations):::The start of an element.:::currentElement->attrCount->attributes->getLength->if->println->for->i
DOMNormalizer#emptyElement(QName, XMLAttributes, Augmentations):::An empty element.:::if->println->startElement->endElement
DOMNormalizer#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies the start of a general entity:::
DOMNormalizer#textDecl(String, String, Augmentations):::Notifies of the presence of a TextDecl line in an entity:::
DOMNormalizer#endGeneralEntity(String, Augmentations):::This method notifies the end of a general entity:::
DOMNormalizer#characters(XMLString, Augmentations):::Character content.:::
DOMNormalizer#ignorableWhitespace(XMLString, Augmentations):::Ignorable whitespace:::
DOMNormalizer#endElement(QName, Augmentations):::The end of an element.:::if->println->if->elementPSVI->augs->getItem->if->elementNode->if->setPSVI->if->type->elementPSVI->getMemberTypeDefinition->if->elementPSVI->getTypeDefinition->setType->normalizedValue->elementPSVI->getSchemaValue->getNormalizedValue->if->if->elementNode->setTextContent->else->text->elementNode->getTextContent->if->text->length->if->elementNode->setTextContent->return->if->setType
DOMNormalizer#startCDATA(Augmentations):::The start of a CDATA section.:::
DOMNormalizer#endCDATA(Augmentations):::The end of a CDATA section.:::
DOMNormalizer#endDocument(Augmentations):::The end of the document.:::
DOMNormalizer#setDocumentSource(XMLDocumentSource):::Sets the document source.:::
DOMNormalizer#getDocumentSource():::Returns the document source.:::return
DOMStringListImpl#add(String):::DOM Internal: Add a DOMString to the list.:::fStrings->add
DOMXSImplementationSourceImpl#getDOMImplementation(String):::A method to request a DOM implementation.:::impl->super->getDOMImplementation->if->return->PSVIDOMImplementationImpl->getDOMImplementation->if->testImpl->return->XSImplementationImpl->getDOMImplementation->if->testImpl->return->return
DOMXSImplementationSourceImpl#getDOMImplementationList(String):::A method to request a list of DOM implementations that support the specified features and versions, as specified in .:::implementations->new->ArrayList<>->list->super->getDOMImplementationList->for->i->list->getLength->impl->PSVIDOMImplementationImpl->getDOMImplementation->if->testImpl->implementations->add->XSImplementationImpl->getDOMImplementation->if->testImpl->implementations->add->return->new->DOMImplementationListImpl
ElementDefinitionImpl#getNodeType():::A short integer indicating what type of node this is:::return
ElementDefinitionImpl#getNodeName():::Returns the element definition name:::if->needsSyncData->synchronizeData->return
ElementDefinitionImpl#cloneNode(boolean):::Replicate this object.:::newnode->super->cloneNode->attributes->cloneMap->return
ElementDefinitionImpl#getAttributes():::Query the attributes defined on this Element:::if->needsSyncChildren->synchronizeChildren->return
ElementImpl#getNodeType():::A short integer indicating what type of node this is:::return
ElementImpl#getNodeName():::Returns the node name:::if->needsSyncData->synchronizeData->return
ElementImpl#getAttributes():::Retrieve all the Attributes as a set:::if->needsSyncData->synchronizeData->if->new->AttributeMap->return
ElementImpl#cloneNode(boolean):::Return a duplicate copy of this Element:::newnode->super->cloneNode->if->attributes->cloneMap->return
ElementImpl#getBaseURI():::DOM Level 3 WD - Experimental:::if->needsSyncData->synchronizeData->if->attrNode->getXMLBaseAttribute->if->uri->attrNode->getNodeValue->if->uri->length->try->_uri->new->URI->if->_uri->isAbsoluteURI->return->_uri->toString->parentBaseURI->getBaseURI->if->try->_parentBaseURI->new->URI->_uri->absolutize->return->_uri->toString->catch->return->finally->return->catch->return->finally->return->getBaseURI
ElementImpl#getXMLBaseAttribute():::NON-DOM Returns the xml:base attribute.:::return->attributes->getNamedItem
ElementImpl#setOwnerDocument(CoreDocumentImpl):::NON-DOM set the ownerDocument of this node, its children, and its attributes:::super->setOwnerDocument->if->attributes->setOwnerDocument
ElementImpl#getAttribute(String):::Look up a single Attribute by name:::if->needsSyncData->synchronizeData->if->return->attr->attributes->getNamedItem->return->attr->getValue
ElementImpl#getAttributeNode(String):::Look up a single Attribute by name:::if->needsSyncData->synchronizeData->if->return->return->attributes->getNamedItem
ElementImpl#getElementsByTagName(String):::Returns a NodeList of all descendent nodes (children, grandchildren, and so on) which are Elements and which have the specified tag name:::return->new->DeepNodeListImpl
ElementImpl#getTagName():::Returns the name of the Element:::if->needsSyncData->synchronizeData->return
ElementImpl#normalize():::In "normal form" (as read from a source file), there will never be two Text children in succession:::if->isNormalized->return->if->needsSyncChildren->synchronizeChildren->kid->next->for->if->for->i->attributes->getLength->isNormalized
ElementImpl#removeAttribute(String):::Remove the named attribute from this Element:::if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->needsSyncData->synchronizeData->if->return->attributes->safeRemoveNamedItem
ElementImpl#removeAttributeNode(Attr):::Remove the specified attribute/value pair:::if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->needsSyncData->synchronizeData->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->return->attributes->removeItem
ElementImpl#setAttribute(String, String):::Add a new name/value pair, or replace the value of the existing attribute having that name:::if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->needsSyncData->synchronizeData->newAttr->getAttributeNode->if->getOwnerDocument->createAttribute->if->new->AttributeMap->newAttr->setNodeValue->attributes->setNamedItem->else->newAttr->setNodeValue
ElementImpl#setAttributeNode(Attr):::Add a new attribute/value pair, or replace the value of the existing attribute with that name:::if->needsSyncData->synchronizeData->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->newAttr->getOwnerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->new->AttributeMap->return->attributes->setNamedItem
ElementImpl#getAttributeNS(String, String):::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->if->return->attr->attributes->getNamedItemNS->return->attr->getValue
ElementImpl#setAttributeNS(String, String, String):::Introduced in DOM Level 2:::if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->needsSyncData->synchronizeData->index->qualifiedName->indexOf->prefix->localName->if->else->qualifiedName->substring->qualifiedName->substring->newAttr->getAttributeNodeNS->if->getOwnerDocument->createAttributeNS->if->new->AttributeMap->newAttr->setNodeValue->attributes->setNamedItemNS->else->if->origNodeName->newName->if->newName->equals->attributes->removeItem->attributes->addItem->else->getOwnerDocument->createAttributeNS->attributes->setNamedItemNS->newAttr->setNodeValue
ElementImpl#removeAttributeNS(String, String):::Introduced in DOM Level 2:::if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->needsSyncData->synchronizeData->if->return->attributes->safeRemoveNamedItemNS
ElementImpl#getAttributeNodeNS(String, String):::Retrieves an Attr node by local name and namespace URI.:::if->needsSyncData->synchronizeData->if->return->return->attributes->getNamedItemNS
ElementImpl#setAttributeNodeNS(Attr):::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->newAttr->getOwnerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->new->AttributeMap->return->attributes->setNamedItemNS
ElementImpl#setXercesAttributeNode(Attr):::NON-DOM: sets attribute node for this element:::if->needsSyncData->synchronizeData->if->new->AttributeMap->return->attributes->addItem
ElementImpl#getXercesAttribute(String, String):::NON-DOM: get inded of an attribute:::if->needsSyncData->synchronizeData->if->return->return->attributes->getNamedItemIndex
ElementImpl#hasAttributes():::Introduced in DOM Level 2.:::if->needsSyncData->synchronizeData->return->attributes->getLength
ElementImpl#hasAttribute(String):::Introduced in DOM Level 2.:::return->getAttributeNode
ElementImpl#hasAttributeNS(String, String):::Introduced in DOM Level 2.:::return->getAttributeNodeNS
ElementImpl#getElementsByTagNameNS(String, String):::Introduced in DOM Level 2:::return->new->DeepNodeListImpl
ElementImpl#isEqualNode(Node):::DOM Level 3 WD- Experimental:::if->super->isEqualNode->return->hasAttrs->hasAttributes->if->hasAttributes->return->if->map1->getAttributes->map2->getAttributes->len->map1->getLength->if->map2->getLength->return->for->i->return
ElementImpl#setIdAttributeNode(Attr, boolean):::DOM Level 3: register the given attribute node as an ID attribute:::if->needsSyncData->synchronizeData->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->at->getOwnerElement->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->isIdAttribute->if->ownerDocument->at->getValue->removeIdentifier->else->ownerDocument->at->getValue->putIdentifier
ElementImpl#setIdAttribute(String, boolean):::DOM Level 3: register the given attribute node as an ID attribute:::if->needsSyncData->synchronizeData->at->getAttributeNode->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->at->getOwnerElement->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->isIdAttribute->if->ownerDocument->at->getValue->removeIdentifier->else->ownerDocument->at->getValue->putIdentifier
ElementImpl#setIdAttributeNS(String, String, boolean):::DOM Level 3: register the given attribute node as an ID attribute:::if->needsSyncData->synchronizeData->if->namespaceURI->length->at->getAttributeNodeNS->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->at->getOwnerElement->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->isIdAttribute->if->ownerDocument->at->getValue->removeIdentifier->else->ownerDocument->at->getValue->putIdentifier
ElementImpl#isDerivedFrom(String, String, int):::Introduced in DOM Level 3:::return
ElementImpl#getSchemaTypeInfo():::Method getSchemaTypeInfo.:::if->needsSyncData->synchronizeData->return
ElementImpl#setReadOnly(boolean, boolean):::NON-DOM: Subclassed to flip the attributes' readonly switch as well.:::super->setReadOnly->if->attributes->setReadOnly
ElementImpl#synchronizeData():::Synchronizes the data (name and value) for fast nodes.:::needsSyncData->orig->ownerDocument->getMutationEvents->ownerDocument->setMutationEvents->setupDefaultAttributes->ownerDocument->setMutationEvents
ElementImpl#setupDefaultAttributes():::Setup the default attributes.:::defaults->getDefaultAttributes->if->new->AttributeMap
ElementImpl#reconcileDefaultAttributes():::Reconcile default attributes.:::if->defaults->getDefaultAttributes->attributes->reconcileDefaults
ElementImpl#getDefaultAttributes():::Get the default attributes.:::doctype->ownerDocument->getDoctype->if->return->eldef->doctype->getElements->getNodeName->getNamedItem->if->return->return->eldef->getAttributes
ElementNSImpl#getNamespaceURI():::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->return
ElementNSImpl#getPrefix():::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->index->name->indexOf->return->name->substring
ElementNSImpl#setPrefix(String):::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->prefix->length->if->CoreDocumentImpl->ownerDocument->isXML11Version->isXMLName->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->prefix->indexOf->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->else->if->prefix->equals->if->namespaceURI->equals->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->prefix->length->else
ElementNSImpl#getLocalName():::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->return
ElementNSImpl#getXMLBaseAttribute():::NON-DOM Returns the xml:base attribute.:::return->attributes->getNamedItemNS
ElementNSImpl#isDerivedFrom(String, String, int):::Introduced in DOM Level 2:::if->needsSyncData->synchronizeData->if->if->return->isDOMDerivedFrom->else->if->return->isDOMDerivedFrom->return
ElementNSImpl#setType(XSTypeDefinition):::NON-DOM: setting type used by the DOM parser:::
EntityImpl#getNodeType():::A short integer indicating what type of node this is:::return
EntityImpl#getNodeName():::Returns the entity name:::if->needsSyncData->synchronizeData->return
EntityImpl#setNodeValue(String):::Sets the node value.:::if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException
EntityImpl#setPrefix(String):::The namespace prefix of this node:::if->isReadOnly->throw->DOMMessageFormatter->formatMessage->new->DOMException
EntityImpl#cloneNode(boolean):::Clone node.:::newentity->super->cloneNode->newentity->setReadOnly->return
EntityImpl#getPublicId():::The public identifier associated with the entity:::if->needsSyncData->synchronizeData->return
EntityImpl#getSystemId():::The system identifier associated with the entity:::if->needsSyncData->synchronizeData->return
EntityImpl#getXmlVersion():::DOM Level 3 WD - experimental the version number of this entity, when it is an external parsed entity.:::if->needsSyncData->synchronizeData->return
EntityImpl#getXmlEncoding():::DOM Level 3 WD - experimental the encoding of this entity, when it is an external parsed entity.:::if->needsSyncData->synchronizeData->return
EntityImpl#getNotationName():::Unparsed entities -- which contain non-XML data -- have a "notation name" which tells applications how to deal with them:::if->needsSyncData->synchronizeData->return
EntityImpl#setPublicId(String):::DOM Level 2: The public identifier associated with the entity:::if->needsSyncData->synchronizeData
EntityImpl#setXmlEncoding(String):::NON-DOM encoding - An attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity:::if->needsSyncData->synchronizeData
EntityImpl#getInputEncoding():::An attribute specifying the encoding used for this entity at the tiome of parsing, when it is an external parsed entity:::if->needsSyncData->synchronizeData->return
EntityImpl#setInputEncoding(String):::NON-DOM, used to set the input encoding.:::if->needsSyncData->synchronizeData
EntityImpl#setXmlVersion(String):::NON-DOM version - An attribute specifying, as part of the text declaration, the version number of this entity, when it is an external parsed entity:::if->needsSyncData->synchronizeData
EntityImpl#setSystemId(String):::DOM Level 2: The system identifier associated with the entity:::if->needsSyncData->synchronizeData
EntityImpl#setNotationName(String):::DOM Level 2: Unparsed entities -- which contain non-XML data -- have a "notation name" which tells applications how to deal with them:::if->needsSyncData->synchronizeData
EntityImpl#getBaseURI():::Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI:::if->needsSyncData->synchronizeData->return->getOwnerDocument->getBaseURI
EntityImpl#setBaseURI(String):::NON-DOM: set base uri:::if->needsSyncData->synchronizeData
EntityReferenceImpl#getNodeType():::A short integer indicating what type of node this is:::return
EntityReferenceImpl#getNodeName():::Returns the name of the entity referenced:::if->needsSyncData->synchronizeData->return
EntityReferenceImpl#cloneNode(boolean):::Clone node.:::er->super->cloneNode->er->setReadOnly->return
EntityReferenceImpl#getBaseURI():::Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI:::if->needsSyncData->synchronizeData->if->doctype->entities->entDef->if->getOwnerDocument->getDoctype->doctype->getEntities->entities->getNodeName->getNamedItem->if->return->entDef->getBaseURI->else->if->baseURI->length->try->return->new->URI->toString->catch->return->finally->return
EntityReferenceImpl#setBaseURI(String):::NON-DOM: set base uri:::if->needsSyncData->synchronizeData
EntityReferenceImpl#getEntityRefValue():::NON-DOM: compute string representation of the entity reference:::if->needsSyncChildren->synchronizeChildren->value->if->if->firstChild->getNodeType->getEntityRefValue->else->if->firstChild->getNodeType->firstChild->getNodeValue->else->return->if->return->else->buff->new->StringBuffer->next->while->if->next->getNodeType->getEntityRefValue->else->if->next->getNodeType->next->getNodeValue->else->return->buff->append->return->buff->toString->return
EntityReferenceImpl#synchronizeChildren():::EntityReference's children are a reflection of those defined in the named Entity:::needsSyncChildren->doctype->entities->entDef->if->getOwnerDocument->getDoctype->doctype->getEntities->entities->getNodeName->getNamedItem->if->return->isReadOnly->for->defkid->entDef->getFirstChild->defkid->getNextSibling->setReadOnly
EntityReferenceImpl#setReadOnly(boolean, boolean):::NON-DOM: sets the node and its children value:::if->needsSyncData->synchronizeData->if->if->needsSyncChildren->synchronizeChildren->for->mykid->isReadOnly
NamedNodeMapImpl#getLength():::Report how many nodes are currently stored in this NamedNodeMap:::return->nodes->size
NamedNodeMapImpl#item(int):::Retrieve an item from the map by 0-based index.:::return->nodes->size->nodes->get
NamedNodeMapImpl#getNamedItem(String):::Retrieve a node by name.:::i->findNamePoint->return->nodes->get
NamedNodeMapImpl#getNamedItemNS(String, String):::Introduced in DOM Level 2:::i->findNamePoint->return->nodes->get
NamedNodeMapImpl#setNamedItem(Node):::Adds a node using its nodeName attribute:::ownerDocument->ownerNode->ownerDocument->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->arg->getOwnerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->i->arg->getNodeName->findNamePoint->previous->if->nodes->get->nodes->set->else->if->new->ArrayList<>->nodes->add->return
NamedNodeMapImpl#setNamedItemNS(Node):::Adds a node using its namespaceURI and localName.:::ownerDocument->ownerNode->ownerDocument->if->if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->if->arg->getOwnerDocument->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->i->arg->getNamespaceURI->arg->getLocalName->findNamePoint->previous->if->nodes->get->nodes->set->else->arg->getNodeName->findNamePoint->if->nodes->get->nodes->add->else->if->new->ArrayList<>->nodes->add->return
NamedNodeMapImpl#removeNamedItemNS(String, String):::Introduced in DOM Level 2:::if->isReadOnly->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->i->findNamePoint->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->n->nodes->get->nodes->remove->return
NamedNodeMapImpl#setReadOnly(boolean, boolean):::Internal subroutine to allow read-only Nodes to make their contained NamedNodeMaps readonly too:::isReadOnly->if->for->i->nodes->size
NamedNodeMapImpl#getReadOnly():::Internal subroutine returns this NodeNameMap's (shallow) readOnly value.:::return->isReadOnly
NamedNodeMapImpl#setOwnerDocument(CoreDocumentImpl):::NON-DOM set the ownerDocument of this node, and the attributes it contains:::if->size->nodes->size->for->i
NamedNodeMapImpl#findNamePoint(String, int):::Subroutine: Locate the named item, or the point at which said item should be added.:::i->if->first->last->nodes->size->while->test->name->nodes->get->getNodeName->compareTo->if->return->else->if->else->if->return
NamedNodeMapImpl#findNamePoint(String, String):::This findNamePoint is for DOM Level 2 Namespaces.:::if->return->if->return->size->nodes->size->for->i->return
NamedNodeMapImpl#removeItem(int):::NON-DOM: Remove attribute at specified index:::if->nodes->size->nodes->remove
NamedNodeMapImpl#cloneMap(List):::NON-DOM: copy content of this map into the specified ArrayList:::if->new->ArrayList<>->return
NamedNodeMapImpl#removeAll():::NON-DOM remove all elements from this map:::if->nodes->clear
NodeImpl#getNodeType():::A short integer indicating what type of node this is:::
NodeImpl#getNodeName():::the name of this node.:::
NodeImpl#getNodeValue():::Returns the node value.:::return
NodeImpl#setNodeValue(String):::Sets the node value.:::
NodeImpl#appendChild(Node):::Adds a child node to the end of the list of children for this node:::return->insertBefore
NodeImpl#cloneNode(boolean):::Returns a duplicate of a given node:::if->needsSyncData->synchronizeData->newnode->try->clone->catch->throw->new->RuntimeException->finally->ownerDocument->newnode->isOwned->newnode->isReadOnly->ownerDocument->callUserDataHandlers->return
NodeImpl#getOwnerDocument():::Find the Document that this Node belongs to (the document in whose context the Node was created):::if->isOwned->return->ownerNode->ownerDocument->else->return
NodeImpl#ownerDocument():::same as above but returns internal type and this one is not overridden by CoreDocumentImpl to return null:::if->isOwned->return->ownerNode->ownerDocument->else->return
NodeImpl#setOwnerDocument(CoreDocumentImpl):::NON-DOM set the ownerDocument of this node:::if->needsSyncData->synchronizeData->if->isOwned
NodeImpl#getNodeNumber():::Returns the node number:::nodeNumber->cd->this->getOwnerDocument->cd->getNodeNumber->return
NodeImpl#getParentNode():::Obtain the DOM-tree parent of this node, or null if it is not currently active in the DOM tree (perhaps because it has just been created or removed):::return
NodeImpl#getNextSibling():::The next child of this node's parent, or null if none:::return
NodeImpl#getPreviousSibling():::The previous child of this node's parent, or null if none:::return
NodeImpl#getAttributes():::Return the collection of attributes associated with this node, or null if none:::return
NodeImpl#hasAttributes()::: Returns whether this node (if it is an element) has any attributes.:::return
NodeImpl#hasChildNodes():::Test whether this node has any children:::return
NodeImpl#getChildNodes():::Obtain a NodeList enumerating all children of this node:::return
NodeImpl#getFirstChild():::The first child of this Node, or null if none:::return
NodeImpl#getLastChild():::The first child of this Node, or null if none:::return
NodeImpl#insertBefore(Node, Node):::Move one or more node(s) to our list of children:::throw->DOMMessageFormatter->formatMessage->new->DOMException
NodeImpl#removeChild(Node):::Remove a child from this Node:::throw->DOMMessageFormatter->formatMessage->new->DOMException
NodeImpl#replaceChild(Node, Node):::Make newChild occupy the location that oldChild used to have:::throw->DOMMessageFormatter->formatMessage->new->DOMException
NodeImpl#getLength():::NodeList method: Count the immediate children of this node <P> By default we do not have any children, ParentNode overrides this.:::return
NodeImpl#item(int):::NodeList method: Return the Nth immediate child of this node, or null if the index is out of bounds:::return
NodeImpl#normalize():::Puts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a "normal" form where only markup (e.g., tags, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are no adjacent Text nodes:::
NodeImpl#isSupported(String, String):::Introduced in DOM Level 2:::return->ownerDocument->getImplementation->hasFeature
NodeImpl#getNamespaceURI():::Introduced in DOM Level 2:::return
NodeImpl#getPrefix():::Introduced in DOM Level 2:::return
NodeImpl#setPrefix(String)::: Introduced in DOM Level 2:::throw->DOMMessageFormatter->formatMessage->new->DOMException
NodeImpl#getLocalName():::Introduced in DOM Level 2:::return
NodeImpl#getBaseURI():::The absolute base URI of this node or null if undefined:::return
NodeImpl#compareTreePosition(Node):::Compares a node with this node with regard to their position in the tree and according to the document order:::if->return->thisType->this->getNodeType->otherType->other->getNodeType->if->return->node->thisAncestor->otherAncestor->thisDepth->otherDepth->for->node->getParentNode->for->node->getParentNode->thisNode->otherNode->thisAncestorType->thisAncestor->getNodeType->otherAncestorType->otherAncestor->getNodeType->if->getOwnerElement->if->getOwnerElement->if->return->if->for->node->getParentNode->if->for->node->getParentNode->if->return->if->for->i->if->return->else->for->i->if->return->thisNodeP->otherNodeP->for->thisNode->getParentNode->otherNode->getParentNode->for->current->thisNodeP->getFirstChild->current->getNextSibling->return
NodeImpl#compareDocumentPosition(Node):::Compares a node with this node with regard to their position in the document.:::if->return->if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException->thisOwnerDoc->otherOwnerDoc->if->this->getNodeType->else->this->getOwnerDocument->if->other->getNodeType->else->other->getOwnerDocument->if->otherDocNum->getNodeNumber->thisDocNum->getNodeNumber->if->return->else->return->node->thisAncestor->otherAncestor->thisDepth->otherDepth->for->node->getParentNode->for->node->getParentNode->thisAncestorType->thisAncestor->getNodeType->otherAncestorType->otherAncestor->getNodeType->thisNode->otherNode->switch->container->thisOwnerDoc->getDoctype->if->return->switch->if->return->else->if->if->container->getNotations->precedes->return->else->return->else->if->container->getEntities->precedes->return->else->return->break->if->return->else->if->return->break->getOwnerElement->if->getOwnerElement->if->if->thisNode->getAttributes->precedes->return->else->return->for->node->getParentNode->switch->container->thisOwnerDoc->getDoctype->if->return->break->if->return->else->if->return->break->getOwnerElement->for->node->getParentNode->if->thisAncestorNum->otherAncestorNum->getNodeNumber->getNodeNumber->if->return->else->return->if->for->i->if->return->else->for->i->if->return->thisNodeP->otherNodeP->for->thisNode->getParentNode->otherNode->getParentNode->for->current->thisNodeP->getFirstChild->current->getNextSibling->return
NodeImpl#getTextContent():::This attribute returns the text content of this node and its descendants:::return->getNodeValue
NodeImpl#setTextContent(String):::This attribute returns the text content of this node and its descendants:::setNodeValue
NodeImpl#isSameNode(Node):::Returns whether this node is the same node as the given one:::return
NodeImpl#isDefaultNamespace(String)::: DOM Level 3: Experimental  This method checks if the specified namespaceURI is the  default namespace or not.:::type->this->getNodeType->switch->namespace->this->getNamespaceURI->prefix->this->getPrefix->if->prefix->length->if->return->return->namespaceURI->equals->if->this->hasAttributes->elem->attr->elem->getAttributeNodeNS->if->value->attr->getNodeValue->if->return->return->namespaceURI->equals->ancestor->getElementAncestor->if->return->ancestor->isDefaultNamespace->return->docElement->getDocumentElement->if->return->docElement->isDefaultNamespace->return->return->if->getNodeType->return->ownerNode->isDefaultNamespace->return->ancestor->getElementAncestor->if->return->ancestor->isDefaultNamespace->return
NodeImpl#lookupPrefix(String):::DOM Level 3 - Experimental: Look up the prefix associated to the given namespace URI, starting from this node.:::if->return->type->this->getNodeType->switch->this->getNamespaceURI->return->lookupNamespacePrefix->docElement->getDocumentElement->if->return->docElement->lookupPrefix->return->return->if->getNodeType->return->ownerNode->lookupPrefix->return->ancestor->getElementAncestor->if->return->ancestor->lookupPrefix->return
NodeImpl#lookupNamespaceURI(String):::DOM Level 3 - Experimental: Look up the namespace URI associated to the given prefix, starting from this node:::type->this->getNodeType->switch->namespace->this->getNamespaceURI->prefix->this->getPrefix->if->if->return->else->if->prefix->equals->return->if->this->hasAttributes->map->this->getAttributes->length->map->getLength->for->i->ancestor->getElementAncestor->if->return->ancestor->lookupNamespaceURI->return->docElement->getDocumentElement->if->return->docElement->lookupNamespaceURI->return->return->if->getNodeType->return->ownerNode->lookupNamespaceURI->return->ancestor->getElementAncestor->if->return->ancestor->lookupNamespaceURI->return
NodeImpl#isEqualNode(Node):::Tests whether two nodes are equal:::if->return->if->arg->getNodeType->getNodeType->return->if->getNodeName->if->arg->getNodeName->return->else->if->getNodeName->arg->getNodeName->equals->return->if->getLocalName->if->arg->getLocalName->return->else->if->getLocalName->arg->getLocalName->equals->return->if->getNamespaceURI->if->arg->getNamespaceURI->return->else->if->getNamespaceURI->arg->getNamespaceURI->equals->return->if->getPrefix->if->arg->getPrefix->return->else->if->getPrefix->arg->getPrefix->equals->return->if->getNodeValue->if->arg->getNodeValue->return->else->if->getNodeValue->arg->getNodeValue->equals->return->return
NodeImpl#setUserData(String, Object, UserDataHandler):::Associate an object to a key on this node:::return->ownerDocument->setUserData
NodeImpl#getUserData(String):::Retrieves the object associated to a key on a this node:::return->ownerDocument->getUserData
NodeImpl#setReadOnly(boolean, boolean):::NON-DOM: PR-DOM-Level-1-19980818 mentions readonly nodes in conjunction with Entities, but provides no API to support this:::if->needsSyncData->synchronizeData->isReadOnly
NodeImpl#getReadOnly():::NON-DOM: Returns true if this node is read-only:::if->needsSyncData->synchronizeData->return->isReadOnly
NodeImpl#setUserData(Object):::NON-DOM: As an alternative to subclassing the DOM, this implementation has been extended with the ability to attach an object to each node:::ownerDocument->setUserData
NodeImpl#getUserData():::NON-DOM: Returns the user data associated to this node.:::return->ownerDocument->getUserData
NodeImpl#changed():::Denotes that this node has changed.:::ownerDocument->changed
NodeImpl#changes():::Returns the number of changes to this node.:::return->ownerDocument->changes
NodeImpl#synchronizeData():::Override this method in subclass to hook in efficient internal data structure.:::needsSyncData
NodeImpl#getContainer():::For non-child nodes, the node which "points" to this node:::return
NodeImpl#toString():::NON-DOM method for debugging convenience.:::return->getNodeName->getNodeValue
NodeIteratorImpl#getWhatToShow():::Return the whatToShow value:::return
NodeIteratorImpl#getFilter():::Return the filter:::return
NodeIteratorImpl#getExpandEntityReferences():::Return whether children entity references are included in the iterator.:::return
NodeIteratorImpl#nextNode():::Return the next Node in the Iterator:::if->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->return->nextNode->accepted->while->if->else->if->nextNode->getNodeType->nextNode->else->nextNode->if->return->acceptNode->if->return->else->continue->return
NodeIteratorImpl#previousNode():::Return the previous Node in the Iterator:::if->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->return->previousNode->accepted->while->if->else->previousNode->if->return->acceptNode->if->return->else->continue->return
NodeIteratorImpl#acceptNode(Node):::The node is accepted if it passes the whatToShow and the filter.:::if->return->node->getNodeType->else->return->node->getNodeType->fNodeFilter->acceptNode
NodeIteratorImpl#matchNodeOrParent(Node):::Return node, if matches or any parent if matches.:::if->return->for->n->n->getParentNode->return
NodeIteratorImpl#nextNode(Node, boolean):::The method nextNode(Node, boolean) returns the next node  from the actual DOM tree:::if->return->result->if->if->node->hasChildNodes->node->getFirstChild->return->if->return->node->getNextSibling->if->return->parent->node->getParentNode->while->parent->getNextSibling->if->return->else->parent->getParentNode->return
NodeIteratorImpl#previousNode(Node):::The method previousNode(Node) returns the previous node  from the actual DOM tree.:::result->if->return->node->getPreviousSibling->if->node->getParentNode->return->if->result->hasChildNodes->result->getNodeType->while->result->hasChildNodes->result->getLastChild->return
NodeIteratorImpl#removeNode(Node):::Fix-up the iterator on a remove:::if->return->deleted->matchNodeOrParent->if->return->if->previousNode->else->next->nextNode->if->else->previousNode
NotationImpl#getNodeType():::A short integer indicating what type of node this is:::return
NotationImpl#getNodeName():::Returns the notation name:::if->needsSyncData->synchronizeData->return
NotationImpl#getPublicId():::The Public Identifier for this Notation:::if->needsSyncData->synchronizeData->return
NotationImpl#getSystemId():::The System Identifier for this Notation:::if->needsSyncData->synchronizeData->return
NotationImpl#setPublicId(String):::NON-DOM: The Public Identifier for this Notation:::if->isReadOnly->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->needsSyncData->synchronizeData
NotationImpl#setSystemId(String):::NON-DOM: The System Identifier for this Notation:::if->isReadOnly->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->needsSyncData->synchronizeData
NotationImpl#getBaseURI():::Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI:::if->needsSyncData->synchronizeData->if->baseURI->length->try->return->new->URI->toString->catch->return->finally->return
NotationImpl#setBaseURI(String):::NON-DOM: set base uri:::if->needsSyncData->synchronizeData
ParentNode#cloneNode(boolean):::Returns a duplicate of a given node:::if->needsSyncChildren->synchronizeChildren->newnode->super->cloneNode->if->for->child->return
ParentNode#getOwnerDocument():::Find the Document that this Node belongs to (the document in whose context the Node was created):::return
ParentNode#ownerDocument():::same as above but returns internal type and this one is not overridden by CoreDocumentImpl to return null:::return
ParentNode#setOwnerDocument(CoreDocumentImpl):::NON-DOM set the ownerDocument of this node and its children:::if->needsSyncChildren->synchronizeChildren->super->setOwnerDocument->for->child
ParentNode#hasChildNodes():::Test whether this node has any children:::if->needsSyncChildren->synchronizeChildren->return
ParentNode#getChildNodes():::Obtain a NodeList enumerating all children of this node:::if->needsSyncChildren->synchronizeChildren->return
ParentNode#getFirstChild():::The first child of this Node, or null if none.:::if->needsSyncChildren->synchronizeChildren->return
ParentNode#getLastChild():::The last child of this Node, or null if none.:::if->needsSyncChildren->synchronizeChildren->return->lastChild
ParentNode#insertBefore(Node, Node):::Move one or more node(s) to our list of children:::return->internalInsertBefore
ParentNode#internalInsertBefore(Node, Node, boolean):::NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able to control which mutation events are spawned:::errorChecking->if->newChild->getNodeType->if->for->kid->newChild->getFirstChild->kid->getNextSibling->while->newChild->hasChildNodes->newChild->getFirstChild->insertBefore->return->if->refChild->getNextSibling->removeChild->insertBefore->return->if->needsSyncChildren->synchronizeChildren->if->if->isReadOnly->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->newChild->getOwnerDocument->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->ownerDocument->isKidOK->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->refChild->getParentNode->throw->DOMMessageFormatter->formatMessage->new->DOMException->treeSafe->for->a->a->parentNode->if->throw->DOMMessageFormatter->formatMessage->new->DOMException->ownerDocument->insertingNode->newInternal->oldparent->newInternal->parentNode->if->oldparent->removeChild->refInternal->newInternal->isOwned->if->newInternal->isFirstChild->else->if->lastChild->else->if->firstChild->isFirstChild->newInternal->isFirstChild->else->prev->changed->if->if->if->if->else->ownerDocument->insertedNode->checkNormalizationAfterInsert->return
ParentNode#removeChild(Node):::Remove a child from this Node:::return->internalRemoveChild
ParentNode#internalRemoveChild(Node, boolean):::NON-DOM INTERNAL: Within DOM actions,we sometimes need to be able to control which mutation events are spawned:::ownerDocument->ownerDocument->if->if->isReadOnly->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->oldChild->getParentNode->throw->DOMMessageFormatter->formatMessage->new->DOMException->oldInternal->ownerDocument->removingNode->oldPreviousSibling->oldInternal->previousSibling->if->if->if->if->else->if->oldInternal->isFirstChild->if->firstChild->isFirstChild->else->prev->next->if->else->oldInternal->isOwned->changed->ownerDocument->removedNode->checkNormalizationAfterRemove->return
ParentNode#replaceChild(Node, Node):::Make newChild occupy the location that oldChild used to have:::ownerDocument->replacingNode->internalInsertBefore->if->internalRemoveChild->ownerDocument->replacedNode->return
ParentNode#getLength():::NodeList method: Count the immediate children of this node:::return->nodeListGetLength
ParentNode#item(int):::NodeList method: Return the Nth immediate child of this node, or null if the index is out of bounds.:::return->nodeListItem
ParentNode#getChildNodesUnoptimized():::Create a NodeList to access children that is use by subclass elements that have methods named getLength() or item(int):::if->needsSyncChildren->synchronizeChildren->return->new->NodeList
ParentNode#normalize():::Override default behavior to call normalize() on this Node's children:::if->isNormalized->return->if->needsSyncChildren->synchronizeChildren->kid->for->isNormalized
ParentNode#isEqualNode(Node):::DOM Level 3 WD- Experimental:::if->super->isEqualNode->return->child1->getFirstChild->child2->arg->getFirstChild->while->if->child1->isEqualNode->return->child1->getNextSibling->child2->getNextSibling->if->return->return
ParentNode#setReadOnly(boolean, boolean):::Override default behavior so that if deep is true, children are also toggled.:::super->setReadOnly->if->if->needsSyncChildren->synchronizeChildren->for->mykid
ParentNode#synchronizeChildren():::Override this method in subclass to hook in efficient internal data structure.:::needsSyncChildren
ParentNode#checkNormalizationAfterInsert(ChildNode):::Checks the normalized state of this node after inserting a child:::if->insertedChild->getNodeType->prev->insertedChild->previousSibling->next->if->prev->getNodeType->next->getNodeType->isNormalized->else->if->insertedChild->isNormalized->isNormalized
ParentNode#checkNormalizationAfterRemove(ChildNode):::Checks the normalized of this node after removing a child:::if->previousSibling->getNodeType->next->if->next->getNodeType->isNormalized
ProcessingInstructionImpl#getNodeType():::A short integer indicating what type of node this is:::return
ProcessingInstructionImpl#getNodeName():::Returns the target:::if->needsSyncData->synchronizeData->return
ProcessingInstructionImpl#getTarget():::A PI's "target" states what processor channel the PI's data should be directed to:::if->needsSyncData->synchronizeData->return
ProcessingInstructionImpl#getData():::A PI's data content tells the processor what we actually want it to do:::if->needsSyncData->synchronizeData->return
ProcessingInstructionImpl#setData(String):::Change the data content of this PI:::setNodeValue
ProcessingInstructionImpl#getBaseURI():::Returns the absolute base URI of this node or null if the implementation wasn't able to obtain an absolute URI:::if->needsSyncData->synchronizeData->return->ownerNode->getBaseURI
PSVIAttrNSImpl#getSchemaDefault():::[schema default]:::return->fDeclaration->getConstraintValue
PSVIAttrNSImpl#getSchemaNormalizedValue():::[schema normalized value]:::return->fValue->getNormalizedValue
PSVIAttrNSImpl#getIsSchemaSpecified():::[schema specified]:::return
PSVIAttrNSImpl#getValidationAttempted():::Determines the extent to which the document has been validated:::return
PSVIAttrNSImpl#getValidity():::Determine the validity of the node with respect to the validation being attempted:::return
PSVIAttrNSImpl#getErrorCodes():::A list of error codes generated from validation attempts:::if->return->return
PSVIAttrNSImpl#getErrorMessages():::A list of error messages generated from the validation attempt or an empty StringList if no errors occurred during the validation attempt:::if->return->return
PSVIAttrNSImpl#getTypeDefinition():::An item isomorphic to the type definition used to validate this element.:::return
PSVIAttrNSImpl#getMemberTypeDefinition():::If and only if that type definition is a simple type definition with {variety} union, or a complex type definition whose {content type} is a simple type definition with {variety} union, then an item isomorphic to that member of the union's {member type definitions} which actually validated the element item's normalized value.:::return->fValue->getMemberTypeDefinition
PSVIAttrNSImpl#getAttributeDeclaration():::An item isomorphic to the attribute declaration used to validate this attribute.:::return
PSVIAttrNSImpl#setPSVI(AttributePSVI):::Copy PSVI properties from another psvi item.:::attr->getAttributeDeclaration->attr->getValidationContext->attr->getValidity->attr->getValidationAttempted->attr->getErrorCodes->attr->getErrorMessages->attr->getSchemaValue->copyFrom->attr->getTypeDefinition->attr->getIsSchemaSpecified
PSVIDocumentImpl#cloneNode(boolean):::Deep-clone a document, including fixing ownerDoc for the cloned children:::newdoc->new->PSVIDocumentImpl->callUserDataHandlers->cloneNode->return
PSVIDocumentImpl#getImplementation():::Retrieve information describing the abilities of this particular DOM implementation:::return->PSVIDOMImplementationImpl->getDOMImplementation
PSVIDocumentImpl#createElementNS(String, String):::Create an element with PSVI information:::return->new->PSVIElementNSImpl
PSVIDocumentImpl#createElementNS(String, String, String):::Create an element with PSVI information:::return->new->PSVIElementNSImpl
PSVIDocumentImpl#createAttributeNS(String, String):::Create an attribute with PSVI information:::return->new->PSVIAttrNSImpl
PSVIDocumentImpl#createAttributeNS(String, String, String):::Create an attribute with PSVI information:::return->new->PSVIAttrNSImpl
PSVIDocumentImpl#getDomConfig():::The configuration used when Document.normalizeDocument is invoked.:::super->getDomConfig->return
PSVIDOMImplementationImpl#getDOMImplementation():::NON-DOM: Obtain and return the single shared object:::return
PSVIDOMImplementationImpl#hasFeature(String, String):::Test if the DOM implementation supports a specific "feature" -- currently meaning language and level thereof.:::return->super->hasFeature->feature->equalsIgnoreCase
PSVIElementNSImpl#getSchemaDefault():::[schema default]:::return->fDeclaration->getConstraintValue
PSVIElementNSImpl#getSchemaNormalizedValue():::[schema normalized value]:::return->fValue->getNormalizedValue
PSVIElementNSImpl#getIsSchemaSpecified():::[schema specified]:::return
PSVIElementNSImpl#getValidationAttempted():::Determines the extent to which the document has been validated:::return
PSVIElementNSImpl#getValidity():::Determine the validity of the node with respect to the validation being attempted:::return
PSVIElementNSImpl#getErrorCodes():::A list of error codes generated from validation attempts:::if->return->return
PSVIElementNSImpl#getErrorMessages():::A list of error messages generated from the validation attempt or an empty StringList if no errors occurred during the validation attempt:::if->return->return
PSVIElementNSImpl#getNil():::[nil]:::return
PSVIElementNSImpl#getNotation():::[notation]:::return
PSVIElementNSImpl#getTypeDefinition():::An item isomorphic to the type definition used to validate this element.:::return
PSVIElementNSImpl#getMemberTypeDefinition():::If and only if that type definition is a simple type definition with {variety} union, or a complex type definition whose {content type} is a simple thype definition with {variety} union, then an item isomorphic to that member of the union's {member type definitions} which actually validated the element item's normalized value.:::return->fValue->getMemberTypeDefinition
PSVIElementNSImpl#getElementDeclaration():::An item isomorphic to the element declaration used to validate this element.:::return
PSVIElementNSImpl#getSchemaInformation():::[schema information]:::return
PSVIElementNSImpl#setPSVI(ElementPSVI):::Copy PSVI properties from another psvi item.:::elem->getElementDeclaration->elem->getNotation->elem->getValidationContext->elem->getTypeDefinition->elem->getSchemaInformation->elem->getValidity->elem->getValidationAttempted->elem->getErrorCodes->elem->getErrorMessages->if->getContentType->elem->getSchemaValue->copyFrom->else->reset->elem->getIsSchemaSpecified->elem->getNil
RangeImpl#signalSplitData(Node, Node, int):::Signal other Ranges to update their start/end  containers/offsets:::fDocument->splitData
RangeImpl#receiveSplitData(Node, Node, int):::Fix up this Range if another Range has split a Text Node  into 2 Nodes.:::if->return->if->return->if->fStartContainer->getNodeType->if->if->fEndContainer->getNodeType->if
RangeImpl#deleteData(CharacterData, int, int):::This function inserts text into a Node and invokes  a method to fix-up all other Ranges.:::node->deleteData
RangeImpl#receiveDeletedText(Node, int, int):::This function is called from DOM:::if->return->if->return->if->fStartContainer->getNodeType->if->else->if->if->fEndContainer->getNodeType->if->else->if
RangeImpl#insertData(CharacterData, int, String):::This function inserts text into a Node and invokes  a method to fix-up all other Ranges.:::node->insertData
RangeImpl#receiveInsertedText(Node, int, int):::This function is called from DOM:::if->return->if->return->if->fStartContainer->getNodeType->if->if->fEndContainer->getNodeType->if
RangeImpl#receiveReplacedText(Node):::This function is called from DOM:::if->return->if->fStartContainer->getNodeType->if->fEndContainer->getNodeType
RangeImpl#insertedNodeFromDOM(Node):::This function is called from the DOM:::if->return->if->return->if->return->parent->node->getParentNode->if->index->indexOf->if->if->index->indexOf->if
RangeImpl#removeNode(Node):::This function must be called by the DOM _BEFORE_  a node is deleted, because at that time it is  connected in the DOM tree, which we depend on.:::if->return->if->return->parent->node->getParentNode->if->index->indexOf->if->if->index->indexOf->if->if->if->isAncestorOf->indexOf->if->isAncestorOf->indexOf
RangeImpl#isAncestorOf(Node, Node):::is a an ancestor of b ?:::for->node->node->getParentNode->return
RangeImpl#indexOf(Node, Node):::what is the index of the child in the parent:::if->child->getParentNode->return->i->for->node->parent->getFirstChild->node->getNextSibling->return
TextImpl#setValues(CoreDocumentImpl, String):::NON-DOM: resets node and sets specified values for the current node:::setOwnerDocument
TextImpl#getNodeType():::A short integer indicating what type of node this is:::return
TextImpl#getNodeName():::Returns the node name.:::return
TextImpl#setIgnorableWhitespace(boolean):::NON-DOM: Set whether this Text is ignorable whitespace.:::if->needsSyncData->synchronizeData->isIgnorableWhitespace
TextImpl#isElementContentWhitespace():::DOM L3 Core CR - Experimental  Returns whether this text node contains element content whitespace, often abusively called "ignorable whitespace":::if->needsSyncData->synchronizeData->return->internalIsIgnorableWhitespace
TextImpl#getWholeText():::DOM Level 3 WD - Experimental:::if->needsSyncData->synchronizeData->buffer->new->StringBuilder->if->data->length->buffer->append->this->getPreviousSibling->this->getParentNode->getWholeTextBackward->temp->buffer->toString->buffer->setLength->this->getNextSibling->this->getParentNode->getWholeTextForward->return->buffer->toString
TextImpl#insertTextContent(StringBuilder):::internal method taking a StringBuilder in parameter and inserts the text content at the start of the buffer:::content->getNodeValue->if->buf->insert
TextImpl#replaceWholeText(String):::Replaces the text of the current node and all logically-adjacent text nodes with the specified text:::if->needsSyncData->synchronizeData->parent->this->getParentNode->if->content->length->if->parent->removeChild->return->if->ownerDocument->if->canModifyPrev->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->canModifyNext->throw->DOMMessageFormatter->formatMessage->new->DOMException->currentNode->if->isReadOnly->newNode->this->ownerDocument->createTextNode->if->parent->insertBefore->parent->removeChild->else->return->else->this->setData->prev->currentNode->getPreviousSibling->while->if->prev->getNodeType->prev->getNodeType->prev->getNodeType->hasTextOnlyChildren->parent->removeChild->else->break->prev->getPreviousSibling->next->currentNode->getNextSibling->while->if->next->getNodeType->next->getNodeType->next->getNodeType->hasTextOnlyChildren->parent->removeChild->else->break->next->getNextSibling->return
TextImpl#isIgnorableWhitespace():::NON-DOM: Returns whether this Text is ignorable whitespace.:::if->needsSyncData->synchronizeData->return->internalIsIgnorableWhitespace
TextImpl#splitText(int):::Break a text node into two sibling nodes:::if->isReadOnly->throw->DOMMessageFormatter->formatMessage->new->DOMException->if->needsSyncData->synchronizeData->if->data->length->throw->DOMMessageFormatter->formatMessage->new->DOMException->newText->getOwnerDocument->data->substring->createTextNode->data->substring->setNodeValue->parentNode->getParentNode->if->parentNode->insertBefore->return
TextImpl#replaceData(String):::NON-DOM (used by DOMParser): Reset data for the node.:::
TextImpl#removeData():::NON-DOM (used by DOMParser: Sets data to empty string:::olddata->return
TreeWalkerImpl#getWhatToShow():::Return the whatToShow value:::return
TreeWalkerImpl#getFilter():::Return the NodeFilter:::return
TreeWalkerImpl#getExpandEntityReferences():::Return whether children entity references are included in the iterator.:::return
TreeWalkerImpl#getCurrentNode():::Return the current Node.:::return
TreeWalkerImpl#setCurrentNode(Node):::Return the current Node.:::if->msg->DOMMessageFormatter->formatMessage->throw->new->DOMException
TreeWalkerImpl#parentNode():::Return the parent Node from the current node,  after applying filter, whatToshow:::if->return->node->getParentNode->if->return
TreeWalkerImpl#firstChild():::Return the first child Node from the current node,  after applying filter, whatToshow:::if->return->node->getFirstChild->if->return
TreeWalkerImpl#lastChild():::Return the last child Node from the current node,  after applying filter, whatToshow:::if->return->node->getLastChild->if->return
TreeWalkerImpl#previousSibling():::Return the previous sibling Node from the current node,  after applying filter, whatToshow:::if->return->node->getPreviousSibling->if->return
TreeWalkerImpl#nextSibling():::Return the next sibling Node from the current node,  after applying filter, whatToshow:::if->return->node->getNextSibling->if->return
TreeWalkerImpl#previousNode():::Return the previous Node from the current node,  after applying filter, whatToshow:::result->if->return->getPreviousSibling->if->getParentNode->if->return->return->lastChild->getLastChild->prev->while->getLastChild->if->return->if->return->return
TreeWalkerImpl#nextNode():::Return the next Node from the current node,  after applying filter, whatToshow:::if->return->result->getFirstChild->if->return->getNextSibling->if->return->parent->getParentNode->while->getNextSibling->if->return->else->getParentNode->return
TreeWalkerImpl#getParentNode(Node):::Internal function:::if->return->newNode->node->getParentNode->if->return->accept->acceptNode->if->return->else->return->getParentNode
TreeWalkerImpl#getNextSibling(Node):::Internal function:::return->getNextSibling
TreeWalkerImpl#getNextSibling(Node, Node):::Internal function:::if->return->newNode->node->getNextSibling->if->node->getParentNode->if->return->parentAccept->acceptNode->if->return->getNextSibling->return->accept->acceptNode->if->return->else->if->fChild->getFirstChild->if->return->getNextSibling->return->else->return->getNextSibling
TreeWalkerImpl#getPreviousSibling(Node):::Internal function:::return->getPreviousSibling
TreeWalkerImpl#getPreviousSibling(Node, Node):::Internal function:::if->return->newNode->node->getPreviousSibling->if->node->getParentNode->if->return->parentAccept->acceptNode->if->return->getPreviousSibling->return->accept->acceptNode->if->return->else->if->fChild->getLastChild->if->return->getPreviousSibling->return->else->return->getPreviousSibling
TreeWalkerImpl#getFirstChild(Node):::Internal function:::if->return->if->node->getNodeType->return->newNode->node->getFirstChild->if->return->accept->acceptNode->if->return->else->if->newNode->hasChildNodes->fChild->getFirstChild->if->return->getNextSibling->return->else->return->getNextSibling
TreeWalkerImpl#getLastChild(Node):::Internal function:::if->return->if->node->getNodeType->return->newNode->node->getLastChild->if->return->accept->acceptNode->if->return->else->if->newNode->hasChildNodes->lChild->getLastChild->if->return->getPreviousSibling->return->else->return->getPreviousSibling
TreeWalkerImpl#acceptNode(Node):::Internal function:::if->if->node->getNodeType->return->else->return->else->if->node->getNodeType->return->fNodeFilter->acceptNode->else->return

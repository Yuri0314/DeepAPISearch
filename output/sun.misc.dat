sun.misc.Signal#getNumber()->int::: signal get number
sun.misc.Signal#getName()->String:::Returns the signal name.
sun.misc.Signal#equals(Object)->boolean:::Compares the equality of two Signal objects.
sun.misc.Signal#hashCode()->int:::Returns a hashcode for this Signal.
sun.misc.Signal#toString()->String:::Returns a string representation of this signal
sun.misc.Signal#handle(Signal, SignalHandler)->SignalHandler:::Registers a signal handler.
sun.misc.Signal#raise(Signal)->void:::Raises a signal in the current process.
sun.misc.Signal.InternalMiscHandler#of(Signal, SignalHandler)->jdk.internal.misc.Signal.Handler::: internal misc handler of
sun.misc.Signal.InternalMiscHandler#handle(jdk.internal.misc.Signal)->void::: internal misc handler handle
sun.misc.Signal.SunMiscHandler#of(jdk.internal.misc.Signal, jdk.internal.misc.Signal.Handler)->SignalHandler::: sun misc handler of
sun.misc.Signal.SunMiscHandler#handle(Signal)->void::: sun misc handler handle
sun.misc.Signal.SunMiscHandler#toString()->String::: sun misc handler to string
sun.misc.SignalHandler#handle(Signal)->void:::Handle the given signal
sun.misc.Unsafe#getUnsafe()->Unsafe:::Provides the caller with the capability of performing unsafe operations
sun.misc.Unsafe#getInt(Object, long)->int:::Fetches a value from a given Java variable
sun.misc.Unsafe#putInt(Object, long, int)->void:::Stores a value into a given Java variable
sun.misc.Unsafe#getObject(Object, long)->Object:::Fetches a reference value from a given Java variable.
sun.misc.Unsafe#putObject(Object, long, Object)->void:::Stores a reference value into a given Java variable
sun.misc.Unsafe#getBoolean(Object, long)->boolean::: unsafe get boolean
sun.misc.Unsafe#putBoolean(Object, long, boolean)->void::: unsafe put boolean
sun.misc.Unsafe#getByte(Object, long)->byte::: unsafe get byte
sun.misc.Unsafe#putByte(Object, long, byte)->void::: unsafe put byte
sun.misc.Unsafe#getShort(Object, long)->short::: unsafe get short
sun.misc.Unsafe#putShort(Object, long, short)->void::: unsafe put short
sun.misc.Unsafe#getChar(Object, long)->char::: unsafe get char
sun.misc.Unsafe#putChar(Object, long, char)->void::: unsafe put char
sun.misc.Unsafe#getLong(Object, long)->long::: unsafe get long
sun.misc.Unsafe#putLong(Object, long, long)->void::: unsafe put long
sun.misc.Unsafe#getFloat(Object, long)->float::: unsafe get float
sun.misc.Unsafe#putFloat(Object, long, float)->void::: unsafe put float
sun.misc.Unsafe#getDouble(Object, long)->double::: unsafe get double
sun.misc.Unsafe#putDouble(Object, long, double)->void::: unsafe put double
sun.misc.Unsafe#getByte(long)->byte:::Fetches a value from a given memory address
sun.misc.Unsafe#putByte(long, byte)->void:::Stores a value into a given memory address
sun.misc.Unsafe#getShort(long)->short::: unsafe get short
sun.misc.Unsafe#putShort(long, short)->void::: unsafe put short
sun.misc.Unsafe#getChar(long)->char::: unsafe get char
sun.misc.Unsafe#putChar(long, char)->void::: unsafe put char
sun.misc.Unsafe#getInt(long)->int::: unsafe get int
sun.misc.Unsafe#putInt(long, int)->void::: unsafe put int
sun.misc.Unsafe#getLong(long)->long::: unsafe get long
sun.misc.Unsafe#putLong(long, long)->void::: unsafe put long
sun.misc.Unsafe#getFloat(long)->float::: unsafe get float
sun.misc.Unsafe#putFloat(long, float)->void::: unsafe put float
sun.misc.Unsafe#getDouble(long)->double::: unsafe get double
sun.misc.Unsafe#putDouble(long, double)->void::: unsafe put double
sun.misc.Unsafe#getAddress(long)->long:::Fetches a native pointer from a given memory address
sun.misc.Unsafe#putAddress(long, long)->void:::Stores a native pointer into a given memory address
sun.misc.Unsafe#allocateMemory(long)->long:::Allocates a new block of native memory, of the given size in bytes
sun.misc.Unsafe#reallocateMemory(long, long)->long:::Resizes a new block of native memory, to the given size in bytes
sun.misc.Unsafe#setMemory(Object, long, long, byte)->void:::Sets all bytes in a given block of memory to a fixed value (usually zero)
sun.misc.Unsafe#setMemory(long, long, byte)->void:::Sets all bytes in a given block of memory to a fixed value (usually zero)
sun.misc.Unsafe#copyMemory(Object, long, Object, long, long)->void:::Sets all bytes in a given block of memory to a copy of another block
sun.misc.Unsafe#copyMemory(long, long, long)->void:::Sets all bytes in a given block of memory to a copy of another block
sun.misc.Unsafe#freeMemory(long)->void:::Disposes of a block of native memory, as obtained from #allocateMemory or #reallocateMemory
sun.misc.Unsafe#objectFieldOffset(Field)->long:::Reports the location of a given field in the storage allocation of its class
sun.misc.Unsafe#staticFieldOffset(Field)->long:::Reports the location of a given static field, in conjunction with #staticFieldBase
sun.misc.Unsafe#staticFieldBase(Field)->Object:::Reports the location of a given static field, in conjunction with #staticFieldOffset
sun.misc.Unsafe#shouldBeInitialized(Class)->boolean:::Detects if the given class may need to be initialized
sun.misc.Unsafe#ensureClassInitialized(Class)->void:::Ensures the given class has been initialized
sun.misc.Unsafe#arrayBaseOffset(Class)->int:::Reports the offset of the first element in the storage allocation of a given array class
sun.misc.Unsafe#arrayIndexScale(Class)->int:::Reports the scale factor for addressing elements in the storage allocation of a given array class
sun.misc.Unsafe#addressSize()->int:::Reports the size in bytes of a native pointer, as stored via #putAddress
sun.misc.Unsafe#pageSize()->int:::Reports the size in bytes of a native memory page (whatever that is)
sun.misc.Unsafe#defineAnonymousClass(Class, byte[], Object[])->Class:::Defines a class but does not make it known to the class loader or system dictionary
sun.misc.Unsafe#allocateInstance(Class)->Object:::Allocates an instance but does not run any constructor
sun.misc.Unsafe#throwException(Throwable)->void:::Throws the exception without telling the verifier.
sun.misc.Unsafe#compareAndSwapObject(Object, long, Object, Object)->boolean:::Atomically updates Java variable to x if it is currently holding expected
sun.misc.Unsafe#compareAndSwapInt(Object, long, int, int)->boolean:::Atomically updates Java variable to x if it is currently holding expected
sun.misc.Unsafe#compareAndSwapLong(Object, long, long, long)->boolean:::Atomically updates Java variable to x if it is currently holding expected
sun.misc.Unsafe#getObjectVolatile(Object, long)->Object:::Fetches a reference value from a given Java variable, with volatile load semantics
sun.misc.Unsafe#putObjectVolatile(Object, long, Object)->void:::Stores a reference value into a given Java variable, with volatile store semantics
sun.misc.Unsafe#getIntVolatile(Object, long)->int:::Volatile version of #getInt(Object, long)
sun.misc.Unsafe#putIntVolatile(Object, long, int)->void:::Volatile version of #putInt(Object, long, int)
sun.misc.Unsafe#getBooleanVolatile(Object, long)->boolean:::Volatile version of #getBoolean(Object, long)
sun.misc.Unsafe#putBooleanVolatile(Object, long, boolean)->void:::Volatile version of #putBoolean(Object, long, boolean)
sun.misc.Unsafe#getByteVolatile(Object, long)->byte:::Volatile version of #getByte(Object, long)
sun.misc.Unsafe#putByteVolatile(Object, long, byte)->void:::Volatile version of #putByte(Object, long, byte)
sun.misc.Unsafe#getShortVolatile(Object, long)->short:::Volatile version of #getShort(Object, long)
sun.misc.Unsafe#putShortVolatile(Object, long, short)->void:::Volatile version of #putShort(Object, long, short)
sun.misc.Unsafe#getCharVolatile(Object, long)->char:::Volatile version of #getChar(Object, long)
sun.misc.Unsafe#putCharVolatile(Object, long, char)->void:::Volatile version of #putChar(Object, long, char)
sun.misc.Unsafe#getLongVolatile(Object, long)->long:::Volatile version of #getLong(Object, long)
sun.misc.Unsafe#putLongVolatile(Object, long, long)->void:::Volatile version of #putLong(Object, long, long)
sun.misc.Unsafe#getFloatVolatile(Object, long)->float:::Volatile version of #getFloat(Object, long)
sun.misc.Unsafe#putFloatVolatile(Object, long, float)->void:::Volatile version of #putFloat(Object, long, float)
sun.misc.Unsafe#getDoubleVolatile(Object, long)->double:::Volatile version of #getDouble(Object, long)
sun.misc.Unsafe#putDoubleVolatile(Object, long, double)->void:::Volatile version of #putDouble(Object, long, double)
sun.misc.Unsafe#putOrderedObject(Object, long, Object)->void:::Version of #putObjectVolatile(Object, long, Object) that does not guarantee immediate visibility of the store to other threads
sun.misc.Unsafe#putOrderedInt(Object, long, int)->void:::Ordered/Lazy version of #putIntVolatile(Object, long, int)
sun.misc.Unsafe#putOrderedLong(Object, long, long)->void:::Ordered/Lazy version of #putLongVolatile(Object, long, long)
sun.misc.Unsafe#unpark(Object)->void:::Unblocks the given thread blocked on park, or, if it is not blocked, causes the subsequent call to park not to block
sun.misc.Unsafe#park(boolean, long)->void:::Blocks current thread, returning when a balancing unpark occurs, or a balancing unpark has already occurred, or the thread is interrupted, or, if not absolute and time is not zero, the given time nanoseconds have elapsed, or if absolute, the given deadline in milliseconds since Epoch has passed, or spuriously (i.e., returning for no "reason")
sun.misc.Unsafe#getLoadAverage(double[], int)->int:::Gets the load average in the system run queue assigned to the available processors averaged over various periods of time
sun.misc.Unsafe#getAndAddInt(Object, long, int)->int:::Atomically adds the given value to the current value of a field or array element within the given object o at the given offset.
sun.misc.Unsafe#getAndAddLong(Object, long, long)->long:::Atomically adds the given value to the current value of a field or array element within the given object o at the given offset.
sun.misc.Unsafe#getAndSetInt(Object, long, int)->int:::Atomically exchanges the given value with the current value of a field or array element within the given object o at the given offset.
sun.misc.Unsafe#getAndSetLong(Object, long, long)->long:::Atomically exchanges the given value with the current value of a field or array element within the given object o at the given offset.
sun.misc.Unsafe#getAndSetObject(Object, long, Object)->Object:::Atomically exchanges the given reference value with the current reference value of a field or array element within the given object o at the given offset.
sun.misc.Unsafe#loadFence()->void:::Ensures that loads before the fence will not be reordered with loads and stores after the fence; a "LoadLoad plus LoadStore barrier"
sun.misc.Unsafe#storeFence()->void:::Ensures that loads and stores before the fence will not be reordered with stores after the fence; a "StoreStore plus LoadStore barrier"
sun.misc.Unsafe#fullFence()->void:::Ensures that loads and stores before the fence will not be reordered with loads and stores after the fence
sun.misc.Unsafe#invokeCleaner(java.nio.ByteBuffer)->void:::Invokes the given direct byte buffer's cleaner, if any.

org.graalvm.compiler.nodes.type.NarrowOopStamp#accept(Visitor)->void::: narrow oop stamp accept
org.graalvm.compiler.nodes.type.NarrowOopStamp#copyWith(ResolvedJavaType, boolean, boolean, boolean)->AbstractObjectStamp::: narrow oop stamp copy with
org.graalvm.compiler.nodes.type.NarrowOopStamp#uncompressed()->Stamp::: narrow oop stamp uncompressed
org.graalvm.compiler.nodes.type.NarrowOopStamp#getEncoding()->CompressEncoding::: narrow oop stamp get encoding
org.graalvm.compiler.nodes.type.NarrowOopStamp#getLIRKind(LIRKindTool)->LIRKind::: narrow oop stamp get kind
org.graalvm.compiler.nodes.type.NarrowOopStamp#toString()->String::: narrow oop stamp to string
org.graalvm.compiler.nodes.type.NarrowOopStamp#isCompatible(Stamp)->boolean::: narrow oop stamp is compatible
org.graalvm.compiler.nodes.type.NarrowOopStamp#readConstant(MemoryAccessProvider, Constant, long)->Constant::: narrow oop stamp read constant
org.graalvm.compiler.nodes.type.NarrowOopStamp#hashCode()->int::: narrow oop stamp hash code
org.graalvm.compiler.nodes.type.NarrowOopStamp#equals(Object)->boolean::: narrow oop stamp equals
org.graalvm.compiler.nodes.type.NarrowOopStamp#isCompatible(Constant)->boolean::: narrow oop stamp is compatible
org.graalvm.compiler.nodes.type.StampTool#meet(Iterable)->Stamp::: stamp tool meet
org.graalvm.compiler.nodes.type.StampTool#meetOrNull(Iterable, ValueNode)->Stamp:::Meet a collection of ValueNodes optionally excluding selfValue
org.graalvm.compiler.nodes.type.StampTool#unsignedCompare(Stamp, Stamp)->Stamp:::Compute the stamp resulting from the unsigned comparison being true.
org.graalvm.compiler.nodes.type.StampTool#stampForLeadingZeros(IntegerStamp)->Stamp::: stamp tool stamp for leading zeros
org.graalvm.compiler.nodes.type.StampTool#stampForTrailingZeros(IntegerStamp)->Stamp::: stamp tool stamp for trailing zeros
org.graalvm.compiler.nodes.type.StampTool#isPointerAlwaysNull(ValueNode)->boolean:::Checks whether this ValueNode represents a Stamp#hasValues() legal pointer value which is known to be always null.
org.graalvm.compiler.nodes.type.StampTool#isPointerAlwaysNull(Stamp)->boolean:::Checks whether this Stamp represents a Stamp#hasValues() legal pointer stamp whose values are known to be always null.
org.graalvm.compiler.nodes.type.StampTool#isPointerNonNull(ValueNode)->boolean:::Checks whether this ValueNode represents a Stamp#hasValues() legal pointer value which is known to never be null.
org.graalvm.compiler.nodes.type.StampTool#isPointerNonNull(Stamp)->boolean:::Checks whether this Stamp represents a Stamp#hasValues() legal pointer stamp whose values are known to never be null.
org.graalvm.compiler.nodes.type.StampTool#typeReferenceOrNull(ValueNode)->TypeReference:::Returns the ResolvedJavaType Java type this ValueNode has if it is a Stamp#hasValues() legal Object value.
org.graalvm.compiler.nodes.type.StampTool#typeOrNull(ValueNode)->ResolvedJavaType::: stamp tool type or null
org.graalvm.compiler.nodes.type.StampTool#typeOrNull(Stamp)->ResolvedJavaType::: stamp tool type or null
org.graalvm.compiler.nodes.type.StampTool#typeOrNull(Stamp, MetaAccessProvider)->ResolvedJavaType::: stamp tool type or null
org.graalvm.compiler.nodes.type.StampTool#typeOrNull(ValueNode, MetaAccessProvider)->ResolvedJavaType::: stamp tool type or null
org.graalvm.compiler.nodes.type.StampTool#typeReferenceOrNull(Stamp)->TypeReference:::Returns the ResolvedJavaType Java type this Stamp has if it is a Stamp#hasValues() legal Object stamp.
org.graalvm.compiler.nodes.type.StampTool#isExactType(ValueNode)->boolean:::Checks whether this ValueNode represents a Stamp#hasValues() legal Object value whose Java type is known exactly
org.graalvm.compiler.nodes.type.StampTool#isExactType(Stamp)->boolean:::Checks whether this Stamp represents a Stamp#hasValues() legal Object stamp whose ResolvedJavaType Java type is known exactly

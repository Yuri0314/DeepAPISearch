NarrowOopStamp#accept(Visitor)::: narrow oop stamp accept:::super->accept->v->encoding->getBase->visitLong->v->encoding->getShift->visitInt
NarrowOopStamp#copyWith(ResolvedJavaType, boolean, boolean, boolean)::: narrow oop stamp copy with:::
NarrowOopStamp#uncompressed()::: narrow oop stamp uncompressed:::return->type->isExactType->nonNull->alwaysNull->new->ObjectStamp
NarrowOopStamp#getEncoding()::: narrow oop stamp get encoding:::return
NarrowOopStamp#getLIRKind(LIRKindTool)::: narrow oop stamp get kind:::return->tool->getNarrowOopKind
NarrowOopStamp#toString()::: narrow oop stamp to string:::str->new->StringBuilder->str->append->appendString->return->str->toString
NarrowOopStamp#isCompatible(Stamp)::: narrow oop stamp is compatible:::if->return->if->narrow->return->encoding->equals->return
NarrowOopStamp#readConstant(MemoryAccessProvider, Constant, long)::: narrow oop stamp read constant:::
NarrowOopStamp#hashCode()::: narrow oop stamp hash code:::prime->result->super->hashCode->encoding->hashCode->return
NarrowOopStamp#equals(Object)::: narrow oop stamp equals:::if->return->if->getClass->obj->getClass->return->other->if->encoding->equals->return->return->super->equals
NarrowOopStamp#isCompatible(Constant)::: narrow oop stamp is compatible:::
StampTool#meet(Iterable)::: stamp tool meet:::stamp->meetOrNull->if->return->StampFactory->forVoid->return
StampTool#meetOrNull(Iterable, ValueNode):::Meet a collection of ValueNodes optionally excluding selfValue:::iterator->values->iterator->stamp->while->iterator->hasNext->nextValue->iterator->next->if->if->nextValue->stamp->else->stamp->nextValue->stamp->meet->return
StampTool#unsignedCompare(Stamp, Stamp):::Compute the stamp resulting from the unsigned comparison being true.:::x->y->if->x->isUnrestricted->y->isUnrestricted->return->if->x->lowerBound->x->upperBound->if->y->isPositive->if->x->lowerBound->x->getBits->return->if->x->lowerBound->y->lowerBound->return->return->StampFactory->x->getBits->x->lowerBound->y->upperBound->forInteger->return->if->y->lowerBound->y->upperBound->y->isStrictlyPositive->return->StampFactory->y->getBits->y->lowerBound->forInteger->return
StampTool#stampForLeadingZeros(IntegerStamp)::: stamp tool stamp for leading zeros:::mask->CodeUtil->valueStamp->getBits->mask->adjust->Long->numberOfLeadingZeros->min->Long->valueStamp->upMask->numberOfLeadingZeros->max->Long->valueStamp->downMask->numberOfLeadingZeros->return->StampFactory->forInteger
StampTool#stampForTrailingZeros(IntegerStamp)::: stamp tool stamp for trailing zeros:::mask->CodeUtil->valueStamp->getBits->mask->min->Long->valueStamp->upMask->numberOfTrailingZeros->max->Long->valueStamp->downMask->numberOfTrailingZeros->return->StampFactory->forInteger
StampTool#isPointerAlwaysNull(ValueNode):::Checks whether this ValueNode represents a Stamp#hasValues() legal pointer value which is known to be always null.:::return->node->stamp->isPointerAlwaysNull
StampTool#isPointerAlwaysNull(Stamp):::Checks whether this Stamp represents a Stamp#hasValues() legal pointer stamp whose values are known to be always null.:::if->stamp->hasValues->return->alwaysNull->return
StampTool#isPointerNonNull(ValueNode):::Checks whether this ValueNode represents a Stamp#hasValues() legal pointer value which is known to never be null.:::return->node->stamp->isPointerNonNull
StampTool#isPointerNonNull(Stamp):::Checks whether this Stamp represents a Stamp#hasValues() legal pointer stamp whose values are known to never be null.:::if->return->nonNull->return
StampTool#typeReferenceOrNull(ValueNode):::Returns the ResolvedJavaType Java type this ValueNode has if it is a Stamp#hasValues() legal Object value.:::return->node->stamp->typeReferenceOrNull
StampTool#typeOrNull(ValueNode)::: stamp tool type or null:::return->node->stamp->typeOrNull
StampTool#typeOrNull(Stamp)::: stamp tool type or null:::type->typeReferenceOrNull->return->type->getType
StampTool#typeOrNull(Stamp, MetaAccessProvider)::: stamp tool type or null:::if->stamp->hasValues->abstractObjectStamp->type->abstractObjectStamp->type->if->return->metaAccess->lookupJavaType->else->return->return
StampTool#typeOrNull(ValueNode, MetaAccessProvider)::: stamp tool type or null:::return->node->stamp->typeOrNull
StampTool#typeReferenceOrNull(Stamp):::Returns the ResolvedJavaType Java type this Stamp has if it is a Stamp#hasValues() legal Object stamp.:::if->stamp->hasValues->abstractObjectStamp->if->abstractObjectStamp->isExactType->return->TypeReference->abstractObjectStamp->type->createExactTrusted->else->return->TypeReference->abstractObjectStamp->type->createTrustedWithoutAssumptions->return
StampTool#isExactType(ValueNode):::Checks whether this ValueNode represents a Stamp#hasValues() legal Object value whose Java type is known exactly:::return->node->stamp->isExactType
StampTool#isExactType(Stamp):::Checks whether this Stamp represents a Stamp#hasValues() legal Object stamp whose ResolvedJavaType Java type is known exactly:::if->stamp->hasValues->return->isExactType->return

ClassLoaderUtils#loadClass(String, Class):::Load a class with a given name:::try->cl->Thread->currentThread->getContextClassLoader->if->return->cl->loadClass->catch->LOG->e->getMessage->debug->finally->return->loadClass2
ResourceResolver#getInstance(Attr, String, boolean):::Method getInstance:::context->new->ResourceResolverContext->return->internalGetInstance
ResourceResolver#getInstance(Attr, String, List):::Method getInstance:::return->getInstance
ResourceResolver#getInstance(Attr, String, List, boolean):::Method getInstance:::LOG->individualResolvers->size->debug->context->new->ResourceResolverContext->if->for->i->individualResolvers->size->return->internalGetInstance
ResourceResolver#register(String):::Registers a ResourceResolverSpi class:::JavaUtils->checkRegisterPermission->try->resourceResolverClass->ClassLoaderUtils->loadClass->register->catch->LOG->warn->finally
ResourceResolver#registerAtStart(String):::Registers a ResourceResolverSpi class at the beginning of the provider list:::JavaUtils->checkRegisterPermission->try->resourceResolverClass->ClassLoaderUtils->loadClass->register->catch->LOG->warn->finally
ResourceResolver#register(Class, boolean):::Registers a ResourceResolverSpi class:::JavaUtils->checkRegisterPermission->try->resourceResolverSpi->className->newInstance->register->catch->LOG->warn->LOG->warn->finally
ResourceResolver#register(ResourceResolverSpi, boolean):::Registers a ResourceResolverSpi instance:::JavaUtils->checkRegisterPermission->synchronized->if->resolverList->new->ResourceResolver->add->else->resolverList->new->ResourceResolver->add->LOG->resourceResolverSpi->toString->debug
ResourceResolver#registerDefaultResolvers():::This method registers the default resolvers.:::synchronized->resolverList->new->ResolverFragment->new->ResourceResolver->add->resolverList->new->ResolverLocalFilesystem->new->ResourceResolver->add->resolverList->new->ResolverXPointer->new->ResourceResolver->add->resolverList->new->ResolverDirectHTTP->new->ResourceResolver->add
ResourceResolver#resolve(Attr, String, boolean):::Method resolve:::context->new->ResourceResolverContext->return->resolverSpi->engineResolveURI
ResourceResolver#setProperty(String, String):::Method setProperty:::resolverSpi->engineSetProperty
ResourceResolver#getProperty(String):::Method getProperty:::return->resolverSpi->engineGetProperty
ResourceResolver#addProperties(Map):::Method addProperties:::resolverSpi->engineAddProperies
ResourceResolver#getPropertyKeys():::Method getPropertyKeys:::return->resolverSpi->engineGetPropertyKeys
ResourceResolver#understandsProperty(String):::Method understandsProperty:::return->resolverSpi->understandsProperty
ResourceResolverSpi#engineResolveURI(ResourceResolverContext):::This is the workhorse method used to resolve resources.:::
ResourceResolverSpi#engineSetProperty(String, String):::Method engineSetProperty:::if->new->HashMap<>->properties->put
ResourceResolverSpi#engineGetProperty(String):::Method engineGetProperty:::if->return->return->properties->get
ResourceResolverSpi#engineIsThreadSafe():::Tells if the implementation does can be reused by several threads safely:::return
ResourceResolverSpi#engineCanResolveURI(ResourceResolverContext):::This method helps the ResourceResolver to decide whether a ResourceResolverSpi is able to perform the requested action.:::
ResourceResolverSpi#engineGetPropertyKeys():::Method engineGetPropertyKeys:::return->new->StringArr
ResourceResolverSpi#understandsProperty(String):::Method understandsProperty:::understood->this->engineGetPropertyKeys->if->foreach->if->str->equals->return->return
ResourceResolverSpi#fixURI(String):::Fixes a platform dependent filename to standard URI form.:::str->replace->if->str->length->ch0->Character->str->charAt->toUpperCase->ch1->str->charAt->ch2->str->charAt->ch3->str->charAt->isDosFilename->if->LOG->debug->if->str->length->ch1->str->charAt->if->ch0->Character->str->charAt->toUpperCase->if->return

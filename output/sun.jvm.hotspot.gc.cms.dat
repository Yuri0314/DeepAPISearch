AdaptiveFreeList#initialize(TypeDataBase)::: adaptive free list initialize:::type->db->lookupType->type->getCIntegerField->type->getCIntegerField->type->getSize
AdaptiveFreeList#size()::: adaptive free list size:::return->sizeField->getValue
AdaptiveFreeList#count()::: adaptive free list count:::return->countField->getValue
AdaptiveFreeList#sizeOf()::: adaptive free list size of:::return
CMSBitMap#initialize(TypeDataBase)::: bit map initialize:::type->db->lookupType->type->getAddressField->type->getCIntegerField->type->getCIntegerField->type->getField->getOffset
CMSBitMap#printAll()::: bit map print all:::bmStartWord->println->bmWordSize->println->shifter->println
CMSBitMap#bmStartWord()::: bit map bm start word:::return->bmStartWordField->getValue
CMSBitMap#bmWordSize()::: bit map bm word size:::return->bmWordSizeField->getValue
CMSBitMap#shifter()::: bit map shifter:::return->shifterField->getValue
CMSBitMap#virtualSpace()::: bit map virtual space:::return->VMObjectFactory->addr->addOffsetTo->newObject
CMSBitMap#bm()::: bit map bm:::bitMap->bmWordSize->shifter->new->BitMap->vs->virtualSpace->bitMap->vs->low->set_map->return
CMSBitMap#getNextMarkedWordAddress(Address)::: bit map get next marked word address:::endWord->bmStartWord->bmWordSize->addOffsetTo->nextOffset->bm->heapWordToOffset->heapWordToOffset->getNextOneOffset->nextAddr->offsetToHeapWord->return
CMSBitMap#heapWordToOffset(Address)::: bit map heap word to offset:::temp->addr->bmStartWord->minus->VM->getVM->getAddressSize->ret_val->shifter->return
CMSBitMap#offsetToHeapWord(int)::: bit map offset to heap word:::temp->shifter->return->bmStartWord->VM->getVM->getAddressSize->addOffsetTo
CMSBitMap#isMarked(Address)::: bit map is marked:::bm->bm->return->bm->heapWordToOffset->at
CMSCollector#initialize(TypeDataBase)::: collector initialize:::type->db->lookupType->type->getField->getOffset
CMSCollector#markBitMap()::: collector mark bit map:::return->VMObjectFactory->addr->addOffsetTo->newObject
CMSCollector#blockSizeUsingPrintezisBits(Address)::: collector block size using printezis bits:::markBitMap->markBitMap->addressSize->VM->getVM->getAddressSize->if->markBitMap->isMarked->markBitMap->addr->addOffsetTo->isMarked->nextOneAddr->markBitMap->addr->addOffsetTo->getNextMarkedWordAddress->size->nextOneAddr->addOffsetTo->minus->return->else->return
CMSHeap#kind()::: heap kind:::return
CompactibleFreeListSpace#initialize(TypeDataBase)::: compactible free list space initialize:::sizeofFreeChunk->db->lookupType->getSize->vm->VM->getVM->type->db->lookupType->type->getAddressField->type->getAddressField->type->getAddressField->type->getAddressField->type->getField->getOffset->type->getCIntegerField->getValue
CompactibleFreeListSpace#collector()::: compactible free list space collector:::return->VMObjectFactory->collectorField->getValue->newObject
CompactibleFreeListSpace#free0()::: compactible free list space free0:::return->capacity->used0
CompactibleFreeListSpace#used()::: compactible free list space used:::return->capacity->free
CompactibleFreeListSpace#used0()::: compactible free list space used0:::regions->getLiveRegions->usedSize->for->itr->regions->iterator->itr->hasNext->return
CompactibleFreeListSpace#free()::: compactible free list space free:::size->cur->addr->indexedFreeListField->getOffset->addOffsetTo->cur->AdaptiveFreeList->sizeOf->addOffsetTo->for->i->aflbd->VMObjectFactory->dictionaryField->getValue->newObject->aflbd->size->lab->VMObjectFactory->addr->addOffsetTo->newObject->lab->word_size->return
CompactibleFreeListSpace#printOn(PrintStream)::: compactible free list space print on:::tty->print->tty->bottom->end->print->cap->capacity->used_size->used->free_size->free->used_perc->tty->print->tty->print->tty->print
CompactibleFreeListSpace#skipBlockSizeUsingPrintezisBits(Address)::: compactible free list space skip block size using printezis bits:::collector->collector->size->addr->if->collector->blockSizeUsingPrintezisBits->if->pos->adjustObjectSizeInBytes->addOffsetTo->return
CompactibleFreeListSpace#getLiveRegions()::: compactible free list space get live regions:::res->new->ArrayList->vm->VM->getVM->dbg->vm->getDebugger->heap->vm->getObjectHeap->cur->bottom->regionStart->limit->end->addressSize->vm->getAddressSize->for->cur->lessThan->return
CompactibleFreeListSpace#adjustObjectSizeInBytes(long)::: compactible free list space adjust object size in bytes:::return->Oop->Math->max->alignObjectSize
ConcurrentMarkSweepGeneration#initialize(TypeDataBase)::: concurrent mark sweep generation initialize:::type->db->lookupType->type->getAddressField
ConcurrentMarkSweepGeneration#cmsSpace()::: concurrent mark sweep generation cms space:::return->VMObjectFactory->cmsSpaceField->getValue->newObject
ConcurrentMarkSweepGeneration#capacity()::: concurrent mark sweep generation capacity:::return->cmsSpace->capacity
ConcurrentMarkSweepGeneration#used()::: concurrent mark sweep generation used:::return->cmsSpace->used
ConcurrentMarkSweepGeneration#free()::: concurrent mark sweep generation free:::return->cmsSpace->free
ConcurrentMarkSweepGeneration#contiguousAvailable()::: concurrent mark sweep generation contiguous available:::throw->new->RuntimeException
ConcurrentMarkSweepGeneration#contains(Address)::: concurrent mark sweep generation contains:::return->cmsSpace->contains
ConcurrentMarkSweepGeneration#spaceIterate(SpaceClosure, boolean)::: concurrent mark sweep generation space iterate:::blk->cmsSpace->doSpace
ConcurrentMarkSweepGeneration#kind()::: concurrent mark sweep generation kind:::return
ConcurrentMarkSweepGeneration#name()::: concurrent mark sweep generation name:::return
ConcurrentMarkSweepGeneration#printOn(PrintStream)::: concurrent mark sweep generation print on:::tty->name->println->cmsSpace->printOn
LinearAllocBlock#initialize(TypeDataBase)::: linear alloc block initialize:::type->db->lookupType->type->getCIntegerField
LinearAllocBlock#word_size()::: linear alloc block word_size:::return->word_sizeField->getValue
ParNewGeneration#kind()::: par new generation kind:::return

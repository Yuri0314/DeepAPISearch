sun.java2d.loops.Blit#locate(SurfaceType, CompositeType, SurfaceType)->Blit::: blit locate
sun.java2d.loops.Blit#getFromCache(SurfaceType, CompositeType, SurfaceType)->Blit::: blit get from cache
sun.java2d.loops.Blit#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void:::All Blit implementors must have this invoker method
sun.java2d.loops.Blit#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: blit make primitive
sun.java2d.loops.Blit#traceWrap()->GraphicsPrimitive::: blit trace wrap
sun.java2d.loops.BlitBg#locate(SurfaceType, CompositeType, SurfaceType)->BlitBg::: blit bg locate
sun.java2d.loops.BlitBg#getFromCache(SurfaceType, CompositeType, SurfaceType)->BlitBg::: blit bg get from cache
sun.java2d.loops.BlitBg#BlitBg(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int, int)->void:::All BlitBg implementors must have this invoker method
sun.java2d.loops.BlitBg#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: blit bg make primitive
sun.java2d.loops.BlitBg#traceWrap()->GraphicsPrimitive::: blit bg trace wrap
sun.java2d.loops.CompositeType#deriveSubType(String)->CompositeType:::Return a new CompositeType object which uses this object as its more general "supertype" descriptor
sun.java2d.loops.CompositeType#forAlphaComposite(AlphaComposite)->CompositeType:::Return a CompositeType object for the specified AlphaComposite rule.
sun.java2d.loops.CompositeType#makeUniqueID(String)->int::: composite type make unique d
sun.java2d.loops.CompositeType#getUniqueID()->int::: composite type get unique d
sun.java2d.loops.CompositeType#getDescriptor()->String::: composite type get descriptor
sun.java2d.loops.CompositeType#getSuperType()->CompositeType::: composite type get super type
sun.java2d.loops.CompositeType#hashCode()->int::: composite type hash code
sun.java2d.loops.CompositeType#isDerivedFrom(CompositeType)->boolean::: composite type is derived from
sun.java2d.loops.CompositeType#equals(Object)->boolean::: composite type equals
sun.java2d.loops.CompositeType#toString()->String::: composite type to string
sun.java2d.loops.CustomComponent#register()->void::: custom component register
sun.java2d.loops.CustomComponent#getRegionOfInterest(SurfaceData, SurfaceData, Region, int, int, int, int, int, int)->Region::: custom component get region of interest
sun.java2d.loops.OpaqueCopyAnyToArgb#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: opaque copy any to argb  blit
sun.java2d.loops.OpaqueCopyArgbToAny#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: opaque copy argb to any  blit
sun.java2d.loops.XorCopyArgbToAny#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int)->void::: xor copy argb to any  blit
sun.java2d.loops.DrawGlyphList#locate(SurfaceType, CompositeType, SurfaceType)->DrawGlyphList::: draw glyph list locate
sun.java2d.loops.DrawGlyphList#DrawGlyphList(SunGraphics2D, SurfaceData, GlyphList)->void::: draw glyph list  draw glyph list
sun.java2d.loops.DrawGlyphList#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: draw glyph list make primitive
sun.java2d.loops.DrawGlyphList#traceWrap()->GraphicsPrimitive::: draw glyph list trace wrap
sun.java2d.loops.DrawGlyphListAA#locate(SurfaceType, CompositeType, SurfaceType)->DrawGlyphListAA::: draw glyph list a locate
sun.java2d.loops.DrawGlyphListAA#DrawGlyphListAA(SunGraphics2D, SurfaceData, GlyphList)->void::: draw glyph list a  draw glyph list a
sun.java2d.loops.DrawGlyphListAA#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: draw glyph list a make primitive
sun.java2d.loops.DrawGlyphListAA.General#DrawGlyphListAA(SunGraphics2D, SurfaceData, GlyphList)->void::: general  draw glyph list a
sun.java2d.loops.DrawGlyphListAA#traceWrap()->GraphicsPrimitive::: draw glyph list a trace wrap
sun.java2d.loops.DrawGlyphListLCD#locate(SurfaceType, CompositeType, SurfaceType)->DrawGlyphListLCD::: draw glyph list d locate
sun.java2d.loops.DrawGlyphListLCD#DrawGlyphListLCD(SunGraphics2D, SurfaceData, GlyphList)->void::: draw glyph list d  draw glyph list d
sun.java2d.loops.DrawGlyphListLCD#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: draw glyph list d make primitive
sun.java2d.loops.DrawGlyphListLCD#traceWrap()->GraphicsPrimitive::: draw glyph list d trace wrap
sun.java2d.loops.DrawLine#locate(SurfaceType, CompositeType, SurfaceType)->DrawLine::: draw line locate
sun.java2d.loops.DrawLine#DrawLine(SunGraphics2D, SurfaceData, int, int, int, int)->void:::  All DrawLine implementors must have this invoker method
sun.java2d.loops.DrawLine#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: draw line make primitive
sun.java2d.loops.DrawLine#traceWrap()->GraphicsPrimitive::: draw line trace wrap
sun.java2d.loops.DrawParallelogram#locate(SurfaceType, CompositeType, SurfaceType)->DrawParallelogram::: draw parallelogram locate
sun.java2d.loops.DrawParallelogram#DrawParallelogram(SunGraphics2D, SurfaceData, double, double, double, double, double, double, double, double)->void:::All DrawParallelogram implementors must have this invoker method
sun.java2d.loops.DrawParallelogram#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: draw parallelogram make primitive
sun.java2d.loops.DrawParallelogram#traceWrap()->GraphicsPrimitive::: draw parallelogram trace wrap
sun.java2d.loops.DrawPath#locate(SurfaceType, CompositeType, SurfaceType)->DrawPath::: draw path locate
sun.java2d.loops.DrawPath#DrawPath(SunGraphics2D, SurfaceData, int, int, Path2D.Float)->void:::  All DrawPath implementors must have this invoker method
sun.java2d.loops.DrawPath#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: draw path make primitive
sun.java2d.loops.DrawPath#traceWrap()->GraphicsPrimitive::: draw path trace wrap
sun.java2d.loops.DrawPolygons#locate(SurfaceType, CompositeType, SurfaceType)->DrawPolygons::: draw polygons locate
sun.java2d.loops.DrawPolygons#DrawPolygons(SunGraphics2D, SurfaceData, int[], int[], int[], int, int, int, boolean)->void:::  All DrawPolygon implementors must have this invoker method
sun.java2d.loops.DrawPolygons#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: draw polygons make primitive
sun.java2d.loops.DrawPolygons#traceWrap()->GraphicsPrimitive::: draw polygons trace wrap
sun.java2d.loops.DrawRect#locate(SurfaceType, CompositeType, SurfaceType)->DrawRect::: draw rect locate
sun.java2d.loops.DrawRect#DrawRect(SunGraphics2D, SurfaceData, int, int, int, int)->void:::  All DrawRect implementors must have this invoker method
sun.java2d.loops.DrawRect#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: draw rect make primitive
sun.java2d.loops.DrawRect#traceWrap()->GraphicsPrimitive::: draw rect trace wrap
sun.java2d.loops.FillParallelogram#locate(SurfaceType, CompositeType, SurfaceType)->FillParallelogram::: fill parallelogram locate
sun.java2d.loops.FillParallelogram#FillParallelogram(SunGraphics2D, SurfaceData, double, double, double, double, double, double)->void:::All FillParallelogram implementors must have this invoker method
sun.java2d.loops.FillParallelogram#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: fill parallelogram make primitive
sun.java2d.loops.FillParallelogram#traceWrap()->GraphicsPrimitive::: fill parallelogram trace wrap
sun.java2d.loops.FillPath#locate(SurfaceType, CompositeType, SurfaceType)->FillPath::: fill path locate
sun.java2d.loops.FillPath#FillPath(SunGraphics2D, SurfaceData, int, int, Path2D.Float)->void:::  All FillPath implementors must have this invoker method
sun.java2d.loops.FillPath#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: fill path make primitive
sun.java2d.loops.FillPath#traceWrap()->GraphicsPrimitive::: fill path trace wrap
sun.java2d.loops.FillRect#locate(SurfaceType, CompositeType, SurfaceType)->FillRect::: fill rect locate
sun.java2d.loops.FillRect#FillRect(SunGraphics2D, SurfaceData, int, int, int, int)->void:::  All FillRect implementors must have this invoker method
sun.java2d.loops.FillRect#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: fill rect make primitive
sun.java2d.loops.FillRect.General#FillRect(SunGraphics2D, SurfaceData, int, int, int, int)->void::: general  fill rect
sun.java2d.loops.FillRect#traceWrap()->GraphicsPrimitive::: fill rect trace wrap
sun.java2d.loops.FillSpans#locate(SurfaceType, CompositeType, SurfaceType)->FillSpans::: fill spans locate
sun.java2d.loops.FillSpans#FillSpans(SunGraphics2D, SurfaceData, SpanIterator)->void:::All FillSpan implementors must have this invoker method
sun.java2d.loops.FillSpans#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: fill spans make primitive
sun.java2d.loops.FillSpans#traceWrap()->GraphicsPrimitive::: fill spans trace wrap
sun.java2d.loops.FontInfo#mtx(double[])->String::: font info mtx
sun.java2d.loops.FontInfo#clone()->Object::: font info clone
sun.java2d.loops.FontInfo#toString()->String::: font info to string
sun.java2d.loops.GeneralRenderer#register()->void::: general renderer register
sun.java2d.loops.GeneralRenderer#doDrawPoly(SurfaceData, PixelWriter, int[], int[], int, int, Region, int, int, boolean)->void::: general renderer do draw poly
sun.java2d.loops.GeneralRenderer#doSetRect(SurfaceData, PixelWriter, int, int, int, int)->void::: general renderer do set rect
sun.java2d.loops.GeneralRenderer#doDrawLine(SurfaceData, PixelWriter, int[], Region, int, int, int, int)->int[]::: general renderer do draw line
sun.java2d.loops.GeneralRenderer#doDrawRect(PixelWriter, SunGraphics2D, SurfaceData, int, int, int, int)->void::: general renderer do draw rect
sun.java2d.loops.GeneralRenderer#doDrawGlyphList(SurfaceData, PixelWriter, GlyphList, Region)->void::: general renderer do draw glyph list
sun.java2d.loops.GeneralRenderer#outcode(int, int, int, int, int, int)->int::: general renderer outcode
sun.java2d.loops.GeneralRenderer#adjustLine(int[], int, int, int, int)->boolean::: general renderer adjust line
sun.java2d.loops.GeneralRenderer#createSolidPixelWriter(SunGraphics2D, SurfaceData)->PixelWriter::: general renderer create solid pixel writer
sun.java2d.loops.GeneralRenderer#createXorPixelWriter(SunGraphics2D, SurfaceData)->PixelWriter::: general renderer create xor pixel writer
sun.java2d.loops.SetFillRectANY#FillRect(SunGraphics2D, SurfaceData, int, int, int, int)->void::: set fill rect y  fill rect
sun.java2d.loops.PixelWriterDrawHandler#drawLine(int, int, int, int)->void::: pixel writer draw handler draw line
sun.java2d.loops.PixelWriterDrawHandler#drawPixel(int, int)->void::: pixel writer draw handler draw pixel
sun.java2d.loops.PixelWriterDrawHandler#drawScanline(int, int, int)->void::: pixel writer draw handler draw scanline
sun.java2d.loops.SetFillPathANY#FillPath(SunGraphics2D, SurfaceData, int, int, Path2D.Float)->void::: set fill path y  fill path
sun.java2d.loops.SetFillSpansANY#FillSpans(SunGraphics2D, SurfaceData, SpanIterator)->void::: set fill spans y  fill spans
sun.java2d.loops.SetDrawLineANY#DrawLine(SunGraphics2D, SurfaceData, int, int, int, int)->void::: set draw line y  draw line
sun.java2d.loops.SetDrawPolygonsANY#DrawPolygons(SunGraphics2D, SurfaceData, int[], int[], int[], int, int, int, boolean)->void::: set draw polygons y  draw polygons
sun.java2d.loops.SetDrawPathANY#DrawPath(SunGraphics2D, SurfaceData, int, int, Path2D.Float)->void::: set draw path y  draw path
sun.java2d.loops.SetDrawRectANY#DrawRect(SunGraphics2D, SurfaceData, int, int, int, int)->void::: set draw rect y  draw rect
sun.java2d.loops.XorFillRectANY#FillRect(SunGraphics2D, SurfaceData, int, int, int, int)->void::: xor fill rect y  fill rect
sun.java2d.loops.XorFillPathANY#FillPath(SunGraphics2D, SurfaceData, int, int, Path2D.Float)->void::: xor fill path y  fill path
sun.java2d.loops.XorFillSpansANY#FillSpans(SunGraphics2D, SurfaceData, SpanIterator)->void::: xor fill spans y  fill spans
sun.java2d.loops.XorDrawLineANY#DrawLine(SunGraphics2D, SurfaceData, int, int, int, int)->void::: xor draw line y  draw line
sun.java2d.loops.XorDrawPolygonsANY#DrawPolygons(SunGraphics2D, SurfaceData, int[], int[], int[], int, int, int, boolean)->void::: xor draw polygons y  draw polygons
sun.java2d.loops.XorDrawPathANY#DrawPath(SunGraphics2D, SurfaceData, int, int, Path2D.Float)->void::: xor draw path y  draw path
sun.java2d.loops.XorDrawRectANY#DrawRect(SunGraphics2D, SurfaceData, int, int, int, int)->void::: xor draw rect y  draw rect
sun.java2d.loops.XorDrawGlyphListANY#DrawGlyphList(SunGraphics2D, SurfaceData, GlyphList)->void::: xor draw glyph list y  draw glyph list
sun.java2d.loops.XorDrawGlyphListAAANY#DrawGlyphListAA(SunGraphics2D, SurfaceData, GlyphList)->void::: xor draw glyph list y  draw glyph list a
sun.java2d.loops.PixelWriter#setRaster(WritableRaster)->void::: pixel writer set raster
sun.java2d.loops.PixelWriter#writePixel(int, int)->void::: pixel writer write pixel
sun.java2d.loops.SolidPixelWriter#writePixel(int, int)->void::: solid pixel writer write pixel
sun.java2d.loops.XorPixelWriter#writePixel(int, int)->void::: xor pixel writer write pixel
sun.java2d.loops.XorPixelWriter#xorPixel(Object)->void::: xor pixel writer xor pixel
sun.java2d.loops.XorPixelWriter.ByteData#xorPixel(Object)->void::: byte data xor pixel
sun.java2d.loops.XorPixelWriter.ShortData#xorPixel(Object)->void::: short data xor pixel
sun.java2d.loops.XorPixelWriter.IntData#xorPixel(Object)->void::: int data xor pixel
sun.java2d.loops.XorPixelWriter.FloatData#xorPixel(Object)->void::: float data xor pixel
sun.java2d.loops.XorPixelWriter.DoubleData#xorPixel(Object)->void::: double data xor pixel
sun.java2d.loops.GraphicsPrimitive.GeneralBinaryOp#setPrimitives(Blit, Blit, GraphicsPrimitive, Blit)->void:::This method allows the setupGeneralBinaryOp method to set the converters into the General version of the Primitive.
sun.java2d.loops.GraphicsPrimitive.GeneralBinaryOp#getSourceType()->SurfaceType:::These 4 methods are implemented automatically for any GraphicsPrimitive
sun.java2d.loops.GraphicsPrimitive.GeneralBinaryOp#getCompositeType()->CompositeType::: general binary op get composite type
sun.java2d.loops.GraphicsPrimitive.GeneralBinaryOp#getDestType()->SurfaceType::: general binary op get dest type
sun.java2d.loops.GraphicsPrimitive.GeneralBinaryOp#getSignature()->String::: general binary op get signature
sun.java2d.loops.GraphicsPrimitive.GeneralBinaryOp#getPrimTypeID()->int::: general binary op get prim type d
sun.java2d.loops.GraphicsPrimitive.GeneralUnaryOp#setPrimitives(Blit, GraphicsPrimitive, Blit)->void:::This method allows the setupGeneralUnaryOp method to set the converters into the General version of the Primitive.
sun.java2d.loops.GraphicsPrimitive.GeneralUnaryOp#getCompositeType()->CompositeType:::These 3 methods are implemented automatically for any GraphicsPrimitive
sun.java2d.loops.GraphicsPrimitive.GeneralUnaryOp#getDestType()->SurfaceType::: general unary op get dest type
sun.java2d.loops.GraphicsPrimitive.GeneralUnaryOp#getSignature()->String::: general unary op get signature
sun.java2d.loops.GraphicsPrimitive.GeneralUnaryOp#getPrimTypeID()->int::: general unary op get prim type d
sun.java2d.loops.GraphicsPrimitive#makePrimTypeID()->int::: graphics primitive make prim type d
sun.java2d.loops.GraphicsPrimitive#makeUniqueID(int, SurfaceType, CompositeType, SurfaceType)->int::: graphics primitive make unique d
sun.java2d.loops.GraphicsPrimitive#getUniqueID()->int:::Gets instance ID of this graphics primitive
sun.java2d.loops.GraphicsPrimitive#getSignature()->String::: graphics primitive get signature
sun.java2d.loops.GraphicsPrimitive#getPrimTypeID()->int:::Gets unique id for this GraphicsPrimitive type
sun.java2d.loops.GraphicsPrimitive#getNativePrim()->long::: graphics primitive get native prim
sun.java2d.loops.GraphicsPrimitive#getSourceType()->SurfaceType::: graphics primitive get source type
sun.java2d.loops.GraphicsPrimitive#getCompositeType()->CompositeType::: graphics primitive get composite type
sun.java2d.loops.GraphicsPrimitive#getDestType()->SurfaceType::: graphics primitive get dest type
sun.java2d.loops.GraphicsPrimitive#satisfies(String, SurfaceType, CompositeType, SurfaceType)->boolean:::Return true if this primitive can be used for the given signature surfaces, and composite.
sun.java2d.loops.GraphicsPrimitive#satisfiesSameAs(GraphicsPrimitive)->boolean::: graphics primitive satisfies same as
sun.java2d.loops.GraphicsPrimitive#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: graphics primitive make primitive
sun.java2d.loops.GraphicsPrimitive#traceWrap()->GraphicsPrimitive::: graphics primitive trace wrap
sun.java2d.loops.GraphicsPrimitive#tracingEnabled()->boolean::: graphics primitive tracing enabled
sun.java2d.loops.GraphicsPrimitive.TraceReporter#setShutdownHook()->void::: trace reporter set shutdown hook
sun.java2d.loops.GraphicsPrimitive.TraceReporter#run()->void::: trace reporter run
sun.java2d.loops.GraphicsPrimitive#tracePrimitive(Object)->void::: graphics primitive trace primitive
sun.java2d.loops.GraphicsPrimitive#setupGeneralBinaryOp(GeneralBinaryOp)->void::: graphics primitive setup general binary op
sun.java2d.loops.GraphicsPrimitive#setupGeneralUnaryOp(GeneralUnaryOp)->void::: graphics primitive setup general unary op
sun.java2d.loops.GraphicsPrimitive#createConverter(SurfaceType, SurfaceType)->Blit::: graphics primitive create converter
sun.java2d.loops.GraphicsPrimitive#convertFrom(Blit, SurfaceData, int, int, int, int, SurfaceData)->SurfaceData::: graphics primitive convert from
sun.java2d.loops.GraphicsPrimitive#convertFrom(Blit, SurfaceData, int, int, int, int, SurfaceData, int)->SurfaceData::: graphics primitive convert from
sun.java2d.loops.GraphicsPrimitive#convertTo(Blit, SurfaceData, SurfaceData, Region, int, int, int, int)->void::: graphics primitive convert to
sun.java2d.loops.GraphicsPrimitive#getGeneralOp(int, CompositeType)->GraphicsPrimitive::: graphics primitive get general op
sun.java2d.loops.GraphicsPrimitive#simplename(Field[], Object)->String::: graphics primitive simplename
sun.java2d.loops.GraphicsPrimitive#simplename(SurfaceType)->String::: graphics primitive simplename
sun.java2d.loops.GraphicsPrimitive#simplename(CompositeType)->String::: graphics primitive simplename
sun.java2d.loops.GraphicsPrimitive#toString()->String::: graphics primitive to string
sun.java2d.loops.GraphicsPrimitiveMgr#register(GraphicsPrimitive[])->void::: graphics primitive mgr register
sun.java2d.loops.GraphicsPrimitiveMgr#registerGeneral(GraphicsPrimitive)->void::: graphics primitive mgr register general
sun.java2d.loops.GraphicsPrimitiveMgr#locate(int, SurfaceType)->GraphicsPrimitive::: graphics primitive mgr locate
sun.java2d.loops.GraphicsPrimitiveMgr#locate(int, SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: graphics primitive mgr locate
sun.java2d.loops.GraphicsPrimitiveMgr#locatePrim(int, SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: graphics primitive mgr locate prim
sun.java2d.loops.GraphicsPrimitiveMgr#testPrimitiveInstantiation()->void::: graphics primitive mgr test primitive instantiation
sun.java2d.loops.GraphicsPrimitiveMgr#testPrimitiveInstantiation(boolean)->void::: graphics primitive mgr test primitive instantiation
sun.java2d.loops.GraphicsPrimitiveMgr#main(String[])->void::: graphics primitive mgr main
sun.java2d.loops.GraphicsPrimitiveProxy#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: graphics primitive proxy make primitive
sun.java2d.loops.GraphicsPrimitiveProxy#instantiate()->GraphicsPrimitive::: graphics primitive proxy instantiate
sun.java2d.loops.GraphicsPrimitiveProxy#traceWrap()->GraphicsPrimitive::: graphics primitive proxy trace wrap
sun.java2d.loops.MaskBlit#locate(SurfaceType, CompositeType, SurfaceType)->MaskBlit::: mask blit locate
sun.java2d.loops.MaskBlit#getFromCache(SurfaceType, CompositeType, SurfaceType)->MaskBlit::: mask blit get from cache
sun.java2d.loops.MaskBlit#MaskBlit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int, byte[], int, int)->void:::All MaskBlit implementors must have this invoker method
sun.java2d.loops.MaskBlit#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: mask blit make primitive
sun.java2d.loops.MaskBlit#traceWrap()->GraphicsPrimitive::: mask blit trace wrap
sun.java2d.loops.MaskFill#locate(SurfaceType, CompositeType, SurfaceType)->MaskFill::: mask fill locate
sun.java2d.loops.MaskFill#locatePrim(SurfaceType, CompositeType, SurfaceType)->MaskFill::: mask fill locate prim
sun.java2d.loops.MaskFill#getFromCache(SurfaceType, CompositeType, SurfaceType)->MaskFill::: mask fill get from cache
sun.java2d.loops.MaskFill#MaskFill(SunGraphics2D, SurfaceData, Composite, int, int, int, int, byte[], int, int)->void:::All MaskFill implementors must have this invoker method
sun.java2d.loops.MaskFill#FillAAPgram(SunGraphics2D, SurfaceData, Composite, double, double, double, double, double, double)->void::: mask fill  fill pgram
sun.java2d.loops.MaskFill#DrawAAPgram(SunGraphics2D, SurfaceData, Composite, double, double, double, double, double, double, double, double)->void::: mask fill  draw pgram
sun.java2d.loops.MaskFill#canDoParallelograms()->boolean::: mask fill can do parallelograms
sun.java2d.loops.MaskFill#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: mask fill make primitive
sun.java2d.loops.MaskFill#traceWrap()->GraphicsPrimitive::: mask fill trace wrap
sun.java2d.loops.ProcessPath.DrawHandler#setBounds(int, int, int, int)->void::: draw handler set bounds
sun.java2d.loops.ProcessPath.DrawHandler#setBounds(int, int, int, int, int)->void::: draw handler set bounds
sun.java2d.loops.ProcessPath.DrawHandler#adjustBounds(int, int, int, int)->void::: draw handler adjust bounds
sun.java2d.loops.ProcessPath.DrawHandler#drawLine(int, int, int, int)->void::: draw handler draw line
sun.java2d.loops.ProcessPath.DrawHandler#drawPixel(int, int)->void::: draw handler draw pixel
sun.java2d.loops.ProcessPath.DrawHandler#drawScanline(int, int, int)->void::: draw handler draw scanline
sun.java2d.loops.ProcessPath.EndSubPathHandler#processEndSubPath()->void::: end sub path handler process end sub path
sun.java2d.loops.ProcessPath.ProcessHandler#processFixedLine(int, int, int, int, int[], boolean, boolean)->void::: process handler process fixed line
sun.java2d.loops.ProcessPath#fillPath(DrawHandler, Path2D.Float, int, int)->boolean::: process path fill path
sun.java2d.loops.ProcessPath#drawPath(DrawHandler, EndSubPathHandler, Path2D.Float, int, int)->boolean::: process path draw path
sun.java2d.loops.ProcessPath#drawPath(DrawHandler, Path2D.Float, int, int)->boolean::: process path draw path
sun.java2d.loops.RenderCache.Entry#matches(SurfaceType, CompositeType, SurfaceType)->boolean::: entry matches
sun.java2d.loops.RenderCache.Entry#getValue()->Object::: entry get value
sun.java2d.loops.RenderCache#get(SurfaceType, CompositeType, SurfaceType)->Object::: render cache get
sun.java2d.loops.RenderCache#put(SurfaceType, CompositeType, SurfaceType, Object)->void::: render cache put
sun.java2d.loops.ScaledBlit#locate(SurfaceType, CompositeType, SurfaceType)->ScaledBlit::: scaled blit locate
sun.java2d.loops.ScaledBlit#getFromCache(SurfaceType, CompositeType, SurfaceType)->ScaledBlit::: scaled blit get from cache
sun.java2d.loops.ScaledBlit#Scale(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, double, double, double, double)->void::: scaled blit  scale
sun.java2d.loops.ScaledBlit#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: scaled blit make primitive
sun.java2d.loops.ScaledBlit#traceWrap()->GraphicsPrimitive::: scaled blit trace wrap
sun.java2d.loops.SurfaceType#deriveSubType(String)->SurfaceType:::Return a new SurfaceType object which uses this object as its more general "supertype" descriptor
sun.java2d.loops.SurfaceType#deriveSubType(String, PixelConverter)->SurfaceType::: surface type derive sub type
sun.java2d.loops.SurfaceType#makeUniqueID(String)->int::: surface type make unique d
sun.java2d.loops.SurfaceType#getUniqueID()->int::: surface type get unique d
sun.java2d.loops.SurfaceType#getDescriptor()->String::: surface type get descriptor
sun.java2d.loops.SurfaceType#getSuperType()->SurfaceType::: surface type get super type
sun.java2d.loops.SurfaceType#getPixelConverter()->PixelConverter::: surface type get pixel converter
sun.java2d.loops.SurfaceType#pixelFor(int, ColorModel)->int::: surface type pixel for
sun.java2d.loops.SurfaceType#rgbFor(int, ColorModel)->int::: surface type rgb for
sun.java2d.loops.SurfaceType#getAlphaMask()->int::: surface type get alpha mask
sun.java2d.loops.SurfaceType#hashCode()->int::: surface type hash code
sun.java2d.loops.SurfaceType#equals(Object)->boolean::: surface type equals
sun.java2d.loops.SurfaceType#toString()->String::: surface type to string
sun.java2d.loops.TransformBlit#locate(SurfaceType, CompositeType, SurfaceType)->TransformBlit::: transform blit locate
sun.java2d.loops.TransformBlit#getFromCache(SurfaceType, CompositeType, SurfaceType)->TransformBlit::: transform blit get from cache
sun.java2d.loops.TransformBlit#Transform(SurfaceData, SurfaceData, Composite, Region, AffineTransform, int, int, int, int, int, int, int)->void::: transform blit  transform
sun.java2d.loops.TransformBlit#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: transform blit make primitive
sun.java2d.loops.TransformBlit#traceWrap()->GraphicsPrimitive::: transform blit trace wrap
sun.java2d.loops.TransformHelper#locate(SurfaceType)->TransformHelper::: transform helper locate
sun.java2d.loops.TransformHelper#getFromCache(SurfaceType)->TransformHelper::: transform helper get from cache
sun.java2d.loops.TransformHelper#Transform(MaskBlit, SurfaceData, SurfaceData, Composite, Region, AffineTransform, int, int, int, int, int, int, int, int, int, int[], int, int)->void::: transform helper  transform
sun.java2d.loops.TransformHelper#makePrimitive(SurfaceType, CompositeType, SurfaceType)->GraphicsPrimitive::: transform helper make primitive
sun.java2d.loops.TransformHelper#traceWrap()->GraphicsPrimitive::: transform helper trace wrap
sun.java2d.loops.XORComposite#getXorColor()->Color::: composite get xor color
sun.java2d.loops.XORComposite#getXorPixel()->int::: composite get xor pixel
sun.java2d.loops.XORComposite#getAlphaMask()->int::: composite get alpha mask
sun.java2d.loops.XORComposite#createContext(ColorModel, ColorModel, RenderingHints)->CompositeContext::: composite create context

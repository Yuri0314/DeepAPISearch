FtpURLConnection.FtpInputStream#close()::: ftp input stream close:::super->close->if->ftp->close
FtpURLConnection.FtpOutputStream#close()::: ftp output stream close:::super->close->if->ftp->close
FtpURLConnection#checkURL(URL)::: ftp connection check l:::if->if->u->toExternalForm->indexOf->mfue->new->MalformedURLException->throw->mfue->getMessage->new->IllegalArgumentException->s->IPAddressUtil->checkAuthority->if->mfue->new->MalformedURLException->throw->mfue->getMessage->new->IllegalArgumentException->return
FtpURLConnection#setTimeouts()::: ftp connection set timeouts:::if->if->ftp->setConnectTimeout->if->ftp->setReadTimeout
FtpURLConnection#connect()::: ftp connection connect:::if->return->p->if->sel->new->java.security.PrivilegedAction<ProxySelector>->doPrivileged->if->uri->toURI->it->sel->select->iterator->while->it->hasNext->it->next->if->p->type->break->if->p->type->p->address->sel->p->address->new->IOException->connectFailed->continue->paddr->p->address->try->new->HttpURLConnection->http->getDoInput->setDoInput->http->getDoOutput->setDoOutput->if->http->setConnectTimeout->if->http->setReadTimeout->http->connect->return->catch->sel->connectFailed->finally->else->if->p->type->new->HttpURLConnection->http->getDoInput->setDoInput->http->getDoOutput->setDoOutput->if->http->setConnectTimeout->if->http->setReadTimeout->http->connect->return->if->props->GetPropertyAction->privilegedGetProperties->vers->props->getProperty->props->getProperty->try->FtpClient->create->if->ftp->setProxy->setTimeouts->if->ftp->new->InetSocketAddress->connect->else->ftp->FtpClient->defaultPort->new->InetSocketAddress->connect->catch->throw->if->try->ftp->close->catch->fe->addSuppressed->finally->throw->new->IOException->finally->try->ftp->password->toCharArray->login->catch->ftp->close->throw->new->sun.net.ftp.FtpLoginException->finally
FtpURLConnection#decodePath(String)::: ftp connection decode path:::i->path->indexOf->if->s1->path->path->length->substring->if->equalsIgnoreCase->if->equalsIgnoreCase->if->equalsIgnoreCase->path->substring->if->path->length->path->charAt->path->substring->if->path->length->if->path->endsWith->path->lastIndexOf->if->path->path->length->substring->ParseUtil->decode->path->substring->else->ParseUtil->decode->else->path->path->length->substring->if->else
FtpURLConnection#cd(String)::: ftp connection cd:::if->path->isEmpty->return->if->path->indexOf->ftp->ParseUtil->decode->changeDirectory->return->token->new->StringTokenizer->while->token->hasMoreTokens->ftp->ParseUtil->token->nextToken->decode->changeDirectory
FtpURLConnection#getInputStream():::Get the InputStream to retreive the remote file:::if->connect->if->return->http->getInputStream->if->throw->new->IOException->if->return->msgh->new->MessageHeader->isAdir->try->url->getPath->decodePath->if->ftp->setAsciiType->cd->if->ftp->list->new->FtpInputStream->else->ftp->nameList->new->FtpInputStream->else->if->ftp->setAsciiType->else->ftp->setBinaryType->cd->ftp->getFileStream->new->FtpInputStream->try->l->ftp->getLastTransferSize->msgh->Long->toString->add->if->meteredInput->ProgressMonitor->getDefault->shouldMeterInput->pi->if->new->ProgressSource->pi->beginTracking->new->MeteredStream->catch->e->printStackTrace->finally->if->msgh->add->msgh->add->else->msgh->add->ftype->guessContentTypeFromName->if->is->markSupported->guessContentTypeFromStream->if->msgh->add->catch->try->cd->ftp->setAsciiType->ftp->list->new->FtpInputStream->msgh->add->msgh->add->catch->fnfe->new->FileNotFoundException->if->try->ftp->close->catch->fnfe->addSuppressed->finally->throw->fnfe->new->FileNotFoundException->if->try->ftp->close->catch->fnfe->addSuppressed->finally->throw->finally->if->try->ftp->close->catch->ftpe->addSuppressed->finally->throw->new->IOException->finally->setProperties->return
FtpURLConnection#getOutputStream():::Get the OutputStream to store the remote file:::if->connect->if->out->http->getOutputStream->http->getInputStream->return->if->throw->new->IOException->if->return->url->getPath->decodePath->if->filename->length->throw->new->IOException->try->if->cd->if->ftp->setAsciiType->else->ftp->setBinaryType->ftp->putFileStream->new->FtpOutputStream->catch->throw->new->IOException->finally->return
FtpURLConnection#guessContentTypeFromFilename(String)::: ftp connection guess content type from filename:::return->guessContentTypeFromName
FtpURLConnection#getPermission():::Gets the Permission associated with the host and port.:::if->urlport->url->getPort->FtpClient->defaultPort->urlhost->new->SocketPermission->return
FtpURLConnection#setRequestProperty(String, String):::Sets the general request property:::super->setRequestProperty->if->equals->if->equalsIgnoreCase->else->if->equalsIgnoreCase->else->if->equalsIgnoreCase->else->throw->new->IllegalArgumentException
FtpURLConnection#getRequestProperty(String):::Returns the value of the named general request property for this connection.:::value->super->getRequestProperty->if->if->equals->return
FtpURLConnection#setConnectTimeout(int)::: ftp connection set connect timeout:::if->throw->new->IllegalArgumentException
FtpURLConnection#getConnectTimeout()::: ftp connection get connect timeout:::return
FtpURLConnection#setReadTimeout(int)::: ftp connection set read timeout:::if->throw->new->IllegalArgumentException
FtpURLConnection#getReadTimeout()::: ftp connection get read timeout:::return
Handler#getDefaultPort()::: handler get default port:::return
Handler#equals(URL, URL)::: handler equals:::userInfo1->u1->getUserInfo->userInfo2->u2->getUserInfo->return->super->equals->userInfo1->equals
Handler#openConnection(URL)::: handler open connection:::return->openConnection
Handler#openConnection(URL, Proxy)::: handler open connection:::return->new->FtpURLConnection

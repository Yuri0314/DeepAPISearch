com.sun.tools.jdeps.Analyzer.Filter#accepts(Location, Archive, Location, Archive)->boolean::: filter accepts
com.sun.tools.jdeps.Analyzer#run(Iterable, Map)->boolean:::Performs the dependency analysis on the given archives.
com.sun.tools.jdeps.Analyzer#archives()->Set:::Returns the analyzed archives
com.sun.tools.jdeps.Analyzer#hasDependences(Archive)->boolean:::Returns true if the given archive has dependences.
com.sun.tools.jdeps.Analyzer#dependences(Archive)->Set:::Returns the dependences, either class name or package name as specified in the given verbose level, from the given source.
com.sun.tools.jdeps.Analyzer#requires(Archive)->Stream:::Returns the direct dependences of the given source
com.sun.tools.jdeps.Analyzer.Visitor#visitDependence(String, Archive, String, Archive)->void:::Visits a recorded dependency from origin to target which can be a fully-qualified classname, a package name, a module or archive name depending on the Analyzer's type.
com.sun.tools.jdeps.Analyzer#visitDependences(Archive, Visitor, Type)->void:::Visit the dependencies of the given source
com.sun.tools.jdeps.Analyzer#visitDependences(Archive, Visitor)->void::: analyzer visit dependences
com.sun.tools.jdeps.Analyzer.Dependences#dependencies()->Set::: dependences dependencies
com.sun.tools.jdeps.Analyzer.Dependences#requires()->Set::: dependences requires
com.sun.tools.jdeps.Analyzer.Dependences#getTargetProfile(Archive)->Profile::: dependences get target profile
com.sun.tools.jdeps.Analyzer.Dependences#findArchive(Location)->Archive::: dependences find archive
com.sun.tools.jdeps.Analyzer.Dependences#visit(Location, Location)->void::: dependences visit
com.sun.tools.jdeps.Analyzer.Dependences#addDep(Location, Location)->Dep::: dependences add dep
com.sun.tools.jdeps.Analyzer.Dep#origin()->String::: dep origin
com.sun.tools.jdeps.Analyzer.Dep#originArchive()->Archive::: dep origin archive
com.sun.tools.jdeps.Analyzer.Dep#target()->String::: dep target
com.sun.tools.jdeps.Analyzer.Dep#targetArchive()->Archive::: dep target archive
com.sun.tools.jdeps.Analyzer.Dep#equals(Object)->boolean::: dep equals
com.sun.tools.jdeps.Analyzer.Dep#hashCode()->int::: dep hash code
com.sun.tools.jdeps.Analyzer.Dep#toString()->String::: dep to string
com.sun.tools.jdeps.Analyzer.Jdk8Internals#contains(Location)->boolean::: jdk8 internals contains
com.sun.tools.jdeps.Analyzer.Jdk8Internals#name()->String::: jdk8 internals name
com.sun.tools.jdeps.Analyzer.Jdk8Internals#isJDK()->boolean::: jdk8 internals is k
com.sun.tools.jdeps.Analyzer.Jdk8Internals#isExported(String)->boolean::: jdk8 internals is exported
com.sun.tools.jdeps.Archive#getInstance(Path, Runtime.Version)->Archive::: archive get instance
com.sun.tools.jdeps.Archive#reader()->ClassFileReader::: archive reader
com.sun.tools.jdeps.Archive#getName()->String::: archive get name
com.sun.tools.jdeps.Archive#getModule()->Module::: archive get module
com.sun.tools.jdeps.Archive#contains(String)->boolean::: archive contains
com.sun.tools.jdeps.Archive#addClass(Location)->void::: archive add class
com.sun.tools.jdeps.Archive#addClass(Location, Location)->void::: archive add class
com.sun.tools.jdeps.Archive#getClasses()->Set::: archive get classes
com.sun.tools.jdeps.Archive#getDependencies()->Stream::: archive get dependencies
com.sun.tools.jdeps.Archive#hasDependences()->boolean::: archive has dependences
com.sun.tools.jdeps.Archive#visitDependences(Visitor)->void::: archive visit dependences
com.sun.tools.jdeps.Archive#isEmpty()->boolean:::Tests if any class has been parsed.
com.sun.tools.jdeps.Archive#getPathName()->String::: archive get path name
com.sun.tools.jdeps.Archive#hashCode()->int::: archive hash code
com.sun.tools.jdeps.Archive#equals(Object)->boolean::: archive equals
com.sun.tools.jdeps.Archive#toString()->String::: archive to string
com.sun.tools.jdeps.Archive#path()->Path::: archive path
com.sun.tools.jdeps.Archive#isSameLocation(Archive, Archive)->boolean::: archive is same location
com.sun.tools.jdeps.Archive#close()->void::: archive close
com.sun.tools.jdeps.Archive.Visitor#visit(Location, Location)->void::: visitor visit
com.sun.tools.jdeps.ClassFileReader#newInstance(Path)->ClassFileReader:::Returns a ClassFileReader instance of a given path.
com.sun.tools.jdeps.ClassFileReader#newInstance(Path, Runtime.Version)->ClassFileReader:::Returns a ClassFileReader instance of a given path.
com.sun.tools.jdeps.ClassFileReader#newInstance(FileSystem, Path)->ClassFileReader:::Returns a ClassFileReader instance of a given FileSystem and path
com.sun.tools.jdeps.ClassFileReader#getFileName()->String::: class file reader get file name
com.sun.tools.jdeps.ClassFileReader#skippedEntries()->List::: class file reader skipped entries
com.sun.tools.jdeps.ClassFileReader#entries()->Set:::Returns all entries in this archive.
com.sun.tools.jdeps.ClassFileReader#getClassFile(String)->ClassFile:::Returns the ClassFile matching the given binary name or a fully-qualified class name.
com.sun.tools.jdeps.ClassFileReader#getClassFiles()->Iterable::: class file reader get class files
com.sun.tools.jdeps.ClassFileReader#readClassFile(Path)->ClassFile::: class file reader read class file
com.sun.tools.jdeps.ClassFileReader#scan()->Set::: class file reader scan
com.sun.tools.jdeps.ClassFileReader#isClass(Path)->boolean::: class file reader is class
com.sun.tools.jdeps.ClassFileReader#close()->void::: class file reader close
com.sun.tools.jdeps.ClassFileReader.FileIterator#hasNext()->boolean::: file iterator has next
com.sun.tools.jdeps.ClassFileReader.FileIterator#next()->ClassFile::: file iterator next
com.sun.tools.jdeps.ClassFileReader.FileIterator#remove()->void::: file iterator remove
com.sun.tools.jdeps.ClassFileReader#toString()->String::: class file reader to string
com.sun.tools.jdeps.ClassFileReader.JarFileReader#close()->void::: jar file reader close
com.sun.tools.jdeps.ClassFileReader.JarFileReader#scan()->Set::: jar file reader scan
com.sun.tools.jdeps.ClassFileReader.JarFileReader#getClassFile(String)->ClassFile::: jar file reader get class file
com.sun.tools.jdeps.ClassFileReader.JarFileReader#readClassFile(JarFile, JarEntry)->ClassFile::: jar file reader read class file
com.sun.tools.jdeps.ClassFileReader.JarFileReader#getClassFiles()->Iterable::: jar file reader get class files
com.sun.tools.jdeps.ClassFileReader.JarFileIterator#setJarFile(JarFile)->void::: jar file iterator set jar file
com.sun.tools.jdeps.ClassFileReader.JarFileIterator#hasNext()->boolean::: jar file iterator has next
com.sun.tools.jdeps.ClassFileReader.JarFileIterator#next()->ClassFile::: jar file iterator next
com.sun.tools.jdeps.ClassFileReader.JarFileIterator#nextEntry()->JarEntry::: jar file iterator next entry
com.sun.tools.jdeps.ClassFileReader.JarFileIterator#remove()->void::: jar file iterator remove
com.sun.tools.jdeps.DependencyFinder#locationToArchive()->Map::: dependency finder location to archive
com.sun.tools.jdeps.DependencyFinder#getDependences(Archive)->Stream:::Returns the modules of all dependencies found
com.sun.tools.jdeps.DependencyFinder#locationToArchive(Location)->Archive:::Returns the location to archive map; or NOT_FOUND
com.sun.tools.jdeps.DependencyFinder#dependences()->Map>:::Returns a map from an archive to its required archives
com.sun.tools.jdeps.DependencyFinder#isParsed(Location)->boolean::: dependency finder is parsed
com.sun.tools.jdeps.DependencyFinder#parse(Stream)->Set:::Parses all class files from the given archive stream and returns all target locations.
com.sun.tools.jdeps.DependencyFinder#parseExportedAPIs(Stream)->Set:::Parses the exported API class files from the given archive stream and returns all target locations.
com.sun.tools.jdeps.DependencyFinder#parse(Archive, String)->Set:::Parses the named class from the given archive and returns all target locations the named class references.
com.sun.tools.jdeps.DependencyFinder#parseExportedAPIs(Archive, String)->Set:::Parses the exported API of the named class from the given archive and returns all target locations the named class references.
com.sun.tools.jdeps.DependencyFinder#shutdown()->void::: dependency finder shutdown
com.sun.tools.jdeps.DepsAnalyzer#run()->boolean::: deps analyzer run
com.sun.tools.jdeps.DepsAnalyzer#run(boolean, int)->boolean:::Perform compile-time view or run-time view dependency analysis.
com.sun.tools.jdeps.DepsAnalyzer#archives()->Set:::Returns the archives for reporting that has matching dependences
com.sun.tools.jdeps.DepsAnalyzer#dependences()->Set:::Returns the dependences, either class name or package name as specified in the given verbose level.
com.sun.tools.jdeps.DepsAnalyzer#include(Archive)->boolean::: deps analyzer include
com.sun.tools.jdeps.DepsAnalyzer.Node#toString()->String::: node to string
com.sun.tools.jdeps.DepsAnalyzer.Node#equals(Object)->boolean::: node equals
com.sun.tools.jdeps.DepsAnalyzer.Node#hashCode()->int::: node hash code
com.sun.tools.jdeps.DepsAnalyzer#moduleGraph()->Graph:::Returns a graph of module dependences
com.sun.tools.jdeps.DepsAnalyzer#dependenceGraph()->Graph:::Returns a graph of dependences
com.sun.tools.jdeps.Graph#nodes()->Set::: graph nodes
com.sun.tools.jdeps.Graph#edges()->Map>::: graph edges
com.sun.tools.jdeps.Graph#adjacentNodes(T)->Set::: graph adjacent nodes
com.sun.tools.jdeps.Graph#contains(T)->boolean::: graph contains
com.sun.tools.jdeps.Graph#edgesFrom(T)->Set>::: graph edges from
com.sun.tools.jdeps.Graph#reduce()->Graph:::Returns a new Graph after transitive reduction
com.sun.tools.jdeps.Graph#reduce(Graph)->Graph:::Returns a new Graph after transitive reduction
com.sun.tools.jdeps.Graph#orderedNodes()->Stream:::Returns nodes sorted in topological order.
com.sun.tools.jdeps.Graph#ordered(Consumer)->void:::Traverse this graph and performs the given action in topological order
com.sun.tools.jdeps.Graph#reverse(Consumer)->void:::Traverses this graph and performs the given action in reverse topological order
com.sun.tools.jdeps.Graph#transpose()->Graph:::Returns a transposed graph from this graph
com.sun.tools.jdeps.Graph#dfs(Set)->Set:::Returns all nodes reachable from the given set of roots.
com.sun.tools.jdeps.Graph#printGraph(PrintWriter)->void::: graph print graph
com.sun.tools.jdeps.Graph#toString()->String::: graph to string
com.sun.tools.jdeps.Graph.Edge#toString()->String::: edge to string
com.sun.tools.jdeps.Graph.Edge#equals(Object)->boolean::: edge equals
com.sun.tools.jdeps.Graph.Edge#hashCode()->int::: edge hash code
com.sun.tools.jdeps.Graph.Builder#addNode(T)->void::: builder add node
com.sun.tools.jdeps.Graph.Builder#addNodes(Set)->void::: builder add nodes
com.sun.tools.jdeps.Graph.Builder#addEdge(T, T)->void::: builder add edge
com.sun.tools.jdeps.Graph.Builder#build()->Graph::: builder build
com.sun.tools.jdeps.Graph.TopoSorter#ordered(Consumer)->void::: topo sorter ordered
com.sun.tools.jdeps.Graph.TopoSorter#reverse(Consumer)->void::: topo sorter reverse
com.sun.tools.jdeps.InverseDepsAnalyzer#run()->boolean::: inverse deps analyzer run
com.sun.tools.jdeps.InverseDepsAnalyzer#targets()->Set:::Returns the target archives determined from the dependency analysis
com.sun.tools.jdeps.InverseDepsAnalyzer#inverseDependences()->Set>:::Finds all inverse transitive dependencies using the given requires set as the targets, if non-empty
com.sun.tools.jdeps.JdepsConfiguration#findModule(String)->Optional::: jdeps configuration find module
com.sun.tools.jdeps.JdepsConfiguration#findModuleDescriptor(String)->Optional::: jdeps configuration find module descriptor
com.sun.tools.jdeps.JdepsConfiguration#isToken(String)->boolean::: jdeps configuration is token
com.sun.tools.jdeps.JdepsConfiguration#splitPackages()->Map>:::Returns the list of packages that split between resolved module and unnamed module
com.sun.tools.jdeps.JdepsConfiguration#findClass(Dependency.Location)->Optional:::Returns an optional archive containing the given Location
com.sun.tools.jdeps.JdepsConfiguration#getModules()->Map:::Returns the list of Modules that can be found in the specified module paths.
com.sun.tools.jdeps.JdepsConfiguration#resolve(Set)->Configuration:::Returns Configuration with the given roots
com.sun.tools.jdeps.JdepsConfiguration#classPathArchives()->List::: jdeps configuration class path archives
com.sun.tools.jdeps.JdepsConfiguration#initialArchives()->List::: jdeps configuration initial archives
com.sun.tools.jdeps.JdepsConfiguration#rootModules()->Set::: jdeps configuration root modules
com.sun.tools.jdeps.JdepsConfiguration#toModule(ModuleReference)->Module::: jdeps configuration to module
com.sun.tools.jdeps.JdepsConfiguration#getVersion()->Runtime.Version::: jdeps configuration get version
com.sun.tools.jdeps.JdepsConfiguration#close()->void::: jdeps configuration close
com.sun.tools.jdeps.JdepsConfiguration.SystemModuleFinder#findAll()->Set::: system module finder find all
com.sun.tools.jdeps.JdepsConfiguration.SystemModuleFinder#find(String)->Optional::: system module finder find
com.sun.tools.jdeps.JdepsConfiguration.SystemModuleFinder#moduleNames()->Stream::: system module finder module names
com.sun.tools.jdeps.JdepsConfiguration.SystemModuleFinder#getClassReader(String)->ClassFileReader::: system module finder get class reader
com.sun.tools.jdeps.JdepsConfiguration.SystemModuleFinder#defaultSystemRoots()->Set::: system module finder default system roots
com.sun.tools.jdeps.JdepsConfiguration.Builder#upgradeModulePath(String)->Builder::: builder upgrade module path
com.sun.tools.jdeps.JdepsConfiguration.Builder#appModulePath(String)->Builder::: builder app module path
com.sun.tools.jdeps.JdepsConfiguration.Builder#addmods(Set)->Builder::: builder addmods
com.sun.tools.jdeps.JdepsConfiguration.Builder#multiRelease(Runtime.Version)->Builder::: builder multi release
com.sun.tools.jdeps.JdepsConfiguration.Builder#addRoot(Path)->Builder::: builder add root
com.sun.tools.jdeps.JdepsConfiguration.Builder#addClassPath(String)->Builder::: builder add class path
com.sun.tools.jdeps.JdepsConfiguration.Builder#build()->JdepsConfiguration::: builder build
com.sun.tools.jdeps.JdepsFilter#matches(String)->boolean:::Tests if the given class matches the pattern given in the -include option
com.sun.tools.jdeps.JdepsFilter#matches(Archive)->boolean:::Tests if the given source includes classes specified in -include option  This method can be used to determine if the given source should eagerly be processed.
com.sun.tools.jdeps.JdepsFilter#hasIncludePattern()->boolean::: jdeps filter has include pattern
com.sun.tools.jdeps.JdepsFilter#hasTargetFilter()->boolean::: jdeps filter has target filter
com.sun.tools.jdeps.JdepsFilter#requiresFilter()->Set::: jdeps filter requires filter
com.sun.tools.jdeps.JdepsFilter#accepts(Dependency)->boolean::: jdeps filter accepts
com.sun.tools.jdeps.JdepsFilter#accepts(Location, Archive, Location, Archive)->boolean:::Filter depending on the containing archive or module
com.sun.tools.jdeps.JdepsFilter#isJDKInternalPackage(Module, String)->boolean:::Tests if the package is an internal package of the given module.
com.sun.tools.jdeps.JdepsFilter#toString()->String::: jdeps filter to string
com.sun.tools.jdeps.JdepsFilter.Builder#packages(Set)->Builder::: builder packages
com.sun.tools.jdeps.JdepsFilter.Builder#regex(Pattern)->Builder::: builder regex
com.sun.tools.jdeps.JdepsFilter.Builder#filter(Pattern)->Builder::: builder filter
com.sun.tools.jdeps.JdepsFilter.Builder#filter(boolean, boolean)->Builder::: builder filter
com.sun.tools.jdeps.JdepsFilter.Builder#requires(String, Set)->Builder::: builder requires
com.sun.tools.jdeps.JdepsFilter.Builder#findJDKInternals(boolean)->Builder::: builder find internals
com.sun.tools.jdeps.JdepsFilter.Builder#includePattern(Pattern)->Builder::: builder include pattern
com.sun.tools.jdeps.JdepsFilter.Builder#build()->JdepsFilter::: builder build
com.sun.tools.jdeps.JdepsTask.BadArguments#getKey()->String::: bad arguments get key
com.sun.tools.jdeps.JdepsTask.BadArguments#getArgs()->Object[]::: bad arguments get args
com.sun.tools.jdeps.JdepsTask.BadArguments#showUsage()->boolean::: bad arguments show usage
com.sun.tools.jdeps.JdepsTask.BadArgs#showUsage(boolean)->BadArgs::: bad args show usage
com.sun.tools.jdeps.JdepsTask.BadArgs#getKey()->String::: bad args get key
com.sun.tools.jdeps.JdepsTask.BadArgs#getArgs()->Object[]::: bad args get args
com.sun.tools.jdeps.JdepsTask.BadArgs#showUsage()->boolean::: bad args show usage
com.sun.tools.jdeps.JdepsTask.UncheckedBadArgs#getKey()->String::: unchecked bad args get key
com.sun.tools.jdeps.JdepsTask.UncheckedBadArgs#getArgs()->Object[]::: unchecked bad args get args
com.sun.tools.jdeps.JdepsTask.UncheckedBadArgs#showUsage()->boolean::: unchecked bad args show usage
com.sun.tools.jdeps.JdepsTask.Option#isHidden()->boolean::: option is hidden
com.sun.tools.jdeps.JdepsTask.Option#matches(String)->boolean::: option matches
com.sun.tools.jdeps.JdepsTask.Option#ignoreRest()->boolean::: option ignore rest
com.sun.tools.jdeps.JdepsTask.Option#process(JdepsTask, String, String)->void::: option process
com.sun.tools.jdeps.JdepsTask.HiddenOption#isHidden()->boolean::: hidden option is hidden
com.sun.tools.jdeps.JdepsTask#setLog(PrintWriter)->void::: jdeps task set log
com.sun.tools.jdeps.JdepsTask#run(String...)->int::: jdeps task run
com.sun.tools.jdeps.JdepsTask#run()->boolean::: jdeps task run
com.sun.tools.jdeps.JdepsTask.Command#checkOptions()->boolean:::Returns true if the command-line options are all valid; otherwise, returns false.
com.sun.tools.jdeps.JdepsTask.Command#run(JdepsConfiguration)->boolean:::Do analysis
com.sun.tools.jdeps.JdepsTask.Command#addModules()->Set:::Includes all modules on system module path and application module path  When a named module is analyzed, it will analyze the dependences only
com.sun.tools.jdeps.JdepsTask.Command#toString()->String::: command to string
com.sun.tools.jdeps.JdepsTask.AnalyzeDeps#checkOptions()->boolean::: analyze deps check options
com.sun.tools.jdeps.JdepsTask.AnalyzeDeps#getAnalyzerType()->Type::: analyze deps get analyzer type
com.sun.tools.jdeps.JdepsTask.AnalyzeDeps#run(JdepsConfiguration)->boolean::: analyze deps run
com.sun.tools.jdeps.JdepsTask.AnalyzeDeps#run(JdepsConfiguration, JdepsWriter, Type)->boolean::: analyze deps run
com.sun.tools.jdeps.JdepsTask.InverseAnalyzeDeps#checkOptions()->boolean::: inverse analyze deps check options
com.sun.tools.jdeps.JdepsTask.InverseAnalyzeDeps#run(JdepsConfiguration)->boolean::: inverse analyze deps run
com.sun.tools.jdeps.JdepsTask.InverseAnalyzeDeps#addModules()->Set::: inverse analyze deps add modules
com.sun.tools.jdeps.JdepsTask.GenModuleInfo#checkOptions()->boolean::: gen module info check options
com.sun.tools.jdeps.JdepsTask.GenModuleInfo#run(JdepsConfiguration)->boolean::: gen module info run
com.sun.tools.jdeps.JdepsTask.CheckModuleDeps#checkOptions()->boolean::: check module deps check options
com.sun.tools.jdeps.JdepsTask.CheckModuleDeps#run(JdepsConfiguration)->boolean::: check module deps run
com.sun.tools.jdeps.JdepsTask.CheckModuleDeps#addModules()->Set::: check module deps add modules
com.sun.tools.jdeps.JdepsTask.ListModuleDeps#checkOptions()->boolean::: list module deps check options
com.sun.tools.jdeps.JdepsTask.ListModuleDeps#run(JdepsConfiguration)->boolean::: list module deps run
com.sun.tools.jdeps.JdepsTask.GenDotFile#run(JdepsConfiguration)->boolean::: gen dot file run
com.sun.tools.jdeps.JdepsTask#handleOptions(String[])->void::: jdeps task handle options
com.sun.tools.jdeps.JdepsTask#warning(String, Object...)->void::: jdeps task warning
com.sun.tools.jdeps.JdepsTask#getMessage(String, Object...)->String::: jdeps task get message
com.sun.tools.jdeps.JdepsWriter#newDotWriter(Path, Analyzer.Type)->JdepsWriter::: jdeps writer new dot writer
com.sun.tools.jdeps.JdepsWriter#newSimpleWriter(PrintWriter, Analyzer.Type)->JdepsWriter::: jdeps writer new simple writer
com.sun.tools.jdeps.JdepsWriter#generateOutput(Collection, Analyzer)->void::: jdeps writer generate output
com.sun.tools.jdeps.JdepsWriter.DotFileWriter#generateOutput(Collection, Analyzer)->void::: dot file writer generate output
com.sun.tools.jdeps.JdepsWriter.DotFileWriter.DotFileFormatter#close()->void::: dot file formatter close
com.sun.tools.jdeps.JdepsWriter.DotFileWriter.DotFileFormatter#visitDependence(String, Archive, String, Archive)->void::: dot file formatter visit dependence
com.sun.tools.jdeps.JdepsWriter.DotFileWriter.SummaryDotFile#close()->void::: summary dot file close
com.sun.tools.jdeps.JdepsWriter.DotFileWriter.SummaryDotFile#visitDependence(String, Archive, String, Archive)->void::: summary dot file visit dependence
com.sun.tools.jdeps.JdepsWriter.DotFileWriter.SummaryDotFile#getLabel(Archive, Archive)->String::: summary dot file get label
com.sun.tools.jdeps.JdepsWriter.DotFileWriter.SummaryDotFile#labelBuilder()->Analyzer.Visitor::: summary dot file label builder
com.sun.tools.jdeps.JdepsWriter.SimpleWriter#generateOutput(Collection, Analyzer)->void::: simple writer generate output
com.sun.tools.jdeps.JdepsWriter.SimpleWriter.RawOutputFormatter#visitDependence(String, Archive, String, Archive)->void::: raw output formatter visit dependence
com.sun.tools.jdeps.JdepsWriter.SimpleWriter.RawSummaryFormatter#visitDependence(String, Archive, String, Archive)->void::: raw summary formatter visit dependence
com.sun.tools.jdeps.JdepsWriter.SimpleWriter.RawSummaryFormatter#printModuleDescriptor(Module)->void::: raw summary formatter print module descriptor
com.sun.tools.jdeps.JdepsWriter#toTag(Archive, String, Archive)->String:::If the given archive is JDK archive, this method returns the profile name only if -profile option is specified; it accesses a private JDK API and the returned value will have "JDK internal API" prefix  For non-JDK archives, this method returns the file name of the archive.
com.sun.tools.jdeps.JdepsWriter#showProfileOrModule(Module)->String::: jdeps writer show profile or module
com.sun.tools.jdeps.JdepsWriter#getProfile(String)->Profile::: jdeps writer get profile
com.sun.tools.jdeps.Main#main(String...)->void::: main main
com.sun.tools.jdeps.Main#run(String[], PrintWriter)->int:::Entry point that does not call System.exit.
com.sun.tools.jdeps.Main.JDepsToolProvider#name()->String::: deps tool provider name
com.sun.tools.jdeps.Main.JDepsToolProvider#run(PrintWriter, PrintWriter, String...)->int::: deps tool provider run
com.sun.tools.jdeps.Module#trace(String, Object...)->void::: module trace
com.sun.tools.jdeps.Module#trace(boolean, String, Object...)->void::: module trace
com.sun.tools.jdeps.Module#name()->String:::Returns module name
com.sun.tools.jdeps.Module#isNamed()->boolean::: module is named
com.sun.tools.jdeps.Module#isAutomatic()->boolean::: module is automatic
com.sun.tools.jdeps.Module#getModule()->Module::: module get module
com.sun.tools.jdeps.Module#descriptor()->ModuleDescriptor::: module descriptor
com.sun.tools.jdeps.Module#location()->URI::: module location
com.sun.tools.jdeps.Module#isJDK()->boolean::: module is k
com.sun.tools.jdeps.Module#isSystem()->boolean::: module is system
com.sun.tools.jdeps.Module#exports()->Map>::: module exports
com.sun.tools.jdeps.Module#packages()->Set::: module packages
com.sun.tools.jdeps.Module#isJDKUnsupported()->boolean::: module is unsupported
com.sun.tools.jdeps.Module#toNormalModule(Map)->Module:::Converts this module to a normal module with the given dependences
com.sun.tools.jdeps.Module#isExported(String)->boolean:::Tests if the package of the given name is exported.
com.sun.tools.jdeps.Module#isExported(String, String)->boolean:::Tests if the package of the given name is exported to the target in a qualified fashion.
com.sun.tools.jdeps.Module#isOpen(String)->boolean:::Tests if the package of the given name is open.
com.sun.tools.jdeps.Module#isOpen(String, String)->boolean:::Tests if the package of the given name is open to the target in a qualified fashion.
com.sun.tools.jdeps.Module#toString()->String::: module to string
com.sun.tools.jdeps.Module.Builder#location(URI)->Builder::: builder location
com.sun.tools.jdeps.Module.Builder#classes(ClassFileReader)->Builder::: builder classes
com.sun.tools.jdeps.Module.Builder#build()->Module::: builder build
com.sun.tools.jdeps.ModuleAnalyzer#run()->boolean::: module analyzer run
com.sun.tools.jdeps.ModuleAnalyzer.ModuleDeps#descriptor()->ModuleDescriptor::: module deps descriptor
com.sun.tools.jdeps.ModuleAnalyzer.ModuleDeps#reduced()->ModuleDescriptor:::Apply the transitive reduction on the module graph and returns the corresponding ModuleDescriptor
com.sun.tools.jdeps.ModuleAnalyzer#descriptors(String)->ModuleDescriptor[]::: module analyzer descriptors
com.sun.tools.jdeps.ModuleAnalyzer#unusedQualifiedExports(String)->Map>::: module analyzer unused qualified exports
com.sun.tools.jdeps.ModuleDotGraph#genDotFiles(Path)->boolean:::Generate dotfile for all modules
com.sun.tools.jdeps.ModuleDotGraph#genDotFiles(Path, Attributes)->boolean::: module dot graph gen dot files
com.sun.tools.jdeps.ModuleDotGraph#genDotFile(Path, String, Configuration, Attributes)->void:::Generate dotfile of the given path
com.sun.tools.jdeps.ModuleDotGraph#requiresTransitiveGraph(Configuration, Set)->Graph:::Returns a Graph containing only requires transitive edges with transitive reduction.
com.sun.tools.jdeps.ModuleDotGraph.Attributes#fontSize()->int::: attributes font size
com.sun.tools.jdeps.ModuleDotGraph.Attributes#fontName()->String::: attributes font name
com.sun.tools.jdeps.ModuleDotGraph.Attributes#fontColor()->String::: attributes font color
com.sun.tools.jdeps.ModuleDotGraph.Attributes#arrowSize()->int::: attributes arrow size
com.sun.tools.jdeps.ModuleDotGraph.Attributes#arrowWidth()->int::: attributes arrow width
com.sun.tools.jdeps.ModuleDotGraph.Attributes#arrowColor()->String::: attributes arrow color
com.sun.tools.jdeps.ModuleDotGraph.Attributes#rankSep()->double::: attributes rank sep
com.sun.tools.jdeps.ModuleDotGraph.Attributes#ranks()->List>::: attributes ranks
com.sun.tools.jdeps.ModuleDotGraph.Attributes#weightOf(String, String)->int::: attributes weight of
com.sun.tools.jdeps.ModuleDotGraph.Attributes#requiresMandatedColor()->String::: attributes requires mandated color
com.sun.tools.jdeps.ModuleDotGraph.Attributes#javaSubgraphColor()->String::: attributes java subgraph color
com.sun.tools.jdeps.ModuleDotGraph.Attributes#jdkSubgraphColor()->String::: attributes jdk subgraph color
com.sun.tools.jdeps.ModuleDotGraph.DotGraphAttributes#fontSize()->int::: dot graph attributes font size
com.sun.tools.jdeps.ModuleDotGraph.DotGraphAttributes#fontName()->String::: dot graph attributes font name
com.sun.tools.jdeps.ModuleDotGraph.DotGraphAttributes#fontColor()->String::: dot graph attributes font color
com.sun.tools.jdeps.ModuleDotGraph.DotGraphAttributes#arrowSize()->int::: dot graph attributes arrow size
com.sun.tools.jdeps.ModuleDotGraph.DotGraphAttributes#arrowWidth()->int::: dot graph attributes arrow width
com.sun.tools.jdeps.ModuleDotGraph.DotGraphAttributes#arrowColor()->String::: dot graph attributes arrow color
com.sun.tools.jdeps.ModuleExportsAnalyzer#run()->boolean::: module exports analyzer run
com.sun.tools.jdeps.ModuleGraphBuilder#addModule(Module)->ModuleGraphBuilder:::Adds a module to the graph.
com.sun.tools.jdeps.ModuleGraphBuilder#reduced()->Graph:::Apply transitive reduction on the resulting graph
com.sun.tools.jdeps.ModuleGraphBuilder#buildGraph()->Graph::: module graph builder build graph
com.sun.tools.jdeps.ModuleGraphBuilder#requiresTransitive(Module)->Stream::: module graph builder requires transitive
com.sun.tools.jdeps.ModuleInfoBuilder#run()->boolean::: module info builder run
com.sun.tools.jdeps.ModuleInfoBuilder#notFound(Archive)->boolean::: module info builder not found
com.sun.tools.jdeps.ModuleInfoBuilder#modules()->Stream:::Returns the stream of resulting modules
com.sun.tools.jdeps.ModuleInfoBuilder#descriptors()->Stream:::Returns the stream of resulting ModuleDescriptors
com.sun.tools.jdeps.ModuleInfoBuilder#visitMissingDeps(Analyzer.Visitor)->void::: module info builder visit missing deps
com.sun.tools.jdeps.ModuleInfoBuilder#writeModuleInfo(Path, ModuleDescriptor)->void::: module info builder write module info
com.sun.tools.jdeps.MultiReleaseException#getKey()->String:::Returns the resource message key
com.sun.tools.jdeps.MultiReleaseException#getParams()->Object[]:::Returns the detailed error message array.
com.sun.tools.jdeps.VersionHelper#get(String)->String::: version helper get
com.sun.tools.jdeps.VersionHelper#add(JarFile, JarEntry, ClassFile)->void::: version helper add

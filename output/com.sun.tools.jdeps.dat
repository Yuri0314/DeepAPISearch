Analyzer#run(Iterable, Map):::Performs the dependency analysis on the given archives.:::putAll->foreach->deps->new->Dependences->archive->visitDependences->results->put->return
Analyzer#archives():::Returns the analyzed archives:::return->results->keySet
Analyzer#hasDependences(Archive):::Returns true if the given archive has dependences.:::if->results->containsKey->return->results->get->dependencies->size->return
Analyzer#dependences(Archive):::Returns the dependences, either class name or package name as specified in the given verbose level, from the given source.:::if->results->containsKey->return->Collections->emptySet->return->results->get->dependencies->stream->Dep->target->map->Collectors->toSet->collect
Analyzer#requires(Archive):::Returns the direct dependences of the given source:::if->results->containsKey->return->Stream->empty->return->results->get->requires->stream
Analyzer.Visitor#visitDependence(String, Archive, String, Archive):::Visits a recorded dependency from origin to target which can be a fully-qualified classname, a package name, a module or archive name depending on the Analyzer's type.:::
Analyzer#visitDependences(Archive, Visitor, Type):::Visit the dependencies of the given source:::if->result->results->get->reqs->result->requires->stream->reqs->stream->if->reqs->isEmpty->if->hasDependences->Stream->of->stream->Comparator->Archive->getName->comparing->sorted->profile->result->getTargetProfile->v->source->getName->profile->profileName->archive->getName->visitDependence->forEach->else->result->results->get->if->new->Dependences->source->visitDependences->result->dependencies->stream->Comparator->Dep->origin->comparing->Dep->target->thenComparing->sorted->v->d->origin->d->originArchive->d->target->d->targetArchive->visitDependence->forEach
Archive#isEmpty():::Tests if any class has been parsed.:::return->getClasses->isEmpty
ClassFileReader#newInstance(Path):::Returns a ClassFileReader instance of a given path.:::return->newInstance
ClassFileReader#newInstance(Path, Runtime.Version):::Returns a ClassFileReader instance of a given path.:::if->Files->notExists->throw->path->toString->new->FileNotFoundException->if->Files->isDirectory->return->new->DirectoryReader->else->if->path->getFileName->toString->endsWith->return->new->JarFileReader->else->return->new->ClassFileReader
ClassFileReader#newInstance(FileSystem, Path):::Returns a ClassFileReader instance of a given FileSystem and path:::return->new->DirectoryReader
ClassFileReader#entries():::Returns all entries in this archive.:::es->if->scan->return
ClassFileReader#getClassFile(String):::Returns the ClassFile matching the given binary name or a fully-qualified class name.:::if->name->indexOf->i->name->lastIndexOf->pathname->name->replace->if->baseFileName->equals->baseFileName->pathname->substring->pathname->pathname->length->substring->equals->return->readClassFile->else->if->baseFileName->name->replace->equals->return->readClassFile->return
DependencyFinder#getDependences(Archive):::Returns the modules of all dependencies found:::return->source->getDependencies->this->locationToArchive->map->filter
DependencyFinder#locationToArchive(Location):::Returns the location to archive map; or NOT_FOUND:::return->parsedClasses->containsKey->parsedClasses->get->configuration->findClass->orElse
DependencyFinder#dependences():::Returns a map from an archive to its required archives:::map->new->HashMap<>->parsedArchives->values->stream->Deque->stream->flatMap->a->isEmpty->filter->deps->getDependences->toSet->collect->if->deps->isEmpty->map->put->forEach->return
DependencyFinder#parse(Stream):::Parses all class files from the given archive stream and returns all target locations.:::archiveStream->parse->forEach->return->waitForTasksCompleted
DependencyFinder#parseExportedAPIs(Stream):::Parses the exported API class files from the given archive stream and returns all target locations.:::archiveStream->parse->forEach->return->waitForTasksCompleted
DependencyFinder#parse(Archive, String):::Parses the named class from the given archive and returns all target locations the named class references.:::try->return->parse->catch->throw->new->UncheckedIOException->finally
DependencyFinder#parseExportedAPIs(Archive, String):::Parses the exported API of the named class from the given archive and returns all target locations the named class references.:::try->return->parse->catch->throw->new->UncheckedIOException->finally
DepsAnalyzer#run(boolean, int):::Perform compile-time view or run-time view dependency analysis.:::try->if->finder->rootArchives->stream->parseExportedAPIs->else->finder->rootArchives->stream->parse->archives->addAll->depth->if->if->transitiveArchiveDeps->else->transitiveDeps->archives->archives->analyzer->finder->locationToArchive->run->if->writer->generateOutput->catch->finally->finder->shutdown->return
DepsAnalyzer#archives():::Returns the archives for reporting that has matching dependences:::if->filter->requiresFilter->isEmpty->return->archives->stream->this->include->filter->Archive->hasDependences->filter->Collectors->toSet->collect->else->return->archives->stream->this->include->filter->filter->requiresFilter->source->getName->contains->filter->source->getDependencies->finder->locationToArchive->map->anyMatch->filter->Collectors->toSet->collect
DepsAnalyzer#dependences():::Returns the dependences, either class name or package name as specified in the given verbose level.:::return->analyzer->archives->stream->analyzer->dependences->map->Set->stream->flatMap->Collectors->toSet->collect
DepsAnalyzer#moduleGraph():::Returns a graph of module dependences:::builder->new->Graph.Builder<>->archives->stream->u->m->getName->new->Node->builder->addNode->analyzer->requires->req->getName->new->Node->map->builder->addEdge->forEach->forEach->return->builder->build
DepsAnalyzer#dependenceGraph():::Returns a graph of dependences:::builder->new->Graph.Builder<>->archives->stream->analyzer.results->get->map->deps->dependencies->isEmpty->filter->deps->dependencies->stream->flatMap->addEdge->forEach->return->builder->build
Graph#reduce():::Returns a new Graph after transitive reduction:::builder->new->Builder<>->nodes->stream->builder->addNode->edges->get->stream->pathExists->filter->builder->addEdge->forEach->forEach->return->builder->build
Graph#reduce(Graph):::Returns a new Graph after transitive reduction:::subgraph->nodes->containsAll->keySet->stream->adjacentNodes->g->adjacentNodes->containsAll->allMatch->if->throw->new->IllegalArgumentException->builder->new->Builder<>->nodes->stream->builder->addNode->edges->get->stream->g->pathExists->pathExists->filter->builder->addEdge->forEach->forEach->g->edges->keySet->stream->g->adjacentNodes->stream->isAdjacent->filter->builder->addEdge->forEach->forEach->return->builder->build->reduce
Graph#orderedNodes():::Returns nodes sorted in topological order.:::sorter->new->TopoSorter<>->return->stream
Graph#ordered(Consumer):::Traverse this graph and performs the given action in topological order:::sorter->new->TopoSorter<>->sorter->ordered
Graph#reverse(Consumer):::Traverses this graph and performs the given action in reverse topological order:::sorter->new->TopoSorter<>->sorter->reverse
Graph#transpose():::Returns a transposed graph from this graph:::builder->new->Builder<>->builder->addNodes->edges->keySet->edges->get->stream->builder->addEdge->forEach->forEach->return->builder->build
Graph#dfs(Set):::Returns all nodes reachable from the given set of roots.:::deque->new->ArrayDeque<>->visited->new->HashSet<>->while->deque->isEmpty->u->deque->pop->if->visited->contains->visited->add->if->contains->adjacentNodes->stream->visited->contains->filter->deque->push->forEach->return
InverseDepsAnalyzer#targets():::Returns the target archives determined from the dependency analysis:::return->Collections->unmodifiableSet
InverseDepsAnalyzer#inverseDependences():::Finds all inverse transitive dependencies using the given requires set as the targets, if non-empty:::dependencyFinder->new->DependencyFinder->try->archives->Stream->configuration->initialArchives->stream->configuration->classPathArchives->stream->concat->if->dependencyFinder->parseExportedAPIs->else->dependencyFinder->parse->builder->new->Graph.Builder<>->targets->builder->addNode->forEach->configuration->getModules->values->stream->builder->addNode->m->descriptor->requires->stream->Requires->name->map->configuration->findModule->map->builder->v->get->addEdge->forEach->forEach->dependences->dependencyFinder->dependences->dependences->entrySet->stream->u->e->getKey->builder->addNode->e->getValue->builder->addEdge->forEach->forEach->graph->builder->build->targets->trace->return->targets->stream->findPaths->map->Set->stream->flatMap->Collectors->toSet->collect->catch->finally->dependencyFinder->shutdown
JdepsConfiguration#splitPackages():::Returns the list of packages that split between resolved module and unnamed module:::splitPkgs->packageToModule->keySet->stream->packageToUnnamedModule->containsKey->filter->toSet->collect->if->splitPkgs->isEmpty->return->Collections->emptyMap->return->splitPkgs->stream->Function->identity->sources->new->LinkedHashSet<>->sources->packageToModule->get->getModule->location->toString->add->packageToUnnamedModule->get->stream->Archive->getPathName->map->sources->add->forEach->return->toMap->collect
JdepsConfiguration#findClass(Dependency.Location):::Returns an optional archive containing the given Location:::name->location->getName->i->name->lastIndexOf->pn->name->substring->replace->archive->packageToModule->get->if->return->archive->contains->Optional->of->Optional->empty->if->packageToUnnamedModule->containsKey->return->packageToUnnamedModule->get->stream->a->contains->filter->findFirst->return->Optional->empty
JdepsConfiguration#getModules():::Returns the list of Modules that can be found in the specified module paths.:::return
JdepsConfiguration#resolve(Set):::Returns Configuration with the given roots:::if->roots->isEmpty->throw->new->IllegalArgumentException->return->Configuration->empty->ModuleFinder->of->resolve
JdepsFilter#matches(String):::Tests if the given class matches the pattern given in the -include option:::if->return->if->return->includePattern->matcher->matches->return
JdepsFilter#matches(Archive):::Tests if the given source includes classes specified in -include option  This method can be used to determine if the given source should eagerly be processed.:::if->return->source->reader->entries->stream->name->replace->map->name->equals->filter->this->matches->anyMatch->return->hasTargetFilter
JdepsFilter#accepts(Location, Archive, Location, Archive):::Filter depending on the containing archive or module:::if->module->targetArchive->getModule->return->target->getPackageName->isJDKInternalPackage->else->if->return->return
JdepsFilter#isJDKInternalPackage(Module, String):::Tests if the package is an internal package of the given module.:::if->module->isJDKUnsupported->return->return->module->isJDK->module->isExported
JdepsTask.Command#checkOptions():::Returns true if the command-line options are all valid; otherwise, returns false.:::
JdepsTask.Command#run(JdepsConfiguration):::Do analysis:::
JdepsTask.Command#addModules():::Includes all modules on system module path and application module path  When a named module is analyzed, it will analyze the dependences only:::return->Set->of
JdepsWriter#toTag(Archive, String, Archive):::If the given archive is JDK archive, this method returns the profile name only if -profile option is specified; it accesses a private JDK API and the returned value will have "JDK internal API" prefix  For non-JDK archives, this method returns the file name of the archive.:::if->target->getModule->isNamed->return->target->getName->module->target->getModule->pn->if->i->name->lastIndexOf->name->substring->if->module->isExported->module->isJDKUnsupported->return->showProfileOrModule->if->source->getModule->isJDK->module->isJDK->return->module->name->isExported->module->source->getModule->name->isExported->return->module->name
Main#run(String[], PrintWriter):::Entry point that does not call System.exit.:::t->new->JdepsTask->t->setLog->return->t->run
Module#name():::Returns module name:::return->descriptor->name->getName
Module#toNormalModule(Map):::Converts this module to a normal module with the given dependences:::if->isAutomatic->throw->name->new->IllegalArgumentException->return->new->NormalModule
Module#isExported(String):::Tests if the package of the given name is exported.:::return->exports->containsKey->exports->get->isEmpty
Module#isExported(String, String):::Tests if the package of the given name is exported to the target in a qualified fashion.:::return->isExported->exports->containsKey->exports->get->contains
Module#isOpen(String):::Tests if the package of the given name is open.:::return->opens->containsKey->opens->get->isEmpty
Module#isOpen(String, String):::Tests if the package of the given name is open to the target in a qualified fashion.:::return->isOpen->opens->containsKey->opens->get->contains
ModuleAnalyzer.ModuleDeps#reduced():::Apply the transitive reduction on the module graph and returns the corresponding ModuleDescriptor:::g->buildReducedGraph->return->g->adjacentNodes->descriptor
ModuleDotGraph#genDotFiles(Path):::Generate dotfile for all modules:::return->genDotFiles
ModuleDotGraph#genDotFile(Path, String, Configuration, Attributes):::Generate dotfile of the given path:::graph->Set->of->requiresTransitiveGraph->gengraph->builder->new->DotGraphBuilder->builder->attributes->javaSubgraphColor->subgraph->attributes->jdkSubgraphColor->subgraph->graph->nodes->stream->configuration->findModule->get->reference->descriptor->map->modules->builder->build
ModuleDotGraph#requiresTransitiveGraph(Configuration, Set):::Returns a Graph containing only requires transitive edges with transitive reduction.:::deque->new->ArrayDeque<>->visited->new->HashSet<>->builder->new->Graph.Builder<>->while->deque->peek->mn->deque->pop->if->visited->contains->continue->visited->add->builder->addNode->cf->findModule->get->reference->descriptor->requires->stream->d->modifiers->contains->d->name->equals->filter->Requires->name->map->deque->add->builder->addEdge->forEach->return->builder->build->reduce
ModuleGraphBuilder#addModule(Module):::Adds a module to the graph.:::addNode->return
ModuleGraphBuilder#reduced():::Apply transitive reduction on the resulting graph:::graph->build->newGraph->graph->edges->buildGraph->reduce->if->log->new->PrintWriter->println->graph->printGraph->println->newGraph->printGraph->return
ModuleInfoBuilder#modules():::Returns the stream of resulting modules:::return->automaticToNormalModule->values->stream
ModuleInfoBuilder#descriptors():::Returns the stream of resulting ModuleDescriptors:::return->automaticToNormalModule->entrySet->stream->Map.Entry->getValue->map->Module->descriptor->map
MultiReleaseException#getKey():::Returns the resource message key:::return
MultiReleaseException#getParams():::Returns the detailed error message array.:::return

sun.tools.java.ArrayType#getElementType()->Type::: array type get element type
sun.tools.java.ArrayType#getArrayDimension()->int::: array type get array dimension
sun.tools.java.ArrayType#typeString(String, boolean, boolean)->String::: array type type string
sun.tools.java.BinaryAttribute#load(DataInputStream, BinaryConstantPool, int)->BinaryAttribute:::Load a list of attributes
sun.tools.java.BinaryAttribute#write(BinaryAttribute, DataOutputStream, BinaryConstantPool, Environment)->void::: binary attribute write
sun.tools.java.BinaryAttribute#getName()->Identifier::: binary attribute get name
sun.tools.java.BinaryAttribute#getData()->byte[]::: binary attribute get data
sun.tools.java.BinaryAttribute#getNextAttribute()->BinaryAttribute::: binary attribute get next attribute
sun.tools.java.BinaryClass#basicCheck(Environment)->void:::Ready a BinaryClass for further checking
sun.tools.java.BinaryClass#load(Environment, DataInputStream)->BinaryClass:::Load a binary class
sun.tools.java.BinaryClass#load(Environment, DataInputStream, int)->BinaryClass::: binary class load
sun.tools.java.BinaryClass#loadNested(Environment)->void::: binary class load nested
sun.tools.java.BinaryClass#loadNested(Environment, int)->void::: binary class load nested
sun.tools.java.BinaryClass#write(Environment, OutputStream)->void:::Write the class out to a given stream
sun.tools.java.BinaryClass#getDependencies()->Enumeration:::Get the dependencies
sun.tools.java.BinaryClass#addDependency(ClassDeclaration)->void:::Add a dependency
sun.tools.java.BinaryClass#getConstants()->BinaryConstantPool:::Get the constant pool
sun.tools.java.BinaryClass#getAttribute(Identifier)->byte[]:::Get a class attribute
sun.tools.java.BinaryCode#getExceptionHandlers()->BinaryExceptionHandler[]::: binary code get exception handlers
sun.tools.java.BinaryCode#getCode()->byte[]::: binary code get code
sun.tools.java.BinaryCode#getMaxStack()->int::: binary code get max stack
sun.tools.java.BinaryCode#getMaxLocals()->int::: binary code get max locals
sun.tools.java.BinaryCode#getAttributes()->BinaryAttribute::: binary code get attributes
sun.tools.java.BinaryCode#load(BinaryMember, BinaryConstantPool, Environment)->BinaryCode:::Load a binary class
sun.tools.java.BinaryConstantPool#getInteger(int)->int:::get a integer
sun.tools.java.BinaryConstantPool#getValue(int)->Object:::get a value
sun.tools.java.BinaryConstantPool#getString(int)->String:::get a string
sun.tools.java.BinaryConstantPool#getIdentifier(int)->Identifier:::get an identifier
sun.tools.java.BinaryConstantPool#getDeclarationFromName(Environment, int)->ClassDeclaration:::get class declaration
sun.tools.java.BinaryConstantPool#getDeclaration(Environment, int)->ClassDeclaration:::get class declaration
sun.tools.java.BinaryConstantPool#getType(int)->Type:::get a type from a type signature
sun.tools.java.BinaryConstantPool#getConstantType(int)->int:::get the type of constant given an index
sun.tools.java.BinaryConstantPool#getConstant(int, Environment)->Object:::get the n-th constant from the constant pool
sun.tools.java.BinaryConstantPool#getDependencies(Environment)->Vector:::Get a list of dependencies, ie: all the classes referenced in this constant pool.
sun.tools.java.BinaryConstantPool#indexObject(Object, Environment)->int:::Find the index of an Object in the constant pool
sun.tools.java.BinaryConstantPool#indexString(String, Environment)->int:::Find the index of an ascii string in the constant pool
sun.tools.java.BinaryConstantPool#createIndexHash(Environment)->void::: binary constant pool create index hash
sun.tools.java.BinaryConstantPool#write(DataOutputStream, Environment)->void:::Write out the contents of the constant pool, including any additions that have been added.
sun.tools.java.BinaryMember#isInlineable(Environment, boolean)->boolean:::Inline allowed (currently only allowed for the constructor of Object).
sun.tools.java.BinaryMember#getArguments()->Vector:::Get arguments
sun.tools.java.BinaryMember#getExceptions(Environment)->ClassDeclaration[]:::Get exceptions
sun.tools.java.BinaryMember#getDocumentation()->String:::Get documentation
sun.tools.java.BinaryMember#isConstant()->boolean::: binary member is constant
sun.tools.java.BinaryMember#getValue(Environment)->Node:::Get the value
sun.tools.java.BinaryMember#getAttribute(Identifier)->byte[]:::Get a field attribute
sun.tools.java.BinaryMember#deleteAttribute(Identifier)->boolean::: binary member delete attribute
sun.tools.java.BinaryMember#addAttribute(Identifier, byte[], Environment)->void::: binary member add attribute
sun.tools.java.ClassDeclaration#getStatus()->int:::Get the status of the class
sun.tools.java.ClassDeclaration#getName()->Identifier:::Get the name of the class
sun.tools.java.ClassDeclaration#getType()->Type:::Get the type of the class
sun.tools.java.ClassDeclaration#isDefined()->boolean:::Check if the class is defined
sun.tools.java.ClassDeclaration#getClassDefinition()->ClassDefinition:::Get the definition of this class
sun.tools.java.ClassDeclaration#getClassDefinition(Environment)->ClassDefinition:::Get the definition of this class, if the class is not yet defined, load the definition
sun.tools.java.ClassDeclaration#getClassDefinitionNoCheck(Environment)->ClassDefinition:::Get the definition of this class, if the class is not yet defined, load the definition
sun.tools.java.ClassDeclaration#setDefinition(ClassDefinition, int)->void:::Set the class definition
sun.tools.java.ClassDeclaration#equals(Object)->boolean:::Equality
sun.tools.java.ClassDeclaration#hashCode()->int::: class declaration hash code
sun.tools.java.ClassDeclaration#toString()->String:::toString
sun.tools.java.ClassDefinition#getClassContext()->Context::: class definition get class context
sun.tools.java.ClassDefinition#getSource()->Object:::Get the source of the class
sun.tools.java.ClassDefinition#getError()->boolean:::Check if there were any errors in this class.
sun.tools.java.ClassDefinition#setError()->void:::Mark this class to be erroneous.
sun.tools.java.ClassDefinition#getNestError()->boolean:::Check if there were any errors in our class nest.
sun.tools.java.ClassDefinition#setNestError()->void:::Mark this class, and all siblings in its class nest, to be erroneous.
sun.tools.java.ClassDefinition#getWhere()->long:::Get the position in the input
sun.tools.java.ClassDefinition#getClassDeclaration()->ClassDeclaration:::Get the class declaration
sun.tools.java.ClassDefinition#getModifiers()->int:::Get the class' modifiers
sun.tools.java.ClassDefinition#subModifiers(int)->void::: class definition sub modifiers
sun.tools.java.ClassDefinition#addModifiers(int)->void::: class definition add modifiers
sun.tools.java.ClassDefinition#getSuperClass()->ClassDeclaration:::Get the class' super class
sun.tools.java.ClassDefinition#getSuperClass(Environment)->ClassDeclaration::: class definition get super class
sun.tools.java.ClassDefinition#getInterfaces()->ClassDeclaration[]:::Get the class' interfaces
sun.tools.java.ClassDefinition#getOuterClass()->ClassDefinition:::Get the class' enclosing class (or null if not inner)
sun.tools.java.ClassDefinition#setOuterClass(ClassDefinition)->void:::Set the class' enclosing class
sun.tools.java.ClassDefinition#setOuterMember(MemberDefinition)->void:::Set the class' enclosing current instance pointer
sun.tools.java.ClassDefinition#isInnerClass()->boolean:::Tell if the class is inner
sun.tools.java.ClassDefinition#isMember()->boolean:::Tell if the class is a member of another class
sun.tools.java.ClassDefinition#isTopLevel()->boolean:::Tell if the class is "top-level", which is either a package member, or a static member of another top-level class.
sun.tools.java.ClassDefinition#isInsideLocal()->boolean::: class definition is inside local
sun.tools.java.ClassDefinition#isInsideLocalOrAnonymous()->boolean:::Tell if the class is local or anonymous class, or inside such a class, which means it cannot be mentioned outside of its file.
sun.tools.java.ClassDefinition#getLocalName()->Identifier:::Return a simple identifier for this class (idNull if anonymous).
sun.tools.java.ClassDefinition#setLocalName(Identifier)->void:::Set the local name of a class
sun.tools.java.ClassDefinition#getInnerClassMember()->MemberDefinition:::If inner, get the field for this class in the enclosing class
sun.tools.java.ClassDefinition#findOuterMember()->MemberDefinition:::If inner, return an innermost uplevel self pointer, if any exists
sun.tools.java.ClassDefinition#isStatic()->boolean:::See if this is a (nested) static class.
sun.tools.java.ClassDefinition#getTopClass()->ClassDefinition:::Get the class' top-level enclosing class
sun.tools.java.ClassDefinition#getFirstMember()->MemberDefinition:::Get the class' first field or first match
sun.tools.java.ClassDefinition#getFirstMatch(Identifier)->MemberDefinition::: class definition get first match
sun.tools.java.ClassDefinition#getName()->Identifier:::Get the class' name
sun.tools.java.ClassDefinition#getType()->Type:::Get the class' type
sun.tools.java.ClassDefinition#getDocumentation()->String:::Get the class' documentation
sun.tools.java.ClassDefinition#containsDeprecated(String)->boolean:::Return true if the given documentation string contains a deprecation paragraph
sun.tools.java.ClassDefinition#inSamePackage(ClassDeclaration)->boolean::: class definition in same package
sun.tools.java.ClassDefinition#inSamePackage(ClassDefinition)->boolean::: class definition in same package
sun.tools.java.ClassDefinition#inSamePackage(Identifier)->boolean::: class definition in same package
sun.tools.java.ClassDefinition#isInterface()->boolean:::Checks
sun.tools.java.ClassDefinition#isClass()->boolean::: class definition is class
sun.tools.java.ClassDefinition#isPublic()->boolean::: class definition is public
sun.tools.java.ClassDefinition#isPrivate()->boolean::: class definition is private
sun.tools.java.ClassDefinition#isProtected()->boolean::: class definition is protected
sun.tools.java.ClassDefinition#isPackagePrivate()->boolean::: class definition is package private
sun.tools.java.ClassDefinition#isFinal()->boolean::: class definition is final
sun.tools.java.ClassDefinition#isAbstract()->boolean::: class definition is abstract
sun.tools.java.ClassDefinition#isSynthetic()->boolean::: class definition is synthetic
sun.tools.java.ClassDefinition#isDeprecated()->boolean::: class definition is deprecated
sun.tools.java.ClassDefinition#isAnonymous()->boolean::: class definition is anonymous
sun.tools.java.ClassDefinition#isLocal()->boolean::: class definition is local
sun.tools.java.ClassDefinition#hasConstructor()->boolean::: class definition has constructor
sun.tools.java.ClassDefinition#mustBeAbstract(Environment)->boolean:::Check to see if a class must be abstract
sun.tools.java.ClassDefinition#superClassOf(Environment, ClassDeclaration)->boolean:::Check if this is a super class of another class
sun.tools.java.ClassDefinition#enclosingClassOf(ClassDefinition)->boolean:::Check if this is an enclosing class of another class
sun.tools.java.ClassDefinition#subClassOf(Environment, ClassDeclaration)->boolean:::Check if this is a sub class of another class
sun.tools.java.ClassDefinition#implementedBy(Environment, ClassDeclaration)->boolean:::Check if this class is implemented by another class
sun.tools.java.ClassDefinition#couldImplement(ClassDefinition)->boolean:::Check to see if a class which implements interface `this' could possibly implement the interface `intDef'
sun.tools.java.ClassDefinition#extendsCanAccess(Environment, ClassDeclaration)->boolean:::Check if another class can be accessed from the 'extends' or 'implements' clause of this class.
sun.tools.java.ClassDefinition#canAccess(Environment, ClassDeclaration)->boolean:::Check if another class can be accessed from within the body of this class.
sun.tools.java.ClassDefinition#canAccess(Environment, MemberDefinition)->boolean::: class definition can access
sun.tools.java.ClassDefinition#permitInlinedAccess(Environment, ClassDeclaration)->boolean:::Check if a class is entitled to inline access to a class from another class.
sun.tools.java.ClassDefinition#permitInlinedAccess(Environment, MemberDefinition)->boolean:::Check if a class is entitled to inline access to a method from another class.
sun.tools.java.ClassDefinition#protectedAccess(Environment, MemberDefinition, Type)->boolean:::We know the field is marked protected (and not public) and that the field is visible (as per canAccess)
sun.tools.java.ClassDefinition#getAccessMember(Environment, Context, MemberDefinition, boolean)->MemberDefinition:::Find or create an access method for a private member, or return null if this is not possible.
sun.tools.java.ClassDefinition#getUpdateMember(Environment, Context, MemberDefinition, boolean)->MemberDefinition:::Find or create an update method for a private member, or return null if this is not possible.
sun.tools.java.ClassDefinition#getVariable(Environment, Identifier, ClassDefinition)->MemberDefinition:::Get a field from this class
sun.tools.java.ClassDefinition#reportDeprecated(Environment)->boolean:::Tells whether to report a deprecation error for this class.
sun.tools.java.ClassDefinition#noteUsedBy(ClassDefinition, long, Environment)->void:::Note that this class is being used somehow by ref
sun.tools.java.ClassDefinition#getInnerClass(Environment, Identifier)->MemberDefinition:::Get an inner class
sun.tools.java.ClassDefinition#matchMethod(Environment, ClassDefinition, Identifier, Type[])->MemberDefinition:::Lookup a method
sun.tools.java.ClassDefinition#matchMethod(Environment, ClassDefinition, Identifier)->MemberDefinition:::Lookup a method
sun.tools.java.ClassDefinition#matchAnonConstructor(Environment, Identifier, Type[])->MemberDefinition:::A version of matchMethod to be used only for constructors when we cannot pass in a sourceClass argument
sun.tools.java.ClassDefinition#findMethod(Environment, Identifier, Type)->MemberDefinition:::Find a method, ie: exact match in this class or any of the super classes
sun.tools.java.ClassDefinition#basicCheck(Environment)->void::: class definition basic check
sun.tools.java.ClassDefinition#check(Environment)->void:::Check this class.
sun.tools.java.ClassDefinition#checkLocalClass(Environment, Context, Vset, ClassDefinition, Expression[], Type[])->Vset::: class definition check local class
sun.tools.java.ClassDefinition#getPermanentlyAbstractMethods()->Iterator:::This method returns an Iterator of all abstract methods in our superclasses which we are unable to implement.
sun.tools.java.ClassDefinition#turnOffInheritanceChecks()->void:::This is a workaround to allow javadoc to turn off certain inheritance/override checks which interfere with javadoc badly
sun.tools.java.ClassDefinition#collectInheritedMethods(Environment)->void:::Collect all methods defined in this class or inherited from any of our superclasses or interfaces
sun.tools.java.ClassDefinition#getMethods(Environment)->Iterator:::Get an Iterator of all methods which could be accessed in an instance of this class.
sun.tools.java.ClassDefinition#getMethods()->Iterator:::Get an Iterator of all methods which could be accessed in an instance of this class
sun.tools.java.ClassDefinition#addMirandaMethods(Environment, Iterator)->void:::Add a list of methods to this class as miranda methods
sun.tools.java.ClassDefinition#inlineLocalClass(Environment)->void::: class definition inline local class
sun.tools.java.ClassDefinition#resolveTypeStructure(Environment)->void::: class definition resolve type structure
sun.tools.java.ClassDefinition#resolveName(Environment, Identifier)->Identifier:::Look up an inner class name, from somewhere inside this class
sun.tools.java.ClassDefinition#resolveInnerClass(Environment, Identifier)->Identifier:::Interpret a qualified class name, which may have further subcomponents.
sun.tools.java.ClassDefinition#innerClassExists(Identifier)->boolean:::While resolving import directives, the question has arisen: does a given inner class exist?  If the top-level class exists, we ask it about an inner class via this method
sun.tools.java.ClassDefinition#findAnyMethod(Environment, Identifier)->MemberDefinition:::Find any method with a given name.
sun.tools.java.ClassDefinition#diagnoseMismatch(Environment, Identifier, Type[], int, Type[])->int:::Given the fact that this class has no method "nm" matching "argTypes", find out if the mismatch can be blamed on a particular actual argument which disagrees with all of the overloadings
sun.tools.java.ClassDefinition#addMember(MemberDefinition)->void:::Add a field (no checks)
sun.tools.java.ClassDefinition#addMember(Environment, MemberDefinition)->void:::Add a field (subclasses make checks)
sun.tools.java.ClassDefinition#getReference(LocalMember)->UplevelReference:::Find or create an uplevel reference for the given target.
sun.tools.java.ClassDefinition#addReference(LocalMember)->UplevelReference::: class definition add reference
sun.tools.java.ClassDefinition#getReferences()->UplevelReference:::Return the list of all uplevel references.
sun.tools.java.ClassDefinition#getReferencesFrozen()->UplevelReference:::Return the same value as getReferences
sun.tools.java.ClassDefinition#referencesMustNotBeFrozen()->void:::assertion check
sun.tools.java.ClassDefinition#getClassLiteralLookup(long)->MemberDefinition:::Get helper method for class literal lookup.
sun.tools.java.ClassDefinition#addDependency(ClassDeclaration)->void:::Add a dependency
sun.tools.java.ClassDefinition#getLocalClass(String)->ClassDefinition::: class definition get local class
sun.tools.java.ClassDefinition#addLocalClass(ClassDefinition, String)->void::: class definition add local class
sun.tools.java.ClassDefinition#print(PrintStream)->void:::Print for debugging
sun.tools.java.ClassDefinition#toString()->String:::Convert to String
sun.tools.java.ClassDefinition#cleanup(Environment)->void:::After the class has been written to disk, try to free up some storage.
sun.tools.java.ClassFile#newClassFile(File)->ClassFile:::Factory method to create a ClassFile backed by a File.
sun.tools.java.ClassFile#newClassFile(ZipFile, ZipEntry)->ClassFile:::Factory method to create a ClassFile backed by a ZipEntry.
sun.tools.java.ClassFile#newClassFile(Path)->ClassFile:::Factory method to create a ClassFile backed by a nio Path.
sun.tools.java.ClassFile#isZipped()->boolean:::Returns true if this is zip file entry
sun.tools.java.ClassFile#getInputStream()->InputStream:::Returns input stream to either regular file or zip file entry
sun.tools.java.ClassFile#exists()->boolean:::Returns true if file exists.
sun.tools.java.ClassFile#isDirectory()->boolean:::Returns true if this is a directory.
sun.tools.java.ClassFile#lastModified()->long:::Return last modification time
sun.tools.java.ClassFile#getPath()->String:::Get file path
sun.tools.java.ClassFile#getName()->String:::Get name of file entry excluding directory name
sun.tools.java.ClassFile#getAbsoluteName()->String:::Get absolute name of file entry
sun.tools.java.ClassFile#length()->long:::Get length of file
sun.tools.java.ClassPath#getDirectory(String)->ClassFile:::Find the specified directory in the class path
sun.tools.java.ClassPath#getFile(String)->ClassFile:::Load the specified file from the class path
sun.tools.java.ClassPath#getFiles(String, String)->Enumeration:::Returns list of files given a package name and extension.
sun.tools.java.ClassPath#close()->void:::Release resources.
sun.tools.java.ClassPath#toString()->String:::Returns original class path string
sun.tools.java.ClassPathEntry#getFile(String, String, String, boolean)->ClassFile::: class path entry get file
sun.tools.java.ClassPathEntry#fillFiles(String, String, Hashtable)->void::: class path entry fill files
sun.tools.java.ClassPathEntry#close()->void::: class path entry close
sun.tools.java.DirClassPathEntry#getFile(String, String, String, boolean)->ClassFile::: dir class path entry get file
sun.tools.java.DirClassPathEntry#fillFiles(String, String, Hashtable)->void::: dir class path entry fill files
sun.tools.java.DirClassPathEntry#close()->void::: dir class path entry close
sun.tools.java.ZipClassPathEntry#close()->void::: zip class path entry close
sun.tools.java.ZipClassPathEntry#getFile(String, String, String, boolean)->ClassFile::: zip class path entry get file
sun.tools.java.ZipClassPathEntry#fillFiles(String, String, Hashtable)->void::: zip class path entry fill files
sun.tools.java.JrtClassPathEntry#close()->void::: jrt class path entry close
sun.tools.java.JrtClassPathEntry#getPackagePath(String)->Path::: jrt class path entry get package path
sun.tools.java.JrtClassPathEntry#getClassPath(String)->Path::: jrt class path entry get class path
sun.tools.java.JrtClassPathEntry#getFile(String, String, String, boolean)->ClassFile::: jrt class path entry get file
sun.tools.java.JrtClassPathEntry#fillFiles(String, String, Hashtable)->void::: jrt class path entry fill files
sun.tools.java.ClassType#getClassName()->Identifier::: class type get class name
sun.tools.java.ClassType#typeString(String, boolean, boolean)->String::: class type type string
sun.tools.java.CompilerError#printStackTrace()->void::: compiler error print stack trace
sun.tools.java.Environment#isExemptPackage(Identifier)->boolean:::Tells whether an Identifier refers to a package which should be exempt from the "exists" check in Imports#resolve().
sun.tools.java.Environment#getClassDeclaration(Identifier)->ClassDeclaration:::Return a class declaration given a fully qualified class name.
sun.tools.java.Environment#getClassDefinition(Identifier)->ClassDefinition:::Return a class definition given a fully qualified class name
sun.tools.java.Environment#getClassDeclaration(Type)->ClassDeclaration:::Return a class declaration given a type
sun.tools.java.Environment#getClassDefinition(Type)->ClassDefinition:::Return a class definition given a type
sun.tools.java.Environment#classExists(Identifier)->boolean:::Check if a class exists (without actually loading it)
sun.tools.java.Environment#classExists(Type)->boolean::: environment class exists
sun.tools.java.Environment#getPackage(Identifier)->Package:::Get the package path for a package
sun.tools.java.Environment#loadDefinition(ClassDeclaration)->void:::Load the definition of a class.
sun.tools.java.Environment#getSource()->Object:::Return the source of the environment (ie: the thing being compiled/parsed).
sun.tools.java.Environment#resolve(long, ClassDefinition, Type)->boolean:::Resolve a type
sun.tools.java.Environment#resolveByName(long, ClassDefinition, Identifier)->boolean:::Given its fully-qualified name, verify that a class is defined and accessible
sun.tools.java.Environment#resolveExtendsByName(long, ClassDefinition, Identifier)->boolean::: environment resolve extends by name
sun.tools.java.Environment#getQualifiedClassDefinition(long, Identifier, ClassDefinition, boolean)->ClassDefinition:::Like 'getClassDefinition(env)', but check access on each component
sun.tools.java.Environment#resolveNames(ClassDefinition, Type, boolean)->Type:::Resolve the names within a type, returning the adjusted type
sun.tools.java.Environment#resolveName(Identifier)->Identifier:::Resolve a class name, using only package and import directives
sun.tools.java.Environment#resolvePackageQualifiedName(Identifier)->Identifier:::Discover if name consists of a package prefix, followed by the name of a class (that actually exists), followed possibly by some inner class names
sun.tools.java.Environment#resolve(Identifier)->Identifier:::Resolve a class name, using only package and import directives.
sun.tools.java.Environment#getImports()->Imports:::Get the imports used to resolve class names.
sun.tools.java.Environment#makeClassDefinition(Environment, long, IdentifierToken, String, int, IdentifierToken, IdentifierToken[], ClassDefinition)->ClassDefinition:::Create a new class.
sun.tools.java.Environment#makeMemberDefinition(Environment, long, ClassDefinition, String, int, Type, Identifier, IdentifierToken[], IdentifierToken[], Object)->MemberDefinition:::Create a new field.
sun.tools.java.Environment#isApplicable(MemberDefinition, Type[])->boolean::: environment is applicable
sun.tools.java.Environment#isMoreSpecific(MemberDefinition, MemberDefinition)->boolean:::Returns true if "best" is in every argument at least as good as "other"
sun.tools.java.Environment#isMoreSpecific(Type, Type)->boolean::: environment is more specific
sun.tools.java.Environment#implicitCast(Type, Type)->boolean:::Return true if an implicit cast from this type to the given type is allowed.
sun.tools.java.Environment#explicitCast(Type, Type)->boolean:::Return true if an explicit cast from this type to the given type is allowed.
sun.tools.java.Environment#getFlags()->int:::Flags.
sun.tools.java.Environment#debug_lines()->boolean:::Debugging flags
sun.tools.java.Environment#debug_vars()->boolean::: environment debug_vars
sun.tools.java.Environment#debug_source()->boolean::: environment debug_source
sun.tools.java.Environment#opt()->boolean:::Optimization flags
sun.tools.java.Environment#opt_interclass()->boolean::: environment opt_interclass
sun.tools.java.Environment#verbose()->boolean:::Verbose
sun.tools.java.Environment#dump()->boolean:::Dump debugging stuff
sun.tools.java.Environment#warnings()->boolean:::Verbose
sun.tools.java.Environment#dependencies()->boolean:::Dependencies
sun.tools.java.Environment#print_dependencies()->boolean:::Print Dependencies to stdout
sun.tools.java.Environment#deprecation()->boolean:::Deprecation warnings are enabled.
sun.tools.java.Environment#version12()->boolean:::Do not support virtual machines before version 1.2
sun.tools.java.Environment#strictdefault()->boolean:::Floating point is strict by default
sun.tools.java.Environment#shutdown()->void:::Release resources, if any.
sun.tools.java.Environment#error(Object, long, String, Object, Object, Object)->void:::Issue an error
sun.tools.java.Environment#error(long, String, Object, Object, Object)->void::: environment error
sun.tools.java.Environment#error(long, String, Object, Object)->void::: environment error
sun.tools.java.Environment#error(long, String, Object)->void::: environment error
sun.tools.java.Environment#error(long, String)->void::: environment error
sun.tools.java.Environment#output(String)->void:::Output a string
sun.tools.java.Environment#debugOutput(Object)->void::: environment debug output
sun.tools.java.Environment#setCharacterEncoding(String)->void:::set character encoding name
sun.tools.java.Environment#getCharacterEncoding()->String:::Return character encoding name
sun.tools.java.Environment#getMajorVersion()->short:::Return major version to use in generated class files.
sun.tools.java.Environment#getMinorVersion()->short:::Return minor version to use in generated class files.
sun.tools.java.Environment#coverage()->boolean::: get coverage flag
sun.tools.java.Environment#covdata()->boolean::: get flag of generation the coverage data file
sun.tools.java.Environment#getcovFile()->File:::Return the coverage data file
sun.tools.java.Environment#dtEnter(String)->void::: environment dt enter
sun.tools.java.Environment#dtExit(String)->void::: environment dt exit
sun.tools.java.Environment#dtEvent(String)->void::: environment dt event
sun.tools.java.Environment#dumpModifiers()->boolean::: environment dump modifiers
sun.tools.java.FileClassFile#isZipped()->boolean::: file class file is zipped
sun.tools.java.FileClassFile#getInputStream()->InputStream::: file class file get input stream
sun.tools.java.FileClassFile#exists()->boolean::: file class file exists
sun.tools.java.FileClassFile#isDirectory()->boolean::: file class file is directory
sun.tools.java.FileClassFile#lastModified()->long::: file class file last modified
sun.tools.java.FileClassFile#getPath()->String::: file class file get path
sun.tools.java.FileClassFile#getName()->String::: file class file get name
sun.tools.java.FileClassFile#getAbsoluteName()->String::: file class file get absolute name
sun.tools.java.FileClassFile#length()->long::: file class file length
sun.tools.java.FileClassFile#toString()->String::: file class file to string
sun.tools.java.Identifier#getType()->int:::Get the type of the identifier.
sun.tools.java.Identifier#setType(int)->void:::Set the type of the identifier.
sun.tools.java.Identifier#lookup(String)->Identifier:::Lookup an identifier.
sun.tools.java.Identifier#lookup(Identifier, Identifier)->Identifier:::Lookup a qualified identifier.
sun.tools.java.Identifier#lookupInner(Identifier, Identifier)->Identifier:::Lookup an inner identifier
sun.tools.java.Identifier#toString()->String:::Convert to a string.
sun.tools.java.Identifier#isQualified()->boolean:::Check if the name is qualified (ie: it contains a '.').
sun.tools.java.Identifier#getQualifier()->Identifier:::Return the qualifier
sun.tools.java.Identifier#getName()->Identifier:::Return the unqualified name
sun.tools.java.Identifier#isInner()->boolean:::Check if the name is inner (ie: it contains a ' ').
sun.tools.java.Identifier#getFlatName()->Identifier:::Return the class name, without its qualifier, and with any nesting flattened into a new qualfication structure
sun.tools.java.Identifier#getTopName()->Identifier::: identifier get top name
sun.tools.java.Identifier#getHead()->Identifier:::Yet another way to slice qualified identifiers: The head of an identifier is its first qualifier component, and the tail is the rest of them.
sun.tools.java.Identifier#getTail()->Identifier::: identifier get tail
sun.tools.java.Identifier#hasAmbigPrefix()->boolean:::Determine whether an Identifier has been marked as ambiguous.
sun.tools.java.Identifier#addAmbigPrefix()->Identifier:::Add ambigPrefix to `this' to make a new Identifier marked as ambiguous
sun.tools.java.Identifier#removeAmbigPrefix()->Identifier:::Remove the ambigPrefix from `this' to get the original identifier.
sun.tools.java.IdentifierToken#getWhere()->long:::The source location of this identifier occurrence.
sun.tools.java.IdentifierToken#getName()->Identifier:::The identifier itself (possibly qualified).
sun.tools.java.IdentifierToken#getModifiers()->int:::The modifiers associated with the occurrence, if any.
sun.tools.java.IdentifierToken#toString()->String::: identifier token to string
sun.tools.java.IdentifierToken#getWhere(IdentifierToken, long)->long:::Return defaultWhere if id is null or id.where is missing (0)
sun.tools.java.Imports#resolve(Environment)->void:::Check the names of the imports.
sun.tools.java.Imports#resolve(Environment, Identifier)->Identifier:::Lookup a class, given the current set of imports, AmbiguousClass exception is thrown if the name can be resolved in more than one way
sun.tools.java.Imports#importable(Identifier, Environment)->boolean:::Check to see if 'id' names an importable class in `env'
sun.tools.java.Imports#forceResolve(Environment, Identifier)->Identifier:::Suppose a resolve() call has failed
sun.tools.java.Imports#addClass(IdentifierToken)->void:::Add a class import
sun.tools.java.Imports#addClass(Identifier)->void::: imports add class
sun.tools.java.Imports#addPackage(IdentifierToken)->void:::Add a package import, or perhaps an inner class scope
sun.tools.java.Imports#addPackage(Identifier)->void::: imports add package
sun.tools.java.Imports#setCurrentPackage(IdentifierToken)->void:::Specify the current package with an IdentifierToken.
sun.tools.java.Imports#setCurrentPackage(Identifier)->void:::Specify the current package
sun.tools.java.Imports#getCurrentPackage()->Identifier:::Report the current package
sun.tools.java.Imports#getImportedPackages()->List:::Return an unmodifiable list of IdentifierToken representing packages specified as imports.
sun.tools.java.Imports#getImportedClasses()->List:::Return an unmodifiable list of IdentifierToken representing classes specified as imports.
sun.tools.java.Imports#newEnvironment(Environment)->Environment:::Extend an environment with my resolve() method.
sun.tools.java.ImportEnvironment#resolve(Identifier)->Identifier::: import environment resolve
sun.tools.java.ImportEnvironment#getImports()->Imports::: import environment get imports
sun.tools.java.MemberDefinition#makeProxyMember(MemberDefinition, ClassDefinition, Environment)->MemberDefinition:::Create a member which is externally the same as `field' but is defined in class `classDef'
sun.tools.java.MemberDefinition#getWhere()->long:::Get the position in the input
sun.tools.java.MemberDefinition#getClassDeclaration()->ClassDeclaration:::Get the class declaration
sun.tools.java.MemberDefinition#resolveTypeStructure(Environment)->void:::A stub
sun.tools.java.MemberDefinition#getDefiningClassDeclaration()->ClassDeclaration:::Get the class declaration in which the field is actually defined
sun.tools.java.MemberDefinition#getClassDefinition()->ClassDefinition:::Get the class definition
sun.tools.java.MemberDefinition#getTopClass()->ClassDefinition:::Get the field's top-level enclosing class
sun.tools.java.MemberDefinition#getModifiers()->int:::Get the field's modifiers
sun.tools.java.MemberDefinition#subModifiers(int)->void::: member definition sub modifiers
sun.tools.java.MemberDefinition#addModifiers(int)->void::: member definition add modifiers
sun.tools.java.MemberDefinition#getType()->Type:::Get the field's type
sun.tools.java.MemberDefinition#getName()->Identifier:::Get the field's name
sun.tools.java.MemberDefinition#getArguments()->Vector:::Get arguments (a vector of LocalMember)
sun.tools.java.MemberDefinition#getExceptions(Environment)->ClassDeclaration[]:::Get the exceptions that are thrown by this method.
sun.tools.java.MemberDefinition#getExceptionIds()->IdentifierToken[]::: member definition get exception ids
sun.tools.java.MemberDefinition#getInnerClass()->ClassDefinition:::Get an inner class.
sun.tools.java.MemberDefinition#isUplevelValue()->boolean:::Is this a synthetic field which holds a copy of, or reference to, a local variable or enclosing instance?
sun.tools.java.MemberDefinition#isAccessMethod()->boolean::: member definition is access method
sun.tools.java.MemberDefinition#getAccessMethodTarget()->MemberDefinition:::Is this a synthetic method which provides access to a visible private member?
sun.tools.java.MemberDefinition#setAccessMethodTarget(MemberDefinition)->void::: member definition set access method target
sun.tools.java.MemberDefinition#getAccessUpdateMember()->MemberDefinition:::If this method is a getter for a private field, return the setter.
sun.tools.java.MemberDefinition#setAccessUpdateMember(MemberDefinition)->void::: member definition set access update member
sun.tools.java.MemberDefinition#isSuperAccessMethod()->boolean:::Is this an access method for a field selection or method call of the form '...super.foo' or '...super.foo()'?
sun.tools.java.MemberDefinition#setIsSuperAccessMethod(boolean)->void:::Mark this member as an access method for a field selection or method call via the 'super' keyword.
sun.tools.java.MemberDefinition#isBlankFinal()->boolean:::Tell if this is a final variable without an initializer
sun.tools.java.MemberDefinition#isNeverNull()->boolean::: member definition is never null
sun.tools.java.MemberDefinition#getValue(Environment)->Node:::Get the field's final value (may return null)
sun.tools.java.MemberDefinition#getValue()->Node::: member definition get value
sun.tools.java.MemberDefinition#setValue(Node)->void::: member definition set value
sun.tools.java.MemberDefinition#getInitialValue()->Object::: member definition get initial value
sun.tools.java.MemberDefinition#getNextMember()->MemberDefinition:::Get the next field or the next match
sun.tools.java.MemberDefinition#getNextMatch()->MemberDefinition::: member definition get next match
sun.tools.java.MemberDefinition#getDocumentation()->String:::Get the field's documentation
sun.tools.java.MemberDefinition#check(Environment)->void:::Request a check of the field definition.
sun.tools.java.MemberDefinition#check(Environment, Context, Vset)->Vset:::Really check the field definition.
sun.tools.java.MemberDefinition#code(Environment, Assembler)->void:::Generate code
sun.tools.java.MemberDefinition#codeInit(Environment, Context, Assembler)->void::: member definition code init
sun.tools.java.MemberDefinition#reportDeprecated(Environment)->boolean:::Tells whether to report a deprecation error for this field.
sun.tools.java.MemberDefinition#canReach(Environment, MemberDefinition)->boolean:::Check if a field can reach another field (only considers forward references, not the access modifiers).
sun.tools.java.MemberDefinition#sameReturnType(MemberDefinition)->boolean:::Convenience method to see if two methods return the same type
sun.tools.java.MemberDefinition#checkOverride(Environment, MemberDefinition)->boolean:::Check to see if `this' can override/hide `method'
sun.tools.java.MemberDefinition#checkMeet(Environment, MemberDefinition, ClassDeclaration)->boolean:::Check to see if two method definitions are compatible, that is do they have a `meet'
sun.tools.java.MemberDefinition#couldOverride(Environment, MemberDefinition)->boolean:::This method is meant to be used to determine if one of two inherited methods could override the other
sun.tools.java.MemberDefinition#isPublic()->boolean:::Checks
sun.tools.java.MemberDefinition#isPrivate()->boolean::: member definition is private
sun.tools.java.MemberDefinition#isProtected()->boolean::: member definition is protected
sun.tools.java.MemberDefinition#isPackagePrivate()->boolean::: member definition is package private
sun.tools.java.MemberDefinition#isFinal()->boolean::: member definition is final
sun.tools.java.MemberDefinition#isStatic()->boolean::: member definition is static
sun.tools.java.MemberDefinition#isSynchronized()->boolean::: member definition is synchronized
sun.tools.java.MemberDefinition#isAbstract()->boolean::: member definition is abstract
sun.tools.java.MemberDefinition#isNative()->boolean::: member definition is native
sun.tools.java.MemberDefinition#isVolatile()->boolean::: member definition is volatile
sun.tools.java.MemberDefinition#isTransient()->boolean::: member definition is transient
sun.tools.java.MemberDefinition#isMethod()->boolean::: member definition is method
sun.tools.java.MemberDefinition#isVariable()->boolean::: member definition is variable
sun.tools.java.MemberDefinition#isSynthetic()->boolean::: member definition is synthetic
sun.tools.java.MemberDefinition#isDeprecated()->boolean::: member definition is deprecated
sun.tools.java.MemberDefinition#isStrict()->boolean::: member definition is strict
sun.tools.java.MemberDefinition#isInnerClass()->boolean::: member definition is inner class
sun.tools.java.MemberDefinition#isInitializer()->boolean::: member definition is initializer
sun.tools.java.MemberDefinition#isConstructor()->boolean::: member definition is constructor
sun.tools.java.MemberDefinition#isLocal()->boolean::: member definition is local
sun.tools.java.MemberDefinition#isInlineable(Environment, boolean)->boolean::: member definition is inlineable
sun.tools.java.MemberDefinition#isConstant()->boolean:::Check if constant:  Will it inline away to a constant?
sun.tools.java.MemberDefinition#toString()->String:::toString
sun.tools.java.MemberDefinition#print(PrintStream)->void:::Print for debugging
sun.tools.java.MemberDefinition#cleanup(Environment)->void::: member definition cleanup
sun.tools.java.MethodSet#size()->int:::Returns the number of distinct methods stored in the MethodSet.
sun.tools.java.MethodSet#add(MemberDefinition)->void:::Adds `method' to the MethodSet
sun.tools.java.MethodSet#replace(MemberDefinition)->void:::Adds `method' to the MethodSet, replacing any previous definition with the same signature.
sun.tools.java.MethodSet#lookupSig(Identifier, Type)->MemberDefinition:::If the MethodSet contains a method with the same signature then lookup() returns it
sun.tools.java.MethodSet#lookupName(Identifier)->Iterator:::Returns an Iterator of all methods contained in the MethodSet which have a given name.
sun.tools.java.MethodSet#iterator()->Iterator:::Returns an Iterator of all methods in the MethodSet
sun.tools.java.MethodSet#freeze()->void:::After freeze() is called, the MethodSet becomes (mostly) immutable
sun.tools.java.MethodSet#isFrozen()->boolean:::Tells whether freeze() has been called on this MethodSet.
sun.tools.java.MethodSet#toString()->String:::Returns a (big) string representation of this MethodSet
sun.tools.java.MethodType#getReturnType()->Type::: method type get return type
sun.tools.java.MethodType#getArgumentTypes()->Type[]::: method type get argument types
sun.tools.java.MethodType#equalArguments(Type)->boolean::: method type equal arguments
sun.tools.java.MethodType#stackSize()->int::: method type stack size
sun.tools.java.MethodType#typeString(String, boolean, boolean)->String::: method type type string
sun.tools.java.Package#classExists(Identifier)->boolean:::Check if a class is defined in this package
sun.tools.java.Package#exists()->boolean:::Check if the package exists
sun.tools.java.Package#getBinaryFile(Identifier)->ClassFile:::Get the .class file of a class
sun.tools.java.Package#getSourceFile(Identifier)->ClassFile:::Get the .java file of a class
sun.tools.java.Package#getSourceFile(String)->ClassFile::: package get source file
sun.tools.java.Package#getSourceFiles()->Enumeration::: package get source files
sun.tools.java.Package#getBinaryFiles()->Enumeration::: package get binary files
sun.tools.java.Package#toString()->String::: package to string
sun.tools.java.Parser#packageDeclaration(long, IdentifierToken)->void:::package declaration
sun.tools.java.Parser#packageDeclaration(long, Identifier)->void::: parser package declaration
sun.tools.java.Parser#importClass(long, IdentifierToken)->void:::import class
sun.tools.java.Parser#importClass(long, Identifier)->void::: parser import class
sun.tools.java.Parser#importPackage(long, IdentifierToken)->void:::import package
sun.tools.java.Parser#importPackage(long, Identifier)->void::: parser import package
sun.tools.java.Parser#beginClass(long, String, int, IdentifierToken, IdentifierToken, IdentifierToken[])->ClassDefinition:::Define class
sun.tools.java.Parser#beginClass(long, String, int, Identifier, Identifier, Identifier[])->void::: parser begin class
sun.tools.java.Parser#getCurrentClass()->ClassDefinition:::Report the current class under construction
sun.tools.java.Parser#endClass(long, ClassDefinition)->void:::End class
sun.tools.java.Parser#endClass(long, Identifier)->void::: parser end class
sun.tools.java.Parser#defineField(long, ClassDefinition, String, int, Type, IdentifierToken, IdentifierToken[], IdentifierToken[], Node)->void:::Define a field
sun.tools.java.Parser#defineField(long, String, int, Type, Identifier, Identifier[], Identifier[], Node)->void::: parser define field
sun.tools.java.Parser#addArgument(Node)->void::: parser add argument
sun.tools.java.Parser#exprArgs(int)->Expression[]::: parser expr args
sun.tools.java.Parser#statArgs(int)->Statement[]::: parser stat args
sun.tools.java.Parser#expect(int)->void:::Expect a token, return its value, scan the next token or throw an exception.
sun.tools.java.Parser#parseTypeExpression()->Expression:::Parse a type expression
sun.tools.java.Parser#parseMethodExpression(Expression, Identifier)->Expression:::Parse a method invocation
sun.tools.java.Parser#parseNewInstanceExpression(long, Expression, Expression)->Expression:::Parse a new instance expression
sun.tools.java.Parser#parseTerm()->Expression:::Parse a primary expression.
sun.tools.java.Parser#parseExpression()->Expression:::Parse an expression.
sun.tools.java.Parser#parseBinaryExpression(Expression)->Expression:::Given a left-hand term, parse an operator and right-hand term.
sun.tools.java.Parser#recoverStatement()->boolean:::Recover after a syntax error in a statement
sun.tools.java.Parser#parseDeclaration(long, int, Expression)->Statement:::Parse declaration, called after the type expression has been parsed and the current token is IDENT.
sun.tools.java.Parser#topLevelExpression(Expression)->void:::Check if an expression is a legal toplevel expression
sun.tools.java.Parser#parseStatement()->Statement:::Parse a statement.
sun.tools.java.Parser#parseBlockStatement()->Statement::: parser parse block statement
sun.tools.java.Parser#parseName(boolean)->IdentifierToken:::Parse an identifier
sun.tools.java.Parser#parseIdentifier(boolean)->Identifier::: parser parse identifier
sun.tools.java.Parser#parseType()->Type:::Parse a type expression, this results in a Type
sun.tools.java.Parser#parseArrayBrackets(Type)->Type:::Parse the tail of a type expression, which might be array brackets
sun.tools.java.Parser#parseModifiers(int)->int:::Parse a possibly-empty sequence of modifier keywords
sun.tools.java.Parser#parseField()->void:::Parse a field.
sun.tools.java.Parser#recoverField(ClassDefinition)->void:::Recover after a syntax error in a field
sun.tools.java.Parser#parseClass()->void:::Parse a top-level class or interface declaration.
sun.tools.java.Parser#parseLocalClass(int)->Statement:::Parse a block-local class or interface declaration.
sun.tools.java.Parser#parseNamedClass(int, int, String)->ClassDefinition:::Parse a named class or interface declaration, starting at "class" or "interface".
sun.tools.java.Parser#parseInheritance(Vector, Vector)->void::: parser parse inheritance
sun.tools.java.Parser#parseClassBody(IdentifierToken, int, int, String, Vector, Vector, long)->ClassDefinition:::Parse the body of a class or interface declaration, starting at the left brace.
sun.tools.java.Parser#recoverFile()->void:::Recover after a syntax error in the file
sun.tools.java.Parser#parseFile()->void:::Parse an Java file.
sun.tools.java.Parser#scan()->long::: parser scan
sun.tools.java.Parser#match(int, int)->void::: parser match
sun.tools.java.ParserActions#packageDeclaration(long, IdentifierToken)->void:::package declaration
sun.tools.java.ParserActions#importClass(long, IdentifierToken)->void:::import class
sun.tools.java.ParserActions#importPackage(long, IdentifierToken)->void:::import package
sun.tools.java.ParserActions#beginClass(long, String, int, IdentifierToken, IdentifierToken, IdentifierToken[])->ClassDefinition:::Define class
sun.tools.java.ParserActions#endClass(long, ClassDefinition)->void:::End class
sun.tools.java.ParserActions#defineField(long, ClassDefinition, String, int, Type, IdentifierToken, IdentifierToken[], IdentifierToken[], Node)->void:::Define a field
sun.tools.java.PathClassFile#isZipped()->boolean::: path class file is zipped
sun.tools.java.PathClassFile#getInputStream()->InputStream::: path class file get input stream
sun.tools.java.PathClassFile#exists()->boolean::: path class file exists
sun.tools.java.PathClassFile#isDirectory()->boolean::: path class file is directory
sun.tools.java.PathClassFile#lastModified()->long::: path class file last modified
sun.tools.java.PathClassFile#getPath()->String::: path class file get path
sun.tools.java.PathClassFile#getName()->String::: path class file get name
sun.tools.java.PathClassFile#getAbsoluteName()->String::: path class file get absolute name
sun.tools.java.PathClassFile#length()->long::: path class file length
sun.tools.java.PathClassFile#toString()->String::: path class file to string
sun.tools.java.Scanner#useInputStream(InputStream)->void:::Setup input from the given input stream, and scan the first token from it.
sun.tools.java.Scanner#getEndPos()->long::: scanner get end pos
sun.tools.java.Scanner#getIdToken()->IdentifierToken:::If the current token is IDENT, return the identifier occurrence
sun.tools.java.Scanner#scan()->long:::Scan the next token.
sun.tools.java.Scanner#xscan()->long::: scanner xscan
sun.tools.java.Scanner#match(int, int)->void:::Scan to a matching '}', ']' or ')'
sun.tools.java.ScannerInputReader#read(char[], int, int)->int::: scanner input reader read
sun.tools.java.ScannerInputReader#read()->int::: scanner input reader read
sun.tools.java.Type#getTypeSignature()->String:::Return the Java type signature.
sun.tools.java.Type#getTypeCode()->int:::Return the type code.
sun.tools.java.Type#getTypeMask()->int:::Return the type mask
sun.tools.java.Type#isType(int)->boolean:::Check for a certain type.
sun.tools.java.Type#isVoidArray()->boolean:::Check to see if this is the bogus type "array of void"  Although this highly degenerate "type" is not constructable from the grammar, the Parser accepts it
sun.tools.java.Type#inMask(int)->boolean:::Check for a certain set of types.
sun.tools.java.Type#tArray(Type)->Type:::Create an array type.
sun.tools.java.Type#getElementType()->Type:::Return the element type of an array type
sun.tools.java.Type#getArrayDimension()->int:::Return the array dimension
sun.tools.java.Type#tClass(Identifier)->Type:::Create a class type.
sun.tools.java.Type#getClassName()->Identifier:::Return the ClassName
sun.tools.java.Type#mangleInnerType(Identifier)->Identifier::: type mangle inner type
sun.tools.java.Type#changeClassName(Identifier, Identifier)->void:::We have learned that a signature means something other that what we thought it meant
sun.tools.java.Type#tMethod(Type)->Type:::Create a method type with no arguments.
sun.tools.java.Type#tMethod(Type, Type[])->Type:::Create a method type with arguments.
sun.tools.java.Type#getReturnType()->Type:::Return the return type
sun.tools.java.Type#getArgumentTypes()->Type[]:::Return the argument types
sun.tools.java.Type#tType(String)->Type:::Create a Type from an Java type signature.
sun.tools.java.Type#equalArguments(Type)->boolean:::Check if the type arguments are the same.
sun.tools.java.Type#stackSize()->int:::Return the amount of space this type takes up on the Java operand stack
sun.tools.java.Type#getTypeCodeOffset()->int:::Return the type code offset
sun.tools.java.Type#typeString(String, boolean, boolean)->String:::Convert a Type to a string, if abbrev is true class names are not fully qualified, if ret is true the return type is included.
sun.tools.java.Type#typeString(String)->String:::Create a type string, given an identifier.
sun.tools.java.Type#toString()->String:::Convert to a String
sun.tools.java.ZipClassFile#isZipped()->boolean::: zip class file is zipped
sun.tools.java.ZipClassFile#getInputStream()->InputStream::: zip class file get input stream
sun.tools.java.ZipClassFile#exists()->boolean::: zip class file exists
sun.tools.java.ZipClassFile#isDirectory()->boolean::: zip class file is directory
sun.tools.java.ZipClassFile#lastModified()->long::: zip class file last modified
sun.tools.java.ZipClassFile#getPath()->String::: zip class file get path
sun.tools.java.ZipClassFile#getName()->String::: zip class file get name
sun.tools.java.ZipClassFile#getAbsoluteName()->String::: zip class file get absolute name
sun.tools.java.ZipClassFile#length()->long::: zip class file length
sun.tools.java.ZipClassFile#toString()->String::: zip class file to string

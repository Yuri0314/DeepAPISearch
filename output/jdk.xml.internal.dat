JdkXmlFeatures#update():::Updates the JdkXmlFeatures instance by reading the system properties again:::readSystemProperties
JdkXmlFeatures#setFeature(String, State, Object):::Set feature by property name and state:::index->getIndex->if->setFeature->return->return
JdkXmlFeatures#setFeature(XmlFeature, State, boolean):::Set the value for a specific feature.:::feature->ordinal->setFeature
JdkXmlFeatures#getFeature(XmlFeature):::Return the value of the specified property:::return->feature->ordinal
JdkXmlFeatures#getFeature(int):::Return the value of a feature by its index (the Feature's ordinal):::return
JdkXmlFeatures#setFeature(int, State, Object):::Set the value of a property by its index:::temp->if->value->getClass->isAssignableFrom->else->Boolean->parseBoolean->setFeature
JdkXmlFeatures#setFeature(int, State, boolean):::Set the value of a property by its index:::if->state->compareTo
JdkXmlFeatures#getIndex(String):::Get the index by property name:::foreach->XmlFeature->values->if->feature->equalsPropertyName->return->feature->ordinal->return
JdkXmlUtils#getValue(Object, int):::Returns the value.:::if->return->if->return->intValue->else->if->return->Integer->String->valueOf->parseInt->else->throw->value->getClass->new->IllegalArgumentException
JdkXmlUtils#setXMLReaderPropertyIfSupport(XMLReader, String, Object, boolean):::Sets the XMLReader instance with the specified property if the the property is supported, ignores error if not, issues a warning if so requested.:::try->reader->setProperty->catch->if->XMLSecurityManager->reader->getClass->getName->printWarning->finally
JdkXmlUtils#getCatalogFeature(CatalogFeatures, String):::Returns the value of a Catalog feature by the property name.:::foreach->Feature->values->if->feature->getPropertyName->equals->return->features->get->return
JdkXmlUtils#getCatalogFeatures(String, String, String, String):::Creates an instance of a CatalogFeatures.:::builder->CatalogFeatures->builder->if->builder->with->if->builder->with->if->builder->with->if->builder->with->return->builder->build
JdkXmlUtils#catalogFeaturesConfig2Config(XMLComponentManager, ParserConfigurationSettings):::Passing on the CatalogFeatures settings from one Xerces configuration object to another.:::supportCatalog->useCatalog->config1->getFeature->try->config2->setFeature->catch->finally->if->try->foreach->values->config2->f->getPropertyName->config1->f->getPropertyName->getProperty->setProperty->catch->finally
JdkXmlUtils#catalogFeaturesConfig2Reader(XMLComponentManager, XMLReader):::Passing on the CatalogFeatures settings from a Xerces configuration object to an XMLReader.:::supportCatalog->useCatalog->config->getFeature->try->reader->setFeature->catch->finally->if->try->foreach->values->reader->f->getPropertyName->config->f->getPropertyName->getProperty->setProperty->catch->finally
JdkXmlUtils#getXMLReader(boolean, boolean):::Returns an XMLReader instance:::saxFactory->reader->spSAXDriver->SecuritySupport->getSystemProperty->if->getXMLReaderWXMLReaderFactory->else->if->getXMLReaderWSAXFactory->if->if->try->reader->setFeature->catch->XMLSecurityManager->reader->getClass->getName->printWarning->finally->try->reader->setFeature->reader->setFeature->catch->finally->return->try->saxFactory->newSAXParser->getXMLReader->catch->finally->return
JdkXmlUtils#getDOMDocument():::Creates a system-default DOM Document.:::try->dbf->JdkXmlUtils->getDOMFactory->return->dbf->newDocumentBuilder->newDocument->catch->finally->return
JdkXmlUtils#getDOMFactory(boolean):::Returns a DocumentBuilderFactory instance.:::override->spDOMFactory->SecuritySupport->getJAXPSystemProperty->if->System->getSecurityManager->dbf->new->DocumentBuilderFactoryImpl->DocumentBuilderFactory->newInstance->dbf->setNamespaceAware->dbf->setValidating->return
JdkXmlUtils#getSAXFactory(boolean):::Returns a SAXParserFactory instance.:::override->spSAXFactory->SecuritySupport->getJAXPSystemProperty->if->System->getSecurityManager->factory->new->SAXParserFactoryImpl->SAXParserFactory->newInstance->factory->setNamespaceAware->return
SecuritySupport#getSystemProperty(String):::Reads a system property with privilege:::return->AccessController->System->getProperty->doPrivileged
SecuritySupport#getSystemProperty(String, String):::Reads a system property with privilege:::value->getSystemProperty->if->return->return
SecuritySupport#getSystemProperty(Class, String, String):::Reads a system property with specified type.:::value->getSystemProperty->if->if->isAssignableFrom->return->type->Integer->parseInt->cast->else->if->isAssignableFrom->return->type->Boolean->parseBoolean->cast->return->type->cast
SecuritySupport#getJAXPSystemProperty(Class, String, String):::Reads JAXP system property in this order: system property, $java.home/conf/jaxp.properties if the system property is not specified:::value->getJAXPSystemProperty->if->if->isAssignableFrom->return->type->Integer->parseInt->cast->else->if->isAssignableFrom->return->type->Boolean->parseBoolean->cast->return->type->cast
SecuritySupport#getJAXPSystemProperty(String):::Reads JAXP system property in this order: system property, $java.home/conf/jaxp.properties if the system property is not specified:::value->getSystemProperty->if->readJAXPProperty->return
SecuritySupport#readJAXPProperty(String):::Reads the specified property from $java.home/conf/jaxp.properties:::value->is->try->if->synchronized->if->configFile->getSystemProperty->f->new->File->if->isFileExists->getFileInputStream->cacheProps->load->cacheProps->getProperty->catch->finally->if->try->is->close->catch->finally->return
SecuritySupport#isDirectory(File):::Tests whether the file denoted by this abstract pathname is a directory.:::return->AccessController->f->isDirectory->doPrivileged
SecuritySupport#isFileExists(File):::Tests whether the file exists.:::return->AccessController->f->exists->doPrivileged
SecuritySupport#getFileInputStream(File):::Creates and returns a new FileInputStream from a file.:::try->return->AccessController->new->FileInputStream->doPrivileged->catch->throw->e->getException->finally
SecuritySupport#getResourceAsStream(String):::Returns the resource as a stream.:::return->AccessController->getResourceAsStream->doPrivileged
SecuritySupport#getResourceBundle(String):::Gets a resource bundle using the specified base name, the default locale, and the caller's class loader.:::return->Locale->getDefault->getResourceBundle
SecuritySupport#getResourceBundle(String, Locale):::Gets a resource bundle using the specified base name and locale, and the caller's class loader.:::return->AccessController->try->return->ResourceBundle->getBundle->catch->try->return->ResourceBundle->new->Locale->getBundle->catch->throw->new->MissingResourceException->finally->finally->doPrivileged
SecuritySupport#doesFileExist(File):::Checks whether the file exists.:::return->AccessController->f->exists->doPrivileged
SecuritySupport#getLastModified(File):::Checks the LastModified attribute of a file.:::return->AccessController->f->lastModified->doPrivileged
SecuritySupport#sanitizePath(String):::Strip off path from an URI:::if->return->i->uri->lastIndexOf->if->return->uri->uri->length->substring->return
SecuritySupport#checkAccess(String, String, String):::Check the protocol used in the systemId against allowed protocols:::if->allowedProtocols->equalsIgnoreCase->return->protocol->if->systemId->contains->else->url->new->URL->url->getProtocol->if->protocol->equalsIgnoreCase->path->url->getPath->path->path->indexOf->substring->else->if->protocol->equalsIgnoreCase->if->isProtocolAllowed->return->else->return
SecuritySupport#getClassLoader():::Returns the current thread's context class loader, or the system class loader if the context class loader is null.:::return->AccessController->cl->Thread->currentThread->getContextClassLoader->if->ClassLoader->getSystemClassLoader->return->doPrivileged

AboutDialog#showDialog()::: about dialog show dialog:::statusBar->setText->setVisible->try->setSelected->catch->finally
AboutDialog#getAboutDialog(JConsole)::: about dialog get about dialog:::if->new->AboutDialog->return
AboutDialog#showAboutDialog(JConsole)::: about dialog show about dialog:::getAboutDialog->showDialog
AboutDialog#browseUserGuide(JConsole)::: about dialog browse user guide:::getAboutDialog->getOnlineDocUrl->browse
AboutDialog#isBrowseSupported()::: about dialog is browse supported:::return->Desktop->isDesktopSupported->Desktop->getDesktop->isSupported
AboutDialog#browse(String)::: about dialog browse:::try->Desktop->getDesktop->new->URI->browse->catch->showDialog->statusBar->ex->getLocalizedMessage->setText->if->JConsole->isDebug->ex->printStackTrace->finally
AboutDialog#createActions()::: about dialog create actions:::new->AbstractAction
AboutDialog#getOnlineDocUrl()::: about dialog get online doc url:::version->Integer->Runtime->version->feature->toString->return->Resources->format
BorderedComponent#getImage(String)::: bordered component get image:::tk->Toolkit->getDefaultToolkit->return->tk->getResource->getImage
BorderedComponent#setComponent(JComponent)::: bordered component set component:::if->remove->if->lm->getLayout->if->add->else->add->revalidate
BorderedComponent#setValueLabel(String)::: bordered component set value label:::if->label->Resources->format->setText
BorderedComponent#actionPerformed(ActionEvent)::: bordered component action performed:::if->if->remove->add->moreOrLessButton->setIcon->else->remove->if->if->Resources->format->new->JLabel->add->moreOrLessButton->setIcon->container->getParent->if->container->getLayout->container->getLayout->setFillRow->container->revalidate
BorderedComponent#getMinimumSize()::: bordered component get minimum size:::if->getLayout->return->super->getMinimumSize->if->d->moreOrLessButton->getMinimumSize->i->getInsets->return->else->return->super->getMinimumSize
BorderedComponent#doLayout()::: bordered component do layout:::if->getLayout->super->doLayout->return->d->getSize->i->getInsets->if->if->p->label->getPreferredSize->label->setBounds->else->if->comp->setBounds
BorderedComponent.ArrowIcon#paintIcon(Component, Graphics, int, int)::: arrow icon paint icon:::w->getIconWidth->h->p->new->Polygon->switch->p->addPoint->p->addPoint->p->addPoint->break->p->addPoint->p->addPoint->p->addPoint->break->g->fillPolygon
BorderedComponent.ArrowIcon#getIconWidth()::: arrow icon get icon width:::return->getIconHeight
BorderedComponent.ArrowIcon#getIconHeight()::: arrow icon get icon height:::g->textLabel->getGraphics->if->h->g->textLabel->getFont->getFontMetrics->getAscent->if->return->else->return
BorderedComponent.LabeledBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the border for the specified component with the specified position and size.:::border->getBorder->if->if->border->paintBorder->return->grooveRect->new->Rectangle->labelDim->label->getPreferredSize->baseline->label->getBaseline->ascent->Math->max->descent->diff->insets->if->border->getBorderInsets->else->new->Insets->Math->max->justification->if->c->getComponentOrientation->isLeftToRight->else->switch->break->break->if->if->clipRect->new->Rectangle->saveClip->g->getClipBounds->clipRect->setBounds->if->computeIntersection->g->setClip->border->paintBorder->clipRect->setBounds->if->computeIntersection->g->setClip->border->paintBorder->clipRect->setBounds->if->computeIntersection->g->setClip->border->paintBorder->g->setClip->else->border->paintBorder->label->setLocation->label->setSize
BorderedComponent.LabeledBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::border->getBorder->if->if->getBorderInsets->else->i->border->getBorderInsets->else->if->return->label->getHeight->return
BorderedComponent.LabeledBorder#getLabel():::Returns the label of the labeled border.:::return
BorderedComponent.LabeledBorder#setLabel(JComponent):::Sets the title of the titled border:::
BorderedComponent.LabeledBorder#getMinimumSize(Component):::Returns the minimum dimensions this border requires in order to fully display the border and title.:::insets->getBorderInsets->minSize->new->Dimension->label->getWidth->return
BorderedComponent.LabeledBorder#computeIntersection(Rectangle, int, int, int, int)::: labeled border compute intersection:::x1->Math->max->x2->Math->min->y1->Math->max->y2->Math->min->if->return->return
BorderedComponent.FocusBorder#paintBorder(Component, Graphics, int, int, int, int)::: focus border paint border:::if->comp->hasFocus->color->g->getColor->g->setColor->BasicGraphicsUtils->drawDashedRect->g->setColor
BorderedComponent.FocusBorder#getBorderInsets(Component, Insets)::: focus border get border insets:::insets->set->return
BorderedComponent.FocusBorder#focusGained(FocusEvent)::: focus border focus gained:::comp->repaint
BorderedComponent.FocusBorder#focusLost(FocusEvent)::: focus border focus lost:::e->isTemporary->if->comp->repaint
ClassTab#getTabName()::: class tab get tab name:::return
ClassTab#actionPerformed(ActionEvent)::: class tab action performed:::b->verboseCheckBox->isSelected->new->Runnable->workerAdd
ClassTab#newSwingWorker()::: class tab new swing worker:::proxyClient->vmPanel->getProxyClient->if->proxyClient->addWeakPropertyChangeListener->return->new->SwingWorker<Boolean,Object>
ClassTab#getOverviewPanels()::: class tab get overview panels:::if->new->ClassOverviewPanel->return->new->OverviewPanelArr
ClassTab.ClassOverviewPanel#updateClassInfo(long, long)::: class overview panel update class info:::unloaded->getInfoLabel->Resources->format->setText
ConnectDialog#revalidate()::: connect dialog revalidate:::disabledForeground->UIManager->getColor->if->UIManager->getColor->UIManager->getColor->ensureContrast->new->Color->UIManager->getColor->ensureContrast->if->remoteMessageLabel->setForeground->colorStr->String->hintTextColor->getRGB->format->remoteMessageLabel->setText->if->localMessageLabel->setForeground->valueChanged->super->revalidate
ConnectDialog#createActions()::: connect dialog create actions:::new->AbstractAction->new->AbstractAction
ConnectDialog#getLabelWidth(String)::: connect dialog get label width:::tmpLabel->setText->return->tmpLabel->getPreferredSize->getWidth
ConnectDialog.LocalTabJTable#getToolTipText(MouseEvent)::: local tab table get tool tip text:::tip->p->e->getPoint->rowIndex->rowAtPoint->colIndex->columnAtPoint->realColumnIndex->convertColumnIndexToModel->if->vmd->vmModel->vmAt->vmd->toString->return
ConnectDialog.LocalTabJTable#getCellRenderer(int, int)::: local tab table get cell renderer:::return->new->DefaultTableCellRenderer
ConnectDialog#setConnectionParameters(String, String, int, String, String, String)::: connect dialog set connection parameters:::if->url->length->host->length->remoteRadioButton->setSelected->if->url->length->remoteTF->setText->else->remoteTF->setText->userNameTF->setText->passwordTF->setText->statusBar->setText->if->getPreferredSize->getWidth->pack->remoteTF->requestFocus->remoteTF->selectAll
ConnectDialog#itemStateChanged(ItemEvent)::: connect dialog item state changed:::if->localRadioButton->isSelected->vmTable->getSelectionModel->clearSelection->updateButtonStates
ConnectDialog#updateButtonStates()::: connect dialog update button states:::connectEnabled->if->remoteRadioButton->isSelected->JConsole->remoteTF->getText->isValidRemoteString->else->if->localRadioButton->isSelected->row->vmTable->getSelectedRow->if->lvm->vmModel->vmAt->lvm->isManageable->lvm->isAttachable->connectAction->setEnabled
ConnectDialog#insertUpdate(DocumentEvent)::: connect dialog insert update:::updateButtonStates
ConnectDialog#removeUpdate(DocumentEvent)::: connect dialog remove update:::updateButtonStates
ConnectDialog#changedUpdate(DocumentEvent)::: connect dialog changed update:::updateButtonStates
ConnectDialog#focusGained(FocusEvent)::: connect dialog focus gained:::source->e->getSource->opposite->e->getOppositeComponent->if->e->isTemporary->SwingUtilities->getRootPane->getRootPane->selectAll->if->remoteRadioButton->setSelected->else->if->localRadioButton->setSelected->if->vmModel->getRowCount->vmTable->setRowSelectionInterval->updateButtonStates
ConnectDialog#focusLost(FocusEvent)::: connect dialog focus lost:::
ConnectDialog#keyTyped(KeyEvent)::: connect dialog key typed:::c->e->getKeyChar->if->setVisible->else->if->Character->isDigit->getToolkit->beep->e->consume
ConnectDialog#setVisible(boolean)::: connect dialog set visible:::wasVisible->isVisible->super->setVisible->if->SwingUtilities->new->Runnable->invokeLater
ConnectDialog#keyPressed(KeyEvent)::: connect dialog key pressed:::
ConnectDialog#keyReleased(KeyEvent)::: connect dialog key released:::
ConnectDialog#valueChanged(ListSelectionEvent)::: connect dialog value changed:::updateButtonStates->labelText->row->vmTable->getSelectedRow->if->lvm->vmModel->vmAt->if->lvm->isManageable->if->lvm->isAttachable->else->colorStr->String->hintTextColor->getRGB->format->localMessageLabel->setText
ConnectDialog#refresh()::: connect dialog refresh:::if->selected->row->vmTable->getSelectedRow->if->vmModel->vmAt->vmModel->refresh->selectRow->n->vmModel->getRowCount->if->for->i->if->vmTable->setRowSelectionInterval->else->vmTable->getSelectionModel->clearSelection->dim->vmTable->getPreferredSize->Math->min->localTableScrollPane->setVerticalScrollBarPolicy->localTableScrollPane->getViewport->setMinimumSize->localTableScrollPane->getViewport->setPreferredSize->pack->setLocationRelativeTo
ConnectDialog.ManagedVmTableModel#getColumnCount()::: managed vm table model get column count:::return
ConnectDialog.ManagedVmTableModel#getColumnName(int)::: managed vm table model get column name:::return
ConnectDialog.ManagedVmTableModel#getRowCount()::: managed vm table model get row count:::return->vmList->size
ConnectDialog.ManagedVmTableModel#getValueAt(int, int)::: managed vm table model get value at:::vm->vmList->get->switch->return->vm->displayName->return->vm->vmid->return
ConnectDialog.ManagedVmTableModel#getColumnClass(int)::: managed vm table model get column class:::switch->return->return->return->super->getColumnClass
ConnectDialog.ManagedVmTableModel#vmAt(int)::: managed vm table model vm at:::return->vmList->get
ConnectDialog.ManagedVmTableModel#refresh()::: managed vm table model refresh:::map->LocalVirtualMachine->getAllVirtualMachines->new->ArrayList<LocalVirtualMachine>->vmList->map->values->addAll->fireTableDataChanged
ConnectDialog.Padder#getPreferredSize()::: padder get preferred size:::r->getTextRectangle->w->return->new->Dimension
ConnectDialog.Padder#getTextRectangle(AbstractButton)::: padder get text rectangle:::text->button->getText->icon->button->isEnabled->button->getIcon->button->getDisabledIcon->if->button->getUI->button->getUI->getDefaultIcon->if->return->paintIconR->new->Rectangle->paintTextR->new->Rectangle->paintViewR->new->Rectangle->paintViewInsets->new->Insets->button->getInsets->button->getWidth->button->getHeight->g->button->getGraphics->if->return->SwingUtilities->g->getFontMetrics->button->getVerticalAlignment->button->getHorizontalAlignment->button->getVerticalTextPosition->button->getHorizontalTextPosition->button->getIconTextGap->layoutCompoundLabel->return
CreateMBeanDialog#updateConnections()::: create bean dialog update connections:::frames->jConsole->getInternalFrames->data->new->Comparator<ProxyClient>->new->TreeSet<ProxyClient>->if->frames->size->cp->jConsole->getContentPane->comp->cp->getLayout->getLayoutComponent->if->vmpanel->client->vmpanel->getProxyClient->if->client->hasPlatformMXBeans->data->add->else->foreach->client->f->getVMPanel->getProxyClient->if->client->hasPlatformMXBeans->data->add->connections->invalidate->connections->data->data->size->new->ProxyClientArr->toArray->new->DefaultComboBoxModel<ProxyClient>->setModel->connections->validate
CreateMBeanDialog#actionPerformed(ActionEvent)::: create bean dialog action performed:::setVisible->statusBar->setText->if->ev->getSource->new->Thread->start
CreateMBeanDialog#setVisible(boolean)::: create bean dialog set visible:::wasVisible->isVisible->if->setLocationRelativeTo->invalidate->updateConnections->validate->repaint->super->setVisible->if->SwingUtilities->new->Runnable->invokeLater
ExceptionSafePlugin#getTabs()::: exception safe plugin get tabs:::try->return->plugin->getTabs->catch->handleException->finally->return->new->HashMap<>
ExceptionSafePlugin#newSwingWorker()::: exception safe plugin new swing worker:::try->return->plugin->newSwingWorker->catch->handleException->finally->return
ExceptionSafePlugin#dispose()::: exception safe plugin dispose:::try->plugin->dispose->catch->handleException->finally
ExceptionSafePlugin#executeSwingWorker(SwingWorker)::: exception safe plugin execute swing worker:::try->sw->execute->catch->handleException->finally
ExceptionSafePlugin#handleException(Exception)::: exception safe plugin handle exception:::if->JConsole->isDebug->println->e->printStackTrace->else->if->showExceptionDialog
ExceptionSafePlugin#showExceptionDialog(Exception)::: exception safe plugin show exception dialog:::buttonTexts->message->String->plugin->getClass->getSimpleName->String->e->getMessage->valueOf->format->buttonIndex->JOptionPane->showOptionDialog->if->System->exit
Formatter#formatTime(long)::: formatter format time:::str->if->seconds->String->format->Resources->format->else->remaining->days->hours->minutes->if->Resources->format->else->if->Resources->format->else->Resources->format->return
Formatter#formatNanoTime(long)::: formatter format nano time:::ms->return->formatTime
Formatter#formatClockTime(long)::: formatter format clock time:::return->timeDF->format
Formatter#formatDate(long)::: formatter format date:::return->dateDF->format
Formatter#formatDateTime(long)::: formatter format date time:::return->dateDF->format->timeWithSecondsDF->format
Formatter#getDateTimeFormat(String)::: formatter get date time format:::dateStyle->timeStyle->if->dtfStr->startsWith->else->if->dtfStr->startsWith->else->if->dtfStr->startsWith->else->if->dtfStr->startsWith->if->dtfStr->endsWith->else->if->dtfStr->endsWith->else->if->dtfStr->endsWith->else->if->dtfStr->endsWith->if->return->DateFormat->getDateTimeInstance->else->if->dtfStr->length->return->new->SimpleDateFormat->else->return->DateFormat->getDateTimeInstance
Formatter#toExcelTime(long)::: formatter to excel time:::cal->new->GregorianCalendar->tmpCal->new->GregorianCalendar->tmpCal->setTimeInMillis->dst->tmpCal->get->if->cal->set->millisSince1900->cal->getTimeInMillis->value->return
Formatter#formatKByteStrings(long...)::: formatter format byte strings:::n->for->i->strings->formatLongs->for->i->return
Formatter#formatKBytes(long)::: formatter format bytes:::if->return->Resources->format->kb->return->Resources->justify->format
Formatter#formatBytes(long, boolean)::: formatter format bytes:::return->formatBytes
Formatter#formatBytes(long, long)::: formatter format bytes:::return->formatBytes
Formatter#formatBytes(long, long, boolean)::: formatter format bytes:::s->exp->Math->log10->if->Resources->format->else->if->Resources->Math->pow->trimDouble->format->else->if->Resources->Math->pow->trimDouble->format->else->Resources->Math->pow->trimDouble->format->if->s->replace->return
Formatter#trimDouble(double)::: formatter trim double:::s->String->format->if->s->length->s->endsWith->s->s->length->substring->return
Formatter#formatLong(long)::: formatter format long:::return->String->format
Formatter#formatLongs(long...)::: formatter format longs:::n->size->strings->new->StringArr->for->i->for->i->return
Formatter#justify(long, int)::: formatter justify:::return->formatLong->justify
Formatter#justify(String, int)::: formatter justify:::sb->new->StringBuilder->sb->append->n->str->length->for->i->sb->append->sb->append->return->sb->toString
Formatter#newRow(String, String)::: formatter new row:::return->newRow
Formatter#newRow(String, String, int)::: formatter new row:::if->else->return
Formatter#newRow(String, String, String, String)::: formatter new row:::return
HTMLPane#setHasSelection(boolean)::: pane set has selection:::
HTMLPane#getHasSelection()::: pane get has selection:::return
HTMLPane#setText(String)::: pane set text:::if->getHasSelection->textColor->String->getForeground->getRGB->format->super->setText
InternalDialog#setLocationRelativeTo(Component)::: internal dialog set location relative to:::c->getWidth->getWidth->c->getHeight->getHeight->setLocation
InternalDialog.MastheadIcon#paintIcon(Component, Graphics, int, int)::: masthead icon paint icon:::g->create->width->c->getWidth->lWidth->leftIcon->getIconWidth->rWidth->rightIcon->getIconWidth->height->getIconHeight->textHeight->g->getFontMetrics->getAscent->g->setColor->g->fillRect->leftIcon->paintIcon->rightIcon->paintIcon->g->setFont->setRenderingHint->g->new->Color->setColor->g->drawString
InternalDialog.MastheadIcon#getIconWidth()::: masthead icon get icon width:::textWidth->g->getGraphics->if->fm->g->getFontMetrics->if->fm->stringWidth->return->leftIcon->getIconWidth->rightIcon->getIconWidth
InternalDialog.MastheadIcon#getIconHeight()::: masthead icon get icon height:::return->leftIcon->getIconHeight
JConsole#updateLafValues()::: console update laf values:::lafName->UIManager->getLookAndFeel->getClass->getName->lafName->equals->lafName->equals
JConsole#getDesktopPane()::: console get desktop pane:::return
JConsole#getInternalFrames()::: console get internal frames:::return
JConsole#createMDI()::: console create i:::setTitle->cp->getContentPane->oldCenter->cp->getLayout->getLayoutComponent->new->WindowMenu->windowMenu->Resources->getMnemonicInt->setMnemonic->menuBar->menuBar->getComponentCount->add->new->JDesktopPane->desktop->new->Color->setBackground->cp->add->if->addFrame
JConsole.WindowMenu#add(VMInternalFrame)::: window menu add:::if->getMenuComponentCount->addSeparator->index->position->n->for->i->if->newArray->new->VMInternalFrameArr->System->arraycopy->indexString->vmName->vmIF->getVMPanel->getDisplayName->text->SwingUtilities->getGraphics->getFont->getFontMetrics->layoutCompoundLabel->mi->new->JMenuItem->if->text->endsWith->mi->setToolTipText->nDigits->indexString->length->mi->indexString->charAt->setMnemonic->mi->setDisplayedMnemonicIndex->mi->putClientProperty->mi->addActionListener->vmIF->putClientProperty->add
JConsole.WindowMenu#remove(VMInternalFrame)::: window menu remove:::for->i->mi->vmIF->getClientProperty->remove->mi->putClientProperty->vmIF->putClientProperty->if->getMenuComponentCount->getMenuComponentCount->getMenuComponent->remove
JConsole#actionPerformed(ActionEvent)::: console action performed:::src->ev->getSource->if->showCreateMBeanDialog->if->vmPanel->vmIF->desktop->getSelectedFrame->if->getVMPanel->hostName->url->if->vmPanel->getHostName->if->vmPanel->getUrl->vmPanel->getUrl->showConnectDialog->else->if->tileWindows->else->if->cascadeWindows->else->if->foreach->try->vmIF->setIcon->catch->finally->else->if->foreach->try->vmIF->setIcon->catch->finally->else->if->System->exit->else->if->AboutDialog->browseUserGuide->else->if->AboutDialog->showAboutDialog->else->if->mi->vmIF->mi->getClientProperty->if->try->vmIF->setIcon->vmIF->setSelected->catch->finally->vmIF->moveToFront
JConsole#tileWindows()::: console tile windows:::w->h->n->foreach->if->vmIF->isIcon->if->try->vmIF->setMaximum->vmIF->getWidth->vmIF->getHeight->catch->finally->if->rows->Math->Math->sqrt->ceil->cols->if->x->y->col->foreach->if->vmIF->isIcon->try->vmIF->setMaximum->catch->finally->if->vmIF->setBounds->if->else
JConsole#cascadeWindows()::: console cascade windows:::n->w->h->foreach->if->vmIF->isIcon->try->vmIF->setMaximum->catch->finally->vmIF->pack->if->try->vmIF->getWidth->vmIF->getHeight->vmIF->setMaximum->vmIF->getWidth->vmIF->getHeight->vmIF->pack->catch->finally->x->y->dX->dY->foreach->if->vmIF->isIcon->vmIF->setLocation->vmIF->moveToFront
JConsole#addHost(String, int, String, String)::: console add host:::addHost
JConsole#addVmid(LocalVirtualMachine)::: console add vmid:::addVmid
JConsole#addVmid(LocalVirtualMachine, boolean)::: console add vmid:::new->Thread->start
JConsole#addUrl(String, String, String, boolean)::: console add url:::new->Thread->start
JConsole#addHost(String, int, String, String, boolean)::: console add host:::new->Thread->start
JConsole#addProxyClient(ProxyClient, boolean)::: console add proxy client:::SwingUtilities->new->Runnable->invokeLater
JConsole#failed(Exception, String, String, String)::: console failed:::SwingUtilities->new->Runnable->invokeLater
JConsole#addFrame(VMPanel)::: console add frame:::vmIF->new->VMInternalFrame->foreach->try->f->setMaximum->catch->finally->desktop->add->vmIF->setLocation->vmIF->setVisible->windows->add->if->windows->size->try->vmIF->setMaximum->catch->finally->vmIF->addInternalFrameListener->windowMenu->add->return
JConsole#showConnectDialog(String, String, int, String, String, String)::: console show connect dialog:::if->new->ConnectDialog->connectDialog->setConnectionParameters->connectDialog->refresh->connectDialog->setVisible->try->connectDialog->setSelected->catch->finally
JConsole#showCreateMBeanDialog()::: console show create bean dialog:::if->new->CreateMBeanDialog->createDialog->setVisible->try->createDialog->setSelected->catch->finally
JConsole#removeVMInternalFrame(VMInternalFrame)::: console remove internal frame:::windowMenu->remove->desktop->remove->desktop->repaint->vmIF->getVMPanel->cleanUp->vmIF->dispose
JConsole#isProxyClientUsed(ProxyClient)::: console is proxy client used:::foreach->cli->frame->getVMPanel->getProxyClient->if->return->return
JConsole#isValidRemoteString(String)::: console is valid remote string:::valid->if->txt->trim->if->txt->startsWith->if->txt->length->ROOT_URL->length->else->if->txt->startsWith->index->txt->indexOf->if->address->txt->substring->if->IPAddressUtil->isIPv6LiteralAddress->try->portStr->txt->substring->port->Integer->parseInt->if->catch->finally->else->s->txt->split->if->try->port->Integer->parseInt->if->catch->finally->return
JConsole#errorMessage(Exception)::: console error message:::msg->if->cause->c->ex->getCause->while->c->getCause->if->return->cause->getMessage->else->if->return->Resources->cause->getMessage->format->else->if->return->cause->getMessage->else->if->return->cause->getMessage->else->if->return->cause->getMessage->else->if->return->Resources->ex->getMessage->format->return->ex->getMessage
JConsole#internalFrameClosing(InternalFrameEvent)::: console internal frame closing:::vmIF->e->getInternalFrame->removeVMInternalFrame->windows->remove->client->vmIF->getVMPanel->getProxyClient->if->isProxyClientUsed->client->markAsDead->if->windows->size->showConnectDialog
JConsole#internalFrameOpened(InternalFrameEvent)::: console internal frame opened:::
JConsole#internalFrameClosed(InternalFrameEvent)::: console internal frame closed:::
JConsole#internalFrameIconified(InternalFrameEvent)::: console internal frame iconified:::
JConsole#internalFrameDeiconified(InternalFrameEvent)::: console internal frame deiconified:::
JConsole#internalFrameActivated(InternalFrameEvent)::: console internal frame activated:::
JConsole#internalFrameDeactivated(InternalFrameEvent)::: console internal frame deactivated:::
JConsole#usage()::: console usage:::Resources->format->println
JConsole#mainInit(List, List, List, List, ProxyClient, boolean, boolean)::: console main init:::SwingUtilities->new->Runnable->invokeLater
JConsole#main(String[])::: console main:::noTile->hotspot->argIndex->proxyClient->if->System->getProperty->OutputViewer->init->while->startsWith->arg->if->arg->equals->arg->equals->arg->equals->usage->return->else->if->arg->startsWith->try->Integer->arg->substring->parseInt->if->usage->return->catch->usage->return->finally->else->if->arg->equals->if->startsWith->else->usage->return->else->if->arg->equals->else->if->arg->equals->Version->print->return->else->if->arg->equals->else->if->arg->equals->Version->printFullVersion->return->else->usage->return->if->System->getProperty->urls->new->ArrayList<String>->hostNames->new->ArrayList<String>->ports->new->ArrayList<Integer>->vms->new->ArrayList<LocalVirtualMachine>->for->i->mainInit
JConsole#isDebug()::: console is debug:::return
JConsole#dbgStackTrace(Exception)::: console dbg stack trace:::if->ex->printStackTrace
JConsole#isLocalAttachAvailable():::local attach is supported in this implementation as jdk.jconsole requires jdk.attach and jdk.management.agent:::return
JConsole#getPlugins()::: console get plugins:::if->initPluginService->else->pluginService->reload->plugins->new->ArrayList<JConsolePlugin>->foreach->plugins->add->return
JConsole#initPluginService(String)::: console init plugin service:::if->pluginPath->length->try->pluginCL->pathToURLs->new->URLClassLoader->plugins->ServiceLoader->load->foreach->if->isDebug->p->getClass->println->catch->Resources->e->getMessage->format->println->if->JConsole->isDebug->e->printStackTrace->Resources->e->getMessage->format->println->finally->if->initEmptyPlugin
JConsole#initEmptyPlugin()::: console init empty plugin:::pluginCL->new->URLArr->new->URLClassLoader->ServiceLoader->load
JConsole#pathToURLs(String):::Utility method for converting a search path string to an array of directory and JAR file URLs.:::names->path->split->urls->new->URLArr->count->foreach->url->new->File->fileToURL->return
JConsole#fileToURL(File):::Returns the directory or JAR file URL corresponding to the specified local file name.:::name->try->file->getCanonicalPath->catch->file->getAbsolutePath->finally->name->replace->if->name->startsWith->if->file->isFile->return->new->URL
JConsole.FixedJRootPane#updateUI()::: fixed root pane update i:::updateLafValues->super->updateUI
JConsole.FixedJRootPane#revalidate():::The revalidate method seems to be the only one that gets called whenever there is a change of L&F or change of theme in Windows L&F and GTK L&F.:::UIManager->put->border->UIManager->getBorder->if->highlight->UIManager->getColor->shadow->UIManager->getColor->new->BorderUIResource.EtchedBorderUIResource->UIManager->put->if->UIManager->UIManager->getColor->put->UIManager->UIManager->getFont->put->super->revalidate
LabeledComponent#setLabel(String)::: labeled component set label:::updateLabel
LabeledComponent#setValueLabel(String)::: labeled component set value label:::updateLabel
LabeledComponent#updateLabel()::: labeled component update label:::str->label->setText->container->getParent->LabeledComponent->layout
LabeledComponent#layout(Container)::: labeled component layout:::wMax->foreach->container->getComponents->if->lc->setPreferredSize->w->getPreferredSize->if->foreach->container->getComponents->if->lc->label->h->label->getPreferredSize->label->new->Dimension->setPreferredSize->label->setHorizontalAlignment
LocalVirtualMachine#getDisplayName(String)::: local virtual machine get display name:::res->commandLine->split->if->endsWith->jarfile->new->File->displayName->jarfile->getName->if->return->return
LocalVirtualMachine#vmid()::: local virtual machine vmid:::return
LocalVirtualMachine#isManageable()::: local virtual machine is manageable:::return
LocalVirtualMachine#isAttachable()::: local virtual machine is attachable:::return
LocalVirtualMachine#startManagementAgent()::: local virtual machine start management agent:::if->return->if->isAttachable->throw->new->IOException->loadManagementAgent->if->throw->new->IOException
LocalVirtualMachine#connectorAddress()::: local virtual machine connector address:::return
LocalVirtualMachine#displayName()::: local virtual machine display name:::return
LocalVirtualMachine#toString()::: local virtual machine to string:::return
LocalVirtualMachine#getAllVirtualMachines()::: local virtual machine get all virtual machines:::map->new->HashMap<Integer,LocalVirtualMachine>->getMonitoredVMs->getAttachableVMs->return
LocalVirtualMachine#getMonitoredVMs(Map)::: local virtual machine get monitored ms:::host->vms->try->MonitoredHost->new->HostIdentifier->getMonitoredHost->host->activeVms->catch->throw->x->getMessage->new->InternalError->finally->foreach->if->pid->intValue->name->vmid->toString->attachable->address->try->mvm->host->new->VmIdentifier->getMonitoredVm->MonitoredVmUtil->commandLine->MonitoredVmUtil->isAttachable->ConnectorAddressLink->importFrom->mvm->detach->catch->finally->map->new->LocalVirtualMachine->put
LocalVirtualMachine#getAttachableVMs(Map)::: local virtual machine get attachable ms:::vms->VirtualMachine->list->foreach->try->vmid->Integer->vmd->id->valueOf->if->map->containsKey->attachable->address->try->vm->VirtualMachine->attach->agentProps->vm->getAgentProperties->agentProps->get->vm->detach->catch->finally->map->vmid->intValue->vmd->displayName->new->LocalVirtualMachine->put->catch->finally
LocalVirtualMachine#getLocalVirtualMachine(int)::: local virtual machine get local virtual machine:::map->getAllVirtualMachines->lvm->map->get->if->attachable->address->name->String->valueOf->try->vm->VirtualMachine->attach->agentProps->vm->getAgentProperties->agentProps->get->vm->detach->new->LocalVirtualMachine->catch->if->JConsole->isDebug->x->printStackTrace->if->JConsole->isDebug->x->printStackTrace->finally->return
LocalVirtualMachine#loadManagementAgent()::: local virtual machine load management agent:::vm->name->String->valueOf->try->VirtualMachine->attach->catch->ioe->x->getMessage->new->IOException->ioe->initCause->throw->finally->vm->startLocalManagementAgent->agentProps->vm->getAgentProperties->agentProps->get->vm->detach
MaximizableInternalFrame#init()::: maximizable internal frame init:::getBorder->normalBorder->getClass->getName->endsWith->if->setRootPaneCheckingEnabled->getUI->getNorthPane->if->new->PropertyChangeListener->addPropertyChangeListener->else->if->removePropertyChangeListener
MaximizableInternalFrame#updateFrame()::: maximizable internal frame update frame:::mainFrame->if->getMainFrame->return->menuBar->getMainMenuBar->ui->getUI->if->isMaximum->isIcon->isClosed->if->ui->getNorthPane->mainFrame->getTitle->mainFrame->getTitle->setTitle->if->updateButtonStates->menuBar->Box->createGlue->add->foreach->titlePane->getComponents->if->menuBar->add->else->if->menuBar->Box->createHorizontalStrut->add->menuBar->add->menuBar->Box->createHorizontalStrut->add->ui->setNorthPane->setBorder->else->if->ui->getNorthPane->mainFrame->setTitle->if->foreach->menuBar->getComponents->if->titlePane->add->else->if->menuBar->remove->menuBar->repaint->updateButtonStates->ui->setNorthPane->setBorder
MaximizableInternalFrame#updateUI()::: maximizable internal frame update i:::isMax->getBorder->if->try->setMaximum->catch->finally->super->updateUI->init->if->try->setMaximum->catch->finally
MaximizableInternalFrame#getMainFrame()::: maximizable internal frame get main frame:::if->desktop->getDesktopPane->if->SwingUtilities->getWindowAncestor->return
MaximizableInternalFrame#getMainMenuBar()::: maximizable internal frame get main menu bar:::if->mainFrame->getMainFrame->if->mainFrame->getJMenuBar->if->mainMenuBar->getLayout->mainMenuBar->new->FixedMenuBarLayout->setLayout->return
MaximizableInternalFrame#setTitle(String)::: maximizable internal frame set title:::if->isMaximum->if->getMainFrame->getMainFrame->setTitle->super->setTitle
MaximizableInternalFrame.FixedMenuBarLayout#layoutContainer(Container)::: fixed menu bar layout layout container:::super->layoutContainer->foreach->target->getComponents->if->y->target->getHeight->c->getHeight->c->c->getX->Math->max->setLocation
MaximizableInternalFrame.MDIButtonIcon#paintIcon(Component, Graphics, int, int)::: button icon paint icon:::if->try->v->part->get->if->c->getParent->if->part->set->else->if->part->set->else->if->part->set->else->if->part->set->else->if->part->set->else->if->part->set->catch->if->ex->printStackTrace->finally->windowsIcon->paintIcon
MaximizableInternalFrame.MDIButtonIcon#getIconWidth()::: button icon get icon width:::return->windowsIcon->getIconWidth
MaximizableInternalFrame.MDIButtonIcon#getIconHeight()::: button icon get icon height:::return->windowsIcon->getIconHeight
MaximizableInternalFrame#updateButtonStates()::: maximizable internal frame update button states:::try->if->cls->titlePane->getClass->superCls->cls->getSuperclass->cls->getDeclaredMethod->superCls->getDeclaredMethod->setButtonIcons->setAccessible->enableActions->setAccessible->setButtonIcons->invoke->enableActions->invoke->catch->if->ex->printStackTrace->finally
MBeansTab#getTabName()::: beans tab get tab name:::return
MBeansTab#getDataViewer()::: beans tab get data viewer:::return
MBeansTab#getTree()::: beans tab get tree:::return
MBeansTab#getSheet()::: beans tab get sheet:::return
MBeansTab#dispose()::: beans tab dispose:::super->dispose->sheet->dispose
MBeansTab#getUpdateInterval()::: beans tab get update interval:::return->vmPanel->getUpdateInterval
MBeansTab#buildMBeanServerView()::: beans tab build bean server view:::new->SwingWorker<Set<ObjectName>,Void>->execute
MBeansTab#getMBeanServerConnection()::: beans tab get bean server connection:::return->vmPanel->getProxyClient->getMBeanServerConnection
MBeansTab#getSnapshotMBeanServerConnection()::: beans tab get snapshot bean server connection:::return->vmPanel->getProxyClient->getSnapshotMBeanServerConnection
MBeansTab#update()::: beans tab update:::try->getMBeanServerConnection->getDefaultDomain->catch->vmPanel->getProxyClient->markAsDead->finally
MBeansTab#setupTab()::: beans tab setup tab:::new->BorderLayout->setLayout->mainSplit->new->JSplitPane->mainSplit->setDividerLocation->mainSplit->BorderFactory->createEmptyBorder->setBorder->new->XTree->tree->new->XTreeRenderer->setCellRenderer->tree->getSelectionModel->setSelectionMode->tree->addTreeSelectionListener->tree->addTreeWillExpandListener->tree->addMouseListener->theScrollPane->new->JScrollPane->treePanel->new->BorderLayout->new->JPanel->treePanel->add->mainSplit->add->new->XDataViewer->new->XSheet->mainSplit->add->add
MBeansTab#handleNotification(Notification, Object)::: beans tab handle notification:::EventQueue->new->Runnable->invokeLater
MBeansTab#propertyChange(PropertyChangeEvent)::: beans tab property change:::if->evt->getPropertyName->equals->connected->evt->getNewValue->if->buildMBeanServerView->else->sheet->dispose
MBeansTab#valueChanged(TreeSelectionEvent)::: beans tab value changed:::node->tree->getLastSelectedPathComponent->sheet->displayNode
MBeansTab#treeWillExpand(TreeExpansionEvent)::: beans tab tree will expand:::path->e->getPath->if->tree->hasBeenExpanded->node->path->getLastPathComponent->if->sheet->isMBeanNode->tree->hasMetadataNodes->tree->addMetadataNodes
MBeansTab#treeWillCollapse(TreeExpansionEvent)::: beans tab tree will collapse:::
MemoryPoolProxy#isCollectedMemoryPool()::: memory pool proxy is collected memory pool:::return->gcMBeans->size
MemoryPoolProxy#getStat()::: memory pool proxy get stat:::usageThreshold->pool->isUsageThresholdSupported->pool->getUsageThreshold->collectThreshold->pool->isCollectionUsageThresholdSupported->pool->getCollectionUsageThreshold->lastGcStartTime->lastGcEndTime->beforeGcUsage->afterGcUsage->gcId->if->lastGcInfo->getId->lastGcInfo->getStartTime->lastGcInfo->getEndTime->lastGcInfo->getMemoryUsageBeforeGc->get->lastGcInfo->getMemoryUsageAfterGc->get->set->gcMBeans->entrySet->foreach->gc->client->e->getKey->getMXBean->gcCount->e->getValue->newCount->gc->getCollectionCount->if->gcMBeans->e->getKey->put->gc->getLastGcInfo->if->lastGcInfo->getEndTime->lastGcInfo->getId->lastGcInfo->getStartTime->lastGcInfo->getEndTime->lastGcInfo->getMemoryUsageBeforeGc->get->lastGcInfo->getMemoryUsageAfterGc->get->usage->pool->getUsage->return->new->MemoryPoolStat
MemoryPoolStat#getPoolName():::Returns the memory pool name.:::return
MemoryPoolStat#getUsage():::Returns the current memory usage.:::return
MemoryPoolStat#getUsageThreshold():::Returns the current usage threshold:::return
MemoryPoolStat#getCollectionUsageThreshold():::Returns the current collection usage threshold:::return
MemoryPoolStat#getLastGcId():::Returns the Id of GC.:::return
MemoryPoolStat#getLastGcStartTime():::Returns the start time of the most recent GC on the memory pool for this statistics in milliseconds:::return
MemoryPoolStat#getLastGcEndTime():::Returns the end time of the most recent GC on the memory pool for this statistics in milliseconds:::return
MemoryPoolStat#getBeforeGcUsage():::Returns the memory usage before the most recent GC started:::return
MemoryPoolStat#getAfterGcUsage():::Returns the memory usage after the most recent GC finished:::return
MemoryTab#getTabName()::: memory tab get tab name:::return
MemoryTab#createPlotters()::: memory tab create plotters:::new->ArrayList<Plotter>->proxyClient->vmPanel->getProxyClient->new->Plotter->proxyClient->addWeakPropertyChangeListener->new->Plotter->setAccessibleName->setAccessibleName->proxyClient->addWeakPropertyChangeListener->heapPlotter->createSequence->heapPlotter->createSequence->heapPlotter->createSequence->nonHeapPlotter->createSequence->nonHeapPlotter->createSequence->nonHeapPlotter->createSequence->plotterList->add->plotterList->add->mBeanMap->proxyClient->getMBeans->keys->mBeanMap->keySet->objectNames->keys->keys->size->new->ObjectNameArr->toArray->nonHeapPlotters->new->ArrayList<PoolPlotter>->foreach->type->objectName->getKeyProperty->if->type->equals->name->Resources->objectName->getKeyProperty->format->isHeap->al->proxyClient->new->StringArr->getAttributes->if->al->size->name->al->get->getValue->equals->poolPlotter->new->PoolPlotter->proxyClient->addWeakPropertyChangeListener->poolPlotter->createSequence->poolPlotter->createSequence->poolPlotter->createSequence->poolPlotter->createSequence->poolPlotter->setUseDashedTransitions->if->plotterList->add->else->nonHeapPlotters->add->foreach->plotterList->add
MemoryTab#itemStateChanged(ItemEvent)::: memory tab item state changed:::if->ev->getStateChange->plotter->plotterChoice->getSelectedItem->plotterPanel->setPlotter->plotterPanel->repaint
MemoryTab#gc()::: memory tab gc:::new->Thread->start
MemoryTab#newSwingWorker()::: memory tab new swing worker:::return->new->SwingWorker<Boolean,Object>
MemoryTab#formatDetails()::: memory tab format details:::proxyClient->vmPanel->getProxyClient->if->proxyClient->isDead->return->text->plotter->plotterChoice->getSelectedItem->if->return->time->System->currentTimeMillis->timeStamp->formatDateTime->newRow->used->plotter->getLastValue->committed->plotter->getLastValue->max->plotter->getLastValue->threshold->plotter->getLastValue->formatKBytes->newRow->if->formatKBytes->newRow->if->formatKBytes->newRow->if->formatKBytes->newRow->try->garbageCollectors->proxyClient->getGarbageCollectorMXBeans->descPrinted->foreach->gcName->garbageCollectorMBean->getName->gcCount->garbageCollectorMBean->getCollectionCount->gcTime->garbageCollectorMBean->getCollectionTime->str->Resources->formatTime->justify->String->format->format->if->newRow->else->newRow->catch->finally->return
MemoryTab#actionPerformed(ActionEvent)::: memory tab action performed:::src->ev->getSource->if->gc
MemoryTab.PoolPlotter#toString()::: pool plotter to string:::return
MemoryTab.PoolChart#setValue(int, PoolPlotter, long, long, long)::: pool chart set value:::if->poolPlotters->size->poolPlotters->add->if->else->else->poolPlotters->set->repaint
MemoryTab.PoolChart#paintPoolBar(Graphics, PoolPlotter)::: pool chart paint pool bar:::barRect->getBarRect->g->setColor->g->drawRect->value->max->if->g->translate->g->setColor->g->fillRect->greenHeight->threshold->if->redHeight->g->setColor->g->fillRect->if->g->setColor->g->fillRect->g->setColor->g->fillRect->g->translate
MemoryTab.PoolChart#paintComponent(Graphics)::: pool chart paint component:::super->paintComponent->if->poolPlotters->size->return->if->g->getFont->deriveFont->g->getBackground->setColor->r->g->getClipBounds->g->fillRect->g->setFont->fm->g->getFontMetrics->fontDescent->fm->getDescent->g->getForeground->setColor->foreach->new->intArr->str->g->fm->stringWidth->drawString->foreach->paintPoolBar->g->setColor->g->drawRect->g->drawRect->heapColor->nonHeapColor->foreach->if->if->else->g->setColor->g->fillRect->g->setColor->g->fillRect->str->stringWidth->fm->stringWidth->x->y->g->setColor->g->drawString->g->drawString->g->drawString->g->drawString->g->setColor->g->drawString->fm->stringWidth->g->setColor->g->drawString->g->drawString->g->drawString->g->drawString->g->setColor->g->drawString->g->setColor->plotter->plotterChoice->getSelectedItem->if->else->if->else->if->getBarRect->if->g->drawRect
MemoryTab.PoolChart#getBarRect(PoolPlotter)::: pool chart get bar rect:::return->new->Rectangle
MemoryTab.PoolChart#getPreferredSize()::: pool chart get preferred size:::return->new->Dimension
MemoryTab.PoolChart#mouseClicked(MouseEvent)::: pool chart mouse clicked:::requestFocusInWindow->plotter->getPlotter->if->plotterChoice->getSelectedItem->plotterChoice->setSelectedItem->repaint
MemoryTab.PoolChart#getToolTipText(MouseEvent)::: pool chart get tool tip text:::plotter->getPlotter->return->plotter->toString
MemoryTab.PoolChart#getPlotter(MouseEvent)::: pool chart get plotter:::p->e->getPoint->plotter->if->heapRect->contains->else->if->nonHeapRect->contains->else->foreach->if->getBarRect->contains->break->return
MemoryTab.PoolChart#mousePressed(MouseEvent)::: pool chart mouse pressed:::
MemoryTab.PoolChart#mouseReleased(MouseEvent)::: pool chart mouse released:::
MemoryTab.PoolChart#mouseEntered(MouseEvent)::: pool chart mouse entered:::
MemoryTab.PoolChart#mouseExited(MouseEvent)::: pool chart mouse exited:::
MemoryTab.PoolChart#getAccessibleContext()::: pool chart get accessible context:::if->new->AccessiblePoolChart->return
MemoryTab.PoolChart.AccessiblePoolChart#getAccessibleName()::: accessible pool chart get accessible name:::name->keyValueList->foreach->value->Resources->poolPlotter->toString->format->if->threshold->if->Resources->format->else->Resources->format->return
MemoryTab#getOverviewPanels()::: memory tab get overview panels:::if->new->MemoryOverviewPanel->return->new->OverviewPanelArr
MemoryTab.MemoryOverviewPanel#updateMemoryInfo(long, long, long)::: memory overview panel update memory info:::getInfoLabel->Resources->formatBytes->formatBytes->formatBytes->format->setText
OutputViewer#init()::: output viewer init:::
OutputViewer#append(String)::: output viewer append:::if->new->JFrame->new->JTextArea->ta->setEditable->frame->getContentPane->new->JScrollPane->add->ta->new->Font->setFont->frame->setSize->frame->setLocation->frame->new->WindowAdapter->addWindowListener->ta->append->ta->ta->getText->length->setCaretPosition->frame->setVisible
OutputViewer#appendln(String)::: output viewer appendln:::append
OutputViewer.PipeListener#create(String)::: pipe listener create:::return->new->PipeListener
OutputViewer.PipeListener#run()::: pipe listener run:::try->str->while->br->readLine->appendln->try->f->getDeclaredField->f->setAccessible->f->set->catch->appendln->finally->appendln->br->close->catch->appendln->finally
OverviewPanel#getInfoLabel()::: overview panel get info label:::if->new->JLabel->if->southPanel->new->BorderLayout->new->JPanel->separator->new->JSeparator->southPanel->add->southPanel->add->add->else->add->return
OverviewTab#getTabName()::: overview tab get tab name:::return
OverviewTab#newSwingWorker()::: overview tab new swing worker:::return->new->SwingWorker<Object,Object>
OverviewTab.AutoGridLayout#preferredLayoutSize(Container)::: auto grid layout preferred layout size:::return->minimumLayoutSize
OverviewTab.AutoGridLayout#minimumLayoutSize(Container)::: auto grid layout minimum layout size:::updateColumns->return->super->minimumLayoutSize
OverviewTab.AutoGridLayout#updateColumns(Container)::: auto grid layout update columns:::parentWidth->OverviewTab.this->getWidth->columnWidth->foreach->parent->getComponents->Math->c->getPreferredSize->max->n->parent->getComponentCount->maxCols->Math->min->for->columns
Plotter#setUnit(Unit)::: plotter set unit:::
Plotter#setDecimals(int)::: plotter set decimals:::Math->pow
Plotter#createSequence(String, String, Color, boolean)::: plotter create sequence:::seq->getSequence->if->new->Sequence->seqs->add
Plotter#setUseDashedTransitions(String, boolean)::: plotter set use dashed transitions:::seq->getSequence->if->getDashedStroke
Plotter#setIsPlotted(String, boolean)::: plotter set is plotted:::seq->getSequence->if
Plotter#addValues(long, long...)::: plotter add values:::times->add->for->i->repaint
Plotter#getSequence(String)::: plotter get sequence:::foreach->if->equals->return->return
Plotter#getViewRange()::: plotter get view range:::return
Plotter#setViewRange(int)::: plotter set view range:::if->oldValue->firePropertyChange->if->for->i->repaint
Plotter#getComponentPopupMenu()::: plotter get component popup menu:::if->new->JPopupMenu->new->JMenu->timeRangeMenu->Resources->getMnemonicInt->setMnemonic->popupMenu->add->new->JRadioButtonMenuItemArr->rbGroup->new->ButtonGroup->for->i->popupMenu->addSeparator->new->JMenuItem->saveAsMI->Resources->getMnemonicInt->setMnemonic->saveAsMI->addActionListener->popupMenu->add->return
Plotter#actionPerformed(ActionEvent)::: plotter action performed:::src->ev->getSource->if->saveAs->else->index->timeRangeMenu->getPopupMenu->getComponentIndex->setViewRange
Plotter#saveAs()::: plotter save as:::if->new->SaveDataFileChooser->ret->saveFC->showSaveDialog->if->saveFC->getSelectedFile->saveDataToFile
Plotter#saveDataToFile(File)::: plotter save data to file:::try->out->new->FileOutputStream->new->PrintStream->out->print->foreach->out->print->out->println->if->seqs->size->seqs->get->for->i->seqs->get->out->close->JOptionPane->Resources->file->getAbsolutePath->file->length->format->showMessageDialog->catch->msg->ex->getLocalizedMessage->path->file->getAbsolutePath->if->msg->startsWith->msg->path->length->substring->trim->JOptionPane->Resources->format->showMessageDialog->finally
Plotter#paintComponent(Graphics)::: plotter paint component:::super->paintComponent->width->getWidth->height->getHeight->if->return->oldColor->g->getColor->oldFont->g->getFont->fg->getForeground->bg->getBackground->bgIsLight->bg->getRed->bg->getGreen->bg->getBlue->setRenderingHint->if->oldFont->deriveFont->getWidth->getHeight->if->getBackground->brighter->brighter->getBackground->brighter->getBackground->darker->darker->getBackground->darker->new->BevelBorder->border->paintBorder->g->setColor->g->fillRect->g->setColor->tMin->tMax->vMin->vMax->w->getWidth->h->getHeight->if->Math->times->time->min->Math->times->time->max->viewRangeMS->if->else->Math->max->foreach->if->for->i->else->if->break->normalizeMax->if->if->else->normalizeMin->g->setColor->x->y->fm->g->getFontMetrics->g->drawLine->n->if->startsWith->else->if->startsWith->else->if->startsWith->else->if->startsWith->else->if->startsWith->else->if->startsWith->else->if->startsWith->tickValues->new->ArrayList<Long>->tickValues->add->for->i->tickValues->add->tickValues->size->tickStrings->new->StringArr->for->i->if->trimLast->removedDecimalPoint->do->foreach->if->str->endsWith->str->endsWith->break->if->if->endsWith->for->i->while->lastY->for->i->g->drawLine->t1->if->System->currentTimeMillis->tz->timeDF->getTimeZone->getOffset->tickInterval->calculateTickInterval->if->calculateTickInterval->t0->while->g->drawLine->t->str->formatClockTime->g->drawString->if->formatDate->g->drawString->g->setColor->g->drawLine->g->setColor->start->nValues->nLists->seqs->size->if->seqs->get->if->g->setColor->return->else->seq->seqs->get->for->p->pointsPerPixel->if->for->i->valueStringSlots->new->intArr->for->i->for->i->g->setColor
Plotter#checkLeftMargin(int)::: plotter check left margin:::if->SwingUtilities->getWindowAncestor->repaint->return->return
Plotter#checkRightMargin(int)::: plotter check right margin:::if->SwingUtilities->getWindowAncestor->repaint->return->return
Plotter#getValueStringSlot(int[], int, int, int)::: plotter get value string slot:::for->s->return
Plotter#calculateTickInterval(int, int, long)::: plotter calculate tick interval:::tickInterval->if->else->if->else->if->else->if->else->if->else->if->else->if->else->if->else->if->else->normalizeMax->return
Plotter#normalizeMin(long)::: plotter normalize min:::exp->Math->log10->multiple->Math->pow->i->return
Plotter#normalizeMax(long)::: plotter normalize max:::exp->Math->log10->multiple->Math->pow->i->return
Plotter#getFormattedValue(long, boolean)::: plotter get formatted value:::str->fmt->if->if->String->format->else->String->format->return
Plotter#getSizeString(long, long)::: plotter get size string:::s->if->formatBytes->else->getFormattedValue->return
Plotter#getDashedStroke()::: plotter get dashed stroke:::if->new->floatArr->new->BasicStroke->return
Plotter#extendArray(Object)::: plotter extend array:::n->Array->getLength->a2->Array->a1->getClass->getComponentType->newInstance->System->arraycopy->return
Plotter.TimeStamps#time(int):::Returns the time stamp for index i:::offset->for->j->return
Plotter.TimeStamps#add(long)::: time stamps add:::n->if->Arrays->copyOf->Arrays->copyOf->if->extendArray
Plotter.Sequence#value(int):::Returns the value at index i:::return->Array->getLong
Plotter.Sequence#add(long)::: sequence add:::if->la->Array->getLength->new->longArr->for->i->else->if->ia->Array->getLength->new->intArr->for->i->else->if->sa->Array->getLength->new->shortArr->for->i->if->Array->getLength->extendArray->if->else->if->else->if->else
Plotter#getValue()::: plotter get value:::return
Plotter#getLastTimeStamp()::: plotter get last time stamp:::return->times->time
Plotter#getLastValue(String)::: plotter get last value:::seq->getSequence->return->seq->value
Plotter#propertyChange(PropertyChangeEvent)::: plotter property change:::prop->ev->getPropertyName->if->newState->ev->getNewValue->switch->synchronized->time->System->currentTimeMillis->times->add->foreach->seq->add->break
Plotter.SaveDataFileChooser#approveSelection()::: save data file chooser approve selection:::file->getSelectedFile->if->filter->getFileFilter->if->extensions->getExtensions->goodExt->foreach->if->file->getName->toLowerCase->ext->toLowerCase->endsWith->break->if->file->getParent->file->getName->new->File->if->file->exists->okStr->cancelStr->ret->JOptionPane->Resources->file->getName->format->new->ObjectArr->showOptionDialog->if->return->setSelectedFile->super->approveSelection
Plotter#getAccessibleContext()::: plotter get accessible context:::if->new->AccessiblePlotter->return
Plotter.AccessiblePlotter#getAccessibleName()::: accessible plotter get accessible name:::name->super->getAccessibleName->if->seqs->size->seqs->get->keyValueList->foreach->if->value->if->if->Resources->seq->value->format->else->seq->value->getFormattedValue->Resources->format->else->return
Plotter.AccessiblePlotter#getAccessibleRole()::: accessible plotter get accessible role:::return
PlotterPanel#getPlotter()::: plotter panel get plotter:::return
PlotterPanel#setPlotter(Plotter)::: plotter panel set plotter:::setComponent
PlotterPanel#init()::: plotter panel init:::setFocusable->new->MouseAdapter->addMouseListener
PlotterPanel#getComponentPopupMenu()::: plotter panel get component popup menu:::return->getPlotter->getPlotter->getComponentPopupMenu
PlotterPanel#getAccessibleContext()::: plotter panel get accessible context:::if->new->AccessiblePlotterPanel->return
PlotterPanel.AccessiblePlotterPanel#getAccessibleName()::: accessible plotter panel get accessible name:::name->if->getPlotter->getPlotter->getAccessibleContext->getAccessibleName->if->super->getAccessibleName->return
ProxyClient#setParameters(JMXServiceURL, String, String)::: proxy client set parameters:::jmxUrl->getHost->jmxUrl->getPort
ProxyClient#checkStub(Remote, Class)::: proxy client check stub:::if->stub->getClass->if->Proxy->stub->getClass->isProxyClass->throw->stubClass->getName->new->SecurityException->else->handler->Proxy->getInvocationHandler->if->handler->getClass->throw->getName->new->SecurityException->else->ref->getRef->if->ref->getClass->throw->getName->new->SecurityException->liveRef->getLiveRef->csf->liveRef->getClientSocketFactory->if->csf->getClass->throw->getName->new->SecurityException
ProxyClient#checkSslConfig()::: proxy client check ssl config:::registry->try->LocateRegistry->getRegistry->try->registry->lookup->catch->throw->nbe->getMessage->new->IOException->initCause->finally->catch->LocateRegistry->getRegistry->try->registry->lookup->catch->throw->nbe->getMessage->new->IOException->initCause->finally->finally->try->checkStub->catch->finally
ProxyClient#isSslRmiRegistry():::Returns true if the underlying RMI registry is SSL-protected.:::if->isVmConnector->throw->new->UnsupportedOperationException->return
ProxyClient#isSslRmiStub():::Returns true if the retrieved RMI stub is SSL-protected.:::if->isVmConnector->throw->new->UnsupportedOperationException->return
ProxyClient#isVmConnector():::Returns true if this ProxyClient denotes a JMX connector for a JMX VM agent.:::return
ProxyClient#setConnectionState(ConnectionState)::: proxy client set connection state:::oldState->propertyChangeSupport->firePropertyChange
ProxyClient#getConnectionState()::: proxy client get connection state:::return
ProxyClient#flush()::: proxy client flush:::if->server->flush
ProxyClient#connect(boolean)::: proxy client connect:::setConnectionState->try->tryConnect->setConnectionState->catch->if->JConsole->isDebug->e->printStackTrace->setConnectionState->finally
ProxyClient#tryConnect(boolean)::: proxy client try connect:::if->equals->ManagementFactory->getPlatformMBeanServer->Snapshot->newSnapshot->else->if->if->lvm->isManageable->lvm->startManagementAgent->if->lvm->isManageable->throw->new->IOException->if->lvm->connectorAddress->new->JMXServiceURL->env->new->HashMap<String,Object>->if->env->put->if->if->isVmConnector->if->checkSslConfig->new->RMIConnector->jmxc->connect->else->JMXConnectorFactory->connect->else->env->new->StringArr->put->if->isVmConnector->if->checkSslConfig->new->RMIConnector->jmxc->connect->else->JMXConnectorFactory->connect->jmxc->getMBeanServerConnection->Snapshot->newSnapshot->try->on->new->ObjectName->server->isRegistered->server->new->ObjectName->isRegistered->if->mopis->server->getMBeanInfo->getOperations->foreach->if->op->getName->equals->break->new->ObjectName->server->isRegistered->catch->throw->e->getMessage->new->InternalError->throw->e->getMessage->new->InternalError->finally->if->getRuntimeMXBean
ProxyClient#getProxyClient(LocalVirtualMachine):::Gets a proxy client for a given local virtual machine.:::key->getCacheKey->proxyClient->cache->get->if->new->ProxyClient->cache->put->return
ProxyClient#getConnectionName(LocalVirtualMachine)::: proxy client get connection name:::return->Integer->lvm->vmid->toString
ProxyClient#getCacheKey(LocalVirtualMachine)::: proxy client get cache key:::return->Integer->lvm->vmid->toString
ProxyClient#getProxyClient(String, String, String):::Gets a proxy client for a given JMXServiceURL.:::key->getCacheKey->proxyClient->cache->get->if->new->ProxyClient->cache->put->return
ProxyClient#getConnectionName(String, String)::: proxy client get connection name:::if->userName->length->return->else->return
ProxyClient#getCacheKey(String, String, String)::: proxy client get cache key:::return
ProxyClient#getProxyClient(String, int, String, String):::Gets a proxy client for a given "hostname:port".:::key->getCacheKey->proxyClient->cache->get->if->new->ProxyClient->cache->put->return
ProxyClient#getConnectionName(String, int, String)::: proxy client get connection name:::name->if->userName->length->return->else->return
ProxyClient#getCacheKey(String, int, String, String)::: proxy client get cache key:::return
ProxyClient#connectionName()::: proxy client connection name:::return
ProxyClient#getDisplayName()::: proxy client get display name:::return
ProxyClient#toString()::: proxy client to string:::if->isConnected->return->Resources->format->else->return
ProxyClient#getMBeanServerConnection()::: proxy client get bean server connection:::return
ProxyClient#getSnapshotMBeanServerConnection()::: proxy client get snapshot bean server connection:::return
ProxyClient#getUrl()::: proxy client get url:::return
ProxyClient#getHostName()::: proxy client get host name:::return
ProxyClient#getPort()::: proxy client get port:::return
ProxyClient#getVmid()::: proxy client get vmid:::return->lvm->vmid
ProxyClient#getUserName()::: proxy client get user name:::return
ProxyClient#getPassword()::: proxy client get password:::return
ProxyClient#disconnect()::: proxy client disconnect:::if->try->jmxc->close->catch->finally->if->setConnectionState
ProxyClient#getDomains():::Returns the list of domains in which any MBean is currently registered.:::return->server->getDomains
ProxyClient#getMBeans(String):::Returns a map of MBeans with ObjectName as the key and MBeanInfo value of a given domain:::name->if->try->new->ObjectName->catch->finally->mbeans->server->queryNames->result->mbeans->size->new->HashMap<ObjectName,MBeanInfo>->iterator->mbeans->iterator->while->iterator->hasNext->object->iterator->next->if->o->try->info->server->getMBeanInfo->result->put->catch->finally->return
ProxyClient#getAttributes(ObjectName, String[]):::Returns a list of attributes of a named MBean.:::list->try->server->getAttributes->catch->finally->return
ProxyClient#setAttribute(ObjectName, Attribute):::Set the value of a specific attribute of a named MBean.:::try->server->setAttribute->catch->finally
ProxyClient#invoke(ObjectName, String, Object[], String[]):::Invokes an operation of a named MBean.:::result->try->server->invoke->catch->finally->return
ProxyClient#getClassLoadingMXBean()::: proxy client get class loading bean:::if->newPlatformMXBeanProxy->return
ProxyClient#getCompilationMXBean()::: proxy client get compilation bean:::if->newPlatformMXBeanProxy->return
ProxyClient#getMemoryPoolProxies()::: proxy client get memory pool proxies:::if->poolName->try->new->ObjectName->catch->finally->mbeans->server->queryNames->if->new->ArrayList<MemoryPoolProxy>->iterator->mbeans->iterator->while->iterator->hasNext->objName->iterator->next->p->new->MemoryPoolProxy->memoryPoolProxies->add->return
ProxyClient#getGarbageCollectorMXBeans()::: proxy client get garbage collector beans:::if->gcName->try->new->ObjectName->catch->finally->mbeans->server->queryNames->if->new->ArrayList<GarbageCollectorMXBean>->iterator->mbeans->iterator->while->iterator->hasNext->on->iterator->next->name->on->getKeyProperty->mBean->newPlatformMXBeanProxy->garbageCollectorMBeans->add->return
ProxyClient#getMemoryMXBean()::: proxy client get memory bean:::if->newPlatformMXBeanProxy->return
ProxyClient#getRuntimeMXBean()::: proxy client get runtime bean:::if->newPlatformMXBeanProxy->return
ProxyClient#getThreadMXBean()::: proxy client get thread bean:::if->newPlatformMXBeanProxy->return
ProxyClient#getOperatingSystemMXBean()::: proxy client get operating system bean:::if->newPlatformMXBeanProxy->return
ProxyClient#getSunOperatingSystemMXBean()::: proxy client get sun operating system bean:::try->on->new->ObjectName->if->if->server->isInstanceOf->newPlatformMXBeanProxy->catch->return->return->finally->return
ProxyClient#getHotSpotDiagnosticMXBean()::: proxy client get hot spot diagnostic bean:::if->newPlatformMXBeanProxy->return
ProxyClient#getMXBean(ObjectName, Class)::: proxy client get bean:::return->objName->toString->newPlatformMXBeanProxy
ProxyClient#findDeadlockedThreads()::: proxy client find deadlocked threads:::tm->getThreadMXBean->if->tm->isSynchronizerUsageSupported->return->tm->findDeadlockedThreads->else->return->tm->findMonitorDeadlockedThreads
ProxyClient#markAsDead()::: proxy client mark as dead:::disconnect
ProxyClient#isDead()::: proxy client is dead:::return
ProxyClient#isConnected()::: proxy client is connected:::return->isDead
ProxyClient#hasPlatformMXBeans()::: proxy client has platform beans:::return
ProxyClient#hasHotSpotDiagnosticMXBean()::: proxy client has hot spot diagnostic bean:::return
ProxyClient#isLockUsageSupported()::: proxy client is lock usage supported:::return
ProxyClient#isRegistered(ObjectName)::: proxy client is registered:::return->server->isRegistered
ProxyClient#addPropertyChangeListener(PropertyChangeListener)::: proxy client add property change listener:::propertyChangeSupport->addPropertyChangeListener
ProxyClient#addWeakPropertyChangeListener(PropertyChangeListener)::: proxy client add weak property change listener:::if->new->WeakPCL->propertyChangeSupport->addPropertyChangeListener
ProxyClient#removePropertyChangeListener(PropertyChangeListener)::: proxy client remove property change listener:::if->foreach->propertyChangeSupport->getPropertyChangeListeners->if->get->break->propertyChangeSupport->removePropertyChangeListener
ProxyClient.WeakPCL#propertyChange(PropertyChangeEvent)::: weak l property change:::pcl->get->if->dispose->else->pcl->propertyChange
ProxyClient.WeakPCL#dispose()::: weak l dispose:::removePropertyChangeListener
ProxyClient.SnapshotMBeanServerConnection#flush():::Flush all cached values of attributes.:::
ProxyClient.Snapshot#newSnapshot(MBeanServerConnection)::: snapshot new snapshot:::ih->new->SnapshotInvocationHandler->return->Proxy->getClassLoader->new->Class<?>Arr->newProxyInstance
ProxyClient.SnapshotInvocationHandler#flush()::: snapshot invocation handler flush:::newMap
ProxyClient.SnapshotInvocationHandler#invoke(Object, Method, Object[])::: snapshot invocation handler invoke:::methodName->method->getName->if->methodName->equals->return->getAttribute->else->if->methodName->equals->return->getAttributes->else->if->methodName->equals->flush->return->else->try->return->method->invoke->catch->throw->e->getCause->finally
ProxyClient.SnapshotInvocationHandler#getAttribute(ObjectName, String)::: snapshot invocation handler get attribute:::values->Collections->singleton->getCachedAttributes->value->values->get->if->values->containsKey->return->return->conn->getAttribute
ProxyClient.SnapshotInvocationHandler#getAttributes(ObjectName, String[])::: snapshot invocation handler get attributes:::values->Arrays->asList->new->TreeSet<String>->getCachedAttributes->list->new->AttributeList->foreach->value->values->get->if->values->containsKey->list->new->Attribute->add->return
ProxyClient.SnapshotInvocationHandler#getCachedAttributes(ObjectName, Set)::: snapshot invocation handler get cached attributes:::values->cachedValues->get->if->values->keySet->containsAll->return->new->TreeSet<String>->oldNames->cachedNames->get->if->attrNames->addAll->new->NameValueMap->attrs->conn->attrNames->attrNames->size->new->StringArr->toArray->getAttributes->foreach->attrs->asList->values->attr->getName->attr->getValue->put->cachedValues->put->cachedNames->put->return
ProxyClient.SnapshotInvocationHandler#newMap()::: snapshot invocation handler new map:::return->new->HashMap<K,V>
Resources#format(String, Object...):::Convenience method for MessageFormat#format(String, Object...).:::return->MessageFormat->format
Resources#getMnemonicInt(String):::Returns the mnemonic for a message.:::integer->MNEMONIC_LOOKUP->get->if->return->integer->intValue->return
Resources#initializeMessages(Class, String):::Initializes all non-final public static fields in the given class with messages from a ResourceBundle.:::rb->try->ResourceBundle->getBundle->catch->finally->foreach->clazz->getFields->if->isWritableField->key->field->getName->message->getMessage->mnemonicInt->findMnemonicInt->removeMnemonicAmpersand->replaceWithPlatformLineFeed->setFieldValue->MNEMONIC_LOOKUP->put
Resources#isWritableField(Field)::: resources is writable field:::modifiers->field->getModifiers->return->Modifier->isPublic->Modifier->isStatic->Modifier->isFinal
Resources#getMessage(ResourceBundle, String):::Returns the message corresponding to the key in the bundle or a text describing it's missing.:::if->return->try->return->rb->getString->catch->return->finally
Resources#setFieldValue(Field, String)::: resources set field value:::try->field->set->catch->throw->field->getName->new->Error->finally
Resources#replaceWithPlatformLineFeed(String):::Returns a String where all \n in the <text> have been replaced with the line separator for the platform.:::return->text->System->getProperty->replace
Resources#removeMnemonicAmpersand(String):::Removes the mnemonic identifier (&) from a string unless it's escaped by && or placed at the end.:::s->new->StringBuilder->for->i->message->length->return->s->toString
Resources#findMnemonicInt(String):::Finds the mnemonic character in a message:::for->i->s->length->return
Resources#lookupMnemonicInt(String):::Lookups the mnemonic for a key in the KeyEvent class.:::try->return->c->toUpperCase->getDeclaredField->getInt->catch->return->finally
SheetDialog#showOptionDialog(VMPanel, Object, int, int, Icon, Object[], Object)::: sheet dialog show option dialog:::rootPane->SwingUtilities->getRootPane->glassPane->rootPane->getGlassPane->if->new->SlideAndFadeGlassPane->glassPane->rootPane->getName->setName->rootPane->setGlassPane->rootPane->revalidate->safGlassPane->rootPane->getWidth->fixWrapping->optionPane->new->SheetOptionPane->optionPane->vmPanel->getComponentOrientation->setComponentOrientation->optionPane->new->PropertyChangeListener->addPropertyChangeListener->EventQueue->new->Runnable->invokeLater->return
SheetDialog#fixWrapping(Object, int)::: sheet dialog fix wrapping:::if->arr->for->i->else->if->startsWith->new->JLabel->return
SheetDialog.SlideAndFadeGlassPane#show(SheetOptionPane)::: slide and fade glass pane show:::removeAll->add->setVisible->revalidate->repaint->doSlide
SheetDialog.SlideAndFadeGlassPane#hide(SheetOptionPane)::: slide and fade glass pane hide:::if->return->revalidate->repaint->doSlide
SheetDialog.SlideAndFadeGlassPane#doSlide()::: slide and fade glass pane do slide:::if->optionPane->getParent->return->if->optionPane->getWidth->optionPane->optionPane->getPreferredSize->setSize->glassPaneWidth->getWidth->if->getParent->getParent->getWidth->x->optionPane->getWidth->if->remove->setVisible->return->else->optionPane->setLocation->setGrayLevel->return
SheetDialog.SlideAndFadeGlassPane#setGrayLevel(int)::: slide and fade glass pane set gray level:::new->Color->setBackground
SheetDialog.SlideAndFadeGlassPane#paint(Graphics)::: slide and fade glass pane paint:::g->getBackground->setColor->g->getWidth->getHeight->fillRect->super->paint
SheetDialog.SheetOptionPane#setVisible(boolean)::: sheet option pane set visible:::glassPane->getParent->if->if->glassPane->show->else->glassPane->hide
SheetDialog.SheetOptionPane#paint(Graphics)::: sheet option pane paint:::g2d->oldComp->g2d->getComposite->g2d->setComposite->oldColor->g2d->getColor->g2d->setColor->g2d->getWidth->getHeight->fillRect->g2d->setColor->g2d->setComposite->super->paint
SummaryTab#getTabName()::: summary tab get tab name:::return
SummaryTab#newSwingWorker()::: summary tab new swing worker:::return->new->SwingWorker<Result,Object>
SummaryTab#formatSummary()::: summary tab format summary:::result->new->Result->proxyClient->vmPanel->getProxyClient->if->proxyClient->isDead->return->new->StringBuilder->append->try->rmBean->proxyClient->getRuntimeMXBean->cmpMBean->proxyClient->getCompilationMXBean->tmBean->proxyClient->getThreadMXBean->memoryBean->proxyClient->getMemoryMXBean->clMBean->proxyClient->getClassLoadingMXBean->osMBean->proxyClient->getOperatingSystemMXBean->sunOSMBean->proxyClient->getSunOperatingSystemMXBean->append->append->dateTime->headerDateTimeFormat->System->currentTimeMillis->format->append->append->append->vmPanel->getDisplayName->append->Resources->rmBean->getVmName->rmBean->getVmVersion->format->append->rmBean->getVmVendor->append->rmBean->getName->append->append->append->rmBean->getUptime->formatTime->append->if->sunOSMBean->getProcessCpuTime->formatNanoTime->append->if->cmpMBean->getName->append->cmpMBean->isCompilationTimeMonitoringSupported->cmpMBean->getTotalCompilationTime->formatTime->append->else->append->append->append->append->tlCount->tmBean->getThreadCount->tdCount->tmBean->getDaemonThreadCount->tpCount->tmBean->getPeakThreadCount->ttCount->tmBean->getTotalStartedThreadCount->strings1->formatLongs->append->append->append->append->append->append->clCount->clMBean->getLoadedClassCount->cuCount->clMBean->getUnloadedClassCount->ctCount->clMBean->getTotalLoadedClassCount->strings2->formatLongs->append->append->append->append->append->append->u->memoryBean->getHeapMemoryUsage->append->strings1->u->getUsed->u->getMax->formatKByteStrings->append->append->append->append->strings2->u->getCommitted->formatKByteStrings->append->Resources->memoryBean->getObjectPendingFinalizationCount->format->append->append->append->garbageCollectors->proxyClient->getGarbageCollectorMXBeans->foreach->gcName->garbageCollectorMBean->getName->gcCount->garbageCollectorMBean->getCollectionCount->gcTime->garbageCollectorMBean->getCollectionTime->Resources->formatTime->format->append->append->append->append->osName->osMBean->getName->osVersion->osMBean->getVersion->osArch->osMBean->getArch->osMBean->getAvailableProcessors->append->append->append->if->osName->startsWith->if->kbStrings1->sunOSMBean->getCommittedVirtualMemorySize->formatKByteStrings->kbStrings2->sunOSMBean->getTotalPhysicalMemorySize->sunOSMBean->getFreePhysicalMemorySize->sunOSMBean->getTotalSwapSpaceSize->sunOSMBean->getFreeSwapSpaceSize->formatKByteStrings->append->append->append->append->append->append->append->append->append->append->args->inputArguments->rmBean->getInputArguments->foreach->append->rmBean->getClassPath->append->rmBean->getLibraryPath->append->rmBean->isBootClassPathSupported->rmBean->getBootClassPath->append->append->catch->if->JConsole->isDebug->e->printStackTrace->proxyClient->markAsDead->return->if->JConsole->isDebug->e->printStackTrace->proxyClient->markAsDead->return->finally->append->System->currentTimeMillis->buf->toString->return
SummaryTab#append(String)::: summary tab append:::buf->append
SummaryTab#append(String, String)::: summary tab append:::newRow->append
SummaryTab#append(String, String, int)::: summary tab append:::if->value->replace->newRow->append
SummaryTab#getOverviewPanels()::: summary tab get overview panels:::if->new->CPUOverviewPanel->return->new->OverviewPanelArr
SummaryTab.CPUOverviewPanel#updateCPUInfo(Result)::: overview panel update info:::if->elapsedCpu->elapsedTime->cpuUsage->Math->min->Math->max->getPlotter->Math->Math->pow->round->addValues->getInfoLabel->Resources->String->format->format->setText
Tab#newSwingWorker()::: tab new swing worker:::return
Tab#update()::: tab update:::proxyClient->vmPanel->getProxyClient->if->proxyClient->hasPlatformMXBeans->throw->new->UnsupportedOperationException->sw->newSwingWorker->if->prevSW->isDone->if->sw->getState->if->sw->execute
Tab#dispose()::: tab dispose:::if->worker->stopWorker
Tab#getVMPanel()::: tab get panel:::return
Tab#getOverviewPanels()::: tab get overview panels:::return
Tab#workerAdd(Runnable)::: tab worker add:::if->vmPanel->getConnectionName->new->Worker->worker->start->worker->add
Tab#getPreferredSize()::: tab get preferred size:::return->new->Dimension
ThreadTab#getTabName()::: thread tab get tab name:::return
ThreadTab#newSwingWorker()::: thread tab new swing worker:::proxyClient->vmPanel->getProxyClient->if->proxyClient->addWeakPropertyChangeListener->return->new->SwingWorker<Boolean,Object>
ThreadTab#valueChanged(ListSelectionEvent)::: thread tab value changed:::list->ev->getSource->textArea->selected->list->getSelectedValue->if->if->else->textArea->setText->if->threadID->new->Runnable->workerAdd
ThreadTab#doUpdate()::: thread tab do update:::new->Runnable->workerAdd
ThreadTab#detectDeadlock()::: thread tab detect deadlock:::new->Runnable->workerAdd
ThreadTab#getDeadlockedThreadIds()::: thread tab get deadlocked thread ids:::proxyClient->vmPanel->getProxyClient->threadMBean->proxyClient->getThreadMXBean->ids->proxyClient->findDeadlockedThreads->if->return->infos->threadMBean->getThreadInfo->dcycles->new->ArrayList<Long[]>->cycle->new->ArrayList<Long>->visited->new->booleanArr->deadlockedThread->while->if->if->cycle->size->dcycles->cycle->new->LongArr->toArray->add->new->ArrayList<Long>->for->j->if->break->cycle->add->nextThreadId->getLockOwnerId->for->j->return->dcycles->new->LongArrs->toArray
ThreadTab#actionPerformed(ActionEvent)::: thread tab action performed:::cmd->evt->getSource->getActionCommand->if->messageLabel->setText->detectDeadlock
ThreadTab#insertUpdate(DocumentEvent)::: thread tab insert update:::doUpdate
ThreadTab#removeUpdate(DocumentEvent)::: thread tab remove update:::doUpdate
ThreadTab#changedUpdate(DocumentEvent)::: thread tab changed update:::doUpdate
ThreadTab.ThreadJList#getPreferredSize()::: thread list get preferred size:::d->super->getPreferredSize->Math->max->return
ThreadTab.PromptingTextField#revalidate()::: prompting text field revalidate:::super->revalidate->updateForeground
ThreadTab.PromptingTextField#updateForeground()::: prompting text field update foreground:::UIManager->getColor->if->setForeground->else->setForeground
ThreadTab.PromptingTextField#getText()::: prompting text field get text:::if->return->else->return->super->getText
ThreadTab.PromptingTextField#focusGained(FocusEvent)::: prompting text field focus gained:::if->setText->setForeground
ThreadTab.PromptingTextField#focusLost(FocusEvent)::: prompting text field focus lost:::if->getText->equals->setText->setForeground
ThreadTab#getOverviewPanels()::: thread tab get overview panels:::if->new->ThreadOverviewPanel->return->new->OverviewPanelArr
ThreadTab.ThreadOverviewPanel#updateThreadsInfo(long, long, long, long)::: thread overview panel update threads info:::getPlotter->addValues->getInfoLabel->Resources->format->setText
TimeComboBox#addPlotter(Plotter)::: time combo box add plotter:::plotters->add->if->plotters->size->plotter->getViewRange->selectValue->plotter->addPropertyChangeListener
TimeComboBox#itemStateChanged(ItemEvent)::: time combo box item state changed:::foreach->plotter->getSelectedIndex->setViewRange
TimeComboBox#selectValue(int)::: time combo box select value:::for->i->if->plotters->size->foreach->plotter->setViewRange
TimeComboBox#propertyChange(PropertyChangeEvent)::: time combo box property change:::if->ev->getPropertyName->ev->getNewValue->selectValue
Utilities#updateTransparency(JComponent)::: utilities update transparency:::laf->UIManager->getLookAndFeel->transparent->laf->getClass->getName->equals->setTabbedPaneTransparency
Utilities#setTabbedPaneTransparency(JComponent, boolean)::: utilities set tabbed pane transparency:::foreach->comp->getComponents->if->setTransparency->else->if->setTabbedPaneTransparency
Utilities#setTransparency(JComponent, boolean)::: utilities set transparency:::comp->setOpaque->foreach->comp->getComponents->if->setTransparency->if->t->cr->t->getCellRenderer->cr->setBackground->cr->new->Color->setBackgroundNonSelectionColor->t->setCellRenderer->setTransparency
Utilities#newTableScrollPane(JComponent):::A slightly modified border for JScrollPane to be used with a JTable inside a JTabbedPane:::return->new->TableScrollPane
Utilities.TableScrollPane#paintBorder(Graphics)::: table scroll pane paint border:::border->getBorder->if->insets->border->getBorderInsets->if->oldClip->g->getClip->g->getWidth->clipRect->super->paintBorder->g->setClip
Utilities#setAccessibleName(Accessible, String)::: utilities set accessible name:::comp->getAccessibleContext->setAccessibleName
Utilities#setAccessibleDescription(Accessible, String)::: utilities set accessible description:::comp->getAccessibleContext->setAccessibleDescription
Utilities#ensureContrast(Color, Color):::Modifies color c1 to ensure it has acceptable contrast relative to color c2:::y1->getColorBrightness->y2->getColorBrightness->if->abs->if->setColorBrightness->else->setColorBrightness->return
Utilities#getColorBrightness(Color)::: utilities get color brightness:::return->c->getRed->c->getGreen->c->getBlue
Utilities#setColorBrightness(Color, double)::: utilities set color brightness:::i->c->getRed->c->getGreen->c->getBlue->q->c->getRed->c->getGreen->c->getBlue->r->round->min->max->g->round->min->max->b->round->min->max->return->new->Color
VariableGridLayout#setFillRow(JComponent, boolean)::: variable grid layout set fill row:::c->putClientProperty
VariableGridLayout#setFillColumn(JComponent, boolean)::: variable grid layout set fill column:::c->putClientProperty
VariableGridLayout#getFillRow(JComponent)::: variable grid layout get fill row:::b->c->getClientProperty->return
VariableGridLayout#getFillColumn(JComponent)::: variable grid layout get fill column:::b->c->getClientProperty->return
VariableGridLayout#layoutContainer(Container)::: variable grid layout layout container:::insets->parent->getInsets->ncomponents->parent->getComponentCount->nrows->getRows->ncols->getColumns->hgap->getHgap->vgap->getVgap->if->else->x->y->nFills->fills->new->booleanArr->lastFillRow->nComps->parent->getComponentCount->for->row->if->parent->getHeight->hAdd->parent->getHeight->hAdded->for->row->new->booleanArr->lastFillCol->for->col->if->parent->getWidth->wAdd->parent->getWidth->wAdded->for->col
VariableGridLayout#preferredLayoutSize(Container)::: variable grid layout preferred layout size:::insets->parent->getInsets->ncomponents->parent->getComponentCount->nrows->getRows->ncols->getColumns->hgap->getHgap->vgap->getVgap->if->else->nComps->parent->getComponentCount->y->for->row->x->for->col->return->new->Dimension
Version#print(PrintStream)::: version print:::printFullVersion->ps->Resources->System->getProperty->System->getProperty->format->println->ps->Resources->System->getProperty->System->getProperty->System->getProperty->format->println
Version#printFullVersion(PrintStream)::: version print full version:::ps->Resources->format->println
Version#getVersion()::: version get version:::return
VMInternalFrame#getVMPanel()::: internal frame get panel:::return
VMInternalFrame#getPreferredSize()::: internal frame get preferred size:::d->super->getPreferredSize->desktop->getDesktopPane->if->desktopSize->desktop->getSize->if->Math->min->Math->min->return
VMPanel#getTabInfos()::: panel get tab infos:::return->tabInfos->tabInfos->size->new->TabInfoArr->toArray
VMPanel#setUI(TabbedPaneUI)::: panel set i:::insets->UIManager->getLookAndFeelDefaults->get->if->insets->clone->connectedIcon24->getIconWidth->UIManager->put->super->setUI
VMPanel#paintComponent(Graphics)::: panel paint component:::super->paintComponent->icon->c0->getComponent->if->c0->getY->isConnected->else->isConnected->insets->getInsets->x->getWidth->icon->getIconWidth->y->if->c0->getY->icon->getIconHeight->icon->paintIcon->icon->getIconWidth->icon->getIconHeight->new->Rectangle
VMPanel#getToolTipText(MouseEvent)::: panel get tool tip text:::if->connectedIconBounds->event->getPoint->contains->if->isConnected->return->else->return->else->return->super->getToolTipText
VMPanel#addTab(TabInfo)::: panel add tab:::tab->instantiate->if->addTab->else
VMPanel#insertTab(TabInfo, int)::: panel insert tab:::tab->instantiate->if->insertTab->else
VMPanel#removeTabAt(int)::: panel remove tab at:::super->removeTabAt
VMPanel#instantiate(TabInfo)::: panel instantiate:::try->con->getConstructor->return->con->newInstance->catch->println->return->finally
VMPanel#isConnected()::: panel is connected:::return->proxyClient->isConnected
VMPanel#getUpdateInterval()::: panel get update interval:::return
VMPanel#getProxyClient(boolean):::WARNING NEVER CALL THIS METHOD TO MAKE JMX REQUEST IF  assertThread == false:::if->return->getProxyClient->else->return
VMPanel#getProxyClient()::: panel get proxy client:::threadClass->Thread->currentThread->getClass->getName->if->threadClass->equals->msg->new->RuntimeException->printStackTrace->System->exit->return
VMPanel#cleanUp()::: panel clean up:::foreach->getTabs->tab->dispose->foreach->plugins->keySet->p->dispose->if->timer->cancel->proxyClient->removePropertyChangeListener
VMPanel#connect()::: panel connect:::if->isConnected->createPluginTabs->fireConnectedChange->startUpdateTimer->else->new->Thread->start
VMPanel#disconnect()::: panel disconnect:::proxyClient->disconnect->updateFrameTitle
VMPanel#propertyChange(PropertyChangeEvent)::: panel property change:::prop->ev->getPropertyName->if->oldState->ev->getOldValue->newState->ev->getNewValue->switch->onConnecting->break->if->progressBar->setIndeterminate->progressBar->setValue->closeOptionPane->updateFrameTitle->createPluginTabs->repaint->fireConnectedChange->startUpdateTimer->break->if->progressBar->setIndeterminate->progressBar->setValue->closeOptionPane->vmPanelDied->if->fireConnectedChange->break
VMPanel#onConnecting()::: panel on connecting:::System->currentTimeMillis->SwingUtilities->getWindowAncestor->connectionName->getConnectionName->new->JProgressBar->progressBar->setIndeterminate->progressPanel->new->FlowLayout->new->JPanel->progressPanel->add->message->Resources->format->Resources->format->SheetDialog->new->StringArr->showOptionDialog
VMPanel#closeOptionPane()::: panel close option pane:::if->new->Thread->start
VMPanel#updateFrameTitle()::: panel update frame title:::vmIF->getFrame->if->displayName->getDisplayName->if->proxyClient->isConnected->Resources->format->vmIF->setTitle
VMPanel#getFrame()::: panel get frame:::if->SwingUtilities->getAncestorOfClass->return
VMPanel#getTabs()::: panel get tabs:::list->new->ArrayList<Tab>->n->getTabCount->for->i->return
VMPanel#startUpdateTimer()::: panel start update timer:::if->timer->cancel->timerTask->new->TimerTask->timerName->getConnectionName->new->Timer->timer->schedule
VMPanel#vmPanelDied()::: panel vm panel died:::disconnect->if->return->optionPane->msgTitle->msgExplanation->buttonStr->if->Resources->getConnectionName->format->else->if->Resources->getConnectionName->format->else->Resources->getConnectionName->format->SheetDialog->new->StringArr->showOptionDialog->optionPane->new->PropertyChangeListener->addPropertyChangeListener
VMPanel#update()::: panel update:::synchronized->if->isConnected->if->EventQueue->new->Runnable->invokeLater->return->else->proxyClient->flush->tabs->getTabs->n->tabs->size->for->i->foreach->plugins->keySet->sw->p->newSwingWorker->prevSW->plugins->get->if->prevSW->isDone->if->sw->getState->plugins->put->if->p->executeSwingWorker->if->EventQueue->new->Runnable->invokeLater
VMPanel#getHostName()::: panel get host name:::return
VMPanel#getPort()::: panel get port:::return
VMPanel#getUserName()::: panel get user name:::return
VMPanel#getUrl()::: panel get url:::return
VMPanel#getPassword()::: panel get password:::return
VMPanel#getConnectionName()::: panel get connection name:::return->proxyClient->connectionName
VMPanel#getDisplayName()::: panel get display name:::return->proxyClient->getDisplayName
VMPanel#createPluginTabs()::: panel create plugin tabs:::if->foreach->plugins->keySet->tabs->p->getTabs->foreach->tabs->entrySet->e->getKey->e->getValue->addTab
VMPanel#fireConnectedChange(boolean)::: panel fire connected change:::foreach->getTabs->tab->firePropertyChange
Worker#run()::: worker run:::while->job->synchronized->while->jobs->size->try->jobs->wait->catch->finally->if->break->jobs->remove->job->run
Worker#stopWorker()::: worker stop worker:::synchronized->jobs->notify
Worker#add(Runnable)::: worker add:::synchronized->jobs->add->jobs->notify
Worker#queueFull()::: worker queue full:::synchronized->return->jobs->size

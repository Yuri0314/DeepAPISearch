sun.tools.jconsole.AboutDialog#showDialog()->void::: about dialog show dialog
sun.tools.jconsole.AboutDialog#showAboutDialog(JConsole)->void::: about dialog show about dialog
sun.tools.jconsole.AboutDialog#browseUserGuide(JConsole)->void::: about dialog browse user guide
sun.tools.jconsole.AboutDialog#isBrowseSupported()->boolean::: about dialog is browse supported
sun.tools.jconsole.AboutDialog#browse(String)->void::: about dialog browse
sun.tools.jconsole.BorderedComponent#setComponent(JComponent)->void::: bordered component set component
sun.tools.jconsole.BorderedComponent#setValueLabel(String)->void::: bordered component set value label
sun.tools.jconsole.BorderedComponent#actionPerformed(ActionEvent)->void::: bordered component action performed
sun.tools.jconsole.BorderedComponent#getMinimumSize()->Dimension::: bordered component get minimum size
sun.tools.jconsole.BorderedComponent#doLayout()->void::: bordered component do layout
sun.tools.jconsole.BorderedComponent.LabeledBorder#paintBorder(Component, Graphics, int, int, int, int)->void:::Paints the border for the specified component with the specified position and size.
sun.tools.jconsole.BorderedComponent.LabeledBorder#getBorderInsets(Component, Insets)->Insets:::Reinitialize the insets parameter with this Border's current Insets.
sun.tools.jconsole.BorderedComponent.LabeledBorder#getLabel()->JComponent:::Returns the label of the labeled border.
sun.tools.jconsole.BorderedComponent.LabeledBorder#setLabel(JComponent)->void:::Sets the title of the titled border
sun.tools.jconsole.BorderedComponent.LabeledBorder#getMinimumSize(Component)->Dimension:::Returns the minimum dimensions this border requires in order to fully display the border and title.
sun.tools.jconsole.BorderedComponent.FocusBorder#paintBorder(Component, Graphics, int, int, int, int)->void::: focus border paint border
sun.tools.jconsole.BorderedComponent.FocusBorder#getBorderInsets(Component, Insets)->Insets::: focus border get border insets
sun.tools.jconsole.BorderedComponent.FocusBorder#focusGained(FocusEvent)->void::: focus border focus gained
sun.tools.jconsole.BorderedComponent.FocusBorder#focusLost(FocusEvent)->void::: focus border focus lost
sun.tools.jconsole.ClassTab#getTabName()->String::: class tab get tab name
sun.tools.jconsole.ClassTab#actionPerformed(ActionEvent)->void::: class tab action performed
sun.tools.jconsole.ClassTab#newSwingWorker()->SwingWorker::: class tab new swing worker
sun.tools.jconsole.ClassTab#getOverviewPanels()->OverviewPanel[]::: class tab get overview panels
sun.tools.jconsole.ConnectDialog#revalidate()->void::: connect dialog revalidate
sun.tools.jconsole.ConnectDialog#getLabelWidth(String)->int::: connect dialog get label width
sun.tools.jconsole.ConnectDialog#setConnectionParameters(String, String, int, String, String, String)->void::: connect dialog set connection parameters
sun.tools.jconsole.ConnectDialog#itemStateChanged(ItemEvent)->void::: connect dialog item state changed
sun.tools.jconsole.ConnectDialog#insertUpdate(DocumentEvent)->void::: connect dialog insert update
sun.tools.jconsole.ConnectDialog#removeUpdate(DocumentEvent)->void::: connect dialog remove update
sun.tools.jconsole.ConnectDialog#changedUpdate(DocumentEvent)->void::: connect dialog changed update
sun.tools.jconsole.ConnectDialog#focusGained(FocusEvent)->void::: connect dialog focus gained
sun.tools.jconsole.ConnectDialog#focusLost(FocusEvent)->void::: connect dialog focus lost
sun.tools.jconsole.ConnectDialog#keyTyped(KeyEvent)->void::: connect dialog key typed
sun.tools.jconsole.ConnectDialog#setVisible(boolean)->void::: connect dialog set visible
sun.tools.jconsole.ConnectDialog#keyPressed(KeyEvent)->void::: connect dialog key pressed
sun.tools.jconsole.ConnectDialog#keyReleased(KeyEvent)->void::: connect dialog key released
sun.tools.jconsole.ConnectDialog#valueChanged(ListSelectionEvent)->void::: connect dialog value changed
sun.tools.jconsole.ConnectDialog#refresh()->void::: connect dialog refresh
sun.tools.jconsole.CreateMBeanDialog#actionPerformed(ActionEvent)->void::: create bean dialog action performed
sun.tools.jconsole.CreateMBeanDialog#setVisible(boolean)->void::: create bean dialog set visible
sun.tools.jconsole.ExceptionSafePlugin#getTabs()->Map::: exception safe plugin get tabs
sun.tools.jconsole.ExceptionSafePlugin#newSwingWorker()->SwingWorker::: exception safe plugin new swing worker
sun.tools.jconsole.ExceptionSafePlugin#dispose()->void::: exception safe plugin dispose
sun.tools.jconsole.ExceptionSafePlugin#executeSwingWorker(SwingWorker)->void::: exception safe plugin execute swing worker
sun.tools.jconsole.Formatter#formatTime(long)->String::: formatter format time
sun.tools.jconsole.Formatter#formatNanoTime(long)->String::: formatter format nano time
sun.tools.jconsole.Formatter#formatClockTime(long)->String::: formatter format clock time
sun.tools.jconsole.Formatter#formatDate(long)->String::: formatter format date
sun.tools.jconsole.Formatter#formatDateTime(long)->String::: formatter format date time
sun.tools.jconsole.Formatter#getDateTimeFormat(String)->DateFormat::: formatter get date time format
sun.tools.jconsole.Formatter#toExcelTime(long)->double::: formatter to excel time
sun.tools.jconsole.Formatter#formatKByteStrings(long...)->String[]::: formatter format byte strings
sun.tools.jconsole.Formatter#formatKBytes(long)->String::: formatter format bytes
sun.tools.jconsole.Formatter#formatBytes(long, boolean)->String::: formatter format bytes
sun.tools.jconsole.Formatter#formatBytes(long, long)->String::: formatter format bytes
sun.tools.jconsole.Formatter#formatBytes(long, long, boolean)->String::: formatter format bytes
sun.tools.jconsole.Formatter#formatLong(long)->String::: formatter format long
sun.tools.jconsole.Formatter#formatLongs(long...)->String[]::: formatter format longs
sun.tools.jconsole.Formatter#justify(long, int)->String::: formatter justify
sun.tools.jconsole.Formatter#justify(String, int)->String::: formatter justify
sun.tools.jconsole.Formatter#newRow(String, String)->String::: formatter new row
sun.tools.jconsole.Formatter#newRow(String, String, int)->String::: formatter new row
sun.tools.jconsole.Formatter#newRow(String, String, String, String)->String::: formatter new row
sun.tools.jconsole.HTMLPane#setHasSelection(boolean)->void::: pane set has selection
sun.tools.jconsole.HTMLPane#getHasSelection()->boolean::: pane get has selection
sun.tools.jconsole.HTMLPane#setText(String)->void::: pane set text
sun.tools.jconsole.InternalDialog#setLocationRelativeTo(Component)->void::: internal dialog set location relative to
sun.tools.jconsole.InternalDialog.MastheadIcon#paintIcon(Component, Graphics, int, int)->void::: masthead icon paint icon
sun.tools.jconsole.InternalDialog.MastheadIcon#getIconWidth()->int::: masthead icon get icon width
sun.tools.jconsole.InternalDialog.MastheadIcon#getIconHeight()->int::: masthead icon get icon height
sun.tools.jconsole.JConsole#updateLafValues()->void::: console update laf values
sun.tools.jconsole.JConsole#getDesktopPane()->JDesktopPane::: console get desktop pane
sun.tools.jconsole.JConsole#getInternalFrames()->List::: console get internal frames
sun.tools.jconsole.JConsole#actionPerformed(ActionEvent)->void::: console action performed
sun.tools.jconsole.JConsole#tileWindows()->void::: console tile windows
sun.tools.jconsole.JConsole#cascadeWindows()->void::: console cascade windows
sun.tools.jconsole.JConsole#addHost(String, int, String, String)->void::: console add host
sun.tools.jconsole.JConsole#addVmid(LocalVirtualMachine)->void::: console add vmid
sun.tools.jconsole.JConsole#addVmid(LocalVirtualMachine, boolean)->void::: console add vmid
sun.tools.jconsole.JConsole#addUrl(String, String, String, boolean)->void::: console add url
sun.tools.jconsole.JConsole#addHost(String, int, String, String, boolean)->void::: console add host
sun.tools.jconsole.JConsole#addProxyClient(ProxyClient, boolean)->void::: console add proxy client
sun.tools.jconsole.JConsole#isValidRemoteString(String)->boolean::: console is valid remote string
sun.tools.jconsole.JConsole#internalFrameClosing(InternalFrameEvent)->void::: console internal frame closing
sun.tools.jconsole.JConsole#internalFrameOpened(InternalFrameEvent)->void::: console internal frame opened
sun.tools.jconsole.JConsole#internalFrameClosed(InternalFrameEvent)->void::: console internal frame closed
sun.tools.jconsole.JConsole#internalFrameIconified(InternalFrameEvent)->void::: console internal frame iconified
sun.tools.jconsole.JConsole#internalFrameDeiconified(InternalFrameEvent)->void::: console internal frame deiconified
sun.tools.jconsole.JConsole#internalFrameActivated(InternalFrameEvent)->void::: console internal frame activated
sun.tools.jconsole.JConsole#internalFrameDeactivated(InternalFrameEvent)->void::: console internal frame deactivated
sun.tools.jconsole.JConsole#main(String[])->void::: console main
sun.tools.jconsole.JConsole#isDebug()->boolean::: console is debug
sun.tools.jconsole.JConsole#isLocalAttachAvailable()->boolean:::local attach is supported in this implementation as jdk.jconsole requires jdk.attach and jdk.management.agent
sun.tools.jconsole.JConsole#getPlugins()->List::: console get plugins
sun.tools.jconsole.LabeledComponent#setLabel(String)->void::: labeled component set label
sun.tools.jconsole.LabeledComponent#setValueLabel(String)->void::: labeled component set value label
sun.tools.jconsole.LabeledComponent#layout(Container)->void::: labeled component layout
sun.tools.jconsole.LocalVirtualMachine#vmid()->int::: local virtual machine vmid
sun.tools.jconsole.LocalVirtualMachine#isManageable()->boolean::: local virtual machine is manageable
sun.tools.jconsole.LocalVirtualMachine#isAttachable()->boolean::: local virtual machine is attachable
sun.tools.jconsole.LocalVirtualMachine#startManagementAgent()->void::: local virtual machine start management agent
sun.tools.jconsole.LocalVirtualMachine#connectorAddress()->String::: local virtual machine connector address
sun.tools.jconsole.LocalVirtualMachine#displayName()->String::: local virtual machine display name
sun.tools.jconsole.LocalVirtualMachine#toString()->String::: local virtual machine to string
sun.tools.jconsole.LocalVirtualMachine#getAllVirtualMachines()->Map::: local virtual machine get all virtual machines
sun.tools.jconsole.LocalVirtualMachine#getLocalVirtualMachine(int)->LocalVirtualMachine::: local virtual machine get local virtual machine
sun.tools.jconsole.MaximizableInternalFrame#updateUI()->void::: maximizable internal frame update i
sun.tools.jconsole.MaximizableInternalFrame#setTitle(String)->void::: maximizable internal frame set title
sun.tools.jconsole.MBeansTab#getTabName()->String::: beans tab get tab name
sun.tools.jconsole.MBeansTab#getDataViewer()->XDataViewer::: beans tab get data viewer
sun.tools.jconsole.MBeansTab#getTree()->XTree::: beans tab get tree
sun.tools.jconsole.MBeansTab#getSheet()->XSheet::: beans tab get sheet
sun.tools.jconsole.MBeansTab#dispose()->void::: beans tab dispose
sun.tools.jconsole.MBeansTab#getUpdateInterval()->int::: beans tab get update interval
sun.tools.jconsole.MBeansTab#getMBeanServerConnection()->MBeanServerConnection::: beans tab get bean server connection
sun.tools.jconsole.MBeansTab#getSnapshotMBeanServerConnection()->SnapshotMBeanServerConnection::: beans tab get snapshot bean server connection
sun.tools.jconsole.MBeansTab#update()->void::: beans tab update
sun.tools.jconsole.MBeansTab#handleNotification(Notification, Object)->void::: beans tab handle notification
sun.tools.jconsole.MBeansTab#propertyChange(PropertyChangeEvent)->void::: beans tab property change
sun.tools.jconsole.MBeansTab#valueChanged(TreeSelectionEvent)->void::: beans tab value changed
sun.tools.jconsole.MBeansTab#treeWillExpand(TreeExpansionEvent)->void::: beans tab tree will expand
sun.tools.jconsole.MBeansTab#treeWillCollapse(TreeExpansionEvent)->void::: beans tab tree will collapse
sun.tools.jconsole.MemoryPoolProxy#isCollectedMemoryPool()->boolean::: memory pool proxy is collected memory pool
sun.tools.jconsole.MemoryPoolProxy#getStat()->MemoryPoolStat::: memory pool proxy get stat
sun.tools.jconsole.MemoryPoolStat#getPoolName()->String:::Returns the memory pool name.
sun.tools.jconsole.MemoryPoolStat#getUsage()->MemoryUsage:::Returns the current memory usage.
sun.tools.jconsole.MemoryPoolStat#getUsageThreshold()->long:::Returns the current usage threshold
sun.tools.jconsole.MemoryPoolStat#getCollectionUsageThreshold()->long:::Returns the current collection usage threshold
sun.tools.jconsole.MemoryPoolStat#getLastGcId()->long:::Returns the Id of GC.
sun.tools.jconsole.MemoryPoolStat#getLastGcStartTime()->long:::Returns the start time of the most recent GC on the memory pool for this statistics in milliseconds
sun.tools.jconsole.MemoryPoolStat#getLastGcEndTime()->long:::Returns the end time of the most recent GC on the memory pool for this statistics in milliseconds
sun.tools.jconsole.MemoryPoolStat#getBeforeGcUsage()->MemoryUsage:::Returns the memory usage before the most recent GC started
sun.tools.jconsole.MemoryPoolStat#getAfterGcUsage()->MemoryUsage:::Returns the memory usage after the most recent GC finished
sun.tools.jconsole.MemoryTab#getTabName()->String::: memory tab get tab name
sun.tools.jconsole.MemoryTab#itemStateChanged(ItemEvent)->void::: memory tab item state changed
sun.tools.jconsole.MemoryTab#gc()->void::: memory tab gc
sun.tools.jconsole.MemoryTab#newSwingWorker()->SwingWorker::: memory tab new swing worker
sun.tools.jconsole.MemoryTab#actionPerformed(ActionEvent)->void::: memory tab action performed
sun.tools.jconsole.MemoryTab#getOverviewPanels()->OverviewPanel[]::: memory tab get overview panels
sun.tools.jconsole.OutputViewer#init()->void::: output viewer init
sun.tools.jconsole.OverviewPanel#getInfoLabel()->JLabel::: overview panel get info label
sun.tools.jconsole.OverviewTab#getTabName()->String::: overview tab get tab name
sun.tools.jconsole.OverviewTab#newSwingWorker()->SwingWorker::: overview tab new swing worker
sun.tools.jconsole.Plotter#setUnit(Unit)->void::: plotter set unit
sun.tools.jconsole.Plotter#setDecimals(int)->void::: plotter set decimals
sun.tools.jconsole.Plotter#createSequence(String, String, Color, boolean)->void::: plotter create sequence
sun.tools.jconsole.Plotter#setUseDashedTransitions(String, boolean)->void::: plotter set use dashed transitions
sun.tools.jconsole.Plotter#setIsPlotted(String, boolean)->void::: plotter set is plotted
sun.tools.jconsole.Plotter#addValues(long, long...)->void::: plotter add values
sun.tools.jconsole.Plotter#getViewRange()->int::: plotter get view range
sun.tools.jconsole.Plotter#setViewRange(int)->void::: plotter set view range
sun.tools.jconsole.Plotter#getComponentPopupMenu()->JPopupMenu::: plotter get component popup menu
sun.tools.jconsole.Plotter#actionPerformed(ActionEvent)->void::: plotter action performed
sun.tools.jconsole.Plotter#paintComponent(Graphics)->void::: plotter paint component
sun.tools.jconsole.Plotter#getValue()->long::: plotter get value
sun.tools.jconsole.Plotter#getLastTimeStamp()->long::: plotter get last time stamp
sun.tools.jconsole.Plotter#getLastValue(String)->long::: plotter get last value
sun.tools.jconsole.Plotter#propertyChange(PropertyChangeEvent)->void::: plotter property change
sun.tools.jconsole.Plotter#getAccessibleContext()->AccessibleContext::: plotter get accessible context
sun.tools.jconsole.Plotter.AccessiblePlotter#getAccessibleName()->String::: accessible plotter get accessible name
sun.tools.jconsole.Plotter.AccessiblePlotter#getAccessibleRole()->AccessibleRole::: accessible plotter get accessible role
sun.tools.jconsole.PlotterPanel#getPlotter()->Plotter::: plotter panel get plotter
sun.tools.jconsole.PlotterPanel#setPlotter(Plotter)->void::: plotter panel set plotter
sun.tools.jconsole.PlotterPanel#getComponentPopupMenu()->JPopupMenu::: plotter panel get component popup menu
sun.tools.jconsole.PlotterPanel#getAccessibleContext()->AccessibleContext::: plotter panel get accessible context
sun.tools.jconsole.PlotterPanel.AccessiblePlotterPanel#getAccessibleName()->String::: accessible plotter panel get accessible name
sun.tools.jconsole.ProxyClient#isSslRmiRegistry()->boolean:::Returns true if the underlying RMI registry is SSL-protected.
sun.tools.jconsole.ProxyClient#isSslRmiStub()->boolean:::Returns true if the retrieved RMI stub is SSL-protected.
sun.tools.jconsole.ProxyClient#isVmConnector()->boolean:::Returns true if this ProxyClient denotes a JMX connector for a JMX VM agent.
sun.tools.jconsole.ProxyClient#getConnectionState()->ConnectionState::: proxy client get connection state
sun.tools.jconsole.ProxyClient#flush()->void::: proxy client flush
sun.tools.jconsole.ProxyClient#connect(boolean)->void::: proxy client connect
sun.tools.jconsole.ProxyClient#getProxyClient(LocalVirtualMachine)->ProxyClient:::Gets a proxy client for a given local virtual machine.
sun.tools.jconsole.ProxyClient#getConnectionName(LocalVirtualMachine)->String::: proxy client get connection name
sun.tools.jconsole.ProxyClient#getProxyClient(String, String, String)->ProxyClient:::Gets a proxy client for a given JMXServiceURL.
sun.tools.jconsole.ProxyClient#getConnectionName(String, String)->String::: proxy client get connection name
sun.tools.jconsole.ProxyClient#getProxyClient(String, int, String, String)->ProxyClient:::Gets a proxy client for a given "hostname:port".
sun.tools.jconsole.ProxyClient#getConnectionName(String, int, String)->String::: proxy client get connection name
sun.tools.jconsole.ProxyClient#connectionName()->String::: proxy client connection name
sun.tools.jconsole.ProxyClient#getDisplayName()->String::: proxy client get display name
sun.tools.jconsole.ProxyClient#toString()->String::: proxy client to string
sun.tools.jconsole.ProxyClient#getMBeanServerConnection()->MBeanServerConnection::: proxy client get bean server connection
sun.tools.jconsole.ProxyClient#getSnapshotMBeanServerConnection()->SnapshotMBeanServerConnection::: proxy client get snapshot bean server connection
sun.tools.jconsole.ProxyClient#getUrl()->String::: proxy client get url
sun.tools.jconsole.ProxyClient#getHostName()->String::: proxy client get host name
sun.tools.jconsole.ProxyClient#getPort()->int::: proxy client get port
sun.tools.jconsole.ProxyClient#getVmid()->int::: proxy client get vmid
sun.tools.jconsole.ProxyClient#getUserName()->String::: proxy client get user name
sun.tools.jconsole.ProxyClient#getPassword()->String::: proxy client get password
sun.tools.jconsole.ProxyClient#disconnect()->void::: proxy client disconnect
sun.tools.jconsole.ProxyClient#getDomains()->String[]:::Returns the list of domains in which any MBean is currently registered.
sun.tools.jconsole.ProxyClient#getMBeans(String)->Map:::Returns a map of MBeans with ObjectName as the key and MBeanInfo value of a given domain
sun.tools.jconsole.ProxyClient#getAttributes(ObjectName, String[])->AttributeList:::Returns a list of attributes of a named MBean.
sun.tools.jconsole.ProxyClient#setAttribute(ObjectName, Attribute)->void:::Set the value of a specific attribute of a named MBean.
sun.tools.jconsole.ProxyClient#invoke(ObjectName, String, Object[], String[])->Object:::Invokes an operation of a named MBean.
sun.tools.jconsole.ProxyClient#getClassLoadingMXBean()->ClassLoadingMXBean::: proxy client get class loading bean
sun.tools.jconsole.ProxyClient#getCompilationMXBean()->CompilationMXBean::: proxy client get compilation bean
sun.tools.jconsole.ProxyClient#getMemoryPoolProxies()->Collection::: proxy client get memory pool proxies
sun.tools.jconsole.ProxyClient#getGarbageCollectorMXBeans()->Collection::: proxy client get garbage collector beans
sun.tools.jconsole.ProxyClient#getMemoryMXBean()->MemoryMXBean::: proxy client get memory bean
sun.tools.jconsole.ProxyClient#getRuntimeMXBean()->RuntimeMXBean::: proxy client get runtime bean
sun.tools.jconsole.ProxyClient#getThreadMXBean()->ThreadMXBean::: proxy client get thread bean
sun.tools.jconsole.ProxyClient#getOperatingSystemMXBean()->OperatingSystemMXBean::: proxy client get operating system bean
sun.tools.jconsole.ProxyClient#getSunOperatingSystemMXBean()->com.sun.management.OperatingSystemMXBean::: proxy client get sun operating system bean
sun.tools.jconsole.ProxyClient#getHotSpotDiagnosticMXBean()->HotSpotDiagnosticMXBean::: proxy client get hot spot diagnostic bean
sun.tools.jconsole.ProxyClient#getMXBean(ObjectName, Class)->T::: proxy client get bean
sun.tools.jconsole.ProxyClient#findDeadlockedThreads()->long[]::: proxy client find deadlocked threads
sun.tools.jconsole.ProxyClient#markAsDead()->void::: proxy client mark as dead
sun.tools.jconsole.ProxyClient#isDead()->boolean::: proxy client is dead
sun.tools.jconsole.ProxyClient#isConnected()->boolean::: proxy client is connected
sun.tools.jconsole.ProxyClient#hasPlatformMXBeans()->boolean::: proxy client has platform beans
sun.tools.jconsole.ProxyClient#hasHotSpotDiagnosticMXBean()->boolean::: proxy client has hot spot diagnostic bean
sun.tools.jconsole.ProxyClient#isLockUsageSupported()->boolean::: proxy client is lock usage supported
sun.tools.jconsole.ProxyClient#isRegistered(ObjectName)->boolean::: proxy client is registered
sun.tools.jconsole.ProxyClient#addPropertyChangeListener(PropertyChangeListener)->void::: proxy client add property change listener
sun.tools.jconsole.ProxyClient#addWeakPropertyChangeListener(PropertyChangeListener)->void::: proxy client add weak property change listener
sun.tools.jconsole.ProxyClient#removePropertyChangeListener(PropertyChangeListener)->void::: proxy client remove property change listener
sun.tools.jconsole.ProxyClient.SnapshotMBeanServerConnection#flush()->void:::Flush all cached values of attributes.
sun.tools.jconsole.ProxyClient.Snapshot#newSnapshot(MBeanServerConnection)->SnapshotMBeanServerConnection::: snapshot new snapshot
sun.tools.jconsole.ProxyClient.SnapshotInvocationHandler#flush()->void::: snapshot invocation handler flush
sun.tools.jconsole.ProxyClient.SnapshotInvocationHandler#invoke(Object, Method, Object[])->Object::: snapshot invocation handler invoke
sun.tools.jconsole.Resources#format(String, Object...)->String:::Convenience method for MessageFormat#format(String, Object...).
sun.tools.jconsole.Resources#getMnemonicInt(String)->int:::Returns the mnemonic for a message.
sun.tools.jconsole.Resources#initializeMessages(Class, String)->void:::Initializes all non-final public static fields in the given class with messages from a ResourceBundle.
sun.tools.jconsole.SheetDialog#showOptionDialog(VMPanel, Object, int, int, Icon, Object[], Object)->JOptionPane::: sheet dialog show option dialog
sun.tools.jconsole.SheetDialog.SheetOptionPane#setVisible(boolean)->void::: sheet option pane set visible
sun.tools.jconsole.SheetDialog.SheetOptionPane#paint(Graphics)->void::: sheet option pane paint
sun.tools.jconsole.SummaryTab#getTabName()->String::: summary tab get tab name
sun.tools.jconsole.SummaryTab#newSwingWorker()->SwingWorker::: summary tab new swing worker
sun.tools.jconsole.SummaryTab#formatSummary()->Result::: summary tab format summary
sun.tools.jconsole.SummaryTab#append(String, String)->void::: summary tab append
sun.tools.jconsole.SummaryTab#getOverviewPanels()->OverviewPanel[]::: summary tab get overview panels
sun.tools.jconsole.Tab#newSwingWorker()->SwingWorker::: tab new swing worker
sun.tools.jconsole.Tab#update()->void::: tab update
sun.tools.jconsole.Tab#dispose()->void::: tab dispose
sun.tools.jconsole.Tab#getVMPanel()->VMPanel::: tab get panel
sun.tools.jconsole.Tab#getOverviewPanels()->OverviewPanel[]::: tab get overview panels
sun.tools.jconsole.Tab#workerAdd(Runnable)->void::: tab worker add
sun.tools.jconsole.Tab#getPreferredSize()->Dimension::: tab get preferred size
sun.tools.jconsole.ThreadTab#getTabName()->String::: thread tab get tab name
sun.tools.jconsole.ThreadTab#newSwingWorker()->SwingWorker::: thread tab new swing worker
sun.tools.jconsole.ThreadTab#valueChanged(ListSelectionEvent)->void::: thread tab value changed
sun.tools.jconsole.ThreadTab#getDeadlockedThreadIds()->Long[][]::: thread tab get deadlocked thread ids
sun.tools.jconsole.ThreadTab#actionPerformed(ActionEvent)->void::: thread tab action performed
sun.tools.jconsole.ThreadTab#insertUpdate(DocumentEvent)->void::: thread tab insert update
sun.tools.jconsole.ThreadTab#removeUpdate(DocumentEvent)->void::: thread tab remove update
sun.tools.jconsole.ThreadTab#changedUpdate(DocumentEvent)->void::: thread tab changed update
sun.tools.jconsole.ThreadTab#getOverviewPanels()->OverviewPanel[]::: thread tab get overview panels
sun.tools.jconsole.TimeComboBox#addPlotter(Plotter)->void::: time combo box add plotter
sun.tools.jconsole.TimeComboBox#itemStateChanged(ItemEvent)->void::: time combo box item state changed
sun.tools.jconsole.TimeComboBox#propertyChange(PropertyChangeEvent)->void::: time combo box property change
sun.tools.jconsole.Utilities#updateTransparency(JComponent)->void::: utilities update transparency
sun.tools.jconsole.Utilities#newTableScrollPane(JComponent)->JScrollPane:::A slightly modified border for JScrollPane to be used with a JTable inside a JTabbedPane
sun.tools.jconsole.Utilities#setAccessibleName(Accessible, String)->void::: utilities set accessible name
sun.tools.jconsole.Utilities#setAccessibleDescription(Accessible, String)->void::: utilities set accessible description
sun.tools.jconsole.Utilities#ensureContrast(Color, Color)->Color:::Modifies color c1 to ensure it has acceptable contrast relative to color c2
sun.tools.jconsole.Utilities#getColorBrightness(Color)->double::: utilities get color brightness
sun.tools.jconsole.VariableGridLayout#setFillRow(JComponent, boolean)->void::: variable grid layout set fill row
sun.tools.jconsole.VariableGridLayout#setFillColumn(JComponent, boolean)->void::: variable grid layout set fill column
sun.tools.jconsole.VariableGridLayout#getFillRow(JComponent)->boolean::: variable grid layout get fill row
sun.tools.jconsole.VariableGridLayout#getFillColumn(JComponent)->boolean::: variable grid layout get fill column
sun.tools.jconsole.VariableGridLayout#layoutContainer(Container)->void::: variable grid layout layout container
sun.tools.jconsole.VariableGridLayout#preferredLayoutSize(Container)->Dimension::: variable grid layout preferred layout size
sun.tools.jconsole.Version#print(PrintStream)->void::: version print
sun.tools.jconsole.Version#printFullVersion(PrintStream)->void::: version print full version
sun.tools.jconsole.Version#getVersion()->String::: version get version
sun.tools.jconsole.VMInternalFrame#getVMPanel()->VMPanel::: internal frame get panel
sun.tools.jconsole.VMInternalFrame#getPreferredSize()->Dimension::: internal frame get preferred size
sun.tools.jconsole.VMPanel#getTabInfos()->TabInfo[]::: panel get tab infos
sun.tools.jconsole.VMPanel#setUI(TabbedPaneUI)->void::: panel set i
sun.tools.jconsole.VMPanel#paintComponent(Graphics)->void::: panel paint component
sun.tools.jconsole.VMPanel#getToolTipText(MouseEvent)->String::: panel get tool tip text
sun.tools.jconsole.VMPanel#removeTabAt(int)->void::: panel remove tab at
sun.tools.jconsole.VMPanel#isConnected()->boolean::: panel is connected
sun.tools.jconsole.VMPanel#getUpdateInterval()->int::: panel get update interval
sun.tools.jconsole.VMPanel#getProxyClient(boolean)->ProxyClient:::WARNING NEVER CALL THIS METHOD TO MAKE JMX REQUEST IF  assertThread == false
sun.tools.jconsole.VMPanel#getProxyClient()->ProxyClient::: panel get proxy client
sun.tools.jconsole.VMPanel#cleanUp()->void::: panel clean up
sun.tools.jconsole.VMPanel#connect()->void::: panel connect
sun.tools.jconsole.VMPanel#disconnect()->void::: panel disconnect
sun.tools.jconsole.VMPanel#propertyChange(PropertyChangeEvent)->void::: panel property change
sun.tools.jconsole.VMPanel#updateFrameTitle()->void::: panel update frame title
sun.tools.jconsole.VMPanel#getTabs()->List::: panel get tabs
sun.tools.jconsole.VMPanel#getHostName()->String::: panel get host name
sun.tools.jconsole.VMPanel#getPort()->int::: panel get port
sun.tools.jconsole.VMPanel#getUserName()->String::: panel get user name
sun.tools.jconsole.VMPanel#getUrl()->String::: panel get url
sun.tools.jconsole.VMPanel#getPassword()->String::: panel get password
sun.tools.jconsole.VMPanel#getConnectionName()->String::: panel get connection name
sun.tools.jconsole.VMPanel#getDisplayName()->String::: panel get display name
sun.tools.jconsole.Worker#run()->void::: worker run
sun.tools.jconsole.Worker#stopWorker()->void::: worker stop worker
sun.tools.jconsole.Worker#add(Runnable)->void::: worker add
sun.tools.jconsole.Worker#queueFull()->boolean::: worker queue full

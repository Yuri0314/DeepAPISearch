BorderedComponent.LabeledBorder#paintBorder(Component, Graphics, int, int, int, int):::Paints the border for the specified component with the specified position and size.:::border->getBorder->if->if->border->paintBorder->return->grooveRect->new->Rectangle->labelDim->label->getPreferredSize->baseline->label->getBaseline->ascent->Math->max->descent->diff->insets->if->border->getBorderInsets->else->new->Insets->Math->max->justification->if->c->getComponentOrientation->isLeftToRight->else->switch->break->break->if->if->clipRect->new->Rectangle->saveClip->g->getClipBounds->clipRect->setBounds->if->computeIntersection->g->setClip->border->paintBorder->clipRect->setBounds->if->computeIntersection->g->setClip->border->paintBorder->clipRect->setBounds->if->computeIntersection->g->setClip->border->paintBorder->g->setClip->else->border->paintBorder->label->setLocation->label->setSize
BorderedComponent.LabeledBorder#getBorderInsets(Component, Insets):::Reinitialize the insets parameter with this Border's current Insets.:::border->getBorder->if->if->getBorderInsets->else->i->border->getBorderInsets->else->if->return->label->getHeight->return
BorderedComponent.LabeledBorder#getLabel():::Returns the label of the labeled border.:::return
BorderedComponent.LabeledBorder#setLabel(JComponent):::Sets the title of the titled border:::
BorderedComponent.LabeledBorder#getMinimumSize(Component):::Returns the minimum dimensions this border requires in order to fully display the border and title.:::insets->getBorderInsets->minSize->new->Dimension->label->getWidth->return
JConsole#isLocalAttachAvailable():::local attach is supported in this implementation as jdk.jconsole requires jdk.attach and jdk.management.agent:::return
MemoryPoolStat#getPoolName():::Returns the memory pool name.:::return
MemoryPoolStat#getUsage():::Returns the current memory usage.:::return
MemoryPoolStat#getUsageThreshold():::Returns the current usage threshold:::return
MemoryPoolStat#getCollectionUsageThreshold():::Returns the current collection usage threshold:::return
MemoryPoolStat#getLastGcId():::Returns the Id of GC.:::return
MemoryPoolStat#getLastGcStartTime():::Returns the start time of the most recent GC on the memory pool for this statistics in milliseconds:::return
MemoryPoolStat#getLastGcEndTime():::Returns the end time of the most recent GC on the memory pool for this statistics in milliseconds:::return
MemoryPoolStat#getBeforeGcUsage():::Returns the memory usage before the most recent GC started:::return
MemoryPoolStat#getAfterGcUsage():::Returns the memory usage after the most recent GC finished:::return
ProxyClient#isSslRmiRegistry():::Returns true if the underlying RMI registry is SSL-protected.:::if->isVmConnector->throw->new->UnsupportedOperationException->return
ProxyClient#isSslRmiStub():::Returns true if the retrieved RMI stub is SSL-protected.:::if->isVmConnector->throw->new->UnsupportedOperationException->return
ProxyClient#isVmConnector():::Returns true if this ProxyClient denotes a JMX connector for a JMX VM agent.:::return
ProxyClient#getProxyClient(LocalVirtualMachine):::Gets a proxy client for a given local virtual machine.:::key->getCacheKey->proxyClient->cache->get->if->new->ProxyClient->cache->put->return
ProxyClient#getProxyClient(String, String, String):::Gets a proxy client for a given JMXServiceURL.:::key->getCacheKey->proxyClient->cache->get->if->new->ProxyClient->cache->put->return
ProxyClient#getProxyClient(String, int, String, String):::Gets a proxy client for a given "hostname:port".:::key->getCacheKey->proxyClient->cache->get->if->new->ProxyClient->cache->put->return
ProxyClient#getDomains():::Returns the list of domains in which any MBean is currently registered.:::return->server->getDomains
ProxyClient#getMBeans(String):::Returns a map of MBeans with ObjectName as the key and MBeanInfo value of a given domain:::name->if->try->new->ObjectName->catch->finally->mbeans->server->queryNames->result->mbeans->size->new->HashMap<ObjectName,MBeanInfo>->iterator->mbeans->iterator->while->iterator->hasNext->object->iterator->next->if->o->try->info->server->getMBeanInfo->result->put->catch->finally->return
ProxyClient#getAttributes(ObjectName, String[]):::Returns a list of attributes of a named MBean.:::list->try->server->getAttributes->catch->finally->return
ProxyClient#setAttribute(ObjectName, Attribute):::Set the value of a specific attribute of a named MBean.:::try->server->setAttribute->catch->finally
ProxyClient#invoke(ObjectName, String, Object[], String[]):::Invokes an operation of a named MBean.:::result->try->server->invoke->catch->finally->return
ProxyClient.SnapshotMBeanServerConnection#flush():::Flush all cached values of attributes.:::
Resources#format(String, Object...):::Convenience method for MessageFormat#format(String, Object...).:::return->MessageFormat->format
Resources#getMnemonicInt(String):::Returns the mnemonic for a message.:::integer->MNEMONIC_LOOKUP->get->if->return->integer->intValue->return
Resources#initializeMessages(Class, String):::Initializes all non-final public static fields in the given class with messages from a ResourceBundle.:::rb->try->ResourceBundle->getBundle->catch->finally->foreach->clazz->getFields->if->isWritableField->key->field->getName->message->getMessage->mnemonicInt->findMnemonicInt->removeMnemonicAmpersand->replaceWithPlatformLineFeed->setFieldValue->MNEMONIC_LOOKUP->put
Utilities#newTableScrollPane(JComponent):::A slightly modified border for JScrollPane to be used with a JTable inside a JTabbedPane:::return->new->TableScrollPane
Utilities#ensureContrast(Color, Color):::Modifies color c1 to ensure it has acceptable contrast relative to color c2:::y1->getColorBrightness->y2->getColorBrightness->if->abs->if->setColorBrightness->else->setColorBrightness->return
VMPanel#getProxyClient(boolean):::WARNING NEVER CALL THIS METHOD TO MAKE JMX REQUEST IF  assertThread == false:::if->return->getProxyClient->else->return

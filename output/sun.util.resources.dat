BreakIteratorResourceBundle#getBreakIteratorInfo():::Returns an instance of the corresponding BreakIteratorInfo (basename):::
BreakIteratorResourceBundle#handleGetObject(String)::: break iterator resource bundle handle get object:::if->NON_DATA_KEYS->contains->return->info->getBreakIteratorInfo->if->info->containsKey->return->path->getClass->getPackageName->replace->info->getString->data->try->is->getResourceAsStream->is->readAllBytes->catch->throw->new->InternalError->finally->return
BreakIteratorResourceBundle#getResourceAsStream(String)::: break iterator resource bundle get resource as stream:::pa->getClass->getModule->getResourceAsStream->is->try->AccessController->doPrivileged->catch->throw->e->getException->finally->return
BreakIteratorResourceBundle#getKeys()::: break iterator resource bundle get keys:::return->Collections->keySet->enumeration
BreakIteratorResourceBundle#handleKeySet()::: break iterator resource bundle handle key set:::if->info->getBreakIteratorInfo->k->info->keySet->k->removeAll->synchronized->if->return
Bundles#of(String, Locale, Strategy)::: bundles of:::return->loadBundleOf
Bundles#loadBundleOf(String, Locale, Strategy)::: bundles load bundle of:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->cacheKey->new->CacheKey->bundle->bundleRef->cacheList->get->if->bundleRef->get->if->isValidBundle->return->type->strategy->getResourceBundleProviderType->if->providers->ServiceLoader->loadInstalled->cacheKey->setProviders->candidateLocales->strategy->getCandidateLocales->findBundleOf->if->cacheKey->getCause->throwMissingResourceException->return
Bundles#findBundleOf(CacheKey, Strategy, String, List, int)::: bundles find bundle of:::parent->targetLocale->candidateLocales->get->if->candidateLocales->size->findBundleOf->cleanupCache->cacheKey->setLocale->bundle->findBundleInCache->if->if->return->if->bundleAccess->getParent->return->bundleRef->cacheList->get->if->bundleRef->get->cacheList->remove->providers->cacheKey->getProviders->if->if->strategy->getResourceBundleProviderType->constKey->cacheKey->clone->try->if->loadBundleFromProviders->else->try->bundleName->strategy->toBundleName->c->Class->getModule->forName->if->isAssignableFrom->bundleClass->bundleAccess->newResourceBundle->catch->cacheKey->setCause->finally->catch->finally->if->constKey->getCause->Thread->currentThread->interrupt->if->putBundleInCache->return->if->bundleAccess->getParent->bundleAccess->setParent->bundleAccess->setLocale->bundleAccess->setName->putBundleInCache->return
Bundles#cleanupCache()::: bundles cleanup cache:::ref->while->referenceQueue->poll->cacheList->getCacheKey->remove
Bundles#loadBundleFromProviders(String, Locale, ServiceLoader, CacheKey):::Loads ResourceBundle from service providers.:::return->AccessController->new->PrivilegedAction<>->doPrivileged
Bundles#isValidBundle(ResourceBundle)::: bundles is valid bundle:::return
Bundles#throwMissingResourceException(String, Locale, Throwable):::Throw a MissingResourceException with proper message:::if->e->new->MissingResourceException->e->initCause->throw
Bundles#findBundleInCache(CacheKey):::Finds a bundle in the cache.:::bundleRef->cacheList->get->if->return->return->bundleRef->get
Bundles#putBundleInCache(CacheKey, ResourceBundle):::Put a new bundle in the cache.:::key->cacheKey->clone->bundleRef->new->BundleReference->result->cacheList->putIfAbsent->if->rb->result->get->if->bundleRef->clear->else->cacheList->put->return
Bundles.Strategy#getCandidateLocales(String, Locale):::Returns a list of locales to be looked up for bundle loading.:::
Bundles.Strategy#toBundleName(String, Locale):::Returns the bundle name for the given baseName and locale.:::
Bundles.Strategy#getResourceBundleProviderType(String, Locale):::Returns the service provider type for the given baseName and locale, or null if no service providers should be used.:::
Bundles.CacheKeyReference#getCacheKey()::: cache key reference get cache key:::
Bundles.BundleReference#getCacheKey()::: bundle reference get cache key:::return
Bundles.CacheKey#getName()::: cache key get name:::return
Bundles.CacheKey#setName(String)::: cache key set name:::if->equals->calculateHashCode->return
Bundles.CacheKey#getLocale()::: cache key get locale:::return
Bundles.CacheKey#setLocale(Locale)::: cache key set locale:::if->equals->calculateHashCode->return
Bundles.CacheKey#getProviders()::: cache key get providers:::return
Bundles.CacheKey#setProviders(ServiceLoader)::: cache key set providers:::
Bundles.CacheKey#equals(Object)::: cache key equals:::if->return->try->otherEntry->if->return->return->locale->equals->name->equals->catch->finally->return
Bundles.CacheKey#hashCode()::: cache key hash code:::return
Bundles.CacheKey#calculateHashCode()::: cache key calculate hash code:::name->hashCode->locale->hashCode
Bundles.CacheKey#clone()::: cache key clone:::try->clone->super->clone->return->catch->throw->new->InternalError->finally
Bundles.CacheKey#setCause(Throwable)::: cache key set cause:::if->else->if
Bundles.CacheKey#getCause()::: cache key get cause:::return
Bundles.CacheKey#toString()::: cache key to string:::l->locale->toString->if->l->isEmpty->if->locale->getVariant->isEmpty->locale->getVariant->else->return
CalendarData#getContents()::: calendar data get contents:::return->new->ObjectArrs
CalendarData_en#getContents()::: calendar data_en get contents:::return->new->ObjectArrs
CurrencyNames#getContents()::: currency names get contents:::return->new->ObjectArrs
CurrencyNames_en_US#getContents()::: currency names_en_ s get contents:::return->new->ObjectArrs
LocaleData#getCalendarData(Locale):::Gets a calendar data resource bundle, using privileges to allow accessing a sun.* package.:::return->type->getUtilResourcesPackage->getBundle
LocaleData#getCurrencyNames(Locale):::Gets a currency names resource bundle, using privileges to allow accessing a sun.* package.:::return->type->getUtilResourcesPackage->getBundle
LocaleData#getLocaleNames(Locale):::Gets a locale names resource bundle, using privileges to allow accessing a sun.* package.:::return->type->getUtilResourcesPackage->getBundle
LocaleData#getTimeZoneNames(Locale):::Gets a time zone names resource bundle, using privileges to allow accessing a sun.* package.:::return->type->getUtilResourcesPackage->getBundle
LocaleData#getBreakIteratorInfo(Locale):::Gets a break iterator info resource bundle, using privileges to allow accessing a sun.* package.:::return->type->getTextResourcesPackage->getBundle
LocaleData#getBreakIteratorResources(Locale):::Gets a break iterator resources resource bundle, using privileges to allow accessing a sun.* package.:::return->type->getTextResourcesPackage->getBundle
LocaleData#getCollationData(Locale):::Gets a collation data resource bundle, using privileges to allow accessing a sun.* package.:::return->type->getTextResourcesPackage->getBundle
LocaleData#getDateFormatData(Locale):::Gets a date format data resource bundle, using privileges to allow accessing a sun.* package.:::return->type->getTextResourcesPackage->getBundle
LocaleData#setSupplementary(ParallelListResourceBundle)::: locale data set supplementary:::if->formatData->areParallelContentsComplete->suppName->type->getTextResourcesPackage->setSupplementary
LocaleData#setSupplementary(String, ParallelListResourceBundle)::: locale data set supplementary:::parent->formatData->getParent->resetKeySet->if->setSupplementary->supp->formatData->getLocale->getSupplementary->formatData->setParallelContents->if->formatData->resetKeySet->return
LocaleData#getNumberFormatData(Locale):::Gets a number format data resource bundle, using privileges to allow accessing a sun.* package.:::return->type->getTextResourcesPackage->getBundle
LocaleData#getBundle(String, Locale)::: locale data get bundle:::return->AccessController->new->PrivilegedAction<>->doPrivileged
LocaleData#getSupplementary(String, Locale)::: locale data get supplementary:::return->AccessController->new->PrivilegedAction<>->doPrivileged
LocaleData.LocaleDataResourceBundleProvider#toBundleName(String, Locale):::Changes baseName to its module dependent package name and calls the super class implementation:::return->toBundleName
LocaleData.LocaleDataStrategy#getCandidateLocales(String, Locale)::: locale data strategy get candidate locales:::key->locale->toLanguageTag->candidates->CANDIDATES_MAP->get->if->type->baseName->contains->adapter->LocaleProviderAdapter->forType->getCandidateLocales->defaultControl->getCandidateLocales->lastDot->baseName->lastIndexOf->category->baseName->substring->langtags->getLanguageTagSet->if->langtags->isEmpty->for->itr->candidates->iterator->itr->hasNext->CANDIDATES_MAP->putIfAbsent->return
LocaleData.LocaleDataStrategy#inJavaBaseModule(String, Locale)::: locale data strategy in java base module:::return->JAVA_BASE_LOCALES->contains
LocaleData.LocaleDataStrategy#toBundleName(String, Locale)::: locale data strategy to bundle name:::newBaseName->if->inJavaBaseModule->if->baseName->JRE->getUtilResourcesPackage->startsWith->baseName->JRE->getTextResourcesPackage->startsWith->index->JRE->getUtilResourcesPackage->length->if->baseName->indexOf->DOTCLDR->length->baseName->substring->baseName->substring->return->defaultControl->toBundleName
LocaleData.LocaleDataStrategy#getResourceBundleProviderType(String, Locale)::: locale data strategy get resource bundle provider type:::return->inJavaBaseModule
LocaleData.SupplementaryStrategy#getCandidateLocales(String, Locale)::: supplementary strategy get candidate locales:::return->Arrays->asList
LocaleData.SupplementaryStrategy#getResourceBundleProviderType(String, Locale)::: supplementary strategy get resource bundle provider type:::return->inJavaBaseModule
LocaleData.SupplementaryStrategy#inJavaBaseModule(String, Locale)::: supplementary strategy in java base module:::return->JAVA_BASE_LOCALES->contains
LocaleNames#getContents()::: locale names get contents:::return->new->ObjectArrs
LocaleNames_en#getContents()::: locale names_en get contents:::return->new->ObjectArrs
OpenListResourceBundle#handleGetObject(String)::: open list resource bundle handle get object:::if->throw->new->NullPointerException->loadLookupTablesIfNecessary->return->lookup->get
OpenListResourceBundle#getKeys():::Implementation of ResourceBundle.getKeys.:::parentBundle->return->handleKeySet->parentBundle->getKeys->new->ResourceBundleEnumeration
OpenListResourceBundle#handleKeySet():::Returns a set of keys provided in this resource bundle, including no parents.:::loadLookupTablesIfNecessary->return->lookup->keySet
OpenListResourceBundle#keySet()::: open list resource bundle key set:::if->return->ks->createSet->ks->handleKeySet->addAll->if->ks->parent->keySet->addAll->synchronized->if->return
OpenListResourceBundle#getContents():::See ListResourceBundle class description.:::
OpenListResourceBundle#loadLookupTablesIfNecessary():::Load lookup tables if they haven't been loaded already.:::if->loadLookup
OpenListResourceBundle#loadLookup():::We lazily load the lookup hashtable:::contents->getContents->temp->createMap->for->i->synchronized->if
OpenListResourceBundle#createMap(int):::Lets subclasses provide specialized Map implementations:::return->new->HashMap<>
OpenListResourceBundle#createSet()::: open list resource bundle create set:::return->new->HashSet<>
ParallelListResourceBundle#getContents():::Returns an array in which each item is a pair of objects in an Object array:::
ParallelListResourceBundle#getParent():::Returns the parent of this resource bundle or null if there's no parent.:::return
ParallelListResourceBundle#setParallelContents(OpenListResourceBundle):::Sets the parallel contents to the data given by rb:::if->parallelContents->compareAndSet->else->parallelContents->rb->getContents->compareAndSet
ParallelListResourceBundle#areParallelContentsComplete():::Returns true if any parallel contents have been set or if this bundle is marked as complete.:::if->parallelContents->isMarked->return->done->new->booleanArr->data->parallelContents->get->return
ParallelListResourceBundle#handleGetObject(String)::: parallel list resource bundle handle get object:::if->throw->new->NullPointerException->loadLookupTablesIfNecessary->return->lookup->get
ParallelListResourceBundle#getKeys()::: parallel list resource bundle get keys:::return->Collections->keySet->enumeration
ParallelListResourceBundle#containsKey(String)::: parallel list resource bundle contains key:::return->keySet->contains
ParallelListResourceBundle#handleKeySet()::: parallel list resource bundle handle key set:::loadLookupTablesIfNecessary->return->lookup->keySet
ParallelListResourceBundle#keySet()::: parallel list resource bundle key set:::ks->while->handleKeySet->new->KeySet->synchronized->if->return
ParallelListResourceBundle#resetKeySet():::Discards any cached keyset value:::
ParallelListResourceBundle#loadLookupTablesIfNecessary():::Loads the lookup table if they haven't been loaded already.:::map->if->new->ConcurrentHashMap<>->foreach->getContents->map->put->data->parallelContents->getReference->if->foreach->map->putIfAbsent->parallelContents->set->if->synchronized->if
ParallelListResourceBundle.KeySet#contains(Object)::: key set contains:::if->set->contains->return->return->parent->containsKey
ParallelListResourceBundle.KeySet#iterator()::: key set iterator:::if->return->set->iterator->return->new->Iterator<>
ParallelListResourceBundle.KeySet#size()::: key set size:::if->return->set->size->allset->new->HashSet<>->allset->parent->keySet->addAll->return->allset->size
TimeZoneNames#getContents()::: time zone names get contents:::ACT->new->StringArr->ADELAIDE->new->StringArr->AGT->new->StringArr->AKST->new->StringArr->AMT->new->StringArr->ARAST->new->StringArr->ARMT->new->StringArr->AST->new->StringArr->BDT->new->StringArr->BRISBANE->new->StringArr->BROKEN_HILL->new->StringArr->BRT->new->StringArr->BTT->new->StringArr->CAT->new->StringArr->CET->new->StringArr->CHAST->new->StringArr->CHUT->new->StringArr->CIT->new->StringArr->CLT->new->StringArr->CST->new->StringArr->CTT->new->StringArr->CUBA->new->StringArr->DARWIN->new->StringArr->DUBLIN->new->StringArr->EAT->new->StringArr->EASTER->new->StringArr->EET->new->StringArr->EGT->new->StringArr->EST->new->StringArr->EST_NSW->new->StringArr->FET->new->StringArr->GHMT->new->StringArr->GAMBIER->new->StringArr->GMT->new->StringArr->GMTBST->new->StringArr->GST->new->StringArr->HKT->new->StringArr->HST->new->StringArr->ICT->new->StringArr->IRT->new->StringArr->IRKT->new->StringArr->ISRAEL->new->StringArr->IST->new->StringArr->JST->new->StringArr->KRAT->new->StringArr->KST->new->StringArr->LORD_HOWE->new->StringArr->MHT->new->StringArr->MMT->new->StringArr->MSK->new->StringArr->MST->new->StringArr->MYT->new->StringArr->NORONHA->new->StringArr->NOVT->new->StringArr->NPT->new->StringArr->NST->new->StringArr->NZST->new->StringArr->PITCAIRN->new->StringArr->PKT->new->StringArr->PONT->new->StringArr->PST->new->StringArr->SAST->new->StringArr->SBT->new->StringArr->SGT->new->StringArr->TASMANIA->new->StringArr->TMT->new->StringArr->ULAT->new->StringArr->WAT->new->StringArr->WET->new->StringArr->WIT->new->StringArr->WST_AUS->new->StringArr->SAMOA->new->StringArr->WST_SAMOA->new->StringArr->ChST->new->StringArr->VICTORIA->new->StringArr->UTC->new->StringArr->UZT->new->StringArr->XJT->new->StringArr->YAKT->new->StringArr->return->new->ObjectArrs->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr->new->StringArr
TimeZoneNamesBundle#handleGetObject(String):::Maps time zone IDs to locale-specific names:::val->super->handleGetObject->if->contents->clen->tmpobj->new->StringArr->System->arraycopy->return->return
TimeZoneNamesBundle#createMap(int):::Use LinkedHashMap to preserve the order of bundle entries.:::return->new->LinkedHashMap<>
TimeZoneNamesBundle#createSet():::Use LinkedHashSet to preserve the key order.:::return->new->LinkedHashSet<>
TimeZoneNamesBundle#getContents():::Provides key/value mappings for a specific resource bundle:::
TimeZoneNames_en#getContents()::: time zone names_en get contents:::return->new->ObjectArrs

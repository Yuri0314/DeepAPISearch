org.graalvm.compiler.nodes.virtual.AllocatedObjectNode#getVirtualObject()->VirtualObjectNode::: allocated object node get virtual object
org.graalvm.compiler.nodes.virtual.AllocatedObjectNode#getCommit()->CommitAllocationNode::: allocated object node get commit
org.graalvm.compiler.nodes.virtual.AllocatedObjectNode#setCommit(CommitAllocationNode)->void::: allocated object node set commit
org.graalvm.compiler.nodes.virtual.AllocatedObjectNode#virtualize(VirtualizerTool)->void::: allocated object node virtualize
org.graalvm.compiler.nodes.virtual.AllocatedObjectNode#findLength(FindLengthMode, ConstantReflectionProvider)->ValueNode::: allocated object node find length
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#getVirtualObjects()->List::: commit allocation node get virtual objects
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#getValues()->List::: commit allocation node get values
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#getLocks(int)->List::: commit allocation node get locks
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#getEnsureVirtual()->List::: commit allocation node get ensure virtual
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#verify()->boolean::: commit allocation node verify
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#lower(LoweringTool)->void::: commit allocation node lower
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#getLocationIdentity()->LocationIdentity::: commit allocation node get location identity
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#afterClone(Node)->void::: commit allocation node after clone
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#addLocks(List)->void::: commit allocation node add locks
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#virtualize(VirtualizerTool)->void::: commit allocation node virtualize
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#getDebugProperties(Map)->Map::: commit allocation node get debug properties
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#simplify(SimplifierTool)->void::: commit allocation node simplify
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#estimatedNodeCycles()->NodeCycles::: commit allocation node estimated node cycles
org.graalvm.compiler.nodes.virtual.CommitAllocationNode#estimatedNodeSize()->NodeSize::: commit allocation node estimated node size
org.graalvm.compiler.nodes.virtual.EnsureVirtualizedNode#virtualize(VirtualizerTool)->void::: ensure virtualized node virtualize
org.graalvm.compiler.nodes.virtual.EnsureVirtualizedNode#lower(LoweringTool)->void::: ensure virtualized node lower
org.graalvm.compiler.nodes.virtual.EnsureVirtualizedNode#ensureVirtualFailure(Node, Stamp)->void::: ensure virtualized node ensure virtual failure
org.graalvm.compiler.nodes.virtual.EscapeObjectState#object()->VirtualObjectNode::: escape object state object
org.graalvm.compiler.nodes.virtual.EscapeObjectState#duplicateWithVirtualState()->EscapeObjectState::: escape object state duplicate with virtual state
org.graalvm.compiler.nodes.virtual.EscapeObjectState#isPartOfThisState(VirtualState)->boolean::: escape object state is part of this state
org.graalvm.compiler.nodes.virtual.EscapeObjectState#applyToVirtual(VirtualClosure)->void::: escape object state apply to virtual
org.graalvm.compiler.nodes.virtual.LockState#toString()->String::: lock state to string
org.graalvm.compiler.nodes.virtual.LockState#asList(LockState)->List::: lock state as list
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#type()->ResolvedJavaType::: virtual array node type
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#componentType()->ResolvedJavaType::: virtual array node component type
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#entryCount()->int::: virtual array node entry count
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#generate(NodeLIRBuilderTool)->void::: virtual array node generate
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#toString(Verbosity)->String::: virtual array node to string
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#entryName(int)->String::: virtual array node entry name
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#entryIndexForOffset(MetaAccessProvider, long, JavaKind)->int::: virtual array node entry index for offset
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#entryIndexForOffset(MetaAccessProvider, long, JavaKind, ResolvedJavaType, int)->int::: virtual array node entry index for offset
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#entryKind(int)->JavaKind::: virtual array node entry kind
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#duplicate()->VirtualArrayNode::: virtual array node duplicate
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#getMaterializedRepresentation(FixedNode, ValueNode[], LockState)->ValueNode::: virtual array node get materialized representation
org.graalvm.compiler.nodes.virtual.VirtualArrayNode#findLength(FindLengthMode, ConstantReflectionProvider)->ValueNode::: virtual array node find length
org.graalvm.compiler.nodes.virtual.VirtualBoxingNode#getBoxingKind()->JavaKind::: virtual boxing node get boxing kind
org.graalvm.compiler.nodes.virtual.VirtualBoxingNode#duplicate()->VirtualBoxingNode::: virtual boxing node duplicate
org.graalvm.compiler.nodes.virtual.VirtualBoxingNode#getMaterializedRepresentation(FixedNode, ValueNode[], LockState)->ValueNode::: virtual boxing node get materialized representation
org.graalvm.compiler.nodes.virtual.VirtualBoxingNode#getBoxedValue(VirtualizerTool)->ValueNode::: virtual boxing node get boxed value
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#type()->ResolvedJavaType::: virtual instance node type
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#entryCount()->int::: virtual instance node entry count
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#field(int)->ResolvedJavaField::: virtual instance node field
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#getFields()->ResolvedJavaField[]::: virtual instance node get fields
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#toString(Verbosity)->String::: virtual instance node to string
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#entryName(int)->String::: virtual instance node entry name
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#fieldIndex(ResolvedJavaField)->int::: virtual instance node field index
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#entryIndexForOffset(MetaAccessProvider, long, JavaKind)->int::: virtual instance node entry index for offset
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#entryKind(int)->JavaKind::: virtual instance node entry kind
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#duplicate()->VirtualInstanceNode::: virtual instance node duplicate
org.graalvm.compiler.nodes.virtual.VirtualInstanceNode#getMaterializedRepresentation(FixedNode, ValueNode[], LockState)->ValueNode::: virtual instance node get materialized representation
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#getObjectId()->int::: virtual object node get object id
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#resetObjectId()->void::: virtual object node reset object id
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#setObjectId(int)->void::: virtual object node set object id
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#afterClone(Node)->void::: virtual object node after clone
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#type()->ResolvedJavaType:::The type of object described by this VirtualObjectNode
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#entryCount()->int:::The number of entries this virtual object has
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#entryName(int)->String:::Returns the name of the entry at the given index
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#entryIndexForOffset(MetaAccessProvider, long, JavaKind)->int:::If the given index denotes an entry in this virtual object, the index of this entry is returned
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#entryKind(int)->JavaKind:::Returns the JavaKind of the entry at the given index.
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#duplicate()->VirtualObjectNode:::Returns an exact duplicate of this virtual object node, which has not been added to the graph yet.
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#hasIdentity()->boolean:::Specifies whether this virtual object has an object identity
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#setIdentity(boolean)->void::: virtual object node set identity
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#getMaterializedRepresentation(FixedNode, ValueNode[], LockState)->ValueNode:::Returns a node that can be used to materialize this virtual object
org.graalvm.compiler.nodes.virtual.VirtualObjectNode#generate(NodeLIRBuilderTool)->void::: virtual object node generate

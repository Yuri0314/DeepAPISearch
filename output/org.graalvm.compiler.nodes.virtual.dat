AllocatedObjectNode#getVirtualObject()::: allocated object node get virtual object:::return
AllocatedObjectNode#getCommit()::: allocated object node get commit:::return
AllocatedObjectNode#setCommit(CommitAllocationNode)::: allocated object node set commit:::updateUsages
AllocatedObjectNode#virtualize(VirtualizerTool)::: allocated object node virtualize:::tool->getVirtualObject->replaceWithVirtual
AllocatedObjectNode#findLength(FindLengthMode, ConstantReflectionProvider)::: allocated object node find length:::return->GraphUtil->arrayLength
CommitAllocationNode#getVirtualObjects()::: commit allocation node get virtual objects:::return
CommitAllocationNode#getValues()::: commit allocation node get values:::return
CommitAllocationNode#getLocks(int)::: commit allocation node get locks:::return->locks->lockIndexes->get->lockIndexes->get->subList
CommitAllocationNode#getEnsureVirtual()::: commit allocation node get ensure virtual:::return
CommitAllocationNode#verify()::: commit allocation node verify:::virtualObjects->size->lockIndexes->size->assertTrue->lockIndexes->lockIndexes->size->get->locks->size->assertTrue->valueCount->foreach->virtual->entryCount->values->size->assertTrue->virtualObjects->size->ensureVirtual->size->assertTrue->return->super->verify
CommitAllocationNode#lower(LoweringTool)::: commit allocation node lower:::for->i->virtualObjects->size->tool->getLowerer->lower
CommitAllocationNode#getLocationIdentity()::: commit allocation node get location identity:::return->locks->isEmpty->LocationIdentity->init->LocationIdentity->any
CommitAllocationNode#afterClone(Node)::: commit allocation node after clone:::new->ArrayList<>
CommitAllocationNode#addLocks(List)::: commit allocation node add locks:::locks->addAll->lockIndexes->locks->size->add
CommitAllocationNode#virtualize(VirtualizerTool)::: commit allocation node virtualize:::pos->for->i->virtualObjects->size->tool->delete
CommitAllocationNode#getDebugProperties(Map)::: commit allocation node get debug properties:::properties->super->getDebugProperties->valuePos->for->objIndex->virtualObjects->size->return
CommitAllocationNode#simplify(SimplifierTool)::: commit allocation node simplify:::used->virtualObjects->size->new->booleanArr->usedCount->foreach->usages->filter->index->virtualObjects->addObject->getVirtualObject->indexOf->if->inputSnapshot->inputs->snapshot->graph->removeFixed->foreach->tool->removeIfUnused->return->progress->do->valuePos->for->objIndex->virtualObjects->size->while->if->virtualObjects->size->newVirtualObjects->new->ArrayList<>->newLocks->new->ArrayList<>->newLockIndexes->new->ArrayList<>->newEnsureVirtual->new->ArrayList<>->newLockIndexes->add->newValues->new->ArrayList<>->valuePos->for->objIndex->virtualObjects->size->virtualObjects->clear->virtualObjects->addAll->locks->clear->locks->addAll->values->clear->values->addAll
CommitAllocationNode#estimatedNodeCycles()::: commit allocation node estimated node cycles:::v->getVirtualObjects->fieldWriteCount->for->i->v->size->rawValueWrites->NodeCycles->cycles->compute->rawValuesTlabBumps->cycles->return->NodeCycles->compute
CommitAllocationNode#estimatedNodeSize()::: commit allocation node estimated node size:::v->getVirtualObjects->fieldWriteCount->for->i->v->size->rawValueWrites->NodeSize->size->compute->rawValuesTlabBumps->size->return->NodeSize->compute
EnsureVirtualizedNode#virtualize(VirtualizerTool)::: ensure virtualized node virtualize:::alias->tool->getAlias->if->virtual->if->exception->virtual->type->getName->new->VerificationError->throw->GraphUtil->approxSourceException->if->tool->setEnsureVirtualized->tool->delete
EnsureVirtualizedNode#lower(LoweringTool)::: ensure virtualized node lower:::object->stamp->ensureVirtualFailure
EnsureVirtualizedNode#ensureVirtualFailure(Node, Stamp)::: ensure virtualized node ensure virtual failure:::additionalReason->if->fixedWithNextNode->next->fixedWithNextNode->next->if->else->if->else->exception->StampTool->typeOrNull->getName->new->VerificationError->pos->if->next->else->if->merge->else->throw->GraphUtil->approxSourceException
EscapeObjectState#object()::: escape object state object:::return
EscapeObjectState#duplicateWithVirtualState()::: escape object state duplicate with virtual state:::
EscapeObjectState#isPartOfThisState(VirtualState)::: escape object state is part of this state:::return
EscapeObjectState#applyToVirtual(VirtualClosure)::: escape object state apply to virtual:::closure->apply
LockState#toString()::: lock state to string:::return->monitorId->getLockDepth
LockState#asList(LockState)::: lock state as list:::if->return->Collections->emptyList->else->result->new->ArrayList<>->a->do->result->add->while->return
VirtualArrayNode#type()::: virtual array node type:::return->componentType->getArrayClass
VirtualArrayNode#componentType()::: virtual array node component type:::return
VirtualArrayNode#entryCount()::: virtual array node entry count:::return
VirtualArrayNode#generate(NodeLIRBuilderTool)::: virtual array node generate:::
VirtualArrayNode#toString(Verbosity)::: virtual array node to string:::if->return->super->toString->getObjectId->componentType->getName->else->return->super->toString
VirtualArrayNode#entryName(int)::: virtual array node entry name:::return
VirtualArrayNode#entryIndexForOffset(MetaAccessProvider, long, JavaKind)::: virtual array node entry index for offset:::return->entryIndexForOffset
VirtualArrayNode#entryIndexForOffset(MetaAccessProvider, long, JavaKind, ResolvedJavaType, int)::: virtual array node entry index for offset:::baseOffset->metaAccess->componentType->getJavaKind->getArrayBaseOffset->indexScale->metaAccess->componentType->getJavaKind->getArrayIndexScale->offset->if->ByteOrder->nativeOrder->componentType->isPrimitive->componentByteCount->componentType->getJavaKind->getByteCount->Math->expectedEntryKind->getByteCount->min->else->index->if->return->elementIndex->if->return->return
VirtualArrayNode#entryKind(int)::: virtual array node entry kind:::return->componentType->getJavaKind
VirtualArrayNode#duplicate()::: virtual array node duplicate:::node->new->VirtualArrayNode->node->this->getNodeSourcePosition->setNodeSourcePosition->return
VirtualArrayNode#getMaterializedRepresentation(FixedNode, ValueNode[], LockState)::: virtual array node get materialized representation:::node->new->AllocatedObjectNode->node->this->getNodeSourcePosition->setNodeSourcePosition->return
VirtualArrayNode#findLength(FindLengthMode, ConstantReflectionProvider)::: virtual array node find length:::return->ConstantNode->forInt
VirtualBoxingNode#getBoxingKind()::: virtual boxing node get boxing kind:::return
VirtualBoxingNode#duplicate()::: virtual boxing node duplicate:::node->type->new->VirtualBoxingNode->node->this->getNodeSourcePosition->setNodeSourcePosition->return
VirtualBoxingNode#getMaterializedRepresentation(FixedNode, ValueNode[], LockState)::: virtual boxing node get materialized representation:::node->type->new->BoxNode->node->this->getNodeSourcePosition->setNodeSourcePosition->return
VirtualBoxingNode#getBoxedValue(VirtualizerTool)::: virtual boxing node get boxed value:::return->tool->getEntry
VirtualInstanceNode#type()::: virtual instance node type:::return
VirtualInstanceNode#entryCount()::: virtual instance node entry count:::return
VirtualInstanceNode#field(int)::: virtual instance node field:::return
VirtualInstanceNode#getFields()::: virtual instance node get fields:::return
VirtualInstanceNode#toString(Verbosity)::: virtual instance node to string:::if->return->super->toString->getObjectId->type->toJavaName->else->return->super->toString
VirtualInstanceNode#entryName(int)::: virtual instance node entry name:::return->getName
VirtualInstanceNode#fieldIndex(ResolvedJavaField)::: virtual instance node field index:::for->i->return
VirtualInstanceNode#entryIndexForOffset(MetaAccessProvider, long, JavaKind)::: virtual instance node entry index for offset:::return->type->findInstanceFieldWithOffset->fieldIndex
VirtualInstanceNode#entryKind(int)::: virtual instance node entry kind:::return->getJavaKind
VirtualInstanceNode#duplicate()::: virtual instance node duplicate:::node->super->hasIdentity->new->VirtualInstanceNode->node->this->getNodeSourcePosition->setNodeSourcePosition->return
VirtualInstanceNode#getMaterializedRepresentation(FixedNode, ValueNode[], LockState)::: virtual instance node get materialized representation:::node->new->AllocatedObjectNode->node->this->getNodeSourcePosition->setNodeSourcePosition->return
VirtualObjectNode#getObjectId()::: virtual object node get object id:::return
VirtualObjectNode#resetObjectId()::: virtual object node reset object id:::
VirtualObjectNode#setObjectId(int)::: virtual object node set object id:::
VirtualObjectNode#afterClone(Node)::: virtual object node after clone:::super->afterClone->resetObjectId
VirtualObjectNode#type():::The type of object described by this VirtualObjectNode:::
VirtualObjectNode#entryCount():::The number of entries this virtual object has:::
VirtualObjectNode#entryName(int):::Returns the name of the entry at the given index:::
VirtualObjectNode#entryIndexForOffset(MetaAccessProvider, long, JavaKind):::If the given index denotes an entry in this virtual object, the index of this entry is returned:::
VirtualObjectNode#entryKind(int):::Returns the JavaKind of the entry at the given index.:::
VirtualObjectNode#duplicate():::Returns an exact duplicate of this virtual object node, which has not been added to the graph yet.:::
VirtualObjectNode#hasIdentity():::Specifies whether this virtual object has an object identity:::return
VirtualObjectNode#setIdentity(boolean)::: virtual object node set identity:::
VirtualObjectNode#getMaterializedRepresentation(FixedNode, ValueNode[], LockState):::Returns a node that can be used to materialize this virtual object:::
VirtualObjectNode#generate(NodeLIRBuilderTool)::: virtual object node generate:::

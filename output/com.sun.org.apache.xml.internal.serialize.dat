com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#asDocumentHandler()->DocumentHandler::: base markup serializer as document handler
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#asContentHandler()->ContentHandler::: base markup serializer as content handler
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#asDOMSerializer()->DOMSerializer::: base markup serializer as serializer
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#setOutputByteStream(OutputStream)->void::: base markup serializer set output byte stream
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#setOutputCharStream(Writer)->void::: base markup serializer set output char stream
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#setOutputFormat(OutputFormat)->void::: base markup serializer set output format
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#reset()->boolean::: base markup serializer reset
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#cleanup()->void::: base markup serializer cleanup
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#prepare()->void::: base markup serializer prepare
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#serialize(Element)->void:::Serializes the DOM element using the previously specified writer and output format
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#serialize(Node)->void:::Serializes a node using the previously specified writer and output format
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#serialize(DocumentFragment)->void:::Serializes the DOM document fragmnt using the previously specified writer and output format
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#serialize(Document)->void:::Serializes the DOM document using the previously specified writer and output format
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#startDocument()->void::: base markup serializer start document
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#characters(char[], int, int)->void::: base markup serializer characters
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#ignorableWhitespace(char[], int, int)->void::: base markup serializer ignorable whitespace
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#processingInstruction(String, String)->void::: base markup serializer processing instruction
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#processingInstructionIO(String, String)->void::: base markup serializer processing instruction o
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#comment(char[], int, int)->void::: base markup serializer comment
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#comment(String)->void::: base markup serializer comment
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#startCDATA()->void::: base markup serializer start a
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#endCDATA()->void::: base markup serializer end a
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#startNonEscaping()->void::: base markup serializer start non escaping
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#endNonEscaping()->void::: base markup serializer end non escaping
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#startPreserving()->void::: base markup serializer start preserving
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#endPreserving()->void::: base markup serializer end preserving
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#endDocument()->void:::Called at the end of the document to wrap it up
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#startEntity(String)->void::: base markup serializer start entity
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#endEntity(String)->void::: base markup serializer end entity
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#setDocumentLocator(Locator)->void::: base markup serializer set document locator
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#skippedEntity(String)->void::: base markup serializer skipped entity
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#startPrefixMapping(String, String)->void::: base markup serializer start prefix mapping
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#endPrefixMapping(String)->void::: base markup serializer end prefix mapping
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#startDTD(String, String, String)->void::: base markup serializer start d
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#endDTD()->void::: base markup serializer end d
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#elementDecl(String, String)->void::: base markup serializer element decl
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#attributeDecl(String, String, String, String, String)->void::: base markup serializer attribute decl
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#internalEntityDecl(String, String)->void::: base markup serializer internal entity decl
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#externalEntityDecl(String, String, String)->void::: base markup serializer external entity decl
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#unparsedEntityDecl(String, String, String, String)->void::: base markup serializer unparsed entity decl
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#notationDecl(String, String, String)->void::: base markup serializer notation decl
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#serializeNode(Node)->void:::Serialize the DOM node
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#serializeDocument()->void::: base markup serializer serialize document
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#serializeDTD(String)->void::: base markup serializer serialize d
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#content()->ElementState:::Must be called by a method about to print any type of content
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#characters(String)->void:::Called to print the text contents in the prevailing element format
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#getEntityRef(int)->String:::Returns the suitable entity reference for this character value, or null if no such entity exists
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#serializeElement(Element)->void:::Called to serializee the DOM element
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#serializePreRoot()->void:::Comments and PIs cannot be serialized before the root element, because the root element serializes the document type, which generally comes first
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#printCDATAText(String)->void::: base markup serializer print text
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#surrogates(int, int, boolean)->void::: base markup serializer surrogates
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#printText(char[], int, int, boolean, boolean)->void:::Called to print additional text with whitespace handling
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#printText(String, boolean, boolean)->void::: base markup serializer print text
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#printDoctypeURL(String)->void:::Print a document type public or system identifier URL
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#printEscaped(int)->void::: base markup serializer print escaped
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#printHex(int)->void:::Escapes chars
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#printEscaped(String)->void:::Escapes a string so it may be printed as text content or attribute value
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#getElementState()->ElementState:::Return the state of the current element.
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#enterElementState(String, String, String, boolean)->ElementState:::Enter a new element state for the specified element
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#leaveElementState()->ElementState:::Leave the current element state and return to the state of the parent element
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#isDocumentState()->boolean:::Returns true if in the state of the document
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#clearDocumentState()->void:::Clears document state
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#getPrefix(String)->String:::Returns the namespace prefix for the specified URI
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#modifyDOMError(String, short, String, Node)->DOMError:::The method modifies global DOM error object
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#fatalError(String)->void::: base markup serializer fatal error
com.sun.org.apache.xml.internal.serialize.BaseMarkupSerializer#checkUnboundNamespacePrefixedNode(Node)->void:::DOM level 3: Check a node to determine if it contains unbound namespace prefixes.
com.sun.org.apache.xml.internal.serialize.DOMSerializer#serialize(Element)->void:::Serialized the DOM element
com.sun.org.apache.xml.internal.serialize.DOMSerializer#serialize(Document)->void:::Serializes the DOM document
com.sun.org.apache.xml.internal.serialize.DOMSerializer#serialize(DocumentFragment)->void:::Serializes the DOM document fragment
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#getDomConfig()->DOMConfiguration::: serializer impl get dom config
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#setParameter(String, Object)->void:::DOM L3-EXPERIMENTAL: Setter for boolean and object parameters
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#canSetParameter(String, Object)->boolean:::DOM L3-EXPERIMENTAL: Check if parameter can be set
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#getParameterNames()->DOMStringList:::DOM Level 3 Core CR - Experimental
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#getParameter(String)->Object:::DOM L3-EXPERIMENTAL: Getter for boolean and object parameters
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#writeToString(Node)->String:::DOM L3 EXPERIMENTAL: Serialize the specified node as described above in the description of LSSerializer
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#setNewLine(String)->void:::DOM L3 EXPERIMENTAL: The end-of-line sequence of characters to be used in the XML being written out
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#getNewLine()->String:::DOM L3 EXPERIMENTAL: The end-of-line sequence of characters to be used in the XML being written out
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#getFilter()->LSSerializerFilter:::When the application provides a filter, the serializer will call out to the filter before serializing each Node
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#setFilter(LSSerializerFilter)->void:::When the application provides a filter, the serializer will call out to the filter before serializing each Node
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#write(Node, LSOutput)->boolean:::Serialize the specified node as described above in the general description of the LSSerializer interface
com.sun.org.apache.xml.internal.serialize.DOMSerializerImpl#writeToURI(Node, String)->boolean:::Serialize the specified node as described above in the general description of the LSSerializer interface
com.sun.org.apache.xml.internal.serialize.EncodingInfo#getIANAName()->String:::Returns a MIME charset name of this encoding.
com.sun.org.apache.xml.internal.serialize.EncodingInfo#getWriter(OutputStream)->Writer:::Returns a writer for this encoding based on an output stream.
com.sun.org.apache.xml.internal.serialize.EncodingInfo#isPrintable(char)->boolean:::Checks whether the specified character is printable or not in this encoding.
com.sun.org.apache.xml.internal.serialize.EncodingInfo#testJavaEncodingName(String)->void::: encoding info test java encoding name
com.sun.org.apache.xml.internal.serialize.Encodings#getEncodingInfo(String, boolean)->EncodingInfo::: encodings get encoding info
com.sun.org.apache.xml.internal.serialize.HTMLdtd#isEmptyTag(String)->boolean:::Returns true if element is declared to be empty
com.sun.org.apache.xml.internal.serialize.HTMLdtd#isElementContent(String)->boolean:::Returns true if element is declared to have element content
com.sun.org.apache.xml.internal.serialize.HTMLdtd#isPreserveSpace(String)->boolean:::Returns true if element's textual contents preserves spaces
com.sun.org.apache.xml.internal.serialize.HTMLdtd#isOptionalClosing(String)->boolean:::Returns true if element's closing tag is optional and need not exist
com.sun.org.apache.xml.internal.serialize.HTMLdtd#isOnlyOpening(String)->boolean:::Returns true if element's closing tag is generally not printed
com.sun.org.apache.xml.internal.serialize.HTMLdtd#isClosing(String, String)->boolean:::Returns true if the opening of one element (<tt>tagName</tt>) implies the closing of another open element (<tt>openTag</tt>)
com.sun.org.apache.xml.internal.serialize.HTMLdtd#isURI(String, String)->boolean:::Returns true if the specified attribute it a URI and should be escaped appropriately
com.sun.org.apache.xml.internal.serialize.HTMLdtd#isBoolean(String, String)->boolean:::Returns true if the specified attribute is a boolean and should be printed without the value
com.sun.org.apache.xml.internal.serialize.HTMLdtd#charFromName(String)->int:::Returns the value of an HTML character reference by its name
com.sun.org.apache.xml.internal.serialize.HTMLdtd#fromChar(int)->String:::Returns the name of an HTML character reference based on its character value
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#setOutputFormat(OutputFormat)->void::: serializer set output format
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#setXHTMLNamespace(String)->void::: serializer set namespace
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#startElement(String, String, String, Attributes)->void::: serializer start element
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#endElement(String, String, String)->void::: serializer end element
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#endElementIO(String, String, String)->void::: serializer end element o
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#characters(char[], int, int)->void::: serializer characters
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#startElement(String, AttributeList)->void::: serializer start element
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#endElement(String)->void::: serializer end element
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#startDocument(String)->void:::Called to serialize the document's DOCTYPE by the root element
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#serializeElement(Element)->void:::Called to serialize a DOM element
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#characters(String)->void::: serializer characters
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#getEntityRef(int)->String::: serializer get entity ref
com.sun.org.apache.xml.internal.serialize.HTMLSerializer#escapeURI(String)->String::: serializer escape i
com.sun.org.apache.xml.internal.serialize.IndentPrinter#enterDTD()->void:::Called by any of the DTD handlers to enter DTD mode
com.sun.org.apache.xml.internal.serialize.IndentPrinter#leaveDTD()->String:::Called by the root element to leave DTD mode and if any DTD parts were printer, will return a string with their textual content.
com.sun.org.apache.xml.internal.serialize.IndentPrinter#printText(String)->void:::Called to print additional text
com.sun.org.apache.xml.internal.serialize.IndentPrinter#printText(StringBuffer)->void::: indent printer print text
com.sun.org.apache.xml.internal.serialize.IndentPrinter#printText(char)->void::: indent printer print text
com.sun.org.apache.xml.internal.serialize.IndentPrinter#printText(char[], int, int)->void::: indent printer print text
com.sun.org.apache.xml.internal.serialize.IndentPrinter#printSpace()->void:::Called to print a single space between text parts that may be broken into separate lines
com.sun.org.apache.xml.internal.serialize.IndentPrinter#breakLine()->void:::Called to print a line consisting of the text accumulated so far
com.sun.org.apache.xml.internal.serialize.IndentPrinter#breakLine(boolean)->void::: indent printer break line
com.sun.org.apache.xml.internal.serialize.IndentPrinter#flushLine(boolean)->void:::Flushes the line accumulated so far to the writer and get ready to accumulate the next line
com.sun.org.apache.xml.internal.serialize.IndentPrinter#flush()->void:::Flush the output stream
com.sun.org.apache.xml.internal.serialize.IndentPrinter#indent()->void:::Increment the indentation for the next line.
com.sun.org.apache.xml.internal.serialize.IndentPrinter#unindent()->void:::Decrement the indentation for the next line.
com.sun.org.apache.xml.internal.serialize.IndentPrinter#getNextIndent()->int::: indent printer get next indent
com.sun.org.apache.xml.internal.serialize.IndentPrinter#setNextIndent(int)->void::: indent printer set next indent
com.sun.org.apache.xml.internal.serialize.IndentPrinter#setThisIndent(int)->void::: indent printer set this indent
com.sun.org.apache.xml.internal.serialize.OutputFormat#getMethod()->String:::Returns the method specified for this output format
com.sun.org.apache.xml.internal.serialize.OutputFormat#setMethod(String)->void:::Sets the method for this output format.
com.sun.org.apache.xml.internal.serialize.OutputFormat#getVersion()->String:::Returns the version for this output method
com.sun.org.apache.xml.internal.serialize.OutputFormat#setVersion(String)->void:::Sets the version for this output method
com.sun.org.apache.xml.internal.serialize.OutputFormat#getIndent()->int:::Returns the indentation specified
com.sun.org.apache.xml.internal.serialize.OutputFormat#getIndenting()->boolean:::Returns true if indentation was specified.
com.sun.org.apache.xml.internal.serialize.OutputFormat#setIndent(int)->void:::Sets the indentation
com.sun.org.apache.xml.internal.serialize.OutputFormat#setIndenting(boolean)->void:::Sets the indentation on and off
com.sun.org.apache.xml.internal.serialize.OutputFormat#getEncoding()->String:::Returns the specified encoding
com.sun.org.apache.xml.internal.serialize.OutputFormat#setEncoding(String)->void:::Sets the encoding for this output method
com.sun.org.apache.xml.internal.serialize.OutputFormat#setEncoding(EncodingInfo)->void:::Sets the encoding for this output method with an EncodingInfo instance.
com.sun.org.apache.xml.internal.serialize.OutputFormat#getEncodingInfo()->EncodingInfo:::Returns an EncodingInfo instance for the encoding.
com.sun.org.apache.xml.internal.serialize.OutputFormat#setAllowJavaNames(boolean)->void:::Sets whether java encoding names are permitted
com.sun.org.apache.xml.internal.serialize.OutputFormat#setAllowJavaNames()->boolean:::Returns whether java encoding names are permitted
com.sun.org.apache.xml.internal.serialize.OutputFormat#getMediaType()->String:::Returns the specified media type, or null
com.sun.org.apache.xml.internal.serialize.OutputFormat#setMediaType(String)->void:::Sets the media type.
com.sun.org.apache.xml.internal.serialize.OutputFormat#setDoctype(String, String)->void:::Sets the document type public and system identifiers
com.sun.org.apache.xml.internal.serialize.OutputFormat#getDoctypePublic()->String:::Returns the specified document type public identifier, or null.
com.sun.org.apache.xml.internal.serialize.OutputFormat#getDoctypeSystem()->String:::Returns the specified document type system identifier, or null.
com.sun.org.apache.xml.internal.serialize.OutputFormat#getOmitComments()->boolean:::Returns true if comments should be ommited
com.sun.org.apache.xml.internal.serialize.OutputFormat#setOmitComments(boolean)->void:::Sets comment omitting on and off.
com.sun.org.apache.xml.internal.serialize.OutputFormat#getOmitDocumentType()->boolean:::Returns true if the DOCTYPE declaration should be ommited
com.sun.org.apache.xml.internal.serialize.OutputFormat#setOmitDocumentType(boolean)->void:::Sets DOCTYPE declaration omitting on and off.
com.sun.org.apache.xml.internal.serialize.OutputFormat#getOmitXMLDeclaration()->boolean:::Returns true if the XML document declaration should be ommited
com.sun.org.apache.xml.internal.serialize.OutputFormat#setOmitXMLDeclaration(boolean)->void:::Sets XML declaration omitting on and off.
com.sun.org.apache.xml.internal.serialize.OutputFormat#getStandalone()->boolean:::Returns true if the document type is standalone
com.sun.org.apache.xml.internal.serialize.OutputFormat#setStandalone(boolean)->void:::Sets document DTD standalone
com.sun.org.apache.xml.internal.serialize.OutputFormat#getCDataElements()->String[]:::Returns a list of all the elements whose text node children should be output as CDATA, or null if no such elements were specified.
com.sun.org.apache.xml.internal.serialize.OutputFormat#isCDataElement(String)->boolean:::Returns true if the text node children of the given elements should be output as CDATA.
com.sun.org.apache.xml.internal.serialize.OutputFormat#setCDataElements(String[])->void:::Sets the list of elements for which text node children should be output as CDATA.
com.sun.org.apache.xml.internal.serialize.OutputFormat#getNonEscapingElements()->String[]:::Returns a list of all the elements whose text node children should be output unescaped (no character references), or null if no such elements were specified.
com.sun.org.apache.xml.internal.serialize.OutputFormat#isNonEscapingElement(String)->boolean:::Returns true if the text node children of the given elements should be output unescaped.
com.sun.org.apache.xml.internal.serialize.OutputFormat#setNonEscapingElements(String[])->void:::Sets the list of elements for which text node children should be output unescaped (no character references).
com.sun.org.apache.xml.internal.serialize.OutputFormat#getLineSeparator()->String:::Returns a specific line separator to use
com.sun.org.apache.xml.internal.serialize.OutputFormat#setLineSeparator(String)->void:::Sets the line separator
com.sun.org.apache.xml.internal.serialize.OutputFormat#getPreserveSpace()->boolean:::Returns true if the default behavior for this format is to preserve spaces
com.sun.org.apache.xml.internal.serialize.OutputFormat#setPreserveSpace(boolean)->void:::Sets space preserving as the default behavior
com.sun.org.apache.xml.internal.serialize.OutputFormat#getLineWidth()->int:::Return the selected line width for breaking up long lines
com.sun.org.apache.xml.internal.serialize.OutputFormat#setLineWidth(int)->void:::Sets the line width
com.sun.org.apache.xml.internal.serialize.OutputFormat#getPreserveEmptyAttributes()->boolean:::Returns the preserveEmptyAttribute flag
com.sun.org.apache.xml.internal.serialize.OutputFormat#setPreserveEmptyAttributes(boolean)->void:::Sets the preserveEmptyAttribute flag
com.sun.org.apache.xml.internal.serialize.OutputFormat#getLastPrintable()->char:::Returns the last printable character based on the selected encoding
com.sun.org.apache.xml.internal.serialize.OutputFormat#whichMediaType(String)->String:::Returns the suitable media format for a document output with the specified method.
com.sun.org.apache.xml.internal.serialize.Printer#getException()->IOException::: printer get exception
com.sun.org.apache.xml.internal.serialize.Printer#enterDTD()->void:::Called by any of the DTD handlers to enter DTD mode
com.sun.org.apache.xml.internal.serialize.Printer#leaveDTD()->String:::Called by the root element to leave DTD mode and if any DTD parts were printer, will return a string with their textual content.
com.sun.org.apache.xml.internal.serialize.Printer#printText(String)->void::: printer print text
com.sun.org.apache.xml.internal.serialize.Printer#printText(StringBuffer)->void::: printer print text
com.sun.org.apache.xml.internal.serialize.Printer#printText(char[], int, int)->void::: printer print text
com.sun.org.apache.xml.internal.serialize.Printer#printText(char)->void::: printer print text
com.sun.org.apache.xml.internal.serialize.Printer#printSpace()->void::: printer print space
com.sun.org.apache.xml.internal.serialize.Printer#breakLine()->void::: printer break line
com.sun.org.apache.xml.internal.serialize.Printer#breakLine(boolean)->void::: printer break line
com.sun.org.apache.xml.internal.serialize.Printer#flushLine(boolean)->void::: printer flush line
com.sun.org.apache.xml.internal.serialize.Printer#flush()->void:::Flush the output stream
com.sun.org.apache.xml.internal.serialize.Printer#indent()->void::: printer indent
com.sun.org.apache.xml.internal.serialize.Printer#unindent()->void::: printer unindent
com.sun.org.apache.xml.internal.serialize.Printer#getNextIndent()->int::: printer get next indent
com.sun.org.apache.xml.internal.serialize.Printer#setNextIndent(int)->void::: printer set next indent
com.sun.org.apache.xml.internal.serialize.Printer#setThisIndent(int)->void::: printer set this indent
com.sun.org.apache.xml.internal.serialize.Serializer#setOutputByteStream(OutputStream)->void:::Specifies an output stream to which the document should be serialized
com.sun.org.apache.xml.internal.serialize.Serializer#setOutputCharStream(Writer)->void:::Specifies a writer to which the document should be serialized
com.sun.org.apache.xml.internal.serialize.Serializer#setOutputFormat(OutputFormat)->void:::Specifies an output format for this serializer
com.sun.org.apache.xml.internal.serialize.Serializer#asDocumentHandler()->DocumentHandler:::Return a DocumentHandler interface into this serializer
com.sun.org.apache.xml.internal.serialize.Serializer#asContentHandler()->ContentHandler:::Return a ContentHandler interface into this serializer
com.sun.org.apache.xml.internal.serialize.Serializer#asDOMSerializer()->DOMSerializer:::Return a DOMSerializer interface into this serializer
com.sun.org.apache.xml.internal.serialize.SerializerFactory#registerSerializerFactory(SerializerFactory)->void:::Register a serializer factory, keyed by the given method string.
com.sun.org.apache.xml.internal.serialize.SerializerFactory#getSerializerFactory(String)->SerializerFactory:::Register a serializer factory, keyed by the given method string.
com.sun.org.apache.xml.internal.serialize.SerializerFactory#getSupportedMethod()->String:::Returns the method supported by this factory and used to register the factory
com.sun.org.apache.xml.internal.serialize.SerializerFactory#makeSerializer(OutputFormat)->Serializer:::Create a new serializer based on the OutputFormat
com.sun.org.apache.xml.internal.serialize.SerializerFactory#makeSerializer(Writer, OutputFormat)->Serializer:::Create a new serializer, based on the OutputFormat and using the writer as the output character stream
com.sun.org.apache.xml.internal.serialize.SerializerFactory#makeSerializer(OutputStream, OutputFormat)->Serializer:::Create a new serializer, based on the OutputFormat and using the output byte stream and the encoding specified in the output format.
com.sun.org.apache.xml.internal.serialize.SerializerFactoryImpl#makeSerializer(OutputFormat)->Serializer::: serializer factory impl make serializer
com.sun.org.apache.xml.internal.serialize.SerializerFactoryImpl#makeSerializer(Writer, OutputFormat)->Serializer::: serializer factory impl make serializer
com.sun.org.apache.xml.internal.serialize.SerializerFactoryImpl#makeSerializer(OutputStream, OutputFormat)->Serializer::: serializer factory impl make serializer
com.sun.org.apache.xml.internal.serialize.SerializerFactoryImpl#getSupportedMethod()->String::: serializer factory impl get supported method
com.sun.org.apache.xml.internal.serialize.TextSerializer#setOutputFormat(OutputFormat)->void::: text serializer set output format
com.sun.org.apache.xml.internal.serialize.TextSerializer#startElement(String, String, String, Attributes)->void::: text serializer start element
com.sun.org.apache.xml.internal.serialize.TextSerializer#endElement(String, String, String)->void::: text serializer end element
com.sun.org.apache.xml.internal.serialize.TextSerializer#startElement(String, AttributeList)->void::: text serializer start element
com.sun.org.apache.xml.internal.serialize.TextSerializer#endElement(String)->void::: text serializer end element
com.sun.org.apache.xml.internal.serialize.TextSerializer#endElementIO(String)->void::: text serializer end element o
com.sun.org.apache.xml.internal.serialize.TextSerializer#processingInstructionIO(String, String)->void::: text serializer processing instruction o
com.sun.org.apache.xml.internal.serialize.TextSerializer#comment(String)->void::: text serializer comment
com.sun.org.apache.xml.internal.serialize.TextSerializer#comment(char[], int, int)->void::: text serializer comment
com.sun.org.apache.xml.internal.serialize.TextSerializer#characters(char[], int, int)->void::: text serializer characters
com.sun.org.apache.xml.internal.serialize.TextSerializer#characters(String, boolean)->void::: text serializer characters
com.sun.org.apache.xml.internal.serialize.TextSerializer#startDocument(String)->void:::Called to serialize the document's DOCTYPE by the root element
com.sun.org.apache.xml.internal.serialize.TextSerializer#serializeElement(Element)->void:::Called to serialize a DOM element
com.sun.org.apache.xml.internal.serialize.TextSerializer#serializeNode(Node)->void:::Serialize the DOM node
com.sun.org.apache.xml.internal.serialize.TextSerializer#content()->ElementState::: text serializer content
com.sun.org.apache.xml.internal.serialize.TextSerializer#getEntityRef(int)->String::: text serializer get entity ref
com.sun.org.apache.xml.internal.serialize.XHTMLSerializer#setOutputFormat(OutputFormat)->void::: serializer set output format
com.sun.org.apache.xml.internal.serialize.XML11Serializer#characters(char[], int, int)->void::: l11 serializer characters
com.sun.org.apache.xml.internal.serialize.XML11Serializer#printEscaped(String)->void::: l11 serializer print escaped
com.sun.org.apache.xml.internal.serialize.XML11Serializer#printCDATAText(String)->void::: l11 serializer print text
com.sun.org.apache.xml.internal.serialize.XML11Serializer#printXMLChar(int)->void::: l11 serializer print char
com.sun.org.apache.xml.internal.serialize.XML11Serializer#surrogates(int, int, boolean)->void::: l11 serializer surrogates
com.sun.org.apache.xml.internal.serialize.XML11Serializer#printText(String, boolean, boolean)->void::: l11 serializer print text
com.sun.org.apache.xml.internal.serialize.XML11Serializer#printText(char[], int, int, boolean, boolean)->void::: l11 serializer print text
com.sun.org.apache.xml.internal.serialize.XML11Serializer#reset()->boolean::: l11 serializer reset
com.sun.org.apache.xml.internal.serialize.XMLSerializer#setOutputFormat(OutputFormat)->void::: serializer set output format
com.sun.org.apache.xml.internal.serialize.XMLSerializer#setNamespaces(boolean)->void:::This methods turns on namespace fixup algorithm during DOM serialization.
com.sun.org.apache.xml.internal.serialize.XMLSerializer#startElement(String, String, String, Attributes)->void::: serializer start element
com.sun.org.apache.xml.internal.serialize.XMLSerializer#endElement(String, String, String)->void::: serializer end element
com.sun.org.apache.xml.internal.serialize.XMLSerializer#endElementIO(String, String, String)->void::: serializer end element o
com.sun.org.apache.xml.internal.serialize.XMLSerializer#startElement(String, AttributeList)->void::: serializer start element
com.sun.org.apache.xml.internal.serialize.XMLSerializer#endElement(String)->void::: serializer end element
com.sun.org.apache.xml.internal.serialize.XMLSerializer#startDocument(String)->void:::Called to serialize the document's DOCTYPE by the root element
com.sun.org.apache.xml.internal.serialize.XMLSerializer#serializeElement(Element)->void:::Called to serialize a DOM element
com.sun.org.apache.xml.internal.serialize.XMLSerializer#getEntityRef(int)->String::: serializer get entity ref
com.sun.org.apache.xml.internal.serialize.XMLSerializer#printEscaped(String)->void::: serializer print escaped
com.sun.org.apache.xml.internal.serialize.XMLSerializer#printXMLChar(int)->void:::print text data
com.sun.org.apache.xml.internal.serialize.XMLSerializer#printText(String, boolean, boolean)->void::: serializer print text
com.sun.org.apache.xml.internal.serialize.XMLSerializer#printText(char[], int, int, boolean, boolean)->void::: serializer print text
com.sun.org.apache.xml.internal.serialize.XMLSerializer#checkUnboundNamespacePrefixedNode(Node)->void:::DOM Level 3: Check a node to determine if it contains unbound namespace prefixes.
com.sun.org.apache.xml.internal.serialize.XMLSerializer#reset()->boolean::: serializer reset

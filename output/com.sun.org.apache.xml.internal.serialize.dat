BaseMarkupSerializer#asDocumentHandler()::: base markup serializer as document handler:::prepare->return
BaseMarkupSerializer#asContentHandler()::: base markup serializer as content handler:::prepare->return
BaseMarkupSerializer#asDOMSerializer()::: base markup serializer as serializer:::prepare->return
BaseMarkupSerializer#setOutputByteStream(OutputStream)::: base markup serializer set output byte stream:::if->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->NullPointerException->reset
BaseMarkupSerializer#setOutputCharStream(Writer)::: base markup serializer set output char stream:::if->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->NullPointerException->reset
BaseMarkupSerializer#setOutputFormat(OutputFormat)::: base markup serializer set output format:::if->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->NullPointerException->reset
BaseMarkupSerializer#reset()::: base markup serializer reset:::if->msg->DOMMessageFormatter->formatMessage->throw->new->IllegalStateException->fStrBuffer->setLength->return
BaseMarkupSerializer#cleanup()::: base markup serializer cleanup:::
BaseMarkupSerializer#prepare()::: base markup serializer prepare:::if->return->if->msg->DOMMessageFormatter->formatMessage->throw->new->IOException->_format->getEncodingInfo->if->_encodingInfo->getWriter->if->_format->getIndenting->new->IndentPrinter->else->new->Printer->state->_format->getPreserveSpace->_format->getDoctypePublic->_format->getDoctypeSystem
BaseMarkupSerializer#serialize(Element):::Serializes the DOM element using the previously specified writer and output format:::reset->prepare->serializeNode->cleanup->_printer->flush->if->_printer->getException->throw->_printer->getException
BaseMarkupSerializer#serialize(Node):::Serializes a node using the previously specified writer and output format:::reset->prepare->serializeNode->serializePreRoot->_printer->flush->if->_printer->getException->throw->_printer->getException
BaseMarkupSerializer#serialize(DocumentFragment):::Serializes the DOM document fragmnt using the previously specified writer and output format:::reset->prepare->serializeNode->cleanup->_printer->flush->if->_printer->getException->throw->_printer->getException
BaseMarkupSerializer#serialize(Document):::Serializes the DOM document using the previously specified writer and output format:::reset->prepare->serializeNode->serializePreRoot->cleanup->_printer->flush->if->_printer->getException->throw->_printer->getException
BaseMarkupSerializer#startDocument()::: base markup serializer start document:::try->prepare->catch->throw->except->toString->new->SAXException->finally
BaseMarkupSerializer#characters(char[], int, int)::: base markup serializer characters:::state->try->content->if->saveIndent->if->_printer->printText->_printer->getNextIndent->_printer->setNextIndent->ch->end->for->index->_printer->setNextIndent->else->saveIndent->if->_printer->getNextIndent->_printer->setNextIndent->printText->_printer->setNextIndent->else->printText->catch->throw->new->SAXException->finally
BaseMarkupSerializer#ignorableWhitespace(char[], int, int)::: base markup serializer ignorable whitespace:::i->try->content->if->_printer->setThisIndent->for->catch->throw->new->SAXException->finally
BaseMarkupSerializer#processingInstruction(String, String)::: base markup serializer processing instruction:::try->processingInstructionIO->catch->throw->new->SAXException->finally
BaseMarkupSerializer#processingInstructionIO(String, String)::: base markup serializer processing instruction o:::index->state->content->target->indexOf->if->fStrBuffer->append->target->substring->append->else->fStrBuffer->append->append->if->fStrBuffer->append->code->indexOf->if->fStrBuffer->code->substring->append->else->fStrBuffer->append->fStrBuffer->append->if->isDocumentState->if->new->ArrayList<>->_preRoot->fStrBuffer->toString->add->else->_printer->indent->fStrBuffer->toString->printText->_printer->unindent->if->fStrBuffer->setLength
BaseMarkupSerializer#comment(char[], int, int)::: base markup serializer comment:::try->new->String->comment->catch->throw->new->SAXException->finally
BaseMarkupSerializer#comment(String)::: base markup serializer comment:::index->state->if->_format->getOmitComments->return->content->text->indexOf->if->fStrBuffer->append->text->substring->append->append->else->fStrBuffer->append->append->append->if->isDocumentState->if->new->ArrayList<>->_preRoot->fStrBuffer->toString->add->else->if->_printer->breakLine->_printer->indent->fStrBuffer->toString->printText->_printer->unindent->if->fStrBuffer->setLength
BaseMarkupSerializer#startCDATA()::: base markup serializer start a:::state->getElementState
BaseMarkupSerializer#endCDATA()::: base markup serializer end a:::state->getElementState
BaseMarkupSerializer#startNonEscaping()::: base markup serializer start non escaping:::state->getElementState
BaseMarkupSerializer#endNonEscaping()::: base markup serializer end non escaping:::state->getElementState
BaseMarkupSerializer#startPreserving()::: base markup serializer start preserving:::state->getElementState
BaseMarkupSerializer#endPreserving()::: base markup serializer end preserving:::state->getElementState
BaseMarkupSerializer#endDocument():::Called at the end of the document to wrap it up:::try->serializePreRoot->_printer->flush->catch->throw->new->SAXException->finally
BaseMarkupSerializer#startEntity(String)::: base markup serializer start entity:::
BaseMarkupSerializer#endEntity(String)::: base markup serializer end entity:::
BaseMarkupSerializer#setDocumentLocator(Locator)::: base markup serializer set document locator:::
BaseMarkupSerializer#skippedEntity(String)::: base markup serializer skipped entity:::try->endCDATA->content->_printer->printText->_printer->printText->_printer->printText->catch->throw->new->SAXException->finally
BaseMarkupSerializer#startPrefixMapping(String, String)::: base markup serializer start prefix mapping:::if->new->HashMap<>->_prefixes->put
BaseMarkupSerializer#endPrefixMapping(String)::: base markup serializer end prefix mapping:::
BaseMarkupSerializer#startDTD(String, String, String)::: base markup serializer start d:::try->_printer->enterDTD->catch->throw->new->SAXException->finally
BaseMarkupSerializer#endDTD()::: base markup serializer end d:::
BaseMarkupSerializer#elementDecl(String, String)::: base markup serializer element decl:::try->_printer->enterDTD->_printer->printText->_printer->printText->_printer->printText->_printer->printText->_printer->printText->if->_printer->breakLine->catch->throw->new->SAXException->finally
BaseMarkupSerializer#attributeDecl(String, String, String, String, String)::: base markup serializer attribute decl:::try->_printer->enterDTD->_printer->printText->_printer->printText->_printer->printText->_printer->printText->_printer->printText->_printer->printText->if->_printer->printText->_printer->printText->if->_printer->printText->printEscaped->_printer->printText->_printer->printText->if->_printer->breakLine->catch->throw->new->SAXException->finally
BaseMarkupSerializer#internalEntityDecl(String, String)::: base markup serializer internal entity decl:::try->_printer->enterDTD->_printer->printText->_printer->printText->_printer->printText->printEscaped->_printer->printText->if->_printer->breakLine->catch->throw->new->SAXException->finally
BaseMarkupSerializer#externalEntityDecl(String, String, String)::: base markup serializer external entity decl:::try->_printer->enterDTD->unparsedEntityDecl->catch->throw->new->SAXException->finally
BaseMarkupSerializer#unparsedEntityDecl(String, String, String, String)::: base markup serializer unparsed entity decl:::try->_printer->enterDTD->if->_printer->printText->_printer->printText->_printer->printText->printDoctypeURL->else->_printer->printText->_printer->printText->_printer->printText->printDoctypeURL->_printer->printText->printDoctypeURL->if->_printer->printText->_printer->printText->_printer->printText->if->_printer->breakLine->catch->throw->new->SAXException->finally
BaseMarkupSerializer#notationDecl(String, String, String)::: base markup serializer notation decl:::try->_printer->enterDTD->if->_printer->printText->_printer->printText->_printer->printText->printDoctypeURL->if->_printer->printText->printDoctypeURL->else->_printer->printText->_printer->printText->_printer->printText->printDoctypeURL->_printer->printText->if->_printer->breakLine->catch->throw->new->SAXException->finally
BaseMarkupSerializer#serializeNode(Node):::Serialize the DOM node:::switch->node->getNodeType->text->node->getNodeValue->if->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->break->characters->else->if->getElementState->text->replace->trim->length->characters->break->text->node->getNodeValue->if->if->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->startCDATA->characters->endCDATA->else->characters->break->text->if->_format->getOmitComments->node->getNodeValue->if->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->comment->break->child->endCDATA->content->if->node->getFirstChild->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->node->getFirstChild->while->serializeNode->child->getNextSibling->return->checkUnboundNamespacePrefixedNode->_printer->printText->_printer->node->getNodeName->printText->_printer->printText->else->node->getFirstChild->while->serializeNode->child->getNextSibling->break->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->node->getNodeName->node->getNodeValue->processingInstructionIO->break->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->child->node->getFirstChild->while->serializeNode->child->getNextSibling->return->serializeElement->break->docType->serializeDocument->getDoctype->if->try->internal->_printer->enterDTD->docType->getPublicId->docType->getSystemId->docType->getInternalSubset->if->internal->length->_printer->printText->endDTD->catch->_printer->enterDTD->endDTD->finally->docType->getName->serializeDTD->child->node->getFirstChild->while->serializeNode->child->getNextSibling->break->break
BaseMarkupSerializer#serializeDocument()::: base markup serializer serialize document:::i->dtd->_printer->leaveDTD->if->if->_format->getOmitXMLDeclaration->buffer->new->StringBuffer->if->_format->getVersion->buffer->_format->getVersion->append->else->buffer->append->buffer->append->format_encoding->_format->getEncoding->if->buffer->append->buffer->append->buffer->append->if->_format->getStandalone->buffer->append->buffer->append->_printer->printText->_printer->breakLine->serializePreRoot
BaseMarkupSerializer#serializeDTD(String)::: base markup serializer serialize d:::dtd->_printer->leaveDTD->if->_format->getOmitDocumentType->if->_printer->printText->_printer->printText->if->_printer->printText->printDoctypeURL->if->_printer->breakLine->for->i->name->length->else->_printer->printText->printDoctypeURL->else->_printer->printText->printDoctypeURL->if->dtd->length->_printer->printText->printText->_printer->printText->_printer->printText->_printer->breakLine->else->if->dtd->length->_printer->printText->_printer->printText->_printer->printText->printText->_printer->printText->_printer->breakLine
BaseMarkupSerializer#content():::Must be called by a method about to print any type of content:::state->getElementState->if->isDocumentState->if->_printer->printText->if->_printer->printText->return
BaseMarkupSerializer#characters(String):::Called to print the text contents in the prevailing element format:::state->content->if->if->_printer->printText->saveIndent->_printer->getNextIndent->_printer->setNextIndent->printCDATAText->_printer->setNextIndent->else->saveIndent->if->_printer->getNextIndent->_printer->setNextIndent->printText->_printer->setNextIndent->else->printText
BaseMarkupSerializer#getEntityRef(int):::Returns the suitable entity reference for this character value, or null if no such entity exists:::
BaseMarkupSerializer#serializeElement(Element):::Called to serializee the DOM element:::
BaseMarkupSerializer#serializePreRoot():::Comments and PIs cannot be serialized before the root element, because the root element serializes the document type, which generally comes first:::i->if->for->_preRoot->size->_preRoot->clear
BaseMarkupSerializer#printCDATAText(String)::: base markup serializer print text:::length->text->length->ch->for->index
BaseMarkupSerializer#surrogates(int, int, boolean)::: base markup serializer surrogates:::if->XMLChar->isHighSurrogate->if->XMLChar->isLowSurrogate->fatalError->else->supplemental->XMLChar->supplemental->if->XMLChar->isValid->fatalError->else->if->content->_printer->printText->_printer->Integer->toHexString->printText->_printer->printText->else->printHex->else->fatalError
BaseMarkupSerializer#printText(char[], int, int, boolean, boolean):::Called to print additional text with whitespace handling:::if->while->ch->if->_printer->printText->else->printEscaped->else->while->ch->if->_printer->printSpace->else->if->_printer->printText->else->printEscaped
BaseMarkupSerializer#printText(String, boolean, boolean)::: base markup serializer print text:::index->ch->if->for->text->length->else->for->text->length
BaseMarkupSerializer#printDoctypeURL(String):::Print a document type public or system identifier URL:::i->_printer->printText->for->url->length->_printer->printText
BaseMarkupSerializer#printEscaped(int)::: base markup serializer print escaped:::charRef->getEntityRef->if->_printer->printText->_printer->printText->_printer->printText->else->if->_encodingInfo->isPrintable->if->_printer->printText->else->_printer->printText->_printer->printText->else->printHex
BaseMarkupSerializer#printHex(int):::Escapes chars:::_printer->printText->_printer->Integer->toHexString->printText->_printer->printText
BaseMarkupSerializer#printEscaped(String):::Escapes a string so it may be printed as text content or attribute value:::for->i->source->length
BaseMarkupSerializer#getElementState():::Return the state of the current element.:::return
BaseMarkupSerializer#enterElementState(String, String, String, boolean):::Enter a new element state for the specified element:::state->if->newStates->new->ElementStateArr->for->i->for->i->return
BaseMarkupSerializer#leaveElementState():::Leave the current element state and return to the state of the parent element:::if->return->msg->DOMMessageFormatter->formatMessage->throw->new->IllegalStateException
BaseMarkupSerializer#isDocumentState():::Returns true if in the state of the document:::return
BaseMarkupSerializer#clearDocumentState():::Clears document state:::
BaseMarkupSerializer#getPrefix(String):::Returns the namespace prefix for the specified URI:::prefix->if->_prefixes->get->if->return->if->return->for->i->return
BaseMarkupSerializer#modifyDOMError(String, short, String, Node):::The method modifies global DOM error object:::fDOMError->reset->new->DOMLocatorImpl->return
BaseMarkupSerializer#fatalError(String)::: base markup serializer fatal error:::if->modifyDOMError->fDOMErrorHandler->handleError->else->throw->new->IOException
BaseMarkupSerializer#checkUnboundNamespacePrefixedNode(Node):::DOM level 3: Check a node to determine if it contains unbound namespace prefixes.:::
DOMSerializer#serialize(Element):::Serialized the DOM element:::
DOMSerializer#serialize(Document):::Serializes the DOM document:::
DOMSerializer#serialize(DocumentFragment):::Serializes the DOM document fragment:::
DOMSerializerImpl#getDomConfig()::: serializer impl get dom config:::return
DOMSerializerImpl#setParameter(String, Object):::DOM L3-EXPERIMENTAL: Setter for boolean and object parameters:::if->state->booleanValue->if->name->equalsIgnoreCase->if->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->if->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->if->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->if->name->equalsIgnoreCase->if->else->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException
DOMSerializerImpl#canSetParameter(String, Object):::DOM L3-EXPERIMENTAL: Check if parameter can be set:::if->return->if->value->booleanValue->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->return
DOMSerializerImpl#getParameterNames():::DOM Level 3 Core CR - Experimental:::if->parameters->new->ArrayList<>->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->new->DOMStringListImpl->return
DOMSerializerImpl#getParameter(String):::DOM L3-EXPERIMENTAL: Getter for boolean and object parameters:::if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->if->return->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException
DOMSerializerImpl#writeToString(Node):::DOM L3 EXPERIMENTAL: Serialize the specified node as described above in the description of LSSerializer:::ser->ver->_getXmlVersion->if->ver->equals->if->new->XML11Serializer->initSerializer->copySettings->else->destination->new->StringWriter->try->prepareForSerialization->setEncoding->ser->setOutputCharStream->if->wnode->getNodeType->ser->serialize->else->if->wnode->getNodeType->ser->serialize->else->if->wnode->getNodeType->ser->serialize->else->if->wnode->getNodeType->wnode->getNodeType->wnode->getNodeType->wnode->getNodeType->wnode->getNodeType->ser->serialize->else->msg->DOMMessageFormatter->formatMessage->if->error->new->DOMErrorImpl->handleError->throw->new->LSException->catch->throw->return->throw->DOMUtil->createLSException->fillInStackTrace->msg->DOMMessageFormatter->new->ObjectArr->ioe->getMessage->formatMessage->throw->new->DOMException->finally->ser->clearDocumentState->return->destination->toString
DOMSerializerImpl#setNewLine(String):::DOM L3 EXPERIMENTAL: The end-of-line sequence of characters to be used in the XML being written out:::setLineSeparator
DOMSerializerImpl#getNewLine():::DOM L3 EXPERIMENTAL: The end-of-line sequence of characters to be used in the XML being written out:::return->getLineSeparator
DOMSerializerImpl#getFilter():::When the application provides a filter, the serializer will call out to the filter before serializing each Node:::return
DOMSerializerImpl#setFilter(LSSerializerFilter):::When the application provides a filter, the serializer will call out to the filter before serializing each Node:::
DOMSerializerImpl#initSerializer(XMLSerializer)::: serializer impl init serializer:::new->NamespaceSupport->new->NamespaceSupport->new->SymbolTable
DOMSerializerImpl#copySettings(XMLSerializer, XMLSerializer)::: serializer impl copy settings:::getEncoding->setEncoding->getLineSeparator->setLineSeparator
DOMSerializerImpl#write(Node, LSOutput):::Serialize the specified node as described above in the general description of the LSSerializer interface:::if->return->ser->ver->_getXmlVersion->if->ver->equals->if->new->XML11Serializer->initSerializer->copySettings->else->encoding->if->destination->getEncoding->_getInputEncoding->if->_getXmlEncoding->if->try->prepareForSerialization->setEncoding->outputStream->destination->getByteStream->writer->destination->getCharacterStream->uri->destination->getSystemId->if->if->if->msg->DOMMessageFormatter->formatMessage->if->error->new->DOMErrorImpl->handleError->throw->new->LSException->else->ser->XMLEntityManager->createOutputStream->setOutputByteStream->else->ser->setOutputByteStream->else->ser->setOutputCharStream->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->node->getNodeType->node->getNodeType->node->getNodeType->node->getNodeType->ser->serialize->else->return->catch->if->error->new->DOMErrorImpl->ue->getMessage->handleError->throw->DOMMessageFormatter->formatMessage->new->LSException->throw->return->throw->DOMUtil->createLSException->fillInStackTrace->if->error->new->DOMErrorImpl->e->getMessage->handleError->throw->DOMUtil->createLSException->fillInStackTrace->finally->ser->clearDocumentState->return
DOMSerializerImpl#writeToURI(Node, String):::Serialize the specified node as described above in the general description of the LSSerializer interface:::if->return->ser->ver->_getXmlVersion->if->ver->equals->if->new->XML11Serializer->initSerializer->copySettings->else->encoding->_getInputEncoding->if->_getXmlEncoding->if->try->prepareForSerialization->setEncoding->ser->XMLEntityManager->createOutputStream->setOutputByteStream->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->node->getNodeType->node->getNodeType->node->getNodeType->node->getNodeType->ser->serialize->else->return->catch->throw->return->throw->DOMUtil->createLSException->fillInStackTrace->if->error->new->DOMErrorImpl->e->getMessage->handleError->throw->DOMUtil->createLSException->fillInStackTrace->finally->ser->clearDocumentState->return
DOMSerializerImpl#prepareForSerialization(XMLSerializer, Node)::: serializer impl prepare for serialization:::ser->reset->setIndenting->setOmitComments->setOmitXMLDeclaration->if->next->root->versionChanged->verifyNames->document->node->getNodeType->node->getOwnerDocument->try->document->getClass->new->Class<?>Arr->getMethod->if->versionChanged->invoke->booleanValue->catch->finally->if->node->getFirstChild->while->verify->node->getFirstChild->while->node->getNextSibling->if->node->getParentNode->if->break->node->getNextSibling->else->verify
DOMSerializerImpl#verify(Node, boolean, boolean)::: serializer impl verify:::type->node->getNodeType->wellformed->switch->break->break->if->if->CoreDocumentImpl->node->getPrefix->node->getLocalName->isValidQName->else->CoreDocumentImpl->node->getNodeName->isXMLName->if->if->msg->DOMMessageFormatter->new->ObjectArr->node->getNodeName->formatMessage->DOMNormalizer->reportDOMError->attributes->node->hasAttributes->node->getAttributes->if->for->i->attributes->getLength->break->if->DOMNormalizer->getData->isCommentWF->break->if->CoreDocumentImpl->node->getNodeName->isXMLName->break->DOMNormalizer->node->getNodeValue->isXMLCharWF->break->DOMNormalizer->node->getNodeValue->isXMLCharWF->break->pinode->target->pinode->getTarget->if->if->XML11Char->isXML11ValidName->else->XMLChar->isValidName->if->msg->DOMMessageFormatter->new->ObjectArr->node->getNodeName->formatMessage->DOMNormalizer->reportDOMError->DOMNormalizer->pinode->getData->isXMLCharWF->break
DOMSerializerImpl#_getXmlVersion(Node)::: serializer impl _get xml version:::doc->node->getNodeType->node->getOwnerDocument->if->try->return->doc->getXmlVersion->catch->throw->finally->return
DOMSerializerImpl#_getInputEncoding(Node)::: serializer impl _get input encoding:::doc->node->getNodeType->node->getOwnerDocument->if->try->return->doc->getInputEncoding->catch->throw->finally->return
DOMSerializerImpl#_getXmlEncoding(Node)::: serializer impl _get xml encoding:::doc->node->getNodeType->node->getOwnerDocument->if->try->return->doc->getXmlEncoding->catch->throw->finally->return
EncodingInfo#getIANAName():::Returns a MIME charset name of this encoding.:::return
EncodingInfo#getWriter(OutputStream):::Returns a writer for this encoding based on an output stream.:::if->return->new->OutputStreamWriter->EncodingMap->getIANA2JavaMapping->if->return->new->OutputStreamWriter->return->new->OutputStreamWriter
EncodingInfo#isPrintable(char):::Checks whether the specified character is printable or not in this encoding.:::if->return->return->isPrintable0
EncodingInfo#isPrintable0(char):::Checks whether the specified character is printable or not in this encoding:::if->try->charset->forName->if->charset->canEncode->charset->newEncoder->else->catch->finally->if->try->return->fCharsetEncoder->canEncode->catch->finally->return
EncodingInfo#testJavaEncodingName(String)::: encoding info test java encoding name:::bTest->s->new->String
Encodings#getEncodingInfo(String, boolean)::: encodings get encoding info:::eInfo->if->if->_encodings->get->return->EncodingMap->getJava2IANAMapping->new->EncodingInfo->_encodings->put->return->encoding->toUpperCase->jName->EncodingMap->getIANA2JavaMapping->if->if->EncodingInfo->testJavaEncodingName->if->_encodings->get->return->i->for->if->EncodingMap->getJava2IANAMapping->new->EncodingInfo->_encodings->put->return->else->throw->new->UnsupportedEncodingException->if->_encodings->get->return->i->for->if->new->EncodingInfo->_encodings->put->return
HTMLdtd#isEmptyTag(String):::Returns true if element is declared to be empty:::return->isElement
HTMLdtd#isElementContent(String):::Returns true if element is declared to have element content:::return->isElement
HTMLdtd#isPreserveSpace(String):::Returns true if element's textual contents preserves spaces:::return->isElement
HTMLdtd#isOptionalClosing(String):::Returns true if element's closing tag is optional and need not exist:::return->isElement
HTMLdtd#isOnlyOpening(String):::Returns true if element's closing tag is generally not printed:::return->isElement
HTMLdtd#isClosing(String, String):::Returns true if the opening of one element (<tt>tagName</tt>) implies the closing of another open element (<tt>openTag</tt>):::if->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->return->isElement->return
HTMLdtd#isURI(String, String):::Returns true if the specified attribute it a URI and should be escaped appropriately:::return->attrName->equalsIgnoreCase->attrName->equalsIgnoreCase
HTMLdtd#isBoolean(String, String):::Returns true if the specified attribute is a boolean and should be printed without the value:::attrNames->_boolAttrs->tagName->toUpperCase->get->if->return->for->i->return
HTMLdtd#charFromName(String):::Returns the value of an HTML character reference by its name:::value->initialize->_byName->get->if->return->intValue->else->return
HTMLdtd#fromChar(int):::Returns the name of an HTML character reference based on its character value:::if->return->name->initialize->_byChar->get->return
HTMLdtd#initialize():::Initialize upon first access:::is->reader->index->name->value->code->line->if->return->try->new->HashMap<>->new->HashMap<>->getResourceAsStream->if->throw->DOMMessageFormatter->new->ObjectArr->formatMessage->new->RuntimeException->new->InputStreamReader->new->BufferedReader->reader->readLine->while->if->line->length->line->charAt->reader->readLine->continue->line->indexOf->if->line->substring->if->line->length->line->substring->value->indexOf->if->value->substring->Integer->parseInt->defineEntity->reader->readLine->is->close->catch->throw->DOMMessageFormatter->new->ObjectArr->except->toString->formatMessage->new->RuntimeException->finally->if->try->is->close->catch->finally
HTMLdtd#defineEntity(String, char):::Defines a new character reference:::if->_byName->get->_byName->new->Integer->put->_byChar->new->Integer->put
HTMLdtd#defineElement(String, int)::: ldtd define element:::_elemDefs->put
HTMLdtd#defineBoolean(String, String)::: ldtd define boolean:::new->StringArr->defineBoolean
HTMLdtd#defineBoolean(String, String[])::: ldtd define boolean:::_boolAttrs->put
HTMLdtd#isElement(String, int)::: ldtd is element:::flags->_elemDefs->name->toUpperCase->get->if->return->else->return->flags->intValue
HTMLSerializer#setOutputFormat(OutputFormat)::: serializer set output format:::super->new->OutputFormat->setOutputFormat
HTMLSerializer#setXHTMLNamespace(String)::: serializer set namespace:::
HTMLSerializer#startElement(String, String, String, Attributes)::: serializer start element:::i->preserveSpace->state->name->value->htmlName->addNSAttr->try->if->throw->DOMMessageFormatter->formatMessage->new->IllegalStateException->getElementState->if->isDocumentState->if->localName->length->startDocument->else->if->_printer->printText->if->_printer->breakLine->hasNamespaceURI->namespaceURI->length->if->rawName->length->if->prefix->getPrefix->if->prefix->length->if->else->if->namespaceURI->equals->fUserXHTMLNamespace->equals->else->_printer->printText->if->_printer->rawName->toLowerCase->printText->else->_printer->printText->_printer->indent->if->for->attrs->getLength->if->HTMLdtd->isPreserveSpace->if->foreach->_prefixes->entrySet->_printer->printSpace->entry->getKey->entry->getValue->if->name->length->_printer->printText->printEscaped->_printer->printText->else->_printer->printText->_printer->printText->_printer->printText->printEscaped->_printer->printText->enterElementState->if->htmlName->equalsIgnoreCase->htmlName->equalsIgnoreCase->_printer->printText->if->rawName->equalsIgnoreCase->rawName->equalsIgnoreCase->if->else->catch->throw->new->SAXException->finally
HTMLSerializer#endElement(String, String, String)::: serializer end element:::try->endElementIO->catch->throw->new->SAXException->finally
HTMLSerializer#endElementIO(String, String, String)::: serializer end element o:::state->htmlName->_printer->unindent->getElementState->if->length->else->if->equals->fUserXHTMLNamespace->equals->else->if->if->_printer->printText->else->if->_printer->printText->_printer->printText->_printer->toLowerCase->printText->_printer->printText->else->if->_printer->printText->if->HTMLdtd->isOnlyOpening->if->_printer->breakLine->if->_printer->printText->_printer->printText->_printer->printText->_printer->printText->leaveElementState->if->htmlName->equalsIgnoreCase->htmlName->equalsIgnoreCase->if->isDocumentState->_printer->flush
HTMLSerializer#characters(char[], int, int)::: serializer characters:::state->try->content->super->characters->catch->throw->new->SAXException->finally
HTMLSerializer#startElement(String, AttributeList)::: serializer start element:::i->preserveSpace->state->name->value->try->if->throw->DOMMessageFormatter->formatMessage->new->IllegalStateException->getElementState->if->isDocumentState->if->startDocument->else->if->_printer->printText->if->_printer->breakLine->_printer->printText->if->_printer->tagName->toLowerCase->printText->else->_printer->printText->_printer->indent->if->for->attrs->getLength->if->HTMLdtd->isPreserveSpace->enterElementState->if->tagName->equalsIgnoreCase->tagName->equalsIgnoreCase->_printer->printText->if->tagName->equalsIgnoreCase->tagName->equalsIgnoreCase->if->else->catch->throw->new->SAXException->finally
HTMLSerializer#endElement(String)::: serializer end element:::endElement
HTMLSerializer#startDocument(String):::Called to serialize the document's DOCTYPE by the root element:::buffer->_printer->leaveDTD->if->if->if->else->if->_format->getOmitDocumentType->if->if->_printer->printText->else->_printer->printText->printDoctypeURL->if->if->_printer->breakLine->_printer->printText->else->_printer->printText->printDoctypeURL->_printer->printText->_printer->breakLine->else->if->if->_printer->printText->else->_printer->printText->printDoctypeURL->_printer->printText->_printer->breakLine->serializePreRoot
HTMLSerializer#serializeElement(Element):::Called to serialize a DOM element:::attr->attrMap->i->child->state->preserveSpace->name->value->tagName->elem->getTagName->getElementState->if->isDocumentState->if->startDocument->else->if->_printer->printText->if->_printer->breakLine->_printer->printText->if->_printer->tagName->toLowerCase->printText->else->_printer->printText->_printer->indent->elem->getAttributes->if->for->attrMap->getLength->if->HTMLdtd->isPreserveSpace->if->elem->hasChildNodes->HTMLdtd->isEmptyTag->enterElementState->if->tagName->equalsIgnoreCase->tagName->equalsIgnoreCase->_printer->printText->if->tagName->equalsIgnoreCase->tagName->equalsIgnoreCase->if->else->elem->getFirstChild->while->serializeNode->child->getNextSibling->endElementIO->else->_printer->unindent->if->_printer->printText->else->_printer->printText->if->isDocumentState->_printer->flush
HTMLSerializer#characters(String)::: serializer characters:::state->content->super->characters
HTMLSerializer#getEntityRef(int)::: serializer get entity ref:::return->HTMLdtd->fromChar
HTMLSerializer#escapeURI(String)::: serializer escape i:::index->uri->indexOf->if->return->uri->substring->else->return
IndentPrinter#enterDTD():::Called by any of the DTD handlers to enter DTD mode:::if->_line->append->new->StringBuffer->flushLine->new->StringWriter
IndentPrinter#leaveDTD():::Called by the root element to leave DTD mode and if any DTD parts were printer, will return a string with their textual content.:::if->_line->append->new->StringBuffer->flushLine->return->_dtdWriter->toString->else->return
IndentPrinter#printText(String):::Called to print additional text:::_text->append
IndentPrinter#printText(StringBuffer)::: indent printer print text:::_text->text->toString->append
IndentPrinter#printText(char)::: indent printer print text:::_text->append
IndentPrinter#printText(char[], int, int)::: indent printer print text:::_text->append
IndentPrinter#printSpace():::Called to print a single space between text parts that may be broken into separate lines:::if->_text->length->if->_format->getLineWidth->_line->length->_text->length->_format->getLineWidth->flushLine->try->_writer->_format->getLineSeparator->write->catch->if->finally->while->_line->append->_line->append->new->StringBuffer
IndentPrinter#breakLine():::Called to print a line consisting of the text accumulated so far:::breakLine
IndentPrinter#breakLine(boolean)::: indent printer break line:::if->_text->length->while->_line->append->_line->append->new->StringBuffer->flushLine->try->_writer->_format->getLineSeparator->write->catch->if->finally
IndentPrinter#flushLine(boolean):::Flushes the line accumulated so far to the writer and get ready to accumulate the next line:::indent->if->_line->length->try->if->_format->getIndenting->if->_format->getLineWidth->_format->getLineWidth->_format->getLineWidth->while->_writer->write->_writer->_line->toString->write->new->StringBuffer->catch->if->finally
IndentPrinter#flush():::Flush the output stream:::if->_line->length->_text->length->breakLine->try->_writer->flush->catch->if->finally
IndentPrinter#indent():::Increment the indentation for the next line.:::_format->getIndent
IndentPrinter#unindent():::Decrement the indentation for the next line.:::_format->getIndent->if->if->_line->length->_text->length
IndentPrinter#getNextIndent()::: indent printer get next indent:::return
IndentPrinter#setNextIndent(int)::: indent printer set next indent:::
IndentPrinter#setThisIndent(int)::: indent printer set this indent:::
OutputFormat#getMethod():::Returns the method specified for this output format:::return
OutputFormat#setMethod(String):::Sets the method for this output format.:::
OutputFormat#getVersion():::Returns the version for this output method:::return
OutputFormat#setVersion(String):::Sets the version for this output method:::
OutputFormat#getIndent():::Returns the indentation specified:::return
OutputFormat#getIndenting():::Returns true if indentation was specified.:::return
OutputFormat#setIndent(int):::Sets the indentation:::if->else
OutputFormat#setIndenting(boolean):::Sets the indentation on and off:::if->else
OutputFormat#getEncoding():::Returns the specified encoding:::return
OutputFormat#setEncoding(String):::Sets the encoding for this output method:::
OutputFormat#setEncoding(EncodingInfo):::Sets the encoding for this output method with an EncodingInfo instance.:::encInfo->getIANAName
OutputFormat#getEncodingInfo():::Returns an EncodingInfo instance for the encoding.:::if->Encodings->getEncodingInfo->return
OutputFormat#setAllowJavaNames(boolean):::Sets whether java encoding names are permitted:::
OutputFormat#setAllowJavaNames():::Returns whether java encoding names are permitted:::return
OutputFormat#getMediaType():::Returns the specified media type, or null:::return
OutputFormat#setMediaType(String):::Sets the media type.:::
OutputFormat#setDoctype(String, String):::Sets the document type public and system identifiers:::
OutputFormat#getDoctypePublic():::Returns the specified document type public identifier, or null.:::return
OutputFormat#getDoctypeSystem():::Returns the specified document type system identifier, or null.:::return
OutputFormat#getOmitComments():::Returns true if comments should be ommited:::return
OutputFormat#setOmitComments(boolean):::Sets comment omitting on and off.:::
OutputFormat#getOmitDocumentType():::Returns true if the DOCTYPE declaration should be ommited:::return
OutputFormat#setOmitDocumentType(boolean):::Sets DOCTYPE declaration omitting on and off.:::
OutputFormat#getOmitXMLDeclaration():::Returns true if the XML document declaration should be ommited:::return
OutputFormat#setOmitXMLDeclaration(boolean):::Sets XML declaration omitting on and off.:::
OutputFormat#getStandalone():::Returns true if the document type is standalone:::return
OutputFormat#setStandalone(boolean):::Sets document DTD standalone:::
OutputFormat#getCDataElements():::Returns a list of all the elements whose text node children should be output as CDATA, or null if no such elements were specified.:::return
OutputFormat#isCDataElement(String):::Returns true if the text node children of the given elements should be output as CDATA.:::i->if->return->for->return
OutputFormat#setCDataElements(String[]):::Sets the list of elements for which text node children should be output as CDATA.:::
OutputFormat#getNonEscapingElements():::Returns a list of all the elements whose text node children should be output unescaped (no character references), or null if no such elements were specified.:::return
OutputFormat#isNonEscapingElement(String):::Returns true if the text node children of the given elements should be output unescaped.:::i->if->return->for->return
OutputFormat#setNonEscapingElements(String[]):::Sets the list of elements for which text node children should be output unescaped (no character references).:::
OutputFormat#getLineSeparator():::Returns a specific line separator to use:::return
OutputFormat#setLineSeparator(String):::Sets the line separator:::if->else
OutputFormat#getPreserveSpace():::Returns true if the default behavior for this format is to preserve spaces:::return
OutputFormat#setPreserveSpace(boolean):::Sets space preserving as the default behavior:::
OutputFormat#getLineWidth():::Return the selected line width for breaking up long lines:::return
OutputFormat#setLineWidth(int):::Sets the line width:::if->else
OutputFormat#getPreserveEmptyAttributes():::Returns the preserveEmptyAttribute flag:::return
OutputFormat#setPreserveEmptyAttributes(boolean):::Sets the preserveEmptyAttribute flag:::
OutputFormat#getLastPrintable():::Returns the last printable character based on the selected encoding:::if->getEncoding->getEncoding->equalsIgnoreCase->return->else->return
OutputFormat#whichMediaType(String):::Returns the suitable media format for a document output with the specified method.:::if->method->equalsIgnoreCase->return->if->method->equalsIgnoreCase->return->if->method->equalsIgnoreCase->return->if->method->equalsIgnoreCase->return->if->method->equalsIgnoreCase->return->return
Printer#getException()::: printer get exception:::return
Printer#enterDTD():::Called by any of the DTD handlers to enter DTD mode:::if->flushLine->new->StringWriter
Printer#leaveDTD():::Called by the root element to leave DTD mode and if any DTD parts were printer, will return a string with their textual content.:::if->flushLine->return->_dtdWriter->toString->else->return
Printer#printText(String)::: printer print text:::try->length->text->length->for->i->catch->if->throw->finally
Printer#printText(StringBuffer)::: printer print text:::try->length->text->length->for->i->catch->if->throw->finally
Printer#printText(char[], int, int)::: printer print text:::try->while->if->_writer->write->catch->if->throw->finally
Printer#printText(char)::: printer print text:::try->if->_writer->write->catch->if->throw->finally
Printer#printSpace()::: printer print space:::try->if->_writer->write->catch->if->throw->finally
Printer#breakLine()::: printer break line:::try->if->_writer->write->catch->if->throw->finally
Printer#breakLine(boolean)::: printer break line:::breakLine
Printer#flushLine(boolean)::: printer flush line:::try->_writer->write->catch->if->finally
Printer#flush():::Flush the output stream:::try->_writer->write->_writer->flush->catch->if->throw->finally
Printer#indent()::: printer indent:::
Printer#unindent()::: printer unindent:::
Printer#getNextIndent()::: printer get next indent:::return
Printer#setNextIndent(int)::: printer set next indent:::
Printer#setThisIndent(int)::: printer set this indent:::
Serializer#setOutputByteStream(OutputStream):::Specifies an output stream to which the document should be serialized:::
Serializer#setOutputCharStream(Writer):::Specifies a writer to which the document should be serialized:::
Serializer#setOutputFormat(OutputFormat):::Specifies an output format for this serializer:::
Serializer#asDocumentHandler():::Return a DocumentHandler interface into this serializer:::
Serializer#asContentHandler():::Return a ContentHandler interface into this serializer:::
Serializer#asDOMSerializer():::Return a DOMSerializer interface into this serializer:::
SerializerFactory#registerSerializerFactory(SerializerFactory):::Register a serializer factory, keyed by the given method string.:::method->synchronized->factory->getSupportedMethod->_factories->put
SerializerFactory#getSerializerFactory(String):::Register a serializer factory, keyed by the given method string.:::return->_factories->get
SerializerFactory#getSupportedMethod():::Returns the method supported by this factory and used to register the factory:::
SerializerFactory#makeSerializer(OutputFormat):::Create a new serializer based on the OutputFormat:::
SerializerFactory#makeSerializer(Writer, OutputFormat):::Create a new serializer, based on the OutputFormat and using the writer as the output character stream:::
SerializerFactory#makeSerializer(OutputStream, OutputFormat):::Create a new serializer, based on the OutputFormat and using the output byte stream and the encoding specified in the output format.:::
SerializerFactoryImpl#makeSerializer(OutputFormat)::: serializer factory impl make serializer:::serializer->getSerializer->serializer->setOutputFormat->return
SerializerFactoryImpl#makeSerializer(Writer, OutputFormat)::: serializer factory impl make serializer:::serializer->getSerializer->serializer->setOutputCharStream->return
SerializerFactoryImpl#makeSerializer(OutputStream, OutputFormat)::: serializer factory impl make serializer:::serializer->getSerializer->serializer->setOutputByteStream->return
SerializerFactoryImpl#getSerializer(OutputFormat)::: serializer factory impl get serializer:::if->_method->equals->return->new->XMLSerializer->else->if->_method->equals->return->new->HTMLSerializer->else->if->_method->equals->return->new->XHTMLSerializer->else->if->_method->equals->return->new->TextSerializer->else->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->IllegalStateException
SerializerFactoryImpl#getSupportedMethod()::: serializer factory impl get supported method:::return
TextSerializer#setOutputFormat(OutputFormat)::: text serializer set output format:::super->new->OutputFormat->setOutputFormat
TextSerializer#startElement(String, String, String, Attributes)::: text serializer start element:::startElement
TextSerializer#endElement(String, String, String)::: text serializer end element:::endElement
TextSerializer#startElement(String, AttributeList)::: text serializer start element:::preserveSpace->state->try->getElementState->if->isDocumentState->if->startDocument->enterElementState->catch->throw->new->SAXException->finally
TextSerializer#endElement(String)::: text serializer end element:::try->endElementIO->catch->throw->new->SAXException->finally
TextSerializer#endElementIO(String)::: text serializer end element o:::state->getElementState->leaveElementState->if->isDocumentState->_printer->flush
TextSerializer#processingInstructionIO(String, String)::: text serializer processing instruction o:::
TextSerializer#comment(String)::: text serializer comment:::
TextSerializer#comment(char[], int, int)::: text serializer comment:::
TextSerializer#characters(char[], int, int)::: text serializer characters:::state->try->content->printText->catch->throw->new->SAXException->finally
TextSerializer#characters(String, boolean)::: text serializer characters:::state->content->printText
TextSerializer#startDocument(String):::Called to serialize the document's DOCTYPE by the root element:::_printer->leaveDTD->serializePreRoot
TextSerializer#serializeElement(Element):::Called to serialize a DOM element:::child->state->preserveSpace->tagName->elem->getTagName->getElementState->if->isDocumentState->if->startDocument->if->elem->hasChildNodes->enterElementState->elem->getFirstChild->while->serializeNode->child->getNextSibling->endElementIO->else->if->isDocumentState
TextSerializer#serializeNode(Node):::Serialize the DOM node:::switch->node->getNodeType->text->node->getNodeValue->if->node->getNodeValue->characters->break->text->node->getNodeValue->if->node->getNodeValue->characters->break->break->break->break->serializeElement->break->child->node->getFirstChild->while->serializeNode->child->getNextSibling->break->break
TextSerializer#content()::: text serializer content:::state->getElementState->if->isDocumentState->if->return
TextSerializer#getEntityRef(int)::: text serializer get entity ref:::return
XHTMLSerializer#setOutputFormat(OutputFormat)::: serializer set output format:::super->new->OutputFormat->setOutputFormat
XML11Serializer#characters(char[], int, int)::: l11 serializer characters:::state->try->content->if->saveIndent->if->_printer->printText->_printer->getNextIndent->_printer->setNextIndent->ch->end->for->index->_printer->setNextIndent->else->saveIndent->if->_printer->getNextIndent->_printer->setNextIndent->printText->_printer->setNextIndent->else->printText->catch->throw->new->SAXException->finally
XML11Serializer#printEscaped(String)::: l11 serializer print escaped:::length->source->length->for->i
XML11Serializer#printCDATAText(String)::: l11 serializer print text:::length->text->length->ch->for->index
XML11Serializer#printXMLChar(int)::: l11 serializer print char:::if->printHex->else->if->_printer->printText->else->if->_printer->printText->else->if->_printer->printText->else->if->_encodingInfo->isPrintable->XML11Char->isXML11ValidLiteral->_printer->printText->else->printHex
XML11Serializer#surrogates(int, int, boolean)::: l11 serializer surrogates:::if->XMLChar->isHighSurrogate->if->XMLChar->isLowSurrogate->fatalError->else->supplemental->XMLChar->supplemental->if->XML11Char->isXML11Valid->fatalError->else->if->content->_printer->printText->_printer->Integer->toHexString->printText->_printer->printText->else->printHex->else->fatalError
XML11Serializer#printText(String, boolean, boolean)::: l11 serializer print text:::index->ch->length->text->length->if->for->else->for
XML11Serializer#printText(char[], int, int, boolean, boolean)::: l11 serializer print text:::if->while->ch->if->XML11Char->isXML11Valid->if->surrogates->else->fatalError->continue->if->XML11Char->isXML11ValidLiteral->_printer->printText->else->printXMLChar->else->while->ch->if->XML11Char->isXML11Valid->if->surrogates->else->fatalError->continue->if->XML11Char->isXML11ValidLiteral->_printer->printText->else->printXMLChar
XML11Serializer#reset()::: l11 serializer reset:::super->reset->return
XMLSerializer#setOutputFormat(OutputFormat)::: serializer set output format:::super->new->OutputFormat->setOutputFormat
XMLSerializer#setNamespaces(boolean):::This methods turns on namespace fixup algorithm during DOM serialization.:::if->new->NamespaceSupport->new->NamespaceSupport->new->SymbolTable
XMLSerializer#startElement(String, String, String, Attributes)::: serializer start element:::i->preserveSpace->state->name->value->if->println->try->if->msg->DOMMessageFormatter->formatMessage->throw->new->IllegalStateException->getElementState->if->isDocumentState->if->localName->length->startDocument->else->if->_printer->printText->if->_printer->printText->if->_printer->breakLine->extractNamespaces->if->rawName->length->if->msg->DOMMessageFormatter->formatMessage->throw->new->SAXException->if->namespaceURI->equals->prefix->getPrefix->if->prefix->length->else->else->_printer->printText->_printer->printText->_printer->indent->if->for->attrs->getLength->if->foreach->_prefixes->entrySet->_printer->printSpace->entry->getKey->entry->getValue->if->name->length->_printer->printText->printEscaped->_printer->printText->else->_printer->printText->_printer->printText->_printer->printText->printEscaped->_printer->printText->enterElementState->localName->length->_format->isCDataElement->_format->isNonEscapingElement->catch->throw->new->SAXException->finally
XMLSerializer#endElement(String, String, String)::: serializer end element:::try->endElementIO->catch->throw->new->SAXException->finally
XMLSerializer#endElementIO(String, String, String)::: serializer end element o:::state->if->println->_printer->unindent->getElementState->if->_printer->printText->else->if->_printer->printText->if->_printer->breakLine->_printer->printText->_printer->printText->_printer->printText->leaveElementState->if->isDocumentState->_printer->flush
XMLSerializer#startElement(String, AttributeList)::: serializer start element:::i->preserveSpace->state->name->value->if->println->try->if->msg->DOMMessageFormatter->formatMessage->throw->new->IllegalStateException->getElementState->if->isDocumentState->if->startDocument->else->if->_printer->printText->if->_printer->printText->if->_printer->breakLine->_printer->printText->_printer->printText->_printer->indent->if->for->attrs->getLength->enterElementState->_format->isCDataElement->_format->isNonEscapingElement->catch->throw->new->SAXException->finally
XMLSerializer#endElement(String)::: serializer end element:::endElement
XMLSerializer#startDocument(String):::Called to serialize the document's DOCTYPE by the root element:::i->dtd->_printer->leaveDTD->if->if->_format->getOmitXMLDeclaration->buffer->new->StringBuffer->if->_format->getVersion->buffer->_format->getVersion->append->else->buffer->append->buffer->append->format_encoding->_format->getEncoding->if->buffer->append->buffer->append->buffer->append->if->_format->getStandalone->buffer->append->buffer->append->_printer->printText->_printer->breakLine->if->_format->getOmitDocumentType->if->_printer->printText->_printer->printText->if->_printer->printText->printDoctypeURL->if->_printer->breakLine->for->rootTagName->length->else->_printer->printText->printDoctypeURL->else->_printer->printText->printDoctypeURL->if->dtd->length->_printer->printText->printText->_printer->printText->_printer->printText->_printer->breakLine->else->if->dtd->length->_printer->printText->_printer->printText->_printer->printText->printText->_printer->printText->_printer->breakLine->serializePreRoot
XMLSerializer#serializeElement(Element):::Called to serialize a DOM element:::attr->attrMap->i->child->state->name->value->tagName->prefix->localUri->uri->if->fLocalNSBinder->reset->fNSBinder->pushContext->if->elem->getNodeName->elem->getNamespaceURI->println->elem->getTagName->getElementState->if->isDocumentState->if->startDocument->else->if->_printer->printText->if->_printer->printText->if->_printer->breakLine->length->if->elem->hasAttributes->elem->getAttributes->attrMap->getLength->if->_printer->printText->_printer->printText->_printer->indent->for->else->for->elem->getNamespaceURI->elem->getPrefix->if->uri->length->prefix->length->_printer->printText->_printer->elem->getLocalName->printText->_printer->indent->else->_printer->printText->_printer->printText->_printer->indent->if->fSymbolTable->addSymbol->prefix->length->fSymbolTable->addSymbol->if->fNSBinder->getURI->else->if->printNamespaceAttr->fLocalNSBinder->declarePrefix->fNSBinder->declarePrefix->else->if->elem->getLocalName->if->msg->DOMMessageFormatter->new->ObjectArr->elem->getNodeName->formatMessage->modifyDOMError->continueProcess->fDOMErrorHandler->handleError->if->throw->DOMMessageFormatter->formatMessage->new->RuntimeException->else->fNSBinder->getURI->if->uri->length->if->printNamespaceAttr->fLocalNSBinder->declarePrefix->fNSBinder->declarePrefix->for->if->elem->hasChildNodes->enterElementState->_format->isCDataElement->_format->isNonEscapingElement->elem->getFirstChild->while->serializeNode->child->getNextSibling->if->fNSBinder->popContext->endElementIO->else->if->elem->getNodeName->println->if->fNSBinder->popContext->_printer->unindent->_printer->printText->if->isDocumentState->_printer->flush
XMLSerializer#printNamespaceAttr(String, String)::: serializer print namespace attr:::_printer->printSpace->if->if->println->_printer->printText->else->if->println->_printer->printText->_printer->printText->printEscaped->_printer->printText
XMLSerializer#printAttribute(String, String, boolean, Attr):::Prints attribute:::if->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->_printer->printSpace->_printer->printText->_printer->printText->printEscaped->_printer->printText->if->name->equals->if->value->equals->else->_format->getPreserveSpace
XMLSerializer#getEntityRef(int)::: serializer get entity ref:::switch->return->return->return->return->return->return
XMLSerializer#extractNamespaces(Attributes):::Retrieve and remove the namespaces declarations from the list of attributes.:::attrsOnly->rawName->i->length->if->return->attrs->getLength->new->AttributesImpl->for->return
XMLSerializer#printEscaped(String)::: serializer print escaped:::length->source->length->for->i
XMLSerializer#printXMLChar(int):::print text data:::if->printHex->else->if->_printer->printText->else->if->_printer->printText->else->if->_printer->printText->else->if->_encodingInfo->isPrintable->_printer->printText->else->printHex
XMLSerializer#printText(String, boolean, boolean)::: serializer print text:::index->ch->length->text->length->if->for->else->for
XMLSerializer#printText(char[], int, int, boolean, boolean)::: serializer print text:::if->while->ch->if->XMLChar->isValid->if->surrogates->else->fatalError->continue->if->_printer->printText->else->printXMLChar->else->while->ch->if->XMLChar->isValid->if->surrogates->else->fatalError->continue->if->_printer->printText->else->printXMLChar
XMLSerializer#checkUnboundNamespacePrefixedNode(Node):::DOM Level 3: Check a node to determine if it contains unbound namespace prefixes.:::if->if->node->getNodeName->println->fNSBinder->getDeclaredPrefixCount->println->node->getNodeName->println->node->getFirstChild->getNodeName->println->node->getFirstChild->getPrefix->println->node->getFirstChild->getNamespaceURI->println->child->next->for->node->getFirstChild
XMLSerializer#reset()::: serializer reset:::super->reset->if->fNSBinder->reset->fNSBinder->declarePrefix->return

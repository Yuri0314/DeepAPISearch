BaseMarkupSerializer#serialize(Element):::Serializes the DOM element using the previously specified writer and output format:::reset->prepare->serializeNode->cleanup->_printer->flush->if->_printer->getException->throw->_printer->getException
BaseMarkupSerializer#serialize(Node):::Serializes a node using the previously specified writer and output format:::reset->prepare->serializeNode->serializePreRoot->_printer->flush->if->_printer->getException->throw->_printer->getException
BaseMarkupSerializer#serialize(DocumentFragment):::Serializes the DOM document fragmnt using the previously specified writer and output format:::reset->prepare->serializeNode->cleanup->_printer->flush->if->_printer->getException->throw->_printer->getException
BaseMarkupSerializer#serialize(Document):::Serializes the DOM document using the previously specified writer and output format:::reset->prepare->serializeNode->serializePreRoot->cleanup->_printer->flush->if->_printer->getException->throw->_printer->getException
BaseMarkupSerializer#endDocument():::Called at the end of the document to wrap it up:::try->serializePreRoot->_printer->flush->catch->throw->new->SAXException->finally
BaseMarkupSerializer#serializeNode(Node):::Serialize the DOM node:::switch->node->getNodeType->text->node->getNodeValue->if->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->break->characters->else->if->getElementState->text->replace->trim->length->characters->break->text->node->getNodeValue->if->if->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->startCDATA->characters->endCDATA->else->characters->break->text->if->_format->getOmitComments->node->getNodeValue->if->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->comment->break->child->endCDATA->content->if->node->getFirstChild->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->node->getFirstChild->while->serializeNode->child->getNextSibling->return->checkUnboundNamespacePrefixedNode->_printer->printText->_printer->node->getNodeName->printText->_printer->printText->else->node->getFirstChild->while->serializeNode->child->getNextSibling->break->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->node->getNodeName->node->getNodeValue->processingInstructionIO->break->if->fDOMFilter->getWhatToShow->code->fDOMFilter->acceptNode->switch->return->child->node->getFirstChild->while->serializeNode->child->getNextSibling->return->serializeElement->break->docType->serializeDocument->getDoctype->if->try->internal->_printer->enterDTD->docType->getPublicId->docType->getSystemId->docType->getInternalSubset->if->internal->length->_printer->printText->endDTD->catch->_printer->enterDTD->endDTD->finally->docType->getName->serializeDTD->child->node->getFirstChild->while->serializeNode->child->getNextSibling->break->break
BaseMarkupSerializer#content():::Must be called by a method about to print any type of content:::state->getElementState->if->isDocumentState->if->_printer->printText->if->_printer->printText->return
BaseMarkupSerializer#characters(String):::Called to print the text contents in the prevailing element format:::state->content->if->if->_printer->printText->saveIndent->_printer->getNextIndent->_printer->setNextIndent->printCDATAText->_printer->setNextIndent->else->saveIndent->if->_printer->getNextIndent->_printer->setNextIndent->printText->_printer->setNextIndent->else->printText
BaseMarkupSerializer#getEntityRef(int):::Returns the suitable entity reference for this character value, or null if no such entity exists:::
BaseMarkupSerializer#serializeElement(Element):::Called to serializee the DOM element:::
BaseMarkupSerializer#serializePreRoot():::Comments and PIs cannot be serialized before the root element, because the root element serializes the document type, which generally comes first:::i->if->for->_preRoot->size->_preRoot->clear
BaseMarkupSerializer#printText(char[], int, int, boolean, boolean):::Called to print additional text with whitespace handling:::if->while->ch->if->_printer->printText->else->printEscaped->else->while->ch->if->_printer->printSpace->else->if->_printer->printText->else->printEscaped
BaseMarkupSerializer#printDoctypeURL(String):::Print a document type public or system identifier URL:::i->_printer->printText->for->url->length->_printer->printText
BaseMarkupSerializer#printHex(int):::Escapes chars:::_printer->printText->_printer->Integer->toHexString->printText->_printer->printText
BaseMarkupSerializer#printEscaped(String):::Escapes a string so it may be printed as text content or attribute value:::for->i->source->length
BaseMarkupSerializer#getElementState():::Return the state of the current element.:::return
BaseMarkupSerializer#enterElementState(String, String, String, boolean):::Enter a new element state for the specified element:::state->if->newStates->new->ElementStateArr->for->i->for->i->return
BaseMarkupSerializer#leaveElementState():::Leave the current element state and return to the state of the parent element:::if->return->msg->DOMMessageFormatter->formatMessage->throw->new->IllegalStateException
BaseMarkupSerializer#isDocumentState():::Returns true if in the state of the document:::return
BaseMarkupSerializer#clearDocumentState():::Clears document state:::
BaseMarkupSerializer#getPrefix(String):::Returns the namespace prefix for the specified URI:::prefix->if->_prefixes->get->if->return->if->return->for->i->return
BaseMarkupSerializer#modifyDOMError(String, short, String, Node):::The method modifies global DOM error object:::fDOMError->reset->new->DOMLocatorImpl->return
BaseMarkupSerializer#checkUnboundNamespacePrefixedNode(Node):::DOM level 3: Check a node to determine if it contains unbound namespace prefixes.:::
DOMSerializer#serialize(Element):::Serialized the DOM element:::
DOMSerializer#serialize(Document):::Serializes the DOM document:::
DOMSerializer#serialize(DocumentFragment):::Serializes the DOM document fragment:::
DOMSerializerImpl#setParameter(String, Object):::DOM L3-EXPERIMENTAL: Setter for boolean and object parameters:::if->state->booleanValue->if->name->equalsIgnoreCase->if->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->if->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->if->name->equalsIgnoreCase->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->if->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->if->name->equalsIgnoreCase->if->else->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException
DOMSerializerImpl#canSetParameter(String, Object):::DOM L3-EXPERIMENTAL: Check if parameter can be set:::if->return->if->value->booleanValue->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->return
DOMSerializerImpl#getParameterNames():::DOM Level 3 Core CR - Experimental:::if->parameters->new->ArrayList<>->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->parameters->add->new->DOMStringListImpl->return
DOMSerializerImpl#getParameter(String):::DOM L3-EXPERIMENTAL: Getter for boolean and object parameters:::if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->if->return->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->return->else->if->name->equalsIgnoreCase->name->equalsIgnoreCase->name->equalsIgnoreCase->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException->else->msg->DOMMessageFormatter->new->ObjectArr->formatMessage->throw->new->DOMException
DOMSerializerImpl#writeToString(Node):::DOM L3 EXPERIMENTAL: Serialize the specified node as described above in the description of LSSerializer:::ser->ver->_getXmlVersion->if->ver->equals->if->new->XML11Serializer->initSerializer->copySettings->else->destination->new->StringWriter->try->prepareForSerialization->setEncoding->ser->setOutputCharStream->if->wnode->getNodeType->ser->serialize->else->if->wnode->getNodeType->ser->serialize->else->if->wnode->getNodeType->ser->serialize->else->if->wnode->getNodeType->wnode->getNodeType->wnode->getNodeType->wnode->getNodeType->wnode->getNodeType->ser->serialize->else->msg->DOMMessageFormatter->formatMessage->if->error->new->DOMErrorImpl->handleError->throw->new->LSException->catch->throw->return->throw->DOMUtil->createLSException->fillInStackTrace->msg->DOMMessageFormatter->new->ObjectArr->ioe->getMessage->formatMessage->throw->new->DOMException->finally->ser->clearDocumentState->return->destination->toString
DOMSerializerImpl#setNewLine(String):::DOM L3 EXPERIMENTAL: The end-of-line sequence of characters to be used in the XML being written out:::setLineSeparator
DOMSerializerImpl#getNewLine():::DOM L3 EXPERIMENTAL: The end-of-line sequence of characters to be used in the XML being written out:::return->getLineSeparator
DOMSerializerImpl#getFilter():::When the application provides a filter, the serializer will call out to the filter before serializing each Node:::return
DOMSerializerImpl#setFilter(LSSerializerFilter):::When the application provides a filter, the serializer will call out to the filter before serializing each Node:::
DOMSerializerImpl#write(Node, LSOutput):::Serialize the specified node as described above in the general description of the LSSerializer interface:::if->return->ser->ver->_getXmlVersion->if->ver->equals->if->new->XML11Serializer->initSerializer->copySettings->else->encoding->if->destination->getEncoding->_getInputEncoding->if->_getXmlEncoding->if->try->prepareForSerialization->setEncoding->outputStream->destination->getByteStream->writer->destination->getCharacterStream->uri->destination->getSystemId->if->if->if->msg->DOMMessageFormatter->formatMessage->if->error->new->DOMErrorImpl->handleError->throw->new->LSException->else->ser->XMLEntityManager->createOutputStream->setOutputByteStream->else->ser->setOutputByteStream->else->ser->setOutputCharStream->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->node->getNodeType->node->getNodeType->node->getNodeType->node->getNodeType->ser->serialize->else->return->catch->if->error->new->DOMErrorImpl->ue->getMessage->handleError->throw->DOMMessageFormatter->formatMessage->new->LSException->throw->return->throw->DOMUtil->createLSException->fillInStackTrace->if->error->new->DOMErrorImpl->e->getMessage->handleError->throw->DOMUtil->createLSException->fillInStackTrace->finally->ser->clearDocumentState->return
DOMSerializerImpl#writeToURI(Node, String):::Serialize the specified node as described above in the general description of the LSSerializer interface:::if->return->ser->ver->_getXmlVersion->if->ver->equals->if->new->XML11Serializer->initSerializer->copySettings->else->encoding->_getInputEncoding->if->_getXmlEncoding->if->try->prepareForSerialization->setEncoding->ser->XMLEntityManager->createOutputStream->setOutputByteStream->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->ser->serialize->else->if->node->getNodeType->node->getNodeType->node->getNodeType->node->getNodeType->node->getNodeType->ser->serialize->else->return->catch->throw->return->throw->DOMUtil->createLSException->fillInStackTrace->if->error->new->DOMErrorImpl->e->getMessage->handleError->throw->DOMUtil->createLSException->fillInStackTrace->finally->ser->clearDocumentState->return
EncodingInfo#getIANAName():::Returns a MIME charset name of this encoding.:::return
EncodingInfo#getWriter(OutputStream):::Returns a writer for this encoding based on an output stream.:::if->return->new->OutputStreamWriter->EncodingMap->getIANA2JavaMapping->if->return->new->OutputStreamWriter->return->new->OutputStreamWriter
EncodingInfo#isPrintable(char):::Checks whether the specified character is printable or not in this encoding.:::if->return->return->isPrintable0
HTMLdtd#isEmptyTag(String):::Returns true if element is declared to be empty:::return->isElement
HTMLdtd#isElementContent(String):::Returns true if element is declared to have element content:::return->isElement
HTMLdtd#isPreserveSpace(String):::Returns true if element's textual contents preserves spaces:::return->isElement
HTMLdtd#isOptionalClosing(String):::Returns true if element's closing tag is optional and need not exist:::return->isElement
HTMLdtd#isOnlyOpening(String):::Returns true if element's closing tag is generally not printed:::return->isElement
HTMLdtd#isClosing(String, String):::Returns true if the opening of one element (<tt>tagName</tt>) implies the closing of another open element (<tt>openTag</tt>):::if->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->return->isElement->if->openTag->equalsIgnoreCase->openTag->equalsIgnoreCase->return->isElement->return
HTMLdtd#isURI(String, String):::Returns true if the specified attribute it a URI and should be escaped appropriately:::return->attrName->equalsIgnoreCase->attrName->equalsIgnoreCase
HTMLdtd#isBoolean(String, String):::Returns true if the specified attribute is a boolean and should be printed without the value:::attrNames->_boolAttrs->tagName->toUpperCase->get->if->return->for->i->return
HTMLdtd#charFromName(String):::Returns the value of an HTML character reference by its name:::value->initialize->_byName->get->if->return->intValue->else->return
HTMLdtd#fromChar(int):::Returns the name of an HTML character reference based on its character value:::if->return->name->initialize->_byChar->get->return
HTMLSerializer#startDocument(String):::Called to serialize the document's DOCTYPE by the root element:::buffer->_printer->leaveDTD->if->if->if->else->if->_format->getOmitDocumentType->if->if->_printer->printText->else->_printer->printText->printDoctypeURL->if->if->_printer->breakLine->_printer->printText->else->_printer->printText->printDoctypeURL->_printer->printText->_printer->breakLine->else->if->if->_printer->printText->else->_printer->printText->printDoctypeURL->_printer->printText->_printer->breakLine->serializePreRoot
HTMLSerializer#serializeElement(Element):::Called to serialize a DOM element:::attr->attrMap->i->child->state->preserveSpace->name->value->tagName->elem->getTagName->getElementState->if->isDocumentState->if->startDocument->else->if->_printer->printText->if->_printer->breakLine->_printer->printText->if->_printer->tagName->toLowerCase->printText->else->_printer->printText->_printer->indent->elem->getAttributes->if->for->attrMap->getLength->if->HTMLdtd->isPreserveSpace->if->elem->hasChildNodes->HTMLdtd->isEmptyTag->enterElementState->if->tagName->equalsIgnoreCase->tagName->equalsIgnoreCase->_printer->printText->if->tagName->equalsIgnoreCase->tagName->equalsIgnoreCase->if->else->elem->getFirstChild->while->serializeNode->child->getNextSibling->endElementIO->else->_printer->unindent->if->_printer->printText->else->_printer->printText->if->isDocumentState->_printer->flush
IndentPrinter#enterDTD():::Called by any of the DTD handlers to enter DTD mode:::if->_line->append->new->StringBuffer->flushLine->new->StringWriter
IndentPrinter#leaveDTD():::Called by the root element to leave DTD mode and if any DTD parts were printer, will return a string with their textual content.:::if->_line->append->new->StringBuffer->flushLine->return->_dtdWriter->toString->else->return
IndentPrinter#printText(String):::Called to print additional text:::_text->append
IndentPrinter#printSpace():::Called to print a single space between text parts that may be broken into separate lines:::if->_text->length->if->_format->getLineWidth->_line->length->_text->length->_format->getLineWidth->flushLine->try->_writer->_format->getLineSeparator->write->catch->if->finally->while->_line->append->_line->append->new->StringBuffer
IndentPrinter#breakLine():::Called to print a line consisting of the text accumulated so far:::breakLine
IndentPrinter#flushLine(boolean):::Flushes the line accumulated so far to the writer and get ready to accumulate the next line:::indent->if->_line->length->try->if->_format->getIndenting->if->_format->getLineWidth->_format->getLineWidth->_format->getLineWidth->while->_writer->write->_writer->_line->toString->write->new->StringBuffer->catch->if->finally
IndentPrinter#flush():::Flush the output stream:::if->_line->length->_text->length->breakLine->try->_writer->flush->catch->if->finally
IndentPrinter#indent():::Increment the indentation for the next line.:::_format->getIndent
IndentPrinter#unindent():::Decrement the indentation for the next line.:::_format->getIndent->if->if->_line->length->_text->length
OutputFormat#getMethod():::Returns the method specified for this output format:::return
OutputFormat#setMethod(String):::Sets the method for this output format.:::
OutputFormat#getVersion():::Returns the version for this output method:::return
OutputFormat#setVersion(String):::Sets the version for this output method:::
OutputFormat#getIndent():::Returns the indentation specified:::return
OutputFormat#getIndenting():::Returns true if indentation was specified.:::return
OutputFormat#setIndent(int):::Sets the indentation:::if->else
OutputFormat#setIndenting(boolean):::Sets the indentation on and off:::if->else
OutputFormat#getEncoding():::Returns the specified encoding:::return
OutputFormat#setEncoding(String):::Sets the encoding for this output method:::
OutputFormat#setEncoding(EncodingInfo):::Sets the encoding for this output method with an EncodingInfo instance.:::encInfo->getIANAName
OutputFormat#getEncodingInfo():::Returns an EncodingInfo instance for the encoding.:::if->Encodings->getEncodingInfo->return
OutputFormat#setAllowJavaNames(boolean):::Sets whether java encoding names are permitted:::
OutputFormat#setAllowJavaNames():::Returns whether java encoding names are permitted:::return
OutputFormat#getMediaType():::Returns the specified media type, or null:::return
OutputFormat#setMediaType(String):::Sets the media type.:::
OutputFormat#setDoctype(String, String):::Sets the document type public and system identifiers:::
OutputFormat#getDoctypePublic():::Returns the specified document type public identifier, or null.:::return
OutputFormat#getDoctypeSystem():::Returns the specified document type system identifier, or null.:::return
OutputFormat#getOmitComments():::Returns true if comments should be ommited:::return
OutputFormat#setOmitComments(boolean):::Sets comment omitting on and off.:::
OutputFormat#getOmitDocumentType():::Returns true if the DOCTYPE declaration should be ommited:::return
OutputFormat#setOmitDocumentType(boolean):::Sets DOCTYPE declaration omitting on and off.:::
OutputFormat#getOmitXMLDeclaration():::Returns true if the XML document declaration should be ommited:::return
OutputFormat#setOmitXMLDeclaration(boolean):::Sets XML declaration omitting on and off.:::
OutputFormat#getStandalone():::Returns true if the document type is standalone:::return
OutputFormat#setStandalone(boolean):::Sets document DTD standalone:::
OutputFormat#getCDataElements():::Returns a list of all the elements whose text node children should be output as CDATA, or null if no such elements were specified.:::return
OutputFormat#isCDataElement(String):::Returns true if the text node children of the given elements should be output as CDATA.:::i->if->return->for->return
OutputFormat#setCDataElements(String[]):::Sets the list of elements for which text node children should be output as CDATA.:::
OutputFormat#getNonEscapingElements():::Returns a list of all the elements whose text node children should be output unescaped (no character references), or null if no such elements were specified.:::return
OutputFormat#isNonEscapingElement(String):::Returns true if the text node children of the given elements should be output unescaped.:::i->if->return->for->return
OutputFormat#setNonEscapingElements(String[]):::Sets the list of elements for which text node children should be output unescaped (no character references).:::
OutputFormat#getLineSeparator():::Returns a specific line separator to use:::return
OutputFormat#setLineSeparator(String):::Sets the line separator:::if->else
OutputFormat#getPreserveSpace():::Returns true if the default behavior for this format is to preserve spaces:::return
OutputFormat#setPreserveSpace(boolean):::Sets space preserving as the default behavior:::
OutputFormat#getLineWidth():::Return the selected line width for breaking up long lines:::return
OutputFormat#setLineWidth(int):::Sets the line width:::if->else
OutputFormat#getPreserveEmptyAttributes():::Returns the preserveEmptyAttribute flag:::return
OutputFormat#setPreserveEmptyAttributes(boolean):::Sets the preserveEmptyAttribute flag:::
OutputFormat#getLastPrintable():::Returns the last printable character based on the selected encoding:::if->getEncoding->getEncoding->equalsIgnoreCase->return->else->return
OutputFormat#whichMediaType(String):::Returns the suitable media format for a document output with the specified method.:::if->method->equalsIgnoreCase->return->if->method->equalsIgnoreCase->return->if->method->equalsIgnoreCase->return->if->method->equalsIgnoreCase->return->if->method->equalsIgnoreCase->return->return
Printer#enterDTD():::Called by any of the DTD handlers to enter DTD mode:::if->flushLine->new->StringWriter
Printer#leaveDTD():::Called by the root element to leave DTD mode and if any DTD parts were printer, will return a string with their textual content.:::if->flushLine->return->_dtdWriter->toString->else->return
Printer#flush():::Flush the output stream:::try->_writer->write->_writer->flush->catch->if->throw->finally
Serializer#setOutputByteStream(OutputStream):::Specifies an output stream to which the document should be serialized:::
Serializer#setOutputCharStream(Writer):::Specifies a writer to which the document should be serialized:::
Serializer#setOutputFormat(OutputFormat):::Specifies an output format for this serializer:::
Serializer#asDocumentHandler():::Return a DocumentHandler interface into this serializer:::
Serializer#asContentHandler():::Return a ContentHandler interface into this serializer:::
Serializer#asDOMSerializer():::Return a DOMSerializer interface into this serializer:::
SerializerFactory#registerSerializerFactory(SerializerFactory):::Register a serializer factory, keyed by the given method string.:::method->synchronized->factory->getSupportedMethod->_factories->put
SerializerFactory#getSerializerFactory(String):::Register a serializer factory, keyed by the given method string.:::return->_factories->get
SerializerFactory#getSupportedMethod():::Returns the method supported by this factory and used to register the factory:::
SerializerFactory#makeSerializer(OutputFormat):::Create a new serializer based on the OutputFormat:::
SerializerFactory#makeSerializer(Writer, OutputFormat):::Create a new serializer, based on the OutputFormat and using the writer as the output character stream:::
SerializerFactory#makeSerializer(OutputStream, OutputFormat):::Create a new serializer, based on the OutputFormat and using the output byte stream and the encoding specified in the output format.:::
TextSerializer#startDocument(String):::Called to serialize the document's DOCTYPE by the root element:::_printer->leaveDTD->serializePreRoot
TextSerializer#serializeElement(Element):::Called to serialize a DOM element:::child->state->preserveSpace->tagName->elem->getTagName->getElementState->if->isDocumentState->if->startDocument->if->elem->hasChildNodes->enterElementState->elem->getFirstChild->while->serializeNode->child->getNextSibling->endElementIO->else->if->isDocumentState
TextSerializer#serializeNode(Node):::Serialize the DOM node:::switch->node->getNodeType->text->node->getNodeValue->if->node->getNodeValue->characters->break->text->node->getNodeValue->if->node->getNodeValue->characters->break->break->break->break->serializeElement->break->child->node->getFirstChild->while->serializeNode->child->getNextSibling->break->break
XMLSerializer#setNamespaces(boolean):::This methods turns on namespace fixup algorithm during DOM serialization.:::if->new->NamespaceSupport->new->NamespaceSupport->new->SymbolTable
XMLSerializer#startDocument(String):::Called to serialize the document's DOCTYPE by the root element:::i->dtd->_printer->leaveDTD->if->if->_format->getOmitXMLDeclaration->buffer->new->StringBuffer->if->_format->getVersion->buffer->_format->getVersion->append->else->buffer->append->buffer->append->format_encoding->_format->getEncoding->if->buffer->append->buffer->append->buffer->append->if->_format->getStandalone->buffer->append->buffer->append->_printer->printText->_printer->breakLine->if->_format->getOmitDocumentType->if->_printer->printText->_printer->printText->if->_printer->printText->printDoctypeURL->if->_printer->breakLine->for->rootTagName->length->else->_printer->printText->printDoctypeURL->else->_printer->printText->printDoctypeURL->if->dtd->length->_printer->printText->printText->_printer->printText->_printer->printText->_printer->breakLine->else->if->dtd->length->_printer->printText->_printer->printText->_printer->printText->printText->_printer->printText->_printer->breakLine->serializePreRoot
XMLSerializer#serializeElement(Element):::Called to serialize a DOM element:::attr->attrMap->i->child->state->name->value->tagName->prefix->localUri->uri->if->fLocalNSBinder->reset->fNSBinder->pushContext->if->elem->getNodeName->elem->getNamespaceURI->println->elem->getTagName->getElementState->if->isDocumentState->if->startDocument->else->if->_printer->printText->if->_printer->printText->if->_printer->breakLine->length->if->elem->hasAttributes->elem->getAttributes->attrMap->getLength->if->_printer->printText->_printer->printText->_printer->indent->for->else->for->elem->getNamespaceURI->elem->getPrefix->if->uri->length->prefix->length->_printer->printText->_printer->elem->getLocalName->printText->_printer->indent->else->_printer->printText->_printer->printText->_printer->indent->if->fSymbolTable->addSymbol->prefix->length->fSymbolTable->addSymbol->if->fNSBinder->getURI->else->if->printNamespaceAttr->fLocalNSBinder->declarePrefix->fNSBinder->declarePrefix->else->if->elem->getLocalName->if->msg->DOMMessageFormatter->new->ObjectArr->elem->getNodeName->formatMessage->modifyDOMError->continueProcess->fDOMErrorHandler->handleError->if->throw->DOMMessageFormatter->formatMessage->new->RuntimeException->else->fNSBinder->getURI->if->uri->length->if->printNamespaceAttr->fLocalNSBinder->declarePrefix->fNSBinder->declarePrefix->for->if->elem->hasChildNodes->enterElementState->_format->isCDataElement->_format->isNonEscapingElement->elem->getFirstChild->while->serializeNode->child->getNextSibling->if->fNSBinder->popContext->endElementIO->else->if->elem->getNodeName->println->if->fNSBinder->popContext->_printer->unindent->_printer->printText->if->isDocumentState->_printer->flush
XMLSerializer#printXMLChar(int):::print text data:::if->printHex->else->if->_printer->printText->else->if->_printer->printText->else->if->_printer->printText->else->if->_encodingInfo->isPrintable->_printer->printText->else->printHex
XMLSerializer#checkUnboundNamespacePrefixedNode(Node):::DOM Level 3: Check a node to determine if it contains unbound namespace prefixes.:::if->if->node->getNodeName->println->fNSBinder->getDeclaredPrefixCount->println->node->getNodeName->println->node->getFirstChild->getNodeName->println->node->getFirstChild->getPrefix->println->node->getFirstChild->getNamespaceURI->println->child->next->for->node->getFirstChild

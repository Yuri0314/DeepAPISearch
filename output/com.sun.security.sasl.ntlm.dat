FactoryImpl#createSaslClient(String[], String, String, String, Map, CallbackHandler):::Returns a new instance of the NTLM SASL client mechanism:::for->i->return
FactoryImpl#createSaslServer(String, String, String, Map, CallbackHandler):::Returns a new instance of the NTLM SASL server mechanism:::if->mech->equals->PolicyUtils->checkPolicy->if->qop->props->get->if->qop->equals->throw->new->SaslException->if->throw->new->SaslException->return->new->NTLMServer->return
FactoryImpl#getMechanismNames(Map):::Returns the authentication mechanisms that this factory can produce.:::return->PolicyUtils->filterMechs
NTLMClient#getMechanismName()::: client get mechanism name:::return
NTLMClient#isComplete()::: client is complete:::return
NTLMClient#unwrap(byte[], int, int)::: client unwrap:::throw->new->IllegalStateException
NTLMClient#wrap(byte[], int, int)::: client wrap:::throw->new->IllegalStateException
NTLMClient#getNegotiatedProperty(String)::: client get negotiated property:::if->isComplete->throw->new->IllegalStateException->switch->return->return->client->getDomain->return
NTLMClient#dispose()::: client dispose:::client->dispose
NTLMClient#hasInitialResponse()::: client has initial response:::return
NTLMClient#evaluateChallenge(byte[])::: client evaluate challenge:::if->return->client->type1->else->try->nonce->new->byteArr->random->nextBytes->return->client->type3->catch->throw->new->SaslException->finally
NTLMServer#getMechanismName()::: server get mechanism name:::return
NTLMServer#evaluateResponse(byte[])::: server evaluate response:::try->if->random->nextBytes->return->server->type2->else->out->server->verify->return->catch->throw->new->SaslException->finally
NTLMServer#isComplete()::: server is complete:::return
NTLMServer#getAuthorizationID()::: server get authorization d:::if->isComplete->throw->new->IllegalStateException->return
NTLMServer#unwrap(byte[], int, int)::: server unwrap:::throw->new->IllegalStateException
NTLMServer#wrap(byte[], int, int)::: server wrap:::throw->new->IllegalStateException
NTLMServer#getNegotiatedProperty(String)::: server get negotiated property:::if->isComplete->throw->new->IllegalStateException->switch->return->return->return->return
NTLMServer#dispose()::: server dispose:::return

jdk.nashorn.internal.runtime.AccessControlContextFactory#createAccessControlContext()->AccessControlContext:::Creates an access control context with no permissions.
jdk.nashorn.internal.runtime.AccessControlContextFactory#createAccessControlContext(Permission...)->AccessControlContext:::Creates an access control context limited to only the specified permissions.
jdk.nashorn.internal.runtime.AccessControlContextFactory#createAccessControlContext(String...)->AccessControlContext:::Creates an access control context limited to only the RuntimePermissions of the given names.
jdk.nashorn.internal.runtime.AccessorProperty#create(Object, int, MethodHandle, MethodHandle)->AccessorProperty:::Create a new accessor property
jdk.nashorn.internal.runtime.AccessorProperty#setInitialValue(ScriptObject, Object)->void:::Set initial value of a script object's property
jdk.nashorn.internal.runtime.AccessorProperty#initializeType()->void:::Initialize the type of a property
jdk.nashorn.internal.runtime.AccessorProperty#copy()->Property::: accessor property copy
jdk.nashorn.internal.runtime.AccessorProperty#copy(Class)->Property::: accessor property copy
jdk.nashorn.internal.runtime.AccessorProperty#getIntValue(ScriptObject, ScriptObject)->int::: accessor property get int value
jdk.nashorn.internal.runtime.AccessorProperty#getDoubleValue(ScriptObject, ScriptObject)->double::: accessor property get double value
jdk.nashorn.internal.runtime.AccessorProperty#getObjectValue(ScriptObject, ScriptObject)->Object::: accessor property get object value
jdk.nashorn.internal.runtime.AccessorProperty#invokeSetter(ScriptObject, int)->void:::Invoke setter for this property with a value
jdk.nashorn.internal.runtime.AccessorProperty#invokeSetter(ScriptObject, double)->void:::Invoke setter for this property with a value
jdk.nashorn.internal.runtime.AccessorProperty#invokeSetter(ScriptObject, Object)->void:::Invoke setter for this property with a value
jdk.nashorn.internal.runtime.AccessorProperty#setValue(ScriptObject, ScriptObject, int, boolean)->void::: accessor property set value
jdk.nashorn.internal.runtime.AccessorProperty#setValue(ScriptObject, ScriptObject, double, boolean)->void::: accessor property set value
jdk.nashorn.internal.runtime.AccessorProperty#setValue(ScriptObject, ScriptObject, Object, boolean)->void::: accessor property set value
jdk.nashorn.internal.runtime.AccessorProperty#initMethodHandles(Class)->void::: accessor property init method handles
jdk.nashorn.internal.runtime.AccessorProperty#getGetter(Class)->MethodHandle::: accessor property get getter
jdk.nashorn.internal.runtime.AccessorProperty#getOptimisticGetter(Class, int)->MethodHandle::: accessor property get optimistic getter
jdk.nashorn.internal.runtime.AccessorProperty#isUndefined()->boolean:::Is this property of the undefined type?
jdk.nashorn.internal.runtime.AccessorProperty#hasNativeSetter()->boolean::: accessor property has native setter
jdk.nashorn.internal.runtime.AccessorProperty#getSetter(Class, PropertyMap)->MethodHandle::: accessor property get setter
jdk.nashorn.internal.runtime.AccessorProperty#canChangeType()->boolean::: accessor property can change type
jdk.nashorn.internal.runtime.AllocationStrategy#getAllocatorMap(ScriptObject)->PropertyMap:::Get the property map for the allocated object.
jdk.nashorn.internal.runtime.AllocationStrategy#allocate(PropertyMap)->ScriptObject:::Allocate an object with the given property map
jdk.nashorn.internal.runtime.AllocationStrategy#toString()->String::: allocation strategy to string
jdk.nashorn.internal.runtime.AllocationStrategy.AllocatorMap#hasSamePrototype(ScriptObject)->boolean::: allocator map has same prototype
jdk.nashorn.internal.runtime.AllocationStrategy.AllocatorMap#hasSameProtoMap(PropertyMap)->boolean::: allocator map has same proto map
jdk.nashorn.internal.runtime.AllocationStrategy.AllocatorMap#hasUnchangedProtoMap()->boolean::: allocator map has unchanged proto map
jdk.nashorn.internal.runtime.AllocationStrategy.AllocatorMap#hasSharedProtoMap()->boolean::: allocator map has shared proto map
jdk.nashorn.internal.runtime.AllocationStrategy.AllocatorMap#hasValidSharedProtoMap()->boolean::: allocator map has valid shared proto map
jdk.nashorn.internal.runtime.AllocationStrategy.AllocatorMap#getSharedProtoMap()->PropertyMap::: allocator map get shared proto map
jdk.nashorn.internal.runtime.ArgumentSetter#setArgument(Object, ScriptObject, int)->void:::Used from generated bytecode to invoke ScriptObject#setArgument(int, Object) without having to reorder the arguments on the stack
jdk.nashorn.internal.runtime.ArgumentSetter#setArrayElement(Object, Object[], int)->void:::Used from generated bytecode to set a variable arity parameter - an array element - without having to reorder the arguments on the stack
jdk.nashorn.internal.runtime.AstDeserializer#deserialize(byte[])->FunctionNode::: ast deserializer deserialize
jdk.nashorn.internal.runtime.AstSerializer#serialize(FunctionNode)->byte[]::: ast serializer serialize
jdk.nashorn.internal.runtime.BitVector#copy(BitVector)->void:::Copy another BitVector into this one
jdk.nashorn.internal.runtime.BitVector#resize(long)->void:::Resize the bit vector to accommodate the new length.
jdk.nashorn.internal.runtime.BitVector#set(long)->void:::Set a bit in the bit vector.
jdk.nashorn.internal.runtime.BitVector#clear(long)->void:::Clear a bit in the bit vector.
jdk.nashorn.internal.runtime.BitVector#toggle(long)->void:::Toggle a bit in the bit vector.
jdk.nashorn.internal.runtime.BitVector#setTo(long)->void:::Sets all bits in the vector up to the length.
jdk.nashorn.internal.runtime.BitVector#clearAll()->void:::Clears all bits in the vector.
jdk.nashorn.internal.runtime.BitVector#isSet(long)->boolean:::Test if bit is set in the bit vector.
jdk.nashorn.internal.runtime.BitVector#isClear(long)->boolean:::Test if a bit is clear in the bit vector.
jdk.nashorn.internal.runtime.BitVector#shiftLeft(long, long)->void:::Shift bits to the left by shift.
jdk.nashorn.internal.runtime.BitVector#shiftRight(long, long)->void:::Shift bits to the right by shift.
jdk.nashorn.internal.runtime.BitVector#setRange(long, long)->void:::Set a bit range.
jdk.nashorn.internal.runtime.CodeInstaller#getContext()->Context:::Return the Context associated with this code installer.
jdk.nashorn.internal.runtime.CodeInstaller#install(String, byte[])->Class:::Install a class.
jdk.nashorn.internal.runtime.CodeInstaller#initialize(Collection>, Source, Object[])->void:::Initialize already installed classes.
jdk.nashorn.internal.runtime.CodeInstaller#verify(byte[])->void:::Verify generated bytecode before emission
jdk.nashorn.internal.runtime.CodeInstaller#getUniqueScriptId()->long:::Get next unique script id
jdk.nashorn.internal.runtime.CodeInstaller#storeScript(String, Source, String, Map, Map, Object[], int)->void:::Store a compiled script for later reuse
jdk.nashorn.internal.runtime.CodeInstaller#loadScript(Source, String)->StoredScript:::Load a previously compiled script
jdk.nashorn.internal.runtime.CodeInstaller#getOnDemandCompilationInstaller()->CodeInstaller:::Returns a code installer #isCompatibleWith(CodeInstaller) compatible with this installer, but is suitable for on-demand compilations
jdk.nashorn.internal.runtime.CodeInstaller#getMultiClassCodeInstaller()->CodeInstaller:::Returns a code installer #isCompatibleWith(CodeInstaller) compatible with this installer, but is suitable for installation of multiple classes that reference each other by name
jdk.nashorn.internal.runtime.CodeInstaller#isCompatibleWith(CodeInstaller)->boolean:::Returns true if this code installer is compatible with the other code installer
jdk.nashorn.internal.runtime.CodeStore#initLogger(Context)->DebugLogger::: code store init logger
jdk.nashorn.internal.runtime.CodeStore#getLogger()->DebugLogger::: code store get logger
jdk.nashorn.internal.runtime.CodeStore#newCodeStore(Context)->CodeStore:::Returns a new code store instance.
jdk.nashorn.internal.runtime.CodeStore#store(String, Source, String, Map, Map, Object[], int)->StoredScript:::Store a compiled script in the cache.
jdk.nashorn.internal.runtime.CodeStore#store(String, Source, StoredScript)->StoredScript:::Stores a compiled script.
jdk.nashorn.internal.runtime.CodeStore#load(Source, String)->StoredScript:::Return a compiled script from the cache, or null if it isn't found.
jdk.nashorn.internal.runtime.CodeStore#storedScriptFor(Source, String, Map, Map, Object[], int)->StoredScript:::Returns a new StoredScript instance.
jdk.nashorn.internal.runtime.CodeStore#getCacheKey(Object, Type[])->String:::Generate a string representing the function with functionId and paramTypes.
jdk.nashorn.internal.runtime.CodeStore.DirectoryCodeStore#load(Source, String)->StoredScript::: directory code store load
jdk.nashorn.internal.runtime.CodeStore.DirectoryCodeStore#store(String, Source, StoredScript)->StoredScript::: directory code store store
jdk.nashorn.internal.runtime.CommandExecutor#process(String)->void:::process - process a command string
jdk.nashorn.internal.runtime.CommandExecutor#process(List)->void:::process - process a command array of strings
jdk.nashorn.internal.runtime.CommandExecutor#reportError(String, String)->void::: command executor report error
jdk.nashorn.internal.runtime.CommandExecutor#getOutputString()->String::: command executor get output string
jdk.nashorn.internal.runtime.CommandExecutor#getErrorString()->String::: command executor get error string
jdk.nashorn.internal.runtime.CommandExecutor#getExitCode()->int::: command executor get exit code
jdk.nashorn.internal.runtime.CommandExecutor#setEnvironment(Map)->void::: command executor set environment
jdk.nashorn.internal.runtime.CommandExecutor#setInputStream(InputStream)->void::: command executor set input stream
jdk.nashorn.internal.runtime.CommandExecutor#setInputString(String)->void::: command executor set input string
jdk.nashorn.internal.runtime.CommandExecutor#setOutputStream(OutputStream)->void::: command executor set output stream
jdk.nashorn.internal.runtime.CommandExecutor#setErrorStream(OutputStream)->void::: command executor set error stream
jdk.nashorn.internal.runtime.CompiledFunction#createBuiltInConstructor(MethodHandle, Specialization)->CompiledFunction::: compiled function create built in constructor
jdk.nashorn.internal.runtime.CompiledFunction#createBuiltInConstructor(MethodHandle)->CompiledFunction::: compiled function create built in constructor
jdk.nashorn.internal.runtime.CompiledFunction#isSpecialization()->boolean::: compiled function is specialization
jdk.nashorn.internal.runtime.CompiledFunction#hasLinkLogic()->boolean::: compiled function has link logic
jdk.nashorn.internal.runtime.CompiledFunction#getLinkLogicClass()->Class::: compiled function get link logic class
jdk.nashorn.internal.runtime.CompiledFunction#convertsNumericArgs()->boolean::: compiled function converts numeric args
jdk.nashorn.internal.runtime.CompiledFunction#getFlags()->int::: compiled function get flags
jdk.nashorn.internal.runtime.CompiledFunction#isOptimistic()->boolean:::An optimistic specialization is one that can throw UnwarrantedOptimismException
jdk.nashorn.internal.runtime.CompiledFunction#isApplyToCall()->boolean::: compiled function is apply to call
jdk.nashorn.internal.runtime.CompiledFunction#isVarArg()->boolean::: compiled function is var arg
jdk.nashorn.internal.runtime.CompiledFunction#toString()->String::: compiled function to string
jdk.nashorn.internal.runtime.CompiledFunction#needsCallee()->boolean::: compiled function needs callee
jdk.nashorn.internal.runtime.CompiledFunction#createComposableInvoker()->MethodHandle:::Returns an invoker method handle for this function
jdk.nashorn.internal.runtime.CompiledFunction#createComposableConstructor()->MethodHandle:::Returns an invoker method handle for this function when invoked as a constructor
jdk.nashorn.internal.runtime.CompiledFunction#hasConstructor()->boolean::: compiled function has constructor
jdk.nashorn.internal.runtime.CompiledFunction#type()->MethodType::: compiled function type
jdk.nashorn.internal.runtime.CompiledFunction#weight()->int::: compiled function weight
jdk.nashorn.internal.runtime.CompiledFunction#isVarArgsType(MethodType)->boolean::: compiled function is var args type
jdk.nashorn.internal.runtime.CompiledFunction#moreGenericThan(MethodType, MethodType)->boolean::: compiled function more generic than
jdk.nashorn.internal.runtime.CompiledFunction#betterThanFinal(CompiledFunction, MethodType)->boolean::: compiled function better than final
jdk.nashorn.internal.runtime.CompiledFunction#matchesCallSite(MethodType, boolean)->boolean::: compiled function matches call site
jdk.nashorn.internal.runtime.CompiledFunction#createFunctionInvocation(Class, int)->GuardedInvocation:::Returns a guarded invocation for this function when not invoked as a constructor
jdk.nashorn.internal.runtime.CompiledFunction#createConstructorInvocation()->GuardedInvocation:::Returns a guarded invocation for this function when invoked as a constructor
jdk.nashorn.internal.runtime.ConsString#toString()->String::: cons string to string
jdk.nashorn.internal.runtime.ConsString#length()->int::: cons string length
jdk.nashorn.internal.runtime.ConsString#charAt(int)->char::: cons string char at
jdk.nashorn.internal.runtime.ConsString#subSequence(int, int)->CharSequence::: cons string sub sequence
jdk.nashorn.internal.runtime.ConsString#getComponents()->CharSequence[]:::Returns the components of this ConsString as a CharSequence array with two elements
jdk.nashorn.internal.runtime.Context#getNamedInstalledScriptCount()->long::: context get named installed script count
jdk.nashorn.internal.runtime.Context#getAnonymousInstalledScriptCount()->long::: context get anonymous installed script count
jdk.nashorn.internal.runtime.Context#getGlobal()->Global:::Get the current global scope
jdk.nashorn.internal.runtime.Context#setGlobal(ScriptObject)->void:::Set the current global scope
jdk.nashorn.internal.runtime.Context#setGlobal(Global)->void:::Set the current global scope
jdk.nashorn.internal.runtime.Context#getContext()->Context:::Get context of the current global
jdk.nashorn.internal.runtime.Context#getCurrentErr()->PrintWriter:::Get current context's error writer
jdk.nashorn.internal.runtime.Context#err(String)->void:::Output text to this Context's error stream
jdk.nashorn.internal.runtime.Context#err(String, boolean)->void:::Output text to this Context's error stream, optionally with a newline afterwards
jdk.nashorn.internal.runtime.Context#getAppLoader()->ClassLoader::: context get app loader
jdk.nashorn.internal.runtime.Context#getStructLoader()->StructureLoader::: context get struct loader
jdk.nashorn.internal.runtime.Context.ThrowErrorManager#error(String)->void::: throw error manager error
jdk.nashorn.internal.runtime.Context.ThrowErrorManager#error(ParserException)->void::: throw error manager error
jdk.nashorn.internal.runtime.Context#getClassFilter()->ClassFilter:::Get the class filter for this context
jdk.nashorn.internal.runtime.Context#getGlobalConstants()->GlobalConstants:::Returns the factory for constant method handles for global properties
jdk.nashorn.internal.runtime.Context#getErrorManager()->ErrorManager:::Get the error manager for this context
jdk.nashorn.internal.runtime.Context#getEnv()->ScriptEnvironment:::Get the script environment for this context
jdk.nashorn.internal.runtime.Context#getOut()->PrintWriter:::Get the output stream for this context
jdk.nashorn.internal.runtime.Context#getErr()->PrintWriter:::Get the error stream for this context
jdk.nashorn.internal.runtime.Context#useDualFields()->boolean:::Should scripts compiled by this context use dual field representation?
jdk.nashorn.internal.runtime.Context#getGlobalMap()->PropertyMap:::Get the PropertyMap of the current global scope
jdk.nashorn.internal.runtime.Context#compileScript(Source, ScriptObject)->ScriptFunction:::Compile a top level script.
jdk.nashorn.internal.runtime.Context.MultiGlobalCompiledScript#getFunction(Global)->ScriptFunction:::Obtain script function object for a specific global scope object.
jdk.nashorn.internal.runtime.Context#compileScript(Source)->MultiGlobalCompiledScript:::Compile a top level script.
jdk.nashorn.internal.runtime.Context#eval(ScriptObject, String, Object, Object)->Object:::Entry point for eval
jdk.nashorn.internal.runtime.Context#eval(ScriptObject, String, Object, Object, boolean, boolean)->Object:::Entry point for eval
jdk.nashorn.internal.runtime.Context#load(Object, Object)->Object:::Implementation of load Nashorn extension
jdk.nashorn.internal.runtime.Context#loadWithNewGlobal(Object, Object...)->Object:::Implementation of loadWithNewGlobal Nashorn extension
jdk.nashorn.internal.runtime.Context#forStructureClass(String)->Class:::Load or get a structure class
jdk.nashorn.internal.runtime.Context#isStructureClass(String)->boolean:::Is className the name of a structure class?
jdk.nashorn.internal.runtime.Context#checkPackageAccess(Class)->void:::Checks that the given Class can be accessed from no permissions context.
jdk.nashorn.internal.runtime.Context#checkPackageAccess(String)->void:::Checks that the given package name can be accessed from no permissions context.
jdk.nashorn.internal.runtime.Context#isAccessibleClass(Class)->boolean:::Checks that the given Class is public and it can be accessed from no permissions context.
jdk.nashorn.internal.runtime.Context#findClass(String)->Class:::Lookup a Java class
jdk.nashorn.internal.runtime.Context#printStackTrace(Throwable)->void:::Hook to print stack trace for a Throwable that occurred during execution
jdk.nashorn.internal.runtime.Context#verify(byte[])->void:::Verify generated bytecode before emission
jdk.nashorn.internal.runtime.Context#createGlobal()->Global:::Create and initialize a new global scope object.
jdk.nashorn.internal.runtime.Context#newGlobal()->Global:::Create a new uninitialized global scope object
jdk.nashorn.internal.runtime.Context#initGlobal(Global, ScriptEngine)->Global:::Initialize given global scope object.
jdk.nashorn.internal.runtime.Context#initGlobal(Global)->Global:::Initialize given global scope object.
jdk.nashorn.internal.runtime.Context#getContextTrusted()->Context:::Return the current global's context
jdk.nashorn.internal.runtime.Context#getDynamicLinker(Class)->DynamicLinker:::Gets the Nashorn dynamic linker for the specified class
jdk.nashorn.internal.runtime.Context#getDynamicLinker()->DynamicLinker:::Gets the Nashorn dynamic linker associated with the current context.
jdk.nashorn.internal.runtime.Context#createModuleTrusted(ModuleDescriptor, ClassLoader)->Module:::Creates a module layer with one module that is defined to the given class loader.
jdk.nashorn.internal.runtime.Context#createModuleTrusted(ModuleLayer, ModuleDescriptor, ClassLoader)->Module:::Creates a module layer with one module that is defined to the given class loader.
jdk.nashorn.internal.runtime.Context#getContextTrustedOrNull()->Context::: context get context trusted or null
jdk.nashorn.internal.runtime.Context#fromClass(Class)->Context:::Try to infer Context instance from the Class
jdk.nashorn.internal.runtime.Context#getLogger(Class)->DebugLogger:::Get a logger, given a loggable class
jdk.nashorn.internal.runtime.Context#getLogger(Class, Consumer)->DebugLogger:::Get a logger, given a loggable class
jdk.nashorn.internal.runtime.Context#addLoggingToHandle(Class, MethodHandle, Supplier)->MethodHandle:::Given a Loggable class, weave debug info info a method handle for that logger
jdk.nashorn.internal.runtime.Context#addLoggingToHandle(Class, Level, MethodHandle, int, boolean, Supplier)->MethodHandle:::Given a Loggable class, weave debug info info a method handle for that logger.
jdk.nashorn.internal.runtime.Context#newBuiltinSwitchPoint(String)->SwitchPoint:::Create a new builtin switchpoint and return it
jdk.nashorn.internal.runtime.Context#getBuiltinSwitchPoint(String)->SwitchPoint:::Return the builtin switchpoint for a particular key name
jdk.nashorn.internal.runtime.Debug#firstJSFrame(Throwable)->String:::Return the topmost JavaScript frame in a stack trace
jdk.nashorn.internal.runtime.Debug#firstJSFrame()->String:::Return the topmost JavaScript frame from the current continuation
jdk.nashorn.internal.runtime.Debug#scriptStack()->String:::Return a formatted script stack trace string with frames information separated by '\n'
jdk.nashorn.internal.runtime.Debug#id(Object)->String:::Return the system identity hashcode for an object as a human readable string
jdk.nashorn.internal.runtime.Debug#intId(Object)->int:::Same as Debug#id but returns the identity hashcode as an integer
jdk.nashorn.internal.runtime.Debug#stackTraceElementAt(int)->String:::Return a stack trace element description at a depth from where we are not
jdk.nashorn.internal.runtime.Debug#caller(int, int, String...)->String:::Determine caller for tracing purposes.
jdk.nashorn.internal.runtime.Debug#dumpTokens(Source, Lexer, TokenStream)->void:::Dump a token stream to stdout  TODO: most other bugging goes to stderr, change?
jdk.nashorn.internal.runtime.DebuggerSupport#notifyInvoke(MethodHandle)->void:::Hook that is called just before invoking method handle from ScriptFunctionData via invoke, constructor method calls.
jdk.nashorn.internal.runtime.DebuggerSupport#getSourceInfo(Class)->SourceInfo:::Return the script source info for the given script class.
jdk.nashorn.internal.runtime.DebuggerSupport#getGlobal()->Object:::Return the current context global.
jdk.nashorn.internal.runtime.DebuggerSupport#eval(ScriptObject, Object, String, boolean)->Object:::Call eval on the current global.
jdk.nashorn.internal.runtime.DebuggerSupport#valueInfos(Object, boolean)->DebuggerValueDesc[]:::This method returns a bulk description of an object's properties.
jdk.nashorn.internal.runtime.DebuggerSupport#valueInfo(String, Object, boolean)->DebuggerValueDesc:::This method returns a debugger description of the value.
jdk.nashorn.internal.runtime.DebuggerSupport#valueAsString(Object)->String:::This method returns a string representation of a value.
jdk.nashorn.internal.runtime.DefaultPropertyAccess#getInt(Object, int)->int::: default property access get int
jdk.nashorn.internal.runtime.DefaultPropertyAccess#getInt(double, int)->int::: default property access get int
jdk.nashorn.internal.runtime.DefaultPropertyAccess#getInt(int, int)->int::: default property access get int
jdk.nashorn.internal.runtime.DefaultPropertyAccess#getDouble(Object, int)->double::: default property access get double
jdk.nashorn.internal.runtime.DefaultPropertyAccess#getDouble(double, int)->double::: default property access get double
jdk.nashorn.internal.runtime.DefaultPropertyAccess#getDouble(int, int)->double::: default property access get double
jdk.nashorn.internal.runtime.DefaultPropertyAccess#get(Object)->Object::: default property access get
jdk.nashorn.internal.runtime.DefaultPropertyAccess#get(double)->Object::: default property access get
jdk.nashorn.internal.runtime.DefaultPropertyAccess#get(int)->Object::: default property access get
jdk.nashorn.internal.runtime.DefaultPropertyAccess#set(double, int, int)->void::: default property access set
jdk.nashorn.internal.runtime.DefaultPropertyAccess#set(double, double, int)->void::: default property access set
jdk.nashorn.internal.runtime.DefaultPropertyAccess#set(double, Object, int)->void::: default property access set
jdk.nashorn.internal.runtime.DefaultPropertyAccess#set(int, int, int)->void::: default property access set
jdk.nashorn.internal.runtime.DefaultPropertyAccess#set(int, double, int)->void::: default property access set
jdk.nashorn.internal.runtime.DefaultPropertyAccess#set(int, Object, int)->void::: default property access set
jdk.nashorn.internal.runtime.DefaultPropertyAccess#set(Object, int, int)->void::: default property access set
jdk.nashorn.internal.runtime.DefaultPropertyAccess#set(Object, double, int)->void::: default property access set
jdk.nashorn.internal.runtime.DefaultPropertyAccess#set(Object, Object, int)->void::: default property access set
jdk.nashorn.internal.runtime.DefaultPropertyAccess#has(Object)->boolean::: default property access has
jdk.nashorn.internal.runtime.DefaultPropertyAccess#has(int)->boolean::: default property access has
jdk.nashorn.internal.runtime.DefaultPropertyAccess#has(double)->boolean::: default property access has
jdk.nashorn.internal.runtime.DefaultPropertyAccess#hasOwnProperty(int)->boolean::: default property access has own property
jdk.nashorn.internal.runtime.DefaultPropertyAccess#hasOwnProperty(double)->boolean::: default property access has own property
jdk.nashorn.internal.runtime.DefaultPropertyAccess#hasOwnProperty(Object)->boolean::: default property access has own property
jdk.nashorn.internal.runtime.DefaultPropertyAccess#delete(int, boolean)->boolean::: default property access delete
jdk.nashorn.internal.runtime.DefaultPropertyAccess#delete(double, boolean)->boolean::: default property access delete
jdk.nashorn.internal.runtime.ECMAErrors#asEcmaException(ParserException)->ECMAException:::Error dispatch mechanism
jdk.nashorn.internal.runtime.ECMAErrors#asEcmaException(Global, ParserException)->ECMAException:::Error dispatch mechanism
jdk.nashorn.internal.runtime.ECMAErrors#syntaxError(String, String...)->ECMAException:::Create a syntax error (ECMA 15.11.6.4)
jdk.nashorn.internal.runtime.ECMAErrors#syntaxError(Global, String, String...)->ECMAException:::Create a syntax error (ECMA 15.11.6.4)
jdk.nashorn.internal.runtime.ECMAErrors#syntaxError(Throwable, String, String...)->ECMAException:::Create a syntax error (ECMA 15.11.6.4)
jdk.nashorn.internal.runtime.ECMAErrors#syntaxError(Global, Throwable, String, String...)->ECMAException:::Create a syntax error (ECMA 15.11.6.4)
jdk.nashorn.internal.runtime.ECMAErrors#typeError(String, String...)->ECMAException:::Create a type error (ECMA 15.11.6.5)
jdk.nashorn.internal.runtime.ECMAErrors#typeError(Global, String, String...)->ECMAException:::Create a type error (ECMA 15.11.6.5)
jdk.nashorn.internal.runtime.ECMAErrors#typeError(Throwable, String, String...)->ECMAException:::Create a type error (ECMA 15.11.6.5)
jdk.nashorn.internal.runtime.ECMAErrors#typeError(Global, Throwable, String, String...)->ECMAException:::Create a type error (ECMA 15.11.6.5)
jdk.nashorn.internal.runtime.ECMAErrors#rangeError(String, String...)->ECMAException:::Create a range error (ECMA 15.11.6.2)
jdk.nashorn.internal.runtime.ECMAErrors#rangeError(Global, String, String...)->ECMAException:::Create a range error (ECMA 15.11.6.2)
jdk.nashorn.internal.runtime.ECMAErrors#rangeError(Throwable, String, String...)->ECMAException:::Create a range error (ECMA 15.11.6.2)
jdk.nashorn.internal.runtime.ECMAErrors#rangeError(Global, Throwable, String, String...)->ECMAException:::Create a range error (ECMA 15.11.6.2)
jdk.nashorn.internal.runtime.ECMAErrors#referenceError(String, String...)->ECMAException:::Create a reference error (ECMA 15.11.6.3)
jdk.nashorn.internal.runtime.ECMAErrors#referenceError(Global, String, String...)->ECMAException:::Create a reference error (ECMA 15.11.6.3)
jdk.nashorn.internal.runtime.ECMAErrors#referenceError(Throwable, String, String...)->ECMAException:::Create a reference error (ECMA 15.11.6.3)
jdk.nashorn.internal.runtime.ECMAErrors#referenceError(Global, Throwable, String, String...)->ECMAException:::Create a reference error (ECMA 15.11.6.3)
jdk.nashorn.internal.runtime.ECMAErrors#uriError(String, String...)->ECMAException:::Create a URI error (ECMA 15.11.6.6)
jdk.nashorn.internal.runtime.ECMAErrors#uriError(Global, String, String...)->ECMAException:::Create a URI error (ECMA 15.11.6.6)
jdk.nashorn.internal.runtime.ECMAErrors#uriError(Throwable, String, String...)->ECMAException:::Create a URI error (ECMA 15.11.6.6)
jdk.nashorn.internal.runtime.ECMAErrors#uriError(Global, Throwable, String, String...)->ECMAException:::Create a URI error (ECMA 15.11.6.6)
jdk.nashorn.internal.runtime.ECMAErrors#getMessage(String, String...)->String:::Get the exception message by placing the args in the resource defined by the resource tag
jdk.nashorn.internal.runtime.ECMAErrors#isScriptFrame(StackTraceElement)->boolean:::Check if a stack trace element is in JavaScript
jdk.nashorn.internal.runtime.ECMAException#create(Object, String, int, int)->ECMAException:::Factory method to retrieve the underlying exception or create an exception
jdk.nashorn.internal.runtime.ECMAException#getThrown()->Object:::Get the thrown object
jdk.nashorn.internal.runtime.ECMAException#toString()->String::: exception to string
jdk.nashorn.internal.runtime.ECMAException#getException(ScriptObject)->Object:::Get the ECMAException, i.e
jdk.nashorn.internal.runtime.ECMAException#printStackTrace(ScriptObject)->Object:::Print the stack trace for a ScriptObject representing an error
jdk.nashorn.internal.runtime.ECMAException#getLineNumber(ScriptObject)->Object:::Get the line number for a ScriptObject representing an error
jdk.nashorn.internal.runtime.ECMAException#getColumnNumber(ScriptObject)->Object:::Get the column number for a ScriptObject representing an error
jdk.nashorn.internal.runtime.ECMAException#getFileName(ScriptObject)->Object:::Get the file name for a ScriptObject representing an error
jdk.nashorn.internal.runtime.ECMAException#safeToString(ScriptObject)->String:::Stateless string conversion for an error object
jdk.nashorn.internal.runtime.ErrorManager#format(String, Source, int, int, long)->String:::Format an error message to include source and line information.
jdk.nashorn.internal.runtime.ErrorManager#error(ParserException)->void::: error manager error
jdk.nashorn.internal.runtime.ErrorManager#error(String)->void:::Report an error message provided
jdk.nashorn.internal.runtime.ErrorManager#warning(ParserException)->void:::Report a warning using information provided by the ParserException
jdk.nashorn.internal.runtime.ErrorManager#warning(String)->void:::Report a warning message provided
jdk.nashorn.internal.runtime.ErrorManager#hasErrors()->boolean:::Test to see if errors have occurred.
jdk.nashorn.internal.runtime.ErrorManager#getLimit()->int:::Get the message limit
jdk.nashorn.internal.runtime.ErrorManager#setLimit(int)->void:::Set the message limit
jdk.nashorn.internal.runtime.ErrorManager#isWarningsAsErrors()->boolean:::Check whether warnings should be treated like errors
jdk.nashorn.internal.runtime.ErrorManager#setWarningsAsErrors(boolean)->void:::Set warnings to be treated as errors
jdk.nashorn.internal.runtime.ErrorManager#getNumberOfErrors()->int:::Get the number of errors
jdk.nashorn.internal.runtime.ErrorManager#getNumberOfWarnings()->int:::Get number of warnings
jdk.nashorn.internal.runtime.ErrorManager#reset()->void:::Clear warnings and error count.
jdk.nashorn.internal.runtime.FinalScriptFunctionData#getDocumentationKey()->String::: final script function data get documentation key
jdk.nashorn.internal.runtime.FinalScriptFunctionData#setDocumentationKey(String)->void::: final script function data set documentation key
jdk.nashorn.internal.runtime.FinalScriptFunctionData#getDocumentation()->String::: final script function data get documentation
jdk.nashorn.internal.runtime.FinalScriptFunctionData#needsCallee()->boolean::: final script function data needs callee
jdk.nashorn.internal.runtime.FinalScriptFunctionData#getBest(MethodType, ScriptObject, Collection, boolean)->CompiledFunction::: final script function data get best
jdk.nashorn.internal.runtime.FinalScriptFunctionData#getGenericType()->MethodType::: final script function data get generic type
jdk.nashorn.internal.runtime.FindProperty#replaceProperty(Property)->FindProperty:::Return a copy of this FindProperty with a different property.
jdk.nashorn.internal.runtime.FindProperty#getGetter(Class, int, LinkRequest)->MethodHandle:::Ask for a getter that returns the given type
jdk.nashorn.internal.runtime.FindProperty#getSetter(Class, boolean, LinkRequest)->MethodHandle:::Ask for a setter that sets the given type
jdk.nashorn.internal.runtime.FindProperty#getOwner()->ScriptObject:::Return the ScriptObject owning of the property:  this means the prototype.
jdk.nashorn.internal.runtime.FindProperty#getSelf()->ScriptObject:::Return the ScriptObject where the search started
jdk.nashorn.internal.runtime.FindProperty#getGetterReceiver()->ScriptObject:::Return the appropriate receiver for a getter.
jdk.nashorn.internal.runtime.FindProperty#getSetterReceiver()->ScriptObject:::Return the appropriate receiver for a setter.
jdk.nashorn.internal.runtime.FindProperty#getProperty()->Property:::Return the property that was found
jdk.nashorn.internal.runtime.FindProperty#isInheritedOrdinaryProperty()->boolean:::Check if the property found was inherited from a prototype and it is an ordinary property (one that has no accessor function).
jdk.nashorn.internal.runtime.FindProperty#isSelf()->boolean:::Check if the property found was NOT inherited, i.e
jdk.nashorn.internal.runtime.FindProperty#isScope()->boolean:::Check if the property is in the scope
jdk.nashorn.internal.runtime.FindProperty#getIntValue()->int:::Get the property value from self as object.
jdk.nashorn.internal.runtime.FindProperty#getDoubleValue()->double:::Get the property value from self as object.
jdk.nashorn.internal.runtime.FindProperty#getObjectValue()->Object:::Get the property value from self as object.
jdk.nashorn.internal.runtime.FindProperty#setValue(int, boolean)->void:::Set the property value in self.
jdk.nashorn.internal.runtime.FindProperty#setValue(double, boolean)->void:::Set the property value in self.
jdk.nashorn.internal.runtime.FindProperty#setValue(Object, boolean)->void:::Set the property value in self.
jdk.nashorn.internal.runtime.FindProperty#getProtoChainLength()->int:::Get the number of objects in the prototype chain between the self and the owner objects.
jdk.nashorn.internal.runtime.FindProperty#toString()->String::: find property to string
jdk.nashorn.internal.runtime.FunctionDocumentation#getDoc(String)->String::: function documentation get doc
jdk.nashorn.internal.runtime.FunctionInitializer#getClassName()->String:::Returns the name of the class implementing the function.
jdk.nashorn.internal.runtime.FunctionInitializer#getMethodType()->MethodType:::Returns the type of the method implementing the function.
jdk.nashorn.internal.runtime.FunctionInitializer#getFlags()->int:::Returns the function flags.
jdk.nashorn.internal.runtime.FunctionInitializer#getCode()->Class:::Returns the class implementing the function.
jdk.nashorn.internal.runtime.FunctionInitializer#setCode(Class)->void:::Set the class implementing the function
jdk.nashorn.internal.runtime.FunctionInitializer#getInvalidatedProgramPoints()->Map:::Returns the map of invalidated program points.
jdk.nashorn.internal.runtime.GlobalConstants#getLogger()->DebugLogger::: global constants get logger
jdk.nashorn.internal.runtime.GlobalConstants#initLogger(Context)->DebugLogger::: global constants init logger
jdk.nashorn.internal.runtime.GlobalConstants#invalidateAll()->void:::To avoid an expensive global guard "is this the same global", similar to the receiver guard on the ScriptObject level, we invalidate all getters once when we switch globals
jdk.nashorn.internal.runtime.GlobalConstants#invalidateForever()->void:::To avoid an expensive global guard "is this the same global", similar to the receiver guard on the ScriptObject level, we invalidate all getters when the second Global is created by the Context owning this instance
jdk.nashorn.internal.runtime.GlobalConstants#delete(Object)->void:::Called from script object on property deletion to erase a property that might be linked as MethodHandle.constant and force relink
jdk.nashorn.internal.runtime.GlobalConstants#findSetMethod(FindProperty, ScriptObject, GuardedInvocation, CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Augment a setter with switchpoint for invalidating its getters, should the setter be called
jdk.nashorn.internal.runtime.GlobalConstants#staticConstantGetter(Object)->MethodHandle:::Try to reuse constant method handles for getters
jdk.nashorn.internal.runtime.GlobalConstants#findGetMethod(FindProperty, ScriptObject, CallSiteDescriptor)->GuardedInvocation:::Try to turn a getter into a MethodHandle.constant, if possible
jdk.nashorn.internal.runtime.GlobalFunctions#parseInt(Object, Object, Object)->double:::ECMA 15.1.2.2 parseInt implementation
jdk.nashorn.internal.runtime.GlobalFunctions#parseInt(Object, Object, int)->double:::ECMA 15.1.2.2 parseInt implementation specialized for int radix
jdk.nashorn.internal.runtime.GlobalFunctions#parseInt(Object, Object)->double:::ECMA 15.1.2.2 parseInt implementation specialized for no radix argument
jdk.nashorn.internal.runtime.GlobalFunctions#parseFloat(Object, Object)->double:::ECMA 15.1.2.3 parseFloat implementation
jdk.nashorn.internal.runtime.GlobalFunctions#isNaN(Object, Object)->boolean:::ECMA 15.1.2.4, isNaN implementation
jdk.nashorn.internal.runtime.GlobalFunctions#isFinite(Object, Object)->boolean:::ECMA 15.1.2.5, isFinite implementation
jdk.nashorn.internal.runtime.GlobalFunctions#encodeURI(Object, Object)->Object:::ECMA 15.1.3.3, encodeURI implementation
jdk.nashorn.internal.runtime.GlobalFunctions#encodeURIComponent(Object, Object)->Object:::ECMA 15.1.3.4, encodeURIComponent implementation
jdk.nashorn.internal.runtime.GlobalFunctions#decodeURI(Object, Object)->Object:::ECMA 15.1.3.1, decodeURI implementation
jdk.nashorn.internal.runtime.GlobalFunctions#decodeURIComponent(Object, Object)->Object:::ECMA 15.1.3.2, decodeURIComponent implementation
jdk.nashorn.internal.runtime.GlobalFunctions#escape(Object, Object)->String:::ECMA B.2.1, escape implementation
jdk.nashorn.internal.runtime.GlobalFunctions#unescape(Object, Object)->String:::ECMA B.2.2, unescape implementation
jdk.nashorn.internal.runtime.GlobalFunctions#anonymous(Object)->Object:::ECMA 15.3.4 Properties of the Function Prototype Object
jdk.nashorn.internal.runtime.JSONFunctions#quote(String)->String:::Returns JSON-compatible quoted version of the given string.
jdk.nashorn.internal.runtime.JSONFunctions#parse(Object, Object)->Object:::Parses the given JSON text string and returns object representation.
jdk.nashorn.internal.runtime.JSONListAdapter#unwrap(Object)->Object:::Unwraps this adapter into its underlying non-JSObject representative.
jdk.nashorn.internal.runtime.JSONListAdapter#call(Object, Object...)->Object::: list adapter call
jdk.nashorn.internal.runtime.JSONListAdapter#newObject(Object...)->Object::: list adapter new object
jdk.nashorn.internal.runtime.JSONListAdapter#eval(String)->Object::: list adapter eval
jdk.nashorn.internal.runtime.JSONListAdapter#getMember(String)->Object::: list adapter get member
jdk.nashorn.internal.runtime.JSONListAdapter#getSlot(int)->Object::: list adapter get slot
jdk.nashorn.internal.runtime.JSONListAdapter#hasMember(String)->boolean::: list adapter has member
jdk.nashorn.internal.runtime.JSONListAdapter#hasSlot(int)->boolean::: list adapter has slot
jdk.nashorn.internal.runtime.JSONListAdapter#removeMember(String)->void::: list adapter remove member
jdk.nashorn.internal.runtime.JSONListAdapter#setMember(String, Object)->void::: list adapter set member
jdk.nashorn.internal.runtime.JSONListAdapter#setSlot(int, Object)->void::: list adapter set slot
jdk.nashorn.internal.runtime.JSONListAdapter#keySet()->Set::: list adapter key set
jdk.nashorn.internal.runtime.JSONListAdapter#values()->Collection::: list adapter values
jdk.nashorn.internal.runtime.JSONListAdapter#isInstance(Object)->boolean::: list adapter is instance
jdk.nashorn.internal.runtime.JSONListAdapter#isInstanceOf(Object)->boolean::: list adapter is instance of
jdk.nashorn.internal.runtime.JSONListAdapter#getClassName()->String::: list adapter get class name
jdk.nashorn.internal.runtime.JSONListAdapter#isFunction()->boolean::: list adapter is function
jdk.nashorn.internal.runtime.JSONListAdapter#isStrictFunction()->boolean::: list adapter is strict function
jdk.nashorn.internal.runtime.JSONListAdapter#isArray()->boolean::: list adapter is array
jdk.nashorn.internal.runtime.JSONListAdapter#toNumber()->double::: list adapter to number
jdk.nashorn.internal.runtime.JSONListAdapter#getDefaultValue(Class)->Object::: list adapter get default value
jdk.nashorn.internal.runtime.ListAdapter#create(Object)->ListAdapter:::Factory to create a ListAdapter for a given script object.
jdk.nashorn.internal.runtime.ListAdapter#get(int)->Object::: list adapter get
jdk.nashorn.internal.runtime.ListAdapter#set(int, Object)->Object::: list adapter set
jdk.nashorn.internal.runtime.ListAdapter#size()->int::: list adapter size
jdk.nashorn.internal.runtime.ListAdapter#push(Object)->void::: list adapter push
jdk.nashorn.internal.runtime.ListAdapter#add(Object)->boolean::: list adapter add
jdk.nashorn.internal.runtime.ListAdapter#addFirst(Object)->void::: list adapter add first
jdk.nashorn.internal.runtime.ListAdapter#addLast(Object)->void::: list adapter add last
jdk.nashorn.internal.runtime.ListAdapter#add(int, Object)->void::: list adapter add
jdk.nashorn.internal.runtime.ListAdapter#offer(Object)->boolean::: list adapter offer
jdk.nashorn.internal.runtime.ListAdapter#offerFirst(Object)->boolean::: list adapter offer first
jdk.nashorn.internal.runtime.ListAdapter#offerLast(Object)->boolean::: list adapter offer last
jdk.nashorn.internal.runtime.ListAdapter#pop()->Object::: list adapter pop
jdk.nashorn.internal.runtime.ListAdapter#remove()->Object::: list adapter remove
jdk.nashorn.internal.runtime.ListAdapter#removeFirst()->Object::: list adapter remove first
jdk.nashorn.internal.runtime.ListAdapter#removeLast()->Object::: list adapter remove last
jdk.nashorn.internal.runtime.ListAdapter#remove(int)->Object::: list adapter remove
jdk.nashorn.internal.runtime.ListAdapter#removeRange(int, int)->void::: list adapter remove range
jdk.nashorn.internal.runtime.ListAdapter#poll()->Object::: list adapter poll
jdk.nashorn.internal.runtime.ListAdapter#pollFirst()->Object::: list adapter poll first
jdk.nashorn.internal.runtime.ListAdapter#pollLast()->Object::: list adapter poll last
jdk.nashorn.internal.runtime.ListAdapter#peek()->Object::: list adapter peek
jdk.nashorn.internal.runtime.ListAdapter#peekFirst()->Object::: list adapter peek first
jdk.nashorn.internal.runtime.ListAdapter#peekLast()->Object::: list adapter peek last
jdk.nashorn.internal.runtime.ListAdapter#element()->Object::: list adapter element
jdk.nashorn.internal.runtime.ListAdapter#getFirst()->Object::: list adapter get first
jdk.nashorn.internal.runtime.ListAdapter#getLast()->Object::: list adapter get last
jdk.nashorn.internal.runtime.ListAdapter#descendingIterator()->Iterator::: list adapter descending iterator
jdk.nashorn.internal.runtime.ListAdapter#removeFirstOccurrence(Object)->boolean::: list adapter remove first occurrence
jdk.nashorn.internal.runtime.ListAdapter#removeLastOccurrence(Object)->boolean::: list adapter remove last occurrence
jdk.nashorn.internal.runtime.NashornLoader#loadModuleManipulator()->void::: nashorn loader load module manipulator
jdk.nashorn.internal.runtime.NashornLoader#addModuleExport(Module)->void::: nashorn loader add module export
jdk.nashorn.internal.runtime.NashornLoader#checkPackageAccess(String)->void::: nashorn loader check package access
jdk.nashorn.internal.runtime.NashornLoader#getPermissions(CodeSource)->PermissionCollection::: nashorn loader get permissions
jdk.nashorn.internal.runtime.NashornLoader#createClassLoader(String, ClassLoader)->ClassLoader:::Create a secure URL class loader for the given classpath
jdk.nashorn.internal.runtime.NativeJavaPackage#getClassName()->String::: native java package get class name
jdk.nashorn.internal.runtime.NativeJavaPackage#equals(Object)->boolean::: native java package equals
jdk.nashorn.internal.runtime.NativeJavaPackage#hashCode()->int::: native java package hash code
jdk.nashorn.internal.runtime.NativeJavaPackage#getName()->String:::Get the full name of the package
jdk.nashorn.internal.runtime.NativeJavaPackage#safeToString()->String::: native java package safe to string
jdk.nashorn.internal.runtime.NativeJavaPackage#toString()->String::: native java package to string
jdk.nashorn.internal.runtime.NativeJavaPackage#getDefaultValue(Class)->Object::: native java package get default value
jdk.nashorn.internal.runtime.NativeJavaPackage#findNewMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native java package find new method
jdk.nashorn.internal.runtime.NativeJavaPackage#findCallMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native java package find call method
jdk.nashorn.internal.runtime.NativeJavaPackage#__noSuchProperty__(Object, Object)->Object:::"No such property" call placeholder
jdk.nashorn.internal.runtime.NativeJavaPackage#__noSuchMethod__(Object, Object...)->Object:::"No such method call" placeholder  This can never be called as we override ScriptObject#noSuchMethod
jdk.nashorn.internal.runtime.NativeJavaPackage#noSuchProperty(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Handle creation of new attribute.
jdk.nashorn.internal.runtime.NativeJavaPackage#invokeNoSuchProperty(Object, boolean, int)->Object::: native java package invoke no such property
jdk.nashorn.internal.runtime.NativeJavaPackage#noSuchMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native java package no such method
jdk.nashorn.internal.runtime.OptimisticBuiltins#getLinkLogic(Class)->SpecializedFunction.LinkLogic:::Return an instance of the linking logic we need for a particular LinkLogic subclass, gotten from the compile time annotation of a specialized builtin method No assumptions can be made about the lifetime of the instance
jdk.nashorn.internal.runtime.OptimisticBuiltins#hasPerInstanceAssumptions()->boolean:::Does this link logic vary depending on which instance we are working with
jdk.nashorn.internal.runtime.OptimisticReturnFilters#filterOptimisticReturnValue(MethodHandle, Class, int)->MethodHandle:::Given a method handle and an expected return type, perform return value filtering according to the optimistic type coercion rules
jdk.nashorn.internal.runtime.OptimisticReturnFilters#filterOptimisticReturnValue(GuardedInvocation, CallSiteDescriptor)->GuardedInvocation:::Given a guarded invocation and a callsite descriptor, perform return value filtering according to the optimistic type coercion rules, using the return value from the descriptor
jdk.nashorn.internal.runtime.OptimisticReturnFilters#ensureInt(Object, int)->int:::Returns the argument value as an int
jdk.nashorn.internal.runtime.OptimisticReturnFilters#ensureNumber(Object, int)->double:::Returns the argument value as a double
jdk.nashorn.internal.runtime.ParserException#getSource()->Source:::Get the Source of this ParserException
jdk.nashorn.internal.runtime.ParserException#getToken()->long:::Get the token responsible for this ParserException
jdk.nashorn.internal.runtime.ParserException#getPosition()->int:::Get token position within source where the error originated.
jdk.nashorn.internal.runtime.ParserException#getErrorType()->JSErrorType:::Get the JSErrorType of this ParserException
jdk.nashorn.internal.runtime.ParserException#throwAsEcmaException()->void:::Throw this ParserException as one of the 7 native JavaScript errors
jdk.nashorn.internal.runtime.ParserException#throwAsEcmaException(Global)->void:::Throw this ParserException as one of the 7 native JavaScript errors
jdk.nashorn.internal.runtime.Property#copy()->Property:::Copy function
jdk.nashorn.internal.runtime.Property#copy(Class)->Property:::Copy function
jdk.nashorn.internal.runtime.Property#mergeFlags(PropertyDescriptor, PropertyDescriptor)->int:::Property flag utility method for PropertyDescriptors
jdk.nashorn.internal.runtime.Property#setBuiltinSwitchPoint(SwitchPoint)->void:::Set the change callback for this property, i.e
jdk.nashorn.internal.runtime.Property#getBuiltinSwitchPoint()->SwitchPoint:::Builtin properties have an invalidation switchpoint that is invalidated when they are set, this is a getter for it
jdk.nashorn.internal.runtime.Property#isBuiltin()->boolean:::Checks if this is a builtin property, this means that it has a builtin switchpoint that hasn't been invalidated by a setter
jdk.nashorn.internal.runtime.Property#toFlags(PropertyDescriptor)->int:::Property flag utility method for PropertyDescriptor
jdk.nashorn.internal.runtime.Property#hasGetterFunction(ScriptObject)->boolean:::Check whether this property has a user defined getter function
jdk.nashorn.internal.runtime.Property#hasSetterFunction(ScriptObject)->boolean:::Check whether this property has a user defined setter function
jdk.nashorn.internal.runtime.Property#isWritable()->boolean:::Check whether this property is writable (see ECMA 8.6.1)
jdk.nashorn.internal.runtime.Property#isConfigurable()->boolean:::Check whether this property is writable (see ECMA 8.6.1)
jdk.nashorn.internal.runtime.Property#isEnumerable()->boolean:::Check whether this property is enumerable (see ECMA 8.6.1)
jdk.nashorn.internal.runtime.Property#isParameter()->boolean:::Check whether this property is used as a function parameter
jdk.nashorn.internal.runtime.Property#hasArguments()->boolean:::Check whether this property is in an object with arguments field
jdk.nashorn.internal.runtime.Property#isSpill()->boolean:::Check whether this is a spill property, i.e
jdk.nashorn.internal.runtime.Property#isBound()->boolean:::Is this property bound to a receiver? If this method returns true get and set operations will be delegated to a statically bound object instead of the object passed as parameter.
jdk.nashorn.internal.runtime.Property#needsDeclaration()->boolean:::Is this a LET or CONST property that needs to see its declaration before being usable?
jdk.nashorn.internal.runtime.Property#addFlags(int)->Property:::Add more property flags to the property
jdk.nashorn.internal.runtime.Property#getFlags()->int:::Get the flags for this property
jdk.nashorn.internal.runtime.Property#removeFlags(int)->Property:::Remove property flags from the property
jdk.nashorn.internal.runtime.Property#setFlags(int)->Property:::Reset the property for this property
jdk.nashorn.internal.runtime.Property#getGetter(Class)->MethodHandle:::Abstract method for retrieving the getter for the property
jdk.nashorn.internal.runtime.Property#getOptimisticGetter(Class, int)->MethodHandle:::Get an optimistic getter that throws an exception if type is not the known given one
jdk.nashorn.internal.runtime.Property#initMethodHandles(Class)->void:::Hook to initialize method handles after deserialization.
jdk.nashorn.internal.runtime.Property#getKey()->Object:::Get the key for this property
jdk.nashorn.internal.runtime.Property#getSlot()->int:::Get the field number or spill slot
jdk.nashorn.internal.runtime.Property#getIntValue(ScriptObject, ScriptObject)->int:::get the Object value of this property from owner
jdk.nashorn.internal.runtime.Property#getDoubleValue(ScriptObject, ScriptObject)->double:::get the Object value of this property from owner
jdk.nashorn.internal.runtime.Property#getObjectValue(ScriptObject, ScriptObject)->Object:::get the Object value of this property from owner
jdk.nashorn.internal.runtime.Property#setValue(ScriptObject, ScriptObject, int, boolean)->void:::Set the value of this property in owner
jdk.nashorn.internal.runtime.Property#setValue(ScriptObject, ScriptObject, double, boolean)->void:::Set the value of this property in owner
jdk.nashorn.internal.runtime.Property#setValue(ScriptObject, ScriptObject, Object, boolean)->void:::Set the value of this property in owner
jdk.nashorn.internal.runtime.Property#hasNativeSetter()->boolean:::Returns true if this property has a low-level setter handle
jdk.nashorn.internal.runtime.Property#getSetter(Class, PropertyMap)->MethodHandle:::Abstract method for retrieving the setter for the property
jdk.nashorn.internal.runtime.Property#getGetterFunction(ScriptObject)->ScriptFunction:::Get the user defined getter function if one exists
jdk.nashorn.internal.runtime.Property#getSetterFunction(ScriptObject)->ScriptFunction:::Get the user defined setter function if one exists
jdk.nashorn.internal.runtime.Property#hashCode()->int::: property hash code
jdk.nashorn.internal.runtime.Property#equals(Object)->boolean::: property equals
jdk.nashorn.internal.runtime.Property#equalsWithoutType(Property)->boolean::: property equals without type
jdk.nashorn.internal.runtime.Property#toStringShort()->String:::Short toString version
jdk.nashorn.internal.runtime.Property#toString()->String::: property to string
jdk.nashorn.internal.runtime.Property#getType()->Class:::Get the current type of this property
jdk.nashorn.internal.runtime.Property#setType(Class)->void:::Set the type of this property.
jdk.nashorn.internal.runtime.Property#getLocalType()->Class:::Get the type of the value in the local property slot
jdk.nashorn.internal.runtime.Property#canChangeType()->boolean:::Check whether this Property can ever change its type
jdk.nashorn.internal.runtime.Property#isFunctionDeclaration()->boolean:::Check whether this property represents a function declaration.
jdk.nashorn.internal.runtime.Property#isLexicalBinding()->boolean:::Is this a property defined by ES6 let or const?
jdk.nashorn.internal.runtime.Property#hasDualFields()->boolean:::Does this property support dual fields for both primitive and object values?
jdk.nashorn.internal.runtime.Property#isAccessorProperty()->boolean:::Is this an accessor property as defined in ES5 8.6.1?
jdk.nashorn.internal.runtime.PropertyAccess#getInt(Object, int)->int:::Get the value for a given key and return it as an int
jdk.nashorn.internal.runtime.PropertyAccess#getInt(double, int)->int:::Get the value for a given key and return it as an int
jdk.nashorn.internal.runtime.PropertyAccess#getInt(int, int)->int:::Get the value for a given key and return it as an int
jdk.nashorn.internal.runtime.PropertyAccess#getDouble(Object, int)->double:::Get the value for a given key and return it as a double
jdk.nashorn.internal.runtime.PropertyAccess#getDouble(double, int)->double:::Get the value for a given key and return it as a double
jdk.nashorn.internal.runtime.PropertyAccess#getDouble(int, int)->double:::Get the value for a given key and return it as a double
jdk.nashorn.internal.runtime.PropertyAccess#get(Object)->Object:::Get the value for a given key and return it as an Object
jdk.nashorn.internal.runtime.PropertyAccess#get(double)->Object:::Get the value for a given key and return it as an Object
jdk.nashorn.internal.runtime.PropertyAccess#get(int)->Object:::Get the value for a given key and return it as an Object
jdk.nashorn.internal.runtime.PropertyAccess#set(Object, int, int)->void:::Set the value of a given key
jdk.nashorn.internal.runtime.PropertyAccess#set(Object, double, int)->void:::Set the value of a given key
jdk.nashorn.internal.runtime.PropertyAccess#set(Object, Object, int)->void:::Set the value of a given key
jdk.nashorn.internal.runtime.PropertyAccess#set(double, int, int)->void:::Set the value of a given key
jdk.nashorn.internal.runtime.PropertyAccess#set(double, double, int)->void:::Set the value of a given key
jdk.nashorn.internal.runtime.PropertyAccess#set(double, Object, int)->void:::Set the value of a given key
jdk.nashorn.internal.runtime.PropertyAccess#set(int, int, int)->void:::Set the value of a given key
jdk.nashorn.internal.runtime.PropertyAccess#set(int, double, int)->void:::Set the value of a given key
jdk.nashorn.internal.runtime.PropertyAccess#set(int, Object, int)->void:::Set the value of a given key
jdk.nashorn.internal.runtime.PropertyAccess#has(Object)->boolean:::Check if the given key exists anywhere in the proto chain
jdk.nashorn.internal.runtime.PropertyAccess#has(int)->boolean:::Check if the given key exists anywhere in the proto chain
jdk.nashorn.internal.runtime.PropertyAccess#has(double)->boolean:::Check if the given key exists anywhere in the proto chain
jdk.nashorn.internal.runtime.PropertyAccess#hasOwnProperty(Object)->boolean:::Check if the given key exists directly in the implementor
jdk.nashorn.internal.runtime.PropertyAccess#hasOwnProperty(int)->boolean:::Check if the given key exists directly in the implementor
jdk.nashorn.internal.runtime.PropertyAccess#hasOwnProperty(double)->boolean:::Check if the given key exists directly in the implementor
jdk.nashorn.internal.runtime.PropertyAccess#delete(int, boolean)->boolean:::Delete a property with the given key from the implementor
jdk.nashorn.internal.runtime.PropertyAccess#delete(double, boolean)->boolean:::Delete a property with the given key from the implementor
jdk.nashorn.internal.runtime.PropertyAccess#delete(Object, boolean)->boolean:::Delete a property with the given key from the implementor
jdk.nashorn.internal.runtime.PropertyDescriptor#isConfigurable()->boolean:::Check if this PropertyDescriptor describes a configurable property
jdk.nashorn.internal.runtime.PropertyDescriptor#isEnumerable()->boolean:::Check if this PropertyDescriptor describes an enumerable property
jdk.nashorn.internal.runtime.PropertyDescriptor#isWritable()->boolean:::Check if this PropertyDescriptor describes a wriable property
jdk.nashorn.internal.runtime.PropertyDescriptor#getValue()->Object:::Get the property value as given by this PropertyDescriptor
jdk.nashorn.internal.runtime.PropertyDescriptor#getGetter()->ScriptFunction:::Get the UserAccessorProperty getter as given by this PropertyDescriptor
jdk.nashorn.internal.runtime.PropertyDescriptor#getSetter()->ScriptFunction:::Get the UserAccessorProperty setter as given by this PropertyDescriptor
jdk.nashorn.internal.runtime.PropertyDescriptor#setConfigurable(boolean)->void:::Set whether this PropertyDescriptor describes a configurable property
jdk.nashorn.internal.runtime.PropertyDescriptor#setEnumerable(boolean)->void:::Set whether this PropertyDescriptor describes an enumerable property
jdk.nashorn.internal.runtime.PropertyDescriptor#setWritable(boolean)->void:::Set whether this PropertyDescriptor describes a writable property
jdk.nashorn.internal.runtime.PropertyDescriptor#setValue(Object)->void:::Set the property value for this PropertyDescriptor
jdk.nashorn.internal.runtime.PropertyDescriptor#setGetter(Object)->void:::Assign a UserAccessorProperty getter as given to this PropertyDescriptor
jdk.nashorn.internal.runtime.PropertyDescriptor#setSetter(Object)->void:::Assign a UserAccessorProperty setter as given to this PropertyDescriptor
jdk.nashorn.internal.runtime.PropertyDescriptor#fillFrom(ScriptObject)->PropertyDescriptor:::Fill in this PropertyDescriptor from the properties of a given ScriptObject
jdk.nashorn.internal.runtime.PropertyDescriptor#type()->int:::Get the type of this property descriptor.
jdk.nashorn.internal.runtime.PropertyDescriptor#has(Object)->boolean:::Wrapper for ScriptObject#has(Object)
jdk.nashorn.internal.runtime.PropertyDescriptor#hasAndEquals(PropertyDescriptor)->boolean:::Check existence and compare attributes of descriptors.
jdk.nashorn.internal.runtime.PropertyHashMap#immutableReplace(Property, Property)->PropertyHashMap:::Clone a property map, replacing a property with a new one in the same place, which is important for property iterations if a property changes types
jdk.nashorn.internal.runtime.PropertyHashMap#immutableAdd(Property)->PropertyHashMap:::Clone a PropertyHashMap and add a Property.
jdk.nashorn.internal.runtime.PropertyHashMap#immutableAdd(Property...)->PropertyHashMap:::Clone a PropertyHashMap and add an array of properties.
jdk.nashorn.internal.runtime.PropertyHashMap#immutableAdd(Collection)->PropertyHashMap:::Clone a PropertyHashMap and add a collection of properties.
jdk.nashorn.internal.runtime.PropertyHashMap#immutableRemove(Object)->PropertyHashMap:::Clone a PropertyHashMap and remove a Property based on its key.
jdk.nashorn.internal.runtime.PropertyHashMap#find(Object)->Property:::Find a Property in the PropertyHashMap.
jdk.nashorn.internal.runtime.PropertyHashMap#getProperties()->Property[]:::Return an array of properties in chronological order of adding.
jdk.nashorn.internal.runtime.PropertyHashMap#size()->int::: property hash map size
jdk.nashorn.internal.runtime.PropertyHashMap#isEmpty()->boolean::: property hash map is empty
jdk.nashorn.internal.runtime.PropertyHashMap#containsKey(Object)->boolean::: property hash map contains key
jdk.nashorn.internal.runtime.PropertyHashMap#containsValue(Object)->boolean::: property hash map contains value
jdk.nashorn.internal.runtime.PropertyHashMap#get(Object)->Property::: property hash map get
jdk.nashorn.internal.runtime.PropertyHashMap#put(Object, Property)->Property::: property hash map put
jdk.nashorn.internal.runtime.PropertyHashMap#remove(Object)->Property::: property hash map remove
jdk.nashorn.internal.runtime.PropertyHashMap#putAll(Map)->void::: property hash map put all
jdk.nashorn.internal.runtime.PropertyHashMap#clear()->void::: property hash map clear
jdk.nashorn.internal.runtime.PropertyHashMap#keySet()->Set::: property hash map key set
jdk.nashorn.internal.runtime.PropertyHashMap#values()->Collection::: property hash map values
jdk.nashorn.internal.runtime.PropertyHashMap#entrySet()->Set>::: property hash map entry set
jdk.nashorn.internal.runtime.PropertyHashMap.Element#match(Object, int)->boolean::: element match
jdk.nashorn.internal.runtime.PropertyHashMap.Element#equals(Object)->boolean::: element equals
jdk.nashorn.internal.runtime.PropertyHashMap.Element#getKey()->Object::: element get key
jdk.nashorn.internal.runtime.PropertyHashMap.Element#getValue()->Property::: element get value
jdk.nashorn.internal.runtime.PropertyHashMap.Element#hashCode()->int::: element hash code
jdk.nashorn.internal.runtime.PropertyHashMap.Element#setValue(Property)->Property::: element set value
jdk.nashorn.internal.runtime.PropertyHashMap.Element#toString()->String::: element to string
jdk.nashorn.internal.runtime.PropertyHashMap.Element#getLink()->Element::: element get link
jdk.nashorn.internal.runtime.PropertyHashMap.Element#setLink(Element)->void::: element set link
jdk.nashorn.internal.runtime.PropertyHashMap.Element#getProperty()->Property::: element get property
jdk.nashorn.internal.runtime.PropertyMap#newMap(Collection, String, int, int, int)->PropertyMap:::Public property map allocator
jdk.nashorn.internal.runtime.PropertyMap#newMap(Collection)->PropertyMap:::Public property map allocator
jdk.nashorn.internal.runtime.PropertyMap#newMap(Class)->PropertyMap:::Return a sharable empty map for the given object class.
jdk.nashorn.internal.runtime.PropertyMap#newMap()->PropertyMap:::Return a sharable empty map.
jdk.nashorn.internal.runtime.PropertyMap#size()->int:::Return number of properties in the map.
jdk.nashorn.internal.runtime.PropertyMap#getSwitchPointCount()->int:::Get the number of property SwitchPoints of this map
jdk.nashorn.internal.runtime.PropertyMap#addSwitchPoint(String, SwitchPoint)->void:::Add a property switchpoint to this property map for the given key.
jdk.nashorn.internal.runtime.PropertyMap#propertyChanged(Property)->void:::Method called when a property of an object using this property map is being created, modified, or deleted
jdk.nashorn.internal.runtime.PropertyMap#protoChanged()->void:::Method called when the prototype of an object using this property map is changed.
jdk.nashorn.internal.runtime.PropertyMap#getSwitchPoint(String)->SwitchPoint:::Returns a SwitchPoint for use with a property inherited from this or a parent map
jdk.nashorn.internal.runtime.PropertyMap#addPropertyBind(AccessorProperty, Object)->PropertyMap:::Add a property to the map, re-binding its getters and setters, if available, to a given receiver
jdk.nashorn.internal.runtime.PropertyMap#addPropertyNoHistory(Property)->PropertyMap:::Add a property to the map without adding it to the history
jdk.nashorn.internal.runtime.PropertyMap#addProperty(Property)->PropertyMap:::Add a property to the map
jdk.nashorn.internal.runtime.PropertyMap#deleteProperty(Property)->PropertyMap:::Remove a property from a map
jdk.nashorn.internal.runtime.PropertyMap#replaceProperty(Property, Property)->PropertyMap:::Replace an existing property with a new one.
jdk.nashorn.internal.runtime.PropertyMap#newUserAccessors(Object, int)->UserAccessorProperty:::Make a new UserAccessorProperty property
jdk.nashorn.internal.runtime.PropertyMap#findProperty(Object)->Property:::Find a property in the map.
jdk.nashorn.internal.runtime.PropertyMap#addAll(PropertyMap)->PropertyMap:::Adds all map properties from another map.
jdk.nashorn.internal.runtime.PropertyMap#getProperties()->Property[]:::Return an array of all properties.
jdk.nashorn.internal.runtime.PropertyMap#getClassName()->String:::Return the name of the class of objects using this property map.
jdk.nashorn.internal.runtime.PropertyMap#preventExtensions()->PropertyMap:::Prevents the map from having additional properties.
jdk.nashorn.internal.runtime.PropertyMap#seal()->PropertyMap:::Prevents properties in map from being modified.
jdk.nashorn.internal.runtime.PropertyMap#freeze()->PropertyMap:::Prevents properties in map from being modified or written to.
jdk.nashorn.internal.runtime.PropertyMap#equalsWithoutType(PropertyMap)->boolean:::Returns true if the two maps have identical properties in the same order, but allows the properties to differ in their types
jdk.nashorn.internal.runtime.PropertyMap#toString()->String::: property map to string
jdk.nashorn.internal.runtime.PropertyMap#iterator()->Iterator::: property map iterator
jdk.nashorn.internal.runtime.PropertyMap#containsArrayKeys()->boolean:::Check if this map contains properties with valid array keys
jdk.nashorn.internal.runtime.PropertyMap#isExtensible()->boolean:::Test to see if PropertyMap is extensible.
jdk.nashorn.internal.runtime.PropertyMap#isSealed()->boolean:::Test to see if PropertyMap is not extensible or any properties can not be modified.
jdk.nashorn.internal.runtime.PropertyMap#isFrozen()->boolean:::Test to see if PropertyMap is not extensible or all properties can not be modified.
jdk.nashorn.internal.runtime.PropertyMap#getFreeFieldSlot()->int:::Return a free field slot for this map, or -1 if none is available.
jdk.nashorn.internal.runtime.PropertyMap#getFreeSpillSlot()->int:::Get a free spill slot for this map.
jdk.nashorn.internal.runtime.PropertyMap#changeProto(ScriptObject)->PropertyMap:::Return a property map with the same layout that is associated with the new prototype object.
jdk.nashorn.internal.runtime.PropertyMap#makeUnsharedCopy()->PropertyMap:::Make a copy of this property map with the shared prototype field set to null
jdk.nashorn.internal.runtime.PropertyMap#setSharedProtoMap(SharedPropertyMap)->void:::Set a reference to the expected parent prototype map
jdk.nashorn.internal.runtime.PropertyMap#getSharedProtoMap()->PropertyMap:::Get the expected prototype property map if it is known, or null.
jdk.nashorn.internal.runtime.PropertyMap#isValidSharedProtoMap()->boolean:::Returns true if this map has been used as a shared prototype map (i.e
jdk.nashorn.internal.runtime.PropertyMap#getSharedProtoSwitchPoint()->SwitchPoint:::Returns the shared prototype switch point, or null if this is not a shared prototype map.
jdk.nashorn.internal.runtime.PropertyMap#isInvalidSharedMapFor(ScriptObject)->boolean:::Return true if this map has a shared prototype map which has either been invalidated or does not match the map of proto.
jdk.nashorn.internal.runtime.PropertyMap#diff(PropertyMap, PropertyMap)->String:::Debug helper function that returns the diff of two property maps, only displaying the information that is different and in which map it exists compared to the other map
jdk.nashorn.internal.runtime.PropertyMap#getCount()->long::: property map get count
jdk.nashorn.internal.runtime.PropertyMap#getClonedCount()->long::: property map get cloned count
jdk.nashorn.internal.runtime.PropertyMap#getHistoryHit()->long::: property map get history hit
jdk.nashorn.internal.runtime.PropertyMap#getProtoInvalidations()->long::: property map get proto invalidations
jdk.nashorn.internal.runtime.PropertyMap#getProtoHistoryHit()->long::: property map get proto history hit
jdk.nashorn.internal.runtime.PropertyMap#getSetProtoNewMapCount()->long::: property map get set proto new map count
jdk.nashorn.internal.runtime.PropertySwitchPoints#getSwitchPointsAdded()->long:::Return aggregate switchpoints added to all ProtoSwitchPoints
jdk.nashorn.internal.runtime.PropertySwitchPoints#getSwitchPointsInvalidated()->long:::Return aggregate switchPointMap invalidated in all ProtoSwitchPoints
jdk.nashorn.internal.runtime.PropertySwitchPoints#getSwitchPointCount(ScriptObject)->int:::Return number of property switchPoints added to a ScriptObject.
jdk.nashorn.internal.runtime.PropertySwitchPoints#getSwitchPointCount()->int:::Return the number of switchpoints added to this ProtoSwitchPoints instance.
jdk.nashorn.internal.runtime.PropertySwitchPoints#addSwitchPoint(PropertySwitchPoints, String, SwitchPoint)->PropertySwitchPoints:::Add switchPoint to the switchpoints for for property key, creating and returning a new ProtoSwitchPoints instance if the switchpoint was not already contained
jdk.nashorn.internal.runtime.PropertySwitchPoints#getSwitchPoints(Object)->Set::: property switch points get switch points
jdk.nashorn.internal.runtime.PropertySwitchPoints#invalidateProperty(Property)->void:::Invalidate all switchpoints for the given property
jdk.nashorn.internal.runtime.PropertySwitchPoints#invalidateInheritedProperties(PropertyMap)->void:::Invalidate all switchpoints except those defined in map
jdk.nashorn.internal.runtime.PrototypeObject#getConstructor(Object)->Object:::Get the constructor for this PrototypeObject
jdk.nashorn.internal.runtime.PrototypeObject#setConstructor(Object, Object)->void:::Reset the constructor for this PrototypeObject
jdk.nashorn.internal.runtime.QuotedStringTokenizer#countTokens()->int::: quoted string tokenizer count tokens
jdk.nashorn.internal.runtime.QuotedStringTokenizer#hasMoreTokens()->boolean::: quoted string tokenizer has more tokens
jdk.nashorn.internal.runtime.QuotedStringTokenizer#nextToken()->String::: quoted string tokenizer next token
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getLogger()->DebugLogger::: recompilable script function data get logger
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#initLogger(Context)->DebugLogger::: recompilable script function data init logger
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#hasInternalSymbol(String)->boolean::: recompilable script function data has internal symbol
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getExternalSymbolDepth(String)->int:::Return the external symbol table
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getExternalSymbolNames()->Set:::Returns the names of all external symbols this function uses.
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getEndParserState()->Object:::Returns the opaque object representing the parser state at the end of this function's body, used to skip parsing this function when reparsing its containing outer function.
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getParent()->RecompilableScriptFunctionData:::Get the parent of this RecompilableScriptFunctionData
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#setParent(RecompilableScriptFunctionData)->void::: recompilable script function data set parent
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#toSource()->String::: recompilable script function data to source
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#initTransients(Source, CodeInstaller)->void:::Initialize transient fields on deserialized instances
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#toString()->String::: recompilable script function data to string
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#toStringVerbose()->String::: recompilable script function data to string verbose
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getFunctionName()->String::: recompilable script function data get function name
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#inDynamicContext()->boolean::: recompilable script function data in dynamic context
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getAllocatorMap(ScriptObject)->PropertyMap::: recompilable script function data get allocator map
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#allocate(PropertyMap)->ScriptObject::: recompilable script function data allocate
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#reparse()->FunctionNode::: recompilable script function data reparse
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#setCachedAst(FunctionNode)->void:::Sets the AST to cache in this function
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#typeMap(MethodType)->TypeMap::: recompilable script function data type map
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getCompiler(FunctionNode, MethodType, ScriptObject, Map, int[])->Compiler::: recompilable script function data get compiler
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#usePersistentCodeCache()->boolean::: recompilable script function data use persistent code cache
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#lookup(FunctionNode)->MethodHandle::: recompilable script function data lookup
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#lookupCodeMethod(Class, MethodType)->MethodHandle::: recompilable script function data lookup code method
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#initializeCode(FunctionNode)->void:::Initializes this function data with the eagerly generated version of the code
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#initializeCode(FunctionInitializer)->void:::Initializes this function with the given function code initializer.
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getReturnType(MethodType, ScriptObject)->Class:::Returns the return type of a function specialization for particular parameter types.<br> Be aware that the way this is implemented, it forces full materialization (compilation and installation) of code for that specialization.
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getBest(MethodType, ScriptObject, Collection, boolean)->CompiledFunction::: recompilable script function data get best
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#needsCallee()->boolean::: recompilable script function data needs callee
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getFunctionFlags()->int:::Returns the FunctionNode flags associated with this function data.
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getGenericType()->MethodType::: recompilable script function data get generic type
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getFunctionNodeId()->int:::Return the function node id.
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getSource()->Source:::Get the source for the script
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#getScriptFunctionData(int)->RecompilableScriptFunctionData:::Return a script function data based on a function id, either this function if the id matches or a nested function based on functionId
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#isGlobalSymbol(FunctionNode, String)->boolean:::Check whether a certain name is a global symbol, i.e
jdk.nashorn.internal.runtime.RecompilableScriptFunctionData#restoreFlags(LexicalContext, FunctionNode)->FunctionNode:::Restores the #getFunctionFlags() flags to a function node
jdk.nashorn.internal.runtime.RewriteException#create(UnwarrantedOptimismException, Object[], String[])->RewriteException:::Constructor for a rewrite exception thrown from an optimistic function.
jdk.nashorn.internal.runtime.RewriteException#create(UnwarrantedOptimismException, Object[], String[], int[])->RewriteException:::Constructor for a rewrite exception thrown from a rest-of method.
jdk.nashorn.internal.runtime.RewriteException#populateArrayBootstrap(MethodHandles.Lookup, String, MethodType, int)->CallSite:::Bootstrap method for populate array
jdk.nashorn.internal.runtime.RewriteException#populateArray(Object[], int, Object[])->Object[]:::Array populator used for saving the local variable state into the array contained in the RewriteException
jdk.nashorn.internal.runtime.RewriteException#toLongArray(Object, RewriteException)->long[]:::Continuation handler calls this method when a local variable carried over into the continuation is expected to be a long array in the continued method
jdk.nashorn.internal.runtime.RewriteException#toDoubleArray(Object, RewriteException)->double[]:::Continuation handler calls this method when a local variable carried over into the continuation is expected to be a double array in the continued method
jdk.nashorn.internal.runtime.RewriteException#toObjectArray(Object, RewriteException)->Object[]:::Continuation handler calls this method when a local variable carried over into the continuation is expected to be an Object array in the continued method
jdk.nashorn.internal.runtime.RewriteException#instanceOrNull(Object, Class)->Object:::Continuation handler calls this method when a local variable carried over into the continuation is expected to have a certain type, but the value can have a different type coming from the deoptimized method as it was a dead store
jdk.nashorn.internal.runtime.RewriteException#assertArrayLength(Object[], int)->void:::Asserts the length of an array
jdk.nashorn.internal.runtime.RewriteException#getReturnValueDestructive()->Object:::Get return value
jdk.nashorn.internal.runtime.RewriteException#getReturnValueNonDestructive()->Object::: rewrite exception get return value non destructive
jdk.nashorn.internal.runtime.RewriteException#getReturnType()->Type:::Get return type
jdk.nashorn.internal.runtime.RewriteException#getProgramPoint()->int:::Get the program point.
jdk.nashorn.internal.runtime.RewriteException#getByteCodeSlots()->Object[]:::Get the bytecode slot contents.
jdk.nashorn.internal.runtime.RewriteException#getPreviousContinuationEntryPoints()->int[]::: rewrite exception get previous continuation entry points
jdk.nashorn.internal.runtime.RewriteException#getRuntimeScope()->ScriptObject:::Returns the runtime scope that was in effect when the exception was thrown.
jdk.nashorn.internal.runtime.RewriteException#getMessage()->String::: rewrite exception get message
jdk.nashorn.internal.runtime.RewriteException#getMessageShort()->String:::Short toString function for message
jdk.nashorn.internal.runtime.Scope#isScope()->boolean::: scope is scope
jdk.nashorn.internal.runtime.Scope#hasWithScope()->boolean::: scope has with scope
jdk.nashorn.internal.runtime.Scope#getSplitState()->int:::Get the scope's split method state.
jdk.nashorn.internal.runtime.Scope#setSplitState(int)->void:::Set the scope's split method state.
jdk.nashorn.internal.runtime.Scope#getScopeCount()->long:::Get number of Scope instances created
jdk.nashorn.internal.runtime.ScriptEnvironment#getOut()->PrintWriter:::Get the output stream for this environment
jdk.nashorn.internal.runtime.ScriptEnvironment#getErr()->PrintWriter:::Get the error stream for this environment
jdk.nashorn.internal.runtime.ScriptEnvironment#getNamespace()->Namespace:::Get the namespace for this environment
jdk.nashorn.internal.runtime.ScriptEnvironment#getFiles()->List:::Return the JavaScript files passed to the program
jdk.nashorn.internal.runtime.ScriptEnvironment#getArguments()->List:::Return the user arguments to the program, i.e
jdk.nashorn.internal.runtime.ScriptEnvironment#hasLogger(String)->boolean:::Check if there is a logger registered for a particular name: typically the "name" attribute of a Loggable annotation on a class
jdk.nashorn.internal.runtime.ScriptEnvironment#isTimingEnabled()->boolean:::Check if compilation/runtime timings are enabled
jdk.nashorn.internal.runtime.ScriptEnvironment#useAnonymousClasses(int)->boolean:::Returns true if compilation should use anonymous classes.
jdk.nashorn.internal.runtime.ScriptFunction#create(Object[], int, ScriptObject)->ScriptFunction:::Factory method called by compiler generated code for functions that need parent scope.
jdk.nashorn.internal.runtime.ScriptFunction#create(Object[], int)->ScriptFunction:::Factory method called by compiler generated code for functions that don't need parent scope.
jdk.nashorn.internal.runtime.ScriptFunction#createAnonymous()->ScriptFunction:::Create anonymous function that serves as Function.prototype
jdk.nashorn.internal.runtime.ScriptFunction#createBuiltin(String, MethodHandle, Specialization[])->ScriptFunction:::Factory method for non-constructor built-in functions
jdk.nashorn.internal.runtime.ScriptFunction#createBuiltin(String, MethodHandle)->ScriptFunction:::Factory method for non-constructor built-in functions
jdk.nashorn.internal.runtime.ScriptFunction#createStrictBuiltin(String, MethodHandle)->ScriptFunction:::Factory method for non-constructor built-in, strict functions
jdk.nashorn.internal.runtime.ScriptFunction#createBound(Object, Object[])->ScriptFunction:::Creates a version of this function bound to a specific "self" and other arguments, as per Function.prototype.bind functionality in ECMAScript 5.1 section 15.3.4.5.
jdk.nashorn.internal.runtime.ScriptFunction#createSynchronized(Object)->ScriptFunction:::Create a function that invokes this function synchronized on sync or the self object of the invocation.
jdk.nashorn.internal.runtime.ScriptFunction#getClassName()->String::: script function get class name
jdk.nashorn.internal.runtime.ScriptFunction#isInstance(ScriptObject)->boolean:::ECMA 15.3.5.3 [[HasInstance]] (V) Step 3 if "prototype" value is not an Object, throw TypeError
jdk.nashorn.internal.runtime.ScriptFunction#getTargetFunction()->ScriptFunction:::Returns the target function for this function
jdk.nashorn.internal.runtime.ScriptFunction#isBoundFunction()->boolean::: script function is bound function
jdk.nashorn.internal.runtime.ScriptFunction#setArity(int)->void:::Set the arity of this ScriptFunction
jdk.nashorn.internal.runtime.ScriptFunction#isStrict()->boolean:::Is this a ECMAScript 'use strict' function?
jdk.nashorn.internal.runtime.ScriptFunction#hasAllVarsInScope()->boolean:::Is this is a function with all variables in scope?
jdk.nashorn.internal.runtime.ScriptFunction#needsWrappedThis()->boolean:::Returns true if this is a non-strict, non-built-in function that requires non-primitive this argument according to ECMA 10.4.3.
jdk.nashorn.internal.runtime.ScriptFunction#invoke(Object, Object...)->Object:::Execute this script function.
jdk.nashorn.internal.runtime.ScriptFunction#construct(Object...)->Object:::Execute this script function as a constructor.
jdk.nashorn.internal.runtime.ScriptFunction#safeToString()->String::: script function safe to string
jdk.nashorn.internal.runtime.ScriptFunction#toString()->String::: script function to string
jdk.nashorn.internal.runtime.ScriptFunction#toSource()->String:::Get this function as a String containing its source code
jdk.nashorn.internal.runtime.ScriptFunction#getPrototype()->Object:::Get the prototype object for this function
jdk.nashorn.internal.runtime.ScriptFunction#setPrototype(Object)->void:::Set the prototype object for this function
jdk.nashorn.internal.runtime.ScriptFunction#getBoundInvokeHandle(Object)->MethodHandle:::Return the invoke handle bound to a given ScriptObject self reference
jdk.nashorn.internal.runtime.ScriptFunction#getDocumentation()->String:::Get the documentation for this function
jdk.nashorn.internal.runtime.ScriptFunction#getDocumentationKey()->String:::Get the documentation key for this function
jdk.nashorn.internal.runtime.ScriptFunction#setDocumentationKey(String)->void:::Set the documentation key for this function
jdk.nashorn.internal.runtime.ScriptFunction#getName()->String:::Get the name for this function
jdk.nashorn.internal.runtime.ScriptFunction#getScope()->ScriptObject:::Get the scope for this function
jdk.nashorn.internal.runtime.ScriptFunction#G$prototype(Object)->Object:::Prototype getter for this ScriptFunction - follows the naming convention used by Nasgen and the code generator
jdk.nashorn.internal.runtime.ScriptFunction#S$prototype(Object, Object)->void:::Prototype setter for this ScriptFunction - follows the naming convention used by Nasgen and the code generator
jdk.nashorn.internal.runtime.ScriptFunction#G$length(Object)->int:::Length getter - ECMA 15.3.3.2: Function.length
jdk.nashorn.internal.runtime.ScriptFunction#G$name(Object)->Object:::Name getter - ECMA Function.name
jdk.nashorn.internal.runtime.ScriptFunction#getPrototype(ScriptFunction)->ScriptObject:::Get the prototype for this ScriptFunction
jdk.nashorn.internal.runtime.ScriptFunction#getConstructorCount()->long::: script function get constructor count
jdk.nashorn.internal.runtime.ScriptFunction#getInvokes()->long::: script function get invokes
jdk.nashorn.internal.runtime.ScriptFunction#getAllocations()->long::: script function get allocations
jdk.nashorn.internal.runtime.ScriptFunction#findNewMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: script function find new method
jdk.nashorn.internal.runtime.ScriptFunction#findCallMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::StandardOperation.CALL call site signature: (callee, thiz, [args...]) generated method signature: (callee, thiz, [args...])  cases: (a) method has callee parameter     (1) for local/scope calls, we just bind thiz and drop the second argument
jdk.nashorn.internal.runtime.ScriptFunction#getCallMethodHandle(MethodType, String)->MethodHandle:::Used for noSuchMethod/noSuchProperty and JSAdapter hooks
jdk.nashorn.internal.runtime.ScriptFunctionData#getArity()->int::: script function data get arity
jdk.nashorn.internal.runtime.ScriptFunctionData#getDocumentation()->String::: script function data get documentation
jdk.nashorn.internal.runtime.ScriptFunctionData#getDocumentationKey()->String::: script function data get documentation key
jdk.nashorn.internal.runtime.ScriptFunctionData#isVariableArity()->boolean::: script function data is variable arity
jdk.nashorn.internal.runtime.ScriptFunctionData#setArity(int)->void:::Used from e.g
jdk.nashorn.internal.runtime.ScriptFunctionData#setDocumentationKey(String)->void:::Used from nasgen generated code.
jdk.nashorn.internal.runtime.ScriptFunctionData#bind(CompiledFunction, ScriptFunction, Object, Object[])->CompiledFunction::: script function data bind
jdk.nashorn.internal.runtime.ScriptFunctionData#isStrict()->boolean:::Is this a ScriptFunction generated with strict semantics?
jdk.nashorn.internal.runtime.ScriptFunctionData#getFunctionName()->String:::Return the complete internal function name for this data, not anonymous or similar
jdk.nashorn.internal.runtime.ScriptFunctionData#isBuiltin()->boolean::: script function data is builtin
jdk.nashorn.internal.runtime.ScriptFunctionData#isConstructor()->boolean::: script function data is constructor
jdk.nashorn.internal.runtime.ScriptFunctionData#needsCallee()->boolean::: script function data needs callee
jdk.nashorn.internal.runtime.ScriptFunctionData#needsWrappedThis()->boolean:::Returns true if this is a non-strict, non-built-in function that requires non-primitive this argument according to ECMA 10.4.3.
jdk.nashorn.internal.runtime.ScriptFunctionData#toSource()->String::: script function data to source
jdk.nashorn.internal.runtime.ScriptFunctionData#getName()->String::: script function data get name
jdk.nashorn.internal.runtime.ScriptFunctionData#toString()->String:::Get this function as a String containing its source code
jdk.nashorn.internal.runtime.ScriptFunctionData#toStringVerbose()->String:::Verbose description of data
jdk.nashorn.internal.runtime.ScriptFunctionData#getBestInvoker(MethodType, ScriptObject)->CompiledFunction:::Pick the best invoker, i.e
jdk.nashorn.internal.runtime.ScriptFunctionData#getBestInvoker(MethodType, ScriptObject, Collection)->CompiledFunction::: script function data get best invoker
jdk.nashorn.internal.runtime.ScriptFunctionData#getBestConstructor(MethodType, ScriptObject, Collection)->CompiledFunction::: script function data get best constructor
jdk.nashorn.internal.runtime.ScriptFunctionData#ensureCompiled()->void:::If we can have lazy code generation, this is a hook to ensure that the code has been compiled
jdk.nashorn.internal.runtime.ScriptFunctionData#getGenericInvoker(ScriptObject)->MethodHandle:::Return a generic Object/Object invoker for this method
jdk.nashorn.internal.runtime.ScriptFunctionData#getGenericConstructor(ScriptObject)->MethodHandle::: script function data get generic constructor
jdk.nashorn.internal.runtime.ScriptFunctionData#lookupExactApplyToCall(MethodType)->CompiledFunction:::Used to find an apply to call version that fits this callsite
jdk.nashorn.internal.runtime.ScriptFunctionData#pickFunction(MethodType, boolean)->CompiledFunction::: script function data pick function
jdk.nashorn.internal.runtime.ScriptFunctionData#getBest(MethodType, ScriptObject, Collection, boolean)->CompiledFunction:::Returns the best function for the specified call site type.
jdk.nashorn.internal.runtime.ScriptFunctionData#getBest(MethodType, ScriptObject, Collection)->CompiledFunction:::Returns the best function for the specified call site type.
jdk.nashorn.internal.runtime.ScriptFunctionData#isValidCallSite(MethodType)->boolean::: script function data is valid call site
jdk.nashorn.internal.runtime.ScriptFunctionData#getGeneric(ScriptObject)->CompiledFunction::: script function data get generic
jdk.nashorn.internal.runtime.ScriptFunctionData#getGenericType()->MethodType:::Get a method type for a generic invoker.
jdk.nashorn.internal.runtime.ScriptFunctionData#allocate(PropertyMap)->ScriptObject:::Allocates an object using this function's allocator.
jdk.nashorn.internal.runtime.ScriptFunctionData#getAllocatorMap(ScriptObject)->PropertyMap:::Get the property map to use for objects allocated by this function.
jdk.nashorn.internal.runtime.ScriptFunctionData#makeBoundFunctionData(ScriptFunction, Object, Object[])->ScriptFunctionData:::This method is used to create the immutable portion of a bound function
jdk.nashorn.internal.runtime.ScriptFunctionData#wrapThis(Object)->Object::: script function data wrap this
jdk.nashorn.internal.runtime.ScriptFunctionData#isPrimitiveThis(Object)->boolean::: script function data is primitive this
jdk.nashorn.internal.runtime.ScriptFunctionData#invoke(ScriptFunction, Object, Object...)->Object:::Execute this script function.
jdk.nashorn.internal.runtime.ScriptFunctionData#construct(ScriptFunction, Object...)->Object::: script function data construct
jdk.nashorn.internal.runtime.ScriptFunctionData#needsCallee(MethodHandle)->boolean:::Heuristic to figure out if the method handle has a callee argument
jdk.nashorn.internal.runtime.ScriptFunctionData#needsCallee(MethodType)->boolean::: script function data needs callee
jdk.nashorn.internal.runtime.ScriptFunctionData#isVarArg(MethodHandle)->boolean:::Check if a javascript function methodhandle is a vararg handle
jdk.nashorn.internal.runtime.ScriptFunctionData#isVarArg(MethodType)->boolean::: script function data is var arg
jdk.nashorn.internal.runtime.ScriptFunctionData#inDynamicContext()->boolean:::Is this ScriptFunction declared in a dynamic context
jdk.nashorn.internal.runtime.ScriptingFunctions#readLine(Object, Object)->Object:::Nashorn extension: global.readLine (scripting-mode-only) Read one line of input from the standard input.
jdk.nashorn.internal.runtime.ScriptingFunctions#readFully(Object, Object)->Object:::Nashorn extension: Read the entire contents of a text file and return as String.
jdk.nashorn.internal.runtime.ScriptingFunctions#exec(Object, Object...)->Object:::Nashorn extension: exec a string in a separate process.
jdk.nashorn.internal.runtime.ScriptingFunctions#setReadLineHelper(Function)->void::: scripting functions set read line helper
jdk.nashorn.internal.runtime.ScriptingFunctions#getReadLineHelper()->Function::: scripting functions get read line helper
jdk.nashorn.internal.runtime.ScriptingFunctions#readLine(Object)->String::: scripting functions read line
jdk.nashorn.internal.runtime.ScriptLoader#getContext()->Context::: script loader get context
jdk.nashorn.internal.runtime.ScriptLoader#loadClass(String, boolean)->Class::: script loader load class
jdk.nashorn.internal.runtime.ScriptLoader#findClass(String)->Class::: script loader find class
jdk.nashorn.internal.runtime.ScriptLoader#installClass(String, byte[], CodeSource)->Class:::Install a class for use by the Nashorn runtime
jdk.nashorn.internal.runtime.ScriptObject#isGlobal()->boolean:::Check whether this is a global object
jdk.nashorn.internal.runtime.ScriptObject#spillAllocationLength(int)->int:::Given a number of properties, return the aligned to SPILL_RATE buffer size required for the smallest spill pool needed to house them
jdk.nashorn.internal.runtime.ScriptObject#addBoundProperties(ScriptObject)->void:::Copy all properties from the source object with their receiver bound to the source
jdk.nashorn.internal.runtime.ScriptObject#addBoundProperties(ScriptObject, Property[])->void:::Copy all properties from the array with their receiver bound to the source.
jdk.nashorn.internal.runtime.ScriptObject#addBoundProperty(PropertyMap, ScriptObject, Property, boolean)->PropertyMap:::Add a bound property from source, using the interim property map propMap, and return the new interim property map.
jdk.nashorn.internal.runtime.ScriptObject#addBoundProperties(Object, AccessorProperty[])->void:::Copy all properties from the array with their receiver bound to the source.
jdk.nashorn.internal.runtime.ScriptObject#bindTo(MethodHandle, Object)->MethodHandle:::Bind the method handle to the specified receiver, while preserving its original type (it will just ignore the first argument in lieu of the bound argument).
jdk.nashorn.internal.runtime.ScriptObject#propertyIterator()->Iterator:::Return a property iterator.
jdk.nashorn.internal.runtime.ScriptObject#valueIterator()->Iterator:::Return a property value iterator.
jdk.nashorn.internal.runtime.ScriptObject#isAccessorDescriptor()->boolean:::ECMA 8.10.1 IsAccessorDescriptor ( Desc )
jdk.nashorn.internal.runtime.ScriptObject#isDataDescriptor()->boolean:::ECMA 8.10.2 IsDataDescriptor ( Desc )
jdk.nashorn.internal.runtime.ScriptObject#toPropertyDescriptor()->PropertyDescriptor:::ECMA 8.10.5 ToPropertyDescriptor ( Obj )
jdk.nashorn.internal.runtime.ScriptObject#toPropertyDescriptor(Global, Object)->PropertyDescriptor:::ECMA 8.10.5 ToPropertyDescriptor ( Obj )
jdk.nashorn.internal.runtime.ScriptObject#getOwnPropertyDescriptor(Object)->Object:::ECMA 8.12.1 [[GetOwnProperty]] (P)
jdk.nashorn.internal.runtime.ScriptObject#getPropertyDescriptor(String)->Object:::ECMA 8.12.2 [[GetProperty]] (P)
jdk.nashorn.internal.runtime.ScriptObject#invalidateGlobalConstant(Object)->void:::Invalidate any existing global constant method handles that may exist for key.
jdk.nashorn.internal.runtime.ScriptObject#defineOwnProperty(Object, Object, boolean)->boolean:::ECMA 8.12.9 [[DefineOwnProperty]] (P, Desc, Throw)
jdk.nashorn.internal.runtime.ScriptObject#defineOwnProperty(int, Object)->void:::Almost like defineOwnProperty(int,Object) for arrays this one does not add 'gap' elements (like the array one does).
jdk.nashorn.internal.runtime.ScriptObject#addOwnProperty(Object, PropertyDescriptor)->void:::Add a new property to the object.
jdk.nashorn.internal.runtime.ScriptObject#findProperty(Object, boolean)->FindProperty:::Low level property API (not using property descriptors)  Find a property in the prototype hierarchy
jdk.nashorn.internal.runtime.ScriptObject#findProperty(Object, boolean, boolean, ScriptObject)->FindProperty:::Low level property API (not using property descriptors)  Find a property in the prototype hierarchy
jdk.nashorn.internal.runtime.ScriptObject#hasProperty(Object, boolean)->boolean:::Low level property API
jdk.nashorn.internal.runtime.ScriptObject#addOwnProperty(Object, int, ScriptFunction, ScriptFunction)->Property:::Add a new property to the object
jdk.nashorn.internal.runtime.ScriptObject#addOwnProperty(Object, int, Object)->Property:::Add a new property to the object
jdk.nashorn.internal.runtime.ScriptObject#addOwnProperty(Property)->Property:::Add a new property to the object
jdk.nashorn.internal.runtime.ScriptObject#deleteOwnProperty(Property)->boolean:::Delete a property from the object.
jdk.nashorn.internal.runtime.ScriptObject#initUserAccessors(String, ScriptFunction, ScriptFunction)->void:::Fast initialization functions for ScriptFunctions that are strict, to avoid creating setters that probably aren't used
jdk.nashorn.internal.runtime.ScriptObject#modifyOwnProperty(Property, int, ScriptFunction, ScriptFunction)->Property:::Modify a property in the object
jdk.nashorn.internal.runtime.ScriptObject#modifyOwnProperty(Property, int)->Property:::Modify a property in the object
jdk.nashorn.internal.runtime.ScriptObject#setUserAccessors(Object, ScriptFunction, ScriptFunction)->void:::Update getter and setter in an object literal.
jdk.nashorn.internal.runtime.ScriptObject#getCallMethodHandle(FindProperty, MethodType, String)->MethodHandle:::Return methodHandle of value function for call.
jdk.nashorn.internal.runtime.ScriptObject#getWithProperty(Property)->Object:::Get value using found property.
jdk.nashorn.internal.runtime.ScriptObject#getProperty(String)->Property:::Get a property given a key
jdk.nashorn.internal.runtime.ScriptObject#getArgument(int)->Object:::Overridden by jdk.nashorn.internal.objects.NativeArguments class (internal use.) Used for argument access in a vararg function using parameter name
jdk.nashorn.internal.runtime.ScriptObject#setArgument(int, Object)->void:::Overridden by jdk.nashorn.internal.objects.NativeArguments class (internal use.) Used for argument access in a vararg function using parameter name
jdk.nashorn.internal.runtime.ScriptObject#getContext()->Context:::Return the current context from the object's map.
jdk.nashorn.internal.runtime.ScriptObject#getMap()->PropertyMap:::Return the map of an object.
jdk.nashorn.internal.runtime.ScriptObject#setMap(PropertyMap)->void:::Set the initial map.
jdk.nashorn.internal.runtime.ScriptObject#compareAndSetMap(PropertyMap, PropertyMap)->boolean:::Conditionally set the new map if the old map is the same.
jdk.nashorn.internal.runtime.ScriptObject#getProto()->ScriptObject:::Return the __proto__ of an object.
jdk.nashorn.internal.runtime.ScriptObject#getProto(int)->ScriptObject:::Get the proto of a specific depth
jdk.nashorn.internal.runtime.ScriptObject#setProto(ScriptObject)->void:::Set the __proto__ of an object.
jdk.nashorn.internal.runtime.ScriptObject#setInitialProto(ScriptObject)->void:::Set the initial __proto__ of this object
jdk.nashorn.internal.runtime.ScriptObject#setGlobalObjectProto(ScriptObject)->void:::Invoked from generated bytecode to initialize the prototype of object literals to the global Object prototype.
jdk.nashorn.internal.runtime.ScriptObject#setPrototypeOf(Object)->void:::Set the __proto__ of an object with checks
jdk.nashorn.internal.runtime.ScriptObject#setProtoFromLiteral(Object)->void:::Set the __proto__ of an object from an object literal
jdk.nashorn.internal.runtime.ScriptObject#getAllKeys()->String[]:::return an array of all property keys - all inherited, non-enumerable included
jdk.nashorn.internal.runtime.ScriptObject#getOwnKeys(boolean)->String[]:::Return an array of own property keys associated with the object.
jdk.nashorn.internal.runtime.ScriptObject#getOwnSymbols(boolean)->Symbol[]:::Return an array of own property keys associated with the object.
jdk.nashorn.internal.runtime.ScriptObject#getOwnKeys(Class, boolean, Set)->T[]:::return an array of own property keys associated with the object.
jdk.nashorn.internal.runtime.ScriptObject#hasArrayEntries()->boolean:::Check if this ScriptObject has array entries
jdk.nashorn.internal.runtime.ScriptObject#getClassName()->String:::Return the valid JavaScript type name descriptor
jdk.nashorn.internal.runtime.ScriptObject#getLength()->Object:::length is a well known property
jdk.nashorn.internal.runtime.ScriptObject#safeToString()->String:::Stateless toString for ScriptObjects.
jdk.nashorn.internal.runtime.ScriptObject#getDefaultValue(Class)->Object:::Return the default value of the object with a given preferred type hint
jdk.nashorn.internal.runtime.ScriptObject#isInstance(ScriptObject)->boolean:::Checking whether a script object is an instance of another
jdk.nashorn.internal.runtime.ScriptObject#preventExtensions()->ScriptObject:::Flag this ScriptObject as non extensible
jdk.nashorn.internal.runtime.ScriptObject#isArray(Object)->boolean:::Check whether if an Object (not just a ScriptObject) represents JavaScript array
jdk.nashorn.internal.runtime.ScriptObject#isArray()->boolean:::Check if this ScriptObject is an array
jdk.nashorn.internal.runtime.ScriptObject#setIsArray()->void:::Flag this ScriptObject as being an array
jdk.nashorn.internal.runtime.ScriptObject#isArguments()->boolean:::Check if this ScriptObject is an arguments vector
jdk.nashorn.internal.runtime.ScriptObject#setIsArguments()->void:::Flag this ScriptObject as being an arguments vector
jdk.nashorn.internal.runtime.ScriptObject#isLengthNotWritable()->boolean:::Check if this object has non-writable length property
jdk.nashorn.internal.runtime.ScriptObject#setIsLengthNotWritable()->void:::Flag this object as having non-writable length property.
jdk.nashorn.internal.runtime.ScriptObject#getArray(Class)->ArrayData:::Get the ArrayData, for this ScriptObject, ensuring it is of a type that can handle elementType
jdk.nashorn.internal.runtime.ScriptObject#getArray()->ArrayData:::Get the ArrayData for this ScriptObject if it is an array
jdk.nashorn.internal.runtime.ScriptObject#setArray(ArrayData)->void:::Set the ArrayData for this ScriptObject if it is to be an array
jdk.nashorn.internal.runtime.ScriptObject#isExtensible()->boolean:::Check if this ScriptObject is extensible
jdk.nashorn.internal.runtime.ScriptObject#seal()->ScriptObject:::ECMAScript 15.2.3.8 - seal implementation
jdk.nashorn.internal.runtime.ScriptObject#isSealed()->boolean:::Check whether this ScriptObject is sealed
jdk.nashorn.internal.runtime.ScriptObject#freeze()->ScriptObject:::ECMA 15.2.39 - freeze implementation
jdk.nashorn.internal.runtime.ScriptObject#isFrozen()->boolean:::Check whether this ScriptObject is frozen
jdk.nashorn.internal.runtime.ScriptObject#isScope()->boolean:::Check whether this ScriptObject is scope
jdk.nashorn.internal.runtime.ScriptObject#setIsBuiltin()->void:::Tag this script object as built in
jdk.nashorn.internal.runtime.ScriptObject#isBuiltin()->boolean:::Check if this script object is built in
jdk.nashorn.internal.runtime.ScriptObject#setIsInternal()->void:::Tag this script object as internal object that should not be visible to script code.
jdk.nashorn.internal.runtime.ScriptObject#isInternal()->boolean:::Check if this script object is an internal object that should not be visible to script code.
jdk.nashorn.internal.runtime.ScriptObject#clear(boolean)->void:::Clears the properties from a ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation)
jdk.nashorn.internal.runtime.ScriptObject#containsKey(Object)->boolean:::Checks if a property with a given key is present in a ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation)
jdk.nashorn.internal.runtime.ScriptObject#containsValue(Object)->boolean:::Checks if a property with a given value is present in a ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation)
jdk.nashorn.internal.runtime.ScriptObject#entrySet()->Set>:::Returns the set of <property, value> entries that make up this ScriptObject's properties (java.util.Map-like method to help ScriptObjectMirror implementation)
jdk.nashorn.internal.runtime.ScriptObject#isEmpty()->boolean:::Check whether a ScriptObject contains no properties (java.util.Map-like method to help ScriptObjectMirror implementation)
jdk.nashorn.internal.runtime.ScriptObject#keySet()->Set:::Return the set of keys (property names) for all properties in this ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation)
jdk.nashorn.internal.runtime.ScriptObject#put(Object, Object, boolean)->Object:::Put a property in the ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation)
jdk.nashorn.internal.runtime.ScriptObject#putAll(Map, boolean)->void:::Put several properties in the ScriptObject given a mapping of their keys to their values (java.util.Map-like method to help ScriptObjectMirror implementation)
jdk.nashorn.internal.runtime.ScriptObject#remove(Object, boolean)->Object:::Remove a property from the ScriptObject
jdk.nashorn.internal.runtime.ScriptObject#size()->int:::Return the size of the ScriptObject - i.e
jdk.nashorn.internal.runtime.ScriptObject#values()->Collection:::Return the values of the properties in the ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation)
jdk.nashorn.internal.runtime.ScriptObject#lookup(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Lookup method that, given a CallSiteDescriptor, looks up the target MethodHandle and creates a GuardedInvocation with the appropriate guard(s).
jdk.nashorn.internal.runtime.ScriptObject#findNewMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Find the appropriate New method for an invoke dynamic call.
jdk.nashorn.internal.runtime.ScriptObject#findCallMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Find the appropriate CALL method for an invoke dynamic call
jdk.nashorn.internal.runtime.ScriptObject#hasWithScope()->boolean:::Test whether this object contains in its prototype chain or is itself a with-object.
jdk.nashorn.internal.runtime.ScriptObject#addProtoFilter(MethodHandle, int)->MethodHandle:::Add a filter to the first argument of methodHandle that calls its #getProto() method depth times.
jdk.nashorn.internal.runtime.ScriptObject#findGetMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Find the appropriate GET method for an invoke dynamic call.
jdk.nashorn.internal.runtime.ScriptObject#findGetIndexMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Find the appropriate GETINDEX method for an invoke dynamic call.
jdk.nashorn.internal.runtime.ScriptObject#getProtoSwitchPoints(String, ScriptObject)->SwitchPoint[]:::Get an array of switch points for a property with the given name that will be invalidated when the property definition is changed in this object's prototype chain
jdk.nashorn.internal.runtime.ScriptObject#getProtoSwitchPoint(String)->SwitchPoint::: script object get proto switch point
jdk.nashorn.internal.runtime.ScriptObject#findSetMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Find the appropriate SET method for an invoke dynamic call.
jdk.nashorn.internal.runtime.ScriptObject#findSetIndexMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Lookup function for the set index method, available for subclasses as well, e.g
jdk.nashorn.internal.runtime.ScriptObject#noSuchMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Fall back if a function property is not found.
jdk.nashorn.internal.runtime.ScriptObject#noSuchProperty(CallSiteDescriptor, LinkRequest)->GuardedInvocation:::Fall back if a property is not found.
jdk.nashorn.internal.runtime.ScriptObject#invokeNoSuchProperty(Object, boolean, int)->Object:::Invoke fall back if a property is not found.
jdk.nashorn.internal.runtime.ScriptObject#addSpill(Class, String)->MethodHandle:::Add a spill entry for the given key.
jdk.nashorn.internal.runtime.ScriptObject#pairArguments(MethodHandle, MethodType)->MethodHandle:::Make sure arguments are paired correctly, with respect to more parameters than declared, fewer parameters than declared and other things that JavaScript allows
jdk.nashorn.internal.runtime.ScriptObject#pairArguments(MethodHandle, MethodType, Boolean)->MethodHandle:::Make sure arguments are paired correctly, with respect to more parameters than declared, fewer parameters than declared and other things that JavaScript allows
jdk.nashorn.internal.runtime.ScriptObject#adaptHandleToVarArgCallSite(MethodHandle, int)->MethodHandle::: script object adapt handle to var arg call site
jdk.nashorn.internal.runtime.ScriptObject#setLength(long)->void:::Numeric length setter for length property
jdk.nashorn.internal.runtime.ScriptObject#getInt(Object, int)->int::: script object get int
jdk.nashorn.internal.runtime.ScriptObject#getInt(double, int)->int::: script object get int
jdk.nashorn.internal.runtime.ScriptObject#getInt(int, int)->int::: script object get int
jdk.nashorn.internal.runtime.ScriptObject#getDouble(Object, int)->double::: script object get double
jdk.nashorn.internal.runtime.ScriptObject#getDouble(double, int)->double::: script object get double
jdk.nashorn.internal.runtime.ScriptObject#getDouble(int, int)->double::: script object get double
jdk.nashorn.internal.runtime.ScriptObject#get(Object)->Object::: script object get
jdk.nashorn.internal.runtime.ScriptObject#get(double)->Object::: script object get
jdk.nashorn.internal.runtime.ScriptObject#get(int)->Object::: script object get
jdk.nashorn.internal.runtime.ScriptObject#setObject(FindProperty, int, Object, Object)->void:::This is the most generic of all Object setters
jdk.nashorn.internal.runtime.ScriptObject#set(Object, int, int)->void::: script object set
jdk.nashorn.internal.runtime.ScriptObject#set(Object, double, int)->void::: script object set
jdk.nashorn.internal.runtime.ScriptObject#set(Object, Object, int)->void::: script object set
jdk.nashorn.internal.runtime.ScriptObject#set(double, int, int)->void::: script object set
jdk.nashorn.internal.runtime.ScriptObject#set(double, double, int)->void::: script object set
jdk.nashorn.internal.runtime.ScriptObject#set(double, Object, int)->void::: script object set
jdk.nashorn.internal.runtime.ScriptObject#set(int, int, int)->void::: script object set
jdk.nashorn.internal.runtime.ScriptObject#set(int, double, int)->void::: script object set
jdk.nashorn.internal.runtime.ScriptObject#set(int, Object, int)->void::: script object set
jdk.nashorn.internal.runtime.ScriptObject#has(Object)->boolean::: script object has
jdk.nashorn.internal.runtime.ScriptObject#has(double)->boolean::: script object has
jdk.nashorn.internal.runtime.ScriptObject#has(int)->boolean::: script object has
jdk.nashorn.internal.runtime.ScriptObject#hasOwnProperty(Object)->boolean::: script object has own property
jdk.nashorn.internal.runtime.ScriptObject#hasOwnProperty(int)->boolean::: script object has own property
jdk.nashorn.internal.runtime.ScriptObject#hasOwnProperty(double)->boolean::: script object has own property
jdk.nashorn.internal.runtime.ScriptObject#delete(int, boolean)->boolean::: script object delete
jdk.nashorn.internal.runtime.ScriptObject#delete(double, boolean)->boolean::: script object delete
jdk.nashorn.internal.runtime.ScriptObject#delete(Object, boolean)->boolean::: script object delete
jdk.nashorn.internal.runtime.ScriptObject#copy()->ScriptObject:::Return a shallow copy of this ScriptObject.
jdk.nashorn.internal.runtime.ScriptObject#clone()->ScriptObject::: script object clone
jdk.nashorn.internal.runtime.ScriptObject#newUserAccessors(Object, int, ScriptFunction, ScriptFunction)->UserAccessorProperty:::Make a new UserAccessorProperty property
jdk.nashorn.internal.runtime.ScriptObject#useDualFields()->boolean:::Returns true if properties for this object should use dual field mode, false otherwise.
jdk.nashorn.internal.runtime.ScriptObject#ensureSpillSize(int)->Object::: script object ensure spill size
jdk.nashorn.internal.runtime.ScriptObject#getCount()->long:::Get number of ScriptObject instances created
jdk.nashorn.internal.runtime.ScriptRuntime#switchTagAsInt(Object, int)->int:::Converts a switch tag value to a simple integer
jdk.nashorn.internal.runtime.ScriptRuntime#switchTagAsInt(boolean, int)->int:::Converts a switch tag value to a simple integer
jdk.nashorn.internal.runtime.ScriptRuntime#switchTagAsInt(long, int)->int:::Converts a switch tag value to a simple integer
jdk.nashorn.internal.runtime.ScriptRuntime#switchTagAsInt(double, int)->int:::Converts a switch tag value to a simple integer
jdk.nashorn.internal.runtime.ScriptRuntime#builtinObjectToString(Object)->String:::This is the builtin implementation of Object.prototype.toString
jdk.nashorn.internal.runtime.ScriptRuntime#safeToString(Object)->String:::This is called whenever runtime wants to throw an error and wants to provide meaningful information about an object
jdk.nashorn.internal.runtime.ScriptRuntime#toPropertyIterator(Object)->Iterator:::Returns an iterator over property identifiers used in the for...in statement
jdk.nashorn.internal.runtime.ScriptRuntime#toValueIterator(Object)->Iterator:::Returns an iterator over property values used in the for each...in statement
jdk.nashorn.internal.runtime.ScriptRuntime#toES6Iterator(Object)->Iterator:::Returns an iterator over property values used in the {@code for ..
jdk.nashorn.internal.runtime.ScriptRuntime#mergeScope(ScriptObject)->ScriptObject:::Merge a scope into its prototype's map
jdk.nashorn.internal.runtime.ScriptRuntime#apply(ScriptFunction, Object, Object...)->Object:::Call a function given self and args
jdk.nashorn.internal.runtime.ScriptRuntime#throwReferenceError(String)->void:::Throws a reference error for an undefined variable.
jdk.nashorn.internal.runtime.ScriptRuntime#throwConstTypeError(String)->void:::Throws a type error for an assignment to a const.
jdk.nashorn.internal.runtime.ScriptRuntime#construct(ScriptFunction, Object...)->Object:::Call a script function as a constructor with given args.
jdk.nashorn.internal.runtime.ScriptRuntime#sameValue(Object, Object)->boolean:::Generic implementation of ECMA 9.12 - SameValue algorithm
jdk.nashorn.internal.runtime.ScriptRuntime#parse(String, String, boolean)->String:::Returns AST as JSON compatible string
jdk.nashorn.internal.runtime.ScriptRuntime#isJSWhitespace(char)->boolean:::Test whether a char is valid JavaScript whitespace
jdk.nashorn.internal.runtime.ScriptRuntime#openWith(ScriptObject, Object)->ScriptObject:::Entering a with node requires new scope
jdk.nashorn.internal.runtime.ScriptRuntime#ADD(Object, Object)->Object:::ECMA 11.6.1 - The addition operator (+) - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#DEBUGGER()->Object:::Debugger hook
jdk.nashorn.internal.runtime.ScriptRuntime#NEW(Object, Object...)->Object:::New hook
jdk.nashorn.internal.runtime.ScriptRuntime#TYPEOF(Object, Object)->Object:::ECMA 11.4.3 The typeof Operator - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#REFERENCE_ERROR(Object, Object, Object)->Object:::Throw ReferenceError when LHS of assignment or increment/decrement operator is not an assignable node (say a literal)
jdk.nashorn.internal.runtime.ScriptRuntime#slowDelete(ScriptObject, String)->boolean:::ECMA 11.4.1 - delete operator, implementation for slow scopes  This implementation of 'delete' walks the scope chain to find the scope that contains the property to be deleted, then invokes delete on it
jdk.nashorn.internal.runtime.ScriptRuntime#strictFailDelete(String)->boolean:::ECMA 11.4.1 - delete operator, special case  This is 'delete' on a scope; it always fails under strict mode
jdk.nashorn.internal.runtime.ScriptRuntime#EQ(Object, Object)->boolean:::ECMA 11.9.1 - The equals operator (==) - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#NE(Object, Object)->boolean:::ECMA 11.9.2 - The does-not-equal operator (==) - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#EQ_STRICT(Object, Object)->boolean:::ECMA 11.9.4 - The strict equal operator (===) - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#NE_STRICT(Object, Object)->boolean:::ECMA 11.9.5 - The strict non equal operator (!==) - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#IN(Object, Object)->boolean:::ECMA 11.8.6 - The in operator - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#INSTANCEOF(Object, Object)->boolean:::ECMA 11.8.6 - The strict instanceof operator - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#LT(Object, Object)->boolean:::ECMA 11.8.1 - The less than operator (<) - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#GT(Object, Object)->boolean:::ECMA 11.8.2 - The greater than operator (>) - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#LE(Object, Object)->boolean:::ECMA 11.8.3 - The less than or equal operator (<=) - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#GE(Object, Object)->boolean:::ECMA 11.8.4 - The greater than or equal operator (>=) - generic implementation
jdk.nashorn.internal.runtime.ScriptRuntime#invalidateReservedBuiltinName(String)->void:::Tag a reserved name as invalidated - used when someone writes to a property with this name - overly conservative, but link time is too late to apply e.g
jdk.nashorn.internal.runtime.ScriptRuntime#GET_TEMPLATE_OBJECT(Object, Object)->ScriptObject:::ES6 12.2.9.3 Runtime Semantics: GetTemplateObject(templateLiteral).
jdk.nashorn.internal.runtime.SetMethodCreator#createGuardedInvocation(SwitchPoint)->GuardedInvocation:::Creates the actual guarded invocation that represents the dynamic setter method for the property.
jdk.nashorn.internal.runtime.SharedPropertyMap#propertyChanged(Property)->void::: shared property map property changed
jdk.nashorn.internal.runtime.SharedPropertyMap#isValidSharedProtoMap()->boolean::: shared property map is valid shared proto map
jdk.nashorn.internal.runtime.SharedPropertyMap#getSharedProtoSwitchPoint()->SwitchPoint::: shared property map get shared proto switch point
jdk.nashorn.internal.runtime.SharedPropertyMap#invalidateSwitchPoint()->void:::Invalidate the shared prototype switch point if this is a shared prototype map.
jdk.nashorn.internal.runtime.Source#getSourceInfo()->DebuggerSupport.SourceInfo::: source get source info
jdk.nashorn.internal.runtime.Source#sourceFor(String, char[], boolean)->Source:::Returns a Source instance
jdk.nashorn.internal.runtime.Source#sourceFor(String, char[])->Source:::Returns a Source instance
jdk.nashorn.internal.runtime.Source#sourceFor(String, String, boolean)->Source:::Returns a Source instance
jdk.nashorn.internal.runtime.Source#sourceFor(String, String)->Source:::Returns a Source instance
jdk.nashorn.internal.runtime.Source#sourceFor(String, URL)->Source:::Constructor
jdk.nashorn.internal.runtime.Source#sourceFor(String, URL, Charset)->Source:::Constructor
jdk.nashorn.internal.runtime.Source#sourceFor(String, File)->Source:::Constructor
jdk.nashorn.internal.runtime.Source#sourceFor(String, Path)->Source:::Constructor
jdk.nashorn.internal.runtime.Source#sourceFor(String, File, Charset)->Source:::Constructor
jdk.nashorn.internal.runtime.Source#sourceFor(String, Reader)->Source:::Returns an instance
jdk.nashorn.internal.runtime.Source#equals(Object)->boolean::: source equals
jdk.nashorn.internal.runtime.Source#hashCode()->int::: source hash code
jdk.nashorn.internal.runtime.Source#getString()->String:::Fetch source content.
jdk.nashorn.internal.runtime.Source#getName()->String:::Get the user supplied name of this script.
jdk.nashorn.internal.runtime.Source#getLastModified()->long:::Get the last modified time of this script.
jdk.nashorn.internal.runtime.Source#getBase()->String:::Get the "directory" part of the file or "base" of the URL.
jdk.nashorn.internal.runtime.Source#getString(int, int)->String:::Fetch a portion of source content.
jdk.nashorn.internal.runtime.Source#getString(long)->String:::Fetch a portion of source content associated with a token.
jdk.nashorn.internal.runtime.Source#getURL()->URL:::Returns the source URL of this script Source
jdk.nashorn.internal.runtime.Source#getExplicitURL()->String:::Get explicit source URL.
jdk.nashorn.internal.runtime.Source#setExplicitURL(String)->void:::Set explicit source URL.
jdk.nashorn.internal.runtime.Source#isEvalCode()->boolean:::Returns whether this source was submitted via 'eval' call or not.
jdk.nashorn.internal.runtime.Source#getLine(int)->int:::Return line number of character position
jdk.nashorn.internal.runtime.Source#getColumn(int)->int:::Return column number of character position.
jdk.nashorn.internal.runtime.Source#getSourceLine(int)->String:::Return line text including character position.
jdk.nashorn.internal.runtime.Source#getContent()->char[]:::Get the content of this source as a char array
jdk.nashorn.internal.runtime.Source#getLength()->int:::Get the length in chars for this source
jdk.nashorn.internal.runtime.Source#readFully(Reader)->char[]:::Read all of the source until end of file
jdk.nashorn.internal.runtime.Source#readFully(File)->char[]:::Read all of the source until end of file
jdk.nashorn.internal.runtime.Source#readFully(File, Charset)->char[]:::Read all of the source until end of file
jdk.nashorn.internal.runtime.Source#readFully(URL)->char[]:::Read all of the source until end of stream from the given URL
jdk.nashorn.internal.runtime.Source#readFully(URL, Charset)->char[]:::Read all of the source until end of file
jdk.nashorn.internal.runtime.Source#getDigest()->String:::Get a Base64-encoded SHA1 digest for this source.
jdk.nashorn.internal.runtime.Source#baseURL(URL)->String:::Returns the base directory or URL for the given URL
jdk.nashorn.internal.runtime.Source#readFully(InputStream)->char[]::: source read fully
jdk.nashorn.internal.runtime.Source#readBytes(InputStream)->byte[]::: source read bytes
jdk.nashorn.internal.runtime.Source#toString()->String::: source to string
jdk.nashorn.internal.runtime.Source#initLogger(Context)->DebugLogger::: source init logger
jdk.nashorn.internal.runtime.Source#getLogger()->DebugLogger::: source get logger
jdk.nashorn.internal.runtime.Source#dump(String)->void::: source dump
jdk.nashorn.internal.runtime.Specialization#getMethodHandle()->MethodHandle:::Get the method handle for the invoker of this ScriptFunction
jdk.nashorn.internal.runtime.Specialization#getLinkLogicClass()->Class:::Get the link logic class for this ScriptFunction
jdk.nashorn.internal.runtime.Specialization#isOptimistic()->boolean:::An optimistic specialization is one that can throw UnwarrantedOptimismException
jdk.nashorn.internal.runtime.Specialization#convertsNumericArgs()->boolean:::Check if this function converts arguments for numeric parameters to numbers so it's safe to pass booleans as 0 and 1
jdk.nashorn.internal.runtime.SpillProperty#copy()->Property::: spill property copy
jdk.nashorn.internal.runtime.SpillProperty#copy(Class)->Property::: spill property copy
jdk.nashorn.internal.runtime.SpillProperty#isSpill()->boolean::: spill property is spill
jdk.nashorn.internal.runtime.SpillProperty#initMethodHandles(Class)->void::: spill property init method handles
jdk.nashorn.internal.runtime.StoredScript#getCompilationId()->int:::Get the compilation id for this StoredScript
jdk.nashorn.internal.runtime.StoredScript#installFunction(RecompilableScriptFunctionData, CodeInstaller)->FunctionInitializer::: stored script install function
jdk.nashorn.internal.runtime.StoredScript#installScript(Source, CodeInstaller)->Class:::Install as script.
jdk.nashorn.internal.runtime.StoredScript#hashCode()->int::: stored script hash code
jdk.nashorn.internal.runtime.StoredScript#equals(Object)->boolean::: stored script equals
jdk.nashorn.internal.runtime.StructureLoader#isSingleFieldStructure(String)->boolean:::Returns true if the class name represents a structure object with single object-only fields.
jdk.nashorn.internal.runtime.StructureLoader#isStructureClass(String)->boolean:::Returns true if the class name represents a Nashorn structure object.
jdk.nashorn.internal.runtime.StructureLoader#getModule()->Module::: structure loader get module
jdk.nashorn.internal.runtime.StructureLoader#findClass(String)->Class::: structure loader find class
jdk.nashorn.internal.runtime.Symbol#toString()->String::: symbol to string
jdk.nashorn.internal.runtime.Symbol#getName()->String:::Return the symbol's name
jdk.nashorn.internal.runtime.Timing#getLogInfo()->String:::Get the log info accumulated by this Timing instance
jdk.nashorn.internal.runtime.Timing#getLogInfoLines()->String[]:::Get the log info accumulated by this Timing instance
jdk.nashorn.internal.runtime.Timing#isEnabled()->boolean:::Check if timing is enabled
jdk.nashorn.internal.runtime.Timing#accumulateTime(String, long)->void:::When timing, this can be called to register a new module for timing or add to its accumulated time
jdk.nashorn.internal.runtime.Timing#getLoggerName()->String::: timing get logger name
jdk.nashorn.internal.runtime.Timing#initLogger(Context)->DebugLogger::: timing init logger
jdk.nashorn.internal.runtime.Timing#getLogger()->DebugLogger::: timing get logger
jdk.nashorn.internal.runtime.Timing#toMillisPrint(long)->String:::Takes a duration in nanoseconds, and returns a string representation of it rounded to milliseconds.
jdk.nashorn.internal.runtime.Timing.TimeSupplier#getStrings()->String[]::: time supplier get strings
jdk.nashorn.internal.runtime.Timing.TimeSupplier#get()->String::: time supplier get
jdk.nashorn.internal.runtime.Undefined#getUndefined()->Undefined:::Get the value of undefined, this is represented as a global singleton instance of this class
jdk.nashorn.internal.runtime.Undefined#getEmpty()->Undefined:::Get the value of empty
jdk.nashorn.internal.runtime.Undefined#getClassName()->String:::Get the class name of Undefined
jdk.nashorn.internal.runtime.Undefined#toString()->String::: undefined to string
jdk.nashorn.internal.runtime.Undefined#lookup(CallSiteDescriptor)->GuardedInvocation:::Lookup the appropriate method for an invoke dynamic call.
jdk.nashorn.internal.runtime.Undefined#get(Object)->Object::: undefined get
jdk.nashorn.internal.runtime.Undefined#set(Object, Object, int)->void::: undefined set
jdk.nashorn.internal.runtime.Undefined#delete(Object, boolean)->boolean::: undefined delete
jdk.nashorn.internal.runtime.Undefined#has(Object)->boolean::: undefined has
jdk.nashorn.internal.runtime.Undefined#hasOwnProperty(Object)->boolean::: undefined has own property
jdk.nashorn.internal.runtime.UnwarrantedOptimismException#isValid(int)->boolean:::Check if a program point is valid.
jdk.nashorn.internal.runtime.UnwarrantedOptimismException#createNarrowest(Object, int)->UnwarrantedOptimismException:::Create an UnwarrantedOptimismException with the given return value and program point, narrowing the type to number if the value is a float or a long that can be represented as double.
jdk.nashorn.internal.runtime.UnwarrantedOptimismException#getReturnValueDestructive()->Object:::Get the return value
jdk.nashorn.internal.runtime.UnwarrantedOptimismException#getReturnValueNonDestructive()->Object::: unwarranted optimism exception get return value non destructive
jdk.nashorn.internal.runtime.UnwarrantedOptimismException#getReturnType()->Type:::Get the return type
jdk.nashorn.internal.runtime.UnwarrantedOptimismException#hasInvalidProgramPoint()->boolean:::Does this exception refer to an invalid program point? This might be OK if we throw it, e.g
jdk.nashorn.internal.runtime.UnwarrantedOptimismException#getProgramPoint()->int:::Get the program point
jdk.nashorn.internal.runtime.UnwarrantedOptimismException#replaceProgramPoint(int)->UnwarrantedOptimismException:::Return a new UnwarrantedOptimismException with the same return value and the new program point.
jdk.nashorn.internal.runtime.UnwarrantedOptimismException#getMessage()->String::: unwarranted optimism exception get message
jdk.nashorn.internal.runtime.URIUtils#encodeURI(Object, String)->String::: utils encode i
jdk.nashorn.internal.runtime.URIUtils#encodeURIComponent(Object, String)->String::: utils encode component
jdk.nashorn.internal.runtime.URIUtils#decodeURI(Object, String)->String::: utils decode i
jdk.nashorn.internal.runtime.URIUtils#decodeURIComponent(Object, String)->String::: utils decode component
jdk.nashorn.internal.runtime.UserAccessorProperty.Accessors#set(Object, Object)->void::: accessors set
jdk.nashorn.internal.runtime.UserAccessorProperty.Accessors#toString()->String::: accessors to string
jdk.nashorn.internal.runtime.UserAccessorProperty#getINVOKE_UA_GETTER(Class, int)->MethodHandle::: user accessor property get e_ a_ r
jdk.nashorn.internal.runtime.UserAccessorProperty#getINVOKE_UA_SETTER(Class)->MethodHandle::: user accessor property get e_ a_ r
jdk.nashorn.internal.runtime.UserAccessorProperty#copy()->Property::: user accessor property copy
jdk.nashorn.internal.runtime.UserAccessorProperty#copy(Class)->Property::: user accessor property copy
jdk.nashorn.internal.runtime.UserAccessorProperty#setAccessors(ScriptObject, PropertyMap, Accessors)->void::: user accessor property set accessors
jdk.nashorn.internal.runtime.UserAccessorProperty#getAccessors(ScriptObject)->Accessors::: user accessor property get accessors
jdk.nashorn.internal.runtime.UserAccessorProperty#getLocalType()->Class::: user accessor property get local type
jdk.nashorn.internal.runtime.UserAccessorProperty#hasGetterFunction(ScriptObject)->boolean::: user accessor property has getter function
jdk.nashorn.internal.runtime.UserAccessorProperty#hasSetterFunction(ScriptObject)->boolean::: user accessor property has setter function
jdk.nashorn.internal.runtime.UserAccessorProperty#getIntValue(ScriptObject, ScriptObject)->int::: user accessor property get int value
jdk.nashorn.internal.runtime.UserAccessorProperty#getDoubleValue(ScriptObject, ScriptObject)->double::: user accessor property get double value
jdk.nashorn.internal.runtime.UserAccessorProperty#getObjectValue(ScriptObject, ScriptObject)->Object::: user accessor property get object value
jdk.nashorn.internal.runtime.UserAccessorProperty#setValue(ScriptObject, ScriptObject, int, boolean)->void::: user accessor property set value
jdk.nashorn.internal.runtime.UserAccessorProperty#setValue(ScriptObject, ScriptObject, double, boolean)->void::: user accessor property set value
jdk.nashorn.internal.runtime.UserAccessorProperty#setValue(ScriptObject, ScriptObject, Object, boolean)->void::: user accessor property set value
jdk.nashorn.internal.runtime.UserAccessorProperty#getGetter(Class)->MethodHandle::: user accessor property get getter
jdk.nashorn.internal.runtime.UserAccessorProperty#getOptimisticGetter(Class, int)->MethodHandle::: user accessor property get optimistic getter
jdk.nashorn.internal.runtime.UserAccessorProperty#initMethodHandles(Class)->void::: user accessor property init method handles
jdk.nashorn.internal.runtime.UserAccessorProperty#getGetterFunction(ScriptObject)->ScriptFunction::: user accessor property get getter function
jdk.nashorn.internal.runtime.UserAccessorProperty#getSetter(Class, PropertyMap)->MethodHandle::: user accessor property get setter
jdk.nashorn.internal.runtime.UserAccessorProperty#getSetterFunction(ScriptObject)->ScriptFunction::: user accessor property get setter function
jdk.nashorn.internal.runtime.UserAccessorProperty#getAccessorsGetter()->MethodHandle:::Get the getter for the Accessors object
jdk.nashorn.internal.runtime.Version#version()->String:::The current version number as a string.
jdk.nashorn.internal.runtime.Version#fullVersion()->String:::The current full version number as a string.
jdk.nashorn.internal.runtime.WithObject#delete(Object, boolean)->boolean:::Delete a property based on a key.
jdk.nashorn.internal.runtime.WithObject#lookup(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: with object lookup
jdk.nashorn.internal.runtime.WithObject#findProperty(Object, boolean, boolean, ScriptObject)->FindProperty:::Overridden to try to find the property first in the expression object (and its prototypes), and only then in this object (and its prototypes).
jdk.nashorn.internal.runtime.WithObject#invokeNoSuchProperty(Object, boolean, int)->Object::: with object invoke no such property
jdk.nashorn.internal.runtime.WithObject#setSplitState(int)->void::: with object set split state
jdk.nashorn.internal.runtime.WithObject#getSplitState()->int::: with object get split state
jdk.nashorn.internal.runtime.WithObject#addBoundProperties(ScriptObject, Property[])->void::: with object add bound properties
jdk.nashorn.internal.runtime.WithObject#withFilterExpression(Object)->Object:::Drops the WithObject wrapper from the expression.
jdk.nashorn.internal.runtime.WithObject#withFilterScope(Object)->Object:::Drops the WithObject wrapper from the scope.
jdk.nashorn.internal.runtime.WithObject#getExpression()->ScriptObject:::Get the with expression for this WithObject

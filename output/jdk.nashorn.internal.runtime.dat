AccessControlContextFactory#createAccessControlContext():::Creates an access control context with no permissions.:::return->new->PermissionArr->createAccessControlContext
AccessControlContextFactory#createAccessControlContext(Permission...):::Creates an access control context limited to only the specified permissions.:::perms->new->Permissions->foreach->perms->add->return->new->ProtectionDomainArr->new->ProtectionDomain->new->AccessControlContext
AccessControlContextFactory#createAccessControlContext(String...):::Creates an access control context limited to only the RuntimePermissions of the given names.:::return->makeRuntimePermissions->createAccessControlContext
AccessControlContextFactory#makeRuntimePermissions(String...)::: access control context factory make runtime permissions:::return->Stream->of->RuntimePermission->new->map->Permission[]->new->toArray
AccessorProperty#create(Object, int, MethodHandle, MethodHandle):::Create a new accessor property:::return->new->AccessorProperty
AccessorProperty#initGetterSetter(Class)::: accessor property init getter setter:::slot->getSlot->if->isParameter->hasArguments->arguments->MH->getter->MH->MH->MH->methodHandle->filterArguments->insertArguments->asType->MH->MH->MH->methodHandle->filterArguments->insertArguments->asType->else->gs->GETTERS_SETTERS->get
AccessorProperty#setInitialValue(ScriptObject, Object):::Set initial value of a script object's property:::hasDualFields->JSType->unboxedFieldType->setType->if->intValue->invokeSetter->else->if->doubleValue->invokeSetter->else->invokeSetter
AccessorProperty#initializeType():::Initialize the type of a property:::hasDualFields->setType
AccessorProperty#readObject(ObjectInputStream)::: accessor property read object:::s->defaultReadObject->new->MethodHandleArr
AccessorProperty#bindTo(MethodHandle, Object)::: accessor property bind to:::if->return->return->MH->MH->bindTo->dropArguments
AccessorProperty#copy()::: accessor property copy:::return->new->AccessorProperty
AccessorProperty#copy(Class)::: accessor property copy:::return->new->AccessorProperty
AccessorProperty#getIntValue(ScriptObject, ScriptObject)::: accessor property get int value:::try->return->getGetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
AccessorProperty#getDoubleValue(ScriptObject, ScriptObject)::: accessor property get double value:::try->return->getGetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
AccessorProperty#getObjectValue(ScriptObject, ScriptObject)::: accessor property get object value:::try->return->getGetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
AccessorProperty#invokeSetter(ScriptObject, int):::Invoke setter for this property with a value:::try->self->getMap->getSetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
AccessorProperty#invokeSetter(ScriptObject, double):::Invoke setter for this property with a value:::try->self->getMap->getSetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
AccessorProperty#invokeSetter(ScriptObject, Object):::Invoke setter for this property with a value:::try->self->getMap->getSetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
AccessorProperty#setValue(ScriptObject, ScriptObject, int, boolean)::: accessor property set value:::invokeSetter
AccessorProperty#setValue(ScriptObject, ScriptObject, double, boolean)::: accessor property set value:::invokeSetter
AccessorProperty#setValue(ScriptObject, ScriptObject, Object, boolean)::: accessor property set value:::invokeSetter
AccessorProperty#initMethodHandles(Class)::: accessor property init method handles:::if->isAssignableFrom->StructureLoader->structure->getName->isStructureClass->throw->new->IllegalArgumentException->initGetterSetter
AccessorProperty#getGetter(Class)::: accessor property get getter:::i->getAccessorTypeIndex->checkUndeclared->getterCache->cachedGetter->getter->if->else->getLocalType->createGetter->getLocalType->debug->return
AccessorProperty#getOptimisticGetter(Class, int)::: accessor property get optimistic getter:::if->return->getOptimisticPrimitiveGetter->checkUndeclared->return->getLocalType->createGetter->getLocalType->debug
AccessorProperty#getOptimisticPrimitiveGetter(Class, int)::: accessor property get optimistic primitive getter:::g->getLocalType->getGetter->return->MH->OptimisticReturnFilters->filterOptimisticReturnValue->g->type->changeReturnType->asType
AccessorProperty#getWiderProperty(Class)::: accessor property get wider property:::return->copy
AccessorProperty#getWiderMap(PropertyMap, Property)::: accessor property get wider map:::newMap->oldMap->replaceProperty->return
AccessorProperty#checkUndeclared()::: accessor property check undeclared:::if->getFlags->throw->ECMAErrors->getKey->toString->referenceError
AccessorProperty#replaceMap(Object, PropertyMap)::: accessor property replace map:::setMap->return
AccessorProperty#invalidateSwitchPoint(AccessorProperty, Object)::: accessor property invalidate switch point:::if->hasBeenInvalidated->SwitchPoint->new->SwitchPointArr->invalidateAll->return
AccessorProperty#generateSetter(Class, Class)::: accessor property generate setter:::return->createSetter->getLocalType->debug
AccessorProperty#isUndefined():::Is this property of the undefined type?:::return->getLocalType
AccessorProperty#hasNativeSetter()::: accessor property has native setter:::return
AccessorProperty#getSetter(Class, PropertyMap)::: accessor property get setter:::checkUndeclared->typeIndex->getAccessorTypeIndex->currentTypeIndex->getLocalType->getAccessorTypeIndex->mh->if->needsInvalidator->newProperty->getWiderProperty->newMap->getWiderMap->widerSetter->newProperty->getSetter->ct->getLocalType->MH->MH->debugReplace->insertArguments->filterArguments->if->ct->isPrimitive->type->isPrimitive->ObjectClassGenerator->generateSetter->createGuardBoxedPrimitiveSetter->else->forType->isUndefined->getLocalType->forType->isPrimitive->generateSetter->if->isBuiltin->MH->MH->insertArguments->getKey->toString->debugInvalidate->filterArguments->return
AccessorProperty#canChangeType()::: accessor property can change type:::if->hasDualFields->return->return->getLocalType->getLocalType->isConfigurable->isWritable
AccessorProperty#needsInvalidator(int, int)::: accessor property needs invalidator:::return->canChangeType
AccessorProperty#debug(MethodHandle, Class, Class, String)::: accessor property debug:::if->Global->hasInstance->return->context->Context->getContextTrusted->return->context->new->Supplier<String>->addLoggingToHandle
AccessorProperty#debugReplace(Class, Class, PropertyMap, PropertyMap)::: accessor property debug replace:::if->Global->hasInstance->return->context->Context->getContextTrusted->mh->context->new->Supplier<String>->addLoggingToHandle->context->new->Supplier<String>->addLoggingToHandle->return
AccessorProperty#debugInvalidate(MethodHandle, String)::: accessor property debug invalidate:::if->Global->hasInstance->return->context->Context->getContextTrusted->return->context->new->Supplier<String>->addLoggingToHandle
AccessorProperty#findOwnMH_S(String, Class, Class...)::: accessor property find own h_ s:::return->MH->MH->type->findStatic
AllocationStrategy#getAllocatorClassName()::: allocation strategy get allocator class name:::if->Compiler->ObjectClassGenerator->getClassName->binaryName->intern->return
AllocationStrategy#getAllocatorMap(ScriptObject):::Get the property map for the allocated object.:::protoMap->prototype->getMap->if->if->lastMap->hasSharedProtoMap->if->lastMap->hasSamePrototype->return->if->lastMap->hasSameProtoMap->lastMap->hasUnchangedProtoMap->allocatorMap->PropertyMap->getAllocatorClassName->newMap->sharedProtoMap->new->SharedPropertyMap->allocatorMap->setSharedProtoMap->prototype->setMap->new->AllocatorMap->return->if->lastMap->hasValidSharedProtoMap->lastMap->hasSameProtoMap->prototype->lastMap->getSharedProtoMap->setMap->return->allocatorMap->PropertyMap->getAllocatorClassName->newMap->new->AllocatorMap->return
AllocationStrategy#allocate(PropertyMap):::Allocate an object with the given property map:::try->if->MH->Context->getAllocatorClassName->forStructureClass->symbolName->MH->type->findStatic->return->allocator->invokeExact->catch->throw->throw->new->RuntimeException->finally
AllocationStrategy#toString()::: allocation strategy to string:::return
AllocationStrategy.AllocatorMap#hasSamePrototype(ScriptObject)::: allocator map has same prototype:::return->prototype->get
AllocationStrategy.AllocatorMap#hasSameProtoMap(PropertyMap)::: allocator map has same proto map:::return->prototypeMap->get->allocatorMap->getSharedProtoMap
AllocationStrategy.AllocatorMap#hasUnchangedProtoMap()::: allocator map has unchanged proto map:::proto->prototype->get->return->proto->getMap->prototypeMap->get
AllocationStrategy.AllocatorMap#hasSharedProtoMap()::: allocator map has shared proto map:::return->getSharedProtoMap
AllocationStrategy.AllocatorMap#hasValidSharedProtoMap()::: allocator map has valid shared proto map:::return->hasSharedProtoMap->getSharedProtoMap->isValidSharedProtoMap
AllocationStrategy.AllocatorMap#getSharedProtoMap()::: allocator map get shared proto map:::return->allocatorMap->getSharedProtoMap
ArgumentSetter#setArgument(Object, ScriptObject, int):::Used from generated bytecode to invoke ScriptObject#setArgument(int, Object) without having to reorder the arguments on the stack:::arguments->setArgument
ArgumentSetter#setArrayElement(Object, Object[], int):::Used from generated bytecode to set a variable arity parameter - an array element - without having to reorder the arguments on the stack:::
AstDeserializer#deserialize(byte[])::: ast deserializer deserialize:::return->AccessController->new->PrivilegedAction<FunctionNode>->doPrivileged
AstSerializer#serialize(FunctionNode)::: ast serializer serialize:::out->new->ByteArrayOutputStream->deflater->new->Deflater->try->oout->new->DeflaterOutputStream->new->ObjectOutputStream->oout->writeObject->catch->throw->new->AssertionError->finally->deflater->end->return->out->toByteArray
BitVector#copy(BitVector):::Copy another BitVector into this one:::clone
BitVector#slotsNeeded(long):::Calculate the number of slots need for the specified length of bits.:::return
BitVector#growthNeeded(long):::Calculate the number of slots need for the specified length of bits rounded to allocation quanta.:::return->slotsNeeded
BitVector#slot(int):::Return a slot from bits, zero if slot is beyond length.:::return
BitVector#resize(long):::Resize the bit vector to accommodate the new length.:::need->growthNeeded->if->Arrays->copyOf->shift->slot->if->for
BitVector#set(long):::Set a bit in the bit vector.:::
BitVector#clear(long):::Clear a bit in the bit vector.:::
BitVector#toggle(long):::Toggle a bit in the bit vector.:::
BitVector#setTo(long):::Sets all bits in the vector up to the length.:::if->lastWord->lastBits->Arrays->fill->if
BitVector#clearAll():::Clears all bits in the vector.:::Arrays->fill
BitVector#isSet(long):::Test if bit is set in the bit vector.:::return
BitVector#isClear(long):::Test if a bit is clear in the bit vector.:::return
BitVector#shiftLeft(long, long):::Shift bits to the left by shift.:::if->leftShift->rightShift->slotShift->slotCount->slot->from->if->for->else->for->resize
BitVector#shiftRight(long, long):::Shift bits to the right by shift.:::resize->if->rightShift->leftShift->slotShift->slot->from->if->for->else->for->resize
BitVector#setRange(long, long):::Set a bit range.:::if->firstWord->lastWord->firstBits->lastBits->if->else->Arrays->fill
CodeInstaller#getContext():::Return the Context associated with this code installer.:::
CodeInstaller#install(String, byte[]):::Install a class.:::
CodeInstaller#initialize(Collection>, Source, Object[]):::Initialize already installed classes.:::
CodeInstaller#verify(byte[]):::Verify generated bytecode before emission:::
CodeInstaller#getUniqueScriptId():::Get next unique script id:::
CodeInstaller#storeScript(String, Source, String, Map, Map, Object[], int):::Store a compiled script for later reuse:::
CodeInstaller#loadScript(Source, String):::Load a previously compiled script:::
CodeInstaller#getOnDemandCompilationInstaller():::Returns a code installer #isCompatibleWith(CodeInstaller) compatible with this installer, but is suitable for on-demand compilations:::
CodeInstaller#getMultiClassCodeInstaller():::Returns a code installer #isCompatibleWith(CodeInstaller) compatible with this installer, but is suitable for installation of multiple classes that reference each other by name:::
CodeInstaller#isCompatibleWith(CodeInstaller):::Returns true if this code installer is compatible with the other code installer:::
CodeStore#initLogger(Context)::: code store init logger:::context->getClass->getLogger->return
CodeStore#getLogger()::: code store get logger:::return
CodeStore#newCodeStore(Context):::Returns a new code store instance.:::try->store->new->DirectoryCodeStore->store->initLogger->return->catch->context->getLogger->warning->return->finally
CodeStore#store(String, Source, String, Map, Map, Object[], int):::Store a compiled script in the cache.:::return->storedScriptFor->store
CodeStore#store(String, Source, StoredScript):::Stores a compiled script.:::
CodeStore#load(Source, String):::Return a compiled script from the cache, or null if it isn't found.:::
CodeStore#storedScriptFor(Source, String, Map, Map, Object[], int):::Returns a new StoredScript instance.:::foreach->if->getLogger->warning->return->return->new->StoredScript
CodeStore#getCacheKey(Object, Type[]):::Generate a string representing the function with functionId and paramTypes.:::b->new->StringBuilder->append->if->b->append->foreach->b->Type->getShortSignatureDescriptor->append->return->b->toString
CodeStore.DirectoryCodeStore#checkDirectory(String, ScriptEnvironment, boolean)::: directory code store check directory:::try->return->AccessController->new->PrivilegedExceptionAction<File>->doPrivileged->catch->throw->e->getException->finally
CodeStore.DirectoryCodeStore#getVersionDir(ScriptEnvironment)::: directory code store get version dir:::try->versionDir->OptimisticTypesPersistence->getVersionDirName->return->catch->throw->new->IOException->finally
CodeStore.DirectoryCodeStore#load(Source, String)::: directory code store load:::if->belowThreshold->return->file->getCacheFile->try->return->AccessController->new->PrivilegedExceptionAction<StoredScript>->doPrivileged->catch->getLogger->e->getException->warning->return->finally
CodeStore.DirectoryCodeStore#store(String, Source, StoredScript)::: directory code store store:::if->belowThreshold->return->file->getCacheFile->try->return->AccessController->new->PrivilegedExceptionAction<StoredScript>->doPrivileged->catch->getLogger->e->getException->warning->return->finally
CodeStore.DirectoryCodeStore#getCacheFile(Source, String)::: directory code store get cache file:::return->source->getDigest->new->File
CodeStore.DirectoryCodeStore#belowThreshold(Source)::: directory code store below threshold:::if->source->getLength->getLogger->info->return->return
CommandExecutor.RedirectInfo#check(String, Iterator, String):::check - tests to see if the current token contains a redirect:::for->i->return
CommandExecutor.RedirectInfo#apply(ProcessBuilder):::apply - apply the redirects to the current ProcessBuilder.:::if->outputFile->outputRedirect->file->errorFile->errorRedirect->file->if->outputFile->equals->pb->redirectInput->pb->redirectOutput->pb->redirectError->pb->redirectErrorStream
CommandExecutor.Piper#start():::start - start the Piper in a new daemon thread:::thread->setDaemon->thread->start->return
CommandExecutor.Piper#run():::run - thread action:::try->b->new->byteArr->read->while->input->read->output->write->catch->throw->new->RuntimeException->finally->try->input->close->catch->finally->try->output->close->catch->finally
CommandExecutor.Piper#join()::: piper join:::thread->join
CommandExecutor#envVarValue(String, String):::envVarValue - return the value of the environment variable key, or deflt if not found.:::return->environment->getOrDefault
CommandExecutor#envVarLongValue(String):::envVarLongValue - return the value of the environment variable key as a long value.:::try->return->Long->envVarValue->parseLong->catch->return->finally
CommandExecutor#envVarBooleanValue(String):::envVarBooleanValue - return the value of the environment variable key as a boolean value:::return->envVarLongValue
CommandExecutor#stripQuotes(String):::stripQuotes - strip quotes from token if present:::if->token->startsWith->token->endsWith->token->startsWith->token->endsWith->token->token->length->substring->return
CommandExecutor#resolvePath(String, String):::resolvePath - resolves a path against a current working directory.:::return->Paths->sanitizePath->get->resolve->normalize
CommandExecutor#builtIn(List, String):::builtIn - checks to see if the command is a builtin and performs appropriate action.:::switch->cmd->get->cygpath->cwd->startsWith->newCWD->cmd->size->cmd->get->cwdPath->resolvePath->file->cwdPath->toFile->if->file->exists->file->toString->reportError->return->else->if->file->isDirectory->file->toString->reportError->return->scwd->cwdPath->toString->if->scwd->length->Character->scwd->charAt->isLetter->scwd->charAt->Character->scwd->charAt->toLowerCase->scwd->substring->environment->put->return->if->cmd->size->key->cmd->get->value->cmd->get->environment->put->return->if->cmd->size->key->cmd->get->environment->remove->return->return
CommandExecutor#preprocessCommand(List, String, RedirectInfo):::preprocessCommand - scan the command for redirects, and sanitize the executable path:::command->new->ArrayList<>->iterator->tokens->iterator->while->iterator->hasNext->token->iterator->next->if->redirectInfo->check->continue->command->stripQuotes->add->if->command->size->command->command->get->sanitizePath->set->return
CommandExecutor#sanitizePath(String):::Sanitize a path in case the underlying platform is Cygwin:::if->d->startsWith->return->pd->d->CYGDRIVE->length->substring->if->pd->length->pd->charAt->return->pd->charAt->pd->substring->else->if->pd->length->return->pd->charAt->return
CommandExecutor#createProcessBuilder(List, String, RedirectInfo):::createProcessBuilder - create a ProcessBuilder for the command.:::pb->new->ProcessBuilder->pb->sanitizePath->new->File->directory->processEnvironment->pb->environment->processEnvironment->clear->processEnvironment->putAll->redirectInfo->apply->processBuilders->add
CommandExecutor#command(List, boolean):::command - process the command:::if->envVarBooleanValue->String->join->println->cwd->envVarValue->redirectInfo->new->RedirectInfo->command->preprocessCommand->if->command->isEmpty->builtIn->return->createProcessBuilder->if->return->firstProcessBuilder->processBuilders->get->lastProcessBuilder->processBuilders->processBuilders->size->get->inputIsPipe->firstProcessBuilder->redirectInput->outputIsPipe->lastProcessBuilder->redirectOutput->errorIsPipe->lastProcessBuilder->redirectError->inheritIO->envVarBooleanValue->if->firstProcessBuilder->redirectInput->if->lastProcessBuilder->redirectOutput->if->lastProcessBuilder->redirectError->processes->new->ArrayList<>->foreach->try->processes->pb->start->add->catch->String->pb->command->join->reportError->return->finally->processBuilders->clear->firstProcess->processes->get->lastProcess->processes->processes->size->get->byteOutputStream->byteErrorStream->piperThreads->new->ArrayList<>->if->if->piperThreads->firstProcess->getOutputStream->new->Piper->start->add->else->piperThreads->inputString->getBytes->new->ByteArrayInputStream->firstProcess->getOutputStream->new->Piper->start->add->if->if->piperThreads->lastProcess->getInputStream->new->Piper->start->add->else->new->ByteArrayOutputStream->piperThreads->lastProcess->getInputStream->new->Piper->start->add->if->if->piperThreads->lastProcess->getErrorStream->new->Piper->start->add->else->new->ByteArrayOutputStream->piperThreads->lastProcess->getErrorStream->new->Piper->start->add->for->i->n->processes->size->try->timeout->envVarLongValue->if->if->lastProcess->waitFor->lastProcess->exitValue->else->Long->toString->reportError->else->lastProcess->waitFor->foreach->piper->join->byteOutputStream->toString->byteErrorStream->toString->catch->processes->stream->if->p->isAlive->p->destroy->p->exitValue->forEach->finally->if->envVarBooleanValue->throw->ScriptRuntime->safeToString->rangeError
CommandExecutor#createTokenizer(String):::createTokenizer - build up StreamTokenizer for the command script:::tokenizer->new->StringReader->new->StreamTokenizer->tokenizer->resetSyntax->tokenizer->wordChars->tokenizer->whitespaceChars->tokenizer->commentChar->tokenizer->quoteChar->tokenizer->quoteChar->tokenizer->eolIsSignificant->tokenizer->ordinaryChar->tokenizer->ordinaryChar->return
CommandExecutor#process(String):::process - process a command string:::tokenizer->createTokenizer->command->new->ArrayList<>->sb->new->StringBuilder->try->while->tokenizer->nextToken->token->if->if->sb->length->command->sb->append->toString->add->sb->setLength->command->if->return->command->clear->else->if->token->endsWith->sb->token->token->length->substring->append->append->else->if->sb->length->if->sb->append->sb->append->sb->append->sb->toString->sb->setLength->command->add->else->command->sb->append->toString->add->sb->setLength->catch->finally->if->sb->length->command->sb->toString->add->command
CommandExecutor#process(List):::process - process a command array of strings:::command->new->ArrayList<>->iterator->tokens->iterator->while->iterator->hasNext->token->iterator->next->if->continue->switch->command->command->clear->continue->command->command->clear->continue->command->add->command
CommandExecutor#reportError(String, String)::: command executor report error:::ECMAErrors->getMessage
CommandExecutor#getOutputString()::: command executor get output string:::return
CommandExecutor#getErrorString()::: command executor get error string:::return
CommandExecutor#getExitCode()::: command executor get exit code:::return
CommandExecutor#setEnvironment(Map)::: command executor set environment:::
CommandExecutor#setInputStream(InputStream)::: command executor set input stream:::
CommandExecutor#setInputString(String)::: command executor set input string:::
CommandExecutor#setOutputStream(OutputStream)::: command executor set output stream:::
CommandExecutor#setErrorStream(OutputStream)::: command executor set error stream:::
CompiledFunction#createBuiltInConstructor(MethodHandle, Specialization)::: compiled function create built in constructor:::return->MH->insertArguments->MH->insertArguments->createConstructorFromInvoker->new->CompiledFunction
CompiledFunction#createBuiltInConstructor(MethodHandle)::: compiled function create built in constructor:::return->MH->insertArguments->MH->insertArguments->createConstructorFromInvoker->new->CompiledFunction
CompiledFunction#isSpecialization()::: compiled function is specialization:::return
CompiledFunction#hasLinkLogic()::: compiled function has link logic:::return->getLinkLogicClass
CompiledFunction#getLinkLogicClass()::: compiled function get link logic class:::if->isSpecialization->linkLogicClass->specialization->getLinkLogicClass->return->return
CompiledFunction#convertsNumericArgs()::: compiled function converts numeric args:::return->isSpecialization->specialization->convertsNumericArgs
CompiledFunction#getFlags()::: compiled function get flags:::return
CompiledFunction#isOptimistic():::An optimistic specialization is one that can throw UnwarrantedOptimismException:::return->isSpecialization->specialization->isOptimistic
CompiledFunction#isApplyToCall()::: compiled function is apply to call:::return
CompiledFunction#isVarArg()::: compiled function is var arg:::return->invoker->type->isVarArgsType
CompiledFunction#toString()::: compiled function to string:::sb->new->StringBuilder->linkLogicClass->getLinkLogicClass->sb->append->invoker->type->append->append->append->append->weight->append->append->linkLogicClass->getSimpleName->append->return->sb->toString
CompiledFunction#needsCallee()::: compiled function needs callee:::return->ScriptFunctionData->needsCallee
CompiledFunction#createComposableInvoker():::Returns an invoker method handle for this function:::return->createComposableInvoker
CompiledFunction#getConstructor():::Returns an invoker method handle for this function when invoked as a constructor:::if->createInvokerForPessimisticCaller->createConstructorFromInvoker->return
CompiledFunction#createInvokerForPessimisticCaller():::Creates a version of the invoker intended for a pessimistic caller (return type is Object, no caller optimistic program point available).:::return->createInvoker
CompiledFunction#createConstructorFromInvoker(MethodHandle):::Compose a constructor from an invoker.:::needsCallee->ScriptFunctionData->needsCallee->swapped->swapCalleeAndThis->returnsObject->MH->swapped->type->changeReturnType->asType->ctorType->returnsObject->type->ctorArgs->ctorType->dropParameterTypes->parameterArray->filtered->MH->MH->dropArguments->foldArguments->if->return->MH->foldArguments->return->MH->filterArguments
CompiledFunction#swapCalleeAndThis(MethodHandle):::Permutes the parameters in the method handle from (callee, this, ...) to (this, callee, ...):::type->mh->type->newType->type->changeParameterType->changeParameterType->reorder->type->parameterCount->new->intArr->for->i->return->MethodHandles->permuteArguments
CompiledFunction#createComposableConstructor():::Returns an invoker method handle for this function when invoked as a constructor:::return->createComposableInvoker
CompiledFunction#hasConstructor()::: compiled function has constructor:::return
CompiledFunction#type()::: compiled function type:::return->invoker->type
CompiledFunction#weight()::: compiled function weight:::return->type->weight
CompiledFunction#weight(MethodType)::: compiled function weight:::if->isVarArgsType->return->weight->Type->type->returnType->typeFor->getWeight->for->i->type->parameterCount->type->parameterCount->return
CompiledFunction#isVarArgsType(MethodType)::: compiled function is var args type:::return->type->type->parameterCount->parameterType
CompiledFunction#moreGenericThan(MethodType, MethodType)::: compiled function more generic than:::return->weight->weight
CompiledFunction#betterThanFinal(CompiledFunction, MethodType)::: compiled function better than final:::if->return->return->betterThanFinal
CompiledFunction#betterThanFinal(CompiledFunction, CompiledFunction, MethodType)::: compiled function better than final:::thisMethodType->cf->type->otherMethodType->other->type->thisParamCount->getParamCount->otherParamCount->getParamCount->callSiteRawParamCount->getParamCount->csVarArg->callSiteParamCount->thisDiscardsParams->Math->max->otherDiscardsParams->Math->max->if->return->if->return->thisVarArg->otherVarArg->if->thisType->toTypeWithoutCallee->otherType->toTypeWithoutCallee->callSiteType->toTypeWithoutCallee->narrowWeightDelta->widenWeightDelta->minParamsCount->Math->Math->min->min->convertsNumericArgs->cf->convertsNumericArgs->for->i->if->for->i->if->for->i->if->return->if->return->if->return->if->return->if->return->if->return->if->if->return->else->if->return->fnParamDelta->if->return->if->return->callSiteRetWeight->Type->callSiteMethodType->returnType->typeFor->getWeight->thisRetWeightDelta->Type->thisMethodType->returnType->typeFor->getWeight->otherRetWeightDelta->Type->otherMethodType->returnType->typeFor->getWeight->widenRetDelta->Math->max->Math->max->if->return->if->return->narrowRetDelta->Math->max->Math->max->if->return->if->return->if->cf->isSpecialization->other->isSpecialization->return->cf->isSpecialization->if->cf->isSpecialization->other->isSpecialization->return->cf->getLinkLogicClass->throw->new->AssertionError
CompiledFunction#toTypeWithoutCallee(MethodType, int)::: compiled function to type without callee:::paramCount->type->parameterCount->t->new->TypeArr->for->i->return
CompiledFunction#getParamType(int, Type[], boolean)::: compiled function get param type:::fixParamCount->if->return->return->getElementType
CompiledFunction#matchesCallSite(MethodType, boolean)::: compiled function matches call site:::if->other->equals->return->type->type->fnParamCount->getParamCount->isVarArg->if->return->csParamCount->getParamCount->csIsVarArg->if->isApplyToCall->return->thisThisIndex->needsCallee->fnParamCountNoCallee->minParams->Math->min->for->i->for->i->return
CompiledFunction#getParamCount(MethodType)::: compiled function get param count:::paramCount->type->parameterCount->return->type->parameterType->isArray
CompiledFunction#canBeDeoptimized()::: compiled function can be deoptimized:::return
CompiledFunction#createComposableInvoker(boolean)::: compiled function create composable invoker:::handle->getInvokerOrConstructor->if->canBeDeoptimized->return->cs->handle->type->new->MutableCallSite->relinkComposableInvoker->return->cs->dynamicInvoker
CompiledFunction.HandleAndAssumptions#createInvocation()::: handle and assumptions create invocation:::return->new->GuardedInvocation
CompiledFunction#getValidOptimisticInvocation(Supplier):::Returns a pair of an invocation created with a passed-in supplier and a non-invalidated switch point for optimistic assumptions (or null for the switch point if the function can not be deoptimized):::for
CompiledFunction#relinkComposableInvoker(CallSite, CompiledFunction, boolean)::: compiled function relink composable invoker:::handleAndAssumptions->inv->new->Supplier<MethodHandle>->getValidOptimisticInvocation->handle->assumptions->target->if->else->relink->MethodHandles->insertArguments->assumptions->MethodHandles->cs->dynamicInvoker->foldArguments->guardWithTest->cs->target->cs->type->asType->setTarget
CompiledFunction#getInvokerOrConstructor(boolean)::: compiled function get invoker or constructor:::return->getConstructor->createInvokerForPessimisticCaller
CompiledFunction#createFunctionInvocation(Class, int):::Returns a guarded invocation for this function when not invoked as a constructor:::return->new->Supplier<MethodHandle>->getValidOptimisticInvocation->createInvocation
CompiledFunction#createConstructorInvocation():::Returns a guarded invocation for this function when invoked as a constructor:::return->new->Supplier<MethodHandle>->getValidOptimisticInvocation->createInvocation
CompiledFunction#createInvoker(Class, int)::: compiled function create invoker:::isOptimistic->canBeDeoptimized->handleRewriteException->createRewriteExceptionHandler->inv->if->isValid->OptimisticReturnFilters->filterOptimisticReturnValue->changeReturnType->if->callSiteReturnType->isPrimitive->OptimisticReturnFilters->filterOptimisticReturnValue->else->if->changeReturnType->if->typedHandleRewriteException->inv->type->returnType->changeReturnType->return->MH->catchException->return
CompiledFunction#createRewriteExceptionHandler()::: compiled function create rewrite exception handler:::return->MH->MH->insertArguments->foldArguments
CompiledFunction#changeReturnType(MethodHandle, Class)::: compiled function change return type:::return->Bootstrap->getLinkerServices->mh->type->changeReturnType->asType
CompiledFunction#handleRewriteException(CompiledFunction, OptimismInfo, RewriteException)::: compiled function handle rewrite exception:::return->function->handleRewriteException
CompiledFunction#toStringInvalidations(Map):::Debug function for printing out all invalidated program points and their invalidation mapping to next type:::if->return->Collections->emptyList->list->new->ArrayList<>->for->iter->ipp->entrySet->iterator->iter->hasNext->return
CompiledFunction#logRecompile(String, FunctionNode, MethodType, Map)::: compiled function log recompile:::if->log->isEnabled->log->DebugLogger->fn->getName->quote->info->log->indent->foreach->toStringInvalidations->log->fine->log->unindent
CompiledFunction#handleRewriteException(OptimismInfo, RewriteException):::Handles a RewriteException raised during the execution of this function by recompiling (if needed) the function with an optimistic assumption invalidated at the program point indicated by the exception, and then executing a rest-of method to complete the execution with the deoptimized version.:::if->log->isEnabled->log->re->getReturnValueNonDestructive->new->RecompilationEvent->re->getMessageShort->info->log->indent->type->type->ct->type->parameterType->type->insertParameterTypes->currentOptInfo->shouldRecompile->currentOptInfo->requestRecompile->effectiveOptInfo->fn->effectiveOptInfo->reparse->cached->fn->isCached->compiler->effectiveOptInfo->getCompiler->if->logRecompile->return->compiler->compile->restOfHandle->logRecompile->compiler->compile->log->fine->log->info->logRecompile->normalFn->compiler->compile->if->usePersistentCodeCache->data->functionNodeId->data->getFunctionNodeId->typeMap->data->typeMap->paramTypes->typeMap->getParameterTypes->cacheKey->CodeStore->getCacheKey->compiler->persistClassInfo->canBeDeoptimized->normalFn->canBeDeoptimized->if->log->isEnabled->log->unindent->log->info->log->fn->getName->Debug->id->info->log->finest->newInvoker->lookup->newInvoker->type->newInvoker->type->returnType->changeReturnType->asType->log->info->restOf->compiler->compile->restOfHandle->if->effectiveOptInfo->newOptimisticAssumptions->else->notifyAll->return
CompiledFunction#restOfHandle(OptimismInfo, FunctionNode, boolean)::: compiled function rest of handle:::restOf->restOfFunction->getCompileUnit->getCode->MH->restOfFunction->getReturnType->getTypeClass->type->lookupCodeMethod->changeReturnType->if->return->return->MH->createRewriteExceptionHandler->catchException
CompiledFunction.OptimismInfo#newOptimisticAssumptions()::: optimism info new optimistic assumptions:::new->SwitchPoint
CompiledFunction.OptimismInfo#requestRecompile(RewriteException)::: optimism info request recompile:::retType->e->getReturnType->previousFailedType->invalidatedProgramPoints->e->getProgramPoint->put->if->previousFailedType->narrowerThan->stack->e->getStackTrace->functionId->data->getName->getClassName->getMethodName->log->e->getProgramPoint->info->return->SwitchPoint->new->SwitchPointArr->invalidateAll->return
CompiledFunction.OptimismInfo#getCompiler(FunctionNode, MethodType, RewriteException)::: optimism info get compiler:::return->data->e->getRuntimeScope->getEntryPoints->getCompiler
CompiledFunction.OptimismInfo#getEntryPoints(RewriteException)::: optimism info get entry points:::prevEntryPoints->e->getPreviousContinuationEntryPoints->entryPoints->if->new->intArr->else->l->new->intArr->System->arraycopy->e->getProgramPoint->return
CompiledFunction.OptimismInfo#reparse()::: optimism info reparse:::return->data->reparse
CompiledFunction#newFilter(Object, Object)::: compiled function new filter:::return->JSType->isPrimitive
CompiledFunction#findOwnMH(String, Class, Class...)::: compiled function find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
ConsString#toString()::: cons string to string:::return->flattened
ConsString#length()::: cons string length:::return
ConsString#charAt(int)::: cons string char at:::return->flattened->charAt
ConsString#subSequence(int, int)::: cons string sub sequence:::return->flattened->subSequence
ConsString#getComponents():::Returns the components of this ConsString as a CharSequence array with two elements:::return->new->CharSequenceArr
ConsString#flattened(boolean)::: cons string flattened:::if->flatten->return
ConsString#flatten(boolean)::: cons string flatten:::chars->new->charArr->pos->stack->new->ArrayDeque<>->stack->addFirst->cs->do->if->cons->if->cons->flattened->else->stack->addFirst->else->str->str->length->str->str->length->getChars->stack->isEmpty->stack->pollFirst->while->new->String
Context#getNamedInstalledScriptCount()::: context get named installed script count:::return->NAMED_INSTALLED_SCRIPT_COUNT->sum
Context#getAnonymousInstalledScriptCount()::: context get anonymous installed script count:::return->ANONYMOUS_INSTALLED_SCRIPT_COUNT->sum
Context.ContextCodeInstaller#getContext()::: context code installer get context:::return
Context.ContextCodeInstaller#initialize(Collection>, Source, Object[])::: context code installer initialize:::try->AccessController->new->PrivilegedExceptionAction<Void>->doPrivileged->catch->throw->new->RuntimeException->finally
Context.ContextCodeInstaller#verify(byte[])::: context code installer verify:::context->verify
Context.ContextCodeInstaller#getUniqueScriptId()::: context code installer get unique script id:::return->context->getUniqueScriptId
Context.ContextCodeInstaller#storeScript(String, Source, String, Map, Map, Object[], int)::: context code installer store script:::if->store
Context.ContextCodeInstaller#loadScript(Source, String)::: context code installer load script:::if->return->load->return
Context.ContextCodeInstaller#isCompatibleWith(CodeInstaller)::: context code installer is compatible with:::if->cci->return->return
Context.NamedContextCodeInstaller#install(String, byte[])::: named context code installer install:::NAMED_INSTALLED_SCRIPT_COUNT->increment->return->loader->Compiler->binaryName->installClass
Context.NamedContextCodeInstaller#getOnDemandCompilationInstaller()::: named context code installer get on demand compilation installer:::if->return->return->context->createNewLoader->new->NamedContextCodeInstaller
Context.NamedContextCodeInstaller#getMultiClassCodeInstaller()::: named context code installer get multi class code installer:::return
Context.AnonymousContextCodeInstaller#install(String, byte[])::: anonymous context code installer install:::ANONYMOUS_INSTALLED_SCRIPT_COUNT->increment->return->UNSAFE->defineAnonymousClass
Context.AnonymousContextCodeInstaller#getOnDemandCompilationInstaller()::: anonymous context code installer get on demand compilation installer:::return
Context.AnonymousContextCodeInstaller#getMultiClassCodeInstaller()::: anonymous context code installer get multi class code installer:::return->context->createNewLoader->new->NamedContextCodeInstaller
Context.AnonymousContextCodeInstaller#getAnonymousHostClassBytes()::: anonymous context code installer get anonymous host class bytes:::cw->new->ClassWriter->cw->ANONYMOUS_HOST_CLASS_NAME->replace->visit->cw->visitEnd->return->cw->toByteArray
Context#getGlobal():::Get the current global scope:::return->currentGlobal->get
Context#setGlobal(ScriptObject):::Set the current global scope:::if->throw->new->IllegalArgumentException->setGlobal
Context#setGlobal(Global):::Set the current global scope:::if->globalConstants->getContext->getGlobalConstants->if->globalConstants->invalidateAll->currentGlobal->set
Context#getContext():::Get context of the current global:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return->getContextTrusted
Context#getCurrentErr():::Get current context's error writer:::global->getGlobal->return->global->getContext->getErr->new->PrintWriter
Context#err(String):::Output text to this Context's error stream:::err
Context#err(String, boolean):::Output text to this Context's error stream, optionally with a newline afterwards:::err->Context->getCurrentErr->if->if->err->println->else->err->print
Context#getAppLoader()::: context get app loader:::return
Context#getStructLoader()::: context get struct loader:::return
Context#createNoPermAccCtxt()::: context create no perm acc ctxt:::return->new->ProtectionDomainArr->new->Permissions->new->ProtectionDomain->new->AccessControlContext
Context#createPermAccCtxt(String)::: context create perm acc ctxt:::perms->new->Permissions->perms->new->RuntimePermission->add->return->new->ProtectionDomainArr->new->ProtectionDomain->new->AccessControlContext
Context.ThrowErrorManager#error(String)::: throw error manager error:::throw->new->ParserException
Context.ThrowErrorManager#error(ParserException)::: throw error manager error:::throw
Context#getClassFilter():::Get the class filter for this context:::return
Context#getGlobalConstants():::Returns the factory for constant method handles for global properties:::return->globalConstantsRef->get
Context#getErrorManager():::Get the error manager for this context:::return
Context#getEnv():::Get the script environment for this context:::return
Context#getOut():::Get the output stream for this context:::return->env->getOut
Context#getErr():::Get the error stream for this context:::return->env->getErr
Context#useDualFields():::Should scripts compiled by this context use dual field representation?:::return
Context#getGlobalMap():::Get the PropertyMap of the current global scope:::return->Context->getGlobal->getMap
Context#compileScript(Source, ScriptObject):::Compile a top level script.:::return->compileScript
Context.MultiGlobalCompiledScript#getFunction(Global):::Obtain script function object for a specific global scope object.:::
Context#compileScript(Source):::Compile a top level script.:::clazz->compile->createProgramFunctionHandle->getCreateProgramFunctionHandle->return->new->MultiGlobalCompiledScript
Context#eval(ScriptObject, String, Object, Object):::Entry point for eval:::return->eval
Context#eval(ScriptObject, String, Object, Object, boolean, boolean):::Entry point for eval:::file->location->toString->source->sourceFor->directEval->global->Context->getGlobal->scope->strictFlag->clazz->try->new->ThrowErrorManager->compile->catch->e->throwAsEcmaException->return->finally->if->try->clazz->STRICT_MODE->symbolName->getField->getBoolean->catch->finally->if->newScope->func->getProgramFunction->evalThis->if->else->return->ScriptRuntime->apply
Context#newScope(ScriptObject)::: context new scope:::return->PropertyMap->newMap->new->Scope
Context#loadInternal(String, String, String)::: context load internal:::if->srcStr->startsWith->resource->srcStr->prefix->length->substring->return->AccessController->new->PrivilegedAction<Source>->doPrivileged->return
Context#load(Object, Object):::Implementation of load Nashorn extension:::src->from->toString->source->if->srcStr->if->srcStr->startsWith->url->srcStr->LOAD_CLASSPATH->length->substring->getResourceURL->url->toString->sourceFor->else->file->new->File->if->srcStr->indexOf->if->loadInternal->loadInternal->url->try->new->URL->catch->file->toURI->toURL->finally->url->toString->sourceFor->else->if->file->isFile->sourceFor->else->if->isFile->file->file->getName->sourceFor->else->if->url->url->toString->sourceFor->else->if->sobj->if->sobj->has->sobj->has->script->JSType->sobj->get->toString->name->JSType->sobj->get->toString->sourceFor->else->if->map->if->map->containsKey->map->containsKey->script->JSType->map->get->toString->name->JSType->map->get->toString->sourceFor->if->if->isScope->sobj->return->evaluateSource->else->if->global->getGlobal->return->evaluateSource->else->global->getGlobal->evalScope->newScope->withObj->ScriptRuntime->openWith->return->evaluateSource->throw->ScriptRuntime->safeToString->typeError
Context#loadWithNewGlobal(Object, Object...):::Implementation of loadWithNewGlobal Nashorn extension:::oldGlobal->getGlobal->newGlobal->AccessController->new->PrivilegedAction<Global>->doPrivileged->initGlobal->setGlobal->wrapped->ScriptObjectMirror->wrapArray->newGlobal->newGlobal->wrapAsObject->put->try->return->ScriptObjectMirror->ScriptObjectMirror->load->wrap->unwrap->catch->finally->setGlobal
Context#forStructureClass(String):::Load or get a structure class:::if->System->getSecurityManager->StructureLoader->isStructureClass->throw->new->ClassNotFoundException->return->structureClasses->try->return->Class->forName->catch->throw->new->AssertionError->finally->computeIfAbsent
Context#isStructureClass(String):::Is className the name of a structure class?:::return->StructureLoader->isStructureClass
Context#checkPackageAccess(Class):::Checks that the given Class can be accessed from no permissions context.:::sm->System->getSecurityManager->if->bottomClazz->while->bottomClazz->isArray->bottomClazz->getComponentType->bottomClazz->getName->checkPackageAccess
Context#checkPackageAccess(String):::Checks that the given package name can be accessed from no permissions context.:::sm->System->getSecurityManager->if->pkgName->endsWith->checkPackageAccess
Context#checkPackageAccess(SecurityManager, String):::Checks that the given package can be accessed from no permissions context.:::Objects->requireNonNull->index->fullName->lastIndexOf->if->pkgName->fullName->substring->AccessController->new->PrivilegedAction<Void>->doPrivileged
Context#isAccessiblePackage(Class):::Checks that the given Class can be accessed from no permissions context.:::try->checkPackageAccess->return->catch->return->finally
Context#isAccessibleClass(Class):::Checks that the given Class is public and it can be accessed from no permissions context.:::return->Modifier->clazz->getModifiers->isPublic->Context->isAccessiblePackage
Context#findClass(String):::Lookup a Java class:::if->fullName->indexOf->fullName->indexOf->throw->new->ClassNotFoundException->if->classFilter->exposeToScripts->throw->new->ClassNotFoundException->sm->System->getSecurityManager->if->checkPackageAccess->if->return->Class->forName->else->cl->Class->forName->if->cl->getClassLoader->return->else->throw->new->ClassNotFoundException
Context#printStackTrace(Throwable):::Hook to print stack trace for a Throwable that occurred during execution:::if->t->Context->getCurrentErr->printStackTrace
Context#verify(byte[]):::Verify generated bytecode before emission:::if->if->System->getSecurityManager->CheckClassAdapter->new->ClassReader->new->PrintWriter->verify
Context#createGlobal():::Create and initialize a new global scope object.:::return->newGlobal->initGlobal
Context#newGlobal():::Create a new uninitialized global scope object:::createOrInvalidateGlobalConstants->return->new->Global
Context#createOrInvalidateGlobalConstants()::: context create or invalidate global constants:::for
Context#initGlobal(Global, ScriptEngine):::Initialize given global scope object.:::if->oldGlobal->Context->getGlobal->try->Context->setGlobal->global->initBuiltinObjects->catch->finally->Context->setGlobal->return
Context#initGlobal(Global):::Initialize given global scope object.:::return->initGlobal
Context#getContextTrusted():::Return the current global's context:::return->getGlobal->getContext
Context#getDynamicLinker(Class):::Gets the Nashorn dynamic linker for the specified class:::return->fromClass
Context#getDynamicLinker():::Gets the Nashorn dynamic linker associated with the current context.:::return->getContextTrusted
Context#createModuleTrusted(ModuleDescriptor, ClassLoader):::Creates a module layer with one module that is defined to the given class loader.:::return->ModuleLayer->boot->createModuleTrusted
Context#createModuleTrusted(ModuleLayer, ModuleDescriptor, ClassLoader):::Creates a module layer with one module that is defined to the given class loader.:::mn->descriptor->name->mref->new->ModuleReference->finder->new->ModuleFinder->cf->parent->configuration->ModuleFinder->of->Set->of->resolve->pa->parent->defineModules->layer->AccessController->doPrivileged->m->layer->findModule->get->return
Context#getContextTrustedOrNull()::: context get context trusted or null:::global->Context->getGlobal->return->getContext
Context#getContext(Global)::: context get context:::return->getContext
Context#fromClass(Class):::Try to infer Context instance from the Class:::loader->try->clazz->getClassLoader->catch->finally->if->return->getContext->return->Context->getContextTrusted
Context#getResourceURL(String)::: context get resource l:::if->return->appLoader->getResource->return->ClassLoader->getSystemResource
Context#evaluateSource(Source, ScriptObject, ScriptObject)::: context evaluate source:::script->try->new->Context.ThrowErrorManager->compileScript->catch->e->throwAsEcmaException->finally->return->ScriptRuntime->apply
Context#getProgramFunction(Class, ScriptObject)::: context get program function:::if->return->return->getCreateProgramFunctionHandle->invokeCreateProgramFunctionHandle
Context#getCreateProgramFunctionHandle(Class)::: context get create program function handle:::try->return->LOOKUP->CREATE_PROGRAM_FUNCTION->symbolName->findStatic->catch->throw->script->getName->new->AssertionError->finally
Context#invokeCreateProgramFunctionHandle(MethodHandle, ScriptObject)::: context invoke create program function handle:::try->return->createProgramFunctionHandle->invokeExact->catch->throw->throw->new->AssertionError->finally
Context#compileScript(Source, ScriptObject, ErrorManager)::: context compile script:::return->compile->getProgramFunction
Context#compile(Source, ErrorManager, boolean, boolean)::: context compile:::errMan->reset->script->findCachedClass->if->log->getLogger->if->log->isEnabled->log->new->RuntimeEvent<>->fine->return->storedScript->functionNode->useCodeStore->cacheKey->CodeStore->getCacheKey->if->codeStore->load->if->if->source->dump->getLogger->new->Parser->parse->if->errMan->hasErrors->return->if->functionNode->getDebugFlag->getErr->new->ASTWriter->println->if->functionNode->getDebugFlag->getErr->new->PrintVisitor->println->if->return->url->source->getURL->cs->new->CodeSource->installer->if->env->source->getLength->useAnonymousClasses->loader->createNewLoader->new->NamedContextCodeInstaller->else->anonymousHostClasses->createNewLoader->installClass->getOrCreate->new->AnonymousContextCodeInstaller->if->phases->compiler->Compiler->functionNode->isStrict->forInitialCompilation->compiledFunction->compiler->compile->if->errMan->hasErrors->return->compiledFunction->getRootClass->compiler->persistClassInfo->else->Compiler->storedScript->getCompilationId->updateCompilationId->storedScript->installScript->cacheClass->return
Context#createNewLoader()::: context create new loader:::return->AccessController->new->PrivilegedAction<ScriptLoader>->doPrivileged
Context#getUniqueScriptId()::: context get unique script id:::return->uniqueScriptId->getAndIncrement
Context.ClassCache#cache(Source, Class)::: class cache cache:::if->log->isEnabled->log->info->new->ClassReference->put
Context.ClassCache#removeEldestEntry(Map.Entry)::: class cache remove eldest entry:::return->size
Context.ClassCache#get(Object)::: class cache get:::for->ref->queue->poll->ref->super->get->if->log->isEnabled->log->info->return
Context.ClassCache#initLogger(Context)::: class cache init logger:::return->context->getClass->getLogger
Context.ClassCache#getLogger()::: class cache get logger:::return
Context#findCachedClass(Source)::: context find cached class:::ref->classCache->get->return->ref->get
Context#cacheClass(Source, Class)::: context cache class:::if->classCache->cache
Context#initLoggers()::: context init loggers:::MethodHandleFactory->getFunctionality->initLogger
Context#getLogger(Class):::Get a logger, given a loggable class:::return->getLogger
Context#getLogger(Class, Consumer):::Get a logger, given a loggable class:::name->getLoggerName->logger->loggers->get->if->if->env->hasLogger->return->info->get->info->getLevel->info->isQuiet->new->DebugLogger->if->initHook->accept->loggers->put->return
Context#addLoggingToHandle(Class, MethodHandle, Supplier):::Given a Loggable class, weave debug info info a method handle for that logger:::return->addLoggingToHandle
Context#addLoggingToHandle(Class, Level, MethodHandle, int, boolean, Supplier):::Given a Loggable class, weave debug info info a method handle for that logger.:::log->getLogger->if->log->isEnabled->return->MethodHandleFactory->text->get->addDebugPrintout->return
Context#getLoggerName(Class)::: context get logger name:::current->while->log->current->getAnnotation->if->return->log->name->current->getSuperclass->return
Context#newBuiltinSwitchPoint(String):::Create a new builtin switchpoint and return it:::sp->new->BuiltinSwitchPoint->builtinSwitchPoints->put->return
Context#getBuiltinSwitchPoint(String):::Return the builtin switchpoint for a particular key name:::return->builtinSwitchPoints->get
Context#createModuleLoader(ClassLoader, String, String)::: context create module loader:::if->throw->new->IllegalArgumentException->paths->Stream->modulePath->split->of->Paths->get->map->new->PathArr->toArray->mf->ModuleFinder->of->mrefs->mf->findAll->if->mrefs->isEmpty->throw->new->RuntimeException->rootMods->if->addModules->equals->mrefs->stream->mr->descriptor->name->map->Collectors->toSet->collect->else->Stream->addModules->split->of->String->trim->map->Collectors->toSet->collect->boot->ModuleLayer->boot->conf->boot->configuration->ModuleFinder->of->resolve->firstMod->rootMods->iterator->next->return->boot->defineModulesWithOneLoader->findLoader
Debug#firstJSFrame(Throwable):::Return the topmost JavaScript frame in a stack trace:::foreach->t->getStackTrace->if->ECMAErrors->isScriptFrame->return->ste->toString->return
Debug#firstJSFrame():::Return the topmost JavaScript frame from the current continuation:::return->new->Throwable->firstJSFrame
Debug#scriptStack():::Return a formatted script stack trace string with frames information separated by '\n':::return->NashornException->new->Throwable->getScriptStackString
Debug#id(Object):::Return the system identity hashcode for an object as a human readable string:::return->String->System->identityHashCode->format
Debug#intId(Object):::Same as Debug#id but returns the identity hashcode as an integer:::return->System->identityHashCode
Debug#stackTraceElementAt(int):::Return a stack trace element description at a depth from where we are not:::return->new->Throwable->getStackTrace->toString
Debug#caller(int, int, String...):::Determine caller for tracing purposes.:::result->callers->Thread->currentThread->getStackTrace->c->for->i->return->result->isEmpty
Debug#dumpTokens(Source, Lexer, TokenStream):::Dump a token stream to stdout  TODO: most other bugging goes to stderr, change?:::type->k->do->while->stream->last->lexer->lexify->token->stream->get->Token->descType->Token->toString->println->while
DebuggerSupport#notifyInvoke(MethodHandle):::Hook that is called just before invoking method handle from ScriptFunctionData via invoke, constructor method calls.:::
DebuggerSupport#getSourceInfo(Class):::Return the script source info for the given script class.:::if->isAssignableFrom->try->sourceField->clazz->SOURCE->symbolName->getDeclaredField->sourceField->setAccessible->src->sourceField->get->return->src->getSourceInfo->catch->return->finally->return
DebuggerSupport#getGlobal():::Return the current context global.:::return->Context->getGlobal
DebuggerSupport#eval(ScriptObject, Object, String, boolean):::Call eval on the current global.:::global->Context->getGlobal->initialScope->callThis->context->global->getContext->try->return->context->eval->catch->return->finally
DebuggerSupport#valueInfos(Object, boolean):::This method returns a bulk description of an object's properties.:::return->new->HashSet<>->getDebuggerValueDescs
DebuggerSupport#valueInfo(String, Object, boolean):::This method returns a debugger description of the value.:::return->new->HashSet<>->valueInfo
DebuggerSupport#valueInfo(String, Object, boolean, Set):::This method returns a debugger description of the value.:::if->object->return->object->isEmpty->objectAsString->new->DebuggerValueDesc->return->valueAsString->new->DebuggerValueDesc
DebuggerSupport#getDebuggerValueDescs(ScriptObject, boolean, Set):::Generate the descriptions for an object's properties.:::if->duplicates->contains->return->duplicates->add->keys->object->getOwnKeys->descs->new->DebuggerValueDescArr->for->i->duplicates->remove->return
DebuggerSupport#objectAsString(ScriptObject, boolean, Set):::Generate a string representation of a Script object.:::sb->new->StringBuilder->if->ScriptObject->isArray->sb->append->length->object->getDouble->for->i->sb->append->else->sb->append->descs->getDebuggerValueDescs->if->for->i->sb->append->return->sb->toString
DebuggerSupport#valueAsString(Object):::This method returns a string representation of a value.:::type->JSType->of->switch->return->value->toString->return->value->toString->escape->return->JSType->doubleValue->toString->return->return->return->ScriptRuntime->safeToString->if->return->toSource->return->value->toString->return->value->toString
DebuggerSupport#escape(String):::Escape a string into a form that can be parsed by JavaScript.:::sb->new->StringBuilder->sb->append->foreach->value->toCharArray->switch->sb->append->break->sb->append->break->sb->append->break->sb->append->break->sb->append->break->sb->append->break->sb->append->break->sb->append->break->if->sb->append->hex->Integer->toHexString->for->i->hex->length->sb->append->else->sb->append->break->sb->append->return->sb->toString
DefaultPropertyAccess#getInt(Object, int)::: default property access get int:::return->JSType->get->toInt32
DefaultPropertyAccess#getInt(double, int)::: default property access get int:::return->JSType->toObject->getInt
DefaultPropertyAccess#getInt(int, int)::: default property access get int:::return->JSType->toObject->getInt
DefaultPropertyAccess#getDouble(Object, int)::: default property access get double:::return->JSType->get->toNumber
DefaultPropertyAccess#getDouble(double, int)::: default property access get double:::return->JSType->toObject->getDouble
DefaultPropertyAccess#getDouble(int, int)::: default property access get double:::return->JSType->toObject->getDouble
DefaultPropertyAccess#get(Object)::: default property access get:::
DefaultPropertyAccess#get(double)::: default property access get:::return->JSType->toObject->get
DefaultPropertyAccess#get(int)::: default property access get:::return->JSType->toObject->get
DefaultPropertyAccess#set(double, int, int)::: default property access set:::JSType->toObject->JSType->toObject->set
DefaultPropertyAccess#set(double, double, int)::: default property access set:::JSType->toObject->JSType->toObject->set
DefaultPropertyAccess#set(double, Object, int)::: default property access set:::JSType->toObject->JSType->toObject->set
DefaultPropertyAccess#set(int, int, int)::: default property access set:::JSType->toObject->JSType->toObject->set
DefaultPropertyAccess#set(int, double, int)::: default property access set:::JSType->toObject->JSType->toObject->set
DefaultPropertyAccess#set(int, Object, int)::: default property access set:::JSType->toObject->set
DefaultPropertyAccess#set(Object, int, int)::: default property access set:::JSType->toObject->set
DefaultPropertyAccess#set(Object, double, int)::: default property access set:::JSType->toObject->set
DefaultPropertyAccess#set(Object, Object, int)::: default property access set:::
DefaultPropertyAccess#has(Object)::: default property access has:::
DefaultPropertyAccess#has(int)::: default property access has:::return->JSType->toObject->has
DefaultPropertyAccess#has(double)::: default property access has:::return->JSType->toObject->has
DefaultPropertyAccess#hasOwnProperty(int)::: default property access has own property:::return->JSType->toObject->hasOwnProperty
DefaultPropertyAccess#hasOwnProperty(double)::: default property access has own property:::return->JSType->toObject->hasOwnProperty
DefaultPropertyAccess#hasOwnProperty(Object)::: default property access has own property:::
DefaultPropertyAccess#delete(int, boolean)::: default property access delete:::return->JSType->toObject->delete
DefaultPropertyAccess#delete(double, boolean)::: default property access delete:::return->JSType->toObject->delete
ECMAErrors#error(Object, Throwable)::: errors error:::return->new->ECMAException
ECMAErrors#asEcmaException(ParserException):::Error dispatch mechanism:::return->Context->getGlobal->asEcmaException
ECMAErrors#asEcmaException(Global, ParserException):::Error dispatch mechanism:::errorType->e->getErrorType->globalObj->msg->e->getMessage->switch->return->globalObj->newError->error->return->globalObj->newEvalError->error->return->globalObj->newRangeError->error->return->globalObj->newReferenceError->error->return->globalObj->newSyntaxError->error->return->globalObj->newTypeError->error->return->globalObj->newURIError->error->throw->e->getMessage->new->AssertionError
ECMAErrors#syntaxError(String, String...):::Create a syntax error (ECMA 15.11.6.4):::return->Context->getGlobal->syntaxError
ECMAErrors#syntaxError(Global, String, String...):::Create a syntax error (ECMA 15.11.6.4):::return->syntaxError
ECMAErrors#syntaxError(Throwable, String, String...):::Create a syntax error (ECMA 15.11.6.4):::return->Context->getGlobal->syntaxError
ECMAErrors#syntaxError(Global, Throwable, String, String...):::Create a syntax error (ECMA 15.11.6.4):::msg->getMessage->return->global->newSyntaxError->error
ECMAErrors#typeError(String, String...):::Create a type error (ECMA 15.11.6.5):::return->Context->getGlobal->typeError
ECMAErrors#typeError(Global, String, String...):::Create a type error (ECMA 15.11.6.5):::return->typeError
ECMAErrors#typeError(Throwable, String, String...):::Create a type error (ECMA 15.11.6.5):::return->Context->getGlobal->typeError
ECMAErrors#typeError(Global, Throwable, String, String...):::Create a type error (ECMA 15.11.6.5):::msg->getMessage->return->global->newTypeError->error
ECMAErrors#rangeError(String, String...):::Create a range error (ECMA 15.11.6.2):::return->Context->getGlobal->rangeError
ECMAErrors#rangeError(Global, String, String...):::Create a range error (ECMA 15.11.6.2):::return->rangeError
ECMAErrors#rangeError(Throwable, String, String...):::Create a range error (ECMA 15.11.6.2):::return->Context->getGlobal->rangeError
ECMAErrors#rangeError(Global, Throwable, String, String...):::Create a range error (ECMA 15.11.6.2):::msg->getMessage->return->global->newRangeError->error
ECMAErrors#referenceError(String, String...):::Create a reference error (ECMA 15.11.6.3):::return->Context->getGlobal->referenceError
ECMAErrors#referenceError(Global, String, String...):::Create a reference error (ECMA 15.11.6.3):::return->referenceError
ECMAErrors#referenceError(Throwable, String, String...):::Create a reference error (ECMA 15.11.6.3):::return->Context->getGlobal->referenceError
ECMAErrors#referenceError(Global, Throwable, String, String...):::Create a reference error (ECMA 15.11.6.3):::msg->getMessage->return->global->newReferenceError->error
ECMAErrors#uriError(String, String...):::Create a URI error (ECMA 15.11.6.6):::return->Context->getGlobal->uriError
ECMAErrors#uriError(Global, String, String...):::Create a URI error (ECMA 15.11.6.6):::return->uriError
ECMAErrors#uriError(Throwable, String, String...):::Create a URI error (ECMA 15.11.6.6):::return->Context->getGlobal->uriError
ECMAErrors#uriError(Global, Throwable, String, String...):::Create a URI error (ECMA 15.11.6.6):::msg->getMessage->return->global->newURIError->error
ECMAErrors#getMessage(String, String...):::Get the exception message by placing the args in the resource defined by the resource tag:::try->return->MESSAGES_BUNDLE->getString->new->MessageFormat->format->catch->throw->new->RuntimeException->finally
ECMAErrors#isScriptFrame(StackTraceElement):::Check if a stack trace element is in JavaScript:::className->frame->getClassName->if->className->startsWith->CompilerConstants->frame->getMethodName->isInternalMethodName->source->frame->getFileName->return->source->endsWith->return
ECMAException#create(Object, String, int, int):::Factory method to retrieve the underlying exception or create an exception:::if->exception->getException->if->ee->if->ee->getThrown->ee->setFileName->ee->setLineNumber->ee->setColumnNumber->return->return->new->ECMAException
ECMAException#getThrown():::Get the thrown object:::return
ECMAException#toString()::: exception to string:::sb->new->StringBuilder->fileName->getFileName->line->getLineNumber->column->getColumnNumber->if->sb->append->if->sb->append->sb->append->if->sb->append->sb->append->sb->append->else->sb->append->sb->getMessage->append->return->sb->toString
ECMAException#getException(ScriptObject):::Get the ECMAException, i.e:::if->errObj->hasOwnProperty->return->errObj->get->return
ECMAException#printStackTrace(ScriptObject):::Print the stack trace for a ScriptObject representing an error:::exception->getException->if->Context->getCurrentErr->printStackTrace->else->Context->err->return
ECMAException#getLineNumber(ScriptObject):::Get the line number for a ScriptObject representing an error:::e->getException->if->return->getLineNumber->else->if->return->getLineNumber->return
ECMAException#getColumnNumber(ScriptObject):::Get the column number for a ScriptObject representing an error:::e->getException->if->return->getColumnNumber->else->if->return->getColumnNumber->return
ECMAException#getFileName(ScriptObject):::Get the file name for a ScriptObject representing an error:::e->getException->if->return->getFileName->else->if->return->getFileName->return
ECMAException#safeToString(ScriptObject):::Stateless string conversion for an error object:::name->try->errObj->get->catch->finally->if->else->ScriptRuntime->safeToString->msg->try->errObj->get->catch->finally->if->else->ScriptRuntime->safeToString->if->isEmpty->return->if->isEmpty->return->return
ECMAException#asThrowable(Object)::: exception as throwable:::return
ECMAException#setExceptionToThrown()::: exception set exception to thrown:::if->sobj->if->sobj->has->sobj->addOwnProperty->else->sobj->set
ErrorManager#checkLimit():::Check to see if number of errors exceed limit.:::count->if->if->throw->Integer->toString->rangeError
ErrorManager#format(String, Source, int, int, long):::Format an error message to include source and line information.:::eoln->System->lineSeparator->position->Token->descPosition->sb->new->StringBuilder->sb->source->getName->append->append->append->append->append->append->append->append->sourceLine->source->getSourceLine->sb->append->append->for->i->sb->append->return->sb->toString
ErrorManager#error(ParserException)::: error manager error:::e->getMessage->error
ErrorManager#error(String):::Report an error message provided:::writer->println->writer->flush->checkLimit
ErrorManager#warning(ParserException):::Report a warning using information provided by the ParserException:::e->getMessage->warning
ErrorManager#warning(String):::Report a warning message provided:::writer->println->writer->flush->checkLimit
ErrorManager#hasErrors():::Test to see if errors have occurred.:::return
ErrorManager#getLimit():::Get the message limit:::return
ErrorManager#setLimit(int):::Set the message limit:::
ErrorManager#isWarningsAsErrors():::Check whether warnings should be treated like errors:::return
ErrorManager#setWarningsAsErrors(boolean):::Set warnings to be treated as errors:::
ErrorManager#getNumberOfErrors():::Get the number of errors:::return
ErrorManager#getNumberOfWarnings():::Get number of warnings:::return
ErrorManager#reset():::Clear warnings and error count.:::
FinalScriptFunctionData#getDocumentationKey()::: final script function data get documentation key:::return
FinalScriptFunctionData#setDocumentationKey(String)::: final script function data set documentation key:::
FinalScriptFunctionData#getDocumentation()::: final script function data get documentation:::doc->FunctionDocumentation->getDoc->return->super->getDocumentation
FinalScriptFunctionData#needsCallee()::: final script function data needs callee:::needsCallee->code->getFirst->needsCallee->return
FinalScriptFunctionData#allNeedCallee(boolean)::: final script function data all need callee:::foreach->if->inv->needsCallee->return->return
FinalScriptFunctionData#getBest(MethodType, ScriptObject, Collection, boolean)::: final script function data get best:::best->foreach->if->candidate->hasLinkLogic->continue->if->forbidden->contains->candidate->betterThanFinal->return
FinalScriptFunctionData#getGenericType()::: final script function data get generic type:::max->foreach->t->fn->type->if->ScriptFunctionData->isVarArg->return->MethodType->genericMethodType->paramCount->t->parameterCount->ScriptFunctionData->needsCallee->if->return->MethodType->genericMethodType
FinalScriptFunctionData#addInvoker(MethodHandle, Specialization)::: final script function data add invoker:::invoker->if->isConstructor->CompiledFunction->createBuiltInConstructor->else->new->CompiledFunction->code->add->return
FinalScriptFunctionData#addInvoker(MethodHandle)::: final script function data add invoker:::return->addInvoker
FinalScriptFunctionData#methodHandleArity(MethodHandle)::: final script function data method handle arity:::if->isVarArg->return->return->mh->type->parameterCount->needsCallee->isConstructor
FinalScriptFunctionData#isConstructor(MethodHandle)::: final script function data is constructor:::return->mh->type->parameterCount->mh->type->parameterType
FindProperty#replaceProperty(Property):::Return a copy of this FindProperty with a different property.:::return->new->FindProperty
FindProperty#getGetter(Class, int, LinkRequest):::Ask for a getter that returns the given type:::getter->if->isValid->property->getOptimisticGetter->else->property->getGetter->if->MH->UserAccessorProperty->getINVOKE_UA_GETTER->insertArguments->if->isValid->type->isPrimitive->MH->insertArguments->property->setType->return->insertAccessorsGetter->return
FindProperty#getSetter(Class, boolean, LinkRequest):::Ask for a setter that sets the given type:::setter->property->getOwner->getMap->getSetter->if->MH->UserAccessorProperty->getINVOKE_UA_SETTER->property->getKey->insertArguments->property->setType->return->insertAccessorsGetter->return
FindProperty#insertAccessorsGetter(UserAccessorProperty, LinkRequest, MethodHandle)::: find property insert accessors getter:::superGetter->uap->getAccessorsGetter->if->isSelf->ScriptObject->getProtoChainLength->addProtoFilter->if->request->getReceiver->wrapFilter->Global->request->getReceiver->getPrimitiveWrapFilter->MH->wrapFilter->wrapFilter->type->superGetter->type->parameterType->changeReturnType->asType->filterArguments->MH->superGetter->type->changeParameterType->asType->return->MH->foldArguments
FindProperty#getOwner():::Return the ScriptObject owning of the property:  this means the prototype.:::return
FindProperty#getSelf():::Return the ScriptObject where the search started:::return
FindProperty#getGetterReceiver():::Return the appropriate receiver for a getter.:::return->property->isAccessorProperty
FindProperty#getSetterReceiver():::Return the appropriate receiver for a setter.:::return->property->hasSetterFunction
FindProperty#getProperty():::Return the property that was found:::return
FindProperty#isInheritedOrdinaryProperty():::Check if the property found was inherited from a prototype and it is an ordinary property (one that has no accessor function).:::return->isSelf->getProperty->isAccessorProperty
FindProperty#isSelf():::Check if the property found was NOT inherited, i.e:::return
FindProperty#isScope():::Check if the property is in the scope:::return->prototype->isScope
FindProperty#getIntValue():::Get the property value from self as object.:::return->property->getGetterReceiver->getOwner->getIntValue
FindProperty#getDoubleValue():::Get the property value from self as object.:::return->property->getGetterReceiver->getOwner->getDoubleValue
FindProperty#getObjectValue():::Get the property value from self as object.:::return->property->getGetterReceiver->getOwner->getObjectValue
FindProperty#setValue(int, boolean):::Set the property value in self.:::property->getSetterReceiver->getOwner->setValue
FindProperty#setValue(double, boolean):::Set the property value in self.:::property->getSetterReceiver->getOwner->setValue
FindProperty#setValue(Object, boolean):::Set the property value in self.:::property->getSetterReceiver->getOwner->setValue
FindProperty#getProtoChainLength():::Get the number of objects in the prototype chain between the self and the owner objects.:::length->for->obj->obj->getProto->return
FindProperty#toString()::: find property to string:::return->property->getKey
FunctionDocumentation#getDoc(String)::: function documentation get doc:::try->return->FUNC_DOCS->getString->catch->return->finally
FunctionInitializer#getClassName():::Returns the name of the class implementing the function.:::return
FunctionInitializer#getMethodType():::Returns the type of the method implementing the function.:::return
FunctionInitializer#getFlags():::Returns the function flags.:::return
FunctionInitializer#getCode():::Returns the class implementing the function.:::return
FunctionInitializer#setCode(Class):::Set the class implementing the function:::if->throw->new->IllegalStateException
FunctionInitializer#getInvalidatedProgramPoints():::Returns the map of invalidated program points.:::return
FunctionInitializer#writeObject(ObjectOutputStream)::: function initializer write object:::out->defaultWriteObject->Type->writeTypeMap
FunctionInitializer#readObject(ObjectInputStream)::: function initializer read object:::in->defaultReadObject->Type->readTypeMap
GlobalConstants#getLogger()::: global constants get logger:::return
GlobalConstants#initLogger(Context)::: global constants init logger:::return
GlobalConstants.Access#hasBeenInvalidated()::: access has been invalidated:::return->sp->hasBeenInvalidated
GlobalConstants.Access#guardFailed()::: access guard failed:::return
GlobalConstants.Access#failGuard()::: access fail guard:::invalidateOnce
GlobalConstants.Access#newSwitchPoint()::: access new switch point:::new->SwitchPoint
GlobalConstants.Access#invalidate(int)::: access invalidate:::if->sp->hasBeenInvalidated->SwitchPoint->new->SwitchPointArr->invalidateAll
GlobalConstants.Access#invalidateUncounted():::Invalidate the access, but do not contribute to the invalidation count:::invalidate
GlobalConstants.Access#invalidateOnce():::Invalidate the access, and contribute 1 to the invalidation count:::invalidate
GlobalConstants.Access#invalidateForever():::Invalidate the access and make sure that we never try to turn this into a MethodHandle.constant getter again:::invalidate
GlobalConstants.Access#mayRetry():::Are we allowed to relink this as constant getter, even though it it has been reset:::return
GlobalConstants.Access#toString()::: access to string:::return->quote->Debug->id->sp->hasBeenInvalidated
GlobalConstants.Access#getName()::: access get name:::return
GlobalConstants.Access#getSwitchPoint()::: access get switch point:::return
GlobalConstants#invalidateAll():::To avoid an expensive global guard "is this the same global", similar to the receiver guard on the ScriptObject level, we invalidate all getters once when we switch globals:::if->invalidatedForever->get->log->info->synchronized->foreach->map->values->acc->invalidateUncounted
GlobalConstants#invalidateForever():::To avoid an expensive global guard "is this the same global", similar to the receiver guard on the ScriptObject level, we invalidate all getters when the second Global is created by the Context owning this instance:::if->invalidatedForever->compareAndSet->log->info->synchronized->foreach->map->values->acc->invalidateForever->map->clear
GlobalConstants#invalidateSwitchPoint(Object, Access):::Invalidate the switchpoint of an access - we have written to the property:::if->log->isEnabled->log->acc->getSwitchPoint->info->acc->invalidateOnce->if->acc->mayRetry->if->log->isEnabled->log->info->acc->newSwitchPoint->else->if->log->isEnabled->log->acc->getName->quote->info->return
GlobalConstants#getOrCreateSwitchPoint(String)::: global constants get or create switch point:::acc->map->get->if->return->sp->new->SwitchPoint->map->new->Access->put->return
GlobalConstants#delete(Object):::Called from script object on property deletion to erase a property that might be linked as MethodHandle.constant and force relink:::if->invalidatedForever->get->synchronized->acc->map->get->if->acc->invalidateForever
GlobalConstants#receiverGuard(Access, Object, Object):::Receiver guard is used if we extend the global constants to script objects in general:::id->if->acc->failGuard->return
GlobalConstants#isGlobalSetter(ScriptObject, FindProperty)::: global constants is global setter:::if->return->receiver->isScope->return->find->getOwner->isGlobal
GlobalConstants#findSetMethod(FindProperty, ScriptObject, GuardedInvocation, CallSiteDescriptor, LinkRequest):::Augment a setter with switchpoint for invalidating its getters, should the setter be called:::if->invalidatedForever->get->isGlobalSetter->return->name->NashornCallSiteDescriptor->getOperand->synchronized->acc->getOrCreateSwitchPoint->if->log->isEnabled->log->fine->if->acc->mayRetry->invalidatedForever->get->if->log->isEnabled->log->quote->DynamicLinker->getLinkedCallSiteLocation->fine->return->if->acc->hasBeenInvalidated->log->info->acc->newSwitchPoint->target->inv->getInvocation->receiverType->target->type->parameterType->boundInvalidator->MH->bindTo->invalidator->MH->boundInvalidator->type->changeParameterType->changeReturnType->asType->mh->MH->inv->getInvocation->MH->insertArguments->filterArguments->log->quote->acc->getSwitchPoint->info->return->inv->getGuard->acc->getSwitchPoint->inv->getException->new->GuardedInvocation
GlobalConstants#staticConstantGetter(Object):::Try to reuse constant method handles for getters:::return->MH->JSType->unboxConstant->dropArguments
GlobalConstants#constantGetter(Object)::: global constants constant getter:::mh->staticConstantGetter->if->log->isEnabled->return->MethodHandleFactory->addDebugPrintout->return
GlobalConstants#findGetMethod(FindProperty, ScriptObject, CallSiteDescriptor):::Try to turn a getter into a MethodHandle.constant, if possible:::if->invalidatedForever->get->NashornCallSiteDescriptor->isFastScope->find->getOwner->isGlobal->find->getProperty->return->isOptimistic->NashornCallSiteDescriptor->isOptimistic->programPoint->getProgramPoint->retType->desc->getMethodType->returnType->name->NashornCallSiteDescriptor->getOperand->synchronized->acc->getOrCreateSwitchPoint->log->fine->c->find->getObjectValue->if->log->isEnabled->log->fine->if->acc->hasBeenInvalidated->acc->guardFailed->invalidatedForever->get->if->log->isEnabled->log->quote->DynamicLinker->getLinkedCallSiteLocation->info->return->cmh->constantGetter->mh->guard->if->if->JSType->cmh->type->returnType->getAccessorTypeIndex->JSType->getAccessorTypeIndex->MH->cmh->type->changeReturnType->asType->else->MH->MH->methodHandle->insertArguments->dropArguments->else->Lookup->filterReturnType->if->find->getOwner->isGlobal->else->MH->insertArguments->if->log->isEnabled->log->quote->acc->getSwitchPoint->info->MethodHandleFactory->addDebugPrintout->return->acc->getSwitchPoint->new->GuardedInvocation
GlobalFunctions#parseInt(Object, Object, Object):::ECMA 15.1.2.2 parseInt implementation:::return->JSType->JSType->toString->trimLeft->JSType->toInt32->parseIntInternal
GlobalFunctions#parseInt(Object, Object, int):::ECMA 15.1.2.2 parseInt implementation specialized for int radix:::return->JSType->JSType->toString->trimLeft->parseIntInternal
GlobalFunctions#parseInt(Object, Object):::ECMA 15.1.2.2 parseInt implementation specialized for no radix argument:::return->JSType->JSType->toString->trimLeft->parseIntInternal
GlobalFunctions#parseIntInternal(String, int)::: global functions parse int internal:::length->str->length->radix->if->return->negative->idx->firstChar->str->charAt->if->if->else->if->return->stripPrefix->if->if->return->if->else->if->c1->str->charAt->c2->str->charAt->if->result->digit->entered->while->str->charAt->fastDigit->if->break->return
GlobalFunctions#parseFloat(Object, Object):::ECMA 15.1.2.3 parseFloat implementation:::str->JSType->JSType->toString->trimLeft->length->str->length->if->return->start->negative->ch->str->charAt->if->else->if->else->if->if->str->startsWith->return->if->return->str->charAt->if->if->str->substring->startsWith->return->dotSeen->exponentOk->exponentOffset->end->for->if->if->return->try->result->Double->str->substring->valueOf->return->catch->return->finally
GlobalFunctions#isNaN(Object, Object):::ECMA 15.1.2.4, isNaN implementation:::return->Double->JSType->toNumber->isNaN
GlobalFunctions#isFinite(Object, Object):::ECMA 15.1.2.5, isFinite implementation:::value->JSType->toNumber->return->Double->isInfinite->Double->isNaN
GlobalFunctions#encodeURI(Object, Object):::ECMA 15.1.3.3, encodeURI implementation:::return->URIUtils->JSType->toString->encodeURI
GlobalFunctions#encodeURIComponent(Object, Object):::ECMA 15.1.3.4, encodeURIComponent implementation:::return->URIUtils->JSType->toString->encodeURIComponent
GlobalFunctions#decodeURI(Object, Object):::ECMA 15.1.3.1, decodeURI implementation:::return->URIUtils->JSType->toString->decodeURI
GlobalFunctions#decodeURIComponent(Object, Object):::ECMA 15.1.3.2, decodeURIComponent implementation:::return->URIUtils->JSType->toString->decodeURIComponent
GlobalFunctions#escape(Object, Object):::ECMA B.2.1, escape implementation:::str->JSType->toString->length->str->length->if->return->sb->new->StringBuilder->for->k->return->sb->toString
GlobalFunctions#unescape(Object, Object):::ECMA B.2.2, unescape implementation:::str->JSType->toString->length->str->length->if->return->sb->new->StringBuilder->for->k->return->sb->toString
GlobalFunctions#anonymous(Object):::ECMA 15.3.4 Properties of the Function Prototype Object:::return
GlobalFunctions#fastDigit(int, int)::: global functions fast digit:::n->if->else->if->if->else->if->return
GlobalFunctions#findOwnMH(String, Class, Class...)::: global functions find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
JSONFunctions#getREVIVER_INVOKER()::: functions get r_ r:::return->Context->getGlobal->new->Callable<MethodHandle>->getDynamicInvoker
JSONFunctions#quote(String):::Returns JSON-compatible quoted version of the given string.:::return->JSONParser->quote
JSONFunctions#parse(Object, Object):::Parses the given JSON text string and returns object representation.:::str->JSType->toString->global->Context->getGlobal->dualFields->useDualFields->parser->new->JSONParser->value->try->parser->parse->catch->throw->ECMAErrors->e->getMessage->syntaxError->finally->return->applyReviver
JSONFunctions#applyReviver(Global, Object, Object)::: functions apply reviver:::if->Bootstrap->isCallable->root->global->newObject->root->addOwnProperty->return->walk->return
JSONFunctions#walk(ScriptObject, Object, Object)::: functions walk:::val->holder->get->if->valueObj->if->valueObj->isArray->length->JSType->valueObj->getLength->toInteger->for->i->else->keys->valueObj->getOwnKeys->foreach->newElement->walk->if->valueObj->delete->else->setPropertyValue->try->return->getREVIVER_INVOKER->JSType->toString->invokeExact->catch->throw->throw->new->RuntimeException->finally
JSONFunctions#setPropertyValue(ScriptObject, String, Object)::: functions set property value:::index->ArrayIndex->getArrayIndex->if->ArrayIndex->isValidArrayIndex->sobj->defineOwnProperty->else->if->sobj->getMap->findProperty->sobj->set->else->sobj->addOwnProperty
JSONListAdapter#unwrap(Object):::Unwraps this adapter into its underlying non-JSObject representative.:::unwrapped->ScriptObjectMirror->unwrap->return
JSONListAdapter#call(Object, Object...)::: list adapter call:::return->obj->call
JSONListAdapter#newObject(Object...)::: list adapter new object:::return->obj->newObject
JSONListAdapter#eval(String)::: list adapter eval:::return->obj->eval
JSONListAdapter#getMember(String)::: list adapter get member:::return->obj->getMember
JSONListAdapter#getSlot(int)::: list adapter get slot:::return->obj->getSlot
JSONListAdapter#hasMember(String)::: list adapter has member:::return->obj->hasMember
JSONListAdapter#hasSlot(int)::: list adapter has slot:::return->obj->hasSlot
JSONListAdapter#removeMember(String)::: list adapter remove member:::obj->removeMember
JSONListAdapter#setMember(String, Object)::: list adapter set member:::obj->setMember
JSONListAdapter#setSlot(int, Object)::: list adapter set slot:::obj->setSlot
JSONListAdapter#keySet()::: list adapter key set:::return->obj->keySet
JSONListAdapter#values()::: list adapter values:::return->obj->values
JSONListAdapter#isInstance(Object)::: list adapter is instance:::return->obj->isInstance
JSONListAdapter#isInstanceOf(Object)::: list adapter is instance of:::return->obj->isInstanceOf
JSONListAdapter#getClassName()::: list adapter get class name:::return->obj->getClassName
JSONListAdapter#isFunction()::: list adapter is function:::return->obj->isFunction
JSONListAdapter#isStrictFunction()::: list adapter is strict function:::return->obj->isStrictFunction
JSONListAdapter#isArray()::: list adapter is array:::return->obj->isArray
JSONListAdapter#toNumber()::: list adapter to number:::return->obj->toNumber
JSONListAdapter#getDefaultValue(Class)::: list adapter get default value:::return->obj->getDefaultValue
ListAdapter#create(Object):::Factory to create a ListAdapter for a given script object.:::global->Context->getGlobal->return->getJSObject->new->ListAdapter
ListAdapter#getJSObject(Object, Global)::: list adapter get object:::if->return->ScriptObjectMirror->wrap->else->if->return->throw->new->IllegalArgumentException
ListAdapter#get(int)::: list adapter get:::checkRange->return->getAt
ListAdapter#getAt(int)::: list adapter get at:::return->obj->getSlot
ListAdapter#set(int, Object)::: list adapter set:::checkRange->prevValue->getAt->obj->setSlot->return
ListAdapter#checkRange(int)::: list adapter check range:::if->size->throw->invalidIndex
ListAdapter#size()::: list adapter size:::return->JSType->obj->getMember->toInt32
ListAdapter#push(Object)::: list adapter push:::addFirst
ListAdapter#add(Object)::: list adapter add:::addLast->return
ListAdapter#addFirst(Object)::: list adapter add first:::try->getDynamicInvoker->getFunction->invokeExact->catch->throw->throw->new->RuntimeException->finally
ListAdapter#addLast(Object)::: list adapter add last:::try->getDynamicInvoker->getFunction->invokeExact->catch->throw->throw->new->RuntimeException->finally
ListAdapter#add(int, Object)::: list adapter add:::try->if->throw->invalidIndex->else->if->addFirst->else->size->size->if->getDynamicInvoker->obj->getMember->invokeExact->else->if->addLast->else->throw->invalidIndex->catch->throw->throw->new->RuntimeException->finally
ListAdapter#getFunction(String)::: list adapter get function:::fn->obj->getMember->if->Bootstrap->isCallable->throw->new->UnsupportedOperationException->return
ListAdapter#invalidIndex(int)::: list adapter invalid index:::return->String->valueOf->new->IndexOutOfBoundsException
ListAdapter#offer(Object)::: list adapter offer:::return->offerLast
ListAdapter#offerFirst(Object)::: list adapter offer first:::addFirst->return
ListAdapter#offerLast(Object)::: list adapter offer last:::addLast->return
ListAdapter#pop()::: list adapter pop:::return->removeFirst
ListAdapter#remove()::: list adapter remove:::return->removeFirst
ListAdapter#removeFirst()::: list adapter remove first:::checkNonEmpty->return->invokeShift
ListAdapter#removeLast()::: list adapter remove last:::checkNonEmpty->return->invokePop
ListAdapter#checkNonEmpty()::: list adapter check non empty:::if->isEmpty->throw->new->NoSuchElementException
ListAdapter#remove(int)::: list adapter remove:::if->throw->invalidIndex->else->if->return->invokeShift->else->maxIndex->size->if->prevValue->get->invokeSpliceRemove->return->else->if->return->invokePop->else->throw->invalidIndex
ListAdapter#invokeShift()::: list adapter invoke shift:::try->return->getDynamicInvoker->getFunction->invokeExact->catch->throw->throw->new->RuntimeException->finally
ListAdapter#invokePop()::: list adapter invoke pop:::try->return->getDynamicInvoker->getFunction->invokeExact->catch->throw->throw->new->RuntimeException->finally
ListAdapter#removeRange(int, int)::: list adapter remove range:::invokeSpliceRemove
ListAdapter#invokeSpliceRemove(int, int)::: list adapter invoke splice remove:::try->getDynamicInvoker->getFunction->invokeExact->catch->throw->throw->new->RuntimeException->finally
ListAdapter#poll()::: list adapter poll:::return->pollFirst
ListAdapter#pollFirst()::: list adapter poll first:::return->isEmpty->invokeShift
ListAdapter#pollLast()::: list adapter poll last:::return->isEmpty->invokePop
ListAdapter#peek()::: list adapter peek:::return->peekFirst
ListAdapter#peekFirst()::: list adapter peek first:::return->isEmpty->get
ListAdapter#peekLast()::: list adapter peek last:::return->isEmpty->size->get
ListAdapter#element()::: list adapter element:::return->getFirst
ListAdapter#getFirst()::: list adapter get first:::checkNonEmpty->return->get
ListAdapter#getLast()::: list adapter get last:::checkNonEmpty->return->size->get
ListAdapter#descendingIterator()::: list adapter descending iterator:::it->size->listIterator->return->new->Iterator<Object>
ListAdapter#removeFirstOccurrence(Object)::: list adapter remove first occurrence:::return->iterator->removeOccurrence
ListAdapter#removeLastOccurrence(Object)::: list adapter remove last occurrence:::return->descendingIterator->removeOccurrence
ListAdapter#removeOccurrence(Object, Iterator)::: list adapter remove occurrence:::while->it->hasNext->if->Objects->it->next->equals->it->remove->return->return
ListAdapter#invokerCreator(Class, Class...)::: list adapter invoker creator:::return->new->Callable<MethodHandle>
ListAdapter#getDynamicInvoker(Object, Callable)::: list adapter get dynamic invoker:::return->global->getDynamicInvoker
NashornLoader#loadModuleManipulator()::: nashorn loader load module manipulator:::clazz->defineClass->try->Class->forName->catch->throw->new->RuntimeException->finally->pa->try->clazz->getDeclaredMethod->addModuleExport->setAccessible->catch->throw->new->RuntimeException->finally->return->AccessController->doPrivileged
NashornLoader#addModuleExport(Module)::: nashorn loader add module export:::try->addModuleExport->invoke->catch->throw->new->RuntimeException->finally
NashornLoader#checkPackageAccess(String)::: nashorn loader check package access:::i->name->lastIndexOf->if->sm->System->getSecurityManager->if->pkgName->name->substring->switch->break->sm->checkPackageAccess
NashornLoader#getPermissions(CodeSource)::: nashorn loader get permissions:::permCollection->new->Permissions->foreach->permCollection->add->return
NashornLoader#createClassLoader(String, ClassLoader):::Create a secure URL class loader for the given classpath:::urls->pathToURLs->return->URLClassLoader->newInstance
NashornLoader#pathToURLs(String)::: nashorn loader path to ls:::components->path->split->urls->new->URLArr->count->while->url->new->File->fileToURL->if->if->tmp->new->URLArr->System->arraycopy->return
NashornLoader#fileToURL(File)::: nashorn loader file to l:::name->try->file->getCanonicalPath->catch->file->getAbsolutePath->finally->name->replace->if->name->startsWith->if->file->isFile->try->return->new->URL->catch->throw->new->IllegalArgumentException->finally
NashornLoader#readModuleManipulatorBytes()::: nashorn loader read module manipulator bytes:::pa->res->MODULE_MANIPULATOR_NAME->replace->try->in->getResourceAsStream->return->in->readAllBytes->catch->throw->new->UncheckedIOException->finally->return->AccessController->doPrivileged
NativeJavaPackage#getClassName()::: native java package get class name:::return
NativeJavaPackage#equals(Object)::: native java package equals:::if->return->name->equals->return
NativeJavaPackage#hashCode()::: native java package hash code:::return->name->hashCode
NativeJavaPackage#getName():::Get the full name of the package:::return
NativeJavaPackage#safeToString()::: native java package safe to string:::return->toString
NativeJavaPackage#toString()::: native java package to string:::return
NativeJavaPackage#getDefaultValue(Class)::: native java package get default value:::if->return->toString->return->super->getDefaultValue
NativeJavaPackage#findNewMethod(CallSiteDescriptor, LinkRequest)::: native java package find new method:::return->createClassNotFoundInvocation
NativeJavaPackage#findCallMethod(CallSiteDescriptor, LinkRequest)::: native java package find call method:::return->createClassNotFoundInvocation
NativeJavaPackage#createClassNotFoundInvocation(CallSiteDescriptor)::: native java package create class not found invocation:::type->desc->getMethodType->return->MH->type->parameterList->type->parameterCount->subList->dropArguments->type->parameterType->new->GuardedInvocation
NativeJavaPackage#classNotFound(NativeJavaPackage)::: native java package class not found:::throw->new->ClassNotFoundException
NativeJavaPackage#__noSuchProperty__(Object, Object):::"No such property" call placeholder:::throw->new->AssertionError
NativeJavaPackage#__noSuchMethod__(Object, Object...):::"No such method call" placeholder  This can never be called as we override ScriptObject#noSuchMethod:::throw->new->AssertionError
NativeJavaPackage#noSuchProperty(CallSiteDescriptor, LinkRequest):::Handle creation of new attribute.:::propertyName->NashornCallSiteDescriptor->getOperand->createProperty->return->super->lookup
NativeJavaPackage#invokeNoSuchProperty(Object, boolean, int)::: native java package invoke no such property:::if->return->super->invokeNoSuchProperty->retval->createProperty->if->isValid->throw->new->UnwarrantedOptimismException->return
NativeJavaPackage#noSuchMethod(CallSiteDescriptor, LinkRequest)::: native java package no such method:::return->noSuchProperty
NativeJavaPackage#findOwnMH(String, Class, Class...)::: native java package find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
NativeJavaPackage#createProperty(String)::: native java package create property:::fullName->name->isEmpty->context->Context->getContextTrusted->javaClass->try->context->findClass->catch->finally->openBrace->propertyName->indexOf->closeBrace->propertyName->lastIndexOf->if->lastChar->propertyName->length->if->throw->typeError->className->propertyName->substring->try->context->findClass->catch->throw->typeError->finally->constructor->BeansLinker->propertyName->substring->getConstructorMethod->if->set->return->throw->typeError->propertyValue->if->getProto->new->NativeJavaPackage->else->StaticClass->forClass->set->return
OptimisticBuiltins#getLinkLogic(Class):::Return an instance of the linking logic we need for a particular LinkLogic subclass, gotten from the compile time annotation of a specialized builtin method No assumptions can be made about the lifetime of the instance:::
OptimisticBuiltins#hasPerInstanceAssumptions():::Does this link logic vary depending on which instance we are working with:::
OptimisticReturnFilters#filterOptimisticReturnValue(MethodHandle, Class, int):::Given a method handle and an expected return type, perform return value filtering according to the optimistic type coercion rules:::if->isValid->return->type->mh->type->actualReturnType->type->returnType->if->TypeUtilities->isConvertibleWithoutLoss->return->guard->getOptimisticTypeGuard->return->MH->MH->guard->type->parameterCount->insertArguments->filterReturnValue
OptimisticReturnFilters#filterOptimisticReturnValue(GuardedInvocation, CallSiteDescriptor):::Given a guarded invocation and a callsite descriptor, perform return value filtering according to the optimistic type coercion rules, using the return value from the descriptor:::if->NashornCallSiteDescriptor->isOptimistic->return->return->inv->inv->getInvocation->desc->getMethodType->returnType->NashornCallSiteDescriptor->getProgramPoint->filterOptimisticReturnValue->inv->getGuard->replaceMethods
OptimisticReturnFilters#getOptimisticTypeGuard(Class, Class)::: optimistic return filters get optimistic type guard:::guard->provableTypeIndex->getProvableTypeIndex->if->else->if->else->if->provable->isPrimitive->return->guard->guard->type->changeParameterType->asType->return
OptimisticReturnFilters#getProvableTypeIndex(Class)::: optimistic return filters get provable type index:::accTypeIndex->getAccessorTypeIndex->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->throw->provable->getName->new->AssertionError
OptimisticReturnFilters#ensureInt(long, int)::: optimistic return filters ensure int:::if->JSType->isRepresentableAsInt->return->throw->UnwarrantedOptimismException->createNarrowest
OptimisticReturnFilters#ensureInt(double, int)::: optimistic return filters ensure int:::if->JSType->isStrictlyRepresentableAsInt->return->throw->new->UnwarrantedOptimismException
OptimisticReturnFilters#ensureInt(Object, int):::Returns the argument value as an int:::if->isPrimitiveNumberWrapper->d->doubleValue->if->JSType->isStrictlyRepresentableAsInt->return->throw->UnwarrantedOptimismException->createNarrowest
OptimisticReturnFilters#isPrimitiveNumberWrapper(Object)::: optimistic return filters is primitive number wrapper:::if->return->c->obj->getClass->return
OptimisticReturnFilters#ensureInt(boolean, int)::: optimistic return filters ensure int:::throw->new->UnwarrantedOptimismException
OptimisticReturnFilters#ensureInt(char, int)::: optimistic return filters ensure int:::throw->new->UnwarrantedOptimismException
OptimisticReturnFilters#ensureInt(int)::: optimistic return filters ensure int:::throw->new->UnwarrantedOptimismException
OptimisticReturnFilters#ensureNumber(long, int)::: optimistic return filters ensure number:::if->JSType->isRepresentableAsDouble->return->throw->new->UnwarrantedOptimismException
OptimisticReturnFilters#ensureNumber(Object, int):::Returns the argument value as a double:::if->isPrimitiveNumberWrapper->arg->getClass->JSType->isRepresentableAsDouble->return->doubleValue->throw->new->UnwarrantedOptimismException
OptimisticReturnFilters#findOwnMH(String, Class, Class...)::: optimistic return filters find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
ParserException#getSource():::Get the Source of this ParserException:::return
ParserException#getToken():::Get the token responsible for this ParserException:::return
ParserException#getPosition():::Get token position within source where the error originated.:::return->Token->descPosition
ParserException#getErrorType():::Get the JSErrorType of this ParserException:::return
ParserException#throwAsEcmaException():::Throw this ParserException as one of the 7 native JavaScript errors:::throw->ECMAErrors->asEcmaException
ParserException#throwAsEcmaException(Global):::Throw this ParserException as one of the 7 native JavaScript errors:::throw->ECMAErrors->asEcmaException
Property#copy():::Copy function:::
Property#copy(Class):::Copy function:::
Property#mergeFlags(PropertyDescriptor, PropertyDescriptor):::Property flag utility method for PropertyDescriptors:::propFlags->value->newDesc->has->newDesc->isConfigurable->oldDesc->isConfigurable->if->newDesc->has->newDesc->isEnumerable->oldDesc->isEnumerable->if->newDesc->has->newDesc->isWritable->oldDesc->isWritable->if->return
Property#setBuiltinSwitchPoint(SwitchPoint):::Set the change callback for this property, i.e:::
Property#getBuiltinSwitchPoint():::Builtin properties have an invalidation switchpoint that is invalidated when they are set, this is a getter for it:::return
Property#isBuiltin():::Checks if this is a builtin property, this means that it has a builtin switchpoint that hasn't been invalidated by a setter:::return->builtinSwitchPoint->hasBeenInvalidated
Property#toFlags(PropertyDescriptor):::Property flag utility method for PropertyDescriptor:::propFlags->if->desc->isConfigurable->if->desc->isEnumerable->if->desc->isWritable->return
Property#hasGetterFunction(ScriptObject):::Check whether this property has a user defined getter function:::return
Property#hasSetterFunction(ScriptObject):::Check whether this property has a user defined setter function:::return
Property#isWritable():::Check whether this property is writable (see ECMA 8.6.1):::return
Property#isConfigurable():::Check whether this property is writable (see ECMA 8.6.1):::return
Property#isEnumerable():::Check whether this property is enumerable (see ECMA 8.6.1):::return
Property#isParameter():::Check whether this property is used as a function parameter:::return
Property#hasArguments():::Check whether this property is in an object with arguments field:::return
Property#isSpill():::Check whether this is a spill property, i.e:::return
Property#isBound():::Is this property bound to a receiver? If this method returns true get and set operations will be delegated to a statically bound object instead of the object passed as parameter.:::return
Property#needsDeclaration():::Is this a LET or CONST property that needs to see its declaration before being usable?:::return
Property#addFlags(int):::Add more property flags to the property:::if->cloned->this->copy->return->return
Property#getFlags():::Get the flags for this property:::return
Property#removeFlags(int):::Remove property flags from the property:::if->cloned->this->copy->return->return
Property#setFlags(int):::Reset the property for this property:::if->cloned->this->copy->return->return
Property#getGetter(Class):::Abstract method for retrieving the getter for the property:::
Property#getOptimisticGetter(Class, int):::Get an optimistic getter that throws an exception if type is not the known given one:::
Property#initMethodHandles(Class):::Hook to initialize method handles after deserialization.:::
Property#getKey():::Get the key for this property:::return
Property#getSlot():::Get the field number or spill slot:::return
Property#getIntValue(ScriptObject, ScriptObject):::get the Object value of this property from owner:::
Property#getDoubleValue(ScriptObject, ScriptObject):::get the Object value of this property from owner:::
Property#getObjectValue(ScriptObject, ScriptObject):::get the Object value of this property from owner:::
Property#setValue(ScriptObject, ScriptObject, int, boolean):::Set the value of this property in owner:::
Property#setValue(ScriptObject, ScriptObject, double, boolean):::Set the value of this property in owner:::
Property#setValue(ScriptObject, ScriptObject, Object, boolean):::Set the value of this property in owner:::
Property#hasNativeSetter():::Returns true if this property has a low-level setter handle:::
Property#getSetter(Class, PropertyMap):::Abstract method for retrieving the setter for the property:::
Property#getGetterFunction(ScriptObject):::Get the user defined getter function if one exists:::return
Property#getSetterFunction(ScriptObject):::Get the user defined setter function if one exists:::return
Property#hashCode()::: property hash code:::t->getLocalType->return->Objects->hashCode->getSlot->t->hashCode
Property#equals(Object)::: property equals:::if->return->if->this->getClass->other->getClass->return->otherProperty->return->equalsWithoutType->getLocalType->otherProperty->getLocalType
Property#equalsWithoutType(Property)::: property equals without type:::return->getFlags->otherProperty->getFlags->getSlot->otherProperty->getSlot->getKey->otherProperty->getKey->equals
Property#type(Class)::: property type:::if->return->else->if->return->else->if->return->else->return
Property#toStringShort():::Short toString version:::sb->new->StringBuilder->t->getLocalType->sb->getKey->append->append->type->append->append->return->sb->toString
Property#indent(String, int)::: property indent:::sb->new->StringBuilder->sb->append->for->i->str->length->return->sb->toString
Property#toString()::: property to string:::sb->new->StringBuilder->t->getLocalType->sb->getKey->toString->indent->append->append->Debug->id->append->append->Integer->toHexString->indent->append->append->getClass->getSimpleName->append->append->type->indent->append->append->if->sb->append->append->append->append->return->sb->toString
Property#getType():::Get the current type of this property:::return
Property#setType(Class):::Set the type of this property.:::type->isPrimitive
Property#getLocalType():::Get the type of the value in the local property slot:::return->getType
Property#canChangeType():::Check whether this Property can ever change its type:::return
Property#isFunctionDeclaration():::Check whether this property represents a function declaration.:::return
Property#isLexicalBinding():::Is this a property defined by ES6 let or const?:::return
Property#hasDualFields():::Does this property support dual fields for both primitive and object values?:::return
Property#isAccessorProperty():::Is this an accessor property as defined in ES5 8.6.1?:::return
PropertyAccess#getInt(Object, int):::Get the value for a given key and return it as an int:::
PropertyAccess#getInt(double, int):::Get the value for a given key and return it as an int:::
PropertyAccess#getInt(int, int):::Get the value for a given key and return it as an int:::
PropertyAccess#getDouble(Object, int):::Get the value for a given key and return it as a double:::
PropertyAccess#getDouble(double, int):::Get the value for a given key and return it as a double:::
PropertyAccess#getDouble(int, int):::Get the value for a given key and return it as a double:::
PropertyAccess#get(Object):::Get the value for a given key and return it as an Object:::
PropertyAccess#get(double):::Get the value for a given key and return it as an Object:::
PropertyAccess#get(int):::Get the value for a given key and return it as an Object:::
PropertyAccess#set(Object, int, int):::Set the value of a given key:::
PropertyAccess#set(Object, double, int):::Set the value of a given key:::
PropertyAccess#set(Object, Object, int):::Set the value of a given key:::
PropertyAccess#set(double, int, int):::Set the value of a given key:::
PropertyAccess#set(double, double, int):::Set the value of a given key:::
PropertyAccess#set(double, Object, int):::Set the value of a given key:::
PropertyAccess#set(int, int, int):::Set the value of a given key:::
PropertyAccess#set(int, double, int):::Set the value of a given key:::
PropertyAccess#set(int, Object, int):::Set the value of a given key:::
PropertyAccess#has(Object):::Check if the given key exists anywhere in the proto chain:::
PropertyAccess#has(int):::Check if the given key exists anywhere in the proto chain:::
PropertyAccess#has(double):::Check if the given key exists anywhere in the proto chain:::
PropertyAccess#hasOwnProperty(Object):::Check if the given key exists directly in the implementor:::
PropertyAccess#hasOwnProperty(int):::Check if the given key exists directly in the implementor:::
PropertyAccess#hasOwnProperty(double):::Check if the given key exists directly in the implementor:::
PropertyAccess#delete(int, boolean):::Delete a property with the given key from the implementor:::
PropertyAccess#delete(double, boolean):::Delete a property with the given key from the implementor:::
PropertyAccess#delete(Object, boolean):::Delete a property with the given key from the implementor:::
PropertyDescriptor#isConfigurable():::Check if this PropertyDescriptor describes a configurable property:::
PropertyDescriptor#isEnumerable():::Check if this PropertyDescriptor describes an enumerable property:::
PropertyDescriptor#isWritable():::Check if this PropertyDescriptor describes a wriable property:::
PropertyDescriptor#getValue():::Get the property value as given by this PropertyDescriptor:::
PropertyDescriptor#getGetter():::Get the UserAccessorProperty getter as given by this PropertyDescriptor:::
PropertyDescriptor#getSetter():::Get the UserAccessorProperty setter as given by this PropertyDescriptor:::
PropertyDescriptor#setConfigurable(boolean):::Set whether this PropertyDescriptor describes a configurable property:::
PropertyDescriptor#setEnumerable(boolean):::Set whether this PropertyDescriptor describes an enumerable property:::
PropertyDescriptor#setWritable(boolean):::Set whether this PropertyDescriptor describes a writable property:::
PropertyDescriptor#setValue(Object):::Set the property value for this PropertyDescriptor:::
PropertyDescriptor#setGetter(Object):::Assign a UserAccessorProperty getter as given to this PropertyDescriptor:::
PropertyDescriptor#setSetter(Object):::Assign a UserAccessorProperty setter as given to this PropertyDescriptor:::
PropertyDescriptor#fillFrom(ScriptObject):::Fill in this PropertyDescriptor from the properties of a given ScriptObject:::
PropertyDescriptor#type():::Get the type of this property descriptor.:::
PropertyDescriptor#has(Object):::Wrapper for ScriptObject#has(Object):::
PropertyDescriptor#hasAndEquals(PropertyDescriptor):::Check existence and compare attributes of descriptors.:::
PropertyHashMap#immutableReplace(Property, Property):::Clone a property map, replacing a property with a new one in the same place, which is important for property iterations if a property changes types:::builder->newMapBuilder->builder->property->getKey->replaceProperty->return->new->PropertyHashMap
PropertyHashMap#immutableAdd(Property):::Clone a PropertyHashMap and add a Property.:::newSize->builder->newMapBuilder->builder->addProperty->return->new->PropertyHashMap
PropertyHashMap#immutableAdd(Property...):::Clone a PropertyHashMap and add an array of properties.:::newSize->builder->newMapBuilder->foreach->builder->addProperty->return->new->PropertyHashMap
PropertyHashMap#immutableAdd(Collection):::Clone a PropertyHashMap and add a collection of properties.:::if->newSize->newProperties->size->builder->newMapBuilder->foreach->builder->addProperty->return->new->PropertyHashMap->return
PropertyHashMap#immutableRemove(Object):::Clone a PropertyHashMap and remove a Property based on its key.:::builder->newMapBuilder->builder->removeProperty->if->return->new->PropertyHashMap->return
PropertyHashMap#find(Object):::Find a Property in the PropertyHashMap.:::element->findElement->return->element->getProperty
PropertyHashMap#getProperties():::Return an array of properties in chronological order of adding.:::if->array->new->PropertyArr->i->for->element->element->getLink->return
PropertyHashMap#binIndex(Element[], Object):::Returns the bin index from the key.:::return->key->hashCode
PropertyHashMap#binsNeeded(int):::Calculate the number of bins needed to contain n properties.:::return->Integer->numberOfLeadingZeros
PropertyHashMap#threeQuarters(int):::Used to calculate the current capacity of the bins.:::return
PropertyHashMap#rehash(Element, int):::Regenerate the bin table after changing the number of bins.:::newBins->new->ElementArr->for->element->element->getLink->return
PropertyHashMap#findElement(Object):::Locate an element based on key.:::if->return->queue->find->else->if->binIndex->binIndex->return->findElement->return->findElement
PropertyHashMap#findElement(Element, Object):::Locate an Element based on key from a specific list.:::hashCode->key->hashCode->for->element->element->getLink->return
PropertyHashMap#newMapBuilder(int):::Create a MapBuilder to add new elements to.:::if->return->new->MapBuilder->else->if->return->binsNeeded->rehash->new->MapBuilder->else->if->shouldCloneBins->return->cloneBins->new->MapBuilder->else->if->return->new->MapBuilder->else->return->new->MapBuilder
PropertyHashMap#cloneBins():::Create a cloned or new bins array and merge the elements in the queue into it if there are any.:::if->return->queue->cloneAndMergeBins->return->bins->clone
PropertyHashMap#shouldCloneBins(int, int):::Used on insertion to determine whether the bins array should be cloned, or we should keep using the ancestor's bins array and put new elements into the queue.:::return
PropertyHashMap#removeFromList(Element, Object):::Removes an Element from a specific list, avoiding duplication.:::if->return->hashCode->key->hashCode->if->list->match->return->list->getLink->head->list->getProperty->new->Element->previous->for->element->list->getLink->element->getLink->return
PropertyHashMap#replaceInList(Element, Object, Property)::: property hash map replace in list:::hashCode->key->hashCode->if->list->match->return->list->getLink->new->Element->head->list->getProperty->new->Element->previous->for->element->list->getLink->element->getLink->return
PropertyHashMap#size()::: property hash map size:::return
PropertyHashMap#isEmpty()::: property hash map is empty:::return
PropertyHashMap#containsKey(Object)::: property hash map contains key:::return->findElement
PropertyHashMap#containsValue(Object)::: property hash map contains value:::if->property->element->property->getKey->findElement->return->element->getProperty->equals->return
PropertyHashMap#get(Object)::: property hash map get:::element->findElement->return->element->getProperty
PropertyHashMap#put(Object, Property)::: property hash map put:::throw->new->UnsupportedOperationException
PropertyHashMap#remove(Object)::: property hash map remove:::throw->new->UnsupportedOperationException
PropertyHashMap#putAll(Map)::: property hash map put all:::throw->new->UnsupportedOperationException
PropertyHashMap#clear()::: property hash map clear:::throw->new->UnsupportedOperationException
PropertyHashMap#keySet()::: property hash map key set:::set->new->HashSet<>->for->element->element->getLink->return->Collections->unmodifiableSet
PropertyHashMap#values()::: property hash map values:::return->Collections->Arrays->getProperties->asList->unmodifiableList
PropertyHashMap#entrySet()::: property hash map entry set:::set->new->HashSet<>->for->element->element->getLink->return->Collections->unmodifiableSet
PropertyHashMap.Element#match(Object, int)::: element match:::return->equals
PropertyHashMap.Element#equals(Object)::: element equals:::return->property->equals
PropertyHashMap.Element#getKey()::: element get key:::return
PropertyHashMap.Element#getValue()::: element get value:::return
PropertyHashMap.Element#hashCode()::: element hash code:::return
PropertyHashMap.Element#setValue(Property)::: element set value:::throw->new->UnsupportedOperationException
PropertyHashMap.Element#toString()::: element to string:::sb->new->StringBuffer->sb->append->elem->do->sb->elem->getValue->append->if->sb->append->while->sb->append->return->sb->toString
PropertyHashMap.Element#getLink()::: element get link:::return
PropertyHashMap.Element#setLink(Element)::: element set link:::
PropertyHashMap.Element#getProperty()::: element get property:::return
PropertyHashMap.ElementQueue#find(Object)::: element queue find:::binIndex->binIndex->element->findElement->if->return->if->if->newBins->cloneAndMergeBins->new->ElementQueue->return->find->return->findElement->return
PropertyHashMap.ElementQueue#cloneAndMergeBins():::Create a cloned or new bins array and merge the elements in the queue into it if there are any.:::if->return->newBins->qbins->clone->for->element->element->getLink->return
PropertyHashMap.MapBuilder#addProperty(Property):::Add a Property:::key->property->getKey->if->binIndex->binIndex->if->findElement->ensureOwnBins->removeExistingElement->else->if->findElement->removeExistingElement->if->new->Element->else->new->Element->else->if->findElement->removeFromList->new->Element
PropertyHashMap.MapBuilder#replaceProperty(Object, Property):::Replace an existing Property with a new one with the same key.:::if->binIndex->binIndex->bin->if->findElement->ensureOwnBins->replaceInList->else->if->replaceInList->replaceInList
PropertyHashMap.MapBuilder#removeProperty(Object):::Remove a Property based on its key.:::if->binIndex->binIndex->bin->if->findElement->if->ensureOwnBins->removeFromList->else->else->if->findElement->removeFromList->removeFromList
PropertyHashMap.MapBuilder#removeExistingElement(Element, Object):::Removes an element known to exist from an element list and the main list and decreases size.:::removeFromList->return->removeFromList
PropertyHashMap.MapBuilder#ensureOwnBins():::Make sure we own the bins we have, cloning them if necessary.:::if->bins->clone
PropertyMap#writeObject(ObjectOutputStream)::: property map write object:::out->defaultWriteObject->out->properties->getProperties->writeObject
PropertyMap#readObject(ObjectInputStream)::: property map read object:::in->defaultReadObject->props->in->readObject->EMPTY_HASHMAP->immutableAdd->structure->Context->forStructureClass->foreach->prop->initMethodHandles
PropertyMap#newMap(Collection, String, int, int, int):::Public property map allocator:::newProperties->EMPTY_HASHMAP->immutableAdd->return->new->PropertyMap
PropertyMap#newMap(Collection):::Public property map allocator:::return->properties->isEmpty->newMap->getName->newMap
PropertyMap#newMap(Class):::Return a sharable empty map for the given object class.:::return->clazz->getName->new->PropertyMap
PropertyMap#newMap():::Return a sharable empty map.:::return->newMap
PropertyMap#size():::Return number of properties in the map.:::return->properties->size
PropertyMap#getSwitchPointCount():::Get the number of property SwitchPoints of this map:::return->propertySwitchPoints->getSwitchPointCount
PropertyMap#addSwitchPoint(String, SwitchPoint):::Add a property switchpoint to this property map for the given key.:::PropertySwitchPoints->addSwitchPoint
PropertyMap#propertyChanged(Property):::Method called when a property of an object using this property map is being created, modified, or deleted:::if->propertySwitchPoints->invalidateProperty
PropertyMap#protoChanged():::Method called when the prototype of an object using this property map is changed.:::if->sharedProtoMap->invalidateSwitchPoint->if->propertySwitchPoints->invalidateInheritedProperties
PropertyMap#getSwitchPoint(String):::Returns a SwitchPoint for use with a property inherited from this or a parent map:::if->existingSwitchPoints->propertySwitchPoints->getSwitchPoints->foreach->if->switchPoint->hasBeenInvalidated->return->return
PropertyMap#addPropertyBind(AccessorProperty, Object):::Add a property to the map, re-binding its getters and setters, if available, to a given receiver:::return->new->AccessorProperty->addPropertyNoHistory
PropertyMap#logicalSlotIndex(Property)::: property map logical slot index:::slot->property->getSlot->if->return->return->property->isSpill
PropertyMap#newSpillLength(Property)::: property map new spill length:::return->newProperty->isSpill->Math->newProperty->getSlot->max
PropertyMap#newFieldCount(Property)::: property map new field count:::return->newProperty->isSpill->Math->newProperty->getSlot->max
PropertyMap#newFlags(Property)::: property map new flags:::return->newProperty->getKey->getArrayIndex->isValidArrayIndex
PropertyMap#updateFreeSlots(Property, Property)::: property map update free slots:::freeSlotsCloned->if->slotIndex->logicalSlotIndex->if->newFreeSlots->new->BitSet->freeSlots->clone->newFreeSlots->set->if->slotIndex->logicalSlotIndex->if->freeSlots->get->newFreeSlots->freeSlots->clone->newFreeSlots->clear->newFreeSlots->isEmpty
PropertyMap#addPropertyNoHistory(Property):::Add a property to the map without adding it to the history:::propertyChanged->return->addPropertyInternal
PropertyMap#addProperty(Property):::Add a property to the map:::propertyChanged->newMap->checkHistory->if->addPropertyInternal->addToHistory->return
PropertyMap#deriveMap(PropertyHashMap, int, int, int)::: property map derive map:::return->new->PropertyMap
PropertyMap#addPropertyInternal(Property)::: property map add property internal:::newProperties->properties->immutableAdd->newMap->newFlags->newFieldCount->newSpillLength->deriveMap->newMap->updateFreeSlots->return
PropertyMap#deleteProperty(Property):::Remove a property from a map:::propertyChanged->newMap->checkHistory->key->property->getKey->if->properties->containsKey->newProperties->properties->immutableRemove->isSpill->property->isSpill->slot->property->getSlot->if->deriveMap->else->if->deriveMap->else->deriveMap->newMap->updateFreeSlots->addToHistory->return
PropertyMap#replaceProperty(Property, Property):::Replace an existing property with a new one.:::propertyChanged->sameType->oldProperty->getClass->newProperty->getClass->newSpillLength->Math->newProperty->getSlot->max->newProperties->properties->immutableReplace->newMap->deriveMap->if->newMap->updateFreeSlots->return
PropertyMap#newUserAccessors(Object, int):::Make a new UserAccessorProperty property:::return->getFreeSpillSlot->new->UserAccessorProperty
PropertyMap#findProperty(Object):::Find a property in the map.:::return->properties->find
PropertyMap#addAll(PropertyMap):::Adds all map properties from another map.:::otherProperties->getProperties->newProperties->properties->immutableAdd->newMap->deriveMap->foreach->return
PropertyMap#getProperties():::Return an array of all properties.:::return->properties->getProperties
PropertyMap#getClassName():::Return the name of the class of objects using this property map.:::return
PropertyMap#preventExtensions():::Prevents the map from having additional properties.:::return->deriveMap
PropertyMap#seal():::Prevents properties in map from being modified.:::newProperties->foreach->properties->getProperties->newProperties->oldProperty->addFlags->immutableAdd->return->deriveMap
PropertyMap#freeze():::Prevents properties in map from being modified or written to.:::newProperties->foreach->properties->getProperties->propertyFlags->if->newProperties->oldProperty->addFlags->immutableAdd->return->deriveMap
PropertyMap#anyConfigurable():::Check for any configurable properties.:::foreach->properties->getProperties->if->property->isConfigurable->return->return
PropertyMap#allFrozen():::Check if all properties are frozen.:::foreach->properties->getProperties->if->property->isAccessorProperty->property->isWritable->return->if->property->isConfigurable->return->return
PropertyMap#checkProtoHistory(ScriptObject):::Check prototype history for an existing property map with specified prototype.:::cachedMap->if->weakMap->protoHistory->get->weakMap->get->else->if->protoHistoryHit->increment->return
PropertyMap#addToProtoHistory(ScriptObject, PropertyMap):::Add a map to the prototype history.:::if->new->WeakHashMap<>->protoHistory->new->SoftReference<>->put
PropertyMap#addToHistory(Property, PropertyMap):::Track the modification of the map.:::if->new->WeakHashMap<>->history->new->WeakReference<>->new->SoftReference<>->put
PropertyMap#checkHistory(Property):::Check the history for a map that already has the given property added.:::if->ref->history->get->historicMap->ref->get->if->if->historyHit->increment->return->return
PropertyMap#equalsWithoutType(PropertyMap):::Returns true if the two maps have identical properties in the same order, but allows the properties to differ in their types:::if->properties->size->size->return->iter->properties->values->iterator->otherIter->values->iterator->while->iter->hasNext->otherIter->hasNext->if->iter->next->otherIter->next->equalsWithoutType->return->return
PropertyMap#toString()::: property map to string:::sb->new->StringBuilder->sb->Debug->id->append->sb->append->foreach->getProperties->sb->append->sb->append->sb->append->sb->append->return->sb->toString
PropertyMap#iterator()::: property map iterator:::return->new->PropertyMapIterator
PropertyMap#containsArrayKeys():::Check if this map contains properties with valid array keys:::return
PropertyMap#isExtensible():::Test to see if PropertyMap is extensible.:::return
PropertyMap#isSealed():::Test to see if PropertyMap is not extensible or any properties can not be modified.:::return->isExtensible->anyConfigurable
PropertyMap#isFrozen():::Test to see if PropertyMap is not extensible or all properties can not be modified.:::return->isExtensible->allFrozen
PropertyMap#getFreeFieldSlot():::Return a free field slot for this map, or -1 if none is available.:::if->freeSlot->freeSlots->nextSetBit->if->return->if->return->return
PropertyMap#getFreeSpillSlot():::Get a free spill slot for this map.:::if->freeSlot->freeSlots->nextSetBit->if->return->return
PropertyMap#changeProto(ScriptObject):::Return a property map with the same layout that is associated with the new prototype object.:::nextMap->checkProtoHistory->if->return->if->setProtoNewMapCount->increment->newMap->makeUnsharedCopy->addToProtoHistory->return
PropertyMap#makeUnsharedCopy():::Make a copy of this property map with the shared prototype field set to null:::newMap->new->PropertyMap->return
PropertyMap#setSharedProtoMap(SharedPropertyMap):::Set a reference to the expected parent prototype map:::
PropertyMap#getSharedProtoMap():::Get the expected prototype property map if it is known, or null.:::return
PropertyMap#isValidSharedProtoMap():::Returns true if this map has been used as a shared prototype map (i.e:::return
PropertyMap#getSharedProtoSwitchPoint():::Returns the shared prototype switch point, or null if this is not a shared prototype map.:::return
PropertyMap#isInvalidSharedMapFor(ScriptObject):::Return true if this map has a shared prototype map which has either been invalidated or does not match the map of proto.:::return->sharedProtoMap->isValidSharedProtoMap->prototype->getMap
PropertyMap.PropertyMapIterator#skipNotEnumerable():::Ignore properties that are not enumerable.:::while->property->isEnumerable->iter->hasNext->iter->next
PropertyMap.PropertyMapIterator#hasNext()::: property map iterator has next:::return
PropertyMap.PropertyMapIterator#next()::: property map iterator next:::if->throw->new->NoSuchElementException->key->property->getKey->iter->hasNext->iter->next->skipNotEnumerable->return
PropertyMap.PropertyMapIterator#remove()::: property map iterator remove:::throw->new->UnsupportedOperationException
PropertyMap#diff(PropertyMap, PropertyMap):::Debug helper function that returns the diff of two property maps, only displaying the information that is different and in which map it exists compared to the other map:::sb->new->StringBuilder->if->sb->append->found->foreach->map0->getProperties->p2->map1->p->getKey->findProperty->if->sb->append->append->append->else->if->sb->append->append->append->append->append->foreach->map1->getProperties->p1->map0->p2->getKey->findProperty->if->sb->append->append->append->if->sb->append->append->append->sb->append->return->sb->toString
PropertyMap#getCount()::: property map get count:::return->count->longValue
PropertyMap#getClonedCount()::: property map get cloned count:::return->clonedCount->longValue
PropertyMap#getHistoryHit()::: property map get history hit:::return->historyHit->longValue
PropertyMap#getProtoInvalidations()::: property map get proto invalidations:::return->protoInvalidations->longValue
PropertyMap#getProtoHistoryHit()::: property map get proto history hit:::return->protoHistoryHit->longValue
PropertyMap#getSetProtoNewMapCount()::: property map get set proto new map count:::return->setProtoNewMapCount->longValue
PropertySwitchPoints#getSwitchPointsAdded():::Return aggregate switchpoints added to all ProtoSwitchPoints:::return->switchPointsAdded->longValue
PropertySwitchPoints#getSwitchPointsInvalidated():::Return aggregate switchPointMap invalidated in all ProtoSwitchPoints:::return->switchPointsInvalidated->longValue
PropertySwitchPoints#getSwitchPointCount(ScriptObject):::Return number of property switchPoints added to a ScriptObject.:::return->obj->getMap->getSwitchPointCount
PropertySwitchPoints#getSwitchPointCount():::Return the number of switchpoints added to this ProtoSwitchPoints instance.:::return->switchPointMap->size
PropertySwitchPoints#addSwitchPoint(PropertySwitchPoints, String, SwitchPoint):::Add switchPoint to the switchpoints for for property key, creating and returning a new ProtoSwitchPoints instance if the switchpoint was not already contained:::if->oldSwitchPoints->contains->newSwitchPoints->new->PropertySwitchPoints->newSwitchPoints->add->return->return
PropertySwitchPoints#contains(String, SwitchPoint):::Checks whether switchPoint is contained in key's set.:::set->get->return->set->contains
PropertySwitchPoints#add(String, SwitchPoint)::: property switch points add:::if->switchPointsAdded->increment->set->get->if->new->WeakSwitchPointSet->put->set->add
PropertySwitchPoints#getSwitchPoints(Object)::: property switch points get switch points:::switchPointSet->switchPointMap->get->if->return->switchPointSet->elements->return->Collections->emptySet
PropertySwitchPoints#invalidateProperty(Property):::Invalidate all switchpoints for the given property:::set->switchPointMap->prop->getKey->get->if->if->switchPointsInvalidated->set->size->add->switchPoints->set->elements->toArray->SwitchPoint->invalidateAll->prop->getKey->remove
PropertySwitchPoints#invalidateInheritedProperties(PropertyMap):::Invalidate all switchpoints except those defined in map:::foreach->switchPointMap->entrySet->if->map->entry->getKey->findProperty->continue->if->switchPointsInvalidated->entry->getValue->size->add->switchPoints->entry->getValue->elements->toArray->SwitchPoint->invalidateAll->switchPointMap->clear
PropertySwitchPoints.WeakSwitchPointSet#add(SwitchPoint)::: weak switch point set add:::map->put
PropertySwitchPoints.WeakSwitchPointSet#contains(SwitchPoint)::: weak switch point set contains:::return->map->containsKey
PropertySwitchPoints.WeakSwitchPointSet#elements()::: weak switch point set elements:::return->map->keySet
PropertySwitchPoints.WeakSwitchPointSet#size()::: weak switch point set size:::return->map->size
PrototypeObject#getConstructor(Object):::Get the constructor for this PrototypeObject:::return->getConstructor
PrototypeObject#setConstructor(Object, Object):::Reset the constructor for this PrototypeObject:::if->setConstructor
PrototypeObject#getConstructor()::: prototype object get constructor:::return
PrototypeObject#setConstructor(Object)::: prototype object set constructor:::
PrototypeObject#findOwnMH(String, Class, Class...)::: prototype object find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
QuotedStringTokenizer#countTokens()::: quoted string tokenizer count tokens:::return->tokens->size
QuotedStringTokenizer#hasMoreTokens()::: quoted string tokenizer has more tokens:::return->countTokens
QuotedStringTokenizer#nextToken()::: quoted string tokenizer next token:::return->tokens->removeFirst
QuotedStringTokenizer#stripQuotes(String)::: quoted string tokenizer strip quotes:::value->value0->trim->foreach->if->value->length->value->startsWith->value->endsWith->value->value->length->substring->value->replace->return
QuotedStringTokenizer#unmatchedQuotesIn(String)::: quoted string tokenizer unmatched quotes in:::quoteStack->new->Stack<>->for->i->str->length->return->quoteStack->isEmpty
RecompilableScriptFunctionData#smallMap(Map)::: recompilable script function data small map:::if->map->isEmpty->return->Collections->emptyMap->else->if->map->size->entry->map->entrySet->iterator->next->return->Collections->entry->getKey->entry->getValue->singletonMap->else->return
RecompilableScriptFunctionData#smallSet(Set)::: recompilable script function data small set:::if->set->isEmpty->return->Collections->emptySet->else->if->set->size->return->Collections->set->iterator->next->singleton->else->return
RecompilableScriptFunctionData#getLogger()::: recompilable script function data get logger:::return
RecompilableScriptFunctionData#initLogger(Context)::: recompilable script function data init logger:::return->ctxt->this->getClass->getLogger
RecompilableScriptFunctionData#hasInternalSymbol(String)::: recompilable script function data has internal symbol:::return->internalSymbols->contains
RecompilableScriptFunctionData#getExternalSymbolDepth(String):::Return the external symbol table:::depth->externalScopeDepths->get->return
RecompilableScriptFunctionData#getExternalSymbolNames():::Returns the names of all external symbols this function uses.:::return->Collections->externalScopeDepths->keySet->unmodifiableSet
RecompilableScriptFunctionData#getEndParserState():::Returns the opaque object representing the parser state at the end of this function's body, used to skip parsing this function when reparsing its containing outer function.:::return
RecompilableScriptFunctionData#getParent():::Get the parent of this RecompilableScriptFunctionData:::return
RecompilableScriptFunctionData#setParent(RecompilableScriptFunctionData)::: recompilable script function data set parent:::
RecompilableScriptFunctionData#toSource()::: recompilable script function data to source:::if->return->source->Token->descPosition->Token->descLength->getString->return
RecompilableScriptFunctionData#initTransients(Source, CodeInstaller):::Initialize transient fields on deserialized instances:::if->foreach->nestedFunctions->values->nested->initTransients->else->if->isCompatibleWith->throw->new->IllegalArgumentException
RecompilableScriptFunctionData#toString()::: recompilable script function data to string:::return->super->toString
RecompilableScriptFunctionData#toStringVerbose()::: recompilable script function data to string verbose:::sb->new->StringBuilder->sb->append->append->append->if->sb->source->getName->append->append->append->append->return->sb->toString->super->toString
RecompilableScriptFunctionData#getFunctionName()::: recompilable script function data get function name:::return
RecompilableScriptFunctionData#inDynamicContext()::: recompilable script function data in dynamic context:::return->getFunctionFlag
RecompilableScriptFunctionData#functionName(FunctionNode)::: recompilable script function data function name:::if->fn->isAnonymous->return->kind->fn->getKind->if->name->NameCodec->fn->getIdent->getName->decode->return->name->substring->return->fn->getIdent->getName
RecompilableScriptFunctionData#tokenFor(FunctionNode)::: recompilable script function data token for:::position->Token->fn->getFirstToken->descPosition->lastToken->Token->fn->getLastToken->withDelimiter->length->Token->descPosition->Token->descType->Token->descLength->return->Token->toDesc
RecompilableScriptFunctionData#getDataFlags(FunctionNode)::: recompilable script function data get data flags:::flags->if->functionNode->isStrict->if->functionNode->needsCallee->if->functionNode->usesThis->functionNode->hasEval->if->functionNode->isVarArg->if->functionNode->getKind->functionNode->getKind->if->functionNode->isMethod->functionNode->isClassConstructor->return
RecompilableScriptFunctionData#getAllocatorMap(ScriptObject)::: recompilable script function data get allocator map:::return->allocationStrategy->getAllocatorMap
RecompilableScriptFunctionData#allocate(PropertyMap)::: recompilable script function data allocate:::return->allocationStrategy->allocate
RecompilableScriptFunctionData#reparse()::: recompilable script function data reparse:::cachedFunction->getCachedAst->if->return->descPosition->Token->descPosition->context->Context->getContextTrusted->parser->context->getEnv->new->Context.ThrowErrorManager->isStrict->context->getLogger->new->Parser->if->getFunctionFlag->parser->setFunctionName->parser->setReparsedFunction->program->parser->symbolName->Token->descLength->parse->return->isProgram->extractFunctionFromScript->setName
RecompilableScriptFunctionData#getCachedAst()::: recompilable script function data get cached ast:::lCachedAst->if->fn->get->if->return->cloneSymbols->else->if->serializedAst->cachedFn->get->if->return->cloneSymbols->deserializedFn->deserialize->new->SoftReference<>->return->return
RecompilableScriptFunctionData#setCachedAst(FunctionNode):::Sets the AST to cache in this function:::isSplit->astToCache->isSplit->symbolClonedAst->cloneSymbols->ref->new->SoftReference<>->if->astSerializerExecutorService->new->SerializedAst->execute
RecompilableScriptFunctionData#createAstSerializerExecutorService():::Creates the AST serializer executor service used for in-memory serialization of split functions' ASTs:::threads->Math->Options->Runtime->getRuntime->availableProcessors->getIntProperty->max->service->new->LinkedBlockingDeque<>->t->new->Thread->t->setDaemon->t->setPriority->return->new->ThreadPoolExecutor->service->allowCoreThreadTimeOut->return
RecompilableScriptFunctionData#deserialize(byte[])::: recompilable script function data deserialize:::env->installer->getContext->getEnv->timing->t1->System->nanoTime->try->return->AstDeserializer->deserialize->env->getNamespace->new->Namespace->initializeDeserialized->catch->finally->timing->System->nanoTime->accumulateTime
RecompilableScriptFunctionData#cloneSymbols(FunctionNode)::: recompilable script function data clone symbols:::symbolReplacements->new->IdentityHashMap<>->cached->fn->isCached->blockDefinedSymbols->fn->isSplit->Collections->new->IdentityHashMap<>->newSetFromMap->newFn->fn->new->SimpleNodeVisitor->accept->if->newBody->foreach->symbolReplacements->values->if->blockDefinedSymbols->contains->symbol->symbol->getFlags->setFlags->if->newFn->getBody->copyWithNewSymbols->newFn->setBody->newBody->putSymbol->return->newFn->setCached
RecompilableScriptFunctionData#getFunctionFlag(int)::: recompilable script function data get function flag:::return
RecompilableScriptFunctionData#isProgram()::: recompilable script function data is program:::return->getFunctionFlag
RecompilableScriptFunctionData#typeMap(MethodType)::: recompilable script function data type map:::if->return->if->CompiledFunction->isVarArgsType->return->return->explicitParams->needsCallee->new->TypeMap
RecompilableScriptFunctionData#newLocals(ScriptObject)::: recompilable script function data new locals:::locals->Global->newEmptyInstance->locals->setProto->return
RecompilableScriptFunctionData#getCompiler(FunctionNode, MethodType, ScriptObject)::: recompilable script function data get compiler:::return->newLocals->getCompiler
RecompilableScriptFunctionData#getInstallerForNewCode():::Returns a code installer for installing new code:::env->installer->getContext->getEnv->return->installer->getOnDemandCompilationInstaller
RecompilableScriptFunctionData#getCompiler(FunctionNode, MethodType, ScriptObject, Map, int[])::: recompilable script function data get compiler:::typeMap->typeMap->paramTypes->typeMap->getParameterTypes->typeInformationFile->OptimisticTypesPersistence->getLocationDescriptor->return->Compiler->getInstallerForNewCode->functionNode->getSource->isStrict->functionNode->isStrict->getEffectiveInvalidatedProgramPoints->forOnDemandCompilation
RecompilableScriptFunctionData#getEffectiveInvalidatedProgramPoints(Map, Object):::If the function being compiled already has its own invalidated program points map, use it:::if->return->loadedProgramPoints->OptimisticTypesPersistence->load->return->new->TreeMap<Integer,Type>
RecompilableScriptFunctionData#compileTypeSpecialization(MethodType, ScriptObject, boolean)::: recompilable script function data compile type specialization:::if->log->isEnabled->log->info->persistentCache->usePersistentCodeCache->cacheKey->if->typeMap->typeMap->paramTypes->typeMap->getParameterTypes->CodeStore->getCacheKey->newInstaller->getInstallerForNewCode->script->newInstaller->loadScript->if->Compiler->script->getCompilationId->updateCompilationId->return->script->installFunction->fn->reparse->compiler->getCompiler->compiledFn->compiler->fn->isCached->compile->if->compiledFn->hasApplyToCallSpecialization->compiler->persistClassInfo->return->compiler->getInvalidatedProgramPoints->new->FunctionInitializer
RecompilableScriptFunctionData#usePersistentCodeCache()::: recompilable script function data use persistent code cache:::return->installer->getContext->getEnv
RecompilableScriptFunctionData#explicitParams(MethodType)::: recompilable script function data explicit params:::if->CompiledFunction->isVarArgsType->return->noCalleeThisType->callSiteType->dropParameterTypes->callSiteParamCount->noCalleeThisType->parameterCount->paramTypes->noCalleeThisType->parameterArray->changed->for->i->generalized->MethodType->noCalleeThisType->returnType->methodType->if->getArity->return->generalized->Collections->getArity->nCopies->appendParameterTypes->return
RecompilableScriptFunctionData#extractFunctionFromScript(FunctionNode)::: recompilable script function data extract function from script:::fns->new->HashSet<>->script->getBody->new->SimpleNodeVisitor->accept->f->fns->iterator->next->if->getFunctionFlag->f->isDeclared->return->f->clearFlag->return
RecompilableScriptFunctionData#logLookup(boolean, MethodType)::: recompilable script function data log lookup:::if->log->isEnabled->log->DebugLogger->quote->info
RecompilableScriptFunctionData#lookup(FunctionInitializer, boolean)::: recompilable script function data lookup:::type->fnInit->getMethodType->logLookup->return->fnInit->getCode->lookupCodeMethod
RecompilableScriptFunctionData#lookup(FunctionNode)::: recompilable script function data lookup:::type->new->FunctionSignature->getMethodType->logLookup->return->fn->getCompileUnit->getCode->lookupCodeMethod
RecompilableScriptFunctionData#lookupCodeMethod(Class, MethodType)::: recompilable script function data lookup code method:::return->MH->findStatic
RecompilableScriptFunctionData#initializeCode(FunctionNode):::Initializes this function data with the eagerly generated version of the code:::if->code->isEmpty->functionNode->getId->functionNode->getCompileUnit->isInitializing->throw->new->IllegalStateException->lookup->functionNode->getFlags->addCode
RecompilableScriptFunctionData#initializeCode(FunctionInitializer):::Initializes this function with the given function code initializer.:::lookup->initializer->getFlags->addCode
RecompilableScriptFunctionData#addCode(MethodHandle, Map, MethodType, int)::: recompilable script function data add code:::cfn->new->CompiledFunction->code->add->return
RecompilableScriptFunctionData#addCode(FunctionInitializer, MethodType):::Add code with specific call site type:::if->isVariableArity->return->lookup->fnInit->getInvalidatedProgramPoints->fnInit->getFlags->addCode->handle->lookup->fromType->handle->type->toType->needsCallee->callSiteType->changeParameterType->callSiteType->dropParameterTypes->toType->fromType->returnType->changeReturnType->toCount->toType->parameterCount->fromCount->fromType->parameterCount->minCount->Math->min->for->i->if->toType->fromType->parameterList->subList->appendParameterTypes->else->if->toType->dropParameterTypes->return->lookup->asType->fnInit->getInvalidatedProgramPoints->fnInit->getFlags->addCode
RecompilableScriptFunctionData#getReturnType(MethodType, ScriptObject):::Returns the return type of a function specialization for particular parameter types.<br> Be aware that the way this is implemented, it forces full materialization (compilation and installation) of code for that specialization.:::return->getBest->type->returnType
RecompilableScriptFunctionData#getBest(MethodType, ScriptObject, Collection, boolean)::: recompilable script function data get best:::existingBest->pickFunction->if->pickFunction->if->compileTypeSpecialization->addCode->if->existingBest->isApplyToCall->best->lookupExactApplyToCall->if->return->compileTypeSpecialization->addCode->return
RecompilableScriptFunctionData#needsCallee()::: recompilable script function data needs callee:::return->getFunctionFlag
RecompilableScriptFunctionData#getFunctionFlags():::Returns the FunctionNode flags associated with this function data.:::return
RecompilableScriptFunctionData#getGenericType()::: recompilable script function data get generic type:::if->isVariableArity->return->MethodType->genericMethodType->return->MethodType->getArity->genericMethodType
RecompilableScriptFunctionData#getFunctionNodeId():::Return the function node id.:::return
RecompilableScriptFunctionData#getSource():::Get the source for the script:::return
RecompilableScriptFunctionData#getScriptFunctionData(int):::Return a script function data based on a function id, either this function if the id matches or a nested function based on functionId:::if->return->data->nestedFunctions->get->if->return->foreach->nestedFunctions->values->ndata->getScriptFunctionData->if->return->return
RecompilableScriptFunctionData#isGlobalSymbol(FunctionNode, String):::Check whether a certain name is a global symbol, i.e:::data->functionNode->getId->getScriptFunctionData->do->if->data->hasInternalSymbol->return->data->getParent->while->return
RecompilableScriptFunctionData#restoreFlags(LexicalContext, FunctionNode):::Restores the #getFunctionFlags() flags to a function node:::newFn->fn->setFlags->if->newFn->hasNestedEval->newFn->newFn->getBody->setNeedsScope->setBody->return
RecompilableScriptFunctionData#noDuplicateCode(CompiledFunction)::: recompilable script function data no duplicate code:::foreach->if->cf->type->compiledFunction->type->equals->return->return
RecompilableScriptFunctionData#writeObject(ObjectOutputStream)::: recompilable script function data write object:::localCachedAst->out->defaultWriteObject->if->out->writeObject->else->out->writeObject
RecompilableScriptFunctionData#readObject(java.io.ObjectInputStream)::: recompilable script function data read object:::in->defaultReadObject->in->readObject->createLogger
RecompilableScriptFunctionData#createLogger()::: recompilable script function data create logger:::Context->getContextTrusted->initLogger
RewriteException#create(UnwarrantedOptimismException, Object[], String[]):::Constructor for a rewrite exception thrown from an optimistic function.:::return->create
RewriteException#create(UnwarrantedOptimismException, Object[], String[], int[]):::Constructor for a rewrite exception thrown from a rest-of method.:::return->new->RewriteException
RewriteException#populateArrayBootstrap(MethodHandles.Lookup, String, MethodType, int):::Bootstrap method for populate array:::mh->POPULATE_ARRAY->methodHandle->MH->insertArguments->MH->type->parameterCount->asCollector->MH->asType->return->new->ConstantCallSite
RewriteException#mergeSlotsWithScope(Object[], String[])::: rewrite exception merge slots with scope:::locals->Global->newEmptyInstance->l->Math->min->runtimeScope->scopeName->symbolName->for->i->locals->setProto->return
RewriteException#populateArray(Object[], int, Object[]):::Array populator used for saving the local variable state into the array contained in the RewriteException:::System->arraycopy->return
RewriteException#toLongArray(Object, RewriteException):::Continuation handler calls this method when a local variable carried over into the continuation is expected to be a long array in the continued method:::if->return->in->out->new->longArr->for->i->return->e->replaceByteCodeValue
RewriteException#toDoubleArray(Object, RewriteException):::Continuation handler calls this method when a local variable carried over into the continuation is expected to be a double array in the continued method:::if->return->l->Array->getLength->out->new->doubleArr->for->i->return->e->replaceByteCodeValue
RewriteException#toObjectArray(Object, RewriteException):::Continuation handler calls this method when a local variable carried over into the continuation is expected to be an Object array in the continued method:::if->return->l->Array->getLength->out->new->ObjectArr->for->i->return->e->replaceByteCodeValue
RewriteException#instanceOrNull(Object, Class):::Continuation handler calls this method when a local variable carried over into the continuation is expected to have a certain type, but the value can have a different type coming from the deoptimized method as it was a dead store:::return->clazz->isInstance
RewriteException#assertArrayLength(Object[], int):::Asserts the length of an array:::for->i
RewriteException#replaceByteCodeValue(Object, T)::: rewrite exception replace byte code value:::for->i->return
RewriteException#getUOE()::: rewrite exception get e:::return->getCause
RewriteException#getReturnValueDestructive():::Get return value:::return->getUOE->getReturnValueDestructive
RewriteException#getReturnValueNonDestructive()::: rewrite exception get return value non destructive:::return->getUOE->getReturnValueNonDestructive
RewriteException#getReturnType():::Get return type:::return->getUOE->getReturnType
RewriteException#getProgramPoint():::Get the program point.:::return->getUOE->getProgramPoint
RewriteException#getByteCodeSlots():::Get the bytecode slot contents.:::return->byteCodeSlots->clone
RewriteException#getPreviousContinuationEntryPoints()::: rewrite exception get previous continuation entry points:::return->previousContinuationEntryPoints->clone
RewriteException#getRuntimeScope():::Returns the runtime scope that was in effect when the exception was thrown.:::return
RewriteException#stringify(Object)::: rewrite exception stringify:::if->return->str->returnValue->toString->if->else->if->else->if->return
RewriteException#getMessage()::: rewrite exception get message:::return->getMessage
RewriteException#getMessageShort():::Short toString function for message:::return->getMessage
RewriteException#getMessage(boolean)::: rewrite exception get message:::sb->new->StringBuilder->sb->append->getProgramPoint->append->append->if->slots->if->sb->append->Arrays->asList->append->append->sb->append->getReturnType->append->append->sb->append->getReturnValueNonDestructive->stringify->append->append->return->sb->toString
RewriteException#writeObject(ObjectOutputStream)::: rewrite exception write object:::throw->getClass->getName->new->NotSerializableException
RewriteException#readObject(ObjectInputStream)::: rewrite exception read object:::throw->getClass->getName->new->NotSerializableException
Scope#isScope()::: scope is scope:::return
Scope#hasWithScope()::: scope has with scope:::for->obj->obj->getProto->return
Scope#getSplitState():::Get the scope's split method state.:::return
Scope#setSplitState(int):::Set the scope's split method state.:::
Scope#getScopeCount():::Get number of Scope instances created:::return->count->sum
Scope#incrementCount()::: scope increment count:::if->count->increment
ScriptEnvironment#getOut():::Get the output stream for this environment:::return
ScriptEnvironment#getErr():::Get the error stream for this environment:::return
ScriptEnvironment#getNamespace():::Get the namespace for this environment:::return
ScriptEnvironment#getFiles():::Return the JavaScript files passed to the program:::return->options->getFiles
ScriptEnvironment#getArguments():::Return the user arguments to the program, i.e:::return->options->getArguments
ScriptEnvironment#hasLogger(String):::Check if there is a logger registered for a particular name: typically the "name" attribute of a Loggable annotation on a class:::return->_loggers->get
ScriptEnvironment#isTimingEnabled():::Check if compilation/runtime timings are enabled:::return->_timing->isEnabled
ScriptEnvironment#useAnonymousClasses(int):::Returns true if compilation should use anonymous classes.:::return
ScriptFunction#createStrictModeMap(PropertyMap)::: script function create strict mode map:::flags->newMap->newMap->newMap->newUserAccessors->addPropertyNoHistory->newMap->newMap->newUserAccessors->addPropertyNoHistory->return
ScriptFunction#createBoundFunctionMap(PropertyMap)::: script function create bound function map:::return->strictModeMap->strictModeMap->findProperty->deleteProperty
ScriptFunction#isStrict(int)::: script function is strict:::return
ScriptFunction#getMap(boolean)::: script function get map:::return
ScriptFunction#create(Object[], int, ScriptObject):::Factory method called by compiler generated code for functions that need parent scope.:::data->return->data->isStrict->getMap->Global->instance->new->ScriptFunction
ScriptFunction#create(Object[], int):::Factory method called by compiler generated code for functions that don't need parent scope.:::return->create
ScriptFunction#createAnonymous():::Create anonymous function that serves as Function.prototype:::return->new->ScriptFunction
ScriptFunction#createBuiltin(String, MethodHandle, Specialization[], int)::: script function create builtin:::func->new->ScriptFunction->func->setPrototype->func->func->getMap->findProperty->deleteOwnProperty->return
ScriptFunction#createBuiltin(String, MethodHandle, Specialization[]):::Factory method for non-constructor built-in functions:::return->ScriptFunction->createBuiltin
ScriptFunction#createBuiltin(String, MethodHandle):::Factory method for non-constructor built-in functions:::return->ScriptFunction->createBuiltin
ScriptFunction#createStrictBuiltin(String, MethodHandle):::Factory method for non-constructor built-in, strict functions:::return->ScriptFunction->createBuiltin
ScriptFunction.Bound#getTargetFunction()::: bound get target function:::return
ScriptFunction#createBound(Object, Object[]):::Creates a version of this function bound to a specific "self" and other arguments, as per Function.prototype.bind functionality in ECMAScript 5.1 section 15.3.4.5.:::return->data->makeBoundFunctionData->getTargetFunction->new->Bound
ScriptFunction#createSynchronized(Object):::Create a function that invokes this function synchronized on sync or the self object of the invocation.:::mh->MH->insertArguments->return->getName->createBuiltin
ScriptFunction#getClassName()::: script function get class name:::return
ScriptFunction#isInstance(ScriptObject):::ECMA 15.3.5.3 [[HasInstance]] (V) Step 3 if "prototype" value is not an Object, throw TypeError:::basePrototype->getTargetFunction->getPrototype->if->throw->ScriptRuntime->getTargetFunction->safeToString->ScriptRuntime->safeToString->typeError->for->proto->instance->getProto->proto->getProto->return
ScriptFunction#getTargetFunction():::Returns the target function for this function:::return
ScriptFunction#isBoundFunction()::: script function is bound function:::return->getTargetFunction
ScriptFunction#setArity(int):::Set the arity of this ScriptFunction:::data->setArity
ScriptFunction#isStrict():::Is this a ECMAScript 'use strict' function?:::return->data->isStrict
ScriptFunction#hasAllVarsInScope():::Is this is a function with all variables in scope?:::return->getFunctionFlags
ScriptFunction#needsWrappedThis():::Returns true if this is a non-strict, non-built-in function that requires non-primitive this argument according to ECMA 10.4.3.:::return->data->needsWrappedThis
ScriptFunction#needsWrappedThis(Object)::: script function needs wrapped this:::return->needsWrappedThis
ScriptFunction#invoke(Object, Object...):::Execute this script function.:::if->invokes->increment->return->data->invoke
ScriptFunction#construct(Object...):::Execute this script function as a constructor.:::return->data->construct
ScriptFunction#allocate():::Allocate function:::if->allocations->increment->prototype->getAllocatorPrototype->object->data->getAllocatorMap->allocate->if->object->setInitialProto->return
ScriptFunction#getAllocatorMap(ScriptObject):::Get the property map used by "allocate":::if->allocatorMap->isInvalidSharedMapFor->data->getAllocatorMap->return
ScriptFunction#getAllocatorPrototype():::Return the actual prototype used by "allocate":::prototype->getPrototype->if->return->return->Global->objectPrototype
ScriptFunction#safeToString()::: script function safe to string:::return->toSource
ScriptFunction#toString()::: script function to string:::return->data->toString
ScriptFunction#toSource():::Get this function as a String containing its source code:::return->data->toSource
ScriptFunction#getPrototype():::Get the prototype object for this function:::if->new->PrototypeObject->return
ScriptFunction#setPrototype(Object):::Set the prototype object for this function:::if
ScriptFunction#getBoundInvokeHandle(Object):::Return the invoke handle bound to a given ScriptObject self reference:::return->MH->data->getGenericInvoker->bindToCalleeIfNeeded->bindTo
ScriptFunction#bindToCalleeIfNeeded(MethodHandle):::Bind the method handle to this ScriptFunction instance if it needs a callee parameter:::return->ScriptFunctionData->needsCallee->MH->bindTo
ScriptFunction#getDocumentation():::Get the documentation for this function:::return->data->getDocumentation
ScriptFunction#getDocumentationKey():::Get the documentation key for this function:::return->data->getDocumentationKey
ScriptFunction#setDocumentationKey(String):::Set the documentation key for this function:::data->setDocumentationKey
ScriptFunction#getName():::Get the name for this function:::return->data->getName
ScriptFunction#getScope():::Get the scope for this function:::return
ScriptFunction#G$prototype(Object):::Prototype getter for this ScriptFunction - follows the naming convention used by Nasgen and the code generator:::return->getPrototype
ScriptFunction#S$prototype(Object, Object):::Prototype setter for this ScriptFunction - follows the naming convention used by Nasgen and the code generator:::if->setPrototype
ScriptFunction#G$length(Object):::Length getter - ECMA 15.3.3.2: Function.length:::if->return->getArity->return
ScriptFunction#G$name(Object):::Name getter - ECMA Function.name:::if->return->getName->return
ScriptFunction#getPrototype(ScriptFunction):::Get the prototype for this ScriptFunction:::if->proto->constructor->getPrototype->if->return->return
ScriptFunction#getConstructorCount()::: script function get constructor count:::return->constructorCount->longValue
ScriptFunction#getInvokes()::: script function get invokes:::return->invokes->longValue
ScriptFunction#getAllocations()::: script function get allocations:::return->allocations->longValue
ScriptFunction#findNewMethod(CallSiteDescriptor, LinkRequest)::: script function find new method:::type->desc->getMethodType->cf->data->getBestConstructor->bestCtorInv->cf->createConstructorInvocation->return->bestCtorInv->getInvocation->pairArguments->cf->getFlags->getFunctionGuard->bestCtorInv->getSwitchPoints->new->GuardedInvocation
ScriptFunction#wrapFilter(Object)::: script function wrap filter:::if->ScriptFunctionData->isPrimitiveThis->return->return->Context->getGlobal->wrapAsObject
ScriptFunction#globalFilter(Object)::: script function global filter:::return->Context->getGlobal
ScriptFunction#getLinkLogic(Object, Class):::Some receivers are primitive, in that case, according to the Spec we create a new native object per callsite with the wrap filter:::if->return->if->Context->getContextTrusted->getEnv->return->wrappedSelf->wrapFilter->if->if->hasPerInstanceAssumptions->return->return->getLinkLogic->return
ScriptFunction#findCallMethod(CallSiteDescriptor, LinkRequest):::StandardOperation.CALL call site signature: (callee, thiz, [args...]) generated method signature: (callee, thiz, [args...])  cases: (a) method has callee parameter     (1) for local/scope calls, we just bind thiz and drop the second argument:::type->desc->getMethodType->name->getName->isUnstable->request->isCallSiteUnstable->scopeCall->NashornCallSiteDescriptor->isScope->isCall->data->isBuiltin->equals->isApply->data->isBuiltin->equals->isApplyOrCall->if->handle->if->type->parameterCount->type->parameterType->methodHandle->else->MH->methodHandle->type->parameterCount->asCollector->return->new->GuardedInvocation->boundHandle->guard->if->args->request->getArguments->if->Bootstrap->isCallable->return->createApplyOrCallCall->programPoint->if->NashornCallSiteDescriptor->isOptimistic->NashornCallSiteDescriptor->getProgramPoint->cf->data->getBestInvoker->self->request->getArguments->forbidden->new->HashSet<>->sps->new->ArrayList<>->exceptionGuard->while->cf->isSpecialization->linkLogicClass->cf->getLinkLogicClass->linkLogic->getLinkLogic->if->linkLogic->checkLinkable->log->Context->getContextTrusted->getLogger->if->log->isEnabled->log->Arrays->request->getArguments->toString->info->linkLogic->getRelinkException->break->forbidden->add->oldCf->data->getBestInvoker->bestInvoker->cf->type->returnType->createFunctionInvocation->callHandle->bestInvoker->getInvocation->if->data->needsCallee->if->needsWrappedThis->MH->filterArguments->else->else->if->data->isBuiltin->Global->isBuiltInJavaExtend->MH->MH->getLookupPrivileged->bindTo->type->parameterType->type->parameterType->dropArguments->else->if->data->isBuiltin->Global->isBuiltInJavaTo->MH->MH->bindTo->type->parameterType->type->parameterType->dropArguments->else->if->needsWrappedThis->MH->filterArguments->MH->type->parameterType->dropArguments->else->MH->type->parameterType->dropArguments->if->needsWrappedThis->if->ScriptFunctionData->request->getArguments->isPrimitiveThis->MH->filterArguments->else->getNonStrictFunctionGuard->if->NashornCallSiteDescriptor->isApplyToCall->MH->type->parameterCount->asCollector->pairArguments->if->bestInvoker->getSwitchPoints->sps->Arrays->bestInvoker->getSwitchPoints->asList->addAll->spsArray->sps->isEmpty->sps->new->SwitchPointArr->toArray->return->cf->getFlags->getFunctionGuard->new->GuardedInvocation
ScriptFunction#getLookupPrivileged(CallSiteDescriptor)::: script function get lookup privileged:::return->AccessController->desc->getLookup->doPrivileged
ScriptFunction#createApplyOrCallCall(boolean, CallSiteDescriptor, LinkRequest, Object[])::: script function create apply or call call:::descType->desc->getMethodType->paramCount->descType->parameterCount->if->descType->parameterType->isArray->return->createVarArgApplyOrCallCall->passesThis->passesArgs->realArgCount->appliedFn->appliedFnNeedsWrappedThis->needsWrappedThis->appliedDesc->applyToCallSwitchPoint->Global->getBuiltinFunctionApplySwitchPoint->isApplyToCall->NashornCallSiteDescriptor->isApplyToCall->isFailedApplyToCall->applyToCallSwitchPoint->hasBeenInvalidated->appliedType->descType->dropParameterTypes->if->appliedType->insertParameterTypes->else->if->appliedType->changeParameterType->dropArgs->MH->type->if->pc->appliedType->parameterCount->for->i->if->appliedType->dropParameterTypes->if->if->appliedType->changeParameterType->if->appliedType->dropParameterTypes->else->appliedType->insertParameterTypes->appliedDesc->changeMethodType->appliedArgs->appliedType->parameterCount->new->ObjectArr->ScriptFunctionData->wrapThis->if->NativeFunction->toApplyArgs->else->if->if->tmp->new->ObjectArr->System->arraycopy->NativeFunction->toApplyArgs->else->System->arraycopy->else->if->appliedRequest->request->replaceArguments->appliedInvocation->try->Bootstrap->getLinkerServices->getGuardedInvocation->catch->throw->throw->new->RuntimeException->finally->applyFnType->descType->parameterType->inv->appliedInvocation->getInvocation->guard->appliedInvocation->getGuard->if->if->MH->filterArguments->if->guard->type->parameterCount->MH->filterArguments->else->MH->insertArguments->if->if->Context->getContextTrusted->getLogger->info->MH->asCollector->else->appliedInvocation->addSwitchPoint->if->bindImplicitThis->if->guard->type->parameterCount->bindImplicitThis->else->if->MH->filterArguments->if->guard->type->parameterCount->MH->filterArguments->guardType->guard->type->MH->dropArguments->MH->dropArguments->for->i->dropArgs->parameterCount->applyFnGuard->MH->insertArguments->MH->guardType->parameterArray->dropArguments->MH->foldArguments->return->appliedInvocation->replaceMethods
ScriptFunction#createVarArgApplyOrCallCall(boolean, CallSiteDescriptor, LinkRequest, Object[])::: script function create var arg apply or call call:::descType->desc->getMethodType->paramCount->descType->parameterCount->varArgs->copiedArgCount->varArgCount->spreadArgs->new->ObjectArr->System->arraycopy->System->arraycopy->spreadType->descType->dropParameterTypes->Collections->nCopies->appendParameterTypes->spreadDesc->desc->changeMethodType->spreadRequest->request->replaceArguments->spreadInvocation->createApplyOrCallCall->return->spreadInvocation->spreadInvocation->getInvocation->pairArguments->spreadInvocation->getGuard->spreadGuardArguments->replaceMethods
ScriptFunction#spreadGuardArguments(MethodHandle, MethodType)::: script function spread guard arguments:::guardType->guard->type->guardParamCount->guardType->parameterCount->descParamCount->descType->parameterCount->spreadCount->if->return->arrayConvertingGuard->if->guardType->parameterType->isArray->MH->filterArguments->else->return->ScriptObject->adaptHandleToVarArgCallSite
ScriptFunction#bindImplicitThis(boolean, MethodHandle)::: script function bind implicit this:::bound->if->MH->filterArguments->else->return->MH->insertArguments
ScriptFunction#getCallMethodHandle(MethodType, String):::Used for noSuchMethod/noSuchProperty and JSAdapter hooks:::return->data->getGenericInvoker->bindToCalleeIfNeeded->bindToNameIfNeeded->pairArguments
ScriptFunction#bindToNameIfNeeded(MethodHandle, String)::: script function bind to name if needed:::if->return->methodType->methodHandle->type->parameterCount->methodType->parameterCount->if->return->isVarArg->methodType->parameterType->isArray->if->return->MH->MH->insertArguments->filterArguments->return->MH->insertArguments
ScriptFunction#getFunctionGuard(ScriptFunction, int):::Get the guard that checks if a ScriptFunction is equal to a known ScriptFunction, using reference comparison:::if->isBuiltin->return->Guards->getIdentityGuard->return->MH->insertArguments
ScriptFunction#getNonStrictFunctionGuard(ScriptFunction):::Get a guard that checks if a ScriptFunction is equal to a known ScriptFunction using reference comparison, and whether the type of the second argument (this-object) is not a JavaScript primitive type.:::return->MH->insertArguments
ScriptFunction#isFunctionMH(Object, ScriptFunctionData)::: script function is function h:::return
ScriptFunction#isNonStrictFunction(Object, Object, ScriptFunctionData)::: script function is non strict function:::return
ScriptFunction#isApplyFunction(boolean, Object, Object)::: script function is apply function:::return
ScriptFunction#addZerothElement(Object[], Object)::: script function add zeroth element:::src->result->new->ObjectArr->System->arraycopy->return
ScriptFunction#invokeSync(ScriptFunction, Object, Object, Object...)::: script function invoke sync:::syncObj->synchronized->return->func->invoke
ScriptFunction#findOwnMH_S(String, Class, Class...)::: script function find own h_ s:::return->MH->MethodHandles->lookup->MH->type->findStatic
ScriptFunction#findOwnMH_V(String, Class, Class...)::: script function find own h_ v:::return->MH->MethodHandles->lookup->MH->type->findVirtual
ScriptFunctionData#getArity()::: script function data get arity:::return
ScriptFunctionData#getDocumentation()::: script function data get documentation:::return->toSource
ScriptFunctionData#getDocumentationKey()::: script function data get documentation key:::return
ScriptFunctionData#isVariableArity()::: script function data is variable arity:::return
ScriptFunctionData#setArity(int):::Used from e.g:::if->throw->String->valueOf->new->IllegalArgumentException
ScriptFunctionData#setDocumentationKey(String):::Used from nasgen generated code.:::
ScriptFunctionData#bind(CompiledFunction, ScriptFunction, Object, Object[])::: script function data bind:::boundInvoker->originalInv->createComposableInvoker->bindInvokeHandle->if->isConstructor->return->originalInv->createComposableConstructor->bindConstructHandle->new->CompiledFunction->return->new->CompiledFunction
ScriptFunctionData#isStrict():::Is this a ScriptFunction generated with strict semantics?:::return
ScriptFunctionData#getFunctionName():::Return the complete internal function name for this data, not anonymous or similar:::return->getName
ScriptFunctionData#isBuiltin()::: script function data is builtin:::return
ScriptFunctionData#isConstructor()::: script function data is constructor:::return
ScriptFunctionData#needsCallee()::: script function data needs callee:::
ScriptFunctionData#needsWrappedThis():::Returns true if this is a non-strict, non-built-in function that requires non-primitive this argument according to ECMA 10.4.3.:::return
ScriptFunctionData#toSource()::: script function data to source:::return
ScriptFunctionData#getName()::: script function data get name:::return
ScriptFunctionData#toString():::Get this function as a String containing its source code:::return->name->isEmpty
ScriptFunctionData#toStringVerbose():::Verbose description of data:::sb->new->StringBuilder->sb->append->name->isEmpty->append->append->code->size->append->append->append->return->sb->toString
ScriptFunctionData#getBestInvoker(MethodType, ScriptObject):::Pick the best invoker, i.e:::return->getBestInvoker
ScriptFunctionData#getBestInvoker(MethodType, ScriptObject, Collection)::: script function data get best invoker:::cf->getBest->return
ScriptFunctionData#getBestConstructor(MethodType, ScriptObject, Collection)::: script function data get best constructor:::if->isConstructor->throw->toSource->typeError->cf->callSiteType->insertParameterTypes->getBest->return
ScriptFunctionData#ensureCompiled():::If we can have lazy code generation, this is a hook to ensure that the code has been compiled:::
ScriptFunctionData#getGenericInvoker(ScriptObject):::Return a generic Object/Object invoker for this method:::lgenericInvokers->ensureGenericInvokers->invoker->if->createGenericInvoker->return
ScriptFunctionData#createGenericInvoker(ScriptObject)::: script function data create generic invoker:::return->getGeneric->createComposableInvoker->makeGenericMethod
ScriptFunctionData#getGenericConstructor(ScriptObject)::: script function data get generic constructor:::lgenericInvokers->ensureGenericInvokers->constructor->if->createGenericConstructor->return
ScriptFunctionData#createGenericConstructor(ScriptObject)::: script function data create generic constructor:::return->getGeneric->createComposableConstructor->makeGenericMethod
ScriptFunctionData#ensureGenericInvokers()::: script function data ensure generic invokers:::lgenericInvokers->if->new->GenericInvokers->return
ScriptFunctionData#widen(MethodType)::: script function data widen:::paramTypes->cftype->parameterCount->new->Class<?>Arr->for->i->cftype->parameterCount->return->MH->cftype->returnType->type
ScriptFunctionData#lookupExactApplyToCall(MethodType):::Used to find an apply to call version that fits this callsite:::adaptedType->needsCallee->type->dropParameterTypes->foreach->if->cf->isApplyToCall->continue->cftype->cf->type->if->cftype->parameterCount->adaptedType->parameterCount->continue->if->widen->widen->equals->return->return
ScriptFunctionData#pickFunction(MethodType, boolean)::: script function data pick function:::foreach->if->candidate->matchesCallSite->return->return
ScriptFunctionData#getBest(MethodType, ScriptObject, Collection, boolean):::Returns the best function for the specified call site type.:::
ScriptFunctionData#getBest(MethodType, ScriptObject, Collection):::Returns the best function for the specified call site type.:::return->getBest
ScriptFunctionData#isValidCallSite(MethodType)::: script function data is valid call site:::return->callSiteType->parameterCount->callSiteType->parameterType->isAssignableFrom
ScriptFunctionData#getGeneric(ScriptObject)::: script function data get generic:::return->getGenericType->getBest
ScriptFunctionData#getGenericType():::Get a method type for a generic invoker.:::
ScriptFunctionData#allocate(PropertyMap):::Allocates an object using this function's allocator.:::return
ScriptFunctionData#getAllocatorMap(ScriptObject):::Get the property map to use for objects allocated by this function.:::return
ScriptFunctionData#makeBoundFunctionData(ScriptFunction, Object, Object[]):::This method is used to create the immutable portion of a bound function:::allArgs->length->boundFlags->boundList->new->LinkedList<>->runtimeScope->fn->getScope->bindTarget->getGenericInvoker->getGenericConstructor->new->CompiledFunction->boundList->bind->add->return->Math->getArity->max->new->FinalScriptFunctionData
ScriptFunctionData#convertThisObject(Object):::Convert this argument for non-strict functions according to ES 10.4.3:::return->needsWrappedThis->wrapThis
ScriptFunctionData#wrapThis(Object)::: script function data wrap this:::if->if->JSType->nullOrUndefined->return->Context->getGlobal->if->isPrimitiveThis->return->Context->getGlobal->wrapAsObject->return
ScriptFunctionData#isPrimitiveThis(Object)::: script function data is primitive this:::return->JSType->isString
ScriptFunctionData#bindInvokeHandle(MethodHandle, ScriptFunction, Object, Object[]):::Creates an invoker method handle for a bound function.:::isTargetBound->targetFn->isBoundFunction->needsCallee->needsCallee->boundSelf->convertThisObject->boundInvoker->if->isVarArg->noArgBoundInvoker->if->else->if->MH->insertArguments->else->MH->bindTo->if->varArgBinder->else->else->argInsertPos->boundArgs->Math->originalInvoker->type->parameterCount->min->new->ObjectArr->next->if->if->System->arraycopy->MH->insertArguments->if->return->return->MH->dropArguments
ScriptFunctionData#bindConstructHandle(MethodHandle, ScriptFunction, Object[]):::Creates a constructor method handle for a bound function using the passed constructor handle.:::calleeBoundConstructor->fn->isBoundFunction->MH->MH->bindTo->dropArguments->if->return->if->isVarArg->return->varArgBinder->boundArgs->maxArgCount->calleeBoundConstructor->type->parameterCount->if->else->new->ObjectArr->System->arraycopy->return->MH->insertArguments
ScriptFunctionData#makeGenericMethod(MethodHandle):::Takes a method handle, and returns a potentially different method handle that can be used in ScriptFunction#invoke(Object, Object...) or {code ScriptFunction#construct(Object, Object...)}:::type->mh->type->newType->makeGenericType->return->type->equals->mh->asType
ScriptFunctionData#makeGenericType(MethodType)::: script function data make generic type:::newType->type->generic->if->isVarArg->newType->type->parameterCount->changeParameterType->if->needsCallee->newType->changeParameterType->return
ScriptFunctionData#invoke(ScriptFunction, Object, Object...):::Execute this script function.:::mh->fn->getScope->getGenericInvoker->selfObj->convertThisObject->args->DebuggerSupport->notifyInvoke->if->isVarArg->if->needsCallee->return->mh->invokeExact->return->mh->invokeExact->paramCount->mh->type->parameterCount->if->needsCallee->switch->return->mh->invokeExact->return->mh->getArg->invokeExact->return->mh->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->withArguments->invokeWithArguments->switch->return->mh->invokeExact->return->mh->getArg->invokeExact->return->mh->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->withArguments->invokeWithArguments
ScriptFunctionData#construct(ScriptFunction, Object...)::: script function data construct:::mh->fn->getScope->getGenericConstructor->args->DebuggerSupport->notifyInvoke->if->isVarArg->if->needsCallee->return->mh->invokeExact->return->mh->invokeExact->paramCount->mh->type->parameterCount->if->needsCallee->switch->return->mh->invokeExact->return->mh->getArg->invokeExact->return->mh->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->withArguments->invokeWithArguments->switch->return->mh->invokeExact->return->mh->getArg->invokeExact->return->mh->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->withArguments->invokeWithArguments
ScriptFunctionData#getArg(Object[], int)::: script function data get arg:::return
ScriptFunctionData#withArguments(ScriptFunction, int, Object[])::: script function data with arguments:::finalArgs->new->ObjectArr->nextArg->if->for->i->while->return
ScriptFunctionData#withArguments(ScriptFunction, Object, int, Object[])::: script function data with arguments:::finalArgs->new->ObjectArr->nextArg->if->for->i->while->return
ScriptFunctionData#varArgBinder(MethodHandle, Object[]):::Takes a variable-arity method and binds a variable number of arguments in it:::return->MH->mh->type->parameterCount->MH->bindTo->filterArguments
ScriptFunctionData#needsCallee(MethodHandle):::Heuristic to figure out if the method handle has a callee argument:::return->mh->type->needsCallee
ScriptFunctionData#needsCallee(MethodType)::: script function data needs callee:::length->type->parameterCount->if->return->param0->type->parameterType->return->type->parameterType
ScriptFunctionData#isVarArg(MethodHandle):::Check if a javascript function methodhandle is a vararg handle:::return->mh->type->isVarArg
ScriptFunctionData#isVarArg(MethodType)::: script function data is var arg:::return->type->type->parameterCount->parameterType->isArray
ScriptFunctionData#inDynamicContext():::Is this ScriptFunction declared in a dynamic context:::return
ScriptFunctionData#bindVarArgs(Object[], Object[])::: script function data bind var args:::if->return->array1->clone->l2->if->return->array1->clone->l1->concat->new->ObjectArr->System->arraycopy->System->arraycopy->return
ScriptFunctionData#findOwnMH(String, Class, Class...)::: script function data find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
ScriptFunctionData#readObject(ObjectInputStream)::: script function data read object:::in->defaultReadObject->new->LinkedList<>
ScriptingFunctions#readLine(Object, Object):::Nashorn extension: global.readLine (scripting-mode-only) Read one line of input from the standard input.:::return->readLine
ScriptingFunctions#readFully(Object, Object):::Nashorn extension: Read the entire contents of a text file and return as String.:::f->if->else->if->JSType->isString->toString->new->java.io.File->if->f->isFile->throw->ScriptRuntime->safeToString->typeError->return->Source->readFully->new->String
ScriptingFunctions#exec(Object, Object...):::Nashorn extension: exec a string in a separate process.:::arg0->arg1->arg2->arg3->inputStream->outputStream->errorStream->script->tokens->inputString->if->array->JSType->toJavaArray->new->ArrayList<>->tokens->Arrays->asList->addAll->else->JSType->toString->if->else->JSType->toString->if->if->global->Context->getGlobal->environment->new->HashMap<>->env->global->get->if->envProperties->envProperties->entrySet->stream->environment->JSType->entry->getKey->toString->JSType->entry->getValue->toString->put->forEach->exec->global->get->executor->new->CommandExecutor->executor->setInputString->executor->setInputStream->executor->setOutputStream->executor->setErrorStream->executor->setEnvironment->if->executor->process->else->executor->process->outString->executor->getOutputString->errString->executor->getErrorString->exitCode->executor->getExitCode->global->set->global->set->global->set->return
ScriptingFunctions#setReadLineHelper(Function)::: scripting functions set read line helper:::Objects->requireNonNull
ScriptingFunctions#getReadLineHelper()::: scripting functions get read line helper:::return
ScriptingFunctions#readLine(Object)::: scripting functions read line:::p->JSType->toString->if->return->readLineHelper->apply->else->print->reader->new->InputStreamReader->new->BufferedReader->return->reader->readLine
ScriptingFunctions#findOwnMH(String, Class, Class...)::: scripting functions find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic
ScriptLoader#getContext()::: script loader get context:::return
ScriptLoader#createModule(String)::: script loader create module:::structMod->context->getStructLoader->getModule->builder->ModuleDescriptor->Set->of->newModule->requires->NASHORN_MODULE->getName->requires->structMod->getName->requires->Set->of->packages->if->builder->requires->if->builder->requires->descriptor->builder->build->mod->Context->structMod->getLayer->createModuleTrusted->loadModuleManipulator->return
ScriptLoader#loadClass(String, boolean)::: script loader load class:::checkPackageAccess->cl->super->loadClass->if->structLoader->context->getStructLoader->if->cl->getClassLoader->structLoader->addModuleExport->return
ScriptLoader#findClass(String)::: script loader find class:::appLoader->context->getAppLoader->if->name->startsWith->throw->new->ClassNotFoundException->return->appLoader->loadClass
ScriptLoader#installClass(String, byte[], CodeSource):::Install a class for use by the Nashorn runtime:::return->Objects->requireNonNull->defineClass
ScriptObject#isGlobal():::Check whether this is a global object:::return
ScriptObject#alignUp(int, int)::: script object align up:::return
ScriptObject#spillAllocationLength(int):::Given a number of properties, return the aligned to SPILL_RATE buffer size required for the smallest spill pool needed to house them:::return->alignUp
ScriptObject#addBoundProperties(ScriptObject):::Copy all properties from the source object with their receiver bound to the source:::source->getMap->getProperties->addBoundProperties
ScriptObject#addBoundProperties(ScriptObject, Property[]):::Copy all properties from the array with their receiver bound to the source.:::newMap->this->getMap->extensible->newMap->isExtensible->foreach->addBoundProperty->this->setMap
ScriptObject#addBoundProperty(PropertyMap, ScriptObject, Property, boolean):::Add a bound property from source, using the interim property map propMap, and return the new interim property map.:::newMap->key->property->getKey->oldProp->newMap->findProperty->if->if->throw->key->toString->ScriptRuntime->safeToString->typeError->if->prop->this->property->getFlags->property->getGetterFunction->property->getSetterFunction->newUserAccessors->newMap->addPropertyNoHistory->else->newMap->addPropertyBind->else->if->property->isFunctionDeclaration->oldProp->isConfigurable->if->oldProp->isWritable->oldProp->isEnumerable->throw->key->toString->ScriptRuntime->safeToString->typeError->return
ScriptObject#addBoundProperties(Object, AccessorProperty[]):::Copy all properties from the array with their receiver bound to the source.:::newMap->this->getMap->extensible->newMap->isExtensible->foreach->key->property->getKey->if->newMap->findProperty->if->throw->key->toString->ScriptRuntime->safeToString->typeError->newMap->addPropertyBind->this->setMap
ScriptObject#bindTo(MethodHandle, Object):::Bind the method handle to the specified receiver, while preserving its original type (it will just ignore the first argument in lieu of the bound argument).:::return->MH->MH->bindTo->methodHandle->type->parameterType->dropArguments
ScriptObject#propertyIterator():::Return a property iterator.:::return->new->KeyIterator
ScriptObject#valueIterator():::Return a property value iterator.:::return->new->ValueIterator
ScriptObject#isAccessorDescriptor():::ECMA 8.10.1 IsAccessorDescriptor ( Desc ):::return->has->has
ScriptObject#isDataDescriptor():::ECMA 8.10.2 IsDataDescriptor ( Desc ):::return->has->has
ScriptObject#toPropertyDescriptor():::ECMA 8.10.5 ToPropertyDescriptor ( Obj ):::global->Context->getGlobal->desc->if->isDataDescriptor->if->has->has->throw->typeError->global->newDataDescriptor->else->if->isAccessorDescriptor->if->has->has->throw->typeError->global->newAccessorDescriptor->else->global->newGenericDescriptor->return->desc->fillFrom
ScriptObject#toPropertyDescriptor(Global, Object):::ECMA 8.10.5 ToPropertyDescriptor ( Obj ):::if->return->toPropertyDescriptor->throw->ScriptRuntime->safeToString->typeError
ScriptObject#getOwnPropertyDescriptor(Object):::ECMA 8.12.1 [[GetOwnProperty]] (P):::property->getMap->findProperty->global->Context->getGlobal->if->get->property->getGetterFunction->set->property->getSetterFunction->configurable->property->isConfigurable->enumerable->property->isEnumerable->writable->property->isWritable->if->property->isAccessorProperty->return->global->newAccessorDescriptor->return->global->getWithProperty->newDataDescriptor->index->getArrayIndex->array->getArray->if->array->has->return->array->getDescriptor->return
ScriptObject#getPropertyDescriptor(String):::ECMA 8.12.2 [[GetProperty]] (P):::res->getOwnPropertyDescriptor->if->return->else->if->getProto->return->getProto->getOwnPropertyDescriptor->else->return
ScriptObject#invalidateGlobalConstant(Object):::Invalidate any existing global constant method handles that may exist for key.:::globalConstants->getGlobalConstants->if->globalConstants->delete
ScriptObject#defineOwnProperty(Object, Object, boolean):::ECMA 8.12.9 [[DefineOwnProperty]] (P, Desc, Throw):::global->Context->getGlobal->desc->toPropertyDescriptor->current->getOwnPropertyDescriptor->invalidateGlobalConstant->if->if->isExtensible->addOwnProperty->return->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->currentDesc->newDesc->if->newDesc->type->newDesc->has->newDesc->has->return->if->newDesc->hasAndEquals->return->if->currentDesc->isConfigurable->if->newDesc->has->newDesc->isConfigurable->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->if->newDesc->has->currentDesc->isEnumerable->newDesc->isEnumerable->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->propFlags->Property->mergeFlags->property->getMap->findProperty->if->currentDesc->type->newDesc->type->newDesc->type->if->currentDesc->isConfigurable->currentDesc->isWritable->if->newDesc->has->newDesc->isWritable->newDesc->has->ScriptRuntime->currentDesc->getValue->newDesc->getValue->sameValue->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->newValue->newDesc->has->value->newDesc->getValue->currentDesc->getValue->if->modifyOwnProperty->set->getMap->findProperty->if->addOwnProperty->checkIntegerKey->else->modifyOwnProperty->else->if->currentDesc->type->newDesc->type->newDesc->type->if->currentDesc->isConfigurable->if->newDesc->has->ScriptRuntime->currentDesc->getGetter->newDesc->getGetter->sameValue->newDesc->has->ScriptRuntime->currentDesc->getSetter->newDesc->getSetter->sameValue->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->newDesc->has->newDesc->getGetter->currentDesc->getGetter->newDesc->has->newDesc->getSetter->currentDesc->getSetter->modifyOwnProperty->else->if->currentDesc->isConfigurable->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->value->newDesc->has->newDesc->isConfigurable->currentDesc->isConfigurable->if->newDesc->has->newDesc->isEnumerable->currentDesc->isEnumerable->if->type->newDesc->type->if->newDesc->has->newDesc->isWritable->if->deleteOwnProperty->newDesc->getValue->addOwnProperty->else->if->if->newDesc->has->newDesc->getGetter->newDesc->has->newDesc->getSetter->addOwnProperty->else->newDesc->has->newDesc->getGetter->newDesc->has->newDesc->getSetter->modifyOwnProperty->checkIntegerKey->return
ScriptObject#defineOwnProperty(int, Object):::Almost like defineOwnProperty(int,Object) for arrays this one does not add 'gap' elements (like the array one does).:::longIndex->ArrayIndex->toLongIndex->oldLength->getArray->length->if->getArray->ensure->safeDelete->setArray->getArray->set->setArray
ScriptObject#checkIntegerKey(Object)::: script object check integer key:::index->getArrayIndex->if->isValidArrayIndex->data->getArray->if->data->has->data->delete->setArray
ScriptObject#addOwnProperty(Object, PropertyDescriptor):::Add a new property to the object.:::pdesc->propFlags->Property->toFlags->if->pdesc->type->global->Context->getGlobal->dDesc->global->newDataDescriptor->dDesc->fillFrom->type->pdesc->type->if->pdesc->getValue->addOwnProperty->else->if->pdesc->has->pdesc->getGetter->pdesc->has->pdesc->getSetter->addOwnProperty->checkIntegerKey
ScriptObject#findProperty(Object, boolean):::Low level property API (not using property descriptors)  Find a property in the prototype hierarchy:::return->findProperty
ScriptObject#findProperty(Object, boolean, boolean, ScriptObject):::Low level property API (not using property descriptors)  Find a property in the prototype hierarchy:::selfMap->getMap->property->selfMap->findProperty->if->return->new->FindProperty->if->myProto->getProto->find->myProto->findProperty->checkSharedProtoMap->return->return
ScriptObject#hasProperty(Object, boolean):::Low level property API:::if->getMap->findProperty->return->if->myProto->getProto->if->return->myProto->hasProperty->return
ScriptObject#findBuiltinSwitchPoint(Object)::: script object find builtin switch point:::for->myProto->getProto->myProto->getProto->return
ScriptObject#addOwnProperty(Object, int, ScriptFunction, ScriptFunction):::Add a new property to the object:::return->newUserAccessors->addOwnProperty
ScriptObject#addOwnProperty(Object, int, Object):::Add a new property to the object:::return->addSpillProperty
ScriptObject#addOwnProperty(Property):::Add a new property to the object:::oldMap->getMap->while->newMap->oldMap->addProperty->if->compareAndSetMap->getMap->oldProperty->oldMap->newProperty->getKey->findProperty->if->return->else->return
ScriptObject#erasePropertyValue(Property)::: script object erase property value:::if->property->isAccessorProperty->property->setValue
ScriptObject#deleteOwnProperty(Property):::Delete a property from the object.:::erasePropertyValue->oldMap->getMap->while->newMap->oldMap->deleteProperty->if->return->if->compareAndSetMap->getMap->else->if->getMap->setAccessors->property->getKey->invalidateGlobalConstant->return
ScriptObject#initUserAccessors(String, ScriptFunction, ScriptFunction):::Fast initialization functions for ScriptFunctions that are strict, to avoid creating setters that probably aren't used:::map->getMap->property->map->findProperty->property->getSlot->ensureSpillSize->new->UserAccessorProperty.Accessors->property->getSlot
ScriptObject#modifyOwnProperty(Property, int, ScriptFunction, ScriptFunction):::Modify a property in the object:::newProperty->if->uc->slot->uc->getSlot->gs->uc->getAccessors->gs->set->if->uc->getFlags->return->uc->getKey->new->UserAccessorProperty->else->erasePropertyValue->oldProperty->getKey->newUserAccessors->return->modifyOwnProperty
ScriptObject#modifyOwnProperty(Property, int):::Modify a property in the object:::return->oldProperty->setFlags->modifyOwnProperty
ScriptObject#modifyOwnProperty(Property, Property):::Modify a property in the object, replacing a property with a new one:::if->return->oldMap->getMap->while->newMap->oldMap->replaceProperty->if->compareAndSetMap->getMap->oldPropertyLookup->oldMap->oldProperty->getKey->findProperty->if->oldPropertyLookup->equals->return->else->return
ScriptObject#setUserAccessors(Object, ScriptFunction, ScriptFunction):::Update getter and setter in an object literal.:::realKey->JSType->toPropertyKey->oldProperty->getMap->findProperty->if->oldProperty->getFlags->modifyOwnProperty->else->oldProperty->getFlags->newUserAccessors->addOwnProperty
ScriptObject#getIntValue(FindProperty, int)::: script object get int value:::getter->find->getGetter->if->try->return->getter->find->getGetterReceiver->invokeExact->catch->throw->throw->new->RuntimeException->finally->return
ScriptObject#getDoubleValue(FindProperty, int)::: script object get double value:::getter->find->getGetter->if->try->return->getter->find->getGetterReceiver->invokeExact->catch->throw->throw->new->RuntimeException->finally->return
ScriptObject#getCallMethodHandle(FindProperty, MethodType, String):::Return methodHandle of value function for call.:::return->find->getObjectValue->getCallMethodHandle
ScriptObject#getCallMethodHandle(Object, MethodType, String):::Return methodHandle of value function for call.:::return->getCallMethodHandle
ScriptObject#getWithProperty(Property):::Get value using found property.:::return->new->FindProperty->getObjectValue
ScriptObject#getProperty(String):::Get a property given a key:::return->getMap->findProperty
ScriptObject#getArgument(int):::Overridden by jdk.nashorn.internal.objects.NativeArguments class (internal use.) Used for argument access in a vararg function using parameter name:::return->get
ScriptObject#setArgument(int, Object):::Overridden by jdk.nashorn.internal.objects.NativeArguments class (internal use.) Used for argument access in a vararg function using parameter name:::set
ScriptObject#getContext():::Return the current context from the object's map.:::return->Context->getClass->fromClass
ScriptObject#getMap():::Return the map of an object.:::return
ScriptObject#setMap(PropertyMap):::Set the initial map.:::
ScriptObject#compareAndSetMap(PropertyMap, PropertyMap):::Conditionally set the new map if the old map is the same.:::if->return->return
ScriptObject#getProto():::Return the __proto__ of an object.:::return
ScriptObject#getProto(int):::Get the proto of a specific depth:::p->for->i->return
ScriptObject#setProto(ScriptObject):::Set the __proto__ of an object.:::oldProto->if->getMap->protoChanged->getMap->changeProto->setMap
ScriptObject#setInitialProto(ScriptObject):::Set the initial __proto__ of this object:::
ScriptObject#setGlobalObjectProto(ScriptObject):::Invoked from generated bytecode to initialize the prototype of object literals to the global Object prototype.:::obj->Global->objectPrototype->setInitialProto
ScriptObject#setPrototypeOf(Object):::Set the __proto__ of an object with checks:::if->if->isExtensible->if->getProto->return->throw->ScriptRuntime->safeToString->typeError->p->while->if->throw->ScriptRuntime->safeToString->typeError->p->getProto->setProto->else->throw->ScriptRuntime->safeToString->ScriptRuntime->safeToString->typeError
ScriptObject#setProtoFromLiteral(Object):::Set the __proto__ of an object from an object literal:::if->setPrototypeOf->else->Global->objectPrototype->setPrototypeOf
ScriptObject#getAllKeys():::return an array of all property keys - all inherited, non-enumerable included:::keys->new->HashSet<>->nonEnumerable->new->HashSet<>->for->self->self->getProto->return->keys->new->StringArr->toArray
ScriptObject#getOwnKeys(boolean):::Return an array of own property keys associated with the object.:::return->getOwnKeys
ScriptObject#getOwnSymbols(boolean):::Return an array of own property keys associated with the object.:::return->getOwnKeys
ScriptObject#getOwnKeys(Class, boolean, Set):::return an array of own property keys associated with the object.:::keys->new->ArrayList<>->selfMap->this->getMap->array->getArray->if->for->iter->array->indexIterator->iter->hasNext->foreach->selfMap->getProperties->enumerable->property->isEnumerable->key->property->getKey->if->type->isInstance->continue->if->keys->add->else->if->if->nonEnumerable->contains->keys->add->else->if->nonEnumerable->add->return->keys->Array->keys->size->newInstance->toArray
ScriptObject#hasArrayEntries():::Check if this ScriptObject has array entries:::return->getArray->length->getMap->containsArrayKeys
ScriptObject#getClassName():::Return the valid JavaScript type name descriptor:::return
ScriptObject#getLength():::length is a well known property:::return->get
ScriptObject#safeToString():::Stateless toString for ScriptObjects.:::return->getClassName
ScriptObject#getDefaultValue(Class):::Return the default value of the object with a given preferred type hint:::return->Context->getGlobal->getDefaultValue
ScriptObject#isInstance(ScriptObject):::Checking whether a script object is an instance of another:::return
ScriptObject#preventExtensions():::Flag this ScriptObject as non extensible:::oldMap->getMap->while->getMap->preventExtensions->compareAndSetMap->getMap->array->getArray->ArrayData->preventExtension->setArray->return
ScriptObject#isArray(Object):::Check whether if an Object (not just a ScriptObject) represents JavaScript array:::return->isArray
ScriptObject#isArray():::Check if this ScriptObject is an array:::return
ScriptObject#setIsArray():::Flag this ScriptObject as being an array:::
ScriptObject#isArguments():::Check if this ScriptObject is an arguments vector:::return
ScriptObject#setIsArguments():::Flag this ScriptObject as being an arguments vector:::
ScriptObject#isLengthNotWritable():::Check if this object has non-writable length property:::return
ScriptObject#setIsLengthNotWritable():::Flag this object as having non-writable length property.:::
ScriptObject#getArray(Class):::Get the ArrayData, for this ScriptObject, ensuring it is of a type that can handle elementType:::if->return->newArrayData->arrayData->convert->if->return
ScriptObject#getArray():::Get the ArrayData for this ScriptObject if it is an array:::return
ScriptObject#setArray(ArrayData):::Set the ArrayData for this ScriptObject if it is to be an array:::
ScriptObject#isExtensible():::Check if this ScriptObject is extensible:::return->getMap->isExtensible
ScriptObject#seal():::ECMAScript 15.2.3.8 - seal implementation:::oldMap->getMap->while->newMap->getMap->seal->if->compareAndSetMap->getMap->else->ArrayData->getArray->seal->setArray->return
ScriptObject#isSealed():::Check whether this ScriptObject is sealed:::return->getMap->isSealed
ScriptObject#freeze():::ECMA 15.2.39 - freeze implementation:::oldMap->getMap->while->newMap->getMap->freeze->if->compareAndSetMap->getMap->else->ArrayData->getArray->freeze->setArray->return
ScriptObject#isFrozen():::Check whether this ScriptObject is frozen:::return->getMap->isFrozen
ScriptObject#isScope():::Check whether this ScriptObject is scope:::return
ScriptObject#setIsBuiltin():::Tag this script object as built in:::
ScriptObject#isBuiltin():::Check if this script object is built in:::return
ScriptObject#setIsInternal():::Tag this script object as internal object that should not be visible to script code.:::
ScriptObject#isInternal():::Check if this script object is an internal object that should not be visible to script code.:::return
ScriptObject#clear(boolean):::Clears the properties from a ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::iter->propertyIterator->while->iter->hasNext->iter->next->delete
ScriptObject#containsKey(Object):::Checks if a property with a given key is present in a ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::return->has
ScriptObject#containsValue(Object):::Checks if a property with a given value is present in a ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::iter->valueIterator->while->iter->hasNext->if->iter->next->equals->return->return
ScriptObject#entrySet():::Returns the set of <property, value> entries that make up this ScriptObject's properties (java.util.Map-like method to help ScriptObjectMirror implementation):::iter->propertyIterator->entries->new->HashSet<>->while->iter->hasNext->key->iter->next->entries->get->new->AbstractMap.SimpleImmutableEntry<>->add->return->Collections->unmodifiableSet
ScriptObject#isEmpty():::Check whether a ScriptObject contains no properties (java.util.Map-like method to help ScriptObjectMirror implementation):::return->propertyIterator->hasNext
ScriptObject#keySet():::Return the set of keys (property names) for all properties in this ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::iter->propertyIterator->keySet->new->HashSet<>->while->iter->hasNext->keySet->iter->next->add->return->Collections->unmodifiableSet
ScriptObject#put(Object, Object, boolean):::Put a property in the ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::oldValue->get->scriptObjectFlags->set->return
ScriptObject#putAll(Map, boolean):::Put several properties in the ScriptObject given a mapping of their keys to their values (java.util.Map-like method to help ScriptObjectMirror implementation):::scriptObjectFlags->foreach->otherMap->entrySet->entry->getKey->entry->getValue->set
ScriptObject#remove(Object, boolean):::Remove a property from the ScriptObject:::oldValue->get->delete->return
ScriptObject#size():::Return the size of the ScriptObject - i.e:::n->for->iter->propertyIterator->iter->hasNext->iter->next->return
ScriptObject#values():::Return the values of the properties in the ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::values->size->new->ArrayList<>->iter->valueIterator->while->iter->hasNext->values->iter->next->add->return->Collections->unmodifiableList
ScriptObject#lookup(CallSiteDescriptor, LinkRequest):::Lookup method that, given a CallSiteDescriptor, looks up the target MethodHandle and creates a GuardedInvocation with the appropriate guard(s).:::switch->NashornCallSiteDescriptor->getStandardOperation->return->desc->getOperation->findGetMethod->findGetIndexMethod->return->desc->getOperation->findSetMethod->findSetIndexMethod->inv->NashornCallSiteDescriptor->isStrict->name->NamedOperation->desc->getOperation->getName->if->return->inv->MH->inv->getInvocation->insertArguments->inv->getGuard->replaceMethods->return->return->findCallMethod->return->findNewMethod->return
ScriptObject#findNewMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate New method for an invoke dynamic call.:::return->notAFunction
ScriptObject#findCallMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate CALL method for an invoke dynamic call:::return->notAFunction
ScriptObject#notAFunction(CallSiteDescriptor)::: script object not function:::throw->NashornCallSiteDescriptor->getFunctionErrorMessage->typeError
ScriptObject#hasWithScope():::Test whether this object contains in its prototype chain or is itself a with-object.:::return
ScriptObject#addProtoFilter(MethodHandle, int):::Add a filter to the first argument of methodHandle that calls its #getProto() method depth times.:::if->return->listIndex->filter->PROTO_FILTERS->size->PROTO_FILTERS->get->if->addProtoFilter->PROTO_FILTERS->add->PROTO_FILTERS->set->return->MH->filter->filter->type->methodHandle->type->parameterType->changeReturnType->asType->filterArguments
ScriptObject#findGetMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate GET method for an invoke dynamic call.:::explicitInstanceOfCheck->explicitInstanceOfCheck->name->NashornCallSiteDescriptor->getOperand->if->NashornCallSiteDescriptor->isApplyToCall->if->Global->isBuiltinFunctionPrototypeApply->if->request->isCallSiteUnstable->hasWithScope->return->NashornCallSiteDescriptor->isMethodFirstOperation->findMegaMorphicGetMethod->find->NashornCallSiteDescriptor->isScope->findProperty->mh->if->if->NashornCallSiteDescriptor->isMethodFirstOperation->return->noSuchProperty->else->return->noSuchMethod->globalConstants->getGlobalConstants->if->cinv->globalConstants->findGetMethod->if->return->returnType->desc->getMethodType->returnType->property->find->getProperty->programPoint->NashornCallSiteDescriptor->isOptimistic->NashornCallSiteDescriptor->getProgramPoint->find->getGetter->guard->NashornGuards->getGuard->owner->find->getOwner->exception->protoSwitchPoints->if->Lookup->emptyGetter->getProtoSwitchPoints->else->if->find->isSelf->if->property->isAccessorProperty->find->getProtoChainLength->addProtoFilter->getProtoSwitchPoints->else->inv->new->GuardedInvocation->return->inv->findBuiltinSwitchPoint->addSwitchPoint
ScriptObject#findMegaMorphicGetMethod(CallSiteDescriptor, String, boolean)::: script object find mega morphic get method:::Context->getContextTrusted->getLogger->warning->invoker->MH->NashornCallSiteDescriptor->isScope->insertArguments->guard->desc->getMethodType->getScriptObjectGuard->return->new->GuardedInvocation
ScriptObject#megamorphicGet(String, boolean, boolean)::: script object megamorphic get:::find->findProperty->if->value->find->getObjectValue->if->find->getSelf->find->getSelf->isInternal->return->find->getSelf->createBound->return->return->getNoSuchMethod->invokeNoSuchProperty
ScriptObject#declareAndSet(String, Object)::: script object declare and set:::findProperty->declareAndSet
ScriptObject#declareAndSet(FindProperty, Object)::: script object declare and set:::oldMap->getMap->property->find->getProperty->newMap->oldMap->property->removeFlags->replaceProperty->setMap->property->getKey->set
ScriptObject#findGetIndexMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate GETINDEX method for an invoke dynamic call.:::callType->desc->getMethodType->returnType->callType->returnType->returnClass->returnType->isPrimitive->keyClass->callType->parameterType->explicitInstanceOfCheck->explicitInstanceOfCheck->name->if->returnClass->isPrimitive->returnTypeName->returnClass->getName->Character->returnTypeName->charAt->toUpperCase->returnTypeName->returnTypeName->length->substring->else->mh->findGetIndexMethodHandle->return->getScriptObjectGuard->new->GuardedInvocation
ScriptObject#getScriptObjectGuard(MethodType, boolean)::: script object get script object guard:::return->type->parameterType->isAssignableFrom->NashornGuards->getScriptObjectGuard
ScriptObject#findGetIndexMethodHandle(Class, String, Class, CallSiteDescriptor):::Find a handle for a getIndex method:::if->returnType->isPrimitive->return->findOwnMH_V->return->MH->findOwnMH_V->NashornCallSiteDescriptor->isOptimistic->NashornCallSiteDescriptor->getProgramPoint->insertArguments
ScriptObject#getProtoSwitchPoints(String, ScriptObject):::Get an array of switch points for a property with the given name that will be invalidated when the property definition is changed in this object's prototype chain:::if->getProto->return->switchPoints->new->HashSet<>->switchPoint->getProto->getMap->getSwitchPoint->if->new->SwitchPoint->for->obj->obj->getProto->obj->getProto->switchPoints->add->for->obj->obj->getProto->obj->getProto->return->switchPoints->new->SwitchPointArr->toArray
ScriptObject#getProtoSwitchPoint(String)::: script object get proto switch point:::if->getProto->return->switchPoint->getProto->getMap->getSwitchPoint->if->new->SwitchPoint->for->obj->obj->getProto->obj->getProto->return
ScriptObject#checkSharedProtoMap()::: script object check shared proto map:::if->getMap->getProto->isInvalidSharedMapFor->getMap->makeUnsharedCopy->setMap
ScriptObject#findSetMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate SET method for an invoke dynamic call.:::name->NashornCallSiteDescriptor->getOperand->if->request->isCallSiteUnstable->hasWithScope->return->findMegaMorphicSetMethod->explicitInstanceOfCheck->explicitInstanceOfCheck->find->NashornCallSiteDescriptor->isScope->findProperty->if->find->isInheritedOrdinaryProperty->if->isExtensible->find->getProperty->isWritable->return->createEmptySetMethod->if->NashornCallSiteDescriptor->isScope->find->getOwner->isScope->if->if->find->getProperty->isWritable->NashornCallSiteDescriptor->isDeclaration->if->NashornCallSiteDescriptor->isScope->find->getProperty->isLexicalBinding->throw->typeError->return->createEmptySetMethod->if->find->getProperty->hasNativeSetter->return->createEmptySetMethod->else->if->isExtensible->return->createEmptySetMethod->inv->new->SetMethodCreator->findBuiltinSwitchPoint->createGuardedInvocation->globalConstants->getGlobalConstants->if->cinv->globalConstants->findSetMethod->if->return->return
ScriptObject#getGlobalConstants()::: script object get global constants:::return->isGlobal->getContext->getGlobalConstants
ScriptObject#createEmptySetMethod(CallSiteDescriptor, boolean, String, boolean)::: script object create empty set method:::name->NashornCallSiteDescriptor->getOperand->if->NashornCallSiteDescriptor->isStrict->throw->ScriptRuntime->safeToString->typeError->return->NashornGuards->getMap->getMapGuard->getProtoSwitchPoints->new->GuardedInvocation
ScriptObject#extensionCheck(boolean, String)::: script object extension check:::if->isExtensible->return->else->if->throw->ScriptRuntime->safeToString->typeError->else->return
ScriptObject#findMegaMorphicSetMethod(CallSiteDescriptor, String)::: script object find mega morphic set method:::Context->getContextTrusted->getLogger->warning->type->desc->getMethodType->insertParameterTypes->inv->findSetIndexMethod->return->inv->MH->inv->getInvocation->insertArguments->inv->getGuard->replaceMethods
ScriptObject#globalFilter(Object)::: script object global filter:::sobj->while->sobj->getProto->return
ScriptObject#findSetIndexMethod(CallSiteDescriptor, LinkRequest):::Lookup function for the set index method, available for subclasses as well, e.g:::return->explicitInstanceOfCheck->desc->getMethodType->findSetIndexMethod
ScriptObject#findSetIndexMethod(CallSiteDescriptor, boolean, MethodType):::Find the appropriate SETINDEX method for an invoke dynamic call.:::keyClass->callType->parameterType->valueClass->callType->parameterType->methodHandle->findOwnMH_V->MH->NashornCallSiteDescriptor->getFlags->insertArguments->return->getScriptObjectGuard->new->GuardedInvocation
ScriptObject#noSuchMethod(CallSiteDescriptor, LinkRequest):::Fall back if a function property is not found.:::name->NashornCallSiteDescriptor->getOperand->find->findProperty->scopeCall->isScope->NashornCallSiteDescriptor->isScope->if->return->noSuchProperty->getProtoSwitchPoint->addSwitchPoint->explicitInstanceOfCheck->explicitInstanceOfCheck->value->find->getObjectValue->if->return->createEmptyGetter->func->thiz->func->isStrict->return->MH->MH->func->new->ObjectArr->createBound->constant->dropArguments->NashornGuards->NashornGuards->getIdentityGuard->NashornGuards->getMap->getMapGuard->combineGuards->new->GuardedInvocation->getProtoSwitchPoint->addSwitchPoint
ScriptObject#noSuchProperty(CallSiteDescriptor, LinkRequest):::Fall back if a property is not found.:::name->NashornCallSiteDescriptor->getOperand->find->findProperty->scopeAccess->isScope->NashornCallSiteDescriptor->isScope->if->value->find->getObjectValue->func->mh->if->desc->getMethodType->getCallMethodHandle->if->if->func->isStrict->bindTo->return->find->isSelf->getMap->find->getGetter->getKnownFunctionPropertyGuardSelf->getMap->find->getGetter->find->getProtoChainLength->getKnownFunctionPropertyGuardProto->find->getOwner->getProtoSwitchPoints->new->GuardedInvocation->getProtoSwitchPoint->addSwitchPoint->if->throw->referenceError->return->explicitInstanceOfCheck->createEmptyGetter
ScriptObject#invokeNoSuchProperty(Object, boolean, int):::Invoke fall back if a property is not found.:::find->findProperty->func->find->getObjectValue->ret->if->sfunc->self->sfunc->isStrict->ScriptRuntime->apply->else->if->throw->key->toString->referenceError->if->isValid->throw->new->UnwarrantedOptimismException->return
ScriptObject#getNoSuchMethod(String, boolean, int):::Get __noSuchMethod__ as a function bound to this object and name if it is defined.:::find->findProperty->if->return->invokeNoSuchProperty->value->find->getObjectValue->if->if->throw->referenceError->return->func->self->func->isStrict->return->func->new->ObjectArr->createBound
ScriptObject#createEmptyGetter(CallSiteDescriptor, boolean, String)::: script object create empty getter:::if->NashornCallSiteDescriptor->isOptimistic->throw->NashornCallSiteDescriptor->getProgramPoint->new->UnwarrantedOptimismException->return->Lookup->desc->getMethodType->returnType->emptyGetter->NashornGuards->getMap->getMapGuard->getProtoSwitchPoints->new->GuardedInvocation
ScriptObject.ScriptObjectIterator#init()::: script object iterator init:::
ScriptObject.ScriptObjectIterator#hasNext()::: script object iterator has next:::if->init->return
ScriptObject.ScriptObjectIterator#next()::: script object iterator next:::if->init->return
ScriptObject.ScriptObjectIterator#remove()::: script object iterator remove:::throw->new->UnsupportedOperationException
ScriptObject.KeyIterator#init()::: key iterator init:::keys->new->LinkedHashSet<>->nonEnumerable->new->HashSet<>->for->self->self->getProto->keys->new->StringArr->toArray
ScriptObject.ValueIterator#init()::: value iterator init:::valueList->new->ArrayList<>->nonEnumerable->new->HashSet<>->for->self->self->getProto->valueList->new->ObjectArr->toArray
ScriptObject#addSpillProperty(Object, int, Object, boolean):::Add a spill property for the given key.:::propertyMap->getMap->fieldSlot->propertyMap->getFreeFieldSlot->propertyFlags->useDualFields->property->if->new->AccessorProperty->getClass->new->AccessorProperty->addOwnProperty->else->spillSlot->propertyMap->getFreeSpillSlot->new->SpillProperty->new->SpillProperty->addOwnProperty->property->getSlot->ensureSpillSize->return
ScriptObject#addSpill(Class, String):::Add a spill entry for the given key.:::return->addSpillProperty->getMap->getSetter
ScriptObject#pairArguments(MethodHandle, MethodType):::Make sure arguments are paired correctly, with respect to more parameters than declared, fewer parameters than declared and other things that JavaScript allows:::return->pairArguments
ScriptObject#pairArguments(MethodHandle, MethodType, Boolean):::Make sure arguments are paired correctly, with respect to more parameters than declared, fewer parameters than declared and other things that JavaScript allows:::methodType->methodHandle->type->if->methodType->callType->methodType->returnType->changeReturnType->equals->return->parameterCount->methodType->parameterCount->callCount->callType->parameterCount->isCalleeVarArg->methodType->parameterType->isArray->isCallerVarArg->callType->parameterType->isArray->if->return->MH->asCollector->if->return->adaptHandleToVarArgCallSite->if->missingArgs->fillers->new->ObjectArr->Arrays->fill->if->return->MH->insertArguments->if->discardedArgs->discards->new->Class<?>Arr->Arrays->fill->return->MH->dropArguments->return
ScriptObject#adaptHandleToVarArgCallSite(MethodHandle, int)::: script object adapt handle to var arg call site:::spreadArgs->mh->type->parameterCount->return->MH->MH->asSpreader->MH->insertArguments->filterArguments
ScriptObject#truncatingFilter(int, Object[])::: script object truncating filter:::length->if->return->newArray->new->ObjectArr->if->System->Math->min->arraycopy->if->fill->for->i->return
ScriptObject#setLength(long):::Numeric length setter for length property:::data->getArray->arrayLength->data->length->if->return->if->data->ensure->safeDelete->setArray->return->if->actualLength->if->getMap->containsArrayKeys->for->l->data->shrink->setArray->data->setLength
ScriptObject#getInt(int, Object, int)::: script object get int:::if->isValidArrayIndex->for->object->else->find->findProperty->if->return->getIntValue->return->JSType->invokeNoSuchProperty->toInt32
ScriptObject#getInt(Object, int)::: script object get int:::primitiveKey->JSType->toPrimitive->index->getArrayIndex->array->getArray->if->array->has->return->isValid->array->getIntOptimistic->array->getInt->return->JSType->toPropertyKey->getInt
ScriptObject#getInt(double, int)::: script object get int:::index->getArrayIndex->array->getArray->if->array->has->return->isValid->array->getIntOptimistic->array->getInt->return->JSType->toString->getInt
ScriptObject#getInt(int, int)::: script object get int:::index->getArrayIndex->array->getArray->if->array->has->return->isValid->array->getIntOptimistic->array->getInt->return->JSType->toString->getInt
ScriptObject#getDouble(int, Object, int)::: script object get double:::if->isValidArrayIndex->for->object->else->find->findProperty->if->return->getDoubleValue->return->JSType->invokeNoSuchProperty->toNumber
ScriptObject#getDouble(Object, int)::: script object get double:::primitiveKey->JSType->toPrimitive->index->getArrayIndex->array->getArray->if->array->has->return->isValid->array->getDoubleOptimistic->array->getDouble->return->JSType->toPropertyKey->getDouble
ScriptObject#getDouble(double, int)::: script object get double:::index->getArrayIndex->array->getArray->if->array->has->return->isValid->array->getDoubleOptimistic->array->getDouble->return->JSType->toString->getDouble
ScriptObject#getDouble(int, int)::: script object get double:::index->getArrayIndex->array->getArray->if->array->has->return->isValid->array->getDoubleOptimistic->array->getDouble->return->JSType->toString->getDouble
ScriptObject#get(int, Object)::: script object get:::if->isValidArrayIndex->for->object->else->find->findProperty->if->return->find->getObjectValue->return->invokeNoSuchProperty
ScriptObject#get(Object)::: script object get:::primitiveKey->JSType->toPrimitive->index->getArrayIndex->array->getArray->if->array->has->return->array->getObject->return->JSType->toPropertyKey->get
ScriptObject#get(double)::: script object get:::index->getArrayIndex->array->getArray->if->array->has->return->array->getObject->return->JSType->toString->get
ScriptObject#get(int)::: script object get:::index->getArrayIndex->array->getArray->if->array->has->return->array->getObject->return->JSType->toString->get
ScriptObject#doesNotHaveCheckArrayKeys(long, int, int)::: script object does not have check array keys:::if->hasDefinedArrayProperties->key->JSType->toString->find->findProperty->if->setObject->return->return
ScriptObject#doesNotHaveCheckArrayKeys(long, double, int)::: script object does not have check array keys:::if->hasDefinedArrayProperties->key->JSType->toString->find->findProperty->if->setObject->return->return
ScriptObject#doesNotHaveCheckArrayKeys(long, Object, int)::: script object does not have check array keys:::if->hasDefinedArrayProperties->key->JSType->toString->find->findProperty->if->setObject->return->return
ScriptObject#hasDefinedArrayProperties()::: script object has defined array properties:::for->obj->obj->getProto->return
ScriptObject#doesNotHaveEnsureLength(long, long, int)::: script object does not have ensure length:::if->if->isExtensible->if->isStrictFlag->throw->JSType->toString->ScriptRuntime->safeToString->typeError->return->getArray->ensure->setArray->return
ScriptObject#doesNotHave(int, int, int)::: script object does not have:::oldLength->getArray->length->longIndex->ArrayIndex->toLongIndex->if->doesNotHaveCheckArrayKeys->doesNotHaveEnsureLength->strict->isStrictFlag->getArray->set->safeDelete->setArray
ScriptObject#doesNotHave(int, double, int)::: script object does not have:::oldLength->getArray->length->longIndex->ArrayIndex->toLongIndex->if->doesNotHaveCheckArrayKeys->doesNotHaveEnsureLength->strict->isStrictFlag->getArray->set->safeDelete->setArray
ScriptObject#doesNotHave(int, Object, int)::: script object does not have:::oldLength->getArray->length->longIndex->ArrayIndex->toLongIndex->if->doesNotHaveCheckArrayKeys->doesNotHaveEnsureLength->strict->isStrictFlag->getArray->set->safeDelete->setArray
ScriptObject#setObject(FindProperty, int, Object, Object):::This is the most generic of all Object setters:::f->invalidateGlobalConstant->if->f->isInheritedOrdinaryProperty->isScope->isScopeFlag->if->f->getSelf->f->getSelf->setObject->return->if->f->getOwner->isScope->if->if->f->getProperty->isWritable->NashornCallSiteDescriptor->isDeclaration->f->getProperty->hasNativeSetter->if->isScopeFlag->f->getProperty->isLexicalBinding->throw->key->toString->typeError->if->isStrictFlag->throw->f->getProperty->isAccessorProperty->key->toString->ScriptRuntime->safeToString->typeError->return->if->NashornCallSiteDescriptor->isDeclaration->f->getProperty->needsDeclaration->f->getOwner->declareAndSet->return->f->isStrictFlag->setValue->else->if->isExtensible->if->isStrictFlag->throw->key->toString->ScriptRuntime->safeToString->typeError->else->sobj->if->isScope->while->sobj->getProto->sobj->addSpillProperty
ScriptObject#set(Object, int, int)::: script object set:::primitiveKey->JSType->toPrimitive->index->getArrayIndex->if->isValidArrayIndex->data->getArray->if->data->has->data->isStrictFlag->set->setArray->else->doesNotHave->return->propName->JSType->toPropertyKey->findProperty->JSType->toObject->setObject
ScriptObject#set(Object, double, int)::: script object set:::primitiveKey->JSType->toPrimitive->index->getArrayIndex->if->isValidArrayIndex->data->getArray->if->data->has->data->isStrictFlag->set->setArray->else->doesNotHave->return->propName->JSType->toPropertyKey->findProperty->JSType->toObject->setObject
ScriptObject#set(Object, Object, int)::: script object set:::primitiveKey->JSType->toPrimitive->index->getArrayIndex->if->isValidArrayIndex->data->getArray->if->data->has->data->isStrictFlag->set->setArray->else->doesNotHave->return->propName->JSType->toPropertyKey->findProperty->setObject
ScriptObject#set(double, int, int)::: script object set:::index->getArrayIndex->if->isValidArrayIndex->data->getArray->if->data->has->data->isStrictFlag->set->setArray->else->doesNotHave->return->propName->JSType->toString->findProperty->JSType->toObject->setObject
ScriptObject#set(double, double, int)::: script object set:::index->getArrayIndex->if->isValidArrayIndex->data->getArray->if->data->has->data->isStrictFlag->set->setArray->else->doesNotHave->return->propName->JSType->toString->findProperty->JSType->toObject->setObject
ScriptObject#set(double, Object, int)::: script object set:::index->getArrayIndex->if->isValidArrayIndex->data->getArray->if->data->has->data->isStrictFlag->set->setArray->else->doesNotHave->return->propName->JSType->toString->findProperty->setObject
ScriptObject#set(int, int, int)::: script object set:::index->getArrayIndex->if->isValidArrayIndex->if->getArray->has->data->getArray->data->isStrictFlag->set->setArray->else->doesNotHave->return->propName->JSType->toString->findProperty->JSType->toObject->setObject
ScriptObject#set(int, double, int)::: script object set:::index->getArrayIndex->if->isValidArrayIndex->data->getArray->if->data->has->data->isStrictFlag->set->setArray->else->doesNotHave->return->propName->JSType->toString->findProperty->JSType->toObject->setObject
ScriptObject#set(int, Object, int)::: script object set:::index->getArrayIndex->if->isValidArrayIndex->data->getArray->if->data->has->data->isStrictFlag->set->setArray->else->doesNotHave->return->propName->JSType->toString->findProperty->setObject
ScriptObject#has(Object)::: script object has:::primitiveKey->JSType->toPrimitive->index->getArrayIndex->return->isValidArrayIndex->hasArrayProperty->JSType->toPropertyKey->hasProperty
ScriptObject#has(double)::: script object has:::index->getArrayIndex->return->isValidArrayIndex->hasArrayProperty->JSType->toString->hasProperty
ScriptObject#has(int)::: script object has:::index->getArrayIndex->return->isValidArrayIndex->hasArrayProperty->JSType->toString->hasProperty
ScriptObject#hasArrayProperty(int)::: script object has array property:::hasArrayKeys->for->self->self->getProto->return->ArrayIndex->toKey->hasProperty
ScriptObject#hasOwnProperty(Object)::: script object has own property:::primitiveKey->JSType->toPrimitive->index->getArrayIndex->return->isValidArrayIndex->hasOwnArrayProperty->JSType->toPropertyKey->hasProperty
ScriptObject#hasOwnProperty(int)::: script object has own property:::index->getArrayIndex->return->isValidArrayIndex->hasOwnArrayProperty->JSType->toString->hasProperty
ScriptObject#hasOwnProperty(double)::: script object has own property:::index->getArrayIndex->return->isValidArrayIndex->hasOwnArrayProperty->JSType->toString->hasProperty
ScriptObject#hasOwnArrayProperty(int)::: script object has own array property:::return->getArray->has->getMap->containsArrayKeys->ArrayIndex->toKey->hasProperty
ScriptObject#delete(int, boolean)::: script object delete:::index->getArrayIndex->array->getArray->if->array->has->if->array->canDelete->array->delete->setArray->return->return->return->JSType->toObject->deleteObject
ScriptObject#delete(double, boolean)::: script object delete:::index->getArrayIndex->array->getArray->if->array->has->if->array->canDelete->array->delete->setArray->return->return->return->JSType->toObject->deleteObject
ScriptObject#delete(Object, boolean)::: script object delete:::primitiveKey->JSType->toPrimitive->index->getArrayIndex->array->getArray->if->array->has->if->array->canDelete->array->delete->setArray->return->return->return->deleteObject
ScriptObject#deleteObject(Object, boolean)::: script object delete object:::propName->JSType->toPropertyKey->find->findProperty->if->return->if->find->getProperty->isConfigurable->if->throw->propName->toString->ScriptRuntime->safeToString->typeError->return->prop->find->getProperty->deleteOwnProperty->return
ScriptObject#copy():::Return a shallow copy of this ScriptObject.:::try->return->clone->catch->throw->new->RuntimeException->finally
ScriptObject#clone()::: script object clone:::clone->super->clone->if->objectSpill->clone->if->primitiveSpill->clone->arrayData->copy->return
ScriptObject#newUserAccessors(Object, int, ScriptFunction, ScriptFunction):::Make a new UserAccessorProperty property:::uc->getMap->newUserAccessors->uc->getMap->new->UserAccessorProperty.Accessors->setAccessors->return
ScriptObject#useDualFields():::Returns true if properties for this object should use dual field mode, false otherwise.:::return->StructureLoader->getClass->getName->isSingleFieldStructure
ScriptObject#ensureSpillSize(int)::: script object ensure spill size:::oldLength->if->return->newLength->alignUp->newObjectSpill->new->ObjectArr->newPrimitiveSpill->useDualFields->new->longArr->if->System->arraycopy->if->System->arraycopy->return
ScriptObject#findOwnMH_V(String, Class, Class...)::: script object find own h_ v:::return->MH->MethodHandles->lookup->MH->type->findVirtual
ScriptObject#findOwnMH_S(String, Class, Class...)::: script object find own h_ s:::return->MH->MethodHandles->lookup->MH->type->findStatic
ScriptObject#getKnownFunctionPropertyGuardSelf(PropertyMap, MethodHandle, ScriptFunction)::: script object get known function property guard self:::return->MH->insertArguments
ScriptObject#knownFunctionPropertyGuardSelf(Object, PropertyMap, MethodHandle, ScriptFunction)::: script object known function property guard self:::if->getMap->try->return->getter->invokeExact->catch->throw->throw->new->RuntimeException->finally->return
ScriptObject#getKnownFunctionPropertyGuardProto(PropertyMap, MethodHandle, int, ScriptFunction)::: script object get known function property guard proto:::return->MH->insertArguments
ScriptObject#getProto(ScriptObject, int)::: script object get proto:::proto->for->d->return
ScriptObject#knownFunctionPropertyGuardProto(Object, PropertyMap, MethodHandle, int, ScriptFunction)::: script object known function property guard proto:::if->getMap->proto->getProto->if->return->try->return->getter->invokeExact->catch->throw->throw->new->RuntimeException->finally->return
ScriptObject#getCount():::Get number of ScriptObject instances created:::return->count->longValue
ScriptRuntime#switchTagAsInt(Object, int):::Converts a switch tag value to a simple integer:::if->d->doubleValue->if->isRepresentableAsInt->return->return
ScriptRuntime#switchTagAsInt(boolean, int):::Converts a switch tag value to a simple integer:::return
ScriptRuntime#switchTagAsInt(long, int):::Converts a switch tag value to a simple integer:::return->isRepresentableAsInt
ScriptRuntime#switchTagAsInt(double, int):::Converts a switch tag value to a simple integer:::return->isRepresentableAsInt
ScriptRuntime#builtinObjectToString(Object):::This is the builtin implementation of Object.prototype.toString:::className->type->JSType->ofNoFunction->switch->break->break->break->break->break->if->getClassName->else->if->getClassName->else->self->getClass->getName->break->self->getClass->getName->break->sb->new->StringBuilder->sb->append->sb->append->sb->append->return->sb->toString
ScriptRuntime#safeToString(Object):::This is called whenever runtime wants to throw an error and wants to provide meaningful information about an object:::return->JSType->toStringImpl
ScriptRuntime#toPropertyIterator(Object):::Returns an iterator over property identifiers used in the for...in statement:::if->return->propertyIterator->if->obj->getClass->isArray->return->Array->getLength->new->RangeIterator->if->return->keySet->iterator->if->return->size->new->RangeIterator->if->return->keySet->iterator->wrapped->Global->instance->wrapAsObject->if->return->propertyIterator->return->Collections->emptyIterator
ScriptRuntime.RangeIterator#hasNext()::: range iterator has next:::return
ScriptRuntime.RangeIterator#next()::: range iterator next:::return
ScriptRuntime.RangeIterator#remove()::: range iterator remove:::throw->new->UnsupportedOperationException
ScriptRuntime#iteratorForJavaArrayOrList(Object)::: script runtime iterator for java array or list:::if->obj->getClass->isArray->array->length->Array->getLength->return->new->Iterator<Object>->if->return->iterator->return
ScriptRuntime#toValueIterator(Object):::Returns an iterator over property values used in the for each...in statement:::if->return->valueIterator->if->return->values->iterator->itr->iteratorForJavaArrayOrList->if->return->if->return->values->iterator->wrapped->Global->instance->wrapAsObject->if->return->valueIterator->return->Collections->emptyIterator
ScriptRuntime#toES6Iterator(Object):::Returns an iterator over property values used in the {@code for ..:::if->itr->iteratorForJavaArrayOrList->if->return->if->return->new->Iterator<Object>->global->Global->instance->iterator->AbstractIterator->Global->toObject->getIterator->nextInvoker->AbstractIterator->getNextInvoker->doneInvoker->AbstractIterator->getDoneInvoker->valueInvoker->AbstractIterator->getValueInvoker->return->new->Iterator<Object>
ScriptRuntime#mergeScope(ScriptObject):::Merge a scope into its prototype's map:::parentScope->scope->getProto->parentScope->addBoundProperties->return
ScriptRuntime#apply(ScriptFunction, Object, Object...):::Call a function given self and args:::try->return->target->invoke->catch->throw->throw->new->RuntimeException->finally
ScriptRuntime#throwReferenceError(String):::Throws a reference error for an undefined variable.:::throw->referenceError
ScriptRuntime#throwConstTypeError(String):::Throws a type error for an assignment to a const.:::throw->typeError
ScriptRuntime#construct(ScriptFunction, Object...):::Call a script function as a constructor with given args.:::try->return->target->construct->catch->throw->throw->new->RuntimeException->finally
ScriptRuntime#sameValue(Object, Object):::Generic implementation of ECMA 9.12 - SameValue algorithm:::xType->JSType->ofNoFunction->yType->JSType->ofNoFunction->if->return->if->return->if->xVal->doubleValue->yVal->doubleValue->if->Double->isNaN->Double->isNaN->return->if->Double->doubleToLongBits->Double->doubleToLongBits->return->return->if->return->x->equals->return
ScriptRuntime#parse(String, String, boolean):::Returns AST as JSON compatible string:::return->JSONWriter->Context->getContextTrusted->parse
ScriptRuntime#isJSWhitespace(char):::Test whether a char is valid JavaScript whitespace:::return->Lexer->isJSWhitespace
ScriptRuntime#openWith(ScriptObject, Object):::Entering a with node requires new scope:::global->Context->getGlobal->if->throw->typeError->else->if->throw->typeError->if->unwrapped->ScriptObjectMirror->unwrap->if->return->new->WithObject->exprObj->global->newObject->NativeObject->bindAllProperties->return->new->WithObject->wrappedExpr->JSType->toScriptObject->if->return->new->WithObject->throw->typeError
ScriptRuntime#ADD(Object, Object):::ECMA 11.6.1 - The addition operator (+) - generic implementation:::xIsNumber->yIsNumber->if->return->doubleValue->doubleValue->xIsUndefined->yIsUndefined->if->return->xPrim->JSType->toPrimitive->yPrim->JSType->toPrimitive->if->isString->isString->try->return->JSType->toCharSequence->JSType->toCharSequence->new->ConsString->catch->throw->rangeError->finally->return->JSType->toNumber->JSType->toNumber
ScriptRuntime#DEBUGGER():::Debugger hook:::return
ScriptRuntime#NEW(Object, Object...):::New hook:::return
ScriptRuntime#TYPEOF(Object, Object):::ECMA 11.4.3 The typeof Operator - generic implementation:::obj->if->if->sobj->find->sobj->findProperty->if->find->getObjectValue->else->sobj->invokeNoSuchProperty->if->Global->isLocationPropertyPlaceholder->if->name->equals->else->else->if->get->else->if->throw->safeToString->typeError->else->if->JSType->isPrimitive->JSType->toScriptObject->get->else->if->property->toString->getMember->else->return->JSType->of->typeName
ScriptRuntime#REFERENCE_ERROR(Object, Object, Object):::Throw ReferenceError when LHS of assignment or increment/decrement operator is not an assignable node (say a literal):::throw->Objects->toString->referenceError
ScriptRuntime#slowDelete(ScriptObject, String):::ECMA 11.4.1 - delete operator, implementation for slow scopes  This implementation of 'delete' walks the scope chain to find the scope that contains the property to be deleted, then invokes delete on it:::sobj->while->sobj->isScope->find->sobj->findProperty->if->return->sobj->delete->sobj->getProto->return->obj->delete
ScriptRuntime#strictFailDelete(String):::ECMA 11.4.1 - delete operator, special case  This is 'delete' on a scope; it always fails under strict mode:::throw->syntaxError
ScriptRuntime#EQ(Object, Object):::ECMA 11.9.1 - The equals operator (==) - generic implementation:::return->equals
ScriptRuntime#NE(Object, Object):::ECMA 11.9.2 - The does-not-equal operator (==) - generic implementation:::return->EQ
ScriptRuntime#equals(Object, Object):::ECMA 11.9.3 The Abstract Equality Comparison Algorithm:::if->return->if->return->if->return->ScriptObjectMirror->identical->return->equalValues
ScriptRuntime#equalValues(Object, Object):::Extracted portion of equals() that compares objects by value (or by reference, if no known value comparison applies).:::xType->JSType->ofNoFunction->yType->JSType->ofNoFunction->if->return->equalSameTypeValues->return->equalDifferentTypeValues
ScriptRuntime#equalSameTypeValues(Object, Object, JSType):::Extracted portion of #equals(Object, Object) and #strictEquals(Object, Object) that compares values belonging to the same JSType.:::if->return->if->return->doubleValue->doubleValue->if->return->x->toString->y->toString->equals->if->return->booleanValue->booleanValue->return
ScriptRuntime#equalDifferentTypeValues(Object, Object, JSType, JSType):::Extracted portion of #equals(Object, Object) that compares values belonging to different JSTypes.:::if->isUndefinedAndNull->isUndefinedAndNull->return->else->if->isNumberAndString->return->equalNumberToString->else->if->isNumberAndString->return->equalNumberToString->else->if->return->equalBooleanToAny->else->if->return->equalBooleanToAny->else->if->isPrimitiveAndObject->return->equalWrappedPrimitiveToObject->else->if->isPrimitiveAndObject->return->equalWrappedPrimitiveToObject->return
ScriptRuntime#isUndefinedAndNull(JSType, JSType)::: script runtime is undefined and null:::return
ScriptRuntime#isNumberAndString(JSType, JSType)::: script runtime is number and string:::return
ScriptRuntime#isPrimitiveAndObject(JSType, JSType)::: script runtime is primitive and object:::return
ScriptRuntime#equalNumberToString(Object, Object)::: script runtime equal number to string:::return->doubleValue->JSType->str->toString->toNumber
ScriptRuntime#equalBooleanToAny(Object, Object)::: script runtime equal boolean to any:::return->JSType->toNumber->equals
ScriptRuntime#equalWrappedPrimitiveToObject(Object, Object)::: script runtime equal wrapped primitive to object:::return->JSType->toPrimitive->equals
ScriptRuntime#EQ_STRICT(Object, Object):::ECMA 11.9.4 - The strict equal operator (===) - generic implementation:::return->strictEquals
ScriptRuntime#NE_STRICT(Object, Object):::ECMA 11.9.5 - The strict non equal operator (!==) - generic implementation:::return->EQ_STRICT
ScriptRuntime#strictEquals(Object, Object):::ECMA 11.9.6 The Strict Equality Comparison Algorithm:::xType->JSType->ofNoFunction->yType->JSType->ofNoFunction->if->return->return->equalSameTypeValues
ScriptRuntime#IN(Object, Object):::ECMA 11.8.6 - The in operator - generic implementation:::rvalType->JSType->ofNoFunction->if->if->return->has->if->return->Objects->toString->hasMember->key->JSType->toPropertyKey->if->clazz->getRepresentedClass->return->BeansLinker->getReadableStaticPropertyNames->Objects->toString->contains->BeansLinker->getStaticMethodNames->Objects->toString->contains->else->if->containsKey->return->index->ArrayIndex->getArrayIndex->if->if->size->return->if->obj->getClass->isArray->Array->getLength->return->return->BeansLinker->obj->getClass->getReadableInstancePropertyNames->Objects->toString->contains->BeansLinker->obj->getClass->getInstanceMethodNames->Objects->toString->contains->throw->rvalType->toString->toLowerCase->typeError
ScriptRuntime#INSTANCEOF(Object, Object):::ECMA 11.8.6 - The strict instanceof operator - generic implementation:::if->if->return->isInstance->return->if->return->getRepresentedClass->isInstance->if->return->isInstance->if->return->isInstanceOf->throw->typeError
ScriptRuntime#LT(Object, Object):::ECMA 11.8.1 - The less than operator (<) - generic implementation:::px->JSType->toPrimitive->py->JSType->toPrimitive->return->areBothString->px->toString->py->toString->compareTo->JSType->toNumber->JSType->toNumber
ScriptRuntime#areBothString(Object, Object)::: script runtime are both string:::return->isString->isString
ScriptRuntime#GT(Object, Object):::ECMA 11.8.2 - The greater than operator (>) - generic implementation:::px->JSType->toPrimitive->py->JSType->toPrimitive->return->areBothString->px->toString->py->toString->compareTo->JSType->toNumber->JSType->toNumber
ScriptRuntime#LE(Object, Object):::ECMA 11.8.3 - The less than or equal operator (<=) - generic implementation:::px->JSType->toPrimitive->py->JSType->toPrimitive->return->areBothString->px->toString->py->toString->compareTo->JSType->toNumber->JSType->toNumber
ScriptRuntime#GE(Object, Object):::ECMA 11.8.4 - The greater than or equal operator (>=) - generic implementation:::px->JSType->toPrimitive->py->JSType->toPrimitive->return->areBothString->px->toString->py->toString->compareTo->JSType->toNumber->JSType->toNumber
ScriptRuntime#invalidateReservedBuiltinName(String):::Tag a reserved name as invalidated - used when someone writes to a property with this name - overly conservative, but link time is too late to apply e.g:::context->Context->getContextTrusted->sp->context->getBuiltinSwitchPoint->context->getLogger->info->SwitchPoint->new->SwitchPointArr->invalidateAll
ScriptRuntime#GET_TEMPLATE_OBJECT(Object, Object):::ES6 12.2.9.3 Runtime Semantics: GetTemplateObject(templateLiteral).:::template->rawObj->template->rawObj->freeze->addOwnProperty->template->freeze->return
SetMethodCreator#getName()::: set method creator get name:::return->NashornCallSiteDescriptor->getOperand
SetMethodCreator#getMap()::: set method creator get map:::return
SetMethodCreator#createGuardedInvocation(SwitchPoint):::Creates the actual guarded invocation that represents the dynamic setter method for the property.:::return->createSetMethod->createGuardedInvocation
SetMethodCreator.SetMethod#createGuardedInvocation():::Composes from its components an actual guarded invocation that represents the dynamic setter method for the property.:::explicitInstanceOfCheck->NashornGuards->explicitInstanceOfCheck->return->NashornGuards->getGuard->new->GuardedInvocation
SetMethodCreator#createSetMethod(SwitchPoint)::: set method creator create set method:::if->return->createExistingPropertySetter->checkStrictCreateNewVariable->if->sobj->isScope->return->createGlobalPropertySetter->return->createNewPropertySetter
SetMethodCreator#checkStrictCreateNewVariable()::: set method creator check strict create new variable:::if->NashornCallSiteDescriptor->isScope->NashornCallSiteDescriptor->isStrict->throw->getName->referenceError
SetMethodCreator#createExistingPropertySetter()::: set method creator create existing property setter:::property->find->getProperty->isStrict->NashornCallSiteDescriptor->isStrict->methodHandle->if->NashornCallSiteDescriptor->isDeclaration->property->needsDeclaration->oldMap->getMap->newProperty->property->removeFlags->newMap->oldMap->replaceProperty->fastSetter->find->replaceProperty->getSetter->slowSetter->MH->getName->insertArguments->fastSetter->type->asType->casMap->MH->insertArguments->MH->dropArguments->MH->casMap->type->changeParameterType->asType->MH->guardWithTest->else->find->getSetter->boundHandle->if->find->isInheritedOrdinaryProperty->ScriptObject->find->getProtoChainLength->addProtoFilter->else->return->new->SetMethod
SetMethodCreator#createGlobalPropertySetter()::: set method creator create global property setter:::global->Context->getGlobal->return->MH->global->getName->addSpill->filterArguments->new->SetMethod
SetMethodCreator#createNewPropertySetter(SwitchPoint)::: set method creator create new property setter:::sm->map->getFreeFieldSlot->createNewFieldSetter->createNewSpillPropertySetter->map->propertyChanged->return
SetMethodCreator#createNewSetter(Property, SwitchPoint)::: set method creator create new setter:::property->setBuiltinSwitchPoint->oldMap->getMap->newMap->getNewMap->isStrict->NashornCallSiteDescriptor->isStrict->name->NashornCallSiteDescriptor->getOperand->fastSetter->property->getSetter->slowSetter->getAccessorTypeIndex->MH->NashornCallSiteDescriptor->getFlags->insertArguments->MH->insertArguments->MH->slowSetter->type->changeParameterType->asType->casMap->MH->insertArguments->MH->dropArguments->MH->casMap->type->changeParameterType->asType->casGuard->MH->guardWithTest->extCheck->MH->insertArguments->MH->extCheck->type->changeParameterType->asType->MH->dropArguments->nop->methodHandle->MH->dropArguments->return->MH->MH->guardWithTest->fastSetter->type->asType->new->SetMethod
SetMethodCreator#createNewFieldSetter(SwitchPoint)::: set method creator create new field setter:::return->getName->getFlags->sobj->getClass->getMap->getFreeFieldSlot->new->AccessorProperty->createNewSetter
SetMethodCreator#createNewSpillPropertySetter(SwitchPoint)::: set method creator create new spill property setter:::return->getName->getFlags->getMap->getFreeSpillSlot->new->SpillProperty->createNewSetter
SetMethodCreator#getNewMap(Property)::: set method creator get new map:::return->getMap->addProperty
SetMethodCreator#getFlags(ScriptObject)::: set method creator get flags:::return->scriptObject->useDualFields
SharedPropertyMap#propertyChanged(Property)::: shared property map property changed:::invalidateSwitchPoint->super->propertyChanged
SharedPropertyMap#isValidSharedProtoMap()::: shared property map is valid shared proto map:::return
SharedPropertyMap#getSharedProtoSwitchPoint()::: shared property map get shared proto switch point:::return
SharedPropertyMap#invalidateSwitchPoint():::Invalidate the shared prototype switch point if this is a shared prototype map.:::if->SwitchPoint->new->SwitchPointArr->invalidateAll
Source#sourceFor(String, String, URLData)::: source source for:::try->newSource->new->Source->existingSource->CACHE->get->if->data->checkPermissionAndClose->return->data->load->CACHE->put->return->catch->cause->e->getCause->if->throw->throw->finally
Source.Cache#get(Source)::: cache get:::ref->super->get->return->ref->get
Source.Cache#put(Source, Source)::: cache put:::new->WeakReference<>->put
Source#getSourceInfo()::: source get source info:::return->getName->data->hashCode->data->url->data->array->new->DebuggerSupport.SourceInfo
Source.Data#url()::: data url:::
Source.Data#length()::: data length:::
Source.Data#lastModified()::: data last modified:::
Source.Data#array()::: data array:::
Source.Data#isEvalCode()::: data is eval code:::
Source.RawData#hashCode()::: raw data hash code:::h->if->Arrays->hashCode->return
Source.RawData#equals(Object)::: raw data equals:::if->return->if->other->return->Arrays->equals->return
Source.RawData#toString()::: raw data to string:::return->array->new->String
Source.RawData#url()::: raw data url:::return
Source.RawData#length()::: raw data length:::return
Source.RawData#lastModified()::: raw data last modified:::return
Source.RawData#array()::: raw data array:::return
Source.RawData#isEvalCode()::: raw data is eval code:::return
Source.URLData#hashCode()::: data hash code:::h->if->url->hashCode->return
Source.URLData#equals(Object)::: data equals:::if->return->if->return->otherData->if->url->equals->try->if->isDeferred->loadMeta->else->if->otherData->isDeferred->otherData->loadMeta->catch->throw->new->RuntimeException->finally->return->return
Source.URLData#toString()::: data to string:::return->array->new->String
Source.URLData#url()::: data url:::return
Source.URLData#length()::: data length:::return
Source.URLData#lastModified()::: data last modified:::return
Source.URLData#array()::: data array:::return
Source.URLData#isEvalCode()::: data is eval code:::return
Source.URLData#isDeferred()::: data is deferred:::return
Source.URLData#checkPermissionAndClose()::: data check permission and close:::try->in->url->openStream->catch->finally->debug
Source.URLData#load()::: data load:::if->c->url->openConnection->try->in->c->getInputStream->readFully->readFully->c->getLastModified->debug->catch->finally
Source.URLData#loadMeta()::: data load meta:::if->c->url->openConnection->try->in->c->getInputStream->c->getContentLength->c->getLastModified->debug->catch->finally
Source.FileData#checkPermissionAndClose()::: file data check permission and close:::if->file->canRead->throw->new->FileNotFoundException->debug
Source.FileData#loadMeta()::: file data load meta:::if->file->length->file->lastModified->debug
Source.FileData#load()::: file data load:::if->readFully->readFully->file->lastModified->debug
Source#debug(Object...)::: source debug:::logger->getLoggerStatic->if->logger->info
Source#data()::: source data:::return->data->array
Source#sourceFor(String, char[], boolean):::Returns a Source instance:::return->baseName->new->RawData->new->Source
Source#sourceFor(String, char[]):::Returns a Source instance:::return->sourceFor
Source#sourceFor(String, String, boolean):::Returns a Source instance:::return->baseName->new->RawData->new->Source
Source#sourceFor(String, String):::Returns a Source instance:::return->sourceFor
Source#sourceFor(String, URL):::Constructor:::return->sourceFor
Source#sourceFor(String, URL, Charset):::Constructor:::return->baseURL->new->URLData->sourceFor
Source#sourceFor(String, File):::Constructor:::return->sourceFor
Source#sourceFor(String, Path):::Constructor:::file->try->path->toFile->catch->finally->if->return->sourceFor->else->return->Files->newBufferedReader->sourceFor
Source#sourceFor(String, File, Charset):::Constructor:::absFile->file->getAbsoluteFile->return->dirName->new->FileData->sourceFor
Source#sourceFor(String, Reader):::Returns an instance:::if->urlReader->return->urlReader->getURL->urlReader->getCharset->sourceFor->return->baseName->new->RawData->new->Source
Source#equals(Object)::: source equals:::if->return->if->return->other->return->Objects->equals->data->equals
Source#hashCode()::: source hash code:::h->if->data->hashCode->Objects->hashCode->return
Source#getString():::Fetch source content.:::return->data->toString
Source#getName():::Get the user supplied name of this script.:::return
Source#getLastModified():::Get the last modified time of this script.:::return->data->lastModified
Source#getBase():::Get the "directory" part of the file or "base" of the URL.:::return
Source#getString(int, int):::Fetch a portion of source content.:::return->data->new->String
Source#getString(long):::Fetch a portion of source content associated with a token.:::start->Token->descPosition->len->Token->descLength->return->data->new->String
Source#getURL():::Returns the source URL of this script Source:::return->data->url
Source#getExplicitURL():::Get explicit source URL.:::return
Source#setExplicitURL(String):::Set explicit source URL.:::
Source#isEvalCode():::Returns whether this source was submitted via 'eval' call or not.:::return->data->isEvalCode
Source#findBOLN(int):::Find the beginning of the line containing position.:::d->data->for->i->return
Source#findEOLN(int):::Find the end of the line containing position.:::d->data->length->for->i->return
Source#getLine(int):::Return line number of character position:::d->data->line->for->i->return
Source#getColumn(int):::Return column number of character position.:::return->findBOLN
Source#getSourceLine(int):::Return line text including character position.:::first->findBOLN->last->findEOLN->return->data->new->String
Source#getContent():::Get the content of this source as a char array:::return->data
Source#getLength():::Get the length in chars for this source:::return->data->length
Source#readFully(Reader):::Read all of the source until end of file:::arr->new->charArr->sb->new->StringBuilder->try->numChars->while->reader->read->sb->append->catch->finally->reader->close->return->sb->toString->toCharArray
Source#readFully(File):::Read all of the source until end of file:::if->file->isFile->throw->new->IOException->return->Files->file->toPath->readAllBytes->byteToCharArray
Source#readFully(File, Charset):::Read all of the source until end of file:::if->file->isFile->throw->new->IOException->buf->Files->file->toPath->readAllBytes->return->new->String->toCharArray->byteToCharArray
Source#readFully(URL):::Read all of the source until end of stream from the given URL:::return->url->openStream->readFully
Source#readFully(URL, Charset):::Read all of the source until end of file:::return->url->openStream->readFully
Source#getDigest():::Get a Base64-encoded SHA1 digest for this source.:::return->getDigestBytes->new->String
Source#getDigestBytes()::: source get digest bytes:::ldigest->if->content->data->bytes->new->byteArr->for->i->try->md->MessageDigest->getInstance->if->md->name->getBytes->update->if->md->base->getBytes->update->if->getURL->md->getURL->toString->getBytes->update->BASE64->md->digest->encode->catch->throw->new->RuntimeException->finally->return
Source#baseURL(URL):::Returns the base directory or URL for the given URL:::try->uri->url->toURI->if->uri->getScheme->equals->path->Paths->get->parent->path->getParent->return->if->uri->isOpaque->uri->getPath->uri->getPath->isEmpty->return->return->uri->resolve->toString->catch->return->finally
Source#dirName(File, String)::: source dir name:::res->file->getParent->return
Source#baseName(String)::: source base name:::idx->name->lastIndexOf->if->name->lastIndexOf->return->name->substring
Source#readFully(InputStream, Charset)::: source read fully:::return->readBytes->new->String->toCharArray->readFully
Source#readFully(InputStream)::: source read fully:::return->readBytes->byteToCharArray
Source#byteToCharArray(byte[])::: source byte to char array:::cs->start->if->else->if->if->Charset->forName->else->else->if->else->if->Charset->forName->return->new->String->toCharArray
Source#readBytes(InputStream)::: source read bytes:::arr->new->byteArr->try->try->buf->new->ByteArrayOutputStream->numBytes->while->is->read->buf->write->return->buf->toByteArray->catch->finally->catch->finally->is->close
Source#toString()::: source to string:::return->getName
Source#getURLFromFile(File)::: source get from file:::try->return->file->toURI->toURL->catch->return->finally
Source#getLoggerStatic()::: source get logger static:::context->Context->getContextTrustedOrNull->return->context->getLogger
Source#initLogger(Context)::: source init logger:::return->context->this->getClass->getLogger
Source#getLogger()::: source get logger:::return->Context->getContextTrusted->initLogger
Source#dumpFile(File)::: source dump file:::u->getURL->buf->new->StringBuilder->buf->LocalDateTime->now->toString->append->buf->append->if->buf->u->toString->replace->replace->append->else->buf->getName->append->return->buf->toString->new->File
Source#dump(String)::: source dump:::dirFile->new->File->file->dumpFile->if->dirFile->exists->dirFile->mkdirs->debug->return->try->fos->new->FileOutputStream->pw->new->PrintWriter->pw->data->toString->print->pw->flush->catch->ECMAErrors->ioExp->toString->getMessage->debug->finally
Specialization#getMethodHandle():::Get the method handle for the invoker of this ScriptFunction:::return
Specialization#getLinkLogicClass():::Get the link logic class for this ScriptFunction:::return
Specialization#isOptimistic():::An optimistic specialization is one that can throw UnwarrantedOptimismException:::return
Specialization#convertsNumericArgs():::Check if this function converts arguments for numeric parameters to numbers so it's safe to pass booleans as 0 and 1:::return
SpillProperty.Accessors#ensure(int)::: accessors ensure:::len->if->do->while->newCache->new->AccessorsArr->System->arraycopy
SpillProperty.Accessors#getCached(int, boolean, boolean)::: accessors get cached:::ensure->acc->if->new->Accessors->return->acc->getOrCreate
SpillProperty.Accessors#primordial(boolean, boolean)::: accessors primordial:::if->return->return
SpillProperty.Accessors#getOrCreate(boolean, boolean)::: accessors get or create:::accessor->getInner->if->return->primordial->MH->insertArguments->if->MH->filterArguments->setInner->return
SpillProperty.Accessors#setInner(boolean, boolean, MethodHandle)::: accessors set inner:::if->if->else->else->if->else
SpillProperty.Accessors#getInner(boolean, boolean)::: accessors get inner:::if->return->return
SpillProperty#primitiveGetter(int, int)::: spill property primitive getter:::return->Accessors->getCached
SpillProperty#primitiveSetter(int, int)::: spill property primitive setter:::return->Accessors->getCached
SpillProperty#objectGetter(int)::: spill property object getter:::return->Accessors->getCached
SpillProperty#objectSetter(int)::: spill property object setter:::return->Accessors->getCached
SpillProperty#copy()::: spill property copy:::return->new->SpillProperty
SpillProperty#copy(Class)::: spill property copy:::return->new->SpillProperty
SpillProperty#isSpill()::: spill property is spill:::return
SpillProperty#initMethodHandles(Class)::: spill property init method handles:::slot->getSlot->getFlags->primitiveGetter->getFlags->primitiveSetter->objectGetter->objectSetter
StoredScript#getCompilationId():::Get the compilation id for this StoredScript:::return
StoredScript#installClasses(Source, CodeInstaller)::: stored script install classes:::installedClasses->new->HashMap<>->mainClassBytes->classBytes->get->mainClass->installer->install->installedClasses->put->foreach->classBytes->entrySet->className->entry->getKey->if->className->equals->installedClasses->installer->entry->getValue->install->put->installer->installedClasses->values->initialize->return
StoredScript#installFunction(RecompilableScriptFunctionData, CodeInstaller)::: stored script install function:::installedClasses->data->getSource->installClasses->initializer->initializers->values->iterator->next->for->i->initializer->installedClasses->initializer->getClassName->get->setCode->return
StoredScript#installScript(Source, CodeInstaller):::Install as script.:::installedClasses->installClasses->foreach->if->data->data->initTransients->initializer->initializers->data->getFunctionNodeId->get->if->initializer->installedClasses->initializer->getClassName->get->setCode->data->initializeCode->return->installedClasses->get
StoredScript#hashCode()::: stored script hash code:::hash->mainClassName->hashCode->classBytes->hashCode->Arrays->hashCode->return
StoredScript#equals(Object)::: stored script equals:::if->return->if->return->cs->return->mainClassName->equals->classBytes->equals->Arrays->equals
StructureLoader#createModule(String)::: structure loader create module:::descriptor->ModuleDescriptor->Set->of->newModule->NASHORN_MODULE->getName->requires->Set->of->packages->build->mod->Context->createModuleTrusted->loadModuleManipulator->return
StructureLoader#isDualFieldStructure(String):::Returns true if the class name represents a structure object with dual primitive/object fields.:::return->name->startsWith
StructureLoader#isSingleFieldStructure(String):::Returns true if the class name represents a structure object with single object-only fields.:::return->name->startsWith
StructureLoader#isStructureClass(String):::Returns true if the class name represents a Nashorn structure object.:::return->isDualFieldStructure->isSingleFieldStructure
StructureLoader#getModule()::: structure loader get module:::return
StructureLoader#findClass(String)::: structure loader find class:::if->isDualFieldStructure->return->name->DUAL_FIELD_PREFIX->length->substring->generateClass->else->if->isSingleFieldStructure->return->name->SINGLE_FIELD_PREFIX->length->substring->generateClass->return->super->findClass
StructureLoader#generateClass(String, String, boolean):::Generate a layout class.:::context->Context->getContextTrusted->code->new->ObjectClassGenerator->generate->return->getPermissions->new->ProtectionDomain->defineClass
Symbol#toString()::: symbol to string:::return
Symbol#getName():::Return the symbol's name:::return
Symbol#writeReplace()::: symbol write replace:::return->NativeSymbol->keyFor->new->GlobalSymbol
Symbol.GlobalSymbol#readResolve()::: global symbol read resolve:::return->NativeSymbol->_for
Timing#getLogInfo():::Get the log info accumulated by this Timing instance:::return->timeSupplier->get
Timing#getLogInfoLines():::Get the log info accumulated by this Timing instance:::return->timeSupplier->getStrings
Timing#isEnabled():::Check if timing is enabled:::return
Timing#accumulateTime(String, long):::When timing, this can be called to register a new module for timing or add to its accumulated time:::if->isEnabled->Context->getContextTrusted->ensureInitialized->timeSupplier->accumulateTime
Timing#ensureInitialized(Context)::: timing ensure initialized:::if->isEnabled->initLogger->if->log->isEnabled->new->TimeSupplier->Runtime->getRuntime->new->Thread->addShutdownHook->return
Timing#getLoggerName()::: timing get logger name:::return
Timing#initLogger(Context)::: timing init logger:::return->context->this->getClass->getLogger
Timing#getLogger()::: timing get logger:::return
Timing#toMillisPrint(long):::Takes a duration in nanoseconds, and returns a string representation of it rounded to milliseconds.:::return->Long->toMillis->toString
Timing.TimeSupplier#getStrings()::: time supplier get strings:::strs->new->ArrayList<>->br->get->new->StringReader->new->BufferedReader->line->try->while->br->readLine->strs->add->catch->throw->new->RuntimeException->finally->return->strs->new->StringArr->toArray
Timing.TimeSupplier#get()::: time supplier get:::t->System->nanoTime->knownTime->maxKeyLength->maxValueLength->foreach->timings->entrySet->Math->entry->getKey->length->max->Math->entry->getValue->longValue->toMillisPrint->length->max->sb->new->StringBuilder->sb->append->foreach->len->sb->length->sb->append->sb->length->while->sb->append->duration->timings->get->longValue->strDuration->toMillisPrint->strDuration->length->for->i->sb->append->append->total->return->sb->append->toMillisPrint->append->append->toMillisPrint->append->append->append->append->append->CompileUnit->getEmittedUnitCount->append->append->Context->getNamedInstalledScriptCount->append->append->Context->getAnonymousInstalledScriptCount->append->toString
Timing.TimeSupplier#accumulateTime(String, long)::: time supplier accumulate time:::timings->computeIfAbsent->add
Undefined#getUndefined():::Get the value of undefined, this is represented as a global singleton instance of this class:::return
Undefined#getEmpty():::Get the value of empty:::return
Undefined#getClassName():::Get the class name of Undefined:::return
Undefined#toString()::: undefined to string:::return
Undefined#lookup(CallSiteDescriptor):::Lookup the appropriate method for an invoke dynamic call.:::switch->NashornCallSiteDescriptor->getStandardOperation->name->NashornCallSiteDescriptor->getOperand->msg->throw->typeError->if->desc->getOperation->return->findGetIndexMethod->return->findGetMethod->if->desc->getOperation->return->findSetIndexMethod->return->findSetMethod->if->desc->getOperation->return->findDeleteIndexMethod->return->findDeleteMethod->return
Undefined#lookupTypeError(String, CallSiteDescriptor)::: undefined lookup type error:::name->NashornCallSiteDescriptor->getOperand->return->name->isEmpty->typeError
Undefined#findGetMethod(CallSiteDescriptor)::: undefined find get method:::return->MH->NashornCallSiteDescriptor->getOperand->insertArguments->new->GuardedInvocation->asType
Undefined#findGetIndexMethod(CallSiteDescriptor)::: undefined find get index method:::return->new->GuardedInvocation->asType
Undefined#findSetMethod(CallSiteDescriptor)::: undefined find set method:::return->MH->NashornCallSiteDescriptor->getOperand->insertArguments->new->GuardedInvocation->asType
Undefined#findSetIndexMethod(CallSiteDescriptor)::: undefined find set index method:::return->new->GuardedInvocation->asType
Undefined#findDeleteMethod(CallSiteDescriptor)::: undefined find delete method:::return->MH->NashornCallSiteDescriptor->getOperand->insertArguments->new->GuardedInvocation->asType
Undefined#findDeleteIndexMethod(CallSiteDescriptor)::: undefined find delete index method:::return->new->GuardedInvocation->asType
Undefined#get(Object)::: undefined get:::throw->ScriptRuntime->safeToString->typeError
Undefined#set(Object, Object, int)::: undefined set:::throw->ScriptRuntime->safeToString->typeError
Undefined#delete(Object, boolean)::: undefined delete:::throw->ScriptRuntime->safeToString->typeError
Undefined#has(Object)::: undefined has:::return
Undefined#hasOwnProperty(Object)::: undefined has own property:::return
Undefined#findOwnMH(String, Class, Class...)::: undefined find own h:::return->MH->MethodHandles->lookup->MH->type->findVirtual
UnwarrantedOptimismException#isValid(int):::Check if a program point is valid.:::return
UnwarrantedOptimismException#getReturnType(Object)::: unwarranted optimism exception get return type:::if->return->return
UnwarrantedOptimismException#createNarrowest(Object, int):::Create an UnwarrantedOptimismException with the given return value and program point, narrowing the type to number if the value is a float or a long that can be represented as double.:::if->JSType->isRepresentableAsDouble->return->doubleValue->new->UnwarrantedOptimismException->return->new->UnwarrantedOptimismException
UnwarrantedOptimismException#getReturnValueDestructive():::Get the return value:::retval->return
UnwarrantedOptimismException#getReturnValueNonDestructive()::: unwarranted optimism exception get return value non destructive:::return
UnwarrantedOptimismException#getReturnType():::Get the return type:::return
UnwarrantedOptimismException#hasInvalidProgramPoint():::Does this exception refer to an invalid program point? This might be OK if we throw it, e.g:::return
UnwarrantedOptimismException#getProgramPoint():::Get the program point:::return
UnwarrantedOptimismException#replaceProgramPoint(int):::Return a new UnwarrantedOptimismException with the same return value and the new program point.:::return->new->UnwarrantedOptimismException
UnwarrantedOptimismException#getMessage()::: unwarranted optimism exception get message:::return->returnValue->getClass->getSimpleName->hasInvalidProgramPoint
UnwarrantedOptimismException#writeObject(ObjectOutputStream)::: unwarranted optimism exception write object:::throw->getClass->getName->new->NotSerializableException
UnwarrantedOptimismException#readObject(ObjectInputStream)::: unwarranted optimism exception read object:::throw->getClass->getName->new->NotSerializableException
URIUtils#encodeURI(Object, String)::: utils encode i:::return->encode
URIUtils#encodeURIComponent(Object, String)::: utils encode component:::return->encode
URIUtils#decodeURI(Object, String)::: utils decode i:::return->decode
URIUtils#decodeURIComponent(Object, String)::: utils decode component:::return->decode
URIUtils#encode(Object, String, boolean)::: utils encode:::if->string->isEmpty->return->len->string->length->sb->new->StringBuilder->for->k->return->sb->toString
URIUtils#decode(Object, String, boolean)::: utils decode:::if->string->isEmpty->return->len->string->length->sb->new->StringBuilder->for->k->return->sb->toString
URIUtils#hexDigit(char)::: utils hex digit:::chu->Character->toUpperCase->if->return->else->if->return->else->return
URIUtils#toHexByte(char, char)::: utils to hex byte:::i1->hexDigit->i2->hexDigit->if->return->return
URIUtils#toHexEscape(int)::: utils to hex escape:::u->len->b->new->byteArr->if->else->for->mask->for->i->sb->new->StringBuilder->for->i->return->sb->toString
URIUtils#error(String, int)::: utils error:::throw->Integer->toString->uriError
URIUtils#isUnescaped(char, boolean)::: utils is unescaped:::if->return->if->URI_UNESCAPED_NONALPHANUMERIC->indexOf->return->if->return->URI_RESERVED->indexOf->return
UserAccessorProperty.Accessors#set(Object, Object)::: accessors set:::
UserAccessorProperty.Accessors#toString()::: accessors to string:::return
UserAccessorProperty#getObjectGetterInvoker()::: user accessor property get object getter invoker:::return->Context->getGlobal->new->Callable<MethodHandle>->getDynamicInvoker
UserAccessorProperty#getINVOKE_UA_GETTER(Class, int)::: user accessor property get e_ a_ r:::if->UnwarrantedOptimismException->isValid->flags->return->Bootstrap->createDynamicInvoker->else->return->Bootstrap->createDynamicCallInvoker
UserAccessorProperty#getObjectSetterInvoker()::: user accessor property get object setter invoker:::return->Context->getGlobal->new->Callable<MethodHandle>->getDynamicInvoker
UserAccessorProperty#getINVOKE_UA_SETTER(Class)::: user accessor property get e_ a_ r:::return->Bootstrap->createDynamicCallInvoker
UserAccessorProperty#copy()::: user accessor property copy:::return->new->UserAccessorProperty
UserAccessorProperty#copy(Class)::: user accessor property copy:::return->new->UserAccessorProperty
UserAccessorProperty#setAccessors(ScriptObject, PropertyMap, Accessors)::: user accessor property set accessors:::try->super->getSetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
UserAccessorProperty#getAccessors(ScriptObject)::: user accessor property get accessors:::try->gs->super->getGetter->invokeExact->return->catch->throw->throw->new->RuntimeException->finally
UserAccessorProperty#getLocalType()::: user accessor property get local type:::return
UserAccessorProperty#hasGetterFunction(ScriptObject)::: user accessor property has getter function:::return->getAccessors
UserAccessorProperty#hasSetterFunction(ScriptObject)::: user accessor property has setter function:::return->getAccessors
UserAccessorProperty#getIntValue(ScriptObject, ScriptObject)::: user accessor property get int value:::return->getObjectValue
UserAccessorProperty#getDoubleValue(ScriptObject, ScriptObject)::: user accessor property get double value:::return->getObjectValue
UserAccessorProperty#getObjectValue(ScriptObject, ScriptObject)::: user accessor property get object value:::try->return->getAccessors->getObjectGetterInvoker->invokeObjectGetter->catch->throw->throw->new->RuntimeException->finally
UserAccessorProperty#setValue(ScriptObject, ScriptObject, int, boolean)::: user accessor property set value:::setValue
UserAccessorProperty#setValue(ScriptObject, ScriptObject, double, boolean)::: user accessor property set value:::setValue
UserAccessorProperty#setValue(ScriptObject, ScriptObject, Object, boolean)::: user accessor property set value:::try->getAccessors->getObjectSetterInvoker->getKey->toString->invokeObjectSetter->catch->throw->throw->new->RuntimeException->finally
UserAccessorProperty#getGetter(Class)::: user accessor property get getter:::return->Lookup->filterReturnType
UserAccessorProperty#getOptimisticGetter(Class, int)::: user accessor property get optimistic getter:::if->return->else->if->return->else->return
UserAccessorProperty#initMethodHandles(Class)::: user accessor property init method handles:::throw->new->UnsupportedOperationException
UserAccessorProperty#getGetterFunction(ScriptObject)::: user accessor property get getter function:::value->getAccessors->return
UserAccessorProperty#getSetter(Class, PropertyMap)::: user accessor property get setter:::if->return->else->if->return->else->return
UserAccessorProperty#getSetterFunction(ScriptObject)::: user accessor property get setter function:::value->getAccessors->return
UserAccessorProperty#getAccessorsGetter():::Get the getter for the Accessors object:::return->super->getGetter->MethodType->methodType->asType
UserAccessorProperty#invokeObjectGetter(Accessors, MethodHandle, Object)::: user accessor property invoke object getter:::func->if->return->invoker->invokeExact->return
UserAccessorProperty#invokeIntGetter(Accessors, MethodHandle, int, Object)::: user accessor property invoke int getter:::func->if->return->invoker->invokeExact->throw->new->UnwarrantedOptimismException
UserAccessorProperty#invokeNumberGetter(Accessors, MethodHandle, int, Object)::: user accessor property invoke number getter:::func->if->return->invoker->invokeExact->throw->new->UnwarrantedOptimismException
UserAccessorProperty#invokeObjectSetter(Accessors, MethodHandle, String, Object, Object)::: user accessor property invoke object setter:::func->if->invoker->invokeExact->else->if->throw->ScriptRuntime->safeToString->typeError
UserAccessorProperty#invokeIntSetter(Accessors, MethodHandle, String, Object, int)::: user accessor property invoke int setter:::func->if->invoker->invokeExact->else->if->throw->ScriptRuntime->safeToString->typeError
UserAccessorProperty#invokeNumberSetter(Accessors, MethodHandle, String, Object, double)::: user accessor property invoke number setter:::func->if->invoker->invokeExact->else->if->throw->ScriptRuntime->safeToString->typeError
UserAccessorProperty#findOwnMH_S(String, Class, Class...)::: user accessor property find own h_ s:::return->MH->MH->type->findStatic
Version#version():::The current version number as a string.:::return->version
Version#fullVersion():::The current full version number as a string.:::return->version
Version#version(String)::: version version:::if->try->ResourceBundle->getBundle->catch->return->finally->try->return->versionRB->getString->catch->return->finally
WithObject#delete(Object, boolean):::Delete a property based on a key.:::self->propName->JSType->toString->find->self->findProperty->if->return->self->delete->return
WithObject#lookup(CallSiteDescriptor, LinkRequest)::: with object lookup:::if->request->isCallSiteUnstable->return->super->lookup->link->op->desc->getOperation->name->getName->toString->find->expression->findProperty->if->expression->lookup->if->return->fixExpressionCallSite->scope->getProto->scope->findProperty->if->return->scope->lookup->find->getOwner->fixScopeCallSite->fallBack->firstOp->NashornCallSiteDescriptor->getBaseOperation->if->if->NashornCallSiteDescriptor->isMethodFirstOperation->else->else->if->expression->findProperty->if->if->NO_SUCH_METHOD_NAME->equals->expression->noSuchMethod->getProtoSwitchPoint->addSwitchPoint->else->if->NO_SUCH_PROPERTY_NAME->equals->expression->noSuchProperty->getProtoSwitchPoint->addSwitchPoint->if->return->fixExpressionCallSite->scope->lookup->if->return->fixScopeCallSite->return
WithObject#findProperty(Object, boolean, boolean, ScriptObject):::Overridden to try to find the property first in the expression object (and its prototypes), and only then in this object (and its prototypes).:::exprProperty->expression->findProperty->if->return->return->super->findProperty
WithObject#invokeNoSuchProperty(Object, boolean, int)::: with object invoke no such property:::find->expression->findProperty->if->func->find->getObjectValue->if->sfunc->self->sfunc->isStrict->return->ScriptRuntime->apply->return->getProto->invokeNoSuchProperty
WithObject#setSplitState(int)::: with object set split state:::getNonWithParent->setSplitState
WithObject#getSplitState()::: with object get split state:::return->getNonWithParent->getSplitState
WithObject#addBoundProperties(ScriptObject, Property[])::: with object add bound properties:::getNonWithParent->addBoundProperties
WithObject#getNonWithParent():::Get first parent scope that is not an instance of WithObject.:::proto->getProto->while->proto->getProto->return
WithObject#fixReceiverType(GuardedInvocation, MethodHandle)::: with object fix receiver type:::invType->link->getInvocation->type->newInvType->invType->filter->type->returnType->changeParameterType->return->link->asType
WithObject#fixExpressionCallSite(CallSiteDescriptor, GuardedInvocation)::: with object fix expression call site:::if->NashornCallSiteDescriptor->getBaseOperation->NashornCallSiteDescriptor->isMethodFirstOperation->return->fixReceiverType->filterArguments->linkInvocation->link->getInvocation->linkType->linkInvocation->type->linkReturnsFunction->linkType->returnType->isAssignableFrom->return->link->MH->linkInvocation->linkType->changeReturnType->changeParameterType->asType->filterReceiver->foldArguments->filterGuardReceiver->replaceMethods
WithObject#fixScopeCallSite(GuardedInvocation, String, ScriptObject)::: with object fix scope call site:::newLink->fixReceiverType->expressionGuard->expressionGuard->filteredGuard->filterGuardReceiver->return->link->newLink->getInvocation->filterReceiver->NashornGuards->combineGuards->replaceMethods
WithObject#filterGuardReceiver(GuardedInvocation, MethodHandle)::: with object filter guard receiver:::test->link->getGuard->if->return->receiverType->test->type->parameterType->filter->MH->receiverFilter->type->changeParameterType->changeReturnType->asType->return->filterReceiver
WithObject#filterReceiver(MethodHandle, MethodHandle)::: with object filter receiver:::return->MH->receiverFilter->receiverFilter->type->mh->type->parameterType->changeReturnType->asType->filterArguments
WithObject#withFilterExpression(Object):::Drops the WithObject wrapper from the expression.:::return
WithObject#bindToExpression(Object, Object)::: with object bind to expression:::if->return->bindToExpression->else->if->mirror->if->mirror->isFunction->return->new->AbstractJSObject->return
WithObject#bindToExpression(ScriptFunction, Object)::: with object bind to expression:::return->fn->withFilterExpression->createBound
WithObject#expressionGuard(String, ScriptObject)::: with object expression guard:::map->expression->getMap->sp->expression->getProtoSwitchPoints->return->MH->insertArguments
WithObject#withExpressionGuard(Object, PropertyMap, SwitchPoint[])::: with object with expression guard:::return->getMap->hasBeenInvalidated
WithObject#hasBeenInvalidated(SwitchPoint[])::: with object has been invalidated:::if->foreach->if->switchPoint->hasBeenInvalidated->return->return
WithObject#withFilterScope(Object):::Drops the WithObject wrapper from the scope.:::return->getProto
WithObject#getExpression():::Get the with expression for this WithObject:::return
WithObject#findOwnMH(String, Class, Class...)::: with object find own h:::return->MH->MethodHandles->lookup->MH->type->findStatic

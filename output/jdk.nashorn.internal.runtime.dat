AccessControlContextFactory#createAccessControlContext():::Creates an access control context with no permissions.:::return->new->PermissionArr->createAccessControlContext
AccessControlContextFactory#createAccessControlContext(Permission...):::Creates an access control context limited to only the specified permissions.:::perms->new->Permissions->foreach->perms->add->return->new->ProtectionDomainArr->new->ProtectionDomain->new->AccessControlContext
AccessControlContextFactory#createAccessControlContext(String...):::Creates an access control context limited to only the RuntimePermissions of the given names.:::return->makeRuntimePermissions->createAccessControlContext
AccessorProperty#create(Object, int, MethodHandle, MethodHandle):::Create a new accessor property:::return->new->AccessorProperty
AccessorProperty#setInitialValue(ScriptObject, Object):::Set initial value of a script object's property:::hasDualFields->JSType->unboxedFieldType->setType->if->intValue->invokeSetter->else->if->doubleValue->invokeSetter->else->invokeSetter
AccessorProperty#initializeType():::Initialize the type of a property:::hasDualFields->setType
AccessorProperty#invokeSetter(ScriptObject, int):::Invoke setter for this property with a value:::try->self->getMap->getSetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
AccessorProperty#invokeSetter(ScriptObject, double):::Invoke setter for this property with a value:::try->self->getMap->getSetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
AccessorProperty#invokeSetter(ScriptObject, Object):::Invoke setter for this property with a value:::try->self->getMap->getSetter->invokeExact->catch->throw->throw->new->RuntimeException->finally
AccessorProperty#isUndefined():::Is this property of the undefined type?:::return->getLocalType
AllocationStrategy#getAllocatorMap(ScriptObject):::Get the property map for the allocated object.:::protoMap->prototype->getMap->if->if->lastMap->hasSharedProtoMap->if->lastMap->hasSamePrototype->return->if->lastMap->hasSameProtoMap->lastMap->hasUnchangedProtoMap->allocatorMap->PropertyMap->getAllocatorClassName->newMap->sharedProtoMap->new->SharedPropertyMap->allocatorMap->setSharedProtoMap->prototype->setMap->new->AllocatorMap->return->if->lastMap->hasValidSharedProtoMap->lastMap->hasSameProtoMap->prototype->lastMap->getSharedProtoMap->setMap->return->allocatorMap->PropertyMap->getAllocatorClassName->newMap->new->AllocatorMap->return
AllocationStrategy#allocate(PropertyMap):::Allocate an object with the given property map:::try->if->MH->Context->getAllocatorClassName->forStructureClass->symbolName->MH->type->findStatic->return->allocator->invokeExact->catch->throw->throw->new->RuntimeException->finally
ArgumentSetter#setArgument(Object, ScriptObject, int):::Used from generated bytecode to invoke ScriptObject#setArgument(int, Object) without having to reorder the arguments on the stack:::arguments->setArgument
ArgumentSetter#setArrayElement(Object, Object[], int):::Used from generated bytecode to set a variable arity parameter - an array element - without having to reorder the arguments on the stack:::
BitVector#copy(BitVector):::Copy another BitVector into this one:::clone
BitVector#resize(long):::Resize the bit vector to accommodate the new length.:::need->growthNeeded->if->Arrays->copyOf->shift->slot->if->for
BitVector#set(long):::Set a bit in the bit vector.:::
BitVector#clear(long):::Clear a bit in the bit vector.:::
BitVector#toggle(long):::Toggle a bit in the bit vector.:::
BitVector#setTo(long):::Sets all bits in the vector up to the length.:::if->lastWord->lastBits->Arrays->fill->if
BitVector#clearAll():::Clears all bits in the vector.:::Arrays->fill
BitVector#isSet(long):::Test if bit is set in the bit vector.:::return
BitVector#isClear(long):::Test if a bit is clear in the bit vector.:::return
BitVector#shiftLeft(long, long):::Shift bits to the left by shift.:::if->leftShift->rightShift->slotShift->slotCount->slot->from->if->for->else->for->resize
BitVector#shiftRight(long, long):::Shift bits to the right by shift.:::resize->if->rightShift->leftShift->slotShift->slot->from->if->for->else->for->resize
BitVector#setRange(long, long):::Set a bit range.:::if->firstWord->lastWord->firstBits->lastBits->if->else->Arrays->fill
CodeInstaller#getContext():::Return the Context associated with this code installer.:::
CodeInstaller#install(String, byte[]):::Install a class.:::
CodeInstaller#initialize(Collection>, Source, Object[]):::Initialize already installed classes.:::
CodeInstaller#verify(byte[]):::Verify generated bytecode before emission:::
CodeInstaller#getUniqueScriptId():::Get next unique script id:::
CodeInstaller#storeScript(String, Source, String, Map, Map, Object[], int):::Store a compiled script for later reuse:::
CodeInstaller#loadScript(Source, String):::Load a previously compiled script:::
CodeInstaller#getOnDemandCompilationInstaller():::Returns a code installer #isCompatibleWith(CodeInstaller) compatible with this installer, but is suitable for on-demand compilations:::
CodeInstaller#getMultiClassCodeInstaller():::Returns a code installer #isCompatibleWith(CodeInstaller) compatible with this installer, but is suitable for installation of multiple classes that reference each other by name:::
CodeInstaller#isCompatibleWith(CodeInstaller):::Returns true if this code installer is compatible with the other code installer:::
CodeStore#newCodeStore(Context):::Returns a new code store instance.:::try->store->new->DirectoryCodeStore->store->initLogger->return->catch->context->getLogger->warning->return->finally
CodeStore#store(String, Source, String, Map, Map, Object[], int):::Store a compiled script in the cache.:::return->storedScriptFor->store
CodeStore#store(String, Source, StoredScript):::Stores a compiled script.:::
CodeStore#load(Source, String):::Return a compiled script from the cache, or null if it isn't found.:::
CodeStore#storedScriptFor(Source, String, Map, Map, Object[], int):::Returns a new StoredScript instance.:::foreach->if->getLogger->warning->return->return->new->StoredScript
CodeStore#getCacheKey(Object, Type[]):::Generate a string representing the function with functionId and paramTypes.:::b->new->StringBuilder->append->if->b->append->foreach->b->Type->getShortSignatureDescriptor->append->return->b->toString
CommandExecutor#process(String):::process - process a command string:::tokenizer->createTokenizer->command->new->ArrayList<>->sb->new->StringBuilder->try->while->tokenizer->nextToken->token->if->if->sb->length->command->sb->append->toString->add->sb->setLength->command->if->return->command->clear->else->if->token->endsWith->sb->token->token->length->substring->append->append->else->if->sb->length->if->sb->append->sb->append->sb->append->sb->toString->sb->setLength->command->add->else->command->sb->append->toString->add->sb->setLength->catch->finally->if->sb->length->command->sb->toString->add->command
CommandExecutor#process(List):::process - process a command array of strings:::command->new->ArrayList<>->iterator->tokens->iterator->while->iterator->hasNext->token->iterator->next->if->continue->switch->command->command->clear->continue->command->command->clear->continue->command->add->command
CompiledFunction#isOptimistic():::An optimistic specialization is one that can throw UnwarrantedOptimismException:::return->isSpecialization->specialization->isOptimistic
CompiledFunction#createComposableInvoker():::Returns an invoker method handle for this function:::return->createComposableInvoker
CompiledFunction#createComposableConstructor():::Returns an invoker method handle for this function when invoked as a constructor:::return->createComposableInvoker
CompiledFunction#createFunctionInvocation(Class, int):::Returns a guarded invocation for this function when not invoked as a constructor:::return->new->Supplier<MethodHandle>->getValidOptimisticInvocation->createInvocation
CompiledFunction#createConstructorInvocation():::Returns a guarded invocation for this function when invoked as a constructor:::return->new->Supplier<MethodHandle>->getValidOptimisticInvocation->createInvocation
ConsString#getComponents():::Returns the components of this ConsString as a CharSequence array with two elements:::return->new->CharSequenceArr
Context#getGlobal():::Get the current global scope:::return->currentGlobal->get
Context#setGlobal(ScriptObject):::Set the current global scope:::if->throw->new->IllegalArgumentException->setGlobal
Context#setGlobal(Global):::Set the current global scope:::if->globalConstants->getContext->getGlobalConstants->if->globalConstants->invalidateAll->currentGlobal->set
Context#getContext():::Get context of the current global:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return->getContextTrusted
Context#getCurrentErr():::Get current context's error writer:::global->getGlobal->return->global->getContext->getErr->new->PrintWriter
Context#err(String):::Output text to this Context's error stream:::err
Context#err(String, boolean):::Output text to this Context's error stream, optionally with a newline afterwards:::err->Context->getCurrentErr->if->if->err->println->else->err->print
Context#getClassFilter():::Get the class filter for this context:::return
Context#getGlobalConstants():::Returns the factory for constant method handles for global properties:::return->globalConstantsRef->get
Context#getErrorManager():::Get the error manager for this context:::return
Context#getEnv():::Get the script environment for this context:::return
Context#getOut():::Get the output stream for this context:::return->env->getOut
Context#getErr():::Get the error stream for this context:::return->env->getErr
Context#useDualFields():::Should scripts compiled by this context use dual field representation?:::return
Context#getGlobalMap():::Get the PropertyMap of the current global scope:::return->Context->getGlobal->getMap
Context#compileScript(Source, ScriptObject):::Compile a top level script.:::return->compileScript
Context.MultiGlobalCompiledScript#getFunction(Global):::Obtain script function object for a specific global scope object.:::
Context#compileScript(Source):::Compile a top level script.:::clazz->compile->createProgramFunctionHandle->getCreateProgramFunctionHandle->return->new->MultiGlobalCompiledScript
Context#eval(ScriptObject, String, Object, Object):::Entry point for eval:::return->eval
Context#eval(ScriptObject, String, Object, Object, boolean, boolean):::Entry point for eval:::file->location->toString->source->sourceFor->directEval->global->Context->getGlobal->scope->strictFlag->clazz->try->new->ThrowErrorManager->compile->catch->e->throwAsEcmaException->return->finally->if->try->clazz->STRICT_MODE->symbolName->getField->getBoolean->catch->finally->if->newScope->func->getProgramFunction->evalThis->if->else->return->ScriptRuntime->apply
Context#load(Object, Object):::Implementation of load Nashorn extension:::src->from->toString->source->if->srcStr->if->srcStr->startsWith->url->srcStr->LOAD_CLASSPATH->length->substring->getResourceURL->url->toString->sourceFor->else->file->new->File->if->srcStr->indexOf->if->loadInternal->loadInternal->url->try->new->URL->catch->file->toURI->toURL->finally->url->toString->sourceFor->else->if->file->isFile->sourceFor->else->if->isFile->file->file->getName->sourceFor->else->if->url->url->toString->sourceFor->else->if->sobj->if->sobj->has->sobj->has->script->JSType->sobj->get->toString->name->JSType->sobj->get->toString->sourceFor->else->if->map->if->map->containsKey->map->containsKey->script->JSType->map->get->toString->name->JSType->map->get->toString->sourceFor->if->if->isScope->sobj->return->evaluateSource->else->if->global->getGlobal->return->evaluateSource->else->global->getGlobal->evalScope->newScope->withObj->ScriptRuntime->openWith->return->evaluateSource->throw->ScriptRuntime->safeToString->typeError
Context#loadWithNewGlobal(Object, Object...):::Implementation of loadWithNewGlobal Nashorn extension:::oldGlobal->getGlobal->newGlobal->AccessController->new->PrivilegedAction<Global>->doPrivileged->initGlobal->setGlobal->wrapped->ScriptObjectMirror->wrapArray->newGlobal->newGlobal->wrapAsObject->put->try->return->ScriptObjectMirror->ScriptObjectMirror->load->wrap->unwrap->catch->finally->setGlobal
Context#forStructureClass(String):::Load or get a structure class:::if->System->getSecurityManager->StructureLoader->isStructureClass->throw->new->ClassNotFoundException->return->structureClasses->try->return->Class->forName->catch->throw->new->AssertionError->finally->computeIfAbsent
Context#isStructureClass(String):::Is className the name of a structure class?:::return->StructureLoader->isStructureClass
Context#checkPackageAccess(Class):::Checks that the given Class can be accessed from no permissions context.:::sm->System->getSecurityManager->if->bottomClazz->while->bottomClazz->isArray->bottomClazz->getComponentType->bottomClazz->getName->checkPackageAccess
Context#checkPackageAccess(String):::Checks that the given package name can be accessed from no permissions context.:::sm->System->getSecurityManager->if->pkgName->endsWith->checkPackageAccess
Context#isAccessibleClass(Class):::Checks that the given Class is public and it can be accessed from no permissions context.:::return->Modifier->clazz->getModifiers->isPublic->Context->isAccessiblePackage
Context#findClass(String):::Lookup a Java class:::if->fullName->indexOf->fullName->indexOf->throw->new->ClassNotFoundException->if->classFilter->exposeToScripts->throw->new->ClassNotFoundException->sm->System->getSecurityManager->if->checkPackageAccess->if->return->Class->forName->else->cl->Class->forName->if->cl->getClassLoader->return->else->throw->new->ClassNotFoundException
Context#printStackTrace(Throwable):::Hook to print stack trace for a Throwable that occurred during execution:::if->t->Context->getCurrentErr->printStackTrace
Context#verify(byte[]):::Verify generated bytecode before emission:::if->if->System->getSecurityManager->CheckClassAdapter->new->ClassReader->new->PrintWriter->verify
Context#createGlobal():::Create and initialize a new global scope object.:::return->newGlobal->initGlobal
Context#newGlobal():::Create a new uninitialized global scope object:::createOrInvalidateGlobalConstants->return->new->Global
Context#initGlobal(Global, ScriptEngine):::Initialize given global scope object.:::if->oldGlobal->Context->getGlobal->try->Context->setGlobal->global->initBuiltinObjects->catch->finally->Context->setGlobal->return
Context#initGlobal(Global):::Initialize given global scope object.:::return->initGlobal
Context#getContextTrusted():::Return the current global's context:::return->getGlobal->getContext
Context#getDynamicLinker(Class):::Gets the Nashorn dynamic linker for the specified class:::return->fromClass
Context#getDynamicLinker():::Gets the Nashorn dynamic linker associated with the current context.:::return->getContextTrusted
Context#createModuleTrusted(ModuleDescriptor, ClassLoader):::Creates a module layer with one module that is defined to the given class loader.:::return->ModuleLayer->boot->createModuleTrusted
Context#createModuleTrusted(ModuleLayer, ModuleDescriptor, ClassLoader):::Creates a module layer with one module that is defined to the given class loader.:::mn->descriptor->name->mref->new->ModuleReference->finder->new->ModuleFinder->cf->parent->configuration->ModuleFinder->of->Set->of->resolve->pa->parent->defineModules->layer->AccessController->doPrivileged->m->layer->findModule->get->return
Context#fromClass(Class):::Try to infer Context instance from the Class:::loader->try->clazz->getClassLoader->catch->finally->if->return->getContext->return->Context->getContextTrusted
Context#getLogger(Class):::Get a logger, given a loggable class:::return->getLogger
Context#getLogger(Class, Consumer):::Get a logger, given a loggable class:::name->getLoggerName->logger->loggers->get->if->if->env->hasLogger->return->info->get->info->getLevel->info->isQuiet->new->DebugLogger->if->initHook->accept->loggers->put->return
Context#addLoggingToHandle(Class, MethodHandle, Supplier):::Given a Loggable class, weave debug info info a method handle for that logger:::return->addLoggingToHandle
Context#addLoggingToHandle(Class, Level, MethodHandle, int, boolean, Supplier):::Given a Loggable class, weave debug info info a method handle for that logger.:::log->getLogger->if->log->isEnabled->return->MethodHandleFactory->text->get->addDebugPrintout->return
Context#newBuiltinSwitchPoint(String):::Create a new builtin switchpoint and return it:::sp->new->BuiltinSwitchPoint->builtinSwitchPoints->put->return
Context#getBuiltinSwitchPoint(String):::Return the builtin switchpoint for a particular key name:::return->builtinSwitchPoints->get
Debug#firstJSFrame(Throwable):::Return the topmost JavaScript frame in a stack trace:::foreach->t->getStackTrace->if->ECMAErrors->isScriptFrame->return->ste->toString->return
Debug#firstJSFrame():::Return the topmost JavaScript frame from the current continuation:::return->new->Throwable->firstJSFrame
Debug#scriptStack():::Return a formatted script stack trace string with frames information separated by '\n':::return->NashornException->new->Throwable->getScriptStackString
Debug#id(Object):::Return the system identity hashcode for an object as a human readable string:::return->String->System->identityHashCode->format
Debug#intId(Object):::Same as Debug#id but returns the identity hashcode as an integer:::return->System->identityHashCode
Debug#stackTraceElementAt(int):::Return a stack trace element description at a depth from where we are not:::return->new->Throwable->getStackTrace->toString
Debug#caller(int, int, String...):::Determine caller for tracing purposes.:::result->callers->Thread->currentThread->getStackTrace->c->for->i->return->result->isEmpty
Debug#dumpTokens(Source, Lexer, TokenStream):::Dump a token stream to stdout  TODO: most other bugging goes to stderr, change?:::type->k->do->while->stream->last->lexer->lexify->token->stream->get->Token->descType->Token->toString->println->while
DebuggerSupport#notifyInvoke(MethodHandle):::Hook that is called just before invoking method handle from ScriptFunctionData via invoke, constructor method calls.:::
DebuggerSupport#getSourceInfo(Class):::Return the script source info for the given script class.:::if->isAssignableFrom->try->sourceField->clazz->SOURCE->symbolName->getDeclaredField->sourceField->setAccessible->src->sourceField->get->return->src->getSourceInfo->catch->return->finally->return
DebuggerSupport#getGlobal():::Return the current context global.:::return->Context->getGlobal
DebuggerSupport#eval(ScriptObject, Object, String, boolean):::Call eval on the current global.:::global->Context->getGlobal->initialScope->callThis->context->global->getContext->try->return->context->eval->catch->return->finally
DebuggerSupport#valueInfos(Object, boolean):::This method returns a bulk description of an object's properties.:::return->new->HashSet<>->getDebuggerValueDescs
DebuggerSupport#valueInfo(String, Object, boolean):::This method returns a debugger description of the value.:::return->new->HashSet<>->valueInfo
DebuggerSupport#valueAsString(Object):::This method returns a string representation of a value.:::type->JSType->of->switch->return->value->toString->return->value->toString->escape->return->JSType->doubleValue->toString->return->return->return->ScriptRuntime->safeToString->if->return->toSource->return->value->toString->return->value->toString
ECMAErrors#asEcmaException(ParserException):::Error dispatch mechanism:::return->Context->getGlobal->asEcmaException
ECMAErrors#asEcmaException(Global, ParserException):::Error dispatch mechanism:::errorType->e->getErrorType->globalObj->msg->e->getMessage->switch->return->globalObj->newError->error->return->globalObj->newEvalError->error->return->globalObj->newRangeError->error->return->globalObj->newReferenceError->error->return->globalObj->newSyntaxError->error->return->globalObj->newTypeError->error->return->globalObj->newURIError->error->throw->e->getMessage->new->AssertionError
ECMAErrors#syntaxError(String, String...):::Create a syntax error (ECMA 15.11.6.4):::return->Context->getGlobal->syntaxError
ECMAErrors#syntaxError(Global, String, String...):::Create a syntax error (ECMA 15.11.6.4):::return->syntaxError
ECMAErrors#syntaxError(Throwable, String, String...):::Create a syntax error (ECMA 15.11.6.4):::return->Context->getGlobal->syntaxError
ECMAErrors#syntaxError(Global, Throwable, String, String...):::Create a syntax error (ECMA 15.11.6.4):::msg->getMessage->return->global->newSyntaxError->error
ECMAErrors#typeError(String, String...):::Create a type error (ECMA 15.11.6.5):::return->Context->getGlobal->typeError
ECMAErrors#typeError(Global, String, String...):::Create a type error (ECMA 15.11.6.5):::return->typeError
ECMAErrors#typeError(Throwable, String, String...):::Create a type error (ECMA 15.11.6.5):::return->Context->getGlobal->typeError
ECMAErrors#typeError(Global, Throwable, String, String...):::Create a type error (ECMA 15.11.6.5):::msg->getMessage->return->global->newTypeError->error
ECMAErrors#rangeError(String, String...):::Create a range error (ECMA 15.11.6.2):::return->Context->getGlobal->rangeError
ECMAErrors#rangeError(Global, String, String...):::Create a range error (ECMA 15.11.6.2):::return->rangeError
ECMAErrors#rangeError(Throwable, String, String...):::Create a range error (ECMA 15.11.6.2):::return->Context->getGlobal->rangeError
ECMAErrors#rangeError(Global, Throwable, String, String...):::Create a range error (ECMA 15.11.6.2):::msg->getMessage->return->global->newRangeError->error
ECMAErrors#referenceError(String, String...):::Create a reference error (ECMA 15.11.6.3):::return->Context->getGlobal->referenceError
ECMAErrors#referenceError(Global, String, String...):::Create a reference error (ECMA 15.11.6.3):::return->referenceError
ECMAErrors#referenceError(Throwable, String, String...):::Create a reference error (ECMA 15.11.6.3):::return->Context->getGlobal->referenceError
ECMAErrors#referenceError(Global, Throwable, String, String...):::Create a reference error (ECMA 15.11.6.3):::msg->getMessage->return->global->newReferenceError->error
ECMAErrors#uriError(String, String...):::Create a URI error (ECMA 15.11.6.6):::return->Context->getGlobal->uriError
ECMAErrors#uriError(Global, String, String...):::Create a URI error (ECMA 15.11.6.6):::return->uriError
ECMAErrors#uriError(Throwable, String, String...):::Create a URI error (ECMA 15.11.6.6):::return->Context->getGlobal->uriError
ECMAErrors#uriError(Global, Throwable, String, String...):::Create a URI error (ECMA 15.11.6.6):::msg->getMessage->return->global->newURIError->error
ECMAErrors#getMessage(String, String...):::Get the exception message by placing the args in the resource defined by the resource tag:::try->return->MESSAGES_BUNDLE->getString->new->MessageFormat->format->catch->throw->new->RuntimeException->finally
ECMAErrors#isScriptFrame(StackTraceElement):::Check if a stack trace element is in JavaScript:::className->frame->getClassName->if->className->startsWith->CompilerConstants->frame->getMethodName->isInternalMethodName->source->frame->getFileName->return->source->endsWith->return
ECMAException#create(Object, String, int, int):::Factory method to retrieve the underlying exception or create an exception:::if->exception->getException->if->ee->if->ee->getThrown->ee->setFileName->ee->setLineNumber->ee->setColumnNumber->return->return->new->ECMAException
ECMAException#getThrown():::Get the thrown object:::return
ECMAException#getException(ScriptObject):::Get the ECMAException, i.e:::if->errObj->hasOwnProperty->return->errObj->get->return
ECMAException#printStackTrace(ScriptObject):::Print the stack trace for a ScriptObject representing an error:::exception->getException->if->Context->getCurrentErr->printStackTrace->else->Context->err->return
ECMAException#getLineNumber(ScriptObject):::Get the line number for a ScriptObject representing an error:::e->getException->if->return->getLineNumber->else->if->return->getLineNumber->return
ECMAException#getColumnNumber(ScriptObject):::Get the column number for a ScriptObject representing an error:::e->getException->if->return->getColumnNumber->else->if->return->getColumnNumber->return
ECMAException#getFileName(ScriptObject):::Get the file name for a ScriptObject representing an error:::e->getException->if->return->getFileName->else->if->return->getFileName->return
ECMAException#safeToString(ScriptObject):::Stateless string conversion for an error object:::name->try->errObj->get->catch->finally->if->else->ScriptRuntime->safeToString->msg->try->errObj->get->catch->finally->if->else->ScriptRuntime->safeToString->if->isEmpty->return->if->isEmpty->return->return
ErrorManager#format(String, Source, int, int, long):::Format an error message to include source and line information.:::eoln->System->lineSeparator->position->Token->descPosition->sb->new->StringBuilder->sb->source->getName->append->append->append->append->append->append->append->append->sourceLine->source->getSourceLine->sb->append->append->for->i->sb->append->return->sb->toString
ErrorManager#error(String):::Report an error message provided:::writer->println->writer->flush->checkLimit
ErrorManager#warning(ParserException):::Report a warning using information provided by the ParserException:::e->getMessage->warning
ErrorManager#warning(String):::Report a warning message provided:::writer->println->writer->flush->checkLimit
ErrorManager#hasErrors():::Test to see if errors have occurred.:::return
ErrorManager#getLimit():::Get the message limit:::return
ErrorManager#setLimit(int):::Set the message limit:::
ErrorManager#isWarningsAsErrors():::Check whether warnings should be treated like errors:::return
ErrorManager#setWarningsAsErrors(boolean):::Set warnings to be treated as errors:::
ErrorManager#getNumberOfErrors():::Get the number of errors:::return
ErrorManager#getNumberOfWarnings():::Get number of warnings:::return
ErrorManager#reset():::Clear warnings and error count.:::
FindProperty#replaceProperty(Property):::Return a copy of this FindProperty with a different property.:::return->new->FindProperty
FindProperty#getGetter(Class, int, LinkRequest):::Ask for a getter that returns the given type:::getter->if->isValid->property->getOptimisticGetter->else->property->getGetter->if->MH->UserAccessorProperty->getINVOKE_UA_GETTER->insertArguments->if->isValid->type->isPrimitive->MH->insertArguments->property->setType->return->insertAccessorsGetter->return
FindProperty#getSetter(Class, boolean, LinkRequest):::Ask for a setter that sets the given type:::setter->property->getOwner->getMap->getSetter->if->MH->UserAccessorProperty->getINVOKE_UA_SETTER->property->getKey->insertArguments->property->setType->return->insertAccessorsGetter->return
FindProperty#getOwner():::Return the ScriptObject owning of the property:  this means the prototype.:::return
FindProperty#getSelf():::Return the ScriptObject where the search started:::return
FindProperty#getGetterReceiver():::Return the appropriate receiver for a getter.:::return->property->isAccessorProperty
FindProperty#getSetterReceiver():::Return the appropriate receiver for a setter.:::return->property->hasSetterFunction
FindProperty#getProperty():::Return the property that was found:::return
FindProperty#isInheritedOrdinaryProperty():::Check if the property found was inherited from a prototype and it is an ordinary property (one that has no accessor function).:::return->isSelf->getProperty->isAccessorProperty
FindProperty#isSelf():::Check if the property found was NOT inherited, i.e:::return
FindProperty#isScope():::Check if the property is in the scope:::return->prototype->isScope
FindProperty#getIntValue():::Get the property value from self as object.:::return->property->getGetterReceiver->getOwner->getIntValue
FindProperty#getDoubleValue():::Get the property value from self as object.:::return->property->getGetterReceiver->getOwner->getDoubleValue
FindProperty#getObjectValue():::Get the property value from self as object.:::return->property->getGetterReceiver->getOwner->getObjectValue
FindProperty#setValue(int, boolean):::Set the property value in self.:::property->getSetterReceiver->getOwner->setValue
FindProperty#setValue(double, boolean):::Set the property value in self.:::property->getSetterReceiver->getOwner->setValue
FindProperty#setValue(Object, boolean):::Set the property value in self.:::property->getSetterReceiver->getOwner->setValue
FindProperty#getProtoChainLength():::Get the number of objects in the prototype chain between the self and the owner objects.:::length->for->obj->obj->getProto->return
FunctionInitializer#getClassName():::Returns the name of the class implementing the function.:::return
FunctionInitializer#getMethodType():::Returns the type of the method implementing the function.:::return
FunctionInitializer#getFlags():::Returns the function flags.:::return
FunctionInitializer#getCode():::Returns the class implementing the function.:::return
FunctionInitializer#setCode(Class):::Set the class implementing the function:::if->throw->new->IllegalStateException
FunctionInitializer#getInvalidatedProgramPoints():::Returns the map of invalidated program points.:::return
GlobalConstants#invalidateAll():::To avoid an expensive global guard "is this the same global", similar to the receiver guard on the ScriptObject level, we invalidate all getters once when we switch globals:::if->invalidatedForever->get->log->info->synchronized->foreach->map->values->acc->invalidateUncounted
GlobalConstants#invalidateForever():::To avoid an expensive global guard "is this the same global", similar to the receiver guard on the ScriptObject level, we invalidate all getters when the second Global is created by the Context owning this instance:::if->invalidatedForever->compareAndSet->log->info->synchronized->foreach->map->values->acc->invalidateForever->map->clear
GlobalConstants#delete(Object):::Called from script object on property deletion to erase a property that might be linked as MethodHandle.constant and force relink:::if->invalidatedForever->get->synchronized->acc->map->get->if->acc->invalidateForever
GlobalConstants#findSetMethod(FindProperty, ScriptObject, GuardedInvocation, CallSiteDescriptor, LinkRequest):::Augment a setter with switchpoint for invalidating its getters, should the setter be called:::if->invalidatedForever->get->isGlobalSetter->return->name->NashornCallSiteDescriptor->getOperand->synchronized->acc->getOrCreateSwitchPoint->if->log->isEnabled->log->fine->if->acc->mayRetry->invalidatedForever->get->if->log->isEnabled->log->quote->DynamicLinker->getLinkedCallSiteLocation->fine->return->if->acc->hasBeenInvalidated->log->info->acc->newSwitchPoint->target->inv->getInvocation->receiverType->target->type->parameterType->boundInvalidator->MH->bindTo->invalidator->MH->boundInvalidator->type->changeParameterType->changeReturnType->asType->mh->MH->inv->getInvocation->MH->insertArguments->filterArguments->log->quote->acc->getSwitchPoint->info->return->inv->getGuard->acc->getSwitchPoint->inv->getException->new->GuardedInvocation
GlobalConstants#staticConstantGetter(Object):::Try to reuse constant method handles for getters:::return->MH->JSType->unboxConstant->dropArguments
GlobalConstants#findGetMethod(FindProperty, ScriptObject, CallSiteDescriptor):::Try to turn a getter into a MethodHandle.constant, if possible:::if->invalidatedForever->get->NashornCallSiteDescriptor->isFastScope->find->getOwner->isGlobal->find->getProperty->return->isOptimistic->NashornCallSiteDescriptor->isOptimistic->programPoint->getProgramPoint->retType->desc->getMethodType->returnType->name->NashornCallSiteDescriptor->getOperand->synchronized->acc->getOrCreateSwitchPoint->log->fine->c->find->getObjectValue->if->log->isEnabled->log->fine->if->acc->hasBeenInvalidated->acc->guardFailed->invalidatedForever->get->if->log->isEnabled->log->quote->DynamicLinker->getLinkedCallSiteLocation->info->return->cmh->constantGetter->mh->guard->if->if->JSType->cmh->type->returnType->getAccessorTypeIndex->JSType->getAccessorTypeIndex->MH->cmh->type->changeReturnType->asType->else->MH->MH->methodHandle->insertArguments->dropArguments->else->Lookup->filterReturnType->if->find->getOwner->isGlobal->else->MH->insertArguments->if->log->isEnabled->log->quote->acc->getSwitchPoint->info->MethodHandleFactory->addDebugPrintout->return->acc->getSwitchPoint->new->GuardedInvocation
GlobalFunctions#parseInt(Object, Object, Object):::ECMA 15.1.2.2 parseInt implementation:::return->JSType->JSType->toString->trimLeft->JSType->toInt32->parseIntInternal
GlobalFunctions#parseInt(Object, Object, int):::ECMA 15.1.2.2 parseInt implementation specialized for int radix:::return->JSType->JSType->toString->trimLeft->parseIntInternal
GlobalFunctions#parseInt(Object, Object):::ECMA 15.1.2.2 parseInt implementation specialized for no radix argument:::return->JSType->JSType->toString->trimLeft->parseIntInternal
GlobalFunctions#parseFloat(Object, Object):::ECMA 15.1.2.3 parseFloat implementation:::str->JSType->JSType->toString->trimLeft->length->str->length->if->return->start->negative->ch->str->charAt->if->else->if->else->if->if->str->startsWith->return->if->return->str->charAt->if->if->str->substring->startsWith->return->dotSeen->exponentOk->exponentOffset->end->for->if->if->return->try->result->Double->str->substring->valueOf->return->catch->return->finally
GlobalFunctions#isNaN(Object, Object):::ECMA 15.1.2.4, isNaN implementation:::return->Double->JSType->toNumber->isNaN
GlobalFunctions#isFinite(Object, Object):::ECMA 15.1.2.5, isFinite implementation:::value->JSType->toNumber->return->Double->isInfinite->Double->isNaN
GlobalFunctions#encodeURI(Object, Object):::ECMA 15.1.3.3, encodeURI implementation:::return->URIUtils->JSType->toString->encodeURI
GlobalFunctions#encodeURIComponent(Object, Object):::ECMA 15.1.3.4, encodeURIComponent implementation:::return->URIUtils->JSType->toString->encodeURIComponent
GlobalFunctions#decodeURI(Object, Object):::ECMA 15.1.3.1, decodeURI implementation:::return->URIUtils->JSType->toString->decodeURI
GlobalFunctions#decodeURIComponent(Object, Object):::ECMA 15.1.3.2, decodeURIComponent implementation:::return->URIUtils->JSType->toString->decodeURIComponent
GlobalFunctions#escape(Object, Object):::ECMA B.2.1, escape implementation:::str->JSType->toString->length->str->length->if->return->sb->new->StringBuilder->for->k->return->sb->toString
GlobalFunctions#unescape(Object, Object):::ECMA B.2.2, unescape implementation:::str->JSType->toString->length->str->length->if->return->sb->new->StringBuilder->for->k->return->sb->toString
GlobalFunctions#anonymous(Object):::ECMA 15.3.4 Properties of the Function Prototype Object:::return
JSONFunctions#quote(String):::Returns JSON-compatible quoted version of the given string.:::return->JSONParser->quote
JSONFunctions#parse(Object, Object):::Parses the given JSON text string and returns object representation.:::str->JSType->toString->global->Context->getGlobal->dualFields->useDualFields->parser->new->JSONParser->value->try->parser->parse->catch->throw->ECMAErrors->e->getMessage->syntaxError->finally->return->applyReviver
JSONListAdapter#unwrap(Object):::Unwraps this adapter into its underlying non-JSObject representative.:::unwrapped->ScriptObjectMirror->unwrap->return
ListAdapter#create(Object):::Factory to create a ListAdapter for a given script object.:::global->Context->getGlobal->return->getJSObject->new->ListAdapter
NashornLoader#createClassLoader(String, ClassLoader):::Create a secure URL class loader for the given classpath:::urls->pathToURLs->return->URLClassLoader->newInstance
NativeJavaPackage#getName():::Get the full name of the package:::return
NativeJavaPackage#__noSuchProperty__(Object, Object):::"No such property" call placeholder:::throw->new->AssertionError
NativeJavaPackage#__noSuchMethod__(Object, Object...):::"No such method call" placeholder  This can never be called as we override ScriptObject#noSuchMethod:::throw->new->AssertionError
NativeJavaPackage#noSuchProperty(CallSiteDescriptor, LinkRequest):::Handle creation of new attribute.:::propertyName->NashornCallSiteDescriptor->getOperand->createProperty->return->super->lookup
OptimisticBuiltins#getLinkLogic(Class):::Return an instance of the linking logic we need for a particular LinkLogic subclass, gotten from the compile time annotation of a specialized builtin method No assumptions can be made about the lifetime of the instance:::
OptimisticBuiltins#hasPerInstanceAssumptions():::Does this link logic vary depending on which instance we are working with:::
OptimisticReturnFilters#filterOptimisticReturnValue(MethodHandle, Class, int):::Given a method handle and an expected return type, perform return value filtering according to the optimistic type coercion rules:::if->isValid->return->type->mh->type->actualReturnType->type->returnType->if->TypeUtilities->isConvertibleWithoutLoss->return->guard->getOptimisticTypeGuard->return->MH->MH->guard->type->parameterCount->insertArguments->filterReturnValue
OptimisticReturnFilters#filterOptimisticReturnValue(GuardedInvocation, CallSiteDescriptor):::Given a guarded invocation and a callsite descriptor, perform return value filtering according to the optimistic type coercion rules, using the return value from the descriptor:::if->NashornCallSiteDescriptor->isOptimistic->return->return->inv->inv->getInvocation->desc->getMethodType->returnType->NashornCallSiteDescriptor->getProgramPoint->filterOptimisticReturnValue->inv->getGuard->replaceMethods
OptimisticReturnFilters#ensureInt(Object, int):::Returns the argument value as an int:::if->isPrimitiveNumberWrapper->d->doubleValue->if->JSType->isStrictlyRepresentableAsInt->return->throw->UnwarrantedOptimismException->createNarrowest
OptimisticReturnFilters#ensureNumber(Object, int):::Returns the argument value as a double:::if->isPrimitiveNumberWrapper->arg->getClass->JSType->isRepresentableAsDouble->return->doubleValue->throw->new->UnwarrantedOptimismException
ParserException#getSource():::Get the Source of this ParserException:::return
ParserException#getToken():::Get the token responsible for this ParserException:::return
ParserException#getPosition():::Get token position within source where the error originated.:::return->Token->descPosition
ParserException#getErrorType():::Get the JSErrorType of this ParserException:::return
ParserException#throwAsEcmaException():::Throw this ParserException as one of the 7 native JavaScript errors:::throw->ECMAErrors->asEcmaException
ParserException#throwAsEcmaException(Global):::Throw this ParserException as one of the 7 native JavaScript errors:::throw->ECMAErrors->asEcmaException
Property#copy():::Copy function:::
Property#copy(Class):::Copy function:::
Property#mergeFlags(PropertyDescriptor, PropertyDescriptor):::Property flag utility method for PropertyDescriptors:::propFlags->value->newDesc->has->newDesc->isConfigurable->oldDesc->isConfigurable->if->newDesc->has->newDesc->isEnumerable->oldDesc->isEnumerable->if->newDesc->has->newDesc->isWritable->oldDesc->isWritable->if->return
Property#setBuiltinSwitchPoint(SwitchPoint):::Set the change callback for this property, i.e:::
Property#getBuiltinSwitchPoint():::Builtin properties have an invalidation switchpoint that is invalidated when they are set, this is a getter for it:::return
Property#isBuiltin():::Checks if this is a builtin property, this means that it has a builtin switchpoint that hasn't been invalidated by a setter:::return->builtinSwitchPoint->hasBeenInvalidated
Property#toFlags(PropertyDescriptor):::Property flag utility method for PropertyDescriptor:::propFlags->if->desc->isConfigurable->if->desc->isEnumerable->if->desc->isWritable->return
Property#hasGetterFunction(ScriptObject):::Check whether this property has a user defined getter function:::return
Property#hasSetterFunction(ScriptObject):::Check whether this property has a user defined setter function:::return
Property#isWritable():::Check whether this property is writable (see ECMA 8.6.1):::return
Property#isConfigurable():::Check whether this property is writable (see ECMA 8.6.1):::return
Property#isEnumerable():::Check whether this property is enumerable (see ECMA 8.6.1):::return
Property#isParameter():::Check whether this property is used as a function parameter:::return
Property#hasArguments():::Check whether this property is in an object with arguments field:::return
Property#isSpill():::Check whether this is a spill property, i.e:::return
Property#isBound():::Is this property bound to a receiver? If this method returns true get and set operations will be delegated to a statically bound object instead of the object passed as parameter.:::return
Property#needsDeclaration():::Is this a LET or CONST property that needs to see its declaration before being usable?:::return
Property#addFlags(int):::Add more property flags to the property:::if->cloned->this->copy->return->return
Property#getFlags():::Get the flags for this property:::return
Property#removeFlags(int):::Remove property flags from the property:::if->cloned->this->copy->return->return
Property#setFlags(int):::Reset the property for this property:::if->cloned->this->copy->return->return
Property#getGetter(Class):::Abstract method for retrieving the getter for the property:::
Property#getOptimisticGetter(Class, int):::Get an optimistic getter that throws an exception if type is not the known given one:::
Property#initMethodHandles(Class):::Hook to initialize method handles after deserialization.:::
Property#getKey():::Get the key for this property:::return
Property#getSlot():::Get the field number or spill slot:::return
Property#getIntValue(ScriptObject, ScriptObject):::get the Object value of this property from owner:::
Property#getDoubleValue(ScriptObject, ScriptObject):::get the Object value of this property from owner:::
Property#getObjectValue(ScriptObject, ScriptObject):::get the Object value of this property from owner:::
Property#setValue(ScriptObject, ScriptObject, int, boolean):::Set the value of this property in owner:::
Property#setValue(ScriptObject, ScriptObject, double, boolean):::Set the value of this property in owner:::
Property#setValue(ScriptObject, ScriptObject, Object, boolean):::Set the value of this property in owner:::
Property#hasNativeSetter():::Returns true if this property has a low-level setter handle:::
Property#getSetter(Class, PropertyMap):::Abstract method for retrieving the setter for the property:::
Property#getGetterFunction(ScriptObject):::Get the user defined getter function if one exists:::return
Property#getSetterFunction(ScriptObject):::Get the user defined setter function if one exists:::return
Property#toStringShort():::Short toString version:::sb->new->StringBuilder->t->getLocalType->sb->getKey->append->append->type->append->append->return->sb->toString
Property#getType():::Get the current type of this property:::return
Property#setType(Class):::Set the type of this property.:::type->isPrimitive
Property#getLocalType():::Get the type of the value in the local property slot:::return->getType
Property#canChangeType():::Check whether this Property can ever change its type:::return
Property#isFunctionDeclaration():::Check whether this property represents a function declaration.:::return
Property#isLexicalBinding():::Is this a property defined by ES6 let or const?:::return
Property#hasDualFields():::Does this property support dual fields for both primitive and object values?:::return
Property#isAccessorProperty():::Is this an accessor property as defined in ES5 8.6.1?:::return
PropertyAccess#getInt(Object, int):::Get the value for a given key and return it as an int:::
PropertyAccess#getInt(double, int):::Get the value for a given key and return it as an int:::
PropertyAccess#getInt(int, int):::Get the value for a given key and return it as an int:::
PropertyAccess#getDouble(Object, int):::Get the value for a given key and return it as a double:::
PropertyAccess#getDouble(double, int):::Get the value for a given key and return it as a double:::
PropertyAccess#getDouble(int, int):::Get the value for a given key and return it as a double:::
PropertyAccess#get(Object):::Get the value for a given key and return it as an Object:::
PropertyAccess#get(double):::Get the value for a given key and return it as an Object:::
PropertyAccess#get(int):::Get the value for a given key and return it as an Object:::
PropertyAccess#set(Object, int, int):::Set the value of a given key:::
PropertyAccess#set(Object, double, int):::Set the value of a given key:::
PropertyAccess#set(Object, Object, int):::Set the value of a given key:::
PropertyAccess#set(double, int, int):::Set the value of a given key:::
PropertyAccess#set(double, double, int):::Set the value of a given key:::
PropertyAccess#set(double, Object, int):::Set the value of a given key:::
PropertyAccess#set(int, int, int):::Set the value of a given key:::
PropertyAccess#set(int, double, int):::Set the value of a given key:::
PropertyAccess#set(int, Object, int):::Set the value of a given key:::
PropertyAccess#has(Object):::Check if the given key exists anywhere in the proto chain:::
PropertyAccess#has(int):::Check if the given key exists anywhere in the proto chain:::
PropertyAccess#has(double):::Check if the given key exists anywhere in the proto chain:::
PropertyAccess#hasOwnProperty(Object):::Check if the given key exists directly in the implementor:::
PropertyAccess#hasOwnProperty(int):::Check if the given key exists directly in the implementor:::
PropertyAccess#hasOwnProperty(double):::Check if the given key exists directly in the implementor:::
PropertyAccess#delete(int, boolean):::Delete a property with the given key from the implementor:::
PropertyAccess#delete(double, boolean):::Delete a property with the given key from the implementor:::
PropertyAccess#delete(Object, boolean):::Delete a property with the given key from the implementor:::
PropertyDescriptor#isConfigurable():::Check if this PropertyDescriptor describes a configurable property:::
PropertyDescriptor#isEnumerable():::Check if this PropertyDescriptor describes an enumerable property:::
PropertyDescriptor#isWritable():::Check if this PropertyDescriptor describes a wriable property:::
PropertyDescriptor#getValue():::Get the property value as given by this PropertyDescriptor:::
PropertyDescriptor#getGetter():::Get the UserAccessorProperty getter as given by this PropertyDescriptor:::
PropertyDescriptor#getSetter():::Get the UserAccessorProperty setter as given by this PropertyDescriptor:::
PropertyDescriptor#setConfigurable(boolean):::Set whether this PropertyDescriptor describes a configurable property:::
PropertyDescriptor#setEnumerable(boolean):::Set whether this PropertyDescriptor describes an enumerable property:::
PropertyDescriptor#setWritable(boolean):::Set whether this PropertyDescriptor describes a writable property:::
PropertyDescriptor#setValue(Object):::Set the property value for this PropertyDescriptor:::
PropertyDescriptor#setGetter(Object):::Assign a UserAccessorProperty getter as given to this PropertyDescriptor:::
PropertyDescriptor#setSetter(Object):::Assign a UserAccessorProperty setter as given to this PropertyDescriptor:::
PropertyDescriptor#fillFrom(ScriptObject):::Fill in this PropertyDescriptor from the properties of a given ScriptObject:::
PropertyDescriptor#type():::Get the type of this property descriptor.:::
PropertyDescriptor#has(Object):::Wrapper for ScriptObject#has(Object):::
PropertyDescriptor#hasAndEquals(PropertyDescriptor):::Check existence and compare attributes of descriptors.:::
PropertyHashMap#immutableReplace(Property, Property):::Clone a property map, replacing a property with a new one in the same place, which is important for property iterations if a property changes types:::builder->newMapBuilder->builder->property->getKey->replaceProperty->return->new->PropertyHashMap
PropertyHashMap#immutableAdd(Property):::Clone a PropertyHashMap and add a Property.:::newSize->builder->newMapBuilder->builder->addProperty->return->new->PropertyHashMap
PropertyHashMap#immutableAdd(Property...):::Clone a PropertyHashMap and add an array of properties.:::newSize->builder->newMapBuilder->foreach->builder->addProperty->return->new->PropertyHashMap
PropertyHashMap#immutableAdd(Collection):::Clone a PropertyHashMap and add a collection of properties.:::if->newSize->newProperties->size->builder->newMapBuilder->foreach->builder->addProperty->return->new->PropertyHashMap->return
PropertyHashMap#immutableRemove(Object):::Clone a PropertyHashMap and remove a Property based on its key.:::builder->newMapBuilder->builder->removeProperty->if->return->new->PropertyHashMap->return
PropertyHashMap#find(Object):::Find a Property in the PropertyHashMap.:::element->findElement->return->element->getProperty
PropertyHashMap#getProperties():::Return an array of properties in chronological order of adding.:::if->array->new->PropertyArr->i->for->element->element->getLink->return
PropertyMap#newMap(Collection, String, int, int, int):::Public property map allocator:::newProperties->EMPTY_HASHMAP->immutableAdd->return->new->PropertyMap
PropertyMap#newMap(Collection):::Public property map allocator:::return->properties->isEmpty->newMap->getName->newMap
PropertyMap#newMap(Class):::Return a sharable empty map for the given object class.:::return->clazz->getName->new->PropertyMap
PropertyMap#newMap():::Return a sharable empty map.:::return->newMap
PropertyMap#size():::Return number of properties in the map.:::return->properties->size
PropertyMap#getSwitchPointCount():::Get the number of property SwitchPoints of this map:::return->propertySwitchPoints->getSwitchPointCount
PropertyMap#addSwitchPoint(String, SwitchPoint):::Add a property switchpoint to this property map for the given key.:::PropertySwitchPoints->addSwitchPoint
PropertyMap#propertyChanged(Property):::Method called when a property of an object using this property map is being created, modified, or deleted:::if->propertySwitchPoints->invalidateProperty
PropertyMap#protoChanged():::Method called when the prototype of an object using this property map is changed.:::if->sharedProtoMap->invalidateSwitchPoint->if->propertySwitchPoints->invalidateInheritedProperties
PropertyMap#getSwitchPoint(String):::Returns a SwitchPoint for use with a property inherited from this or a parent map:::if->existingSwitchPoints->propertySwitchPoints->getSwitchPoints->foreach->if->switchPoint->hasBeenInvalidated->return->return
PropertyMap#addPropertyBind(AccessorProperty, Object):::Add a property to the map, re-binding its getters and setters, if available, to a given receiver:::return->new->AccessorProperty->addPropertyNoHistory
PropertyMap#addPropertyNoHistory(Property):::Add a property to the map without adding it to the history:::propertyChanged->return->addPropertyInternal
PropertyMap#addProperty(Property):::Add a property to the map:::propertyChanged->newMap->checkHistory->if->addPropertyInternal->addToHistory->return
PropertyMap#deleteProperty(Property):::Remove a property from a map:::propertyChanged->newMap->checkHistory->key->property->getKey->if->properties->containsKey->newProperties->properties->immutableRemove->isSpill->property->isSpill->slot->property->getSlot->if->deriveMap->else->if->deriveMap->else->deriveMap->newMap->updateFreeSlots->addToHistory->return
PropertyMap#replaceProperty(Property, Property):::Replace an existing property with a new one.:::propertyChanged->sameType->oldProperty->getClass->newProperty->getClass->newSpillLength->Math->newProperty->getSlot->max->newProperties->properties->immutableReplace->newMap->deriveMap->if->newMap->updateFreeSlots->return
PropertyMap#newUserAccessors(Object, int):::Make a new UserAccessorProperty property:::return->getFreeSpillSlot->new->UserAccessorProperty
PropertyMap#findProperty(Object):::Find a property in the map.:::return->properties->find
PropertyMap#addAll(PropertyMap):::Adds all map properties from another map.:::otherProperties->getProperties->newProperties->properties->immutableAdd->newMap->deriveMap->foreach->return
PropertyMap#getProperties():::Return an array of all properties.:::return->properties->getProperties
PropertyMap#getClassName():::Return the name of the class of objects using this property map.:::return
PropertyMap#preventExtensions():::Prevents the map from having additional properties.:::return->deriveMap
PropertyMap#seal():::Prevents properties in map from being modified.:::newProperties->foreach->properties->getProperties->newProperties->oldProperty->addFlags->immutableAdd->return->deriveMap
PropertyMap#freeze():::Prevents properties in map from being modified or written to.:::newProperties->foreach->properties->getProperties->propertyFlags->if->newProperties->oldProperty->addFlags->immutableAdd->return->deriveMap
PropertyMap#equalsWithoutType(PropertyMap):::Returns true if the two maps have identical properties in the same order, but allows the properties to differ in their types:::if->properties->size->size->return->iter->properties->values->iterator->otherIter->values->iterator->while->iter->hasNext->otherIter->hasNext->if->iter->next->otherIter->next->equalsWithoutType->return->return
PropertyMap#containsArrayKeys():::Check if this map contains properties with valid array keys:::return
PropertyMap#isExtensible():::Test to see if PropertyMap is extensible.:::return
PropertyMap#isSealed():::Test to see if PropertyMap is not extensible or any properties can not be modified.:::return->isExtensible->anyConfigurable
PropertyMap#isFrozen():::Test to see if PropertyMap is not extensible or all properties can not be modified.:::return->isExtensible->allFrozen
PropertyMap#getFreeFieldSlot():::Return a free field slot for this map, or -1 if none is available.:::if->freeSlot->freeSlots->nextSetBit->if->return->if->return->return
PropertyMap#getFreeSpillSlot():::Get a free spill slot for this map.:::if->freeSlot->freeSlots->nextSetBit->if->return->return
PropertyMap#changeProto(ScriptObject):::Return a property map with the same layout that is associated with the new prototype object.:::nextMap->checkProtoHistory->if->return->if->setProtoNewMapCount->increment->newMap->makeUnsharedCopy->addToProtoHistory->return
PropertyMap#makeUnsharedCopy():::Make a copy of this property map with the shared prototype field set to null:::newMap->new->PropertyMap->return
PropertyMap#setSharedProtoMap(SharedPropertyMap):::Set a reference to the expected parent prototype map:::
PropertyMap#getSharedProtoMap():::Get the expected prototype property map if it is known, or null.:::return
PropertyMap#isValidSharedProtoMap():::Returns true if this map has been used as a shared prototype map (i.e:::return
PropertyMap#getSharedProtoSwitchPoint():::Returns the shared prototype switch point, or null if this is not a shared prototype map.:::return
PropertyMap#isInvalidSharedMapFor(ScriptObject):::Return true if this map has a shared prototype map which has either been invalidated or does not match the map of proto.:::return->sharedProtoMap->isValidSharedProtoMap->prototype->getMap
PropertyMap#diff(PropertyMap, PropertyMap):::Debug helper function that returns the diff of two property maps, only displaying the information that is different and in which map it exists compared to the other map:::sb->new->StringBuilder->if->sb->append->found->foreach->map0->getProperties->p2->map1->p->getKey->findProperty->if->sb->append->append->append->else->if->sb->append->append->append->append->append->foreach->map1->getProperties->p1->map0->p2->getKey->findProperty->if->sb->append->append->append->if->sb->append->append->append->sb->append->return->sb->toString
PropertySwitchPoints#getSwitchPointsAdded():::Return aggregate switchpoints added to all ProtoSwitchPoints:::return->switchPointsAdded->longValue
PropertySwitchPoints#getSwitchPointsInvalidated():::Return aggregate switchPointMap invalidated in all ProtoSwitchPoints:::return->switchPointsInvalidated->longValue
PropertySwitchPoints#getSwitchPointCount(ScriptObject):::Return number of property switchPoints added to a ScriptObject.:::return->obj->getMap->getSwitchPointCount
PropertySwitchPoints#getSwitchPointCount():::Return the number of switchpoints added to this ProtoSwitchPoints instance.:::return->switchPointMap->size
PropertySwitchPoints#addSwitchPoint(PropertySwitchPoints, String, SwitchPoint):::Add switchPoint to the switchpoints for for property key, creating and returning a new ProtoSwitchPoints instance if the switchpoint was not already contained:::if->oldSwitchPoints->contains->newSwitchPoints->new->PropertySwitchPoints->newSwitchPoints->add->return->return
PropertySwitchPoints#invalidateProperty(Property):::Invalidate all switchpoints for the given property:::set->switchPointMap->prop->getKey->get->if->if->switchPointsInvalidated->set->size->add->switchPoints->set->elements->toArray->SwitchPoint->invalidateAll->prop->getKey->remove
PropertySwitchPoints#invalidateInheritedProperties(PropertyMap):::Invalidate all switchpoints except those defined in map:::foreach->switchPointMap->entrySet->if->map->entry->getKey->findProperty->continue->if->switchPointsInvalidated->entry->getValue->size->add->switchPoints->entry->getValue->elements->toArray->SwitchPoint->invalidateAll->switchPointMap->clear
PrototypeObject#getConstructor(Object):::Get the constructor for this PrototypeObject:::return->getConstructor
PrototypeObject#setConstructor(Object, Object):::Reset the constructor for this PrototypeObject:::if->setConstructor
RecompilableScriptFunctionData#getExternalSymbolDepth(String):::Return the external symbol table:::depth->externalScopeDepths->get->return
RecompilableScriptFunctionData#getExternalSymbolNames():::Returns the names of all external symbols this function uses.:::return->Collections->externalScopeDepths->keySet->unmodifiableSet
RecompilableScriptFunctionData#getEndParserState():::Returns the opaque object representing the parser state at the end of this function's body, used to skip parsing this function when reparsing its containing outer function.:::return
RecompilableScriptFunctionData#getParent():::Get the parent of this RecompilableScriptFunctionData:::return
RecompilableScriptFunctionData#initTransients(Source, CodeInstaller):::Initialize transient fields on deserialized instances:::if->foreach->nestedFunctions->values->nested->initTransients->else->if->isCompatibleWith->throw->new->IllegalArgumentException
RecompilableScriptFunctionData#setCachedAst(FunctionNode):::Sets the AST to cache in this function:::isSplit->astToCache->isSplit->symbolClonedAst->cloneSymbols->ref->new->SoftReference<>->if->astSerializerExecutorService->new->SerializedAst->execute
RecompilableScriptFunctionData#initializeCode(FunctionNode):::Initializes this function data with the eagerly generated version of the code:::if->code->isEmpty->functionNode->getId->functionNode->getCompileUnit->isInitializing->throw->new->IllegalStateException->lookup->functionNode->getFlags->addCode
RecompilableScriptFunctionData#initializeCode(FunctionInitializer):::Initializes this function with the given function code initializer.:::lookup->initializer->getFlags->addCode
RecompilableScriptFunctionData#getReturnType(MethodType, ScriptObject):::Returns the return type of a function specialization for particular parameter types.<br> Be aware that the way this is implemented, it forces full materialization (compilation and installation) of code for that specialization.:::return->getBest->type->returnType
RecompilableScriptFunctionData#getFunctionFlags():::Returns the FunctionNode flags associated with this function data.:::return
RecompilableScriptFunctionData#getFunctionNodeId():::Return the function node id.:::return
RecompilableScriptFunctionData#getSource():::Get the source for the script:::return
RecompilableScriptFunctionData#getScriptFunctionData(int):::Return a script function data based on a function id, either this function if the id matches or a nested function based on functionId:::if->return->data->nestedFunctions->get->if->return->foreach->nestedFunctions->values->ndata->getScriptFunctionData->if->return->return
RecompilableScriptFunctionData#isGlobalSymbol(FunctionNode, String):::Check whether a certain name is a global symbol, i.e:::data->functionNode->getId->getScriptFunctionData->do->if->data->hasInternalSymbol->return->data->getParent->while->return
RecompilableScriptFunctionData#restoreFlags(LexicalContext, FunctionNode):::Restores the #getFunctionFlags() flags to a function node:::newFn->fn->setFlags->if->newFn->hasNestedEval->newFn->newFn->getBody->setNeedsScope->setBody->return
RewriteException#create(UnwarrantedOptimismException, Object[], String[]):::Constructor for a rewrite exception thrown from an optimistic function.:::return->create
RewriteException#create(UnwarrantedOptimismException, Object[], String[], int[]):::Constructor for a rewrite exception thrown from a rest-of method.:::return->new->RewriteException
RewriteException#populateArrayBootstrap(MethodHandles.Lookup, String, MethodType, int):::Bootstrap method for populate array:::mh->POPULATE_ARRAY->methodHandle->MH->insertArguments->MH->type->parameterCount->asCollector->MH->asType->return->new->ConstantCallSite
RewriteException#populateArray(Object[], int, Object[]):::Array populator used for saving the local variable state into the array contained in the RewriteException:::System->arraycopy->return
RewriteException#toLongArray(Object, RewriteException):::Continuation handler calls this method when a local variable carried over into the continuation is expected to be a long array in the continued method:::if->return->in->out->new->longArr->for->i->return->e->replaceByteCodeValue
RewriteException#toDoubleArray(Object, RewriteException):::Continuation handler calls this method when a local variable carried over into the continuation is expected to be a double array in the continued method:::if->return->l->Array->getLength->out->new->doubleArr->for->i->return->e->replaceByteCodeValue
RewriteException#toObjectArray(Object, RewriteException):::Continuation handler calls this method when a local variable carried over into the continuation is expected to be an Object array in the continued method:::if->return->l->Array->getLength->out->new->ObjectArr->for->i->return->e->replaceByteCodeValue
RewriteException#instanceOrNull(Object, Class):::Continuation handler calls this method when a local variable carried over into the continuation is expected to have a certain type, but the value can have a different type coming from the deoptimized method as it was a dead store:::return->clazz->isInstance
RewriteException#assertArrayLength(Object[], int):::Asserts the length of an array:::for->i
RewriteException#getReturnValueDestructive():::Get return value:::return->getUOE->getReturnValueDestructive
RewriteException#getReturnType():::Get return type:::return->getUOE->getReturnType
RewriteException#getProgramPoint():::Get the program point.:::return->getUOE->getProgramPoint
RewriteException#getByteCodeSlots():::Get the bytecode slot contents.:::return->byteCodeSlots->clone
RewriteException#getRuntimeScope():::Returns the runtime scope that was in effect when the exception was thrown.:::return
RewriteException#getMessageShort():::Short toString function for message:::return->getMessage
Scope#getSplitState():::Get the scope's split method state.:::return
Scope#setSplitState(int):::Set the scope's split method state.:::
Scope#getScopeCount():::Get number of Scope instances created:::return->count->sum
ScriptEnvironment#getOut():::Get the output stream for this environment:::return
ScriptEnvironment#getErr():::Get the error stream for this environment:::return
ScriptEnvironment#getNamespace():::Get the namespace for this environment:::return
ScriptEnvironment#getFiles():::Return the JavaScript files passed to the program:::return->options->getFiles
ScriptEnvironment#getArguments():::Return the user arguments to the program, i.e:::return->options->getArguments
ScriptEnvironment#hasLogger(String):::Check if there is a logger registered for a particular name: typically the "name" attribute of a Loggable annotation on a class:::return->_loggers->get
ScriptEnvironment#isTimingEnabled():::Check if compilation/runtime timings are enabled:::return->_timing->isEnabled
ScriptEnvironment#useAnonymousClasses(int):::Returns true if compilation should use anonymous classes.:::return
ScriptFunction#create(Object[], int, ScriptObject):::Factory method called by compiler generated code for functions that need parent scope.:::data->return->data->isStrict->getMap->Global->instance->new->ScriptFunction
ScriptFunction#create(Object[], int):::Factory method called by compiler generated code for functions that don't need parent scope.:::return->create
ScriptFunction#createAnonymous():::Create anonymous function that serves as Function.prototype:::return->new->ScriptFunction
ScriptFunction#createBuiltin(String, MethodHandle, Specialization[]):::Factory method for non-constructor built-in functions:::return->ScriptFunction->createBuiltin
ScriptFunction#createBuiltin(String, MethodHandle):::Factory method for non-constructor built-in functions:::return->ScriptFunction->createBuiltin
ScriptFunction#createStrictBuiltin(String, MethodHandle):::Factory method for non-constructor built-in, strict functions:::return->ScriptFunction->createBuiltin
ScriptFunction#createBound(Object, Object[]):::Creates a version of this function bound to a specific "self" and other arguments, as per Function.prototype.bind functionality in ECMAScript 5.1 section 15.3.4.5.:::return->data->makeBoundFunctionData->getTargetFunction->new->Bound
ScriptFunction#createSynchronized(Object):::Create a function that invokes this function synchronized on sync or the self object of the invocation.:::mh->MH->insertArguments->return->getName->createBuiltin
ScriptFunction#isInstance(ScriptObject):::ECMA 15.3.5.3 [[HasInstance]] (V) Step 3 if "prototype" value is not an Object, throw TypeError:::basePrototype->getTargetFunction->getPrototype->if->throw->ScriptRuntime->getTargetFunction->safeToString->ScriptRuntime->safeToString->typeError->for->proto->instance->getProto->proto->getProto->return
ScriptFunction#getTargetFunction():::Returns the target function for this function:::return
ScriptFunction#setArity(int):::Set the arity of this ScriptFunction:::data->setArity
ScriptFunction#isStrict():::Is this a ECMAScript 'use strict' function?:::return->data->isStrict
ScriptFunction#hasAllVarsInScope():::Is this is a function with all variables in scope?:::return->getFunctionFlags
ScriptFunction#needsWrappedThis():::Returns true if this is a non-strict, non-built-in function that requires non-primitive this argument according to ECMA 10.4.3.:::return->data->needsWrappedThis
ScriptFunction#invoke(Object, Object...):::Execute this script function.:::if->invokes->increment->return->data->invoke
ScriptFunction#construct(Object...):::Execute this script function as a constructor.:::return->data->construct
ScriptFunction#toSource():::Get this function as a String containing its source code:::return->data->toSource
ScriptFunction#getPrototype():::Get the prototype object for this function:::if->new->PrototypeObject->return
ScriptFunction#setPrototype(Object):::Set the prototype object for this function:::if
ScriptFunction#getBoundInvokeHandle(Object):::Return the invoke handle bound to a given ScriptObject self reference:::return->MH->data->getGenericInvoker->bindToCalleeIfNeeded->bindTo
ScriptFunction#getDocumentation():::Get the documentation for this function:::return->data->getDocumentation
ScriptFunction#getDocumentationKey():::Get the documentation key for this function:::return->data->getDocumentationKey
ScriptFunction#setDocumentationKey(String):::Set the documentation key for this function:::data->setDocumentationKey
ScriptFunction#getName():::Get the name for this function:::return->data->getName
ScriptFunction#getScope():::Get the scope for this function:::return
ScriptFunction#G$prototype(Object):::Prototype getter for this ScriptFunction - follows the naming convention used by Nasgen and the code generator:::return->getPrototype
ScriptFunction#S$prototype(Object, Object):::Prototype setter for this ScriptFunction - follows the naming convention used by Nasgen and the code generator:::if->setPrototype
ScriptFunction#G$length(Object):::Length getter - ECMA 15.3.3.2: Function.length:::if->return->getArity->return
ScriptFunction#G$name(Object):::Name getter - ECMA Function.name:::if->return->getName->return
ScriptFunction#getPrototype(ScriptFunction):::Get the prototype for this ScriptFunction:::if->proto->constructor->getPrototype->if->return->return
ScriptFunction#findCallMethod(CallSiteDescriptor, LinkRequest):::StandardOperation.CALL call site signature: (callee, thiz, [args...]) generated method signature: (callee, thiz, [args...])  cases: (a) method has callee parameter     (1) for local/scope calls, we just bind thiz and drop the second argument:::type->desc->getMethodType->name->getName->isUnstable->request->isCallSiteUnstable->scopeCall->NashornCallSiteDescriptor->isScope->isCall->data->isBuiltin->equals->isApply->data->isBuiltin->equals->isApplyOrCall->if->handle->if->type->parameterCount->type->parameterType->methodHandle->else->MH->methodHandle->type->parameterCount->asCollector->return->new->GuardedInvocation->boundHandle->guard->if->args->request->getArguments->if->Bootstrap->isCallable->return->createApplyOrCallCall->programPoint->if->NashornCallSiteDescriptor->isOptimistic->NashornCallSiteDescriptor->getProgramPoint->cf->data->getBestInvoker->self->request->getArguments->forbidden->new->HashSet<>->sps->new->ArrayList<>->exceptionGuard->while->cf->isSpecialization->linkLogicClass->cf->getLinkLogicClass->linkLogic->getLinkLogic->if->linkLogic->checkLinkable->log->Context->getContextTrusted->getLogger->if->log->isEnabled->log->Arrays->request->getArguments->toString->info->linkLogic->getRelinkException->break->forbidden->add->oldCf->data->getBestInvoker->bestInvoker->cf->type->returnType->createFunctionInvocation->callHandle->bestInvoker->getInvocation->if->data->needsCallee->if->needsWrappedThis->MH->filterArguments->else->else->if->data->isBuiltin->Global->isBuiltInJavaExtend->MH->MH->getLookupPrivileged->bindTo->type->parameterType->type->parameterType->dropArguments->else->if->data->isBuiltin->Global->isBuiltInJavaTo->MH->MH->bindTo->type->parameterType->type->parameterType->dropArguments->else->if->needsWrappedThis->MH->filterArguments->MH->type->parameterType->dropArguments->else->MH->type->parameterType->dropArguments->if->needsWrappedThis->if->ScriptFunctionData->request->getArguments->isPrimitiveThis->MH->filterArguments->else->getNonStrictFunctionGuard->if->NashornCallSiteDescriptor->isApplyToCall->MH->type->parameterCount->asCollector->pairArguments->if->bestInvoker->getSwitchPoints->sps->Arrays->bestInvoker->getSwitchPoints->asList->addAll->spsArray->sps->isEmpty->sps->new->SwitchPointArr->toArray->return->cf->getFlags->getFunctionGuard->new->GuardedInvocation
ScriptFunction#getCallMethodHandle(MethodType, String):::Used for noSuchMethod/noSuchProperty and JSAdapter hooks:::return->data->getGenericInvoker->bindToCalleeIfNeeded->bindToNameIfNeeded->pairArguments
ScriptFunctionData#setArity(int):::Used from e.g:::if->throw->String->valueOf->new->IllegalArgumentException
ScriptFunctionData#setDocumentationKey(String):::Used from nasgen generated code.:::
ScriptFunctionData#isStrict():::Is this a ScriptFunction generated with strict semantics?:::return
ScriptFunctionData#getFunctionName():::Return the complete internal function name for this data, not anonymous or similar:::return->getName
ScriptFunctionData#needsWrappedThis():::Returns true if this is a non-strict, non-built-in function that requires non-primitive this argument according to ECMA 10.4.3.:::return
ScriptFunctionData#toString():::Get this function as a String containing its source code:::return->name->isEmpty
ScriptFunctionData#toStringVerbose():::Verbose description of data:::sb->new->StringBuilder->sb->append->name->isEmpty->append->append->code->size->append->append->append->return->sb->toString
ScriptFunctionData#getBestInvoker(MethodType, ScriptObject):::Pick the best invoker, i.e:::return->getBestInvoker
ScriptFunctionData#ensureCompiled():::If we can have lazy code generation, this is a hook to ensure that the code has been compiled:::
ScriptFunctionData#getGenericInvoker(ScriptObject):::Return a generic Object/Object invoker for this method:::lgenericInvokers->ensureGenericInvokers->invoker->if->createGenericInvoker->return
ScriptFunctionData#lookupExactApplyToCall(MethodType):::Used to find an apply to call version that fits this callsite:::adaptedType->needsCallee->type->dropParameterTypes->foreach->if->cf->isApplyToCall->continue->cftype->cf->type->if->cftype->parameterCount->adaptedType->parameterCount->continue->if->widen->widen->equals->return->return
ScriptFunctionData#getBest(MethodType, ScriptObject, Collection, boolean):::Returns the best function for the specified call site type.:::
ScriptFunctionData#getBest(MethodType, ScriptObject, Collection):::Returns the best function for the specified call site type.:::return->getBest
ScriptFunctionData#getGenericType():::Get a method type for a generic invoker.:::
ScriptFunctionData#allocate(PropertyMap):::Allocates an object using this function's allocator.:::return
ScriptFunctionData#getAllocatorMap(ScriptObject):::Get the property map to use for objects allocated by this function.:::return
ScriptFunctionData#makeBoundFunctionData(ScriptFunction, Object, Object[]):::This method is used to create the immutable portion of a bound function:::allArgs->length->boundFlags->boundList->new->LinkedList<>->runtimeScope->fn->getScope->bindTarget->getGenericInvoker->getGenericConstructor->new->CompiledFunction->boundList->bind->add->return->Math->getArity->max->new->FinalScriptFunctionData
ScriptFunctionData#invoke(ScriptFunction, Object, Object...):::Execute this script function.:::mh->fn->getScope->getGenericInvoker->selfObj->convertThisObject->args->DebuggerSupport->notifyInvoke->if->isVarArg->if->needsCallee->return->mh->invokeExact->return->mh->invokeExact->paramCount->mh->type->parameterCount->if->needsCallee->switch->return->mh->invokeExact->return->mh->getArg->invokeExact->return->mh->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->withArguments->invokeWithArguments->switch->return->mh->invokeExact->return->mh->getArg->invokeExact->return->mh->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->getArg->getArg->getArg->getArg->getArg->getArg->invokeExact->return->mh->withArguments->invokeWithArguments
ScriptFunctionData#needsCallee(MethodHandle):::Heuristic to figure out if the method handle has a callee argument:::return->mh->type->needsCallee
ScriptFunctionData#isVarArg(MethodHandle):::Check if a javascript function methodhandle is a vararg handle:::return->mh->type->isVarArg
ScriptFunctionData#inDynamicContext():::Is this ScriptFunction declared in a dynamic context:::return
ScriptingFunctions#readLine(Object, Object):::Nashorn extension: global.readLine (scripting-mode-only) Read one line of input from the standard input.:::return->readLine
ScriptingFunctions#readFully(Object, Object):::Nashorn extension: Read the entire contents of a text file and return as String.:::f->if->else->if->JSType->isString->toString->new->java.io.File->if->f->isFile->throw->ScriptRuntime->safeToString->typeError->return->Source->readFully->new->String
ScriptingFunctions#exec(Object, Object...):::Nashorn extension: exec a string in a separate process.:::arg0->arg1->arg2->arg3->inputStream->outputStream->errorStream->script->tokens->inputString->if->array->JSType->toJavaArray->new->ArrayList<>->tokens->Arrays->asList->addAll->else->JSType->toString->if->else->JSType->toString->if->if->global->Context->getGlobal->environment->new->HashMap<>->env->global->get->if->envProperties->envProperties->entrySet->stream->environment->JSType->entry->getKey->toString->JSType->entry->getValue->toString->put->forEach->exec->global->get->executor->new->CommandExecutor->executor->setInputString->executor->setInputStream->executor->setOutputStream->executor->setErrorStream->executor->setEnvironment->if->executor->process->else->executor->process->outString->executor->getOutputString->errString->executor->getErrorString->exitCode->executor->getExitCode->global->set->global->set->global->set->return
ScriptLoader#installClass(String, byte[], CodeSource):::Install a class for use by the Nashorn runtime:::return->Objects->requireNonNull->defineClass
ScriptObject#isGlobal():::Check whether this is a global object:::return
ScriptObject#spillAllocationLength(int):::Given a number of properties, return the aligned to SPILL_RATE buffer size required for the smallest spill pool needed to house them:::return->alignUp
ScriptObject#addBoundProperties(ScriptObject):::Copy all properties from the source object with their receiver bound to the source:::source->getMap->getProperties->addBoundProperties
ScriptObject#addBoundProperties(ScriptObject, Property[]):::Copy all properties from the array with their receiver bound to the source.:::newMap->this->getMap->extensible->newMap->isExtensible->foreach->addBoundProperty->this->setMap
ScriptObject#addBoundProperty(PropertyMap, ScriptObject, Property, boolean):::Add a bound property from source, using the interim property map propMap, and return the new interim property map.:::newMap->key->property->getKey->oldProp->newMap->findProperty->if->if->throw->key->toString->ScriptRuntime->safeToString->typeError->if->prop->this->property->getFlags->property->getGetterFunction->property->getSetterFunction->newUserAccessors->newMap->addPropertyNoHistory->else->newMap->addPropertyBind->else->if->property->isFunctionDeclaration->oldProp->isConfigurable->if->oldProp->isWritable->oldProp->isEnumerable->throw->key->toString->ScriptRuntime->safeToString->typeError->return
ScriptObject#addBoundProperties(Object, AccessorProperty[]):::Copy all properties from the array with their receiver bound to the source.:::newMap->this->getMap->extensible->newMap->isExtensible->foreach->key->property->getKey->if->newMap->findProperty->if->throw->key->toString->ScriptRuntime->safeToString->typeError->newMap->addPropertyBind->this->setMap
ScriptObject#bindTo(MethodHandle, Object):::Bind the method handle to the specified receiver, while preserving its original type (it will just ignore the first argument in lieu of the bound argument).:::return->MH->MH->bindTo->methodHandle->type->parameterType->dropArguments
ScriptObject#propertyIterator():::Return a property iterator.:::return->new->KeyIterator
ScriptObject#valueIterator():::Return a property value iterator.:::return->new->ValueIterator
ScriptObject#isAccessorDescriptor():::ECMA 8.10.1 IsAccessorDescriptor ( Desc ):::return->has->has
ScriptObject#isDataDescriptor():::ECMA 8.10.2 IsDataDescriptor ( Desc ):::return->has->has
ScriptObject#toPropertyDescriptor():::ECMA 8.10.5 ToPropertyDescriptor ( Obj ):::global->Context->getGlobal->desc->if->isDataDescriptor->if->has->has->throw->typeError->global->newDataDescriptor->else->if->isAccessorDescriptor->if->has->has->throw->typeError->global->newAccessorDescriptor->else->global->newGenericDescriptor->return->desc->fillFrom
ScriptObject#toPropertyDescriptor(Global, Object):::ECMA 8.10.5 ToPropertyDescriptor ( Obj ):::if->return->toPropertyDescriptor->throw->ScriptRuntime->safeToString->typeError
ScriptObject#getOwnPropertyDescriptor(Object):::ECMA 8.12.1 [[GetOwnProperty]] (P):::property->getMap->findProperty->global->Context->getGlobal->if->get->property->getGetterFunction->set->property->getSetterFunction->configurable->property->isConfigurable->enumerable->property->isEnumerable->writable->property->isWritable->if->property->isAccessorProperty->return->global->newAccessorDescriptor->return->global->getWithProperty->newDataDescriptor->index->getArrayIndex->array->getArray->if->array->has->return->array->getDescriptor->return
ScriptObject#getPropertyDescriptor(String):::ECMA 8.12.2 [[GetProperty]] (P):::res->getOwnPropertyDescriptor->if->return->else->if->getProto->return->getProto->getOwnPropertyDescriptor->else->return
ScriptObject#invalidateGlobalConstant(Object):::Invalidate any existing global constant method handles that may exist for key.:::globalConstants->getGlobalConstants->if->globalConstants->delete
ScriptObject#defineOwnProperty(Object, Object, boolean):::ECMA 8.12.9 [[DefineOwnProperty]] (P, Desc, Throw):::global->Context->getGlobal->desc->toPropertyDescriptor->current->getOwnPropertyDescriptor->invalidateGlobalConstant->if->if->isExtensible->addOwnProperty->return->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->currentDesc->newDesc->if->newDesc->type->newDesc->has->newDesc->has->return->if->newDesc->hasAndEquals->return->if->currentDesc->isConfigurable->if->newDesc->has->newDesc->isConfigurable->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->if->newDesc->has->currentDesc->isEnumerable->newDesc->isEnumerable->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->propFlags->Property->mergeFlags->property->getMap->findProperty->if->currentDesc->type->newDesc->type->newDesc->type->if->currentDesc->isConfigurable->currentDesc->isWritable->if->newDesc->has->newDesc->isWritable->newDesc->has->ScriptRuntime->currentDesc->getValue->newDesc->getValue->sameValue->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->newValue->newDesc->has->value->newDesc->getValue->currentDesc->getValue->if->modifyOwnProperty->set->getMap->findProperty->if->addOwnProperty->checkIntegerKey->else->modifyOwnProperty->else->if->currentDesc->type->newDesc->type->newDesc->type->if->currentDesc->isConfigurable->if->newDesc->has->ScriptRuntime->currentDesc->getGetter->newDesc->getGetter->sameValue->newDesc->has->ScriptRuntime->currentDesc->getSetter->newDesc->getSetter->sameValue->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->newDesc->has->newDesc->getGetter->currentDesc->getGetter->newDesc->has->newDesc->getSetter->currentDesc->getSetter->modifyOwnProperty->else->if->currentDesc->isConfigurable->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->value->newDesc->has->newDesc->isConfigurable->currentDesc->isConfigurable->if->newDesc->has->newDesc->isEnumerable->currentDesc->isEnumerable->if->type->newDesc->type->if->newDesc->has->newDesc->isWritable->if->deleteOwnProperty->newDesc->getValue->addOwnProperty->else->if->if->newDesc->has->newDesc->getGetter->newDesc->has->newDesc->getSetter->addOwnProperty->else->newDesc->has->newDesc->getGetter->newDesc->has->newDesc->getSetter->modifyOwnProperty->checkIntegerKey->return
ScriptObject#defineOwnProperty(int, Object):::Almost like defineOwnProperty(int,Object) for arrays this one does not add 'gap' elements (like the array one does).:::longIndex->ArrayIndex->toLongIndex->oldLength->getArray->length->if->getArray->ensure->safeDelete->setArray->getArray->set->setArray
ScriptObject#addOwnProperty(Object, PropertyDescriptor):::Add a new property to the object.:::pdesc->propFlags->Property->toFlags->if->pdesc->type->global->Context->getGlobal->dDesc->global->newDataDescriptor->dDesc->fillFrom->type->pdesc->type->if->pdesc->getValue->addOwnProperty->else->if->pdesc->has->pdesc->getGetter->pdesc->has->pdesc->getSetter->addOwnProperty->checkIntegerKey
ScriptObject#findProperty(Object, boolean):::Low level property API (not using property descriptors)  Find a property in the prototype hierarchy:::return->findProperty
ScriptObject#findProperty(Object, boolean, boolean, ScriptObject):::Low level property API (not using property descriptors)  Find a property in the prototype hierarchy:::selfMap->getMap->property->selfMap->findProperty->if->return->new->FindProperty->if->myProto->getProto->find->myProto->findProperty->checkSharedProtoMap->return->return
ScriptObject#hasProperty(Object, boolean):::Low level property API:::if->getMap->findProperty->return->if->myProto->getProto->if->return->myProto->hasProperty->return
ScriptObject#addOwnProperty(Object, int, ScriptFunction, ScriptFunction):::Add a new property to the object:::return->newUserAccessors->addOwnProperty
ScriptObject#addOwnProperty(Object, int, Object):::Add a new property to the object:::return->addSpillProperty
ScriptObject#addOwnProperty(Property):::Add a new property to the object:::oldMap->getMap->while->newMap->oldMap->addProperty->if->compareAndSetMap->getMap->oldProperty->oldMap->newProperty->getKey->findProperty->if->return->else->return
ScriptObject#deleteOwnProperty(Property):::Delete a property from the object.:::erasePropertyValue->oldMap->getMap->while->newMap->oldMap->deleteProperty->if->return->if->compareAndSetMap->getMap->else->if->getMap->setAccessors->property->getKey->invalidateGlobalConstant->return
ScriptObject#initUserAccessors(String, ScriptFunction, ScriptFunction):::Fast initialization functions for ScriptFunctions that are strict, to avoid creating setters that probably aren't used:::map->getMap->property->map->findProperty->property->getSlot->ensureSpillSize->new->UserAccessorProperty.Accessors->property->getSlot
ScriptObject#modifyOwnProperty(Property, int, ScriptFunction, ScriptFunction):::Modify a property in the object:::newProperty->if->uc->slot->uc->getSlot->gs->uc->getAccessors->gs->set->if->uc->getFlags->return->uc->getKey->new->UserAccessorProperty->else->erasePropertyValue->oldProperty->getKey->newUserAccessors->return->modifyOwnProperty
ScriptObject#modifyOwnProperty(Property, int):::Modify a property in the object:::return->oldProperty->setFlags->modifyOwnProperty
ScriptObject#setUserAccessors(Object, ScriptFunction, ScriptFunction):::Update getter and setter in an object literal.:::realKey->JSType->toPropertyKey->oldProperty->getMap->findProperty->if->oldProperty->getFlags->modifyOwnProperty->else->oldProperty->getFlags->newUserAccessors->addOwnProperty
ScriptObject#getCallMethodHandle(FindProperty, MethodType, String):::Return methodHandle of value function for call.:::return->find->getObjectValue->getCallMethodHandle
ScriptObject#getWithProperty(Property):::Get value using found property.:::return->new->FindProperty->getObjectValue
ScriptObject#getProperty(String):::Get a property given a key:::return->getMap->findProperty
ScriptObject#getArgument(int):::Overridden by jdk.nashorn.internal.objects.NativeArguments class (internal use.) Used for argument access in a vararg function using parameter name:::return->get
ScriptObject#setArgument(int, Object):::Overridden by jdk.nashorn.internal.objects.NativeArguments class (internal use.) Used for argument access in a vararg function using parameter name:::set
ScriptObject#getContext():::Return the current context from the object's map.:::return->Context->getClass->fromClass
ScriptObject#getMap():::Return the map of an object.:::return
ScriptObject#setMap(PropertyMap):::Set the initial map.:::
ScriptObject#compareAndSetMap(PropertyMap, PropertyMap):::Conditionally set the new map if the old map is the same.:::if->return->return
ScriptObject#getProto():::Return the __proto__ of an object.:::return
ScriptObject#getProto(int):::Get the proto of a specific depth:::p->for->i->return
ScriptObject#setProto(ScriptObject):::Set the __proto__ of an object.:::oldProto->if->getMap->protoChanged->getMap->changeProto->setMap
ScriptObject#setInitialProto(ScriptObject):::Set the initial __proto__ of this object:::
ScriptObject#setGlobalObjectProto(ScriptObject):::Invoked from generated bytecode to initialize the prototype of object literals to the global Object prototype.:::obj->Global->objectPrototype->setInitialProto
ScriptObject#setPrototypeOf(Object):::Set the __proto__ of an object with checks:::if->if->isExtensible->if->getProto->return->throw->ScriptRuntime->safeToString->typeError->p->while->if->throw->ScriptRuntime->safeToString->typeError->p->getProto->setProto->else->throw->ScriptRuntime->safeToString->ScriptRuntime->safeToString->typeError
ScriptObject#setProtoFromLiteral(Object):::Set the __proto__ of an object from an object literal:::if->setPrototypeOf->else->Global->objectPrototype->setPrototypeOf
ScriptObject#getAllKeys():::return an array of all property keys - all inherited, non-enumerable included:::keys->new->HashSet<>->nonEnumerable->new->HashSet<>->for->self->self->getProto->return->keys->new->StringArr->toArray
ScriptObject#getOwnKeys(boolean):::Return an array of own property keys associated with the object.:::return->getOwnKeys
ScriptObject#getOwnSymbols(boolean):::Return an array of own property keys associated with the object.:::return->getOwnKeys
ScriptObject#getOwnKeys(Class, boolean, Set):::return an array of own property keys associated with the object.:::keys->new->ArrayList<>->selfMap->this->getMap->array->getArray->if->for->iter->array->indexIterator->iter->hasNext->foreach->selfMap->getProperties->enumerable->property->isEnumerable->key->property->getKey->if->type->isInstance->continue->if->keys->add->else->if->if->nonEnumerable->contains->keys->add->else->if->nonEnumerable->add->return->keys->Array->keys->size->newInstance->toArray
ScriptObject#hasArrayEntries():::Check if this ScriptObject has array entries:::return->getArray->length->getMap->containsArrayKeys
ScriptObject#getClassName():::Return the valid JavaScript type name descriptor:::return
ScriptObject#getLength():::length is a well known property:::return->get
ScriptObject#safeToString():::Stateless toString for ScriptObjects.:::return->getClassName
ScriptObject#getDefaultValue(Class):::Return the default value of the object with a given preferred type hint:::return->Context->getGlobal->getDefaultValue
ScriptObject#isInstance(ScriptObject):::Checking whether a script object is an instance of another:::return
ScriptObject#preventExtensions():::Flag this ScriptObject as non extensible:::oldMap->getMap->while->getMap->preventExtensions->compareAndSetMap->getMap->array->getArray->ArrayData->preventExtension->setArray->return
ScriptObject#isArray(Object):::Check whether if an Object (not just a ScriptObject) represents JavaScript array:::return->isArray
ScriptObject#isArray():::Check if this ScriptObject is an array:::return
ScriptObject#setIsArray():::Flag this ScriptObject as being an array:::
ScriptObject#isArguments():::Check if this ScriptObject is an arguments vector:::return
ScriptObject#setIsArguments():::Flag this ScriptObject as being an arguments vector:::
ScriptObject#isLengthNotWritable():::Check if this object has non-writable length property:::return
ScriptObject#setIsLengthNotWritable():::Flag this object as having non-writable length property.:::
ScriptObject#getArray(Class):::Get the ArrayData, for this ScriptObject, ensuring it is of a type that can handle elementType:::if->return->newArrayData->arrayData->convert->if->return
ScriptObject#getArray():::Get the ArrayData for this ScriptObject if it is an array:::return
ScriptObject#setArray(ArrayData):::Set the ArrayData for this ScriptObject if it is to be an array:::
ScriptObject#isExtensible():::Check if this ScriptObject is extensible:::return->getMap->isExtensible
ScriptObject#seal():::ECMAScript 15.2.3.8 - seal implementation:::oldMap->getMap->while->newMap->getMap->seal->if->compareAndSetMap->getMap->else->ArrayData->getArray->seal->setArray->return
ScriptObject#isSealed():::Check whether this ScriptObject is sealed:::return->getMap->isSealed
ScriptObject#freeze():::ECMA 15.2.39 - freeze implementation:::oldMap->getMap->while->newMap->getMap->freeze->if->compareAndSetMap->getMap->else->ArrayData->getArray->freeze->setArray->return
ScriptObject#isFrozen():::Check whether this ScriptObject is frozen:::return->getMap->isFrozen
ScriptObject#isScope():::Check whether this ScriptObject is scope:::return
ScriptObject#setIsBuiltin():::Tag this script object as built in:::
ScriptObject#isBuiltin():::Check if this script object is built in:::return
ScriptObject#setIsInternal():::Tag this script object as internal object that should not be visible to script code.:::
ScriptObject#isInternal():::Check if this script object is an internal object that should not be visible to script code.:::return
ScriptObject#clear(boolean):::Clears the properties from a ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::iter->propertyIterator->while->iter->hasNext->iter->next->delete
ScriptObject#containsKey(Object):::Checks if a property with a given key is present in a ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::return->has
ScriptObject#containsValue(Object):::Checks if a property with a given value is present in a ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::iter->valueIterator->while->iter->hasNext->if->iter->next->equals->return->return
ScriptObject#entrySet():::Returns the set of <property, value> entries that make up this ScriptObject's properties (java.util.Map-like method to help ScriptObjectMirror implementation):::iter->propertyIterator->entries->new->HashSet<>->while->iter->hasNext->key->iter->next->entries->get->new->AbstractMap.SimpleImmutableEntry<>->add->return->Collections->unmodifiableSet
ScriptObject#isEmpty():::Check whether a ScriptObject contains no properties (java.util.Map-like method to help ScriptObjectMirror implementation):::return->propertyIterator->hasNext
ScriptObject#keySet():::Return the set of keys (property names) for all properties in this ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::iter->propertyIterator->keySet->new->HashSet<>->while->iter->hasNext->keySet->iter->next->add->return->Collections->unmodifiableSet
ScriptObject#put(Object, Object, boolean):::Put a property in the ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::oldValue->get->scriptObjectFlags->set->return
ScriptObject#putAll(Map, boolean):::Put several properties in the ScriptObject given a mapping of their keys to their values (java.util.Map-like method to help ScriptObjectMirror implementation):::scriptObjectFlags->foreach->otherMap->entrySet->entry->getKey->entry->getValue->set
ScriptObject#remove(Object, boolean):::Remove a property from the ScriptObject:::oldValue->get->delete->return
ScriptObject#size():::Return the size of the ScriptObject - i.e:::n->for->iter->propertyIterator->iter->hasNext->iter->next->return
ScriptObject#values():::Return the values of the properties in the ScriptObject (java.util.Map-like method to help ScriptObjectMirror implementation):::values->size->new->ArrayList<>->iter->valueIterator->while->iter->hasNext->values->iter->next->add->return->Collections->unmodifiableList
ScriptObject#lookup(CallSiteDescriptor, LinkRequest):::Lookup method that, given a CallSiteDescriptor, looks up the target MethodHandle and creates a GuardedInvocation with the appropriate guard(s).:::switch->NashornCallSiteDescriptor->getStandardOperation->return->desc->getOperation->findGetMethod->findGetIndexMethod->return->desc->getOperation->findSetMethod->findSetIndexMethod->inv->NashornCallSiteDescriptor->isStrict->name->NamedOperation->desc->getOperation->getName->if->return->inv->MH->inv->getInvocation->insertArguments->inv->getGuard->replaceMethods->return->return->findCallMethod->return->findNewMethod->return
ScriptObject#findNewMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate New method for an invoke dynamic call.:::return->notAFunction
ScriptObject#findCallMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate CALL method for an invoke dynamic call:::return->notAFunction
ScriptObject#hasWithScope():::Test whether this object contains in its prototype chain or is itself a with-object.:::return
ScriptObject#addProtoFilter(MethodHandle, int):::Add a filter to the first argument of methodHandle that calls its #getProto() method depth times.:::if->return->listIndex->filter->PROTO_FILTERS->size->PROTO_FILTERS->get->if->addProtoFilter->PROTO_FILTERS->add->PROTO_FILTERS->set->return->MH->filter->filter->type->methodHandle->type->parameterType->changeReturnType->asType->filterArguments
ScriptObject#findGetMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate GET method for an invoke dynamic call.:::explicitInstanceOfCheck->explicitInstanceOfCheck->name->NashornCallSiteDescriptor->getOperand->if->NashornCallSiteDescriptor->isApplyToCall->if->Global->isBuiltinFunctionPrototypeApply->if->request->isCallSiteUnstable->hasWithScope->return->NashornCallSiteDescriptor->isMethodFirstOperation->findMegaMorphicGetMethod->find->NashornCallSiteDescriptor->isScope->findProperty->mh->if->if->NashornCallSiteDescriptor->isMethodFirstOperation->return->noSuchProperty->else->return->noSuchMethod->globalConstants->getGlobalConstants->if->cinv->globalConstants->findGetMethod->if->return->returnType->desc->getMethodType->returnType->property->find->getProperty->programPoint->NashornCallSiteDescriptor->isOptimistic->NashornCallSiteDescriptor->getProgramPoint->find->getGetter->guard->NashornGuards->getGuard->owner->find->getOwner->exception->protoSwitchPoints->if->Lookup->emptyGetter->getProtoSwitchPoints->else->if->find->isSelf->if->property->isAccessorProperty->find->getProtoChainLength->addProtoFilter->getProtoSwitchPoints->else->inv->new->GuardedInvocation->return->inv->findBuiltinSwitchPoint->addSwitchPoint
ScriptObject#findGetIndexMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate GETINDEX method for an invoke dynamic call.:::callType->desc->getMethodType->returnType->callType->returnType->returnClass->returnType->isPrimitive->keyClass->callType->parameterType->explicitInstanceOfCheck->explicitInstanceOfCheck->name->if->returnClass->isPrimitive->returnTypeName->returnClass->getName->Character->returnTypeName->charAt->toUpperCase->returnTypeName->returnTypeName->length->substring->else->mh->findGetIndexMethodHandle->return->getScriptObjectGuard->new->GuardedInvocation
ScriptObject#getProtoSwitchPoints(String, ScriptObject):::Get an array of switch points for a property with the given name that will be invalidated when the property definition is changed in this object's prototype chain:::if->getProto->return->switchPoints->new->HashSet<>->switchPoint->getProto->getMap->getSwitchPoint->if->new->SwitchPoint->for->obj->obj->getProto->obj->getProto->switchPoints->add->for->obj->obj->getProto->obj->getProto->return->switchPoints->new->SwitchPointArr->toArray
ScriptObject#findSetMethod(CallSiteDescriptor, LinkRequest):::Find the appropriate SET method for an invoke dynamic call.:::name->NashornCallSiteDescriptor->getOperand->if->request->isCallSiteUnstable->hasWithScope->return->findMegaMorphicSetMethod->explicitInstanceOfCheck->explicitInstanceOfCheck->find->NashornCallSiteDescriptor->isScope->findProperty->if->find->isInheritedOrdinaryProperty->if->isExtensible->find->getProperty->isWritable->return->createEmptySetMethod->if->NashornCallSiteDescriptor->isScope->find->getOwner->isScope->if->if->find->getProperty->isWritable->NashornCallSiteDescriptor->isDeclaration->if->NashornCallSiteDescriptor->isScope->find->getProperty->isLexicalBinding->throw->typeError->return->createEmptySetMethod->if->find->getProperty->hasNativeSetter->return->createEmptySetMethod->else->if->isExtensible->return->createEmptySetMethod->inv->new->SetMethodCreator->findBuiltinSwitchPoint->createGuardedInvocation->globalConstants->getGlobalConstants->if->cinv->globalConstants->findSetMethod->if->return->return
ScriptObject#findSetIndexMethod(CallSiteDescriptor, LinkRequest):::Lookup function for the set index method, available for subclasses as well, e.g:::return->explicitInstanceOfCheck->desc->getMethodType->findSetIndexMethod
ScriptObject#noSuchMethod(CallSiteDescriptor, LinkRequest):::Fall back if a function property is not found.:::name->NashornCallSiteDescriptor->getOperand->find->findProperty->scopeCall->isScope->NashornCallSiteDescriptor->isScope->if->return->noSuchProperty->getProtoSwitchPoint->addSwitchPoint->explicitInstanceOfCheck->explicitInstanceOfCheck->value->find->getObjectValue->if->return->createEmptyGetter->func->thiz->func->isStrict->return->MH->MH->func->new->ObjectArr->createBound->constant->dropArguments->NashornGuards->NashornGuards->getIdentityGuard->NashornGuards->getMap->getMapGuard->combineGuards->new->GuardedInvocation->getProtoSwitchPoint->addSwitchPoint
ScriptObject#noSuchProperty(CallSiteDescriptor, LinkRequest):::Fall back if a property is not found.:::name->NashornCallSiteDescriptor->getOperand->find->findProperty->scopeAccess->isScope->NashornCallSiteDescriptor->isScope->if->value->find->getObjectValue->func->mh->if->desc->getMethodType->getCallMethodHandle->if->if->func->isStrict->bindTo->return->find->isSelf->getMap->find->getGetter->getKnownFunctionPropertyGuardSelf->getMap->find->getGetter->find->getProtoChainLength->getKnownFunctionPropertyGuardProto->find->getOwner->getProtoSwitchPoints->new->GuardedInvocation->getProtoSwitchPoint->addSwitchPoint->if->throw->referenceError->return->explicitInstanceOfCheck->createEmptyGetter
ScriptObject#invokeNoSuchProperty(Object, boolean, int):::Invoke fall back if a property is not found.:::find->findProperty->func->find->getObjectValue->ret->if->sfunc->self->sfunc->isStrict->ScriptRuntime->apply->else->if->throw->key->toString->referenceError->if->isValid->throw->new->UnwarrantedOptimismException->return
ScriptObject#addSpill(Class, String):::Add a spill entry for the given key.:::return->addSpillProperty->getMap->getSetter
ScriptObject#pairArguments(MethodHandle, MethodType):::Make sure arguments are paired correctly, with respect to more parameters than declared, fewer parameters than declared and other things that JavaScript allows:::return->pairArguments
ScriptObject#pairArguments(MethodHandle, MethodType, Boolean):::Make sure arguments are paired correctly, with respect to more parameters than declared, fewer parameters than declared and other things that JavaScript allows:::methodType->methodHandle->type->if->methodType->callType->methodType->returnType->changeReturnType->equals->return->parameterCount->methodType->parameterCount->callCount->callType->parameterCount->isCalleeVarArg->methodType->parameterType->isArray->isCallerVarArg->callType->parameterType->isArray->if->return->MH->asCollector->if->return->adaptHandleToVarArgCallSite->if->missingArgs->fillers->new->ObjectArr->Arrays->fill->if->return->MH->insertArguments->if->discardedArgs->discards->new->Class<?>Arr->Arrays->fill->return->MH->dropArguments->return
ScriptObject#setLength(long):::Numeric length setter for length property:::data->getArray->arrayLength->data->length->if->return->if->data->ensure->safeDelete->setArray->return->if->actualLength->if->getMap->containsArrayKeys->for->l->data->shrink->setArray->data->setLength
ScriptObject#setObject(FindProperty, int, Object, Object):::This is the most generic of all Object setters:::f->invalidateGlobalConstant->if->f->isInheritedOrdinaryProperty->isScope->isScopeFlag->if->f->getSelf->f->getSelf->setObject->return->if->f->getOwner->isScope->if->if->f->getProperty->isWritable->NashornCallSiteDescriptor->isDeclaration->f->getProperty->hasNativeSetter->if->isScopeFlag->f->getProperty->isLexicalBinding->throw->key->toString->typeError->if->isStrictFlag->throw->f->getProperty->isAccessorProperty->key->toString->ScriptRuntime->safeToString->typeError->return->if->NashornCallSiteDescriptor->isDeclaration->f->getProperty->needsDeclaration->f->getOwner->declareAndSet->return->f->isStrictFlag->setValue->else->if->isExtensible->if->isStrictFlag->throw->key->toString->ScriptRuntime->safeToString->typeError->else->sobj->if->isScope->while->sobj->getProto->sobj->addSpillProperty
ScriptObject#copy():::Return a shallow copy of this ScriptObject.:::try->return->clone->catch->throw->new->RuntimeException->finally
ScriptObject#newUserAccessors(Object, int, ScriptFunction, ScriptFunction):::Make a new UserAccessorProperty property:::uc->getMap->newUserAccessors->uc->getMap->new->UserAccessorProperty.Accessors->setAccessors->return
ScriptObject#useDualFields():::Returns true if properties for this object should use dual field mode, false otherwise.:::return->StructureLoader->getClass->getName->isSingleFieldStructure
ScriptObject#getCount():::Get number of ScriptObject instances created:::return->count->longValue
ScriptRuntime#switchTagAsInt(Object, int):::Converts a switch tag value to a simple integer:::if->d->doubleValue->if->isRepresentableAsInt->return->return
ScriptRuntime#switchTagAsInt(boolean, int):::Converts a switch tag value to a simple integer:::return
ScriptRuntime#switchTagAsInt(long, int):::Converts a switch tag value to a simple integer:::return->isRepresentableAsInt
ScriptRuntime#switchTagAsInt(double, int):::Converts a switch tag value to a simple integer:::return->isRepresentableAsInt
ScriptRuntime#builtinObjectToString(Object):::This is the builtin implementation of Object.prototype.toString:::className->type->JSType->ofNoFunction->switch->break->break->break->break->break->if->getClassName->else->if->getClassName->else->self->getClass->getName->break->self->getClass->getName->break->sb->new->StringBuilder->sb->append->sb->append->sb->append->return->sb->toString
ScriptRuntime#safeToString(Object):::This is called whenever runtime wants to throw an error and wants to provide meaningful information about an object:::return->JSType->toStringImpl
ScriptRuntime#toPropertyIterator(Object):::Returns an iterator over property identifiers used in the for...in statement:::if->return->propertyIterator->if->obj->getClass->isArray->return->Array->getLength->new->RangeIterator->if->return->keySet->iterator->if->return->size->new->RangeIterator->if->return->keySet->iterator->wrapped->Global->instance->wrapAsObject->if->return->propertyIterator->return->Collections->emptyIterator
ScriptRuntime#toValueIterator(Object):::Returns an iterator over property values used in the for each...in statement:::if->return->valueIterator->if->return->values->iterator->itr->iteratorForJavaArrayOrList->if->return->if->return->values->iterator->wrapped->Global->instance->wrapAsObject->if->return->valueIterator->return->Collections->emptyIterator
ScriptRuntime#toES6Iterator(Object):::Returns an iterator over property values used in the {@code for ..:::if->itr->iteratorForJavaArrayOrList->if->return->if->return->new->Iterator<Object>->global->Global->instance->iterator->AbstractIterator->Global->toObject->getIterator->nextInvoker->AbstractIterator->getNextInvoker->doneInvoker->AbstractIterator->getDoneInvoker->valueInvoker->AbstractIterator->getValueInvoker->return->new->Iterator<Object>
ScriptRuntime#mergeScope(ScriptObject):::Merge a scope into its prototype's map:::parentScope->scope->getProto->parentScope->addBoundProperties->return
ScriptRuntime#apply(ScriptFunction, Object, Object...):::Call a function given self and args:::try->return->target->invoke->catch->throw->throw->new->RuntimeException->finally
ScriptRuntime#throwReferenceError(String):::Throws a reference error for an undefined variable.:::throw->referenceError
ScriptRuntime#throwConstTypeError(String):::Throws a type error for an assignment to a const.:::throw->typeError
ScriptRuntime#construct(ScriptFunction, Object...):::Call a script function as a constructor with given args.:::try->return->target->construct->catch->throw->throw->new->RuntimeException->finally
ScriptRuntime#sameValue(Object, Object):::Generic implementation of ECMA 9.12 - SameValue algorithm:::xType->JSType->ofNoFunction->yType->JSType->ofNoFunction->if->return->if->return->if->xVal->doubleValue->yVal->doubleValue->if->Double->isNaN->Double->isNaN->return->if->Double->doubleToLongBits->Double->doubleToLongBits->return->return->if->return->x->equals->return
ScriptRuntime#parse(String, String, boolean):::Returns AST as JSON compatible string:::return->JSONWriter->Context->getContextTrusted->parse
ScriptRuntime#isJSWhitespace(char):::Test whether a char is valid JavaScript whitespace:::return->Lexer->isJSWhitespace
ScriptRuntime#openWith(ScriptObject, Object):::Entering a with node requires new scope:::global->Context->getGlobal->if->throw->typeError->else->if->throw->typeError->if->unwrapped->ScriptObjectMirror->unwrap->if->return->new->WithObject->exprObj->global->newObject->NativeObject->bindAllProperties->return->new->WithObject->wrappedExpr->JSType->toScriptObject->if->return->new->WithObject->throw->typeError
ScriptRuntime#ADD(Object, Object):::ECMA 11.6.1 - The addition operator (+) - generic implementation:::xIsNumber->yIsNumber->if->return->doubleValue->doubleValue->xIsUndefined->yIsUndefined->if->return->xPrim->JSType->toPrimitive->yPrim->JSType->toPrimitive->if->isString->isString->try->return->JSType->toCharSequence->JSType->toCharSequence->new->ConsString->catch->throw->rangeError->finally->return->JSType->toNumber->JSType->toNumber
ScriptRuntime#DEBUGGER():::Debugger hook:::return
ScriptRuntime#NEW(Object, Object...):::New hook:::return
ScriptRuntime#TYPEOF(Object, Object):::ECMA 11.4.3 The typeof Operator - generic implementation:::obj->if->if->sobj->find->sobj->findProperty->if->find->getObjectValue->else->sobj->invokeNoSuchProperty->if->Global->isLocationPropertyPlaceholder->if->name->equals->else->else->if->get->else->if->throw->safeToString->typeError->else->if->JSType->isPrimitive->JSType->toScriptObject->get->else->if->property->toString->getMember->else->return->JSType->of->typeName
ScriptRuntime#REFERENCE_ERROR(Object, Object, Object):::Throw ReferenceError when LHS of assignment or increment/decrement operator is not an assignable node (say a literal):::throw->Objects->toString->referenceError
ScriptRuntime#slowDelete(ScriptObject, String):::ECMA 11.4.1 - delete operator, implementation for slow scopes  This implementation of 'delete' walks the scope chain to find the scope that contains the property to be deleted, then invokes delete on it:::sobj->while->sobj->isScope->find->sobj->findProperty->if->return->sobj->delete->sobj->getProto->return->obj->delete
ScriptRuntime#strictFailDelete(String):::ECMA 11.4.1 - delete operator, special case  This is 'delete' on a scope; it always fails under strict mode:::throw->syntaxError
ScriptRuntime#EQ(Object, Object):::ECMA 11.9.1 - The equals operator (==) - generic implementation:::return->equals
ScriptRuntime#NE(Object, Object):::ECMA 11.9.2 - The does-not-equal operator (==) - generic implementation:::return->EQ
ScriptRuntime#EQ_STRICT(Object, Object):::ECMA 11.9.4 - The strict equal operator (===) - generic implementation:::return->strictEquals
ScriptRuntime#NE_STRICT(Object, Object):::ECMA 11.9.5 - The strict non equal operator (!==) - generic implementation:::return->EQ_STRICT
ScriptRuntime#IN(Object, Object):::ECMA 11.8.6 - The in operator - generic implementation:::rvalType->JSType->ofNoFunction->if->if->return->has->if->return->Objects->toString->hasMember->key->JSType->toPropertyKey->if->clazz->getRepresentedClass->return->BeansLinker->getReadableStaticPropertyNames->Objects->toString->contains->BeansLinker->getStaticMethodNames->Objects->toString->contains->else->if->containsKey->return->index->ArrayIndex->getArrayIndex->if->if->size->return->if->obj->getClass->isArray->Array->getLength->return->return->BeansLinker->obj->getClass->getReadableInstancePropertyNames->Objects->toString->contains->BeansLinker->obj->getClass->getInstanceMethodNames->Objects->toString->contains->throw->rvalType->toString->toLowerCase->typeError
ScriptRuntime#INSTANCEOF(Object, Object):::ECMA 11.8.6 - The strict instanceof operator - generic implementation:::if->if->return->isInstance->return->if->return->getRepresentedClass->isInstance->if->return->isInstance->if->return->isInstanceOf->throw->typeError
ScriptRuntime#LT(Object, Object):::ECMA 11.8.1 - The less than operator (<) - generic implementation:::px->JSType->toPrimitive->py->JSType->toPrimitive->return->areBothString->px->toString->py->toString->compareTo->JSType->toNumber->JSType->toNumber
ScriptRuntime#GT(Object, Object):::ECMA 11.8.2 - The greater than operator (>) - generic implementation:::px->JSType->toPrimitive->py->JSType->toPrimitive->return->areBothString->px->toString->py->toString->compareTo->JSType->toNumber->JSType->toNumber
ScriptRuntime#LE(Object, Object):::ECMA 11.8.3 - The less than or equal operator (<=) - generic implementation:::px->JSType->toPrimitive->py->JSType->toPrimitive->return->areBothString->px->toString->py->toString->compareTo->JSType->toNumber->JSType->toNumber
ScriptRuntime#GE(Object, Object):::ECMA 11.8.4 - The greater than or equal operator (>=) - generic implementation:::px->JSType->toPrimitive->py->JSType->toPrimitive->return->areBothString->px->toString->py->toString->compareTo->JSType->toNumber->JSType->toNumber
ScriptRuntime#invalidateReservedBuiltinName(String):::Tag a reserved name as invalidated - used when someone writes to a property with this name - overly conservative, but link time is too late to apply e.g:::context->Context->getContextTrusted->sp->context->getBuiltinSwitchPoint->context->getLogger->info->SwitchPoint->new->SwitchPointArr->invalidateAll
ScriptRuntime#GET_TEMPLATE_OBJECT(Object, Object):::ES6 12.2.9.3 Runtime Semantics: GetTemplateObject(templateLiteral).:::template->rawObj->template->rawObj->freeze->addOwnProperty->template->freeze->return
SetMethodCreator#createGuardedInvocation(SwitchPoint):::Creates the actual guarded invocation that represents the dynamic setter method for the property.:::return->createSetMethod->createGuardedInvocation
SharedPropertyMap#invalidateSwitchPoint():::Invalidate the shared prototype switch point if this is a shared prototype map.:::if->SwitchPoint->new->SwitchPointArr->invalidateAll
Source#sourceFor(String, char[], boolean):::Returns a Source instance:::return->baseName->new->RawData->new->Source
Source#sourceFor(String, char[]):::Returns a Source instance:::return->sourceFor
Source#sourceFor(String, String, boolean):::Returns a Source instance:::return->baseName->new->RawData->new->Source
Source#sourceFor(String, String):::Returns a Source instance:::return->sourceFor
Source#sourceFor(String, URL):::Constructor:::return->sourceFor
Source#sourceFor(String, URL, Charset):::Constructor:::return->baseURL->new->URLData->sourceFor
Source#sourceFor(String, File):::Constructor:::return->sourceFor
Source#sourceFor(String, Path):::Constructor:::file->try->path->toFile->catch->finally->if->return->sourceFor->else->return->Files->newBufferedReader->sourceFor
Source#sourceFor(String, File, Charset):::Constructor:::absFile->file->getAbsoluteFile->return->dirName->new->FileData->sourceFor
Source#sourceFor(String, Reader):::Returns an instance:::if->urlReader->return->urlReader->getURL->urlReader->getCharset->sourceFor->return->baseName->new->RawData->new->Source
Source#getString():::Fetch source content.:::return->data->toString
Source#getName():::Get the user supplied name of this script.:::return
Source#getLastModified():::Get the last modified time of this script.:::return->data->lastModified
Source#getBase():::Get the "directory" part of the file or "base" of the URL.:::return
Source#getString(int, int):::Fetch a portion of source content.:::return->data->new->String
Source#getString(long):::Fetch a portion of source content associated with a token.:::start->Token->descPosition->len->Token->descLength->return->data->new->String
Source#getURL():::Returns the source URL of this script Source:::return->data->url
Source#getExplicitURL():::Get explicit source URL.:::return
Source#setExplicitURL(String):::Set explicit source URL.:::
Source#isEvalCode():::Returns whether this source was submitted via 'eval' call or not.:::return->data->isEvalCode
Source#getLine(int):::Return line number of character position:::d->data->line->for->i->return
Source#getColumn(int):::Return column number of character position.:::return->findBOLN
Source#getSourceLine(int):::Return line text including character position.:::first->findBOLN->last->findEOLN->return->data->new->String
Source#getContent():::Get the content of this source as a char array:::return->data
Source#getLength():::Get the length in chars for this source:::return->data->length
Source#readFully(Reader):::Read all of the source until end of file:::arr->new->charArr->sb->new->StringBuilder->try->numChars->while->reader->read->sb->append->catch->finally->reader->close->return->sb->toString->toCharArray
Source#readFully(File):::Read all of the source until end of file:::if->file->isFile->throw->new->IOException->return->Files->file->toPath->readAllBytes->byteToCharArray
Source#readFully(File, Charset):::Read all of the source until end of file:::if->file->isFile->throw->new->IOException->buf->Files->file->toPath->readAllBytes->return->new->String->toCharArray->byteToCharArray
Source#readFully(URL):::Read all of the source until end of stream from the given URL:::return->url->openStream->readFully
Source#readFully(URL, Charset):::Read all of the source until end of file:::return->url->openStream->readFully
Source#getDigest():::Get a Base64-encoded SHA1 digest for this source.:::return->getDigestBytes->new->String
Source#baseURL(URL):::Returns the base directory or URL for the given URL:::try->uri->url->toURI->if->uri->getScheme->equals->path->Paths->get->parent->path->getParent->return->if->uri->isOpaque->uri->getPath->uri->getPath->isEmpty->return->return->uri->resolve->toString->catch->return->finally
Specialization#getMethodHandle():::Get the method handle for the invoker of this ScriptFunction:::return
Specialization#getLinkLogicClass():::Get the link logic class for this ScriptFunction:::return
Specialization#isOptimistic():::An optimistic specialization is one that can throw UnwarrantedOptimismException:::return
Specialization#convertsNumericArgs():::Check if this function converts arguments for numeric parameters to numbers so it's safe to pass booleans as 0 and 1:::return
StoredScript#getCompilationId():::Get the compilation id for this StoredScript:::return
StoredScript#installScript(Source, CodeInstaller):::Install as script.:::installedClasses->installClasses->foreach->if->data->data->initTransients->initializer->initializers->data->getFunctionNodeId->get->if->initializer->installedClasses->initializer->getClassName->get->setCode->data->initializeCode->return->installedClasses->get
StructureLoader#isSingleFieldStructure(String):::Returns true if the class name represents a structure object with single object-only fields.:::return->name->startsWith
StructureLoader#isStructureClass(String):::Returns true if the class name represents a Nashorn structure object.:::return->isDualFieldStructure->isSingleFieldStructure
Symbol#getName():::Return the symbol's name:::return
Timing#getLogInfo():::Get the log info accumulated by this Timing instance:::return->timeSupplier->get
Timing#getLogInfoLines():::Get the log info accumulated by this Timing instance:::return->timeSupplier->getStrings
Timing#isEnabled():::Check if timing is enabled:::return
Timing#accumulateTime(String, long):::When timing, this can be called to register a new module for timing or add to its accumulated time:::if->isEnabled->Context->getContextTrusted->ensureInitialized->timeSupplier->accumulateTime
Timing#toMillisPrint(long):::Takes a duration in nanoseconds, and returns a string representation of it rounded to milliseconds.:::return->Long->toMillis->toString
Undefined#getUndefined():::Get the value of undefined, this is represented as a global singleton instance of this class:::return
Undefined#getEmpty():::Get the value of empty:::return
Undefined#getClassName():::Get the class name of Undefined:::return
Undefined#lookup(CallSiteDescriptor):::Lookup the appropriate method for an invoke dynamic call.:::switch->NashornCallSiteDescriptor->getStandardOperation->name->NashornCallSiteDescriptor->getOperand->msg->throw->typeError->if->desc->getOperation->return->findGetIndexMethod->return->findGetMethod->if->desc->getOperation->return->findSetIndexMethod->return->findSetMethod->if->desc->getOperation->return->findDeleteIndexMethod->return->findDeleteMethod->return
UnwarrantedOptimismException#isValid(int):::Check if a program point is valid.:::return
UnwarrantedOptimismException#createNarrowest(Object, int):::Create an UnwarrantedOptimismException with the given return value and program point, narrowing the type to number if the value is a float or a long that can be represented as double.:::if->JSType->isRepresentableAsDouble->return->doubleValue->new->UnwarrantedOptimismException->return->new->UnwarrantedOptimismException
UnwarrantedOptimismException#getReturnValueDestructive():::Get the return value:::retval->return
UnwarrantedOptimismException#getReturnType():::Get the return type:::return
UnwarrantedOptimismException#hasInvalidProgramPoint():::Does this exception refer to an invalid program point? This might be OK if we throw it, e.g:::return
UnwarrantedOptimismException#getProgramPoint():::Get the program point:::return
UnwarrantedOptimismException#replaceProgramPoint(int):::Return a new UnwarrantedOptimismException with the same return value and the new program point.:::return->new->UnwarrantedOptimismException
UserAccessorProperty#getAccessorsGetter():::Get the getter for the Accessors object:::return->super->getGetter->MethodType->methodType->asType
Version#version():::The current version number as a string.:::return->version
Version#fullVersion():::The current full version number as a string.:::return->version
WithObject#delete(Object, boolean):::Delete a property based on a key.:::self->propName->JSType->toString->find->self->findProperty->if->return->self->delete->return
WithObject#findProperty(Object, boolean, boolean, ScriptObject):::Overridden to try to find the property first in the expression object (and its prototypes), and only then in this object (and its prototypes).:::exprProperty->expression->findProperty->if->return->return->super->findProperty
WithObject#withFilterExpression(Object):::Drops the WithObject wrapper from the expression.:::return
WithObject#withFilterScope(Object):::Drops the WithObject wrapper from the scope.:::return->getProto
WithObject#getExpression():::Get the with expression for this WithObject:::return

AbstractExecutorService#newTaskFor(Runnable, T):::Returns a RunnableFuture for the given runnable and default value.
AbstractExecutorService#newTaskFor(Callable):::Returns a RunnableFuture for the given callable task.
ArrayBlockingQueue#inc(int, int):::Increments i, mod modulus
ArrayBlockingQueue#dec(int, int):::Decrements i, mod modulus
ArrayBlockingQueue#itemAt(int):::Returns item at index i.
ArrayBlockingQueue#itemAt(Object[], int):::Returns element at array index i
ArrayBlockingQueue#removeAt(int):::Deletes item at array index removeIndex
ArrayBlockingQueue#add(E):::Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and throwing an IllegalStateException if this queue is full.
ArrayBlockingQueue#offer(E):::Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full
ArrayBlockingQueue#put(E):::Inserts the specified element at the tail of this queue, waiting for space to become available if the queue is full.
ArrayBlockingQueue#offer(E, long, TimeUnit):::Inserts the specified element at the tail of this queue, waiting up to the specified wait time for space to become available if the queue is full.
ArrayBlockingQueue#size():::Returns the number of elements in this queue.
ArrayBlockingQueue#remainingCapacity():::Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking
ArrayBlockingQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
ArrayBlockingQueue#contains(Object):::Returns true if this queue contains the specified element
ArrayBlockingQueue#toArray():::Returns an array containing all of the elements in this queue, in proper sequence
ArrayBlockingQueue#toArray(T[]):::Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
ArrayBlockingQueue#clear():::Atomically removes all of the elements from this queue
ArrayBlockingQueue#iterator():::Returns an iterator over the elements in this queue in proper sequence
ArrayBlockingQueue.Itrs#doSomeSweeping(boolean):::Sweeps itrs, looking for and expunging stale iterators
ArrayBlockingQueue.Itrs#register(Itr):::Adds a new iterator to the linked list of tracked iterators.
ArrayBlockingQueue.Itrs#takeIndexWrapped():::Called whenever takeIndex wraps around to 0
ArrayBlockingQueue.Itrs#removedAt(int):::Called whenever an interior remove (not at takeIndex) occurred
ArrayBlockingQueue.Itrs#queueIsEmpty():::Called whenever the queue becomes empty
ArrayBlockingQueue.Itrs#elementDequeued():::Called whenever an element has been dequeued (at takeIndex).
ArrayBlockingQueue#spliterator():::Returns a Spliterator over the elements in this queue
ArrayBlockingQueue#checkInvariants():::debugging
BlockingDeque#addFirst(E):::Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
BlockingDeque#addLast(E):::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
BlockingDeque#offerFirst(E):::Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
BlockingDeque#offerLast(E):::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
BlockingDeque#putFirst(E):::Inserts the specified element at the front of this deque, waiting if necessary for space to become available.
BlockingDeque#putLast(E):::Inserts the specified element at the end of this deque, waiting if necessary for space to become available.
BlockingDeque#offerFirst(E, long, TimeUnit):::Inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available.
BlockingDeque#offerLast(E, long, TimeUnit):::Inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available.
BlockingDeque#takeFirst():::Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available.
BlockingDeque#takeLast():::Retrieves and removes the last element of this deque, waiting if necessary until an element becomes available.
BlockingDeque#pollFirst(long, TimeUnit):::Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available.
BlockingDeque#pollLast(long, TimeUnit):::Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available.
BlockingDeque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element from this deque
BlockingDeque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element from this deque
BlockingDeque#add(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
BlockingDeque#offer(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
BlockingDeque#put(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available
BlockingDeque#offer(E, long, TimeUnit):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available
BlockingDeque#remove():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)
BlockingDeque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
BlockingDeque#take():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting if necessary until an element becomes available
BlockingDeque#poll(long, TimeUnit):::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available
BlockingDeque#element():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)
BlockingDeque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
BlockingDeque#remove(Object):::Removes the first occurrence of the specified element from this deque
BlockingDeque#contains(Object):::Returns true if this deque contains the specified element
BlockingDeque#size():::Returns the number of elements in this deque.
BlockingDeque#iterator():::Returns an iterator over the elements in this deque in proper sequence
BlockingDeque#push(E):::Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
BlockingQueue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
BlockingQueue#offer(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
BlockingQueue#put(E):::Inserts the specified element into this queue, waiting if necessary for space to become available.
BlockingQueue#offer(E, long, TimeUnit):::Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available.
BlockingQueue#take():::Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.
BlockingQueue#poll(long, TimeUnit):::Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.
BlockingQueue#remainingCapacity():::Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit
BlockingQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
BlockingQueue#contains(Object):::Returns true if this queue contains the specified element
BlockingQueue#drainTo(Collection):::Removes all available elements from this queue and adds them to the given collection
BlockingQueue#drainTo(Collection, int):::Removes at most the given number of available elements from this queue and adds them to the given collection
Callable#call():::Computes a result, or throws an exception if unable to do so.
CompletableFuture#tryPushStack(Completion):::Returns true if successfully pushed c onto stack.
CompletableFuture#pushStack(Completion):::Unconditionally pushes c onto stack, retrying if necessary.
CompletableFuture#completeNull():::Completes with the null value, unless already completed.
CompletableFuture#encodeValue(T):::Returns the encoding of the given non-exceptional value.
CompletableFuture#completeValue(T):::Completes with a non-exceptional result, unless already completed.
CompletableFuture#encodeThrowable(Throwable):::Returns the encoding of the given (non-null) exception as a wrapped CompletionException unless it is one already.
CompletableFuture#completeThrowable(Throwable):::Completes with an exceptional result, unless already completed.
CompletableFuture#encodeThrowable(Throwable, Object):::Returns the encoding of the given (non-null) exception as a wrapped CompletionException unless it is one already
CompletableFuture#completeThrowable(Throwable, Object):::Completes with the given (non-null) exceptional result as a wrapped CompletionException unless it is one already, unless already completed
CompletableFuture#encodeOutcome(T, Throwable):::Returns the encoding of the given arguments: if the exception is non-null, encodes as AltResult
CompletableFuture#encodeRelay(Object):::Returns the encoding of a copied outcome; if exceptional, rewraps as a CompletionException, else returns argument.
CompletableFuture#completeRelay(Object):::Completes with r or a copy of r, unless already completed
CompletableFuture#screenExecutor(Executor):::Null-checks user executor argument, and translates uses of commonPool to ASYNC_POOL in case parallelism disabled.
CompletableFuture.Completion#tryFire(int):::Performs completion action if triggered, returning a dependent that may need propagation, if one exists.
CompletableFuture.Completion#isLive():::Returns true if possibly still triggerable
CompletableFuture#postComplete():::Pops and tries to trigger all reachable dependents
CompletableFuture#cleanStack():::Traverses stack and unlinks one or more dead Completions, if found.
CompletableFuture.UniCompletion#claim():::Returns true if action can be run
CompletableFuture#unipush(Completion):::Pushes the given completion unless it completes while trying
CompletableFuture#postFire(CompletableFuture, int):::Post-processing by dependent after successful UniCompletion tryFire
CompletableFuture#bipush(CompletableFuture, BiCompletion):::Pushes completion to this and b unless both done
CompletableFuture#postFire(CompletableFuture, CompletableFuture, int):::Post-processing after successful BiCompletion tryFire.
CompletableFuture#andTree(CompletableFuture[], int, int):::Recursively constructs a tree of completions.
CompletableFuture#orpush(CompletableFuture, BiCompletion):::Pushes completion to this and b unless either done
CompletableFuture#supplyAsync(Supplier):::Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool#commonPool() with the value obtained by calling the given Supplier.
CompletableFuture#supplyAsync(Supplier, Executor):::Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor with the value obtained by calling the given Supplier.
CompletableFuture#runAsync(Runnable):::Returns a new CompletableFuture that is asynchronously completed by a task running in the ForkJoinPool#commonPool() after it runs the given action.
CompletableFuture#runAsync(Runnable, Executor):::Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor after it runs the given action.
CompletableFuture#completedFuture(U):::Returns a new CompletableFuture that is already completed with the given value.
CompletableFuture#isDone():::Returns true if completed in any fashion: normally, exceptionally, or via cancellation.
CompletableFuture#get():::Waits if necessary for this future to complete, and then returns its result.
CompletableFuture#get(long, TimeUnit):::Waits if necessary for at most the given time for this future to complete, and then returns its result, if available.
CompletableFuture#join():::Returns the result value when complete, or throws an (unchecked) exception if completed exceptionally
CompletableFuture#getNow(T):::Returns the result value (or throws any encountered exception) if completed, else returns the given valueIfAbsent.
CompletableFuture#complete(T):::If not already completed, sets the value returned by #get() and related methods to the given value.
CompletableFuture#completeExceptionally(Throwable):::If not already completed, causes invocations of #get() and related methods to throw the given exception.
CompletableFuture#toCompletableFuture():::Returns this CompletableFuture.
CompletableFuture#exceptionally(Function):::Returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the exception triggering this CompletableFuture's completion when it completes exceptionally; otherwise, if this CompletableFuture completes normally, then the returned CompletableFuture also completes normally with the same value
CompletableFuture#allOf(CompletableFuture...):::Returns a new CompletableFuture that is completed when all of the given CompletableFutures complete
CompletableFuture#anyOf(CompletableFuture...):::Returns a new CompletableFuture that is completed when any of the given CompletableFutures complete, with the same result
CompletableFuture#cancel(boolean):::If not already completed, completes this CompletableFuture with a CancellationException
CompletableFuture#isCancelled():::Returns true if this CompletableFuture was cancelled before it completed normally.
CompletableFuture#isCompletedExceptionally():::Returns true if this CompletableFuture completed exceptionally, in any way
CompletableFuture#obtrudeValue(T):::Forcibly sets or resets the value subsequently returned by method #get() and related methods, whether or not already completed
CompletableFuture#obtrudeException(Throwable):::Forcibly causes subsequent invocations of method #get() and related methods to throw the given exception, whether or not already completed
CompletableFuture#getNumberOfDependents():::Returns the estimated number of CompletableFutures whose completions are awaiting completion of this CompletableFuture
CompletableFuture#toString():::Returns a string identifying this CompletableFuture, as well as its completion state
CompletableFuture#newIncompleteFuture():::Returns a new incomplete CompletableFuture of the type to be returned by a CompletionStage method
CompletableFuture#defaultExecutor():::Returns the default Executor used for async methods that do not specify an Executor
CompletableFuture#copy():::Returns a new CompletableFuture that is completed normally with the same value as this CompletableFuture when it completes normally
CompletableFuture#minimalCompletionStage():::Returns a new CompletionStage that is completed normally with the same value as this CompletableFuture when it completes normally, and cannot be independently completed or otherwise used in ways not defined by the methods of interface CompletionStage
CompletableFuture#completeAsync(Supplier, Executor):::Completes this CompletableFuture with the result of the given Supplier function invoked from an asynchronous task using the given executor.
CompletableFuture#completeAsync(Supplier):::Completes this CompletableFuture with the result of the given Supplier function invoked from an asynchronous task using the default executor.
CompletableFuture#orTimeout(long, TimeUnit):::Exceptionally completes this CompletableFuture with a TimeoutException if not otherwise completed before the given timeout.
CompletableFuture#completeOnTimeout(T, long, TimeUnit):::Completes this CompletableFuture with the given value if not otherwise completed before the given timeout.
CompletableFuture#delayedExecutor(long, TimeUnit, Executor):::Returns a new Executor that submits a task to the given base executor after the given delay (or no delay if non-positive)
CompletableFuture#delayedExecutor(long, TimeUnit):::Returns a new Executor that submits a task to the default executor after the given delay (or no delay if non-positive)
CompletableFuture#completedStage(U):::Returns a new CompletionStage that is already completed with the given value and supports only those methods in interface CompletionStage.
CompletableFuture#failedFuture(Throwable):::Returns a new CompletableFuture that is already completed exceptionally with the given exception.
CompletableFuture#failedStage(Throwable):::Returns a new CompletionStage that is already completed exceptionally with the given exception and supports only those methods in interface CompletionStage.
CompletionService#submit(Callable):::Submits a value-returning task for execution and returns a Future representing the pending results of the task
CompletionService#submit(Runnable, V):::Submits a Runnable task for execution and returns a Future representing that task
CompletionService#take():::Retrieves and removes the Future representing the next completed task, waiting if none are yet present.
CompletionService#poll():::Retrieves and removes the Future representing the next completed task, or null if none are present.
CompletionService#poll(long, TimeUnit):::Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.
CompletionStage#thenApply(Function):::Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied function
CompletionStage#thenApplyAsync(Function):::Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied function
CompletionStage#thenApplyAsync(Function, Executor):::Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied function
CompletionStage#thenAccept(Consumer):::Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action
CompletionStage#thenAcceptAsync(Consumer):::Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied action
CompletionStage#thenAcceptAsync(Consumer, Executor):::Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied action
CompletionStage#thenRun(Runnable):::Returns a new CompletionStage that, when this stage completes normally, executes the given action
CompletionStage#thenRunAsync(Runnable):::Returns a new CompletionStage that, when this stage completes normally, executes the given action using this stage's default asynchronous execution facility
CompletionStage#thenRunAsync(Runnable, Executor):::Returns a new CompletionStage that, when this stage completes normally, executes the given action using the supplied Executor
CompletionStage#thenCombine(CompletionStage, BiFunction):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied function
CompletionStage#thenCombineAsync(CompletionStage, BiFunction):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied function
CompletionStage#thenCombineAsync(CompletionStage, BiFunction, Executor):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function
CompletionStage#thenAcceptBoth(CompletionStage, BiConsumer):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied action
CompletionStage#thenAcceptBothAsync(CompletionStage, BiConsumer):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied action
CompletionStage#thenAcceptBothAsync(CompletionStage, BiConsumer, Executor):::Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using the supplied executor, with the two results as arguments to the supplied action
CompletionStage#runAfterBoth(CompletionStage, Runnable):::Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action
CompletionStage#runAfterBothAsync(CompletionStage, Runnable):::Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action using this stage's default asynchronous execution facility
CompletionStage#runAfterBothAsync(CompletionStage, Runnable, Executor):::Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action using the supplied executor
CompletionStage#applyToEither(CompletionStage, Function):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function
CompletionStage#applyToEitherAsync(CompletionStage, Function):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied function
CompletionStage#applyToEitherAsync(CompletionStage, Function, Executor):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function
CompletionStage#acceptEither(CompletionStage, Consumer):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action
CompletionStage#acceptEitherAsync(CompletionStage, Consumer):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied action
CompletionStage#acceptEitherAsync(CompletionStage, Consumer, Executor):::Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied action
CompletionStage#runAfterEither(CompletionStage, Runnable):::Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action
CompletionStage#runAfterEitherAsync(CompletionStage, Runnable):::Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility
CompletionStage#runAfterEitherAsync(CompletionStage, Runnable, Executor):::Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using the supplied executor
CompletionStage#thenCompose(Function>):::Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function
CompletionStage#thenComposeAsync(Function>):::Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function, executed using this stage's default asynchronous execution facility
CompletionStage#thenComposeAsync(Function>, Executor):::Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function, executed using the supplied Executor
CompletionStage#handle(BiFunction):::Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed with this stage's result and exception as arguments to the supplied function
CompletionStage#handleAsync(BiFunction):::Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using this stage's default asynchronous execution facility, with this stage's result and exception as arguments to the supplied function
CompletionStage#handleAsync(BiFunction, Executor):::Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using the supplied executor, with this stage's result and exception as arguments to the supplied function
CompletionStage#whenComplete(BiConsumer):::Returns a new CompletionStage with the same result or exception as this stage, that executes the given action when this stage completes
CompletionStage#whenCompleteAsync(BiConsumer):::Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using this stage's default asynchronous execution facility when this stage completes
CompletionStage#whenCompleteAsync(BiConsumer, Executor):::Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using the supplied Executor when this stage completes
CompletionStage#exceptionally(Function):::Returns a new CompletionStage that, when this stage completes exceptionally, is executed with this stage's exception as the argument to the supplied function
CompletionStage#toCompletableFuture():::Returns a CompletableFuture maintaining the same completion properties as this stage
ConcurrentHashMap.Node#find(int, Object):::Virtualized support for map.get(); overridden in subclasses.
ConcurrentHashMap#spread(int):::Spreads (XORs) higher bits of hash to lower and also forces top bit to 0
ConcurrentHashMap#comparableClassFor(Object):::Returns x's Class if it is of the form "class C implements Comparable<C>", else null.
ConcurrentHashMap#compareComparables(Class, Object, Object):::Returns k.compareTo(x) if x matches kc (k's screened comparable class), else 0.
ConcurrentHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
ConcurrentHashMap#containsKey(Object):::Tests if the specified object is a key in this table.
ConcurrentHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value
ConcurrentHashMap#put(K, V):::Maps the specified key to the specified value in this table
ConcurrentHashMap#putVal(K, V, boolean):::Implementation for put and putIfAbsent
ConcurrentHashMap#putAll(Map):::Copies all of the mappings from the specified map to this one
ConcurrentHashMap#remove(Object):::Removes the key (and its corresponding value) from this map
ConcurrentHashMap#replaceNode(Object, V, Object):::Implementation for the four public remove/replace methods: Replaces node value with v, conditional upon match of cv if non-null
ConcurrentHashMap#clear():::Removes all of the mappings from this map.
ConcurrentHashMap#keySet():::Returns a Set view of the keys contained in this map
ConcurrentHashMap#values():::Returns a Collection view of the values contained in this map
ConcurrentHashMap#entrySet():::Returns a Set view of the mappings contained in this map
ConcurrentHashMap#hashCode():::Returns the hash code value for this Map, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode().
ConcurrentHashMap#toString():::Returns a string representation of this map
ConcurrentHashMap#equals(Object):::Compares the specified object with this map for equality
ConcurrentHashMap#getOrDefault(Object, V):::Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.
ConcurrentHashMap#removeEntryIf(Predicate>):::Helper method for EntrySetView.removeIf.
ConcurrentHashMap#removeValueIf(Predicate):::Helper method for ValuesView.removeIf.
ConcurrentHashMap#computeIfAbsent(K, Function):::If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null
ConcurrentHashMap#computeIfPresent(K, BiFunction):::If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value
ConcurrentHashMap#compute(K, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)
ConcurrentHashMap#merge(K, V, BiFunction):::If the specified key is not already associated with a (non-null) value, associates it with the given value
ConcurrentHashMap#contains(Object):::Tests if some key maps into the specified value in this table
ConcurrentHashMap#keys():::Returns an enumeration of the keys in this table.
ConcurrentHashMap#elements():::Returns an enumeration of the values in this table.
ConcurrentHashMap#mappingCount():::Returns the number of mappings
ConcurrentHashMap#newKeySet():::Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.
ConcurrentHashMap#newKeySet(int):::Creates a new Set backed by a ConcurrentHashMap from the given type to Boolean.TRUE.
ConcurrentHashMap#keySet(V):::Returns a Set view of the keys in this map, using the given common mapped value for any additions (i.e., Collection#add and Collection#addAll(Collection))
ConcurrentHashMap#resizeStamp(int):::Returns the stamp bits for resizing a table of size n
ConcurrentHashMap#helpTransfer(Node[], Node):::Helps transfer if a resize is in progress.
ConcurrentHashMap#untreeify(Node):::Returns a list of non-TreeNodes replacing those in given list.
ConcurrentHashMap.TreeNode#findTreeNode(int, Object, Class):::Returns the TreeNode (or null if not found) for the given key starting at given root.
ConcurrentHashMap.TreeBin#tieBreakOrder(Object, Object):::Tie-breaking utility for ordering insertions when equal hashCodes and non-comparable
ConcurrentHashMap.TreeBin#find(int, Object):::Returns matching node or null if none
ConcurrentHashMap.TreeBin#putTreeVal(int, K, V):::Finds or adds a node.
ConcurrentHashMap.TreeBin#removeTreeNode(TreeNode):::Removes the given node, that must be present before this call
ConcurrentHashMap.TreeBin#checkInvariants(TreeNode):::Checks invariants recursively for the tree of Nodes rooted at t.
ConcurrentHashMap.Traverser#advance():::Advances if possible, returning next valid node, or null if none.
ConcurrentHashMap.MapEntry#setValue(V):::Sets our entry's value and writes through to the map
ConcurrentHashMap#batchFor(long):::Computes initial batch value for bulk tasks
ConcurrentHashMap#forEach(long, BiConsumer):::Performs the given action for each (key, value).
ConcurrentHashMap#forEach(long, BiFunction, Consumer):::Performs the given action for each non-null transformation of each (key, value).
ConcurrentHashMap#search(long, BiFunction):::Returns a non-null result from applying the given search function on each (key, value), or null if none
ConcurrentHashMap#reduce(long, BiFunction, BiFunction):::Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceToDouble(long, ToDoubleBiFunction, double, DoubleBinaryOperator):::Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceToLong(long, ToLongBiFunction, long, LongBinaryOperator):::Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceToInt(long, ToIntBiFunction, int, IntBinaryOperator):::Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#forEachKey(long, Consumer):::Performs the given action for each key.
ConcurrentHashMap#forEachKey(long, Function, Consumer):::Performs the given action for each non-null transformation of each key.
ConcurrentHashMap#searchKeys(long, Function):::Returns a non-null result from applying the given search function on each key, or null if none
ConcurrentHashMap#reduceKeys(long, BiFunction):::Returns the result of accumulating all keys using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceKeys(long, Function, BiFunction):::Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceKeysToDouble(long, ToDoubleFunction, double, DoubleBinaryOperator):::Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceKeysToLong(long, ToLongFunction, long, LongBinaryOperator):::Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceKeysToInt(long, ToIntFunction, int, IntBinaryOperator):::Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#forEachValue(long, Consumer):::Performs the given action for each value.
ConcurrentHashMap#forEachValue(long, Function, Consumer):::Performs the given action for each non-null transformation of each value.
ConcurrentHashMap#searchValues(long, Function):::Returns a non-null result from applying the given search function on each value, or null if none
ConcurrentHashMap#reduceValues(long, BiFunction):::Returns the result of accumulating all values using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceValues(long, Function, BiFunction):::Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceValuesToDouble(long, ToDoubleFunction, double, DoubleBinaryOperator):::Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceValuesToLong(long, ToLongFunction, long, LongBinaryOperator):::Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceValuesToInt(long, ToIntFunction, int, IntBinaryOperator):::Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#forEachEntry(long, Consumer>):::Performs the given action for each entry.
ConcurrentHashMap#forEachEntry(long, Function, ? extends U>, Consumer):::Performs the given action for each non-null transformation of each entry.
ConcurrentHashMap#searchEntries(long, Function, ? extends U>):::Returns a non-null result from applying the given search function on each entry, or null if none
ConcurrentHashMap#reduceEntries(long, BiFunction, Map.Entry, ? extends Map.Entry>):::Returns the result of accumulating all entries using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceEntries(long, Function, ? extends U>, BiFunction):::Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.
ConcurrentHashMap#reduceEntriesToDouble(long, ToDoubleFunction>, double, DoubleBinaryOperator):::Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceEntriesToLong(long, ToLongFunction>, long, LongBinaryOperator):::Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap#reduceEntriesToInt(long, ToIntFunction>, int, IntBinaryOperator):::Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.
ConcurrentHashMap.CollectionView#getMap():::Returns the map backing this view.
ConcurrentHashMap.CollectionView#clear():::Removes all of the elements from this view, by removing all the mappings from the map backing this view.
ConcurrentHashMap.CollectionView#iterator():::Returns an iterator over the elements in this collection
ConcurrentHashMap.CollectionView#toString():::Returns a string representation of this collection
ConcurrentHashMap.KeySetView#getMappedValue():::Returns the default mapped value for additions, or null if additions are not supported.
ConcurrentHashMap.KeySetView#remove(Object):::Removes the key from this map view, by removing the key (and its corresponding value) from the backing map
ConcurrentHashMap.KeySetView#add(K):::Adds the specified key to this set view by mapping the key to the default mapped value in the backing map, if defined.
ConcurrentHashMap.KeySetView#addAll(Collection):::Adds all of the elements in the specified collection to this set, as if by calling #add on each one.
ConcurrentHashMap.BulkTask#advance():::Same as Traverser version.
ConcurrentLinkedDeque#newNode(E):::Returns a new node holding item
ConcurrentLinkedDeque#unlink(Node):::Unlinks non-null node x.
ConcurrentLinkedDeque#succ(Node):::Returns the successor of p, or the first node if p.next has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.
ConcurrentLinkedDeque#pred(Node):::Returns the predecessor of p, or the last node if p.prev has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.
ConcurrentLinkedDeque#first():::Returns the first node, the unique node p for which:     p.prev == null && p.next != p The returned node may or may not be logically deleted
ConcurrentLinkedDeque#last():::Returns the last node, the unique node p for which:     p.next == null && p.prev != p The returned node may or may not be logically deleted
ConcurrentLinkedDeque#addFirst(E):::Inserts the specified element at the front of this deque
ConcurrentLinkedDeque#addLast(E):::Inserts the specified element at the end of this deque
ConcurrentLinkedDeque#offerFirst(E):::Inserts the specified element at the front of this deque
ConcurrentLinkedDeque#offerLast(E):::Inserts the specified element at the end of this deque
ConcurrentLinkedDeque#offer(E):::Inserts the specified element at the tail of this deque
ConcurrentLinkedDeque#add(E):::Inserts the specified element at the tail of this deque
ConcurrentLinkedDeque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element from this deque
ConcurrentLinkedDeque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element from this deque
ConcurrentLinkedDeque#contains(Object):::Returns true if this deque contains the specified element
ConcurrentLinkedDeque#isEmpty():::Returns true if this collection contains no elements.
ConcurrentLinkedDeque#size():::Returns the number of elements in this deque
ConcurrentLinkedDeque#remove(Object):::Removes the first occurrence of the specified element from this deque
ConcurrentLinkedDeque#addAll(Collection):::Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator
ConcurrentLinkedDeque#clear():::Removes all of the elements from this deque.
ConcurrentLinkedDeque#toArray():::Returns an array containing all of the elements in this deque, in proper sequence (from first to last element)
ConcurrentLinkedDeque#toArray(T[]):::Returns an array containing all of the elements in this deque, in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
ConcurrentLinkedDeque#iterator():::Returns an iterator over the elements in this deque in proper sequence
ConcurrentLinkedDeque#descendingIterator():::Returns an iterator over the elements in this deque in reverse sequential order
ConcurrentLinkedDeque#spliterator():::Returns a Spliterator over the elements in this deque
ConcurrentLinkedQueue#add(E):::Inserts the specified element at the tail of this queue
ConcurrentLinkedQueue#updateHead(Node, Node):::Tries to CAS head to p
ConcurrentLinkedQueue#succ(Node):::Returns the successor of p, or the head node if p.next has been linked to self, which will only be true if traversing with a stale pointer that is now off the list.
ConcurrentLinkedQueue#offer(E):::Inserts the specified element at the tail of this queue
ConcurrentLinkedQueue#first():::Returns the first live (non-deleted) node on list, or null if none
ConcurrentLinkedQueue#isEmpty():::Returns true if this queue contains no elements.
ConcurrentLinkedQueue#size():::Returns the number of elements in this queue
ConcurrentLinkedQueue#contains(Object):::Returns true if this queue contains the specified element
ConcurrentLinkedQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
ConcurrentLinkedQueue#addAll(Collection):::Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator
ConcurrentLinkedQueue#toArray():::Returns an array containing all of the elements in this queue, in proper sequence
ConcurrentLinkedQueue#toArray(T[]):::Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
ConcurrentLinkedQueue#iterator():::Returns an iterator over the elements in this queue in proper sequence
ConcurrentLinkedQueue#spliterator():::Returns a Spliterator over the elements in this queue
ConcurrentLinkedQueue#forEachFrom(Consumer, Node):::Runs action on each element found during a traversal starting at p
ConcurrentMap#putIfAbsent(K, V):::If the specified key is not already associated with a value, associates it with the given value
ConcurrentMap#remove(Object, Object):::Removes the entry for a key only if currently mapped to a given value
ConcurrentMap#replace(K, V, V):::Replaces the entry for a key only if currently mapped to a given value
ConcurrentMap#replace(K, V):::Replaces the entry for a key only if currently mapped to some value
ConcurrentNavigableMap#descendingMap():::Returns a reverse order view of the mappings contained in this map
ConcurrentNavigableMap#navigableKeySet():::Returns a NavigableSet view of the keys contained in this map
ConcurrentNavigableMap#keySet():::Returns a NavigableSet view of the keys contained in this map
ConcurrentNavigableMap#descendingKeySet():::Returns a reverse order NavigableSet view of the keys contained in this map
ConcurrentSkipListMap#cpr(Comparator, Object, Object):::Compares using comparator or natural ordering if null
ConcurrentSkipListMap#baseHead():::Returns the header for base node list, or null if uninitialized
ConcurrentSkipListMap#unlinkNode(Node, Node):::Tries to unlink deleted node n from predecessor b (if both exist), by first splicing in a marker if not already present
ConcurrentSkipListMap#getAdderCount():::Returns element count, initializing adder if necessary.
ConcurrentSkipListMap#addIndices(Index, int, Index, Comparator):::Add indices after an insertion
ConcurrentSkipListMap#doRemove(Object, Object):::Main deletion method
ConcurrentSkipListMap#findFirst():::Gets first valid node, unlinking deleted nodes if encountered.
ConcurrentSkipListMap#findFirstEntry():::Entry snapshot version of findFirst
ConcurrentSkipListMap#findLast():::Specialized version of find to get last valid node.
ConcurrentSkipListMap#findLastEntry():::Entry version of findLast
ConcurrentSkipListMap#findNear(K, int, Comparator):::Utility for ceiling, floor, lower, higher methods.
ConcurrentSkipListMap#findNearEntry(K, int, Comparator):::Variant of findNear returning SimpleImmutableEntry
ConcurrentSkipListMap#clone():::Returns a shallow copy of this ConcurrentSkipListMap instance
ConcurrentSkipListMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
ConcurrentSkipListMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
ConcurrentSkipListMap#getOrDefault(Object, V):::Returns the value to which the specified key is mapped, or the given defaultValue if this map contains no mapping for the key.
ConcurrentSkipListMap#put(K, V):::Associates the specified value with the specified key in this map
ConcurrentSkipListMap#remove(Object):::Removes the mapping for the specified key from this map if present.
ConcurrentSkipListMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value
ConcurrentSkipListMap#clear():::Removes all of the mappings from this map.
ConcurrentSkipListMap#computeIfAbsent(K, Function):::If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null
ConcurrentSkipListMap#computeIfPresent(K, BiFunction):::If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value
ConcurrentSkipListMap#compute(K, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)
ConcurrentSkipListMap#merge(K, V, BiFunction):::If the specified key is not already associated with a value, associates it with the given value
ConcurrentSkipListMap#keySet():::Returns a NavigableSet view of the keys contained in this map
ConcurrentSkipListMap#values():::Returns a Collection view of the values contained in this map
ConcurrentSkipListMap#entrySet():::Returns a Set view of the mappings contained in this map
ConcurrentSkipListMap#equals(Object):::Compares the specified object with this map for equality
ConcurrentSkipListMap#lowerEntry(K):::Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key
ConcurrentSkipListMap#floorEntry(K):::Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key
ConcurrentSkipListMap#ceilingEntry(K):::Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such entry
ConcurrentSkipListMap#higherEntry(K):::Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key
ConcurrentSkipListMap#firstEntry():::Returns a key-value mapping associated with the least key in this map, or null if the map is empty
ConcurrentSkipListMap#lastEntry():::Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty
ConcurrentSkipListMap#pollFirstEntry():::Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty
ConcurrentSkipListMap#pollLastEntry():::Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty
ConcurrentSkipListMap.Iter#advance(Node):::Advances next to higher entry.
ConcurrentSkipListMap.SubMap#isBeforeEnd(ConcurrentSkipListMap.Node, Comparator):::Returns true if node key is less than upper bound of range.
ConcurrentSkipListMap.SubMap#loNode(Comparator):::Returns lowest node
ConcurrentSkipListMap.SubMap#hiNode(Comparator):::Returns highest node
ConcurrentSkipListMap.SubMap#lowestKey():::Returns lowest absolute key (ignoring directionality).
ConcurrentSkipListMap.SubMap#highestKey():::Returns highest absolute key (ignoring directionality).
ConcurrentSkipListMap.SubMap#getNearEntry(K, int):::Submap version of ConcurrentSkipListMap.findNearEntry.
ConcurrentSkipListMap.SubMap#newSubMap(K, boolean, K, boolean):::Utility to create submaps, where given bounds override unbounded(null) ones and/or are checked against bounded ones.
ConcurrentSkipListMap#removeEntryIf(Predicate>):::Helper method for EntrySet.removeIf.
ConcurrentSkipListMap#removeValueIf(Predicate):::Helper method for Values.removeIf.
ConcurrentSkipListSet#clone():::Returns a shallow copy of this ConcurrentSkipListSet instance
ConcurrentSkipListSet#size():::Returns the number of elements in this set
ConcurrentSkipListSet#isEmpty():::Returns true if this set contains no elements.
ConcurrentSkipListSet#contains(Object):::Returns true if this set contains the specified element
ConcurrentSkipListSet#add(E):::Adds the specified element to this set if it is not already present
ConcurrentSkipListSet#remove(Object):::Removes the specified element from this set if it is present
ConcurrentSkipListSet#clear():::Removes all of the elements from this set.
ConcurrentSkipListSet#iterator():::Returns an iterator over the elements in this set in ascending order.
ConcurrentSkipListSet#descendingIterator():::Returns an iterator over the elements in this set in descending order.
ConcurrentSkipListSet#equals(Object):::Compares the specified object with this set for equality
ConcurrentSkipListSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection
ConcurrentSkipListSet#descendingSet():::Returns a reverse order view of the elements contained in this set
ConcurrentSkipListSet#spliterator():::Returns a Spliterator over the elements in this set
CopyOnWriteArrayList#getArray():::Gets the array
CopyOnWriteArrayList#setArray(Object[]):::Sets the array.
CopyOnWriteArrayList#size():::Returns the number of elements in this list.
CopyOnWriteArrayList#isEmpty():::Returns true if this list contains no elements.
CopyOnWriteArrayList#contains(Object):::Returns true if this list contains the specified element
CopyOnWriteArrayList#indexOf(E, int):::Returns the index of the first occurrence of the specified element in this list, searching forwards from index, or returns -1 if the element is not found
CopyOnWriteArrayList#lastIndexOf(E, int):::Returns the index of the last occurrence of the specified element in this list, searching backwards from index, or returns -1 if the element is not found
CopyOnWriteArrayList#clone():::Returns a shallow copy of this list
CopyOnWriteArrayList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
CopyOnWriteArrayList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
CopyOnWriteArrayList#set(int, E):::Replaces the element at the specified position in this list with the specified element.
CopyOnWriteArrayList#add(E):::Appends the specified element to the end of this list.
CopyOnWriteArrayList#add(int, E):::Inserts the specified element at the specified position in this list
CopyOnWriteArrayList#remove(int):::Removes the element at the specified position in this list
CopyOnWriteArrayList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present
CopyOnWriteArrayList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
CopyOnWriteArrayList#addIfAbsent(E):::Appends the element, if not present.
CopyOnWriteArrayList#containsAll(Collection):::Returns true if this list contains all of the elements of the specified collection.
CopyOnWriteArrayList#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection
CopyOnWriteArrayList#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection
CopyOnWriteArrayList#addAllAbsent(Collection):::Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator.
CopyOnWriteArrayList#clear():::Removes all of the elements from this list
CopyOnWriteArrayList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.
CopyOnWriteArrayList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position
CopyOnWriteArrayList#toString():::Returns a string representation of this list
CopyOnWriteArrayList#equals(Object):::Compares the specified object with this list for equality
CopyOnWriteArrayList#hashCode():::Returns the hash code value for this list
CopyOnWriteArrayList#iterator():::Returns an iterator over the elements in this list in proper sequence
CopyOnWriteArrayList#listIterator():::  The returned iterator provides a snapshot of the state of the list when the iterator was constructed
CopyOnWriteArrayList#listIterator(int):::  The returned iterator provides a snapshot of the state of the list when the iterator was constructed
CopyOnWriteArrayList#spliterator():::Returns a Spliterator over the elements in this list
CopyOnWriteArrayList.COWIterator#remove():::Not supported
CopyOnWriteArrayList.COWIterator#set(E):::Not supported
CopyOnWriteArrayList.COWIterator#add(E):::Not supported
CopyOnWriteArrayList#subList(int, int):::Returns a view of the portion of this list between fromIndex, inclusive, and toIndex, exclusive
CopyOnWriteArraySet#size():::Returns the number of elements in this set.
CopyOnWriteArraySet#isEmpty():::Returns true if this set contains no elements.
CopyOnWriteArraySet#contains(Object):::Returns true if this set contains the specified element
CopyOnWriteArraySet#toArray():::Returns an array containing all of the elements in this set
CopyOnWriteArraySet#toArray(T[]):::Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array
CopyOnWriteArraySet#clear():::Removes all of the elements from this set
CopyOnWriteArraySet#remove(Object):::Removes the specified element from this set if it is present
CopyOnWriteArraySet#add(E):::Adds the specified element to this set if it is not already present
CopyOnWriteArraySet#containsAll(Collection):::Returns true if this set contains all of the elements of the specified collection
CopyOnWriteArraySet#addAll(Collection):::Adds all of the elements in the specified collection to this set if they're not already present
CopyOnWriteArraySet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection
CopyOnWriteArraySet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection
CopyOnWriteArraySet#iterator():::Returns an iterator over the elements contained in this set in the order in which these elements were added
CopyOnWriteArraySet#equals(Object):::Compares the specified object with this set for equality
CopyOnWriteArraySet#spliterator():::Returns a Spliterator over the elements in this set in the order in which these elements were added
CountDownLatch#await():::Causes the current thread to wait until the latch has counted down to zero, unless the thread is Thread#interrupt interrupted
CountDownLatch#await(long, TimeUnit):::Causes the current thread to wait until the latch has counted down to zero, unless the thread is Thread#interrupt interrupted, or the specified waiting time elapses
CountDownLatch#countDown():::Decrements the count of the latch, releasing all waiting threads if the count reaches zero
CountDownLatch#getCount():::Returns the current count
CountDownLatch#toString():::Returns a string identifying this latch, as well as its state
CountedCompleter#compute():::The main computation performed by this task.
CountedCompleter#onCompletion(CountedCompleter):::Performs an action when method #tryComplete is invoked and the pending count is zero, or when the unconditional method #complete is invoked
CountedCompleter#onExceptionalCompletion(Throwable, CountedCompleter):::Performs an action when method #completeExceptionally(Throwable) is invoked or method #compute throws an exception, and this task has not already otherwise completed normally
CountedCompleter#getCompleter():::Returns the completer established in this task's constructor, or null if none.
CountedCompleter#getPendingCount():::Returns the current pending count.
CountedCompleter#setPendingCount(int):::Sets the pending count to the given value.
CountedCompleter#addToPendingCount(int):::Adds (atomically) the given value to the pending count.
CountedCompleter#compareAndSetPendingCount(int, int):::Sets (atomically) the pending count to the given count only if it currently holds the given expected value.
CountedCompleter#decrementPendingCountUnlessZero():::If the pending count is nonzero, (atomically) decrements it.
CountedCompleter#getRoot():::Returns the root of the current computation; i.e., this task if it has no completer, else its completer's root.
CountedCompleter#tryComplete():::If the pending count is nonzero, decrements the count; otherwise invokes #onCompletion(CountedCompleter) and then similarly tries to complete this task's completer, if one exists, else marks this task as complete.
CountedCompleter#propagateCompletion():::Equivalent to #tryComplete but does not invoke #onCompletion(CountedCompleter) along the completion path: If the pending count is nonzero, decrements the count; otherwise, similarly tries to complete this task's completer, if one exists, else marks this task as complete
CountedCompleter#complete(T):::Regardless of pending count, invokes #onCompletion(CountedCompleter), marks this task as complete and further triggers #tryComplete on this task's completer, if one exists
CountedCompleter#firstComplete():::If this task's pending count is zero, returns this task; otherwise decrements its pending count and returns null
CountedCompleter#nextComplete():::If this task does not have a completer, invokes ForkJoinTask#quietlyComplete and returns null
CountedCompleter#quietlyCompleteRoot():::Equivalent to getRoot().quietlyComplete().
CountedCompleter#helpComplete(int):::If this task has not completed, attempts to process at most the given number of other unprocessed tasks for which this task is on the completion path, if any are known to exist.
CountedCompleter#internalPropagateException(Throwable):::Supports ForkJoinTask exception propagation.
CountedCompleter#exec():::Implements execution conventions for CountedCompleters.
CountedCompleter#getRawResult():::Returns the result of the computation
CountedCompleter#setRawResult(T):::A method that result-bearing CountedCompleters may optionally use to help maintain result data
CyclicBarrier#getParties():::Returns the number of parties required to trip this barrier.
CyclicBarrier#await():::Waits until all #getParties parties have invoked await on this barrier
CyclicBarrier#await(long, TimeUnit):::Waits until all #getParties parties have invoked await on this barrier, or the specified waiting time elapses
CyclicBarrier#isBroken():::Queries if this barrier is in a broken state.
CyclicBarrier#reset():::Resets the barrier to its initial state
CyclicBarrier#getNumberWaiting():::Returns the number of parties currently waiting at the barrier
Delayed#getDelay(TimeUnit):::Returns the remaining delay associated with this object, in the given time unit.
DelayQueue#add(E):::Inserts the specified element into this delay queue.
DelayQueue#offer(E):::Inserts the specified element into this delay queue.
DelayQueue#put(E):::Inserts the specified element into this delay queue
DelayQueue#offer(E, long, TimeUnit):::Inserts the specified element into this delay queue
DelayQueue#poll():::Retrieves and removes the head of this queue, or returns null if this queue has no elements with an expired delay.
DelayQueue#take():::Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue.
DelayQueue#poll(long, TimeUnit):::Retrieves and removes the head of this queue, waiting if necessary until an element with an expired delay is available on this queue, or the specified wait time expires.
DelayQueue#peek():::Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty
DelayQueue#clear():::Atomically removes all of the elements from this delay queue
DelayQueue#remainingCapacity():::Always returns Integer.MAX_VALUE because a DelayQueue is not capacity constrained.
DelayQueue#toArray():::Returns an array containing all of the elements in this queue
DelayQueue#toArray(T[]):::Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
DelayQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present, whether or not it has expired.
DelayQueue#removeEQ(Object):::Identity-based version for use in Itr.remove.
DelayQueue#iterator():::Returns an iterator over all the elements (both expired and unexpired) in this queue
Exchanger#exchange(V):::Waits for another thread to arrive at this exchange point (unless the current thread is Thread#interrupt interrupted), and then transfers the given object to it, receiving its object in return
Exchanger#exchange(V, long, TimeUnit):::Waits for another thread to arrive at this exchange point (unless the current thread is Thread#interrupt interrupted or the specified waiting time elapses), and then transfers the given object to it, receiving its object in return
Executor#execute(Runnable):::Executes the given command at some time in the future
Executors#newFixedThreadPool(int):::Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue
Executors#newWorkStealingPool(int):::Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention
Executors#newWorkStealingPool():::Creates a work-stealing thread pool using the number of Runtime#availableProcessors available processors as its target parallelism level.
Executors#newFixedThreadPool(int, ThreadFactory):::Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed
Executors#newSingleThreadExecutor():::Creates an Executor that uses a single worker thread operating off an unbounded queue
Executors#newSingleThreadExecutor(ThreadFactory):::Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed
Executors#newCachedThreadPool():::Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available
Executors#newCachedThreadPool(ThreadFactory):::Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed.
Executors#newSingleThreadScheduledExecutor():::Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically
Executors#newSingleThreadScheduledExecutor(ThreadFactory):::Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically
Executors#newScheduledThreadPool(int):::Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.
Executors#newScheduledThreadPool(int, ThreadFactory):::Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.
Executors#unconfigurableExecutorService(ExecutorService):::Returns an object that delegates all defined ExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts
Executors#unconfigurableScheduledExecutorService(ScheduledExecutorService):::Returns an object that delegates all defined ScheduledExecutorService methods to the given executor, but not any other methods that might otherwise be accessible using casts
Executors#defaultThreadFactory():::Returns a default thread factory used to create new threads
Executors#privilegedThreadFactory():::Returns a thread factory used to create new threads that have the same permissions as the current thread
Executors#callable(Runnable, T):::Returns a Callable object that, when called, runs the given task and returns the given result
Executors#callable(Runnable):::Returns a Callable object that, when called, runs the given task and returns null.
Executors#callable(PrivilegedAction):::Returns a Callable object that, when called, runs the given privileged action and returns its result.
Executors#callable(PrivilegedExceptionAction):::Returns a Callable object that, when called, runs the given privileged exception action and returns its result.
Executors#privilegedCallable(Callable):::Returns a Callable object that will, when called, execute the given callable under the current access control context
Executors#privilegedCallableUsingCurrentClassLoader(Callable):::Returns a Callable object that will, when called, execute the given callable under the current access control context, with the current context class loader as the context class loader
ExecutorService#shutdown():::Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
ExecutorService#shutdownNow():::Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution
ExecutorService#isShutdown():::Returns true if this executor has been shut down.
ExecutorService#isTerminated():::Returns true if all tasks have completed following shut down
ExecutorService#awaitTermination(long, TimeUnit):::Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.
ExecutorService#submit(Callable):::Submits a value-returning task for execution and returns a Future representing the pending results of the task
ExecutorService#submit(Runnable, T):::Submits a Runnable task for execution and returns a Future representing that task
ExecutorService#submit(Runnable):::Submits a Runnable task for execution and returns a Future representing that task
ExecutorService#invokeAll(Collection>):::Executes the given tasks, returning a list of Futures holding their status and results when all complete
ExecutorService#invokeAll(Collection>, long, TimeUnit):::Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first
ExecutorService#invokeAny(Collection>):::Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do
ExecutorService#invokeAny(Collection>, long, TimeUnit):::Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses
Flow.Publisher#subscribe(Subscriber):::Adds the given Subscriber if possible
Flow.Subscriber#onSubscribe(Subscription):::Method invoked prior to invoking any other Subscriber methods for the given Subscription
Flow.Subscriber#onNext(T):::Method invoked with a Subscription's next item
Flow.Subscriber#onError(Throwable):::Method invoked upon an unrecoverable error encountered by a Publisher or Subscription, after which no other Subscriber methods are invoked by the Subscription
Flow.Subscriber#onComplete():::Method invoked when it is known that no additional Subscriber method invocations will occur for a Subscription that is not already terminated by error, after which no other Subscriber methods are invoked by the Subscription
Flow.Subscription#request(long):::Adds the given number n of items to the current unfulfilled demand for this subscription
Flow.Subscription#cancel():::Causes the Subscriber to (eventually) stop receiving messages
Flow#defaultBufferSize():::Returns a default value for Publisher or Subscriber buffering, that may be used in the absence of other constraints.
ForkJoinPool.ForkJoinWorkerThreadFactory#newThread(ForkJoinPool):::Returns a new worker thread operating in the given pool
ForkJoinPool.WorkQueue#tryLockPhase():::Tries to lock shared queue by CASing phase field.
ForkJoinPool.WorkQueue#getPoolIndex():::Returns an exportable index (used by ForkJoinWorkerThread).
ForkJoinPool.WorkQueue#queueSize():::Returns the approximate number of tasks in the queue.
ForkJoinPool.WorkQueue#isEmpty():::Provides a more accurate estimate of whether this queue has any tasks than does queueSize, by checking whether a near-empty queue has at least one unclaimed task.
ForkJoinPool.WorkQueue#push(ForkJoinTask):::Pushes a task
ForkJoinPool.WorkQueue#lockedPush(ForkJoinTask):::Version of push for shared queues
ForkJoinPool.WorkQueue#growArray(boolean):::Doubles the capacity of array
ForkJoinPool.WorkQueue#poll():::Takes next task, if one exists, in FIFO order.
ForkJoinPool.WorkQueue#nextLocalTask():::Takes next task, if one exists, in order specified by mode.
ForkJoinPool.WorkQueue#peek():::Returns next task, if one exists, in order specified by mode.
ForkJoinPool.WorkQueue#tryUnpush(ForkJoinTask):::Pops the given task only if it is at the current top.
ForkJoinPool.WorkQueue#tryLockedUnpush(ForkJoinTask):::Shared version of tryUnpush.
ForkJoinPool.WorkQueue#cancelAll():::Removes and cancels all known tasks, ignoring any exceptions.
ForkJoinPool.WorkQueue#topLevelExec(ForkJoinTask, WorkQueue, int):::Runs the given (stolen) task if nonnull, as well as remaining local tasks and others available from the given queue, up to bound n (to avoid infinite unfairness).
ForkJoinPool.WorkQueue#tryRemoveAndExec(ForkJoinTask):::If present, removes task from queue and executes it.
ForkJoinPool.WorkQueue#helpCC(CountedCompleter, int, boolean):::Tries to pop and run tasks within the target's computation until done, not found, or limit exceeded.
ForkJoinPool.WorkQueue#helpAsyncBlocker(ManagedBlocker):::Tries to poll and run AsynchronousCompletionTasks until none found or blocker is released
ForkJoinPool.WorkQueue#isApparentlyUnblocked():::Returns true if owned and not known to be blocked.
ForkJoinPool#registerWorker(ForkJoinWorkerThread):::Callback from ForkJoinWorkerThread constructor to establish and record its WorkQueue.
ForkJoinPool#deregisterWorker(ForkJoinWorkerThread, Throwable):::Final callback from terminating worker, as well as upon failure to construct or start a worker
ForkJoinPool#signalWork():::Tries to create or release a worker if too few are running.
ForkJoinPool#runWorker(WorkQueue):::Top-level runloop for workers, called by ForkJoinWorkerThread.run
ForkJoinPool#awaitJoin(WorkQueue, ForkJoinTask, long):::Helps and/or blocks until the given task is done or timeout
ForkJoinPool#helpQuiescePool(WorkQueue):::Runs tasks until isQuiescent()
ForkJoinPool#nextTaskFor(WorkQueue):::Gets and removes a local or stolen task for the given worker.
ForkJoinPool#externalPush(ForkJoinTask):::Adds the given task to a submission queue at submitter's current queue, creating one if null or contended.
ForkJoinPool#commonSubmitterQueue():::Returns common pool queue for an external thread.
ForkJoinPool#tryExternalUnpush(ForkJoinTask):::Performs tryUnpush for an external submitter.
ForkJoinPool#externalHelpComplete(CountedCompleter, int):::Performs helpComplete for an external submitter.
ForkJoinPool#helpComplete(WorkQueue, CountedCompleter, int):::Tries to steal and run tasks within the target's computation
ForkJoinPool#getSurplusQueuedTaskCount():::Returns a cheap heuristic guide for task partitioning when programmers, frameworks, tools, or languages have little or no idea about task granularity
ForkJoinPool#commonPool():::Returns the common pool instance
ForkJoinPool#invoke(ForkJoinTask):::Performs the given task, returning its result upon completion
ForkJoinPool#execute(ForkJoinTask):::Arranges for (asynchronous) execution of the given task.
ForkJoinPool#submit(ForkJoinTask):::Submits a ForkJoinTask for execution.
ForkJoinPool#getFactory():::Returns the factory used for constructing new workers.
ForkJoinPool#getUncaughtExceptionHandler():::Returns the handler for internal worker threads that terminate due to unrecoverable errors encountered while executing tasks.
ForkJoinPool#getParallelism():::Returns the targeted parallelism level of this pool.
ForkJoinPool#getCommonPoolParallelism():::Returns the targeted parallelism level of the common pool.
ForkJoinPool#getPoolSize():::Returns the number of worker threads that have started but not yet terminated
ForkJoinPool#getAsyncMode():::Returns true if this pool uses local first-in-first-out scheduling mode for forked tasks that are never joined.
ForkJoinPool#getRunningThreadCount():::Returns an estimate of the number of worker threads that are not blocked waiting to join tasks or for other managed synchronization
ForkJoinPool#getActiveThreadCount():::Returns an estimate of the number of threads that are currently stealing or executing tasks
ForkJoinPool#isQuiescent():::Returns true if all worker threads are currently idle
ForkJoinPool#getStealCount():::Returns an estimate of the total number of tasks stolen from one thread's work queue by another
ForkJoinPool#getQueuedTaskCount():::Returns an estimate of the total number of tasks currently held in queues by worker threads (but not including tasks submitted to the pool that have not begun executing)
ForkJoinPool#getQueuedSubmissionCount():::Returns an estimate of the number of tasks submitted to this pool that have not yet begun executing
ForkJoinPool#hasQueuedSubmissions():::Returns true if there are any tasks submitted to this pool that have not yet begun executing.
ForkJoinPool#pollSubmission():::Removes and returns the next unexecuted submission if one is available
ForkJoinPool#drainTasksTo(Collection>):::Removes all available unexecuted submitted and forked tasks from scheduling queues and adds them to the given collection, without altering their execution status
ForkJoinPool#toString():::Returns a string identifying this pool, as well as its state, including indications of run state, parallelism level, and worker and task counts.
ForkJoinPool#shutdown():::Possibly initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
ForkJoinPool#shutdownNow():::Possibly attempts to cancel and/or stop all tasks, and reject all subsequently submitted tasks
ForkJoinPool#isTerminated():::Returns true if all tasks have completed following shut down.
ForkJoinPool#isTerminating():::Returns true if the process of termination has commenced but not yet completed
ForkJoinPool#isShutdown():::Returns true if this pool has been shut down.
ForkJoinPool#awaitTermination(long, TimeUnit):::Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first
ForkJoinPool#awaitQuiescence(long, TimeUnit):::If called by a ForkJoinTask operating in this pool, equivalent in effect to ForkJoinTask#helpQuiesce
ForkJoinPool#quiesceCommonPool():::Waits and/or attempts to assist performing tasks indefinitely until the #commonPool() #isQuiescent.
ForkJoinPool.ManagedBlocker#block():::Possibly blocks the current thread, for example waiting for a lock or condition.
ForkJoinPool.ManagedBlocker#isReleasable():::Returns true if blocking is unnecessary.
ForkJoinPool#managedBlock(ManagedBlocker):::Runs the given possibly blocking task
ForkJoinPool#helpAsyncBlocker(Executor, ManagedBlocker):::If the given executor is a ForkJoinPool, poll and execute AsynchronousCompletionTasks from worker's queue until none are available or blocker is released.
ForkJoinTask#doExec():::Primary execution method for stolen tasks
ForkJoinTask#internalWait(long):::If not done, sets SIGNAL status and performs Object.wait(timeout)
ForkJoinTask#recordExceptionalCompletion(Throwable):::Records exception and sets status.
ForkJoinTask#internalPropagateException(Throwable):::Hook for exception propagation support for tasks with completers.
ForkJoinTask#cancelIgnoringExceptions(ForkJoinTask):::Cancels, ignoring any exceptions thrown by cancel
ForkJoinTask#helpExpungeStaleExceptions():::If lock is available, polls stale refs and removes them
ForkJoinTask#rethrow(Throwable):::A version of "sneaky throw" to relay exceptions.
ForkJoinTask#uncheckedThrow(Throwable):::The sneaky part of sneaky throw, relying on generics limitations to evade compiler complaints about rethrowing unchecked exceptions.
ForkJoinTask#fork():::Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the ForkJoinPool#commonPool() if not #inForkJoinPool
ForkJoinTask#join():::Returns the result of the computation when it #isDone is done
ForkJoinTask#invoke():::Commences performing this task, awaits its completion if necessary, and returns its result, or throws an (unchecked) RuntimeException or Error if the underlying computation did so.
ForkJoinTask#invokeAll(ForkJoinTask, ForkJoinTask):::Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown
ForkJoinTask#invokeAll(ForkJoinTask...):::Forks the given tasks, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown
ForkJoinTask#invokeAll(Collection):::Forks all tasks in the specified collection, returning when isDone holds for each task or an (unchecked) exception is encountered, in which case the exception is rethrown
ForkJoinTask#cancel(boolean):::Attempts to cancel execution of this task
ForkJoinTask#isCompletedAbnormally():::Returns true if this task threw an exception or was cancelled.
ForkJoinTask#isCompletedNormally():::Returns true if this task completed without throwing an exception and was not cancelled.
ForkJoinTask#getException():::Returns the exception thrown by the base computation, or a CancellationException if cancelled, or null if none or if the method has not yet completed.
ForkJoinTask#completeExceptionally(Throwable):::Completes this task abnormally, and if not already aborted or cancelled, causes it to throw the given exception upon join and related operations
ForkJoinTask#complete(V):::Completes this task, and if not already aborted or cancelled, returning the given value as the result of subsequent invocations of join and related operations
ForkJoinTask#quietlyComplete():::Completes this task normally without setting a value
ForkJoinTask#get():::Waits if necessary for the computation to complete, and then retrieves its result.
ForkJoinTask#get(long, TimeUnit):::Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.
ForkJoinTask#quietlyJoin():::Joins this task, without returning its result or throwing its exception
ForkJoinTask#quietlyInvoke():::Commences performing this task and awaits its completion if necessary, without returning its result or throwing its exception.
ForkJoinTask#helpQuiesce():::Possibly executes tasks until the pool hosting the current task ForkJoinPool#isQuiescent is quiescent
ForkJoinTask#reinitialize():::Resets the internal bookkeeping state of this task, allowing a subsequent fork
ForkJoinTask#getPool():::Returns the pool hosting the current thread, or null if the current thread is executing outside of any ForkJoinPool
ForkJoinTask#inForkJoinPool():::Returns true if the current thread is a ForkJoinWorkerThread executing as a ForkJoinPool computation.
ForkJoinTask#tryUnfork():::Tries to unschedule this task for execution
ForkJoinTask#getQueuedTaskCount():::Returns an estimate of the number of tasks that have been forked by the current worker thread but not yet executed
ForkJoinTask#getSurplusQueuedTaskCount():::Returns an estimate of how many more locally queued tasks are held by the current worker thread than there are other worker threads that might steal them, or zero if this thread is not operating in a ForkJoinPool
ForkJoinTask#getRawResult():::Returns the result that would be returned by #join, even if this task completed abnormally, or null if this task is not known to have been completed
ForkJoinTask#setRawResult(V):::Forces the given value to be returned as a result
ForkJoinTask#exec():::Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally
ForkJoinTask#peekNextLocalTask():::Returns, but does not unschedule or execute, a task queued by the current thread but not yet executed, if one is immediately available
ForkJoinTask#pollNextLocalTask():::Unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if the current thread is operating in a ForkJoinPool
ForkJoinTask#pollTask():::If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, the next task queued by the current thread but not yet executed, if one is available, or if not available, a task that was forked by some other thread, if available
ForkJoinTask#pollSubmission():::If the current thread is operating in a ForkJoinPool, unschedules and returns, without executing, a task externally submitted to the pool, if one is available
ForkJoinTask#getForkJoinTaskTag():::Returns the tag for this task.
ForkJoinTask#setForkJoinTaskTag(short):::Atomically sets the tag value for this task and returns the old value.
ForkJoinTask#compareAndSetForkJoinTaskTag(short, short):::Atomically conditionally sets the tag value for this task
ForkJoinTask#adapt(Runnable):::Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns a null result upon #join.
ForkJoinTask#adapt(Runnable, T):::Returns a new ForkJoinTask that performs the run method of the given Runnable as its action, and returns the given result upon #join.
ForkJoinTask#adapt(Callable):::Returns a new ForkJoinTask that performs the call method of the given Callable as its action, and returns its result upon #join, translating any checked exceptions encountered into RuntimeException.
ForkJoinWorkerThread#getPool():::Returns the pool hosting this thread.
ForkJoinWorkerThread#getPoolIndex():::Returns the unique index number of this thread in its pool
ForkJoinWorkerThread#onStart():::Initializes internal state after construction but before processing any tasks
ForkJoinWorkerThread#onTermination(Throwable):::Performs cleanup associated with termination of this worker thread
ForkJoinWorkerThread#run():::This method is required to be public, but should never be called explicitly
ForkJoinWorkerThread#afterTopLevelExec():::Non-public hook method for InnocuousForkJoinWorkerThread.
Future#cancel(boolean):::Attempts to cancel execution of this task
Future#isCancelled():::Returns true if this task was cancelled before it completed normally.
Future#isDone():::Returns true if this task completed
Future#get():::Waits if necessary for the computation to complete, and then retrieves its result.
Future#get(long, TimeUnit):::Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.
FutureTask#done():::Protected method invoked when this task transitions to state isDone (whether normally or via cancellation)
FutureTask#set(V):::Sets the result of this future to the given value unless this future has already been set or has been cancelled
FutureTask#setException(Throwable):::Causes this future to report an ExecutionException with the given throwable as its cause, unless this future has already been set or has been cancelled
FutureTask#runAndReset():::Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled
FutureTask#toString():::Returns a string representation of this FutureTask.
Helpers#collectionToString(Collection):::An implementation of Collection.toString() suitable for classes with locks
Helpers#toString(Object[], int, int):::Like Arrays.toString(), but caller guarantees that size > 0, each element with index 0 <= i < size is a non-null String, and charLength is the sum of the lengths of the input Strings.
Helpers#mapEntryToString(Object, Object):::Optimized form of: key + "=" + val
LinkedBlockingDeque#unlink(Node):::Unlinks x.
LinkedBlockingDeque#add(E):::Inserts the specified element at the end of this deque unless it would violate capacity restrictions
LinkedBlockingDeque#remove():::Retrieves and removes the head of the queue represented by this deque
LinkedBlockingDeque#element():::Retrieves, but does not remove, the head of the queue represented by this deque
LinkedBlockingDeque#remainingCapacity():::Returns the number of additional elements that this deque can ideally (in the absence of memory or resource constraints) accept without blocking
LinkedBlockingDeque#remove(Object):::Removes the first occurrence of the specified element from this deque
LinkedBlockingDeque#size():::Returns the number of elements in this deque.
LinkedBlockingDeque#contains(Object):::Returns true if this deque contains the specified element
LinkedBlockingDeque#addAll(Collection):::Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator
LinkedBlockingDeque#toArray():::Returns an array containing all of the elements in this deque, in proper sequence (from first to last element)
LinkedBlockingDeque#toArray(T[]):::Returns an array containing all of the elements in this deque, in proper sequence; the runtime type of the returned array is that of the specified array
LinkedBlockingDeque#clear():::Atomically removes all of the elements from this deque
LinkedBlockingDeque#succ(Node):::Used for any element traversal that is not entirely under lock
LinkedBlockingDeque#iterator():::Returns an iterator over the elements in this deque in proper sequence
LinkedBlockingDeque#descendingIterator():::Returns an iterator over the elements in this deque in reverse sequential order
LinkedBlockingDeque#spliterator():::Returns a Spliterator over the elements in this deque
LinkedBlockingDeque#forEachFrom(Consumer, Node):::Runs action on each element found during a traversal starting at p
LinkedBlockingQueue#fullyLock():::Locks to prevent both puts and takes.
LinkedBlockingQueue#fullyUnlock():::Unlocks to allow both puts and takes.
LinkedBlockingQueue#size():::Returns the number of elements in this queue.
LinkedBlockingQueue#remainingCapacity():::Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking
LinkedBlockingQueue#put(E):::Inserts the specified element at the tail of this queue, waiting if necessary for space to become available.
LinkedBlockingQueue#offer(E, long, TimeUnit):::Inserts the specified element at the tail of this queue, waiting if necessary up to the specified wait time for space to become available.
LinkedBlockingQueue#offer(E):::Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity, returning true upon success and false if this queue is full
LinkedBlockingQueue#unlink(Node, Node):::Unlinks interior Node p with predecessor pred.
LinkedBlockingQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
LinkedBlockingQueue#contains(Object):::Returns true if this queue contains the specified element
LinkedBlockingQueue#toArray():::Returns an array containing all of the elements in this queue, in proper sequence
LinkedBlockingQueue#toArray(T[]):::Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
LinkedBlockingQueue#clear():::Atomically removes all of the elements from this queue
LinkedBlockingQueue#succ(Node):::Used for any element traversal that is not entirely under lock
LinkedBlockingQueue#iterator():::Returns an iterator over the elements in this queue in proper sequence
LinkedBlockingQueue#spliterator():::Returns a Spliterator over the elements in this queue
LinkedBlockingQueue#forEachFrom(Consumer, Node):::Runs action on each element found during a traversal starting at p
LinkedBlockingQueue#findPred(Node, Node):::Returns the predecessor of live node p, given a node that was once a live ancestor of p (or head); allows unlinking of p.
LinkedTransferQueue.Node#selfLink():::Links node to itself to avoid garbage retention
LinkedTransferQueue.Node#forgetContents():::Sets item (of a request node) to self and waiter to null, to avoid garbage retention after matching or cancelling
LinkedTransferQueue.Node#isMatched():::Returns true if this node has been matched, including the case of artificial matches due to cancellation.
LinkedTransferQueue.Node#tryMatch(Object, Object):::Tries to CAS-match this node; if successful, wakes waiter.
LinkedTransferQueue.Node#cannotPrecede(boolean):::Returns true if a node with the given mode cannot be appended to this node because this node is unmatched and has opposite data mode.
LinkedTransferQueue#firstDataNode():::Returns the first unmatched data node, or null if none
LinkedTransferQueue#toArray():::Returns an array containing all of the elements in this queue, in proper sequence
LinkedTransferQueue#toArray(T[]):::Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array
LinkedTransferQueue#spliterator():::Returns a Spliterator over the elements in this queue
LinkedTransferQueue#unsplice(Node, Node):::Unsplices (now or later) the given deleted/cancelled node with the given predecessor.
LinkedTransferQueue#put(E):::Inserts the specified element at the tail of this queue
LinkedTransferQueue#offer(E, long, TimeUnit):::Inserts the specified element at the tail of this queue
LinkedTransferQueue#offer(E):::Inserts the specified element at the tail of this queue
LinkedTransferQueue#add(E):::Inserts the specified element at the tail of this queue
LinkedTransferQueue#tryTransfer(E):::Transfers the element to a waiting consumer immediately, if possible
LinkedTransferQueue#transfer(E):::Transfers the element to a consumer, waiting if necessary to do so
LinkedTransferQueue#tryTransfer(E, long, TimeUnit):::Transfers the element to a consumer if it is possible to do so before the timeout elapses
LinkedTransferQueue#iterator():::Returns an iterator over the elements in this queue in proper sequence
LinkedTransferQueue#isEmpty():::Returns true if this queue contains no elements.
LinkedTransferQueue#size():::Returns the number of elements in this queue
LinkedTransferQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
LinkedTransferQueue#contains(Object):::Returns true if this queue contains the specified element
LinkedTransferQueue#remainingCapacity():::Always returns Integer.MAX_VALUE because a LinkedTransferQueue is not capacity constrained.
LinkedTransferQueue#forEachFrom(Consumer, Node):::Runs action on each element found during a traversal starting at p
Phaser#register():::Adds a new unarrived party to this phaser
Phaser#bulkRegister(int):::Adds the given number of new unarrived parties to this phaser
Phaser#arrive():::Arrives at this phaser, without waiting for others to arrive
Phaser#arriveAndDeregister():::Arrives at this phaser and deregisters from it without waiting for others to arrive
Phaser#arriveAndAwaitAdvance():::Arrives at this phaser and awaits others
Phaser#awaitAdvance(int):::Awaits the phase of this phaser to advance from the given phase value, returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.
Phaser#awaitAdvanceInterruptibly(int):::Awaits the phase of this phaser to advance from the given phase value, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.
Phaser#awaitAdvanceInterruptibly(int, long, TimeUnit):::Awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.
Phaser#forceTermination():::Forces this phaser to enter termination state
Phaser#getPhase():::Returns the current phase number
Phaser#getRegisteredParties():::Returns the number of parties registered at this phaser.
Phaser#getArrivedParties():::Returns the number of registered parties that have arrived at the current phase of this phaser
Phaser#getUnarrivedParties():::Returns the number of registered parties that have not yet arrived at the current phase of this phaser
Phaser#getParent():::Returns the parent of this phaser, or null if none.
Phaser#getRoot():::Returns the root ancestor of this phaser, which is the same as this phaser if it has no parent.
Phaser#isTerminated():::Returns true if this phaser has been terminated.
Phaser#onAdvance(int, int):::Overridable method to perform an action upon impending phase advance, and to control termination
Phaser#toString():::Returns a string identifying this phaser, as well as its state
PriorityBlockingQueue#add(E):::Inserts the specified element into this priority queue.
PriorityBlockingQueue#offer(E):::Inserts the specified element into this priority queue
PriorityBlockingQueue#put(E):::Inserts the specified element into this priority queue
PriorityBlockingQueue#offer(E, long, TimeUnit):::Inserts the specified element into this priority queue
PriorityBlockingQueue#comparator():::Returns the comparator used to order the elements in this queue, or null if this queue uses the Comparable natural ordering of its elements.
PriorityBlockingQueue#remainingCapacity():::Always returns Integer.MAX_VALUE because a PriorityBlockingQueue is not capacity constrained.
PriorityBlockingQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
PriorityBlockingQueue#removeEq(Object):::Identity-based version for use in Itr.remove.
PriorityBlockingQueue#contains(Object):::Returns true if this queue contains the specified element
PriorityBlockingQueue#clear():::Atomically removes all of the elements from this queue
PriorityBlockingQueue#toArray():::Returns an array containing all of the elements in this queue
PriorityBlockingQueue#toArray(T[]):::Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
PriorityBlockingQueue#iterator():::Returns an iterator over the elements in this queue
PriorityBlockingQueue#spliterator():::Returns a Spliterator over the elements in this queue
RecursiveAction#compute():::The main computation performed by this task.
RecursiveAction#getRawResult():::Always returns null.
RecursiveAction#setRawResult(Void):::Requires null completion value.
RecursiveAction#exec():::Implements execution conventions for RecursiveActions.
RecursiveTask#compute():::The main computation performed by this task.
RecursiveTask#exec():::Implements execution conventions for RecursiveTask.
RejectedExecutionHandler#rejectedExecution(Runnable, ThreadPoolExecutor):::Method that may be invoked by a ThreadPoolExecutor when ThreadPoolExecutor#execute execute cannot accept a task
RunnableFuture#run():::Sets this Future to the result of its computation unless it has been cancelled.
RunnableScheduledFuture#isPeriodic():::Returns true if this task is periodic
ScheduledExecutorService#schedule(Runnable, long, TimeUnit):::Submits a one-shot task that becomes enabled after the given delay.
ScheduledExecutorService#schedule(Callable, long, TimeUnit):::Submits a value-returning one-shot task that becomes enabled after the given delay.
ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long, TimeUnit):::Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on
ScheduledExecutorService#scheduleWithFixedDelay(Runnable, long, long, TimeUnit):::Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next
ScheduledThreadPoolExecutor#canRunInCurrentRunState(RunnableScheduledFuture):::Returns true if can run a task given current run state and run-after-shutdown parameters.
ScheduledThreadPoolExecutor#reExecutePeriodic(RunnableScheduledFuture):::Requeues a periodic task unless current run state precludes it
ScheduledThreadPoolExecutor#onShutdown():::Cancels and clears the queue of all tasks that should not be run due to shutdown policy
ScheduledThreadPoolExecutor#decorateTask(Runnable, RunnableScheduledFuture):::Modifies or replaces the task used to execute a runnable
ScheduledThreadPoolExecutor#decorateTask(Callable, RunnableScheduledFuture):::Modifies or replaces the task used to execute a callable
ScheduledThreadPoolExecutor#triggerTime(long):::Returns the nanoTime-based trigger time of a delayed action.
ScheduledThreadPoolExecutor#scheduleAtFixedRate(Runnable, long, long, TimeUnit):::Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is, executions will commence after initialDelay, then initialDelay + period, then initialDelay + 2 * period, and so on
ScheduledThreadPoolExecutor#scheduleWithFixedDelay(Runnable, long, long, TimeUnit):::Submits a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next
ScheduledThreadPoolExecutor#execute(Runnable):::Executes command with zero required delay
ScheduledThreadPoolExecutor#setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean):::Sets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown
ScheduledThreadPoolExecutor#getContinueExistingPeriodicTasksAfterShutdownPolicy():::Gets the policy on whether to continue executing existing periodic tasks even when this executor has been shutdown
ScheduledThreadPoolExecutor#setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean):::Sets the policy on whether to execute existing delayed tasks even when this executor has been shutdown
ScheduledThreadPoolExecutor#getExecuteExistingDelayedTasksAfterShutdownPolicy():::Gets the policy on whether to execute existing delayed tasks even when this executor has been shutdown
ScheduledThreadPoolExecutor#setRemoveOnCancelPolicy(boolean):::Sets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation
ScheduledThreadPoolExecutor#getRemoveOnCancelPolicy():::Gets the policy on whether cancelled tasks should be immediately removed from the work queue at time of cancellation
ScheduledThreadPoolExecutor#shutdown():::Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
ScheduledThreadPoolExecutor#shutdownNow():::Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution
ScheduledThreadPoolExecutor#getQueue():::Returns the task queue used by this executor
Semaphore#acquire():::Acquires a permit from this semaphore, blocking until one is available, or the thread is Thread#interrupt interrupted
Semaphore#acquireUninterruptibly():::Acquires a permit from this semaphore, blocking until one is available
Semaphore#tryAcquire():::Acquires a permit from this semaphore, only if one is available at the time of invocation
Semaphore#tryAcquire(long, TimeUnit):::Acquires a permit from this semaphore, if one becomes available within the given waiting time and the current thread has not been Thread#interrupt interrupted
Semaphore#release():::Releases a permit, returning it to the semaphore
Semaphore#acquire(int):::Acquires the given number of permits from this semaphore, blocking until all are available, or the thread is Thread#interrupt interrupted
Semaphore#acquireUninterruptibly(int):::Acquires the given number of permits from this semaphore, blocking until all are available
Semaphore#tryAcquire(int):::Acquires the given number of permits from this semaphore, only if all are available at the time of invocation
Semaphore#tryAcquire(int, long, TimeUnit):::Acquires the given number of permits from this semaphore, if all become available within the given waiting time and the current thread has not been Thread#interrupt interrupted
Semaphore#release(int):::Releases the given number of permits, returning them to the semaphore
Semaphore#availablePermits():::Returns the current number of permits available in this semaphore
Semaphore#drainPermits():::Acquires and returns all permits that are immediately available, or if negative permits are available, releases them
Semaphore#reducePermits(int):::Shrinks the number of available permits by the indicated reduction
Semaphore#isFair():::Returns true if this semaphore has fairness set true.
Semaphore#hasQueuedThreads():::Queries whether any threads are waiting to acquire
Semaphore#getQueueLength():::Returns an estimate of the number of threads waiting to acquire
Semaphore#getQueuedThreads():::Returns a collection containing threads that may be waiting to acquire
Semaphore#toString():::Returns a string identifying this semaphore, as well as its state
SubmissionPublisher#roundCapacity(int):::Round capacity to power of 2, at most limit.
SubmissionPublisher#subscribe(Subscriber):::Adds the given Subscriber unless already subscribed
SubmissionPublisher#submit(T):::Publishes the given item to each current subscriber by asynchronously invoking its Flow.Subscriber#onNext(Object) onNext method, blocking uninterruptibly while resources for any subscriber are unavailable
SubmissionPublisher#offer(T, BiPredicate, ? super T>):::Publishes the given item, if possible, to each current subscriber by asynchronously invoking its Flow.Subscriber#onNext(Object) onNext method
SubmissionPublisher#offer(T, long, TimeUnit, BiPredicate, ? super T>):::Publishes the given item, if possible, to each current subscriber by asynchronously invoking its Flow.Subscriber#onNext(Object) onNext method, blocking while resources for any subscription are unavailable, up to the specified timeout or until the caller thread is interrupted, at which point the given handler (if non-null) is invoked, and if it returns true, retried once
SubmissionPublisher#close():::Unless already closed, issues Flow.Subscriber#onComplete() onComplete signals to current subscribers, and disallows subsequent attempts to publish
SubmissionPublisher#closeExceptionally(Throwable):::Unless already closed, issues Flow.Subscriber#onError(Throwable) onError signals to current subscribers with the given error, and disallows subsequent attempts to publish
SubmissionPublisher#isClosed():::Returns true if this publisher is not accepting submissions.
SubmissionPublisher#getClosedException():::Returns the exception associated with #closeExceptionally(Throwable) closeExceptionally, or null if not closed or if closed normally.
SubmissionPublisher#hasSubscribers():::Returns true if this publisher has any subscribers.
SubmissionPublisher#getNumberOfSubscribers():::Returns the number of current subscribers.
SubmissionPublisher#getExecutor():::Returns the Executor used for asynchronous delivery.
SubmissionPublisher#getMaxBufferCapacity():::Returns the maximum per-subscriber buffer capacity.
SubmissionPublisher#getSubscribers():::Returns a list of current subscribers for monitoring and tracking purposes, not for invoking Flow.Subscriber methods on the subscribers.
SubmissionPublisher#isSubscribed(Subscriber):::Returns true if the given Subscriber is currently subscribed.
SubmissionPublisher#estimateMinimumDemand():::Returns an estimate of the minimum number of items requested (via Flow.Subscription#request(long) request) but not yet produced, among all current subscribers.
SubmissionPublisher#estimateMaximumLag():::Returns an estimate of the maximum number of items produced but not yet consumed among all current subscribers.
SubmissionPublisher#consume(Consumer):::Processes all published items using the given Consumer function
SubmissionPublisher.BufferedSubscription#isClosed():::Returns true if closed (consumer task may still be running).
SubmissionPublisher.BufferedSubscription#estimateLag():::Returns estimated number of buffered items, or negative if closed.
SubmissionPublisher.BufferedSubscription#offer(T, boolean):::Tries to add item and start consumer task if necessary.
SubmissionPublisher.BufferedSubscription#growAndOffer(T, Object[], int):::Tries to expand buffer and add item, returning true on success
SubmissionPublisher.BufferedSubscription#retryOffer(T):::Version of offer for retries (no resize or bias)
SubmissionPublisher.BufferedSubscription#startOnOffer(int):::Tries to start consumer task after offer.
SubmissionPublisher.BufferedSubscription#tryStart():::Tries to start consumer task
SubmissionPublisher.BufferedSubscription#startOnSignal(int):::Sets the given control bits, starting task if not running or closed.
SubmissionPublisher.BufferedSubscription#consume():::Consumer loop, called from ConsumerTask, or indirectly when helping during submit.
SubmissionPublisher.BufferedSubscription#takeItems(Subscriber, long, int):::Consumes some items until unavailable or bound or error.
SubmissionPublisher.BufferedSubscription#handleOnNext(Subscriber, Throwable):::Processes exception in Subscriber.onNext.
SubmissionPublisher.BufferedSubscription#subscribeOnOpen(Subscriber):::Issues subscriber.onSubscribe if this is first signal.
SubmissionPublisher.BufferedSubscription#closeOnComplete(Subscriber):::Issues subscriber.onComplete unless already closed.
SubmissionPublisher.BufferedSubscription#closeOnError(Subscriber, Throwable):::Issues subscriber.onError, and unblocks producer if needed.
SubmissionPublisher.BufferedSubscription#signalWaiter():::Unblocks waiting producer.
SubmissionPublisher.BufferedSubscription#isReleasable():::Returns true if closed or space available
SubmissionPublisher.BufferedSubscription#awaitSpace(long):::Helps or blocks until timeout, closed, or space available.
SubmissionPublisher.BufferedSubscription#block():::Blocks until closed, space available or timeout
SynchronousQueue.Transferer#transfer(E, boolean, long):::Performs a put or take.
SynchronousQueue.TransferStack#isFulfilling(int):::Returns true if m has fulfilling bit set.
SynchronousQueue.TransferStack.SNode#tryMatch(SNode):::Tries to match node s to this node, if so, waking up thread
SynchronousQueue.TransferStack.SNode#tryCancel():::Tries to cancel a wait by matching node to itself.
SynchronousQueue.TransferStack#snode(SNode, Object, SNode, int):::Creates or resets fields of a node
SynchronousQueue.TransferStack#transfer(E, boolean, long):::Puts or takes an item.
SynchronousQueue.TransferStack#awaitFulfill(SNode, boolean, long):::Spins/blocks until node s is matched by a fulfill operation.
SynchronousQueue.TransferStack#shouldSpin(SNode):::Returns true if node s is at head or there is an active fulfiller.
SynchronousQueue.TransferStack#clean(SNode):::Unlinks s from the stack.
SynchronousQueue.TransferQueue.QNode#tryCancel(Object):::Tries to cancel by CAS'ing ref to this as item.
SynchronousQueue.TransferQueue.QNode#isOffList():::Returns true if this node is known to be off the queue because its next pointer has been forgotten due to an advanceHead operation.
SynchronousQueue.TransferQueue#advanceHead(QNode, QNode):::Tries to cas nh as new head; if successful, unlink old head's next node to avoid garbage retention.
SynchronousQueue.TransferQueue#advanceTail(QNode, QNode):::Tries to cas nt as new tail.
SynchronousQueue.TransferQueue#casCleanMe(QNode, QNode):::Tries to CAS cleanMe slot.
SynchronousQueue.TransferQueue#transfer(E, boolean, long):::Puts or takes an item.
SynchronousQueue.TransferQueue#awaitFulfill(QNode, E, boolean, long):::Spins/blocks until node s is fulfilled.
SynchronousQueue.TransferQueue#clean(QNode, QNode):::Gets rid of cancelled node s with original predecessor pred.
SynchronousQueue#put(E):::Adds the specified element to this queue, waiting if necessary for another thread to receive it.
SynchronousQueue#offer(E, long, TimeUnit):::Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it.
SynchronousQueue#offer(E):::Inserts the specified element into this queue, if another thread is waiting to receive it.
SynchronousQueue#take():::Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it.
SynchronousQueue#poll(long, TimeUnit):::Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it.
SynchronousQueue#poll():::Retrieves and removes the head of this queue, if another thread is currently making an element available.
SynchronousQueue#isEmpty():::Always returns true
SynchronousQueue#size():::Always returns zero
SynchronousQueue#remainingCapacity():::Always returns zero
SynchronousQueue#clear():::Does nothing
SynchronousQueue#contains(Object):::Always returns false
SynchronousQueue#remove(Object):::Always returns false
SynchronousQueue#containsAll(Collection):::Returns false unless the given collection is empty
SynchronousQueue#removeAll(Collection):::Always returns false
SynchronousQueue#retainAll(Collection):::Always returns false
SynchronousQueue#peek():::Always returns null
SynchronousQueue#iterator():::Returns an empty iterator in which hasNext always returns false.
SynchronousQueue#spliterator():::Returns an empty spliterator in which calls to Spliterator#trySplit() trySplit always return null.
SynchronousQueue#toArray():::Returns a zero-length array.
SynchronousQueue#toArray(T[]):::Sets the zeroth element of the specified array to null (if the array has non-zero length) and returns it.
SynchronousQueue#toString():::Always returns "[]".
ThreadFactory#newThread(Runnable):::Constructs a new Thread
ThreadLocalRandom#localInit():::Initialize Thread fields for the current thread
ThreadLocalRandom#current():::Returns the current thread's ThreadLocalRandom.
ThreadLocalRandom#setSeed(long):::Throws UnsupportedOperationException
ThreadLocalRandom#next(int):::Generates a pseudorandom number with the indicated number of low-order bits
ThreadLocalRandom#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators
ThreadLocalRandom#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators
ThreadLocalRandom#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.
ThreadLocalRandom#nextInt():::Returns a pseudorandom int value.
ThreadLocalRandom#nextInt(int):::Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextInt(int, int):::Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextLong():::Returns a pseudorandom long value.
ThreadLocalRandom#nextLong(long):::Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextLong(long, long):::Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextDouble():::Returns a pseudorandom double value between zero (inclusive) and one (exclusive).
ThreadLocalRandom#nextDouble(double):::Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).
ThreadLocalRandom#nextDouble(double, double):::Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
ThreadLocalRandom#nextBoolean():::Returns a pseudorandom boolean value.
ThreadLocalRandom#nextFloat():::Returns a pseudorandom float value between zero (inclusive) and one (exclusive).
ThreadLocalRandom#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values.
ThreadLocalRandom#ints():::Returns an effectively unlimited stream of pseudorandom int values.
ThreadLocalRandom#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values.
ThreadLocalRandom#longs():::Returns an effectively unlimited stream of pseudorandom long values.
ThreadLocalRandom#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive).
ThreadLocalRandom#doubles():::Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive).
ThreadLocalRandom#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive).
ThreadLocalRandom#getProbe():::Returns the probe value for the current thread without forcing initialization
ThreadLocalRandom#advanceProbe(int):::Pseudo-randomly advances and records the given probe value for the given thread.
ThreadLocalRandom#nextSecondarySeed():::Returns the pseudo-randomly initialized or updated secondary seed.
ThreadLocalRandom#eraseThreadLocals(Thread):::Erases ThreadLocals by nulling out Thread maps.
ThreadPoolExecutor#tryTerminate():::Transitions to TERMINATED state if either (SHUTDOWN and pool and queue empty) or (STOP and pool empty)
ThreadPoolExecutor#reject(Runnable):::Invokes the rejected execution handler for the given command
ThreadPoolExecutor#onShutdown():::Performs any further cleanup following run state transition on invocation of shutdown
ThreadPoolExecutor#runWorker(Worker):::Main worker run loop
ThreadPoolExecutor#execute(Runnable):::Executes the given task sometime in the future
ThreadPoolExecutor#shutdown():::Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted
ThreadPoolExecutor#shutdownNow():::Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution
ThreadPoolExecutor#isStopped():::Used by ScheduledThreadPoolExecutor.
ThreadPoolExecutor#isTerminating():::Returns true if this executor is in the process of terminating after #shutdown or #shutdownNow but has not completely terminated
ThreadPoolExecutor#setThreadFactory(ThreadFactory):::Sets the thread factory used to create new threads.
ThreadPoolExecutor#getThreadFactory():::Returns the thread factory used to create new threads.
ThreadPoolExecutor#setRejectedExecutionHandler(RejectedExecutionHandler):::Sets a new handler for unexecutable tasks.
ThreadPoolExecutor#getRejectedExecutionHandler():::Returns the current handler for unexecutable tasks.
ThreadPoolExecutor#setCorePoolSize(int):::Sets the core number of threads
ThreadPoolExecutor#getCorePoolSize():::Returns the core number of threads.
ThreadPoolExecutor#prestartCoreThread():::Starts a core thread, causing it to idly wait for work
ThreadPoolExecutor#ensurePrestart():::Same as prestartCoreThread except arranges that at least one thread is started even if corePoolSize is 0.
ThreadPoolExecutor#prestartAllCoreThreads():::Starts all core threads, causing them to idly wait for work
ThreadPoolExecutor#allowsCoreThreadTimeOut():::Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time, being replaced if needed when new tasks arrive
ThreadPoolExecutor#allowCoreThreadTimeOut(boolean):::Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keep-alive time, being replaced if needed when new tasks arrive
ThreadPoolExecutor#setMaximumPoolSize(int):::Sets the maximum allowed number of threads
ThreadPoolExecutor#getMaximumPoolSize():::Returns the maximum allowed number of threads.
ThreadPoolExecutor#setKeepAliveTime(long, TimeUnit):::Sets the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated
ThreadPoolExecutor#getKeepAliveTime(TimeUnit):::Returns the thread keep-alive time, which is the amount of time that threads may remain idle before being terminated
ThreadPoolExecutor#getQueue():::Returns the task queue used by this executor
ThreadPoolExecutor#remove(Runnable):::Removes this task from the executor's internal queue if it is present, thus causing it not to be run if it has not already started
ThreadPoolExecutor#purge():::Tries to remove from the work queue all Future tasks that have been cancelled
ThreadPoolExecutor#getPoolSize():::Returns the current number of threads in the pool.
ThreadPoolExecutor#getActiveCount():::Returns the approximate number of threads that are actively executing tasks.
ThreadPoolExecutor#getLargestPoolSize():::Returns the largest number of threads that have ever simultaneously been in the pool.
ThreadPoolExecutor#getTaskCount():::Returns the approximate total number of tasks that have ever been scheduled for execution
ThreadPoolExecutor#getCompletedTaskCount():::Returns the approximate total number of tasks that have completed execution
ThreadPoolExecutor#toString():::Returns a string identifying this pool, as well as its state, including indications of run state and estimated worker and task counts.
ThreadPoolExecutor#beforeExecute(Thread, Runnable):::Method invoked prior to executing the given Runnable in the given thread
ThreadPoolExecutor#afterExecute(Runnable, Throwable):::Method invoked upon completion of execution of the given Runnable
ThreadPoolExecutor#terminated():::Method invoked when the Executor has terminated
ThreadPoolExecutor.CallerRunsPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Executes task r in the caller's thread, unless the executor has been shut down, in which case the task is discarded.
ThreadPoolExecutor.AbortPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Always throws RejectedExecutionException.
ThreadPoolExecutor.DiscardPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Does nothing, which has the effect of discarding task r.
ThreadPoolExecutor.DiscardOldestPolicy#rejectedExecution(Runnable, ThreadPoolExecutor):::Obtains and ignores the next task that the executor would otherwise execute, if one is immediately available, and then retries execution of task r, unless the executor is shut down, in which case task r is instead discarded.
TransferQueue#tryTransfer(E):::Transfers the element to a waiting consumer immediately, if possible
TransferQueue#transfer(E):::Transfers the element to a consumer, waiting if necessary to do so
TransferQueue#tryTransfer(E, long, TimeUnit):::Transfers the element to a consumer if it is possible to do so before the timeout elapses
TransferQueue#hasWaitingConsumer():::Returns true if there is at least one consumer waiting to receive an element via #take or timed #poll(long,TimeUnit) poll
TransferQueue#getWaitingConsumerCount():::Returns an estimate of the number of consumers waiting to receive elements via #take or timed #poll(long,TimeUnit) poll

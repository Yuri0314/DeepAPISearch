AMD64ELFMacroAssembler#currentEndOfInstruction()::: d64 macro assembler current end of instruction:::return
AMD64ELFMacroAssembler#getPLTJumpCode()::: d64 macro assembler get jump code:::new->AMD64Address->jmp->position->align->return->close
AMD64ELFMacroAssembler#getPLTStaticEntryCode(StubInformation)::: d64 macro assembler get static entry code:::new->AMD64Address->jmp->stub->position->setDispatchJumpOffset->new->AMD64Address->movq->stub->position->setMovOffset->new->AMD64Address->jmp->stub->position->setC2IJumpOffset->stub->position->setResolveJumpStart->new->AMD64Address->jmp->stub->position->setResolveJumpOffset->position->align->stub->position->setSize->return->close
AMD64ELFMacroAssembler#getPLTVirtualEntryCode(StubInformation)::: d64 macro assembler get virtual entry code:::new->AMD64Address->movq->stub->position->setMovOffset->new->AMD64Address->jmp->stub->position->setDispatchJumpOffset->stub->position->setResolveJumpStart->new->AMD64Address->jmp->stub->position->setResolveJumpOffset->position->align->stub->position->setSize->return->close
AMD64InstructionDecoder#currentEndOfInstruction()::: d64 instruction decoder current end of instruction:::return
AMD64InstructionDecoder#decodePosition(byte[], int)::: d64 instruction decoder decode position:::ip->is64bit->hasDisp32->tailSize->againAfterPrefix->while->switch->break->break->break->break->return->againAfterSizePrefix2->while->switch->break->break->break->break->throw->new->InternalError->break->return->break->switch->break->break->break->break->break->break->break->break->break->return->throw->new->InternalError->break->break->break->switch->break->throw->new->InternalError->break->break->break->vexOpcode->if->else->switch->switch->break->break->break->break->throw->new->InternalError->break->return->break->break->switch->break->break->throw->new->InternalError->op2->base->op3->b100->b101->if->switch->if->break->break->break->break

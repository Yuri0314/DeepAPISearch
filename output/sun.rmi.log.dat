sun.rmi.log.LogHandler#initialSnapshot()->Object:::Creates and returns the initial state of data structure that needs to be stably stored
sun.rmi.log.LogHandler#snapshot(OutputStream, Object)->void:::Writes the snapshot object to a stream
sun.rmi.log.LogHandler#recover(InputStream)->Object::: log handler recover
sun.rmi.log.LogHandler#writeUpdate(LogOutputStream, Object)->void:::Writes the representation (a serializable object) of an update to a stream
sun.rmi.log.LogHandler#readUpdate(LogInputStream, Object)->Object:::Reads a stably logged update (a serializable object) from a stream
sun.rmi.log.LogHandler#applyUpdate(Object, Object)->Object:::Reads a stably logged update (a serializable object) from a stream
sun.rmi.log.LogInputStream#read()->int:::Reads a byte of data
sun.rmi.log.LogInputStream#read(byte[])->int:::Reads data into an array of bytes
sun.rmi.log.LogInputStream#read(byte[], int, int)->int:::Reads data into an array of bytes
sun.rmi.log.LogInputStream#skip(long)->long:::Skips n bytes of input.
sun.rmi.log.LogInputStream#available()->int:::Returns the number of bytes that can be read without blocking.
sun.rmi.log.LogInputStream#close()->void:::Closes the input stream
sun.rmi.log.LogInputStream#finalize()->void:::Closes the stream when garbage is collected.
sun.rmi.log.LogOutputStream#write(int)->void:::Writes a byte of data
sun.rmi.log.LogOutputStream#write(byte[])->void:::Writes an array of bytes
sun.rmi.log.LogOutputStream#write(byte[], int, int)->void:::Writes a sub array of bytes.
sun.rmi.log.LogOutputStream#close()->void:::Can not close a LogOutputStream, so this does nothing.
sun.rmi.log.ReliableLog#recover()->Object:::Returns an object which is the value recorded in the current snapshot
sun.rmi.log.ReliableLog#update(Object)->void:::Records this update in the log file (does not force update to disk)
sun.rmi.log.ReliableLog#update(Object, boolean)->void:::Records this update in the log file
sun.rmi.log.ReliableLog#snapshot(Object)->void:::Records this value as the current snapshot by invoking the client supplied "snapshot" callback and then empties the log.
sun.rmi.log.ReliableLog#close()->void:::Close the stable storage directory in an orderly manner.
sun.rmi.log.ReliableLog#snapshotSize()->long:::Returns the size of the snapshot file in bytes;
sun.rmi.log.ReliableLog#logSize()->long:::Returns the size of the log file in bytes;
sun.rmi.log.ReliableLog.LogFile#sync()->void:::Invokes sync on the file descriptor for this log file.
sun.rmi.log.ReliableLog.LogFile#checkSpansBoundary(long)->boolean:::Returns true if writing 4 bytes starting at the specified file position, would span a 512 byte sector boundary; otherwise returns false.

Punycode#adaptBias(int, int, boolean)::: punycode adapt bias:::if->else->count->for->return
Punycode#asciiCaseMap(char, boolean)::: punycode ascii case map:::if->if->else->if->return
Punycode#digitToBasic(int, boolean):::digitToBasic() returns the basic code point whose value (when used for representing integers) is d, which must be in the range 0 to BASE-1:::if->if->return->else->return->else->return
Punycode#encode(StringBuffer, boolean[]):::Converts Unicode to Punycode:::cpBuffer->new->intArr->n->delta->handledCPCount->basicLength->destLength->bias->j->m->q->k->t->srcCPCount->c->c2->srcLength->src->length->destCapacity->dest->new->charArr->result->new->StringBuffer->for->if->if->for->return->result->append
Punycode#isBasic(int)::: punycode is basic:::return
Punycode#isBasicUpperCase(int)::: punycode is basic upper case:::return
Punycode#isSurrogate(int)::: punycode is surrogate:::return
Punycode#decode(StringBuffer, boolean[]):::Converts Punycode to Unicode:::srcLength->src->length->result->new->StringBuffer->n->destLength->i->bias->basicLength->j->in->oldi->w->k->digit->t->destCPCount->firstSupplementaryIndex->cpLength->b->destCapacity->dest->new->charArr->for->while->src->charAt->if->isBasic->throw->new->ParseException->if->if->isBasicUpperCase->for->result->append->return
StringPrep.StringPrepTrieImpl#getFoldingOffset(int):::Called by com.ibm.icu.util.Trie to extract from a lead surrogate's data the index array offset of the indexes for that lead surrogate.:::return
StringPrep#getCodePointValue(int)::: string prep get code point value:::return->getCodePointValue
StringPrep#getVersionInfo(int)::: string prep get version info:::micro->milli->minor->major->return->VersionInfo->getInstance
StringPrep#getVersionInfo(byte[])::: string prep get version info:::if->return->return->VersionInfo->getInstance
StringPrep.Values#reset()::: values reset:::
StringPrep#getValues(char, Values)::: string prep get values:::values->reset->if->else->if->else->if->else->if
StringPrep#map(UCharacterIterator, int)::: string prep map:::val->new->Values->result->ch->dest->new->StringBuffer->allowUnassigned->while->iter->nextCodePoint->getCodePointValue->getValues->if->throw->iter->getText->iter->getIndex->new->ParseException->else->if->index->length->if->if->else->if->else->if->else->dest->append->continue->else->else->if->continue->UTF16->append->return
StringPrep#normalize(StringBuffer)::: string prep normalize:::return->Normalizer->src->toString->normalize->new->StringBuffer
StringPrep#prepare(UCharacterIterator, int):::Prepare the input buffer for use in applications with the given profile:::mapOut->map->normOut->if->normalize->ch->result->iter->UCharacterIterator->getInstance->val->new->Values->direction->firstCharDir->rtlPos->ltrPos->rightToLeft->leftToRight->while->iter->nextCodePoint->getCodePointValue->getValues->if->throw->iter->getText->new->ParseException->UCharacter->getDirection->if->if->iter->getIndex->if->iter->getIndex->if->if->throw->iter->getText->new->ParseException->if->throw->iter->getText->new->ParseException->return
StringPrepDataReader#read(byte[], char[])::: string prep data reader read:::dataInputStream->read->for->i
StringPrepDataReader#getDataFormatVersion()::: string prep data reader get data format version:::return
StringPrepDataReader#isDataVersionAcceptable(byte[])::: string prep data reader is data version acceptable:::return
StringPrepDataReader#readIndexes(int)::: string prep data reader read indexes:::indexes->new->intArr->for->i->return
StringPrepDataReader#getUnicodeVersion()::: string prep data reader get unicode version:::return
UCharacterDirection#toString(int):::Gets the name of the argument direction:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return

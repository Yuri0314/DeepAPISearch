BsdAddress#equals(Object)::: bsd address equals:::if->return->if->return->return
BsdAddress#hashCode()::: bsd address hash code:::return
BsdAddress#toString()::: bsd address to string:::return->debugger->addressValueToString
BsdAddress#getCIntegerAt(long, long, boolean)::: bsd address get integer at:::return->debugger->readCInteger
BsdAddress#getAddressAt(long)::: bsd address get address at:::return->debugger->readAddress
BsdAddress#getCompOopAddressAt(long)::: bsd address get comp oop address at:::return->debugger->readCompOopAddress
BsdAddress#getCompKlassAddressAt(long)::: bsd address get comp klass address at:::return->debugger->readCompKlassAddress
BsdAddress#getJBooleanAt(long)::: bsd address get boolean at:::return->debugger->readJBoolean
BsdAddress#getJByteAt(long)::: bsd address get byte at:::return->debugger->readJByte
BsdAddress#getJCharAt(long)::: bsd address get char at:::return->debugger->readJChar
BsdAddress#getJDoubleAt(long)::: bsd address get double at:::return->debugger->readJDouble
BsdAddress#getJFloatAt(long)::: bsd address get float at:::return->debugger->readJFloat
BsdAddress#getJIntAt(long)::: bsd address get int at:::return->debugger->readJInt
BsdAddress#getJLongAt(long)::: bsd address get long at:::return->debugger->readJLong
BsdAddress#getJShortAt(long)::: bsd address get short at:::return->debugger->readJShort
BsdAddress#getOopHandleAt(long)::: bsd address get oop handle at:::return->debugger->readOopHandle
BsdAddress#getCompOopHandleAt(long)::: bsd address get comp oop handle at:::return->debugger->readCompOopHandle
BsdAddress#setCIntegerAt(long, long, long)::: bsd address set integer at:::throw->new->DebuggerException
BsdAddress#setAddressAt(long, Address)::: bsd address set address at:::throw->new->DebuggerException
BsdAddress#setJBooleanAt(long, boolean)::: bsd address set boolean at:::throw->new->DebuggerException
BsdAddress#setJByteAt(long, byte)::: bsd address set byte at:::throw->new->DebuggerException
BsdAddress#setJCharAt(long, char)::: bsd address set char at:::throw->new->DebuggerException
BsdAddress#setJDoubleAt(long, double)::: bsd address set double at:::throw->new->DebuggerException
BsdAddress#setJFloatAt(long, float)::: bsd address set float at:::throw->new->DebuggerException
BsdAddress#setJIntAt(long, int)::: bsd address set int at:::throw->new->DebuggerException
BsdAddress#setJLongAt(long, long)::: bsd address set long at:::throw->new->DebuggerException
BsdAddress#setJShortAt(long, short)::: bsd address set short at:::throw->new->DebuggerException
BsdAddress#setOopHandleAt(long, OopHandle)::: bsd address set oop handle at:::throw->new->DebuggerException
BsdAddress#addOffsetTo(long)::: bsd address add offset to:::value->if->return->return->new->BsdAddress
BsdAddress#addOffsetToAsOopHandle(long)::: bsd address add offset to as oop handle:::value->if->return->return->new->BsdOopHandle
BsdAddress#minus(Address):::(FIXME: any signed/unsigned issues? Should this work for       OopHandles?):::if->return->return
BsdAddress#lessThan(Address)::: bsd address less than:::if->return->arg->if->return->if->return->return
BsdAddress#lessThanOrEqual(Address)::: bsd address less than or equal:::if->return->arg->if->return->if->return->return
BsdAddress#greaterThan(Address)::: bsd address greater than:::if->return->arg->if->return->if->return->return
BsdAddress#greaterThanOrEqual(Address)::: bsd address greater than or equal:::if->return->arg->if->return->if->return->return
BsdAddress#andWithMask(long)::: bsd address and with mask:::value->if->return->return->new->BsdAddress
BsdAddress#orWithMask(long)::: bsd address or with mask:::value->if->return->return->new->BsdAddress
BsdAddress#xorWithMask(long)::: bsd address xor with mask:::value->if->return->return->new->BsdAddress
BsdAddress#asLongValue()::: bsd address as long value:::return
BsdAddress#getValue()::: bsd address get value:::return
BsdAddress#check(boolean, String)::: bsd address check:::if->println->System->exit
BsdAddress#main(String[])::: bsd address main:::p1->new->BsdAddress->p2->p1->addOffsetTo->n1->p2->addOffsetTo->n2->n1->addOffsetTo->p1->lessThan->check->p1->lessThan->check->p1->lessThan->check->p2->lessThan->check->p2->lessThan->check->n1->lessThan->check->p1->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->p2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n1->lessThan->check->n2->lessThan->check->n2->lessThan->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p1->lessThanOrEqual->check->p2->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->p2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n1->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->lessThanOrEqual->check->n2->greaterThan->check->n2->greaterThan->check->n2->greaterThan->check->n1->greaterThan->check->n1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->n2->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->n1->greaterThan->check->p1->greaterThan->check->p2->greaterThan->check->p1->greaterThan->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->n1->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->p2->greaterThanOrEqual->check->p1->greaterThanOrEqual->check->println
BsdCDebugger#getThreadList()::: bsd debugger get thread list:::return->dbg->getThreadList
BsdCDebugger#getLoadObjectList()::: bsd debugger get load object list:::return->dbg->getLoadObjectList
BsdCDebugger#loadObjectContainingPC(Address)::: bsd debugger load object containing c:::if->return->objs->getLoadObjectList->arr->objs->toArray->mid->low->high->while->midVal->cmp->pc->midVal->getBase->minus->if->else->if->size->midVal->getSize->if->else->return->else->return->return
BsdCDebugger#topFrameForThread(ThreadProxy)::: bsd debugger top frame for thread:::cpu->dbg->getCPU->if->cpu->equals->context->thread->getContext->ebp->context->getRegisterAsAddress->if->return->pc->context->getRegisterAsAddress->if->return->return->new->BsdX86CFrame->else->if->cpu->equals->cpu->equals->context->thread->getContext->rbp->context->getRegisterAsAddress->if->return->pc->context->getRegisterAsAddress->if->return->return->new->BsdAMD64CFrame->else->throw->new->DebuggerException
BsdCDebugger#getNameOfFile(String)::: bsd debugger get name of file:::return->new->File->getName
BsdCDebugger#getProcessControl()::: bsd debugger get process control:::return
BsdCDebugger#canDemangle()::: bsd debugger can demangle:::return
BsdCDebugger#demangle(String)::: bsd debugger demangle:::throw->new->UnsupportedOperationException
BsdDebugger#addressValueToString(long)::: bsd debugger address value to string:::
BsdDebugger#readJBoolean(long)::: bsd debugger read boolean:::
BsdDebugger#readJByte(long)::: bsd debugger read byte:::
BsdDebugger#readJChar(long)::: bsd debugger read char:::
BsdDebugger#readJDouble(long)::: bsd debugger read double:::
BsdDebugger#readJFloat(long)::: bsd debugger read float:::
BsdDebugger#readJInt(long)::: bsd debugger read int:::
BsdDebugger#readJLong(long)::: bsd debugger read long:::
BsdDebugger#readJShort(long)::: bsd debugger read short:::
BsdDebugger#readCInteger(long, long, boolean)::: bsd debugger read integer:::
BsdDebugger#readAddress(long)::: bsd debugger read address:::
BsdDebugger#readCompOopAddress(long)::: bsd debugger read comp oop address:::
BsdDebugger#readCompKlassAddress(long)::: bsd debugger read comp klass address:::
BsdDebugger#readOopHandle(long)::: bsd debugger read oop handle:::
BsdDebugger#readCompOopHandle(long)::: bsd debugger read comp oop handle:::
BsdDebugger#getThreadIntegerRegisterSet(long)::: bsd debugger get thread integer register set:::
BsdDebugger#getAddressValue(Address)::: bsd debugger get address value:::
BsdDebugger#newAddress(long)::: bsd debugger new address:::
BsdDebugger#getThreadList()::: bsd debugger get thread list:::
BsdDebugger#getLoadObjectList()::: bsd debugger get load object list:::
BsdDebugger#lookup(long)::: bsd debugger lookup:::
BsdDebuggerLocal#createClosestSymbol(String, long)::: bsd debugger local create closest symbol:::return->new->ClosestSymbol
BsdDebuggerLocal#createLoadObject(String, long, long)::: bsd debugger local create load object:::f->new->File->baseAddr->newAddress->return->f->length->new->SharedObject
BsdDebuggerLocal#init0()::: bsd debugger local init0:::
BsdDebuggerLocal#attach0(int)::: bsd debugger local attach0:::
BsdDebuggerLocal#attach0(String, String)::: bsd debugger local attach0:::
BsdDebuggerLocal#detach0()::: bsd debugger local detach0:::
BsdDebuggerLocal#lookupByName0(String, String)::: bsd debugger local lookup by name0:::
BsdDebuggerLocal#lookupByAddress0(long)::: bsd debugger local lookup by address0:::
BsdDebuggerLocal#getThreadIntegerRegisterSet0(long)::: bsd debugger local get thread integer register set0:::
BsdDebuggerLocal#readBytesFromProcess0(long, long)::: bsd debugger local read bytes from process0:::
BsdDebuggerLocal#getAddressSize()::: bsd debugger local get address size:::
BsdDebuggerLocal.WorkerThreadTask#doit(BsdDebuggerLocal)::: worker thread task doit:::
BsdDebuggerLocal.BsdDebuggerLocalWorkerThread#run()::: bsd debugger local worker thread run:::synchronized->for
BsdDebuggerLocal.BsdDebuggerLocalWorkerThread#execute(WorkerThreadTask)::: bsd debugger local worker thread execute:::synchronized->workerThread->notifyAll->while->try->workerThread->wait->catch->finally->if->throw->new->DebuggerException->else->return
BsdDebuggerLocal#hasProcessList():::From the Debugger interface via JVMDebugger:::return
BsdDebuggerLocal#getProcessList():::From the Debugger interface via JVMDebugger:::throw->new->DebuggerException
BsdDebuggerLocal#checkAttached()::: bsd debugger local check attached:::if->if->throw->new->DebuggerException->else->throw->new->DebuggerException
BsdDebuggerLocal#requireAttach()::: bsd debugger local require attach:::if->throw->new->RuntimeException
BsdDebuggerLocal#findABIVersion()::: bsd debugger local find version:::libjvmName->javaThreadVt->if->lookupByName0->else
BsdDebuggerLocal#attach(int):::From the Debugger interface via JVMDebugger:::checkAttached->new->ArrayList->new->ArrayList->task->new->AttachTask->workerThread->execute
BsdDebuggerLocal#attach(String, String):::From the Debugger interface via JVMDebugger:::checkAttached->new->ArrayList->new->ArrayList->attach0->findABIVersion
BsdDebuggerLocal#detach():::From the Debugger interface via JVMDebugger:::if->return->if->detach0->return->else->task->new->DetachTask->workerThread->execute->return
BsdDebuggerLocal#parseAddress(String):::From the Debugger interface via JVMDebugger:::addr->utils->scanAddress->if->return->return->new->BsdAddress
BsdDebuggerLocal#getOS():::From the Debugger interface via JVMDebugger:::return->PlatformInfo->getOS
BsdDebuggerLocal#getCPU():::From the Debugger interface via JVMDebugger:::return->PlatformInfo->getCPU
BsdDebuggerLocal#hasConsole()::: bsd debugger local has console:::return
BsdDebuggerLocal#consoleExecuteCommand(String)::: bsd debugger local console execute command:::throw->new->DebuggerException
BsdDebuggerLocal#getConsolePrompt()::: bsd debugger local get console prompt:::return
BsdDebuggerLocal#handleGCC32ABI(long, String)::: bsd debugger local handle c32 i:::if->symbol->startsWith->return->machDesc->getAddressSize->else->return
BsdDebuggerLocal#lookup(String, String):::From the SymbolLookup interface via Debugger and JVMDebugger:::requireAttach->if->return->if->addr->lookupByName0->return->handleGCC32ABI->new->BsdAddress->else->task->new->LookupByNameTask->workerThread->execute->return
BsdDebuggerLocal#lookupOop(String, String):::From the SymbolLookup interface via Debugger and JVMDebugger:::addr->lookup->if->return->return->addr->addOffsetToAsOopHandle
BsdDebuggerLocal#getMachineDescription():::From the Debugger interface:::return
BsdDebuggerLocal#getThreadForIdentifierAddress(Address, Address):::From the ThreadAccess interface via Debugger and JVMDebugger:::return->new->BsdThread
BsdDebuggerLocal#getThreadForIdentifierAddress(Address)::: bsd debugger local get thread for identifier address:::throw->new->RuntimeException
BsdDebuggerLocal#getThreadForThreadId(long):::From the ThreadAccess interface via Debugger and JVMDebugger:::return->new->BsdThread
BsdDebuggerLocal#addressValueToString(long):::From the BsdDebugger interface:::return->utils->addressValueToString
BsdDebuggerLocal#readAddress(long):::From the BsdDebugger interface:::value->readAddressValue->return->new->BsdAddress
BsdDebuggerLocal#readCompOopAddress(long)::: bsd debugger local read comp oop address:::value->readCompOopAddressValue->return->new->BsdAddress
BsdDebuggerLocal#readCompKlassAddress(long)::: bsd debugger local read comp klass address:::value->readCompKlassAddressValue->return->new->BsdAddress
BsdDebuggerLocal#readOopHandle(long):::From the BsdDebugger interface:::value->readAddressValue->return->new->BsdOopHandle
BsdDebuggerLocal#readCompOopHandle(long)::: bsd debugger local read comp oop handle:::value->readCompOopAddressValue->return->new->BsdOopHandle
BsdDebuggerLocal#getThreadIntegerRegisterSet(long)::: bsd debugger local get thread integer register set:::requireAttach->if->return->getThreadIntegerRegisterSet0->else->task->new->GetThreadIntegerRegisterSetTask->workerThread->execute->return
BsdDebuggerLocal#readCInteger(long, long, boolean):::Need to override this to relax alignment checks on x86.:::if->utils->checkAlignment->else->utils->checkAlignment->data->readBytes->return->utils->dataToCInteger
BsdDebuggerLocal#readJLong(long)::: bsd debugger local read long:::utils->checkAlignment->data->readBytes->return->utils->dataToJLong
BsdDebuggerLocal#getAddressValue(Address):::From the BsdDebugger interface:::if->return->return->getValue
BsdDebuggerLocal#newAddress(long):::From the BsdDebugger interface:::if->return->return->new->BsdAddress
BsdDebuggerLocal#getThreadList():::From the BsdCDebugger interface:::requireAttach->return
BsdDebuggerLocal#getLoadObjectList():::From the BsdCDebugger interface:::requireAttach->return
BsdDebuggerLocal#lookup(long):::From the BsdCDebugger interface:::requireAttach->if->return->lookupByAddress0->else->task->new->LookupByAddressTask->workerThread->execute->return
BsdDebuggerLocal#getCDebugger()::: bsd debugger local get debugger:::if->new->BsdCDebugger->return
BsdDebuggerLocal#readBytesFromProcess(long, long):::This reads bytes from the remote process.:::requireAttach->if->res->readBytesFromProcess0->return->new->ReadResult->new->ReadResult->else->task->new->ReadBytesFromProcessTask->workerThread->execute->return
BsdDebuggerLocal#writeBytesToProcess(long, long, byte[])::: bsd debugger local write bytes to process:::throw->new->DebuggerException
BsdDebuggerLocal#getJavaThreadsInfo():::this functions used for core file reading and called from native attach0,         it returns an array of long integers as         [thread_id, stack_start, stack_end, thread_id, stack_start, stack_end, ....] for         all java threads recorded in Threads:::requireAttach->threads->VM->getVM->getThreads->len->threads->getNumberOfThreads->result->new->longArr->t->threads->first->beg->end->i->while->t->getStackBaseValue->t->getStackSize->bsdt->t->getThreadProxy->uid->bsdt->getUniqueThreadId->if->threadList->add->t->next->return
BsdOopHandle#equals(Object)::: bsd oop handle equals:::if->return->if->return->return
BsdOopHandle#addOffsetTo(long)::: bsd oop handle add offset to:::throw->new->UnsupportedOperationException
BsdOopHandle#andWithMask(long)::: bsd oop handle and with mask:::throw->new->UnsupportedOperationException
BsdOopHandle#orWithMask(long)::: bsd oop handle or with mask:::throw->new->UnsupportedOperationException
BsdOopHandle#xorWithMask(long)::: bsd oop handle xor with mask:::throw->new->UnsupportedOperationException
BsdThread#equals(Object)::: bsd thread equals:::if->return->return
BsdThread#hashCode()::: bsd thread hash code:::return
BsdThread#toString()::: bsd thread to string:::return->Integer->toString
BsdThread#getContext()::: bsd thread get context:::data->debugger->getThreadIntegerRegisterSet->context->BsdThreadContextFactory->createThreadContext->for->i->return
BsdThread#canSetContext()::: bsd thread can set context:::return
BsdThread#setContext(ThreadContext)::: bsd thread set context:::throw->new->DebuggerException
BsdThread#getUniqueThreadId():::this is not interface function, used in core file to get unique thread id on Macosx:::return
BsdThreadContextFactory#createThreadContext(BsdDebugger)::: bsd thread context factory create thread context:::cpu->dbg->getCPU->if->cpu->equals->return->new->BsdX86ThreadContext->else->if->cpu->equals->cpu->equals->return->new->BsdAMD64ThreadContext->else->throw->new->RuntimeException
SharedObject#newAddress(long)::: shared object new address:::return->dbg->newAddress
SharedObject#getAddressValue(Address)::: shared object get address value:::return->dbg->getAddressValue

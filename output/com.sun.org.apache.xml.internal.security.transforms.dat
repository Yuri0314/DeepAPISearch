ClassLoaderUtils#loadClass(String, Class):::Load a class with a given name:::try->cl->Thread->currentThread->getContextClassLoader->if->return->cl->loadClass->catch->LOG->e->getMessage->debug->finally->return->loadClass2
Transform#register(String, String):::Registers implementing class of the Transform algorithm with algorithmURI:::JavaUtils->checkRegisterPermission->transformSpi->transformSpiHash->get->if->exArgs->throw->new->AlgorithmAlreadyRegisteredException->transformSpiClass->ClassLoaderUtils->loadClass->transformSpiHash->put
Transform#register(String, Class):::Registers implementing class of the Transform algorithm with algorithmURI:::JavaUtils->checkRegisterPermission->transformSpi->transformSpiHash->get->if->exArgs->throw->new->AlgorithmAlreadyRegisteredException->transformSpiHash->put
Transform#registerDefaultAlgorithms():::This method registers the default algorithms.:::transformSpiHash->put->transformSpiHash->put->transformSpiHash->put->transformSpiHash->put->transformSpiHash->put->transformSpiHash->put->transformSpiHash->put->transformSpiHash->put->transformSpiHash->put->transformSpiHash->put->transformSpiHash->put
Transform#getURI():::Returns the URI representation of Transformation algorithm:::return->getLocalAttribute
Transform#performTransform(XMLSignatureInput):::Transforms the input, and generates XMLSignatureInput as output.:::return->performTransform
Transform#performTransform(XMLSignatureInput, OutputStream):::Transforms the input, and generates XMLSignatureInput as output.:::result->try->transformSpi->enginePerformTransform->catch->exArgs->this->getURI->throw->new->CanonicalizationException->exArgs->this->getURI->throw->new->CanonicalizationException->finally->return
Transforms#setSecureValidation(boolean):::Set whether secure validation is enabled or not:::
Transforms#addTransform(String):::Adds the Transform with the specified Transform algorithm URI:::try->LOG->debug->transform->getDocument->new->Transform->this->addTransform->catch->throw->new->TransformationException->finally
Transforms#addTransform(String, Element):::Adds the Transform with the specified Transform algorithm URI:::try->LOG->debug->transform->getDocument->new->Transform->this->addTransform->catch->throw->new->TransformationException->finally
Transforms#addTransform(String, NodeList):::Adds the Transform with the specified Transform algorithm URI.:::try->transform->getDocument->new->Transform->this->addTransform->catch->throw->new->TransformationException->finally
Transforms#performTransforms(XMLSignatureInput):::Applies all included Transforms to xmlSignatureInput and returns the result of these transformations.:::return->performTransforms
Transforms#performTransforms(XMLSignatureInput, OutputStream):::Applies all included Transforms to xmlSignatureInput and returns the result of these transformations.:::try->last->this->getLength->for->i->if->t->this->item->LOG->t->getURI->debug->checkSecureValidation->t->performTransform->return->catch->throw->new->TransformationException->throw->new->TransformationException->throw->new->TransformationException->finally
Transforms#getLength():::Return the nonnegative number of transformations.:::initTransforms->return
Transforms#item(int):::Return the i^th :::try->initTransforms->return->new->Transform->catch->throw->new->TransformationException->finally
TransformSpi#enginePerformTransform(XMLSignatureInput, OutputStream, Transform):::The mega method which MUST be implemented by the Transformation Algorithm.:::throw->new->UnsupportedOperationException
TransformSpi#enginePerformTransform(XMLSignatureInput, Transform):::The mega method which MUST be implemented by the Transformation Algorithm:::return->enginePerformTransform
TransformSpi#enginePerformTransform(XMLSignatureInput):::The mega method which MUST be implemented by the Transformation Algorithm.:::return->enginePerformTransform
TransformSpi#engineGetURI():::Returns the URI representation of Transformation algorithm:::

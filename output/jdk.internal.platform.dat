Container#metrics():::Returns the platform specific Container Metrics class or null if not supported on this platform.:::return->Metrics->systemMetrics
Metrics#systemMetrics():::Returns an instance of the Metrics class.:::try->c->Class->forName->m->c->getMethod->return->m->invoke->catch->return->throw->new->InternalError->finally
Metrics#getProvider():::Returns the interface responsible for providing the platform metrics.:::
Metrics#getCpuUsage():::Returns the aggregate time, in nanoseconds, consumed by all tasks in the Isolation Group.:::
Metrics#getPerCpuUsage():::Returns the aggregate time, in nanoseconds, consumed by all tasks in the Isolation Group, separated by CPU:::
Metrics#getCpuUserUsage():::Returns the aggregate user time, in nanoseconds, consumed by all tasks in the Isolation Group.:::
Metrics#getCpuSystemUsage():::Returns the aggregate system time, in nanoseconds, consumed by all tasks in the Isolation Group.:::
Metrics#getCpuPeriod():::Returns the length of the scheduling period, in microseconds, for processes within the Isolation Group.:::
Metrics#getCpuQuota():::Returns the total available run-time allowed, in microseconds, during each scheduling period for all tasks in the Isolation Group.:::
Metrics#getCpuShares():::Returns the relative weighting of processes with the Isolation Group used for prioritizing the scheduling of processes across all Isolation Groups running on a host.:::
Metrics#getCpuNumPeriods():::Returns the number of time-slice periods that have elapsed if a CPU quota has been setup for the Isolation Group; otherwise returns 0.:::
Metrics#getCpuNumThrottled():::Returns the number of time-slice periods that the group has been throttled or limited due to the group exceeding its quota if a CPU quota has been setup for the Isolation Group.:::
Metrics#getCpuThrottledTime():::Returns the total time duration, in nanoseconds, that the group has been throttled or limited due to the group exceeding its quota if a CPU quota has been setup for the Isolation Group.:::
Metrics#getEffectiveCpuCount():::Returns the number of effective processors that this Isolation group has available to it:::
Metrics#getCpuSetCpus():::Returns the CPUS that are available for execution of processes in the current Isolation Group:::
Metrics#getEffectiveCpuSetCpus():::Returns the CPUS that are available and online for execution of processes within the current Isolation Group:::
Metrics#getCpuSetMems():::Returns the memory nodes that are available for use by processes in the current Isolation Group:::
Metrics#getEffectiveCpuSetMems():::Returns the memory nodes that are available and online for use by processes within the current Isolation Group:::
Metrics#getCpuSetMemoryPressure():::Returns the (attempts per second * 1000), if enabled, that the operating system tries to satisfy a memory request for any process in the current Isolation Group when no free memory is readily available:::
Metrics#isCpuSetMemoryPressureEnabled():::Returns the state of the memory pressure detection support.:::
Metrics#getMemoryFailCount():::Returns the number of times that user memory requests in the Isolation Group have exceeded the memory limit.:::
Metrics#getMemoryLimit():::Returns the maximum amount of physical memory, in bytes, that can be allocated in the Isolation Group.:::
Metrics#getMemoryMaxUsage():::Returns the largest amount of physical memory, in bytes, that have been allocated in the Isolation Group.:::
Metrics#getMemoryUsage():::Returns the amount of physical memory, in bytes, that is currently allocated in the current Isolation Group.:::
Metrics#getKernelMemoryFailCount():::Returns the number of times that kernel memory requests in the Isolation Group have exceeded the kernel memory limit.:::
Metrics#getKernelMemoryLimit():::Returns the maximum amount of kernel physical memory, in bytes, that can be allocated in the Isolation Group.:::
Metrics#getKernelMemoryMaxUsage():::Returns the largest amount of kernel physical memory, in bytes, that have been allocated in the Isolation Group.:::
Metrics#getKernelMemoryUsage():::Returns the amount of kernel physical memory, in bytes, that is currently allocated in the current Isolation Group.:::
Metrics#getTcpMemoryFailCount():::Returns the number of times that networking memory requests in the Isolation Group have exceeded the kernel memory limit.:::
Metrics#getTcpMemoryLimit():::Returns the maximum amount of networking physical memory, in bytes, that can be allocated in the Isolation Group.:::
Metrics#getTcpMemoryMaxUsage():::Returns the largest amount of networking physical memory, in bytes, that have been allocated in the Isolation Group.:::
Metrics#getTcpMemoryUsage():::Returns the amount of networking physical memory, in bytes, that is currently allocated in the current Isolation Group.:::
Metrics#getMemoryAndSwapFailCount():::Returns the number of times that user memory requests in the Isolation Group have exceeded the memory + swap limit.:::
Metrics#getMemoryAndSwapLimit():::Returns the maximum amount of physical memory and swap space, in bytes, that can be allocated in the Isolation Group.:::
Metrics#getMemoryAndSwapMaxUsage():::Returns the largest amount of physical memory and swap space, in bytes, that have been allocated in the Isolation Group.:::
Metrics#getMemoryAndSwapUsage():::Returns the amount of physical memory and swap space, in bytes, that is currently allocated in the current Isolation Group.:::
Metrics#isMemoryOOMKillEnabled():::Returns the state of the Operating System Out of Memory termination policy.:::
Metrics#getMemorySoftLimit():::Returns the hint to the operating system that allows groups to specify the minimum amount of physical memory that they need to achieve reasonable performance in low memory systems:::
Metrics#getBlkIOServiceCount():::Returns the number of block I/O requests to the disk that have been issued by the Isolation Group.:::
Metrics#getBlkIOServiced():::Returns the number of block I/O bytes that have been transferred to/from the disk by the Isolation Group.:::

sun.jvm.hotspot.memory.AFLBinaryTreeDictionary#size()->long::: binary tree dictionary size
sun.jvm.hotspot.memory.AltHashing#murmur3_32(long, byte[])->long::: alt hashing murmur3_32
sun.jvm.hotspot.memory.CodeHeap#begin()->Address::: code heap begin
sun.jvm.hotspot.memory.CodeHeap#end()->Address::: code heap end
sun.jvm.hotspot.memory.CodeHeap#contains(Address)->boolean::: code heap contains
sun.jvm.hotspot.memory.CodeHeap#findStart(Address)->Address:::Returns the start of the block containing p or null
sun.jvm.hotspot.memory.CodeHeap#iterate(CodeCacheVisitor, CodeCache)->void::: code heap iterate
sun.jvm.hotspot.memory.Dictionary#getHashtableEntryClass()->Class::: dictionary get hashtable entry class
sun.jvm.hotspot.memory.Dictionary#allEntriesDo(ClassLoaderDataGraph.ClassAndLoaderVisitor, Oop)->void:::All classes, and their initiating class loader, passed in.
sun.jvm.hotspot.memory.Dictionary#contains(Klass)->boolean::: dictionary contains
sun.jvm.hotspot.memory.DictionaryEntry#klass()->Klass::: dictionary entry klass
sun.jvm.hotspot.memory.DictionaryEntry#equals(Symbol)->boolean::: dictionary entry equals
sun.jvm.hotspot.memory.FileMapInfo#getHeader()->FileMapHeader::: file map info get header
sun.jvm.hotspot.memory.FileMapInfo#inCopiedVtableSpace(Address)->boolean::: file map info in copied vtable space
sun.jvm.hotspot.memory.FileMapInfo#getTypeForVptrAddress(Address)->Type::: file map info get type for vptr address
sun.jvm.hotspot.memory.FileMapInfo.FileMapHeader#inCopiedVtableSpace(Address)->boolean::: file map header in copied vtable space
sun.jvm.hotspot.memory.FileMapInfo.FileMapHeader#createVtableTypeMapping()->void::: file map header create vtable type mapping
sun.jvm.hotspot.memory.FreeChunk#next()->FreeChunk::: free chunk next
sun.jvm.hotspot.memory.FreeChunk#prev()->FreeChunk::: free chunk prev
sun.jvm.hotspot.memory.FreeChunk#size()->long::: free chunk size
sun.jvm.hotspot.memory.FreeChunk#indicatesFreeChunk(Address)->boolean::: free chunk indicates free chunk
sun.jvm.hotspot.memory.FreeChunk#isFree()->boolean::: free chunk is free
sun.jvm.hotspot.memory.HeapBlock#getLength()->long::: heap block get length
sun.jvm.hotspot.memory.HeapBlock#isFree()->boolean::: heap block is free
sun.jvm.hotspot.memory.HeapBlock#getAllocatedSpace()->Address::: heap block get allocated space
sun.jvm.hotspot.memory.HeapBlock.Header#getLength()->long::: header get length
sun.jvm.hotspot.memory.HeapBlock.Header#isFree()->boolean::: header is free
sun.jvm.hotspot.memory.MemRegion#clone()->Object::: mem region clone
sun.jvm.hotspot.memory.MemRegion#copy()->MemRegion::: mem region copy
sun.jvm.hotspot.memory.MemRegion#intersection(MemRegion)->MemRegion::: mem region intersection
sun.jvm.hotspot.memory.MemRegion#union(MemRegion)->MemRegion::: mem region union
sun.jvm.hotspot.memory.MemRegion#start()->Address::: mem region start
sun.jvm.hotspot.memory.MemRegion#startAsOopHandle()->OopHandle::: mem region start as oop handle
sun.jvm.hotspot.memory.MemRegion#end()->Address::: mem region end
sun.jvm.hotspot.memory.MemRegion#endAsOopHandle()->OopHandle::: mem region end as oop handle
sun.jvm.hotspot.memory.MemRegion#setStart(Address)->void::: mem region set start
sun.jvm.hotspot.memory.MemRegion#setEnd(Address)->void::: mem region set end
sun.jvm.hotspot.memory.MemRegion#setWordSize(long)->void::: mem region set word size
sun.jvm.hotspot.memory.MemRegion#contains(MemRegion)->boolean::: mem region contains
sun.jvm.hotspot.memory.MemRegion#contains(Address)->boolean::: mem region contains
sun.jvm.hotspot.memory.MemRegion#byteSize()->long::: mem region byte size
sun.jvm.hotspot.memory.MemRegion#wordSize()->long::: mem region word size
sun.jvm.hotspot.memory.SymbolTable#getTheTable()->SymbolTable::: symbol table get the table
sun.jvm.hotspot.memory.SymbolTable#getSharedTable()->CompactHashTable::: symbol table get shared table
sun.jvm.hotspot.memory.SymbolTable#getSeed()->long::: symbol table get seed
sun.jvm.hotspot.memory.SymbolTable#useAlternateHashcode()->boolean::: symbol table use alternate hashcode
sun.jvm.hotspot.memory.SymbolTable#probe(String)->Symbol:::Clone of VM's "temporary" probe routine, as the SA currently       does not support mutation so lookup() would have no effect       anyway
sun.jvm.hotspot.memory.SymbolTable#probe(byte[])->Symbol:::Clone of VM's "temporary" probe routine, as the SA currently       does not support mutation so lookup() would have no effect       anyway
sun.jvm.hotspot.memory.SymbolTable.SymbolVisitor#visit(Symbol)->void::: symbol visitor visit
sun.jvm.hotspot.memory.SymbolTable#symbolsDo(SymbolVisitor)->void::: symbol table symbols do
sun.jvm.hotspot.memory.SystemDictionary#sharedDictionary()->Dictionary::: system dictionary shared dictionary
sun.jvm.hotspot.memory.SystemDictionary#getThreadKlass()->InstanceKlass::: system dictionary get thread klass
sun.jvm.hotspot.memory.SystemDictionary#getThreadGroupKlass()->InstanceKlass::: system dictionary get thread group klass
sun.jvm.hotspot.memory.SystemDictionary#getObjectKlass()->InstanceKlass::: system dictionary get object klass
sun.jvm.hotspot.memory.SystemDictionary#getStringKlass()->InstanceKlass::: system dictionary get string klass
sun.jvm.hotspot.memory.SystemDictionary#getClassLoaderKlass()->InstanceKlass::: system dictionary get class loader klass
sun.jvm.hotspot.memory.SystemDictionary#getSystemKlass()->InstanceKlass::: system dictionary get system klass
sun.jvm.hotspot.memory.SystemDictionary#getMethodHandleKlass()->InstanceKlass::: system dictionary get method handle klass
sun.jvm.hotspot.memory.SystemDictionary#getAbstractOwnableSynchronizerKlass()->InstanceKlass::: system dictionary get abstract ownable synchronizer klass
sun.jvm.hotspot.memory.SystemDictionary#javaSystemLoader()->Oop::: system dictionary java system loader
sun.jvm.hotspot.memory.Universe#narrowOopModeToString(NARROW_OOP_MODE)->String::: universe narrow oop mode to string
sun.jvm.hotspot.memory.Universe#heap()->CollectedHeap::: universe heap
sun.jvm.hotspot.memory.Universe#getNarrowOopBase()->long::: universe get narrow oop base
sun.jvm.hotspot.memory.Universe#getNarrowOopShift()->int::: universe get narrow oop shift
sun.jvm.hotspot.memory.Universe#getNarrowKlassBase()->long::: universe get narrow klass base
sun.jvm.hotspot.memory.Universe#getNarrowKlassShift()->int::: universe get narrow klass shift
sun.jvm.hotspot.memory.Universe#isIn(Address)->boolean:::Returns "TRUE" iff "p" points into the allocated area of the heap.
sun.jvm.hotspot.memory.Universe#isInReserved(Address)->boolean:::Returns "TRUE" iff "p" points into the reserved area of the heap.
sun.jvm.hotspot.memory.Universe#mainThreadGroup()->Oop::: universe main thread group
sun.jvm.hotspot.memory.Universe#systemThreadGroup()->Oop::: universe system thread group
sun.jvm.hotspot.memory.Universe#print()->void::: universe print
sun.jvm.hotspot.memory.Universe#printOn(PrintStream)->void::: universe print on
sun.jvm.hotspot.memory.Universe#elementTypeShouldBeAligned(BasicType)->boolean::: universe element type should be aligned
sun.jvm.hotspot.memory.Universe#fieldTypeShouldBeAligned(BasicType)->boolean::: universe field type should be aligned
sun.jvm.hotspot.memory.UniverseExt#initialize(VirtualConstructor)->void::: universe ext initialize
sun.jvm.hotspot.memory.VirtualSpace#low()->Address::: virtual space low
sun.jvm.hotspot.memory.VirtualSpace#high()->Address::: virtual space high
sun.jvm.hotspot.memory.VirtualSpace#lowBoundary()->Address::: virtual space low boundary
sun.jvm.hotspot.memory.VirtualSpace#highBoundary()->Address::: virtual space high boundary
sun.jvm.hotspot.memory.VirtualSpace#committedSize()->long:::Testers (all sizes are byte sizes)
sun.jvm.hotspot.memory.VirtualSpace#reservedSize()->long::: virtual space reserved size
sun.jvm.hotspot.memory.VirtualSpace#uncommittedSize()->long::: virtual space uncommitted size
sun.jvm.hotspot.memory.VirtualSpace#contains(Address)->boolean::: virtual space contains

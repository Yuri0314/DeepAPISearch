ClassLoaderData#initialize(TypeDataBase)::: class loader data initialize:::type->db->lookupType->type->getAddressField->type->getAddressField->type->getAddressField->new->MetadataField->type->getCIntegerField->new->CIntField->type->getAddressField
ClassLoaderData#dictionary()::: class loader data dictionary:::tmp->dictionaryField->getValue->return->VMObjectFactory->newObject
ClassLoaderData#instantiateWrapperFor(Address)::: class loader data instantiate wrapper for:::if->return->return->new->ClassLoaderData
ClassLoaderData#getClassLoader()::: class loader data get class loader:::handle->classLoaderField->getAddress->getValue->if->refs->handle->getOopHandleAt->return->VM->getVM->getObjectHeap->newOop->return
ClassLoaderData#getIsAnonymous()::: class loader data get is anonymous:::return->isAnonymousField->getValue
ClassLoaderData#next()::: class loader data next:::return->nextField->getAddress->getValue->instantiateWrapperFor
ClassLoaderData#getKlasses()::: class loader data get klasses:::return->klassesField->getValue
ClassLoaderData#find(Symbol):::Lookup an already loaded class:::for->l->getKlasses->l->getNextLinkKlass->return
ClassLoaderData#classesDo(ClassLoaderDataGraph.ClassVisitor):::Iterate over all klasses - including object, primitive       array klasses:::for->l->getKlasses->l->getNextLinkKlass
ClassLoaderData#allEntriesDo(ClassLoaderDataGraph.ClassAndLoaderVisitor):::Iterate over all klasses in the dictionary, including initiating loader.:::for->l->getKlasses->l->getNextLinkKlass
ClassLoaderDataGraph#initialize(TypeDataBase)::: class loader data graph initialize:::type->db->lookupType->type->getAddressField
ClassLoaderDataGraph#getClassLoaderGraphHead()::: class loader data graph get class loader graph head:::return->ClassLoaderData->headField->getValue->instantiateWrapperFor
ClassLoaderDataGraph#find(String):::Lookup an already loaded class in any class loader.:::sym->VM->getVM->getSymbolTable->probe->if->return->for->cld->getClassLoaderGraphHead->cld->next->return
ClassLoaderDataGraph.ClassVisitor#visit(Klass)::: class visitor visit:::
ClassLoaderDataGraph.ClassAndLoaderVisitor#visit(Klass, Oop)::: class and loader visitor visit:::
ClassLoaderDataGraph#classesDo(ClassVisitor):::Iterate over all klasses - including object, primitive       array klasses:::for->cld->getClassLoaderGraphHead->cld->next
ClassLoaderDataGraph#allEntriesDo(ClassAndLoaderVisitor):::Iterate over all klasses - including object, primitive       array klasses, pass initiating loader.:::for->cld->getClassLoaderGraphHead->cld->next

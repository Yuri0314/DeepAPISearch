sun.jvm.hotspot.classfile.ClassLoaderData#dictionary()->Dictionary::: class loader data dictionary
sun.jvm.hotspot.classfile.ClassLoaderData#instantiateWrapperFor(Address)->ClassLoaderData::: class loader data instantiate wrapper for
sun.jvm.hotspot.classfile.ClassLoaderData#getClassLoader()->Oop::: class loader data get class loader
sun.jvm.hotspot.classfile.ClassLoaderData#getIsAnonymous()->boolean::: class loader data get is anonymous
sun.jvm.hotspot.classfile.ClassLoaderData#next()->ClassLoaderData::: class loader data next
sun.jvm.hotspot.classfile.ClassLoaderData#getKlasses()->Klass::: class loader data get klasses
sun.jvm.hotspot.classfile.ClassLoaderData#find(Symbol)->Klass:::Lookup an already loaded class
sun.jvm.hotspot.classfile.ClassLoaderData#classesDo(ClassLoaderDataGraph.ClassVisitor)->void:::Iterate over all klasses - including object, primitive       array klasses
sun.jvm.hotspot.classfile.ClassLoaderData#allEntriesDo(ClassLoaderDataGraph.ClassAndLoaderVisitor)->void:::Iterate over all klasses in the dictionary, including initiating loader.
sun.jvm.hotspot.classfile.ClassLoaderDataGraph#getClassLoaderGraphHead()->ClassLoaderData::: class loader data graph get class loader graph head
sun.jvm.hotspot.classfile.ClassLoaderDataGraph#find(String)->Klass:::Lookup an already loaded class in any class loader.
sun.jvm.hotspot.classfile.ClassLoaderDataGraph.ClassVisitor#visit(Klass)->void::: class visitor visit
sun.jvm.hotspot.classfile.ClassLoaderDataGraph.ClassAndLoaderVisitor#visit(Klass, Oop)->void::: class and loader visitor visit
sun.jvm.hotspot.classfile.ClassLoaderDataGraph#classesDo(ClassVisitor)->void:::Iterate over all klasses - including object, primitive       array klasses
sun.jvm.hotspot.classfile.ClassLoaderDataGraph#allEntriesDo(ClassAndLoaderVisitor)->void:::Iterate over all klasses - including object, primitive       array klasses, pass initiating loader.

jdk.jshell.ClassTracker.ClassInfo#getClassName()->String::: class info get class name
jdk.jshell.ClassTracker.ClassInfo#getLoadedBytes()->byte[]::: class info get loaded bytes
jdk.jshell.ClassTracker.ClassInfo#getCurrentBytes()->byte[]::: class info get current bytes
jdk.jshell.ClassTracker.ClassInfo#setCurrentBytes(byte[])->void::: class info set current bytes
jdk.jshell.ClassTracker.ClassInfo#setLoadedBytes(byte[])->void::: class info set loaded bytes
jdk.jshell.ClassTracker.ClassInfo#isLoaded()->boolean::: class info is loaded
jdk.jshell.ClassTracker.ClassInfo#isCurrent()->boolean::: class info is current
jdk.jshell.ClassTracker.ClassInfo#toClassBytecodes()->ClassBytecodes::: class info to class bytecodes
jdk.jshell.ClassTracker.ClassInfo#equals(Object)->boolean::: class info equals
jdk.jshell.ClassTracker.ClassInfo#hashCode()->int::: class info hash code
jdk.jshell.ClassTracker#markLoaded(ClassBytecodes[])->void::: class tracker mark loaded
jdk.jshell.ClassTracker#markLoaded(ClassBytecodes[], boolean[])->void::: class tracker mark loaded
jdk.jshell.ClassTracker#setCurrentBytes(String, byte[])->void::: class tracker set current bytes
jdk.jshell.ClassTracker#get(String)->ClassInfo::: class tracker get
jdk.jshell.CompletenessAnalyzer#scan(String)->CaInfo::: completeness analyzer scan
jdk.jshell.Corraller#corralType(ClassTree)->Wrap::: corraller corral type
jdk.jshell.Corraller#corralMethod(MethodTree)->Wrap::: corraller corral method
jdk.jshell.Corraller#visitBlock(JCBlock)->void::: corraller visit block
jdk.jshell.Corraller#visitVarDef(JCVariableDecl)->void::: corraller visit var def
jdk.jshell.Corraller#visitClassDef(JCClassDecl)->void::: corraller visit class def
jdk.jshell.DeclarationSnippet#corralled()->Wrap::: declaration snippet corralled
jdk.jshell.DeclarationSnippet#declareReferences()->Collection::: declaration snippet declare references
jdk.jshell.DeclarationSnippet#bodyReferences()->Collection::: declaration snippet body references
jdk.jshell.DeclarationSnippet#importLine(JShell)->String::: declaration snippet import line
jdk.jshell.Diag#isError()->boolean:::Indicates whether this diagnostic is an error (as opposed to a warning or note).
jdk.jshell.Diag#getPosition()->long:::Returns a character offset from the beginning of the source object associated with this diagnostic that indicates the location of the problem
jdk.jshell.Diag#getStartPosition()->long:::Returns the character offset from the beginning of the file associated with this diagnostic that indicates the start of the problem.
jdk.jshell.Diag#getEndPosition()->long:::Returns the character offset from the beginning of the file associated with this diagnostic that indicates the end of the problem.
jdk.jshell.Diag#getCode()->String:::Returns a diagnostic code indicating the type of diagnostic
jdk.jshell.Diag#getMessage(Locale)->String:::Returns a localized message for the given locale
jdk.jshell.Diag#snippetOrNull()->Snippet:::Internal: If this is from a compile/analyze wrapped in an outer class, extract the snippet
jdk.jshell.Diag#isUnreachableError()->boolean:::This is an unreachable-statement error
jdk.jshell.Diag#isNotAStatementError()->boolean:::This is a not-a-statement error
jdk.jshell.Diag#isResolutionError()->boolean:::This is a resolution error.
jdk.jshell.DiagList#addAll(Collection)->boolean::: diag list add all
jdk.jshell.DiagList#set(int, Diag)->Diag::: diag list set
jdk.jshell.DiagList#add(int, Diag)->void::: diag list add
jdk.jshell.DiagList#add(Diag)->boolean::: diag list add
jdk.jshell.DiagList#addAll(int, Collection)->boolean::: diag list add all
jdk.jshell.DiagList#remove(Object)->boolean::: diag list remove
jdk.jshell.DiagList#ofUnit(Unit)->DiagList::: diag list of unit
jdk.jshell.DiagList#hasErrors()->boolean::: diag list has errors
jdk.jshell.DiagList#hasResolutionErrorsAndNoOthers()->boolean::: diag list has resolution errors and no others
jdk.jshell.DiagList#hasUnreachableError()->boolean::: diag list has unreachable error
jdk.jshell.DiagList#hasNotStatement()->boolean::: diag list has not statement
jdk.jshell.DiagList#hasOtherThanNotStatementErrors()->boolean::: diag list has other than not statement errors
jdk.jshell.ErroneousSnippet#probableKind()->Kind:::Returns what appears to be the intended Kind in this erroneous snippet.
jdk.jshell.Eval#eval(String)->List:::Evaluates a snippet of source.
jdk.jshell.Eval#sourceToSnippetsWithWrappers(String)->List:::Converts the user source of a snippet into a Snippet list -- Snippet will have wrappers.
jdk.jshell.Eval#toScratchSnippets(String)->List:::Converts the user source of a snippet into a Snippet object (or list of objects in the case of: int x, y, z;)
jdk.jshell.Eval#drop(Snippet)->List::: eval drop
jdk.jshell.Eval#computeDeclareName(TypeSymbol)->String::: eval compute declare name
jdk.jshell.EvalException#getExceptionClassName()->String:::Returns the name of the Throwable subclass which was thrown in the executing client
jdk.jshell.EvalException#getCause()->JShellException:::Returns the wrapped cause of the throwable in the executing client represented by this EvalException or null if the cause is nonexistent or unknown.
jdk.jshell.ExpressionSnippet#name()->String:::Variable name which is the value of the expression
jdk.jshell.ExpressionSnippet#typeName()->String:::Type of the expression
jdk.jshell.ExpressionSnippet#key()->ExpressionKey::: expression snippet key
jdk.jshell.ExpressionToTypeInfo#expressionInfo(String, JShell)->ExpressionInfo:::Entry method: get expression info
jdk.jshell.ExpressionToTypeInfo#localVariableTypeForInitializer(String, JShell, boolean)->ExpressionInfo:::Entry method: get expression info corresponding to a local variable declaration if its type has been inferred automatically from the given initializer.
jdk.jshell.ExpressionToTypeInfo#listAnonymousClassesToConvert(Tree)->List:::List (in a stable order) all NewClassTree instances under from that should be converted to member classes
jdk.jshell.GeneralWrap#wrapped()->String::: general wrap wrapped
jdk.jshell.GeneralWrap#snippetIndexToWrapIndex(int)->int::: general wrap snippet index to wrap index
jdk.jshell.GeneralWrap#wrapIndexToSnippetIndex(int)->int::: general wrap wrap index to snippet index
jdk.jshell.GeneralWrap#wrapIndexToSnippetIndex(long)->int::: general wrap wrap index to snippet index
jdk.jshell.GeneralWrap#firstSnippetIndex()->int::: general wrap first snippet index
jdk.jshell.GeneralWrap#lastSnippetIndex()->int::: general wrap last snippet index
jdk.jshell.GeneralWrap#snippetLineToWrapLine(int)->int::: general wrap snippet line to wrap line
jdk.jshell.GeneralWrap#wrapLineToSnippetLine(int)->int::: general wrap wrap line to snippet line
jdk.jshell.GeneralWrap#firstSnippetLine()->int::: general wrap first snippet line
jdk.jshell.GeneralWrap#lastSnippetLine()->int::: general wrap last snippet line
jdk.jshell.GeneralWrap#debugPos(long)->String::: general wrap debug pos
jdk.jshell.ImportSnippet#name()->String:::The identifying name of the import
jdk.jshell.ImportSnippet#fullname()->String:::The qualified name of the import
jdk.jshell.ImportSnippet#isStatic()->boolean:::Indicates whether this snippet represents a static import.
jdk.jshell.ImportSnippet#key()->ImportKey::: import snippet key
jdk.jshell.ImportSnippet#importLine(JShell)->String::: import snippet import line
jdk.jshell.JShell.Builder#in(InputStream)->Builder:::Sets the input for the running evaluation (it's System.in)
jdk.jshell.JShell.Builder#out(PrintStream)->Builder:::Sets the output for the running evaluation (it's System.out)
jdk.jshell.JShell.Builder#err(PrintStream)->Builder:::Sets the error output for the running evaluation (it's System.err)
jdk.jshell.JShell.Builder#tempVariableNameGenerator(Supplier)->Builder:::Sets a generator of temp variable names for jdk.jshell.VarSnippet of jdk.jshell.Snippet.SubKind#TEMP_VAR_EXPRESSION_SUBKIND
jdk.jshell.JShell.Builder#idGenerator(BiFunction)->Builder:::Sets the generator of identifying names for Snippets
jdk.jshell.JShell.Builder#remoteVMOptions(String...)->Builder:::Sets additional VM options for launching the VM.
jdk.jshell.JShell.Builder#compilerOptions(String...)->Builder:::Adds compiler options
jdk.jshell.JShell.Builder#executionEngine(String)->Builder:::Sets the custom engine for execution
jdk.jshell.JShell.Builder#executionEngine(ExecutionControlProvider, Map)->Builder:::Sets the custom engine for execution
jdk.jshell.JShell.Builder#fileManager(Function)->Builder:::Configure the FileManager to be used by compilation and source analysis
jdk.jshell.JShell.Builder#build()->JShell:::Builds a JShell state engine
jdk.jshell.JShell#create()->JShell:::Create a new JShell state engine
jdk.jshell.JShell#builder()->Builder:::Factory method for JShell.Builder which, in-turn, is used for creating instances of JShell
jdk.jshell.JShell#sourceCodeAnalysis()->SourceCodeAnalysis:::Access to source code analysis functionality
jdk.jshell.JShell#eval(String)->List:::Evaluate the input String, including definition and/or execution, if applicable
jdk.jshell.JShell#drop(Snippet)->List:::Remove a declaration from the state
jdk.jshell.JShell#addToClasspath(String)->void:::The specified path is added to the end of the classpath used in eval()
jdk.jshell.JShell#stop()->void:::Attempt to stop currently running evaluation
jdk.jshell.JShell#close()->void:::Close this state engine
jdk.jshell.JShell#snippets()->Stream:::Return all snippets.
jdk.jshell.JShell#variables()->Stream:::Returns the active variable snippets
jdk.jshell.JShell#methods()->Stream:::Returns the active method snippets
jdk.jshell.JShell#types()->Stream:::Returns the active type declaration (class, interface, annotation type, and enum) snippets
jdk.jshell.JShell#imports()->Stream:::Returns the active import snippets
jdk.jshell.JShell#status(Snippet)->Status:::Return the status of the snippet
jdk.jshell.JShell#diagnostics(Snippet)->Stream:::Return the diagnostics of the most recent evaluation of the snippet
jdk.jshell.JShell#unresolvedDependencies(DeclarationSnippet)->Stream:::For jdk.jshell.Snippet.Status#RECOVERABLE_DEFINED RECOVERABLE_DEFINED or jdk.jshell.Snippet.Status#RECOVERABLE_NOT_DEFINED RECOVERABLE_NOT_DEFINED declarations, the names of current unresolved dependencies for the snippet
jdk.jshell.JShell#varValue(VarSnippet)->String:::Get the current value of a variable.
jdk.jshell.JShell#onSnippetEvent(Consumer)->Subscription:::Register a callback to be called when the Status of a snippet changes
jdk.jshell.JShell#onShutdown(Consumer)->Subscription:::Register a callback to be called when this JShell instance terminates
jdk.jshell.JShell#unsubscribe(Subscription)->void:::Cancel a callback subscription.
jdk.jshell.JShell.ExecutionEnvImpl#userIn()->InputStream::: execution env impl user in
jdk.jshell.JShell.ExecutionEnvImpl#userOut()->PrintStream::: execution env impl user out
jdk.jshell.JShell.ExecutionEnvImpl#userErr()->PrintStream::: execution env impl user err
jdk.jshell.JShell.ExecutionEnvImpl#extraRemoteVMOptions()->List::: execution env impl extra remote options
jdk.jshell.JShell.ExecutionEnvImpl#closeDown()->void::: execution env impl close down
jdk.jshell.JShell#executionControl()->ExecutionControl::: shell execution control
jdk.jshell.JShell#debug(int, String, Object...)->void::: shell debug
jdk.jshell.JShell#debug(Throwable, String)->void::: shell debug
jdk.jshell.JShell#nextKeyIndex()->int:::Generate the next key index, indicating a unique snippet signature.
jdk.jshell.JShell#closeDown()->void::: shell close down
jdk.jshell.JShell#checkIfAlive()->void:::Check if this JShell has been closed
jdk.jshell.JShell#messageFormat(String, Object...)->String:::Format using resource bundle look-up using MessageFormat
jdk.jshell.Key#index()->int:::The unique numeric identifier for the snippet
jdk.jshell.Key#kind()->Kind:::The kind for the key
jdk.jshell.Key#state()->JShell:::For foreign key testing.
jdk.jshell.Key.PersistentKey#name()->String:::Name of the snippet.
jdk.jshell.Key.TypeDeclKey#kind()->Kind::: type decl key kind
jdk.jshell.Key.TypeDeclKey#toString()->String::: type decl key to string
jdk.jshell.Key.MethodKey#kind()->Kind::: method key kind
jdk.jshell.Key.MethodKey#parameterTypes()->String:::The parameter types of the method
jdk.jshell.Key.MethodKey#toString()->String::: method key to string
jdk.jshell.Key.VarKey#kind()->Kind::: var key kind
jdk.jshell.Key.VarKey#toString()->String::: var key to string
jdk.jshell.Key.ImportKey#kind()->Kind::: import key kind
jdk.jshell.Key.ImportKey#snippetKind()->SubKind:::Which kind of import.
jdk.jshell.Key.ImportKey#toString()->String::: import key to string
jdk.jshell.Key.StatementKey#kind()->Kind::: statement key kind
jdk.jshell.Key.StatementKey#toString()->String::: statement key to string
jdk.jshell.Key.ExpressionKey#kind()->Kind::: expression key kind
jdk.jshell.Key.ExpressionKey#name()->String:::Variable name which is the value of the expression
jdk.jshell.Key.ExpressionKey#typeName()->String:::Type of the expression
jdk.jshell.Key.ExpressionKey#toString()->String::: expression key to string
jdk.jshell.Key.ErroneousKey#kind()->Kind::: erroneous key kind
jdk.jshell.Key.ErroneousKey#toString()->String::: erroneous key to string
jdk.jshell.KeyMap#keyForClass(String)->TypeDeclKey::: key map key for class
jdk.jshell.KeyMap#keyForMethod(String, String)->MethodKey::: key map key for method
jdk.jshell.KeyMap#keyForVariable(String)->VarKey::: key map key for variable
jdk.jshell.KeyMap#keyForImport(String, SubKind)->ImportKey::: key map key for import
jdk.jshell.KeyMap#keyForStatement()->StatementKey::: key map key for statement
jdk.jshell.KeyMap#keyForExpression(String, String)->ExpressionKey::: key map key for expression
jdk.jshell.KeyMap#keyForErroneous()->ErroneousKey::: key map key for erroneous
jdk.jshell.KeyMap#doesVariableNameExist(String)->boolean::: key map does variable name exist
jdk.jshell.KeyMap#importKeys()->Stream::: key map import keys
jdk.jshell.MaskCommentsAndModifiers#cleared()->String::: mask comments and modifiers cleared
jdk.jshell.MaskCommentsAndModifiers#mask()->String::: mask comments and modifiers mask
jdk.jshell.MaskCommentsAndModifiers#endsWithOpenComment()->boolean::: mask comments and modifiers ends with open comment
jdk.jshell.MemoryFileManager#getLocationAsPaths(Location)->Iterable::: memory file manager get location as paths
jdk.jshell.MemoryFileManager.SourceMemoryJavaFileObject#getOrigin()->Object::: source memory java file object get origin
jdk.jshell.MemoryFileManager.SourceMemoryJavaFileObject#getCharContent(boolean)->CharSequence::: source memory java file object get char content
jdk.jshell.MemoryFileManager.OutputMemoryJavaFileObject#getBytes()->byte[]::: output memory java file object get bytes
jdk.jshell.MemoryFileManager.OutputMemoryJavaFileObject#dump()->void::: output memory java file object dump
jdk.jshell.MemoryFileManager.OutputMemoryJavaFileObject#getName()->String::: output memory java file object get name
jdk.jshell.MemoryFileManager.OutputMemoryJavaFileObject#openOutputStream()->OutputStream:::Will provide the compiler with an output stream that leads to our byte array.
jdk.jshell.MemoryFileManager.OutputMemoryJavaFileObject#openInputStream()->InputStream::: output memory java file object open input stream
jdk.jshell.MemoryFileManager#dumpClasses()->void::: memory file manager dump classes
jdk.jshell.MemoryFileManager#createSourceFileObject(Object, String, String)->JavaFileObject::: memory file manager create source file object
jdk.jshell.MemoryFileManager#getClassLoader(JavaFileManager.Location)->ClassLoader:::Returns a class loader for loading plug-ins from the given location
jdk.jshell.MemoryFileManager#list(JavaFileManager.Location, String, Set, boolean)->Iterable:::Lists all file objects matching the given criteria in the given location
jdk.jshell.MemoryFileManager#inferBinaryName(JavaFileManager.Location, JavaFileObject)->String:::Infers a binary name of a file object based on a location
jdk.jshell.MemoryFileManager#isSameFile(FileObject, FileObject)->boolean:::Compares two file objects and return true if they represent the same underlying object.
jdk.jshell.MemoryFileManager#isSupportedOption(String)->int:::Determines if the given option is supported and if so, the number of arguments the option takes.
jdk.jshell.MemoryFileManager#handleOption(String, Iterator)->boolean:::Handles one option
jdk.jshell.MemoryFileManager#hasLocation(JavaFileManager.Location)->boolean:::Determines if a location is known to this file manager.
jdk.jshell.MemoryFileManager.ClassFileCreationListener#newClassFile(OutputMemoryJavaFileObject, JavaFileManager.Location, String, Kind, FileObject)->void::: class file creation listener new class file
jdk.jshell.MemoryFileManager#registerClassFileCreationListener(ClassFileCreationListener)->void::: memory file manager register class file creation listener
jdk.jshell.MemoryFileManager#getJavaFileForInput(JavaFileManager.Location, String, JavaFileObject.Kind)->JavaFileObject:::Returns a JavaFileObject file object for input representing the specified class of the specified kind in the given location.
jdk.jshell.MemoryFileManager#getJavaFileForOutput(JavaFileManager.Location, String, Kind, FileObject)->JavaFileObject:::Returns a JavaFileObject file object for output representing the specified class of the specified kind in the given location
jdk.jshell.MemoryFileManager#getFileForInput(JavaFileManager.Location, String, String)->FileObject:::Returns a FileObject file object for input representing the specified relative name in the specified package in the given location
jdk.jshell.MemoryFileManager#getFileForOutput(JavaFileManager.Location, String, String, FileObject)->FileObject:::Returns a FileObject file object for output representing the specified relative name in the specified package in the given location
jdk.jshell.MemoryFileManager#getLocationForModule(Location, String)->Location::: memory file manager get location for module
jdk.jshell.MemoryFileManager#getLocationForModule(Location, JavaFileObject)->Location::: memory file manager get location for module
jdk.jshell.MemoryFileManager#inferModuleName(Location)->String::: memory file manager infer module name
jdk.jshell.MemoryFileManager#listLocationsForModules(Location)->Iterable>::: memory file manager list locations for modules
jdk.jshell.MemoryFileManager#contains(Location, FileObject)->boolean::: memory file manager contains
jdk.jshell.MemoryFileManager#flush()->void:::Flushes any resources opened for output by this file manager directly or indirectly
jdk.jshell.MemoryFileManager#close()->void:::Releases any resources opened by this file manager directly or indirectly
jdk.jshell.MethodSnippet#parameterTypes()->String:::A String representation of the parameter types of the method.
jdk.jshell.MethodSnippet#signature()->String:::The full type signature of the method, including return type.
jdk.jshell.MethodSnippet#toString()->String::: method snippet to string
jdk.jshell.MethodSnippet#key()->MethodKey::: method snippet key
jdk.jshell.MethodSnippet#qualifiedParameterTypes()->String::: method snippet qualified parameter types
jdk.jshell.MethodSnippet#setQualifiedParameterTypes(String)->void::: method snippet set qualified parameter types
jdk.jshell.OuterImportSnippetWrap#wrapDiag(Diagnostic)->Diag::: outer import snippet wrap wrap diag
jdk.jshell.OuterImportSnippetWrap#toString()->String::: outer import snippet wrap to string
jdk.jshell.OuterSnippetsClassWrap#wrapLineToSnippet(int)->Snippet::: outer snippets class wrap wrap line to snippet
jdk.jshell.OuterSnippetsClassWrap#wrapDiag(Diagnostic)->Diag::: outer snippets class wrap wrap diag
jdk.jshell.OuterSnippetsClassWrap#ordinal(Snippet)->int::: outer snippets class wrap ordinal
jdk.jshell.OuterSnippetsClassWrap#className()->String::: outer snippets class wrap class name
jdk.jshell.OuterSnippetsClassWrap#toString()->String::: outer snippets class wrap to string
jdk.jshell.OuterWrap#wrapped()->String::: outer wrap wrapped
jdk.jshell.OuterWrap#snippetIndexToWrapIndex(int)->int::: outer wrap snippet index to wrap index
jdk.jshell.OuterWrap#wrapIndexToSnippetIndex(int)->int::: outer wrap wrap index to snippet index
jdk.jshell.OuterWrap#firstSnippetIndex()->int::: outer wrap first snippet index
jdk.jshell.OuterWrap#lastSnippetIndex()->int::: outer wrap last snippet index
jdk.jshell.OuterWrap#snippetLineToWrapLine(int)->int::: outer wrap snippet line to wrap line
jdk.jshell.OuterWrap#wrapLineToSnippetLine(int)->int::: outer wrap wrap line to snippet line
jdk.jshell.OuterWrap#firstSnippetLine()->int::: outer wrap first snippet line
jdk.jshell.OuterWrap#lastSnippetLine()->int::: outer wrap last snippet line
jdk.jshell.OuterWrap#className()->String::: outer wrap class name
jdk.jshell.OuterWrap#classFullName()->String::: outer wrap class full name
jdk.jshell.OuterWrap#hashCode()->int::: outer wrap hash code
jdk.jshell.OuterWrap#equals(Object)->boolean::: outer wrap equals
jdk.jshell.OuterWrap#toString()->String::: outer wrap to string
jdk.jshell.OuterWrap#wrapDiag(Diagnostic)->Diag::: outer wrap wrap diag
jdk.jshell.OuterWrap.WrappedDiagnostic#isError()->boolean::: wrapped diagnostic is error
jdk.jshell.OuterWrap.WrappedDiagnostic#getPosition()->long::: wrapped diagnostic get position
jdk.jshell.OuterWrap.WrappedDiagnostic#getStartPosition()->long::: wrapped diagnostic get start position
jdk.jshell.OuterWrap.WrappedDiagnostic#getEndPosition()->long::: wrapped diagnostic get end position
jdk.jshell.OuterWrap.WrappedDiagnostic#getCode()->String::: wrapped diagnostic get code
jdk.jshell.OuterWrap.WrappedDiagnostic#getMessage(Locale)->String::: wrapped diagnostic get message
jdk.jshell.OuterWrap.WrappedDiagnostic#isResolutionError()->boolean::: wrapped diagnostic is resolution error
jdk.jshell.OuterWrap.WrappedDiagnostic#toString()->String::: wrapped diagnostic to string
jdk.jshell.OuterWrapMap#getOuter(String)->OuterSnippetsClassWrap::: outer wrap map get outer
jdk.jshell.OuterWrapMap#wrapInClass(Set, Collection, List, List)->OuterWrap::: outer wrap map wrap in class
jdk.jshell.OuterWrapMap#wrapInTrialClass(Wrap)->OuterWrap::: outer wrap map wrap in trial class
jdk.jshell.OuterWrapMap#wrapImport(Wrap, Snippet)->OuterWrap::: outer wrap map wrap import
jdk.jshell.PersistentSnippet#name()->String:::Name of the Snippet.
jdk.jshell.ReplParser#parseCompilationUnit()->JCCompilationUnit:::As faithful a clone of the overridden method as possible while still achieving the goal of allowing the parse of a stand-alone snippet
jdk.jshell.ReplParser#replUnit(JCModifiers, Comment)->List::: repl parser repl unit
jdk.jshell.ReplParserFactory#preRegister(Context, boolean)->void::: repl parser factory pre register
jdk.jshell.ReplParserFactory#newParser(CharSequence, boolean, boolean, boolean)->JavacParser::: repl parser factory new parser
jdk.jshell.ReplParserFactory#newParser(CharSequence, boolean, boolean, boolean, boolean)->JavacParser::: repl parser factory new parser
jdk.jshell.ReplResolve#isStatic(Env)->boolean::: repl resolve is static
jdk.jshell.Snippet#id()->String:::The unique identifier for the snippet
jdk.jshell.Snippet#kind()->Kind:::The jdk.jshell.Snippet.Kind for the snippet
jdk.jshell.Snippet#subKind()->SubKind:::Return the SubKind of snippet
jdk.jshell.Snippet#source()->String:::Return the source code of the snippet.
jdk.jshell.Snippet#toString()->String::: snippet to string
jdk.jshell.Snippet#name()->String::: snippet name
jdk.jshell.Snippet#key()->Key::: snippet key
jdk.jshell.Snippet#unresolved()->List::: snippet unresolved
jdk.jshell.Snippet#diagnostics()->DiagList::: snippet diagnostics
jdk.jshell.Snippet#syntheticDiags()->DiagList::: snippet synthetic diags
jdk.jshell.Snippet#corralled()->Wrap::: snippet corralled
jdk.jshell.Snippet#declareReferences()->Collection::: snippet declare references
jdk.jshell.Snippet#bodyReferences()->Collection::: snippet body references
jdk.jshell.Snippet#importLine(JShell)->String::: snippet import line
jdk.jshell.Snippet#setId(String)->void::: snippet set id
jdk.jshell.Snippet#setSequenceNumber(int)->void::: snippet set sequence number
jdk.jshell.Snippet#setOuterWrap(OuterWrap)->void::: snippet set outer wrap
jdk.jshell.Snippet#setCompilationStatus(Status, List, DiagList)->void::: snippet set compilation status
jdk.jshell.Snippet#setDiagnostics(DiagList)->void::: snippet set diagnostics
jdk.jshell.Snippet#setFailed(DiagList)->void::: snippet set failed
jdk.jshell.Snippet#setDropped()->void::: snippet set dropped
jdk.jshell.Snippet#setOverwritten()->void::: snippet set overwritten
jdk.jshell.Snippet#status()->Status::: snippet status
jdk.jshell.Snippet#className()->String::: snippet class name
jdk.jshell.Snippet#classFullName()->String::: snippet class full name
jdk.jshell.Snippet#outerWrap()->OuterWrap:::Top-level wrap
jdk.jshell.Snippet#sequenceNumber()->int:::Basically, class version for this Key.
jdk.jshell.Snippet#guts()->Wrap::: snippet guts
jdk.jshell.Snippet#isExecutable()->boolean::: snippet is executable
jdk.jshell.SnippetEvent#snippet()->Snippet:::The Snippet which has changed
jdk.jshell.SnippetEvent#previousStatus()->Status:::The status before the transition
jdk.jshell.SnippetEvent#status()->Status:::The after status
jdk.jshell.SnippetEvent#isSignatureChange()->boolean:::Indicates whether the signature has changed
jdk.jshell.SnippetEvent#causeSnippet()->Snippet:::Either the snippet whose change caused this update or null
jdk.jshell.SnippetEvent#exception()->JShellException:::An instance of jdk.jshell.UnresolvedReferenceException, if an unresolved reference was encountered, or an instance of jdk.jshell.EvalException if an exception was thrown during execution, otherwise null.
jdk.jshell.SnippetEvent#value()->String:::The result value of successful run
jdk.jshell.SnippetEvent#toString()->String:::Return a string representation of the event
jdk.jshell.SnippetMaps#installSnippet(Snippet)->void::: snippet maps install snippet
jdk.jshell.SnippetMaps#getSnippet(Key)->Snippet::: snippet maps get snippet
jdk.jshell.SnippetMaps#getSnippet(int)->Snippet::: snippet maps get snippet
jdk.jshell.SnippetMaps#getSnippetDeadOrAlive(int)->Snippet::: snippet maps get snippet dead or alive
jdk.jshell.SnippetMaps#snippetList()->List::: snippet maps snippet list
jdk.jshell.SnippetMaps#packageAndImportsExcept(Set, Collection)->String::: snippet maps package and imports except
jdk.jshell.SnippetMaps#getDependents(Snippet)->List::: snippet maps get dependents
jdk.jshell.SnippetMaps#mapDependencies(Snippet)->void::: snippet maps map dependencies
jdk.jshell.SnippetMaps#fullClassNameAndPackageToClass(String, String)->String::: snippet maps full class name and package to class
jdk.jshell.SourceCodeAnalysis#analyzeCompletion(String)->CompletionInfo:::Given an input string, find the first snippet of code (one statement, definition, import, or expression) and evaluate if it is complete.
jdk.jshell.SourceCodeAnalysis#completionSuggestions(String, int, int[])->List:::Compute possible follow-ups for the given input
jdk.jshell.SourceCodeAnalysis#documentation(String, int, boolean)->List:::Compute documentation for the given user's input
jdk.jshell.SourceCodeAnalysis#analyzeType(String, int)->String:::Infer the type of the given expression
jdk.jshell.SourceCodeAnalysis#listQualifiedNames(String, int)->QualifiedNames:::List qualified names known for the simple name in the given code immediately to the left of the given cursor position
jdk.jshell.SourceCodeAnalysis#wrapper(Snippet)->SnippetWrapper:::Returns the wrapper information for the Snippet
jdk.jshell.SourceCodeAnalysis#wrappers(String)->List:::Returns the wrapper information for the snippet within the input source string
jdk.jshell.SourceCodeAnalysis#sourceToSnippets(String)->List:::Converts the source code of a snippet into a Snippet object (or list of Snippet objects in the case of some var declarations, e.g.: int x, y, z;)
jdk.jshell.SourceCodeAnalysis#dependents(Snippet)->Collection:::Returns a collection of Snippets which might need updating if the given Snippet is updated
jdk.jshell.SourceCodeAnalysis.CompletionInfo#completeness()->Completeness:::The analyzed completeness of the input.
jdk.jshell.SourceCodeAnalysis.CompletionInfo#remaining()->String:::Input remaining after the complete part of the source.
jdk.jshell.SourceCodeAnalysis.CompletionInfo#source()->String:::Source code for the first Snippet of code input
jdk.jshell.SourceCodeAnalysis.Suggestion#continuation()->String:::The candidate continuation of the given user's input.
jdk.jshell.SourceCodeAnalysis.Suggestion#matchesType()->boolean:::Indicates whether input continuation matches the target type and is thus more likely to be the desired continuation
jdk.jshell.SourceCodeAnalysis.Documentation#signature()->String:::The signature of the given element.
jdk.jshell.SourceCodeAnalysis.Documentation#javadoc()->String:::The javadoc of the given element.
jdk.jshell.SourceCodeAnalysis.QualifiedNames#getNames()->List:::Known qualified names for the given simple name in the original code.
jdk.jshell.SourceCodeAnalysis.QualifiedNames#getSimpleNameLength()->int:::The length of the simple name in the original code for which the qualified names where gathered.
jdk.jshell.SourceCodeAnalysis.QualifiedNames#isUpToDate()->boolean:::Indicates whether the result is based on up-to-date data
jdk.jshell.SourceCodeAnalysis.QualifiedNames#isResolvable()->boolean:::Indicates whether the given simple name in the original code refers to a resolvable element.
jdk.jshell.SourceCodeAnalysis.SnippetWrapper#source()->String:::Returns the input that is wrapped
jdk.jshell.SourceCodeAnalysis.SnippetWrapper#wrapped()->String:::Returns a Java class definition that wraps the SnippetWrapper#source() or, if an import, the import source
jdk.jshell.SourceCodeAnalysis.SnippetWrapper#fullClassName()->String:::Returns the fully qualified class name of the SnippetWrapper#wrapped()  class
jdk.jshell.SourceCodeAnalysis.SnippetWrapper#kind()->Snippet.Kind:::Returns the Snippet.Kind of the SnippetWrapper#source().
jdk.jshell.SourceCodeAnalysis.SnippetWrapper#sourceToWrappedPosition(int)->int:::Maps character position within the source to character position within the wrapped.
jdk.jshell.SourceCodeAnalysis.SnippetWrapper#wrappedToSourcePosition(int)->int:::Maps character position within the wrapped to character position within the source.
jdk.jshell.SourceCodeAnalysisImpl#analyzeCompletion(String)->CompletionInfo::: source code analysis impl analyze completion
jdk.jshell.SourceCodeAnalysisImpl#completionSuggestions(String, int, int[])->List::: source code analysis impl completion suggestions
jdk.jshell.SourceCodeAnalysisImpl#wrapper(Snippet)->SnippetWrapper::: source code analysis impl wrapper
jdk.jshell.SourceCodeAnalysisImpl#wrappers(String)->List::: source code analysis impl wrappers
jdk.jshell.SourceCodeAnalysisImpl#sourceToSnippets(String)->List::: source code analysis impl source to snippets
jdk.jshell.SourceCodeAnalysisImpl#dependents(Snippet)->Collection::: source code analysis impl dependents
jdk.jshell.SourceCodeAnalysisImpl#classpathChanged()->void::: source code analysis impl classpath changed
jdk.jshell.SourceCodeAnalysisImpl#documentation(String, int, boolean)->List::: source code analysis impl documentation
jdk.jshell.SourceCodeAnalysisImpl#close()->void::: source code analysis impl close
jdk.jshell.SourceCodeAnalysisImpl#analyzeType(String, int)->String::: source code analysis impl analyze type
jdk.jshell.SourceCodeAnalysisImpl#listQualifiedNames(String, int)->QualifiedNames::: source code analysis impl list qualified names
jdk.jshell.SourceCodeAnalysisImpl#suspendIndexing()->void::: source code analysis impl suspend indexing
jdk.jshell.SourceCodeAnalysisImpl#resumeIndexing()->void::: source code analysis impl resume indexing
jdk.jshell.SourceCodeAnalysisImpl#isJRTMarkerFile(Path)->boolean::: source code analysis impl is marker file
jdk.jshell.SourceCodeAnalysisImpl#waitBackgroundTaskFinished()->void::: source code analysis impl wait background task finished
jdk.jshell.TaskFactory#addToClasspath(String)->void::: task factory add to classpath
jdk.jshell.TaskFactory#fileManager()->MemoryFileManager::: task factory file manager
jdk.jshell.TaskFactory#parse(String, boolean, Worker)->Z::: task factory parse
jdk.jshell.TaskFactory#analyze(OuterWrap, Worker)->Z::: task factory analyze
jdk.jshell.TaskFactory#analyze(OuterWrap, List, Worker)->Z::: task factory analyze
jdk.jshell.TaskFactory#analyze(Collection, Worker)->Z::: task factory analyze
jdk.jshell.TaskFactory#analyze(Collection, List, Worker)->Z::: task factory analyze
jdk.jshell.TaskFactory#compile(Collection, Worker)->Z::: task factory compile
jdk.jshell.TaskFactory.Worker#withTask(T)->Z::: worker with task
jdk.jshell.TaskFactory#parse(String, Worker)->Z::: task factory parse
jdk.jshell.TaskFactory.ParseTask#units()->List::: parse task units
jdk.jshell.TaskFactory.ParseTask#cuTrees()->Iterable::: parse task cu trees
jdk.jshell.TaskFactory.AnalyzeTask#cuTrees()->Iterable::: analyze task cu trees
jdk.jshell.TaskFactory.AnalyzeTask#getElements()->Elements::: analyze task get elements
jdk.jshell.TaskFactory.AnalyzeTask#getTypes()->javax.lang.model.util.Types::: analyze task get types
jdk.jshell.TaskFactory.CompileTask#compile()->boolean::: compile task compile
jdk.jshell.TaskFactory.CompileTask#classList(OuterWrap)->List::: compile task class list
jdk.jshell.TaskFactory.CompileTask#cuTrees()->Iterable::: compile task cu trees
jdk.jshell.TaskFactory.BaseTask#cuTrees()->Iterable::: base task cu trees
jdk.jshell.TaskFactory.BaseTask#firstCuTree()->CompilationUnitTree::: base task first cu tree
jdk.jshell.TaskFactory.BaseTask#diag(Diagnostic)->Diag::: base task diag
jdk.jshell.TaskFactory.BaseTask#getContext()->Context::: base task get context
jdk.jshell.TaskFactory.BaseTask#types()->Types::: base task types
jdk.jshell.TaskFactory.BaseTask#messages()->JavacMessages::: base task messages
jdk.jshell.TaskFactory.BaseTask#trees()->Trees::: base task trees
jdk.jshell.TaskFactory.BaseTask#getDiagnostics()->DiagList::: base task get diagnostics
jdk.jshell.TaskFactory.BaseTask#hasErrors()->boolean::: base task has errors
jdk.jshell.TaskFactory.BaseTask#shortErrorMessage()->String::: base task short error message
jdk.jshell.TaskFactory.BaseTask#debugPrintDiagnostics(String)->void::: base task debug print diagnostics
jdk.jshell.TreeDependencyScanner#scan(Tree)->void::: tree dependency scanner scan
jdk.jshell.TreeDependencyScanner#declareReferences()->Collection::: tree dependency scanner declare references
jdk.jshell.TreeDependencyScanner#bodyReferences()->Collection::: tree dependency scanner body references
jdk.jshell.TreeDependencyScanner#visitClass(ClassTree, Set)->Void::: tree dependency scanner visit class
jdk.jshell.TreeDependencyScanner#visitMethod(MethodTree, Set)->Void::: tree dependency scanner visit method
jdk.jshell.TreeDependencyScanner#visitVariable(VariableTree, Set)->Void::: tree dependency scanner visit variable
jdk.jshell.TreeDependencyScanner#visitPackage(PackageTree, Set)->Void::: tree dependency scanner visit package
jdk.jshell.TreeDependencyScanner#visitImport(ImportTree, Set)->Void::: tree dependency scanner visit import
jdk.jshell.TreeDependencyScanner#visitMemberSelect(MemberSelectTree, Set)->Void::: tree dependency scanner visit member select
jdk.jshell.TreeDependencyScanner#visitIdentifier(IdentifierTree, Set)->Void::: tree dependency scanner visit identifier
jdk.jshell.TreeDissector#createByFirstClass(TaskFactory.BaseTask)->TreeDissector::: tree dissector create by first class
jdk.jshell.TreeDissector#createBySnippet(TaskFactory.BaseTask, Snippet)->TreeDissector::: tree dissector create by snippet
jdk.jshell.TreeDissector#types()->Types::: tree dissector types
jdk.jshell.TreeDissector#trees()->Trees::: tree dissector trees
jdk.jshell.TreeDissector#getSourcePositions()->SourcePositions::: tree dissector get source positions
jdk.jshell.TreeDissector#getStartPosition(Tree)->int::: tree dissector get start position
jdk.jshell.TreeDissector#getEndPosition(Tree)->int::: tree dissector get end position
jdk.jshell.TreeDissector#treeToRange(Tree)->Range::: tree dissector tree to range
jdk.jshell.TreeDissector#treeListToRange(List)->Range::: tree dissector tree list to range
jdk.jshell.TreeDissector#method(MethodSnippet)->MethodTree::: tree dissector method
jdk.jshell.TreeDissector#firstStatement()->StatementTree::: tree dissector first statement
jdk.jshell.TreeDissector#firstVariable()->VariableTree::: tree dissector first variable
jdk.jshell.TreeDissector#typeOfMethod(MethodSnippet)->String::: tree dissector type of method
jdk.jshell.TreeDissector#signature(Types, MethodType)->String::: tree dissector signature
jdk.jshell.TreeDissector#printType(AnalyzeTask, JShell, TypeMirror)->String::: tree dissector print type
jdk.jshell.TypeDeclSnippet#key()->TypeDeclKey::: type decl snippet key
jdk.jshell.TypePrinter#toString(Type)->String::: type printer to string
jdk.jshell.TypePrinter#localize(Locale, String, Object...)->String::: type printer localize
jdk.jshell.TypePrinter#capturedVarId(Type.CapturedType, Locale)->String::: type printer captured var id
jdk.jshell.TypePrinter#visitCapturedType(Type.CapturedType, Locale)->String::: type printer visit captured type
jdk.jshell.TypePrinter#visitType(Type, Locale)->String::: type printer visit type
jdk.jshell.TypePrinter#className(ClassType, boolean, Locale)->String:::Converts a class name into a (possibly localized) string
jdk.jshell.TypePrinter#visitClassSymbol(ClassSymbol, Locale)->String::: type printer visit class symbol
jdk.jshell.TypePrinter#visitPackageSymbol(PackageSymbol, Locale)->String::: type printer visit package symbol
jdk.jshell.Unit#hashCode()->int::: unit hash code
jdk.jshell.Unit#equals(Object)->boolean::: unit equals
jdk.jshell.Unit#snippet()->Snippet::: unit snippet
jdk.jshell.Unit#isDependency()->boolean::: unit is dependency
jdk.jshell.Unit#initialize()->void::: unit initialize
jdk.jshell.Unit#setWrap(Collection, Collection)->void::: unit set wrap
jdk.jshell.Unit#setDiagnostics(AnalyzeTask)->void::: unit set diagnostics
jdk.jshell.Unit#setDiagnostics(DiagList)->void::: unit set diagnostics
jdk.jshell.Unit#corralIfNeeded(Collection)->boolean:::If it meets the conditions for corralling, install the corralled wrap
jdk.jshell.Unit#setCorralledDiagnostics(AnalyzeTask)->void::: unit set corralled diagnostics
jdk.jshell.Unit#smashingErrorDiagnostics(CompileTask)->boolean::: unit smashing error diagnostics
jdk.jshell.Unit#setStatus(AnalyzeTask)->void::: unit set status
jdk.jshell.Unit#isDefined()->boolean::: unit is defined
jdk.jshell.Unit#classesToLoad(List)->Stream:::Process the class information from the last compile
jdk.jshell.Unit#doRedefines()->boolean:::Redefine classes needing redefine
jdk.jshell.Unit#markForReplacement()->void::: unit mark for replacement
jdk.jshell.Unit#effectedDependents()->Stream::: unit effected dependents
jdk.jshell.Unit#dependents()->Stream::: unit dependents
jdk.jshell.Unit#finish()->void::: unit finish
jdk.jshell.Unit#event(String, JShellException)->SnippetEvent::: unit event
jdk.jshell.Unit#secondaryEvents()->List::: unit secondary events
jdk.jshell.Unit#toString()->String::: unit to string
jdk.jshell.UnresolvedReferenceException#getSnippet()->DeclarationSnippet:::Return the Snippet which has the unresolved reference(s).
jdk.jshell.Util#isDoIt(Name)->boolean::: util is do it
jdk.jshell.Util#isDoIt(String)->boolean::: util is do it
jdk.jshell.Util#expunge(String)->String::: util expunge
jdk.jshell.Util#isInJShellClass(String)->boolean:::Check if this is the name of something in JShell.
jdk.jshell.Util#asLetters(int)->String::: util as letters
jdk.jshell.Util#trimEnd(String)->String::: util trim end
jdk.jshell.Util#stream(Iterable)->Stream::: util stream
jdk.jshell.Util#join(String[], String[])->String[]::: util join
jdk.jshell.VarSnippet#typeName()->String:::A String representation of the type of the variable.
jdk.jshell.VarSnippet#importLine(JShell)->String::: var snippet import line
jdk.jshell.Wrap#methodWrap(String)->Wrap::: wrap method wrap
jdk.jshell.Wrap#methodReturnWrap(String)->Wrap::: wrap method return wrap
jdk.jshell.Wrap#methodUnreachableSemiWrap(String)->Wrap::: wrap method unreachable semi wrap
jdk.jshell.Wrap#methodUnreachableWrap(String)->Wrap::: wrap method unreachable wrap
jdk.jshell.Wrap#varWrap(String, Wrap, String, Range, Wrap, boolean, Wrap)->Wrap:::Create a stub of a compilable representation of a variable snippet
jdk.jshell.Wrap#tempVarWrap(String, String, String, Wrap)->Wrap::: wrap temp var wrap
jdk.jshell.Wrap#simpleWrap(String)->Wrap::: wrap simple wrap
jdk.jshell.Wrap#identityWrap(String)->Wrap::: wrap identity wrap
jdk.jshell.Wrap#rangeWrap(String, Range)->Wrap::: wrap range wrap
jdk.jshell.Wrap#classMemberWrap(String)->Wrap::: wrap class member wrap
jdk.jshell.Wrap.Range#part(String)->String::: range part
jdk.jshell.Wrap.Range#length()->int::: range length
jdk.jshell.Wrap.Range#isEmpty()->boolean::: range is empty
jdk.jshell.Wrap.Range#verify(String)->void::: range verify
jdk.jshell.Wrap.Range#toString()->String::: range to string
jdk.jshell.Wrap.CompoundWrap#wrapped()->String::: compound wrap wrapped
jdk.jshell.Wrap.CompoundWrap#snippetIndexToWrapIndex(int)->int::: compound wrap snippet index to wrap index
jdk.jshell.Wrap.CompoundWrap#wrapIndexToWrap(long)->Wrap::: compound wrap wrap index to wrap
jdk.jshell.Wrap.CompoundWrap#wrapIndexToSnippetIndex(int)->int::: compound wrap wrap index to snippet index
jdk.jshell.Wrap.CompoundWrap#firstSnippetIndex()->int::: compound wrap first snippet index
jdk.jshell.Wrap.CompoundWrap#lastSnippetIndex()->int::: compound wrap last snippet index
jdk.jshell.Wrap.CompoundWrap#snippetLineToWrapLine(int)->int::: compound wrap snippet line to wrap line
jdk.jshell.Wrap.CompoundWrap#wrapLineToWrap(int)->Wrap::: compound wrap wrap line to wrap
jdk.jshell.Wrap.CompoundWrap#wrapLineToSnippetLine(int)->int::: compound wrap wrap line to snippet line
jdk.jshell.Wrap.CompoundWrap#firstSnippetLine()->int::: compound wrap first snippet line
jdk.jshell.Wrap.CompoundWrap#lastSnippetLine()->int::: compound wrap last snippet line
jdk.jshell.Wrap.CompoundWrap#toString()->String::: compound wrap to string

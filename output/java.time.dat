Clock#systemUTC():::Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the UTC time-zone:::
Clock#systemDefaultZone():::Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone:::ZoneId.systemDefault
Clock#system(ZoneId):::Obtains a clock that returns the current instant using the best available system clock:::Objects.requireNonNull
Clock#tickMillis(ZoneId):::Obtains a clock that returns the current instant ticking in whole milliseconds using the best available system clock:::this.system
Clock#tickSeconds(ZoneId):::Obtains a clock that returns the current instant ticking in whole seconds using the best available system clock:::this.system
Clock#tickMinutes(ZoneId):::Obtains a clock that returns the current instant ticking in whole minutes using the best available system clock:::this.system
Clock#tick(Clock, Duration):::Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration:::Objects.requireNonNull->Objects.requireNonNull->tickDuration.isNegative->tickDuration.toNanos
Clock#fixed(Instant, ZoneId):::Obtains a clock that always returns the same instant:::Objects.requireNonNull->Objects.requireNonNull
Clock#offset(Clock, Duration):::Obtains a clock that returns instants from the specified clock with the specified duration added  This clock wraps another clock, returning instants that are later by the specified duration:::Objects.requireNonNull->Objects.requireNonNull->offsetDuration.equals
Clock#getZone():::Gets the time-zone being used to create dates and times:::
Clock#withZone(ZoneId):::Returns a copy of this clock with a different time-zone:::
Clock#millis():::Gets the current millisecond instant of the clock:::instant().toEpochMilli
Clock#instant():::Gets the current instant of the clock:::
Clock#equals(Object):::Checks if this clock is equal to another clock:::super.equals
Clock#hashCode():::A hash code for this clock:::super.hashCode
Duration#ofDays(long):::Obtains a Duration representing a number of standard 24 hour days:::Math.multiplyExact->this.create
Duration#ofHours(long):::Obtains a Duration representing a number of standard hours:::Math.multiplyExact->this.create
Duration#ofMinutes(long):::Obtains a Duration representing a number of standard minutes:::Math.multiplyExact->this.create
Duration#ofSeconds(long):::Obtains a Duration representing a number of seconds:::this.create
Duration#ofSeconds(long, long):::Obtains a Duration representing a number of seconds and an adjustment in nanoseconds:::Math.floorDiv->Math.addExact->Math.floorMod->this.create
Duration#ofMillis(long):::Obtains a Duration representing a number of milliseconds:::this.create
Duration#ofNanos(long):::Obtains a Duration representing a number of nanoseconds:::this.create
Duration#of(long, TemporalUnit):::Obtains a Duration representing an amount in the specified unit:::ZERO.plus
Duration#from(TemporalAmount):::Obtains an instance of Duration from a temporal amount:::Objects.requireNonNull->amount.get->duration.plus->amount.getUnits
Duration#parse(CharSequence):::Obtains a Duration from a text string such as PnDTnHnMn.nS:::Objects.requireNonNull->Lazy.PATTERN.matcher->matcher.matches->matcher.start->matcher.end->this.charMatch->matcher.start->matcher.end->this.charMatch->matcher.start->matcher.end->matcher.start->matcher.end->matcher.start->matcher.end->matcher.start->matcher.end->matcher.start->matcher.end->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->text.charAt->this.parseFraction->new DateTimeParseException("Text cannot be parsed to a Duration: overflow", text, 0).initCause->this.create
Duration#between(Temporal, Temporal):::Obtains a Duration representing the duration between two temporal objects:::startInclusive.until->endExclusive.getLong->startInclusive.getLong->this.ofSeconds->startInclusive.until->this.ofNanos
Duration#get(TemporalUnit):::Gets the value of the requested unit:::
Duration#getUnits():::Gets the set of units supported by this duration:::
Duration#isZero():::Checks if this duration is zero length:::
Duration#isNegative():::Checks if this duration is negative, excluding zero:::
Duration#getSeconds():::Gets the number of seconds in this duration:::
Duration#getNano():::Gets the number of nanoseconds within the second in this duration:::
Duration#withSeconds(long):::Returns a copy of this duration with the specified amount of seconds:::this.create
Duration#withNanos(int):::Returns a copy of this duration with the specified nano-of-second:::NANO_OF_SECOND.checkValidIntValue->this.create
Duration#plus(Duration):::Returns a copy of this duration with the specified duration added:::duration.getSeconds->duration.getNano->this.plus
Duration#plus(long, TemporalUnit):::Returns a copy of this duration with the specified duration added:::Objects.requireNonNull->Math.multiplyExact->this.plus->unit.isDurationEstimated->this.plusNanos->plusSeconds((amountToAdd / (1000_000L * 1000)) * 1000).plusNanos->this.plusMillis->this.plusSeconds->Math.multiplyExact->this.plusSeconds->unit.getDuration().multipliedBy->duration.getNano->plusSeconds(duration.getSeconds()).plusNanos
Duration#plusDays(long):::Returns a copy of this duration with the specified duration in standard 24 hour days added:::Math.multiplyExact->this.plus
Duration#plusHours(long):::Returns a copy of this duration with the specified duration in hours added:::Math.multiplyExact->this.plus
Duration#plusMinutes(long):::Returns a copy of this duration with the specified duration in minutes added:::Math.multiplyExact->this.plus
Duration#plusSeconds(long):::Returns a copy of this duration with the specified duration in seconds added:::this.plus
Duration#plusMillis(long):::Returns a copy of this duration with the specified duration in milliseconds added:::this.plus
Duration#plusNanos(long):::Returns a copy of this duration with the specified duration in nanoseconds added:::this.plus
Duration#minus(Duration):::Returns a copy of this duration with the specified duration subtracted:::duration.getSeconds->duration.getNano->plus(Long.MAX_VALUE, -nanosToSubtract).plus->this.plus
Duration#minus(long, TemporalUnit):::Returns a copy of this duration with the specified duration subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
Duration#minusDays(long):::Returns a copy of this duration with the specified duration in standard 24 hour days subtracted:::this.plusDays->plusDays(Long.MAX_VALUE).plusDays
Duration#minusHours(long):::Returns a copy of this duration with the specified duration in hours subtracted:::this.plusHours->plusHours(Long.MAX_VALUE).plusHours
Duration#minusMinutes(long):::Returns a copy of this duration with the specified duration in minutes subtracted:::this.plusMinutes->plusMinutes(Long.MAX_VALUE).plusMinutes
Duration#minusSeconds(long):::Returns a copy of this duration with the specified duration in seconds subtracted:::this.plusSeconds->plusSeconds(Long.MAX_VALUE).plusSeconds
Duration#minusMillis(long):::Returns a copy of this duration with the specified duration in milliseconds subtracted:::this.plusMillis->plusMillis(Long.MAX_VALUE).plusMillis
Duration#minusNanos(long):::Returns a copy of this duration with the specified duration in nanoseconds subtracted:::this.plusNanos->plusNanos(Long.MAX_VALUE).plusNanos
Duration#multipliedBy(long):::Returns a copy of this duration multiplied by the scalar:::BigDecimal.valueOf->toBigDecimalSeconds().multiply->this.create
Duration#dividedBy(long):::Returns a copy of this duration divided by the specified value:::BigDecimal.valueOf->toBigDecimalSeconds().divide->this.create
Duration#dividedBy(Duration):::Returns number of whole times a specified Duration occurs within this Duration:::Objects.requireNonNull->this.toBigDecimalSeconds->divisor.toBigDecimalSeconds->dividendBigD.divideToIntegralValue(divisorBigD).longValueExact
Duration#negated():::Returns a copy of this duration with the length negated:::this.multipliedBy
Duration#abs():::Returns a copy of this duration with a positive length:::this.isNegative->this.negated
Duration#addTo(Temporal):::Adds this duration to the specified temporal object:::temporal.plus->temporal.plus
Duration#subtractFrom(Temporal):::Subtracts this duration from the specified temporal object:::temporal.minus->temporal.minus
Duration#toDays():::Gets the number of days in this duration:::
Duration#toHours():::Gets the number of hours in this duration:::
Duration#toMinutes():::Gets the number of minutes in this duration:::
Duration#toSeconds():::Gets the number of seconds in this duration:::
Duration#toMillis():::Converts this duration to the total length in milliseconds:::Math.multiplyExact->Math.addExact
Duration#toNanos():::Converts this duration to the total length in nanoseconds expressed as a long:::Math.multiplyExact->Math.addExact
Duration#toDaysPart():::Extracts the number of days in the duration:::
Duration#toHoursPart():::Extracts the number of hours part in the duration:::this.toHours
Duration#toMinutesPart():::Extracts the number of minutes part in the duration:::this.toMinutes
Duration#toSecondsPart():::Extracts the number of seconds part in the duration:::
Duration#toMillisPart():::Extracts the number of milliseconds part of the duration:::
Duration#toNanosPart():::Get the nanoseconds part within seconds of the duration:::
Duration#truncatedTo(TemporalUnit):::Returns a copy of this Duration truncated to the specified unit:::Objects.requireNonNull->unit.getDuration->unitDur.getSeconds->unitDur.toNanos->this.plusNanos
Duration#compareTo(Duration):::Compares this duration to the specified Duration:::Long.compare
Duration#equals(Object):::Checks if this duration is equal to the specified Duration:::
Duration#hashCode():::A hash code for this duration.:::
Duration#toString():::A string representation of this duration using ISO-8601 seconds based representation, such as PT8H6M12.345S:::buf.append->buf.append(hours).append->buf.append(minutes).append->buf.length->buf.toString->buf.append->buf.append->buf.append->buf.length->buf.append->buf.append->buf.length->buf.setLength->buf.length->buf.charAt->buf.setCharAt->buf.append->buf.toString
Instant#now():::Obtains the current instant from the system clock:::Clock.systemUTC().instant
Instant#now(Clock):::Obtains the current instant from the specified clock:::Objects.requireNonNull->clock.instant
Instant#ofEpochSecond(long):::Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z:::this.create
Instant#ofEpochSecond(long, long):::Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second:::Math.floorDiv->Math.addExact->Math.floorMod->this.create
Instant#ofEpochMilli(long):::Obtains an instance of Instant using milliseconds from the epoch of 1970-01-01T00:00:00Z:::Math.floorDiv->Math.floorMod->this.create
Instant#from(TemporalAccessor):::Obtains an instance of Instant from a temporal object:::Objects.requireNonNull->temporal.getClass().getName->temporal.getLong->temporal.get->Instant.ofEpochSecond
Instant#parse(CharSequence):::Obtains an instance of Instant from a text string such as 2007-12-03T10:15:30.00Z:::DateTimeFormatter.ISO_INSTANT.parse
Instant#isSupported(TemporalField):::Checks if the specified field is supported:::field.isSupportedBy
Instant#isSupported(TemporalUnit):::Checks if the specified unit is supported:::unit.isTimeBased->unit.isSupportedBy
Instant#range(TemporalField):::Gets the range of valid values for the specified field:::Temporal.super.range
Instant#get(TemporalField):::Gets the value of the specified field from this instant as an int:::field.getFrom->range(field).checkValidIntValue
Instant#getLong(TemporalField):::Gets the value of the specified field from this instant as a long:::field.getFrom
Instant#getEpochSecond():::Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z:::
Instant#getNano():::Gets the number of nanoseconds, later along the time-line, from the start of the second:::
Instant#with(TemporalAdjuster):::Returns an adjusted copy of this instant:::adjuster.adjustInto
Instant#with(TemporalField, long):::Returns a copy of this instant with the specified field set to a new value:::f.checkValidValue->this.create->this.create->this.create->this.create->field.adjustInto
Instant#truncatedTo(TemporalUnit):::Returns a copy of this Instant truncated to the specified unit:::unit.getDuration->unitDur.getSeconds->unitDur.toNanos->Math.floorDiv->this.plusNanos
Instant#plus(TemporalAmount):::Returns a copy of this instant with the specified amount added:::amountToAdd.addTo
Instant#plus(long, TemporalUnit):::Returns a copy of this instant with the specified amount added:::this.plusNanos->this.plus->this.plusMillis->this.plusSeconds->Math.multiplyExact->this.plusSeconds->Math.multiplyExact->this.plusSeconds->Math.multiplyExact->this.plusSeconds->Math.multiplyExact->this.plusSeconds->unit.addTo
Instant#plusSeconds(long):::Returns a copy of this instant with the specified duration in seconds added:::this.plus
Instant#plusMillis(long):::Returns a copy of this instant with the specified duration in milliseconds added:::this.plus
Instant#plusNanos(long):::Returns a copy of this instant with the specified duration in nanoseconds added:::this.plus
Instant#minus(TemporalAmount):::Returns a copy of this instant with the specified amount subtracted:::amountToSubtract.subtractFrom
Instant#minus(long, TemporalUnit):::Returns a copy of this instant with the specified amount subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
Instant#minusSeconds(long):::Returns a copy of this instant with the specified duration in seconds subtracted:::plusSeconds(Long.MAX_VALUE).plusSeconds->this.plusSeconds
Instant#minusMillis(long):::Returns a copy of this instant with the specified duration in milliseconds subtracted:::plusMillis(Long.MAX_VALUE).plusMillis->this.plusMillis
Instant#minusNanos(long):::Returns a copy of this instant with the specified duration in nanoseconds subtracted:::plusNanos(Long.MAX_VALUE).plusNanos->this.plusNanos
Instant#query(TemporalQuery):::Queries this instant using the specified query:::TemporalQueries.precision->TemporalQueries.chronology->TemporalQueries.zoneId->TemporalQueries.zone->TemporalQueries.offset->TemporalQueries.localDate->TemporalQueries.localTime->query.queryFrom
Instant#adjustInto(Temporal):::Adjusts the specified temporal object to have this instant:::temporal.with(INSTANT_SECONDS, seconds).with
Instant#until(Temporal, TemporalUnit):::Calculates the amount of time until another instant in terms of the specified unit:::Instant.from->this.nanosUntil->this.nanosUntil->end.toEpochMilli->this.toEpochMilli->Math.subtractExact->this.secondsUntil->this.secondsUntil->this.secondsUntil->this.secondsUntil->this.secondsUntil->unit.between
Instant#atOffset(ZoneOffset):::Combines this instant with an offset to create an OffsetDateTime:::OffsetDateTime.ofInstant
Instant#atZone(ZoneId):::Combines this instant with a time-zone to create a ZonedDateTime:::ZonedDateTime.ofInstant
Instant#toEpochMilli():::Converts this instant to the number of milliseconds from the epoch of 1970-01-01T00:00:00Z:::Math.multiplyExact->Math.addExact->Math.multiplyExact->Math.addExact
Instant#compareTo(Instant):::Compares this instant to the specified instant:::Long.compare
Instant#isAfter(Instant):::Checks if this instant is after the specified instant:::this.compareTo
Instant#isBefore(Instant):::Checks if this instant is before the specified instant:::this.compareTo
Instant#equals(Object):::Checks if this instant is equal to the specified instant:::
Instant#hashCode():::Returns a hash code for this instant.:::
Instant#toString():::A string representation of this instant using ISO-8601 representation:::DateTimeFormatter.ISO_INSTANT.format
LocalDate#now():::Obtains the current date from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
LocalDate#now(ZoneId):::Obtains the current date from the system clock in the specified time-zone:::Clock.system->this.now
LocalDate#now(Clock):::Obtains the current date from the specified clock:::Objects.requireNonNull->clock.instant->clock.getZone->this.ofInstant
LocalDate#of(int, Month, int):::Obtains an instance of LocalDate from a year, month and day:::YEAR.checkValidValue->Objects.requireNonNull->DAY_OF_MONTH.checkValidValue->month.getValue->this.create
LocalDate#of(int, int, int):::Obtains an instance of LocalDate from a year, month and day:::YEAR.checkValidValue->MONTH_OF_YEAR.checkValidValue->DAY_OF_MONTH.checkValidValue->this.create
LocalDate#ofYearDay(int, int):::Obtains an instance of LocalDate from a year and day-of-year:::YEAR.checkValidValue->DAY_OF_YEAR.checkValidValue->IsoChronology.INSTANCE.isLeapYear->Month.of->moy.firstDayOfYear->moy.length->moy.plus->moy.firstDayOfYear->moy.getValue
LocalDate#ofInstant(Instant, ZoneId):::Obtains an instance of LocalDate from an Instant and zone ID:::Objects.requireNonNull->Objects.requireNonNull->zone.getRules->rules.getOffset->instant.getEpochSecond->offset.getTotalSeconds->Math.floorDiv->this.ofEpochDay
LocalDate#ofEpochDay(long):::Obtains an instance of LocalDate from the epoch day count:::EPOCH_DAY.checkValidValue->YEAR.checkValidIntValue
LocalDate#from(TemporalAccessor):::Obtains an instance of LocalDate from a temporal object:::Objects.requireNonNull->TemporalQueries.localDate->temporal.query->temporal.getClass().getName
LocalDate#parse(CharSequence):::Obtains an instance of LocalDate from a text string such as 2007-12-03:::this.parse
LocalDate#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalDate from a text string using a specific formatter:::Objects.requireNonNull->formatter.parse
LocalDate#isSupported(TemporalField):::Checks if the specified field is supported:::ChronoLocalDate.super.isSupported
LocalDate#isSupported(TemporalUnit):::Checks if the specified unit is supported:::ChronoLocalDate.super.isSupported
LocalDate#range(TemporalField):::Gets the range of valid values for the specified field:::f.isDateBased->this.lengthOfMonth->ValueRange.of->this.lengthOfYear->ValueRange.of->ValueRange.of->this.getYear->ValueRange.of->ValueRange.of->field.range->field.rangeRefinedBy
LocalDate#get(TemporalField):::Gets the value of the specified field from this date as an int:::this.get0->ChronoLocalDate.super.get
LocalDate#getLong(TemporalField):::Gets the value of the specified field from this date as a long:::this.toEpochDay->this.getProlepticMonth->this.get0->field.getFrom
LocalDate#getChronology():::Gets the chronology of this date, which is the ISO calendar system:::
LocalDate#getEra():::Gets the era applicable at this date:::this.getYear
LocalDate#getYear():::Gets the year field:::
LocalDate#getMonthValue():::Gets the month-of-year field from 1 to 12:::
LocalDate#getMonth():::Gets the month-of-year field using the Month enum:::Month.of
LocalDate#getDayOfMonth():::Gets the day-of-month field:::
LocalDate#getDayOfYear():::Gets the day-of-year field:::this.isLeapYear->getMonth().firstDayOfYear
LocalDate#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek:::this.toEpochDay->Math.floorMod->DayOfWeek.of
LocalDate#isLeapYear():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::IsoChronology.INSTANCE.isLeapYear
LocalDate#lengthOfMonth():::Returns the length of the month represented by this date:::this.isLeapYear
LocalDate#lengthOfYear():::Returns the length of the year represented by this date:::this.isLeapYear
LocalDate#with(TemporalAdjuster):::Returns an adjusted copy of this date:::adjuster.adjustInto
LocalDate#with(TemporalField, long):::Returns a copy of this date with the specified field set to a new value:::f.checkValidValue->getDayOfWeek().getValue->this.plusDays->this.getLong->this.plusDays->this.getLong->this.plusDays->this.withDayOfMonth->this.withDayOfYear->LocalDate.ofEpochDay->this.getLong->this.plusWeeks->this.getLong->this.plusWeeks->this.withMonth->this.getProlepticMonth->this.plusMonths->this.withYear->this.withYear->this.getLong->this.withYear->field.adjustInto
LocalDate#withYear(int):::Returns a copy of this LocalDate with the year altered:::YEAR.checkValidValue->this.resolvePreviousValid
LocalDate#withMonth(int):::Returns a copy of this LocalDate with the month-of-year altered:::MONTH_OF_YEAR.checkValidValue->this.resolvePreviousValid
LocalDate#withDayOfMonth(int):::Returns a copy of this LocalDate with the day-of-month altered:::this.of
LocalDate#withDayOfYear(int):::Returns a copy of this LocalDate with the day-of-year altered:::this.getDayOfYear->this.ofYearDay
LocalDate#plus(TemporalAmount):::Returns a copy of this date with the specified amount added:::periodToAdd.getDays->plusMonths(periodToAdd.toTotalMonths()).plusDays->Objects.requireNonNull->amountToAdd.addTo
LocalDate#plus(long, TemporalUnit):::Returns a copy of this date with the specified amount added:::this.plusDays->this.plusWeeks->this.plusMonths->this.plusYears->Math.multiplyExact->this.plusYears->Math.multiplyExact->this.plusYears->Math.multiplyExact->this.plusYears->this.getLong->Math.addExact->this.with->unit.addTo
LocalDate#plusYears(long):::Returns a copy of this LocalDate with the specified number of years added:::YEAR.checkValidIntValue->this.resolvePreviousValid
LocalDate#plusMonths(long):::Returns a copy of this LocalDate with the specified number of months added:::Math.floorDiv->YEAR.checkValidIntValue->Math.floorMod->this.resolvePreviousValid
LocalDate#plusWeeks(long):::Returns a copy of this LocalDate with the specified number of weeks added:::Math.multiplyExact->this.plusDays
LocalDate#plusDays(long):::Returns a copy of this LocalDate with the specified number of days added:::this.lengthOfMonth->YEAR.checkValidValue->this.toEpochDay->Math.addExact->LocalDate.ofEpochDay
LocalDate#minus(TemporalAmount):::Returns a copy of this date with the specified amount subtracted:::periodToSubtract.getDays->minusMonths(periodToSubtract.toTotalMonths()).minusDays->Objects.requireNonNull->amountToSubtract.subtractFrom
LocalDate#minus(long, TemporalUnit):::Returns a copy of this date with the specified amount subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
LocalDate#minusYears(long):::Returns a copy of this LocalDate with the specified number of years subtracted:::this.plusYears->plusYears(Long.MAX_VALUE).plusYears
LocalDate#minusMonths(long):::Returns a copy of this LocalDate with the specified number of months subtracted:::this.plusMonths->plusMonths(Long.MAX_VALUE).plusMonths
LocalDate#minusWeeks(long):::Returns a copy of this LocalDate with the specified number of weeks subtracted:::this.plusWeeks->plusWeeks(Long.MAX_VALUE).plusWeeks
LocalDate#minusDays(long):::Returns a copy of this LocalDate with the specified number of days subtracted:::this.plusDays->plusDays(Long.MAX_VALUE).plusDays
LocalDate#query(TemporalQuery):::Queries this date using the specified query:::TemporalQueries.localDate->ChronoLocalDate.super.query
LocalDate#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date as this object:::ChronoLocalDate.super.adjustInto
LocalDate#until(Temporal, TemporalUnit):::Calculates the amount of time until another date in terms of the specified unit:::LocalDate.from->this.daysUntil->this.daysUntil->this.monthsUntil->this.monthsUntil->this.monthsUntil->this.monthsUntil->this.monthsUntil->end.getLong->this.getLong->unit.between
LocalDate#until(ChronoLocalDate):::Calculates the period between this date and another date as a Period:::LocalDate.from->end.getProlepticMonth->this.getProlepticMonth->end.lengthOfMonth->this.plusMonths->end.toEpochDay->calcDate.toEpochDay->Math.toIntExact->Period.of
LocalDate#datesUntil(LocalDate):::Returns a sequential ordered stream of dates:::endExclusive.toEpochDay->this.toEpochDay->LongStream.range(start, end).mapToObj
LocalDate#datesUntil(LocalDate, Period):::Returns a sequential ordered stream of dates by given incremental step:::step.isZero->endExclusive.toEpochDay->this.toEpochDay->step.toTotalMonths->step.getDays->Stream.empty->LongStream.rangeClosed(0, steps).mapToObj->this.getProlepticMonth->MIN.getProlepticMonth->MAX.getProlepticMonth->this.getProlepticMonth->plusMonths(addMonths).toEpochDay->plusMonths(addMonths).toEpochDay->LongStream.rangeClosed(0, steps).mapToObj
LocalDate#format(DateTimeFormatter):::Formats this date using the specified formatter:::Objects.requireNonNull->formatter.format
LocalDate#atTime(LocalTime):::Combines this date with a time to create a LocalDateTime:::LocalDateTime.of
LocalDate#atTime(int, int):::Combines this date with a time to create a LocalDateTime:::LocalTime.of->this.atTime
LocalDate#atTime(int, int, int):::Combines this date with a time to create a LocalDateTime:::LocalTime.of->this.atTime
LocalDate#atTime(int, int, int, int):::Combines this date with a time to create a LocalDateTime:::LocalTime.of->this.atTime
LocalDate#atTime(OffsetTime):::Combines this date with an offset time to create an OffsetDateTime:::time.toLocalTime->LocalDateTime.of->time.getOffset->OffsetDateTime.of
LocalDate#atStartOfDay():::Combines this date with the time of midnight to create a LocalDateTime at the start of this date:::LocalDateTime.of
LocalDate#atStartOfDay(ZoneId):::Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone:::Objects.requireNonNull->this.atTime->zone.getRules->rules.getTransition->trans.isGap->trans.getDateTimeAfter->ZonedDateTime.of
LocalDate#toEpochSecond(LocalTime, ZoneOffset):::Converts this LocalDate to the number of seconds since the epoch of 1970-01-01T00:00:00Z:::Objects.requireNonNull->Objects.requireNonNull->this.toEpochDay->time.toSecondOfDay->offset.getTotalSeconds
LocalDate#compareTo(ChronoLocalDate):::Compares this date to another date:::this.compareTo0->ChronoLocalDate.super.compareTo
LocalDate#isAfter(ChronoLocalDate):::Checks if this date is after the specified date:::this.compareTo0->ChronoLocalDate.super.isAfter
LocalDate#isBefore(ChronoLocalDate):::Checks if this date is before the specified date:::this.compareTo0->ChronoLocalDate.super.isBefore
LocalDate#isEqual(ChronoLocalDate):::Checks if this date is equal to the specified date:::this.compareTo0->ChronoLocalDate.super.isEqual
LocalDate#equals(Object):::Checks if this date is equal to another date:::this.compareTo0
LocalDate#hashCode():::A hash code for this date.:::
LocalDate#toString():::Outputs this date as a String, such as 2007-12-03:::Math.abs->buf.append->buf.append->buf.append(yearValue + 10000).deleteCharAt->buf.append(yearValue - 10000).deleteCharAt->buf.append(monthValue < 10 ? "-0" : "-").append(monthValue).append(dayValue < 10 ? "-0" : "-").append(dayValue).toString
LocalDateTime#now():::Obtains the current date-time from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
LocalDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone:::Clock.system->this.now
LocalDateTime#now(Clock):::Obtains the current date-time from the specified clock:::Objects.requireNonNull->clock.instant->clock.getZone().getRules().getOffset->now.getEpochSecond->now.getNano->this.ofEpochSecond
LocalDateTime#of(int, Month, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero:::LocalDate.of->LocalTime.of
LocalDateTime#of(int, Month, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero:::LocalDate.of->LocalTime.of
LocalDateTime#of(int, Month, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond:::LocalDate.of->LocalTime.of
LocalDateTime#of(int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero:::LocalDate.of->LocalTime.of
LocalDateTime#of(int, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero:::LocalDate.of->LocalTime.of
LocalDateTime#of(int, int, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond:::LocalDate.of->LocalTime.of
LocalDateTime#of(LocalDate, LocalTime):::Obtains an instance of LocalDateTime from a date and time.:::Objects.requireNonNull->Objects.requireNonNull
LocalDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of LocalDateTime from an Instant and zone ID:::Objects.requireNonNull->Objects.requireNonNull->zone.getRules->rules.getOffset->instant.getEpochSecond->instant.getNano->this.ofEpochSecond
LocalDateTime#ofEpochSecond(long, int, ZoneOffset):::Obtains an instance of LocalDateTime using seconds from the epoch of 1970-01-01T00:00:00Z:::Objects.requireNonNull->NANO_OF_SECOND.checkValidValue->offset.getTotalSeconds->Math.floorDiv->Math.floorMod->LocalDate.ofEpochDay->LocalTime.ofNanoOfDay
LocalDateTime#from(TemporalAccessor):::Obtains an instance of LocalDateTime from a temporal object:::((OffsetDateTime) temporal).toLocalDateTime->((ZonedDateTime) temporal).toLocalDateTime->temporal.getClass().getName->LocalDate.from->LocalTime.from
LocalDateTime#parse(CharSequence):::Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30:::this.parse
LocalDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalDateTime from a text string using a specific formatter:::Objects.requireNonNull->formatter.parse
LocalDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::f.isDateBased->f.isTimeBased->field.isSupportedBy
LocalDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::ChronoLocalDateTime.super.isSupported
LocalDateTime#range(TemporalField):::Gets the range of valid values for the specified field:::f.isTimeBased->date.range->time.range->field.rangeRefinedBy
LocalDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int:::f.isTimeBased->date.get->time.get->ChronoLocalDateTime.super.get
LocalDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long:::f.isTimeBased->date.getLong->time.getLong->field.getFrom
LocalDateTime#toLocalDate():::Gets the LocalDate part of this date-time:::
LocalDateTime#getYear():::Gets the year field:::date.getYear
LocalDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12:::date.getMonthValue
LocalDateTime#getMonth():::Gets the month-of-year field using the Month enum:::date.getMonth
LocalDateTime#getDayOfMonth():::Gets the day-of-month field:::date.getDayOfMonth
LocalDateTime#getDayOfYear():::Gets the day-of-year field:::date.getDayOfYear
LocalDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek:::date.getDayOfWeek
LocalDateTime#toLocalTime():::Gets the LocalTime part of this date-time:::
LocalDateTime#getHour():::Gets the hour-of-day field.:::time.getHour
LocalDateTime#getMinute():::Gets the minute-of-hour field.:::time.getMinute
LocalDateTime#getSecond():::Gets the second-of-minute field.:::time.getSecond
LocalDateTime#getNano():::Gets the nano-of-second field.:::time.getNano
LocalDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time:::this.with->this.with->adjuster.adjustInto
LocalDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value:::f.isTimeBased->date.with->this.with->time.with->this.with->field.adjustInto
LocalDateTime#withYear(int):::Returns a copy of this LocalDateTime with the year altered:::date.withYear->this.with
LocalDateTime#withMonth(int):::Returns a copy of this LocalDateTime with the month-of-year altered:::date.withMonth->this.with
LocalDateTime#withDayOfMonth(int):::Returns a copy of this LocalDateTime with the day-of-month altered:::date.withDayOfMonth->this.with
LocalDateTime#withDayOfYear(int):::Returns a copy of this LocalDateTime with the day-of-year altered:::date.withDayOfYear->this.with
LocalDateTime#withHour(int):::Returns a copy of this LocalDateTime with the hour-of-day altered:::time.withHour->this.with
LocalDateTime#withMinute(int):::Returns a copy of this LocalDateTime with the minute-of-hour altered:::time.withMinute->this.with
LocalDateTime#withSecond(int):::Returns a copy of this LocalDateTime with the second-of-minute altered:::time.withSecond->this.with
LocalDateTime#withNano(int):::Returns a copy of this LocalDateTime with the nano-of-second altered:::time.withNano->this.with
LocalDateTime#truncatedTo(TemporalUnit):::Returns a copy of this LocalDateTime with the time truncated:::time.truncatedTo->this.with
LocalDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added:::date.plus->this.with->Objects.requireNonNull->amountToAdd.addTo
LocalDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added:::this.plusNanos->plusDays(amountToAdd / MICROS_PER_DAY).plusNanos->plusDays(amountToAdd / MILLIS_PER_DAY).plusNanos->this.plusSeconds->this.plusMinutes->this.plusHours->plusDays(amountToAdd / 256).plusHours->date.plus->this.with->unit.addTo
LocalDateTime#plusYears(long):::Returns a copy of this LocalDateTime with the specified number of years added:::date.plusYears->this.with
LocalDateTime#plusMonths(long):::Returns a copy of this LocalDateTime with the specified number of months added:::date.plusMonths->this.with
LocalDateTime#plusWeeks(long):::Returns a copy of this LocalDateTime with the specified number of weeks added:::date.plusWeeks->this.with
LocalDateTime#plusDays(long):::Returns a copy of this LocalDateTime with the specified number of days added:::date.plusDays->this.with
LocalDateTime#plusHours(long):::Returns a copy of this LocalDateTime with the specified number of hours added:::this.plusWithOverflow
LocalDateTime#plusMinutes(long):::Returns a copy of this LocalDateTime with the specified number of minutes added:::this.plusWithOverflow
LocalDateTime#plusSeconds(long):::Returns a copy of this LocalDateTime with the specified number of seconds added:::this.plusWithOverflow
LocalDateTime#plusNanos(long):::Returns a copy of this LocalDateTime with the specified number of nanoseconds added:::this.plusWithOverflow
LocalDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted:::date.minus->this.with->Objects.requireNonNull->amountToSubtract.subtractFrom
LocalDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
LocalDateTime#minusYears(long):::Returns a copy of this LocalDateTime with the specified number of years subtracted:::this.plusYears->plusYears(Long.MAX_VALUE).plusYears
LocalDateTime#minusMonths(long):::Returns a copy of this LocalDateTime with the specified number of months subtracted:::this.plusMonths->plusMonths(Long.MAX_VALUE).plusMonths
LocalDateTime#minusWeeks(long):::Returns a copy of this LocalDateTime with the specified number of weeks subtracted:::this.plusWeeks->plusWeeks(Long.MAX_VALUE).plusWeeks
LocalDateTime#minusDays(long):::Returns a copy of this LocalDateTime with the specified number of days subtracted:::this.plusDays->plusDays(Long.MAX_VALUE).plusDays
LocalDateTime#minusHours(long):::Returns a copy of this LocalDateTime with the specified number of hours subtracted:::this.plusWithOverflow
LocalDateTime#minusMinutes(long):::Returns a copy of this LocalDateTime with the specified number of minutes subtracted:::this.plusWithOverflow
LocalDateTime#minusSeconds(long):::Returns a copy of this LocalDateTime with the specified number of seconds subtracted:::this.plusWithOverflow
LocalDateTime#minusNanos(long):::Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted:::this.plusWithOverflow
LocalDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::TemporalQueries.localDate->ChronoLocalDateTime.super.query
LocalDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date and time as this object:::ChronoLocalDateTime.super.adjustInto
LocalDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit:::LocalDateTime.from->unit.isTimeBased->date.daysUntil->time.until->end.time.toNanoOfDay->time.toNanoOfDay->Math.multiplyExact->Math.multiplyExact->Math.multiplyExact->Math.multiplyExact->Math.multiplyExact->Math.multiplyExact->Math.multiplyExact->Math.addExact->endDate.isAfter->end.time.isBefore->endDate.isBefore->end.time.isAfter->endDate.plusDays->endDate.minusDays->date.until->unit.between
LocalDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects.requireNonNull->formatter.format
LocalDateTime#atOffset(ZoneOffset):::Combines this date-time with an offset to create an OffsetDateTime:::OffsetDateTime.of
LocalDateTime#atZone(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime:::ZonedDateTime.of
LocalDateTime#compareTo(ChronoLocalDateTime):::Compares this date-time to another date-time:::this.compareTo0->ChronoLocalDateTime.super.compareTo
LocalDateTime#isAfter(ChronoLocalDateTime):::Checks if this date-time is after the specified date-time:::this.compareTo0->ChronoLocalDateTime.super.isAfter
LocalDateTime#isBefore(ChronoLocalDateTime):::Checks if this date-time is before the specified date-time:::this.compareTo0->ChronoLocalDateTime.super.isBefore
LocalDateTime#isEqual(ChronoLocalDateTime):::Checks if this date-time is equal to the specified date-time:::this.compareTo0->ChronoLocalDateTime.super.isEqual
LocalDateTime#equals(Object):::Checks if this date-time is equal to another date-time:::date.equals->time.equals
LocalDateTime#hashCode():::A hash code for this date-time.:::date.hashCode->time.hashCode
LocalDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30:::date.toString->time.toString
LocalTime#now():::Obtains the current time from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
LocalTime#now(ZoneId):::Obtains the current time from the system clock in the specified time-zone:::Clock.system->this.now
LocalTime#now(Clock):::Obtains the current time from the specified clock:::Objects.requireNonNull->clock.instant->clock.getZone->this.ofInstant
LocalTime#of(int, int):::Obtains an instance of LocalTime from an hour and minute:::HOUR_OF_DAY.checkValidValue->MINUTE_OF_HOUR.checkValidValue
LocalTime#of(int, int, int):::Obtains an instance of LocalTime from an hour, minute and second:::HOUR_OF_DAY.checkValidValue->MINUTE_OF_HOUR.checkValidValue->SECOND_OF_MINUTE.checkValidValue
LocalTime#of(int, int, int, int):::Obtains an instance of LocalTime from an hour, minute, second and nanosecond:::HOUR_OF_DAY.checkValidValue->MINUTE_OF_HOUR.checkValidValue->SECOND_OF_MINUTE.checkValidValue->NANO_OF_SECOND.checkValidValue->this.create
LocalTime#ofInstant(Instant, ZoneId):::Obtains an instance of LocalTime from an Instant and zone ID:::Objects.requireNonNull->Objects.requireNonNull->zone.getRules().getOffset->instant.getEpochSecond->offset.getTotalSeconds->Math.floorMod->instant.getNano->this.ofNanoOfDay
LocalTime#ofSecondOfDay(long):::Obtains an instance of LocalTime from a second-of-day value:::SECOND_OF_DAY.checkValidValue->this.create
LocalTime#ofNanoOfDay(long):::Obtains an instance of LocalTime from a nanos-of-day value:::NANO_OF_DAY.checkValidValue->this.create
LocalTime#from(TemporalAccessor):::Obtains an instance of LocalTime from a temporal object:::Objects.requireNonNull->TemporalQueries.localTime->temporal.query->temporal.getClass().getName
LocalTime#parse(CharSequence):::Obtains an instance of LocalTime from a text string such as 10:15:::this.parse
LocalTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalTime from a text string using a specific formatter:::Objects.requireNonNull->formatter.parse
LocalTime#isSupported(TemporalField):::Checks if the specified field is supported:::field.isTimeBased->field.isSupportedBy
LocalTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::unit.isTimeBased->unit.isSupportedBy
LocalTime#range(TemporalField):::Gets the range of valid values for the specified field:::Temporal.super.range
LocalTime#get(TemporalField):::Gets the value of the specified field from this time as an int:::this.get0->Temporal.super.get
LocalTime#getLong(TemporalField):::Gets the value of the specified field from this time as a long:::this.toNanoOfDay->this.toNanoOfDay->this.get0->field.getFrom
LocalTime#getHour():::Gets the hour-of-day field.:::
LocalTime#getMinute():::Gets the minute-of-hour field.:::
LocalTime#getSecond():::Gets the second-of-minute field.:::
LocalTime#getNano():::Gets the nano-of-second field.:::
LocalTime#with(TemporalAdjuster):::Returns an adjusted copy of this time:::adjuster.adjustInto
LocalTime#with(TemporalField, long):::Returns a copy of this time with the specified field set to a new value:::f.checkValidValue->this.withNano->LocalTime.ofNanoOfDay->this.withNano->LocalTime.ofNanoOfDay->this.withNano->LocalTime.ofNanoOfDay->this.withSecond->this.toSecondOfDay->this.plusSeconds->this.withMinute->this.plusMinutes->this.plusHours->this.plusHours->this.withHour->this.withHour->this.plusHours->field.adjustInto
LocalTime#withHour(int):::Returns a copy of this LocalTime with the hour-of-day altered:::HOUR_OF_DAY.checkValidValue->this.create
LocalTime#withMinute(int):::Returns a copy of this LocalTime with the minute-of-hour altered:::MINUTE_OF_HOUR.checkValidValue->this.create
LocalTime#withSecond(int):::Returns a copy of this LocalTime with the second-of-minute altered:::SECOND_OF_MINUTE.checkValidValue->this.create
LocalTime#withNano(int):::Returns a copy of this LocalTime with the nano-of-second altered:::NANO_OF_SECOND.checkValidValue->this.create
LocalTime#truncatedTo(TemporalUnit):::Returns a copy of this LocalTime with the time truncated:::unit.getDuration->unitDur.getSeconds->unitDur.toNanos->this.toNanoOfDay->this.ofNanoOfDay
LocalTime#plus(TemporalAmount):::Returns a copy of this time with the specified amount added:::amountToAdd.addTo
LocalTime#plus(long, TemporalUnit):::Returns a copy of this time with the specified amount added:::this.plusNanos->this.plusNanos->this.plusNanos->this.plusSeconds->this.plusMinutes->this.plusHours->this.plusHours->unit.addTo
LocalTime#plusHours(long):::Returns a copy of this LocalTime with the specified number of hours added:::this.create
LocalTime#plusMinutes(long):::Returns a copy of this LocalTime with the specified number of minutes added:::this.create
LocalTime#plusSeconds(long):::Returns a copy of this LocalTime with the specified number of seconds added:::this.create
LocalTime#plusNanos(long):::Returns a copy of this LocalTime with the specified number of nanoseconds added:::this.toNanoOfDay->this.create
LocalTime#minus(TemporalAmount):::Returns a copy of this time with the specified amount subtracted:::amountToSubtract.subtractFrom
LocalTime#minus(long, TemporalUnit):::Returns a copy of this time with the specified amount subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
LocalTime#minusHours(long):::Returns a copy of this LocalTime with the specified number of hours subtracted:::this.plusHours
LocalTime#minusMinutes(long):::Returns a copy of this LocalTime with the specified number of minutes subtracted:::this.plusMinutes
LocalTime#minusSeconds(long):::Returns a copy of this LocalTime with the specified number of seconds subtracted:::this.plusSeconds
LocalTime#minusNanos(long):::Returns a copy of this LocalTime with the specified number of nanoseconds subtracted:::this.plusNanos
LocalTime#query(TemporalQuery):::Queries this time using the specified query:::TemporalQueries.chronology->TemporalQueries.zoneId->TemporalQueries.zone->TemporalQueries.offset->TemporalQueries.localTime->TemporalQueries.localDate->TemporalQueries.precision->query.queryFrom
LocalTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same time as this object:::this.toNanoOfDay->temporal.with
LocalTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another time in terms of the specified unit:::LocalTime.from->end.toNanoOfDay->this.toNanoOfDay->unit.between
LocalTime#format(DateTimeFormatter):::Formats this time using the specified formatter:::Objects.requireNonNull->formatter.format
LocalTime#atDate(LocalDate):::Combines this time with a date to create a LocalDateTime:::LocalDateTime.of
LocalTime#atOffset(ZoneOffset):::Combines this time with an offset to create an OffsetTime:::OffsetTime.of
LocalTime#toSecondOfDay():::Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1.:::
LocalTime#toNanoOfDay():::Extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1.:::
LocalTime#toEpochSecond(LocalDate, ZoneOffset):::Converts this LocalTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z:::Objects.requireNonNull->Objects.requireNonNull->date.toEpochDay->this.toSecondOfDay->offset.getTotalSeconds
LocalTime#compareTo(LocalTime):::Compares this time to another time:::Integer.compare->Integer.compare->Integer.compare->Integer.compare
LocalTime#isAfter(LocalTime):::Checks if this time is after the specified time:::this.compareTo
LocalTime#isBefore(LocalTime):::Checks if this time is before the specified time:::this.compareTo
LocalTime#equals(Object):::Checks if this time is equal to another time:::
LocalTime#hashCode():::A hash code for this time.:::this.toNanoOfDay
LocalTime#toString():::Outputs this time as a String, such as 10:15:::buf.append(hourValue < 10 ? "0" : "").append(hourValue).append(minuteValue < 10 ? ":0" : ":").append->buf.append(secondValue < 10 ? ":0" : ":").append->buf.append->Integer.toString((nanoValue) + 1000_000_000).substring->buf.append->Integer.toString((nanoValue / 1000) + 1000_000).substring->buf.append->Integer.toString((nanoValue / 1000_000) + 1000).substring->buf.append->buf.toString
MonthDay#now():::Obtains the current month-day from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
MonthDay#now(ZoneId):::Obtains the current month-day from the system clock in the specified time-zone:::Clock.system->this.now
MonthDay#now(Clock):::Obtains the current month-day from the specified clock:::LocalDate.now->now.getMonth->now.getDayOfMonth->MonthDay.of
MonthDay#of(Month, int):::Obtains an instance of MonthDay:::Objects.requireNonNull->DAY_OF_MONTH.checkValidValue->month.maxLength->month.name->month.getValue
MonthDay#of(int, int):::Obtains an instance of MonthDay:::Month.of->this.of
MonthDay#from(TemporalAccessor):::Obtains an instance of MonthDay from a temporal object:::temporal.getClass().getName->Chronology.from->IsoChronology.INSTANCE.equals->LocalDate.from->temporal.get->temporal.get->this.of
MonthDay#parse(CharSequence):::Obtains an instance of MonthDay from a text string such as --12-03:::this.parse
MonthDay#parse(CharSequence, DateTimeFormatter):::Obtains an instance of MonthDay from a text string using a specific formatter:::Objects.requireNonNull->formatter.parse
MonthDay#isSupported(TemporalField):::Checks if the specified field is supported:::field.isSupportedBy
MonthDay#range(TemporalField):::Gets the range of valid values for the specified field:::getMonth().minLength->getMonth().maxLength->ValueRange.of->field.range->TemporalAccessor.super.range
MonthDay#get(TemporalField):::Gets the value of the specified field from this month-day as an int:::this.getLong->range(field).checkValidIntValue
MonthDay#getLong(TemporalField):::Gets the value of the specified field from this month-day as a long:::field.getFrom
MonthDay#getMonthValue():::Gets the month-of-year field from 1 to 12:::
MonthDay#getMonth():::Gets the month-of-year field using the Month enum:::Month.of
MonthDay#getDayOfMonth():::Gets the day-of-month field:::
MonthDay#isValidYear(int):::Checks if the year is valid for this month-day:::Year.isLeap
MonthDay#withMonth(int):::Returns a copy of this MonthDay with the month-of-year altered:::Month.of->this.with
MonthDay#with(Month):::Returns a copy of this MonthDay with the month-of-year altered:::Objects.requireNonNull->month.getValue->month.maxLength->Math.min->month.getValue
MonthDay#withDayOfMonth(int):::Returns a copy of this MonthDay with the day-of-month altered:::this.of
MonthDay#query(TemporalQuery):::Queries this month-day using the specified query:::TemporalQueries.chronology->TemporalAccessor.super.query
MonthDay#adjustInto(Temporal):::Adjusts the specified temporal object to have this month-day:::Chronology.from(temporal).equals->temporal.with->temporal.range(DAY_OF_MONTH).getMaximum->Math.min->temporal.with
MonthDay#format(DateTimeFormatter):::Formats this month-day using the specified formatter:::Objects.requireNonNull->formatter.format
MonthDay#atYear(int):::Combines this month-day with a year to create a LocalDate:::LocalDate.of
MonthDay#compareTo(MonthDay):::Compares this month-day to another month-day:::
MonthDay#isAfter(MonthDay):::Checks if this month-day is after the specified month-day.:::this.compareTo
MonthDay#isBefore(MonthDay):::Checks if this month-day is before the specified month-day.:::this.compareTo
MonthDay#equals(Object):::Checks if this month-day is equal to another month-day:::
MonthDay#hashCode():::A hash code for this month-day.:::
MonthDay#toString():::Outputs this month-day as a String, such as --12-03:::new StringBuilder(10).append("--").append(month < 10 ? "0" : "").append(month).append(day < 10 ? "-0" : "-").append(day).toString
OffsetDateTime#timeLineOrder():::Gets a comparator that compares two OffsetDateTime instances based solely on the instant:::
OffsetDateTime#now():::Obtains the current date-time from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
OffsetDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone:::Clock.system->this.now
OffsetDateTime#now(Clock):::Obtains the current date-time from the specified clock:::Objects.requireNonNull->clock.instant->clock.getZone().getRules().getOffset->this.ofInstant
OffsetDateTime#of(LocalDate, LocalTime, ZoneOffset):::Obtains an instance of OffsetDateTime from a date, time and offset:::LocalDateTime.of
OffsetDateTime#of(LocalDateTime, ZoneOffset):::Obtains an instance of OffsetDateTime from a date-time and offset:::
OffsetDateTime#of(int, int, int, int, int, int, int, ZoneOffset):::Obtains an instance of OffsetDateTime from a year, month, day, hour, minute, second, nanosecond and offset:::LocalDateTime.of
OffsetDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of OffsetDateTime from an Instant and zone ID:::Objects.requireNonNull->Objects.requireNonNull->zone.getRules->rules.getOffset->instant.getEpochSecond->instant.getNano->LocalDateTime.ofEpochSecond
OffsetDateTime#from(TemporalAccessor):::Obtains an instance of OffsetDateTime from a temporal object:::temporal.getClass().getName->ZoneOffset.from->TemporalQueries.localDate->temporal.query->TemporalQueries.localTime->temporal.query->Instant.from->OffsetDateTime.ofInstant->OffsetDateTime.of
OffsetDateTime#parse(CharSequence):::Obtains an instance of OffsetDateTime from a text string such as 2007-12-03T10:15:30+01:00:::this.parse
OffsetDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of OffsetDateTime from a text string using a specific formatter:::Objects.requireNonNull->formatter.parse
OffsetDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::field.isSupportedBy
OffsetDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::unit.isSupportedBy
OffsetDateTime#range(TemporalField):::Gets the range of valid values for the specified field:::field.range->dateTime.range->field.rangeRefinedBy
OffsetDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int:::getOffset().getTotalSeconds->dateTime.get->Temporal.super.get
OffsetDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long:::this.toEpochSecond->getOffset().getTotalSeconds->dateTime.getLong->field.getFrom
OffsetDateTime#getOffset():::Gets the zone offset, such as '+01:00':::
OffsetDateTime#withOffsetSameLocal(ZoneOffset):::Returns a copy of this OffsetDateTime with the specified offset ensuring that the result has the same local date-time:::this.with
OffsetDateTime#withOffsetSameInstant(ZoneOffset):::Returns a copy of this OffsetDateTime with the specified offset ensuring that the result is at the same instant:::offset.equals->offset.getTotalSeconds->this.offset.getTotalSeconds->dateTime.plusSeconds
OffsetDateTime#toLocalDateTime():::Gets the LocalDateTime part of this date-time:::
OffsetDateTime#toLocalDate():::Gets the LocalDate part of this date-time:::dateTime.toLocalDate
OffsetDateTime#getYear():::Gets the year field:::dateTime.getYear
OffsetDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12:::dateTime.getMonthValue
OffsetDateTime#getMonth():::Gets the month-of-year field using the Month enum:::dateTime.getMonth
OffsetDateTime#getDayOfMonth():::Gets the day-of-month field:::dateTime.getDayOfMonth
OffsetDateTime#getDayOfYear():::Gets the day-of-year field:::dateTime.getDayOfYear
OffsetDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek:::dateTime.getDayOfWeek
OffsetDateTime#toLocalTime():::Gets the LocalTime part of this date-time:::dateTime.toLocalTime
OffsetDateTime#getHour():::Gets the hour-of-day field.:::dateTime.getHour
OffsetDateTime#getMinute():::Gets the minute-of-hour field.:::dateTime.getMinute
OffsetDateTime#getSecond():::Gets the second-of-minute field.:::dateTime.getSecond
OffsetDateTime#getNano():::Gets the nano-of-second field.:::dateTime.getNano
OffsetDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time:::this.with->this.ofInstant->dateTime.with->this.with->adjuster.adjustInto
OffsetDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value:::this.getNano->Instant.ofEpochSecond->this.ofInstant->f.checkValidIntValue->ZoneOffset.ofTotalSeconds->this.with->dateTime.with->this.with->field.adjustInto
OffsetDateTime#withYear(int):::Returns a copy of this OffsetDateTime with the year altered:::dateTime.withYear->this.with
OffsetDateTime#withMonth(int):::Returns a copy of this OffsetDateTime with the month-of-year altered:::dateTime.withMonth->this.with
OffsetDateTime#withDayOfMonth(int):::Returns a copy of this OffsetDateTime with the day-of-month altered:::dateTime.withDayOfMonth->this.with
OffsetDateTime#withDayOfYear(int):::Returns a copy of this OffsetDateTime with the day-of-year altered:::dateTime.withDayOfYear->this.with
OffsetDateTime#withHour(int):::Returns a copy of this OffsetDateTime with the hour-of-day altered:::dateTime.withHour->this.with
OffsetDateTime#withMinute(int):::Returns a copy of this OffsetDateTime with the minute-of-hour altered:::dateTime.withMinute->this.with
OffsetDateTime#withSecond(int):::Returns a copy of this OffsetDateTime with the second-of-minute altered:::dateTime.withSecond->this.with
OffsetDateTime#withNano(int):::Returns a copy of this OffsetDateTime with the nano-of-second altered:::dateTime.withNano->this.with
OffsetDateTime#truncatedTo(TemporalUnit):::Returns a copy of this OffsetDateTime with the time truncated:::dateTime.truncatedTo->this.with
OffsetDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added:::amountToAdd.addTo
OffsetDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added:::dateTime.plus->this.with->unit.addTo
OffsetDateTime#plusYears(long):::Returns a copy of this OffsetDateTime with the specified number of years added:::dateTime.plusYears->this.with
OffsetDateTime#plusMonths(long):::Returns a copy of this OffsetDateTime with the specified number of months added:::dateTime.plusMonths->this.with
OffsetDateTime#plusWeeks(long):::Returns a copy of this OffsetDateTime with the specified number of weeks added:::dateTime.plusWeeks->this.with
OffsetDateTime#plusDays(long):::Returns a copy of this OffsetDateTime with the specified number of days added:::dateTime.plusDays->this.with
OffsetDateTime#plusHours(long):::Returns a copy of this OffsetDateTime with the specified number of hours added:::dateTime.plusHours->this.with
OffsetDateTime#plusMinutes(long):::Returns a copy of this OffsetDateTime with the specified number of minutes added:::dateTime.plusMinutes->this.with
OffsetDateTime#plusSeconds(long):::Returns a copy of this OffsetDateTime with the specified number of seconds added:::dateTime.plusSeconds->this.with
OffsetDateTime#plusNanos(long):::Returns a copy of this OffsetDateTime with the specified number of nanoseconds added:::dateTime.plusNanos->this.with
OffsetDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted:::amountToSubtract.subtractFrom
OffsetDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
OffsetDateTime#minusYears(long):::Returns a copy of this OffsetDateTime with the specified number of years subtracted:::this.plusYears->plusYears(Long.MAX_VALUE).plusYears
OffsetDateTime#minusMonths(long):::Returns a copy of this OffsetDateTime with the specified number of months subtracted:::this.plusMonths->plusMonths(Long.MAX_VALUE).plusMonths
OffsetDateTime#minusWeeks(long):::Returns a copy of this OffsetDateTime with the specified number of weeks subtracted:::this.plusWeeks->plusWeeks(Long.MAX_VALUE).plusWeeks
OffsetDateTime#minusDays(long):::Returns a copy of this OffsetDateTime with the specified number of days subtracted:::this.plusDays->plusDays(Long.MAX_VALUE).plusDays
OffsetDateTime#minusHours(long):::Returns a copy of this OffsetDateTime with the specified number of hours subtracted:::this.plusHours->plusHours(Long.MAX_VALUE).plusHours
OffsetDateTime#minusMinutes(long):::Returns a copy of this OffsetDateTime with the specified number of minutes subtracted:::this.plusMinutes->plusMinutes(Long.MAX_VALUE).plusMinutes
OffsetDateTime#minusSeconds(long):::Returns a copy of this OffsetDateTime with the specified number of seconds subtracted:::this.plusSeconds->plusSeconds(Long.MAX_VALUE).plusSeconds
OffsetDateTime#minusNanos(long):::Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted:::this.plusNanos->plusNanos(Long.MAX_VALUE).plusNanos
OffsetDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::TemporalQueries.offset->TemporalQueries.zone->TemporalQueries.zoneId->TemporalQueries.localDate->TemporalQueries.localTime->TemporalQueries.chronology->TemporalQueries.precision->this.toLocalTime->this.toLocalDate->this.getOffset->query.queryFrom
OffsetDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset, date and time as this object:::getOffset().getTotalSeconds->temporal.with(EPOCH_DAY, toLocalDate().toEpochDay()).with(NANO_OF_DAY, toLocalTime().toNanoOfDay()).with
OffsetDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit:::OffsetDateTime.from->end.withOffsetSameInstant->dateTime.until->unit.between
OffsetDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects.requireNonNull->formatter.format
OffsetDateTime#atZoneSameInstant(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime ensuring that the result has the same instant:::ZonedDateTime.ofInstant
OffsetDateTime#atZoneSimilarLocal(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime trying to keep the same local date and time:::ZonedDateTime.ofLocal
OffsetDateTime#toOffsetTime():::Converts this date-time to an OffsetTime:::dateTime.toLocalTime->OffsetTime.of
OffsetDateTime#toZonedDateTime():::Converts this date-time to a ZonedDateTime using the offset as the zone ID:::ZonedDateTime.of
OffsetDateTime#toInstant():::Converts this date-time to an Instant:::dateTime.toInstant
OffsetDateTime#toEpochSecond():::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z:::dateTime.toEpochSecond
OffsetDateTime#compareTo(OffsetDateTime):::Compares this date-time to another date-time:::this.compareInstant->other.toLocalDateTime->toLocalDateTime().compareTo
OffsetDateTime#isAfter(OffsetDateTime):::Checks if the instant of this date-time is after that of the specified date-time:::this.toEpochSecond->other.toEpochSecond->toLocalTime().getNano->other.toLocalTime().getNano
OffsetDateTime#isBefore(OffsetDateTime):::Checks if the instant of this date-time is before that of the specified date-time:::this.toEpochSecond->other.toEpochSecond->toLocalTime().getNano->other.toLocalTime().getNano
OffsetDateTime#isEqual(OffsetDateTime):::Checks if the instant of this date-time is equal to that of the specified date-time:::this.toEpochSecond->other.toEpochSecond->toLocalTime().getNano->other.toLocalTime().getNano
OffsetDateTime#equals(Object):::Checks if this date-time is equal to another date-time:::dateTime.equals->offset.equals
OffsetDateTime#hashCode():::A hash code for this date-time.:::dateTime.hashCode->offset.hashCode
OffsetDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00:::dateTime.toString->offset.toString
OffsetTime#now():::Obtains the current time from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
OffsetTime#now(ZoneId):::Obtains the current time from the system clock in the specified time-zone:::Clock.system->this.now
OffsetTime#now(Clock):::Obtains the current time from the specified clock:::Objects.requireNonNull->clock.instant->clock.getZone().getRules().getOffset->this.ofInstant
OffsetTime#of(LocalTime, ZoneOffset):::Obtains an instance of OffsetTime from a local time and an offset.:::
OffsetTime#of(int, int, int, int, ZoneOffset):::Obtains an instance of OffsetTime from an hour, minute, second and nanosecond:::LocalTime.of
OffsetTime#ofInstant(Instant, ZoneId):::Obtains an instance of OffsetTime from an Instant and zone ID:::Objects.requireNonNull->Objects.requireNonNull->zone.getRules->rules.getOffset->instant.getEpochSecond->offset.getTotalSeconds->Math.floorMod->instant.getNano->LocalTime.ofNanoOfDay
OffsetTime#from(TemporalAccessor):::Obtains an instance of OffsetTime from a temporal object:::temporal.getClass().getName->LocalTime.from->ZoneOffset.from
OffsetTime#parse(CharSequence):::Obtains an instance of OffsetTime from a text string such as 10:15:30+01:00:::this.parse
OffsetTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of OffsetTime from a text string using a specific formatter:::Objects.requireNonNull->formatter.parse
OffsetTime#isSupported(TemporalField):::Checks if the specified field is supported:::field.isTimeBased->field.isSupportedBy
OffsetTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::unit.isTimeBased->unit.isSupportedBy
OffsetTime#range(TemporalField):::Gets the range of valid values for the specified field:::field.range->time.range->field.rangeRefinedBy
OffsetTime#get(TemporalField):::Gets the value of the specified field from this time as an int:::Temporal.super.get
OffsetTime#getLong(TemporalField):::Gets the value of the specified field from this time as a long:::offset.getTotalSeconds->time.getLong->field.getFrom
OffsetTime#getOffset():::Gets the zone offset, such as '+01:00':::
OffsetTime#withOffsetSameLocal(ZoneOffset):::Returns a copy of this OffsetTime with the specified offset ensuring that the result has the same local time:::offset.equals
OffsetTime#withOffsetSameInstant(ZoneOffset):::Returns a copy of this OffsetTime with the specified offset ensuring that the result is at the same instant on an implied day:::offset.equals->offset.getTotalSeconds->this.offset.getTotalSeconds->time.plusSeconds
OffsetTime#toLocalTime():::Gets the LocalTime part of this date-time:::
OffsetTime#getHour():::Gets the hour-of-day field.:::time.getHour
OffsetTime#getMinute():::Gets the minute-of-hour field.:::time.getMinute
OffsetTime#getSecond():::Gets the second-of-minute field.:::time.getSecond
OffsetTime#getNano():::Gets the nano-of-second field.:::time.getNano
OffsetTime#with(TemporalAdjuster):::Returns an adjusted copy of this time:::this.with->this.with->adjuster.adjustInto
OffsetTime#with(TemporalField, long):::Returns a copy of this time with the specified field set to a new value:::f.checkValidIntValue->ZoneOffset.ofTotalSeconds->this.with->time.with->this.with->field.adjustInto
OffsetTime#withHour(int):::Returns a copy of this OffsetTime with the hour-of-day altered:::time.withHour->this.with
OffsetTime#withMinute(int):::Returns a copy of this OffsetTime with the minute-of-hour altered:::time.withMinute->this.with
OffsetTime#withSecond(int):::Returns a copy of this OffsetTime with the second-of-minute altered:::time.withSecond->this.with
OffsetTime#withNano(int):::Returns a copy of this OffsetTime with the nano-of-second altered:::time.withNano->this.with
OffsetTime#truncatedTo(TemporalUnit):::Returns a copy of this OffsetTime with the time truncated:::time.truncatedTo->this.with
OffsetTime#plus(TemporalAmount):::Returns a copy of this time with the specified amount added:::amountToAdd.addTo
OffsetTime#plus(long, TemporalUnit):::Returns a copy of this time with the specified amount added:::time.plus->this.with->unit.addTo
OffsetTime#plusHours(long):::Returns a copy of this OffsetTime with the specified number of hours added:::time.plusHours->this.with
OffsetTime#plusMinutes(long):::Returns a copy of this OffsetTime with the specified number of minutes added:::time.plusMinutes->this.with
OffsetTime#plusSeconds(long):::Returns a copy of this OffsetTime with the specified number of seconds added:::time.plusSeconds->this.with
OffsetTime#plusNanos(long):::Returns a copy of this OffsetTime with the specified number of nanoseconds added:::time.plusNanos->this.with
OffsetTime#minus(TemporalAmount):::Returns a copy of this time with the specified amount subtracted:::amountToSubtract.subtractFrom
OffsetTime#minus(long, TemporalUnit):::Returns a copy of this time with the specified amount subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
OffsetTime#minusHours(long):::Returns a copy of this OffsetTime with the specified number of hours subtracted:::time.minusHours->this.with
OffsetTime#minusMinutes(long):::Returns a copy of this OffsetTime with the specified number of minutes subtracted:::time.minusMinutes->this.with
OffsetTime#minusSeconds(long):::Returns a copy of this OffsetTime with the specified number of seconds subtracted:::time.minusSeconds->this.with
OffsetTime#minusNanos(long):::Returns a copy of this OffsetTime with the specified number of nanoseconds subtracted:::time.minusNanos->this.with
OffsetTime#query(TemporalQuery):::Queries this time using the specified query:::TemporalQueries.offset->TemporalQueries.zone->TemporalQueries.zoneId->TemporalQueries.chronology->TemporalQueries.localDate->TemporalQueries.localTime->TemporalQueries.precision->query.queryFrom
OffsetTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset and time as this object:::offset.getTotalSeconds->temporal.with(NANO_OF_DAY, time.toNanoOfDay()).with
OffsetTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another time in terms of the specified unit:::OffsetTime.from->end.toEpochNano->this.toEpochNano->unit.between
OffsetTime#format(DateTimeFormatter):::Formats this time using the specified formatter:::Objects.requireNonNull->formatter.format
OffsetTime#atDate(LocalDate):::Combines this time with a date to create an OffsetDateTime:::OffsetDateTime.of
OffsetTime#toEpochSecond(LocalDate):::Converts this OffsetTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z:::Objects.requireNonNull->date.toEpochDay->time.toSecondOfDay->offset.getTotalSeconds
OffsetTime#compareTo(OffsetTime):::Compares this OffsetTime to another time:::offset.equals->time.compareTo->this.toEpochNano->other.toEpochNano->Long.compare->time.compareTo
OffsetTime#isAfter(OffsetTime):::Checks if the instant of this OffsetTime is after that of the specified time applying both times to a common date:::this.toEpochNano->other.toEpochNano
OffsetTime#isBefore(OffsetTime):::Checks if the instant of this OffsetTime is before that of the specified time applying both times to a common date:::this.toEpochNano->other.toEpochNano
OffsetTime#isEqual(OffsetTime):::Checks if the instant of this OffsetTime is equal to that of the specified time applying both times to a common date:::this.toEpochNano->other.toEpochNano
OffsetTime#equals(Object):::Checks if this time is equal to another time:::time.equals->offset.equals
OffsetTime#hashCode():::A hash code for this time.:::time.hashCode->offset.hashCode
OffsetTime#toString():::Outputs this time as a String, such as 10:15:30+01:00:::time.toString->offset.toString
Period#ofYears(int):::Obtains a Period representing a number of years:::this.create
Period#ofMonths(int):::Obtains a Period representing a number of months:::this.create
Period#ofWeeks(int):::Obtains a Period representing a number of weeks:::Math.multiplyExact->this.create
Period#ofDays(int):::Obtains a Period representing a number of days:::this.create
Period#of(int, int, int):::Obtains a Period representing a number of years, months and days:::this.create
Period#from(TemporalAmount):::Obtains an instance of Period from a temporal amount:::((ChronoPeriod) amount).getChronology->IsoChronology.INSTANCE.equals->Objects.requireNonNull->amount.get->Math.toIntExact->Math.toIntExact->Math.toIntExact->amount.getUnits->this.create
Period#parse(CharSequence):::Obtains a Period from a text string such as PnYnMnD:::Objects.requireNonNull->PATTERN.matcher->matcher.matches->matcher.start->matcher.end->this.charMatch->matcher.start->matcher.end->matcher.start->matcher.end->matcher.start->matcher.end->matcher.start->matcher.end->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->Math.multiplyExact->Math.addExact->this.create
Period#between(LocalDate, LocalDate):::Obtains a Period consisting of the number of years, months, and days between two dates:::startDateInclusive.until
Period#get(TemporalUnit):::Gets the value of the requested unit:::this.getDays->this.getMonths->this.getYears
Period#getUnits():::Gets the set of units supported by this period:::
Period#getChronology():::Gets the chronology of this period, which is the ISO calendar system:::
Period#isZero():::Checks if all three units of this period are zero:::
Period#isNegative():::Checks if any of the three units of this period are negative:::
Period#getYears():::Gets the amount of years of this period:::
Period#getMonths():::Gets the amount of months of this period:::
Period#getDays():::Gets the amount of days of this period:::
Period#withYears(int):::Returns a copy of this period with the specified amount of years:::this.create
Period#withMonths(int):::Returns a copy of this period with the specified amount of months:::this.create
Period#withDays(int):::Returns a copy of this period with the specified amount of days:::this.create
Period#plus(TemporalAmount):::Returns a copy of this period with the specified period added:::Period.from->Math.addExact->Math.addExact->Math.addExact->this.create
Period#plusYears(long):::Returns a copy of this period with the specified years added:::Math.addExact->Math.toIntExact->this.create
Period#plusMonths(long):::Returns a copy of this period with the specified months added:::Math.addExact->Math.toIntExact->this.create
Period#plusDays(long):::Returns a copy of this period with the specified days added:::Math.addExact->Math.toIntExact->this.create
Period#minus(TemporalAmount):::Returns a copy of this period with the specified period subtracted:::Period.from->Math.subtractExact->Math.subtractExact->Math.subtractExact->this.create
Period#minusYears(long):::Returns a copy of this period with the specified years subtracted:::this.plusYears->plusYears(Long.MAX_VALUE).plusYears
Period#minusMonths(long):::Returns a copy of this period with the specified months subtracted:::this.plusMonths->plusMonths(Long.MAX_VALUE).plusMonths
Period#minusDays(long):::Returns a copy of this period with the specified days subtracted:::this.plusDays->plusDays(Long.MAX_VALUE).plusDays
Period#multipliedBy(int):::Returns a new instance with each element in this period multiplied by the specified scalar:::Math.multiplyExact->Math.multiplyExact->Math.multiplyExact->this.create
Period#negated():::Returns a new instance with each amount in this period negated:::this.multipliedBy
Period#normalized():::Returns a copy of this period with the years and months normalized:::this.toTotalMonths->Math.toIntExact->this.create
Period#toTotalMonths():::Gets the total number of months in this period:::
Period#addTo(Temporal):::Adds this period to the specified temporal object:::this.validateChrono->this.toTotalMonths->temporal.plus->temporal.plus->temporal.plus
Period#subtractFrom(Temporal):::Subtracts this period from the specified temporal object:::this.validateChrono->this.toTotalMonths->temporal.minus->temporal.minus->temporal.minus
Period#equals(Object):::Checks if this period is equal to another period:::
Period#hashCode():::A hash code for this period.:::Integer.rotateLeft->Integer.rotateLeft
Period#toString():::Outputs this period as a String, such as P6Y3M1D:::buf.append->buf.append(years).append->buf.append(months).append->buf.append(days).append->buf.toString
Ser#writeExternal(ObjectOutput):::Implements the Externalizable interface to write the object.:::this.writeInternal
Ser#readExternal(ObjectInput):::Implements the Externalizable interface to read the object.:::in.readByte->this.readInternal
Year#now():::Obtains the current year from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
Year#now(ZoneId):::Obtains the current year from the system clock in the specified time-zone:::Clock.system->this.now
Year#now(Clock):::Obtains the current year from the specified clock:::LocalDate.now->now.getYear->Year.of
Year#of(int):::Obtains an instance of Year:::YEAR.checkValidValue
Year#from(TemporalAccessor):::Obtains an instance of Year from a temporal object:::Objects.requireNonNull->temporal.getClass().getName->Chronology.from->IsoChronology.INSTANCE.equals->LocalDate.from->temporal.get->this.of
Year#parse(CharSequence):::Obtains an instance of Year from a text string such as 2007:::this.parse
Year#parse(CharSequence, DateTimeFormatter):::Obtains an instance of Year from a text string using a specific formatter:::Objects.requireNonNull->formatter.parse
Year#isLeap(long):::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::
Year#getValue():::Gets the year value:::
Year#isSupported(TemporalField):::Checks if the specified field is supported:::field.isSupportedBy
Year#isSupported(TemporalUnit):::Checks if the specified unit is supported:::unit.isSupportedBy
Year#range(TemporalField):::Gets the range of valid values for the specified field:::ValueRange.of->ValueRange.of->Temporal.super.range
Year#get(TemporalField):::Gets the value of the specified field from this year as an int:::this.getLong->range(field).checkValidIntValue
Year#getLong(TemporalField):::Gets the value of the specified field from this year as a long:::field.getFrom
Year#isLeap():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::Year.isLeap
Year#isValidMonthDay(MonthDay):::Checks if the month-day is valid for this year:::monthDay.isValidYear
Year#length():::Gets the length of this year in days.:::this.isLeap
Year#with(TemporalAdjuster):::Returns an adjusted copy of this year:::adjuster.adjustInto
Year#with(TemporalField, long):::Returns a copy of this year with the specified field set to a new value:::f.checkValidValue->Year.of->Year.of->this.getLong->Year.of->field.adjustInto
Year#plus(TemporalAmount):::Returns a copy of this year with the specified amount added:::amountToAdd.addTo
Year#plus(long, TemporalUnit):::Returns a copy of this year with the specified amount added:::this.plusYears->Math.multiplyExact->this.plusYears->Math.multiplyExact->this.plusYears->Math.multiplyExact->this.plusYears->this.getLong->Math.addExact->this.with->unit.addTo
Year#plusYears(long):::Returns a copy of this Year with the specified number of years added:::YEAR.checkValidIntValue->this.of
Year#minus(TemporalAmount):::Returns a copy of this year with the specified amount subtracted:::amountToSubtract.subtractFrom
Year#minus(long, TemporalUnit):::Returns a copy of this year with the specified amount subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
Year#minusYears(long):::Returns a copy of this Year with the specified number of years subtracted:::this.plusYears->plusYears(Long.MAX_VALUE).plusYears
Year#query(TemporalQuery):::Queries this year using the specified query:::TemporalQueries.chronology->TemporalQueries.precision->Temporal.super.query
Year#adjustInto(Temporal):::Adjusts the specified temporal object to have this year:::Chronology.from(temporal).equals->temporal.with
Year#until(Temporal, TemporalUnit):::Calculates the amount of time until another year in terms of the specified unit:::Year.from->end.getLong->this.getLong->unit.between
Year#format(DateTimeFormatter):::Formats this year using the specified formatter:::Objects.requireNonNull->formatter.format
Year#atDay(int):::Combines this year with a day-of-year to create a LocalDate:::LocalDate.ofYearDay
Year#atMonth(Month):::Combines this year with a month to create a YearMonth:::YearMonth.of
Year#atMonth(int):::Combines this year with a month to create a YearMonth:::YearMonth.of
Year#atMonthDay(MonthDay):::Combines this year with a month-day to create a LocalDate:::monthDay.atYear
Year#compareTo(Year):::Compares this year to another year:::
Year#isAfter(Year):::Checks if this year is after the specified year.:::
Year#isBefore(Year):::Checks if this year is before the specified year.:::
Year#equals(Object):::Checks if this year is equal to another year:::
Year#hashCode():::A hash code for this year.:::
Year#toString():::Outputs this year as a String.:::Integer.toString
YearMonth#now():::Obtains the current year-month from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
YearMonth#now(ZoneId):::Obtains the current year-month from the system clock in the specified time-zone:::Clock.system->this.now
YearMonth#now(Clock):::Obtains the current year-month from the specified clock:::LocalDate.now->now.getYear->now.getMonth->YearMonth.of
YearMonth#of(int, Month):::Obtains an instance of YearMonth from a year and month.:::Objects.requireNonNull->month.getValue->this.of
YearMonth#of(int, int):::Obtains an instance of YearMonth from a year and month.:::YEAR.checkValidValue->MONTH_OF_YEAR.checkValidValue
YearMonth#from(TemporalAccessor):::Obtains an instance of YearMonth from a temporal object:::Objects.requireNonNull->temporal.getClass().getName->Chronology.from->IsoChronology.INSTANCE.equals->LocalDate.from->temporal.get->temporal.get->this.of
YearMonth#parse(CharSequence):::Obtains an instance of YearMonth from a text string such as 2007-12:::this.parse
YearMonth#parse(CharSequence, DateTimeFormatter):::Obtains an instance of YearMonth from a text string using a specific formatter:::Objects.requireNonNull->formatter.parse
YearMonth#isSupported(TemporalField):::Checks if the specified field is supported:::field.isSupportedBy
YearMonth#isSupported(TemporalUnit):::Checks if the specified unit is supported:::unit.isSupportedBy
YearMonth#range(TemporalField):::Gets the range of valid values for the specified field:::this.getYear->ValueRange.of->ValueRange.of->Temporal.super.range
YearMonth#get(TemporalField):::Gets the value of the specified field from this year-month as an int:::this.getLong->range(field).checkValidIntValue
YearMonth#getLong(TemporalField):::Gets the value of the specified field from this year-month as a long:::this.getProlepticMonth->field.getFrom
YearMonth#getYear():::Gets the year field:::
YearMonth#getMonthValue():::Gets the month-of-year field from 1 to 12:::
YearMonth#getMonth():::Gets the month-of-year field using the Month enum:::Month.of
YearMonth#isLeapYear():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::IsoChronology.INSTANCE.isLeapYear
YearMonth#isValidDay(int):::Checks if the day-of-month is valid for this year-month:::this.lengthOfMonth
YearMonth#lengthOfMonth():::Returns the length of the month, taking account of the year:::this.isLeapYear->getMonth().length
YearMonth#lengthOfYear():::Returns the length of the year:::this.isLeapYear
YearMonth#with(TemporalAdjuster):::Returns an adjusted copy of this year-month:::adjuster.adjustInto
YearMonth#with(TemporalField, long):::Returns a copy of this year-month with the specified field set to a new value:::f.checkValidValue->this.withMonth->this.getProlepticMonth->this.plusMonths->this.withYear->this.withYear->this.getLong->this.withYear->field.adjustInto
YearMonth#withYear(int):::Returns a copy of this YearMonth with the year altered:::YEAR.checkValidValue->this.with
YearMonth#withMonth(int):::Returns a copy of this YearMonth with the month-of-year altered:::MONTH_OF_YEAR.checkValidValue->this.with
YearMonth#plus(TemporalAmount):::Returns a copy of this year-month with the specified amount added:::amountToAdd.addTo
YearMonth#plus(long, TemporalUnit):::Returns a copy of this year-month with the specified amount added:::this.plusMonths->this.plusYears->Math.multiplyExact->this.plusYears->Math.multiplyExact->this.plusYears->Math.multiplyExact->this.plusYears->this.getLong->Math.addExact->this.with->unit.addTo
YearMonth#plusYears(long):::Returns a copy of this YearMonth with the specified number of years added:::YEAR.checkValidIntValue->this.with
YearMonth#plusMonths(long):::Returns a copy of this YearMonth with the specified number of months added:::Math.floorDiv->YEAR.checkValidIntValue->Math.floorMod->this.with
YearMonth#minus(TemporalAmount):::Returns a copy of this year-month with the specified amount subtracted:::amountToSubtract.subtractFrom
YearMonth#minus(long, TemporalUnit):::Returns a copy of this year-month with the specified amount subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
YearMonth#minusYears(long):::Returns a copy of this YearMonth with the specified number of years subtracted:::this.plusYears->plusYears(Long.MAX_VALUE).plusYears
YearMonth#minusMonths(long):::Returns a copy of this YearMonth with the specified number of months subtracted:::this.plusMonths->plusMonths(Long.MAX_VALUE).plusMonths
YearMonth#query(TemporalQuery):::Queries this year-month using the specified query:::TemporalQueries.chronology->TemporalQueries.precision->Temporal.super.query
YearMonth#adjustInto(Temporal):::Adjusts the specified temporal object to have this year-month:::Chronology.from(temporal).equals->this.getProlepticMonth->temporal.with
YearMonth#until(Temporal, TemporalUnit):::Calculates the amount of time until another year-month in terms of the specified unit:::YearMonth.from->end.getProlepticMonth->this.getProlepticMonth->end.getLong->this.getLong->unit.between
YearMonth#format(DateTimeFormatter):::Formats this year-month using the specified formatter:::Objects.requireNonNull->formatter.format
YearMonth#atDay(int):::Combines this year-month with a day-of-month to create a LocalDate:::LocalDate.of
YearMonth#atEndOfMonth():::Returns a LocalDate at the end of the month:::this.lengthOfMonth->LocalDate.of
YearMonth#compareTo(YearMonth):::Compares this year-month to another year-month:::
YearMonth#isAfter(YearMonth):::Checks if this year-month is after the specified year-month.:::this.compareTo
YearMonth#isBefore(YearMonth):::Checks if this year-month is before the specified year-month.:::this.compareTo
YearMonth#equals(Object):::Checks if this year-month is equal to another year-month:::
YearMonth#hashCode():::A hash code for this year-month.:::
YearMonth#toString():::Outputs this year-month as a String, such as 2007-12:::Math.abs->buf.append->buf.append(year + 10000).deleteCharAt->buf.append(year - 10000).deleteCharAt->buf.append(month < 10 ? "-0" : "-").append(month).toString
ZonedDateTime#now():::Obtains the current date-time from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
ZonedDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone:::Clock.system->this.now
ZonedDateTime#now(Clock):::Obtains the current date-time from the specified clock:::Objects.requireNonNull->clock.instant->clock.getZone->this.ofInstant
ZonedDateTime#of(LocalDate, LocalTime, ZoneId):::Obtains an instance of ZonedDateTime from a local date and time:::LocalDateTime.of->this.of
ZonedDateTime#of(LocalDateTime, ZoneId):::Obtains an instance of ZonedDateTime from a local date-time:::this.ofLocal
ZonedDateTime#of(int, int, int, int, int, int, int, ZoneId):::Obtains an instance of ZonedDateTime from a year, month, day, hour, minute, second, nanosecond and time-zone:::LocalDateTime.of->this.ofLocal
ZonedDateTime#ofLocal(LocalDateTime, ZoneId, ZoneOffset):::Obtains an instance of ZonedDateTime from a local date-time using the preferred offset if possible:::Objects.requireNonNull->Objects.requireNonNull->zone.getRules->rules.getValidOffsets->validOffsets.size->validOffsets.size->validOffsets.contains->validOffsets.get->Objects.requireNonNull->rules.getTransition->trans.getDuration().getSeconds->localDateTime.plusSeconds->trans.getOffsetAfter->validOffsets.get
ZonedDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of ZonedDateTime from an Instant:::Objects.requireNonNull->Objects.requireNonNull->instant.getEpochSecond->instant.getNano->this.create
ZonedDateTime#ofInstant(LocalDateTime, ZoneOffset, ZoneId):::Obtains an instance of ZonedDateTime from the instant formed by combining the local date-time and offset:::Objects.requireNonNull->Objects.requireNonNull->Objects.requireNonNull->zone.getRules().isValidOffset->localDateTime.toEpochSecond->localDateTime.getNano->this.create
ZonedDateTime#ofStrict(LocalDateTime, ZoneOffset, ZoneId):::Obtains an instance of ZonedDateTime strictly validating the combination of local date-time, offset and zone ID:::Objects.requireNonNull->Objects.requireNonNull->Objects.requireNonNull->zone.getRules->rules.isValidOffset->rules.getTransition->trans.isGap
ZonedDateTime#from(TemporalAccessor):::Obtains an instance of ZonedDateTime from a temporal object:::temporal.getClass().getName->ZoneId.from->temporal.isSupported->LocalDate.from->LocalTime.from->this.of->temporal.getLong->temporal.get->this.create
ZonedDateTime#parse(CharSequence):::Obtains an instance of ZonedDateTime from a text string such as 2007-12-03T10:15:30+01:00[Europe/Paris]:::this.parse
ZonedDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of ZonedDateTime from a text string using a specific formatter:::Objects.requireNonNull->formatter.parse
ZonedDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::field.isSupportedBy
ZonedDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::ChronoZonedDateTime.super.isSupported
ZonedDateTime#range(TemporalField):::Gets the range of valid values for the specified field:::field.range->dateTime.range->field.rangeRefinedBy
ZonedDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int:::getOffset().getTotalSeconds->dateTime.get->ChronoZonedDateTime.super.get
ZonedDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long:::this.toEpochSecond->getOffset().getTotalSeconds->dateTime.getLong->field.getFrom
ZonedDateTime#getOffset():::Gets the zone offset, such as '+01:00':::
ZonedDateTime#withEarlierOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap:::getZone().getRules().getTransition->trans.isOverlap->trans.getOffsetBefore->earlierOffset.equals
ZonedDateTime#withLaterOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap:::this.toLocalDateTime->getZone().getRules().getTransition->trans.getOffsetAfter->laterOffset.equals
ZonedDateTime#getZone():::Gets the time-zone, such as 'Europe/Paris':::
ZonedDateTime#withZoneSameLocal(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible:::Objects.requireNonNull->this.zone.equals->this.ofLocal
ZonedDateTime#withZoneSameInstant(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the instant:::Objects.requireNonNull->this.zone.equals->dateTime.toEpochSecond->dateTime.getNano->this.create
ZonedDateTime#withFixedOffsetZone():::Returns a copy of this date-time with the zone ID set to the offset:::this.zone.equals
ZonedDateTime#toLocalDateTime():::Gets the LocalDateTime part of this date-time:::
ZonedDateTime#toLocalDate():::Gets the LocalDate part of this date-time:::dateTime.toLocalDate
ZonedDateTime#getYear():::Gets the year field:::dateTime.getYear
ZonedDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12:::dateTime.getMonthValue
ZonedDateTime#getMonth():::Gets the month-of-year field using the Month enum:::dateTime.getMonth
ZonedDateTime#getDayOfMonth():::Gets the day-of-month field:::dateTime.getDayOfMonth
ZonedDateTime#getDayOfYear():::Gets the day-of-year field:::dateTime.getDayOfYear
ZonedDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek:::dateTime.getDayOfWeek
ZonedDateTime#toLocalTime():::Gets the LocalTime part of this date-time:::dateTime.toLocalTime
ZonedDateTime#getHour():::Gets the hour-of-day field.:::dateTime.getHour
ZonedDateTime#getMinute():::Gets the minute-of-hour field.:::dateTime.getMinute
ZonedDateTime#getSecond():::Gets the second-of-minute field.:::dateTime.getSecond
ZonedDateTime#getNano():::Gets the nano-of-second field.:::dateTime.getNano
ZonedDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time:::this.resolveOffset->instant.getEpochSecond->instant.getNano->this.create->odt.toLocalDateTime->odt.getOffset->this.ofLocal->this.resolveLocal->dateTime.toLocalDate->LocalDateTime.of->this.resolveLocal->dateTime.toLocalTime->LocalDateTime.of->this.resolveLocal->adjuster.adjustInto
ZonedDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value:::this.getNano->this.create->f.checkValidIntValue->ZoneOffset.ofTotalSeconds->this.resolveOffset->dateTime.with->this.resolveLocal->field.adjustInto
ZonedDateTime#withYear(int):::Returns a copy of this ZonedDateTime with the year altered:::dateTime.withYear->this.resolveLocal
ZonedDateTime#withMonth(int):::Returns a copy of this ZonedDateTime with the month-of-year altered:::dateTime.withMonth->this.resolveLocal
ZonedDateTime#withDayOfMonth(int):::Returns a copy of this ZonedDateTime with the day-of-month altered:::dateTime.withDayOfMonth->this.resolveLocal
ZonedDateTime#withDayOfYear(int):::Returns a copy of this ZonedDateTime with the day-of-year altered:::dateTime.withDayOfYear->this.resolveLocal
ZonedDateTime#withHour(int):::Returns a copy of this ZonedDateTime with the hour-of-day altered:::dateTime.withHour->this.resolveLocal
ZonedDateTime#withMinute(int):::Returns a copy of this ZonedDateTime with the minute-of-hour altered:::dateTime.withMinute->this.resolveLocal
ZonedDateTime#withSecond(int):::Returns a copy of this ZonedDateTime with the second-of-minute altered:::dateTime.withSecond->this.resolveLocal
ZonedDateTime#withNano(int):::Returns a copy of this ZonedDateTime with the nano-of-second altered:::dateTime.withNano->this.resolveLocal
ZonedDateTime#truncatedTo(TemporalUnit):::Returns a copy of this ZonedDateTime with the time truncated:::dateTime.truncatedTo->this.resolveLocal
ZonedDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added:::dateTime.plus->this.resolveLocal->Objects.requireNonNull->amountToAdd.addTo
ZonedDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added:::unit.isDateBased->dateTime.plus->this.resolveInstant->dateTime.plus->this.resolveLocal->unit.addTo
ZonedDateTime#plusYears(long):::Returns a copy of this ZonedDateTime with the specified number of years added:::dateTime.plusYears->this.resolveLocal
ZonedDateTime#plusMonths(long):::Returns a copy of this ZonedDateTime with the specified number of months added:::dateTime.plusMonths->this.resolveLocal
ZonedDateTime#plusWeeks(long):::Returns a copy of this ZonedDateTime with the specified number of weeks added:::dateTime.plusWeeks->this.resolveLocal
ZonedDateTime#plusDays(long):::Returns a copy of this ZonedDateTime with the specified number of days added:::dateTime.plusDays->this.resolveLocal
ZonedDateTime#plusHours(long):::Returns a copy of this ZonedDateTime with the specified number of hours added:::dateTime.plusHours->this.resolveInstant
ZonedDateTime#plusMinutes(long):::Returns a copy of this ZonedDateTime with the specified number of minutes added:::dateTime.plusMinutes->this.resolveInstant
ZonedDateTime#plusSeconds(long):::Returns a copy of this ZonedDateTime with the specified number of seconds added:::dateTime.plusSeconds->this.resolveInstant
ZonedDateTime#plusNanos(long):::Returns a copy of this ZonedDateTime with the specified number of nanoseconds added:::dateTime.plusNanos->this.resolveInstant
ZonedDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted:::dateTime.minus->this.resolveLocal->Objects.requireNonNull->amountToSubtract.subtractFrom
ZonedDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted:::this.plus->plus(Long.MAX_VALUE, unit).plus
ZonedDateTime#minusYears(long):::Returns a copy of this ZonedDateTime with the specified number of years subtracted:::this.plusYears->plusYears(Long.MAX_VALUE).plusYears
ZonedDateTime#minusMonths(long):::Returns a copy of this ZonedDateTime with the specified number of months subtracted:::this.plusMonths->plusMonths(Long.MAX_VALUE).plusMonths
ZonedDateTime#minusWeeks(long):::Returns a copy of this ZonedDateTime with the specified number of weeks subtracted:::this.plusWeeks->plusWeeks(Long.MAX_VALUE).plusWeeks
ZonedDateTime#minusDays(long):::Returns a copy of this ZonedDateTime with the specified number of days subtracted:::this.plusDays->plusDays(Long.MAX_VALUE).plusDays
ZonedDateTime#minusHours(long):::Returns a copy of this ZonedDateTime with the specified number of hours subtracted:::this.plusHours->plusHours(Long.MAX_VALUE).plusHours
ZonedDateTime#minusMinutes(long):::Returns a copy of this ZonedDateTime with the specified number of minutes subtracted:::this.plusMinutes->plusMinutes(Long.MAX_VALUE).plusMinutes
ZonedDateTime#minusSeconds(long):::Returns a copy of this ZonedDateTime with the specified number of seconds subtracted:::this.plusSeconds->plusSeconds(Long.MAX_VALUE).plusSeconds
ZonedDateTime#minusNanos(long):::Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted:::this.plusNanos->plusNanos(Long.MAX_VALUE).plusNanos
ZonedDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::TemporalQueries.localDate->this.toLocalDate->ChronoZonedDateTime.super.query
ZonedDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit:::ZonedDateTime.from->end.withZoneSameInstant->unit.isDateBased->end.toOffsetDateTime->toOffsetDateTime().until->dateTime.until->unit.between
ZonedDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects.requireNonNull->formatter.format
ZonedDateTime#toOffsetDateTime():::Converts this date-time to an OffsetDateTime:::OffsetDateTime.of
ZonedDateTime#equals(Object):::Checks if this date-time is equal to another date-time:::dateTime.equals->offset.equals->zone.equals
ZonedDateTime#hashCode():::A hash code for this date-time.:::dateTime.hashCode->offset.hashCode->zone.hashCode->Integer.rotateLeft
ZonedDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00[Europe/Paris]:::dateTime.toString->offset.toString->zone.toString
ZoneId#systemDefault():::Gets the system default time-zone:::TimeZone.getDefault().toZoneId
ZoneId#getAvailableZoneIds():::Gets the set of available zone IDs:::ZoneRulesProvider.getAvailableZoneIds
ZoneId#of(String, Map):::Obtains an instance of ZoneId using its ID using a map of aliases to supplement the standard zone IDs:::Objects.requireNonNull->Objects.requireNonNull->aliasMap.get->Objects.requireNonNullElse->this.of
ZoneId#of(String):::Obtains an instance of ZoneId from an ID ensuring that the ID is valid and available for use:::this.of
ZoneId#ofOffset(String, ZoneOffset):::Obtains an instance of ZoneId wrapping an offset:::Objects.requireNonNull->Objects.requireNonNull->prefix.length->prefix.equals->prefix.equals->prefix.equals->offset.getTotalSeconds->offset.getId->prefix.concat->offset.getRules
ZoneId#of(String, boolean):::Parses the ID, taking a flag to indicate whether ZoneRulesException should be thrown or not, used in deserialization.:::Objects.requireNonNull->zoneId.length->zoneId.startsWith->zoneId.startsWith->zoneId.startsWith->zoneId.startsWith->zoneId.startsWith->this.ofWithPrefix->this.ofWithPrefix->ZoneOffset.of->ZoneRegion.ofId
ZoneId#from(TemporalAccessor):::Obtains an instance of ZoneId from a temporal object:::TemporalQueries.zone->temporal.query->temporal.getClass().getName
ZoneId#getId():::Gets the unique time-zone ID:::
ZoneId#getDisplayName(TextStyle, Locale):::Gets the textual representation of the zone, such as 'British Time' or '+02:00':::this.toTemporal->new DateTimeFormatterBuilder().appendZoneText(style).toFormatter(locale).format
ZoneId#getRules():::Gets the time-zone rules for this ID allowing calculations to be performed:::
ZoneId#normalized():::Normalizes the time-zone ID, returning a ZoneOffset where possible:::this.getRules->rules.isFixedOffset->rules.getOffset
ZoneId#equals(Object):::Checks if this time-zone ID is equal to another time-zone ID:::other.getId->getId().equals
ZoneId#hashCode():::A hash code for this time-zone ID.:::getId().hashCode
ZoneId#toString():::Outputs this zone as a String, using the ID.:::this.getId
ZoneOffset#of(String):::Obtains an instance of ZoneOffset using the ID:::Objects.requireNonNull->ID_CACHE.get->offsetId.charAt->offsetId.charAt->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->this.parseNumber->offsetId.length->offsetId.charAt->this.ofHoursMinutesSeconds->this.ofHoursMinutesSeconds
ZoneOffset#ofHours(int):::Obtains an instance of ZoneOffset using an offset in hours.:::this.ofHoursMinutesSeconds
ZoneOffset#ofHoursMinutes(int, int):::Obtains an instance of ZoneOffset using an offset in hours and minutes:::this.ofHoursMinutesSeconds
ZoneOffset#ofHoursMinutesSeconds(int, int, int):::Obtains an instance of ZoneOffset using an offset in hours, minutes and seconds:::this.validate->this.totalSeconds->this.ofTotalSeconds
ZoneOffset#from(TemporalAccessor):::Obtains an instance of ZoneOffset from a temporal object:::Objects.requireNonNull->TemporalQueries.offset->temporal.query->temporal.getClass().getName
ZoneOffset#ofTotalSeconds(int):::Obtains an instance of ZoneOffset specifying the total offset in seconds  The offset must be in the range -18:00 to +18:00, which corresponds to -64800 to +64800.:::SECONDS_CACHE.get->SECONDS_CACHE.putIfAbsent->SECONDS_CACHE.get->result.getId->ID_CACHE.putIfAbsent
ZoneOffset#getTotalSeconds():::Gets the total zone offset in seconds:::
ZoneOffset#getId():::Gets the normalized zone offset ID:::
ZoneOffset#getRules():::Gets the associated time-zone rules:::ZoneRules.of
ZoneOffset#isSupported(TemporalField):::Checks if the specified field is supported:::field.isSupportedBy
ZoneOffset#range(TemporalField):::Gets the range of valid values for the specified field:::TemporalAccessor.super.range
ZoneOffset#get(TemporalField):::Gets the value of the specified field from this offset as an int:::this.getLong->range(field).checkValidIntValue
ZoneOffset#getLong(TemporalField):::Gets the value of the specified field from this offset as a long:::field.getFrom
ZoneOffset#query(TemporalQuery):::Queries this offset using the specified query:::TemporalQueries.offset->TemporalQueries.zone->TemporalAccessor.super.query
ZoneOffset#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset as this object:::temporal.with
ZoneOffset#compareTo(ZoneOffset):::Compares this offset to another offset in descending order:::
ZoneOffset#equals(Object):::Checks if this offset is equal to another offset:::
ZoneOffset#hashCode():::A hash code for this offset.:::
ZoneOffset#toString():::Outputs this offset as a String, using the normalized ID.:::
ZoneRegion#ofId(String, boolean):::Obtains an instance of ZoneId from an identifier.:::Objects.requireNonNull->this.checkName->ZoneRulesProvider.getRules

java.time.Clock#systemUTC()->Clock:::Obtains a clock that returns the current instant using the best available  system clock, converting to date and time using the UTC time-zone
java.time.Clock#systemDefaultZone()->Clock:::Obtains a clock that returns the current instant using the best available  system clock, converting to date and time using the default time-zone
java.time.Clock#system(ZoneId)->Clock:::Obtains a clock that returns the current instant using the best available  system clock
java.time.Clock#tickMillis(ZoneId)->Clock:::Obtains a clock that returns the current instant ticking in whole milliseconds  using the best available system clock
java.time.Clock#tickSeconds(ZoneId)->Clock:::Obtains a clock that returns the current instant ticking in whole seconds  using the best available system clock
java.time.Clock#tickMinutes(ZoneId)->Clock:::Obtains a clock that returns the current instant ticking in whole minutes  using the best available system clock
java.time.Clock#tick(Clock, Duration)->Clock:::Obtains a clock that returns instants from the specified clock truncated  to the nearest occurrence of the specified duration
java.time.Clock#fixed(Instant, ZoneId)->Clock:::Obtains a clock that always returns the same instant
java.time.Clock#offset(Clock, Duration)->Clock:::Obtains a clock that returns instants from the specified clock with the  specified duration added  <p>  This clock wraps another clock, returning instants that are later by the  specified duration
java.time.Clock#getZone()->ZoneId:::Gets the time-zone being used to create dates and times
java.time.Clock#withZone(ZoneId)->Clock:::Returns a copy of this clock with a different time-zone
java.time.Clock#millis()->long:::Gets the current millisecond instant of the clock
java.time.Clock#instant()->Instant:::Gets the current instant of the clock
java.time.Clock#equals(Object)->boolean:::Checks if this clock is equal to another clock
java.time.Clock#hashCode()->int:::A hash code for this clock
java.time.Clock.SystemClock#getZone()->ZoneId:::
java.time.Clock.SystemClock#withZone(ZoneId)->Clock:::
java.time.Clock.SystemClock#millis()->long:::
java.time.Clock.SystemClock#instant()->Instant:::
java.time.Clock.SystemClock#equals(Object)->boolean:::
java.time.Clock.SystemClock#hashCode()->int:::
java.time.Clock.SystemClock#toString()->String:::
java.time.Clock.FixedClock#getZone()->ZoneId:::
java.time.Clock.FixedClock#withZone(ZoneId)->Clock:::
java.time.Clock.FixedClock#millis()->long:::
java.time.Clock.FixedClock#instant()->Instant:::
java.time.Clock.FixedClock#equals(Object)->boolean:::
java.time.Clock.FixedClock#hashCode()->int:::
java.time.Clock.FixedClock#toString()->String:::
java.time.Clock.OffsetClock#getZone()->ZoneId:::
java.time.Clock.OffsetClock#withZone(ZoneId)->Clock:::
java.time.Clock.OffsetClock#millis()->long:::
java.time.Clock.OffsetClock#instant()->Instant:::
java.time.Clock.OffsetClock#equals(Object)->boolean:::
java.time.Clock.OffsetClock#hashCode()->int:::
java.time.Clock.OffsetClock#toString()->String:::
java.time.Clock.TickClock#getZone()->ZoneId:::
java.time.Clock.TickClock#withZone(ZoneId)->Clock:::
java.time.Clock.TickClock#millis()->long:::
java.time.Clock.TickClock#instant()->Instant:::
java.time.Clock.TickClock#equals(Object)->boolean:::
java.time.Clock.TickClock#hashCode()->int:::
java.time.Clock.TickClock#toString()->String:::
java.time.Duration#ofDays(long)->Duration:::Obtains a {@code Duration} representing a number of standard 24 hour days
java.time.Duration#ofHours(long)->Duration:::Obtains a {@code Duration} representing a number of standard hours
java.time.Duration#ofMinutes(long)->Duration:::Obtains a {@code Duration} representing a number of standard minutes
java.time.Duration#ofSeconds(long)->Duration:::Obtains a {@code Duration} representing a number of seconds
java.time.Duration#ofSeconds(long, long)->Duration:::Obtains a {@code Duration} representing a number of seconds and an  adjustment in nanoseconds
java.time.Duration#ofMillis(long)->Duration:::Obtains a {@code Duration} representing a number of milliseconds
java.time.Duration#ofNanos(long)->Duration:::Obtains a {@code Duration} representing a number of nanoseconds
java.time.Duration#of(long, TemporalUnit)->Duration:::Obtains a {@code Duration} representing an amount in the specified unit
java.time.Duration#from(TemporalAmount)->Duration:::Obtains an instance of {@code Duration} from a temporal amount
java.time.Duration#parse(CharSequence)->Duration:::Obtains a {@code Duration} from a text string such as {@code PnDTnHnMn.nS}
java.time.Duration#between(Temporal, Temporal)->Duration:::Obtains a {@code Duration} representing the duration between two temporal objects
java.time.Duration#get(TemporalUnit)->long:::Gets the value of the requested unit
java.time.Duration#getUnits()->List<TemporalUnit>:::Gets the set of units supported by this duration
java.time.Duration#isZero()->boolean:::Checks if this duration is zero length
java.time.Duration#isNegative()->boolean:::Checks if this duration is negative, excluding zero
java.time.Duration#getSeconds()->long:::Gets the number of seconds in this duration
java.time.Duration#getNano()->int:::Gets the number of nanoseconds within the second in this duration
java.time.Duration#withSeconds(long)->Duration:::Returns a copy of this duration with the specified amount of seconds
java.time.Duration#withNanos(int)->Duration:::Returns a copy of this duration with the specified nano-of-second
java.time.Duration#plus(Duration)->Duration:::Returns a copy of this duration with the specified duration added
java.time.Duration#plus(long, TemporalUnit)->Duration:::Returns a copy of this duration with the specified duration added
java.time.Duration#plusDays(long)->Duration:::Returns a copy of this duration with the specified duration in standard 24 hour days added
java.time.Duration#plusHours(long)->Duration:::Returns a copy of this duration with the specified duration in hours added
java.time.Duration#plusMinutes(long)->Duration:::Returns a copy of this duration with the specified duration in minutes added
java.time.Duration#plusSeconds(long)->Duration:::Returns a copy of this duration with the specified duration in seconds added
java.time.Duration#plusMillis(long)->Duration:::Returns a copy of this duration with the specified duration in milliseconds added
java.time.Duration#plusNanos(long)->Duration:::Returns a copy of this duration with the specified duration in nanoseconds added
java.time.Duration#minus(Duration)->Duration:::Returns a copy of this duration with the specified duration subtracted
java.time.Duration#minus(long, TemporalUnit)->Duration:::Returns a copy of this duration with the specified duration subtracted
java.time.Duration#minusDays(long)->Duration:::Returns a copy of this duration with the specified duration in standard 24 hour days subtracted
java.time.Duration#minusHours(long)->Duration:::Returns a copy of this duration with the specified duration in hours subtracted
java.time.Duration#minusMinutes(long)->Duration:::Returns a copy of this duration with the specified duration in minutes subtracted
java.time.Duration#minusSeconds(long)->Duration:::Returns a copy of this duration with the specified duration in seconds subtracted
java.time.Duration#minusMillis(long)->Duration:::Returns a copy of this duration with the specified duration in milliseconds subtracted
java.time.Duration#minusNanos(long)->Duration:::Returns a copy of this duration with the specified duration in nanoseconds subtracted
java.time.Duration#multipliedBy(long)->Duration:::Returns a copy of this duration multiplied by the scalar
java.time.Duration#dividedBy(long)->Duration:::Returns a copy of this duration divided by the specified value
java.time.Duration#dividedBy(Duration)->long:::Returns number of whole times a specified Duration occurs within this Duration
java.time.Duration#negated()->Duration:::Returns a copy of this duration with the length negated
java.time.Duration#abs()->Duration:::Returns a copy of this duration with a positive length
java.time.Duration#addTo(Temporal)->Temporal:::Adds this duration to the specified temporal object
java.time.Duration#subtractFrom(Temporal)->Temporal:::Subtracts this duration from the specified temporal object
java.time.Duration#toDays()->long:::Gets the number of days in this duration
java.time.Duration#toHours()->long:::Gets the number of hours in this duration
java.time.Duration#toMinutes()->long:::Gets the number of minutes in this duration
java.time.Duration#toSeconds()->long:::Gets the number of seconds in this duration
java.time.Duration#toMillis()->long:::Converts this duration to the total length in milliseconds
java.time.Duration#toNanos()->long:::Converts this duration to the total length in nanoseconds expressed as a {@code long}
java.time.Duration#toDaysPart()->long:::Extracts the number of days in the duration
java.time.Duration#toHoursPart()->int:::Extracts the number of hours part in the duration
java.time.Duration#toMinutesPart()->int:::Extracts the number of minutes part in the duration
java.time.Duration#toSecondsPart()->int:::Extracts the number of seconds part in the duration
java.time.Duration#toMillisPart()->int:::Extracts the number of milliseconds part of the duration
java.time.Duration#toNanosPart()->int:::Get the nanoseconds part within seconds of the duration
java.time.Duration#truncatedTo(TemporalUnit)->Duration:::Returns a copy of this {@code Duration} truncated to the specified unit
java.time.Duration#compareTo(Duration)->int:::Compares this duration to the specified {@code Duration}
java.time.Duration#equals(Object)->boolean:::Checks if this duration is equal to the specified {@code Duration}
java.time.Duration#hashCode()->int:::A hash code for this duration.
java.time.Duration#toString()->String:::A string representation of this duration using ISO-8601 seconds  based representation, such as {@code PT8H6M12.345S}
java.time.Duration#writeExternal(DataOutput)->void:::
java.time.Duration#readExternal(DataInput)->Duration:::
java.time.Instant#now()->Instant:::Obtains the current instant from the system clock
java.time.Instant#now(Clock)->Instant:::Obtains the current instant from the specified clock
java.time.Instant#ofEpochSecond(long)->Instant:::Obtains an instance of {@code Instant} using seconds from the  epoch of 1970-01-01T00:00:00Z
java.time.Instant#ofEpochSecond(long, long)->Instant:::Obtains an instance of {@code Instant} using seconds from the  epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second
java.time.Instant#ofEpochMilli(long)->Instant:::Obtains an instance of {@code Instant} using milliseconds from the  epoch of 1970-01-01T00:00:00Z
java.time.Instant#from(TemporalAccessor)->Instant:::Obtains an instance of {@code Instant} from a temporal object
java.time.Instant#parse(CharSequence)->Instant:::Obtains an instance of {@code Instant} from a text string such as  {@code 2007-12-03T10:15:30.00Z}
java.time.Instant#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.Instant#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.Instant#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.Instant#get(TemporalField)->int:::Gets the value of the specified field from this instant as an {@code int}
java.time.Instant#getLong(TemporalField)->long:::Gets the value of the specified field from this instant as a {@code long}
java.time.Instant#getEpochSecond()->long:::Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z
java.time.Instant#getNano()->int:::Gets the number of nanoseconds, later along the time-line, from the start  of the second
java.time.Instant#with(TemporalAdjuster)->Instant:::Returns an adjusted copy of this instant
java.time.Instant#with(TemporalField, long)->Instant:::Returns a copy of this instant with the specified field set to a new value
java.time.Instant#truncatedTo(TemporalUnit)->Instant:::Returns a copy of this {@code Instant} truncated to the specified unit
java.time.Instant#plus(TemporalAmount)->Instant:::Returns a copy of this instant with the specified amount added
java.time.Instant#plus(long, TemporalUnit)->Instant:::Returns a copy of this instant with the specified amount added
java.time.Instant#plusSeconds(long)->Instant:::Returns a copy of this instant with the specified duration in seconds added
java.time.Instant#plusMillis(long)->Instant:::Returns a copy of this instant with the specified duration in milliseconds added
java.time.Instant#plusNanos(long)->Instant:::Returns a copy of this instant with the specified duration in nanoseconds added
java.time.Instant#minus(TemporalAmount)->Instant:::Returns a copy of this instant with the specified amount subtracted
java.time.Instant#minus(long, TemporalUnit)->Instant:::Returns a copy of this instant with the specified amount subtracted
java.time.Instant#minusSeconds(long)->Instant:::Returns a copy of this instant with the specified duration in seconds subtracted
java.time.Instant#minusMillis(long)->Instant:::Returns a copy of this instant with the specified duration in milliseconds subtracted
java.time.Instant#minusNanos(long)->Instant:::Returns a copy of this instant with the specified duration in nanoseconds subtracted
java.time.Instant#query(TemporalQuery<R>)->R:::Queries this instant using the specified query
java.time.Instant#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have this instant
java.time.Instant#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another instant in terms of the specified unit
java.time.Instant#atOffset(ZoneOffset)->OffsetDateTime:::Combines this instant with an offset to create an {@code OffsetDateTime}
java.time.Instant#atZone(ZoneId)->ZonedDateTime:::Combines this instant with a time-zone to create a {@code ZonedDateTime}
java.time.Instant#toEpochMilli()->long:::Converts this instant to the number of milliseconds from the epoch  of 1970-01-01T00:00:00Z
java.time.Instant#compareTo(Instant)->int:::Compares this instant to the specified instant
java.time.Instant#isAfter(Instant)->boolean:::Checks if this instant is after the specified instant
java.time.Instant#isBefore(Instant)->boolean:::Checks if this instant is before the specified instant
java.time.Instant#equals(Object)->boolean:::Checks if this instant is equal to the specified instant
java.time.Instant#hashCode()->int:::Returns a hash code for this instant.
java.time.Instant#toString()->String:::A string representation of this instant using ISO-8601 representation
java.time.Instant#writeExternal(DataOutput)->void:::
java.time.Instant#readExternal(DataInput)->Instant:::
java.time.LocalDate#now()->LocalDate:::Obtains the current date from the system clock in the default time-zone
java.time.LocalDate#now(ZoneId)->LocalDate:::Obtains the current date from the system clock in the specified time-zone
java.time.LocalDate#now(Clock)->LocalDate:::Obtains the current date from the specified clock
java.time.LocalDate#of(int, Month, int)->LocalDate:::Obtains an instance of {@code LocalDate} from a year, month and day
java.time.LocalDate#of(int, int, int)->LocalDate:::Obtains an instance of {@code LocalDate} from a year, month and day
java.time.LocalDate#ofYearDay(int, int)->LocalDate:::Obtains an instance of {@code LocalDate} from a year and day-of-year
java.time.LocalDate#ofInstant(Instant, ZoneId)->LocalDate:::Obtains an instance of {@code LocalDate} from an {@code Instant} and zone ID
java.time.LocalDate#ofEpochDay(long)->LocalDate:::Obtains an instance of {@code LocalDate} from the epoch day count
java.time.LocalDate#from(TemporalAccessor)->LocalDate:::Obtains an instance of {@code LocalDate} from a temporal object
java.time.LocalDate#parse(CharSequence)->LocalDate:::Obtains an instance of {@code LocalDate} from a text string such as {@code 2007-12-03}
java.time.LocalDate#parse(CharSequence, DateTimeFormatter)->LocalDate:::Obtains an instance of {@code LocalDate} from a text string using a specific formatter
java.time.LocalDate#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.LocalDate#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.LocalDate#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.LocalDate#get(TemporalField)->int:::Gets the value of the specified field from this date as an {@code int}
java.time.LocalDate#getLong(TemporalField)->long:::Gets the value of the specified field from this date as a {@code long}
java.time.LocalDate#getChronology()->IsoChronology:::Gets the chronology of this date, which is the ISO calendar system
java.time.LocalDate#getEra()->IsoEra:::Gets the era applicable at this date
java.time.LocalDate#getYear()->int:::Gets the year field
java.time.LocalDate#getMonthValue()->int:::Gets the month-of-year field from 1 to 12
java.time.LocalDate#getMonth()->Month:::Gets the month-of-year field using the {@code Month} enum
java.time.LocalDate#getDayOfMonth()->int:::Gets the day-of-month field
java.time.LocalDate#getDayOfYear()->int:::Gets the day-of-year field
java.time.LocalDate#getDayOfWeek()->DayOfWeek:::Gets the day-of-week field, which is an enum {@code DayOfWeek}
java.time.LocalDate#isLeapYear()->boolean:::Checks if the year is a leap year, according to the ISO proleptic  calendar system rules
java.time.LocalDate#lengthOfMonth()->int:::Returns the length of the month represented by this date
java.time.LocalDate#lengthOfYear()->int:::Returns the length of the year represented by this date
java.time.LocalDate#with(TemporalAdjuster)->LocalDate:::Returns an adjusted copy of this date
java.time.LocalDate#with(TemporalField, long)->LocalDate:::Returns a copy of this date with the specified field set to a new value
java.time.LocalDate#withYear(int)->LocalDate:::Returns a copy of this {@code LocalDate} with the year altered
java.time.LocalDate#withMonth(int)->LocalDate:::Returns a copy of this {@code LocalDate} with the month-of-year altered
java.time.LocalDate#withDayOfMonth(int)->LocalDate:::Returns a copy of this {@code LocalDate} with the day-of-month altered
java.time.LocalDate#withDayOfYear(int)->LocalDate:::Returns a copy of this {@code LocalDate} with the day-of-year altered
java.time.LocalDate#plus(TemporalAmount)->LocalDate:::Returns a copy of this date with the specified amount added
java.time.LocalDate#plus(long, TemporalUnit)->LocalDate:::Returns a copy of this date with the specified amount added
java.time.LocalDate#plusYears(long)->LocalDate:::Returns a copy of this {@code LocalDate} with the specified number of years added
java.time.LocalDate#plusMonths(long)->LocalDate:::Returns a copy of this {@code LocalDate} with the specified number of months added
java.time.LocalDate#plusWeeks(long)->LocalDate:::Returns a copy of this {@code LocalDate} with the specified number of weeks added
java.time.LocalDate#plusDays(long)->LocalDate:::Returns a copy of this {@code LocalDate} with the specified number of days added
java.time.LocalDate#minus(TemporalAmount)->LocalDate:::Returns a copy of this date with the specified amount subtracted
java.time.LocalDate#minus(long, TemporalUnit)->LocalDate:::Returns a copy of this date with the specified amount subtracted
java.time.LocalDate#minusYears(long)->LocalDate:::Returns a copy of this {@code LocalDate} with the specified number of years subtracted
java.time.LocalDate#minusMonths(long)->LocalDate:::Returns a copy of this {@code LocalDate} with the specified number of months subtracted
java.time.LocalDate#minusWeeks(long)->LocalDate:::Returns a copy of this {@code LocalDate} with the specified number of weeks subtracted
java.time.LocalDate#minusDays(long)->LocalDate:::Returns a copy of this {@code LocalDate} with the specified number of days subtracted
java.time.LocalDate#query(TemporalQuery<R>)->R:::Queries this date using the specified query
java.time.LocalDate#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same date as this object
java.time.LocalDate#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another date in terms of the specified unit
java.time.LocalDate#daysUntil(LocalDate)->long:::
java.time.LocalDate#until(ChronoLocalDate)->Period:::Calculates the period between this date and another date as a {@code Period}
java.time.LocalDate#datesUntil(LocalDate)->Stream<LocalDate>:::Returns a sequential ordered stream of dates
java.time.LocalDate#datesUntil(LocalDate, Period)->Stream<LocalDate>:::Returns a sequential ordered stream of dates by given incremental step
java.time.LocalDate#format(DateTimeFormatter)->String:::Formats this date using the specified formatter
java.time.LocalDate#atTime(LocalTime)->LocalDateTime:::Combines this date with a time to create a {@code LocalDateTime}
java.time.LocalDate#atTime(int, int)->LocalDateTime:::Combines this date with a time to create a {@code LocalDateTime}
java.time.LocalDate#atTime(int, int, int)->LocalDateTime:::Combines this date with a time to create a {@code LocalDateTime}
java.time.LocalDate#atTime(int, int, int, int)->LocalDateTime:::Combines this date with a time to create a {@code LocalDateTime}
java.time.LocalDate#atTime(OffsetTime)->OffsetDateTime:::Combines this date with an offset time to create an {@code OffsetDateTime}
java.time.LocalDate#atStartOfDay()->LocalDateTime:::Combines this date with the time of midnight to create a {@code LocalDateTime}  at the start of this date
java.time.LocalDate#atStartOfDay(ZoneId)->ZonedDateTime:::Returns a zoned date-time from this date at the earliest valid time according  to the rules in the time-zone
java.time.LocalDate#toEpochDay()->long:::
java.time.LocalDate#toEpochSecond(LocalTime, ZoneOffset)->long:::Converts this {@code LocalDate} to the number of seconds since the epoch  of 1970-01-01T00:00:00Z
java.time.LocalDate#compareTo(ChronoLocalDate)->int:::Compares this date to another date
java.time.LocalDate#compareTo0(LocalDate)->int:::
java.time.LocalDate#isAfter(ChronoLocalDate)->boolean:::Checks if this date is after the specified date
java.time.LocalDate#isBefore(ChronoLocalDate)->boolean:::Checks if this date is before the specified date
java.time.LocalDate#isEqual(ChronoLocalDate)->boolean:::Checks if this date is equal to the specified date
java.time.LocalDate#equals(Object)->boolean:::Checks if this date is equal to another date
java.time.LocalDate#hashCode()->int:::A hash code for this date.
java.time.LocalDate#toString()->String:::Outputs this date as a {@code String}, such as {@code 2007-12-03}
java.time.LocalDate#writeExternal(DataOutput)->void:::
java.time.LocalDate#readExternal(DataInput)->LocalDate:::
java.time.LocalDateTime#now()->LocalDateTime:::Obtains the current date-time from the system clock in the default time-zone
java.time.LocalDateTime#now(ZoneId)->LocalDateTime:::Obtains the current date-time from the system clock in the specified time-zone
java.time.LocalDateTime#now(Clock)->LocalDateTime:::Obtains the current date-time from the specified clock
java.time.LocalDateTime#of(int, Month, int, int, int)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from year, month,  day, hour and minute, setting the second and nanosecond to zero
java.time.LocalDateTime#of(int, Month, int, int, int, int)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from year, month,  day, hour, minute and second, setting the nanosecond to zero
java.time.LocalDateTime#of(int, Month, int, int, int, int, int)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from year, month,  day, hour, minute, second and nanosecond
java.time.LocalDateTime#of(int, int, int, int, int)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from year, month,  day, hour and minute, setting the second and nanosecond to zero
java.time.LocalDateTime#of(int, int, int, int, int, int)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from year, month,  day, hour, minute and second, setting the nanosecond to zero
java.time.LocalDateTime#of(int, int, int, int, int, int, int)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from year, month,  day, hour, minute, second and nanosecond
java.time.LocalDateTime#of(LocalDate, LocalTime)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from a date and time.
java.time.LocalDateTime#ofInstant(Instant, ZoneId)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from an {@code Instant} and zone ID
java.time.LocalDateTime#ofEpochSecond(long, int, ZoneOffset)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} using seconds from the  epoch of 1970-01-01T00:00:00Z
java.time.LocalDateTime#from(TemporalAccessor)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from a temporal object
java.time.LocalDateTime#parse(CharSequence)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from a text string such as {@code 2007-12-03T10:15:30}
java.time.LocalDateTime#parse(CharSequence, DateTimeFormatter)->LocalDateTime:::Obtains an instance of {@code LocalDateTime} from a text string using a specific formatter
java.time.LocalDateTime#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.LocalDateTime#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.LocalDateTime#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.LocalDateTime#get(TemporalField)->int:::Gets the value of the specified field from this date-time as an {@code int}
java.time.LocalDateTime#getLong(TemporalField)->long:::Gets the value of the specified field from this date-time as a {@code long}
java.time.LocalDateTime#toLocalDate()->LocalDate:::Gets the {@code LocalDate} part of this date-time
java.time.LocalDateTime#getYear()->int:::Gets the year field
java.time.LocalDateTime#getMonthValue()->int:::Gets the month-of-year field from 1 to 12
java.time.LocalDateTime#getMonth()->Month:::Gets the month-of-year field using the {@code Month} enum
java.time.LocalDateTime#getDayOfMonth()->int:::Gets the day-of-month field
java.time.LocalDateTime#getDayOfYear()->int:::Gets the day-of-year field
java.time.LocalDateTime#getDayOfWeek()->DayOfWeek:::Gets the day-of-week field, which is an enum {@code DayOfWeek}
java.time.LocalDateTime#toLocalTime()->LocalTime:::Gets the {@code LocalTime} part of this date-time
java.time.LocalDateTime#getHour()->int:::Gets the hour-of-day field.
java.time.LocalDateTime#getMinute()->int:::Gets the minute-of-hour field.
java.time.LocalDateTime#getSecond()->int:::Gets the second-of-minute field.
java.time.LocalDateTime#getNano()->int:::Gets the nano-of-second field.
java.time.LocalDateTime#with(TemporalAdjuster)->LocalDateTime:::Returns an adjusted copy of this date-time
java.time.LocalDateTime#with(TemporalField, long)->LocalDateTime:::Returns a copy of this date-time with the specified field set to a new value
java.time.LocalDateTime#withYear(int)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the year altered
java.time.LocalDateTime#withMonth(int)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the month-of-year altered
java.time.LocalDateTime#withDayOfMonth(int)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the day-of-month altered
java.time.LocalDateTime#withDayOfYear(int)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the day-of-year altered
java.time.LocalDateTime#withHour(int)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the hour-of-day altered
java.time.LocalDateTime#withMinute(int)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the minute-of-hour altered
java.time.LocalDateTime#withSecond(int)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the second-of-minute altered
java.time.LocalDateTime#withNano(int)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the nano-of-second altered
java.time.LocalDateTime#truncatedTo(TemporalUnit)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the time truncated
java.time.LocalDateTime#plus(TemporalAmount)->LocalDateTime:::Returns a copy of this date-time with the specified amount added
java.time.LocalDateTime#plus(long, TemporalUnit)->LocalDateTime:::Returns a copy of this date-time with the specified amount added
java.time.LocalDateTime#plusYears(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of years added
java.time.LocalDateTime#plusMonths(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of months added
java.time.LocalDateTime#plusWeeks(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of weeks added
java.time.LocalDateTime#plusDays(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of days added
java.time.LocalDateTime#plusHours(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of hours added
java.time.LocalDateTime#plusMinutes(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of minutes added
java.time.LocalDateTime#plusSeconds(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of seconds added
java.time.LocalDateTime#plusNanos(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of nanoseconds added
java.time.LocalDateTime#minus(TemporalAmount)->LocalDateTime:::Returns a copy of this date-time with the specified amount subtracted
java.time.LocalDateTime#minus(long, TemporalUnit)->LocalDateTime:::Returns a copy of this date-time with the specified amount subtracted
java.time.LocalDateTime#minusYears(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of years subtracted
java.time.LocalDateTime#minusMonths(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of months subtracted
java.time.LocalDateTime#minusWeeks(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of weeks subtracted
java.time.LocalDateTime#minusDays(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of days subtracted
java.time.LocalDateTime#minusHours(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of hours subtracted
java.time.LocalDateTime#minusMinutes(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of minutes subtracted
java.time.LocalDateTime#minusSeconds(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of seconds subtracted
java.time.LocalDateTime#minusNanos(long)->LocalDateTime:::Returns a copy of this {@code LocalDateTime} with the specified number of nanoseconds subtracted
java.time.LocalDateTime#query(TemporalQuery<R>)->R:::Queries this date-time using the specified query
java.time.LocalDateTime#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same date and time as this object
java.time.LocalDateTime#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another date-time in terms of the specified unit
java.time.LocalDateTime#format(DateTimeFormatter)->String:::Formats this date-time using the specified formatter
java.time.LocalDateTime#atOffset(ZoneOffset)->OffsetDateTime:::Combines this date-time with an offset to create an {@code OffsetDateTime}
java.time.LocalDateTime#atZone(ZoneId)->ZonedDateTime:::Combines this date-time with a time-zone to create a {@code ZonedDateTime}
java.time.LocalDateTime#compareTo(ChronoLocalDateTime<?>)->int:::Compares this date-time to another date-time
java.time.LocalDateTime#isAfter(ChronoLocalDateTime<?>)->boolean:::Checks if this date-time is after the specified date-time
java.time.LocalDateTime#isBefore(ChronoLocalDateTime<?>)->boolean:::Checks if this date-time is before the specified date-time
java.time.LocalDateTime#isEqual(ChronoLocalDateTime<?>)->boolean:::Checks if this date-time is equal to the specified date-time
java.time.LocalDateTime#equals(Object)->boolean:::Checks if this date-time is equal to another date-time
java.time.LocalDateTime#hashCode()->int:::A hash code for this date-time.
java.time.LocalDateTime#toString()->String:::Outputs this date-time as a {@code String}, such as {@code 2007-12-03T10:15:30}
java.time.LocalDateTime#writeExternal(DataOutput)->void:::
java.time.LocalDateTime#readExternal(DataInput)->LocalDateTime:::
java.time.LocalTime#now()->LocalTime:::Obtains the current time from the system clock in the default time-zone
java.time.LocalTime#now(ZoneId)->LocalTime:::Obtains the current time from the system clock in the specified time-zone
java.time.LocalTime#now(Clock)->LocalTime:::Obtains the current time from the specified clock
java.time.LocalTime#of(int, int)->LocalTime:::Obtains an instance of {@code LocalTime} from an hour and minute
java.time.LocalTime#of(int, int, int)->LocalTime:::Obtains an instance of {@code LocalTime} from an hour, minute and second
java.time.LocalTime#of(int, int, int, int)->LocalTime:::Obtains an instance of {@code LocalTime} from an hour, minute, second and nanosecond
java.time.LocalTime#ofInstant(Instant, ZoneId)->LocalTime:::Obtains an instance of {@code LocalTime} from an {@code Instant} and zone ID
java.time.LocalTime#ofSecondOfDay(long)->LocalTime:::Obtains an instance of {@code LocalTime} from a second-of-day value
java.time.LocalTime#ofNanoOfDay(long)->LocalTime:::Obtains an instance of {@code LocalTime} from a nanos-of-day value
java.time.LocalTime#from(TemporalAccessor)->LocalTime:::Obtains an instance of {@code LocalTime} from a temporal object
java.time.LocalTime#parse(CharSequence)->LocalTime:::Obtains an instance of {@code LocalTime} from a text string such as {@code 10:15}
java.time.LocalTime#parse(CharSequence, DateTimeFormatter)->LocalTime:::Obtains an instance of {@code LocalTime} from a text string using a specific formatter
java.time.LocalTime#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.LocalTime#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.LocalTime#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.LocalTime#get(TemporalField)->int:::Gets the value of the specified field from this time as an {@code int}
java.time.LocalTime#getLong(TemporalField)->long:::Gets the value of the specified field from this time as a {@code long}
java.time.LocalTime#getHour()->int:::Gets the hour-of-day field.
java.time.LocalTime#getMinute()->int:::Gets the minute-of-hour field.
java.time.LocalTime#getSecond()->int:::Gets the second-of-minute field.
java.time.LocalTime#getNano()->int:::Gets the nano-of-second field.
java.time.LocalTime#with(TemporalAdjuster)->LocalTime:::Returns an adjusted copy of this time
java.time.LocalTime#with(TemporalField, long)->LocalTime:::Returns a copy of this time with the specified field set to a new value
java.time.LocalTime#withHour(int)->LocalTime:::Returns a copy of this {@code LocalTime} with the hour-of-day altered
java.time.LocalTime#withMinute(int)->LocalTime:::Returns a copy of this {@code LocalTime} with the minute-of-hour altered
java.time.LocalTime#withSecond(int)->LocalTime:::Returns a copy of this {@code LocalTime} with the second-of-minute altered
java.time.LocalTime#withNano(int)->LocalTime:::Returns a copy of this {@code LocalTime} with the nano-of-second altered
java.time.LocalTime#truncatedTo(TemporalUnit)->LocalTime:::Returns a copy of this {@code LocalTime} with the time truncated
java.time.LocalTime#plus(TemporalAmount)->LocalTime:::Returns a copy of this time with the specified amount added
java.time.LocalTime#plus(long, TemporalUnit)->LocalTime:::Returns a copy of this time with the specified amount added
java.time.LocalTime#plusHours(long)->LocalTime:::Returns a copy of this {@code LocalTime} with the specified number of hours added
java.time.LocalTime#plusMinutes(long)->LocalTime:::Returns a copy of this {@code LocalTime} with the specified number of minutes added
java.time.LocalTime#plusSeconds(long)->LocalTime:::Returns a copy of this {@code LocalTime} with the specified number of seconds added
java.time.LocalTime#plusNanos(long)->LocalTime:::Returns a copy of this {@code LocalTime} with the specified number of nanoseconds added
java.time.LocalTime#minus(TemporalAmount)->LocalTime:::Returns a copy of this time with the specified amount subtracted
java.time.LocalTime#minus(long, TemporalUnit)->LocalTime:::Returns a copy of this time with the specified amount subtracted
java.time.LocalTime#minusHours(long)->LocalTime:::Returns a copy of this {@code LocalTime} with the specified number of hours subtracted
java.time.LocalTime#minusMinutes(long)->LocalTime:::Returns a copy of this {@code LocalTime} with the specified number of minutes subtracted
java.time.LocalTime#minusSeconds(long)->LocalTime:::Returns a copy of this {@code LocalTime} with the specified number of seconds subtracted
java.time.LocalTime#minusNanos(long)->LocalTime:::Returns a copy of this {@code LocalTime} with the specified number of nanoseconds subtracted
java.time.LocalTime#query(TemporalQuery<R>)->R:::Queries this time using the specified query
java.time.LocalTime#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same time as this object
java.time.LocalTime#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another time in terms of the specified unit
java.time.LocalTime#format(DateTimeFormatter)->String:::Formats this time using the specified formatter
java.time.LocalTime#atDate(LocalDate)->LocalDateTime:::Combines this time with a date to create a {@code LocalDateTime}
java.time.LocalTime#atOffset(ZoneOffset)->OffsetTime:::Combines this time with an offset to create an {@code OffsetTime}
java.time.LocalTime#toSecondOfDay()->int:::Extracts the time as seconds of day,  from {@code 0} to {@code 24 * 60 * 60 - 1}.
java.time.LocalTime#toNanoOfDay()->long:::Extracts the time as nanos of day,  from {@code 0} to {@code 24 * 60 * 60 * 1,000,000,000 - 1}.
java.time.LocalTime#toEpochSecond(LocalDate, ZoneOffset)->long:::Converts this {@code LocalTime} to the number of seconds since the epoch  of 1970-01-01T00:00:00Z
java.time.LocalTime#compareTo(LocalTime)->int:::Compares this time to another time
java.time.LocalTime#isAfter(LocalTime)->boolean:::Checks if this time is after the specified time
java.time.LocalTime#isBefore(LocalTime)->boolean:::Checks if this time is before the specified time
java.time.LocalTime#equals(Object)->boolean:::Checks if this time is equal to another time
java.time.LocalTime#hashCode()->int:::A hash code for this time.
java.time.LocalTime#toString()->String:::Outputs this time as a {@code String}, such as {@code 10:15}
java.time.LocalTime#writeExternal(DataOutput)->void:::
java.time.LocalTime#readExternal(DataInput)->LocalTime:::
java.time.MonthDay#now()->MonthDay:::Obtains the current month-day from the system clock in the default time-zone
java.time.MonthDay#now(ZoneId)->MonthDay:::Obtains the current month-day from the system clock in the specified time-zone
java.time.MonthDay#now(Clock)->MonthDay:::Obtains the current month-day from the specified clock
java.time.MonthDay#of(Month, int)->MonthDay:::Obtains an instance of {@code MonthDay}
java.time.MonthDay#of(int, int)->MonthDay:::Obtains an instance of {@code MonthDay}
java.time.MonthDay#from(TemporalAccessor)->MonthDay:::Obtains an instance of {@code MonthDay} from a temporal object
java.time.MonthDay#parse(CharSequence)->MonthDay:::Obtains an instance of {@code MonthDay} from a text string such as {@code --12-03}
java.time.MonthDay#parse(CharSequence, DateTimeFormatter)->MonthDay:::Obtains an instance of {@code MonthDay} from a text string using a specific formatter
java.time.MonthDay#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.MonthDay#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.MonthDay#get(TemporalField)->int:::Gets the value of the specified field from this month-day as an {@code int}
java.time.MonthDay#getLong(TemporalField)->long:::Gets the value of the specified field from this month-day as a {@code long}
java.time.MonthDay#getMonthValue()->int:::Gets the month-of-year field from 1 to 12
java.time.MonthDay#getMonth()->Month:::Gets the month-of-year field using the {@code Month} enum
java.time.MonthDay#getDayOfMonth()->int:::Gets the day-of-month field
java.time.MonthDay#isValidYear(int)->boolean:::Checks if the year is valid for this month-day
java.time.MonthDay#withMonth(int)->MonthDay:::Returns a copy of this {@code MonthDay} with the month-of-year altered
java.time.MonthDay#with(Month)->MonthDay:::Returns a copy of this {@code MonthDay} with the month-of-year altered
java.time.MonthDay#withDayOfMonth(int)->MonthDay:::Returns a copy of this {@code MonthDay} with the day-of-month altered
java.time.MonthDay#query(TemporalQuery<R>)->R:::Queries this month-day using the specified query
java.time.MonthDay#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have this month-day
java.time.MonthDay#format(DateTimeFormatter)->String:::Formats this month-day using the specified formatter
java.time.MonthDay#atYear(int)->LocalDate:::Combines this month-day with a year to create a {@code LocalDate}
java.time.MonthDay#compareTo(MonthDay)->int:::Compares this month-day to another month-day
java.time.MonthDay#isAfter(MonthDay)->boolean:::Checks if this month-day is after the specified month-day.
java.time.MonthDay#isBefore(MonthDay)->boolean:::Checks if this month-day is before the specified month-day.
java.time.MonthDay#equals(Object)->boolean:::Checks if this month-day is equal to another month-day
java.time.MonthDay#hashCode()->int:::A hash code for this month-day.
java.time.MonthDay#toString()->String:::Outputs this month-day as a {@code String}, such as {@code --12-03}
java.time.MonthDay#writeExternal(DataOutput)->void:::
java.time.MonthDay#readExternal(DataInput)->MonthDay:::
java.time.OffsetDateTime#timeLineOrder()->Comparator<OffsetDateTime>:::Gets a comparator that compares two {@code OffsetDateTime} instances  based solely on the instant
java.time.OffsetDateTime#now()->OffsetDateTime:::Obtains the current date-time from the system clock in the default time-zone
java.time.OffsetDateTime#now(ZoneId)->OffsetDateTime:::Obtains the current date-time from the system clock in the specified time-zone
java.time.OffsetDateTime#now(Clock)->OffsetDateTime:::Obtains the current date-time from the specified clock
java.time.OffsetDateTime#of(LocalDate, LocalTime, ZoneOffset)->OffsetDateTime:::Obtains an instance of {@code OffsetDateTime} from a date, time and offset
java.time.OffsetDateTime#of(LocalDateTime, ZoneOffset)->OffsetDateTime:::Obtains an instance of {@code OffsetDateTime} from a date-time and offset
java.time.OffsetDateTime#of(int, int, int, int, int, int, int, ZoneOffset)->OffsetDateTime:::Obtains an instance of {@code OffsetDateTime} from a year, month, day,  hour, minute, second, nanosecond and offset
java.time.OffsetDateTime#ofInstant(Instant, ZoneId)->OffsetDateTime:::Obtains an instance of {@code OffsetDateTime} from an {@code Instant} and zone ID
java.time.OffsetDateTime#from(TemporalAccessor)->OffsetDateTime:::Obtains an instance of {@code OffsetDateTime} from a temporal object
java.time.OffsetDateTime#parse(CharSequence)->OffsetDateTime:::Obtains an instance of {@code OffsetDateTime} from a text string  such as {@code 2007-12-03T10:15:30+01:00}
java.time.OffsetDateTime#parse(CharSequence, DateTimeFormatter)->OffsetDateTime:::Obtains an instance of {@code OffsetDateTime} from a text string using a specific formatter
java.time.OffsetDateTime#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.OffsetDateTime#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.OffsetDateTime#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.OffsetDateTime#get(TemporalField)->int:::Gets the value of the specified field from this date-time as an {@code int}
java.time.OffsetDateTime#getLong(TemporalField)->long:::Gets the value of the specified field from this date-time as a {@code long}
java.time.OffsetDateTime#getOffset()->ZoneOffset:::Gets the zone offset, such as '+01:00'
java.time.OffsetDateTime#withOffsetSameLocal(ZoneOffset)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified offset ensuring  that the result has the same local date-time
java.time.OffsetDateTime#withOffsetSameInstant(ZoneOffset)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified offset ensuring  that the result is at the same instant
java.time.OffsetDateTime#toLocalDateTime()->LocalDateTime:::Gets the {@code LocalDateTime} part of this date-time
java.time.OffsetDateTime#toLocalDate()->LocalDate:::Gets the {@code LocalDate} part of this date-time
java.time.OffsetDateTime#getYear()->int:::Gets the year field
java.time.OffsetDateTime#getMonthValue()->int:::Gets the month-of-year field from 1 to 12
java.time.OffsetDateTime#getMonth()->Month:::Gets the month-of-year field using the {@code Month} enum
java.time.OffsetDateTime#getDayOfMonth()->int:::Gets the day-of-month field
java.time.OffsetDateTime#getDayOfYear()->int:::Gets the day-of-year field
java.time.OffsetDateTime#getDayOfWeek()->DayOfWeek:::Gets the day-of-week field, which is an enum {@code DayOfWeek}
java.time.OffsetDateTime#toLocalTime()->LocalTime:::Gets the {@code LocalTime} part of this date-time
java.time.OffsetDateTime#getHour()->int:::Gets the hour-of-day field.
java.time.OffsetDateTime#getMinute()->int:::Gets the minute-of-hour field.
java.time.OffsetDateTime#getSecond()->int:::Gets the second-of-minute field.
java.time.OffsetDateTime#getNano()->int:::Gets the nano-of-second field.
java.time.OffsetDateTime#with(TemporalAdjuster)->OffsetDateTime:::Returns an adjusted copy of this date-time
java.time.OffsetDateTime#with(TemporalField, long)->OffsetDateTime:::Returns a copy of this date-time with the specified field set to a new value
java.time.OffsetDateTime#withYear(int)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the year altered
java.time.OffsetDateTime#withMonth(int)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the month-of-year altered
java.time.OffsetDateTime#withDayOfMonth(int)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the day-of-month altered
java.time.OffsetDateTime#withDayOfYear(int)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the day-of-year altered
java.time.OffsetDateTime#withHour(int)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the hour-of-day altered
java.time.OffsetDateTime#withMinute(int)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the minute-of-hour altered
java.time.OffsetDateTime#withSecond(int)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the second-of-minute altered
java.time.OffsetDateTime#withNano(int)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the nano-of-second altered
java.time.OffsetDateTime#truncatedTo(TemporalUnit)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the time truncated
java.time.OffsetDateTime#plus(TemporalAmount)->OffsetDateTime:::Returns a copy of this date-time with the specified amount added
java.time.OffsetDateTime#plus(long, TemporalUnit)->OffsetDateTime:::Returns a copy of this date-time with the specified amount added
java.time.OffsetDateTime#plusYears(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of years added
java.time.OffsetDateTime#plusMonths(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of months added
java.time.OffsetDateTime#plusWeeks(long)->OffsetDateTime:::Returns a copy of this OffsetDateTime with the specified number of weeks added
java.time.OffsetDateTime#plusDays(long)->OffsetDateTime:::Returns a copy of this OffsetDateTime with the specified number of days added
java.time.OffsetDateTime#plusHours(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of hours added
java.time.OffsetDateTime#plusMinutes(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of minutes added
java.time.OffsetDateTime#plusSeconds(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of seconds added
java.time.OffsetDateTime#plusNanos(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of nanoseconds added
java.time.OffsetDateTime#minus(TemporalAmount)->OffsetDateTime:::Returns a copy of this date-time with the specified amount subtracted
java.time.OffsetDateTime#minus(long, TemporalUnit)->OffsetDateTime:::Returns a copy of this date-time with the specified amount subtracted
java.time.OffsetDateTime#minusYears(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of years subtracted
java.time.OffsetDateTime#minusMonths(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of months subtracted
java.time.OffsetDateTime#minusWeeks(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of weeks subtracted
java.time.OffsetDateTime#minusDays(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of days subtracted
java.time.OffsetDateTime#minusHours(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of hours subtracted
java.time.OffsetDateTime#minusMinutes(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of minutes subtracted
java.time.OffsetDateTime#minusSeconds(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of seconds subtracted
java.time.OffsetDateTime#minusNanos(long)->OffsetDateTime:::Returns a copy of this {@code OffsetDateTime} with the specified number of nanoseconds subtracted
java.time.OffsetDateTime#query(TemporalQuery<R>)->R:::Queries this date-time using the specified query
java.time.OffsetDateTime#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same offset, date  and time as this object
java.time.OffsetDateTime#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another date-time in terms of the specified unit
java.time.OffsetDateTime#format(DateTimeFormatter)->String:::Formats this date-time using the specified formatter
java.time.OffsetDateTime#atZoneSameInstant(ZoneId)->ZonedDateTime:::Combines this date-time with a time-zone to create a {@code ZonedDateTime}  ensuring that the result has the same instant
java.time.OffsetDateTime#atZoneSimilarLocal(ZoneId)->ZonedDateTime:::Combines this date-time with a time-zone to create a {@code ZonedDateTime}  trying to keep the same local date and time
java.time.OffsetDateTime#toOffsetTime()->OffsetTime:::Converts this date-time to an {@code OffsetTime}
java.time.OffsetDateTime#toZonedDateTime()->ZonedDateTime:::Converts this date-time to a {@code ZonedDateTime} using the offset as the zone ID
java.time.OffsetDateTime#toInstant()->Instant:::Converts this date-time to an {@code Instant}
java.time.OffsetDateTime#toEpochSecond()->long:::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.OffsetDateTime#compareTo(OffsetDateTime)->int:::Compares this date-time to another date-time
java.time.OffsetDateTime#isAfter(OffsetDateTime)->boolean:::Checks if the instant of this date-time is after that of the specified date-time
java.time.OffsetDateTime#isBefore(OffsetDateTime)->boolean:::Checks if the instant of this date-time is before that of the specified date-time
java.time.OffsetDateTime#isEqual(OffsetDateTime)->boolean:::Checks if the instant of this date-time is equal to that of the specified date-time
java.time.OffsetDateTime#equals(Object)->boolean:::Checks if this date-time is equal to another date-time
java.time.OffsetDateTime#hashCode()->int:::A hash code for this date-time.
java.time.OffsetDateTime#toString()->String:::Outputs this date-time as a {@code String}, such as {@code 2007-12-03T10:15:30+01:00}
java.time.OffsetDateTime#writeExternal(ObjectOutput)->void:::
java.time.OffsetDateTime#readExternal(ObjectInput)->OffsetDateTime:::
java.time.OffsetTime#now()->OffsetTime:::Obtains the current time from the system clock in the default time-zone
java.time.OffsetTime#now(ZoneId)->OffsetTime:::Obtains the current time from the system clock in the specified time-zone
java.time.OffsetTime#now(Clock)->OffsetTime:::Obtains the current time from the specified clock
java.time.OffsetTime#of(LocalTime, ZoneOffset)->OffsetTime:::Obtains an instance of {@code OffsetTime} from a local time and an offset.
java.time.OffsetTime#of(int, int, int, int, ZoneOffset)->OffsetTime:::Obtains an instance of {@code OffsetTime} from an hour, minute, second and nanosecond
java.time.OffsetTime#ofInstant(Instant, ZoneId)->OffsetTime:::Obtains an instance of {@code OffsetTime} from an {@code Instant} and zone ID
java.time.OffsetTime#from(TemporalAccessor)->OffsetTime:::Obtains an instance of {@code OffsetTime} from a temporal object
java.time.OffsetTime#parse(CharSequence)->OffsetTime:::Obtains an instance of {@code OffsetTime} from a text string such as {@code 10:15:30+01:00}
java.time.OffsetTime#parse(CharSequence, DateTimeFormatter)->OffsetTime:::Obtains an instance of {@code OffsetTime} from a text string using a specific formatter
java.time.OffsetTime#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.OffsetTime#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.OffsetTime#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.OffsetTime#get(TemporalField)->int:::Gets the value of the specified field from this time as an {@code int}
java.time.OffsetTime#getLong(TemporalField)->long:::Gets the value of the specified field from this time as a {@code long}
java.time.OffsetTime#getOffset()->ZoneOffset:::Gets the zone offset, such as '+01:00'
java.time.OffsetTime#withOffsetSameLocal(ZoneOffset)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified offset ensuring  that the result has the same local time
java.time.OffsetTime#withOffsetSameInstant(ZoneOffset)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified offset ensuring  that the result is at the same instant on an implied day
java.time.OffsetTime#toLocalTime()->LocalTime:::Gets the {@code LocalTime} part of this date-time
java.time.OffsetTime#getHour()->int:::Gets the hour-of-day field.
java.time.OffsetTime#getMinute()->int:::Gets the minute-of-hour field.
java.time.OffsetTime#getSecond()->int:::Gets the second-of-minute field.
java.time.OffsetTime#getNano()->int:::Gets the nano-of-second field.
java.time.OffsetTime#with(TemporalAdjuster)->OffsetTime:::Returns an adjusted copy of this time
java.time.OffsetTime#with(TemporalField, long)->OffsetTime:::Returns a copy of this time with the specified field set to a new value
java.time.OffsetTime#withHour(int)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the hour-of-day altered
java.time.OffsetTime#withMinute(int)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the minute-of-hour altered
java.time.OffsetTime#withSecond(int)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the second-of-minute altered
java.time.OffsetTime#withNano(int)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the nano-of-second altered
java.time.OffsetTime#truncatedTo(TemporalUnit)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the time truncated
java.time.OffsetTime#plus(TemporalAmount)->OffsetTime:::Returns a copy of this time with the specified amount added
java.time.OffsetTime#plus(long, TemporalUnit)->OffsetTime:::Returns a copy of this time with the specified amount added
java.time.OffsetTime#plusHours(long)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified number of hours added
java.time.OffsetTime#plusMinutes(long)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified number of minutes added
java.time.OffsetTime#plusSeconds(long)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified number of seconds added
java.time.OffsetTime#plusNanos(long)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds added
java.time.OffsetTime#minus(TemporalAmount)->OffsetTime:::Returns a copy of this time with the specified amount subtracted
java.time.OffsetTime#minus(long, TemporalUnit)->OffsetTime:::Returns a copy of this time with the specified amount subtracted
java.time.OffsetTime#minusHours(long)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified number of hours subtracted
java.time.OffsetTime#minusMinutes(long)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified number of minutes subtracted
java.time.OffsetTime#minusSeconds(long)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified number of seconds subtracted
java.time.OffsetTime#minusNanos(long)->OffsetTime:::Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds subtracted
java.time.OffsetTime#query(TemporalQuery<R>)->R:::Queries this time using the specified query
java.time.OffsetTime#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same offset and time  as this object
java.time.OffsetTime#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another time in terms of the specified unit
java.time.OffsetTime#format(DateTimeFormatter)->String:::Formats this time using the specified formatter
java.time.OffsetTime#atDate(LocalDate)->OffsetDateTime:::Combines this time with a date to create an {@code OffsetDateTime}
java.time.OffsetTime#toEpochSecond(LocalDate)->long:::Converts this {@code OffsetTime} to the number of seconds since the epoch  of 1970-01-01T00:00:00Z
java.time.OffsetTime#compareTo(OffsetTime)->int:::Compares this {@code OffsetTime} to another time
java.time.OffsetTime#isAfter(OffsetTime)->boolean:::Checks if the instant of this {@code OffsetTime} is after that of the  specified time applying both times to a common date
java.time.OffsetTime#isBefore(OffsetTime)->boolean:::Checks if the instant of this {@code OffsetTime} is before that of the  specified time applying both times to a common date
java.time.OffsetTime#isEqual(OffsetTime)->boolean:::Checks if the instant of this {@code OffsetTime} is equal to that of the  specified time applying both times to a common date
java.time.OffsetTime#equals(Object)->boolean:::Checks if this time is equal to another time
java.time.OffsetTime#hashCode()->int:::A hash code for this time.
java.time.OffsetTime#toString()->String:::Outputs this time as a {@code String}, such as {@code 10:15:30+01:00}
java.time.OffsetTime#writeExternal(ObjectOutput)->void:::
java.time.OffsetTime#readExternal(ObjectInput)->OffsetTime:::
java.time.Period#ofYears(int)->Period:::Obtains a {@code Period} representing a number of years
java.time.Period#ofMonths(int)->Period:::Obtains a {@code Period} representing a number of months
java.time.Period#ofWeeks(int)->Period:::Obtains a {@code Period} representing a number of weeks
java.time.Period#ofDays(int)->Period:::Obtains a {@code Period} representing a number of days
java.time.Period#of(int, int, int)->Period:::Obtains a {@code Period} representing a number of years, months and days
java.time.Period#from(TemporalAmount)->Period:::Obtains an instance of {@code Period} from a temporal amount
java.time.Period#parse(CharSequence)->Period:::Obtains a {@code Period} from a text string such as {@code PnYnMnD}
java.time.Period#between(LocalDate, LocalDate)->Period:::Obtains a {@code Period} consisting of the number of years, months,  and days between two dates
java.time.Period#get(TemporalUnit)->long:::Gets the value of the requested unit
java.time.Period#getUnits()->List<TemporalUnit>:::Gets the set of units supported by this period
java.time.Period#getChronology()->IsoChronology:::Gets the chronology of this period, which is the ISO calendar system
java.time.Period#isZero()->boolean:::Checks if all three units of this period are zero
java.time.Period#isNegative()->boolean:::Checks if any of the three units of this period are negative
java.time.Period#getYears()->int:::Gets the amount of years of this period
java.time.Period#getMonths()->int:::Gets the amount of months of this period
java.time.Period#getDays()->int:::Gets the amount of days of this period
java.time.Period#withYears(int)->Period:::Returns a copy of this period with the specified amount of years
java.time.Period#withMonths(int)->Period:::Returns a copy of this period with the specified amount of months
java.time.Period#withDays(int)->Period:::Returns a copy of this period with the specified amount of days
java.time.Period#plus(TemporalAmount)->Period:::Returns a copy of this period with the specified period added
java.time.Period#plusYears(long)->Period:::Returns a copy of this period with the specified years added
java.time.Period#plusMonths(long)->Period:::Returns a copy of this period with the specified months added
java.time.Period#plusDays(long)->Period:::Returns a copy of this period with the specified days added
java.time.Period#minus(TemporalAmount)->Period:::Returns a copy of this period with the specified period subtracted
java.time.Period#minusYears(long)->Period:::Returns a copy of this period with the specified years subtracted
java.time.Period#minusMonths(long)->Period:::Returns a copy of this period with the specified months subtracted
java.time.Period#minusDays(long)->Period:::Returns a copy of this period with the specified days subtracted
java.time.Period#multipliedBy(int)->Period:::Returns a new instance with each element in this period multiplied  by the specified scalar
java.time.Period#negated()->Period:::Returns a new instance with each amount in this period negated
java.time.Period#normalized()->Period:::Returns a copy of this period with the years and months normalized
java.time.Period#toTotalMonths()->long:::Gets the total number of months in this period
java.time.Period#addTo(Temporal)->Temporal:::Adds this period to the specified temporal object
java.time.Period#subtractFrom(Temporal)->Temporal:::Subtracts this period from the specified temporal object
java.time.Period#equals(Object)->boolean:::Checks if this period is equal to another period
java.time.Period#hashCode()->int:::A hash code for this period.
java.time.Period#toString()->String:::Outputs this period as a {@code String}, such as {@code P6Y3M1D}
java.time.Period#writeExternal(DataOutput)->void:::
java.time.Period#readExternal(DataInput)->Period:::
java.time.Ser#writeExternal(ObjectOutput)->void:::Implements the {@code Externalizable} interface to write the object.
java.time.Ser#writeInternal(byte, Object, ObjectOutput)->void:::
java.time.Ser#readExternal(ObjectInput)->void:::Implements the {@code Externalizable} interface to read the object.
java.time.Ser#read(ObjectInput)->Object:::
java.time.Year#now()->Year:::Obtains the current year from the system clock in the default time-zone
java.time.Year#now(ZoneId)->Year:::Obtains the current year from the system clock in the specified time-zone
java.time.Year#now(Clock)->Year:::Obtains the current year from the specified clock
java.time.Year#of(int)->Year:::Obtains an instance of {@code Year}
java.time.Year#from(TemporalAccessor)->Year:::Obtains an instance of {@code Year} from a temporal object
java.time.Year#parse(CharSequence)->Year:::Obtains an instance of {@code Year} from a text string such as {@code 2007}
java.time.Year#parse(CharSequence, DateTimeFormatter)->Year:::Obtains an instance of {@code Year} from a text string using a specific formatter
java.time.Year#isLeap(long)->boolean:::Checks if the year is a leap year, according to the ISO proleptic  calendar system rules
java.time.Year#getValue()->int:::Gets the year value
java.time.Year#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.Year#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.Year#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.Year#get(TemporalField)->int:::Gets the value of the specified field from this year as an {@code int}
java.time.Year#getLong(TemporalField)->long:::Gets the value of the specified field from this year as a {@code long}
java.time.Year#isLeap()->boolean:::Checks if the year is a leap year, according to the ISO proleptic  calendar system rules
java.time.Year#isValidMonthDay(MonthDay)->boolean:::Checks if the month-day is valid for this year
java.time.Year#length()->int:::Gets the length of this year in days.
java.time.Year#with(TemporalAdjuster)->Year:::Returns an adjusted copy of this year
java.time.Year#with(TemporalField, long)->Year:::Returns a copy of this year with the specified field set to a new value
java.time.Year#plus(TemporalAmount)->Year:::Returns a copy of this year with the specified amount added
java.time.Year#plus(long, TemporalUnit)->Year:::Returns a copy of this year with the specified amount added
java.time.Year#plusYears(long)->Year:::Returns a copy of this {@code Year} with the specified number of years added
java.time.Year#minus(TemporalAmount)->Year:::Returns a copy of this year with the specified amount subtracted
java.time.Year#minus(long, TemporalUnit)->Year:::Returns a copy of this year with the specified amount subtracted
java.time.Year#minusYears(long)->Year:::Returns a copy of this {@code Year} with the specified number of years subtracted
java.time.Year#query(TemporalQuery<R>)->R:::Queries this year using the specified query
java.time.Year#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have this year
java.time.Year#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another year in terms of the specified unit
java.time.Year#format(DateTimeFormatter)->String:::Formats this year using the specified formatter
java.time.Year#atDay(int)->LocalDate:::Combines this year with a day-of-year to create a {@code LocalDate}
java.time.Year#atMonth(Month)->YearMonth:::Combines this year with a month to create a {@code YearMonth}
java.time.Year#atMonth(int)->YearMonth:::Combines this year with a month to create a {@code YearMonth}
java.time.Year#atMonthDay(MonthDay)->LocalDate:::Combines this year with a month-day to create a {@code LocalDate}
java.time.Year#compareTo(Year)->int:::Compares this year to another year
java.time.Year#isAfter(Year)->boolean:::Checks if this year is after the specified year.
java.time.Year#isBefore(Year)->boolean:::Checks if this year is before the specified year.
java.time.Year#equals(Object)->boolean:::Checks if this year is equal to another year
java.time.Year#hashCode()->int:::A hash code for this year.
java.time.Year#toString()->String:::Outputs this year as a {@code String}.
java.time.Year#writeExternal(DataOutput)->void:::
java.time.Year#readExternal(DataInput)->Year:::
java.time.YearMonth#now()->YearMonth:::Obtains the current year-month from the system clock in the default time-zone
java.time.YearMonth#now(ZoneId)->YearMonth:::Obtains the current year-month from the system clock in the specified time-zone
java.time.YearMonth#now(Clock)->YearMonth:::Obtains the current year-month from the specified clock
java.time.YearMonth#of(int, Month)->YearMonth:::Obtains an instance of {@code YearMonth} from a year and month.
java.time.YearMonth#of(int, int)->YearMonth:::Obtains an instance of {@code YearMonth} from a year and month.
java.time.YearMonth#from(TemporalAccessor)->YearMonth:::Obtains an instance of {@code YearMonth} from a temporal object
java.time.YearMonth#parse(CharSequence)->YearMonth:::Obtains an instance of {@code YearMonth} from a text string such as {@code 2007-12}
java.time.YearMonth#parse(CharSequence, DateTimeFormatter)->YearMonth:::Obtains an instance of {@code YearMonth} from a text string using a specific formatter
java.time.YearMonth#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.YearMonth#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.YearMonth#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.YearMonth#get(TemporalField)->int:::Gets the value of the specified field from this year-month as an {@code int}
java.time.YearMonth#getLong(TemporalField)->long:::Gets the value of the specified field from this year-month as a {@code long}
java.time.YearMonth#getYear()->int:::Gets the year field
java.time.YearMonth#getMonthValue()->int:::Gets the month-of-year field from 1 to 12
java.time.YearMonth#getMonth()->Month:::Gets the month-of-year field using the {@code Month} enum
java.time.YearMonth#isLeapYear()->boolean:::Checks if the year is a leap year, according to the ISO proleptic  calendar system rules
java.time.YearMonth#isValidDay(int)->boolean:::Checks if the day-of-month is valid for this year-month
java.time.YearMonth#lengthOfMonth()->int:::Returns the length of the month, taking account of the year
java.time.YearMonth#lengthOfYear()->int:::Returns the length of the year
java.time.YearMonth#with(TemporalAdjuster)->YearMonth:::Returns an adjusted copy of this year-month
java.time.YearMonth#with(TemporalField, long)->YearMonth:::Returns a copy of this year-month with the specified field set to a new value
java.time.YearMonth#withYear(int)->YearMonth:::Returns a copy of this {@code YearMonth} with the year altered
java.time.YearMonth#withMonth(int)->YearMonth:::Returns a copy of this {@code YearMonth} with the month-of-year altered
java.time.YearMonth#plus(TemporalAmount)->YearMonth:::Returns a copy of this year-month with the specified amount added
java.time.YearMonth#plus(long, TemporalUnit)->YearMonth:::Returns a copy of this year-month with the specified amount added
java.time.YearMonth#plusYears(long)->YearMonth:::Returns a copy of this {@code YearMonth} with the specified number of years added
java.time.YearMonth#plusMonths(long)->YearMonth:::Returns a copy of this {@code YearMonth} with the specified number of months added
java.time.YearMonth#minus(TemporalAmount)->YearMonth:::Returns a copy of this year-month with the specified amount subtracted
java.time.YearMonth#minus(long, TemporalUnit)->YearMonth:::Returns a copy of this year-month with the specified amount subtracted
java.time.YearMonth#minusYears(long)->YearMonth:::Returns a copy of this {@code YearMonth} with the specified number of years subtracted
java.time.YearMonth#minusMonths(long)->YearMonth:::Returns a copy of this {@code YearMonth} with the specified number of months subtracted
java.time.YearMonth#query(TemporalQuery<R>)->R:::Queries this year-month using the specified query
java.time.YearMonth#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have this year-month
java.time.YearMonth#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another year-month in terms of the specified unit
java.time.YearMonth#format(DateTimeFormatter)->String:::Formats this year-month using the specified formatter
java.time.YearMonth#atDay(int)->LocalDate:::Combines this year-month with a day-of-month to create a {@code LocalDate}
java.time.YearMonth#atEndOfMonth()->LocalDate:::Returns a {@code LocalDate} at the end of the month
java.time.YearMonth#compareTo(YearMonth)->int:::Compares this year-month to another year-month
java.time.YearMonth#isAfter(YearMonth)->boolean:::Checks if this year-month is after the specified year-month.
java.time.YearMonth#isBefore(YearMonth)->boolean:::Checks if this year-month is before the specified year-month.
java.time.YearMonth#equals(Object)->boolean:::Checks if this year-month is equal to another year-month
java.time.YearMonth#hashCode()->int:::A hash code for this year-month.
java.time.YearMonth#toString()->String:::Outputs this year-month as a {@code String}, such as {@code 2007-12}
java.time.YearMonth#writeExternal(DataOutput)->void:::
java.time.YearMonth#readExternal(DataInput)->YearMonth:::
java.time.ZonedDateTime#now()->ZonedDateTime:::Obtains the current date-time from the system clock in the default time-zone
java.time.ZonedDateTime#now(ZoneId)->ZonedDateTime:::Obtains the current date-time from the system clock in the specified time-zone
java.time.ZonedDateTime#now(Clock)->ZonedDateTime:::Obtains the current date-time from the specified clock
java.time.ZonedDateTime#of(LocalDate, LocalTime, ZoneId)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} from a local date and time
java.time.ZonedDateTime#of(LocalDateTime, ZoneId)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} from a local date-time
java.time.ZonedDateTime#of(int, int, int, int, int, int, int, ZoneId)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} from a year, month, day,  hour, minute, second, nanosecond and time-zone
java.time.ZonedDateTime#ofLocal(LocalDateTime, ZoneId, ZoneOffset)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} from a local date-time  using the preferred offset if possible
java.time.ZonedDateTime#ofInstant(Instant, ZoneId)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} from an {@code Instant}
java.time.ZonedDateTime#ofInstant(LocalDateTime, ZoneOffset, ZoneId)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} from the instant formed by combining  the local date-time and offset
java.time.ZonedDateTime#ofStrict(LocalDateTime, ZoneOffset, ZoneId)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} strictly validating the  combination of local date-time, offset and zone ID
java.time.ZonedDateTime#from(TemporalAccessor)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} from a temporal object
java.time.ZonedDateTime#parse(CharSequence)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} from a text string such as  {@code 2007-12-03T10:15:30+01:00[Europe/Paris]}
java.time.ZonedDateTime#parse(CharSequence, DateTimeFormatter)->ZonedDateTime:::Obtains an instance of {@code ZonedDateTime} from a text string using a specific formatter
java.time.ZonedDateTime#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.ZonedDateTime#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.ZonedDateTime#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.ZonedDateTime#get(TemporalField)->int:::Gets the value of the specified field from this date-time as an {@code int}
java.time.ZonedDateTime#getLong(TemporalField)->long:::Gets the value of the specified field from this date-time as a {@code long}
java.time.ZonedDateTime#getOffset()->ZoneOffset:::Gets the zone offset, such as '+01:00'
java.time.ZonedDateTime#withEarlierOffsetAtOverlap()->ZonedDateTime:::Returns a copy of this date-time changing the zone offset to the  earlier of the two valid offsets at a local time-line overlap
java.time.ZonedDateTime#withLaterOffsetAtOverlap()->ZonedDateTime:::Returns a copy of this date-time changing the zone offset to the  later of the two valid offsets at a local time-line overlap
java.time.ZonedDateTime#getZone()->ZoneId:::Gets the time-zone, such as 'Europe/Paris'
java.time.ZonedDateTime#withZoneSameLocal(ZoneId)->ZonedDateTime:::Returns a copy of this date-time with a different time-zone,  retaining the local date-time if possible
java.time.ZonedDateTime#withZoneSameInstant(ZoneId)->ZonedDateTime:::Returns a copy of this date-time with a different time-zone,  retaining the instant
java.time.ZonedDateTime#withFixedOffsetZone()->ZonedDateTime:::Returns a copy of this date-time with the zone ID set to the offset
java.time.ZonedDateTime#toLocalDateTime()->LocalDateTime:::Gets the {@code LocalDateTime} part of this date-time
java.time.ZonedDateTime#toLocalDate()->LocalDate:::Gets the {@code LocalDate} part of this date-time
java.time.ZonedDateTime#getYear()->int:::Gets the year field
java.time.ZonedDateTime#getMonthValue()->int:::Gets the month-of-year field from 1 to 12
java.time.ZonedDateTime#getMonth()->Month:::Gets the month-of-year field using the {@code Month} enum
java.time.ZonedDateTime#getDayOfMonth()->int:::Gets the day-of-month field
java.time.ZonedDateTime#getDayOfYear()->int:::Gets the day-of-year field
java.time.ZonedDateTime#getDayOfWeek()->DayOfWeek:::Gets the day-of-week field, which is an enum {@code DayOfWeek}
java.time.ZonedDateTime#toLocalTime()->LocalTime:::Gets the {@code LocalTime} part of this date-time
java.time.ZonedDateTime#getHour()->int:::Gets the hour-of-day field.
java.time.ZonedDateTime#getMinute()->int:::Gets the minute-of-hour field.
java.time.ZonedDateTime#getSecond()->int:::Gets the second-of-minute field.
java.time.ZonedDateTime#getNano()->int:::Gets the nano-of-second field.
java.time.ZonedDateTime#with(TemporalAdjuster)->ZonedDateTime:::Returns an adjusted copy of this date-time
java.time.ZonedDateTime#with(TemporalField, long)->ZonedDateTime:::Returns a copy of this date-time with the specified field set to a new value
java.time.ZonedDateTime#withYear(int)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the year altered
java.time.ZonedDateTime#withMonth(int)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the month-of-year altered
java.time.ZonedDateTime#withDayOfMonth(int)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the day-of-month altered
java.time.ZonedDateTime#withDayOfYear(int)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the day-of-year altered
java.time.ZonedDateTime#withHour(int)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the hour-of-day altered
java.time.ZonedDateTime#withMinute(int)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the minute-of-hour altered
java.time.ZonedDateTime#withSecond(int)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the second-of-minute altered
java.time.ZonedDateTime#withNano(int)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the nano-of-second altered
java.time.ZonedDateTime#truncatedTo(TemporalUnit)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the time truncated
java.time.ZonedDateTime#plus(TemporalAmount)->ZonedDateTime:::Returns a copy of this date-time with the specified amount added
java.time.ZonedDateTime#plus(long, TemporalUnit)->ZonedDateTime:::Returns a copy of this date-time with the specified amount added
java.time.ZonedDateTime#plusYears(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of years added
java.time.ZonedDateTime#plusMonths(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of months added
java.time.ZonedDateTime#plusWeeks(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of weeks added
java.time.ZonedDateTime#plusDays(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of days added
java.time.ZonedDateTime#plusHours(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of hours added
java.time.ZonedDateTime#plusMinutes(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of minutes added
java.time.ZonedDateTime#plusSeconds(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of seconds added
java.time.ZonedDateTime#plusNanos(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds added
java.time.ZonedDateTime#minus(TemporalAmount)->ZonedDateTime:::Returns a copy of this date-time with the specified amount subtracted
java.time.ZonedDateTime#minus(long, TemporalUnit)->ZonedDateTime:::Returns a copy of this date-time with the specified amount subtracted
java.time.ZonedDateTime#minusYears(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of years subtracted
java.time.ZonedDateTime#minusMonths(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of months subtracted
java.time.ZonedDateTime#minusWeeks(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of weeks subtracted
java.time.ZonedDateTime#minusDays(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of days subtracted
java.time.ZonedDateTime#minusHours(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of hours subtracted
java.time.ZonedDateTime#minusMinutes(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of minutes subtracted
java.time.ZonedDateTime#minusSeconds(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of seconds subtracted
java.time.ZonedDateTime#minusNanos(long)->ZonedDateTime:::Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds subtracted
java.time.ZonedDateTime#query(TemporalQuery<R>)->R:::Queries this date-time using the specified query
java.time.ZonedDateTime#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another date-time in terms of the specified unit
java.time.ZonedDateTime#format(DateTimeFormatter)->String:::Formats this date-time using the specified formatter
java.time.ZonedDateTime#toOffsetDateTime()->OffsetDateTime:::Converts this date-time to an {@code OffsetDateTime}
java.time.ZonedDateTime#equals(Object)->boolean:::Checks if this date-time is equal to another date-time
java.time.ZonedDateTime#hashCode()->int:::A hash code for this date-time.
java.time.ZonedDateTime#toString()->String:::Outputs this date-time as a {@code String}, such as  {@code 2007-12-03T10:15:30+01:00[Europe/Paris]}
java.time.ZonedDateTime#writeExternal(DataOutput)->void:::
java.time.ZonedDateTime#readExternal(ObjectInput)->ZonedDateTime:::
java.time.ZoneId#systemDefault()->ZoneId:::Gets the system default time-zone
java.time.ZoneId#getAvailableZoneIds()->Set<String>:::Gets the set of available zone IDs
java.time.ZoneId#of(String, Map<String, String>)->ZoneId:::Obtains an instance of {@code ZoneId} using its ID using a map  of aliases to supplement the standard zone IDs
java.time.ZoneId#of(String)->ZoneId:::Obtains an instance of {@code ZoneId} from an ID ensuring that the  ID is valid and available for use
java.time.ZoneId#ofOffset(String, ZoneOffset)->ZoneId:::Obtains an instance of {@code ZoneId} wrapping an offset
java.time.ZoneId#of(String, boolean)->ZoneId:::Parses the ID, taking a flag to indicate whether {@code ZoneRulesException}  should be thrown or not, used in deserialization.
java.time.ZoneId#from(TemporalAccessor)->ZoneId:::Obtains an instance of {@code ZoneId} from a temporal object
java.time.ZoneId#getId()->String:::Gets the unique time-zone ID
java.time.ZoneId#getDisplayName(TextStyle, Locale)->String:::Gets the textual representation of the zone, such as 'British Time' or  '+02:00'
java.time.ZoneId#getRules()->ZoneRules:::Gets the time-zone rules for this ID allowing calculations to be performed
java.time.ZoneId#normalized()->ZoneId:::Normalizes the time-zone ID, returning a {@code ZoneOffset} where possible
java.time.ZoneId#equals(Object)->boolean:::Checks if this time-zone ID is equal to another time-zone ID
java.time.ZoneId#hashCode()->int:::A hash code for this time-zone ID.
java.time.ZoneId#toString()->String:::Outputs this zone as a {@code String}, using the ID.
java.time.ZoneId#write(DataOutput)->void:::
java.time.ZoneOffset#of(String)->ZoneOffset:::Obtains an instance of {@code ZoneOffset} using the ID
java.time.ZoneOffset#ofHours(int)->ZoneOffset:::Obtains an instance of {@code ZoneOffset} using an offset in hours.
java.time.ZoneOffset#ofHoursMinutes(int, int)->ZoneOffset:::Obtains an instance of {@code ZoneOffset} using an offset in  hours and minutes
java.time.ZoneOffset#ofHoursMinutesSeconds(int, int, int)->ZoneOffset:::Obtains an instance of {@code ZoneOffset} using an offset in  hours, minutes and seconds
java.time.ZoneOffset#from(TemporalAccessor)->ZoneOffset:::Obtains an instance of {@code ZoneOffset} from a temporal object
java.time.ZoneOffset#ofTotalSeconds(int)->ZoneOffset:::Obtains an instance of {@code ZoneOffset} specifying the total offset in seconds  <p>  The offset must be in the range {@code -18:00} to {@code +18:00}, which corresponds to -64800 to +64800.
java.time.ZoneOffset#getTotalSeconds()->int:::Gets the total zone offset in seconds
java.time.ZoneOffset#getId()->String:::Gets the normalized zone offset ID
java.time.ZoneOffset#getRules()->ZoneRules:::Gets the associated time-zone rules
java.time.ZoneOffset#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.ZoneOffset#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.ZoneOffset#get(TemporalField)->int:::Gets the value of the specified field from this offset as an {@code int}
java.time.ZoneOffset#getLong(TemporalField)->long:::Gets the value of the specified field from this offset as a {@code long}
java.time.ZoneOffset#query(TemporalQuery<R>)->R:::Queries this offset using the specified query
java.time.ZoneOffset#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same offset as this object
java.time.ZoneOffset#compareTo(ZoneOffset)->int:::Compares this offset to another offset in descending order
java.time.ZoneOffset#equals(Object)->boolean:::Checks if this offset is equal to another offset
java.time.ZoneOffset#hashCode()->int:::A hash code for this offset.
java.time.ZoneOffset#toString()->String:::Outputs this offset as a {@code String}, using the normalized ID.
java.time.ZoneOffset#write(DataOutput)->void:::
java.time.ZoneOffset#writeExternal(DataOutput)->void:::
java.time.ZoneOffset#readExternal(DataInput)->ZoneOffset:::
java.time.ZoneRegion#ofId(String, boolean)->ZoneRegion:::Obtains an instance of {@code ZoneId} from an identifier.
java.time.ZoneRegion#getId()->String:::
java.time.ZoneRegion#getRules()->ZoneRules:::
java.time.ZoneRegion#write(DataOutput)->void:::
java.time.ZoneRegion#writeExternal(DataOutput)->void:::
java.time.ZoneRegion#readExternal(DataInput)->ZoneId:::

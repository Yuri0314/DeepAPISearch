Clock#systemUTC():::Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the UTC time-zone:::return
Clock#systemDefaultZone():::Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone:::return->ZoneId->systemDefault->new->SystemClock
Clock#system(ZoneId):::Obtains a clock that returns the current instant using the best available system clock:::Objects->requireNonNull->if->return->return->new->SystemClock
Clock#tickMillis(ZoneId):::Obtains a clock that returns the current instant ticking in whole milliseconds using the best available system clock:::return->system->new->TickClock
Clock#tickSeconds(ZoneId):::Obtains a clock that returns the current instant ticking in whole seconds using the best available system clock:::return->system->new->TickClock
Clock#tickMinutes(ZoneId):::Obtains a clock that returns the current instant ticking in whole minutes using the best available system clock:::return->system->new->TickClock
Clock#tick(Clock, Duration):::Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration:::Objects->requireNonNull->Objects->requireNonNull->if->tickDuration->isNegative->throw->new->IllegalArgumentException->tickNanos->tickDuration->toNanos->if->else->if->else->throw->new->IllegalArgumentException->if->return->return->new->TickClock
Clock#fixed(Instant, ZoneId):::Obtains a clock that always returns the same instant:::Objects->requireNonNull->Objects->requireNonNull->return->new->FixedClock
Clock#offset(Clock, Duration):::Obtains a clock that returns instants from the specified clock with the specified duration added  This clock wraps another clock, returning instants that are later by the specified duration:::Objects->requireNonNull->Objects->requireNonNull->if->offsetDuration->equals->return->return->new->OffsetClock
Clock#getZone():::Gets the time-zone being used to create dates and times:::
Clock#withZone(ZoneId):::Returns a copy of this clock with a different time-zone:::
Clock#millis():::Gets the current millisecond instant of the clock:::return->instant->toEpochMilli
Clock#instant():::Gets the current instant of the clock:::
Clock#equals(Object):::Checks if this clock is equal to another clock:::return->super->equals
Clock#hashCode():::A hash code for this clock:::return->super->hashCode
Clock.SystemClock#getZone()::: system clock get zone:::return
Clock.SystemClock#withZone(ZoneId)::: system clock with zone:::if->zone->equals->return->return->new->SystemClock
Clock.SystemClock#millis()::: system clock millis:::return->System->currentTimeMillis
Clock.SystemClock#instant()::: system clock instant:::localOffset->adjustment->VM->getNanoTimeAdjustment->if->System->currentTimeMillis->VM->getNanoTimeAdjustment->if->throw->new->InternalError->else->return->Instant->ofEpochSecond
Clock.SystemClock#equals(Object)::: system clock equals:::if->return->zone->equals->return
Clock.SystemClock#hashCode()::: system clock hash code:::return->zone->hashCode
Clock.SystemClock#toString()::: system clock to string:::return
Clock.SystemClock#readObject(ObjectInputStream)::: system clock read object:::is->defaultReadObject
Clock.FixedClock#getZone()::: fixed clock get zone:::return
Clock.FixedClock#withZone(ZoneId)::: fixed clock with zone:::if->zone->equals->return->return->new->FixedClock
Clock.FixedClock#millis()::: fixed clock millis:::return->instant->toEpochMilli
Clock.FixedClock#instant()::: fixed clock instant:::return
Clock.FixedClock#equals(Object)::: fixed clock equals:::if->other->return->instant->equals->zone->equals->return
Clock.FixedClock#hashCode()::: fixed clock hash code:::return->instant->hashCode->zone->hashCode
Clock.FixedClock#toString()::: fixed clock to string:::return
Clock.OffsetClock#getZone()::: offset clock get zone:::return->baseClock->getZone
Clock.OffsetClock#withZone(ZoneId)::: offset clock with zone:::if->zone->baseClock->getZone->equals->return->return->baseClock->withZone->new->OffsetClock
Clock.OffsetClock#millis()::: offset clock millis:::return->Math->baseClock->millis->offset->toMillis->addExact
Clock.OffsetClock#instant()::: offset clock instant:::return->baseClock->instant->plus
Clock.OffsetClock#equals(Object)::: offset clock equals:::if->other->return->baseClock->equals->offset->equals->return
Clock.OffsetClock#hashCode()::: offset clock hash code:::return->baseClock->hashCode->offset->hashCode
Clock.OffsetClock#toString()::: offset clock to string:::return
Clock.TickClock#getZone()::: tick clock get zone:::return->baseClock->getZone
Clock.TickClock#withZone(ZoneId)::: tick clock with zone:::if->zone->baseClock->getZone->equals->return->return->baseClock->withZone->new->TickClock
Clock.TickClock#millis()::: tick clock millis:::millis->baseClock->millis->return->Math->floorMod
Clock.TickClock#instant()::: tick clock instant:::if->millis->baseClock->millis->return->Instant->Math->floorMod->ofEpochMilli->instant->baseClock->instant->nanos->instant->getNano->adjust->Math->floorMod->return->instant->minusNanos
Clock.TickClock#equals(Object)::: tick clock equals:::if->other->return->baseClock->equals->return
Clock.TickClock#hashCode()::: tick clock hash code:::return->baseClock->hashCode
Clock.TickClock#toString()::: tick clock to string:::return->Duration->ofNanos
Duration#ofDays(long):::Obtains a Duration representing a number of standard 24 hour days:::return->Math->multiplyExact->create
Duration#ofHours(long):::Obtains a Duration representing a number of standard hours:::return->Math->multiplyExact->create
Duration#ofMinutes(long):::Obtains a Duration representing a number of standard minutes:::return->Math->multiplyExact->create
Duration#ofSeconds(long):::Obtains a Duration representing a number of seconds:::return->create
Duration#ofSeconds(long, long):::Obtains a Duration representing a number of seconds and an adjustment in nanoseconds:::secs->Math->Math->floorDiv->addExact->nos->Math->floorMod->return->create
Duration#ofMillis(long):::Obtains a Duration representing a number of milliseconds:::secs->mos->if->return->create
Duration#ofNanos(long):::Obtains a Duration representing a number of nanoseconds:::secs->nos->if->return->create
Duration#of(long, TemporalUnit):::Obtains a Duration representing an amount in the specified unit:::return->ZERO->plus
Duration#from(TemporalAmount):::Obtains an instance of Duration from a temporal amount:::Objects->requireNonNull->duration->foreach->amount->getUnits->duration->amount->get->plus->return
Duration#parse(CharSequence):::Obtains a Duration from a text string such as PnDTnHnMn.nS:::Objects->requireNonNull->matcher->matcher->if->matcher->matches->if->matcher->start->matcher->end->charMatch->negate->matcher->start->matcher->end->charMatch->dayStart->matcher->start->dayEnd->matcher->end->hourStart->matcher->start->hourEnd->matcher->end->minuteStart->matcher->start->minuteEnd->matcher->end->secondStart->matcher->start->secondEnd->matcher->end->fractionStart->matcher->start->fractionEnd->matcher->end->if->daysAsSecs->parseNumber->hoursAsSecs->parseNumber->minsAsSecs->parseNumber->seconds->parseNumber->negativeSecs->text->charAt->nanos->parseFraction->try->return->create->catch->throw->new->DateTimeParseException->initCause->finally->throw->new->DateTimeParseException
Duration#charMatch(CharSequence, int, int, char)::: duration char match:::return->text->charAt
Duration#parseNumber(CharSequence, int, int, int, String)::: duration parse number:::if->return->try->val->Long->parseLong->return->Math->multiplyExact->catch->throw->new->DateTimeParseException->initCause->finally
Duration#parseFraction(CharSequence, int, int, int)::: duration parse fraction:::if->return->try->fraction->Integer->parseInt->for->i->return->catch->throw->new->DateTimeParseException->initCause->finally
Duration#create(boolean, long, long, long, long, int)::: duration create:::seconds->Math->Math->Math->addExact->addExact->addExact->if->return->ofSeconds->negated->return->ofSeconds
Duration#between(Temporal, Temporal):::Obtains a Duration representing the duration between two temporal objects:::try->return->startInclusive->until->ofNanos->catch->secs->startInclusive->until->nanos->try->endExclusive->getLong->startInclusive->getLong->if->else->if->catch->finally->return->ofSeconds->finally
Duration#create(long, int):::Obtains an instance of Duration using seconds and nanoseconds.:::if->return->return->new->Duration
Duration#get(TemporalUnit):::Gets the value of the requested unit:::if->return->else->if->return->else->throw->new->UnsupportedTemporalTypeException
Duration#getUnits():::Gets the set of units supported by this duration:::return
Duration#isZero():::Checks if this duration is zero length:::return
Duration#isNegative():::Checks if this duration is negative, excluding zero:::return
Duration#getSeconds():::Gets the number of seconds in this duration:::return
Duration#getNano():::Gets the number of nanoseconds within the second in this duration:::return
Duration#withSeconds(long):::Returns a copy of this duration with the specified amount of seconds:::return->create
Duration#withNanos(int):::Returns a copy of this duration with the specified nano-of-second:::NANO_OF_SECOND->checkValidIntValue->return->create
Duration#plus(Duration):::Returns a copy of this duration with the specified duration added:::return->duration->getSeconds->duration->getNano->plus
Duration#plus(long, TemporalUnit):::Returns a copy of this duration with the specified duration added:::Objects->requireNonNull->if->return->Math->multiplyExact->plus->if->unit->isDurationEstimated->throw->new->UnsupportedTemporalTypeException->if->return->if->switch->return->plusNanos->return->plusSeconds->plusNanos->return->plusMillis->return->plusSeconds->return->Math->unit->getDuration->multiplyExact->plusSeconds->duration->unit->getDuration->multipliedBy->return->duration->getSeconds->plusSeconds->duration->getNano->plusNanos
Duration#plusDays(long):::Returns a copy of this duration with the specified duration in standard 24 hour days added:::return->Math->multiplyExact->plus
Duration#plusHours(long):::Returns a copy of this duration with the specified duration in hours added:::return->Math->multiplyExact->plus
Duration#plusMinutes(long):::Returns a copy of this duration with the specified duration in minutes added:::return->Math->multiplyExact->plus
Duration#plusSeconds(long):::Returns a copy of this duration with the specified duration in seconds added:::return->plus
Duration#plusMillis(long):::Returns a copy of this duration with the specified duration in milliseconds added:::return->plus
Duration#plusNanos(long):::Returns a copy of this duration with the specified duration in nanoseconds added:::return->plus
Duration#plus(long, long):::Returns a copy of this duration with the specified duration added:::if->return->epochSec->Math->addExact->Math->addExact->nanoAdjustment->return->ofSeconds
Duration#minus(Duration):::Returns a copy of this duration with the specified duration subtracted:::secsToSubtract->duration->getSeconds->nanosToSubtract->duration->getNano->if->return->plus->plus->return->plus
Duration#minus(long, TemporalUnit):::Returns a copy of this duration with the specified duration subtracted:::return->plus->plus->plus
Duration#minusDays(long):::Returns a copy of this duration with the specified duration in standard 24 hour days subtracted:::return->plusDays->plusDays->plusDays
Duration#minusHours(long):::Returns a copy of this duration with the specified duration in hours subtracted:::return->plusHours->plusHours->plusHours
Duration#minusMinutes(long):::Returns a copy of this duration with the specified duration in minutes subtracted:::return->plusMinutes->plusMinutes->plusMinutes
Duration#minusSeconds(long):::Returns a copy of this duration with the specified duration in seconds subtracted:::return->plusSeconds->plusSeconds->plusSeconds
Duration#minusMillis(long):::Returns a copy of this duration with the specified duration in milliseconds subtracted:::return->plusMillis->plusMillis->plusMillis
Duration#minusNanos(long):::Returns a copy of this duration with the specified duration in nanoseconds subtracted:::return->plusNanos->plusNanos->plusNanos
Duration#multipliedBy(long):::Returns a copy of this duration multiplied by the scalar:::if->return->if->return->return->toBigDecimalSeconds->BigDecimal->valueOf->multiply->create
Duration#dividedBy(long):::Returns a copy of this duration divided by the specified value:::if->throw->new->ArithmeticException->if->return->return->toBigDecimalSeconds->BigDecimal->valueOf->divide->create
Duration#dividedBy(Duration):::Returns number of whole times a specified Duration occurs within this Duration:::Objects->requireNonNull->dividendBigD->toBigDecimalSeconds->divisorBigD->divisor->toBigDecimalSeconds->return->dividendBigD->divideToIntegralValue->longValueExact
Duration#toBigDecimalSeconds():::Converts this duration to the total length in seconds and fractional nanoseconds expressed as a BigDecimal.:::return->BigDecimal->valueOf->BigDecimal->valueOf->add
Duration#create(BigDecimal):::Creates an instance of Duration from a number of seconds.:::nanos->seconds->movePointRight->toBigIntegerExact->divRem->nanos->divideAndRemainder->if->bitLength->throw->new->ArithmeticException->return->longValue->intValue->ofSeconds
Duration#negated():::Returns a copy of this duration with the length negated:::return->multipliedBy
Duration#abs():::Returns a copy of this duration with a positive length:::return->isNegative->negated
Duration#addTo(Temporal):::Adds this duration to the specified temporal object:::if->temporal->plus->if->temporal->plus->return
Duration#subtractFrom(Temporal):::Subtracts this duration from the specified temporal object:::if->temporal->minus->if->temporal->minus->return
Duration#toDays():::Gets the number of days in this duration:::return
Duration#toHours():::Gets the number of hours in this duration:::return
Duration#toMinutes():::Gets the number of minutes in this duration:::return
Duration#toSeconds():::Gets the number of seconds in this duration:::return
Duration#toMillis():::Converts this duration to the total length in milliseconds:::tempSeconds->tempNanos->if->millis->Math->multiplyExact->Math->addExact->return
Duration#toNanos():::Converts this duration to the total length in nanoseconds expressed as a long:::tempSeconds->tempNanos->if->totalNanos->Math->multiplyExact->Math->addExact->return
Duration#toDaysPart():::Extracts the number of days in the duration:::return
Duration#toHoursPart():::Extracts the number of hours part in the duration:::return->toHours
Duration#toMinutesPart():::Extracts the number of minutes part in the duration:::return->toMinutes
Duration#toSecondsPart():::Extracts the number of seconds part in the duration:::return
Duration#toMillisPart():::Extracts the number of milliseconds part of the duration:::return
Duration#toNanosPart():::Get the nanoseconds part within seconds of the duration:::return
Duration#truncatedTo(TemporalUnit):::Returns a copy of this Duration truncated to the specified unit:::Objects->requireNonNull->if->return->new->Duration->else->if->return->unitDur->unit->getDuration->if->unitDur->getSeconds->throw->new->UnsupportedTemporalTypeException->dur->unitDur->toNanos->if->throw->new->UnsupportedTemporalTypeException->nod->result->return->plusNanos
Duration#compareTo(Duration):::Compares this duration to the specified Duration:::cmp->Long->compare->if->return->return
Duration#equals(Object):::Checks if this duration is equal to the specified Duration:::if->return->if->other->return->return
Duration#hashCode():::A hash code for this duration.:::return
Duration#toString():::A string representation of this duration using ISO-8601 seconds based representation, such as PT8H6M12.345S:::if->return->effectiveTotalSecs->if->hours->minutes->secs->buf->new->StringBuilder->buf->append->if->buf->append->append->if->buf->append->append->if->buf->length->return->buf->toString->if->if->buf->append->else->buf->append->else->buf->append->if->pos->buf->length->if->buf->append->else->buf->append->while->buf->buf->length->charAt->buf->buf->length->setLength->buf->setCharAt->buf->append->return->buf->toString
Duration#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
Duration#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
Duration#writeExternal(DataOutput)::: duration write external:::out->writeLong->out->writeInt
Duration#readExternal(DataInput)::: duration read external:::seconds->in->readLong->nanos->in->readInt->return->Duration->ofSeconds
Instant#now():::Obtains the current instant from the system clock:::return->Clock->systemUTC->instant
Instant#now(Clock):::Obtains the current instant from the specified clock:::Objects->requireNonNull->return->clock->instant
Instant#ofEpochSecond(long):::Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z:::return->create
Instant#ofEpochSecond(long, long):::Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second:::secs->Math->Math->floorDiv->addExact->nos->Math->floorMod->return->create
Instant#ofEpochMilli(long):::Obtains an instance of Instant using milliseconds from the epoch of 1970-01-01T00:00:00Z:::secs->Math->floorDiv->mos->Math->floorMod->return->create
Instant#from(TemporalAccessor):::Obtains an instance of Instant from a temporal object:::if->return->Objects->requireNonNull->try->instantSecs->temporal->getLong->nanoOfSecond->temporal->get->return->Instant->ofEpochSecond->catch->throw->temporal->getClass->getName->new->DateTimeException->finally
Instant#parse(CharSequence):::Obtains an instance of Instant from a text string such as 2007-12-03T10:15:30.00Z:::return->Instant->from->parse
Instant#create(long, int):::Obtains an instance of Instant using seconds and nanoseconds.:::if->return->if->throw->new->DateTimeException->return->new->Instant
Instant#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->return->field->isSupportedBy
Instant#isSupported(TemporalUnit):::Checks if the specified unit is supported:::if->return->unit->isTimeBased->return->unit->isSupportedBy
Instant#range(TemporalField):::Gets the range of valid values for the specified field:::return->Temporal.super->range
Instant#get(TemporalField):::Gets the value of the specified field from this instant as an int:::if->switch->return->return->return->throw->new->UnsupportedTemporalTypeException->return->range->field->getFrom->checkValidIntValue
Instant#getLong(TemporalField):::Gets the value of the specified field from this instant as a long:::if->switch->return->return->return->return->throw->new->UnsupportedTemporalTypeException->return->field->getFrom
Instant#getEpochSecond():::Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z:::return
Instant#getNano():::Gets the number of nanoseconds, later along the time-line, from the start of the second:::return
Instant#with(TemporalAdjuster):::Returns an adjusted copy of this instant:::return->adjuster->adjustInto
Instant#with(TemporalField, long):::Returns a copy of this instant with the specified field set to a new value:::if->f->f->checkValidValue->switch->nval->return->create->nval->return->create->return->create->return->create->throw->new->UnsupportedTemporalTypeException->return->field->adjustInto
Instant#truncatedTo(TemporalUnit):::Returns a copy of this Instant truncated to the specified unit:::if->return->unitDur->unit->getDuration->if->unitDur->getSeconds->throw->new->UnsupportedTemporalTypeException->dur->unitDur->toNanos->if->throw->new->UnsupportedTemporalTypeException->nod->result->Math->floorDiv->return->plusNanos
Instant#plus(TemporalAmount):::Returns a copy of this instant with the specified amount added:::return->amountToAdd->addTo
Instant#plus(long, TemporalUnit):::Returns a copy of this instant with the specified amount added:::if->switch->return->plusNanos->return->plus->return->plusMillis->return->plusSeconds->return->Math->multiplyExact->plusSeconds->return->Math->multiplyExact->plusSeconds->return->Math->multiplyExact->plusSeconds->return->Math->multiplyExact->plusSeconds->throw->new->UnsupportedTemporalTypeException->return->unit->addTo
Instant#plusSeconds(long):::Returns a copy of this instant with the specified duration in seconds added:::return->plus
Instant#plusMillis(long):::Returns a copy of this instant with the specified duration in milliseconds added:::return->plus
Instant#plusNanos(long):::Returns a copy of this instant with the specified duration in nanoseconds added:::return->plus
Instant#plus(long, long):::Returns a copy of this instant with the specified duration added:::if->return->epochSec->Math->addExact->Math->addExact->nanoAdjustment->return->ofEpochSecond
Instant#minus(TemporalAmount):::Returns a copy of this instant with the specified amount subtracted:::return->amountToSubtract->subtractFrom
Instant#minus(long, TemporalUnit):::Returns a copy of this instant with the specified amount subtracted:::return->plus->plus->plus
Instant#minusSeconds(long):::Returns a copy of this instant with the specified duration in seconds subtracted:::if->return->plusSeconds->plusSeconds->return->plusSeconds
Instant#minusMillis(long):::Returns a copy of this instant with the specified duration in milliseconds subtracted:::if->return->plusMillis->plusMillis->return->plusMillis
Instant#minusNanos(long):::Returns a copy of this instant with the specified duration in nanoseconds subtracted:::if->return->plusNanos->plusNanos->return->plusNanos
Instant#query(TemporalQuery):::Queries this instant using the specified query:::if->TemporalQueries->precision->return->if->TemporalQueries->chronology->TemporalQueries->zoneId->TemporalQueries->zone->TemporalQueries->offset->TemporalQueries->localDate->TemporalQueries->localTime->return->return->query->queryFrom
Instant#adjustInto(Temporal):::Adjusts the specified temporal object to have this instant:::return->temporal->with->with
Instant#until(Temporal, TemporalUnit):::Calculates the amount of time until another instant in terms of the specified unit:::end->Instant->from->if->f->switch->return->nanosUntil->return->nanosUntil->return->Math->end->toEpochMilli->toEpochMilli->subtractExact->return->secondsUntil->return->secondsUntil->return->secondsUntil->return->secondsUntil->return->secondsUntil->throw->new->UnsupportedTemporalTypeException->return->unit->between
Instant#nanosUntil(Instant)::: instant nanos until:::secsDiff->Math->subtractExact->totalNanos->Math->multiplyExact->return->Math->addExact
Instant#secondsUntil(Instant)::: instant seconds until:::secsDiff->Math->subtractExact->nanosDiff->if->else->if->return
Instant#atOffset(ZoneOffset):::Combines this instant with an offset to create an OffsetDateTime:::return->OffsetDateTime->ofInstant
Instant#atZone(ZoneId):::Combines this instant with a time-zone to create a ZonedDateTime:::return->ZonedDateTime->ofInstant
Instant#toEpochMilli():::Converts this instant to the number of milliseconds from the epoch of 1970-01-01T00:00:00Z:::if->millis->Math->multiplyExact->adjustment->return->Math->addExact->else->millis->Math->multiplyExact->return->Math->addExact
Instant#compareTo(Instant):::Compares this instant to the specified instant:::cmp->Long->compare->if->return->return
Instant#isAfter(Instant):::Checks if this instant is after the specified instant:::return->compareTo
Instant#isBefore(Instant):::Checks if this instant is before the specified instant:::return->compareTo
Instant#equals(Object):::Checks if this instant is equal to the specified instant:::if->return->if->other->return->return
Instant#hashCode():::Returns a hash code for this instant.:::return
Instant#toString():::A string representation of this instant using ISO-8601 representation:::return->format
Instant#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
Instant#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
Instant#writeExternal(DataOutput)::: instant write external:::out->writeLong->out->writeInt
Instant#readExternal(DataInput)::: instant read external:::seconds->in->readLong->nanos->in->readInt->return->Instant->ofEpochSecond
LocalDate#now():::Obtains the current date from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
LocalDate#now(ZoneId):::Obtains the current date from the system clock in the specified time-zone:::return->Clock->system->now
LocalDate#now(Clock):::Obtains the current date from the specified clock:::Objects->requireNonNull->now->clock->instant->return->clock->getZone->ofInstant
LocalDate#of(int, Month, int):::Obtains an instance of LocalDate from a year, month and day:::YEAR->checkValidValue->Objects->requireNonNull->DAY_OF_MONTH->checkValidValue->return->month->getValue->create
LocalDate#of(int, int, int):::Obtains an instance of LocalDate from a year, month and day:::YEAR->checkValidValue->MONTH_OF_YEAR->checkValidValue->DAY_OF_MONTH->checkValidValue->return->create
LocalDate#ofYearDay(int, int):::Obtains an instance of LocalDate from a year and day-of-year:::YEAR->checkValidValue->DAY_OF_YEAR->checkValidValue->leap->isLeapYear->if->throw->new->DateTimeException->moy->Month->of->monthEnd->moy->firstDayOfYear->moy->length->if->moy->plus->dom->moy->firstDayOfYear->return->moy->getValue->new->LocalDate
LocalDate#ofInstant(Instant, ZoneId):::Obtains an instance of LocalDate from an Instant and zone ID:::Objects->requireNonNull->Objects->requireNonNull->rules->zone->getRules->offset->rules->getOffset->localSecond->instant->getEpochSecond->offset->getTotalSeconds->localEpochDay->Math->floorDiv->return->ofEpochDay
LocalDate#ofEpochDay(long):::Obtains an instance of LocalDate from the epoch day count:::EPOCH_DAY->checkValidValue->zeroDay->adjust->if->adjustCycles->yearEst->doyEst->if->marchDoy0->marchMonth0->month->dom->year->YEAR->checkValidIntValue->return->new->LocalDate
LocalDate#from(TemporalAccessor):::Obtains an instance of LocalDate from a temporal object:::Objects->requireNonNull->date->temporal->TemporalQueries->localDate->query->if->throw->temporal->getClass->getName->new->DateTimeException->return
LocalDate#parse(CharSequence):::Obtains an instance of LocalDate from a text string such as 2007-12-03:::return->parse
LocalDate#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalDate from a text string using a specific formatter:::Objects->requireNonNull->return->formatter->LocalDate->from->parse
LocalDate#create(int, int, int):::Creates a local date from the year, month and day fields.:::if->dom->switch->isLeapYear->break->break->if->if->throw->new->DateTimeException->else->throw->Month->of->name->new->DateTimeException->return->new->LocalDate
LocalDate#resolvePreviousValid(int, int, int):::Resolves the date, resolving days past the end of month.:::switch->Math->isLeapYear->min->break->Math->min->break->return->new->LocalDate
LocalDate#isSupported(TemporalField):::Checks if the specified field is supported:::return->ChronoLocalDate.super->isSupported
LocalDate#isSupported(TemporalUnit):::Checks if the specified unit is supported:::return->ChronoLocalDate.super->isSupported
LocalDate#range(TemporalField):::Gets the range of valid values for the specified field:::if->f->if->f->isDateBased->switch->return->ValueRange->lengthOfMonth->of->return->ValueRange->lengthOfYear->of->return->ValueRange->getMonth->isLeapYear->of->return->getYear->ValueRange->of->ValueRange->of->return->field->range->throw->new->UnsupportedTemporalTypeException->return->field->rangeRefinedBy
LocalDate#get(TemporalField):::Gets the value of the specified field from this date as an int:::if->return->get0->return->ChronoLocalDate.super->get
LocalDate#getLong(TemporalField):::Gets the value of the specified field from this date as a long:::if->if->return->toEpochDay->if->return->getProlepticMonth->return->get0->return->field->getFrom
LocalDate#get0(TemporalField)::: local date get0:::switch->return->getDayOfWeek->getValue->return->return->getDayOfYear->return->return->getDayOfYear->throw->new->UnsupportedTemporalTypeException->return->return->getDayOfYear->return->throw->new->UnsupportedTemporalTypeException->return->return->return->throw->new->UnsupportedTemporalTypeException
LocalDate#getProlepticMonth()::: local date get proleptic month:::return
LocalDate#getChronology():::Gets the chronology of this date, which is the ISO calendar system:::return
LocalDate#getEra():::Gets the era applicable at this date:::return->getYear
LocalDate#getYear():::Gets the year field:::return
LocalDate#getMonthValue():::Gets the month-of-year field from 1 to 12:::return
LocalDate#getMonth():::Gets the month-of-year field using the Month enum:::return->Month->of
LocalDate#getDayOfMonth():::Gets the day-of-month field:::return
LocalDate#getDayOfYear():::Gets the day-of-year field:::return->getMonth->isLeapYear->firstDayOfYear
LocalDate#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek:::dow0->Math->toEpochDay->floorMod->return->DayOfWeek->of
LocalDate#isLeapYear():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::return->isLeapYear
LocalDate#lengthOfMonth():::Returns the length of the month represented by this date:::switch->return->isLeapYear->return->return
LocalDate#lengthOfYear():::Returns the length of the year represented by this date:::return->isLeapYear
LocalDate#with(TemporalAdjuster):::Returns an adjusted copy of this date:::if->return->return->adjuster->adjustInto
LocalDate#with(TemporalField, long):::Returns a copy of this date with the specified field set to a new value:::if->f->f->checkValidValue->switch->return->getDayOfWeek->getValue->plusDays->return->getLong->plusDays->return->getLong->plusDays->return->withDayOfMonth->return->withDayOfYear->return->LocalDate->ofEpochDay->return->getLong->plusWeeks->return->getLong->plusWeeks->return->withMonth->return->getProlepticMonth->plusMonths->return->withYear->return->withYear->return->getLong->withYear->throw->new->UnsupportedTemporalTypeException->return->field->adjustInto
LocalDate#withYear(int):::Returns a copy of this LocalDate with the year altered:::if->return->YEAR->checkValidValue->return->resolvePreviousValid
LocalDate#withMonth(int):::Returns a copy of this LocalDate with the month-of-year altered:::if->return->MONTH_OF_YEAR->checkValidValue->return->resolvePreviousValid
LocalDate#withDayOfMonth(int):::Returns a copy of this LocalDate with the day-of-month altered:::if->return->return->of
LocalDate#withDayOfYear(int):::Returns a copy of this LocalDate with the day-of-year altered:::if->this->getDayOfYear->return->return->ofYearDay
LocalDate#plus(TemporalAmount):::Returns a copy of this date with the specified amount added:::if->periodToAdd->return->periodToAdd->toTotalMonths->plusMonths->periodToAdd->getDays->plusDays->Objects->requireNonNull->return->amountToAdd->addTo
LocalDate#plus(long, TemporalUnit):::Returns a copy of this date with the specified amount added:::if->f->switch->return->plusDays->return->plusWeeks->return->plusMonths->return->plusYears->return->Math->multiplyExact->plusYears->return->Math->multiplyExact->plusYears->return->Math->multiplyExact->plusYears->return->Math->getLong->addExact->with->throw->new->UnsupportedTemporalTypeException->return->unit->addTo
LocalDate#plusYears(long):::Returns a copy of this LocalDate with the specified number of years added:::if->return->newYear->YEAR->checkValidIntValue->return->resolvePreviousValid
LocalDate#plusMonths(long):::Returns a copy of this LocalDate with the specified number of months added:::if->return->monthCount->calcMonths->newYear->YEAR->Math->floorDiv->checkValidIntValue->newMonth->Math->floorMod->return->resolvePreviousValid
LocalDate#plusWeeks(long):::Returns a copy of this LocalDate with the specified number of weeks added:::return->Math->multiplyExact->plusDays
LocalDate#plusDays(long):::Returns a copy of this LocalDate with the specified number of days added:::if->return->dom->if->if->return->new->LocalDate->else->if->monthLen->lengthOfMonth->if->return->new->LocalDate->else->if->return->new->LocalDate->else->YEAR->checkValidValue->return->new->LocalDate->mjDay->Math->toEpochDay->addExact->return->LocalDate->ofEpochDay
LocalDate#minus(TemporalAmount):::Returns a copy of this date with the specified amount subtracted:::if->periodToSubtract->return->periodToSubtract->toTotalMonths->minusMonths->periodToSubtract->getDays->minusDays->Objects->requireNonNull->return->amountToSubtract->subtractFrom
LocalDate#minus(long, TemporalUnit):::Returns a copy of this date with the specified amount subtracted:::return->plus->plus->plus
LocalDate#minusYears(long):::Returns a copy of this LocalDate with the specified number of years subtracted:::return->plusYears->plusYears->plusYears
LocalDate#minusMonths(long):::Returns a copy of this LocalDate with the specified number of months subtracted:::return->plusMonths->plusMonths->plusMonths
LocalDate#minusWeeks(long):::Returns a copy of this LocalDate with the specified number of weeks subtracted:::return->plusWeeks->plusWeeks->plusWeeks
LocalDate#minusDays(long):::Returns a copy of this LocalDate with the specified number of days subtracted:::return->plusDays->plusDays->plusDays
LocalDate#query(TemporalQuery):::Queries this date using the specified query:::if->TemporalQueries->localDate->return->return->ChronoLocalDate.super->query
LocalDate#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date as this object:::return->ChronoLocalDate.super->adjustInto
LocalDate#until(Temporal, TemporalUnit):::Calculates the amount of time until another date in terms of the specified unit:::end->LocalDate->from->if->switch->return->daysUntil->return->daysUntil->return->monthsUntil->return->monthsUntil->return->monthsUntil->return->monthsUntil->return->monthsUntil->return->end->getLong->getLong->throw->new->UnsupportedTemporalTypeException->return->unit->between
LocalDate#daysUntil(LocalDate)::: local date days until:::return->end->toEpochDay->toEpochDay
LocalDate#monthsUntil(LocalDate)::: local date months until:::packed1->getProlepticMonth->getDayOfMonth->packed2->end->getProlepticMonth->end->getDayOfMonth->return
LocalDate#until(ChronoLocalDate):::Calculates the period between this date and another date as a Period:::end->LocalDate->from->totalMonths->end->getProlepticMonth->this->getProlepticMonth->days->if->calcDate->this->plusMonths->end->toEpochDay->calcDate->toEpochDay->else->if->end->lengthOfMonth->years->months->return->Period->Math->toIntExact->of
LocalDate#datesUntil(LocalDate):::Returns a sequential ordered stream of dates:::end->endExclusive->toEpochDay->start->toEpochDay->if->throw->new->IllegalArgumentException->return->LongStream->range->LocalDate->ofEpochDay->mapToObj
LocalDate#datesUntil(LocalDate, Period):::Returns a sequential ordered stream of dates by given incremental step:::if->step->isZero->throw->new->IllegalArgumentException->end->endExclusive->toEpochDay->start->toEpochDay->until->months->step->toTotalMonths->days->step->getDays->if->throw->new->IllegalArgumentException->if->return->Stream->empty->sign->if->throw->new->IllegalArgumentException->if->steps->return->LongStream->rangeClosed->LocalDate->ofEpochDay->mapToObj->steps->addMonths->addDays->maxAddMonths->MAX->getProlepticMonth->getProlepticMonth->getProlepticMonth->MIN->getProlepticMonth->if->plusMonths->toEpochDay->if->plusMonths->toEpochDay->return->LongStream->rangeClosed->this->plusMonths->plusDays->mapToObj
LocalDate#format(DateTimeFormatter):::Formats this date using the specified formatter:::Objects->requireNonNull->return->formatter->format
LocalDate#atTime(LocalTime):::Combines this date with a time to create a LocalDateTime:::return->LocalDateTime->of
LocalDate#atTime(int, int):::Combines this date with a time to create a LocalDateTime:::return->LocalTime->of->atTime
LocalDate#atTime(int, int, int):::Combines this date with a time to create a LocalDateTime:::return->LocalTime->of->atTime
LocalDate#atTime(int, int, int, int):::Combines this date with a time to create a LocalDateTime:::return->LocalTime->of->atTime
LocalDate#atTime(OffsetTime):::Combines this date with an offset time to create an OffsetDateTime:::return->OffsetDateTime->LocalDateTime->time->toLocalTime->of->time->getOffset->of
LocalDate#atStartOfDay():::Combines this date with the time of midnight to create a LocalDateTime at the start of this date:::return->LocalDateTime->of
LocalDate#atStartOfDay(ZoneId):::Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone:::Objects->requireNonNull->ldt->atTime->if->rules->zone->getRules->trans->rules->getTransition->if->trans->isGap->trans->getDateTimeAfter->return->ZonedDateTime->of
LocalDate#toEpochDay()::: local date to epoch day:::y->m->total->if->else->if->if->isLeapYear->return
LocalDate#toEpochSecond(LocalTime, ZoneOffset):::Converts this LocalDate to the number of seconds since the epoch of 1970-01-01T00:00:00Z:::Objects->requireNonNull->Objects->requireNonNull->secs->toEpochDay->time->toSecondOfDay->offset->getTotalSeconds->return
LocalDate#compareTo(ChronoLocalDate):::Compares this date to another date:::if->return->compareTo0->return->ChronoLocalDate.super->compareTo
LocalDate#compareTo0(LocalDate)::: local date compare to0:::cmp->if->if->return
LocalDate#isAfter(ChronoLocalDate):::Checks if this date is after the specified date:::if->return->compareTo0->return->ChronoLocalDate.super->isAfter
LocalDate#isBefore(ChronoLocalDate):::Checks if this date is before the specified date:::if->return->compareTo0->return->ChronoLocalDate.super->isBefore
LocalDate#isEqual(ChronoLocalDate):::Checks if this date is equal to the specified date:::if->return->compareTo0->return->ChronoLocalDate.super->isEqual
LocalDate#equals(Object):::Checks if this date is equal to another date:::if->return->if->return->compareTo0->return
LocalDate#hashCode():::A hash code for this date.:::yearValue->monthValue->dayValue->return
LocalDate#toString():::Outputs this date as a String, such as 2007-12-03:::yearValue->monthValue->dayValue->absYear->Math->abs->buf->new->StringBuilder->if->if->buf->append->deleteCharAt->else->buf->append->deleteCharAt->else->if->buf->append->buf->append->return->buf->append->append->append->append->toString
LocalDate#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
LocalDate#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
LocalDate#writeExternal(DataOutput)::: local date write external:::out->writeInt->out->writeByte->out->writeByte
LocalDate#readExternal(DataInput)::: local date read external:::year->in->readInt->month->in->readByte->dayOfMonth->in->readByte->return->LocalDate->of
LocalDateTime#now():::Obtains the current date-time from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
LocalDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone:::return->Clock->system->now
LocalDateTime#now(Clock):::Obtains the current date-time from the specified clock:::Objects->requireNonNull->now->clock->instant->offset->clock->getZone->getRules->getOffset->return->now->getEpochSecond->now->getNano->ofEpochSecond
LocalDateTime#of(int, Month, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero:::date->LocalDate->of->time->LocalTime->of->return->new->LocalDateTime
LocalDateTime#of(int, Month, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero:::date->LocalDate->of->time->LocalTime->of->return->new->LocalDateTime
LocalDateTime#of(int, Month, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond:::date->LocalDate->of->time->LocalTime->of->return->new->LocalDateTime
LocalDateTime#of(int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero:::date->LocalDate->of->time->LocalTime->of->return->new->LocalDateTime
LocalDateTime#of(int, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero:::date->LocalDate->of->time->LocalTime->of->return->new->LocalDateTime
LocalDateTime#of(int, int, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond:::date->LocalDate->of->time->LocalTime->of->return->new->LocalDateTime
LocalDateTime#of(LocalDate, LocalTime):::Obtains an instance of LocalDateTime from a date and time.:::Objects->requireNonNull->Objects->requireNonNull->return->new->LocalDateTime
LocalDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of LocalDateTime from an Instant and zone ID:::Objects->requireNonNull->Objects->requireNonNull->rules->zone->getRules->offset->rules->getOffset->return->instant->getEpochSecond->instant->getNano->ofEpochSecond
LocalDateTime#ofEpochSecond(long, int, ZoneOffset):::Obtains an instance of LocalDateTime using seconds from the epoch of 1970-01-01T00:00:00Z:::Objects->requireNonNull->NANO_OF_SECOND->checkValidValue->localSecond->offset->getTotalSeconds->localEpochDay->Math->floorDiv->secsOfDay->Math->floorMod->date->LocalDate->ofEpochDay->time->LocalTime->ofNanoOfDay->return->new->LocalDateTime
LocalDateTime#from(TemporalAccessor):::Obtains an instance of LocalDateTime from a temporal object:::if->return->else->if->return->toLocalDateTime->else->if->return->toLocalDateTime->try->date->LocalDate->from->time->LocalTime->from->return->new->LocalDateTime->catch->throw->temporal->getClass->getName->new->DateTimeException->finally
LocalDateTime#parse(CharSequence):::Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30:::return->parse
LocalDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalDateTime from a text string using a specific formatter:::Objects->requireNonNull->return->formatter->LocalDateTime->from->parse
LocalDateTime#with(LocalDate, LocalTime):::Returns a copy of this date-time with the new date and time, checking to see if a new object is in fact required.:::if->return->return->new->LocalDateTime
LocalDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::if->f->return->f->isDateBased->f->isTimeBased->return->field->isSupportedBy
LocalDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::return->ChronoLocalDateTime.super->isSupported
LocalDateTime#range(TemporalField):::Gets the range of valid values for the specified field:::if->f->return->f->isTimeBased->time->range->date->range->return->field->rangeRefinedBy
LocalDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int:::if->f->return->f->isTimeBased->time->get->date->get->return->ChronoLocalDateTime.super->get
LocalDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long:::if->f->return->f->isTimeBased->time->getLong->date->getLong->return->field->getFrom
LocalDateTime#toLocalDate():::Gets the LocalDate part of this date-time:::return
LocalDateTime#getYear():::Gets the year field:::return->date->getYear
LocalDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12:::return->date->getMonthValue
LocalDateTime#getMonth():::Gets the month-of-year field using the Month enum:::return->date->getMonth
LocalDateTime#getDayOfMonth():::Gets the day-of-month field:::return->date->getDayOfMonth
LocalDateTime#getDayOfYear():::Gets the day-of-year field:::return->date->getDayOfYear
LocalDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek:::return->date->getDayOfWeek
LocalDateTime#toLocalTime():::Gets the LocalTime part of this date-time:::return
LocalDateTime#getHour():::Gets the hour-of-day field.:::return->time->getHour
LocalDateTime#getMinute():::Gets the minute-of-hour field.:::return->time->getMinute
LocalDateTime#getSecond():::Gets the second-of-minute field.:::return->time->getSecond
LocalDateTime#getNano():::Gets the nano-of-second field.:::return->time->getNano
LocalDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time:::if->return->with->else->if->return->with->else->if->return->return->adjuster->adjustInto
LocalDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value:::if->f->if->f->isTimeBased->return->time->with->with->else->return->date->with->with->return->field->adjustInto
LocalDateTime#withYear(int):::Returns a copy of this LocalDateTime with the year altered:::return->date->withYear->with
LocalDateTime#withMonth(int):::Returns a copy of this LocalDateTime with the month-of-year altered:::return->date->withMonth->with
LocalDateTime#withDayOfMonth(int):::Returns a copy of this LocalDateTime with the day-of-month altered:::return->date->withDayOfMonth->with
LocalDateTime#withDayOfYear(int):::Returns a copy of this LocalDateTime with the day-of-year altered:::return->date->withDayOfYear->with
LocalDateTime#withHour(int):::Returns a copy of this LocalDateTime with the hour-of-day altered:::newTime->time->withHour->return->with
LocalDateTime#withMinute(int):::Returns a copy of this LocalDateTime with the minute-of-hour altered:::newTime->time->withMinute->return->with
LocalDateTime#withSecond(int):::Returns a copy of this LocalDateTime with the second-of-minute altered:::newTime->time->withSecond->return->with
LocalDateTime#withNano(int):::Returns a copy of this LocalDateTime with the nano-of-second altered:::newTime->time->withNano->return->with
LocalDateTime#truncatedTo(TemporalUnit):::Returns a copy of this LocalDateTime with the time truncated:::return->time->truncatedTo->with
LocalDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added:::if->periodToAdd->return->date->plus->with->Objects->requireNonNull->return->amountToAdd->addTo
LocalDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added:::if->f->switch->return->plusNanos->return->plusDays->plusNanos->return->plusDays->plusNanos->return->plusSeconds->return->plusMinutes->return->plusHours->return->plusDays->plusHours->return->date->plus->with->return->unit->addTo
LocalDateTime#plusYears(long):::Returns a copy of this LocalDateTime with the specified number of years added:::newDate->date->plusYears->return->with
LocalDateTime#plusMonths(long):::Returns a copy of this LocalDateTime with the specified number of months added:::newDate->date->plusMonths->return->with
LocalDateTime#plusWeeks(long):::Returns a copy of this LocalDateTime with the specified number of weeks added:::newDate->date->plusWeeks->return->with
LocalDateTime#plusDays(long):::Returns a copy of this LocalDateTime with the specified number of days added:::newDate->date->plusDays->return->with
LocalDateTime#plusHours(long):::Returns a copy of this LocalDateTime with the specified number of hours added:::return->plusWithOverflow
LocalDateTime#plusMinutes(long):::Returns a copy of this LocalDateTime with the specified number of minutes added:::return->plusWithOverflow
LocalDateTime#plusSeconds(long):::Returns a copy of this LocalDateTime with the specified number of seconds added:::return->plusWithOverflow
LocalDateTime#plusNanos(long):::Returns a copy of this LocalDateTime with the specified number of nanoseconds added:::return->plusWithOverflow
LocalDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted:::if->periodToSubtract->return->date->minus->with->Objects->requireNonNull->return->amountToSubtract->subtractFrom
LocalDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted:::return->plus->plus->plus
LocalDateTime#minusYears(long):::Returns a copy of this LocalDateTime with the specified number of years subtracted:::return->plusYears->plusYears->plusYears
LocalDateTime#minusMonths(long):::Returns a copy of this LocalDateTime with the specified number of months subtracted:::return->plusMonths->plusMonths->plusMonths
LocalDateTime#minusWeeks(long):::Returns a copy of this LocalDateTime with the specified number of weeks subtracted:::return->plusWeeks->plusWeeks->plusWeeks
LocalDateTime#minusDays(long):::Returns a copy of this LocalDateTime with the specified number of days subtracted:::return->plusDays->plusDays->plusDays
LocalDateTime#minusHours(long):::Returns a copy of this LocalDateTime with the specified number of hours subtracted:::return->plusWithOverflow
LocalDateTime#minusMinutes(long):::Returns a copy of this LocalDateTime with the specified number of minutes subtracted:::return->plusWithOverflow
LocalDateTime#minusSeconds(long):::Returns a copy of this LocalDateTime with the specified number of seconds subtracted:::return->plusWithOverflow
LocalDateTime#minusNanos(long):::Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted:::return->plusWithOverflow
LocalDateTime#plusWithOverflow(LocalDate, long, long, long, long, int):::Returns a copy of this LocalDateTime with the specified period added:::if->return->with->totDays->totNanos->curNoD->time->toNanoOfDay->Math->floorDiv->newNoD->Math->floorMod->newTime->LocalTime->ofNanoOfDay->return->newDate->plusDays->with
LocalDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::if->TemporalQueries->localDate->return->return->ChronoLocalDateTime.super->query
LocalDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date and time as this object:::return->ChronoLocalDateTime.super->adjustInto
LocalDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit:::end->LocalDateTime->from->if->if->unit->isTimeBased->amount->date->daysUntil->if->return->time->until->timePart->toNanoOfDay->time->toNanoOfDay->if->else->switch->Math->multiplyExact->break->Math->multiplyExact->break->Math->multiplyExact->break->Math->multiplyExact->break->Math->multiplyExact->break->Math->multiplyExact->break->Math->multiplyExact->break->return->Math->addExact->endDate->if->endDate->isAfter->isBefore->endDate->minusDays->else->if->endDate->isBefore->isAfter->endDate->plusDays->return->date->until->return->unit->between
LocalDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects->requireNonNull->return->formatter->format
LocalDateTime#atOffset(ZoneOffset):::Combines this date-time with an offset to create an OffsetDateTime:::return->OffsetDateTime->of
LocalDateTime#atZone(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime:::return->ZonedDateTime->of
LocalDateTime#compareTo(ChronoLocalDateTime):::Compares this date-time to another date-time:::if->return->compareTo0->return->ChronoLocalDateTime.super->compareTo
LocalDateTime#compareTo0(LocalDateTime)::: local date time compare to0:::cmp->date->other->toLocalDate->compareTo0->if->time->other->toLocalTime->compareTo->return
LocalDateTime#isAfter(ChronoLocalDateTime):::Checks if this date-time is after the specified date-time:::if->return->compareTo0->return->ChronoLocalDateTime.super->isAfter
LocalDateTime#isBefore(ChronoLocalDateTime):::Checks if this date-time is before the specified date-time:::if->return->compareTo0->return->ChronoLocalDateTime.super->isBefore
LocalDateTime#isEqual(ChronoLocalDateTime):::Checks if this date-time is equal to the specified date-time:::if->return->compareTo0->return->ChronoLocalDateTime.super->isEqual
LocalDateTime#equals(Object):::Checks if this date-time is equal to another date-time:::if->return->if->other->return->date->equals->time->equals->return
LocalDateTime#hashCode():::A hash code for this date-time.:::return->date->hashCode->time->hashCode
LocalDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30:::return->date->toString->time->toString
LocalDateTime#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
LocalDateTime#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
LocalDateTime#writeExternal(DataOutput)::: local date time write external:::date->writeExternal->time->writeExternal
LocalDateTime#readExternal(DataInput)::: local date time read external:::date->LocalDate->readExternal->time->LocalTime->readExternal->return->LocalDateTime->of
LocalTime#now():::Obtains the current time from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
LocalTime#now(ZoneId):::Obtains the current time from the system clock in the specified time-zone:::return->Clock->system->now
LocalTime#now(Clock):::Obtains the current time from the specified clock:::Objects->requireNonNull->now->clock->instant->return->clock->getZone->ofInstant
LocalTime#of(int, int):::Obtains an instance of LocalTime from an hour and minute:::HOUR_OF_DAY->checkValidValue->if->return->MINUTE_OF_HOUR->checkValidValue->return->new->LocalTime
LocalTime#of(int, int, int):::Obtains an instance of LocalTime from an hour, minute and second:::HOUR_OF_DAY->checkValidValue->if->return->MINUTE_OF_HOUR->checkValidValue->SECOND_OF_MINUTE->checkValidValue->return->new->LocalTime
LocalTime#of(int, int, int, int):::Obtains an instance of LocalTime from an hour, minute, second and nanosecond:::HOUR_OF_DAY->checkValidValue->MINUTE_OF_HOUR->checkValidValue->SECOND_OF_MINUTE->checkValidValue->NANO_OF_SECOND->checkValidValue->return->create
LocalTime#ofInstant(Instant, ZoneId):::Obtains an instance of LocalTime from an Instant and zone ID:::Objects->requireNonNull->Objects->requireNonNull->offset->zone->getRules->getOffset->localSecond->instant->getEpochSecond->offset->getTotalSeconds->secsOfDay->Math->floorMod->return->instant->getNano->ofNanoOfDay
LocalTime#ofSecondOfDay(long):::Obtains an instance of LocalTime from a second-of-day value:::SECOND_OF_DAY->checkValidValue->hours->minutes->return->create
LocalTime#ofNanoOfDay(long):::Obtains an instance of LocalTime from a nanos-of-day value:::NANO_OF_DAY->checkValidValue->hours->minutes->seconds->return->create
LocalTime#from(TemporalAccessor):::Obtains an instance of LocalTime from a temporal object:::Objects->requireNonNull->time->temporal->TemporalQueries->localTime->query->if->throw->temporal->getClass->getName->new->DateTimeException->return
LocalTime#parse(CharSequence):::Obtains an instance of LocalTime from a text string such as 10:15:::return->parse
LocalTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalTime from a text string using a specific formatter:::Objects->requireNonNull->return->formatter->LocalTime->from->parse
LocalTime#create(int, int, int, int):::Creates a local time from the hour, minute, second and nanosecond fields:::if->return->return->new->LocalTime
LocalTime#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->field->isTimeBased->return->field->isSupportedBy
LocalTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::if->return->unit->isTimeBased->return->unit->isSupportedBy
LocalTime#range(TemporalField):::Gets the range of valid values for the specified field:::return->Temporal.super->range
LocalTime#get(TemporalField):::Gets the value of the specified field from this time as an int:::if->return->get0->return->Temporal.super->get
LocalTime#getLong(TemporalField):::Gets the value of the specified field from this time as a long:::if->if->return->toNanoOfDay->if->return->toNanoOfDay->return->get0->return->field->getFrom
LocalTime#get0(TemporalField)::: local time get0:::switch->return->throw->new->UnsupportedTemporalTypeException->return->throw->new->UnsupportedTemporalTypeException->return->return->toNanoOfDay->return->return->toSecondOfDay->return->return->return->ham->return->return->return->return->throw->new->UnsupportedTemporalTypeException
LocalTime#getHour():::Gets the hour-of-day field.:::return
LocalTime#getMinute():::Gets the minute-of-hour field.:::return
LocalTime#getSecond():::Gets the second-of-minute field.:::return
LocalTime#getNano():::Gets the nano-of-second field.:::return
LocalTime#with(TemporalAdjuster):::Returns an adjusted copy of this time:::if->return->return->adjuster->adjustInto
LocalTime#with(TemporalField, long):::Returns a copy of this time with the specified field set to a new value:::if->f->f->checkValidValue->switch->return->withNano->return->LocalTime->ofNanoOfDay->return->withNano->return->LocalTime->ofNanoOfDay->return->withNano->return->LocalTime->ofNanoOfDay->return->withSecond->return->toSecondOfDay->plusSeconds->return->withMinute->return->plusMinutes->return->plusHours->return->plusHours->return->withHour->return->withHour->return->plusHours->throw->new->UnsupportedTemporalTypeException->return->field->adjustInto
LocalTime#withHour(int):::Returns a copy of this LocalTime with the hour-of-day altered:::if->return->HOUR_OF_DAY->checkValidValue->return->create
LocalTime#withMinute(int):::Returns a copy of this LocalTime with the minute-of-hour altered:::if->return->MINUTE_OF_HOUR->checkValidValue->return->create
LocalTime#withSecond(int):::Returns a copy of this LocalTime with the second-of-minute altered:::if->return->SECOND_OF_MINUTE->checkValidValue->return->create
LocalTime#withNano(int):::Returns a copy of this LocalTime with the nano-of-second altered:::if->return->NANO_OF_SECOND->checkValidValue->return->create
LocalTime#truncatedTo(TemporalUnit):::Returns a copy of this LocalTime with the time truncated:::if->return->unitDur->unit->getDuration->if->unitDur->getSeconds->throw->new->UnsupportedTemporalTypeException->dur->unitDur->toNanos->if->throw->new->UnsupportedTemporalTypeException->nod->toNanoOfDay->return->ofNanoOfDay
LocalTime#plus(TemporalAmount):::Returns a copy of this time with the specified amount added:::return->amountToAdd->addTo
LocalTime#plus(long, TemporalUnit):::Returns a copy of this time with the specified amount added:::if->switch->return->plusNanos->return->plusNanos->return->plusNanos->return->plusSeconds->return->plusMinutes->return->plusHours->return->plusHours->throw->new->UnsupportedTemporalTypeException->return->unit->addTo
LocalTime#plusHours(long):::Returns a copy of this LocalTime with the specified number of hours added:::if->return->newHour->return->create
LocalTime#plusMinutes(long):::Returns a copy of this LocalTime with the specified number of minutes added:::if->return->mofd->newMofd->if->return->newHour->newMinute->return->create
LocalTime#plusSeconds(long):::Returns a copy of this LocalTime with the specified number of seconds added:::if->return->sofd->newSofd->if->return->newHour->newMinute->newSecond->return->create
LocalTime#plusNanos(long):::Returns a copy of this LocalTime with the specified number of nanoseconds added:::if->return->nofd->toNanoOfDay->newNofd->if->return->newHour->newMinute->newSecond->newNano->return->create
LocalTime#minus(TemporalAmount):::Returns a copy of this time with the specified amount subtracted:::return->amountToSubtract->subtractFrom
LocalTime#minus(long, TemporalUnit):::Returns a copy of this time with the specified amount subtracted:::return->plus->plus->plus
LocalTime#minusHours(long):::Returns a copy of this LocalTime with the specified number of hours subtracted:::return->plusHours
LocalTime#minusMinutes(long):::Returns a copy of this LocalTime with the specified number of minutes subtracted:::return->plusMinutes
LocalTime#minusSeconds(long):::Returns a copy of this LocalTime with the specified number of seconds subtracted:::return->plusSeconds
LocalTime#minusNanos(long):::Returns a copy of this LocalTime with the specified number of nanoseconds subtracted:::return->plusNanos
LocalTime#query(TemporalQuery):::Queries this time using the specified query:::if->TemporalQueries->chronology->TemporalQueries->zoneId->TemporalQueries->zone->TemporalQueries->offset->return->else->if->TemporalQueries->localTime->return->else->if->TemporalQueries->localDate->return->else->if->TemporalQueries->precision->return->return->query->queryFrom
LocalTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same time as this object:::return->temporal->toNanoOfDay->with
LocalTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another time in terms of the specified unit:::end->LocalTime->from->if->nanosUntil->end->toNanoOfDay->toNanoOfDay->switch->return->return->return->return->return->return->return->throw->new->UnsupportedTemporalTypeException->return->unit->between
LocalTime#format(DateTimeFormatter):::Formats this time using the specified formatter:::Objects->requireNonNull->return->formatter->format
LocalTime#atDate(LocalDate):::Combines this time with a date to create a LocalDateTime:::return->LocalDateTime->of
LocalTime#atOffset(ZoneOffset):::Combines this time with an offset to create an OffsetTime:::return->OffsetTime->of
LocalTime#toSecondOfDay():::Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1.:::total->return
LocalTime#toNanoOfDay():::Extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1.:::total->return
LocalTime#toEpochSecond(LocalDate, ZoneOffset):::Converts this LocalTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z:::Objects->requireNonNull->Objects->requireNonNull->epochDay->date->toEpochDay->secs->toSecondOfDay->offset->getTotalSeconds->return
LocalTime#compareTo(LocalTime):::Compares this time to another time:::cmp->Integer->compare->if->Integer->compare->if->Integer->compare->if->Integer->compare->return
LocalTime#isAfter(LocalTime):::Checks if this time is after the specified time:::return->compareTo
LocalTime#isBefore(LocalTime):::Checks if this time is before the specified time:::return->compareTo
LocalTime#equals(Object):::Checks if this time is equal to another time:::if->return->if->other->return->return
LocalTime#hashCode():::A hash code for this time.:::nod->toNanoOfDay->return
LocalTime#toString():::Outputs this time as a String, such as 10:15:::buf->new->StringBuilder->hourValue->minuteValue->secondValue->nanoValue->buf->append->append->append->append->if->buf->append->append->if->buf->append->if->buf->Integer->toString->substring->append->else->if->buf->Integer->toString->substring->append->else->buf->Integer->toString->substring->append->return->buf->toString
LocalTime#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
LocalTime#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
LocalTime#writeExternal(DataOutput)::: local time write external:::if->if->if->out->writeByte->else->out->writeByte->out->writeByte->else->out->writeByte->out->writeByte->out->writeByte->else->out->writeByte->out->writeByte->out->writeByte->out->writeInt
LocalTime#readExternal(DataInput)::: local time read external:::hour->in->readByte->minute->second->nano->if->else->in->readByte->if->else->in->readByte->if->else->in->readInt->return->LocalTime->of
MonthDay#now():::Obtains the current month-day from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
MonthDay#now(ZoneId):::Obtains the current month-day from the system clock in the specified time-zone:::return->Clock->system->now
MonthDay#now(Clock):::Obtains the current month-day from the specified clock:::now->LocalDate->now->return->MonthDay->now->getMonth->now->getDayOfMonth->of
MonthDay#of(Month, int):::Obtains an instance of MonthDay:::Objects->requireNonNull->DAY_OF_MONTH->checkValidValue->if->month->maxLength->throw->month->name->new->DateTimeException->return->month->getValue->new->MonthDay
MonthDay#of(int, int):::Obtains an instance of MonthDay:::return->Month->of->of
MonthDay#from(TemporalAccessor):::Obtains an instance of MonthDay from a temporal object:::if->return->try->if->Chronology->from->equals->LocalDate->from->return->temporal->get->temporal->get->of->catch->throw->temporal->getClass->getName->new->DateTimeException->finally
MonthDay#parse(CharSequence):::Obtains an instance of MonthDay from a text string such as --12-03:::return->parse
MonthDay#parse(CharSequence, DateTimeFormatter):::Obtains an instance of MonthDay from a text string using a specific formatter:::Objects->requireNonNull->return->formatter->MonthDay->from->parse
MonthDay#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->return->field->isSupportedBy
MonthDay#range(TemporalField):::Gets the range of valid values for the specified field:::if->return->field->range->else->if->return->ValueRange->getMonth->minLength->getMonth->maxLength->of->return->TemporalAccessor.super->range
MonthDay#get(TemporalField):::Gets the value of the specified field from this month-day as an int:::return->range->getLong->checkValidIntValue
MonthDay#getLong(TemporalField):::Gets the value of the specified field from this month-day as a long:::if->switch->return->return->throw->new->UnsupportedTemporalTypeException->return->field->getFrom
MonthDay#getMonthValue():::Gets the month-of-year field from 1 to 12:::return
MonthDay#getMonth():::Gets the month-of-year field using the Month enum:::return->Month->of
MonthDay#getDayOfMonth():::Gets the day-of-month field:::return
MonthDay#isValidYear(int):::Checks if the year is valid for this month-day:::return->Year->isLeap
MonthDay#withMonth(int):::Returns a copy of this MonthDay with the month-of-year altered:::return->Month->of->with
MonthDay#with(Month):::Returns a copy of this MonthDay with the month-of-year altered:::Objects->requireNonNull->if->month->getValue->return->day->Math->month->maxLength->min->return->month->getValue->new->MonthDay
MonthDay#withDayOfMonth(int):::Returns a copy of this MonthDay with the day-of-month altered:::if->return->return->of
MonthDay#query(TemporalQuery):::Queries this month-day using the specified query:::if->TemporalQueries->chronology->return->return->TemporalAccessor.super->query
MonthDay#adjustInto(Temporal):::Adjusts the specified temporal object to have this month-day:::if->Chronology->from->equals->throw->new->DateTimeException->temporal->with->return->temporal->Math->temporal->range->getMaximum->min->with
MonthDay#format(DateTimeFormatter):::Formats this month-day using the specified formatter:::Objects->requireNonNull->return->formatter->format
MonthDay#atYear(int):::Combines this month-day with a year to create a LocalDate:::return->LocalDate->isValidYear->of
MonthDay#compareTo(MonthDay):::Compares this month-day to another month-day:::cmp->if->return
MonthDay#isAfter(MonthDay):::Checks if this month-day is after the specified month-day.:::return->compareTo
MonthDay#isBefore(MonthDay):::Checks if this month-day is before the specified month-day.:::return->compareTo
MonthDay#equals(Object):::Checks if this month-day is equal to another month-day:::if->return->if->other->return->return
MonthDay#hashCode():::A hash code for this month-day.:::return
MonthDay#toString():::Outputs this month-day as a String, such as --12-03:::return->new->StringBuilder->append->append->append->append->append->toString
MonthDay#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
MonthDay#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
MonthDay#writeExternal(DataOutput)::: month day write external:::out->writeByte->out->writeByte
MonthDay#readExternal(DataInput)::: month day read external:::month->in->readByte->day->in->readByte->return->MonthDay->of
OffsetDateTime#timeLineOrder():::Gets a comparator that compares two OffsetDateTime instances based solely on the instant:::return->OffsetDateTime->compareInstant
OffsetDateTime#compareInstant(OffsetDateTime, OffsetDateTime):::Compares this OffsetDateTime to another date-time:::if->datetime1->getOffset->datetime2->getOffset->equals->return->datetime1->toLocalDateTime->datetime2->toLocalDateTime->compareTo->cmp->Long->datetime1->toEpochSecond->datetime2->toEpochSecond->compare->if->datetime1->toLocalTime->getNano->datetime2->toLocalTime->getNano->return
OffsetDateTime#now():::Obtains the current date-time from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
OffsetDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone:::return->Clock->system->now
OffsetDateTime#now(Clock):::Obtains the current date-time from the specified clock:::Objects->requireNonNull->now->clock->instant->return->clock->getZone->getRules->getOffset->ofInstant
OffsetDateTime#of(LocalDate, LocalTime, ZoneOffset):::Obtains an instance of OffsetDateTime from a date, time and offset:::dt->LocalDateTime->of->return->new->OffsetDateTime
OffsetDateTime#of(LocalDateTime, ZoneOffset):::Obtains an instance of OffsetDateTime from a date-time and offset:::return->new->OffsetDateTime
OffsetDateTime#of(int, int, int, int, int, int, int, ZoneOffset):::Obtains an instance of OffsetDateTime from a year, month, day, hour, minute, second, nanosecond and offset:::dt->LocalDateTime->of->return->new->OffsetDateTime
OffsetDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of OffsetDateTime from an Instant and zone ID:::Objects->requireNonNull->Objects->requireNonNull->rules->zone->getRules->offset->rules->getOffset->ldt->LocalDateTime->instant->getEpochSecond->instant->getNano->ofEpochSecond->return->new->OffsetDateTime
OffsetDateTime#from(TemporalAccessor):::Obtains an instance of OffsetDateTime from a temporal object:::if->return->try->offset->ZoneOffset->from->date->temporal->TemporalQueries->localDate->query->time->temporal->TemporalQueries->localTime->query->if->return->OffsetDateTime->of->else->instant->Instant->from->return->OffsetDateTime->ofInstant->catch->throw->temporal->getClass->getName->new->DateTimeException->finally
OffsetDateTime#parse(CharSequence):::Obtains an instance of OffsetDateTime from a text string such as 2007-12-03T10:15:30+01:00:::return->parse
OffsetDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of OffsetDateTime from a text string using a specific formatter:::Objects->requireNonNull->return->formatter->OffsetDateTime->from->parse
OffsetDateTime#with(LocalDateTime, ZoneOffset):::Returns a new date-time based on this one, returning this where possible.:::if->equals->return->return->new->OffsetDateTime
OffsetDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::return->field->isSupportedBy
OffsetDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::if->return->return->unit->isSupportedBy
OffsetDateTime#range(TemporalField):::Gets the range of valid values for the specified field:::if->if->return->field->range->return->dateTime->range->return->field->rangeRefinedBy
OffsetDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int:::if->switch->throw->new->UnsupportedTemporalTypeException->return->getOffset->getTotalSeconds->return->dateTime->get->return->Temporal.super->get
OffsetDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long:::if->switch->return->toEpochSecond->return->getOffset->getTotalSeconds->return->dateTime->getLong->return->field->getFrom
OffsetDateTime#getOffset():::Gets the zone offset, such as '+01:00':::return
OffsetDateTime#withOffsetSameLocal(ZoneOffset):::Returns a copy of this OffsetDateTime with the specified offset ensuring that the result has the same local date-time:::return->with
OffsetDateTime#withOffsetSameInstant(ZoneOffset):::Returns a copy of this OffsetDateTime with the specified offset ensuring that the result is at the same instant:::if->offset->equals->return->difference->offset->getTotalSeconds->getTotalSeconds->adjusted->dateTime->plusSeconds->return->new->OffsetDateTime
OffsetDateTime#toLocalDateTime():::Gets the LocalDateTime part of this date-time:::return
OffsetDateTime#toLocalDate():::Gets the LocalDate part of this date-time:::return->dateTime->toLocalDate
OffsetDateTime#getYear():::Gets the year field:::return->dateTime->getYear
OffsetDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12:::return->dateTime->getMonthValue
OffsetDateTime#getMonth():::Gets the month-of-year field using the Month enum:::return->dateTime->getMonth
OffsetDateTime#getDayOfMonth():::Gets the day-of-month field:::return->dateTime->getDayOfMonth
OffsetDateTime#getDayOfYear():::Gets the day-of-year field:::return->dateTime->getDayOfYear
OffsetDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek:::return->dateTime->getDayOfWeek
OffsetDateTime#toLocalTime():::Gets the LocalTime part of this date-time:::return->dateTime->toLocalTime
OffsetDateTime#getHour():::Gets the hour-of-day field.:::return->dateTime->getHour
OffsetDateTime#getMinute():::Gets the minute-of-hour field.:::return->dateTime->getMinute
OffsetDateTime#getSecond():::Gets the second-of-minute field.:::return->dateTime->getSecond
OffsetDateTime#getNano():::Gets the nano-of-second field.:::return->dateTime->getNano
OffsetDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time:::if->return->dateTime->with->with->else->if->return->ofInstant->else->if->return->with->else->if->return->return->adjuster->adjustInto
OffsetDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value:::if->f->switch->return->Instant->getNano->ofEpochSecond->ofInstant->return->ZoneOffset->f->checkValidIntValue->ofTotalSeconds->with->return->dateTime->with->with->return->field->adjustInto
OffsetDateTime#withYear(int):::Returns a copy of this OffsetDateTime with the year altered:::return->dateTime->withYear->with
OffsetDateTime#withMonth(int):::Returns a copy of this OffsetDateTime with the month-of-year altered:::return->dateTime->withMonth->with
OffsetDateTime#withDayOfMonth(int):::Returns a copy of this OffsetDateTime with the day-of-month altered:::return->dateTime->withDayOfMonth->with
OffsetDateTime#withDayOfYear(int):::Returns a copy of this OffsetDateTime with the day-of-year altered:::return->dateTime->withDayOfYear->with
OffsetDateTime#withHour(int):::Returns a copy of this OffsetDateTime with the hour-of-day altered:::return->dateTime->withHour->with
OffsetDateTime#withMinute(int):::Returns a copy of this OffsetDateTime with the minute-of-hour altered:::return->dateTime->withMinute->with
OffsetDateTime#withSecond(int):::Returns a copy of this OffsetDateTime with the second-of-minute altered:::return->dateTime->withSecond->with
OffsetDateTime#withNano(int):::Returns a copy of this OffsetDateTime with the nano-of-second altered:::return->dateTime->withNano->with
OffsetDateTime#truncatedTo(TemporalUnit):::Returns a copy of this OffsetDateTime with the time truncated:::return->dateTime->truncatedTo->with
OffsetDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added:::return->amountToAdd->addTo
OffsetDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added:::if->return->dateTime->plus->with->return->unit->addTo
OffsetDateTime#plusYears(long):::Returns a copy of this OffsetDateTime with the specified number of years added:::return->dateTime->plusYears->with
OffsetDateTime#plusMonths(long):::Returns a copy of this OffsetDateTime with the specified number of months added:::return->dateTime->plusMonths->with
OffsetDateTime#plusWeeks(long):::Returns a copy of this OffsetDateTime with the specified number of weeks added:::return->dateTime->plusWeeks->with
OffsetDateTime#plusDays(long):::Returns a copy of this OffsetDateTime with the specified number of days added:::return->dateTime->plusDays->with
OffsetDateTime#plusHours(long):::Returns a copy of this OffsetDateTime with the specified number of hours added:::return->dateTime->plusHours->with
OffsetDateTime#plusMinutes(long):::Returns a copy of this OffsetDateTime with the specified number of minutes added:::return->dateTime->plusMinutes->with
OffsetDateTime#plusSeconds(long):::Returns a copy of this OffsetDateTime with the specified number of seconds added:::return->dateTime->plusSeconds->with
OffsetDateTime#plusNanos(long):::Returns a copy of this OffsetDateTime with the specified number of nanoseconds added:::return->dateTime->plusNanos->with
OffsetDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted:::return->amountToSubtract->subtractFrom
OffsetDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted:::return->plus->plus->plus
OffsetDateTime#minusYears(long):::Returns a copy of this OffsetDateTime with the specified number of years subtracted:::return->plusYears->plusYears->plusYears
OffsetDateTime#minusMonths(long):::Returns a copy of this OffsetDateTime with the specified number of months subtracted:::return->plusMonths->plusMonths->plusMonths
OffsetDateTime#minusWeeks(long):::Returns a copy of this OffsetDateTime with the specified number of weeks subtracted:::return->plusWeeks->plusWeeks->plusWeeks
OffsetDateTime#minusDays(long):::Returns a copy of this OffsetDateTime with the specified number of days subtracted:::return->plusDays->plusDays->plusDays
OffsetDateTime#minusHours(long):::Returns a copy of this OffsetDateTime with the specified number of hours subtracted:::return->plusHours->plusHours->plusHours
OffsetDateTime#minusMinutes(long):::Returns a copy of this OffsetDateTime with the specified number of minutes subtracted:::return->plusMinutes->plusMinutes->plusMinutes
OffsetDateTime#minusSeconds(long):::Returns a copy of this OffsetDateTime with the specified number of seconds subtracted:::return->plusSeconds->plusSeconds->plusSeconds
OffsetDateTime#minusNanos(long):::Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted:::return->plusNanos->plusNanos->plusNanos
OffsetDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::if->TemporalQueries->offset->TemporalQueries->zone->return->getOffset->else->if->TemporalQueries->zoneId->return->else->if->TemporalQueries->localDate->return->toLocalDate->else->if->TemporalQueries->localTime->return->toLocalTime->else->if->TemporalQueries->chronology->return->else->if->TemporalQueries->precision->return->return->query->queryFrom
OffsetDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset, date and time as this object:::return->temporal->toLocalDate->toEpochDay->with->toLocalTime->toNanoOfDay->with->getOffset->getTotalSeconds->with
OffsetDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit:::end->OffsetDateTime->from->if->end->withOffsetSameInstant->return->dateTime->until->return->unit->between
OffsetDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects->requireNonNull->return->formatter->format
OffsetDateTime#atZoneSameInstant(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime ensuring that the result has the same instant:::return->ZonedDateTime->ofInstant
OffsetDateTime#atZoneSimilarLocal(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime trying to keep the same local date and time:::return->ZonedDateTime->ofLocal
OffsetDateTime#toOffsetTime():::Converts this date-time to an OffsetTime:::return->OffsetTime->dateTime->toLocalTime->of
OffsetDateTime#toZonedDateTime():::Converts this date-time to a ZonedDateTime using the offset as the zone ID:::return->ZonedDateTime->of
OffsetDateTime#toInstant():::Converts this date-time to an Instant:::return->dateTime->toInstant
OffsetDateTime#toEpochSecond():::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z:::return->dateTime->toEpochSecond
OffsetDateTime#compareTo(OffsetDateTime):::Compares this date-time to another date-time:::cmp->compareInstant->if->toLocalDateTime->other->toLocalDateTime->compareTo->return
OffsetDateTime#isAfter(OffsetDateTime):::Checks if the instant of this date-time is after that of the specified date-time:::thisEpochSec->toEpochSecond->otherEpochSec->other->toEpochSecond->return->toLocalTime->getNano->other->toLocalTime->getNano
OffsetDateTime#isBefore(OffsetDateTime):::Checks if the instant of this date-time is before that of the specified date-time:::thisEpochSec->toEpochSecond->otherEpochSec->other->toEpochSecond->return->toLocalTime->getNano->other->toLocalTime->getNano
OffsetDateTime#isEqual(OffsetDateTime):::Checks if the instant of this date-time is equal to that of the specified date-time:::return->toEpochSecond->other->toEpochSecond->toLocalTime->getNano->other->toLocalTime->getNano
OffsetDateTime#equals(Object):::Checks if this date-time is equal to another date-time:::if->return->if->other->return->dateTime->equals->offset->equals->return
OffsetDateTime#hashCode():::A hash code for this date-time.:::return->dateTime->hashCode->offset->hashCode
OffsetDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00:::return->dateTime->toString->offset->toString
OffsetDateTime#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
OffsetDateTime#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
OffsetDateTime#writeExternal(ObjectOutput)::: offset date time write external:::dateTime->writeExternal->offset->writeExternal
OffsetDateTime#readExternal(ObjectInput)::: offset date time read external:::dateTime->LocalDateTime->readExternal->offset->ZoneOffset->readExternal->return->OffsetDateTime->of
OffsetTime#now():::Obtains the current time from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
OffsetTime#now(ZoneId):::Obtains the current time from the system clock in the specified time-zone:::return->Clock->system->now
OffsetTime#now(Clock):::Obtains the current time from the specified clock:::Objects->requireNonNull->now->clock->instant->return->clock->getZone->getRules->getOffset->ofInstant
OffsetTime#of(LocalTime, ZoneOffset):::Obtains an instance of OffsetTime from a local time and an offset.:::return->new->OffsetTime
OffsetTime#of(int, int, int, int, ZoneOffset):::Obtains an instance of OffsetTime from an hour, minute, second and nanosecond:::return->LocalTime->of->new->OffsetTime
OffsetTime#ofInstant(Instant, ZoneId):::Obtains an instance of OffsetTime from an Instant and zone ID:::Objects->requireNonNull->Objects->requireNonNull->rules->zone->getRules->offset->rules->getOffset->localSecond->instant->getEpochSecond->offset->getTotalSeconds->secsOfDay->Math->floorMod->time->LocalTime->instant->getNano->ofNanoOfDay->return->new->OffsetTime
OffsetTime#from(TemporalAccessor):::Obtains an instance of OffsetTime from a temporal object:::if->return->try->time->LocalTime->from->offset->ZoneOffset->from->return->new->OffsetTime->catch->throw->temporal->getClass->getName->new->DateTimeException->finally
OffsetTime#parse(CharSequence):::Obtains an instance of OffsetTime from a text string such as 10:15:30+01:00:::return->parse
OffsetTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of OffsetTime from a text string using a specific formatter:::Objects->requireNonNull->return->formatter->OffsetTime->from->parse
OffsetTime#with(LocalTime, ZoneOffset):::Returns a new time based on this one, returning this where possible.:::if->equals->return->return->new->OffsetTime
OffsetTime#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->field->isTimeBased->return->field->isSupportedBy
OffsetTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::if->return->unit->isTimeBased->return->unit->isSupportedBy
OffsetTime#range(TemporalField):::Gets the range of valid values for the specified field:::if->if->return->field->range->return->time->range->return->field->rangeRefinedBy
OffsetTime#get(TemporalField):::Gets the value of the specified field from this time as an int:::return->Temporal.super->get
OffsetTime#getLong(TemporalField):::Gets the value of the specified field from this time as a long:::if->if->return->offset->getTotalSeconds->return->time->getLong->return->field->getFrom
OffsetTime#getOffset():::Gets the zone offset, such as '+01:00':::return
OffsetTime#withOffsetSameLocal(ZoneOffset):::Returns a copy of this OffsetTime with the specified offset ensuring that the result has the same local time:::return->offset->equals->new->OffsetTime
OffsetTime#withOffsetSameInstant(ZoneOffset):::Returns a copy of this OffsetTime with the specified offset ensuring that the result is at the same instant on an implied day:::if->offset->equals->return->difference->offset->getTotalSeconds->getTotalSeconds->adjusted->time->plusSeconds->return->new->OffsetTime
OffsetTime#toLocalTime():::Gets the LocalTime part of this date-time:::return
OffsetTime#getHour():::Gets the hour-of-day field.:::return->time->getHour
OffsetTime#getMinute():::Gets the minute-of-hour field.:::return->time->getMinute
OffsetTime#getSecond():::Gets the second-of-minute field.:::return->time->getSecond
OffsetTime#getNano():::Gets the nano-of-second field.:::return->time->getNano
OffsetTime#with(TemporalAdjuster):::Returns an adjusted copy of this time:::if->return->with->else->if->return->with->else->if->return->return->adjuster->adjustInto
OffsetTime#with(TemporalField, long):::Returns a copy of this time with the specified field set to a new value:::if->if->f->return->ZoneOffset->f->checkValidIntValue->ofTotalSeconds->with->return->time->with->with->return->field->adjustInto
OffsetTime#withHour(int):::Returns a copy of this OffsetTime with the hour-of-day altered:::return->time->withHour->with
OffsetTime#withMinute(int):::Returns a copy of this OffsetTime with the minute-of-hour altered:::return->time->withMinute->with
OffsetTime#withSecond(int):::Returns a copy of this OffsetTime with the second-of-minute altered:::return->time->withSecond->with
OffsetTime#withNano(int):::Returns a copy of this OffsetTime with the nano-of-second altered:::return->time->withNano->with
OffsetTime#truncatedTo(TemporalUnit):::Returns a copy of this OffsetTime with the time truncated:::return->time->truncatedTo->with
OffsetTime#plus(TemporalAmount):::Returns a copy of this time with the specified amount added:::return->amountToAdd->addTo
OffsetTime#plus(long, TemporalUnit):::Returns a copy of this time with the specified amount added:::if->return->time->plus->with->return->unit->addTo
OffsetTime#plusHours(long):::Returns a copy of this OffsetTime with the specified number of hours added:::return->time->plusHours->with
OffsetTime#plusMinutes(long):::Returns a copy of this OffsetTime with the specified number of minutes added:::return->time->plusMinutes->with
OffsetTime#plusSeconds(long):::Returns a copy of this OffsetTime with the specified number of seconds added:::return->time->plusSeconds->with
OffsetTime#plusNanos(long):::Returns a copy of this OffsetTime with the specified number of nanoseconds added:::return->time->plusNanos->with
OffsetTime#minus(TemporalAmount):::Returns a copy of this time with the specified amount subtracted:::return->amountToSubtract->subtractFrom
OffsetTime#minus(long, TemporalUnit):::Returns a copy of this time with the specified amount subtracted:::return->plus->plus->plus
OffsetTime#minusHours(long):::Returns a copy of this OffsetTime with the specified number of hours subtracted:::return->time->minusHours->with
OffsetTime#minusMinutes(long):::Returns a copy of this OffsetTime with the specified number of minutes subtracted:::return->time->minusMinutes->with
OffsetTime#minusSeconds(long):::Returns a copy of this OffsetTime with the specified number of seconds subtracted:::return->time->minusSeconds->with
OffsetTime#minusNanos(long):::Returns a copy of this OffsetTime with the specified number of nanoseconds subtracted:::return->time->minusNanos->with
OffsetTime#query(TemporalQuery):::Queries this time using the specified query:::if->TemporalQueries->offset->TemporalQueries->zone->return->else->if->TemporalQueries->zoneId->TemporalQueries->chronology->TemporalQueries->localDate->return->else->if->TemporalQueries->localTime->return->else->if->TemporalQueries->precision->return->return->query->queryFrom
OffsetTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset and time as this object:::return->temporal->time->toNanoOfDay->with->offset->getTotalSeconds->with
OffsetTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another time in terms of the specified unit:::end->OffsetTime->from->if->nanosUntil->end->toEpochNano->toEpochNano->switch->return->return->return->return->return->return->return->throw->new->UnsupportedTemporalTypeException->return->unit->between
OffsetTime#format(DateTimeFormatter):::Formats this time using the specified formatter:::Objects->requireNonNull->return->formatter->format
OffsetTime#atDate(LocalDate):::Combines this time with a date to create an OffsetDateTime:::return->OffsetDateTime->of
OffsetTime#toEpochNano():::Converts this time to epoch nanos based on 1970-01-01Z.:::nod->time->toNanoOfDay->offsetNanos->offset->getTotalSeconds->return
OffsetTime#toEpochSecond(LocalDate):::Converts this OffsetTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z:::Objects->requireNonNull->epochDay->date->toEpochDay->secs->time->toSecondOfDay->offset->getTotalSeconds->return
OffsetTime#compareTo(OffsetTime):::Compares this OffsetTime to another time:::if->offset->equals->return->time->compareTo->compare->Long->toEpochNano->other->toEpochNano->compare->if->time->compareTo->return
OffsetTime#isAfter(OffsetTime):::Checks if the instant of this OffsetTime is after that of the specified time applying both times to a common date:::return->toEpochNano->other->toEpochNano
OffsetTime#isBefore(OffsetTime):::Checks if the instant of this OffsetTime is before that of the specified time applying both times to a common date:::return->toEpochNano->other->toEpochNano
OffsetTime#isEqual(OffsetTime):::Checks if the instant of this OffsetTime is equal to that of the specified time applying both times to a common date:::return->toEpochNano->other->toEpochNano
OffsetTime#equals(Object):::Checks if this time is equal to another time:::if->return->if->other->return->time->equals->offset->equals->return
OffsetTime#hashCode():::A hash code for this time.:::return->time->hashCode->offset->hashCode
OffsetTime#toString():::Outputs this time as a String, such as 10:15:30+01:00:::return->time->toString->offset->toString
OffsetTime#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
OffsetTime#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
OffsetTime#writeExternal(ObjectOutput)::: offset time write external:::time->writeExternal->offset->writeExternal
OffsetTime#readExternal(ObjectInput)::: offset time read external:::time->LocalTime->readExternal->offset->ZoneOffset->readExternal->return->OffsetTime->of
Period#ofYears(int):::Obtains a Period representing a number of years:::return->create
Period#ofMonths(int):::Obtains a Period representing a number of months:::return->create
Period#ofWeeks(int):::Obtains a Period representing a number of weeks:::return->Math->multiplyExact->create
Period#ofDays(int):::Obtains a Period representing a number of days:::return->create
Period#of(int, int, int):::Obtains a Period representing a number of years, months and days:::return->create
Period#from(TemporalAmount):::Obtains an instance of Period from a temporal amount:::if->return->if->if->getChronology->equals->throw->new->DateTimeException->Objects->requireNonNull->years->months->days->foreach->amount->getUnits->unitAmount->amount->get->if->Math->toIntExact->else->if->Math->toIntExact->else->if->Math->toIntExact->else->throw->new->DateTimeException->return->create
Period#parse(CharSequence):::Obtains a Period from a text string such as PnYnMnD:::Objects->requireNonNull->matcher->PATTERN->matcher->if->matcher->matches->negate->matcher->start->matcher->end->charMatch->yearStart->matcher->start->yearEnd->matcher->end->monthStart->matcher->start->monthEnd->matcher->end->weekStart->matcher->start->weekEnd->matcher->end->dayStart->matcher->start->dayEnd->matcher->end->if->try->years->parseNumber->months->parseNumber->weeks->parseNumber->days->parseNumber->Math->Math->multiplyExact->addExact->return->create->catch->throw->new->DateTimeParseException->finally->throw->new->DateTimeParseException
Period#charMatch(CharSequence, int, int, char)::: period char match:::return->text->charAt
Period#parseNumber(CharSequence, int, int, int)::: period parse number:::if->return->val->Integer->parseInt->try->return->Math->multiplyExact->catch->throw->new->DateTimeParseException->finally
Period#between(LocalDate, LocalDate):::Obtains a Period consisting of the number of years, months, and days between two dates:::return->startDateInclusive->until
Period#create(int, int, int):::Creates an instance.:::if->return->return->new->Period
Period#get(TemporalUnit):::Gets the value of the requested unit:::if->return->getYears->else->if->return->getMonths->else->if->return->getDays->else->throw->new->UnsupportedTemporalTypeException
Period#getUnits():::Gets the set of units supported by this period:::return
Period#getChronology():::Gets the chronology of this period, which is the ISO calendar system:::return
Period#isZero():::Checks if all three units of this period are zero:::return
Period#isNegative():::Checks if any of the three units of this period are negative:::return
Period#getYears():::Gets the amount of years of this period:::return
Period#getMonths():::Gets the amount of months of this period:::return
Period#getDays():::Gets the amount of days of this period:::return
Period#withYears(int):::Returns a copy of this period with the specified amount of years:::if->return->return->create
Period#withMonths(int):::Returns a copy of this period with the specified amount of months:::if->return->return->create
Period#withDays(int):::Returns a copy of this period with the specified amount of days:::if->return->return->create
Period#plus(TemporalAmount):::Returns a copy of this period with the specified period added:::isoAmount->Period->from->return->Math->addExact->Math->addExact->Math->addExact->create
Period#plusYears(long):::Returns a copy of this period with the specified years added:::if->return->return->Math->Math->addExact->toIntExact->create
Period#plusMonths(long):::Returns a copy of this period with the specified months added:::if->return->return->Math->Math->addExact->toIntExact->create
Period#plusDays(long):::Returns a copy of this period with the specified days added:::if->return->return->Math->Math->addExact->toIntExact->create
Period#minus(TemporalAmount):::Returns a copy of this period with the specified period subtracted:::isoAmount->Period->from->return->Math->subtractExact->Math->subtractExact->Math->subtractExact->create
Period#minusYears(long):::Returns a copy of this period with the specified years subtracted:::return->plusYears->plusYears->plusYears
Period#minusMonths(long):::Returns a copy of this period with the specified months subtracted:::return->plusMonths->plusMonths->plusMonths
Period#minusDays(long):::Returns a copy of this period with the specified days subtracted:::return->plusDays->plusDays->plusDays
Period#multipliedBy(int):::Returns a new instance with each element in this period multiplied by the specified scalar:::if->return->return->Math->multiplyExact->Math->multiplyExact->Math->multiplyExact->create
Period#negated():::Returns a new instance with each amount in this period negated:::return->multipliedBy
Period#normalized():::Returns a copy of this period with the years and months normalized:::totalMonths->toTotalMonths->splitYears->splitMonths->if->return->return->Math->toIntExact->create
Period#toTotalMonths():::Gets the total number of months in this period:::return
Period#addTo(Temporal):::Adds this period to the specified temporal object:::validateChrono->if->if->temporal->plus->else->totalMonths->toTotalMonths->if->temporal->plus->if->temporal->plus->return
Period#subtractFrom(Temporal):::Subtracts this period from the specified temporal object:::validateChrono->if->if->temporal->minus->else->totalMonths->toTotalMonths->if->temporal->minus->if->temporal->minus->return
Period#validateChrono(TemporalAccessor):::Validates that the temporal has the correct chronology.:::Objects->requireNonNull->temporalChrono->temporal->TemporalQueries->chronology->query->if->equals->throw->temporalChrono->getId->new->DateTimeException
Period#equals(Object):::Checks if this period is equal to another period:::if->return->if->other->return->return
Period#hashCode():::A hash code for this period.:::return->Integer->rotateLeft->Integer->rotateLeft
Period#toString():::Outputs this period as a String, such as P6Y3M1D:::if->return->else->buf->new->StringBuilder->buf->append->if->buf->append->append->if->buf->append->append->if->buf->append->append->return->buf->toString
Period#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
Period#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
Period#writeExternal(DataOutput)::: period write external:::out->writeInt->out->writeInt->out->writeInt
Period#readExternal(DataInput)::: period read external:::years->in->readInt->months->in->readInt->days->in->readInt->return->Period->of
Ser#writeExternal(ObjectOutput):::Implements the Externalizable interface to write the object.:::writeInternal
Ser#writeInternal(byte, Object, ObjectOutput)::: ser write internal:::out->writeByte->switch->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->writeExternal->break->throw->new->InvalidClassException
Ser#readExternal(ObjectInput):::Implements the Externalizable interface to read the object.:::in->readByte->readInternal
Ser#read(ObjectInput)::: ser read:::type->in->readByte->return->readInternal
Ser#readInternal(byte, ObjectInput)::: ser read internal:::switch->return->Duration->readExternal->return->Instant->readExternal->return->LocalDate->readExternal->return->LocalDateTime->readExternal->return->LocalTime->readExternal->return->ZonedDateTime->readExternal->return->ZoneOffset->readExternal->return->ZoneRegion->readExternal->return->OffsetTime->readExternal->return->OffsetDateTime->readExternal->return->Year->readExternal->return->YearMonth->readExternal->return->MonthDay->readExternal->return->Period->readExternal->throw->new->StreamCorruptedException
Ser#readResolve():::Returns the object that will replace this one.:::return
Year#now():::Obtains the current year from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
Year#now(ZoneId):::Obtains the current year from the system clock in the specified time-zone:::return->Clock->system->now
Year#now(Clock):::Obtains the current year from the specified clock:::now->LocalDate->now->return->Year->now->getYear->of
Year#of(int):::Obtains an instance of Year:::YEAR->checkValidValue->return->new->Year
Year#from(TemporalAccessor):::Obtains an instance of Year from a temporal object:::if->return->Objects->requireNonNull->try->if->Chronology->from->equals->LocalDate->from->return->temporal->get->of->catch->throw->temporal->getClass->getName->new->DateTimeException->finally
Year#parse(CharSequence):::Obtains an instance of Year from a text string such as 2007:::return->parse
Year#parse(CharSequence, DateTimeFormatter):::Obtains an instance of Year from a text string using a specific formatter:::Objects->requireNonNull->return->formatter->Year->from->parse
Year#isLeap(long):::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::return
Year#getValue():::Gets the year value:::return
Year#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->return->field->isSupportedBy
Year#isSupported(TemporalUnit):::Checks if the specified unit is supported:::if->return->return->unit->isSupportedBy
Year#range(TemporalField):::Gets the range of valid values for the specified field:::if->return->ValueRange->of->ValueRange->of->return->Temporal.super->range
Year#get(TemporalField):::Gets the value of the specified field from this year as an int:::return->range->getLong->checkValidIntValue
Year#getLong(TemporalField):::Gets the value of the specified field from this year as a long:::if->switch->return->return->return->throw->new->UnsupportedTemporalTypeException->return->field->getFrom
Year#isLeap():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::return->Year->isLeap
Year#isValidMonthDay(MonthDay):::Checks if the month-day is valid for this year:::return->monthDay->isValidYear
Year#length():::Gets the length of this year in days.:::return->isLeap
Year#with(TemporalAdjuster):::Returns an adjusted copy of this year:::return->adjuster->adjustInto
Year#with(TemporalField, long):::Returns a copy of this year with the specified field set to a new value:::if->f->f->checkValidValue->switch->return->Year->of->return->Year->of->return->getLong->Year->of->throw->new->UnsupportedTemporalTypeException->return->field->adjustInto
Year#plus(TemporalAmount):::Returns a copy of this year with the specified amount added:::return->amountToAdd->addTo
Year#plus(long, TemporalUnit):::Returns a copy of this year with the specified amount added:::if->switch->return->plusYears->return->Math->multiplyExact->plusYears->return->Math->multiplyExact->plusYears->return->Math->multiplyExact->plusYears->return->Math->getLong->addExact->with->throw->new->UnsupportedTemporalTypeException->return->unit->addTo
Year#plusYears(long):::Returns a copy of this Year with the specified number of years added:::if->return->return->YEAR->checkValidIntValue->of
Year#minus(TemporalAmount):::Returns a copy of this year with the specified amount subtracted:::return->amountToSubtract->subtractFrom
Year#minus(long, TemporalUnit):::Returns a copy of this year with the specified amount subtracted:::return->plus->plus->plus
Year#minusYears(long):::Returns a copy of this Year with the specified number of years subtracted:::return->plusYears->plusYears->plusYears
Year#query(TemporalQuery):::Queries this year using the specified query:::if->TemporalQueries->chronology->return->else->if->TemporalQueries->precision->return->return->Temporal.super->query
Year#adjustInto(Temporal):::Adjusts the specified temporal object to have this year:::if->Chronology->from->equals->throw->new->DateTimeException->return->temporal->with
Year#until(Temporal, TemporalUnit):::Calculates the amount of time until another year in terms of the specified unit:::end->Year->from->if->yearsUntil->switch->return->return->return->return->return->end->getLong->getLong->throw->new->UnsupportedTemporalTypeException->return->unit->between
Year#format(DateTimeFormatter):::Formats this year using the specified formatter:::Objects->requireNonNull->return->formatter->format
Year#atDay(int):::Combines this year with a day-of-year to create a LocalDate:::return->LocalDate->ofYearDay
Year#atMonth(Month):::Combines this year with a month to create a YearMonth:::return->YearMonth->of
Year#atMonth(int):::Combines this year with a month to create a YearMonth:::return->YearMonth->of
Year#atMonthDay(MonthDay):::Combines this year with a month-day to create a LocalDate:::return->monthDay->atYear
Year#compareTo(Year):::Compares this year to another year:::return
Year#isAfter(Year):::Checks if this year is after the specified year.:::return
Year#isBefore(Year):::Checks if this year is before the specified year.:::return
Year#equals(Object):::Checks if this year is equal to another year:::if->return->if->return->return
Year#hashCode():::A hash code for this year.:::return
Year#toString():::Outputs this year as a String.:::return->Integer->toString
Year#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
Year#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
Year#writeExternal(DataOutput)::: year write external:::out->writeInt
Year#readExternal(DataInput)::: year read external:::return->Year->in->readInt->of
YearMonth#now():::Obtains the current year-month from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
YearMonth#now(ZoneId):::Obtains the current year-month from the system clock in the specified time-zone:::return->Clock->system->now
YearMonth#now(Clock):::Obtains the current year-month from the specified clock:::now->LocalDate->now->return->YearMonth->now->getYear->now->getMonth->of
YearMonth#of(int, Month):::Obtains an instance of YearMonth from a year and month.:::Objects->requireNonNull->return->month->getValue->of
YearMonth#of(int, int):::Obtains an instance of YearMonth from a year and month.:::YEAR->checkValidValue->MONTH_OF_YEAR->checkValidValue->return->new->YearMonth
YearMonth#from(TemporalAccessor):::Obtains an instance of YearMonth from a temporal object:::if->return->Objects->requireNonNull->try->if->Chronology->from->equals->LocalDate->from->return->temporal->get->temporal->get->of->catch->throw->temporal->getClass->getName->new->DateTimeException->finally
YearMonth#parse(CharSequence):::Obtains an instance of YearMonth from a text string such as 2007-12:::return->parse
YearMonth#parse(CharSequence, DateTimeFormatter):::Obtains an instance of YearMonth from a text string using a specific formatter:::Objects->requireNonNull->return->formatter->YearMonth->from->parse
YearMonth#with(int, int):::Returns a copy of this year-month with the new year and month, checking to see if a new object is in fact required.:::if->return->return->new->YearMonth
YearMonth#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->return->field->isSupportedBy
YearMonth#isSupported(TemporalUnit):::Checks if the specified unit is supported:::if->return->return->unit->isSupportedBy
YearMonth#range(TemporalField):::Gets the range of valid values for the specified field:::if->return->getYear->ValueRange->of->ValueRange->of->return->Temporal.super->range
YearMonth#get(TemporalField):::Gets the value of the specified field from this year-month as an int:::return->range->getLong->checkValidIntValue
YearMonth#getLong(TemporalField):::Gets the value of the specified field from this year-month as a long:::if->switch->return->return->getProlepticMonth->return->return->return->throw->new->UnsupportedTemporalTypeException->return->field->getFrom
YearMonth#getProlepticMonth()::: year month get proleptic month:::return
YearMonth#getYear():::Gets the year field:::return
YearMonth#getMonthValue():::Gets the month-of-year field from 1 to 12:::return
YearMonth#getMonth():::Gets the month-of-year field using the Month enum:::return->Month->of
YearMonth#isLeapYear():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::return->isLeapYear
YearMonth#isValidDay(int):::Checks if the day-of-month is valid for this year-month:::return->lengthOfMonth
YearMonth#lengthOfMonth():::Returns the length of the month, taking account of the year:::return->getMonth->isLeapYear->length
YearMonth#lengthOfYear():::Returns the length of the year:::return->isLeapYear
YearMonth#with(TemporalAdjuster):::Returns an adjusted copy of this year-month:::return->adjuster->adjustInto
YearMonth#with(TemporalField, long):::Returns a copy of this year-month with the specified field set to a new value:::if->f->f->checkValidValue->switch->return->withMonth->return->getProlepticMonth->plusMonths->return->withYear->return->withYear->return->getLong->withYear->throw->new->UnsupportedTemporalTypeException->return->field->adjustInto
YearMonth#withYear(int):::Returns a copy of this YearMonth with the year altered:::YEAR->checkValidValue->return->with
YearMonth#withMonth(int):::Returns a copy of this YearMonth with the month-of-year altered:::MONTH_OF_YEAR->checkValidValue->return->with
YearMonth#plus(TemporalAmount):::Returns a copy of this year-month with the specified amount added:::return->amountToAdd->addTo
YearMonth#plus(long, TemporalUnit):::Returns a copy of this year-month with the specified amount added:::if->switch->return->plusMonths->return->plusYears->return->Math->multiplyExact->plusYears->return->Math->multiplyExact->plusYears->return->Math->multiplyExact->plusYears->return->Math->getLong->addExact->with->throw->new->UnsupportedTemporalTypeException->return->unit->addTo
YearMonth#plusYears(long):::Returns a copy of this YearMonth with the specified number of years added:::if->return->newYear->YEAR->checkValidIntValue->return->with
YearMonth#plusMonths(long):::Returns a copy of this YearMonth with the specified number of months added:::if->return->monthCount->calcMonths->newYear->YEAR->Math->floorDiv->checkValidIntValue->newMonth->Math->floorMod->return->with
YearMonth#minus(TemporalAmount):::Returns a copy of this year-month with the specified amount subtracted:::return->amountToSubtract->subtractFrom
YearMonth#minus(long, TemporalUnit):::Returns a copy of this year-month with the specified amount subtracted:::return->plus->plus->plus
YearMonth#minusYears(long):::Returns a copy of this YearMonth with the specified number of years subtracted:::return->plusYears->plusYears->plusYears
YearMonth#minusMonths(long):::Returns a copy of this YearMonth with the specified number of months subtracted:::return->plusMonths->plusMonths->plusMonths
YearMonth#query(TemporalQuery):::Queries this year-month using the specified query:::if->TemporalQueries->chronology->return->else->if->TemporalQueries->precision->return->return->Temporal.super->query
YearMonth#adjustInto(Temporal):::Adjusts the specified temporal object to have this year-month:::if->Chronology->from->equals->throw->new->DateTimeException->return->temporal->getProlepticMonth->with
YearMonth#until(Temporal, TemporalUnit):::Calculates the amount of time until another year-month in terms of the specified unit:::end->YearMonth->from->if->monthsUntil->end->getProlepticMonth->getProlepticMonth->switch->return->return->return->return->return->return->end->getLong->getLong->throw->new->UnsupportedTemporalTypeException->return->unit->between
YearMonth#format(DateTimeFormatter):::Formats this year-month using the specified formatter:::Objects->requireNonNull->return->formatter->format
YearMonth#atDay(int):::Combines this year-month with a day-of-month to create a LocalDate:::return->LocalDate->of
YearMonth#atEndOfMonth():::Returns a LocalDate at the end of the month:::return->LocalDate->lengthOfMonth->of
YearMonth#compareTo(YearMonth):::Compares this year-month to another year-month:::cmp->if->return
YearMonth#isAfter(YearMonth):::Checks if this year-month is after the specified year-month.:::return->compareTo
YearMonth#isBefore(YearMonth):::Checks if this year-month is before the specified year-month.:::return->compareTo
YearMonth#equals(Object):::Checks if this year-month is equal to another year-month:::if->return->if->other->return->return
YearMonth#hashCode():::A hash code for this year-month.:::return
YearMonth#toString():::Outputs this year-month as a String, such as 2007-12:::absYear->Math->abs->buf->new->StringBuilder->if->if->buf->append->deleteCharAt->else->buf->append->deleteCharAt->else->buf->append->return->buf->append->append->toString
YearMonth#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
YearMonth#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
YearMonth#writeExternal(DataOutput)::: year month write external:::out->writeInt->out->writeByte
YearMonth#readExternal(DataInput)::: year month read external:::year->in->readInt->month->in->readByte->return->YearMonth->of
ZonedDateTime#now():::Obtains the current date-time from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
ZonedDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone:::return->Clock->system->now
ZonedDateTime#now(Clock):::Obtains the current date-time from the specified clock:::Objects->requireNonNull->now->clock->instant->return->clock->getZone->ofInstant
ZonedDateTime#of(LocalDate, LocalTime, ZoneId):::Obtains an instance of ZonedDateTime from a local date and time:::return->LocalDateTime->of->of
ZonedDateTime#of(LocalDateTime, ZoneId):::Obtains an instance of ZonedDateTime from a local date-time:::return->ofLocal
ZonedDateTime#of(int, int, int, int, int, int, int, ZoneId):::Obtains an instance of ZonedDateTime from a year, month, day, hour, minute, second, nanosecond and time-zone:::dt->LocalDateTime->of->return->ofLocal
ZonedDateTime#ofLocal(LocalDateTime, ZoneId, ZoneOffset):::Obtains an instance of ZonedDateTime from a local date-time using the preferred offset if possible:::Objects->requireNonNull->Objects->requireNonNull->if->return->new->ZonedDateTime->rules->zone->getRules->validOffsets->rules->getValidOffsets->offset->if->validOffsets->size->validOffsets->get->else->if->validOffsets->size->trans->rules->getTransition->localDateTime->trans->getDuration->getSeconds->plusSeconds->trans->getOffsetAfter->else->if->validOffsets->contains->else->Objects->validOffsets->get->requireNonNull->return->new->ZonedDateTime
ZonedDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of ZonedDateTime from an Instant:::Objects->requireNonNull->Objects->requireNonNull->return->instant->getEpochSecond->instant->getNano->create
ZonedDateTime#ofInstant(LocalDateTime, ZoneOffset, ZoneId):::Obtains an instance of ZonedDateTime from the instant formed by combining the local date-time and offset:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->if->zone->getRules->isValidOffset->return->new->ZonedDateTime->return->localDateTime->toEpochSecond->localDateTime->getNano->create
ZonedDateTime#create(long, int, ZoneId):::Obtains an instance of ZonedDateTime using seconds from the epoch of 1970-01-01T00:00:00Z.:::rules->zone->getRules->instant->Instant->ofEpochSecond->offset->rules->getOffset->ldt->LocalDateTime->ofEpochSecond->return->new->ZonedDateTime
ZonedDateTime#ofStrict(LocalDateTime, ZoneOffset, ZoneId):::Obtains an instance of ZonedDateTime strictly validating the combination of local date-time, offset and zone ID:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->rules->zone->getRules->if->rules->isValidOffset->trans->rules->getTransition->if->trans->isGap->throw->new->DateTimeException->throw->new->DateTimeException->return->new->ZonedDateTime
ZonedDateTime#ofLenient(LocalDateTime, ZoneOffset, ZoneId):::Obtains an instance of ZonedDateTime leniently, for advanced use cases, allowing any combination of local date-time, offset and zone ID:::Objects->requireNonNull->Objects->requireNonNull->Objects->requireNonNull->if->offset->equals->throw->new->IllegalArgumentException->return->new->ZonedDateTime
ZonedDateTime#from(TemporalAccessor):::Obtains an instance of ZonedDateTime from a temporal object:::if->return->try->zone->ZoneId->from->if->temporal->isSupported->epochSecond->temporal->getLong->nanoOfSecond->temporal->get->return->create->else->date->LocalDate->from->time->LocalTime->from->return->of->catch->throw->temporal->getClass->getName->new->DateTimeException->finally
ZonedDateTime#parse(CharSequence):::Obtains an instance of ZonedDateTime from a text string such as 2007-12-03T10:15:30+01:00[Europe/Paris]:::return->parse
ZonedDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of ZonedDateTime from a text string using a specific formatter:::Objects->requireNonNull->return->formatter->ZonedDateTime->from->parse
ZonedDateTime#resolveLocal(LocalDateTime):::Resolves the new local date-time using this zone ID, retaining the offset if possible.:::return->ofLocal
ZonedDateTime#resolveInstant(LocalDateTime):::Resolves the new local date-time using the offset to identify the instant.:::return->ofInstant
ZonedDateTime#resolveOffset(ZoneOffset):::Resolves the offset into this zoned date-time for the with methods:::if->offset->equals->zone->getRules->isValidOffset->return->new->ZonedDateTime->return
ZonedDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::return->field->isSupportedBy
ZonedDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::return->ChronoZonedDateTime.super->isSupported
ZonedDateTime#range(TemporalField):::Gets the range of valid values for the specified field:::if->if->return->field->range->return->dateTime->range->return->field->rangeRefinedBy
ZonedDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int:::if->switch->throw->new->UnsupportedTemporalTypeException->return->getOffset->getTotalSeconds->return->dateTime->get->return->ChronoZonedDateTime.super->get
ZonedDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long:::if->switch->return->toEpochSecond->return->getOffset->getTotalSeconds->return->dateTime->getLong->return->field->getFrom
ZonedDateTime#getOffset():::Gets the zone offset, such as '+01:00':::return
ZonedDateTime#withEarlierOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap:::trans->getZone->getRules->getTransition->if->trans->isOverlap->earlierOffset->trans->getOffsetBefore->if->earlierOffset->equals->return->new->ZonedDateTime->return
ZonedDateTime#withLaterOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap:::trans->getZone->getRules->toLocalDateTime->getTransition->if->laterOffset->trans->getOffsetAfter->if->laterOffset->equals->return->new->ZonedDateTime->return
ZonedDateTime#getZone():::Gets the time-zone, such as 'Europe/Paris':::return
ZonedDateTime#withZoneSameLocal(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible:::Objects->requireNonNull->return->equals->ofLocal
ZonedDateTime#withZoneSameInstant(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the instant:::Objects->requireNonNull->return->equals->dateTime->toEpochSecond->dateTime->getNano->create
ZonedDateTime#withFixedOffsetZone():::Returns a copy of this date-time with the zone ID set to the offset:::return->equals->new->ZonedDateTime
ZonedDateTime#toLocalDateTime():::Gets the LocalDateTime part of this date-time:::return
ZonedDateTime#toLocalDate():::Gets the LocalDate part of this date-time:::return->dateTime->toLocalDate
ZonedDateTime#getYear():::Gets the year field:::return->dateTime->getYear
ZonedDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12:::return->dateTime->getMonthValue
ZonedDateTime#getMonth():::Gets the month-of-year field using the Month enum:::return->dateTime->getMonth
ZonedDateTime#getDayOfMonth():::Gets the day-of-month field:::return->dateTime->getDayOfMonth
ZonedDateTime#getDayOfYear():::Gets the day-of-year field:::return->dateTime->getDayOfYear
ZonedDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek:::return->dateTime->getDayOfWeek
ZonedDateTime#toLocalTime():::Gets the LocalTime part of this date-time:::return->dateTime->toLocalTime
ZonedDateTime#getHour():::Gets the hour-of-day field.:::return->dateTime->getHour
ZonedDateTime#getMinute():::Gets the minute-of-hour field.:::return->dateTime->getMinute
ZonedDateTime#getSecond():::Gets the second-of-minute field.:::return->dateTime->getSecond
ZonedDateTime#getNano():::Gets the nano-of-second field.:::return->dateTime->getNano
ZonedDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time:::if->return->LocalDateTime->dateTime->toLocalTime->of->resolveLocal->else->if->return->LocalDateTime->dateTime->toLocalDate->of->resolveLocal->else->if->return->resolveLocal->else->if->odt->return->odt->toLocalDateTime->odt->getOffset->ofLocal->else->if->instant->return->instant->getEpochSecond->instant->getNano->create->else->if->return->resolveOffset->return->adjuster->adjustInto
ZonedDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value:::if->f->switch->return->getNano->create->offset->ZoneOffset->f->checkValidIntValue->ofTotalSeconds->return->resolveOffset->return->dateTime->with->resolveLocal->return->field->adjustInto
ZonedDateTime#withYear(int):::Returns a copy of this ZonedDateTime with the year altered:::return->dateTime->withYear->resolveLocal
ZonedDateTime#withMonth(int):::Returns a copy of this ZonedDateTime with the month-of-year altered:::return->dateTime->withMonth->resolveLocal
ZonedDateTime#withDayOfMonth(int):::Returns a copy of this ZonedDateTime with the day-of-month altered:::return->dateTime->withDayOfMonth->resolveLocal
ZonedDateTime#withDayOfYear(int):::Returns a copy of this ZonedDateTime with the day-of-year altered:::return->dateTime->withDayOfYear->resolveLocal
ZonedDateTime#withHour(int):::Returns a copy of this ZonedDateTime with the hour-of-day altered:::return->dateTime->withHour->resolveLocal
ZonedDateTime#withMinute(int):::Returns a copy of this ZonedDateTime with the minute-of-hour altered:::return->dateTime->withMinute->resolveLocal
ZonedDateTime#withSecond(int):::Returns a copy of this ZonedDateTime with the second-of-minute altered:::return->dateTime->withSecond->resolveLocal
ZonedDateTime#withNano(int):::Returns a copy of this ZonedDateTime with the nano-of-second altered:::return->dateTime->withNano->resolveLocal
ZonedDateTime#truncatedTo(TemporalUnit):::Returns a copy of this ZonedDateTime with the time truncated:::return->dateTime->truncatedTo->resolveLocal
ZonedDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added:::if->periodToAdd->return->dateTime->plus->resolveLocal->Objects->requireNonNull->return->amountToAdd->addTo
ZonedDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added:::if->if->unit->isDateBased->return->dateTime->plus->resolveLocal->else->return->dateTime->plus->resolveInstant->return->unit->addTo
ZonedDateTime#plusYears(long):::Returns a copy of this ZonedDateTime with the specified number of years added:::return->dateTime->plusYears->resolveLocal
ZonedDateTime#plusMonths(long):::Returns a copy of this ZonedDateTime with the specified number of months added:::return->dateTime->plusMonths->resolveLocal
ZonedDateTime#plusWeeks(long):::Returns a copy of this ZonedDateTime with the specified number of weeks added:::return->dateTime->plusWeeks->resolveLocal
ZonedDateTime#plusDays(long):::Returns a copy of this ZonedDateTime with the specified number of days added:::return->dateTime->plusDays->resolveLocal
ZonedDateTime#plusHours(long):::Returns a copy of this ZonedDateTime with the specified number of hours added:::return->dateTime->plusHours->resolveInstant
ZonedDateTime#plusMinutes(long):::Returns a copy of this ZonedDateTime with the specified number of minutes added:::return->dateTime->plusMinutes->resolveInstant
ZonedDateTime#plusSeconds(long):::Returns a copy of this ZonedDateTime with the specified number of seconds added:::return->dateTime->plusSeconds->resolveInstant
ZonedDateTime#plusNanos(long):::Returns a copy of this ZonedDateTime with the specified number of nanoseconds added:::return->dateTime->plusNanos->resolveInstant
ZonedDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted:::if->periodToSubtract->return->dateTime->minus->resolveLocal->Objects->requireNonNull->return->amountToSubtract->subtractFrom
ZonedDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted:::return->plus->plus->plus
ZonedDateTime#minusYears(long):::Returns a copy of this ZonedDateTime with the specified number of years subtracted:::return->plusYears->plusYears->plusYears
ZonedDateTime#minusMonths(long):::Returns a copy of this ZonedDateTime with the specified number of months subtracted:::return->plusMonths->plusMonths->plusMonths
ZonedDateTime#minusWeeks(long):::Returns a copy of this ZonedDateTime with the specified number of weeks subtracted:::return->plusWeeks->plusWeeks->plusWeeks
ZonedDateTime#minusDays(long):::Returns a copy of this ZonedDateTime with the specified number of days subtracted:::return->plusDays->plusDays->plusDays
ZonedDateTime#minusHours(long):::Returns a copy of this ZonedDateTime with the specified number of hours subtracted:::return->plusHours->plusHours->plusHours
ZonedDateTime#minusMinutes(long):::Returns a copy of this ZonedDateTime with the specified number of minutes subtracted:::return->plusMinutes->plusMinutes->plusMinutes
ZonedDateTime#minusSeconds(long):::Returns a copy of this ZonedDateTime with the specified number of seconds subtracted:::return->plusSeconds->plusSeconds->plusSeconds
ZonedDateTime#minusNanos(long):::Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted:::return->plusNanos->plusNanos->plusNanos
ZonedDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::if->TemporalQueries->localDate->return->toLocalDate->return->ChronoZonedDateTime.super->query
ZonedDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit:::end->ZonedDateTime->from->if->end->withZoneSameInstant->if->unit->isDateBased->return->dateTime->until->else->return->toOffsetDateTime->end->toOffsetDateTime->until->return->unit->between
ZonedDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects->requireNonNull->return->formatter->format
ZonedDateTime#toOffsetDateTime():::Converts this date-time to an OffsetDateTime:::return->OffsetDateTime->of
ZonedDateTime#equals(Object):::Checks if this date-time is equal to another date-time:::if->return->if->other->return->dateTime->equals->offset->equals->zone->equals->return
ZonedDateTime#hashCode():::A hash code for this date-time.:::return->dateTime->hashCode->offset->hashCode->Integer->zone->hashCode->rotateLeft
ZonedDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00[Europe/Paris]:::str->dateTime->toString->offset->toString->if->zone->toString->return
ZonedDateTime#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
ZonedDateTime#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
ZonedDateTime#writeExternal(DataOutput)::: zoned date time write external:::dateTime->writeExternal->offset->writeExternal->zone->write
ZonedDateTime#readExternal(ObjectInput)::: zoned date time read external:::dateTime->LocalDateTime->readExternal->offset->ZoneOffset->readExternal->zone->Ser->read->return->ZonedDateTime->ofLenient
ZoneId#systemDefault():::Gets the system default time-zone:::return->TimeZone->getDefault->toZoneId
ZoneId#getAvailableZoneIds():::Gets the set of available zone IDs:::return->ZoneRulesProvider->getAvailableZoneIds->new->HashSet<String>
ZoneId#of(String, Map):::Obtains an instance of ZoneId using its ID using a map of aliases to supplement the standard zone IDs:::Objects->requireNonNull->Objects->requireNonNull->id->Objects->aliasMap->get->requireNonNullElse->return->of
ZoneId#of(String):::Obtains an instance of ZoneId from an ID ensuring that the ID is valid and available for use:::return->of
ZoneId#ofOffset(String, ZoneOffset):::Obtains an instance of ZoneId wrapping an offset:::Objects->requireNonNull->Objects->requireNonNull->if->prefix->length->return->if->prefix->equals->prefix->equals->prefix->equals->throw->new->IllegalArgumentException->if->offset->getTotalSeconds->prefix->offset->getId->concat->return->offset->getRules->new->ZoneRegion
ZoneId#of(String, boolean):::Parses the ID, taking a flag to indicate whether ZoneRulesException should be thrown or not, used in deserialization.:::Objects->requireNonNull->if->zoneId->length->zoneId->startsWith->zoneId->startsWith->return->ZoneOffset->of->else->if->zoneId->startsWith->zoneId->startsWith->return->ofWithPrefix->else->if->zoneId->startsWith->return->ofWithPrefix->return->ZoneRegion->ofId
ZoneId#ofWithPrefix(String, int, boolean):::Parse once a prefix is established.:::prefix->zoneId->substring->if->zoneId->length->return->ofOffset->if->zoneId->charAt->zoneId->charAt->return->ZoneRegion->ofId->try->offset->ZoneOffset->zoneId->substring->of->if->return->ofOffset->return->ofOffset->catch->throw->new->DateTimeException->finally
ZoneId#from(TemporalAccessor):::Obtains an instance of ZoneId from a temporal object:::obj->temporal->TemporalQueries->zone->query->if->throw->temporal->getClass->getName->new->DateTimeException->return
ZoneId#getId():::Gets the unique time-zone ID:::
ZoneId#getDisplayName(TextStyle, Locale):::Gets the textual representation of the zone, such as 'British Time' or '+02:00':::return->new->DateTimeFormatterBuilder->appendZoneText->toFormatter->toTemporal->format
ZoneId#toTemporal():::Converts this zone to a TemporalAccessor:::return->new->TemporalAccessor
ZoneId#getRules():::Gets the time-zone rules for this ID allowing calculations to be performed:::
ZoneId#normalized():::Normalizes the time-zone ID, returning a ZoneOffset where possible:::try->rules->getRules->if->rules->isFixedOffset->return->rules->getOffset->catch->finally->return
ZoneId#equals(Object):::Checks if this time-zone ID is equal to another time-zone ID:::if->return->if->other->return->getId->other->getId->equals->return
ZoneId#hashCode():::A hash code for this time-zone ID.:::return->getId->hashCode
ZoneId#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
ZoneId#toString():::Outputs this zone as a String, using the ID.:::return->getId
ZoneId#writeReplace()::: zone id write replace:::return->new->Ser
ZoneId#write(DataOutput)::: zone id write:::
ZoneOffset#of(String):::Obtains an instance of ZoneOffset using the ID:::Objects->requireNonNull->offset->ID_CACHE->get->if->return->hours->minutes->seconds->switch->offsetId->length->offsetId->charAt->offsetId->charAt->parseNumber->break->parseNumber->parseNumber->break->parseNumber->parseNumber->break->parseNumber->parseNumber->parseNumber->break->parseNumber->parseNumber->parseNumber->break->throw->new->DateTimeException->first->offsetId->charAt->if->throw->new->DateTimeException->if->return->ofHoursMinutesSeconds->else->return->ofHoursMinutesSeconds
ZoneOffset#parseNumber(CharSequence, int, boolean):::Parse a two digit zero-prefixed number.:::if->offsetId->charAt->throw->new->DateTimeException->ch1->offsetId->charAt->ch2->offsetId->charAt->if->throw->new->DateTimeException->return
ZoneOffset#ofHours(int):::Obtains an instance of ZoneOffset using an offset in hours.:::return->ofHoursMinutesSeconds
ZoneOffset#ofHoursMinutes(int, int):::Obtains an instance of ZoneOffset using an offset in hours and minutes:::return->ofHoursMinutesSeconds
ZoneOffset#ofHoursMinutesSeconds(int, int, int):::Obtains an instance of ZoneOffset using an offset in hours, minutes and seconds:::validate->totalSeconds->totalSeconds->return->ofTotalSeconds
ZoneOffset#from(TemporalAccessor):::Obtains an instance of ZoneOffset from a temporal object:::Objects->requireNonNull->offset->temporal->TemporalQueries->offset->query->if->throw->temporal->getClass->getName->new->DateTimeException->return
ZoneOffset#validate(int, int, int):::Validates the offset fields.:::if->throw->new->DateTimeException->if->if->throw->new->DateTimeException->else->if->if->throw->new->DateTimeException->else->if->throw->new->DateTimeException->if->throw->new->DateTimeException->if->throw->new->DateTimeException->if->Math->abs->throw->new->DateTimeException
ZoneOffset#totalSeconds(int, int, int):::Calculates the total offset in seconds.:::return
ZoneOffset#ofTotalSeconds(int):::Obtains an instance of ZoneOffset specifying the total offset in seconds  The offset must be in the range -18:00 to +18:00, which corresponds to -64800 to +64800.:::if->throw->new->DateTimeException->if->totalSecs->result->SECONDS_CACHE->get->if->new->ZoneOffset->SECONDS_CACHE->putIfAbsent->SECONDS_CACHE->get->ID_CACHE->result->getId->putIfAbsent->return->else->return->new->ZoneOffset
ZoneOffset#buildId(int)::: zone offset build id:::if->return->else->absTotalSeconds->Math->abs->buf->new->StringBuilder->absHours->absMinutes->buf->append->append->append->append->append->absSeconds->if->buf->append->append->return->buf->toString
ZoneOffset#getTotalSeconds():::Gets the total zone offset in seconds:::return
ZoneOffset#getId():::Gets the normalized zone offset ID:::return
ZoneOffset#getRules():::Gets the associated time-zone rules:::return->ZoneRules->of
ZoneOffset#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->return->field->isSupportedBy
ZoneOffset#range(TemporalField):::Gets the range of valid values for the specified field:::return->TemporalAccessor.super->range
ZoneOffset#get(TemporalField):::Gets the value of the specified field from this offset as an int:::if->return->else->if->throw->new->UnsupportedTemporalTypeException->return->range->getLong->checkValidIntValue
ZoneOffset#getLong(TemporalField):::Gets the value of the specified field from this offset as a long:::if->return->else->if->throw->new->UnsupportedTemporalTypeException->return->field->getFrom
ZoneOffset#query(TemporalQuery):::Queries this offset using the specified query:::if->TemporalQueries->offset->TemporalQueries->zone->return->return->TemporalAccessor.super->query
ZoneOffset#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset as this object:::return->temporal->with
ZoneOffset#compareTo(ZoneOffset):::Compares this offset to another offset in descending order:::return
ZoneOffset#equals(Object):::Checks if this offset is equal to another offset:::if->return->if->return->return
ZoneOffset#hashCode():::A hash code for this offset.:::return
ZoneOffset#toString():::Outputs this offset as a String, using the normalized ID.:::return
ZoneOffset#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
ZoneOffset#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
ZoneOffset#write(DataOutput)::: zone offset write:::out->writeByte->writeExternal
ZoneOffset#writeExternal(DataOutput)::: zone offset write external:::offsetSecs->offsetByte->out->writeByte->if->out->writeInt
ZoneOffset#readExternal(DataInput)::: zone offset read external:::offsetByte->in->readByte->return->ZoneOffset->in->readInt->ofTotalSeconds->ZoneOffset->ofTotalSeconds
ZoneRegion#ofId(String, boolean):::Obtains an instance of ZoneId from an identifier.:::Objects->requireNonNull->checkName->rules->try->ZoneRulesProvider->getRules->catch->if->throw->finally->return->new->ZoneRegion
ZoneRegion#checkName(String):::Checks that the given string is a legal ZondId name.:::n->zoneId->length->if->throw->new->DateTimeException->for->i
ZoneRegion#getId()::: zone region get id:::return
ZoneRegion#getRules()::: zone region get rules:::return->ZoneRulesProvider->getRules
ZoneRegion#writeReplace():::Writes the object using a dedicated serialized form.:::return->new->Ser
ZoneRegion#readObject(ObjectInputStream):::Defend against malicious streams.:::throw->new->InvalidObjectException
ZoneRegion#write(DataOutput)::: zone region write:::out->writeByte->writeExternal
ZoneRegion#writeExternal(DataOutput)::: zone region write external:::out->writeUTF
ZoneRegion#readExternal(DataInput)::: zone region read external:::id->in->readUTF->return->ZoneId->of

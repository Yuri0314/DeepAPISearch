Clock#systemUTC():::Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the UTC time-zone
Clock#systemDefaultZone():::Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone
Clock#system(ZoneId):::Obtains a clock that returns the current instant using the best available system clock
Clock#tickMillis(ZoneId):::Obtains a clock that returns the current instant ticking in whole milliseconds using the best available system clock
Clock#tickSeconds(ZoneId):::Obtains a clock that returns the current instant ticking in whole seconds using the best available system clock
Clock#tickMinutes(ZoneId):::Obtains a clock that returns the current instant ticking in whole minutes using the best available system clock
Clock#tick(Clock, Duration):::Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration
Clock#fixed(Instant, ZoneId):::Obtains a clock that always returns the same instant
Clock#offset(Clock, Duration):::Obtains a clock that returns instants from the specified clock with the specified duration added  This clock wraps another clock, returning instants that are later by the specified duration
Clock#getZone():::Gets the time-zone being used to create dates and times
Clock#withZone(ZoneId):::Returns a copy of this clock with a different time-zone
Clock#millis():::Gets the current millisecond instant of the clock
Clock#instant():::Gets the current instant of the clock
Clock#equals(Object):::Checks if this clock is equal to another clock
Clock#hashCode():::A hash code for this clock
Duration#ofDays(long):::Obtains a Duration representing a number of standard 24 hour days
Duration#ofHours(long):::Obtains a Duration representing a number of standard hours
Duration#ofMinutes(long):::Obtains a Duration representing a number of standard minutes
Duration#ofSeconds(long):::Obtains a Duration representing a number of seconds
Duration#ofSeconds(long, long):::Obtains a Duration representing a number of seconds and an adjustment in nanoseconds
Duration#ofMillis(long):::Obtains a Duration representing a number of milliseconds
Duration#ofNanos(long):::Obtains a Duration representing a number of nanoseconds
Duration#of(long, TemporalUnit):::Obtains a Duration representing an amount in the specified unit
Duration#from(TemporalAmount):::Obtains an instance of Duration from a temporal amount
Duration#parse(CharSequence):::Obtains a Duration from a text string such as PnDTnHnMn.nS
Duration#between(Temporal, Temporal):::Obtains a Duration representing the duration between two temporal objects
Duration#get(TemporalUnit):::Gets the value of the requested unit
Duration#getUnits():::Gets the set of units supported by this duration
Duration#isZero():::Checks if this duration is zero length
Duration#isNegative():::Checks if this duration is negative, excluding zero
Duration#getSeconds():::Gets the number of seconds in this duration
Duration#getNano():::Gets the number of nanoseconds within the second in this duration
Duration#withSeconds(long):::Returns a copy of this duration with the specified amount of seconds
Duration#withNanos(int):::Returns a copy of this duration with the specified nano-of-second
Duration#plus(Duration):::Returns a copy of this duration with the specified duration added
Duration#plus(long, TemporalUnit):::Returns a copy of this duration with the specified duration added
Duration#plusDays(long):::Returns a copy of this duration with the specified duration in standard 24 hour days added
Duration#plusHours(long):::Returns a copy of this duration with the specified duration in hours added
Duration#plusMinutes(long):::Returns a copy of this duration with the specified duration in minutes added
Duration#plusSeconds(long):::Returns a copy of this duration with the specified duration in seconds added
Duration#plusMillis(long):::Returns a copy of this duration with the specified duration in milliseconds added
Duration#plusNanos(long):::Returns a copy of this duration with the specified duration in nanoseconds added
Duration#minus(Duration):::Returns a copy of this duration with the specified duration subtracted
Duration#minus(long, TemporalUnit):::Returns a copy of this duration with the specified duration subtracted
Duration#minusDays(long):::Returns a copy of this duration with the specified duration in standard 24 hour days subtracted
Duration#minusHours(long):::Returns a copy of this duration with the specified duration in hours subtracted
Duration#minusMinutes(long):::Returns a copy of this duration with the specified duration in minutes subtracted
Duration#minusSeconds(long):::Returns a copy of this duration with the specified duration in seconds subtracted
Duration#minusMillis(long):::Returns a copy of this duration with the specified duration in milliseconds subtracted
Duration#minusNanos(long):::Returns a copy of this duration with the specified duration in nanoseconds subtracted
Duration#multipliedBy(long):::Returns a copy of this duration multiplied by the scalar
Duration#dividedBy(long):::Returns a copy of this duration divided by the specified value
Duration#dividedBy(Duration):::Returns number of whole times a specified Duration occurs within this Duration
Duration#negated():::Returns a copy of this duration with the length negated
Duration#abs():::Returns a copy of this duration with a positive length
Duration#addTo(Temporal):::Adds this duration to the specified temporal object
Duration#subtractFrom(Temporal):::Subtracts this duration from the specified temporal object
Duration#toDays():::Gets the number of days in this duration
Duration#toHours():::Gets the number of hours in this duration
Duration#toMinutes():::Gets the number of minutes in this duration
Duration#toSeconds():::Gets the number of seconds in this duration
Duration#toMillis():::Converts this duration to the total length in milliseconds
Duration#toNanos():::Converts this duration to the total length in nanoseconds expressed as a long
Duration#toDaysPart():::Extracts the number of days in the duration
Duration#toHoursPart():::Extracts the number of hours part in the duration
Duration#toMinutesPart():::Extracts the number of minutes part in the duration
Duration#toSecondsPart():::Extracts the number of seconds part in the duration
Duration#toMillisPart():::Extracts the number of milliseconds part of the duration
Duration#toNanosPart():::Get the nanoseconds part within seconds of the duration
Duration#truncatedTo(TemporalUnit):::Returns a copy of this Duration truncated to the specified unit
Duration#compareTo(Duration):::Compares this duration to the specified Duration
Duration#equals(Object):::Checks if this duration is equal to the specified Duration
Duration#hashCode():::A hash code for this duration.
Duration#toString():::A string representation of this duration using ISO-8601 seconds based representation, such as PT8H6M12.345S
Instant#now():::Obtains the current instant from the system clock
Instant#now(Clock):::Obtains the current instant from the specified clock
Instant#ofEpochSecond(long):::Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z
Instant#ofEpochSecond(long, long):::Obtains an instance of Instant using seconds from the epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second
Instant#ofEpochMilli(long):::Obtains an instance of Instant using milliseconds from the epoch of 1970-01-01T00:00:00Z
Instant#from(TemporalAccessor):::Obtains an instance of Instant from a temporal object
Instant#parse(CharSequence):::Obtains an instance of Instant from a text string such as 2007-12-03T10:15:30.00Z
Instant#isSupported(TemporalField):::Checks if the specified field is supported
Instant#isSupported(TemporalUnit):::Checks if the specified unit is supported
Instant#range(TemporalField):::Gets the range of valid values for the specified field
Instant#get(TemporalField):::Gets the value of the specified field from this instant as an int
Instant#getLong(TemporalField):::Gets the value of the specified field from this instant as a long
Instant#getEpochSecond():::Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z
Instant#getNano():::Gets the number of nanoseconds, later along the time-line, from the start of the second
Instant#with(TemporalAdjuster):::Returns an adjusted copy of this instant
Instant#with(TemporalField, long):::Returns a copy of this instant with the specified field set to a new value
Instant#truncatedTo(TemporalUnit):::Returns a copy of this Instant truncated to the specified unit
Instant#plus(TemporalAmount):::Returns a copy of this instant with the specified amount added
Instant#plus(long, TemporalUnit):::Returns a copy of this instant with the specified amount added
Instant#plusSeconds(long):::Returns a copy of this instant with the specified duration in seconds added
Instant#plusMillis(long):::Returns a copy of this instant with the specified duration in milliseconds added
Instant#plusNanos(long):::Returns a copy of this instant with the specified duration in nanoseconds added
Instant#minus(TemporalAmount):::Returns a copy of this instant with the specified amount subtracted
Instant#minus(long, TemporalUnit):::Returns a copy of this instant with the specified amount subtracted
Instant#minusSeconds(long):::Returns a copy of this instant with the specified duration in seconds subtracted
Instant#minusMillis(long):::Returns a copy of this instant with the specified duration in milliseconds subtracted
Instant#minusNanos(long):::Returns a copy of this instant with the specified duration in nanoseconds subtracted
Instant#query(TemporalQuery):::Queries this instant using the specified query
Instant#adjustInto(Temporal):::Adjusts the specified temporal object to have this instant
Instant#until(Temporal, TemporalUnit):::Calculates the amount of time until another instant in terms of the specified unit
Instant#atOffset(ZoneOffset):::Combines this instant with an offset to create an OffsetDateTime
Instant#atZone(ZoneId):::Combines this instant with a time-zone to create a ZonedDateTime
Instant#toEpochMilli():::Converts this instant to the number of milliseconds from the epoch of 1970-01-01T00:00:00Z
Instant#compareTo(Instant):::Compares this instant to the specified instant
Instant#isAfter(Instant):::Checks if this instant is after the specified instant
Instant#isBefore(Instant):::Checks if this instant is before the specified instant
Instant#equals(Object):::Checks if this instant is equal to the specified instant
Instant#hashCode():::Returns a hash code for this instant.
Instant#toString():::A string representation of this instant using ISO-8601 representation
LocalDate#now():::Obtains the current date from the system clock in the default time-zone
LocalDate#now(ZoneId):::Obtains the current date from the system clock in the specified time-zone
LocalDate#now(Clock):::Obtains the current date from the specified clock
LocalDate#of(int, Month, int):::Obtains an instance of LocalDate from a year, month and day
LocalDate#of(int, int, int):::Obtains an instance of LocalDate from a year, month and day
LocalDate#ofYearDay(int, int):::Obtains an instance of LocalDate from a year and day-of-year
LocalDate#ofInstant(Instant, ZoneId):::Obtains an instance of LocalDate from an Instant and zone ID
LocalDate#ofEpochDay(long):::Obtains an instance of LocalDate from the epoch day count
LocalDate#from(TemporalAccessor):::Obtains an instance of LocalDate from a temporal object
LocalDate#parse(CharSequence):::Obtains an instance of LocalDate from a text string such as 2007-12-03
LocalDate#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalDate from a text string using a specific formatter
LocalDate#isSupported(TemporalField):::Checks if the specified field is supported
LocalDate#isSupported(TemporalUnit):::Checks if the specified unit is supported
LocalDate#range(TemporalField):::Gets the range of valid values for the specified field
LocalDate#get(TemporalField):::Gets the value of the specified field from this date as an int
LocalDate#getLong(TemporalField):::Gets the value of the specified field from this date as a long
LocalDate#getChronology():::Gets the chronology of this date, which is the ISO calendar system
LocalDate#getEra():::Gets the era applicable at this date
LocalDate#getYear():::Gets the year field
LocalDate#getMonthValue():::Gets the month-of-year field from 1 to 12
LocalDate#getMonth():::Gets the month-of-year field using the Month enum
LocalDate#getDayOfMonth():::Gets the day-of-month field
LocalDate#getDayOfYear():::Gets the day-of-year field
LocalDate#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek
LocalDate#isLeapYear():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
LocalDate#lengthOfMonth():::Returns the length of the month represented by this date
LocalDate#lengthOfYear():::Returns the length of the year represented by this date
LocalDate#with(TemporalAdjuster):::Returns an adjusted copy of this date
LocalDate#with(TemporalField, long):::Returns a copy of this date with the specified field set to a new value
LocalDate#withYear(int):::Returns a copy of this LocalDate with the year altered
LocalDate#withMonth(int):::Returns a copy of this LocalDate with the month-of-year altered
LocalDate#withDayOfMonth(int):::Returns a copy of this LocalDate with the day-of-month altered
LocalDate#withDayOfYear(int):::Returns a copy of this LocalDate with the day-of-year altered
LocalDate#plus(TemporalAmount):::Returns a copy of this date with the specified amount added
LocalDate#plus(long, TemporalUnit):::Returns a copy of this date with the specified amount added
LocalDate#plusYears(long):::Returns a copy of this LocalDate with the specified number of years added
LocalDate#plusMonths(long):::Returns a copy of this LocalDate with the specified number of months added
LocalDate#plusWeeks(long):::Returns a copy of this LocalDate with the specified number of weeks added
LocalDate#plusDays(long):::Returns a copy of this LocalDate with the specified number of days added
LocalDate#minus(TemporalAmount):::Returns a copy of this date with the specified amount subtracted
LocalDate#minus(long, TemporalUnit):::Returns a copy of this date with the specified amount subtracted
LocalDate#minusYears(long):::Returns a copy of this LocalDate with the specified number of years subtracted
LocalDate#minusMonths(long):::Returns a copy of this LocalDate with the specified number of months subtracted
LocalDate#minusWeeks(long):::Returns a copy of this LocalDate with the specified number of weeks subtracted
LocalDate#minusDays(long):::Returns a copy of this LocalDate with the specified number of days subtracted
LocalDate#query(TemporalQuery):::Queries this date using the specified query
LocalDate#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date as this object
LocalDate#until(Temporal, TemporalUnit):::Calculates the amount of time until another date in terms of the specified unit
LocalDate#until(ChronoLocalDate):::Calculates the period between this date and another date as a Period
LocalDate#datesUntil(LocalDate):::Returns a sequential ordered stream of dates
LocalDate#datesUntil(LocalDate, Period):::Returns a sequential ordered stream of dates by given incremental step
LocalDate#format(DateTimeFormatter):::Formats this date using the specified formatter
LocalDate#atTime(LocalTime):::Combines this date with a time to create a LocalDateTime
LocalDate#atTime(int, int):::Combines this date with a time to create a LocalDateTime
LocalDate#atTime(int, int, int):::Combines this date with a time to create a LocalDateTime
LocalDate#atTime(int, int, int, int):::Combines this date with a time to create a LocalDateTime
LocalDate#atTime(OffsetTime):::Combines this date with an offset time to create an OffsetDateTime
LocalDate#atStartOfDay():::Combines this date with the time of midnight to create a LocalDateTime at the start of this date
LocalDate#atStartOfDay(ZoneId):::Returns a zoned date-time from this date at the earliest valid time according to the rules in the time-zone
LocalDate#toEpochSecond(LocalTime, ZoneOffset):::Converts this LocalDate to the number of seconds since the epoch of 1970-01-01T00:00:00Z
LocalDate#compareTo(ChronoLocalDate):::Compares this date to another date
LocalDate#isAfter(ChronoLocalDate):::Checks if this date is after the specified date
LocalDate#isBefore(ChronoLocalDate):::Checks if this date is before the specified date
LocalDate#isEqual(ChronoLocalDate):::Checks if this date is equal to the specified date
LocalDate#equals(Object):::Checks if this date is equal to another date
LocalDate#hashCode():::A hash code for this date.
LocalDate#toString():::Outputs this date as a String, such as 2007-12-03
LocalDateTime#now():::Obtains the current date-time from the system clock in the default time-zone
LocalDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone
LocalDateTime#now(Clock):::Obtains the current date-time from the specified clock
LocalDateTime#of(int, Month, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero
LocalDateTime#of(int, Month, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero
LocalDateTime#of(int, Month, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond
LocalDateTime#of(int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero
LocalDateTime#of(int, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero
LocalDateTime#of(int, int, int, int, int, int, int):::Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond
LocalDateTime#of(LocalDate, LocalTime):::Obtains an instance of LocalDateTime from a date and time.
LocalDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of LocalDateTime from an Instant and zone ID
LocalDateTime#ofEpochSecond(long, int, ZoneOffset):::Obtains an instance of LocalDateTime using seconds from the epoch of 1970-01-01T00:00:00Z
LocalDateTime#from(TemporalAccessor):::Obtains an instance of LocalDateTime from a temporal object
LocalDateTime#parse(CharSequence):::Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30
LocalDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalDateTime from a text string using a specific formatter
LocalDateTime#isSupported(TemporalField):::Checks if the specified field is supported
LocalDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
LocalDateTime#range(TemporalField):::Gets the range of valid values for the specified field
LocalDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int
LocalDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long
LocalDateTime#toLocalDate():::Gets the LocalDate part of this date-time
LocalDateTime#getYear():::Gets the year field
LocalDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12
LocalDateTime#getMonth():::Gets the month-of-year field using the Month enum
LocalDateTime#getDayOfMonth():::Gets the day-of-month field
LocalDateTime#getDayOfYear():::Gets the day-of-year field
LocalDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek
LocalDateTime#toLocalTime():::Gets the LocalTime part of this date-time
LocalDateTime#getHour():::Gets the hour-of-day field.
LocalDateTime#getMinute():::Gets the minute-of-hour field.
LocalDateTime#getSecond():::Gets the second-of-minute field.
LocalDateTime#getNano():::Gets the nano-of-second field.
LocalDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time
LocalDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value
LocalDateTime#withYear(int):::Returns a copy of this LocalDateTime with the year altered
LocalDateTime#withMonth(int):::Returns a copy of this LocalDateTime with the month-of-year altered
LocalDateTime#withDayOfMonth(int):::Returns a copy of this LocalDateTime with the day-of-month altered
LocalDateTime#withDayOfYear(int):::Returns a copy of this LocalDateTime with the day-of-year altered
LocalDateTime#withHour(int):::Returns a copy of this LocalDateTime with the hour-of-day altered
LocalDateTime#withMinute(int):::Returns a copy of this LocalDateTime with the minute-of-hour altered
LocalDateTime#withSecond(int):::Returns a copy of this LocalDateTime with the second-of-minute altered
LocalDateTime#withNano(int):::Returns a copy of this LocalDateTime with the nano-of-second altered
LocalDateTime#truncatedTo(TemporalUnit):::Returns a copy of this LocalDateTime with the time truncated
LocalDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added
LocalDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added
LocalDateTime#plusYears(long):::Returns a copy of this LocalDateTime with the specified number of years added
LocalDateTime#plusMonths(long):::Returns a copy of this LocalDateTime with the specified number of months added
LocalDateTime#plusWeeks(long):::Returns a copy of this LocalDateTime with the specified number of weeks added
LocalDateTime#plusDays(long):::Returns a copy of this LocalDateTime with the specified number of days added
LocalDateTime#plusHours(long):::Returns a copy of this LocalDateTime with the specified number of hours added
LocalDateTime#plusMinutes(long):::Returns a copy of this LocalDateTime with the specified number of minutes added
LocalDateTime#plusSeconds(long):::Returns a copy of this LocalDateTime with the specified number of seconds added
LocalDateTime#plusNanos(long):::Returns a copy of this LocalDateTime with the specified number of nanoseconds added
LocalDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted
LocalDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted
LocalDateTime#minusYears(long):::Returns a copy of this LocalDateTime with the specified number of years subtracted
LocalDateTime#minusMonths(long):::Returns a copy of this LocalDateTime with the specified number of months subtracted
LocalDateTime#minusWeeks(long):::Returns a copy of this LocalDateTime with the specified number of weeks subtracted
LocalDateTime#minusDays(long):::Returns a copy of this LocalDateTime with the specified number of days subtracted
LocalDateTime#minusHours(long):::Returns a copy of this LocalDateTime with the specified number of hours subtracted
LocalDateTime#minusMinutes(long):::Returns a copy of this LocalDateTime with the specified number of minutes subtracted
LocalDateTime#minusSeconds(long):::Returns a copy of this LocalDateTime with the specified number of seconds subtracted
LocalDateTime#minusNanos(long):::Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted
LocalDateTime#query(TemporalQuery):::Queries this date-time using the specified query
LocalDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date and time as this object
LocalDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit
LocalDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter
LocalDateTime#atOffset(ZoneOffset):::Combines this date-time with an offset to create an OffsetDateTime
LocalDateTime#atZone(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime
LocalDateTime#compareTo(ChronoLocalDateTime):::Compares this date-time to another date-time
LocalDateTime#isAfter(ChronoLocalDateTime):::Checks if this date-time is after the specified date-time
LocalDateTime#isBefore(ChronoLocalDateTime):::Checks if this date-time is before the specified date-time
LocalDateTime#isEqual(ChronoLocalDateTime):::Checks if this date-time is equal to the specified date-time
LocalDateTime#equals(Object):::Checks if this date-time is equal to another date-time
LocalDateTime#hashCode():::A hash code for this date-time.
LocalDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30
LocalTime#now():::Obtains the current time from the system clock in the default time-zone
LocalTime#now(ZoneId):::Obtains the current time from the system clock in the specified time-zone
LocalTime#now(Clock):::Obtains the current time from the specified clock
LocalTime#of(int, int):::Obtains an instance of LocalTime from an hour and minute
LocalTime#of(int, int, int):::Obtains an instance of LocalTime from an hour, minute and second
LocalTime#of(int, int, int, int):::Obtains an instance of LocalTime from an hour, minute, second and nanosecond
LocalTime#ofInstant(Instant, ZoneId):::Obtains an instance of LocalTime from an Instant and zone ID
LocalTime#ofSecondOfDay(long):::Obtains an instance of LocalTime from a second-of-day value
LocalTime#ofNanoOfDay(long):::Obtains an instance of LocalTime from a nanos-of-day value
LocalTime#from(TemporalAccessor):::Obtains an instance of LocalTime from a temporal object
LocalTime#parse(CharSequence):::Obtains an instance of LocalTime from a text string such as 10:15
LocalTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of LocalTime from a text string using a specific formatter
LocalTime#isSupported(TemporalField):::Checks if the specified field is supported
LocalTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
LocalTime#range(TemporalField):::Gets the range of valid values for the specified field
LocalTime#get(TemporalField):::Gets the value of the specified field from this time as an int
LocalTime#getLong(TemporalField):::Gets the value of the specified field from this time as a long
LocalTime#getHour():::Gets the hour-of-day field.
LocalTime#getMinute():::Gets the minute-of-hour field.
LocalTime#getSecond():::Gets the second-of-minute field.
LocalTime#getNano():::Gets the nano-of-second field.
LocalTime#with(TemporalAdjuster):::Returns an adjusted copy of this time
LocalTime#with(TemporalField, long):::Returns a copy of this time with the specified field set to a new value
LocalTime#withHour(int):::Returns a copy of this LocalTime with the hour-of-day altered
LocalTime#withMinute(int):::Returns a copy of this LocalTime with the minute-of-hour altered
LocalTime#withSecond(int):::Returns a copy of this LocalTime with the second-of-minute altered
LocalTime#withNano(int):::Returns a copy of this LocalTime with the nano-of-second altered
LocalTime#truncatedTo(TemporalUnit):::Returns a copy of this LocalTime with the time truncated
LocalTime#plus(TemporalAmount):::Returns a copy of this time with the specified amount added
LocalTime#plus(long, TemporalUnit):::Returns a copy of this time with the specified amount added
LocalTime#plusHours(long):::Returns a copy of this LocalTime with the specified number of hours added
LocalTime#plusMinutes(long):::Returns a copy of this LocalTime with the specified number of minutes added
LocalTime#plusSeconds(long):::Returns a copy of this LocalTime with the specified number of seconds added
LocalTime#plusNanos(long):::Returns a copy of this LocalTime with the specified number of nanoseconds added
LocalTime#minus(TemporalAmount):::Returns a copy of this time with the specified amount subtracted
LocalTime#minus(long, TemporalUnit):::Returns a copy of this time with the specified amount subtracted
LocalTime#minusHours(long):::Returns a copy of this LocalTime with the specified number of hours subtracted
LocalTime#minusMinutes(long):::Returns a copy of this LocalTime with the specified number of minutes subtracted
LocalTime#minusSeconds(long):::Returns a copy of this LocalTime with the specified number of seconds subtracted
LocalTime#minusNanos(long):::Returns a copy of this LocalTime with the specified number of nanoseconds subtracted
LocalTime#query(TemporalQuery):::Queries this time using the specified query
LocalTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same time as this object
LocalTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another time in terms of the specified unit
LocalTime#format(DateTimeFormatter):::Formats this time using the specified formatter
LocalTime#atDate(LocalDate):::Combines this time with a date to create a LocalDateTime
LocalTime#atOffset(ZoneOffset):::Combines this time with an offset to create an OffsetTime
LocalTime#toSecondOfDay():::Extracts the time as seconds of day, from 0 to 24 * 60 * 60 - 1.
LocalTime#toNanoOfDay():::Extracts the time as nanos of day, from 0 to 24 * 60 * 60 * 1,000,000,000 - 1.
LocalTime#toEpochSecond(LocalDate, ZoneOffset):::Converts this LocalTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z
LocalTime#compareTo(LocalTime):::Compares this time to another time
LocalTime#isAfter(LocalTime):::Checks if this time is after the specified time
LocalTime#isBefore(LocalTime):::Checks if this time is before the specified time
LocalTime#equals(Object):::Checks if this time is equal to another time
LocalTime#hashCode():::A hash code for this time.
LocalTime#toString():::Outputs this time as a String, such as 10:15
MonthDay#now():::Obtains the current month-day from the system clock in the default time-zone
MonthDay#now(ZoneId):::Obtains the current month-day from the system clock in the specified time-zone
MonthDay#now(Clock):::Obtains the current month-day from the specified clock
MonthDay#of(Month, int):::Obtains an instance of MonthDay
MonthDay#of(int, int):::Obtains an instance of MonthDay
MonthDay#from(TemporalAccessor):::Obtains an instance of MonthDay from a temporal object
MonthDay#parse(CharSequence):::Obtains an instance of MonthDay from a text string such as --12-03
MonthDay#parse(CharSequence, DateTimeFormatter):::Obtains an instance of MonthDay from a text string using a specific formatter
MonthDay#isSupported(TemporalField):::Checks if the specified field is supported
MonthDay#range(TemporalField):::Gets the range of valid values for the specified field
MonthDay#get(TemporalField):::Gets the value of the specified field from this month-day as an int
MonthDay#getLong(TemporalField):::Gets the value of the specified field from this month-day as a long
MonthDay#getMonthValue():::Gets the month-of-year field from 1 to 12
MonthDay#getMonth():::Gets the month-of-year field using the Month enum
MonthDay#getDayOfMonth():::Gets the day-of-month field
MonthDay#isValidYear(int):::Checks if the year is valid for this month-day
MonthDay#withMonth(int):::Returns a copy of this MonthDay with the month-of-year altered
MonthDay#with(Month):::Returns a copy of this MonthDay with the month-of-year altered
MonthDay#withDayOfMonth(int):::Returns a copy of this MonthDay with the day-of-month altered
MonthDay#query(TemporalQuery):::Queries this month-day using the specified query
MonthDay#adjustInto(Temporal):::Adjusts the specified temporal object to have this month-day
MonthDay#format(DateTimeFormatter):::Formats this month-day using the specified formatter
MonthDay#atYear(int):::Combines this month-day with a year to create a LocalDate
MonthDay#compareTo(MonthDay):::Compares this month-day to another month-day
MonthDay#isAfter(MonthDay):::Checks if this month-day is after the specified month-day.
MonthDay#isBefore(MonthDay):::Checks if this month-day is before the specified month-day.
MonthDay#equals(Object):::Checks if this month-day is equal to another month-day
MonthDay#hashCode():::A hash code for this month-day.
MonthDay#toString():::Outputs this month-day as a String, such as --12-03
OffsetDateTime#timeLineOrder():::Gets a comparator that compares two OffsetDateTime instances based solely on the instant
OffsetDateTime#now():::Obtains the current date-time from the system clock in the default time-zone
OffsetDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone
OffsetDateTime#now(Clock):::Obtains the current date-time from the specified clock
OffsetDateTime#of(LocalDate, LocalTime, ZoneOffset):::Obtains an instance of OffsetDateTime from a date, time and offset
OffsetDateTime#of(LocalDateTime, ZoneOffset):::Obtains an instance of OffsetDateTime from a date-time and offset
OffsetDateTime#of(int, int, int, int, int, int, int, ZoneOffset):::Obtains an instance of OffsetDateTime from a year, month, day, hour, minute, second, nanosecond and offset
OffsetDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of OffsetDateTime from an Instant and zone ID
OffsetDateTime#from(TemporalAccessor):::Obtains an instance of OffsetDateTime from a temporal object
OffsetDateTime#parse(CharSequence):::Obtains an instance of OffsetDateTime from a text string such as 2007-12-03T10:15:30+01:00
OffsetDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of OffsetDateTime from a text string using a specific formatter
OffsetDateTime#isSupported(TemporalField):::Checks if the specified field is supported
OffsetDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
OffsetDateTime#range(TemporalField):::Gets the range of valid values for the specified field
OffsetDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int
OffsetDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long
OffsetDateTime#getOffset():::Gets the zone offset, such as '+01:00'
OffsetDateTime#withOffsetSameLocal(ZoneOffset):::Returns a copy of this OffsetDateTime with the specified offset ensuring that the result has the same local date-time
OffsetDateTime#withOffsetSameInstant(ZoneOffset):::Returns a copy of this OffsetDateTime with the specified offset ensuring that the result is at the same instant
OffsetDateTime#toLocalDateTime():::Gets the LocalDateTime part of this date-time
OffsetDateTime#toLocalDate():::Gets the LocalDate part of this date-time
OffsetDateTime#getYear():::Gets the year field
OffsetDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12
OffsetDateTime#getMonth():::Gets the month-of-year field using the Month enum
OffsetDateTime#getDayOfMonth():::Gets the day-of-month field
OffsetDateTime#getDayOfYear():::Gets the day-of-year field
OffsetDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek
OffsetDateTime#toLocalTime():::Gets the LocalTime part of this date-time
OffsetDateTime#getHour():::Gets the hour-of-day field.
OffsetDateTime#getMinute():::Gets the minute-of-hour field.
OffsetDateTime#getSecond():::Gets the second-of-minute field.
OffsetDateTime#getNano():::Gets the nano-of-second field.
OffsetDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time
OffsetDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value
OffsetDateTime#withYear(int):::Returns a copy of this OffsetDateTime with the year altered
OffsetDateTime#withMonth(int):::Returns a copy of this OffsetDateTime with the month-of-year altered
OffsetDateTime#withDayOfMonth(int):::Returns a copy of this OffsetDateTime with the day-of-month altered
OffsetDateTime#withDayOfYear(int):::Returns a copy of this OffsetDateTime with the day-of-year altered
OffsetDateTime#withHour(int):::Returns a copy of this OffsetDateTime with the hour-of-day altered
OffsetDateTime#withMinute(int):::Returns a copy of this OffsetDateTime with the minute-of-hour altered
OffsetDateTime#withSecond(int):::Returns a copy of this OffsetDateTime with the second-of-minute altered
OffsetDateTime#withNano(int):::Returns a copy of this OffsetDateTime with the nano-of-second altered
OffsetDateTime#truncatedTo(TemporalUnit):::Returns a copy of this OffsetDateTime with the time truncated
OffsetDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added
OffsetDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added
OffsetDateTime#plusYears(long):::Returns a copy of this OffsetDateTime with the specified number of years added
OffsetDateTime#plusMonths(long):::Returns a copy of this OffsetDateTime with the specified number of months added
OffsetDateTime#plusWeeks(long):::Returns a copy of this OffsetDateTime with the specified number of weeks added
OffsetDateTime#plusDays(long):::Returns a copy of this OffsetDateTime with the specified number of days added
OffsetDateTime#plusHours(long):::Returns a copy of this OffsetDateTime with the specified number of hours added
OffsetDateTime#plusMinutes(long):::Returns a copy of this OffsetDateTime with the specified number of minutes added
OffsetDateTime#plusSeconds(long):::Returns a copy of this OffsetDateTime with the specified number of seconds added
OffsetDateTime#plusNanos(long):::Returns a copy of this OffsetDateTime with the specified number of nanoseconds added
OffsetDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted
OffsetDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted
OffsetDateTime#minusYears(long):::Returns a copy of this OffsetDateTime with the specified number of years subtracted
OffsetDateTime#minusMonths(long):::Returns a copy of this OffsetDateTime with the specified number of months subtracted
OffsetDateTime#minusWeeks(long):::Returns a copy of this OffsetDateTime with the specified number of weeks subtracted
OffsetDateTime#minusDays(long):::Returns a copy of this OffsetDateTime with the specified number of days subtracted
OffsetDateTime#minusHours(long):::Returns a copy of this OffsetDateTime with the specified number of hours subtracted
OffsetDateTime#minusMinutes(long):::Returns a copy of this OffsetDateTime with the specified number of minutes subtracted
OffsetDateTime#minusSeconds(long):::Returns a copy of this OffsetDateTime with the specified number of seconds subtracted
OffsetDateTime#minusNanos(long):::Returns a copy of this OffsetDateTime with the specified number of nanoseconds subtracted
OffsetDateTime#query(TemporalQuery):::Queries this date-time using the specified query
OffsetDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset, date and time as this object
OffsetDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit
OffsetDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter
OffsetDateTime#atZoneSameInstant(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime ensuring that the result has the same instant
OffsetDateTime#atZoneSimilarLocal(ZoneId):::Combines this date-time with a time-zone to create a ZonedDateTime trying to keep the same local date and time
OffsetDateTime#toOffsetTime():::Converts this date-time to an OffsetTime
OffsetDateTime#toZonedDateTime():::Converts this date-time to a ZonedDateTime using the offset as the zone ID
OffsetDateTime#toInstant():::Converts this date-time to an Instant
OffsetDateTime#toEpochSecond():::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
OffsetDateTime#compareTo(OffsetDateTime):::Compares this date-time to another date-time
OffsetDateTime#isAfter(OffsetDateTime):::Checks if the instant of this date-time is after that of the specified date-time
OffsetDateTime#isBefore(OffsetDateTime):::Checks if the instant of this date-time is before that of the specified date-time
OffsetDateTime#isEqual(OffsetDateTime):::Checks if the instant of this date-time is equal to that of the specified date-time
OffsetDateTime#equals(Object):::Checks if this date-time is equal to another date-time
OffsetDateTime#hashCode():::A hash code for this date-time.
OffsetDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00
OffsetTime#now():::Obtains the current time from the system clock in the default time-zone
OffsetTime#now(ZoneId):::Obtains the current time from the system clock in the specified time-zone
OffsetTime#now(Clock):::Obtains the current time from the specified clock
OffsetTime#of(LocalTime, ZoneOffset):::Obtains an instance of OffsetTime from a local time and an offset.
OffsetTime#of(int, int, int, int, ZoneOffset):::Obtains an instance of OffsetTime from an hour, minute, second and nanosecond
OffsetTime#ofInstant(Instant, ZoneId):::Obtains an instance of OffsetTime from an Instant and zone ID
OffsetTime#from(TemporalAccessor):::Obtains an instance of OffsetTime from a temporal object
OffsetTime#parse(CharSequence):::Obtains an instance of OffsetTime from a text string such as 10:15:30+01:00
OffsetTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of OffsetTime from a text string using a specific formatter
OffsetTime#isSupported(TemporalField):::Checks if the specified field is supported
OffsetTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
OffsetTime#range(TemporalField):::Gets the range of valid values for the specified field
OffsetTime#get(TemporalField):::Gets the value of the specified field from this time as an int
OffsetTime#getLong(TemporalField):::Gets the value of the specified field from this time as a long
OffsetTime#getOffset():::Gets the zone offset, such as '+01:00'
OffsetTime#withOffsetSameLocal(ZoneOffset):::Returns a copy of this OffsetTime with the specified offset ensuring that the result has the same local time
OffsetTime#withOffsetSameInstant(ZoneOffset):::Returns a copy of this OffsetTime with the specified offset ensuring that the result is at the same instant on an implied day
OffsetTime#toLocalTime():::Gets the LocalTime part of this date-time
OffsetTime#getHour():::Gets the hour-of-day field.
OffsetTime#getMinute():::Gets the minute-of-hour field.
OffsetTime#getSecond():::Gets the second-of-minute field.
OffsetTime#getNano():::Gets the nano-of-second field.
OffsetTime#with(TemporalAdjuster):::Returns an adjusted copy of this time
OffsetTime#with(TemporalField, long):::Returns a copy of this time with the specified field set to a new value
OffsetTime#withHour(int):::Returns a copy of this OffsetTime with the hour-of-day altered
OffsetTime#withMinute(int):::Returns a copy of this OffsetTime with the minute-of-hour altered
OffsetTime#withSecond(int):::Returns a copy of this OffsetTime with the second-of-minute altered
OffsetTime#withNano(int):::Returns a copy of this OffsetTime with the nano-of-second altered
OffsetTime#truncatedTo(TemporalUnit):::Returns a copy of this OffsetTime with the time truncated
OffsetTime#plus(TemporalAmount):::Returns a copy of this time with the specified amount added
OffsetTime#plus(long, TemporalUnit):::Returns a copy of this time with the specified amount added
OffsetTime#plusHours(long):::Returns a copy of this OffsetTime with the specified number of hours added
OffsetTime#plusMinutes(long):::Returns a copy of this OffsetTime with the specified number of minutes added
OffsetTime#plusSeconds(long):::Returns a copy of this OffsetTime with the specified number of seconds added
OffsetTime#plusNanos(long):::Returns a copy of this OffsetTime with the specified number of nanoseconds added
OffsetTime#minus(TemporalAmount):::Returns a copy of this time with the specified amount subtracted
OffsetTime#minus(long, TemporalUnit):::Returns a copy of this time with the specified amount subtracted
OffsetTime#minusHours(long):::Returns a copy of this OffsetTime with the specified number of hours subtracted
OffsetTime#minusMinutes(long):::Returns a copy of this OffsetTime with the specified number of minutes subtracted
OffsetTime#minusSeconds(long):::Returns a copy of this OffsetTime with the specified number of seconds subtracted
OffsetTime#minusNanos(long):::Returns a copy of this OffsetTime with the specified number of nanoseconds subtracted
OffsetTime#query(TemporalQuery):::Queries this time using the specified query
OffsetTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset and time as this object
OffsetTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another time in terms of the specified unit
OffsetTime#format(DateTimeFormatter):::Formats this time using the specified formatter
OffsetTime#atDate(LocalDate):::Combines this time with a date to create an OffsetDateTime
OffsetTime#toEpochSecond(LocalDate):::Converts this OffsetTime to the number of seconds since the epoch of 1970-01-01T00:00:00Z
OffsetTime#compareTo(OffsetTime):::Compares this OffsetTime to another time
OffsetTime#isAfter(OffsetTime):::Checks if the instant of this OffsetTime is after that of the specified time applying both times to a common date
OffsetTime#isBefore(OffsetTime):::Checks if the instant of this OffsetTime is before that of the specified time applying both times to a common date
OffsetTime#isEqual(OffsetTime):::Checks if the instant of this OffsetTime is equal to that of the specified time applying both times to a common date
OffsetTime#equals(Object):::Checks if this time is equal to another time
OffsetTime#hashCode():::A hash code for this time.
OffsetTime#toString():::Outputs this time as a String, such as 10:15:30+01:00
Period#ofYears(int):::Obtains a Period representing a number of years
Period#ofMonths(int):::Obtains a Period representing a number of months
Period#ofWeeks(int):::Obtains a Period representing a number of weeks
Period#ofDays(int):::Obtains a Period representing a number of days
Period#of(int, int, int):::Obtains a Period representing a number of years, months and days
Period#from(TemporalAmount):::Obtains an instance of Period from a temporal amount
Period#parse(CharSequence):::Obtains a Period from a text string such as PnYnMnD
Period#between(LocalDate, LocalDate):::Obtains a Period consisting of the number of years, months, and days between two dates
Period#get(TemporalUnit):::Gets the value of the requested unit
Period#getUnits():::Gets the set of units supported by this period
Period#getChronology():::Gets the chronology of this period, which is the ISO calendar system
Period#isZero():::Checks if all three units of this period are zero
Period#isNegative():::Checks if any of the three units of this period are negative
Period#getYears():::Gets the amount of years of this period
Period#getMonths():::Gets the amount of months of this period
Period#getDays():::Gets the amount of days of this period
Period#withYears(int):::Returns a copy of this period with the specified amount of years
Period#withMonths(int):::Returns a copy of this period with the specified amount of months
Period#withDays(int):::Returns a copy of this period with the specified amount of days
Period#plus(TemporalAmount):::Returns a copy of this period with the specified period added
Period#plusYears(long):::Returns a copy of this period with the specified years added
Period#plusMonths(long):::Returns a copy of this period with the specified months added
Period#plusDays(long):::Returns a copy of this period with the specified days added
Period#minus(TemporalAmount):::Returns a copy of this period with the specified period subtracted
Period#minusYears(long):::Returns a copy of this period with the specified years subtracted
Period#minusMonths(long):::Returns a copy of this period with the specified months subtracted
Period#minusDays(long):::Returns a copy of this period with the specified days subtracted
Period#multipliedBy(int):::Returns a new instance with each element in this period multiplied by the specified scalar
Period#negated():::Returns a new instance with each amount in this period negated
Period#normalized():::Returns a copy of this period with the years and months normalized
Period#toTotalMonths():::Gets the total number of months in this period
Period#addTo(Temporal):::Adds this period to the specified temporal object
Period#subtractFrom(Temporal):::Subtracts this period from the specified temporal object
Period#equals(Object):::Checks if this period is equal to another period
Period#hashCode():::A hash code for this period.
Period#toString():::Outputs this period as a String, such as P6Y3M1D
Ser#writeExternal(ObjectOutput):::Implements the Externalizable interface to write the object.
Ser#readExternal(ObjectInput):::Implements the Externalizable interface to read the object.
Year#now():::Obtains the current year from the system clock in the default time-zone
Year#now(ZoneId):::Obtains the current year from the system clock in the specified time-zone
Year#now(Clock):::Obtains the current year from the specified clock
Year#of(int):::Obtains an instance of Year
Year#from(TemporalAccessor):::Obtains an instance of Year from a temporal object
Year#parse(CharSequence):::Obtains an instance of Year from a text string such as 2007
Year#parse(CharSequence, DateTimeFormatter):::Obtains an instance of Year from a text string using a specific formatter
Year#isLeap(long):::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
Year#getValue():::Gets the year value
Year#isSupported(TemporalField):::Checks if the specified field is supported
Year#isSupported(TemporalUnit):::Checks if the specified unit is supported
Year#range(TemporalField):::Gets the range of valid values for the specified field
Year#get(TemporalField):::Gets the value of the specified field from this year as an int
Year#getLong(TemporalField):::Gets the value of the specified field from this year as a long
Year#isLeap():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
Year#isValidMonthDay(MonthDay):::Checks if the month-day is valid for this year
Year#length():::Gets the length of this year in days.
Year#with(TemporalAdjuster):::Returns an adjusted copy of this year
Year#with(TemporalField, long):::Returns a copy of this year with the specified field set to a new value
Year#plus(TemporalAmount):::Returns a copy of this year with the specified amount added
Year#plus(long, TemporalUnit):::Returns a copy of this year with the specified amount added
Year#plusYears(long):::Returns a copy of this Year with the specified number of years added
Year#minus(TemporalAmount):::Returns a copy of this year with the specified amount subtracted
Year#minus(long, TemporalUnit):::Returns a copy of this year with the specified amount subtracted
Year#minusYears(long):::Returns a copy of this Year with the specified number of years subtracted
Year#query(TemporalQuery):::Queries this year using the specified query
Year#adjustInto(Temporal):::Adjusts the specified temporal object to have this year
Year#until(Temporal, TemporalUnit):::Calculates the amount of time until another year in terms of the specified unit
Year#format(DateTimeFormatter):::Formats this year using the specified formatter
Year#atDay(int):::Combines this year with a day-of-year to create a LocalDate
Year#atMonth(Month):::Combines this year with a month to create a YearMonth
Year#atMonth(int):::Combines this year with a month to create a YearMonth
Year#atMonthDay(MonthDay):::Combines this year with a month-day to create a LocalDate
Year#compareTo(Year):::Compares this year to another year
Year#isAfter(Year):::Checks if this year is after the specified year.
Year#isBefore(Year):::Checks if this year is before the specified year.
Year#equals(Object):::Checks if this year is equal to another year
Year#hashCode():::A hash code for this year.
Year#toString():::Outputs this year as a String.
YearMonth#now():::Obtains the current year-month from the system clock in the default time-zone
YearMonth#now(ZoneId):::Obtains the current year-month from the system clock in the specified time-zone
YearMonth#now(Clock):::Obtains the current year-month from the specified clock
YearMonth#of(int, Month):::Obtains an instance of YearMonth from a year and month.
YearMonth#of(int, int):::Obtains an instance of YearMonth from a year and month.
YearMonth#from(TemporalAccessor):::Obtains an instance of YearMonth from a temporal object
YearMonth#parse(CharSequence):::Obtains an instance of YearMonth from a text string such as 2007-12
YearMonth#parse(CharSequence, DateTimeFormatter):::Obtains an instance of YearMonth from a text string using a specific formatter
YearMonth#isSupported(TemporalField):::Checks if the specified field is supported
YearMonth#isSupported(TemporalUnit):::Checks if the specified unit is supported
YearMonth#range(TemporalField):::Gets the range of valid values for the specified field
YearMonth#get(TemporalField):::Gets the value of the specified field from this year-month as an int
YearMonth#getLong(TemporalField):::Gets the value of the specified field from this year-month as a long
YearMonth#getYear():::Gets the year field
YearMonth#getMonthValue():::Gets the month-of-year field from 1 to 12
YearMonth#getMonth():::Gets the month-of-year field using the Month enum
YearMonth#isLeapYear():::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
YearMonth#isValidDay(int):::Checks if the day-of-month is valid for this year-month
YearMonth#lengthOfMonth():::Returns the length of the month, taking account of the year
YearMonth#lengthOfYear():::Returns the length of the year
YearMonth#with(TemporalAdjuster):::Returns an adjusted copy of this year-month
YearMonth#with(TemporalField, long):::Returns a copy of this year-month with the specified field set to a new value
YearMonth#withYear(int):::Returns a copy of this YearMonth with the year altered
YearMonth#withMonth(int):::Returns a copy of this YearMonth with the month-of-year altered
YearMonth#plus(TemporalAmount):::Returns a copy of this year-month with the specified amount added
YearMonth#plus(long, TemporalUnit):::Returns a copy of this year-month with the specified amount added
YearMonth#plusYears(long):::Returns a copy of this YearMonth with the specified number of years added
YearMonth#plusMonths(long):::Returns a copy of this YearMonth with the specified number of months added
YearMonth#minus(TemporalAmount):::Returns a copy of this year-month with the specified amount subtracted
YearMonth#minus(long, TemporalUnit):::Returns a copy of this year-month with the specified amount subtracted
YearMonth#minusYears(long):::Returns a copy of this YearMonth with the specified number of years subtracted
YearMonth#minusMonths(long):::Returns a copy of this YearMonth with the specified number of months subtracted
YearMonth#query(TemporalQuery):::Queries this year-month using the specified query
YearMonth#adjustInto(Temporal):::Adjusts the specified temporal object to have this year-month
YearMonth#until(Temporal, TemporalUnit):::Calculates the amount of time until another year-month in terms of the specified unit
YearMonth#format(DateTimeFormatter):::Formats this year-month using the specified formatter
YearMonth#atDay(int):::Combines this year-month with a day-of-month to create a LocalDate
YearMonth#atEndOfMonth():::Returns a LocalDate at the end of the month
YearMonth#compareTo(YearMonth):::Compares this year-month to another year-month
YearMonth#isAfter(YearMonth):::Checks if this year-month is after the specified year-month.
YearMonth#isBefore(YearMonth):::Checks if this year-month is before the specified year-month.
YearMonth#equals(Object):::Checks if this year-month is equal to another year-month
YearMonth#hashCode():::A hash code for this year-month.
YearMonth#toString():::Outputs this year-month as a String, such as 2007-12
ZonedDateTime#now():::Obtains the current date-time from the system clock in the default time-zone
ZonedDateTime#now(ZoneId):::Obtains the current date-time from the system clock in the specified time-zone
ZonedDateTime#now(Clock):::Obtains the current date-time from the specified clock
ZonedDateTime#of(LocalDate, LocalTime, ZoneId):::Obtains an instance of ZonedDateTime from a local date and time
ZonedDateTime#of(LocalDateTime, ZoneId):::Obtains an instance of ZonedDateTime from a local date-time
ZonedDateTime#of(int, int, int, int, int, int, int, ZoneId):::Obtains an instance of ZonedDateTime from a year, month, day, hour, minute, second, nanosecond and time-zone
ZonedDateTime#ofLocal(LocalDateTime, ZoneId, ZoneOffset):::Obtains an instance of ZonedDateTime from a local date-time using the preferred offset if possible
ZonedDateTime#ofInstant(Instant, ZoneId):::Obtains an instance of ZonedDateTime from an Instant
ZonedDateTime#ofInstant(LocalDateTime, ZoneOffset, ZoneId):::Obtains an instance of ZonedDateTime from the instant formed by combining the local date-time and offset
ZonedDateTime#ofStrict(LocalDateTime, ZoneOffset, ZoneId):::Obtains an instance of ZonedDateTime strictly validating the combination of local date-time, offset and zone ID
ZonedDateTime#from(TemporalAccessor):::Obtains an instance of ZonedDateTime from a temporal object
ZonedDateTime#parse(CharSequence):::Obtains an instance of ZonedDateTime from a text string such as 2007-12-03T10:15:30+01:00[Europe/Paris]
ZonedDateTime#parse(CharSequence, DateTimeFormatter):::Obtains an instance of ZonedDateTime from a text string using a specific formatter
ZonedDateTime#isSupported(TemporalField):::Checks if the specified field is supported
ZonedDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported
ZonedDateTime#range(TemporalField):::Gets the range of valid values for the specified field
ZonedDateTime#get(TemporalField):::Gets the value of the specified field from this date-time as an int
ZonedDateTime#getLong(TemporalField):::Gets the value of the specified field from this date-time as a long
ZonedDateTime#getOffset():::Gets the zone offset, such as '+01:00'
ZonedDateTime#withEarlierOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap
ZonedDateTime#withLaterOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap
ZonedDateTime#getZone():::Gets the time-zone, such as 'Europe/Paris'
ZonedDateTime#withZoneSameLocal(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible
ZonedDateTime#withZoneSameInstant(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the instant
ZonedDateTime#withFixedOffsetZone():::Returns a copy of this date-time with the zone ID set to the offset
ZonedDateTime#toLocalDateTime():::Gets the LocalDateTime part of this date-time
ZonedDateTime#toLocalDate():::Gets the LocalDate part of this date-time
ZonedDateTime#getYear():::Gets the year field
ZonedDateTime#getMonthValue():::Gets the month-of-year field from 1 to 12
ZonedDateTime#getMonth():::Gets the month-of-year field using the Month enum
ZonedDateTime#getDayOfMonth():::Gets the day-of-month field
ZonedDateTime#getDayOfYear():::Gets the day-of-year field
ZonedDateTime#getDayOfWeek():::Gets the day-of-week field, which is an enum DayOfWeek
ZonedDateTime#toLocalTime():::Gets the LocalTime part of this date-time
ZonedDateTime#getHour():::Gets the hour-of-day field.
ZonedDateTime#getMinute():::Gets the minute-of-hour field.
ZonedDateTime#getSecond():::Gets the second-of-minute field.
ZonedDateTime#getNano():::Gets the nano-of-second field.
ZonedDateTime#with(TemporalAdjuster):::Returns an adjusted copy of this date-time
ZonedDateTime#with(TemporalField, long):::Returns a copy of this date-time with the specified field set to a new value
ZonedDateTime#withYear(int):::Returns a copy of this ZonedDateTime with the year altered
ZonedDateTime#withMonth(int):::Returns a copy of this ZonedDateTime with the month-of-year altered
ZonedDateTime#withDayOfMonth(int):::Returns a copy of this ZonedDateTime with the day-of-month altered
ZonedDateTime#withDayOfYear(int):::Returns a copy of this ZonedDateTime with the day-of-year altered
ZonedDateTime#withHour(int):::Returns a copy of this ZonedDateTime with the hour-of-day altered
ZonedDateTime#withMinute(int):::Returns a copy of this ZonedDateTime with the minute-of-hour altered
ZonedDateTime#withSecond(int):::Returns a copy of this ZonedDateTime with the second-of-minute altered
ZonedDateTime#withNano(int):::Returns a copy of this ZonedDateTime with the nano-of-second altered
ZonedDateTime#truncatedTo(TemporalUnit):::Returns a copy of this ZonedDateTime with the time truncated
ZonedDateTime#plus(TemporalAmount):::Returns a copy of this date-time with the specified amount added
ZonedDateTime#plus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount added
ZonedDateTime#plusYears(long):::Returns a copy of this ZonedDateTime with the specified number of years added
ZonedDateTime#plusMonths(long):::Returns a copy of this ZonedDateTime with the specified number of months added
ZonedDateTime#plusWeeks(long):::Returns a copy of this ZonedDateTime with the specified number of weeks added
ZonedDateTime#plusDays(long):::Returns a copy of this ZonedDateTime with the specified number of days added
ZonedDateTime#plusHours(long):::Returns a copy of this ZonedDateTime with the specified number of hours added
ZonedDateTime#plusMinutes(long):::Returns a copy of this ZonedDateTime with the specified number of minutes added
ZonedDateTime#plusSeconds(long):::Returns a copy of this ZonedDateTime with the specified number of seconds added
ZonedDateTime#plusNanos(long):::Returns a copy of this ZonedDateTime with the specified number of nanoseconds added
ZonedDateTime#minus(TemporalAmount):::Returns a copy of this date-time with the specified amount subtracted
ZonedDateTime#minus(long, TemporalUnit):::Returns a copy of this date-time with the specified amount subtracted
ZonedDateTime#minusYears(long):::Returns a copy of this ZonedDateTime with the specified number of years subtracted
ZonedDateTime#minusMonths(long):::Returns a copy of this ZonedDateTime with the specified number of months subtracted
ZonedDateTime#minusWeeks(long):::Returns a copy of this ZonedDateTime with the specified number of weeks subtracted
ZonedDateTime#minusDays(long):::Returns a copy of this ZonedDateTime with the specified number of days subtracted
ZonedDateTime#minusHours(long):::Returns a copy of this ZonedDateTime with the specified number of hours subtracted
ZonedDateTime#minusMinutes(long):::Returns a copy of this ZonedDateTime with the specified number of minutes subtracted
ZonedDateTime#minusSeconds(long):::Returns a copy of this ZonedDateTime with the specified number of seconds subtracted
ZonedDateTime#minusNanos(long):::Returns a copy of this ZonedDateTime with the specified number of nanoseconds subtracted
ZonedDateTime#query(TemporalQuery):::Queries this date-time using the specified query
ZonedDateTime#until(Temporal, TemporalUnit):::Calculates the amount of time until another date-time in terms of the specified unit
ZonedDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter
ZonedDateTime#toOffsetDateTime():::Converts this date-time to an OffsetDateTime
ZonedDateTime#equals(Object):::Checks if this date-time is equal to another date-time
ZonedDateTime#hashCode():::A hash code for this date-time.
ZonedDateTime#toString():::Outputs this date-time as a String, such as 2007-12-03T10:15:30+01:00[Europe/Paris]
ZoneId#systemDefault():::Gets the system default time-zone
ZoneId#getAvailableZoneIds():::Gets the set of available zone IDs
ZoneId#of(String, Map):::Obtains an instance of ZoneId using its ID using a map of aliases to supplement the standard zone IDs
ZoneId#of(String):::Obtains an instance of ZoneId from an ID ensuring that the ID is valid and available for use
ZoneId#ofOffset(String, ZoneOffset):::Obtains an instance of ZoneId wrapping an offset
ZoneId#of(String, boolean):::Parses the ID, taking a flag to indicate whether ZoneRulesException should be thrown or not, used in deserialization.
ZoneId#from(TemporalAccessor):::Obtains an instance of ZoneId from a temporal object
ZoneId#getId():::Gets the unique time-zone ID
ZoneId#getDisplayName(TextStyle, Locale):::Gets the textual representation of the zone, such as 'British Time' or '+02:00'
ZoneId#getRules():::Gets the time-zone rules for this ID allowing calculations to be performed
ZoneId#normalized():::Normalizes the time-zone ID, returning a ZoneOffset where possible
ZoneId#equals(Object):::Checks if this time-zone ID is equal to another time-zone ID
ZoneId#hashCode():::A hash code for this time-zone ID.
ZoneId#toString():::Outputs this zone as a String, using the ID.
ZoneOffset#of(String):::Obtains an instance of ZoneOffset using the ID
ZoneOffset#ofHours(int):::Obtains an instance of ZoneOffset using an offset in hours.
ZoneOffset#ofHoursMinutes(int, int):::Obtains an instance of ZoneOffset using an offset in hours and minutes
ZoneOffset#ofHoursMinutesSeconds(int, int, int):::Obtains an instance of ZoneOffset using an offset in hours, minutes and seconds
ZoneOffset#from(TemporalAccessor):::Obtains an instance of ZoneOffset from a temporal object
ZoneOffset#ofTotalSeconds(int):::Obtains an instance of ZoneOffset specifying the total offset in seconds  The offset must be in the range -18:00 to +18:00, which corresponds to -64800 to +64800.
ZoneOffset#getTotalSeconds():::Gets the total zone offset in seconds
ZoneOffset#getId():::Gets the normalized zone offset ID
ZoneOffset#getRules():::Gets the associated time-zone rules
ZoneOffset#isSupported(TemporalField):::Checks if the specified field is supported
ZoneOffset#range(TemporalField):::Gets the range of valid values for the specified field
ZoneOffset#get(TemporalField):::Gets the value of the specified field from this offset as an int
ZoneOffset#getLong(TemporalField):::Gets the value of the specified field from this offset as a long
ZoneOffset#query(TemporalQuery):::Queries this offset using the specified query
ZoneOffset#adjustInto(Temporal):::Adjusts the specified temporal object to have the same offset as this object
ZoneOffset#compareTo(ZoneOffset):::Compares this offset to another offset in descending order
ZoneOffset#equals(Object):::Checks if this offset is equal to another offset
ZoneOffset#hashCode():::A hash code for this offset.
ZoneOffset#toString():::Outputs this offset as a String, using the normalized ID.
ZoneRegion#ofId(String, boolean):::Obtains an instance of ZoneId from an identifier.

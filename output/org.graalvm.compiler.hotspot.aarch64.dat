org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#newLIRGenerator(LIRGenerationResult)->LIRGeneratorTool::: arch64 hot spot backend new generator
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#newLIRGenerationResult(CompilationIdentifier, LIR, RegisterConfig, StructuredGraph, Object)->LIRGenerationResult::: arch64 hot spot backend new generation result
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#newNodeLIRBuilder(StructuredGraph, LIRGeneratorTool)->NodeLIRBuilderTool::: arch64 hot spot backend new node builder
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#bangStackWithOffset(CompilationResultBuilder, int)->void::: arch64 hot spot backend bang stack with offset
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#createInstalledCode(DebugContext, ResolvedJavaMethod, CompilationRequest, CompilationResult, InstalledCode, boolean, Object[])->InstalledCode::: arch64 hot spot backend create installed code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#newCompilationResultBuilder(LIRGenerationResult, FrameMap, CompilationResult, CompilationResultBuilderFactory)->CompilationResultBuilder::: arch64 hot spot backend new compilation result builder
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#emitCode(CompilationResultBuilder, LIR, ResolvedJavaMethod)->void::: arch64 hot spot backend emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#emitInvalidatePlaceholder(CompilationResultBuilder, AArch64MacroAssembler)->void:::Insert a nop at the start of the prolog so we can patch in a branch if we need to invalidate the method later.
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#newRegisterAllocationConfig(RegisterConfig, String[])->RegisterAllocationConfig::: arch64 hot spot backend new register allocation config
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackend#translateToCallerRegisters(EconomicSet)->EconomicSet::: arch64 hot spot backend translate to caller registers
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#getName()->String::: arch64 hot spot backend factory get name
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#getArchitecture()->Class::: arch64 hot spot backend factory get architecture
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#createBackend(HotSpotGraalRuntimeProvider, CompilerConfiguration, HotSpotJVMCIRuntime, HotSpotBackend)->HotSpotBackend::: arch64 hot spot backend factory create backend
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#createGraphBuilderPlugins(CompilerConfiguration, GraalHotSpotVMConfig, HotSpotConstantReflectionProvider, HotSpotHostForeignCallsProvider, HotSpotMetaAccessProvider, HotSpotSnippetReflectionProvider, HotSpotReplacementsImpl, HotSpotWordTypes, OptionValues)->Plugins::: arch64 hot spot backend factory create graph builder plugins
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#createBackend(GraalHotSpotVMConfig, HotSpotGraalRuntimeProvider, HotSpotProviders)->AArch64HotSpotBackend::: arch64 hot spot backend factory create backend
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#createRegisters()->HotSpotRegistersProvider::: arch64 hot spot backend factory create registers
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#createForeignCalls(HotSpotJVMCIRuntime, HotSpotGraalRuntimeProvider, HotSpotMetaAccessProvider, HotSpotCodeCacheProvider, WordTypes, Value[])->HotSpotHostForeignCallsProvider::: arch64 hot spot backend factory create foreign calls
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#createSuites(GraalHotSpotVMConfig, HotSpotGraalRuntimeProvider, CompilerConfiguration, Plugins, Replacements)->HotSpotSuitesProvider::: arch64 hot spot backend factory create suites
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#createLowerer(HotSpotGraalRuntimeProvider, HotSpotMetaAccessProvider, HotSpotForeignCallsProvider, HotSpotRegistersProvider, HotSpotConstantReflectionProvider, TargetDescription)->HotSpotLoweringProvider::: arch64 hot spot backend factory create lowerer
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#createNativeABICallerSaveRegisters(GraalHotSpotVMConfig, RegisterConfig)->Value[]::: arch64 hot spot backend factory create native caller save registers
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotBackendFactory#toString()->String::: arch64 hot spot backend factory to string
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotConstantRetrievalOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot constant retrieval op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotCRuntimeCallEpilogueOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot runtime call epilogue op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotCRuntimeCallPrologueOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot runtime call prologue op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotDeoptimizeCallerOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot deoptimize caller op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotDeoptimizeOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot deoptimize op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotDirectStaticCallOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot direct static call op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotDirectVirtualCallOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot direct virtual call op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotEpilogueOp#leaveFrame(CompilationResultBuilder, AArch64MacroAssembler, boolean, boolean)->void::: arch64 hot spot epilogue op leave frame
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotForeignCallsProvider#initialize(HotSpotProviders, OptionValues)->void::: arch64 hot spot foreign calls provider initialize
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotForeignCallsProvider#getNativeABICallerSaveRegisters()->Value[]::: arch64 hot spot foreign calls provider get native caller save registers
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotJumpToExceptionHandlerInCallerOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot jump to exception handler in caller op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#getProviders()->HotSpotProviders::: arch64 hot spot generator get providers
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#needOnlyOopMaps()->boolean::: arch64 hot spot generator need only oop maps
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitForeignCallOp(ForeignCallLinkage, Value, Value[], Value[], LIRFrameState)->void::: arch64 hot spot generator emit foreign call op
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitTailcall(Value[], Value)->void::: arch64 hot spot generator emit tailcall
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitCCall(long, CallingConvention, Value[])->void::: arch64 hot spot generator emit call
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitSaveRegisters(Register[], AllocatableValue[], boolean)->AArch64SaveRegistersOp::: arch64 hot spot generator emit save registers
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#allocateSaveRegisterLocation(Register)->VirtualStackSlot:::Allocate a stack slot for saving a register.
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitRestoreRegisters(AArch64SaveRegistersOp)->void::: arch64 hot spot generator emit restore registers
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#getLockSlot(int)->VirtualStackSlot::: arch64 hot spot generator get lock slot
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitCompareBranch(PlatformKind, Value, Value, Condition, boolean, LabelRef, LabelRef, double)->void::: arch64 hot spot generator emit compare branch
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitCompare(PlatformKind, Value, Value, Condition, boolean)->boolean::: arch64 hot spot generator emit compare
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitCompress(Value, CompressEncoding, boolean)->Value::: arch64 hot spot generator emit compress
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitUncompress(Value, CompressEncoding, boolean)->Value::: arch64 hot spot generator emit uncompress
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitNullCheck(Value, LIRFrameState)->void::: arch64 hot spot generator emit null check
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitPrefetchAllocate(Value)->void::: arch64 hot spot generator emit prefetch allocate
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#beforeRegisterAllocation()->void::: arch64 hot spot generator before register allocation
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitForeignCall(ForeignCallLinkage, LIRFrameState, Value...)->Variable::: arch64 hot spot generator emit foreign call
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitDeoptimizeCaller(DeoptimizationAction, DeoptimizationReason)->void::: arch64 hot spot generator emit deoptimize caller
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitDeoptimize(Value, Value, LIRFrameState)->void::: arch64 hot spot generator emit deoptimize
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitUnwind(Value)->void::: arch64 hot spot generator emit unwind
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitLoadObjectAddress(Constant)->Value::: arch64 hot spot generator emit load object address
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitLoadMetaspaceAddress(Constant, HotSpotConstantLoadAction)->Value::: arch64 hot spot generator emit load metaspace address
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitResolveDynamicInvoke(Constant, LIRFrameState)->Value::: arch64 hot spot generator emit resolve dynamic invoke
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitLoadConfigValue(int, LIRKind)->Value::: arch64 hot spot generator emit load config value
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitObjectConstantRetrieval(Constant, Value, LIRFrameState)->Value::: arch64 hot spot generator emit object constant retrieval
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitMetaspaceConstantRetrieval(Constant, Value, LIRFrameState)->Value::: arch64 hot spot generator emit metaspace constant retrieval
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitReturn(JavaKind, Value)->void::: arch64 hot spot generator emit return
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitKlassInitializationAndRetrieval(Constant, Value, LIRFrameState)->Value::: arch64 hot spot generator emit klass initialization and retrieval
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#emitResolveMethodAndLoadCounters(Constant, Value, Value, LIRFrameState)->Value::: arch64 hot spot generator emit resolve method and load counters
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#getStub()->Stub:::Gets the Stub this generator is generating code for or null if a stub is not being generated.
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#getResult()->HotSpotLIRGenerationResult::: arch64 hot spot generator get result
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#createStrategySwitchOp(SwitchStrategy, LabelRef[], LabelRef, Variable, AllocatableValue, Function)->StrategySwitchOp::: arch64 hot spot generator create strategy switch op
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#setDebugInfoBuilder(HotSpotDebugInfoBuilder)->void::: arch64 hot spot generator set debug info builder
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#createZapRegisters(Register[], JavaConstant[])->SaveRegistersOp::: arch64 hot spot generator create zap registers
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLIRGenerator#createZapArgumentSpace(StackSlot[], JavaConstant[])->LIRInstruction::: arch64 hot spot generator create zap argument space
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLoadAddressOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot load address op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLoadConfigValueOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot load config value op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLoweringProvider#initialize(OptionValues, Iterable, HotSpotProviders, GraalHotSpotVMConfig)->void::: arch64 hot spot lowering provider initialize
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotLoweringProvider#lower(Node, LoweringTool)->void::: arch64 hot spot lowering provider lower
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMove.LoadHotSpotObjectConstantInline#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: load hot spot object constant inline emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMove.LoadHotSpotObjectConstantInline#getResult()->AllocatableValue::: load hot spot object constant inline get result
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMove.LoadHotSpotObjectConstantInline#getConstant()->Constant::: load hot spot object constant inline get constant
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMove.BaseMove#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: base move emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMove.CompressPointer#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: compress pointer emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMove.UncompressPointer#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: uncompress pointer emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMove.UncompressPointer#emitUncompressCode(AArch64MacroAssembler, Register, Register, Register, int, boolean)->void::: uncompress pointer emit uncompress code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMove#decodeKlassPointer(CompilationResultBuilder, AArch64MacroAssembler, Register, Register, CompressEncoding, GraalHotSpotVMConfig)->void::: arch64 hot spot move decode klass pointer
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMoveFactory#canInlineConstant(Constant)->boolean::: arch64 hot spot move factory can inline constant
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotMoveFactory#createLoad(AllocatableValue, Constant)->AArch64LIRInstruction::: arch64 hot spot move factory create load
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotNodeLIRBuilder#createDebugInfoBuilder(StructuredGraph, NodeValueMap)->DebugInfoBuilder::: arch64 hot spot node builder create debug info builder
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotNodeLIRBuilder#emitPrologue(StructuredGraph)->void::: arch64 hot spot node builder emit prologue
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotNodeLIRBuilder#visitSafepointNode(SafepointNode)->void::: arch64 hot spot node builder visit safepoint node
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotNodeLIRBuilder#emitDirectCall(DirectCallTargetNode, Value, Value[], Value[], LIRFrameState)->void::: arch64 hot spot node builder emit direct call
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotNodeLIRBuilder#emitIndirectCall(IndirectCallTargetNode, Value, Value[], Value[], LIRFrameState)->void::: arch64 hot spot node builder emit indirect call
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotNodeLIRBuilder#emitPatchReturnAddress(ValueNode)->void::: arch64 hot spot node builder emit patch return address
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotNodeLIRBuilder#emitJumpToExceptionHandlerInCaller(ValueNode, ValueNode, ValueNode)->void::: arch64 hot spot node builder emit jump to exception handler in caller
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotNodeLIRBuilder#visitFullInfopointNode(FullInfopointNode)->void::: arch64 hot spot node builder visit full infopoint node
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotNodeLIRBuilder#visitBreakpointNode(BreakpointNode)->void::: arch64 hot spot node builder visit breakpoint node
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotPatchReturnAddressOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot patch return address op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotRegisterAllocationConfig#initAllocatable(RegisterArray)->RegisterArray::: arch64 hot spot register allocation config init allocatable
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotReturnOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot return op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotSafepointOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot safepoint op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotSafepointOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler, GraalHotSpotVMConfig, boolean, Register, Register, LIRFrameState)->void::: arch64 hot spot safepoint op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotStrategySwitchOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot strategy switch op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotStrategySwitchOp.HotSpotSwitchClosure#emitComparison(Constant)->void::: hot spot switch closure emit comparison
org.graalvm.compiler.hotspot.aarch64.AArch64HotSpotUnwindOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 hot spot unwind op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64IndirectCallOp#emitCode(CompilationResultBuilder, AArch64MacroAssembler)->void::: arch64 indirect call op emit code
org.graalvm.compiler.hotspot.aarch64.AArch64IndirectCallOp#verify()->void::: arch64 indirect call op verify

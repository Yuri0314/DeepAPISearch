AbstractObjectStamp#improveWith(Stamp):::Returns the stamp representing the type of this stamp after a cast to the type represented by the to stamp:::return->join0
ArithmeticOpTable#getNeg():::Describes the unary negation operation.:::return
ArithmeticOpTable#getAdd():::Describes the addition operation.:::return
ArithmeticOpTable#getSub():::Describes the subtraction operation.:::return
ArithmeticOpTable#getMul():::Describes the multiplication operation.:::return
ArithmeticOpTable#getMulHigh():::Describes a signed operation that multiples the upper 32-bits of two long values.:::return
ArithmeticOpTable#getUMulHigh():::Describes an unsigned operation that multiples the upper 32-bits of two long values.:::return
ArithmeticOpTable#getDiv():::Describes the division operation.:::return
ArithmeticOpTable#getRem():::Describes the remainder operation.:::return
ArithmeticOpTable#getNot():::Describes the bitwise not operation.:::return
ArithmeticOpTable#getAnd():::Describes the bitwise and operation.:::return
ArithmeticOpTable#getOr():::Describes the bitwise or operation.:::return
ArithmeticOpTable#getXor():::Describes the bitwise xor operation.:::return
ArithmeticOpTable#getShl():::Describes the shift left operation.:::return
ArithmeticOpTable#getShr():::Describes the signed shift right operation.:::return
ArithmeticOpTable#getUShr():::Describes the unsigned shift right operation.:::return
ArithmeticOpTable#getAbs():::Describes the absolute value operation.:::return
ArithmeticOpTable#getSqrt():::Describes the square root operation.:::return
ArithmeticOpTable#getZeroExtend():::Describes the zero extend conversion.:::return
ArithmeticOpTable#getSignExtend():::Describes the sign extend conversion.:::return
ArithmeticOpTable#getNarrow():::Describes the narrowing conversion.:::return
ArithmeticOpTable#getFloatConvert(FloatConvert):::Describes integer/float/double conversions.:::return->op->ordinal
ArithmeticOpTable.UnaryOp#foldConstant(Constant):::Apply the operation to a Constant.:::
ArithmeticOpTable.UnaryOp#foldStamp(Stamp):::Apply the operation to a Stamp.:::
ArithmeticOpTable.BinaryOp#foldConstant(Constant, Constant):::Applies this operation to a and b.:::
ArithmeticOpTable.BinaryOp#foldStamp(Stamp, Stamp):::Apply the operation to two Stamp Stamps.:::
ArithmeticOpTable.BinaryOp#isAssociative():::Checks whether this operation is associative:::return
ArithmeticOpTable.BinaryOp#isCommutative():::Checks whether this operation is commutative:::return
ArithmeticOpTable.BinaryOp#isNeutral(Constant):::Check whether a Constant is a neutral element for this operation:::return
ArithmeticOpTable.BinaryOp#getZero(Stamp):::Check whether this operation has a zero {@code z == a :::return
ArithmeticOpTable.ShiftOp#foldConstant(Constant, int):::Apply the shift to a constant.:::
ArithmeticOpTable.ShiftOp#foldStamp(Stamp, IntegerStamp):::Apply the shift to a stamp.:::
ArithmeticOpTable.ShiftOp#getShiftAmountMask(Stamp):::Get the shift amount mask for a given result stamp.:::
ArithmeticOpTable.IntegerConvertOp#invertStamp(int, int, Stamp):::Computes the stamp of the input for the given output stamp.:::
DataPointerConstant#getAlignment():::Get the minimum alignment of the data in the data section.:::return
FloatStamp#lowerBound():::The (inclusive) lower bound on the value described by this stamp.:::return
FloatStamp#upperBound():::The (inclusive) upper bound on the value described by this stamp.:::return
FloatStamp#isNonNaN():::Returns true if NaN is non included in the value described by this stamp.:::return
FloatStamp#canBeNaN():::Returns true if NaN is included in the value described by this stamp.:::return
FloatStamp#isNaN():::Returns true if this stamp represents the NaN value.:::return->Double->isNaN
IntegerStamp#lowerBound():::The signed inclusive lower bound on the value described by this stamp.:::return
IntegerStamp#upperBound():::The signed inclusive upper bound on the value described by this stamp.:::return
IntegerStamp#downMask():::This bit-mask describes the bits that are always set in the value described by this stamp.:::return
IntegerStamp#upMask():::This bit-mask describes the bits that can be set in the value described by this stamp.:::return
IntegerStamp#sameSign(IntegerStamp, IntegerStamp):::Checks if the 2 stamps represent values of the same sign:::return->s1->isPositive->s2->isPositive->s1->isStrictlyNegative->s2->isStrictlyNegative
ObjectStamp#makeSymbolic():::Convert an ObjectStamp into a representation that can be resolved symbolically into the original stamp.:::if->type->return->return->new->SymbolicObjectStamp
PrimitiveStamp#getBits():::The width in bits of the value described by this stamp.:::return
Stamp#javaType(MetaAccessProvider):::Returns the type of the stamp, guaranteed to be non-null:::
Stamp#getStackKind():::Gets a Java JavaKind that can be used to store a value of this stamp on the Java bytecode stack:::
Stamp#getLIRKind(LIRKindTool):::Gets a platform dependent LIRKind that can be used to store a value of this stamp.:::
Stamp#meet(Stamp):::Returns the union of this stamp and the given stamp:::
Stamp#join(Stamp):::Returns the intersection of this stamp and the given stamp.:::
Stamp#unrestricted():::Returns a stamp of the same kind, but allowing the full value range of the kind:::
Stamp#empty():::Returns a stamp of the same kind, but with no allowed values:::
Stamp#constant(Constant, MetaAccessProvider):::If it is possible to represent single value stamps of this kind, this method returns the stamp representing the single value c:::
Stamp#isCompatible(Stamp):::Test whether two stamps have the same base type.:::
Stamp#isCompatible(Constant):::Check that the constant other is compatible with this stamp.:::
Stamp#hasValues():::Test whether this stamp has legal values.:::
Stamp#isEmpty():::Tests whether this stamp represents an illegal value.:::return->hasValues
Stamp#isUnrestricted():::Tests whether this stamp represents all values of this kind.:::return->this->this->unrestricted->equals
Stamp#asConstant():::If this stamp represents a single value, the methods returns this single value:::return
Stamp#readConstant(MemoryAccessProvider, Constant, long):::Read a value of this stamp from memory.:::
Stamp#improveWith(Stamp):::Tries to improve this stamp with the stamp given as parameter:::
Stamp#tryImproveWith(Stamp):::Tries to improve this stamp with the stamp given as parameter:::improved->improveWith->if->improved->equals->return->return
Stamp#makeSymbolic():::Convert a Stamp into a representation that can be resolved symbolically into the original stamp:::return
StampFactory#forKind(JavaKind):::Return a stamp for a Java kind, as it would be represented on the bytecode stack.:::return->kind->ordinal
StampFactory#forVoid():::Return the stamp for the void type:::return->VoidStamp->getInstance
StampFactory#forIntegerWithMask(int, long, long, IntegerStamp):::Create a new stamp use newLowerBound and newUpperBound computing the appropriate IntegerStamp#upMask and IntegerStamp#downMask and incorporating any mask information from maskStamp.:::limit->StampFactory->forInteger->return->IntegerStamp->limit->downMask->maskStamp->downMask->limit->upMask->maskStamp->upMask->create
TypeReference#createExactTrusted(ResolvedJavaType):::Creates an exact type reference using the given type.:::if->return->return->new->TypeReference
TypeReference#createWithoutAssumptions(ResolvedJavaType):::Creates a type reference using the given type without assumptions and without trusting interface types.:::return->create
TypeReference#createTrustedWithoutAssumptions(ResolvedJavaType):::Creates a type reference using the given type without assumptions and trusting interface types.:::return->createTrusted
TypeReference#create(Assumptions, ResolvedJavaType):::Creates a type reference using the given type with assumptions and without trusting interface types.:::return->filterInterfaceTypesOut->createTrusted
TypeReference#createTrusted(Assumptions, ResolvedJavaType):::Create a type reference using the given type with assumptions and trusting interface types.:::if->return->exactType->type->isLeaf->if->leafConcreteSubtype->type->findLeafConcreteSubtype->if->leafConcreteSubtype->canRecordTo->leafConcreteSubtype->recordTo->leafConcreteSubtype->getResult->if->return->new->TypeReference->return->new->TypeReference
TypeReference#getType():::The type this reference refers to.:::return

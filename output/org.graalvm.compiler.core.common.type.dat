org.graalvm.compiler.core.common.type.AbstractObjectStamp#accept(Visitor)->void::: abstract object stamp accept
org.graalvm.compiler.core.common.type.AbstractObjectStamp#copyWith(ResolvedJavaType, boolean, boolean, boolean)->AbstractObjectStamp::: abstract object stamp copy with
org.graalvm.compiler.core.common.type.AbstractObjectStamp#copyWith(boolean, boolean)->AbstractPointerStamp::: abstract object stamp copy with
org.graalvm.compiler.core.common.type.AbstractObjectStamp#unrestricted()->Stamp::: abstract object stamp unrestricted
org.graalvm.compiler.core.common.type.AbstractObjectStamp#empty()->Stamp::: abstract object stamp empty
org.graalvm.compiler.core.common.type.AbstractObjectStamp#constant(Constant, MetaAccessProvider)->Stamp::: abstract object stamp constant
org.graalvm.compiler.core.common.type.AbstractObjectStamp#hasValues()->boolean::: abstract object stamp has values
org.graalvm.compiler.core.common.type.AbstractObjectStamp#getStackKind()->JavaKind::: abstract object stamp get stack kind
org.graalvm.compiler.core.common.type.AbstractObjectStamp#javaType(MetaAccessProvider)->ResolvedJavaType::: abstract object stamp java type
org.graalvm.compiler.core.common.type.AbstractObjectStamp#type()->ResolvedJavaType::: abstract object stamp type
org.graalvm.compiler.core.common.type.AbstractObjectStamp#isExactType()->boolean::: abstract object stamp is exact type
org.graalvm.compiler.core.common.type.AbstractObjectStamp#appendString(StringBuilder)->void::: abstract object stamp append string
org.graalvm.compiler.core.common.type.AbstractObjectStamp#meet(Stamp)->Stamp::: abstract object stamp meet
org.graalvm.compiler.core.common.type.AbstractObjectStamp#join(Stamp)->Stamp::: abstract object stamp join
org.graalvm.compiler.core.common.type.AbstractObjectStamp#improveWith(Stamp)->Stamp:::Returns the stamp representing the type of this stamp after a cast to the type represented by the to stamp
org.graalvm.compiler.core.common.type.AbstractObjectStamp#isConcreteType(ResolvedJavaType)->boolean::: abstract object stamp is concrete type
org.graalvm.compiler.core.common.type.AbstractObjectStamp#hashCode()->int::: abstract object stamp hash code
org.graalvm.compiler.core.common.type.AbstractObjectStamp#equals(Object)->boolean::: abstract object stamp equals
org.graalvm.compiler.core.common.type.AbstractPointerStamp#accept(Visitor)->void::: abstract pointer stamp accept
org.graalvm.compiler.core.common.type.AbstractPointerStamp#nonNull()->boolean::: abstract pointer stamp non null
org.graalvm.compiler.core.common.type.AbstractPointerStamp#alwaysNull()->boolean::: abstract pointer stamp always null
org.graalvm.compiler.core.common.type.AbstractPointerStamp#copyWith(boolean, boolean)->AbstractPointerStamp::: abstract pointer stamp copy with
org.graalvm.compiler.core.common.type.AbstractPointerStamp#hashCode()->int::: abstract pointer stamp hash code
org.graalvm.compiler.core.common.type.AbstractPointerStamp#defaultPointerJoin(Stamp)->Stamp::: abstract pointer stamp default pointer join
org.graalvm.compiler.core.common.type.AbstractPointerStamp#improveWith(Stamp)->Stamp::: abstract pointer stamp improve with
org.graalvm.compiler.core.common.type.AbstractPointerStamp#meet(Stamp)->Stamp::: abstract pointer stamp meet
org.graalvm.compiler.core.common.type.AbstractPointerStamp#unrestricted()->Stamp::: abstract pointer stamp unrestricted
org.graalvm.compiler.core.common.type.AbstractPointerStamp#pointerNonNull(Stamp)->Stamp::: abstract pointer stamp pointer non null
org.graalvm.compiler.core.common.type.AbstractPointerStamp#pointerMaybeNull(Stamp)->Stamp::: abstract pointer stamp pointer maybe null
org.graalvm.compiler.core.common.type.AbstractPointerStamp#pointerAlwaysNull(Stamp)->Stamp::: abstract pointer stamp pointer always null
org.graalvm.compiler.core.common.type.AbstractPointerStamp#asNonNull()->Stamp::: abstract pointer stamp as non null
org.graalvm.compiler.core.common.type.AbstractPointerStamp#asMaybeNull()->Stamp::: abstract pointer stamp as maybe null
org.graalvm.compiler.core.common.type.AbstractPointerStamp#asAlwaysNull()->Stamp::: abstract pointer stamp as always null
org.graalvm.compiler.core.common.type.AbstractPointerStamp#equals(Object)->boolean::: abstract pointer stamp equals
org.graalvm.compiler.core.common.type.AbstractPointerStamp#asConstant()->Constant::: abstract pointer stamp as constant
org.graalvm.compiler.core.common.type.AbstractPointerStamp#nullConstant()->JavaConstant::: abstract pointer stamp null constant
org.graalvm.compiler.core.common.type.AbstractPointerStamp#getStackKind()->JavaKind::: abstract pointer stamp get stack kind
org.graalvm.compiler.core.common.type.ArithmeticOpTable#forStamp(Stamp)->ArithmeticOpTable::: arithmetic op table for stamp
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getBinaryOps()->BinaryOp[]::: arithmetic op table get binary ops
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getUnaryOps()->UnaryOp[]::: arithmetic op table get unary ops
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getShiftOps()->ShiftOp[]::: arithmetic op table get shift ops
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getIntegerConvertOps()->IntegerConvertOp[]::: arithmetic op table get integer convert ops
org.graalvm.compiler.core.common.type.ArithmeticOpTable.ArithmeticOpWrapper#wrapUnaryOp(UnaryOp)->UnaryOp::: arithmetic op wrapper wrap unary op
org.graalvm.compiler.core.common.type.ArithmeticOpTable.ArithmeticOpWrapper#wrapBinaryOp(BinaryOp)->BinaryOp::: arithmetic op wrapper wrap binary op
org.graalvm.compiler.core.common.type.ArithmeticOpTable.ArithmeticOpWrapper#wrapShiftOp(ShiftOp)->ShiftOp::: arithmetic op wrapper wrap shift op
org.graalvm.compiler.core.common.type.ArithmeticOpTable.ArithmeticOpWrapper#wrapIntegerConvertOp(IntegerConvertOp)->IntegerConvertOp::: arithmetic op wrapper wrap integer convert op
org.graalvm.compiler.core.common.type.ArithmeticOpTable.ArithmeticOpWrapper#wrapFloatConvertOp(FloatConvertOp)->FloatConvertOp::: arithmetic op wrapper wrap float convert op
org.graalvm.compiler.core.common.type.ArithmeticOpTable#wrap(ArithmeticOpWrapper, ArithmeticOpTable)->ArithmeticOpTable::: arithmetic op table wrap
org.graalvm.compiler.core.common.type.ArithmeticOpTable#hashCode()->int::: arithmetic op table hash code
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getNeg()->UnaryOp:::Describes the unary negation operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getAdd()->BinaryOp:::Describes the addition operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getSub()->BinaryOp:::Describes the subtraction operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getMul()->BinaryOp:::Describes the multiplication operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getMulHigh()->BinaryOp:::Describes a signed operation that multiples the upper 32-bits of two long values.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getUMulHigh()->BinaryOp:::Describes an unsigned operation that multiples the upper 32-bits of two long values.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getDiv()->BinaryOp:::Describes the division operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getRem()->BinaryOp:::Describes the remainder operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getNot()->UnaryOp:::Describes the bitwise not operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getAnd()->BinaryOp:::Describes the bitwise and operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getOr()->BinaryOp:::Describes the bitwise or operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getXor()->BinaryOp:::Describes the bitwise xor operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getShl()->ShiftOp:::Describes the shift left operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getShr()->ShiftOp:::Describes the signed shift right operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getUShr()->ShiftOp:::Describes the unsigned shift right operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getAbs()->UnaryOp:::Describes the absolute value operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getSqrt()->UnaryOp:::Describes the square root operation.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getZeroExtend()->IntegerConvertOp:::Describes the zero extend conversion.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getSignExtend()->IntegerConvertOp:::Describes the sign extend conversion.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getNarrow()->IntegerConvertOp:::Describes the narrowing conversion.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#getFloatConvert(FloatConvert)->FloatConvertOp:::Describes integer/float/double conversions.
org.graalvm.compiler.core.common.type.ArithmeticOpTable#toString(Op...)->String::: arithmetic op table to string
org.graalvm.compiler.core.common.type.ArithmeticOpTable#equals(Object)->boolean::: arithmetic op table equals
org.graalvm.compiler.core.common.type.ArithmeticOpTable#toString()->String::: arithmetic op table to string
org.graalvm.compiler.core.common.type.ArithmeticOpTable.Op#toString()->String::: op to string
org.graalvm.compiler.core.common.type.ArithmeticOpTable.Op#hashCode()->int::: op hash code
org.graalvm.compiler.core.common.type.ArithmeticOpTable.Op#equals(Object)->boolean::: op equals
org.graalvm.compiler.core.common.type.ArithmeticOpTable.UnaryOp#foldConstant(Constant)->Constant:::Apply the operation to a Constant.
org.graalvm.compiler.core.common.type.ArithmeticOpTable.UnaryOp#foldStamp(Stamp)->Stamp:::Apply the operation to a Stamp.
org.graalvm.compiler.core.common.type.ArithmeticOpTable.UnaryOp#unwrap()->UnaryOp::: unary op unwrap
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#foldConstant(Constant, Constant)->Constant:::Applies this operation to a and b.
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#foldStamp(Stamp, Stamp)->Stamp:::Apply the operation to two Stamp Stamps.
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#isAssociative()->boolean:::Checks whether this operation is associative
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#isCommutative()->boolean:::Checks whether this operation is commutative
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#isNeutral(Constant)->boolean:::Check whether a Constant is a neutral element for this operation
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#getZero(Stamp)->Constant:::Check whether this operation has a zero {@code z == a 
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#unwrap()->BinaryOp::: binary op unwrap
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#hashCode()->int::: binary op hash code
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#equals(Object)->boolean::: binary op equals
org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp#toString()->String::: binary op to string
org.graalvm.compiler.core.common.type.ArithmeticOpTable.ShiftOp#foldConstant(Constant, int)->Constant:::Apply the shift to a constant.
org.graalvm.compiler.core.common.type.ArithmeticOpTable.ShiftOp#foldStamp(Stamp, IntegerStamp)->Stamp:::Apply the shift to a stamp.
org.graalvm.compiler.core.common.type.ArithmeticOpTable.ShiftOp#getShiftAmountMask(Stamp)->int:::Get the shift amount mask for a given result stamp.
org.graalvm.compiler.core.common.type.ArithmeticOpTable.FloatConvertOp#getFloatConvert()->FloatConvert::: float convert op get float convert
org.graalvm.compiler.core.common.type.ArithmeticOpTable.FloatConvertOp#unwrap()->FloatConvertOp::: float convert op unwrap
org.graalvm.compiler.core.common.type.ArithmeticOpTable.FloatConvertOp#hashCode()->int::: float convert op hash code
org.graalvm.compiler.core.common.type.ArithmeticOpTable.FloatConvertOp#equals(Object)->boolean::: float convert op equals
org.graalvm.compiler.core.common.type.ArithmeticOpTable.IntegerConvertOp.Narrow#invertStamp(int, int, Stamp)->Stamp::: narrow invert stamp
org.graalvm.compiler.core.common.type.ArithmeticOpTable.IntegerConvertOp#foldConstant(int, int, Constant)->Constant::: integer convert op fold constant
org.graalvm.compiler.core.common.type.ArithmeticOpTable.IntegerConvertOp#foldStamp(int, int, Stamp)->Stamp::: integer convert op fold stamp
org.graalvm.compiler.core.common.type.ArithmeticOpTable.IntegerConvertOp#unwrap()->IntegerConvertOp::: integer convert op unwrap
org.graalvm.compiler.core.common.type.ArithmeticOpTable.IntegerConvertOp#invertStamp(int, int, Stamp)->Stamp:::Computes the stamp of the input for the given output stamp.
org.graalvm.compiler.core.common.type.ArithmeticStamp#getOps()->ArithmeticOpTable::: arithmetic stamp get ops
org.graalvm.compiler.core.common.type.ArithmeticStamp#deserialize(ByteBuffer)->SerializableConstant::: arithmetic stamp deserialize
org.graalvm.compiler.core.common.type.ArithmeticStamp#improveWith(Stamp)->Stamp::: arithmetic stamp improve with
org.graalvm.compiler.core.common.type.ArithmeticStamp#hashCode()->int::: arithmetic stamp hash code
org.graalvm.compiler.core.common.type.ArithmeticStamp#equals(Object)->boolean::: arithmetic stamp equals
org.graalvm.compiler.core.common.type.DataPointerConstant#getAlignment()->int:::Get the minimum alignment of the data in the data section.
org.graalvm.compiler.core.common.type.DataPointerConstant#isDefaultForKind()->boolean::: data pointer constant is default for kind
org.graalvm.compiler.core.common.type.FloatStamp#unrestricted()->Stamp::: float stamp unrestricted
org.graalvm.compiler.core.common.type.FloatStamp#empty()->Stamp::: float stamp empty
org.graalvm.compiler.core.common.type.FloatStamp#constant(Constant, MetaAccessProvider)->Stamp::: float stamp constant
org.graalvm.compiler.core.common.type.FloatStamp#deserialize(ByteBuffer)->SerializableConstant::: float stamp deserialize
org.graalvm.compiler.core.common.type.FloatStamp#hasValues()->boolean::: float stamp has values
org.graalvm.compiler.core.common.type.FloatStamp#getStackKind()->JavaKind::: float stamp get stack kind
org.graalvm.compiler.core.common.type.FloatStamp#getLIRKind(LIRKindTool)->LIRKind::: float stamp get kind
org.graalvm.compiler.core.common.type.FloatStamp#javaType(MetaAccessProvider)->ResolvedJavaType::: float stamp java type
org.graalvm.compiler.core.common.type.FloatStamp#lowerBound()->double:::The (inclusive) lower bound on the value described by this stamp.
org.graalvm.compiler.core.common.type.FloatStamp#upperBound()->double:::The (inclusive) upper bound on the value described by this stamp.
org.graalvm.compiler.core.common.type.FloatStamp#isNonNaN()->boolean:::Returns true if NaN is non included in the value described by this stamp.
org.graalvm.compiler.core.common.type.FloatStamp#canBeNaN()->boolean:::Returns true if NaN is included in the value described by this stamp.
org.graalvm.compiler.core.common.type.FloatStamp#isNaN()->boolean:::Returns true if this stamp represents the NaN value.
org.graalvm.compiler.core.common.type.FloatStamp#isUnrestricted()->boolean::: float stamp is unrestricted
org.graalvm.compiler.core.common.type.FloatStamp#contains(double)->boolean::: float stamp contains
org.graalvm.compiler.core.common.type.FloatStamp#toString()->String::: float stamp to string
org.graalvm.compiler.core.common.type.FloatStamp#meet(Stamp)->Stamp::: float stamp meet
org.graalvm.compiler.core.common.type.FloatStamp#join(Stamp)->Stamp::: float stamp join
org.graalvm.compiler.core.common.type.FloatStamp#hashCode()->int::: float stamp hash code
org.graalvm.compiler.core.common.type.FloatStamp#isCompatible(Stamp)->boolean::: float stamp is compatible
org.graalvm.compiler.core.common.type.FloatStamp#isCompatible(Constant)->boolean::: float stamp is compatible
org.graalvm.compiler.core.common.type.FloatStamp#equals(Object)->boolean::: float stamp equals
org.graalvm.compiler.core.common.type.FloatStamp#asConstant()->JavaConstant::: float stamp as constant
org.graalvm.compiler.core.common.type.IllegalStamp#accept(Visitor)->void::: illegal stamp accept
org.graalvm.compiler.core.common.type.IllegalStamp#getStackKind()->JavaKind::: illegal stamp get stack kind
org.graalvm.compiler.core.common.type.IllegalStamp#getLIRKind(LIRKindTool)->LIRKind::: illegal stamp get kind
org.graalvm.compiler.core.common.type.IllegalStamp#unrestricted()->Stamp::: illegal stamp unrestricted
org.graalvm.compiler.core.common.type.IllegalStamp#isUnrestricted()->boolean::: illegal stamp is unrestricted
org.graalvm.compiler.core.common.type.IllegalStamp#empty()->Stamp::: illegal stamp empty
org.graalvm.compiler.core.common.type.IllegalStamp#constant(Constant, MetaAccessProvider)->Stamp::: illegal stamp constant
org.graalvm.compiler.core.common.type.IllegalStamp#javaType(MetaAccessProvider)->ResolvedJavaType::: illegal stamp java type
org.graalvm.compiler.core.common.type.IllegalStamp#meet(Stamp)->Stamp::: illegal stamp meet
org.graalvm.compiler.core.common.type.IllegalStamp#join(Stamp)->Stamp::: illegal stamp join
org.graalvm.compiler.core.common.type.IllegalStamp#isCompatible(Stamp)->boolean::: illegal stamp is compatible
org.graalvm.compiler.core.common.type.IllegalStamp#isCompatible(Constant)->boolean::: illegal stamp is compatible
org.graalvm.compiler.core.common.type.IllegalStamp#toString()->String::: illegal stamp to string
org.graalvm.compiler.core.common.type.IllegalStamp#hasValues()->boolean::: illegal stamp has values
org.graalvm.compiler.core.common.type.IllegalStamp#improveWith(Stamp)->Stamp::: illegal stamp improve with
org.graalvm.compiler.core.common.type.IllegalStamp#readConstant(MemoryAccessProvider, Constant, long)->Constant::: illegal stamp read constant
org.graalvm.compiler.core.common.type.IllegalStamp#getInstance()->IllegalStamp::: illegal stamp get instance
org.graalvm.compiler.core.common.type.IntegerStamp#create(int, long, long)->IntegerStamp::: integer stamp create
org.graalvm.compiler.core.common.type.IntegerStamp#create(int, long, long, long, long)->IntegerStamp::: integer stamp create
org.graalvm.compiler.core.common.type.IntegerStamp#stampForMask(int, long, long)->IntegerStamp::: integer stamp stamp for mask
org.graalvm.compiler.core.common.type.IntegerStamp#unrestricted()->IntegerStamp::: integer stamp unrestricted
org.graalvm.compiler.core.common.type.IntegerStamp#empty()->IntegerStamp::: integer stamp empty
org.graalvm.compiler.core.common.type.IntegerStamp#constant(Constant, MetaAccessProvider)->Stamp::: integer stamp constant
org.graalvm.compiler.core.common.type.IntegerStamp#deserialize(ByteBuffer)->SerializableConstant::: integer stamp deserialize
org.graalvm.compiler.core.common.type.IntegerStamp#hasValues()->boolean::: integer stamp has values
org.graalvm.compiler.core.common.type.IntegerStamp#getStackKind()->JavaKind::: integer stamp get stack kind
org.graalvm.compiler.core.common.type.IntegerStamp#getLIRKind(LIRKindTool)->LIRKind::: integer stamp get kind
org.graalvm.compiler.core.common.type.IntegerStamp#javaType(MetaAccessProvider)->ResolvedJavaType::: integer stamp java type
org.graalvm.compiler.core.common.type.IntegerStamp#lowerBound()->long:::The signed inclusive lower bound on the value described by this stamp.
org.graalvm.compiler.core.common.type.IntegerStamp#upperBound()->long:::The signed inclusive upper bound on the value described by this stamp.
org.graalvm.compiler.core.common.type.IntegerStamp#downMask()->long:::This bit-mask describes the bits that are always set in the value described by this stamp.
org.graalvm.compiler.core.common.type.IntegerStamp#upMask()->long:::This bit-mask describes the bits that can be set in the value described by this stamp.
org.graalvm.compiler.core.common.type.IntegerStamp#isUnrestricted()->boolean::: integer stamp is unrestricted
org.graalvm.compiler.core.common.type.IntegerStamp#contains(long)->boolean::: integer stamp contains
org.graalvm.compiler.core.common.type.IntegerStamp#isPositive()->boolean::: integer stamp is positive
org.graalvm.compiler.core.common.type.IntegerStamp#isNegative()->boolean::: integer stamp is negative
org.graalvm.compiler.core.common.type.IntegerStamp#isStrictlyPositive()->boolean::: integer stamp is strictly positive
org.graalvm.compiler.core.common.type.IntegerStamp#isStrictlyNegative()->boolean::: integer stamp is strictly negative
org.graalvm.compiler.core.common.type.IntegerStamp#canBePositive()->boolean::: integer stamp can be positive
org.graalvm.compiler.core.common.type.IntegerStamp#canBeNegative()->boolean::: integer stamp can be negative
org.graalvm.compiler.core.common.type.IntegerStamp#toString()->String::: integer stamp to string
org.graalvm.compiler.core.common.type.IntegerStamp#meet(Stamp)->Stamp::: integer stamp meet
org.graalvm.compiler.core.common.type.IntegerStamp#join(Stamp)->IntegerStamp::: integer stamp join
org.graalvm.compiler.core.common.type.IntegerStamp#isCompatible(Stamp)->boolean::: integer stamp is compatible
org.graalvm.compiler.core.common.type.IntegerStamp#isCompatible(Constant)->boolean::: integer stamp is compatible
org.graalvm.compiler.core.common.type.IntegerStamp#unsignedUpperBound()->long::: integer stamp unsigned upper bound
org.graalvm.compiler.core.common.type.IntegerStamp#unsignedLowerBound()->long::: integer stamp unsigned lower bound
org.graalvm.compiler.core.common.type.IntegerStamp#hashCode()->int::: integer stamp hash code
org.graalvm.compiler.core.common.type.IntegerStamp#equals(Object)->boolean::: integer stamp equals
org.graalvm.compiler.core.common.type.IntegerStamp#sameSign(IntegerStamp, IntegerStamp)->boolean:::Checks if the 2 stamps represent values of the same sign
org.graalvm.compiler.core.common.type.IntegerStamp#asConstant()->JavaConstant::: integer stamp as constant
org.graalvm.compiler.core.common.type.IntegerStamp#addCanOverflow(IntegerStamp, IntegerStamp)->boolean::: integer stamp add can overflow
org.graalvm.compiler.core.common.type.IntegerStamp#addOverflowsPositively(long, long, int)->boolean::: integer stamp add overflows positively
org.graalvm.compiler.core.common.type.IntegerStamp#addOverflowsNegatively(long, long, int)->boolean::: integer stamp add overflows negatively
org.graalvm.compiler.core.common.type.IntegerStamp#carryBits(long, long)->long::: integer stamp carry bits
org.graalvm.compiler.core.common.type.IntegerStamp#multiplicationOverflows(long, long, int)->boolean::: integer stamp multiplication overflows
org.graalvm.compiler.core.common.type.IntegerStamp#multiplicationCanOverflow(IntegerStamp, IntegerStamp)->boolean::: integer stamp multiplication can overflow
org.graalvm.compiler.core.common.type.IntegerStamp#subtractionCanOverflow(IntegerStamp, IntegerStamp)->boolean::: integer stamp subtraction can overflow
org.graalvm.compiler.core.common.type.IntegerStamp#subtractionOverflows(long, long, int)->boolean::: integer stamp subtraction overflows
org.graalvm.compiler.core.common.type.ObjectStamp#copyWith(ResolvedJavaType, boolean, boolean, boolean)->ObjectStamp::: object stamp copy with
org.graalvm.compiler.core.common.type.ObjectStamp#unrestricted()->Stamp::: object stamp unrestricted
org.graalvm.compiler.core.common.type.ObjectStamp#toString()->String::: object stamp to string
org.graalvm.compiler.core.common.type.ObjectStamp#isCompatible(Stamp)->boolean::: object stamp is compatible
org.graalvm.compiler.core.common.type.ObjectStamp#isCompatible(Constant)->boolean::: object stamp is compatible
org.graalvm.compiler.core.common.type.ObjectStamp#getLIRKind(LIRKindTool)->LIRKind::: object stamp get kind
org.graalvm.compiler.core.common.type.ObjectStamp#readConstant(MemoryAccessProvider, Constant, long)->Constant::: object stamp read constant
org.graalvm.compiler.core.common.type.ObjectStamp#makeSymbolic()->SymbolicJVMCIReference:::Convert an ObjectStamp into a representation that can be resolved symbolically into the original stamp.
org.graalvm.compiler.core.common.type.ObjectStamp.SymbolicObjectStamp#resolve(ResolvedJavaType)->ObjectStamp::: symbolic object stamp resolve
org.graalvm.compiler.core.common.type.ObjectStamp.SymbolicObjectStamp#toString()->String::: symbolic object stamp to string
org.graalvm.compiler.core.common.type.PrimitiveStamp#accept(Visitor)->void::: primitive stamp accept
org.graalvm.compiler.core.common.type.PrimitiveStamp#getBits()->int:::The width in bits of the value described by this stamp.
org.graalvm.compiler.core.common.type.PrimitiveStamp#getBits(Stamp)->int::: primitive stamp get bits
org.graalvm.compiler.core.common.type.PrimitiveStamp#readConstant(MemoryAccessProvider, Constant, long)->Constant::: primitive stamp read constant
org.graalvm.compiler.core.common.type.PrimitiveStamp#hashCode()->int::: primitive stamp hash code
org.graalvm.compiler.core.common.type.PrimitiveStamp#equals(Object)->boolean::: primitive stamp equals
org.graalvm.compiler.core.common.type.RawPointerStamp#getLIRKind(LIRKindTool)->LIRKind::: raw pointer stamp get kind
org.graalvm.compiler.core.common.type.RawPointerStamp#copyWith(boolean, boolean)->AbstractPointerStamp::: raw pointer stamp copy with
org.graalvm.compiler.core.common.type.RawPointerStamp#meet(Stamp)->Stamp::: raw pointer stamp meet
org.graalvm.compiler.core.common.type.RawPointerStamp#improveWith(Stamp)->Stamp::: raw pointer stamp improve with
org.graalvm.compiler.core.common.type.RawPointerStamp#join(Stamp)->Stamp::: raw pointer stamp join
org.graalvm.compiler.core.common.type.RawPointerStamp#unrestricted()->Stamp::: raw pointer stamp unrestricted
org.graalvm.compiler.core.common.type.RawPointerStamp#empty()->Stamp::: raw pointer stamp empty
org.graalvm.compiler.core.common.type.RawPointerStamp#hasValues()->boolean::: raw pointer stamp has values
org.graalvm.compiler.core.common.type.RawPointerStamp#javaType(MetaAccessProvider)->ResolvedJavaType::: raw pointer stamp java type
org.graalvm.compiler.core.common.type.RawPointerStamp#constant(Constant, MetaAccessProvider)->Stamp::: raw pointer stamp constant
org.graalvm.compiler.core.common.type.RawPointerStamp#isCompatible(Stamp)->boolean::: raw pointer stamp is compatible
org.graalvm.compiler.core.common.type.RawPointerStamp#isCompatible(Constant)->boolean::: raw pointer stamp is compatible
org.graalvm.compiler.core.common.type.RawPointerStamp#readConstant(MemoryAccessProvider, Constant, long)->Constant::: raw pointer stamp read constant
org.graalvm.compiler.core.common.type.RawPointerStamp#toString()->String::: raw pointer stamp to string
org.graalvm.compiler.core.common.type.Stamp#javaType(MetaAccessProvider)->ResolvedJavaType:::Returns the type of the stamp, guaranteed to be non-null
org.graalvm.compiler.core.common.type.Stamp#alwaysDistinct(Stamp)->boolean::: stamp always distinct
org.graalvm.compiler.core.common.type.Stamp#getStackKind()->JavaKind:::Gets a Java JavaKind that can be used to store a value of this stamp on the Java bytecode stack
org.graalvm.compiler.core.common.type.Stamp#getLIRKind(LIRKindTool)->LIRKind:::Gets a platform dependent LIRKind that can be used to store a value of this stamp.
org.graalvm.compiler.core.common.type.Stamp#meet(Stamp)->Stamp:::Returns the union of this stamp and the given stamp
org.graalvm.compiler.core.common.type.Stamp#join(Stamp)->Stamp:::Returns the intersection of this stamp and the given stamp.
org.graalvm.compiler.core.common.type.Stamp#unrestricted()->Stamp:::Returns a stamp of the same kind, but allowing the full value range of the kind
org.graalvm.compiler.core.common.type.Stamp#empty()->Stamp:::Returns a stamp of the same kind, but with no allowed values
org.graalvm.compiler.core.common.type.Stamp#constant(Constant, MetaAccessProvider)->Stamp:::If it is possible to represent single value stamps of this kind, this method returns the stamp representing the single value c
org.graalvm.compiler.core.common.type.Stamp#isCompatible(Stamp)->boolean:::Test whether two stamps have the same base type.
org.graalvm.compiler.core.common.type.Stamp#isCompatible(Constant)->boolean:::Check that the constant other is compatible with this stamp.
org.graalvm.compiler.core.common.type.Stamp#hasValues()->boolean:::Test whether this stamp has legal values.
org.graalvm.compiler.core.common.type.Stamp#isEmpty()->boolean:::Tests whether this stamp represents an illegal value.
org.graalvm.compiler.core.common.type.Stamp#isUnrestricted()->boolean:::Tests whether this stamp represents all values of this kind.
org.graalvm.compiler.core.common.type.Stamp#asConstant()->Constant:::If this stamp represents a single value, the methods returns this single value
org.graalvm.compiler.core.common.type.Stamp#readConstant(MemoryAccessProvider, Constant, long)->Constant:::Read a value of this stamp from memory.
org.graalvm.compiler.core.common.type.Stamp#improveWith(Stamp)->Stamp:::Tries to improve this stamp with the stamp given as parameter
org.graalvm.compiler.core.common.type.Stamp#tryImproveWith(Stamp)->Stamp:::Tries to improve this stamp with the stamp given as parameter
org.graalvm.compiler.core.common.type.Stamp#neverDistinct(Stamp)->boolean::: stamp never distinct
org.graalvm.compiler.core.common.type.Stamp#makeSymbolic()->SymbolicJVMCIReference:::Convert a Stamp into a representation that can be resolved symbolically into the original stamp
org.graalvm.compiler.core.common.type.Stamp#toString()->String::: stamp to string
org.graalvm.compiler.core.common.type.StampFactory#tautology()->Stamp::: stamp factory tautology
org.graalvm.compiler.core.common.type.StampFactory#contradiction()->Stamp::: stamp factory contradiction
org.graalvm.compiler.core.common.type.StampFactory#forKind(JavaKind)->Stamp:::Return a stamp for a Java kind, as it would be represented on the bytecode stack.
org.graalvm.compiler.core.common.type.StampFactory#forVoid()->Stamp:::Return the stamp for the void type
org.graalvm.compiler.core.common.type.StampFactory#intValue()->Stamp::: stamp factory int value
org.graalvm.compiler.core.common.type.StampFactory#positiveInt()->Stamp::: stamp factory positive int
org.graalvm.compiler.core.common.type.StampFactory#empty(JavaKind)->Stamp::: stamp factory empty
org.graalvm.compiler.core.common.type.StampFactory#forInteger(JavaKind, long, long, long, long)->IntegerStamp::: stamp factory for integer
org.graalvm.compiler.core.common.type.StampFactory#forInteger(JavaKind, long, long)->IntegerStamp::: stamp factory for integer
org.graalvm.compiler.core.common.type.StampFactory#forIntegerWithMask(int, long, long, IntegerStamp)->IntegerStamp:::Create a new stamp use newLowerBound and newUpperBound computing the appropriate IntegerStamp#upMask and IntegerStamp#downMask and incorporating any mask information from maskStamp.
org.graalvm.compiler.core.common.type.StampFactory#forIntegerWithMask(int, long, long, long, long)->IntegerStamp::: stamp factory for integer with mask
org.graalvm.compiler.core.common.type.StampFactory#forInteger(int)->IntegerStamp::: stamp factory for integer
org.graalvm.compiler.core.common.type.StampFactory#forUnsignedInteger(int)->IntegerStamp::: stamp factory for unsigned integer
org.graalvm.compiler.core.common.type.StampFactory#forUnsignedInteger(int, long, long)->IntegerStamp::: stamp factory for unsigned integer
org.graalvm.compiler.core.common.type.StampFactory#forUnsignedInteger(int, long, long, long, long)->IntegerStamp::: stamp factory for unsigned integer
org.graalvm.compiler.core.common.type.StampFactory#forInteger(int, long, long)->IntegerStamp::: stamp factory for integer
org.graalvm.compiler.core.common.type.StampFactory#forFloat(JavaKind, double, double, boolean)->FloatStamp::: stamp factory for float
org.graalvm.compiler.core.common.type.StampFactory#forConstant(JavaConstant)->Stamp::: stamp factory for constant
org.graalvm.compiler.core.common.type.StampFactory#forConstant(JavaConstant, MetaAccessProvider)->Stamp::: stamp factory for constant
org.graalvm.compiler.core.common.type.StampFactory#object()->Stamp::: stamp factory object
org.graalvm.compiler.core.common.type.StampFactory#objectNonNull()->Stamp::: stamp factory object non null
org.graalvm.compiler.core.common.type.StampFactory#alwaysNull()->Stamp::: stamp factory always null
org.graalvm.compiler.core.common.type.StampFactory#object(TypeReference)->ObjectStamp::: stamp factory object
org.graalvm.compiler.core.common.type.StampFactory#objectNonNull(TypeReference)->ObjectStamp::: stamp factory object non null
org.graalvm.compiler.core.common.type.StampFactory#object(TypeReference, boolean)->ObjectStamp::: stamp factory object
org.graalvm.compiler.core.common.type.StampFactory#createParameterStamps(Assumptions, ResolvedJavaMethod)->Stamp[]::: stamp factory create parameter stamps
org.graalvm.compiler.core.common.type.StampFactory#createParameterStamps(Assumptions, ResolvedJavaMethod, boolean)->Stamp[]::: stamp factory create parameter stamps
org.graalvm.compiler.core.common.type.StampFactory#pointer()->Stamp::: stamp factory pointer
org.graalvm.compiler.core.common.type.StampFactory#forDeclaredType(Assumptions, JavaType, boolean)->StampPair::: stamp factory for declared type
org.graalvm.compiler.core.common.type.StampPair#create(Stamp, Stamp)->StampPair::: stamp pair create
org.graalvm.compiler.core.common.type.StampPair#createSingle(Stamp)->StampPair::: stamp pair create single
org.graalvm.compiler.core.common.type.StampPair#getUncheckedStamp()->Stamp::: stamp pair get unchecked stamp
org.graalvm.compiler.core.common.type.StampPair#getTrustedStamp()->Stamp::: stamp pair get trusted stamp
org.graalvm.compiler.core.common.type.StampPair#toString()->String::: stamp pair to string
org.graalvm.compiler.core.common.type.StampPair#hashCode()->int::: stamp pair hash code
org.graalvm.compiler.core.common.type.StampPair#equals(Object)->boolean::: stamp pair equals
org.graalvm.compiler.core.common.type.SymbolicJVMCIReference#resolve(ResolvedJavaType)->T::: symbolic reference resolve
org.graalvm.compiler.core.common.type.TypeReference#createExactTrusted(ResolvedJavaType)->TypeReference:::Creates an exact type reference using the given type.
org.graalvm.compiler.core.common.type.TypeReference#createWithoutAssumptions(ResolvedJavaType)->TypeReference:::Creates a type reference using the given type without assumptions and without trusting interface types.
org.graalvm.compiler.core.common.type.TypeReference#createTrustedWithoutAssumptions(ResolvedJavaType)->TypeReference:::Creates a type reference using the given type without assumptions and trusting interface types.
org.graalvm.compiler.core.common.type.TypeReference#create(Assumptions, ResolvedJavaType)->TypeReference:::Creates a type reference using the given type with assumptions and without trusting interface types.
org.graalvm.compiler.core.common.type.TypeReference#createTrusted(Assumptions, ResolvedJavaType)->TypeReference:::Create a type reference using the given type with assumptions and trusting interface types.
org.graalvm.compiler.core.common.type.TypeReference#getType()->ResolvedJavaType:::The type this reference refers to.
org.graalvm.compiler.core.common.type.TypeReference#isExact()->boolean::: type reference is exact
org.graalvm.compiler.core.common.type.TypeReference#asExactReference()->TypeReference::: type reference as exact reference
org.graalvm.compiler.core.common.type.TypeReference#toString()->String::: type reference to string
org.graalvm.compiler.core.common.type.VoidStamp#accept(Visitor)->void::: void stamp accept
org.graalvm.compiler.core.common.type.VoidStamp#unrestricted()->Stamp::: void stamp unrestricted
org.graalvm.compiler.core.common.type.VoidStamp#isUnrestricted()->boolean::: void stamp is unrestricted
org.graalvm.compiler.core.common.type.VoidStamp#getStackKind()->JavaKind::: void stamp get stack kind
org.graalvm.compiler.core.common.type.VoidStamp#improveWith(Stamp)->Stamp::: void stamp improve with
org.graalvm.compiler.core.common.type.VoidStamp#getLIRKind(LIRKindTool)->LIRKind::: void stamp get kind
org.graalvm.compiler.core.common.type.VoidStamp#javaType(MetaAccessProvider)->ResolvedJavaType::: void stamp java type
org.graalvm.compiler.core.common.type.VoidStamp#toString()->String::: void stamp to string
org.graalvm.compiler.core.common.type.VoidStamp#alwaysDistinct(Stamp)->boolean::: void stamp always distinct
org.graalvm.compiler.core.common.type.VoidStamp#meet(Stamp)->Stamp::: void stamp meet
org.graalvm.compiler.core.common.type.VoidStamp#join(Stamp)->Stamp::: void stamp join
org.graalvm.compiler.core.common.type.VoidStamp#isCompatible(Stamp)->boolean::: void stamp is compatible
org.graalvm.compiler.core.common.type.VoidStamp#isCompatible(Constant)->boolean::: void stamp is compatible
org.graalvm.compiler.core.common.type.VoidStamp#empty()->Stamp::: void stamp empty
org.graalvm.compiler.core.common.type.VoidStamp#hasValues()->boolean::: void stamp has values
org.graalvm.compiler.core.common.type.VoidStamp#readConstant(MemoryAccessProvider, Constant, long)->Constant::: void stamp read constant
org.graalvm.compiler.core.common.type.VoidStamp#constant(Constant, MetaAccessProvider)->Stamp::: void stamp constant
org.graalvm.compiler.core.common.type.VoidStamp#getInstance()->VoidStamp::: void stamp get instance

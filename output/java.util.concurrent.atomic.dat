AtomicBoolean#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.:::return
AtomicBoolean#compareAndSet(boolean, boolean):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::return->VALUE->compareAndSet
AtomicBoolean#weakCompareAndSet(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->VALUE->weakCompareAndSetPlain
AtomicBoolean#weakCompareAndSetPlain(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->VALUE->weakCompareAndSetPlain
AtomicBoolean#set(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.:::
AtomicBoolean#lazySet(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::VALUE->setRelease
AtomicBoolean#getAndSet(boolean):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::return->VALUE->getAndSet
AtomicBoolean#toString():::Returns the String representation of the current value.:::return->Boolean->get->toString
AtomicBoolean#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.:::return->VALUE->get
AtomicBoolean#setPlain(boolean):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::VALUE->set
AtomicBoolean#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.:::return->VALUE->getOpaque
AtomicBoolean#setOpaque(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.:::VALUE->setOpaque
AtomicBoolean#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.:::return->VALUE->getAcquire
AtomicBoolean#setRelease(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::VALUE->setRelease
AtomicBoolean#compareAndExchange(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::return->VALUE->compareAndExchange
AtomicBoolean#compareAndExchangeAcquire(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::return->VALUE->compareAndExchangeAcquire
AtomicBoolean#compareAndExchangeRelease(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::return->VALUE->compareAndExchangeRelease
AtomicBoolean#weakCompareAndSetVolatile(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::return->VALUE->weakCompareAndSet
AtomicBoolean#weakCompareAndSetAcquire(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::return->VALUE->weakCompareAndSetAcquire
AtomicBoolean#weakCompareAndSetRelease(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::return->VALUE->weakCompareAndSetRelease
AtomicInteger#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.:::return
AtomicInteger#set(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.:::
AtomicInteger#lazySet(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::U->putIntRelease
AtomicInteger#getAndSet(int):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::return->U->getAndSetInt
AtomicInteger#compareAndSet(int, int):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::return->U->compareAndSetInt
AtomicInteger#weakCompareAndSet(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->U->weakCompareAndSetIntPlain
AtomicInteger#weakCompareAndSetPlain(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->U->weakCompareAndSetIntPlain
AtomicInteger#getAndIncrement():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd:::return->U->getAndAddInt
AtomicInteger#getAndDecrement():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd:::return->U->getAndAddInt
AtomicInteger#getAndAdd(int):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.:::return->U->getAndAddInt
AtomicInteger#incrementAndGet():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd:::return->U->getAndAddInt
AtomicInteger#decrementAndGet():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd:::return->U->getAndAddInt
AtomicInteger#addAndGet(int):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.:::return->U->getAndAddInt
AtomicInteger#getAndUpdate(IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value:::prev->get->next->for->haveNext
AtomicInteger#updateAndGet(IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value:::prev->get->next->for->haveNext
AtomicInteger#getAndAccumulate(int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value:::prev->get->next->for->haveNext
AtomicInteger#accumulateAndGet(int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value:::prev->get->next->for->haveNext
AtomicInteger#toString():::Returns the String representation of the current value.:::return->Integer->get->toString
AtomicInteger#intValue():::Returns the current value of this AtomicInteger as an int, with memory effects as specified by VarHandle#getVolatile:::return->get
AtomicInteger#longValue():::Returns the current value of this AtomicInteger as a long after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::return->get
AtomicInteger#floatValue():::Returns the current value of this AtomicInteger as a float after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::return->get
AtomicInteger#doubleValue():::Returns the current value of this AtomicInteger as a double after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::return->get
AtomicInteger#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.:::return->U->getInt
AtomicInteger#setPlain(int):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::U->putInt
AtomicInteger#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.:::return->U->getIntOpaque
AtomicInteger#setOpaque(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.:::U->putIntOpaque
AtomicInteger#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.:::return->U->getIntAcquire
AtomicInteger#setRelease(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::U->putIntRelease
AtomicInteger#compareAndExchange(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::return->U->compareAndExchangeInt
AtomicInteger#compareAndExchangeAcquire(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::return->U->compareAndExchangeIntAcquire
AtomicInteger#compareAndExchangeRelease(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::return->U->compareAndExchangeIntRelease
AtomicInteger#weakCompareAndSetVolatile(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::return->U->weakCompareAndSetInt
AtomicInteger#weakCompareAndSetAcquire(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::return->U->weakCompareAndSetIntAcquire
AtomicInteger#weakCompareAndSetRelease(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::return->U->weakCompareAndSetIntRelease
AtomicIntegerArray#length():::Returns the length of the array.:::return
AtomicIntegerArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.:::return->AA->getVolatile
AtomicIntegerArray#set(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.:::AA->setVolatile
AtomicIntegerArray#lazySet(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA->setRelease
AtomicIntegerArray#getAndSet(int, int):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::return->AA->getAndSet
AtomicIntegerArray#compareAndSet(int, int, int):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::return->AA->compareAndSet
AtomicIntegerArray#weakCompareAndSet(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->AA->weakCompareAndSetPlain
AtomicIntegerArray#weakCompareAndSetPlain(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->AA->weakCompareAndSetPlain
AtomicIntegerArray#getAndIncrement(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::return->AA->getAndAdd
AtomicIntegerArray#getAndDecrement(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::return->AA->getAndAdd
AtomicIntegerArray#getAndAdd(int, int):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.:::return->AA->getAndAdd
AtomicIntegerArray#incrementAndGet(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::return->AA->getAndAdd
AtomicIntegerArray#decrementAndGet(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::return->AA->getAndAdd
AtomicIntegerArray#addAndGet(int, int):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.:::return->AA->getAndAdd
AtomicIntegerArray#getAndUpdate(int, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value:::prev->get->next->for->haveNext
AtomicIntegerArray#updateAndGet(int, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value:::prev->get->next->for->haveNext
AtomicIntegerArray#getAndAccumulate(int, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value:::prev->get->next->for->haveNext
AtomicIntegerArray#accumulateAndGet(int, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value:::prev->get->next->for->haveNext
AtomicIntegerArray#toString():::Returns the String representation of the current values of array.:::iMax->if->return->b->new->StringBuilder->b->append->for->i
AtomicIntegerArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.:::return->AA->get
AtomicIntegerArray#setPlain(int, int):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::AA->set
AtomicIntegerArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.:::return->AA->getOpaque
AtomicIntegerArray#setOpaque(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.:::AA->setOpaque
AtomicIntegerArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.:::return->AA->getAcquire
AtomicIntegerArray#setRelease(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA->setRelease
AtomicIntegerArray#compareAndExchange(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::return->AA->compareAndExchange
AtomicIntegerArray#compareAndExchangeAcquire(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::return->AA->compareAndExchangeAcquire
AtomicIntegerArray#compareAndExchangeRelease(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::return->AA->compareAndExchangeRelease
AtomicIntegerArray#weakCompareAndSetVolatile(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::return->AA->weakCompareAndSet
AtomicIntegerArray#weakCompareAndSetAcquire(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::return->AA->weakCompareAndSetAcquire
AtomicIntegerArray#weakCompareAndSetRelease(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::return->AA->weakCompareAndSetRelease
AtomicIntegerFieldUpdater#newUpdater(Class, String):::Creates and returns an updater for objects with the given field:::return->Reflection->getCallerClass->new->AtomicIntegerFieldUpdaterImpl<U>
AtomicIntegerFieldUpdater#compareAndSet(T, int, int):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicIntegerFieldUpdater#weakCompareAndSet(T, int, int):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicIntegerFieldUpdater#set(T, int):::Sets the field of the given object managed by this updater to the given updated value:::
AtomicIntegerFieldUpdater#lazySet(T, int):::Eventually sets the field of the given object managed by this updater to the given updated value.:::
AtomicIntegerFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.:::
AtomicIntegerFieldUpdater#getAndSet(T, int):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.:::prev->do->get->while->compareAndSet->return
AtomicIntegerFieldUpdater#getAndIncrement(T):::Atomically increments by one the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicIntegerFieldUpdater#getAndDecrement(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicIntegerFieldUpdater#getAndAdd(T, int):::Atomically adds the given value to the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicIntegerFieldUpdater#incrementAndGet(T):::Atomically increments by one the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicIntegerFieldUpdater#decrementAndGet(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicIntegerFieldUpdater#addAndGet(T, int):::Atomically adds the given value to the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicIntegerFieldUpdater#getAndUpdate(T, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value:::prev->next->do->get->updateFunction->applyAsInt->while->compareAndSet->return
AtomicIntegerFieldUpdater#updateAndGet(T, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value:::prev->next->do->get->updateFunction->applyAsInt->while->compareAndSet->return
AtomicIntegerFieldUpdater#getAndAccumulate(T, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value:::prev->next->do->get->accumulatorFunction->applyAsInt->while->compareAndSet->return
AtomicIntegerFieldUpdater#accumulateAndGet(T, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value:::prev->next->do->get->accumulatorFunction->applyAsInt->while->compareAndSet->return
AtomicLong#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.:::return
AtomicLong#set(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.:::U->putLongVolatile
AtomicLong#lazySet(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::U->putLongRelease
AtomicLong#getAndSet(long):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::return->U->getAndSetLong
AtomicLong#compareAndSet(long, long):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::return->U->compareAndSetLong
AtomicLong#weakCompareAndSet(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->U->weakCompareAndSetLongPlain
AtomicLong#weakCompareAndSetPlain(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->U->weakCompareAndSetLongPlain
AtomicLong#getAndIncrement():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd:::return->U->getAndAddLong
AtomicLong#getAndDecrement():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd:::return->U->getAndAddLong
AtomicLong#getAndAdd(long):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.:::return->U->getAndAddLong
AtomicLong#incrementAndGet():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd:::return->U->getAndAddLong
AtomicLong#decrementAndGet():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd:::return->U->getAndAddLong
AtomicLong#addAndGet(long):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.:::return->U->getAndAddLong
AtomicLong#getAndUpdate(LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value:::prev->get->next->for->haveNext
AtomicLong#updateAndGet(LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value:::prev->get->next->for->haveNext
AtomicLong#getAndAccumulate(long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value:::prev->get->next->for->haveNext
AtomicLong#accumulateAndGet(long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value:::prev->get->next->for->haveNext
AtomicLong#toString():::Returns the String representation of the current value.:::return->Long->get->toString
AtomicLong#intValue():::Returns the current value of this AtomicLong as an int after a narrowing primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::return->get
AtomicLong#longValue():::Returns the current value of this AtomicLong as a long, with memory effects as specified by VarHandle#getVolatile:::return->get
AtomicLong#floatValue():::Returns the current value of this AtomicLong as a float after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::return->get
AtomicLong#doubleValue():::Returns the current value of this AtomicLong as a double after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::return->get
AtomicLong#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.:::return->U->getLong
AtomicLong#setPlain(long):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::U->putLong
AtomicLong#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.:::return->U->getLongOpaque
AtomicLong#setOpaque(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.:::U->putLongOpaque
AtomicLong#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.:::return->U->getLongAcquire
AtomicLong#setRelease(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::U->putLongRelease
AtomicLong#compareAndExchange(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::return->U->compareAndExchangeLong
AtomicLong#compareAndExchangeAcquire(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::return->U->compareAndExchangeLongAcquire
AtomicLong#compareAndExchangeRelease(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::return->U->compareAndExchangeLongRelease
AtomicLong#weakCompareAndSetVolatile(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::return->U->weakCompareAndSetLong
AtomicLong#weakCompareAndSetAcquire(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::return->U->weakCompareAndSetLongAcquire
AtomicLong#weakCompareAndSetRelease(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::return->U->weakCompareAndSetLongRelease
AtomicLongArray#length():::Returns the length of the array.:::return
AtomicLongArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.:::return->AA->getVolatile
AtomicLongArray#set(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.:::AA->setVolatile
AtomicLongArray#lazySet(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA->setRelease
AtomicLongArray#getAndSet(int, long):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::return->AA->getAndSet
AtomicLongArray#compareAndSet(int, long, long):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::return->AA->compareAndSet
AtomicLongArray#weakCompareAndSet(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->AA->weakCompareAndSetPlain
AtomicLongArray#weakCompareAndSetPlain(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->AA->weakCompareAndSetPlain
AtomicLongArray#getAndIncrement(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::return->AA->getAndAdd
AtomicLongArray#getAndDecrement(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::return->AA->getAndAdd
AtomicLongArray#getAndAdd(int, long):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.:::return->AA->getAndAdd
AtomicLongArray#incrementAndGet(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::return->AA->getAndAdd
AtomicLongArray#decrementAndGet(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::return->AA->getAndAdd
AtomicLongArray#addAndGet(int, long):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.:::return->AA->getAndAdd
AtomicLongArray#getAndUpdate(int, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value:::prev->get->next->for->haveNext
AtomicLongArray#updateAndGet(int, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value:::prev->get->next->for->haveNext
AtomicLongArray#getAndAccumulate(int, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value:::prev->get->next->for->haveNext
AtomicLongArray#accumulateAndGet(int, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value:::prev->get->next->for->haveNext
AtomicLongArray#toString():::Returns the String representation of the current values of array.:::iMax->if->return->b->new->StringBuilder->b->append->for->i
AtomicLongArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.:::return->AA->get
AtomicLongArray#setPlain(int, long):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::AA->set
AtomicLongArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.:::return->AA->getOpaque
AtomicLongArray#setOpaque(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.:::AA->setOpaque
AtomicLongArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.:::return->AA->getAcquire
AtomicLongArray#setRelease(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA->setRelease
AtomicLongArray#compareAndExchange(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::return->AA->compareAndExchange
AtomicLongArray#compareAndExchangeAcquire(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::return->AA->compareAndExchangeAcquire
AtomicLongArray#compareAndExchangeRelease(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::return->AA->compareAndExchangeRelease
AtomicLongArray#weakCompareAndSetVolatile(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::return->AA->weakCompareAndSet
AtomicLongArray#weakCompareAndSetAcquire(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::return->AA->weakCompareAndSetAcquire
AtomicLongArray#weakCompareAndSetRelease(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::return->AA->weakCompareAndSetRelease
AtomicLongFieldUpdater#newUpdater(Class, String):::Creates and returns an updater for objects with the given field:::caller->Reflection->getCallerClass->if->return->new->CASUpdater<U>->else->return->new->LockedUpdater<U>
AtomicLongFieldUpdater#compareAndSet(T, long, long):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicLongFieldUpdater#weakCompareAndSet(T, long, long):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicLongFieldUpdater#set(T, long):::Sets the field of the given object managed by this updater to the given updated value:::
AtomicLongFieldUpdater#lazySet(T, long):::Eventually sets the field of the given object managed by this updater to the given updated value.:::
AtomicLongFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.:::
AtomicLongFieldUpdater#getAndSet(T, long):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.:::prev->do->get->while->compareAndSet->return
AtomicLongFieldUpdater#getAndIncrement(T):::Atomically increments by one the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicLongFieldUpdater#getAndDecrement(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicLongFieldUpdater#getAndAdd(T, long):::Atomically adds the given value to the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicLongFieldUpdater#incrementAndGet(T):::Atomically increments by one the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicLongFieldUpdater#decrementAndGet(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicLongFieldUpdater#addAndGet(T, long):::Atomically adds the given value to the current value of the field of the given object managed by this updater.:::prev->next->do->get->while->compareAndSet->return
AtomicLongFieldUpdater#getAndUpdate(T, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value:::prev->next->do->get->updateFunction->applyAsLong->while->compareAndSet->return
AtomicLongFieldUpdater#updateAndGet(T, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value:::prev->next->do->get->updateFunction->applyAsLong->while->compareAndSet->return
AtomicLongFieldUpdater#getAndAccumulate(T, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value:::prev->next->do->get->accumulatorFunction->applyAsLong->while->compareAndSet->return
AtomicLongFieldUpdater#accumulateAndGet(T, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value:::prev->next->do->get->accumulatorFunction->applyAsLong->while->compareAndSet->return
AtomicLongFieldUpdater#isAncestor(ClassLoader, ClassLoader):::Returns true if the second classloader can be found in the first classloader's delegation chain:::acl->do->acl->getParent->if->return->while->return
AtomicLongFieldUpdater#isSamePackage(Class, Class):::Returns true if the two classes have the same class loader and package qualifier:::return->class1->getClassLoader->class2->getClassLoader->Objects->class1->getPackageName->class2->getPackageName->equals
AtomicMarkableReference#getReference():::Returns the current value of the reference.:::return
AtomicMarkableReference#isMarked():::Returns the current value of the mark.:::return
AtomicMarkableReference#get(boolean[]):::Returns the current values of both the reference and the mark:::pair->return
AtomicMarkableReference#weakCompareAndSet(V, V, boolean, boolean):::Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark:::return->compareAndSet
AtomicMarkableReference#compareAndSet(V, V, boolean, boolean):::Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.:::current->return->Pair->of->casPair
AtomicMarkableReference#set(V, boolean):::Unconditionally sets the value of both the reference and mark.:::current->if->Pair->of
AtomicMarkableReference#attemptMark(V, boolean):::Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference:::current->return->Pair->of->casPair
AtomicReference#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.:::return
AtomicReference#set(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.:::
AtomicReference#lazySet(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::VALUE->setRelease
AtomicReference#compareAndSet(V, V):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::return->VALUE->compareAndSet
AtomicReference#weakCompareAndSet(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->VALUE->weakCompareAndSetPlain
AtomicReference#weakCompareAndSetPlain(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->VALUE->weakCompareAndSetPlain
AtomicReference#getAndSet(V):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::return->VALUE->getAndSet
AtomicReference#getAndUpdate(UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value:::prev->get->next->for->haveNext
AtomicReference#updateAndGet(UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value:::prev->get->next->for->haveNext
AtomicReference#getAndAccumulate(V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value:::prev->get->next->for->haveNext
AtomicReference#accumulateAndGet(V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value:::prev->get->next->for->haveNext
AtomicReference#toString():::Returns the String representation of the current value.:::return->String->get->valueOf
AtomicReference#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.:::return->VALUE->get
AtomicReference#setPlain(V):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::VALUE->set
AtomicReference#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.:::return->VALUE->getOpaque
AtomicReference#setOpaque(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.:::VALUE->setOpaque
AtomicReference#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.:::return->VALUE->getAcquire
AtomicReference#setRelease(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::VALUE->setRelease
AtomicReference#compareAndExchange(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::return->VALUE->compareAndExchange
AtomicReference#compareAndExchangeAcquire(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::return->VALUE->compareAndExchangeAcquire
AtomicReference#compareAndExchangeRelease(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::return->VALUE->compareAndExchangeRelease
AtomicReference#weakCompareAndSetVolatile(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::return->VALUE->weakCompareAndSet
AtomicReference#weakCompareAndSetAcquire(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::return->VALUE->weakCompareAndSetAcquire
AtomicReference#weakCompareAndSetRelease(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::return->VALUE->weakCompareAndSetRelease
AtomicReferenceArray#length():::Returns the length of the array.:::return
AtomicReferenceArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.:::return->AA->getVolatile
AtomicReferenceArray#set(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.:::AA->setVolatile
AtomicReferenceArray#lazySet(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA->setRelease
AtomicReferenceArray#getAndSet(int, E):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::return->AA->getAndSet
AtomicReferenceArray#compareAndSet(int, E, E):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::return->AA->compareAndSet
AtomicReferenceArray#weakCompareAndSet(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->AA->weakCompareAndSetPlain
AtomicReferenceArray#weakCompareAndSetPlain(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::return->AA->weakCompareAndSetPlain
AtomicReferenceArray#getAndUpdate(int, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value:::prev->get->next->for->haveNext
AtomicReferenceArray#updateAndGet(int, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value:::prev->get->next->for->haveNext
AtomicReferenceArray#getAndAccumulate(int, E, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value:::prev->get->next->for->haveNext
AtomicReferenceArray#accumulateAndGet(int, E, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value:::prev->get->next->for->haveNext
AtomicReferenceArray#toString():::Returns the String representation of the current values of array.:::iMax->if->return->b->new->StringBuilder->b->append->for->i
AtomicReferenceArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.:::return->AA->get
AtomicReferenceArray#setPlain(int, E):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::AA->set
AtomicReferenceArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.:::return->AA->getOpaque
AtomicReferenceArray#setOpaque(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.:::AA->setOpaque
AtomicReferenceArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.:::return->AA->getAcquire
AtomicReferenceArray#setRelease(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA->setRelease
AtomicReferenceArray#compareAndExchange(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::return->AA->compareAndExchange
AtomicReferenceArray#compareAndExchangeAcquire(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::return->AA->compareAndExchangeAcquire
AtomicReferenceArray#compareAndExchangeRelease(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::return->AA->compareAndExchangeRelease
AtomicReferenceArray#weakCompareAndSetVolatile(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::return->AA->weakCompareAndSet
AtomicReferenceArray#weakCompareAndSetAcquire(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::return->AA->weakCompareAndSetAcquire
AtomicReferenceArray#weakCompareAndSetRelease(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::return->AA->weakCompareAndSetRelease
AtomicReferenceFieldUpdater#newUpdater(Class, Class, String):::Creates and returns an updater for objects with the given field:::return->Reflection->getCallerClass->new->AtomicReferenceFieldUpdaterImpl<U,W>
AtomicReferenceFieldUpdater#compareAndSet(T, V, V):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicReferenceFieldUpdater#weakCompareAndSet(T, V, V):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicReferenceFieldUpdater#set(T, V):::Sets the field of the given object managed by this updater to the given updated value:::
AtomicReferenceFieldUpdater#lazySet(T, V):::Eventually sets the field of the given object managed by this updater to the given updated value.:::
AtomicReferenceFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.:::
AtomicReferenceFieldUpdater#getAndSet(T, V):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.:::prev->do->get->while->compareAndSet->return
AtomicReferenceFieldUpdater#getAndUpdate(T, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value:::prev->next->do->get->updateFunction->apply->while->compareAndSet->return
AtomicReferenceFieldUpdater#updateAndGet(T, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value:::prev->next->do->get->updateFunction->apply->while->compareAndSet->return
AtomicReferenceFieldUpdater#getAndAccumulate(T, V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value:::prev->next->do->get->accumulatorFunction->apply->while->compareAndSet->return
AtomicReferenceFieldUpdater#accumulateAndGet(T, V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value:::prev->next->do->get->accumulatorFunction->apply->while->compareAndSet->return
AtomicStampedReference#getReference():::Returns the current value of the reference.:::return
AtomicStampedReference#getStamp():::Returns the current value of the stamp.:::return
AtomicStampedReference#get(int[]):::Returns the current values of both the reference and the stamp:::pair->return
AtomicStampedReference#weakCompareAndSet(V, V, int, int):::Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp:::return->compareAndSet
AtomicStampedReference#compareAndSet(V, V, int, int):::Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.:::current->return->Pair->of->casPair
AtomicStampedReference#set(V, int):::Unconditionally sets the value of both the reference and stamp.:::current->if->Pair->of
AtomicStampedReference#attemptStamp(V, int):::Atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference:::current->return->Pair->of->casPair
DoubleAccumulator#accumulate(double):::Updates with the given value.:::cs->b->v->r->m->c->if->function->longBitsToDouble->applyAsDouble->doubleToRawLongBits->casBase->uncontended->if->getProbe->function->longBitsToDouble->applyAsDouble->doubleToRawLongBits->c->cas->doubleAccumulate
DoubleAccumulator#get():::Returns the current value:::cs->result->longBitsToDouble->if->foreach->if->function->longBitsToDouble->applyAsDouble->return
DoubleAccumulator#reset():::Resets variables maintaining updates to the identity value:::cs->if->foreach->if->c->reset
DoubleAccumulator#getThenReset():::Equivalent in effect to #get followed by #reset:::cs->result->getAndSetBase->longBitsToDouble->if->foreach->if->v->c->getAndSet->longBitsToDouble->function->applyAsDouble->return
DoubleAccumulator#toString():::Returns the String representation of the current value.:::return->Double->get->toString
DoubleAccumulator#doubleValue():::Equivalent to #get.:::return->get
DoubleAccumulator#longValue():::Returns the #get current value as a long after a narrowing primitive conversion.:::return->get
DoubleAccumulator#intValue():::Returns the #get current value as an int after a narrowing primitive conversion.:::return->get
DoubleAccumulator#floatValue():::Returns the #get current value as a float after a narrowing primitive conversion.:::return->get
DoubleAdder#add(double):::Adds the given value.:::cs->b->v->m->c->if->Double->Double->longBitsToDouble->doubleToRawLongBits->casBase->uncontended->if->getProbe->c->Double->Double->longBitsToDouble->doubleToRawLongBits->cas->doubleAccumulate
DoubleAdder#sum():::Returns the current sum:::cs->sum->Double->longBitsToDouble->if->foreach->if->Double->longBitsToDouble->return
DoubleAdder#reset():::Resets variables maintaining the sum to zero:::cs->if->foreach->if->c->reset
DoubleAdder#sumThenReset():::Equivalent in effect to #sum followed by #reset:::cs->sum->Double->getAndSetBase->longBitsToDouble->if->foreach->if->Double->c->getAndSet->longBitsToDouble->return
DoubleAdder#toString():::Returns the String representation of the #sum.:::return->Double->sum->toString
DoubleAdder#doubleValue():::Equivalent to #sum.:::return->sum
DoubleAdder#longValue():::Returns the #sum as a long after a narrowing primitive conversion.:::return->sum
DoubleAdder#intValue():::Returns the #sum as an int after a narrowing primitive conversion.:::return->sum
DoubleAdder#floatValue():::Returns the #sum as a float after a narrowing primitive conversion.:::return->sum
LongAccumulator#accumulate(long):::Updates with the given value.:::cs->b->v->r->m->c->if->function->applyAsLong->casBase->uncontended->if->getProbe->function->applyAsLong->c->cas->longAccumulate
LongAccumulator#get():::Returns the current value:::cs->result->if->foreach->if->function->applyAsLong->return
LongAccumulator#reset():::Resets variables maintaining updates to the identity value:::cs->if->foreach->if->c->reset
LongAccumulator#getThenReset():::Equivalent in effect to #get followed by #reset:::cs->result->getAndSetBase->if->foreach->if->v->c->getAndSet->function->applyAsLong->return
LongAccumulator#toString():::Returns the String representation of the current value.:::return->Long->get->toString
LongAccumulator#longValue():::Equivalent to #get.:::return->get
LongAccumulator#intValue():::Returns the #get current value as an int after a narrowing primitive conversion.:::return->get
LongAccumulator#floatValue():::Returns the #get current value as a float after a widening primitive conversion.:::return->get
LongAccumulator#doubleValue():::Returns the #get current value as a double after a widening primitive conversion.:::return->get
LongAdder#add(long):::Adds the given value.:::cs->b->v->m->c->if->casBase->uncontended->if->getProbe->c->cas->longAccumulate
LongAdder#increment():::Equivalent to add(1).:::add
LongAdder#decrement():::Equivalent to add(-1).:::add
LongAdder#sum():::Returns the current sum:::cs->sum->if->foreach->if->return
LongAdder#reset():::Resets variables maintaining the sum to zero:::cs->if->foreach->if->c->reset
LongAdder#sumThenReset():::Equivalent in effect to #sum followed by #reset:::cs->sum->getAndSetBase->if->foreach->if->c->getAndSet->return
LongAdder#toString():::Returns the String representation of the #sum.:::return->Long->sum->toString
LongAdder#longValue():::Equivalent to #sum.:::return->sum
LongAdder#intValue():::Returns the #sum as an int after a narrowing primitive conversion.:::return->sum
LongAdder#floatValue():::Returns the #sum as a float after a widening primitive conversion.:::return->sum
LongAdder#doubleValue():::Returns the #sum as a double after a widening primitive conversion.:::return->sum
Striped64#casBase(long, long):::CASes the base field.:::return->BASE->compareAndSet
Striped64#casCellsBusy():::CASes the cellsBusy field from 0 to 1 to acquire lock.:::return->CELLSBUSY->compareAndSet
Striped64#getProbe():::Returns the probe value for the current thread:::return->THREAD_PROBE->Thread->currentThread->get
Striped64#advanceProbe(int):::Pseudo-randomly advances and records the given probe value for the given thread:::THREAD_PROBE->Thread->currentThread->set->return
Striped64#longAccumulate(long, LongBinaryOperator, boolean):::Handles cases of updates involving initialization, resizing, creating new Cells, and/or contention:::h->if->getProbe->ThreadLocalRandom->current->getProbe->collide->for
Striped64#doubleAccumulate(double, DoubleBinaryOperator, boolean):::Same as longAccumulate, but injecting long/double conversions in too many places to sensibly merge with long version, given the low-overhead requirements of this class:::h->if->getProbe->ThreadLocalRandom->current->getProbe->collide->for

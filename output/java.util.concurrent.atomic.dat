AtomicBoolean#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.
AtomicBoolean#compareAndSet(boolean, boolean):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicBoolean#weakCompareAndSet(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicBoolean#weakCompareAndSetPlain(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicBoolean#set(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicBoolean#lazySet(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicBoolean#getAndSet(boolean):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicBoolean#toString():::Returns the String representation of the current value.
AtomicBoolean#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.
AtomicBoolean#setPlain(boolean):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicBoolean#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.
AtomicBoolean#setOpaque(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicBoolean#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.
AtomicBoolean#setRelease(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicBoolean#compareAndExchange(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicBoolean#compareAndExchangeAcquire(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicBoolean#compareAndExchangeRelease(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicBoolean#weakCompareAndSetVolatile(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicBoolean#weakCompareAndSetAcquire(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicBoolean#weakCompareAndSetRelease(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicInteger#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.
AtomicInteger#set(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicInteger#lazySet(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicInteger#getAndSet(int):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicInteger#compareAndSet(int, int):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicInteger#weakCompareAndSet(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicInteger#weakCompareAndSetPlain(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicInteger#getAndIncrement():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicInteger#getAndDecrement():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicInteger#getAndAdd(int):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.
AtomicInteger#incrementAndGet():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicInteger#decrementAndGet():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicInteger#addAndGet(int):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.
AtomicInteger#getAndUpdate(IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value
AtomicInteger#updateAndGet(IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value
AtomicInteger#getAndAccumulate(int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value
AtomicInteger#accumulateAndGet(int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value
AtomicInteger#toString():::Returns the String representation of the current value.
AtomicInteger#intValue():::Returns the current value of this AtomicInteger as an int, with memory effects as specified by VarHandle#getVolatile
AtomicInteger#longValue():::Returns the current value of this AtomicInteger as a long after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicInteger#floatValue():::Returns the current value of this AtomicInteger as a float after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicInteger#doubleValue():::Returns the current value of this AtomicInteger as a double after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicInteger#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.
AtomicInteger#setPlain(int):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicInteger#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.
AtomicInteger#setOpaque(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicInteger#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.
AtomicInteger#setRelease(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicInteger#compareAndExchange(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicInteger#compareAndExchangeAcquire(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicInteger#compareAndExchangeRelease(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicInteger#weakCompareAndSetVolatile(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicInteger#weakCompareAndSetAcquire(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicInteger#weakCompareAndSetRelease(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicIntegerArray#length():::Returns the length of the array.
AtomicIntegerArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.
AtomicIntegerArray#set(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicIntegerArray#lazySet(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicIntegerArray#getAndSet(int, int):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicIntegerArray#compareAndSet(int, int, int):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicIntegerArray#weakCompareAndSet(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicIntegerArray#weakCompareAndSetPlain(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicIntegerArray#getAndIncrement(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicIntegerArray#getAndDecrement(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicIntegerArray#getAndAdd(int, int):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.
AtomicIntegerArray#incrementAndGet(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicIntegerArray#decrementAndGet(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicIntegerArray#addAndGet(int, int):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.
AtomicIntegerArray#getAndUpdate(int, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value
AtomicIntegerArray#updateAndGet(int, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value
AtomicIntegerArray#getAndAccumulate(int, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value
AtomicIntegerArray#accumulateAndGet(int, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value
AtomicIntegerArray#toString():::Returns the String representation of the current values of array.
AtomicIntegerArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.
AtomicIntegerArray#setPlain(int, int):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicIntegerArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.
AtomicIntegerArray#setOpaque(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicIntegerArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.
AtomicIntegerArray#setRelease(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicIntegerArray#compareAndExchange(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicIntegerArray#compareAndExchangeAcquire(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicIntegerArray#compareAndExchangeRelease(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicIntegerArray#weakCompareAndSetVolatile(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicIntegerArray#weakCompareAndSetAcquire(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicIntegerArray#weakCompareAndSetRelease(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicIntegerFieldUpdater#newUpdater(Class, String):::Creates and returns an updater for objects with the given field
AtomicIntegerFieldUpdater#compareAndSet(T, int, int):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicIntegerFieldUpdater#weakCompareAndSet(T, int, int):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicIntegerFieldUpdater#set(T, int):::Sets the field of the given object managed by this updater to the given updated value
AtomicIntegerFieldUpdater#lazySet(T, int):::Eventually sets the field of the given object managed by this updater to the given updated value.
AtomicIntegerFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#getAndSet(T, int):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
AtomicIntegerFieldUpdater#getAndIncrement(T):::Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#getAndDecrement(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#getAndAdd(T, int):::Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#incrementAndGet(T):::Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#decrementAndGet(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#addAndGet(T, int):::Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicIntegerFieldUpdater#getAndUpdate(T, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value
AtomicIntegerFieldUpdater#updateAndGet(T, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value
AtomicIntegerFieldUpdater#getAndAccumulate(T, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value
AtomicIntegerFieldUpdater#accumulateAndGet(T, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value
AtomicLong#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.
AtomicLong#set(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicLong#lazySet(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicLong#getAndSet(long):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicLong#compareAndSet(long, long):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicLong#weakCompareAndSet(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicLong#weakCompareAndSetPlain(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicLong#getAndIncrement():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicLong#getAndDecrement():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicLong#getAndAdd(long):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.
AtomicLong#incrementAndGet():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicLong#decrementAndGet():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd
AtomicLong#addAndGet(long):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.
AtomicLong#getAndUpdate(LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value
AtomicLong#updateAndGet(LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value
AtomicLong#getAndAccumulate(long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value
AtomicLong#accumulateAndGet(long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value
AtomicLong#toString():::Returns the String representation of the current value.
AtomicLong#intValue():::Returns the current value of this AtomicLong as an int after a narrowing primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicLong#longValue():::Returns the current value of this AtomicLong as a long, with memory effects as specified by VarHandle#getVolatile
AtomicLong#floatValue():::Returns the current value of this AtomicLong as a float after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicLong#doubleValue():::Returns the current value of this AtomicLong as a double after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.
AtomicLong#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.
AtomicLong#setPlain(long):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicLong#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.
AtomicLong#setOpaque(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicLong#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.
AtomicLong#setRelease(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicLong#compareAndExchange(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicLong#compareAndExchangeAcquire(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicLong#compareAndExchangeRelease(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicLong#weakCompareAndSetVolatile(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicLong#weakCompareAndSetAcquire(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicLong#weakCompareAndSetRelease(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicLongArray#length():::Returns the length of the array.
AtomicLongArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.
AtomicLongArray#set(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicLongArray#lazySet(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicLongArray#getAndSet(int, long):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicLongArray#compareAndSet(int, long, long):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicLongArray#weakCompareAndSet(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicLongArray#weakCompareAndSetPlain(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicLongArray#getAndIncrement(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicLongArray#getAndDecrement(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicLongArray#getAndAdd(int, long):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.
AtomicLongArray#incrementAndGet(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicLongArray#decrementAndGet(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd
AtomicLongArray#addAndGet(int, long):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.
AtomicLongArray#getAndUpdate(int, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value
AtomicLongArray#updateAndGet(int, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value
AtomicLongArray#getAndAccumulate(int, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value
AtomicLongArray#accumulateAndGet(int, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value
AtomicLongArray#toString():::Returns the String representation of the current values of array.
AtomicLongArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.
AtomicLongArray#setPlain(int, long):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicLongArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.
AtomicLongArray#setOpaque(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicLongArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.
AtomicLongArray#setRelease(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicLongArray#compareAndExchange(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicLongArray#compareAndExchangeAcquire(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicLongArray#compareAndExchangeRelease(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicLongArray#weakCompareAndSetVolatile(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicLongArray#weakCompareAndSetAcquire(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicLongArray#weakCompareAndSetRelease(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicLongFieldUpdater#newUpdater(Class, String):::Creates and returns an updater for objects with the given field
AtomicLongFieldUpdater#compareAndSet(T, long, long):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicLongFieldUpdater#weakCompareAndSet(T, long, long):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicLongFieldUpdater#set(T, long):::Sets the field of the given object managed by this updater to the given updated value
AtomicLongFieldUpdater#lazySet(T, long):::Eventually sets the field of the given object managed by this updater to the given updated value.
AtomicLongFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.
AtomicLongFieldUpdater#getAndSet(T, long):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
AtomicLongFieldUpdater#getAndIncrement(T):::Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#getAndDecrement(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#getAndAdd(T, long):::Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#incrementAndGet(T):::Atomically increments by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#decrementAndGet(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#addAndGet(T, long):::Atomically adds the given value to the current value of the field of the given object managed by this updater.
AtomicLongFieldUpdater#getAndUpdate(T, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value
AtomicLongFieldUpdater#updateAndGet(T, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value
AtomicLongFieldUpdater#getAndAccumulate(T, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value
AtomicLongFieldUpdater#accumulateAndGet(T, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value
AtomicLongFieldUpdater#isAncestor(ClassLoader, ClassLoader):::Returns true if the second classloader can be found in the first classloader's delegation chain
AtomicLongFieldUpdater#isSamePackage(Class, Class):::Returns true if the two classes have the same class loader and package qualifier
AtomicMarkableReference#getReference():::Returns the current value of the reference.
AtomicMarkableReference#isMarked():::Returns the current value of the mark.
AtomicMarkableReference#get(boolean[]):::Returns the current values of both the reference and the mark
AtomicMarkableReference#weakCompareAndSet(V, V, boolean, boolean):::Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark
AtomicMarkableReference#compareAndSet(V, V, boolean, boolean):::Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.
AtomicMarkableReference#set(V, boolean):::Unconditionally sets the value of both the reference and mark.
AtomicMarkableReference#attemptMark(V, boolean):::Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference
AtomicReference#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.
AtomicReference#set(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicReference#lazySet(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicReference#compareAndSet(V, V):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicReference#weakCompareAndSet(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicReference#weakCompareAndSetPlain(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicReference#getAndSet(V):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicReference#getAndUpdate(UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value
AtomicReference#updateAndGet(UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value
AtomicReference#getAndAccumulate(V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value
AtomicReference#accumulateAndGet(V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value
AtomicReference#toString():::Returns the String representation of the current value.
AtomicReference#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.
AtomicReference#setPlain(V):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicReference#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.
AtomicReference#setOpaque(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicReference#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.
AtomicReference#setRelease(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicReference#compareAndExchange(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicReference#compareAndExchangeAcquire(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicReference#compareAndExchangeRelease(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicReference#weakCompareAndSetVolatile(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicReference#weakCompareAndSetAcquire(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicReference#weakCompareAndSetRelease(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicReferenceArray#length():::Returns the length of the array.
AtomicReferenceArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.
AtomicReferenceArray#set(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.
AtomicReferenceArray#lazySet(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicReferenceArray#getAndSet(int, E):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.
AtomicReferenceArray#compareAndSet(int, E, E):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.
AtomicReferenceArray#weakCompareAndSet(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicReferenceArray#weakCompareAndSetPlain(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.
AtomicReferenceArray#getAndUpdate(int, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value
AtomicReferenceArray#updateAndGet(int, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value
AtomicReferenceArray#getAndAccumulate(int, E, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value
AtomicReferenceArray#accumulateAndGet(int, E, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value
AtomicReferenceArray#toString():::Returns the String representation of the current values of array.
AtomicReferenceArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.
AtomicReferenceArray#setPlain(int, E):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.
AtomicReferenceArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.
AtomicReferenceArray#setOpaque(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.
AtomicReferenceArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.
AtomicReferenceArray#setRelease(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.
AtomicReferenceArray#compareAndExchange(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.
AtomicReferenceArray#compareAndExchangeAcquire(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.
AtomicReferenceArray#compareAndExchangeRelease(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.
AtomicReferenceArray#weakCompareAndSetVolatile(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.
AtomicReferenceArray#weakCompareAndSetAcquire(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.
AtomicReferenceArray#weakCompareAndSetRelease(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.
AtomicReferenceFieldUpdater#newUpdater(Class, Class, String):::Creates and returns an updater for objects with the given field
AtomicReferenceFieldUpdater#compareAndSet(T, V, V):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicReferenceFieldUpdater#weakCompareAndSet(T, V, V):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value
AtomicReferenceFieldUpdater#set(T, V):::Sets the field of the given object managed by this updater to the given updated value
AtomicReferenceFieldUpdater#lazySet(T, V):::Eventually sets the field of the given object managed by this updater to the given updated value.
AtomicReferenceFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.
AtomicReferenceFieldUpdater#getAndSet(T, V):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.
AtomicReferenceFieldUpdater#getAndUpdate(T, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value
AtomicReferenceFieldUpdater#updateAndGet(T, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value
AtomicReferenceFieldUpdater#getAndAccumulate(T, V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value
AtomicReferenceFieldUpdater#accumulateAndGet(T, V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value
AtomicStampedReference#getReference():::Returns the current value of the reference.
AtomicStampedReference#getStamp():::Returns the current value of the stamp.
AtomicStampedReference#get(int[]):::Returns the current values of both the reference and the stamp
AtomicStampedReference#weakCompareAndSet(V, V, int, int):::Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp
AtomicStampedReference#compareAndSet(V, V, int, int):::Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.
AtomicStampedReference#set(V, int):::Unconditionally sets the value of both the reference and stamp.
AtomicStampedReference#attemptStamp(V, int):::Atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference
DoubleAccumulator#accumulate(double):::Updates with the given value.
DoubleAccumulator#get():::Returns the current value
DoubleAccumulator#reset():::Resets variables maintaining updates to the identity value
DoubleAccumulator#getThenReset():::Equivalent in effect to #get followed by #reset
DoubleAccumulator#toString():::Returns the String representation of the current value.
DoubleAccumulator#doubleValue():::Equivalent to #get.
DoubleAccumulator#longValue():::Returns the #get current value as a long after a narrowing primitive conversion.
DoubleAccumulator#intValue():::Returns the #get current value as an int after a narrowing primitive conversion.
DoubleAccumulator#floatValue():::Returns the #get current value as a float after a narrowing primitive conversion.
DoubleAdder#add(double):::Adds the given value.
DoubleAdder#sum():::Returns the current sum
DoubleAdder#reset():::Resets variables maintaining the sum to zero
DoubleAdder#sumThenReset():::Equivalent in effect to #sum followed by #reset
DoubleAdder#toString():::Returns the String representation of the #sum.
DoubleAdder#doubleValue():::Equivalent to #sum.
DoubleAdder#longValue():::Returns the #sum as a long after a narrowing primitive conversion.
DoubleAdder#intValue():::Returns the #sum as an int after a narrowing primitive conversion.
DoubleAdder#floatValue():::Returns the #sum as a float after a narrowing primitive conversion.
LongAccumulator#accumulate(long):::Updates with the given value.
LongAccumulator#get():::Returns the current value
LongAccumulator#reset():::Resets variables maintaining updates to the identity value
LongAccumulator#getThenReset():::Equivalent in effect to #get followed by #reset
LongAccumulator#toString():::Returns the String representation of the current value.
LongAccumulator#longValue():::Equivalent to #get.
LongAccumulator#intValue():::Returns the #get current value as an int after a narrowing primitive conversion.
LongAccumulator#floatValue():::Returns the #get current value as a float after a widening primitive conversion.
LongAccumulator#doubleValue():::Returns the #get current value as a double after a widening primitive conversion.
LongAdder#add(long):::Adds the given value.
LongAdder#increment():::Equivalent to add(1).
LongAdder#decrement():::Equivalent to add(-1).
LongAdder#sum():::Returns the current sum
LongAdder#reset():::Resets variables maintaining the sum to zero
LongAdder#sumThenReset():::Equivalent in effect to #sum followed by #reset
LongAdder#toString():::Returns the String representation of the #sum.
LongAdder#longValue():::Equivalent to #sum.
LongAdder#intValue():::Returns the #sum as an int after a narrowing primitive conversion.
LongAdder#floatValue():::Returns the #sum as a float after a widening primitive conversion.
LongAdder#doubleValue():::Returns the #sum as a double after a widening primitive conversion.
Striped64#casBase(long, long):::CASes the base field.
Striped64#casCellsBusy():::CASes the cellsBusy field from 0 to 1 to acquire lock.
Striped64#getProbe():::Returns the probe value for the current thread
Striped64#advanceProbe(int):::Pseudo-randomly advances and records the given probe value for the given thread
Striped64#longAccumulate(long, LongBinaryOperator, boolean):::Handles cases of updates involving initialization, resizing, creating new Cells, and/or contention
Striped64#doubleAccumulate(double, DoubleBinaryOperator, boolean):::Same as longAccumulate, but injecting long/double conversions in too many places to sensibly merge with long version, given the low-overhead requirements of this class

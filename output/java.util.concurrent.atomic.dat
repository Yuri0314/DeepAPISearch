AtomicBoolean#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.:::
AtomicBoolean#compareAndSet(boolean, boolean):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::VALUE.compareAndSet
AtomicBoolean#weakCompareAndSet(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::VALUE.weakCompareAndSetPlain
AtomicBoolean#weakCompareAndSetPlain(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::VALUE.weakCompareAndSetPlain
AtomicBoolean#set(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.:::
AtomicBoolean#lazySet(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::VALUE.setRelease
AtomicBoolean#getAndSet(boolean):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::VALUE.getAndSet
AtomicBoolean#toString():::Returns the String representation of the current value.:::this.get->Boolean.toString
AtomicBoolean#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.:::VALUE.get
AtomicBoolean#setPlain(boolean):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::VALUE.set
AtomicBoolean#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.:::VALUE.getOpaque
AtomicBoolean#setOpaque(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.:::VALUE.setOpaque
AtomicBoolean#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.:::VALUE.getAcquire
AtomicBoolean#setRelease(boolean):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::VALUE.setRelease
AtomicBoolean#compareAndExchange(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::VALUE.compareAndExchange
AtomicBoolean#compareAndExchangeAcquire(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::VALUE.compareAndExchangeAcquire
AtomicBoolean#compareAndExchangeRelease(boolean, boolean):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::VALUE.compareAndExchangeRelease
AtomicBoolean#weakCompareAndSetVolatile(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::VALUE.weakCompareAndSet
AtomicBoolean#weakCompareAndSetAcquire(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::VALUE.weakCompareAndSetAcquire
AtomicBoolean#weakCompareAndSetRelease(boolean, boolean):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::VALUE.weakCompareAndSetRelease
AtomicInteger#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.:::
AtomicInteger#set(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.:::
AtomicInteger#lazySet(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::U.putIntRelease
AtomicInteger#getAndSet(int):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::U.getAndSetInt
AtomicInteger#compareAndSet(int, int):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::U.compareAndSetInt
AtomicInteger#weakCompareAndSet(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::U.weakCompareAndSetIntPlain
AtomicInteger#weakCompareAndSetPlain(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::U.weakCompareAndSetIntPlain
AtomicInteger#getAndIncrement():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd:::U.getAndAddInt
AtomicInteger#getAndDecrement():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd:::U.getAndAddInt
AtomicInteger#getAndAdd(int):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.:::U.getAndAddInt
AtomicInteger#incrementAndGet():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd:::U.getAndAddInt
AtomicInteger#decrementAndGet():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd:::U.getAndAddInt
AtomicInteger#addAndGet(int):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.:::U.getAndAddInt
AtomicInteger#getAndUpdate(IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value:::this.get->updateFunction.applyAsInt->this.weakCompareAndSetVolatile->this.get
AtomicInteger#updateAndGet(IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value:::this.get->updateFunction.applyAsInt->this.weakCompareAndSetVolatile->this.get
AtomicInteger#getAndAccumulate(int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value:::this.get->accumulatorFunction.applyAsInt->this.weakCompareAndSetVolatile->this.get
AtomicInteger#accumulateAndGet(int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value:::this.get->accumulatorFunction.applyAsInt->this.weakCompareAndSetVolatile->this.get
AtomicInteger#toString():::Returns the String representation of the current value.:::this.get->Integer.toString
AtomicInteger#intValue():::Returns the current value of this AtomicInteger as an int, with memory effects as specified by VarHandle#getVolatile:::this.get
AtomicInteger#longValue():::Returns the current value of this AtomicInteger as a long after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::this.get
AtomicInteger#floatValue():::Returns the current value of this AtomicInteger as a float after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::this.get
AtomicInteger#doubleValue():::Returns the current value of this AtomicInteger as a double after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::this.get
AtomicInteger#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.:::U.getInt
AtomicInteger#setPlain(int):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::U.putInt
AtomicInteger#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.:::U.getIntOpaque
AtomicInteger#setOpaque(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.:::U.putIntOpaque
AtomicInteger#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.:::U.getIntAcquire
AtomicInteger#setRelease(int):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::U.putIntRelease
AtomicInteger#compareAndExchange(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::U.compareAndExchangeInt
AtomicInteger#compareAndExchangeAcquire(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::U.compareAndExchangeIntAcquire
AtomicInteger#compareAndExchangeRelease(int, int):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::U.compareAndExchangeIntRelease
AtomicInteger#weakCompareAndSetVolatile(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::U.weakCompareAndSetInt
AtomicInteger#weakCompareAndSetAcquire(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::U.weakCompareAndSetIntAcquire
AtomicInteger#weakCompareAndSetRelease(int, int):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::U.weakCompareAndSetIntRelease
AtomicIntegerArray#length():::Returns the length of the array.:::
AtomicIntegerArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.:::AA.getVolatile
AtomicIntegerArray#set(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.:::AA.setVolatile
AtomicIntegerArray#lazySet(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA.setRelease
AtomicIntegerArray#getAndSet(int, int):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::AA.getAndSet
AtomicIntegerArray#compareAndSet(int, int, int):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::AA.compareAndSet
AtomicIntegerArray#weakCompareAndSet(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::AA.weakCompareAndSetPlain
AtomicIntegerArray#weakCompareAndSetPlain(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::AA.weakCompareAndSetPlain
AtomicIntegerArray#getAndIncrement(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::AA.getAndAdd
AtomicIntegerArray#getAndDecrement(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::AA.getAndAdd
AtomicIntegerArray#getAndAdd(int, int):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.:::AA.getAndAdd
AtomicIntegerArray#incrementAndGet(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::AA.getAndAdd
AtomicIntegerArray#decrementAndGet(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::AA.getAndAdd
AtomicIntegerArray#addAndGet(int, int):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.:::AA.getAndAdd
AtomicIntegerArray#getAndUpdate(int, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value:::this.get->updateFunction.applyAsInt->this.weakCompareAndSetVolatile->this.get
AtomicIntegerArray#updateAndGet(int, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value:::this.get->updateFunction.applyAsInt->this.weakCompareAndSetVolatile->this.get
AtomicIntegerArray#getAndAccumulate(int, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value:::this.get->accumulatorFunction.applyAsInt->this.weakCompareAndSetVolatile->this.get
AtomicIntegerArray#accumulateAndGet(int, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value:::this.get->accumulatorFunction.applyAsInt->this.weakCompareAndSetVolatile->this.get
AtomicIntegerArray#toString():::Returns the String representation of the current values of array.:::b.append->this.get->b.append->b.append(']').toString->b.append(',').append
AtomicIntegerArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.:::AA.get
AtomicIntegerArray#setPlain(int, int):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::AA.set
AtomicIntegerArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.:::AA.getOpaque
AtomicIntegerArray#setOpaque(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.:::AA.setOpaque
AtomicIntegerArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.:::AA.getAcquire
AtomicIntegerArray#setRelease(int, int):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA.setRelease
AtomicIntegerArray#compareAndExchange(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::AA.compareAndExchange
AtomicIntegerArray#compareAndExchangeAcquire(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::AA.compareAndExchangeAcquire
AtomicIntegerArray#compareAndExchangeRelease(int, int, int):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::AA.compareAndExchangeRelease
AtomicIntegerArray#weakCompareAndSetVolatile(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::AA.weakCompareAndSet
AtomicIntegerArray#weakCompareAndSetAcquire(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::AA.weakCompareAndSetAcquire
AtomicIntegerArray#weakCompareAndSetRelease(int, int, int):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::AA.weakCompareAndSetRelease
AtomicIntegerFieldUpdater#newUpdater(Class, String):::Creates and returns an updater for objects with the given field:::Reflection.getCallerClass
AtomicIntegerFieldUpdater#compareAndSet(T, int, int):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicIntegerFieldUpdater#weakCompareAndSet(T, int, int):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicIntegerFieldUpdater#set(T, int):::Sets the field of the given object managed by this updater to the given updated value:::
AtomicIntegerFieldUpdater#lazySet(T, int):::Eventually sets the field of the given object managed by this updater to the given updated value.:::
AtomicIntegerFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.:::
AtomicIntegerFieldUpdater#getAndSet(T, int):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.:::this.get->this.compareAndSet
AtomicIntegerFieldUpdater#getAndIncrement(T):::Atomically increments by one the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicIntegerFieldUpdater#getAndDecrement(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicIntegerFieldUpdater#getAndAdd(T, int):::Atomically adds the given value to the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicIntegerFieldUpdater#incrementAndGet(T):::Atomically increments by one the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicIntegerFieldUpdater#decrementAndGet(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicIntegerFieldUpdater#addAndGet(T, int):::Atomically adds the given value to the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicIntegerFieldUpdater#getAndUpdate(T, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value:::this.get->updateFunction.applyAsInt->this.compareAndSet
AtomicIntegerFieldUpdater#updateAndGet(T, IntUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value:::this.get->updateFunction.applyAsInt->this.compareAndSet
AtomicIntegerFieldUpdater#getAndAccumulate(T, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value:::this.get->accumulatorFunction.applyAsInt->this.compareAndSet
AtomicIntegerFieldUpdater#accumulateAndGet(T, int, IntBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value:::this.get->accumulatorFunction.applyAsInt->this.compareAndSet
AtomicLong#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.:::
AtomicLong#set(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.:::U.putLongVolatile
AtomicLong#lazySet(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::U.putLongRelease
AtomicLong#getAndSet(long):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::U.getAndSetLong
AtomicLong#compareAndSet(long, long):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::U.compareAndSetLong
AtomicLong#weakCompareAndSet(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::U.weakCompareAndSetLongPlain
AtomicLong#weakCompareAndSetPlain(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::U.weakCompareAndSetLongPlain
AtomicLong#getAndIncrement():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd:::U.getAndAddLong
AtomicLong#getAndDecrement():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd:::U.getAndAddLong
AtomicLong#getAndAdd(long):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.:::U.getAndAddLong
AtomicLong#incrementAndGet():::Atomically increments the current value, with memory effects as specified by VarHandle#getAndAdd:::U.getAndAddLong
AtomicLong#decrementAndGet():::Atomically decrements the current value, with memory effects as specified by VarHandle#getAndAdd:::U.getAndAddLong
AtomicLong#addAndGet(long):::Atomically adds the given value to the current value, with memory effects as specified by VarHandle#getAndAdd.:::U.getAndAddLong
AtomicLong#getAndUpdate(LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value:::this.get->updateFunction.applyAsLong->this.weakCompareAndSetVolatile->this.get
AtomicLong#updateAndGet(LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value:::this.get->updateFunction.applyAsLong->this.weakCompareAndSetVolatile->this.get
AtomicLong#getAndAccumulate(long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value:::this.get->accumulatorFunction.applyAsLong->this.weakCompareAndSetVolatile->this.get
AtomicLong#accumulateAndGet(long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value:::this.get->accumulatorFunction.applyAsLong->this.weakCompareAndSetVolatile->this.get
AtomicLong#toString():::Returns the String representation of the current value.:::this.get->Long.toString
AtomicLong#intValue():::Returns the current value of this AtomicLong as an int after a narrowing primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::this.get
AtomicLong#longValue():::Returns the current value of this AtomicLong as a long, with memory effects as specified by VarHandle#getVolatile:::this.get
AtomicLong#floatValue():::Returns the current value of this AtomicLong as a float after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::this.get
AtomicLong#doubleValue():::Returns the current value of this AtomicLong as a double after a widening primitive conversion, with memory effects as specified by VarHandle#getVolatile.:::this.get
AtomicLong#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.:::U.getLong
AtomicLong#setPlain(long):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::U.putLong
AtomicLong#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.:::U.getLongOpaque
AtomicLong#setOpaque(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.:::U.putLongOpaque
AtomicLong#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.:::U.getLongAcquire
AtomicLong#setRelease(long):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::U.putLongRelease
AtomicLong#compareAndExchange(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::U.compareAndExchangeLong
AtomicLong#compareAndExchangeAcquire(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::U.compareAndExchangeLongAcquire
AtomicLong#compareAndExchangeRelease(long, long):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::U.compareAndExchangeLongRelease
AtomicLong#weakCompareAndSetVolatile(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::U.weakCompareAndSetLong
AtomicLong#weakCompareAndSetAcquire(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::U.weakCompareAndSetLongAcquire
AtomicLong#weakCompareAndSetRelease(long, long):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::U.weakCompareAndSetLongRelease
AtomicLongArray#length():::Returns the length of the array.:::
AtomicLongArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.:::AA.getVolatile
AtomicLongArray#set(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.:::AA.setVolatile
AtomicLongArray#lazySet(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA.setRelease
AtomicLongArray#getAndSet(int, long):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::AA.getAndSet
AtomicLongArray#compareAndSet(int, long, long):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::AA.compareAndSet
AtomicLongArray#weakCompareAndSet(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::AA.weakCompareAndSetPlain
AtomicLongArray#weakCompareAndSetPlain(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::AA.weakCompareAndSetPlain
AtomicLongArray#getAndIncrement(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::AA.getAndAdd
AtomicLongArray#getAndDecrement(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::AA.getAndAdd
AtomicLongArray#getAndAdd(int, long):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.:::AA.getAndAdd
AtomicLongArray#incrementAndGet(int):::Atomically increments the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::AA.getAndAdd
AtomicLongArray#decrementAndGet(int):::Atomically decrements the value of the element at index i, with memory effects as specified by VarHandle#getAndAdd:::AA.getAndAdd
AtomicLongArray#addAndGet(int, long):::Atomically adds the given value to the element at index i, with memory effects as specified by VarHandle#getAndAdd.:::AA.getAndAdd
AtomicLongArray#getAndUpdate(int, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value:::this.get->updateFunction.applyAsLong->this.weakCompareAndSetVolatile->this.get
AtomicLongArray#updateAndGet(int, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value:::this.get->updateFunction.applyAsLong->this.weakCompareAndSetVolatile->this.get
AtomicLongArray#getAndAccumulate(int, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value:::this.get->accumulatorFunction.applyAsLong->this.weakCompareAndSetVolatile->this.get
AtomicLongArray#accumulateAndGet(int, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value:::this.get->accumulatorFunction.applyAsLong->this.weakCompareAndSetVolatile->this.get
AtomicLongArray#toString():::Returns the String representation of the current values of array.:::b.append->this.get->b.append->b.append(']').toString->b.append(',').append
AtomicLongArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.:::AA.get
AtomicLongArray#setPlain(int, long):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::AA.set
AtomicLongArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.:::AA.getOpaque
AtomicLongArray#setOpaque(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.:::AA.setOpaque
AtomicLongArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.:::AA.getAcquire
AtomicLongArray#setRelease(int, long):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA.setRelease
AtomicLongArray#compareAndExchange(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::AA.compareAndExchange
AtomicLongArray#compareAndExchangeAcquire(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::AA.compareAndExchangeAcquire
AtomicLongArray#compareAndExchangeRelease(int, long, long):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::AA.compareAndExchangeRelease
AtomicLongArray#weakCompareAndSetVolatile(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::AA.weakCompareAndSet
AtomicLongArray#weakCompareAndSetAcquire(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::AA.weakCompareAndSetAcquire
AtomicLongArray#weakCompareAndSetRelease(int, long, long):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::AA.weakCompareAndSetRelease
AtomicLongFieldUpdater#newUpdater(Class, String):::Creates and returns an updater for objects with the given field:::Reflection.getCallerClass
AtomicLongFieldUpdater#compareAndSet(T, long, long):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicLongFieldUpdater#weakCompareAndSet(T, long, long):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicLongFieldUpdater#set(T, long):::Sets the field of the given object managed by this updater to the given updated value:::
AtomicLongFieldUpdater#lazySet(T, long):::Eventually sets the field of the given object managed by this updater to the given updated value.:::
AtomicLongFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.:::
AtomicLongFieldUpdater#getAndSet(T, long):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.:::this.get->this.compareAndSet
AtomicLongFieldUpdater#getAndIncrement(T):::Atomically increments by one the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicLongFieldUpdater#getAndDecrement(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicLongFieldUpdater#getAndAdd(T, long):::Atomically adds the given value to the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicLongFieldUpdater#incrementAndGet(T):::Atomically increments by one the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicLongFieldUpdater#decrementAndGet(T):::Atomically decrements by one the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicLongFieldUpdater#addAndGet(T, long):::Atomically adds the given value to the current value of the field of the given object managed by this updater.:::this.get->this.compareAndSet
AtomicLongFieldUpdater#getAndUpdate(T, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value:::this.get->updateFunction.applyAsLong->this.compareAndSet
AtomicLongFieldUpdater#updateAndGet(T, LongUnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value:::this.get->updateFunction.applyAsLong->this.compareAndSet
AtomicLongFieldUpdater#getAndAccumulate(T, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value:::this.get->accumulatorFunction.applyAsLong->this.compareAndSet
AtomicLongFieldUpdater#accumulateAndGet(T, long, LongBinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value:::this.get->accumulatorFunction.applyAsLong->this.compareAndSet
AtomicLongFieldUpdater#isAncestor(ClassLoader, ClassLoader):::Returns true if the second classloader can be found in the first classloader's delegation chain:::acl.getParent
AtomicLongFieldUpdater#isSamePackage(Class, Class):::Returns true if the two classes have the same class loader and package qualifier:::class1.getClassLoader->class2.getClassLoader->class1.getPackageName->class2.getPackageName->Objects.equals
AtomicMarkableReference#getReference():::Returns the current value of the reference.:::
AtomicMarkableReference#isMarked():::Returns the current value of the mark.:::
AtomicMarkableReference#get(boolean[]):::Returns the current values of both the reference and the mark:::
AtomicMarkableReference#weakCompareAndSet(V, V, boolean, boolean):::Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark:::this.compareAndSet
AtomicMarkableReference#compareAndSet(V, V, boolean, boolean):::Atomically sets the value of both the reference and mark to the given update values if the current reference is == to the expected reference and the current mark is equal to the expected mark.:::Pair.of->this.casPair
AtomicMarkableReference#set(V, boolean):::Unconditionally sets the value of both the reference and mark.:::Pair.of
AtomicMarkableReference#attemptMark(V, boolean):::Atomically sets the value of the mark to the given update value if the current reference is == to the expected reference:::Pair.of->this.casPair
AtomicReference#get():::Returns the current value, with memory effects as specified by VarHandle#getVolatile.:::
AtomicReference#set(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setVolatile.:::
AtomicReference#lazySet(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::VALUE.setRelease
AtomicReference#compareAndSet(V, V):::Atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::VALUE.compareAndSet
AtomicReference#weakCompareAndSet(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::VALUE.weakCompareAndSetPlain
AtomicReference#weakCompareAndSetPlain(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::VALUE.weakCompareAndSetPlain
AtomicReference#getAndSet(V):::Atomically sets the value to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::VALUE.getAndSet
AtomicReference#getAndUpdate(UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the previous value:::this.get->updateFunction.apply->this.weakCompareAndSetVolatile->this.get
AtomicReference#updateAndGet(UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function, returning the updated value:::this.get->updateFunction.apply->this.weakCompareAndSetVolatile->this.get
AtomicReference#getAndAccumulate(V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the previous value:::this.get->accumulatorFunction.apply->this.weakCompareAndSetVolatile->this.get
AtomicReference#accumulateAndGet(V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the current value with the results of applying the given function to the current and given values, returning the updated value:::this.get->accumulatorFunction.apply->this.weakCompareAndSetVolatile->this.get
AtomicReference#toString():::Returns the String representation of the current value.:::this.get->String.valueOf
AtomicReference#getPlain():::Returns the current value, with memory semantics of reading as if the variable was declared non-volatile.:::VALUE.get
AtomicReference#setPlain(V):::Sets the value to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::VALUE.set
AtomicReference#getOpaque():::Returns the current value, with memory effects as specified by VarHandle#getOpaque.:::VALUE.getOpaque
AtomicReference#setOpaque(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setOpaque.:::VALUE.setOpaque
AtomicReference#getAcquire():::Returns the current value, with memory effects as specified by VarHandle#getAcquire.:::VALUE.getAcquire
AtomicReference#setRelease(V):::Sets the value to newValue, with memory effects as specified by VarHandle#setRelease.:::VALUE.setRelease
AtomicReference#compareAndExchange(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::VALUE.compareAndExchange
AtomicReference#compareAndExchangeAcquire(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::VALUE.compareAndExchangeAcquire
AtomicReference#compareAndExchangeRelease(V, V):::Atomically sets the value to newValue if the current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::VALUE.compareAndExchangeRelease
AtomicReference#weakCompareAndSetVolatile(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::VALUE.weakCompareAndSet
AtomicReference#weakCompareAndSetAcquire(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::VALUE.weakCompareAndSetAcquire
AtomicReference#weakCompareAndSetRelease(V, V):::Possibly atomically sets the value to newValue if the current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::VALUE.weakCompareAndSetRelease
AtomicReferenceArray#length():::Returns the length of the array.:::
AtomicReferenceArray#get(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getVolatile.:::AA.getVolatile
AtomicReferenceArray#set(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setVolatile.:::AA.setVolatile
AtomicReferenceArray#lazySet(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA.setRelease
AtomicReferenceArray#getAndSet(int, E):::Atomically sets the element at index i to newValue and returns the old value, with memory effects as specified by VarHandle#getAndSet.:::AA.getAndSet
AtomicReferenceArray#compareAndSet(int, E, E):::Atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#compareAndSet.:::AA.compareAndSet
AtomicReferenceArray#weakCompareAndSet(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::AA.weakCompareAndSetPlain
AtomicReferenceArray#weakCompareAndSetPlain(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetPlain.:::AA.weakCompareAndSetPlain
AtomicReferenceArray#getAndUpdate(int, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the previous value:::this.get->updateFunction.apply->this.weakCompareAndSetVolatile->this.get
AtomicReferenceArray#updateAndGet(int, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function, returning the updated value:::this.get->updateFunction.apply->this.weakCompareAndSetVolatile->this.get
AtomicReferenceArray#getAndAccumulate(int, E, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the previous value:::this.get->accumulatorFunction.apply->this.weakCompareAndSetVolatile->this.get
AtomicReferenceArray#accumulateAndGet(int, E, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the element at index i with the results of applying the given function to the current and given values, returning the updated value:::this.get->accumulatorFunction.apply->this.weakCompareAndSetVolatile->this.get
AtomicReferenceArray#toString():::Returns the String representation of the current values of array.:::b.append->this.get->b.append->b.append(']').toString->b.append(',').append
AtomicReferenceArray#getPlain(int):::Returns the current value of the element at index i, with memory semantics of reading as if the variable was declared non-volatile.:::AA.get
AtomicReferenceArray#setPlain(int, E):::Sets the element at index i to newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final.:::AA.set
AtomicReferenceArray#getOpaque(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getOpaque.:::AA.getOpaque
AtomicReferenceArray#setOpaque(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setOpaque.:::AA.setOpaque
AtomicReferenceArray#getAcquire(int):::Returns the current value of the element at index i, with memory effects as specified by VarHandle#getAcquire.:::AA.getAcquire
AtomicReferenceArray#setRelease(int, E):::Sets the element at index i to newValue, with memory effects as specified by VarHandle#setRelease.:::AA.setRelease
AtomicReferenceArray#compareAndExchange(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchange.:::AA.compareAndExchange
AtomicReferenceArray#compareAndExchangeAcquire(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeAcquire.:::AA.compareAndExchangeAcquire
AtomicReferenceArray#compareAndExchangeRelease(int, E, E):::Atomically sets the element at index i to newValue if the element's current value, referred to as the witness value, == expectedValue, with memory effects as specified by VarHandle#compareAndExchangeRelease.:::AA.compareAndExchangeRelease
AtomicReferenceArray#weakCompareAndSetVolatile(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSet.:::AA.weakCompareAndSet
AtomicReferenceArray#weakCompareAndSetAcquire(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetAcquire.:::AA.weakCompareAndSetAcquire
AtomicReferenceArray#weakCompareAndSetRelease(int, E, E):::Possibly atomically sets the element at index i to newValue if the element's current value == expectedValue, with memory effects as specified by VarHandle#weakCompareAndSetRelease.:::AA.weakCompareAndSetRelease
AtomicReferenceFieldUpdater#newUpdater(Class, Class, String):::Creates and returns an updater for objects with the given field:::Reflection.getCallerClass
AtomicReferenceFieldUpdater#compareAndSet(T, V, V):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicReferenceFieldUpdater#weakCompareAndSet(T, V, V):::Atomically sets the field of the given object managed by this updater to the given updated value if the current value == the expected value:::
AtomicReferenceFieldUpdater#set(T, V):::Sets the field of the given object managed by this updater to the given updated value:::
AtomicReferenceFieldUpdater#lazySet(T, V):::Eventually sets the field of the given object managed by this updater to the given updated value.:::
AtomicReferenceFieldUpdater#get(T):::Returns the current value held in the field of the given object managed by this updater.:::
AtomicReferenceFieldUpdater#getAndSet(T, V):::Atomically sets the field of the given object managed by this updater to the given value and returns the old value.:::this.get->this.compareAndSet
AtomicReferenceFieldUpdater#getAndUpdate(T, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the previous value:::this.get->updateFunction.apply->this.compareAndSet
AtomicReferenceFieldUpdater#updateAndGet(T, UnaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function, returning the updated value:::this.get->updateFunction.apply->this.compareAndSet
AtomicReferenceFieldUpdater#getAndAccumulate(T, V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the previous value:::this.get->accumulatorFunction.apply->this.compareAndSet
AtomicReferenceFieldUpdater#accumulateAndGet(T, V, BinaryOperator):::Atomically updates (with memory effects as specified by VarHandle#compareAndSet) the field of the given object managed by this updater with the results of applying the given function to the current and given values, returning the updated value:::this.get->accumulatorFunction.apply->this.compareAndSet
AtomicStampedReference#getReference():::Returns the current value of the reference.:::
AtomicStampedReference#getStamp():::Returns the current value of the stamp.:::
AtomicStampedReference#get(int[]):::Returns the current values of both the reference and the stamp:::
AtomicStampedReference#weakCompareAndSet(V, V, int, int):::Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp:::this.compareAndSet
AtomicStampedReference#compareAndSet(V, V, int, int):::Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.:::Pair.of->this.casPair
AtomicStampedReference#set(V, int):::Unconditionally sets the value of both the reference and stamp.:::Pair.of
AtomicStampedReference#attemptStamp(V, int):::Atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference:::Pair.of->this.casPair
DoubleAccumulator#accumulate(double):::Updates with the given value.:::this.longBitsToDouble->function.applyAsDouble->this.doubleToRawLongBits->this.casBase->this.getProbe->this.longBitsToDouble->function.applyAsDouble->this.doubleToRawLongBits->c.cas->this.doubleAccumulate
DoubleAccumulator#get():::Returns the current value:::this.longBitsToDouble->this.longBitsToDouble->function.applyAsDouble
DoubleAccumulator#reset():::Resets variables maintaining updates to the identity value:::c.reset
DoubleAccumulator#getThenReset():::Equivalent in effect to #get followed by #reset:::this.getAndSetBase->this.longBitsToDouble->c.getAndSet->this.longBitsToDouble->function.applyAsDouble
DoubleAccumulator#toString():::Returns the String representation of the current value.:::this.get->Double.toString
DoubleAccumulator#doubleValue():::Equivalent to #get.:::this.get
DoubleAccumulator#longValue():::Returns the #get current value as a long after a narrowing primitive conversion.:::this.get
DoubleAccumulator#intValue():::Returns the #get current value as an int after a narrowing primitive conversion.:::this.get
DoubleAccumulator#floatValue():::Returns the #get current value as a float after a narrowing primitive conversion.:::this.get
DoubleAdder#add(double):::Adds the given value.:::Double.longBitsToDouble->Double.doubleToRawLongBits->this.casBase->this.getProbe->Double.longBitsToDouble->Double.doubleToRawLongBits->c.cas->this.doubleAccumulate
DoubleAdder#sum():::Returns the current sum:::Double.longBitsToDouble->Double.longBitsToDouble
DoubleAdder#reset():::Resets variables maintaining the sum to zero:::c.reset
DoubleAdder#sumThenReset():::Equivalent in effect to #sum followed by #reset:::this.getAndSetBase->Double.longBitsToDouble->c.getAndSet->Double.longBitsToDouble
DoubleAdder#toString():::Returns the String representation of the #sum.:::this.sum->Double.toString
DoubleAdder#doubleValue():::Equivalent to #sum.:::this.sum
DoubleAdder#longValue():::Returns the #sum as a long after a narrowing primitive conversion.:::this.sum
DoubleAdder#intValue():::Returns the #sum as an int after a narrowing primitive conversion.:::this.sum
DoubleAdder#floatValue():::Returns the #sum as a float after a narrowing primitive conversion.:::this.sum
LongAccumulator#accumulate(long):::Updates with the given value.:::function.applyAsLong->this.casBase->this.getProbe->function.applyAsLong->c.cas->this.longAccumulate
LongAccumulator#get():::Returns the current value:::function.applyAsLong
LongAccumulator#reset():::Resets variables maintaining updates to the identity value:::c.reset
LongAccumulator#getThenReset():::Equivalent in effect to #get followed by #reset:::this.getAndSetBase->c.getAndSet->function.applyAsLong
LongAccumulator#toString():::Returns the String representation of the current value.:::this.get->Long.toString
LongAccumulator#longValue():::Equivalent to #get.:::this.get
LongAccumulator#intValue():::Returns the #get current value as an int after a narrowing primitive conversion.:::this.get
LongAccumulator#floatValue():::Returns the #get current value as a float after a widening primitive conversion.:::this.get
LongAccumulator#doubleValue():::Returns the #get current value as a double after a widening primitive conversion.:::this.get
LongAdder#add(long):::Adds the given value.:::this.casBase->this.getProbe->c.cas->this.longAccumulate
LongAdder#increment():::Equivalent to add(1).:::this.add
LongAdder#decrement():::Equivalent to add(-1).:::this.add
LongAdder#sum():::Returns the current sum:::
LongAdder#reset():::Resets variables maintaining the sum to zero:::c.reset
LongAdder#sumThenReset():::Equivalent in effect to #sum followed by #reset:::this.getAndSetBase->c.getAndSet
LongAdder#toString():::Returns the String representation of the #sum.:::this.sum->Long.toString
LongAdder#longValue():::Equivalent to #sum.:::this.sum
LongAdder#intValue():::Returns the #sum as an int after a narrowing primitive conversion.:::this.sum
LongAdder#floatValue():::Returns the #sum as a float after a widening primitive conversion.:::this.sum
LongAdder#doubleValue():::Returns the #sum as a double after a widening primitive conversion.:::this.sum
Striped64#casBase(long, long):::CASes the base field.:::BASE.compareAndSet
Striped64#casCellsBusy():::CASes the cellsBusy field from 0 to 1 to acquire lock.:::CELLSBUSY.compareAndSet
Striped64#getProbe():::Returns the probe value for the current thread:::Thread.currentThread->THREAD_PROBE.get
Striped64#advanceProbe(int):::Pseudo-randomly advances and records the given probe value for the given thread:::Thread.currentThread->THREAD_PROBE.set
Striped64#longAccumulate(long, LongBinaryOperator, boolean):::Handles cases of updates involving initialization, resizing, creating new Cells, and/or contention:::this.getProbe->ThreadLocalRandom.current->this.getProbe->this.casCellsBusy->this.casBase->c.cas->this.casCellsBusy->Arrays.copyOf->this.casCellsBusy->this.advanceProbe
Striped64#doubleAccumulate(double, DoubleBinaryOperator, boolean):::Same as longAccumulate, but injecting long/double conversions in too many places to sensibly merge with long version, given the low-overhead requirements of this class:::this.getProbe->ThreadLocalRandom.current->this.getProbe->this.casCellsBusy->this.apply->this.casBase->Double.doubleToRawLongBits->this.apply->c.cas->this.casCellsBusy->Arrays.copyOf->Double.doubleToRawLongBits->this.casCellsBusy->this.advanceProbe

XPath#getLocationPaths():::Returns a representation of all location paths for this XPath:::ret->new->LocationPathArr->for->i->return
XPath#getLocationPath():::Returns a representation of the first location path for this XPath.:::return->clone
XPath#toString():::Returns a string representation of this object.:::l->Arrays->asList->s->l->stream->aPath->toString->map->Collectors->joining->collect->return
XPath#check(boolean):::Used by the #parseExpression(NamespaceContext) method to verify the assumption:::if->throw->new->XPathException
XPath#buildLocationPath(ArrayList):::Used by the #parseExpression(NamespaceContext) method to build a LocationPath object from the accumulated Steps.:::size->stepsVector->size->check->steps->new->StepArr->stepsVector->toArray->stepsVector->clear->return->new->LocationPath
XPath#parseExpression(NamespaceContext):::This method is implemented by using the XPathExprScanner and examining the list of tokens that it returns.:::xtokens->new->XPath.Tokens->scanner->new->XPath.Scanner->length->fExpression->length->success->scanner->scanExpr->if->throw->new->XPathException->stepsVector->new->ArrayList<>->locationPathsVector->new->ArrayList<>->expectingStep->while->xtokens->hasMore->token->xtokens->nextToken->switch->check->locationPathsVector->buildLocationPath->add->break->check->step->new->Axis->xtokens->nextToken->parseNodeTest->new->Step->stepsVector->add->break->check->if->xtokens->nextToken->throw->new->XPathException->step->new->Axis->xtokens->nextToken->parseNodeTest->new->Step->stepsVector->add->break->check->step->new->Axis->parseNodeTest->new->Step->stepsVector->add->break->check->if->xtokens->nextToken->throw->new->XPathException->step->new->Axis->xtokens->nextToken->parseNodeTest->new->Step->stepsVector->add->break->check->if->stepsVector->isEmpty->axis->new->Axis->nodeTest->new->NodeTest->step->new->Step->stepsVector->add->if->xtokens->hasMore->xtokens->peekToken->xtokens->nextToken->new->Axis->new->NodeTest->new->Step->stepsVector->add->break->throw->new->XPathException->throw->new->XPathException->check->break->throw->new->InternalError->check->locationPathsVector->buildLocationPath->add->return->locationPathsVector->locationPathsVector->size->new->LocationPathArr->toArray
XPath#parseNodeTest(int, Tokens, NamespaceContext):::Used by #parseExpression to parse a node test from the token list.:::switch->return->new->NodeTest->prefix->xtokens->nextTokenAsString->uri->if->context->getURI->if->throw->new->XPathException->if->return->new->NodeTest->localpart->xtokens->nextTokenAsString->rawname->fSymbolTable->addSymbol->return->new->QName->new->NodeTest->throw->new->XPathException
XPath.LocationPath#toString():::Returns a string representation of this object.:::str->new->StringBuffer->for->i->if->str->append->s->super->toString->str->s->s->indexOf->substring->append->str->append->return->str->toString
XPath.LocationPath#clone():::Returns a clone of this object.:::return->new->LocationPath
XPath.Step#toString():::Returns a string representation of this object.:::if->return->if->return->nodeTest->toString->if->return->nodeTest->toString->if->return->return
XPath.Step#clone():::Returns a clone of this object.:::return->new->Step
XPath.Axis#toString():::Returns a string representation of this object.:::switch->return->return->return->return->return
XPath.Axis#clone():::Returns a clone of this object.:::return->new->Axis
XPath.NodeTest#toString():::Returns a string representation of this object.:::switch->if->length->if->return->return->return->if->length->if->return->return->return->return->return->return
XPath.NodeTest#clone():::Returns a clone of this object.:::return->new->NodeTest
XPath.Tokens#getTokenString(int)::: tokens get token string:::return->fTokenNames->get
XPath.Tokens#addToken(String)::: tokens add token:::tokenInt->foreach->fTokenNames->entrySet->if->entry->getValue->equals->entry->getKey->if->fTokenNames->size->fTokenNames->put->addToken
XPath.Tokens#addToken(int)::: tokens add token:::try->catch->oldList->new->intArr->System->arraycopy->finally
XPath.Tokens#rewind():::Resets the current position to the head of the token list.:::
XPath.Tokens#hasMore():::Returns true if the #getNextToken() method returns a valid token.:::return
XPath.Tokens#nextToken():::Obtains the token at the current position, then advance the current position by one:::if->throw->new->XPathException->return
XPath.Tokens#peekToken():::Obtains the token at the current position, without advancing the current position:::if->throw->new->XPathException->return
XPath.Tokens#nextTokenAsString():::Obtains the token at the current position as a String:::s->nextToken->getTokenString->if->throw->new->XPathException->return
XPath.Tokens#dumpTokens()::: tokens dump tokens:::for->i->println
XPath.Scanner#scanExpr(SymbolTable, XPath.Tokens, String, int, int)::: scanner scan expr:::nameOffset->nameHandle->prefixHandle->starIsMultiplyOperator->ch->while->if->break->data->charAt->while->if->break->data->charAt->if->break->chartype->switch->addToken->if->break->break->addToken->if->break->break->addToken->if->break->break->addToken->if->break->break->if->addToken->break->data->charAt->if->addToken->else->if->addToken->scanNumber->else->if->addToken->else->if->addToken->break->else->if->do->if->break->data->charAt->while->if->addToken->break->throw->new->XPathException->else->throw->new->XPathException->if->break->break->addToken->if->break->break->addToken->if->break->break->if->return->data->charAt->if->return->addToken->if->break->break->if->addToken->break->data->charAt->if->addToken->if->break->else->addToken->break->addToken->if->break->break->addToken->if->break->break->addToken->if->break->break->addToken->if->break->break->if->return->data->charAt->if->return->addToken->if->break->break->if->addToken->break->data->charAt->if->addToken->if->break->else->addToken->break->if->addToken->break->data->charAt->if->addToken->if->break->else->addToken->break->qchar->if->return->data->charAt->litOffset->while->if->return->data->charAt->litLength->addToken->tokens->symbolTable->data->substring->addSymbol->addToken->if->break->break->addToken->scanNumber->break->if->return->scanNCName->if->return->if->data->charAt->else->symbolTable->data->substring->addSymbol->if->else->if->return->scanNCName->if->return->if->data->charAt->else->symbolTable->data->substring->addSymbol->addToken->tokens->addToken->tokens->addToken->break->if->addToken->else->addToken->if->break->break->scanNCName->if->return->if->data->charAt->else->symbolTable->data->substring->addSymbol->isNameTestNCName->isAxisName->if->if->return->data->charAt->if->if->data->charAt->else->if->if->data->charAt->else->scanNCName->if->return->if->data->charAt->else->symbolTable->data->substring->addSymbol->while->if->break->data->charAt->if->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->return->if->return->else->if->return->break->if->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->addToken->tokens->addToken->tokens->addToken->addToken->if->break->break->if->data->charAt->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->if->addToken->else->return->if->return->addToken->if->if->break->break->if->addToken->tokens->addToken->else->addToken->tokens->addToken->tokens->addToken->break->return->if->tokens->dumpTokens->return
XPath.Scanner#scanNCName(String, int, int)::: scanner scan name:::ch->data->charAt->if->if->XMLChar->isNameStart->return->else->chartype->if->return->while->data->charAt->if->if->XMLChar->isName->break->else->chartype->if->break->return
XPath.Scanner#scanNumber(XPath.Tokens, String, int, int)::: scanner scan number:::ch->data->charAt->whole->part->while->if->break->data->charAt->if->if->data->charAt->while->if->break->data->charAt->if->throw->new->RuntimeException->tokens->addToken->tokens->addToken->return
XPath.Scanner#addToken(XPath.Tokens, int):::This method adds the specified token to the token list:::tokens->addToken
XPath#main(String[]):::Main program entry.:::for->i
XPathException#getKey()::: path exception get key:::return

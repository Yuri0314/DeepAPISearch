GDIBlitLoops#register():::Note that we do not register loops to 8-byte destinations:::primitives->new->GDIBlitLoops->new->GDIBlitLoops->new->GDIBlitLoops->new->GDIBlitLoops->new->GDIBlitLoops->new->GDIBlitLoops->new->GDIBlitLoops->GraphicsPrimitiveMgr->register
GDIBlitLoops#nativeBlit(SurfaceData, SurfaceData, Region, int, int, int, int, int, int, int, int, int, boolean):::nativeBlit This native method is where all of the work happens in the accelerated Blit.:::
GDIBlitLoops#Blit(SurfaceData, SurfaceData, Composite, Region, int, int, int, int, int, int):::Blit This method wraps the nativeBlit call, sending in additional info on whether the native method needs to get LUT info from the source image:::nativeBlit
GDIRenderer#doDrawLine(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: renderer do draw line:::
GDIRenderer#drawLine(SunGraphics2D, int, int, int, int)::: renderer draw line:::transx->transy->try->sg2d->getCompClip->doDrawLine->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doDrawRect(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: renderer do draw rect:::
GDIRenderer#drawRect(SunGraphics2D, int, int, int, int)::: renderer draw rect:::try->sg2d->getCompClip->doDrawRect->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doDrawRoundRect(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int, int, int)::: renderer do draw round rect:::
GDIRenderer#drawRoundRect(SunGraphics2D, int, int, int, int, int, int)::: renderer draw round rect:::try->sg2d->getCompClip->doDrawRoundRect->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doDrawOval(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: renderer do draw oval:::
GDIRenderer#drawOval(SunGraphics2D, int, int, int, int)::: renderer draw oval:::try->sg2d->getCompClip->doDrawOval->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doDrawArc(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int, int, int)::: renderer do draw arc:::
GDIRenderer#drawArc(SunGraphics2D, int, int, int, int, int, int)::: renderer draw arc:::try->sg2d->getCompClip->doDrawArc->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doDrawPoly(GDIWindowSurfaceData, Region, Composite, int, int, int, int[], int[], int, boolean)::: renderer do draw poly:::
GDIRenderer#drawPolyline(SunGraphics2D, int[], int[], int)::: renderer draw polyline:::try->sg2d->getCompClip->doDrawPoly->catch->throw->new->InvalidPipeException->finally
GDIRenderer#drawPolygon(SunGraphics2D, int[], int[], int)::: renderer draw polygon:::try->sg2d->getCompClip->doDrawPoly->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doFillRect(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: renderer do fill rect:::
GDIRenderer#fillRect(SunGraphics2D, int, int, int, int)::: renderer fill rect:::try->sg2d->getCompClip->doFillRect->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doFillRoundRect(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int, int, int)::: renderer do fill round rect:::
GDIRenderer#fillRoundRect(SunGraphics2D, int, int, int, int, int, int)::: renderer fill round rect:::try->sg2d->getCompClip->doFillRoundRect->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doFillOval(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: renderer do fill oval:::
GDIRenderer#fillOval(SunGraphics2D, int, int, int, int)::: renderer fill oval:::try->sg2d->getCompClip->doFillOval->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doFillArc(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int, int, int)::: renderer do fill arc:::
GDIRenderer#fillArc(SunGraphics2D, int, int, int, int, int, int)::: renderer fill arc:::try->sg2d->getCompClip->doFillArc->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doFillPoly(GDIWindowSurfaceData, Region, Composite, int, int, int, int[], int[], int)::: renderer do fill poly:::
GDIRenderer#fillPolygon(SunGraphics2D, int[], int[], int)::: renderer fill polygon:::try->sg2d->getCompClip->doFillPoly->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doShape(GDIWindowSurfaceData, Region, Composite, int, int, int, Path2D.Float, boolean)::: renderer do shape:::
GDIRenderer#doShape(SunGraphics2D, Shape, boolean)::: renderer do shape:::p2df->transX->transY->if->if->else->new->Path2D.Float->else->new->Path2D.Float->try->sg2d->getCompClip->doShape->catch->throw->new->InvalidPipeException->finally
GDIRenderer#doFillSpans(SunGraphics2D, SpanIterator)::: renderer do fill spans:::box->new->intArr->sd->try->catch->throw->new->InvalidPipeException->finally->clip->sg2d->getCompClip->comp->eargb->while->si->nextSpan->doFillRect
GDIRenderer#draw(SunGraphics2D, Shape)::: renderer draw:::if->doShape->else->if->si->LoopPipe->getStrokeSpans->try->doFillSpans->catch->finally->si->dispose->else->createStrokedShape->doShape
GDIRenderer#fill(SunGraphics2D, Shape)::: renderer fill:::doShape
GDIRenderer#devCopyArea(GDIWindowSurfaceData, int, int, int, int, int, int)::: renderer dev copy area:::
GDIRenderer#traceWrap()::: renderer trace wrap:::return->new->Tracer
GDIRenderer.Tracer#doDrawLine(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: tracer do draw line:::GraphicsPrimitive->tracePrimitive->super->doDrawLine
GDIRenderer.Tracer#doDrawRect(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: tracer do draw rect:::GraphicsPrimitive->tracePrimitive->super->doDrawRect
GDIRenderer.Tracer#doDrawRoundRect(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int, int, int)::: tracer do draw round rect:::GraphicsPrimitive->tracePrimitive->super->doDrawRoundRect
GDIRenderer.Tracer#doDrawOval(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: tracer do draw oval:::GraphicsPrimitive->tracePrimitive->super->doDrawOval
GDIRenderer.Tracer#doDrawArc(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int, int, int)::: tracer do draw arc:::GraphicsPrimitive->tracePrimitive->super->doDrawArc
GDIRenderer.Tracer#doDrawPoly(GDIWindowSurfaceData, Region, Composite, int, int, int, int[], int[], int, boolean)::: tracer do draw poly:::GraphicsPrimitive->tracePrimitive->super->doDrawPoly
GDIRenderer.Tracer#doFillRect(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: tracer do fill rect:::GraphicsPrimitive->tracePrimitive->super->doFillRect
GDIRenderer.Tracer#doFillRoundRect(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int, int, int)::: tracer do fill round rect:::GraphicsPrimitive->tracePrimitive->super->doFillRoundRect
GDIRenderer.Tracer#doFillOval(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int)::: tracer do fill oval:::GraphicsPrimitive->tracePrimitive->super->doFillOval
GDIRenderer.Tracer#doFillArc(GDIWindowSurfaceData, Region, Composite, int, int, int, int, int, int, int)::: tracer do fill arc:::GraphicsPrimitive->tracePrimitive->super->doFillArc
GDIRenderer.Tracer#doFillPoly(GDIWindowSurfaceData, Region, Composite, int, int, int, int[], int[], int)::: tracer do fill poly:::GraphicsPrimitive->tracePrimitive->super->doFillPoly
GDIRenderer.Tracer#doShape(GDIWindowSurfaceData, Region, Composite, int, int, int, Path2D.Float, boolean)::: tracer do shape:::GraphicsPrimitive->tracePrimitive->super->doShape
GDIRenderer.Tracer#devCopyArea(GDIWindowSurfaceData, int, int, int, int, int, int)::: tracer dev copy area:::GraphicsPrimitive->tracePrimitive->super->devCopyArea
GDIWindowSurfaceData#initIDs(Class)::: window surface data init ds:::
GDIWindowSurfaceData#getSurfaceType(ColorModel)::: window surface data get surface type:::switch->cm->getPixelSize->if->if->getRedMask->return->else->return->else->return->return->if->getBlueMask->return->else->return->if->cm->getColorSpace->getType->return->else->if->isOpaqueGray->return->else->return->throw->cm->getPixelSize->new->sun.java2d.InvalidPipeException
GDIWindowSurfaceData#createData(WComponentPeer)::: window surface data create data:::sType->peer->getDeviceColorModel->getSurfaceType->return->new->GDIWindowSurfaceData
GDIWindowSurfaceData#makeProxyFor(SurfaceData)::: window surface data make proxy for:::return
GDIWindowSurfaceData#getRaster(int, int, int, int)::: window surface data get raster:::throw->new->InternalError
GDIWindowSurfaceData#validatePipe(SunGraphics2D)::: window surface data validate pipe:::if->if->super->validatePipe->else->switch->break->break->switch->sg2d->getFontInfo->break->break->if->else->if->else->if->getRenderLoops->else->super->validatePipe
GDIWindowSurfaceData#getRenderLoops(SunGraphics2D)::: window surface data get render loops:::if->return->return->super->getRenderLoops
GDIWindowSurfaceData#getDeviceConfiguration()::: window surface data get device configuration:::return
GDIWindowSurfaceData#initOps(WComponentPeer, int, int, int, int, int):::Initializes the native Ops pointer.:::
GDIWindowSurfaceData#getDefaultScaleX()::: window surface data get default scale x:::return
GDIWindowSurfaceData#getDefaultScaleY()::: window surface data get default scale y:::return
GDIWindowSurfaceData#getReplacement():::  Overridden to use ScreenUpdateManager to obtain the replacement surface.:::mgr->ScreenUpdateManager->getInstance->return->mgr->getReplacementScreenSurface
GDIWindowSurfaceData#getBounds()::: window surface data get bounds:::r->peer->getBounds->Region->clipRound->Region->clipRound->return
GDIWindowSurfaceData#copyArea(SunGraphics2D, int, int, int, int, int, int)::: window surface data copy area:::comptype->if->equals->equals->dstx1->dsty1->dstx2->dsty2->clip->sg2d->getCompClip->if->clip->getLoX->clip->getLoX->if->clip->getLoY->clip->getLoY->if->clip->getHiX->clip->getHiX->if->clip->getHiY->clip->getHiY->if->gdiPipe->devCopyArea->return->return
GDIWindowSurfaceData#invalidateSD()::: window surface data invalidate d:::
GDIWindowSurfaceData#invalidate()::: window surface data invalidate:::if->isValid->invalidateSD->super->invalidate
GDIWindowSurfaceData#getDestination():::Returns destination Component associated with this SurfaceData.:::return->peer->getTarget
GDIWindowSurfaceData#getPeer()::: window surface data get peer:::return
WindowsFlags#initNativeFlags()::: windows flags init native flags:::
WindowsFlags#initFlags()::: windows flags init flags:::
WindowsFlags#getBooleanProp(String, boolean)::: windows flags get boolean prop:::propString->System->getProperty->returnVal->if->if->propString->equals->propString->equals->propString->equals->propString->equals->propString->equals->else->if->propString->equals->propString->equals->propString->equals->propString->equals->return
WindowsFlags#isBooleanPropTrueVerbose(String)::: windows flags is boolean prop true verbose:::propString->System->getProperty->if->if->propString->equals->propString->equals->return->return
WindowsFlags#getIntProp(String, int)::: windows flags get int prop:::propString->System->getProperty->returnVal->if->try->Integer->parseInt->catch->finally->return
WindowsFlags#getPropertySet(String)::: windows flags get property set:::propString->System->getProperty->return
WindowsFlags#initJavaFlags()::: windows flags init java flags:::new->java.security.PrivilegedAction<Object>->doPrivileged
WindowsFlags#isD3DEnabled()::: windows flags is d3 enabled:::return
WindowsFlags#isD3DSet()::: windows flags is d3 set:::return
WindowsFlags#isD3DOnScreenEnabled()::: windows flags is d3 on screen enabled:::return
WindowsFlags#isD3DVerbose()::: windows flags is d3 verbose:::return
WindowsFlags#isGdiBlitEnabled()::: windows flags is gdi blit enabled:::return
WindowsFlags#isOffscreenSharingEnabled()::: windows flags is offscreen sharing enabled:::return
WindowsFlags#isMagPresent()::: windows flags is mag present:::return
WindowsFlags#isOGLEnabled()::: windows flags is enabled:::return
WindowsFlags#isOGLVerbose()::: windows flags is verbose:::return

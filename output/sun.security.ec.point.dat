AffinePoint#getX()::: affine point get x:::return
AffinePoint#getY()::: affine point get y:::return
AffinePoint#equals(Object)::: affine point equals:::if->return->p->xEquals->x->asBigInteger->asBigInteger->equals->yEquals->y->asBigInteger->asBigInteger->equals->return
AffinePoint#hashCode()::: affine point hash code:::return->Objects->hash
AffinePoint#toString()::: affine point to string:::return->x->asBigInteger->toString->y->asBigInteger->toString
MutablePoint#setValue(AffinePoint)::: mutable point set value:::
MutablePoint#setValue(Point)::: mutable point set value:::
MutablePoint#conditionalSet(Point, int)::: mutable point conditional set:::
Point#getField()::: point get field:::
Point#asAffine()::: point as affine:::
Point#fixed()::: point fixed:::
Point#mutable()::: point mutable:::
ProjectivePoint#getField()::: projective point get field:::return->getField
ProjectivePoint#fixed()::: projective point fixed:::return->x->fixed->y->fixed->z->fixed->new->Immutable
ProjectivePoint#mutable()::: projective point mutable:::return->x->mutable->y->mutable->z->mutable->new->Mutable
ProjectivePoint#getX()::: projective point get x:::return
ProjectivePoint#getY()::: projective point get y:::return
ProjectivePoint#getZ()::: projective point get z:::return
ProjectivePoint#asAffine()::: projective point as affine:::zInv->z->multiplicativeInverse->return->x->multiply->y->multiply->new->AffinePoint
ProjectivePoint.Mutable#conditionalSet(Point, int)::: mutable conditional set:::if->throw->new->RuntimeException->pp->return->conditionalSet
ProjectivePoint.Mutable#conditionalSet(ProjectivePoint, int)::: mutable conditional set:::x->conditionalSet->y->conditionalSet->z->conditionalSet->return
ProjectivePoint.Mutable#setValue(AffinePoint)::: mutable set value:::x->p->getX->setValue->y->p->getY->setValue->z->p->getX->getField->get1->setValue->return
ProjectivePoint.Mutable#setValue(Point)::: mutable set value:::if->throw->new->RuntimeException->pp->return->setValue
ProjectivePoint.Mutable#setValue(ProjectivePoint)::: mutable set value:::x->setValue->y->setValue->z->setValue->return

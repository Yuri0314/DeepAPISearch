SAXResult#setHandler(ContentHandler):::Set the target to be a SAX2 org.xml.sax.ContentHandler.:::
SAXResult#getHandler():::Get the org.xml.sax.ContentHandler that is the Result.:::return
SAXResult#setLexicalHandler(LexicalHandler):::Set the SAX2 org.xml.sax.ext.LexicalHandler for the output:::
SAXResult#getLexicalHandler():::Get a SAX2 org.xml.sax.ext.LexicalHandler for the output.:::return
SAXResult#setSystemId(String):::Method setSystemId Set the systemID that may be used in association with the org.xml.sax.ContentHandler.:::
SAXResult#getSystemId():::Get the system identifier that was set with setSystemId.:::return
SAXSource#setXMLReader(XMLReader):::Set the XMLReader to be used for the Source.:::
SAXSource#getXMLReader():::Get the XMLReader to be used for the Source.:::return
SAXSource#setInputSource(InputSource):::Set the SAX InputSource to be used for the Source.:::
SAXSource#getInputSource():::Get the SAX InputSource to be used for the Source.:::return
SAXSource#setSystemId(String):::Set the system identifier for this Source:::if->new->InputSource->else->inputSource->setSystemId
SAXSource#getSystemId():::Get the base ID (URI or system ID) from where URIs will be resolved.:::if->return->else->return->inputSource->getSystemId
SAXSource#sourceToInputSource(Source):::Attempt to obtain a SAX InputSource object from a Source object.:::if->return->getInputSource->else->if->ss->isource->ss->getSystemId->new->InputSource->isource->ss->getInputStream->setByteStream->isource->ss->getReader->setCharacterStream->isource->ss->getPublicId->setPublicId->return->else->return
SAXSource#isEmpty():::Indicates whether the SAXSource object is empty:::return->getSystemId->inputSource->isEmpty
SAXTransformerFactory#newTransformerHandler(Source):::Get a TransformerHandler object that can process SAX ContentHandler events into a Result, based on the transformation instructions specified by the argument.:::
SAXTransformerFactory#newTransformerHandler(Templates):::Get a TransformerHandler object that can process SAX ContentHandler events into a Result, based on the Templates argument.:::
SAXTransformerFactory#newTransformerHandler():::Get a TransformerHandler object that can process SAX ContentHandler events into a Result:::
SAXTransformerFactory#newTemplatesHandler():::Get a TemplatesHandler object that can process SAX ContentHandler events into a Templates object.:::
SAXTransformerFactory#newXMLFilter(Source):::Create an XMLFilter that uses the given Source as the transformation instructions.:::
SAXTransformerFactory#newXMLFilter(Templates):::Create an XMLFilter, based on the Templates argument..:::
TemplatesHandler#getTemplates():::When a TemplatesHandler object is used as a ContentHandler for the parsing of transformation instructions, it creates a Templates object, which the caller can get once the SAX events have been completed.:::
TemplatesHandler#setSystemId(String):::Set the base ID (URI or system ID) for the Templates object created by this builder:::
TemplatesHandler#getSystemId():::Get the base ID (URI or system ID) from where relative URLs will be resolved.:::
TransformerHandler#setResult(Result):::Set  the Result associated with this TransformerHandler to be used for the transformation.:::
TransformerHandler#setSystemId(String):::Set the base ID (URI or system ID) from where relative URLs will be resolved.:::
TransformerHandler#getSystemId():::Get the base ID (URI or system ID) from where relative URLs will be resolved.:::
TransformerHandler#getTransformer():::Get the Transformer associated with this handler, which is needed in order to set parameters and output properties.:::

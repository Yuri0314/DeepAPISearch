org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#getStaticFinalObject()->Object::: ahead of time compilation test get static final object
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#setUp()->void::: ahead of time compilation test set up
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testStaticFinalObjectAOT()->void::: ahead of time compilation test test static final object t
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testStaticFinalObject()->void::: ahead of time compilation test test static final object
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#getClassObject()->Class::: ahead of time compilation test get class object
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testClassObjectAOT()->void::: ahead of time compilation test test class object t
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testClassObject()->void::: ahead of time compilation test test class object
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#getPrimitiveClassObject()->Class::: ahead of time compilation test get primitive class object
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testPrimitiveClassObjectAOT()->void::: ahead of time compilation test test primitive class object t
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testPrimitiveClassObject()->void::: ahead of time compilation test test primitive class object
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#getStringObject()->String::: ahead of time compilation test get string object
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testStringObjectAOT()->void::: ahead of time compilation test test string object t
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testStringObject()->void::: ahead of time compilation test test string object
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#getBoxedBoolean()->Boolean::: ahead of time compilation test get boxed boolean
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testBoxedBooleanAOT()->void::: ahead of time compilation test test boxed boolean t
org.graalvm.compiler.hotspot.test.AheadOfTimeCompilationTest#testBoxedBoolean()->void::: ahead of time compilation test test boxed boolean
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)->InstalledCode::: array copy intrinsification test get code
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#test0()->void::: array copy intrinsification test test0
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#test1()->void::: array copy intrinsification test test1
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testByte()->void::: array copy intrinsification test test byte
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testChar()->void::: array copy intrinsification test test char
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testShort()->void::: array copy intrinsification test test short
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testInt()->void::: array copy intrinsification test test int
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testFloat()->void::: array copy intrinsification test test float
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testLong()->void::: array copy intrinsification test test long
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testDouble()->void::: array copy intrinsification test test double
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testObject()->void::: array copy intrinsification test test object
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testArrayStoreException()->void:::Tests ArrayCopySnippets#arraycopyGenericSnippet with checkcast.
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testDisjointObject()->void::: array copy intrinsification test test disjoint object
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testObjectExact()->void::: array copy intrinsification test test object exact
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#genericArraycopy(Object, int, Object, int, int)->Object::: array copy intrinsification test generic arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#objectArraycopy(Object[], int, Object[], int, int)->Object[]::: array copy intrinsification test object arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#objectArraycopyExact(Integer[], int, Integer[], int, int)->Object[]::: array copy intrinsification test object arraycopy exact
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#booleanArraycopy(boolean[], int, boolean[], int, int)->boolean[]::: array copy intrinsification test boolean arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#byteArraycopy(byte[], int, byte[], int, int)->byte[]::: array copy intrinsification test byte arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#charArraycopy(char[], int, char[], int, int)->char[]::: array copy intrinsification test char arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#shortArraycopy(short[], int, short[], int, int)->short[]::: array copy intrinsification test short arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#intArraycopy(int[], int, int[], int, int)->int[]::: array copy intrinsification test int arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#floatArraycopy(float[], int, float[], int, int)->float[]::: array copy intrinsification test float arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#longArraycopy(long[], int, long[], int, int)->long[]::: array copy intrinsification test long arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#doubleArraycopy(double[], int, double[], int, int)->double[]::: array copy intrinsification test double arraycopy
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#testCopyRows()->void:::Test case derived from assertion while compiling  com.google.common.collect.ArrayTable(ArrayTable other).
org.graalvm.compiler.hotspot.test.ArrayCopyIntrinsificationTest#copyRows(Object[][], int, Integer)->Object[][]::: array copy intrinsification test copy rows
org.graalvm.compiler.hotspot.test.ArrayNewInstanceTest#data()->Iterable::: array new instance test data
org.graalvm.compiler.hotspot.test.ArrayNewInstanceTest#newArray(Class, int, DeoptimizationBox)->Object::: array new instance test new array
org.graalvm.compiler.hotspot.test.ArrayNewInstanceTest#testNewArray()->void::: array new instance test test new array
org.graalvm.compiler.hotspot.test.ArrayNewInstanceTest#newArrayInLoop(Class, int, int, DeoptimizationBox)->Object::: array new instance test new array in loop
org.graalvm.compiler.hotspot.test.ArrayNewInstanceTest#testNewArrayInLoop()->void::: array new instance test test new array in loop
org.graalvm.compiler.hotspot.test.BigIntegerIntrinsicsTest#testMultiplyToLen()->void::: big integer intrinsics test test multiply to len
org.graalvm.compiler.hotspot.test.BigIntegerIntrinsicsTest#testMulAdd()->void::: big integer intrinsics test test mul add
org.graalvm.compiler.hotspot.test.BigIntegerIntrinsicsTest#testMontgomery()->void::: big integer intrinsics test test montgomery
org.graalvm.compiler.hotspot.test.BigIntegerIntrinsicsTest#testMultiplyAux(BigInteger, BigInteger)->BigInteger::: big integer intrinsics test test multiply aux
org.graalvm.compiler.hotspot.test.BigIntegerIntrinsicsTest#testMontgomeryAux(BigInteger, BigInteger, BigInteger)->BigInteger::: big integer intrinsics test test montgomery aux
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testIntegerSnippet()->void::: box deoptimization test test integer snippet
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testInteger()->void::: box deoptimization test test integer
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testLongSnippet()->void::: box deoptimization test test long snippet
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testLong()->void::: box deoptimization test test long
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testCharSnippet()->void::: box deoptimization test test char snippet
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testChar()->void::: box deoptimization test test char
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testShortSnippet()->void::: box deoptimization test test short snippet
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testShort()->void::: box deoptimization test test short
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testByteSnippet()->void::: box deoptimization test test byte snippet
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testByte()->void::: box deoptimization test test byte
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testBooleanSnippet()->void::: box deoptimization test test boolean snippet
org.graalvm.compiler.hotspot.test.BoxDeoptimizationTest#testBoolean()->void::: box deoptimization test test boolean
org.graalvm.compiler.hotspot.test.CheckGraalIntrinsics#match(String, Binding, VMIntrinsicMethod)->boolean::: check graal intrinsics match
org.graalvm.compiler.hotspot.test.CheckGraalIntrinsics#findPlugin(EconomicMap>, VMIntrinsicMethod)->InvocationPlugin::: check graal intrinsics find plugin
org.graalvm.compiler.hotspot.test.CheckGraalIntrinsics#resolveIntrinsic(MetaAccessProvider, VMIntrinsicMethod)->ResolvedJavaMethod::: check graal intrinsics resolve intrinsic
org.graalvm.compiler.hotspot.test.CheckGraalIntrinsics.Refiner#refine(CheckGraalIntrinsics)->void::: refiner refine
org.graalvm.compiler.hotspot.test.CheckGraalIntrinsics#test()->void::: check graal intrinsics test
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#test(String)->StructuredGraph::: class substitutions tests test
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#assertNotInGraph(StructuredGraph, Class)->StructuredGraph::: class substitutions tests assert not in graph
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#constantIsArray()->boolean::: class substitutions tests constant is array
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#constantIsInterface()->boolean::: class substitutions tests constant is interface
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#constantIsPrimitive()->boolean::: class substitutions tests constant is primitive
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#testIsArray()->void::: class substitutions tests test is array
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#testIsInterface()->void::: class substitutions tests test is interface
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#testIsPrimitive()->void::: class substitutions tests test is primitive
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#fieldIsNotArray()->boolean::: class substitutions tests field is not array
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#testFieldIsNotArray()->void::: class substitutions tests test field is not array
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#foldComponentType()->boolean::: class substitutions tests fold component type
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#testFoldComponentType()->void::: class substitutions tests test fold component type
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#testFieldIsArray()->void::: class substitutions tests test field is array
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#fieldIsArray()->boolean::: class substitutions tests field is array
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#classIsAssignable1()->boolean::: class substitutions tests class is assignable1
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#classIsAssignable2()->boolean::: class substitutions tests class is assignable2
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#classIsAssignable3()->boolean::: class substitutions tests class is assignable3
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#classIsAssignable4()->boolean::: class substitutions tests class is assignable4
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#classIsAssignable5()->boolean::: class substitutions tests class is assignable5
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#classIsAssignable6()->boolean::: class substitutions tests class is assignable6
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#classIsAssignable7()->boolean::: class substitutions tests class is assignable7
org.graalvm.compiler.hotspot.test.ClassSubstitutionsTests#testClassIsAssignable()->void::: class substitutions tests test class is assignable
org.graalvm.compiler.hotspot.test.CompilationWrapperTest#testVMCompilation1()->void:::Tests compilation requested by the VM.
org.graalvm.compiler.hotspot.test.CompilationWrapperTest#testVMCompilation2()->void:::Tests that -Dgraal.ExitVMOnException=true works as an alias for -Dgraal.CompilationFailureAction=ExitVM.
org.graalvm.compiler.hotspot.test.CompilationWrapperTest.Probe#matches(String)->boolean::: probe matches
org.graalvm.compiler.hotspot.test.CompilationWrapperTest.Probe#test()->String::: probe test
org.graalvm.compiler.hotspot.test.CompilationWrapperTest#testVMCompilation3()->void:::Tests GraalCompilerOptions#MaxCompilationProblemsPerAction in context of a compilation requested by the VM.
org.graalvm.compiler.hotspot.test.CompilationWrapperTest#testTruffleCompilation1()->void:::Tests compilation requested by Truffle.
org.graalvm.compiler.hotspot.test.CompilationWrapperTest#testTruffleCompilation2()->void:::Tests that TruffleCompilationExceptionsAreFatal works as expected.
org.graalvm.compiler.hotspot.test.CompilationWrapperTest#testTruffleCompilation3()->void:::Tests that TrufflePerformanceWarningsAreFatal generates diagnostic output.
org.graalvm.compiler.hotspot.test.TestProgram#main(String[])->void::: test program main
org.graalvm.compiler.hotspot.test.CompileTheWorld#parseOptions(String)->EconomicMap, Object>::: compile the world parse options
org.graalvm.compiler.hotspot.test.CompileTheWorld.LibGraalParams.OptionsBuffer#getAddress()->long::: options buffer get address
org.graalvm.compiler.hotspot.test.CompileTheWorld.LibGraalParams.OptionsBuffer#free()->void::: options buffer free
org.graalvm.compiler.hotspot.test.CompileTheWorld.LibGraalParams.StackTraceBuffer#free()->void::: stack trace buffer free
org.graalvm.compiler.hotspot.test.CompileTheWorld.LibGraalParams.StackTraceBuffer#getAddress()->long::: stack trace buffer get address
org.graalvm.compiler.hotspot.test.CompileTheWorld.LibGraalParams#getStackTraceBuffer()->StackTraceBuffer:::Gets a stack trace buffer for the current thread.
org.graalvm.compiler.hotspot.test.CompileTheWorld.LibGraalParams#close()->void::: lib graal params close
org.graalvm.compiler.hotspot.test.CompileTheWorld#compile()->void:::Compiles all methods in all classes in #inputClassPath
org.graalvm.compiler.hotspot.test.CompileTheWorld#println()->void::: compile the world println
org.graalvm.compiler.hotspot.test.CompileTheWorld#println(String, Object...)->void::: compile the world println
org.graalvm.compiler.hotspot.test.CompileTheWorld#println(String)->void::: compile the world println
org.graalvm.compiler.hotspot.test.CompileTheWorld#println(boolean, String)->void::: compile the world println
org.graalvm.compiler.hotspot.test.CompileTheWorld#printStackTrace(Throwable)->void::: compile the world print stack trace
org.graalvm.compiler.hotspot.test.CompileTheWorld.ClassPathEntry#createClassLoader()->ClassLoader:::Creates a ClassLoader for loading classes from this entry.
org.graalvm.compiler.hotspot.test.CompileTheWorld.ClassPathEntry#getClassNames()->List:::Gets the list of classes available under this entry.
org.graalvm.compiler.hotspot.test.CompileTheWorld.ClassPathEntry#toString()->String::: class path entry to string
org.graalvm.compiler.hotspot.test.CompileTheWorld.ClassPathEntry#close()->void::: class path entry close
org.graalvm.compiler.hotspot.test.CompileTheWorld.DirClassPathEntry#createClassLoader()->ClassLoader::: dir class path entry create class loader
org.graalvm.compiler.hotspot.test.CompileTheWorld.DirClassPathEntry#getClassNames()->List::: dir class path entry get class names
org.graalvm.compiler.hotspot.test.CompileTheWorld.JarClassPathEntry#createClassLoader()->ClassLoader::: jar class path entry create class loader
org.graalvm.compiler.hotspot.test.CompileTheWorld.JarClassPathEntry#getClassNames()->List::: jar class path entry get class names
org.graalvm.compiler.hotspot.test.CompileTheWorld.JarClassPathEntry#close()->void::: jar class path entry close
org.graalvm.compiler.hotspot.test.CompileTheWorld.JRTClassPathEntry#createClassLoader()->ClassLoader::: class path entry create class loader
org.graalvm.compiler.hotspot.test.CompileTheWorld.JRTClassPathEntry#getClassNames()->List::: class path entry get class names
org.graalvm.compiler.hotspot.test.CompileTheWorld#compileMethodInLibgraal(long, long, boolean, boolean, long, int, int, long, int)->long::: compile the world compile method in libgraal
org.graalvm.compiler.hotspot.test.CompileTheWorld#loadHarnessOptions()->OptionValues::: compile the world load harness options
org.graalvm.compiler.hotspot.test.CompileTheWorld#main(String[])->void::: compile the world main
org.graalvm.compiler.hotspot.test.CompileTheWorldTest#testJDK()->void::: compile the world test test k
org.graalvm.compiler.hotspot.test.CompressedOopTest#test()->void::: compressed oop test test
org.graalvm.compiler.hotspot.test.CompressedOopTest#fieldTest(Object)->Object::: compressed oop test field test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test1()->void::: compressed oop test test1
org.graalvm.compiler.hotspot.test.CompressedOopTest#arrayTest(Object, Object, Object)->Object::: compressed oop test array test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test2()->void::: compressed oop test test2
org.graalvm.compiler.hotspot.test.CompressedOopTest#arrayCopyTest(Object, Object)->void::: compressed oop test array copy test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test3()->void::: compressed oop test test3
org.graalvm.compiler.hotspot.test.CompressedOopTest#compareAndSwapTest(Object, Object, Object)->void::: compressed oop test compare and swap test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test4()->void::: compressed oop test test4
org.graalvm.compiler.hotspot.test.CompressedOopTest#charArrayCopyTest(Object, Object, Object)->char[]::: compressed oop test char array copy test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test5()->void::: compressed oop test test5
org.graalvm.compiler.hotspot.test.CompressedOopTest#charContainerArrayCopyTest(Object, Object, Object)->char[]::: compressed oop test char container array copy test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test6()->void::: compressed oop test test6
org.graalvm.compiler.hotspot.test.CompressedOopTest#stringCopyTest(Object, Object)->String::: compressed oop test string copy test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test7()->void::: compressed oop test test7
org.graalvm.compiler.hotspot.test.CompressedOopTest#queueTest(Object, Object)->void::: compressed oop test queue test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test8()->void::: compressed oop test test8
org.graalvm.compiler.hotspot.test.CompressedOopTest#unmodListTest(Object)->Object[]::: compressed oop test unmod list test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test9()->void::: compressed oop test test9
org.graalvm.compiler.hotspot.test.CompressedOopTest#test10()->void::: compressed oop test test10
org.graalvm.compiler.hotspot.test.CompressedOopTest#constantTest(Object)->Boolean::: compressed oop test constant test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test11()->void::: compressed oop test test11
org.graalvm.compiler.hotspot.test.CompressedOopTest#stringEqualsTest(Object, Object)->Boolean::: compressed oop test string equals test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test12()->void::: compressed oop test test12
org.graalvm.compiler.hotspot.test.CompressedOopTest#stringConstantEqualsTest(Object)->Boolean::: compressed oop test string constant equals test
org.graalvm.compiler.hotspot.test.CompressedOopTest#unmodListTestByte(Object)->Object[]::: compressed oop test unmod list test byte
org.graalvm.compiler.hotspot.test.CompressedOopTest#test13()->void::: compressed oop test test13
org.graalvm.compiler.hotspot.test.CompressedOopTest#test14()->void::: compressed oop test test14
org.graalvm.compiler.hotspot.test.CompressedOopTest#stringBuilderTest(Object, Object)->void::: compressed oop test string builder test
org.graalvm.compiler.hotspot.test.CompressedOopTest#test15()->void::: compressed oop test test15
org.graalvm.compiler.hotspot.test.CompressedOopTest#stringBuilderTestIn()->void::: compressed oop test string builder test in
org.graalvm.compiler.hotspot.test.CompressedOopTest#test16()->void::: compressed oop test test16
org.graalvm.compiler.hotspot.test.CompressedOopTest#stringBuilderArrayCopy()->void::: compressed oop test string builder array copy
org.graalvm.compiler.hotspot.test.CompressedOopTest#test17()->void::: compressed oop test test17
org.graalvm.compiler.hotspot.test.CompressedOopTest#stringFormat()->void::: compressed oop test string format
org.graalvm.compiler.hotspot.test.CompressedOopTest#test18()->void::: compressed oop test test18
org.graalvm.compiler.hotspot.test.CompressedOopTest#stringBuilder()->Object::: compressed oop test string builder
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests#test(String)->StructuredGraph::: constant pool substitutions tests test
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests#assertNotInGraph(StructuredGraph, Class)->StructuredGraph::: constant pool substitutions tests assert not in graph
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests#getMethod(String)->Method:::Get the test methods from the generated class.
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests#beforeClass()->void::: constant pool substitutions tests before class
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests#testGetSize()->void::: constant pool substitutions tests test get size
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests#testGetIntAt()->void::: constant pool substitutions tests test get int at
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests#testGetLongAt()->void::: constant pool substitutions tests test get long at
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests#testGetFloatAt()->void::: constant pool substitutions tests test get float at
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests#testGetDoubleAt()->void::: constant pool substitutions tests test get double at
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests.AsmLoader#findClass(String)->Class::: asm loader find class
org.graalvm.compiler.hotspot.test.ConstantPoolSubstitutionsTests.Gen#generateClass()->byte[]::: gen generate class
org.graalvm.compiler.hotspot.test.CRC32CSubstitutionsTest#updateBytes(byte[], int, int)->long::: c32 substitutions test update bytes
org.graalvm.compiler.hotspot.test.CRC32CSubstitutionsTest#test1()->void::: c32 substitutions test test1
org.graalvm.compiler.hotspot.test.CRC32CSubstitutionsTest#updateByteBuffer(ByteBuffer)->long::: c32 substitutions test update byte buffer
org.graalvm.compiler.hotspot.test.CRC32CSubstitutionsTest#test2()->void::: c32 substitutions test test2
org.graalvm.compiler.hotspot.test.CRC32SubstitutionsTest#update(byte[])->long::: c32 substitutions test update
org.graalvm.compiler.hotspot.test.CRC32SubstitutionsTest#test1()->void::: c32 substitutions test test1
org.graalvm.compiler.hotspot.test.CRC32SubstitutionsTest#updateBytes(byte[], int, int)->long::: c32 substitutions test update bytes
org.graalvm.compiler.hotspot.test.CRC32SubstitutionsTest#test2()->void::: c32 substitutions test test2
org.graalvm.compiler.hotspot.test.CRC32SubstitutionsTest#test3()->void::: c32 substitutions test test3
org.graalvm.compiler.hotspot.test.CRC32SubstitutionsTest#updateByteBuffer(ByteBuffer)->long::: c32 substitutions test update byte buffer
org.graalvm.compiler.hotspot.test.CRC32SubstitutionsTest#test4()->void::: c32 substitutions test test4
org.graalvm.compiler.hotspot.test.DataPatchTest#doubleSnippet()->double::: data patch test double snippet
org.graalvm.compiler.hotspot.test.DataPatchTest#doubleTest()->void::: data patch test double test
org.graalvm.compiler.hotspot.test.DataPatchTest#oopSnippet()->Object::: data patch test oop snippet
org.graalvm.compiler.hotspot.test.DataPatchTest#oopTest()->void::: data patch test oop test
org.graalvm.compiler.hotspot.test.DataPatchTest#narrowOopSnippet()->Object::: data patch test narrow oop snippet
org.graalvm.compiler.hotspot.test.DataPatchTest#narrowOopTest()->void::: data patch test narrow oop test
org.graalvm.compiler.hotspot.test.DataPatchTest#registerInvocationPlugins(InvocationPlugins)->void::: data patch test register invocation plugins
org.graalvm.compiler.hotspot.test.DeferredBarrierAdditionTest#testCrossReferences()->Object::: deferred barrier addition test test cross references
org.graalvm.compiler.hotspot.test.DeferredBarrierAdditionTest#testGroupAllocation()->void::: deferred barrier addition test test group allocation
org.graalvm.compiler.hotspot.test.DeferredBarrierAdditionTest#testHelper(String, int, OptionValues)->void::: deferred barrier addition test test helper
org.graalvm.compiler.hotspot.test.DeferredBarrierAdditionTest#checkAssumptions(StructuredGraph)->void::: deferred barrier addition test check assumptions
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#getDefaultGraphBuilderPlugins()->Plugins::: eliminate redundant initialization phase test get default graph builder plugins
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFields()->void::: eliminate redundant initialization phase test assign fields
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFieldsConditionally(boolean)->void::: eliminate redundant initialization phase test assign fields conditionally
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFieldsSubclassDominates()->void::: eliminate redundant initialization phase test assign fields subclass dominates
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFieldsConditionallySubclassDominates(boolean)->void::: eliminate redundant initialization phase test assign fields conditionally subclass dominates
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFieldsSubclassPostdominates()->void::: eliminate redundant initialization phase test assign fields subclass postdominates
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFieldsConditionallySubclassPostdominates(boolean)->void::: eliminate redundant initialization phase test assign fields conditionally subclass postdominates
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFieldsConditionallyMixed(boolean)->void::: eliminate redundant initialization phase test assign fields conditionally mixed
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFieldsInLoop()->void::: eliminate redundant initialization phase test assign fields in loop
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFieldsInBranches(boolean)->void::: eliminate redundant initialization phase test assign fields in branches
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#assignFieldsInBranchesMixed(boolean)->void::: eliminate redundant initialization phase test assign fields in branches mixed
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest.SomeClass#method()->void::: some class method
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest.SomeClass#inlinedMethod()->void::: some class inlined method
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#invokestatic()->void::: eliminate redundant initialization phase test invokestatic
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#invokestaticInlined()->void::: eliminate redundant initialization phase test invokestatic inlined
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test1()->void::: eliminate redundant initialization phase test test1
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test2()->void::: eliminate redundant initialization phase test test2
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test3()->void::: eliminate redundant initialization phase test test3
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test4()->void::: eliminate redundant initialization phase test test4
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test5()->void::: eliminate redundant initialization phase test test5
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test6()->void::: eliminate redundant initialization phase test test6
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test7()->void::: eliminate redundant initialization phase test test7
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test8()->void::: eliminate redundant initialization phase test test8
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test9()->void::: eliminate redundant initialization phase test test9
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test10()->void::: eliminate redundant initialization phase test test10
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test11()->void::: eliminate redundant initialization phase test test11
org.graalvm.compiler.hotspot.test.EliminateRedundantInitializationPhaseTest#test12()->void::: eliminate redundant initialization phase test test12
org.graalvm.compiler.hotspot.test.ExplicitExceptionTest#getCode(ResolvedJavaMethod, StructuredGraph, boolean, boolean, OptionValues)->InstalledCode::: explicit exception test get code
org.graalvm.compiler.hotspot.test.ExplicitExceptionTest#testAIOOBESnippet(int[])->int::: explicit exception test test snippet
org.graalvm.compiler.hotspot.test.ExplicitExceptionTest#testAIOOBE()->void::: explicit exception test test e
org.graalvm.compiler.hotspot.test.ExplicitExceptionTest#testNPEArraySnippet(int[])->int::: explicit exception test test array snippet
org.graalvm.compiler.hotspot.test.ExplicitExceptionTest#testNPEArray()->void::: explicit exception test test array
org.graalvm.compiler.hotspot.test.ExplicitExceptionTest#testNPESnippet(TestClass)->int::: explicit exception test test snippet
org.graalvm.compiler.hotspot.test.ExplicitExceptionTest#testNPE()->void::: explicit exception test test e
org.graalvm.compiler.hotspot.test.ForeignCallDeoptimizeTest#registerInvocationPlugins(InvocationPlugins)->void::: foreign call deoptimize test register invocation plugins
org.graalvm.compiler.hotspot.test.ForeignCallDeoptimizeTest#testCallInt(int)->int::: foreign call deoptimize test test call int
org.graalvm.compiler.hotspot.test.ForeignCallDeoptimizeTest#testForeignCall(int)->int::: foreign call deoptimize test test foreign call
org.graalvm.compiler.hotspot.test.ForeignCallDeoptimizeTest#test1()->void::: foreign call deoptimize test test1
org.graalvm.compiler.hotspot.test.ForeignCallDeoptimizeTest#test2()->void::: foreign call deoptimize test test2
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#checkVMArguments()->void::: graal lock test check arguments
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#isMonitorLockHeld(Object)->boolean::: graal lock test is monitor lock held
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#isMonitorLockHeldByThread(Object, Thread)->boolean::: graal lock test is monitor lock held by thread
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#run(Runnable)->void::: graal lock test run
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#osrLockNoDeopt()->EconomicMap, Object>::: graal lock test osr lock no deopt
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#osrLockDeopt()->EconomicMap, Object>::: graal lock test osr lock deopt
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterImmediateDeoptAfter()->void::: graal lock test test lock outer immediate deopt after
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#synchronizedSnippet()->ReturnValue::: graal lock test synchronized snippet
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testSynchronizedSnippet()->void::: graal lock test test synchronized snippet
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOSRTrivialLoop()->void::: graal lock test test trivial loop
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterInnerImmediateDeoptAfter()->void::: graal lock test test lock outer inner immediate deopt after
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterCompileRestOfMethod()->void::: graal lock test test lock outer compile rest of method
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterInnerCompileRestOfMethod()->void::: graal lock test test lock outer inner compile rest of method
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterInnerLockDepthCompileRestOfMethod()->void::: graal lock test test lock outer inner lock depth compile rest of method
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterInnerLockDepthDeopt()->void::: graal lock test test lock outer inner lock depth deopt
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterInnerLockDepthRecursiveCompileRestOfMethod0()->void::: graal lock test test lock outer inner lock depth recursive compile rest of method0
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterInnerLockDepthRecursiveCompileRestOfMethod1()->void::: graal lock test test lock outer inner lock depth recursive compile rest of method1
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterCompileRestOfMethodSubsequentLock()->void::: graal lock test test lock outer compile rest of method subsequent lock
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSROuterInnerSameLockCompileRestOfMethod()->void::: graal lock test test lock outer inner same lock compile rest of method
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSRRecursive()->void::: graal lock test test lock recursive
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testLockOSRRecursiveLeafOSR()->void::: graal lock test test lock recursive leaf r
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testReduceOSRTrivialLoop()->ReturnValue::: graal lock test test reduce trivial loop
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterLockImmediateDeoptAfter()->ReturnValue::: graal lock test test outer lock immediate deopt after
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterInnerLockImmediateDeoptAfter()->ReturnValue::: graal lock test test outer inner lock immediate deopt after
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterLockCompileRestOfMethod()->ReturnValue::: graal lock test test outer lock compile rest of method
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterInnerLockCompileRestOfMethod()->ReturnValue::: graal lock test test outer inner lock compile rest of method
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterInnerLockDepth1CompileRestOfMethod()->ReturnValue::: graal lock test test outer inner lock depth1 compile rest of method
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterInnerLockDepth1DeoptAfter()->ReturnValue::: graal lock test test outer inner lock depth1 deopt after
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterInnerLockDepth1RecursiveCompileRestOfMethod1()->ReturnValue::: graal lock test test outer inner lock depth1 recursive compile rest of method1
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterInnerLockDepth1RecursiveCompileRestOfMethod2()->ReturnValue::: graal lock test test outer inner lock depth1 recursive compile rest of method2
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testRecursiveLockingRoot()->ReturnValue::: graal lock test test recursive locking root
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testRecursiveLockingLeaf()->ReturnValue::: graal lock test test recursive locking leaf
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testRecursiveRootNoOSR()->ReturnValue::: graal lock test test recursive root no r
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testRecursiveLeafOSR()->ReturnValue::: graal lock test test recursive leaf r
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterLockCompileRestOfMethodSubsequentLock()->ReturnValue::: graal lock test test outer lock compile rest of method subsequent lock
org.graalvm.compiler.hotspot.test.GraalOSRLockTest#testOuterInnerSameLockCompileRestOfMethod()->ReturnValue::: graal lock test test outer inner same lock compile rest of method
org.graalvm.compiler.hotspot.test.GraalOSRTest#testOSR01()->void::: graal test test r01
org.graalvm.compiler.hotspot.test.GraalOSRTest#testOSR02()->void::: graal test test r02
org.graalvm.compiler.hotspot.test.GraalOSRTest#testOSR03()->void::: graal test test r03
org.graalvm.compiler.hotspot.test.GraalOSRTest#testOSR04()->void::: graal test test r04
org.graalvm.compiler.hotspot.test.GraalOSRTest#testReduceLoop()->ReturnValue::: graal test test reduce loop
org.graalvm.compiler.hotspot.test.GraalOSRTest#testSequentialLoop()->ReturnValue::: graal test test sequential loop
org.graalvm.compiler.hotspot.test.GraalOSRTest#testNonReduceLoop()->ReturnValue::: graal test test non reduce loop
org.graalvm.compiler.hotspot.test.GraalOSRTest#testDeoptAfterCountedLoop()->ReturnValue::: graal test test deopt after counted loop
org.graalvm.compiler.hotspot.test.GraalOSRTestBase#testOSR(OptionValues, String)->void::: graal test base test r
org.graalvm.compiler.hotspot.test.GraalOSRTestBase#testOSR(OptionValues, String, Object, Object...)->void::: graal test base test r
org.graalvm.compiler.hotspot.test.GraalOSRTestBase#testOSR(OptionValues, ResolvedJavaMethod, Object, Object...)->void::: graal test base test r
org.graalvm.compiler.hotspot.test.GraalOSRTestBase#compile(DebugContext, ResolvedJavaMethod, int)->void::: graal test base compile
org.graalvm.compiler.hotspot.test.GraalOSRTestBase#getBackedgeBCI(DebugContext, ResolvedJavaMethod)->int:::Returns the target BCI of the first bytecode backedge
org.graalvm.compiler.hotspot.test.GraalOSRTestBase#checkResult(Result)->void::: graal test base check result
org.graalvm.compiler.hotspot.test.GraalOSRTestBase#compileOSR(OptionValues, ResolvedJavaMethod)->void::: graal test base compile r
org.graalvm.compiler.hotspot.test.HotSpotBase64Test#sanity()->void::: hot spot base64 test sanity
org.graalvm.compiler.hotspot.test.HotSpotBase64Test#testEncode()->void::: hot spot base64 test test encode
org.graalvm.compiler.hotspot.test.HotSpotCryptoSubstitutionTest#addMethod(DebugContext, ResolvedJavaMethod, CompilationResult)->InstalledCode::: hot spot crypto substitution test add method
org.graalvm.compiler.hotspot.test.HotSpotCryptoSubstitutionTest#testAESCryptIntrinsics()->void::: hot spot crypto substitution test test crypt intrinsics
org.graalvm.compiler.hotspot.test.HotSpotCryptoSubstitutionTest#testCipherBlockChainingIntrinsics()->void::: hot spot crypto substitution test test cipher block chaining intrinsics
org.graalvm.compiler.hotspot.test.HotSpotCryptoSubstitutionTest#runEncryptDecrypt(SecretKey, String)->byte[]::: hot spot crypto substitution test run encrypt decrypt
org.graalvm.compiler.hotspot.test.HotSpotGraalCompilerTest#runtime()->HotSpotGraalRuntimeProvider:::Gets the HotSpotGraalRuntimeProvider.
org.graalvm.compiler.hotspot.test.HotSpotGraalCompilerTest#assumeGraalIsNotJIT(String)->void:::Checks that the UseJVMCICompiler flag is false.
org.graalvm.compiler.hotspot.test.HotSpotGraalCompilerTest#compileAndInstallSubstitution(Class, String)->InstalledCode::: hot spot graal compiler test compile and install substitution
org.graalvm.compiler.hotspot.test.HotSpotGraalManagementTest#registration()->void::: hot spot graal management test registration
org.graalvm.compiler.hotspot.test.HotSpotGraalManagementTest#readBeanInfo()->void::: hot spot graal management test read bean info
org.graalvm.compiler.hotspot.test.HotSpotGraalManagementTest.JunitShield#testOption(MBeanInfo, ObjectName, MBeanServer, HotSpotGraalRuntime, OptionDescriptor, AttributeList, AttributeList)->void:::Tests changing the value of option via the management interface to a) a new legal value and b) an illegal value.
org.graalvm.compiler.hotspot.test.HotSpotGraalManagementTest.JunitShield#findAttributeInfo(String, MBeanInfo)->MBeanAttributeInfo::: junit shield find attribute info
org.graalvm.compiler.hotspot.test.HotSpotGraalManagementTest#publicJmxApiOfGraalDumpOperation()->void:::Tests publicaly visible names and identifiers used by tools developed and distributed on an independent schedule (like VisualVM)
org.graalvm.compiler.hotspot.test.HotSpotGraalManagementTest#deleteDirectory(Path)->void::: hot spot graal management test delete directory
org.graalvm.compiler.hotspot.test.HotSpotInvokeDynamicPluginTest#getDefaultGraphBuilderPlugins()->Plugins::: hot spot invoke dynamic plugin test get default graph builder plugins
org.graalvm.compiler.hotspot.test.HotSpotInvokeDynamicPluginTest#bytecodeParserShouldInlineInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->InlineInfo::: hot spot invoke dynamic plugin test bytecode parser should inline invoke
org.graalvm.compiler.hotspot.test.HotSpotInvokeDynamicPluginTest#invokeDynamic1()->IntPredicate::: hot spot invoke dynamic plugin test invoke dynamic1
org.graalvm.compiler.hotspot.test.HotSpotInvokeDynamicPluginTest#invokeDynamic2(String)->PrivilegedAction::: hot spot invoke dynamic plugin test invoke dynamic2
org.graalvm.compiler.hotspot.test.HotSpotInvokeDynamicPluginTest#invokeHandle1(Object)->String::: hot spot invoke dynamic plugin test invoke handle1
org.graalvm.compiler.hotspot.test.HotSpotInvokeDynamicPluginTest#test1()->void::: hot spot invoke dynamic plugin test test1
org.graalvm.compiler.hotspot.test.HotSpotInvokeDynamicPluginTest#test2()->void::: hot spot invoke dynamic plugin test test2
org.graalvm.compiler.hotspot.test.HotSpotInvokeDynamicPluginTest#test3()->void::: hot spot invoke dynamic plugin test test3
org.graalvm.compiler.hotspot.test.HotSpotLazyInitializationTest#getDefaultGraphBuilderPlugins()->Plugins::: hot spot lazy initialization test get default graph builder plugins
org.graalvm.compiler.hotspot.test.HotSpotLazyInitializationTest.X#foo()->void::: x foo
org.graalvm.compiler.hotspot.test.HotSpotLazyInitializationTest#invokeStatic()->void::: hot spot lazy initialization test invoke static
org.graalvm.compiler.hotspot.test.HotSpotLazyInitializationTest#test1()->void::: hot spot lazy initialization test test1
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testObjectSubstitutions()->void::: hot spot method substitution test test object substitutions
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#getClass0(Object)->Class::: hot spot method substitution test get class0
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#objectHashCode(TestClassA)->int::: hot spot method substitution test object hash code
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#objectNotify(Object)->void::: hot spot method substitution test object notify
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#objectNotifyAll(Object)->void::: hot spot method substitution test object notify all
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testClassSubstitutions()->void::: hot spot method substitution test test class substitutions
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#getModifiers(Class)->int::: hot spot method substitution test get modifiers
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#isInterface(Class)->boolean::: hot spot method substitution test is interface
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#isArray(Class)->boolean::: hot spot method substitution test is array
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#isPrimitive(Class)->boolean::: hot spot method substitution test is primitive
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#getSuperClass(Class)->Class::: hot spot method substitution test get super class
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#getComponentType(Class)->Class::: hot spot method substitution test get component type
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testThreadSubstitutions()->void::: hot spot method substitution test test thread substitutions
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#currentThread(Thread)->boolean::: hot spot method substitution test current thread
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#threadIsInterrupted(Thread)->boolean::: hot spot method substitution test thread is interrupted
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#threadInterrupted()->boolean::: hot spot method substitution test thread interrupted
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testSystemSubstitutions()->void::: hot spot method substitution test test system substitutions
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#systemTime()->long::: hot spot method substitution test system time
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#systemIdentityHashCode(Object)->int::: hot spot method substitution test system identity hash code
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testCallSiteGetTargetSnippet(int)->String::: hot spot method substitution test test call site get target snippet
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testCastSnippet(int, Object)->String::: hot spot method substitution test test cast snippet
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testGetClassSnippet(int)->String::: hot spot method substitution test test get class snippet
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testCallSiteGetTarget()->void:::Tests ambiguous receiver of CallSite.getTarget.
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testCast()->void:::Tests ambiguous receiver of Class.cast.
org.graalvm.compiler.hotspot.test.HotSpotMethodSubstitutionTest#testGetClass()->void:::Tests ambiguous receiver of Object.getClass.
org.graalvm.compiler.hotspot.test.HotSpotMonitorValueTest#addMethod(DebugContext, ResolvedJavaMethod, CompilationResult)->InstalledCode::: hot spot monitor value test add method
org.graalvm.compiler.hotspot.test.HotSpotMonitorValueTest#test()->void::: hot spot monitor value test test
org.graalvm.compiler.hotspot.test.HotSpotMonitorValueTest#testSnippet(Object, Object)->void::: hot spot monitor value test test snippet
org.graalvm.compiler.hotspot.test.HotSpotNmethodTest#testInstallCodeInvalidation()->void::: hot spot nmethod test test install code invalidation
org.graalvm.compiler.hotspot.test.HotSpotNmethodTest#testInstallCodeInvalidationWhileRunning()->void::: hot spot nmethod test test install code invalidation while running
org.graalvm.compiler.hotspot.test.HotSpotNmethodTest#testInstalledCodeCalledFromCompiledCode()->void::: hot spot nmethod test test installed code called from compiled code
org.graalvm.compiler.hotspot.test.HotSpotNmethodTest#foo(HotSpotNmethod, Object, Object)->Object::: hot spot nmethod test foo
org.graalvm.compiler.hotspot.test.HotSpotNmethodTest#otherFoo(HotSpotNmethod, Object, Object)->Object::: hot spot nmethod test other foo
org.graalvm.compiler.hotspot.test.HotSpotNodeSubstitutionsTest#test()->void::: hot spot node substitutions test test
org.graalvm.compiler.hotspot.test.HotSpotNodeSubstitutionsTest#getNodeClass(Node)->NodeClass::: hot spot node substitutions test get node class
org.graalvm.compiler.hotspot.test.HotSpotResolvedJavaFieldTest#testModifiersForInternal()->void:::Tests that HotSpotResolvedJavaField#getModifiers() only includes the modifiers returned by Field#getModifiers()
org.graalvm.compiler.hotspot.test.HotSpotResolvedJavaFieldTest#testEquivalenceForInternalFields()->void:::Tests that HotSpotResolvedObjectTypeImpl#createField(String, JavaType, long, int) always returns an ResolvedJavaField#equals(Object) equivalent object for an internal field.
org.graalvm.compiler.hotspot.test.HotSpotResolvedJavaFieldTest#testIsInObject()->void::: hot spot resolved java field test test is in object
org.graalvm.compiler.hotspot.test.HotSpotResolvedObjectTypeTest#testGetSourceFileName()->void::: hot spot resolved object type test test get source file name
org.graalvm.compiler.hotspot.test.HotSpotResolvedObjectTypeTest#testKlassLayoutHelper()->void::: hot spot resolved object type test test klass layout helper
org.graalvm.compiler.hotspot.test.HotSpotStackIntrospectionTest#testSynchronizedSnippet(Function)->void::: hot spot stack introspection test test synchronized snippet
org.graalvm.compiler.hotspot.test.HotSpotStackIntrospectionTest#testSnippet(Function)->void::: hot spot stack introspection test test snippet
org.graalvm.compiler.hotspot.test.HotSpotStackIntrospectionTest#run()->void::: hot spot stack introspection test run
org.graalvm.compiler.hotspot.test.HotSpotStackIntrospectionTest#runSynchronized()->void::: hot spot stack introspection test run synchronized
org.graalvm.compiler.hotspot.test.HotSpotStampMemoryAccessTest#testReadNarrowObject()->void::: hot spot stamp memory access test test read narrow object
org.graalvm.compiler.hotspot.test.HotSpotUnsafeSubstitutionTest#testSubstitution(String, Class, String, Class[], Object, Object[], Object[])->void::: hot spot unsafe substitution test test substitution
org.graalvm.compiler.hotspot.test.HotSpotUnsafeSubstitutionTest#testUnsafeSubstitutions()->void::: hot spot unsafe substitution test test unsafe substitutions
org.graalvm.compiler.hotspot.test.HotSpotUnsafeSubstitutionTest#unsafeCopyMemory(Object, long, Object, long, long)->void::: hot spot unsafe substitution test unsafe copy memory
org.graalvm.compiler.hotspot.test.HotSpotUnsafeSubstitutionTest#testCopyMemorySnippet(long, int)->byte[]::: hot spot unsafe substitution test test copy memory snippet
org.graalvm.compiler.hotspot.test.HotSpotUnsafeSubstitutionTest#testCopyMemory()->void::: hot spot unsafe substitution test test copy memory
org.graalvm.compiler.hotspot.test.HsErrLogTest#test1()->void::: hs err log test test1
org.graalvm.compiler.hotspot.test.Crasher#main(String[])->void::: crasher main
org.graalvm.compiler.hotspot.test.Crasher#tryCrash(long, int)->int::: crasher try crash
org.graalvm.compiler.hotspot.test.InstalledCodeExecuteHelperTest#test1()->void::: installed code execute helper test test1
org.graalvm.compiler.hotspot.test.InstalledCodeExecuteHelperTest#benchmark(HotSpotInstalledCode)->Integer::: installed code execute helper test benchmark
org.graalvm.compiler.hotspot.test.InstalledCodeExecuteHelperTest#foo()->Integer::: installed code execute helper test foo
org.graalvm.compiler.hotspot.test.InstalledCodeExecuteHelperTest#parse(Builder, PhaseSuite)->StructuredGraph::: installed code execute helper test parse
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testMethod()->void::: infopoint error test test method
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testInvalidShortOop()->void::: infopoint error test test invalid short oop
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testInvalidShortDerivedOop()->void::: infopoint error test test invalid short derived oop
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUnexpectedScopeValuesLength()->void::: infopoint error test test unexpected scope values length
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUnexpectedScopeSlotKindsLength()->void::: infopoint error test test unexpected scope slot kinds length
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testWrongMonitorType()->void::: infopoint error test test wrong monitor type
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUnexpectedIllegalValue()->void::: infopoint error test test unexpected illegal value
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUnexpectedTypeInRegister()->void::: infopoint error test test unexpected type in register
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testWrongConstantType()->void::: infopoint error test test wrong constant type
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUnsupportedConstantType()->void::: infopoint error test test unsupported constant type
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUnexpectedNull()->void::: infopoint error test test unexpected null
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUnexpectedObject()->void::: infopoint error test test unexpected object
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUnknownJavaValue()->void::: infopoint error test test unknown java value
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testMissingIllegalAfterDouble()->void::: infopoint error test test missing illegal after double
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testInvalidVirtualObjectId()->void::: infopoint error test test invalid virtual object id
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testDuplicateVirtualObject()->void::: infopoint error test test duplicate virtual object
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUnexpectedVirtualObject()->void::: infopoint error test test unexpected virtual object
org.graalvm.compiler.hotspot.test.JVMCIInfopointErrorTest#testUndefinedVirtualObject()->void::: infopoint error test test undefined virtual object
org.graalvm.compiler.hotspot.test.JVMCIVersionCheckTest#test01()->void::: version check test test01
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#createSuites(OptionValues)->Suites::: load java mirror with klass test create suites
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#checkLowTierGraph(StructuredGraph)->void::: load java mirror with klass test check low tier graph
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#classConstant()->Class::: load java mirror with klass test class constant
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#testClassConstant()->void::: load java mirror with klass test test class constant
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#primitiveClassConstant()->Class::: load java mirror with klass test primitive class constant
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#testPrimitiveClassConstant()->void::: load java mirror with klass test test primitive class constant
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#compressedClassConstant(Wrapper)->Wrapper::: load java mirror with klass test compressed class constant
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#testCompressedClassConstant()->void::: load java mirror with klass test test compressed class constant
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#compressedPrimitiveClassConstant(Wrapper)->Wrapper::: load java mirror with klass test compressed primitive class constant
org.graalvm.compiler.hotspot.test.LoadJavaMirrorWithKlassTest#testCompressedPrimitiveClassConstant()->void::: load java mirror with klass test test compressed primitive class constant
org.graalvm.compiler.hotspot.test.MemoryUsageBenchmark#simple(int, int)->int::: memory usage benchmark simple
org.graalvm.compiler.hotspot.test.MemoryUsageBenchmark#complex(CharSequence)->int::: memory usage benchmark complex
org.graalvm.compiler.hotspot.test.MemoryUsageBenchmark.MemoryUsageCloseable#close()->void::: memory usage closeable close
org.graalvm.compiler.hotspot.test.MemoryUsageBenchmark#main(String[])->void::: memory usage benchmark main
org.graalvm.compiler.hotspot.test.MemoryUsageBenchmark#run()->void::: memory usage benchmark run
org.graalvm.compiler.hotspot.test.NodeCostDumpUtil#main(String[])->void::: node cost dump util main
org.graalvm.compiler.hotspot.test.ObjectCloneTest#cloneArray(int[])->Object::: object clone test clone array
org.graalvm.compiler.hotspot.test.ObjectCloneTest#cloneList(ArrayList)->Object::: object clone test clone list
org.graalvm.compiler.hotspot.test.ObjectCloneTest.ObjectCloneable#clone()->Object::: object cloneable clone
org.graalvm.compiler.hotspot.test.ObjectCloneTest#notCloneable(ObjectCloneable)->Object::: object clone test not cloneable
org.graalvm.compiler.hotspot.test.ObjectCloneTest#testNotIntrinsified()->void::: object clone test test not intrinsified
org.graalvm.compiler.hotspot.test.ObjectCloneTest#testArray()->void::: object clone test test array
org.graalvm.compiler.hotspot.test.ObjectCloneTest#testList()->void::: object clone test test list
org.graalvm.compiler.hotspot.test.ObjectCloneTest#editGraphBuilderConfiguration(GraphBuilderConfiguration)->GraphBuilderConfiguration::: object clone test edit graph builder configuration
org.graalvm.compiler.hotspot.test.ObjectCloneTest#cloneConstantArray()->int[]::: object clone test clone constant array
org.graalvm.compiler.hotspot.test.ObjectCloneTest#testCloneConstantArray()->void::: object clone test test clone constant array
org.graalvm.compiler.hotspot.test.ObjectHashCodeInliningTest#getHash(Object)->int::: object hash code inlining test get hash
org.graalvm.compiler.hotspot.test.ObjectHashCodeInliningTest#testInstallCodeInvalidation()->void::: object hash code inlining test test install code invalidation
org.graalvm.compiler.hotspot.test.ObjectHashCodeInliningTest#checkHighTierGraph(StructuredGraph)->void::: object hash code inlining test check high tier graph
org.graalvm.compiler.hotspot.test.OptionsInFileTest#test()->void::: options in file test test
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#getDefaultGraphBuilderPlugins()->Plugins::: replace constant nodes phase test get default graph builder plugins
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#assignFields()->void::: replace constant nodes phase test assign fields
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#assignFieldsInBranches(boolean)->void::: replace constant nodes phase test assign fields in branches
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#assignFieldsWithDominatingInit(boolean)->void::: replace constant nodes phase test assign fields with dominating init
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#assignString()->void::: replace constant nodes phase test assign string
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#assignToParentAndChild()->void::: replace constant nodes phase test assign to parent and child
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#assignToThis()->void::: replace constant nodes phase test assign to this
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#assignFieldsWithDominatingInitOfParent(boolean)->void::: replace constant nodes phase test assign fields with dominating init of parent
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#test1()->void::: replace constant nodes phase test test1
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#test2()->void::: replace constant nodes phase test test2
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#test3()->void::: replace constant nodes phase test test3
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#test4()->void::: replace constant nodes phase test test4
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#test5()->void::: replace constant nodes phase test test5
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#test6()->void::: replace constant nodes phase test test6
org.graalvm.compiler.hotspot.test.ReplaceConstantNodesPhaseTest#test7()->void::: replace constant nodes phase test test7
org.graalvm.compiler.hotspot.test.ReservedStackAccessTest#check()->void::: reserved stack access test check
org.graalvm.compiler.hotspot.test.ReservedStackAccessTest#stackAccessTest()->void::: reserved stack access test stack access test
org.graalvm.compiler.hotspot.test.ReservedStackAccessTest#main(String[])->void::: reserved stack access test main
org.graalvm.compiler.hotspot.test.ReservedStackAccessTest#run()->void::: reserved stack access test run
org.graalvm.compiler.hotspot.test.ReservedStackAccessTest.ReentrantLockTest#initialize()->void::: reentrant lock test initialize
org.graalvm.compiler.hotspot.test.ReservedStackAccessTest.ReentrantLockTest#getResult()->String::: reentrant lock test get result
org.graalvm.compiler.hotspot.test.ReservedStackAccessTest.ReentrantLockTest#run()->void::: reentrant lock test run
org.graalvm.compiler.hotspot.test.ReservedStackAccessTest.RunWithSOEContext#run()->void::: run with context run
org.graalvm.compiler.hotspot.test.ReservedStackAccessTest.RunWithSOEContext#recursiveCall()->void::: run with context recursive call
org.graalvm.compiler.hotspot.test.StringInternConstantTest#test1()->void::: string intern constant test test1
org.graalvm.compiler.hotspot.test.StringInternConstantTest#constantIntern()->String::: string intern constant test constant intern
org.graalvm.compiler.hotspot.test.TestIntrinsicCompiles#test()->void::: test intrinsic compiles test
org.graalvm.compiler.hotspot.test.TestSHASubstitutions#testDigest(String, byte[])->byte[]::: test substitutions test digest
org.graalvm.compiler.hotspot.test.TestSHASubstitutions#getData()->byte[]::: test substitutions get data
org.graalvm.compiler.hotspot.test.TestSHASubstitutions#getConfig()->GraalHotSpotVMConfig::: test substitutions get config
org.graalvm.compiler.hotspot.test.TestSHASubstitutions#testSha1()->void::: test substitutions test sha1
org.graalvm.compiler.hotspot.test.TestSHASubstitutions#testWithInstalledIntrinsic(String, String, String, Object...)->void::: test substitutions test with installed intrinsic
org.graalvm.compiler.hotspot.test.TestSHASubstitutions#testSha256()->void::: test substitutions test sha256
org.graalvm.compiler.hotspot.test.TestSHASubstitutions#testSha512()->void::: test substitutions test sha512
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test1()->void:::Expected 2 barriers for the Serial GC and 4 for G1 (2 pre + 2 post).
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test1Snippet()->void::: write barrier addition test test1 snippet
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test2()->void:::Expected 4 barriers for the Serial GC and 8 for G1 (4 pre + 4 post).
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test2Snippet(boolean)->void::: write barrier addition test test2 snippet
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test3()->void:::Expected 4 barriers for the Serial GC and 8 for G1 (4 pre + 4 post).
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test3Snippet()->void::: write barrier addition test test3 snippet
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test4()->void:::Expected 2 barriers for the Serial GC and 5 for G1 (3 pre + 2 post) The (2 or 4) barriers are emitted while initializing the fields of the WeakReference instance
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test4Snippet()->Object::: write barrier addition test test4 snippet
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test5()->void:::Expected 4 barriers for the Serial GC and 9 for G1 (1 ref + 4 pre + 4 post)
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#registerInvocationPlugins(InvocationPlugins)->void::: write barrier addition test register invocation plugins
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#useCompressedOops(GraalHotSpotVMConfig)->boolean::: write barrier addition test use compressed oops
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test5Snippet()->Object::: write barrier addition test test5 snippet
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test6()->void:::The following test concerns the runtime checks of the unsafe loads
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test7()->void:::The following test concerns the runtime checks of the unsafe loads
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test8()->void:::The following test concerns the runtime checks of the unsafe loads
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test10()->void:::The following test concerns the runtime checks of the unsafe loads
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test9()->void:::The following test concerns the runtime checks of the unsafe loads
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#testArrayCopy(Object, Object, Object)->void::: write barrier addition test test array copy
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#test11()->void::: write barrier addition test test11
org.graalvm.compiler.hotspot.test.WriteBarrierAdditionTest#testUnsafeLoad(Unsafe, Object, Object, Object)->Object::: write barrier addition test test unsafe load

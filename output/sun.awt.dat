sun.awt.AppContext#getAppContexts()->Set:::Returns a set containing all AppContexts.
sun.awt.AppContext#isDisposed()->boolean::: app context is disposed
sun.awt.AppContext#getAppContext()->AppContext:::Returns the appropriate AppContext for the caller, as determined by its ThreadGroup
sun.awt.AppContext#isMainContext(AppContext)->boolean:::Returns true if the specified AppContext is the main AppContext.
sun.awt.AppContext#dispose()->void:::Disposes of this AppContext, all of its top-level Frames, and all Threads and ThreadGroups contained within it
sun.awt.AppContext.PostShutdownEventRunnable#run()->void::: post shutdown event runnable run
sun.awt.AppContext.CreateThreadAction#run()->Thread::: create thread action run
sun.awt.AppContext#stopEventDispatchThreads()->void::: app context stop event dispatch threads
sun.awt.AppContext#get(Object)->Object:::Returns the value to which the specified key is mapped in this context.
sun.awt.AppContext#put(Object, Object)->Object:::Maps the specified key to the specified value in this AppContext
sun.awt.AppContext#remove(Object)->Object:::Removes the key (and its corresponding value) from this AppContext
sun.awt.AppContext#getThreadGroup()->ThreadGroup:::Returns the root ThreadGroup for all Threads contained within this AppContext.
sun.awt.AppContext#getContextClassLoader()->ClassLoader:::Returns the context ClassLoader that was used to create this AppContext.
sun.awt.AppContext#toString()->String:::Returns a string representation of this AppContext.
sun.awt.AppContext#getPropertyChangeListeners()->PropertyChangeListener[]:::Returns an array of all the property change listeners registered on this component.
sun.awt.AppContext#addPropertyChangeListener(String, PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list for a specific property
sun.awt.AppContext#removePropertyChangeListener(String, PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list for a specific property
sun.awt.AppContext#getPropertyChangeListeners(String)->PropertyChangeListener[]:::Returns an array of all the listeners which have been associated with the named property.
sun.awt.AppContext#getSoftReferenceValue(Object, Supplier)->T::: app context get soft reference value
sun.awt.MostRecentKeyValue#setPair(Object, Object)->void::: most recent key value set pair
sun.awt.AWTAccessor.ComponentAccessor#setBackgroundEraseDisabled(Component, boolean)->void::: component accessor set background erase disabled
sun.awt.AWTAccessor.ComponentAccessor#getBackgroundEraseDisabled(Component)->boolean::: component accessor get background erase disabled
sun.awt.AWTAccessor.ComponentAccessor#getBounds(Component)->Rectangle::: component accessor get bounds
sun.awt.AWTAccessor.ComponentAccessor#setGraphicsConfiguration(Component, GraphicsConfiguration)->void:::Sets GraphicsConfiguration value for the component.
sun.awt.AWTAccessor.ComponentAccessor#requestFocus(Component, Cause)->void::: component accessor request focus
sun.awt.AWTAccessor.ComponentAccessor#canBeFocusOwner(Component)->boolean::: component accessor can be focus owner
sun.awt.AWTAccessor.ComponentAccessor#isVisible(Component)->boolean:::Returns whether the component is visible without invoking any client code.
sun.awt.AWTAccessor.ComponentAccessor#setRequestFocusController(RequestFocusController)->void:::Sets the RequestFocusController.
sun.awt.AWTAccessor.ComponentAccessor#getAppContext(Component)->AppContext:::Returns the appContext of the component.
sun.awt.AWTAccessor.ComponentAccessor#setAppContext(Component, AppContext)->void:::Sets the appContext of the component.
sun.awt.AWTAccessor.ComponentAccessor#getParent(Component)->Container:::Returns the parent of the component.
sun.awt.AWTAccessor.ComponentAccessor#setParent(Component, Container)->void:::Sets the parent of the component to the specified parent.
sun.awt.AWTAccessor.ComponentAccessor#setSize(Component, int, int)->void:::Resizes the component to the specified width and height.
sun.awt.AWTAccessor.ComponentAccessor#getLocation(Component)->Point:::Returns the location of the component.
sun.awt.AWTAccessor.ComponentAccessor#setLocation(Component, int, int)->void:::Moves the component to the new location.
sun.awt.AWTAccessor.ComponentAccessor#isEnabled(Component)->boolean:::Determines whether this component is enabled.
sun.awt.AWTAccessor.ComponentAccessor#isDisplayable(Component)->boolean:::Determines whether this component is displayable.
sun.awt.AWTAccessor.ComponentAccessor#getCursor(Component)->Cursor:::Gets the cursor set in the component.
sun.awt.AWTAccessor.ComponentAccessor#getPeer(Component)->T:::Returns the peer of the component.
sun.awt.AWTAccessor.ComponentAccessor#setPeer(Component, ComponentPeer)->void:::Sets the peer of the component to the specified peer.
sun.awt.AWTAccessor.ComponentAccessor#isLightweight(Component)->boolean:::Determines whether this component is lightweight.
sun.awt.AWTAccessor.ComponentAccessor#getIgnoreRepaint(Component)->boolean:::Returns whether or not paint messages received from the operating system should be ignored.
sun.awt.AWTAccessor.ComponentAccessor#getWidth(Component)->int:::Returns the width of the component.
sun.awt.AWTAccessor.ComponentAccessor#getHeight(Component)->int:::Returns the height of the component.
sun.awt.AWTAccessor.ComponentAccessor#getX(Component)->int:::Returns the x coordinate of the component.
sun.awt.AWTAccessor.ComponentAccessor#getY(Component)->int:::Returns the y coordinate of the component.
sun.awt.AWTAccessor.ComponentAccessor#getForeground(Component)->Color:::Gets the foreground color of this component.
sun.awt.AWTAccessor.ComponentAccessor#getBackground(Component)->Color:::Gets the background color of this component.
sun.awt.AWTAccessor.ComponentAccessor#setBackground(Component, Color)->void:::Sets the background of this component to the specified color.
sun.awt.AWTAccessor.ComponentAccessor#getFont(Component)->Font:::Gets the font of the component.
sun.awt.AWTAccessor.ComponentAccessor#processEvent(Component, AWTEvent)->void:::Processes events occurring on this component.
sun.awt.AWTAccessor.ComponentAccessor#getAccessControlContext(Component)->AccessControlContext::: component accessor get access control context
sun.awt.AWTAccessor.ComponentAccessor#revalidateSynchronously(Component)->void:::Revalidates the component synchronously.
sun.awt.AWTAccessor.ComponentAccessor#createBufferStrategy(Component, int, BufferCapabilities)->void:::Creates a new strategy for multi-buffering on this component.
sun.awt.AWTAccessor.ComponentAccessor#getBufferStrategy(Component)->BufferStrategy:::returns the buffer strategy used by this component.
sun.awt.AWTAccessor.ContainerAccessor#validateUnconditionally(Container)->void:::Validates the container unconditionally.
sun.awt.AWTAccessor.ContainerAccessor#findComponentAt(Container, int, int, boolean)->Component:::Access to the private version of findComponentAt method which has a controllable behavior
sun.awt.AWTAccessor.ContainerAccessor#startLWModal(Container)->void:::Starts LW Modal.
sun.awt.AWTAccessor.ContainerAccessor#stopLWModal(Container)->void:::Starts LW Modal.
sun.awt.AWTAccessor.WindowAccessor#updateWindow(Window)->void::: window accessor update window
sun.awt.AWTAccessor.WindowAccessor#getSecurityWarningSize(Window)->Dimension:::Get the size of the security warning.
sun.awt.AWTAccessor.WindowAccessor#setSecurityWarningSize(Window, int, int)->void:::Set the size of the security warning.
sun.awt.AWTAccessor.WindowAccessor#setSecurityWarningPosition(Window, Point2D, float, float)->void:::Set the position of the security warning.
sun.awt.AWTAccessor.WindowAccessor#calculateSecurityWarningPosition(Window, double, double, double, double)->Point2D:::Request to recalculate the new position of the security warning for the given window size/location as reported by the native system.
sun.awt.AWTAccessor.WindowAccessor#setLWRequestStatus(Window, boolean)->void:::Sets the synchronous status of focus requests on lightweight components in the specified window to the specified value.
sun.awt.AWTAccessor.WindowAccessor#isAutoRequestFocus(Window)->boolean:::Indicates whether this window should receive focus on subsequently being shown, or being moved to the front.
sun.awt.AWTAccessor.WindowAccessor#isTrayIconWindow(Window)->boolean:::Indicates whether the specified window is an utility window for TrayIcon.
sun.awt.AWTAccessor.WindowAccessor#setTrayIconWindow(Window, boolean)->void:::Marks the specified window as an utility window for TrayIcon.
sun.awt.AWTAccessor.WindowAccessor#getOwnedWindows(Window)->Window[]:::Return an array containing all the windows this window currently owns.
sun.awt.AWTAccessor.AWTEventAccessor#setPosted(AWTEvent)->void:::Marks the event as posted.
sun.awt.AWTAccessor.AWTEventAccessor#setSystemGenerated(AWTEvent)->void:::Sets the flag on this AWTEvent indicating that it was generated by the system.
sun.awt.AWTAccessor.AWTEventAccessor#isSystemGenerated(AWTEvent)->boolean:::Indicates whether this AWTEvent was generated by the system.
sun.awt.AWTAccessor.AWTEventAccessor#getAccessControlContext(AWTEvent)->AccessControlContext:::Returns the acc this event was constructed with.
sun.awt.AWTAccessor.AWTEventAccessor#getBData(AWTEvent)->byte[]:::Returns binary data associated with this event;
sun.awt.AWTAccessor.AWTEventAccessor#setBData(AWTEvent, byte[])->void:::Associates binary data with this event;
sun.awt.AWTAccessor.InputEventAccessor#getButtonDownMasks()->int[]::: input event accessor get button down masks
sun.awt.AWTAccessor.InputEventAccessor#canAccessSystemClipboard(InputEvent)->boolean::: input event accessor can access system clipboard
sun.awt.AWTAccessor.InputEventAccessor#setCanAccessSystemClipboard(InputEvent, boolean)->void::: input event accessor set can access system clipboard
sun.awt.AWTAccessor.MouseEventAccessor#isCausedByTouchEvent(MouseEvent)->boolean:::Indicates whether the event is a result of a touch event.
sun.awt.AWTAccessor.MouseEventAccessor#setCausedByTouchEvent(MouseEvent, boolean)->void:::Sets whether the event is a result of a touch event.
sun.awt.AWTAccessor.FrameAccessor#setExtendedState(Frame, int)->void::: frame accessor set extended state
sun.awt.AWTAccessor.FrameAccessor#getExtendedState(Frame)->int::: frame accessor get extended state
sun.awt.AWTAccessor.FrameAccessor#getMaximizedBounds(Frame)->Rectangle::: frame accessor get maximized bounds
sun.awt.AWTAccessor.KeyboardFocusManagerAccessor#shouldNativelyFocusHeavyweight(Component, Component, boolean, boolean, long, Cause)->int:::Indicates whether the native implementation should proceed with a pending focus request for the heavyweight.
sun.awt.AWTAccessor.KeyboardFocusManagerAccessor#processSynchronousLightweightTransfer(Component, Component, boolean, boolean, long)->boolean:::Delivers focus for the lightweight descendant of the heavyweight synchronously.
sun.awt.AWTAccessor.KeyboardFocusManagerAccessor#removeLastFocusRequest(Component)->void:::Removes the last focus request for the heavyweight from the queue.
sun.awt.AWTAccessor.KeyboardFocusManagerAccessor#getMostRecentFocusOwner(Window)->Component:::Gets the most recent focus owner in the window.
sun.awt.AWTAccessor.KeyboardFocusManagerAccessor#setMostRecentFocusOwner(Window, Component)->void:::Sets the most recent focus owner in the window.
sun.awt.AWTAccessor.KeyboardFocusManagerAccessor#getCurrentKeyboardFocusManager(AppContext)->KeyboardFocusManager:::Returns current KFM of the specified AppContext.
sun.awt.AWTAccessor.KeyboardFocusManagerAccessor#getCurrentFocusCycleRoot()->Container:::Return the current focus cycle root
sun.awt.AWTAccessor.MenuComponentAccessor#getAppContext(MenuComponent)->AppContext:::Returns the appContext of the menu component.
sun.awt.AWTAccessor.MenuComponentAccessor#setAppContext(MenuComponent, AppContext)->void:::Sets the appContext of the menu component.
sun.awt.AWTAccessor.MenuComponentAccessor#getPeer(MenuComponent)->T:::Returns the peer of the menu component.
sun.awt.AWTAccessor.MenuComponentAccessor#getParent(MenuComponent)->MenuContainer:::Returns the menu container of the menu component.
sun.awt.AWTAccessor.MenuComponentAccessor#setParent(MenuComponent, MenuContainer)->void:::Sets the menu container of the menu component.
sun.awt.AWTAccessor.MenuComponentAccessor#getFont_NoClientCode(MenuComponent)->Font:::Gets the font used for this menu component.
sun.awt.AWTAccessor.EventQueueAccessor#getDispatchThread(EventQueue)->Thread:::Gets the event dispatch thread.
sun.awt.AWTAccessor.EventQueueAccessor#isDispatchThreadImpl(EventQueue)->boolean:::Checks if the current thread is EDT for the given EQ.
sun.awt.AWTAccessor.EventQueueAccessor#removeSourceEvents(EventQueue, Object, boolean)->void:::Removes any pending events for the specified source object.
sun.awt.AWTAccessor.EventQueueAccessor#noEvents(EventQueue)->boolean:::Returns whether an event is pending on any of the separate Queues.
sun.awt.AWTAccessor.EventQueueAccessor#wakeup(EventQueue, boolean)->void:::Called from PostEventQueue.postEvent to notify that a new event appeared.
sun.awt.AWTAccessor.EventQueueAccessor#invokeAndWait(Object, Runnable)->void:::Static in EventQueue
sun.awt.AWTAccessor.EventQueueAccessor#setFwDispatcher(EventQueue, FwDispatcher)->void:::Sets the delegate for the EventQueue used by FX/AWT single threaded mode
sun.awt.AWTAccessor.EventQueueAccessor#getMostRecentEventTime(EventQueue)->long:::Gets most recent event time in the EventQueue
sun.awt.AWTAccessor.PopupMenuAccessor#isTrayIconPopup(PopupMenu)->boolean::: popup menu accessor is tray icon popup
sun.awt.AWTAccessor.FileDialogAccessor#setFiles(FileDialog, File[])->void::: file dialog accessor set files
sun.awt.AWTAccessor.FileDialogAccessor#setFile(FileDialog, String)->void::: file dialog accessor set file
sun.awt.AWTAccessor.FileDialogAccessor#setDirectory(FileDialog, String)->void::: file dialog accessor set directory
sun.awt.AWTAccessor.FileDialogAccessor#isMultipleMode(FileDialog)->boolean::: file dialog accessor is multiple mode
sun.awt.AWTAccessor.ScrollPaneAdjustableAccessor#setTypedValue(ScrollPaneAdjustable, int, int)->void::: scroll pane adjustable accessor set typed value
sun.awt.AWTAccessor.CheckboxMenuItemAccessor#getState(CheckboxMenuItem)->boolean:::Returns whether menu item is checked
sun.awt.AWTAccessor.CursorAccessor#getPData(Cursor)->long:::Returns pData of the Cursor class
sun.awt.AWTAccessor.CursorAccessor#setPData(Cursor, long)->void:::Sets pData to the Cursor class
sun.awt.AWTAccessor.CursorAccessor#getType(Cursor)->int:::Return type of the Cursor class
sun.awt.AWTAccessor.MenuBarAccessor#getHelpMenu(MenuBar)->Menu:::Returns help menu
sun.awt.AWTAccessor.MenuBarAccessor#getMenus(MenuBar)->Vector:::Returns menus
sun.awt.AWTAccessor.MenuItemAccessor#isEnabled(MenuItem)->boolean:::Returns whether menu item is enabled
sun.awt.AWTAccessor.MenuItemAccessor#getActionCommandImpl(MenuItem)->String:::Gets the command name of the action event that is fired by this menu item.
sun.awt.AWTAccessor.MenuItemAccessor#isItemEnabled(MenuItem)->boolean:::Returns true if the item and all its ancestors are enabled, false otherwise
sun.awt.AWTAccessor.MenuItemAccessor#getLabel(MenuItem)->String:::Returns label
sun.awt.AWTAccessor.MenuItemAccessor#getShortcut(MenuItem)->MenuShortcut:::Returns shortcut
sun.awt.AWTAccessor.MenuAccessor#getItems(Menu)->Vector:::Returns vector of the items that are part of the Menu
sun.awt.AWTAccessor.KeyEventAccessor#setRawCode(KeyEvent, long)->void:::Sets rawCode field for KeyEvent
sun.awt.AWTAccessor.KeyEventAccessor#setPrimaryLevelUnicode(KeyEvent, long)->void:::Sets primaryLevelUnicode field for KeyEvent
sun.awt.AWTAccessor.KeyEventAccessor#setExtendedKeyCode(KeyEvent, long)->void:::Sets extendedKeyCode field for KeyEvent
sun.awt.AWTAccessor.KeyEventAccessor#getOriginalSource(KeyEvent)->Component:::Gets original source for KeyEvent
sun.awt.AWTAccessor.KeyEventAccessor#isProxyActive(KeyEvent)->boolean:::Gets isProxyActive field for KeyEvent
sun.awt.AWTAccessor.ClientPropertyKeyAccessor#getJComponent_TRANSFER_HANDLER()->Object:::Retrieves JComponent_TRANSFER_HANDLER enum object
sun.awt.AWTAccessor.SystemTrayAccessor#firePropertyChange(SystemTray, String, Object, Object)->void:::Support for reporting bound property changes for Object properties.
sun.awt.AWTAccessor.TrayIconAccessor#addNotify(TrayIcon)->void::: tray icon accessor add notify
sun.awt.AWTAccessor.TrayIconAccessor#removeNotify(TrayIcon)->void::: tray icon accessor remove notify
sun.awt.AWTAccessor.DefaultKeyboardFocusManagerAccessor#consumeNextKeyTyped(DefaultKeyboardFocusManager, KeyEvent)->void::: default keyboard focus manager accessor consume next key typed
sun.awt.AWTAccessor.SequencedEventAccessor#getNested(AWTEvent)->AWTEvent::: sequenced event accessor get nested
sun.awt.AWTAccessor.SequencedEventAccessor#isSequencedEvent(AWTEvent)->boolean::: sequenced event accessor is sequenced event
sun.awt.AWTAccessor.SequencedEventAccessor#create(AWTEvent)->AWTEvent::: sequenced event accessor create
sun.awt.AWTAccessor.ToolkitAccessor#setPlatformResources(ResourceBundle)->void::: toolkit accessor set platform resources
sun.awt.AWTAccessor.InvocationEventAccessor#dispose(InvocationEvent)->void::: invocation event accessor dispose
sun.awt.AWTAccessor.SystemColorAccessor#updateSystemColors()->void::: system color accessor update system colors
sun.awt.AWTAccessor.AccessibleContextAccessor#setAppContext(AccessibleContext, AppContext)->void::: accessible context accessor set app context
sun.awt.AWTAccessor.AccessibleContextAccessor#getAppContext(AccessibleContext)->AppContext::: accessible context accessor get app context
sun.awt.AWTAccessor.AccessibleContextAccessor#getNativeAXResource(AccessibleContext)->Object::: accessible context accessor get native resource
sun.awt.AWTAccessor.AccessibleContextAccessor#setNativeAXResource(AccessibleContext, Object)->void::: accessible context accessor set native resource
sun.awt.AWTAccessor.AccessibleBundleAccessor#getKey(AccessibleBundle)->String::: accessible bundle accessor get key
sun.awt.AWTAccessor.DragSourceContextAccessor#getPeer(DragSourceContext)->DragSourceContextPeer:::Returns the peer of the DragSourceContext.
sun.awt.AWTAccessor.DropTargetContextAccessor#reset(DropTargetContext)->void:::Resets the DropTargetContext.
sun.awt.AWTAccessor.DropTargetContextAccessor#setDropTargetContextPeer(DropTargetContext, DropTargetContextPeer)->void:::Sets the DropTargetContextPeer
sun.awt.AWTAccessor#setComponentAccessor(ComponentAccessor)->void::: accessor set component accessor
sun.awt.AWTAccessor#getComponentAccessor()->ComponentAccessor::: accessor get component accessor
sun.awt.AWTAccessor#setContainerAccessor(ContainerAccessor)->void::: accessor set container accessor
sun.awt.AWTAccessor#getContainerAccessor()->ContainerAccessor::: accessor get container accessor
sun.awt.AWTAccessor#setWindowAccessor(WindowAccessor)->void::: accessor set window accessor
sun.awt.AWTAccessor#getWindowAccessor()->WindowAccessor::: accessor get window accessor
sun.awt.AWTAccessor#setAWTEventAccessor(AWTEventAccessor)->void::: accessor set event accessor
sun.awt.AWTAccessor#getAWTEventAccessor()->AWTEventAccessor::: accessor get event accessor
sun.awt.AWTAccessor#setInputEventAccessor(InputEventAccessor)->void::: accessor set input event accessor
sun.awt.AWTAccessor#getInputEventAccessor()->InputEventAccessor::: accessor get input event accessor
sun.awt.AWTAccessor#setMouseEventAccessor(MouseEventAccessor)->void::: accessor set mouse event accessor
sun.awt.AWTAccessor#getMouseEventAccessor()->MouseEventAccessor::: accessor get mouse event accessor
sun.awt.AWTAccessor#setFrameAccessor(FrameAccessor)->void::: accessor set frame accessor
sun.awt.AWTAccessor#getFrameAccessor()->FrameAccessor::: accessor get frame accessor
sun.awt.AWTAccessor#setKeyboardFocusManagerAccessor(KeyboardFocusManagerAccessor)->void::: accessor set keyboard focus manager accessor
sun.awt.AWTAccessor#getKeyboardFocusManagerAccessor()->KeyboardFocusManagerAccessor::: accessor get keyboard focus manager accessor
sun.awt.AWTAccessor#setMenuComponentAccessor(MenuComponentAccessor)->void::: accessor set menu component accessor
sun.awt.AWTAccessor#getMenuComponentAccessor()->MenuComponentAccessor::: accessor get menu component accessor
sun.awt.AWTAccessor#setEventQueueAccessor(EventQueueAccessor)->void::: accessor set event queue accessor
sun.awt.AWTAccessor#getEventQueueAccessor()->EventQueueAccessor::: accessor get event queue accessor
sun.awt.AWTAccessor#setPopupMenuAccessor(PopupMenuAccessor)->void::: accessor set popup menu accessor
sun.awt.AWTAccessor#getPopupMenuAccessor()->PopupMenuAccessor::: accessor get popup menu accessor
sun.awt.AWTAccessor#setFileDialogAccessor(FileDialogAccessor)->void::: accessor set file dialog accessor
sun.awt.AWTAccessor#getFileDialogAccessor()->FileDialogAccessor::: accessor get file dialog accessor
sun.awt.AWTAccessor#setScrollPaneAdjustableAccessor(ScrollPaneAdjustableAccessor)->void::: accessor set scroll pane adjustable accessor
sun.awt.AWTAccessor#getScrollPaneAdjustableAccessor()->ScrollPaneAdjustableAccessor::: accessor get scroll pane adjustable accessor
sun.awt.AWTAccessor#setCheckboxMenuItemAccessor(CheckboxMenuItemAccessor)->void:::Set an accessor object for the java.awt.CheckboxMenuItem class.
sun.awt.AWTAccessor#getCheckboxMenuItemAccessor()->CheckboxMenuItemAccessor:::Retrieve the accessor object for the java.awt.CheckboxMenuItem class.
sun.awt.AWTAccessor#setCursorAccessor(CursorAccessor)->void:::Set an accessor object for the java.awt.Cursor class.
sun.awt.AWTAccessor#getCursorAccessor()->CursorAccessor:::Retrieve the accessor object for the java.awt.Cursor class.
sun.awt.AWTAccessor#setMenuBarAccessor(MenuBarAccessor)->void:::Set an accessor object for the java.awt.MenuBar class.
sun.awt.AWTAccessor#getMenuBarAccessor()->MenuBarAccessor:::Retrieve the accessor object for the java.awt.MenuBar class.
sun.awt.AWTAccessor#setMenuItemAccessor(MenuItemAccessor)->void:::Set an accessor object for the java.awt.MenuItem class.
sun.awt.AWTAccessor#getMenuItemAccessor()->MenuItemAccessor:::Retrieve the accessor object for the java.awt.MenuItem class.
sun.awt.AWTAccessor#setMenuAccessor(MenuAccessor)->void:::Set an accessor object for the java.awt.Menu class.
sun.awt.AWTAccessor#getMenuAccessor()->MenuAccessor:::Retrieve the accessor object for the java.awt.Menu class.
sun.awt.AWTAccessor#setKeyEventAccessor(KeyEventAccessor)->void:::Set an accessor object for the java.awt.event.KeyEvent class.
sun.awt.AWTAccessor#getKeyEventAccessor()->KeyEventAccessor:::Retrieve the accessor object for the java.awt.event.KeyEvent class.
sun.awt.AWTAccessor#setClientPropertyKeyAccessor(ClientPropertyKeyAccessor)->void:::Set an accessor object for the javax.swing.ClientPropertyKey class.
sun.awt.AWTAccessor#getClientPropertyKeyAccessor()->ClientPropertyKeyAccessor:::Retrieve the accessor object for the javax.swing.ClientPropertyKey class.
sun.awt.AWTAccessor#setSystemTrayAccessor(SystemTrayAccessor)->void:::Set an accessor object for the java.awt.SystemTray class.
sun.awt.AWTAccessor#getSystemTrayAccessor()->SystemTrayAccessor:::Retrieve the accessor object for the java.awt.SystemTray class.
sun.awt.AWTAccessor#setTrayIconAccessor(TrayIconAccessor)->void:::Set an accessor object for the java.awt.TrayIcon class.
sun.awt.AWTAccessor#getTrayIconAccessor()->TrayIconAccessor:::Retrieve the accessor object for the java.awt.TrayIcon class.
sun.awt.AWTAccessor#setDefaultKeyboardFocusManagerAccessor(DefaultKeyboardFocusManagerAccessor)->void:::Set an accessor object for the java.awt.DefaultKeyboardFocusManager class.
sun.awt.AWTAccessor#getDefaultKeyboardFocusManagerAccessor()->DefaultKeyboardFocusManagerAccessor:::Retrieve the accessor object for the java.awt.DefaultKeyboardFocusManager class.
sun.awt.AWTAccessor#setSequencedEventAccessor(SequencedEventAccessor)->void::: accessor set sequenced event accessor
sun.awt.AWTAccessor#getSequencedEventAccessor()->SequencedEventAccessor::: accessor get sequenced event accessor
sun.awt.AWTAccessor#setToolkitAccessor(ToolkitAccessor)->void::: accessor set toolkit accessor
sun.awt.AWTAccessor#getToolkitAccessor()->ToolkitAccessor::: accessor get toolkit accessor
sun.awt.AWTAccessor#setInvocationEventAccessor(InvocationEventAccessor)->void::: accessor set invocation event accessor
sun.awt.AWTAccessor#getInvocationEventAccessor()->InvocationEventAccessor::: accessor get invocation event accessor
sun.awt.AWTAccessor#getSystemColorAccessor()->SystemColorAccessor::: accessor get system color accessor
sun.awt.AWTAccessor#setSystemColorAccessor(SystemColorAccessor)->void::: accessor set system color accessor
sun.awt.AWTAccessor#getAccessibleContextAccessor()->AccessibleContextAccessor::: accessor get accessible context accessor
sun.awt.AWTAccessor#setAccessibleBundleAccessor(AccessibleBundleAccessor)->void::: accessor set accessible bundle accessor
sun.awt.AWTAccessor#getAccessibleBundleAccessor()->AccessibleBundleAccessor::: accessor get accessible bundle accessor
sun.awt.AWTAccessor#setAccessibleContextAccessor(AccessibleContextAccessor)->void::: accessor set accessible context accessor
sun.awt.AWTAccessor#getDragSourceContextAccessor()->DragSourceContextAccessor::: accessor get drag source context accessor
sun.awt.AWTAccessor#setDragSourceContextAccessor(DragSourceContextAccessor)->void::: accessor set drag source context accessor
sun.awt.AWTAccessor#getDropTargetContextAccessor()->DropTargetContextAccessor::: accessor get drop target context accessor
sun.awt.AWTAccessor#setDropTargetContextAccessor(DropTargetContextAccessor)->void::: accessor set drop target context accessor
sun.awt.AWTAutoShutdown#getInstance()->AWTAutoShutdown:::Returns reference to a single AWTAutoShutdown instance.
sun.awt.AWTAutoShutdown#notifyToolkitThreadBusy()->void:::Notify that the toolkit thread is not waiting for a native event to appear in its queue.
sun.awt.AWTAutoShutdown#notifyToolkitThreadFree()->void:::Notify that the toolkit thread is waiting for a native event to appear in its queue.
sun.awt.AWTAutoShutdown#notifyThreadBusy(Thread)->void:::Add a specified thread to the set of busy event dispatch threads
sun.awt.AWTAutoShutdown#notifyThreadFree(Thread)->void:::Remove a specified thread from the set of busy event dispatch threads
sun.awt.AWTAutoShutdown#notifyPeerMapUpdated()->void:::Notify that the peermap has been updated, that means a new peer has been created or some existing peer has been disposed.
sun.awt.AWTAutoShutdown#run()->void:::Implementation of the Runnable interface
sun.awt.AWTAutoShutdown#getShutdownEvent()->AWTEvent::: auto shutdown get shutdown event
sun.awt.AWTAutoShutdown#registerPeer(Object, Object)->void::: auto shutdown register peer
sun.awt.AWTAutoShutdown#unregisterPeer(Object, Object)->void::: auto shutdown unregister peer
sun.awt.AWTAutoShutdown#getPeer(Object)->Object::: auto shutdown get peer
sun.awt.AWTAutoShutdown#dumpPeers(PlatformLogger)->void::: auto shutdown dump peers
sun.awt.AWTCharset#contains(Charset)->boolean::: charset contains
sun.awt.AWTCharset#newEncoder()->CharsetEncoder::: charset new encoder
sun.awt.AWTCharset#newDecoder()->CharsetDecoder::: charset new decoder
sun.awt.AWTCharset.Encoder#canEncode(char)->boolean::: encoder can encode
sun.awt.AWTCharset.Encoder#canEncode(CharSequence)->boolean::: encoder can encode
sun.awt.AWTCharset.Encoder#encodeLoop(CharBuffer, ByteBuffer)->CoderResult::: encoder encode loop
sun.awt.AWTCharset.Encoder#implFlush(ByteBuffer)->CoderResult::: encoder impl flush
sun.awt.AWTCharset.Encoder#implReset()->void::: encoder impl reset
sun.awt.AWTCharset.Encoder#implReplaceWith(byte[])->void::: encoder impl replace with
sun.awt.AWTCharset.Encoder#implOnMalformedInput(CodingErrorAction)->void::: encoder impl on malformed input
sun.awt.AWTCharset.Encoder#implOnUnmappableCharacter(CodingErrorAction)->void::: encoder impl on unmappable character
sun.awt.AWTCharset.Encoder#isLegalReplacement(byte[])->boolean::: encoder is legal replacement
sun.awt.AWTCharset.Decoder#decodeLoop(ByteBuffer, CharBuffer)->CoderResult::: decoder decode loop
sun.awt.AWTCharset.Decoder#implFlush(CharBuffer)->CoderResult::: decoder impl flush
sun.awt.AWTCharset.Decoder#implReset()->void::: decoder impl reset
sun.awt.AWTCharset.Decoder#implReplaceWith(String)->void::: decoder impl replace with
sun.awt.AWTCharset.Decoder#implOnMalformedInput(CodingErrorAction)->void::: decoder impl on malformed input
sun.awt.AWTCharset.Decoder#implOnUnmappableCharacter(CodingErrorAction)->void::: decoder impl on unmappable character
sun.awt.AWTSecurityManager#getAppContext()->AppContext:::Get the AppContext corresponding to the current context
sun.awt.CausedFocusEvent#readResolve()->Object::: caused focus event read resolve
sun.awt.ComponentFactory#createComponent(Component)->LightweightPeer:::Creates a peer for a component or container
sun.awt.ComponentFactory#createDesktopPeer(Desktop)->DesktopPeer:::Creates this toolkit's implementation of the Desktop using the specified peer interface.
sun.awt.ComponentFactory#createTaskbarPeer(Taskbar)->TaskbarPeer:::Creates this toolkit's implementation of the Taskbar using the specified peer interface.
sun.awt.ComponentFactory#createButton(Button)->ButtonPeer:::Creates this toolkit's implementation of Button using the specified peer interface.
sun.awt.ComponentFactory#createTextField(TextField)->TextFieldPeer:::Creates this toolkit's implementation of TextField using the specified peer interface.
sun.awt.ComponentFactory#createLabel(Label)->LabelPeer:::Creates this toolkit's implementation of Label using the specified peer interface.
sun.awt.ComponentFactory#createList(java.awt.List)->ListPeer:::Creates this toolkit's implementation of List using the specified peer interface.
sun.awt.ComponentFactory#createCheckbox(Checkbox)->CheckboxPeer:::Creates this toolkit's implementation of Checkbox using the specified peer interface.
sun.awt.ComponentFactory#createScrollbar(Scrollbar)->ScrollbarPeer:::Creates this toolkit's implementation of Scrollbar using the specified peer interface.
sun.awt.ComponentFactory#createScrollPane(ScrollPane)->ScrollPanePeer:::Creates this toolkit's implementation of ScrollPane using the specified peer interface.
sun.awt.ComponentFactory#createTextArea(TextArea)->TextAreaPeer:::Creates this toolkit's implementation of TextArea using the specified peer interface.
sun.awt.ComponentFactory#createChoice(Choice)->ChoicePeer:::Creates this toolkit's implementation of Choice using the specified peer interface.
sun.awt.ComponentFactory#createFrame(Frame)->FramePeer:::Creates this toolkit's implementation of Frame using the specified peer interface.
sun.awt.ComponentFactory#createCanvas(Canvas)->CanvasPeer:::Creates this toolkit's implementation of Canvas using the specified peer interface.
sun.awt.ComponentFactory#createPanel(Panel)->PanelPeer:::Creates this toolkit's implementation of Panel using the specified peer interface.
sun.awt.ComponentFactory#createWindow(Window)->WindowPeer:::Creates this toolkit's implementation of Window using the specified peer interface.
sun.awt.ComponentFactory#createDialog(Dialog)->DialogPeer:::Creates this toolkit's implementation of Dialog using the specified peer interface.
sun.awt.ComponentFactory#createMenuBar(MenuBar)->MenuBarPeer:::Creates this toolkit's implementation of MenuBar using the specified peer interface.
sun.awt.ComponentFactory#createMenu(Menu)->MenuPeer:::Creates this toolkit's implementation of Menu using the specified peer interface.
sun.awt.ComponentFactory#createPopupMenu(PopupMenu)->PopupMenuPeer:::Creates this toolkit's implementation of PopupMenu using the specified peer interface.
sun.awt.ComponentFactory#createMenuItem(MenuItem)->MenuItemPeer:::Creates this toolkit's implementation of MenuItem using the specified peer interface.
sun.awt.ComponentFactory#createFileDialog(FileDialog)->FileDialogPeer:::Creates this toolkit's implementation of FileDialog using the specified peer interface.
sun.awt.ComponentFactory#createCheckboxMenuItem(CheckboxMenuItem)->CheckboxMenuItemPeer:::Creates this toolkit's implementation of CheckboxMenuItem using the specified peer interface.
sun.awt.ComponentFactory#createDragSourceContextPeer(DragGestureEvent)->DragSourceContextPeer:::Creates the peer for a DragSourceContext
sun.awt.ComponentFactory#getFontPeer(String, int)->FontPeer:::Creates this toolkit's implementation of Font using the specified peer interface.
sun.awt.ComponentFactory#createRobot(Robot, GraphicsDevice)->RobotPeer::: component factory create robot
sun.awt.ComponentFactory#getDataTransferer()->DataTransferer::: component factory get data transferer
sun.awt.ComponentFactory#getMouseInfoPeer()->MouseInfoPeer:::Obtains this toolkit's implementation of helper class for MouseInfo operations.
sun.awt.ConstrainableGraphics#constrain(int, int, int, int)->void:::Constrain this graphics object to have a permanent device space origin of (x, y) and a permanent maximum clip of (x,y,w,h)
sun.awt.CustomCursor#createNativeCursor(Image, int[], int, int, int, int)->void::: custom cursor create native cursor
sun.awt.DebugSettings#init()->void::: debug settings init
sun.awt.DebugSettings#getInstance()->DebugSettings::: debug settings get instance
sun.awt.DebugSettings#toString()->String::: debug settings to string
sun.awt.DebugSettings#getBoolean(String, boolean)->boolean:::Gets named boolean property
sun.awt.DebugSettings#getInt(String, int)->int:::Gets named integer property
sun.awt.DebugSettings#getString(String, String)->String:::Gets named String property
sun.awt.DisplayChangedListener#displayChanged()->void:::Invoked when the display mode has changed.
sun.awt.DisplayChangedListener#paletteChanged()->void:::Invoked when the palette has changed.
sun.awt.EmbeddedFrame#supportsXEmbed()->boolean::: embedded frame supports embed
sun.awt.EmbeddedFrame#getParent()->Container:::Block introspection of a parent window by this child.
sun.awt.EmbeddedFrame#propertyChange(PropertyChangeEvent)->void:::Needed to track which KeyboardFocusManager is current
sun.awt.EmbeddedFrame#registerListeners()->void:::Because there may be many AppContexts, and we can't be sure where this EmbeddedFrame is first created or shown, we can't automatically determine the correct KeyboardFocusManager to attach to as KeyEventDispatcher
sun.awt.EmbeddedFrame#show()->void:::Needed to avoid memory leak: we register this EmbeddedFrame as a listener with KeyboardFocusManager of applet's AppContext
sun.awt.EmbeddedFrame#hide()->void:::Needed to avoid memory leak: we register this EmbeddedFrame as a listener with KeyboardFocusManager of applet's AppContext
sun.awt.EmbeddedFrame#dispatchKeyEvent(KeyEvent)->boolean:::Need this method to detect when the focus may have chance to leave the focus cycle root which is EmbeddedFrame
sun.awt.EmbeddedFrame#traverseIn(boolean)->boolean:::This method is called by the embedder when we should receive focus as element of the traversal chain
sun.awt.EmbeddedFrame#traverseOut(boolean)->boolean:::This method is called from dispatchKeyEvent in the following two cases: 1
sun.awt.EmbeddedFrame#setTitle(String)->void:::Block modifying any frame attributes, since they aren't applicable for EmbeddedFrames.
sun.awt.EmbeddedFrame#setIconImage(Image)->void::: embedded frame set icon image
sun.awt.EmbeddedFrame#setIconImages(java.util.List)->void::: embedded frame set icon images
sun.awt.EmbeddedFrame#setMenuBar(MenuBar)->void::: embedded frame set menu bar
sun.awt.EmbeddedFrame#setResizable(boolean)->void::: embedded frame set resizable
sun.awt.EmbeddedFrame#remove(MenuComponent)->void::: embedded frame remove
sun.awt.EmbeddedFrame#isResizable()->boolean::: embedded frame is resizable
sun.awt.EmbeddedFrame#addNotify()->void::: embedded frame add notify
sun.awt.EmbeddedFrame#setCursorAllowed(boolean)->void::: embedded frame set cursor allowed
sun.awt.EmbeddedFrame#isCursorAllowed()->boolean::: embedded frame is cursor allowed
sun.awt.EmbeddedFrame#getCursor()->Cursor::: embedded frame get cursor
sun.awt.EmbeddedFrame#setPeer(ComponentPeer)->void::: embedded frame set peer
sun.awt.EmbeddedFrame#synthesizeWindowActivation(boolean)->void:::Synthesize native message to activate or deactivate EmbeddedFrame window depending on the value of parameter b
sun.awt.EmbeddedFrame#setLocationPrivate(int, int)->void:::Moves this embedded frame to a new location
sun.awt.EmbeddedFrame#getLocationPrivate()->Point:::Gets the location of this embedded frame as a point specifying the top-left corner relative to parent component
sun.awt.EmbeddedFrame#setBoundsPrivate(int, int, int, int)->void:::Moves and resizes this embedded frame
sun.awt.EmbeddedFrame#getBoundsPrivate()->Rectangle:::Gets the bounds of this embedded frame as a rectangle specifying the width, height and location relative to the native parent component
sun.awt.EmbeddedFrame#toFront()->void::: embedded frame to front
sun.awt.EmbeddedFrame#toBack()->void::: embedded frame to back
sun.awt.EmbeddedFrame#registerAccelerator(AWTKeyStroke)->void::: embedded frame register accelerator
sun.awt.EmbeddedFrame#unregisterAccelerator(AWTKeyStroke)->void::: embedded frame unregister accelerator
sun.awt.EmbeddedFrame#getAppletIfAncestorOf(Component)->Applet:::Checks if the component is in an EmbeddedFrame
sun.awt.EmbeddedFrame#notifyModalBlocked(Dialog, boolean)->void:::This method should be overriden in subclasses
sun.awt.ExtendedKeyCodes#getExtendedKeyCodeForChar(int)->int::: extended key codes get extended key code for char
sun.awt.FontConfiguration#init()->boolean::: font configuration init
sun.awt.FontConfiguration#setOsNameAndVersion()->void:::Fills in this instance's osVersion and osName members
sun.awt.FontConfiguration#foundOsSpecificFile()->boolean::: font configuration found os specific file
sun.awt.FontConfiguration#fontFilesArePresent()->boolean::: font configuration font files are present
sun.awt.FontConfiguration#getInstalledFallbackFonts(String)->void::: font configuration get installed fallback fonts
sun.awt.FontConfiguration#loadBinary(InputStream)->void::: font configuration load binary
sun.awt.FontConfiguration#saveBinary(OutputStream)->void::: font configuration save binary
sun.awt.FontConfiguration#loadProperties(InputStream)->void::: font configuration load properties
sun.awt.FontConfiguration#hasMonoToPropMap()->boolean::: font configuration has mono to prop map
sun.awt.FontConfiguration#isLogicalFontFamilyName(String)->boolean:::Checks whether the given font family name is a valid logical font name
sun.awt.FontConfiguration#isLogicalFontFamilyNameLC(String)->boolean:::Checks whether the given font family name is a valid logical font name
sun.awt.FontConfiguration#isLogicalFontFaceName(String)->boolean:::Checks whether the given font face name is a valid logical font name
sun.awt.FontConfiguration#isLogicalFontFaceNameLC(String)->boolean:::Checks whether the given font face name is a valid logical font name
sun.awt.FontConfiguration#getFontIndex(String)->int::: font configuration get font index
sun.awt.FontConfiguration#getStyleIndex(String)->int::: font configuration get style index
sun.awt.FontConfiguration#getStyleIndex(int)->int::: font configuration get style index
sun.awt.FontConfiguration#getFontName(int)->String::: font configuration get font name
sun.awt.FontConfiguration#getStyleName(int)->String::: font configuration get style name
sun.awt.FontConfiguration#getLogicalFontFaceName(String, int)->String:::Returns the font face name for the given logical font family name and style
sun.awt.FontConfiguration#getStyleString(int)->String:::Returns the string typically used in properties files for the given style
sun.awt.FontConfiguration#getFallbackFamilyName(String, String)->String:::Returns a fallback name for the given font name
sun.awt.FontConfiguration#getCompatibilityFamilyName(String)->String:::Returns the 1.1 equivalent for some old 1.0 font family names for which we need to maintain compatibility in some configurations
sun.awt.FontConfiguration#mapFileName(String)->String:::Maps a file name given in the font configuration file to a format appropriate for the platform.
sun.awt.FontConfiguration#initReorderMap()->void::: font configuration init reorder map
sun.awt.FontConfiguration#willReorderForStartupLocale()->boolean::: font configuration will reorder for startup locale
sun.awt.FontConfiguration#split(String)->String[]::: font configuration split
sun.awt.FontConfiguration#getFontDescriptors(String, int)->FontDescriptor[]:::Returns FontDescriptors describing the physical fonts used for the given logical font name and style
sun.awt.FontConfiguration#buildFontDescriptors(int, int)->FontDescriptor[]::: font configuration build font descriptors
sun.awt.FontConfiguration#makeAWTFontName(String, String)->String:::Returns the AWT font name for the given platform font name and character subset.
sun.awt.FontConfiguration#getEncoding(String, String)->String:::Returns the java.io name of the platform character encoding for the given AWT font name and character subset
sun.awt.FontConfiguration#getDefaultFontCharset(String)->Charset::: font configuration get default font charset
sun.awt.FontConfiguration#getAWTFontPathSet()->HashSet::: font configuration get font path set
sun.awt.FontConfiguration#get2DCompositeFontInfo()->CompositeFontDescriptor[]:::Returns an array of composite font descriptors for all logical font faces.
sun.awt.FontConfiguration#getFaceNameFromComponentFontName(String)->String::: font configuration get face name from component font name
sun.awt.FontConfiguration#getFileNameFromComponentFontName(String)->String::: font configuration get file name from component font name
sun.awt.FontConfiguration#needToSearchForFile(String)->boolean::: font configuration need to search for file
sun.awt.FontConfiguration#getNumberCoreFonts()->int::: font configuration get number core fonts
sun.awt.FontConfiguration#getPlatformFontNames()->String[]::: font configuration get platform font names
sun.awt.FontConfiguration#getFileNameFromPlatformName(String)->String:::Returns a file name for the physical font represented by this platform font name, if the font configuration has such information available, or null if the information is unavailable
sun.awt.FontConfiguration#getExtraFontPath()->String:::Returns a configuration specific path to be appended to the font search path.
sun.awt.FontConfiguration#getVersion()->String::: font configuration get version
sun.awt.FontConfiguration#getFontConfiguration()->FontConfiguration::: font configuration get font configuration
sun.awt.FontConfiguration#setFontConfiguration()->void::: font configuration set font configuration
sun.awt.FontConfiguration#getComponentFontID(short, int, int)->short::: font configuration get component font d
sun.awt.FontConfiguration#getComponentFontIDMotif(short, int, int)->short::: font configuration get component font motif
sun.awt.FontConfiguration#getComponentFontName(short)->String::: font configuration get component font name
sun.awt.FontConfiguration#getCoreScripts(int)->short[]::: font configuration get core scripts
sun.awt.FontConfiguration#getString(short)->String::: font configuration get string
sun.awt.FontConfiguration.PropertiesHandler#load(InputStream)->void::: properties handler load
sun.awt.FontConfiguration.PropertiesHandler.FontProperties#put(Object, Object)->Object::: font properties put
sun.awt.FontDescriptor#getNativeName()->String::: font descriptor get native name
sun.awt.FontDescriptor#getFontCharsetEncoder()->CharsetEncoder::: font descriptor get font charset encoder
sun.awt.FontDescriptor#getFontCharsetName()->String::: font descriptor get font charset name
sun.awt.FontDescriptor#getExclusionRanges()->int[]::: font descriptor get exclusion ranges
sun.awt.FontDescriptor#isExcluded(char)->boolean:::Return true if the character is exclusion character.
sun.awt.FontDescriptor#toString()->String::: font descriptor to string
sun.awt.FontDescriptor#useUnicode()->boolean::: font descriptor use unicode
sun.awt.FwDispatcher#isDispatchThread()->boolean:::Delegates the EventQueue#isDispatchThread() method
sun.awt.FwDispatcher#scheduleDispatch(Runnable)->void:::Forwards a runnable to the delegate, which executes it on an appropriate thread.
sun.awt.FwDispatcher#createSecondaryLoop()->SecondaryLoop:::Delegates the java.awt.EventQueue#createSecondaryLoop() method
sun.awt.GlobalCursorManager.NativeUpdater#run()->void::: native updater run
sun.awt.GlobalCursorManager.NativeUpdater#postIfNotPending(Component, InvocationEvent)->void::: native updater post if not pending
sun.awt.GlobalCursorManager#updateCursorImmediately()->void:::Should be called for any activity at the Java level which may affect the global cursor, except for Java MOUSE_MOVED events.
sun.awt.GlobalCursorManager#updateCursorImmediately(InputEvent)->void:::Should be called in response to Java MOUSE_MOVED events
sun.awt.GlobalCursorManager#updateCursorLater(Component)->void:::Should be called in response to a native mouse enter or native mouse button released message
sun.awt.GlobalCursorManager#setCursor(Component, Cursor, boolean)->void:::Set the global cursor to the specified cursor
sun.awt.GlobalCursorManager#getCursorPos(Point)->void:::Returns the global cursor position, in screen coordinates.
sun.awt.GlobalCursorManager#getLocationOnScreen(Component)->Point::: global cursor manager get location on screen
sun.awt.GlobalCursorManager#findHeavyweightUnderCursor(boolean)->Component:::Returns the most specific, visible, heavyweight Component under the cursor
sun.awt.GlobalCursorManager#updateCursorOutOfJava()->void::: global cursor manager update cursor out of java
sun.awt.Graphics2Delegate#setBackground(Color)->void::: graphics2 delegate set background
sun.awt.HeadlessToolkit#getUnderlyingToolkit()->Toolkit::: headless toolkit get underlying toolkit
sun.awt.HeadlessToolkit#getKeyboardFocusManagerPeer()->KeyboardFocusManagerPeer::: headless toolkit get keyboard focus manager peer
sun.awt.HeadlessToolkit#createTrayIcon(TrayIcon)->TrayIconPeer::: headless toolkit create tray icon
sun.awt.HeadlessToolkit#createSystemTray(SystemTray)->SystemTrayPeer::: headless toolkit create system tray
sun.awt.HeadlessToolkit#isTraySupported()->boolean::: headless toolkit is tray supported
sun.awt.HeadlessToolkit#getGlobalCursorManager()->GlobalCursorManager::: headless toolkit get global cursor manager
sun.awt.HeadlessToolkit#loadSystemColors(int[])->void::: headless toolkit load system colors
sun.awt.HeadlessToolkit#getColorModel()->ColorModel::: headless toolkit get color model
sun.awt.HeadlessToolkit#getScreenResolution()->int::: headless toolkit get screen resolution
sun.awt.HeadlessToolkit#mapInputMethodHighlight(InputMethodHighlight)->Map::: headless toolkit map input method highlight
sun.awt.HeadlessToolkit#getMenuShortcutKeyMask()->int::: headless toolkit get menu shortcut key mask
sun.awt.HeadlessToolkit#getMenuShortcutKeyMaskEx()->int::: headless toolkit get menu shortcut key mask ex
sun.awt.HeadlessToolkit#getLockingKeyState(int)->boolean::: headless toolkit get locking key state
sun.awt.HeadlessToolkit#setLockingKeyState(int, boolean)->void::: headless toolkit set locking key state
sun.awt.HeadlessToolkit#createCustomCursor(Image, Point, String)->Cursor::: headless toolkit create custom cursor
sun.awt.HeadlessToolkit#getBestCursorSize(int, int)->Dimension::: headless toolkit get best cursor size
sun.awt.HeadlessToolkit#getMaximumCursorColors()->int::: headless toolkit get maximum cursor colors
sun.awt.HeadlessToolkit#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)->T::: headless toolkit create drag gesture recognizer
sun.awt.HeadlessToolkit#getScreenSize()->Dimension::: headless toolkit get screen size
sun.awt.HeadlessToolkit#getScreenInsets(GraphicsConfiguration)->Insets::: headless toolkit get screen insets
sun.awt.HeadlessToolkit#setDynamicLayout(boolean)->void::: headless toolkit set dynamic layout
sun.awt.HeadlessToolkit#isDynamicLayoutSet()->boolean::: headless toolkit is dynamic layout set
sun.awt.HeadlessToolkit#isDynamicLayoutActive()->boolean::: headless toolkit is dynamic layout active
sun.awt.HeadlessToolkit#getSystemClipboard()->Clipboard::: headless toolkit get system clipboard
sun.awt.HeadlessToolkit#getPrintJob(Frame, String, JobAttributes, PageAttributes)->PrintJob::: headless toolkit get print job
sun.awt.HeadlessToolkit#getPrintJob(Frame, String, Properties)->PrintJob::: headless toolkit get print job
sun.awt.HeadlessToolkit#sync()->void::: headless toolkit sync
sun.awt.HeadlessToolkit#beep()->void::: headless toolkit beep
sun.awt.HeadlessToolkit#getSystemEventQueueImpl()->EventQueue::: headless toolkit get system event queue impl
sun.awt.HeadlessToolkit#checkImage(Image, int, int, ImageObserver)->int::: headless toolkit check image
sun.awt.HeadlessToolkit#prepareImage(Image, int, int, ImageObserver)->boolean::: headless toolkit prepare image
sun.awt.HeadlessToolkit#getImage(String)->Image::: headless toolkit get image
sun.awt.HeadlessToolkit#getImage(URL)->Image::: headless toolkit get image
sun.awt.HeadlessToolkit#createImage(String)->Image::: headless toolkit create image
sun.awt.HeadlessToolkit#createImage(URL)->Image::: headless toolkit create image
sun.awt.HeadlessToolkit#createImage(byte[], int, int)->Image::: headless toolkit create image
sun.awt.HeadlessToolkit#createImage(ImageProducer)->Image::: headless toolkit create image
sun.awt.HeadlessToolkit#createImage(byte[])->Image::: headless toolkit create image
sun.awt.HeadlessToolkit#getFontPeer(String, int)->FontPeer::: headless toolkit get font peer
sun.awt.HeadlessToolkit#getFontMetrics(Font)->FontMetrics::: headless toolkit get font metrics
sun.awt.HeadlessToolkit#getFontList()->String[]::: headless toolkit get font list
sun.awt.HeadlessToolkit#addPropertyChangeListener(String, PropertyChangeListener)->void::: headless toolkit add property change listener
sun.awt.HeadlessToolkit#removePropertyChangeListener(String, PropertyChangeListener)->void::: headless toolkit remove property change listener
sun.awt.HeadlessToolkit#isModalityTypeSupported(Dialog.ModalityType)->boolean::: headless toolkit is modality type supported
sun.awt.HeadlessToolkit#isModalExclusionTypeSupported(Dialog.ModalExclusionType)->boolean::: headless toolkit is modal exclusion type supported
sun.awt.HeadlessToolkit#isAlwaysOnTopSupported()->boolean::: headless toolkit is always on top supported
sun.awt.HeadlessToolkit#addAWTEventListener(AWTEventListener, long)->void::: headless toolkit add event listener
sun.awt.HeadlessToolkit#removeAWTEventListener(AWTEventListener)->void::: headless toolkit remove event listener
sun.awt.HeadlessToolkit#getAWTEventListeners()->AWTEventListener[]::: headless toolkit get event listeners
sun.awt.HeadlessToolkit#getAWTEventListeners(long)->AWTEventListener[]::: headless toolkit get event listeners
sun.awt.HeadlessToolkit#isDesktopSupported()->boolean::: headless toolkit is desktop supported
sun.awt.HeadlessToolkit#areExtraMouseButtonsEnabled()->boolean::: headless toolkit are extra mouse buttons enabled
sun.awt.HKSCS#contains(Charset)->boolean::: s contains
sun.awt.HKSCS#newDecoder()->CharsetDecoder::: s new decoder
sun.awt.HKSCS#newEncoder()->CharsetEncoder::: s new encoder
sun.awt.HToolkit#createLightweightFrame(LightweightFrame)->FramePeer::: toolkit create lightweight frame
sun.awt.HToolkit#getKeyboardFocusManagerPeer()->KeyboardFocusManagerPeer::: toolkit get keyboard focus manager peer
sun.awt.HToolkit#createTrayIcon(TrayIcon)->TrayIconPeer::: toolkit create tray icon
sun.awt.HToolkit#createSystemTray(SystemTray)->SystemTrayPeer::: toolkit create system tray
sun.awt.HToolkit#isTraySupported()->boolean::: toolkit is tray supported
sun.awt.HToolkit#getGlobalCursorManager()->GlobalCursorManager::: toolkit get global cursor manager
sun.awt.HToolkit#loadSystemColors(int[])->void::: toolkit load system colors
sun.awt.HToolkit#getColorModel()->ColorModel::: toolkit get color model
sun.awt.HToolkit#getScreenResolution()->int::: toolkit get screen resolution
sun.awt.HToolkit#mapInputMethodHighlight(InputMethodHighlight)->Map::: toolkit map input method highlight
sun.awt.HToolkit#getMenuShortcutKeyMask()->int::: toolkit get menu shortcut key mask
sun.awt.HToolkit#getMenuShortcutKeyMaskEx()->int::: toolkit get menu shortcut key mask ex
sun.awt.HToolkit#getLockingKeyState(int)->boolean::: toolkit get locking key state
sun.awt.HToolkit#setLockingKeyState(int, boolean)->void::: toolkit set locking key state
sun.awt.HToolkit#createCustomCursor(Image, Point, String)->Cursor::: toolkit create custom cursor
sun.awt.HToolkit#getBestCursorSize(int, int)->Dimension::: toolkit get best cursor size
sun.awt.HToolkit#getMaximumCursorColors()->int::: toolkit get maximum cursor colors
sun.awt.HToolkit#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)->T::: toolkit create drag gesture recognizer
sun.awt.HToolkit#getScreenSize()->Dimension::: toolkit get screen size
sun.awt.HToolkit#getScreenInsets(GraphicsConfiguration)->Insets::: toolkit get screen insets
sun.awt.HToolkit#setDynamicLayout(boolean)->void::: toolkit set dynamic layout
sun.awt.HToolkit#isDynamicLayoutSet()->boolean::: toolkit is dynamic layout set
sun.awt.HToolkit#isDynamicLayoutActive()->boolean::: toolkit is dynamic layout active
sun.awt.HToolkit#getSystemClipboard()->Clipboard::: toolkit get system clipboard
sun.awt.HToolkit#getPrintJob(Frame, String, JobAttributes, PageAttributes)->PrintJob::: toolkit get print job
sun.awt.HToolkit#getPrintJob(Frame, String, Properties)->PrintJob::: toolkit get print job
sun.awt.HToolkit#sync()->void::: toolkit sync
sun.awt.HToolkit#syncNativeQueue(long)->boolean::: toolkit sync native queue
sun.awt.HToolkit#beep()->void::: toolkit beep
sun.awt.HToolkit#isModalityTypeSupported(Dialog.ModalityType)->boolean::: toolkit is modality type supported
sun.awt.HToolkit#isModalExclusionTypeSupported(Dialog.ModalExclusionType)->boolean::: toolkit is modal exclusion type supported
sun.awt.HToolkit#isDesktopSupported()->boolean::: toolkit is desktop supported
sun.awt.HToolkit#isTaskbarSupported()->boolean::: toolkit is taskbar supported
sun.awt.HToolkit#isWindowOpacityControlSupported()->boolean::: toolkit is window opacity control supported
sun.awt.HToolkit#isWindowShapingSupported()->boolean::: toolkit is window shaping supported
sun.awt.HToolkit#isWindowTranslucencySupported()->boolean::: toolkit is window translucency supported
sun.awt.HToolkit#grab(Window)->void::: toolkit grab
sun.awt.HToolkit#ungrab(Window)->void::: toolkit ungrab
sun.awt.HToolkit#syncNativeQueue()->boolean::: toolkit sync native queue
sun.awt.HToolkit#getInputMethodAdapterDescriptor()->InputMethodDescriptor::: toolkit get input method adapter descriptor
sun.awt.IconInfo#setScaledSize(int, int)->void::: icon info set scaled size
sun.awt.IconInfo#isValid()->boolean::: icon info is valid
sun.awt.IconInfo#getWidth()->int::: icon info get width
sun.awt.IconInfo#getHeight()->int::: icon info get height
sun.awt.IconInfo#toString()->String::: icon info to string
sun.awt.IconInfo#getRawLength()->int::: icon info get raw length
sun.awt.IconInfo#getIntData()->int[]::: icon info get int data
sun.awt.IconInfo#getLongData()->long[]::: icon info get long data
sun.awt.IconInfo#getImage()->Image::: icon info get image
sun.awt.IconInfo#intArrayToImage(int[])->Image::: icon info int array to image
sun.awt.IconInfo#imageToIntArray(Image, int, int)->int[]::: icon info image to int array
sun.awt.InputMethodSupport#getInputMethodAdapterDescriptor()->InputMethodDescriptor:::Returns a new input method adapter descriptor for native input methods.
sun.awt.InputMethodSupport#createInputMethodWindow(String, InputContext)->Window:::Returns a new input method window for the platform
sun.awt.InputMethodSupport#enableInputMethodsForTextComponent()->boolean:::Returns whether input methods are enabled on the platform
sun.awt.InputMethodSupport#getDefaultKeyboardLocale()->Locale:::Returns the default keyboard locale of the underlying operating system.
sun.awt.KeyboardFocusManagerPeerImpl#clearGlobalFocusOwner(Window)->void::: keyboard focus manager peer impl clear global focus owner
sun.awt.KeyboardFocusManagerPeerImpl#shouldFocusOnClick(Component)->boolean::: keyboard focus manager peer impl should focus on click
sun.awt.KeyboardFocusManagerPeerImpl#deliverFocus(Component, Component, boolean, boolean, long, FocusEvent.Cause, Component)->boolean::: keyboard focus manager peer impl deliver focus
sun.awt.KeyboardFocusManagerPeerImpl#requestFocusFor(Component, FocusEvent.Cause)->void::: keyboard focus manager peer impl request focus for
sun.awt.KeyboardFocusManagerPeerImpl#shouldNativelyFocusHeavyweight(Component, Component, boolean, boolean, long, FocusEvent.Cause)->int::: keyboard focus manager peer impl should natively focus heavyweight
sun.awt.KeyboardFocusManagerPeerImpl#removeLastFocusRequest(Component)->void::: keyboard focus manager peer impl remove last focus request
sun.awt.KeyboardFocusManagerPeerImpl#processSynchronousLightweightTransfer(Component, Component, boolean, boolean, long)->boolean::: keyboard focus manager peer impl process synchronous lightweight transfer
sun.awt.KeyboardFocusManagerPeerProvider#getKeyboardFocusManagerPeer()->KeyboardFocusManagerPeer:::Gets a singleton KeyboardFocusManagerPeer instance.
sun.awt.LightweightFrame#getParent()->Container:::Blocks introspection of a parent window by this child.
sun.awt.LightweightFrame#getGraphics()->Graphics::: lightweight frame get graphics
sun.awt.LightweightFrame#isResizable()->boolean::: lightweight frame is resizable
sun.awt.LightweightFrame#setTitle(String)->void::: lightweight frame set title
sun.awt.LightweightFrame#setIconImage(Image)->void::: lightweight frame set icon image
sun.awt.LightweightFrame#setIconImages(java.util.List)->void::: lightweight frame set icon images
sun.awt.LightweightFrame#setMenuBar(MenuBar)->void::: lightweight frame set menu bar
sun.awt.LightweightFrame#setResizable(boolean)->void::: lightweight frame set resizable
sun.awt.LightweightFrame#remove(MenuComponent)->void::: lightweight frame remove
sun.awt.LightweightFrame#toFront()->void::: lightweight frame to front
sun.awt.LightweightFrame#toBack()->void::: lightweight frame to back
sun.awt.LightweightFrame#addNotify()->void::: lightweight frame add notify
sun.awt.LightweightFrame#emulateActivation(boolean)->void:::Requests the peer to emulate activation or deactivation of the frame
sun.awt.LightweightFrame#grabFocus()->void:::Delegates the focus grab action to the client (embedding) application
sun.awt.LightweightFrame#ungrabFocus()->void:::Delegates the focus ungrab action to the client (embedding) application
sun.awt.LightweightFrame#getScaleFactor()->int:::Returns the scale factor of this frame
sun.awt.LightweightFrame#getScaleFactorX()->double:::Returns the scale factor of this frame along x coordinate
sun.awt.LightweightFrame#getScaleFactorY()->double:::Returns the scale factor of this frame along y coordinate
sun.awt.LightweightFrame#notifyDisplayChanged(int)->void:::Called when display of the hosted frame is changed.
sun.awt.LightweightFrame#notifyDisplayChanged(double, double)->void:::Called when display of the hosted frame is changed.
sun.awt.LightweightFrame#getHostBounds()->Rectangle:::Returns the absolute bounds of the host (embedding) window.
sun.awt.LightweightFrame#setHostBounds(int, int, int, int)->void:::Sets the absolute bounds of the host (embedding) window.
sun.awt.LightweightFrame#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener)->T:::Create a drag gesture recognizer for the lightweight frame.
sun.awt.LightweightFrame#createDragSourceContextPeer(DragGestureEvent)->DragSourceContextPeer:::Create a drag source context peer for the lightweight frame.
sun.awt.LightweightFrame#addDropTarget(DropTarget)->void:::Adds a drop target to the lightweight frame.
sun.awt.LightweightFrame#removeDropTarget(DropTarget)->void:::Removes a drop target from the lightweight frame.
sun.awt.ModalityEvent#dispatch()->void::: modality event dispatch
sun.awt.ModalityListener#modalityPushed(ModalityEvent)->void:::Called by AWT when it enters a new level of modality
sun.awt.ModalityListener#modalityPopped(ModalityEvent)->void:::Called by AWT when it exits a level of modality
sun.awt.Mutex#lock()->void::: mutex lock
sun.awt.Mutex#unlock()->void::: mutex unlock
sun.awt.Mutex#isOwned()->boolean::: mutex is owned
sun.awt.NativeLibLoader#loadLibraries()->void:::This is copied from java.awt.Toolkit since we need the library loaded in sun.awt.image also:  WARNING: This is a temporary workaround for a problem in the way the AWT loads native libraries
sun.awt.NullComponentPeer#isObscured()->boolean::: null component peer is obscured
sun.awt.NullComponentPeer#canDetermineObscurity()->boolean::: null component peer can determine obscurity
sun.awt.NullComponentPeer#isFocusable()->boolean::: null component peer is focusable
sun.awt.NullComponentPeer#setVisible(boolean)->void::: null component peer set visible
sun.awt.NullComponentPeer#show()->void::: null component peer show
sun.awt.NullComponentPeer#hide()->void::: null component peer hide
sun.awt.NullComponentPeer#setEnabled(boolean)->void::: null component peer set enabled
sun.awt.NullComponentPeer#enable()->void::: null component peer enable
sun.awt.NullComponentPeer#disable()->void::: null component peer disable
sun.awt.NullComponentPeer#paint(Graphics)->void::: null component peer paint
sun.awt.NullComponentPeer#repaint(long, int, int, int, int)->void::: null component peer repaint
sun.awt.NullComponentPeer#print(Graphics)->void::: null component peer print
sun.awt.NullComponentPeer#setBounds(int, int, int, int, int)->void::: null component peer set bounds
sun.awt.NullComponentPeer#reshape(int, int, int, int)->void::: null component peer reshape
sun.awt.NullComponentPeer#coalescePaintEvent(PaintEvent)->void::: null component peer coalesce paint event
sun.awt.NullComponentPeer#handleEvent(Event)->boolean::: null component peer handle event
sun.awt.NullComponentPeer#handleEvent(java.awt.AWTEvent)->void::: null component peer handle event
sun.awt.NullComponentPeer#getPreferredSize()->Dimension::: null component peer get preferred size
sun.awt.NullComponentPeer#getMinimumSize()->Dimension::: null component peer get minimum size
sun.awt.NullComponentPeer#getColorModel()->ColorModel::: null component peer get color model
sun.awt.NullComponentPeer#getGraphics()->Graphics::: null component peer get graphics
sun.awt.NullComponentPeer#getGraphicsConfiguration()->GraphicsConfiguration::: null component peer get graphics configuration
sun.awt.NullComponentPeer#getFontMetrics(Font)->FontMetrics::: null component peer get font metrics
sun.awt.NullComponentPeer#dispose()->void::: null component peer dispose
sun.awt.NullComponentPeer#setForeground(Color)->void::: null component peer set foreground
sun.awt.NullComponentPeer#setBackground(Color)->void::: null component peer set background
sun.awt.NullComponentPeer#setFont(Font)->void::: null component peer set font
sun.awt.NullComponentPeer#updateCursorImmediately()->void::: null component peer update cursor immediately
sun.awt.NullComponentPeer#setCursor(Cursor)->void::: null component peer set cursor
sun.awt.NullComponentPeer#requestFocus(Component, boolean, boolean, long, Cause)->boolean::: null component peer request focus
sun.awt.NullComponentPeer#createImage(ImageProducer)->Image::: null component peer create image
sun.awt.NullComponentPeer#createImage(int, int)->Image::: null component peer create image
sun.awt.NullComponentPeer#prepareImage(Image, int, int, ImageObserver)->boolean::: null component peer prepare image
sun.awt.NullComponentPeer#checkImage(Image, int, int, ImageObserver)->int::: null component peer check image
sun.awt.NullComponentPeer#preferredSize()->Dimension::: null component peer preferred size
sun.awt.NullComponentPeer#minimumSize()->Dimension::: null component peer minimum size
sun.awt.NullComponentPeer#getLocationOnScreen()->Point::: null component peer get location on screen
sun.awt.NullComponentPeer#getInsets()->Insets::: null component peer get insets
sun.awt.NullComponentPeer#beginValidate()->void::: null component peer begin validate
sun.awt.NullComponentPeer#endValidate()->void::: null component peer end validate
sun.awt.NullComponentPeer#insets()->Insets::: null component peer insets
sun.awt.NullComponentPeer#isPaintPending()->boolean::: null component peer is paint pending
sun.awt.NullComponentPeer#handlesWheelScrolling()->boolean::: null component peer handles wheel scrolling
sun.awt.NullComponentPeer#createVolatileImage(int, int)->VolatileImage::: null component peer create volatile image
sun.awt.NullComponentPeer#beginLayout()->void::: null component peer begin layout
sun.awt.NullComponentPeer#endLayout()->void::: null component peer end layout
sun.awt.NullComponentPeer#createBuffers(int, BufferCapabilities)->void::: null component peer create buffers
sun.awt.NullComponentPeer#getBackBuffer()->Image::: null component peer get back buffer
sun.awt.NullComponentPeer#flip(int, int, int, int, BufferCapabilities.FlipContents)->void::: null component peer flip
sun.awt.NullComponentPeer#destroyBuffers()->void::: null component peer destroy buffers
sun.awt.NullComponentPeer#isReparentSupported()->boolean::: null component peer is reparent supported
sun.awt.NullComponentPeer#reparent(ContainerPeer)->void::: null component peer reparent
sun.awt.NullComponentPeer#layout()->void::: null component peer layout
sun.awt.NullComponentPeer#getBounds()->Rectangle::: null component peer get bounds
sun.awt.NullComponentPeer#applyShape(Region)->void:::Applies the shape to the native component window.
sun.awt.NullComponentPeer#setZOrder(ComponentPeer)->void:::Lowers this component at the bottom of the above HW peer
sun.awt.NullComponentPeer#updateGraphicsData(GraphicsConfiguration)->boolean::: null component peer update graphics data
sun.awt.NullComponentPeer#getAppropriateGraphicsConfiguration(GraphicsConfiguration)->GraphicsConfiguration::: null component peer get appropriate graphics configuration
sun.awt.OSInfo#getOSType()->OSType:::Returns type of operating system.
sun.awt.OSInfo#getOSTypeAction()->PrivilegedAction::: info get type action
sun.awt.OSInfo#getWindowsVersion()->WindowsVersion::: info get windows version
sun.awt.OSInfo.WindowsVersion#getMajor()->int::: windows version get major
sun.awt.OSInfo.WindowsVersion#getMinor()->int::: windows version get minor
sun.awt.OSInfo.WindowsVersion#compareTo(WindowsVersion)->int::: windows version compare to
sun.awt.OSInfo.WindowsVersion#equals(Object)->boolean::: windows version equals
sun.awt.OSInfo.WindowsVersion#hashCode()->int::: windows version hash code
sun.awt.OSInfo.WindowsVersion#toString()->String::: windows version to string
sun.awt.OverrideNativeWindowHandle#overrideWindowHandle(long)->void:::Replaces an owner window with a window with provided handle.
sun.awt.PaintEventDispatcher#setPaintEventDispatcher(PaintEventDispatcher)->void:::Sets the current PaintEventDispatcher.
sun.awt.PaintEventDispatcher#getPaintEventDispatcher()->PaintEventDispatcher:::Returns the currently active PaintEventDispatcher
sun.awt.PaintEventDispatcher#createPaintEvent(Component, int, int, int, int)->PaintEvent:::Creates and returns the PaintEvent that should be dispatched for the specified component
sun.awt.PaintEventDispatcher#shouldDoNativeBackgroundErase(Component)->boolean:::Returns true if a native background erase should be done for the specified Component.
sun.awt.PaintEventDispatcher#queueSurfaceDataReplacing(Component, Runnable)->boolean:::This method is invoked from the toolkit thread when the surface data of the component needs to be replaced
sun.awt.PeerEvent#getFlags()->long::: peer event get flags
sun.awt.PeerEvent#coalesceEvents(PeerEvent)->PeerEvent::: peer event coalesce events
sun.awt.PlatformFont#getMissingGlyphCharacter()->char:::Returns the character that should be rendered when a glyph is missing.
sun.awt.PlatformFont#makeMultiCharsetString(String)->CharsetString[]:::make a array of CharsetString with given String.
sun.awt.PlatformFont#makeMultiCharsetString(String, boolean)->CharsetString[]:::make a array of CharsetString with given String.
sun.awt.PlatformFont#makeMultiCharsetString(char[], int, int)->CharsetString[]:::make a array of CharsetString with given char array.
sun.awt.PlatformFont#makeMultiCharsetString(char[], int, int, boolean)->CharsetString[]:::make a array of CharsetString with given char array.
sun.awt.PlatformFont#mightHaveMultiFontMetrics()->boolean:::Is it possible that this font's metrics require the multi-font calls? This might be true, for example, if the font supports kerning.
sun.awt.PlatformFont#makeConvertedMultiFontString(String)->Object[]:::Specialized fast path string conversion for AWT.
sun.awt.PlatformFont#makeConvertedMultiFontChars(char[], int, int)->Object[]::: platform font make converted multi font chars
sun.awt.PlatformFont#getFontCache()->Object[]::: platform font get font cache
sun.awt.RepaintArea#add(Rectangle, int)->void:::Adds a Rectangle to this RepaintArea
sun.awt.RepaintArea#isEmpty()->boolean::: repaint area is empty
sun.awt.RepaintArea#constrain(int, int, int, int)->void:::Constrains the size of the repaint area to the passed in bounds.
sun.awt.RepaintArea#subtract(int, int, int, int)->void:::Marks the passed in region as not needing to be painted
sun.awt.RepaintArea#paint(Object, boolean)->void:::Invokes paint and update on target Component with optimal rectangular clip region
sun.awt.RepaintArea#updateComponent(Component, Graphics)->void:::Calls Component.update(Graphics) with given Graphics.
sun.awt.RepaintArea#paintComponent(Component, Graphics)->void:::Calls Component.paint(Graphics) with given Graphics.
sun.awt.RepaintArea#subtract(Rectangle, Rectangle)->boolean:::Subtracts subtr from rect
sun.awt.RepaintArea#toString()->String::: repaint area to string
sun.awt.RequestFocusController#acceptRequestFocus(Component, Component, boolean, boolean, Cause)->boolean::: request focus controller accept request focus
sun.awt.ScrollPaneWheelScroller#handleWheelScrolling(ScrollPane, MouseWheelEvent)->void::: scroll pane wheel scroller handle wheel scrolling
sun.awt.ScrollPaneWheelScroller#getAdjustableToScroll(ScrollPane)->Adjustable::: scroll pane wheel scroller get adjustable to scroll
sun.awt.ScrollPaneWheelScroller#getIncrementFromAdjustable(Adjustable, MouseWheelEvent)->int::: scroll pane wheel scroller get increment from adjustable
sun.awt.ScrollPaneWheelScroller#scrollAdjustable(Adjustable, int)->void::: scroll pane wheel scroller scroll adjustable
sun.awt.SoftCache#size()->int:::Return the number of key-value mappings in this cache
sun.awt.SoftCache#isEmpty()->boolean:::Return true if this cache contains no key-value mappings.
sun.awt.SoftCache#containsKey(Object)->boolean:::Return true if this cache contains a mapping for the specified key
sun.awt.SoftCache#fill(Object)->Object:::Create a value object for the given key
sun.awt.SoftCache#get(Object)->Object:::Return the value to which this cache maps the specified key
sun.awt.SoftCache#put(Object, Object)->Object:::Update this cache so that the given key maps to the given value
sun.awt.SoftCache#remove(Object)->Object:::Remove the mapping for the given key from this cache, if present.
sun.awt.SoftCache#clear()->void:::Remove all mappings from this cache.
sun.awt.SoftCache#entrySet()->Set>:::Return a Set view of the mappings in this cache.
sun.awt.SubRegionShowable#show(int, int, int, int)->void:::Shows the specific subregion.
sun.awt.SubRegionShowable#showIfNotLost(int, int, int, int)->boolean::: sub region showable show if not lost
sun.awt.SunDisplayChanger#add(DisplayChangedListener)->void::: sun display changer add
sun.awt.SunDisplayChanger#remove(DisplayChangedListener)->void::: sun display changer remove
sun.awt.SunDisplayChanger#notifyListeners()->void::: sun display changer notify listeners
sun.awt.SunDisplayChanger#notifyPaletteChanged()->void::: sun display changer notify palette changed
sun.awt.SunGraphicsCallback#run(Component, Graphics)->void::: sun graphics callback run
sun.awt.SunGraphicsCallback#constrainGraphics(Graphics, Rectangle)->void::: sun graphics callback constrain graphics
sun.awt.SunGraphicsCallback#runOneComponent(Component, Rectangle, Graphics, Shape, int)->void::: sun graphics callback run one component
sun.awt.SunGraphicsCallback#runComponents(Component[], Graphics, int)->void::: sun graphics callback run components
sun.awt.SunGraphicsCallback.PaintHeavyweightComponentsCallback#run(Component, Graphics)->void::: paint heavyweight components callback run
sun.awt.SunGraphicsCallback.PaintHeavyweightComponentsCallback#getInstance()->PaintHeavyweightComponentsCallback::: paint heavyweight components callback get instance
sun.awt.SunGraphicsCallback.PrintHeavyweightComponentsCallback#run(Component, Graphics)->void::: print heavyweight components callback run
sun.awt.SunGraphicsCallback.PrintHeavyweightComponentsCallback#getInstance()->PrintHeavyweightComponentsCallback::: print heavyweight components callback get instance
sun.awt.SunHints.Key#getIndex()->int:::Returns the numeric index associated with this Key
sun.awt.SunHints.Key#toString()->String:::Returns a string representation of the Key.
sun.awt.SunHints.Key#isCompatibleValue(Object)->boolean:::Returns true if the specified object is a valid value for this Key.
sun.awt.SunHints.Value#get(int, int)->Value::: value get
sun.awt.SunHints.Value#getIndex()->int:::Returns the numeric index associated with this Key
sun.awt.SunHints.Value#toString()->String:::Returns a string representation of this Value.
sun.awt.SunHints.Value#isCompatibleKey(Key)->boolean:::Returns true if the specified object is a valid Key for this Value.
sun.awt.SunHints.Value#hashCode()->int:::The hash code for all SunHints.Value objects will be the same as the system identity code of the object as defined by the System.identityHashCode() method.
sun.awt.SunHints.Value#equals(Object)->boolean:::The equals method for all SunHints.Value objects will return the same result as the equality operator '=='.
sun.awt.SunHints.LCDContrastKey#isCompatibleValue(Object)->boolean:::Returns true if the specified object is a valid value for this Key
sun.awt.SunToolkit#useBufferPerWindow()->boolean::: sun toolkit use buffer per window
sun.awt.SunToolkit#createLightweightFrame(LightweightFrame)->FramePeer::: sun toolkit create lightweight frame
sun.awt.SunToolkit#createTrayIcon(TrayIcon)->TrayIconPeer::: sun toolkit create tray icon
sun.awt.SunToolkit#createSystemTray(SystemTray)->SystemTrayPeer::: sun toolkit create system tray
sun.awt.SunToolkit#isTraySupported()->boolean::: sun toolkit is tray supported
sun.awt.SunToolkit#getKeyboardFocusManagerPeer()->KeyboardFocusManagerPeer::: sun toolkit get keyboard focus manager peer
sun.awt.SunToolkit#awtLock()->void::: sun toolkit awt lock
sun.awt.SunToolkit#awtTryLock()->boolean::: sun toolkit awt try lock
sun.awt.SunToolkit#awtUnlock()->void::: sun toolkit awt unlock
sun.awt.SunToolkit#awtLockWait()->void::: sun toolkit awt lock wait
sun.awt.SunToolkit#awtLockWait(long)->void::: sun toolkit awt lock wait
sun.awt.SunToolkit#awtLockNotify()->void::: sun toolkit awt lock notify
sun.awt.SunToolkit#awtLockNotifyAll()->void::: sun toolkit awt lock notify all
sun.awt.SunToolkit#isAWTLockHeldByCurrentThread()->boolean::: sun toolkit is lock held by current thread
sun.awt.SunToolkit#createNewAppContext()->AppContext::: sun toolkit create new app context
sun.awt.SunToolkit#createNewAppContext(ThreadGroup)->AppContext::: sun toolkit create new app context
sun.awt.SunToolkit#wakeupEventQueue(EventQueue, boolean)->void::: sun toolkit wakeup event queue
sun.awt.SunToolkit#targetToPeer(Object)->Object::: sun toolkit target to peer
sun.awt.SunToolkit#targetCreatedPeer(Object, Object)->void::: sun toolkit target created peer
sun.awt.SunToolkit#targetDisposedPeer(Object, Object)->void::: sun toolkit target disposed peer
sun.awt.SunToolkit#targetToAppContext(Object)->AppContext::: sun toolkit target to app context
sun.awt.SunToolkit#setLWRequestStatus(Window, boolean)->void::: sun toolkit set request status
sun.awt.SunToolkit#checkAndSetPolicy(Container)->void::: sun toolkit check and set policy
sun.awt.SunToolkit#insertTargetMapping(Object, AppContext)->void::: sun toolkit insert target mapping
sun.awt.SunToolkit#postEvent(AppContext, AWTEvent)->void::: sun toolkit post event
sun.awt.SunToolkit#postPriorityEvent(AWTEvent)->void::: sun toolkit post priority event
sun.awt.SunToolkit#flushPendingEvents()->void::: sun toolkit flush pending events
sun.awt.SunToolkit#flushPendingEvents(AppContext)->void::: sun toolkit flush pending events
sun.awt.SunToolkit#executeOnEventHandlerThread(Object, Runnable)->void::: sun toolkit execute on event handler thread
sun.awt.SunToolkit#executeOnEventHandlerThread(Object, Runnable, long)->void::: sun toolkit execute on event handler thread
sun.awt.SunToolkit#executeOnEventHandlerThread(PeerEvent)->void::: sun toolkit execute on event handler thread
sun.awt.SunToolkit#invokeLaterOnAppContext(AppContext, Runnable)->void::: sun toolkit invoke later on app context
sun.awt.SunToolkit#executeOnEDTAndWait(Object, Runnable)->void::: sun toolkit execute on and wait
sun.awt.SunToolkit#isDispatchThreadForAppContext(Object)->boolean::: sun toolkit is dispatch thread for app context
sun.awt.SunToolkit#getScreenSize()->Dimension::: sun toolkit get screen size
sun.awt.SunToolkit#getColorModel()->ColorModel::: sun toolkit get color model
sun.awt.SunToolkit#getFontMetrics(Font)->FontMetrics::: sun toolkit get font metrics
sun.awt.SunToolkit#getFontList()->String[]::: sun toolkit get font list
sun.awt.SunToolkit#disableBackgroundErase(Canvas)->void:::Disables erasing of background on the canvas before painting if this is supported by the current toolkit
sun.awt.SunToolkit#disableBackgroundErase(Component)->void:::Disables the native erasing of the background on the given component before painting if this is supported by the current toolkit
sun.awt.SunToolkit#getSunAwtNoerasebackground()->boolean:::Returns the value of "sun.awt.noerasebackground" property
sun.awt.SunToolkit#getSunAwtErasebackgroundonresize()->boolean:::Returns the value of "sun.awt.erasebackgroundonresize" property
sun.awt.SunToolkit#getImageFromHash(Toolkit, URL)->Image::: sun toolkit get image from hash
sun.awt.SunToolkit#getImageFromHash(Toolkit, String)->Image::: sun toolkit get image from hash
sun.awt.SunToolkit#getImage(String)->Image::: sun toolkit get image
sun.awt.SunToolkit#getImage(URL)->Image::: sun toolkit get image
sun.awt.SunToolkit#getImageWithResolutionVariant(String, String)->Image::: sun toolkit get image with resolution variant
sun.awt.SunToolkit#getImageWithResolutionVariant(URL, URL)->Image::: sun toolkit get image with resolution variant
sun.awt.SunToolkit#createImage(String)->Image::: sun toolkit create image
sun.awt.SunToolkit#createImage(URL)->Image::: sun toolkit create image
sun.awt.SunToolkit#createImage(byte[], int, int)->Image::: sun toolkit create image
sun.awt.SunToolkit#createImage(ImageProducer)->Image::: sun toolkit create image
sun.awt.SunToolkit#createImageWithResolutionVariant(Image, Image)->Image::: sun toolkit create image with resolution variant
sun.awt.SunToolkit#checkImage(Image, int, int, ImageObserver)->int::: sun toolkit check image
sun.awt.SunToolkit#prepareImage(Image, int, int, ImageObserver)->boolean::: sun toolkit prepare image
sun.awt.SunToolkit#imageCached(String)->boolean::: sun toolkit image cached
sun.awt.SunToolkit#imageCached(URL)->boolean::: sun toolkit image cached
sun.awt.SunToolkit#imageExists(String)->boolean::: sun toolkit image exists
sun.awt.SunToolkit#imageExists(URL)->boolean::: sun toolkit image exists
sun.awt.SunToolkit#getScaledIconImage(java.util.List, int, int)->BufferedImage:::Scans imageList for best-looking image of specified dimensions
sun.awt.SunToolkit#getScaledIconData(java.util.List, int, int)->DataBufferInt::: sun toolkit get scaled icon data
sun.awt.SunToolkit#getSystemEventQueueImpl()->EventQueue::: sun toolkit get system event queue impl
sun.awt.SunToolkit#getSystemEventQueueImplPP()->EventQueue::: sun toolkit get system event queue impl p
sun.awt.SunToolkit#getSystemEventQueueImplPP(AppContext)->EventQueue::: sun toolkit get system event queue impl p
sun.awt.SunToolkit#getNativeContainer(Component)->Container:::Give native peers the ability to query the native container given a native component (eg the direct parent may be lightweight).
sun.awt.SunToolkit#getHeavyweightComponent(Component)->Component:::Gives native peers the ability to query the closest HW component
sun.awt.SunToolkit#getFocusAcceleratorKeyMask()->int:::Returns key modifiers used by Swing to set up a focus accelerator key stroke.
sun.awt.SunToolkit#isPrintableCharacterModifiersMask(int)->boolean:::Tests whether specified key modifiers mask can be used to enter a printable character
sun.awt.SunToolkit#canPopupOverlapTaskBar()->boolean:::Returns whether popup is allowed to be shown above the task bar
sun.awt.SunToolkit#createInputMethodWindow(String, InputContext)->Window:::Returns a new input method window, with behavior as specified in java.awt.im.spi.InputMethodContext#createInputMethodWindow
sun.awt.SunToolkit#enableInputMethodsForTextComponent()->boolean:::Returns whether enableInputMethods should be set to true for peered TextComponent instances on this platform
sun.awt.SunToolkit#getStartupLocale()->Locale:::Returns the locale in which the runtime was started.
sun.awt.SunToolkit#getDefaultKeyboardLocale()->Locale:::Returns the default keyboard locale of the underlying operating system
sun.awt.SunToolkit#needsXEmbed()->boolean:::Returns whether default toolkit needs the support of the xembed from embedding host(if any).
sun.awt.SunToolkit#needsXEmbedImpl()->boolean:::Returns whether this toolkit needs the support of the xembed from embedding host(if any).
sun.awt.SunToolkit#isXEmbedServerRequested()->boolean:::Returns whether the XEmbed server feature is requested by developer
sun.awt.SunToolkit#isModalExcludedSupported()->boolean:::Returns whether the modal exclusion API is supported by the current toolkit
sun.awt.SunToolkit#isModalExcludedSupportedImpl()->boolean::: sun toolkit is modal excluded supported impl
sun.awt.SunToolkit#setModalExcluded(Window)->void::: sun toolkit set modal excluded
sun.awt.SunToolkit#isModalExcluded(Window)->boolean::: sun toolkit is modal excluded
sun.awt.SunToolkit#isModalityTypeSupported(Dialog.ModalityType)->boolean:::Overridden in XToolkit and WToolkit
sun.awt.SunToolkit#isModalExclusionTypeSupported(Dialog.ModalExclusionType)->boolean:::Overridden in XToolkit and WToolkit
sun.awt.SunToolkit#addModalityListener(ModalityListener)->void::: sun toolkit add modality listener
sun.awt.SunToolkit#removeModalityListener(ModalityListener)->void::: sun toolkit remove modality listener
sun.awt.SunToolkit#notifyModalityPushed(Dialog)->void::: sun toolkit notify modality pushed
sun.awt.SunToolkit#notifyModalityPopped(Dialog)->void::: sun toolkit notify modality popped
sun.awt.SunToolkit#notifyModalityChange(int, Dialog)->void::: sun toolkit notify modality change
sun.awt.SunToolkit.ModalityListenerList#add(ModalityListener)->void::: modality listener list add
sun.awt.SunToolkit.ModalityListenerList#remove(ModalityListener)->void::: modality listener list remove
sun.awt.SunToolkit.ModalityListenerList#modalityPushed(ModalityEvent)->void::: modality listener list modality pushed
sun.awt.SunToolkit.ModalityListenerList#modalityPopped(ModalityEvent)->void::: modality listener list modality popped
sun.awt.SunToolkit#isLightweightOrUnknown(Component)->boolean::: sun toolkit is lightweight or unknown
sun.awt.SunToolkit#realSync()->void:::Parameterless version of realsync which uses default timout (see DEFAUL_WAIT_TIME).
sun.awt.SunToolkit#realSync(long)->void:::Forces toolkit to synchronize with the native windowing sub-system, flushing all pending work and waiting for all the events to be processed
sun.awt.SunToolkit#syncNativeQueue(long)->boolean:::Platform toolkits need to implement this method to perform the sync of the native queue
sun.awt.SunToolkit#waitForIdle(long)->boolean:::Waits for the Java event queue to empty
sun.awt.SunToolkit#grab(Window)->void:::Grabs the mouse input for the given window
sun.awt.SunToolkit#ungrab(Window)->void:::Forces ungrab
sun.awt.SunToolkit#showOrHideTouchKeyboard(Component, AWTEvent)->void::: sun toolkit show or hide touch keyboard
sun.awt.SunToolkit#isTouchKeyboardAutoShowEnabled()->boolean::: sun toolkit is touch keyboard auto show enabled
sun.awt.SunToolkit#closeSplashScreen()->void:::Locates the splash screen library in a platform dependent way and closes the splash screen
sun.awt.SunToolkit#setAAFontSettingsCondition(boolean)->void::: sun toolkit set font settings condition
sun.awt.SunToolkit#getDesktopAAHints()->RenderingHints::: sun toolkit get desktop hints
sun.awt.SunToolkit#getDesktopFontHints()->RenderingHints::: sun toolkit get desktop font hints
sun.awt.SunToolkit#isDesktopSupported()->boolean::: sun toolkit is desktop supported
sun.awt.SunToolkit#isTaskbarSupported()->boolean::: sun toolkit is taskbar supported
sun.awt.SunToolkit#consumeNextKeyTyped(KeyEvent)->void::: sun toolkit consume next key typed
sun.awt.SunToolkit#dumpPeers(PlatformLogger)->void::: sun toolkit dump peers
sun.awt.SunToolkit#getContainingWindow(Component)->Window:::Returns the Window ancestor of the component comp.
sun.awt.SunToolkit#getSunAwtDisableMixing()->boolean:::Returns the value of "sun.awt.disableMixing" property
sun.awt.SunToolkit#isNativeGTKAvailable()->boolean:::Returns true if the native GTK libraries are available
sun.awt.SunToolkit#setWindowDeactivationTime(Window, long)->void::: sun toolkit set window deactivation time
sun.awt.SunToolkit#getWindowDeactivationTime(Window)->long::: sun toolkit get window deactivation time
sun.awt.SunToolkit#updateScreenMenuBarUI()->void::: sun toolkit update screen menu bar i
sun.awt.SunToolkit#isWindowOpacitySupported()->boolean::: sun toolkit is window opacity supported
sun.awt.SunToolkit#isWindowShapingSupported()->boolean::: sun toolkit is window shaping supported
sun.awt.SunToolkit#isWindowTranslucencySupported()->boolean::: sun toolkit is window translucency supported
sun.awt.SunToolkit#isTranslucencyCapable(GraphicsConfiguration)->boolean::: sun toolkit is translucency capable
sun.awt.SunToolkit#isSwingBackbufferTranslucencySupported()->boolean:::Returns true if swing backbuffer should be translucent.
sun.awt.SunToolkit#isContainingTopLevelOpaque(Component)->boolean:::Returns whether or not a containing top level window for the passed component is GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENT PERPIXEL_TRANSLUCENT.
sun.awt.SunToolkit#isContainingTopLevelTranslucent(Component)->boolean:::Returns whether or not a containing top level window for the passed component is GraphicsDevice.WindowTranslucency#TRANSLUCENT TRANSLUCENT.
sun.awt.SunToolkit#needUpdateWindow()->boolean:::Returns whether the native system requires using the peer.updateWindow() method to update the contents of a non-opaque window, or if usual painting procedures are sufficient
sun.awt.SunToolkit#getNumberOfButtons()->int:::Descendants of the SunToolkit should override and put their own logic here.
sun.awt.SunToolkit#isInstanceOf(Object, String)->boolean:::Checks that the given object implements/extends the given interface/class
sun.awt.SunToolkit#getLightweightFrame(Component)->LightweightFrame::: sun toolkit get lightweight frame
sun.awt.SunToolkit#setSystemGenerated(AWTEvent)->void::: sun toolkit set system generated
sun.awt.SunToolkit#isSystemGenerated(AWTEvent)->boolean::: sun toolkit is system generated
sun.awt.PostEventQueue#flush()->void::: post event queue flush
sun.awt.PostEventQueue#postEvent(AWTEvent)->void::: post event queue post event
sun.awt.Symbol#newEncoder()->CharsetEncoder::: symbol new encoder
sun.awt.Symbol#newDecoder()->CharsetDecoder::: symbol new decoder
sun.awt.Symbol#contains(Charset)->boolean::: symbol contains
sun.awt.TimedWindowEvent#getWhen()->long::: timed window event get when
sun.awt.TracedEventQueue#postEvent(AWTEvent)->void::: traced event queue post event
sun.awt.UngrabEvent#toString()->String::: ungrab event to string
sun.awt.WeakIdentityHashMap#size()->int::: weak identity hash map size
sun.awt.WeakIdentityHashMap#isEmpty()->boolean::: weak identity hash map is empty
sun.awt.WeakIdentityHashMap#containsKey(Object)->boolean::: weak identity hash map contains key
sun.awt.WeakIdentityHashMap#containsValue(Object)->boolean::: weak identity hash map contains value
sun.awt.WeakIdentityHashMap#get(Object)->V::: weak identity hash map get
sun.awt.WeakIdentityHashMap#put(K, V)->V::: weak identity hash map put
sun.awt.WeakIdentityHashMap#remove(Object)->V::: weak identity hash map remove
sun.awt.WeakIdentityHashMap#putAll(Map)->void::: weak identity hash map put all
sun.awt.WeakIdentityHashMap#clear()->void::: weak identity hash map clear
sun.awt.WeakIdentityHashMap#keySet()->Set::: weak identity hash map key set
sun.awt.WeakIdentityHashMap#values()->Collection::: weak identity hash map values
sun.awt.WeakIdentityHashMap#entrySet()->Set>::: weak identity hash map entry set
sun.awt.Win32ColorModel24#createCompatibleWritableRaster(int, int)->WritableRaster:::Creates a WritableRaster with the specified width and height, that has a data layout (SampleModel) compatible with this ColorModel.
sun.awt.Win32ColorModel24#createCompatibleSampleModel(int, int)->SampleModel:::Creates a SampleModel with the specified width and height, that has a data layout compatible with this ColorModel.
sun.awt.Win32FontManager#getEUDCFont()->TrueTypeFont::: win32 font manager get font
sun.awt.Win32FontManager#useAbsoluteFontFileNames()->boolean:::Whether registerFontFile expects absolute or relative font file names.
sun.awt.Win32FontManager#registerFontFile(String, String[], int, boolean)->void::: win32 font manager register font file
sun.awt.Win32FontManager#createFontConfiguration()->FontConfiguration::: win32 font manager create font configuration
sun.awt.Win32FontManager#createFontConfiguration(boolean, boolean)->FontConfiguration::: win32 font manager create font configuration
sun.awt.Win32FontManager#populateFontFileNameMap(HashMap, HashMap, HashMap>, Locale)->void::: win32 font manager populate font file name map
sun.awt.Win32FontManager#getFontPath(boolean)->String::: win32 font manager get font path
sun.awt.Win32FontManager#getDefaultPlatformFont()->String[]::: win32 font manager get default platform font
sun.awt.Win32FontManager#registerJREFontsWithPlatform(String)->void::: win32 font manager register fonts with platform
sun.awt.Win32FontManager#registerJREFontsForPrinting()->void::: win32 font manager register fonts for printing
sun.awt.Win32FontManager#populateHardcodedFileNameMap()->HashMap:::populate the map with the most common windows fonts.
sun.awt.Win32GraphicsConfig#getConfig(Win32GraphicsDevice, int)->Win32GraphicsConfig:::Returns a Win32GraphicsConfiguration object with the given device and PixelFormat
sun.awt.Win32GraphicsConfig#getDevice()->Win32GraphicsDevice:::Return the graphics device associated with this configuration.
sun.awt.Win32GraphicsConfig#getVisual()->int:::Return the PixelFormatIndex this GraphicsConfig uses
sun.awt.Win32GraphicsConfig#getProxyKey()->Object::: win32 graphics config get proxy key
sun.awt.Win32GraphicsConfig#getSolidLoops(SurfaceType)->RenderLoops::: win32 graphics config get solid loops
sun.awt.Win32GraphicsConfig#getColorModel()->ColorModel:::Returns the color model associated with this configuration.
sun.awt.Win32GraphicsConfig#getDeviceColorModel()->ColorModel:::Returns a new color model for this configuration
sun.awt.Win32GraphicsConfig#getColorModel(int)->ColorModel:::Returns the color model associated with this configuration that supports the specified transparency.
sun.awt.Win32GraphicsConfig#getDefaultTransform()->AffineTransform:::Returns the default Transform for this configuration
sun.awt.Win32GraphicsConfig#getNormalizingTransform()->AffineTransform:::Returns a Transform that can be composed with the default Transform of a Graphics2D so that 72 units in user space will equal 1 inch in device space
sun.awt.Win32GraphicsConfig#toString()->String::: win32 graphics config to string
sun.awt.Win32GraphicsConfig#getBounds()->Rectangle::: win32 graphics config get bounds
sun.awt.Win32GraphicsConfig#displayChanged()->void::: win32 graphics config display changed
sun.awt.Win32GraphicsConfig#paletteChanged()->void::: win32 graphics config palette changed
sun.awt.Win32GraphicsConfig#createSurfaceData(WComponentPeer, int)->SurfaceData:::Creates a new SurfaceData that will be associated with the given WComponentPeer.
sun.awt.Win32GraphicsConfig#createAcceleratedImage(Component, int, int)->Image:::Creates a new managed image of the given width and height that is associated with the target Component.
sun.awt.Win32GraphicsConfig#assertOperationSupported(Component, int, BufferCapabilities)->void:::Checks that the requested configuration is natively supported; if not, an AWTException is thrown.
sun.awt.Win32GraphicsConfig#createBackBuffer(WComponentPeer)->VolatileImage:::This method is called from WComponentPeer when a surface data is replaced REMIND: while the default pipeline doesn't support flipping, it may happen that the accelerated device may have this graphics config (like if the device restoration failed when one device exits fs mode while others remain).
sun.awt.Win32GraphicsConfig#flip(WComponentPeer, Component, VolatileImage, int, int, int, int, BufferCapabilities.FlipContents)->void:::Performs the native flip operation for the given target Component
sun.awt.Win32GraphicsConfig#isTranslucencyCapable()->boolean::: win32 graphics config is translucency capable
sun.awt.Win32GraphicsDevice#initDevice(int)->void::: win32 graphics device init device
sun.awt.Win32GraphicsDevice#initNativeScale(int)->void::: win32 graphics device init native scale
sun.awt.Win32GraphicsDevice#setNativeScale(int, float, float)->void::: win32 graphics device set native scale
sun.awt.Win32GraphicsDevice#getNativeScaleX(int)->float::: win32 graphics device get native scale x
sun.awt.Win32GraphicsDevice#getNativeScaleY(int)->float::: win32 graphics device get native scale y
sun.awt.Win32GraphicsDevice#getType()->int:::Returns the type of the graphics device.
sun.awt.Win32GraphicsDevice#getScreen()->int:::Returns the Win32 screen of the device.
sun.awt.Win32GraphicsDevice#getDefaultScaleX()->float::: win32 graphics device get default scale x
sun.awt.Win32GraphicsDevice#getDefaultScaleY()->float::: win32 graphics device get default scale y
sun.awt.Win32GraphicsDevice#isValid()->boolean:::Returns whether this is a valid devicie
sun.awt.Win32GraphicsDevice#invalidate(int)->void:::Called from native code when the device was removed.
sun.awt.Win32GraphicsDevice#getIDstring()->String:::Returns the identification string associated with this graphics device.
sun.awt.Win32GraphicsDevice#getConfigurations()->GraphicsConfiguration[]:::Returns all of the graphics configurations associated with this graphics device.
sun.awt.Win32GraphicsDevice#getMaxConfigs(int)->int:::Returns the maximum number of graphics configurations available, or 1 if PixelFormat calls fail or are disabled
sun.awt.Win32GraphicsDevice#getDefaultPixID(int)->int:::Returns the PixelFormatID of the default graphics configuration associated with this graphics device, or 0 if PixelFormats calls fail or are disabled.
sun.awt.Win32GraphicsDevice#getDefaultConfiguration()->GraphicsConfiguration:::Returns the default graphics configuration associated with this graphics device.
sun.awt.Win32GraphicsDevice#toString()->String::: win32 graphics device to string
sun.awt.Win32GraphicsDevice#isFullScreenSupported()->boolean:::returns true unless we're not allowed to use fullscreen mode.
sun.awt.Win32GraphicsDevice#setFullScreenWindow(Window)->void::: win32 graphics device set full screen window
sun.awt.Win32GraphicsDevice#enterFullScreenExclusive(int, WindowPeer)->void::: win32 graphics device enter full screen exclusive
sun.awt.Win32GraphicsDevice#exitFullScreenExclusive(int, WindowPeer)->void::: win32 graphics device exit full screen exclusive
sun.awt.Win32GraphicsDevice#isDisplayChangeSupported()->boolean::: win32 graphics device is display change supported
sun.awt.Win32GraphicsDevice#setDisplayMode(DisplayMode)->void::: win32 graphics device set display mode
sun.awt.Win32GraphicsDevice#getCurrentDisplayMode(int)->DisplayMode::: win32 graphics device get current display mode
sun.awt.Win32GraphicsDevice#configDisplayMode(int, WindowPeer, int, int, int, int)->void::: win32 graphics device config display mode
sun.awt.Win32GraphicsDevice#enumDisplayModes(int, ArrayList)->void::: win32 graphics device enum display modes
sun.awt.Win32GraphicsDevice#getDisplayMode()->DisplayMode::: win32 graphics device get display mode
sun.awt.Win32GraphicsDevice#getDisplayModes()->DisplayMode[]::: win32 graphics device get display modes
sun.awt.Win32GraphicsDevice#getMatchingDisplayMode(DisplayMode)->DisplayMode::: win32 graphics device get matching display mode
sun.awt.Win32GraphicsDevice#displayChanged()->void::: win32 graphics device display changed
sun.awt.Win32GraphicsDevice#paletteChanged()->void:::Part of the DisplayChangedListener interface: devices do not need to react to this event
sun.awt.Win32GraphicsDevice#addDisplayChangedListener(DisplayChangedListener)->void::: win32 graphics device add display changed listener
sun.awt.Win32GraphicsDevice#removeDisplayChangedListener(DisplayChangedListener)->void::: win32 graphics device remove display changed listener
sun.awt.Win32GraphicsDevice#getDynamicColorModel()->ColorModel:::Returns a dynamic ColorModel which is updated when there are any changes (e.g., palette changes) in the device
sun.awt.Win32GraphicsDevice#getColorModel()->ColorModel:::Returns the non-dynamic ColorModel associated with this device
sun.awt.Win32GraphicsDevice#addFSWindowListener(Window)->void:::Adds a WindowListener to be used as activation/deactivation listener for the current full-screen window.
sun.awt.Win32GraphicsDevice#removeFSWindowListener(Window)->void:::Removes the fs window listener.
sun.awt.Win32GraphicsEnvironment#initDisplayWrapper()->void::: win32 graphics environment init display wrapper
sun.awt.Win32GraphicsEnvironment#getNumScreens()->int::: win32 graphics environment get num screens
sun.awt.Win32GraphicsEnvironment#getDefaultScreenDevice()->GraphicsDevice::: win32 graphics environment get default screen device
sun.awt.Win32GraphicsEnvironment#getXResolution()->int:::Returns the number of pixels per logical inch along the screen width
sun.awt.Win32GraphicsEnvironment#getYResolution()->int:::Returns the number of pixels per logical inch along the screen height
sun.awt.Win32GraphicsEnvironment#displayChanged()->void::: win32 graphics environment display changed
sun.awt.Win32GraphicsEnvironment#makeScreenDevice(int)->GraphicsDevice::: win32 graphics environment make screen device
sun.awt.Win32GraphicsEnvironment#isDisplayLocal()->boolean::: win32 graphics environment is display local
sun.awt.Win32GraphicsEnvironment#isFlipStrategyPreferred(ComponentPeer)->boolean::: win32 graphics environment is flip strategy preferred
sun.awt.Win32GraphicsEnvironment#isDWMCompositionEnabled()->boolean:::Returns true if dwm composition is currently enabled, false otherwise.
sun.awt.Win32GraphicsEnvironment#isVistaOS()->boolean:::Used to find out if the OS is Windows Vista or later.
sun.awt.WindowIDProvider#getWindow()->long::: window provider get window

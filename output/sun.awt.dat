AppContext#getAppContexts():::Returns a set containing all AppContexts.:::synchronized->return->threadGroup2appContext->values->new->HashSet<AppContext>
AppContext#getAppContext():::Returns the appropriate AppContext for the caller, as determined by its ThreadGroup:::if->numAppContexts->get->return->appContext->threadAppContext->get->if->AccessController->new->PrivilegedAction<AppContext>->doPrivileged->return
AppContext#isMainContext(AppContext):::Returns true if the specified AppContext is the main AppContext.:::return
AppContext#dispose():::Disposes of this AppContext, all of its top-level Frames, and all Threads and ThreadGroups contained within it:::if->Thread->currentThread->getThreadGroup->parentOf->throw->new->IllegalThreadStateException->synchronized->if->return->changeSupport->if->changeSupport->firePropertyChange->notificationLock->new->Object->runnable->new->Runnable->synchronized->SunToolkit->Toolkit->getDefaultToolkit->new->InvocationEvent->postEvent->try->notificationLock->wait->catch->finally->new->Runnable->synchronized->SunToolkit->Toolkit->getDefaultToolkit->new->InvocationEvent->postEvent->try->notificationLock->wait->catch->finally->synchronized->interrupt->startTime->System->currentTimeMillis->endTime->while->activeCount->System->currentTimeMillis->try->Thread->sleep->catch->finally->AccessController->threadGroup->stop->return->doPrivileged->System->currentTimeMillis->while->activeCount->System->currentTimeMillis->try->Thread->sleep->catch->finally->numSubGroups->activeGroupCount->if->subGroups->new->ThreadGroupArr->enumerate->for->subGroup->threadGroup2appContext->remove->threadAppContext->set->try->destroy->catch->finally->synchronized->clear->numAppContexts->decrementAndGet
AppContext#get(Object):::Returns the value to which the specified key is mapped in this context.:::synchronized->recent->if->return->value->table->get->if->new->MostRecentKeyValue->new->MostRecentKeyValue->else->auxKeyValue->shadowMostRecentKeyValue->setPair->return
AppContext#put(Object, Object):::Maps the specified key to the specified value in this AppContext:::synchronized->recent->if->return->table->put
AppContext#remove(Object):::Removes the key (and its corresponding value) from this AppContext:::synchronized->recent->if->return->table->remove
AppContext#getThreadGroup():::Returns the root ThreadGroup for all Threads contained within this AppContext.:::return
AppContext#getContextClassLoader():::Returns the context ClassLoader that was used to create this AppContext.:::return
AppContext#toString():::Returns a string representation of this AppContext.:::return->getClass->getName->threadGroup->getName
AppContext#getPropertyChangeListeners():::Returns an array of all the property change listeners registered on this component.:::if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
AppContext#addPropertyChangeListener(String, PropertyChangeListener):::Adds a PropertyChangeListener to the listener list for a specific property:::if->return->if->new->PropertyChangeSupport->changeSupport->addPropertyChangeListener
AppContext#removePropertyChangeListener(String, PropertyChangeListener):::Removes a PropertyChangeListener from the listener list for a specific property:::if->return->changeSupport->removePropertyChangeListener
AppContext#getPropertyChangeListeners(String):::Returns an array of all the listeners which have been associated with the named property.:::if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
AWTAccessor.ComponentAccessor#setGraphicsConfiguration(Component, GraphicsConfiguration):::Sets GraphicsConfiguration value for the component.:::
AWTAccessor.ComponentAccessor#isVisible(Component):::Returns whether the component is visible without invoking any client code.:::
AWTAccessor.ComponentAccessor#setRequestFocusController(RequestFocusController):::Sets the RequestFocusController.:::
AWTAccessor.ComponentAccessor#getAppContext(Component):::Returns the appContext of the component.:::
AWTAccessor.ComponentAccessor#setAppContext(Component, AppContext):::Sets the appContext of the component.:::
AWTAccessor.ComponentAccessor#getParent(Component):::Returns the parent of the component.:::
AWTAccessor.ComponentAccessor#setParent(Component, Container):::Sets the parent of the component to the specified parent.:::
AWTAccessor.ComponentAccessor#setSize(Component, int, int):::Resizes the component to the specified width and height.:::
AWTAccessor.ComponentAccessor#getLocation(Component):::Returns the location of the component.:::
AWTAccessor.ComponentAccessor#setLocation(Component, int, int):::Moves the component to the new location.:::
AWTAccessor.ComponentAccessor#isEnabled(Component):::Determines whether this component is enabled.:::
AWTAccessor.ComponentAccessor#isDisplayable(Component):::Determines whether this component is displayable.:::
AWTAccessor.ComponentAccessor#getCursor(Component):::Gets the cursor set in the component.:::
AWTAccessor.ComponentAccessor#getPeer(Component):::Returns the peer of the component.:::
AWTAccessor.ComponentAccessor#setPeer(Component, ComponentPeer):::Sets the peer of the component to the specified peer.:::
AWTAccessor.ComponentAccessor#isLightweight(Component):::Determines whether this component is lightweight.:::
AWTAccessor.ComponentAccessor#getIgnoreRepaint(Component):::Returns whether or not paint messages received from the operating system should be ignored.:::
AWTAccessor.ComponentAccessor#getWidth(Component):::Returns the width of the component.:::
AWTAccessor.ComponentAccessor#getHeight(Component):::Returns the height of the component.:::
AWTAccessor.ComponentAccessor#getX(Component):::Returns the x coordinate of the component.:::
AWTAccessor.ComponentAccessor#getY(Component):::Returns the y coordinate of the component.:::
AWTAccessor.ComponentAccessor#getForeground(Component):::Gets the foreground color of this component.:::
AWTAccessor.ComponentAccessor#getBackground(Component):::Gets the background color of this component.:::
AWTAccessor.ComponentAccessor#setBackground(Component, Color):::Sets the background of this component to the specified color.:::
AWTAccessor.ComponentAccessor#getFont(Component):::Gets the font of the component.:::
AWTAccessor.ComponentAccessor#processEvent(Component, AWTEvent):::Processes events occurring on this component.:::
AWTAccessor.ComponentAccessor#revalidateSynchronously(Component):::Revalidates the component synchronously.:::
AWTAccessor.ComponentAccessor#createBufferStrategy(Component, int, BufferCapabilities):::Creates a new strategy for multi-buffering on this component.:::
AWTAccessor.ComponentAccessor#getBufferStrategy(Component):::returns the buffer strategy used by this component.:::
AWTAccessor.ContainerAccessor#validateUnconditionally(Container):::Validates the container unconditionally.:::
AWTAccessor.ContainerAccessor#findComponentAt(Container, int, int, boolean):::Access to the private version of findComponentAt method which has a controllable behavior:::
AWTAccessor.ContainerAccessor#startLWModal(Container):::Starts LW Modal.:::
AWTAccessor.ContainerAccessor#stopLWModal(Container):::Starts LW Modal.:::
AWTAccessor.WindowAccessor#getSecurityWarningSize(Window):::Get the size of the security warning.:::
AWTAccessor.WindowAccessor#setSecurityWarningSize(Window, int, int):::Set the size of the security warning.:::
AWTAccessor.WindowAccessor#setSecurityWarningPosition(Window, Point2D, float, float):::Set the position of the security warning.:::
AWTAccessor.WindowAccessor#calculateSecurityWarningPosition(Window, double, double, double, double):::Request to recalculate the new position of the security warning for the given window size/location as reported by the native system.:::
AWTAccessor.WindowAccessor#setLWRequestStatus(Window, boolean):::Sets the synchronous status of focus requests on lightweight components in the specified window to the specified value.:::
AWTAccessor.WindowAccessor#isAutoRequestFocus(Window):::Indicates whether this window should receive focus on subsequently being shown, or being moved to the front.:::
AWTAccessor.WindowAccessor#isTrayIconWindow(Window):::Indicates whether the specified window is an utility window for TrayIcon.:::
AWTAccessor.WindowAccessor#setTrayIconWindow(Window, boolean):::Marks the specified window as an utility window for TrayIcon.:::
AWTAccessor.WindowAccessor#getOwnedWindows(Window):::Return an array containing all the windows this window currently owns.:::
AWTAccessor.AWTEventAccessor#setPosted(AWTEvent):::Marks the event as posted.:::
AWTAccessor.AWTEventAccessor#setSystemGenerated(AWTEvent):::Sets the flag on this AWTEvent indicating that it was generated by the system.:::
AWTAccessor.AWTEventAccessor#isSystemGenerated(AWTEvent):::Indicates whether this AWTEvent was generated by the system.:::
AWTAccessor.AWTEventAccessor#getAccessControlContext(AWTEvent):::Returns the acc this event was constructed with.:::
AWTAccessor.AWTEventAccessor#getBData(AWTEvent):::Returns binary data associated with this event;:::
AWTAccessor.AWTEventAccessor#setBData(AWTEvent, byte[]):::Associates binary data with this event;:::
AWTAccessor.MouseEventAccessor#isCausedByTouchEvent(MouseEvent):::Indicates whether the event is a result of a touch event.:::
AWTAccessor.MouseEventAccessor#setCausedByTouchEvent(MouseEvent, boolean):::Sets whether the event is a result of a touch event.:::
AWTAccessor.KeyboardFocusManagerAccessor#shouldNativelyFocusHeavyweight(Component, Component, boolean, boolean, long, Cause):::Indicates whether the native implementation should proceed with a pending focus request for the heavyweight.:::
AWTAccessor.KeyboardFocusManagerAccessor#processSynchronousLightweightTransfer(Component, Component, boolean, boolean, long):::Delivers focus for the lightweight descendant of the heavyweight synchronously.:::
AWTAccessor.KeyboardFocusManagerAccessor#removeLastFocusRequest(Component):::Removes the last focus request for the heavyweight from the queue.:::
AWTAccessor.KeyboardFocusManagerAccessor#getMostRecentFocusOwner(Window):::Gets the most recent focus owner in the window.:::
AWTAccessor.KeyboardFocusManagerAccessor#setMostRecentFocusOwner(Window, Component):::Sets the most recent focus owner in the window.:::
AWTAccessor.KeyboardFocusManagerAccessor#getCurrentKeyboardFocusManager(AppContext):::Returns current KFM of the specified AppContext.:::
AWTAccessor.KeyboardFocusManagerAccessor#getCurrentFocusCycleRoot():::Return the current focus cycle root:::
AWTAccessor.MenuComponentAccessor#getAppContext(MenuComponent):::Returns the appContext of the menu component.:::
AWTAccessor.MenuComponentAccessor#setAppContext(MenuComponent, AppContext):::Sets the appContext of the menu component.:::
AWTAccessor.MenuComponentAccessor#getPeer(MenuComponent):::Returns the peer of the menu component.:::
AWTAccessor.MenuComponentAccessor#getParent(MenuComponent):::Returns the menu container of the menu component.:::
AWTAccessor.MenuComponentAccessor#setParent(MenuComponent, MenuContainer):::Sets the menu container of the menu component.:::
AWTAccessor.MenuComponentAccessor#getFont_NoClientCode(MenuComponent):::Gets the font used for this menu component.:::
AWTAccessor.EventQueueAccessor#getDispatchThread(EventQueue):::Gets the event dispatch thread.:::
AWTAccessor.EventQueueAccessor#isDispatchThreadImpl(EventQueue):::Checks if the current thread is EDT for the given EQ.:::
AWTAccessor.EventQueueAccessor#removeSourceEvents(EventQueue, Object, boolean):::Removes any pending events for the specified source object.:::
AWTAccessor.EventQueueAccessor#noEvents(EventQueue):::Returns whether an event is pending on any of the separate Queues.:::
AWTAccessor.EventQueueAccessor#wakeup(EventQueue, boolean):::Called from PostEventQueue.postEvent to notify that a new event appeared.:::
AWTAccessor.EventQueueAccessor#invokeAndWait(Object, Runnable):::Static in EventQueue:::
AWTAccessor.EventQueueAccessor#setFwDispatcher(EventQueue, FwDispatcher):::Sets the delegate for the EventQueue used by FX/AWT single threaded mode:::
AWTAccessor.EventQueueAccessor#getMostRecentEventTime(EventQueue):::Gets most recent event time in the EventQueue:::
AWTAccessor.CheckboxMenuItemAccessor#getState(CheckboxMenuItem):::Returns whether menu item is checked:::
AWTAccessor.CursorAccessor#getPData(Cursor):::Returns pData of the Cursor class:::
AWTAccessor.CursorAccessor#setPData(Cursor, long):::Sets pData to the Cursor class:::
AWTAccessor.CursorAccessor#getType(Cursor):::Return type of the Cursor class:::
AWTAccessor.MenuBarAccessor#getHelpMenu(MenuBar):::Returns help menu:::
AWTAccessor.MenuBarAccessor#getMenus(MenuBar):::Returns menus:::
AWTAccessor.MenuItemAccessor#isEnabled(MenuItem):::Returns whether menu item is enabled:::
AWTAccessor.MenuItemAccessor#getActionCommandImpl(MenuItem):::Gets the command name of the action event that is fired by this menu item.:::
AWTAccessor.MenuItemAccessor#isItemEnabled(MenuItem):::Returns true if the item and all its ancestors are enabled, false otherwise:::
AWTAccessor.MenuItemAccessor#getLabel(MenuItem):::Returns label:::
AWTAccessor.MenuItemAccessor#getShortcut(MenuItem):::Returns shortcut:::
AWTAccessor.MenuAccessor#getItems(Menu):::Returns vector of the items that are part of the Menu:::
AWTAccessor.KeyEventAccessor#setRawCode(KeyEvent, long):::Sets rawCode field for KeyEvent:::
AWTAccessor.KeyEventAccessor#setPrimaryLevelUnicode(KeyEvent, long):::Sets primaryLevelUnicode field for KeyEvent:::
AWTAccessor.KeyEventAccessor#setExtendedKeyCode(KeyEvent, long):::Sets extendedKeyCode field for KeyEvent:::
AWTAccessor.KeyEventAccessor#getOriginalSource(KeyEvent):::Gets original source for KeyEvent:::
AWTAccessor.KeyEventAccessor#isProxyActive(KeyEvent):::Gets isProxyActive field for KeyEvent:::
AWTAccessor.ClientPropertyKeyAccessor#getJComponent_TRANSFER_HANDLER():::Retrieves JComponent_TRANSFER_HANDLER enum object:::
AWTAccessor.SystemTrayAccessor#firePropertyChange(SystemTray, String, Object, Object):::Support for reporting bound property changes for Object properties.:::
AWTAccessor.DragSourceContextAccessor#getPeer(DragSourceContext):::Returns the peer of the DragSourceContext.:::
AWTAccessor.DropTargetContextAccessor#reset(DropTargetContext):::Resets the DropTargetContext.:::
AWTAccessor.DropTargetContextAccessor#setDropTargetContextPeer(DropTargetContext, DropTargetContextPeer):::Sets the DropTargetContextPeer:::
AWTAccessor#setCheckboxMenuItemAccessor(CheckboxMenuItemAccessor):::Set an accessor object for the java.awt.CheckboxMenuItem class.:::
AWTAccessor#getCheckboxMenuItemAccessor():::Retrieve the accessor object for the java.awt.CheckboxMenuItem class.:::if->unsafe->ensureClassInitialized->return
AWTAccessor#setCursorAccessor(CursorAccessor):::Set an accessor object for the java.awt.Cursor class.:::
AWTAccessor#getCursorAccessor():::Retrieve the accessor object for the java.awt.Cursor class.:::if->unsafe->ensureClassInitialized->return
AWTAccessor#setMenuBarAccessor(MenuBarAccessor):::Set an accessor object for the java.awt.MenuBar class.:::
AWTAccessor#getMenuBarAccessor():::Retrieve the accessor object for the java.awt.MenuBar class.:::if->unsafe->ensureClassInitialized->return
AWTAccessor#setMenuItemAccessor(MenuItemAccessor):::Set an accessor object for the java.awt.MenuItem class.:::
AWTAccessor#getMenuItemAccessor():::Retrieve the accessor object for the java.awt.MenuItem class.:::if->unsafe->ensureClassInitialized->return
AWTAccessor#setMenuAccessor(MenuAccessor):::Set an accessor object for the java.awt.Menu class.:::
AWTAccessor#getMenuAccessor():::Retrieve the accessor object for the java.awt.Menu class.:::if->unsafe->ensureClassInitialized->return
AWTAccessor#setKeyEventAccessor(KeyEventAccessor):::Set an accessor object for the java.awt.event.KeyEvent class.:::
AWTAccessor#getKeyEventAccessor():::Retrieve the accessor object for the java.awt.event.KeyEvent class.:::if->unsafe->ensureClassInitialized->return
AWTAccessor#setClientPropertyKeyAccessor(ClientPropertyKeyAccessor):::Set an accessor object for the javax.swing.ClientPropertyKey class.:::
AWTAccessor#getClientPropertyKeyAccessor():::Retrieve the accessor object for the javax.swing.ClientPropertyKey class.:::if->unsafe->ensureClassInitialized->return
AWTAccessor#setSystemTrayAccessor(SystemTrayAccessor):::Set an accessor object for the java.awt.SystemTray class.:::
AWTAccessor#getSystemTrayAccessor():::Retrieve the accessor object for the java.awt.SystemTray class.:::if->unsafe->ensureClassInitialized->return
AWTAccessor#setTrayIconAccessor(TrayIconAccessor):::Set an accessor object for the java.awt.TrayIcon class.:::
AWTAccessor#getTrayIconAccessor():::Retrieve the accessor object for the java.awt.TrayIcon class.:::if->unsafe->ensureClassInitialized->return
AWTAccessor#setDefaultKeyboardFocusManagerAccessor(DefaultKeyboardFocusManagerAccessor):::Set an accessor object for the java.awt.DefaultKeyboardFocusManager class.:::
AWTAccessor#getDefaultKeyboardFocusManagerAccessor():::Retrieve the accessor object for the java.awt.DefaultKeyboardFocusManager class.:::if->unsafe->ensureClassInitialized->return
AWTAutoShutdown#getInstance():::Returns reference to a single AWTAutoShutdown instance.:::return
AWTAutoShutdown#notifyToolkitThreadBusy():::Notify that the toolkit thread is not waiting for a native event to appear in its queue.:::getInstance->setToolkitBusy
AWTAutoShutdown#notifyToolkitThreadFree():::Notify that the toolkit thread is waiting for a native event to appear in its queue.:::getInstance->setToolkitBusy
AWTAutoShutdown#notifyThreadBusy(Thread):::Add a specified thread to the set of busy event dispatch threads:::if->return->synchronized->synchronized->if->activateBlockerThread->else->if->isReadyToShutdown->mainLock->notifyAll->busyThreadSet->add
AWTAutoShutdown#notifyThreadFree(Thread):::Remove a specified thread from the set of busy event dispatch threads:::if->return->synchronized->synchronized->busyThreadSet->remove->if->isReadyToShutdown->mainLock->notifyAll
AWTAutoShutdown#notifyPeerMapUpdated():::Notify that the peermap has been updated, that means a new peer has been created or some existing peer has been disposed.:::synchronized->synchronized->if->isReadyToShutdown->activateBlockerThread->else->mainLock->notifyAll
AWTAutoShutdown#run():::Implementation of the Runnable interface:::currentThread->Thread->currentThread->interrupted->synchronized->try->mainLock->notifyAll->while->mainLock->wait->while->isReadyToShutdown->if->break->mainLock->wait->catch->finally->if->if->AppContext->stopEventDispatchThreads
AWTSecurityManager#getAppContext():::Get the AppContext corresponding to the current context:::return
ComponentFactory#createComponent(Component):::Creates a peer for a component or container:::return
ComponentFactory#createDesktopPeer(Desktop):::Creates this toolkit's implementation of the Desktop using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createTaskbarPeer(Taskbar):::Creates this toolkit's implementation of the Taskbar using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createButton(Button):::Creates this toolkit's implementation of Button using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createTextField(TextField):::Creates this toolkit's implementation of TextField using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createLabel(Label):::Creates this toolkit's implementation of Label using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createList(java.awt.List):::Creates this toolkit's implementation of List using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createCheckbox(Checkbox):::Creates this toolkit's implementation of Checkbox using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createScrollbar(Scrollbar):::Creates this toolkit's implementation of Scrollbar using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createScrollPane(ScrollPane):::Creates this toolkit's implementation of ScrollPane using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createTextArea(TextArea):::Creates this toolkit's implementation of TextArea using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createChoice(Choice):::Creates this toolkit's implementation of Choice using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createFrame(Frame):::Creates this toolkit's implementation of Frame using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createCanvas(Canvas):::Creates this toolkit's implementation of Canvas using the specified peer interface.:::return->createComponent
ComponentFactory#createPanel(Panel):::Creates this toolkit's implementation of Panel using the specified peer interface.:::return->createComponent
ComponentFactory#createWindow(Window):::Creates this toolkit's implementation of Window using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createDialog(Dialog):::Creates this toolkit's implementation of Dialog using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createMenuBar(MenuBar):::Creates this toolkit's implementation of MenuBar using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createMenu(Menu):::Creates this toolkit's implementation of Menu using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createPopupMenu(PopupMenu):::Creates this toolkit's implementation of PopupMenu using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createMenuItem(MenuItem):::Creates this toolkit's implementation of MenuItem using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createFileDialog(FileDialog):::Creates this toolkit's implementation of FileDialog using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createCheckboxMenuItem(CheckboxMenuItem):::Creates this toolkit's implementation of CheckboxMenuItem using the specified peer interface.:::throw->new->HeadlessException
ComponentFactory#createDragSourceContextPeer(DragGestureEvent):::Creates the peer for a DragSourceContext:::throw->new->InvalidDnDOperationException
ComponentFactory#getFontPeer(String, int):::Creates this toolkit's implementation of Font using the specified peer interface.:::return
ComponentFactory#getMouseInfoPeer():::Obtains this toolkit's implementation of helper class for MouseInfo operations.:::throw->new->UnsupportedOperationException
ConstrainableGraphics#constrain(int, int, int, int):::Constrain this graphics object to have a permanent device space origin of (x, y) and a permanent maximum clip of (x,y,w,h):::
DebugSettings#getBoolean(String, boolean):::Gets named boolean property:::value->String->valueOf->getString->return->value->equalsIgnoreCase
DebugSettings#getInt(String, int):::Gets named integer property:::value->String->valueOf->getString->return->Integer->parseInt
DebugSettings#getString(String, String):::Gets named String property:::actualKeyName->value->props->getProperty->return
DisplayChangedListener#displayChanged():::Invoked when the display mode has changed.:::
DisplayChangedListener#paletteChanged():::Invoked when the palette has changed.:::
EmbeddedFrame#getParent():::Block introspection of a parent window by this child.:::return
EmbeddedFrame#propertyChange(PropertyChangeEvent):::Needed to track which KeyboardFocusManager is current:::if->evt->getPropertyName->equals->return->if->evt->getNewValue->return->evt->getSource->removeTraversingOutListeners->KeyboardFocusManager->getCurrentKeyboardFocusManager->if->isVisible->addTraversingOutListeners
EmbeddedFrame#registerListeners():::Because there may be many AppContexts, and we can't be sure where this EmbeddedFrame is first created or shown, we can't automatically determine the correct KeyboardFocusManager to attach to as KeyEventDispatcher:::if->removeTraversingOutListeners->KeyboardFocusManager->getCurrentKeyboardFocusManager->if->isVisible->addTraversingOutListeners
EmbeddedFrame#show():::Needed to avoid memory leak: we register this EmbeddedFrame as a listener with KeyboardFocusManager of applet's AppContext:::if->addTraversingOutListeners->super->show
EmbeddedFrame#hide():::Needed to avoid memory leak: we register this EmbeddedFrame as a listener with KeyboardFocusManager of applet's AppContext:::if->removeTraversingOutListeners->super->hide
EmbeddedFrame#dispatchKeyEvent(KeyEvent):::Need this method to detect when the focus may have chance to leave the focus cycle root which is EmbeddedFrame:::currentRoot->AWTAccessor->getKeyboardFocusManagerAccessor->getCurrentFocusCycleRoot->if->return->if->e->getID->return->if->getFocusTraversalKeysEnabled->e->isConsumed->return->stroke->AWTKeyStroke->getAWTKeyStrokeForEvent->toTest->currentFocused->e->getComponent->getFocusTraversalKeys->if->toTest->contains->last->getFocusTraversalPolicy->getLastComponent->if->if->traverseOut->e->consume->return->getFocusTraversalKeys->if->toTest->contains->first->getFocusTraversalPolicy->getFirstComponent->if->if->traverseOut->e->consume->return->return
EmbeddedFrame#traverseIn(boolean):::This method is called by the embedder when we should receive focus as element of the traversal chain:::comp->if->getFocusTraversalPolicy->getFirstComponent->else->getFocusTraversalPolicy->getLastComponent->if->AWTAccessor->getKeyboardFocusManagerAccessor->setMostRecentFocusOwner->synthesizeWindowActivation->return
EmbeddedFrame#traverseOut(boolean):::This method is called from dispatchKeyEvent in the following two cases: 1:::return
EmbeddedFrame#setTitle(String):::Block modifying any frame attributes, since they aren't applicable for EmbeddedFrames.:::
EmbeddedFrame#synthesizeWindowActivation(boolean):::Synthesize native message to activate or deactivate EmbeddedFrame window depending on the value of parameter b:::
EmbeddedFrame#setLocationPrivate(int, int):::Moves this embedded frame to a new location:::size->getSize->setBoundsPrivate
EmbeddedFrame#getLocationPrivate():::Gets the location of this embedded frame as a point specifying the top-left corner relative to parent component:::bounds->getBoundsPrivate->return->new->Point
EmbeddedFrame#setBoundsPrivate(int, int, int, int):::Moves and resizes this embedded frame:::peer->AWTAccessor->getComponentAccessor->getPeer->if->peer->setBoundsPrivate
EmbeddedFrame#getBoundsPrivate():::Gets the bounds of this embedded frame as a rectangle specifying the width, height and location relative to the native parent component:::peer->AWTAccessor->getComponentAccessor->getPeer->if->return->peer->getBoundsPrivate->else->return->getBounds
EmbeddedFrame#getAppletIfAncestorOf(Component):::Checks if the component is in an EmbeddedFrame:::parent->comp->getParent->applet->while->if->parent->getParent->return
EmbeddedFrame#notifyModalBlocked(Dialog, boolean):::This method should be overriden in subclasses:::
FontConfiguration#setOsNameAndVersion():::Fills in this instance's osVersion and osName members:::System->getProperty->System->getProperty
FontConfiguration#isLogicalFontFamilyName(String):::Checks whether the given font family name is a valid logical font name:::return->fontName->toLowerCase->isLogicalFontFamilyNameLC
FontConfiguration#isLogicalFontFamilyNameLC(String):::Checks whether the given font family name is a valid logical font name:::for->i->return
FontConfiguration#isLogicalFontFaceName(String):::Checks whether the given font face name is a valid logical font name:::return->fontName->toLowerCase->isLogicalFontFaceNameLC
FontConfiguration#isLogicalFontFaceNameLC(String):::Checks whether the given font face name is a valid logical font name:::period->fontName->indexOf->if->familyName->fontName->substring->styleName->fontName->substring->return->isLogicalFontFamilyName->isLogicalFontStyleName->else->return->isLogicalFontFamilyName
FontConfiguration#getLogicalFontFaceName(String, int):::Returns the font face name for the given logical font family name and style:::return->familyName->toLowerCase->getStyleString
FontConfiguration#getStyleString(int):::Returns the string typically used in properties files for the given style:::return->getStyleIndex->getStyleName
FontConfiguration#getFallbackFamilyName(String, String):::Returns a fallback name for the given font name:::
FontConfiguration#getCompatibilityFamilyName(String):::Returns the 1.1 equivalent for some old 1.0 font family names for which we need to maintain compatibility in some configurations:::fontName->toLowerCase->if->fontName->equals->return->else->if->fontName->equals->return->else->if->fontName->equals->return->return
FontConfiguration#mapFileName(String):::Maps a file name given in the font configuration file to a format appropriate for the platform.:::return
FontConfiguration#getFontDescriptors(String, int):::Returns FontDescriptors describing the physical fonts used for the given logical font name and style:::fontName->toLowerCase->fontIndex->getFontIndex->styleIndex->getStyleIndex->return->getFontDescriptors
FontConfiguration#makeAWTFontName(String, String):::Returns the AWT font name for the given platform font name and character subset.:::return
FontConfiguration#getEncoding(String, String):::Returns the java.io name of the platform character encoding for the given AWT font name and character subset:::
FontConfiguration#get2DCompositeFontInfo():::Returns an array of composite font descriptors for all logical font faces.:::result->new->CompositeFontDescriptorArr->defaultFontFile->fontManager->getDefaultFontFile->defaultFontFaceName->fontManager->getDefaultFontFaceName->for->fontIndex->return
FontConfiguration#getFileNameFromPlatformName(String):::Returns a file name for the physical font represented by this platform font name, if the font configuration has such information available, or null if the information is unavailable:::return->filenamesMap->get
FontConfiguration#getExtraFontPath():::Returns a configuration specific path to be appended to the font search path.:::return->getString
FontDescriptor#isExcluded(char):::Return true if the character is exclusion character.:::for->i->return
FwDispatcher#isDispatchThread():::Delegates the EventQueue#isDispatchThread() method:::
FwDispatcher#scheduleDispatch(Runnable):::Forwards a runnable to the delegate, which executes it on an appropriate thread.:::
FwDispatcher#createSecondaryLoop():::Delegates the java.awt.EventQueue#createSecondaryLoop() method:::
GlobalCursorManager#updateCursorImmediately():::Should be called for any activity at the Java level which may affect the global cursor, except for Java MOUSE_MOVED events.:::synchronized->_updateCursor
GlobalCursorManager#updateCursorImmediately(InputEvent):::Should be called in response to Java MOUSE_MOVED events:::shouldUpdate->synchronized->e->getWhen->if->_updateCursor
GlobalCursorManager#updateCursorLater(Component):::Should be called in response to a native mouse enter or native mouse button released message:::nativeUpdater->Toolkit->getDefaultToolkit->new->InvocationEvent->postIfNotPending
GlobalCursorManager#setCursor(Component, Cursor, boolean):::Set the global cursor to the specified cursor:::
GlobalCursorManager#getCursorPos(Point):::Returns the global cursor position, in screen coordinates.:::
GlobalCursorManager#findHeavyweightUnderCursor(boolean):::Returns the most specific, visible, heavyweight Component under the cursor:::
InputMethodSupport#getInputMethodAdapterDescriptor():::Returns a new input method adapter descriptor for native input methods.:::
InputMethodSupport#createInputMethodWindow(String, InputContext):::Returns a new input method window for the platform:::
InputMethodSupport#enableInputMethodsForTextComponent():::Returns whether input methods are enabled on the platform:::
InputMethodSupport#getDefaultKeyboardLocale():::Returns the default keyboard locale of the underlying operating system.:::
KeyboardFocusManagerPeerProvider#getKeyboardFocusManagerPeer():::Gets a singleton KeyboardFocusManagerPeer instance.:::
LightweightFrame#getParent():::Blocks introspection of a parent window by this child.:::return
LightweightFrame#emulateActivation(boolean):::Requests the peer to emulate activation or deactivation of the frame:::peer->AWTAccessor->getComponentAccessor->getPeer->peer->emulateActivation
LightweightFrame#grabFocus():::Delegates the focus grab action to the client (embedding) application:::
LightweightFrame#ungrabFocus():::Delegates the focus ungrab action to the client (embedding) application:::
LightweightFrame#getScaleFactor():::Returns the scale factor of this frame:::
LightweightFrame#getScaleFactorX():::Returns the scale factor of this frame along x coordinate:::
LightweightFrame#getScaleFactorY():::Returns the scale factor of this frame along y coordinate:::
LightweightFrame#notifyDisplayChanged(int):::Called when display of the hosted frame is changed.:::
LightweightFrame#notifyDisplayChanged(double, double):::Called when display of the hosted frame is changed.:::
LightweightFrame#getHostBounds():::Returns the absolute bounds of the host (embedding) window.:::if->return->getBounds->return->new->Rectangle
LightweightFrame#setHostBounds(int, int, int, int):::Sets the absolute bounds of the host (embedding) window.:::
LightweightFrame#createDragGestureRecognizer(Class, DragSource, Component, int, DragGestureListener):::Create a drag gesture recognizer for the lightweight frame.:::
LightweightFrame#createDragSourceContextPeer(DragGestureEvent):::Create a drag source context peer for the lightweight frame.:::
LightweightFrame#addDropTarget(DropTarget):::Adds a drop target to the lightweight frame.:::
LightweightFrame#removeDropTarget(DropTarget):::Removes a drop target from the lightweight frame.:::
ModalityListener#modalityPushed(ModalityEvent):::Called by AWT when it enters a new level of modality:::
ModalityListener#modalityPopped(ModalityEvent):::Called by AWT when it exits a level of modality:::
NativeLibLoader#loadLibraries():::This is copied from java.awt.Toolkit since we need the library loaded in sun.awt.image also:  WARNING: This is a temporary workaround for a problem in the way the AWT loads native libraries:::new->java.security.PrivilegedAction<Void>->doPrivileged
NullComponentPeer#applyShape(Region):::Applies the shape to the native component window.:::
NullComponentPeer#setZOrder(ComponentPeer):::Lowers this component at the bottom of the above HW peer:::
OSInfo#getOSType():::Returns type of operating system.:::osName->System->getProperty->if->if->osName->contains->return->if->osName->contains->return->if->osName->contains->osName->contains->return->if->osName->contains->return->return
OverrideNativeWindowHandle#overrideWindowHandle(long):::Replaces an owner window with a window with provided handle.:::
PaintEventDispatcher#setPaintEventDispatcher(PaintEventDispatcher):::Sets the current PaintEventDispatcher.:::synchronized
PaintEventDispatcher#getPaintEventDispatcher():::Returns the currently active PaintEventDispatcher:::synchronized->if->new->PaintEventDispatcher->return
PaintEventDispatcher#createPaintEvent(Component, int, int, int, int):::Creates and returns the PaintEvent that should be dispatched for the specified component:::return->new->Rectangle->new->PaintEvent
PaintEventDispatcher#shouldDoNativeBackgroundErase(Component):::Returns true if a native background erase should be done for the specified Component.:::return
PaintEventDispatcher#queueSurfaceDataReplacing(Component, Runnable):::This method is invoked from the toolkit thread when the surface data of the component needs to be replaced:::return
PlatformFont#getMissingGlyphCharacter():::Returns the character that should be rendered when a glyph is missing.:::
PlatformFont#makeMultiCharsetString(String):::make a array of CharsetString with given String.:::return->str->toCharArray->str->length->makeMultiCharsetString
PlatformFont#makeMultiCharsetString(String, boolean):::make a array of CharsetString with given String.:::return->str->toCharArray->str->length->makeMultiCharsetString
PlatformFont#makeMultiCharsetString(char[], int, int):::make a array of CharsetString with given char array.:::return->makeMultiCharsetString
PlatformFont#makeMultiCharsetString(char[], int, int, boolean):::make a array of CharsetString with given char array.:::if->return->new->CharsetStringArr->mcs->tmpStr->new->charArr->tmpChar->encoded->currentFont->for->i->if->return->else->lastIndex->for->i->result->cs->new->CharsetString->if->new->CharsetStringArr->else->mcs->addElement->mcs->mcs->size->new->CharsetStringArr->toArray->return
PlatformFont#mightHaveMultiFontMetrics():::Is it possible that this font's metrics require the multi-font calls? This might be true, for example, if the font supports kerning.:::return
PlatformFont#makeConvertedMultiFontString(String):::Specialized fast path string conversion for AWT.:::return->str->toCharArray->str->length->makeConvertedMultiFontChars
RepaintArea#add(Rectangle, int):::Adds a Rectangle to this RepaintArea:::if->r->isEmpty->return->addTo->if->if->add->else->new->Rectangle
RepaintArea#constrain(int, int, int, int):::Constrains the size of the repaint area to the passed in bounds.:::for->i
RepaintArea#subtract(int, int, int, int):::Marks the passed in region as not needing to be painted:::subtract->new->Rectangle->for->i
RepaintArea#paint(Object, boolean):::Invokes paint and update on target Component with optimal rectangular clip region:::comp->if->isEmpty->return->if->comp->isVisible->return->ra->this->cloneAndReset->if->subtract->subtract->if->paintRect->union->square->benefit->if->for->i
RepaintArea#updateComponent(Component, Graphics):::Calls Component.update(Graphics) with given Graphics.:::if->comp->update
RepaintArea#paintComponent(Component, Graphics):::Calls Component.paint(Graphics) with given Graphics.:::if->comp->paint
RepaintArea#subtract(Rectangle, Rectangle):::Subtracts subtr from rect:::if->return->common->rect->intersection->if->common->isEmpty->return->if->if->return->else->if->return->else->if->if->return->else->if->return->return
SoftCache#size():::Return the number of key-value mappings in this cache:::return->entrySet->size
SoftCache#isEmpty():::Return true if this cache contains no key-value mappings.:::return->entrySet->isEmpty
SoftCache#containsKey(Object):::Return true if this cache contains a mapping for the specified key:::return->ValueCell->hash->get->strip
SoftCache#fill(Object):::Create a value object for the given key:::return
SoftCache#get(Object):::Return the value to which this cache maps the specified key:::processQueue->v->hash->get->if->fill->if->hash->ValueCell->create->put->return->return->ValueCell->strip
SoftCache#put(Object, Object):::Update this cache so that the given key maps to the given value:::processQueue->vc->ValueCell->create->return->ValueCell->hash->put->strip
SoftCache#remove(Object):::Remove the mapping for the given key from this cache, if present.:::processQueue->return->ValueCell->hash->remove->strip
SoftCache#clear():::Remove all mappings from this cache.:::processQueue->hash->clear
SoftCache#entrySet():::Return a Set view of the mappings in this cache.:::if->new->EntrySet->return
SubRegionShowable#show(int, int, int, int):::Shows the specific subregion.:::
SunHints.Key#getIndex():::Returns the numeric index associated with this Key:::return->intKey
SunHints.Key#toString():::Returns a string representation of the Key.:::return
SunHints.Key#isCompatibleValue(Object):::Returns true if the specified object is a valid value for this Key.:::if->return->isCompatibleKey->return
SunHints.Value#getIndex():::Returns the numeric index associated with this Key:::return
SunHints.Value#toString():::Returns a string representation of this Value.:::return
SunHints.Value#isCompatibleKey(Key):::Returns true if the specified object is a valid Key for this Value.:::return
SunHints.Value#hashCode():::The hash code for all SunHints.Value objects will be the same as the system identity code of the object as defined by the System.identityHashCode() method.:::return->System->identityHashCode
SunHints.Value#equals(Object):::The equals method for all SunHints.Value objects will return the same result as the equality operator '=='.:::return
SunHints.LCDContrastKey#isCompatibleValue(Object):::Returns true if the specified object is a valid value for this Key:::if->ival->intValue->return->return
SunToolkit#disableBackgroundErase(Canvas):::Disables erasing of background on the canvas before painting if this is supported by the current toolkit:::disableBackgroundEraseImpl
SunToolkit#disableBackgroundErase(Component):::Disables the native erasing of the background on the given component before painting if this is supported by the current toolkit:::disableBackgroundEraseImpl
SunToolkit#getSunAwtNoerasebackground():::Returns the value of "sun.awt.noerasebackground" property:::return->AccessController->new->GetBooleanAction->doPrivileged
SunToolkit#getSunAwtErasebackgroundonresize():::Returns the value of "sun.awt.erasebackgroundonresize" property:::return->AccessController->new->GetBooleanAction->doPrivileged
SunToolkit#getScaledIconImage(java.util.List, int, int):::Scans imageList for best-looking image of specified dimensions:::if->return->multiResAndnormalImages->imageList->size->new->ArrayList<>->foreach->if->im->getResolutionVariant->multiResAndnormalImages->add->else->multiResAndnormalImages->add->bestImage->bestWidth->bestHeight->bestSimilarity->bestScaleFactor->for->i->multiResAndnormalImages->iterator->i->hasNext->if->return->bimage->new->BufferedImage->g->bimage->createGraphics->g->setRenderingHint->try->x->y->g->drawImage->catch->finally->g->dispose->return
SunToolkit#getNativeContainer(Component):::Give native peers the ability to query the native container given a native component (eg the direct parent may be lightweight).:::return->Toolkit->getNativeContainer
SunToolkit#getHeavyweightComponent(Component):::Gives native peers the ability to query the closest HW component:::while->AWTAccessor->getComponentAccessor->isLightweight->AWTAccessor->getComponentAccessor->getParent->return
SunToolkit#getFocusAcceleratorKeyMask():::Returns key modifiers used by Swing to set up a focus accelerator key stroke.:::return
SunToolkit#isPrintableCharacterModifiersMask(int):::Tests whether specified key modifiers mask can be used to enter a printable character:::return
SunToolkit#canPopupOverlapTaskBar():::Returns whether popup is allowed to be shown above the task bar:::result->try->sm->System->getSecurityManager->if->sm->checkPermission->catch->finally->return
SunToolkit#createInputMethodWindow(String, InputContext):::Returns a new input method window, with behavior as specified in java.awt.im.spi.InputMethodContext#createInputMethodWindow:::return->new->sun.awt.im.SimpleInputMethodWindow
SunToolkit#enableInputMethodsForTextComponent():::Returns whether enableInputMethods should be set to true for peered TextComponent instances on this platform:::return
SunToolkit#getStartupLocale():::Returns the locale in which the runtime was started.:::if->language->region->country->variant->AccessController->new->GetPropertyAction->doPrivileged->AccessController->new->GetPropertyAction->doPrivileged->if->i->region->indexOf->if->region->substring->region->substring->else->else->AccessController->new->GetPropertyAction->doPrivileged->AccessController->new->GetPropertyAction->doPrivileged->new->Locale->return
SunToolkit#getDefaultKeyboardLocale():::Returns the default keyboard locale of the underlying operating system:::return->getStartupLocale
SunToolkit#needsXEmbed():::Returns whether default toolkit needs the support of the xembed from embedding host(if any).:::noxembed->AccessController->new->GetPropertyAction->doPrivileged->if->equals->return->tk->Toolkit->getDefaultToolkit->if->return->needsXEmbedImpl->else->return
SunToolkit#needsXEmbedImpl():::Returns whether this toolkit needs the support of the xembed from embedding host(if any).:::return
SunToolkit#isXEmbedServerRequested():::Returns whether the XEmbed server feature is requested by developer:::return->AccessController->new->GetBooleanAction->doPrivileged
SunToolkit#isModalExcludedSupported():::Returns whether the modal exclusion API is supported by the current toolkit:::tk->Toolkit->getDefaultToolkit->return->tk->isModalExclusionTypeSupported
SunToolkit#isModalityTypeSupported(Dialog.ModalityType):::Overridden in XToolkit and WToolkit:::return
SunToolkit#isModalExclusionTypeSupported(Dialog.ModalExclusionType):::Overridden in XToolkit and WToolkit:::return
SunToolkit#realSync():::Parameterless version of realsync which uses default timout (see DEFAUL_WAIT_TIME).:::realSync
SunToolkit#realSync(long):::Forces toolkit to synchronize with the native windowing sub-system, flushing all pending work and waiting for all the events to be processed:::if->EventQueue->isDispatchThread->throw->new->IllegalThreadException->bigLoop->do->sync->iters->while->syncNativeQueue->while->syncNativeQueue->if->throw->new->InfiniteLoop->while->waitForIdle->while->waitForIdle->if->throw->new->InfiniteLoop->while->syncNativeQueue->waitForIdle
SunToolkit#syncNativeQueue(long):::Platform toolkits need to implement this method to perform the sync of the native queue:::
SunToolkit#waitForIdle(long):::Waits for the Java event queue to empty:::flushPendingEvents->queueWasEmpty->synchronized->isEQEmpty->AppContext->getAppContext->getSystemEventQueueImpl->new->PeerEvent->postEvent->try->while->waitLock->wait->catch->return->finally->try->Thread->sleep->catch->throw->new->RuntimeException->finally->flushPendingEvents->synchronized->return->isEQEmpty
SunToolkit#grab(Window):::Grabs the mouse input for the given window:::
SunToolkit#ungrab(Window):::Forces ungrab:::
SunToolkit#closeSplashScreen():::Locates the splash screen library in a platform dependent way and closes the splash screen:::
SunToolkit#getContainingWindow(Component):::Returns the Window ancestor of the component comp.:::while->comp->getParent->return
SunToolkit#getSunAwtDisableMixing():::Returns the value of "sun.awt.disableMixing" property:::if->AccessController->new->GetBooleanAction->doPrivileged->return->sunAwtDisableMixing->booleanValue
SunToolkit#isNativeGTKAvailable():::Returns true if the native GTK libraries are available:::return
SunToolkit#isSwingBackbufferTranslucencySupported():::Returns true if swing backbuffer should be translucent.:::return
SunToolkit#isContainingTopLevelOpaque(Component):::Returns whether or not a containing top level window for the passed component is GraphicsDevice.WindowTranslucency#PERPIXEL_TRANSLUCENT PERPIXEL_TRANSLUCENT.:::w->getContainingWindow->return->w->isOpaque
SunToolkit#isContainingTopLevelTranslucent(Component):::Returns whether or not a containing top level window for the passed component is GraphicsDevice.WindowTranslucency#TRANSLUCENT TRANSLUCENT.:::w->getContainingWindow->return->w->getOpacity
SunToolkit#needUpdateWindow():::Returns whether the native system requires using the peer.updateWindow() method to update the contents of a non-opaque window, or if usual painting procedures are sufficient:::return
SunToolkit#getNumberOfButtons():::Descendants of the SunToolkit should override and put their own logic here.:::return
SunToolkit#isInstanceOf(Object, String):::Checks that the given object implements/extends the given interface/class:::if->return->if->return->return->obj->getClass->isInstanceOf
Win32ColorModel24#createCompatibleWritableRaster(int, int):::Creates a WritableRaster with the specified width and height, that has a data layout (SampleModel) compatible with this ColorModel.:::bOffs->return->Raster->createInterleavedRaster
Win32ColorModel24#createCompatibleSampleModel(int, int):::Creates a SampleModel with the specified width and height, that has a data layout compatible with this ColorModel.:::bOffs->return->new->PixelInterleavedSampleModel
Win32FontManager#useAbsoluteFontFileNames():::Whether registerFontFile expects absolute or relative font file names.:::return
Win32FontManager#populateHardcodedFileNameMap():::populate the map with the most common windows fonts.:::platformFontMap->new->HashMap<String,FamilyDescription>->fd->new->FamilyDescription->platformFontMap->put->new->FamilyDescription->platformFontMap->put->new->FamilyDescription->platformFontMap->put->new->FamilyDescription->platformFontMap->put->new->FamilyDescription->platformFontMap->put->new->FamilyDescription->platformFontMap->put->return
Win32GraphicsConfig#getConfig(Win32GraphicsDevice, int):::Returns a Win32GraphicsConfiguration object with the given device and PixelFormat:::return->new->Win32GraphicsConfig
Win32GraphicsConfig#getDevice():::Return the graphics device associated with this configuration.:::return
Win32GraphicsConfig#getVisual():::Return the PixelFormatIndex this GraphicsConfig uses:::return
Win32GraphicsConfig#getColorModel():::Returns the color model associated with this configuration.:::return->screen->getColorModel
Win32GraphicsConfig#getDeviceColorModel():::Returns a new color model for this configuration:::return->screen->getDynamicColorModel
Win32GraphicsConfig#getColorModel(int):::Returns the color model associated with this configuration that supports the specified transparency.:::switch->return->getColorModel->return->new->DirectColorModel->return->ColorModel->getRGBdefault->return
Win32GraphicsConfig#getDefaultTransform():::Returns the default Transform for this configuration:::scaleX->screen->getDefaultScaleX->scaleY->screen->getDefaultScaleY->return->AffineTransform->getScaleInstance
Win32GraphicsConfig#getNormalizingTransform():::Returns a Transform that can be composed with the default Transform of a Graphics2D so that 72 units in user space will equal 1 inch in device space:::ge->GraphicsEnvironment->getLocalGraphicsEnvironment->xscale->ge->getXResolution->yscale->ge->getYResolution->return->new->AffineTransform
Win32GraphicsConfig#createSurfaceData(WComponentPeer, int):::Creates a new SurfaceData that will be associated with the given WComponentPeer.:::return->GDIWindowSurfaceData->createData
Win32GraphicsConfig#createAcceleratedImage(Component, int, int):::Creates a new managed image of the given width and height that is associated with the target Component.:::model->getColorModel->wr->model->createCompatibleWritableRaster->return->model->isAlphaPremultiplied->new->OffScreenImage
Win32GraphicsConfig#assertOperationSupported(Component, int, BufferCapabilities):::Checks that the requested configuration is natively supported; if not, an AWTException is thrown.:::throw->new->AWTException
Win32GraphicsConfig#createBackBuffer(WComponentPeer):::This method is called from WComponentPeer when a surface data is replaced REMIND: while the default pipeline doesn't support flipping, it may happen that the accelerated device may have this graphics config (like if the device restoration failed when one device exits fs mode while others remain).:::target->peer->getTarget->return->target->getWidth->target->getHeight->new->SunVolatileImage
Win32GraphicsConfig#flip(WComponentPeer, Component, VolatileImage, int, int, int, int, BufferCapabilities.FlipContents):::Performs the native flip operation for the given target Component:::if->g->peer->getGraphics->try->g->drawImage->catch->finally->g->dispose->else->if->g->backBuffer->getGraphics->try->g->target->getBackground->setColor->g->backBuffer->getWidth->backBuffer->getHeight->fillRect->catch->finally->g->dispose
Win32GraphicsDevice#getType():::Returns the type of the graphics device.:::return
Win32GraphicsDevice#getScreen():::Returns the Win32 screen of the device.:::return
Win32GraphicsDevice#isValid():::Returns whether this is a valid devicie:::return
Win32GraphicsDevice#invalidate(int):::Called from native code when the device was removed.:::
Win32GraphicsDevice#getIDstring():::Returns the identification string associated with this graphics device.:::return
Win32GraphicsDevice#getConfigurations():::Returns all of the graphics configurations associated with this graphics device.:::if->if->WindowsFlags->isOGLEnabled->isDefaultDevice->getDefaultConfiguration->if->new->GraphicsConfigurationArr->return->configs->clone->max->getMaxConfigs->defaultPixID->getDefaultPixID->v->new->Vector<>->if->Win32GraphicsConfig->getConfig->v->addElement->else->for->i->v->size->new->GraphicsConfigurationArr->v->copyInto->return->configs->clone
Win32GraphicsDevice#getMaxConfigs(int):::Returns the maximum number of graphics configurations available, or 1 if PixelFormat calls fail or are disabled:::if->return->else->return->getMaxConfigsImpl
Win32GraphicsDevice#getDefaultPixID(int):::Returns the PixelFormatID of the default graphics configuration associated with this graphics device, or 0 if PixelFormats calls fail or are disabled.:::if->return->else->return->getDefaultPixIDImpl
Win32GraphicsDevice#getDefaultConfiguration():::Returns the default graphics configuration associated with this graphics device.:::if->if->WindowsFlags->isOGLEnabled->isDefaultDevice->defPixID->WGLGraphicsConfig->getDefaultPixFmt->WGLGraphicsConfig->getConfig->if->WindowsFlags->isOGLVerbose->if->print->else->print->println->if->Win32GraphicsConfig->getConfig->return
Win32GraphicsDevice#isFullScreenSupported():::returns true unless we're not allowed to use fullscreen mode.:::return->isFSExclusiveModeAllowed
Win32GraphicsDevice#paletteChanged():::Part of the DisplayChangedListener interface: devices do not need to react to this event:::
Win32GraphicsDevice#getDynamicColorModel():::Returns a dynamic ColorModel which is updated when there are any changes (e.g., palette changes) in the device:::if->makeColorModel->return
Win32GraphicsDevice#getColorModel():::Returns the non-dynamic ColorModel associated with this device:::if->makeColorModel->return
Win32GraphicsDevice#addFSWindowListener(Window):::Adds a WindowListener to be used as activation/deactivation listener for the current full-screen window.:::new->Win32FSWindowAdapter->EventQueue->new->Runnable->invokeLater
Win32GraphicsDevice#removeFSWindowListener(Window):::Removes the fs window listener.:::w->removeWindowListener
Win32GraphicsEnvironment#getXResolution():::Returns the number of pixels per logical inch along the screen width:::
Win32GraphicsEnvironment#getYResolution():::Returns the number of pixels per logical inch along the screen height:::
Win32GraphicsEnvironment#isDWMCompositionEnabled():::Returns true if dwm composition is currently enabled, false otherwise.:::return
Win32GraphicsEnvironment#isVistaOS():::Used to find out if the OS is Windows Vista or later.:::

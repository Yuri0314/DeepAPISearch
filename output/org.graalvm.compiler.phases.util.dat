org.graalvm.compiler.phases.util.BlockWorkList#add(AbstractMergeNode)->void:::Adds a block to this list in an unsorted fashion, like a stack.
org.graalvm.compiler.phases.util.BlockWorkList#addSorted(AbstractMergeNode, int)->void:::Adds a block to this list, sorted by the supplied number
org.graalvm.compiler.phases.util.BlockWorkList#removeFromWorkList()->AbstractMergeNode:::Removes the next block from this work list
org.graalvm.compiler.phases.util.BlockWorkList#isEmpty()->boolean:::Checks whether the list is empty.
org.graalvm.compiler.phases.util.GraphOrder#assertNonCyclicGraph(StructuredGraph)->boolean:::Quick (and imprecise) assertion that there are no (invalid) cycles in the given graph
org.graalvm.compiler.phases.util.GraphOrder#assertSchedulableGraph(StructuredGraph)->boolean:::This method schedules the graph and makes sure that, for every node, all inputs are available at the position where it is scheduled
org.graalvm.compiler.phases.util.MethodDebugValueName#createString()->String::: method debug value name create string
org.graalvm.compiler.phases.util.Providers#getCodeCache()->CodeCacheProvider::: providers get code cache
org.graalvm.compiler.phases.util.Providers#copyWith(MetaAccessProvider)->Providers::: providers copy with
org.graalvm.compiler.phases.util.Providers#copyWith(CodeCacheProvider)->Providers::: providers copy with
org.graalvm.compiler.phases.util.Providers#copyWith(ConstantReflectionProvider)->Providers::: providers copy with
org.graalvm.compiler.phases.util.Providers#copyWith(ConstantFieldProvider)->Providers::: providers copy with
org.graalvm.compiler.phases.util.Providers#copyWith(ForeignCallsProvider)->Providers::: providers copy with
org.graalvm.compiler.phases.util.Providers#copyWith(LoweringProvider)->Providers::: providers copy with
org.graalvm.compiler.phases.util.Providers#copyWith(Replacements)->Providers::: providers copy with
org.graalvm.compiler.phases.util.Providers#copyWith(StampProvider)->Providers::: providers copy with
org.graalvm.compiler.phases.util.Providers#copyWith(GCProvider)->Providers::: providers copy with
org.graalvm.compiler.phases.util.ValueMergeUtil#mergeReturns(AbstractMergeNode, List)->ValueNode::: value merge util merge returns
org.graalvm.compiler.phases.util.ValueMergeUtil#mergeValueProducers(AbstractMergeNode, List, Function, Function)->ValueNode::: value merge util merge value producers

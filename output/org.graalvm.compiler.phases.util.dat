BlockWorkList#add(AbstractMergeNode):::Adds a block to this list in an unsorted fashion, like a stack.:::if->allocate->else->if->grow
BlockWorkList#addSorted(AbstractMergeNode, int):::Adds a block to this list, sorted by the supplied number:::if->allocate->else->if->grow->i->for
BlockWorkList#removeFromWorkList():::Removes the next block from this work list:::if->return->return
BlockWorkList#isEmpty():::Checks whether the list is empty.:::return
GraphOrder#assertNonCyclicGraph(StructuredGraph):::Quick (and imprecise) assertion that there are no (invalid) cycles in the given graph:::order->createOrder->visited->graph->createNodeBitMap->visited->clearAll->foreach->if->merge->else->foreach->node->inputs->if->visited->isMarked->if->else->visited->mark->return
GraphOrder#assertSchedulableGraph(StructuredGraph):::This method schedules the graph and makes sure that, for every node, all inputs are available at the position where it is scheduled:::try->s->graph->getDebug->scope->schedulePhase->new->SchedulePhase->loopEntryStates->EconomicMap->create->schedulePhase->apply->schedule->graph->getLastSchedule->closure->new->BlockIteratorClosure<NodeBitMap>->ReentrantBlockIterator->schedule->getCFG->getStartBlock->apply->catch->graph->getDebug->handle->finally->return

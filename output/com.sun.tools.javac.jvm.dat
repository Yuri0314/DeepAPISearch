com.sun.tools.javac.jvm.ClassFile#internalize(byte[], int, int)->byte[]:::Return internal representation of buf[offset..offset+len-1], converting '/' to '.'
com.sun.tools.javac.jvm.ClassFile#internalize(Name)->byte[]:::Return internal representation of given name, converting '/' to '.'
com.sun.tools.javac.jvm.ClassFile#externalize(byte[], int, int)->byte[]:::Return external representation of buf[offset..offset+len-1], converting '.' to '/'
com.sun.tools.javac.jvm.ClassFile#externalize(Name)->byte[]:::Return external representation of given name, converting '/' to '.'
com.sun.tools.javac.jvm.ClassFile.NameAndType#setType(Type)->void::: name and type set type
com.sun.tools.javac.jvm.ClassFile.NameAndType#equals(Object)->boolean::: name and type equals
com.sun.tools.javac.jvm.ClassFile.NameAndType#hashCode()->int::: name and type hash code
com.sun.tools.javac.jvm.ClassReader.ParameterAnnotations#add(List)->void::: parameter annotations add
com.sun.tools.javac.jvm.ClassReader#instance(Context)->ClassReader:::Get the ClassReader instance for this invocation.
com.sun.tools.javac.jvm.ClassReader#badClassFile(String, Object...)->ClassFinder.BadClassFile::: class reader bad class file
com.sun.tools.javac.jvm.ClassReader#badEnclosingMethod(Symbol)->ClassFinder.BadEnclosingMethodAttr::: class reader bad enclosing method
com.sun.tools.javac.jvm.ClassReader#nextChar()->char:::Read a character.
com.sun.tools.javac.jvm.ClassReader#nextByte()->int:::Read a byte.
com.sun.tools.javac.jvm.ClassReader#nextInt()->int:::Read an integer.
com.sun.tools.javac.jvm.ClassReader#getChar(int)->char:::Extract a character at position bp from buf.
com.sun.tools.javac.jvm.ClassReader#getInt(int)->int:::Extract an integer at position bp from buf.
com.sun.tools.javac.jvm.ClassReader#getLong(int)->long:::Extract a long integer at position bp from buf.
com.sun.tools.javac.jvm.ClassReader#getFloat(int)->float:::Extract a float at position bp from buf.
com.sun.tools.javac.jvm.ClassReader#getDouble(int)->double:::Extract a double at position bp from buf.
com.sun.tools.javac.jvm.ClassReader#indexPool()->void:::Index all constant pool entries, writing their start addresses into  poolIdx.
com.sun.tools.javac.jvm.ClassReader#readPool(int)->Object:::Read constant pool entry at start address i, use pool as a cache.
com.sun.tools.javac.jvm.ClassReader#readType(int)->Type:::Read signature and convert to type.
com.sun.tools.javac.jvm.ClassReader#readClassOrType(int)->Object:::If name is an array type or class signature, return the  corresponding type; otherwise return a ClassSymbol with given name.
com.sun.tools.javac.jvm.ClassReader#readTypeParams(int)->List:::Read signature and convert to type parameters.
com.sun.tools.javac.jvm.ClassReader#readClassSymbol(int)->ClassSymbol:::Read class entry.
com.sun.tools.javac.jvm.ClassReader#readClassName(int)->Name::: class reader read class name
com.sun.tools.javac.jvm.ClassReader#readName(int)->Name:::Read name.
com.sun.tools.javac.jvm.ClassReader#readNameAndType(int)->NameAndType:::Read name and type.
com.sun.tools.javac.jvm.ClassReader#readModuleName(int)->Name:::Read the name of a module
com.sun.tools.javac.jvm.ClassReader#readModuleFlags(int)->Set:::Read module_flags.
com.sun.tools.javac.jvm.ClassReader#readModuleResolutionFlags(int)->Set:::Read resolution_flags.
com.sun.tools.javac.jvm.ClassReader#readExportsFlags(int)->Set:::Read exports_flags.
com.sun.tools.javac.jvm.ClassReader#readOpensFlags(int)->Set:::Read opens_flags.
com.sun.tools.javac.jvm.ClassReader#readRequiresFlags(int)->Set:::Read requires_flags.
com.sun.tools.javac.jvm.ClassReader#sigToType(byte[], int, int)->Type:::Convert signature to type, where signature is a byte array segment.
com.sun.tools.javac.jvm.ClassReader#sigToType()->Type:::Convert signature to type, where signature is implicit.
com.sun.tools.javac.jvm.ClassReader#classSigToType()->Type:::Convert class signature to type, where signature is implicit.
com.sun.tools.javac.jvm.ClassReader#sigToTypes(char)->List:::Convert (implicit) signature to list of types  until `terminator' is encountered.
com.sun.tools.javac.jvm.ClassReader#sigToTypeParams(byte[], int, int)->List:::Convert signature to type parameters, where signature is a byte  array segment.
com.sun.tools.javac.jvm.ClassReader#sigToTypeParams()->List:::Convert signature to type parameters, where signature is implicit.
com.sun.tools.javac.jvm.ClassReader#sigToTypeParam()->Type:::Convert (implicit) signature to type parameter.
com.sun.tools.javac.jvm.ClassReader#findTypeVar(Name)->Type:::Find type variable with given name in `typevars' scope.
com.sun.tools.javac.jvm.ClassReader.AttributeReader#accepts(AttributeKind)->boolean::: attribute reader accepts
com.sun.tools.javac.jvm.ClassReader.AttributeReader#read(Symbol, int)->void::: attribute reader read
com.sun.tools.javac.jvm.ClassReader#readEnclosingMethodAttr(Symbol)->void::: class reader read enclosing method attr
com.sun.tools.javac.jvm.ClassReader#readMemberAttrs(Symbol)->void:::Read member attributes.
com.sun.tools.javac.jvm.ClassReader#readAttrs(Symbol, AttributeKind)->void::: class reader read attrs
com.sun.tools.javac.jvm.ClassReader#readClassAttrs(ClassSymbol)->void:::Read class attributes.
com.sun.tools.javac.jvm.ClassReader#readCode(Symbol)->Code:::Read code block.
com.sun.tools.javac.jvm.ClassReader#readAnnotations()->List:::Save annotations.
com.sun.tools.javac.jvm.ClassReader#attachAnnotations(Symbol)->void:::Attach annotations.
com.sun.tools.javac.jvm.ClassReader#attachAnnotations(Symbol, List)->void:::Attach annotations.
com.sun.tools.javac.jvm.ClassReader#readParameterAnnotations(Symbol)->void:::Read parameter annotations.
com.sun.tools.javac.jvm.ClassReader#attachTypeAnnotations(Symbol)->void::: class reader attach type annotations
com.sun.tools.javac.jvm.ClassReader#attachAnnotationDefault(Symbol)->void:::Attach the default value for an annotation element.
com.sun.tools.javac.jvm.ClassReader#readTypeOrClassSymbol(int)->Type::: class reader read type or class symbol
com.sun.tools.javac.jvm.ClassReader#readEnumType(int)->Type::: class reader read enum type
com.sun.tools.javac.jvm.ClassReader#readTypeToProxy(int)->Type::: class reader read type to proxy
com.sun.tools.javac.jvm.ClassReader#readCompoundAnnotation()->CompoundAnnotationProxy::: class reader read compound annotation
com.sun.tools.javac.jvm.ClassReader#readTypeAnnotation()->TypeAnnotationProxy::: class reader read type annotation
com.sun.tools.javac.jvm.ClassReader#readPosition()->TypeAnnotationPosition::: class reader read position
com.sun.tools.javac.jvm.ClassReader#readTypePath()->List::: class reader read type path
com.sun.tools.javac.jvm.ClassReader#readAttributeValue()->Attribute::: class reader read attribute value
com.sun.tools.javac.jvm.ClassReader.ProxyVisitor#visitEnumAttributeProxy(EnumAttributeProxy)->void::: proxy visitor visit enum attribute proxy
com.sun.tools.javac.jvm.ClassReader.ProxyVisitor#visitClassAttributeProxy(ClassAttributeProxy)->void::: proxy visitor visit class attribute proxy
com.sun.tools.javac.jvm.ClassReader.ProxyVisitor#visitArrayAttributeProxy(ArrayAttributeProxy)->void::: proxy visitor visit array attribute proxy
com.sun.tools.javac.jvm.ClassReader.ProxyVisitor#visitCompoundAnnotationProxy(CompoundAnnotationProxy)->void::: proxy visitor visit compound annotation proxy
com.sun.tools.javac.jvm.ClassReader.EnumAttributeProxy#accept(Visitor)->void::: enum attribute proxy accept
com.sun.tools.javac.jvm.ClassReader.EnumAttributeProxy#toString()->String::: enum attribute proxy to string
com.sun.tools.javac.jvm.ClassReader.ClassAttributeProxy#accept(Visitor)->void::: class attribute proxy accept
com.sun.tools.javac.jvm.ClassReader.ClassAttributeProxy#toString()->String::: class attribute proxy to string
com.sun.tools.javac.jvm.ClassReader.ArrayAttributeProxy#accept(Visitor)->void::: array attribute proxy accept
com.sun.tools.javac.jvm.ClassReader.ArrayAttributeProxy#toString()->String::: array attribute proxy to string
com.sun.tools.javac.jvm.ClassReader.CompoundAnnotationProxy#accept(Visitor)->void::: compound annotation proxy accept
com.sun.tools.javac.jvm.ClassReader.CompoundAnnotationProxy#toString()->String::: compound annotation proxy to string
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#deproxyCompoundList(List)->List::: annotation deproxy deproxy compound list
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#deproxyCompound(CompoundAnnotationProxy)->Attribute.Compound::: annotation deproxy deproxy compound
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#findAccessMethod(Type, Name)->MethodSymbol::: annotation deproxy find access method
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#deproxy(Type, Attribute)->Attribute::: annotation deproxy deproxy
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitConstant(Attribute.Constant)->void::: annotation deproxy visit constant
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitClass(Attribute.Class)->void::: annotation deproxy visit class
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitEnum(Attribute.Enum)->void::: annotation deproxy visit enum
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitCompound(Attribute.Compound)->void::: annotation deproxy visit compound
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitArray(Attribute.Array)->void::: annotation deproxy visit array
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitError(Attribute.Error)->void::: annotation deproxy visit error
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitEnumAttributeProxy(EnumAttributeProxy)->void::: annotation deproxy visit enum attribute proxy
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitClassAttributeProxy(ClassAttributeProxy)->void::: annotation deproxy visit class attribute proxy
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitArrayAttributeProxy(ArrayAttributeProxy)->void::: annotation deproxy visit array attribute proxy
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#visitCompoundAnnotationProxy(CompoundAnnotationProxy)->void::: annotation deproxy visit compound annotation proxy
com.sun.tools.javac.jvm.ClassReader.AnnotationDeproxy#resolvePossibleProxyType(Type)->Type::: annotation deproxy resolve possible proxy type
com.sun.tools.javac.jvm.ClassReader.AnnotationDefaultCompleter#run()->void::: annotation default completer run
com.sun.tools.javac.jvm.ClassReader.AnnotationDefaultCompleter#toString()->String::: annotation default completer to string
com.sun.tools.javac.jvm.ClassReader.AnnotationCompleter#run()->void::: annotation completer run
com.sun.tools.javac.jvm.ClassReader.AnnotationCompleter#toString()->String::: annotation completer to string
com.sun.tools.javac.jvm.ClassReader.TypeAnnotationCompleter#deproxyTypeCompoundList(List)->List::: type annotation completer deproxy type compound list
com.sun.tools.javac.jvm.ClassReader.TypeAnnotationCompleter#run()->void::: type annotation completer run
com.sun.tools.javac.jvm.ClassReader#readField()->VarSymbol:::Read a field.
com.sun.tools.javac.jvm.ClassReader#readMethod()->MethodSymbol:::Read a method.
com.sun.tools.javac.jvm.ClassReader#initParameterNames(MethodSymbol)->void:::Init the parameter names array
com.sun.tools.javac.jvm.ClassReader#setParameters(MethodSymbol, Type)->void:::Set the parameters for a method symbol, including any names and annotations that were read
com.sun.tools.javac.jvm.ClassReader#skipBytes(int)->void:::skip n bytes
com.sun.tools.javac.jvm.ClassReader#skipMember()->void:::Skip a field or method
com.sun.tools.javac.jvm.ClassReader#skipInnerClasses()->void::: class reader skip inner classes
com.sun.tools.javac.jvm.ClassReader#enterTypevars(Symbol, Type)->void:::Enter type variables of this classtype and all enclosing ones in  `typevars'.
com.sun.tools.javac.jvm.ClassReader#enterClass(Name)->ClassSymbol::: class reader enter class
com.sun.tools.javac.jvm.ClassReader#enterClass(Name, TypeSymbol)->ClassSymbol::: class reader enter class
com.sun.tools.javac.jvm.ClassReader#readClass(ClassSymbol)->void:::Read contents of a given class symbol `c'
com.sun.tools.javac.jvm.ClassReader#readInnerClasses(ClassSymbol)->void:::Read inner class info
com.sun.tools.javac.jvm.ClassReader#readClassFile(ClassSymbol)->void::: class reader read class file
com.sun.tools.javac.jvm.ClassReader#adjustFieldFlags(long)->long::: class reader adjust field flags
com.sun.tools.javac.jvm.ClassReader#adjustMethodFlags(long)->long::: class reader adjust method flags
com.sun.tools.javac.jvm.ClassReader#adjustClassFlags(long)->long::: class reader adjust class flags
com.sun.tools.javac.jvm.ClassWriter#instance(Context)->ClassWriter:::Get the ClassWriter instance for this context.
com.sun.tools.javac.jvm.ClassWriter#flagNames(long)->String:::Return flags as a string, separated by " ".
com.sun.tools.javac.jvm.ClassWriter#putChar(ByteBuffer, int, int)->void:::Write a character into given byte buffer;  byte buffer will not be grown.
com.sun.tools.javac.jvm.ClassWriter#putInt(ByteBuffer, int, int)->void:::Write an integer into given byte buffer;  byte buffer will not be grown.
com.sun.tools.javac.jvm.ClassWriter#typeSig(Type)->Name:::Return signature of given type
com.sun.tools.javac.jvm.ClassWriter#xClassName(Type)->Name:::Given a type t, return the extended class name of its erasure in  external representation.
com.sun.tools.javac.jvm.ClassWriter#writePool(Pool)->void:::Write constant pool to pool buffer
com.sun.tools.javac.jvm.ClassWriter#nameType(Symbol)->NameAndType:::Given a symbol, return its name-and-type.
com.sun.tools.javac.jvm.ClassWriter#writeAttr(Name)->int:::Write header for an attribute to data buffer and return  position past attribute length index.
com.sun.tools.javac.jvm.ClassWriter#endAttr(int)->void:::Fill in attribute length.
com.sun.tools.javac.jvm.ClassWriter#beginAttrs()->int:::Leave space for attribute count and return index for  number of attributes field.
com.sun.tools.javac.jvm.ClassWriter#endAttrs(int, int)->void:::Fill in number of attributes.
com.sun.tools.javac.jvm.ClassWriter#writeEnclosingMethodAttribute(ClassSymbol)->int:::Write the EnclosingMethod attribute if needed
com.sun.tools.javac.jvm.ClassWriter#writeEnclosingMethodAttribute(Name, ClassSymbol)->int:::Write the EnclosingMethod attribute with a specified name
com.sun.tools.javac.jvm.ClassWriter#writeFlagAttrs(long)->int:::Write flag attributes; return number of attributes written.
com.sun.tools.javac.jvm.ClassWriter#writeMemberAttrs(Symbol)->int:::Write member (field or method) attributes;  return number of attributes written.
com.sun.tools.javac.jvm.ClassWriter#writeMethodParametersAttr(MethodSymbol)->int:::Write method parameter names attribute.
com.sun.tools.javac.jvm.ClassWriter#writeParameterAttrs(MethodSymbol)->int:::Write method parameter annotations;  return number of attributes written.
com.sun.tools.javac.jvm.ClassWriter#writeJavaAnnotations(List)->int:::Write Java-language annotations; return number of JVM  attributes written (zero or one).
com.sun.tools.javac.jvm.ClassWriter#writeTypeAnnotations(List, boolean)->int::: class writer write type annotations
com.sun.tools.javac.jvm.ClassWriter.AttributeWriter#visitConstant(Attribute.Constant)->void::: attribute writer visit constant
com.sun.tools.javac.jvm.ClassWriter.AttributeWriter#visitEnum(Attribute.Enum)->void::: attribute writer visit enum
com.sun.tools.javac.jvm.ClassWriter.AttributeWriter#visitClass(Attribute.Class)->void::: attribute writer visit class
com.sun.tools.javac.jvm.ClassWriter.AttributeWriter#visitCompound(Attribute.Compound)->void::: attribute writer visit compound
com.sun.tools.javac.jvm.ClassWriter.AttributeWriter#visitError(Attribute.Error)->void::: attribute writer visit error
com.sun.tools.javac.jvm.ClassWriter.AttributeWriter#visitArray(Attribute.Array)->void::: attribute writer visit array
com.sun.tools.javac.jvm.ClassWriter#writeCompoundAttribute(Attribute.Compound)->void:::Write a compound attribute excluding the '@' marker.
com.sun.tools.javac.jvm.ClassWriter#writeTypeAnnotation(Attribute.TypeCompound)->void::: class writer write type annotation
com.sun.tools.javac.jvm.ClassWriter#writePosition(TypeAnnotationPosition)->void::: class writer write position
com.sun.tools.javac.jvm.ClassWriter#writeModuleAttribute(ClassSymbol)->int:::Write the Module attribute if needed
com.sun.tools.javac.jvm.ClassWriter#enterInner(ClassSymbol)->void:::Enter an inner class into the `innerClasses' set/queue.
com.sun.tools.javac.jvm.ClassWriter#writeInnerClasses()->void:::Write "inner classes" attribute.
com.sun.tools.javac.jvm.ClassWriter#writeNestMembersIfNeeded(ClassSymbol)->int:::Write NestMembers attribute (if needed)
com.sun.tools.javac.jvm.ClassWriter#writeNestHostIfNeeded(ClassSymbol)->int:::Write NestHost attribute (if needed)
com.sun.tools.javac.jvm.ClassWriter#writeBootstrapMethods()->void:::Write "bootstrapMethods" attribute.
com.sun.tools.javac.jvm.ClassWriter#writeField(VarSymbol)->void:::Write field symbol, entering all references into constant pool.
com.sun.tools.javac.jvm.ClassWriter#writeMethod(MethodSymbol)->void:::Write method symbol, entering all references into constant pool.
com.sun.tools.javac.jvm.ClassWriter#writeCode(Code)->void:::Write code attribute of method.
com.sun.tools.javac.jvm.ClassWriter#writeStackMap(Code)->void::: class writer write stack map
com.sun.tools.javac.jvm.ClassWriter#writeStackMapType(Type)->void::: class writer write stack map type
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame#getFrameType()->int::: stack map table frame get frame type
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame#write(ClassWriter)->void::: stack map table frame write
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.SameFrame#getFrameType()->int::: same frame get frame type
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.SameFrame#write(ClassWriter)->void::: same frame write
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.SameLocals1StackItemFrame#getFrameType()->int::: same locals1 stack item frame get frame type
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.SameLocals1StackItemFrame#write(ClassWriter)->void::: same locals1 stack item frame write
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.ChopFrame#getFrameType()->int::: chop frame get frame type
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.ChopFrame#write(ClassWriter)->void::: chop frame write
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.AppendFrame#getFrameType()->int::: append frame get frame type
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.AppendFrame#write(ClassWriter)->void::: append frame write
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.FullFrame#getFrameType()->int::: full frame get frame type
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame.FullFrame#write(ClassWriter)->void::: full frame write
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame#getInstance(Code.StackMapFrame, int, Type[], Types)->StackMapTableFrame:::Compare this frame with the previous frame and produce  an entry of compressed stack map frame.
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame#isInt(Type)->boolean::: stack map table frame is int
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame#isSameType(Type, Type, Types)->boolean::: stack map table frame is same type
com.sun.tools.javac.jvm.ClassWriter.StackMapTableFrame#compare(Type[], Type[], Types)->int::: stack map table frame compare
com.sun.tools.javac.jvm.ClassWriter#writeFields(Scope)->void::: class writer write fields
com.sun.tools.javac.jvm.ClassWriter#writeMethods(Scope)->void::: class writer write methods
com.sun.tools.javac.jvm.ClassWriter#writeClass(ClassSymbol)->JavaFileObject:::Emit a class file for a given class.
com.sun.tools.javac.jvm.ClassWriter#writeClassFile(OutputStream, ClassSymbol)->void:::Write class `c' to outstream `out'.
com.sun.tools.javac.jvm.ClassWriter#writeExtraClassAttributes(ClassSymbol)->int:::Allows subclasses to write additional class attributes
com.sun.tools.javac.jvm.ClassWriter#adjustFlags(long)->int::: class writer adjust flags
com.sun.tools.javac.jvm.ClassWriter#getLastModified(FileObject)->long::: class writer get last modified
com.sun.tools.javac.jvm.Code#checkLimits(DiagnosticPosition, Log)->boolean:::Check the code against VM spec limits; if  problems report them and return true.
com.sun.tools.javac.jvm.Code#typecode(Type)->int:::Given a type, return its type code (used implicitly in the  JVM architecture).
com.sun.tools.javac.jvm.Code#truncate(int)->int:::Collapse type code for subtypes of int to INTcode.
com.sun.tools.javac.jvm.Code#width(int)->int:::The width in bytes of objects of the type.
com.sun.tools.javac.jvm.Code#width(Type)->int::: code width
com.sun.tools.javac.jvm.Code#width(List)->int:::The total width taken up by a vector of objects.
com.sun.tools.javac.jvm.Code#arraycode(Type)->int:::Given a type, return its code for allocating arrays of that type.
com.sun.tools.javac.jvm.Code#curCP()->int:::The current output code pointer.
com.sun.tools.javac.jvm.Code#emit4(int)->void:::Emit four bytes of code.
com.sun.tools.javac.jvm.Code#postop()->void::: code postop
com.sun.tools.javac.jvm.Code#emitLdc(int)->void:::Emit a ldc (or ldc_w) instruction, taking into account operand size
com.sun.tools.javac.jvm.Code#emitMultianewarray(int, int, Type)->void:::Emit a multinewarray instruction.
com.sun.tools.javac.jvm.Code#emitNewarray(int, Type)->void:::Emit newarray.
com.sun.tools.javac.jvm.Code#emitAnewarray(int, Type)->void:::Emit anewarray.
com.sun.tools.javac.jvm.Code#emitInvokeinterface(int, Type)->void:::Emit an invokeinterface instruction.
com.sun.tools.javac.jvm.Code#emitInvokespecial(int, Type)->void:::Emit an invokespecial instruction.
com.sun.tools.javac.jvm.Code#emitInvokestatic(int, Type)->void:::Emit an invokestatic instruction.
com.sun.tools.javac.jvm.Code#emitInvokevirtual(int, Type)->void:::Emit an invokevirtual instruction.
com.sun.tools.javac.jvm.Code#emitInvokedynamic(int, Type)->void:::Emit an invokedynamic instruction.
com.sun.tools.javac.jvm.Code#emitop0(int)->void:::Emit an opcode with no operand field.
com.sun.tools.javac.jvm.Code#emitop1(int, int)->void:::Emit an opcode with a one-byte operand field.
com.sun.tools.javac.jvm.Code#emitop1w(int, int)->void:::Emit an opcode with a one-byte operand field;  widen if field does not fit in a byte.
com.sun.tools.javac.jvm.Code#emitop1w(int, int, int)->void:::Emit an opcode with two one-byte operand fields;  widen if either field does not fit in a byte.
com.sun.tools.javac.jvm.Code#emitop2(int, int)->void:::Emit an opcode with a two-byte operand field.
com.sun.tools.javac.jvm.Code#emitop4(int, int)->void:::Emit an opcode with a four-byte operand field.
com.sun.tools.javac.jvm.Code#align(int)->void:::Align code pointer to next `incr' boundary.
com.sun.tools.javac.jvm.Code#put4(int, int)->void:::Place four  bytes into code at address pc
com.sun.tools.javac.jvm.Code#get4(int)->int:::Return four code bytes at position pc as an int.
com.sun.tools.javac.jvm.Code#isAlive()->boolean:::Is code generation currently enabled?
com.sun.tools.javac.jvm.Code#markDead()->void:::Switch code generation on/off.
com.sun.tools.javac.jvm.Code#entryPoint()->int:::Declare an entry point; return current code pointer
com.sun.tools.javac.jvm.Code#entryPoint(State)->int:::Declare an entry point with initial state;  return current code pointer
com.sun.tools.javac.jvm.Code#entryPoint(State, Type)->int:::Declare an entry point with initial state plus a pushed value;  return current code pointer
com.sun.tools.javac.jvm.Code#emitStackMap()->void:::Emit a stack map entry.
com.sun.tools.javac.jvm.Code#emitCLDCStackMap(int, int)->void:::Emit a CLDC stack map frame.
com.sun.tools.javac.jvm.Code#emitStackMapFrame(int, int)->void::: code emit stack map frame
com.sun.tools.javac.jvm.Code#getInitialFrame()->StackMapFrame::: code get initial frame
com.sun.tools.javac.jvm.Code#negate(int)->int:::Negate a branch opcode.
com.sun.tools.javac.jvm.Code#emitJump(int)->int:::Emit a jump instruction
com.sun.tools.javac.jvm.Code#branch(int)->Chain:::Emit a branch with given opcode; return its chain
com.sun.tools.javac.jvm.Code#resolve(Chain, int)->void:::Resolve chain to point to given target.
com.sun.tools.javac.jvm.Code#resolve(Chain)->void:::Resolve chain to point to current code pointer.
com.sun.tools.javac.jvm.Code#resolvePending()->void:::Resolve any pending jumps.
com.sun.tools.javac.jvm.Code#mergeChains(Chain, Chain)->Chain:::Merge the jumps in of two chains into one.
com.sun.tools.javac.jvm.Code#addCatch(char, char, char, char)->void:::Add a catch clause to code.
com.sun.tools.javac.jvm.Code#compressCatchTable()->void::: code compress catch table
com.sun.tools.javac.jvm.Code#addLineNumber(char, char)->void:::Add a line number entry.
com.sun.tools.javac.jvm.Code#statBegin(int)->void:::Mark beginning of statement.
com.sun.tools.javac.jvm.Code#markStatBegin()->void:::Force stat begin eagerly
com.sun.tools.javac.jvm.Code.State#dup()->State::: state dup
com.sun.tools.javac.jvm.Code.State#lock(int)->void::: state lock
com.sun.tools.javac.jvm.Code.State#unlock(int)->void::: state unlock
com.sun.tools.javac.jvm.Code.State#push(Type)->void::: state push
com.sun.tools.javac.jvm.Code.State#pop1()->Type::: state pop1
com.sun.tools.javac.jvm.Code.State#peek()->Type::: state peek
com.sun.tools.javac.jvm.Code.State#pop2()->Type::: state pop2
com.sun.tools.javac.jvm.Code.State#pop(int)->void::: state pop
com.sun.tools.javac.jvm.Code.State#pop(Type)->void::: state pop
com.sun.tools.javac.jvm.Code.State#forceStackTop(Type)->void:::Force the top of the stack to be treated as this supertype  of its current type.
com.sun.tools.javac.jvm.Code.State#markInitialized(UninitializedType)->void::: state mark initialized
com.sun.tools.javac.jvm.Code.State#join(State)->State::: state join
com.sun.tools.javac.jvm.Code.State#error()->Type::: state error
com.sun.tools.javac.jvm.Code.State#dump()->void::: state dump
com.sun.tools.javac.jvm.Code.State#dump(int)->void::: state dump
com.sun.tools.javac.jvm.Code.LocalVar.Range#closed()->boolean::: range closed
com.sun.tools.javac.jvm.Code.LocalVar.Range#toString()->String::: range to string
com.sun.tools.javac.jvm.Code.LocalVar#dup()->LocalVar::: local var dup
com.sun.tools.javac.jvm.Code.LocalVar#firstRange()->Range::: local var first range
com.sun.tools.javac.jvm.Code.LocalVar#lastRange()->Range::: local var last range
com.sun.tools.javac.jvm.Code.LocalVar#removeLastRange()->void::: local var remove last range
com.sun.tools.javac.jvm.Code.LocalVar#toString()->String::: local var to string
com.sun.tools.javac.jvm.Code.LocalVar#openRange(char)->void::: local var open range
com.sun.tools.javac.jvm.Code.LocalVar#closeRange(char)->void::: local var close range
com.sun.tools.javac.jvm.Code.LocalVar#hasOpenRange()->boolean::: local var has open range
com.sun.tools.javac.jvm.Code.LocalVar#isLastRangeInitialized()->boolean::: local var is last range initialized
com.sun.tools.javac.jvm.Code.LocalVar#getWidestRange()->Range::: local var get widest range
com.sun.tools.javac.jvm.Code#adjustAliveRanges(int, int)->void::: code adjust alive ranges
com.sun.tools.javac.jvm.Code#getLVTSize()->int:::Calculates the size of the LocalVariableTable.
com.sun.tools.javac.jvm.Code#setDefined(Bits)->void:::Set the current variable defined state.
com.sun.tools.javac.jvm.Code#setDefined(int)->void:::Mark a register as being (possibly) defined.
com.sun.tools.javac.jvm.Code#setUndefined(int)->void:::Mark a register as being undefined.
com.sun.tools.javac.jvm.Code#fillExceptionParameterPositions()->void::: code fill exception parameter positions
com.sun.tools.javac.jvm.Code#putVar(LocalVar)->void:::Put a live variable range into the buffer to be output to the  class file.
com.sun.tools.javac.jvm.Code#newLocal(VarSymbol)->int::: code new local
com.sun.tools.javac.jvm.Code#newRegSegment()->void:::Start a set of fresh registers.
com.sun.tools.javac.jvm.Code#endScopes(int)->void:::End scopes of all variables with registers &ge; first.
com.sun.tools.javac.jvm.Code#mnem(int)->String::: code mnem
com.sun.tools.javac.jvm.CRTable#put(Object, int, int, int)->void:::Create a new CRTEntry and add it to the entries.
com.sun.tools.javac.jvm.CRTable#writeCRT(ByteBuffer, Position.LineMap, Log)->int:::Compute source positions and write CRT to the databuf.
com.sun.tools.javac.jvm.CRTable#length()->int:::Return the number of the entries.
com.sun.tools.javac.jvm.CRTable.SourceComputer#csp(JCTree)->SourceRange:::Visitor method: compute source positions for a single node.
com.sun.tools.javac.jvm.CRTable.SourceComputer#csp(List)->SourceRange:::Visitor method: compute source positions for a list of nodes.
com.sun.tools.javac.jvm.CRTable.SourceComputer#cspCases(List)->SourceRange::: Visitor method: compute source positions for    a list of case blocks of switch statements.
com.sun.tools.javac.jvm.CRTable.SourceComputer#cspCatchers(List)->SourceRange::: Visitor method: compute source positions for   a list of catch clauses in try statements.
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitMethodDef(JCMethodDecl)->void::: source computer visit method def
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitVarDef(JCVariableDecl)->void::: source computer visit var def
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitSkip(JCSkip)->void::: source computer visit skip
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitBlock(JCBlock)->void::: source computer visit block
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitDoLoop(JCDoWhileLoop)->void::: source computer visit do loop
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitWhileLoop(JCWhileLoop)->void::: source computer visit while loop
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitForLoop(JCForLoop)->void::: source computer visit for loop
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitForeachLoop(JCEnhancedForLoop)->void::: source computer visit foreach loop
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitLabelled(JCLabeledStatement)->void::: source computer visit labelled
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitSwitch(JCSwitch)->void::: source computer visit switch
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitCase(JCCase)->void::: source computer visit case
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitSynchronized(JCSynchronized)->void::: source computer visit synchronized
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitTry(JCTry)->void::: source computer visit try
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitCatch(JCCatch)->void::: source computer visit catch
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitConditional(JCConditional)->void::: source computer visit conditional
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitIf(JCIf)->void::: source computer visit if
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitExec(JCExpressionStatement)->void::: source computer visit exec
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitBreak(JCBreak)->void::: source computer visit break
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitContinue(JCContinue)->void::: source computer visit continue
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitReturn(JCReturn)->void::: source computer visit return
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitThrow(JCThrow)->void::: source computer visit throw
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitAssert(JCAssert)->void::: source computer visit assert
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitApply(JCMethodInvocation)->void::: source computer visit apply
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitNewClass(JCNewClass)->void::: source computer visit new class
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitNewArray(JCNewArray)->void::: source computer visit new array
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitParens(JCParens)->void::: source computer visit parens
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitAssign(JCAssign)->void::: source computer visit assign
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitAssignop(JCAssignOp)->void::: source computer visit assignop
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitUnary(JCUnary)->void::: source computer visit unary
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitBinary(JCBinary)->void::: source computer visit binary
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitTypeCast(JCTypeCast)->void::: source computer visit type cast
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitTypeTest(JCInstanceOf)->void::: source computer visit type test
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitIndexed(JCArrayAccess)->void::: source computer visit indexed
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitSelect(JCFieldAccess)->void::: source computer visit select
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitIdent(JCIdent)->void::: source computer visit ident
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitLiteral(JCLiteral)->void::: source computer visit literal
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitTypeIdent(JCPrimitiveTypeTree)->void::: source computer visit type ident
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitTypeArray(JCArrayTypeTree)->void::: source computer visit type array
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitTypeApply(JCTypeApply)->void::: source computer visit type apply
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitLetExpr(LetExpr)->void::: source computer visit let expr
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitTypeParameter(JCTypeParameter)->void::: source computer visit type parameter
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitTypeUnion(JCTypeUnion)->void::: source computer visit type union
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitWildcard(JCWildcard)->void::: source computer visit wildcard
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitErroneous(JCErroneous)->void::: source computer visit erroneous
com.sun.tools.javac.jvm.CRTable.SourceComputer#visitTree(JCTree)->void::: source computer visit tree
com.sun.tools.javac.jvm.CRTable.SourceComputer#startPos(JCTree)->int:::The start position of given tree.
com.sun.tools.javac.jvm.CRTable.SourceComputer#endPos(JCTree)->int:::The end position of given tree, if it has  defined endpos, NOPOS otherwise.
com.sun.tools.javac.jvm.CRTable.SourceRange#mergeWith(SourceRange)->SourceRange:::Compare the starting and the ending positions  of the source range and combines them assigning  the widest range to this.
com.sun.tools.javac.jvm.Gen#instance(Context)->Gen::: gen instance
com.sun.tools.javac.jvm.Gen#loadIntConst(int)->void:::Generate code to load an integer constant.
com.sun.tools.javac.jvm.Gen#zero(int)->int:::The opcode that loads a zero constant of a given type code.
com.sun.tools.javac.jvm.Gen#one(int)->int:::The opcode that loads a one constant of a given type code.
com.sun.tools.javac.jvm.Gen#emitMinusOne(int)->void:::Generate code to load -1 of the given type code (either int or long).
com.sun.tools.javac.jvm.Gen#binaryQualifier(Symbol, Type)->Symbol:::Construct a symbol to reflect the qualifying type that should  appear in the byte code as per JLS 13.1
com.sun.tools.javac.jvm.Gen#makeRef(DiagnosticPosition, Type)->int:::Insert a reference to given type in the constant pool,  checking for an array with too many dimensions;  return the reference's index.
com.sun.tools.javac.jvm.Gen#makeTemp(Type)->LocalItem:::Create a tempory variable.
com.sun.tools.javac.jvm.Gen#callMethod(DiagnosticPosition, Type, Name, List, boolean)->void:::Generate code to call a non-private method or constructor.
com.sun.tools.javac.jvm.Gen#genFinalizer(Env)->void:::Generate code to invoke the finalizer associated with given  environment
com.sun.tools.javac.jvm.Gen#unwind(JCTree, Env)->Env:::Generate code to call all finalizers of structures aborted by  a non-local  exit
com.sun.tools.javac.jvm.Gen#endFinalizerGap(Env)->void:::Mark end of gap in catch-all range for finalizer.
com.sun.tools.javac.jvm.Gen#endFinalizerGaps(Env, Env)->void:::Mark end of all gaps in catch-all ranges for finalizers of environments  lying between, and including to two environments.
com.sun.tools.javac.jvm.Gen#hasFinally(JCTree, Env)->boolean:::Do any of the structures aborted by a non-local exit have  finalizers that require an empty stack?
com.sun.tools.javac.jvm.Gen#normalizeDefs(List, ClassSymbol)->List:::Distribute member initializer code into constructors and <clinit>  method.
com.sun.tools.javac.jvm.Gen#normalizeMethod(JCMethodDecl, List, List)->void:::Insert instance initializer code into initial constructor.
com.sun.tools.javac.jvm.Gen#genDef(JCTree, Env)->void:::Visitor method: generate code for a definition, catching and reporting  any completion failures.
com.sun.tools.javac.jvm.Gen#genStat(JCTree, Env, int)->void:::Derived visitor method: check whether CharacterRangeTable  should be emitted, if so, put a new entry into CRTable  and call method to generate bytecode
com.sun.tools.javac.jvm.Gen#genStat(JCTree, Env)->void:::Derived visitor method: generate code for a statement.
com.sun.tools.javac.jvm.Gen#genStats(List, Env, int)->void:::Derived visitor method: check whether CharacterRangeTable  should be emitted, if so, put a new entry into CRTable  and call method to generate bytecode
com.sun.tools.javac.jvm.Gen#genStats(List, Env)->void:::Derived visitor method: generate code for a list of statements.
com.sun.tools.javac.jvm.Gen#genCond(JCTree, int)->CondItem:::Derived visitor method: check whether CharacterRangeTable  should be emitted, if so, put a new entry into CRTable  and call method to generate bytecode
com.sun.tools.javac.jvm.Gen#genCond(JCTree, boolean)->CondItem:::Derived visitor method: generate code for a boolean  expression in a control-flow context.
com.sun.tools.javac.jvm.Gen#getCode()->Code::: gen get code
com.sun.tools.javac.jvm.Gen#getItems()->Items::: gen get items
com.sun.tools.javac.jvm.Gen#getAttrEnv()->Env::: gen get attr env
com.sun.tools.javac.jvm.Gen.ClassReferenceVisitor#visitTree(JCTree)->void::: class reference visitor visit tree
com.sun.tools.javac.jvm.Gen.ClassReferenceVisitor#visitBinary(JCBinary)->void::: class reference visitor visit binary
com.sun.tools.javac.jvm.Gen.ClassReferenceVisitor#visitSelect(JCFieldAccess)->void::: class reference visitor visit select
com.sun.tools.javac.jvm.Gen.ClassReferenceVisitor#visitIdent(JCIdent)->void::: class reference visitor visit ident
com.sun.tools.javac.jvm.Gen.ClassReferenceVisitor#visitConditional(JCConditional)->void::: class reference visitor visit conditional
com.sun.tools.javac.jvm.Gen.ClassReferenceVisitor#visitUnary(JCUnary)->void::: class reference visitor visit unary
com.sun.tools.javac.jvm.Gen.ClassReferenceVisitor#visitParens(JCParens)->void::: class reference visitor visit parens
com.sun.tools.javac.jvm.Gen.ClassReferenceVisitor#visitTypeCast(JCTypeCast)->void::: class reference visitor visit type cast
com.sun.tools.javac.jvm.Gen#genExpr(JCTree, Type)->Item:::Visitor method: generate code for an expression, catching and reporting  any completion failures.
com.sun.tools.javac.jvm.Gen#genArgs(List, List)->void:::Derived visitor method: generate code for a list of method arguments.
com.sun.tools.javac.jvm.Gen#visitMethodDef(JCMethodDecl)->void::: gen visit method def
com.sun.tools.javac.jvm.Gen#genMethod(JCMethodDecl, Env, boolean)->void:::Generate code for a method.
com.sun.tools.javac.jvm.Gen#visitVarDef(JCVariableDecl)->void::: gen visit var def
com.sun.tools.javac.jvm.Gen#visitSkip(JCSkip)->void::: gen visit skip
com.sun.tools.javac.jvm.Gen#visitBlock(JCBlock)->void::: gen visit block
com.sun.tools.javac.jvm.Gen#visitDoLoop(JCDoWhileLoop)->void::: gen visit do loop
com.sun.tools.javac.jvm.Gen#visitWhileLoop(JCWhileLoop)->void::: gen visit while loop
com.sun.tools.javac.jvm.Gen#visitForLoop(JCForLoop)->void::: gen visit for loop
com.sun.tools.javac.jvm.Gen#visitForeachLoop(JCEnhancedForLoop)->void::: gen visit foreach loop
com.sun.tools.javac.jvm.Gen#visitLabelled(JCLabeledStatement)->void::: gen visit labelled
com.sun.tools.javac.jvm.Gen#visitSwitch(JCSwitch)->void::: gen visit switch
com.sun.tools.javac.jvm.Gen#qsort2(int[], int[], int, int)->void:::Sort (int) arrays of keys and values
com.sun.tools.javac.jvm.Gen#visitSynchronized(JCSynchronized)->void::: gen visit synchronized
com.sun.tools.javac.jvm.Gen#visitTry(JCTry)->void::: gen visit try
com.sun.tools.javac.jvm.Gen#genTry(JCTree, List, Env)->void:::Generate code for a try or synchronized statement
com.sun.tools.javac.jvm.Gen#genCatch(JCCatch, Env, int, int, List)->void:::Generate code for a catch clause.
com.sun.tools.javac.jvm.Gen#catchTypesWithAnnotations(JCCatch)->List, JCExpression>>::: gen catch types with annotations
com.sun.tools.javac.jvm.Gen#catchTypesWithAnnotationsFromMulticatch(JCTypeUnion, List)->List, JCExpression>>::: gen catch types with annotations from multicatch
com.sun.tools.javac.jvm.Gen#registerCatch(DiagnosticPosition, int, int, int, int)->void:::Register a catch clause in the "Exceptions" code-attribute.
com.sun.tools.javac.jvm.Gen#visitIf(JCIf)->void::: gen visit if
com.sun.tools.javac.jvm.Gen#visitExec(JCExpressionStatement)->void::: gen visit exec
com.sun.tools.javac.jvm.Gen#visitBreak(JCBreak)->void::: gen visit break
com.sun.tools.javac.jvm.Gen#visitContinue(JCContinue)->void::: gen visit continue
com.sun.tools.javac.jvm.Gen#visitReturn(JCReturn)->void::: gen visit return
com.sun.tools.javac.jvm.Gen#visitThrow(JCThrow)->void::: gen visit throw
com.sun.tools.javac.jvm.Gen#visitApply(JCMethodInvocation)->void::: gen visit apply
com.sun.tools.javac.jvm.Gen#visitConditional(JCConditional)->void::: gen visit conditional
com.sun.tools.javac.jvm.Gen#visitNewClass(JCNewClass)->void::: gen visit new class
com.sun.tools.javac.jvm.Gen#visitNewArray(JCNewArray)->void::: gen visit new array
com.sun.tools.javac.jvm.Gen#makeNewArray(DiagnosticPosition, Type, int)->Item:::Generate code to create an array with given element type and number  of dimensions.
com.sun.tools.javac.jvm.Gen#visitParens(JCParens)->void::: gen visit parens
com.sun.tools.javac.jvm.Gen#visitAssign(JCAssign)->void::: gen visit assign
com.sun.tools.javac.jvm.Gen#visitAssignop(JCAssignOp)->void::: gen visit assignop
com.sun.tools.javac.jvm.Gen#visitUnary(JCUnary)->void::: gen visit unary
com.sun.tools.javac.jvm.Gen#visitBinary(JCBinary)->void::: gen visit binary
com.sun.tools.javac.jvm.Gen#completeBinop(JCTree, JCTree, OperatorSymbol)->Item:::Complete generating code for operation, with left operand  already on stack.
com.sun.tools.javac.jvm.Gen#visitTypeCast(JCTypeCast)->void::: gen visit type cast
com.sun.tools.javac.jvm.Gen#visitWildcard(JCWildcard)->void::: gen visit wildcard
com.sun.tools.javac.jvm.Gen#visitTypeTest(JCInstanceOf)->void::: gen visit type test
com.sun.tools.javac.jvm.Gen#visitIndexed(JCArrayAccess)->void::: gen visit indexed
com.sun.tools.javac.jvm.Gen#visitIdent(JCIdent)->void::: gen visit ident
com.sun.tools.javac.jvm.Gen#visitSelect(JCFieldAccess)->void::: gen visit select
com.sun.tools.javac.jvm.Gen#isInvokeDynamic(Symbol)->boolean::: gen is invoke dynamic
com.sun.tools.javac.jvm.Gen#visitLiteral(JCLiteral)->void::: gen visit literal
com.sun.tools.javac.jvm.Gen#visitLetExpr(LetExpr)->void::: gen visit let expr
com.sun.tools.javac.jvm.Gen#genClass(Env, JCClassDecl)->boolean:::Generate code for a class definition.
com.sun.tools.javac.jvm.Gen.GenFinalizer#gen()->void:::Generate code to clean up when unwinding.
com.sun.tools.javac.jvm.Gen.GenFinalizer#genLast()->void:::Generate code to clean up at last.
com.sun.tools.javac.jvm.Gen.GenFinalizer#hasFinalizer()->boolean:::Does this finalizer have some nontrivial cleanup to perform?
com.sun.tools.javac.jvm.Gen.GenFinalizer#afterBody()->void:::Should be invoked after the try's body has been visited.
com.sun.tools.javac.jvm.Gen.GenContext#addExit(Chain)->void:::Add given chain to exit chain.
com.sun.tools.javac.jvm.Gen.GenContext#addCont(Chain)->void:::Add given chain to cont chain.
com.sun.tools.javac.jvm.Items#makeVoidItem()->Item:::Make a void item
com.sun.tools.javac.jvm.Items#makeThisItem()->Item:::Make an item representing `this'.
com.sun.tools.javac.jvm.Items#makeSuperItem()->Item:::Make an item representing `super'.
com.sun.tools.javac.jvm.Items#makeStackItem(Type)->Item:::Make an item representing a value on stack.
com.sun.tools.javac.jvm.Items#makeDynamicItem(Symbol)->Item:::Make an item representing a dynamically invoked method.
com.sun.tools.javac.jvm.Items#makeIndexedItem(Type)->Item:::Make an item representing an indexed expression.
com.sun.tools.javac.jvm.Items#makeLocalItem(VarSymbol)->LocalItem:::Make an item representing a local variable.
com.sun.tools.javac.jvm.Items#makeStaticItem(Symbol)->Item:::Make an item representing a static variable or method.
com.sun.tools.javac.jvm.Items#makeMemberItem(Symbol, boolean)->Item:::Make an item representing an instance variable or method.
com.sun.tools.javac.jvm.Items#makeImmediateItem(Type, Object)->Item:::Make an item representing a literal.
com.sun.tools.javac.jvm.Items#makeAssignItem(Item)->Item:::Make an item representing an assignment expression.
com.sun.tools.javac.jvm.Items#makeCondItem(int, Chain, Chain)->CondItem:::Make an item representing a conditional or unconditional jump.
com.sun.tools.javac.jvm.Items#makeCondItem(int)->CondItem:::Make an item representing a conditional or unconditional jump.
com.sun.tools.javac.jvm.Items.Item#load()->Item:::Generate code to load this item onto stack.
com.sun.tools.javac.jvm.Items.Item#store()->void:::Generate code to store top of stack into this item.
com.sun.tools.javac.jvm.Items.Item#invoke()->Item:::Generate code to invoke method represented by this item.
com.sun.tools.javac.jvm.Items.Item#duplicate()->void:::Generate code to use this item twice.
com.sun.tools.javac.jvm.Items.Item#drop()->void:::Generate code to avoid having to use this item.
com.sun.tools.javac.jvm.Items.Item#stash(int)->void:::Generate code to stash a copy of top of stack - of typecode toscode -  under this item.
com.sun.tools.javac.jvm.Items.Item#mkCond()->CondItem:::Generate code to turn item into a testable condition.
com.sun.tools.javac.jvm.Items.Item#coerce(int)->Item:::Generate code to coerce item to given type code.
com.sun.tools.javac.jvm.Items.Item#coerce(Type)->Item:::Generate code to coerce item to given type.
com.sun.tools.javac.jvm.Items.Item#width()->int:::Return the width of this item on stack as a number of words.
com.sun.tools.javac.jvm.Items.Item#toString()->String::: item to string
com.sun.tools.javac.jvm.Items.StackItem#load()->Item::: stack item load
com.sun.tools.javac.jvm.Items.StackItem#duplicate()->void::: stack item duplicate
com.sun.tools.javac.jvm.Items.StackItem#drop()->void::: stack item drop
com.sun.tools.javac.jvm.Items.StackItem#stash(int)->void::: stack item stash
com.sun.tools.javac.jvm.Items.StackItem#width()->int::: stack item width
com.sun.tools.javac.jvm.Items.StackItem#toString()->String::: stack item to string
com.sun.tools.javac.jvm.Items.IndexedItem#load()->Item::: indexed item load
com.sun.tools.javac.jvm.Items.IndexedItem#store()->void::: indexed item store
com.sun.tools.javac.jvm.Items.IndexedItem#duplicate()->void::: indexed item duplicate
com.sun.tools.javac.jvm.Items.IndexedItem#drop()->void::: indexed item drop
com.sun.tools.javac.jvm.Items.IndexedItem#stash(int)->void::: indexed item stash
com.sun.tools.javac.jvm.Items.IndexedItem#width()->int::: indexed item width
com.sun.tools.javac.jvm.Items.IndexedItem#toString()->String::: indexed item to string
com.sun.tools.javac.jvm.Items.SelfItem#load()->Item::: self item load
com.sun.tools.javac.jvm.Items.SelfItem#toString()->String::: self item to string
com.sun.tools.javac.jvm.Items.LocalItem#load()->Item::: local item load
com.sun.tools.javac.jvm.Items.LocalItem#store()->void::: local item store
com.sun.tools.javac.jvm.Items.LocalItem#incr(int)->void::: local item incr
com.sun.tools.javac.jvm.Items.LocalItem#toString()->String::: local item to string
com.sun.tools.javac.jvm.Items.StaticItem#load()->Item::: static item load
com.sun.tools.javac.jvm.Items.StaticItem#store()->void::: static item store
com.sun.tools.javac.jvm.Items.StaticItem#invoke()->Item::: static item invoke
com.sun.tools.javac.jvm.Items.StaticItem#toString()->String::: static item to string
com.sun.tools.javac.jvm.Items.DynamicItem#load()->Item::: dynamic item load
com.sun.tools.javac.jvm.Items.DynamicItem#store()->void::: dynamic item store
com.sun.tools.javac.jvm.Items.DynamicItem#invoke()->Item::: dynamic item invoke
com.sun.tools.javac.jvm.Items.DynamicItem#toString()->String::: dynamic item to string
com.sun.tools.javac.jvm.Items.MemberItem#load()->Item::: member item load
com.sun.tools.javac.jvm.Items.MemberItem#store()->void::: member item store
com.sun.tools.javac.jvm.Items.MemberItem#invoke()->Item::: member item invoke
com.sun.tools.javac.jvm.Items.MemberItem#duplicate()->void::: member item duplicate
com.sun.tools.javac.jvm.Items.MemberItem#drop()->void::: member item drop
com.sun.tools.javac.jvm.Items.MemberItem#stash(int)->void::: member item stash
com.sun.tools.javac.jvm.Items.MemberItem#width()->int::: member item width
com.sun.tools.javac.jvm.Items.MemberItem#toString()->String::: member item to string
com.sun.tools.javac.jvm.Items.ImmediateItem#load()->Item::: immediate item load
com.sun.tools.javac.jvm.Items.ImmediateItem#mkCond()->CondItem::: immediate item mk cond
com.sun.tools.javac.jvm.Items.ImmediateItem#coerce(int)->Item::: immediate item coerce
com.sun.tools.javac.jvm.Items.ImmediateItem#toString()->String::: immediate item to string
com.sun.tools.javac.jvm.Items.AssignItem#load()->Item::: assign item load
com.sun.tools.javac.jvm.Items.AssignItem#duplicate()->void::: assign item duplicate
com.sun.tools.javac.jvm.Items.AssignItem#drop()->void::: assign item drop
com.sun.tools.javac.jvm.Items.AssignItem#stash(int)->void::: assign item stash
com.sun.tools.javac.jvm.Items.AssignItem#width()->int::: assign item width
com.sun.tools.javac.jvm.Items.AssignItem#toString()->String::: assign item to string
com.sun.tools.javac.jvm.Items.CondItem#load()->Item::: cond item load
com.sun.tools.javac.jvm.Items.CondItem#duplicate()->void::: cond item duplicate
com.sun.tools.javac.jvm.Items.CondItem#drop()->void::: cond item drop
com.sun.tools.javac.jvm.Items.CondItem#stash(int)->void::: cond item stash
com.sun.tools.javac.jvm.Items.CondItem#mkCond()->CondItem::: cond item mk cond
com.sun.tools.javac.jvm.Items.CondItem#jumpTrue()->Chain::: cond item jump true
com.sun.tools.javac.jvm.Items.CondItem#jumpFalse()->Chain::: cond item jump false
com.sun.tools.javac.jvm.Items.CondItem#negate()->CondItem::: cond item negate
com.sun.tools.javac.jvm.Items.CondItem#width()->int::: cond item width
com.sun.tools.javac.jvm.Items.CondItem#isTrue()->boolean::: cond item is true
com.sun.tools.javac.jvm.Items.CondItem#isFalse()->boolean::: cond item is false
com.sun.tools.javac.jvm.Items.CondItem#toString()->String::: cond item to string
com.sun.tools.javac.jvm.JNIWriter#instance(Context)->JNIWriter:::Get the ClassWriter instance for this context.
com.sun.tools.javac.jvm.JNIWriter#isSynthetic(Symbol)->boolean::: writer is synthetic
com.sun.tools.javac.jvm.JNIWriter#isStatic(Symbol)->boolean::: writer is static
com.sun.tools.javac.jvm.JNIWriter#isFinal(Symbol)->boolean::: writer is final
com.sun.tools.javac.jvm.JNIWriter#isNative(Symbol)->boolean::: writer is native
com.sun.tools.javac.jvm.JNIWriter#needsHeader(ClassSymbol)->boolean::: writer needs header
com.sun.tools.javac.jvm.JNIWriter#write(ClassSymbol)->FileObject:::Emit a class file for a given class.
com.sun.tools.javac.jvm.JNIWriter#write(PrintWriter, ClassSymbol)->void::: writer write
com.sun.tools.javac.jvm.JNIWriter#writeStatics(PrintWriter, ClassSymbol)->void::: writer write statics
com.sun.tools.javac.jvm.JNIWriter#printStaticDefines(PrintWriter, Pair)->void::: writer print static defines
com.sun.tools.javac.jvm.JNIWriter#writeMethods(PrintWriter, ClassSymbol, String)->void::: writer write methods
com.sun.tools.javac.jvm.JNIWriter#jniType(Type)->String::: writer jni type
com.sun.tools.javac.jvm.JNIWriter#fileTop(PrintWriter)->void::: writer file top
com.sun.tools.javac.jvm.JNIWriter#includes(PrintWriter)->void::: writer includes
com.sun.tools.javac.jvm.JNIWriter#cppGuardBegin(PrintWriter)->void::: writer cpp guard begin
com.sun.tools.javac.jvm.JNIWriter#cppGuardEnd(PrintWriter)->void::: writer cpp guard end
com.sun.tools.javac.jvm.JNIWriter#guardBegin(PrintWriter, String)->void::: writer guard begin
com.sun.tools.javac.jvm.JNIWriter#guardEnd(PrintWriter)->void::: writer guard end
com.sun.tools.javac.jvm.JNIWriter#encodeMethod(Symbol, ClassSymbol, boolean)->String::: writer encode method
com.sun.tools.javac.jvm.JNIWriter#encode(CharSequence, EncoderType)->String::: writer encode
com.sun.tools.javac.jvm.JNIWriter#encodeChar(char)->String::: writer encode char
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#defaultAction(Type, P)->R::: simple type visitor default action
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitClassType(Type.ClassType, P)->R::: simple type visitor visit class type
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitWildcardType(Type.WildcardType, P)->R::: simple type visitor visit wildcard type
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitArrayType(Type.ArrayType, P)->R::: simple type visitor visit array type
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitMethodType(Type.MethodType, P)->R::: simple type visitor visit method type
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitPackageType(Type.PackageType, P)->R::: simple type visitor visit package type
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitTypeVar(Type.TypeVar, P)->R::: simple type visitor visit type var
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitCapturedType(Type.CapturedType, P)->R::: simple type visitor visit captured type
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitForAll(Type.ForAll, P)->R::: simple type visitor visit for all
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitUndetVar(Type.UndetVar, P)->R::: simple type visitor visit undet var
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitErrorType(Type.ErrorType, P)->R::: simple type visitor visit error type
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitType(Type, P)->R::: simple type visitor visit type
com.sun.tools.javac.jvm.JNIWriter.SimpleTypeVisitor#visitModuleType(Type.ModuleType, P)->R::: simple type visitor visit module type
com.sun.tools.javac.jvm.ModuleNameReader#readModuleName(Path)->String::: module name reader read module name
com.sun.tools.javac.jvm.ModuleNameReader#readModuleName(JavaFileObject)->String::: module name reader read module name
com.sun.tools.javac.jvm.ModuleNameReader#readModuleName(InputStream)->String::: module name reader read module name
com.sun.tools.javac.jvm.ModuleNameReader#checkZero(int, String)->void::: module name reader check zero
com.sun.tools.javac.jvm.ModuleNameReader#getChar(int)->char:::Extract a character at position bp from buf.
com.sun.tools.javac.jvm.ModuleNameReader#nextChar()->char:::Read a character.
com.sun.tools.javac.jvm.ModuleNameReader#nextInt()->int:::Read an integer.
com.sun.tools.javac.jvm.ModuleNameReader#indexPool()->void:::Index all constant pool entries, writing their start addresses into  poolIdx.
com.sun.tools.javac.jvm.ModuleNameReader#getUtf8Value(int, boolean)->String::: module name reader get utf8 value
com.sun.tools.javac.jvm.ModuleNameReader#getModuleName(int)->String::: module name reader get module name
com.sun.tools.javac.jvm.Pool#numEntries()->int:::Return the number of entries in the constant pool.
com.sun.tools.javac.jvm.Pool#reset()->void:::Remove everything from this pool.
com.sun.tools.javac.jvm.Pool#put(Object)->int:::Place an object in the pool, unless it is already there
com.sun.tools.javac.jvm.Pool#makePoolValue(Object)->Object::: pool make pool value
com.sun.tools.javac.jvm.Pool#get(Object)->int:::Return the given object's index in the pool,  or -1 if object is not in there.
com.sun.tools.javac.jvm.Pool.Method#equals(Object)->boolean::: method equals
com.sun.tools.javac.jvm.Pool.Method#hashCode()->int::: method hash code
com.sun.tools.javac.jvm.Pool.DynamicMethod#equals(Object)->boolean::: dynamic method equals
com.sun.tools.javac.jvm.Pool.DynamicMethod#equalsImpl(Object, boolean)->boolean::: dynamic method equals impl
com.sun.tools.javac.jvm.Pool.DynamicMethod#hashCode()->int::: dynamic method hash code
com.sun.tools.javac.jvm.Pool.DynamicMethod#hashCodeImpl(boolean)->int::: dynamic method hash code impl
com.sun.tools.javac.jvm.Pool.DynamicMethod.BootstrapMethodsKey#equals(Object)->boolean::: bootstrap methods key equals
com.sun.tools.javac.jvm.Pool.DynamicMethod.BootstrapMethodsKey#hashCode()->int::: bootstrap methods key hash code
com.sun.tools.javac.jvm.Pool.DynamicMethod.BootstrapMethodsKey#getUniqueArgs()->Object[]::: bootstrap methods key get unique args
com.sun.tools.javac.jvm.Pool.Variable#equals(Object)->boolean::: variable equals
com.sun.tools.javac.jvm.Pool.Variable#hashCode()->int::: variable hash code
com.sun.tools.javac.jvm.Pool.MethodHandle#equals(Object)->boolean::: method handle equals
com.sun.tools.javac.jvm.Pool.MethodHandle#hashCode()->int::: method handle hash code
com.sun.tools.javac.jvm.StringConcat#instance(Context)->StringConcat::: string concat instance
com.sun.tools.javac.jvm.StringConcat#makeConcat(JCTree.JCAssignOp)->Item::: string concat make concat
com.sun.tools.javac.jvm.StringConcat#makeConcat(JCTree.JCBinary)->Item::: string concat make concat
com.sun.tools.javac.jvm.StringConcat#collectAll(JCTree)->List::: string concat collect all
com.sun.tools.javac.jvm.StringConcat#collectAll(JCTree.JCExpression, JCTree.JCExpression)->List::: string concat collect all
com.sun.tools.javac.jvm.StringConcat#sharpestAccessible(Type)->Type:::If the type is not accessible from current context, try to figure out the sharpest accessible supertype.
com.sun.tools.javac.jvm.UninitializedType#uninitializedThis(Type)->UninitializedType::: uninitialized type uninitialized this
com.sun.tools.javac.jvm.UninitializedType#uninitializedObject(Type, int)->UninitializedType::: uninitialized type uninitialized object
com.sun.tools.javac.jvm.UninitializedType#cloneWithMetadata(TypeMetadata)->UninitializedType::: uninitialized type clone with metadata
com.sun.tools.javac.jvm.UninitializedType#initializedType()->Type::: uninitialized type initialized type

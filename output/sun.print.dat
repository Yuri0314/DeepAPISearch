sun.print.AttributeUpdater#getUpdatedAttributes()->PrintServiceAttributeSet::: attribute updater get updated attributes
sun.print.BackgroundLookupListener#notifyServices(PrintService[])->void:::Called once to notify that the complete list of services is retrieved
sun.print.BackgroundServiceLookup#getServicesInbackground(BackgroundLookupListener)->void::: background service lookup get services inbackground
sun.print.CustomMediaSizeName#getChoiceName()->String:::Returns the command string for this media.
sun.print.CustomMediaSizeName#getStandardMedia()->MediaSizeName:::Returns matching standard MediaSizeName.
sun.print.CustomMediaSizeName#findMedia(Media[], float, float, int)->MediaSizeName:::Returns closest matching MediaSizeName among given array of Media
sun.print.CustomMediaSizeName#getSuperEnumTable()->Media[]:::Returns the string table for super class MediaSizeName.
sun.print.CustomMediaSizeName#getStringTable()->String[]:::Returns the string table for class CustomMediaSizeName.
sun.print.CustomMediaSizeName#getEnumValueTable()->EnumSyntax[]:::Returns the enumeration value table for class CustomMediaSizeName.
sun.print.CustomMediaTray#getChoiceName()->String:::Returns the command string for this media tray.
sun.print.CustomMediaTray#getSuperEnumTable()->Media[]:::Returns the string table for super class MediaTray.
sun.print.CustomMediaTray#getStringTable()->String[]:::Returns the string table for class CustomMediaTray.
sun.print.CustomMediaTray#getEnumValueTable()->EnumSyntax[]:::Returns the enumeration value table for class CustomMediaTray.
sun.print.DialogOwnerAccessor#getOwnerID(DialogOwner)->long::: dialog owner accessor get owner d
sun.print.DialogOwnerAccessor#setAccessor(DialogOwnerAccessor)->void::: dialog owner accessor set accessor
sun.print.DialogOwnerAccessor#getID(DialogOwner)->long::: dialog owner accessor get d
sun.print.DocumentPropertiesUI#showDocumentProperties(PrinterJob, Window, PrintService, PrintRequestAttributeSet)->PrintRequestAttributeSet:::Invokes whatever code is needed to display a native dialog with the specified owner
sun.print.ImagePrinter#print(Graphics, PageFormat, int)->int::: image printer print
sun.print.OpenBook#getNumberOfPages()->int:::This object does not know the number of pages.
sun.print.OpenBook#getPageFormat(int)->PageFormat:::Return the PageFormat of the page specified by 'pageIndex'.
sun.print.OpenBook#getPrintable(int)->Printable:::Return the Printable instance responsible for rendering the page specified by 'pageIndex'.
sun.print.PageableDoc#getDocFlavor()->DocFlavor::: pageable doc get doc flavor
sun.print.PageableDoc#getAttributes()->DocAttributeSet::: pageable doc get attributes
sun.print.PageableDoc#getPrintData()->Object::: pageable doc get print data
sun.print.PageableDoc#getReaderForText()->Reader::: pageable doc get reader for text
sun.print.PageableDoc#getStreamForBytes()->InputStream::: pageable doc get stream for bytes
sun.print.PathGraphics#getPrintable()->Printable:::Return the Printable instance responsible for drawing into this Graphics.
sun.print.PathGraphics#getPageFormat()->PageFormat:::Return the PageFormat associated with this page of Graphics.
sun.print.PathGraphics#getPageIndex()->int:::Return the page index associated with this Graphics.
sun.print.PathGraphics#canDoRedraws()->boolean:::Return true if we are allowed to ask the application to redraw portions of the page
sun.print.PathGraphics#redrawRegion(Rectangle2D, double, double, Shape, AffineTransform)->void:::Redraw a rectanglular area using a proxy graphics
sun.print.PathGraphics#drawLine(int, int, int, int)->void:::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.
sun.print.PathGraphics#drawRect(int, int, int, int)->void:::Draws the outline of the specified rectangle
sun.print.PathGraphics#fillRect(int, int, int, int)->void:::Fills the specified rectangle
sun.print.PathGraphics#clearRect(int, int, int, int)->void:::Clears the specified rectangle by filling it with the background color of the current drawing surface
sun.print.PathGraphics#drawRoundRect(int, int, int, int, int, int)->void:::Draws an outlined round-cornered rectangle using this graphics context's current color
sun.print.PathGraphics#fillRoundRect(int, int, int, int, int, int)->void:::Fills the specified rounded corner rectangle with the current color
sun.print.PathGraphics#drawOval(int, int, int, int)->void:::Draws the outline of an oval
sun.print.PathGraphics#fillOval(int, int, int, int)->void:::Fills an oval bounded by the specified rectangle with the current color.
sun.print.PathGraphics#drawArc(int, int, int, int, int, int)->void:::Draws the outline of a circular or elliptical arc covering the specified rectangle
sun.print.PathGraphics#fillArc(int, int, int, int, int, int)->void:::Fills a circular or elliptical arc covering the specified rectangle
sun.print.PathGraphics#drawPolyline(int[], int[], int)->void:::Draws a sequence of connected lines defined by arrays of x and y coordinates
sun.print.PathGraphics#drawPolygon(int[], int[], int)->void:::Draws a closed polygon defined by arrays of x and y coordinates
sun.print.PathGraphics#drawPolygon(Polygon)->void:::Draws the outline of a polygon defined by the specified Polygon object.
sun.print.PathGraphics#fillPolygon(int[], int[], int)->void:::Fills a closed polygon defined by arrays of x and y coordinates
sun.print.PathGraphics#fillPolygon(Polygon)->void:::Fills the polygon defined by the specified Polygon object with the graphics context's current color
sun.print.PathGraphics#drawString(String, int, int)->void:::Draws the text given by the specified string, using this graphics context's current font and color
sun.print.PathGraphics#drawString(String, float, float)->void::: path graphics draw string
sun.print.PathGraphics#drawString(String, float, float, Font, FontRenderContext, float)->void::: path graphics draw string
sun.print.PathGraphics#drawString(AttributedCharacterIterator, int, int)->void:::Draws the text given by the specified iterator, using this graphics context's current color
sun.print.PathGraphics#drawString(AttributedCharacterIterator, float, float)->void::: path graphics draw string
sun.print.PathGraphics#drawGlyphVector(GlyphVector, float, float)->void:::Draws a GlyphVector
sun.print.PathGraphics#platformFontCount(Font, String)->int::: path graphics platform font count
sun.print.PathGraphics#printGlyphVector(GlyphVector, float, float)->boolean:::Default implementation returns false
sun.print.PathGraphics#printedSimpleGlyphVector(GlyphVector, float, float)->boolean::: path graphics printed simple glyph vector
sun.print.PathGraphics#canDrawStringToWidth()->boolean::: path graphics can draw string to width
sun.print.PathGraphics#draw(Shape)->void:::Strokes the outline of a Shape using the settings of the current graphics state
sun.print.PathGraphics#fill(Shape)->void:::Fills the interior of a Shape using the settings of the current graphics state
sun.print.PathGraphics#fill(Shape, Color)->void::: path graphics fill
sun.print.PathGraphics#deviceFill(PathIterator, Color)->void:::Fill the path defined by pathIter with the specified color
sun.print.PathGraphics#deviceClip(PathIterator)->void::: path graphics device clip
sun.print.PathGraphics#deviceFrameRect(int, int, int, int, Color)->void::: path graphics device frame rect
sun.print.PathGraphics#deviceDrawLine(int, int, int, int, Color)->void::: path graphics device draw line
sun.print.PathGraphics#deviceFillRect(int, int, int, int, Color)->void::: path graphics device fill rect
sun.print.PathGraphics#getBufferedImage(Image)->BufferedImage::: path graphics get buffered image
sun.print.PathGraphics#hasTransparentPixels(BufferedImage)->boolean:::Return true if the BufferedImage argument has non-opaque bits in it and therefore can not be directly rendered by GDI
sun.print.PathGraphics#isBitmaskTransparency(BufferedImage)->boolean::: path graphics is bitmask transparency
sun.print.PathGraphics#drawBitmaskImage(BufferedImage, AffineTransform, Color, int, int, int, int)->boolean::: path graphics draw bitmask image
sun.print.PathGraphics#drawImageToPlatform(Image, AffineTransform, Color, int, int, int, int, boolean)->boolean:::The various drawImage() methods for PathGraphics are all decomposed into an invocation of drawImageToPlatform
sun.print.PathGraphics#drawImage(Image, int, int, ImageObserver)->boolean:::Draws as much of the specified image as is currently available
sun.print.PathGraphics#drawImage(Image, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
sun.print.PathGraphics#drawImage(Image, int, int, Color, ImageObserver)->boolean::: path graphics draw image
sun.print.PathGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
sun.print.PathGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
sun.print.PathGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
sun.print.PathGraphics#drawImage(Image, AffineTransform, ImageObserver)->boolean:::Draws an image, applying a transform from image space into user space before drawing
sun.print.PathGraphics#drawImage(BufferedImage, BufferedImageOp, int, int)->void:::Draws a BufferedImage that is filtered with a BufferedImageOp
sun.print.PathGraphics#drawRenderedImage(RenderedImage, AffineTransform)->void:::Draws an image, applying a transform from image space into user space before drawing
sun.print.PeekGraphics#getDelegate()->Graphics2D:::Return the Graphics2D object that does the drawing for this instance.
sun.print.PeekGraphics#setDelegate(Graphics2D)->void:::Set the Graphics2D instance which will do the drawing.
sun.print.PeekGraphics#getPrinterJob()->PrinterJob::: peek graphics get printer job
sun.print.PeekGraphics#setAWTDrawingOnly()->void:::The caller promises that only AWT graphics will be drawn
sun.print.PeekGraphics#getAWTDrawingOnly()->boolean::: peek graphics get drawing only
sun.print.PeekGraphics#getDrawingArea()->Spans:::Return a Spans instance describing the parts of the page in to which drawing occurred.
sun.print.PeekGraphics#getDeviceConfiguration()->GraphicsConfiguration:::Returns the device configuration associated with this Graphics2D.
sun.print.PeekGraphics#create()->Graphics:::Creates a new Graphics object that is a copy of this Graphics object.
sun.print.PeekGraphics#translate(int, int)->void:::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system
sun.print.PeekGraphics#translate(double, double)->void:::Concatenates the current transform of this Graphics2D with a translation transformation
sun.print.PeekGraphics#rotate(double)->void:::Concatenates the current transform of this Graphics2D with a rotation transformation
sun.print.PeekGraphics#rotate(double, double, double)->void:::Concatenates the current transform of this Graphics2D with a translated rotation transformation
sun.print.PeekGraphics#scale(double, double)->void:::Concatenates the current transform of this Graphics2D with a scaling transformation
sun.print.PeekGraphics#shear(double, double)->void:::Concatenates the current transform of this Graphics2D with a shearing transformation
sun.print.PeekGraphics#getColor()->Color:::Gets this graphics context's current color.
sun.print.PeekGraphics#setColor(Color)->void:::Sets this graphics context's current color to the specified color
sun.print.PeekGraphics#setPaintMode()->void:::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color
sun.print.PeekGraphics#setXORMode(Color)->void:::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color
sun.print.PeekGraphics#getFont()->Font:::Gets the current font.
sun.print.PeekGraphics#setFont(Font)->void:::Sets this graphics context's font to the specified font
sun.print.PeekGraphics#getFontMetrics(Font)->FontMetrics:::Gets the font metrics for the specified font.
sun.print.PeekGraphics#getFontRenderContext()->FontRenderContext:::Get the rendering context of the font within this Graphics2D context.
sun.print.PeekGraphics#getClipBounds()->Rectangle:::Returns the bounding rectangle of the current clipping area
sun.print.PeekGraphics#clipRect(int, int, int, int)->void:::Intersects the current clip with the specified rectangle
sun.print.PeekGraphics#setClip(int, int, int, int)->void:::Sets the current clip to the rectangle specified by the given coordinates
sun.print.PeekGraphics#getClip()->Shape:::Gets the current clipping area.
sun.print.PeekGraphics#setClip(Shape)->void:::Sets the current clipping area to an arbitrary clip shape
sun.print.PeekGraphics#copyArea(int, int, int, int, int, int)->void:::Copies an area of the component by a distance specified by dx and dy
sun.print.PeekGraphics#drawLine(int, int, int, int)->void:::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.
sun.print.PeekGraphics#fillRect(int, int, int, int)->void:::Fills the specified rectangle
sun.print.PeekGraphics#clearRect(int, int, int, int)->void:::Clears the specified rectangle by filling it with the background color of the current drawing surface
sun.print.PeekGraphics#drawRoundRect(int, int, int, int, int, int)->void:::Draws an outlined round-cornered rectangle using this graphics context's current color
sun.print.PeekGraphics#fillRoundRect(int, int, int, int, int, int)->void:::Fills the specified rounded corner rectangle with the current color
sun.print.PeekGraphics#drawOval(int, int, int, int)->void:::Draws the outline of an oval
sun.print.PeekGraphics#fillOval(int, int, int, int)->void:::Fills an oval bounded by the specified rectangle with the current color.
sun.print.PeekGraphics#drawArc(int, int, int, int, int, int)->void:::Draws the outline of a circular or elliptical arc covering the specified rectangle
sun.print.PeekGraphics#fillArc(int, int, int, int, int, int)->void:::Fills a circular or elliptical arc covering the specified rectangle
sun.print.PeekGraphics#drawPolyline(int[], int[], int)->void:::Draws a sequence of connected lines defined by arrays of x and y coordinates
sun.print.PeekGraphics#drawPolygon(int[], int[], int)->void:::Draws a closed polygon defined by arrays of x and y coordinates
sun.print.PeekGraphics#fillPolygon(int[], int[], int)->void:::Fills a closed polygon defined by arrays of x and y coordinates
sun.print.PeekGraphics#drawString(String, int, int)->void:::Draws the text given by the specified string, using this graphics context's current font and color
sun.print.PeekGraphics#drawString(AttributedCharacterIterator, int, int)->void:::Draws the text given by the specified iterator, using this graphics context's current color
sun.print.PeekGraphics#drawString(AttributedCharacterIterator, float, float)->void:::Draws the text given by the specified iterator, using this graphics context's current color
sun.print.PeekGraphics#drawImage(Image, int, int, ImageObserver)->boolean:::Draws as much of the specified image as is currently available
sun.print.PeekGraphics#drawImage(Image, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
sun.print.PeekGraphics#drawImage(Image, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified image as is currently available
sun.print.PeekGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
sun.print.PeekGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
sun.print.PeekGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
sun.print.PeekGraphics#drawRenderedImage(RenderedImage, AffineTransform)->void:::Draws an image, applying a transform from image space into user space before drawing
sun.print.PeekGraphics#drawRenderableImage(RenderableImage, AffineTransform)->void::: peek graphics draw renderable image
sun.print.PeekGraphics#dispose()->void:::Disposes of this graphics context and releases any system resources that it is using
sun.print.PeekGraphics#finalize()->void:::Empty finalizer as no clean up needed here.
sun.print.PeekGraphics#draw(Shape)->void:::Strokes the outline of a Shape using the settings of the current graphics state
sun.print.PeekGraphics#drawImage(Image, AffineTransform, ImageObserver)->boolean:::Draws an image, applying a transform from image space into user space before drawing
sun.print.PeekGraphics#drawImage(BufferedImage, BufferedImageOp, int, int)->void:::Draws a BufferedImage that is filtered with a BufferedImageOp
sun.print.PeekGraphics#drawString(String, float, float)->void:::Draws a string of text
sun.print.PeekGraphics#drawGlyphVector(GlyphVector, float, float)->void:::Draws a GlyphVector
sun.print.PeekGraphics#fill(Shape)->void:::Fills the interior of a Shape using the settings of the current graphics state
sun.print.PeekGraphics#hit(Rectangle, Shape, boolean)->boolean:::Checks to see if the outline of a Shape intersects the specified Rectangle in device space
sun.print.PeekGraphics#setComposite(Composite)->void:::Sets the Composite in the current graphics state
sun.print.PeekGraphics#setPaint(Paint)->void:::Sets the Paint in the current graphics state.
sun.print.PeekGraphics#setStroke(Stroke)->void:::Sets the Stroke in the current graphics state.
sun.print.PeekGraphics#setRenderingHint(Key, Object)->void:::Sets the preferences for the rendering algorithms
sun.print.PeekGraphics#getRenderingHint(Key)->Object:::Returns the preferences for the rendering algorithms.
sun.print.PeekGraphics#setRenderingHints(Map)->void:::Sets the preferences for the rendering algorithms
sun.print.PeekGraphics#addRenderingHints(Map)->void:::Adds a number of preferences for the rendering algorithms
sun.print.PeekGraphics#getRenderingHints()->RenderingHints:::Gets the preferences for the rendering algorithms
sun.print.PeekGraphics#transform(AffineTransform)->void:::Composes a Transform object with the transform in this Graphics2D according to the rule last-specified-first-applied
sun.print.PeekGraphics#setTransform(AffineTransform)->void:::Sets the Transform in the current graphics state.
sun.print.PeekGraphics#getTransform()->AffineTransform:::Returns the current Transform in the Graphics2D state.
sun.print.PeekGraphics#getPaint()->Paint:::Returns the current Paint in the Graphics2D state.
sun.print.PeekGraphics#getComposite()->Composite:::Returns the current Composite in the Graphics2D state.
sun.print.PeekGraphics#setBackground(Color)->void:::Sets the background color in this context used for clearing a region
sun.print.PeekGraphics#getBackground()->Color:::Returns the background color used for clearing a region.
sun.print.PeekGraphics#getStroke()->Stroke:::Returns the current Stroke in the Graphics2D state.
sun.print.PeekGraphics#clip(Shape)->void:::Intersects the current clip with the interior of the specified Shape and sets the current clip to the resulting intersection
sun.print.PeekGraphics#hitsDrawingArea(Rectangle)->boolean:::Return true if the Rectangle rect intersects the area into which the application has drawn.
sun.print.PeekGraphics#getMetrics()->PeekMetrics:::Return the object holding the summary of the drawing done by the printing application.
sun.print.PeekGraphics#imageUpdate(Image, int, int, int, int, int)->boolean:::Notify this object when the height or width become available for an image.
sun.print.PeekGraphics.ImageWaiter#getWidth()->int::: image waiter get width
sun.print.PeekGraphics.ImageWaiter#getHeight()->int::: image waiter get height
sun.print.PeekGraphics.ImageWaiter#imageUpdate(Image, int, int, int, int, int)->boolean::: image waiter image update
sun.print.PeekMetrics#hasNonSolidColors()->boolean:::Return true if the application has done any drawing with a Paint that is not an instance of Color
sun.print.PeekMetrics#hasCompositing()->boolean:::Return true if the application has done any drawing with an alpha other than 1.0.
sun.print.PeekMetrics#hasText()->boolean:::Return true if the application has drawn any text.
sun.print.PeekMetrics#hasImages()->boolean:::Return true if the application has drawn any images.
sun.print.PeekMetrics#fill(Graphics2D)->void:::The application is performing a fill so record the needed information.
sun.print.PeekMetrics#draw(Graphics2D)->void:::The application is performing a draw so record the needed information.
sun.print.PeekMetrics#clear(Graphics2D)->void:::The application is performing a clearRect so record the needed information.
sun.print.PeekMetrics#drawText(Graphics2D)->void:::The application is drawing text so record the needed information.
sun.print.PeekMetrics#drawText(Graphics2D, TextLayout)->void:::The application is drawing text defined by TextLayout so record the needed information.
sun.print.PeekMetrics#drawImage(Graphics2D, Image)->void:::The application is drawing the passed in image.
sun.print.PeekMetrics#drawImage(Graphics2D, RenderedImage)->void:::The application is drawing the passed in image.
sun.print.PeekMetrics#drawImage(Graphics2D, RenderableImage)->void:::The application is drawing the passed in image.
sun.print.PrinterGraphicsConfig#getDevice()->GraphicsDevice:::Return the graphics device associated with this configuration.
sun.print.PrinterGraphicsConfig#getColorModel()->ColorModel:::Returns the color model associated with this configuration.
sun.print.PrinterGraphicsConfig#getColorModel(int)->ColorModel:::Returns the color model associated with this configuration that supports the specified transparency.
sun.print.PrinterGraphicsConfig#getDefaultTransform()->AffineTransform:::Returns the default Transform for this configuration
sun.print.PrinterGraphicsConfig#getNormalizingTransform()->AffineTransform:::Returns a Transform that can be composed with the default Transform of a Graphics2D so that 72 units in user space will equal 1 inch in device space
sun.print.PrinterGraphicsConfig#getBounds()->Rectangle::: printer graphics config get bounds
sun.print.PrinterGraphicsDevice#getType()->int::: printer graphics device get type
sun.print.PrinterGraphicsDevice#getIDstring()->String::: printer graphics device get dstring
sun.print.PrinterGraphicsDevice#getConfigurations()->GraphicsConfiguration[]::: printer graphics device get configurations
sun.print.PrinterGraphicsDevice#getDefaultConfiguration()->GraphicsConfiguration::: printer graphics device get default configuration
sun.print.PrinterGraphicsDevice#setFullScreenWindow(Window)->void::: printer graphics device set full screen window
sun.print.PrinterGraphicsDevice#getFullScreenWindow()->Window::: printer graphics device get full screen window
sun.print.PrinterJobWrapper#getPrinterJob()->PrinterJob::: printer job wrapper get printer job
sun.print.PrinterJobWrapper#getCategory()->Class::: printer job wrapper get category
sun.print.PrinterJobWrapper#getName()->String::: printer job wrapper get name
sun.print.PrinterJobWrapper#toString()->String::: printer job wrapper to string
sun.print.PrinterJobWrapper#hashCode()->int::: printer job wrapper hash code
sun.print.PrintJob2D#printDialog()->boolean::: print job2 d print dialog
sun.print.PrintJob2D#getGraphics()->Graphics:::Gets a Graphics object that will draw to the next page
sun.print.PrintJob2D#getPageDimension()->Dimension:::Returns the dimensions of the page in pixels
sun.print.PrintJob2D#getPageResolution()->int:::Returns the resolution of the page in pixels per inch
sun.print.PrintJob2D#lastPageFirst()->boolean:::Returns true if the last page will be printed first.
sun.print.PrintJob2D#end()->void:::Ends the print job and does any necessary cleanup.
sun.print.PrintJob2D#finalize()->void:::Ends this print job once it is no longer referenced.
sun.print.PrintJob2D#print(Graphics, PageFormat, int)->int:::Prints the page at the specified index into the specified Graphics context in the specified format
sun.print.PrintJob2D#run()->void::: print job2 d run
sun.print.PrintJob2D#mapMedia(MediaType)->MediaSizeName::: print job2 d map media
sun.print.PrintJob2D#unMapMedia(MediaSizeName)->MediaType::: print job2 d un map media
sun.print.PrintJobAttributeException#getUnsupportedAttributes()->Class[]::: print job attribute exception get unsupported attributes
sun.print.PrintJobAttributeException#getUnsupportedValues()->Attribute[]::: print job attribute exception get unsupported values
sun.print.PrintJobFlavorException#getUnsupportedFlavors()->DocFlavor[]::: print job flavor exception get unsupported flavors
sun.print.PrintServiceLookupProvider#getWin32PrintLUS()->PrintServiceLookupProvider::: print service lookup provider get win32 print s
sun.print.PrintServiceLookupProvider#getPrintServices()->PrintService[]::: print service lookup provider get print services
sun.print.PrintServiceLookupProvider#getPrintServiceByName(String)->PrintService::: print service lookup provider get print service by name
sun.print.PrintServiceLookupProvider#matchingService(PrintService, PrintServiceAttributeSet)->boolean::: print service lookup provider matching service
sun.print.PrintServiceLookupProvider#getPrintServices(DocFlavor, AttributeSet)->PrintService[]::: print service lookup provider get print services
sun.print.PrintServiceLookupProvider#getMultiDocPrintServices(DocFlavor[], AttributeSet)->MultiDocPrintService[]::: print service lookup provider get multi doc print services
sun.print.PrintServiceLookupProvider#getDefaultPrintService()->PrintService::: print service lookup provider get default print service
sun.print.PrintServiceLookupProvider.PrinterChangeListener#run()->void::: printer change listener run
sun.print.PrintServiceLookupProvider.RemotePrinterChangeListener#compare(String, String)->int::: remote printer change listener compare
sun.print.PrintServiceLookupProvider.RemotePrinterChangeListener#run()->void::: remote printer change listener run
sun.print.ProxyGraphics#getGraphics()->Graphics::: proxy graphics get graphics
sun.print.ProxyGraphics#create()->Graphics:::Creates a new Graphics object that is a copy of this Graphics object.
sun.print.ProxyGraphics#create(int, int, int, int)->Graphics:::Creates a new Graphics object based on this Graphics object, but with a new translation and clip area
sun.print.ProxyGraphics#translate(int, int)->void:::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system
sun.print.ProxyGraphics#getColor()->Color:::Gets this graphics context's current color.
sun.print.ProxyGraphics#setColor(Color)->void:::Sets this graphics context's current color to the specified color
sun.print.ProxyGraphics#setPaintMode()->void:::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color
sun.print.ProxyGraphics#setXORMode(Color)->void:::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color
sun.print.ProxyGraphics#getFont()->Font:::Gets the current font.
sun.print.ProxyGraphics#setFont(Font)->void:::Sets this graphics context's font to the specified font
sun.print.ProxyGraphics#getFontMetrics()->FontMetrics:::Gets the font metrics of the current font.
sun.print.ProxyGraphics#getFontMetrics(Font)->FontMetrics:::Gets the font metrics for the specified font.
sun.print.ProxyGraphics#getClipBounds()->Rectangle:::Returns the bounding rectangle of the current clipping area
sun.print.ProxyGraphics#clipRect(int, int, int, int)->void:::Intersects the current clip with the specified rectangle
sun.print.ProxyGraphics#setClip(int, int, int, int)->void:::Sets the current clip to the rectangle specified by the given coordinates
sun.print.ProxyGraphics#getClip()->Shape:::Gets the current clipping area
sun.print.ProxyGraphics#setClip(Shape)->void:::Sets the current clipping area to an arbitrary clip shape
sun.print.ProxyGraphics#copyArea(int, int, int, int, int, int)->void:::Copies an area of the component by a distance specified by dx and dy
sun.print.ProxyGraphics#drawLine(int, int, int, int)->void:::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.
sun.print.ProxyGraphics#fillRect(int, int, int, int)->void:::Fills the specified rectangle
sun.print.ProxyGraphics#drawRect(int, int, int, int)->void:::Draws the outline of the specified rectangle
sun.print.ProxyGraphics#clearRect(int, int, int, int)->void:::Clears the specified rectangle by filling it with the background color of the current drawing surface
sun.print.ProxyGraphics#drawRoundRect(int, int, int, int, int, int)->void:::Draws an outlined round-cornered rectangle using this graphics context's current color
sun.print.ProxyGraphics#fillRoundRect(int, int, int, int, int, int)->void:::Fills the specified rounded corner rectangle with the current color
sun.print.ProxyGraphics#draw3DRect(int, int, int, int, boolean)->void:::Draws a 3-D highlighted outline of the specified rectangle
sun.print.ProxyGraphics#fill3DRect(int, int, int, int, boolean)->void:::Paints a 3-D highlighted rectangle filled with the current color
sun.print.ProxyGraphics#drawOval(int, int, int, int)->void:::Draws the outline of an oval
sun.print.ProxyGraphics#fillOval(int, int, int, int)->void:::Fills an oval bounded by the specified rectangle with the current color.
sun.print.ProxyGraphics#drawArc(int, int, int, int, int, int)->void:::Draws the outline of a circular or elliptical arc covering the specified rectangle
sun.print.ProxyGraphics#fillArc(int, int, int, int, int, int)->void:::Fills a circular or elliptical arc covering the specified rectangle
sun.print.ProxyGraphics#drawPolyline(int[], int[], int)->void:::Draws a sequence of connected lines defined by arrays of x and y coordinates
sun.print.ProxyGraphics#drawPolygon(int[], int[], int)->void:::Draws a closed polygon defined by arrays of x and y coordinates
sun.print.ProxyGraphics#drawPolygon(Polygon)->void:::Draws the outline of a polygon defined by the specified Polygon object.
sun.print.ProxyGraphics#fillPolygon(int[], int[], int)->void:::Fills a closed polygon defined by arrays of x and y coordinates
sun.print.ProxyGraphics#fillPolygon(Polygon)->void:::Fills the polygon defined by the specified Polygon object with the graphics context's current color
sun.print.ProxyGraphics#drawString(String, int, int)->void:::Draws the text given by the specified string, using this graphics context's current font and color
sun.print.ProxyGraphics#drawString(AttributedCharacterIterator, int, int)->void:::Draws the text given by the specified iterator, using this graphics context's current color
sun.print.ProxyGraphics#drawChars(char[], int, int, int, int)->void:::Draws the text given by the specified character array, using this graphics context's current font and color
sun.print.ProxyGraphics#drawBytes(byte[], int, int, int, int)->void:::Draws the text given by the specified byte array, using this graphics context's current font and color
sun.print.ProxyGraphics#drawImage(Image, int, int, ImageObserver)->boolean:::Draws as much of the specified image as is currently available
sun.print.ProxyGraphics#drawImage(Image, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
sun.print.ProxyGraphics#drawImage(Image, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified image as is currently available
sun.print.ProxyGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
sun.print.ProxyGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
sun.print.ProxyGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
sun.print.ProxyGraphics#dispose()->void:::Disposes of this graphics context and releases any system resources that it is using
sun.print.ProxyGraphics#finalize()->void:::Empty finalizer as no clean up needed here.
sun.print.ProxyGraphics#toString()->String:::Returns a String object representing this                        Graphics object's value.
sun.print.ProxyGraphics#getClipRect()->Rectangle::: proxy graphics get clip rect
sun.print.ProxyGraphics#hitClip(int, int, int, int)->boolean:::Returns true if the specified rectangular area intersects the bounding rectangle of the current clipping area
sun.print.ProxyGraphics#getClipBounds(Rectangle)->Rectangle:::Returns the bounding rectangle of the current clipping area
sun.print.ProxyGraphics2D#getDelegate()->Graphics2D:::Return the Graphics2D object that does the drawing for this instance.
sun.print.ProxyGraphics2D#setDelegate(Graphics2D)->void:::Set the Graphics2D instance which will do the drawing.
sun.print.ProxyGraphics2D#getPrinterJob()->PrinterJob::: proxy graphics2 d get printer job
sun.print.ProxyGraphics2D#getDeviceConfiguration()->GraphicsConfiguration:::Returns the device configuration associated with this Graphics2D.
sun.print.ProxyGraphics2D#create()->Graphics:::Creates a new Graphics object that is a copy of this Graphics object.
sun.print.ProxyGraphics2D#translate(int, int)->void:::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system
sun.print.ProxyGraphics2D#translate(double, double)->void:::Concatenates the current transform of this Graphics2D with a translation transformation
sun.print.ProxyGraphics2D#rotate(double)->void:::Concatenates the current transform of this Graphics2D with a rotation transformation
sun.print.ProxyGraphics2D#rotate(double, double, double)->void:::Concatenates the current transform of this Graphics2D with a translated rotation transformation
sun.print.ProxyGraphics2D#scale(double, double)->void:::Concatenates the current transform of this Graphics2D with a scaling transformation
sun.print.ProxyGraphics2D#shear(double, double)->void:::Concatenates the current transform of this Graphics2D with a shearing transformation
sun.print.ProxyGraphics2D#getColor()->Color:::Gets this graphics context's current color.
sun.print.ProxyGraphics2D#setColor(Color)->void:::Sets this graphics context's current color to the specified color
sun.print.ProxyGraphics2D#setPaintMode()->void:::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color
sun.print.ProxyGraphics2D#setXORMode(Color)->void:::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color
sun.print.ProxyGraphics2D#getFont()->Font:::Gets the current font.
sun.print.ProxyGraphics2D#setFont(Font)->void:::Sets this graphics context's font to the specified font
sun.print.ProxyGraphics2D#getFontMetrics(Font)->FontMetrics:::Gets the font metrics for the specified font.
sun.print.ProxyGraphics2D#getFontRenderContext()->FontRenderContext:::Get the rendering context of the font within this Graphics2D context.
sun.print.ProxyGraphics2D#getClipBounds()->Rectangle:::Returns the bounding rectangle of the current clipping area
sun.print.ProxyGraphics2D#clipRect(int, int, int, int)->void:::Intersects the current clip with the specified rectangle
sun.print.ProxyGraphics2D#setClip(int, int, int, int)->void:::Sets the current clip to the rectangle specified by the given coordinates
sun.print.ProxyGraphics2D#getClip()->Shape:::Gets the current clipping area.
sun.print.ProxyGraphics2D#setClip(Shape)->void:::Sets the current clipping area to an arbitrary clip shape
sun.print.ProxyGraphics2D#copyArea(int, int, int, int, int, int)->void:::Copies an area of the component by a distance specified by dx and dy
sun.print.ProxyGraphics2D#drawLine(int, int, int, int)->void:::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.
sun.print.ProxyGraphics2D#fillRect(int, int, int, int)->void:::Fills the specified rectangle
sun.print.ProxyGraphics2D#clearRect(int, int, int, int)->void:::Clears the specified rectangle by filling it with the background color of the current drawing surface
sun.print.ProxyGraphics2D#drawRoundRect(int, int, int, int, int, int)->void:::Draws an outlined round-cornered rectangle using this graphics context's current color
sun.print.ProxyGraphics2D#fillRoundRect(int, int, int, int, int, int)->void:::Fills the specified rounded corner rectangle with the current color
sun.print.ProxyGraphics2D#drawOval(int, int, int, int)->void:::Draws the outline of an oval
sun.print.ProxyGraphics2D#fillOval(int, int, int, int)->void:::Fills an oval bounded by the specified rectangle with the current color.
sun.print.ProxyGraphics2D#drawArc(int, int, int, int, int, int)->void:::Draws the outline of a circular or elliptical arc covering the specified rectangle
sun.print.ProxyGraphics2D#fillArc(int, int, int, int, int, int)->void:::Fills a circular or elliptical arc covering the specified rectangle
sun.print.ProxyGraphics2D#drawPolyline(int[], int[], int)->void:::Draws a sequence of connected lines defined by arrays of x and y coordinates
sun.print.ProxyGraphics2D#drawPolygon(int[], int[], int)->void:::Draws a closed polygon defined by arrays of x and y coordinates
sun.print.ProxyGraphics2D#fillPolygon(int[], int[], int)->void:::Fills a closed polygon defined by arrays of x and y coordinates
sun.print.ProxyGraphics2D#drawString(String, int, int)->void:::Draws the text given by the specified string, using this graphics context's current font and color
sun.print.ProxyGraphics2D#drawString(AttributedCharacterIterator, int, int)->void:::Draws the text given by the specified iterator, using this graphics context's current color
sun.print.ProxyGraphics2D#drawString(AttributedCharacterIterator, float, float)->void:::Draws the text given by the specified iterator, using this graphics context's current color
sun.print.ProxyGraphics2D#drawImage(Image, int, int, ImageObserver)->boolean:::Draws as much of the specified image as is currently available
sun.print.ProxyGraphics2D#drawImage(Image, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
sun.print.ProxyGraphics2D#drawImage(Image, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified image as is currently available
sun.print.ProxyGraphics2D#drawImage(Image, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle
sun.print.ProxyGraphics2D#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
sun.print.ProxyGraphics2D#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean:::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface
sun.print.ProxyGraphics2D#drawRenderedImage(RenderedImage, AffineTransform)->void:::Draws an image, applying a transform from image space into user space before drawing
sun.print.ProxyGraphics2D#drawRenderableImage(RenderableImage, AffineTransform)->void::: proxy graphics2 d draw renderable image
sun.print.ProxyGraphics2D#dispose()->void:::Disposes of this graphics context and releases any system resources that it is using
sun.print.ProxyGraphics2D#finalize()->void:::Empty finalizer as no clean up needed here.
sun.print.ProxyGraphics2D#draw(Shape)->void:::Strokes the outline of a Shape using the settings of the current graphics state
sun.print.ProxyGraphics2D#drawImage(Image, AffineTransform, ImageObserver)->boolean:::Draws an image, applying a transform from image space into user space before drawing
sun.print.ProxyGraphics2D#drawImage(BufferedImage, BufferedImageOp, int, int)->void:::Draws a BufferedImage that is filtered with a BufferedImageOp
sun.print.ProxyGraphics2D#drawString(String, float, float)->void:::Draws a string of text
sun.print.ProxyGraphics2D#drawGlyphVector(GlyphVector, float, float)->void:::Draws a GlyphVector
sun.print.ProxyGraphics2D#fill(Shape)->void:::Fills the interior of a Shape using the settings of the current graphics state
sun.print.ProxyGraphics2D#hit(Rectangle, Shape, boolean)->boolean:::Checks to see if the outline of a Shape intersects the specified Rectangle in device space
sun.print.ProxyGraphics2D#setComposite(Composite)->void:::Sets the Composite in the current graphics state
sun.print.ProxyGraphics2D#setPaint(Paint)->void:::Sets the Paint in the current graphics state.
sun.print.ProxyGraphics2D#setStroke(Stroke)->void:::Sets the Stroke in the current graphics state.
sun.print.ProxyGraphics2D#setRenderingHint(Key, Object)->void:::Sets the preferences for the rendering algorithms
sun.print.ProxyGraphics2D#getRenderingHint(Key)->Object:::Returns the preferences for the rendering algorithms.
sun.print.ProxyGraphics2D#setRenderingHints(Map)->void:::Sets the preferences for the rendering algorithms
sun.print.ProxyGraphics2D#addRenderingHints(Map)->void:::Adds a number of preferences for the rendering algorithms
sun.print.ProxyGraphics2D#getRenderingHints()->RenderingHints:::Gets the preferences for the rendering algorithms
sun.print.ProxyGraphics2D#transform(AffineTransform)->void:::Composes a Transform object with the transform in this Graphics2D according to the rule last-specified-first-applied
sun.print.ProxyGraphics2D#setTransform(AffineTransform)->void:::Sets the Transform in the current graphics state.
sun.print.ProxyGraphics2D#getTransform()->AffineTransform:::Returns the current Transform in the Graphics2D state.
sun.print.ProxyGraphics2D#getPaint()->Paint:::Returns the current Paint in the Graphics2D state.
sun.print.ProxyGraphics2D#getComposite()->Composite:::Returns the current Composite in the Graphics2D state.
sun.print.ProxyGraphics2D#setBackground(Color)->void:::Sets the background color in this context used for clearing a region
sun.print.ProxyGraphics2D#getBackground()->Color:::Returns the background color used for clearing a region.
sun.print.ProxyGraphics2D#getStroke()->Stroke:::Returns the current Stroke in the Graphics2D state.
sun.print.ProxyGraphics2D#clip(Shape)->void:::Intersects the current clip with the interior of the specified Shape and sets the current clip to the resulting intersection
sun.print.ProxyPrintGraphics#getPrintJob()->PrintJob:::Returns the PrintJob object from which this PrintGraphics object originated.
sun.print.ProxyPrintGraphics#create()->Graphics:::Creates a new Graphics object that is a copy of this Graphics object.
sun.print.ProxyPrintGraphics#create(int, int, int, int)->Graphics:::Creates a new Graphics object based on this Graphics object, but with a new translation and clip area
sun.print.ProxyPrintGraphics#getGraphics()->Graphics::: proxy print graphics get graphics
sun.print.ProxyPrintGraphics#dispose()->void::: proxy print graphics dispose
sun.print.PSPathGraphics#create()->Graphics:::Creates a new Graphics object that is a copy of this Graphics object.
sun.print.PSPathGraphics#fill(Shape, Color)->void:::Override the inherited implementation of fill so that we can generate PostScript in user space rather than device space.
sun.print.PSPathGraphics#drawString(String, int, int)->void:::Draws the text given by the specified string, using this graphics context's current font and color
sun.print.PSPathGraphics#drawString(String, float, float)->void:::Renders the text specified by the specified String, using the current Font and Paint attributes in the Graphics2D context
sun.print.PSPathGraphics#canDrawStringToWidth()->boolean::: path graphics can draw string to width
sun.print.PSPathGraphics#platformFontCount(Font, String)->int::: path graphics platform font count
sun.print.PSPathGraphics#drawString(String, float, float, Font, FontRenderContext, float)->void::: path graphics draw string
sun.print.PSPathGraphics#drawImageToPlatform(Image, AffineTransform, Color, int, int, int, int, boolean)->boolean:::The various drawImage() methods for WPathGraphics are all decomposed into an invocation of drawImageToPlatform
sun.print.PSPathGraphics#redrawRegion(Rectangle2D, double, double, Shape, AffineTransform)->void::: path graphics redraw region
sun.print.PSPathGraphics#deviceFill(PathIterator, Color)->void::: path graphics device fill
sun.print.PSPathGraphics#deviceFrameRect(int, int, int, int, Color)->void::: path graphics device frame rect
sun.print.PSPathGraphics#deviceDrawLine(int, int, int, int, Color)->void::: path graphics device draw line
sun.print.PSPathGraphics#deviceFillRect(int, int, int, int, Color)->void::: path graphics device fill rect
sun.print.PSPathGraphics#deviceClip(PathIterator)->void::: path graphics device clip
sun.print.PSPrinterJob#printDialog()->boolean:::Presents the user a dialog for changing properties of the print job interactively.
sun.print.PSPrinterJob#setAttributes(PrintRequestAttributeSet)->void::: printer job set attributes
sun.print.PSPrinterJob#startDoc()->void:::Invoked by the RasterPrinterJob super class this method is called to mark the start of a document.
sun.print.PSPrinterJob#abortDoc()->void:::Invoked if the application cancelled the printjob.
sun.print.PSPrinterJob#endDoc()->void:::Invoked by the RasterPrintJob super class this method is called after that last page has been imaged.
sun.print.PSPrinterJob#startPage(PageFormat, Printable, int, boolean)->void:::The RasterPrintJob super class calls this method at the start of each page.
sun.print.PSPrinterJob#endPage(PageFormat, Printable, int)->void:::The RastePrintJob super class calls this method at the end of each page.
sun.print.PSPrinterJob#drawImageBGR(byte[], float, float, float, float, float, float, float, float, int, int)->void:::Convert the 24 bit BGR image buffer represented by image to PostScript
sun.print.PSPrinterJob#printBand(byte[], int, int, int, int)->void:::Prints the contents of the array of ints, 'data' to the current page
sun.print.PSPrinterJob#createPathGraphics(PeekGraphics, PrinterJob, Printable, PageFormat, int)->Graphics2D::: printer job create path graphics
sun.print.PSPrinterJob#selectClipPath()->void:::Intersect the gstate's current path with the current clip and make the result the new clip.
sun.print.PSPrinterJob#setClip(Shape)->void::: printer job set clip
sun.print.PSPrinterJob#setTransform(AffineTransform)->void::: printer job set transform
sun.print.PSPrinterJob#setFont(Font)->boolean:::Set the current PostScript font
sun.print.PSPrinterJob#platformFontCount(Font, String)->int::: printer job platform font count
sun.print.PSPrinterJob#textOut(Graphics, String, float, float, Font, FontRenderContext, float)->boolean::: printer job text out
sun.print.PSPrinterJob#setFillMode(int)->void:::Set the current path rule to be either FILL_EVEN_ODD (using the even-odd file rule) or FILL_WINDING (using the non-zero winding rule.)
sun.print.PSPrinterJob#setColor(Color)->void:::Set the printer's current color to be that defined by color
sun.print.PSPrinterJob#fillPath()->void:::Fill the current path using the current fill mode and color.
sun.print.PSPrinterJob#beginPath()->void:::Called to mark the start of a new path.
sun.print.PSPrinterJob#closeSubpath()->void:::Close the current subpath by appending a straight line from the current point to the subpath's starting point.
sun.print.PSPrinterJob#moveTo(float, float)->void:::Generate PostScript to move the current pen position to (x, y).
sun.print.PSPrinterJob#lineTo(float, float)->void:::Generate PostScript to draw a line from the current pen position to (x, y).
sun.print.PSPrinterJob#bezierTo(float, float, float, float, float, float)->void:::Add to the current path a bezier curve formed by the current pen position and the method parameters which are two control points and an ending point.
sun.print.PSPrinterJob#trunc(float)->String::: printer job trunc
sun.print.PSPrinterJob#getPenX()->float:::Return the x coordinate of the pen in the current path.
sun.print.PSPrinterJob#getPenY()->float:::Return the y coordinate of the pen in the current path.
sun.print.PSPrinterJob#getXRes()->double:::Return the x resolution of the coordinates to be rendered.
sun.print.PSPrinterJob#getYRes()->double:::Return the y resolution of the coordinates to be rendered.
sun.print.PSPrinterJob#setXYRes(double, double)->void:::Set the resolution at which to print.
sun.print.PSPrinterJob#getPhysicalPrintableX(Paper)->double:::For PostScript the origin is in the upper-left of the paper not at the imageable area corner.
sun.print.PSPrinterJob#getPhysicalPrintableY(Paper)->double:::For PostScript the origin is in the upper-left of the paper not at the imageable area corner.
sun.print.PSPrinterJob#getPhysicalPrintableWidth(Paper)->double::: printer job get physical printable width
sun.print.PSPrinterJob#getPhysicalPrintableHeight(Paper)->double::: printer job get physical printable height
sun.print.PSPrinterJob#getPhysicalPageWidth(Paper)->double::: printer job get physical page width
sun.print.PSPrinterJob#getPhysicalPageHeight(Paper)->double::: printer job get physical page height
sun.print.PSPrinterJob#getNoncollatedCopies()->int:::Returns how many times each page in the book should be consecutively printed by PrintJob
sun.print.PSPrinterJob#getCollatedCopies()->int::: printer job get collated copies
sun.print.PSPrinterJob#convertToPSPath(PathIterator)->void:::Given a Java2D PathIterator instance, this method translates that into a PostScript path..
sun.print.PSPrinterJob#deviceFill(PathIterator, Color, AffineTransform, Shape)->void::: printer job device fill
sun.print.PSPrinterJob.PluginPrinter#printPluginPSHeader()->void::: plugin printer print plugin header
sun.print.PSPrinterJob.PluginPrinter#printPluginApplet()->void::: plugin printer print plugin applet
sun.print.PSPrinterJob.PluginPrinter#printPluginPSTrailer()->void::: plugin printer print plugin trailer
sun.print.PSPrinterJob.PluginPrinter#printAll()->void::: plugin printer print all
sun.print.PSPrinterJob.PluginPrinter#print(Graphics, PageFormat, int)->int::: plugin printer print
sun.print.PSPrinterJob.EPSPrinter#print()->void::: printer print
sun.print.PSPrinterJob.EPSPrinter#getNumberOfPages()->int::: printer get number of pages
sun.print.PSPrinterJob.EPSPrinter#getPageFormat(int)->PageFormat::: printer get page format
sun.print.PSPrinterJob.EPSPrinter#getPrintable(int)->Printable::: printer get printable
sun.print.PSStreamPrinterFactory#getOutputFormat()->String::: stream printer factory get output format
sun.print.PSStreamPrinterFactory#getSupportedDocFlavors()->DocFlavor[]::: stream printer factory get supported doc flavors
sun.print.PSStreamPrinterFactory#getFlavors()->DocFlavor[]::: stream printer factory get flavors
sun.print.PSStreamPrinterFactory#getPrintService(OutputStream)->StreamPrintService::: stream printer factory get print service
sun.print.PSStreamPrintJob#getPrintService()->PrintService::: stream print job get print service
sun.print.PSStreamPrintJob#getAttributes()->PrintJobAttributeSet::: stream print job get attributes
sun.print.PSStreamPrintJob#addPrintJobListener(PrintJobListener)->void::: stream print job add print job listener
sun.print.PSStreamPrintJob#removePrintJobListener(PrintJobListener)->void::: stream print job remove print job listener
sun.print.PSStreamPrintJob#addPrintJobAttributeListener(PrintJobAttributeListener, PrintJobAttributeSet)->void::: stream print job add print job attribute listener
sun.print.PSStreamPrintJob#removePrintJobAttributeListener(PrintJobAttributeListener)->void::: stream print job remove print job attribute listener
sun.print.PSStreamPrintJob#print(Doc, PrintRequestAttributeSet)->void::: stream print job print
sun.print.PSStreamPrintJob#printableJob(Printable, PrintRequestAttributeSet)->void::: stream print job printable job
sun.print.PSStreamPrintJob#pageableJob(Pageable, PrintRequestAttributeSet)->void::: stream print job pageable job
sun.print.PSStreamPrintJob#cancel()->void::: stream print job cancel
sun.print.PSStreamPrintService#getOutputFormat()->String::: stream print service get output format
sun.print.PSStreamPrintService#getSupportedDocFlavors()->DocFlavor[]::: stream print service get supported doc flavors
sun.print.PSStreamPrintService#createPrintJob()->DocPrintJob::: stream print service create print job
sun.print.PSStreamPrintService#usesClass(Class)->boolean::: stream print service uses class
sun.print.PSStreamPrintService#getName()->String::: stream print service get name
sun.print.PSStreamPrintService#addPrintServiceAttributeListener(PrintServiceAttributeListener)->void::: stream print service add print service attribute listener
sun.print.PSStreamPrintService#removePrintServiceAttributeListener(PrintServiceAttributeListener)->void::: stream print service remove print service attribute listener
sun.print.PSStreamPrintService#getAttribute(Class)->T::: stream print service get attribute
sun.print.PSStreamPrintService#getAttributes()->PrintServiceAttributeSet::: stream print service get attributes
sun.print.PSStreamPrintService#isDocFlavorSupported(DocFlavor)->boolean::: stream print service is doc flavor supported
sun.print.PSStreamPrintService#getSupportedAttributeCategories()->Class[]::: stream print service get supported attribute categories
sun.print.PSStreamPrintService#isAttributeCategorySupported(Class)->boolean::: stream print service is attribute category supported
sun.print.PSStreamPrintService#getDefaultAttributeValue(Class)->Object::: stream print service get default attribute value
sun.print.PSStreamPrintService#getSupportedAttributeValues(Class, DocFlavor, AttributeSet)->Object::: stream print service get supported attribute values
sun.print.PSStreamPrintService#isAttributeValueSupported(Attribute, DocFlavor, AttributeSet)->boolean::: stream print service is attribute value supported
sun.print.PSStreamPrintService#getUnsupportedAttributes(DocFlavor, AttributeSet)->AttributeSet::: stream print service get unsupported attributes
sun.print.PSStreamPrintService#getServiceUIFactory()->ServiceUIFactory::: stream print service get service factory
sun.print.PSStreamPrintService#toString()->String::: stream print service to string
sun.print.PSStreamPrintService#equals(Object)->boolean::: stream print service equals
sun.print.PSStreamPrintService#hashCode()->int::: stream print service hash code
sun.print.RasterPrinterJob#getXRes()->double:::Returns the resolution in dots per inch across the width of the page.
sun.print.RasterPrinterJob#getYRes()->double:::Returns the resolution in dots per inch down the height of the page.
sun.print.RasterPrinterJob#getPhysicalPrintableX(Paper)->double:::Must be obtained from the current printer
sun.print.RasterPrinterJob#getPhysicalPrintableY(Paper)->double:::Must be obtained from the current printer
sun.print.RasterPrinterJob#getPhysicalPrintableWidth(Paper)->double:::Must be obtained from the current printer
sun.print.RasterPrinterJob#getPhysicalPrintableHeight(Paper)->double:::Must be obtained from the current printer
sun.print.RasterPrinterJob#getPhysicalPageWidth(Paper)->double:::Must be obtained from the current printer
sun.print.RasterPrinterJob#getPhysicalPageHeight(Paper)->double:::Must be obtained from the current printer
sun.print.RasterPrinterJob#startPage(PageFormat, Printable, int, boolean)->void:::Begin a new page.
sun.print.RasterPrinterJob#endPage(PageFormat, Printable, int)->void:::End a page.
sun.print.RasterPrinterJob#printBand(byte[], int, int, int, int)->void:::Prints the contents of the array of ints, 'data' to the current page
sun.print.RasterPrinterJob#saveState(AffineTransform, Shape, Rectangle2D, double, double)->void::: raster printer job save state
sun.print.RasterPrinterJob#lookupDefaultPrintService()->PrintService::: raster printer job lookup default print service
sun.print.RasterPrinterJob#getPrintService()->PrintService:::Returns the service (printer) for this printer job
sun.print.RasterPrinterJob#setPrintService(PrintService)->void:::Associate this PrinterJob with a new PrintService
sun.print.RasterPrinterJob#getMediaSize(Media, PrintService, PageFormat)->MediaSize::: raster printer job get media size
sun.print.RasterPrinterJob#getDefaultPrintableArea(PageFormat, double, double)->MediaPrintableArea::: raster printer job get default printable area
sun.print.RasterPrinterJob#updatePageAttributes(PrintService, PageFormat)->void::: raster printer job update page attributes
sun.print.RasterPrinterJob#updateAttributesWithPageFormat(PrintService, PageFormat, PrintRequestAttributeSet)->void::: raster printer job update attributes with page format
sun.print.RasterPrinterJob#pageDialog(PageFormat)->PageFormat:::Display a dialog to the user allowing the modification of a PageFormat instance
sun.print.RasterPrinterJob#pageDialog(PrintRequestAttributeSet)->PageFormat:::return a PageFormat corresponding to the updated attributes, or null if the user cancelled the dialog.
sun.print.RasterPrinterJob#getPageFormatFromAttributes()->PageFormat::: raster printer job get page format from attributes
sun.print.RasterPrinterJob#printDialog(PrintRequestAttributeSet)->boolean:::Presents the user a dialog for changing properties of the print job interactively
sun.print.RasterPrinterJob#printDialog()->boolean:::Presents the user a dialog for changing properties of the print job interactively.
sun.print.RasterPrinterJob#setPrintable(Printable)->void:::The pages in the document to be printed by this PrinterJob are drawn by the Printable object 'painter'
sun.print.RasterPrinterJob#setPrintable(Printable, PageFormat)->void:::The pages in the document to be printed by this PrinterJob are drawn by the Printable object 'painter'
sun.print.RasterPrinterJob#setPageable(Pageable)->void:::The pages in the document to be printed are held by the Pageable instance 'document'
sun.print.RasterPrinterJob#initPrinter()->void::: raster printer job init printer
sun.print.RasterPrinterJob#isSupportedValue(Attribute, PrintRequestAttributeSet)->boolean::: raster printer job is supported value
sun.print.RasterPrinterJob#setXYRes(double, double)->void:::Set the device resolution
sun.print.RasterPrinterJob#setAttributes(PrintRequestAttributeSet)->void::: raster printer job set attributes
sun.print.RasterPrinterJob#spoolToService(PrintService, PrintRequestAttributeSet)->void::: raster printer job spool to service
sun.print.RasterPrinterJob#print()->void:::Prints a set of pages.
sun.print.RasterPrinterJob#debug_println(String)->void::: raster printer job debug_println
sun.print.RasterPrinterJob#print(PrintRequestAttributeSet)->void::: raster printer job print
sun.print.RasterPrinterJob#validateDestination(String)->void::: raster printer job validate destination
sun.print.RasterPrinterJob#validatePaper(Paper, Paper)->void:::updates a Paper object to reflect the current printer's selected paper size and imageable area for that paper size
sun.print.RasterPrinterJob#defaultPage(PageFormat)->PageFormat:::The passed in PageFormat will be copied and altered to describe the default page size and orientation of the PrinterJob's current printer
sun.print.RasterPrinterJob#validatePage(PageFormat)->PageFormat:::The passed in PageFormat is cloned and altered to be usable on the PrinterJob's current printer.
sun.print.RasterPrinterJob#setCopies(int)->void:::Set the number of copies to be printed.
sun.print.RasterPrinterJob#getCopies()->int:::Get the number of copies to be printed.
sun.print.RasterPrinterJob#getCopiesInt()->int::: raster printer job get copies int
sun.print.RasterPrinterJob#getUserName()->String:::Get the name of the printing user
sun.print.RasterPrinterJob#getUserNameInt()->String::: raster printer job get user name int
sun.print.RasterPrinterJob#setJobName(String)->void:::Set the name of the document to be printed
sun.print.RasterPrinterJob#getJobName()->String:::Get the name of the document to be printed.
sun.print.RasterPrinterJob#getJobNameInt()->String::: raster printer job get job name int
sun.print.RasterPrinterJob#setPageRange(int, int)->void:::Set the range of pages from a Book to be printed
sun.print.RasterPrinterJob#getFirstPage()->int:::Return the zero based index of the first page to be printed in this job.
sun.print.RasterPrinterJob#getLastPage()->int:::Return the zero based index of the last page to be printed in this job.
sun.print.RasterPrinterJob#setCollated(boolean)->void:::Set whether copies should be collated or not
sun.print.RasterPrinterJob#isCollated()->boolean:::Return true if collated copies will be printed as determined in an attribute set.
sun.print.RasterPrinterJob#getSelectAttrib()->int::: raster printer job get select attrib
sun.print.RasterPrinterJob#getFromPageAttrib()->int::: raster printer job get from page attrib
sun.print.RasterPrinterJob#getToPageAttrib()->int::: raster printer job get to page attrib
sun.print.RasterPrinterJob#getMinPageAttrib()->int::: raster printer job get min page attrib
sun.print.RasterPrinterJob#getMaxPageAttrib()->int::: raster printer job get max page attrib
sun.print.RasterPrinterJob#startDoc()->void:::Called by the print() method at the start of a print job.
sun.print.RasterPrinterJob#endDoc()->void:::Called by the print() method at the end of a print job.
sun.print.RasterPrinterJob#abortDoc()->void::: raster printer job abort doc
sun.print.RasterPrinterJob#cancelDoc()->void::: raster printer job cancel doc
sun.print.RasterPrinterJob#getCollatedCopies()->int:::Returns how many times the entire book should be printed by the PrintJob
sun.print.RasterPrinterJob#getNoncollatedCopies()->int:::Returns how many times each page in the book should be consecutively printed by PrintJob
sun.print.RasterPrinterJob#setGraphicsConfigInfo(AffineTransform, double, double)->void::: raster printer job set graphics config info
sun.print.RasterPrinterJob#getPrinterGraphicsConfig()->PrinterGraphicsConfig::: raster printer job get printer graphics config
sun.print.RasterPrinterJob#printPage(Pageable, int)->int:::Print a page from the provided document.
sun.print.RasterPrinterJob#cancel()->void:::If a print job is in progress, print() has been called but has not returned, then this signals that the job should be cancelled and the next chance
sun.print.RasterPrinterJob#isCancelled()->boolean:::Returns true is a print job is ongoing but will be cancelled and the next opportunity
sun.print.RasterPrinterJob#getPageable()->Pageable:::Return the Pageable describing the pages to be printed.
sun.print.RasterPrinterJob#createPathGraphics(PeekGraphics, PrinterJob, Printable, PageFormat, int)->Graphics2D:::Examine the metrics captured by the PeekGraphics instance and if capable of directly converting this print job to the printer's control language or the native OS's graphics primitives, then return a PathGraphics to perform that conversion
sun.print.RasterPrinterJob#createPeekGraphics(Graphics2D, PrinterJob)->PeekGraphics:::Create and return an object that will gather and hold metrics about the print job
sun.print.RasterPrinterJob#initPrinterGraphics(Graphics2D, Rectangle2D)->void::: raster printer job init printer graphics
sun.print.RasterPrinterJob#checkAllowedToPrintToFile()->boolean:::User dialogs should disable "File" buttons if this returns false.
sun.print.RasterPrinterJob#removeControlChars(String)->String::: raster printer job remove control chars
sun.print.ServiceDialog#initPrintDialog(int, int, PrintService[], int, DocFlavor, PrintRequestAttributeSet)->void:::Initialize print dialog.
sun.print.ServiceDialog#initPageDialog(int, int, PrintService, DocFlavor, PrintRequestAttributeSet)->void:::Initialize "page setup" dialog
sun.print.ServiceDialog#getStatus()->int:::Returns the current status of the dialog (whether the user has selected the "Print" or "Cancel" button)
sun.print.ServiceDialog#getAttributes()->PrintRequestAttributeSet:::Returns an AttributeSet based on whether or not the user cancelled the dialog
sun.print.ServiceDialog#getPrintService()->PrintService:::Returns a PrintService based on whether or not the user cancelled the dialog
sun.print.ServiceDialog#dispose(int)->void:::Sets the current status flag for the dialog and disposes it (thus returning control of the parent frame back to the user)
sun.print.ServiceDialog#actionPerformed(ActionEvent)->void::: service dialog action performed
sun.print.ServiceDialog#initResource()->void:::Initialize ResourceBundle
sun.print.ServiceDialog#getMsg(String)->String:::Returns message string from resource
sun.print.ServiceDialog#showNoPrintService(GraphicsConfiguration)->void:::Creates a  pop-up dialog for "no print service"
sun.print.ServiceNotifier#addListener(PrintServiceAttributeListener)->void::: service notifier add listener
sun.print.ServiceNotifier#removeListener(PrintServiceAttributeListener)->void::: service notifier remove listener
sun.print.ServiceNotifier#isEmpty()->boolean::: service notifier is empty
sun.print.ServiceNotifier#stopNotifier()->void::: service notifier stop notifier
sun.print.ServiceNotifier#wake()->void::: service notifier wake
sun.print.ServiceNotifier#run()->void::: service notifier run
sun.print.SunAlternateMedia#getMedia()->Media::: sun alternate media get media
sun.print.SunAlternateMedia#getCategory()->Class::: sun alternate media get category
sun.print.SunAlternateMedia#getName()->String::: sun alternate media get name
sun.print.SunAlternateMedia#toString()->String::: sun alternate media to string
sun.print.SunAlternateMedia#hashCode()->int:::Returns a hash code value for this enumeration value
sun.print.SunMinMaxPage#getCategory()->Class::: sun min max page get category
sun.print.SunMinMaxPage#getMin()->int::: sun min max page get min
sun.print.SunMinMaxPage#getMax()->int::: sun min max page get max
sun.print.SunMinMaxPage#getName()->String::: sun min max page get name
sun.print.SunPageSelection#getCategory()->Class::: sun page selection get category
sun.print.SunPageSelection#getName()->String::: sun page selection get name
sun.print.SunPageSelection#toString()->String::: sun page selection to string
sun.print.SunPrinterJobService#usesClass(Class)->boolean:::This returns true if this service is implemented using the platform's built-in subclass of PrinterJob
sun.print.Win32MediaTray#getDMBinID()->int::: win32 media tray get bin d
sun.print.Win32MediaTray#getTraySize()->int::: win32 media tray get tray size
sun.print.Win32MediaTray#getStringTable()->String[]::: win32 media tray get string table
sun.print.Win32MediaTray#getEnumValueTable()->EnumSyntax[]::: win32 media tray get enum value table
sun.print.Win32PrintJob#getPrintService()->PrintService::: win32 print job get print service
sun.print.Win32PrintJob#getAttributes()->PrintJobAttributeSet::: win32 print job get attributes
sun.print.Win32PrintJob#addPrintJobListener(PrintJobListener)->void::: win32 print job add print job listener
sun.print.Win32PrintJob#removePrintJobListener(PrintJobListener)->void::: win32 print job remove print job listener
sun.print.Win32PrintJob#addPrintJobAttributeListener(PrintJobAttributeListener, PrintJobAttributeSet)->void::: win32 print job add print job attribute listener
sun.print.Win32PrintJob#removePrintJobAttributeListener(PrintJobAttributeListener)->void::: win32 print job remove print job attribute listener
sun.print.Win32PrintJob#print(Doc, PrintRequestAttributeSet)->void::: win32 print job print
sun.print.Win32PrintJob#printableJob(Printable)->void::: win32 print job printable job
sun.print.Win32PrintJob#pageableJob(Pageable)->void::: win32 print job pageable job
sun.print.Win32PrintJob#cancel()->void::: win32 print job cancel
sun.print.Win32PrintService#invalidateService()->void::: win32 print service invalidate service
sun.print.Win32PrintService#getName()->String::: win32 print service get name
sun.print.Win32PrintService#findPaperID(MediaSizeName)->int::: win32 print service find paper d
sun.print.Win32PrintService#findTrayID(MediaTray)->int::: win32 print service find tray d
sun.print.Win32PrintService#findMediaTray(int)->MediaTray::: win32 print service find media tray
sun.print.Win32PrintService#findWin32Media(int)->MediaSizeName::: win32 print service find win32 media
sun.print.Win32PrintService#findMatchingMediaSizeNameMM(float, float)->MediaSizeName::: win32 print service find matching media size name m
sun.print.Win32PrintService#createPrintJob()->DocPrintJob::: win32 print service create print job
sun.print.Win32PrintService#getUpdatedAttributes()->PrintServiceAttributeSet::: win32 print service get updated attributes
sun.print.Win32PrintService#wakeNotifier()->void::: win32 print service wake notifier
sun.print.Win32PrintService#addPrintServiceAttributeListener(PrintServiceAttributeListener)->void::: win32 print service add print service attribute listener
sun.print.Win32PrintService#removePrintServiceAttributeListener(PrintServiceAttributeListener)->void::: win32 print service remove print service attribute listener
sun.print.Win32PrintService#getAttribute(Class)->T::: win32 print service get attribute
sun.print.Win32PrintService#getAttributes()->PrintServiceAttributeSet::: win32 print service get attributes
sun.print.Win32PrintService#getSupportedDocFlavors()->DocFlavor[]::: win32 print service get supported doc flavors
sun.print.Win32PrintService#isDocFlavorSupported(DocFlavor)->boolean::: win32 print service is doc flavor supported
sun.print.Win32PrintService#getSupportedAttributeCategories()->Class[]::: win32 print service get supported attribute categories
sun.print.Win32PrintService#isAttributeCategorySupported(Class)->boolean::: win32 print service is attribute category supported
sun.print.Win32PrintService#getDefaultAttributeValue(Class)->Object::: win32 print service get default attribute value
sun.print.Win32PrintService#getSupportedAttributeValues(Class, DocFlavor, AttributeSet)->Object::: win32 print service get supported attribute values
sun.print.Win32PrintService#isAttributeValueSupported(Attribute, DocFlavor, AttributeSet)->boolean::: win32 print service is attribute value supported
sun.print.Win32PrintService#getUnsupportedAttributes(DocFlavor, AttributeSet)->AttributeSet::: win32 print service get unsupported attributes
sun.print.Win32PrintService#getServiceUIFactory()->ServiceUIFactory::: win32 print service get service factory
sun.print.Win32PrintService#toString()->String::: win32 print service to string
sun.print.Win32PrintService#equals(Object)->boolean::: win32 print service equals
sun.print.Win32PrintService#hashCode()->int::: win32 print service hash code
sun.print.Win32PrintService#usesClass(Class)->boolean::: win32 print service uses class
sun.print.Win32MediaSize#findMediaName(String)->Win32MediaSize::: win32 media size find media name
sun.print.Win32MediaSize#getPredefMedia()->MediaSize[]::: win32 media size get predef media
sun.print.Win32MediaSize#getDMPaper()->int::: win32 media size get paper
sun.print.Win32MediaSize#getStringTable()->String[]::: win32 media size get string table
sun.print.Win32MediaSize#getEnumValueTable()->EnumSyntax[]::: win32 media size get enum value table

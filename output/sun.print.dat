BackgroundLookupListener#notifyServices(PrintService[]):::Called once to notify that the complete list of services is retrieved:::
CustomMediaSizeName#getChoiceName():::Returns the command string for this media.:::return
CustomMediaSizeName#getStandardMedia():::Returns matching standard MediaSizeName.:::return
CustomMediaSizeName#findMedia(Media[], float, float, int):::Returns closest matching MediaSizeName among given array of Media:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->size->msn->new->MediaSizeNameArr->for->i->if->return->match->ls->tmp_ls->dim->diffx->diffy->for->i->return
CustomMediaSizeName#getSuperEnumTable():::Returns the string table for super class MediaSizeName.:::return->super->getEnumValueTable
CustomMediaSizeName#getStringTable():::Returns the string table for class CustomMediaSizeName.:::nameTable->customStringTable->size->new->StringArr->return->customStringTable->toArray
CustomMediaSizeName#getEnumValueTable():::Returns the enumeration value table for class CustomMediaSizeName.:::enumTable->customEnumTable->size->new->MediaSizeNameArr->return->customEnumTable->toArray
CustomMediaTray#getChoiceName():::Returns the command string for this media tray.:::return
CustomMediaTray#getSuperEnumTable():::Returns the string table for super class MediaTray.:::return->super->getEnumValueTable
CustomMediaTray#getStringTable():::Returns the string table for class CustomMediaTray.:::nameTable->customStringTable->size->new->StringArr->return->customStringTable->toArray
CustomMediaTray#getEnumValueTable():::Returns the enumeration value table for class CustomMediaTray.:::enumTable->customEnumTable->size->new->MediaTrayArr->return->customEnumTable->toArray
DocumentPropertiesUI#showDocumentProperties(PrinterJob, Window, PrintService, PrintRequestAttributeSet):::Invokes whatever code is needed to display a native dialog with the specified owner:::
OpenBook#getNumberOfPages():::This object does not know the number of pages.:::return
OpenBook#getPageFormat(int):::Return the PageFormat of the page specified by 'pageIndex'.:::return
OpenBook#getPrintable(int):::Return the Printable instance responsible for rendering the page specified by 'pageIndex'.:::return
PathGraphics#getPrintable():::Return the Printable instance responsible for drawing into this Graphics.:::return
PathGraphics#getPageFormat():::Return the PageFormat associated with this page of Graphics.:::return
PathGraphics#getPageIndex():::Return the page index associated with this Graphics.:::return
PathGraphics#canDoRedraws():::Return true if we are allowed to ask the application to redraw portions of the page:::return
PathGraphics#redrawRegion(Rectangle2D, double, double, Shape, AffineTransform):::Redraw a rectanglular area using a proxy graphics:::
PathGraphics#drawLine(int, int, int, int):::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.:::paint->getPaint->try->deviceTransform->getTransform->if->getClip->getClip->getPathIterator->deviceClip->deviceDrawLine->catch->throw->new->IllegalArgumentException->finally
PathGraphics#drawRect(int, int, int, int):::Draws the outline of the specified rectangle:::paint->getPaint->try->deviceTransform->getTransform->if->getClip->getClip->getPathIterator->deviceClip->deviceFrameRect->catch->throw->new->IllegalArgumentException->finally
PathGraphics#fillRect(int, int, int, int):::Fills the specified rectangle:::paint->getPaint->try->deviceTransform->getTransform->if->getClip->getClip->getPathIterator->deviceClip->deviceFillRect->catch->throw->new->IllegalArgumentException->finally
PathGraphics#clearRect(int, int, int, int):::Clears the specified rectangle by filling it with the background color of the current drawing surface:::new->Rectangle2D.Float->getBackground->fill
PathGraphics#drawRoundRect(int, int, int, int, int, int):::Draws an outlined round-cornered rectangle using this graphics context's current color:::new->RoundRectangle2D.Float->draw
PathGraphics#fillRoundRect(int, int, int, int, int, int):::Fills the specified rounded corner rectangle with the current color:::new->RoundRectangle2D.Float->fill
PathGraphics#drawOval(int, int, int, int):::Draws the outline of an oval:::new->Ellipse2D.Float->draw
PathGraphics#fillOval(int, int, int, int):::Fills an oval bounded by the specified rectangle with the current color.:::new->Ellipse2D.Float->fill
PathGraphics#drawArc(int, int, int, int, int, int):::Draws the outline of a circular or elliptical arc covering the specified rectangle:::new->Arc2D.Float->draw
PathGraphics#fillArc(int, int, int, int, int, int):::Fills a circular or elliptical arc covering the specified rectangle:::new->Arc2D.Float->fill
PathGraphics#drawPolyline(int[], int[], int):::Draws a sequence of connected lines defined by arrays of x and y coordinates:::if->new->Line2D.Float->draw->else->if->path->new->Path2D.Float->path->moveTo->for->i->draw
PathGraphics#drawPolygon(int[], int[], int):::Draws a closed polygon defined by arrays of x and y coordinates:::new->Polygon->draw
PathGraphics#drawPolygon(Polygon):::Draws the outline of a polygon defined by the specified Polygon object.:::draw
PathGraphics#fillPolygon(int[], int[], int):::Fills a closed polygon defined by arrays of x and y coordinates:::new->Polygon->fill
PathGraphics#fillPolygon(Polygon):::Fills the polygon defined by the specified Polygon object with the graphics context's current color:::fill
PathGraphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::drawString
PathGraphics#drawString(AttributedCharacterIterator, int, int):::Draws the text given by the specified iterator, using this graphics context's current color:::drawString
PathGraphics#drawGlyphVector(GlyphVector, float, float):::Draws a GlyphVector:::if->g->getOutline->fill->return->try->if->printedSimpleGlyphVector->g->getOutline->fill->catch->finally
PathGraphics#printGlyphVector(GlyphVector, float, float):::Default implementation returns false:::return
PathGraphics#draw(Shape):::Strokes the outline of a Shape using the settings of the current graphics state:::getStroke->createStrokedShape->fill
PathGraphics#fill(Shape):::Fills the interior of a Shape using the settings of the current graphics state:::paint->getPaint->try->fill->catch->throw->new->IllegalArgumentException->finally
PathGraphics#deviceFill(PathIterator, Color):::Fill the path defined by pathIter with the specified color:::
PathGraphics#hasTransparentPixels(BufferedImage):::Return true if the BufferedImage argument has non-opaque bits in it and therefore can not be directly rendered by GDI:::colorModel->bufferedImage->getColorModel->hasTransparency->colorModel->getTransparency->if->if->bufferedImage->getType->bufferedImage->getType->db->bufferedImage->getRaster->getDataBuffer->sm->bufferedImage->getRaster->getSampleModel->if->psm->int_data->SunWritableRaster->stealData->x->bufferedImage->getMinX->y->bufferedImage->getMinY->w->bufferedImage->getWidth->h->bufferedImage->getHeight->stride->psm->getScanlineStride->hastranspixel->for->j->if->return
PathGraphics#drawImageToPlatform(Image, AffineTransform, Color, int, int, int, int, boolean):::The various drawImage() methods for PathGraphics are all decomposed into an invocation of drawImageToPlatform:::
PathGraphics#drawImage(Image, int, int, ImageObserver):::Draws as much of the specified image as is currently available:::return->drawImage
PathGraphics#drawImage(Image, int, int, int, int, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::return->drawImage
PathGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::if->return->result->srcWidth->img->getWidth->srcHeight->img->getHeight->if->else->drawImage->return
PathGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::return->drawImage
PathGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::if->return->imgWidth->img->getWidth->imgHeight->img->getHeight->if->return->srcWidth->srcHeight->scalex->scaley->xForm->new->AffineTransform->tmp->if->if->if->else->if->if->else->if->if->else->if->if->else->if->if->return->return->drawImageToPlatform
PathGraphics#drawImage(Image, AffineTransform, ImageObserver):::Draws an image, applying a transform from image space into user space before drawing:::if->return->result->srcWidth->img->getWidth->srcHeight->img->getHeight->if->else->drawImageToPlatform->return
PathGraphics#drawImage(BufferedImage, BufferedImageOp, int, int):::Draws a BufferedImage that is filtered with a BufferedImageOp:::if->return->srcWidth->img->getWidth->srcHeight->img->getHeight->if->op->filter->if->return->else->xform->new->AffineTransform->drawImageToPlatform
PathGraphics#drawRenderedImage(RenderedImage, AffineTransform):::Draws an image, applying a transform from image space into user space before drawing:::if->return->bufferedImage->srcWidth->img->getWidth->srcHeight->img->getHeight->if->return->if->else->new->BufferedImage->imageGraphics->bufferedImage->createGraphics->imageGraphics->drawRenderedImage->drawImageToPlatform
PeekGraphics#getDelegate():::Return the Graphics2D object that does the drawing for this instance.:::return
PeekGraphics#setDelegate(Graphics2D):::Set the Graphics2D instance which will do the drawing.:::
PeekGraphics#setAWTDrawingOnly():::The caller promises that only AWT graphics will be drawn:::
PeekGraphics#getDrawingArea():::Return a Spans instance describing the parts of the page in to which drawing occurred.:::return
PeekGraphics#getDeviceConfiguration():::Returns the device configuration associated with this Graphics2D.:::return->getPrinterGraphicsConfig
PeekGraphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::newGraphics->try->clone->mGraphics->create->catch->finally->return
PeekGraphics#translate(int, int):::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system:::mGraphics->translate
PeekGraphics#translate(double, double):::Concatenates the current transform of this Graphics2D with a translation transformation:::mGraphics->translate
PeekGraphics#rotate(double):::Concatenates the current transform of this Graphics2D with a rotation transformation:::mGraphics->rotate
PeekGraphics#rotate(double, double, double):::Concatenates the current transform of this Graphics2D with a translated rotation transformation:::mGraphics->rotate
PeekGraphics#scale(double, double):::Concatenates the current transform of this Graphics2D with a scaling transformation:::mGraphics->scale
PeekGraphics#shear(double, double):::Concatenates the current transform of this Graphics2D with a shearing transformation:::mGraphics->shear
PeekGraphics#getColor():::Gets this graphics context's current color.:::return->mGraphics->getColor
PeekGraphics#setColor(Color):::Sets this graphics context's current color to the specified color:::mGraphics->setColor
PeekGraphics#setPaintMode():::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color:::mGraphics->setPaintMode
PeekGraphics#setXORMode(Color):::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color:::mGraphics->setXORMode
PeekGraphics#getFont():::Gets the current font.:::return->mGraphics->getFont
PeekGraphics#setFont(Font):::Sets this graphics context's font to the specified font:::mGraphics->setFont
PeekGraphics#getFontMetrics(Font):::Gets the font metrics for the specified font.:::return->mGraphics->getFontMetrics
PeekGraphics#getFontRenderContext():::Get the rendering context of the font within this Graphics2D context.:::return->mGraphics->getFontRenderContext
PeekGraphics#getClipBounds():::Returns the bounding rectangle of the current clipping area:::return->mGraphics->getClipBounds
PeekGraphics#clipRect(int, int, int, int):::Intersects the current clip with the specified rectangle:::mGraphics->clipRect
PeekGraphics#setClip(int, int, int, int):::Sets the current clip to the rectangle specified by the given coordinates:::mGraphics->setClip
PeekGraphics#getClip():::Gets the current clipping area.:::return->mGraphics->getClip
PeekGraphics#setClip(Shape):::Sets the current clipping area to an arbitrary clip shape:::mGraphics->setClip
PeekGraphics#copyArea(int, int, int, int, int, int):::Copies an area of the component by a distance specified by dx and dy:::
PeekGraphics#drawLine(int, int, int, int):::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.:::new->Line2D.Float->addStrokeShape->mPrintMetrics->draw
PeekGraphics#fillRect(int, int, int, int):::Fills the specified rectangle:::new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->fill
PeekGraphics#clearRect(int, int, int, int):::Clears the specified rectangle by filling it with the background color of the current drawing surface:::rect->new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->clear
PeekGraphics#drawRoundRect(int, int, int, int, int, int):::Draws an outlined round-cornered rectangle using this graphics context's current color:::new->RoundRectangle2D.Float->addStrokeShape->mPrintMetrics->draw
PeekGraphics#fillRoundRect(int, int, int, int, int, int):::Fills the specified rounded corner rectangle with the current color:::rect->new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->fill
PeekGraphics#drawOval(int, int, int, int):::Draws the outline of an oval:::new->Rectangle2D.Float->addStrokeShape->mPrintMetrics->draw
PeekGraphics#fillOval(int, int, int, int):::Fills an oval bounded by the specified rectangle with the current color.:::rect->new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->fill
PeekGraphics#drawArc(int, int, int, int, int, int):::Draws the outline of a circular or elliptical arc covering the specified rectangle:::new->Rectangle2D.Float->addStrokeShape->mPrintMetrics->draw
PeekGraphics#fillArc(int, int, int, int, int, int):::Fills a circular or elliptical arc covering the specified rectangle:::rect->new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->fill
PeekGraphics#drawPolyline(int[], int[], int):::Draws a sequence of connected lines defined by arrays of x and y coordinates:::if->x->y->for->i
PeekGraphics#drawPolygon(int[], int[], int):::Draws a closed polygon defined by arrays of x and y coordinates:::if->drawPolyline->drawLine
PeekGraphics#fillPolygon(int[], int[], int):::Fills a closed polygon defined by arrays of x and y coordinates:::if->minX->minY->maxX->maxY->for->i->addDrawingRect->mPrintMetrics->fill
PeekGraphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::drawString
PeekGraphics#drawString(AttributedCharacterIterator, int, int):::Draws the text given by the specified iterator, using this graphics context's current color:::drawString
PeekGraphics#drawString(AttributedCharacterIterator, float, float):::Draws the text given by the specified iterator, using this graphics context's current color:::if->throw->new->NullPointerException->layout->getFontRenderContext->new->TextLayout->layout->draw
PeekGraphics#drawImage(Image, int, int, ImageObserver):::Draws as much of the specified image as is currently available:::if->return->dim->new->ImageWaiter->dim->getWidth->dim->getHeight->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, int, int, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::if->return->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, Color, ImageObserver):::Draws as much of the specified image as is currently available:::if->return->dim->new->ImageWaiter->dim->getWidth->dim->getHeight->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::if->return->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::if->return->width->height->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::if->return->width->height->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawRenderedImage(RenderedImage, AffineTransform):::Draws an image, applying a transform from image space into user space before drawing:::if->return->mPrintMetrics->drawImage->mDrawingArea->addInfinite
PeekGraphics#dispose():::Disposes of this graphics context and releases any system resources that it is using:::mGraphics->dispose
PeekGraphics#finalize():::Empty finalizer as no clean up needed here.:::
PeekGraphics#draw(Shape):::Strokes the outline of a Shape using the settings of the current graphics state:::addStrokeShape->mPrintMetrics->draw
PeekGraphics#drawImage(Image, AffineTransform, ImageObserver):::Draws an image, applying a transform from image space into user space before drawing:::if->return->mDrawingArea->addInfinite->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(BufferedImage, BufferedImageOp, int, int):::Draws a BufferedImage that is filtered with a BufferedImageOp:::if->return->mPrintMetrics->drawImage->mDrawingArea->addInfinite
PeekGraphics#drawString(String, float, float):::Draws a string of text:::if->str->length->return->frc->getFontRenderContext->bbox->getFont->getStringBounds->addDrawingRect->mPrintMetrics->drawText
PeekGraphics#drawGlyphVector(GlyphVector, float, float):::Draws a GlyphVector:::bbox->g->getLogicalBounds->addDrawingRect->mPrintMetrics->drawText
PeekGraphics#fill(Shape):::Fills the interior of a Shape using the settings of the current graphics state:::s->getBounds->addDrawingRect->mPrintMetrics->fill
PeekGraphics#hit(Rectangle, Shape, boolean):::Checks to see if the outline of a Shape intersects the specified Rectangle in device space:::return->mGraphics->hit
PeekGraphics#setComposite(Composite):::Sets the Composite in the current graphics state:::mGraphics->setComposite
PeekGraphics#setPaint(Paint):::Sets the Paint in the current graphics state.:::mGraphics->setPaint
PeekGraphics#setStroke(Stroke):::Sets the Stroke in the current graphics state.:::mGraphics->setStroke
PeekGraphics#setRenderingHint(Key, Object):::Sets the preferences for the rendering algorithms:::mGraphics->setRenderingHint
PeekGraphics#getRenderingHint(Key):::Returns the preferences for the rendering algorithms.:::return->mGraphics->getRenderingHint
PeekGraphics#setRenderingHints(Map):::Sets the preferences for the rendering algorithms:::mGraphics->setRenderingHints
PeekGraphics#addRenderingHints(Map):::Adds a number of preferences for the rendering algorithms:::mGraphics->addRenderingHints
PeekGraphics#getRenderingHints():::Gets the preferences for the rendering algorithms:::return->mGraphics->getRenderingHints
PeekGraphics#transform(AffineTransform):::Composes a Transform object with the transform in this Graphics2D according to the rule last-specified-first-applied:::mGraphics->transform
PeekGraphics#setTransform(AffineTransform):::Sets the Transform in the current graphics state.:::mGraphics->setTransform
PeekGraphics#getTransform():::Returns the current Transform in the Graphics2D state.:::return->mGraphics->getTransform
PeekGraphics#getPaint():::Returns the current Paint in the Graphics2D state.:::return->mGraphics->getPaint
PeekGraphics#getComposite():::Returns the current Composite in the Graphics2D state.:::return->mGraphics->getComposite
PeekGraphics#setBackground(Color):::Sets the background color in this context used for clearing a region:::mGraphics->setBackground
PeekGraphics#getBackground():::Returns the background color used for clearing a region.:::return->mGraphics->getBackground
PeekGraphics#getStroke():::Returns the current Stroke in the Graphics2D state.:::return->mGraphics->getStroke
PeekGraphics#clip(Shape):::Intersects the current clip with the interior of the specified Shape and sets the current clip to the resulting intersection:::mGraphics->clip
PeekGraphics#hitsDrawingArea(Rectangle):::Return true if the Rectangle rect intersects the area into which the application has drawn.:::return->mDrawingArea->rect->getMinY->rect->getMaxY->intersects
PeekGraphics#getMetrics():::Return the object holding the summary of the drawing done by the printing application.:::return
PeekGraphics#imageUpdate(Image, int, int, int, int, int):::Notify this object when the height or width become available for an image.:::gotInfo->if->notify->return
PeekMetrics#hasNonSolidColors():::Return true if the application has done any drawing with a Paint that is not an instance of Color:::return
PeekMetrics#hasCompositing():::Return true if the application has done any drawing with an alpha other than 1.0.:::return
PeekMetrics#hasText():::Return true if the application has drawn any text.:::return
PeekMetrics#hasImages():::Return true if the application has drawn any images.:::return
PeekMetrics#fill(Graphics2D):::The application is performing a fill so record the needed information.:::checkDrawingMode
PeekMetrics#draw(Graphics2D):::The application is performing a draw so record the needed information.:::checkDrawingMode
PeekMetrics#clear(Graphics2D):::The application is performing a clearRect so record the needed information.:::g->getBackground->checkPaint
PeekMetrics#drawText(Graphics2D):::The application is drawing text so record the needed information.:::checkDrawingMode
PeekMetrics#drawText(Graphics2D, TextLayout):::The application is drawing text defined by TextLayout so record the needed information.:::checkDrawingMode
PeekMetrics#drawImage(Graphics2D, Image):::The application is drawing the passed in image.:::
PeekMetrics#drawImage(Graphics2D, RenderedImage):::The application is drawing the passed in image.:::
PeekMetrics#drawImage(Graphics2D, RenderableImage):::The application is drawing the passed in image.:::
PrinterGraphicsConfig#getDevice():::Return the graphics device associated with this configuration.:::return
PrinterGraphicsConfig#getColorModel():::Returns the color model associated with this configuration.:::if->bufImg->new->BufferedImage->bufImg->getColorModel->return
PrinterGraphicsConfig#getColorModel(int):::Returns the color model associated with this configuration that supports the specified transparency.:::switch->return->getColorModel->return->new->DirectColorModel->return->ColorModel->getRGBdefault->return
PrinterGraphicsConfig#getDefaultTransform():::Returns the default Transform for this configuration:::return->new->AffineTransform
PrinterGraphicsConfig#getNormalizingTransform():::Returns a Transform that can be composed with the default Transform of a Graphics2D so that 72 units in user space will equal 1 inch in device space:::return->new->AffineTransform
PrintJob2D#getGraphics():::Gets a Graphics object that will draw to the next page:::printGraphics->synchronized->if->graphicsToBeDrawn->isClosed->startPrinterJobThread->notify->if->graphicsDrawn->append->graphicsToBeDrawn->pop->if->setAWTDrawingOnly->graphicsDrawn->append->graphicsToBeDrawn->pop->if->currentGraphics->pageFormat->getImageableX->pageFormat->getImageableY->translate->awtScale->getPageResolutionInternal->currentGraphics->scale->currentGraphics->create->new->ProxyPrintGraphics->return
PrintJob2D#getPageDimension():::Returns the dimensions of the page in pixels:::wid->hgt->scale->if->pageAttributes->getOrigin->pageFormat->getImageableWidth->pageFormat->getImageableHeight->else->pageFormat->getWidth->pageFormat->getHeight->getPageResolutionInternal->return->new->Dimension
PrintJob2D#getPageResolution():::Returns the resolution of the page in pixels per inch:::return->getPageResolutionInternal
PrintJob2D#lastPageFirst():::Returns true if the last page will be printed first.:::return
PrintJob2D#end():::Ends the print job and does any necessary cleanup.:::graphicsToBeDrawn->close->if->graphicsDrawn->append->graphicsDrawn->closeWhenEmpty->if->printerJobThread->isAlive->try->printerJobThread->join->catch->finally
PrintJob2D#finalize():::Ends this print job once it is no longer referenced.:::end
PrintJob2D#print(Graphics, PageFormat, int):::Prints the page at the specified index into the specified Graphics context in the specified format:::result->graphicsToBeDrawn->append->if->graphicsDrawn->pop->else->return
ProxyGraphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::return->g->create->new->ProxyGraphics
ProxyGraphics#create(int, int, int, int):::Creates a new Graphics object based on this Graphics object, but with a new translation and clip area:::return->g->create->new->ProxyGraphics
ProxyGraphics#translate(int, int):::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system:::g->translate
ProxyGraphics#getColor():::Gets this graphics context's current color.:::return->g->getColor
ProxyGraphics#setColor(Color):::Sets this graphics context's current color to the specified color:::g->setColor
ProxyGraphics#setPaintMode():::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color:::g->setPaintMode
ProxyGraphics#setXORMode(Color):::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color:::g->setXORMode
ProxyGraphics#getFont():::Gets the current font.:::return->g->getFont
ProxyGraphics#setFont(Font):::Sets this graphics context's font to the specified font:::g->setFont
ProxyGraphics#getFontMetrics():::Gets the font metrics of the current font.:::return->g->getFontMetrics
ProxyGraphics#getFontMetrics(Font):::Gets the font metrics for the specified font.:::return->g->getFontMetrics
ProxyGraphics#getClipBounds():::Returns the bounding rectangle of the current clipping area:::return->g->getClipBounds
ProxyGraphics#clipRect(int, int, int, int):::Intersects the current clip with the specified rectangle:::g->clipRect
ProxyGraphics#setClip(int, int, int, int):::Sets the current clip to the rectangle specified by the given coordinates:::g->setClip
ProxyGraphics#getClip():::Gets the current clipping area:::return->g->getClip
ProxyGraphics#setClip(Shape):::Sets the current clipping area to an arbitrary clip shape:::g->setClip
ProxyGraphics#copyArea(int, int, int, int, int, int):::Copies an area of the component by a distance specified by dx and dy:::g->copyArea
ProxyGraphics#drawLine(int, int, int, int):::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.:::g->drawLine
ProxyGraphics#fillRect(int, int, int, int):::Fills the specified rectangle:::g->fillRect
ProxyGraphics#drawRect(int, int, int, int):::Draws the outline of the specified rectangle:::g->drawRect
ProxyGraphics#clearRect(int, int, int, int):::Clears the specified rectangle by filling it with the background color of the current drawing surface:::g->clearRect
ProxyGraphics#drawRoundRect(int, int, int, int, int, int):::Draws an outlined round-cornered rectangle using this graphics context's current color:::g->drawRoundRect
ProxyGraphics#fillRoundRect(int, int, int, int, int, int):::Fills the specified rounded corner rectangle with the current color:::g->fillRoundRect
ProxyGraphics#draw3DRect(int, int, int, int, boolean):::Draws a 3-D highlighted outline of the specified rectangle:::g->draw3DRect
ProxyGraphics#fill3DRect(int, int, int, int, boolean):::Paints a 3-D highlighted rectangle filled with the current color:::g->fill3DRect
ProxyGraphics#drawOval(int, int, int, int):::Draws the outline of an oval:::g->drawOval
ProxyGraphics#fillOval(int, int, int, int):::Fills an oval bounded by the specified rectangle with the current color.:::g->fillOval
ProxyGraphics#drawArc(int, int, int, int, int, int):::Draws the outline of a circular or elliptical arc covering the specified rectangle:::g->drawArc
ProxyGraphics#fillArc(int, int, int, int, int, int):::Fills a circular or elliptical arc covering the specified rectangle:::g->fillArc
ProxyGraphics#drawPolyline(int[], int[], int):::Draws a sequence of connected lines defined by arrays of x and y coordinates:::g->drawPolyline
ProxyGraphics#drawPolygon(int[], int[], int):::Draws a closed polygon defined by arrays of x and y coordinates:::g->drawPolygon
ProxyGraphics#drawPolygon(Polygon):::Draws the outline of a polygon defined by the specified Polygon object.:::g->drawPolygon
ProxyGraphics#fillPolygon(int[], int[], int):::Fills a closed polygon defined by arrays of x and y coordinates:::g->fillPolygon
ProxyGraphics#fillPolygon(Polygon):::Fills the polygon defined by the specified Polygon object with the graphics context's current color:::g->fillPolygon
ProxyGraphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::g->drawString
ProxyGraphics#drawString(AttributedCharacterIterator, int, int):::Draws the text given by the specified iterator, using this graphics context's current color:::g->drawString
ProxyGraphics#drawChars(char[], int, int, int, int):::Draws the text given by the specified character array, using this graphics context's current font and color:::g->drawChars
ProxyGraphics#drawBytes(byte[], int, int, int, int):::Draws the text given by the specified byte array, using this graphics context's current font and color:::g->drawBytes
ProxyGraphics#drawImage(Image, int, int, ImageObserver):::Draws as much of the specified image as is currently available:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, int, int, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, Color, ImageObserver):::Draws as much of the specified image as is currently available:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::return->g->drawImage
ProxyGraphics#dispose():::Disposes of this graphics context and releases any system resources that it is using:::g->dispose
ProxyGraphics#finalize():::Empty finalizer as no clean up needed here.:::
ProxyGraphics#toString():::Returns a String object representing this                        Graphics object's value.:::return->getClass->getName->getFont->getColor
ProxyGraphics#hitClip(int, int, int, int):::Returns true if the specified rectangular area intersects the bounding rectangle of the current clipping area:::return->g->hitClip
ProxyGraphics#getClipBounds(Rectangle):::Returns the bounding rectangle of the current clipping area:::return->g->getClipBounds
ProxyGraphics2D#getDelegate():::Return the Graphics2D object that does the drawing for this instance.:::return
ProxyGraphics2D#setDelegate(Graphics2D):::Set the Graphics2D instance which will do the drawing.:::
ProxyGraphics2D#getDeviceConfiguration():::Returns the device configuration associated with this Graphics2D.:::return->getPrinterGraphicsConfig
ProxyGraphics2D#create():::Creates a new Graphics object that is a copy of this Graphics object.:::return->mGraphics->create->new->ProxyGraphics2D
ProxyGraphics2D#translate(int, int):::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system:::mGraphics->translate
ProxyGraphics2D#translate(double, double):::Concatenates the current transform of this Graphics2D with a translation transformation:::mGraphics->translate
ProxyGraphics2D#rotate(double):::Concatenates the current transform of this Graphics2D with a rotation transformation:::mGraphics->rotate
ProxyGraphics2D#rotate(double, double, double):::Concatenates the current transform of this Graphics2D with a translated rotation transformation:::mGraphics->rotate
ProxyGraphics2D#scale(double, double):::Concatenates the current transform of this Graphics2D with a scaling transformation:::mGraphics->scale
ProxyGraphics2D#shear(double, double):::Concatenates the current transform of this Graphics2D with a shearing transformation:::mGraphics->shear
ProxyGraphics2D#getColor():::Gets this graphics context's current color.:::return->mGraphics->getColor
ProxyGraphics2D#setColor(Color):::Sets this graphics context's current color to the specified color:::mGraphics->setColor
ProxyGraphics2D#setPaintMode():::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color:::mGraphics->setPaintMode
ProxyGraphics2D#setXORMode(Color):::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color:::mGraphics->setXORMode
ProxyGraphics2D#getFont():::Gets the current font.:::return->mGraphics->getFont
ProxyGraphics2D#setFont(Font):::Sets this graphics context's font to the specified font:::mGraphics->setFont
ProxyGraphics2D#getFontMetrics(Font):::Gets the font metrics for the specified font.:::return->mGraphics->getFontMetrics
ProxyGraphics2D#getFontRenderContext():::Get the rendering context of the font within this Graphics2D context.:::return->mGraphics->getFontRenderContext
ProxyGraphics2D#getClipBounds():::Returns the bounding rectangle of the current clipping area:::return->mGraphics->getClipBounds
ProxyGraphics2D#clipRect(int, int, int, int):::Intersects the current clip with the specified rectangle:::mGraphics->clipRect
ProxyGraphics2D#setClip(int, int, int, int):::Sets the current clip to the rectangle specified by the given coordinates:::mGraphics->setClip
ProxyGraphics2D#getClip():::Gets the current clipping area.:::return->mGraphics->getClip
ProxyGraphics2D#setClip(Shape):::Sets the current clipping area to an arbitrary clip shape:::mGraphics->setClip
ProxyGraphics2D#copyArea(int, int, int, int, int, int):::Copies an area of the component by a distance specified by dx and dy:::mGraphics->copyArea
ProxyGraphics2D#drawLine(int, int, int, int):::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.:::mGraphics->drawLine
ProxyGraphics2D#fillRect(int, int, int, int):::Fills the specified rectangle:::mGraphics->fillRect
ProxyGraphics2D#clearRect(int, int, int, int):::Clears the specified rectangle by filling it with the background color of the current drawing surface:::mGraphics->clearRect
ProxyGraphics2D#drawRoundRect(int, int, int, int, int, int):::Draws an outlined round-cornered rectangle using this graphics context's current color:::mGraphics->drawRoundRect
ProxyGraphics2D#fillRoundRect(int, int, int, int, int, int):::Fills the specified rounded corner rectangle with the current color:::mGraphics->fillRoundRect
ProxyGraphics2D#drawOval(int, int, int, int):::Draws the outline of an oval:::mGraphics->drawOval
ProxyGraphics2D#fillOval(int, int, int, int):::Fills an oval bounded by the specified rectangle with the current color.:::mGraphics->fillOval
ProxyGraphics2D#drawArc(int, int, int, int, int, int):::Draws the outline of a circular or elliptical arc covering the specified rectangle:::mGraphics->drawArc
ProxyGraphics2D#fillArc(int, int, int, int, int, int):::Fills a circular or elliptical arc covering the specified rectangle:::mGraphics->fillArc
ProxyGraphics2D#drawPolyline(int[], int[], int):::Draws a sequence of connected lines defined by arrays of x and y coordinates:::mGraphics->drawPolyline
ProxyGraphics2D#drawPolygon(int[], int[], int):::Draws a closed polygon defined by arrays of x and y coordinates:::mGraphics->drawPolygon
ProxyGraphics2D#fillPolygon(int[], int[], int):::Fills a closed polygon defined by arrays of x and y coordinates:::mGraphics->fillPolygon
ProxyGraphics2D#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::mGraphics->drawString
ProxyGraphics2D#drawString(AttributedCharacterIterator, int, int):::Draws the text given by the specified iterator, using this graphics context's current color:::mGraphics->drawString
ProxyGraphics2D#drawString(AttributedCharacterIterator, float, float):::Draws the text given by the specified iterator, using this graphics context's current color:::mGraphics->drawString
ProxyGraphics2D#drawImage(Image, int, int, ImageObserver):::Draws as much of the specified image as is currently available:::return->mGraphics->drawImage
ProxyGraphics2D#drawImage(Image, int, int, int, int, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::return->mGraphics->drawImage
ProxyGraphics2D#drawImage(Image, int, int, Color, ImageObserver):::Draws as much of the specified image as is currently available:::if->return->result->if->needToCopyBgColorImage->imageCopy->getBufferedImageCopy->mGraphics->drawImage->else->mGraphics->drawImage->return
ProxyGraphics2D#drawImage(Image, int, int, int, int, Color, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::if->return->result->if->needToCopyBgColorImage->imageCopy->getBufferedImageCopy->mGraphics->drawImage->else->mGraphics->drawImage->return
ProxyGraphics2D#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::return->mGraphics->drawImage
ProxyGraphics2D#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::if->return->result->if->needToCopyBgColorImage->imageCopy->getBufferedImageCopy->mGraphics->drawImage->else->mGraphics->drawImage->return
ProxyGraphics2D#drawRenderedImage(RenderedImage, AffineTransform):::Draws an image, applying a transform from image space into user space before drawing:::mGraphics->drawRenderedImage
ProxyGraphics2D#dispose():::Disposes of this graphics context and releases any system resources that it is using:::mGraphics->dispose
ProxyGraphics2D#finalize():::Empty finalizer as no clean up needed here.:::
ProxyGraphics2D#draw(Shape):::Strokes the outline of a Shape using the settings of the current graphics state:::mGraphics->draw
ProxyGraphics2D#drawImage(Image, AffineTransform, ImageObserver):::Draws an image, applying a transform from image space into user space before drawing:::return->mGraphics->drawImage
ProxyGraphics2D#drawImage(BufferedImage, BufferedImageOp, int, int):::Draws a BufferedImage that is filtered with a BufferedImageOp:::mGraphics->drawImage
ProxyGraphics2D#drawString(String, float, float):::Draws a string of text:::mGraphics->drawString
ProxyGraphics2D#drawGlyphVector(GlyphVector, float, float):::Draws a GlyphVector:::mGraphics->drawGlyphVector
ProxyGraphics2D#fill(Shape):::Fills the interior of a Shape using the settings of the current graphics state:::mGraphics->fill
ProxyGraphics2D#hit(Rectangle, Shape, boolean):::Checks to see if the outline of a Shape intersects the specified Rectangle in device space:::return->mGraphics->hit
ProxyGraphics2D#setComposite(Composite):::Sets the Composite in the current graphics state:::mGraphics->setComposite
ProxyGraphics2D#setPaint(Paint):::Sets the Paint in the current graphics state.:::mGraphics->setPaint
ProxyGraphics2D#setStroke(Stroke):::Sets the Stroke in the current graphics state.:::mGraphics->setStroke
ProxyGraphics2D#setRenderingHint(Key, Object):::Sets the preferences for the rendering algorithms:::mGraphics->setRenderingHint
ProxyGraphics2D#getRenderingHint(Key):::Returns the preferences for the rendering algorithms.:::return->mGraphics->getRenderingHint
ProxyGraphics2D#setRenderingHints(Map):::Sets the preferences for the rendering algorithms:::mGraphics->setRenderingHints
ProxyGraphics2D#addRenderingHints(Map):::Adds a number of preferences for the rendering algorithms:::mGraphics->addRenderingHints
ProxyGraphics2D#getRenderingHints():::Gets the preferences for the rendering algorithms:::return->mGraphics->getRenderingHints
ProxyGraphics2D#transform(AffineTransform):::Composes a Transform object with the transform in this Graphics2D according to the rule last-specified-first-applied:::mGraphics->transform
ProxyGraphics2D#setTransform(AffineTransform):::Sets the Transform in the current graphics state.:::mGraphics->setTransform
ProxyGraphics2D#getTransform():::Returns the current Transform in the Graphics2D state.:::return->mGraphics->getTransform
ProxyGraphics2D#getPaint():::Returns the current Paint in the Graphics2D state.:::return->mGraphics->getPaint
ProxyGraphics2D#getComposite():::Returns the current Composite in the Graphics2D state.:::return->mGraphics->getComposite
ProxyGraphics2D#setBackground(Color):::Sets the background color in this context used for clearing a region:::mGraphics->setBackground
ProxyGraphics2D#getBackground():::Returns the background color used for clearing a region.:::return->mGraphics->getBackground
ProxyGraphics2D#getStroke():::Returns the current Stroke in the Graphics2D state.:::return->mGraphics->getStroke
ProxyGraphics2D#clip(Shape):::Intersects the current clip with the interior of the specified Shape and sets the current clip to the resulting intersection:::mGraphics->clip
ProxyPrintGraphics#getPrintJob():::Returns the PrintJob object from which this PrintGraphics object originated.:::return
ProxyPrintGraphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::return->getGraphics->create->new->ProxyPrintGraphics
ProxyPrintGraphics#create(int, int, int, int):::Creates a new Graphics object based on this Graphics object, but with a new translation and clip area:::g->getGraphics->create->return->new->ProxyPrintGraphics
PSPathGraphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::return->getDelegate->create->getPrinterJob->getPrintable->getPageFormat->getPageIndex->canDoRedraws->new->PSPathGraphics
PSPathGraphics#fill(Shape, Color):::Override the inherited implementation of fill so that we can generate PostScript in user space rather than device space.:::s->new->AffineTransform->getPathIterator->deviceFill
PSPathGraphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::drawString
PSPathGraphics#drawString(String, float, float):::Renders the text specified by the specified String, using the current Font and Paint attributes in the Graphics2D context:::getFont->getFontRenderContext->drawString
PSPathGraphics#drawImageToPlatform(Image, AffineTransform, Color, int, int, int, int, boolean):::The various drawImage() methods for WPathGraphics are all decomposed into an invocation of drawImageToPlatform:::img->getBufferedImage->if->return->psPrinterJob->getPrinterJob->fullTransform->getTransform->if->new->AffineTransform->fullTransform->concatenate->fullMatrix->new->doubleArr->fullTransform->getMatrix->unitVectorX->new->Point2D.Float->unitVectorY->new->Point2D.Float->fullTransform->deltaTransform->fullTransform->deltaTransform->origin->new->Point2D.Float->scaleX->unitVectorX->distance->scaleY->unitVectorY->distance->devResX->psPrinterJob->getXRes->devResY->psPrinterJob->getYRes->devScaleX->devScaleY->transformType->fullTransform->getType->clampScale->if->if->if->if->rotTransform->new->AffineTransform->srcRect->new->Rectangle2D.Float->rotShape->rotTransform->createTransformedShape->rotBounds->rotShape->getBounds2D->rotBounds->rotBounds->getX->rotBounds->getY->rotBounds->getWidth->rotBounds->getHeight->setRect->boundsWidth->rotBounds->getWidth->boundsHeight->rotBounds->getHeight->if->drawOpaque->if->hasTransparentPixels->if->isBitmaskTransparency->if->if->drawBitmaskImage->return->else->if->bgcolor->getTransparency->if->canDoRedraws->else->if->img->getWidth->img->getHeight->canDoRedraws->if->fullTransform->getMatrix->tx->new->AffineTransform->rect->new->Rectangle2D.Float->shape->fullTransform->createTransformedShape->region->shape->getBounds2D->region->region->getX->region->getY->region->getWidth->region->getHeight->setRect->w->region->getWidth->h->region->getHeight->nbytes->maxBytes->origDpi->dpi->scaleFactor->maxSFX->maxSFY->maxSF->minDpi->if->while->if->region->region->getX->region->getY->region->getWidth->region->getHeight->setRect->psPrinterJob->getTransform->getClip->saveState->return->else->deepImage->rotBounds->getWidth->rotBounds->getHeight->new->BufferedImage->imageGraphics->deepImage->createGraphics->imageGraphics->deepImage->getWidth->deepImage->getHeight->clipRect->imageGraphics->rotBounds->getX->rotBounds->getY->translate->imageGraphics->transform->if->imageGraphics->drawImage->holdClip->getClip->oldClip->getTransform->createTransformedShape->sat->AffineTransform->getScaleInstance->imgClip->sat->createTransformedShape->imgArea->new->Area->oldArea->new->Area->imgArea->intersect->psPrinterJob->setClip->scaledBounds->rotBounds->getX->rotBounds->getY->rotBounds->getWidth->rotBounds->getHeight->new->Rectangle2D.Float->tile->deepImage->getRaster->psPrinterJob->tile->getDataStorage->Math->rint->Math->rint->deepImage->getWidth->deepImage->getHeight->deepImage->getWidth->deepImage->getHeight->drawImageBGR->psPrinterJob->getTransform->createTransformedShape->setClip->imageGraphics->dispose->return
PSPrinterJob#printDialog():::Presents the user a dialog for changing properties of the print job interactively.:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->if->new->HashPrintRequestAttributeSet->attributes->getCopies->new->Copies->add->attributes->getJobName->new->JobName->add->doPrint->dts->attributes->get->if->attributes->remove->printDialog->attributes->add->else->printDialog->if->jobName->attributes->get->if->jobName->getValue->setJobName->copies->attributes->get->if->copies->getValue->setCopies->dest->attributes->get->if->try->dest->getURI->new->File->getPath->catch->finally->else->pServ->getPrintService->if->pServ->getName->if->psaSet->pServ->getAttributes->if->psaSet->get->toString->return
PSPrinterJob#startDoc():::Invoked by the RasterPrinterJob super class this method is called to mark the start of a document.:::output->if->if->getPrintService->sps->getPrintService->if->sps->isDisposed->throw->new->PrinterException->sps->getOutputStream->if->throw->new->PrinterException->else->if->if->try->new->File->new->FileOutputStream->catch->abortDoc->throw->new->PrinterIOException->finally->else->po->new->PrinterOpener->doPrivileged->if->throw->new->BufferedOutputStream->new->PrintStream->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->if->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->else->cnt->Integer->mFontProps->getProperty->parseInt->for->i->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->if->pageFormat->getPageable->getPageFormat->paperHeight->pageFormat->getPaper->getHeight->paperWidth->pageFormat->getPaper->getWidth->mPSStream->print->pservice->getPrintService->isPS->new->java.security.PrivilegedAction<Boolean>->doPrivileged->if->mPSStream->print->mPSStream->print->mPSStream->isCollated->print->mPSStream->getCopiesInt->print->if->if->mPSStream->print->else->if->mPSStream->print->mPSStream->println->mPSStream->println
PSPrinterJob#abortDoc():::Invoked if the application cancelled the printjob.:::if->mPSStream->close->new->java.security.PrivilegedAction<Object>->doPrivileged
PSPrinterJob#endDoc():::Invoked by the RasterPrintJob super class this method is called after that last page has been imaged.:::if->mPSStream->println->mPSStream->flush->if->mPSStream->checkError->abortDoc->throw->new->PrinterException->if->mPSStream->close->if->pServ->getPrintService->if->pServ->getName->if->psaSet->pServ->getAttributes->if->psaSet->get->toString->spooler->new->PrinterSpooler->doPrivileged->if->throw
PSPrinterJob#startPage(PageFormat, Printable, int, boolean):::The RasterPrintJob super class calls this method at the start of each page.:::paperHeight->pageFormat->getPaper->getHeight->paperWidth->pageFormat->getPaper->getWidth->pageNumber->new->ArrayList<>->mGStateStack->new->GState->add->mPSStream->println->if->mPSStream->print->pservice->getPrintService->isPS->new->java.security.PrivilegedAction<Boolean>->doPrivileged->if->mPSStream->print->mPSStream->println->mPSStream->println->mPSStream->getCoordPrep->println
PSPrinterJob#endPage(PageFormat, Printable, int):::The RastePrintJob super class calls this method at the end of each page.:::mPSStream->println->mPSStream->println
PSPrinterJob#drawImageBGR(byte[], float, float, float, float, float, float, float, float, int, int):::Convert the 24 bit BGR image buffer represented by image to PostScript:::new->AffineTransform->setTransform->prepDrawing->intSrcWidth->intSrcHeight->mPSStream->println->psBytesPerRow->while->mPSStream->println->mPSStream->println->mPSStream->println->index->rgbData->new->byteArr->try->for->i->catch->finally->mPSStream->println
PSPrinterJob#printBand(byte[], int, int, int, int):::Prints the contents of the array of ints, 'data' to the current page:::mPSStream->println->psBytesPerRow->while->mPSStream->println->mPSStream->println->mPSStream->println->index->rgbData->new->byteArr->try->for->i->catch->throw->new->PrinterIOException->finally->mPSStream->println
PSPrinterJob#selectClipPath():::Intersect the gstate's current path with the current clip and make the result the new clip.:::mPSStream->println
PSPrinterJob#setFont(Font):::Set the current PostScript font:::return
PSPrinterJob#setFillMode(int):::Set the current path rule to be either FILL_EVEN_ODD (using the even-odd file rule) or FILL_WINDING (using the non-zero winding rule.):::switch->break->break->throw->new->IllegalArgumentException
PSPrinterJob#setColor(Color):::Set the printer's current color to be that defined by color:::
PSPrinterJob#fillPath():::Fill the current path using the current fill mode and color.:::mPSStream->println
PSPrinterJob#beginPath():::Called to mark the start of a new path.:::prepDrawing->mPSStream->println
PSPrinterJob#closeSubpath():::Close the current subpath by appending a straight line from the current point to the subpath's starting point.:::mPSStream->println
PSPrinterJob#moveTo(float, float):::Generate PostScript to move the current pen position to (x, y).:::mPSStream->trunc->trunc->println
PSPrinterJob#lineTo(float, float):::Generate PostScript to draw a line from the current pen position to (x, y).:::mPSStream->trunc->trunc->println
PSPrinterJob#bezierTo(float, float, float, float, float, float):::Add to the current path a bezier curve formed by the current pen position and the method parameters which are two control points and an ending point.:::mPSStream->trunc->trunc->trunc->trunc->trunc->trunc->println
PSPrinterJob#getPenX():::Return the x coordinate of the pen in the current path.:::return
PSPrinterJob#getPenY():::Return the y coordinate of the pen in the current path.:::return
PSPrinterJob#getXRes():::Return the x resolution of the coordinates to be rendered.:::return
PSPrinterJob#getYRes():::Return the y resolution of the coordinates to be rendered.:::return
PSPrinterJob#setXYRes(double, double):::Set the resolution at which to print.:::
PSPrinterJob#getPhysicalPrintableX(Paper):::For PostScript the origin is in the upper-left of the paper not at the imageable area corner.:::return
PSPrinterJob#getPhysicalPrintableY(Paper):::For PostScript the origin is in the upper-left of the paper not at the imageable area corner.:::return
PSPrinterJob#getNoncollatedCopies():::Returns how many times each page in the book should be consecutively printed by PrintJob:::return
PSPrinterJob#convertToPSPath(PathIterator):::Given a Java2D PathIterator instance, this method translates that into a PostScript path..:::segment->new->floatArr->segmentType->fillRule->if->pathIter->getWindingRule->else->beginPath->setFillMode->while->pathIter->isDone->pathIter->currentSegment->switch->moveTo->break->lineTo->break->lastX->getPenX->lastY->getPenY->c1x->c1y->c2x->c2y->bezierTo->break->bezierTo->break->closeSubpath->break->pathIter->next
RasterPrinterJob#getXRes():::Returns the resolution in dots per inch across the width of the page.:::
RasterPrinterJob#getYRes():::Returns the resolution in dots per inch down the height of the page.:::
RasterPrinterJob#getPhysicalPrintableX(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPrintableY(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPrintableWidth(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPrintableHeight(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPageWidth(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPageHeight(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#startPage(PageFormat, Printable, int, boolean):::Begin a new page.:::
RasterPrinterJob#endPage(PageFormat, Printable, int):::End a page.:::
RasterPrinterJob#printBand(byte[], int, int, int, int):::Prints the contents of the array of ints, 'data' to the current page:::
RasterPrinterJob#getPrintService():::Returns the service (printer) for this printer job:::if->svc->PrintServiceLookup->lookupDefaultPrintService->if->svc->isDocFlavorSupported->try->setPrintService->catch->finally->if->svcs->PrintServiceLookup->lookupPrintServices->if->try->setPrintService->catch->finally->return
RasterPrinterJob#setPrintService(PrintService):::Associate this PrinterJob with a new PrintService:::if->throw->new->PrinterException->else->if->service->getName->throw->new->PrinterException->else->prnState->service->getAttribute->if->prnStateReasons->service->getAttribute->if->prnStateReasons->containsKey->throw->new->PrinterException->if->service->isDocFlavorSupported->service->isDocFlavorSupported->else->throw->new->PrinterException
RasterPrinterJob#pageDialog(PageFormat):::Display a dialog to the user allowing the modification of a PageFormat instance:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->gc->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->service->new->java.security.PrivilegedAction<PrintService>->doPrivileged->if->return->updatePageAttributes->newPage->dts->attributes->get->if->attributes->remove->pageDialog->attributes->add->else->pageDialog->if->return->else->return
RasterPrinterJob#pageDialog(PrintRequestAttributeSet):::return a PageFormat corresponding to the updated attributes, or null if the user cancelled the dialog.:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->dlg->attributes->get->if->pservice->getPrintService->pageFrmAttrib->attributeToPageFormat->setParentWindowID->page->pageDialog->clearParentWindowID->if->return->updateAttributesWithPageFormat->return->grCfg->w->KeyboardFocusManager->getCurrentKeyboardFocusManager->getActiveWindow->if->w->getGraphicsConfiguration->else->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->gc->service->new->java.security.PrivilegedAction<PrintService>->doPrivileged->if->return->gcBounds->gc->getBounds->x->y->pageDialog->setOnTop->if->attributes->add->owner->onTop->getOwner->if->else->if->DialogOwnerAccessor->getID->new->ServiceDialog->if->try->pageDialog->setAlwaysOnTop->catch->finally->dlgBounds->pageDialog->getBounds->if->gcBounds->contains->if->if->else->if->if->else->pageDialog->setBounds->pageDialog->show->if->pageDialog->getStatus->newas->pageDialog->getAttributes->amCategory->if->attributes->containsKey->newas->containsKey->attributes->remove->attributes->addAll->return->attributeToPageFormat->else->return
RasterPrinterJob#printDialog(PrintRequestAttributeSet):::Presents the user a dialog for changing properties of the print job interactively:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->dlg->attributes->get->if->try->debug_println->setAttributes->catch->finally->setParentWindowID->ret->printDialog->clearParentWindowID->return->grCfg->w->KeyboardFocusManager->getCurrentKeyboardFocusManager->getActiveWindow->if->w->getGraphicsConfiguration->if->attributes->get->attributes->new->DialogOwner->add->else->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->gc->service->new->java.security.PrivilegedAction<PrintService>->doPrivileged->if->return->services->spsFactories->if->lookupStreamPrintServices->new->StreamPrintServiceArr->for->i->else->new->java.security.PrivilegedAction<PrintService[]>->doPrivileged->if->new->PrintServiceArr->x->y->newService->jobWrapper->new->PrinterJobWrapper->attributes->add->pgRng->attributes->get->if->mDocument->getNumberOfPages->attributes->mDocument->getNumberOfPages->new->PageRanges->add->try->ServiceUI->printDialog->catch->ServiceUI->printDialog->finally->attributes->remove->attributes->remove->if->return->if->service->equals->try->setPrintService->catch->finally->return
RasterPrinterJob#printDialog():::Presents the user a dialog for changing properties of the print job interactively.:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->attributes->new->HashPrintRequestAttributeSet->attributes->getCopies->new->Copies->add->attributes->getJobName->new->JobName->add->doPrint->printDialog->if->jobName->attributes->get->if->jobName->getValue->setJobName->copies->attributes->get->if->copies->getValue->setCopies->dest->attributes->get->if->try->dest->getURI->new->File->getPath->catch->ps->getPrintService->if->defaultDest->ps->getDefaultAttributeValue->if->defaultDest->getURI->new->File->getPath->finally->else->ps->getPrintService->if->ps->getName->return
RasterPrinterJob#setPrintable(Printable):::The pages in the document to be printed by this PrinterJob are drawn by the Printable object 'painter':::new->PageFormat->defaultPage->new->OpenBook->setPageable
RasterPrinterJob#setPrintable(Printable, PageFormat):::The pages in the document to be printed by this PrinterJob are drawn by the Printable object 'painter':::new->OpenBook->setPageable->getPrintService->updatePageAttributes
RasterPrinterJob#setPageable(Pageable):::The pages in the document to be printed are held by the Pageable instance 'document':::if->else->throw->new->NullPointerException
RasterPrinterJob#setXYRes(double, double):::Set the device resolution:::
RasterPrinterJob#print():::Prints a set of pages.:::print
RasterPrinterJob#validatePaper(Paper, Paper):::updates a Paper object to reflect the current printer's selected paper size and imageable area for that paper size:::if->return->else->wid->origPaper->getWidth->hgt->origPaper->getHeight->ix->origPaper->getImageableX->iy->origPaper->getImageableY->iw->origPaper->getImageableWidth->ih->origPaper->getImageableHeight->defaultPaper->new->Paper->defaultPaper->getWidth->defaultPaper->getHeight->defaultPaper->getImageableX->defaultPaper->getImageableY->defaultPaper->getImageableWidth->defaultPaper->getImageableHeight->if->if->if->if->newPaper->setSize->newPaper->setImageableArea
RasterPrinterJob#defaultPage(PageFormat):::The passed in PageFormat will be copied and altered to describe the default page size and orientation of the PrinterJob's current printer:::newPage->page->clone->newPage->setOrientation->newPaper->new->Paper->ptsPerInch->w->h->media->service->getPrintService->if->size->service->getDefaultAttributeValue->if->MediaSize->getMediaSizeForName->size->getX->size->getY->newPaper->setSize->newPaper->setImageableArea->newPage->setPaper->return->defaultCountry->Locale->getDefault->getCountry->if->Locale->getDefault->equals->defaultCountry->getCountry->equals->defaultCountry->getCountry->equals->mmPerInch->Math->rint->Math->rint->newPaper->setSize->newPaper->setImageableArea->newPage->setPaper->return
RasterPrinterJob#validatePage(PageFormat):::The passed in PageFormat is cloned and altered to be usable on the PrinterJob's current printer.:::newPage->page->clone->newPaper->new->Paper->newPage->getPaper->validatePaper->newPage->setPaper->return
RasterPrinterJob#setCopies(int):::Set the number of copies to be printed.:::
RasterPrinterJob#getCopies():::Get the number of copies to be printed.:::return
RasterPrinterJob#getUserName():::Get the name of the printing user:::return->System->getProperty
RasterPrinterJob#setJobName(String):::Set the name of the document to be printed:::if->else->throw->new->NullPointerException
RasterPrinterJob#getJobName():::Get the name of the document to be printed.:::return
RasterPrinterJob#setPageRange(int, int):::Set the range of pages from a Book to be printed:::if->if->else
RasterPrinterJob#getFirstPage():::Return the zero based index of the first page to be printed in this job.:::return
RasterPrinterJob#getLastPage():::Return the zero based index of the last page to be printed in this job.:::return
RasterPrinterJob#setCollated(boolean):::Set whether copies should be collated or not:::
RasterPrinterJob#isCollated():::Return true if collated copies will be printed as determined in an attribute set.:::return
RasterPrinterJob#startDoc():::Called by the print() method at the start of a print job.:::
RasterPrinterJob#endDoc():::Called by the print() method at the end of a print job.:::
RasterPrinterJob#getCollatedCopies():::Returns how many times the entire book should be printed by the PrintJob:::return->isCollated->getCopiesInt
RasterPrinterJob#getNoncollatedCopies():::Returns how many times each page in the book should be consecutively printed by PrintJob:::return->isCollated->getCopiesInt
RasterPrinterJob#printPage(Pageable, int):::Print a page from the provided document.:::page->origPage->painter->try->document->getPageFormat->origPage->clone->document->getPrintable->catch->pe->new->PrinterException->pe->initCause->throw->finally->paper->page->getPaper->if->page->getOrientation->left->paper->getImageableX->top->paper->getImageableY->width->paper->getImageableWidth->height->paper->getImageableHeight->paper->paper->getWidth->paper->getHeight->setImageableArea->page->setPaper->if->page->getOrientation->page->setOrientation->else->page->setOrientation->xScale->getXRes->yScale->getYRes->deviceArea->paper->getImageableX->paper->getImageableY->paper->getImageableWidth->paper->getImageableHeight->new->Rectangle2D.Double->uniformTransform->new->AffineTransform->scaleTransform->new->AffineTransform->scaleTransform->scale->bandWidth->deviceArea->getWidth->if->if->throw->new->PrinterException->deviceAreaHeight->deviceArea->getHeight->if->throw->new->PrinterException->bandHeight->deviceLeft->Math->paper->getImageableX->rint->deviceTop->Math->paper->getImageableY->rint->deviceTransform->new->AffineTransform->deviceTransform->translate->deviceTransform->translate->deviceTransform->scale->pBand->new->BufferedImage->peekGraphics->pBand->createGraphics->createPeekGraphics->pageFormatArea->page->getImageableX->page->getImageableY->page->getImageableWidth->page->getImageableHeight->new->Rectangle2D.Double->peekGraphics->transform->peekGraphics->getPhysicalPrintableX->getPhysicalPrintableY->translate->peekGraphics->page->getMatrix->new->AffineTransform->transform->initPrinterGraphics->pgAt->peekGraphics->getTransform->paper->getWidth->paper->getHeight->setGraphicsConfigInfo->pageResult->painter->print->debug_println->if->debug_println->thisPaper->page->getPaper->paperChanged->thisPaper->getWidth->previousPaper->getWidth->thisPaper->getHeight->previousPaper->getHeight->startPage->pathGraphics->createPathGraphics->if->pathGraphics->transform->pathGraphics->getPhysicalPrintableX->getPhysicalPrintableY->translate->pathGraphics->page->getMatrix->new->AffineTransform->transform->initPrinterGraphics->redrawList->clear->initialTx->pathGraphics->getTransform->painter->print->for->i->redrawList->size->else->band->if->new->BufferedImage->bandGraphics->band->createGraphics->clipArea->new->Rectangle2D.Double->initPrinterGraphics->painterGraphics->new->ProxyGraphics2D->clearGraphics->band->createGraphics->clearGraphics->setColor->tile->band->getRaster->data->tile->getDataStorage->deviceBottom->deviceAddressableX->getPhysicalPrintableX->deviceAddressableY->getPhysicalPrintableY->for->bandTop->clearGraphics->dispose->bandGraphics->dispose->debug_println->endPage->return
RasterPrinterJob#cancel():::If a print job is in progress, print() has been called but has not returned, then this signals that the job should be cancelled and the next chance:::synchronized->if->notify
RasterPrinterJob#isCancelled():::Returns true is a print job is ongoing but will be cancelled and the next opportunity:::cancelled->synchronized->notify->return
RasterPrinterJob#getPageable():::Return the Pageable describing the pages to be printed.:::return
RasterPrinterJob#createPathGraphics(PeekGraphics, PrinterJob, Printable, PageFormat, int):::Examine the metrics captured by the PeekGraphics instance and if capable of directly converting this print job to the printer's control language or the native OS's graphics primitives, then return a PathGraphics to perform that conversion:::return
RasterPrinterJob#createPeekGraphics(Graphics2D, PrinterJob):::Create and return an object that will gather and hold metrics about the print job:::return->new->PeekGraphics
RasterPrinterJob#checkAllowedToPrintToFile():::User dialogs should disable "File" buttons if this returns false.:::try->throwPrintToFile->return->catch->return->finally
ServiceDialog#initPrintDialog(int, int, PrintService[], int, DocFlavor, PrintRequestAttributeSet):::Initialize print dialog.:::new->HashPrintRequestAttributeSet->pages->attributes->get->if->if->attributes->get->owner->attributes->get->if->getOwner->owner->getOwner->getOwner->try->setAlwaysOnTop->catch->finally->c->getContentPane->c->new->BorderLayout->setLayout->new->JTabbedPane->tpTabs->new->EmptyBorder->setBorder->gkey->getMsg->gmnemonic->getVKMnemonic->new->GeneralPanel->tpTabs->add->tpTabs->setMnemonicAt->pkey->getMsg->pmnemonic->getVKMnemonic->new->PageSetupPanel->tpTabs->add->tpTabs->setMnemonicAt->akey->getMsg->amnemonic->getVKMnemonic->new->AppearancePanel->tpTabs->add->tpTabs->setMnemonicAt->c->add->updatePanels->pnlSouth->new->FlowLayout->new->JPanel->createExitButton->pnlSouth->add->getRootPane->setDefaultButton->createExitButton->handleEscKey->pnlSouth->add->c->add->new->WindowAdapter->addWindowListener->getAccessibleContext->getMsg->setAccessibleDescription->setResizable->setLocation->pack
ServiceDialog#initPageDialog(int, int, PrintService, DocFlavor, PrintRequestAttributeSet):::Initialize "page setup" dialog:::new->HashPrintRequestAttributeSet->if->attributes->get->owner->attributes->get->if->getOwner->owner->getOwner->getOwner->try->setAlwaysOnTop->catch->finally->c->getContentPane->c->new->BorderLayout->setLayout->new->PageSetupPanel->c->add->pnlPageSetup->updateInfo->pnlSouth->new->FlowLayout->new->JPanel->createExitButton->pnlSouth->add->getRootPane->setDefaultButton->createExitButton->handleEscKey->pnlSouth->add->c->add->new->WindowAdapter->addWindowListener->getAccessibleContext->getMsg->setAccessibleDescription->setResizable->setLocation->pack
ServiceDialog#getStatus():::Returns the current status of the dialog (whether the user has selected the "Print" or "Cancel" button):::return
ServiceDialog#getAttributes():::Returns an AttributeSet based on whether or not the user cancelled the dialog:::if->return->else->return
ServiceDialog#getPrintService():::Returns a PrintService based on whether or not the user cancelled the dialog:::if->return->else->return
ServiceDialog#dispose(int):::Sets the current status flag for the dialog and disposes it (thus returning control of the parent frame back to the user):::super->dispose
ServiceDialog#initResource():::Initialize ResourceBundle:::new->java.security.PrivilegedAction<Object>->doPrivileged
ServiceDialog#getMsg(String):::Returns message string from resource:::try->return->messageRB->getString->removeMnemonics->catch->throw->new->Error->finally
ServiceDialog#showNoPrintService(GraphicsConfiguration):::Creates a  pop-up dialog for "no print service":::dlgFrame->new->Frame->JOptionPane->getMsg->showMessageDialog->dlgFrame->dispose
SunAlternateMedia#hashCode():::Returns a hash code value for this enumeration value:::return->media->hashCode
SunPrinterJobService#usesClass(Class):::This returns true if this service is implemented using the platform's built-in subclass of PrinterJob:::

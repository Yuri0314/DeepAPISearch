AttributeUpdater#getUpdatedAttributes()::: attribute updater get updated attributes:::
BackgroundLookupListener#notifyServices(PrintService[]):::Called once to notify that the complete list of services is retrieved:::
BackgroundServiceLookup#getServicesInbackground(BackgroundLookupListener)::: background service lookup get services inbackground:::
CustomMediaSizeName#nextValue(String)::: custom media size name next value:::customStringTable->add->return->customStringTable->size
CustomMediaSizeName#getChoiceName():::Returns the command string for this media.:::return
CustomMediaSizeName#getStandardMedia():::Returns matching standard MediaSizeName.:::return
CustomMediaSizeName#findMedia(Media[], float, float, int):::Returns closest matching MediaSizeName among given array of Media:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->size->msn->new->MediaSizeNameArr->for->i->if->return->match->ls->tmp_ls->dim->diffx->diffy->for->i->return
CustomMediaSizeName#getSuperEnumTable():::Returns the string table for super class MediaSizeName.:::return->super->getEnumValueTable
CustomMediaSizeName#getStringTable():::Returns the string table for class CustomMediaSizeName.:::nameTable->customStringTable->size->new->StringArr->return->customStringTable->toArray
CustomMediaSizeName#getEnumValueTable():::Returns the enumeration value table for class CustomMediaSizeName.:::enumTable->customEnumTable->size->new->MediaSizeNameArr->return->customEnumTable->toArray
CustomMediaTray#nextValue(String)::: custom media tray next value:::customStringTable->add->return->customStringTable->size
CustomMediaTray#getChoiceName():::Returns the command string for this media tray.:::return
CustomMediaTray#getSuperEnumTable():::Returns the string table for super class MediaTray.:::return->super->getEnumValueTable
CustomMediaTray#getStringTable():::Returns the string table for class CustomMediaTray.:::nameTable->customStringTable->size->new->StringArr->return->customStringTable->toArray
CustomMediaTray#getEnumValueTable():::Returns the enumeration value table for class CustomMediaTray.:::enumTable->customEnumTable->size->new->MediaTrayArr->return->customEnumTable->toArray
DialogOwnerAccessor#getOwnerID(DialogOwner)::: dialog owner accessor get owner d:::
DialogOwnerAccessor#setAccessor(DialogOwnerAccessor)::: dialog owner accessor set accessor:::
DialogOwnerAccessor#getID(DialogOwner)::: dialog owner accessor get d:::if->return->else->return->accessor->getOwnerID
DocumentPropertiesUI#showDocumentProperties(PrinterJob, Window, PrintService, PrintRequestAttributeSet):::Invokes whatever code is needed to display a native dialog with the specified owner:::
ImagePrinter#print(Graphics, PageFormat, int)::: image printer print:::if->return->pf->getImageableX->pf->getImageableY->translate->w->image->getWidth->h->image->getHeight->iw->pf->getImageableWidth->ih->pf->getImageableHeight->dw->dh->if->if->dx->dy->g->drawImage->return
OpenBook#getNumberOfPages():::This object does not know the number of pages.:::return
OpenBook#getPageFormat(int):::Return the PageFormat of the page specified by 'pageIndex'.:::return
OpenBook#getPrintable(int):::Return the Printable instance responsible for rendering the page specified by 'pageIndex'.:::return
PageableDoc#getDocFlavor()::: pageable doc get doc flavor:::return
PageableDoc#getAttributes()::: pageable doc get attributes:::return->new->HashDocAttributeSet
PageableDoc#getPrintData()::: pageable doc get print data:::return
PageableDoc#getReaderForText()::: pageable doc get reader for text:::return
PageableDoc#getStreamForBytes()::: pageable doc get stream for bytes:::return
PathGraphics#getPrintable():::Return the Printable instance responsible for drawing into this Graphics.:::return
PathGraphics#getPageFormat():::Return the PageFormat associated with this page of Graphics.:::return
PathGraphics#getPageIndex():::Return the page index associated with this Graphics.:::return
PathGraphics#canDoRedraws():::Return true if we are allowed to ask the application to redraw portions of the page:::return
PathGraphics#redrawRegion(Rectangle2D, double, double, Shape, AffineTransform):::Redraw a rectanglular area using a proxy graphics:::
PathGraphics#drawLine(int, int, int, int):::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.:::paint->getPaint->try->deviceTransform->getTransform->if->getClip->getClip->getPathIterator->deviceClip->deviceDrawLine->catch->throw->new->IllegalArgumentException->finally
PathGraphics#drawRect(int, int, int, int):::Draws the outline of the specified rectangle:::paint->getPaint->try->deviceTransform->getTransform->if->getClip->getClip->getPathIterator->deviceClip->deviceFrameRect->catch->throw->new->IllegalArgumentException->finally
PathGraphics#fillRect(int, int, int, int):::Fills the specified rectangle:::paint->getPaint->try->deviceTransform->getTransform->if->getClip->getClip->getPathIterator->deviceClip->deviceFillRect->catch->throw->new->IllegalArgumentException->finally
PathGraphics#clearRect(int, int, int, int):::Clears the specified rectangle by filling it with the background color of the current drawing surface:::new->Rectangle2D.Float->getBackground->fill
PathGraphics#drawRoundRect(int, int, int, int, int, int):::Draws an outlined round-cornered rectangle using this graphics context's current color:::new->RoundRectangle2D.Float->draw
PathGraphics#fillRoundRect(int, int, int, int, int, int):::Fills the specified rounded corner rectangle with the current color:::new->RoundRectangle2D.Float->fill
PathGraphics#drawOval(int, int, int, int):::Draws the outline of an oval:::new->Ellipse2D.Float->draw
PathGraphics#fillOval(int, int, int, int):::Fills an oval bounded by the specified rectangle with the current color.:::new->Ellipse2D.Float->fill
PathGraphics#drawArc(int, int, int, int, int, int):::Draws the outline of a circular or elliptical arc covering the specified rectangle:::new->Arc2D.Float->draw
PathGraphics#fillArc(int, int, int, int, int, int):::Fills a circular or elliptical arc covering the specified rectangle:::new->Arc2D.Float->fill
PathGraphics#drawPolyline(int[], int[], int):::Draws a sequence of connected lines defined by arrays of x and y coordinates:::if->new->Line2D.Float->draw->else->if->path->new->Path2D.Float->path->moveTo->for->i->draw
PathGraphics#drawPolygon(int[], int[], int):::Draws a closed polygon defined by arrays of x and y coordinates:::new->Polygon->draw
PathGraphics#drawPolygon(Polygon):::Draws the outline of a polygon defined by the specified Polygon object.:::draw
PathGraphics#fillPolygon(int[], int[], int):::Fills a closed polygon defined by arrays of x and y coordinates:::new->Polygon->fill
PathGraphics#fillPolygon(Polygon):::Fills the polygon defined by the specified Polygon object with the graphics context's current color:::fill
PathGraphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::drawString
PathGraphics#drawString(String, float, float)::: path graphics draw string:::if->str->length->return->layout->getFont->getFontRenderContext->new->TextLayout->layout->draw
PathGraphics#drawString(String, float, float, Font, FontRenderContext, float)::: path graphics draw string:::layout->new->TextLayout->textShape->layout->AffineTransform->getTranslateInstance->getOutline->fill
PathGraphics#drawString(AttributedCharacterIterator, int, int):::Draws the text given by the specified iterator, using this graphics context's current color:::drawString
PathGraphics#drawString(AttributedCharacterIterator, float, float)::: path graphics draw string:::if->throw->new->NullPointerException->layout->getFontRenderContext->new->TextLayout->layout->draw
PathGraphics#drawGlyphVector(GlyphVector, float, float):::Draws a GlyphVector:::if->g->getOutline->fill->return->try->if->printedSimpleGlyphVector->g->getOutline->fill->catch->finally
PathGraphics#platformFontCount(Font, String)::: path graphics platform font count:::return
PathGraphics#printGlyphVector(GlyphVector, float, float):::Default implementation returns false:::return
PathGraphics#printedSimpleGlyphVector(GlyphVector, float, float)::: path graphics printed simple glyph vector:::flags->g->getLayoutFlags->if->return->printGlyphVector->font->g->getFont->font2D->FontUtilities->getFont2D->if->return->fontMap->synchronized->fontMapRef->get->if->new->Hashtable<Font2DHandle,Object>->new->SoftReference<Hashtable<Font2DHandle,Object>>->numGlyphs->g->getNumGlyphs->glyphCodes->g->getGlyphCodes->glyphToCharMap->mapArray->cf->synchronized->if->numSlots->cf->getNumSlots->fontMap->get->if->new->charArrs->fontMap->put->for->i->else->fontMap->get->if->getGlyphToCharMapForFont->fontMap->put->chars->new->charArr->if->for->i->else->for->i->gvFrc->g->getFontRenderContext->gv2->font->createGlyphVector->if->gv2->getNumGlyphs->return->printGlyphVector->glyphCodes2->gv2->getGlyphCodes->for->i->g2dFrc->getFontRenderContext->compatibleFRC->gvFrc->equals->if->gvFrc->usesFractionalMetrics->g2dFrc->usesFractionalMetrics->gvAT->gvFrc->getTransform->g2dAT->getTransform->gvMatrix->new->doubleArr->g2dMatrix->new->doubleArr->gvAT->getMatrix->g2dAT->getMatrix->for->i->str->new->String->numFonts->platformFontCount->if->return->positions->g->getGlyphPositions->noPositionAdjustments->samePositions->gvAdvancePt->g->getGlyphPosition->gvAdvanceX->gvAdvancePt->getX->layoutAffectsAdvance->if->font->hasLayoutAttributes->map->font->getAttributes->o->map->get->tracking->floatValue->if->else->bounds->font->getStringBounds->strAdvanceX->bounds->getWidth->if->Math->abs->if->drawString->return->if->canDrawStringToWidth->drawString->return->if->FontUtilities->isComplexText->return->printGlyphVector->if->printGlyphVector->return->for->i->return
PathGraphics#samePositions(GlyphVector, int[], int[], float[])::: path graphics same positions:::numGlyphs->gv->getNumGlyphs->gvpos->gv->getGlyphPositions->if->return->for->i->return
PathGraphics#canDrawStringToWidth()::: path graphics can draw string to width:::return
PathGraphics#getGlyphToCharMapForFont(Font2D)::: path graphics get glyph to char map for font:::numGlyphs->font2D->getNumGlyphs->missingGlyph->font2D->getMissingGlyphCode->glyphToCharMap->new->charArr->glyph->for->i->for->c->return
PathGraphics#draw(Shape):::Strokes the outline of a Shape using the settings of the current graphics state:::getStroke->createStrokedShape->fill
PathGraphics#fill(Shape):::Fills the interior of a Shape using the settings of the current graphics state:::paint->getPaint->try->fill->catch->throw->new->IllegalArgumentException->finally
PathGraphics#fill(Shape, Color)::: path graphics fill:::deviceTransform->getTransform->if->getClip->getClip->getPathIterator->deviceClip->s->getPathIterator->deviceFill
PathGraphics#deviceFill(PathIterator, Color):::Fill the path defined by pathIter with the specified color:::
PathGraphics#deviceClip(PathIterator)::: path graphics device clip:::
PathGraphics#deviceFrameRect(int, int, int, int, Color)::: path graphics device frame rect:::
PathGraphics#deviceDrawLine(int, int, int, int, Color)::: path graphics device draw line:::
PathGraphics#deviceFillRect(int, int, int, int, Color)::: path graphics device fill rect:::
PathGraphics#getBufferedImage(Image)::: path graphics get buffered image:::if->return->else->if->return->getBufferedImage->else->if->return->getSnapshot->else->return
PathGraphics#hasTransparentPixels(BufferedImage):::Return true if the BufferedImage argument has non-opaque bits in it and therefore can not be directly rendered by GDI:::colorModel->bufferedImage->getColorModel->hasTransparency->colorModel->getTransparency->if->if->bufferedImage->getType->bufferedImage->getType->db->bufferedImage->getRaster->getDataBuffer->sm->bufferedImage->getRaster->getSampleModel->if->psm->int_data->SunWritableRaster->stealData->x->bufferedImage->getMinX->y->bufferedImage->getMinY->w->bufferedImage->getWidth->h->bufferedImage->getHeight->stride->psm->getScanlineStride->hastranspixel->for->j->if->return
PathGraphics#isBitmaskTransparency(BufferedImage)::: path graphics is bitmask transparency:::colorModel->bufferedImage->getColorModel->return->colorModel->getTransparency
PathGraphics#drawBitmaskImage(BufferedImage, AffineTransform, Color, int, int, int, int)::: path graphics draw bitmask image:::colorModel->bufferedImage->getColorModel->icm->pixels->if->return->else->if->colorModel->getTransparency->return->if->bgcolor->getAlpha->return->if->xform->getType->return->if->getTransform->getType->return->subImage->raster->bufferedImage->getRaster->transpixel->icm->getTransparentPixel->alphas->icm->getMapSize->new->byteArr->icm->getAlphas->if->rw->raster->getWidth->rh->raster->getHeight->if->return->right->bottom->wid->hgt->if->else->if->else->new->intArr->for->j->return
PathGraphics#drawImageToPlatform(Image, AffineTransform, Color, int, int, int, int, boolean):::The various drawImage() methods for PathGraphics are all decomposed into an invocation of drawImageToPlatform:::
PathGraphics#drawImage(Image, int, int, ImageObserver):::Draws as much of the specified image as is currently available:::return->drawImage
PathGraphics#drawImage(Image, int, int, int, int, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::return->drawImage
PathGraphics#drawImage(Image, int, int, Color, ImageObserver)::: path graphics draw image:::if->return->result->srcWidth->img->getWidth->srcHeight->img->getHeight->if->else->drawImage->return
PathGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::if->return->result->srcWidth->img->getWidth->srcHeight->img->getHeight->if->else->drawImage->return
PathGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::return->drawImage
PathGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::if->return->imgWidth->img->getWidth->imgHeight->img->getHeight->if->return->srcWidth->srcHeight->scalex->scaley->xForm->new->AffineTransform->tmp->if->if->if->else->if->if->else->if->if->else->if->if->else->if->if->return->return->drawImageToPlatform
PathGraphics#drawImage(Image, AffineTransform, ImageObserver):::Draws an image, applying a transform from image space into user space before drawing:::if->return->result->srcWidth->img->getWidth->srcHeight->img->getHeight->if->else->drawImageToPlatform->return
PathGraphics#drawImage(BufferedImage, BufferedImageOp, int, int):::Draws a BufferedImage that is filtered with a BufferedImageOp:::if->return->srcWidth->img->getWidth->srcHeight->img->getHeight->if->op->filter->if->return->else->xform->new->AffineTransform->drawImageToPlatform
PathGraphics#drawRenderedImage(RenderedImage, AffineTransform):::Draws an image, applying a transform from image space into user space before drawing:::if->return->bufferedImage->srcWidth->img->getWidth->srcHeight->img->getHeight->if->return->if->else->new->BufferedImage->imageGraphics->bufferedImage->createGraphics->imageGraphics->drawRenderedImage->drawImageToPlatform
PeekGraphics#getDelegate():::Return the Graphics2D object that does the drawing for this instance.:::return
PeekGraphics#setDelegate(Graphics2D):::Set the Graphics2D instance which will do the drawing.:::
PeekGraphics#getPrinterJob()::: peek graphics get printer job:::return
PeekGraphics#setAWTDrawingOnly():::The caller promises that only AWT graphics will be drawn:::
PeekGraphics#getAWTDrawingOnly()::: peek graphics get drawing only:::return
PeekGraphics#getDrawingArea():::Return a Spans instance describing the parts of the page in to which drawing occurred.:::return
PeekGraphics#getDeviceConfiguration():::Returns the device configuration associated with this Graphics2D.:::return->getPrinterGraphicsConfig
PeekGraphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::newGraphics->try->clone->mGraphics->create->catch->finally->return
PeekGraphics#translate(int, int):::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system:::mGraphics->translate
PeekGraphics#translate(double, double):::Concatenates the current transform of this Graphics2D with a translation transformation:::mGraphics->translate
PeekGraphics#rotate(double):::Concatenates the current transform of this Graphics2D with a rotation transformation:::mGraphics->rotate
PeekGraphics#rotate(double, double, double):::Concatenates the current transform of this Graphics2D with a translated rotation transformation:::mGraphics->rotate
PeekGraphics#scale(double, double):::Concatenates the current transform of this Graphics2D with a scaling transformation:::mGraphics->scale
PeekGraphics#shear(double, double):::Concatenates the current transform of this Graphics2D with a shearing transformation:::mGraphics->shear
PeekGraphics#getColor():::Gets this graphics context's current color.:::return->mGraphics->getColor
PeekGraphics#setColor(Color):::Sets this graphics context's current color to the specified color:::mGraphics->setColor
PeekGraphics#setPaintMode():::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color:::mGraphics->setPaintMode
PeekGraphics#setXORMode(Color):::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color:::mGraphics->setXORMode
PeekGraphics#getFont():::Gets the current font.:::return->mGraphics->getFont
PeekGraphics#setFont(Font):::Sets this graphics context's font to the specified font:::mGraphics->setFont
PeekGraphics#getFontMetrics(Font):::Gets the font metrics for the specified font.:::return->mGraphics->getFontMetrics
PeekGraphics#getFontRenderContext():::Get the rendering context of the font within this Graphics2D context.:::return->mGraphics->getFontRenderContext
PeekGraphics#getClipBounds():::Returns the bounding rectangle of the current clipping area:::return->mGraphics->getClipBounds
PeekGraphics#clipRect(int, int, int, int):::Intersects the current clip with the specified rectangle:::mGraphics->clipRect
PeekGraphics#setClip(int, int, int, int):::Sets the current clip to the rectangle specified by the given coordinates:::mGraphics->setClip
PeekGraphics#getClip():::Gets the current clipping area.:::return->mGraphics->getClip
PeekGraphics#setClip(Shape):::Sets the current clipping area to an arbitrary clip shape:::mGraphics->setClip
PeekGraphics#copyArea(int, int, int, int, int, int):::Copies an area of the component by a distance specified by dx and dy:::
PeekGraphics#drawLine(int, int, int, int):::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.:::new->Line2D.Float->addStrokeShape->mPrintMetrics->draw
PeekGraphics#fillRect(int, int, int, int):::Fills the specified rectangle:::new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->fill
PeekGraphics#clearRect(int, int, int, int):::Clears the specified rectangle by filling it with the background color of the current drawing surface:::rect->new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->clear
PeekGraphics#drawRoundRect(int, int, int, int, int, int):::Draws an outlined round-cornered rectangle using this graphics context's current color:::new->RoundRectangle2D.Float->addStrokeShape->mPrintMetrics->draw
PeekGraphics#fillRoundRect(int, int, int, int, int, int):::Fills the specified rounded corner rectangle with the current color:::rect->new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->fill
PeekGraphics#drawOval(int, int, int, int):::Draws the outline of an oval:::new->Rectangle2D.Float->addStrokeShape->mPrintMetrics->draw
PeekGraphics#fillOval(int, int, int, int):::Fills an oval bounded by the specified rectangle with the current color.:::rect->new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->fill
PeekGraphics#drawArc(int, int, int, int, int, int):::Draws the outline of a circular or elliptical arc covering the specified rectangle:::new->Rectangle2D.Float->addStrokeShape->mPrintMetrics->draw
PeekGraphics#fillArc(int, int, int, int, int, int):::Fills a circular or elliptical arc covering the specified rectangle:::rect->new->Rectangle2D.Float->addDrawingRect->mPrintMetrics->fill
PeekGraphics#drawPolyline(int[], int[], int):::Draws a sequence of connected lines defined by arrays of x and y coordinates:::if->x->y->for->i
PeekGraphics#drawPolygon(int[], int[], int):::Draws a closed polygon defined by arrays of x and y coordinates:::if->drawPolyline->drawLine
PeekGraphics#fillPolygon(int[], int[], int):::Fills a closed polygon defined by arrays of x and y coordinates:::if->minX->minY->maxX->maxY->for->i->addDrawingRect->mPrintMetrics->fill
PeekGraphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::drawString
PeekGraphics#drawString(AttributedCharacterIterator, int, int):::Draws the text given by the specified iterator, using this graphics context's current color:::drawString
PeekGraphics#drawString(AttributedCharacterIterator, float, float):::Draws the text given by the specified iterator, using this graphics context's current color:::if->throw->new->NullPointerException->layout->getFontRenderContext->new->TextLayout->layout->draw
PeekGraphics#drawImage(Image, int, int, ImageObserver):::Draws as much of the specified image as is currently available:::if->return->dim->new->ImageWaiter->dim->getWidth->dim->getHeight->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, int, int, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::if->return->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, Color, ImageObserver):::Draws as much of the specified image as is currently available:::if->return->dim->new->ImageWaiter->dim->getWidth->dim->getHeight->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::if->return->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::if->return->width->height->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::if->return->width->height->addDrawingRect->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawRenderedImage(RenderedImage, AffineTransform):::Draws an image, applying a transform from image space into user space before drawing:::if->return->mPrintMetrics->drawImage->mDrawingArea->addInfinite
PeekGraphics#drawRenderableImage(RenderableImage, AffineTransform)::: peek graphics draw renderable image:::if->return->mPrintMetrics->drawImage->mDrawingArea->addInfinite
PeekGraphics#dispose():::Disposes of this graphics context and releases any system resources that it is using:::mGraphics->dispose
PeekGraphics#finalize():::Empty finalizer as no clean up needed here.:::
PeekGraphics#draw(Shape):::Strokes the outline of a Shape using the settings of the current graphics state:::addStrokeShape->mPrintMetrics->draw
PeekGraphics#drawImage(Image, AffineTransform, ImageObserver):::Draws an image, applying a transform from image space into user space before drawing:::if->return->mDrawingArea->addInfinite->mPrintMetrics->drawImage->return->mGraphics->drawImage
PeekGraphics#drawImage(BufferedImage, BufferedImageOp, int, int):::Draws a BufferedImage that is filtered with a BufferedImageOp:::if->return->mPrintMetrics->drawImage->mDrawingArea->addInfinite
PeekGraphics#drawString(String, float, float):::Draws a string of text:::if->str->length->return->frc->getFontRenderContext->bbox->getFont->getStringBounds->addDrawingRect->mPrintMetrics->drawText
PeekGraphics#drawGlyphVector(GlyphVector, float, float):::Draws a GlyphVector:::bbox->g->getLogicalBounds->addDrawingRect->mPrintMetrics->drawText
PeekGraphics#fill(Shape):::Fills the interior of a Shape using the settings of the current graphics state:::s->getBounds->addDrawingRect->mPrintMetrics->fill
PeekGraphics#hit(Rectangle, Shape, boolean):::Checks to see if the outline of a Shape intersects the specified Rectangle in device space:::return->mGraphics->hit
PeekGraphics#setComposite(Composite):::Sets the Composite in the current graphics state:::mGraphics->setComposite
PeekGraphics#setPaint(Paint):::Sets the Paint in the current graphics state.:::mGraphics->setPaint
PeekGraphics#setStroke(Stroke):::Sets the Stroke in the current graphics state.:::mGraphics->setStroke
PeekGraphics#setRenderingHint(Key, Object):::Sets the preferences for the rendering algorithms:::mGraphics->setRenderingHint
PeekGraphics#getRenderingHint(Key):::Returns the preferences for the rendering algorithms.:::return->mGraphics->getRenderingHint
PeekGraphics#setRenderingHints(Map):::Sets the preferences for the rendering algorithms:::mGraphics->setRenderingHints
PeekGraphics#addRenderingHints(Map):::Adds a number of preferences for the rendering algorithms:::mGraphics->addRenderingHints
PeekGraphics#getRenderingHints():::Gets the preferences for the rendering algorithms:::return->mGraphics->getRenderingHints
PeekGraphics#transform(AffineTransform):::Composes a Transform object with the transform in this Graphics2D according to the rule last-specified-first-applied:::mGraphics->transform
PeekGraphics#setTransform(AffineTransform):::Sets the Transform in the current graphics state.:::mGraphics->setTransform
PeekGraphics#getTransform():::Returns the current Transform in the Graphics2D state.:::return->mGraphics->getTransform
PeekGraphics#getPaint():::Returns the current Paint in the Graphics2D state.:::return->mGraphics->getPaint
PeekGraphics#getComposite():::Returns the current Composite in the Graphics2D state.:::return->mGraphics->getComposite
PeekGraphics#setBackground(Color):::Sets the background color in this context used for clearing a region:::mGraphics->setBackground
PeekGraphics#getBackground():::Returns the background color used for clearing a region.:::return->mGraphics->getBackground
PeekGraphics#getStroke():::Returns the current Stroke in the Graphics2D state.:::return->mGraphics->getStroke
PeekGraphics#clip(Shape):::Intersects the current clip with the interior of the specified Shape and sets the current clip to the resulting intersection:::mGraphics->clip
PeekGraphics#hitsDrawingArea(Rectangle):::Return true if the Rectangle rect intersects the area into which the application has drawn.:::return->mDrawingArea->rect->getMinY->rect->getMaxY->intersects
PeekGraphics#getMetrics():::Return the object holding the summary of the drawing done by the printing application.:::return
PeekGraphics#addDrawingRect(Rectangle2D, float, float):::Shift the rectangle 'rect' to the position ('x', 'y') and add the resulting rectangle to the area representing the part of the page which is drawn into.:::rect->getX->rect->getY->rect->getWidth->rect->getHeight->addDrawingRect
PeekGraphics#addDrawingRect(float, float, float, float)::: peek graphics add drawing rect:::bbox->new->Rectangle2D.Float->addDrawingRect
PeekGraphics#addDrawingRect(Rectangle2D):::Add the rectangle 'rect' to the area representing the part of the page which is drawn into.:::matrix->getTransform->transShape->matrix->createTransformedShape->transRect->transShape->getBounds2D->mDrawingArea->transRect->getMinY->transRect->getMaxY->add
PeekGraphics#addStrokeShape(Shape):::Add the stroked shape to the area representing the part of the page which is drawn into.:::transShape->getStroke->createStrokedShape->transShape->getBounds2D->addDrawingRect
PeekGraphics#imageUpdate(Image, int, int, int, int, int):::Notify this object when the height or width become available for an image.:::gotInfo->if->notify->return
PeekGraphics#getImageWidth(Image)::: peek graphics get image width:::while->img->getWidth->try->wait->catch->finally->return->img->getWidth
PeekGraphics#getImageHeight(Image)::: peek graphics get image height:::while->img->getHeight->try->wait->catch->finally->return->img->getHeight
PeekGraphics.ImageWaiter#getWidth()::: image waiter get width:::return
PeekGraphics.ImageWaiter#getHeight()::: image waiter get height:::return
PeekGraphics.ImageWaiter#waitForDimensions(Image)::: image waiter wait for dimensions:::img->getHeight->img->getWidth->while->try->Thread->sleep->catch->finally->img->getHeight->img->getWidth->if
PeekGraphics.ImageWaiter#imageUpdate(Image, int, int, int, int, int)::: image waiter image update:::dontCallMeAgain->return
PeekMetrics#hasNonSolidColors():::Return true if the application has done any drawing with a Paint that is not an instance of Color:::return
PeekMetrics#hasCompositing():::Return true if the application has done any drawing with an alpha other than 1.0.:::return
PeekMetrics#hasText():::Return true if the application has drawn any text.:::return
PeekMetrics#hasImages():::Return true if the application has drawn any images.:::return
PeekMetrics#fill(Graphics2D):::The application is performing a fill so record the needed information.:::checkDrawingMode
PeekMetrics#draw(Graphics2D):::The application is performing a draw so record the needed information.:::checkDrawingMode
PeekMetrics#clear(Graphics2D):::The application is performing a clearRect so record the needed information.:::g->getBackground->checkPaint
PeekMetrics#drawText(Graphics2D):::The application is drawing text so record the needed information.:::checkDrawingMode
PeekMetrics#drawText(Graphics2D, TextLayout):::The application is drawing text defined by TextLayout so record the needed information.:::checkDrawingMode
PeekMetrics#drawImage(Graphics2D, Image):::The application is drawing the passed in image.:::
PeekMetrics#drawImage(Graphics2D, RenderedImage):::The application is drawing the passed in image.:::
PeekMetrics#drawImage(Graphics2D, RenderableImage):::The application is drawing the passed in image.:::
PeekMetrics#checkDrawingMode(Graphics2D):::Record information about the current paint and composite.:::g->getPaint->checkPaint->g->getComposite->checkAlpha
PeekMetrics#checkPaint(Paint):::Record information about drawing done with the supplied Paint.:::if->if->getAlpha->else
PeekMetrics#checkAlpha(Composite):::Record information about drawing done with the supplied Composite.:::if->alphaComposite->alpha->alphaComposite->getAlpha->rule->alphaComposite->getRule->if->else
PrinterGraphicsConfig#getDevice():::Return the graphics device associated with this configuration.:::return
PrinterGraphicsConfig#getColorModel():::Returns the color model associated with this configuration.:::if->bufImg->new->BufferedImage->bufImg->getColorModel->return
PrinterGraphicsConfig#getColorModel(int):::Returns the color model associated with this configuration that supports the specified transparency.:::switch->return->getColorModel->return->new->DirectColorModel->return->ColorModel->getRGBdefault->return
PrinterGraphicsConfig#getDefaultTransform():::Returns the default Transform for this configuration:::return->new->AffineTransform
PrinterGraphicsConfig#getNormalizingTransform():::Returns a Transform that can be composed with the default Transform of a Graphics2D so that 72 units in user space will equal 1 inch in device space:::return->new->AffineTransform
PrinterGraphicsConfig#getBounds()::: printer graphics config get bounds:::return->new->Rectangle
PrinterGraphicsDevice#getType()::: printer graphics device get type:::return
PrinterGraphicsDevice#getIDstring()::: printer graphics device get dstring:::return
PrinterGraphicsDevice#getConfigurations()::: printer graphics device get configurations:::confs->new->GraphicsConfigurationArr->return
PrinterGraphicsDevice#getDefaultConfiguration()::: printer graphics device get default configuration:::return
PrinterGraphicsDevice#setFullScreenWindow(Window)::: printer graphics device set full screen window:::
PrinterGraphicsDevice#getFullScreenWindow()::: printer graphics device get full screen window:::return
PrinterJobWrapper#getPrinterJob()::: printer job wrapper get printer job:::return
PrinterJobWrapper#getCategory()::: printer job wrapper get category:::return
PrinterJobWrapper#getName()::: printer job wrapper get name:::return
PrinterJobWrapper#toString()::: printer job wrapper to string:::return->job->toString
PrinterJobWrapper#hashCode()::: printer job wrapper hash code:::return->job->hashCode
PrintJob2D#initPrintJob2D(Frame, String, JobAttributes, PageAttributes)::: print job2 d init print job2 d:::security->System->getSecurityManager->if->security->checkPrintJobAccess->if->jobAttributes->getDialog->throw->new->NullPointerException->new->JobAttributes->new->PageAttributes->pageRanges->getPageRanges->first->last->new->intArrs->new->intArr->setPageRanges->setToPage->setFromPage->res->getPrinterResolution->if->throw->new->IllegalArgumentException->dest->getDestination->if->throwPrintToFile->destStr->jobAttributes->getFileName->if->jobAttributes->getDialog->f->new->File->try->if->f->createNewFile->f->delete->catch->throw->new->IllegalArgumentException->finally->pFile->f->getParentFile->if->f->exists->f->isFile->f->canWrite->pFile->exists->pFile->exists->pFile->canWrite->throw->new->IllegalArgumentException
PrintJob2D#printDialog()::: print job2 d print dialog:::proceedWithPrint->PrinterJob->getPrinterJob->if->return->d->getDialog->pServ->printerJob->getPrintService->if->return->copyAttributes->select->getDefaultSelection->if->attributes->add->else->if->attributes->add->else->attributes->add->if->attributes->new->DialogOwner->add->if->else->if->attributes->add->else->attributes->add->if->printerJob->printDialog->if->printerJob->getPrintService->if->return->updateAttributes->translateOutputProps->if->jname->attributes->get->if->printerJob->jname->toString->setJobName->new->PageFormat->media->attributes->get->mediaSize->if->MediaSize->getMediaSizeForName->p->pageFormat->getPaper->if->p->mediaSize->getX->mediaSize->getY->setSize->if->pageAttributes->getOrigin->p->p->getWidth->p->getHeight->setImageableArea->else->p->p->getWidth->p->getHeight->setImageableArea->pageFormat->setPaper->orient->attributes->get->if->pageFormat->setOrientation->else->if->pageFormat->setOrientation->else->pageFormat->setOrientation->pageRangesAttr->attributes->get->if->range->pageRangesAttr->getMembers->prevFromPage->getFromPage->prevToPage->getToPage->currFromPage->currToPage->if->setFromPage->setToPage->else->setToPage->setFromPage->printerJob->setPrintable->return
PrintJob2D#updateAttributes()::: print job2 d update attributes:::c->attributes->get->jobAttributes->c->getValue->setCopies->sel->attributes->get->if->jobAttributes->setDefaultSelection->else->if->jobAttributes->setDefaultSelection->else->jobAttributes->setDefaultSelection->dest->attributes->get->if->jobAttributes->setDestination->jobAttributes->dest->getURI->getPath->setFileName->else->jobAttributes->setDestination->serv->printerJob->getPrintService->if->jobAttributes->serv->getName->setPrinter->range->attributes->get->members->range->getMembers->jobAttributes->setPageRanges->collation->attributes->get->if->jobAttributes->setMultipleDocumentHandling->else->jobAttributes->setMultipleDocumentHandling->sides->attributes->get->if->jobAttributes->setSides->else->if->jobAttributes->setSides->else->jobAttributes->setSides->color->attributes->get->if->pageAttributes->setColor->else->pageAttributes->setColor->orient->attributes->get->if->pageAttributes->setOrientationRequested->else->pageAttributes->setOrientationRequested->qual->attributes->get->if->pageAttributes->setPrintQuality->else->if->pageAttributes->setPrintQuality->else->pageAttributes->setPrintQuality->msn->attributes->get->if->mType->unMapMedia->if->pageAttributes->setMedia->debugPrintAttributes
PrintJob2D#debugPrintAttributes(boolean, boolean)::: print job2 d debug print attributes:::if->jobAttributes->getCopies->jobAttributes->getDefaultSelection->jobAttributes->getDestination->jobAttributes->getFileName->jobAttributes->getFromPage->jobAttributes->getToPage->jobAttributes->getMultipleDocumentHandling->jobAttributes->getPrinter->jobAttributes->getSides->println->if->pageAttributes->getColor->pageAttributes->getOrientationRequested->pageAttributes->getPrintQuality->pageAttributes->getMedia->println
PrintJob2D#copyAttributes(PrintService)::: print job2 d copy attributes:::new->HashPrintRequestAttributeSet->attributes->new->JobName->add->pServ->printerName->jobAttributes->getPrinter->if->printerName->pServ->getName->equals->services->PrinterJob->lookupPrintServices->try->for->i->catch->finally->dest->jobAttributes->getDestination->if->pServ->isAttributeCategorySupported->fileName->jobAttributes->getFileName->defaultDest->if->pServ->getDefaultAttributeValue->attributes->add->else->uri->try->if->if->fileName->equals->else->new->File->toURI->catch->try->fileName->replace->new->URI->catch->finally->finally->if->attributes->new->Destination->add->attributes->jobAttributes->getMinPage->jobAttributes->getMaxPage->new->SunMinMaxPage->add->sType->jobAttributes->getSides->if->attributes->add->else->if->attributes->add->else->if->attributes->add->hType->jobAttributes->getMultipleDocumentHandling->if->attributes->add->else->attributes->add->attributes->jobAttributes->getCopies->new->Copies->add->attributes->jobAttributes->getFromPage->jobAttributes->getToPage->new->PageRanges->add->if->pageAttributes->getColor->attributes->add->else->attributes->add->printerJob->defaultPage->if->pageAttributes->getOrientationRequested->pageFormat->setOrientation->attributes->add->else->pageFormat->setOrientation->attributes->add->media->pageAttributes->getMedia->msn->mapMedia->if->attributes->add->qType->pageAttributes->getPrintQuality->if->attributes->add->else->if->attributes->add->else->if->attributes->add
PrintJob2D#getGraphics():::Gets a Graphics object that will draw to the next page:::printGraphics->synchronized->if->graphicsToBeDrawn->isClosed->startPrinterJobThread->notify->if->graphicsDrawn->append->graphicsToBeDrawn->pop->if->setAWTDrawingOnly->graphicsDrawn->append->graphicsToBeDrawn->pop->if->currentGraphics->pageFormat->getImageableX->pageFormat->getImageableY->translate->awtScale->getPageResolutionInternal->currentGraphics->scale->currentGraphics->create->new->ProxyPrintGraphics->return
PrintJob2D#getPageDimension():::Returns the dimensions of the page in pixels:::wid->hgt->scale->if->pageAttributes->getOrigin->pageFormat->getImageableWidth->pageFormat->getImageableHeight->else->pageFormat->getWidth->pageFormat->getHeight->getPageResolutionInternal->return->new->Dimension
PrintJob2D#getPageResolutionInternal()::: print job2 d get page resolution internal:::if->res->pageAttributes->getPrinterResolution->if->return->else->return->else->return
PrintJob2D#getPageResolution():::Returns the resolution of the page in pixels per inch:::return->getPageResolutionInternal
PrintJob2D#lastPageFirst():::Returns true if the last page will be printed first.:::return
PrintJob2D#end():::Ends the print job and does any necessary cleanup.:::graphicsToBeDrawn->close->if->graphicsDrawn->append->graphicsDrawn->closeWhenEmpty->if->printerJobThread->isAlive->try->printerJobThread->join->catch->finally
PrintJob2D#finalize():::Ends this print job once it is no longer referenced.:::end
PrintJob2D#print(Graphics, PageFormat, int):::Prints the page at the specified index into the specified Graphics context in the specified format:::result->graphicsToBeDrawn->append->if->graphicsDrawn->pop->else->return
PrintJob2D#startPrinterJobThread()::: print job2 d start printer job thread:::new->Thread->printerJobThread->start
PrintJob2D#run()::: print job2 d run:::try->attributes->remove->printerJob->print->catch->finally->graphicsToBeDrawn->closeWhenEmpty->graphicsDrawn->close
PrintJob2D.MessageQ#closeWhenEmpty()::: message q close when empty:::while->queue->size->try->wait->catch->finally->notifyAll
PrintJob2D.MessageQ#close()::: message q close:::notifyAll
PrintJob2D.MessageQ#append(Graphics2D)::: message q append:::queued->if->queue->add->notify->return
PrintJob2D.MessageQ#pop()::: message q pop:::g->while->if->queue->size->queue->remove->notify->else->try->wait->catch->finally->return
PrintJob2D.MessageQ#isClosed()::: message q is closed:::return
PrintJob2D#getSize(MediaType)::: print job2 d get size:::dim->new->intArr->for->i->return
PrintJob2D#mapMedia(MediaType)::: print job2 d map media:::media->length->Math->min->for->i->return
PrintJob2D#unMapMedia(MediaSizeName)::: print job2 d un map media:::media->length->Math->min->for->i->return
PrintJob2D#translateInputProps()::: print job2 d translate input props:::if->return->str->props->getProperty->if->if->str->equals->jobAttributes->setDestination->else->if->str->equals->jobAttributes->setDestination->props->getProperty->if->jobAttributes->setPrinter->props->getProperty->if->jobAttributes->setFileName->props->getProperty->if->jobAttributes->Integer->parseInt->setCopies->props->getProperty->props->getProperty->if->if->str->equals->pageAttributes->setOrientationRequested->else->if->str->equals->pageAttributes->setOrientationRequested->props->getProperty->if->if->str->equals->pageAttributes->hashCode->setMedia->else->if->str->equals->pageAttributes->hashCode->setMedia->else->if->str->equals->pageAttributes->hashCode->setMedia->else->if->str->equals->pageAttributes->hashCode->setMedia
PrintJob2D#translateOutputProps()::: print job2 d translate output props:::if->return->str->props->jobAttributes->getDestination->setProperty->jobAttributes->getPrinter->if->str->equals->props->setProperty->jobAttributes->getFileName->if->str->equals->props->setProperty->copies->jobAttributes->getCopies->if->props->setProperty->if->str->equals->props->setProperty->props->pageAttributes->getOrientationRequested->setProperty->media->pageAttributes->getMedia->hashCode->if->else->if->else->if->else->if->else->media->toString->props->setProperty
PrintJob2D#throwPrintToFile()::: print job2 d throw print to file:::security->System->getSecurityManager->printToFilePermission->if->if->new->FilePermission->security->checkPermission
PrintJobAttributeException#getUnsupportedAttributes()::: print job attribute exception get unsupported attributes:::if->return->else->cats->return
PrintJobAttributeException#getUnsupportedValues()::: print job attribute exception get unsupported values:::if->return->else->attrs->return
PrintJobFlavorException#getUnsupportedFlavors()::: print job flavor exception get unsupported flavors:::flavors->return
PrintServiceLookupProvider#getRefreshTime(String)::: print service lookup provider get refresh time:::try->minRefreshTime->Integer->parseInt->return->catch->return->finally
PrintServiceLookupProvider#getWin32PrintLUS()::: print service lookup provider get win32 print s:::if->PrintServiceLookup->lookupDefaultPrintService->return
PrintServiceLookupProvider#getPrintServices()::: print service lookup provider get print services:::security->System->getSecurityManager->if->security->checkPrintJobAccess->if->refreshServices->return
PrintServiceLookupProvider#refreshServices()::: print service lookup provider refresh services:::getAllPrinterNames->if->new->PrintServiceArr->return->newServices->new->PrintServiceArr->defService->getDefaultPrintService->for->p->if->for->j
PrintServiceLookupProvider#getPrintServiceByName(String)::: print service lookup provider get print service by name:::if->name->equals->return->else->printServices->getPrintServices->for->i->return
PrintServiceLookupProvider#matchingService(PrintService, PrintServiceAttributeSet)::: print service lookup provider matching service:::if->attrs->serviceSet->toArray->serviceAttr->for->i->return
PrintServiceLookupProvider#getPrintServices(DocFlavor, AttributeSet)::: print service lookup provider get print services:::security->System->getSecurityManager->if->security->checkPrintJobAccess->requestSet->serviceSet->if->attributes->isEmpty->new->HashPrintRequestAttributeSet->new->HashPrintServiceAttributeSet->attrs->attributes->toArray->for->i->services->if->serviceSet->get->name->serviceSet->get->service->name->getValue->getPrintServiceByName->if->matchingService->new->PrintServiceArr->else->new->PrintServiceArr->else->getPrintServices->if->return->else->matchingServices->new->ArrayList<>->for->i->matchingServices->size->new->PrintServiceArr->return->matchingServices->toArray
PrintServiceLookupProvider#getMultiDocPrintServices(DocFlavor[], AttributeSet)::: print service lookup provider get multi doc print services:::security->System->getSecurityManager->if->security->checkPrintJobAccess->return->new->MultiDocPrintServiceArr
PrintServiceLookupProvider#getDefaultPrintService()::: print service lookup provider get default print service:::security->System->getSecurityManager->if->security->checkPrintJobAccess->getDefaultPrinterName->if->return->if->defaultPrintService->getName->equals->return->if->for->j->if->new->Win32PrintService->return
PrintServiceLookupProvider.PrinterChangeListener#run()::: printer change listener run:::if->while->if->notifyPrinterChange->try->refreshServices->catch->break->finally->else->notifyClosePrinterChange->break
PrintServiceLookupProvider.RemotePrinterChangeListener#compare(String, String)::: remote printer change listener compare:::return->o1->compareTo
PrintServiceLookupProvider.RemotePrinterChangeListener#run()::: remote printer change listener run:::prevRemotePrinters->getRemotePrintersNames->if->Arrays->sort->while->try->Thread->sleep->catch->break->finally->currentRemotePrinters->getRemotePrintersNames->if->Arrays->sort->if->Arrays->equals->refreshServices
PrintServiceLookupProvider#getDefaultPrinterName()::: print service lookup provider get default printer name:::
PrintServiceLookupProvider#getAllPrinterNames()::: print service lookup provider get all printer names:::
PrintServiceLookupProvider#notifyFirstPrinterChange(String)::: print service lookup provider notify first printer change:::
PrintServiceLookupProvider#notifyClosePrinterChange(long)::: print service lookup provider notify close printer change:::
PrintServiceLookupProvider#notifyPrinterChange(long)::: print service lookup provider notify printer change:::
PrintServiceLookupProvider#getRemotePrintersNames()::: print service lookup provider get remote printers names:::
ProxyGraphics#getGraphics()::: proxy graphics get graphics:::return
ProxyGraphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::return->g->create->new->ProxyGraphics
ProxyGraphics#create(int, int, int, int):::Creates a new Graphics object based on this Graphics object, but with a new translation and clip area:::return->g->create->new->ProxyGraphics
ProxyGraphics#translate(int, int):::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system:::g->translate
ProxyGraphics#getColor():::Gets this graphics context's current color.:::return->g->getColor
ProxyGraphics#setColor(Color):::Sets this graphics context's current color to the specified color:::g->setColor
ProxyGraphics#setPaintMode():::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color:::g->setPaintMode
ProxyGraphics#setXORMode(Color):::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color:::g->setXORMode
ProxyGraphics#getFont():::Gets the current font.:::return->g->getFont
ProxyGraphics#setFont(Font):::Sets this graphics context's font to the specified font:::g->setFont
ProxyGraphics#getFontMetrics():::Gets the font metrics of the current font.:::return->g->getFontMetrics
ProxyGraphics#getFontMetrics(Font):::Gets the font metrics for the specified font.:::return->g->getFontMetrics
ProxyGraphics#getClipBounds():::Returns the bounding rectangle of the current clipping area:::return->g->getClipBounds
ProxyGraphics#clipRect(int, int, int, int):::Intersects the current clip with the specified rectangle:::g->clipRect
ProxyGraphics#setClip(int, int, int, int):::Sets the current clip to the rectangle specified by the given coordinates:::g->setClip
ProxyGraphics#getClip():::Gets the current clipping area:::return->g->getClip
ProxyGraphics#setClip(Shape):::Sets the current clipping area to an arbitrary clip shape:::g->setClip
ProxyGraphics#copyArea(int, int, int, int, int, int):::Copies an area of the component by a distance specified by dx and dy:::g->copyArea
ProxyGraphics#drawLine(int, int, int, int):::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.:::g->drawLine
ProxyGraphics#fillRect(int, int, int, int):::Fills the specified rectangle:::g->fillRect
ProxyGraphics#drawRect(int, int, int, int):::Draws the outline of the specified rectangle:::g->drawRect
ProxyGraphics#clearRect(int, int, int, int):::Clears the specified rectangle by filling it with the background color of the current drawing surface:::g->clearRect
ProxyGraphics#drawRoundRect(int, int, int, int, int, int):::Draws an outlined round-cornered rectangle using this graphics context's current color:::g->drawRoundRect
ProxyGraphics#fillRoundRect(int, int, int, int, int, int):::Fills the specified rounded corner rectangle with the current color:::g->fillRoundRect
ProxyGraphics#draw3DRect(int, int, int, int, boolean):::Draws a 3-D highlighted outline of the specified rectangle:::g->draw3DRect
ProxyGraphics#fill3DRect(int, int, int, int, boolean):::Paints a 3-D highlighted rectangle filled with the current color:::g->fill3DRect
ProxyGraphics#drawOval(int, int, int, int):::Draws the outline of an oval:::g->drawOval
ProxyGraphics#fillOval(int, int, int, int):::Fills an oval bounded by the specified rectangle with the current color.:::g->fillOval
ProxyGraphics#drawArc(int, int, int, int, int, int):::Draws the outline of a circular or elliptical arc covering the specified rectangle:::g->drawArc
ProxyGraphics#fillArc(int, int, int, int, int, int):::Fills a circular or elliptical arc covering the specified rectangle:::g->fillArc
ProxyGraphics#drawPolyline(int[], int[], int):::Draws a sequence of connected lines defined by arrays of x and y coordinates:::g->drawPolyline
ProxyGraphics#drawPolygon(int[], int[], int):::Draws a closed polygon defined by arrays of x and y coordinates:::g->drawPolygon
ProxyGraphics#drawPolygon(Polygon):::Draws the outline of a polygon defined by the specified Polygon object.:::g->drawPolygon
ProxyGraphics#fillPolygon(int[], int[], int):::Fills a closed polygon defined by arrays of x and y coordinates:::g->fillPolygon
ProxyGraphics#fillPolygon(Polygon):::Fills the polygon defined by the specified Polygon object with the graphics context's current color:::g->fillPolygon
ProxyGraphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::g->drawString
ProxyGraphics#drawString(AttributedCharacterIterator, int, int):::Draws the text given by the specified iterator, using this graphics context's current color:::g->drawString
ProxyGraphics#drawChars(char[], int, int, int, int):::Draws the text given by the specified character array, using this graphics context's current font and color:::g->drawChars
ProxyGraphics#drawBytes(byte[], int, int, int, int):::Draws the text given by the specified byte array, using this graphics context's current font and color:::g->drawBytes
ProxyGraphics#drawImage(Image, int, int, ImageObserver):::Draws as much of the specified image as is currently available:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, int, int, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, Color, ImageObserver):::Draws as much of the specified image as is currently available:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, int, int, Color, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::return->g->drawImage
ProxyGraphics#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::return->g->drawImage
ProxyGraphics#dispose():::Disposes of this graphics context and releases any system resources that it is using:::g->dispose
ProxyGraphics#finalize():::Empty finalizer as no clean up needed here.:::
ProxyGraphics#toString():::Returns a String object representing this                        Graphics object's value.:::return->getClass->getName->getFont->getColor
ProxyGraphics#getClipRect()::: proxy graphics get clip rect:::return->g->getClipRect
ProxyGraphics#hitClip(int, int, int, int):::Returns true if the specified rectangular area intersects the bounding rectangle of the current clipping area:::return->g->hitClip
ProxyGraphics#getClipBounds(Rectangle):::Returns the bounding rectangle of the current clipping area:::return->g->getClipBounds
ProxyGraphics2D#getDelegate():::Return the Graphics2D object that does the drawing for this instance.:::return
ProxyGraphics2D#setDelegate(Graphics2D):::Set the Graphics2D instance which will do the drawing.:::
ProxyGraphics2D#getPrinterJob()::: proxy graphics2 d get printer job:::return
ProxyGraphics2D#getDeviceConfiguration():::Returns the device configuration associated with this Graphics2D.:::return->getPrinterGraphicsConfig
ProxyGraphics2D#create():::Creates a new Graphics object that is a copy of this Graphics object.:::return->mGraphics->create->new->ProxyGraphics2D
ProxyGraphics2D#translate(int, int):::Translates the origin of the graphics context to the point (x,&nbsp;y) in the current coordinate system:::mGraphics->translate
ProxyGraphics2D#translate(double, double):::Concatenates the current transform of this Graphics2D with a translation transformation:::mGraphics->translate
ProxyGraphics2D#rotate(double):::Concatenates the current transform of this Graphics2D with a rotation transformation:::mGraphics->rotate
ProxyGraphics2D#rotate(double, double, double):::Concatenates the current transform of this Graphics2D with a translated rotation transformation:::mGraphics->rotate
ProxyGraphics2D#scale(double, double):::Concatenates the current transform of this Graphics2D with a scaling transformation:::mGraphics->scale
ProxyGraphics2D#shear(double, double):::Concatenates the current transform of this Graphics2D with a shearing transformation:::mGraphics->shear
ProxyGraphics2D#getColor():::Gets this graphics context's current color.:::return->mGraphics->getColor
ProxyGraphics2D#setColor(Color):::Sets this graphics context's current color to the specified color:::mGraphics->setColor
ProxyGraphics2D#setPaintMode():::Sets the paint mode of this graphics context to overwrite the destination with this graphics context's current color:::mGraphics->setPaintMode
ProxyGraphics2D#setXORMode(Color):::Sets the paint mode of this graphics context to alternate between this graphics context's current color and the new specified color:::mGraphics->setXORMode
ProxyGraphics2D#getFont():::Gets the current font.:::return->mGraphics->getFont
ProxyGraphics2D#setFont(Font):::Sets this graphics context's font to the specified font:::mGraphics->setFont
ProxyGraphics2D#getFontMetrics(Font):::Gets the font metrics for the specified font.:::return->mGraphics->getFontMetrics
ProxyGraphics2D#getFontRenderContext():::Get the rendering context of the font within this Graphics2D context.:::return->mGraphics->getFontRenderContext
ProxyGraphics2D#getClipBounds():::Returns the bounding rectangle of the current clipping area:::return->mGraphics->getClipBounds
ProxyGraphics2D#clipRect(int, int, int, int):::Intersects the current clip with the specified rectangle:::mGraphics->clipRect
ProxyGraphics2D#setClip(int, int, int, int):::Sets the current clip to the rectangle specified by the given coordinates:::mGraphics->setClip
ProxyGraphics2D#getClip():::Gets the current clipping area.:::return->mGraphics->getClip
ProxyGraphics2D#setClip(Shape):::Sets the current clipping area to an arbitrary clip shape:::mGraphics->setClip
ProxyGraphics2D#copyArea(int, int, int, int, int, int):::Copies an area of the component by a distance specified by dx and dy:::mGraphics->copyArea
ProxyGraphics2D#drawLine(int, int, int, int):::Draws a line, using the current color, between the points (x1,&nbsp;y1) and (x2,&nbsp;y2) in this graphics context's coordinate system.:::mGraphics->drawLine
ProxyGraphics2D#fillRect(int, int, int, int):::Fills the specified rectangle:::mGraphics->fillRect
ProxyGraphics2D#clearRect(int, int, int, int):::Clears the specified rectangle by filling it with the background color of the current drawing surface:::mGraphics->clearRect
ProxyGraphics2D#drawRoundRect(int, int, int, int, int, int):::Draws an outlined round-cornered rectangle using this graphics context's current color:::mGraphics->drawRoundRect
ProxyGraphics2D#fillRoundRect(int, int, int, int, int, int):::Fills the specified rounded corner rectangle with the current color:::mGraphics->fillRoundRect
ProxyGraphics2D#drawOval(int, int, int, int):::Draws the outline of an oval:::mGraphics->drawOval
ProxyGraphics2D#fillOval(int, int, int, int):::Fills an oval bounded by the specified rectangle with the current color.:::mGraphics->fillOval
ProxyGraphics2D#drawArc(int, int, int, int, int, int):::Draws the outline of a circular or elliptical arc covering the specified rectangle:::mGraphics->drawArc
ProxyGraphics2D#fillArc(int, int, int, int, int, int):::Fills a circular or elliptical arc covering the specified rectangle:::mGraphics->fillArc
ProxyGraphics2D#drawPolyline(int[], int[], int):::Draws a sequence of connected lines defined by arrays of x and y coordinates:::mGraphics->drawPolyline
ProxyGraphics2D#drawPolygon(int[], int[], int):::Draws a closed polygon defined by arrays of x and y coordinates:::mGraphics->drawPolygon
ProxyGraphics2D#fillPolygon(int[], int[], int):::Fills a closed polygon defined by arrays of x and y coordinates:::mGraphics->fillPolygon
ProxyGraphics2D#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::mGraphics->drawString
ProxyGraphics2D#drawString(AttributedCharacterIterator, int, int):::Draws the text given by the specified iterator, using this graphics context's current color:::mGraphics->drawString
ProxyGraphics2D#drawString(AttributedCharacterIterator, float, float):::Draws the text given by the specified iterator, using this graphics context's current color:::mGraphics->drawString
ProxyGraphics2D#drawImage(Image, int, int, ImageObserver):::Draws as much of the specified image as is currently available:::return->mGraphics->drawImage
ProxyGraphics2D#drawImage(Image, int, int, int, int, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::return->mGraphics->drawImage
ProxyGraphics2D#drawImage(Image, int, int, Color, ImageObserver):::Draws as much of the specified image as is currently available:::if->return->result->if->needToCopyBgColorImage->imageCopy->getBufferedImageCopy->mGraphics->drawImage->else->mGraphics->drawImage->return
ProxyGraphics2D#drawImage(Image, int, int, int, int, Color, ImageObserver):::Draws as much of the specified image as has already been scaled to fit inside the specified rectangle:::if->return->result->if->needToCopyBgColorImage->imageCopy->getBufferedImageCopy->mGraphics->drawImage->else->mGraphics->drawImage->return
ProxyGraphics2D#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::return->mGraphics->drawImage
ProxyGraphics2D#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver):::Draws as much of the specified area of the specified image as is currently available, scaling it on the fly to fit inside the specified area of the destination drawable surface:::if->return->result->if->needToCopyBgColorImage->imageCopy->getBufferedImageCopy->mGraphics->drawImage->else->mGraphics->drawImage->return
ProxyGraphics2D#needToCopyBgColorImage(Image):::Return true if drawing img will invoke a Java2D bug (#4258675):::needToCopy->transform->getTransform->return->transform->getType
ProxyGraphics2D#getBufferedImageCopy(Image, Color):::Return a new BufferedImage that contains a copy of the provided Image where its transparent pixels have been replaced by bgcolor:::imageCopy->width->img->getWidth->height->img->getHeight->if->imageType->if->bufImage->bufImage->getType->else->new->BufferedImage->g->imageCopy->createGraphics->g->drawImage->g->dispose->else->return
ProxyGraphics2D#drawRenderedImage(RenderedImage, AffineTransform):::Draws an image, applying a transform from image space into user space before drawing:::mGraphics->drawRenderedImage
ProxyGraphics2D#drawRenderableImage(RenderableImage, AffineTransform)::: proxy graphics2 d draw renderable image:::if->return->pipeTransform->getTransform->concatTransform->new->AffineTransform->concatTransform->concatenate->reverseTransform->rc->new->RenderContext->try->pipeTransform->createInverse->catch->new->RenderContext->new->AffineTransform->finally->rendering->img->createRendering->drawRenderedImage
ProxyGraphics2D#dispose():::Disposes of this graphics context and releases any system resources that it is using:::mGraphics->dispose
ProxyGraphics2D#finalize():::Empty finalizer as no clean up needed here.:::
ProxyGraphics2D#draw(Shape):::Strokes the outline of a Shape using the settings of the current graphics state:::mGraphics->draw
ProxyGraphics2D#drawImage(Image, AffineTransform, ImageObserver):::Draws an image, applying a transform from image space into user space before drawing:::return->mGraphics->drawImage
ProxyGraphics2D#drawImage(BufferedImage, BufferedImageOp, int, int):::Draws a BufferedImage that is filtered with a BufferedImageOp:::mGraphics->drawImage
ProxyGraphics2D#drawString(String, float, float):::Draws a string of text:::mGraphics->drawString
ProxyGraphics2D#drawGlyphVector(GlyphVector, float, float):::Draws a GlyphVector:::mGraphics->drawGlyphVector
ProxyGraphics2D#fill(Shape):::Fills the interior of a Shape using the settings of the current graphics state:::mGraphics->fill
ProxyGraphics2D#hit(Rectangle, Shape, boolean):::Checks to see if the outline of a Shape intersects the specified Rectangle in device space:::return->mGraphics->hit
ProxyGraphics2D#setComposite(Composite):::Sets the Composite in the current graphics state:::mGraphics->setComposite
ProxyGraphics2D#setPaint(Paint):::Sets the Paint in the current graphics state.:::mGraphics->setPaint
ProxyGraphics2D#setStroke(Stroke):::Sets the Stroke in the current graphics state.:::mGraphics->setStroke
ProxyGraphics2D#setRenderingHint(Key, Object):::Sets the preferences for the rendering algorithms:::mGraphics->setRenderingHint
ProxyGraphics2D#getRenderingHint(Key):::Returns the preferences for the rendering algorithms.:::return->mGraphics->getRenderingHint
ProxyGraphics2D#setRenderingHints(Map):::Sets the preferences for the rendering algorithms:::mGraphics->setRenderingHints
ProxyGraphics2D#addRenderingHints(Map):::Adds a number of preferences for the rendering algorithms:::mGraphics->addRenderingHints
ProxyGraphics2D#getRenderingHints():::Gets the preferences for the rendering algorithms:::return->mGraphics->getRenderingHints
ProxyGraphics2D#transform(AffineTransform):::Composes a Transform object with the transform in this Graphics2D according to the rule last-specified-first-applied:::mGraphics->transform
ProxyGraphics2D#setTransform(AffineTransform):::Sets the Transform in the current graphics state.:::mGraphics->setTransform
ProxyGraphics2D#getTransform():::Returns the current Transform in the Graphics2D state.:::return->mGraphics->getTransform
ProxyGraphics2D#getPaint():::Returns the current Paint in the Graphics2D state.:::return->mGraphics->getPaint
ProxyGraphics2D#getComposite():::Returns the current Composite in the Graphics2D state.:::return->mGraphics->getComposite
ProxyGraphics2D#setBackground(Color):::Sets the background color in this context used for clearing a region:::mGraphics->setBackground
ProxyGraphics2D#getBackground():::Returns the background color used for clearing a region.:::return->mGraphics->getBackground
ProxyGraphics2D#getStroke():::Returns the current Stroke in the Graphics2D state.:::return->mGraphics->getStroke
ProxyGraphics2D#clip(Shape):::Intersects the current clip with the interior of the specified Shape and sets the current clip to the resulting intersection:::mGraphics->clip
ProxyPrintGraphics#getPrintJob():::Returns the PrintJob object from which this PrintGraphics object originated.:::return
ProxyPrintGraphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::return->getGraphics->create->new->ProxyPrintGraphics
ProxyPrintGraphics#create(int, int, int, int):::Creates a new Graphics object based on this Graphics object, but with a new translation and clip area:::g->getGraphics->create->return->new->ProxyPrintGraphics
ProxyPrintGraphics#getGraphics()::: proxy print graphics get graphics:::return->super->getGraphics
ProxyPrintGraphics#dispose()::: proxy print graphics dispose:::super->dispose
PSPathGraphics#create():::Creates a new Graphics object that is a copy of this Graphics object.:::return->getDelegate->create->getPrinterJob->getPrintable->getPageFormat->getPageIndex->canDoRedraws->new->PSPathGraphics
PSPathGraphics#fill(Shape, Color):::Override the inherited implementation of fill so that we can generate PostScript in user space rather than device space.:::s->new->AffineTransform->getPathIterator->deviceFill
PSPathGraphics#drawString(String, int, int):::Draws the text given by the specified string, using this graphics context's current font and color:::drawString
PSPathGraphics#drawString(String, float, float):::Renders the text specified by the specified String, using the current Font and Paint attributes in the Graphics2D context:::getFont->getFontRenderContext->drawString
PSPathGraphics#canDrawStringToWidth()::: path graphics can draw string to width:::return
PSPathGraphics#platformFontCount(Font, String)::: path graphics platform font count:::psPrinterJob->getPrinterJob->return->psPrinterJob->platformFontCount
PSPathGraphics#drawString(String, float, float, Font, FontRenderContext, float)::: path graphics draw string:::if->str->length->return->if->font->hasLayoutAttributes->layout->new->TextLayout->layout->draw->return->oldFont->getFont->if->oldFont->equals->setFont->else->drawnWithPS->translateX->translateY->fontisTransformed->getFont->isTransformed->if->fontTx->getFont->getTransform->transformType->fontTx->getType->if->fontTx->getTranslateX->fontTx->getTranslateY->if->Math->abs->if->Math->abs->directToPS->if->psPrinterJob->getPrinterJob->if->psPrinterJob->getFont->setFont->try->psPrinterJob->getPaint->setColor->catch->if->setFont->throw->new->IllegalArgumentException->finally->psPrinterJob->getTransform->setTransform->psPrinterJob->getClip->setClip->psPrinterJob->textOut->if->if->setFont->super->drawString->if->setFont
PSPathGraphics#drawImageToPlatform(Image, AffineTransform, Color, int, int, int, int, boolean):::The various drawImage() methods for WPathGraphics are all decomposed into an invocation of drawImageToPlatform:::img->getBufferedImage->if->return->psPrinterJob->getPrinterJob->fullTransform->getTransform->if->new->AffineTransform->fullTransform->concatenate->fullMatrix->new->doubleArr->fullTransform->getMatrix->unitVectorX->new->Point2D.Float->unitVectorY->new->Point2D.Float->fullTransform->deltaTransform->fullTransform->deltaTransform->origin->new->Point2D.Float->scaleX->unitVectorX->distance->scaleY->unitVectorY->distance->devResX->psPrinterJob->getXRes->devResY->psPrinterJob->getYRes->devScaleX->devScaleY->transformType->fullTransform->getType->clampScale->if->if->if->if->rotTransform->new->AffineTransform->srcRect->new->Rectangle2D.Float->rotShape->rotTransform->createTransformedShape->rotBounds->rotShape->getBounds2D->rotBounds->rotBounds->getX->rotBounds->getY->rotBounds->getWidth->rotBounds->getHeight->setRect->boundsWidth->rotBounds->getWidth->boundsHeight->rotBounds->getHeight->if->drawOpaque->if->hasTransparentPixels->if->isBitmaskTransparency->if->if->drawBitmaskImage->return->else->if->bgcolor->getTransparency->if->canDoRedraws->else->if->img->getWidth->img->getHeight->canDoRedraws->if->fullTransform->getMatrix->tx->new->AffineTransform->rect->new->Rectangle2D.Float->shape->fullTransform->createTransformedShape->region->shape->getBounds2D->region->region->getX->region->getY->region->getWidth->region->getHeight->setRect->w->region->getWidth->h->region->getHeight->nbytes->maxBytes->origDpi->dpi->scaleFactor->maxSFX->maxSFY->maxSF->minDpi->if->while->if->region->region->getX->region->getY->region->getWidth->region->getHeight->setRect->psPrinterJob->getTransform->getClip->saveState->return->else->deepImage->rotBounds->getWidth->rotBounds->getHeight->new->BufferedImage->imageGraphics->deepImage->createGraphics->imageGraphics->deepImage->getWidth->deepImage->getHeight->clipRect->imageGraphics->rotBounds->getX->rotBounds->getY->translate->imageGraphics->transform->if->imageGraphics->drawImage->holdClip->getClip->oldClip->getTransform->createTransformedShape->sat->AffineTransform->getScaleInstance->imgClip->sat->createTransformedShape->imgArea->new->Area->oldArea->new->Area->imgArea->intersect->psPrinterJob->setClip->scaledBounds->rotBounds->getX->rotBounds->getY->rotBounds->getWidth->rotBounds->getHeight->new->Rectangle2D.Float->tile->deepImage->getRaster->psPrinterJob->tile->getDataStorage->Math->rint->Math->rint->deepImage->getWidth->deepImage->getHeight->deepImage->getWidth->deepImage->getHeight->drawImageBGR->psPrinterJob->getTransform->createTransformedShape->setClip->imageGraphics->dispose->return
PSPathGraphics#redrawRegion(Rectangle2D, double, double, Shape, AffineTransform)::: path graphics redraw region:::psPrinterJob->getPrinterJob->painter->getPrintable->pageFormat->getPageFormat->pageIndex->getPageIndex->deepImage->region->getWidth->region->getHeight->new->BufferedImage->g->deepImage->createGraphics->proxy->new->ProxyGraphics2D->proxy->setColor->proxy->deepImage->getWidth->deepImage->getHeight->fillRect->proxy->deepImage->getWidth->deepImage->getHeight->clipRect->proxy->region->getX->region->getY->translate->sourceResX->psPrinterJob->getXRes->sourceResY->psPrinterJob->getYRes->proxy->scale->proxy->psPrinterJob->pageFormat->getPaper->getPhysicalPrintableX->psPrinterJob->getXRes->psPrinterJob->pageFormat->getPaper->getPhysicalPrintableY->psPrinterJob->getYRes->translate->proxy->getPageFormat->getMatrix->new->AffineTransform->transform->proxy->setPaint->painter->print->g->dispose->psPrinterJob->savedTransform->createTransformedShape->setClip->scaledBounds->region->getX->region->getY->region->getWidth->region->getHeight->new->Rectangle2D.Float->tile->deepImage->getRaster->psPrinterJob->tile->getDataStorage->deepImage->getWidth->deepImage->getHeight->deepImage->getWidth->deepImage->getHeight->drawImageBGR
PSPathGraphics#deviceFill(PathIterator, Color)::: path graphics device fill:::psPrinterJob->getPrinterJob->psPrinterJob->getTransform->getClip->deviceFill
PSPathGraphics#deviceFrameRect(int, int, int, int, Color)::: path graphics device frame rect:::new->Rectangle2D.Float->draw
PSPathGraphics#deviceDrawLine(int, int, int, int, Color)::: path graphics device draw line:::new->Line2D.Float->draw
PSPathGraphics#deviceFillRect(int, int, int, int, Color)::: path graphics device fill rect:::new->Rectangle2D.Float->fill
PSPathGraphics#deviceClip(PathIterator)::: path graphics device clip:::
PSPrinterJob#initProps()::: printer job init props:::jhome->System->getProperty->if->ulocale->SunToolkit->getStartupLocale->getLanguage->try->f->new->File->if->f->canRead->new->File->if->f->canRead->new->File->if->f->canRead->new->File->if->f->canRead->return->in->f->getPath->new->FileInputStream->new->BufferedInputStream->props->new->Properties->props->load->in->close->return->catch->return->finally->return
PSPrinterJob#printDialog():::Presents the user a dialog for changing properties of the print job interactively.:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->if->new->HashPrintRequestAttributeSet->attributes->getCopies->new->Copies->add->attributes->getJobName->new->JobName->add->doPrint->dts->attributes->get->if->attributes->remove->printDialog->attributes->add->else->printDialog->if->jobName->attributes->get->if->jobName->getValue->setJobName->copies->attributes->get->if->copies->getValue->setCopies->dest->attributes->get->if->try->dest->getURI->new->File->getPath->catch->finally->else->pServ->getPrintService->if->pServ->getName->if->psaSet->pServ->getAttributes->if->psaSet->get->toString->return
PSPrinterJob#setAttributes(PrintRequestAttributeSet)::: printer job set attributes:::super->setAttributes->if->return->attr->attributes->get->if->customTray->choice->customTray->getChoiceName->if
PSPrinterJob#startDoc():::Invoked by the RasterPrinterJob super class this method is called to mark the start of a document.:::output->if->if->getPrintService->sps->getPrintService->if->sps->isDisposed->throw->new->PrinterException->sps->getOutputStream->if->throw->new->PrinterException->else->if->if->try->new->File->new->FileOutputStream->catch->abortDoc->throw->new->PrinterIOException->finally->else->po->new->PrinterOpener->doPrivileged->if->throw->new->BufferedOutputStream->new->PrintStream->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->if->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->else->cnt->Integer->mFontProps->getProperty->parseInt->for->i->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->mPSStream->println->if->pageFormat->getPageable->getPageFormat->paperHeight->pageFormat->getPaper->getHeight->paperWidth->pageFormat->getPaper->getWidth->mPSStream->print->pservice->getPrintService->isPS->new->java.security.PrivilegedAction<Boolean>->doPrivileged->if->mPSStream->print->mPSStream->print->mPSStream->isCollated->print->mPSStream->getCopiesInt->print->if->if->mPSStream->print->else->if->mPSStream->print->mPSStream->println->mPSStream->println
PSPrinterJob.PrinterOpener#run()::: printer opener run:::try->Files->createTempFile->toFile->spoolFile->deleteOnExit->new->FileOutputStream->return->catch->new->PrinterIOException->finally->return
PSPrinterJob.PrinterSpooler#handleProcessFailure(Process, String[], int)::: printer spooler handle process failure:::try->sw->new->StringWriter->pw->new->PrintWriter->pw->append->Integer->toString->append->pw->append->foreach->pw->append->append->append->try->is->failedProcess->getErrorStream->isr->new->InputStreamReader->br->new->BufferedReader->while->br->ready->pw->println->pw->append->br->readLine->append->catch->finally->pw->flush->throw->sw->toString->new->IOException->catch->finally
PSPrinterJob.PrinterSpooler#run()::: printer spooler run:::if->spoolFile->exists->new->PrinterException->return->try->fileName->spoolFile->getAbsolutePath->execCmd->getJobNameInt->printExecCmd->process->Runtime->getRuntime->exec->process->waitFor->result->process->exitValue->if->handleProcessFailure->catch->new->PrinterIOException->ie->toString->new->PrinterException->finally->spoolFile->delete->return
PSPrinterJob#abortDoc():::Invoked if the application cancelled the printjob.:::if->mPSStream->close->new->java.security.PrivilegedAction<Object>->doPrivileged
PSPrinterJob#endDoc():::Invoked by the RasterPrintJob super class this method is called after that last page has been imaged.:::if->mPSStream->println->mPSStream->flush->if->mPSStream->checkError->abortDoc->throw->new->PrinterException->if->mPSStream->close->if->pServ->getPrintService->if->pServ->getName->if->psaSet->pServ->getAttributes->if->psaSet->get->toString->spooler->new->PrinterSpooler->doPrivileged->if->throw
PSPrinterJob#getCoordPrep()::: printer job get coord prep:::return->getXRes->getYRes
PSPrinterJob#startPage(PageFormat, Printable, int, boolean):::The RasterPrintJob super class calls this method at the start of each page.:::paperHeight->pageFormat->getPaper->getHeight->paperWidth->pageFormat->getPaper->getWidth->pageNumber->new->ArrayList<>->mGStateStack->new->GState->add->mPSStream->println->if->mPSStream->print->pservice->getPrintService->isPS->new->java.security.PrivilegedAction<Boolean>->doPrivileged->if->mPSStream->print->mPSStream->println->mPSStream->println->mPSStream->getCoordPrep->println
PSPrinterJob#endPage(PageFormat, Printable, int):::The RastePrintJob super class calls this method at the end of each page.:::mPSStream->println->mPSStream->println
PSPrinterJob#drawImageBGR(byte[], float, float, float, float, float, float, float, float, int, int):::Convert the 24 bit BGR image buffer represented by image to PostScript:::new->AffineTransform->setTransform->prepDrawing->intSrcWidth->intSrcHeight->mPSStream->println->psBytesPerRow->while->mPSStream->println->mPSStream->println->mPSStream->println->index->rgbData->new->byteArr->try->for->i->catch->finally->mPSStream->println
PSPrinterJob#printBand(byte[], int, int, int, int):::Prints the contents of the array of ints, 'data' to the current page:::mPSStream->println->psBytesPerRow->while->mPSStream->println->mPSStream->println->mPSStream->println->index->rgbData->new->byteArr->try->for->i->catch->throw->new->PrinterIOException->finally->mPSStream->println
PSPrinterJob#createPathGraphics(PeekGraphics, PrinterJob, Printable, PageFormat, int)::: printer job create path graphics:::pathGraphics->metrics->peekGraphics->getMetrics->if->metrics->hasNonSolidColors->metrics->hasCompositing->else->bufferedImage->new->BufferedImage->bufferedGraphics->bufferedImage->createGraphics->canRedraw->peekGraphics->getAWTDrawingOnly->new->PSPathGraphics->return
PSPrinterJob#selectClipPath():::Intersect the gstate's current path with the current clip and make the result the new clip.:::mPSStream->println
PSPrinterJob#setClip(Shape)::: printer job set clip:::
PSPrinterJob#setTransform(AffineTransform)::: printer job set transform:::
PSPrinterJob#setFont(Font):::Set the current PostScript font:::return
PSPrinterJob#getPSFontIndexArray(Font, CharsetString[]):::Given an array of CharsetStrings that make up a run of text, this routine converts each CharsetString to an index into our PostScript font list:::psFont->if->new->intArr->for->i->return
PSPrinterJob#escapeParens(String)::: printer job escape parens:::if->str->indexOf->str->indexOf->return->else->count->pos->while->str->indexOf->while->str->indexOf->inArr->str->toCharArray->outArr->new->charArr->for->i->return->new->String
PSPrinterJob#platformFontCount(Font, String)::: printer job platform font count:::if->return->peer->FontAccess->getFontAccess->getFontPeer->acs->peer->makeMultiCharsetString->if->return->psFonts->getPSFontIndexArray->return
PSPrinterJob#textOut(Graphics, String, float, float, Font, FontRenderContext, float)::: printer job text out:::didText->if->return->else->prepDrawing->removeControlChars->if->str->length->return->peer->FontAccess->getFontAccess->getFontPeer->acs->peer->makeMultiCharsetString->if->return->psFonts->getPSFontIndexArray->if->for->i->else->return
PSPrinterJob#setFillMode(int):::Set the current path rule to be either FILL_EVEN_ODD (using the even-odd file rule) or FILL_WINDING (using the non-zero winding rule.):::switch->break->break->throw->new->IllegalArgumentException
PSPrinterJob#setColor(Color):::Set the printer's current color to be that defined by color:::
PSPrinterJob#fillPath():::Fill the current path using the current fill mode and color.:::mPSStream->println
PSPrinterJob#beginPath():::Called to mark the start of a new path.:::prepDrawing->mPSStream->println
PSPrinterJob#closeSubpath():::Close the current subpath by appending a straight line from the current point to the subpath's starting point.:::mPSStream->println
PSPrinterJob#moveTo(float, float):::Generate PostScript to move the current pen position to (x, y).:::mPSStream->trunc->trunc->println
PSPrinterJob#lineTo(float, float):::Generate PostScript to draw a line from the current pen position to (x, y).:::mPSStream->trunc->trunc->println
PSPrinterJob#bezierTo(float, float, float, float, float, float):::Add to the current path a bezier curve formed by the current pen position and the method parameters which are two control points and an ending point.:::mPSStream->trunc->trunc->trunc->trunc->trunc->trunc->println
PSPrinterJob#trunc(float)::: printer job trunc:::af->Math->abs->if->Math->round->return->Float->toString
PSPrinterJob#getPenX():::Return the x coordinate of the pen in the current path.:::return
PSPrinterJob#getPenY():::Return the y coordinate of the pen in the current path.:::return
PSPrinterJob#getXRes():::Return the x resolution of the coordinates to be rendered.:::return
PSPrinterJob#getYRes():::Return the y resolution of the coordinates to be rendered.:::return
PSPrinterJob#setXYRes(double, double):::Set the resolution at which to print.:::
PSPrinterJob#getPhysicalPrintableX(Paper):::For PostScript the origin is in the upper-left of the paper not at the imageable area corner.:::return
PSPrinterJob#getPhysicalPrintableY(Paper):::For PostScript the origin is in the upper-left of the paper not at the imageable area corner.:::return
PSPrinterJob#getPhysicalPrintableWidth(Paper)::: printer job get physical printable width:::return->p->getImageableWidth
PSPrinterJob#getPhysicalPrintableHeight(Paper)::: printer job get physical printable height:::return->p->getImageableHeight
PSPrinterJob#getPhysicalPageWidth(Paper)::: printer job get physical page width:::return->p->getWidth
PSPrinterJob#getPhysicalPageHeight(Paper)::: printer job get physical page height:::return->p->getHeight
PSPrinterJob#getNoncollatedCopies():::Returns how many times each page in the book should be consecutively printed by PrintJob:::return
PSPrinterJob#getCollatedCopies()::: printer job get collated copies:::return
PSPrinterJob#printExecCmd(String, String, boolean, String, int, String)::: printer job print exec cmd:::PRINTER->OPTIONS->JOBTITLE->COPIES->NOSHEET->pFlags->execCmd->ncomps->n->if->printer->equals->printer->equals->if->options->equals->if->jobTitle->equals->if->if->else->if->getPrintService->isAttributeCategorySupported->osname->System->getProperty->if->osname->equals->osname->contains->new->StringArr->if->if->if->if->else->if->getPrintService->isAttributeCategorySupported->if->else->new->StringArr->if->if->if->if->else->if->getPrintService->isAttributeCategorySupported->if->return
PSPrinterJob#swapBGRtoRGB(byte[], int, byte[])::: printer job swap rto b:::destIndex->while->return
PSPrinterJob#makeCharsetName(String, char[])::: printer job make charset name:::if->name->equals->name->equals->return->else->if->name->equals->for->i->return->else->if->name->startsWith->for->i->return->else->return->name->toLowerCase
PSPrinterJob#prepDrawing()::: printer job prep drawing:::while->isOuterGState->getGState->canSetClip->getGState->equals->grestore->getGState->emitPSColor->if->isOuterGState->gsave->getGState->emitTransform->getGState->emitPSClip
PSPrinterJob#getGState():::Return the GState that is currently on top of the GState stack:::count->mGStateStack->size->return->mGStateStack->get
PSPrinterJob#gsave():::Emit a PostScript gsave command and add a new GState on to our stack which represents the printer's gstate stack.:::oldGState->getGState->mGStateStack->new->GState->add->mPSStream->println
PSPrinterJob#grestore():::Emit a PostScript grestore command and remove a GState from our stack which represents the printer's gstate stack.:::count->mGStateStack->size->mGStateStack->remove->mPSStream->println
PSPrinterJob#isOuterGState():::Return true if the current GState is the outermost GState and therefore should not be restored.:::return->mGStateStack->size
PSPrinterJob.GState#canSetClip(Shape)::: state can set clip:::return->mClip->equals
PSPrinterJob.GState#emitPSClip(Shape)::: state emit clip:::if->mClip->equals->saveFillOp->saveClipOp->clip->new->AffineTransform->getPathIterator->convertToPSPath->selectClipPath
PSPrinterJob.GState#emitTransform(AffineTransform)::: state emit transform:::if->transform->equals->matrix->new->doubleArr->transform->getMatrix->mPSStream->println
PSPrinterJob.GState#emitPSColor(Color)::: state emit color:::if->color->equals->rgb->color->getRGBColorComponents->if->mPSStream->println->else->mPSStream->println
PSPrinterJob.GState#emitPSFont(int, float)::: state emit font:::mPSStream->println
PSPrinterJob#convertToPSPath(PathIterator):::Given a Java2D PathIterator instance, this method translates that into a PostScript path..:::segment->new->floatArr->segmentType->fillRule->if->pathIter->getWindingRule->else->beginPath->setFillMode->while->pathIter->isDone->pathIter->currentSegment->switch->moveTo->break->lineTo->break->lastX->getPenX->lastY->getPenY->c1x->c1y->c2x->c2y->bezierTo->break->bezierTo->break->closeSubpath->break->pathIter->next
PSPrinterJob#deviceFill(PathIterator, Color, AffineTransform, Shape)::: printer job device fill:::if->Double->tx->getScaleX->isNaN->Double->tx->getScaleY->isNaN->Double->tx->getShearX->isNaN->Double->tx->getShearY->isNaN->Double->tx->getTranslateX->isNaN->Double->tx->getTranslateY->isNaN->return->setTransform->setClip->setColor->convertToPSPath->mPSStream->println->selectClipPath->fillPath->mPSStream->println
PSPrinterJob#rlEncode(byte[])::: printer job rl encode:::inIndex->outIndex->startIndex->runLen->outArr->new->byteArr->while->if->while->if->continue->while->for->i->encodedData->new->byteArr->System->arraycopy->return
PSPrinterJob#ascii85Encode(byte[])::: printer job ascii85 encode:::outArr->new->byteArr->p1->p2->p3->p4->pling->i->olen->val->rem->while->if->else->if->n->while->append->while->c->new->byteArr->for->b->retArr->new->byteArr->System->arraycopy->return
PSPrinterJob.PluginPrinter#printPluginPSHeader()::: plugin printer print plugin header:::stream->println
PSPrinterJob.PluginPrinter#printPluginApplet()::: plugin printer print plugin applet:::try->epsPrinter->print->catch->finally
PSPrinterJob.PluginPrinter#printPluginPSTrailer()::: plugin printer print plugin trailer:::stream->println->stream->flush
PSPrinterJob.PluginPrinter#printAll()::: plugin printer print all:::printPluginPSHeader->printPluginApplet->printPluginPSTrailer
PSPrinterJob.PluginPrinter#print(Graphics, PageFormat, int)::: plugin printer print:::if->return->else->applet->printAll->return
PSPrinterJob.EPSPrinter#print()::: printer print:::stream->println->stream->println->stream->println->stream->println->stream->new->java.util.Date->println->stream->println->stream->println->stream->println->new->PSPrinterJob->job->startDoc->try->job->printPage->catch->if->throw->else->throw->t->toString->new->PrinterException->finally->stream->println->stream->println->job->endDoc->stream->flush
PSPrinterJob.EPSPrinter#getNumberOfPages()::: printer get number of pages:::return
PSPrinterJob.EPSPrinter#getPageFormat(int)::: printer get page format:::if->throw->new->IndexOutOfBoundsException->else->return
PSPrinterJob.EPSPrinter#getPrintable(int)::: printer get printable:::if->throw->new->IndexOutOfBoundsException->else->return
PSStreamPrinterFactory#getOutputFormat()::: stream printer factory get output format:::return
PSStreamPrinterFactory#getSupportedDocFlavors()::: stream printer factory get supported doc flavors:::return->getFlavors
PSStreamPrinterFactory#getFlavors()::: stream printer factory get flavors:::flavors->new->DocFlavorArr->System->arraycopy->return
PSStreamPrinterFactory#getPrintService(OutputStream)::: stream printer factory get print service:::return->new->PSStreamPrintService
PSStreamPrintJob#getPrintService()::: stream print job get print service:::return
PSStreamPrintJob#getAttributes()::: stream print job get attributes:::synchronized->if->jobSet->new->HashPrintJobAttributeSet->return->AttributeSetUtilities->unmodifiableView->else->return
PSStreamPrintJob#addPrintJobListener(PrintJobListener)::: stream print job add print job listener:::synchronized->if->return->if->new->Vector<>->jobListeners->add
PSStreamPrintJob#removePrintJobListener(PrintJobListener)::: stream print job remove print job listener:::synchronized->if->return->jobListeners->remove->if->jobListeners->isEmpty
PSStreamPrintJob#closeDataStreams()::: stream print job close data streams:::if->return->data->try->doc->getPrintData->catch->return->finally->if->try->instream->close->catch->finally->else->if->try->reader->close->catch->finally->else->if->try->close->catch->finally->else->if->try->close->catch->finally
PSStreamPrintJob#notifyEvent(int)::: stream print job notify event:::synchronized->if->listener->event->new->PrintJobEvent->for->i->jobListeners->size
PSStreamPrintJob#addPrintJobAttributeListener(PrintJobAttributeListener, PrintJobAttributeSet)::: stream print job add print job attribute listener:::synchronized->if->return->if->new->Vector<>->new->Vector<>->attrListeners->add->if->new->HashPrintJobAttributeSet->listenedAttributeSets->add
PSStreamPrintJob#removePrintJobAttributeListener(PrintJobAttributeListener)::: stream print job remove print job attribute listener:::synchronized->if->return->index->attrListeners->indexOf->if->return->else->attrListeners->remove->listenedAttributeSets->remove->if->attrListeners->isEmpty
PSStreamPrintJob#print(Doc, PrintRequestAttributeSet)::: stream print job print:::synchronized->if->throw->new->PrintException->else->flavor->doc->getDocFlavor->data->try->doc->getPrintData->catch->notifyEvent->throw->e->toString->new->PrintException->finally->if->service->isDocFlavorSupported->notifyEvent->throw->new->PrintJobFlavorException->initializeAttributeSets->getAttributeValues->repClassName->flavor->getRepresentationClassName->if->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->try->doc->getStreamForBytes->new->ImagePrinter->printableJob->return->catch->notifyEvent->throw->new->PrintException->notifyEvent->throw->new->PrintException->finally->else->if->flavor->equals->flavor->equals->flavor->equals->try->new->ImagePrinter->printableJob->return->catch->notifyEvent->throw->new->PrintException->finally->else->if->repClassName->equals->try->doc->getPrintData->pageableJob->return->catch->notifyEvent->throw->new->PrintException->notifyEvent->throw->new->PrintException->finally->else->if->repClassName->equals->try->doc->getPrintData->printableJob->return->catch->notifyEvent->throw->new->PrintException->notifyEvent->throw->new->PrintException->finally->else->notifyEvent->throw->new->PrintException
PSStreamPrintJob#printableJob(Printable, PrintRequestAttributeSet)::: stream print job printable job:::try->synchronized->if->throw->new->PrintException->else->new->PSPrinterJob->job->getPrintService->setPrintService->pf->new->PageFormat->if->p->new->Paper->p->mediaSize->getX->mediaSize->getY->setSize->p->p->getWidth->p->getHeight->setImageableArea->pf->setPaper->if->pf->setOrientation->else->if->pf->setOrientation->job->setPrintable->job->print->notifyEvent->return->catch->notifyEvent->throw->new->PrintException->finally
PSStreamPrintJob#pageableJob(Pageable, PrintRequestAttributeSet)::: stream print job pageable job:::try->synchronized->if->throw->new->PrintException->else->new->PSPrinterJob->job->getPrintService->setPrintService->job->setPageable->job->print->notifyEvent->return->catch->notifyEvent->throw->new->PrintException->finally
PSStreamPrintJob#initializeAttributeSets(Doc, PrintRequestAttributeSet)::: stream print job initialize attribute sets:::new->HashPrintRequestAttributeSet->new->HashPrintJobAttributeSet->attrs->if->reqAttrSet->addAll->reqSet->toArray->for->i->docSet->doc->getAttributes->if->docSet->toArray->for->i->userName->try->System->getProperty->catch->finally->if->userName->equals->ruName->reqSet->get->if->jobAttrSet->ruName->getValue->ruName->getLocale->new->JobOriginatingUserName->add->else->jobAttrSet->new->JobOriginatingUserName->add->else->jobAttrSet->new->JobOriginatingUserName->add->if->jobAttrSet->get->jobName->if->docSet->get->docName->docSet->get->docName->getValue->docName->getLocale->new->JobName->jobAttrSet->add->else->str->try->printData->doc->getPrintData->if->doc->getPrintData->toString->catch->finally->new->JobName->jobAttrSet->add->AttributeSetUtilities->unmodifiableView
PSStreamPrintJob#getAttributeValues(DocFlavor)::: stream print job get attribute values:::attr->category->if->reqAttrSet->get->else->attrs->reqAttrSet->toArray->for->i
PSStreamPrintJob#cancel()::: stream print job cancel:::synchronized->if->throw->new->PrintException->else->if->job->cancel->notifyEvent->return->else->throw->new->PrintException
PSStreamPrintService#getOutputFormat()::: stream print service get output format:::return
PSStreamPrintService#getSupportedDocFlavors()::: stream print service get supported doc flavors:::return->PSStreamPrinterFactory->getFlavors
PSStreamPrintService#createPrintJob()::: stream print service create print job:::return->new->PSStreamPrintJob
PSStreamPrintService#usesClass(Class)::: stream print service uses class:::return
PSStreamPrintService#getName()::: stream print service get name:::return
PSStreamPrintService#addPrintServiceAttributeListener(PrintServiceAttributeListener)::: stream print service add print service attribute listener:::return
PSStreamPrintService#removePrintServiceAttributeListener(PrintServiceAttributeListener)::: stream print service remove print service attribute listener:::return
PSStreamPrintService#getAttribute(Class)::: stream print service get attribute:::if->throw->new->NullPointerException->if->isAssignableFrom->throw->new->IllegalArgumentException->if->tmp->return->else->return
PSStreamPrintService#getAttributes()::: stream print service get attributes:::attrs->new->HashPrintServiceAttributeSet->attrs->add->return->AttributeSetUtilities->unmodifiableView
PSStreamPrintService#isDocFlavorSupported(DocFlavor)::: stream print service is doc flavor supported:::flavors->getSupportedDocFlavors->for->f->return
PSStreamPrintService#getSupportedAttributeCategories()::: stream print service get supported attribute categories:::cats->new->Class<?>Arr->System->arraycopy->return
PSStreamPrintService#isAttributeCategorySupported(Class)::: stream print service is attribute category supported:::if->throw->new->NullPointerException->if->isAssignableFrom->throw->new->IllegalArgumentException->for->i->return
PSStreamPrintService#getDefaultAttributeValue(Class)::: stream print service get default attribute value:::if->throw->new->NullPointerException->if->isAssignableFrom->throw->new->IllegalArgumentException->if->isAttributeCategorySupported->return->if->return->new->Copies->else->if->return->else->if->return->else->if->defaultCountry->Locale->getDefault->getCountry->if->defaultCountry->equals->defaultCountry->getCountry->equals->defaultCountry->getCountry->equals->return->else->return->else->if->defaultCountry->Locale->getDefault->getCountry->iw->ih->margin->if->defaultCountry->equals->defaultCountry->getCountry->equals->defaultCountry->getCountry->equals->getX->getY->else->getX->getY->return->new->MediaPrintableArea->else->if->return->else->if->return->new->PageRanges->else->if->return->else->if->return->else->return
PSStreamPrintService#getSupportedAttributeValues(Class, DocFlavor, AttributeSet)::: stream print service get supported attribute values:::if->throw->new->NullPointerException->if->isAssignableFrom->throw->new->IllegalArgumentException->if->isDocFlavorSupported->throw->new->IllegalArgumentException->if->isAttributeCategorySupported->return->if->arr->new->ChromaticityArr->return->else->if->return->new->JobName->else->if->return->new->RequestingUserName->else->if->if->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->arr->new->OrientationRequestedArr->return->else->return->else->if->return->new->CopiesSupported->else->if->arr->new->MediaArr->System->arraycopy->return->else->if->arr->new->FidelityArr->return->else->if->if->return->mediaSize->attributes->get->if->media->attributes->get->if->msn->MediaSize->getMediaSizeForName->if->return->else->arr->new->MediaPrintableAreaArr->w->mediaSize->getX->h->mediaSize->getY->xmargin->ymargin->if->if->new->MediaPrintableArea->return->else->if->if->flavor->equals->flavor->equals->arr->new->PageRangesArr->new->PageRanges->return->else->return->else->if->if->flavor->equals->flavor->equals->arr->new->SheetCollateArr->return->else->arr->new->SheetCollateArr->return->else->if->if->flavor->equals->flavor->equals->arr->new->SidesArr->return->else->return->else->return
PSStreamPrintService#isSupportedCopies(Copies)::: stream print service is supported copies:::numCopies->copies->getValue->return
PSStreamPrintService#isSupportedMedia(MediaSizeName)::: stream print service is supported media:::for->i->return
PSStreamPrintService#isAttributeValueSupported(Attribute, DocFlavor, AttributeSet)::: stream print service is attribute value supported:::if->throw->new->NullPointerException->if->isDocFlavorSupported->throw->new->IllegalArgumentException->category->attr->getCategory->if->isAttributeCategorySupported->return->else->if->attr->getCategory->return->else->if->attr->getCategory->return->isSupportedCopies->else->if->attr->getCategory->return->isSupportedMedia->else->if->attr->getCategory->if->flavor->equals->flavor->equals->return->else->if->attr->getCategory->if->flavor->equals->flavor->equals->return->else->if->attr->getCategory->if->flavor->equals->flavor->equals->return->else->if->attr->getCategory->if->flavor->equals->flavor->equals->return->return
PSStreamPrintService#getUnsupportedAttributes(DocFlavor, AttributeSet)::: stream print service get unsupported attributes:::if->isDocFlavorSupported->throw->new->IllegalArgumentException->if->return->attr->unsupp->new->HashAttributeSet->attrs->attributes->toArray->for->i->if->unsupp->isEmpty->return->else->return
PSStreamPrintService#getServiceUIFactory()::: stream print service get service factory:::return
PSStreamPrintService#toString()::: stream print service to string:::return->getName
PSStreamPrintService#equals(Object)::: stream print service equals:::return->getName->getName->equals
PSStreamPrintService#hashCode()::: stream print service hash code:::return->this->getClass->hashCode->getName->hashCode
RasterPrinterJob#getXRes():::Returns the resolution in dots per inch across the width of the page.:::
RasterPrinterJob#getYRes():::Returns the resolution in dots per inch down the height of the page.:::
RasterPrinterJob#getPhysicalPrintableX(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPrintableY(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPrintableWidth(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPrintableHeight(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPageWidth(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#getPhysicalPageHeight(Paper):::Must be obtained from the current printer:::
RasterPrinterJob#startPage(PageFormat, Printable, int, boolean):::Begin a new page.:::
RasterPrinterJob#endPage(PageFormat, Printable, int):::End a page.:::
RasterPrinterJob#printBand(byte[], int, int, int, int):::Prints the contents of the array of ints, 'data' to the current page:::
RasterPrinterJob#saveState(AffineTransform, Shape, Rectangle2D, double, double)::: raster printer job save state:::gstate->new->GraphicsState->redrawList->add
RasterPrinterJob#lookupDefaultPrintService()::: raster printer job lookup default print service:::service->PrintServiceLookup->lookupDefaultPrintService->if->service->isDocFlavorSupported->service->isDocFlavorSupported->return->else->services->PrintServiceLookup->lookupPrintServices->if->return->return
RasterPrinterJob#getPrintService():::Returns the service (printer) for this printer job:::if->svc->PrintServiceLookup->lookupDefaultPrintService->if->svc->isDocFlavorSupported->try->setPrintService->catch->finally->if->svcs->PrintServiceLookup->lookupPrintServices->if->try->setPrintService->catch->finally->return
RasterPrinterJob#setPrintService(PrintService):::Associate this PrinterJob with a new PrintService:::if->throw->new->PrinterException->else->if->service->getName->throw->new->PrinterException->else->prnState->service->getAttribute->if->prnStateReasons->service->getAttribute->if->prnStateReasons->containsKey->throw->new->PrinterException->if->service->isDocFlavorSupported->service->isDocFlavorSupported->else->throw->new->PrinterException
RasterPrinterJob#attributeToPageFormat(PrintService, PrintRequestAttributeSet)::: raster printer job attribute to page format:::page->defaultPage->if->return->orient->attSet->get->if->service->getDefaultAttributeValue->if->page->setOrientation->else->if->page->setOrientation->else->page->setOrientation->media->attSet->get->size->getMediaSize->paper->new->Paper->dim->size->getSize->w->Math->rint->h->Math->rint->paper->setSize->area->attSet->get->if->getDefaultPrintableArea->ix->iw->iy->ih->Math->area->getX->rint->Math->area->getY->rint->Math->area->getWidth->rint->Math->area->getHeight->rint->paper->setImageableArea->page->setPaper->return
RasterPrinterJob#getMediaSize(Media, PrintService, PageFormat)::: raster printer job get media size:::if->service->getDefaultAttributeValue->if->size->MediaSize->getMediaSizeForName->return
RasterPrinterJob#getDefaultPrintableArea(PageFormat, double, double)::: raster printer job get default printable area:::ix->iw->iy->ih->if->else->if->else->return->new->MediaPrintableArea
RasterPrinterJob#updatePageAttributes(PrintService, PageFormat)::: raster printer job update page attributes:::if->new->HashPrintRequestAttributeSet->updateAttributesWithPageFormat
RasterPrinterJob#updateAttributesWithPageFormat(PrintService, PageFormat, PrintRequestAttributeSet)::: raster printer job update attributes with page format:::if->return->x->Math->page->getPaper->getWidth->rint->y->Math->page->getPaper->getHeight->rint->mediaList->service->getSupportedAttributeValues->media->try->CustomMediaSizeName->findMedia->catch->finally->if->service->isAttributeValueSupported->service->getDefaultAttributeValue->orient->switch->page->getOrientation->break->break->if->pageAttributes->add->pageAttributes->add->ix->page->getPaper->getImageableX->iw->page->getPaper->getImageableWidth->iy->page->getPaper->getImageableY->ih->page->getPaper->getImageableHeight->if->if->if->page->getPaper->getWidth->if->if->page->getPaper->getHeight->if->try->pageAttributes->new->MediaPrintableArea->add->catch->finally
RasterPrinterJob#pageDialog(PageFormat):::Display a dialog to the user allowing the modification of a PageFormat instance:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->gc->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->service->new->java.security.PrivilegedAction<PrintService>->doPrivileged->if->return->updatePageAttributes->newPage->dts->attributes->get->if->attributes->remove->pageDialog->attributes->add->else->pageDialog->if->return->else->return
RasterPrinterJob#pageDialog(PrintRequestAttributeSet):::return a PageFormat corresponding to the updated attributes, or null if the user cancelled the dialog.:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->dlg->attributes->get->if->pservice->getPrintService->pageFrmAttrib->attributeToPageFormat->setParentWindowID->page->pageDialog->clearParentWindowID->if->return->updateAttributesWithPageFormat->return->grCfg->w->KeyboardFocusManager->getCurrentKeyboardFocusManager->getActiveWindow->if->w->getGraphicsConfiguration->else->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->gc->service->new->java.security.PrivilegedAction<PrintService>->doPrivileged->if->return->gcBounds->gc->getBounds->x->y->pageDialog->setOnTop->if->attributes->add->owner->onTop->getOwner->if->else->if->DialogOwnerAccessor->getID->new->ServiceDialog->if->try->pageDialog->setAlwaysOnTop->catch->finally->dlgBounds->pageDialog->getBounds->if->gcBounds->contains->if->if->else->if->if->else->pageDialog->setBounds->pageDialog->show->if->pageDialog->getStatus->newas->pageDialog->getAttributes->amCategory->if->attributes->containsKey->newas->containsKey->attributes->remove->attributes->addAll->return->attributeToPageFormat->else->return
RasterPrinterJob#getPageFormatFromAttributes()::: raster printer job get page format from attributes:::pageable->if->attributes->isEmpty->getPageable->return->newPf->getPrintService->attributeToPageFormat->oldPf->if->pageable->getPageFormat->if->attributes->get->newPf->oldPf->getOrientation->setOrientation->newPaper->newPf->getPaper->oldPaper->oldPf->getPaper->oldPaperValWasSet->if->attributes->get->newPaper->oldPaper->getWidth->oldPaper->getHeight->setSize->if->attributes->get->newPaper->oldPaper->getImageableX->oldPaper->getImageableY->oldPaper->getImageableWidth->oldPaper->getImageableHeight->setImageableArea->if->newPf->setPaper->return
RasterPrinterJob#printDialog(PrintRequestAttributeSet):::Presents the user a dialog for changing properties of the print job interactively:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->dlg->attributes->get->if->try->debug_println->setAttributes->catch->finally->setParentWindowID->ret->printDialog->clearParentWindowID->return->grCfg->w->KeyboardFocusManager->getCurrentKeyboardFocusManager->getActiveWindow->if->w->getGraphicsConfiguration->if->attributes->get->attributes->new->DialogOwner->add->else->GraphicsEnvironment->getLocalGraphicsEnvironment->getDefaultScreenDevice->getDefaultConfiguration->gc->service->new->java.security.PrivilegedAction<PrintService>->doPrivileged->if->return->services->spsFactories->if->lookupStreamPrintServices->new->StreamPrintServiceArr->for->i->else->new->java.security.PrivilegedAction<PrintService[]>->doPrivileged->if->new->PrintServiceArr->x->y->newService->jobWrapper->new->PrinterJobWrapper->attributes->add->pgRng->attributes->get->if->mDocument->getNumberOfPages->attributes->mDocument->getNumberOfPages->new->PageRanges->add->try->ServiceUI->printDialog->catch->ServiceUI->printDialog->finally->attributes->remove->attributes->remove->if->return->if->service->equals->try->setPrintService->catch->finally->return
RasterPrinterJob#printDialog():::Presents the user a dialog for changing properties of the print job interactively.:::if->GraphicsEnvironment->isHeadless->throw->new->HeadlessException->attributes->new->HashPrintRequestAttributeSet->attributes->getCopies->new->Copies->add->attributes->getJobName->new->JobName->add->doPrint->printDialog->if->jobName->attributes->get->if->jobName->getValue->setJobName->copies->attributes->get->if->copies->getValue->setCopies->dest->attributes->get->if->try->dest->getURI->new->File->getPath->catch->ps->getPrintService->if->defaultDest->ps->getDefaultAttributeValue->if->defaultDest->getURI->new->File->getPath->finally->else->ps->getPrintService->if->ps->getName->return
RasterPrinterJob#setPrintable(Printable):::The pages in the document to be printed by this PrinterJob are drawn by the Printable object 'painter':::new->PageFormat->defaultPage->new->OpenBook->setPageable
RasterPrinterJob#setPrintable(Printable, PageFormat):::The pages in the document to be printed by this PrinterJob are drawn by the Printable object 'painter':::new->OpenBook->setPageable->getPrintService->updatePageAttributes
RasterPrinterJob#setPageable(Pageable):::The pages in the document to be printed are held by the Pageable instance 'document':::if->else->throw->new->NullPointerException
RasterPrinterJob#initPrinter()::: raster printer job init printer:::return
RasterPrinterJob#isSupportedValue(Attribute, PrintRequestAttributeSet)::: raster printer job is supported value:::ps->getPrintService->return->ps->isAttributeValueSupported
RasterPrinterJob#setXYRes(double, double):::Set the device resolution:::
RasterPrinterJob#setAttributes(PrintRequestAttributeSet)::: raster printer job set attributes:::setCollated->service->getPrintService->if->return->fidelity->attrFidelity->attributes->get->if->if->unsupported->service->getUnsupportedAttributes->if->throw->new->PrinterException->collateAttr->attributes->get->if->isSupportedValue->setCollated->attributes->get->if->isSupportedValue->attributes->get->if->service->isAttributeCategorySupported->if->isSupportedValue->service->getDefaultAttributeValue->if->xr->printerResAttr->getCrossFeedResolution->yr->printerResAttr->getFeedResolution->setXYRes->attributes->get->if->isSupportedValue->setPageRange->else->if->attributes->get->range->pageRangesAttr->getMembers->setPageRange->else->setPageRange->copies->attributes->get->if->isSupportedValue->copies->getValue->setCopies->else->getCopies->destination->attributes->get->if->isSupportedValue->try->destination->getURI->getSchemeSpecificPart->new->File->catch->defaultDest->service->getDefaultAttributeValue->if->defaultDest->getURI->getSchemeSpecificPart->new->File->finally->jobSheets->attributes->get->if->jobName->attributes->get->if->isSupportedValue->jobName->getValue->setJobName->else->getJobName->userName->attributes->get->if->isSupportedValue->userName->getValue->else->try->getUserName->catch->finally->media->attributes->get->orientReq->attributes->get->mpa->attributes->get->if->getPageable->pageable->getPageable->printable->pageable->getPrintable->pf->pageable->getPageFormat->clone->paper->pf->getPaper->if->service->isAttributeCategorySupported->mpaVals->service->getSupportedAttributeValues->if->if->isSupportedValue->orient->if->orientReq->equals->else->if->orientReq->equals->else->pf->setOrientation->if->isSupportedValue->if->msn->msz->MediaSize->getMediaSizeForName->if->paperWid->msz->getX->paperHgt->msz->getY->paper->setSize->if->paper->setImageableArea->if->isSupportedValue->printableArea->mpa->getPrintableArea->for->i->paper->setImageableArea->pf->setPaper->validatePage->setPrintable->else
RasterPrinterJob#spoolToService(PrintService, PrintRequestAttributeSet)::: raster printer job spool to service:::if->throw->new->PrinterException->job->psvc->createPrintJob->doc->getPageable->new->PageableDoc->if->new->HashPrintRequestAttributeSet->attributes->getCopies->new->Copies->add->attributes->getJobName->new->JobName->add->try->job->print->catch->throw->e->toString->new->PrinterException->finally
RasterPrinterJob#print():::Prints a set of pages.:::print
RasterPrinterJob#debug_println(String)::: raster printer job debug_println:::if->println
RasterPrinterJob#print(PrintRequestAttributeSet)::: raster printer job print:::psvc->getPrintService->debug_println->if->throw->new->PrinterException->prnState->psvc->getAttribute->if->prnStateReasons->psvc->getAttribute->if->prnStateReasons->containsKey->throw->new->PrinterException->if->psvc->getAttribute->throw->new->PrinterException->js->psvc->getDefaultAttributeValue->if->js->equals->if->getClass->usesClass->setAttributes->if->validateDestination->else->spoolToService->return->initPrinter->numCollatedCopies->getCollatedCopies->numNonCollatedCopies->getNoncollatedCopies->debug_println->numPages->mDocument->getNumberOfPages->if->return->firstPage->getFirstPage->lastPage->getLastPage->if->totalPages->mDocument->getNumberOfPages->if->mDocument->getNumberOfPages->try->synchronized->startDoc->if->isCancelled->cancelDoc->rangeIsSelected->if->pages->attributes->get->if->debug_println->for->collated->if->isCancelled->cancelDoc->catch->finally->synchronized->if->endDoc->notify
RasterPrinterJob#validateDestination(String)::: raster printer job validate destination:::if->return->f->new->File->try->if->f->createNewFile->f->delete->catch->throw->new->PrinterException->finally->pFile->f->getParentFile->if->f->exists->f->isFile->f->canWrite->pFile->exists->pFile->exists->pFile->canWrite->if->f->exists->f->delete->throw->new->PrinterException
RasterPrinterJob#validatePaper(Paper, Paper):::updates a Paper object to reflect the current printer's selected paper size and imageable area for that paper size:::if->return->else->wid->origPaper->getWidth->hgt->origPaper->getHeight->ix->origPaper->getImageableX->iy->origPaper->getImageableY->iw->origPaper->getImageableWidth->ih->origPaper->getImageableHeight->defaultPaper->new->Paper->defaultPaper->getWidth->defaultPaper->getHeight->defaultPaper->getImageableX->defaultPaper->getImageableY->defaultPaper->getImageableWidth->defaultPaper->getImageableHeight->if->if->if->if->newPaper->setSize->newPaper->setImageableArea
RasterPrinterJob#defaultPage(PageFormat):::The passed in PageFormat will be copied and altered to describe the default page size and orientation of the PrinterJob's current printer:::newPage->page->clone->newPage->setOrientation->newPaper->new->Paper->ptsPerInch->w->h->media->service->getPrintService->if->size->service->getDefaultAttributeValue->if->MediaSize->getMediaSizeForName->size->getX->size->getY->newPaper->setSize->newPaper->setImageableArea->newPage->setPaper->return->defaultCountry->Locale->getDefault->getCountry->if->Locale->getDefault->equals->defaultCountry->getCountry->equals->defaultCountry->getCountry->equals->mmPerInch->Math->rint->Math->rint->newPaper->setSize->newPaper->setImageableArea->newPage->setPaper->return
RasterPrinterJob#validatePage(PageFormat):::The passed in PageFormat is cloned and altered to be usable on the PrinterJob's current printer.:::newPage->page->clone->newPaper->new->Paper->newPage->getPaper->validatePaper->newPage->setPaper->return
RasterPrinterJob#setCopies(int):::Set the number of copies to be printed.:::
RasterPrinterJob#getCopies():::Get the number of copies to be printed.:::return
RasterPrinterJob#getCopiesInt()::: raster printer job get copies int:::return->getCopies
RasterPrinterJob#getUserName():::Get the name of the printing user:::return->System->getProperty
RasterPrinterJob#getUserNameInt()::: raster printer job get user name int:::if->return->else->try->return->getUserName->catch->return->finally
RasterPrinterJob#setJobName(String):::Set the name of the document to be printed:::if->else->throw->new->NullPointerException
RasterPrinterJob#getJobName():::Get the name of the document to be printed.:::return
RasterPrinterJob#getJobNameInt()::: raster printer job get job name int:::return->getJobName
RasterPrinterJob#setPageRange(int, int):::Set the range of pages from a Book to be printed:::if->if->else
RasterPrinterJob#getFirstPage():::Return the zero based index of the first page to be printed in this job.:::return
RasterPrinterJob#getLastPage():::Return the zero based index of the last page to be printed in this job.:::return
RasterPrinterJob#setCollated(boolean):::Set whether copies should be collated or not:::
RasterPrinterJob#isCollated():::Return true if collated copies will be printed as determined in an attribute set.:::return
RasterPrinterJob#getSelectAttrib()::: raster printer job get select attrib:::if->pages->attributes->get->if->return->else->if->return->else->if->return->return
RasterPrinterJob#getFromPageAttrib()::: raster printer job get from page attrib:::if->pageRangesAttr->attributes->get->if->range->pageRangesAttr->getMembers->return->return->getMinPageAttrib
RasterPrinterJob#getToPageAttrib()::: raster printer job get to page attrib:::if->pageRangesAttr->attributes->get->if->range->pageRangesAttr->getMembers->return->return->getMaxPageAttrib
RasterPrinterJob#getMinPageAttrib()::: raster printer job get min page attrib:::if->s->attributes->get->if->return->s->getMin->return
RasterPrinterJob#getMaxPageAttrib()::: raster printer job get max page attrib:::if->s->attributes->get->if->return->s->getMax->pageable->getPageable->if->numPages->pageable->getNumberOfPages->if->return->return
RasterPrinterJob#startDoc():::Called by the print() method at the start of a print job.:::
RasterPrinterJob#endDoc():::Called by the print() method at the end of a print job.:::
RasterPrinterJob#abortDoc()::: raster printer job abort doc:::
RasterPrinterJob#cancelDoc()::: raster printer job cancel doc:::abortDoc->synchronized->notify->throw->new->PrinterAbortException
RasterPrinterJob#getCollatedCopies():::Returns how many times the entire book should be printed by the PrintJob:::return->isCollated->getCopiesInt
RasterPrinterJob#getNoncollatedCopies():::Returns how many times each page in the book should be consecutively printed by PrintJob:::return->isCollated->getCopiesInt
RasterPrinterJob#setGraphicsConfigInfo(AffineTransform, double, double)::: raster printer job set graphics config info:::pt->new->Point2D.Double->at->transform->if->at->equals->pt->getX->pt->getY->pt->getX->pt->getY
RasterPrinterJob#getPrinterGraphicsConfig()::: raster printer job get printer graphics config:::if->return->deviceID->service->getPrintService->if->service->toString->new->PrinterGraphicsConfig->return
RasterPrinterJob#printPage(Pageable, int):::Print a page from the provided document.:::page->origPage->painter->try->document->getPageFormat->origPage->clone->document->getPrintable->catch->pe->new->PrinterException->pe->initCause->throw->finally->paper->page->getPaper->if->page->getOrientation->left->paper->getImageableX->top->paper->getImageableY->width->paper->getImageableWidth->height->paper->getImageableHeight->paper->paper->getWidth->paper->getHeight->setImageableArea->page->setPaper->if->page->getOrientation->page->setOrientation->else->page->setOrientation->xScale->getXRes->yScale->getYRes->deviceArea->paper->getImageableX->paper->getImageableY->paper->getImageableWidth->paper->getImageableHeight->new->Rectangle2D.Double->uniformTransform->new->AffineTransform->scaleTransform->new->AffineTransform->scaleTransform->scale->bandWidth->deviceArea->getWidth->if->if->throw->new->PrinterException->deviceAreaHeight->deviceArea->getHeight->if->throw->new->PrinterException->bandHeight->deviceLeft->Math->paper->getImageableX->rint->deviceTop->Math->paper->getImageableY->rint->deviceTransform->new->AffineTransform->deviceTransform->translate->deviceTransform->translate->deviceTransform->scale->pBand->new->BufferedImage->peekGraphics->pBand->createGraphics->createPeekGraphics->pageFormatArea->page->getImageableX->page->getImageableY->page->getImageableWidth->page->getImageableHeight->new->Rectangle2D.Double->peekGraphics->transform->peekGraphics->getPhysicalPrintableX->getPhysicalPrintableY->translate->peekGraphics->page->getMatrix->new->AffineTransform->transform->initPrinterGraphics->pgAt->peekGraphics->getTransform->paper->getWidth->paper->getHeight->setGraphicsConfigInfo->pageResult->painter->print->debug_println->if->debug_println->thisPaper->page->getPaper->paperChanged->thisPaper->getWidth->previousPaper->getWidth->thisPaper->getHeight->previousPaper->getHeight->startPage->pathGraphics->createPathGraphics->if->pathGraphics->transform->pathGraphics->getPhysicalPrintableX->getPhysicalPrintableY->translate->pathGraphics->page->getMatrix->new->AffineTransform->transform->initPrinterGraphics->redrawList->clear->initialTx->pathGraphics->getTransform->painter->print->for->i->redrawList->size->else->band->if->new->BufferedImage->bandGraphics->band->createGraphics->clipArea->new->Rectangle2D.Double->initPrinterGraphics->painterGraphics->new->ProxyGraphics2D->clearGraphics->band->createGraphics->clearGraphics->setColor->tile->band->getRaster->data->tile->getDataStorage->deviceBottom->deviceAddressableX->getPhysicalPrintableX->deviceAddressableY->getPhysicalPrintableY->for->bandTop->clearGraphics->dispose->bandGraphics->dispose->debug_println->endPage->return
RasterPrinterJob#cancel():::If a print job is in progress, print() has been called but has not returned, then this signals that the job should be cancelled and the next chance:::synchronized->if->notify
RasterPrinterJob#isCancelled():::Returns true is a print job is ongoing but will be cancelled and the next opportunity:::cancelled->synchronized->notify->return
RasterPrinterJob#getPageable():::Return the Pageable describing the pages to be printed.:::return
RasterPrinterJob#createPathGraphics(PeekGraphics, PrinterJob, Printable, PageFormat, int):::Examine the metrics captured by the PeekGraphics instance and if capable of directly converting this print job to the printer's control language or the native OS's graphics primitives, then return a PathGraphics to perform that conversion:::return
RasterPrinterJob#createPeekGraphics(Graphics2D, PrinterJob):::Create and return an object that will gather and hold metrics about the print job:::return->new->PeekGraphics
RasterPrinterJob#initPrinterGraphics(Graphics2D, Rectangle2D)::: raster printer job init printer graphics:::g->setClip->g->setPaint
RasterPrinterJob#checkAllowedToPrintToFile():::User dialogs should disable "File" buttons if this returns false.:::try->throwPrintToFile->return->catch->return->finally
RasterPrinterJob#throwPrintToFile():::Break this out as it may be useful when we allow API to specify printing to a file:::security->System->getSecurityManager->if->if->new->FilePermission->security->checkPermission
RasterPrinterJob#removeControlChars(String)::: raster printer job remove control chars:::in_chars->s->toCharArray->len->out_chars->new->charArr->pos->for->i->if->return->else->return->new->String
RasterPrinterJob#getParentWindowID()::: raster printer job get parent window d:::return
RasterPrinterJob#clearParentWindowID()::: raster printer job clear parent window d:::
RasterPrinterJob#setParentWindowID(PrintRequestAttributeSet)::: raster printer job set parent window d:::attrs->get->if->DialogOwnerAccessor->getID
ServiceDialog#initPrintDialog(int, int, PrintService[], int, DocFlavor, PrintRequestAttributeSet):::Initialize print dialog.:::new->HashPrintRequestAttributeSet->pages->attributes->get->if->if->attributes->get->owner->attributes->get->if->getOwner->owner->getOwner->getOwner->try->setAlwaysOnTop->catch->finally->c->getContentPane->c->new->BorderLayout->setLayout->new->JTabbedPane->tpTabs->new->EmptyBorder->setBorder->gkey->getMsg->gmnemonic->getVKMnemonic->new->GeneralPanel->tpTabs->add->tpTabs->setMnemonicAt->pkey->getMsg->pmnemonic->getVKMnemonic->new->PageSetupPanel->tpTabs->add->tpTabs->setMnemonicAt->akey->getMsg->amnemonic->getVKMnemonic->new->AppearancePanel->tpTabs->add->tpTabs->setMnemonicAt->c->add->updatePanels->pnlSouth->new->FlowLayout->new->JPanel->createExitButton->pnlSouth->add->getRootPane->setDefaultButton->createExitButton->handleEscKey->pnlSouth->add->c->add->new->WindowAdapter->addWindowListener->getAccessibleContext->getMsg->setAccessibleDescription->setResizable->setLocation->pack
ServiceDialog#initPageDialog(int, int, PrintService, DocFlavor, PrintRequestAttributeSet):::Initialize "page setup" dialog:::new->HashPrintRequestAttributeSet->if->attributes->get->owner->attributes->get->if->getOwner->owner->getOwner->getOwner->try->setAlwaysOnTop->catch->finally->c->getContentPane->c->new->BorderLayout->setLayout->new->PageSetupPanel->c->add->pnlPageSetup->updateInfo->pnlSouth->new->FlowLayout->new->JPanel->createExitButton->pnlSouth->add->getRootPane->setDefaultButton->createExitButton->handleEscKey->pnlSouth->add->c->add->new->WindowAdapter->addWindowListener->getAccessibleContext->getMsg->setAccessibleDescription->setResizable->setLocation->pack
ServiceDialog#handleEscKey(JButton):::Performs Cancel when Esc key is pressed.:::cancelKeyAction->new->AbstractAction->cancelKeyStroke->KeyStroke->getKeyStroke->inputMap->btnCancel->getInputMap->actionMap->btnCancel->getActionMap->if->inputMap->put->actionMap->put
ServiceDialog#getStatus():::Returns the current status of the dialog (whether the user has selected the "Print" or "Cancel" button):::return
ServiceDialog#getAttributes():::Returns an AttributeSet based on whether or not the user cancelled the dialog:::if->return->else->return
ServiceDialog#getPrintService():::Returns a PrintService based on whether or not the user cancelled the dialog:::if->return->else->return
ServiceDialog#dispose(int):::Sets the current status flag for the dialog and disposes it (thus returning control of the parent frame back to the user):::super->dispose
ServiceDialog#actionPerformed(ActionEvent)::: service dialog action performed:::source->e->getSource->approved->if->if->if->pnlGeneral->isPrintToFileRequested->showFileChooser->else->asCurrent->remove->dispose
ServiceDialog#showFileChooser():::Displays a JFileChooser that allows the user to select the destination for "Print To File":::dstCategory->dst->asCurrent->get->if->asOriginal->get->if->psCurrent->getDefaultAttributeValue->if->try->new->URI->new->Destination->catch->finally->fileDest->if->try->dst->getURI->new->File->catch->new->File->finally->else->new->File->jfc->new->ValidatingFileChooser->jfc->getMsg->setApproveButtonText->jfc->getMsg->setDialogTitle->jfc->setDialogType->jfc->setSelectedFile->returnVal->jfc->showDialog->if->jfc->getSelectedFile->try->asCurrent->fileDest->toURI->new->Destination->add->catch->asCurrent->remove->finally->else->asCurrent->remove->return
ServiceDialog#updatePanels():::Updates each of the top level panels:::pnlGeneral->updateInfo->pnlPageSetup->updateInfo->pnlAppearance->updateInfo
ServiceDialog#initResource():::Initialize ResourceBundle:::new->java.security.PrivilegedAction<Object>->doPrivileged
ServiceDialog#getMsg(String):::Returns message string from resource:::try->return->messageRB->getString->removeMnemonics->catch->throw->new->Error->finally
ServiceDialog#removeMnemonics(String)::: service dialog remove mnemonics:::i->s->indexOf->len->s->length->if->return->j->s->indexOf->if->if->return->s->substring->else->return->s->substring->s->substring->removeMnemonics->if->return->s->substring->removeMnemonics->else->return->s->substring->s->substring->removeMnemonics
ServiceDialog#getMnemonic(String):::Returns mnemonic character from resource:::str->messageRB->getString->replace->index->str->indexOf->if->str->length->c->str->charAt->return->Character->toUpperCase->else->return
ServiceDialog#getVKMnemonic(String)::: service dialog get mnemonic:::s->String->getMnemonic->valueOf->if->s->length->return->vkString->s->toUpperCase->try->if->Class->getClassLoader->forName->field->_keyEventClazz->getDeclaredField->value->field->getInt->return->catch->finally->return
ServiceDialog#getImageResource(String):::Returns URL for image resource:::url->new->java.security.PrivilegedAction<URL>->doPrivileged->if->throw->new->Error->return
ServiceDialog#createButton(String, ActionListener):::Creates a new JButton and sets its text, mnemonic, and ActionListener:::btn->getMsg->new->JButton->btn->getMnemonic->setMnemonic->btn->addActionListener->return
ServiceDialog#createExitButton(String, ActionListener):::Creates a new JButton and sets its text, and ActionListener:::str->getMsg->btn->new->JButton->btn->addActionListener->btn->getAccessibleContext->setAccessibleDescription->return
ServiceDialog#createCheckBox(String, ActionListener):::Creates a new JCheckBox and sets its text, mnemonic, and ActionListener:::cb->getMsg->new->JCheckBox->cb->getMnemonic->setMnemonic->cb->addActionListener->return
ServiceDialog#createRadioButton(String, ActionListener):::Creates a new JRadioButton and sets its text, mnemonic, and ActionListener:::rb->getMsg->new->JRadioButton->rb->getMnemonic->setMnemonic->rb->addActionListener->return
ServiceDialog#showNoPrintService(GraphicsConfiguration):::Creates a  pop-up dialog for "no print service":::dlgFrame->new->Frame->JOptionPane->getMsg->showMessageDialog->dlgFrame->dispose
ServiceDialog#addToGB(Component, Container, GridBagLayout, GridBagConstraints):::Sets the constraints for the GridBagLayout and adds the Component to the given Container:::gridbag->setConstraints->cont->add
ServiceDialog#addToBG(AbstractButton, Container, ButtonGroup):::Adds the AbstractButton to both the given ButtonGroup and Container:::bg->add->cont->add
ServiceDialog.GeneralPanel#isPrintToFileRequested()::: general panel is print to file requested:::return->pnlPrintService->isPrintToFileSelected
ServiceDialog.GeneralPanel#updateInfo()::: general panel update info:::pnlPrintService->updateInfo->pnlPrintRange->updateInfo->pnlCopies->updateInfo
ServiceDialog.PrintServicePanel#isPrintToFileSelected()::: print service panel is print to file selected:::return->cbPrintToFile->isSelected
ServiceDialog.PrintServicePanel#addLabel(String, GridBagLayout, GridBagConstraints)::: print service panel add label:::new->JLabel->addToGB->label->new->JLabel->addToGB->return
ServiceDialog.PrintServicePanel#actionPerformed(ActionEvent)::: print service panel action performed:::source->e->getSource->if->if->dialog->uiFactory->getUI->if->dialog->show->else->docPropertiesUI->try->uiFactory->getUI->catch->finally->if->wrapper->asCurrent->get->if->return->job->wrapper->getPrinterJob->if->return->newAttrs->docPropertiesUI->showDocumentProperties->if->asCurrent->addAll->updatePanels
ServiceDialog.PrintServicePanel#itemStateChanged(ItemEvent)::: print service panel item state changed:::if->e->getStateChange->index->cbName->getSelectedIndex->if->if->equals->psCurrent->getServiceUIFactory->dest->asOriginal->get->if->isPrintToFileSelected->psCurrent->isAttributeCategorySupported->if->asCurrent->add->else->psCurrent->getDefaultAttributeValue->if->try->new->URI->new->Destination->catch->finally->if->asCurrent->add->else->asCurrent->remove
ServiceDialog.PrintServicePanel#popupMenuWillBecomeVisible(PopupMenuEvent)::: print service panel popup menu will become visible:::
ServiceDialog.PrintServicePanel#popupMenuWillBecomeInvisible(PopupMenuEvent)::: print service panel popup menu will become invisible:::if->updatePanels
ServiceDialog.PrintServicePanel#popupMenuCanceled(PopupMenuEvent)::: print service panel popup menu canceled:::
ServiceDialog.PrintServicePanel#allowedToPrintToFile():::We disable the "Print To File" checkbox if this returns false:::try->throwPrintToFile->return->catch->return->finally
ServiceDialog.PrintServicePanel#throwPrintToFile():::Break this out as it may be useful when we allow API to specify printing to a file:::security->System->getSecurityManager->if->if->new->FilePermission->security->checkPermission
ServiceDialog.PrintServicePanel#updateInfo()::: print service panel update info:::dstCategory->dstSupported->dstSelected->dstAllowed->allowedToPrintToFile->dst->asCurrent->get->if->try->dst->getURI->toURL->if->psCurrent->isAttributeValueSupported->catch->finally->else->if->psCurrent->isAttributeCategorySupported->cbPrintToFile->setEnabled->cbPrintToFile->setSelected->type->psCurrent->getAttribute->if->lblType->type->toString->setText->status->psCurrent->getAttribute->if->lblStatus->status->toString->getMsg->setText->info->psCurrent->getAttribute->if->lblInfo->info->toString->setText->btnProperties->setEnabled
ServiceDialog.PrintRangePanel#actionPerformed(ActionEvent)::: print range panel action performed:::source->e->getSource->select->setupRangeWidgets->if->asCurrent->add->else->if->else->if->updateRangeAttribute->if->asCurrent->add
ServiceDialog.PrintRangePanel#focusLost(FocusEvent)::: print range panel focus lost:::source->e->getSource->if->updateRangeAttribute
ServiceDialog.PrintRangePanel#focusGained(FocusEvent)::: print range panel focus gained:::
ServiceDialog.PrintRangePanel#setupRangeWidgets()::: print range panel setup range widgets:::rangeEnabled->rbPages->isSelected->tfRangeFrom->setEnabled->tfRangeTo->setEnabled->lblRangeTo->setEnabled
ServiceDialog.PrintRangePanel#updateRangeAttribute()::: print range panel update range attribute:::strFrom->tfRangeFrom->getText->strTo->tfRangeTo->getText->min->max->try->Integer->parseInt->catch->finally->try->Integer->parseInt->catch->finally->if->tfRangeFrom->setValue->if->tfRangeTo->setValue->pr->new->PageRanges->asCurrent->add
ServiceDialog.PrintRangePanel#updateInfo()::: print range panel update info:::prCategory->if->psCurrent->isAttributeCategorySupported->psCurrent->isAttributeValueSupported->select->min->max->pr->asCurrent->get->if->if->pr->equals->members->pr->getMembers->if->if->asCurrent->get->if->rbAll->setSelected->else->if->else->rbPages->setSelected->tfRangeFrom->setValue->tfRangeTo->setValue->rbAll->setEnabled->rbPages->setEnabled->setupRangeWidgets
ServiceDialog.CopiesPanel#actionPerformed(ActionEvent)::: copies panel action performed:::if->cbCollate->isSelected->asCurrent->add->else->asCurrent->add
ServiceDialog.CopiesPanel#stateChanged(ChangeEvent)::: copies panel state changed:::updateCollateCB->asCurrent->snModel->getNumber->intValue->new->Copies->add
ServiceDialog.CopiesPanel#updateCollateCB()::: copies panel update collate b:::num->snModel->getNumber->intValue->if->cbCollate->setEnabled->else->cbCollate->setEnabled
ServiceDialog.CopiesPanel#updateInfo()::: copies panel update info:::cpCategory->scCategory->cpSupported->if->psCurrent->isAttributeCategorySupported->cs->psCurrent->getSupportedAttributeValues->if->new->CopiesSupported->cp->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->new->Copies->spinCopies->setEnabled->lblCopies->setEnabled->members->cs->getMembers->min->max->if->else->snModel->setMinimum->snModel->setMaximum->value->cp->getValue->if->snModel->setValue->if->psCurrent->isAttributeCategorySupported->sc->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->if->psCurrent->isAttributeValueSupported->else->if->psCurrent->isAttributeValueSupported->cbCollate->setSelected->updateCollateCB
ServiceDialog.PageSetupPanel#updateInfo()::: page setup panel update info:::pnlMedia->updateInfo->pnlOrientation->updateInfo->pnlMargins->updateInfo
ServiceDialog.MarginsPanel#actionPerformed(ActionEvent)::: margins panel action performed:::source->e->getSource->updateMargins
ServiceDialog.MarginsPanel#focusLost(FocusEvent)::: margins panel focus lost:::source->e->getSource->updateMargins
ServiceDialog.MarginsPanel#focusGained(FocusEvent)::: margins panel focus gained:::
ServiceDialog.MarginsPanel#updateMargins(Object)::: margins panel update margins:::if->return->else->tf->val->tf->getValue->if->return->if->val->equals->return->if->val->equals->return->if->val->equals->return->if->val->equals->return->lmTmpObj->leftMargin->getValue->rmTmpObj->rightMargin->getValue->tmTmpObj->topMargin->getValue->bmTmpObj->bottomMargin->getValue->lm->lmTmpObj->floatValue->rm->rmTmpObj->floatValue->tm->tmTmpObj->floatValue->bm->bmTmpObj->floatValue->orCategory->or->asCurrent->get->if->psCurrent->getDefaultAttributeValue->tmp->if->else->if->else->if->mpa->if->validateMargins->asCurrent->add->else->if->return->else->leftMargin->setValue->rightMargin->setValue->topMargin->setValue->bottomMargin->setValue
ServiceDialog.MarginsPanel#validateMargins(float, float, float, float)::: margins panel validate margins:::mpaCategory->mpa->mpaMax->mediaSize->media->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->msn->MediaSize->getMediaSizeForName->if->new->MediaSize->if->tmpASet->new->HashPrintRequestAttributeSet->tmpASet->add->values->psCurrent->getSupportedAttributeValues->if->if->mediaSize->getX->mediaSize->getY->new->MediaPrintableArea->wid->mediaSize->getX->hgt->mediaSize->getY->pax->pay->par->pab->paw->pah->if->mpaMax->getX->mpaMax->getWidth->mpaMax->getY->mpaMax->getHeight->return->else->return->new->MediaPrintableArea
ServiceDialog.MarginsPanel#updateInfo()::: margins panel update info:::if->leftMargin->setEnabled->rightMargin->setEnabled->topMargin->setEnabled->bottomMargin->setEnabled->lblLeft->setEnabled->lblRight->setEnabled->lblTop->setEnabled->lblBottom->setEnabled->return->mpaCategory->mpa->asCurrent->get->mpaMax->mediaSize->media->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->msn->MediaSize->getMediaSizeForName->if->new->MediaSize->if->tmpASet->new->HashPrintRequestAttributeSet->tmpASet->add->values->psCurrent->getSupportedAttributeValues->if->else->if->if->mediaSize->getX->mediaSize->getY->new->MediaPrintableArea->wid->mediaSize->getX->hgt->mediaSize->getY->maxMarginRatio->xMgn->yMgn->if->else->if->else->if->new->MediaPrintableArea->asCurrent->add->pax->mpa->getX->pay->mpa->getY->paw->mpa->getWidth->pah->mpa->getHeight->paxMax->mpaMax->getX->payMax->mpaMax->getY->pawMax->mpaMax->getWidth->pahMax->mpaMax->getHeight->invalid->mediaSize->getX->mediaSize->getY->if->if->if->else->if->if->else->if->if->if->if->if->if->if->new->MediaPrintableArea->asCurrent->add->mediaSize->getX->mediaSize->getY->orCategory->or->asCurrent->get->if->psCurrent->getDefaultAttributeValue->tmp->if->else->if->else->if->leftMargin->setValue->rightMargin->setValue->topMargin->setValue->bottomMargin->setValue
ServiceDialog.MediaPanel#getMediaName(String)::: media panel get media name:::try->newkey->key->replace->newkey->replace->return->messageRB->getString->catch->return->finally
ServiceDialog.MediaPanel#itemStateChanged(ItemEvent)::: media panel item state changed:::source->e->getSource->if->e->getStateChange->if->index->cbSize->getSelectedIndex->if->sizes->size->if->cbSource->getItemCount->cbSource->getSelectedIndex->src->cbSource->getSelectedIndex->mt->sources->get->asCurrent->new->SunAlternateMedia->add->asCurrent->sizes->get->add->else->if->index->cbSource->getSelectedIndex->if->sources->size->asCurrent->remove->newTray->sources->get->m->asCurrent->get->if->asCurrent->add->else->if->msn->def->psCurrent->getDefaultAttributeValue->if->def->equals->asCurrent->add->else->asCurrent->new->SunAlternateMedia->add->else->if->asCurrent->remove->if->cbSize->getItemCount->size->cbSize->getSelectedIndex->asCurrent->sizes->get->add->if->pnlMargins->updateInfo
ServiceDialog.MediaPanel#addMediaListener(MarginsPanel)::: media panel add media listener:::
ServiceDialog.MediaPanel#updateInfo()::: media panel update info:::mdCategory->amCategory->mediaSupported->cbSize->removeItemListener->cbSize->removeAllItems->cbSource->removeItemListener->cbSource->removeAllItems->cbSource->getMediaName->addItem->sizes->clear->sources->clear->if->psCurrent->isAttributeCategorySupported->values->psCurrent->getSupportedAttributeValues->if->media->for->i->msSupported->sizes->size->lblSize->setEnabled->cbSize->setEnabled->if->cbSource->setEnabled->lblSource->setEnabled->else->cbSource->setEnabled->if->medium->asCurrent->get->defMedia->psCurrent->getDefaultAttributeValue->if->cbSize->sizes->size->sizes->indexOf->setSelectedIndex->if->psCurrent->isAttributeValueSupported->if->if->sizes->size->sizes->get->if->asCurrent->add->if->if->ms->cbSize->sizes->indexOf->setSelectedIndex->else->if->mt->cbSource->sources->indexOf->setSelectedIndex->else->cbSize->sizes->size->setSelectedIndex->cbSource->setSelectedIndex->alt->asCurrent->get->if->md->alt->getMedia->if->mt->cbSource->sources->indexOf->setSelectedIndex->selIndex->cbSize->getSelectedIndex->if->sizes->size->asCurrent->sizes->get->add->cbSource->getSelectedIndex->if->sources->size->mt->sources->get->if->asCurrent->add->else->asCurrent->new->SunAlternateMedia->add->cbSize->addItemListener->cbSource->addItemListener
ServiceDialog.OrientationPanel#actionPerformed(ActionEvent)::: orientation panel action performed:::source->e->getSource->if->rbPortrait->isSameAs->asCurrent->add->else->if->rbLandscape->isSameAs->asCurrent->add->else->if->rbRevPortrait->isSameAs->asCurrent->add->else->if->rbRevLandscape->isSameAs->asCurrent->add->if->pnlMargins->updateInfo
ServiceDialog.OrientationPanel#addOrientationListener(MarginsPanel)::: orientation panel add orientation listener:::
ServiceDialog.OrientationPanel#updateInfo()::: orientation panel update info:::orCategory->pSupported->lSupported->rpSupported->rlSupported->if->else->if->psCurrent->isAttributeCategorySupported->values->psCurrent->getSupportedAttributeValues->if->ovalues->for->i->rbPortrait->setEnabled->rbLandscape->setEnabled->rbRevPortrait->setEnabled->rbRevLandscape->setEnabled->or->asCurrent->get->if->psCurrent->isAttributeValueSupported->psCurrent->getDefaultAttributeValue->if->psCurrent->isAttributeValueSupported->values->psCurrent->getSupportedAttributeValues->if->orValues->if->if->asCurrent->add->if->rbPortrait->setSelected->else->if->rbLandscape->setSelected->else->if->rbRevPortrait->setSelected->else->rbRevLandscape->setSelected
ServiceDialog.AppearancePanel#updateInfo()::: appearance panel update info:::pnlChromaticity->updateInfo->pnlQuality->updateInfo->pnlSides->updateInfo->pnlJobAttributes->updateInfo
ServiceDialog.ChromaticityPanel#actionPerformed(ActionEvent)::: chromaticity panel action performed:::source->e->getSource->if->asCurrent->add->else->if->asCurrent->add
ServiceDialog.ChromaticityPanel#updateInfo()::: chromaticity panel update info:::chCategory->monoSupported->colorSupported->if->else->if->psCurrent->isAttributeCategorySupported->values->psCurrent->getSupportedAttributeValues->if->cvalues->for->i->rbMonochrome->setEnabled->rbColor->setEnabled->ch->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->if->rbMonochrome->setSelected->else->rbColor->setSelected
ServiceDialog.QualityPanel#actionPerformed(ActionEvent)::: quality panel action performed:::source->e->getSource->if->asCurrent->add->else->if->asCurrent->add->else->if->asCurrent->add
ServiceDialog.QualityPanel#updateInfo()::: quality panel update info:::pqCategory->draftSupported->normalSupported->highSupported->if->else->if->psCurrent->isAttributeCategorySupported->values->psCurrent->getSupportedAttributeValues->if->qvalues->for->i->rbDraft->setEnabled->rbNormal->setEnabled->rbHigh->setEnabled->pq->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->if->rbDraft->setSelected->else->if->rbNormal->setSelected->else->rbHigh->setSelected
ServiceDialog.SidesPanel#actionPerformed(ActionEvent)::: sides panel action performed:::source->e->getSource->if->rbOneSide->isSameAs->asCurrent->add->else->if->rbTumble->isSameAs->asCurrent->add->else->if->rbDuplex->isSameAs->asCurrent->add
ServiceDialog.SidesPanel#updateInfo()::: sides panel update info:::sdCategory->osSupported->tSupported->dSupported->if->psCurrent->isAttributeCategorySupported->values->psCurrent->getSupportedAttributeValues->if->svalues->for->i->rbOneSide->setEnabled->rbTumble->setEnabled->rbDuplex->setEnabled->sd->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->if->rbOneSide->setSelected->else->if->rbTumble->setSelected->else->rbDuplex->setSelected
ServiceDialog.JobAttributesPanel#actionPerformed(ActionEvent)::: job attributes panel action performed:::if->cbJobSheets->isSelected->asCurrent->add->else->asCurrent->add
ServiceDialog.JobAttributesPanel#stateChanged(ChangeEvent)::: job attributes panel state changed:::asCurrent->snModel->getNumber->intValue->new->JobPriority->add
ServiceDialog.JobAttributesPanel#focusLost(FocusEvent)::: job attributes panel focus lost:::source->e->getSource->if->asCurrent->tfJobName->getText->Locale->getDefault->new->JobName->add->else->if->asCurrent->tfUserName->getText->Locale->getDefault->new->RequestingUserName->add
ServiceDialog.JobAttributesPanel#focusGained(FocusEvent)::: job attributes panel focus gained:::
ServiceDialog.JobAttributesPanel#updateInfo()::: job attributes panel update info:::jsCategory->jpCategory->jnCategory->unCategory->jsSupported->jpSupported->jnSupported->unSupported->if->psCurrent->isAttributeCategorySupported->js->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->cbJobSheets->setSelected->cbJobSheets->setEnabled->if->psCurrent->isAttributeCategorySupported->jp->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->new->JobPriority->value->jp->getValue->if->snModel->setValue->lblPriority->setEnabled->spinPriority->setEnabled->if->psCurrent->isAttributeCategorySupported->jn->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->Locale->getDefault->new->JobName->tfJobName->jn->getValue->setText->tfJobName->setEnabled->lblJobName->setEnabled->if->psCurrent->isAttributeCategorySupported->un->asCurrent->get->if->psCurrent->getDefaultAttributeValue->if->Locale->getDefault->new->RequestingUserName->tfUserName->un->getValue->setText->tfUserName->setEnabled->lblUserName->setEnabled
ServiceDialog.IconRadioButton#addActionListener(ActionListener)::: icon radio button add action listener:::rb->addActionListener
ServiceDialog.IconRadioButton#isSameAs(Object)::: icon radio button is same as:::return
ServiceDialog.IconRadioButton#setEnabled(boolean)::: icon radio button set enabled:::rb->setEnabled->lbl->setEnabled
ServiceDialog.IconRadioButton#isSelected()::: icon radio button is selected:::return->rb->isSelected
ServiceDialog.IconRadioButton#setSelected(boolean)::: icon radio button set selected:::rb->setSelected
ServiceDialog.ValidatingFileChooser#approveSelection()::: validating file chooser approve selection:::selected->getSelectedFile->exists->try->selected->exists->catch->finally->if->val->JOptionPane->getMsg->getMsg->showConfirmDialog->if->return->try->if->selected->createNewFile->selected->delete->catch->JOptionPane->getMsg->getMsg->showMessageDialog->return->finally->pFile->selected->getParentFile->if->selected->exists->selected->isFile->selected->canWrite->pFile->exists->pFile->exists->pFile->canWrite->JOptionPane->getMsg->getMsg->showMessageDialog->return->super->approveSelection
ServiceNotifier#addListener(PrintServiceAttributeListener)::: service notifier add listener:::synchronized->if->return->listeners->add
ServiceNotifier#removeListener(PrintServiceAttributeListener)::: service notifier remove listener:::synchronized->if->return->listeners->remove
ServiceNotifier#isEmpty()::: service notifier is empty:::return->listeners->isEmpty
ServiceNotifier#stopNotifier()::: service notifier stop notifier:::
ServiceNotifier#wake()::: service notifier wake:::try->interrupt->catch->finally
ServiceNotifier#run()::: service notifier run:::minSleepTime->sleepTime->attrs->attrEvent->listener->psa->while->try->Thread->sleep->catch->finally->synchronized->if->continue->startTime->System->currentTimeMillis->if->if->getUpdatedAttributes->else->service->getAttributes->if->psa->isEmpty->for->i->listeners->size->System->currentTimeMillis->if
SunAlternateMedia#getMedia()::: sun alternate media get media:::return
SunAlternateMedia#getCategory()::: sun alternate media get category:::return
SunAlternateMedia#getName()::: sun alternate media get name:::return
SunAlternateMedia#toString()::: sun alternate media to string:::return->media->toString
SunAlternateMedia#hashCode():::Returns a hash code value for this enumeration value:::return->media->hashCode
SunMinMaxPage#getCategory()::: sun min max page get category:::return
SunMinMaxPage#getMin()::: sun min max page get min:::return
SunMinMaxPage#getMax()::: sun min max page get max:::return
SunMinMaxPage#getName()::: sun min max page get name:::return
SunPageSelection#getCategory()::: sun page selection get category:::return
SunPageSelection#getName()::: sun page selection get name:::return
SunPageSelection#toString()::: sun page selection to string:::return
SunPrinterJobService#usesClass(Class):::This returns true if this service is implemented using the platform's built-in subclass of PrinterJob:::
Win32MediaTray#nextValue(String)::: win32 media tray next value:::winStringTable->add->return->getTraySize
Win32MediaTray#getDMBinID()::: win32 media tray get bin d:::return
Win32MediaTray#getTraySize()::: win32 media tray get tray size:::return->winStringTable->size
Win32MediaTray#getStringTable()::: win32 media tray get string table:::completeList->new->ArrayList<>->for->i->completeList->addAll->nameTable->completeList->size->new->StringArr->return->completeList->toArray
Win32MediaTray#getEnumValueTable()::: win32 media tray get enum value table:::completeList->new->ArrayList<>->for->i->completeList->addAll->enumTable->completeList->size->new->MediaTrayArr->return->completeList->toArray
Win32PrintJob#getPrintService()::: win32 print job get print service:::return
Win32PrintJob#getAttributes()::: win32 print job get attributes:::synchronized->if->jobSet->new->HashPrintJobAttributeSet->return->AttributeSetUtilities->unmodifiableView->else->return
Win32PrintJob#addPrintJobListener(PrintJobListener)::: win32 print job add print job listener:::synchronized->if->return->if->new->Vector<>->jobListeners->add
Win32PrintJob#removePrintJobListener(PrintJobListener)::: win32 print job remove print job listener:::synchronized->if->return->jobListeners->remove->if->jobListeners->isEmpty
Win32PrintJob#closeDataStreams()::: win32 print job close data streams:::if->return->data->try->doc->getPrintData->catch->return->finally->if->try->instream->close->catch->finally->else->if->try->reader->close->catch->finally->else->if->try->close->catch->finally->else->if->try->close->catch->finally
Win32PrintJob#notifyEvent(int)::: win32 print job notify event:::switch->closeDataStreams->synchronized->if->listener->event->new->PrintJobEvent->for->i->jobListeners->size
Win32PrintJob#addPrintJobAttributeListener(PrintJobAttributeListener, PrintJobAttributeSet)::: win32 print job add print job attribute listener:::synchronized->if->return->if->new->Vector<>->new->Vector<>->attrListeners->add->if->new->HashPrintJobAttributeSet->listenedAttributeSets->add
Win32PrintJob#removePrintJobAttributeListener(PrintJobAttributeListener)::: win32 print job remove print job attribute listener:::synchronized->if->return->index->attrListeners->indexOf->if->return->else->attrListeners->remove->listenedAttributeSets->remove->if->attrListeners->isEmpty
Win32PrintJob#print(Doc, PrintRequestAttributeSet)::: win32 print job print:::synchronized->if->throw->new->PrintException->else->prnState->service->getAttribute->if->prnStateReasons->service->getAttribute->if->prnStateReasons->containsKey->throw->new->PrintException->if->service->getAttribute->throw->new->PrintException->flavor->doc->getDocFlavor->data->try->doc->getPrintData->catch->notifyEvent->throw->e->toString->new->PrintException->finally->if->throw->new->PrintException->if->service->isDocFlavorSupported->notifyEvent->throw->new->PrintJobFlavorException->initializeAttributeSets->getAttributeValues->repClassName->flavor->getRepresentationClassName->if->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->try->doc->getStreamForBytes->if->notifyEvent->throw->new->PrintException->new->ImagePrinter->printableJob->service->wakeNotifier->return->catch->notifyEvent->throw->new->PrintException->notifyEvent->throw->new->PrintException->finally->else->if->flavor->equals->flavor->equals->flavor->equals->try->new->ImagePrinter->printableJob->service->wakeNotifier->return->catch->notifyEvent->throw->new->PrintException->finally->else->if->repClassName->equals->try->doc->getPrintData->pageableJob->service->wakeNotifier->return->catch->notifyEvent->throw->new->PrintException->notifyEvent->throw->new->PrintException->finally->else->if->repClassName->equals->try->doc->getPrintData->printableJob->service->wakeNotifier->return->catch->notifyEvent->throw->new->PrintException->notifyEvent->throw->new->PrintException->finally->else->if->repClassName->equals->repClassName->equals->repClassName->equals->if->repClassName->equals->url->try->url->openStream->catch->notifyEvent->throw->e->toString->new->PrintException->finally->else->try->doc->getStreamForBytes->catch->notifyEvent->throw->ioe->toString->new->PrintException->finally->if->notifyEvent->throw->new->PrintException->if->try->fos->new->FileOutputStream->buffer->new->byteArr->cread->while->instream->read->fos->write->fos->flush->fos->close->catch->notifyEvent->throw->fnfe->toString->new->PrintException->notifyEvent->throw->ioe->toString->new->PrintException->finally->notifyEvent->notifyEvent->service->wakeNotifier->return->if->service->getName->startPrintRawData->notifyEvent->throw->new->PrintException->bin->new->BufferedInputStream->bread->try->buffer->new->byteArr->while->bin->read->if->printRawData->bin->close->notifyEvent->throw->new->PrintException->bin->close->if->endPrintRawData->notifyEvent->throw->new->PrintException->notifyEvent->catch->notifyEvent->throw->e->toString->new->PrintException->finally->notifyEvent->else->notifyEvent->throw->new->PrintException->service->wakeNotifier
Win32PrintJob#printableJob(Printable)::: win32 print job printable job:::try->synchronized->if->throw->new->PrintException->else->new->sun.awt.windows.WPrinterJob->svc->getPrintService->job->setPrintService->if->c->svc->getDefaultAttributeValue->c->getValue->if->media->svc->getDefaultAttributeValue->if->MediaSize->getMediaSizeForName->if->svc->getDefaultAttributeValue->job->setCopies->job->setJobName->pf->new->PageFormat->if->p->new->Paper->p->mediaSize->getX->mediaSize->getY->setSize->p->p->getWidth->p->getHeight->setImageableArea->pf->setPaper->if->pf->setOrientation->else->if->pf->setOrientation->job->setPrintable->job->print->notifyEvent->return->catch->notifyEvent->throw->new->PrintException->finally->notifyEvent
Win32PrintJob#pageableJob(Pageable)::: win32 print job pageable job:::try->synchronized->if->throw->new->PrintException->else->new->sun.awt.windows.WPrinterJob->svc->getPrintService->job->setPrintService->if->c->svc->getDefaultAttributeValue->c->getValue->job->setCopies->job->setJobName->job->setPageable->job->print->notifyEvent->return->catch->notifyEvent->throw->new->PrintException->finally->notifyEvent
Win32PrintJob#initializeAttributeSets(Doc, PrintRequestAttributeSet)::: win32 print job initialize attribute sets:::new->HashPrintRequestAttributeSet->new->HashPrintJobAttributeSet->attrs->if->reqAttrSet->addAll->reqSet->toArray->for->i->docSet->doc->getAttributes->if->docSet->toArray->for->i->userName->try->System->getProperty->catch->finally->if->userName->equals->ruName->reqSet->get->if->jobAttrSet->ruName->getValue->ruName->getLocale->new->JobOriginatingUserName->add->else->jobAttrSet->new->JobOriginatingUserName->add->else->jobAttrSet->new->JobOriginatingUserName->add->if->jobAttrSet->get->jobName->if->docSet->get->docName->docSet->get->docName->getValue->docName->getLocale->new->JobName->jobAttrSet->add->else->str->try->printData->doc->getPrintData->if->doc->getPrintData->toString->catch->finally->new->JobName->jobAttrSet->add->AttributeSetUtilities->unmodifiableView
Win32PrintJob#getAttributeValues(DocFlavor)::: win32 print job get attribute values:::if->reqAttrSet->get->else->category->attrs->reqAttrSet->toArray->for->i
Win32PrintJob#startPrintRawData(String, String)::: win32 print job start print raw data:::
Win32PrintJob#printRawData(byte[], int)::: win32 print job print raw data:::
Win32PrintJob#endPrintRawData()::: win32 print job end print raw data:::
Win32PrintJob#cancel()::: win32 print job cancel:::synchronized->if->throw->new->PrintException->else->if->job->cancel->notifyEvent->return->else->throw->new->PrintException
Win32PrintService#invalidateService()::: win32 print service invalidate service:::
Win32PrintService#getName()::: win32 print service get name:::return
Win32PrintService#getPrinterName()::: win32 print service get printer name:::if->new->PrinterName->return
Win32PrintService#findPaperID(MediaSizeName)::: win32 print service find paper d:::if->winMedia->return->winMedia->getDMPaper->else->for->id->if->msn->equals->return->else->if->msn->equals->return->else->if->msn->equals->return->initMedia->if->idList->size->for->i->idList->size->return
Win32PrintService#findTrayID(MediaTray)::: win32 print service find tray d:::getMediaTrays->if->winTray->return->winTray->getDMBinID->for->id->return
Win32PrintService#findMediaTray(int)::: win32 print service find media tray:::if->return->trays->getMediaTrays->if->for->i->return
Win32PrintService#findWin32Media(int)::: win32 print service find win32 media:::if->return->switch->return->return->return->return
Win32PrintService#addToUniqueList(ArrayList, MediaSizeName)::: win32 print service add to unique list:::msn->for->i->msnList->size->msnList->add->return
Win32PrintService#initMedia()::: win32 print service init media:::if->return->media->getPort->getAllMediaIDs->if->return->msnList->new->ArrayList<>->trailingWmsList->new->ArrayList<Win32MediaSize>->mediaName->added->queryFailure->prnArea->new->ArrayList<>->for->i->dmPaperNameList->new->ArrayList<String>->getMediaSizes->for->i->idList->size->foreach->addToUniqueList->msnList->size->new->MediaSizeNameArr->msnList->toArray
Win32PrintService#getMediaPrintables(MediaSizeName)::: win32 print service get media printables:::if->if->return->else->if->mpaMap->get->mpaArr->new->MediaPrintableAreaArr->mpaMap->get->return->initMedia->if->return->loopNames->if->new->MediaSizeNameArr->else->if->new->HashMap<>->for->i->if->mpaMap->size->return->if->if->mpaMap->get->return->mpaArr->new->MediaPrintableAreaArr->mpaMap->get->return->else->mpaMap->values->new->MediaPrintableAreaArr->toArray->return
Win32PrintService#getMediaTrays()::: win32 print service get media trays:::if->return->prnPort->getPort->mediaTr->getAllMediaTrays->winMediaTrayNames->getAllMediaTrayNames->if->return->nTray->for->i->arr->new->MediaTrayArr->dmBin->for->i->j->Math->min->return
Win32PrintService#isSameSize(float, float, float, float)::: win32 print service is same size:::diffX->diffY->diffXrev->diffYrev->if->Math->abs->Math->abs->Math->abs->Math->abs->return->else->return
Win32PrintService#findMatchingMediaSizeNameMM(float, float)::: win32 print service find matching media size name m:::if->for->k->return
Win32PrintService#getMediaSizes(ArrayList, int[], ArrayList)::: win32 print service get media sizes:::if->new->ArrayList<String>->prnPort->getPort->mediaSz->getAllMediaSizes->winMediaNames->getAllMediaNames->msn->ms->wid->ht->if->return->nMedia->msList->new->ArrayList<>->for->i->arr2->msList->size->new->MediaSizeArr->msList->toArray->return
Win32PrintService#getPrinterIsAcceptingJobs()::: win32 print service get printer is accepting jobs:::if->getJobStatus->return->else->return
Win32PrintService#getPrinterState()::: win32 print service get printer state:::if->return->else->return
Win32PrintService#getPrinterStateReasons()::: win32 print service get printer state reasons:::if->psr->new->PrinterStateReasons->psr->put->return->else->return
Win32PrintService#getQueuedJobCount()::: win32 print service get queued job count:::count->getJobStatus->if->return->new->QueuedJobCount->else->return->new->QueuedJobCount
Win32PrintService#isSupportedCopies(Copies)::: win32 print service is supported copies:::synchronized->if->getPort->getCopiesSupported->numCopies->copies->getValue->return
Win32PrintService#isSupportedMedia(MediaSizeName)::: win32 print service is supported media:::initMedia->if->for->i->return
Win32PrintService#isSupportedMediaPrintableArea(MediaPrintableArea)::: win32 print service is supported media printable area:::getMediaPrintables->units->if->for->i->return
Win32PrintService#isSupportedMediaTray(MediaTray)::: win32 print service is supported media tray:::trays->getMediaTrays->if->for->i->return
Win32PrintService#getPrinterCapabilities()::: win32 print service get printer capabilities:::if->getPort->getCapabilities->return
Win32PrintService#getPort()::: win32 print service get port:::if->getPrinterPort->return
Win32PrintService#getDefaultPrinterSettings()::: win32 print service get default printer settings:::if->getPort->getDefaultSettings->return
Win32PrintService#getPrintResolutions()::: win32 print service get print resolutions:::if->prnRes->getPort->getAllResolutions->if->new->PrinterResolutionArr->else->nRes->arrList->new->ArrayList<>->pr->for->i->arrList->arrList->size->new->PrinterResolutionArr->toArray->return
Win32PrintService#isSupportedResolution(PrinterResolution)::: win32 print service is supported resolution:::supportedRes->getPrintResolutions->if->for->i->return
Win32PrintService#createPrintJob()::: win32 print service create print job:::security->System->getSecurityManager->if->security->checkPrintJobAccess->return->new->Win32PrintJob
Win32PrintService#getDynamicAttributes()::: win32 print service get dynamic attributes:::attrs->new->HashPrintServiceAttributeSet->attrs->getPrinterIsAcceptingJobs->add->attrs->getQueuedJobCount->add->return
Win32PrintService#getUpdatedAttributes()::: win32 print service get updated attributes:::currSet->getDynamicAttributes->if->return->AttributeSetUtilities->unmodifiableView->else->updates->new->HashPrintServiceAttributeSet->attrs->currSet->toArray->for->i->return->AttributeSetUtilities->unmodifiableView
Win32PrintService#wakeNotifier()::: win32 print service wake notifier:::synchronized->if->notifier->wake
Win32PrintService#addPrintServiceAttributeListener(PrintServiceAttributeListener)::: win32 print service add print service attribute listener:::synchronized->if->return->if->new->ServiceNotifier->notifier->addListener
Win32PrintService#removePrintServiceAttributeListener(PrintServiceAttributeListener)::: win32 print service remove print service attribute listener:::synchronized->if->return->notifier->removeListener->if->notifier->isEmpty->notifier->stopNotifier
Win32PrintService#getAttribute(Class)::: win32 print service get attribute:::if->throw->new->NullPointerException->if->isAssignableFrom->throw->new->IllegalArgumentException->if->caps->getPrinterCapabilities->if->return->else->return->else->if->return->getPrinterName->else->if->return->getPrinterState->else->if->return->getPrinterStateReasons->else->if->return->getQueuedJobCount->else->if->return->getPrinterIsAcceptingJobs->else->return
Win32PrintService#getAttributes()::: win32 print service get attributes:::attrs->new->HashPrintServiceAttributeSet->attrs->getPrinterName->add->attrs->getPrinterIsAcceptingJobs->add->prnState->getPrinterState->if->attrs->add->prnStateReasons->getPrinterStateReasons->if->attrs->add->attrs->getQueuedJobCount->add->caps->getPrinterCapabilities->if->attrs->add->else->attrs->add->return->AttributeSetUtilities->unmodifiableView
Win32PrintService#getSupportedDocFlavors()::: win32 print service get supported doc flavors:::len->supportedDocFlavors->caps->getPrinterCapabilities->if->new->DocFlavorArr->System->arraycopy->else->new->DocFlavorArr->System->arraycopy->return
Win32PrintService#isDocFlavorSupported(DocFlavor)::: win32 print service is doc flavor supported:::supportedDocFlavors->if->isPostScriptFlavor->getSupportedDocFlavors->else->for->f->return
Win32PrintService#getSupportedAttributeCategories()::: win32 print service get supported attribute categories:::categList->new->ArrayList<>->for->i->caps->getPrinterCapabilities->if->categList->add->if->defaults->getDefaultPrinterSettings->if->categList->add->supportedRes->getPrintResolutions->if->categList->add->if->GraphicsEnvironment->isHeadless->categList->add->categList->add->return->categList->categList->size->new->Class<?>Arr->toArray
Win32PrintService#isAttributeCategorySupported(Class)::: win32 print service is attribute category supported:::if->throw->new->NullPointerException->if->isAssignableFrom->throw->new->IllegalArgumentException->classList->getSupportedAttributeCategories->for->i->return
Win32PrintService#getDefaultAttributeValue(Class)::: win32 print service get default attribute value:::if->throw->new->NullPointerException->if->isAssignableFrom->throw->new->IllegalArgumentException->if->isAttributeCategorySupported->return->defaults->getDefaultPrinterSettings->defPaper->defYRes->defQuality->defCopies->defOrient->defSides->defCollate->defColor->if->if->return->new->Copies->else->return->new->Copies->else->if->if->return->else->return->else->if->return->new->JobName->else->if->if->return->else->return->else->if->return->new->PageRanges->else->if->msn->findWin32Media->if->if->isSupportedMedia->findPaperID->return->else->initMedia->if->if->idList->size->defIdObj->Integer->valueOf->index->idList->indexOf->if->return->getMediaSizeName->return->else->if->msn->findWin32Media->if->isSupportedMedia->findPaperID->prnArea->getMediaPrintableArea->if->printableArea->try->new->MediaPrintableArea->catch->finally->return->return->else->if->return->else->if->try->return->new->File->toURI->new->Destination->catch->try->return->new->URI->new->Destination->catch->return->finally->finally->else->if->switch->return->return->return->else->if->yRes->xRes->if->res->if->return->new->PrinterResolution->else->return->new->PrinterResolution->else->if->caps->getPrinterCapabilities->if->return->else->return->else->if->if->switch->return->return->return->else->if->userName->try->System->getProperty->catch->finally->return->new->RequestingUserName->else->if->if->return->else->return->else->if->return->return
Win32PrintService#isPostScriptFlavor(DocFlavor)::: win32 print service is post script flavor:::if->flavor->equals->flavor->equals->flavor->equals->return->else->return
Win32PrintService#isPSDocAttr(Class)::: win32 print service is doc attr:::if->return->else->return
Win32PrintService#isAutoSense(DocFlavor)::: win32 print service is auto sense:::if->flavor->equals->flavor->equals->flavor->equals->return->else->return
Win32PrintService#getSupportedAttributeValues(Class, DocFlavor, AttributeSet)::: win32 print service get supported attribute values:::if->throw->new->NullPointerException->if->isAssignableFrom->throw->new->IllegalArgumentException->if->if->isDocFlavorSupported->throw->new->IllegalArgumentException->else->if->isAutoSense->isPostScriptFlavor->isPSDocAttr->return->if->isAttributeCategorySupported->return->if->return->new->JobName->else->if->userName->try->System->getProperty->catch->finally->return->new->RequestingUserName->else->if->caps->getPrinterCapabilities->if->return->else->return->else->if->if->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->caps->getPrinterCapabilities->if->arr->new->ChromaticityArr->return->else->arr->new->ChromaticityArr->return->else->return->else->if->try->return->new->File->toURI->new->Destination->catch->try->return->new->URI->new->Destination->catch->return->finally->finally->else->if->if->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->arr->new->OrientationRequestedArr->return->else->return->else->if->synchronized->if->getPort->getCopiesSupported->return->new->CopiesSupported->else->if->initMedia->len->trays->getMediaTrays->arr->new->MediaArr->if->System->arraycopy->if->System->arraycopy->return->else->if->mediaName->if->attributes->get->if->mpas->getMediaPrintables->if->arr->new->MediaPrintableAreaArr->System->arraycopy->return->else->return->else->if->return->getDefaultAttributeValue->new->SunAlternateMedia->else->if->if->flavor->equals->flavor->equals->arr->new->PageRangesArr->new->PageRanges->return->else->return->else->if->supportedRes->getPrintResolutions->if->return->arr->new->PrinterResolutionArr->System->arraycopy->return->else->if->if->flavor->equals->flavor->equals->arr->new->SidesArr->return->else->return->else->if->arr->new->PrintQualityArr->return->else->if->if->flavor->equals->flavor->equals->arr->new->SheetCollateArr->return->else->return->else->if->arr->new->FidelityArr->return->else->return
Win32PrintService#isAttributeValueSupported(Attribute, DocFlavor, AttributeSet)::: win32 print service is attribute value supported:::if->throw->new->NullPointerException->category->attr->getCategory->if->if->isDocFlavorSupported->throw->new->IllegalArgumentException->else->if->isAutoSense->isPostScriptFlavor->isPSDocAttr->return->if->isAttributeCategorySupported->return->else->if->if->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->caps->getPrinterCapabilities->if->return->else->return->else->return->else->if->return->isSupportedCopies->else->if->uri->getURI->if->uri->getScheme->equals->uri->getSchemeSpecificPart->equals->return->else->return->else->if->if->return->isSupportedMedia->if->return->isSupportedMediaTray->else->if->return->isSupportedMediaPrintableArea->else->if->media->getMedia->return->isAttributeValueSupported->else->if->if->flavor->equals->flavor->equals->return->else->if->if->return->isSupportedResolution->else->if->if->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->flavor->equals->return->else->if->caps->getPrinterCapabilities->isColorSup->if->return->else->if->return->else->if->owner->dts->attributes->get->if->return->DialogOwnerAccessor->getID->else->if->DialogOwnerAccessor->getID->return->else->if->owner->getOwner->return->else->return->Toolkit->getDefaultToolkit->isAlwaysOnTopSupported->return
Win32PrintService#getUnsupportedAttributes(DocFlavor, AttributeSet)::: win32 print service get unsupported attributes:::if->isDocFlavorSupported->throw->new->IllegalArgumentException->if->return->attr->unsupp->new->HashAttributeSet->attrs->attributes->toArray->for->i->if->unsupp->isEmpty->return->else->return
Win32PrintService.Win32DocumentPropertiesUI#showDocumentProperties(PrinterJob, Window, PrintService, PrintRequestAttributeSet)::: win32 document properties i show document properties:::if->return->wJob->return->wJob->showDocumentProperties
Win32PrintService#getDocumentPropertiesUI()::: win32 print service get document properties i:::return->new->Win32DocumentPropertiesUI
Win32PrintService.Win32ServiceUIFactory#getUI(int, String)::: win32 service factory get i:::if->return->if->equals->return->service->getDocumentPropertiesUI->throw->new->IllegalArgumentException
Win32PrintService.Win32ServiceUIFactory#getUIClassNamesForRole(int)::: win32 service factory get class names for role:::if->return->if->names->new->StringArr->return->throw->new->IllegalArgumentException
Win32PrintService#getServiceUIFactory()::: win32 print service get service factory:::if->new->Win32ServiceUIFactory->return
Win32PrintService#toString()::: win32 print service to string:::return->getName
Win32PrintService#equals(Object)::: win32 print service equals:::return->getName->getName->equals
Win32PrintService#hashCode()::: win32 print service hash code:::return->this->getClass->hashCode->getName->hashCode
Win32PrintService#usesClass(Class)::: win32 print service uses class:::return
Win32PrintService#getAllMediaIDs(String, String)::: win32 print service get all media ds:::
Win32PrintService#getAllMediaSizes(String, String)::: win32 print service get all media sizes:::
Win32PrintService#getAllMediaTrays(String, String)::: win32 print service get all media trays:::
Win32PrintService#getMediaPrintableArea(String, int)::: win32 print service get media printable area:::
Win32PrintService#getAllMediaNames(String, String)::: win32 print service get all media names:::
Win32PrintService#getAllMediaTrayNames(String, String)::: win32 print service get all media tray names:::
Win32PrintService#getCopiesSupported(String, String)::: win32 print service get copies supported:::
Win32PrintService#getAllResolutions(String, String)::: win32 print service get all resolutions:::
Win32PrintService#getCapabilities(String, String)::: win32 print service get capabilities:::
Win32PrintService#getDefaultSettings(String, String)::: win32 print service get default settings:::
Win32PrintService#getJobStatus(String, int)::: win32 print service get job status:::
Win32PrintService#getPrinterPort(String)::: win32 print service get printer port:::
Win32MediaSize#nextValue(String)::: win32 media size next value:::winStringTable->add->return->winStringTable->size
Win32MediaSize#findMediaName(String)::: win32 media size find media name:::nameIndex->winStringTable->indexOf->if->return->winEnumTable->get->return
Win32MediaSize#getPredefMedia()::: win32 media size get predef media:::return
Win32MediaSize#getSuperEnumTable()::: win32 media size get super enum table:::return->super->getEnumValueTable
Win32MediaSize#getDMPaper()::: win32 media size get paper:::return
Win32MediaSize#getStringTable()::: win32 media size get string table:::nameTable->winStringTable->size->new->StringArr->return->winStringTable->toArray
Win32MediaSize#getEnumValueTable()::: win32 media size get enum value table:::enumTable->winEnumTable->size->new->MediaSizeNameArr->return->winEnumTable->toArray

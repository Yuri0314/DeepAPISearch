ConsoleKeys#getVariable(String):::Retrieves the value of a variable that was set in the .inputrc file during processing:::return->variables->get
ConsoleReader#getInputRc():::Retrieve the URL for the inputrc configuration file in effect:::path->Configuration->getString->if->f->Configuration->getUserHome->new->File->if->f->exists->new->File->return->f->toURI->toURL->else->return->Urls->create
ConsoleReader#close():::Shuts the console reader down:::if->in->shutdown
ConsoleReader#shutdown():::Shuts the console reader down:::this->close
ConsoleReader#finalize():::Shuts down the ConsoleReader if the JVM attempts to clean it up.:::try->close->catch->finally->super->finalize
ConsoleReader#setCopyPasteDetection(boolean):::Enables or disables copy and paste detection:::
ConsoleReader#setBellEnabled(boolean):::Set whether the console bell is enabled.:::
ConsoleReader#getBellEnabled():::Get whether the console bell is enabled:::return
ConsoleReader#setHandleUserInterrupt(boolean):::Set whether user interrupts (ctrl-C) are handled by having JLine throw UserInterruptException from #readLine:::
ConsoleReader#getHandleUserInterrupt():::Get whether user interrupt handling is enabled:::return
ConsoleReader#setHandleLitteralNext(boolean):::Set wether literal next are handled by JLine.:::
ConsoleReader#getHandleLitteralNext():::Get wether literal next are handled by JLine.:::return
ConsoleReader#setCommentBegin(String):::Sets the string that will be used to start a comment when the insert-comment key is struck.:::
ConsoleReader#setEchoCharacter(Character):::Set the echo character:::
ConsoleReader#getEchoCharacter():::Returns the echo character.:::return
ConsoleReader#resetLine():::Erase the current line.:::if->return->killed->new->StringBuilder->while->c->buf->current->if->break->killed->append->backspace->copy->killed->reverse->toString->killRing->addBackwards->return
ConsoleReader#setCursorPosition(int):::Move the cursor position to the specified absolute index.:::if->return->return->moveCursor
ConsoleReader#drawLine():::Output put the prompt + the current buffer:::prompt->getPrompt->if->rawPrint->fmtPrint->drawBuffer
ConsoleReader#redrawLine():::Clear the line and redraw it.:::tputs->drawLine
ConsoleReader#finishBuffer():::Clear the buffer and add its contents to the history.:::str->toString->historyLine->if->try->expandEvents->str->replace->historyLine->replaceAll->catch->Log->error->beep->buf->clear->finally->if->str->length->if->isHistoryEnabled->history->add->else->history->moveToEnd->setLength->return
ConsoleReader#expandEvents(String):::Expand event designator such as !!, !#, !3, etc..:::sb->new->StringBuilder->for->i->str->length->result->sb->toString->if->str->equals->getCursorPosition->fmtPrint->println->flush->return
ConsoleReader#putString(CharSequence):::Write out the specified string to the buffer and the output stream.:::pos->getCursorPosition->buf->write->if->fmtPrint->else->if->else->str->length->rawPrint->drawBuffer
ConsoleReader#back(int):::Move the visual cursor backward without modifying the buffer cursor.:::if->return->i0->wcwidth->i1->wcwidth->moveCursorFromTo
ConsoleReader#flush():::Flush the console output stream:::out->flush
ConsoleReader#backspace():::Issue a backspace.:::return->backspace
ConsoleReader#accept():::The equivalent of hitting &lt;RET&gt;:::moveToEnd->println->flush->return->finishBuffer
ConsoleReader#moveCursor(int):::Move the cursor where characters.:::where->if->return->if->length->return->if->else->if->length->length->moveInternal->return
ConsoleReader#readCharacter():::Read a character from the console.:::return->readCharacter
ConsoleReader#readCharacter(boolean):::Read a character from the console:::c->reader->read->if->Log->trace->if->terminal->isSupported->clearEcho->if->in->peek->next->reader->read->return->return
ConsoleReader#readBinding(KeyMap):::Read from the input stream and decode an operation from the key map:::o->opBuffer->setLength->do->c->pushBackChar->isEmpty->readCharacter->pushBackChar->pop->if->return->opBuffer->appendCodePoint->if->Character->toChars->new->String->if->else->keys->getBound->if->if->killRing->resetLastYank->if->killRing->resetLastKill->if->opBuffer->opBuffer->length->setLength->opBuffer->Character->toLowerCase->append->keys->getBound->if->if->pushBackChar->isEmpty->in->isNonBlockingEnabled->in->peek->getAnotherKey->if->continue->opBuffer->setLength->else->continue->while->opBuffer->length->opBuffer->opBuffer->length->charAt->opBuffer->opBuffer->length->setLength->o2->keys->getBound->if->getAnotherKey->if->continue->else->pushBackChar->push->while->return
ConsoleReader#readLine():::Read the next line and return the contents of the buffer.:::return->readLine
ConsoleReader#readLine(Character):::Read the next line with the specified character mask:::return->readLine
ConsoleReader#readLine(String, Character):::Read a line from the in InputStream, and return the line (without any trailing newlines).:::return->readLine
ConsoleReader#setKeyMap(String):::Sets the current keymap by name:::return->consoleKeys->setKeyMap
ConsoleReader#getKeyMap():::Returns the name of the current key mapping.:::return->consoleKeys->getKeys->getName
ConsoleReader#readLine(String, Character, String):::Read a line from the in InputStream, and return the line (without any trailing newlines).:::repeatCount->if->setPrompt->else->getPrompt->try->if->buf->write->if->terminal->isSupported->beforeReadLine->if->buffer->length->prompt->length->drawLine->out->flush->if->terminal->isAnsiSupported->System->console->out->write->out->flush->input->new->StringBuilder->while->read->while->in->read->input->appendCodePoint->input->appendCodePoint->m->CURSOR_COLUMN_PATTERN->matcher->if->m->matches->Integer->m->group->parseInt->prefix->m->group->chars->new->ArrayList<>->for->i->prefix->length->pushBackChar->addAll->break->if->terminal->isSupported->return->readLineSimple->if->terminal->disableInterruptCharacter->if->disableLitteralNextCharacter->originalPrompt->success->while->o->getKeys->readBinding->if->return->c->if->opBuffer->length->opBuffer->opBuffer->length->codePointBefore->Log->trace->if->macro->for->i->macro->length->opBuffer->setLength->continue->try->actionListener->Class->ClassLoader->getSystemClassLoader->forName->actionEvent->Class->ClassLoader->getSystemClassLoader->forName->if->actionListener->o->getClass->isAssignableFrom->actionPerformed->actionListener->getMethod->try->actionPerformed->invoke->catch->Log->error->finally->opBuffer->setLength->continue->catch->finally->if->run->opBuffer->setLength->continue->oldBuf->new->CursorBuffer->append->if->cursorDest->switch->buf->clear->buf->write->break->if->searchTerm->length->searchTerm->append->if->searchTerm->toString->searchBackwards->break->if->searchTerm->length->searchTerm->append->if->history->size->searchTerm->toString->searchForwards->break->if->searchTerm->length->searchTerm->searchTerm->length->deleteCharAt->if->searchTerm->toString->searchBackwards->else->searchTerm->toString->searchForwards->break->searchTerm->appendCodePoint->if->searchTerm->toString->searchBackwards->else->searchTerm->toString->searchForwards->break->if->history->moveTo->history->current->toString->searchTerm->toString->indexOf->if->break->if->if->searchTerm->length->if->printSearchStatus->else->printForwardSearchStatus->else->if->beep->searchTerm->toString->printSearchStatus->else->if->searchTerm->toString->history->get->toString->printSearchStatus->else->searchTerm->toString->history->get->toString->printForwardSearchStatus->else->restoreLine->if->isArgDigit->count->if->op->cursorStart->origState->if->viDeleteChangeYankToRemap->switch->isTabLiteral->if->pushBackChar->isEmpty->in->isNonBlockingEnabled->in->peek->if->complete->else->putString->break->printCompletionCandidates->break->setCursorPosition->break->yank->break->yankPop->break->killLine->break->setCursorPosition->killLine->break->clearScreen->redrawLine->break->buf->buf->isOverTyping->setOverTyping->break->putString->break->return->accept->if->abort->break->if->println->flush->partialLine->toString->buf->clear->history->moveToEnd->throw->new->UserInterruptException->break->consoleKeys->setKeyMap->return->accept->previousWord->break->nextWord->break->moveHistory->break->moveHistory->setCursorPosition->break->moveHistory->break->moveHistory->setCursorPosition->break->backspace->break->if->length->return->deleteCurrentCharacter->break->deleteCurrentCharacter->break->moveCursor->break->moveCursor->break->resetLine->break->unixWordRubout->break->deletePreviousWord->break->deleteNextWord->break->history->moveToFirst->if->history->current->setBuffer->break->history->moveToLast->if->history->current->setBuffer->break->buf->upToCursor->new->StringBuffer->searchTerm->toString->history->index->searchBackwards->if->beep->else->history->moveTo->if->history->current->setBufferKeepPos->break->buf->upToCursor->new->StringBuffer->index->history->index->if->history->size->history->moveToEnd->searchTerm->toString->setBufferKeepPos->else->if->history->size->searchTerm->toString->searchForwards->if->beep->else->history->moveTo->if->history->current->setBufferKeepPos->break->new->CursorBuffer->originalBuffer->write->if->searchTerm->toString->new->StringBuffer->if->searchTerm->length->searchTerm->toString->searchBackwards->if->beep->searchTerm->toString->history->get->toString->printSearchStatus->else->printSearchStatus->break->new->CursorBuffer->originalBuffer->write->if->searchTerm->toString->new->StringBuffer->if->searchTerm->length->searchTerm->toString->searchForwards->if->beep->searchTerm->toString->history->get->toString->printForwardSearchStatus->else->printForwardSearchStatus->break->capitalizeWord->break->upCaseWord->break->downCaseWord->break->moveToEnd->break->putString->break->consoleKeys->loadKeys->break->break->macro->macro->length->opBuffer->length->substring->break->for->i->macro->length->opBuffer->setLength->break->consoleKeys->setKeyMap->break->if->moveCursor->consoleKeys->setKeyMap->break->consoleKeys->setKeyMap->break->moveCursor->consoleKeys->setKeyMap->break->moveToEnd->consoleKeys->setKeyMap->break->if->length->return->return->accept->transposeChars->break->return->insertComment->insertClose->break->insertClose->break->insertClose->break->return->insertComment->viMatch->break->lastChar->opBuffer->charAt->viSearch->if->pushBackChar->push->break->opBuffer->charAt->break->if->opBuffer->charAt->else->setCursorPosition->break->setCursorPosition->viNextWord->break->viPreviousWord->break->viNextWord->break->viEndWord->break->setCursorPosition->consoleKeys->setKeyMap->break->viRubout->break->viDelete->break->if->setCursorPosition->killLine->else->break->if->toString->else->break->if->setCursorPosition->killLine->consoleKeys->setKeyMap->else->break->setCursorPosition->killLine->consoleKeys->setKeyMap->break->viPut->break->searchChar->pushBackChar->isEmpty->readCharacter->pushBackChar->pop->viCharSearch->break->viChangeCase->break->pushBackChar->isEmpty->readCharacter->pushBackChar->pop->viChangeChar->break->length->viDeleteTo->break->length->viDeleteTo->consoleKeys->setKeyMap->break->consoleKeys->setKeyMap->break->getCursorBuffer->clear->return->accept->break->break->break->if->if->viDeleteTo->else->if->viDeleteTo->consoleKeys->setKeyMap->else->if->viYankTo->if->if->if->beep->opBuffer->setLength->flush->catch->finally->if->terminal->isSupported->afterReadLine->if->terminal->enableInterruptCharacter
ConsoleReader#addCompleter(Completer):::Add the specified jline.console.completer.Completer to the list of handlers for tab-completion.:::return->completers->add
ConsoleReader#removeCompleter(Completer):::Remove the specified jline.console.completer.Completer from the list of handlers for tab-completion.:::return->completers->remove
ConsoleReader#getCompleters():::Returns an unmodifiable list of all the completers.:::return->Collections->unmodifiableList
ConsoleReader#complete():::Use the completers to modify the buffer with the appropriate completions.:::if->completers->size->return->candidates->new->LinkedList<CharSequence>->bufstr->toString->cursor->position->foreach->if->comp->complete->break->return->candidates->size->getCompletionHandler->complete
ConsoleReader#setPaginationEnabled(boolean):::Whether to use pagination when the number of rows of candidates exceeds the height of the terminal.:::
ConsoleReader#isPaginationEnabled():::Whether to use pagination when the number of rows of candidates exceeds the height of the terminal.:::return
ConsoleReader#setHistoryEnabled(boolean):::Whether or not to add new commands to the history buffer.:::
ConsoleReader#isHistoryEnabled():::Whether or not to add new commands to the history buffer.:::return
ConsoleReader#print(CharSequence):::Output the specified string to the output stream (but not the buffer).:::s->toString->rawPrint
ConsoleReader#println():::Output a platform-dependent newline.:::rawPrint
ConsoleReader#rawPrint(int):::Raw output printing:::out->write
ConsoleReader#delete():::Issue a delete.:::if->length->return->delete->drawBuffer->return
ConsoleReader#killLine():::Kill the buffer ahead of the current cursor position.:::cp->len->length->if->return->num->pos->getCursorPosition->width->wcwidth->clearAhead->killed->new->charArr->getChars->delete->copy->new->String->killRing->add->return
ConsoleReader#clearScreen():::Clear the screen by issuing the ANSI "clear screen" code.:::if->tputs->println->return
ConsoleReader#beep():::Issue an audible keyboard bell.:::if->if->tputs->flush
ConsoleReader#printColumns(Collection):::Output the specified Collection in proper columns.:::if->items->isEmpty->return->width->getTerminal->getWidth->height->getTerminal->getHeight->maxWidth->foreach->len->Ansi->item->toString->stripAnsi->wcwidth->Math->max->Log->debug->showLines->if->isPaginationEnabled->else->buff->new->StringBuilder->realLength->foreach->if->buff->toString->rawPrintln->buff->setLength->if->resources->getString->print->flush->c->readCharacter->if->else->if->tputs->if->break->buff->item->toString->append->strippedItemLength->Ansi->item->toString->stripAnsi->wcwidth->for->i->if->buff->length->buff->toString->rawPrintln
ConsoleReader#resetPromptLine(String, String, int):::Erases the current line with the existing prompt, then redraws the line with the provided prompt and buffer:::moveToEnd->append->promptLength->if->length->setPrompt->backspaceAll->setPrompt->redrawLine->setBuffer->if->buffer->length->setCursorPosition->flush
ConsoleReader#searchBackwards(String, int):::Search backward in history from a given position.:::return->searchBackwards
ConsoleReader#searchBackwards(String):::Search backwards in history from the current position.:::return->history->index->searchBackwards
ConsoleReader#searchForwards(String, int):::Search forward in history from a given position.:::return->searchForwards
ConsoleReader#searchForwards(String):::Search forwards in history from the current position.:::return->history->index->searchForwards
CursorBuffer#write(char):::Write the specific character into the buffer, setting the cursor position ahead one:::buffer->insert->if->isOverTyping->buffer->length->buffer->deleteCharAt
CursorBuffer#write(CharSequence):::Insert the specified chars into the buffer, setting the cursor to the end of the insertion point.:::checkNotNull->if->buffer->length->buffer->append->else->buffer->insert->str->length->if->isOverTyping->buffer->length->buffer->str->length->delete
KillRing#resetLastYank():::Resets the last-yank state.:::
KillRing#resetLastKill():::Resets the last-kill state.:::
KillRing#lastYank():::Returns true if the last command was a yank.:::return
KillRing#add(String):::Adds the string to the kill-ring:::if->if->return->next
KillRing#addBackwards(String):::Adds the string to the kill-ring product of killing backwards:::if->if->return->next
KillRing#yank():::Yanks a previously killed text:::return
KillRing#yankPop():::Moves the pointer to the current slot back and returns the text in that position:::if->prev->return->return

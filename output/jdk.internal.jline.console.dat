ConsoleKeys#setKeyMap(String)::: console keys set key map:::map->keyMaps->get->if->return->return
ConsoleKeys#getKeyMaps()::: console keys get key maps:::return
ConsoleKeys#getKeys()::: console keys get keys:::return
ConsoleKeys#setKeys(KeyMap)::: console keys set keys:::
ConsoleKeys#loadKeys(String, URL)::: console keys load keys:::keyMaps->get->try->input->inputrcUrl->openStream->try->loadKeys->Log->debug->catch->finally->try->input->close->catch->finally->catch->if->inputrcUrl->getProtocol->equals->file->inputrcUrl->getPath->new->File->if->file->exists->Log->warn->else->Log->warn->finally
ConsoleKeys#loadKeys(InputStream, String)::: console keys load keys:::reader->new->java.io.InputStreamReader->new->BufferedReader->line->parsing->ifsStack->new->ArrayList<Boolean>->while->reader->readLine->try->line->trim->if->line->length->continue->if->line->charAt->continue->i->if->line->charAt->cmd->args->for->line->length->line->charAt->line->charAt->s->for->line->length->line->charAt->line->charAt->line->substring->for->line->length->line->charAt->line->charAt->for->line->length->line->charAt->line->charAt->line->substring->if->equalsIgnoreCase->ifsStack->add->if->continue->if->args->startsWith->else->if->args->startsWith->mode->variables->get->args->length->substring->equalsIgnoreCase->else->args->equalsIgnoreCase->else->if->equalsIgnoreCase->if->ifsStack->isEmpty->throw->new->IllegalArgumentException->invert->foreach->if->break->if->else->if->equalsIgnoreCase->if->ifsStack->isEmpty->throw->new->IllegalArgumentException->ifsStack->ifsStack->size->remove->else->if->equalsIgnoreCase->continue->if->continue->equivalency->keySeq->if->line->charAt->esc->for->for->line->length->line->charAt->line->charAt->line->charAt->line->substring->line->length->line->charAt->line->charAt->if->if->keySeq->equalsIgnoreCase->key->val->for->line->length->line->charAt->line->charAt->s->for->line->length->line->charAt->line->charAt->line->substring->for->line->length->line->charAt->line->charAt->for->line->length->line->charAt->line->charAt->line->substring->setVar->else->for->line->length->line->charAt->line->charAt->start->if->line->length->line->charAt->line->charAt->delim->line->charAt->esc->for->for->line->length->line->charAt->line->charAt->val->line->Math->line->length->min->Math->line->length->min->substring->if->keySeq->charAt->translateQuoted->else->keyName->keySeq->lastIndexOf->keySeq->keySeq->lastIndexOf->substring->key->getKeyFromName->keySeq->toLowerCase->if->keyName->contains->keyName->contains->if->keyName->contains->keyName->contains->keyName->contains->Character->toUpperCase->if->val->length->val->charAt->val->charAt->keys->translateQuoted->bind->else->operationName->val->replace->toUpperCase->try->keys->Operation->valueOf->bind->catch->Log->info->finally->catch->Log->warn->finally
ConsoleKeys#translateQuoted(String)::: console keys translate quoted:::i->str->keySeq->keySeq->length->substring->for->str->length->return
ConsoleKeys#getKeyFromName(String)::: console keys get key from name:::if->equalsIgnoreCase->equalsIgnoreCase->return->else->if->equalsIgnoreCase->equalsIgnoreCase->return->else->if->equalsIgnoreCase->equalsIgnoreCase->return->else->if->equalsIgnoreCase->equalsIgnoreCase->return->else->if->equalsIgnoreCase->equalsIgnoreCase->return->else->if->equalsIgnoreCase->return->else->return->name->charAt
ConsoleKeys#setVar(String, String)::: console keys set var:::if->equalsIgnoreCase->if->keyMaps->containsKey->keyMaps->get->else->if->equals->if->equalsIgnoreCase->keys->setBlinkMatchingParen->else->if->equalsIgnoreCase->keys->setBlinkMatchingParen->variables->put
ConsoleKeys#getVariable(String):::Retrieves the value of a variable that was set in the .inputrc file during processing:::return->variables->get
ConsoleReader#setupSigCont()::: console reader setup sig cont:::try->signalClass->Class->forName->signalHandlerClass->Class->forName->signalHandler->Proxy->getClass->getClassLoader->new->Class<?>Arr->new->InvocationHandler->newProxyInstance->signalClass->getMethod->signalClass->getConstructor->newInstance->invoke->catch->finally
ConsoleReader#getInputRc():::Retrieve the URL for the inputrc configuration file in effect:::path->Configuration->getString->if->f->Configuration->getUserHome->new->File->if->f->exists->new->File->return->f->toURI->toURL->else->return->Urls->create
ConsoleReader#getKeys()::: console reader get keys:::return->consoleKeys->getKeys
ConsoleReader#setInput(InputStream)::: console reader set input:::Configuration->getLong->nonBlockingEnabled->terminal->isSupported->if->shutdown->wrapped->terminal->wrapInIfNeeded->new->NonBlockingInputStream->new->InputStreamReader
ConsoleReader#close():::Shuts the console reader down:::if->in->shutdown
ConsoleReader#shutdown():::Shuts the console reader down:::this->close
ConsoleReader#finalize():::Shuts down the ConsoleReader if the JVM attempts to clean it up.:::try->close->catch->finally->super->finalize
ConsoleReader#getInput()::: console reader get input:::return
ConsoleReader#getOutput()::: console reader get output:::return
ConsoleReader#getTerminal()::: console reader get terminal:::return
ConsoleReader#getCursorBuffer()::: console reader get cursor buffer:::return
ConsoleReader#setExpandEvents(boolean)::: console reader set expand events:::
ConsoleReader#getExpandEvents()::: console reader get expand events:::return
ConsoleReader#setCopyPasteDetection(boolean):::Enables or disables copy and paste detection:::
ConsoleReader#isCopyPasteDetectionEnabled()::: console reader is copy paste detection enabled:::return
ConsoleReader#setBellEnabled(boolean):::Set whether the console bell is enabled.:::
ConsoleReader#getBellEnabled():::Get whether the console bell is enabled:::return
ConsoleReader#setHandleUserInterrupt(boolean):::Set whether user interrupts (ctrl-C) are handled by having JLine throw UserInterruptException from #readLine:::
ConsoleReader#getHandleUserInterrupt():::Get whether user interrupt handling is enabled:::return
ConsoleReader#setHandleLitteralNext(boolean):::Set wether literal next are handled by JLine.:::
ConsoleReader#getHandleLitteralNext():::Get wether literal next are handled by JLine.:::return
ConsoleReader#setCommentBegin(String):::Sets the string that will be used to start a comment when the insert-comment key is struck.:::
ConsoleReader#getCommentBegin()::: console reader get comment begin:::str->if->consoleKeys->getVariable->if->return
ConsoleReader#setPrompt(String)::: console reader set prompt:::Ansi->lastLine->stripAnsi->wcwidth
ConsoleReader#getPrompt()::: console reader get prompt:::return
ConsoleReader#setEchoCharacter(Character):::Set the echo character:::
ConsoleReader#getEchoCharacter():::Returns the echo character.:::return
ConsoleReader#resetLine():::Erase the current line.:::if->return->killed->new->StringBuilder->while->c->buf->current->if->break->killed->append->backspace->copy->killed->reverse->toString->killRing->addBackwards->return
ConsoleReader#wcwidth(CharSequence, int)::: console reader wcwidth:::return->str->length->wcwidth
ConsoleReader#wcwidth(CharSequence, int, int, int)::: console reader wcwidth:::cur->for->i->return
ConsoleReader#wcwidth(int, int)::: console reader wcwidth:::if->return->nextTabStop->else->if->return->else->w->WCWidth->wcwidth->return
ConsoleReader#nextTabStop(int)::: console reader next tab stop:::tabWidth->width->getTerminal->getWidth->mod->npos->return
ConsoleReader#getCursorPosition()::: console reader get cursor position:::return->wcwidth
ConsoleReader#lastLine(String):::Returns the text after the last '\n':::if->return->last->str->lastIndexOf->if->return->str->str->length->substring->return
ConsoleReader#setCursorPosition(int):::Move the cursor position to the specified absolute index.:::if->return->return->moveCursor
ConsoleReader#setBuffer(String):::Set the current buffer's content to the specified String:::if->buffer->toString->equals->return->sameIndex->for->i->l1->buffer->length->l2->length->diff->if->moveToEnd->length->backspace->killLine->setLength->buffer->substring->putString
ConsoleReader#setBuffer(CharSequence)::: console reader set buffer:::String->valueOf->setBuffer
ConsoleReader#setBufferKeepPos(String)::: console reader set buffer keep pos:::pos->setBuffer->setCursorPosition
ConsoleReader#setBufferKeepPos(CharSequence)::: console reader set buffer keep pos:::String->valueOf->setBufferKeepPos
ConsoleReader#drawLine():::Output put the prompt + the current buffer:::prompt->getPrompt->if->rawPrint->fmtPrint->drawBuffer
ConsoleReader#redrawLine():::Clear the line and redraw it.:::tputs->drawLine
ConsoleReader#finishBuffer():::Clear the buffer and add its contents to the history.:::str->toString->historyLine->if->try->expandEvents->str->replace->historyLine->replaceAll->catch->Log->error->beep->buf->clear->finally->if->str->length->if->isHistoryEnabled->history->add->else->history->moveToEnd->setLength->return
ConsoleReader#expandEvents(String):::Expand event designator such as !!, !#, !3, etc..:::sb->new->StringBuilder->for->i->str->length->result->sb->toString->if->str->equals->getCursorPosition->fmtPrint->println->flush->return
ConsoleReader#putString(CharSequence):::Write out the specified string to the buffer and the output stream.:::pos->getCursorPosition->buf->write->if->fmtPrint->else->if->else->str->length->rawPrint->drawBuffer
ConsoleReader#drawBuffer(int):::Redraw the rest of the buffer from the cursor onwards:::nbChars->buf->length->if->buf->length->if->if->rawPrint->else->else->buf->length->fmtPrint->cursorPos->buf->length->wcwidth->if->terminal->hasWeirdWrap->width->terminal->getWidth->if->rawPrint->tputs->clearAhead->back
ConsoleReader#drawBuffer():::Redraw the rest of the buffer from the cursor onwards:::drawBuffer
ConsoleReader#clearAhead(int, int):::Clear ahead the specified number of characters without moving the cursor.:::if->return->width->terminal->getWidth->if->terminal->getStringCapability->cur->c0->nb->Math->min->tputs->while->prev->moveCursorFromTo->Math->min->tputs->moveCursorFromTo->else->if->terminal->getBooleanCapability->cur->c0->nb->Math->min->rawPrint->while->moveCursorFromTo->Math->min->rawPrint->moveCursorFromTo->else->rawPrint->moveCursorFromTo
ConsoleReader#back(int):::Move the visual cursor backward without modifying the buffer cursor.:::if->return->i0->wcwidth->i1->wcwidth->moveCursorFromTo
ConsoleReader#flush():::Flush the console output stream:::out->flush
ConsoleReader#backspaceAll()::: console reader backspace all:::return->backspace
ConsoleReader#backspace(int):::Issue num backspaces.:::if->return->count->moveCursor->clear->getCursorPosition->wcwidth->delete->drawBuffer->return
ConsoleReader#backspace():::Issue a backspace.:::return->backspace
ConsoleReader#moveToEnd()::: console reader move to end:::if->buf->length->return->return->buf->length->moveCursor
ConsoleReader#deleteCurrentCharacter():::Delete the character at the current position and redraw the remainder of the buffer.:::if->buf->length->buf->length->return->deleteCharAt->drawBuffer->return
ConsoleReader#viDeleteChangeYankToRemap(Operation):::This method is calling while doing a delete-to ("d"), change-to ("c"), or yank-to ("y") and it filters out only those movement operations that are allowable during those operations:::switch->return->return
ConsoleReader#viRubout(int):::Deletes the previous character from the cursor position:::ok->for->i->return
ConsoleReader#viDelete(int):::Deletes the character you are sitting on and sucks the rest of the line in from the right.:::ok->for->i->return
ConsoleReader#viChangeCase(int):::Switches the case of the current character from upper to lower or lower to upper as necessary and advances the cursor one position to the right.:::ok->for->i->return
ConsoleReader#viChangeChar(int, int):::Implements the vi change character command (in move-mode "r" followed by the character to change to).:::if->return->ok->for->i->return
ConsoleReader#viPreviousWord(int):::This is a close facsimile of the actual vi previous word logic:::ok->if->return->pos->for->i->setCursorPosition->return
ConsoleReader#viDeleteTo(int, int, boolean):::Performs the vi "delete-to" action, deleting characters between a given span of the input line.:::if->return->if->tmp->setCursorPosition->delete->drawBuffer->if->buf->length->moveCursor->return
ConsoleReader#viYankTo(int, int):::Implement the "vi" yank-to operation:::cursorPos->if->tmp->if->return->substring->setCursorPosition->return
ConsoleReader#viPut(int):::Pasts the yank buffer to the right of the current cursor position and moves the cursor to the end of the pasted region.:::if->yankBuffer->length->return->if->length->moveCursor->for->i->moveCursor->return
ConsoleReader#viCharSearch(int, int, int):::Searches forward of the current position for a character and moves the cursor onto it.:::if->return->searchChar->isForward->stopBefore->if->if->return->if->if->switchCase->else->if->switchCase->else->Character->isLowerCase->Character->toLowerCase->ok->if->while->pos->while->length->if->charAt->setCursorPosition->break->if->if->moveCursor->if->isInViMoveOperationState->moveCursor->else->while->pos->while->if->charAt->setCursorPosition->break->if->moveCursor->return
ConsoleReader#switchCase(char)::: console reader switch case:::if->Character->isUpperCase->return->Character->toLowerCase->return->Character->toUpperCase
ConsoleReader#isInViMoveOperationState()::: console reader is in vi move operation state:::return
ConsoleReader#viNextWord(int):::This is a close facsimile of the actual vi next word logic:::pos->end->length->for->i->setCursorPosition->return
ConsoleReader#viEndWord(int):::Implements a close facsimile of the vi end-of-word movement:::pos->end->length->for->i->setCursorPosition->return
ConsoleReader#previousWord()::: console reader previous word:::while->buf->current->isDelimiter->moveCursor->while->buf->current->isDelimiter->moveCursor->return
ConsoleReader#nextWord()::: console reader next word:::while->buf->nextChar->isDelimiter->moveCursor->while->buf->nextChar->isDelimiter->moveCursor->return
ConsoleReader#unixWordRubout(int):::Deletes to the beginning of the word that the cursor is sitting on:::success->killed->new->StringBuilder->for->copy->killed->reverse->toString->killRing->addBackwards->return
ConsoleReader#insertComment(boolean)::: console reader insert comment:::comment->this->getCommentBegin->setCursorPosition->putString->if->consoleKeys->setKeyMap->return->accept
ConsoleReader#viSearch(char):::Implements vi search ("/" or "?").:::isForward->origBuffer->buf->copy->setCursorPosition->killLine->Character->toString->putString->flush->isAborted->isComplete->ch->while->readCharacter->switch->break->backspace->if->break->break->Character->toString->putString->flush->if->setCursorPosition->killLine->putString->setCursorPosition->return->searchTerm->substring->idx->end->history->index->start->history->size->history->size->if->for->i->else->for->i->if->setCursorPosition->killLine->putString->setCursorPosition->return->setCursorPosition->killLine->history->get->putString->setCursorPosition->flush->while->readCharacter->forward->switch->isMatch->if->for->i->else->for->i->if->setCursorPosition->killLine->history->get->putString->setCursorPosition->break->flush->return
ConsoleReader#setParenBlinkTimeout(int)::: console reader set paren blink timeout:::
ConsoleReader#insertClose(String)::: console reader insert close:::putString->closePosition->moveCursor->viMatch->if->in->isNonBlockingEnabled->in->peek->setCursorPosition->flush
ConsoleReader#viMatch():::Implements vi style bracket matching ("%" command):::pos->if->buf->length->return->type->charAt->getBracketType->move->count->if->return->while->if->length->return->curType->charAt->getBracketType->if->else->if->if->isInViMoveOperationState->setCursorPosition->flush->return
ConsoleReader#getBracketType(char):::Given a character determines what type of bracket it is (paren, square, curly, or none).:::switch->return->return->return->return->return->return->return
ConsoleReader#deletePreviousWord()::: console reader delete previous word:::killed->new->StringBuilder->c->while->buf->current->isDelimiter->if->break->killed->append->backspace->while->buf->current->isDelimiter->if->break->killed->append->backspace->copy->killed->reverse->toString->killRing->addBackwards->return
ConsoleReader#deleteNextWord()::: console reader delete next word:::killed->new->StringBuilder->c->while->buf->nextChar->isDelimiter->if->break->killed->append->delete->while->buf->nextChar->isDelimiter->if->break->killed->append->delete->copy->killed->toString->killRing->add->return
ConsoleReader#capitalizeWord()::: console reader capitalize word:::first->i->c->while->buf->length->charAt->isDelimiter->Character->toUpperCase->Character->toLowerCase->setCharAt->drawBuffer->moveCursor->return
ConsoleReader#upCaseWord()::: console reader up case word:::i->c->while->buf->length->charAt->isDelimiter->Character->toUpperCase->setCharAt->drawBuffer->moveCursor->return
ConsoleReader#downCaseWord()::: console reader down case word:::i->c->while->buf->length->charAt->isDelimiter->Character->toLowerCase->setCharAt->drawBuffer->moveCursor->return
ConsoleReader#transposeChars(int):::Performs character transpose:::for->return
ConsoleReader#isKeyMap(String)::: console reader is key map:::map->consoleKeys->getKeys->mapByName->consoleKeys->getKeyMaps->get->if->return->return
ConsoleReader#accept():::The equivalent of hitting <RET>:::moveToEnd->println->flush->return->finishBuffer
ConsoleReader#abort()::: console reader abort:::beep->buf->clear->println->redrawLine
ConsoleReader#moveCursor(int):::Move the cursor where characters.:::where->if->return->if->length->return->if->else->if->length->length->moveInternal->return
ConsoleReader#moveInternal(int):::Move the cursor where characters, without checking the current buffer.:::i0->i1->if->if->wcwidth->wcwidth->else->wcwidth->wcwidth->else->if->else->return->moveCursorFromTo
ConsoleReader#moveCursorFromTo(int, int)::: console reader move cursor from to:::if->return->width->getTerminal->getWidth->l0->c0->l1->c1->if->if->tputs->tputs->else->if->if->tputs->for->i->else->if->tputs->rawPrint->if->tputs->else->if->tputs->else->if->if->tputs->for->i->else->if->if->tputs->for->i
ConsoleReader#readCharacter():::Read a character from the console.:::return->readCharacter
ConsoleReader#readCharacter(boolean):::Read a character from the console:::c->reader->read->if->Log->trace->if->terminal->isSupported->clearEcho->if->in->peek->next->reader->read->return->return
ConsoleReader#clearEcho(int):::Clear the echoed characters for the specified character code.:::if->terminal->isEchoEnabled->return->pos->getCursorPosition->num->wcwidth->moveCursorFromTo->drawBuffer->return
ConsoleReader#readCharacter(char...)::: console reader read character:::return->readCharacter
ConsoleReader#readCharacter(boolean, char...)::: console reader read character:::c->Arrays->sort->while->Arrays->readCharacter->binarySearch->return
ConsoleReader#readBinding(KeyMap):::Read from the input stream and decode an operation from the key map:::o->opBuffer->setLength->do->c->pushBackChar->isEmpty->readCharacter->pushBackChar->pop->if->return->opBuffer->appendCodePoint->if->Character->toChars->new->String->if->else->keys->getBound->if->if->killRing->resetLastYank->if->killRing->resetLastKill->if->opBuffer->opBuffer->length->setLength->opBuffer->Character->toLowerCase->append->keys->getBound->if->if->pushBackChar->isEmpty->in->isNonBlockingEnabled->in->peek->getAnotherKey->if->continue->opBuffer->setLength->else->continue->while->opBuffer->length->opBuffer->opBuffer->length->charAt->opBuffer->opBuffer->length->setLength->o2->keys->getBound->if->getAnotherKey->if->continue->else->pushBackChar->push->while->return
ConsoleReader#getLastBinding()::: console reader get last binding:::return->opBuffer->toString
ConsoleReader#readLine():::Read the next line and return the contents of the buffer.:::return->readLine
ConsoleReader#readLine(Character):::Read the next line with the specified character mask:::return->readLine
ConsoleReader#readLine(String)::: console reader read line:::return->readLine
ConsoleReader#readLine(String, Character):::Read a line from the in InputStream, and return the line (without any trailing newlines).:::return->readLine
ConsoleReader#setKeyMap(String):::Sets the current keymap by name:::return->consoleKeys->setKeyMap
ConsoleReader#getKeyMap():::Returns the name of the current key mapping.:::return->consoleKeys->getKeys->getName
ConsoleReader#readLine(String, Character, String):::Read a line from the in InputStream, and return the line (without any trailing newlines).:::repeatCount->if->setPrompt->else->getPrompt->try->if->buf->write->if->terminal->isSupported->beforeReadLine->if->buffer->length->prompt->length->drawLine->out->flush->if->terminal->isAnsiSupported->System->console->out->write->out->flush->input->new->StringBuilder->while->read->while->in->read->input->appendCodePoint->input->appendCodePoint->m->CURSOR_COLUMN_PATTERN->matcher->if->m->matches->Integer->m->group->parseInt->prefix->m->group->chars->new->ArrayList<>->for->i->prefix->length->pushBackChar->addAll->break->if->terminal->isSupported->return->readLineSimple->if->terminal->disableInterruptCharacter->if->disableLitteralNextCharacter->originalPrompt->success->while->o->getKeys->readBinding->if->return->c->if->opBuffer->length->opBuffer->opBuffer->length->codePointBefore->Log->trace->if->macro->for->i->macro->length->opBuffer->setLength->continue->try->actionListener->Class->ClassLoader->getSystemClassLoader->forName->actionEvent->Class->ClassLoader->getSystemClassLoader->forName->if->actionListener->o->getClass->isAssignableFrom->actionPerformed->actionListener->getMethod->try->actionPerformed->invoke->catch->Log->error->finally->opBuffer->setLength->continue->catch->finally->if->run->opBuffer->setLength->continue->oldBuf->new->CursorBuffer->append->if->cursorDest->switch->buf->clear->buf->write->break->if->searchTerm->length->searchTerm->append->if->searchTerm->toString->searchBackwards->break->if->searchTerm->length->searchTerm->append->if->history->size->searchTerm->toString->searchForwards->break->if->searchTerm->length->searchTerm->searchTerm->length->deleteCharAt->if->searchTerm->toString->searchBackwards->else->searchTerm->toString->searchForwards->break->searchTerm->appendCodePoint->if->searchTerm->toString->searchBackwards->else->searchTerm->toString->searchForwards->break->if->history->moveTo->history->current->toString->searchTerm->toString->indexOf->if->break->if->if->searchTerm->length->if->printSearchStatus->else->printForwardSearchStatus->else->if->beep->searchTerm->toString->printSearchStatus->else->if->searchTerm->toString->history->get->toString->printSearchStatus->else->searchTerm->toString->history->get->toString->printForwardSearchStatus->else->restoreLine->if->isArgDigit->count->if->op->cursorStart->origState->if->viDeleteChangeYankToRemap->switch->isTabLiteral->if->pushBackChar->isEmpty->in->isNonBlockingEnabled->in->peek->if->complete->else->putString->break->printCompletionCandidates->break->setCursorPosition->break->yank->break->yankPop->break->killLine->break->setCursorPosition->killLine->break->clearScreen->redrawLine->break->buf->buf->isOverTyping->setOverTyping->break->putString->break->return->accept->if->abort->break->if->println->flush->partialLine->toString->buf->clear->history->moveToEnd->throw->new->UserInterruptException->break->consoleKeys->setKeyMap->return->accept->previousWord->break->nextWord->break->moveHistory->break->moveHistory->setCursorPosition->break->moveHistory->break->moveHistory->setCursorPosition->break->backspace->break->if->length->return->deleteCurrentCharacter->break->deleteCurrentCharacter->break->moveCursor->break->moveCursor->break->resetLine->break->unixWordRubout->break->deletePreviousWord->break->deleteNextWord->break->history->moveToFirst->if->history->current->setBuffer->break->history->moveToLast->if->history->current->setBuffer->break->buf->upToCursor->new->StringBuffer->searchTerm->toString->history->index->searchBackwards->if->beep->else->history->moveTo->if->history->current->setBufferKeepPos->break->buf->upToCursor->new->StringBuffer->index->history->index->if->history->size->history->moveToEnd->searchTerm->toString->setBufferKeepPos->else->if->history->size->searchTerm->toString->searchForwards->if->beep->else->history->moveTo->if->history->current->setBufferKeepPos->break->new->CursorBuffer->originalBuffer->write->if->searchTerm->toString->new->StringBuffer->if->searchTerm->length->searchTerm->toString->searchBackwards->if->beep->searchTerm->toString->history->get->toString->printSearchStatus->else->printSearchStatus->break->new->CursorBuffer->originalBuffer->write->if->searchTerm->toString->new->StringBuffer->if->searchTerm->length->searchTerm->toString->searchForwards->if->beep->searchTerm->toString->history->get->toString->printForwardSearchStatus->else->printForwardSearchStatus->break->capitalizeWord->break->upCaseWord->break->downCaseWord->break->moveToEnd->break->putString->break->consoleKeys->loadKeys->break->break->macro->macro->length->opBuffer->length->substring->break->for->i->macro->length->opBuffer->setLength->break->consoleKeys->setKeyMap->break->if->moveCursor->consoleKeys->setKeyMap->break->consoleKeys->setKeyMap->break->moveCursor->consoleKeys->setKeyMap->break->moveToEnd->consoleKeys->setKeyMap->break->if->length->return->return->accept->transposeChars->break->return->insertComment->insertClose->break->insertClose->break->insertClose->break->return->insertComment->viMatch->break->lastChar->opBuffer->charAt->viSearch->if->pushBackChar->push->break->opBuffer->charAt->break->if->opBuffer->charAt->else->setCursorPosition->break->setCursorPosition->viNextWord->break->viPreviousWord->break->viNextWord->break->viEndWord->break->setCursorPosition->consoleKeys->setKeyMap->break->viRubout->break->viDelete->break->if->setCursorPosition->killLine->else->break->if->toString->else->break->if->setCursorPosition->killLine->consoleKeys->setKeyMap->else->break->setCursorPosition->killLine->consoleKeys->setKeyMap->break->viPut->break->searchChar->pushBackChar->isEmpty->readCharacter->pushBackChar->pop->viCharSearch->break->viChangeCase->break->pushBackChar->isEmpty->readCharacter->pushBackChar->pop->viChangeChar->break->length->viDeleteTo->break->length->viDeleteTo->consoleKeys->setKeyMap->break->consoleKeys->setKeyMap->break->getCursorBuffer->clear->return->accept->break->break->break->if->if->viDeleteTo->else->if->viDeleteTo->consoleKeys->setKeyMap->else->if->viYankTo->if->if->if->beep->opBuffer->setLength->flush->catch->finally->if->terminal->isSupported->afterReadLine->if->terminal->enableInterruptCharacter
ConsoleReader#readLineSimple():::Read a line for unsupported terminals.:::if->i->readCharacter->if->return->finishBuffer->else->if->else->append->while->i->readCharacter->if->length->return->if->return->finishBuffer->else->if->return->finishBuffer->else->append
ConsoleReader#addCompleter(Completer):::Add the specified jline.console.completer.Completer to the list of handlers for tab-completion.:::return->completers->add
ConsoleReader#removeCompleter(Completer):::Remove the specified jline.console.completer.Completer from the list of handlers for tab-completion.:::return->completers->remove
ConsoleReader#getCompleters():::Returns an unmodifiable list of all the completers.:::return->Collections->unmodifiableList
ConsoleReader#setCompletionHandler(CompletionHandler)::: console reader set completion handler:::checkNotNull
ConsoleReader#getCompletionHandler()::: console reader get completion handler:::return
ConsoleReader#complete():::Use the completers to modify the buffer with the appropriate completions.:::if->completers->size->return->candidates->new->LinkedList<CharSequence>->bufstr->toString->cursor->position->foreach->if->comp->complete->break->return->candidates->size->getCompletionHandler->complete
ConsoleReader#printCompletionCandidates()::: console reader print completion candidates:::if->completers->size->return->candidates->new->LinkedList<CharSequence>->bufstr->toString->cursor->foreach->if->comp->complete->break->CandidateListCompletionHandler->printCandidates->drawLine
ConsoleReader#setAutoprintThreshold(int)::: console reader set autoprint threshold:::
ConsoleReader#getAutoprintThreshold()::: console reader get autoprint threshold:::return
ConsoleReader#setPaginationEnabled(boolean):::Whether to use pagination when the number of rows of candidates exceeds the height of the terminal.:::
ConsoleReader#isPaginationEnabled():::Whether to use pagination when the number of rows of candidates exceeds the height of the terminal.:::return
ConsoleReader#setHistory(History)::: console reader set history:::
ConsoleReader#getHistory()::: console reader get history:::return
ConsoleReader#setHistoryEnabled(boolean):::Whether or not to add new commands to the history buffer.:::
ConsoleReader#isHistoryEnabled():::Whether or not to add new commands to the history buffer.:::return
ConsoleReader#moveHistory(boolean, int):::Used in "vi" mode for argumented history move, to move a specific number of history entries forward or back.:::ok->for->i->moveHistory->return
ConsoleReader#moveHistory(boolean):::Move up or down the history tree.:::if->history->next->return->else->if->history->previous->return->history->current->setBuffer->return
ConsoleReader#fmtPrint(CharSequence, int):::Output the specified characters to the output stream without manipulating the current buffer.:::return->buff->length->fmtPrint
ConsoleReader#fmtPrint(CharSequence, int, int)::: console reader fmt print:::return->getCursorPosition->fmtPrint
ConsoleReader#fmtPrint(CharSequence, int, int, int)::: console reader fmt print:::checkNotNull->for->i->return
ConsoleReader#print(CharSequence):::Output the specified string to the output stream (but not the buffer).:::s->toString->rawPrint
ConsoleReader#println(CharSequence)::: console reader println:::print->println
ConsoleReader#println():::Output a platform-dependent newline.:::rawPrint
ConsoleReader#rawPrint(int):::Raw output printing:::out->write
ConsoleReader#rawPrint(String)::: console reader raw print:::out->write
ConsoleReader#rawPrint(char, int)::: console reader raw print:::for->i
ConsoleReader#rawPrintln(String)::: console reader raw println:::rawPrint->println
ConsoleReader#delete():::Issue a delete.:::if->length->return->delete->drawBuffer->return
ConsoleReader#killLine():::Kill the buffer ahead of the current cursor position.:::cp->len->length->if->return->num->pos->getCursorPosition->width->wcwidth->clearAhead->killed->new->charArr->getChars->delete->copy->new->String->killRing->add->return
ConsoleReader#yank()::: console reader yank:::yanked->killRing->yank->if->return->putString->return
ConsoleReader#yankPop()::: console reader yank pop:::if->killRing->lastYank->return->current->killRing->yank->if->return->current->length->backspace->yanked->killRing->yankPop->if->return->putString->return
ConsoleReader#clearScreen():::Clear the screen by issuing the ANSI "clear screen" code.:::if->tputs->println->return
ConsoleReader#beep():::Issue an audible keyboard bell.:::if->if->tputs->flush
ConsoleReader#printColumns(Collection):::Output the specified Collection in proper columns.:::if->items->isEmpty->return->width->getTerminal->getWidth->height->getTerminal->getHeight->maxWidth->foreach->len->Ansi->item->toString->stripAnsi->wcwidth->Math->max->Log->debug->showLines->if->isPaginationEnabled->else->buff->new->StringBuilder->realLength->foreach->if->buff->toString->rawPrintln->buff->setLength->if->resources->getString->print->flush->c->readCharacter->if->else->if->tputs->if->break->buff->item->toString->append->strippedItemLength->Ansi->item->toString->stripAnsi->wcwidth->for->i->if->buff->length->buff->toString->rawPrintln
ConsoleReader#beforeReadLine(String, Character)::: console reader before read line:::if->fullPrompt->new->Thread->maskThread->setPriority->maskThread->setDaemon->maskThread->start
ConsoleReader#afterReadLine()::: console reader after read line:::if->maskThread->isAlive->maskThread->interrupt
ConsoleReader#resetPromptLine(String, String, int):::Erases the current line with the existing prompt, then redraws the line with the provided prompt and buffer:::moveToEnd->append->promptLength->if->length->setPrompt->backspaceAll->setPrompt->redrawLine->setBuffer->if->buffer->length->setCursorPosition->flush
ConsoleReader#printSearchStatus(String, String)::: console reader print search status:::printSearchStatus
ConsoleReader#printForwardSearchStatus(String, String)::: console reader print forward search status:::printSearchStatus
ConsoleReader#printSearchStatus(String, String, String)::: console reader print search status:::prompt->cursorDest->match->indexOf->resetPromptLine
ConsoleReader#restoreLine(String, int)::: console reader restore line:::prompt->lastLine->buffer->toString->resetPromptLine
ConsoleReader#searchBackwards(String, int):::Search backward in history from a given position.:::return->searchBackwards
ConsoleReader#searchBackwards(String):::Search backwards in history from the current position.:::return->history->index->searchBackwards
ConsoleReader#searchBackwards(String, int, boolean)::: console reader search backwards:::it->history->entries->while->it->hasPrevious->e->it->previous->if->if->e->value->toString->startsWith->return->e->index->else->if->e->value->toString->contains->return->e->index->return
ConsoleReader#searchForwards(String, int):::Search forward in history from a given position.:::return->searchForwards
ConsoleReader#searchForwards(String):::Search forwards in history from the current position.:::return->history->index->searchForwards
ConsoleReader#searchForwards(String, int, boolean)::: console reader search forwards:::if->history->size->history->size->it->history->entries->if->it->hasNext->it->next->while->it->hasNext->e->it->next->if->if->e->value->toString->startsWith->return->e->index->else->if->e->value->toString->contains->return->e->index->return
ConsoleReader#isDelimiter(char):::Checks to see if the specified character is a delimiter:::return->Character->isLetterOrDigit
ConsoleReader#isWhitespace(char):::Checks to see if a character is a whitespace character:::return->Character->isWhitespace
ConsoleReader#tputs(String, Object...)::: console reader tputs:::str->terminal->getStringCapability->if->return->Curses->tputs->return
CursorBuffer#copy()::: cursor buffer copy:::that->new->CursorBuffer->this->toString->append->return
CursorBuffer#isOverTyping()::: cursor buffer is over typing:::return
CursorBuffer#setOverTyping(boolean)::: cursor buffer set over typing:::
CursorBuffer#length()::: cursor buffer length:::return->buffer->length
CursorBuffer#nextChar()::: cursor buffer next char:::if->buffer->length->return->else->return->buffer->charAt
CursorBuffer#current()::: cursor buffer current:::if->return->return->buffer->charAt
CursorBuffer#write(char):::Write the specific character into the buffer, setting the cursor position ahead one:::buffer->insert->if->isOverTyping->buffer->length->buffer->deleteCharAt
CursorBuffer#write(CharSequence):::Insert the specified chars into the buffer, setting the cursor to the end of the insertion point.:::checkNotNull->if->buffer->length->buffer->append->else->buffer->insert->str->length->if->isOverTyping->buffer->length->buffer->str->length->delete
CursorBuffer#clear()::: cursor buffer clear:::if->buffer->length->return->buffer->buffer->length->delete->return
CursorBuffer#upToCursor()::: cursor buffer up to cursor:::if->return->return->buffer->substring
CursorBuffer#toString()::: cursor buffer to string:::return->buffer->toString
KeyMap#getName()::: key map get name:::return
KeyMap#getAnotherKey()::: key map get another key:::return
KeyMap#from(KeyMap)::: key map from:::
KeyMap#getBound(CharSequence)::: key map get bound:::if->keySeq->length->map->for->i->keySeq->length->return
KeyMap#bindIfNotBound(CharSequence, Object)::: key map bind if not bound:::bind
KeyMap#bind(CharSequence, Object)::: key map bind:::bind
KeyMap#bind(KeyMap, CharSequence, Object)::: key map bind:::bind
KeyMap#bind(KeyMap, CharSequence, Object, boolean)::: key map bind:::if->keySeq->length->for->i->keySeq->length
KeyMap#setBlinkMatchingParen(boolean)::: key map set blink matching paren:::if->bind->bind->bind
KeyMap#bindArrowKeys(KeyMap)::: key map bind arrow keys:::bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind->bind
KeyMap#isMeta(char)::: key map is meta:::return
KeyMap#unMeta(char)::: key map un meta:::return
KeyMap#meta(char)::: key map meta:::return
KeyMap#keyMaps()::: key map key maps:::keyMaps->new->HashMap<String,KeyMap>->emacs->emacs->bindArrowKeys->keyMaps->put->keyMaps->put->keyMaps->emacs->getBound->put->keyMaps->emacs->getBound->put->viMov->viMovement->bindArrowKeys->keyMaps->put->keyMaps->put->keyMaps->put->viIns->viInsertion->bindArrowKeys->keyMaps->put->return
KeyMap#emacs()::: key map emacs:::map->new->ObjectArr->ctrl->new->ObjectArr->emacsCtrlX->emacsMeta->System->arraycopy->for->i->return->new->KeyMap
KeyMap#emacsCtrlX()::: key map emacs ctrl x:::map->new->ObjectArr->for->i->return->new->KeyMap
KeyMap#emacsMeta()::: key map emacs meta:::map->new->ObjectArr->for->i->return->new->KeyMap
KeyMap#viInsertion()::: key map vi insertion:::map->new->ObjectArr->ctrl->new->ObjectArr->System->arraycopy->for->i->return->new->KeyMap
KeyMap#viMovement()::: key map vi movement:::map->new->ObjectArr->low->new->ObjectArr->emacsMeta->System->arraycopy->for->i->return->new->KeyMap
KillRing#resetLastYank():::Resets the last-yank state.:::
KillRing#resetLastKill():::Resets the last-kill state.:::
KillRing#lastYank():::Returns true if the last command was a yank.:::return
KillRing#add(String):::Adds the string to the kill-ring:::if->if->return->next
KillRing#addBackwards(String):::Adds the string to the kill-ring product of killing backwards:::if->if->return->next
KillRing#yank():::Yanks a previously killed text:::return
KillRing#yankPop():::Moves the pointer to the current slot back and returns the text in that position:::if->prev->return->return
KillRing#next():::Moves the pointer to the current slot forward:::if->return->if
KillRing#prev():::Moves the pointer to the current slot backwards:::if->x->for
UserInterruptException#getPartialLine()::: user interrupt exception get partial line:::return
WCWidth#wcwidth(int)::: width wcwidth:::if->return->if->return->if->bisearch->return->return
WCWidth#bisearch(int, Interval[], int)::: width bisearch:::min->mid->if->return->while->if->else->if->else->return->return

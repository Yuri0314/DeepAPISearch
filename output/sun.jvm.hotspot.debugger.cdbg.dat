ArrayType#getElementType()::: array type get element type:::
ArrayType#getLength()::: array type get length:::
BaseClass#getAccessControl():::See sun.jvm.hotspot.debugger.cdbg.AccessControl:::
BaseClass#isVirtual()::: base class is virtual:::
BaseClass#getType()::: base class get type:::
BitType#getSizeInBits():::Size in bits of this type:::
BitType#getOffset():::Offset from the least-significant bit (LSB) of the LSB of this       type:::
BlockSym#getParent():::Get the lexically enclosing block, or null if none:::
BlockSym#getLength():::Length in bytes of the machine code in this block:::
BlockSym#getAddress():::Address of the first machine instruction in this block:::
BlockSym#getName():::Name of this block, or null if none:::
BlockSym#getNumLocals():::Number of local variable symbols associated with this block:::
BlockSym#getLocal(int):::Return ith local (0..getNumLocals() - 1):::
CDebugger#getThreadList():::Fetch the thread list for the target process as a List of       ThreadProxy objects:::
CDebugger#getLoadObjectList():::Return a list of LoadObjects in the target process:::
CDebugger#loadObjectContainingPC(Address):::Fetch the loadobject containing the current program counter:::
CDebugger#topFrameForThread(ThreadProxy):::Create a CFrame object for the top frame of the given thread,       specified as a ThreadProxy:::
CDebugger#getNameOfFile(String):::Get the file name component for the given full path to a DLL:::
CDebugger#getProcessControl():::Fetch a ProcessControl object for the target process, enabling       suspension, resumption and event handling:::
CDebugger#canDemangle():::is demangling of C++ symbols supported by this CDebugger?:::
CDebugger#demangle(String):::Demangle C++ symbols into readable strings, if possible:::
CDebugInfoDataBase#lookupType(String):::Name-to-type mapping:::
CDebugInfoDataBase#lookupType(String, int):::Name-to-type mapping with const/volatile qualifications:::
CDebugInfoDataBase#iterate(TypeVisitor):::Iteration through all types:::
CDebugInfoDataBase#debugInfoForPC(Address):::Return debug info (closest lexically-enclosing block) for       current program counter:::
CDebugInfoDataBase#lookupSym(String):::Look up global or module-local symbol by name:::
CDebugInfoDataBase#lineNumberForPC(Address):::Returns line number information for the given PC, including       source file name (not specified whether this is an absolute or       relative path) and start and end PCs for this line:::
CDebugInfoDataBase#iterate(LineNumberVisitor):::Iteration through all line number information in this       database.:::
CFrame#sender(ThreadProxy):::Returns null when no more frames on stack:::
CFrame#pc():::Get the program counter of this frame:::
CFrame#loadObjectForPC():::Get the loadobject in which the PC lies:::
CFrame#blockForPC():::If debug information is available, retrieves the block in which       the program counter lies:::
CFrame#closestSymbolToPC():::For the loadobject in which the PC lies, fetch the name of the       closest exported symbol and the distance of the PC to that       symbol:::
CFrame#localVariableBase():::Gets the base pointer in this frame from which local variable       offsets in the debug info are based:::
CFrame#iterateLocals(ObjectVisitor):::Visit all local variables in this frame if debug information is       available:::
ClosestSymbol#getName()::: closest symbol get name:::return
ClosestSymbol#getOffset()::: closest symbol get offset:::return
ClosestSymbol#offsetAsHex()::: closest symbol offset as hex:::return->Long->toHexString
CompoundType#getNumBaseClasses()::: compound type get num base classes:::
CompoundType#getBaseClass(int)::: compound type get base class:::
CompoundType#getNumFields()::: compound type get num fields:::
CompoundType#getField(int)::: compound type get field:::
CompoundType#isClass():::Defined as a class in the debug information?:::
CompoundType#isStruct():::Defined as a struct in the debug information?:::
CompoundType#isUnion():::Defined as a union in the debug information?:::
DebugEvent#getType():::The type of this debug event; BREAKPOINT, SINGLE_STEP, etc.:::
DebugEvent#getThread():::Retrieves the ThreadProxy for the thread on which the event       occurred:::
DebugEvent#getPC():::For BREAKPOINT, SINGLE_STEP, and ACCESS_VIOLATION events,       returns the program counter at which the event occurred:::
DebugEvent#getWasWrite():::For ACCESS_VIOLATION events, indicates whether the fault       occurred on a write (vs:::
DebugEvent#getAddress():::For ACCESS_VIOLATION events, returns the address at which the       fault occurred:::
DebugEvent#getUnknownEventDetail():::For UNKNOWN events, may return a detail message or may return       null:::
DefaultObjectVisitor#enterType(Type, Address)::: default object visitor enter type:::
DefaultObjectVisitor#exitType()::: default object visitor exit type:::
DefaultObjectVisitor#doBit(FieldIdentifier, long)::: default object visitor do bit:::
DefaultObjectVisitor#doInt(FieldIdentifier, long)::: default object visitor do int:::
DefaultObjectVisitor#doEnum(FieldIdentifier, long, String)::: default object visitor do enum:::
DefaultObjectVisitor#doFloat(FieldIdentifier, float)::: default object visitor do float:::
DefaultObjectVisitor#doDouble(FieldIdentifier, double)::: default object visitor do double:::
DefaultObjectVisitor#doPointer(FieldIdentifier, Address)::: default object visitor do pointer:::
DefaultObjectVisitor#doArray(FieldIdentifier, Address)::: default object visitor do array:::
DefaultObjectVisitor#doRef(FieldIdentifier, Address)::: default object visitor do ref:::
DefaultObjectVisitor#doCompound(FieldIdentifier, Address)::: default object visitor do compound:::
EnumType#getNumEnumerates():::Number of enumerates defined in this enum:::
EnumType#getEnumName(int):::Fetch ith (0..getNumEnumerants() - 1) name:::
EnumType#getEnumValue(int):::Fetch ith (0..getNumEnumerants() - 1) value:::
EnumType#enumNameForValue(long):::Return name for given enum value, or null if not found:::
Field#getAccessControl():::See sun.jvm.hotspot.debugger.cdbg.AccessControl:::
Field#getName()::: field get name:::
Field#getType()::: field get type:::
Field#isStatic():::Indicates whether this field is static:::
Field#getOffset():::Nonstatic fields only: offset of field in data structure, in bytes:::
Field#getAddress():::Static fields only: address of the field:::
FieldIdentifier#getType()::: field identifier get type:::
FieldIdentifier#toString()::: field identifier to string:::
FunctionSym#getType():::Type (a FunctionType, unless it could not be properly resolved)       of the procedure:::
FunctionSym#isModuleLocal():::Indicates whether this function is global or module-local (i.e.,       static):::
FunctionSym#toString():::Should provide a reasonable visual representation of the       signature of this symbol.:::
FunctionType#getReturnType()::: function type get return type:::
FunctionType#getNumArguments()::: function type get num arguments:::
FunctionType#getArgumentType(int)::: function type get argument type:::
GlobalSym#getName():::Name of the variable:::
GlobalSym#getType():::Type of the variable:::
GlobalSym#getAddress():::Address of the variable:::
GlobalSym#isModuleLocal():::Indicates whether this symbol is module-local (i.e., static):::
IndexableFieldIdentifier#getIndex()::: indexable field identifier get index:::
IntType#getIntSize():::Returns size in bytes of this type:::
IntType#isUnsigned():::Indicates whether this type is unsigned:::
LineNumberInfo#getSourceFileName():::Not specified whether this is an absolute or relative path.:::
LineNumberInfo#getLineNumber()::: line number info get line number:::
LineNumberInfo#getStartPC()::: line number info get start c:::
LineNumberInfo#getEndPC():::FIXME: specify whether this is inclusive or exclusive (currently       when BasicLineNumberMapping.recomputeEndPCs() is called, this is       exclusive):::
LineNumberVisitor#doLineNumber(LineNumberInfo)::: line number visitor do line number:::
LoadObject#getBase():::Base address at which this loadobject was relocated at run-time:::
LoadObject#getName():::Full path name of this loadobject:::
LoadObject#getSize():::Size of the loadobject in bytes (determines the range of program       counters and data contained within this loadobject):::
LoadObject#getDebugInfoDataBase():::Returns a debug info database for this loadobject if debug info       is present; otherwise, returns null.:::
LoadObject#debugInfoForPC(Address):::Get debug information for the given program counter:::
LoadObject#closestSymbolToPC(Address):::Fetch the name of the closest exported symbol and the distance       of the PC to that symbol:::
LoadObject#lineNumberForPC(Address):::Returns line number information for the given PC, including       source file name (not specified whether this is an absolute or       relative path) and start and end PCs for this line:::
LoadObjectComparator#compare(Object, Object)::: load object comparator compare:::lo1->lo2->base1->lo1->getBase->base2->lo2->getBase->diff->base1->minus->return
LoadObjectComparator#equals(Object)::: load object comparator equals:::if->return->return
LocalSym#getName():::Name of the local variable:::
LocalSym#getType():::Type of the local variable:::
LocalSym#getFrameOffset():::Offset, in bytes, in the frame of the local variable:::
MemberFunctionType#getContainingClass():::Containing class of this member function:::
MemberFunctionType#getThisType():::Type of this pointer:::
MemberFunctionType#getThisAdjust():::Logical this adjustor for the method:::
NamedFieldIdentifier#getName()::: named field identifier get name:::
ObjectVisitor#enterType(Type, Address):::This is called before beginning iterating through either the       fields declared in this compound type (not its superclasses) or       the elements of this array:::
ObjectVisitor#exitType():::This is called after finishing iterating through this compound       type:::
ObjectVisitor#doBit(FieldIdentifier, long):::Primitive field or object of integer bitfield       type:::
ObjectVisitor#doInt(FieldIdentifier, long):::Primitive field or object of integer type:::
ObjectVisitor#doEnum(FieldIdentifier, long, String):::Primitive field or object of enumerated type type:::
ObjectVisitor#doFloat(FieldIdentifier, float):::Primitive field or object of single-precision floating-point       type:::
ObjectVisitor#doDouble(FieldIdentifier, double):::Primitive field or object of double-precision floating-point       type:::
ObjectVisitor#doPointer(FieldIdentifier, Address):::Primitive field or object of pointer type:::
ObjectVisitor#doArray(FieldIdentifier, Address):::Primitive field or object of array type:::
ObjectVisitor#doRef(FieldIdentifier, Address):::Primitive field or object of (C++) reference       type:::
ObjectVisitor#doCompound(FieldIdentifier, Address):::Identifies embedded objects in compound objects:::
PointerType#getTargetType()::: pointer type get target type:::
ProcessControl#suspend():::Suspends all threads in the target process:::
ProcessControl#resume():::Resumes all threads in the target process.:::
ProcessControl#isSuspended():::Indicates whether the target process is suspended.:::
ProcessControl#setBreakpoint(Address):::Sets a breakpoint at the given address:::
ProcessControl#clearBreakpoint(Address):::Clears a breakpoint at the given address:::
ProcessControl#isBreakpointSet(Address):::Indicates whether a breakpoint is set at the given address.:::
ProcessControl#debugEventPoll():::Polls for the presence of a debug event:::
ProcessControl#debugEventContinue():::Informs the target process to resume past this debug event:::
RefType#getTargetType()::: ref type get target type:::
Sym#getName():::Name of this symbol:::
Sym#toString():::Returns getName() unless a subclass can return something more       appropriate:::
Sym#asBlock()::: sym as block:::
Sym#asFunction()::: sym as function:::
Sym#asGlobal()::: sym as global:::
Sym#asLocal()::: sym as local:::
Sym#isBlock()::: sym is block:::
Sym#isFunction()::: sym is function:::
Sym#isGlobal()::: sym is global:::
Sym#isLocal()::: sym is local:::
TemplateType#getNumTemplateArguments()::: template type get num template arguments:::
TemplateType#instantiate(Type[])::: template type instantiate:::
TemplateType#instantiate(List)::: template type instantiate:::
Type#getName()::: type get name:::
Type#getSize():::Size of the type in bytes:::
Type#asBit()::: type as bit:::
Type#asInt()::: type as int:::
Type#asEnum()::: type as enum:::
Type#asFloat()::: type as float:::
Type#asDouble()::: type as double:::
Type#asPointer()::: type as pointer:::
Type#asArray()::: type as array:::
Type#asRef()::: type as ref:::
Type#asCompound()::: type as compound:::
Type#asFunction()::: type as function:::
Type#asMemberFunction()::: type as member function:::
Type#asVoid()::: type as void:::
Type#isBit()::: type is bit:::
Type#isInt()::: type is int:::
Type#isEnum()::: type is enum:::
Type#isFloat()::: type is float:::
Type#isDouble()::: type is double:::
Type#isPointer()::: type is pointer:::
Type#isArray()::: type is array:::
Type#isRef()::: type is ref:::
Type#isCompound()::: type is compound:::
Type#isFunction()::: type is function:::
Type#isMemberFunction()::: type is member function:::
Type#isVoid()::: type is void:::
Type#isConst()::: type is const:::
Type#isVolatile()::: type is volatile:::
Type#iterateObject(Address, ObjectVisitor):::Visit an object of this type at the given address with the       specified visitor:::
Type#iterateObject(Address, ObjectVisitor, FieldIdentifier):::Alternate visitor which allows end user to specify the       FieldIdentifier associated with this type (typically for       visiting locals in a frame):::
Type#toString():::Returns getName() unless a subclass can return something more       appropriate:::
TypeVisitor#doBitType(BitType)::: type visitor do bit type:::
TypeVisitor#doIntType(IntType)::: type visitor do int type:::
TypeVisitor#doEnumType(EnumType)::: type visitor do enum type:::
TypeVisitor#doFloatType(FloatType)::: type visitor do float type:::
TypeVisitor#doDoubleType(DoubleType)::: type visitor do double type:::
TypeVisitor#doPointerType(PointerType)::: type visitor do pointer type:::
TypeVisitor#doArrayType(ArrayType)::: type visitor do array type:::
TypeVisitor#doRefType(RefType)::: type visitor do ref type:::
TypeVisitor#doCompoundType(CompoundType)::: type visitor do compound type:::
TypeVisitor#doFunctionType(FunctionType)::: type visitor do function type:::
TypeVisitor#doMemberFunctionType(MemberFunctionType)::: type visitor do member function type:::
TypeVisitor#doVoidType(VoidType)::: type visitor do void type:::

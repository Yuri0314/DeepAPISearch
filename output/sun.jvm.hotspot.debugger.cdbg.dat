sun.jvm.hotspot.debugger.cdbg.ArrayType#getElementType()->Type::: array type get element type
sun.jvm.hotspot.debugger.cdbg.ArrayType#getLength()->int::: array type get length
sun.jvm.hotspot.debugger.cdbg.BaseClass#getAccessControl()->int:::See sun.jvm.hotspot.debugger.cdbg.AccessControl
sun.jvm.hotspot.debugger.cdbg.BaseClass#isVirtual()->boolean::: base class is virtual
sun.jvm.hotspot.debugger.cdbg.BaseClass#getType()->Type::: base class get type
sun.jvm.hotspot.debugger.cdbg.BitType#getSizeInBits()->int:::Size in bits of this type
sun.jvm.hotspot.debugger.cdbg.BitType#getOffset()->int:::Offset from the least-significant bit (LSB) of the LSB of this       type
sun.jvm.hotspot.debugger.cdbg.BlockSym#getParent()->BlockSym:::Get the lexically enclosing block, or null if none
sun.jvm.hotspot.debugger.cdbg.BlockSym#getLength()->long:::Length in bytes of the machine code in this block
sun.jvm.hotspot.debugger.cdbg.BlockSym#getAddress()->Address:::Address of the first machine instruction in this block
sun.jvm.hotspot.debugger.cdbg.BlockSym#getName()->String:::Name of this block, or null if none
sun.jvm.hotspot.debugger.cdbg.BlockSym#getNumLocals()->int:::Number of local variable symbols associated with this block
sun.jvm.hotspot.debugger.cdbg.BlockSym#getLocal(int)->LocalSym:::Return ith local (0..getNumLocals() - 1)
sun.jvm.hotspot.debugger.cdbg.CDebugger#getThreadList()->List:::Fetch the thread list for the target process as a List of       ThreadProxy objects
sun.jvm.hotspot.debugger.cdbg.CDebugger#getLoadObjectList()->List:::Return a list of LoadObjects in the target process
sun.jvm.hotspot.debugger.cdbg.CDebugger#loadObjectContainingPC(Address)->LoadObject:::Fetch the loadobject containing the current program counter
sun.jvm.hotspot.debugger.cdbg.CDebugger#topFrameForThread(ThreadProxy)->CFrame:::Create a CFrame object for the top frame of the given thread,       specified as a ThreadProxy
sun.jvm.hotspot.debugger.cdbg.CDebugger#getNameOfFile(String)->String:::Get the file name component for the given full path to a DLL
sun.jvm.hotspot.debugger.cdbg.CDebugger#getProcessControl()->ProcessControl:::Fetch a ProcessControl object for the target process, enabling       suspension, resumption and event handling
sun.jvm.hotspot.debugger.cdbg.CDebugger#canDemangle()->boolean:::is demangling of C++ symbols supported by this CDebugger?
sun.jvm.hotspot.debugger.cdbg.CDebugger#demangle(String)->String:::Demangle C++ symbols into readable strings, if possible
sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase#lookupType(String)->Type:::Name-to-type mapping
sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase#lookupType(String, int)->Type:::Name-to-type mapping with const/volatile qualifications
sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase#iterate(TypeVisitor)->void:::Iteration through all types
sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase#debugInfoForPC(Address)->BlockSym:::Return debug info (closest lexically-enclosing block) for       current program counter
sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase#lookupSym(String)->GlobalSym:::Look up global or module-local symbol by name
sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase#lineNumberForPC(Address)->LineNumberInfo:::Returns line number information for the given PC, including       source file name (not specified whether this is an absolute or       relative path) and start and end PCs for this line
sun.jvm.hotspot.debugger.cdbg.CDebugInfoDataBase#iterate(LineNumberVisitor)->void:::Iteration through all line number information in this       database.
sun.jvm.hotspot.debugger.cdbg.CFrame#sender(ThreadProxy)->CFrame:::Returns null when no more frames on stack
sun.jvm.hotspot.debugger.cdbg.CFrame#pc()->Address:::Get the program counter of this frame
sun.jvm.hotspot.debugger.cdbg.CFrame#loadObjectForPC()->LoadObject:::Get the loadobject in which the PC lies
sun.jvm.hotspot.debugger.cdbg.CFrame#blockForPC()->BlockSym:::If debug information is available, retrieves the block in which       the program counter lies
sun.jvm.hotspot.debugger.cdbg.CFrame#closestSymbolToPC()->ClosestSymbol:::For the loadobject in which the PC lies, fetch the name of the       closest exported symbol and the distance of the PC to that       symbol
sun.jvm.hotspot.debugger.cdbg.CFrame#localVariableBase()->Address:::Gets the base pointer in this frame from which local variable       offsets in the debug info are based
sun.jvm.hotspot.debugger.cdbg.CFrame#iterateLocals(ObjectVisitor)->void:::Visit all local variables in this frame if debug information is       available
sun.jvm.hotspot.debugger.cdbg.ClosestSymbol#getName()->String::: closest symbol get name
sun.jvm.hotspot.debugger.cdbg.ClosestSymbol#getOffset()->long::: closest symbol get offset
sun.jvm.hotspot.debugger.cdbg.ClosestSymbol#offsetAsHex()->String::: closest symbol offset as hex
sun.jvm.hotspot.debugger.cdbg.CompoundType#getNumBaseClasses()->int::: compound type get num base classes
sun.jvm.hotspot.debugger.cdbg.CompoundType#getBaseClass(int)->BaseClass::: compound type get base class
sun.jvm.hotspot.debugger.cdbg.CompoundType#getNumFields()->int::: compound type get num fields
sun.jvm.hotspot.debugger.cdbg.CompoundType#getField(int)->Field::: compound type get field
sun.jvm.hotspot.debugger.cdbg.CompoundType#isClass()->boolean:::Defined as a class in the debug information?
sun.jvm.hotspot.debugger.cdbg.CompoundType#isStruct()->boolean:::Defined as a struct in the debug information?
sun.jvm.hotspot.debugger.cdbg.CompoundType#isUnion()->boolean:::Defined as a union in the debug information?
sun.jvm.hotspot.debugger.cdbg.DebugEvent#getType()->Type:::The type of this debug event; BREAKPOINT, SINGLE_STEP, etc.
sun.jvm.hotspot.debugger.cdbg.DebugEvent#getThread()->ThreadProxy:::Retrieves the ThreadProxy for the thread on which the event       occurred
sun.jvm.hotspot.debugger.cdbg.DebugEvent#getPC()->Address:::For BREAKPOINT, SINGLE_STEP, and ACCESS_VIOLATION events,       returns the program counter at which the event occurred
sun.jvm.hotspot.debugger.cdbg.DebugEvent#getWasWrite()->boolean:::For ACCESS_VIOLATION events, indicates whether the fault       occurred on a write (vs
sun.jvm.hotspot.debugger.cdbg.DebugEvent#getAddress()->Address:::For ACCESS_VIOLATION events, returns the address at which the       fault occurred
sun.jvm.hotspot.debugger.cdbg.DebugEvent#getUnknownEventDetail()->String:::For UNKNOWN events, may return a detail message or may return       null
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#enterType(Type, Address)->void::: default object visitor enter type
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#exitType()->void::: default object visitor exit type
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#doBit(FieldIdentifier, long)->void::: default object visitor do bit
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#doInt(FieldIdentifier, long)->void::: default object visitor do int
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#doEnum(FieldIdentifier, long, String)->void::: default object visitor do enum
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#doFloat(FieldIdentifier, float)->void::: default object visitor do float
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#doDouble(FieldIdentifier, double)->void::: default object visitor do double
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#doPointer(FieldIdentifier, Address)->void::: default object visitor do pointer
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#doArray(FieldIdentifier, Address)->void::: default object visitor do array
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#doRef(FieldIdentifier, Address)->void::: default object visitor do ref
sun.jvm.hotspot.debugger.cdbg.DefaultObjectVisitor#doCompound(FieldIdentifier, Address)->void::: default object visitor do compound
sun.jvm.hotspot.debugger.cdbg.EnumType#getNumEnumerates()->int:::Number of enumerates defined in this enum
sun.jvm.hotspot.debugger.cdbg.EnumType#getEnumName(int)->String:::Fetch ith (0..getNumEnumerants() - 1) name
sun.jvm.hotspot.debugger.cdbg.EnumType#getEnumValue(int)->long:::Fetch ith (0..getNumEnumerants() - 1) value
sun.jvm.hotspot.debugger.cdbg.EnumType#enumNameForValue(long)->String:::Return name for given enum value, or null if not found
sun.jvm.hotspot.debugger.cdbg.Field#getAccessControl()->int:::See sun.jvm.hotspot.debugger.cdbg.AccessControl
sun.jvm.hotspot.debugger.cdbg.Field#getName()->String::: field get name
sun.jvm.hotspot.debugger.cdbg.Field#getType()->Type::: field get type
sun.jvm.hotspot.debugger.cdbg.Field#isStatic()->boolean:::Indicates whether this field is static
sun.jvm.hotspot.debugger.cdbg.Field#getOffset()->long:::Nonstatic fields only: offset of field in data structure, in bytes
sun.jvm.hotspot.debugger.cdbg.Field#getAddress()->Address:::Static fields only: address of the field
sun.jvm.hotspot.debugger.cdbg.FieldIdentifier#getType()->Type::: field identifier get type
sun.jvm.hotspot.debugger.cdbg.FieldIdentifier#toString()->String::: field identifier to string
sun.jvm.hotspot.debugger.cdbg.FunctionSym#getType()->Type:::Type (a FunctionType, unless it could not be properly resolved)       of the procedure
sun.jvm.hotspot.debugger.cdbg.FunctionSym#isModuleLocal()->boolean:::Indicates whether this function is global or module-local (i.e.,       static)
sun.jvm.hotspot.debugger.cdbg.FunctionSym#toString()->String:::Should provide a reasonable visual representation of the       signature of this symbol.
sun.jvm.hotspot.debugger.cdbg.FunctionType#getReturnType()->Type::: function type get return type
sun.jvm.hotspot.debugger.cdbg.FunctionType#getNumArguments()->int::: function type get num arguments
sun.jvm.hotspot.debugger.cdbg.FunctionType#getArgumentType(int)->Type::: function type get argument type
sun.jvm.hotspot.debugger.cdbg.GlobalSym#getName()->String:::Name of the variable
sun.jvm.hotspot.debugger.cdbg.GlobalSym#getType()->Type:::Type of the variable
sun.jvm.hotspot.debugger.cdbg.GlobalSym#getAddress()->Address:::Address of the variable
sun.jvm.hotspot.debugger.cdbg.GlobalSym#isModuleLocal()->boolean:::Indicates whether this symbol is module-local (i.e., static)
sun.jvm.hotspot.debugger.cdbg.IndexableFieldIdentifier#getIndex()->int::: indexable field identifier get index
sun.jvm.hotspot.debugger.cdbg.IntType#getIntSize()->int:::Returns size in bytes of this type
sun.jvm.hotspot.debugger.cdbg.IntType#isUnsigned()->boolean:::Indicates whether this type is unsigned
sun.jvm.hotspot.debugger.cdbg.LineNumberInfo#getSourceFileName()->String:::Not specified whether this is an absolute or relative path.
sun.jvm.hotspot.debugger.cdbg.LineNumberInfo#getLineNumber()->int::: line number info get line number
sun.jvm.hotspot.debugger.cdbg.LineNumberInfo#getStartPC()->Address::: line number info get start c
sun.jvm.hotspot.debugger.cdbg.LineNumberInfo#getEndPC()->Address:::FIXME: specify whether this is inclusive or exclusive (currently       when BasicLineNumberMapping.recomputeEndPCs() is called, this is       exclusive)
sun.jvm.hotspot.debugger.cdbg.LineNumberVisitor#doLineNumber(LineNumberInfo)->void::: line number visitor do line number
sun.jvm.hotspot.debugger.cdbg.LoadObject#getBase()->Address:::Base address at which this loadobject was relocated at run-time
sun.jvm.hotspot.debugger.cdbg.LoadObject#getName()->String:::Full path name of this loadobject
sun.jvm.hotspot.debugger.cdbg.LoadObject#getSize()->long:::Size of the loadobject in bytes (determines the range of program       counters and data contained within this loadobject)
sun.jvm.hotspot.debugger.cdbg.LoadObject#getDebugInfoDataBase()->CDebugInfoDataBase:::Returns a debug info database for this loadobject if debug info       is present; otherwise, returns null.
sun.jvm.hotspot.debugger.cdbg.LoadObject#debugInfoForPC(Address)->BlockSym:::Get debug information for the given program counter
sun.jvm.hotspot.debugger.cdbg.LoadObject#closestSymbolToPC(Address)->ClosestSymbol:::Fetch the name of the closest exported symbol and the distance       of the PC to that symbol
sun.jvm.hotspot.debugger.cdbg.LoadObject#lineNumberForPC(Address)->LineNumberInfo:::Returns line number information for the given PC, including       source file name (not specified whether this is an absolute or       relative path) and start and end PCs for this line
sun.jvm.hotspot.debugger.cdbg.LoadObjectComparator#compare(Object, Object)->int::: load object comparator compare
sun.jvm.hotspot.debugger.cdbg.LoadObjectComparator#equals(Object)->boolean::: load object comparator equals
sun.jvm.hotspot.debugger.cdbg.LocalSym#getName()->String:::Name of the local variable
sun.jvm.hotspot.debugger.cdbg.LocalSym#getType()->Type:::Type of the local variable
sun.jvm.hotspot.debugger.cdbg.LocalSym#getFrameOffset()->long:::Offset, in bytes, in the frame of the local variable
sun.jvm.hotspot.debugger.cdbg.MemberFunctionType#getContainingClass()->Type:::Containing class of this member function
sun.jvm.hotspot.debugger.cdbg.MemberFunctionType#getThisType()->Type:::Type of this pointer
sun.jvm.hotspot.debugger.cdbg.MemberFunctionType#getThisAdjust()->long:::Logical this adjustor for the method
sun.jvm.hotspot.debugger.cdbg.NamedFieldIdentifier#getName()->String::: named field identifier get name
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#enterType(Type, Address)->void:::This is called before beginning iterating through either the       fields declared in this compound type (not its superclasses) or       the elements of this array
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#exitType()->void:::This is called after finishing iterating through this compound       type
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#doBit(FieldIdentifier, long)->void:::Primitive field or object of integer bitfield       type
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#doInt(FieldIdentifier, long)->void:::Primitive field or object of integer type
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#doEnum(FieldIdentifier, long, String)->void:::Primitive field or object of enumerated type type
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#doFloat(FieldIdentifier, float)->void:::Primitive field or object of single-precision floating-point       type
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#doDouble(FieldIdentifier, double)->void:::Primitive field or object of double-precision floating-point       type
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#doPointer(FieldIdentifier, Address)->void:::Primitive field or object of pointer type
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#doArray(FieldIdentifier, Address)->void:::Primitive field or object of array type
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#doRef(FieldIdentifier, Address)->void:::Primitive field or object of (C++) reference       type
sun.jvm.hotspot.debugger.cdbg.ObjectVisitor#doCompound(FieldIdentifier, Address)->void:::Identifies embedded objects in compound objects
sun.jvm.hotspot.debugger.cdbg.PointerType#getTargetType()->Type::: pointer type get target type
sun.jvm.hotspot.debugger.cdbg.ProcessControl#suspend()->void:::Suspends all threads in the target process
sun.jvm.hotspot.debugger.cdbg.ProcessControl#resume()->void:::Resumes all threads in the target process.
sun.jvm.hotspot.debugger.cdbg.ProcessControl#isSuspended()->boolean:::Indicates whether the target process is suspended.
sun.jvm.hotspot.debugger.cdbg.ProcessControl#setBreakpoint(Address)->void:::Sets a breakpoint at the given address
sun.jvm.hotspot.debugger.cdbg.ProcessControl#clearBreakpoint(Address)->void:::Clears a breakpoint at the given address
sun.jvm.hotspot.debugger.cdbg.ProcessControl#isBreakpointSet(Address)->boolean:::Indicates whether a breakpoint is set at the given address.
sun.jvm.hotspot.debugger.cdbg.ProcessControl#debugEventPoll()->DebugEvent:::Polls for the presence of a debug event
sun.jvm.hotspot.debugger.cdbg.ProcessControl#debugEventContinue()->void:::Informs the target process to resume past this debug event
sun.jvm.hotspot.debugger.cdbg.RefType#getTargetType()->Type::: ref type get target type
sun.jvm.hotspot.debugger.cdbg.Sym#getName()->String:::Name of this symbol
sun.jvm.hotspot.debugger.cdbg.Sym#toString()->String:::Returns getName() unless a subclass can return something more       appropriate
sun.jvm.hotspot.debugger.cdbg.Sym#asBlock()->BlockSym::: sym as block
sun.jvm.hotspot.debugger.cdbg.Sym#asFunction()->FunctionSym::: sym as function
sun.jvm.hotspot.debugger.cdbg.Sym#asGlobal()->GlobalSym::: sym as global
sun.jvm.hotspot.debugger.cdbg.Sym#asLocal()->LocalSym::: sym as local
sun.jvm.hotspot.debugger.cdbg.Sym#isBlock()->boolean::: sym is block
sun.jvm.hotspot.debugger.cdbg.Sym#isFunction()->boolean::: sym is function
sun.jvm.hotspot.debugger.cdbg.Sym#isGlobal()->boolean::: sym is global
sun.jvm.hotspot.debugger.cdbg.Sym#isLocal()->boolean::: sym is local
sun.jvm.hotspot.debugger.cdbg.TemplateType#getNumTemplateArguments()->int::: template type get num template arguments
sun.jvm.hotspot.debugger.cdbg.TemplateType#instantiate(Type[])->Type::: template type instantiate
sun.jvm.hotspot.debugger.cdbg.TemplateType#instantiate(List)->Type::: template type instantiate
sun.jvm.hotspot.debugger.cdbg.Type#getName()->String::: type get name
sun.jvm.hotspot.debugger.cdbg.Type#getSize()->int:::Size of the type in bytes
sun.jvm.hotspot.debugger.cdbg.Type#asBit()->BitType::: type as bit
sun.jvm.hotspot.debugger.cdbg.Type#asInt()->IntType::: type as int
sun.jvm.hotspot.debugger.cdbg.Type#asEnum()->EnumType::: type as enum
sun.jvm.hotspot.debugger.cdbg.Type#asFloat()->FloatType::: type as float
sun.jvm.hotspot.debugger.cdbg.Type#asDouble()->DoubleType::: type as double
sun.jvm.hotspot.debugger.cdbg.Type#asPointer()->PointerType::: type as pointer
sun.jvm.hotspot.debugger.cdbg.Type#asArray()->ArrayType::: type as array
sun.jvm.hotspot.debugger.cdbg.Type#asRef()->RefType::: type as ref
sun.jvm.hotspot.debugger.cdbg.Type#asCompound()->CompoundType::: type as compound
sun.jvm.hotspot.debugger.cdbg.Type#asFunction()->FunctionType::: type as function
sun.jvm.hotspot.debugger.cdbg.Type#asMemberFunction()->MemberFunctionType::: type as member function
sun.jvm.hotspot.debugger.cdbg.Type#asVoid()->VoidType::: type as void
sun.jvm.hotspot.debugger.cdbg.Type#isBit()->boolean::: type is bit
sun.jvm.hotspot.debugger.cdbg.Type#isInt()->boolean::: type is int
sun.jvm.hotspot.debugger.cdbg.Type#isEnum()->boolean::: type is enum
sun.jvm.hotspot.debugger.cdbg.Type#isFloat()->boolean::: type is float
sun.jvm.hotspot.debugger.cdbg.Type#isDouble()->boolean::: type is double
sun.jvm.hotspot.debugger.cdbg.Type#isPointer()->boolean::: type is pointer
sun.jvm.hotspot.debugger.cdbg.Type#isArray()->boolean::: type is array
sun.jvm.hotspot.debugger.cdbg.Type#isRef()->boolean::: type is ref
sun.jvm.hotspot.debugger.cdbg.Type#isCompound()->boolean::: type is compound
sun.jvm.hotspot.debugger.cdbg.Type#isFunction()->boolean::: type is function
sun.jvm.hotspot.debugger.cdbg.Type#isMemberFunction()->boolean::: type is member function
sun.jvm.hotspot.debugger.cdbg.Type#isVoid()->boolean::: type is void
sun.jvm.hotspot.debugger.cdbg.Type#isConst()->boolean::: type is const
sun.jvm.hotspot.debugger.cdbg.Type#isVolatile()->boolean::: type is volatile
sun.jvm.hotspot.debugger.cdbg.Type#iterateObject(Address, ObjectVisitor)->void:::Visit an object of this type at the given address with the       specified visitor
sun.jvm.hotspot.debugger.cdbg.Type#iterateObject(Address, ObjectVisitor, FieldIdentifier)->void:::Alternate visitor which allows end user to specify the       FieldIdentifier associated with this type (typically for       visiting locals in a frame)
sun.jvm.hotspot.debugger.cdbg.Type#toString()->String:::Returns getName() unless a subclass can return something more       appropriate
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doBitType(BitType)->void::: type visitor do bit type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doIntType(IntType)->void::: type visitor do int type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doEnumType(EnumType)->void::: type visitor do enum type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doFloatType(FloatType)->void::: type visitor do float type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doDoubleType(DoubleType)->void::: type visitor do double type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doPointerType(PointerType)->void::: type visitor do pointer type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doArrayType(ArrayType)->void::: type visitor do array type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doRefType(RefType)->void::: type visitor do ref type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doCompoundType(CompoundType)->void::: type visitor do compound type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doFunctionType(FunctionType)->void::: type visitor do function type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doMemberFunctionType(MemberFunctionType)->void::: type visitor do member function type
sun.jvm.hotspot.debugger.cdbg.TypeVisitor#doVoidType(VoidType)->void::: type visitor do void type

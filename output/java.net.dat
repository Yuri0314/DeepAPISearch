AbstractPlainDatagramSocketImpl#isReusePortAvailable():::Tells whether SO_REUSEPORT is supported.
AbstractPlainDatagramSocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket)
AbstractPlainDatagramSocketImpl#create():::Creates a datagram socket
AbstractPlainDatagramSocketImpl#bind(int, InetAddress):::Binds a datagram socket to a local port.
AbstractPlainDatagramSocketImpl#send(DatagramPacket):::Sends a datagram packet
AbstractPlainDatagramSocketImpl#connect(InetAddress, int):::Connects a datagram socket to a remote destination
AbstractPlainDatagramSocketImpl#disconnect():::Disconnects a previously connected socket
AbstractPlainDatagramSocketImpl#peek(InetAddress):::Peek at the packet to see who it is from.
AbstractPlainDatagramSocketImpl#receive(DatagramPacket):::Receive the datagram packet.
AbstractPlainDatagramSocketImpl#setTimeToLive(int):::Set the TTL (time-to-live) option.
AbstractPlainDatagramSocketImpl#getTimeToLive():::Get the TTL (time-to-live) option.
AbstractPlainDatagramSocketImpl#setTTL(byte):::Set the TTL (time-to-live) option.
AbstractPlainDatagramSocketImpl#getTTL():::Get the TTL (time-to-live) option.
AbstractPlainDatagramSocketImpl#join(InetAddress):::Join the multicast group.
AbstractPlainDatagramSocketImpl#leave(InetAddress):::Leave the multicast group.
AbstractPlainDatagramSocketImpl#leaveGroup(SocketAddress, NetworkInterface):::Leave the multicast group.
AbstractPlainDatagramSocketImpl#close():::Close the socket.
AbstractPlainSocketImpl#isReusePortAvailable():::Tells whether SO_REUSEPORT is supported.
AbstractPlainSocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket)
AbstractPlainSocketImpl#create(boolean):::Creates a socket with a boolean that specifies whether this is a stream socket (true) or an unconnected UDP socket (false).
AbstractPlainSocketImpl#connect(String, int):::Creates a socket and connects it to the specified port on the specified host.
AbstractPlainSocketImpl#connect(InetAddress, int):::Creates a socket and connects it to the specified address on the specified port.
AbstractPlainSocketImpl#connect(SocketAddress, int):::Creates a socket and connects it to the specified address on the specified port.
AbstractPlainSocketImpl#bind(InetAddress, int):::Binds the socket to the specified address of the specified local port.
AbstractPlainSocketImpl#listen(int):::Listens, for a specified amount of time, for connections.
AbstractPlainSocketImpl#accept(SocketImpl):::Accepts connections.
AbstractPlainSocketImpl#getInputStream():::Gets an InputStream for this socket.
AbstractPlainSocketImpl#getOutputStream():::Gets an OutputStream for this socket.
AbstractPlainSocketImpl#available():::Returns the number of bytes that can be read without blocking.
AbstractPlainSocketImpl#close():::Closes the socket.
AbstractPlainSocketImpl#shutdownInput():::Shutdown read-half of the socket connection;
AbstractPlainSocketImpl#shutdownOutput():::Shutdown write-half of the socket connection;
Authenticator#setDefault(Authenticator):::Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication
Authenticator#getDefault():::Gets the default authenticator
Authenticator#requestPasswordAuthentication(InetAddress, int, String, String, String):::Ask the authenticator that has been registered with the system for a password
Authenticator#requestPasswordAuthentication(String, InetAddress, int, String, String, String):::Ask the authenticator that has been registered with the system for a password
Authenticator#requestPasswordAuthentication(String, InetAddress, int, String, String, String, URL, RequestorType):::Ask the authenticator that has been registered with the system for a password
Authenticator#requestPasswordAuthentication(Authenticator, String, InetAddress, int, String, String, String, URL, RequestorType):::Ask the given authenticator for a password
Authenticator#requestPasswordAuthenticationInstance(String, InetAddress, int, String, String, String, URL, RequestorType):::Ask this authenticator for a password.
Authenticator#getRequestingHost():::Gets the hostname of the site or proxy requesting authentication, or null if not available.
Authenticator#getRequestingSite():::Gets the InetAddress of the site requesting authorization, or null if not available.
Authenticator#getRequestingPort():::Gets the port number for the requested connection.
Authenticator#getRequestingProtocol():::Give the protocol that's requesting the connection
Authenticator#getRequestingPrompt():::Gets the prompt string given by the requestor.
Authenticator#getRequestingScheme():::Gets the scheme of the requestor (the HTTP scheme for an HTTP firewall, for example).
Authenticator#getPasswordAuthentication():::Called when password authorization is needed
Authenticator#getRequestingURL():::Returns the URL that resulted in this request for authentication.
Authenticator#getRequestorType():::Returns whether the requestor is a Proxy or a Server.
CacheRequest#getBody():::Returns an OutputStream to which the response body can be written.
CacheRequest#abort():::Aborts the attempt to cache the response
CacheResponse#getHeaders():::Returns the response headers as a Map.
CacheResponse#getBody():::Returns the response body as an InputStream.
ContentHandler#getContent(URLConnection):::Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object from it.
ContentHandler#getContent(URLConnection, Class[]):::Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified
ContentHandlerFactory#createContentHandler(String):::Creates a new ContentHandler to read an object from a URLStreamHandler.
CookieHandler#getDefault():::Gets the system-wide cookie handler.
CookieHandler#setDefault(CookieHandler):::Sets (or unsets) the system-wide cookie handler
CookieHandler#get(URI, Map>):::Gets all the applicable cookies from a cookie cache for the specified uri in the request header
CookieHandler#put(URI, Map>):::Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache.
CookieManager#setCookiePolicy(CookiePolicy):::To set the cookie policy of this cookie manager
CookieManager#getCookieStore():::To retrieve current cookie store.
CookiePolicy#shouldAccept(URI, HttpCookie):::Will be called to see whether or not this cookie should be accepted.
CookieStore#add(URI, HttpCookie):::Adds one HTTP cookie to the store
CookieStore#get(URI):::Retrieve cookies associated with given URI, or whose domain matches the given URI
CookieStore#getCookies():::Get all not-expired cookies in cookie store.
CookieStore#getURIs():::Get all URIs which identify the cookies in this cookie store.
CookieStore#remove(URI, HttpCookie):::Remove a cookie from store.
CookieStore#removeAll():::Remove all cookies in this cookie store.
DatagramPacket#getAddress():::Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received.
DatagramPacket#getPort():::Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received.
DatagramPacket#getData():::Returns the data buffer
DatagramPacket#getOffset():::Returns the offset of the data to be sent or the offset of the data received.
DatagramPacket#getLength():::Returns the length of the data to be sent or the length of the data received.
DatagramPacket#setData(byte[], int, int):::Set the data buffer for this packet
DatagramPacket#setAddress(InetAddress):::Sets the IP address of the machine to which this datagram is being sent.
DatagramPacket#setPort(int):::Sets the port number on the remote host to which this datagram is being sent.
DatagramPacket#setSocketAddress(SocketAddress):::Sets the SocketAddress (usually IP address + port number) of the remote host to which this datagram is being sent.
DatagramPacket#getSocketAddress():::Gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from.
DatagramPacket#setData(byte[]):::Set the data buffer for this packet
DatagramPacket#setLength(int):::Set the length for this packet
DatagramSocket#getImpl():::Get the DatagramSocketImpl attached to this socket, creating it if necessary.
DatagramSocket#bind(SocketAddress):::Binds this DatagramSocket to a specific address and port
DatagramSocket#connect(InetAddress, int):::Connects the socket to a remote address for this socket
DatagramSocket#connect(SocketAddress):::Connects this socket to a remote socket address (IP address + port number)
DatagramSocket#disconnect():::Disconnects the socket
DatagramSocket#isBound():::Returns the binding state of the socket
DatagramSocket#isConnected():::Returns the connection state of the socket
DatagramSocket#getInetAddress():::Returns the address to which this socket is connected
DatagramSocket#getPort():::Returns the port number to which this socket is connected
DatagramSocket#getRemoteSocketAddress():::Returns the address of the endpoint this socket is connected to, or null if it is unconnected
DatagramSocket#send(DatagramPacket):::Sends a datagram packet from this socket
DatagramSocket#receive(DatagramPacket):::Receives a datagram packet from this socket
DatagramSocket#getLocalAddress():::Gets the local address to which the socket is bound
DatagramSocket#getLocalPort():::Returns the port number on the local host to which this socket is bound.
DatagramSocket#setSoTimeout(int):::Enable/disable SO_TIMEOUT with the specified timeout, in  milliseconds
DatagramSocket#getSoTimeout():::Retrieve setting for SO_TIMEOUT
DatagramSocket#setSendBufferSize(int):::Sets the SO_SNDBUF option to the specified value for this DatagramSocket
DatagramSocket#getSendBufferSize():::Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer size used by the platform for output on this DatagramSocket.
DatagramSocket#setReceiveBufferSize(int):::Sets the SO_RCVBUF option to the specified value for this DatagramSocket
DatagramSocket#getReceiveBufferSize():::Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer size used by the platform for input on this DatagramSocket.
DatagramSocket#setReuseAddress(boolean):::Enable/disable the SO_REUSEADDR socket option
DatagramSocket#getReuseAddress():::Tests if SO_REUSEADDR is enabled.
DatagramSocket#setBroadcast(boolean):::Enable/disable SO_BROADCAST
DatagramSocket#getBroadcast():::Tests if SO_BROADCAST is enabled.
DatagramSocket#setTrafficClass(int):::Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket
DatagramSocket#getTrafficClass():::Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket
DatagramSocket#close():::Closes this datagram socket
DatagramSocket#isClosed():::Returns whether the socket is closed or not.
DatagramSocket#getChannel():::Returns the unique java.nio.channels.DatagramChannel object associated with this datagram socket, if any
DatagramSocket#setDatagramSocketImplFactory(DatagramSocketImplFactory):::Sets the datagram socket implementation factory for the application
DatagramSocket#setOption(SocketOption, T):::Sets the value of a socket option.
DatagramSocket#getOption(SocketOption):::Returns the value of a socket option.
DatagramSocket#supportedOptions():::Returns a set of the socket options supported by this socket
DatagramSocketImpl#create():::Creates a datagram socket.
DatagramSocketImpl#bind(int, InetAddress):::Binds a datagram socket to a local port and address.
DatagramSocketImpl#send(DatagramPacket):::Sends a datagram packet
DatagramSocketImpl#connect(InetAddress, int):::Connects a datagram socket to a remote destination
DatagramSocketImpl#disconnect():::Disconnects a datagram socket from its remote destination.
DatagramSocketImpl#peek(InetAddress):::Peek at the packet to see who it is from
DatagramSocketImpl#peekData(DatagramPacket):::Peek at the packet to see who it is from
DatagramSocketImpl#receive(DatagramPacket):::Receive the datagram packet.
DatagramSocketImpl#setTTL(byte):::Set the TTL (time-to-live) option.
DatagramSocketImpl#getTTL():::Retrieve the TTL (time-to-live) option.
DatagramSocketImpl#setTimeToLive(int):::Set the TTL (time-to-live) option.
DatagramSocketImpl#getTimeToLive():::Retrieve the TTL (time-to-live) option.
DatagramSocketImpl#join(InetAddress):::Join the multicast group.
DatagramSocketImpl#leave(InetAddress):::Leave the multicast group.
DatagramSocketImpl#joinGroup(SocketAddress, NetworkInterface):::Join the multicast group.
DatagramSocketImpl#leaveGroup(SocketAddress, NetworkInterface):::Leave the multicast group.
DatagramSocketImpl#close():::Close the socket.
DatagramSocketImpl#getLocalPort():::Gets the local port.
DatagramSocketImpl#getFileDescriptor():::Gets the datagram socket file descriptor.
DatagramSocketImpl#setOption(SocketOption, T):::Called to set a socket option.
DatagramSocketImpl#getOption(SocketOption):::Called to get a socket option.
DatagramSocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (DatagramSocket or MulticastSocket)
DatagramSocketImplFactory#createDatagramSocketImpl():::Creates a new DatagramSocketImpl instance.
DefaultDatagramSocketImplFactory#createDatagramSocketImpl(boolean):::Creates a new DatagramSocketImpl instance.
FileNameMap#getContentTypeFor(String):::Gets the MIME type for the specified file name.
HostPortrange#toLowerCase(String):::Convert to lower case, and check that all chars are ascii alphanumeric, '-' or '.' only.
HostPortrange#wildcard():::returns true if the hostname part started with * hostname returns the remaining part of the host component eg "*.foo.com" -> ".foo.com" or "*" -> ""
HttpCookie#parse(String):::Constructs cookies from set-cookie or set-cookie2 header string
HttpCookie#hasExpired():::Reports whether this HTTP cookie has expired or not.
HttpCookie#setComment(String):::Specifies a comment that describes a cookie's purpose
HttpCookie#getComment():::Returns the comment describing the purpose of this cookie, or null if the cookie has no comment.
HttpCookie#setCommentURL(String):::Specifies a comment URL that describes a cookie's purpose
HttpCookie#getCommentURL():::Returns the comment URL describing the purpose of this cookie, or null if the cookie has no comment URL.
HttpCookie#setDiscard(boolean):::Specify whether user agent should discard the cookie unconditionally
HttpCookie#getDiscard():::Returns the discard attribute of the cookie
HttpCookie#setPortlist(String):::Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header.
HttpCookie#getPortlist():::Returns the port list attribute of the cookie
HttpCookie#setDomain(String):::Specifies the domain within which this cookie should be presented
HttpCookie#getDomain():::Returns the domain name set for this cookie
HttpCookie#setMaxAge(long):::Sets the maximum age of the cookie in seconds
HttpCookie#getMaxAge():::Returns the maximum age of the cookie, specified in seconds
HttpCookie#setPath(String):::Specifies a path for the cookie to which the client should return the cookie
HttpCookie#getPath():::Returns the path on the server to which the browser returns this cookie
HttpCookie#setSecure(boolean):::Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL
HttpCookie#getSecure():::Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.
HttpCookie#getName():::Returns the name of the cookie
HttpCookie#setValue(String):::Assigns a new value to a cookie after the cookie is created
HttpCookie#getValue():::Returns the value of the cookie.
HttpCookie#getVersion():::Returns the version of the protocol this cookie complies with
HttpCookie#setVersion(int):::Sets the version of the cookie protocol this cookie complies with
HttpCookie#isHttpOnly():::Returns true if this cookie contains the HttpOnly attribute
HttpCookie#setHttpOnly(boolean):::Indicates whether the cookie should be considered HTTP Only
HttpCookie#domainMatches(String, String):::The utility method to check whether a host name is in a domain or not
HttpCookie#toString():::Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading "Cookie:" token.
HttpCookie#equals(Object):::Test the equality of two HTTP cookies
HttpCookie#hashCode():::Returns the hash code of this HTTP cookie
HttpCookie#clone():::Create and return a copy of this object.
HttpRetryException#responseCode():::Returns the http response code
HttpRetryException#getReason():::Returns a string explaining why the http request could not be retried.
HttpRetryException#getLocation():::Returns the value of the Location header field if the error resulted from redirection.
HttpURLConnection#setAuthenticator(Authenticator):::Supplies an java.net.Authenticator Authenticator to be used when authentication is requested through the HTTP protocol for this HttpURLConnection
HttpURLConnection#getHeaderFieldKey(int):::Returns the key for the n^th header field
HttpURLConnection#setFixedLengthStreamingMode(int):::This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance
HttpURLConnection#setFixedLengthStreamingMode(long):::This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance
HttpURLConnection#setChunkedStreamingMode(int):::This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance
HttpURLConnection#getHeaderField(int):::Returns the value for the n^th header field
HttpURLConnection#setFollowRedirects(boolean):::Sets whether HTTP redirects  (requests with response code 3xx) should be automatically followed by this class
HttpURLConnection#getFollowRedirects():::Returns a boolean indicating whether or not HTTP redirects (3xx) should be automatically followed.
HttpURLConnection#setInstanceFollowRedirects(boolean):::Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance
HttpURLConnection#getInstanceFollowRedirects():::Returns the value of this HttpURLConnection's instanceFollowRedirects field.
HttpURLConnection#setRequestMethod(String):::Set the method for the URL request, one of: <UL>  <LI>GET  <LI>POST  <LI>HEAD  <LI>OPTIONS  <LI>PUT  <LI>DELETE  <LI>TRACE </UL> are legal, subject to protocol restrictions
HttpURLConnection#getRequestMethod():::Get the request method.
HttpURLConnection#getResponseCode():::Gets the status code from an HTTP response message
HttpURLConnection#getResponseMessage():::Gets the HTTP response message, if any, returned along with the response code from a server
HttpURLConnection#disconnect():::Indicates that other requests to the server are unlikely in the near future
HttpURLConnection#usingProxy():::Indicates if the connection is going through a proxy.
HttpURLConnection#getPermission():::Returns a SocketPermission object representing the permission necessary to connect to the destination host and port.
HttpURLConnection#getErrorStream():::Returns the error stream if the connection failed but the server sent useful data nonetheless
IDN#toASCII(String, int):::Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490
IDN#toASCII(String):::Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490
IDN#toUnicode(String, int):::Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490
IDN#toUnicode(String):::Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490
Inet4Address#isMulticastAddress():::Utility routine to check if the InetAddress is an IP multicast address
Inet4Address#isAnyLocalAddress():::Utility routine to check if the InetAddress is a wildcard address.
Inet4Address#isLoopbackAddress():::Utility routine to check if the InetAddress is a loopback address.
Inet4Address#isLinkLocalAddress():::Utility routine to check if the InetAddress is an link local address.
Inet4Address#isSiteLocalAddress():::Utility routine to check if the InetAddress is a site local address.
Inet4Address#isMCGlobal():::Utility routine to check if the multicast address has global scope.
Inet4Address#isMCNodeLocal():::Utility routine to check if the multicast address has node scope.
Inet4Address#isMCLinkLocal():::Utility routine to check if the multicast address has link scope.
Inet4Address#isMCSiteLocal():::Utility routine to check if the multicast address has site scope.
Inet4Address#isMCOrgLocal():::Utility routine to check if the multicast address has organization scope.
Inet4Address#getAddress():::Returns the raw IP address of this InetAddress object
Inet4Address#getHostAddress():::Returns the IP address string in textual presentation form.
Inet4Address#hashCode():::Returns a hashcode for this IP address.
Inet4Address#equals(Object):::Compares this object against the specified object
Inet4Address#numericToTextFormat(byte[]):::Converts IPv4 binary address into a string suitable for presentation.
Inet6Address#getByAddress(String, byte[], NetworkInterface):::Create an Inet6Address in the exact manner of InetAddress#getByAddress(String,byte[]) except that the IPv6 scope_id is set to the value corresponding to the given interface for the address type specified in addr
Inet6Address#getByAddress(String, byte[], int):::Create an Inet6Address in the exact manner of InetAddress#getByAddress(String,byte[]) except that the IPv6 scope_id is set to the given numeric value
Inet6Address#isMulticastAddress():::Utility routine to check if the InetAddress is an IP multicast address
Inet6Address#isAnyLocalAddress():::Utility routine to check if the InetAddress is a wildcard address.
Inet6Address#isLoopbackAddress():::Utility routine to check if the InetAddress is a loopback address.
Inet6Address#isLinkLocalAddress():::Utility routine to check if the InetAddress is an link local address.
Inet6Address#isSiteLocalAddress():::Utility routine to check if the InetAddress is a site local address.
Inet6Address#isMCGlobal():::Utility routine to check if the multicast address has global scope.
Inet6Address#isMCNodeLocal():::Utility routine to check if the multicast address has node scope.
Inet6Address#isMCLinkLocal():::Utility routine to check if the multicast address has link scope.
Inet6Address#isMCSiteLocal():::Utility routine to check if the multicast address has site scope.
Inet6Address#isMCOrgLocal():::Utility routine to check if the multicast address has organization scope.
Inet6Address#getAddress():::Returns the raw IP address of this InetAddress object
Inet6Address#getScopeId():::Returns the numeric scopeId, if this instance is associated with an interface
Inet6Address#getScopedInterface():::Returns the scoped interface, if this instance was created with with a scoped interface.
Inet6Address#getHostAddress():::Returns the IP address string in textual presentation
Inet6Address#hashCode():::Returns a hashcode for this IP address.
Inet6Address#equals(Object):::Compares this object against the specified object
Inet6Address#isIPv4CompatibleAddress():::Utility routine to check if the InetAddress is an IPv4 compatible IPv6 address.
Inet6Address#numericToTextFormat(byte[]):::Convert IPv6 binary address into presentation (printable) format.
InetAddress#isMulticastAddress():::Utility routine to check if the InetAddress is an IP multicast address.
InetAddress#isAnyLocalAddress():::Utility routine to check if the InetAddress is a wildcard address.
InetAddress#isLoopbackAddress():::Utility routine to check if the InetAddress is a loopback address.
InetAddress#isLinkLocalAddress():::Utility routine to check if the InetAddress is an link local address.
InetAddress#isSiteLocalAddress():::Utility routine to check if the InetAddress is a site local address.
InetAddress#isMCGlobal():::Utility routine to check if the multicast address has global scope.
InetAddress#isMCNodeLocal():::Utility routine to check if the multicast address has node scope.
InetAddress#isMCLinkLocal():::Utility routine to check if the multicast address has link scope.
InetAddress#isMCSiteLocal():::Utility routine to check if the multicast address has site scope.
InetAddress#isMCOrgLocal():::Utility routine to check if the multicast address has organization scope.
InetAddress#isReachable(int):::Test whether that address is reachable
InetAddress#isReachable(NetworkInterface, int, int):::Test whether that address is reachable
InetAddress#getHostName():::Gets the host name for this IP address
InetAddress#getHostName(boolean):::Returns the hostname for this address
InetAddress#getCanonicalHostName():::Gets the fully qualified domain name for this IP address
InetAddress#getAddress():::Returns the raw IP address of this InetAddress object
InetAddress#getHostAddress():::Returns the IP address string in textual presentation.
InetAddress#hashCode():::Returns a hashcode for this IP address.
InetAddress#equals(Object):::Compares this object against the specified object
InetAddress#toString():::Converts this IP address to a String
InetAddress#getByAddress(String, byte[]):::Creates an InetAddress based on the provided host name and IP address
InetAddress#getByName(String):::Determines the IP address of a host, given the host's name
InetAddress#getAllByName(String):::Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system
InetAddress#getLoopbackAddress():::Returns the loopback address
InetAddress#getAllByName0(String, boolean):::package private so SocketPermission can call it
InetAddress#getByAddress(byte[]):::Returns an InetAddress object given the raw IP address 
InetAddress#getLocalHost():::Returns the address of the local host
InetSocketAddress#createUnresolved(String, int):::Creates an unresolved socket address from a hostname and a port number
InetSocketAddress#getPort():::Gets the port number.
InetSocketAddress#getAddress():::Gets the InetAddress.
InetSocketAddress#getHostName():::Gets the hostname
InetSocketAddress#getHostString():::Returns the hostname, or the String form of the address if it doesn't have a hostname (it was created using a literal)
InetSocketAddress#isUnresolved():::Checks whether the address has been resolved or not.
InetSocketAddress#toString():::Constructs a string representation of this InetSocketAddress
InetSocketAddress#equals(Object):::Compares this object against the specified object
InetSocketAddress#hashCode():::Returns a hashcode for this socket address.
InMemoryCookieStore#add(URI, HttpCookie):::Add one cookie into cookie store.
InMemoryCookieStore#get(URI):::Get all cookies, which:  1) given uri domain-matches with, or, associated with     given uri when added to the cookie store
InMemoryCookieStore#getCookies():::Get all cookies in cookie store, except those have expired
InMemoryCookieStore#getURIs():::Get all URIs, which are associated with at least one cookie of this cookie store.
InMemoryCookieStore#remove(URI, HttpCookie):::Remove a cookie from store
InMemoryCookieStore#removeAll():::Remove all cookies in this cookie store.
InterfaceAddress#getAddress():::Returns an InetAddress for this address.
InterfaceAddress#getBroadcast():::Returns an InetAddress for the broadcast address for this InterfaceAddress
InterfaceAddress#getNetworkPrefixLength():::Returns the network prefix length for this address
InterfaceAddress#equals(Object):::Compares this object against the specified object
InterfaceAddress#hashCode():::Returns a hashcode for this Interface address.
InterfaceAddress#toString():::Converts this Interface address to a String
JarURLConnection#getJarFileURL():::Returns the URL for the Jar file for this connection.
JarURLConnection#getEntryName():::Return the entry name for this connection
JarURLConnection#getJarFile():::Return the JAR file for this connection.
JarURLConnection#getManifest():::Returns the Manifest for this connection, or null if none.
JarURLConnection#getJarEntry():::Return the JAR entry object for this connection, if any
JarURLConnection#getAttributes():::Return the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise.
JarURLConnection#getMainAttributes():::Returns the main Attributes for the JAR file for this connection.
JarURLConnection#getCertificates():::Return the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise
MulticastSocket#setTTL(byte):::Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts
MulticastSocket#setTimeToLive(int):::Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts
MulticastSocket#getTTL():::Get the default time-to-live for multicast packets sent out on the socket.
MulticastSocket#getTimeToLive():::Get the default time-to-live for multicast packets sent out on the socket.
MulticastSocket#joinGroup(InetAddress):::Joins a multicast group
MulticastSocket#leaveGroup(InetAddress):::Leave a multicast group
MulticastSocket#joinGroup(SocketAddress, NetworkInterface):::Joins the specified multicast group at the specified interface
MulticastSocket#leaveGroup(SocketAddress, NetworkInterface):::Leave a multicast group on a specified local interface
MulticastSocket#setInterface(InetAddress):::Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface
MulticastSocket#getInterface():::Retrieve the address of the network interface used for multicast packets.
MulticastSocket#setNetworkInterface(NetworkInterface):::Specify the network interface for outgoing multicast datagrams sent on this socket.
MulticastSocket#getNetworkInterface():::Get the multicast network interface set.
MulticastSocket#setLoopbackMode(boolean):::Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket
MulticastSocket#getLoopbackMode():::Get the setting for local loopback of multicast datagrams.
MulticastSocket#send(DatagramPacket, byte):::Sends a datagram packet to the destination, with a TTL (time- to-live) other than the default for the socket
NetworkInterface#getName():::Get the name of this network interface.
NetworkInterface#getInetAddresses():::Get an Enumeration with all or a subset of the InetAddresses bound to this network interface
NetworkInterface#inetAddresses():::Get a Stream of all or a subset of the InetAddresses bound to this network interface
NetworkInterface#getInterfaceAddresses():::Get a List of all or a subset of the InterfaceAddresses of this network interface
NetworkInterface#getSubInterfaces():::Get an Enumeration with all the subinterfaces (also known as virtual interfaces) attached to this network interface
NetworkInterface#subInterfaces():::Get a Stream of all subinterfaces (also known as virtual interfaces) attached to this network interface.
NetworkInterface#getParent():::Returns the parent NetworkInterface of this interface if this is a subinterface, or null if it is a physical (non virtual) interface or has no parent.
NetworkInterface#getIndex():::Returns the index of this network interface
NetworkInterface#getDisplayName():::Get the display name of this network interface
NetworkInterface#getByName(String):::Searches for the network interface with the specified name.
NetworkInterface#getByIndex(int):::Get a network interface given its index.
NetworkInterface#getByInetAddress(InetAddress):::Convenience method to search for a network interface that has the specified Internet Protocol (IP) address bound to it
NetworkInterface#getNetworkInterfaces():::Returns an Enumeration of all the interfaces on this machine
NetworkInterface#networkInterfaces():::Returns a Stream of all the interfaces on this machine
NetworkInterface#getHardwareAddress():::Returns the hardware address (usually MAC) of the interface if it has one and if it can be accessed given the current privileges
NetworkInterface#getMTU():::Returns the Maximum Transmission Unit (MTU) of this interface.
NetworkInterface#isVirtual():::Returns whether this interface is a virtual interface (also called subinterface)
NetworkInterface#equals(Object):::Compares this object against the specified object
NetworkInterface#getDefault():::Returns the default network interface of this system
PasswordAuthentication#getUserName():::Returns the user name.
PasswordAuthentication#getPassword():::Returns the user password
ProtocolFamily#name():::Returns the name of the protocol family.
Proxy#type():::Returns the proxy type.
Proxy#address():::Returns the socket address of the proxy, or null if its a direct connection.
Proxy#toString():::Constructs a string representation of this Proxy
Proxy#equals(Object):::Compares this object against the specified object
Proxy#hashCode():::Returns a hashcode for this Proxy.
ProxySelector#getDefault():::Gets the system-wide proxy selector.
ProxySelector#setDefault(ProxySelector):::Sets (or unsets) the system-wide proxy selector
ProxySelector#select(URI):::Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at
ProxySelector#connectFailed(URI, SocketAddress, IOException):::Called to indicate that a connection could not be established to a proxy/socks server
ProxySelector#of(InetSocketAddress):::Returns a ProxySelector which uses the given proxy address for all HTTP and HTTPS requests
ResponseCache#getDefault():::Gets the system-wide response cache.
ResponseCache#setDefault(ResponseCache):::Sets (or unsets) the system-wide cache
ResponseCache#get(URI, String, Map>):::Retrieve the cached response based on the requesting uri, request method and request headers
ResponseCache#put(URI, URLConnection):::The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache
SecureCacheResponse#getCipherSuite():::Returns the cipher suite in use on the original connection that retrieved the network resource.
SecureCacheResponse#getLocalCertificateChain():::Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource
SecureCacheResponse#getServerCertificateChain():::Returns the server's certificate chain, which was established as part of defining the session in the original connection that retrieved the network resource, from cache
SecureCacheResponse#getPeerPrincipal():::Returns the server's principal which was established as part of defining the session during the original connection that retrieved the network resource.
SecureCacheResponse#getLocalPrincipal():::Returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource.
ServerSocket#getImpl():::Get the SocketImpl attached to this socket, creating it if necessary.
ServerSocket#createImpl():::Creates the socket implementation.
ServerSocket#bind(SocketAddress):::Binds the ServerSocket to a specific address (IP address and port number)
ServerSocket#bind(SocketAddress, int):::Binds the ServerSocket to a specific address (IP address and port number)
ServerSocket#getInetAddress():::Returns the local address of this server socket
ServerSocket#getLocalPort():::Returns the port number on which this socket is listening
ServerSocket#accept():::Listens for a connection to be made to this socket and accepts it
ServerSocket#implAccept(Socket):::Subclasses of ServerSocket use this method to override accept() to return their own subclass of socket
ServerSocket#close():::Closes this socket
ServerSocket#getChannel():::Returns the unique java.nio.channels.ServerSocketChannel object associated with this socket, if any
ServerSocket#isBound():::Returns the binding state of the ServerSocket.
ServerSocket#isClosed():::Returns the closed state of the ServerSocket.
ServerSocket#setSoTimeout(int):::Enable/disable SocketOptions#SO_TIMEOUT SO_TIMEOUT with the specified timeout, in milliseconds
ServerSocket#getSoTimeout():::Retrieve setting for SocketOptions#SO_TIMEOUT SO_TIMEOUT
ServerSocket#setReuseAddress(boolean):::Enable/disable the SocketOptions#SO_REUSEADDR SO_REUSEADDR socket option
ServerSocket#getReuseAddress():::Tests if SocketOptions#SO_REUSEADDR SO_REUSEADDR is enabled.
ServerSocket#toString():::Returns the implementation address and implementation port of this socket as a String
ServerSocket#setSocketFactory(SocketImplFactory):::Sets the server socket implementation factory for the application
ServerSocket#setReceiveBufferSize(int):::Sets a default proposed value for the SocketOptions#SO_RCVBUF SO_RCVBUF option for sockets accepted from this ServerSocket
ServerSocket#getReceiveBufferSize():::Gets the value of the SocketOptions#SO_RCVBUF SO_RCVBUF option for this ServerSocket, that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket
ServerSocket#setPerformancePreferences(int, int, int):::Sets performance preferences for this ServerSocket
ServerSocket#setOption(SocketOption, T):::Sets the value of a socket option.
ServerSocket#getOption(SocketOption):::Returns the value of a socket option.
ServerSocket#supportedOptions():::Returns a set of the socket options supported by this server socket
Socket#createImpl(boolean):::Creates the socket implementation.
Socket#setImpl():::Sets impl to the system-default type of SocketImpl.
Socket#getImpl():::Get the SocketImpl attached to this socket, creating it if necessary.
Socket#connect(SocketAddress):::Connects this socket to the server.
Socket#connect(SocketAddress, int):::Connects this socket to the server with a specified timeout value
Socket#bind(SocketAddress):::Binds the socket to a local address
Socket#postAccept():::set the flags after an accept() call.
Socket#getInetAddress():::Returns the address to which the socket is connected
Socket#getLocalAddress():::Gets the local address to which the socket is bound
Socket#getPort():::Returns the remote port number to which this socket is connected
Socket#getLocalPort():::Returns the local port number to which this socket is bound
Socket#getRemoteSocketAddress():::Returns the address of the endpoint this socket is connected to, or null if it is unconnected
Socket#getChannel():::Returns the unique java.nio.channels.SocketChannel SocketChannel object associated with this socket, if any
Socket#getInputStream():::Returns an input stream for this socket
Socket#getOutputStream():::Returns an output stream for this socket
Socket#setTcpNoDelay(boolean):::Enable/disable SocketOptions#TCP_NODELAY TCP_NODELAY (disable/enable Nagle's algorithm).
Socket#getTcpNoDelay():::Tests if SocketOptions#TCP_NODELAY TCP_NODELAY is enabled.
Socket#setSoLinger(boolean, int):::Enable/disable SocketOptions#SO_LINGER SO_LINGER with the specified linger time in seconds
Socket#getSoLinger():::Returns setting for SocketOptions#SO_LINGER SO_LINGER
Socket#sendUrgentData(int):::Send one byte of urgent data on the socket
Socket#setOOBInline(boolean):::Enable/disable SocketOptions#SO_OOBINLINE SO_OOBINLINE (receipt of TCP urgent data)  By default, this option is disabled and TCP urgent data received on a socket is silently discarded
Socket#getOOBInline():::Tests if SocketOptions#SO_OOBINLINE SO_OOBINLINE is enabled.
Socket#setSoTimeout(int)::: Enable/disable SocketOptions#SO_TIMEOUT SO_TIMEOUT  with the specified timeout, in milliseconds
Socket#getSoTimeout():::Returns setting for SocketOptions#SO_TIMEOUT SO_TIMEOUT
Socket#setSendBufferSize(int):::Sets the SocketOptions#SO_SNDBUF SO_SNDBUF option to the specified value for this Socket
Socket#getSendBufferSize():::Get value of the SocketOptions#SO_SNDBUF SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.
Socket#setReceiveBufferSize(int):::Sets the SocketOptions#SO_RCVBUF SO_RCVBUF option to the specified value for this Socket
Socket#getReceiveBufferSize():::Gets the value of the SocketOptions#SO_RCVBUF SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.
Socket#setKeepAlive(boolean):::Enable/disable SocketOptions#SO_KEEPALIVE SO_KEEPALIVE.
Socket#getKeepAlive():::Tests if SocketOptions#SO_KEEPALIVE SO_KEEPALIVE is enabled.
Socket#setTrafficClass(int):::Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket
Socket#getTrafficClass():::Gets traffic class or type-of-service in the IP header for packets sent from this Socket  As the underlying network implementation may ignore the traffic class or type-of-service set using #setTrafficClass(int) this method may return a different value than was previously set using the #setTrafficClass(int) method on this Socket.
Socket#setReuseAddress(boolean):::Enable/disable the SocketOptions#SO_REUSEADDR SO_REUSEADDR socket option
Socket#getReuseAddress():::Tests if SocketOptions#SO_REUSEADDR SO_REUSEADDR is enabled.
Socket#close():::Closes this socket
Socket#shutdownInput():::Places the input stream for this socket at "end of stream"
Socket#shutdownOutput():::Disables the output stream for this socket
Socket#toString():::Converts this socket to a String.
Socket#isConnected():::Returns the connection state of the socket
Socket#isBound():::Returns the binding state of the socket
Socket#isClosed():::Returns the closed state of the socket.
Socket#isInputShutdown():::Returns whether the read-half of the socket connection is closed.
Socket#isOutputShutdown():::Returns whether the write-half of the socket connection is closed.
Socket#setSocketImplFactory(SocketImplFactory):::Sets the client socket implementation factory for the application
Socket#setPerformancePreferences(int, int, int):::Sets performance preferences for this socket
Socket#setOption(SocketOption, T):::Sets the value of a socket option.
Socket#getOption(SocketOption):::Returns the value of a socket option.
Socket#supportedOptions():::Returns a set of the socket options supported by this socket
SocketCleanable#register(FileDescriptor, boolean):::Register a socket specific Cleanable with the FileDescriptor if the FileDescriptor is non-null and the raw fd is != -1.
SocketCleanable#unregister(FileDescriptor):::Unregister a Cleanable from the FileDescriptor.
SocketCleanable#performCleanup():::Close the native handle or fd.
SocketImpl#create(boolean):::Creates either a stream or a datagram socket.
SocketImpl#connect(String, int):::Connects this socket to the specified port on the named host.
SocketImpl#connect(InetAddress, int):::Connects this socket to the specified port number on the specified host.
SocketImpl#connect(SocketAddress, int):::Connects this socket to the specified port number on the specified host
SocketImpl#bind(InetAddress, int):::Binds this socket to the specified local IP address and port number.
SocketImpl#listen(int):::Sets the maximum queue length for incoming connection indications (a request to connect) to the count argument
SocketImpl#accept(SocketImpl):::Accepts a connection.
SocketImpl#getInputStream():::Returns an input stream for this socket.
SocketImpl#getOutputStream():::Returns an output stream for this socket.
SocketImpl#available():::Returns the number of bytes that can be read from this socket without blocking.
SocketImpl#close():::Closes this socket.
SocketImpl#shutdownInput():::Places the input stream for this socket at "end of stream"
SocketImpl#shutdownOutput():::Disables the output stream for this socket
SocketImpl#getFileDescriptor():::Returns the value of this socket's fd field.
SocketImpl#getInetAddress():::Returns the value of this socket's address field.
SocketImpl#getPort():::Returns the value of this socket's port field.
SocketImpl#supportsUrgentData():::Returns whether or not this SocketImpl supports sending urgent data
SocketImpl#sendUrgentData(int):::Send one byte of urgent data on the socket
SocketImpl#getLocalPort():::Returns the value of this socket's localport field.
SocketImpl#toString():::Returns the address and port of this socket as a String.
SocketImpl#setPerformancePreferences(int, int, int):::Sets performance preferences for this socket
SocketImpl#setOption(SocketOption, T):::Called to set a socket option.
SocketImpl#getOption(SocketOption):::Called to get a socket option.
SocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket)
SocketImplFactory#createSocketImpl():::Creates a new SocketImpl instance.
SocketInputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file input stream.  The getChannel method of SocketInputStream returns null since it is a socket based stream.
SocketInputStream#read(byte[]):::Reads into a byte array data from the socket.
SocketInputStream#read(byte[], int, int):::Reads into a byte array b at offset off, length bytes of data.
SocketInputStream#read():::Reads a single byte from the socket.
SocketInputStream#skip(long):::Skips n bytes of input.
SocketInputStream#available():::Returns the number of bytes that can be read without blocking.
SocketInputStream#finalize():::Overrides finalize, the fd is closed by the Socket.
SocketOption#name():::Returns the name of the socket option.
SocketOption#type():::Returns the type of the socket option value.
SocketOptions#setOption(int, Object):::Enable/disable the option specified by optID
SocketOptions#getOption(int):::Fetch the value of an option
SocketOutputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file output stream
SocketOutputStream#write(int):::Writes a byte to the socket.
SocketOutputStream#write(byte[]):::Writes the contents of the buffer b to the socket.
SocketOutputStream#write(byte[], int, int):::Writes length bytes from buffer b starting at offset len.
SocketOutputStream#finalize():::Overrides finalize, the fd is closed by the Socket.
SocketPermission#getCanonName():::attempt to get the fully qualified domain name
SocketPermission#getIP():::get IP addresses
SocketPermission#implies(Permission):::Checks if this socket permission object "implies" the specified permission
SocketPermission#impliesIgnoreMask(SocketPermission):::Checks if the incoming Permission's action are a proper subset of the this object's actions
SocketPermission#equals(Object):::Checks two SocketPermission objects for equality.
SocketPermission#hashCode():::Returns the hash code value for this object.
SocketPermission#getActions():::Returns the canonical string representation of the actions
SocketPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing SocketPermission objects
SocketPermissionCollection#add(Permission):::Adds a permission to the SocketPermissions
SocketPermissionCollection#implies(Permission):::Check and see if this collection of permissions implies the permissions expressed in "permission".
SocketPermissionCollection#elements():::Returns an enumeration of all the SocketPermission objects in the container.
SocksSocketImpl#connect(SocketAddress, int):::Connects the Socks Socket to the specified endpoint
SocksSocketImpl#socksBind(InetSocketAddress):::Sends the Bind request to the SOCKS proxy
SocksSocketImpl#acceptFrom(SocketImpl, InetSocketAddress):::Accepts a connection from a specific host.
SocksSocketImpl#getInetAddress():::Returns the value of this socket's address field.
SocksSocketImpl#getPort():::Returns the value of this socket's port field.
URI#create(String):::Creates a URI by parsing the given string
URI#parseServerAuthority():::Attempts to parse this URI's authority component, if defined, into user-information, host, and port components
URI#normalize():::Normalizes this URI's path
URI#resolve(URI):::Resolves the given URI against this URI
URI#resolve(String):::Constructs a new URI by parsing the given string and then resolving it against this URI
URI#relativize(URI):::Relativizes the given URI against this URI
URI#toURL():::Constructs a URL from this URI
URI#getScheme():::Returns the scheme component of this URI
URI#isAbsolute():::Tells whether or not this URI is absolute
URI#isOpaque():::Tells whether or not this URI is opaque
URI#getRawSchemeSpecificPart():::Returns the raw scheme-specific part of this URI
URI#getSchemeSpecificPart():::Returns the decoded scheme-specific part of this URI
URI#getRawAuthority():::Returns the raw authority component of this URI
URI#getAuthority():::Returns the decoded authority component of this URI
URI#getRawUserInfo():::Returns the raw user-information component of this URI
URI#getUserInfo():::Returns the decoded user-information component of this URI
URI#getHost():::Returns the host component of this URI
URI#getPort():::Returns the port number of this URI
URI#getRawPath():::Returns the raw path component of this URI
URI#getPath():::Returns the decoded path component of this URI
URI#getRawQuery():::Returns the raw query component of this URI
URI#getQuery():::Returns the decoded query component of this URI
URI#getRawFragment():::Returns the raw fragment component of this URI
URI#getFragment():::Returns the decoded fragment component of this URI
URI#equals(Object):::Tests this URI for equality with another object
URI#hashCode():::Returns a hash-code value for this URI
URI#compareTo(URI):::Compares this URI to another object, which must be a URI
URI#toString():::Returns the content of this URI as a string
URI#toASCIIString():::Returns the content of this URI as a US-ASCII string
URISyntaxException#getInput():::Returns the input string.
URISyntaxException#getReason():::Returns a string explaining why the input string could not be parsed.
URISyntaxException#getIndex():::Returns an index into the input string of the position at which the parse error occurred, or -1 if this position is not known.
URISyntaxException#getMessage():::Returns a string describing the parse error
URL#fromURI(URI):::Creates a URL from a URI, as if by invoking uri.toURL().
URL#set(String, String, int, String, String):::Sets the fields of the URL
URL#set(String, String, int, String, String, String, String, String):::Sets the specified 8 fields of the URL
URL#getQuery():::Gets the query part of this URL.
URL#getPath():::Gets the path part of this URL.
URL#getUserInfo():::Gets the userInfo part of this URL.
URL#getAuthority():::Gets the authority part of this URL.
URL#getPort():::Gets the port number of this URL.
URL#getDefaultPort():::Gets the default port number of the protocol associated with this URL
URL#getProtocol():::Gets the protocol name of this URL.
URL#getHost():::Gets the host name of this URL, if applicable
URL#getFile():::Gets the file name of this URL
URL#getRef():::Gets the anchor (also known as the "reference") of this URL.
URL#equals(Object):::Compares this URL for equality with another object.  If the given object is not a URL then this method immediately returns false.  Two URL objects are equal if they have the same protocol, reference equivalent hosts, have the same port number on the host, and the same file and fragment of the file.  Two hosts are considered equivalent if both host names can be resolved into the same IP addresses; else if either host name can't be resolved, the host names must be equal without regard to case; or both host names equal to null.  Since hosts comparison requires name resolution, this operation is a blocking operation
URL#hashCode():::Creates an integer suitable for hash table indexing.  The hash code is based upon all the URL components relevant for URL comparison
URL#sameFile(URL):::Compares two URLs, excluding the fragment component.  Returns true if this URL and the other argument are equal without taking the fragment component into consideration.
URL#toString():::Constructs a string representation of this URL
URL#toExternalForm():::Constructs a string representation of this URL
URL#toURI():::Returns a java.net.URI equivalent to this URL
URL#openConnection():::Returns a java.net.URLConnection URLConnection instance that represents a connection to the remote object referred to by the URL
URL#openConnection(Proxy):::Same as #openConnection(), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection
URL#openStream():::Opens a connection to this URL and returns an InputStream for reading from that connection
URL#getContent():::Gets the contents of this URL
URL#getContent(Class[]):::Gets the contents of this URL
URL#setURLStreamHandlerFactory(URLStreamHandlerFactory):::Sets an application's URLStreamHandlerFactory
URL#toLowerCase(String):::Returns the protocol in lower case
URL#isOverrideable(String):::Non-overrideable protocols: "jrt" and "file"  Character-based comparison for performance reasons; also ensures case-insensitive comparison in a locale-independent fashion.
URL#getURLStreamHandler(String):::Returns the Stream Handler.
URLClassLoader#getResourceAsStream(String):::Returns an input stream for reading the specified resource
URLClassLoader#close():::Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader
URLClassLoader#addURL(URL):::Appends the specified URL to the list of URLs to search for classes and resources
URLClassLoader#getURLs():::Returns the search path of URLs for loading classes and resources
URLClassLoader#findClass(String):::Finds and loads the class with the specified name from the URL search path
URLClassLoader#definePackage(String, Manifest, URL):::Defines a new package by name in this URLClassLoader
URLClassLoader#findResource(String):::Finds the resource with the specified name on the URL search path.
URLClassLoader#findResources(String):::Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name.
URLClassLoader#getPermissions(CodeSource):::Returns the permissions for the given codesource object
URLClassLoader#newInstance(URL[], ClassLoader):::Creates a new instance of URLClassLoader for the specified URLs and parent class loader
URLClassLoader#newInstance(URL[]):::Creates a new instance of URLClassLoader for the specified URLs and default parent class loader
URLConnection#getFileNameMap():::Loads filename map (a mimetable) from a data file
URLConnection#setFileNameMap(FileNameMap):::Sets the FileNameMap
URLConnection#connect():::Opens a communications link to the resource referenced by this URL, if such a connection has not already been established
URLConnection#setConnectTimeout(int):::Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection
URLConnection#getConnectTimeout():::Returns setting for connect timeout
URLConnection#setReadTimeout(int):::Sets the read timeout to a specified timeout, in milliseconds
URLConnection#getReadTimeout():::Returns setting for read timeout
URLConnection#getURL():::Returns the value of this URLConnection's URL field.
URLConnection#getContentLength():::Returns the value of the content-length header field
URLConnection#getContentLengthLong():::Returns the value of the content-length header field as a long.
URLConnection#getContentType():::Returns the value of the content-type header field.
URLConnection#getContentEncoding():::Returns the value of the content-encoding header field.
URLConnection#getExpiration():::Returns the value of the expires header field.
URLConnection#getDate():::Returns the value of the date header field.
URLConnection#getLastModified():::Returns the value of the last-modified header field
URLConnection#getHeaderField(String):::Returns the value of the named header field
URLConnection#getHeaderFields():::Returns an unmodifiable Map of the header fields
URLConnection#getHeaderFieldInt(String, int):::Returns the value of the named field parsed as a number
URLConnection#getHeaderFieldLong(String, long):::Returns the value of the named field parsed as a number
URLConnection#getHeaderFieldDate(String, long):::Returns the value of the named field parsed as date
URLConnection#getHeaderFieldKey(int):::Returns the key for the n^th header field
URLConnection#getHeaderField(int):::Returns the value for the n^th header field
URLConnection#getContent():::Retrieves the contents of this URL connection
URLConnection#getContent(Class[]):::Retrieves the contents of this URL connection.
URLConnection#getPermission():::Returns a permission object representing the permission necessary to make the connection represented by this object
URLConnection#getInputStream():::Returns an input stream that reads from this open connection
URLConnection#getOutputStream():::Returns an output stream that writes to this connection.
URLConnection#toString():::Returns a String representation of this URL connection.
URLConnection#setDoInput(boolean):::Sets the value of the doInput field for this URLConnection to the specified value
URLConnection#getDoInput():::Returns the value of this URLConnection's doInput flag.
URLConnection#setDoOutput(boolean):::Sets the value of the doOutput field for this URLConnection to the specified value
URLConnection#getDoOutput():::Returns the value of this URLConnection's doOutput flag.
URLConnection#setAllowUserInteraction(boolean):::Set the value of the allowUserInteraction field of this URLConnection.
URLConnection#getAllowUserInteraction():::Returns the value of the allowUserInteraction field for this object.
URLConnection#setDefaultAllowUserInteraction(boolean):::Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value.
URLConnection#getDefaultAllowUserInteraction():::Returns the default value of the allowUserInteraction field
URLConnection#setUseCaches(boolean):::Sets the value of the useCaches field of this URLConnection to the specified value
URLConnection#getUseCaches():::Returns the value of this URLConnection's useCaches field.
URLConnection#setIfModifiedSince(long):::Sets the value of the ifModifiedSince field of this URLConnection to the specified value.
URLConnection#getIfModifiedSince():::Returns the value of this object's ifModifiedSince field.
URLConnection#getDefaultUseCaches():::Returns the default value of a URLConnection's useCaches flag
URLConnection#setDefaultUseCaches(boolean):::Sets the default value of the useCaches field to the specified value
URLConnection#setDefaultUseCaches(String, boolean):::Sets the default value of the useCaches field for the named protocol to the given value
URLConnection#getDefaultUseCaches(String):::Returns the default value of the useCaches flag for the given protocol
URLConnection#setRequestProperty(String, String):::Sets the general request property
URLConnection#addRequestProperty(String, String):::Adds a general request property specified by a key-value pair
URLConnection#getRequestProperty(String):::Returns the value of the named general request property for this connection.
URLConnection#getRequestProperties():::Returns an unmodifiable Map of general request properties for this connection
URLConnection#setDefaultRequestProperty(String, String):::Sets the default value of a general request property
URLConnection#getDefaultRequestProperty(String):::Returns the value of the default request property
URLConnection#setContentHandlerFactory(ContentHandlerFactory):::Sets the ContentHandlerFactory of an application
URLConnection#guessContentTypeFromName(String):::Tries to determine the content type of an object, based on the specified "file" component of a URL
URLConnection#guessContentTypeFromStream(InputStream):::Tries to determine the type of an input stream based on the characters at the beginning of the input stream
URLDecoder#decode(String):::Decodes a x-www-form-urlencoded string
URLDecoder#decode(String, String):::Decodes an application/x-www-form-urlencoded string using a specific encoding scheme
URLDecoder#decode(String, Charset):::Decodes an application/x-www-form-urlencoded string using a specific java.nio.charset.Charset Charset
URLEncoder#encode(String):::Translates a string into x-www-form-urlencoded format
URLEncoder#encode(String, String):::Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme
URLEncoder#encode(String, Charset):::Translates a string into application/x-www-form-urlencoded format using a specific java.nio.charset.Charset Charset
URLPermission#getActions():::Returns the normalized method list and request header list, in the form:       "method-names : header-names"   where method-names is the list of methods separated by commas and header-names is the list of permitted headers separated by commas
URLPermission#implies(Permission):::Checks if this URLPermission implies the given permission
URLPermission#equals(Object):::Returns true if, this.getActions().equals(p.getActions()) and p's url equals this's url
URLPermission#hashCode():::Returns a hashcode calculated from the hashcode of the actions String and the url string.
URLStreamHandler#openConnection(URL):::Opens a connection to the object referenced by the URL argument
URLStreamHandler#openConnection(URL, Proxy):::Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection
URLStreamHandler#parseURL(URL, String, int, int):::Parses the string representation of a URL into a URL object
URLStreamHandler#getDefaultPort():::Returns the default port for a URL parsed by this handler
URLStreamHandler#equals(URL, URL):::Provides the default equals calculation
URLStreamHandler#hashCode(URL):::Provides the default hash calculation
URLStreamHandler#sameFile(URL, URL):::Compare two urls to see whether they refer to the same file, i.e., having the same protocol, host, port, and path
URLStreamHandler#getHostAddress(URL):::Get the IP address of our host
URLStreamHandler#hostsEqual(URL, URL):::Compares the host components of two URLs.
URLStreamHandler#toExternalForm(URL):::Converts a URL of a specific protocol to a String.
URLStreamHandler#setURL(URL, String, String, int, String, String, String, String, String):::Sets the fields of the URL argument to the indicated values
URLStreamHandler#setURL(URL, String, String, int, String, String):::Sets the fields of the URL argument to the indicated values
URLStreamHandlerFactory#createURLStreamHandler(String):::Creates a new URLStreamHandler instance with the specified protocol.

java.net.AbstractPlainDatagramSocketImpl#isReusePortAvailable()->boolean:::Tells whether SO_REUSEPORT is supported.
java.net.AbstractPlainDatagramSocketImpl#supportedOptions()->Set<SocketOption<?>>:::Returns a set of SocketOptions supported by this impl and by this impl's  socket (Socket or ServerSocket)
java.net.AbstractPlainDatagramSocketImpl#create()->void:::Creates a datagram socket
java.net.AbstractPlainDatagramSocketImpl#bind(int, InetAddress)->void:::Binds a datagram socket to a local port.
java.net.AbstractPlainDatagramSocketImpl#bind0(int, InetAddress)->void:::
java.net.AbstractPlainDatagramSocketImpl#send(DatagramPacket)->void:::Sends a datagram packet
java.net.AbstractPlainDatagramSocketImpl#connect(InetAddress, int)->void:::Connects a datagram socket to a remote destination
java.net.AbstractPlainDatagramSocketImpl#disconnect()->void:::Disconnects a previously connected socket
java.net.AbstractPlainDatagramSocketImpl#peek(InetAddress)->int:::Peek at the packet to see who it is from.
java.net.AbstractPlainDatagramSocketImpl#peekData(DatagramPacket)->int:::
java.net.AbstractPlainDatagramSocketImpl#receive(DatagramPacket)->void:::Receive the datagram packet.
java.net.AbstractPlainDatagramSocketImpl#receive0(DatagramPacket)->void:::
java.net.AbstractPlainDatagramSocketImpl#setTimeToLive(int)->void:::Set the TTL (time-to-live) option.
java.net.AbstractPlainDatagramSocketImpl#getTimeToLive()->int:::Get the TTL (time-to-live) option.
java.net.AbstractPlainDatagramSocketImpl#setTTL(byte)->void:::Set the TTL (time-to-live) option.
java.net.AbstractPlainDatagramSocketImpl#getTTL()->byte:::Get the TTL (time-to-live) option.
java.net.AbstractPlainDatagramSocketImpl#join(InetAddress)->void:::Join the multicast group.
java.net.AbstractPlainDatagramSocketImpl#leave(InetAddress)->void:::Leave the multicast group.
java.net.AbstractPlainDatagramSocketImpl#joinGroup(SocketAddress, NetworkInterface)->void:::
java.net.AbstractPlainDatagramSocketImpl#join(InetAddress, NetworkInterface)->void:::
java.net.AbstractPlainDatagramSocketImpl#leaveGroup(SocketAddress, NetworkInterface)->void:::Leave the multicast group.
java.net.AbstractPlainDatagramSocketImpl#leave(InetAddress, NetworkInterface)->void:::
java.net.AbstractPlainDatagramSocketImpl#close()->void:::Close the socket.
java.net.AbstractPlainDatagramSocketImpl#isClosed()->boolean:::
java.net.AbstractPlainDatagramSocketImpl#setOption(int, Object)->void:::
java.net.AbstractPlainDatagramSocketImpl#getOption(int)->Object:::
java.net.AbstractPlainDatagramSocketImpl#datagramSocketCreate()->void:::
java.net.AbstractPlainDatagramSocketImpl#datagramSocketClose()->void:::
java.net.AbstractPlainDatagramSocketImpl#socketSetOption(int, Object)->void:::
java.net.AbstractPlainDatagramSocketImpl#socketGetOption(int)->Object:::
java.net.AbstractPlainDatagramSocketImpl#connect0(InetAddress, int)->void:::
java.net.AbstractPlainDatagramSocketImpl#disconnect0(int)->void:::
java.net.AbstractPlainDatagramSocketImpl#nativeConnectDisabled()->boolean:::
java.net.AbstractPlainDatagramSocketImpl#dataAvailable()->int:::
java.net.AbstractPlainSocketImpl#isReusePortAvailable()->boolean:::Tells whether SO_REUSEPORT is supported.
java.net.AbstractPlainSocketImpl#supportedOptions()->Set<SocketOption<?>>:::Returns a set of SocketOptions supported by this impl and by this impl's  socket (Socket or ServerSocket)
java.net.AbstractPlainSocketImpl#create(boolean)->void:::Creates a socket with a boolean that specifies whether this  is a stream socket (true) or an unconnected UDP socket (false).
java.net.AbstractPlainSocketImpl#connect(String, int)->void:::Creates a socket and connects it to the specified port on  the specified host.
java.net.AbstractPlainSocketImpl#connect(InetAddress, int)->void:::Creates a socket and connects it to the specified address on  the specified port.
java.net.AbstractPlainSocketImpl#connect(SocketAddress, int)->void:::Creates a socket and connects it to the specified address on  the specified port.
java.net.AbstractPlainSocketImpl#setOption(int, Object)->void:::
java.net.AbstractPlainSocketImpl#getOption(int)->Object:::
java.net.AbstractPlainSocketImpl#doConnect(InetAddress, int, int)->void:::
java.net.AbstractPlainSocketImpl#bind(InetAddress, int)->void:::Binds the socket to the specified address of the specified local port.
java.net.AbstractPlainSocketImpl#listen(int)->void:::Listens, for a specified amount of time, for connections.
java.net.AbstractPlainSocketImpl#accept(SocketImpl)->void:::Accepts connections.
java.net.AbstractPlainSocketImpl#getInputStream()->InputStream:::Gets an InputStream for this socket.
java.net.AbstractPlainSocketImpl#setInputStream(SocketInputStream)->void:::
java.net.AbstractPlainSocketImpl#getOutputStream()->OutputStream:::Gets an OutputStream for this socket.
java.net.AbstractPlainSocketImpl#setFileDescriptor(FileDescriptor)->void:::
java.net.AbstractPlainSocketImpl#setAddress(InetAddress)->void:::
java.net.AbstractPlainSocketImpl#setPort(int)->void:::
java.net.AbstractPlainSocketImpl#setLocalPort(int)->void:::
java.net.AbstractPlainSocketImpl#available()->int:::Returns the number of bytes that can be read without blocking.
java.net.AbstractPlainSocketImpl#close()->void:::Closes the socket.
java.net.AbstractPlainSocketImpl#reset()->void:::
java.net.AbstractPlainSocketImpl#shutdownInput()->void:::Shutdown read-half of the socket connection;
java.net.AbstractPlainSocketImpl#shutdownOutput()->void:::Shutdown write-half of the socket connection;
java.net.AbstractPlainSocketImpl#supportsUrgentData()->boolean:::
java.net.AbstractPlainSocketImpl#sendUrgentData(int)->void:::
java.net.AbstractPlainSocketImpl#acquireFD()->FileDescriptor:::
java.net.AbstractPlainSocketImpl#releaseFD()->void:::
java.net.AbstractPlainSocketImpl#isConnectionReset()->boolean:::
java.net.AbstractPlainSocketImpl#setConnectionReset()->void:::
java.net.AbstractPlainSocketImpl#isClosedOrPending()->boolean:::
java.net.AbstractPlainSocketImpl#getTimeout()->int:::
java.net.AbstractPlainSocketImpl#socketClose()->void:::
java.net.AbstractPlainSocketImpl#socketCreate(boolean)->void:::
java.net.AbstractPlainSocketImpl#socketConnect(InetAddress, int, int)->void:::
java.net.AbstractPlainSocketImpl#socketBind(InetAddress, int)->void:::
java.net.AbstractPlainSocketImpl#socketListen(int)->void:::
java.net.AbstractPlainSocketImpl#socketAccept(SocketImpl)->void:::
java.net.AbstractPlainSocketImpl#socketAvailable()->int:::
java.net.AbstractPlainSocketImpl#socketClose0(boolean)->void:::
java.net.AbstractPlainSocketImpl#socketShutdown(int)->void:::
java.net.AbstractPlainSocketImpl#socketSetOption(int, boolean, Object)->void:::
java.net.AbstractPlainSocketImpl#socketGetOption(int, Object)->int:::
java.net.AbstractPlainSocketImpl#socketSendUrgentData(int)->void:::
java.net.Authenticator#setDefault(Authenticator)->void:::Sets the authenticator that will be used by the networking code  when a proxy or an HTTP server asks for authentication
java.net.Authenticator#getDefault()->Authenticator:::Gets the default authenticator
java.net.Authenticator#requestPasswordAuthentication(InetAddress, int, String, String, String)->PasswordAuthentication:::Ask the authenticator that has been registered with the system  for a password
java.net.Authenticator#requestPasswordAuthentication(String, InetAddress, int, String, String, String)->PasswordAuthentication:::Ask the authenticator that has been registered with the system  for a password
java.net.Authenticator#requestPasswordAuthentication(String, InetAddress, int, String, String, String, URL, RequestorType)->PasswordAuthentication:::Ask the authenticator that has been registered with the system  for a password
java.net.Authenticator#requestPasswordAuthentication(Authenticator, String, InetAddress, int, String, String, String, URL, RequestorType)->PasswordAuthentication:::Ask the given {@code authenticator} for a password
java.net.Authenticator#requestPasswordAuthenticationInstance(String, InetAddress, int, String, String, String, URL, RequestorType)->PasswordAuthentication:::Ask this authenticator for a password.
java.net.Authenticator#getRequestingHost()->String:::Gets the {@code hostname} of the  site or proxy requesting authentication, or {@code null}  if not available.
java.net.Authenticator#getRequestingSite()->InetAddress:::Gets the {@code InetAddress} of the  site requesting authorization, or {@code null}  if not available.
java.net.Authenticator#getRequestingPort()->int:::Gets the port number for the requested connection.
java.net.Authenticator#getRequestingProtocol()->String:::Give the protocol that's requesting the connection
java.net.Authenticator#getRequestingPrompt()->String:::Gets the prompt string given by the requestor.
java.net.Authenticator#getRequestingScheme()->String:::Gets the scheme of the requestor (the HTTP scheme  for an HTTP firewall, for example).
java.net.Authenticator#getPasswordAuthentication()->PasswordAuthentication:::Called when password authorization is needed
java.net.Authenticator#getRequestingURL()->URL:::Returns the URL that resulted in this  request for authentication.
java.net.Authenticator#getRequestorType()->RequestorType:::Returns whether the requestor is a Proxy or a Server.
java.net.Authenticator#getKey(Authenticator)->String:::
java.net.CacheRequest#getBody()->OutputStream:::Returns an OutputStream to which the response body can be  written.
java.net.CacheRequest#abort()->void:::Aborts the attempt to cache the response
java.net.CacheResponse#List<String>> getHeaders()->Map<String,:::Returns the response headers as a Map.
java.net.CacheResponse#getBody()->InputStream:::Returns the response body as an InputStream.
java.net.ContentHandler#getContent(URLConnection)->Object:::Given a URL connect stream positioned at the beginning of the  representation of an object, this method reads that stream and  creates an object from it.
java.net.ContentHandler#getContent(URLConnection, Class[])->Object:::Given a URL connect stream positioned at the beginning of the  representation of an object, this method reads that stream and  creates an object that matches one of the types specified
java.net.ContentHandlerFactory#createContentHandler(String)->ContentHandler:::Creates a new {@code ContentHandler} to read an object from  a {@code URLStreamHandler}.
java.net.CookieHandler#getDefault()->CookieHandler:::Gets the system-wide cookie handler.
java.net.CookieHandler#setDefault(CookieHandler)->void:::Sets (or unsets) the system-wide cookie handler
java.net.CookieHandler#List<String>> get(URI, Map<String, List<String>>)->Map<String,:::Gets all the applicable cookies from a cookie cache for the  specified uri in the request header
java.net.CookieHandler#put(URI, Map<String, List<String>>)->void:::Sets all the applicable cookies, examples are response header  fields that are named Set-Cookie2, present in the response  headers into a cookie cache.
java.net.CookieManager#setCookiePolicy(CookiePolicy)->void:::To set the cookie policy of this cookie manager
java.net.CookieManager#getCookieStore()->CookieStore:::To retrieve current cookie store.
java.net.CookieManager#List<String>> get(URI, Map<String, List<String>>)->Map<String,:::
java.net.CookieManager#put(URI, Map<String, List<String>>)->void:::
java.net.CookieManager.CookiePathComparator#compare(HttpCookie, HttpCookie)->int:::
java.net.CookiePolicy#shouldAccept(URI, HttpCookie)->boolean:::Will be called to see whether or not this cookie should be accepted.
java.net.CookieStore#add(URI, HttpCookie)->void:::Adds one HTTP cookie to the store
java.net.CookieStore#get(URI)->List<HttpCookie>:::Retrieve cookies associated with given URI, or whose domain matches the  given URI
java.net.CookieStore#getCookies()->List<HttpCookie>:::Get all not-expired cookies in cookie store.
java.net.CookieStore#getURIs()->List<URI>:::Get all URIs which identify the cookies in this cookie store.
java.net.CookieStore#remove(URI, HttpCookie)->boolean:::Remove a cookie from store.
java.net.CookieStore#removeAll()->boolean:::Remove all cookies in this cookie store.
java.net.DatagramPacket#getAddress()->InetAddress:::Returns the IP address of the machine to which this datagram is being  sent or from which the datagram was received.
java.net.DatagramPacket#getPort()->int:::Returns the port number on the remote host to which this datagram is  being sent or from which the datagram was received.
java.net.DatagramPacket#getData()->byte[]:::Returns the data buffer
java.net.DatagramPacket#getOffset()->int:::Returns the offset of the data to be sent or the offset of the  data received.
java.net.DatagramPacket#getLength()->int:::Returns the length of the data to be sent or the length of the  data received.
java.net.DatagramPacket#setData(byte[], int, int)->void:::Set the data buffer for this packet
java.net.DatagramPacket#setAddress(InetAddress)->void:::Sets the IP address of the machine to which this datagram  is being sent.
java.net.DatagramPacket#setPort(int)->void:::Sets the port number on the remote host to which this datagram  is being sent.
java.net.DatagramPacket#setSocketAddress(SocketAddress)->void:::Sets the SocketAddress (usually IP address + port number) of the remote  host to which this datagram is being sent.
java.net.DatagramPacket#getSocketAddress()->SocketAddress:::Gets the SocketAddress (usually IP address + port number) of the remote  host that this packet is being sent to or is coming from.
java.net.DatagramPacket#setData(byte[])->void:::Set the data buffer for this packet
java.net.DatagramPacket#setLength(int)->void:::Set the length for this packet
java.net.DatagramSocket#createImpl()->void:::
java.net.DatagramSocket#getImpl()->DatagramSocketImpl:::Get the {@code DatagramSocketImpl} attached to this socket,  creating it if necessary.
java.net.DatagramSocket#bind(SocketAddress)->void:::Binds this DatagramSocket to a specific address and port
java.net.DatagramSocket#checkAddress(InetAddress, String)->void:::
java.net.DatagramSocket#connect(InetAddress, int)->void:::Connects the socket to a remote address for this socket
java.net.DatagramSocket#connect(SocketAddress)->void:::Connects this socket to a remote socket address (IP address + port number)
java.net.DatagramSocket#disconnect()->void:::Disconnects the socket
java.net.DatagramSocket#isBound()->boolean:::Returns the binding state of the socket
java.net.DatagramSocket#isConnected()->boolean:::Returns the connection state of the socket
java.net.DatagramSocket#getInetAddress()->InetAddress:::Returns the address to which this socket is connected
java.net.DatagramSocket#getPort()->int:::Returns the port number to which this socket is connected
java.net.DatagramSocket#getRemoteSocketAddress()->SocketAddress:::Returns the address of the endpoint this socket is connected to, or  {@code null} if it is unconnected
java.net.DatagramSocket#getLocalSocketAddress()->SocketAddress:::
java.net.DatagramSocket#send(DatagramPacket)->void:::Sends a datagram packet from this socket
java.net.DatagramSocket#receive(DatagramPacket)->void:::Receives a datagram packet from this socket
java.net.DatagramSocket#getLocalAddress()->InetAddress:::Gets the local address to which the socket is bound
java.net.DatagramSocket#getLocalPort()->int:::Returns the port number on the local host to which this socket  is bound.
java.net.DatagramSocket#setSoTimeout(int)->void:::Enable/disable SO_TIMEOUT with the specified timeout, in   milliseconds
java.net.DatagramSocket#getSoTimeout()->int:::Retrieve setting for SO_TIMEOUT
java.net.DatagramSocket#setSendBufferSize(int)->void:::Sets the SO_SNDBUF option to the specified value for this  {@code DatagramSocket}
java.net.DatagramSocket#getSendBufferSize()->int:::Get value of the SO_SNDBUF option for this {@code DatagramSocket}, that is the  buffer size used by the platform for output on this {@code DatagramSocket}.
java.net.DatagramSocket#setReceiveBufferSize(int)->void:::Sets the SO_RCVBUF option to the specified value for this  {@code DatagramSocket}
java.net.DatagramSocket#getReceiveBufferSize()->int:::Get value of the SO_RCVBUF option for this {@code DatagramSocket}, that is the  buffer size used by the platform for input on this {@code DatagramSocket}.
java.net.DatagramSocket#setReuseAddress(boolean)->void:::Enable/disable the SO_REUSEADDR socket option
java.net.DatagramSocket#getReuseAddress()->boolean:::Tests if SO_REUSEADDR is enabled.
java.net.DatagramSocket#setBroadcast(boolean)->void:::Enable/disable SO_BROADCAST
java.net.DatagramSocket#getBroadcast()->boolean:::Tests if SO_BROADCAST is enabled.
java.net.DatagramSocket#setTrafficClass(int)->void:::Sets traffic class or type-of-service octet in the IP  datagram header for datagrams sent from this DatagramSocket
java.net.DatagramSocket#getTrafficClass()->int:::Gets traffic class or type-of-service in the IP datagram  header for packets sent from this DatagramSocket
java.net.DatagramSocket#close()->void:::Closes this datagram socket
java.net.DatagramSocket#isClosed()->boolean:::Returns whether the socket is closed or not.
java.net.DatagramSocket#getChannel()->DatagramChannel:::Returns the unique {@link java.nio.channels.DatagramChannel} object  associated with this datagram socket, if any
java.net.DatagramSocket#setDatagramSocketImplFactory(DatagramSocketImplFactory)->void:::Sets the datagram socket implementation factory for the  application
java.net.DatagramSocket#setOption(SocketOption<T>, T)->DatagramSocket:::Sets the value of a socket option.
java.net.DatagramSocket#getOption(SocketOption<T>)->T:::Returns the value of a socket option.
java.net.DatagramSocket#supportedOptions()->Set<SocketOption<?>>:::Returns a set of the socket options supported by this socket
java.net.DatagramSocketImpl#setDatagramSocket(DatagramSocket)->void:::
java.net.DatagramSocketImpl#getDatagramSocket()->DatagramSocket:::
java.net.DatagramSocketImpl#dataAvailable()->int:::
java.net.DatagramSocketImpl#create()->void:::Creates a datagram socket.
java.net.DatagramSocketImpl#bind(int, InetAddress)->void:::Binds a datagram socket to a local port and address.
java.net.DatagramSocketImpl#send(DatagramPacket)->void:::Sends a datagram packet
java.net.DatagramSocketImpl#connect(InetAddress, int)->void:::Connects a datagram socket to a remote destination
java.net.DatagramSocketImpl#disconnect()->void:::Disconnects a datagram socket from its remote destination.
java.net.DatagramSocketImpl#peek(InetAddress)->int:::Peek at the packet to see who it is from
java.net.DatagramSocketImpl#peekData(DatagramPacket)->int:::Peek at the packet to see who it is from
java.net.DatagramSocketImpl#receive(DatagramPacket)->void:::Receive the datagram packet.
java.net.DatagramSocketImpl#setTTL(byte)->void:::Set the TTL (time-to-live) option.
java.net.DatagramSocketImpl#getTTL()->byte:::Retrieve the TTL (time-to-live) option.
java.net.DatagramSocketImpl#setTimeToLive(int)->void:::Set the TTL (time-to-live) option.
java.net.DatagramSocketImpl#getTimeToLive()->int:::Retrieve the TTL (time-to-live) option.
java.net.DatagramSocketImpl#join(InetAddress)->void:::Join the multicast group.
java.net.DatagramSocketImpl#leave(InetAddress)->void:::Leave the multicast group.
java.net.DatagramSocketImpl#joinGroup(SocketAddress, NetworkInterface)->void:::Join the multicast group.
java.net.DatagramSocketImpl#leaveGroup(SocketAddress, NetworkInterface)->void:::Leave the multicast group.
java.net.DatagramSocketImpl#close()->void:::Close the socket.
java.net.DatagramSocketImpl#getLocalPort()->int:::Gets the local port.
java.net.DatagramSocketImpl#getFileDescriptor()->FileDescriptor:::Gets the datagram socket file descriptor.
java.net.DatagramSocketImpl#setOption(SocketOption<T>, T)->void:::Called to set a socket option.
java.net.DatagramSocketImpl#getOption(SocketOption<T>)->T:::Called to get a socket option.
java.net.DatagramSocketImpl#supportedOptions()->Set<SocketOption<?>>:::Returns a set of SocketOptions supported by this impl  and by this impl's socket (DatagramSocket or MulticastSocket)
java.net.DatagramSocketImplFactory#createDatagramSocketImpl()->DatagramSocketImpl:::Creates a new {@code DatagramSocketImpl} instance.
java.net.DefaultDatagramSocketImplFactory#createDatagramSocketImpl(boolean)->DatagramSocketImpl:::Creates a new <code>DatagramSocketImpl</code> instance.
java.net.DefaultInterface#getDefault()->NetworkInterface:::
java.net.DualStackPlainDatagramSocketImpl#datagramSocketCreate()->void:::
java.net.DualStackPlainDatagramSocketImpl#bind0(int, InetAddress)->void:::
java.net.DualStackPlainDatagramSocketImpl#peek(InetAddress)->int:::
java.net.DualStackPlainDatagramSocketImpl#peekData(DatagramPacket)->int:::
java.net.DualStackPlainDatagramSocketImpl#receive0(DatagramPacket)->void:::
java.net.DualStackPlainDatagramSocketImpl#send(DatagramPacket)->void:::
java.net.DualStackPlainDatagramSocketImpl#connect0(InetAddress, int)->void:::
java.net.DualStackPlainDatagramSocketImpl#disconnect0(int)->void:::
java.net.DualStackPlainDatagramSocketImpl#datagramSocketClose()->void:::
java.net.DualStackPlainDatagramSocketImpl#socketSetOption(int, Object)->void:::
java.net.DualStackPlainDatagramSocketImpl#socketGetOption(int)->Object:::
java.net.DualStackPlainDatagramSocketImpl#join(InetAddress, NetworkInterface)->void:::
java.net.DualStackPlainDatagramSocketImpl#leave(InetAddress, NetworkInterface)->void:::
java.net.DualStackPlainDatagramSocketImpl#setTimeToLive(int)->void:::
java.net.DualStackPlainDatagramSocketImpl#getTimeToLive()->int:::
java.net.DualStackPlainDatagramSocketImpl#setTTL(byte)->void:::
java.net.DualStackPlainDatagramSocketImpl#getTTL()->byte:::
java.net.DualStackPlainDatagramSocketImpl#dataAvailable()->int:::
java.net.FileNameMap#getContentTypeFor(String)->String:::Gets the MIME type for the specified file name.
java.net.HostPortrange#equals(HostPortrange)->boolean:::
java.net.HostPortrange#hashCode()->int:::
java.net.HostPortrange#toLowerCase(String)->String:::Convert to lower case, and check that all chars are ascii  alphanumeric, '-' or '.' only.
java.net.HostPortrange#literal()->boolean:::
java.net.HostPortrange#ipv4Literal()->boolean:::
java.net.HostPortrange#ipv6Literal()->boolean:::
java.net.HostPortrange#hostname()->String:::
java.net.HostPortrange#portrange()->int[]:::
java.net.HostPortrange#wildcard()->boolean:::returns true if the hostname part started with *  hostname returns the remaining part of the host component  eg "*.foo.com" -> ".foo.com" or "*" -> ""
java.net.HostPortrange#defaultPort()->int[]:::
java.net.HostPortrange#parsePort(String)->int[]:::
java.net.HttpConnectSocketImpl#connect(SocketAddress, int)->void:::
java.net.HttpConnectSocketImpl#setOption(int, Object)->void:::
java.net.HttpConnectSocketImpl#getInetAddress()->InetAddress:::
java.net.HttpConnectSocketImpl#getPort()->int:::
java.net.HttpConnectSocketImpl#getLocalPort()->int:::
java.net.HttpCookie#parse(String)->List<HttpCookie>:::Constructs cookies from set-cookie or set-cookie2 header string
java.net.HttpCookie#hasExpired()->boolean:::Reports whether this HTTP cookie has expired or not.
java.net.HttpCookie#setComment(String)->void:::Specifies a comment that describes a cookie's purpose
java.net.HttpCookie#getComment()->String:::Returns the comment describing the purpose of this cookie, or  {@code null} if the cookie has no comment.
java.net.HttpCookie#setCommentURL(String)->void:::Specifies a comment URL that describes a cookie's purpose
java.net.HttpCookie#getCommentURL()->String:::Returns the comment URL describing the purpose of this cookie, or  {@code null} if the cookie has no comment URL.
java.net.HttpCookie#setDiscard(boolean)->void:::Specify whether user agent should discard the cookie unconditionally
java.net.HttpCookie#getDiscard()->boolean:::Returns the discard attribute of the cookie
java.net.HttpCookie#setPortlist(String)->void:::Specify the portlist of the cookie, which restricts the port(s)  to which a cookie may be sent back in a Cookie header.
java.net.HttpCookie#getPortlist()->String:::Returns the port list attribute of the cookie
java.net.HttpCookie#setDomain(String)->void:::Specifies the domain within which this cookie should be presented
java.net.HttpCookie#getDomain()->String:::Returns the domain name set for this cookie
java.net.HttpCookie#setMaxAge(long)->void:::Sets the maximum age of the cookie in seconds
java.net.HttpCookie#getMaxAge()->long:::Returns the maximum age of the cookie, specified in seconds
java.net.HttpCookie#setPath(String)->void:::Specifies a path for the cookie to which the client should return  the cookie
java.net.HttpCookie#getPath()->String:::Returns the path on the server to which the browser returns this cookie
java.net.HttpCookie#setSecure(boolean)->void:::Indicates whether the cookie should only be sent using a secure protocol,  such as HTTPS or SSL
java.net.HttpCookie#getSecure()->boolean:::Returns {@code true} if sending this cookie should be restricted to a  secure protocol, or {@code false} if the it can be sent using any  protocol.
java.net.HttpCookie#getName()->String:::Returns the name of the cookie
java.net.HttpCookie#setValue(String)->void:::Assigns a new value to a cookie after the cookie is created
java.net.HttpCookie#getValue()->String:::Returns the value of the cookie.
java.net.HttpCookie#getVersion()->int:::Returns the version of the protocol this cookie complies with
java.net.HttpCookie#setVersion(int)->void:::Sets the version of the cookie protocol this cookie complies  with
java.net.HttpCookie#isHttpOnly()->boolean:::Returns {@code true} if this cookie contains the <i>HttpOnly</i>  attribute
java.net.HttpCookie#setHttpOnly(boolean)->void:::Indicates whether the cookie should be considered HTTP Only
java.net.HttpCookie#domainMatches(String, String)->boolean:::The utility method to check whether a host name is in a domain or not
java.net.HttpCookie#toString()->String:::Constructs a cookie header string representation of this cookie,  which is in the format defined by corresponding cookie specification,  but without the leading "Cookie:" token.
java.net.HttpCookie#equals(Object)->boolean:::Test the equality of two HTTP cookies
java.net.HttpCookie#hashCode()->int:::Returns the hash code of this HTTP cookie
java.net.HttpCookie#clone()->Object:::Create and return a copy of this object.
java.net.HttpCookie.CookieAttributeAssignor#assign(HttpCookie, String, String)->void:::
java.net.HttpRetryException#responseCode()->int:::Returns the http response code
java.net.HttpRetryException#getReason()->String:::Returns a string explaining why the http request could  not be retried.
java.net.HttpRetryException#getLocation()->String:::Returns the value of the Location header field if the  error resulted from redirection.
java.net.HttpURLConnection#setAuthenticator(Authenticator)->void:::Supplies an {@link java.net.Authenticator Authenticator} to be used  when authentication is requested through the HTTP protocol for  this {@code HttpURLConnection}
java.net.HttpURLConnection#getHeaderFieldKey(int)->String:::Returns the key for the {@code n}<sup>th</sup> header field
java.net.HttpURLConnection#setFixedLengthStreamingMode(int)->void:::This method is used to enable streaming of a HTTP request body  without internal buffering, when the content length is known in  advance
java.net.HttpURLConnection#setFixedLengthStreamingMode(long)->void:::This method is used to enable streaming of a HTTP request body  without internal buffering, when the content length is known in  advance
java.net.HttpURLConnection#setChunkedStreamingMode(int)->void:::This method is used to enable streaming of a HTTP request body  without internal buffering, when the content length is <b>not</b>  known in advance
java.net.HttpURLConnection#getHeaderField(int)->String:::Returns the value for the {@code n}<sup>th</sup> header field
java.net.HttpURLConnection#setFollowRedirects(boolean)->void:::Sets whether HTTP redirects  (requests with response code 3xx) should  be automatically followed by this class
java.net.HttpURLConnection#getFollowRedirects()->boolean:::Returns a {@code boolean} indicating  whether or not HTTP redirects (3xx) should  be automatically followed.
java.net.HttpURLConnection#setInstanceFollowRedirects(boolean)->void:::Sets whether HTTP redirects (requests with response code 3xx) should  be automatically followed by this {@code HttpURLConnection}  instance
java.net.HttpURLConnection#getInstanceFollowRedirects()->boolean:::Returns the value of this {@code HttpURLConnection}'s  {@code instanceFollowRedirects} field.
java.net.HttpURLConnection#setRequestMethod(String)->void:::Set the method for the URL request, one of:  <UL>   <LI>GET   <LI>POST   <LI>HEAD   <LI>OPTIONS   <LI>PUT   <LI>DELETE   <LI>TRACE  </UL> are legal, subject to protocol restrictions
java.net.HttpURLConnection#getRequestMethod()->String:::Get the request method.
java.net.HttpURLConnection#getResponseCode()->int:::Gets the status code from an HTTP response message
java.net.HttpURLConnection#getResponseMessage()->String:::Gets the HTTP response message, if any, returned along with the  response code from a server
java.net.HttpURLConnection#getHeaderFieldDate(String, long)->long:::
java.net.HttpURLConnection#disconnect()->void:::Indicates that other requests to the server  are unlikely in the near future
java.net.HttpURLConnection#usingProxy()->boolean:::Indicates if the connection is going through a proxy.
java.net.HttpURLConnection#getPermission()->Permission:::Returns a {@link SocketPermission} object representing the  permission necessary to connect to the destination host and port.
java.net.HttpURLConnection#getErrorStream()->InputStream:::Returns the error stream if the connection failed  but the server sent useful data nonetheless
java.net.IDN#toASCII(String, int)->String:::Translates a string from Unicode to ASCII Compatible Encoding (ACE),  as defined by the ToASCII operation of <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>
java.net.IDN#toASCII(String)->String:::Translates a string from Unicode to ASCII Compatible Encoding (ACE),  as defined by the ToASCII operation of <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>
java.net.IDN#toUnicode(String, int)->String:::Translates a string from ASCII Compatible Encoding (ACE) to Unicode,  as defined by the ToUnicode operation of <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>
java.net.IDN#toUnicode(String)->String:::Translates a string from ASCII Compatible Encoding (ACE) to Unicode,  as defined by the ToUnicode operation of <a href="http://www.ietf.org/rfc/rfc3490.txt">RFC 3490</a>
java.net.Inet4Address#isMulticastAddress()->boolean:::Utility routine to check if the InetAddress is an  IP multicast address
java.net.Inet4Address#isAnyLocalAddress()->boolean:::Utility routine to check if the InetAddress is a wildcard address.
java.net.Inet4Address#isLoopbackAddress()->boolean:::Utility routine to check if the InetAddress is a loopback address.
java.net.Inet4Address#isLinkLocalAddress()->boolean:::Utility routine to check if the InetAddress is an link local address.
java.net.Inet4Address#isSiteLocalAddress()->boolean:::Utility routine to check if the InetAddress is a site local address.
java.net.Inet4Address#isMCGlobal()->boolean:::Utility routine to check if the multicast address has global scope.
java.net.Inet4Address#isMCNodeLocal()->boolean:::Utility routine to check if the multicast address has node scope.
java.net.Inet4Address#isMCLinkLocal()->boolean:::Utility routine to check if the multicast address has link scope.
java.net.Inet4Address#isMCSiteLocal()->boolean:::Utility routine to check if the multicast address has site scope.
java.net.Inet4Address#isMCOrgLocal()->boolean:::Utility routine to check if the multicast address has organization scope.
java.net.Inet4Address#getAddress()->byte[]:::Returns the raw IP address of this {@code InetAddress}  object
java.net.Inet4Address#getHostAddress()->String:::Returns the IP address string in textual presentation form.
java.net.Inet4Address#hashCode()->int:::Returns a hashcode for this IP address.
java.net.Inet4Address#equals(Object)->boolean:::Compares this object against the specified object
java.net.Inet4Address#numericToTextFormat(byte[])->String:::Converts IPv4 binary address into a string suitable for presentation.
java.net.Inet4AddressImpl#getLocalHostName()->String:::
java.net.Inet4AddressImpl#lookupAllHostAddr(String)->InetAddress[]:::
java.net.Inet4AddressImpl#getHostByAddr(byte[])->String:::
java.net.Inet4AddressImpl#anyLocalAddress()->InetAddress:::
java.net.Inet4AddressImpl#loopbackAddress()->InetAddress:::
java.net.Inet4AddressImpl#isReachable(InetAddress, int, NetworkInterface, int)->boolean:::
java.net.Inet6Address.Inet6AddressHolder#setAddr(byte[])->void:::
java.net.Inet6Address.Inet6AddressHolder#init(byte[], int)->void:::
java.net.Inet6Address.Inet6AddressHolder#init(byte[], NetworkInterface)->void:::
java.net.Inet6Address.Inet6AddressHolder#getHostAddress()->String:::
java.net.Inet6Address.Inet6AddressHolder#equals(Object)->boolean:::
java.net.Inet6Address.Inet6AddressHolder#hashCode()->int:::
java.net.Inet6Address.Inet6AddressHolder#isIPv4CompatibleAddress()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isMulticastAddress()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isAnyLocalAddress()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isLoopbackAddress()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isLinkLocalAddress()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isSiteLocalAddress()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isMCGlobal()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isMCNodeLocal()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isMCLinkLocal()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isMCSiteLocal()->boolean:::
java.net.Inet6Address.Inet6AddressHolder#isMCOrgLocal()->boolean:::
java.net.Inet6Address#getByAddress(String, byte[], NetworkInterface)->Inet6Address:::Create an Inet6Address in the exact manner of {@link  InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is  set to the value corresponding to the given interface for the address  type specified in {@code addr}
java.net.Inet6Address#getByAddress(String, byte[], int)->Inet6Address:::Create an Inet6Address in the exact manner of {@link  InetAddress#getByAddress(String,byte[])} except that the IPv6 scope_id is  set to the given numeric value
java.net.Inet6Address#isMulticastAddress()->boolean:::Utility routine to check if the InetAddress is an IP multicast  address
java.net.Inet6Address#isAnyLocalAddress()->boolean:::Utility routine to check if the InetAddress is a wildcard address.
java.net.Inet6Address#isLoopbackAddress()->boolean:::Utility routine to check if the InetAddress is a loopback address.
java.net.Inet6Address#isLinkLocalAddress()->boolean:::Utility routine to check if the InetAddress is an link local address.
java.net.Inet6Address#isLinkLocalAddress(byte[])->boolean:::
java.net.Inet6Address#isSiteLocalAddress()->boolean:::Utility routine to check if the InetAddress is a site local address.
java.net.Inet6Address#isSiteLocalAddress(byte[])->boolean:::
java.net.Inet6Address#isMCGlobal()->boolean:::Utility routine to check if the multicast address has global scope.
java.net.Inet6Address#isMCNodeLocal()->boolean:::Utility routine to check if the multicast address has node scope.
java.net.Inet6Address#isMCLinkLocal()->boolean:::Utility routine to check if the multicast address has link scope.
java.net.Inet6Address#isMCSiteLocal()->boolean:::Utility routine to check if the multicast address has site scope.
java.net.Inet6Address#isMCOrgLocal()->boolean:::Utility routine to check if the multicast address has organization scope.
java.net.Inet6Address#getAddress()->byte[]:::Returns the raw IP address of this {@code InetAddress} object
java.net.Inet6Address#getScopeId()->int:::Returns the numeric scopeId, if this instance is associated with  an interface
java.net.Inet6Address#getScopedInterface()->NetworkInterface:::Returns the scoped interface, if this instance was created with  with a scoped interface.
java.net.Inet6Address#getHostAddress()->String:::Returns the IP address string in textual presentation
java.net.Inet6Address#hashCode()->int:::Returns a hashcode for this IP address.
java.net.Inet6Address#equals(Object)->boolean:::Compares this object against the specified object
java.net.Inet6Address#isIPv4CompatibleAddress()->boolean:::Utility routine to check if the InetAddress is an  IPv4 compatible IPv6 address.
java.net.Inet6Address#numericToTextFormat(byte[])->String:::Convert IPv6 binary address into presentation (printable) format.
java.net.Inet6AddressImpl#getLocalHostName()->String:::
java.net.Inet6AddressImpl#lookupAllHostAddr(String)->InetAddress[]:::
java.net.Inet6AddressImpl#getHostByAddr(byte[])->String:::
java.net.Inet6AddressImpl#isReachable(InetAddress, int, NetworkInterface, int)->boolean:::
java.net.Inet6AddressImpl#anyLocalAddress()->InetAddress:::
java.net.Inet6AddressImpl#loopbackAddress()->InetAddress:::
java.net.InetAddress.InetAddressHolder#init(String, int)->void:::
java.net.InetAddress.InetAddressHolder#getHostName()->String:::
java.net.InetAddress.InetAddressHolder#getOriginalHostName()->String:::
java.net.InetAddress.InetAddressHolder#getAddress()->int:::
java.net.InetAddress.InetAddressHolder#getFamily()->int:::
java.net.InetAddress#holder()->InetAddressHolder:::
java.net.InetAddress#isMulticastAddress()->boolean:::Utility routine to check if the InetAddress is an  IP multicast address.
java.net.InetAddress#isAnyLocalAddress()->boolean:::Utility routine to check if the InetAddress is a wildcard address.
java.net.InetAddress#isLoopbackAddress()->boolean:::Utility routine to check if the InetAddress is a loopback address.
java.net.InetAddress#isLinkLocalAddress()->boolean:::Utility routine to check if the InetAddress is an link local address.
java.net.InetAddress#isSiteLocalAddress()->boolean:::Utility routine to check if the InetAddress is a site local address.
java.net.InetAddress#isMCGlobal()->boolean:::Utility routine to check if the multicast address has global scope.
java.net.InetAddress#isMCNodeLocal()->boolean:::Utility routine to check if the multicast address has node scope.
java.net.InetAddress#isMCLinkLocal()->boolean:::Utility routine to check if the multicast address has link scope.
java.net.InetAddress#isMCSiteLocal()->boolean:::Utility routine to check if the multicast address has site scope.
java.net.InetAddress#isMCOrgLocal()->boolean:::Utility routine to check if the multicast address has organization scope.
java.net.InetAddress#isReachable(int)->boolean:::Test whether that address is reachable
java.net.InetAddress#isReachable(NetworkInterface, int, int)->boolean:::Test whether that address is reachable
java.net.InetAddress#getHostName()->String:::Gets the host name for this IP address
java.net.InetAddress#getHostName(boolean)->String:::Returns the hostname for this address
java.net.InetAddress#getCanonicalHostName()->String:::Gets the fully qualified domain name for this IP address
java.net.InetAddress#getAddress()->byte[]:::Returns the raw IP address of this {@code InetAddress}  object
java.net.InetAddress#getHostAddress()->String:::Returns the IP address string in textual presentation.
java.net.InetAddress#hashCode()->int:::Returns a hashcode for this IP address.
java.net.InetAddress#equals(Object)->boolean:::Compares this object against the specified object
java.net.InetAddress#toString()->String:::Converts this IP address to a {@code String}
java.net.InetAddress.Addresses#get()->InetAddress[]:::
java.net.InetAddress.CachedAddresses#get()->InetAddress[]:::
java.net.InetAddress.CachedAddresses#compareTo(CachedAddresses)->int:::
java.net.InetAddress.NameServiceAddresses#get()->InetAddress[]:::
java.net.InetAddress.NameService#lookupAllHostAddr(String)->InetAddress[]:::Lookup a host mapping by name
java.net.InetAddress.NameService#getHostByAddr(byte[])->String:::Lookup the host corresponding to the IP address provided
java.net.InetAddress.PlatformNameService#lookupAllHostAddr(String)->InetAddress[]:::
java.net.InetAddress.PlatformNameService#getHostByAddr(byte[])->String:::
java.net.InetAddress.HostsFileNameService#getHostByAddr(byte[])->String:::Lookup the host name  corresponding to the IP address provided
java.net.InetAddress.HostsFileNameService#lookupAllHostAddr(String)->InetAddress[]:::<p>Lookup a host mapping by name
java.net.InetAddress#getByAddress(String, byte[])->InetAddress:::Creates an InetAddress based on the provided host name and IP address
java.net.InetAddress#getByName(String)->InetAddress:::Determines the IP address of a host, given the host's name
java.net.InetAddress#getAllByName(String)->InetAddress[]:::Given the name of a host, returns an array of its IP addresses,  based on the configured name service on the system
java.net.InetAddress#getLoopbackAddress()->InetAddress:::Returns the loopback address
java.net.InetAddress#getAllByName0(String, boolean)->InetAddress[]:::package private so SocketPermission can call it
java.net.InetAddress#getAddressesFromNameService(String, InetAddress)->InetAddress[]:::
java.net.InetAddress#getByAddress(byte[])->InetAddress:::Returns an {@code InetAddress} object given the raw IP address 
java.net.InetAddress#getLocalHost()->InetAddress:::Returns the address of the local host
java.net.InetAddress#anyLocalAddress()->InetAddress:::
java.net.InetAddress#loadImpl(String)->InetAddressImpl:::
java.net.InetAddressImplFactory#create()->InetAddressImpl:::
java.net.InetAddressImplFactory#isIPv6Supported()->boolean:::
java.net.InetAddressImpl#getLocalHostName()->String:::
java.net.InetAddressImpl#lookupAllHostAddr(String)->InetAddress[]:::
java.net.InetAddressImpl#getHostByAddr(byte[])->String:::
java.net.InetAddressImpl#anyLocalAddress()->InetAddress:::
java.net.InetAddressImpl#loopbackAddress()->InetAddress:::
java.net.InetAddressImpl#isReachable(InetAddress, int, NetworkInterface, int)->boolean:::
java.net.InetSocketAddress.InetSocketAddressHolder#toString()->String:::
java.net.InetSocketAddress.InetSocketAddressHolder#equals(Object)->boolean:::
java.net.InetSocketAddress.InetSocketAddressHolder#hashCode()->int:::
java.net.InetSocketAddress#createUnresolved(String, int)->InetSocketAddress:::Creates an unresolved socket address from a hostname and a port number
java.net.InetSocketAddress#getPort()->int:::Gets the port number.
java.net.InetSocketAddress#getAddress()->InetAddress:::Gets the {@code InetAddress}.
java.net.InetSocketAddress#getHostName()->String:::Gets the {@code hostname}
java.net.InetSocketAddress#getHostString()->String:::Returns the hostname, or the String form of the address if it  doesn't have a hostname (it was created using a literal)
java.net.InetSocketAddress#isUnresolved()->boolean:::Checks whether the address has been resolved or not.
java.net.InetSocketAddress#toString()->String:::Constructs a string representation of this InetSocketAddress
java.net.InetSocketAddress#equals(Object)->boolean:::Compares this object against the specified object
java.net.InetSocketAddress#hashCode()->int:::Returns a hashcode for this socket address.
java.net.InMemoryCookieStore#add(URI, HttpCookie)->void:::Add one cookie into cookie store.
java.net.InMemoryCookieStore#get(URI)->List<HttpCookie>:::Get all cookies, which:   1) given uri domain-matches with, or, associated with      given uri when added to the cookie store
java.net.InMemoryCookieStore#getCookies()->List<HttpCookie>:::Get all cookies in cookie store, except those have expired
java.net.InMemoryCookieStore#getURIs()->List<URI>:::Get all URIs, which are associated with at least one cookie  of this cookie store.
java.net.InMemoryCookieStore#remove(URI, HttpCookie)->boolean:::Remove a cookie from store
java.net.InMemoryCookieStore#removeAll()->boolean:::Remove all cookies in this cookie store.
java.net.InterfaceAddress#getAddress()->InetAddress:::Returns an {@code InetAddress} for this address.
java.net.InterfaceAddress#getBroadcast()->InetAddress:::Returns an {@code InetAddress} for the broadcast address  for this InterfaceAddress
java.net.InterfaceAddress#getNetworkPrefixLength()->short:::Returns the network prefix length for this address
java.net.InterfaceAddress#equals(Object)->boolean:::Compares this object against the specified object
java.net.InterfaceAddress#hashCode()->int:::Returns a hashcode for this Interface address.
java.net.InterfaceAddress#toString()->String:::Converts this Interface address to a {@code String}
java.net.JarURLConnection#getJarFileURL()->URL:::Returns the URL for the Jar file for this connection.
java.net.JarURLConnection#getEntryName()->String:::Return the entry name for this connection
java.net.JarURLConnection#getJarFile()->JarFile:::Return the JAR file for this connection.
java.net.JarURLConnection#getManifest()->Manifest:::Returns the Manifest for this connection, or null if none.
java.net.JarURLConnection#getJarEntry()->JarEntry:::Return the JAR entry object for this connection, if any
java.net.JarURLConnection#getAttributes()->Attributes:::Return the Attributes object for this connection if the URL  for it points to a JAR file entry, null otherwise.
java.net.JarURLConnection#getMainAttributes()->Attributes:::Returns the main Attributes for the JAR file for this  connection.
java.net.JarURLConnection#getCertificates()->java.security.cert.Certificate[]:::Return the Certificate object for this connection if the URL  for it points to a JAR file entry, null otherwise
java.net.MulticastSocket#setTTL(byte)->void:::Set the default time-to-live for multicast packets sent out  on this {@code MulticastSocket} in order to control the  scope of the multicasts
java.net.MulticastSocket#setTimeToLive(int)->void:::Set the default time-to-live for multicast packets sent out  on this {@code MulticastSocket} in order to control the  scope of the multicasts
java.net.MulticastSocket#getTTL()->byte:::Get the default time-to-live for multicast packets sent out on  the socket.
java.net.MulticastSocket#getTimeToLive()->int:::Get the default time-to-live for multicast packets sent out on  the socket.
java.net.MulticastSocket#joinGroup(InetAddress)->void:::Joins a multicast group
java.net.MulticastSocket#leaveGroup(InetAddress)->void:::Leave a multicast group
java.net.MulticastSocket#joinGroup(SocketAddress, NetworkInterface)->void:::Joins the specified multicast group at the specified interface
java.net.MulticastSocket#leaveGroup(SocketAddress, NetworkInterface)->void:::Leave a multicast group on a specified local interface
java.net.MulticastSocket#setInterface(InetAddress)->void:::Set the multicast network interface used by methods  whose behavior would be affected by the value of the  network interface
java.net.MulticastSocket#getInterface()->InetAddress:::Retrieve the address of the network interface used for  multicast packets.
java.net.MulticastSocket#setNetworkInterface(NetworkInterface)->void:::Specify the network interface for outgoing multicast datagrams  sent on this socket.
java.net.MulticastSocket#getNetworkInterface()->NetworkInterface:::Get the multicast network interface set.
java.net.MulticastSocket#setLoopbackMode(boolean)->void:::Disable/Enable local loopback of multicast datagrams  The option is used by the platform's networking code as a hint  for setting whether multicast data will be looped back to  the local socket
java.net.MulticastSocket#getLoopbackMode()->boolean:::Get the setting for local loopback of multicast datagrams.
java.net.MulticastSocket#send(DatagramPacket, byte)->void:::Sends a datagram packet to the destination, with a TTL (time-  to-live) other than the default for the socket
java.net.MulticastSocket#supportedOptions()->Set<SocketOption<?>>:::
java.net.NetworkInterface#getName()->String:::Get the name of this network interface.
java.net.NetworkInterface#getInetAddresses()->Enumeration<InetAddress>:::Get an Enumeration with all or a subset of the InetAddresses bound to  this network interface
java.net.NetworkInterface#inetAddresses()->Stream<InetAddress>:::Get a Stream of all or a subset of the InetAddresses bound to this  network interface
java.net.NetworkInterface#getInterfaceAddresses()->java.util.List<InterfaceAddress>:::Get a List of all or a subset of the {@code InterfaceAddresses}  of this network interface
java.net.NetworkInterface#getSubInterfaces()->Enumeration<NetworkInterface>:::Get an Enumeration with all the subinterfaces (also known as virtual  interfaces) attached to this network interface
java.net.NetworkInterface#subInterfaces()->Stream<NetworkInterface>:::Get a Stream of all subinterfaces (also known as virtual  interfaces) attached to this network interface.
java.net.NetworkInterface#getParent()->NetworkInterface:::Returns the parent NetworkInterface of this interface if this is  a subinterface, or {@code null} if it is a physical  (non virtual) interface or has no parent.
java.net.NetworkInterface#getIndex()->int:::Returns the index of this network interface
java.net.NetworkInterface#getDisplayName()->String:::Get the display name of this network interface
java.net.NetworkInterface#getByName(String)->NetworkInterface:::Searches for the network interface with the specified name.
java.net.NetworkInterface#getByIndex(int)->NetworkInterface:::Get a network interface given its index.
java.net.NetworkInterface#getByInetAddress(InetAddress)->NetworkInterface:::Convenience method to search for a network interface that  has the specified Internet Protocol (IP) address bound to  it
java.net.NetworkInterface#getNetworkInterfaces()->Enumeration<NetworkInterface>:::Returns an {@code Enumeration} of all the interfaces on this machine
java.net.NetworkInterface#networkInterfaces()->Stream<NetworkInterface>:::Returns a {@code Stream} of all the interfaces on this machine
java.net.NetworkInterface#isUp()->boolean:::
java.net.NetworkInterface#isLoopback()->boolean:::
java.net.NetworkInterface#isPointToPoint()->boolean:::
java.net.NetworkInterface#supportsMulticast()->boolean:::
java.net.NetworkInterface#getHardwareAddress()->byte[]:::Returns the hardware address (usually MAC) of the interface if it  has one and if it can be accessed given the current privileges
java.net.NetworkInterface#getMTU()->int:::Returns the Maximum Transmission Unit (MTU) of this interface.
java.net.NetworkInterface#isVirtual()->boolean:::Returns whether this interface is a virtual interface (also called  subinterface)
java.net.NetworkInterface#equals(Object)->boolean:::Compares this object against the specified object
java.net.NetworkInterface#hashCode()->int:::
java.net.NetworkInterface#toString()->String:::
java.net.NetworkInterface#getDefault()->NetworkInterface:::Returns the default network interface of this system
java.net.PasswordAuthentication#getUserName()->String:::Returns the user name.
java.net.PasswordAuthentication#getPassword()->char[]:::Returns the user password
java.net.PlainSocketImpl#socketCreate(boolean)->void:::
java.net.PlainSocketImpl#socketConnect(InetAddress, int, int)->void:::
java.net.PlainSocketImpl#socketBind(InetAddress, int)->void:::
java.net.PlainSocketImpl#socketListen(int)->void:::
java.net.PlainSocketImpl#socketAccept(SocketImpl)->void:::
java.net.PlainSocketImpl#socketAvailable()->int:::
java.net.PlainSocketImpl#socketClose0(boolean)->void:::
java.net.PlainSocketImpl#socketShutdown(int)->void:::
java.net.PlainSocketImpl#socketSetOption(int, boolean, Object)->void:::
java.net.PlainSocketImpl#socketGetOption(int, Object)->int:::
java.net.PlainSocketImpl#socketSendUrgentData(int)->void:::
java.net.PlainSocketImpl#initIDs()->void:::
java.net.PlainSocketImpl#socket0(boolean)->int:::
java.net.PlainSocketImpl#bind0(int, InetAddress, int, boolean)->void:::
java.net.PlainSocketImpl#connect0(int, InetAddress, int)->int:::
java.net.PlainSocketImpl#waitForConnect(int, int)->void:::
java.net.PlainSocketImpl#localPort0(int)->int:::
java.net.PlainSocketImpl#localAddress(int, InetAddressContainer)->void:::
java.net.PlainSocketImpl#listen0(int, int)->void:::
java.net.PlainSocketImpl#accept0(int, InetSocketAddress[])->int:::
java.net.PlainSocketImpl#waitForNewConnection(int, int)->void:::
java.net.PlainSocketImpl#available0(int)->int:::
java.net.PlainSocketImpl#close0(int)->void:::
java.net.PlainSocketImpl#shutdown0(int, int)->void:::
java.net.PlainSocketImpl#setIntOption(int, int, int)->void:::
java.net.PlainSocketImpl#setSoTimeout0(int, int)->void:::
java.net.PlainSocketImpl#getIntOption(int, int)->int:::
java.net.PlainSocketImpl#sendOOB(int, int)->void:::
java.net.PlainSocketImpl#configureBlocking(int, boolean)->void:::
java.net.ProtocolFamily#name()->String:::Returns the name of the protocol family.
java.net.Proxy#type()->Type:::Returns the proxy type.
java.net.Proxy#address()->SocketAddress:::Returns the socket address of the proxy, or  {@code null} if its a direct connection.
java.net.Proxy#toString()->String:::Constructs a string representation of this Proxy
java.net.Proxy#equals(Object)->boolean:::Compares this object against the specified object
java.net.Proxy#hashCode()->int:::Returns a hashcode for this Proxy.
java.net.ProxySelector#getDefault()->ProxySelector:::Gets the system-wide proxy selector.
java.net.ProxySelector#setDefault(ProxySelector)->void:::Sets (or unsets) the system-wide proxy selector
java.net.ProxySelector#select(URI)->List<Proxy>:::Selects all the applicable proxies based on the protocol to  access the resource with and a destination address to access  the resource at
java.net.ProxySelector#connectFailed(URI, SocketAddress, IOException)->void:::Called to indicate that a connection could not be established  to a proxy/socks server
java.net.ProxySelector#of(InetSocketAddress)->ProxySelector:::Returns a ProxySelector which uses the given proxy address for all HTTP  and HTTPS requests
java.net.ProxySelector.StaticProxySelector#connectFailed(URI, SocketAddress, IOException)->void:::
java.net.ProxySelector.StaticProxySelector#select(URI)->List<Proxy>:::
java.net.ResponseCache#getDefault()->ResponseCache:::Gets the system-wide response cache.
java.net.ResponseCache#setDefault(ResponseCache)->void:::Sets (or unsets) the system-wide cache
java.net.ResponseCache#get(URI, String, Map<String, List<String>>)->CacheResponse:::Retrieve the cached response based on the requesting uri,  request method and request headers
java.net.ResponseCache#put(URI, URLConnection)->CacheRequest:::The protocol handler calls this method after a resource has  been retrieved, and the ResponseCache must decide whether or  not to store the resource in its cache
java.net.SecureCacheResponse#getCipherSuite()->String:::Returns the cipher suite in use on the original connection that  retrieved the network resource.
java.net.SecureCacheResponse#getLocalCertificateChain()->List<Certificate>:::Returns the certificate chain that were sent to the server during  handshaking of the original connection that retrieved the  network resource
java.net.SecureCacheResponse#getServerCertificateChain()->List<Certificate>:::Returns the server's certificate chain, which was established as  part of defining the session in the original connection that  retrieved the network resource, from cache
java.net.SecureCacheResponse#getPeerPrincipal()->Principal:::Returns the server's principal which was established as part of  defining the session during the original connection that  retrieved the network resource.
java.net.SecureCacheResponse#getLocalPrincipal()->Principal:::Returns the principal that was sent to the server during  handshaking in the original connection that retrieved the  network resource.
java.net.ServerSocket#getImpl()->SocketImpl:::Get the {@code SocketImpl} attached to this socket, creating  it if necessary.
java.net.ServerSocket#createImpl()->void:::Creates the socket implementation.
java.net.ServerSocket#bind(SocketAddress)->void:::Binds the {@code ServerSocket} to a specific address  (IP address and port number)
java.net.ServerSocket#bind(SocketAddress, int)->void:::Binds the {@code ServerSocket} to a specific address  (IP address and port number)
java.net.ServerSocket#getInetAddress()->InetAddress:::Returns the local address of this server socket
java.net.ServerSocket#getLocalPort()->int:::Returns the port number on which this socket is listening
java.net.ServerSocket#getLocalSocketAddress()->SocketAddress:::
java.net.ServerSocket#accept()->Socket:::Listens for a connection to be made to this socket and accepts  it
java.net.ServerSocket#implAccept(Socket)->void:::Subclasses of ServerSocket use this method to override accept()  to return their own subclass of socket
java.net.ServerSocket#close()->void:::Closes this socket
java.net.ServerSocket#getChannel()->ServerSocketChannel:::Returns the unique {@link java.nio.channels.ServerSocketChannel} object  associated with this socket, if any
java.net.ServerSocket#isBound()->boolean:::Returns the binding state of the ServerSocket.
java.net.ServerSocket#isClosed()->boolean:::Returns the closed state of the ServerSocket.
java.net.ServerSocket#setSoTimeout(int)->void:::Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT} with the  specified timeout, in milliseconds
java.net.ServerSocket#getSoTimeout()->int:::Retrieve setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}
java.net.ServerSocket#setReuseAddress(boolean)->void:::Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}  socket option
java.net.ServerSocket#getReuseAddress()->boolean:::Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.
java.net.ServerSocket#toString()->String:::Returns the implementation address and implementation port of  this socket as a {@code String}
java.net.ServerSocket#setBound()->void:::
java.net.ServerSocket#setCreated()->void:::
java.net.ServerSocket#setSocketFactory(SocketImplFactory)->void:::Sets the server socket implementation factory for the  application
java.net.ServerSocket#setReceiveBufferSize(int)->void:::Sets a default proposed value for the  {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option for sockets  accepted from this {@code ServerSocket}
java.net.ServerSocket#getReceiveBufferSize()->int:::Gets the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option  for this {@code ServerSocket}, that is the proposed buffer size that  will be used for Sockets accepted from this {@code ServerSocket}
java.net.ServerSocket#setPerformancePreferences(int, int, int)->void:::Sets performance preferences for this ServerSocket
java.net.ServerSocket#setOption(SocketOption<T>, T)->ServerSocket:::Sets the value of a socket option.
java.net.ServerSocket#getOption(SocketOption<T>)->T:::Returns the value of a socket option.
java.net.ServerSocket#supportedOptions()->Set<SocketOption<?>>:::Returns a set of the socket options supported by this server socket
java.net.Socket#createImpl(boolean)->void:::Creates the socket implementation.
java.net.Socket#setImpl()->void:::Sets impl to the system-default type of SocketImpl.
java.net.Socket#getImpl()->SocketImpl:::Get the {@code SocketImpl} attached to this socket, creating  it if necessary.
java.net.Socket#connect(SocketAddress)->void:::Connects this socket to the server.
java.net.Socket#connect(SocketAddress, int)->void:::Connects this socket to the server with a specified timeout value
java.net.Socket#bind(SocketAddress)->void:::Binds the socket to a local address
java.net.Socket#postAccept()->void:::set the flags after an accept() call.
java.net.Socket#setCreated()->void:::
java.net.Socket#setBound()->void:::
java.net.Socket#setConnected()->void:::
java.net.Socket#getInetAddress()->InetAddress:::Returns the address to which the socket is connected
java.net.Socket#getLocalAddress()->InetAddress:::Gets the local address to which the socket is bound
java.net.Socket#getPort()->int:::Returns the remote port number to which this socket is connected
java.net.Socket#getLocalPort()->int:::Returns the local port number to which this socket is bound
java.net.Socket#getRemoteSocketAddress()->SocketAddress:::Returns the address of the endpoint this socket is connected to, or  {@code null} if it is unconnected
java.net.Socket#getLocalSocketAddress()->SocketAddress:::
java.net.Socket#getChannel()->SocketChannel:::Returns the unique {@link java.nio.channels.SocketChannel SocketChannel}  object associated with this socket, if any
java.net.Socket#getInputStream()->InputStream:::Returns an input stream for this socket
java.net.Socket#getOutputStream()->OutputStream:::Returns an output stream for this socket
java.net.Socket#setTcpNoDelay(boolean)->void:::Enable/disable {@link SocketOptions#TCP_NODELAY TCP_NODELAY}  (disable/enable Nagle's algorithm).
java.net.Socket#getTcpNoDelay()->boolean:::Tests if {@link SocketOptions#TCP_NODELAY TCP_NODELAY} is enabled.
java.net.Socket#setSoLinger(boolean, int)->void:::Enable/disable {@link SocketOptions#SO_LINGER SO_LINGER} with the  specified linger time in seconds
java.net.Socket#getSoLinger()->int:::Returns setting for {@link SocketOptions#SO_LINGER SO_LINGER}
java.net.Socket#sendUrgentData(int)->void:::Send one byte of urgent data on the socket
java.net.Socket#setOOBInline(boolean)->void:::Enable/disable {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE}  (receipt of TCP urgent data)    By default, this option is disabled and TCP urgent data received on a  socket is silently discarded
java.net.Socket#getOOBInline()->boolean:::Tests if {@link SocketOptions#SO_OOBINLINE SO_OOBINLINE} is enabled.
java.net.Socket#setSoTimeout(int)->void::: Enable/disable {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}   with the specified timeout, in milliseconds
java.net.Socket#getSoTimeout()->int:::Returns setting for {@link SocketOptions#SO_TIMEOUT SO_TIMEOUT}
java.net.Socket#setSendBufferSize(int)->void:::Sets the {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option to the  specified value for this {@code Socket}
java.net.Socket#getSendBufferSize()->int:::Get value of the {@link SocketOptions#SO_SNDBUF SO_SNDBUF} option  for this {@code Socket}, that is the buffer size used by the platform  for output on this {@code Socket}.
java.net.Socket#setReceiveBufferSize(int)->void:::Sets the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option to the  specified value for this {@code Socket}
java.net.Socket#getReceiveBufferSize()->int:::Gets the value of the {@link SocketOptions#SO_RCVBUF SO_RCVBUF} option  for this {@code Socket}, that is the buffer size used by the platform  for input on this {@code Socket}.
java.net.Socket#setKeepAlive(boolean)->void:::Enable/disable {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE}.
java.net.Socket#getKeepAlive()->boolean:::Tests if {@link SocketOptions#SO_KEEPALIVE SO_KEEPALIVE} is enabled.
java.net.Socket#setTrafficClass(int)->void:::Sets traffic class or type-of-service octet in the IP  header for packets sent from this Socket
java.net.Socket#getTrafficClass()->int:::Gets traffic class or type-of-service in the IP header  for packets sent from this Socket  <p>  As the underlying network implementation may ignore the  traffic class or type-of-service set using {@link #setTrafficClass(int)}  this method may return a different value than was previously  set using the {@link #setTrafficClass(int)} method on this Socket.
java.net.Socket#setReuseAddress(boolean)->void:::Enable/disable the {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR}  socket option
java.net.Socket#getReuseAddress()->boolean:::Tests if {@link SocketOptions#SO_REUSEADDR SO_REUSEADDR} is enabled.
java.net.Socket#close()->void:::Closes this socket
java.net.Socket#shutdownInput()->void:::Places the input stream for this socket at "end of stream"
java.net.Socket#shutdownOutput()->void:::Disables the output stream for this socket
java.net.Socket#toString()->String:::Converts this socket to a {@code String}.
java.net.Socket#isConnected()->boolean:::Returns the connection state of the socket
java.net.Socket#isBound()->boolean:::Returns the binding state of the socket
java.net.Socket#isClosed()->boolean:::Returns the closed state of the socket.
java.net.Socket#isInputShutdown()->boolean:::Returns whether the read-half of the socket connection is closed.
java.net.Socket#isOutputShutdown()->boolean:::Returns whether the write-half of the socket connection is closed.
java.net.Socket#setSocketImplFactory(SocketImplFactory)->void:::Sets the client socket implementation factory for the  application
java.net.Socket#setPerformancePreferences(int, int, int)->void:::Sets performance preferences for this socket
java.net.Socket#setOption(SocketOption<T>, T)->Socket:::Sets the value of a socket option.
java.net.Socket#getOption(SocketOption<T>)->T:::Returns the value of a socket option.
java.net.Socket#supportedOptions()->Set<SocketOption<?>>:::Returns a set of the socket options supported by this socket
java.net.SocketCleanable#register(FileDescriptor, boolean)->void:::Register a socket specific Cleanable with the FileDescriptor  if the FileDescriptor is non-null and the raw fd is != -1.
java.net.SocketCleanable#unregister(FileDescriptor)->void:::Unregister a Cleanable from the FileDescriptor.
java.net.SocketCleanable#performCleanup()->void:::Close the native handle or fd.
java.net.SocketImpl#create(boolean)->void:::Creates either a stream or a datagram socket.
java.net.SocketImpl#connect(String, int)->void:::Connects this socket to the specified port on the named host.
java.net.SocketImpl#connect(InetAddress, int)->void:::Connects this socket to the specified port number on the specified host.
java.net.SocketImpl#connect(SocketAddress, int)->void:::Connects this socket to the specified port number on the specified host
java.net.SocketImpl#bind(InetAddress, int)->void:::Binds this socket to the specified local IP address and port number.
java.net.SocketImpl#listen(int)->void:::Sets the maximum queue length for incoming connection indications  (a request to connect) to the {@code count} argument
java.net.SocketImpl#accept(SocketImpl)->void:::Accepts a connection.
java.net.SocketImpl#getInputStream()->InputStream:::Returns an input stream for this socket.
java.net.SocketImpl#getOutputStream()->OutputStream:::Returns an output stream for this socket.
java.net.SocketImpl#available()->int:::Returns the number of bytes that can be read from this socket  without blocking.
java.net.SocketImpl#close()->void:::Closes this socket.
java.net.SocketImpl#shutdownInput()->void:::Places the input stream for this socket at "end of stream"
java.net.SocketImpl#shutdownOutput()->void:::Disables the output stream for this socket
java.net.SocketImpl#getFileDescriptor()->FileDescriptor:::Returns the value of this socket's {@code fd} field.
java.net.SocketImpl#getInetAddress()->InetAddress:::Returns the value of this socket's {@code address} field.
java.net.SocketImpl#getPort()->int:::Returns the value of this socket's {@code port} field.
java.net.SocketImpl#supportsUrgentData()->boolean:::Returns whether or not this SocketImpl supports sending  urgent data
java.net.SocketImpl#sendUrgentData(int)->void:::Send one byte of urgent data on the socket
java.net.SocketImpl#getLocalPort()->int:::Returns the value of this socket's {@code localport} field.
java.net.SocketImpl#setSocket(Socket)->void:::
java.net.SocketImpl#getSocket()->Socket:::
java.net.SocketImpl#setServerSocket(ServerSocket)->void:::
java.net.SocketImpl#getServerSocket()->ServerSocket:::
java.net.SocketImpl#toString()->String:::Returns the address and port of this socket as a {@code String}.
java.net.SocketImpl#reset()->void:::
java.net.SocketImpl#setPerformancePreferences(int, int, int)->void:::Sets performance preferences for this socket
java.net.SocketImpl#setOption(SocketOption<T>, T)->void:::Called to set a socket option.
java.net.SocketImpl#getOption(SocketOption<T>)->T:::Called to get a socket option.
java.net.SocketImpl#supportedOptions()->Set<SocketOption<?>>:::Returns a set of SocketOptions supported by this impl  and by this impl's socket (Socket or ServerSocket)
java.net.SocketImplFactory#createSocketImpl()->SocketImpl:::Creates a new {@code SocketImpl} instance.
java.net.SocketInputStream#getChannel()->FileChannel:::Returns the unique {@link java.nio.channels.FileChannel FileChannel}  object associated with this file input stream.</p>    The {@code getChannel} method of {@code SocketInputStream}  returns {@code null} since it is a socket based stream.</p>
java.net.SocketInputStream#read(byte[])->int:::Reads into a byte array data from the socket.
java.net.SocketInputStream#read(byte[], int, int)->int:::Reads into a byte array <i>b</i> at offset <i>off</i>,  <i>length</i> bytes of data.
java.net.SocketInputStream#read(byte[], int, int, int)->int:::
java.net.SocketInputStream#read()->int:::Reads a single byte from the socket.
java.net.SocketInputStream#skip(long)->long:::Skips n bytes of input.
java.net.SocketInputStream#available()->int:::Returns the number of bytes that can be read without blocking.
java.net.SocketInputStream#close()->void:::
java.net.SocketInputStream#setEOF(boolean)->void:::
java.net.SocketInputStream#finalize()->void:::Overrides finalize, the fd is closed by the Socket.
java.net.SocketOption#name()->String:::Returns the name of the socket option.
java.net.SocketOption#type()->Class<T>:::Returns the type of the socket option value.
java.net.SocketOptions#setOption(int, Object)->void:::Enable/disable the option specified by <I>optID</I>
java.net.SocketOptions#getOption(int)->Object:::Fetch the value of an option
java.net.SocketOutputStream#getChannel()->FileChannel:::Returns the unique {@link java.nio.channels.FileChannel FileChannel}  object associated with this file output stream
java.net.SocketOutputStream#write(int)->void:::Writes a byte to the socket.
java.net.SocketOutputStream#write(byte[])->void:::Writes the contents of the buffer <i>b</i> to the socket.
java.net.SocketOutputStream#write(byte[], int, int)->void:::Writes <i>length</i> bytes from buffer <i>b</i> starting at  offset <i>len</i>.
java.net.SocketOutputStream#close()->void:::
java.net.SocketOutputStream#finalize()->void:::Overrides finalize, the fd is closed by the Socket.
java.net.SocketPermission#getCanonName()->void:::attempt to get the fully qualified domain name
java.net.SocketPermission#getIP()->void:::get IP addresses
java.net.SocketPermission#implies(Permission)->boolean:::Checks if this socket permission object "implies" the  specified permission
java.net.SocketPermission#impliesIgnoreMask(SocketPermission)->boolean:::Checks if the incoming Permission's action are a proper subset of  the this object's actions
java.net.SocketPermission#equals(Object)->boolean:::Checks two SocketPermission objects for equality.
java.net.SocketPermission#hashCode()->int:::Returns the hash code value for this object.
java.net.SocketPermission#getMask()->int:::
java.net.SocketPermission#getActions()->String:::Returns the canonical string representation of the actions
java.net.SocketPermission#newPermissionCollection()->PermissionCollection:::Returns a new PermissionCollection object for storing SocketPermission  objects
java.net.SocketPermissionCollection#add(Permission)->void:::Adds a permission to the SocketPermissions
java.net.SocketPermissionCollection#implies(Permission)->boolean:::Check and see if this collection of permissions implies the permissions  expressed in "permission".
java.net.SocketPermissionCollection#elements()->Enumeration<Permission>:::Returns an enumeration of all the SocketPermission objects in the  container.
java.net.SocksSocketImpl#setV4()->void:::
java.net.SocksSocketImpl#connect(SocketAddress, int)->void:::Connects the Socks Socket to the specified endpoint
java.net.SocksSocketImpl#socksBind(InetSocketAddress)->void:::Sends the Bind request to the SOCKS proxy
java.net.SocksSocketImpl#acceptFrom(SocketImpl, InetSocketAddress)->void:::Accepts a connection from a specific host.
java.net.SocksSocketImpl#getInetAddress()->InetAddress:::Returns the value of this socket's {@code address} field.
java.net.SocksSocketImpl#getPort()->int:::Returns the value of this socket's {@code port} field.
java.net.SocksSocketImpl#getLocalPort()->int:::
java.net.SocksSocketImpl#close()->void:::
java.net.StandardSocketOptions.StdSocketOption#name()->String:::
java.net.StandardSocketOptions.StdSocketOption#type()->Class<T>:::
java.net.StandardSocketOptions.StdSocketOption#toString()->String:::
java.net.TwoStacksPlainDatagramSocketImpl#create()->void:::
java.net.TwoStacksPlainDatagramSocketImpl#bind(int, InetAddress)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#bind0(int, InetAddress)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#receive(DatagramPacket)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#getOption(int)->Object:::
java.net.TwoStacksPlainDatagramSocketImpl#socketSetOption(int, Object)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#isClosed()->boolean:::
java.net.TwoStacksPlainDatagramSocketImpl#close()->void:::
java.net.TwoStacksPlainDatagramSocketImpl#bind0(int, InetAddress, boolean)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#send(DatagramPacket)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#peek(InetAddress)->int:::
java.net.TwoStacksPlainDatagramSocketImpl#peekData(DatagramPacket)->int:::
java.net.TwoStacksPlainDatagramSocketImpl#receive0(DatagramPacket)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#setTimeToLive(int)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#getTimeToLive()->int:::
java.net.TwoStacksPlainDatagramSocketImpl#setTTL(byte)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#getTTL()->byte:::
java.net.TwoStacksPlainDatagramSocketImpl#join(InetAddress, NetworkInterface)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#leave(InetAddress, NetworkInterface)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#datagramSocketCreate()->void:::
java.net.TwoStacksPlainDatagramSocketImpl#datagramSocketClose()->void:::
java.net.TwoStacksPlainDatagramSocketImpl#socketNativeSetOption(int, Object)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#socketGetOption(int)->Object:::
java.net.TwoStacksPlainDatagramSocketImpl#connect0(InetAddress, int)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#socketLocalAddress(int)->Object:::
java.net.TwoStacksPlainDatagramSocketImpl#disconnect0(int)->void:::
java.net.TwoStacksPlainDatagramSocketImpl#dataAvailable()->int:::
java.net.URI#create(String)->URI:::Creates a URI by parsing the given string
java.net.URI#parseServerAuthority()->URI:::Attempts to parse this URI's authority component, if defined, into  user-information, host, and port components
java.net.URI#normalize()->URI:::Normalizes this URI's path
java.net.URI#resolve(URI)->URI:::Resolves the given URI against this URI
java.net.URI#resolve(String)->URI:::Constructs a new URI by parsing the given string and then resolving it  against this URI
java.net.URI#relativize(URI)->URI:::Relativizes the given URI against this URI
java.net.URI#toURL()->URL:::Constructs a URL from this URI
java.net.URI#getScheme()->String:::Returns the scheme component of this URI
java.net.URI#isAbsolute()->boolean:::Tells whether or not this URI is absolute
java.net.URI#isOpaque()->boolean:::Tells whether or not this URI is opaque
java.net.URI#getRawSchemeSpecificPart()->String:::Returns the raw scheme-specific part of this URI
java.net.URI#getSchemeSpecificPart()->String:::Returns the decoded scheme-specific part of this URI
java.net.URI#getRawAuthority()->String:::Returns the raw authority component of this URI
java.net.URI#getAuthority()->String:::Returns the decoded authority component of this URI
java.net.URI#getRawUserInfo()->String:::Returns the raw user-information component of this URI
java.net.URI#getUserInfo()->String:::Returns the decoded user-information component of this URI
java.net.URI#getHost()->String:::Returns the host component of this URI
java.net.URI#getPort()->int:::Returns the port number of this URI
java.net.URI#getRawPath()->String:::Returns the raw path component of this URI
java.net.URI#getPath()->String:::Returns the decoded path component of this URI
java.net.URI#getRawQuery()->String:::Returns the raw query component of this URI
java.net.URI#getQuery()->String:::Returns the decoded query component of this URI
java.net.URI#getRawFragment()->String:::Returns the raw fragment component of this URI
java.net.URI#getFragment()->String:::Returns the decoded fragment component of this URI
java.net.URI#equals(Object)->boolean:::Tests this URI for equality with another object
java.net.URI#hashCode()->int:::Returns a hash-code value for this URI
java.net.URI#compareTo(URI)->int:::Compares this URI to another object, which must be a URI
java.net.URI#toString()->String:::Returns the content of this URI as a string
java.net.URI#toASCIIString()->String:::Returns the content of this URI as a US-ASCII string
java.net.URI.Parser#parse(boolean)->void:::
java.net.URISyntaxException#getInput()->String:::Returns the input string.
java.net.URISyntaxException#getReason()->String:::Returns a string explaining why the input string could not be parsed.
java.net.URISyntaxException#getIndex()->int:::Returns an index into the input string of the position at which the  parse error occurred, or {@code -1} if this position is not known.
java.net.URISyntaxException#getMessage()->String:::Returns a string describing the parse error
java.net.URL#fromURI(URI)->URL:::Creates a URL from a URI, as if by invoking {@code uri.toURL()}.
java.net.URL#set(String, String, int, String, String)->void:::Sets the fields of the URL
java.net.URL#set(String, String, int, String, String, String, String, String)->void:::Sets the specified 8 fields of the URL
java.net.URL#getQuery()->String:::Gets the query part of this {@code URL}.
java.net.URL#getPath()->String:::Gets the path part of this {@code URL}.
java.net.URL#getUserInfo()->String:::Gets the userInfo part of this {@code URL}.
java.net.URL#getAuthority()->String:::Gets the authority part of this {@code URL}.
java.net.URL#getPort()->int:::Gets the port number of this {@code URL}.
java.net.URL#getDefaultPort()->int:::Gets the default port number of the protocol associated  with this {@code URL}
java.net.URL#getProtocol()->String:::Gets the protocol name of this {@code URL}.
java.net.URL#getHost()->String:::Gets the host name of this {@code URL}, if applicable
java.net.URL#getFile()->String:::Gets the file name of this {@code URL}
java.net.URL#getRef()->String:::Gets the anchor (also known as the "reference") of this  {@code URL}.
java.net.URL#equals(Object)->boolean:::Compares this URL for equality with another object.<p>    If the given object is not a URL then this method immediately returns  {@code false}.<p>    Two URL objects are equal if they have the same protocol, reference  equivalent hosts, have the same port number on the host, and the same  file and fragment of the file.<p>    Two hosts are considered equivalent if both host names can be resolved  into the same IP addresses; else if either host name can't be  resolved, the host names must be equal without regard to case; or both  host names equal to null.<p>    Since hosts comparison requires name resolution, this operation is a  blocking operation
java.net.URL#hashCode()->int:::Creates an integer suitable for hash table indexing.<p>    The hash code is based upon all the URL components relevant for URL  comparison
java.net.URL#sameFile(URL)->boolean:::Compares two URLs, excluding the fragment component.<p>    Returns {@code true} if this {@code URL} and the  {@code other} argument are equal without taking the  fragment component into consideration.
java.net.URL#toString()->String:::Constructs a string representation of this {@code URL}
java.net.URL#toExternalForm()->String:::Constructs a string representation of this {@code URL}
java.net.URL#toURI()->URI:::Returns a {@link java.net.URI} equivalent to this URL
java.net.URL#openConnection()->URLConnection:::Returns a {@link java.net.URLConnection URLConnection} instance that  represents a connection to the remote object referred to by the  {@code URL}
java.net.URL#openConnection(Proxy)->URLConnection:::Same as {@link #openConnection()}, except that the connection will be  made through the specified proxy; Protocol handlers that do not  support proxing will ignore the proxy parameter and make a  normal connection
java.net.URL#openStream()->InputStream:::Opens a connection to this {@code URL} and returns an  {@code InputStream} for reading from that connection
java.net.URL#getContent()->Object:::Gets the contents of this URL
java.net.URL#getContent(Class<?>[])->Object:::Gets the contents of this URL
java.net.URL#setURLStreamHandlerFactory(URLStreamHandlerFactory)->void:::Sets an application's {@code URLStreamHandlerFactory}
java.net.URL.DefaultFactory#createURLStreamHandler(String)->URLStreamHandler:::
java.net.URL#toLowerCase(String)->String:::Returns the protocol in lower case
java.net.URL#isOverrideable(String)->boolean:::Non-overrideable protocols: "jrt" and "file"    Character-based comparison for performance reasons; also ensures  case-insensitive comparison in a locale-independent fashion.
java.net.URL#getURLStreamHandler(String)->URLStreamHandler:::Returns the Stream Handler.
java.net.URL#isBuiltinStreamHandler(URLStreamHandler)->boolean:::
java.net.UrlDeserializedState#getProtocol()->String:::
java.net.UrlDeserializedState#getHost()->String:::
java.net.UrlDeserializedState#getAuthority()->String:::
java.net.UrlDeserializedState#getPort()->int:::
java.net.UrlDeserializedState#getFile()->String:::
java.net.UrlDeserializedState#getRef()->String:::
java.net.UrlDeserializedState#getHashCode()->int:::
java.net.UrlDeserializedState#reconstituteUrlString()->String:::
java.net.URLClassLoader#getResourceAsStream(String)->InputStream:::Returns an input stream for reading the specified resource
java.net.URLClassLoader#close()->void:::Closes this URLClassLoader, so that it can no longer be used to load  new classes or resources that are defined by this loader
java.net.URLClassLoader#addURL(URL)->void:::Appends the specified URL to the list of URLs to search for  classes and resources
java.net.URLClassLoader#getURLs()->URL[]:::Returns the search path of URLs for loading classes and resources
java.net.URLClassLoader#findClass(String)->Class<?>:::Finds and loads the class with the specified name from the URL search  path
java.net.URLClassLoader#definePackage(String, Manifest, URL)->Package:::Defines a new package by name in this {@code URLClassLoader}
java.net.URLClassLoader#findResource(String)->URL:::Finds the resource with the specified name on the URL search path.
java.net.URLClassLoader#findResources(String)->Enumeration<URL>:::Returns an Enumeration of URLs representing all of the resources  on the URL search path having the specified name.
java.net.URLClassLoader#getPermissions(CodeSource)->PermissionCollection:::Returns the permissions for the given codesource object
java.net.URLClassLoader#newInstance(URL[], ClassLoader)->URLClassLoader:::Creates a new instance of URLClassLoader for the specified  URLs and parent class loader
java.net.URLClassLoader#newInstance(URL[])->URLClassLoader:::Creates a new instance of URLClassLoader for the specified  URLs and default parent class loader
java.net.FactoryURLClassLoader#loadClass(String, boolean)->Class<?>:::
java.net.URLConnection#getFileNameMap()->FileNameMap:::Loads filename map (a mimetable) from a data file
java.net.URLConnection#setFileNameMap(FileNameMap)->void:::Sets the FileNameMap
java.net.URLConnection#connect()->void:::Opens a communications link to the resource referenced by this  URL, if such a connection has not already been established
java.net.URLConnection#setConnectTimeout(int)->void:::Sets a specified timeout value, in milliseconds, to be used  when opening a communications link to the resource referenced  by this URLConnection
java.net.URLConnection#getConnectTimeout()->int:::Returns setting for connect timeout
java.net.URLConnection#setReadTimeout(int)->void:::Sets the read timeout to a specified timeout, in  milliseconds
java.net.URLConnection#getReadTimeout()->int:::Returns setting for read timeout
java.net.URLConnection#getURL()->URL:::Returns the value of this {@code URLConnection}'s {@code URL}  field.
java.net.URLConnection#getContentLength()->int:::Returns the value of the {@code content-length} header field
java.net.URLConnection#getContentLengthLong()->long:::Returns the value of the {@code content-length} header field as a  long.
java.net.URLConnection#getContentType()->String:::Returns the value of the {@code content-type} header field.
java.net.URLConnection#getContentEncoding()->String:::Returns the value of the {@code content-encoding} header field.
java.net.URLConnection#getExpiration()->long:::Returns the value of the {@code expires} header field.
java.net.URLConnection#getDate()->long:::Returns the value of the {@code date} header field.
java.net.URLConnection#getLastModified()->long:::Returns the value of the {@code last-modified} header field
java.net.URLConnection#getHeaderField(String)->String:::Returns the value of the named header field
java.net.URLConnection#List<String>> getHeaderFields()->Map<String,:::Returns an unmodifiable Map of the header fields
java.net.URLConnection#getHeaderFieldInt(String, int)->int:::Returns the value of the named field parsed as a number
java.net.URLConnection#getHeaderFieldLong(String, long)->long:::Returns the value of the named field parsed as a number
java.net.URLConnection#getHeaderFieldDate(String, long)->long:::Returns the value of the named field parsed as date
java.net.URLConnection#getHeaderFieldKey(int)->String:::Returns the key for the {@code n}<sup>th</sup> header field
java.net.URLConnection#getHeaderField(int)->String:::Returns the value for the {@code n}<sup>th</sup> header field
java.net.URLConnection#getContent()->Object:::Retrieves the contents of this URL connection
java.net.URLConnection#getContent(Class<?>[])->Object:::Retrieves the contents of this URL connection.
java.net.URLConnection#getPermission()->Permission:::Returns a permission object representing the permission  necessary to make the connection represented by this  object
java.net.URLConnection#getInputStream()->InputStream:::Returns an input stream that reads from this open connection
java.net.URLConnection#getOutputStream()->OutputStream:::Returns an output stream that writes to this connection.
java.net.URLConnection#toString()->String:::Returns a {@code String} representation of this URL connection.
java.net.URLConnection#setDoInput(boolean)->void:::Sets the value of the {@code doInput} field for this  {@code URLConnection} to the specified value
java.net.URLConnection#getDoInput()->boolean:::Returns the value of this {@code URLConnection}'s  {@code doInput} flag.
java.net.URLConnection#setDoOutput(boolean)->void:::Sets the value of the {@code doOutput} field for this  {@code URLConnection} to the specified value
java.net.URLConnection#getDoOutput()->boolean:::Returns the value of this {@code URLConnection}'s  {@code doOutput} flag.
java.net.URLConnection#setAllowUserInteraction(boolean)->void:::Set the value of the {@code allowUserInteraction} field of  this {@code URLConnection}.
java.net.URLConnection#getAllowUserInteraction()->boolean:::Returns the value of the {@code allowUserInteraction} field for  this object.
java.net.URLConnection#setDefaultAllowUserInteraction(boolean)->void:::Sets the default value of the  {@code allowUserInteraction} field for all future  {@code URLConnection} objects to the specified value.
java.net.URLConnection#getDefaultAllowUserInteraction()->boolean:::Returns the default value of the {@code allowUserInteraction}  field
java.net.URLConnection#setUseCaches(boolean)->void:::Sets the value of the {@code useCaches} field of this  {@code URLConnection} to the specified value
java.net.URLConnection#getUseCaches()->boolean:::Returns the value of this {@code URLConnection}'s  {@code useCaches} field.
java.net.URLConnection#setIfModifiedSince(long)->void:::Sets the value of the {@code ifModifiedSince} field of  this {@code URLConnection} to the specified value.
java.net.URLConnection#getIfModifiedSince()->long:::Returns the value of this object's {@code ifModifiedSince} field.
java.net.URLConnection#getDefaultUseCaches()->boolean:::Returns the default value of a {@code URLConnection}'s  {@code useCaches} flag
java.net.URLConnection#setDefaultUseCaches(boolean)->void:::Sets the default value of the {@code useCaches} field to the  specified value
java.net.URLConnection#setDefaultUseCaches(String, boolean)->void:::Sets the default value of the {@code useCaches} field for the named  protocol to the given value
java.net.URLConnection#getDefaultUseCaches(String)->boolean:::Returns the default value of the {@code useCaches} flag for the given protocol
java.net.URLConnection#setRequestProperty(String, String)->void:::Sets the general request property
java.net.URLConnection#addRequestProperty(String, String)->void:::Adds a general request property specified by a  key-value pair
java.net.URLConnection#getRequestProperty(String)->String:::Returns the value of the named general request property for this  connection.
java.net.URLConnection#List<String>> getRequestProperties()->Map<String,:::Returns an unmodifiable Map of general request  properties for this connection
java.net.URLConnection#setDefaultRequestProperty(String, String)->void:::Sets the default value of a general request property
java.net.URLConnection#getDefaultRequestProperty(String)->String:::Returns the value of the default request property
java.net.URLConnection#setContentHandlerFactory(ContentHandlerFactory)->void:::Sets the {@code ContentHandlerFactory} of an  application
java.net.URLConnection#guessContentTypeFromName(String)->String:::Tries to determine the content type of an object, based  on the specified "file" component of a URL
java.net.URLConnection#guessContentTypeFromStream(InputStream)->String:::Tries to determine the type of an input stream based on the  characters at the beginning of the input stream
java.net.UnknownContentHandler#getContent(URLConnection)->Object:::
java.net.URLDecoder#decode(String)->String:::Decodes a {@code x-www-form-urlencoded} string
java.net.URLDecoder#decode(String, String)->String:::Decodes an {@code application/x-www-form-urlencoded} string using  a specific encoding scheme
java.net.URLDecoder#decode(String, Charset)->String:::Decodes an {@code application/x-www-form-urlencoded} string using  a specific {@linkplain java.nio.charset.Charset Charset}
java.net.URLEncoder#encode(String)->String:::Translates a string into {@code x-www-form-urlencoded}  format
java.net.URLEncoder#encode(String, String)->String:::Translates a string into {@code application/x-www-form-urlencoded}  format using a specific encoding scheme
java.net.URLEncoder#encode(String, Charset)->String:::Translates a string into {@code application/x-www-form-urlencoded}  format using a specific {@linkplain java.nio.charset.Charset Charset}
java.net.URLPermission#getActions()->String:::Returns the normalized method list and request  header list, in the form:  <pre>       "method-names : header-names"  </pre>  <p>  where method-names is the list of methods separated by commas  and header-names is the list of permitted headers separated by commas
java.net.URLPermission#implies(Permission)->boolean:::Checks if this URLPermission implies the given permission
java.net.URLPermission#equals(Object)->boolean:::Returns true if, this.getActions().equals(p.getActions())  and p's url equals this's url
java.net.URLPermission#hashCode()->int:::Returns a hashcode calculated from the hashcode of the  actions String and the url string.
java.net.URLPermission.Authority#implies(Authority)->boolean:::
java.net.URLPermission.Authority#equals(Authority)->boolean:::
java.net.URLPermission.Authority#hashCode()->int:::
java.net.URLStreamHandler#openConnection(URL)->URLConnection:::Opens a connection to the object referenced by the  {@code URL} argument
java.net.URLStreamHandler#openConnection(URL, Proxy)->URLConnection:::Same as openConnection(URL), except that the connection will be  made through the specified proxy; Protocol handlers that do not  support proxying will ignore the proxy parameter and make a  normal connection
java.net.URLStreamHandler#parseURL(URL, String, int, int)->void:::Parses the string representation of a {@code URL} into a  {@code URL} object
java.net.URLStreamHandler#getDefaultPort()->int:::Returns the default port for a URL parsed by this handler
java.net.URLStreamHandler#equals(URL, URL)->boolean:::Provides the default equals calculation
java.net.URLStreamHandler#hashCode(URL)->int:::Provides the default hash calculation
java.net.URLStreamHandler#sameFile(URL, URL)->boolean:::Compare two urls to see whether they refer to the same file,  i.e., having the same protocol, host, port, and path
java.net.URLStreamHandler#getHostAddress(URL)->InetAddress:::Get the IP address of our host
java.net.URLStreamHandler#hostsEqual(URL, URL)->boolean:::Compares the host components of two URLs.
java.net.URLStreamHandler#toExternalForm(URL)->String:::Converts a {@code URL} of a specific protocol to a  {@code String}.
java.net.URLStreamHandler#setURL(URL, String, String, int, String, String, String, String, String)->void:::Sets the fields of the {@code URL} argument to the indicated values
java.net.URLStreamHandler#setURL(URL, String, String, int, String, String)->void:::Sets the fields of the {@code URL} argument to the indicated values
java.net.URLStreamHandlerFactory#createURLStreamHandler(String)->URLStreamHandler:::Creates a new {@code URLStreamHandler} instance with the specified  protocol.

AbstractPlainDatagramSocketImpl#isReusePortAvailable():::Tells whether SO_REUSEPORT is supported.:::if->isReusePortAvailable0->return
AbstractPlainDatagramSocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket):::options->if->isReusePortAvailable->new->HashSet<>->options->super->supportedOptions->addAll->options->add->Collections->unmodifiableSet->else->super->supportedOptions->return
AbstractPlainDatagramSocketImpl#create():::Creates a datagram socket:::ResourceManager->beforeUdpCreate->new->FileDescriptor->try->datagramSocketCreate->SocketCleanable->register->catch->ResourceManager->afterUdpClose->throw->finally
AbstractPlainDatagramSocketImpl#bind(int, InetAddress):::Binds a datagram socket to a local port.:::bind0
AbstractPlainDatagramSocketImpl#send(DatagramPacket):::Sends a datagram packet:::
AbstractPlainDatagramSocketImpl#connect(InetAddress, int):::Connects a datagram socket to a remote destination:::connect0
AbstractPlainDatagramSocketImpl#disconnect():::Disconnects a previously connected socket:::connectedAddress->holder->getFamily->disconnect0
AbstractPlainDatagramSocketImpl#peek(InetAddress):::Peek at the packet to see who it is from.:::
AbstractPlainDatagramSocketImpl#receive(DatagramPacket):::Receive the datagram packet.:::receive0
AbstractPlainDatagramSocketImpl#setTimeToLive(int):::Set the TTL (time-to-live) option.:::
AbstractPlainDatagramSocketImpl#getTimeToLive():::Get the TTL (time-to-live) option.:::
AbstractPlainDatagramSocketImpl#setTTL(byte):::Set the TTL (time-to-live) option.:::
AbstractPlainDatagramSocketImpl#getTTL():::Get the TTL (time-to-live) option.:::
AbstractPlainDatagramSocketImpl#join(InetAddress):::Join the multicast group.:::join
AbstractPlainDatagramSocketImpl#leave(InetAddress):::Leave the multicast group.:::leave
AbstractPlainDatagramSocketImpl#leaveGroup(SocketAddress, NetworkInterface):::Leave the multicast group.:::if->throw->new->IllegalArgumentException->getAddress->leave
AbstractPlainDatagramSocketImpl#close():::Close the socket.:::if->SocketCleanable->unregister->datagramSocketClose->ResourceManager->afterUdpClose
AbstractPlainSocketImpl#isReusePortAvailable():::Tells whether SO_REUSEPORT is supported.:::if->isReusePortAvailable0->return
AbstractPlainSocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket):::options->if->isReusePortAvailable->new->HashSet<>->options->super->supportedOptions->addAll->options->add->Collections->unmodifiableSet->else->super->supportedOptions->return
AbstractPlainSocketImpl#create(boolean):::Creates a socket with a boolean that specifies whether this is a stream socket (true) or an unconnected UDP socket (false).:::if->ResourceManager->beforeUdpCreate->new->FileDescriptor->try->socketCreate->SocketCleanable->register->catch->ResourceManager->afterUdpClose->throw->finally->else->new->FileDescriptor->socketCreate->SocketCleanable->register->if->socket->setCreated->if->serverSocket->setCreated
AbstractPlainSocketImpl#connect(String, int):::Creates a socket and connects it to the specified port on the specified host.:::connected->try->address->InetAddress->getByName->connectToAddress->catch->finally->if->try->close->catch->finally
AbstractPlainSocketImpl#connect(InetAddress, int):::Creates a socket and connects it to the specified address on the specified port.:::try->connectToAddress->return->catch->close->throw->finally
AbstractPlainSocketImpl#connect(SocketAddress, int):::Creates a socket and connects it to the specified address on the specified port.:::connected->try->if->throw->new->IllegalArgumentException->addr->if->addr->isUnresolved->throw->addr->getHostName->new->UnknownHostException->addr->getPort->addr->getAddress->connectToAddress->catch->finally->if->try->close->catch->finally
AbstractPlainSocketImpl#bind(InetAddress, int):::Binds the socket to the specified address of the specified local port.:::synchronized->if->socket->isBound->NetHooks->beforeTcpBind->socketBind->if->socket->setBound->if->serverSocket->setBound
AbstractPlainSocketImpl#listen(int):::Listens, for a specified amount of time, for connections.:::socketListen
AbstractPlainSocketImpl#accept(SocketImpl):::Accepts connections.:::acquireFD->try->socketAccept->catch->finally->releaseFD
AbstractPlainSocketImpl#getInputStream():::Gets an InputStream for this socket.:::synchronized->if->isClosedOrPending->throw->new->IOException->if->throw->new->IOException->if->new->SocketInputStream->return
AbstractPlainSocketImpl#getOutputStream():::Gets an OutputStream for this socket.:::synchronized->if->isClosedOrPending->throw->new->IOException->if->throw->new->IOException->if->new->SocketOutputStream->return
AbstractPlainSocketImpl#available():::Returns the number of bytes that can be read without blocking.:::if->isClosedOrPending->throw->new->IOException->if->isConnectionReset->return->n->try->socketAvailable->catch->setConnectionReset->finally->return
AbstractPlainSocketImpl#close():::Closes the socket.:::synchronized->if->if->if->return->try->socketPreClose->catch->finally->socketClose->return->else->if->socketPreClose
AbstractPlainSocketImpl#shutdownInput():::Shutdown read-half of the socket connection;:::if->socketShutdown->if->socketInputStream->setEOF
AbstractPlainSocketImpl#shutdownOutput():::Shutdown write-half of the socket connection;:::if->socketShutdown
Authenticator#setDefault(Authenticator):::Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication:::sm->System->getSecurityManager->if->setDefaultPermission->new->NetPermission->sm->checkPermission
Authenticator#getDefault():::Gets the default authenticator:::sm->System->getSecurityManager->if->requestPermission->new->NetPermission->sm->checkPermission->return
Authenticator#requestPasswordAuthentication(InetAddress, int, String, String, String):::Ask the authenticator that has been registered with the system for a password:::sm->System->getSecurityManager->if->requestPermission->new->NetPermission->sm->checkPermission->a->if->return->else->synchronized->a->reset->return->a->getPasswordAuthentication
Authenticator#requestPasswordAuthentication(String, InetAddress, int, String, String, String):::Ask the authenticator that has been registered with the system for a password:::sm->System->getSecurityManager->if->requestPermission->new->NetPermission->sm->checkPermission->a->if->return->else->synchronized->a->reset->return->a->getPasswordAuthentication
Authenticator#requestPasswordAuthentication(String, InetAddress, int, String, String, String, URL, RequestorType):::Ask the authenticator that has been registered with the system for a password:::sm->System->getSecurityManager->if->requestPermission->new->NetPermission->sm->checkPermission->a->if->return->else->synchronized->a->reset->return->a->getPasswordAuthentication
Authenticator#requestPasswordAuthentication(Authenticator, String, InetAddress, int, String, String, String, URL, RequestorType):::Ask the given authenticator for a password:::sm->System->getSecurityManager->if->requestPermission->new->NetPermission->sm->checkPermission->a->if->return->else->return->a->requestPasswordAuthenticationInstance
Authenticator#requestPasswordAuthenticationInstance(String, InetAddress, int, String, String, String, URL, RequestorType):::Ask this authenticator for a password.:::synchronized->this->reset->return->this->getPasswordAuthentication
Authenticator#getRequestingHost():::Gets the hostname of the site or proxy requesting authentication, or null if not available.:::return
Authenticator#getRequestingSite():::Gets the InetAddress of the site requesting authorization, or null if not available.:::return
Authenticator#getRequestingPort():::Gets the port number for the requested connection.:::return
Authenticator#getRequestingProtocol():::Give the protocol that's requesting the connection:::return
Authenticator#getRequestingPrompt():::Gets the prompt string given by the requestor.:::return
Authenticator#getRequestingScheme():::Gets the scheme of the requestor (the HTTP scheme for an HTTP firewall, for example).:::return
Authenticator#getPasswordAuthentication():::Called when password authorization is needed:::return
Authenticator#getRequestingURL():::Returns the URL that resulted in this request for authentication.:::return
Authenticator#getRequestorType():::Returns whether the requestor is a Proxy or a Server.:::return
CacheRequest#getBody():::Returns an OutputStream to which the response body can be written.:::
CacheRequest#abort():::Aborts the attempt to cache the response:::
CacheResponse#getHeaders():::Returns the response headers as a Map.:::
CacheResponse#getBody():::Returns the response body as an InputStream.:::
ContentHandler#getContent(URLConnection):::Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object from it.:::
ContentHandler#getContent(URLConnection, Class[]):::Given a URL connect stream positioned at the beginning of the representation of an object, this method reads that stream and creates an object that matches one of the types specified:::obj->getContent->foreach->if->c->isInstance->return->return
ContentHandlerFactory#createContentHandler(String):::Creates a new ContentHandler to read an object from a URLStreamHandler.:::
CookieHandler#getDefault():::Gets the system-wide cookie handler.:::sm->System->getSecurityManager->if->sm->checkPermission->return
CookieHandler#setDefault(CookieHandler):::Sets (or unsets) the system-wide cookie handler:::sm->System->getSecurityManager->if->sm->checkPermission
CookieHandler#get(URI, Map>):::Gets all the applicable cookies from a cookie cache for the specified uri in the request header:::
CookieHandler#put(URI, Map>):::Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache.:::
CookieManager#setCookiePolicy(CookiePolicy):::To set the cookie policy of this cookie manager:::if
CookieManager#getCookieStore():::To retrieve current cookie store.:::return
CookiePolicy#shouldAccept(URI, HttpCookie):::Will be called to see whether or not this cookie should be accepted.:::
CookieStore#add(URI, HttpCookie):::Adds one HTTP cookie to the store:::
CookieStore#get(URI):::Retrieve cookies associated with given URI, or whose domain matches the given URI:::
CookieStore#getCookies():::Get all not-expired cookies in cookie store.:::
CookieStore#getURIs():::Get all URIs which identify the cookies in this cookie store.:::
CookieStore#remove(URI, HttpCookie):::Remove a cookie from store.:::
CookieStore#removeAll():::Remove all cookies in this cookie store.:::
DatagramPacket#getAddress():::Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received.:::return
DatagramPacket#getPort():::Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received.:::return
DatagramPacket#getData():::Returns the data buffer:::return
DatagramPacket#getOffset():::Returns the offset of the data to be sent or the offset of the data received.:::return
DatagramPacket#getLength():::Returns the length of the data to be sent or the length of the data received.:::return
DatagramPacket#setData(byte[], int, int):::Set the data buffer for this packet:::if->throw->new->IllegalArgumentException
DatagramPacket#setAddress(InetAddress):::Sets the IP address of the machine to which this datagram is being sent.:::
DatagramPacket#setPort(int):::Sets the port number on the remote host to which this datagram is being sent.:::if->throw->new->IllegalArgumentException
DatagramPacket#setSocketAddress(SocketAddress):::Sets the SocketAddress (usually IP address + port number) of the remote host to which this datagram is being sent.:::if->throw->new->IllegalArgumentException->addr->if->addr->isUnresolved->throw->new->IllegalArgumentException->addr->getAddress->setAddress->addr->getPort->setPort
DatagramPacket#getSocketAddress():::Gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from.:::return->getAddress->getPort->new->InetSocketAddress
DatagramPacket#setData(byte[]):::Set the data buffer for this packet:::if->throw->new->NullPointerException
DatagramPacket#setLength(int):::Set the length for this packet:::if->throw->new->IllegalArgumentException
DatagramSocket#getImpl():::Get the DatagramSocketImpl attached to this socket, creating it if necessary.:::if->createImpl->return
DatagramSocket#bind(SocketAddress):::Binds this DatagramSocket to a specific address and port:::if->isClosed->throw->new->SocketException->if->isBound->throw->new->SocketException->if->new->InetSocketAddress->if->throw->new->IllegalArgumentException->epoint->if->epoint->isUnresolved->throw->new->SocketException->iaddr->epoint->getAddress->port->epoint->getPort->checkAddress->sec->System->getSecurityManager->if->sec->checkListen->try->getImpl->bind->catch->getImpl->close->throw->finally
DatagramSocket#connect(InetAddress, int):::Connects the socket to a remote address for this socket:::try->connectInternal->catch->throw->new->Error->finally
DatagramSocket#connect(SocketAddress):::Connects this socket to a remote socket address (IP address + port number):::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->epoint->if->epoint->isUnresolved->throw->new->SocketException->epoint->getAddress->epoint->getPort->connectInternal
DatagramSocket#disconnect():::Disconnects the socket:::synchronized->if->isClosed->return->if->impl->disconnect
DatagramSocket#isBound():::Returns the binding state of the socket:::return
DatagramSocket#isConnected():::Returns the connection state of the socket:::return
DatagramSocket#getInetAddress():::Returns the address to which this socket is connected:::return
DatagramSocket#getPort():::Returns the port number to which this socket is connected:::return
DatagramSocket#getRemoteSocketAddress():::Returns the address of the endpoint this socket is connected to, or null if it is unconnected:::if->isConnected->return->return->getInetAddress->getPort->new->InetSocketAddress
DatagramSocket#send(DatagramPacket):::Sends a datagram packet from this socket:::packetAddress->synchronized->if->isClosed->throw->new->SocketException->p->getAddress->checkAddress->if->security->System->getSecurityManager->if->if->p->getAddress->isMulticastAddress->security->p->getAddress->checkMulticast->else->security->p->getAddress->getHostAddress->p->getPort->checkConnect->else->p->getAddress->if->p->setAddress->p->setPort->else->if->packetAddress->equals->p->getPort->throw->new->IllegalArgumentException->if->isBound->new->InetSocketAddress->bind->getImpl->send
DatagramSocket#receive(DatagramPacket):::Receives a datagram packet from this socket:::synchronized->if->isBound->new->InetSocketAddress->bind->if->security->System->getSecurityManager->if->while->peekAd->peekPort->if->peekPacket->new->byteArr->new->DatagramPacket->getImpl->peekData->peekPacket->getAddress->getHostAddress->else->adr->new->InetAddress->getImpl->peek->adr->getHostAddress->try->security->checkAccept->break->catch->tmp->new->byteArr->new->DatagramPacket->getImpl->receive->continue->finally->tmp->if->stop->while->peekAddress->peekPort->if->peekPacket->new->byteArr->new->DatagramPacket->getImpl->peekData->peekPacket->getAddress->else->new->InetAddress->getImpl->peek->if->connectedAddress->equals->new->byteArr->new->DatagramPacket->getImpl->receive->if->if->checkFiltering->else->getImpl->receive->if->checkFiltering
DatagramSocket#getLocalAddress():::Gets the local address to which the socket is bound:::if->isClosed->return->in->try->getImpl->getOption->if->in->isAnyLocalAddress->InetAddress->anyLocalAddress->s->System->getSecurityManager->if->s->in->getHostAddress->checkConnect->catch->InetAddress->anyLocalAddress->finally->return
DatagramSocket#getLocalPort():::Returns the port number on the local host to which this socket is bound.:::if->isClosed->return->try->return->getImpl->getLocalPort->catch->return->finally
DatagramSocket#setSoTimeout(int):::Enable/disable SO_TIMEOUT with the specified timeout, in  milliseconds:::if->isClosed->throw->new->SocketException->getImpl->setOption
DatagramSocket#getSoTimeout():::Retrieve setting for SO_TIMEOUT:::if->isClosed->throw->new->SocketException->if->getImpl->return->o->getImpl->getOption->if->return->intValue->else->return
DatagramSocket#setSendBufferSize(int):::Sets the SO_SNDBUF option to the specified value for this DatagramSocket:::if->throw->new->IllegalArgumentException->if->isClosed->throw->new->SocketException->getImpl->setOption
DatagramSocket#getSendBufferSize():::Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer size used by the platform for output on this DatagramSocket.:::if->isClosed->throw->new->SocketException->result->o->getImpl->getOption->if->intValue->return
DatagramSocket#setReceiveBufferSize(int):::Sets the SO_RCVBUF option to the specified value for this DatagramSocket:::if->throw->new->IllegalArgumentException->if->isClosed->throw->new->SocketException->getImpl->setOption
DatagramSocket#getReceiveBufferSize():::Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer size used by the platform for input on this DatagramSocket.:::if->isClosed->throw->new->SocketException->result->o->getImpl->getOption->if->intValue->return
DatagramSocket#setReuseAddress(boolean):::Enable/disable the SO_REUSEADDR socket option:::if->isClosed->throw->new->SocketException->if->getImpl->setOption->else->getImpl->Boolean->valueOf->setOption
DatagramSocket#getReuseAddress():::Tests if SO_REUSEADDR is enabled.:::if->isClosed->throw->new->SocketException->o->getImpl->getOption->return->booleanValue
DatagramSocket#setBroadcast(boolean):::Enable/disable SO_BROADCAST:::if->isClosed->throw->new->SocketException->getImpl->Boolean->valueOf->setOption
DatagramSocket#getBroadcast():::Tests if SO_BROADCAST is enabled.:::if->isClosed->throw->new->SocketException->return->getImpl->getOption->booleanValue
DatagramSocket#setTrafficClass(int):::Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket:::if->throw->new->IllegalArgumentException->if->isClosed->throw->new->SocketException->try->getImpl->setOption->catch->if->isConnected->throw->finally
DatagramSocket#getTrafficClass():::Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket:::if->isClosed->throw->new->SocketException->return->getImpl->getOption->intValue
DatagramSocket#close():::Closes this datagram socket:::synchronized->if->isClosed->return->impl->close
DatagramSocket#isClosed():::Returns whether the socket is closed or not.:::synchronized->return
DatagramSocket#getChannel():::Returns the unique java.nio.channels.DatagramChannel object associated with this datagram socket, if any:::return
DatagramSocket#setDatagramSocketImplFactory(DatagramSocketImplFactory):::Sets the datagram socket implementation factory for the application:::if->throw->new->SocketException->security->System->getSecurityManager->if->security->checkSetFactory
DatagramSocket#setOption(SocketOption, T):::Sets the value of a socket option.:::getImpl->setOption->return
DatagramSocket#getOption(SocketOption):::Returns the value of a socket option.:::return->getImpl->getOption
DatagramSocket#supportedOptions():::Returns a set of the socket options supported by this socket:::synchronized->if->return->try->impl->getImpl->Collections->impl->supportedOptions->unmodifiableSet->catch->Collections->emptySet->finally->return
DatagramSocketImpl#create():::Creates a datagram socket.:::
DatagramSocketImpl#bind(int, InetAddress):::Binds a datagram socket to a local port and address.:::
DatagramSocketImpl#send(DatagramPacket):::Sends a datagram packet:::
DatagramSocketImpl#connect(InetAddress, int):::Connects a datagram socket to a remote destination:::
DatagramSocketImpl#disconnect():::Disconnects a datagram socket from its remote destination.:::
DatagramSocketImpl#peek(InetAddress):::Peek at the packet to see who it is from:::
DatagramSocketImpl#peekData(DatagramPacket):::Peek at the packet to see who it is from:::
DatagramSocketImpl#receive(DatagramPacket):::Receive the datagram packet.:::
DatagramSocketImpl#setTTL(byte):::Set the TTL (time-to-live) option.:::
DatagramSocketImpl#getTTL():::Retrieve the TTL (time-to-live) option.:::
DatagramSocketImpl#setTimeToLive(int):::Set the TTL (time-to-live) option.:::
DatagramSocketImpl#getTimeToLive():::Retrieve the TTL (time-to-live) option.:::
DatagramSocketImpl#join(InetAddress):::Join the multicast group.:::
DatagramSocketImpl#leave(InetAddress):::Leave the multicast group.:::
DatagramSocketImpl#joinGroup(SocketAddress, NetworkInterface):::Join the multicast group.:::
DatagramSocketImpl#leaveGroup(SocketAddress, NetworkInterface):::Leave the multicast group.:::
DatagramSocketImpl#close():::Close the socket.:::
DatagramSocketImpl#getLocalPort():::Gets the local port.:::return
DatagramSocketImpl#getFileDescriptor():::Gets the datagram socket file descriptor.:::return
DatagramSocketImpl#setOption(SocketOption, T):::Called to set a socket option.:::if->setOption->else->if->setOption->else->if->setOption->else->if->supportedOptions->contains->setOption->else->if->setOption->else->if->getDatagramSocket->setOption->else->if->getDatagramSocket->if->throw->new->IllegalArgumentException->setTimeToLive->else->if->getDatagramSocket->setOption->else->throw->new->UnsupportedOperationException
DatagramSocketImpl#getOption(SocketOption):::Called to get a socket option.:::if->return->getOption->else->if->return->getOption->else->if->return->getOption->else->if->supportedOptions->contains->return->getOption->else->if->return->getOption->else->if->getDatagramSocket->return->getOption->else->if->getDatagramSocket->ttl->getTimeToLive->return->else->if->getDatagramSocket->return->getOption->else->throw->new->UnsupportedOperationException
DatagramSocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (DatagramSocket or MulticastSocket):::if->getDatagramSocket->return->else->return
DatagramSocketImplFactory#createDatagramSocketImpl():::Creates a new DatagramSocketImpl instance.:::
DefaultDatagramSocketImplFactory#createDatagramSocketImpl(boolean):::Creates a new DatagramSocketImpl instance.:::if->try->result->prefixImplClass->newInstance->return->catch->throw->new->SocketException->finally->else->if->return->new->DualStackPlainDatagramSocketImpl->else->return->new->TwoStacksPlainDatagramSocketImpl
FileNameMap#getContentTypeFor(String):::Gets the MIME type for the specified file name.:::
HostPortrange#toLowerCase(String):::Convert to lower case, and check that all chars are ascii alphanumeric, '-' or '.' only.:::len->s->length->sb->for->i->return->sb->toString
HostPortrange#wildcard():::returns true if the hostname part started with * hostname returns the remaining part of the host component eg "*.foo.com" -> ".foo.com" or "*" -> "":::return
HttpCookie#parse(String):::Constructs cookies from set-cookie or set-cookie2 header string:::return->parse
HttpCookie#hasExpired():::Reports whether this HTTP cookie has expired or not.:::if->return->if->return->deltaSecond->System->currentTimeMillis->if->return->else->return
HttpCookie#setComment(String):::Specifies a comment that describes a cookie's purpose:::
HttpCookie#getComment():::Returns the comment describing the purpose of this cookie, or null if the cookie has no comment.:::return
HttpCookie#setCommentURL(String):::Specifies a comment URL that describes a cookie's purpose:::
HttpCookie#getCommentURL():::Returns the comment URL describing the purpose of this cookie, or null if the cookie has no comment URL.:::return
HttpCookie#setDiscard(boolean):::Specify whether user agent should discard the cookie unconditionally:::
HttpCookie#getDiscard():::Returns the discard attribute of the cookie:::return
HttpCookie#setPortlist(String):::Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header.:::
HttpCookie#getPortlist():::Returns the port list attribute of the cookie:::return
HttpCookie#setDomain(String):::Specifies the domain within which this cookie should be presented:::if->pattern->toLowerCase->else
HttpCookie#getDomain():::Returns the domain name set for this cookie:::return
HttpCookie#setMaxAge(long):::Sets the maximum age of the cookie in seconds:::
HttpCookie#getMaxAge():::Returns the maximum age of the cookie, specified in seconds:::return
HttpCookie#setPath(String):::Specifies a path for the cookie to which the client should return the cookie:::
HttpCookie#getPath():::Returns the path on the server to which the browser returns this cookie:::return
HttpCookie#setSecure(boolean):::Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL:::
HttpCookie#getSecure():::Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.:::return
HttpCookie#getName():::Returns the name of the cookie:::return
HttpCookie#setValue(String):::Assigns a new value to a cookie after the cookie is created:::
HttpCookie#getValue():::Returns the value of the cookie.:::return
HttpCookie#getVersion():::Returns the version of the protocol this cookie complies with:::return
HttpCookie#setVersion(int):::Sets the version of the cookie protocol this cookie complies with:::if->throw->new->IllegalArgumentException
HttpCookie#isHttpOnly():::Returns true if this cookie contains the HttpOnly attribute:::return
HttpCookie#setHttpOnly(boolean):::Indicates whether the cookie should be considered HTTP Only:::
HttpCookie#domainMatches(String, String):::The utility method to check whether a host name is in a domain or not:::if->return->isLocalDomain->equalsIgnoreCase->embeddedDotInDomain->domain->indexOf->if->domain->indexOf->if->domain->length->return->firstDotInHost->host->indexOf->if->domain->equalsIgnoreCase->return->domainLength->domain->length->lengthDiff->host->length->if->return->host->equalsIgnoreCase->else->if->H->host->substring->D->host->substring->return->H->indexOf->D->equalsIgnoreCase->else->if->return->domain->charAt->host->domain->substring->equalsIgnoreCase->return
HttpCookie#toString():::Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading "Cookie:" token.:::if->getVersion->return->toRFC2965HeaderString->else->return->toNetscapeHeaderString
HttpCookie#equals(Object):::Test the equality of two HTTP cookies:::if->return->if->return->other->return->getName->other->getName->equalsIgnoreCase->getDomain->other->getDomain->equalsIgnoreCase->Objects->getPath->other->getPath->equals
HttpCookie#hashCode():::Returns the hash code of this HTTP cookie:::h1->name->toLowerCase->hashCode->h2->domain->toLowerCase->hashCode->h3->path->hashCode->return
HttpCookie#clone():::Create and return a copy of this object.:::try->return->super->clone->catch->throw->e->getMessage->new->RuntimeException->finally
HttpRetryException#responseCode():::Returns the http response code:::return
HttpRetryException#getReason():::Returns a string explaining why the http request could not be retried.:::return->super->getMessage
HttpRetryException#getLocation():::Returns the value of the Location header field if the error resulted from redirection.:::return
HttpURLConnection#setAuthenticator(Authenticator):::Supplies an java.net.Authenticator Authenticator to be used when authentication is requested through the HTTP protocol for this HttpURLConnection:::throw->this->getClass->new->UnsupportedOperationException
HttpURLConnection#getHeaderFieldKey(int):::Returns the key for the n^th header field:::return
HttpURLConnection#setFixedLengthStreamingMode(int):::This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException
HttpURLConnection#setFixedLengthStreamingMode(long):::This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is known in advance:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException
HttpURLConnection#setChunkedStreamingMode(int):::This method is used to enable streaming of a HTTP request body without internal buffering, when the content length is not known in advance:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException
HttpURLConnection#getHeaderField(int):::Returns the value for the n^th header field:::return
HttpURLConnection#setFollowRedirects(boolean):::Sets whether HTTP redirects  (requests with response code 3xx) should be automatically followed by this class:::sec->System->getSecurityManager->if->sec->checkSetFactory
HttpURLConnection#getFollowRedirects():::Returns a boolean indicating whether or not HTTP redirects (3xx) should be automatically followed.:::return
HttpURLConnection#setInstanceFollowRedirects(boolean):::Sets whether HTTP redirects (requests with response code 3xx) should be automatically followed by this HttpURLConnection instance:::
HttpURLConnection#getInstanceFollowRedirects():::Returns the value of this HttpURLConnection's instanceFollowRedirects field.:::return
HttpURLConnection#setRequestMethod(String):::Set the method for the URL request, one of: <UL>  <LI>GET  <LI>POST  <LI>HEAD  <LI>OPTIONS  <LI>PUT  <LI>DELETE  <LI>TRACE </UL> are legal, subject to protocol restrictions:::if->throw->new->ProtocolException->for->i->throw->new->ProtocolException
HttpURLConnection#getRequestMethod():::Get the request method.:::return
HttpURLConnection#getResponseCode():::Gets the status code from an HTTP response message:::if->return->exc->try->getInputStream->catch->finally->statusLine->getHeaderField->if->if->if->throw->else->throw->return->if->statusLine->startsWith->codePos->statusLine->indexOf->if->phrasePos->statusLine->indexOf->if->statusLine->length->statusLine->substring->if->statusLine->length->try->Integer->statusLine->substring->parseInt->return->catch->finally->return
HttpURLConnection#getResponseMessage():::Gets the HTTP response message, if any, returned along with the response code from a server:::getResponseCode->return
HttpURLConnection#disconnect():::Indicates that other requests to the server are unlikely in the near future:::
HttpURLConnection#usingProxy():::Indicates if the connection is going through a proxy.:::
HttpURLConnection#getPermission():::Returns a SocketPermission object representing the permission necessary to connect to the destination host and port.:::port->url->getPort->host->url->getHost->permission->new->SocketPermission->return
HttpURLConnection#getErrorStream():::Returns the error stream if the connection failed but the server sent useful data nonetheless:::return
IDN#toASCII(String, int):::Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490:::p->q->out->new->StringBuilder->if->isRootLabel->return->while->input->length->searchDots->out->input->substring->toASCIIInternal->append->if->input->length->out->append->return->out->toString
IDN#toASCII(String):::Translates a string from Unicode to ASCII Compatible Encoding (ACE), as defined by the ToASCII operation of RFC 3490:::return->toASCII
IDN#toUnicode(String, int):::Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490:::p->q->out->new->StringBuilder->if->isRootLabel->return->while->input->length->searchDots->out->input->substring->toUnicodeInternal->append->if->input->length->out->append->return->out->toString
IDN#toUnicode(String):::Translates a string from ASCII Compatible Encoding (ACE) to Unicode, as defined by the ToUnicode operation of RFC 3490:::return->toUnicode
Inet4Address#isMulticastAddress():::Utility routine to check if the InetAddress is an IP multicast address:::return->holder->getAddress
Inet4Address#isAnyLocalAddress():::Utility routine to check if the InetAddress is a wildcard address.:::return->holder->getAddress
Inet4Address#isLoopbackAddress():::Utility routine to check if the InetAddress is a loopback address.:::byteAddr->getAddress->return
Inet4Address#isLinkLocalAddress():::Utility routine to check if the InetAddress is an link local address.:::address->holder->getAddress->return
Inet4Address#isSiteLocalAddress():::Utility routine to check if the InetAddress is a site local address.:::address->holder->getAddress->return
Inet4Address#isMCGlobal():::Utility routine to check if the multicast address has global scope.:::byteAddr->getAddress->return
Inet4Address#isMCNodeLocal():::Utility routine to check if the multicast address has node scope.:::return
Inet4Address#isMCLinkLocal():::Utility routine to check if the multicast address has link scope.:::address->holder->getAddress->return
Inet4Address#isMCSiteLocal():::Utility routine to check if the multicast address has site scope.:::address->holder->getAddress->return
Inet4Address#isMCOrgLocal():::Utility routine to check if the multicast address has organization scope.:::address->holder->getAddress->return
Inet4Address#getAddress():::Returns the raw IP address of this InetAddress object:::address->holder->getAddress->addr->new->byteArr->return
Inet4Address#getHostAddress():::Returns the IP address string in textual presentation form.:::return->getAddress->numericToTextFormat
Inet4Address#hashCode():::Returns a hashcode for this IP address.:::return->holder->getAddress
Inet4Address#equals(Object):::Compares this object against the specified object:::return->holder->getAddress->holder->getAddress
Inet4Address#numericToTextFormat(byte[]):::Converts IPv4 binary address into a string suitable for presentation.:::return
Inet6Address#getByAddress(String, byte[], NetworkInterface):::Create an Inet6Address in the exact manner of InetAddress#getByAddress(String,byte[]) except that the IPv6 scope_id is set to the value corresponding to the given interface for the address type specified in addr:::if->host->length->host->charAt->if->host->host->length->charAt->host->host->length->substring->if->if->return->new->Inet6Address->throw->new->UnknownHostException
Inet6Address#getByAddress(String, byte[], int):::Create an Inet6Address in the exact manner of InetAddress#getByAddress(String,byte[]) except that the IPv6 scope_id is set to the given numeric value:::if->host->length->host->charAt->if->host->host->length->charAt->host->host->length->substring->if->if->return->new->Inet6Address->throw->new->UnknownHostException
Inet6Address#isMulticastAddress():::Utility routine to check if the InetAddress is an IP multicast address:::return->holder6->isMulticastAddress
Inet6Address#isAnyLocalAddress():::Utility routine to check if the InetAddress is a wildcard address.:::return->holder6->isAnyLocalAddress
Inet6Address#isLoopbackAddress():::Utility routine to check if the InetAddress is a loopback address.:::return->holder6->isLoopbackAddress
Inet6Address#isLinkLocalAddress():::Utility routine to check if the InetAddress is an link local address.:::return->holder6->isLinkLocalAddress
Inet6Address#isSiteLocalAddress():::Utility routine to check if the InetAddress is a site local address.:::return->holder6->isSiteLocalAddress
Inet6Address#isMCGlobal():::Utility routine to check if the multicast address has global scope.:::return->holder6->isMCGlobal
Inet6Address#isMCNodeLocal():::Utility routine to check if the multicast address has node scope.:::return->holder6->isMCNodeLocal
Inet6Address#isMCLinkLocal():::Utility routine to check if the multicast address has link scope.:::return->holder6->isMCLinkLocal
Inet6Address#isMCSiteLocal():::Utility routine to check if the multicast address has site scope.:::return->holder6->isMCSiteLocal
Inet6Address#isMCOrgLocal():::Utility routine to check if the multicast address has organization scope.:::return->holder6->isMCOrgLocal
Inet6Address#getAddress():::Returns the raw IP address of this InetAddress object:::return->clone
Inet6Address#getScopeId():::Returns the numeric scopeId, if this instance is associated with an interface:::return
Inet6Address#getScopedInterface():::Returns the scoped interface, if this instance was created with with a scoped interface.:::return
Inet6Address#getHostAddress():::Returns the IP address string in textual presentation:::return->holder6->getHostAddress
Inet6Address#hashCode():::Returns a hashcode for this IP address.:::return->holder6->hashCode
Inet6Address#equals(Object):::Compares this object against the specified object:::if->return->inetAddr->return->holder6->equals
Inet6Address#isIPv4CompatibleAddress():::Utility routine to check if the InetAddress is an IPv4 compatible IPv6 address.:::return->holder6->isIPv4CompatibleAddress
Inet6Address#numericToTextFormat(byte[]):::Convert IPv6 binary address into presentation (printable) format.:::sb->new->StringBuilder->for->i->return->sb->toString
InetAddress#isMulticastAddress():::Utility routine to check if the InetAddress is an IP multicast address.:::return
InetAddress#isAnyLocalAddress():::Utility routine to check if the InetAddress is a wildcard address.:::return
InetAddress#isLoopbackAddress():::Utility routine to check if the InetAddress is a loopback address.:::return
InetAddress#isLinkLocalAddress():::Utility routine to check if the InetAddress is an link local address.:::return
InetAddress#isSiteLocalAddress():::Utility routine to check if the InetAddress is a site local address.:::return
InetAddress#isMCGlobal():::Utility routine to check if the multicast address has global scope.:::return
InetAddress#isMCNodeLocal():::Utility routine to check if the multicast address has node scope.:::return
InetAddress#isMCLinkLocal():::Utility routine to check if the multicast address has link scope.:::return
InetAddress#isMCSiteLocal():::Utility routine to check if the multicast address has site scope.:::return
InetAddress#isMCOrgLocal():::Utility routine to check if the multicast address has organization scope.:::return
InetAddress#isReachable(int):::Test whether that address is reachable:::return->isReachable
InetAddress#isReachable(NetworkInterface, int, int):::Test whether that address is reachable:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->impl->isReachable
InetAddress#getHostName():::Gets the host name for this IP address:::return->getHostName
InetAddress#getHostName(boolean):::Returns the hostname for this address:::if->holder->getHostName->InetAddress->getHostFromNameService->holder->return->holder->getHostName
InetAddress#getCanonicalHostName():::Gets the fully qualified domain name for this IP address:::value->if->InetAddress->getHostFromNameService->return
InetAddress#getAddress():::Returns the raw IP address of this InetAddress object:::return
InetAddress#getHostAddress():::Returns the IP address string in textual presentation.:::return
InetAddress#hashCode():::Returns a hashcode for this IP address.:::return
InetAddress#equals(Object):::Compares this object against the specified object:::return
InetAddress#toString():::Converts this IP address to a String:::hostName->holder->getHostName->return->Objects->toString->getHostAddress
InetAddress#getByAddress(String, byte[]):::Creates an InetAddress based on the provided host name and IP address:::if->host->length->host->charAt->if->host->host->length->charAt->host->host->length->substring->if->if->return->new->Inet4Address->else->if->newAddr->IPAddressUtil->convertFromIPv4MappedAddress->if->return->new->Inet4Address->else->return->new->Inet6Address->throw->new->UnknownHostException
InetAddress#getByName(String):::Determines the IP address of a host, given the host's name:::return->InetAddress->getAllByName
InetAddress#getAllByName(String):::Given the name of a host, returns an array of its IP addresses, based on the configured name service on the system:::return->getAllByName
InetAddress#getLoopbackAddress():::Returns the loopback address:::return->impl->loopbackAddress
InetAddress#getAllByName0(String, boolean):::package private so SocketPermission can call it:::return->getAllByName0
InetAddress#getByAddress(byte[]):::Returns an InetAddress object given the raw IP address :::return->getByAddress
InetAddress#getLocalHost():::Returns the address of the local host:::security->System->getSecurityManager->try->clh->if->System->nanoTime->if->security->checkConnect->return->local->impl->getLocalHostName->if->security->checkConnect->localAddr->if->local->equals->impl->loopbackAddress->else->try->getAllByName0->catch->uhe2->uhe->getMessage->new->UnknownHostException->uhe2->initCause->throw->finally->new->CachedLocalHost->return->catch->return->impl->loopbackAddress->finally
InetSocketAddress#createUnresolved(String, int):::Creates an unresolved socket address from a hostname and a port number:::return->checkPort->checkHost->new->InetSocketAddress
InetSocketAddress#getPort():::Gets the port number.:::return->holder->getPort
InetSocketAddress#getAddress():::Gets the InetAddress.:::return->holder->getAddress
InetSocketAddress#getHostName():::Gets the hostname:::return->holder->getHostName
InetSocketAddress#getHostString():::Returns the hostname, or the String form of the address if it doesn't have a hostname (it was created using a literal):::return->holder->getHostString
InetSocketAddress#isUnresolved():::Checks whether the address has been resolved or not.:::return->holder->isUnresolved
InetSocketAddress#toString():::Constructs a string representation of this InetSocketAddress:::return->holder->toString
InetSocketAddress#equals(Object):::Compares this object against the specified object:::if->return->return->holder->equals
InetSocketAddress#hashCode():::Returns a hashcode for this socket address.:::return->holder->hashCode
InMemoryCookieStore#add(URI, HttpCookie):::Add one cookie into cookie store.:::if->throw->new->NullPointerException->lock->lock->try->cookieJar->remove->if->cookie->getMaxAge->cookieJar->add->if->cookie->getDomain->cookie->getDomain->addIndex->if->getEffectiveURI->addIndex->catch->finally->lock->unlock
InMemoryCookieStore#get(URI):::Get all cookies, which:  1) given uri domain-matches with, or, associated with     given uri when added to the cookie store:::if->throw->new->NullPointerException->cookies->new->ArrayList<>->secureLink->uri->getScheme->equalsIgnoreCase->lock->lock->try->uri->getHost->getInternal1->getEffectiveURI->getInternal2->catch->finally->lock->unlock->return
InMemoryCookieStore#getCookies():::Get all cookies in cookie store, except those have expired:::rt->lock->lock->try->it->cookieJar->iterator->while->it->hasNext->if->it->next->hasExpired->it->remove->catch->finally->Collections->unmodifiableList->lock->unlock->return
InMemoryCookieStore#getURIs():::Get all URIs, which are associated with at least one cookie of this cookie store.:::uris->new->ArrayList<>->lock->lock->try->it->uriIndex->keySet->iterator->while->it->hasNext->uri->it->next->cookies->uriIndex->get->if->cookies->size->it->remove->catch->finally->uris->uriIndex->keySet->addAll->lock->unlock->return
InMemoryCookieStore#remove(URI, HttpCookie):::Remove a cookie from store:::if->throw->new->NullPointerException->modified->lock->lock->try->cookieJar->remove->catch->finally->lock->unlock->return
InMemoryCookieStore#removeAll():::Remove all cookies in this cookie store.:::lock->lock->try->if->cookieJar->isEmpty->return->cookieJar->clear->domainIndex->clear->uriIndex->clear->catch->finally->lock->unlock->return
InterfaceAddress#getAddress():::Returns an InetAddress for this address.:::return
InterfaceAddress#getBroadcast():::Returns an InetAddress for the broadcast address for this InterfaceAddress:::return
InterfaceAddress#getNetworkPrefixLength():::Returns the network prefix length for this address:::return
InterfaceAddress#equals(Object):::Compares this object against the specified object:::if->return->cmp->if->address->equals->return->if->broadcast->equals->return->if->return->return
InterfaceAddress#hashCode():::Returns a hashcode for this Interface address.:::return->address->hashCode->broadcast->hashCode
InterfaceAddress#toString():::Converts this Interface address to a String:::return
JarURLConnection#getJarFileURL():::Returns the URL for the Jar file for this connection.:::return
JarURLConnection#getEntryName():::Return the entry name for this connection:::return
JarURLConnection#getJarFile():::Return the JAR file for this connection.:::
JarURLConnection#getManifest():::Returns the Manifest for this connection, or null if none.:::return->getJarFile->getManifest
JarURLConnection#getJarEntry():::Return the JAR entry object for this connection, if any:::return->getJarFile->getJarEntry
JarURLConnection#getAttributes():::Return the Attributes object for this connection if the URL for it points to a JAR file entry, null otherwise.:::e->getJarEntry->return->e->getAttributes
JarURLConnection#getMainAttributes():::Returns the main Attributes for the JAR file for this connection.:::man->getManifest->return->man->getMainAttributes
JarURLConnection#getCertificates():::Return the Certificate object for this connection if the URL for it points to a JAR file entry, null otherwise:::e->getJarEntry->return->e->getCertificates
MulticastSocket#setTTL(byte):::Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts:::if->isClosed->throw->new->SocketException->getImpl->setTTL
MulticastSocket#setTimeToLive(int):::Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts:::if->throw->new->IllegalArgumentException->if->isClosed->throw->new->SocketException->getImpl->setTimeToLive
MulticastSocket#getTTL():::Get the default time-to-live for multicast packets sent out on the socket.:::if->isClosed->throw->new->SocketException->return->getImpl->getTTL
MulticastSocket#getTimeToLive():::Get the default time-to-live for multicast packets sent out on the socket.:::if->isClosed->throw->new->SocketException->return->getImpl->getTimeToLive
MulticastSocket#joinGroup(InetAddress):::Joins a multicast group:::if->isClosed->throw->new->SocketException->checkAddress->security->System->getSecurityManager->if->security->checkMulticast->if->mcastaddr->isMulticastAddress->throw->new->SocketException->defaultInterface->NetworkInterface->getDefault->if->setNetworkInterface->getImpl->join
MulticastSocket#leaveGroup(InetAddress):::Leave a multicast group:::if->isClosed->throw->new->SocketException->checkAddress->security->System->getSecurityManager->if->security->checkMulticast->if->mcastaddr->isMulticastAddress->throw->new->SocketException->getImpl->leave
MulticastSocket#joinGroup(SocketAddress, NetworkInterface):::Joins the specified multicast group at the specified interface:::if->isClosed->throw->new->SocketException->if->throw->new->IllegalArgumentException->if->throw->new->UnsupportedOperationException->getAddress->checkAddress->security->System->getSecurityManager->if->security->getAddress->checkMulticast->if->getAddress->isMulticastAddress->throw->new->SocketException->getImpl->joinGroup
MulticastSocket#leaveGroup(SocketAddress, NetworkInterface):::Leave a multicast group on a specified local interface:::if->isClosed->throw->new->SocketException->if->throw->new->IllegalArgumentException->if->throw->new->UnsupportedOperationException->getAddress->checkAddress->security->System->getSecurityManager->if->security->getAddress->checkMulticast->if->getAddress->isMulticastAddress->throw->new->SocketException->getImpl->leaveGroup
MulticastSocket#setInterface(InetAddress):::Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface:::if->isClosed->throw->new->SocketException->checkAddress->synchronized->getImpl->setOption
MulticastSocket#getInterface():::Retrieve the address of the network interface used for multicast packets.:::if->isClosed->throw->new->SocketException->synchronized->ia->getImpl->getOption->if->return->if->ia->equals->return->try->ni->NetworkInterface->getByInetAddress->addrs->ni->getInetAddresses->while->addrs->hasMoreElements->addr->addrs->nextElement->if->addr->equals->return->return->catch->return->finally
MulticastSocket#setNetworkInterface(NetworkInterface):::Specify the network interface for outgoing multicast datagrams sent on this socket.:::synchronized->getImpl->setOption
MulticastSocket#getNetworkInterface():::Get the multicast network interface set.:::ni->getImpl->getOption->if->ni->getIndex->ni->getIndex->addrs->new->InetAddressArr->InetAddress->anyLocalAddress->return->getHostName->new->NetworkInterface->else->return
MulticastSocket#setLoopbackMode(boolean):::Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket:::getImpl->Boolean->valueOf->setOption
MulticastSocket#getLoopbackMode():::Get the setting for local loopback of multicast datagrams.:::return->getImpl->getOption->booleanValue
MulticastSocket#send(DatagramPacket, byte):::Sends a datagram packet to the destination, with a TTL (time- to-live) other than the default for the socket:::if->isClosed->throw->new->SocketException->p->getAddress->checkAddress->synchronized->synchronized->if->security->System->getSecurityManager->if->if->p->getAddress->isMulticastAddress->security->p->getAddress->checkMulticast->else->security->p->getAddress->getHostAddress->p->getPort->checkConnect->else->packetAddress->p->getAddress->if->p->setAddress->p->setPort->else->if->packetAddress->equals->p->getPort->throw->new->SecurityException->dttl->getTTL->try->if->getImpl->setTTL->getImpl->send->catch->finally->if->getImpl->setTTL
NetworkInterface#getName():::Get the name of this network interface.:::return
NetworkInterface#getInetAddresses():::Get an Enumeration with all or a subset of the InetAddresses bound to this network interface:::return->getCheckedInetAddresses->enumerationFromArray
NetworkInterface#inetAddresses():::Get a Stream of all or a subset of the InetAddresses bound to this network interface:::return->getCheckedInetAddresses->streamFromArray
NetworkInterface#getInterfaceAddresses():::Get a List of all or a subset of the InterfaceAddresses of this network interface:::lst->new->java.util.ArrayList<>->if->sec->System->getSecurityManager->for->j->return
NetworkInterface#getSubInterfaces():::Get an Enumeration with all the subinterfaces (also known as virtual interfaces) attached to this network interface:::return->enumerationFromArray
NetworkInterface#subInterfaces():::Get a Stream of all subinterfaces (also known as virtual interfaces) attached to this network interface.:::return->streamFromArray
NetworkInterface#getParent():::Returns the parent NetworkInterface of this interface if this is a subinterface, or null if it is a physical (non virtual) interface or has no parent.:::return
NetworkInterface#getIndex():::Returns the index of this network interface:::return
NetworkInterface#getDisplayName():::Get the display name of this network interface:::return->equals
NetworkInterface#getByName(String):::Searches for the network interface with the specified name.:::if->throw->new->NullPointerException->return->getByName0
NetworkInterface#getByIndex(int):::Get a network interface given its index.:::if->throw->new->IllegalArgumentException->return->getByIndex0
NetworkInterface#getByInetAddress(InetAddress):::Convenience method to search for a network interface that has the specified Internet Protocol (IP) address bound to it:::if->throw->new->NullPointerException->if->inet4Address->if->throw->new->IllegalArgumentException->else->if->inet6Address->if->throw->new->IllegalArgumentException->else->throw->new->IllegalArgumentException->return->getByInetAddress0
NetworkInterface#getNetworkInterfaces():::Returns an Enumeration of all the interfaces on this machine:::netifs->getAll->if->return->enumerationFromArray->else->throw->new->SocketException
NetworkInterface#networkInterfaces():::Returns a Stream of all the interfaces on this machine:::netifs->getAll->if->return->streamFromArray->else->throw->new->SocketException
NetworkInterface#getHardwareAddress():::Returns the hardware address (usually MAC) of the interface if it has one and if it can be accessed given the current privileges:::sec->System->getSecurityManager->if->try->sec->new->NetPermission->checkPermission->catch->if->getInetAddresses->hasMoreElements->return->finally->foreach->if->return->getAddress->getMacAddr0->return->getMacAddr0
NetworkInterface#getMTU():::Returns the Maximum Transmission Unit (MTU) of this interface.:::return->getMTU0
NetworkInterface#isVirtual():::Returns whether this interface is a virtual interface (also called subinterface):::return
NetworkInterface#equals(Object):::Compares this object against the specified object:::if->return->that->if->if->equals->return->else->if->return->if->return->else->if->return->if->return->thatAddrs->count->for->i->return
NetworkInterface#getDefault():::Returns the default network interface of this system:::return
PasswordAuthentication#getUserName():::Returns the user name.:::return
PasswordAuthentication#getPassword():::Returns the user password:::return
ProtocolFamily#name():::Returns the name of the protocol family.:::
Proxy#type():::Returns the proxy type.:::return
Proxy#address():::Returns the socket address of the proxy, or null if its a direct connection.:::return
Proxy#toString():::Constructs a string representation of this Proxy:::if->type->return->return->type->address
Proxy#equals(Object):::Compares this object against the specified object:::if->return->p->if->p->type->type->if->address->return->p->address->else->return->address->p->address->equals->return
Proxy#hashCode():::Returns a hashcode for this Proxy.:::if->address->return->type->hashCode->return->type->hashCode->address->hashCode
ProxySelector#getDefault():::Gets the system-wide proxy selector.:::sm->System->getSecurityManager->if->sm->checkPermission->return
ProxySelector#setDefault(ProxySelector):::Sets (or unsets) the system-wide proxy selector:::sm->System->getSecurityManager->if->sm->checkPermission
ProxySelector#select(URI):::Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at:::
ProxySelector#connectFailed(URI, SocketAddress, IOException):::Called to indicate that a connection could not be established to a proxy/socks server:::
ProxySelector#of(InetSocketAddress):::Returns a ProxySelector which uses the given proxy address for all HTTP and HTTPS requests:::return->new->StaticProxySelector
ResponseCache#getDefault():::Gets the system-wide response cache.:::sm->System->getSecurityManager->if->sm->checkPermission->return
ResponseCache#setDefault(ResponseCache):::Sets (or unsets) the system-wide cache:::sm->System->getSecurityManager->if->sm->checkPermission
ResponseCache#get(URI, String, Map>):::Retrieve the cached response based on the requesting uri, request method and request headers:::
ResponseCache#put(URI, URLConnection):::The protocol handler calls this method after a resource has been retrieved, and the ResponseCache must decide whether or not to store the resource in its cache:::
SecureCacheResponse#getCipherSuite():::Returns the cipher suite in use on the original connection that retrieved the network resource.:::
SecureCacheResponse#getLocalCertificateChain():::Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource:::
SecureCacheResponse#getServerCertificateChain():::Returns the server's certificate chain, which was established as part of defining the session in the original connection that retrieved the network resource, from cache:::
SecureCacheResponse#getPeerPrincipal():::Returns the server's principal which was established as part of defining the session during the original connection that retrieved the network resource.:::
SecureCacheResponse#getLocalPrincipal():::Returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource.:::
ServerSocket#getImpl():::Get the SocketImpl attached to this socket, creating it if necessary.:::if->createImpl->return
ServerSocket#createImpl():::Creates the socket implementation.:::if->setImpl->try->impl->create->catch->throw->e->getMessage->new->SocketException->finally
ServerSocket#bind(SocketAddress):::Binds the ServerSocket to a specific address (IP address and port number):::bind
ServerSocket#bind(SocketAddress, int):::Binds the ServerSocket to a specific address (IP address and port number):::if->isClosed->throw->new->SocketException->if->isBound->throw->new->SocketException->if->new->InetSocketAddress->if->throw->new->IllegalArgumentException->epoint->if->epoint->isUnresolved->throw->new->SocketException->if->try->security->System->getSecurityManager->if->security->epoint->getPort->checkListen->getImpl->epoint->getAddress->epoint->getPort->bind->getImpl->listen->catch->throw->throw->finally
ServerSocket#getInetAddress():::Returns the local address of this server socket:::if->isBound->return->try->in->getImpl->getInetAddress->sm->System->getSecurityManager->if->sm->in->getHostAddress->checkConnect->return->catch->return->InetAddress->getLoopbackAddress->finally->return
ServerSocket#getLocalPort():::Returns the port number on which this socket is listening:::if->isBound->return->try->return->getImpl->getLocalPort->catch->finally->return
ServerSocket#accept():::Listens for a connection to be made to this socket and accepts it:::if->isClosed->throw->new->SocketException->if->isBound->throw->new->SocketException->s->new->Socket->implAccept->return
ServerSocket#implAccept(Socket):::Subclasses of ServerSocket use this method to override accept() to return their own subclass of socket:::si->try->if->s->setImpl->else->reset->new->InetAddress->new->FileDescriptor->getImpl->accept->SocketCleanable->register->security->System->getSecurityManager->if->security->si->getInetAddress->getHostAddress->si->getPort->checkAccept->catch->if->si->reset->throw->if->si->reset->throw->finally->s->postAccept
ServerSocket#close():::Closes this socket:::synchronized->if->isClosed->return->if->impl->close
ServerSocket#getChannel():::Returns the unique java.nio.channels.ServerSocketChannel object associated with this socket, if any:::return
ServerSocket#isBound():::Returns the binding state of the ServerSocket.:::return
ServerSocket#isClosed():::Returns the closed state of the ServerSocket.:::synchronized->return
ServerSocket#setSoTimeout(int):::Enable/disable SocketOptions#SO_TIMEOUT SO_TIMEOUT with the specified timeout, in milliseconds:::if->isClosed->throw->new->SocketException->getImpl->setOption
ServerSocket#getSoTimeout():::Retrieve setting for SocketOptions#SO_TIMEOUT SO_TIMEOUT:::if->isClosed->throw->new->SocketException->o->getImpl->getOption->if->return->intValue->else->return
ServerSocket#setReuseAddress(boolean):::Enable/disable the SocketOptions#SO_REUSEADDR SO_REUSEADDR socket option:::if->isClosed->throw->new->SocketException->getImpl->Boolean->valueOf->setOption
ServerSocket#getReuseAddress():::Tests if SocketOptions#SO_REUSEADDR SO_REUSEADDR is enabled.:::if->isClosed->throw->new->SocketException->return->getImpl->getOption->booleanValue
ServerSocket#toString():::Returns the implementation address and implementation port of this socket as a String:::if->isBound->return->in->if->System->getSecurityManager->InetAddress->getLoopbackAddress->else->impl->getInetAddress->return->impl->getLocalPort
ServerSocket#setSocketFactory(SocketImplFactory):::Sets the server socket implementation factory for the application:::if->throw->new->SocketException->security->System->getSecurityManager->if->security->checkSetFactory
ServerSocket#setReceiveBufferSize(int):::Sets a default proposed value for the SocketOptions#SO_RCVBUF SO_RCVBUF option for sockets accepted from this ServerSocket:::if->throw->new->IllegalArgumentException->if->isClosed->throw->new->SocketException->getImpl->setOption
ServerSocket#getReceiveBufferSize():::Gets the value of the SocketOptions#SO_RCVBUF SO_RCVBUF option for this ServerSocket, that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket:::if->isClosed->throw->new->SocketException->result->o->getImpl->getOption->if->intValue->return
ServerSocket#setPerformancePreferences(int, int, int):::Sets performance preferences for this ServerSocket:::
ServerSocket#setOption(SocketOption, T):::Sets the value of a socket option.:::getImpl->setOption->return
ServerSocket#getOption(SocketOption):::Returns the value of a socket option.:::return->getImpl->getOption
ServerSocket#supportedOptions():::Returns a set of the socket options supported by this server socket:::synchronized->if->return->try->impl->getImpl->Collections->impl->supportedOptions->unmodifiableSet->catch->Collections->emptySet->finally->return
Socket#createImpl(boolean):::Creates the socket implementation.:::if->setImpl->try->impl->create->catch->throw->e->getMessage->new->SocketException->finally
Socket#setImpl():::Sets impl to the system-default type of SocketImpl.:::if->factory->createSocketImpl->checkOldImpl->else->new->SocksSocketImpl->if->impl->setSocket
Socket#getImpl():::Get the SocketImpl attached to this socket, creating it if necessary.:::if->createImpl->return
Socket#connect(SocketAddress):::Connects this socket to the server.:::connect
Socket#connect(SocketAddress, int):::Connects this socket to the server with a specified timeout value:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->isClosed->throw->new->SocketException->if->isConnected->throw->new->SocketException->if->throw->new->IllegalArgumentException->epoint->addr->epoint->getAddress->port->epoint->getPort->checkAddress->security->System->getSecurityManager->if->if->epoint->isUnresolved->security->epoint->getHostName->checkConnect->else->security->addr->getHostAddress->checkConnect->if->createImpl->if->impl->connect->else->if->if->epoint->isUnresolved->impl->addr->getHostName->connect->else->impl->connect->else->throw->new->UnsupportedOperationException
Socket#bind(SocketAddress):::Binds the socket to a local address:::if->isClosed->throw->new->SocketException->if->isBound->throw->new->SocketException->if->throw->new->IllegalArgumentException->epoint->if->epoint->isUnresolved->throw->new->SocketException->if->new->InetSocketAddress->addr->epoint->getAddress->port->epoint->getPort->checkAddress->security->System->getSecurityManager->if->security->checkListen->getImpl->bind
Socket#postAccept():::set the flags after an accept() call.:::
Socket#getInetAddress():::Returns the address to which the socket is connected:::if->isConnected->return->try->return->getImpl->getInetAddress->catch->finally->return
Socket#getLocalAddress():::Gets the local address to which the socket is bound:::if->isBound->return->InetAddress->anyLocalAddress->in->try->getImpl->getOption->sm->System->getSecurityManager->if->sm->in->getHostAddress->checkConnect->if->in->isAnyLocalAddress->InetAddress->anyLocalAddress->catch->InetAddress->getLoopbackAddress->InetAddress->anyLocalAddress->finally->return
Socket#getPort():::Returns the remote port number to which this socket is connected:::if->isConnected->return->try->return->getImpl->getPort->catch->finally->return
Socket#getLocalPort():::Returns the local port number to which this socket is bound:::if->isBound->return->try->return->getImpl->getLocalPort->catch->finally->return
Socket#getRemoteSocketAddress():::Returns the address of the endpoint this socket is connected to, or null if it is unconnected:::if->isConnected->return->return->getInetAddress->getPort->new->InetSocketAddress
Socket#getChannel():::Returns the unique java.nio.channels.SocketChannel SocketChannel object associated with this socket, if any:::return
Socket#getInputStream():::Returns an input stream for this socket:::if->isClosed->throw->new->SocketException->if->isConnected->throw->new->SocketException->if->isInputShutdown->throw->new->SocketException->is->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->e->getException->finally->return
Socket#getOutputStream():::Returns an output stream for this socket:::if->isClosed->throw->new->SocketException->if->isConnected->throw->new->SocketException->if->isOutputShutdown->throw->new->SocketException->os->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->e->getException->finally->return
Socket#setTcpNoDelay(boolean):::Enable/disable SocketOptions#TCP_NODELAY TCP_NODELAY (disable/enable Nagle's algorithm).:::if->isClosed->throw->new->SocketException->getImpl->Boolean->valueOf->setOption
Socket#getTcpNoDelay():::Tests if SocketOptions#TCP_NODELAY TCP_NODELAY is enabled.:::if->isClosed->throw->new->SocketException->return->getImpl->getOption->booleanValue
Socket#setSoLinger(boolean, int):::Enable/disable SocketOptions#SO_LINGER SO_LINGER with the specified linger time in seconds:::if->isClosed->throw->new->SocketException->if->getImpl->setOption->else->if->throw->new->IllegalArgumentException->if->getImpl->setOption
Socket#getSoLinger():::Returns setting for SocketOptions#SO_LINGER SO_LINGER:::if->isClosed->throw->new->SocketException->o->getImpl->getOption->if->return->intValue->else->return
Socket#sendUrgentData(int):::Send one byte of urgent data on the socket:::if->getImpl->supportsUrgentData->throw->new->SocketException->getImpl->sendUrgentData
Socket#setOOBInline(boolean):::Enable/disable SocketOptions#SO_OOBINLINE SO_OOBINLINE (receipt of TCP urgent data)  By default, this option is disabled and TCP urgent data received on a socket is silently discarded:::if->isClosed->throw->new->SocketException->getImpl->Boolean->valueOf->setOption
Socket#getOOBInline():::Tests if SocketOptions#SO_OOBINLINE SO_OOBINLINE is enabled.:::if->isClosed->throw->new->SocketException->return->getImpl->getOption->booleanValue
Socket#setSoTimeout(int)::: Enable/disable SocketOptions#SO_TIMEOUT SO_TIMEOUT  with the specified timeout, in milliseconds:::if->isClosed->throw->new->SocketException->if->throw->new->IllegalArgumentException->getImpl->setOption
Socket#getSoTimeout():::Returns setting for SocketOptions#SO_TIMEOUT SO_TIMEOUT:::if->isClosed->throw->new->SocketException->o->getImpl->getOption->if->return->intValue->else->return
Socket#setSendBufferSize(int):::Sets the SocketOptions#SO_SNDBUF SO_SNDBUF option to the specified value for this Socket:::if->throw->new->IllegalArgumentException->if->isClosed->throw->new->SocketException->getImpl->setOption
Socket#getSendBufferSize():::Get value of the SocketOptions#SO_SNDBUF SO_SNDBUF option for this Socket, that is the buffer size used by the platform for output on this Socket.:::if->isClosed->throw->new->SocketException->result->o->getImpl->getOption->if->intValue->return
Socket#setReceiveBufferSize(int):::Sets the SocketOptions#SO_RCVBUF SO_RCVBUF option to the specified value for this Socket:::if->throw->new->IllegalArgumentException->if->isClosed->throw->new->SocketException->getImpl->setOption
Socket#getReceiveBufferSize():::Gets the value of the SocketOptions#SO_RCVBUF SO_RCVBUF option for this Socket, that is the buffer size used by the platform for input on this Socket.:::if->isClosed->throw->new->SocketException->result->o->getImpl->getOption->if->intValue->return
Socket#setKeepAlive(boolean):::Enable/disable SocketOptions#SO_KEEPALIVE SO_KEEPALIVE.:::if->isClosed->throw->new->SocketException->getImpl->Boolean->valueOf->setOption
Socket#getKeepAlive():::Tests if SocketOptions#SO_KEEPALIVE SO_KEEPALIVE is enabled.:::if->isClosed->throw->new->SocketException->return->getImpl->getOption->booleanValue
Socket#setTrafficClass(int):::Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket:::if->throw->new->IllegalArgumentException->if->isClosed->throw->new->SocketException->try->getImpl->setOption->catch->if->isConnected->throw->finally
Socket#getTrafficClass():::Gets traffic class or type-of-service in the IP header for packets sent from this Socket  As the underlying network implementation may ignore the traffic class or type-of-service set using #setTrafficClass(int) this method may return a different value than was previously set using the #setTrafficClass(int) method on this Socket.:::return->getImpl->getOption->intValue
Socket#setReuseAddress(boolean):::Enable/disable the SocketOptions#SO_REUSEADDR SO_REUSEADDR socket option:::if->isClosed->throw->new->SocketException->getImpl->Boolean->valueOf->setOption
Socket#getReuseAddress():::Tests if SocketOptions#SO_REUSEADDR SO_REUSEADDR is enabled.:::if->isClosed->throw->new->SocketException->return->getImpl->getOption->booleanValue
Socket#close():::Closes this socket:::synchronized->if->isClosed->return->if->impl->close
Socket#shutdownInput():::Places the input stream for this socket at "end of stream":::if->isClosed->throw->new->SocketException->if->isConnected->throw->new->SocketException->if->isInputShutdown->throw->new->SocketException->getImpl->shutdownInput
Socket#shutdownOutput():::Disables the output stream for this socket:::if->isClosed->throw->new->SocketException->if->isConnected->throw->new->SocketException->if->isOutputShutdown->throw->new->SocketException->getImpl->shutdownOutput
Socket#toString():::Converts this socket to a String.:::try->if->isConnected->return->getImpl->getInetAddress->getImpl->getPort->getImpl->getLocalPort->catch->finally->return
Socket#isConnected():::Returns the connection state of the socket:::return
Socket#isBound():::Returns the binding state of the socket:::return
Socket#isClosed():::Returns the closed state of the socket.:::synchronized->return
Socket#isInputShutdown():::Returns whether the read-half of the socket connection is closed.:::return
Socket#isOutputShutdown():::Returns whether the write-half of the socket connection is closed.:::return
Socket#setSocketImplFactory(SocketImplFactory):::Sets the client socket implementation factory for the application:::if->throw->new->SocketException->security->System->getSecurityManager->if->security->checkSetFactory
Socket#setPerformancePreferences(int, int, int):::Sets performance preferences for this socket:::
Socket#setOption(SocketOption, T):::Sets the value of a socket option.:::getImpl->setOption->return
Socket#getOption(SocketOption):::Returns the value of a socket option.:::return->getImpl->getOption
Socket#supportedOptions():::Returns a set of the socket options supported by this socket:::synchronized->if->return->try->impl->getImpl->Collections->impl->supportedOptions->unmodifiableSet->catch->Collections->emptySet->finally->return
SocketCleanable#register(FileDescriptor, boolean):::Register a socket specific Cleanable with the FileDescriptor if the FileDescriptor is non-null and the raw fd is != -1.:::if->fdo->valid->fd->fdAccess->get->fdAccess->CleanerFactory->cleaner->new->SocketCleanable->registerCleanup
SocketCleanable#unregister(FileDescriptor):::Unregister a Cleanable from the FileDescriptor.:::if->fdAccess->unregisterCleanup
SocketCleanable#performCleanup():::Close the native handle or fd.:::try->cleanupClose0->catch->throw->new->UncheckedIOException->finally->if->ResourceManager->afterUdpClose
SocketImpl#create(boolean):::Creates either a stream or a datagram socket.:::
SocketImpl#connect(String, int):::Connects this socket to the specified port on the named host.:::
SocketImpl#connect(InetAddress, int):::Connects this socket to the specified port number on the specified host.:::
SocketImpl#connect(SocketAddress, int):::Connects this socket to the specified port number on the specified host:::
SocketImpl#bind(InetAddress, int):::Binds this socket to the specified local IP address and port number.:::
SocketImpl#listen(int):::Sets the maximum queue length for incoming connection indications (a request to connect) to the count argument:::
SocketImpl#accept(SocketImpl):::Accepts a connection.:::
SocketImpl#getInputStream():::Returns an input stream for this socket.:::
SocketImpl#getOutputStream():::Returns an output stream for this socket.:::
SocketImpl#available():::Returns the number of bytes that can be read from this socket without blocking.:::
SocketImpl#close():::Closes this socket.:::
SocketImpl#shutdownInput():::Places the input stream for this socket at "end of stream":::throw->new->IOException
SocketImpl#shutdownOutput():::Disables the output stream for this socket:::throw->new->IOException
SocketImpl#getFileDescriptor():::Returns the value of this socket's fd field.:::return
SocketImpl#getInetAddress():::Returns the value of this socket's address field.:::return
SocketImpl#getPort():::Returns the value of this socket's port field.:::return
SocketImpl#supportsUrgentData():::Returns whether or not this SocketImpl supports sending urgent data:::return
SocketImpl#sendUrgentData(int):::Send one byte of urgent data on the socket:::
SocketImpl#getLocalPort():::Returns the value of this socket's localport field.:::return
SocketImpl#toString():::Returns the address and port of this socket as a String.:::return->getInetAddress->getPort->getLocalPort
SocketImpl#setPerformancePreferences(int, int, int):::Sets performance preferences for this socket:::
SocketImpl#setOption(SocketOption, T):::Called to set a socket option.:::if->getSocket->setOption->else->if->getSocket->setOption->else->if->setOption->else->if->setOption->else->if->supportedOptions->contains->setOption->else->if->getSocket->setOption->else->if->setOption->else->if->getSocket->setOption->else->throw->new->UnsupportedOperationException
SocketImpl#getOption(SocketOption):::Called to get a socket option.:::if->getSocket->return->getOption->else->if->getSocket->return->getOption->else->if->return->getOption->else->if->return->getOption->else->if->supportedOptions->contains->return->getOption->else->if->getSocket->return->getOption->else->if->return->getOption->else->if->getSocket->return->getOption->else->throw->new->UnsupportedOperationException
SocketImpl#supportedOptions():::Returns a set of SocketOptions supported by this impl and by this impl's socket (Socket or ServerSocket):::if->getSocket->return->else->return
SocketImplFactory#createSocketImpl():::Creates a new SocketImpl instance.:::
SocketInputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file input stream.  The getChannel method of SocketInputStream returns null since it is a socket based stream.:::return
SocketInputStream#read(byte[]):::Reads into a byte array data from the socket.:::return->read
SocketInputStream#read(byte[], int, int):::Reads into a byte array b at offset off, length bytes of data.:::return->impl->getTimeout->read
SocketInputStream#read():::Reads a single byte from the socket.:::if->return->new->byteArr->n->read->if->return->return
SocketInputStream#skip(long):::Skips n bytes of input.:::if->return->n->buflen->Math->min->data->new->byteArr->while->r->Math->min->read->if->break->return
SocketInputStream#available():::Returns the number of bytes that can be read without blocking.:::return->impl->available
SocketInputStream#finalize():::Overrides finalize, the fd is closed by the Socket.:::
SocketOption#name():::Returns the name of the socket option.:::
SocketOption#type():::Returns the type of the socket option value.:::
SocketOptions#setOption(int, Object):::Enable/disable the option specified by optID:::
SocketOptions#getOption(int):::Fetch the value of an option:::
SocketOutputStream#getChannel():::Returns the unique java.nio.channels.FileChannel FileChannel object associated with this file output stream:::return
SocketOutputStream#write(int):::Writes a byte to the socket.:::socketWrite
SocketOutputStream#write(byte[]):::Writes the contents of the buffer b to the socket.:::socketWrite
SocketOutputStream#write(byte[], int, int):::Writes length bytes from buffer b starting at offset len.:::socketWrite
SocketOutputStream#finalize():::Overrides finalize, the fd is closed by the Socket.:::
SocketPermission#getCanonName():::attempt to get the fully qualified domain name:::if->return->try->if->getIP->if->getHostName->toLowerCase->else->InetAddress->getHostAddress->getByName->getHostName->toLowerCase->catch->throw->finally
SocketPermission#getIP():::get IP addresses:::if->return->try->host->if->getName->charAt->getName->getName->indexOf->substring->else->i->getName->indexOf->if->getName->else->getName->substring->new->InetAddressArr->InetAddress->getAllByName0->catch->throw->throw->getName->new->UnknownHostException->finally
SocketPermission#implies(Permission):::Checks if this socket permission object "implies" the specified permission:::i->j->if->return->if->return->that->return->impliesIgnoreMask
SocketPermission#impliesIgnoreMask(SocketPermission):::Checks if the incoming Permission's action are a proper subset of the this object's actions:::i->j->if->if->if->this->includesEphemerals->that->includesEphemerals->if->inRange->return->else->return->if->equals->return->if->return->compareHostnames->try->if->if->return->if->return->equals->else->if->that->getIP->for->return->if->if->return->endsWith->if->return->if->that->getCanonName->return->endsWith->if->this->getIP->if->that->getIP->if->this->isUntrusted->for->if->this->getCanonName->if->that->getCanonName->return->equalsIgnoreCase->catch->return->compareHostnames->finally->return
SocketPermission#equals(Object):::Checks two SocketPermission objects for equality.:::if->return->if->return->that->if->return->if->if->return->if->this->getName->that->getName->equalsIgnoreCase->return->try->this->getCanonName->that->getCanonName->catch->return->finally->if->return->if->return->equalsIgnoreCase->return
SocketPermission#hashCode():::Returns the hash code value for this object.:::if->return->this->getName->hashCode->try->getCanonName->catch->finally->if->return->this->getName->hashCode->else->return->hashCode
SocketPermission#getActions():::Returns the canonical string representation of the actions:::if->getActions->return
SocketPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing SocketPermission objects:::return->new->SocketPermissionCollection
SocketPermissionCollection#add(Permission):::Adds a permission to the SocketPermissions:::if->throw->new->IllegalArgumentException->if->isReadOnly->throw->new->SecurityException->sp->perms->sp->getName->new->java.util.function.BiFunction<>->merge
SocketPermissionCollection#implies(Permission):::Check and see if this collection of permissions implies the permissions expressed in "permission".:::if->return->np->desired->np->getMask->effective->needed->hit->perms->np->getName->get->if->if->hit->getMask->hit->impliesIgnoreMask->hit->getMask->if->return->foreach->perms->values->if->x->getMask->x->impliesIgnoreMask->x->getMask->if->return->return
SocketPermissionCollection#elements():::Returns an enumeration of all the SocketPermission objects in the container.:::return->Collections->perms->values->enumeration
SocksSocketImpl#connect(SocketAddress, int):::Connects the Socks Socket to the specified endpoint:::deadlineMillis->if->else->finish->System->currentTimeMillis->security->System->getSecurityManager->if->throw->new->IllegalArgumentException->epoint->if->if->epoint->isUnresolved->security->epoint->getHostName->epoint->getPort->checkConnect->else->security->epoint->getAddress->getHostAddress->epoint->getPort->checkConnect->if->sel->new->java.security.PrivilegedAction<>->doPrivileged->if->super->remainingMillis->connect->return->uri->host->epoint->getHostString->if->epoint->getAddress->host->startsWith->host->indexOf->try->ParseUtil->encodePath->epoint->getPort->new->URI->catch->finally->p->savedExc->iProxy->sel->select->iterator->if->iProxy->hasNext->super->remainingMillis->connect->return->while->iProxy->hasNext->iProxy->next->if->p->type->super->remainingMillis->connect->return->if->p->address->throw->new->SocketException->p->address->getHostString->p->address->getPort->useV4->try->remainingMillis->privilegedConnect->break->catch->sel->p->address->connectFailed->finally->if->throw->savedExc->getMessage->new->SocketException->else->try->remainingMillis->privilegedConnect->catch->throw->e->getMessage->new->SocketException->finally->out->new->BufferedOutputStream->in->if->if->epoint->isUnresolved->throw->epoint->toString->new->UnknownHostException->connectV4->return->out->write->out->write->out->write->out->write->out->flush->data->new->byteArr->i->readSocksReply->if->if->epoint->isUnresolved->throw->epoint->toString->new->UnknownHostException->connectV4->return->if->throw->new->SocketException->if->authenticate->throw->new->SocketException->out->write->out->write->out->write->if->epoint->isUnresolved->out->write->out->epoint->getHostName->length->write->try->out->epoint->getHostName->getBytes->write->catch->finally->out->epoint->getPort->write->out->epoint->getPort->write->else->if->epoint->getAddress->out->write->out->epoint->getAddress->getAddress->write->out->epoint->getPort->write->out->epoint->getPort->write->else->out->write->out->epoint->getAddress->getAddress->write->out->epoint->getPort->write->out->epoint->getPort->write->out->flush->new->byteArr->readSocksReply->if->throw->new->SocketException->ex->len->addr->switch->switch->new->byteArr->readSocksReply->if->throw->new->SocketException->new->byteArr->readSocksReply->if->throw->new->SocketException->break->lenByte->new->byteArr->readSocksReply->if->throw->new->SocketException->host->new->byteArr->readSocksReply->if->throw->new->SocketException->new->byteArr->readSocksReply->if->throw->new->SocketException->break->new->byteArr->readSocksReply->if->throw->new->SocketException->new->byteArr->readSocksReply->if->throw->new->SocketException->break->new->SocketException->break->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->if->in->close->out->close->throw
SocksSocketImpl#socksBind(InetSocketAddress):::Sends the Bind request to the SOCKS proxy:::if->return->if->sel->new->java.security.PrivilegedAction<>->doPrivileged->if->return->uri->host->saddr->getHostString->if->saddr->getAddress->host->startsWith->host->indexOf->try->ParseUtil->encodePath->saddr->getPort->new->URI->catch->finally->p->savedExc->iProxy->sel->select->iterator->if->iProxy->hasNext->return->while->iProxy->hasNext->iProxy->next->if->p->type->return->if->p->address->throw->new->SocketException->p->address->getHostString->p->address->getPort->useV4->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->sel->p->address->e->getMessage->new->SocketException->connectFailed->finally->if->throw->savedExc->getMessage->new->SocketException->else->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->e->getMessage->new->SocketException->finally->out->new->BufferedOutputStream->in->if->saddr->getAddress->saddr->getPort->bindV4->return->out->write->out->write->out->write->out->write->out->flush->data->new->byteArr->i->readSocksReply->if->saddr->getAddress->saddr->getPort->bindV4->return->if->throw->new->SocketException->if->authenticate->throw->new->SocketException->out->write->out->write->out->write->lport->saddr->getPort->if->saddr->isUnresolved->out->write->out->saddr->getHostName->length->write->try->out->saddr->getHostName->getBytes->write->catch->finally->out->write->out->write->else->if->saddr->getAddress->addr1->saddr->getAddress->getAddress->out->write->out->write->out->write->out->write->out->flush->else->if->saddr->getAddress->addr1->saddr->getAddress->getAddress->out->write->out->write->out->write->out->write->out->flush->else->cmdsock->close->throw->new->SocketException->new->byteArr->readSocksReply->ex->len->nport->addr->switch->switch->new->byteArr->readSocksReply->if->throw->new->SocketException->new->byteArr->readSocksReply->if->throw->new->SocketException->new->Inet4Address->new->InetSocketAddress->break->host->new->byteArr->readSocksReply->if->throw->new->SocketException->new->byteArr->readSocksReply->if->throw->new->SocketException->new->String->new->InetSocketAddress->break->new->byteArr->readSocksReply->if->throw->new->SocketException->new->byteArr->readSocksReply->if->throw->new->SocketException->new->Inet6Address->new->InetSocketAddress->break->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->if->in->close->out->close->cmdsock->close->throw
SocksSocketImpl#acceptFrom(SocketImpl, InetSocketAddress):::Accepts a connection from a specific host.:::if->return->in->socksBind->in->read->i->in->read->in->read->ex->nport->addr->real_end->switch->in->read->switch->new->byteArr->readSocksReply->in->read->in->read->new->Inet4Address->new->InetSocketAddress->break->len->in->read->new->byteArr->readSocksReply->in->read->in->read->new->String->new->InetSocketAddress->break->new->byteArr->readSocksReply->in->read->in->read->new->Inet6Address->new->InetSocketAddress->break->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->new->SocketException->break->if->cmdIn->close->cmdOut->close->cmdsock->close->throw->if->if->psi->psi->setInputStream->psi->cmdsock->getImpl->getFileDescriptor->setFileDescriptor->psi->cmdsock->getImpl->getInetAddress->setAddress->psi->cmdsock->getImpl->getPort->setPort->psi->cmdsock->getImpl->getLocalPort->setLocalPort->else->cmdsock->getImpl->cmdsock->getImpl->cmdsock->getImpl->cmdsock->getImpl
SocksSocketImpl#getInetAddress():::Returns the value of this socket's address field.:::if->return->external_address->getAddress->else->return->super->getInetAddress
SocksSocketImpl#getPort():::Returns the value of this socket's port field.:::if->return->external_address->getPort->else->return->super->getPort
URI#create(String):::Creates a URI by parsing the given string:::try->return->new->URI->catch->throw->x->getMessage->new->IllegalArgumentException->finally
URI#parseServerAuthority():::Attempts to parse this URI's authority component, if defined, into user-information, host, and port components:::if->return->toString->new->Parser->parse->return
URI#normalize():::Normalizes this URI's path:::return->normalize
URI#resolve(URI):::Resolves the given URI against this URI:::return->resolve
URI#resolve(String):::Constructs a new URI by parsing the given string and then resolving it against this URI:::return->URI->create->resolve
URI#relativize(URI):::Relativizes the given URI against this URI:::return->relativize
URI#toURL():::Constructs a URL from this URI:::return->URL->fromURI
URI#getScheme():::Returns the scheme component of this URI:::return
URI#isAbsolute():::Tells whether or not this URI is absolute:::return
URI#isOpaque():::Tells whether or not this URI is opaque:::return
URI#getRawSchemeSpecificPart():::Returns the raw scheme-specific part of this URI:::part->if->return->s->if->start->end->s->length->if->scheme->length->if->fragment->length->if->path->length->else->s->substring->else->sb->new->StringBuilder->getAuthority->getUserInfo->getPath->getQuery->appendSchemeSpecificPart->sb->toString->return
URI#getSchemeSpecificPart():::Returns the decoded scheme-specific part of this URI:::part->if->getRawSchemeSpecificPart->decode->return
URI#getRawAuthority():::Returns the raw authority component of this URI:::return
URI#getAuthority():::Returns the decoded authority component of this URI:::auth->if->decode->return
URI#getRawUserInfo():::Returns the raw user-information component of this URI:::return
URI#getUserInfo():::Returns the decoded user-information component of this URI:::user->if->decode->return
URI#getHost():::Returns the host component of this URI:::return
URI#getPort():::Returns the port number of this URI:::return
URI#getRawPath():::Returns the raw path component of this URI:::return
URI#getPath():::Returns the decoded path component of this URI:::decoded->if->decode->return
URI#getRawQuery():::Returns the raw query component of this URI:::return
URI#getQuery():::Returns the decoded query component of this URI:::decoded->if->decode->return
URI#getRawFragment():::Returns the raw fragment component of this URI:::return
URI#getFragment():::Returns the decoded fragment component of this URI:::decoded->if->decode->return
URI#equals(Object):::Tests this URI for equality with another object:::if->return->if->return->that->if->this->isOpaque->that->isOpaque->return->if->equalIgnoringCase->return->if->equal->return->if->this->isOpaque->return->equal->if->equal->return->if->equal->return->if->return->if->if->equal->return->if->equalIgnoringCase->return->if->return->else->if->if->equal->return->else->if->return->return
URI#hashCode():::Returns a hash-code value for this URI:::h->if->hashIgnoringCase->hash->if->isOpaque->hash->else->hash->hash->if->hash->hashIgnoringCase->else->hash->if->return
URI#compareTo(URI):::Compares this URI to another object, which must be a URI:::c->if->compareIgnoringCase->return->if->this->isOpaque->if->that->isOpaque->if->compare->return->return->compare->return->else->if->that->isOpaque->return->if->if->compare->return->if->compareIgnoringCase->return->if->return->else->if->compare->return->if->compare->return->if->compare->return->return->compare
URI#toString():::Returns the content of this URI as a string:::s->if->defineString->return
URI#toASCIIString():::Returns the content of this URI as a US-ASCII string:::return->toString->encode
URISyntaxException#getInput():::Returns the input string.:::return
URISyntaxException#getReason():::Returns a string explaining why the input string could not be parsed.:::return->super->getMessage
URISyntaxException#getIndex():::Returns an index into the input string of the position at which the parse error occurred, or -1 if this position is not known.:::return
URISyntaxException#getMessage():::Returns a string describing the parse error:::sb->new->StringBuilder->sb->getReason->append->if->sb->append->sb->append->sb->append->sb->append->return->sb->toString
URL#fromURI(URI):::Creates a URL from a URI, as if by invoking uri.toURL().:::if->uri->isAbsolute->throw->new->IllegalArgumentException->protocol->uri->getScheme->if->protocol->equals->uri->isOpaque->uri->getRawFragment->query->uri->getRawQuery->path->uri->getRawPath->file->host->uri->getHost->if->port->uri->getPort->return->new->URL->else->return->uri->toString->new->URL
URL#set(String, String, int, String, String):::Sets the fields of the URL:::synchronized->q->file->lastIndexOf->if->file->substring->file->substring->else
URL#set(String, String, int, String, String, String, String, String):::Sets the specified 8 fields of the URL:::synchronized
URL#getQuery():::Gets the query part of this URL.:::return
URL#getPath():::Gets the path part of this URL.:::return
URL#getUserInfo():::Gets the userInfo part of this URL.:::return
URL#getAuthority():::Gets the authority part of this URL.:::return
URL#getPort():::Gets the port number of this URL.:::return
URL#getDefaultPort():::Gets the default port number of the protocol associated with this URL:::return->handler->getDefaultPort
URL#getProtocol():::Gets the protocol name of this URL.:::return
URL#getHost():::Gets the host name of this URL, if applicable:::return
URL#getFile():::Gets the file name of this URL:::return
URL#getRef():::Gets the anchor (also known as the "reference") of this URL.:::return
URL#equals(Object):::Compares this URL for equality with another object.  If the given object is not a URL then this method immediately returns false.  Two URL objects are equal if they have the same protocol, reference equivalent hosts, have the same port number on the host, and the same file and fragment of the file.  Two hosts are considered equivalent if both host names can be resolved into the same IP addresses; else if either host name can't be resolved, the host names must be equal without regard to case; or both host names equal to null.  Since hosts comparison requires name resolution, this operation is a blocking operation:::if->return->u2->return->handler->equals
URL#hashCode():::Creates an integer suitable for hash table indexing.  The hash code is based upon all the URL components relevant for URL comparison:::if->return->handler->hashCode->return
URL#sameFile(URL):::Compares two URLs, excluding the fragment component.  Returns true if this URL and the other argument are equal without taking the fragment component into consideration.:::return->handler->sameFile
URL#toString():::Constructs a string representation of this URL:::return->toExternalForm
URL#toExternalForm():::Constructs a string representation of this URL:::return->handler->toExternalForm
URL#toURI():::Returns a java.net.URI equivalent to this URL:::uri->toString->new->URI->if->isBuiltinStreamHandler->s->IPAddressUtil->checkAuthority->if->throw->new->URISyntaxException->return
URL#openConnection():::Returns a java.net.URLConnection URLConnection instance that represents a connection to the remote object referred to by the URL:::return->handler->openConnection
URL#openConnection(Proxy):::Same as #openConnection(), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection:::if->throw->new->IllegalArgumentException->p->create->sm->System->getSecurityManager->if->p->type->epoint->p->address->if->epoint->isUnresolved->sm->epoint->getHostName->epoint->getPort->checkConnect->else->sm->epoint->getAddress->getHostAddress->epoint->getPort->checkConnect->return->handler->openConnection
URL#openStream():::Opens a connection to this URL and returns an InputStream for reading from that connection:::return->openConnection->getInputStream
URL#getContent():::Gets the contents of this URL:::return->openConnection->getContent
URL#getContent(Class[]):::Gets the contents of this URL:::return->openConnection->getContent
URL#setURLStreamHandlerFactory(URLStreamHandlerFactory):::Sets an application's URLStreamHandlerFactory:::synchronized->if->throw->new->Error->security->System->getSecurityManager->if->security->checkSetFactory->handlers->clear
URL#toLowerCase(String):::Returns the protocol in lower case:::if->protocol->equals->protocol->equals->protocol->equals->return->else->return->protocol->toLowerCase
URL#isOverrideable(String):::Non-overrideable protocols: "jrt" and "file"  Character-based comparison for performance reasons; also ensures case-insensitive comparison in a locale-independent fashion.:::if->protocol->length->if->Character->protocol->charAt->toLowerCase->Character->protocol->charAt->toLowerCase->Character->protocol->charAt->toLowerCase->return->else->if->protocol->length->if->Character->protocol->charAt->toLowerCase->Character->protocol->charAt->toLowerCase->Character->protocol->charAt->toLowerCase->Character->protocol->charAt->toLowerCase->return->return
URL#getURLStreamHandler(String):::Returns the Stream Handler.:::handler->handlers->get->if->return->fac->checkedWithFactory->overrideableProtocol->isOverrideable->if->VM->isBooted->if->fac->createURLStreamHandler->if->protocol->equalsIgnoreCase->lookupViaProviders->if->lookupViaProperty->if->defaultFactory->createURLStreamHandler->synchronized->handler2->handlers->get->if->return->if->fac->createURLStreamHandler->if->if->handlers->put->return
URLClassLoader#getResourceAsStream(String):::Returns an input stream for reading the specified resource:::Objects->requireNonNull->url->getResource->try->if->return->urlc->url->openConnection->is->urlc->getInputStream->if->juc->jar->juc->getJarFile->synchronized->if->closeables->containsKey->closeables->put->else->if->synchronized->closeables->put->return->catch->return->finally
URLClassLoader#close():::Closes this URLClassLoader, so that it can no longer be used to load new classes or resources that are defined by this loader:::security->System->getSecurityManager->if->security->new->RuntimePermission->checkPermission->errors->ucp->closeLoaders->synchronized->keys->closeables->keySet->foreach->try->c->close->catch->errors->add->finally->closeables->clear->if->errors->isEmpty->return->firstex->errors->remove->foreach->firstex->addSuppressed->throw
URLClassLoader#addURL(URL):::Appends the specified URL to the list of URLs to search for classes and resources:::ucp->addURL
URLClassLoader#getURLs():::Returns the search path of URLs for loading classes and resources:::return->ucp->getURLs
URLClassLoader#findClass(String):::Finds and loads the class with the specified name from the URL search path:::result->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->pae->getException->finally->if->throw->new->ClassNotFoundException->return
URLClassLoader#definePackage(String, Manifest, URL):::Defines a new package by name in this URLClassLoader:::specTitle->specVersion->specVendor->implTitle->implVersion->implVendor->sealed->sealBase->attr->SharedSecrets->javaUtilJarAccess->name->replace->concat->getTrustedAttributes->if->attr->getValue->attr->getValue->attr->getValue->attr->getValue->attr->getValue->attr->getValue->attr->getValue->man->getMainAttributes->if->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->equalsIgnoreCase->return->definePackage
URLClassLoader#findResource(String):::Finds the resource with the specified name on the URL search path.:::url->AccessController->new->PrivilegedAction<>->doPrivileged->return->URLClassPath->checkURL
URLClassLoader#findResources(String):::Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name.:::e->ucp->findResources->return->new->Enumeration<>
URLClassLoader#getPermissions(CodeSource):::Returns the permissions for the given codesource object:::perms->super->getPermissions->url->codesource->getLocation->p->urlConnection->try->url->openConnection->urlConnection->getPermission->catch->finally->if->path->p->getName->if->path->endsWith->new->FilePermission->else->if->url->getProtocol->equals->path->url->getFile->replace->ParseUtil->decode->if->path->endsWith->new->FilePermission->else->locUrl->if->getJarFileURL->host->locUrl->getHost->if->host->length->new->SocketPermission->if->sm->System->getSecurityManager->if->fp->AccessController->new->PrivilegedAction<>->doPrivileged->perms->add->return
URLClassLoader#newInstance(URL[], ClassLoader):::Creates a new instance of URLClassLoader for the specified URLs and parent class loader:::acc->AccessController->getContext->ucl->AccessController->new->PrivilegedAction<>->doPrivileged->return
URLClassLoader#newInstance(URL[]):::Creates a new instance of URLClassLoader for the specified URLs and default parent class loader:::acc->AccessController->getContext->ucl->AccessController->new->PrivilegedAction<>->doPrivileged->return
URLConnection#getFileNameMap():::Loads filename map (a mimetable) from a data file:::map->if->new->FileNameMap->return
URLConnection#setFileNameMap(FileNameMap):::Sets the FileNameMap:::sm->System->getSecurityManager->if->sm->checkSetFactory
URLConnection#connect():::Opens a communications link to the resource referenced by this URL, if such a connection has not already been established:::
URLConnection#setConnectTimeout(int):::Sets a specified timeout value, in milliseconds, to be used when opening a communications link to the resource referenced by this URLConnection:::if->throw->new->IllegalArgumentException
URLConnection#getConnectTimeout():::Returns setting for connect timeout:::return
URLConnection#setReadTimeout(int):::Sets the read timeout to a specified timeout, in milliseconds:::if->throw->new->IllegalArgumentException
URLConnection#getReadTimeout():::Returns setting for read timeout:::return
URLConnection#getURL():::Returns the value of this URLConnection's URL field.:::return
URLConnection#getContentLength():::Returns the value of the content-length header field:::l->getContentLengthLong->if->return->return
URLConnection#getContentLengthLong():::Returns the value of the content-length header field as a long.:::return->getHeaderFieldLong
URLConnection#getContentType():::Returns the value of the content-type header field.:::return->getHeaderField
URLConnection#getContentEncoding():::Returns the value of the content-encoding header field.:::return->getHeaderField
URLConnection#getExpiration():::Returns the value of the expires header field.:::return->getHeaderFieldDate
URLConnection#getDate():::Returns the value of the date header field.:::return->getHeaderFieldDate
URLConnection#getLastModified():::Returns the value of the last-modified header field:::return->getHeaderFieldDate
URLConnection#getHeaderField(String):::Returns the value of the named header field:::return
URLConnection#getHeaderFields():::Returns an unmodifiable Map of the header fields:::return->Collections->emptyMap
URLConnection#getHeaderFieldInt(String, int):::Returns the value of the named field parsed as a number:::value->getHeaderField->try->return->Integer->parseInt->catch->finally->return
URLConnection#getHeaderFieldLong(String, long):::Returns the value of the named field parsed as a number:::value->getHeaderField->try->return->Long->parseLong->catch->finally->return
URLConnection#getHeaderFieldDate(String, long):::Returns the value of the named field parsed as date:::value->getHeaderField->try->return->Date->parse->catch->finally->return
URLConnection#getHeaderFieldKey(int):::Returns the key for the n^th header field:::return
URLConnection#getHeaderField(int):::Returns the value for the n^th header field:::return
URLConnection#getContent():::Retrieves the contents of this URL connection:::getInputStream->return->getContentHandler->getContent
URLConnection#getContent(Class[]):::Retrieves the contents of this URL connection.:::getInputStream->return->getContentHandler->getContent
URLConnection#getPermission():::Returns a permission object representing the permission necessary to make the connection represented by this object:::return
URLConnection#getInputStream():::Returns an input stream that reads from this open connection:::throw->new->UnknownServiceException
URLConnection#getOutputStream():::Returns an output stream that writes to this connection.:::throw->new->UnknownServiceException
URLConnection#toString():::Returns a String representation of this URL connection.:::return->this->getClass->getName
URLConnection#setDoInput(boolean):::Sets the value of the doInput field for this URLConnection to the specified value:::checkConnected
URLConnection#getDoInput():::Returns the value of this URLConnection's doInput flag.:::return
URLConnection#setDoOutput(boolean):::Sets the value of the doOutput field for this URLConnection to the specified value:::checkConnected
URLConnection#getDoOutput():::Returns the value of this URLConnection's doOutput flag.:::return
URLConnection#setAllowUserInteraction(boolean):::Set the value of the allowUserInteraction field of this URLConnection.:::checkConnected
URLConnection#getAllowUserInteraction():::Returns the value of the allowUserInteraction field for this object.:::return
URLConnection#setDefaultAllowUserInteraction(boolean):::Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value.:::
URLConnection#getDefaultAllowUserInteraction():::Returns the default value of the allowUserInteraction field:::return
URLConnection#setUseCaches(boolean):::Sets the value of the useCaches field of this URLConnection to the specified value:::checkConnected
URLConnection#getUseCaches():::Returns the value of this URLConnection's useCaches field.:::return
URLConnection#setIfModifiedSince(long):::Sets the value of the ifModifiedSince field of this URLConnection to the specified value.:::checkConnected
URLConnection#getIfModifiedSince():::Returns the value of this object's ifModifiedSince field.:::return
URLConnection#getDefaultUseCaches():::Returns the default value of a URLConnection's useCaches flag:::return
URLConnection#setDefaultUseCaches(boolean):::Sets the default value of the useCaches field to the specified value:::
URLConnection#setDefaultUseCaches(String, boolean):::Sets the default value of the useCaches field for the named protocol to the given value:::protocol->toLowerCase->defaultCaching->put
URLConnection#getDefaultUseCaches(String):::Returns the default value of the useCaches flag for the given protocol:::protoDefault->defaultCaching->protocol->toLowerCase->get->if->return->protoDefault->booleanValue->else->return
URLConnection#setRequestProperty(String, String):::Sets the general request property:::checkConnected->if->throw->new->NullPointerException->if->new->MessageHeader->requests->set
URLConnection#addRequestProperty(String, String):::Adds a general request property specified by a key-value pair:::checkConnected->if->throw->new->NullPointerException->if->new->MessageHeader->requests->add
URLConnection#getRequestProperty(String):::Returns the value of the named general request property for this connection.:::checkConnected->if->return->return->requests->findValue
URLConnection#getRequestProperties():::Returns an unmodifiable Map of general request properties for this connection:::checkConnected->if->return->Collections->emptyMap->return->requests->getHeaders
URLConnection#setDefaultRequestProperty(String, String):::Sets the default value of a general request property:::
URLConnection#getDefaultRequestProperty(String):::Returns the value of the default request property:::return
URLConnection#setContentHandlerFactory(ContentHandlerFactory):::Sets the ContentHandlerFactory of an application:::if->throw->new->Error->security->System->getSecurityManager->if->security->checkSetFactory
URLConnection#guessContentTypeFromName(String):::Tries to determine the content type of an object, based on the specified "file" component of a URL:::return->getFileNameMap->getContentTypeFor
URLConnection#guessContentTypeFromStream(InputStream):::Tries to determine the type of an input stream based on the characters at the beginning of the input stream:::if->is->markSupported->return->is->mark->c1->is->read->c2->is->read->c3->is->read->c4->is->read->c5->is->read->c6->is->read->c7->is->read->c8->is->read->c9->is->read->c10->is->read->c11->is->read->c12->is->read->c13->is->read->c14->is->read->c15->is->read->c16->is->read->is->reset->if->return->if->return->if->if->return->if->return->if->if->return->if->if->return->if->if->return->if->if->return->if->if->return->if->return->if->return->if->return->if->return->if->if->return->if->return->if->return->if->if->checkfpx->return->if->return->if->return->if->return->return
URLDecoder#decode(String):::Decodes a x-www-form-urlencoded string:::str->try->decode->catch->finally->return
URLDecoder#decode(String, String):::Decodes an application/x-www-form-urlencoded string using a specific encoding scheme:::if->enc->length->throw->new->UnsupportedEncodingException->try->charset->Charset->forName->return->decode->catch->throw->new->UnsupportedEncodingException->finally
URLDecoder#decode(String, Charset):::Decodes an application/x-www-form-urlencoded string using a specific java.nio.charset.Charset Charset:::Objects->requireNonNull->needToChange->numChars->s->length->sb->new->StringBuilder->i->c->bytes->while->s->charAt->switch->sb->append->break->try->if->new->byteArr->pos->while->v->Integer->parseInt->if->throw->new->IllegalArgumentException->if->s->charAt->if->throw->new->IllegalArgumentException->sb->new->String->append->catch->throw->e->getMessage->new->IllegalArgumentException->finally->break->sb->append->break->return->sb->toString
URLEncoder#encode(String):::Translates a string into x-www-form-urlencoded format:::str->try->encode->catch->finally->return
URLEncoder#encode(String, String):::Translates a string into application/x-www-form-urlencoded format using a specific encoding scheme:::if->throw->new->NullPointerException->try->charset->Charset->forName->return->encode->catch->throw->new->UnsupportedEncodingException->finally
URLEncoder#encode(String, Charset):::Translates a string into application/x-www-form-urlencoded format using a specific java.nio.charset.Charset Charset:::Objects->requireNonNull->needToChange->out->s->length->new->StringBuilder->charArrayWriter->new->CharArrayWriter->for->i->s->length->return->out->toString
URLPermission#getActions():::Returns the normalized method list and request header list, in the form:       "method-names : header-names"   where method-names is the list of methods separated by commas and header-names is the list of permitted headers separated by commas:::return
URLPermission#implies(Permission):::Checks if this URLPermission implies the given permission:::if->return->that->if->isEmpty->isEmpty->return->if->isEmpty->get->equals->Collections->indexOfSubList->return->if->isEmpty->isEmpty->return->if->isEmpty->get->equals->Collections->indexOfSubList->return->if->equals->return->if->equals->return->if->implies->return->if->return->if->return->if->endsWith->thisprefix->length->substring->return->startsWith->if->endsWith->thisprefix->length->substring->if->startsWith->return->thatsuffix->thisprefix->length->substring->if->thatsuffix->indexOf->return->if->thatsuffix->equals->return->return->return->equals
URLPermission#equals(Object):::Returns true if, this.getActions().equals(p.getActions()) and p's url equals this's url:::if->return->that->if->equals->return->if->this->getActions->that->getActions->equals->return->if->equals->return->if->return->equals->else->return
URLPermission#hashCode():::Returns a hashcode calculated from the hashcode of the actions String and the url string.:::return->getActions->hashCode->scheme->hashCode->authority->hashCode->path->hashCode
URLStreamHandler#openConnection(URL):::Opens a connection to the object referenced by the URL argument:::
URLStreamHandler#openConnection(URL, Proxy):::Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection:::throw->new->UnsupportedOperationException
URLStreamHandler#parseURL(URL, String, int, int):::Parses the string representation of a URL into a URL object:::protocol->u->getProtocol->authority->u->getAuthority->userInfo->u->getUserInfo->host->u->getHost->port->u->getPort->path->u->getPath->query->u->getQuery->ref->u->getRef->isRelPath->queryOnly->if->queryStart->spec->indexOf->if->spec->substring->if->spec->substring->i->isUNCName->spec->charAt->spec->charAt->spec->charAt->spec->charAt->if->spec->charAt->spec->charAt->spec->indexOf->if->spec->indexOf->if->spec->substring->ind->authority->indexOf->if->if->authority->lastIndexOf->else->authority->substring->authority->substring->else->if->if->host->length->host->charAt->if->host->indexOf->nhost->nhost->substring->if->IPAddressUtil->host->substring->isIPv6LiteralAddress->throw->new->IllegalArgumentException->if->nhost->length->if->nhost->charAt->if->nhost->length->Integer->nhost->length->parseInt->else->throw->new->IllegalArgumentException->else->throw->new->IllegalArgumentException->else->host->indexOf->if->if->host->length->Integer->host->length->parseInt->host->substring->else->if->throw->new->IllegalArgumentException->if->authority->length->if->if->if->spec->charAt->spec->substring->else->if->path->length->ind->path->lastIndexOf->seperator->if->path->substring->spec->substring->else->seperator->spec->substring->else->if->ind->path->lastIndexOf->if->path->substring->if->if->while->path->indexOf->path->substring->path->substring->while->path->indexOf->if->path->lastIndexOf->path->indexOf->path->substring->path->substring->else->while->path->endsWith->path->indexOf->if->path->lastIndexOf->path->substring->else->break->if->path->startsWith->path->length->path->substring->if->path->endsWith->path->path->length->substring->setURL
URLStreamHandler#getDefaultPort():::Returns the default port for a URL parsed by this handler:::return
URLStreamHandler#equals(URL, URL):::Provides the default equals calculation:::ref1->u1->getRef->ref2->u2->getRef->return->ref1->equals->sameFile
URLStreamHandler#hashCode(URL):::Provides the default hash calculation:::h->protocol->u->getProtocol->if->protocol->hashCode->addr->getHostAddress->if->addr->hashCode->else->host->u->getHost->if->host->toLowerCase->hashCode->file->u->getFile->if->file->hashCode->if->u->getPort->getDefaultPort->else->u->getPort->ref->u->getRef->if->ref->hashCode->return
URLStreamHandler#sameFile(URL, URL):::Compare two urls to see whether they refer to the same file, i.e., having the same protocol, host, port, and path:::if->u1->getProtocol->u2->getProtocol->u1->getProtocol->u1->getProtocol->u2->getProtocol->equalsIgnoreCase->return->if->u1->getFile->u2->getFile->u1->getFile->u1->getFile->u2->getFile->equals->return->port1->port2->u1->getPort->u1->getPort->getDefaultPort->u2->getPort->u2->getPort->getDefaultPort->if->return->if->hostsEqual->return->return
URLStreamHandler#getHostAddress(URL):::Get the IP address of our host:::if->return->host->u->getHost->if->host->equals->return->else->try->InetAddress->getByName->catch->return->return->finally->return
URLStreamHandler#hostsEqual(URL, URL):::Compares the host components of two URLs.:::a1->getHostAddress->a2->getHostAddress->if->return->a1->equals->else->if->u1->getHost->u2->getHost->return->u1->getHost->u2->getHost->equalsIgnoreCase->else->return->u1->getHost->u2->getHost
URLStreamHandler#toExternalForm(URL):::Converts a URL of a specific protocol to a String.:::s->return->u->getProtocol->u->getAuthority->s->length->u->getPath->u->getQuery->u->getRef
URLStreamHandler#setURL(URL, String, String, int, String, String, String, String, String):::Sets the fields of the URL argument to the indicated values:::if->throw->new->SecurityException->else->if->u->isBuiltinStreamHandler->s->IPAddressUtil->checkHostString->if->throw->new->IllegalArgumentException->u->u->getProtocol->set
URLStreamHandler#setURL(URL, String, String, int, String, String):::Sets the fields of the URL argument to the indicated values:::authority->userInfo->if->host->length->at->host->lastIndexOf->if->host->substring->host->substring->path->query->if->q->file->lastIndexOf->if->file->substring->file->substring->else->setURL
URLStreamHandlerFactory#createURLStreamHandler(String):::Creates a new URLStreamHandler instance with the specified protocol.:::

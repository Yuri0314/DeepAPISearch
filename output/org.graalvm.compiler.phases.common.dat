org.graalvm.compiler.phases.common.DeadCodeEliminationPhase_OptionDescriptors#get(String)->OptionDescriptor::: dead code elimination phase_ option descriptors get
org.graalvm.compiler.phases.common.DeadCodeEliminationPhase_OptionDescriptors#iterator()->Iterator::: dead code elimination phase_ option descriptors iterator
org.graalvm.compiler.phases.common.NodeCounterPhase_OptionDescriptors#get(String)->OptionDescriptor::: node counter phase_ option descriptors get
org.graalvm.compiler.phases.common.NodeCounterPhase_OptionDescriptors#iterator()->Iterator::: node counter phase_ option descriptors iterator
org.graalvm.compiler.phases.common.UseTrappingNullChecksPhase_OptionDescriptors#get(String)->OptionDescriptor::: use trapping null checks phase_ option descriptors get
org.graalvm.compiler.phases.common.UseTrappingNullChecksPhase_OptionDescriptors#iterator()->Iterator::: use trapping null checks phase_ option descriptors iterator
org.graalvm.compiler.phases.common.AddressLoweringByUsePhase.AddressLoweringByUse#lower(ValueNode, Stamp, AddressNode)->AddressNode::: address lowering by use lower
org.graalvm.compiler.phases.common.AddressLoweringByUsePhase.AddressLoweringByUse#lower(AddressNode)->AddressNode::: address lowering by use lower
org.graalvm.compiler.phases.common.AddressLoweringByUsePhase#run(StructuredGraph)->void::: address lowering by use phase run
org.graalvm.compiler.phases.common.AddressLoweringPhase.AddressLowering#preProcess(StructuredGraph)->void::: address lowering pre process
org.graalvm.compiler.phases.common.AddressLoweringPhase.AddressLowering#postProcess(AddressNode)->void::: address lowering post process
org.graalvm.compiler.phases.common.AddressLoweringPhase.AddressLowering#lower(ValueNode, ValueNode)->AddressNode::: address lowering lower
org.graalvm.compiler.phases.common.AddressLoweringPhase#run(StructuredGraph)->void::: address lowering phase run
org.graalvm.compiler.phases.common.CanonicalizerPhase.CustomCanonicalizer#canonicalize(Node)->Node::: custom canonicalizer canonicalize
org.graalvm.compiler.phases.common.CanonicalizerPhase.CustomCanonicalizer#simplify(Node, SimplifierTool)->void::: custom canonicalizer simplify
org.graalvm.compiler.phases.common.CanonicalizerPhase#disableGVN()->void::: canonicalizer phase disable n
org.graalvm.compiler.phases.common.CanonicalizerPhase#disableReadCanonicalization()->void::: canonicalizer phase disable read canonicalization
org.graalvm.compiler.phases.common.CanonicalizerPhase#disableSimplification()->void::: canonicalizer phase disable simplification
org.graalvm.compiler.phases.common.CanonicalizerPhase#checkContract()->boolean::: canonicalizer phase check contract
org.graalvm.compiler.phases.common.CanonicalizerPhase#run(StructuredGraph, CoreProviders)->void::: canonicalizer phase run
org.graalvm.compiler.phases.common.CanonicalizerPhase#applyIncremental(StructuredGraph, CoreProviders, Mark)->void::: canonicalizer phase apply incremental
org.graalvm.compiler.phases.common.CanonicalizerPhase#applyIncremental(StructuredGraph, CoreProviders, Mark, boolean)->void::: canonicalizer phase apply incremental
org.graalvm.compiler.phases.common.CanonicalizerPhase#applyIncremental(StructuredGraph, CoreProviders, Iterable)->void::: canonicalizer phase apply incremental
org.graalvm.compiler.phases.common.CanonicalizerPhase#applyIncremental(StructuredGraph, CoreProviders, Iterable, boolean)->void::: canonicalizer phase apply incremental
org.graalvm.compiler.phases.common.CanonicalizerPhase#applyIncremental(StructuredGraph, CoreProviders, Iterable, Mark)->void::: canonicalizer phase apply incremental
org.graalvm.compiler.phases.common.CanonicalizerPhase#applyIncremental(StructuredGraph, CoreProviders, Iterable, Mark, boolean)->void::: canonicalizer phase apply incremental
org.graalvm.compiler.phases.common.CanonicalizerPhase#getNodeView()->NodeView::: canonicalizer phase get node view
org.graalvm.compiler.phases.common.CanonicalizerPhase#getCanonicalizeReads()->boolean::: canonicalizer phase get canonicalize reads
org.graalvm.compiler.phases.common.ConditionalEliminationPhase#run(StructuredGraph, CoreProviders)->void::: conditional elimination phase run
org.graalvm.compiler.phases.common.ConditionalEliminationPhase#getBlockToNodes(ControlFlowGraph)->BlockMap>::: conditional elimination phase get block to nodes
org.graalvm.compiler.phases.common.ConditionalEliminationPhase#createVisitor(StructuredGraph, ControlFlowGraph, BlockMap>, NodeMap, CoreProviders)->ControlFlowGraph.RecursiveVisitor::: conditional elimination phase create visitor
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.MoveGuardsUpwards#enter(Block)->Block::: move guards upwards enter
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.MoveGuardsUpwards#exit(Block, Block)->void::: move guards upwards exit
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.GuardedCondition#getGuard()->GuardingNode::: guarded condition get guard
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.GuardedCondition#getCondition()->LogicNode::: guarded condition get condition
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.GuardedCondition#isNegated()->boolean::: guarded condition is negated
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processConditionAnchor(ConditionAnchorNode)->void::: instance process condition anchor
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processGuard(GuardNode)->void::: instance process guard
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processFixedGuard(FixedGuardNode)->void::: instance process fixed guard
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processIf(IfNode)->void::: instance process if
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#enter(Block)->Marks::: instance enter
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processNodes(Block)->void::: instance process nodes
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processNode(Node)->void::: instance process node
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#introducePisForPhis(MergeNode)->void::: instance introduce pis for phis
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processEnd(EndNode)->void::: instance process end
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#registerNewCondition(LogicNode, boolean, GuardingNode)->void::: instance register new condition
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#recursiveFoldStamp(Node)->Pair::: instance recursive fold stamp
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#recursiveFoldStampFromInfo(Node)->Pair:::Recursively try to fold stamps within this expression using information from #getInfoElements(ValueNode)
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#foldPendingTest(DeoptimizingGuard, ValueNode, Stamp, GuardRewirer)->boolean:::Look for a preceding guard whose condition is implied by thisGuard
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#foldGuard(DeoptimizingGuard, DeoptimizingGuard, boolean, Stamp, GuardRewirer)->boolean::: instance fold guard
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#registerCondition(LogicNode, boolean, GuardingNode)->void::: instance register condition
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#getInfoElements(ValueNode)->InfoElement::: instance get info elements
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#rewireGuards(GuardingNode, boolean, ValueNode, Stamp, GuardRewirer)->boolean::: instance rewire guards
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#tryProveCondition(LogicNode, GuardRewirer)->boolean::: instance try prove condition
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#tryProveGuardCondition(DeoptimizingGuard, LogicNode, GuardRewirer)->boolean::: instance try prove guard condition
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#registerNewStamp(ValueNode, Stamp, GuardingNode)->void::: instance register new stamp
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#registerNewStamp(ValueNode, Stamp, GuardingNode, boolean)->void::: instance register new stamp
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processAbstractBegin(AbstractBeginNode)->void::: instance process abstract begin
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processIntegerSwitch(AbstractBeginNode, IntegerSwitchNode)->void::: instance process integer switch
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#processTypeSwitch(AbstractBeginNode, TypeSwitchNode)->void::: instance process type switch
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.Instance#exit(Block, Marks)->void::: instance exit
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.InfoElementProvider#getInfoElements(ValueNode)->Iterable::: info element provider get info elements
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.InputFilter#apply(Node, Node)->Node::: input filter apply
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.GuardRewirer#rewire(GuardingNode, boolean, Stamp, ValueNode)->boolean:::Called if the condition could be proven to have a constant value (result) under guard.
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.InfoElement#getParent()->InfoElement::: info element get parent
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.InfoElement#getStamp()->Stamp::: info element get stamp
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.InfoElement#getGuard()->GuardingNode::: info element get guard
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.InfoElement#getProxifiedInput()->ValueNode::: info element get proxified input
org.graalvm.compiler.phases.common.ConditionalEliminationPhase.InfoElement#toString()->String::: info element to string
org.graalvm.compiler.phases.common.ConditionalEliminationPhase#codeSizeIncrease()->float::: conditional elimination phase code size increase
org.graalvm.compiler.phases.common.DeadCodeEliminationPhase#run(StructuredGraph)->void::: dead code elimination phase run
org.graalvm.compiler.phases.common.DeoptimizationGroupingPhase#run(StructuredGraph, MidTierContext)->void::: deoptimization grouping phase run
org.graalvm.compiler.phases.common.DeoptimizationGroupingPhase#codeSizeIncrease()->float::: deoptimization grouping phase code size increase
org.graalvm.compiler.phases.common.ExpandLogicPhase#run(StructuredGraph)->void::: expand logic phase run
org.graalvm.compiler.phases.common.ExpandLogicPhase#checkContract()->boolean::: expand logic phase check contract
org.graalvm.compiler.phases.common.FixReadsPhase#codeSizeIncrease()->float::: fix reads phase code size increase
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#replaceInput(Position, Node, Node)->void::: raw conditional elimination visitor replace input
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#replaceConstantInputs(Node)->int::: raw conditional elimination visitor replace constant inputs
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#processNode(Node)->void::: raw conditional elimination visitor process node
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#registerCombinedStamps(MergeNode)->void::: raw conditional elimination visitor register combined stamps
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#processEnd(EndNode)->void::: raw conditional elimination visitor process end
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#processUnary(UnaryNode)->void::: raw conditional elimination visitor process unary
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#checkReplaceWithConstant(Stamp, ValueNode)->boolean::: raw conditional elimination visitor check replace with constant
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#processBinary(BinaryNode)->void::: raw conditional elimination visitor process binary
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#processIntegerSwitch(IntegerSwitchNode)->void::: raw conditional elimination visitor process integer switch
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#processIf(IfNode)->void::: raw conditional elimination visitor process if
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#processConditional(ConditionalNode)->void::: raw conditional elimination visitor process conditional
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#tryProveCondition(LogicNode)->TriState::: raw conditional elimination visitor try prove condition
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#processAbstractBegin(AbstractBeginNode)->void::: raw conditional elimination visitor process abstract begin
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#registerNewCondition(LogicNode, boolean)->void::: raw conditional elimination visitor register new condition
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#registerCondition(LogicNode, boolean)->void::: raw conditional elimination visitor register condition
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#registerNewValueStamp(ValueNode, Stamp)->boolean::: raw conditional elimination visitor register new value stamp
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#registerNewStamp(ValueNode, Stamp)->void::: raw conditional elimination visitor register new stamp
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#getBestStamp(ValueNode)->Stamp::: raw conditional elimination visitor get best stamp
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#enter(Block)->Integer::: raw conditional elimination visitor enter
org.graalvm.compiler.phases.common.FixReadsPhase.RawConditionalEliminationVisitor#exit(Block, Integer)->void::: raw conditional elimination visitor exit
org.graalvm.compiler.phases.common.FixReadsPhase#run(StructuredGraph, LowTierContext)->void::: fix reads phase run
org.graalvm.compiler.phases.common.FixReadsPhase.RawCEPhase#getName()->CharSequence::: raw phase get name
org.graalvm.compiler.phases.common.FixReadsPhase.RawCEPhase#run(StructuredGraph, LowTierContext)->void::: raw phase run
org.graalvm.compiler.phases.common.FixReadsPhase#createVisitor(StructuredGraph, ScheduleResult, CoreProviders)->ControlFlowGraph.RecursiveVisitor::: fix reads phase create visitor
org.graalvm.compiler.phases.common.FixReadsPhase.StampElement#getParent()->StampElement::: stamp element get parent
org.graalvm.compiler.phases.common.FixReadsPhase.StampElement#getStamp()->Stamp::: stamp element get stamp
org.graalvm.compiler.phases.common.FixReadsPhase.StampElement#toString()->String::: stamp element to string
org.graalvm.compiler.phases.common.FixReadsPhase#setReplaceInputsWithConstants(boolean)->void::: fix reads phase set replace inputs with constants
org.graalvm.compiler.phases.common.FloatingReadPhase.MemoryMapImpl#getLastLocationAccess(LocationIdentity)->MemoryNode::: memory map impl get last location access
org.graalvm.compiler.phases.common.FloatingReadPhase.MemoryMapImpl#getLocations()->Iterable::: memory map impl get locations
org.graalvm.compiler.phases.common.FloatingReadPhase.MemoryMapImpl#getMap()->EconomicMap::: memory map impl get map
org.graalvm.compiler.phases.common.FloatingReadPhase#codeSizeIncrease()->float::: floating read phase code size increase
org.graalvm.compiler.phases.common.FloatingReadPhase#processNode(FixedNode, EconomicSet)->void::: floating read phase process node
org.graalvm.compiler.phases.common.FloatingReadPhase#processBlock(Block, EconomicSet)->void::: floating read phase process block
org.graalvm.compiler.phases.common.FloatingReadPhase#run(StructuredGraph)->void::: floating read phase run
org.graalvm.compiler.phases.common.FloatingReadPhase#mergeMemoryMaps(AbstractMergeNode, List)->MemoryMapImpl::: floating read phase merge memory maps
org.graalvm.compiler.phases.common.FloatingReadPhase.FloatingReadClosure#processNode(FixedNode, MemoryMapImpl)->MemoryMapImpl::: floating read closure process node
org.graalvm.compiler.phases.common.FloatingReadPhase.FloatingReadClosure#merge(AbstractMergeNode, List)->MemoryMapImpl::: floating read closure merge
org.graalvm.compiler.phases.common.FloatingReadPhase.FloatingReadClosure#afterSplit(AbstractBeginNode, MemoryMapImpl)->MemoryMapImpl::: floating read closure after split
org.graalvm.compiler.phases.common.FloatingReadPhase.FloatingReadClosure#processLoop(LoopBeginNode, MemoryMapImpl)->EconomicMap::: floating read closure process loop
org.graalvm.compiler.phases.common.FrameStateAssignmentPhase#run(StructuredGraph)->void::: frame state assignment phase run
org.graalvm.compiler.phases.common.FrameStateAssignmentPhase#checkContract()->boolean::: frame state assignment phase check contract
org.graalvm.compiler.phases.common.GuardLoweringPhase#run(StructuredGraph, MidTierContext)->void::: guard lowering phase run
org.graalvm.compiler.phases.common.IncrementalCanonicalizerPhase#run(StructuredGraph, C)->void::: incremental canonicalizer phase run
org.graalvm.compiler.phases.common.InsertGuardFencesPhase#run(StructuredGraph)->void::: insert guard fences phase run
org.graalvm.compiler.phases.common.IterativeConditionalEliminationPhase#run(StructuredGraph, CoreProviders)->void::: iterative conditional elimination phase run
org.graalvm.compiler.phases.common.IterativeConditionalEliminationPhase#codeSizeIncrease()->float::: iterative conditional elimination phase code size increase
org.graalvm.compiler.phases.common.LazyValue#get()->T::: lazy value get
org.graalvm.compiler.phases.common.LockEliminationPhase#run(StructuredGraph)->void::: lock elimination phase run
org.graalvm.compiler.phases.common.LockEliminationPhase#isCompatibleLock(AccessMonitorNode, AccessMonitorNode)->boolean:::Check that the paired operations operate on the same object at the same lock depth.
org.graalvm.compiler.phases.common.LoopSafepointInsertionPhase#checkContract()->boolean::: loop safepoint insertion phase check contract
org.graalvm.compiler.phases.common.LoopSafepointInsertionPhase#run(StructuredGraph)->void::: loop safepoint insertion phase run
org.graalvm.compiler.phases.common.LoweringPhase.DummyGuardHandle#getGuard()->GuardingNode::: dummy guard handle get guard
org.graalvm.compiler.phases.common.LoweringPhase.DummyGuardHandle#setGuard(GuardingNode)->void::: dummy guard handle set guard
org.graalvm.compiler.phases.common.LoweringPhase.DummyGuardHandle#asNode()->ValueNode::: dummy guard handle as node
org.graalvm.compiler.phases.common.LoweringPhase#checkContract()->boolean::: lowering phase check contract
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getLoweringStage()->LoweringStage::: lowering tool impl get lowering stage
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getProviders()->CoreProviders::: lowering tool impl get providers
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getConstantReflection()->ConstantReflectionProvider::: lowering tool impl get constant reflection
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getConstantFieldProvider()->ConstantFieldProvider::: lowering tool impl get constant field provider
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getMetaAccess()->MetaAccessProvider::: lowering tool impl get meta access
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getLowerer()->LoweringProvider::: lowering tool impl get lowerer
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getReplacements()->Replacements::: lowering tool impl get replacements
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getForeignCalls()->ForeignCallsProvider::: lowering tool impl get foreign calls
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getCurrentGuardAnchor()->AnchoringNode::: lowering tool impl get current guard anchor
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#createGuard(FixedNode, LogicNode, DeoptimizationReason, DeoptimizationAction)->GuardingNode::: lowering tool impl create guard
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#getStampProvider()->StampProvider::: lowering tool impl get stamp provider
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#createGuard(FixedNode, LogicNode, DeoptimizationReason, DeoptimizationAction, Speculation, boolean, NodeSourcePosition)->GuardingNode::: lowering tool impl create guard
org.graalvm.compiler.phases.common.LoweringPhase.LoweringToolImpl#lastFixedNode()->FixedWithNextNode::: lowering tool impl last fixed node
org.graalvm.compiler.phases.common.LoweringPhase#shouldDumpBeforeAtBasicLevel()->boolean::: lowering phase should dump before at basic level
org.graalvm.compiler.phases.common.LoweringPhase#run(StructuredGraph, CoreProviders)->void::: lowering phase run
org.graalvm.compiler.phases.common.LoweringPhase#processBlock(Frame)->void:::This state-machine resembles the following recursion:   void processBlock(Block block) {     preprocess();     // Process always reached block first
org.graalvm.compiler.phases.common.LoweringPhase#processBlockBounded(Frame)->void::: lowering phase process block bounded
org.graalvm.compiler.phases.common.LoweringPhase.Frame#enterAlwaysReached(Block)->Frame::: frame enter always reached
org.graalvm.compiler.phases.common.LoweringPhase.Frame#enter(Block)->Frame::: frame enter
org.graalvm.compiler.phases.common.LoweringPhase.Frame#preprocess()->void::: frame preprocess
org.graalvm.compiler.phases.common.LoweringPhase.Frame#postprocess()->void::: frame postprocess
org.graalvm.compiler.phases.common.NodeCounterPhase#run(StructuredGraph, CoreProviders)->void::: node counter phase run
org.graalvm.compiler.phases.common.NonNullParametersPhase#run(StructuredGraph)->void::: non null parameters phase run
org.graalvm.compiler.phases.common.OptimizeDivPhase#run(StructuredGraph)->void::: optimize div phase run
org.graalvm.compiler.phases.common.OptimizeDivPhase#codeSizeIncrease()->float::: optimize div phase code size increase
org.graalvm.compiler.phases.common.OptimizeDivPhase#divByNonZeroConstant(IntegerDivRemNode)->boolean::: optimize div phase div by non zero constant
org.graalvm.compiler.phases.common.OptimizeDivPhase#optimizeRem(IntegerDivRemNode)->void::: optimize div phase optimize rem
org.graalvm.compiler.phases.common.OptimizeDivPhase#createDiv(IntegerDivRemNode)->ValueNode::: optimize div phase create div
org.graalvm.compiler.phases.common.OptimizeDivPhase#optimizeSignedDiv(SignedDivNode)->void::: optimize div phase optimize signed div
org.graalvm.compiler.phases.common.ProfileCompiledMethodsPhase#run(StructuredGraph)->void::: profile compiled methods phase run
org.graalvm.compiler.phases.common.ProfileCompiledMethodsPhase#checkContract()->boolean::: profile compiled methods phase check contract
org.graalvm.compiler.phases.common.PropagateDeoptimizeProbabilityPhase#run(StructuredGraph, CoreProviders)->void::: propagate deoptimize probability phase run
org.graalvm.compiler.phases.common.RemoveValueProxyPhase#run(StructuredGraph)->void::: remove value proxy phase run
org.graalvm.compiler.phases.common.UseTrappingNullChecksPhase#run(StructuredGraph, LowTierContext)->void::: use trapping null checks phase run
org.graalvm.compiler.phases.common.VerifyHeapAtReturnPhase#run(StructuredGraph)->void::: verify heap at return phase run
org.graalvm.compiler.phases.common.WriteBarrierAdditionPhase#run(StructuredGraph, MidTierContext)->void::: write barrier addition phase run
org.graalvm.compiler.phases.common.WriteBarrierAdditionPhase#checkContract()->boolean::: write barrier addition phase check contract

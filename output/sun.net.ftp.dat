FtpClient#defaultPort():::Returns the default FTP port number.:::return
FtpClient#create():::Creates an instance of FtpClient:::provider->FtpClientProvider->provider->return->provider->createFtpClient
FtpClient#create(InetSocketAddress):::Creates an instance of FtpClient and connects it to the specified address.:::client->create->if->client->connect->return
FtpClient#create(String):::Creates an instance of FtpClient and connects it to the specified host on the default FTP port.:::return->new->InetSocketAddress->create
FtpClient#enablePassiveMode(boolean):::Enables, or disables, the use of the passive mode:::
FtpClient#isPassiveModeEnabled():::Tests whether passive mode is enabled.:::
FtpClient#setConnectTimeout(int):::Sets the default timeout value to use when connecting to the server,:::
FtpClient#getConnectTimeout():::Returns the current default connection timeout value.:::
FtpClient#setReadTimeout(int):::Sets the timeout value to use when reading from the server,:::
FtpClient#getReadTimeout():::Returns the current read timeout value.:::
FtpClient#setProxy(Proxy):::Set the Proxy to be used for the next connection:::
FtpClient#getProxy():::Get the proxy of this FtpClient:::
FtpClient#isConnected():::Tests whether this client is connected or not to a server.:::
FtpClient#connect(SocketAddress):::Connects the FtpClient to the specified destination server.:::
FtpClient#connect(SocketAddress, int):::Connects the FtpClient to the specified destination server.:::
FtpClient#getServerAddress():::Retrieves the address of the FTP server this client is connected to.:::
FtpClient#login(String, char[]):::Attempts to log on the server with the specified user name and password.:::
FtpClient#login(String, char[], String):::Attempts to log on the server with the specified user name, password and account name.:::
FtpClient#close():::Closes the current connection:::
FtpClient#isLoggedIn():::Checks whether the client is logged in to the server or not.:::
FtpClient#changeDirectory(String):::Changes to a specific directory on a remote FTP server:::
FtpClient#changeToParentDirectory():::Changes to the parent directory, sending the CDUP command to the server.:::
FtpClient#getWorkingDirectory():::Retrieve the server current working directory using the PWD command.:::
FtpClient#setRestartOffset(long):::Sets the restart offset to the specified value:::
FtpClient#getFile(String, OutputStream):::Retrieves a file from the ftp server and writes its content to the specified OutputStream:::
FtpClient#getFileStream(String):::Retrieves a file from the ftp server, using the RETR command, and returns the InputStream from the established data connection:::
FtpClient#putFileStream(String):::Transfers a file from the client to the server (aka a put) by sending the STOR command, and returns the OutputStream from the established data connection:::return->putFileStream
FtpClient#putFileStream(String, boolean):::Transfers a file from the client to the server (aka a put) by sending the STOR or STOU command, depending on the unique argument, and returns the OutputStream from the established data connection:::
FtpClient#putFile(String, InputStream):::Transfers a file from the client to the server (aka a put) by sending the STOR or STOU command, depending on the unique argument:::return->putFile
FtpClient#putFile(String, InputStream, boolean):::Transfers a file from the client to the server (aka a put) by sending the STOR command:::
FtpClient#appendFile(String, InputStream):::Sends the APPE command to the server in order to transfer a data stream passed in argument and append it to the content of the specified remote file:::
FtpClient#rename(String, String):::Renames a file on the server.:::
FtpClient#deleteFile(String):::Deletes a file on the server.:::
FtpClient#makeDirectory(String):::Creates a new directory on the server.:::
FtpClient#removeDirectory(String):::Removes a directory on the server.:::
FtpClient#noop():::Sends a No-operation command:::
FtpClient#getStatus(String):::Sends the STAT command to the server:::
FtpClient#getFeatures():::Sends the FEAT command to the server and returns the list of supported features in the form of strings:::
FtpClient#abort():::Sends the ABOR command to the server:::
FtpClient#completePending():::Some methods do not wait until completion before returning, so this method can be called to wait until completion:::
FtpClient#reInit():::Reinitializes the USER parameters on the FTP server:::
FtpClient#setType(TransferType):::Changes the transfer type (binary, ascii, ebcdic) and issue the proper command (e.g:::
FtpClient#setBinaryType():::Changes the current transfer type to binary:::setType->return
FtpClient#setAsciiType():::Changes the current transfer type to ascii:::setType->return
FtpClient#list(String):::Issues a LIST command to the server to get the current directory listing, and returns the InputStream from the data connection:::
FtpClient#nameList(String):::Issues a NLST path command to server to get the specified directory content:::
FtpClient#getSize(String):::Issues the SIZE [path] command to the server to get the size of a specific file on the server:::
FtpClient#getLastModified(String):::Issues the MDTM [path] command to the server to get the modification time of a specific file on the server:::
FtpClient#setDirParser(FtpDirParser):::Sets the parser used to handle the directory output to the specified one:::
FtpClient#listFiles(String):::Issues a MLSD command to the server to get the specified directory listing and applies the internal parser to create an Iterator of java.net.FtpDirEntry:::
FtpClient#useKerberos():::Attempts to use Kerberos GSSAPI as an authentication mechanism with the ftp server:::
FtpClient#getWelcomeMsg():::Returns the Welcome string the server sent during initial connection.:::
FtpClient#getLastReplyCode():::Returns the last reply code sent by the server.:::
FtpClient#getLastResponseString():::Returns the last response string sent by the server.:::
FtpClient#getLastTransferSize():::Returns, when available, the size of the latest started transfer:::
FtpClient#getLastFileName():::Returns, when available, the remote name of the last transfered file:::
FtpClient#startSecureSession():::Attempts to switch to a secure, encrypted connection:::
FtpClient#endSecureSession():::Sends a CCC command followed by a PROT C command to the server terminating an encrypted session and reverting back to a non encrypted transmission.:::
FtpClient#allocate(long):::Sends the "Allocate" (ALLO) command to the server telling it to pre-allocate the specified number of bytes for the next transfer.:::
FtpClient#structureMount(String):::Sends the "Structure Mount" (SMNT) command to the server:::
FtpClient#getSystem():::Sends a System (SYST) command to the server and returns the String sent back by the server describing the operating system at the server.:::
FtpClient#getHelp(String):::Sends the HELP command to the server, with an optional command, like SITE, and returns the text sent back by the server.:::
FtpClient#siteCmd(String):::Sends the SITE command to the server:::
FtpClientProvider#createFtpClient():::Creates a FtpClient from this provider.:::
FtpClientProvider#loadProviderFromProperty()::: ftp client provider load provider from property:::cm->System->getProperty->if->return->try->o->Class->forName->newInstance->return->catch->throw->x->toString->new->ServiceConfigurationError->finally
FtpClientProvider#loadProviderAsService()::: ftp client provider load provider as service:::return
FtpClientProvider#provider():::Returns the system wide default FtpClientProvider for this invocation of the Java virtual machine:::synchronized->if->return->return->AccessController->new->PrivilegedAction<Object>->doPrivileged
FtpDirEntry#getName():::Returns the name of the remote file.:::return
FtpDirEntry#getUser():::Returns the user name of the owner of the file as returned by the FTP server, if provided:::return
FtpDirEntry#setUser(String):::Sets the user name of the owner of the file:::return
FtpDirEntry#getGroup():::Returns the group name of the file as returned by the FTP server, if provided:::return
FtpDirEntry#setGroup(String):::Sets the name of the group to which the file belong:::return
FtpDirEntry#getSize():::Returns the size of the remote file as it was returned by the FTP server, if provided.:::return
FtpDirEntry#setSize(long):::Sets the size of that file:::return
FtpDirEntry#getType():::Returns the type of the remote file as it was returned by the FTP server, if provided:::return
FtpDirEntry#setType(Type):::Sets the type of the file:::return
FtpDirEntry#getLastModified():::Returns the last modification time of the remote file as it was returned by the FTP server, if provided, null otherwise.:::return
FtpDirEntry#setLastModified(Date):::Sets the last modification time of the file:::return
FtpDirEntry#canRead(Permission):::Returns whether read access is granted for a specific permission.:::if->return->return
FtpDirEntry#canWrite(Permission):::Returns whether write access is granted for a specific permission.:::if->return->return
FtpDirEntry#canExexcute(Permission):::Returns whether execute access is granted for a specific permission.:::if->return->return
FtpDirEntry#setPermissions(boolean[][]):::Sets the permissions for that file:::return
FtpDirEntry#addFact(String, String):::Adds a 'fact', as defined in RFC 3659, to the list of facts of this file:::facts->fact->toLowerCase->put->return
FtpDirEntry#getFact(String):::Returns the requested 'fact', as defined in RFC 3659, if available.:::return->facts->fact->toLowerCase->get
FtpDirEntry#getCreated():::Returns the creation time of the file, when provided by the server.:::return
FtpDirEntry#setCreated(Date):::Sets the creation time for that file:::return
FtpDirEntry#toString():::Returns a string representation of the object:::if->return->return->getDateInstance->format
FtpDirParser#parseLine(String):::Takes one line from a directory listing and returns an FtpDirEntry instance based on the information contained.:::
FtpProtocolException#getReplyCode():::Gets the reply code sent by the server that led to this exception being thrown.:::return

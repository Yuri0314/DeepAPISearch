Analyzer#analyze(String, MethodNode):::Analyzes the given method.:::if->new->Frame<?>Arr->return->size->new->List<?>Arr->new->Frame<?>Arr->new->SubroutineArr->new->booleanArr->new->intArr->for->i->size->main->new->Subroutine->subroutineCalls->new->ArrayList<AbstractInsnNode>->subroutineHeads->new->HashMap<LabelNode,Subroutine>->findSubroutine->while->subroutineCalls->isEmpty->jsr->subroutineCalls->remove->sub->subroutineHeads->get->if->new->Subroutine->subroutineHeads->put->insns->indexOf->findSubroutine->else->add->for->i->current->newFrame->handler->newFrame->current->interpreter->Type->getReturnType->newValue->setReturn->args->Type->getArgumentTypes->local->if->ctype->Type->getObjectType->current->interpreter->newValue->setLocal->for->i->while->current->interpreter->newValue->setLocal->merge->init->while->insn->f->subroutine->insnNode->try->get->insnOpcode->insnNode->getOpcode->insnType->insnNode->getType->if->merge->newControlFlowEdge->else->current->init->execute->subroutine->copy->if->j->if->merge->newControlFlowEdge->jump->insns->indexOf->if->new->Subroutine->merge->else->merge->newControlFlowEdge->else->if->lsi->jump->insns->indexOf->merge->newControlFlowEdge->for->j->size->else->if->tsi->jump->insns->indexOf->merge->newControlFlowEdge->for->j->size->else->if->if->throw->new->AnalyzerException->for->i->size->else->if->if->if->var->if->else->if->var->merge->newControlFlowEdge->insnHandlers->if->for->i->insnHandlers->size->catch->throw->e->getMessage->new->AnalyzerException->throw->e->getMessage->new->AnalyzerException->finally->return
Analyzer#findSubroutine(int, Subroutine, List)::: analyzer find subroutine:::while->if->throw->new->AnalyzerException->if->return->sub->copy->node->insns->get->if->if->node->getOpcode->calls->add->else->jnode->insns->indexOf->findSubroutine->else->if->tsnode->insns->indexOf->findSubroutine->for->i->size->else->if->lsnode->insns->indexOf->findSubroutine->for->i->size->insnHandlers->if->for->i->insnHandlers->size->switch->node->getOpcode->return
Analyzer#getFrames():::Returns the symbolic stack frame for each instruction of the last recently analyzed method.:::return
Analyzer#getHandlers(int):::Returns the exception handlers for the given instruction.:::return
Analyzer#init(String, MethodNode):::Initializes this analyzer:::
Analyzer#newFrame(int, int):::Constructs a new frame with the given size.:::return->new->Frame<V>
Analyzer#newFrame(Frame):::Constructs a new frame that is identical to the given frame.:::return->new->Frame<V>
Analyzer#newControlFlowEdge(int, int):::Creates a control flow graph edge:::
Analyzer#newControlFlowExceptionEdge(int, int):::Creates a control flow graph edge corresponding to an exception handler:::return
Analyzer#newControlFlowExceptionEdge(int, TryCatchBlockNode):::Creates a control flow graph edge corresponding to an exception handler:::return->insns->indexOf->newControlFlowExceptionEdge
Analyzer#merge(int, Frame, Subroutine)::: analyzer merge:::oldFrame->oldSubroutine->changes->if->newFrame->else->oldFrame->merge->if->if->subroutine->copy->else->if->oldSubroutine->merge->if
Analyzer#merge(int, Frame, Frame, Subroutine, boolean[])::: analyzer merge:::oldFrame->oldSubroutine->changes->afterRET->merge->if->newFrame->else->oldFrame->merge->if->oldSubroutine->merge->if
BasicInterpreter#newValue(Type)::: basic interpreter new value:::if->return->switch->type->getSort->return->return->return->return->return->return->throw->new->Error
BasicInterpreter#newOperation(AbstractInsnNode)::: basic interpreter new operation:::switch->insn->getOpcode->return->Type->getObjectType->newValue->return->return->return->return->return->cst->if->return->else->if->return->else->if->return->else->if->return->else->if->return->Type->getObjectType->newValue->else->if->sort->getSort->if->return->Type->getObjectType->newValue->else->if->return->Type->getObjectType->newValue->else->throw->new->IllegalArgumentException->else->if->return->Type->getObjectType->newValue->else->throw->new->IllegalArgumentException->return->return->Type->getType->newValue->return->Type->getObjectType->newValue->throw->new->Error
BasicInterpreter#copyOperation(AbstractInsnNode, BasicValue)::: basic interpreter copy operation:::return
BasicInterpreter#unaryOperation(AbstractInsnNode, BasicValue)::: basic interpreter unary operation:::switch->insn->getOpcode->return->return->return->return->return->return->Type->getType->newValue->switch->return->Type->getType->newValue->return->Type->getType->newValue->return->Type->getType->newValue->return->Type->getType->newValue->return->Type->getType->newValue->return->Type->getType->newValue->return->Type->getType->newValue->return->Type->getType->newValue->throw->new->AnalyzerException->desc->return->Type->Type->getObjectType->getType->newValue->return->return->return->Type->getObjectType->newValue->return->return->throw->new->Error
BasicInterpreter#binaryOperation(AbstractInsnNode, BasicValue, BasicValue)::: basic interpreter binary operation:::switch->insn->getOpcode->return->return->return->return->return->return->return->throw->new->Error
BasicInterpreter#ternaryOperation(AbstractInsnNode, BasicValue, BasicValue, BasicValue)::: basic interpreter ternary operation:::return
BasicInterpreter#naryOperation(AbstractInsnNode, List)::: basic interpreter nary operation:::opcode->insn->getOpcode->if->return->Type->getType->newValue->else->if->return->Type->getReturnType->newValue->else->return->Type->getReturnType->newValue
BasicInterpreter#returnOperation(AbstractInsnNode, BasicValue, BasicValue)::: basic interpreter return operation:::
BasicInterpreter#merge(BasicValue, BasicValue)::: basic interpreter merge:::if->v->equals->return->return
BasicValue#getType()::: basic value get type:::return
BasicValue#getSize()::: basic value get size:::return
BasicValue#isReference()::: basic value is reference:::return->type->getSort->type->getSort
BasicValue#equals(Object)::: basic value equals:::if->return->else->if->if->return->else->return->type->equals->else->return
BasicValue#hashCode()::: basic value hash code:::return->type->hashCode
BasicValue#toString()::: basic value to string:::if->return->else->if->return->else->if->return->else->return->type->getDescriptor
BasicVerifier#copyOperation(AbstractInsnNode, BasicValue)::: basic verifier copy operation:::expected->switch->insn->getOpcode->break->break->break->break->if->value->isReference->throw->new->AnalyzerException->return->if->value->isReference->equals->throw->new->AnalyzerException->return->return->if->expected->equals->throw->new->AnalyzerException->return
BasicVerifier#unaryOperation(AbstractInsnNode, BasicValue)::: basic verifier unary operation:::expected->switch->insn->getOpcode->break->break->break->break->Type->getObjectType->newValue->break->if->value->isReference->throw->new->AnalyzerException->return->super->unaryOperation->if->isArrayValue->throw->new->AnalyzerException->return->super->unaryOperation->if->value->isReference->throw->new->AnalyzerException->return->super->unaryOperation->Type->getType->newValue->break->throw->new->Error->if->isSubTypeOf->throw->new->AnalyzerException->return->super->unaryOperation
BasicVerifier#binaryOperation(AbstractInsnNode, BasicValue, BasicValue)::: basic verifier binary operation:::expected1->expected2->switch->insn->getOpcode->Type->getType->newValue->break->if->Type->getType->newValue->isSubTypeOf->Type->getType->newValue->else->Type->getType->newValue->break->Type->getType->newValue->break->Type->getType->newValue->break->Type->getType->newValue->break->Type->getType->newValue->break->Type->getType->newValue->break->Type->getType->newValue->break->break->break->break->break->break->break->fin->Type->getObjectType->newValue->Type->getType->newValue->break->throw->new->Error->if->isSubTypeOf->throw->new->AnalyzerException->else->if->isSubTypeOf->throw->new->AnalyzerException->if->insn->getOpcode->return->getElementValue->else->return->super->binaryOperation
BasicVerifier#ternaryOperation(AbstractInsnNode, BasicValue, BasicValue, BasicValue)::: basic verifier ternary operation:::expected1->expected3->switch->insn->getOpcode->Type->getType->newValue->break->if->Type->getType->newValue->isSubTypeOf->Type->getType->newValue->else->Type->getType->newValue->break->Type->getType->newValue->break->Type->getType->newValue->break->Type->getType->newValue->break->Type->getType->newValue->break->Type->getType->newValue->break->break->throw->new->Error->if->isSubTypeOf->throw->new->AnalyzerException->else->if->equals->throw->new->AnalyzerException->else->if->isSubTypeOf->throw->new->AnalyzerException->return
BasicVerifier#naryOperation(AbstractInsnNode, List)::: basic verifier nary operation:::opcode->insn->getOpcode->if->for->i->values->size->else->i->j->if->owner->Type->getObjectType->if->values->get->newValue->isSubTypeOf->throw->newValue->values->get->new->AnalyzerException->desc->args->Type->getArgumentTypes->while->values->size->expected->newValue->encountered->values->get->if->isSubTypeOf->throw->new->AnalyzerException->return->super->naryOperation
BasicVerifier#returnOperation(AbstractInsnNode, BasicValue, BasicValue)::: basic verifier return operation:::if->isSubTypeOf->throw->new->AnalyzerException
BasicVerifier#isArrayValue(BasicValue)::: basic verifier is array value:::return->value->isReference
BasicVerifier#getElementValue(BasicValue)::: basic verifier get element value:::return
BasicVerifier#isSubTypeOf(BasicValue, BasicValue)::: basic verifier is sub type of:::return->value->equals
Frame#init(Frame):::Copies the state of the given frame into this frame.:::System->arraycopy->return
Frame#setReturn(V):::Sets the expected return type of the analyzed method.:::
Frame#getLocals():::Returns the maximum number of local variables of this frame.:::return
Frame#getMaxStackSize():::Returns the maximum stack size of this frame.:::return
Frame#getLocal(int):::Returns the value of the given local variable.:::if->throw->new->IndexOutOfBoundsException->return
Frame#setLocal(int, V):::Sets the value of the given local variable.:::if->throw->new->IndexOutOfBoundsException
Frame#getStackSize():::Returns the number of values in the operand stack of this frame:::return
Frame#getStack(int):::Returns the value of the given operand stack slot.:::return
Frame#clearStack():::Clears the operand stack of this frame.:::
Frame#pop():::Pops a value from the operand stack of this frame.:::if->throw->new->IndexOutOfBoundsException->return
Frame#push(V):::Pushes a value into the operand stack of this frame.:::if->throw->new->IndexOutOfBoundsException
Frame#execute(AbstractInsnNode, Interpreter)::: frame execute:::value1->value2->value3->value4->values->var->switch->insn->getOpcode->break->interpreter->newOperation->push->break->interpreter->getLocal->copyOperation->push->break->pop->pop->interpreter->binaryOperation->push->break->interpreter->pop->copyOperation->setLocal->if->value1->getSize->interpreter->newValue->setLocal->if->local->getLocal->if->local->getSize->interpreter->newValue->setLocal->break->pop->pop->pop->interpreter->ternaryOperation->break->if->pop->getSize->throw->new->AnalyzerException->break->if->pop->getSize->if->pop->getSize->throw->new->AnalyzerException->break->pop->if->value1->getSize->throw->new->AnalyzerException->push->interpreter->copyOperation->push->break->pop->pop->if->value1->getSize->value2->getSize->throw->new->AnalyzerException->interpreter->copyOperation->push->push->push->break->pop->if->value1->getSize->pop->if->value2->getSize->pop->if->value3->getSize->interpreter->copyOperation->push->push->push->push->break->else->interpreter->copyOperation->push->push->push->break->throw->new->AnalyzerException->pop->if->value1->getSize->pop->if->value2->getSize->push->push->interpreter->copyOperation->push->interpreter->copyOperation->push->break->else->push->interpreter->copyOperation->push->break->throw->new->AnalyzerException->pop->if->value1->getSize->pop->if->value2->getSize->pop->if->value3->getSize->interpreter->copyOperation->push->interpreter->copyOperation->push->push->push->push->break->else->pop->if->value2->getSize->interpreter->copyOperation->push->push->push->break->throw->new->AnalyzerException->pop->if->value1->getSize->pop->if->value2->getSize->pop->if->value3->getSize->pop->if->value4->getSize->interpreter->copyOperation->push->interpreter->copyOperation->push->push->push->push->push->break->else->interpreter->copyOperation->push->interpreter->copyOperation->push->push->push->push->break->else->pop->if->value2->getSize->pop->if->value3->getSize->interpreter->copyOperation->push->push->push->push->break->else->interpreter->copyOperation->push->push->push->break->throw->new->AnalyzerException->pop->pop->if->value1->getSize->value2->getSize->throw->new->AnalyzerException->interpreter->copyOperation->push->interpreter->copyOperation->push->break->pop->pop->interpreter->binaryOperation->push->break->interpreter->pop->unaryOperation->push->break->pop->pop->interpreter->binaryOperation->push->break->interpreter->getLocal->unaryOperation->setLocal->break->interpreter->pop->unaryOperation->push->break->pop->pop->interpreter->binaryOperation->push->break->interpreter->pop->unaryOperation->break->pop->pop->interpreter->binaryOperation->break->break->interpreter->newOperation->push->break->break->interpreter->pop->unaryOperation->break->pop->interpreter->unaryOperation->interpreter->returnOperation->break->if->throw->new->AnalyzerException->break->interpreter->newOperation->push->break->interpreter->pop->unaryOperation->break->interpreter->pop->unaryOperation->push->break->pop->pop->interpreter->binaryOperation->break->new->ArrayList<V>->desc->for->i->Type->getArgumentTypes->if->insn->getOpcode->values->pop->add->if->Type->getReturnType->interpreter->naryOperation->else->interpreter->naryOperation->push->break->new->ArrayList<V>->desc->for->i->Type->getArgumentTypes->if->Type->getReturnType->interpreter->naryOperation->else->interpreter->naryOperation->push->break->interpreter->newOperation->push->break->interpreter->pop->unaryOperation->push->break->interpreter->pop->unaryOperation->break->interpreter->pop->unaryOperation->push->break->interpreter->pop->unaryOperation->break->new->ArrayList<V>->for->i->interpreter->naryOperation->push->break->interpreter->pop->unaryOperation->break->throw->insn->getOpcode->new->RuntimeException
Frame#merge(Frame, Interpreter):::Merges this frame with the given frame.:::if->throw->new->AnalyzerException->changes->for->i->return
Frame#merge(Frame, boolean[]):::Merges this frame with the given frame (case of a RET instruction).:::changes->for->i->return
Frame#toString():::Returns a string representation of this frame.:::sb->new->StringBuilder->for->i->getLocals->sb->append->for->i->getStackSize->return->sb->toString
Interpreter#newValue(Type):::Creates a new value that represents the given type:::
Interpreter#newOperation(AbstractInsnNode):::Interprets a bytecode instruction without arguments:::
Interpreter#copyOperation(AbstractInsnNode, V):::Interprets a bytecode instruction that moves a value on the stack or to or from local variables:::
Interpreter#unaryOperation(AbstractInsnNode, V):::Interprets a bytecode instruction with a single argument:::
Interpreter#binaryOperation(AbstractInsnNode, V, V):::Interprets a bytecode instruction with two arguments:::
Interpreter#ternaryOperation(AbstractInsnNode, V, V, V):::Interprets a bytecode instruction with three arguments:::
Interpreter#naryOperation(AbstractInsnNode, List):::Interprets a bytecode instruction with a variable number of arguments:::
Interpreter#returnOperation(AbstractInsnNode, V, V):::Interprets a bytecode return instruction:::
Interpreter#merge(V, V):::Merges two values:::
SimpleVerifier#setClassLoader(ClassLoader):::Set the ClassLoader which will be used to load referenced classes:::
SimpleVerifier#newValue(Type)::: simple verifier new value:::if->return->isArray->type->getSort->if->switch->type->getElementType->getSort->return->new->BasicValue->v->super->newValue->if->equals->if->type->getElementType->newValue->desc->v->getType->getDescriptor->for->i->type->getDimensions->Type->getType->new->BasicValue->else->new->BasicValue->return
SimpleVerifier#isArrayValue(BasicValue)::: simple verifier is array value:::t->value->getType->return->t->getDescriptor->equals->t->getSort
SimpleVerifier#getElementValue(BasicValue)::: simple verifier get element value:::arrayType->objectArrayValue->getType->if->if->arrayType->getSort->return->Type->arrayType->getDescriptor->substring->getType->newValue->else->if->arrayType->getDescriptor->equals->return->throw->new->Error
SimpleVerifier#isSubTypeOf(BasicValue, BasicValue)::: simple verifier is sub type of:::expectedType->expected->getType->type->value->getType->switch->expectedType->getSort->return->type->equals->if->type->getDescriptor->equals->return->else->if->type->getSort->type->getSort->return->isAssignableFrom->else->return->throw->new->Error
SimpleVerifier#merge(BasicValue, BasicValue)::: simple verifier merge:::if->v->equals->t->v->getType->u->w->getType->if->t->getSort->t->getSort->if->u->getSort->u->getSort->if->t->getDescriptor->equals->return->if->u->getDescriptor->equals->return->if->isAssignableFrom->return->if->isAssignableFrom->return->do->if->isInterface->return->getSuperClass->if->isAssignableFrom->return->newValue->while->return->return
SimpleVerifier#isInterface(Type)::: simple verifier is interface:::if->t->equals->return->return->getClass->isInterface
SimpleVerifier#getSuperClass(Type)::: simple verifier get super class:::if->t->equals->return->c->getClass->getSuperclass->return->Type->getType
SimpleVerifier#isAssignableFrom(Type, Type)::: simple verifier is assignable from:::if->t->equals->return->if->t->equals->if->getSuperClass->return->else->if->return->u->getSort->u->getSort->return->getSuperClass->isAssignableFrom->if->u->equals->if->isAssignableFrom->return->if->for->i->currentClassInterfaces->size->return->tc->getClass->if->tc->isInterface->return->tc->getClass->isAssignableFrom
SimpleVerifier#getClass(Type)::: simple verifier get class:::try->if->t->getSort->return->Class->t->getDescriptor->replace->forName->return->Class->t->getClassName->forName->catch->throw->e->toString->new->RuntimeException->finally
SmallSet#emptySet()::: small set empty set:::return->new->SmallSet<T>
SmallSet#iterator()::: small set iterator:::return->new->SmallSet<E>
SmallSet#size()::: small set size:::return
SmallSet#hasNext()::: small set has next:::return
SmallSet#next()::: small set next:::if->throw->new->NoSuchElementException->e->return
SmallSet#remove()::: small set remove:::
SmallSet#union(SmallSet)::: small set union:::if->return->if->return->if->return->if->if->return->new->SmallSet<E>->else->if->return->if->if->return->r->new->HashSet<E>->r->add->if->r->add->r->add->if->r->add->return
SourceInterpreter#newValue(Type)::: source interpreter new value:::if->return->return->type->getSize->new->SourceValue
SourceInterpreter#newOperation(AbstractInsnNode)::: source interpreter new operation:::size->switch->insn->getOpcode->break->cst->break->Type->getType->getSize->break->return->new->SourceValue
SourceInterpreter#copyOperation(AbstractInsnNode, SourceValue)::: source interpreter copy operation:::return->value->getSize->new->SourceValue
SourceInterpreter#unaryOperation(AbstractInsnNode, SourceValue)::: source interpreter unary operation:::size->switch->insn->getOpcode->break->Type->getType->getSize->break->return->new->SourceValue
SourceInterpreter#binaryOperation(AbstractInsnNode, SourceValue, SourceValue)::: source interpreter binary operation:::size->switch->insn->getOpcode->break->return->new->SourceValue
SourceInterpreter#ternaryOperation(AbstractInsnNode, SourceValue, SourceValue, SourceValue)::: source interpreter ternary operation:::return->new->SourceValue
SourceInterpreter#naryOperation(AbstractInsnNode, List)::: source interpreter nary operation:::size->opcode->insn->getOpcode->if->else->desc->Type->getReturnType->getSize->return->new->SourceValue
SourceInterpreter#returnOperation(AbstractInsnNode, SourceValue, SourceValue)::: source interpreter return operation:::
SourceInterpreter#merge(SourceValue, SourceValue)::: source interpreter merge:::if->s->union->if->return->else->return->Math->min->new->SourceValue->if->containsAll->s->new->HashSet<AbstractInsnNode>->s->addAll->s->addAll->return->Math->min->new->SourceValue->return
SourceValue#getSize()::: source value get size:::return
SourceValue#equals(Object)::: source value equals:::if->return->v->return->insns->equals
SourceValue#hashCode()::: source value hash code:::return->insns->hashCode
Subroutine#copy()::: subroutine copy:::result->new->Subroutine->new->booleanArr->System->arraycopy->new->ArrayList<JumpInsnNode>->return
Subroutine#merge(Subroutine)::: subroutine merge:::changes->for->i->if->for->i->size->return
Value#getSize():::Returns the size of this value in words.:::

Analyzer#analyze(String, MethodNode):::Analyzes the given method.:::if->new->Frame<?>Arr->return->size->new->List<?>Arr->new->Frame<?>Arr->new->SubroutineArr->new->booleanArr->new->intArr->for->i->size->main->new->Subroutine->subroutineCalls->new->ArrayList<AbstractInsnNode>->subroutineHeads->new->HashMap<LabelNode,Subroutine>->findSubroutine->while->subroutineCalls->isEmpty->jsr->subroutineCalls->remove->sub->subroutineHeads->get->if->new->Subroutine->subroutineHeads->put->insns->indexOf->findSubroutine->else->add->for->i->current->newFrame->handler->newFrame->current->interpreter->Type->getReturnType->newValue->setReturn->args->Type->getArgumentTypes->local->if->ctype->Type->getObjectType->current->interpreter->newValue->setLocal->for->i->while->current->interpreter->newValue->setLocal->merge->init->while->insn->f->subroutine->insnNode->try->get->insnOpcode->insnNode->getOpcode->insnType->insnNode->getType->if->merge->newControlFlowEdge->else->current->init->execute->subroutine->copy->if->j->if->merge->newControlFlowEdge->jump->insns->indexOf->if->new->Subroutine->merge->else->merge->newControlFlowEdge->else->if->lsi->jump->insns->indexOf->merge->newControlFlowEdge->for->j->size->else->if->tsi->jump->insns->indexOf->merge->newControlFlowEdge->for->j->size->else->if->if->throw->new->AnalyzerException->for->i->size->else->if->if->if->var->if->else->if->var->merge->newControlFlowEdge->insnHandlers->if->for->i->insnHandlers->size->catch->throw->e->getMessage->new->AnalyzerException->throw->e->getMessage->new->AnalyzerException->finally->return
Analyzer#getFrames():::Returns the symbolic stack frame for each instruction of the last recently analyzed method.:::return
Analyzer#getHandlers(int):::Returns the exception handlers for the given instruction.:::return
Analyzer#init(String, MethodNode):::Initializes this analyzer:::
Analyzer#newFrame(int, int):::Constructs a new frame with the given size.:::return->new->Frame<V>
Analyzer#newFrame(Frame):::Constructs a new frame that is identical to the given frame.:::return->new->Frame<V>
Analyzer#newControlFlowEdge(int, int):::Creates a control flow graph edge:::
Analyzer#newControlFlowExceptionEdge(int, int):::Creates a control flow graph edge corresponding to an exception handler:::return
Analyzer#newControlFlowExceptionEdge(int, TryCatchBlockNode):::Creates a control flow graph edge corresponding to an exception handler:::return->insns->indexOf->newControlFlowExceptionEdge
Frame#init(Frame):::Copies the state of the given frame into this frame.:::System->arraycopy->return
Frame#setReturn(V):::Sets the expected return type of the analyzed method.:::
Frame#getLocals():::Returns the maximum number of local variables of this frame.:::return
Frame#getMaxStackSize():::Returns the maximum stack size of this frame.:::return
Frame#getLocal(int):::Returns the value of the given local variable.:::if->throw->new->IndexOutOfBoundsException->return
Frame#setLocal(int, V):::Sets the value of the given local variable.:::if->throw->new->IndexOutOfBoundsException
Frame#getStackSize():::Returns the number of values in the operand stack of this frame:::return
Frame#getStack(int):::Returns the value of the given operand stack slot.:::return
Frame#clearStack():::Clears the operand stack of this frame.:::
Frame#pop():::Pops a value from the operand stack of this frame.:::if->throw->new->IndexOutOfBoundsException->return
Frame#push(V):::Pushes a value into the operand stack of this frame.:::if->throw->new->IndexOutOfBoundsException
Frame#merge(Frame, Interpreter):::Merges this frame with the given frame.:::if->throw->new->AnalyzerException->changes->for->i->return
Frame#merge(Frame, boolean[]):::Merges this frame with the given frame (case of a RET instruction).:::changes->for->i->return
Frame#toString():::Returns a string representation of this frame.:::sb->new->StringBuilder->for->i->getLocals->sb->append->for->i->getStackSize->return->sb->toString
Interpreter#newValue(Type):::Creates a new value that represents the given type:::
Interpreter#newOperation(AbstractInsnNode):::Interprets a bytecode instruction without arguments:::
Interpreter#copyOperation(AbstractInsnNode, V):::Interprets a bytecode instruction that moves a value on the stack or to or from local variables:::
Interpreter#unaryOperation(AbstractInsnNode, V):::Interprets a bytecode instruction with a single argument:::
Interpreter#binaryOperation(AbstractInsnNode, V, V):::Interprets a bytecode instruction with two arguments:::
Interpreter#ternaryOperation(AbstractInsnNode, V, V, V):::Interprets a bytecode instruction with three arguments:::
Interpreter#naryOperation(AbstractInsnNode, List):::Interprets a bytecode instruction with a variable number of arguments:::
Interpreter#returnOperation(AbstractInsnNode, V, V):::Interprets a bytecode return instruction:::
Interpreter#merge(V, V):::Merges two values:::
SimpleVerifier#setClassLoader(ClassLoader):::Set the ClassLoader which will be used to load referenced classes:::
Value#getSize():::Returns the size of this value in words.:::

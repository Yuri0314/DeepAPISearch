com.sun.tools.sjavac.AutoFlushWriter#write(int)->void::: auto flush writer write
com.sun.tools.sjavac.AutoFlushWriter#write(String, int, int)->void::: auto flush writer write
com.sun.tools.sjavac.AutoFlushWriter#write(char[], int, int)->void::: auto flush writer write
com.sun.tools.sjavac.BuildState#modules()->Map::: build state modules
com.sun.tools.sjavac.BuildState#packages()->Map::: build state packages
com.sun.tools.sjavac.BuildState#sources()->Map::: build state sources
com.sun.tools.sjavac.BuildState#artifacts()->Map::: build state artifacts
com.sun.tools.sjavac.BuildState#dependents()->Map>::: build state dependents
com.sun.tools.sjavac.BuildState#lookupModule(String)->Module:::Lookup a module from a name
com.sun.tools.sjavac.BuildState#findModuleFromPackageName(String)->Module:::Find a module from a given package name
com.sun.tools.sjavac.BuildState#flattenPackagesSourcesAndArtifacts(Map)->void:::Store references to all packages, sources and artifacts for all modules into the build state
com.sun.tools.sjavac.BuildState#flattenArtifacts(Map)->void:::Store references to all artifacts found in the module tree into the maps stored in the build state.
com.sun.tools.sjavac.BuildState#calculateDependents()->void:::Calculate the package dependents (ie the reverse of the dependencies).
com.sun.tools.sjavac.BuildState#checkInternalState(String, boolean, Map)->void:::Verify that the setModules method above did the right thing when running through the module->package->source structure.
com.sun.tools.sjavac.BuildState#loadModule(String)->Module:::Load a module from the javac state file.
com.sun.tools.sjavac.BuildState#loadPackage(Module, String)->Package:::Load a package from the javac state file.
com.sun.tools.sjavac.BuildState#loadSource(Package, String, boolean)->Source:::Load a source from the javac state file.
com.sun.tools.sjavac.BuildState#copyPackagesExcept(BuildState, Set, Set)->void:::During an incremental compile we need to copy the old javac state information about packages that were not recompiled.
com.sun.tools.sjavac.CleanProperties#setExtra(String)->void::: clean properties set extra
com.sun.tools.sjavac.CleanProperties#setExtra(Options)->void::: clean properties set extra
com.sun.tools.sjavac.CleanProperties#transform(CompilationService, Map>, Set, Map>, URI, Map>, Map>>, Map>>, Map, Map, int, boolean, int)->boolean::: clean properties transform
com.sun.tools.sjavac.CleanProperties#clean(String, String, File, File, int, Map>)->boolean::: clean properties clean
com.sun.tools.sjavac.CompileChunk#compareTo(CompileChunk)->int::: compile chunk compare to
com.sun.tools.sjavac.CompileChunk#equal(CompileChunk)->boolean::: compile chunk equal
com.sun.tools.sjavac.CompileJavaPackages#setExtra(String)->void::: compile java packages set extra
com.sun.tools.sjavac.CompileJavaPackages#setExtra(Options)->void::: compile java packages set extra
com.sun.tools.sjavac.CompileJavaPackages#transform(CompilationService, Map>, Set, Map>, URI, Map>, Map>>, Map>>, Map, Map, int, boolean, int)->boolean::: compile java packages transform
com.sun.tools.sjavac.CompileJavaPackages#createCompileChunks(Map>, Map>, int, int)->CompileChunk[]:::Split up the sources into compile chunks
com.sun.tools.sjavac.CompileProperties#setExtra(String)->void::: compile properties set extra
com.sun.tools.sjavac.CompileProperties#setExtra(Options)->void::: compile properties set extra
com.sun.tools.sjavac.CompileProperties#transform(CompilationService, Map>, Set, Map>, URI, Map>, Map>>, Map>>, Map, Map, int, boolean, int)->boolean::: compile properties transform
com.sun.tools.sjavac.CompileProperties#compile(String, String, File, File, int, Map>)->boolean::: compile properties compile
com.sun.tools.sjavac.CompileProperties#escape(String)->String::: compile properties escape
com.sun.tools.sjavac.CopyFile#setExtra(String)->void::: copy file set extra
com.sun.tools.sjavac.CopyFile#setExtra(Options)->void::: copy file set extra
com.sun.tools.sjavac.CopyFile#transform(CompilationService, Map>, Set, Map>, URI, Map>, Map>>, Map>>, Map, Map, int, boolean, int)->boolean::: copy file transform
com.sun.tools.sjavac.JavacState#prev()->BuildState::: javac state prev
com.sun.tools.sjavac.JavacState#now()->BuildState::: javac state now
com.sun.tools.sjavac.JavacState#removeArgsNotAffectingState(String[])->String[]:::Remove args not affecting the state.
com.sun.tools.sjavac.JavacState#setVisibleSources(Map)->void:::Specify which sources are visible to the compiler through -sourcepath.
com.sun.tools.sjavac.JavacState#isIncremental()->boolean:::Returns true if this is an incremental build.
com.sun.tools.sjavac.JavacState#findAllArtifacts()->void:::Find all artifacts that exists on disk.
com.sun.tools.sjavac.JavacState#deleteClassArtifactsInTaintedPackages()->void:::Delete all prev artifacts in the currently tainted packages.
com.sun.tools.sjavac.JavacState#save()->void:::Save the javac_state file.
com.sun.tools.sjavac.JavacState#load(Options)->JavacState:::Load a javac_state file.
com.sun.tools.sjavac.JavacState#taintPackage(String, String)->void:::Mark a java package as tainted, ie it needs recompilation.
com.sun.tools.sjavac.JavacState#taintedPackages()->Set:::This packages need recompilation.
com.sun.tools.sjavac.JavacState#clearTaintedPackages()->void:::Clean out the tainted package set, used after the first round of compiles, prior to propagating dependencies.
com.sun.tools.sjavac.JavacState#checkSourceStatus(boolean)->void:::Go through all sources and check which have been removed, added or modified and taint the corresponding packages.
com.sun.tools.sjavac.JavacState#getJavaSuffixRule()->Map:::Acquire the compile_java_packages suffix rule for .java files.
com.sun.tools.sjavac.JavacState#taintPackagesThatMissArtifacts()->void:::If artifacts have gone missing, force a recompile of the packages they belong to.
com.sun.tools.sjavac.JavacState#taintPackagesDependingOnChangedPackages(Set, Set)->void:::Propagate recompilation through the dependency chains
com.sun.tools.sjavac.JavacState#taintPackagesDependingOnChangedClasspathPackages()->void:::Compare the javac_state recorded public apis of packages on the classpath with the actual public apis on the classpath.
com.sun.tools.sjavac.JavacState#removeUnidentifiedArtifacts()->void:::Scan all output dirs for artifacts and remove those files (artifacts?) that are not recognized as such, in the javac_state file.
com.sun.tools.sjavac.JavacState#removeSuperfluousArtifacts(Set)->void:::Remove artifacts that are no longer produced when compiling!
com.sun.tools.sjavac.JavacState#performCopying(File, Map)->void:::Run the copy translator only.
com.sun.tools.sjavac.JavacState#performTranslation(File, Map)->void:::Run all the translators that translate into java source code
com.sun.tools.sjavac.JavacState#performJavaCompilations(CompilationService, Options, Set, boolean[])->boolean:::Compile all the java sources
com.sun.tools.sjavac.JavacState#compareWithMakefileList(File)->void:::Compare the calculate source list, with an explicit list, usually supplied from the makefile
com.sun.tools.sjavac.Log#setLogForCurrentThread(Log)->void::: log set log for current thread
com.sun.tools.sjavac.Log#setLogLevel(String)->void::: log set log level
com.sun.tools.sjavac.Log#setLogLevel(Level)->void::: log set log level
com.sun.tools.sjavac.Log#trace(String)->void::: log trace
com.sun.tools.sjavac.Log#debug(String)->void::: log debug
com.sun.tools.sjavac.Log#info(String)->void::: log info
com.sun.tools.sjavac.Log#warn(String)->void::: log warn
com.sun.tools.sjavac.Log#error(String)->void::: log error
com.sun.tools.sjavac.Log#error(Throwable)->void::: log error
com.sun.tools.sjavac.Log#log(Level, String)->void::: log log
com.sun.tools.sjavac.Log#debug(Throwable)->void::: log debug
com.sun.tools.sjavac.Log#log(Level, Throwable)->void::: log log
com.sun.tools.sjavac.Log#isDebugging()->boolean::: log is debugging
com.sun.tools.sjavac.Log#isLevelLogged(Level)->boolean::: log is level logged
com.sun.tools.sjavac.Log#get()->Log::: log get
com.sun.tools.sjavac.Log#printLogMsg(Level, String)->void::: log print log msg
com.sun.tools.sjavac.Main#main(String...)->void::: main main
com.sun.tools.sjavac.Main#go(String[])->int::: main go
com.sun.tools.sjavac.Module#name()->String::: module name
com.sun.tools.sjavac.Module#dirname()->String::: module dirname
com.sun.tools.sjavac.Module#packages()->Map::: module packages
com.sun.tools.sjavac.Module#sources()->Map::: module sources
com.sun.tools.sjavac.Module#artifacts()->Map::: module artifacts
com.sun.tools.sjavac.Module#equals(Object)->boolean::: module equals
com.sun.tools.sjavac.Module#hashCode()->int::: module hash code
com.sun.tools.sjavac.Module#compareTo(Module)->int::: module compare to
com.sun.tools.sjavac.Module#save(StringBuilder)->void::: module save
com.sun.tools.sjavac.Module#load(String)->Module::: module load
com.sun.tools.sjavac.Module#saveModules(Map, StringBuilder)->void::: module save modules
com.sun.tools.sjavac.Module#addPackage(Package)->void::: module add package
com.sun.tools.sjavac.Module#lookupPackage(String)->Package::: module lookup package
com.sun.tools.sjavac.Module#addSource(String, Source)->void::: module add source
com.sun.tools.sjavac.Module#lookupSource(String)->Source::: module lookup source
com.sun.tools.sjavac.Module#addArtifacts(String, Set)->void::: module add artifacts
com.sun.tools.sjavac.Module#setDependencies(String, Map>, boolean)->void::: module set dependencies
com.sun.tools.sjavac.Module#setPubapi(String, PubApi)->void::: module set pubapi
com.sun.tools.sjavac.Module#hasPubapiChanged(String, PubApi)->boolean::: module has pubapi changed
com.sun.tools.sjavac.Package#mod()->Module::: package mod
com.sun.tools.sjavac.Package#name()->String::: package name
com.sun.tools.sjavac.Package#dirname()->String::: package dirname
com.sun.tools.sjavac.Package#sources()->Map::: package sources
com.sun.tools.sjavac.Package#artifacts()->Map::: package artifacts
com.sun.tools.sjavac.Package#getPubApi()->PubApi::: package get pub api
com.sun.tools.sjavac.Package#typeDependencies()->Map>::: package type dependencies
com.sun.tools.sjavac.Package#typeClasspathDependencies()->Map>::: package type classpath dependencies
com.sun.tools.sjavac.Package#dependents()->Set::: package dependents
com.sun.tools.sjavac.Package#equals(Object)->boolean::: package equals
com.sun.tools.sjavac.Package#hashCode()->int::: package hash code
com.sun.tools.sjavac.Package#compareTo(Package)->int::: package compare to
com.sun.tools.sjavac.Package#addSource(Source)->void::: package add source
com.sun.tools.sjavac.Package#parseAndAddDependency(String, boolean)->void::: package parse and add dependency
com.sun.tools.sjavac.Package#addDependency(String, String, boolean)->void::: package add dependency
com.sun.tools.sjavac.Package#addDependent(String)->void::: package add dependent
com.sun.tools.sjavac.Package#existsInJavacState()->boolean:::Check if we have knowledge in the javac state that describe the results of compiling this package before.
com.sun.tools.sjavac.Package#hasPubApiChanged(PubApi)->boolean::: package has pub api changed
com.sun.tools.sjavac.Package#setPubapi(PubApi)->void::: package set pubapi
com.sun.tools.sjavac.Package#setDependencies(Map>, boolean)->void::: package set dependencies
com.sun.tools.sjavac.Package#save(StringBuilder)->void::: package save
com.sun.tools.sjavac.Package#load(Module, String)->Package::: package load
com.sun.tools.sjavac.Package#saveDependencies(StringBuilder)->void::: package save dependencies
com.sun.tools.sjavac.Package#savePubapi(StringBuilder)->void::: package save pubapi
com.sun.tools.sjavac.Package#savePackages(Map, StringBuilder)->void::: package save packages
com.sun.tools.sjavac.Package#addArtifact(String)->void::: package add artifact
com.sun.tools.sjavac.Package#addArtifact(File)->void::: package add artifact
com.sun.tools.sjavac.Package#addArtifacts(Set)->void::: package add artifacts
com.sun.tools.sjavac.Package#setArtifacts(Set)->void::: package set artifacts
com.sun.tools.sjavac.Package#loadArtifact(String)->void::: package load artifact
com.sun.tools.sjavac.Package#saveArtifacts(StringBuilder)->void::: package save artifacts
com.sun.tools.sjavac.Package#deleteArtifacts()->void:::Always clean out a tainted package before it is recompiled.
com.sun.tools.sjavac.PubApiExtractor#getPubApi(String)->PubApi::: pub api extractor get pub api
com.sun.tools.sjavac.PubApiExtractor#close()->void::: pub api extractor close
com.sun.tools.sjavac.Source#equals(Object)->boolean::: source equals
com.sun.tools.sjavac.Source#compareTo(Source)->int::: source compare to
com.sun.tools.sjavac.Source#hashCode()->int::: source hash code
com.sun.tools.sjavac.Source#name()->String::: source name
com.sun.tools.sjavac.Source#suffix()->String::: source suffix
com.sun.tools.sjavac.Source#pkg()->Package::: source pkg
com.sun.tools.sjavac.Source#file()->File::: source file
com.sun.tools.sjavac.Source#lastModified()->long::: source last modified
com.sun.tools.sjavac.Source#setPackage(Package)->void::: source set package
com.sun.tools.sjavac.Source#markAsGenerated()->void::: source mark as generated
com.sun.tools.sjavac.Source#isGenerated()->boolean::: source is generated
com.sun.tools.sjavac.Source#markAsLinkedOnly()->void::: source mark as linked only
com.sun.tools.sjavac.Source#isLinkedOnly()->boolean::: source is linked only
com.sun.tools.sjavac.Source#load(Package, String, boolean)->Source::: source load
com.sun.tools.sjavac.Source#saveSources(Map, StringBuilder)->void::: source save sources
com.sun.tools.sjavac.Source#scanRoot(File, Set, List, List, Map, Map, Module, boolean, boolean, boolean)->void:::Recurse into the directory root and find all files matchine the excl/incl/exclfiles/inclfiles rules
com.sun.tools.sjavac.Source#toString()->String::: source to string
com.sun.tools.sjavac.Transformer#transform(CompilationService, Map>, Set, Map>, URI, Map>, Map>>, Map>>, Map, Map, int, boolean, int)->boolean:::The transform method takes a set of package names, mapped to their source files and to the pubapis of the packages
com.sun.tools.sjavac.Transformer#setExtra(String)->void::: transformer set extra
com.sun.tools.sjavac.Transformer#setExtra(Options)->void::: transformer set extra
com.sun.tools.sjavac.Util#toFileSystemPath(String)->String::: util to file system path
com.sun.tools.sjavac.Util#justPackageName(String)->String::: util just package name
com.sun.tools.sjavac.Util#extractStringOption(String, String)->String::: util extract string option
com.sun.tools.sjavac.Util#extractStringOption(String, String, String)->String::: util extract string option
com.sun.tools.sjavac.Util#extractBooleanOption(String, String, boolean)->boolean::: util extract boolean option
com.sun.tools.sjavac.Util#extractIntOption(String, String)->int::: util extract int option
com.sun.tools.sjavac.Util#extractIntOption(String, String, int)->int::: util extract int option
com.sun.tools.sjavac.Util#pkgNameOfClassName(String)->String:::Extract the package name from a fully qualified class name
com.sun.tools.sjavac.Util#cleanSubOptions(Set, String)->String:::Clean out unwanted sub options supplied inside a primary option
com.sun.tools.sjavac.Util#set(String...)->Set:::Convenience method to create a set with strings.
com.sun.tools.sjavac.Util#normalizeDriveLetter(String)->String:::Normalize windows drive letter paths to upper case to enable string comparison.
com.sun.tools.sjavac.Util#findServerSettings(String[])->String:::Locate the setting for the server properties.
com.sun.tools.sjavac.Util#union(Set, Set)->Set::: util union
com.sun.tools.sjavac.Util#subtract(Set, Set)->Set::: util subtract
com.sun.tools.sjavac.Util#getStackTrace(Throwable)->String::: util get stack trace
com.sun.tools.sjavac.Util#pathToFile(Path)->File::: util path to file
com.sun.tools.sjavac.Util#intersection(Collection, Collection)->Set::: util intersection
com.sun.tools.sjavac.Util#indexBy(Collection, Function)->Map::: util index by
com.sun.tools.sjavac.Util#fileSuffix(Path)->String::: util file suffix
com.sun.tools.sjavac.Util#getLines(String)->Stream::: util get lines

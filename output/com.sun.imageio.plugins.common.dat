com.sun.imageio.plugins.common.BitFile#flush()->void::: bit file flush
com.sun.imageio.plugins.common.BitFile#writeBits(int, int)->void::: bit file write bits
com.sun.imageio.plugins.common.BogusColorSpace#toRGB(float[])->float[]::: bogus color space to b
com.sun.imageio.plugins.common.BogusColorSpace#fromRGB(float[])->float[]::: bogus color space from b
com.sun.imageio.plugins.common.BogusColorSpace#toCIEXYZ(float[])->float[]::: bogus color space to z
com.sun.imageio.plugins.common.BogusColorSpace#fromCIEXYZ(float[])->float[]::: bogus color space from z
com.sun.imageio.plugins.common.I18N#getString(String)->String::: i18 n get string
com.sun.imageio.plugins.common.I18NImpl#getString(String, String, String)->String:::Returns the message string with the specified key from the "properties" file in the package containing the class with the specified name.
com.sun.imageio.plugins.common.ImageUtil#createColorModel(SampleModel)->ColorModel:::Creates a ColorModel that may be used with the specified SampleModel
com.sun.imageio.plugins.common.ImageUtil#getPackedBinaryData(Raster, Rectangle)->byte[]:::For the case of binary data (isBinary() returns true), return the binary data as a packed byte array
com.sun.imageio.plugins.common.ImageUtil#getUnpackedBinaryData(Raster, Rectangle)->byte[]:::Returns the binary data unpacked into an array of bytes
com.sun.imageio.plugins.common.ImageUtil#setPackedBinaryData(byte[], WritableRaster, Rectangle)->void:::Sets the supplied Raster's data from an array of packed binary data of the form returned by getPackedBinaryData().
com.sun.imageio.plugins.common.ImageUtil#setUnpackedBinaryData(byte[], WritableRaster, Rectangle)->void:::Copies data into the packed array of the Raster from an array of unpacked data of the form returned by getUnpackedBinaryData()
com.sun.imageio.plugins.common.ImageUtil#isBinary(SampleModel)->boolean::: image util is binary
com.sun.imageio.plugins.common.ImageUtil#createColorModel(ColorSpace, SampleModel)->ColorModel::: image util create color model
com.sun.imageio.plugins.common.ImageUtil#getElementSize(SampleModel)->int::: image util get element size
com.sun.imageio.plugins.common.ImageUtil#getTileSize(SampleModel)->long::: image util get tile size
com.sun.imageio.plugins.common.ImageUtil#getBandSize(SampleModel)->long::: image util get band size
com.sun.imageio.plugins.common.ImageUtil#isIndicesForGrayscale(byte[], byte[], byte[])->boolean:::Tests whether the color indices represent a gray-scale image.
com.sun.imageio.plugins.common.ImageUtil#convertObjectToString(Object)->String:::Converts the provided object to String
com.sun.imageio.plugins.common.ImageUtil#canEncodeImage(ImageWriter, ImageTypeSpecifier)->void:::Checks that the provided ImageWriter can encode the provided ImageTypeSpecifier or not
com.sun.imageio.plugins.common.ImageUtil#canEncodeImage(ImageWriter, ColorModel, SampleModel)->void:::Checks that the provided ImageWriter can encode the provided ColorModel and SampleModel
com.sun.imageio.plugins.common.ImageUtil#imageIsContiguous(RenderedImage)->boolean:::Returns whether the image has contiguous data across rows.
com.sun.imageio.plugins.common.ImageUtil#getDestinationType(ImageReadParam, Iterator)->ImageTypeSpecifier:::Gets the destination image type.
com.sun.imageio.plugins.common.ImageUtil#isNonStandardICCColorSpace(ColorSpace)->boolean:::Returns true if the given ColorSpace object is an instance of ICC_ColorSpace but is not one of the standard ColorSpaces returned by ColorSpace.getInstance().
com.sun.imageio.plugins.common.InputStreamAdapter#read()->int::: input stream adapter read
com.sun.imageio.plugins.common.InputStreamAdapter#read(byte[], int, int)->int::: input stream adapter read
com.sun.imageio.plugins.common.LZWCompressor#compress(byte[], int, int)->void::: compressor compress
com.sun.imageio.plugins.common.LZWCompressor#flush()->void::: compressor flush
com.sun.imageio.plugins.common.LZWCompressor#dump(PrintStream)->void::: compressor dump
com.sun.imageio.plugins.common.LZWStringTable#addCharString(short, byte)->int::: string table add char string
com.sun.imageio.plugins.common.LZWStringTable#findCharString(short, byte)->short::: string table find char string
com.sun.imageio.plugins.common.LZWStringTable#clearTable(int)->void::: string table clear table
com.sun.imageio.plugins.common.LZWStringTable#hash(short, byte)->int::: string table hash
com.sun.imageio.plugins.common.LZWStringTable#expandCode(byte[], int, short, int)->int::: string table expand code
com.sun.imageio.plugins.common.LZWStringTable#dump(PrintStream)->void::: string table dump
com.sun.imageio.plugins.common.PaletteBuilder#createIndexedImage(RenderedImage)->RenderedImage:::Creates an image representing given image src using IndexColorModel
com.sun.imageio.plugins.common.PaletteBuilder#createIndexColorModel(RenderedImage)->IndexColorModel:::Creates an palette representing colors from given image img
com.sun.imageio.plugins.common.PaletteBuilder#canCreatePalette(ImageTypeSpecifier)->boolean:::Returns true if PaletteBuilder is able to create palette for given image type.
com.sun.imageio.plugins.common.PaletteBuilder#canCreatePalette(RenderedImage)->boolean:::Returns true if PaletteBuilder is able to create palette for given rendered image.
com.sun.imageio.plugins.common.PaletteBuilder#getIndexedImage()->RenderedImage::: palette builder get indexed image
com.sun.imageio.plugins.common.PaletteBuilder#findColorIndex(ColorNode, Color)->int::: palette builder find color index
com.sun.imageio.plugins.common.PaletteBuilder#buildPalette()->void::: palette builder build palette
com.sun.imageio.plugins.common.PaletteBuilder#insertNode(ColorNode, Color, int)->ColorNode::: palette builder insert node
com.sun.imageio.plugins.common.PaletteBuilder#getIndexColorModel()->IndexColorModel::: palette builder get index color model
com.sun.imageio.plugins.common.PaletteBuilder#findPaletteEntry(ColorNode, int, byte[], byte[], byte[])->int::: palette builder find palette entry
com.sun.imageio.plugins.common.PaletteBuilder#getBranchIndex(Color, int)->int::: palette builder get branch index
com.sun.imageio.plugins.common.PaletteBuilder#reduceTree()->void::: palette builder reduce tree
com.sun.imageio.plugins.common.PaletteBuilder#freeTree(ColorNode)->ColorNode::: palette builder free tree
com.sun.imageio.plugins.common.PaletteBuilder.ColorNode#getLeafChildCount()->int::: color node get leaf child count
com.sun.imageio.plugins.common.PaletteBuilder.ColorNode#getRGB()->int::: color node get b
com.sun.imageio.plugins.common.ReaderUtil#computeUpdatedPixels(Rectangle, Point, int, int, int, int, int, int, int, int, int, int, int, int)->int[]:::A utility method that computes the exact set of destination pixels that will be written during a particular decoding pass
com.sun.imageio.plugins.common.ReaderUtil#readMultiByteInteger(ImageInputStream)->int::: reader util read multi byte integer
com.sun.imageio.plugins.common.SimpleCMYKColorSpace#getInstance()->ColorSpace::: simple color space get instance
com.sun.imageio.plugins.common.SimpleCMYKColorSpace#equals(Object)->boolean::: simple color space equals
com.sun.imageio.plugins.common.SimpleCMYKColorSpace#hashCode()->int::: simple color space hash code
com.sun.imageio.plugins.common.SimpleCMYKColorSpace#toRGB(float[])->float[]::: simple color space to b
com.sun.imageio.plugins.common.SimpleCMYKColorSpace#fromRGB(float[])->float[]::: simple color space from b
com.sun.imageio.plugins.common.SimpleCMYKColorSpace#toCIEXYZ(float[])->float[]::: simple color space to z
com.sun.imageio.plugins.common.SimpleCMYKColorSpace#fromCIEXYZ(float[])->float[]::: simple color space from z
com.sun.imageio.plugins.common.SimpleRenderedImage#getMinX()->int:::Returns the X coordinate of the leftmost column of the image.
com.sun.imageio.plugins.common.SimpleRenderedImage#getMaxX()->int:::Returns the X coordinate of the column immediatetely to the right of the rightmost column of the image
com.sun.imageio.plugins.common.SimpleRenderedImage#getMinY()->int:::Returns the X coordinate of the uppermost row of the image.
com.sun.imageio.plugins.common.SimpleRenderedImage#getMaxY()->int:::Returns the Y coordinate of the row immediately below the bottom row of the image
com.sun.imageio.plugins.common.SimpleRenderedImage#getWidth()->int:::Returns the width of the image.
com.sun.imageio.plugins.common.SimpleRenderedImage#getHeight()->int:::Returns the height of the image.
com.sun.imageio.plugins.common.SimpleRenderedImage#getBounds()->Rectangle:::Returns a Rectangle indicating the image bounds.
com.sun.imageio.plugins.common.SimpleRenderedImage#getTileWidth()->int:::Returns the width of a tile.
com.sun.imageio.plugins.common.SimpleRenderedImage#getTileHeight()->int:::Returns the height of a tile.
com.sun.imageio.plugins.common.SimpleRenderedImage#getTileGridXOffset()->int:::Returns the X coordinate of the upper-left pixel of tile (0, 0).
com.sun.imageio.plugins.common.SimpleRenderedImage#getTileGridYOffset()->int:::Returns the Y coordinate of the upper-left pixel of tile (0, 0).
com.sun.imageio.plugins.common.SimpleRenderedImage#getMinTileX()->int:::Returns the horizontal index of the leftmost column of tiles
com.sun.imageio.plugins.common.SimpleRenderedImage#getMaxTileX()->int:::Returns the horizontal index of the rightmost column of tiles
com.sun.imageio.plugins.common.SimpleRenderedImage#getNumXTiles()->int:::Returns the number of tiles along the tile grid in the horizontal direction
com.sun.imageio.plugins.common.SimpleRenderedImage#getMinTileY()->int:::Returns the vertical index of the uppermost row of tiles
com.sun.imageio.plugins.common.SimpleRenderedImage#getMaxTileY()->int:::Returns the vertical index of the bottom row of tiles
com.sun.imageio.plugins.common.SimpleRenderedImage#getNumYTiles()->int:::Returns the number of tiles along the tile grid in the vertical direction
com.sun.imageio.plugins.common.SimpleRenderedImage#getSampleModel()->SampleModel:::Returns the SampleModel of the image.
com.sun.imageio.plugins.common.SimpleRenderedImage#getColorModel()->ColorModel:::Returns the ColorModel of the image.
com.sun.imageio.plugins.common.SimpleRenderedImage#getProperty(String)->Object:::Gets a property from the property set of this image
com.sun.imageio.plugins.common.SimpleRenderedImage#getPropertyNames()->String[]:::Returns a list of the properties recognized by this image
com.sun.imageio.plugins.common.SimpleRenderedImage#getPropertyNames(String)->String[]:::Returns an array of Strings recognized as names by this property source that begin with the supplied prefix
com.sun.imageio.plugins.common.SimpleRenderedImage#XToTileX(int, int, int)->int:::Converts a pixel's X coordinate into a horizontal tile index relative to a given tile grid layout specified by its X offset and tile width.
com.sun.imageio.plugins.common.SimpleRenderedImage#YToTileY(int, int, int)->int:::Converts a pixel's Y coordinate into a vertical tile index relative to a given tile grid layout specified by its Y offset and tile height.
com.sun.imageio.plugins.common.SimpleRenderedImage#XToTileX(int)->int:::Converts a pixel's X coordinate into a horizontal tile index
com.sun.imageio.plugins.common.SimpleRenderedImage#YToTileY(int)->int:::Converts a pixel's Y coordinate into a vertical tile index
com.sun.imageio.plugins.common.SimpleRenderedImage#tileXToX(int, int, int)->int:::Converts a horizontal tile index into the X coordinate of its upper left pixel relative to a given tile grid layout specified by its X offset and tile width.
com.sun.imageio.plugins.common.SimpleRenderedImage#tileYToY(int, int, int)->int:::Converts a vertical tile index into the Y coordinate of its upper left pixel relative to a given tile grid layout specified by its Y offset and tile height.
com.sun.imageio.plugins.common.SimpleRenderedImage#tileXToX(int)->int:::Converts a horizontal tile index into the X coordinate of its upper left pixel
com.sun.imageio.plugins.common.SimpleRenderedImage#tileYToY(int)->int:::Converts a vertical tile index into the Y coordinate of its upper left pixel
com.sun.imageio.plugins.common.SimpleRenderedImage#getSources()->Vector::: simple rendered image get sources
com.sun.imageio.plugins.common.SimpleRenderedImage#getData()->Raster:::Returns the entire image in a single Raster
com.sun.imageio.plugins.common.SimpleRenderedImage#getData(Rectangle)->Raster:::Returns an arbitrary rectangular region of the RenderedImage in a Raster
com.sun.imageio.plugins.common.SimpleRenderedImage#copyData(WritableRaster)->WritableRaster:::Copies an arbitrary rectangular region of the RenderedImage into a caller-supplied WritableRaster
com.sun.imageio.plugins.common.SingleTileRenderedImage#getTile(int, int)->Raster:::Returns the image's Raster as tile (0, 0).
com.sun.imageio.plugins.common.StandardMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)->boolean::: standard metadata format can node appear
com.sun.imageio.plugins.common.StandardMetadataFormatResources#getContents()->Object[][]::: standard metadata format resources get contents
com.sun.imageio.plugins.common.SubImageInputStream#read()->int::: sub image input stream read
com.sun.imageio.plugins.common.SubImageInputStream#read(byte[], int, int)->int::: sub image input stream read
com.sun.imageio.plugins.common.SubImageInputStream#length()->long::: sub image input stream length
com.sun.imageio.plugins.common.SubImageInputStream#seek(long)->void::: sub image input stream seek
com.sun.imageio.plugins.common.SubImageInputStream#finalize()->void::: sub image input stream finalize

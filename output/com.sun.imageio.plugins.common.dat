I18NImpl#getString(String, String, String):::Returns the message string with the specified key from the "properties" file in the package containing the class with the specified name.:::bundle->try->stream->Class->forName->getResourceAsStream->new->PropertyResourceBundle->catch->throw->new->RuntimeException->finally->return->bundle->handleGetObject
ImageUtil#createColorModel(SampleModel):::Creates a ColorModel that may be used with the specified SampleModel:::if->throw->new->IllegalArgumentException->dataType->sampleModel->getDataType->switch->break->return->colorModel->sampleSize->sampleModel->getSampleSize->if->numBands->sampleModel->getNumBands->colorSpace->if->ColorSpace->getInstance->else->if->ColorSpace->getInstance->else->new->BogusColorSpace->hasAlpha->isAlphaPremultiplied->transparency->new->ComponentColorModel->else->if->sampleModel->getNumBands->sppsm->bitMasks->sppsm->getBitMasks->rmask->gmask->bmask->amask->numBands->if->if->else->if->bits->for->i->return->new->DirectColorModel->else->if->bitsPerSample->numEntries->map->new->byteArr->for->i->new->IndexColorModel->return
ImageUtil#getPackedBinaryData(Raster, Rectangle):::For the case of binary data (isBinary() returns true), return the binary data as a packed byte array:::sm->raster->getSampleModel->if->isBinary->throw->I18N->getString->new->IllegalArgumentException->rectX->rectY->rectWidth->rectHeight->dataBuffer->raster->getDataBuffer->dx->raster->getSampleModelTranslateX->dy->raster->getSampleModelTranslateY->mpp->lineStride->mpp->getScanlineStride->eltOffset->dataBuffer->getOffset->mpp->getOffset->bitOffset->mpp->getBitOffset->numBytesPerRow->if->getData->return->getData->binaryDataArray->new->byteArr->b->if->if->data->getData->stride->offset->for->y->else->if->data->getData->getData->for->y->else->if->data->getData->for->y->else->if->data->getData->if->stride->offset->for->y->else->leftShift->rightShift->for->y->else->if->data->getData->getData->for->y->else->if->data->getData->for->y->return
ImageUtil#getUnpackedBinaryData(Raster, Rectangle):::Returns the binary data unpacked into an array of bytes:::sm->raster->getSampleModel->if->isBinary->throw->I18N->getString->new->IllegalArgumentException->rectX->rectY->rectWidth->rectHeight->dataBuffer->raster->getDataBuffer->dx->raster->getSampleModelTranslateX->dy->raster->getSampleModelTranslateY->mpp->lineStride->mpp->getScanlineStride->eltOffset->dataBuffer->getOffset->mpp->getOffset->bitOffset->mpp->getBitOffset->bdata->new->byteArr->maxY->maxX->k->if->data->getData->for->y->else->if->data->getData->getData->for->y->else->if->data->getData->for->y->return
ImageUtil#setPackedBinaryData(byte[], WritableRaster, Rectangle):::Sets the supplied Raster's data from an array of packed binary data of the form returned by getPackedBinaryData().:::sm->raster->getSampleModel->if->isBinary->throw->I18N->getString->new->IllegalArgumentException->rectX->rectY->rectWidth->rectHeight->dataBuffer->raster->getDataBuffer->dx->raster->getSampleModelTranslateX->dy->raster->getSampleModelTranslateY->mpp->lineStride->mpp->getScanlineStride->eltOffset->dataBuffer->getOffset->mpp->getOffset->bitOffset->mpp->getBitOffset->b->if->if->data->getData->if->return->stride->offset->for->y->else->if->data->getData->getData->for->y->else->if->data->getData->for->y->else->stride->offset->if->data->getData->if->for->y->else->rightShift->leftShift->leftShift8->mask->mask1->for->y->else->if->data->getData->getData->rightShift->leftShift->leftShift16->mask->mask1->mask2->for->y->else->if->data->getData->rightShift->leftShift->leftShift32->mask->mask1->for->y
ImageUtil#setUnpackedBinaryData(byte[], WritableRaster, Rectangle):::Copies data into the packed array of the Raster from an array of unpacked data of the form returned by getUnpackedBinaryData():::sm->raster->getSampleModel->if->isBinary->throw->I18N->getString->new->IllegalArgumentException->rectX->rectY->rectWidth->rectHeight->dataBuffer->raster->getDataBuffer->dx->raster->getSampleModelTranslateX->dy->raster->getSampleModelTranslateY->mpp->lineStride->mpp->getScanlineStride->eltOffset->dataBuffer->getOffset->mpp->getOffset->bitOffset->mpp->getBitOffset->k->if->data->getData->for->y->else->if->data->getData->getData->for->y->else->if->data->getData->for->y
ImageUtil#isIndicesForGrayscale(byte[], byte[], byte[]):::Tests whether the color indices represent a gray-scale image.:::if->return->size->if->return->for->i->return
ImageUtil#convertObjectToString(Object):::Converts the provided object to String:::if->return->s->if->bArray->for->i->return->if->iArray->for->i->return->if->sArray->for->i->return->return->obj->toString
ImageUtil#canEncodeImage(ImageWriter, ImageTypeSpecifier):::Checks that the provided ImageWriter can encode the provided ImageTypeSpecifier or not:::spi->writer->getOriginatingProvider->if->spi->canEncodeImage->throw->I18N->getString->writer->getClass->getName->new->IIOException
ImageUtil#canEncodeImage(ImageWriter, ColorModel, SampleModel):::Checks that the provided ImageWriter can encode the provided ColorModel and SampleModel:::type->if->new->ImageTypeSpecifier->canEncodeImage
ImageUtil#imageIsContiguous(RenderedImage):::Returns whether the image has contiguous data across rows.:::sm->if->ras->getRaster->ras->getSampleModel->else->image->getSampleModel->if->csm->if->csm->getPixelStride->csm->getNumBands->return->bandOffsets->csm->getBandOffsets->for->i->bankIndices->csm->getBankIndices->for->i->return->return->ImageUtil->isBinary
ImageUtil#getDestinationType(ImageReadParam, Iterator):::Gets the destination image type.:::if->imageTypes->hasNext->throw->new->IllegalArgumentException->imageType->if->param->getDestinationType->if->o->imageTypes->next->if->throw->new->IllegalArgumentException->else->foundIt->while->imageTypes->hasNext->type->imageTypes->next->if->type->equals->break->if->throw->new->IIOException->return
ImageUtil#isNonStandardICCColorSpace(ColorSpace):::Returns true if the given ColorSpace object is an instance of ICC_ColorSpace but is not one of the standard ColorSpaces returned by ColorSpace.getInstance().:::retval->try->cs->isCS_sRGB->cs->ColorSpace->getInstance->equals->cs->ColorSpace->getInstance->equals->cs->ColorSpace->getInstance->equals->cs->ColorSpace->getInstance->equals->catch->finally->return
PaletteBuilder#createIndexedImage(RenderedImage):::Creates an image representing given image src using IndexColorModel:::pb->new->PaletteBuilder->pb->buildPalette->return->pb->getIndexedImage
PaletteBuilder#createIndexColorModel(RenderedImage):::Creates an palette representing colors from given image img:::pb->new->PaletteBuilder->pb->buildPalette->return->pb->getIndexColorModel
PaletteBuilder#canCreatePalette(ImageTypeSpecifier):::Returns true if PaletteBuilder is able to create palette for given image type.:::if->throw->new->IllegalArgumentException->return
PaletteBuilder#canCreatePalette(RenderedImage):::Returns true if PaletteBuilder is able to create palette for given rendered image.:::if->throw->new->IllegalArgumentException->type->new->ImageTypeSpecifier->return->canCreatePalette
ReaderUtil#computeUpdatedPixels(Rectangle, Point, int, int, int, int, int, int, int, int, int, int, int, int):::A utility method that computes the exact set of destination pixels that will be written during a particular decoding pass:::vals->new->intArr->computeUpdatedPixels->computeUpdatedPixels->return
SimpleRenderedImage#getMinX():::Returns the X coordinate of the leftmost column of the image.:::return
SimpleRenderedImage#getMaxX():::Returns the X coordinate of the column immediatetely to the right of the rightmost column of the image:::return->getMinX->getWidth
SimpleRenderedImage#getMinY():::Returns the X coordinate of the uppermost row of the image.:::return
SimpleRenderedImage#getMaxY():::Returns the Y coordinate of the row immediately below the bottom row of the image:::return->getMinY->getHeight
SimpleRenderedImage#getWidth():::Returns the width of the image.:::return
SimpleRenderedImage#getHeight():::Returns the height of the image.:::return
SimpleRenderedImage#getBounds():::Returns a Rectangle indicating the image bounds.:::return->getMinX->getMinY->getWidth->getHeight->new->Rectangle
SimpleRenderedImage#getTileWidth():::Returns the width of a tile.:::return
SimpleRenderedImage#getTileHeight():::Returns the height of a tile.:::return
SimpleRenderedImage#getTileGridXOffset():::Returns the X coordinate of the upper-left pixel of tile (0, 0).:::return
SimpleRenderedImage#getTileGridYOffset():::Returns the Y coordinate of the upper-left pixel of tile (0, 0).:::return
SimpleRenderedImage#getMinTileX():::Returns the horizontal index of the leftmost column of tiles:::return->getMinX->XToTileX
SimpleRenderedImage#getMaxTileX():::Returns the horizontal index of the rightmost column of tiles:::return->getMaxX->XToTileX
SimpleRenderedImage#getNumXTiles():::Returns the number of tiles along the tile grid in the horizontal direction:::return->getMaxTileX->getMinTileX
SimpleRenderedImage#getMinTileY():::Returns the vertical index of the uppermost row of tiles:::return->getMinY->YToTileY
SimpleRenderedImage#getMaxTileY():::Returns the vertical index of the bottom row of tiles:::return->getMaxY->YToTileY
SimpleRenderedImage#getNumYTiles():::Returns the number of tiles along the tile grid in the vertical direction:::return->getMaxTileY->getMinTileY
SimpleRenderedImage#getSampleModel():::Returns the SampleModel of the image.:::return
SimpleRenderedImage#getColorModel():::Returns the ColorModel of the image.:::return
SimpleRenderedImage#getProperty(String):::Gets a property from the property set of this image:::name->toLowerCase->value->properties->get->return
SimpleRenderedImage#getPropertyNames():::Returns a list of the properties recognized by this image:::names->if->properties->size->properties->size->new->StringArr->index->e->properties->keys->while->e->hasMoreElements->name->e->nextElement->return
SimpleRenderedImage#getPropertyNames(String):::Returns an array of Strings recognized as names by this property source that begin with the supplied prefix:::propertyNames->getPropertyNames->if->return->prefix->toLowerCase->names->new->Vector<String>->for->i->if->names->size->return->prefixNames->names->size->new->StringArr->count->for->it->names->iterator->it->hasNext->return
SimpleRenderedImage#XToTileX(int, int, int):::Converts a pixel's X coordinate into a horizontal tile index relative to a given tile grid layout specified by its X offset and tile width.:::if->return
SimpleRenderedImage#YToTileY(int, int, int):::Converts a pixel's Y coordinate into a vertical tile index relative to a given tile grid layout specified by its Y offset and tile height.:::if->return
SimpleRenderedImage#XToTileX(int):::Converts a pixel's X coordinate into a horizontal tile index:::return->getTileGridXOffset->getTileWidth->XToTileX
SimpleRenderedImage#YToTileY(int):::Converts a pixel's Y coordinate into a vertical tile index:::return->getTileGridYOffset->getTileHeight->YToTileY
SimpleRenderedImage#tileXToX(int, int, int):::Converts a horizontal tile index into the X coordinate of its upper left pixel relative to a given tile grid layout specified by its X offset and tile width.:::return
SimpleRenderedImage#tileYToY(int, int, int):::Converts a vertical tile index into the Y coordinate of its upper left pixel relative to a given tile grid layout specified by its Y offset and tile height.:::return
SimpleRenderedImage#tileXToX(int):::Converts a horizontal tile index into the X coordinate of its upper left pixel:::return
SimpleRenderedImage#tileYToY(int):::Converts a vertical tile index into the Y coordinate of its upper left pixel:::return
SimpleRenderedImage#getData():::Returns the entire image in a single Raster:::rect->getMinX->getMinY->getWidth->getHeight->new->Rectangle->return->getData
SimpleRenderedImage#getData(Rectangle):::Returns an arbitrary rectangular region of the RenderedImage in a Raster:::imageBounds->getBounds->if->else->if->bounds->intersects->throw->new->IllegalArgumentException->startX->XToTileX->startY->YToTileY->endX->XToTileX->endY->YToTileY->if->tile->getTile->return->tile->createChild->else->if->imageBounds->contains->xsect->bounds->intersection->XToTileX->YToTileY->XToTileX->YToTileY->sm->sampleModel->createCompatibleSampleModel->dest->Raster->bounds->getLocation->createWritableRaster->for->j->return
SimpleRenderedImage#copyData(WritableRaster):::Copies an arbitrary rectangular region of the RenderedImage into a caller-supplied WritableRaster:::imageBounds->getBounds->bounds->if->p->new->Point->sm->sampleModel->createCompatibleSampleModel->Raster->createWritableRaster->else->dest->getBounds->xsect->imageBounds->contains->bounds->intersection->startX->XToTileX->startY->YToTileY->endX->XToTileX->endY->YToTileY->for->j->return
SingleTileRenderedImage#getTile(int, int):::Returns the image's Raster as tile (0, 0).:::if->throw->new->IllegalArgumentException->return

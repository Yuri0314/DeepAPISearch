AbstractClassLoaderValue#key():::Returns the key component of this ClassLoaderValue:::
AbstractClassLoaderValue#sub(K):::Constructs new sub-ClassLoaderValue of this ClassLoaderValue with given key component.:::return->new->Sub<>
AbstractClassLoaderValue#isEqualOrDescendantOf(AbstractClassLoaderValue):::Returns true if this ClassLoaderValue is equal to given clv or if this ClassLoaderValue was derived from given clv by a chain of #sub(Object) invocations.:::
AbstractClassLoaderValue#get(ClassLoader):::Returns the value associated with this ClassLoaderValue and given ClassLoader or null if there is none.:::val->AbstractClassLoaderValue->map->get->try->return->extractValue->catch->throw->return->finally
AbstractClassLoaderValue#putIfAbsent(ClassLoader, V):::Associates given value v with this ClassLoaderValue and given ClassLoader and returns null if there was no previously associated value or does nothing and returns previously associated value if there was one.:::map->map->clv->while->try->val->map->putIfAbsent->return->extractValue->catch->throw->finally
AbstractClassLoaderValue#remove(ClassLoader, Object):::Removes the value associated with this ClassLoaderValue and given ClassLoader if the associated value is equal to given value v and returns true or does nothing and returns false if there is no currently associated value or it is not equal to given value v.:::return->AbstractClassLoaderValue->map->remove
AbstractClassLoaderValue#computeIfAbsent(ClassLoader, BiFunction):::Returns the value associated with this ClassLoaderValue and given ClassLoader if there is one or computes the value by invoking given mappingFunction, associates it and returns it:::map->map->clv->mv->while->val->map->get->map->putIfAbsent->if->if->new->Memoizer<>->continue->try->v->mv->get->map->replace->return->catch->map->remove->throw->finally->else->try->return->extractValue->catch->throw->finally
AbstractClassLoaderValue#removeAll(ClassLoader):::Removes all values associated with given ClassLoader cl and #isEqualOrDescendantOf(AbstractClassLoaderValue) this or descendants of this ClassLoaderValue:::map->map->for->i->map->keySet->iterator->i->hasNext
AbstractClassLoaderValue.Sub#isEqualOrDescendantOf(AbstractClassLoaderValue):::sub-ClassLoaderValue is a descendant of given clv if it is either equal to it or if its #parent() parent is a descendant of given clv.:::return->Objects->requireNonNull->equals->parent->isEqualOrDescendantOf
BootLoader#getUnnamedModule():::Returns the unnamed module for the boot loader.:::return
BootLoader#getServicesCatalog():::Returns the ServiceCatalog for modules defined to the boot class loader.:::return
BootLoader#getClassLoaderValueMap():::Returns the ClassLoaderValue map for the boot class loader.:::return
BootLoader#hasClassPath():::Returns true if there is a class path associated with the BootLoader.:::return->ClassLoaders->bootLoader->hasClassPath
BootLoader#loadModule(ModuleReference):::Registers a module with this class loader so that its classes (and resources) become visible via this class loader.:::ClassLoaders->bootLoader->loadModule
BootLoader#loadClassOrNull(String):::Loads the Class object with the given name defined to the boot loader.:::return->ClassLoaders->bootLoader->loadClassOrNull
BootLoader#loadClass(Module, String):::Loads the Class object with the given name in the given module defined to the boot loader:::c->loadClassOrNull->if->c->getModule->return->else->return
BootLoader#findResource(String, String):::Returns a URL to a resource in a module defined to the boot loader.:::return->ClassLoaders->bootLoader->findResource
BootLoader#findResourceAsStream(String, String):::Returns an input stream to a resource in a module defined to the boot loader.:::return->ClassLoaders->bootLoader->findResourceAsStream
BootLoader#findResource(String):::Returns the URL to the given resource in any of the modules defined to the boot loader and the boot class path.:::return->ClassLoaders->bootLoader->findResource
BootLoader#findResources(String):::Returns an Iterator to iterate over the resources of the given name in any of the modules defined to the boot loader.:::return->ClassLoaders->bootLoader->findResources
BootLoader#definePackage(Class):::Define a package for the given class to the boot loader, if not already defined.:::return->c->getPackageName->getDefinedPackage
BootLoader#getDefinedPackage(String):::Returns the Package of the given name defined to the boot loader or null if the package has not been defined.:::pkg->ClassLoaders->bootLoader->getDefinedPackage->if->location->pn->replace->getSystemPackageLocation->if->PackageHelper->pn->intern->definePackage->return
BootLoader#packages():::Returns a stream of the packages defined to the boot loader.:::return->Arrays->getSystemPackageNames->stream->name->replace->getDefinedPackage->map
BootLoader.PackageHelper#definePackage(String, String):::Define the Package with the given name:::module->findModule->if->if->name->isEmpty->throw->new->InternalError->return->JLA->ClassLoaders->bootLoader->definePackage->url->toFileURL->man->getManifest->return->ClassLoaders->bootLoader->defineOrCheckPackage
BuiltinClassLoader#hasClassPath():::Returns true if there is a class path associated with this class loader.:::return
BuiltinClassLoader#loadModule(ModuleReference):::Register a module this class loader:::mn->mref->descriptor->name->if->nameToModule->putIfAbsent->throw->new->InternalError->loadedModule->new->LoadedModule->foreach->mref->descriptor->packages->other->packageToModule->putIfAbsent->if->throw->other->mref->descriptor->name->new->InternalError->if->VM->isModuleSystemInited
BuiltinClassLoader#findModule(String):::Returns the ModuleReference for the named module defined to this class loader; or null if not defined.:::return->nameToModule->get
BuiltinClassLoader#findResource(String, String):::Returns a URL to a resource of the given name in a module defined to this class loader.:::url->if->mref->nameToModule->get->if->findResource->else->findResourceOnClassPath->return->checkURL
BuiltinClassLoader#findResourceAsStream(String, String):::Returns an input stream to a resource of the given name in a module defined to this class loader.:::if->System->getSecurityManager->url->findResource->return->url->openStream->mref->nameToModule->get->if->return->moduleReaderFor->open->orElse->else->return
BuiltinClassLoader#findResource(String):::Finds a resource with the given name in the modules defined to this class loader or its class path.:::pn->Resources->toPackageName->module->packageToModule->get->if->if->module->loader->url->try->module->name->findResource->catch->return->finally->if->name->endsWith->url->toString->endsWith->module->mref->isOpen->return->else->try->urls->findMiscResource->if->urls->isEmpty->url->urls->get->if->return->checkURL->catch->return->finally->url->findResourceOnClassPath->return->checkURL
BuiltinClassLoader#findResources(String):::Returns an enumeration of URL objects to all the resources with the given name in modules defined to this class loader or on the class path of this loader.:::checked->new->ArrayList<>->pn->Resources->toPackageName->module->packageToModule->get->if->if->module->loader->url->module->name->findResource->if->name->endsWith->url->toString->endsWith->module->mref->isOpen->checked->add->else->foreach->findMiscResource->checkURL->if->checked->add->e->findResourcesOnClassPath->return->new->Enumeration<>
BuiltinClassLoader#findClass(String):::Finds the class with the specified binary name.:::if->VM->isModuleSystemInited->throw->new->ClassNotFoundException->loadedModule->findLoadedModule->c->if->if->loadedModule->loader->findClassInModuleOrNull->else->if->hasClassPath->findClassOnClassPathOrNull->if->throw->new->ClassNotFoundException->return
BuiltinClassLoader#findClass(String, String):::Finds the class with the specified binary name in a module:::if->loadedModule->findLoadedModule->if->return->return->findClassInModuleOrNull->if->hasClassPath->return->findClassOnClassPathOrNull->return
BuiltinClassLoader#loadClass(String, boolean):::Loads the class with the specified binary name.:::c->loadClassOrNull->if->throw->new->ClassNotFoundException->return
BuiltinClassLoader#loadClassOrNull(String, boolean):::A variation of loadClass to load a class with the specified binary name:::synchronized->getClassLoadingLock->c->findLoadedClass->if->loadedModule->findLoadedModule->if->loader->loadedModule->loader->if->if->VM->isModuleSystemInited->findClassInModuleOrNull->else->loader->loadClassOrNull->else->if->parent->loadClassOrNull->if->hasClassPath->VM->isModuleSystemInited->findClassOnClassPathOrNull->if->resolveClass->return
BuiltinClassLoader#loadClassOrNull(String):::A variation of loadClass to load a class with the specified binary name:::return->loadClassOrNull
BuiltinClassLoader#defineOrCheckPackage(String, Manifest, URL):::Defines a package in this ClassLoader:::pkg->getAndVerifyPackage->if->try->if->definePackage->else->definePackage->catch->getAndVerifyPackage->if->throw->new->InternalError->finally->return
BuiltinClassLoader#getPermissions(CodeSource):::Returns the permissions for the given CodeSource.:::return->super->getPermissions->new->LazyCodeSourcePermissionCollection
ClassLoaders#bootLoader():::Returns the class loader that is used to find resources in modules defined to the boot class loader.:::return
ClassLoaders#platformClassLoader():::Returns the platform class loader.:::return
ClassLoaders#appClassLoader():::Returns the application class loader.:::return
ClassLoaderValue#isEqualOrDescendantOf(AbstractClassLoaderValue):::root-ClassLoaderValue can only be equal to itself and has no predecessors.:::return->Objects->requireNonNull->equals
Loader#initRemotePackageMap(Configuration, List):::Completes initialization of this Loader:::foreach->nameToModule->keySet->resolvedModule->cf->findModule->get->foreach->resolvedModule->reads->mn->other->name->loader->if->other->configuration->if->continue->pool->loaderFor->else->layer->parentModuleLayers->stream->other->configuration->findModuleLayer->map->Optional->stream->flatMap->findAny->new->InternalError->orElseThrow->layer->findLoader->if->ClassLoaders->platformClassLoader->target->resolvedModule->name->descriptor->other->reference->descriptor->foreach->descriptor->exports->delegate->if->e->isQualified->other->configuration->e->targets->contains->else->if->pn->e->source->l->remotePackageToLoader->putIfAbsent->if->throw->new->IllegalArgumentException->return
Loader#pool():::Returns the loader pool that this loader is in or null if this loader is not in a loader pool.:::return
Loader#findResource(String, String):::Returns a URL to a resource of the given name in a module defined to this class loader.:::mref->nameToModule->get->if->return->url->try->AccessController->new->PrivilegedExceptionAction<URL>->doPrivileged->catch->throw->pae->getCause->finally->if->System->getSecurityManager->try->urlToCheck->AccessController->new->PrivilegedExceptionAction<URL>->doPrivileged->catch->finally->return
Loader#findClass(String):::Finds the class with the specified binary name.:::c->loadedModule->findLoadedModule->if->findClassInModuleOrNull->if->throw->new->ClassNotFoundException->return
Loader#findClass(String, String):::Finds the class with the specified binary name in the given module:::c->loadedModule->findLoadedModule->if->loadedModule->name->equals->findClassInModuleOrNull->return
Loader#loadClass(String, boolean):::Loads the class with the specified binary name.:::sm->System->getSecurityManager->if->pn->packageName->if->pn->isEmpty->sm->checkPackageAccess->synchronized->getClassLoadingLock->c->findLoadedClass->if->loadedModule->findLoadedModule->if->findClassInModuleOrNull->else->pn->packageName->loader->remotePackageToLoader->get->if->if->BootLoader->loadClassOrNull->else->loader->loadClass->if->throw->new->ClassNotFoundException->if->resolveClass->return
Loader#getPermissions(CodeSource):::Returns the permissions for the given CodeSource.:::perms->super->getPermissions->url->cs->getLocation->if->return->try->p->url->openConnection->getPermission->if->if->path->p->getName->if->path->endsWith->new->FilePermission->perms->add->catch->finally->return
LoaderPool#loaderFor(String):::Returns the class loader for the named module:::loader->loaders->get->return
LoaderPool#loaders():::Returns a stream of the loaders in this pool.:::return->loaders->values->stream
Resource#getName():::Returns the name of the Resource.:::
Resource#getURL():::Returns the URL of the Resource.:::
Resource#getCodeSourceURL():::Returns the CodeSource URL for the Resource.:::
Resource#getInputStream():::Returns an InputStream for reading the Resource data.:::
Resource#getContentLength():::Returns the length of the Resource data, or -1 if unknown.:::
Resource#getBytes():::Returns the Resource data as an array of bytes.:::b->in->cachedInputStream->isInterrupted->Thread->interrupted->len->for->try->new->byteArr->if->pos->while->bytesToRead->if->Math->min->if->Arrays->copyOf->else->cc->try->in->read->catch->Thread->interrupted->finally->if->if->throw->new->EOFException->else->if->Arrays->copyOf->break->catch->finally->try->in->close->catch->finally->if->Thread->currentThread->interrupt->return
Resource#getByteBuffer():::Returns the Resource data as a ByteBuffer, but only if the input stream was implemented on top of a ByteBuffer:::in->cachedInputStream->if->return->getByteBuffer->return
Resource#getManifest():::Returns the Manifest for the Resource, or null if none.:::return
Resource#getCertificates():::Returns theCertificates for the Resource, or null if none.:::return
Resource#getCodeSigners():::Returns the code signers for the Resource, or null if none.:::return
URLClassPath#addURL(URL):::Appends the specified URL to the search path of directory and JAR file URLs from which to load classes and resources:::if->return->synchronized->if->path->contains->unopenedUrls->addLast->path->add
URLClassPath#addFile(String):::Appends the specified file path as a file URL to the search path.:::url->toFileURL->if->addURL
URLClassPath#getURLs():::Returns the original search path of URLs.:::synchronized->return->path->new->URLArr->toArray
URLClassPath#findResource(String, boolean):::Finds the resource with the specified name on the URL search path or null if not found or security check fails.:::loader->for->i->getLoader->return
URLClassPath#getResource(String, boolean):::Finds the first Resource on the URL search path which has the specified name:::if->println->loader->for->i->getLoader->return
URLClassPath#findResources(String, boolean):::Finds all resources on the URL search path with the given name:::return->new->Enumeration<>
URLClassPath#getResources(String, boolean):::Finds all resources on the URL search path with the given name:::return->new->Enumeration<>
URLClassPath.JarLoader#tryResolveFile(URL, String):::Attempt to return a file URL by resolving input against a base file URL:::index->input->indexOf->isFile->if->scheme->input->substring->equalsIgnoreCase->else->return->new->URL
URLClassPath.JarLoader#tryResolveNonFile(URL, String):::Attempt to return a URL by resolving input against a base URL:::child->input->replace->if->isRelative->url->new->URL->bp->base->getPath->urlp->url->getPath->pos->bp->lastIndexOf->if->bp->length->if->urlp->regionMatches->urlp->indexOf->return->return
URLClassPath.JarLoader#isRelative(String):::Returns true if the given input is a relative URI.:::try->return->URI->create->isAbsolute->catch->return->finally

AbstractClassLoaderValue#key():::Returns the key component of this ClassLoaderValue:::
AbstractClassLoaderValue#sub(K):::Constructs new sub-ClassLoaderValue of this ClassLoaderValue with given key component.:::return->new->Sub<>
AbstractClassLoaderValue#isEqualOrDescendantOf(AbstractClassLoaderValue):::Returns true if this ClassLoaderValue is equal to given clv or if this ClassLoaderValue was derived from given clv by a chain of #sub(Object) invocations.:::
AbstractClassLoaderValue#get(ClassLoader):::Returns the value associated with this ClassLoaderValue and given ClassLoader or null if there is none.:::val->AbstractClassLoaderValue->map->get->try->return->extractValue->catch->throw->return->finally
AbstractClassLoaderValue#putIfAbsent(ClassLoader, V):::Associates given value v with this ClassLoaderValue and given ClassLoader and returns null if there was no previously associated value or does nothing and returns previously associated value if there was one.:::map->map->clv->while->try->val->map->putIfAbsent->return->extractValue->catch->throw->finally
AbstractClassLoaderValue#remove(ClassLoader, Object):::Removes the value associated with this ClassLoaderValue and given ClassLoader if the associated value is equal to given value v and returns true or does nothing and returns false if there is no currently associated value or it is not equal to given value v.:::return->AbstractClassLoaderValue->map->remove
AbstractClassLoaderValue#computeIfAbsent(ClassLoader, BiFunction):::Returns the value associated with this ClassLoaderValue and given ClassLoader if there is one or computes the value by invoking given mappingFunction, associates it and returns it:::map->map->clv->mv->while->val->map->get->map->putIfAbsent->if->if->new->Memoizer<>->continue->try->v->mv->get->map->replace->return->catch->map->remove->throw->finally->else->try->return->extractValue->catch->throw->finally
AbstractClassLoaderValue#removeAll(ClassLoader):::Removes all values associated with given ClassLoader cl and #isEqualOrDescendantOf(AbstractClassLoaderValue) this or descendants of this ClassLoaderValue:::map->map->for->i->map->keySet->iterator->i->hasNext
AbstractClassLoaderValue#map(ClassLoader)::: abstract class loader value map:::return->BootLoader->getClassLoaderValueMap->JLA->createOrGetClassLoaderValueMap
AbstractClassLoaderValue#extractValue(Object)::: abstract class loader value extract value:::if->return->get->else->return
AbstractClassLoaderValue.Memoizer#get()::: memoizer get:::v->if->return->t->if->synchronized->if->if->throw->new->RecursiveInvocationException->try->Objects->mappingFunction->apply->requireNonNull->catch->finally->if->return->if->throw->else->if->throw->else->throw->new->UndeclaredThrowableException
AbstractClassLoaderValue.Sub#parent()::: sub parent:::return
AbstractClassLoaderValue.Sub#key()::: sub key:::return
AbstractClassLoaderValue.Sub#isEqualOrDescendantOf(AbstractClassLoaderValue):::sub-ClassLoaderValue is a descendant of given clv if it is either equal to it or if its #parent() parent is a descendant of given clv.:::return->Objects->requireNonNull->equals->parent->isEqualOrDescendantOf
AbstractClassLoaderValue.Sub#equals(Object)::: sub equals:::if->return->if->return->that->return->this->parent->that->parent->equals->Objects->equals
AbstractClassLoaderValue.Sub#hashCode()::: sub hash code:::return->parent->hashCode->Objects->hashCode
BootLoader#getUnnamedModule():::Returns the unnamed module for the boot loader.:::return
BootLoader#getServicesCatalog():::Returns the ServiceCatalog for modules defined to the boot class loader.:::return
BootLoader#getClassLoaderValueMap():::Returns the ClassLoaderValue map for the boot class loader.:::return
BootLoader#hasClassPath():::Returns true if there is a class path associated with the BootLoader.:::return->ClassLoaders->bootLoader->hasClassPath
BootLoader#loadModule(ModuleReference):::Registers a module with this class loader so that its classes (and resources) become visible via this class loader.:::ClassLoaders->bootLoader->loadModule
BootLoader#loadClassOrNull(String):::Loads the Class object with the given name defined to the boot loader.:::return->ClassLoaders->bootLoader->loadClassOrNull
BootLoader#loadClass(Module, String):::Loads the Class object with the given name in the given module defined to the boot loader:::c->loadClassOrNull->if->c->getModule->return->else->return
BootLoader#findResource(String, String):::Returns a URL to a resource in a module defined to the boot loader.:::return->ClassLoaders->bootLoader->findResource
BootLoader#findResourceAsStream(String, String):::Returns an input stream to a resource in a module defined to the boot loader.:::return->ClassLoaders->bootLoader->findResourceAsStream
BootLoader#findResource(String):::Returns the URL to the given resource in any of the modules defined to the boot loader and the boot class path.:::return->ClassLoaders->bootLoader->findResource
BootLoader#findResources(String):::Returns an Iterator to iterate over the resources of the given name in any of the modules defined to the boot loader.:::return->ClassLoaders->bootLoader->findResources
BootLoader#definePackage(Class):::Define a package for the given class to the boot loader, if not already defined.:::return->c->getPackageName->getDefinedPackage
BootLoader#getDefinedPackage(String):::Returns the Package of the given name defined to the boot loader or null if the package has not been defined.:::pkg->ClassLoaders->bootLoader->getDefinedPackage->if->location->pn->replace->getSystemPackageLocation->if->PackageHelper->pn->intern->definePackage->return
BootLoader#packages():::Returns a stream of the packages defined to the boot loader.:::return->Arrays->getSystemPackageNames->stream->name->replace->getDefinedPackage->map
BootLoader.PackageHelper#definePackage(String, String):::Define the Package with the given name:::module->findModule->if->if->name->isEmpty->throw->new->InternalError->return->JLA->ClassLoaders->bootLoader->definePackage->url->toFileURL->man->getManifest->return->ClassLoaders->bootLoader->defineOrCheckPackage
BootLoader.PackageHelper#findModule(String):::Finds the module at the given location defined to the boot loader:::mn->if->location->startsWith->location->location->length->substring->else->if->location->startsWith->path->Path->URI->create->of->modulesDir->Path->of->if->path->startsWith->path->getFileName->toString->if->name->return->Modules->findLoadedModule->new->InternalError->orElseThrow->else->return
BootLoader.PackageHelper#toFileURL(String):::Returns URL if the given location is a regular file path.:::return->AccessController->new->PrivilegedAction<>->doPrivileged
BootLoader.PackageHelper#getManifest(String):::Returns the Manifest if the given location is a JAR file containing a manifest.:::return->AccessController->new->PrivilegedAction<>->doPrivileged
BootLoader#getSystemPackageNames():::Returns an array of the binary name of the packages defined by the boot loader, in VM internal form (forward slashes instead of dot).:::
BootLoader#getSystemPackageLocation(String):::Returns the location of the package of the given name, if defined by the boot loader; otherwise null is returned:::
BootLoader#setBootLoaderUnnamedModule0(Module)::: boot loader set boot loader unnamed module0:::
BuiltinClassLoader.LoadedModule#loader()::: loaded module loader:::return
BuiltinClassLoader.LoadedModule#mref()::: loaded module mref:::return
BuiltinClassLoader.LoadedModule#name()::: loaded module name:::return->mref->descriptor->name
BuiltinClassLoader.LoadedModule#codeSourceURL()::: loaded module code source l:::return
BuiltinClassLoader#hasClassPath():::Returns true if there is a class path associated with this class loader.:::return
BuiltinClassLoader#loadModule(ModuleReference):::Register a module this class loader:::mn->mref->descriptor->name->if->nameToModule->putIfAbsent->throw->new->InternalError->loadedModule->new->LoadedModule->foreach->mref->descriptor->packages->other->packageToModule->putIfAbsent->if->throw->other->mref->descriptor->name->new->InternalError->if->VM->isModuleSystemInited
BuiltinClassLoader#findModule(String):::Returns the ModuleReference for the named module defined to this class loader; or null if not defined.:::return->nameToModule->get
BuiltinClassLoader#findResource(String, String):::Returns a URL to a resource of the given name in a module defined to this class loader.:::url->if->mref->nameToModule->get->if->findResource->else->findResourceOnClassPath->return->checkURL
BuiltinClassLoader#findResourceAsStream(String, String):::Returns an input stream to a resource of the given name in a module defined to this class loader.:::if->System->getSecurityManager->url->findResource->return->url->openStream->mref->nameToModule->get->if->return->moduleReaderFor->open->orElse->else->return
BuiltinClassLoader#findResource(String):::Finds a resource with the given name in the modules defined to this class loader or its class path.:::pn->Resources->toPackageName->module->packageToModule->get->if->if->module->loader->url->try->module->name->findResource->catch->return->finally->if->name->endsWith->url->toString->endsWith->module->mref->isOpen->return->else->try->urls->findMiscResource->if->urls->isEmpty->url->urls->get->if->return->checkURL->catch->return->finally->url->findResourceOnClassPath->return->checkURL
BuiltinClassLoader#findResources(String):::Returns an enumeration of URL objects to all the resources with the given name in modules defined to this class loader or on the class path of this loader.:::checked->new->ArrayList<>->pn->Resources->toPackageName->module->packageToModule->get->if->if->module->loader->url->module->name->findResource->if->name->endsWith->url->toString->endsWith->module->mref->isOpen->checked->add->else->foreach->findMiscResource->checkURL->if->checked->add->e->findResourcesOnClassPath->return->new->Enumeration<>
BuiltinClassLoader#findMiscResource(String):::Returns the list of URLs to a "miscellaneous" resource in modules defined to this loader:::ref->map->ref->get->if->new->ConcurrentHashMap<>->new->SoftReference<>->else->urls->map->get->if->return->urls->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->pae->getCause->finally->if->VM->isModuleSystemInited->map->putIfAbsent->return
BuiltinClassLoader#findResource(ModuleReference, String):::Returns the URL to a resource in a module or null if not found.:::u->if->System->getSecurityManager->moduleReaderFor->find->orElse->else->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->pae->getCause->finally->if->try->return->u->toURL->catch->finally->return
BuiltinClassLoader#findResourceOrNull(ModuleReference, String):::Returns the URL to a resource in a module:::try->return->findResource->catch->return->finally
BuiltinClassLoader#findResourceOnClassPath(String):::Returns a URL to a resource on the class path.:::if->hasClassPath->if->System->getSecurityManager->return->ucp->findResource->else->pa->ucp->findResource->return->AccessController->doPrivileged->else->return
BuiltinClassLoader#findResourcesOnClassPath(String):::Returns the URLs of all resources of the given name on the class path.:::if->hasClassPath->if->System->getSecurityManager->return->ucp->findResources->else->pa->ucp->findResources->return->AccessController->doPrivileged->else->return->Collections->emptyEnumeration
BuiltinClassLoader#findClass(String):::Finds the class with the specified binary name.:::if->VM->isModuleSystemInited->throw->new->ClassNotFoundException->loadedModule->findLoadedModule->c->if->if->loadedModule->loader->findClassInModuleOrNull->else->if->hasClassPath->findClassOnClassPathOrNull->if->throw->new->ClassNotFoundException->return
BuiltinClassLoader#findClass(String, String):::Finds the class with the specified binary name in a module:::if->loadedModule->findLoadedModule->if->return->return->findClassInModuleOrNull->if->hasClassPath->return->findClassOnClassPathOrNull->return
BuiltinClassLoader#loadClass(String, boolean):::Loads the class with the specified binary name.:::c->loadClassOrNull->if->throw->new->ClassNotFoundException->return
BuiltinClassLoader#loadClassOrNull(String, boolean):::A variation of loadClass to load a class with the specified binary name:::synchronized->getClassLoadingLock->c->findLoadedClass->if->loadedModule->findLoadedModule->if->loader->loadedModule->loader->if->if->VM->isModuleSystemInited->findClassInModuleOrNull->else->loader->loadClassOrNull->else->if->parent->loadClassOrNull->if->hasClassPath->VM->isModuleSystemInited->findClassOnClassPathOrNull->if->resolveClass->return
BuiltinClassLoader#loadClassOrNull(String):::A variation of loadClass to load a class with the specified binary name:::return->loadClassOrNull
BuiltinClassLoader#findLoadedModule(String):::Finds the candidate loaded module for the given class name:::pos->cn->lastIndexOf->if->return->pn->cn->substring->return->packageToModule->get
BuiltinClassLoader#findLoadedModule(String, String):::Finds the candidate loaded module for the given class name in the named module:::loadedModule->findLoadedModule->if->mn->loadedModule->name->equals->return->else->return
BuiltinClassLoader#findClassInModuleOrNull(LoadedModule, String):::Finds the class with the specified binary name if in a module defined to this ClassLoader.:::if->System->getSecurityManager->return->defineClass->else->pa->defineClass->return->AccessController->doPrivileged
BuiltinClassLoader#findClassOnClassPathOrNull(String):::Finds the class with the specified binary name on the class path.:::path->cn->replace->concat->if->System->getSecurityManager->res->ucp->getResource->if->try->return->defineClass->catch->finally->return->else->pa->new->PrivilegedAction<>->return->AccessController->doPrivileged
BuiltinClassLoader#defineClass(String, LoadedModule):::Defines the given binary class name to the VM, loading the class bytes from the given module.:::mref->loadedModule->mref->reader->moduleReaderFor->try->bb->csURL->rn->cn->replace->concat->if->r->findResource->if->r->getByteBuffer->r->getCodeSourceURL->else->reader->read->orElse->loadedModule->codeSourceURL->if->return->cs->new->CodeSource->try->return->defineClass->catch->finally->reader->release->catch->return->finally
BuiltinClassLoader#defineClass(String, Resource):::Defines the given binary class name to the VM, loading the class bytes via the given Resource object.:::url->res->getCodeSourceURL->pos->cn->lastIndexOf->if->pn->cn->substring->man->res->getManifest->defineOrCheckPackage->bb->res->getByteBuffer->if->signers->res->getCodeSigners->cs->new->CodeSource->return->defineClass->else->b->res->getBytes->signers->res->getCodeSigners->cs->new->CodeSource->return->defineClass
BuiltinClassLoader#defineOrCheckPackage(String, Manifest, URL):::Defines a package in this ClassLoader:::pkg->getAndVerifyPackage->if->try->if->definePackage->else->definePackage->catch->getAndVerifyPackage->if->throw->new->InternalError->finally->return
BuiltinClassLoader#getAndVerifyPackage(String, Manifest, URL):::Gets the Package with the specified package name:::pkg->getDefinedPackage->if->if->pkg->isSealed->if->pkg->isSealed->throw->new->SecurityException->else->if->isSealed->throw->new->SecurityException->return
BuiltinClassLoader#definePackage(String, Manifest, URL):::Defines a new package in this ClassLoader:::specTitle->specVersion->specVendor->implTitle->implVersion->implVendor->sealed->sealBase->if->attr->SharedSecrets->javaUtilJarAccess->pn->replace->concat->getTrustedAttributes->if->attr->getValue->attr->getValue->attr->getValue->attr->getValue->attr->getValue->attr->getValue->attr->getValue->man->getMainAttributes->if->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->attr->getValue->if->equalsIgnoreCase->return->definePackage
BuiltinClassLoader#isSealed(String, Manifest):::Returns true if the specified package name is sealed according to the given manifest.:::attr->SharedSecrets->javaUtilJarAccess->pn->replace->concat->getTrustedAttributes->sealed->if->attr->getValue->if->man->getMainAttributes->attr->getValue->return->equalsIgnoreCase
BuiltinClassLoader#getPermissions(CodeSource):::Returns the permissions for the given CodeSource.:::return->super->getPermissions->new->LazyCodeSourcePermissionCollection
BuiltinClassLoader#moduleReaderFor(ModuleReference):::Returns the ModuleReader for the given module, creating it if needed.:::reader->moduleToReader->get->if->create->new->Function<>->moduleToReader->computeIfAbsent->return
BuiltinClassLoader.NullModuleReader#find(String)::: null module reader find:::return->Optional->empty
BuiltinClassLoader.NullModuleReader#list()::: null module reader list:::return->Stream->empty
BuiltinClassLoader.NullModuleReader#close()::: null module reader close:::throw->new->InternalError
BuiltinClassLoader#isOpen(ModuleReference, String):::Returns true if the given module opens the given package unconditionally.:::descriptor->mref->descriptor->if->descriptor->isOpen->descriptor->isAutomatic->return->foreach->descriptor->opens->source->opens->source->if->opens->isQualified->source->equals->return->return
BuiltinClassLoader#checkURL(URL):::Checks access to the given URL:::return->URLClassPath->checkURL
ClassLoaders#bootLoader():::Returns the class loader that is used to find resources in modules defined to the boot class loader.:::return
ClassLoaders#platformClassLoader():::Returns the platform class loader.:::return
ClassLoaders#appClassLoader():::Returns the application class loader.:::return
ClassLoaders.BootClassLoader#loadClassOrNull(String)::: boot class loader load class or null:::return->JLA->findBootstrapClassOrNull
ClassLoaders.PlatformClassLoader#definePackage(String, Module):::Called by the VM to support define package for AppCDS:::return->JLA->definePackage
ClassLoaders.AppClassLoader#loadClass(String, boolean)::: app class loader load class:::sm->System->getSecurityManager->if->i->cn->lastIndexOf->if->sm->cn->substring->checkPackageAccess->return->super->loadClass
ClassLoaders.AppClassLoader#getPermissions(CodeSource)::: app class loader get permissions:::perms->super->getPermissions->perms->new->RuntimePermission->add->return
ClassLoaders.AppClassLoader#appendToClassPathForInstrumentation(String):::Called by the VM to support dynamic additions to the class path:::ucp->addFile
ClassLoaders.AppClassLoader#definePackage(String, Module):::Called by the VM to support define package for AppCDS  Shared classes are returned in ClassLoader::findLoadedClass that bypass the defineClass call.:::return->JLA->definePackage
ClassLoaders.AppClassLoader#defineOrCheckPackage(String, Manifest, URL):::Called by the VM to support define package for AppCDS:::return->super->defineOrCheckPackage
ClassLoaders#toFileURL(String):::Attempts to convert the given string to a file URL.:::try->return->Path->of->toRealPath->toFile->toURI->toURL->catch->return->finally
ClassLoaderValue#key()::: class loader value key:::return
ClassLoaderValue#isEqualOrDescendantOf(AbstractClassLoaderValue):::root-ClassLoaderValue can only be equal to itself and has no predecessors.:::return->Objects->requireNonNull->equals
FileURLMapper#getPath()::: file mapper get path:::if->return->host->url->getHost->if->host->equals->equalsIgnoreCase->rest->url->getFile->s->ParseUtil->url->getFile->decode->s->replace->return->path->url->getFile->replace->ParseUtil->decode->return
FileURLMapper#exists()::: file mapper exists:::path->getPath->f->new->File->return->f->exists
Loader.LoadedModule#mref()::: loaded module mref:::return
Loader.LoadedModule#name()::: loaded module name:::return->mref->descriptor->name
Loader.LoadedModule#location()::: loaded module location:::return
Loader.LoadedModule#codeSource()::: loaded module code source:::return
Loader#initRemotePackageMap(Configuration, List):::Completes initialization of this Loader:::foreach->nameToModule->keySet->resolvedModule->cf->findModule->get->foreach->resolvedModule->reads->mn->other->name->loader->if->other->configuration->if->continue->pool->loaderFor->else->layer->parentModuleLayers->stream->other->configuration->findModuleLayer->map->Optional->stream->flatMap->findAny->new->InternalError->orElseThrow->layer->findLoader->if->ClassLoaders->platformClassLoader->target->resolvedModule->name->descriptor->other->reference->descriptor->foreach->descriptor->exports->delegate->if->e->isQualified->other->configuration->e->targets->contains->else->if->pn->e->source->l->remotePackageToLoader->putIfAbsent->if->throw->new->IllegalArgumentException->return
Loader#findModuleLayer(ModuleLayer, Configuration):::Find the layer corresponding to the given configuration in the tree of layers rooted at the given parent.:::return->SharedSecrets->getJavaLangAccess->layers->l->configuration->filter->findAny
Loader#pool():::Returns the loader pool that this loader is in or null if this loader is not in a loader pool.:::return
Loader#findResource(String, String):::Returns a URL to a resource of the given name in a module defined to this class loader.:::mref->nameToModule->get->if->return->url->try->AccessController->new->PrivilegedExceptionAction<URL>->doPrivileged->catch->throw->pae->getCause->finally->if->System->getSecurityManager->try->urlToCheck->AccessController->new->PrivilegedExceptionAction<URL>->doPrivileged->catch->finally->return
Loader#findResource(String)::: loader find resource:::pn->Resources->toPackageName->module->localPackageToModule->get->if->try->url->module->name->findResource->if->name->endsWith->url->toString->endsWith->module->mref->isOpen->return->catch->finally->else->foreach->nameToModule->values->try->url->mref->descriptor->name->findResource->if->return->catch->finally->return
Loader#findResources(String)::: loader find resources:::return->Collections->findResourcesAsList->enumeration
Loader#getResource(String)::: loader get resource:::Objects->requireNonNull->url->findResource->if->if->parent->getResource->else->BootLoader->findResource->return
Loader#getResources(String)::: loader get resources:::Objects->requireNonNull->urls->findResourcesAsList->e->if->parent->getResources->else->BootLoader->findResources->return->new->Enumeration<>
Loader#findResourcesAsList(String):::Finds the resources with the given name in this class loader.:::pn->Resources->toPackageName->module->localPackageToModule->get->if->url->module->name->findResource->if->name->endsWith->url->toString->endsWith->module->mref->isOpen->return->List->of->else->return->Collections->emptyList->else->urls->new->ArrayList<>->foreach->nameToModule->values->url->mref->descriptor->name->findResource->if->urls->add->return
Loader#findClass(String):::Finds the class with the specified binary name.:::c->loadedModule->findLoadedModule->if->findClassInModuleOrNull->if->throw->new->ClassNotFoundException->return
Loader#findClass(String, String):::Finds the class with the specified binary name in the given module:::c->loadedModule->findLoadedModule->if->loadedModule->name->equals->findClassInModuleOrNull->return
Loader#loadClass(String, boolean):::Loads the class with the specified binary name.:::sm->System->getSecurityManager->if->pn->packageName->if->pn->isEmpty->sm->checkPackageAccess->synchronized->getClassLoadingLock->c->findLoadedClass->if->loadedModule->findLoadedModule->if->findClassInModuleOrNull->else->pn->packageName->loader->remotePackageToLoader->get->if->if->BootLoader->loadClassOrNull->else->loader->loadClass->if->throw->new->ClassNotFoundException->if->resolveClass->return
Loader#findClassInModuleOrNull(LoadedModule, String):::Finds the class with the specified binary name if in a module defined to this ClassLoader.:::pa->defineClass->return->AccessController->doPrivileged
Loader#defineClass(String, LoadedModule):::Defines the given binary class name to the VM, loading the class bytes from the given module.:::reader->loadedModule->mref->moduleReaderFor->try->rn->cn->replace->concat->bb->reader->read->orElse->if->return->try->return->loadedModule->codeSource->defineClass->catch->finally->reader->release->catch->return->finally
Loader#getPermissions(CodeSource):::Returns the permissions for the given CodeSource.:::perms->super->getPermissions->url->cs->getLocation->if->return->try->p->url->openConnection->getPermission->if->if->path->p->getName->if->path->endsWith->new->FilePermission->perms->add->catch->finally->return
Loader#findLoadedModule(String):::Find the candidate module for the given class name:::pn->packageName->return->pn->isEmpty->localPackageToModule->get
Loader#packageName(String):::Returns the package name for the given class name:::pos->cn->lastIndexOf->return->cn->substring
Loader#moduleReaderFor(ModuleReference):::Returns the ModuleReader for the given module.:::return->moduleToReader->createModuleReader->computeIfAbsent
Loader#createModuleReader(ModuleReference):::Creates a ModuleReader for the given module.:::try->return->mref->open->catch->return->new->NullModuleReader->finally
Loader.NullModuleReader#find(String)::: null module reader find:::return->Optional->empty
Loader.NullModuleReader#list()::: null module reader list:::return->Stream->empty
Loader.NullModuleReader#close()::: null module reader close:::throw->new->InternalError
Loader#isOpen(ModuleReference, String):::Returns true if the given module opens the given package unconditionally.:::descriptor->mref->descriptor->if->descriptor->isOpen->descriptor->isAutomatic->return->foreach->descriptor->opens->source->opens->source->if->opens->isQualified->source->equals->return->return
LoaderPool#loaderFor(String):::Returns the class loader for the named module:::loader->loaders->get->return
LoaderPool#loaders():::Returns a stream of the loaders in this pool.:::return->loaders->values->stream
Resource#getName():::Returns the name of the Resource.:::
Resource#getURL():::Returns the URL of the Resource.:::
Resource#getCodeSourceURL():::Returns the CodeSource URL for the Resource.:::
Resource#getInputStream():::Returns an InputStream for reading the Resource data.:::
Resource#getContentLength():::Returns the length of the Resource data, or -1 if unknown.:::
Resource#cachedInputStream()::: resource cached input stream:::if->getInputStream->return
Resource#getBytes():::Returns the Resource data as an array of bytes.:::b->in->cachedInputStream->isInterrupted->Thread->interrupted->len->for->try->new->byteArr->if->pos->while->bytesToRead->if->Math->min->if->Arrays->copyOf->else->cc->try->in->read->catch->Thread->interrupted->finally->if->if->throw->new->EOFException->else->if->Arrays->copyOf->break->catch->finally->try->in->close->catch->finally->if->Thread->currentThread->interrupt->return
Resource#getByteBuffer():::Returns the Resource data as a ByteBuffer, but only if the input stream was implemented on top of a ByteBuffer:::in->cachedInputStream->if->return->getByteBuffer->return
Resource#getManifest():::Returns the Manifest for the Resource, or null if none.:::return
Resource#getCertificates():::Returns theCertificates for the Resource, or null if none.:::return
Resource#getCodeSigners():::Returns the code signers for the Resource, or null if none.:::return
URLClassPath#closeLoaders()::: class path close loaders:::if->return->Collections->emptyList->result->new->LinkedList<>->foreach->try->loader->close->catch->result->add->finally->return
URLClassPath#addURL(URL):::Appends the specified URL to the search path of directory and JAR file URLs from which to load classes and resources:::if->return->synchronized->if->path->contains->unopenedUrls->addLast->path->add
URLClassPath#addFile(String):::Appends the specified file path as a file URL to the search path.:::url->toFileURL->if->addURL
URLClassPath#toFileURL(String):::Returns a file URL for the given file path.:::try->f->new->File->getCanonicalFile->return->ParseUtil->fileToEncodedURL->catch->return->finally
URLClassPath#getURLs():::Returns the original search path of URLs.:::synchronized->return->path->new->URLArr->toArray
URLClassPath#findResource(String, boolean):::Finds the resource with the specified name on the URL search path or null if not found or security check fails.:::loader->for->i->getLoader->return
URLClassPath#getResource(String, boolean):::Finds the first Resource on the URL search path which has the specified name:::if->println->loader->for->i->getLoader->return
URLClassPath#findResources(String, boolean):::Finds all resources on the URL search path with the given name:::return->new->Enumeration<>
URLClassPath#getResource(String)::: class path get resource:::return->getResource
URLClassPath#getResources(String, boolean):::Finds all resources on the URL search path with the given name:::return->new->Enumeration<>
URLClassPath#getResources(String)::: class path get resources:::return->getResources
URLClassPath#getLoader(int)::: class path get loader:::if->return->while->loaders->size->url->synchronized->unopenedUrls->pollFirst->if->return->urlNoFragString->URLUtil->urlNoFragString->if->lmap->containsKey->continue->loader->try->getLoader->urls->loader->getClassPath->if->push->catch->continue->if->println->continue->finally->loaders->add->lmap->put->return->loaders->get
URLClassPath#getLoader(URL)::: class path get loader:::try->return->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->pae->getException->finally
URLClassPath#isDefaultJarHandler(URL)::: class path is default jar handler:::h->JNUA->getHandler->return
URLClassPath#push(URL[])::: class path push:::synchronized->for->i
URLClassPath#checkURL(URL)::: class path check l:::if->try->check->catch->return->finally->return
URLClassPath#check(URL)::: class path check:::security->System->getSecurityManager->if->urlConnection->url->openConnection->perm->urlConnection->getPermission->if->try->security->checkPermission->catch->if->perm->getActions->indexOf->security->perm->getName->checkRead->else->if->perm->getActions->indexOf->locUrl->if->getJarFileURL->security->locUrl->getHost->locUrl->getPort->checkConnect->else->throw->finally
URLClassPath.Loader#getBaseURL()::: loader get base l:::return
URLClassPath.Loader#findResource(String, boolean)::: loader find resource:::url->try->ParseUtil->encodePath->new->URL->catch->throw->new->IllegalArgumentException->finally->try->if->URLClassPath->check->uc->url->openConnection->if->hconn->hconn->setRequestMethod->if->hconn->getResponseCode->return->else->uc->setUseCaches->is->uc->getInputStream->is->close->return->catch->return->finally
URLClassPath.Loader#getResource(String, boolean)::: loader get resource:::url->try->ParseUtil->encodePath->new->URL->catch->throw->new->IllegalArgumentException->finally->uc->try->if->URLClassPath->check->url->openConnection->in->uc->getInputStream->if->juc->JarLoader->juc->getJarFile->checkJar->catch->return->finally->return->new->Resource
URLClassPath.Loader#getResource(String)::: loader get resource:::return->getResource
URLClassPath.Loader#close()::: loader close:::if->jarfile->close
URLClassPath.Loader#getClassPath()::: loader get class path:::return
URLClassPath.JarLoader#close()::: jar loader close:::if->ensureOpen->jar->close
URLClassPath.JarLoader#getJarFile()::: jar loader get jar file:::return
URLClassPath.JarLoader#isOptimizable(URL)::: jar loader is optimizable:::return->url->getProtocol->equals
URLClassPath.JarLoader#ensureOpen()::: jar loader ensure open:::if->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->pae->getException->finally
URLClassPath.JarLoader#checkJar(JarFile)::: jar loader check jar:::if->System->getSecurityManager->zipAccess->startsWithLocHeader->x->new->IOException->try->jar->close->catch->x->addSuppressed->finally->throw->return
URLClassPath.JarLoader#getJarFile(URL)::: jar loader get jar file:::if->isOptimizable->p->new->FileURLMapper->if->p->exists->throw->p->getPath->new->FileNotFoundException->return->p->getPath->new->File->JarFile->runtimeVersion->new->JarFile->checkJar->uc->getBaseURL->new->URL->openConnection->uc->setRequestProperty->jarFile->getJarFile->return->checkJar
URLClassPath.JarLoader#getIndex()::: jar loader get index:::try->ensureOpen->catch->throw->new->InternalError->finally->return
URLClassPath.JarLoader#checkResource(String, boolean, JarEntry)::: jar loader check resource:::url->try->nm->if->jar->isMultiRelease->entry->getRealName->else->getBaseURL->ParseUtil->encodePath->new->URL->if->URLClassPath->check->catch->return->return->return->finally->return->new->Resource
URLClassPath.JarLoader#validIndex(String)::: jar loader valid index:::packageName->pos->if->name->lastIndexOf->name->substring->entryName->entry->enum_->jar->entries->while->enum_->hasMoreElements->enum_->nextElement->entry->getName->if->entryName->lastIndexOf->entryName->substring->if->entryName->equals->return->return
URLClassPath.JarLoader#findResource(String, boolean)::: jar loader find resource:::rsc->getResource->if->return->rsc->getURL->return
URLClassPath.JarLoader#getResource(String, boolean)::: jar loader get resource:::try->ensureOpen->catch->throw->new->InternalError->finally->entry->jar->getJarEntry->if->return->checkResource->if->return->visited->new->HashSet<>->return->getResource
URLClassPath.JarLoader#getResource(String, boolean, Set)::: jar loader get resource:::res->jarFiles->count->jarFilesList->if->index->get->return->do->size->jarFilesList->size->jarFilesList->new->StringArr->toArray->while->jarName->newLoader->url->try->new->URL->urlNoFragString->URLUtil->urlNoFragString->if->lmap->get->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->newIndex->newLoader->getIndex->if->pos->jarName->lastIndexOf->newIndex->jarName->substring->merge->lmap->put->catch->continue->continue->finally->visitedURL->visited->URLUtil->urlNoFragString->add->if->try->newLoader->ensureOpen->catch->throw->new->InternalError->finally->entry->getJarEntry->if->return->newLoader->checkResource->if->newLoader->validIndex->throw->new->InvalidJarIndexError->if->newLoader->getIndex->continue->if->newLoader->getResource->return->index->get->while->jarFilesList->size->return
URLClassPath.JarLoader#getClassPath()::: jar loader get class path:::if->return->ensureOpen->if->SharedSecrets->javaUtilJarAccess->jarFileHasClassPathAttribute->man->jar->getManifest->if->attr->man->getMainAttributes->if->value->attr->getValue->if->return->parseClassPath->return
URLClassPath.JarLoader#parseClassPath(URL, String)::: jar loader parse class path:::st->new->StringTokenizer->urls->st->countTokens->new->URLArr->i->while->st->hasMoreTokens->path->st->nextToken->url->new->URL->tryResolve->if->else->if->println->if->else->if->Arrays->copyOf->return
URLClassPath.JarLoader#tryResolve(URL, String)::: jar loader try resolve:::if->base->getProtocol->equalsIgnoreCase->return->tryResolveFile->else->return->tryResolveNonFile
URLClassPath.JarLoader#tryResolveFile(URL, String):::Attempt to return a file URL by resolving input against a base file URL:::index->input->indexOf->isFile->if->scheme->input->substring->equalsIgnoreCase->else->return->new->URL
URLClassPath.JarLoader#tryResolveNonFile(URL, String):::Attempt to return a URL by resolving input against a base URL:::child->input->replace->if->isRelative->url->new->URL->bp->base->getPath->urlp->url->getPath->pos->bp->lastIndexOf->if->bp->length->if->urlp->regionMatches->urlp->indexOf->return->return
URLClassPath.JarLoader#isRelative(String):::Returns true if the given input is a relative URI.:::try->return->URI->create->isAbsolute->catch->return->finally
URLClassPath.FileLoader#findResource(String, boolean)::: file loader find resource:::rsc->getResource->if->return->rsc->getURL->return
URLClassPath.FileLoader#getResource(String, boolean)::: file loader get resource:::url->try->normalizedBase->getBaseURL->new->URL->getBaseURL->ParseUtil->encodePath->new->URL->if->url->getFile->normalizedBase->getFile->startsWith->return->if->URLClassPath->check->file->if->name->indexOf->name->replace->new->File->getCanonicalFile->if->file->getPath->dir->getPath->startsWith->return->else->name->replace->new->File->if->file->exists->return->new->Resource->catch->return->finally->return

jdk.internal.loader.AbstractClassLoaderValue#key()->Object:::Returns the key component of this ClassLoaderValue
jdk.internal.loader.AbstractClassLoaderValue#sub(K)->Sub:::Constructs new sub-ClassLoaderValue of this ClassLoaderValue with given key component.
jdk.internal.loader.AbstractClassLoaderValue#isEqualOrDescendantOf(AbstractClassLoaderValue)->boolean:::Returns true if this ClassLoaderValue is equal to given clv or if this ClassLoaderValue was derived from given clv by a chain of #sub(Object) invocations.
jdk.internal.loader.AbstractClassLoaderValue#get(ClassLoader)->V:::Returns the value associated with this ClassLoaderValue and given ClassLoader or null if there is none.
jdk.internal.loader.AbstractClassLoaderValue#putIfAbsent(ClassLoader, V)->V:::Associates given value v with this ClassLoaderValue and given ClassLoader and returns null if there was no previously associated value or does nothing and returns previously associated value if there was one.
jdk.internal.loader.AbstractClassLoaderValue#remove(ClassLoader, Object)->boolean:::Removes the value associated with this ClassLoaderValue and given ClassLoader if the associated value is equal to given value v and returns true or does nothing and returns false if there is no currently associated value or it is not equal to given value v.
jdk.internal.loader.AbstractClassLoaderValue#computeIfAbsent(ClassLoader, BiFunction)->V:::Returns the value associated with this ClassLoaderValue and given ClassLoader if there is one or computes the value by invoking given mappingFunction, associates it and returns it
jdk.internal.loader.AbstractClassLoaderValue#removeAll(ClassLoader)->void:::Removes all values associated with given ClassLoader cl and #isEqualOrDescendantOf(AbstractClassLoaderValue) this or descendants of this ClassLoaderValue
jdk.internal.loader.AbstractClassLoaderValue.Sub#parent()->AbstractClassLoaderValue::: sub parent
jdk.internal.loader.AbstractClassLoaderValue.Sub#key()->K::: sub key
jdk.internal.loader.AbstractClassLoaderValue.Sub#isEqualOrDescendantOf(AbstractClassLoaderValue)->boolean:::sub-ClassLoaderValue is a descendant of given clv if it is either equal to it or if its #parent() parent is a descendant of given clv.
jdk.internal.loader.AbstractClassLoaderValue.Sub#equals(Object)->boolean::: sub equals
jdk.internal.loader.AbstractClassLoaderValue.Sub#hashCode()->int::: sub hash code
jdk.internal.loader.BootLoader#getUnnamedModule()->Module:::Returns the unnamed module for the boot loader.
jdk.internal.loader.BootLoader#getServicesCatalog()->ServicesCatalog:::Returns the ServiceCatalog for modules defined to the boot class loader.
jdk.internal.loader.BootLoader#getClassLoaderValueMap()->ConcurrentHashMap:::Returns the ClassLoaderValue map for the boot class loader.
jdk.internal.loader.BootLoader#hasClassPath()->boolean:::Returns true if there is a class path associated with the BootLoader.
jdk.internal.loader.BootLoader#loadModule(ModuleReference)->void:::Registers a module with this class loader so that its classes (and resources) become visible via this class loader.
jdk.internal.loader.BootLoader#loadClassOrNull(String)->Class:::Loads the Class object with the given name defined to the boot loader.
jdk.internal.loader.BootLoader#loadClass(Module, String)->Class:::Loads the Class object with the given name in the given module defined to the boot loader
jdk.internal.loader.BootLoader#findResource(String, String)->URL:::Returns a URL to a resource in a module defined to the boot loader.
jdk.internal.loader.BootLoader#findResourceAsStream(String, String)->InputStream:::Returns an input stream to a resource in a module defined to the boot loader.
jdk.internal.loader.BootLoader#findResource(String)->URL:::Returns the URL to the given resource in any of the modules defined to the boot loader and the boot class path.
jdk.internal.loader.BootLoader#findResources(String)->Enumeration:::Returns an Iterator to iterate over the resources of the given name in any of the modules defined to the boot loader.
jdk.internal.loader.BootLoader#definePackage(Class)->Package:::Define a package for the given class to the boot loader, if not already defined.
jdk.internal.loader.BootLoader#getDefinedPackage(String)->Package:::Returns the Package of the given name defined to the boot loader or null if the package has not been defined.
jdk.internal.loader.BootLoader#packages()->Stream:::Returns a stream of the packages defined to the boot loader.
jdk.internal.loader.BootLoader.PackageHelper#definePackage(String, String)->Package:::Define the Package with the given name
jdk.internal.loader.BuiltinClassLoader#hasClassPath()->boolean:::Returns true if there is a class path associated with this class loader.
jdk.internal.loader.BuiltinClassLoader#loadModule(ModuleReference)->void:::Register a module this class loader
jdk.internal.loader.BuiltinClassLoader#findModule(String)->ModuleReference:::Returns the ModuleReference for the named module defined to this class loader; or null if not defined.
jdk.internal.loader.BuiltinClassLoader#findResource(String, String)->URL:::Returns a URL to a resource of the given name in a module defined to this class loader.
jdk.internal.loader.BuiltinClassLoader#findResourceAsStream(String, String)->InputStream:::Returns an input stream to a resource of the given name in a module defined to this class loader.
jdk.internal.loader.BuiltinClassLoader#findResource(String)->URL:::Finds a resource with the given name in the modules defined to this class loader or its class path.
jdk.internal.loader.BuiltinClassLoader#findResources(String)->Enumeration:::Returns an enumeration of URL objects to all the resources with the given name in modules defined to this class loader or on the class path of this loader.
jdk.internal.loader.BuiltinClassLoader#findClass(String)->Class:::Finds the class with the specified binary name.
jdk.internal.loader.BuiltinClassLoader#findClass(String, String)->Class:::Finds the class with the specified binary name in a module
jdk.internal.loader.BuiltinClassLoader#loadClass(String, boolean)->Class:::Loads the class with the specified binary name.
jdk.internal.loader.BuiltinClassLoader#loadClassOrNull(String, boolean)->Class:::A variation of loadClass to load a class with the specified binary name
jdk.internal.loader.BuiltinClassLoader#loadClassOrNull(String)->Class:::A variation of loadClass to load a class with the specified binary name
jdk.internal.loader.BuiltinClassLoader#defineOrCheckPackage(String, Manifest, URL)->Package:::Defines a package in this ClassLoader
jdk.internal.loader.BuiltinClassLoader#getPermissions(CodeSource)->PermissionCollection:::Returns the permissions for the given CodeSource.
jdk.internal.loader.ClassLoaders#bootLoader()->BuiltinClassLoader:::Returns the class loader that is used to find resources in modules defined to the boot class loader.
jdk.internal.loader.ClassLoaders#platformClassLoader()->ClassLoader:::Returns the platform class loader.
jdk.internal.loader.ClassLoaders#appClassLoader()->ClassLoader:::Returns the application class loader.
jdk.internal.loader.ClassLoaderValue#key()->ClassLoaderValue::: class loader value key
jdk.internal.loader.ClassLoaderValue#isEqualOrDescendantOf(AbstractClassLoaderValue)->boolean:::root-ClassLoaderValue can only be equal to itself and has no predecessors.
jdk.internal.loader.FileURLMapper#getPath()->String::: file mapper get path
jdk.internal.loader.FileURLMapper#exists()->boolean::: file mapper exists
jdk.internal.loader.Loader#initRemotePackageMap(Configuration, List)->Loader:::Completes initialization of this Loader
jdk.internal.loader.Loader#pool()->LoaderPool:::Returns the loader pool that this loader is in or null if this loader is not in a loader pool.
jdk.internal.loader.Loader#findResource(String, String)->URL:::Returns a URL to a resource of the given name in a module defined to this class loader.
jdk.internal.loader.Loader#findResource(String)->URL::: loader find resource
jdk.internal.loader.Loader#findResources(String)->Enumeration::: loader find resources
jdk.internal.loader.Loader#getResource(String)->URL::: loader get resource
jdk.internal.loader.Loader#getResources(String)->Enumeration::: loader get resources
jdk.internal.loader.Loader#findClass(String)->Class:::Finds the class with the specified binary name.
jdk.internal.loader.Loader#findClass(String, String)->Class:::Finds the class with the specified binary name in the given module
jdk.internal.loader.Loader#loadClass(String, boolean)->Class:::Loads the class with the specified binary name.
jdk.internal.loader.Loader#getPermissions(CodeSource)->PermissionCollection:::Returns the permissions for the given CodeSource.
jdk.internal.loader.LoaderPool#loaderFor(String)->Loader:::Returns the class loader for the named module
jdk.internal.loader.LoaderPool#loaders()->Stream:::Returns a stream of the loaders in this pool.
jdk.internal.loader.Resource#getName()->String:::Returns the name of the Resource.
jdk.internal.loader.Resource#getURL()->URL:::Returns the URL of the Resource.
jdk.internal.loader.Resource#getCodeSourceURL()->URL:::Returns the CodeSource URL for the Resource.
jdk.internal.loader.Resource#getInputStream()->InputStream:::Returns an InputStream for reading the Resource data.
jdk.internal.loader.Resource#getContentLength()->int:::Returns the length of the Resource data, or -1 if unknown.
jdk.internal.loader.Resource#getBytes()->byte[]:::Returns the Resource data as an array of bytes.
jdk.internal.loader.Resource#getByteBuffer()->ByteBuffer:::Returns the Resource data as a ByteBuffer, but only if the input stream was implemented on top of a ByteBuffer
jdk.internal.loader.Resource#getManifest()->Manifest:::Returns the Manifest for the Resource, or null if none.
jdk.internal.loader.Resource#getCertificates()->java.security.cert.Certificate[]:::Returns theCertificates for the Resource, or null if none.
jdk.internal.loader.Resource#getCodeSigners()->CodeSigner[]:::Returns the code signers for the Resource, or null if none.
jdk.internal.loader.URLClassPath#closeLoaders()->List::: class path close loaders
jdk.internal.loader.URLClassPath#addURL(URL)->void:::Appends the specified URL to the search path of directory and JAR file URLs from which to load classes and resources
jdk.internal.loader.URLClassPath#addFile(String)->void:::Appends the specified file path as a file URL to the search path.
jdk.internal.loader.URLClassPath#getURLs()->URL[]:::Returns the original search path of URLs.
jdk.internal.loader.URLClassPath#findResource(String, boolean)->URL:::Finds the resource with the specified name on the URL search path or null if not found or security check fails.
jdk.internal.loader.URLClassPath#getResource(String, boolean)->Resource:::Finds the first Resource on the URL search path which has the specified name
jdk.internal.loader.URLClassPath#findResources(String, boolean)->Enumeration:::Finds all resources on the URL search path with the given name
jdk.internal.loader.URLClassPath#getResource(String)->Resource::: class path get resource
jdk.internal.loader.URLClassPath#getResources(String, boolean)->Enumeration:::Finds all resources on the URL search path with the given name
jdk.internal.loader.URLClassPath#getResources(String)->Enumeration::: class path get resources
jdk.internal.loader.URLClassPath#checkURL(URL)->URL::: class path check l
jdk.internal.loader.URLClassPath#check(URL)->void::: class path check
jdk.internal.loader.URLClassPath.JarLoader#close()->void::: jar loader close
jdk.internal.loader.URLClassPath.JarLoader#getJarFile()->JarFile::: jar loader get jar file
jdk.internal.loader.URLClassPath.JarLoader#checkJar(JarFile)->JarFile::: jar loader check jar
jdk.internal.loader.URLClassPath.JarLoader#getIndex()->JarIndex::: jar loader get index
jdk.internal.loader.URLClassPath.JarLoader#checkResource(String, boolean, JarEntry)->Resource::: jar loader check resource
jdk.internal.loader.URLClassPath.JarLoader#validIndex(String)->boolean::: jar loader valid index
jdk.internal.loader.URLClassPath.JarLoader#findResource(String, boolean)->URL::: jar loader find resource
jdk.internal.loader.URLClassPath.JarLoader#getResource(String, boolean)->Resource::: jar loader get resource
jdk.internal.loader.URLClassPath.JarLoader#getResource(String, boolean, Set)->Resource::: jar loader get resource
jdk.internal.loader.URLClassPath.JarLoader#getClassPath()->URL[]::: jar loader get class path
jdk.internal.loader.URLClassPath.JarLoader#tryResolve(URL, String)->URL::: jar loader try resolve
jdk.internal.loader.URLClassPath.JarLoader#tryResolveFile(URL, String)->URL:::Attempt to return a file URL by resolving input against a base file URL
jdk.internal.loader.URLClassPath.JarLoader#tryResolveNonFile(URL, String)->URL:::Attempt to return a URL by resolving input against a base URL
jdk.internal.loader.URLClassPath.JarLoader#isRelative(String)->boolean:::Returns true if the given input is a relative URI.

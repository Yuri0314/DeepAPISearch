sun.nio.ch.sctp.MessageInfoImpl#association()->Association::: message info impl association
sun.nio.ch.sctp.MessageInfoImpl#setAssociation(Association)->void:::MessageInfoImpl instances created from native will need to have their association set from the channel.
sun.nio.ch.sctp.MessageInfoImpl#associationID()->int::: message info impl association d
sun.nio.ch.sctp.MessageInfoImpl#address()->SocketAddress::: message info impl address
sun.nio.ch.sctp.MessageInfoImpl#bytes()->int::: message info impl bytes
sun.nio.ch.sctp.MessageInfoImpl#streamNumber()->int::: message info impl stream number
sun.nio.ch.sctp.MessageInfoImpl#streamNumber(int)->MessageInfo::: message info impl stream number
sun.nio.ch.sctp.MessageInfoImpl#payloadProtocolID()->int::: message info impl payload protocol d
sun.nio.ch.sctp.MessageInfoImpl#payloadProtocolID(int)->MessageInfo::: message info impl payload protocol d
sun.nio.ch.sctp.MessageInfoImpl#isComplete()->boolean::: message info impl is complete
sun.nio.ch.sctp.MessageInfoImpl#complete(boolean)->MessageInfo::: message info impl complete
sun.nio.ch.sctp.MessageInfoImpl#isUnordered()->boolean::: message info impl is unordered
sun.nio.ch.sctp.MessageInfoImpl#unordered(boolean)->MessageInfo::: message info impl unordered
sun.nio.ch.sctp.MessageInfoImpl#timeToLive()->long::: message info impl time to live
sun.nio.ch.sctp.MessageInfoImpl#timeToLive(long)->MessageInfo::: message info impl time to live
sun.nio.ch.sctp.MessageInfoImpl#toString()->String::: message info impl to string
sun.nio.ch.sctp.SctpChannelImpl#association()->Association::: sctp channel impl association
sun.nio.ch.sctp.SctpChannelImpl#bind(SocketAddress)->SctpChannel::: sctp channel impl bind
sun.nio.ch.sctp.SctpChannelImpl#bindAddress(InetAddress)->SctpChannel::: sctp channel impl bind address
sun.nio.ch.sctp.SctpChannelImpl#unbindAddress(InetAddress)->SctpChannel::: sctp channel impl unbind address
sun.nio.ch.sctp.SctpChannelImpl#connect(SocketAddress)->boolean::: sctp channel impl connect
sun.nio.ch.sctp.SctpChannelImpl#connect(SocketAddress, int, int)->boolean::: sctp channel impl connect
sun.nio.ch.sctp.SctpChannelImpl#isConnectionPending()->boolean::: sctp channel impl is connection pending
sun.nio.ch.sctp.SctpChannelImpl#finishConnect()->boolean::: sctp channel impl finish connect
sun.nio.ch.sctp.SctpChannelImpl#getAllLocalAddresses()->Set::: sctp channel impl get all local addresses
sun.nio.ch.sctp.SctpChannelImpl#getRemoteAddresses()->Set::: sctp channel impl get remote addresses
sun.nio.ch.sctp.SctpChannelImpl#shutdown()->SctpChannel::: sctp channel impl shutdown
sun.nio.ch.sctp.SctpChannelImpl#getOption(SctpSocketOption)->T::: sctp channel impl get option
sun.nio.ch.sctp.SctpChannelImpl#setOption(SctpSocketOption, T)->SctpChannel::: sctp channel impl set option
sun.nio.ch.sctp.SctpChannelImpl#supportedOptions()->Set>::: sctp channel impl supported options
sun.nio.ch.sctp.SctpChannelImpl#receive(ByteBuffer, T, NotificationHandler)->MessageInfo::: sctp channel impl receive
sun.nio.ch.sctp.SctpChannelImpl#send(ByteBuffer, MessageInfo)->int::: sctp channel impl send
sun.nio.ch.sctp.SctpChannelImpl#implConfigureBlocking(boolean)->void::: sctp channel impl impl configure blocking
sun.nio.ch.sctp.SctpChannelImpl#implCloseSelectableChannel()->void::: sctp channel impl impl close selectable channel
sun.nio.ch.sctp.SctpMultiChannelImpl#associations()->Set::: sctp multi channel impl associations
sun.nio.ch.sctp.SctpMultiChannelImpl#bind(SocketAddress, int)->SctpMultiChannel::: sctp multi channel impl bind
sun.nio.ch.sctp.SctpMultiChannelImpl#bindAddress(InetAddress)->SctpMultiChannel::: sctp multi channel impl bind address
sun.nio.ch.sctp.SctpMultiChannelImpl#unbindAddress(InetAddress)->SctpMultiChannel::: sctp multi channel impl unbind address
sun.nio.ch.sctp.SctpMultiChannelImpl#getAllLocalAddresses()->Set::: sctp multi channel impl get all local addresses
sun.nio.ch.sctp.SctpMultiChannelImpl#getRemoteAddresses(Association)->Set::: sctp multi channel impl get remote addresses
sun.nio.ch.sctp.SctpMultiChannelImpl#shutdown(Association)->SctpMultiChannel::: sctp multi channel impl shutdown
sun.nio.ch.sctp.SctpMultiChannelImpl#getOption(SctpSocketOption, Association)->T::: sctp multi channel impl get option
sun.nio.ch.sctp.SctpMultiChannelImpl#setOption(SctpSocketOption, T, Association)->SctpMultiChannel::: sctp multi channel impl set option
sun.nio.ch.sctp.SctpMultiChannelImpl#supportedOptions()->Set>::: sctp multi channel impl supported options
sun.nio.ch.sctp.SctpMultiChannelImpl#receive(ByteBuffer, T, NotificationHandler)->MessageInfo::: sctp multi channel impl receive
sun.nio.ch.sctp.SctpMultiChannelImpl#send(ByteBuffer, MessageInfo)->int::: sctp multi channel impl send
sun.nio.ch.sctp.SctpMultiChannelImpl#branch(Association)->SctpChannel::: sctp multi channel impl branch
sun.nio.ch.sctp.SctpMultiChannelImpl#implConfigureBlocking(boolean)->void::: sctp multi channel impl impl configure blocking
sun.nio.ch.sctp.SctpMultiChannelImpl#implCloseSelectableChannel()->void::: sctp multi channel impl impl close selectable channel
sun.nio.ch.sctp.SctpServerChannelImpl#accept()->SctpChannel::: sctp server channel impl accept
sun.nio.ch.sctp.SctpServerChannelImpl#bind(SocketAddress, int)->SctpServerChannel::: sctp server channel impl bind
sun.nio.ch.sctp.SctpServerChannelImpl#bindAddress(InetAddress)->SctpServerChannel::: sctp server channel impl bind address
sun.nio.ch.sctp.SctpServerChannelImpl#unbindAddress(InetAddress)->SctpServerChannel::: sctp server channel impl unbind address
sun.nio.ch.sctp.SctpServerChannelImpl#getAllLocalAddresses()->Set::: sctp server channel impl get all local addresses
sun.nio.ch.sctp.SctpServerChannelImpl#getOption(SctpSocketOption)->T::: sctp server channel impl get option
sun.nio.ch.sctp.SctpServerChannelImpl#setOption(SctpSocketOption, T)->SctpServerChannel::: sctp server channel impl set option
sun.nio.ch.sctp.SctpServerChannelImpl#supportedOptions()->Set>::: sctp server channel impl supported options
sun.nio.ch.sctp.SctpServerChannelImpl#implConfigureBlocking(boolean)->void::: sctp server channel impl impl configure blocking
sun.nio.ch.sctp.SctpServerChannelImpl#implCloseSelectableChannel()->void::: sctp server channel impl impl close selectable channel
sun.nio.ch.sctp.SctpStdSocketOption#name()->String::: sctp std socket option name
sun.nio.ch.sctp.SctpStdSocketOption#type()->Class::: sctp std socket option type
sun.nio.ch.sctp.SctpStdSocketOption#toString()->String::: sctp std socket option to string
sun.nio.ch.sctp.SctpStdSocketOption#constValue()->int::: sctp std socket option const value

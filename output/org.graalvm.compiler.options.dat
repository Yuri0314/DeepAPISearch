ModifiableOptionValues#update(OptionKey, Object):::Updates this object with the given key/value pair.:::expect->newMap->do->v->get->EconomicMap->create->if->newMap->removeKey->else->key->update->newMap->encodeNull->put->while->v->compareAndSet
ModifiableOptionValues#update(UnmodifiableEconomicMap, Object>):::Updates this object with the key/value pairs in values.:::if->values->isEmpty->return->expect->newMap->do->v->get->EconomicMap->create->cursor->values->getEntries->while->cursor->advance->key->cursor->getKey->value->cursor->getValue->if->newMap->removeKey->else->key->update->newMap->encodeNull->put->while->v->compareAndSet
OptionDescriptor#getOptionValueType():::Gets the type of values stored in the option:::return
OptionDescriptor#getHelp():::Gets a descriptive help message for the option:::return
OptionDescriptor#getExtraHelp():::Gets extra lines of help text:::return
OptionDescriptor#getName():::Gets the name of the option:::return
OptionDescriptor#getOptionType():::Gets the type of the option.:::return
OptionDescriptor#getOptionKey():::Gets the boxed option value.:::return
OptionDescriptor#getLocation():::Gets a description of the location where this option is stored.:::return->getDeclaringClass->getName->getFieldName
OptionDescriptors#get(String):::Gets the OptionDescriptor matching a given option name or null if this option descriptor set doesn't contain a matching option name.:::
OptionKey#setDescriptor(OptionDescriptor):::Sets the descriptor for this option.:::
OptionKey#getDescriptor():::Returns the descriptor for this option, if it has been set by #setDescriptor(OptionDescriptor).:::return
OptionKey#checkDescriptorExists():::Checks that a descriptor exists for this key after triggering loading of descriptors.:::init->if->buf->new->Formatter->buf->getName->format->stackTrace->new->Exception->getStackTrace->if->getClassName->getName->equals->getMethodName->equals->caller->getClassName->buf->format->throw->buf->toString->new->AssertionError->return
OptionKey#getName():::Gets the name of this option:::if->Lazy->init->return->super->toString->descriptor->getName
OptionKey#getDefaultValue():::The initial value specified in source code.:::return
OptionKey#hasBeenSet(OptionValues):::Returns true if the option has been set in any way:::return->values->containsKey
OptionKey#getValue(OptionValues):::Gets the value of this option in values.:::return->values->get
OptionKey#getValueOrDefault(EconomicMap, Object>):::Gets the value of this option in values if it is present, otherwise #getDefaultValue().:::if->values->containsKey->return->return->values->get
OptionKey#update(EconomicMap, Object>, Object):::Sets the value of this option in a given map:::oldValue->values->put->onValueUpdate
OptionKey#putIfAbsent(EconomicMap, Object>, Object):::Sets the value of this option in a given map if it doesn't already have a value:::if->values->containsKey->oldValue->values->put->onValueUpdate
OptionKey#onValueUpdate(EconomicMap, Object>, T, T):::Notifies this object when a value associated with this key is set or updated in values.:::
OptionsParser#getOptionsLoader():::Gets an iterable of available OptionDescriptors.:::if->return->java8OrEarlier->Services->getSavedProperties->get->compareTo->loader->if->getClassLoader->else->ClassLoader->getSystemClassLoader->return->ServiceLoader->load
OptionsParser#parseOptions(EconomicMap, EconomicMap, Object>, Iterable):::Parses a map representing assignments of values to options.:::if->optionSettings->isEmpty->cursor->optionSettings->getEntries->while->cursor->advance->cursor->getKey->cursor->getValue->parseOption
OptionsParser#parseOptionSettingTo(String, EconomicMap):::Parses a given option setting string and adds the parsed key and value dst.:::eqIndex->optionSetting->indexOf->if->throw->new->InternalError->dst->optionSetting->substring->optionSetting->substring->put
OptionsParser#parseOption(String, Object, EconomicMap, Object>, Iterable):::Parses a given option name and value.:::desc->lookup->if->matches->fuzzyMatch->msg->new->Formatter->msg->format->if->matches->isEmpty->msg->format->foreach->msg->match->getName->format->throw->msg->toString->new->IllegalArgumentException->optionType->desc->getOptionValueType->value->if->if->uncheckedValue->getClass->type->optionType->getSimpleName->throw->uncheckedValue->getClass->new->IllegalArgumentException->else->valueString->if->if->equals->else->if->equals->else->throw->new->IllegalArgumentException->else->if->else->if->isAssignableFrom->desc->getOptionKey->valueOf->else->if->valueString->isEmpty->throw->new->IllegalArgumentException->try->if->Float->parseFloat->else->if->Double->parseDouble->else->if->Integer->parseLong->valueOf->else->if->Long->parseLong->valueOf->else->throw->new->IllegalArgumentException->catch->throw->new->IllegalArgumentException->finally->desc->getOptionKey->update
OptionsParser#stringSimiliarity(String, String):::Compute string similarity based on Dice's coefficient:::hit->for->i->str1->length->return->str1->length->str2->length
OptionsParser#collectFuzzyMatches(Iterable, String, Collection):::Collects the set of options that fuzzy match a given option name:::found->foreach->score->option->getName->stringSimiliarity->if->matches->add->return
OptionValues#newOptionMap():::Creates a new map suitable for using OptionKeys as keys.:::return->EconomicMap->create
OptionValues#getMap():::Gets an immutable view of the key/value pairs in this object:::return
OptionValues#decodeNull(Object):::Decodes a value that may be the sentinel value for null in a map.:::return
OptionValues#printHelp(Iterable, PrintStream, String):::Prints a help message to out describing all options available via loader:::sortedOptions->new->TreeMap<>->foreach->foreach->name->desc->getName->existing->sortedOptions->put->foreach->sortedOptions->entrySet->desc->e->getValue->value->desc->getOptionKey->getValue->if->String->valueOf->name->e->getKey->assign->desc->getOptionKey->containsKey->typeName->desc->getOptionKey->desc->getOptionValueType->getSimpleName->linePrefix->String->format->typeStartPos->typeName->length->linePad->linePrefix->length->if->out->printf->else->out->printf->helpLines->help->desc->getHelp->if->help->length->wrap->helpLines->desc->getExtraHelp->addAll->else->desc->getExtraHelp->foreach->out->printf

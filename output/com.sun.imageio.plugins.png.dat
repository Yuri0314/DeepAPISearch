PNGImageDataEnumeration#nextElement()::: image data enumeration next element:::try->iis->new->SubImageInputStream->return->new->InputStreamAdapter->catch->return->finally
PNGImageDataEnumeration#hasMoreElements()::: image data enumeration has more elements:::if->return->try->crc->stream->readInt->stream->readInt->type->stream->readInt->if->return->else->return->catch->return->finally
PNGImageReader#setInput(Object, boolean, boolean)::: image reader set input:::super->setInput->resetStreamSettings
PNGImageReader#readNullTerminatedString(String, int)::: image reader read null terminated string:::baos->new->ByteArrayOutputStream->b->count->while->stream->read->if->throw->new->EOFException->baos->write->return->baos->toByteArray->new->String
PNGImageReader#readHeader()::: image reader read header:::if->return->if->throw->new->IllegalStateException->try->signature->new->byteArr->stream->readFully->if->throw->new->IIOException->IHDR_length->stream->readInt->if->throw->new->IIOException->IHDR_type->stream->readInt->if->throw->new->IIOException->new->PNGMetadata->width->stream->readInt->height->stream->readInt->stream->readFully->bitDepth->colorType->compressionMethod->filterMethod->interlaceMethod->stream->skipBytes->stream->stream->getStreamPosition->flushBefore->if->throw->new->IIOException->if->throw->new->IIOException->if->throw->new->IIOException->if->throw->new->IIOException->if->throw->new->IIOException->if->throw->new->IIOException->if->throw->new->IIOException->if->throw->new->IIOException->if->throw->new->IIOException->catch->throw->new->IIOException->finally
PNGImageReader#parse_PLTE_chunk(int)::: image reader parse_ e_chunk:::if->processWarningOccurred->return->else->if->processWarningOccurred->return->palette->new->byteArr->stream->readFully->numEntries->if->maxEntries->if->processWarningOccurred->Math->min->paletteEntries->if->else->if->else->if->else->new->byteArr->new->byteArr->new->byteArr->index->for->i
PNGImageReader#parse_bKGD_chunk()::: image reader parse_b d_chunk:::if->stream->readUnsignedByte->else->if->stream->readUnsignedShort->else->stream->readUnsignedShort->stream->readUnsignedShort->stream->readUnsignedShort
PNGImageReader#parse_cHRM_chunk()::: image reader parse_c m_chunk:::stream->readInt->stream->readInt->stream->readInt->stream->readInt->stream->readInt->stream->readInt->stream->readInt->stream->readInt
PNGImageReader#parse_gAMA_chunk()::: image reader parse_g a_chunk:::gamma->stream->readInt
PNGImageReader#parse_hIST_chunk(int)::: image reader parse_h t_chunk:::if->throw->new->IIOException->new->charArr->stream->readFully
PNGImageReader#parse_iCCP_chunk(int)::: image reader parse_i p_chunk:::keyword->readNullTerminatedString->compressedProfileLength->keyword->length->if->throw->new->IIOException->stream->readUnsignedByte->compressedProfile->new->byteArr->stream->readFully
PNGImageReader#parse_iTXt_chunk(int)::: image reader parse_i xt_chunk:::chunkStart->stream->getStreamPosition->keyword->readNullTerminatedString->add->compressionFlag->stream->readUnsignedByte->Boolean->valueOf->add->compressionMethod->stream->readUnsignedByte->Integer->valueOf->add->languageTag->readNullTerminatedString->add->pos->stream->getStreamPosition->maxLen->translatedKeyword->readNullTerminatedString->add->text->stream->getStreamPosition->textLength->if->throw->new->IIOException->b->new->byteArr->stream->readFully->if->inflate->new->String->else->new->String->add->if->keyword->equals->index->size->metadata->listIterator->decodeImageCreationTimeFromTextChunk
PNGImageReader#parse_pHYs_chunk()::: image reader parse_p ys_chunk:::stream->readInt->stream->readInt->stream->readUnsignedByte
PNGImageReader#parse_sBIT_chunk()::: image reader parse_s t_chunk:::colorType->if->stream->readUnsignedByte->else->if->stream->readUnsignedByte->stream->readUnsignedByte->stream->readUnsignedByte->if->stream->readUnsignedByte
PNGImageReader#parse_sPLT_chunk(int)::: image reader parse_s t_chunk:::readNullTerminatedString->remainingChunkLength->length->if->throw->new->IIOException->sampleDepth->stream->readUnsignedByte->numEntries->new->intArr->new->intArr->new->intArr->new->intArr->new->intArr->if->for->i->else->if->for->i->else->throw->new->IIOException
PNGImageReader#parse_sRGB_chunk()::: image reader parse_s b_chunk:::stream->readUnsignedByte
PNGImageReader#parse_tEXt_chunk(int)::: image reader parse_t xt_chunk:::keyword->readNullTerminatedString->textLength->keyword->length->if->throw->new->IIOException->add->b->new->byteArr->stream->readFully->new->String->add->if->keyword->equals->index->size->metadata->listIterator->decodeImageCreationTimeFromTextChunk
PNGImageReader#parse_tIME_chunk()::: image reader parse_t e_chunk:::stream->readUnsignedShort->stream->readUnsignedByte->stream->readUnsignedByte->stream->readUnsignedByte->stream->readUnsignedByte->stream->readUnsignedByte
PNGImageReader#parse_tRNS_chunk(int)::: image reader parse_t s_chunk:::colorType->if->if->processWarningOccurred->return->maxEntries->numEntries->if->processWarningOccurred->new->byteArr->stream->read->stream->skipBytes->else->if->if->processWarningOccurred->stream->skipBytes->return->stream->readUnsignedShort->else->if->if->processWarningOccurred->stream->skipBytes->return->stream->readUnsignedShort->stream->readUnsignedShort->stream->readUnsignedShort->else->processWarningOccurred->return
PNGImageReader#inflate(byte[])::: image reader inflate:::bais->new->ByteArrayInputStream->iis->new->InflaterInputStream->baos->new->ByteArrayOutputStream->c->try->while->iis->read->baos->write->catch->finally->iis->close->return->baos->toByteArray
PNGImageReader#parse_zTXt_chunk(int)::: image reader parse_z xt_chunk:::keyword->readNullTerminatedString->textLength->keyword->length->if->throw->new->IIOException->add->method->stream->readUnsignedByte->add->b->new->byteArr->stream->readFully->inflate->new->String->add->if->keyword->equals->index->size->metadata->listIterator->decodeImageCreationTimeFromTextChunk
PNGImageReader#readMetadata()::: image reader read metadata:::if->return->readHeader->colorType->if->try->while->chunkLength->stream->readInt->if->throw->new->IIOException->chunkType->stream->readInt->if->stream->skipBytes->stream->getStreamPosition->break->else->if->parse_tRNS_chunk->stream->skipBytes->else->stream->skipBytes->catch->throw->new->IIOException->finally->return->try->while->chunkLength->stream->readInt->chunkType->stream->readInt->chunkCRC->if->throw->new->IIOException->try->stream->mark->stream->stream->getStreamPosition->seek->stream->readInt->stream->reset->catch->throw->new->IIOException->finally->switch->if->if->throw->new->IIOException->stream->getStreamPosition->stream->skipBytes->break->stream->seek->stream->stream->getStreamPosition->flushBefore->break->parse_PLTE_chunk->break->parse_bKGD_chunk->break->parse_cHRM_chunk->break->parse_gAMA_chunk->break->parse_hIST_chunk->break->parse_iCCP_chunk->break->if->stream->skipBytes->else->parse_iTXt_chunk->break->parse_pHYs_chunk->break->parse_sBIT_chunk->break->parse_sPLT_chunk->break->parse_sRGB_chunk->break->parse_tEXt_chunk->break->parse_tIME_chunk->break->parse_tRNS_chunk->break->if->stream->skipBytes->else->parse_zTXt_chunk->break->b->new->byteArr->stream->readFully->chunkName->new->StringBuilder->chunkName->append->chunkName->append->chunkName->append->chunkName->append->ancillaryBit->if->processWarningOccurred->chunkName->toString->add->add->break->if->stream->readInt->throw->new->IIOException->catch->throw->new->IIOException->finally
PNGImageReader#decodeSubFilter(byte[], int, int, int)::: image reader decode sub filter:::for->i
PNGImageReader#decodeUpFilter(byte[], int, byte[], int, int)::: image reader decode up filter:::for->i
PNGImageReader#decodeAverageFilter(byte[], int, byte[], int, int, int)::: image reader decode average filter:::raw->priorPixel->priorRow->for->i->for->i
PNGImageReader#paethPredictor(int, int, int)::: image reader paeth predictor:::p->pa->Math->abs->pb->Math->abs->pc->Math->abs->if->return->else->if->return->else->return
PNGImageReader#decodePaethFilter(byte[], int, byte[], int, int, int)::: image reader decode paeth filter:::raw->priorPixel->priorRow->priorRowPixel->for->i->for->i
PNGImageReader#createRaster(int, int, int, int, int)::: image reader create raster:::dataBuffer->ras->origin->new->Point->if->new->DataBufferByte->Raster->createPackedRaster->else->if->new->DataBufferByte->Raster->createInterleavedRaster->else->new->DataBufferUShort->Raster->createInterleavedRaster->return
PNGImageReader#skipPass(int, int)::: image reader skip pass:::if->return->inputBands->bitsPerRow->Math->multiplyExact->bytesPerRow->for->srcY
PNGImageReader#updateImageProgress(int)::: image reader update image progress:::processImageProgress
PNGImageReader#decodePass(int, int, int, int, int, int, int)::: image reader decode pass:::if->return->imRas->theImage->getWritableTile->dstMinX->imRas->getMinX->dstMaxX->imRas->getWidth->dstMinY->imRas->getMinY->dstMaxY->imRas->getHeight->vals->ReaderUtil->computeUpdatedPixels->updateMinX->updateMinY->updateWidth->updateXStep->updateYStep->bitDepth->inputBands->bytesPerPixel->bitsPerRow->Math->multiplyExact->bytesPerRow->eltsPerRow->if->for->srcY->return->sourceX->srcX->srcXStep->byteData->shortData->curr->new->byteArr->prior->new->byteArr->passRow->createRaster->ps->passRow->getPixel->dataBuffer->passRow->getDataBuffer->type->dataBuffer->getDataType->if->getData->else->getData->processPassStarted->if->passRow->passRow->getWidth->createWritableChild->if->imRas->imRas->getWidth->imRas->getHeight->createWritableChild->adjustBitDepths->outputSampleSize->imRas->getSampleModel->getSampleSize->numBands->for->b->scale->if->maxInSample->halfMaxInSample->new->intArrs->for->b->useSetRect->if->passRow->createWritableChild->for->srcY->processPassComplete
PNGImageReader#decodeImage()::: image reader decode image:::width->height->if->decodePass->else->for->i
PNGImageReader#readImage(ImageReadParam)::: image reader read image:::readMetadata->width->height->new->Point->if->param->getSourceXSubsampling->param->getSourceYSubsampling->Math->param->getSourceMinProgressivePass->max->Math->param->getSourceMaxProgressivePass->min->param->getSourceBands->param->getDestinationBands->param->getDestinationOffset->inf->try->stream->seek->e->new->PNGImageDataEnumeration->is->new->SequenceInputStream->new->Inflater->new->InflaterInputStream->new->BufferedInputStream->new->DataInputStream->getImageTypes->getDestination->destRegion->new->Rectangle->new->Rectangle->computeRegions->destinationOffset->destRegion->getLocation->setLocation->colorType->if->theImage->getSampleModel->getNumBands->metadata->hasTransparentColor->theImage->getSampleModel->getNumBands->checkReadParamBandSettings->else->theImage->getSampleModel->getNumBands->checkReadParamBandSettings->clearAbortRequest->processImageStarted->if->abortRequested->processReadAborted->else->decodeImage->if->abortRequested->processReadAborted->else->processImageComplete->catch->throw->new->IIOException->finally->if->inf->end
PNGImageReader#getNumImages(boolean)::: image reader get num images:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException->return
PNGImageReader#getWidth(int)::: image reader get width:::if->throw->new->IndexOutOfBoundsException->readHeader->return
PNGImageReader#getHeight(int)::: image reader get height:::if->throw->new->IndexOutOfBoundsException->readHeader->return
PNGImageReader#getImageTypes(int)::: image reader get image types:::if->throw->new->IndexOutOfBoundsException->readHeader->l->new->ArrayList<ImageTypeSpecifier>->rgb->gray->bandOffsets->bitDepth->colorType->dataType->if->else->switch->readMetadata->if->metadata->hasTransparentColor->ColorSpace->getInstance->new->intArr->l->ImageTypeSpecifier->createInterleaved->add->l->ImageTypeSpecifier->createGrayscale->add->break->readMetadata->if->if->metadata->hasTransparentColor->l->ImageTypeSpecifier->createFromBufferedImageType->add->l->ImageTypeSpecifier->createFromBufferedImageType->add->l->ImageTypeSpecifier->createFromBufferedImageType->add->l->ImageTypeSpecifier->createFromBufferedImageType->add->if->metadata->hasTransparentColor->ColorSpace->getInstance->new->intArr->l->ImageTypeSpecifier->createInterleaved->add->ColorSpace->getInstance->new->intArr->l->ImageTypeSpecifier->createInterleaved->add->break->readMetadata->plength->red->green->blue->if->Arrays->copyOf->Arrays->fill->Arrays->copyOf->Arrays->fill->Arrays->copyOf->Arrays->fill->alpha->if->if->else->Arrays->copyOf->Arrays->fill->l->ImageTypeSpecifier->createIndexed->add->break->ColorSpace->getInstance->new->intArr->l->ImageTypeSpecifier->createInterleaved->add->break->if->l->ImageTypeSpecifier->createFromBufferedImageType->add->l->ImageTypeSpecifier->createFromBufferedImageType->add->ColorSpace->getInstance->new->intArr->l->ImageTypeSpecifier->createInterleaved->add->break->break->return->l->iterator
PNGImageReader#getRawImageType(int)::: image reader get raw image type:::types->getImageTypes->raw->do->types->next->while->types->hasNext->return
PNGImageReader#getDefaultReadParam()::: image reader get default read param:::return->new->ImageReadParam
PNGImageReader#getStreamMetadata()::: image reader get stream metadata:::return
PNGImageReader#getImageMetadata(int)::: image reader get image metadata:::if->throw->new->IndexOutOfBoundsException->readMetadata->return
PNGImageReader#read(int, ImageReadParam)::: image reader read:::if->throw->new->IndexOutOfBoundsException->try->readImage->catch->throw->throw->new->IIOException->finally->return
PNGImageReader#reset()::: image reader reset:::super->reset->resetStreamSettings
PNGImageReader#resetStreamSettings()::: image reader reset stream settings:::
PNGImageReaderSpi#getDescription(Locale)::: image reader spi get description:::return
PNGImageReaderSpi#canDecodeInput(Object)::: image reader spi can decode input:::if->return->stream->b->new->byteArr->stream->mark->stream->readFully->stream->reset->return
PNGImageReaderSpi#createReaderInstance(Object)::: image reader spi create reader instance:::return->new->PNGImageReader
CRC#reset()::: c reset:::
CRC#update(byte[], int, int)::: c update:::c->for->n
CRC#update(int)::: c update:::
CRC#getValue()::: c get value:::return
ChunkStream#read()::: chunk stream read:::throw->new->RuntimeException
ChunkStream#read(byte[], int, int)::: chunk stream read:::throw->new->RuntimeException
ChunkStream#write(byte[], int, int)::: chunk stream write:::crc->update->stream->write
ChunkStream#write(int)::: chunk stream write:::crc->update->stream->write
ChunkStream#finish()::: chunk stream finish:::stream->crc->getValue->writeInt->pos->stream->getStreamPosition->stream->seek->stream->writeInt->stream->seek->stream->flushBefore
ChunkStream#finalize()::: chunk stream finalize:::
IDATOutputStream#startChunk()::: output stream start chunk:::crc->reset->stream->getStreamPosition->stream->writeInt->crc->update->stream->write
IDATOutputStream#finishChunk()::: output stream finish chunk:::stream->crc->getValue->writeInt->pos->stream->getStreamPosition->stream->seek->stream->writeInt->stream->seek->try->stream->flushBefore->catch->stream->getStreamPosition->throw->finally
IDATOutputStream#read()::: output stream read:::throw->new->RuntimeException
IDATOutputStream#read(byte[], int, int)::: output stream read:::throw->new->RuntimeException
IDATOutputStream#write(byte[], int, int)::: output stream write:::if->return->if->def->finished->def->setInput->while->def->needsInput->deflate
IDATOutputStream#deflate()::: output stream deflate:::len->def->deflate->off->while->if->finishChunk->startChunk->nbytes->Math->min->crc->update->stream->write
IDATOutputStream#write(int)::: output stream write:::write
IDATOutputStream#finish()::: output stream finish:::try->if->def->finished->def->finish->while->def->finished->deflate->finishChunk->catch->finally->def->end
IDATOutputStream#finalize()::: output stream finalize:::
PNGImageWriteParam#unsetCompression():::Removes any previous compression quality setting:::super->unsetCompression
PNGImageWriteParam#isCompressionLossless():::Returns true since the PNG plug-in only supports lossless compression.:::return
PNGImageWriteParam#getCompressionQualityDescriptions()::: image write param get compression quality descriptions:::super->getCompressionQualityDescriptions->return->qualityDescs->clone
PNGImageWriteParam#getCompressionQualityValues()::: image write param get compression quality values:::super->getCompressionQualityValues->return->qualityVals->clone
PNGImageWriter#setOutput(Object)::: image writer set output:::super->setOutput->if->if->throw->new->IllegalArgumentException->else
PNGImageWriter#getDefaultWriteParam()::: image writer get default write param:::return->getLocale->new->PNGImageWriteParam
PNGImageWriter#getDefaultStreamMetadata(ImageWriteParam)::: image writer get default stream metadata:::return
PNGImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)::: image writer get default image metadata:::m->new->PNGMetadata->m->imageType->getSampleModel->getNumBands->initialize->return
PNGImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)::: image writer convert stream metadata:::return
PNGImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)::: image writer convert image metadata:::if->return->clone->else->return->new->PNGMetadata
PNGImageWriter#write_magic()::: image writer write_magic:::magic->stream->write
PNGImageWriter#write_IHDR()::: image writer write_ r:::cs->new->ChunkStream->cs->writeInt->cs->writeInt->cs->writeByte->cs->writeByte->if->throw->new->IIOException->cs->writeByte->if->throw->new->IIOException->cs->writeByte->if->throw->new->IIOException->cs->writeByte->cs->finish
PNGImageWriter#write_cHRM()::: image writer write_c m:::if->cs->new->ChunkStream->cs->writeInt->cs->writeInt->cs->writeInt->cs->writeInt->cs->writeInt->cs->writeInt->cs->writeInt->cs->writeInt->cs->finish
PNGImageWriter#write_gAMA()::: image writer write_g a:::if->cs->new->ChunkStream->cs->writeInt->cs->finish
PNGImageWriter#write_iCCP()::: image writer write_i p:::if->cs->new->ChunkStream->cs->writeBytes->cs->writeByte->cs->writeByte->cs->write->cs->finish
PNGImageWriter#write_sBIT()::: image writer write_s t:::if->cs->new->ChunkStream->colorType->if->processWarningOccurred->return->if->cs->writeByte->else->if->cs->writeByte->cs->writeByte->cs->writeByte->if->cs->writeByte->cs->finish
PNGImageWriter#write_sRGB()::: image writer write_s b:::if->cs->new->ChunkStream->cs->writeByte->cs->finish
PNGImageWriter#write_PLTE()::: image writer write_ e:::if->if->processWarningOccurred->return->cs->new->ChunkStream->numEntries->palette->new->byteArr->index->for->i->cs->write->cs->finish
PNGImageWriter#write_hIST()::: image writer write_h t:::if->cs->new->ChunkStream->if->throw->new->IIOException->cs->writeChars->cs->finish
PNGImageWriter#write_tRNS()::: image writer write_t s:::if->cs->new->ChunkStream->colorType->chunkType->chunkRed->chunkGreen->chunkBlue->if->if->processWarningOccurred->return->if->if->throw->new->IIOException->cs->write->else->if->cs->writeShort->else->if->cs->writeShort->cs->writeShort->cs->writeShort->else->throw->new->IIOException->cs->finish
PNGImageWriter#write_bKGD()::: image writer write_b d:::if->cs->new->ChunkStream->colorType->chunkType->chunkRed->chunkGreen->chunkBlue->if->if->processWarningOccurred->return->if->cs->writeByte->else->if->cs->writeShort->else->cs->writeShort->cs->writeShort->cs->writeShort->cs->finish
PNGImageWriter#write_pHYs()::: image writer write_p ys:::if->cs->new->ChunkStream->cs->writeInt->cs->writeInt->cs->writeByte->cs->finish
PNGImageWriter#write_sPLT()::: image writer write_s t:::if->cs->new->ChunkStream->cs->writeBytes->cs->writeByte->cs->writeByte->numEntries->if->for->i->else->for->i->cs->finish
PNGImageWriter#write_tIME()::: image writer write_t e:::if->cs->new->ChunkStream->cs->writeShort->cs->writeByte->cs->writeByte->cs->writeByte->cs->writeByte->cs->writeByte->cs->finish
PNGImageWriter#write_tEXt()::: image writer write_t xt:::keywordIter->iterator->textIter->iterator->while->keywordIter->hasNext->cs->new->ChunkStream->keyword->keywordIter->next->cs->writeBytes->cs->writeByte->text->textIter->next->cs->writeBytes->cs->finish
PNGImageWriter#deflate(byte[])::: image writer deflate:::baos->new->ByteArrayOutputStream->dos->new->DeflaterOutputStream->dos->write->dos->close->return->baos->toByteArray
PNGImageWriter#write_iTXt()::: image writer write_i xt:::keywordIter->iterator->flagIter->iterator->methodIter->iterator->languageIter->iterator->translatedKeywordIter->iterator->textIter->iterator->while->keywordIter->hasNext->cs->new->ChunkStream->cs->keywordIter->next->writeBytes->cs->writeByte->compressed->flagIter->next->cs->writeByte->cs->methodIter->next->intValue->writeByte->cs->languageIter->next->writeBytes->cs->writeByte->cs->translatedKeywordIter->next->getBytes->write->cs->writeByte->text->textIter->next->if->cs->text->getBytes->deflate->write->else->cs->text->getBytes->write->cs->finish
PNGImageWriter#write_zTXt()::: image writer write_z xt:::keywordIter->iterator->methodIter->iterator->textIter->iterator->while->keywordIter->hasNext->cs->new->ChunkStream->keyword->keywordIter->next->cs->writeBytes->cs->writeByte->compressionMethod->methodIter->next->intValue->cs->writeByte->text->textIter->next->cs->text->getBytes->deflate->write->cs->finish
PNGImageWriter#writeUnknownChunks()::: image writer write unknown chunks:::typeIter->iterator->dataIter->iterator->while->typeIter->hasNext->dataIter->hasNext->type->typeIter->next->cs->chunkType->new->ChunkStream->data->dataIter->next->cs->write->cs->finish
PNGImageWriter#chunkType(String)::: image writer chunk type:::c0->typeString->charAt->c1->typeString->charAt->c2->typeString->charAt->c3->typeString->charAt->type->return
PNGImageWriter#encodePass(ImageOutputStream, RenderedImage, int, int, int, int)::: image writer encode pass:::minX->minY->width->height->hpixels->vpixels->if->return->samplesPerByte->numSamples->samples->new->intArr->bytesPerRow->if->else->if->icm_gray_alpha->if->image->getColorModel->image->getColorModel->new->byteArr->new->byteArr->new->byteArrs->bitDepth->for->row
PNGImageWriter#write_IDAT(RenderedImage, int)::: image writer write_ t:::ios->new->IDATOutputStream->try->if->for->i->else->encodePass->catch->finally->ios->finish
PNGImageWriter#writeIEND()::: image writer write d:::cs->new->ChunkStream->cs->finish
PNGImageWriter#equals(int[], int[])::: image writer equals:::if->return->if->return->for->i->return
PNGImageWriter#initializeScaleTables(int[])::: image writer initialize scale tables:::bitDepth->if->equals->return->maxOutSample->if->new->byteArrs->for->b->else->new->byteArrs->new->byteArrs->for->b
PNGImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)::: image writer write:::if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->if->image->hasRaster->throw->new->UnsupportedOperationException->im->image->getRenderedImage->sampleModel->im->getSampleModel->sampleModel->getNumBands->im->getMinX->im->getMinY->im->getWidth->im->getHeight->if->sourceRegion->param->getSourceRegion->if->imageBounds->im->getMinX->im->getMinY->im->getWidth->im->getHeight->new->Rectangle->sourceRegion->intersection->gridX->param->getSubsamplingXOffset->gridY->param->getSubsamplingYOffset->param->getSourceXSubsampling->param->getSourceYSubsampling->sBands->param->getSourceBands->if->destWidth->destHeight->if->throw->new->IllegalArgumentException->imd->image->getMetadata->if->ImageTypeSpecifier->createFromRenderedImage->convertImageMetadata->else->new->PNGMetadata->deflaterLevel->if->switch->param->getCompressionMode->break->quality->param->getCompressionQuality->if->Math->round->break->switch->param->getProgressiveMode->break->break->metadata->new->ImageTypeSpecifier->initialize->sampleModel->getSampleSize->initializeScaleTables->clearAbortRequest->processImageStarted->if->abortRequested->processWriteAborted->else->try->write_magic->write_IHDR->write_cHRM->write_gAMA->write_iCCP->write_sBIT->write_sRGB->write_PLTE->write_hIST->write_tRNS->write_bKGD->write_pHYs->write_sPLT->write_tIME->write_tEXt->write_iTXt->write_zTXt->writeUnknownChunks->write_IDAT->if->abortRequested->processWriteAborted->else->writeIEND->processImageComplete->catch->throw->new->IIOException->finally
PNGImageWriterSpi#canEncodeImage(ImageTypeSpecifier)::: image writer spi can encode image:::sampleModel->type->getSampleModel->colorModel->type->getColorModel->sampleSize->sampleModel->getSampleSize->bitDepth->for->i->if->return->numBands->sampleModel->getNumBands->if->return->hasAlpha->colorModel->hasAlpha->if->return->if->return->if->return->return
PNGImageWriterSpi#getDescription(Locale)::: image writer spi get description:::return
PNGImageWriterSpi#createWriterInstance(Object)::: image writer spi create writer instance:::return->new->PNGImageWriter
PNGMetadata#initialize(ImageTypeSpecifier, int):::Sets the IHDR_bitDepth and IHDR_colorType variables:::colorModel->imageType->getColorModel->sampleModel->imageType->getSampleModel->sampleSize->sampleModel->getSampleSize->bitDepth->for->i->if->if->else->if->else->if->else->if->throw->new->RuntimeException->if->icm->size->icm->getMapSize->reds->new->byteArr->icm->getReds->greens->new->byteArr->icm->getGreens->blues->new->byteArr->icm->getBlues->isGray->if->scale->for->i->hasAlpha->colorModel->hasAlpha->alpha->if->new->byteArr->icm->getAlphas->if->else->if->else->reds->clone->greens->clone->blues->clone->if->new->intArr->newAlpha->new->byteArr->newIndex->for->i->numTransparent->for->i->oldRed->oldGreen->oldBlue->len->new->byteArr->new->byteArr->new->byteArr->for->i->new->byteArr->System->arraycopy->else->if->else->if->else->if->else->if->else->throw->new->RuntimeException
PNGMetadata#isReadOnly()::: metadata is read only:::return
PNGMetadata#cloneBytesArrayList(ArrayList)::: metadata clone bytes array list:::if->return->else->list->in->size->new->ArrayList<byte[]>->foreach->list->b->clone->add->return
PNGMetadata#clone()::: metadata clone:::metadata->try->super->clone->catch->return->finally->cloneBytesArrayList->return
PNGMetadata#getAsTree(String)::: metadata get as tree:::if->formatName->equals->return->getNativeTree->else->if->formatName->equals->return->getStandardTree->else->throw->new->IllegalArgumentException
PNGMetadata#getNativeTree()::: metadata get native tree:::node->root->new->IIOMetadataNode->if->IHDR_node->new->IIOMetadataNode->IHDR_node->Integer->toString->setAttribute->IHDR_node->Integer->toString->setAttribute->IHDR_node->Integer->toString->setAttribute->IHDR_node->setAttribute->IHDR_node->setAttribute->IHDR_node->setAttribute->IHDR_node->setAttribute->root->appendChild->if->PLTE_node->new->IIOMetadataNode->numEntries->for->i->root->appendChild->if->bKGD_node->new->IIOMetadataNode->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->else->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->else->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->bKGD_node->appendChild->root->appendChild->if->cHRM_node->new->IIOMetadataNode->cHRM_node->Integer->toString->setAttribute->cHRM_node->Integer->toString->setAttribute->cHRM_node->Integer->toString->setAttribute->cHRM_node->Integer->toString->setAttribute->cHRM_node->Integer->toString->setAttribute->cHRM_node->Integer->toString->setAttribute->cHRM_node->Integer->toString->setAttribute->cHRM_node->Integer->toString->setAttribute->root->appendChild->if->gAMA_node->new->IIOMetadataNode->gAMA_node->Integer->toString->setAttribute->root->appendChild->if->hIST_node->new->IIOMetadataNode->for->i->root->appendChild->if->iCCP_node->new->IIOMetadataNode->iCCP_node->setAttribute->iCCP_node->setAttribute->profile->if->clone->iCCP_node->setUserObject->root->appendChild->if->iTXt_keyword->size->iTXt_parent->new->IIOMetadataNode->for->i->iTXt_keyword->size->root->appendChild->if->pHYs_node->new->IIOMetadataNode->pHYs_node->Integer->toString->setAttribute->pHYs_node->Integer->toString->setAttribute->pHYs_node->setAttribute->root->appendChild->if->sBIT_node->new->IIOMetadataNode->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->else->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->else->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->else->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->else->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->sBIT_node->appendChild->root->appendChild->if->sPLT_node->new->IIOMetadataNode->sPLT_node->setAttribute->sPLT_node->Integer->toString->setAttribute->numEntries->for->i->root->appendChild->if->sRGB_node->new->IIOMetadataNode->sRGB_node->setAttribute->root->appendChild->if->tEXt_keyword->size->tEXt_parent->new->IIOMetadataNode->for->i->tEXt_keyword->size->root->appendChild->if->tIME_node->new->IIOMetadataNode->tIME_node->Integer->toString->setAttribute->tIME_node->Integer->toString->setAttribute->tIME_node->Integer->toString->setAttribute->tIME_node->Integer->toString->setAttribute->tIME_node->Integer->toString->setAttribute->tIME_node->Integer->toString->setAttribute->root->appendChild->if->tRNS_node->new->IIOMetadataNode->if->new->IIOMetadataNode->for->i->else->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->else->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->tRNS_node->appendChild->root->appendChild->if->zTXt_keyword->size->zTXt_parent->new->IIOMetadataNode->for->i->zTXt_keyword->size->root->appendChild->if->unknownChunkType->size->unknown_parent->new->IIOMetadataNode->for->i->unknownChunkType->size->root->appendChild->return
PNGMetadata#getNumChannels()::: metadata get num channels:::numChannels->if->return
PNGMetadata#getStandardChromaNode()::: metadata get standard chroma node:::chroma_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->chroma_node->appendChild->new->IIOMetadataNode->node->Integer->getNumChannels->toString->setAttribute->chroma_node->appendChild->if->new->IIOMetadataNode->node->Float->toString->setAttribute->chroma_node->appendChild->new->IIOMetadataNode->node->setAttribute->chroma_node->appendChild->if->hasAlpha->new->IIOMetadataNode->for->i->chroma_node->appendChild->if->if->new->IIOMetadataNode->node->Integer->toString->setAttribute->else->new->IIOMetadataNode->r->g->b->if->else->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->chroma_node->appendChild->return
PNGMetadata#getStandardCompressionNode()::: metadata get standard compression node:::compression_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->new->IIOMetadataNode->node->setAttribute->compression_node->appendChild->return
PNGMetadata#repeat(String, int)::: metadata repeat:::if->return->sb->s->length->new->StringBuilder->sb->append->for->i->return->sb->toString
PNGMetadata#getStandardDataNode()::: metadata get standard data node:::data_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->data_node->appendChild->new->IIOMetadataNode->node->setAttribute->data_node->appendChild->bitDepth->Integer->toString->new->IIOMetadataNode->node->getNumChannels->repeat->setAttribute->data_node->appendChild->if->new->IIOMetadataNode->sbits->if->Integer->toString->else->Integer->toString->Integer->toString->Integer->toString->if->Integer->toString->node->setAttribute->data_node->appendChild->return
PNGMetadata#getStandardDimensionNode()::: metadata get standard dimension node:::dimension_node->new->IIOMetadataNode->node->new->IIOMetadataNode->ratio->node->Float->toString->setAttribute->dimension_node->appendChild->new->IIOMetadataNode->node->setAttribute->dimension_node->appendChild->if->new->IIOMetadataNode->node->Float->toString->setAttribute->dimension_node->appendChild->new->IIOMetadataNode->node->Float->toString->setAttribute->dimension_node->appendChild->return
PNGMetadata#getStandardDocumentNode()::: metadata get standard document node:::document_node->if->new->IIOMetadataNode->node->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->document_node->appendChild->if->if->new->IIOMetadataNode->node->new->IIOMetadataNode->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->node->Integer->toString->setAttribute->document_node->appendChild->return
PNGMetadata#getStandardTextNode()::: metadata get standard text node:::numEntries->tEXt_keyword->size->iTXt_keyword->size->zTXt_keyword->size->if->return->text_node->new->IIOMetadataNode->node->for->i->tEXt_keyword->size->for->i->iTXt_keyword->size->for->i->zTXt_keyword->size->return
PNGMetadata#getStandardTransparencyNode()::: metadata get standard transparency node:::transparency_node->new->IIOMetadataNode->node->new->IIOMetadataNode->hasAlpha->node->setAttribute->transparency_node->appendChild->if->new->IIOMetadataNode->if->node->Integer->toString->Integer->toString->Integer->toString->setAttribute->else->if->node->Integer->toString->setAttribute->transparency_node->appendChild->return
PNGMetadata#fatal(Node, String)::: metadata fatal:::throw->new->IIOInvalidTreeException
PNGMetadata#getStringAttribute(Node, String, String, boolean)::: metadata get string attribute:::attr->node->getAttributes->getNamedItem->if->if->return->else->fatal->return->attr->getNodeValue
PNGMetadata#getIntAttribute(Node, String, int, boolean)::: metadata get int attribute:::value->getStringAttribute->if->return->return->Integer->parseInt
PNGMetadata#getFloatAttribute(Node, String, float, boolean)::: metadata get float attribute:::value->getStringAttribute->if->return->return->Float->parseFloat
PNGMetadata#getIntAttribute(Node, String)::: metadata get int attribute:::return->getIntAttribute
PNGMetadata#getFloatAttribute(Node, String)::: metadata get float attribute:::return->getFloatAttribute
PNGMetadata#getBooleanAttribute(Node, String, boolean, boolean)::: metadata get boolean attribute:::attr->node->getAttributes->getNamedItem->if->if->return->else->fatal->value->attr->getNodeValue->if->value->equals->value->equals->return->else->if->value->equals->value->equals->return->else->fatal->return
PNGMetadata#getBooleanAttribute(Node, String)::: metadata get boolean attribute:::return->getBooleanAttribute
PNGMetadata#getEnumeratedAttribute(Node, String, String[], int, boolean)::: metadata get enumerated attribute:::attr->node->getAttributes->getNamedItem->if->if->return->else->fatal->value->attr->getNodeValue->for->i->fatal->return
PNGMetadata#getEnumeratedAttribute(Node, String, String[])::: metadata get enumerated attribute:::return->getEnumeratedAttribute
PNGMetadata#getAttribute(Node, String, String, boolean)::: metadata get attribute:::attr->node->getAttributes->getNamedItem->if->if->return->else->fatal->return->attr->getNodeValue
PNGMetadata#getAttribute(Node, String)::: metadata get attribute:::return->getAttribute
PNGMetadata#mergeTree(String, Node)::: metadata merge tree:::if->formatName->equals->if->throw->new->IllegalArgumentException->mergeNativeTree->else->if->formatName->equals->if->throw->new->IllegalArgumentException->mergeStandardTree->else->throw->new->IllegalArgumentException
PNGMetadata#mergeNativeTree(Node)::: metadata merge native tree:::node->if->node->getNodeName->equals->fatal->node->getFirstChild->while->name->node->getNodeName->if->name->equals->getIntAttribute->getIntAttribute->Integer->getEnumeratedAttribute->valueOf->getEnumeratedAttribute->getEnumeratedAttribute->getEnumeratedAttribute->getEnumeratedAttribute->else->if->name->equals->red->new->byteArr->green->new->byteArr->blue->new->byteArr->maxindex->PLTE_entry->node->getFirstChild->if->fatal->while->if->PLTE_entry->getNodeName->equals->fatal->index->getIntAttribute->if->fatal->if->getIntAttribute->getIntAttribute->getIntAttribute->PLTE_entry->getNextSibling->numEntries->new->byteArr->new->byteArr->new->byteArr->System->arraycopy->System->arraycopy->System->arraycopy->else->if->name->equals->bKGD_node->node->getFirstChild->if->fatal->bKGD_name->bKGD_node->getNodeName->if->bKGD_name->equals->getIntAttribute->else->if->bKGD_name->equals->getIntAttribute->else->if->bKGD_name->equals->getIntAttribute->getIntAttribute->getIntAttribute->else->fatal->if->bKGD_node->getNextSibling->fatal->else->if->name->equals->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->else->if->name->equals->getIntAttribute->else->if->name->equals->hist->new->charArr->maxindex->hIST_entry->node->getFirstChild->if->fatal->while->if->hIST_entry->getNodeName->equals->fatal->index->getIntAttribute->if->fatal->if->getIntAttribute->hIST_entry->getNextSibling->numEntries->new->charArr->System->arraycopy->else->if->name->equals->getAttribute->getEnumeratedAttribute->compressedProfile->getUserObject->if->fatal->if->fatal->clone->else->if->name->equals->iTXt_node->node->getFirstChild->while->if->iTXt_node->getNodeName->equals->fatal->keyword->getAttribute->if->isValidKeyword->iTXt_keyword->add->compressionFlag->getBooleanAttribute->iTXt_compressionFlag->Boolean->valueOf->add->compressionMethod->getAttribute->iTXt_compressionMethod->Integer->valueOf->add->languageTag->getAttribute->iTXt_languageTag->add->translatedKeyword->getAttribute->iTXt_translatedKeyword->add->text->getAttribute->iTXt_text->add->if->keyword->equals->index->iTXt_text->size->iTXt_text->listIterator->decodeImageCreationTimeFromTextChunk->iTXt_node->getNextSibling->else->if->name->equals->getIntAttribute->getIntAttribute->getEnumeratedAttribute->else->if->name->equals->sBIT_node->node->getFirstChild->if->fatal->sBIT_name->sBIT_node->getNodeName->if->sBIT_name->equals->getIntAttribute->else->if->sBIT_name->equals->getIntAttribute->getIntAttribute->else->if->sBIT_name->equals->getIntAttribute->getIntAttribute->getIntAttribute->else->if->sBIT_name->equals->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->else->if->sBIT_name->equals->getIntAttribute->getIntAttribute->getIntAttribute->else->fatal->if->sBIT_node->getNextSibling->fatal->else->if->name->equals->getAttribute->getIntAttribute->red->new->intArr->green->new->intArr->blue->new->intArr->alpha->new->intArr->frequency->new->intArr->maxindex->sPLT_entry->node->getFirstChild->if->fatal->while->if->sPLT_entry->getNodeName->equals->fatal->index->getIntAttribute->if->fatal->if->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->sPLT_entry->getNextSibling->numEntries->new->intArr->new->intArr->new->intArr->new->intArr->new->intArr->System->arraycopy->System->arraycopy->System->arraycopy->System->arraycopy->System->arraycopy->else->if->name->equals->getEnumeratedAttribute->else->if->name->equals->tEXt_node->node->getFirstChild->while->if->tEXt_node->getNodeName->equals->fatal->keyword->getAttribute->tEXt_keyword->add->text->getAttribute->tEXt_text->add->if->keyword->equals->index->tEXt_text->size->tEXt_text->listIterator->decodeImageCreationTimeFromTextChunk->tEXt_node->getNextSibling->else->if->name->equals->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->else->if->name->equals->tRNS_node->node->getFirstChild->if->fatal->tRNS_name->tRNS_node->getNodeName->if->tRNS_name->equals->alpha->new->byteArr->maxindex->tRNS_paletteEntry->tRNS_node->getFirstChild->if->fatal->while->if->tRNS_paletteEntry->getNodeName->equals->fatal->index->getIntAttribute->if->fatal->if->getIntAttribute->tRNS_paletteEntry->getNextSibling->numEntries->new->byteArr->System->arraycopy->else->if->tRNS_name->equals->getIntAttribute->else->if->tRNS_name->equals->getIntAttribute->getIntAttribute->getIntAttribute->else->fatal->if->tRNS_node->getNextSibling->fatal->else->if->name->equals->zTXt_node->node->getFirstChild->while->if->zTXt_node->getNodeName->equals->fatal->keyword->getAttribute->zTXt_keyword->add->compressionMethod->getEnumeratedAttribute->zTXt_compressionMethod->add->text->getAttribute->zTXt_text->add->if->keyword->equals->index->zTXt_text->size->zTXt_text->listIterator->decodeImageCreationTimeFromTextChunk->zTXt_node->getNextSibling->else->if->name->equals->unknown_node->node->getFirstChild->while->if->unknown_node->getNodeName->equals->fatal->chunkType->getAttribute->chunkData->getUserObject->if->chunkType->length->fatal->if->fatal->if->fatal->unknownChunkType->add->unknownChunkData->clone->add->unknown_node->getNextSibling->else->fatal->node->getNextSibling
PNGMetadata#isValidKeyword(String)::: metadata is valid keyword:::len->s->length->if->return->if->s->startsWith->s->endsWith->s->contains->return->return->isISOLatin
PNGMetadata#isISOLatin(String, boolean)::: metadata is latin:::len->s->length->for->i->return
PNGMetadata#mergeStandardTree(Node)::: metadata merge standard tree:::node->if->node->getNodeName->equals->fatal->node->getFirstChild->while->name->node->getNodeName->if->name->equals->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->gamma->getFloatAttribute->else->if->childName->equals->red->new->byteArr->green->new->byteArr->blue->new->byteArr->maxindex->entry->child->getFirstChild->while->index->getIntAttribute->if->getIntAttribute->getIntAttribute->getIntAttribute->if->entry->getNextSibling->numEntries->new->byteArr->new->byteArr->new->byteArr->System->arraycopy->System->arraycopy->System->arraycopy->else->if->childName->equals->getIntAttribute->else->if->childName->equals->red->getIntAttribute->green->getIntAttribute->blue->getIntAttribute->if->else->child->getNextSibling->else->if->name->equals->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->scans->getIntAttribute->child->getNextSibling->else->if->name->equals->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->s->getAttribute->t->new->StringTokenizer->maxBits->while->t->hasMoreTokens->bits->Integer->t->nextToken->parseInt->if->if->if->if->if->else->if->childName->equals->s->getAttribute->t->new->StringTokenizer->numTokens->t->countTokens->if->Integer->t->nextToken->parseInt->else->if->Integer->t->nextToken->parseInt->Integer->t->nextToken->parseInt->else->if->Integer->t->nextToken->parseInt->Integer->t->nextToken->parseInt->Integer->t->nextToken->parseInt->else->if->Integer->t->nextToken->parseInt->Integer->t->nextToken->parseInt->Integer->t->nextToken->parseInt->Integer->t->nextToken->parseInt->if->child->getNextSibling->else->if->name->equals->gotWidth->gotHeight->gotAspectRatio->width->height->aspectRatio->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->getFloatAttribute->else->if->childName->equals->getFloatAttribute->else->if->childName->equals->getFloatAttribute->child->getNextSibling->if->else->if->denom->for->else->if->name->equals->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->getIntAttribute->else->if->childName->equals->year->getIntAttribute->month->getIntAttribute->day->getIntAttribute->hour->getIntAttribute->mins->getIntAttribute->sec->getIntAttribute->initImageCreationTime->encodeImageCreationTimeToTextChunk->child->getNextSibling->else->if->name->equals->child->node->getFirstChild->while->childName->child->getNodeName->if->childName->equals->keyword->getAttribute->value->getAttribute->language->getAttribute->compression->getAttribute->if->isValidKeyword->else->if->isISOLatin->if->compression->equals->zTXt_keyword->add->zTXt_text->add->zTXt_compressionMethod->Integer->valueOf->add->else->tEXt_keyword->add->tEXt_text->add->else->iTXt_keyword->add->iTXt_compressionFlag->Boolean->compression->equals->valueOf->add->iTXt_compressionMethod->Integer->valueOf->add->iTXt_languageTag->add->iTXt_translatedKeyword->add->iTXt_text->add->child->getNextSibling->node->getNextSibling
PNGMetadata#initImageCreationTime(OffsetDateTime)::: metadata init image creation time:::if->offsetDateTime->getYear->offsetDateTime->getMonthValue->offsetDateTime->getDayOfMonth->offsetDateTime->getHour->offsetDateTime->getMinute->offsetDateTime->getSecond->offsetDateTime->getOffset
PNGMetadata#initImageCreationTime(int, int, int, int, int, int)::: metadata init image creation time:::locDT->LocalDateTime->of->offset->ZoneId->systemDefault->getRules->getOffset->offDateTime->OffsetDateTime->of->initImageCreationTime
PNGMetadata#decodeImageCreationTimeFromTextChunk(ListIterator)::: metadata decode image creation time from text chunk:::if->iterChunk->hasNext->setCreationTimeChunk->encodedTime->getEncodedTime->parseEncodedTime->initImageCreationTime
PNGMetadata#encodeImageCreationTimeToTextChunk()::: metadata encode image creation time to text chunk:::if->if->add->add->index->tEXt_text->size->tEXt_text->listIterator->setCreationTimeChunk->offDateTime->OffsetDateTime->of->formatter->encodedTime->offDateTime->format->setEncodedTime
PNGMetadata#setCreationTimeChunk(ListIterator)::: metadata set creation time chunk:::if->iter->hasNext
PNGMetadata#setEncodedTime(String)::: metadata set encoded time:::if->tEXt_creation_time_iter->hasNext->tEXt_creation_time_iter->next->tEXt_creation_time_iter->set->tEXt_creation_time_iter->previous
PNGMetadata#getEncodedTime()::: metadata get encoded time:::encodedTime->if->tEXt_creation_time_iter->hasNext->tEXt_creation_time_iter->next->tEXt_creation_time_iter->previous->return
PNGMetadata#parseEncodedTime(String)::: metadata parse encoded time:::retVal->timeDecoded->try->OffsetDateTime->parse->catch->finally->if->try->formatter->dt->formatter->OffsetDateTime->from->LocalDateTime->from->parseBest->if->else->if->locDT->OffsetDateTime->of->catch->finally->return
PNGMetadata#hasTransparentColor()::: metadata has transparent color:::return
PNGMetadata#reset()::: metadata reset:::new->ArrayList<String>->new->ArrayList<Boolean>->new->ArrayList<Integer>->new->ArrayList<String>->new->ArrayList<String>->new->ArrayList<String>->new->ArrayList<String>->new->ArrayList<String>->new->ArrayList<String>->new->ArrayList<Integer>->new->ArrayList<String>->new->ArrayList<String>->new->ArrayList<byte[]>
PNGMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)::: metadata format can node appear:::return
PNGMetadataFormat#getInstance()::: metadata format get instance:::if->new->PNGMetadataFormat->return
PNGMetadataFormatResources#getContents()::: metadata format resources get contents:::return->new->ObjectArrs
RowFilter#abs(int)::: row filter abs:::return
RowFilter#subFilter(byte[], byte[], int, int)::: row filter sub filter:::badness->for->i->return
RowFilter#upFilter(byte[], byte[], byte[], int, int)::: row filter up filter:::badness->for->i->return
RowFilter#paethPredictor(int, int, int)::: row filter paeth predictor:::p->pa->abs->pb->abs->pc->abs->if->return->else->if->return->else->return
RowFilter#filterRow(int, byte[], byte[], byte[][], int, int)::: row filter filter row:::if->System->arraycopy->return->filterBadness->new->intArr->for->i->badness->for->i->subFilteredRow->badness->subFilter->upFilteredRow->badness->upFilter->averageFilteredRow->badness->for->i->paethFilteredRow->badness->for->i->minBadness->filterType->for->i->if->System->arraycopy->return

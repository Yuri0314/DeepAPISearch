com.sun.imageio.plugins.png.PNGImageDataEnumeration#nextElement()->InputStream::: image data enumeration next element
com.sun.imageio.plugins.png.PNGImageDataEnumeration#hasMoreElements()->boolean::: image data enumeration has more elements
com.sun.imageio.plugins.png.PNGImageReader#setInput(Object, boolean, boolean)->void::: image reader set input
com.sun.imageio.plugins.png.PNGImageReader#getNumImages(boolean)->int::: image reader get num images
com.sun.imageio.plugins.png.PNGImageReader#getWidth(int)->int::: image reader get width
com.sun.imageio.plugins.png.PNGImageReader#getHeight(int)->int::: image reader get height
com.sun.imageio.plugins.png.PNGImageReader#getImageTypes(int)->Iterator::: image reader get image types
com.sun.imageio.plugins.png.PNGImageReader#getRawImageType(int)->ImageTypeSpecifier::: image reader get raw image type
com.sun.imageio.plugins.png.PNGImageReader#getDefaultReadParam()->ImageReadParam::: image reader get default read param
com.sun.imageio.plugins.png.PNGImageReader#getStreamMetadata()->IIOMetadata::: image reader get stream metadata
com.sun.imageio.plugins.png.PNGImageReader#getImageMetadata(int)->IIOMetadata::: image reader get image metadata
com.sun.imageio.plugins.png.PNGImageReader#read(int, ImageReadParam)->BufferedImage::: image reader read
com.sun.imageio.plugins.png.PNGImageReader#reset()->void::: image reader reset
com.sun.imageio.plugins.png.PNGImageReaderSpi#getDescription(Locale)->String::: image reader spi get description
com.sun.imageio.plugins.png.PNGImageReaderSpi#canDecodeInput(Object)->boolean::: image reader spi can decode input
com.sun.imageio.plugins.png.PNGImageReaderSpi#createReaderInstance(Object)->ImageReader::: image reader spi create reader instance
com.sun.imageio.plugins.png.CRC#reset()->void::: c reset
com.sun.imageio.plugins.png.CRC#update(byte[], int, int)->void::: c update
com.sun.imageio.plugins.png.CRC#update(int)->void::: c update
com.sun.imageio.plugins.png.CRC#getValue()->int::: c get value
com.sun.imageio.plugins.png.ChunkStream#read()->int::: chunk stream read
com.sun.imageio.plugins.png.ChunkStream#read(byte[], int, int)->int::: chunk stream read
com.sun.imageio.plugins.png.ChunkStream#write(byte[], int, int)->void::: chunk stream write
com.sun.imageio.plugins.png.ChunkStream#write(int)->void::: chunk stream write
com.sun.imageio.plugins.png.ChunkStream#finish()->void::: chunk stream finish
com.sun.imageio.plugins.png.ChunkStream#finalize()->void::: chunk stream finalize
com.sun.imageio.plugins.png.IDATOutputStream#read()->int::: output stream read
com.sun.imageio.plugins.png.IDATOutputStream#read(byte[], int, int)->int::: output stream read
com.sun.imageio.plugins.png.IDATOutputStream#write(byte[], int, int)->void::: output stream write
com.sun.imageio.plugins.png.IDATOutputStream#deflate()->void::: output stream deflate
com.sun.imageio.plugins.png.IDATOutputStream#write(int)->void::: output stream write
com.sun.imageio.plugins.png.IDATOutputStream#finish()->void::: output stream finish
com.sun.imageio.plugins.png.IDATOutputStream#finalize()->void::: output stream finalize
com.sun.imageio.plugins.png.PNGImageWriteParam#unsetCompression()->void:::Removes any previous compression quality setting
com.sun.imageio.plugins.png.PNGImageWriteParam#isCompressionLossless()->boolean:::Returns true since the PNG plug-in only supports lossless compression.
com.sun.imageio.plugins.png.PNGImageWriteParam#getCompressionQualityDescriptions()->String[]::: image write param get compression quality descriptions
com.sun.imageio.plugins.png.PNGImageWriteParam#getCompressionQualityValues()->float[]::: image write param get compression quality values
com.sun.imageio.plugins.png.PNGImageWriter#setOutput(Object)->void::: image writer set output
com.sun.imageio.plugins.png.PNGImageWriter#getDefaultWriteParam()->ImageWriteParam::: image writer get default write param
com.sun.imageio.plugins.png.PNGImageWriter#getDefaultStreamMetadata(ImageWriteParam)->IIOMetadata::: image writer get default stream metadata
com.sun.imageio.plugins.png.PNGImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)->IIOMetadata::: image writer get default image metadata
com.sun.imageio.plugins.png.PNGImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)->IIOMetadata::: image writer convert stream metadata
com.sun.imageio.plugins.png.PNGImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)->IIOMetadata::: image writer convert image metadata
com.sun.imageio.plugins.png.PNGImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)->void::: image writer write
com.sun.imageio.plugins.png.PNGImageWriterSpi#canEncodeImage(ImageTypeSpecifier)->boolean::: image writer spi can encode image
com.sun.imageio.plugins.png.PNGImageWriterSpi#getDescription(Locale)->String::: image writer spi get description
com.sun.imageio.plugins.png.PNGImageWriterSpi#createWriterInstance(Object)->ImageWriter::: image writer spi create writer instance
com.sun.imageio.plugins.png.PNGMetadata#initialize(ImageTypeSpecifier, int)->void:::Sets the IHDR_bitDepth and IHDR_colorType variables
com.sun.imageio.plugins.png.PNGMetadata#isReadOnly()->boolean::: metadata is read only
com.sun.imageio.plugins.png.PNGMetadata#clone()->Object::: metadata clone
com.sun.imageio.plugins.png.PNGMetadata#getAsTree(String)->Node::: metadata get as tree
com.sun.imageio.plugins.png.PNGMetadata#getStandardChromaNode()->IIOMetadataNode::: metadata get standard chroma node
com.sun.imageio.plugins.png.PNGMetadata#getStandardCompressionNode()->IIOMetadataNode::: metadata get standard compression node
com.sun.imageio.plugins.png.PNGMetadata#getStandardDataNode()->IIOMetadataNode::: metadata get standard data node
com.sun.imageio.plugins.png.PNGMetadata#getStandardDimensionNode()->IIOMetadataNode::: metadata get standard dimension node
com.sun.imageio.plugins.png.PNGMetadata#getStandardDocumentNode()->IIOMetadataNode::: metadata get standard document node
com.sun.imageio.plugins.png.PNGMetadata#getStandardTextNode()->IIOMetadataNode::: metadata get standard text node
com.sun.imageio.plugins.png.PNGMetadata#getStandardTransparencyNode()->IIOMetadataNode::: metadata get standard transparency node
com.sun.imageio.plugins.png.PNGMetadata#mergeTree(String, Node)->void::: metadata merge tree
com.sun.imageio.plugins.png.PNGMetadata#initImageCreationTime(OffsetDateTime)->void::: metadata init image creation time
com.sun.imageio.plugins.png.PNGMetadata#initImageCreationTime(int, int, int, int, int, int)->void::: metadata init image creation time
com.sun.imageio.plugins.png.PNGMetadata#decodeImageCreationTimeFromTextChunk(ListIterator)->void::: metadata decode image creation time from text chunk
com.sun.imageio.plugins.png.PNGMetadata#encodeImageCreationTimeToTextChunk()->void::: metadata encode image creation time to text chunk
com.sun.imageio.plugins.png.PNGMetadata#hasTransparentColor()->boolean::: metadata has transparent color
com.sun.imageio.plugins.png.PNGMetadata#reset()->void::: metadata reset
com.sun.imageio.plugins.png.PNGMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)->boolean::: metadata format can node appear
com.sun.imageio.plugins.png.PNGMetadataFormat#getInstance()->IIOMetadataFormat::: metadata format get instance
com.sun.imageio.plugins.png.PNGMetadataFormatResources#getContents()->Object[][]::: metadata format resources get contents
com.sun.imageio.plugins.png.RowFilter#subFilter(byte[], byte[], int, int)->int::: row filter sub filter
com.sun.imageio.plugins.png.RowFilter#upFilter(byte[], byte[], byte[], int, int)->int::: row filter up filter
com.sun.imageio.plugins.png.RowFilter#paethPredictor(int, int, int)->int::: row filter paeth predictor
com.sun.imageio.plugins.png.RowFilter#filterRow(int, byte[], byte[], byte[][], int, int)->int::: row filter filter row

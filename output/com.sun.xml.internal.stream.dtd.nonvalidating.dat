DTDGrammar#getAttributeDeclIndex(int, String)::: grammar get attribute decl index:::if->return->attDefIndex->getFirstAttributeDeclIndex->while->getAttributeDecl->if->attributeDeclName->equals->return->getNextAttributeDeclIndex->return
DTDGrammar#startDTD(XMLLocator, Augmentations):::The start of the DTD.:::
DTDGrammar#elementDecl(String, String, Augmentations):::An element declaration.:::tmpElementDecl->fElementDeclTab->get->if->if->getElementDeclIndex->else->return->else->createElementDecl->elementDecl->new->XMLElementDecl->elementName->new->QName->setValues->if->contentModel->equals->else->if->contentModel->equals->else->if->contentModel->startsWith->if->contentModel->indexOf->else->put->if->println->println->setElementDecl->chunk->ensureElementDeclCapacity
DTDGrammar#attributeDecl(String, String, String, String[], String, XMLString, XMLString, Augmentations):::An attribute declaration.:::if->normalizeDefaultAttrValue->if->containsKey->else->createElementDecl->elementDecl->new->XMLElementDecl->setValues->put->setElementDecl->elementIndex->getElementDeclIndex->if->getAttributeDeclIndex->return->createAttributeDecl->fSimpleType->clear->if->if->defaultType->equals->else->if->defaultType->equals->else->if->defaultType->equals->if->defaultValue->toString->println->defaultValue->toString->nonNormalizedDefaultValue->toString->if->type->equals->else->if->type->equals->else->if->type->startsWith->if->type->indexOf->else->if->type->equals->else->if->type->equals->else->if->type->equals->else->if->type->equals->else->if->type->startsWith->else->if->type->startsWith->else->println->fQName->setValues->fAttributeDecl->setValues->setAttributeDecl->chunk->ensureAttributeDeclCapacity
DTDGrammar#getSymbolTable():::Returns the symbol table.:::return
DTDGrammar#getFirstElementDeclIndex():::Returns the index of the first element declaration:::return
DTDGrammar#getNextElementDeclIndex(int):::Returns the next index of the element declaration following the specified element declaration.:::return
DTDGrammar#getElementDeclIndex(String):::getElementDeclIndex:::mapping->fElementIndexMap->get->if->return
DTDGrammar#getElementDeclIndex(QName):::Returns the element decl index.:::return->getElementDeclIndex
DTDGrammar#getContentSpecType(int)::: grammar get content spec type:::if->return->chunk->index->if->return->else->return
DTDGrammar#getElementDecl(int, XMLElementDecl):::getElementDecl:::if->return->chunk->index->setValues->if->else->return
DTDGrammar#getFirstAttributeDeclIndex(int):::getFirstAttributeDeclIndex:::chunk->index->return
DTDGrammar#getNextAttributeDeclIndex(int):::getNextAttributeDeclIndex:::chunk->index->return
DTDGrammar#getAttributeDecl(int, XMLAttributeDecl):::getAttributeDecl:::if->return->chunk->index->setValues->attributeType->isList->if->else->setValues->return
DTDGrammar#isCDATAAttribute(QName, QName):::Returns whether the given attribute is of type CDATA or not:::elDeclIdx->getElementDeclIndex->if->getAttributeDecl->return->return
DTDGrammar#printElements()::: grammar print elements:::elementDeclIndex->elementDecl->new->XMLElementDecl->while->getElementDecl->println
DTDGrammar#printAttributes(int)::: grammar print attributes:::attributeDeclIndex->getFirstAttributeDeclIndex->print->print->while->print->print->printAttribute->getNextAttributeDeclIndex->if->print->println
DTDGrammar#createElementDecl()::: grammar create element decl:::chunk->index->ensureElementDeclCapacity->new->QName->return
DTDGrammar#setElementDecl(int, XMLElementDecl)::: grammar set element decl:::if->return->chunk->index->scope->setValues->if->fElementIndexMap->put
DTDGrammar#setFirstAttributeDeclIndex(int, int)::: grammar set first attribute decl index:::if->return->chunk->index
DTDGrammar#createAttributeDecl()::: grammar create attribute decl:::chunk->index->ensureAttributeDeclCapacity->new->QName->return
DTDGrammar#setAttributeDecl(int, int, XMLAttributeDecl)::: grammar set attribute decl:::attrChunk->attrIndex->setValues->if->elemChunk->elemIndex->index->while->if->break->if->if->else
DTDGrammar#notationDecl(String, XMLResourceIdentifier, Augmentations)::: grammar notation decl:::notationDecl->new->XMLNotationDecl->notationDecl->identifier->getPublicId->identifier->getLiteralSystemId->identifier->getBaseSystemId->setValues->notationDecls->add
DTDGrammar#getNotationDecls()::: grammar get notation decls:::return
DTDGrammar#printAttribute(int)::: grammar print attribute:::attributeDecl->new->XMLAttributeDecl->if->getAttributeDecl->print->print->print
DTDGrammar#ensureElementDeclCapacity(int)::: grammar ensure element decl capacity:::if->resize->resize->resize->resize->else->if->return->new->QNameArr->new->shortArr->new->intArr->new->intArr->return
DTDGrammar#ensureAttributeDeclCapacity(int)::: grammar ensure attribute decl capacity:::if->resize->resize->resize->resize->resize->resize->resize->else->if->return->new->QNameArr->new->shortArr->new->StringArrs->new->shortArr->new->StringArr->new->StringArr->new->intArr->return
DTDGrammar#resize(short[][], int)::: grammar resize:::newarray->new->shortArrs->System->arraycopy->return
DTDGrammar#resize(int[][], int)::: grammar resize:::newarray->new->intArrs->System->arraycopy->return
DTDGrammar#resize(QName[][], int)::: grammar resize:::newarray->new->QNameArrs->System->arraycopy->return
DTDGrammar#resize(String[][], int)::: grammar resize:::newarray->new->StringArrs->System->arraycopy->return
DTDGrammar#resize(String[][][], int)::: grammar resize:::newarray->new->StringArrs->System->arraycopy->return
DTDGrammar#normalizeDefaultAttrValue(XMLString):::Normalize the attribute value of a non CDATA default attribute collapsing sequences of space characters (x20):::oldLength->skipSpace->current->end->for->i->if->if->return->return
DTDGrammar#endDTD(Augmentations)::: grammar end d:::
XMLAttributeDecl#setValues(QName, XMLSimpleType, boolean):::setValues:::setValues->setValues
XMLAttributeDecl#clear():::clear:::clear->clear
XMLElementDecl#setValues(QName, int, short, XMLSimpleType):::setValues:::setValues->setValues
XMLElementDecl#clear():::clear:::clear->clear
XMLNotationDecl#setValues(String, String, String, String):::setValues:::
XMLNotationDecl#clear():::clear:::
XMLSimpleType#setValues(short, String, String[], boolean, short, String, String):::setValues:::if->new->StringArr->System->arraycopy->else
XMLSimpleType#setValues(XMLSimpleType):::Set values.:::if->new->StringArr->System->arraycopy->else
XMLSimpleType#clear():::clear:::

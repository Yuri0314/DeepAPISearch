org.graalvm.compiler.nodes.util.GraphUtil_OptionDescriptors#get(String)->OptionDescriptor::: graph util_ option descriptors get
org.graalvm.compiler.nodes.util.GraphUtil_OptionDescriptors#iterator()->Iterator::: graph util_ option descriptors iterator
org.graalvm.compiler.nodes.util.ConstantFoldUtil#tryConstantFold(ConstantFieldProvider, ConstantReflectionProvider, MetaAccessProvider, ResolvedJavaField, JavaConstant, OptionValues)->ConstantNode::: constant fold util try constant fold
org.graalvm.compiler.nodes.util.GraphUtil#killCFG(FixedNode)->void::: graph util kill g
org.graalvm.compiler.nodes.util.GraphUtil#isFloatingNode(Node)->boolean::: graph util is floating node
org.graalvm.compiler.nodes.util.GraphUtil#killWithUnusedFloatingInputs(Node)->void::: graph util kill with unused floating inputs
org.graalvm.compiler.nodes.util.GraphUtil#killWithUnusedFloatingInputs(Node, boolean)->void::: graph util kill with unused floating inputs
org.graalvm.compiler.nodes.util.GraphUtil#removeNewNodes(Graph, Graph.Mark)->void:::Removes all nodes created after the mark, assuming no "old" nodes point to "new" nodes.
org.graalvm.compiler.nodes.util.GraphUtil#removeFixedWithUnusedInputs(FixedWithNextNode)->void::: graph util remove fixed with unused inputs
org.graalvm.compiler.nodes.util.GraphUtil#unlinkFixedNode(FixedWithNextNode)->void::: graph util unlink fixed node
org.graalvm.compiler.nodes.util.GraphUtil#checkRedundantPhi(PhiNode)->void::: graph util check redundant phi
org.graalvm.compiler.nodes.util.GraphUtil#checkRedundantProxy(ProxyNode)->void::: graph util check redundant proxy
org.graalvm.compiler.nodes.util.GraphUtil#normalizeLoops(StructuredGraph)->void:::Remove loop header without loop ends
org.graalvm.compiler.nodes.util.GraphUtil#approxSourceStackTraceElement(Node)->StackTraceElement[]:::Gets an approximate source code location for a node if possible.
org.graalvm.compiler.nodes.util.GraphUtil#approxSourceStackTraceElement(FrameState)->StackTraceElement[]:::Gets an approximate source code location for frame state.
org.graalvm.compiler.nodes.util.GraphUtil#approxSourceStackTraceElement(BytecodePosition)->StackTraceElement[]:::Gets approximate stack trace elements for a bytecode position.
org.graalvm.compiler.nodes.util.GraphUtil#approxSourceException(Node, Throwable)->RuntimeException:::Gets an approximate source code location for a node, encoded as an exception, if possible.
org.graalvm.compiler.nodes.util.GraphUtil#createBailoutException(String, Throwable, StackTraceElement[])->BailoutException:::Creates a bailout exception with the given stack trace elements and message.
org.graalvm.compiler.nodes.util.GraphUtil#approxSourceLocation(Node)->String:::Gets an approximate source code location for a node if possible.
org.graalvm.compiler.nodes.util.GraphUtil#toString(Iterable)->String:::Returns a string representation of the given collection of objects.
org.graalvm.compiler.nodes.util.GraphUtil#unproxify(ValueNode)->ValueNode:::Gets the original value by iterating through all ValueProxy ValueProxies.
org.graalvm.compiler.nodes.util.GraphUtil#unproxify(ValueProxy)->ValueNode:::Gets the original value by iterating through all ValueProxy ValueProxies.
org.graalvm.compiler.nodes.util.GraphUtil#skipPi(ValueNode)->ValueNode::: graph util skip pi
org.graalvm.compiler.nodes.util.GraphUtil#skipPiWhileNonNull(ValueNode)->ValueNode::: graph util skip pi while non null
org.graalvm.compiler.nodes.util.GraphUtil#arrayLength(ValueNode, FindLengthMode, ConstantReflectionProvider)->ValueNode:::Returns the length of the array described by the value parameter, or null if it is not available
org.graalvm.compiler.nodes.util.GraphUtil#originalValue(ValueNode)->ValueNode:::Tries to find an original value of the given node by traversing through proxies and unambiguous phis
org.graalvm.compiler.nodes.util.GraphUtil#tryKillUnused(Node)->boolean::: graph util try kill unused
org.graalvm.compiler.nodes.util.GraphUtil#predecessorIterable(FixedNode)->NodeIterable:::Returns an iterator that will return the given node followed by all its predecessors, up until the point where Node#predecessor() returns null.
org.graalvm.compiler.nodes.util.GraphUtil#getDefaultSimplifier(MetaAccessProvider, ConstantReflectionProvider, ConstantFieldProvider, boolean, Assumptions, OptionValues)->SimplifierTool::: graph util get default simplifier
org.graalvm.compiler.nodes.util.GraphUtil#getDefaultSimplifier(MetaAccessProvider, ConstantReflectionProvider, ConstantFieldProvider, boolean, Assumptions, OptionValues, LoweringProvider)->SimplifierTool::: graph util get default simplifier
org.graalvm.compiler.nodes.util.GraphUtil#foldIfConstantAndRemove(ValueNode, ValueNode)->Constant::: graph util fold if constant and remove
org.graalvm.compiler.nodes.util.GraphUtil#virtualizeArrayCopy(VirtualizerTool, ValueNode, ValueNode, ValueNode, ValueNode, ResolvedJavaType, JavaKind, StructuredGraph, BiFunction)->void:::Virtualize an array copy.
org.graalvm.compiler.nodes.util.JavaConstantFormattable#format(JavaConstantFormatter)->String::: java constant formattable format
org.graalvm.compiler.nodes.util.JavaConstantFormatter#format(JavaConstant)->String::: java constant formatter format

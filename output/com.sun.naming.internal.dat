ResourceManager#getInitialEnvironment(Hashtable):::Given the environment parameter passed to the initial context constructor, returns the full environment for that initial context (never null):::props->if->new->Hashtable<>->jndiSysProps->helper->getJndiProperties->for->i->disableAppRes->env->get->if->disableAppRes->equalsIgnoreCase->return->getApplicationResources->mergeTables->return
ResourceManager#getProperty(String, Hashtable, Context, boolean):::Retrieves the property from the environment, or from the provider resource file associated with the given context:::val1->env->get->if->return->val2->getProviderResource->get->if->return->else->if->return->else->return
ResourceManager#getFactories(String, Hashtable, Context):::Retrieves an enumeration of factory classes/object specified by a property:::facProp->getProperty->if->return->loader->helper->getContextClassLoader->perLoaderCache->synchronized->factoryCache->get->if->new->HashMap<>->factoryCache->put->synchronized->factories->perLoaderCache->get->if->return->factories->size->new->FactoryEnumeration->else->parser->new->StringTokenizer->new->ArrayList<>->while->parser->hasMoreTokens->try->className->parser->nextToken->c->helper->loadClass->factories->new->NamedWeakReference<Object>->add->catch->finally->perLoaderCache->put->return->new->FactoryEnumeration
ResourceManager#getFactory(String, Hashtable, Context, String, String):::Retrieves a factory from a list of packages specified in a property:::facProp->getProperty->if->else->loader->helper->getContextClassLoader->key->perLoaderCache->synchronized->urlFactoryCache->get->if->new->HashMap<>->urlFactoryCache->put->synchronized->factory->factoryRef->perLoaderCache->get->if->return->else->if->factoryRef->get->if->return->parser->new->StringTokenizer->className->while->parser->hasMoreTokens->parser->nextToken->try->tmp->helper->loadClass->newInstance->catch->ne->new->NamingException->ne->setRootCause->throw->ne->new->NamingException->ne->setRootCause->throw->finally->perLoaderCache->new->WeakReference<>->put->return
VersionHelper#loadClass(String, ClassLoader):::Package private:::cls->Class->forName->return
VersionHelper#getContextClassLoader():::Package private:::act->loader->Thread->currentThread->getContextClassLoader->if->ClassLoader->getSystemClassLoader->return->return->AccessController->doPrivileged

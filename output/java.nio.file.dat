java.nio.file.CopyMoveHelper#copyToForeignTarget(Path, Path, CopyOption...)->void:::Simple copy for use when source and target are associated with different providers
java.nio.file.CopyMoveHelper#moveToForeignTarget(Path, Path, CopyOption...)->void:::Simple move implements as copy+delete for use when source and target are associated with different providers
java.nio.file.DirectoryIteratorException#getCause()->IOException:::Returns the cause of this exception.
java.nio.file.DirectoryStream.Filter#accept(T)->boolean:::Decides if the given directory entry should be accepted or filtered.
java.nio.file.DirectoryStream#iterator()->Iterator<T>:::Returns the iterator associated with this DirectoryStream.
java.nio.file.FileChannelLinesSpliterator#tryAdvance(Consumer<? super String>)->boolean:::
java.nio.file.FileChannelLinesSpliterator#forEachRemaining(Consumer<? super String>)->void:::
java.nio.file.FileChannelLinesSpliterator#trySplit()->Spliterator<String>:::
java.nio.file.FileChannelLinesSpliterator#estimateSize()->long:::
java.nio.file.FileChannelLinesSpliterator#getExactSizeIfKnown()->long:::
java.nio.file.FileChannelLinesSpliterator#characteristics()->int:::
java.nio.file.Files#newInputStream(Path, OpenOption...)->InputStream:::Opens a file, returning an input stream to read from the file
java.nio.file.Files#newOutputStream(Path, OpenOption...)->OutputStream:::Opens or creates a file, returning an output stream that may be used to write bytes to the file
java.nio.file.Files#newByteChannel(Path, Set<? extends OpenOption>, FileAttribute<?>...)->SeekableByteChannel:::Opens or creates a file, returning a seekable byte channel to access the file
java.nio.file.Files#newByteChannel(Path, OpenOption...)->SeekableByteChannel:::Opens or creates a file, returning a seekable byte channel to access the file
java.nio.file.Files#newDirectoryStream(Path)->DirectoryStream<Path>:::Opens a directory, returning a {@link DirectoryStream} to iterate over all entries in the directory
java.nio.file.Files#newDirectoryStream(Path, String)->DirectoryStream<Path>:::Opens a directory, returning a {@link DirectoryStream} to iterate over the entries in the directory
java.nio.file.Files#newDirectoryStream(Path, DirectoryStream.Filter<? super Path>)->DirectoryStream<Path>:::Opens a directory, returning a {@link DirectoryStream} to iterate over the entries in the directory
java.nio.file.Files#createFile(Path, FileAttribute<?>...)->Path:::Creates a new and empty file, failing if the file already exists
java.nio.file.Files#createDirectory(Path, FileAttribute<?>...)->Path:::Creates a new directory
java.nio.file.Files#createDirectories(Path, FileAttribute<?>...)->Path:::Creates a directory by creating all nonexistent parent directories first
java.nio.file.Files#createTempFile(Path, String, String, FileAttribute<?>...)->Path:::Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name
java.nio.file.Files#createTempFile(String, String, FileAttribute<?>...)->Path:::Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name
java.nio.file.Files#createTempDirectory(Path, String, FileAttribute<?>...)->Path:::Creates a new directory in the specified directory, using the given prefix to generate its name
java.nio.file.Files#createTempDirectory(String, FileAttribute<?>...)->Path:::Creates a new directory in the default temporary-file directory, using the given prefix to generate its name
java.nio.file.Files#createSymbolicLink(Path, Path, FileAttribute<?>...)->Path:::Creates a symbolic link to a target (optional operation)
java.nio.file.Files#createLink(Path, Path)->Path:::Creates a new link (directory entry) for an existing file (optional operation)
java.nio.file.Files#delete(Path)->void:::Deletes a file
java.nio.file.Files#deleteIfExists(Path)->boolean:::Deletes a file if it exists
java.nio.file.Files#copy(Path, Path, CopyOption...)->Path:::Copy a file to a target file
java.nio.file.Files#move(Path, Path, CopyOption...)->Path:::Move or rename a file to a target file
java.nio.file.Files#readSymbolicLink(Path)->Path:::Reads the target of a symbolic link (optional operation)
java.nio.file.Files#getFileStore(Path)->FileStore:::Returns the {@link FileStore} representing the file store where a file is located
java.nio.file.Files#isSameFile(Path, Path)->boolean:::Tests if two paths locate the same file
java.nio.file.Files#isHidden(Path)->boolean:::Tells whether or not a file is considered hidden
java.nio.file.Files#probeContentType(Path)->String:::Probes the content type of a file
java.nio.file.Files#getFileAttributeView(Path, Class<V>, LinkOption...)->V:::Returns a file attribute view of a given type
java.nio.file.Files#readAttributes(Path, Class<A>, LinkOption...)->A:::Reads a file's attributes as a bulk operation
java.nio.file.Files#setAttribute(Path, String, Object, LinkOption...)->Path:::Sets the value of a file attribute
java.nio.file.Files#getAttribute(Path, String, LinkOption...)->Object:::Reads the value of a file attribute
java.nio.file.Files#readAttributes(Path, String, LinkOption...)->Map<String, Object>:::Reads a set of file attributes as a bulk operation
java.nio.file.Files#getPosixFilePermissions(Path, LinkOption...)->Set<PosixFilePermission>:::Returns a file's POSIX file permissions
java.nio.file.Files#setPosixFilePermissions(Path, Set<PosixFilePermission>)->Path:::Sets a file's POSIX permissions
java.nio.file.Files#getOwner(Path, LinkOption...)->UserPrincipal:::Returns the owner of a file
java.nio.file.Files#setOwner(Path, UserPrincipal)->Path:::Updates the file owner
java.nio.file.Files#isSymbolicLink(Path)->boolean:::Tests whether a file is a symbolic link
java.nio.file.Files#isDirectory(Path, LinkOption...)->boolean:::Tests whether a file is a directory
java.nio.file.Files#isRegularFile(Path, LinkOption...)->boolean:::Tests whether a file is a regular file with opaque content
java.nio.file.Files#getLastModifiedTime(Path, LinkOption...)->FileTime:::Returns a file's last modified time
java.nio.file.Files#setLastModifiedTime(Path, FileTime)->Path:::Updates a file's last modified time attribute
java.nio.file.Files#size(Path)->long:::Returns the size of a file (in bytes)
java.nio.file.Files#exists(Path, LinkOption...)->boolean:::Tests whether a file exists
java.nio.file.Files#notExists(Path, LinkOption...)->boolean:::Tests whether the file located by this path does not exist
java.nio.file.Files#isReadable(Path)->boolean:::Tests whether a file is readable
java.nio.file.Files#isWritable(Path)->boolean:::Tests whether a file is writable
java.nio.file.Files#isExecutable(Path)->boolean:::Tests whether a file is executable
java.nio.file.Files#walkFileTree(Path, Set<FileVisitOption>, int, FileVisitor<? super Path>)->Path:::Walks a file tree
java.nio.file.Files#walkFileTree(Path, FileVisitor<? super Path>)->Path:::Walks a file tree
java.nio.file.Files#newBufferedReader(Path, Charset)->BufferedReader:::Opens a file for reading, returning a BufferedReader that may be used to read text from the file in an efficient manner
java.nio.file.Files#newBufferedReader(Path)->BufferedReader:::Opens a file for reading, returning a BufferedReader to read text from the file in an efficient manner
java.nio.file.Files#newBufferedWriter(Path, Charset, OpenOption...)->BufferedWriter:::Opens or creates a file for writing, returning a BufferedWriter that may be used to write text to the file in an efficient manner
java.nio.file.Files#newBufferedWriter(Path, OpenOption...)->BufferedWriter:::Opens or creates a file for writing, returning a BufferedWriter to write text to the file in an efficient manner
java.nio.file.Files#copy(InputStream, Path, CopyOption...)->long:::Copies all bytes from an input stream to a file
java.nio.file.Files#copy(Path, OutputStream)->long:::Copies all bytes from a file to an output stream
java.nio.file.Files#readAllBytes(Path)->byte[]:::Reads all the bytes from a file
java.nio.file.Files#readString(Path)->String:::Reads all content from a file into a string, decoding from bytes to characters using the {@link StandardCharsets#UTF_8 UTF-8} {@link Charset charset}
java.nio.file.Files#readString(Path, Charset)->String:::Reads all characters from a file into a string, decoding from bytes to characters using the specified {@linkplain Charset charset}
java.nio.file.Files#readAllLines(Path, Charset)->List<String>:::Read all lines from a file
java.nio.file.Files#readAllLines(Path)->List<String>:::Read all lines from a file
java.nio.file.Files#write(Path, byte[], OpenOption...)->Path:::Writes bytes to a file
java.nio.file.Files#write(Path, Iterable<? extends CharSequence>, Charset, OpenOption...)->Path:::Write lines of text to a file
java.nio.file.Files#write(Path, Iterable<? extends CharSequence>, OpenOption...)->Path:::Write lines of text to a file
java.nio.file.Files#writeString(Path, CharSequence, OpenOption...)->Path:::Write a {@linkplain java.lang.CharSequence CharSequence} to a file
java.nio.file.Files#writeString(Path, CharSequence, Charset, OpenOption...)->Path:::Write a {@linkplain java.lang.CharSequence CharSequence} to a file
java.nio.file.Files#list(Path)->Stream<Path>:::Return a lazily populated Stream, the elements of which are the entries in the directory
java.nio.file.Files#walk(Path, int, FileVisitOption...)->Stream<Path>:::Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file
java.nio.file.Files#walk(Path, FileVisitOption...)->Stream<Path>:::Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file
java.nio.file.Files#find(Path, int, BiPredicate<Path, BasicFileAttributes>, FileVisitOption...)->Stream<Path>:::Return a Stream that is lazily populated with Path by searching for files in a file tree rooted at a given starting file
java.nio.file.Files#lines(Path, Charset)->Stream<String>:::Read all lines from a file as a Stream
java.nio.file.Files#lines(Path)->Stream<String>:::Read all lines from a file as a Stream
java.nio.file.FileStore#name()->String:::Returns the name of this file store
java.nio.file.FileStore#type()->String:::Returns the type of this file store
java.nio.file.FileStore#isReadOnly()->boolean:::Tells whether this file store is read-only
java.nio.file.FileStore#getTotalSpace()->long:::Returns the size, in bytes, of the file store.
java.nio.file.FileStore#getUsableSpace()->long:::Returns the number of bytes available to this Java virtual machine on the file store
java.nio.file.FileStore#getBlockSize()->long:::Returns the number of bytes per block in this file store
java.nio.file.FileStore#getUnallocatedSpace()->long:::Returns the number of unallocated bytes in the file store
java.nio.file.FileStore#supportsFileAttributeView(Class<? extends FileAttributeView>)->boolean:::Tells whether or not this file store supports the file attributes identified by the given file attribute view
java.nio.file.FileStore#supportsFileAttributeView(String)->boolean:::Tells whether or not this file store supports the file attributes identified by the given file attribute view
java.nio.file.FileStore#getFileStoreAttributeView(Class<V>)->V:::Returns a FileStoreAttributeView of the given type
java.nio.file.FileStore#getAttribute(String)->Object:::Reads the value of a file store attribute
java.nio.file.FileSystem#provider()->FileSystemProvider:::Returns the provider that created this file system.
java.nio.file.FileSystem#close()->void:::Closes this file system
java.nio.file.FileSystem#isOpen()->boolean:::Tells whether or not this file system is open
java.nio.file.FileSystem#isReadOnly()->boolean:::Tells whether or not this file system allows only read-only access to its file stores.
java.nio.file.FileSystem#getSeparator()->String:::Returns the name separator, represented as a string
java.nio.file.FileSystem#getRootDirectories()->Iterable<Path>:::Returns an object to iterate over the paths of the root directories
java.nio.file.FileSystem#getFileStores()->Iterable<FileStore>:::Returns an object to iterate over the underlying file stores
java.nio.file.FileSystem#supportedFileAttributeViews()->Set<String>:::Returns the set of the {@link FileAttributeView#name names} of the file attribute views supported by this FileSystem
java.nio.file.FileSystem#getPath(String, String...)->Path:::Converts a path string, or a sequence of strings that when joined form a path string, to a Path
java.nio.file.FileSystem#getPathMatcher(String)->PathMatcher:::Returns a PathMatcher that performs match operations on the String representation of {@link Path} objects by interpreting a given pattern
java.nio.file.FileSystem#getUserPrincipalLookupService()->UserPrincipalLookupService:::Returns the UserPrincipalLookupService for this file system (optional operation)
java.nio.file.FileSystem#newWatchService()->WatchService:::Constructs a new {@link WatchService} (optional operation)
java.nio.file.FileSystemException#getFile()->String:::Returns the file used to create this exception.
java.nio.file.FileSystemException#getOtherFile()->String:::Returns the other file used to create this exception.
java.nio.file.FileSystemException#getReason()->String:::Returns the string explaining why the file system operation failed.
java.nio.file.FileSystemException#getMessage()->String:::Returns the detail message string.
java.nio.file.FileSystems#getDefault()->FileSystem:::Returns the default FileSystem
java.nio.file.FileSystems#getFileSystem(URI)->FileSystem:::Returns a reference to an existing FileSystem
java.nio.file.FileSystems#newFileSystem(URI, Map<String, ?>)->FileSystem:::Constructs a new file system that is identified by a {@link URI}   This method iterates over the {@link FileSystemProvider#installedProviders() installed} providers to locate the provider that is identified by the URI {@link URI#getScheme scheme} of the given URI
java.nio.file.FileSystems#newFileSystem(URI, Map<String, ?>, ClassLoader)->FileSystem:::Constructs a new file system that is identified by a {@link URI}   This method first attempts to locate an installed provider in exactly the same manner as the {@link #newFileSystem(URI,Map) newFileSystem(URI,Map)} method
java.nio.file.FileSystems#newFileSystem(Path, ClassLoader)->FileSystem:::Constructs a new FileSystem to access the contents of a file as a file system
java.nio.file.FileTreeIterator#hasNext()->boolean:::
java.nio.file.FileTreeIterator#next()->Event:::
java.nio.file.FileTreeIterator#close()->void:::
java.nio.file.FileTreeWalker.Event#type()->EventType:::
java.nio.file.FileTreeWalker.Event#file()->Path:::
java.nio.file.FileTreeWalker.Event#attributes()->BasicFileAttributes:::
java.nio.file.FileTreeWalker.Event#ioeException()->IOException:::
java.nio.file.FileTreeWalker#walk(Path)->Event:::Start walking from the given file.
java.nio.file.FileTreeWalker#next()->Event:::Returns the next Event or null if there are no more events or the walker is closed.
java.nio.file.FileTreeWalker#pop()->void:::Pops the directory node that is the current top of the stack so that there are no more events for the directory (including no END_DIRECTORY) event
java.nio.file.FileTreeWalker#skipRemainingSiblings()->void:::Skips the remaining entries in the directory at the top of the stack
java.nio.file.FileTreeWalker#isOpen()->boolean:::Returns true if the walker is open.
java.nio.file.FileTreeWalker#close()->void:::Closes/pops all directories on the stack.
java.nio.file.FileVisitor#preVisitDirectory(T, BasicFileAttributes)->FileVisitResult:::Invoked for a directory before entries in the directory are visited
java.nio.file.FileVisitor#visitFile(T, BasicFileAttributes)->FileVisitResult:::Invoked for a file in a directory.
java.nio.file.FileVisitor#visitFileFailed(T, IOException)->FileVisitResult:::Invoked for a file that could not be visited
java.nio.file.FileVisitor#postVisitDirectory(T, IOException)->FileVisitResult:::Invoked for a directory after entries in the directory, and all of their descendants, have been visited
java.nio.file.InvalidPathException#getInput()->String:::Returns the input string.
java.nio.file.InvalidPathException#getReason()->String:::Returns a string explaining why the input string was rejected.
java.nio.file.InvalidPathException#getIndex()->int:::Returns an index into the input string of the position at which the error occurred, or -1 if this position is not known.
java.nio.file.InvalidPathException#getMessage()->String:::Returns a string describing the error
java.nio.file.Path#of(String, String...)->Path:::Returns a Path by converting a path string, or a sequence of strings that when joined form a path string
java.nio.file.Path#of(URI)->Path:::Returns a Path by converting a URI
java.nio.file.Path#getFileSystem()->FileSystem:::Returns the file system that created this object.
java.nio.file.Path#isAbsolute()->boolean:::Tells whether or not this path is absolute
java.nio.file.Path#getRoot()->Path:::Returns the root component of this path as a Path object, or null if this path does not have a root component.
java.nio.file.Path#getFileName()->Path:::Returns the name of the file or directory denoted by this path as a Path object
java.nio.file.Path#getParent()->Path:::Returns the parent path, or null if this path does not have a parent
java.nio.file.Path#getNameCount()->int:::Returns the number of name elements in the path.
java.nio.file.Path#getName(int)->Path:::Returns a name element of this path as a Path object
java.nio.file.Path#subpath(int, int)->Path:::Returns a relative Path that is a subsequence of the name elements of this path
java.nio.file.Path#startsWith(Path)->boolean:::Tests if this path starts with the given path
java.nio.file.Path#startsWith(String)->boolean:::Tests if this path starts with a Path, constructed by converting the given path string, in exactly the manner specified by the {@link #startsWith(Path) startsWith(Path)} method
java.nio.file.Path#endsWith(Path)->boolean:::Tests if this path ends with the given path
java.nio.file.Path#endsWith(String)->boolean:::Tests if this path ends with a Path, constructed by converting the given path string, in exactly the manner specified by the {@link #endsWith(Path) endsWith(Path)} method
java.nio.file.Path#normalize()->Path:::Returns a path that is this path with redundant name elements eliminated
java.nio.file.Path#resolve(Path)->Path:::Resolve the given path against this path
java.nio.file.Path#resolve(String)->Path:::Converts a given path string to a Path and resolves it against this Path in exactly the manner specified by the {@link #resolve(Path) resolve} method
java.nio.file.Path#resolveSibling(Path)->Path:::Resolves the given path against this path's {@link #getParent parent} path
java.nio.file.Path#resolveSibling(String)->Path:::Converts a given path string to a Path and resolves it against this path's {@link #getParent parent} path in exactly the manner specified by the {@link #resolveSibling(Path) resolveSibling} method.
java.nio.file.Path#relativize(Path)->Path:::Constructs a relative path between this path and a given path
java.nio.file.Path#toUri()->URI:::Returns a URI to represent this path
java.nio.file.Path#toAbsolutePath()->Path:::Returns a Path object representing the absolute path of this path
java.nio.file.Path#toRealPath(LinkOption...)->Path:::Returns the real path of an existing file
java.nio.file.Path#toFile()->File:::Returns a {@link File} object representing this path
java.nio.file.Path#register(WatchService, WatchEvent.Kind<?>[], WatchEvent.Modifier...)->WatchKey:::Registers the file located by this path with a watch service
java.nio.file.Path#register(WatchService, WatchEvent.Kind<?>...)->WatchKey:::Registers the file located by this path with a watch service
java.nio.file.Path#iterator()->Iterator<Path>:::Returns an iterator over the name elements of this path
java.nio.file.Path#compareTo(Path)->int:::Compares two abstract paths lexicographically
java.nio.file.Path#equals(Object)->boolean:::Tests this path for equality with the given object
java.nio.file.Path#hashCode()->int:::Computes a hash code for this path
java.nio.file.Path#toString()->String:::Returns the string representation of this path
java.nio.file.PathMatcher#matches(Path)->boolean:::Tells if given path matches this matcher's pattern.
java.nio.file.Paths#get(String, String...)->Path:::Converts a path string, or a sequence of strings that when joined form a path string, to a Path.
java.nio.file.Paths#get(URI)->Path:::Converts the given URI to a {@link Path} object.
java.nio.file.SecureDirectoryStream#newDirectoryStream(T, LinkOption...)->SecureDirectoryStream<T>:::Opens the directory identified by the given path, returning a SecureDirectoryStream to iterate over the entries in the directory
java.nio.file.SecureDirectoryStream#newByteChannel(T, Set<? extends OpenOption>, FileAttribute<?>...)->SeekableByteChannel:::Opens or creates a file in this directory, returning a seekable byte channel to access the file
java.nio.file.SecureDirectoryStream#deleteFile(T)->void:::Deletes a file
java.nio.file.SecureDirectoryStream#deleteDirectory(T)->void:::Deletes a directory
java.nio.file.SecureDirectoryStream#move(T, SecureDirectoryStream<T>, T)->void:::Move a file from this directory to another directory
java.nio.file.SecureDirectoryStream#getFileAttributeView(Class<V>)->V:::Returns a new file attribute view to access the file attributes of this directory
java.nio.file.SecureDirectoryStream#getFileAttributeView(T, Class<V>, LinkOption...)->V:::Returns a new file attribute view to access the file attributes of a file in this directory
java.nio.file.SimpleFileVisitor#preVisitDirectory(T, BasicFileAttributes)->FileVisitResult:::Invoked for a directory before entries in the directory are visited
java.nio.file.SimpleFileVisitor#visitFile(T, BasicFileAttributes)->FileVisitResult:::Invoked for a file in a directory
java.nio.file.SimpleFileVisitor#visitFileFailed(T, IOException)->FileVisitResult:::Invoked for a file that could not be visited
java.nio.file.SimpleFileVisitor#postVisitDirectory(T, IOException)->FileVisitResult:::Invoked for a directory after entries in the directory, and all of their descendants, have been visited
java.nio.file.TempFileHelper#createTempFile(Path, String, String, FileAttribute<?>[])->Path:::Creates a temporary file in the given directory, or in the temporary directory if dir is null.
java.nio.file.TempFileHelper#createTempDirectory(Path, String, FileAttribute<?>[])->Path:::Creates a temporary directory in the given directory, or in the temporary directory if dir is null.
java.nio.file.Watchable#register(WatchService, WatchEvent.Kind<?>[], WatchEvent.Modifier...)->WatchKey:::Registers an object with a watch service
java.nio.file.Watchable#register(WatchService, WatchEvent.Kind<?>...)->WatchKey:::Registers an object with a watch service
java.nio.file.WatchEvent.Kind#name()->String:::Returns the name of the event kind.
java.nio.file.WatchEvent.Kind#type()->Class<T>:::Returns the type of the {@link WatchEvent#context context} value.
java.nio.file.WatchEvent.Modifier#name()->String:::Returns the name of the modifier.
java.nio.file.WatchEvent#kind()->Kind<T>:::Returns the event kind.
java.nio.file.WatchEvent#count()->int:::Returns the event count
java.nio.file.WatchEvent#context()->T:::Returns the context for the event
java.nio.file.WatchKey#isValid()->boolean:::Tells whether or not this watch key is valid
java.nio.file.WatchKey#pollEvents()->List<WatchEvent<?>>:::Retrieves and removes all pending events for this watch key, returning a List of the events that were retrieved
java.nio.file.WatchKey#reset()->boolean:::Resets this watch key
java.nio.file.WatchKey#cancel()->void:::Cancels the registration with the watch service
java.nio.file.WatchKey#watchable()->Watchable:::Returns the object for which this watch key was created
java.nio.file.WatchService#close()->void:::Closes this watch service
java.nio.file.WatchService#poll()->WatchKey:::Retrieves and removes the next watch key, or null if none are present.
java.nio.file.WatchService#poll(long, TimeUnit)->WatchKey:::Retrieves and removes the next watch key, waiting if necessary up to the specified wait time if none are yet present.
java.nio.file.WatchService#take()->WatchKey:::Retrieves and removes next watch key, waiting if none are yet present.

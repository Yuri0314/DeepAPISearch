BinaryContainer#recordConfiguration(GraalHotSpotVMConfig, GraphBuilderConfiguration, int)::: binary container record configuration:::booleanFlags->TieredAOT->getValue->graphBuilderConfig->omitAssertions->intFlags->graalHotSpotVMConfig->getOopEncoding->getShift->graalHotSpotVMConfig->getKlassEncoding->getShift->graalHotSpotVMConfig->logMinObjAlignment->booleanFlagsAsBytes->flagsToByteArray->size0->configContainer->getByteStreamSize->computedSize->configContainer->appendInt->appendInts->appendBytes->size->configContainer->getByteStreamSize
BinaryContainer#flagsToByteArray(boolean[])::: binary container flags to byte array:::byteArray->new->byteArr->for->i->return
BinaryContainer#boolToByte(boolean)::: binary container bool to byte:::return
BinaryContainer#freeMemory():::Free some memory.:::offsetStringTable->clear->metaspaceNames->clear
BinaryContainer#getCardTableAddressSymbolName()::: binary container get card table address symbol name:::return
BinaryContainer#getHeapTopAddressSymbolName()::: binary container get heap top address symbol name:::return
BinaryContainer#getHeapEndAddressSymbolName()::: binary container get heap end address symbol name:::return
BinaryContainer#getCrcTableAddressSymbolName()::: binary container get crc table address symbol name:::return
BinaryContainer#getPollingPageSymbolName()::: binary container get polling page symbol name:::return
BinaryContainer#getResolveStaticEntrySymbolName()::: binary container get resolve static entry symbol name:::return
BinaryContainer#getResolveVirtualEntrySymbolName()::: binary container get resolve virtual entry symbol name:::return
BinaryContainer#getResolveOptVirtualEntrySymbolName()::: binary container get resolve opt virtual entry symbol name:::return
BinaryContainer#getNarrowKlassBaseAddressSymbolName()::: binary container get narrow klass base address symbol name:::return
BinaryContainer#getNarrowOopBaseAddressSymbolName()::: binary container get narrow oop base address symbol name:::return
BinaryContainer#getLogOfHeapRegionGrainBytesSymbolName()::: binary container get log of heap region grain bytes symbol name:::return
BinaryContainer#getInlineContiguousAllocationSupportedSymbolName()::: binary container get inline contiguous allocation supported symbol name:::return
BinaryContainer#getCodeSegmentSize()::: binary container get code segment size:::return
BinaryContainer#getCodeEntryAlignment()::: binary container get code entry alignment:::return
BinaryContainer#getThreadLocalHandshakes()::: binary container get thread local handshakes:::return
BinaryContainer#getAOTSymbolForVMFunctionName(String):::Gets the global AOT symbol associated with the function name.:::return->functionNamesToAOTSymbols->get
BinaryContainer#addGlobalSymbols()::: binary container add global symbols:::createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->createContainerSymbol->headerContainer->getContainer->createContainerSymbol->createContainerSymbol->getResolveStaticEntrySymbolName->createGotSymbol->getResolveVirtualEntrySymbolName->createGotSymbol->getResolveOptVirtualEntrySymbolName->createGotSymbol->getCardTableAddressSymbolName->createGotSymbol->getHeapTopAddressSymbolName->createGotSymbol->getHeapEndAddressSymbolName->createGotSymbol->getNarrowKlassBaseAddressSymbolName->createGotSymbol->getNarrowOopBaseAddressSymbolName->createGotSymbol->getPollingPageSymbolName->createGotSymbol->getLogOfHeapRegionGrainBytesSymbolName->createGotSymbol->getInlineContiguousAllocationSupportedSymbolName->createGotSymbol->foreach->functionNamesToAOTSymbols->entrySet->entry->getValue->createGotSymbol
BinaryContainer#createContainerSymbol(ByteContainer):::Creates a global symbol of the form "A" + container name:::container->container->getContainerName->createSymbol
BinaryContainer#createGotSymbol(String):::Creates a global GOT symbol of the form "got." + name.:::s->gotSymbol->extLinkageGOTContainer->createGotSymbol->extLinkageGOTContainer->gotSymbol->getOffset->createSymbol
BinaryContainer#createBinary(String):::Create a platform-specific binary file representing the content of the BinaryContainer object:::osName->System->getProperty->switch->elfobj->JELFRelocObject->newInstance->elfobj->symbolTable->values->createELFRelocObject->break->machobj->new->JMachORelocObject->machobj->symbolTable->values->createMachORelocObject->break->if->osName->startsWith->pecoffobj->new->JPECoffRelocObject->pecoffobj->symbolTable->values->createPECoffRelocObject->break->else->throw->new->InternalError
BinaryContainer#addSymbol(Symbol):::Add symbol to the symbol table:::if->symInfo->getName->startsWith->throw->new->InternalError->if->symbolTable->symInfo->getName->containsKey->throw->symInfo->getName->new->InternalError->else->symbolTable->symInfo->getName->put
BinaryContainer#addStringOffset(String, Integer)::: binary container add string offset:::offsetStringTable->put->return
BinaryContainer#addRelocation(Relocation):::Add relocation entry for symName:::if->relocationTable->info->getSymbol->containsKey->relocationTable->info->getSymbol->get->add->else->if->uniqueRelocationTable->info->getSymbol->containsKey->list->new->ArrayList<>->list->uniqueRelocationTable->info->getSymbol->get->add->list->add->relocationTable->info->getSymbol->put->uniqueRelocationTable->info->getSymbol->remove->else->uniqueRelocationTable->info->getSymbol->put
BinaryContainer#getSymbol(String):::Get symbol with name symName.:::return->symbolTable->get
BinaryContainer#createSymbol(int, Kind, Binding, int, String)::: binary container create symbol:::if->throw->new->UnsupportedOperationException->symbol->new->Symbol->addSymbol->return
BinaryContainer#getStringOffset(String):::Get offset in got section with name symName.:::return->offsetStringTable->get
BinaryContainer#appendBytes(ByteContainer, byte[], int, int):::Insert targetCode to code stream with size at offset.:::byteContainer->appendBytes
BinaryContainer#appendCodeBytes(byte[], int, int)::: binary container append code bytes:::appendBytes
BinaryContainer#appendIntToCode(int)::: binary container append int to code:::codeContainer->appendInt
BinaryContainer#appendExtLinkageGotBytes(byte[], int, int)::: binary container append ext linkage got bytes:::startOffset->extLinkageGOTContainer->getByteStreamSize->appendBytes->return
BinaryContainer#addMetadataGotEntry(int)::: binary container add metadata got entry:::metadataGotContainer->appendLong
BinaryContainer#addMetaspaceName(String)::: binary container add metaspace name:::value->metaspaceNames->get->if->return->value->intValue->nameOffset->alignUp->try->bout->new->ByteArrayOutputStream->out->new->DataOutputStream->len->name->length->if->name->startsWith->out->writeUTF->else->parenthesesIndex->name->lastIndexOf->if->dotIndex->name->lastIndexOf->klassName->name->substring->out->writeUTF->methodName->name->substring->out->writeUTF->signature->name->substring->out->writeUTF->else->out->writeUTF->out->writeShort->b->bout->toByteArray->metaspaceNamesContainer->appendBytes->metaspaceNames->put->return->catch->throw->new->InternalError->finally
BinaryContainer#addOopSymbol(String):::Add oop symbol by as follows:::oopGotOffset->getStringOffset->if->return->return->newOopSymbol
BinaryContainer#newOopSymbol(String)::: binary container new oop symbol:::offset->oopGotContainer->getByteStreamSize->gotName->relocationSymbol->oopGotContainer->createGotSymbol->if->relocationSymbol->getOffset->throw->relocationSymbol->getOffset->new->InternalError->relocationSymbol->getOffset->addStringOffset->return->relocationSymbol->getOffset
BinaryContainer#addCountersSymbol(String)::: binary container add counters symbol:::gotName->relocationSymbol->getGotSymbol->metaspaceOffset->if->countersGotContainer->createGotSymbol->return
BinaryContainer#getGotSymbol(String)::: binary container get got symbol:::return->symbolTable->get
BinaryContainer#addTwoSlotKlassSymbol(String):::Add klass symbol by as follows:::gotName->previous->getGotSymbol->gotInitName->slot1Symbol->klassesGotContainer->createGotSymbol->slot2Symbol->klassesGotContainer->createGotSymbol->slot1Symbol->getIndex->return->slot2Symbol->getIndex
BinaryContainer#addMethodsCount(int, ReadOnlyDataContainer)::: binary container add methods count:::return->appendInt
BinaryContainer#appendInt(int, ReadOnlyDataContainer)::: binary container append int:::offset->container->getByteStreamSize->container->appendInt->return
BinaryContainer#addConstantData(byte[], int):::Add constant data as follows:::constantDataOffset->alignUp->constantDataContainer->appendBytes->alignUp->return
BinaryContainer#alignUp(ByteContainer, int)::: binary container align up:::if->Integer->bitCount->throw->new->IllegalArgumentException->offset->container->getByteStreamSize->aligned->if->throw->new->RuntimeException->if->nullArraySz->nullArray->new->byteArr->container->appendBytes->return
BinaryContainer#addCodeSegments(int, int)::: binary container add code segments:::currentOffset->codeSegmentsContainer->getByteStreamSize->offset->emptySize->if->emptyArray->new->byteArr->for->i->appendBytes->alignedEnd->segmentsCount->segments->new->byteArr->idx->for->i->appendBytes
BinaryContainer#getExtLinkageGOTContainer()::: binary container get ext linkage container:::return
BinaryContainer#getMethodMetadataContainer()::: binary container get method metadata container:::return
BinaryContainer#getMetaspaceNamesContainer()::: binary container get metaspace names container:::return
BinaryContainer#getMethodsOffsetsContainer()::: binary container get methods offsets container:::return
BinaryContainer#getKlassesOffsetsContainer()::: binary container get klasses offsets container:::return
BinaryContainer#getKlassesDependenciesContainer()::: binary container get klasses dependencies container:::return
BinaryContainer#getStubsOffsetsContainer()::: binary container get stubs offsets container:::return
BinaryContainer#getCodeSegmentsContainer()::: binary container get code segments container:::return
BinaryContainer#getConstantDataContainer()::: binary container get constant data container:::return
BinaryContainer#getKlassesGotContainer()::: binary container get klasses got container:::return
BinaryContainer#getCountersGotContainer()::: binary container get counters got container:::return
BinaryContainer#getMetadataGotContainer()::: binary container get metadata got container:::return
BinaryContainer#getMethodStateContainer()::: binary container get method state container:::return
BinaryContainer#getOopGotContainer()::: binary container get oop got container:::return
BinaryContainer#getCodeContainer()::: binary container get code container:::return
BinaryContainer#getConfigContainer()::: binary container get config container:::return
BinaryContainer#getUniqueRelocationTable()::: binary container get unique relocation table:::return
BinaryContainer#getHeaderContainer()::: binary container get header container:::return
ByteContainer#updateByteBuffer():::Update byte buffer to reflect the current contents of byte stream.:::if->ByteBuffer->contentStream->toByteArray->wrap->ByteOrder->nativeOrder->order->else->throw->new->InternalError
ByteContainer#getByteArray():::Get the byte array of ByteContainer.:::if->updateByteBuffer->return->contentBytes->array
ByteContainer#appendBytes(byte[], int, int):::Append to byte stream:::if->throw->new->InternalError->contentStream->write->return
ByteContainer#appendBytes(byte[])::: byte container append bytes:::appendBytes->return
ByteContainer#appendInt(int)::: byte container append int:::if->throw->new->InternalError->b->ByteBuffer->allocate->b->ByteOrder->nativeOrder->order->b->putInt->result->b->array->contentStream->write->return
ByteContainer#appendInts(int[])::: byte container append ints:::if->throw->new->InternalError->b->ByteBuffer->allocate->ByteOrder->nativeOrder->order->Arrays->stream->b->putInt->forEach->result->b->array->contentStream->write->return
ByteContainer#appendLong(long)::: byte container append long:::if->throw->new->InternalError->b->ByteBuffer->allocate->b->ByteOrder->nativeOrder->order->b->putLong->result->b->array->contentStream->write
ByteContainer#getByteStreamSize():::Return the current size of byte stream backing the BinaryContainer.:::return->contentStream->size
ByteContainer#getContainerName():::Return the name of this container.:::return
ByteContainer#putIntAt(int, int):::Modify the byte buffer version of the byte output stream:::if->updateByteBuffer->contentBytes->putInt
ByteContainer#putLongAt(int, long)::: byte container put long at:::if->updateByteBuffer->contentBytes->putLong
ByteContainer#setSectionId(int)::: byte container set section id:::if->throw->new->InternalError
ByteContainer#getSectionId()::: byte container get section id:::if->throw->new->InternalError->return
ByteContainer#createSymbol(int, Kind, Binding, int, String)::: byte container create symbol:::symbol->new->Symbol->symbolTable->addSymbol->return
ByteContainer#createGotSymbol(String)::: byte container create got symbol:::symbol->new->GotSymbol->symbolTable->addSymbol->return
ByteContainer#createGotSymbol(int, String)::: byte container create got symbol:::symbol->new->GotSymbol->symbolTable->addSymbol->return
ByteContainer#clear()::: byte container clear:::
ByteContainer#setHasRelocations()::: byte container set has relocations:::
ByteContainer#hasRelocations()::: byte container has relocations:::return
Container#getContainerName()::: container get container name:::
Container#getSectionId()::: container get section id:::
GotSymbol#getIndex()::: got symbol get index:::offset->getOffset->return
HeaderContainer#getContainerName()::: header container get container name:::return->container->getContainerName
HeaderContainer#getContainer()::: header container get container:::return
HeaderContainer#setClassesCount(int)::: header container set classes count:::putIntAt
HeaderContainer#setMethodsCount(int)::: header container set methods count:::putIntAt
HeaderContainer#setKlassesGotSize(int)::: header container set klasses got size:::putIntAt
HeaderContainer#setMetadataGotSize(int)::: header container set metadata got size:::putIntAt
HeaderContainer#setOopGotSize(int)::: header container set oop got size:::putIntAt
NativeSymbol#getIndex()::: native symbol get index:::return
NativeSymbol#setIndex(int)::: native symbol set index:::
Relocation#getType()::: relocation get type:::return
Relocation#getOffset()::: relocation get offset:::return
Relocation#getSize()::: relocation get size:::return
Relocation#getSymbol()::: relocation get symbol:::return
Relocation#getSection()::: relocation get section:::return
Symbol#getName()::: symbol get name:::return
Symbol#getNativeSymbol()::: symbol get native symbol:::return
Symbol#setNativeSymbol(NativeSymbol)::: symbol set native symbol:::
Symbol#getBinding()::: symbol get binding:::return
Symbol#getKind()::: symbol get kind:::return
Symbol#getSize()::: symbol get size:::return
Symbol#getSection()::: symbol get section:::return
Symbol#getOffset()::: symbol get offset:::return
Symbol#equals(Object)::: symbol equals:::if->return->if->return->if->getClass->obj->getClass->return->symbol->if->return->if->return->if->name->equals->return->if->return->if->return->return->section->equals
Symbol#hashCode()::: symbol hash code:::result->Objects->hash->return
Symbol#toString()::: symbol to string:::return
SymbolTable#addSymbol(Symbol)::: symbol table add symbol:::
SymbolTable#getSymbol(String)::: symbol table get symbol:::
SymbolTable#createSymbol(int, Symbol.Kind, Symbol.Binding, int, String)::: symbol table create symbol:::

CommandLine#parse(String[]):::Process Win32-style command files for the specified command line arguments and return the resulting arguments:::newArgs->new->ArrayList<>->for->i->return->newArgs->newArgs->size->new->StringArr->toArray
Main#run(String[]):::Starts main program with the specified arguments.:::if->parseArgs->return->tmpFile->try->if->if->fname->replace->if->zname->startsWith->zname->substring->if->manifest->if->if->try->in->new->FileInputStream->new->BufferedInputStream->new->Manifest->catch->finally->else->new->Manifest->addVersion->addCreatedBy->if->isAmbiguousMainClass->return->if->addMainClass->if->addMultiRelease->expand->if->moduleInfos->isEmpty->jentries->new->HashSet<>->packages->new->HashSet<>->entries->stream->filter->addPackageIfNamed->jentries->add->forEach->addExtendedModuleAttributes->if->moduleInfos->get->checkModuleInfo->return->else->if->getMsg->error->return->if->tmpbase->fname->fname->indexOf->substring->createTemporaryFile->try->out->new->FileOutputStream->new->BufferedOutputStream->create->catch->finally->if->if->formatMsg->warn->packFile->createTemporaryFile->try->packer->newPacker->p->packer->properties->p->put->try->jarFile->tmpFile->getCanonicalPath->new->JarFile->pack->new->FileOutputStream->packer->pack->catch->finally->if->tmpFile->exists->tmpFile->delete->createTemporaryFile->try->out->new->FileOutputStream->jos->new->JarOutputStream->unpacker->newUnpacker->unpacker->unpack->catch->finally->catch->finally->Files->packFile->toPath->deleteIfExists->validateAndClose->else->if->inputFile->if->new->File->createTempFileInSameDirectoryAs->else->createTemporaryFile->expand->try->in->new->FileInputStream->new->FileInputStream->out->new->FileOutputStream->manifest->new->FileInputStream->updateOk->new->BufferedOutputStream->update->if->catch->finally->validateAndClose->else->if->replaceFSC->files->filesMapToFiles->if->list->else->in->new->FileInputStream->try->new->BufferedInputStream->list->catch->finally->in->close->else->if->replaceFSC->files->filesMapToFiles->if->extract->else->in->new->FileInputStream->new->FileInputStream->try->if->new->BufferedInputStream->extract->extract->catch->finally->in->close->else->if->files->filesMap->get->genIndex->else->if->found->if->try->zf->new->ZipFile->describeModule->catch->finally->else->try->fin->new->FileInputStream->describeModuleFromStream->catch->finally->if->getMsg->error->catch->fatalError->ee->printStackTrace->t->printStackTrace->finally->if->tmpFile->exists->tmpFile->delete->out->flush->err->flush->return
Main#parseArgs(String[]):::Parses command line arguments.:::try->CommandLine->parse->catch->e->getMessage->formatMsg->fatalError->return->fatalError->return->finally->count->try->flags->if->flags->startsWith->flags->startsWith->flags->length->try->GNUStyleOptions->parseOptions->catch->if->if->x->getMessage->usageError->else->x->getMessage->error->return->finally->if->info->accept->return->else->if->flags->startsWith->flags->substring->for->i->flags->length->catch->getMsg->usageError->return->finally->if->getMsg->usageError->return->n->if->version->k->nameBuf->new->StringArr->pathsMap->new->HashSet<>->put->try->for->i->catch->getMsg->usageError->return->finally->if->files->new->StringArr->System->arraycopy->filesMap->put->else->if->getMsg->usageError->return->else->if->if->return->else->getMsg->usageError->return->return
Main#create(OutputStream, Manifest):::Creates a new JAR file.:::try->zos->new->JarOutputStream->if->zos->setMethod->if->if->getMsg->output->e->new->ZipEntry->e->System->currentTimeMillis->setTime->e->setSize->e->setCrc->zos->putNextEntry->new->ZipEntry->e->System->currentTimeMillis->setTime->if->crc32Manifest->zos->putNextEntry->manifest->write->zos->closeEntry->updateModuleInfo->foreach->addFile->catch->finally
Main#update(InputStream, OutputStream, InputStream, Map, JarIndex):::Updates an existing jar file.:::zis->new->ZipInputStream->zos->new->JarOutputStream->e->foundManifest->updateOk->jentries->new->HashSet<>->if->addIndex->while->zis->getNextEntry->name->e->getName->isManifestEntry->equalsIgnoreCase->isModuleInfoEntry->isModuleInfoEntry->if->equalsIgnoreCase->continue->else->if->if->fis->new->FileInputStream->ambiguous->new->Manifest->isAmbiguousMainClass->fis->close->if->return->old->new->Manifest->if->old->read->if->updateManifest->return->else->if->moduleInfos->zis->readAllBytes->putIfAbsent->else->isDir->e->isDirectory->if->entryMap->containsKey->e2->new->ZipEntry->e2->e->getMethod->setMethod->e2->e->getTime->setTime->e2->e->getComment->setComment->e2->e->getExtra->setExtra->if->e->getMethod->e2->e->getSize->setSize->e2->e->getCrc->setCrc->zos->putNextEntry->copy->else->ent->entryMap->get->addFile->entryMap->remove->entries->remove->if->jentries->add->foreach->addFile->if->jentries->add->if->if->m->new->Manifest->isAmbiguousMainClass->if->if->updateManifest->else->if->if->new->Manifest->updateManifest->if->if->moduleInfos->isEmpty->pkgs->new->HashSet<>->jentries->addPackageIfNamed->forEach->addExtendedModuleAttributes->moduleInfos->get->checkModuleInfo->updateModuleInfo->else->if->getMsg->error->zis->close->zos->close->return
Main#addFile(ZipOutputStream, Entry):::Adds a new file entry to the ZIP output stream.:::file->name->isDir->if->name->equals->name->equals->name->equals->return->else->if->name->equals->name->equals->if->formatMsg->output->return->else->if->name->equals->throw->new->Error->size->file->length->if->out->formatMsg->print->e->new->ZipEntry->e->file->lastModified->setTime->if->e->setMethod->e->setSize->e->setCrc->else->if->crc32File->zos->putNextEntry->if->copy->zos->closeEntry->if->e->getSize->csize->e->getCompressedSize->out->String->valueOf->String->valueOf->formatMsg2->print->if->e->getMethod->ratio->if->String->valueOf->formatMsg->output->else->getMsg->output
Main#extract(InputStream, String[]):::Extracts specified entries from JAR file.:::zis->new->ZipInputStream->e->entriesFound->dirs->newDirSet->while->zis->getNextEntry->if->dirs->extractFile->add->else->name->e->getName->foreach->if->name->startsWith->dirs->extractFile->add->break->updateLastModifiedTime->return
Main#extract(String, String[]):::Extracts specified entries from JAR file, via ZipFile.:::zf->new->ZipFile->dirs->newDirSet->zes->zf->entries->while->zes->hasMoreElements->e->zes->nextElement->if->dirs->zf->getInputStream->extractFile->add->else->name->e->getName->foreach->if->name->startsWith->dirs->zf->getInputStream->extractFile->add->break->zf->close->updateLastModifiedTime
Main#extractFile(InputStream, ZipEntry):::Extracts next entry from JAR file, creating directories as needed:::rc->name->e->getName->replace->safeName->if->name->length->return->f->name->replace->new->File->if->e->isDirectory->if->f->exists->if->f->isDirectory->throw->f->getPath->formatMsg->new->IOException->else->if->f->mkdirs->throw->f->getPath->formatMsg->new->IOException->else->if->formatMsg->output->else->if->f->getParent->d->f->getParent->new->File->if->d->exists->d->mkdirs->d->isDirectory->throw->d->getPath->formatMsg->new->IOException->try->copy->catch->finally->if->closeEntry->else->is->close->if->if->e->getMethod->formatMsg->output->else->formatMsg->output->if->lastModified->e->getTime->if->f->setLastModified->return
Main#list(InputStream, String[]):::Lists contents of JAR file.:::zis->new->ZipInputStream->e->while->zis->getNextEntry->zis->closeEntry->printEntry
Main#list(String, String[]):::Lists contents of JAR file, via ZipFile.:::zf->new->ZipFile->zes->zf->entries->while->zes->hasMoreElements->zes->nextElement->printEntry->zf->close
Main#dumpIndex(String, JarIndex):::Outputs the class index table to the INDEX.LIST file of the root jar file.:::jarFile->new->File->jarPath->jarFile->toPath->tmpPath->createTempFileInSameDirectoryAs->toPath->try->if->Files->newInputStream->Files->newOutputStream->update->try->Files->move->catch->throw->getMsg->new->IOException->finally->catch->finally->Files->deleteIfExists
Main#getJarPath(String):::Generates the transitive closure of the Class-Path attribute for the specified jar file.:::files->new->ArrayList<String>->files->add->jarPaths->add->path->jar->Math->jar->lastIndexOf->max->substring->rf->jar->replace->new->JarFile->if->man->rf->getManifest->if->attr->man->getMainAttributes->if->value->attr->getValue->if->st->new->StringTokenizer->while->st->hasMoreTokens->ajar->st->nextToken->if->ajar->endsWith->path->concat->if->jarPaths->contains->files->getJarPath->addAll->rf->close->return
Main#genIndex(String, String[]):::Generates class index file for the specified root jar file.:::jars->getJarPath->njars->jars->size->jarfiles->if->for->i->jars->size->jars->new->StringArr->toArray->index->new->JarIndex->dumpIndex
Main#printEntry(ZipEntry, String[]):::Prints entry information, if requested.:::if->printEntry->else->name->e->getName->foreach->if->name->startsWith->printEntry->return
Main#printEntry(ZipEntry):::Prints entry information.:::if->sb->new->StringBuilder->s->Long->e->getSize->toString->for->i->s->length->sb->append->append->e->getTime->new->Date->toString->append->sb->append->e->getName->append->sb->toString->output->else->e->getName->output
Main#usageError(String):::Prints usage message.:::err->println->err->getMsg->println
Main#fatalError(Exception):::A fatal exception has been caught:::e->printStackTrace
Main#fatalError(String):::A fatal condition has been detected; message is "s":::error
Main#output(String):::Print an output message; like verbose output and the like:::out->println
Main#error(String):::Print an error message; like something is broken:::err->println
Main#warn(String):::Print a warning message:::err->println
Main#main(String[]):::Main routine to start program.:::jartool->new->Main->System->jartool->run->exit
Main.ZipFileModuleInfoEntry#uriString():::Returns an optional containing the effective URI.:::uri->Paths->zipFile->getName->get->toUri->toString->entry->getName->return->Optional->of
Main.StreamedModuleInfoEntry#uriString():::Returns an empty optional.:::return->Optional->empty
SignatureFile#getName():::Returns the name of the signature file, ending with a ".SF" suffix:::return
SignatureFile#getBlockName():::Returns the name of the block file, ending with a block suffix such as ".DSA".:::suffix->if->info->signatureBlock->getSignerInfos->info->getDigestEncryptionAlgorithmId->getName->temp->AlgorithmId->getEncAlgFromSigAlg->if->return
SignatureFile#getBlock():::Returns the signature block associated with this file.:::return
SignatureFile#setBlock(PKCS7):::Sets the signature block associated with this file.:::
SignatureFile#add(String[]):::Add a set of entries from the current manifest.:::for->i
SignatureFile#add(String):::Add a specific entry from the current manifest.:::mh->manifest->getEntry->if->throw->new->JarException->smh->try->computeEntry->catch->throw->e->getMessage->new->JarException->finally->entries->addElement
SignatureFile#getEntry(String):::Get the entry corresponding to a given name:::enum_->entries->while->enum_->hasMoreElements->mh->enum_->nextElement->if->name->mh->findValue->equals->return->return
SignatureFile#entryAt(int):::Returns the n-th entry:::return->entries->elementAt
SignatureFile#entries():::Returns an enumeration of the entries.:::return->entries->elements
SignatureFile#stream(OutputStream):::Add a signature file at current position in a stream:::globals->entries->elementAt->if->globals->findValue->throw->new->JarException->ps->new->PrintStream->globals->print->for->i->entries->size

CommandLine#parse(String[]):::Process Win32-style command files for the specified command line arguments and return the resulting arguments:::newArgs->new->ArrayList<>->for->i->return->newArgs->newArgs->size->new->StringArr->toArray
CommandLine#loadCmdFile(String, List)::: command line load cmd file:::r->new->FileReader->new->BufferedReader->st->new->StreamTokenizer->st->resetSyntax->st->wordChars->st->whitespaceChars->st->commentChar->st->quoteChar->st->quoteChar->while->st->nextToken->args->add->r->close
FingerPrint#isClass()::: finger print is class:::return
FingerPrint#isNestedClass()::: finger print is nested class:::return
FingerPrint#isPublicClass()::: finger print is public class:::return
FingerPrint#isIdentical(FingerPrint)::: finger print is identical:::if->return->if->return->return->isEqual
FingerPrint#isCompatibleVersion(FingerPrint)::: finger print is compatible version:::return
FingerPrint#isSameAPI(FingerPrint)::: finger print is same i:::if->return->return->attrs->equals
FingerPrint#basename()::: finger print basename:::return
FingerPrint#entryName()::: finger print entry name:::return
FingerPrint#className()::: finger print class name:::return
FingerPrint#mrversion()::: finger print mrversion:::return
FingerPrint#outerClassName()::: finger print outer class name:::return
FingerPrint#sha1(byte[])::: finger print sha1:::MD->update->return->MD->digest
FingerPrint#sha1(byte[], int)::: finger print sha1:::MD->update->return->MD->digest
FingerPrint#isEqual(byte[], byte[])::: finger print is equal:::return->MessageDigest->isEqual
FingerPrint#isCafeBabe(byte[])::: finger print is cafe babe:::if->return->for->i->return
FingerPrint#getClassAttributes(byte[])::: finger print get class attributes:::rdr->new->ClassReader->attrs->new->ClassAttributes->rdr->accept->return
FingerPrint.Field#equals(Object)::: field equals:::if->return->if->return->if->return->field->return->name->equals->desc->equals
FingerPrint.Field#hashCode()::: field hash code:::result->name->hashCode->desc->hashCode->return
FingerPrint.Method#equals(Object)::: method equals:::if->return->if->return->if->return->method->return->name->equals->desc->equals->exceptions->equals
FingerPrint.Method#hashCode()::: method hash code:::result->name->hashCode->desc->hashCode->exceptions->hashCode->return
FingerPrint.ClassAttributes#isPublic(int)::: class attributes is public:::return
FingerPrint.ClassAttributes#visit(int, int, String, String, String, String[])::: class attributes visit:::name->contains->isPublic
FingerPrint.ClassAttributes#visitOuterClass(String, String, String)::: class attributes visit outer class:::if->return
FingerPrint.ClassAttributes#visitInnerClass(String, String, String, int)::: class attributes visit inner class:::if->return->if->return->if->equals->return->if
FingerPrint.ClassAttributes#visitField(int, String, String, String, Object)::: class attributes visit field:::if->isPublic->fields->new->Field->add->return
FingerPrint.ClassAttributes#visitMethod(int, String, String, String, String[])::: class attributes visit method:::if->isPublic->exceptionSet->new->HashSet<>->if->foreach->exceptionSet->add->n->if->desc->lastIndexOf->desc->substring->methods->new->Method->add->return
FingerPrint.ClassAttributes#visitEnd()::: class attributes visit end:::
FingerPrint.ClassAttributes#equals(Object)::: class attributes equals:::if->return->if->return->if->return->clsAttrs->superNameOkay->superName->equals->return->fields->equals->methods->equals
FingerPrint.ClassAttributes#hashCode()::: class attributes hash code:::result->superName->hashCode->fields->hashCode->methods->hashCode->return
GNUStyleOptions.BadArgs#showUsage(boolean)::: bad args show usage:::return
GNUStyleOptions.Option#isHidden()::: option is hidden:::return
GNUStyleOptions.Option#isExtra()::: option is extra:::return
GNUStyleOptions.Option#matches(String)::: option matches:::foreach->if->a->equals->return->else->if->opt->startsWith->opt->startsWith->return->else->if->opt->startsWith->opt->startsWith->return->return
GNUStyleOptions.Option#process(Main, String, String)::: option process:::
GNUStyleOptions#parseOptions(Main, String[])::: style options parse options:::count->if->GNUStyleOptions->printUsageTryHelp->return->for->return
GNUStyleOptions#getOption(String)::: style options get option:::foreach->if->o->matches->return->throw->new->BadArgs->showUsage
GNUStyleOptions#printHelpExtra(PrintWriter)::: style options print help extra:::printHelp0
GNUStyleOptions#printHelp(PrintWriter)::: style options print help:::printHelp0
GNUStyleOptions#printHelp0(PrintWriter, boolean)::: style options print help0:::out->Main->getMsg->format->foreach->OptionType->values->typeHeadingWritten->foreach->if->equals->continue->name->substring->name->charAt->name->substring->if->o->isHidden->name->equals->continue->if->o->isExtra->continue->if->out->Main->getMsg->format->out->Main->getMsg->format->out->Main->getMsg->format
GNUStyleOptions#printCompatHelp(PrintWriter)::: style options print compat help:::out->Main->getMsg->format
GNUStyleOptions#printUsageTryHelp(PrintWriter)::: style options print usage try help:::out->Main->getMsg->format
GNUStyleOptions#printVersion(PrintWriter)::: style options print version:::out->System->getProperty->format
JarToolProvider#name()::: jar tool provider name:::return
JarToolProvider#run(PrintWriter, PrintWriter, String...)::: jar tool provider run:::ok->name->new->Main->run->return
Main.Entry#equals(Object)::: entry equals:::if->return->if->return->return->equals
Main.Entry#hashCode()::: entry hash code:::return->file->hashCode
Main#getMsg(String)::: main get msg:::try->return->rsrc->getString->catch->throw->new->Error->finally
Main#formatMsg(String, String)::: main format msg:::msg->getMsg->args->new->StringArr->return->MessageFormat->format
Main#formatMsg2(String, String, String)::: main format msg2:::msg->getMsg->args->new->StringArr->return->MessageFormat->format
Main#createTempFileInSameDirectoryAs(File):::Creates a new empty temporary file in the same directory as the specified file:::dir->file->getParentFile->if->new->File->return->File->createTempFile
Main#run(String[]):::Starts main program with the specified arguments.:::if->parseArgs->return->tmpFile->try->if->if->fname->replace->if->zname->startsWith->zname->substring->if->manifest->if->if->try->in->new->FileInputStream->new->BufferedInputStream->new->Manifest->catch->finally->else->new->Manifest->addVersion->addCreatedBy->if->isAmbiguousMainClass->return->if->addMainClass->if->addMultiRelease->expand->if->moduleInfos->isEmpty->jentries->new->HashSet<>->packages->new->HashSet<>->entries->stream->filter->addPackageIfNamed->jentries->add->forEach->addExtendedModuleAttributes->if->moduleInfos->get->checkModuleInfo->return->else->if->getMsg->error->return->if->tmpbase->fname->fname->indexOf->substring->createTemporaryFile->try->out->new->FileOutputStream->new->BufferedOutputStream->create->catch->finally->if->if->formatMsg->warn->packFile->createTemporaryFile->try->packer->newPacker->p->packer->properties->p->put->try->jarFile->tmpFile->getCanonicalPath->new->JarFile->pack->new->FileOutputStream->packer->pack->catch->finally->if->tmpFile->exists->tmpFile->delete->createTemporaryFile->try->out->new->FileOutputStream->jos->new->JarOutputStream->unpacker->newUnpacker->unpacker->unpack->catch->finally->catch->finally->Files->packFile->toPath->deleteIfExists->validateAndClose->else->if->inputFile->if->new->File->createTempFileInSameDirectoryAs->else->createTemporaryFile->expand->try->in->new->FileInputStream->new->FileInputStream->out->new->FileOutputStream->manifest->new->FileInputStream->updateOk->new->BufferedOutputStream->update->if->catch->finally->validateAndClose->else->if->replaceFSC->files->filesMapToFiles->if->list->else->in->new->FileInputStream->try->new->BufferedInputStream->list->catch->finally->in->close->else->if->replaceFSC->files->filesMapToFiles->if->extract->else->in->new->FileInputStream->new->FileInputStream->try->if->new->BufferedInputStream->extract->extract->catch->finally->in->close->else->if->files->filesMap->get->genIndex->else->if->found->if->try->zf->new->ZipFile->describeModule->catch->finally->else->try->fin->new->FileInputStream->describeModuleFromStream->catch->finally->if->getMsg->error->catch->fatalError->ee->printStackTrace->t->printStackTrace->finally->if->tmpFile->exists->tmpFile->delete->out->flush->err->flush->return
Main#validateAndClose(File)::: main validate and close:::if->try->zf->new->ZipFile->Validator->validate->if->formatMsg->error->catch->e->getMessage->formatMsg2->error->finally->path->tmpfile->toPath->try->if->if->Files->Paths->get->move->else->Files->new->FileOutputStream->copy->catch->finally->Files->deleteIfExists
Main#filesMapToFiles(Map)::: main files map to files:::if->filesMap->isEmpty->return->return->filesMap->entrySet->stream->this->filesToEntryNames->flatMap->String[]->new->toArray
Main#filesToEntryNames(Map.Entry)::: main files to entry names:::version->fileEntries->getKey->cpaths->pathsMap->get->return->Stream->fileEntries->getValue->of->toEntryName->toVersionedName->map
Main#parseArgs(String[]):::Parses command line arguments.:::try->CommandLine->parse->catch->e->getMessage->formatMsg->fatalError->return->fatalError->return->finally->count->try->flags->if->flags->startsWith->flags->startsWith->flags->length->try->GNUStyleOptions->parseOptions->catch->if->if->x->getMessage->usageError->else->x->getMessage->error->return->finally->if->info->accept->return->else->if->flags->startsWith->flags->substring->for->i->flags->length->catch->getMsg->usageError->return->finally->if->getMsg->usageError->return->n->if->version->k->nameBuf->new->StringArr->pathsMap->new->HashSet<>->put->try->for->i->catch->getMsg->usageError->return->finally->if->files->new->StringArr->System->arraycopy->filesMap->put->else->if->getMsg->usageError->return->else->if->if->return->else->getMsg->usageError->return->return
Main#addPackageIfNamed(Set, String)::: main add package if named:::if->name->startsWith->i0->i->name->indexOf->if->formatMsg->warn->return->while->c->name->charAt->if->formatMsg->warn->return->name->name->length->substring->pn->toPackageName->if->Checks->isPackageName->packages->add
Main#toEntryName(String, Set, boolean)::: main to entry name:::name->replace->if->name->endsWith->matchPath->foreach->if->name->startsWith->path->length->matchPath->length->name->matchPath->length->substring->safeName->if->name->startsWith->name->substring->return
Main#toVersionedName(String, int)::: main to versioned name:::return
Main#toPackageName(String)::: main to package name:::index->path->lastIndexOf->if->return->path->substring->replace->else->return
Main#expand()::: main expand:::foreach->filesMap->keySet->files->filesMap->get->pathsMap->get->expand
Main#expand(File, String[], Set, int):::Expands list of files to process into full list of all files that can be found by recursively descending directories.:::if->return->for->i
Main#create(OutputStream, Manifest):::Creates a new JAR file.:::try->zos->new->JarOutputStream->if->zos->setMethod->if->if->getMsg->output->e->new->ZipEntry->e->System->currentTimeMillis->setTime->e->setSize->e->setCrc->zos->putNextEntry->new->ZipEntry->e->System->currentTimeMillis->setTime->if->crc32Manifest->zos->putNextEntry->manifest->write->zos->closeEntry->updateModuleInfo->foreach->addFile->catch->finally
Main#toUpperCaseASCII(char)::: main to upper case i:::return
Main#equalsIgnoreCase(String, String):::Compares two strings for equality, ignoring case:::len->if->s->length->upper->length->return->for->i->return
Main#update(InputStream, OutputStream, InputStream, Map, JarIndex):::Updates an existing jar file.:::zis->new->ZipInputStream->zos->new->JarOutputStream->e->foundManifest->updateOk->jentries->new->HashSet<>->if->addIndex->while->zis->getNextEntry->name->e->getName->isManifestEntry->equalsIgnoreCase->isModuleInfoEntry->isModuleInfoEntry->if->equalsIgnoreCase->continue->else->if->if->fis->new->FileInputStream->ambiguous->new->Manifest->isAmbiguousMainClass->fis->close->if->return->old->new->Manifest->if->old->read->if->updateManifest->return->else->if->moduleInfos->zis->readAllBytes->putIfAbsent->else->isDir->e->isDirectory->if->entryMap->containsKey->e2->new->ZipEntry->e2->e->getMethod->setMethod->e2->e->getTime->setTime->e2->e->getComment->setComment->e2->e->getExtra->setExtra->if->e->getMethod->e2->e->getSize->setSize->e2->e->getCrc->setCrc->zos->putNextEntry->copy->else->ent->entryMap->get->addFile->entryMap->remove->entries->remove->if->jentries->add->foreach->addFile->if->jentries->add->if->if->m->new->Manifest->isAmbiguousMainClass->if->if->updateManifest->else->if->if->new->Manifest->updateManifest->if->if->moduleInfos->isEmpty->pkgs->new->HashSet<>->jentries->addPackageIfNamed->forEach->addExtendedModuleAttributes->moduleInfos->get->checkModuleInfo->updateModuleInfo->else->if->getMsg->error->zis->close->zos->close->return
Main#addIndex(JarIndex, ZipOutputStream)::: main add index:::e->new->ZipEntry->e->System->currentTimeMillis->setTime->if->os->new->CRC32OutputStream->index->write->os->updateEntry->zos->putNextEntry->index->write->zos->closeEntry
Main#updateModuleInfo(Map, ZipOutputStream)::: main update module info:::fmt->foreach->moduleInfos->entrySet->name->mi->getKey->bytes->mi->getValue->e->new->ZipEntry->e->System->currentTimeMillis->setTime->if->crc32ModuleInfo->zos->putNextEntry->zos->write->zos->closeEntry->if->formatMsg->output
Main#updateManifest(Manifest, ZipOutputStream)::: main update manifest:::addVersion->addCreatedBy->if->addMainClass->if->addMultiRelease->e->new->ZipEntry->e->System->currentTimeMillis->setTime->if->crc32Manifest->zos->putNextEntry->m->write->if->getMsg->output->return
Main#isWinDriveLetter(char)::: main is win drive letter:::return
Main#safeName(String)::: main safe name:::if->len->name->length->i->name->lastIndexOf->if->else->if->while->off->if->name->charAt->name->charAt->isWinDriveLetter->while->name->charAt->if->break->else->while->name->charAt->if->name->substring->return
Main#addVersion(Manifest)::: main add version:::global->m->getMainAttributes->if->global->getValue->global->put
Main#addCreatedBy(Manifest)::: main add created by:::global->m->getMainAttributes->if->global->new->Attributes.Name->getValue->javaVendor->System->getProperty->jdkVersion->System->getProperty->global->new->Attributes.Name->put
Main#addMainClass(Manifest, String)::: main add main class:::global->m->getMainAttributes->global->put
Main#addMultiRelease(Manifest)::: main add multi release:::global->m->getMainAttributes->global->put
Main#isAmbiguousMainClass(Manifest)::: main is ambiguous main class:::if->global->m->getMainAttributes->if->global->get->getMsg->usageError->return->return
Main#addFile(ZipOutputStream, Entry):::Adds a new file entry to the ZIP output stream.:::file->name->isDir->if->name->equals->name->equals->name->equals->return->else->if->name->equals->name->equals->if->formatMsg->output->return->else->if->name->equals->throw->new->Error->size->file->length->if->out->formatMsg->print->e->new->ZipEntry->e->file->lastModified->setTime->if->e->setMethod->e->setSize->e->setCrc->else->if->crc32File->zos->putNextEntry->if->copy->zos->closeEntry->if->e->getSize->csize->e->getCompressedSize->out->String->valueOf->String->valueOf->formatMsg2->print->if->e->getMethod->ratio->if->String->valueOf->formatMsg->output->else->getMsg->output
Main#copy(InputStream, OutputStream):::Copies all bytes from the input stream to the output stream:::n->while->from->read->to->write
Main#copy(File, OutputStream):::Copies all bytes from the input file to the output stream:::try->in->new->FileInputStream->copy->catch->finally
Main#copy(InputStream, File):::Copies all bytes from the input stream to the output file:::try->out->new->FileOutputStream->copy->catch->finally
Main#crc32ModuleInfo(ZipEntry, byte[]):::Computes the crc32 of a module-info.class:::os->new->CRC32OutputStream->in->new->ByteArrayInputStream->in->transferTo->os->updateEntry
Main#crc32Manifest(ZipEntry, Manifest):::Computes the crc32 of a Manifest:::os->new->CRC32OutputStream->m->write->os->updateEntry
Main#crc32File(ZipEntry, File):::Computes the crc32 of a File:::os->new->CRC32OutputStream->copy->if->f->length->throw->f->getPath->formatMsg->new->JarException->os->updateEntry
Main#replaceFSC(Map)::: main replace c:::filesMap->keySet->files->filesMap->get->if->for->i->forEach
Main#newDirSet()::: main new dir set:::return->new->HashSet<ZipEntry>
Main#updateLastModifiedTime(Set)::: main update last modified time:::foreach->lastModified->ze->getTime->if->name->ze->getName->replace->safeName->if->name->length->f->name->replace->new->File->f->setLastModified
Main#extract(InputStream, String[]):::Extracts specified entries from JAR file.:::zis->new->ZipInputStream->e->entriesFound->dirs->newDirSet->while->zis->getNextEntry->if->dirs->extractFile->add->else->name->e->getName->foreach->if->name->startsWith->dirs->extractFile->add->break->updateLastModifiedTime->return
Main#extract(String, String[]):::Extracts specified entries from JAR file, via ZipFile.:::zf->new->ZipFile->dirs->newDirSet->zes->zf->entries->while->zes->hasMoreElements->e->zes->nextElement->if->dirs->zf->getInputStream->extractFile->add->else->name->e->getName->foreach->if->name->startsWith->dirs->zf->getInputStream->extractFile->add->break->zf->close->updateLastModifiedTime
Main#extractFile(InputStream, ZipEntry):::Extracts next entry from JAR file, creating directories as needed:::rc->name->e->getName->replace->safeName->if->name->length->return->f->name->replace->new->File->if->e->isDirectory->if->f->exists->if->f->isDirectory->throw->f->getPath->formatMsg->new->IOException->else->if->f->mkdirs->throw->f->getPath->formatMsg->new->IOException->else->if->formatMsg->output->else->if->f->getParent->d->f->getParent->new->File->if->d->exists->d->mkdirs->d->isDirectory->throw->d->getPath->formatMsg->new->IOException->try->copy->catch->finally->if->closeEntry->else->is->close->if->if->e->getMethod->formatMsg->output->else->formatMsg->output->if->lastModified->e->getTime->if->f->setLastModified->return
Main#list(InputStream, String[]):::Lists contents of JAR file.:::zis->new->ZipInputStream->e->while->zis->getNextEntry->zis->closeEntry->printEntry
Main#list(String, String[]):::Lists contents of JAR file, via ZipFile.:::zf->new->ZipFile->zes->zf->entries->while->zes->hasMoreElements->zes->nextElement->printEntry->zf->close
Main#dumpIndex(String, JarIndex):::Outputs the class index table to the INDEX.LIST file of the root jar file.:::jarFile->new->File->jarPath->jarFile->toPath->tmpPath->createTempFileInSameDirectoryAs->toPath->try->if->Files->newInputStream->Files->newOutputStream->update->try->Files->move->catch->throw->getMsg->new->IOException->finally->catch->finally->Files->deleteIfExists
Main#getJarPath(String):::Generates the transitive closure of the Class-Path attribute for the specified jar file.:::files->new->ArrayList<String>->files->add->jarPaths->add->path->jar->Math->jar->lastIndexOf->max->substring->rf->jar->replace->new->JarFile->if->man->rf->getManifest->if->attr->man->getMainAttributes->if->value->attr->getValue->if->st->new->StringTokenizer->while->st->hasMoreTokens->ajar->st->nextToken->if->ajar->endsWith->path->concat->if->jarPaths->contains->files->getJarPath->addAll->rf->close->return
Main#genIndex(String, String[]):::Generates class index file for the specified root jar file.:::jars->getJarPath->njars->jars->size->jarfiles->if->for->i->jars->size->jars->new->StringArr->toArray->index->new->JarIndex->dumpIndex
Main#printEntry(ZipEntry, String[]):::Prints entry information, if requested.:::if->printEntry->else->name->e->getName->foreach->if->name->startsWith->printEntry->return
Main#printEntry(ZipEntry):::Prints entry information.:::if->sb->new->StringBuilder->s->Long->e->getSize->toString->for->i->s->length->sb->append->append->e->getTime->new->Date->toString->append->sb->append->e->getName->append->sb->toString->output->else->e->getName->output
Main#usageError(String):::Prints usage message.:::err->println->err->getMsg->println
Main#fatalError(Exception):::A fatal exception has been caught:::e->printStackTrace
Main#fatalError(String):::A fatal condition has been detected; message is "s":::error
Main#output(String):::Print an output message; like verbose output and the like:::out->println
Main#error(String):::Print an error message; like something is broken:::err->println
Main#warn(String):::Print a warning message:::err->println
Main#main(String[]):::Main routine to start program.:::jartool->new->Main->System->jartool->run->exit
Main.CRC32OutputStream#write(int)::: c32 output stream write:::crc->update
Main.CRC32OutputStream#write(byte[], int, int)::: c32 output stream write:::crc->update
Main.CRC32OutputStream#updateEntry(ZipEntry):::Updates a ZipEntry which describes the data read by this output stream, in STORED mode.:::e->setMethod->e->setSize->e->crc->getValue->setCrc
Main#createTemporaryFile(String, String):::Attempt to create temporary file in the system-provided temporary folder, if failed attempts to create it in the same folder as the file in parameter (if any):::tmpfile->try->File->createTempFile->catch->finally->if->if->try->tmpfolder->new->File->getAbsoluteFile->getParentFile->File->createTempFile->catch->fatalError->finally->else->getMsg->new->IOException->fatalError->return
Main.ModuleInfoEntry#name()::: module info entry name:::
Main.ModuleInfoEntry#uriString()::: module info entry uri string:::
Main.ModuleInfoEntry#bytes()::: module info entry bytes:::
Main.ZipFileModuleInfoEntry#name()::: zip file module info entry name:::return->entry->getName
Main.ZipFileModuleInfoEntry#bytes()::: zip file module info entry bytes:::return->zipFile->getInputStream
Main.ZipFileModuleInfoEntry#uriString():::Returns an optional containing the effective URI.:::uri->Paths->zipFile->getName->get->toUri->toString->entry->getName->return->Optional->of
Main.StreamedModuleInfoEntry#name()::: streamed module info entry name:::return
Main.StreamedModuleInfoEntry#bytes()::: streamed module info entry bytes:::return->new->ByteArrayInputStream
Main.StreamedModuleInfoEntry#uriString():::Returns an empty optional.:::return->Optional->empty
Main#describeModule(ZipFile):::Describes a module from a given zip file.:::infos->zipFile->stream->e->getName->isModuleInfoEntry->filter->sorted->new->ZipFileModuleInfoEntry->map->ZipFileModuleInfoEntry[]->new->toArray->if->fn->zipFile->getName->mf->ModuleFinder->Paths->get->of->try->mref->mf->findAll->if->mref->isEmpty->formatMsg->output->return->md->mref->iterator->next->descriptor->getMsg->output->describeModule->catch->msg->formatMsg->t->e->getCause->if->t->getMessage->output->finally->else->return->describeModuleFromEntries->return
Main#describeModuleFromStream(FileInputStream)::: main describe module from stream:::infos->new->LinkedList<>->try->bis->new->BufferedInputStream->zis->new->ZipInputStream->e->while->zis->getNextEntry->ename->e->getName->if->isModuleInfoEntry->infos->zis->readAllBytes->new->StreamedModuleInfoEntry->add->catch->finally->if->infos->size->return->sorted->infos->stream->Comparator->ModuleInfoEntry->name->comparing->sorted->ModuleInfoEntry[]->new->toArray->return->describeModuleFromEntries
Main#lessThanEqualReleaseValue(ModuleInfoEntry)::: main less than equal release value:::return->intVersionFromEntry
Main#versionFromEntryName(String)::: main version from entry name:::s->name->substring->return->s->s->indexOf->substring
Main#intVersionFromEntry(ModuleInfoEntry)::: main int version from entry:::name->entry->name->if->name->startsWith->return->s->name->substring->s->s->indexOf->substring->return->Integer->valueOf
Main#describeModuleFromEntries(ModuleInfoEntry[]):::Describes a single module descriptor, determined by the specified --release, if any, from the given ordered entries:::releases->Arrays->stream->e->name->equals->filter->ModuleInfoEntry->name->map->Main->versionFromEntryName->map->joining->collect->if->releases->equals->output->if->entry->i->while->lessThanEqualReleaseValue->if->String->valueOf->formatMsg->output->return->uriString->entry->uriString->orElse->try->is->entry->bytes->describeModule->catch->finally->else->if->name->equals->uriString->uriString->orElse->try->is->bytes->describeModule->catch->finally->else->getMsg->output->return
Main#toLowerCaseString(Collection)::: main to lower case string:::if->set->isEmpty->return->return->set->stream->e->toString->toLowerCase->map->sorted->joining->collect
Main#toString(Collection)::: main to string:::if->set->isEmpty->return->return->set->stream->e->toString->map->sorted->joining->collect
Main#describeModule(InputStream, String)::: main describe module:::attrs->ModuleInfo->read->md->attrs->descriptor->target->attrs->target->hashes->attrs->recordedHashes->describeModule
Main#describeModule(ModuleDescriptor, ModuleTarget, ModuleHashes, String)::: main describe module:::sb->new->StringBuilder->sb->md->toNameAndVersion->append->if->uriString->equals->sb->append->append->if->md->isOpen->sb->append->if->md->isAutomatic->sb->append->sb->append->md->exports->stream->Comparator->Exports->source->comparing->sorted->e->isQualified->filter->sb->append->e->source->append->e->modifiers->toLowerCaseString->append->append->forEach->md->requires->stream->sorted->sb->append->r->name->append->r->modifiers->toLowerCaseString->append->append->forEach->md->uses->stream->sorted->sb->append->append->append->forEach->md->provides->stream->Comparator->Provides->service->comparing->sorted->sb->append->p->service->append->append->p->providers->toString->append->append->forEach->md->exports->stream->Comparator->Exports->source->comparing->sorted->Exports->isQualified->filter->sb->append->e->source->append->append->e->targets->toLowerCaseString->append->append->forEach->md->opens->stream->Comparator->Opens->source->comparing->sorted->o->isQualified->filter->sb->append->o->source->append->o->modifiers->toLowerCaseString->append->append->forEach->md->opens->stream->Comparator->Opens->source->comparing->sorted->Opens->isQualified->filter->sb->append->o->source->append->o->modifiers->toLowerCaseString->append->append->o->targets->toLowerCaseString->append->append->forEach->concealed->md->packages->new->TreeSet<>->md->exports->stream->Exports->source->map->concealed->remove->forEach->md->opens->stream->Opens->source->map->concealed->remove->forEach->concealed->sb->append->append->append->forEach->md->mainClass->sb->append->append->append->ifPresent->if->targetPlatform->target->targetPlatform->if->targetPlatform->isEmpty->sb->append->append->append->if->hashes->names->stream->sorted->sb->append->append->append->hashes->algorithm->append->append->hashes->hashFor->toHex->append->append->forEach->sb->toString->output
Main#toHex(byte[])::: main to hex:::sb->new->StringBuilder->foreach->sb->String->format->append->return->sb->toString
Main#toBinaryName(String)::: main to binary name:::return->classname->replace
Main#checkModuleInfo(byte[], Set)::: main check module info:::ok->if->try->md->ModuleDescriptor->ByteBuffer->wrap->read->if->md->provides->stream->Provides->providers->map->List->stream->flatMap->entries->toBinaryName->contains->filter->formatMsg->fatalError->peek->count->catch->x->getMessage->fatalError->finally->return
Main#addExtendedModuleAttributes(Map, Set):::Adds extended modules attributes to the given module-info's:::foreach->moduleInfos->entrySet->md->ModuleDescriptor->ByteBuffer->e->getValue->wrap->read->e->e->getValue->extendedInfoBytes->setValue
Main#isModuleInfoEntry(String)::: main is module info entry:::if->name->endsWith->end->name->length->MODULE_INFO->length->if->return->if->name->startsWith->off->if->return->while->c->name->charAt->if->return->return->name->charAt->return
Main#extendedInfoBytes(ModuleDescriptor, byte[], Set):::Returns a byte array containing the given module-info.class plus any extended attributes:::baos->new->ByteArrayOutputStream->is->new->ByteArrayInputStream->extender->ModuleInfoExtender->newExtender->extender->packages->if->extender->mainClass->if->extender->version->if->mn->md->name->hasher->new->Hasher->moduleHashes->hasher->computeHashes->if->extender->hashes->else->warn->if->moduleResolution->value->extender->moduleResolution->extender->write->return->baos->toByteArray
Main.Hasher#computeHashes(String):::Compute hashes of the specified module:::if->return->return->hashesBuilder->Set->of->computeHashes->get
Manifest#debug(String)::: manifest debug:::if->println
Manifest#addEntry(MessageHeader)::: manifest add entry:::entries->addElement->name->entry->findValue->debug->if->tableEntries->put
Manifest#getEntry(String)::: manifest get entry:::return->tableEntries->get
Manifest#entryAt(int)::: manifest entry at:::return->entries->elementAt
Manifest#entries()::: manifest entries:::return->entries->elements
Manifest#addFiles(File, String[])::: manifest add files:::if->return->for->i
Manifest#stdToLocal(String)::: manifest std to local:::return->name->replace
Manifest#localToStd(String)::: manifest local to std:::name->replace->if->name->startsWith->name->substring->else->if->name->startsWith->name->substring->return
Manifest#addFile(File)::: manifest add file:::stdName->f->getPath->localToStd->if->tableEntries->get->mh->new->MessageHeader->mh->add->addEntry
Manifest#doHashes(MessageHeader)::: manifest do hashes:::name->mh->findValue->if->name->endsWith->return->for->j
Manifest#stream(OutputStream)::: manifest stream:::ps->if->else->new->PrintStream->globals->entries->elementAt->if->globals->findValue->jdkVersion->System->getProperty->if->globals->findValue->globals->prepend->globals->add->else->ps->print->ps->flush->globals->print->for->i->entries->size
Manifest#isManifestName(String)::: manifest is manifest name:::if->name->charAt->name->name->length->substring->name->toUpperCase->if->name->equals->return->return
SignatureFile#debug(String)::: signature file debug:::if->println
SignatureFile#getName():::Returns the name of the signature file, ending with a ".SF" suffix:::return
SignatureFile#getBlockName():::Returns the name of the block file, ending with a block suffix such as ".DSA".:::suffix->if->info->signatureBlock->getSignerInfos->info->getDigestEncryptionAlgorithmId->getName->temp->AlgorithmId->getEncAlgFromSigAlg->if->return
SignatureFile#getBlock():::Returns the signature block associated with this file.:::return
SignatureFile#setBlock(PKCS7):::Sets the signature block associated with this file.:::
SignatureFile#add(String[]):::Add a set of entries from the current manifest.:::for->i
SignatureFile#add(String):::Add a specific entry from the current manifest.:::mh->manifest->getEntry->if->throw->new->JarException->smh->try->computeEntry->catch->throw->e->getMessage->new->JarException->finally->entries->addElement
SignatureFile#getEntry(String):::Get the entry corresponding to a given name:::enum_->entries->while->enum_->hasMoreElements->mh->enum_->nextElement->if->name->mh->findValue->equals->return->return
SignatureFile#entryAt(int):::Returns the n-th entry:::return->entries->elementAt
SignatureFile#entries():::Returns an enumeration of the entries.:::return->entries->elements
SignatureFile#computeEntry(MessageHeader):::Given a manifest entry, computes the signature entry for this manifest entry.:::smh->new->MessageHeader->name->mh->findValue->if->return->smh->set->try->for->i->return->catch->throw->e->getMessage->new->JarException->finally
SignatureFile#getDigest(String)::: signature file get digest:::dig->digests->get->if->MessageDigest->getInstance->digests->put->dig->reset->return
SignatureFile#stream(OutputStream):::Add a signature file at current position in a stream:::globals->entries->elementAt->if->globals->findValue->throw->new->JarException->ps->new->PrintStream->globals->print->for->i->entries->size
Validator#validate(Main, ZipFile)::: validator validate:::return->new->Validator->validate
Validator#validate()::: validator validate:::try->zf->stream->e->getName->endsWith->filter->this->getFingerPrint->map->FingerPrint->isClass->filter->Collectors->FingerPrint->mrversion->TreeMap->new->Collectors->FingerPrint->className->Function->identity->this->sameNameFingerPrint->toMap->groupingBy->collect->if->validateBase->else->validateVersioned->forEach->catch->e->getMessage->errorAndInvalid->finally->return
Validator#sameNameFingerPrint(FingerPrint, FingerPrint)::: validator same name finger print:::checkClassName->checkClassName->return
Validator#getFingerPrint(ZipEntry)::: validator get finger print:::ename->ze->getName->bname->version->if->ename->startsWith->n->ename->indexOf->if->throw->formatMsg->new->InvalidJarException->try->Integer->parseInt->catch->throw->formatMsg->new->InvalidJarException->finally->if->ename->length->throw->formatMsg->new->InvalidJarException->ename->substring->try->is->zf->getInputStream->return->is->readAllBytes->new->FingerPrint->catch->throw->x->getMessage->new->InvalidJarException->finally
Validator#validateBase(Map)::: validator validate base:::fps->values->if->checkClassName->return->if->fp->isNestedClass->checkNestedClass->classes->fp->className->put->forEach
Validator#validateVersioned(Map)::: validator validate versioned:::fps->values->if->MODULE_INFO->fp->basename->equals->fp->entryName->checkModuleDescriptor->return->matchFp->classes->fp->className->get->if->if->fp->isNestedClass->checkNestedClass->return->if->fp->isPublicClass->if->fp->className->isConcealed->fp->entryName->formatMsg->errorAndInvalid->return->fp->entryName->formatMsg->warn->classes->fp->className->put->return->if->fp->isIdentical->fp->entryName->formatMsg->warn->return->if->fp->isNestedClass->checkNestedClass->return->if->fp->isCompatibleVersion->fp->entryName->formatMsg->errorAndInvalid->return->if->fp->isSameAPI->fp->entryName->formatMsg->errorAndInvalid->return->if->checkClassName->return->classes->fp->className->put->return->forEach
Validator#checkModuleDescriptor(String)::: validator check module descriptor:::ze->zf->getEntry->if->try->jis->zf->getInputStream->md->ModuleDescriptor->read->base->if->md->packages->new->HashSet<>->md->exports->stream->Exports->source->map->concealedPkgs->remove->forEach->md->opens->stream->Opens->source->map->concealedPkgs->remove->forEach->if->md->provides->stream->Provides->providers->map->List->stream->flatMap->zf->toBinaryName->getEntry->filter->formatMsg->error->peek->count->return->return->if->base->name->md->name->equals->getMsg->errorAndInvalid->if->base->requires->md->requires->equals->baseRequires->base->requires->foreach->md->requires->if->baseRequires->contains->continue->if->r->modifiers->contains->getMsg->errorAndInvalid->else->if->r->name->isPlatformModule->getMsg->errorAndInvalid->foreach->mdRequires->md->requires->if->mdRequires->contains->continue->if->r->name->isPlatformModule->getMsg->errorAndInvalid->if->base->exports->md->exports->equals->getMsg->errorAndInvalid->if->base->opens->md->opens->equals->getMsg->errorAndInvalid->if->base->provides->md->provides->equals->getMsg->errorAndInvalid->if->base->mainClass->md->mainClass->equals->ze->getName->formatMsg->errorAndInvalid->if->base->version->md->version->equals->ze->getName->formatMsg->errorAndInvalid->catch->x->getMessage->errorAndInvalid->finally
Validator#checkClassName(FingerPrint)::: validator check class name:::if->fp->className->fp->basename->className->equals->return->fp->entryName->fp->className->replace->formatMsg2->error->return
Validator#checkNestedClass(FingerPrint, Map)::: validator check nested class:::if->outerClasses->fp->outerClassName->containsKey->return->fp->entryName->formatMsg->error->return
Validator#isConcealed(String)::: validator is concealed:::if->concealedPkgs->isEmpty->return->idx->className->lastIndexOf->pkgName->className->substring->replace->return->concealedPkgs->contains
Validator#isPlatformModule(String)::: validator is platform module:::return->name->startsWith->name->startsWith
Validator#className(String)::: validator class name:::return->entryName->endsWith->entryName->entryName->length->substring
Validator#error(String)::: validator error:::main->error
Validator#errorAndInvalid(String)::: validator error and invalid:::main->error
Validator#warn(String)::: validator warn:::main->warn

BuddhistCalendar#getCalendarType():::Returns "buddhist" as the calendar type of this Calendar.:::return
BuddhistCalendar#equals(Object):::Compares this BuddhistCalendar to an object reference.:::return->super->equals
BuddhistCalendar#hashCode():::Override hashCode:::return->super->hashCode
BuddhistCalendar#get(int):::Gets the value for a given time field.:::if->return->super->get->return->super->get
BuddhistCalendar#set(int, int):::Sets the time field with the given value.:::if->super->set->else->super->set
BuddhistCalendar#add(int, int):::Adds the specified (signed) amount of time to the given time field.:::savedYearOffset->try->super->add->catch->finally
BuddhistCalendar#roll(int, int):::Add to field a signed amount without changing larger fields:::savedYearOffset->try->super->roll->catch->finally
BuddhistCalendar#getDisplayName(int, int, Locale)::: buddhist calendar get display name:::if->return->super->getDisplayName->return->CalendarDataUtility->get->retrieveFieldValueName
BuddhistCalendar#getDisplayNames(int, int, Locale)::: buddhist calendar get display names:::if->return->super->getDisplayNames->return->CalendarDataUtility->retrieveFieldValueNames
BuddhistCalendar#getActualMaximum(int):::Returns the maximum value that this field could have, given the current date:::savedYearOffset->try->return->super->getActualMaximum->catch->finally
BuddhistCalendar#toString()::: buddhist calendar to string:::s->super->toString->if->isSet->return->yearField->p->s->indexOf->if->return->yearField->length->sb->s->length->new->StringBuilder->sb->append->while->Character->s->charAt->isDigit->year->internalGet->sb->append->s->length->append->return->sb->toString
BuddhistCalendar#readObject(ObjectInputStream)::: buddhist calendar read object:::stream->defaultReadObject
PreHashedMap#init(Object[]):::Initializes this map:::
PreHashedMap#toV(Object)::: pre hashed map to v:::return
PreHashedMap#get(Object)::: pre hashed map get:::h->k->hashCode->a->if->return->for
PreHashedMap#put(String, V)::: pre hashed map put:::h->k->hashCode->a->if->throw->new->UnsupportedOperationException->for
PreHashedMap#keySet()::: pre hashed map key set:::return->new->AbstractSet<>
PreHashedMap#entrySet()::: pre hashed map entry set:::return->new->AbstractSet<Map.Entry<String,V>>
PropertyResourceBundleCharset#contains(Charset)::: property resource bundle charset contains:::return
PropertyResourceBundleCharset#newDecoder()::: property resource bundle charset new decoder:::return->new->PropertiesFileDecoder
PropertyResourceBundleCharset#newEncoder()::: property resource bundle charset new encoder:::throw->new->UnsupportedOperationException
PropertyResourceBundleCharset.PropertiesFileDecoder#decodeLoop(ByteBuffer, CharBuffer)::: properties file decoder decode loop:::if->Objects->nonNull->return->cdISO_8859_1->decode->in->mark->out->mark->cr->cdUTF_8->decode->if->cr->isUnderflow->cr->isOverflow->return->in->reset->out->reset->newDecoder->return->cdISO_8859_1->decode
ResourceBundleEnumeration#hasMoreElements()::: resource bundle enumeration has more elements:::if->if->iterator->hasNext->iterator->next->else->if->while->enumeration->hasMoreElements->enumeration->nextElement->if->set->contains->return
ResourceBundleEnumeration#nextElement()::: resource bundle enumeration next element:::if->hasMoreElements->result->return->else->throw->new->NoSuchElementException

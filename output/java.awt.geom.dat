java.awt.geom.AffineTransform#getTranslateInstance(double, double)->AffineTransform:::Returns a transform representing a translation transformation
java.awt.geom.AffineTransform#getRotateInstance(double)->AffineTransform:::Returns a transform representing a rotation transformation
java.awt.geom.AffineTransform#getRotateInstance(double, double, double)->AffineTransform:::Returns a transform that rotates coordinates around an anchor point
java.awt.geom.AffineTransform#getRotateInstance(double, double)->AffineTransform:::Returns a transform that rotates coordinates according to a rotation vector
java.awt.geom.AffineTransform#getRotateInstance(double, double, double, double)->AffineTransform:::Returns a transform that rotates coordinates around an anchor point according to a rotation vector
java.awt.geom.AffineTransform#getQuadrantRotateInstance(int)->AffineTransform:::Returns a transform that rotates coordinates by the specified number of quadrants
java.awt.geom.AffineTransform#getQuadrantRotateInstance(int, double, double)->AffineTransform:::Returns a transform that rotates coordinates by the specified number of quadrants around the specified anchor point
java.awt.geom.AffineTransform#getScaleInstance(double, double)->AffineTransform:::Returns a transform representing a scaling transformation
java.awt.geom.AffineTransform#getShearInstance(double, double)->AffineTransform:::Returns a transform representing a shearing transformation
java.awt.geom.AffineTransform#getType()->int:::Retrieves the flag bits describing the conversion properties of this transform
java.awt.geom.AffineTransform#getDeterminant()->double:::Returns the determinant of the matrix representation of the transform
java.awt.geom.AffineTransform#updateState()->void:::Manually recalculates the state of the transform when the matrix changes too much to predict the effects on the state
java.awt.geom.AffineTransform#getMatrix(double[])->void:::Retrieves the 6 specifiable values in the 3x3 affine transformation matrix and places them into an array of double precisions values
java.awt.geom.AffineTransform#getScaleX()->double:::Returns the m00 element of the 3x3 affine transformation matrix
java.awt.geom.AffineTransform#getScaleY()->double:::Returns the m11 element of the 3x3 affine transformation matrix
java.awt.geom.AffineTransform#getShearX()->double:::Returns the X coordinate shearing element (m01) of the 3x3 affine transformation matrix.
java.awt.geom.AffineTransform#getShearY()->double:::Returns the Y coordinate shearing element (m10) of the 3x3 affine transformation matrix.
java.awt.geom.AffineTransform#getTranslateX()->double:::Returns the X coordinate of the translation element (m02) of the 3x3 affine transformation matrix.
java.awt.geom.AffineTransform#getTranslateY()->double:::Returns the Y coordinate of the translation element (m12) of the 3x3 affine transformation matrix.
java.awt.geom.AffineTransform#translate(double, double)->void:::Concatenates this transform with a translation transformation
java.awt.geom.AffineTransform#rotate(double)->void:::Concatenates this transform with a rotation transformation
java.awt.geom.AffineTransform#rotate(double, double, double)->void:::Concatenates this transform with a transform that rotates coordinates around an anchor point
java.awt.geom.AffineTransform#rotate(double, double)->void:::Concatenates this transform with a transform that rotates coordinates according to a rotation vector
java.awt.geom.AffineTransform#rotate(double, double, double, double)->void:::Concatenates this transform with a transform that rotates coordinates around an anchor point according to a rotation vector
java.awt.geom.AffineTransform#quadrantRotate(int)->void:::Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants
java.awt.geom.AffineTransform#quadrantRotate(int, double, double)->void:::Concatenates this transform with a transform that rotates coordinates by the specified number of quadrants around the specified anchor point
java.awt.geom.AffineTransform#scale(double, double)->void:::Concatenates this transform with a scaling transformation
java.awt.geom.AffineTransform#shear(double, double)->void:::Concatenates this transform with a shearing transformation
java.awt.geom.AffineTransform#setToIdentity()->void:::Resets this transform to the Identity transform.
java.awt.geom.AffineTransform#setToTranslation(double, double)->void:::Sets this transform to a translation transformation
java.awt.geom.AffineTransform#setToRotation(double)->void:::Sets this transform to a rotation transformation
java.awt.geom.AffineTransform#setToRotation(double, double, double)->void:::Sets this transform to a translated rotation transformation
java.awt.geom.AffineTransform#setToRotation(double, double)->void:::Sets this transform to a rotation transformation that rotates coordinates according to a rotation vector
java.awt.geom.AffineTransform#setToRotation(double, double, double, double)->void:::Sets this transform to a rotation transformation that rotates coordinates around an anchor point according to a rotation vector
java.awt.geom.AffineTransform#setToQuadrantRotation(int)->void:::Sets this transform to a rotation transformation that rotates coordinates by the specified number of quadrants
java.awt.geom.AffineTransform#setToQuadrantRotation(int, double, double)->void:::Sets this transform to a translated rotation transformation that rotates coordinates by the specified number of quadrants around the specified anchor point
java.awt.geom.AffineTransform#setToScale(double, double)->void:::Sets this transform to a scaling transformation
java.awt.geom.AffineTransform#setToShear(double, double)->void:::Sets this transform to a shearing transformation
java.awt.geom.AffineTransform#setTransform(AffineTransform)->void:::Sets this transform to a copy of the transform in the specified AffineTransform object.
java.awt.geom.AffineTransform#setTransform(double, double, double, double, double, double)->void:::Sets this transform to the matrix specified by the 6 double precision values.
java.awt.geom.AffineTransform#concatenate(AffineTransform)->void:::Concatenates an AffineTransform Tx to this AffineTransform Cx in the most commonly useful way to provide a new user space that is mapped to the former user space by Tx
java.awt.geom.AffineTransform#preConcatenate(AffineTransform)->void:::Concatenates an AffineTransform Tx to this AffineTransform Cx in a less commonly used way such that Tx modifies the coordinate transformation relative to the absolute pixel space rather than relative to the existing user space
java.awt.geom.AffineTransform#createInverse()->AffineTransform:::Returns an AffineTransform object representing the inverse transformation
java.awt.geom.AffineTransform#invert()->void:::Sets this transform to the inverse of itself
java.awt.geom.AffineTransform#transform(Point2D, Point2D)->Point2D:::Transforms the specified ptSrc and stores the result in ptDst
java.awt.geom.AffineTransform#transform(Point2D[], int, Point2D[], int, int)->void:::Transforms an array of point objects by this transform
java.awt.geom.AffineTransform#transform(float[], int, float[], int, int)->void:::Transforms an array of floating point coordinates by this transform
java.awt.geom.AffineTransform#transform(double[], int, double[], int, int)->void:::Transforms an array of double precision coordinates by this transform
java.awt.geom.AffineTransform#transform(float[], int, double[], int, int)->void:::Transforms an array of floating point coordinates by this transform and stores the results into an array of doubles
java.awt.geom.AffineTransform#transform(double[], int, float[], int, int)->void:::Transforms an array of double precision coordinates by this transform and stores the results into an array of floats
java.awt.geom.AffineTransform#inverseTransform(Point2D, Point2D)->Point2D:::Inverse transforms the specified ptSrc and stores the result in ptDst
java.awt.geom.AffineTransform#inverseTransform(double[], int, double[], int, int)->void:::Inverse transforms an array of double precision coordinates by this transform
java.awt.geom.AffineTransform#deltaTransform(Point2D, Point2D)->Point2D:::Transforms the relative distance vector specified by ptSrc and stores the result in ptDst
java.awt.geom.AffineTransform#deltaTransform(double[], int, double[], int, int)->void:::Transforms an array of relative distance vectors by this transform
java.awt.geom.AffineTransform#createTransformedShape(Shape)->Shape:::Returns a new Shape object defined by the geometry of the specified Shape after it has been transformed by this transform.
java.awt.geom.AffineTransform#toString()->String:::Returns a String that represents the value of this Object.
java.awt.geom.AffineTransform#isIdentity()->boolean:::Returns true if this AffineTransform is an identity transform.
java.awt.geom.AffineTransform#clone()->Object:::Returns a copy of this AffineTransform object.
java.awt.geom.AffineTransform#hashCode()->int:::Returns the hashcode for this transform.
java.awt.geom.AffineTransform#equals(Object)->boolean:::Returns true if this AffineTransform represents the same affine coordinate transform as the specified argument.
java.awt.geom.Arc2D.Float#getX()->double:::Note that the arc partially inscribes the framing rectangle of this {@code RectangularShape.
java.awt.geom.Arc2D.Float#getY()->double:::Note that the arc partially inscribes the framing rectangle of this {@code RectangularShape.
java.awt.geom.Arc2D.Float#getWidth()->double:::Note that the arc partially inscribes the framing rectangle of this {@code RectangularShape.
java.awt.geom.Arc2D.Float#getHeight()->double:::Note that the arc partially inscribes the framing rectangle of this {@code RectangularShape.
java.awt.geom.Arc2D.Float#getAngleStart()->double::: float get angle start
java.awt.geom.Arc2D.Float#getAngleExtent()->double::: float get angle extent
java.awt.geom.Arc2D.Float#isEmpty()->boolean::: float is empty
java.awt.geom.Arc2D.Float#setArc(double, double, double, double, double, double, int)->void::: float set arc
java.awt.geom.Arc2D.Float#setAngleStart(double)->void::: float set angle start
java.awt.geom.Arc2D.Float#setAngleExtent(double)->void::: float set angle extent
java.awt.geom.Arc2D.Float#makeBounds(double, double, double, double)->Rectangle2D::: float make bounds
java.awt.geom.Arc2D.Double#getX()->double:::Note that the arc partially inscribes the framing rectangle of this {@code RectangularShape.
java.awt.geom.Arc2D.Double#getY()->double:::Note that the arc partially inscribes the framing rectangle of this {@code RectangularShape.
java.awt.geom.Arc2D.Double#getWidth()->double:::Note that the arc partially inscribes the framing rectangle of this {@code RectangularShape.
java.awt.geom.Arc2D.Double#getHeight()->double:::Note that the arc partially inscribes the framing rectangle of this {@code RectangularShape.
java.awt.geom.Arc2D.Double#getAngleStart()->double::: double get angle start
java.awt.geom.Arc2D.Double#getAngleExtent()->double::: double get angle extent
java.awt.geom.Arc2D.Double#isEmpty()->boolean::: double is empty
java.awt.geom.Arc2D.Double#setArc(double, double, double, double, double, double, int)->void::: double set arc
java.awt.geom.Arc2D.Double#setAngleStart(double)->void::: double set angle start
java.awt.geom.Arc2D.Double#setAngleExtent(double)->void::: double set angle extent
java.awt.geom.Arc2D.Double#makeBounds(double, double, double, double)->Rectangle2D::: double make bounds
java.awt.geom.Arc2D#getAngleStart()->double:::Returns the starting angle of the arc.
java.awt.geom.Arc2D#getAngleExtent()->double:::Returns the angular extent of the arc.
java.awt.geom.Arc2D#getArcType()->int:::Returns the arc closure type of the arc: #OPEN, #CHORD, or #PIE.
java.awt.geom.Arc2D#getStartPoint()->Point2D:::Returns the starting point of the arc
java.awt.geom.Arc2D#getEndPoint()->Point2D:::Returns the ending point of the arc
java.awt.geom.Arc2D#setArc(double, double, double, double, double, double, int)->void:::Sets the location, size, angular extents, and closure type of this arc to the specified double values.
java.awt.geom.Arc2D#setArc(Point2D, Dimension2D, double, double, int)->void:::Sets the location, size, angular extents, and closure type of this arc to the specified values.
java.awt.geom.Arc2D#setArc(Rectangle2D, double, double, int)->void:::Sets the location, size, angular extents, and closure type of this arc to the specified values.
java.awt.geom.Arc2D#setArc(Arc2D)->void:::Sets this arc to be the same as the specified arc.
java.awt.geom.Arc2D#setArcByCenter(double, double, double, double, double, int)->void:::Sets the position, bounds, angular extents, and closure type of this arc to the specified values
java.awt.geom.Arc2D#setArcByTangent(Point2D, Point2D, Point2D, double)->void:::Sets the position, bounds, and angular extents of this arc to the specified value
java.awt.geom.Arc2D#setAngleStart(double)->void:::Sets the starting angle of this arc to the specified double value.
java.awt.geom.Arc2D#setAngleExtent(double)->void:::Sets the angular extent of this arc to the specified double value.
java.awt.geom.Arc2D#setAngleStart(Point2D)->void:::Sets the starting angle of this arc to the angle that the specified point defines relative to the center of this arc
java.awt.geom.Arc2D#setAngles(double, double, double, double)->void:::Sets the starting angle and angular extent of this arc using two sets of coordinates
java.awt.geom.Arc2D#setAngles(Point2D, Point2D)->void:::Sets the starting angle and angular extent of this arc using two points
java.awt.geom.Arc2D#setArcType(int)->void:::Sets the closure type of this arc to the specified value: OPEN, CHORD, or PIE.
java.awt.geom.Arc2D#setFrame(double, double, double, double)->void:::Note that the arc partially inscribes the framing rectangle of this {@code RectangularShape.
java.awt.geom.Arc2D#getBounds2D()->Rectangle2D:::Returns the high-precision framing rectangle of the arc
java.awt.geom.Arc2D#makeBounds(double, double, double, double)->Rectangle2D:::Constructs a Rectangle2D of the appropriate precision to hold the parameters calculated to be the framing rectangle of this arc.
java.awt.geom.Arc2D#normalizeDegrees(double)->double::: arc2 d normalize degrees
java.awt.geom.Arc2D#containsAngle(double)->boolean:::Determines whether or not the specified angle is within the angular extents of the arc.
java.awt.geom.Arc2D#contains(double, double)->boolean:::Determines whether or not the specified point is inside the boundary of the arc.
java.awt.geom.Arc2D#intersects(double, double, double, double)->boolean:::Determines whether or not the interior of the arc intersects the interior of the specified rectangle.
java.awt.geom.Arc2D#contains(double, double, double, double)->boolean:::Determines whether or not the interior of the arc entirely contains the specified rectangle.
java.awt.geom.Arc2D#contains(Rectangle2D)->boolean:::Determines whether or not the interior of the arc entirely contains the specified rectangle.
java.awt.geom.Arc2D#getPathIterator(AffineTransform)->PathIterator:::Returns an iteration object that defines the boundary of the arc
java.awt.geom.Arc2D#hashCode()->int:::Returns the hashcode for this Arc2D.
java.awt.geom.Arc2D#equals(Object)->boolean:::Determines whether or not the specified Object is equal to this Arc2D
java.awt.geom.ArcIterator#getWindingRule()->int:::Return the winding rule for determining the insideness of the path.
java.awt.geom.ArcIterator#isDone()->boolean:::Tests if there are more points to read.
java.awt.geom.ArcIterator#next()->void:::Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.ArcIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.ArcIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.Area#add(Area)->void:::Adds the shape of the specified Area to the shape of this Area
java.awt.geom.Area#subtract(Area)->void:::Subtracts the shape of the specified Area from the shape of this Area
java.awt.geom.Area#intersect(Area)->void:::Sets the shape of this Area to the intersection of its current shape and the shape of the specified Area
java.awt.geom.Area#exclusiveOr(Area)->void:::Sets the shape of this Area to be the combined area of its current shape and the shape of the specified Area, minus their intersection
java.awt.geom.Area#reset()->void:::Removes all of the geometry from this Area and restores it to an empty area.
java.awt.geom.Area#isEmpty()->boolean:::Tests whether this Area object encloses any area.
java.awt.geom.Area#isPolygonal()->boolean:::Tests whether this Area consists entirely of straight edged polygonal geometry.
java.awt.geom.Area#isRectangular()->boolean:::Tests whether this Area is rectangular in shape.
java.awt.geom.Area#isSingular()->boolean:::Tests whether this Area is comprised of a single closed subpath
java.awt.geom.Area#getBounds2D()->Rectangle2D:::Returns a high precision bounding Rectangle2D that completely encloses this Area
java.awt.geom.Area#getBounds()->Rectangle:::Returns a bounding Rectangle that completely encloses this Area
java.awt.geom.Area#clone()->Object:::Returns an exact copy of this Area object.
java.awt.geom.Area#equals(Area)->boolean:::Tests whether the geometries of the two Area objects are equal
java.awt.geom.Area#transform(AffineTransform)->void:::Transforms the geometry of this Area using the specified AffineTransform
java.awt.geom.Area#createTransformedArea(AffineTransform)->Area:::Creates a new Area object that contains the same geometry as this Area transformed by the specified AffineTransform
java.awt.geom.Area#contains(double, double)->boolean::: area contains
java.awt.geom.Area#contains(Point2D)->boolean::: area contains
java.awt.geom.Area#contains(double, double, double, double)->boolean::: area contains
java.awt.geom.Area#contains(Rectangle2D)->boolean::: area contains
java.awt.geom.Area#intersects(double, double, double, double)->boolean::: area intersects
java.awt.geom.Area#intersects(Rectangle2D)->boolean::: area intersects
java.awt.geom.Area#getPathIterator(AffineTransform)->PathIterator:::Creates a PathIterator for the outline of this Area object
java.awt.geom.Area#getPathIterator(AffineTransform, double)->PathIterator:::Creates a PathIterator for the flattened outline of this Area object
java.awt.geom.AreaIterator#getWindingRule()->int::: area iterator get winding rule
java.awt.geom.AreaIterator#isDone()->boolean::: area iterator is done
java.awt.geom.AreaIterator#next()->void::: area iterator next
java.awt.geom.AreaIterator#currentSegment(float[])->int::: area iterator current segment
java.awt.geom.AreaIterator#currentSegment(double[])->int::: area iterator current segment
java.awt.geom.CubicCurve2D.Float#getX1()->double::: float get x1
java.awt.geom.CubicCurve2D.Float#getY1()->double::: float get y1
java.awt.geom.CubicCurve2D.Float#getP1()->Point2D::: float get p1
java.awt.geom.CubicCurve2D.Float#getCtrlX1()->double::: float get ctrl x1
java.awt.geom.CubicCurve2D.Float#getCtrlY1()->double::: float get ctrl y1
java.awt.geom.CubicCurve2D.Float#getCtrlP1()->Point2D::: float get ctrl p1
java.awt.geom.CubicCurve2D.Float#getCtrlX2()->double::: float get ctrl x2
java.awt.geom.CubicCurve2D.Float#getCtrlY2()->double::: float get ctrl y2
java.awt.geom.CubicCurve2D.Float#getCtrlP2()->Point2D::: float get ctrl p2
java.awt.geom.CubicCurve2D.Float#getX2()->double::: float get x2
java.awt.geom.CubicCurve2D.Float#getY2()->double::: float get y2
java.awt.geom.CubicCurve2D.Float#getP2()->Point2D::: float get p2
java.awt.geom.CubicCurve2D.Float#setCurve(double, double, double, double, double, double, double, double)->void::: float set curve
java.awt.geom.CubicCurve2D.Float#setCurve(float, float, float, float, float, float, float, float)->void:::Sets the location of the end points and control points of this curve to the specified float coordinates.
java.awt.geom.CubicCurve2D.Float#getBounds2D()->Rectangle2D::: float get bounds2 d
java.awt.geom.CubicCurve2D.Double#getX1()->double::: double get x1
java.awt.geom.CubicCurve2D.Double#getY1()->double::: double get y1
java.awt.geom.CubicCurve2D.Double#getP1()->Point2D::: double get p1
java.awt.geom.CubicCurve2D.Double#getCtrlX1()->double::: double get ctrl x1
java.awt.geom.CubicCurve2D.Double#getCtrlY1()->double::: double get ctrl y1
java.awt.geom.CubicCurve2D.Double#getCtrlP1()->Point2D::: double get ctrl p1
java.awt.geom.CubicCurve2D.Double#getCtrlX2()->double::: double get ctrl x2
java.awt.geom.CubicCurve2D.Double#getCtrlY2()->double::: double get ctrl y2
java.awt.geom.CubicCurve2D.Double#getCtrlP2()->Point2D::: double get ctrl p2
java.awt.geom.CubicCurve2D.Double#getX2()->double::: double get x2
java.awt.geom.CubicCurve2D.Double#getY2()->double::: double get y2
java.awt.geom.CubicCurve2D.Double#getP2()->Point2D::: double get p2
java.awt.geom.CubicCurve2D.Double#setCurve(double, double, double, double, double, double, double, double)->void::: double set curve
java.awt.geom.CubicCurve2D.Double#getBounds2D()->Rectangle2D::: double get bounds2 d
java.awt.geom.CubicCurve2D#getX1()->double:::Returns the X coordinate of the start point in double precision.
java.awt.geom.CubicCurve2D#getY1()->double:::Returns the Y coordinate of the start point in double precision.
java.awt.geom.CubicCurve2D#getP1()->Point2D:::Returns the start point.
java.awt.geom.CubicCurve2D#getCtrlX1()->double:::Returns the X coordinate of the first control point in double precision.
java.awt.geom.CubicCurve2D#getCtrlY1()->double:::Returns the Y coordinate of the first control point in double precision.
java.awt.geom.CubicCurve2D#getCtrlP1()->Point2D:::Returns the first control point.
java.awt.geom.CubicCurve2D#getCtrlX2()->double:::Returns the X coordinate of the second control point in double precision.
java.awt.geom.CubicCurve2D#getCtrlY2()->double:::Returns the Y coordinate of the second control point in double precision.
java.awt.geom.CubicCurve2D#getCtrlP2()->Point2D:::Returns the second control point.
java.awt.geom.CubicCurve2D#getX2()->double:::Returns the X coordinate of the end point in double precision.
java.awt.geom.CubicCurve2D#getY2()->double:::Returns the Y coordinate of the end point in double precision.
java.awt.geom.CubicCurve2D#getP2()->Point2D:::Returns the end point.
java.awt.geom.CubicCurve2D#setCurve(double, double, double, double, double, double, double, double)->void:::Sets the location of the end points and control points of this curve to the specified double coordinates.
java.awt.geom.CubicCurve2D#setCurve(double[], int)->void:::Sets the location of the end points and control points of this curve to the double coordinates at the specified offset in the specified array.
java.awt.geom.CubicCurve2D#setCurve(Point2D, Point2D, Point2D, Point2D)->void:::Sets the location of the end points and control points of this curve to the specified Point2D coordinates.
java.awt.geom.CubicCurve2D#setCurve(Point2D[], int)->void:::Sets the location of the end points and control points of this curve to the coordinates of the Point2D objects at the specified offset in the specified array.
java.awt.geom.CubicCurve2D#setCurve(CubicCurve2D)->void:::Sets the location of the end points and control points of this curve to the same as those in the specified CubicCurve2D.
java.awt.geom.CubicCurve2D#getFlatnessSq(double, double, double, double, double, double, double, double)->double:::Returns the square of the flatness of the cubic curve specified by the indicated control points
java.awt.geom.CubicCurve2D#getFlatness(double, double, double, double, double, double, double, double)->double:::Returns the flatness of the cubic curve specified by the indicated control points
java.awt.geom.CubicCurve2D#getFlatnessSq(double[], int)->double:::Returns the square of the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index
java.awt.geom.CubicCurve2D#getFlatness(double[], int)->double:::Returns the flatness of the cubic curve specified by the control points stored in the indicated array at the indicated index
java.awt.geom.CubicCurve2D#getFlatnessSq()->double:::Returns the square of the flatness of this curve
java.awt.geom.CubicCurve2D#getFlatness()->double:::Returns the flatness of this curve
java.awt.geom.CubicCurve2D#subdivide(CubicCurve2D, CubicCurve2D)->void:::Subdivides this cubic curve and stores the resulting two subdivided curves into the left and right curve parameters
java.awt.geom.CubicCurve2D#subdivide(CubicCurve2D, CubicCurve2D, CubicCurve2D)->void:::Subdivides the cubic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters
java.awt.geom.CubicCurve2D#subdivide(double[], int, double[], int, double[], int)->void:::Subdivides the cubic curve specified by the coordinates stored in the src array at indices srcoff through (srcoff&nbsp;+&nbsp;7) and stores the resulting two subdivided curves into the two result arrays at the corresponding indices
java.awt.geom.CubicCurve2D#solveCubic(double[])->int:::Solves the cubic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots
java.awt.geom.CubicCurve2D#solveCubic(double[], double[])->int:::Solve the cubic whose coefficients are in the eqn array and place the non-complex roots into the res array, returning the number of roots
java.awt.geom.CubicCurve2D#contains(double, double)->boolean::: cubic curve2 d contains
java.awt.geom.CubicCurve2D#contains(Point2D)->boolean::: cubic curve2 d contains
java.awt.geom.CubicCurve2D#intersects(double, double, double, double)->boolean::: cubic curve2 d intersects
java.awt.geom.CubicCurve2D#intersects(Rectangle2D)->boolean::: cubic curve2 d intersects
java.awt.geom.CubicCurve2D#contains(double, double, double, double)->boolean::: cubic curve2 d contains
java.awt.geom.CubicCurve2D#contains(Rectangle2D)->boolean::: cubic curve2 d contains
java.awt.geom.CubicCurve2D#getBounds()->Rectangle::: cubic curve2 d get bounds
java.awt.geom.CubicCurve2D#getPathIterator(AffineTransform)->PathIterator:::Returns an iteration object that defines the boundary of the shape
java.awt.geom.CubicCurve2D#getPathIterator(AffineTransform, double)->PathIterator:::Return an iteration object that defines the boundary of the flattened shape
java.awt.geom.CubicCurve2D#clone()->Object:::Creates a new object of the same class as this object.
java.awt.geom.CubicIterator#getWindingRule()->int:::Return the winding rule for determining the insideness of the path.
java.awt.geom.CubicIterator#isDone()->boolean:::Tests if there are more points to read.
java.awt.geom.CubicIterator#next()->void:::Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.CubicIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.CubicIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.Dimension2D#getWidth()->double:::Returns the width of this Dimension in double precision.
java.awt.geom.Dimension2D#getHeight()->double:::Returns the height of this Dimension in double precision.
java.awt.geom.Dimension2D#setSize(double, double)->void:::Sets the size of this Dimension object to the specified width and height
java.awt.geom.Dimension2D#setSize(Dimension2D)->void:::Sets the size of this Dimension2D object to match the specified size
java.awt.geom.Dimension2D#clone()->Object:::Creates a new object of the same class as this object.
java.awt.geom.Ellipse2D.Float#getX()->double::: float get x
java.awt.geom.Ellipse2D.Float#getY()->double::: float get y
java.awt.geom.Ellipse2D.Float#getWidth()->double::: float get width
java.awt.geom.Ellipse2D.Float#getHeight()->double::: float get height
java.awt.geom.Ellipse2D.Float#isEmpty()->boolean::: float is empty
java.awt.geom.Ellipse2D.Float#setFrame(float, float, float, float)->void:::Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.
java.awt.geom.Ellipse2D.Float#setFrame(double, double, double, double)->void::: float set frame
java.awt.geom.Ellipse2D.Float#getBounds2D()->Rectangle2D::: float get bounds2 d
java.awt.geom.Ellipse2D.Double#getX()->double::: double get x
java.awt.geom.Ellipse2D.Double#getY()->double::: double get y
java.awt.geom.Ellipse2D.Double#getWidth()->double::: double get width
java.awt.geom.Ellipse2D.Double#getHeight()->double::: double get height
java.awt.geom.Ellipse2D.Double#isEmpty()->boolean::: double is empty
java.awt.geom.Ellipse2D.Double#setFrame(double, double, double, double)->void::: double set frame
java.awt.geom.Ellipse2D.Double#getBounds2D()->Rectangle2D::: double get bounds2 d
java.awt.geom.Ellipse2D#contains(double, double)->boolean::: ellipse2 d contains
java.awt.geom.Ellipse2D#intersects(double, double, double, double)->boolean::: ellipse2 d intersects
java.awt.geom.Ellipse2D#contains(double, double, double, double)->boolean::: ellipse2 d contains
java.awt.geom.Ellipse2D#getPathIterator(AffineTransform)->PathIterator:::Returns an iteration object that defines the boundary of this Ellipse2D
java.awt.geom.Ellipse2D#hashCode()->int:::Returns the hashcode for this Ellipse2D.
java.awt.geom.Ellipse2D#equals(Object)->boolean:::Determines whether or not the specified Object is equal to this Ellipse2D
java.awt.geom.EllipseIterator#getWindingRule()->int:::Return the winding rule for determining the insideness of the path.
java.awt.geom.EllipseIterator#isDone()->boolean:::Tests if there are more points to read.
java.awt.geom.EllipseIterator#next()->void:::Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.EllipseIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.EllipseIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.FlatteningPathIterator#getFlatness()->double:::Returns the flatness of this iterator.
java.awt.geom.FlatteningPathIterator#getRecursionLimit()->int:::Returns the recursion limit of this iterator.
java.awt.geom.FlatteningPathIterator#getWindingRule()->int:::Returns the winding rule for determining the interior of the path.
java.awt.geom.FlatteningPathIterator#isDone()->boolean:::Tests if the iteration is complete.
java.awt.geom.FlatteningPathIterator#ensureHoldCapacity(int)->void::: flattening path iterator ensure hold capacity
java.awt.geom.FlatteningPathIterator#next()->void:::Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.FlatteningPathIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.FlatteningPathIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.Line2D.Float#getX1()->double::: float get x1
java.awt.geom.Line2D.Float#getY1()->double::: float get y1
java.awt.geom.Line2D.Float#getP1()->Point2D::: float get p1
java.awt.geom.Line2D.Float#getX2()->double::: float get x2
java.awt.geom.Line2D.Float#getY2()->double::: float get y2
java.awt.geom.Line2D.Float#getP2()->Point2D::: float get p2
java.awt.geom.Line2D.Float#setLine(double, double, double, double)->void::: float set line
java.awt.geom.Line2D.Float#setLine(float, float, float, float)->void:::Sets the location of the end points of this Line2D to the specified float coordinates.
java.awt.geom.Line2D.Float#getBounds2D()->Rectangle2D::: float get bounds2 d
java.awt.geom.Line2D.Double#getX1()->double::: double get x1
java.awt.geom.Line2D.Double#getY1()->double::: double get y1
java.awt.geom.Line2D.Double#getP1()->Point2D::: double get p1
java.awt.geom.Line2D.Double#getX2()->double::: double get x2
java.awt.geom.Line2D.Double#getY2()->double::: double get y2
java.awt.geom.Line2D.Double#getP2()->Point2D::: double get p2
java.awt.geom.Line2D.Double#setLine(double, double, double, double)->void::: double set line
java.awt.geom.Line2D.Double#getBounds2D()->Rectangle2D::: double get bounds2 d
java.awt.geom.Line2D#getX1()->double:::Returns the X coordinate of the start point in double precision.
java.awt.geom.Line2D#getY1()->double:::Returns the Y coordinate of the start point in double precision.
java.awt.geom.Line2D#getP1()->Point2D:::Returns the start Point2D of this Line2D.
java.awt.geom.Line2D#getX2()->double:::Returns the X coordinate of the end point in double precision.
java.awt.geom.Line2D#getY2()->double:::Returns the Y coordinate of the end point in double precision.
java.awt.geom.Line2D#getP2()->Point2D:::Returns the end Point2D of this Line2D.
java.awt.geom.Line2D#setLine(double, double, double, double)->void:::Sets the location of the end points of this Line2D to the specified double coordinates.
java.awt.geom.Line2D#setLine(Point2D, Point2D)->void:::Sets the location of the end points of this Line2D to the specified Point2D coordinates.
java.awt.geom.Line2D#setLine(Line2D)->void:::Sets the location of the end points of this Line2D to the same as those end points of the specified Line2D.
java.awt.geom.Line2D#relativeCCW(double, double, double, double, double, double)->int:::Returns an indicator of where the specified point (px,py) lies with respect to the line segment from (x1,y1) to (x2,y2)
java.awt.geom.Line2D#relativeCCW(double, double)->int:::Returns an indicator of where the specified point (px,py) lies with respect to this line segment
java.awt.geom.Line2D#relativeCCW(Point2D)->int:::Returns an indicator of where the specified Point2D lies with respect to this line segment
java.awt.geom.Line2D#linesIntersect(double, double, double, double, double, double, double, double)->boolean:::Tests if the line segment from (x1,y1) to (x2,y2) intersects the line segment from (x3,y3) to (x4,y4).
java.awt.geom.Line2D#intersectsLine(double, double, double, double)->boolean:::Tests if the line segment from (x1,y1) to (x2,y2) intersects this line segment.
java.awt.geom.Line2D#intersectsLine(Line2D)->boolean:::Tests if the specified line segment intersects this line segment.
java.awt.geom.Line2D#ptSegDistSq(double, double, double, double, double, double)->double:::Returns the square of the distance from a point to a line segment
java.awt.geom.Line2D#ptSegDist(double, double, double, double, double, double)->double:::Returns the distance from a point to a line segment
java.awt.geom.Line2D#ptSegDistSq(double, double)->double:::Returns the square of the distance from a point to this line segment
java.awt.geom.Line2D#ptSegDistSq(Point2D)->double:::Returns the square of the distance from a Point2D to this line segment
java.awt.geom.Line2D#ptSegDist(double, double)->double:::Returns the distance from a point to this line segment
java.awt.geom.Line2D#ptSegDist(Point2D)->double:::Returns the distance from a Point2D to this line segment
java.awt.geom.Line2D#ptLineDistSq(double, double, double, double, double, double)->double:::Returns the square of the distance from a point to a line
java.awt.geom.Line2D#ptLineDist(double, double, double, double, double, double)->double:::Returns the distance from a point to a line
java.awt.geom.Line2D#ptLineDistSq(double, double)->double:::Returns the square of the distance from a point to this line
java.awt.geom.Line2D#ptLineDistSq(Point2D)->double:::Returns the square of the distance from a specified Point2D to this line
java.awt.geom.Line2D#ptLineDist(double, double)->double:::Returns the distance from a point to this line
java.awt.geom.Line2D#ptLineDist(Point2D)->double:::Returns the distance from a Point2D to this line
java.awt.geom.Line2D#contains(double, double)->boolean:::Tests if a specified coordinate is inside the boundary of this Line2D
java.awt.geom.Line2D#contains(Point2D)->boolean:::Tests if a given Point2D is inside the boundary of this Line2D
java.awt.geom.Line2D#intersects(double, double, double, double)->boolean::: line2 d intersects
java.awt.geom.Line2D#intersects(Rectangle2D)->boolean::: line2 d intersects
java.awt.geom.Line2D#contains(double, double, double, double)->boolean:::Tests if the interior of this Line2D entirely contains the specified set of rectangular coordinates
java.awt.geom.Line2D#contains(Rectangle2D)->boolean:::Tests if the interior of this Line2D entirely contains the specified Rectangle2D
java.awt.geom.Line2D#getBounds()->Rectangle::: line2 d get bounds
java.awt.geom.Line2D#getPathIterator(AffineTransform)->PathIterator:::Returns an iteration object that defines the boundary of this Line2D
java.awt.geom.Line2D#getPathIterator(AffineTransform, double)->PathIterator:::Returns an iteration object that defines the boundary of this flattened Line2D
java.awt.geom.Line2D#clone()->Object:::Creates a new object of the same class as this object.
java.awt.geom.LineIterator#getWindingRule()->int:::Return the winding rule for determining the insideness of the path.
java.awt.geom.LineIterator#isDone()->boolean:::Tests if there are more points to read.
java.awt.geom.LineIterator#next()->void:::Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.LineIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.LineIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.Path2D#cloneCoordsFloat(AffineTransform)->float[]::: path2 d clone coords float
java.awt.geom.Path2D#cloneCoordsDouble(AffineTransform)->double[]::: path2 d clone coords double
java.awt.geom.Path2D#append(float, float)->void::: path2 d append
java.awt.geom.Path2D#append(double, double)->void::: path2 d append
java.awt.geom.Path2D#getPoint(int)->Point2D::: path2 d get point
java.awt.geom.Path2D#needRoom(boolean, int)->void::: path2 d need room
java.awt.geom.Path2D#pointCrossings(double, double)->int::: path2 d point crossings
java.awt.geom.Path2D#rectCrossings(double, double, double, double)->int::: path2 d rect crossings
java.awt.geom.Path2D#expandPointTypes(byte[], int)->byte[]::: path2 d expand point types
java.awt.geom.Path2D.Float#trimToSize()->void::: float trim to size
java.awt.geom.Path2D.Float#cloneCoordsFloat(AffineTransform)->float[]::: float clone coords float
java.awt.geom.Path2D.Float#cloneCoordsDouble(AffineTransform)->double[]::: float clone coords double
java.awt.geom.Path2D.Float#append(float, float)->void::: float append
java.awt.geom.Path2D.Float#append(double, double)->void::: float append
java.awt.geom.Path2D.Float#getPoint(int)->Point2D::: float get point
java.awt.geom.Path2D.Float#needRoom(boolean, int)->void::: float need room
java.awt.geom.Path2D.Float#expandCoords(float[], int)->float[]::: float expand coords
java.awt.geom.Path2D.Float#moveTo(double, double)->void::: float move to
java.awt.geom.Path2D.Float#moveTo(float, float)->void:::Adds a point to the path by moving to the specified coordinates specified in float precision
java.awt.geom.Path2D.Float#lineTo(double, double)->void::: float line to
java.awt.geom.Path2D.Float#lineTo(float, float)->void:::Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in float precision
java.awt.geom.Path2D.Float#quadTo(double, double, double, double)->void::: float quad to
java.awt.geom.Path2D.Float#quadTo(float, float, float, float)->void:::Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point
java.awt.geom.Path2D.Float#curveTo(double, double, double, double, double, double)->void::: float curve to
java.awt.geom.Path2D.Float#curveTo(float, float, float, float, float, float)->void:::Adds a curved segment, defined by three new points, to the path by drawing a B&eacute;zier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as B&eacute;zier control points
java.awt.geom.Path2D.Float#pointCrossings(double, double)->int::: float point crossings
java.awt.geom.Path2D.Float#rectCrossings(double, double, double, double)->int::: float rect crossings
java.awt.geom.Path2D.Float#append(PathIterator, boolean)->void::: float append
java.awt.geom.Path2D.Float#transform(AffineTransform)->void::: float transform
java.awt.geom.Path2D.Float#getBounds2D()->Rectangle2D::: float get bounds2 d
java.awt.geom.Path2D.Float#getPathIterator(AffineTransform)->PathIterator:::The iterator for this class is not multi-threaded safe, which means that the {@code Path2D class does not guarantee that modifications to the geometry of this Path2D object do not affect any iterations of that geometry that are already in process.
java.awt.geom.Path2D.Float#clone()->Object:::Creates a new object of the same class as this object.
java.awt.geom.Path2D.Float.CopyIterator#currentSegment(float[])->int::: copy iterator current segment
java.awt.geom.Path2D.Float.CopyIterator#currentSegment(double[])->int::: copy iterator current segment
java.awt.geom.Path2D.Float.TxIterator#currentSegment(float[])->int::: tx iterator current segment
java.awt.geom.Path2D.Float.TxIterator#currentSegment(double[])->int::: tx iterator current segment
java.awt.geom.Path2D.Double#trimToSize()->void::: double trim to size
java.awt.geom.Path2D.Double#cloneCoordsFloat(AffineTransform)->float[]::: double clone coords float
java.awt.geom.Path2D.Double#cloneCoordsDouble(AffineTransform)->double[]::: double clone coords double
java.awt.geom.Path2D.Double#append(float, float)->void::: double append
java.awt.geom.Path2D.Double#append(double, double)->void::: double append
java.awt.geom.Path2D.Double#getPoint(int)->Point2D::: double get point
java.awt.geom.Path2D.Double#needRoom(boolean, int)->void::: double need room
java.awt.geom.Path2D.Double#expandCoords(double[], int)->double[]::: double expand coords
java.awt.geom.Path2D.Double#moveTo(double, double)->void::: double move to
java.awt.geom.Path2D.Double#lineTo(double, double)->void::: double line to
java.awt.geom.Path2D.Double#quadTo(double, double, double, double)->void::: double quad to
java.awt.geom.Path2D.Double#curveTo(double, double, double, double, double, double)->void::: double curve to
java.awt.geom.Path2D.Double#pointCrossings(double, double)->int::: double point crossings
java.awt.geom.Path2D.Double#rectCrossings(double, double, double, double)->int::: double rect crossings
java.awt.geom.Path2D.Double#append(PathIterator, boolean)->void::: double append
java.awt.geom.Path2D.Double#transform(AffineTransform)->void::: double transform
java.awt.geom.Path2D.Double#getBounds2D()->Rectangle2D::: double get bounds2 d
java.awt.geom.Path2D.Double#getPathIterator(AffineTransform)->PathIterator:::The iterator for this class is not multi-threaded safe, which means that the {@code Path2D class does not guarantee that modifications to the geometry of this Path2D object do not affect any iterations of that geometry that are already in process.
java.awt.geom.Path2D.Double#clone()->Object:::Creates a new object of the same class as this object.
java.awt.geom.Path2D.Double.CopyIterator#currentSegment(float[])->int::: copy iterator current segment
java.awt.geom.Path2D.Double.CopyIterator#currentSegment(double[])->int::: copy iterator current segment
java.awt.geom.Path2D.Double.TxIterator#currentSegment(float[])->int::: tx iterator current segment
java.awt.geom.Path2D.Double.TxIterator#currentSegment(double[])->int::: tx iterator current segment
java.awt.geom.Path2D#moveTo(double, double)->void:::Adds a point to the path by moving to the specified coordinates specified in double precision.
java.awt.geom.Path2D#lineTo(double, double)->void:::Adds a point to the path by drawing a straight line from the current coordinates to the new specified coordinates specified in double precision.
java.awt.geom.Path2D#quadTo(double, double, double, double)->void:::Adds a curved segment, defined by two new points, to the path by drawing a Quadratic curve that intersects both the current coordinates and the specified coordinates (x2,y2), using the specified point (x1,y1) as a quadratic parametric control point
java.awt.geom.Path2D#curveTo(double, double, double, double, double, double)->void:::Adds a curved segment, defined by three new points, to the path by drawing a B&eacute;zier curve that intersects both the current coordinates and the specified coordinates (x3,y3), using the specified points (x1,y1) and (x2,y2) as B&eacute;zier control points
java.awt.geom.Path2D#closePath()->void:::Closes the current subpath by drawing a straight line back to the coordinates of the last moveTo
java.awt.geom.Path2D#append(Shape, boolean)->void:::Appends the geometry of the specified Shape object to the path, possibly connecting the new geometry to the existing path segments with a line segment
java.awt.geom.Path2D#append(PathIterator, boolean)->void:::Appends the geometry of the specified PathIterator object to the path, possibly connecting the new geometry to the existing path segments with a line segment
java.awt.geom.Path2D#getWindingRule()->int:::Returns the fill style winding rule.
java.awt.geom.Path2D#setWindingRule(int)->void:::Sets the winding rule for this path to the specified value.
java.awt.geom.Path2D#getCurrentPoint()->Point2D:::Returns the coordinates most recently added to the end of the path as a Point2D object.
java.awt.geom.Path2D#reset()->void:::Resets the path to empty
java.awt.geom.Path2D#transform(AffineTransform)->void:::Transforms the geometry of this path using the specified AffineTransform
java.awt.geom.Path2D#createTransformedShape(AffineTransform)->Shape:::Returns a new Shape representing a transformed version of this Path2D
java.awt.geom.Path2D#getBounds()->Rectangle::: path2 d get bounds
java.awt.geom.Path2D#contains(PathIterator, double, double)->boolean:::Tests if the specified coordinates are inside the closed boundary of the specified PathIterator
java.awt.geom.Path2D#contains(PathIterator, Point2D)->boolean:::Tests if the specified Point2D is inside the closed boundary of the specified PathIterator
java.awt.geom.Path2D#contains(double, double)->boolean::: path2 d contains
java.awt.geom.Path2D#contains(Point2D)->boolean::: path2 d contains
java.awt.geom.Path2D#contains(PathIterator, double, double, double, double)->boolean:::Tests if the specified rectangular area is entirely inside the closed boundary of the specified PathIterator
java.awt.geom.Path2D#contains(PathIterator, Rectangle2D)->boolean:::Tests if the specified Rectangle2D is entirely inside the closed boundary of the specified PathIterator
java.awt.geom.Path2D#contains(double, double, double, double)->boolean:::  This method object may conservatively return false in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path
java.awt.geom.Path2D#contains(Rectangle2D)->boolean:::  This method object may conservatively return false in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path
java.awt.geom.Path2D#intersects(PathIterator, double, double, double, double)->boolean:::Tests if the interior of the specified PathIterator intersects the interior of a specified set of rectangular coordinates
java.awt.geom.Path2D#intersects(PathIterator, Rectangle2D)->boolean:::Tests if the interior of the specified PathIterator intersects the interior of a specified Rectangle2D
java.awt.geom.Path2D#intersects(double, double, double, double)->boolean:::  This method object may conservatively return true in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path
java.awt.geom.Path2D#intersects(Rectangle2D)->boolean:::  This method object may conservatively return true in cases where the specified rectangular area intersects a segment of the path, but that segment does not represent a boundary between the interior and exterior of the path
java.awt.geom.Path2D#getPathIterator(AffineTransform, double)->PathIterator:::The iterator for this class is not multi-threaded safe, which means that this {@code Path2D class does not guarantee that modifications to the geometry of this Path2D object do not affect any iterations of that geometry that are already in process.
java.awt.geom.Path2D#clone()->Object:::Creates a new object of the same class as this object.
java.awt.geom.Path2D#trimToSize()->void:::Trims the capacity of this Path2D instance to its current size
java.awt.geom.Path2D#writeObject(java.io.ObjectOutputStream, boolean)->void::: path2 d write object
java.awt.geom.Path2D#readObject(java.io.ObjectInputStream, boolean)->void::: path2 d read object
java.awt.geom.Path2D.Iterator#getWindingRule()->int::: iterator get winding rule
java.awt.geom.Path2D.Iterator#isDone()->boolean::: iterator is done
java.awt.geom.Path2D.Iterator#next()->void::: iterator next
java.awt.geom.PathIterator#getWindingRule()->int:::Returns the winding rule for determining the interior of the path.
java.awt.geom.PathIterator#isDone()->boolean:::Tests if the iteration is complete.
java.awt.geom.PathIterator#next()->void:::Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.PathIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.PathIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.Point2D.Float#getX()->double::: float get x
java.awt.geom.Point2D.Float#getY()->double::: float get y
java.awt.geom.Point2D.Float#setLocation(double, double)->void::: float set location
java.awt.geom.Point2D.Float#setLocation(float, float)->void:::Sets the location of this Point2D to the specified float coordinates.
java.awt.geom.Point2D.Float#toString()->String:::Returns a String that represents the value of this Point2D.
java.awt.geom.Point2D.Double#getX()->double::: double get x
java.awt.geom.Point2D.Double#getY()->double::: double get y
java.awt.geom.Point2D.Double#setLocation(double, double)->void::: double set location
java.awt.geom.Point2D.Double#toString()->String:::Returns a String that represents the value of this Point2D.
java.awt.geom.Point2D#getX()->double:::Returns the X coordinate of this Point2D in double precision.
java.awt.geom.Point2D#getY()->double:::Returns the Y coordinate of this Point2D in double precision.
java.awt.geom.Point2D#setLocation(double, double)->void:::Sets the location of this Point2D to the specified double coordinates.
java.awt.geom.Point2D#setLocation(Point2D)->void:::Sets the location of this Point2D to the same coordinates as the specified Point2D object.
java.awt.geom.Point2D#distanceSq(double, double, double, double)->double:::Returns the square of the distance between two points.
java.awt.geom.Point2D#distance(double, double, double, double)->double:::Returns the distance between two points.
java.awt.geom.Point2D#distanceSq(double, double)->double:::Returns the square of the distance from this Point2D to a specified point.
java.awt.geom.Point2D#distanceSq(Point2D)->double:::Returns the square of the distance from this Point2D to a specified Point2D.
java.awt.geom.Point2D#distance(double, double)->double:::Returns the distance from this Point2D to a specified point.
java.awt.geom.Point2D#distance(Point2D)->double:::Returns the distance from this Point2D to a specified Point2D.
java.awt.geom.Point2D#clone()->Object:::Creates a new object of the same class and with the same contents as this object.
java.awt.geom.Point2D#hashCode()->int:::Returns the hashcode for this Point2D.
java.awt.geom.Point2D#equals(Object)->boolean:::Determines whether or not two points are equal
java.awt.geom.QuadCurve2D.Float#getX1()->double::: float get x1
java.awt.geom.QuadCurve2D.Float#getY1()->double::: float get y1
java.awt.geom.QuadCurve2D.Float#getP1()->Point2D::: float get p1
java.awt.geom.QuadCurve2D.Float#getCtrlX()->double::: float get ctrl x
java.awt.geom.QuadCurve2D.Float#getCtrlY()->double::: float get ctrl y
java.awt.geom.QuadCurve2D.Float#getCtrlPt()->Point2D::: float get ctrl pt
java.awt.geom.QuadCurve2D.Float#getX2()->double::: float get x2
java.awt.geom.QuadCurve2D.Float#getY2()->double::: float get y2
java.awt.geom.QuadCurve2D.Float#getP2()->Point2D::: float get p2
java.awt.geom.QuadCurve2D.Float#setCurve(double, double, double, double, double, double)->void::: float set curve
java.awt.geom.QuadCurve2D.Float#setCurve(float, float, float, float, float, float)->void:::Sets the location of the end points and control point of this curve to the specified float coordinates.
java.awt.geom.QuadCurve2D.Float#getBounds2D()->Rectangle2D::: float get bounds2 d
java.awt.geom.QuadCurve2D.Double#getX1()->double::: double get x1
java.awt.geom.QuadCurve2D.Double#getY1()->double::: double get y1
java.awt.geom.QuadCurve2D.Double#getP1()->Point2D::: double get p1
java.awt.geom.QuadCurve2D.Double#getCtrlX()->double::: double get ctrl x
java.awt.geom.QuadCurve2D.Double#getCtrlY()->double::: double get ctrl y
java.awt.geom.QuadCurve2D.Double#getCtrlPt()->Point2D::: double get ctrl pt
java.awt.geom.QuadCurve2D.Double#getX2()->double::: double get x2
java.awt.geom.QuadCurve2D.Double#getY2()->double::: double get y2
java.awt.geom.QuadCurve2D.Double#getP2()->Point2D::: double get p2
java.awt.geom.QuadCurve2D.Double#setCurve(double, double, double, double, double, double)->void::: double set curve
java.awt.geom.QuadCurve2D.Double#getBounds2D()->Rectangle2D::: double get bounds2 d
java.awt.geom.QuadCurve2D#getX1()->double:::Returns the X coordinate of the start point in double in precision.
java.awt.geom.QuadCurve2D#getY1()->double:::Returns the Y coordinate of the start point in double precision.
java.awt.geom.QuadCurve2D#getP1()->Point2D:::Returns the start point.
java.awt.geom.QuadCurve2D#getCtrlX()->double:::Returns the X coordinate of the control point in double precision.
java.awt.geom.QuadCurve2D#getCtrlY()->double:::Returns the Y coordinate of the control point in double precision.
java.awt.geom.QuadCurve2D#getCtrlPt()->Point2D:::Returns the control point.
java.awt.geom.QuadCurve2D#getX2()->double:::Returns the X coordinate of the end point in double precision.
java.awt.geom.QuadCurve2D#getY2()->double:::Returns the Y coordinate of the end point in double precision.
java.awt.geom.QuadCurve2D#getP2()->Point2D:::Returns the end point.
java.awt.geom.QuadCurve2D#setCurve(double, double, double, double, double, double)->void:::Sets the location of the end points and control point of this curve to the specified double coordinates.
java.awt.geom.QuadCurve2D#setCurve(double[], int)->void:::Sets the location of the end points and control points of this QuadCurve2D to the double coordinates at the specified offset in the specified array.
java.awt.geom.QuadCurve2D#setCurve(Point2D, Point2D, Point2D)->void:::Sets the location of the end points and control point of this QuadCurve2D to the specified Point2D coordinates.
java.awt.geom.QuadCurve2D#setCurve(Point2D[], int)->void:::Sets the location of the end points and control points of this QuadCurve2D to the coordinates of the Point2D objects at the specified offset in the specified array.
java.awt.geom.QuadCurve2D#setCurve(QuadCurve2D)->void:::Sets the location of the end points and control point of this QuadCurve2D to the same as those in the specified QuadCurve2D.
java.awt.geom.QuadCurve2D#getFlatnessSq(double, double, double, double, double, double)->double:::Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points.
java.awt.geom.QuadCurve2D#getFlatness(double, double, double, double, double, double)->double:::Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the indicated control points.
java.awt.geom.QuadCurve2D#getFlatnessSq(double[], int)->double:::Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index.
java.awt.geom.QuadCurve2D#getFlatness(double[], int)->double:::Returns the flatness, or maximum distance of a control point from the line connecting the end points, of the quadratic curve specified by the control points stored in the indicated array at the indicated index.
java.awt.geom.QuadCurve2D#getFlatnessSq()->double:::Returns the square of the flatness, or maximum distance of a control point from the line connecting the end points, of this QuadCurve2D.
java.awt.geom.QuadCurve2D#getFlatness()->double:::Returns the flatness, or maximum distance of a control point from the line connecting the end points, of this QuadCurve2D.
java.awt.geom.QuadCurve2D#subdivide(QuadCurve2D, QuadCurve2D)->void:::Subdivides this QuadCurve2D and stores the resulting two subdivided curves into the left and right curve parameters
java.awt.geom.QuadCurve2D#subdivide(QuadCurve2D, QuadCurve2D, QuadCurve2D)->void:::Subdivides the quadratic curve specified by the src parameter and stores the resulting two subdivided curves into the left and right curve parameters
java.awt.geom.QuadCurve2D#subdivide(double[], int, double[], int, double[], int)->void:::Subdivides the quadratic curve specified by the coordinates stored in the src array at indices srcoff through srcoff&nbsp;+&nbsp;5 and stores the resulting two subdivided curves into the two result arrays at the corresponding indices
java.awt.geom.QuadCurve2D#solveQuadratic(double[])->int:::Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots back into the same array, returning the number of roots
java.awt.geom.QuadCurve2D#solveQuadratic(double[], double[])->int:::Solves the quadratic whose coefficients are in the eqn array and places the non-complex roots into the res array, returning the number of roots
java.awt.geom.QuadCurve2D#contains(double, double)->boolean::: quad curve2 d contains
java.awt.geom.QuadCurve2D#contains(Point2D)->boolean::: quad curve2 d contains
java.awt.geom.QuadCurve2D#intersects(double, double, double, double)->boolean::: quad curve2 d intersects
java.awt.geom.QuadCurve2D#intersects(Rectangle2D)->boolean::: quad curve2 d intersects
java.awt.geom.QuadCurve2D#contains(double, double, double, double)->boolean::: quad curve2 d contains
java.awt.geom.QuadCurve2D#contains(Rectangle2D)->boolean::: quad curve2 d contains
java.awt.geom.QuadCurve2D#getBounds()->Rectangle::: quad curve2 d get bounds
java.awt.geom.QuadCurve2D#getPathIterator(AffineTransform)->PathIterator:::Returns an iteration object that defines the boundary of the shape of this QuadCurve2D
java.awt.geom.QuadCurve2D#getPathIterator(AffineTransform, double)->PathIterator:::Returns an iteration object that defines the boundary of the flattened shape of this QuadCurve2D
java.awt.geom.QuadCurve2D#clone()->Object:::Creates a new object of the same class and with the same contents as this object.
java.awt.geom.QuadIterator#getWindingRule()->int:::Return the winding rule for determining the insideness of the path.
java.awt.geom.QuadIterator#isDone()->boolean:::Tests if there are more points to read.
java.awt.geom.QuadIterator#next()->void:::Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.QuadIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.QuadIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.Rectangle2D.Float#getX()->double::: float get x
java.awt.geom.Rectangle2D.Float#getY()->double::: float get y
java.awt.geom.Rectangle2D.Float#getWidth()->double::: float get width
java.awt.geom.Rectangle2D.Float#getHeight()->double::: float get height
java.awt.geom.Rectangle2D.Float#isEmpty()->boolean::: float is empty
java.awt.geom.Rectangle2D.Float#setRect(float, float, float, float)->void:::Sets the location and size of this Rectangle2D to the specified float values.
java.awt.geom.Rectangle2D.Float#setRect(double, double, double, double)->void::: float set rect
java.awt.geom.Rectangle2D.Float#setRect(Rectangle2D)->void::: float set rect
java.awt.geom.Rectangle2D.Float#outcode(double, double)->int::: float outcode
java.awt.geom.Rectangle2D.Float#getBounds2D()->Rectangle2D::: float get bounds2 d
java.awt.geom.Rectangle2D.Float#createIntersection(Rectangle2D)->Rectangle2D::: float create intersection
java.awt.geom.Rectangle2D.Float#createUnion(Rectangle2D)->Rectangle2D::: float create union
java.awt.geom.Rectangle2D.Float#toString()->String:::Returns the String representation of this Rectangle2D.
java.awt.geom.Rectangle2D.Double#getX()->double::: double get x
java.awt.geom.Rectangle2D.Double#getY()->double::: double get y
java.awt.geom.Rectangle2D.Double#getWidth()->double::: double get width
java.awt.geom.Rectangle2D.Double#getHeight()->double::: double get height
java.awt.geom.Rectangle2D.Double#isEmpty()->boolean::: double is empty
java.awt.geom.Rectangle2D.Double#setRect(double, double, double, double)->void::: double set rect
java.awt.geom.Rectangle2D.Double#setRect(Rectangle2D)->void::: double set rect
java.awt.geom.Rectangle2D.Double#outcode(double, double)->int::: double outcode
java.awt.geom.Rectangle2D.Double#getBounds2D()->Rectangle2D::: double get bounds2 d
java.awt.geom.Rectangle2D.Double#createIntersection(Rectangle2D)->Rectangle2D::: double create intersection
java.awt.geom.Rectangle2D.Double#createUnion(Rectangle2D)->Rectangle2D::: double create union
java.awt.geom.Rectangle2D.Double#toString()->String:::Returns the String representation of this Rectangle2D.
java.awt.geom.Rectangle2D#setRect(double, double, double, double)->void:::Sets the location and size of this Rectangle2D to the specified double values.
java.awt.geom.Rectangle2D#setRect(Rectangle2D)->void:::Sets this Rectangle2D to be the same as the specified Rectangle2D.
java.awt.geom.Rectangle2D#intersectsLine(double, double, double, double)->boolean:::Tests if the specified line segment intersects the interior of this Rectangle2D.
java.awt.geom.Rectangle2D#intersectsLine(Line2D)->boolean:::Tests if the specified line segment intersects the interior of this Rectangle2D.
java.awt.geom.Rectangle2D#outcode(double, double)->int:::Determines where the specified coordinates lie with respect to this Rectangle2D
java.awt.geom.Rectangle2D#outcode(Point2D)->int:::Determines where the specified Point2D lies with respect to this Rectangle2D
java.awt.geom.Rectangle2D#setFrame(double, double, double, double)->void:::Sets the location and size of the outer bounds of this Rectangle2D to the specified rectangular values.
java.awt.geom.Rectangle2D#getBounds2D()->Rectangle2D::: rectangle2 d get bounds2 d
java.awt.geom.Rectangle2D#contains(double, double)->boolean::: rectangle2 d contains
java.awt.geom.Rectangle2D#intersects(double, double, double, double)->boolean::: rectangle2 d intersects
java.awt.geom.Rectangle2D#contains(double, double, double, double)->boolean::: rectangle2 d contains
java.awt.geom.Rectangle2D#createIntersection(Rectangle2D)->Rectangle2D:::Returns a new Rectangle2D object representing the intersection of this Rectangle2D with the specified Rectangle2D.
java.awt.geom.Rectangle2D#intersect(Rectangle2D, Rectangle2D, Rectangle2D)->void:::Intersects the pair of specified source Rectangle2D objects and puts the result into the specified destination Rectangle2D object
java.awt.geom.Rectangle2D#createUnion(Rectangle2D)->Rectangle2D:::Returns a new Rectangle2D object representing the union of this Rectangle2D with the specified Rectangle2D.
java.awt.geom.Rectangle2D#union(Rectangle2D, Rectangle2D, Rectangle2D)->void:::Unions the pair of source Rectangle2D objects and puts the result into the specified destination Rectangle2D object
java.awt.geom.Rectangle2D#add(double, double)->void:::Adds a point, specified by the double precision arguments newx and newy, to this Rectangle2D
java.awt.geom.Rectangle2D#add(Point2D)->void:::Adds the Point2D object pt to this Rectangle2D
java.awt.geom.Rectangle2D#add(Rectangle2D)->void:::Adds a Rectangle2D object to this Rectangle2D
java.awt.geom.Rectangle2D#getPathIterator(AffineTransform)->PathIterator:::Returns an iteration object that defines the boundary of this Rectangle2D
java.awt.geom.Rectangle2D#getPathIterator(AffineTransform, double)->PathIterator:::Returns an iteration object that defines the boundary of the flattened Rectangle2D
java.awt.geom.Rectangle2D#hashCode()->int:::Returns the hashcode for this Rectangle2D.
java.awt.geom.Rectangle2D#equals(Object)->boolean:::Determines whether or not the specified Object is equal to this Rectangle2D
java.awt.geom.RectangularShape#getX()->double:::Returns the X coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.RectangularShape#getY()->double:::Returns the Y coordinate of the upper-left corner of the framing rectangle in double precision.
java.awt.geom.RectangularShape#getWidth()->double:::Returns the width of the framing rectangle in double precision.
java.awt.geom.RectangularShape#getHeight()->double:::Returns the height of the framing rectangle in double precision.
java.awt.geom.RectangularShape#getMinX()->double:::Returns the smallest X coordinate of the framing rectangle of the Shape in double precision.
java.awt.geom.RectangularShape#getMinY()->double:::Returns the smallest Y coordinate of the framing rectangle of the Shape in double precision.
java.awt.geom.RectangularShape#getMaxX()->double:::Returns the largest X coordinate of the framing rectangle of the Shape in double precision.
java.awt.geom.RectangularShape#getMaxY()->double:::Returns the largest Y coordinate of the framing rectangle of the Shape in double precision.
java.awt.geom.RectangularShape#getCenterX()->double:::Returns the X coordinate of the center of the framing rectangle of the Shape in double precision.
java.awt.geom.RectangularShape#getCenterY()->double:::Returns the Y coordinate of the center of the framing rectangle of the Shape in double precision.
java.awt.geom.RectangularShape#getFrame()->Rectangle2D:::Returns the framing Rectangle2D that defines the overall shape of this object.
java.awt.geom.RectangularShape#isEmpty()->boolean:::Determines whether the RectangularShape is empty
java.awt.geom.RectangularShape#setFrame(double, double, double, double)->void:::Sets the location and size of the framing rectangle of this Shape to the specified rectangular values.
java.awt.geom.RectangularShape#setFrame(Point2D, Dimension2D)->void:::Sets the location and size of the framing rectangle of this Shape to the specified Point2D and Dimension2D, respectively
java.awt.geom.RectangularShape#setFrame(Rectangle2D)->void:::Sets the framing rectangle of this Shape to be the specified Rectangle2D
java.awt.geom.RectangularShape#setFrameFromDiagonal(double, double, double, double)->void:::Sets the diagonal of the framing rectangle of this Shape based on the two specified coordinates
java.awt.geom.RectangularShape#setFrameFromDiagonal(Point2D, Point2D)->void:::Sets the diagonal of the framing rectangle of this Shape based on two specified Point2D objects
java.awt.geom.RectangularShape#setFrameFromCenter(double, double, double, double)->void:::Sets the framing rectangle of this Shape based on the specified center point coordinates and corner point coordinates
java.awt.geom.RectangularShape#setFrameFromCenter(Point2D, Point2D)->void:::Sets the framing rectangle of this Shape based on a specified center Point2D and corner Point2D
java.awt.geom.RectangularShape#contains(Point2D)->boolean::: rectangular shape contains
java.awt.geom.RectangularShape#intersects(Rectangle2D)->boolean::: rectangular shape intersects
java.awt.geom.RectangularShape#contains(Rectangle2D)->boolean::: rectangular shape contains
java.awt.geom.RectangularShape#getBounds()->Rectangle::: rectangular shape get bounds
java.awt.geom.RectangularShape#getPathIterator(AffineTransform, double)->PathIterator:::Returns an iterator object that iterates along the Shape object's boundary and provides access to a flattened view of the outline of the Shape object's geometry
java.awt.geom.RectangularShape#clone()->Object:::Creates a new object of the same class and with the same contents as this object.
java.awt.geom.RectIterator#getWindingRule()->int:::Return the winding rule for determining the insideness of the path.
java.awt.geom.RectIterator#isDone()->boolean:::Tests if there are more points to read.
java.awt.geom.RectIterator#next()->void:::Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.RectIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.RectIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.RoundRectangle2D.Float#getX()->double::: float get x
java.awt.geom.RoundRectangle2D.Float#getY()->double::: float get y
java.awt.geom.RoundRectangle2D.Float#getWidth()->double::: float get width
java.awt.geom.RoundRectangle2D.Float#getHeight()->double::: float get height
java.awt.geom.RoundRectangle2D.Float#getArcWidth()->double::: float get arc width
java.awt.geom.RoundRectangle2D.Float#getArcHeight()->double::: float get arc height
java.awt.geom.RoundRectangle2D.Float#isEmpty()->boolean::: float is empty
java.awt.geom.RoundRectangle2D.Float#setRoundRect(float, float, float, float, float, float)->void:::Sets the location, size, and corner radii of this RoundRectangle2D to the specified float values.
java.awt.geom.RoundRectangle2D.Float#setRoundRect(double, double, double, double, double, double)->void::: float set round rect
java.awt.geom.RoundRectangle2D.Float#setRoundRect(RoundRectangle2D)->void::: float set round rect
java.awt.geom.RoundRectangle2D.Float#getBounds2D()->Rectangle2D::: float get bounds2 d
java.awt.geom.RoundRectangle2D.Double#getX()->double::: double get x
java.awt.geom.RoundRectangle2D.Double#getY()->double::: double get y
java.awt.geom.RoundRectangle2D.Double#getWidth()->double::: double get width
java.awt.geom.RoundRectangle2D.Double#getHeight()->double::: double get height
java.awt.geom.RoundRectangle2D.Double#getArcWidth()->double::: double get arc width
java.awt.geom.RoundRectangle2D.Double#getArcHeight()->double::: double get arc height
java.awt.geom.RoundRectangle2D.Double#isEmpty()->boolean::: double is empty
java.awt.geom.RoundRectangle2D.Double#setRoundRect(double, double, double, double, double, double)->void::: double set round rect
java.awt.geom.RoundRectangle2D.Double#setRoundRect(RoundRectangle2D)->void::: double set round rect
java.awt.geom.RoundRectangle2D.Double#getBounds2D()->Rectangle2D::: double get bounds2 d
java.awt.geom.RoundRectangle2D#getArcWidth()->double:::Gets the width of the arc that rounds off the corners.
java.awt.geom.RoundRectangle2D#getArcHeight()->double:::Gets the height of the arc that rounds off the corners.
java.awt.geom.RoundRectangle2D#setRoundRect(double, double, double, double, double, double)->void:::Sets the location, size, and corner radii of this RoundRectangle2D to the specified double values.
java.awt.geom.RoundRectangle2D#setRoundRect(RoundRectangle2D)->void:::Sets this RoundRectangle2D to be the same as the specified RoundRectangle2D.
java.awt.geom.RoundRectangle2D#setFrame(double, double, double, double)->void::: round rectangle2 d set frame
java.awt.geom.RoundRectangle2D#contains(double, double)->boolean::: round rectangle2 d contains
java.awt.geom.RoundRectangle2D#intersects(double, double, double, double)->boolean::: round rectangle2 d intersects
java.awt.geom.RoundRectangle2D#contains(double, double, double, double)->boolean::: round rectangle2 d contains
java.awt.geom.RoundRectangle2D#getPathIterator(AffineTransform)->PathIterator:::Returns an iteration object that defines the boundary of this RoundRectangle2D
java.awt.geom.RoundRectangle2D#hashCode()->int:::Returns the hashcode for this RoundRectangle2D.
java.awt.geom.RoundRectangle2D#equals(Object)->boolean:::Determines whether or not the specified Object is equal to this RoundRectangle2D
java.awt.geom.RoundRectIterator#getWindingRule()->int:::Return the winding rule for determining the insideness of the path.
java.awt.geom.RoundRectIterator#isDone()->boolean:::Tests if there are more points to read.
java.awt.geom.RoundRectIterator#next()->void:::Moves the iterator to the next segment of the path forwards along the primary direction of traversal as long as there are more points in that direction.
java.awt.geom.RoundRectIterator#currentSegment(float[])->int:::Returns the coordinates and type of the current path segment in the iteration
java.awt.geom.RoundRectIterator#currentSegment(double[])->int:::Returns the coordinates and type of the current path segment in the iteration

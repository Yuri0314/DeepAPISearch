DSAKeyValue#getPublicKey()::: key value get public key:::try->pkspec->this->getBigIntegerFromChildElement->this->getBigIntegerFromChildElement->this->getBigIntegerFromChildElement->this->getBigIntegerFromChildElement->new->DSAPublicKeySpec->dsaFactory->KeyFactory->getInstance->pk->dsaFactory->generatePublic->return->catch->throw->new->XMLSecurityException->throw->new->XMLSecurityException->finally
DSAKeyValue#getBaseLocalName()::: key value get base local name:::return
ECKeyValue#initializeCurve(String, String, String, String, String, String, String, String, int)::: key value initialize curve:::p->bigInt->field->new->ECFieldFp->curve->bigInt->bigInt->new->EllipticCurve->g->bigInt->bigInt->new->ECPoint->return->bigInt->new->Curve
ECKeyValue#getPublicKey()::: key value get public key:::try->ecParams->curElem->getElement->getFirstChildElement->if->throw->new->MarshalException->if->curElem->getLocalName->equals->curElem->getNamespaceURI->equals->throw->new->UnsupportedOperationException->else->if->curElem->getLocalName->equals->curElem->getNamespaceURI->equals->uri->if->curElem->hasAttributeNS->curElem->getAttributeNS->if->uri->startsWith->oid->uri->length->substring->getECParameterSpec->if->throw->new->MarshalException->else->throw->new->MarshalException->else->throw->new->MarshalException->getNextSiblingElement->ecPoint->try->content->XMLUtils->getFullTextChildrenFromNode->XMLUtils->decode->ecParams->getCurve->decodePoint->catch->throw->new->MarshalException->finally->spec->new->ECPublicKeySpec->return->KeyFactory->getInstance->generatePublic->catch->throw->new->XMLSecurityException->throw->new->XMLSecurityException->throw->new->XMLSecurityException->finally
ECKeyValue#getBaseLocalName()::: key value get base local name:::return
ECKeyValue#getFirstChildElement(Node)::: key value get first child element:::child->node->getFirstChild->while->child->getNodeType->child->getNextSibling->return
ECKeyValue#getNextSiblingElement(Node, String, String)::: key value get next sibling element:::return->getNextSiblingElement->verifyElement
ECKeyValue#getNextSiblingElement(Node)::: key value get next sibling element:::sibling->node->getNextSibling->while->sibling->getNodeType->sibling->getNextSibling->return
ECKeyValue#verifyElement(Element, String, String)::: key value verify element:::if->throw->new->MarshalException->name->elem->getLocalName->namespace->elem->getNamespaceURI->if->name->equals->namespace->equals->throw->new->MarshalException->return
ECKeyValue#getCurveOid(ECParameterSpec)::: key value get curve oid:::match->if->matchCurve->else->if->matchCurve->else->if->matchCurve->else->return->return->match->getObjectId
ECKeyValue#matchCurve(ECParameterSpec, Curve)::: key value match curve:::fieldSize->params->getCurve->getField->getFieldSize->return->curve->getCurve->getField->getFieldSize->curve->getCurve->params->getCurve->equals->curve->getGenerator->params->getGenerator->equals->curve->getOrder->params->getOrder->equals->curve->getCofactor->params->getCofactor
ECKeyValue#decodePoint(byte[], EllipticCurve)::: key value decode point:::if->throw->new->IOException->n->if->curve->getField->getFieldSize->throw->new->IOException->xb->Arrays->copyOfRange->yb->Arrays->copyOfRange->return->new->BigInteger->new->BigInteger->new->ECPoint
ECKeyValue#encodePoint(ECPoint, EllipticCurve)::: key value encode point:::n->curve->getField->getFieldSize->xb->point->getAffineX->toByteArray->trimZeroes->yb->point->getAffineY->toByteArray->trimZeroes->if->throw->new->RuntimeException->b->new->byteArr->System->arraycopy->System->arraycopy->return
ECKeyValue#trimZeroes(byte[])::: key value trim zeroes:::i->while->if->return->return->Arrays->copyOfRange
ECKeyValue#getECParameterSpec(String)::: key value get parameter spec:::if->oid->SECP256R1->getObjectId->equals->return->else->if->oid->SECP384R1->getObjectId->equals->return->else->if->oid->SECP521R1->getObjectId->equals->return->else->return
ECKeyValue.Curve#getName()::: curve get name:::return
ECKeyValue.Curve#getObjectId()::: curve get object id:::return
ECKeyValue#bigInt(String)::: key value big int:::return->new->BigInteger
KeyValueContent#getPublicKey():::Method getPublicKey:::
RSAKeyValue#getPublicKey()::: key value get public key:::try->rsaFactory->KeyFactory->getInstance->rsaKeyspec->this->getBigIntegerFromChildElement->this->getBigIntegerFromChildElement->new->RSAPublicKeySpec->pk->rsaFactory->generatePublic->return->catch->throw->new->XMLSecurityException->throw->new->XMLSecurityException->finally
RSAKeyValue#getBaseLocalName()::: key value get base local name:::return

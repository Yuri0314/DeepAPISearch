JavacFiler.FilerOutputFileObject#openOutputStream()::: filer output file object open output stream:::if->throw->new->IOException->return->new->FilerOutputStream
JavacFiler.FilerOutputFileObject#openWriter()::: filer output file object open writer:::if->throw->new->IOException->return->new->FilerWriter
JavacFiler.FilerOutputFileObject#openInputStream()::: filer output file object open input stream:::throw->new->IllegalStateException
JavacFiler.FilerOutputFileObject#openReader(boolean)::: filer output file object open reader:::throw->new->IllegalStateException
JavacFiler.FilerOutputFileObject#getCharContent(boolean)::: filer output file object get char content:::throw->new->IllegalStateException
JavacFiler.FilerOutputFileObject#delete()::: filer output file object delete:::return
JavacFiler.FilerOutputJavaFileObject#getKind()::: filer output java file object get kind:::return->javaFileObject->getKind
JavacFiler.FilerOutputJavaFileObject#isNameCompatible(String, JavaFileObject.Kind)::: filer output java file object is name compatible:::return->javaFileObject->isNameCompatible
JavacFiler.FilerOutputJavaFileObject#getNestingKind()::: filer output java file object get nesting kind:::return->javaFileObject->getNestingKind
JavacFiler.FilerOutputJavaFileObject#getAccessLevel()::: filer output java file object get access level:::return->javaFileObject->getAccessLevel
JavacFiler.FilerInputFileObject#openOutputStream()::: filer input file object open output stream:::throw->new->IllegalStateException
JavacFiler.FilerInputFileObject#openWriter()::: filer input file object open writer:::throw->new->IllegalStateException
JavacFiler.FilerInputFileObject#delete()::: filer input file object delete:::return
JavacFiler.FilerInputJavaFileObject#getKind()::: filer input java file object get kind:::return->javaFileObject->getKind
JavacFiler.FilerInputJavaFileObject#isNameCompatible(String, JavaFileObject.Kind)::: filer input java file object is name compatible:::return->javaFileObject->isNameCompatible
JavacFiler.FilerInputJavaFileObject#getNestingKind()::: filer input java file object get nesting kind:::return->javaFileObject->getNestingKind
JavacFiler.FilerInputJavaFileObject#getAccessLevel()::: filer input java file object get access level:::return->javaFileObject->getAccessLevel
JavacFiler.FilerOutputStream#close()::: filer output stream close:::if->closeFileObject->out->close
JavacFiler.FilerWriter#close()::: filer writer close:::if->closeFileObject->out->close
JavacFiler#createSourceFile(CharSequence, Element...)::: javac filer create source file:::moduleAndClass->checkOrInferModule->return->createSourceOrClassFile
JavacFiler#createClassFile(CharSequence, Element...)::: javac filer create class file:::moduleAndClass->checkOrInferModule->return->createSourceOrClassFile
JavacFiler#checkOrInferModule(CharSequence)::: javac filer check or infer module:::moduleAndPkgString->moduleAndPkg->toString->slash->moduleAndPkgString->indexOf->module->pkg->if->lastDot->moduleAndPkgString->lastIndexOf->pack->moduleAndPkgString->substring->msym->inferModule->if->return->Pair->of->if->throw->new->FilerException->else->moduleAndPkgString->substring->moduleAndPkgString->substring->explicitModule->syms->names->fromString->getModule->if->throw->new->FilerException->if->modules->isRootModule->throw->new->FilerException->return->Pair->of
JavacFiler#createSourceOrClassFile(ModuleSymbol, boolean, String)::: javac filer create source or class file:::Assert->checkNonNull->if->periodIndex->name->lastIndexOf->if->base->name->substring->extn->if->base->equals->log->Warnings->ProcSuspiciousClassName->warning->checkNameAndExistence->loc->if->toString->getLocationForModule->kind->fileObject->fileManager->getJavaFileForOutput->checkFileReopening->if->log->Warnings->ProcFileCreateLastRound->warning->if->aggregateGeneratedSourceNames->Pair->of->add->else->aggregateGeneratedClassNames->Pair->of->add->openTypeNames->add->return->new->FilerOutputJavaFileObject
JavacFiler#createResource(JavaFileManager.Location, CharSequence, CharSequence, Element...)::: javac filer create resource:::locationModuleAndPackage->checkOrInferModule->msym->pkg->locationCheck->strPkg->pkg->toString->if->strPkg->length->checkName->fileObject->fileManager->relativeName->toString->getFileForOutput->checkFileReopening->if->return->new->FilerOutputJavaFileObject->else->return->new->FilerOutputFileObject
JavacFiler#locationCheck(JavaFileManager.Location)::: javac filer location check:::if->stdLoc->if->stdLoc->isOutputLocation->throw->new->IllegalArgumentException
JavacFiler#getResource(JavaFileManager.Location, CharSequence, CharSequence)::: javac filer get resource:::locationModuleAndPackage->checkOrInferModule->pkg->if->pkg->length->checkName->fileObject->if->location->isOutputLocation->fileManager->relativeName->toString->getFileForOutput->else->fileManager->relativeName->toString->getFileForInput->if->name->pkg->length->relativeName->toString->throw->new->FileNotFoundException->checkFileReopening->return->new->FilerInputFileObject
JavacFiler#checkOrInferModule(JavaFileManager.Location, CharSequence, boolean)::: javac filer check or infer module:::moduleAndPkgString->moduleAndPkg->toString->slash->moduleAndPkgString->indexOf->multiModuleLocation->location->isModuleOrientedLocation->location->isOutputLocation->module->pkg->if->if->return->modules->getDefaultModule->new->Tuple3<>->if->location->isOutputLocation->msym->inferModule->if->moduleLoc->fileManager->toString->getLocationForModule->return->new->Tuple3<>->if->throw->new->FilerException->else->moduleAndPkgString->substring->moduleAndPkgString->substring->if->explicitModule->syms->names->fromString->getModule->if->throw->new->FilerException->if->modules->isRootModule->throw->new->FilerException->moduleLoc->fileManager->getLocationForModule->return->new->Tuple3<>->else->throw->new->FilerException
JavacFiler#inferModule(String)::: javac filer infer module:::if->modules->getDefaultModule->return->modules->getDefaultModule->rootModules->modules->getRootModules->if->rootModules->size->return->rootModules->iterator->next->pack->elementUtils->getPackageElement->if->return->return
JavacFiler#checkName(String)::: javac filer check name:::checkName
JavacFiler#checkName(String, boolean)::: javac filer check name:::if->SourceVersion->isName->isPackageInfo->if->log->Warnings->ProcIllegalFileName->warning->throw->new->FilerException
JavacFiler#isPackageInfo(String, boolean)::: javac filer is package info:::PKG_INFO->periodIndex->name->lastIndexOf->if->return->name->equals->else->prefix->name->substring->simple->name->substring->return->SourceVersion->isName->simple->equals
JavacFiler#checkNameAndExistence(ModuleSymbol, String, boolean)::: javac filer check name and existence:::checkName->existing->elementUtils->getTypeElement->alreadySeen->aggregateGeneratedSourceNames->Pair->of->contains->aggregateGeneratedClassNames->Pair->of->contains->initialClassNames->contains->initialInputs->contains->if->if->log->Warnings->ProcTypeRecreate->warning->throw->new->FilerException->if->log->Warnings->ProcTypeAlreadyExists->warning->if->mod->isUnnamed->typename->contains->throw->new->FilerException
JavacFiler#checkFileReopening(FileObject, boolean):::Check to see if the file has already been opened; if so, throw an exception, otherwise add it to the set of files.:::if->isInFileObjectHistory->if->log->Warnings->fileObject->getName->ProcFileReopening->warning->throw->fileObject->getName->new->FilerException->if->fileObjectHistory->add
JavacFiler#isInFileObjectHistory(FileObject, boolean)::: javac filer is in file object history:::if->foreach->try->if->fileManager->isSameFile->return->catch->finally->foreach->try->existing->elementUtils->getTypeElement->if->fileManager->isSameFile->fileManager->isSameFile->return->catch->finally->foreach->if->fileManager->isSameFile->return->return
JavacFiler#newFiles()::: javac filer new files:::return->generatedSourceNames->isEmpty->generatedClasses->isEmpty
JavacFiler#getGeneratedSourceNames()::: javac filer get generated source names:::return
JavacFiler#getGeneratedSourceFileObjects()::: javac filer get generated source file objects:::return
JavacFiler#getGeneratedClasses()::: javac filer get generated classes:::return
JavacFiler#warnIfUnclosedFiles()::: javac filer warn if unclosed files:::if->openTypeNames->isEmpty->log->Warnings->ProcUnclosedTypeFiles->warning
JavacFiler#newRound():::Update internal state for a new round.:::clearRoundState
JavacFiler#setLastRound(boolean)::: javac filer set last round:::
JavacFiler#setInitialState(Collection, Collection)::: javac filer set initial state:::addAll->addAll
JavacFiler#close()::: javac filer close:::clearRoundState->initialClassNames->clear->initialInputs->clear->fileObjectHistory->clear->openTypeNames->clear->aggregateGeneratedSourceNames->clear->aggregateGeneratedClassNames->clear
JavacFiler#clearRoundState()::: javac filer clear round state:::generatedSourceNames->clear->generatedSourceFileObjects->clear->generatedClasses->clear
JavacFiler#displayState():::Debugging function to display internal state.:::xout->context->get->getWriter->xout->println->xout->println->xout->println->xout->generatedClasses->keySet->println->xout->println->xout->println
JavacFiler#toString()::: javac filer to string:::return
JavacFiler#closeFileObject(ModuleSymbol, String, FileObject):::Upon close, register files opened by create{Source, Class}File for annotation processing.:::if->if->throw->new->AssertionError->javaFileObject->switch->javaFileObject->getKind->generatedSourceNames->add->generatedSourceFileObjects->add->openTypeNames->remove->break->generatedClasses->Collections->new->LinkedHashMap<>->synchronizedMap->computeIfAbsent->put->openTypeNames->remove->break->break
JavacMessager#printMessage(Diagnostic.Kind, CharSequence)::: javac messager print message:::printMessage
JavacMessager#printMessage(Diagnostic.Kind, CharSequence, Element)::: javac messager print message:::printMessage
JavacMessager#printMessage(Diagnostic.Kind, CharSequence, Element, AnnotationMirror):::Prints a message of the specified kind at the location of the annotation mirror of the annotated element.:::printMessage
JavacMessager#printMessage(Diagnostic.Kind, CharSequence, Element, AnnotationMirror, AnnotationValue):::Prints a message of the specified kind at the location of the annotation value inside the annotation mirror of the annotated element.:::oldSource->newSource->pos->elemUtils->processingEnv->getElementUtils->treeTop->elemUtils->getTreeAndTopLevel->if->if->log->useSource->pos->try->switch->log->Errors->msg->toString->ProcMessager->error->break->log->Warnings->msg->toString->ProcMessager->warning->break->log->Warnings->msg->toString->ProcMessager->mandatoryWarning->break->log->Notes->msg->toString->ProcMessager->note->break->catch->finally->if->log->useSource
JavacMessager#printError(String):::Prints an error message:::printMessage
JavacMessager#printWarning(String):::Prints a warning message:::printMessage
JavacMessager#printNotice(String):::Prints a notice.:::printMessage
JavacMessager#errorRaised()::: javac messager error raised:::return
JavacMessager#errorCount()::: javac messager error count:::return
JavacMessager#warningCount()::: javac messager warning count:::return
JavacMessager#newRound()::: javac messager new round:::
JavacMessager#toString()::: javac messager to string:::return
JavacProcessingEnvironment#instance(Context):::Get the JavacProcessingEnvironment instance for this context.:::instance->context->get->if->new->JavacProcessingEnvironment->return
JavacProcessingEnvironment#setProcessors(Iterable)::: javac processing environment set processors:::Assert->checkNull->initProcessorIterator
JavacProcessingEnvironment#initPlatformAnnotations()::: javac processing environment init platform annotations:::platformAnnotations->new->HashSet<>->platformAnnotations->add->platformAnnotations->add->platformAnnotations->add->platformAnnotations->add->platformAnnotations->add->platformAnnotations->add->platformAnnotations->add->return->Collections->unmodifiableSet
JavacProcessingEnvironment#initProcessorLoader()::: javac processing environment init processor loader:::try->if->fileManager->hasLocation->try->fileManager->getServiceLoader->catch->throw->new->Abort->finally->else->fileManager->hasLocation->fileManager->getClassLoader->fileManager->getClassLoader->if->options->isSet->ModuleHelper->getClass->getModule->processorClassLoader->getUnnamedModule->addExports->if->prepend->catch->finally
JavacProcessingEnvironment#initProcessorIterator(Iterable)::: javac processing environment init processor iterator:::processorIterator->if->options->isSet->try->List->new->PrintingProcessor->of->iterator->catch->assertError->new->AssertionError->assertError->initCause->throw->finally->else->if->processors->iterator->else->if->processorNames->options->get->if->fileManager->hasLocation->new->ServiceIterator->new->NameServiceIterator->else->if->new->NameProcessIterator->else->new->ServiceIterator->else->handleServiceLoaderUnavailability->platformProvider->context->get->platformProcessors->Collections->emptyList->if->platformProvider->getAnnotationProcessors->stream->PluginInfo->getPlugin->map->Collectors->toList->collect->iterators->List->platformProcessors->iterator->of->compoundIterator->Iterators->createCompoundIterator->new->DiscoveredProcessors
JavacProcessingEnvironment#getServiceLoader(Class)::: javac processing environment get service loader:::if->fileManager->hasLocation->try->return->fileManager->getServiceLoader->catch->throw->new->Abort->finally->else->return->ServiceLoader->getProcessorClassLoader->load
JavacProcessingEnvironment#handleServiceLoaderUnavailability(String, Exception):::Returns an empty processor iterator if no processors are on the relevant path, otherwise if processors are present, logs an error:::if->standardFileManager->workingPath->fileManager->hasLocation->standardFileManager->getLocationAsPaths->standardFileManager->getLocationAsPaths->if->options->get->needClassLoader->handleException->else->handleException->pl->Collections->emptyList->return->pl->iterator
JavacProcessingEnvironment#handleException(String, Exception):::Handle a security exception thrown during initializing the Processor iterator.:::if->log->e->getLocalizedMessage->error->throw->new->Abort->else->log->error->throw->new->Abort
JavacProcessingEnvironment.ServiceIterator#hasNext()::: service iterator has next:::try->return->internalHasNext->catch->log->Errors->sce->getLocalizedMessage->ProcBadConfigFile->error->throw->new->Abort->log->Errors->ucve->getLocalizedMessage->ProcCantLoadClass->error->throw->new->Abort->log->Errors->cfe->getLocalizedMessage->ProcCantLoadClass->error->throw->new->Abort->log->Errors->t->getLocalizedMessage->ProcBadConfigFile->error->throw->new->Abort->finally
JavacProcessingEnvironment.ServiceIterator#internalHasNext()::: service iterator internal has next:::return->iterator->hasNext
JavacProcessingEnvironment.ServiceIterator#next()::: service iterator next:::try->return->internalNext->catch->log->Errors->sce->getLocalizedMessage->ProcBadConfigFile->error->throw->new->Abort->log->Errors->t->getLocalizedMessage->ProcBadConfigFile->error->throw->new->Abort->finally
JavacProcessingEnvironment.ServiceIterator#internalNext()::: service iterator internal next:::return->iterator->next
JavacProcessingEnvironment.ServiceIterator#remove()::: service iterator remove:::throw->new->UnsupportedOperationException
JavacProcessingEnvironment.ServiceIterator#close()::: service iterator close:::if->try->loader->reload->catch->finally
JavacProcessingEnvironment.NameServiceIterator#internalHasNext()::: name service iterator internal has next:::if->return->if->processorNames->hasNext->return->processorName->processorNames->next->theProcessor->namedProcessorsMap->get->if->namedProcessorsMap->remove->return->else->while->iterator->hasNext->iterator->next->name->theProcessor->getClass->getName->if->name->equals->return->else->namedProcessorsMap->put->log->Errors->ProcProcessorNotFound->error->return
JavacProcessingEnvironment.NameServiceIterator#internalNext()::: name service iterator internal next:::if->hasNext->p->return->else->throw->new->NoSuchElementException
JavacProcessingEnvironment.NameProcessIterator#hasNext()::: name process iterator has next:::if->return->else->if->names->hasNext->return->else->processor->names->next->getNextProcessor->if->return->else->return
JavacProcessingEnvironment.NameProcessIterator#getNextProcessor(String)::: name process iterator get next processor:::try->try->processorClass->processorCL->loadClass->ensureReadable->return->processorClass->getConstructor->newInstance->catch->log->Errors->ProcProcessorNotFound->error->return->log->Errors->ProcProcessorWrongType->error->return->log->Errors->ProcProcessorCantInstantiate->error->return->finally->catch->throw->throw->new->AnnotationProcessingError->finally
JavacProcessingEnvironment.NameProcessIterator#next()::: name process iterator next:::if->hasNext->p->return->else->throw->new->NoSuchElementException
JavacProcessingEnvironment.NameProcessIterator#remove()::: name process iterator remove:::throw->new->UnsupportedOperationException
JavacProcessingEnvironment.NameProcessIterator#ensureReadable(Class):::Ensures that the module of the given class is readable to this module.:::try->getModuleMethod->getMethod->thisModule->getModuleMethod->this->getClass->invoke->targetModule->getModuleMethod->invoke->moduleClass->getModuleMethod->getReturnType->addReadsMethod->moduleClass->getMethod->addReadsMethod->invoke->catch->throw->new->InternalError->finally
JavacProcessingEnvironment#atLeastOneProcessor()::: javac processing environment at least one processor:::return->discoveredProcs->iterator->hasNext
JavacProcessingEnvironment#initProcessorOptions()::: javac processing environment init processor options:::keySet->options->keySet->tempOptions->new->LinkedHashMap<>->foreach->if->key->startsWith->key->length->sepIndex->key->indexOf->candidateKey->candidateValue->if->key->substring->else->if->key->substring->key->length->key->substring->tempOptions->put->platformProvider->context->get->if->foreach->platformProvider->getAnnotationProcessors->tempOptions->ap->getOptions->putAll->return->Collections->unmodifiableMap
JavacProcessingEnvironment#initUnmatchedProcessorOptions()::: javac processing environment init unmatched processor options:::unmatchedProcessorOptions->new->HashSet<>->unmatchedProcessorOptions->processorOptions->keySet->addAll->return
JavacProcessingEnvironment.ProcessorState#checkSourceVersionCompatibility(Source, Log):::Checks whether or not a processor's source version is compatible with the compilation source version:::procSourceVersion->processor->getSupportedSourceVersion->if->procSourceVersion->Source->toSourceVersion->compareTo->log->Warnings->processor->getClass->getName->ProcProcessorIncompatibleSourceVersion->warning
JavacProcessingEnvironment.ProcessorState#checkOptionName(String, Log)::: processor state check option name:::valid->isValidOptionName->if->log->Errors->processor->getClass->getName->ProcProcessorBadOptionName->error->return
JavacProcessingEnvironment.ProcessorState#annotationSupported(String)::: processor state annotation supported:::foreach->if->p->matcher->matches->return->return
JavacProcessingEnvironment.ProcessorState#removeSupportedOptions(Set):::Remove options that are matched by this processor.:::unmatchedProcessorOptions->removeAll
JavacProcessingEnvironment.DiscoveredProcessors.ProcessorStateIterator#next()::: processor state iterator next:::if->if->innerIter->hasNext->return->innerIter->next->else->if->hasNext->ps->next->allowedInSource->new->ProcessorState->add->return->else->throw->new->NoSuchElementException
JavacProcessingEnvironment.DiscoveredProcessors.ProcessorStateIterator#hasNext()::: processor state iterator has next:::if->return->hasNext->else->return->innerIter->hasNext->hasNext
JavacProcessingEnvironment.DiscoveredProcessors.ProcessorStateIterator#remove()::: processor state iterator remove:::throw->new->UnsupportedOperationException
JavacProcessingEnvironment.DiscoveredProcessors.ProcessorStateIterator#runContributingProcs(RoundEnvironment):::Run all remaining processors on the procStateList that have not already run this round with an empty set of annotations.:::if->emptyTypeElements->Collections->emptySet->while->innerIter->hasNext->ps->innerIter->next->if->callProcessor
JavacProcessingEnvironment.DiscoveredProcessors#iterator()::: discovered processors iterator:::return->new->ProcessorStateIterator
JavacProcessingEnvironment.DiscoveredProcessors#close():::Free jar files, etc:::if->close
JavacProcessingEnvironment#discoverAndRunProcs(Set, List, List, List)::: javac processing environment discover and run procs:::unmatchedAnnotations->annotationsPresent->size->new->HashMap<>->foreach->mod->elementUtils->getModuleOf->moduleSpec->allowedInSource->mod->getQualifiedName->unmatchedAnnotations->a->getQualifiedName->toString->put->if->unmatchedAnnotations->size->unmatchedAnnotations->put->psi->discoveredProcs->iterator->rootElements->new->LinkedHashSet<>->rootElements->addAll->rootElements->addAll->rootElements->addAll->Collections->unmodifiableSet->renv->new->JavacRoundEnvironment->while->unmatchedAnnotations->size->psi->hasNext->ps->psi->next->matchedNames->new->HashSet<>->typeElements->new->LinkedHashSet<>->foreach->unmatchedAnnotations->entrySet->unmatchedAnnotationName->entry->getKey->if->ps->annotationSupported->matchedNames->add->te->entry->getValue->if->typeElements->add->if->matchedNames->size->processingResult->callProcessor->ps->removeSupportedOptions->if->log->getClass->getName->matchedNames->toString->printLines->if->unmatchedAnnotations->keySet->removeAll->unmatchedAnnotations->remove->if->unmatchedAnnotations->size->unmatchedAnnotations->keySet->removeAll->if->unmatchedAnnotations->size->log->Warnings->unmatchedAnnotations->keySet->ProcAnnotationsWithoutProcessors->warning->psi->runContributingProcs
JavacProcessingEnvironment.ComputeAnnotationSet#visitPackage(PackageElement, Set)::: compute annotation set visit package:::return
JavacProcessingEnvironment.ComputeAnnotationSet#visitType(TypeElement, Set)::: compute annotation set visit type:::e->getTypeParameters->scan->return->super->visitType
JavacProcessingEnvironment.ComputeAnnotationSet#visitExecutable(ExecutableElement, Set)::: compute annotation set visit executable:::e->getTypeParameters->scan->return->super->visitExecutable
JavacProcessingEnvironment.ComputeAnnotationSet#addAnnotations(Element, Set)::: compute annotation set add annotations:::foreach->elements->getAllAnnotationMirrors->e2->annotationMirror->getAnnotationType->asElement->p->add
JavacProcessingEnvironment.ComputeAnnotationSet#scan(Element, Set)::: compute annotation set scan:::addAnnotations->return->super->scan
JavacProcessingEnvironment#callProcessor(Processor, Set, RoundEnvironment)::: javac processing environment call processor:::prevDeferredHandler->dcfh->setHandler->try->return->proc->process->catch->log->Errors->ex->getDetailValue->ProcCantAccess1->error->return->out->new->StringWriter->ex->new->PrintWriter->printStackTrace->log->Errors->ex->getDetailValue->out->toString->ProcCantAccess->error->return->throw->throw->new->AnnotationProcessingError->finally->dcfh->setHandler
JavacProcessingEnvironment.Round#next(Set, Map>):::Create the next round to be used.:::return->new->Round
JavacProcessingEnvironment.Round#finalCompiler():::Prepare the compiler for the final compilation.:::newRound
JavacProcessingEnvironment.Round#errorCount():::Return the number of errors found so far in this round:::return->compiler->errorCount
JavacProcessingEnvironment.Round#warningCount():::Return the number of warnings found so far in this round.:::return->compiler->warningCount
JavacProcessingEnvironment.Round#unrecoverableError():::Return whether or not an unrecoverable error has occurred.:::if->messager->errorRaised->return->foreach->deferredDiagnosticHandler->getDiagnostics->switch->d->getKind->if->return->break->if->d->isFlagSet->return->break->return
JavacProcessingEnvironment.Round#findAnnotationsPresent():::Find the set of annotations present in the set of top level  classes and package info files to be processed this round.:::annotationComputer->new->ComputeAnnotationSet->new->LinkedHashSet<>->foreach->annotationComputer->scan->foreach->annotationComputer->scan->foreach->annotationComputer->scan
JavacProcessingEnvironment.Round#enterClassFiles(Map>):::Enter a set of generated class files.:::list->List->nil->foreach->modulesAndClassFiles->entrySet->foreach->moduleAndClassFiles->getValue->entrySet->name->names->entry->getKey->fromString->file->entry->getValue->if->file->getKind->throw->new->AssertionError->cs->if->isPkgInfo->packageName->Convert->packagePart->p->symtab->moduleAndClassFiles->getKey->enterPackage->if->symtab->moduleAndClassFiles->getKey->Convert->shortName->enterClass->cs->reset->if->else->symtab->moduleAndClassFiles->getKey->enterClass->cs->reset->if->members->enter->list->prepend->return->list->reverse
JavacProcessingEnvironment.Round#enterTrees(List):::Enter a set of syntax trees.:::compiler->enterTrees
JavacProcessingEnvironment.Round#run(boolean, boolean):::Run a processing round.:::printRoundInfo->if->taskListener->isEmpty->taskListener->new->TaskEvent->started->try->if->filer->setLastRound->emptyRootElements->Collections->emptySet->renv->new->JavacRoundEnvironment->discoveredProcs->iterator->runContributingProcs->else->discoverAndRunProcs->catch->deferredDiagnosticHandler->reportDeferredDiagnostics->log->popDiagnosticHandler->compiler->setDeferredDiagnosticHandler->throw->finally->if->taskListener->isEmpty->taskListener->new->TaskEvent->finished
JavacProcessingEnvironment.Round#showDiagnostics(boolean)::: round show diagnostics:::kinds->EnumSet->allOf->if->kinds->remove->deferredDiagnosticHandler->reportDeferredDiagnostics->log->popDiagnosticHandler->compiler->setDeferredDiagnosticHandler
JavacProcessingEnvironment.Round#printRoundInfo(boolean):::Print info about this round.:::if->tlc->List->nil->ap->Collections->emptySet->log->tlc->toString->printLines
JavacProcessingEnvironment.Round#newRound():::Prepare for new round of annotation processing:::foreach->enter->getEnvs->treesToClean->add->foreach->treeCleaner->scan->chk->newRound->enter->newRound->filer->newRound->messager->newRound->compiler->newRound->modules->newRound->types->newRound->annotate->newRound->elementUtils->newRound->foundError->foreach->symtab->getAllClasses->if->break->if->foreach->symtab->getAllClasses->if->cs->reset->if->getEnclosingType->new->ClassType->if->cs->isCompleted
JavacProcessingEnvironment#doProcessing(List, List, Iterable, Log.DeferredDiagnosticHandler)::: javac processing environment do processing:::treesToClean->Collections->new->IdentityHashMap<JCCompilationUnit,Boolean>->newSetFromMap->foreach->enter->getEnvs->treesToClean->add->specifiedPackages->new->LinkedHashSet<>->foreach->specifiedPackages->add->Collections->unmodifiableSet->round->new->Round->errorStatus->moreToDo->do->round->run->round->unrecoverableError->moreToDo->round->showDiagnostics->round->filer->getGeneratedSourceFileObjects->new->LinkedHashSet<>->filer->getGeneratedClasses->new->LinkedHashMap<>->next->if->round->unrecoverableError->while->round->run->round->showDiagnostics->filer->warnIfUnclosedFiles->warnIfUnmatchedOptions->if->messager->errorRaised->round->warningCount->round->errorCount->newSourceFiles->filer->getGeneratedSourceFileObjects->new->LinkedHashSet<>->compiler->errorCount->round->finalCompiler->if->newSourceFiles->size->roots->compiler->parseFiles->appendList->compiler->errorCount->this->close->if->compiler->errorCount->compiler->enterTreesIfNeeded->if->taskListener->isEmpty->taskListener->new->TaskEvent->finished->return
JavacProcessingEnvironment#warnIfUnmatchedOptions()::: javac processing environment warn if unmatched options:::if->unmatchedProcessorOptions->isEmpty->log->Warnings->unmatchedProcessorOptions->toString->ProcUnmatchedProcessorOptions->warning
JavacProcessingEnvironment#close():::Free resources related to annotation processing.:::filer->close->if->discoveredProcs->close
JavacProcessingEnvironment#getTopLevelClasses(List)::: javac processing environment get top level classes:::classes->List->nil->foreach->foreach->if->node->hasTag->sym->Assert->checkNonNull->classes->prepend->return->classes->reverse
JavacProcessingEnvironment#getTopLevelClassesFromClasses(List)::: javac processing environment get top level classes from classes:::classes->List->nil->foreach->if->isPkgInfo->classes->prepend->return->classes->reverse
JavacProcessingEnvironment#getPackageInfoFiles(List)::: javac processing environment get package info files:::packages->List->nil->foreach->if->isPkgInfo->packages->prepend->return->packages->reverse
JavacProcessingEnvironment#getPackageInfoFilesFromClasses(List)::: javac processing environment get package info files from classes:::packages->List->nil->foreach->if->isPkgInfo->packages->prepend->return->packages->reverse
JavacProcessingEnvironment#getModuleInfoFiles(List)::: javac processing environment get module info files:::modules->List->nil->foreach->if->isModuleInfo->nonEmpty->hasTag->modules->prepend->return->modules->reverse
JavacProcessingEnvironment#join(List, List)::: javac processing environment join:::return->list1->appendList
JavacProcessingEnvironment#isPkgInfo(JavaFileObject, JavaFileObject.Kind)::: javac processing environment is pkg info:::return->fo->isNameCompatible
JavacProcessingEnvironment#isPkgInfo(ClassSymbol)::: javac processing environment is pkg info:::return->isPkgInfo->sym->packge
JavacProcessingEnvironment#isModuleInfo(JavaFileObject, JavaFileObject.Kind)::: javac processing environment is module info:::return->fo->isNameCompatible
JavacProcessingEnvironment#needClassLoader(String, Iterable)::: javac processing environment need class loader:::if->return->urls->new->URLArr->foreach->try->pathElement->toUri->toURL->if->ServiceProxy->hasService->return->catch->throw->new->AssertionError->log->Errors->e->getLocalizedMessage->ProcBadConfigFile->error->return->finally->return
JavacProcessingEnvironment.ImplicitCompleter#complete(Symbol)::: implicit completer complete:::compiler->readSourceFile
JavacProcessingEnvironment#moreToDo()::: javac processing environment more to do:::return->filer->newFiles
JavacProcessingEnvironment#getOptions():::  Command line options suitable for presenting to annotation processors:::return
JavacProcessingEnvironment#getMessager()::: javac processing environment get messager:::return
JavacProcessingEnvironment#getFiler()::: javac processing environment get filer:::return
JavacProcessingEnvironment#getElementUtils()::: javac processing environment get element utils:::return
JavacProcessingEnvironment#getTypeUtils()::: javac processing environment get type utils:::return
JavacProcessingEnvironment#getSourceVersion()::: javac processing environment get source version:::return->Source->toSourceVersion
JavacProcessingEnvironment#getLocale()::: javac processing environment get locale:::return->messages->getCurrentLocale
JavacProcessingEnvironment#getSpecifiedPackages()::: javac processing environment get specified packages:::return
JavacProcessingEnvironment#importStringToPattern(boolean, String, Processor, Log):::Convert import-style string for supported annotations into a regex matching that string:::module->pkg->slash->s->indexOf->if->if->s->equals->return->MatchingUtils->validImportStringToPattern->else->Pattern->s->substring->quote->s->substring->if->MatchingUtils->isValidImportString->return->Pattern->MatchingUtils->validImportStringToPatternString->compile->else->log->Warnings->p->getClass->getName->ProcMalformedSupportedString->warning->return
JavacProcessingEnvironment#getContext():::For internal use only:::return
JavacProcessingEnvironment#getProcessorClassLoader():::For internal use only:::return
JavacProcessingEnvironment#toString()::: javac processing environment to string:::return
JavacProcessingEnvironment#isValidOptionName(String)::: javac processing environment is valid option name:::foreach->optionName->split->if->SourceVersion->isIdentifier->return->return
JavacRoundEnvironment#toString()::: javac round environment to string:::return->String->format
JavacRoundEnvironment#processingOver()::: javac round environment processing over:::return
JavacRoundEnvironment#errorRaised():::Returns true if an error was raised in the prior round of processing; returns false otherwise.:::return
JavacRoundEnvironment#getRootElements():::Returns the type elements specified by the prior round.:::return
JavacRoundEnvironment#getElementsAnnotatedWith(TypeElement):::Returns the elements annotated with the given annotation type:::throwIfNotAnnotation->result->Collections->emptySet->scanner->new->AnnotationSetScanner->foreach->scanner->scan->return
JavacRoundEnvironment#getElementsAnnotatedWithAny(TypeElement...)::: javac round environment get elements annotated with any:::annotationSet->new->LinkedHashSet<>->foreach->throwIfNotAnnotation->annotationSet->add->result->Collections->emptySet->scanner->new->AnnotationSetMultiScanner->foreach->scanner->scan->return
JavacRoundEnvironment.AnnotationSetScanner#scan(Element, TypeElement)::: annotation set scanner scan:::foreach->eltUtils->getAllAnnotationMirrors->if->annotation->mirrorAsElement->equals->annotatedElements->add->break->e->accept->return
JavacRoundEnvironment.AnnotationSetMultiScanner#scan(Element, Set)::: annotation set multi scanner scan:::foreach->eltUtils->getAllAnnotationMirrors->if->annotations->mirrorAsElement->contains->annotatedElements->add->break->e->accept->return
JavacRoundEnvironment.ElementScanningIncludingTypeParameters#visitType(TypeElement, P)::: element scanning including type parameters visit type:::e->getTypeParameters->scan->return->super->visitType
JavacRoundEnvironment.ElementScanningIncludingTypeParameters#visitExecutable(ExecutableElement, P)::: element scanning including type parameters visit executable:::e->getTypeParameters->scan->return->super->visitExecutable
JavacRoundEnvironment#getElementsAnnotatedWith(Class)::: javac round environment get elements annotated with:::throwIfNotAnnotation->name->a->getCanonicalName->if->return->Collections->emptySet->else->annotationType->eltUtils->getTypeElement->if->return->Collections->emptySet->else->return->getElementsAnnotatedWith
JavacRoundEnvironment#getElementsAnnotatedWithAny(Set>)::: javac round environment get elements annotated with any:::annotationsAsElements->annotations->size->new->ArrayList<>->foreach->throwIfNotAnnotation->name->annotation->getCanonicalName->if->continue->annotationsAsElements->eltUtils->getTypeElement->add->return->annotationsAsElements->new->TypeElementArr->toArray->getElementsAnnotatedWithAny
JavacRoundEnvironment#mirrorAsElement(AnnotationMirror)::: javac round environment mirror as element:::return->annotationMirror->getAnnotationType->asElement
JavacRoundEnvironment#throwIfNotAnnotation(Class)::: javac round environment throw if not annotation:::if->a->isAnnotation->throw->new->IllegalArgumentException
JavacRoundEnvironment#throwIfNotAnnotation(TypeElement)::: javac round environment throw if not annotation:::if->a->getKind->throw->new->IllegalArgumentException
PrintingProcessor#setWriter(Writer)::: printing processor set writer:::new->PrintWriter
PrintingProcessor#process(Set, RoundEnvironment)::: printing processor process:::foreach->renv->getRootElements->print->return
PrintingProcessor#print(Element)::: printing processor print:::processingEnv->getElementUtils->new->PrintingElementVisitor->visit->flush
PrintingProcessor.PrintingElementVisitor#defaultAction(Element, Boolean)::: printing element visitor default action:::if->writer->println->printDocComment->printModifiers->return
PrintingProcessor.PrintingElementVisitor#visitExecutable(ExecutableElement, Boolean)::: printing element visitor visit executable:::kind->e->getKind->if->enclosing->e->getEnclosingElement->if->new->SimpleElementVisitor7<NestingKind,Void>->visit->return->defaultAction->printFormalTypeParameters->switch->writer->e->getEnclosingElement->getSimpleName->print->break->writer->e->getReturnType->toString->print->writer->print->writer->e->getSimpleName->toString->print->break->writer->print->printParameters->writer->print->defaultValue->e->getDefaultValue->if->writer->print->printThrows->writer->println->return
PrintingProcessor.PrintingElementVisitor#visitType(TypeElement, Boolean)::: printing element visitor visit type:::kind->e->getKind->nestingKind->e->getNestingKind->if->writer->print->interfaces->e->getInterfaces->if->interfaces->isEmpty->writer->interfaces->get->print->else->writer->e->getSuperclass->print->writer->print->if->interfaces->isEmpty->constructors->ElementFilter->e->getEnclosedElements->constructorsIn->if->constructors->isEmpty->constructors->get->printParameters->writer->print->else->if->pkg->elementUtils->getPackageOf->if->pkg->isUnnamed->writer->pkg->getQualifiedName->print->defaultAction->switch->writer->print->break->writer->StringUtils->kind->toString->toLowerCase->print->writer->print->writer->e->getSimpleName->print->printFormalTypeParameters->if->supertype->e->getSuperclass->if->supertype->getKind->e2->asElement->if->e2->getSuperclass->getKind->writer->print->printInterfaces->writer->println->if->enclosedElements->e->getEnclosedElements->new->ArrayList<>->enumConstants->new->ArrayList<>->foreach->if->element->getKind->enumConstants->add->if->enumConstants->isEmpty->i->for->enumConstants->size->this->enumConstants->get->visit->writer->println->enclosedElements->removeAll->foreach->this->visit->else->foreach->e->getEnclosedElements->this->visit->indent->writer->println->return
PrintingProcessor.PrintingElementVisitor#visitVariable(VariableElement, Boolean)::: printing element visitor visit variable:::kind->e->getKind->defaultAction->if->writer->e->getSimpleName->print->else->writer->e->asType->toString->e->getSimpleName->print->constantValue->e->getConstantValue->if->writer->print->writer->elementUtils->getConstantExpression->print->writer->println->return
PrintingProcessor.PrintingElementVisitor#visitTypeParameter(TypeParameterElement, Boolean)::: printing element visitor visit type parameter:::writer->e->getSimpleName->print->return
PrintingProcessor.PrintingElementVisitor#visitPackage(PackageElement, Boolean)::: printing element visitor visit package:::defaultAction->if->e->isUnnamed->writer->e->getQualifiedName->println->else->writer->println->return
PrintingProcessor.PrintingElementVisitor#visitModule(ModuleElement, Boolean)::: printing element visitor visit module:::defaultAction->if->e->isUnnamed->if->e->isOpen->writer->print->writer->e->getQualifiedName->println->foreach->e->getDirectives->printDirective->writer->println->else->writer->println->return
PrintingProcessor.PrintingElementVisitor#printDirective(ModuleElement.Directive)::: printing element visitor print directive:::indent->new->PrintDirective->visit->writer->println
PrintingProcessor.PrintingElementVisitor.PrintDirective#visitExports(ExportsDirective, Void)::: print directive visit exports:::writer->print->writer->d->getPackage->getQualifiedName->print->d->getTargetModules->printModuleList->return
PrintingProcessor.PrintingElementVisitor.PrintDirective#visitOpens(OpensDirective, Void)::: print directive visit opens:::writer->print->writer->d->getPackage->getQualifiedName->print->d->getTargetModules->printModuleList->return
PrintingProcessor.PrintingElementVisitor.PrintDirective#visitProvides(ProvidesDirective, Void)::: print directive visit provides:::writer->print->writer->d->getService->getQualifiedName->print->writer->print->d->getImplementations->printNameableList->return
PrintingProcessor.PrintingElementVisitor.PrintDirective#visitRequires(RequiresDirective, Void)::: print directive visit requires:::writer->print->if->d->isStatic->writer->print->if->d->isTransitive->writer->print->writer->d->getDependency->getQualifiedName->print->return
PrintingProcessor.PrintingElementVisitor.PrintDirective#visitUses(UsesDirective, Void)::: print directive visit uses:::writer->print->writer->d->getService->getQualifiedName->print->return
PrintingProcessor.PrintingElementVisitor.PrintDirective#printModuleList(List)::: print directive print module list:::if->writer->print->printNameableList
PrintingProcessor.PrintingElementVisitor.PrintDirective#printNameableList(List)::: print directive print nameable list:::writer->nameables->stream->QualifiedNameable->getQualifiedName->map->Collectors->joining->collect->print
PrintingProcessor.PrintingElementVisitor#flush()::: printing element visitor flush:::writer->flush
PrintingProcessor.PrintingElementVisitor#printDocComment(Element)::: printing element visitor print doc comment:::docComment->elementUtils->getDocComment->if->st->new->StringTokenizer->indent->writer->println->while->st->hasMoreTokens->indent->writer->print->writer->st->nextToken->println->indent->writer->println
PrintingProcessor.PrintingElementVisitor#printModifiers(Element)::: printing element visitor print modifiers:::kind->e->getKind->if->printAnnotationsInline->else->printAnnotations->indent->if->return->modifiers->new->LinkedHashSet<>->modifiers->e->getModifiers->addAll->switch->modifiers->remove->break->modifiers->remove->modifiers->remove->break->enclosingElement->e->getEnclosingElement->if->enclosingElement->getKind->isInterface->modifiers->remove->modifiers->remove->modifiers->remove->modifiers->remove->break->foreach->writer->m->toString->print
PrintingProcessor.PrintingElementVisitor#printFormalTypeParameters(Parameterizable, boolean)::: printing element visitor print formal type parameters:::typeParams->e->getTypeParameters->if->typeParams->size->writer->print->first->foreach->if->writer->print->printAnnotationsInline->writer->tpe->toString->print->writer->print->if->writer->print
PrintingProcessor.PrintingElementVisitor#printAnnotationsInline(Element)::: printing element visitor print annotations inline:::annots->e->getAnnotationMirrors->foreach->writer->print->writer->print
PrintingProcessor.PrintingElementVisitor#printAnnotations(Element)::: printing element visitor print annotations:::annots->e->getAnnotationMirrors->foreach->indent->writer->println
PrintingProcessor.PrintingElementVisitor#printParameters(ExecutableElement)::: printing element visitor print parameters:::parameters->e->getParameters->size->parameters->size->switch->break->foreach->printModifiers->if->e->isVarArgs->tm->parameter->asType->if->tm->getKind->throw->new->AssertionError->writer->cast->getComponentType->print->writer->print->else->writer->parameter->asType->print->writer->parameter->getSimpleName->print->break->i->foreach->if->if->indent->printModifiers->if->e->isVarArgs->tm->parameter->asType->if->tm->getKind->throw->new->AssertionError->writer->cast->getComponentType->print->writer->print->else->writer->parameter->asType->print->writer->parameter->getSimpleName->print->if->writer->println->if->parameters->size->break
PrintingProcessor.PrintingElementVisitor#printInterfaces(TypeElement)::: printing element visitor print interfaces:::kind->e->getKind->if->interfaces->e->getInterfaces->if->interfaces->size->writer->kind->isClass->print->first->foreach->if->writer->print->writer->print->writer->interf->toString->print
PrintingProcessor.PrintingElementVisitor#printThrows(ExecutableElement)::: printing element visitor print throws:::thrownTypes->e->getThrownTypes->size->thrownTypes->size->if->writer->print->i->foreach->if->writer->print->if->if->indent->writer->print->if->writer->println->if
PrintingProcessor.PrintingElementVisitor#indent()::: printing element visitor indent:::indentation->if->return->maxIndex->while->writer->print->writer->print
ServiceProxy#fail(Class, String)::: service proxy fail:::throw->service->getName->new->ServiceConfigurationError
ServiceProxy#fail(Class, URL, int, String)::: service proxy fail:::fail
ServiceProxy#parse(Class, URL):::Parse the content of the given URL as a provider-configuration file.:::in->r->try->u->openStream->new->InputStreamReader->new->BufferedReader->lc->ln->while->r->readLine->ci->ln->indexOf->if->ln->substring->ln->trim->n->ln->length->if->if->ln->indexOf->ln->indexOf->fail->cp->ln->codePointAt->if->Character->isJavaIdentifierStart->fail->for->i->Character->charCount->Character->charCount->return->catch->return->fail->finally->try->if->r->close->catch->fail->finally->try->if->in->close->catch->fail->finally->return
ServiceProxy#hasService(Class, URL[]):::Return true if a description for at least one service is found in the service configuration files in the given URLs.:::foreach->try->fullName->service->getName->u->new->URL->found->parse->if->return->catch->finally->return

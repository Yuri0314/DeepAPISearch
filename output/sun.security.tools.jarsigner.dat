Main#printCert(boolean, String, Certificate, Date, boolean):::Returns a string about a certificate:  [<tab>] <cert-type> [", " <subject-DN>] [" (" <keystore-entry-alias> ")"] [<validity-period> | <expiry-warning>] [<key-usage-warning>]  Note: no newline character at the end:::certStr->new->StringBuilder->space->rb->getString->x509Cert->if->certStr->append->x509Cert->getType->append->rb->getString->append->x509Cert->getSubjectDN->getName->append->else->certStr->append->c->getType->append->alias->storeHash->get->if->certStr->append->append->if->certStr->append->append->append->if->trustedCerts->contains->certStr->rb->getString->append->else->notAfter->x509Cert->getNotAfter->try->printValidity->if->if->tsaExpireDate->after->else->if->expireDate->after->if->x509Cert->checkValidity->age->if->notAfter->getTime->System->currentTimeMillis->if->else->if->rb->getString->new->MessageFormat->source->certStr->expiringTimeForm->format->append->else->x509Cert->checkValidity->if->if->rb->getString->new->MessageFormat->source->x509Cert->getNotBefore->certStr->validityTimeForm->format->append->catch->if->else->if->rb->getString->new->MessageFormat->source->certStr->expiredTimeForm->format->append->if->if->rb->getString->new->MessageFormat->source->x509Cert->getNotBefore->certStr->notYetTimeForm->format->append->finally->certStr->append->if->bad->new->booleanArr->checkCertUsage->if->x->if->if->if->x->length->if->if->x->length->certStr->append->append->MessageFormat->rb->getString->format->append->return->certStr->toString
Main#checkCertUsage(X509Certificate, boolean[]):::Check if userCert is designed to be a code signer:::if->keyUsage->userCert->getKeyUsage->if->Arrays->copyOf->if->if->try->xKeyUsage->userCert->getExtendedKeyUsage->if->if->xKeyUsage->contains->xKeyUsage->contains->if->catch->finally->try->netscapeEx->userCert->getExtensionValue->if->in->new->DerInputStream->encoded->in->getOctetString->new->DerValue->getUnalignedBitString->toByteArray->extn->new->NetscapeCertTypeExtension->val->extn->get->if->if->catch->finally
Main#validateCertChain(String, List, Timestamp):::Validates a cert chain.:::try->Validator->getInstance->certs->certs->size->new->X509CertificateArr->toArray->validate->catch->if->e->printStackTrace->if->variant->equals->if->e->getCause->e->getCause->e->getCause->t->e->getCause->if->return->if->variant->equals->if->e->getCause->e->getCause->e->getCause->t->e->getCause->if->return->if->ve->if->ve->getErrorType->return->throw->finally
Resources#getContents():::Returns the contents of this ResourceBundle:::return
Resources_ja#getContents():::Returns the contents of this ResourceBundle:::return
Resources_zh_CN#getContents():::Returns the contents of this ResourceBundle:::return
TimestampedSigner#generateSignedData(ContentSignerParameters, boolean, boolean):::Generates a PKCS #7 signed data message that includes a signature timestamp:::if->throw->new->NullPointerException->signatureAlgorithm->params->getSignatureAlgorithm->signerChain->params->getSignerCertificateChain->signature->params->getSignature->content->params->getContent->tsaURI->if->params->getTimestampingAuthority->if->params->getTimestampingAuthorityCertificate->getTimestampingURI->if->throw->new->CertificateException->return->PKCS7->params->getSignatureAlgorithm->params->getTSAPolicyID->params->getTSADigestAlg->generateSignedData
TimestampedSigner#getTimestampingURI(X509Certificate):::Examine the certificate for a Subject Information Access extension (RFC 5280):::if->return->try->extensionValue->tsaCertificate->getExtensionValue->if->return->der->new->DerInputStream->der->getOctetString->new->DerInputStream->derValue->der->getSequence->description->location->uri->for->i->catch->finally->return

CountUppercaseParallelTest#count(CharSequence)::: count uppercase parallel test count:::return->sentence->chars->parallel->Character->isUpperCase->filter->count
CountUppercaseParallelTest#testCount()::: count uppercase parallel test test count:::sequence->for->i->test
EAMergingTest#testSimpleMerge()::: merging test test simple merge:::testEscapeAnalysis->returnNodes->size->assertDeepEquals->returnNodes->get->result->assertTrue->phi->returnNodes->get->result->phi->valueAt->assertTrue->phi->valueAt->assertTrue
EAMergingTest#simpleMergeSnippet(boolean, int, int)::: merging test simple merge snippet:::obj->if->new->TestClassInt->notInlineable->else->new->TestClassInt->notInlineable->return
EarlyReadEliminationTest#testSimpleSnippet(TestObject)::: early read elimination test test simple snippet:::return
EarlyReadEliminationTest#testSimple()::: early read elimination test test simple:::result->getReturn->result->result->graph->getNodes->filter->isEmpty->assertTrue->result->isConstant->assertTrue->result->asJavaConstant->asInt->assertDeepEquals->getReturn->result->result->graph->getNodes->filter->isEmpty->assertTrue->result->isConstant->assertTrue->result->asJavaConstant->asInt->assertDeepEquals
EarlyReadEliminationTest#testSimpleConflictSnippet(TestObject, TestObject)::: early read elimination test test simple conflict snippet:::return
EarlyReadEliminationTest#testSimpleConflict()::: early read elimination test test simple conflict:::result->getReturn->result->result->isConstant->assertFalse->assertTrue
EarlyReadEliminationTest#testParamSnippet(TestObject, int)::: early read elimination test test param snippet:::return
EarlyReadEliminationTest#testParam()::: early read elimination test test param:::result->getReturn->result->result->graph->getNodes->filter->isEmpty->assertTrue->result->graph->getParameter->assertDeepEquals
EarlyReadEliminationTest#testMaterializedSnippet(int)::: early read elimination test test materialized snippet:::obj->new->TestObject->return
EarlyReadEliminationTest#testMaterialized()::: early read elimination test test materialized:::result->getReturn->result->result->graph->getNodes->filter->isEmpty->assertTrue->result->graph->getParameter->assertDeepEquals
EarlyReadEliminationTest#testSimpleLoopSnippet(TestObject, int, int)::: early read elimination test test simple loop snippet:::for->i->return
EarlyReadEliminationTest#testSimpleLoop()::: early read elimination test test simple loop:::result->getReturn->result->result->graph->getNodes->filter->isEmpty->assertTrue->result->graph->getParameter->assertDeepEquals->getReturn->result->result->graph->getNodes->filter->isEmpty->assertTrue->result->graph->getParameter->assertDeepEquals
EarlyReadEliminationTest#testBadLoopSnippet(TestObject, TestObject, int, int)::: early read elimination test test bad loop snippet:::for->i->return
EarlyReadEliminationTest#testBadLoop()::: early read elimination test test bad loop:::result->getReturn->result->result->graph->getNodes->filter->count->assertDeepEquals->assertTrue->value->assertTrue
EarlyReadEliminationTest#testBadLoop2Snippet(TestObject, TestObject, int, int)::: early read elimination test test bad loop2 snippet:::for->i->return
EarlyReadEliminationTest#testBadLoop2()::: early read elimination test test bad loop2:::result->getReturn->result->result->graph->getNodes->filter->count->assertDeepEquals->assertTrue
EarlyReadEliminationTest#testPhiSnippet(TestObject, int)::: early read elimination test test phi snippet:::if->else->return
EarlyReadEliminationTest#testPhi()::: early read elimination test test phi:::graph->processMethod->graph->getNodes->filter->isEmpty->assertTrue->returnNodes->graph->getNodes->snapshot->returnNodes->size->assertDeepEquals->returnNodes->get->predecessor->assertTrue->returnNodes->get->predecessor->assertTrue->returnNodes->get->result->isConstant->assertTrue->returnNodes->get->result->isConstant->assertTrue
EarlyReadEliminationTest#testSimpleStoreSnippet(TestObject, int)::: early read elimination test test simple store snippet:::
EarlyReadEliminationTest#testSimpleStore()::: early read elimination test test simple store:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
EarlyReadEliminationTest#testValueProxySnippet(boolean, TestObject)::: early read elimination test test value proxy snippet:::sum->if->else->p->return
EarlyReadEliminationTest#testValueProxy()::: early read elimination test test value proxy:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
EarlyReadEliminationTest#getReturn(String, boolean)::: early read elimination test get return:::graph->processMethod->graph->getNodes->count->assertDeepEquals->return->graph->getNodes->first
EarlyReadEliminationTest#processMethod(String, boolean)::: early read elimination test process method:::graph->getResolvedJavaMethod->parseEager->context->getDefaultHighTierContext->createInliningPhase->apply->if->new->CanonicalizerPhase->new->LoweringPhase->apply->new->CanonicalizerPhase->new->EarlyReadEliminationPhase->apply->return
EATestBase.TestClassInt#equals(Object)::: test class int equals:::other->return
EATestBase.TestClassInt#toString()::: test class int to string:::return
EATestBase.TestClassInt#hashCode()::: test class int hash code:::return
EATestBase.TestClassObject#equals(Object)::: test class object equals:::other->return
EATestBase.TestClassObject#toString()::: test class object to string:::return
EATestBase.TestClassObject#hashCode()::: test class object hash code:::return->x->hashCode->y->hashCode
EATestBase#notInlineable()::: test base not inlineable:::
EATestBase#testEscapeAnalysis(String, JavaConstant, boolean):::Runs Escape Analysis on the given snippet and makes sure that no allocations remain in the graph.:::testEscapeAnalysis
EATestBase#testEscapeAnalysis(String, JavaConstant, boolean, int)::: test base test escape analysis:::prepareGraph->if->foreach->Assert->returnNode->result->toString->returnNode->result->isConstant->assertTrue->Assert->returnNode->result->asConstant->assertEquals->newInstanceCount->getAllocationCount->Assert->assertEquals->if->Assert->graph->getNodes->filter->isEmpty->assertTrue
EATestBase#getAllocationCount()::: test base get allocation count:::return->graph->getNodes->isA->or->or->filter->count
EATestBase#prepareGraph(String, boolean)::: test base prepare graph:::method->getResolvedJavaMethod->debug->getDebugContext->try->s->debug->getClass->getCodeCache->scope->parseEager->getDefaultHighTierContext->createInliningPhase->apply->new->DeadCodeEliminationPhase->apply->canonicalizeGraph->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->postEACanonicalizeGraph->graph->getNodes->snapshot->catch->throw->debug->handle->finally
EATestBase#postEACanonicalizeGraph()::: test base post canonicalize graph:::
EATestBase#canonicalizeGraph()::: test base canonicalize graph:::new->CanonicalizerPhase->apply
EscapeAnalysisTest#test1()::: escape analysis test test1:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#test1Snippet()::: escape analysis test test1 snippet:::x->new->Integer->return->x->intValue
EscapeAnalysisTest#test2()::: escape analysis test test2:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#test2Snippet()::: escape analysis test test2 snippet:::x->new->IntegerArr->return
EscapeAnalysisTest#test3()::: escape analysis test test3:::testEscapeAnalysis
EscapeAnalysisTest#test3Snippet()::: escape analysis test test3 snippet:::x->new->IntegerArr->return
EscapeAnalysisTest#testMonitor()::: escape analysis test test monitor:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testMonitorSnippet()::: escape analysis test test monitor snippet:::x->new->Integer->y->new->Double->z->new->Object->synchronized->synchronized->synchronized->notInlineable->return->x->intValue
EscapeAnalysisTest#testMonitor2()::: escape analysis test test monitor2:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testMonitor2Snippet():::This test case differs from the last one in that it requires inlining within a synchronized region.:::x->new->Integer->y->new->Double->z->new->Object->synchronized->synchronized->synchronized->notInlineable->return->x->intValue
EscapeAnalysisTest#testMerge()::: escape analysis test test merge:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testMerge1Snippet(int)::: escape analysis test test merge1 snippet:::obj->new->TestClassInt->if->else->if->return->return
EscapeAnalysisTest#testSimpleLoop()::: escape analysis test test simple loop:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testSimpleLoopSnippet(int)::: escape analysis test test simple loop snippet:::obj->new->TestClassInt->for->i->return
EscapeAnalysisTest#testModifyingLoop()::: escape analysis test test modifying loop:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testModifyingLoopSnippet(int)::: escape analysis test test modifying loop snippet:::obj->new->TestClassInt->for->i->return
EscapeAnalysisTest#testMergeAllocationsInt()::: escape analysis test test merge allocations int:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testMergeAllocationsIntSnippet(int)::: escape analysis test test merge allocations int snippet:::obj->if->new->TestClassInt->notInlineable->else->new->TestClassInt->notInlineable->return
EscapeAnalysisTest#testMergeAllocationsInt2()::: escape analysis test test merge allocations int2:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testMergeAllocationsInt2Snippet(int)::: escape analysis test test merge allocations int2 snippet:::obj->new->TestClassInt->if->notInlineable->else->new->TestClassInt->notInlineable->return
EscapeAnalysisTest#testMergeAllocationsInt3()::: escape analysis test test merge allocations int3:::testMergeAllocationsInt3Snippet->assertTrue->testMergeAllocationsInt3Snippet->assertFalse->prepareGraph->graph->getNodes->filter->first->result->isConstant->assertFalse
EscapeAnalysisTest#testMergeAllocationsInt3Snippet(boolean)::: escape analysis test test merge allocations int3 snippet:::phi1->phi2->if->new->TestClassObject->new->TestClassObject->new->TestClassInt->else->new->TestClassInt->new->TestClassInt->return
EscapeAnalysisTest#testMergeAllocationsObj()::: escape analysis test test merge allocations obj:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testMergeAllocationsObjSnippet(int)::: escape analysis test test merge allocations obj snippet:::obj->one->two->three->if->new->TestClassObject->notInlineable->else->new->TestClassObject->notInlineable->return->intValue
EscapeAnalysisTest#testMergeAllocationsObjCirc()::: escape analysis test test merge allocations obj circ:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testMergeAllocationsObjCircSnippet(int)::: escape analysis test test merge allocations obj circ snippet:::obj->one->two->three->if->new->TestClassObject->notInlineable->else->new->TestClassObject->notInlineable->return->intValue
EscapeAnalysisTest.MyException#fillInStackTrace()::: my exception fill in stack trace:::return
EscapeAnalysisTest#testMergeAllocationsException()::: escape analysis test test merge allocations exception:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testMergeAllocationsExceptionSnippet(int)::: escape analysis test test merge allocations exception snippet:::obj->one->if->new->MyException->notInlineable->else->new->MyException->notInlineable->return
EscapeAnalysisTest#testChangeHandling():::Tests that a graph with allocations that does not make progress during PEA will not be changed.:::prepareGraph->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->count->assertEquals->nodes->graph->getNodes->snapshot->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->Assert->nodes->size->graph->getNodeCount->assertEquals->foreach->Assert->node->isAlive->assertTrue
EscapeAnalysisTest#testChangeHandlingSnippet(int)::: escape analysis test test change handling snippet:::obj->one->new->MyException->if->notInlineable->else->new->Integer->notInlineable->return
EscapeAnalysisTest#testRemovalSpecialCase():::Test the case where allocations before and during a loop that have no usages other than their phi need to be recognized as an important change:::prepareGraph->Assert->graph->getNodes->filter->count->assertEquals->graph->graph->getNodes->filter->first->graph->ConstantNode->forInt->unique->replaceFixedWithFloating->new->CanonicalizerPhase->apply->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->Assert->graph->getNodes->filter->count->assertEquals
EscapeAnalysisTest#testRemovalSpecialCaseSnippet(int)::: escape analysis test test removal special case snippet:::phi->new->Object->for->i->return
EscapeAnalysisTest#testCheckCast()::: escape analysis test test check cast:::getSnippetReflection->forObject->testEscapeAnalysis
EscapeAnalysisTest#testCheckCastSnippet()::: escape analysis test test check cast snippet:::obj->new->TestClassObject->obj2->new->TestClassObject->return
EscapeAnalysisTest#testInstanceOf()::: escape analysis test test instance of:::JavaConstant->forInt->testEscapeAnalysis
EscapeAnalysisTest#testInstanceOfSnippet()::: escape analysis test test instance of snippet:::obj->new->TestClassObject->obj2->new->TestClassObject->return
EscapeAnalysisTest#testNewNodeSnippet()::: escape analysis test test new node snippet:::new->ValueAnchorNode
EscapeAnalysisTest#testNewNode():::This test makes sure that the allocation of a Node can be removed:::Assume->assumeFalse->testEscapeAnalysis
EscapeAnalysisTest#testFullyUnrolledLoopSnippet()::: escape analysis test test fully unrolled loop snippet:::obj->for->i->return
EscapeAnalysisTest#testFullyUnrolledLoop()::: escape analysis test test fully unrolled loop:::prepareGraph->new->CanonicalizerPhase->new->DefaultLoopPolicies->new->LoopFullUnrollPhase->apply->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->Assert->returnNodes->size->assertEquals->Assert->returnNodes->get->result->assertTrue->commit->returnNodes->get->result->getCommit->Assert->commit->getValues->size->assertEquals->Assert->commit->getVirtualObjects->size->assertEquals->Assert->commit->getVirtualObjects->get->commit->getValues->get->assertTrue
EscapeAnalysisTest#inlinedPart(TestClassObject)::: escape analysis test inlined part:::ret->new->TestClassObject->return
EscapeAnalysisTest#testPeeledLoopSnippet()::: escape analysis test test peeled loop snippet:::obj->i->do->inlinedPart->while->return
EscapeAnalysisTest#testPeeledLoop()::: escape analysis test test peeled loop:::prepareGraph->new->DefaultLoopPolicies->new->LoopPeelingPhase->getDefaultHighTierContext->apply->graph->getOptions->new->SchedulePhase->apply
EscapeAnalysisTest#testDeoptMonitorSnippetInner(Object, Object, int)::: escape analysis test test deopt monitor snippet inner:::if->n->n->toString
EscapeAnalysisTest#testDeoptMonitorSnippet(Object, int)::: escape analysis test test deopt monitor snippet:::o->new->TestClassObject->o2->new->TestClassObject->synchronized->testDeoptMonitorSnippetInner
EscapeAnalysisTest#testDeoptMonitor()::: escape analysis test test deopt monitor:::new->Object->test
EscapeAnalysisTest#testInterfaceArrayAssignment()::: escape analysis test test interface array assignment:::prepareGraph->returns->graph->getNodes->filter->returns->count->assertTrue->returns->first->result->isConstant->assertFalse
EscapeAnalysisTest#testInterfaceArrayAssignmentSnippet()::: escape analysis test test interface array assignment snippet:::array->new->TestInterfaceArr->new->Object->return
EscapeAnalysisTest.Complex#mul(Complex)::: complex mul:::return->new->Complex
EscapeAnalysisTest.Complex#add(Complex)::: complex add:::return->new->Complex
EscapeAnalysisTest.Complex#equals(Object)::: complex equals:::if->getClass->obj->getClass->return->other->return->Double->doubleToLongBits->Double->doubleToLongBits->Double->doubleToLongBits->Double->doubleToLongBits
EscapeAnalysisTest.Complex#hashCode()::: complex hash code:::return->Double->hashCode->Double->hashCode
EscapeAnalysisTest#testComplexMultiplySnippet1(Complex[][])::: escape analysis test test complex multiply snippet1:::size->result->new->ComplexArrs->for->i->return
EscapeAnalysisTest#testComplexMultiply1()::: escape analysis test test complex multiply1:::test->testEscapeAnalysis
EscapeAnalysisTest#testComplexMultiplySnippet2(Complex[][])::: escape analysis test test complex multiply snippet2:::size->result->new->ComplexArrs->for->i->return
EscapeAnalysisTest#testComplexMultiply2()::: escape analysis test test complex multiply2:::test->testEscapeAnalysis
EscapeAnalysisTest#testComplexAddSnippet(Complex[][])::: escape analysis test test complex add snippet:::size->s->new->Complex->for->i->return
EscapeAnalysisTest#testComplexAdd()::: escape analysis test test complex add:::test->testEscapeAnalysis
EscapeAnalysisTest#testComplexRowSumSnippet(Complex[][])::: escape analysis test test complex row sum snippet:::size->result->new->ComplexArr->for->i->return
EscapeAnalysisTest#testComplexRowSum()::: escape analysis test test complex row sum:::test->testEscapeAnalysis
NestedBoxingTest#testSimpleMerge()::: nested boxing test test simple merge:::testEscapeAnalysis
NestedBoxingTest#testSnippet(int)::: nested boxing test test snippet:::cur->prev->for->i->return
PartialEscapeAnalysisIterationTest#canonicalizeGraph()::: partial escape analysis iteration test canonicalize graph:::super->canonicalizeGraph->graph->getNodes->filter->snapshot
PartialEscapeAnalysisIterationTest#moveIntoBranchBox(int)::: partial escape analysis iteration test move into branch box:::box->if->new->WeakReference<>->return
PartialEscapeAnalysisIterationTest#moveIntoBranch(int)::: partial escape analysis iteration test move into branch:::box->new->AllocatedObject->if->new->WeakReference<>->return
PartialEscapeAnalysisIterationTest#testJMHBlackholePattern()::: partial escape analysis iteration test test blackhole pattern:::prepareGraph->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->first->next->assertTrue->prepareGraph->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->first->next->assertTrue
PartialEscapeAnalysisIterationTest#noLoopIterationBox(int)::: partial escape analysis iteration test no loop iteration box:::box->for->i->return
PartialEscapeAnalysisIterationTest#noLoopIteration(int)::: partial escape analysis iteration test no loop iteration:::box->new->AllocatedObject->for->i->return
PartialEscapeAnalysisIterationTest#noLoopIterationEmpty(int)::: partial escape analysis iteration test no loop iteration empty:::box->new->AllocatedObject->for->i->return
PartialEscapeAnalysisIterationTest#testNoLoopIteration()::: partial escape analysis iteration test test no loop iteration:::prepareGraph->Assert->boxNodes->size->assertEquals->Assert->boxNodes->get->isAlive->assertTrue->foreach->new->StringArr->prepareGraph->allocations->graph->getNodes->filter->snapshot->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->Assert->allocations->size->assertEquals->Assert->allocations->get->isAlive->assertTrue
PartialEscapeAnalysisTest#test1()::: partial escape analysis test test1:::testPartialEscapeAnalysis
PartialEscapeAnalysisTest#test1Snippet(int, int, Object, Object)::: partial escape analysis test test1 snippet:::obj->new->TestObject2->if->if->return->else->return->else->return
PartialEscapeAnalysisTest#test2()::: partial escape analysis test test2:::testPartialEscapeAnalysis
PartialEscapeAnalysisTest#test2Snippet(int, Object, Object, Object)::: partial escape analysis test test2 snippet:::obj->new->TestObject2->new->TestObject2->if->return->else->return
PartialEscapeAnalysisTest#test3()::: partial escape analysis test test3:::testPartialEscapeAnalysis
PartialEscapeAnalysisTest#test3Snippet(int)::: partial escape analysis test test3 snippet:::if->obj->new->TestObject->new->Integer->intValue->return->else->return
PartialEscapeAnalysisTest#testArrayCopy()::: partial escape analysis test test array copy:::testPartialEscapeAnalysis
PartialEscapeAnalysisTest#testArrayCopySnippet(int)::: partial escape analysis test test array copy snippet:::tmp->new->ObjectArr->tmp2->new->ObjectArr->System->arraycopy->return
PartialEscapeAnalysisTest#testPrimitiveArraycopy()::: partial escape analysis test test primitive arraycopy:::testPartialEscapeAnalysis
PartialEscapeAnalysisTest#testPrimitiveArraycopySnippet(int)::: partial escape analysis test test primitive arraycopy snippet:::tmp->new->charArr->tmp2->new->charArr->System->arraycopy->return
PartialEscapeAnalysisTest#testCache()::: partial escape analysis test test cache:::testPartialEscapeAnalysis
PartialEscapeAnalysisTest.CacheKey#hashCode()::: cache key hash code:::return->ref->hashCode
PartialEscapeAnalysisTest.CacheKey#equals(CacheKey)::: cache key equals:::return
PartialEscapeAnalysisTest#createValue(CacheKey)::: partial escape analysis test create value:::
PartialEscapeAnalysisTest#testCacheSnippet(int, Object)::: partial escape analysis test test cache snippet:::key->new->CacheKey->if->key->equals->createValue->return
PartialEscapeAnalysisTest#testReference1Snippet(Object)::: partial escape analysis test test reference1 snippet:::softReference->new->SoftReference<>->if->softReference->get->hashCode->return->else->return
PartialEscapeAnalysisTest#testReference1()::: partial escape analysis test test reference1:::prepareGraph->graph->getNodes->filter->count->assertDeepEquals
PartialEscapeAnalysisTest#testCanonicalizeSnippet(int)::: partial escape analysis test test canonicalize snippet:::key->new->CacheKey->key2->if->new->CacheKey->else->return
PartialEscapeAnalysisTest#testCanonicalize()::: partial escape analysis test test canonicalize:::prepareGraph->graph->getNodes->filter->count->assertTrue->graph->getNodes->filter->first->result->graph->getParameter->assertTrue
PartialEscapeAnalysisTest#testBoxLoopSnippet(int)::: partial escape analysis test test box loop snippet:::sum->for->i->return
PartialEscapeAnalysisTest#testBoxLoop()::: partial escape analysis test test box loop:::testPartialEscapeAnalysis
PartialEscapeAnalysisTest#deoptWithVirtualObjectsSnippet()::: partial escape analysis test deopt with virtual objects snippet:::a->new->A->if->GraalDirectives->deoptimize->return
PartialEscapeAnalysisTest#testDeoptWithVirtualObjects():::Tests deoptimizing with virtual objects in debug info.:::assertFalse->test->assertTrue
PartialEscapeAnalysisTest#testPartialEscapeAnalysis(String, double, int, Class...)::: partial escape analysis test test partial escape analysis:::prepareGraph->foreach->graph->getNodes->merge->setStateAfter->new->DeadCodeEliminationPhase->apply->new->CanonicalizerPhase->apply->try->Assert->graph->getNodes->filter->isEmpty->assertTrue->Assert->graph->getNodes->filter->isEmpty->assertTrue->cfg->ControlFlowGraph->compute->frequencySum->materializeCount->foreach->graph->getNodes->filter->cfg->blockFor->getRelativeFrequency->materialize->getVirtualObjects->size->materialize->getVirtualObjects->size->Assert->assertEquals->Assert->assertEquals->foreach->graph->getNodes->foreach->Assert->clazz->getSimpleName->clazz->isInstance->node->usages->isNotEmpty->assertFalse->catch->TypeSystemTest->e->getMessage->outputGraph->throw->finally
PartialEscapeAnalysisTreesTest.TreeNode#visit(HashSet)::: tree node visit:::instances->add->if->left->visit->if->right->visit
PartialEscapeAnalysisTreesTest.TreeNode#countInstances()::: tree node count instances:::instances->new->HashSet<>->visit->return->instances->size
PartialEscapeAnalysisTreesTest#buildTree(boolean)::: partial escape analysis trees test build tree:::leftChild->rightChild->taskToFork->task->if->GraalDirectives->new->TreeNode->blackhole->new->TreeNode->new->TreeNode->new->TreeNode->GraalDirectives->blackhole->else->new->TreeNode->new->TreeNode->new->TreeNode->GraalDirectives->blackhole->if->new->TreeNode->return->new->TreeNode
PartialEscapeAnalysisTreesTest#testBuildTree()::: partial escape analysis trees test test build tree:::testGraph
PartialEscapeAnalysisTreesTest#testGraph(String):::Prepare a graph that includes some blackholes and then remove the blackholes and compile normally to create an unusual situation for PEA.:::method->getResolvedJavaMethod->prepareGraph->try->s->graph->getDebug->getClass->getCodeCache->scope->foreach->graph->getNodes->filter->graph->removeFixed->new->DeadCodeEliminationPhase->apply->new->CanonicalizerPhase->apply->code->getCode->r->executeExpected->expectedInstances->countInstances->r2->code->executeVarargs->Assert->r2->countInstances->assertEquals->executeExpected->countInstances->code->executeVarargs->Assert->r2->countInstances->assertEquals->catch->throw->graph->getDebug->handle->finally
PartialEscapeUnsafeStoreTest#initUnsafe()::: partial escape unsafe store test init unsafe:::try->theUnsafe->getDeclaredField->theUnsafe->setAccessible->return->theUnsafe->get->catch->throw->new->RuntimeException->finally
PartialEscapeUnsafeStoreTest#testByteArrayWithCharStoreSnippet(char)::: partial escape unsafe store test test byte array with char store snippet:::b->new->byteArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testByteArrayWithCharStore()::: partial escape unsafe store test test byte array with char store:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithShortStoreSnippet(short)::: partial escape unsafe store test test byte array with short store snippet:::b->new->byteArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testByteArrayWithShortStore()::: partial escape unsafe store test test byte array with short store:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithIntStoreSnippet(int)::: partial escape unsafe store test test byte array with int store snippet:::b->new->byteArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testByteArrayWithIntStore()::: partial escape unsafe store test test byte array with int store:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithLongStoreSnippet(long)::: partial escape unsafe store test test byte array with long store snippet:::b->new->byteArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testByteArrayWithLongStore()::: partial escape unsafe store test test byte array with long store:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithFloatStoreSnippet(float)::: partial escape unsafe store test test byte array with float store snippet:::b->new->byteArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testByteArrayWithFloatStore()::: partial escape unsafe store test test byte array with float store:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithDoubleStoreSnippet(double)::: partial escape unsafe store test test byte array with double store snippet:::b->new->byteArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testByteArrayWithDoubleStore()::: partial escape unsafe store test test byte array with double store:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithByteStoreSnippet(byte)::: partial escape unsafe store test test char array with byte store snippet:::b->new->charArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testCharArrayWithByteStore()::: partial escape unsafe store test test char array with byte store:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithShortStoreSnippet(short)::: partial escape unsafe store test test char array with short store snippet:::b->new->charArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testCharArrayWithShortStore()::: partial escape unsafe store test test char array with short store:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithIntStoreSnippet(int)::: partial escape unsafe store test test char array with int store snippet:::b->new->charArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testCharArrayWithIntStore()::: partial escape unsafe store test test char array with int store:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithLongStoreSnippet(long)::: partial escape unsafe store test test char array with long store snippet:::b->new->charArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testCharArrayWithLongStore()::: partial escape unsafe store test test char array with long store:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithFloatStoreSnippet(float)::: partial escape unsafe store test test char array with float store snippet:::b->new->charArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testCharArrayWithFloatStore()::: partial escape unsafe store test test char array with float store:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithDoubleStoreSnippet(double)::: partial escape unsafe store test test char array with double store snippet:::b->new->charArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testCharArrayWithDoubleStore()::: partial escape unsafe store test test char array with double store:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithByteStoreSnippet(byte)::: partial escape unsafe store test test short array with byte store snippet:::b->new->shortArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testShortArrayWithByteStore()::: partial escape unsafe store test test short array with byte store:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithCharStoreSnippet(char)::: partial escape unsafe store test test short array with char store snippet:::b->new->shortArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testShortArrayWithCharStore()::: partial escape unsafe store test test short array with char store:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithIntStoreSnippet(int)::: partial escape unsafe store test test short array with int store snippet:::b->new->shortArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testShortArrayWithIntStore()::: partial escape unsafe store test test short array with int store:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithLongStoreSnippet(long)::: partial escape unsafe store test test short array with long store snippet:::b->new->shortArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testShortArrayWithLongStore()::: partial escape unsafe store test test short array with long store:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithFloatStoreSnippet(float)::: partial escape unsafe store test test short array with float store snippet:::b->new->shortArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testShortArrayWithFloatStore()::: partial escape unsafe store test test short array with float store:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithDoubleStoreSnippet(double)::: partial escape unsafe store test test short array with double store snippet:::b->new->shortArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testShortArrayWithDoubleStore()::: partial escape unsafe store test test short array with double store:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithByteStoreSnippet(byte)::: partial escape unsafe store test test int array with byte store snippet:::b->new->intArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testIntArrayWithByteStore()::: partial escape unsafe store test test int array with byte store:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithCharStoreSnippet(char)::: partial escape unsafe store test test int array with char store snippet:::b->new->intArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testIntArrayWithCharStore()::: partial escape unsafe store test test int array with char store:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithShortStoreSnippet(short)::: partial escape unsafe store test test int array with short store snippet:::b->new->intArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testIntArrayWithShortStore()::: partial escape unsafe store test test int array with short store:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithLongStoreSnippet(long)::: partial escape unsafe store test test int array with long store snippet:::b->new->intArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testIntArrayWithLongStore()::: partial escape unsafe store test test int array with long store:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithFloatStoreSnippet(float)::: partial escape unsafe store test test int array with float store snippet:::b->new->intArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testIntArrayWithFloatStore()::: partial escape unsafe store test test int array with float store:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithDoubleStoreSnippet(double)::: partial escape unsafe store test test int array with double store snippet:::b->new->intArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testIntArrayWithDoubleStore()::: partial escape unsafe store test test int array with double store:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithByteStoreSnippet(byte)::: partial escape unsafe store test test long array with byte store snippet:::b->new->longArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testLongArrayWithByteStore()::: partial escape unsafe store test test long array with byte store:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithCharStoreSnippet(char)::: partial escape unsafe store test test long array with char store snippet:::b->new->longArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testLongArrayWithCharStore()::: partial escape unsafe store test test long array with char store:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithShortStoreSnippet(short)::: partial escape unsafe store test test long array with short store snippet:::b->new->longArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testLongArrayWithShortStore()::: partial escape unsafe store test test long array with short store:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithIntStoreSnippet(int)::: partial escape unsafe store test test long array with int store snippet:::b->new->longArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testLongArrayWithIntStore()::: partial escape unsafe store test test long array with int store:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithFloatStoreSnippet(float)::: partial escape unsafe store test test long array with float store snippet:::b->new->longArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testLongArrayWithFloatStore()::: partial escape unsafe store test test long array with float store:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithDoubleStoreSnippet(double)::: partial escape unsafe store test test long array with double store snippet:::b->new->longArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testLongArrayWithDoubleStore()::: partial escape unsafe store test test long array with double store:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithByteStoreSnippet(byte)::: partial escape unsafe store test test float array with byte store snippet:::b->new->floatArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithByteStore()::: partial escape unsafe store test test float array with byte store:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithCharStoreSnippet(char)::: partial escape unsafe store test test float array with char store snippet:::b->new->floatArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithCharStore()::: partial escape unsafe store test test float array with char store:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithShortStoreSnippet(short)::: partial escape unsafe store test test float array with short store snippet:::b->new->floatArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithShortStore()::: partial escape unsafe store test test float array with short store:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithIntStoreSnippet(int)::: partial escape unsafe store test test float array with int store snippet:::b->new->floatArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithIntStore()::: partial escape unsafe store test test float array with int store:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithLongStoreSnippet(long)::: partial escape unsafe store test test float array with long store snippet:::b->new->floatArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithLongStore()::: partial escape unsafe store test test float array with long store:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithDoubleStoreSnippet(double)::: partial escape unsafe store test test float array with double store snippet:::b->new->floatArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithDoubleStore()::: partial escape unsafe store test test float array with double store:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithByteStoreSnippet(byte)::: partial escape unsafe store test test double array with byte store snippet:::b->new->doubleArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithByteStore()::: partial escape unsafe store test test double array with byte store:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithCharStoreSnippet(char)::: partial escape unsafe store test test double array with char store snippet:::b->new->doubleArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithCharStore()::: partial escape unsafe store test test double array with char store:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithShortStoreSnippet(short)::: partial escape unsafe store test test double array with short store snippet:::b->new->doubleArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithShortStore()::: partial escape unsafe store test test double array with short store:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithIntStoreSnippet(int)::: partial escape unsafe store test test double array with int store snippet:::b->new->doubleArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithIntStore()::: partial escape unsafe store test test double array with int store:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithLongStoreSnippet(long)::: partial escape unsafe store test test double array with long store snippet:::b->new->doubleArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithLongStore()::: partial escape unsafe store test test double array with long store:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithFloatStoreSnippet(float)::: partial escape unsafe store test test double array with float store snippet:::b->new->doubleArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithFloatStore()::: partial escape unsafe store test test double array with float store:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithCharStoreAndReadSnippet(char)::: partial escape unsafe store test test byte array with char store and read snippet:::b->new->byteArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testByteArrayWithCharStoreAndRead()::: partial escape unsafe store test test byte array with char store and read:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithShortStoreAndReadSnippet(short)::: partial escape unsafe store test test byte array with short store and read snippet:::b->new->byteArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testByteArrayWithShortStoreAndRead()::: partial escape unsafe store test test byte array with short store and read:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithIntStoreAndReadSnippet(int)::: partial escape unsafe store test test byte array with int store and read snippet:::b->new->byteArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testByteArrayWithIntStoreAndRead()::: partial escape unsafe store test test byte array with int store and read:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithLongStoreAndReadSnippet(long)::: partial escape unsafe store test test byte array with long store and read snippet:::b->new->byteArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testByteArrayWithLongStoreAndRead()::: partial escape unsafe store test test byte array with long store and read:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithFloatStoreAndReadSnippet(float)::: partial escape unsafe store test test byte array with float store and read snippet:::b->new->byteArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testByteArrayWithFloatStoreAndRead()::: partial escape unsafe store test test byte array with float store and read:::test
PartialEscapeUnsafeStoreTest#testByteArrayWithDoubleStoreAndReadSnippet(double)::: partial escape unsafe store test test byte array with double store and read snippet:::b->new->byteArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testByteArrayWithDoubleStoreAndRead()::: partial escape unsafe store test test byte array with double store and read:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithByteStoreAndReadSnippet(byte)::: partial escape unsafe store test test char array with byte store and read snippet:::b->new->charArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testCharArrayWithByteStoreAndRead()::: partial escape unsafe store test test char array with byte store and read:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithShortStoreAndReadSnippet(short)::: partial escape unsafe store test test char array with short store and read snippet:::b->new->charArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testCharArrayWithShortStoreAndRead()::: partial escape unsafe store test test char array with short store and read:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithIntStoreAndReadSnippet(int)::: partial escape unsafe store test test char array with int store and read snippet:::b->new->charArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testCharArrayWithIntStoreAndRead()::: partial escape unsafe store test test char array with int store and read:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithLongStoreAndReadSnippet(long)::: partial escape unsafe store test test char array with long store and read snippet:::b->new->charArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testCharArrayWithLongStoreAndRead()::: partial escape unsafe store test test char array with long store and read:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithFloatStoreAndReadSnippet(float)::: partial escape unsafe store test test char array with float store and read snippet:::b->new->charArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testCharArrayWithFloatStoreAndRead()::: partial escape unsafe store test test char array with float store and read:::test
PartialEscapeUnsafeStoreTest#testCharArrayWithDoubleStoreAndReadSnippet(double)::: partial escape unsafe store test test char array with double store and read snippet:::b->new->charArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testCharArrayWithDoubleStoreAndRead()::: partial escape unsafe store test test char array with double store and read:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithByteStoreAndReadSnippet(byte)::: partial escape unsafe store test test short array with byte store and read snippet:::b->new->shortArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testShortArrayWithByteStoreAndRead()::: partial escape unsafe store test test short array with byte store and read:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithCharStoreAndReadSnippet(char)::: partial escape unsafe store test test short array with char store and read snippet:::b->new->shortArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testShortArrayWithCharStoreAndRead()::: partial escape unsafe store test test short array with char store and read:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithIntStoreAndReadSnippet(int)::: partial escape unsafe store test test short array with int store and read snippet:::b->new->shortArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testShortArrayWithIntStoreAndRead()::: partial escape unsafe store test test short array with int store and read:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithLongStoreAndReadSnippet(long)::: partial escape unsafe store test test short array with long store and read snippet:::b->new->shortArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testShortArrayWithLongStoreAndRead()::: partial escape unsafe store test test short array with long store and read:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithFloatStoreAndReadSnippet(float)::: partial escape unsafe store test test short array with float store and read snippet:::b->new->shortArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testShortArrayWithFloatStoreAndRead()::: partial escape unsafe store test test short array with float store and read:::test
PartialEscapeUnsafeStoreTest#testShortArrayWithDoubleStoreAndReadSnippet(double)::: partial escape unsafe store test test short array with double store and read snippet:::b->new->shortArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testShortArrayWithDoubleStoreAndRead()::: partial escape unsafe store test test short array with double store and read:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithByteStoreAndReadSnippet(byte)::: partial escape unsafe store test test int array with byte store and read snippet:::b->new->intArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testIntArrayWithByteStoreAndRead()::: partial escape unsafe store test test int array with byte store and read:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithCharStoreAndReadSnippet(char)::: partial escape unsafe store test test int array with char store and read snippet:::b->new->intArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testIntArrayWithCharStoreAndRead()::: partial escape unsafe store test test int array with char store and read:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithShortStoreAndReadSnippet(short)::: partial escape unsafe store test test int array with short store and read snippet:::b->new->intArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testIntArrayWithShortStoreAndRead()::: partial escape unsafe store test test int array with short store and read:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithLongStoreAndReadSnippet(long)::: partial escape unsafe store test test int array with long store and read snippet:::b->new->intArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testIntArrayWithLongStoreAndRead()::: partial escape unsafe store test test int array with long store and read:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithFloatStoreAndReadSnippet(float)::: partial escape unsafe store test test int array with float store and read snippet:::b->new->intArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testIntArrayWithFloatStoreAndRead()::: partial escape unsafe store test test int array with float store and read:::test
PartialEscapeUnsafeStoreTest#testIntArrayWithDoubleStoreAndReadSnippet(double)::: partial escape unsafe store test test int array with double store and read snippet:::b->new->intArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testIntArrayWithDoubleStoreAndRead()::: partial escape unsafe store test test int array with double store and read:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithByteStoreAndReadSnippet(byte)::: partial escape unsafe store test test long array with byte store and read snippet:::b->new->longArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testLongArrayWithByteStoreAndRead()::: partial escape unsafe store test test long array with byte store and read:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithCharStoreAndReadSnippet(char)::: partial escape unsafe store test test long array with char store and read snippet:::b->new->longArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testLongArrayWithCharStoreAndRead()::: partial escape unsafe store test test long array with char store and read:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithShortStoreAndReadSnippet(short)::: partial escape unsafe store test test long array with short store and read snippet:::b->new->longArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testLongArrayWithShortStoreAndRead()::: partial escape unsafe store test test long array with short store and read:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithIntStoreAndReadSnippet(int)::: partial escape unsafe store test test long array with int store and read snippet:::b->new->longArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testLongArrayWithIntStoreAndRead()::: partial escape unsafe store test test long array with int store and read:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithFloatStoreAndReadSnippet(float)::: partial escape unsafe store test test long array with float store and read snippet:::b->new->longArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testLongArrayWithFloatStoreAndRead()::: partial escape unsafe store test test long array with float store and read:::test
PartialEscapeUnsafeStoreTest#testLongArrayWithDoubleStoreAndReadSnippet(double)::: partial escape unsafe store test test long array with double store and read snippet:::b->new->longArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testLongArrayWithDoubleStoreAndRead()::: partial escape unsafe store test test long array with double store and read:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithByteStoreAndReadSnippet(byte)::: partial escape unsafe store test test float array with byte store and read snippet:::b->new->floatArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithByteStoreAndRead()::: partial escape unsafe store test test float array with byte store and read:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithCharStoreAndReadSnippet(char)::: partial escape unsafe store test test float array with char store and read snippet:::b->new->floatArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithCharStoreAndRead()::: partial escape unsafe store test test float array with char store and read:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithShortStoreAndReadSnippet(short)::: partial escape unsafe store test test float array with short store and read snippet:::b->new->floatArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithShortStoreAndRead()::: partial escape unsafe store test test float array with short store and read:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithIntStoreAndReadSnippet(int)::: partial escape unsafe store test test float array with int store and read snippet:::b->new->floatArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithIntStoreAndRead()::: partial escape unsafe store test test float array with int store and read:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithLongStoreAndReadSnippet(long)::: partial escape unsafe store test test float array with long store and read snippet:::b->new->floatArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithLongStoreAndRead()::: partial escape unsafe store test test float array with long store and read:::test
PartialEscapeUnsafeStoreTest#testFloatArrayWithDoubleStoreAndReadSnippet(double)::: partial escape unsafe store test test float array with double store and read snippet:::b->new->floatArr->unsafe->putDouble->return
PartialEscapeUnsafeStoreTest#testFloatArrayWithDoubleStoreAndRead()::: partial escape unsafe store test test float array with double store and read:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithByteStoreAndReadSnippet(byte)::: partial escape unsafe store test test double array with byte store and read snippet:::b->new->doubleArr->unsafe->putByte->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithByteStoreAndRead()::: partial escape unsafe store test test double array with byte store and read:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithCharStoreAndReadSnippet(char)::: partial escape unsafe store test test double array with char store and read snippet:::b->new->doubleArr->unsafe->putChar->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithCharStoreAndRead()::: partial escape unsafe store test test double array with char store and read:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithShortStoreAndReadSnippet(short)::: partial escape unsafe store test test double array with short store and read snippet:::b->new->doubleArr->unsafe->putShort->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithShortStoreAndRead()::: partial escape unsafe store test test double array with short store and read:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithIntStoreAndReadSnippet(int)::: partial escape unsafe store test test double array with int store and read snippet:::b->new->doubleArr->unsafe->putInt->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithIntStoreAndRead()::: partial escape unsafe store test test double array with int store and read:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithLongStoreAndReadSnippet(long)::: partial escape unsafe store test test double array with long store and read snippet:::b->new->doubleArr->unsafe->putLong->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithLongStoreAndRead()::: partial escape unsafe store test test double array with long store and read:::test
PartialEscapeUnsafeStoreTest#testDoubleArrayWithFloatStoreAndReadSnippet(float)::: partial escape unsafe store test test double array with float store and read snippet:::b->new->doubleArr->unsafe->putFloat->return
PartialEscapeUnsafeStoreTest#testDoubleArrayWithFloatStoreAndRead()::: partial escape unsafe store test test double array with float store and read:::test
PEAAssertionsTest#getDefaultHighTierContext():::These tests assume all code paths are reachable so disable profile based dead code removal.:::return->getProviders->getDefaultGraphBuilderSuite->remove->new->HighTierContext
PEAAssertionsTest#snippet1(int)::: assertions test snippet1:::object->new->Integer->GraalDirectives->ensureVirtualized
PEAAssertionsTest#test1()::: assertions test test1:::test
PEAAssertionsTest#snippet2(int)::: assertions test snippet2:::object->new->Integer->GraalDirectives->ensureVirtualized
PEAAssertionsTest#test2()::: assertions test test2:::test
PEAAssertionsTest#snippet3(int)::: assertions test snippet3:::object->new->Integer->GraalDirectives->ensureVirtualized
PEAAssertionsTest#test3()::: assertions test test3:::test
PEAAssertionsTest#snippetHere1(int)::: assertions test snippet here1:::object->new->Integer->GraalDirectives->ensureVirtualizedHere
PEAAssertionsTest#testHere1()::: assertions test test here1:::test
PEAAssertionsTest#snippetHere2(int)::: assertions test snippet here2:::object->new->Integer->GraalDirectives->ensureVirtualizedHere
PEAAssertionsTest#testHere2()::: assertions test test here2:::test
PEAAssertionsTest#snippetHere3(int)::: assertions test snippet here3:::object->new->Integer->GraalDirectives->ensureVirtualizedHere
PEAAssertionsTest#testHere3()::: assertions test test here3:::test
PEAAssertionsTest#snippetBoxing1(int)::: assertions test snippet boxing1:::object->GraalDirectives->ensureVirtualizedHere
PEAAssertionsTest#testBoxing1()::: assertions test test boxing1:::test
PEAAssertionsTest#snippetBoxing2(int)::: assertions test snippet boxing2:::object->GraalDirectives->ensureVirtualized
PEAAssertionsTest#testBoxing2()::: assertions test test boxing2:::test
PEAAssertionsTest#snippetControlFlow1(boolean, int)::: assertions test snippet control flow1:::object->new->Integer->if->GraalDirectives->ensureVirtualized->GraalDirectives->controlFlowAnchor
PEAAssertionsTest#testControlFlow1()::: assertions test test control flow1:::test
PEAAssertionsTest#snippetControlFlow2(boolean, int)::: assertions test snippet control flow2:::object->new->Integer->if->GraalDirectives->ensureVirtualized->else->GraalDirectives->ensureVirtualized->GraalDirectives->controlFlowAnchor
PEAAssertionsTest#testControlFlow2()::: assertions test test control flow2:::test
PEAAssertionsTest#snippetControlFlow3(boolean, int)::: assertions test snippet control flow3:::object->new->Integer->GraalDirectives->ensureVirtualized->if->else->GraalDirectives->controlFlowAnchor
PEAAssertionsTest#testControlFlow3()::: assertions test test control flow3:::test
PEAAssertionsTest#snippetControlFlow4(boolean, int)::: assertions test snippet control flow4:::object->new->Integer->if->else->GraalDirectives->ensureVirtualized
PEAAssertionsTest#testControlFlow4()::: assertions test test control flow4:::test
PEAAssertionsTest#snippetControlFlow5(boolean, int)::: assertions test snippet control flow5:::object->new->Integer->if->else->GraalDirectives->ensureVirtualizedHere
PEAAssertionsTest#testControlFlow5()::: assertions test test control flow5:::test
PEAAssertionsTest#snippetIndirect1(boolean, int)::: assertions test snippet indirect1:::object->new->Integer->t->new->TestClass->GraalDirectives->ensureVirtualized->if->else
PEAAssertionsTest#testIndirect1()::: assertions test test indirect1:::test
PEAAssertionsTest#snippetIndirect2(boolean, int)::: assertions test snippet indirect2:::object->new->Integer->t->new->TestClass->GraalDirectives->ensureVirtualized->if->else
PEAAssertionsTest#testIndirect2()::: assertions test test indirect2:::test
PEAReadEliminationTest#testIndexed1Snippet(int[])::: read elimination test test indexed1 snippet:::return
PEAReadEliminationTest#testIndexed1()::: read elimination test test indexed1:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
PEAReadEliminationTest#testIndexed2Snippet(int, int[])::: read elimination test test indexed2 snippet:::return
PEAReadEliminationTest#testIndexed2()::: read elimination test test indexed2:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals
PEAReadEliminationTest#testIndexed3Snippet(int, int[], short[])::: read elimination test test indexed3 snippet:::return
PEAReadEliminationTest#testIndexed3()::: read elimination test test indexed3:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
PEAReadEliminationTest#nonInlineable()::: read elimination test non inlineable:::
PEAReadEliminationTest#testIndexed4Snippet(int[])::: read elimination test test indexed4 snippet:::nonInlineable->return
PEAReadEliminationTest#testIndexed4()::: read elimination test test indexed4:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
PEAReadEliminationTest#testUnsafe1Snippet(int, int[])::: read elimination test test unsafe1 snippet:::s->UNSAFE->getInt->UNSAFE->putInt->UNSAFE->putInt->return->UNSAFE->getInt->UNSAFE->getInt
PEAReadEliminationTest#testUnsafe1()::: read elimination test test unsafe1:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
PEAReadEliminationTest#testUnsafe2Snippet(int, Object)::: read elimination test test unsafe2 snippet:::s->UNSAFE->getInt->UNSAFE->putInt->UNSAFE->putInt->return->UNSAFE->getInt->UNSAFE->getInt
PEAReadEliminationTest#testUnsafe2()::: read elimination test test unsafe2:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
PEAReadEliminationTest#testUnsafe3Snippet(int, Object[])::: read elimination test test unsafe3 snippet:::s->UNSAFE->getObject->UNSAFE->putObject->UNSAFE->putObject->return->UNSAFE->getObject->UNSAFE->getObject
PEAReadEliminationTest#testUnsafe3()::: read elimination test test unsafe3:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
PEAReadEliminationTest#testUnsafe4Snippet(int, Object[])::: read elimination test test unsafe4 snippet:::s->UNSAFE->getObject->UNSAFE->putObject->UNSAFE->putObject->return->UNSAFE->getObject->UNSAFE->getObject
PEAReadEliminationTest#testUnsafe4()::: read elimination test test unsafe4:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
PEAReadEliminationTest#processMethod(String)::: read elimination test process method:::graph->parseEager->context->getDefaultHighTierContext->createInliningPhase->apply->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->return
PoorMansEATest#test1Snippet()::: poor mans test test1 snippet:::a->new->A->return
PoorMansEATest#test1()::: poor mans test test1:::test
PoorMansEATest#test(String)::: poor mans test test:::debug->getDebugContext->try->s->debug->new->DebugDumpScope->scope->graph->parseEager->highTierContext->getDefaultHighTierContext->createInliningPhase->apply->context->getProviders->new->CanonicalizerPhase->new->LoweringPhase->apply->foreach->graph->getNodes->snapshot->foreach->fs->inputs->if->fs->replaceAtUsages->fs->safeDelete->continue->new->CanonicalizerPhase->apply->catch->throw->debug->handle->finally
TrufflePEATest#unsafeAccessToLongArray(int, Frame)::: truffle test unsafe access to long array:::array->s->UNSAFE->getInt->UNSAFE->putInt->UNSAFE->putInt->return->UNSAFE->getInt->UNSAFE->getInt
TrufflePEATest#testUnsafeAccessToLongArray()::: truffle test test unsafe access to long array:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals
TrufflePEATest#newFrame(long)::: truffle test new frame:::frame->new->Frame->UNSAFE->putLong->return->UNSAFE->getLong
TrufflePEATest#testNewFrame()::: truffle test test new frame:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals
TrufflePEATest#processMethod(String)::: truffle test process method:::graph->parseEager->context->getDefaultHighTierContext->createInliningPhase->apply->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->return
TrufflePEATest#accessDynamicObject(double)::: truffle test access dynamic object:::obj->new->DynamicObject->UNSAFE->putDouble->return->UNSAFE->getDouble
TrufflePEATest#testAccessDynamicObject()::: truffle test test access dynamic object:::graph->processMethod->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals->graph->getNodes->filter->count->assertDeepEquals
UnsafeCompareAndSwapVirtualizationTest#bothVirtualNoMatch()::: unsafe compare and swap virtualization test both virtual no match:::a->new->AtomicReference<>->return->a->new->Object->new->Object->compareAndSet
UnsafeCompareAndSwapVirtualizationTest#bothVirtualNoMatchTest()::: unsafe compare and swap virtualization test both virtual no match test:::testEscapeAnalysis->graph->getNodes->isEmpty->assertTrue
UnsafeCompareAndSwapVirtualizationTest#bothVirtualMatch()::: unsafe compare and swap virtualization test both virtual match:::expect->new->Object->a->new->AtomicReference<>->return->a->new->Object->compareAndSet
UnsafeCompareAndSwapVirtualizationTest#bothVirtualMatchTest()::: unsafe compare and swap virtualization test both virtual match test:::testEscapeAnalysis->graph->getNodes->isEmpty->assertTrue
UnsafeCompareAndSwapVirtualizationTest#expectedVirtualMatch()::: unsafe compare and swap virtualization test expected virtual match:::o->new->Object->a->new->AtomicReference<>->return->a->compareAndSet
UnsafeCompareAndSwapVirtualizationTest#expectedVirtualMatchTest()::: unsafe compare and swap virtualization test expected virtual match test:::testEscapeAnalysis->graph->getNodes->isEmpty->assertTrue
UnsafeCompareAndSwapVirtualizationTest#expectedVirtualNoMatch()::: unsafe compare and swap virtualization test expected virtual no match:::o->new->Object->a->new->AtomicReference<>->return->a->compareAndSet
UnsafeCompareAndSwapVirtualizationTest#expectedVirtualNoMatchTest()::: unsafe compare and swap virtualization test expected virtual no match test:::testEscapeAnalysis->graph->getNodes->isEmpty->assertTrue
UnsafeCompareAndSwapVirtualizationTest#bothNonVirtualNoMatch()::: unsafe compare and swap virtualization test both non virtual no match:::a->new->AtomicReference<>->return->a->compareAndSet
UnsafeCompareAndSwapVirtualizationTest#bothNonVirtualNoMatchTest()::: unsafe compare and swap virtualization test both non virtual no match test:::testEscapeAnalysis->graph->getNodes->isEmpty->assertTrue
UnsafeCompareAndSwapVirtualizationTest#bothNonVirtualMatch()::: unsafe compare and swap virtualization test both non virtual match:::a->new->AtomicReference<>->return->a->compareAndSet
UnsafeCompareAndSwapVirtualizationTest#bothNonVirtualMatchTest()::: unsafe compare and swap virtualization test both non virtual match test:::testEscapeAnalysis->graph->getNodes->isEmpty->assertTrue
UnsafeCompareAndSwapVirtualizationTest#onlyInitialValueVirtualNoMatch()::: unsafe compare and swap virtualization test only initial value virtual no match:::a->new->Object->new->AtomicReference<>->return->a->compareAndSet
UnsafeCompareAndSwapVirtualizationTest#onlyInitialValueVirtualNoMatchTest()::: unsafe compare and swap virtualization test only initial value virtual no match test:::testEscapeAnalysis->graph->getNodes->isEmpty->assertTrue
UnsafeCompareAndSwapVirtualizationTest#onlyInitialValueVirtualMatch()::: unsafe compare and swap virtualization test only initial value virtual match:::o->new->Object->a->new->AtomicReference<>->return->a->compareAndSet
UnsafeCompareAndSwapVirtualizationTest#onlyInitialValueVirtualMatchTest()::: unsafe compare and swap virtualization test only initial value virtual match test:::testEscapeAnalysis->graph->getNodes->isEmpty->assertTrue
UnsafeCompareAndSwapVirtualizationTest#bothVirtualNoMatchArray()::: unsafe compare and swap virtualization test both virtual no match array:::array->new->AtomicReferenceArray<>->return->array->new->Object->new->Object->compareAndSet
UnsafeCompareAndSwapVirtualizationTest#bothVirtualNoMatchArrayTest()::: unsafe compare and swap virtualization test both virtual no match array test:::testEscapeAnalysis->graph->getNodes->isEmpty->assertTrue
UnsafeEATest#testEscapeAnalysis(String, JavaConstant, boolean)::: unsafe test test escape analysis:::super->testEscapeAnalysis->super->testEscapeAnalysis->if->method->getResolvedJavaMethod->javaKinds->method->getSignature->toParameterKinds->args->new->ObjectArr->i->foreach->JavaConstant->defaultForKind->asBoxedPrimitive->result->executeExpected->expectedConstantResult->asBoxedPrimitive->equals->assertTrue
UnsafeEATest#canonicalizeGraph()::: unsafe test canonicalize graph:::if->foreach->graph->getNodes->filter->snapshot->if->store->newStore->graph->store->object->store->offset->store->value->store->accessKind->NamedLocationIdentity->any->store->needsBarrier->store->stateAfter->new->RawStoreNode->add->graph->replaceFixedWithFixed->else->if->load->newLoad->graph->load->object->load->offset->load->accessKind->NamedLocationIdentity->any->new->RawLoadNode->add->graph->replaceFixedWithFixed->super->canonicalizeGraph
UnsafeEATest#postEACanonicalizeGraph()::: unsafe test post canonicalize graph:::mark->graph->getMark->foreach->graph->getNodes->filter->node->getTarget->getByteOrder->lower->new->CanonicalizerPhase->applyIncremental
UnsafeEATest#testSimpleInt()::: unsafe test test simple int:::JavaConstant->forInt->testEscapeAnalysis
UnsafeEATest#testSimpleIntSnippet()::: unsafe test test simple int snippet:::x->new->TestClassInt->UNSAFE->putInt->return->UNSAFE->getInt
UnsafeEATest#testMaterializedInt()::: unsafe test test materialized int:::test
UnsafeEATest#testMaterializedIntSnippet()::: unsafe test test materialized int snippet:::x->new->TestClassInt->UNSAFE->putInt->return
UnsafeEATest#testSimpleDouble()::: unsafe test test simple double:::JavaConstant->forDouble->testEscapeAnalysis
UnsafeEATest#testSimpleDoubleSnippet()::: unsafe test test simple double snippet:::x->new->TestClassInt->UNSAFE->putDouble->return->UNSAFE->getDouble
UnsafeEATest#testSimpleDoubleOverwriteWithInt()::: unsafe test test simple double overwrite with int:::JavaConstant->forInt->testEscapeAnalysis
UnsafeEATest#testSimpleDoubleOverwriteWithIntSnippet()::: unsafe test test simple double overwrite with int snippet:::x->new->TestClassInt->UNSAFE->putDouble->UNSAFE->putInt->return->UNSAFE->getInt
UnsafeEATest#testSimpleDoubleOverwriteWithSecondInt()::: unsafe test test simple double overwrite with second int:::bb->ByteBuffer->allocate->getTarget->getByteOrder->order->bb->putDouble->value->bb->getInt->JavaConstant->forInt->testEscapeAnalysis
UnsafeEATest#testSimpleDoubleOverwriteWithSecondIntSnippet()::: unsafe test test simple double overwrite with second int snippet:::x->new->TestClassInt->UNSAFE->putDouble->UNSAFE->putInt->return->UNSAFE->getInt
UnsafeEATest#testSimpleDoubleOverwriteWithFirstInt()::: unsafe test test simple double overwrite with first int:::bb->ByteBuffer->allocate->getTarget->getByteOrder->order->bb->putDouble->value->bb->getInt->JavaConstant->forInt->testEscapeAnalysis
UnsafeEATest#testSimpleDoubleOverwriteWithFirstIntSnippet()::: unsafe test test simple double overwrite with first int snippet:::x->new->TestClassInt->UNSAFE->putDouble->UNSAFE->putInt->return->UNSAFE->getInt
UnsafeEATest#testSimpleLongOverwriteWithSecondInt()::: unsafe test test simple long overwrite with second int:::bb->ByteBuffer->allocate->getTarget->getByteOrder->order->bb->putLong->value->bb->getInt->JavaConstant->forInt->testEscapeAnalysis
UnsafeEATest#testSimpleLongOverwriteWithSecondIntSnippet()::: unsafe test test simple long overwrite with second int snippet:::x->new->TestClassInt->UNSAFE->putLong->UNSAFE->putInt->return->UNSAFE->getInt
UnsafeEATest#testSimpleLongOverwriteWithFirstInt()::: unsafe test test simple long overwrite with first int:::bb->ByteBuffer->allocate->getTarget->getByteOrder->order->bb->putLong->value->bb->getInt->JavaConstant->forInt->testEscapeAnalysis
UnsafeEATest#testSimpleLongOverwriteWithFirstIntSnippet()::: unsafe test test simple long overwrite with first int snippet:::x->new->TestClassInt->UNSAFE->putLong->UNSAFE->putInt->return->UNSAFE->getInt
UnsafeEATest#testMergedDouble()::: unsafe test test merged double:::testEscapeAnalysis->Assert->returnNodes->size->assertEquals->Assert->returnNodes->get->result->assertTrue->phi->returnNodes->get->result->Assert->phi->valueAt->assertTrue->Assert->phi->valueAt->assertTrue
UnsafeEATest#testMergedDoubleSnippet(boolean)::: unsafe test test merged double snippet:::x->if->new->TestClassInt->UNSAFE->putDouble->else->new->TestClassInt->UNSAFE->putDouble->return->UNSAFE->getDouble
UnsafeEATest#testMergedVirtualObjects()::: unsafe test test merged virtual objects:::testEscapeAnalysis
UnsafeEATest#testMergedVirtualObjectsSnippet(int)::: unsafe test test merged virtual objects snippet:::x->if->new->TestClassInt->UNSAFE->putDouble->else->new->TestClassInt->UNSAFE->putInt->UNSAFE->putInt->if->UNSAFE->putInt->GraalDirectives->deoptimizeAndInvalidate->return
UnsafeEATest#testMaterializedDouble()::: unsafe test test materialized double:::test
UnsafeEATest#testMaterializedDoubleSnippet()::: unsafe test test materialized double snippet:::x->new->TestClassInt->UNSAFE->putDouble->return
UnsafeEATest#testDeoptDoubleVar()::: unsafe test test deopt double var:::test
UnsafeEATest#testDeoptDoubleVarSnippet()::: unsafe test test deopt double var snippet:::x->new->TestClassInt->UNSAFE->putDouble->try->UNSAFE->getDouble->catch->return->finally->return
UnsafeEATest#testDeoptDoubleConstant()::: unsafe test test deopt double constant:::test
UnsafeEATest#testDeoptDoubleConstantSnippet()::: unsafe test test deopt double constant snippet:::x->new->TestClassInt->UNSAFE->putDouble->try->UNSAFE->getDouble->catch->return->finally->return
UnsafeEATest#testDeoptLongVar()::: unsafe test test deopt long var:::test
UnsafeEATest#testDeoptLongVarSnippet()::: unsafe test test deopt long var snippet:::x->new->TestClassInt->UNSAFE->putLong->try->UNSAFE->getLong->catch->return->finally->return
UnsafeEATest#testDeoptLongConstant()::: unsafe test test deopt long constant:::test
UnsafeEATest#testDeoptLongConstantSnippet()::: unsafe test test deopt long constant snippet:::x->new->TestClassInt->UNSAFE->putLong->try->UNSAFE->getLong->catch->return->finally->return

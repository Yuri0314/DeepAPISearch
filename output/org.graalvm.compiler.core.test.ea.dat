org.graalvm.compiler.core.test.ea.CountUppercaseParallelTest#count(CharSequence)->long::: count uppercase parallel test count
org.graalvm.compiler.core.test.ea.CountUppercaseParallelTest#testCount()->void::: count uppercase parallel test test count
org.graalvm.compiler.core.test.ea.EAMergingTest#testSimpleMerge()->void::: merging test test simple merge
org.graalvm.compiler.core.test.ea.EAMergingTest#simpleMergeSnippet(boolean, int, int)->int::: merging test simple merge snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testSimpleSnippet(TestObject)->int::: early read elimination test test simple snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testSimple()->void::: early read elimination test test simple
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testSimpleConflictSnippet(TestObject, TestObject)->int::: early read elimination test test simple conflict snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testSimpleConflict()->void::: early read elimination test test simple conflict
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testParamSnippet(TestObject, int)->int::: early read elimination test test param snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testParam()->void::: early read elimination test test param
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testMaterializedSnippet(int)->int::: early read elimination test test materialized snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testMaterialized()->void::: early read elimination test test materialized
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testSimpleLoopSnippet(TestObject, int, int)->int::: early read elimination test test simple loop snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testSimpleLoop()->void::: early read elimination test test simple loop
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testBadLoopSnippet(TestObject, TestObject, int, int)->int::: early read elimination test test bad loop snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testBadLoop()->void::: early read elimination test test bad loop
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testBadLoop2Snippet(TestObject, TestObject, int, int)->int::: early read elimination test test bad loop2 snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testBadLoop2()->void::: early read elimination test test bad loop2
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testPhiSnippet(TestObject, int)->int::: early read elimination test test phi snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testPhi()->void::: early read elimination test test phi
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testSimpleStoreSnippet(TestObject, int)->void::: early read elimination test test simple store snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testSimpleStore()->void::: early read elimination test test simple store
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testValueProxySnippet(boolean, TestObject)->int::: early read elimination test test value proxy snippet
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#testValueProxy()->void::: early read elimination test test value proxy
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#getReturn(String, boolean)->ReturnNode::: early read elimination test get return
org.graalvm.compiler.core.test.ea.EarlyReadEliminationTest#processMethod(String, boolean)->StructuredGraph::: early read elimination test process method
org.graalvm.compiler.core.test.ea.EATestBase.TestClassInt#equals(Object)->boolean::: test class int equals
org.graalvm.compiler.core.test.ea.EATestBase.TestClassInt#toString()->String::: test class int to string
org.graalvm.compiler.core.test.ea.EATestBase.TestClassInt#hashCode()->int::: test class int hash code
org.graalvm.compiler.core.test.ea.EATestBase.TestClassObject#equals(Object)->boolean::: test class object equals
org.graalvm.compiler.core.test.ea.EATestBase.TestClassObject#toString()->String::: test class object to string
org.graalvm.compiler.core.test.ea.EATestBase.TestClassObject#hashCode()->int::: test class object hash code
org.graalvm.compiler.core.test.ea.EATestBase#notInlineable()->void::: test base not inlineable
org.graalvm.compiler.core.test.ea.EATestBase#testEscapeAnalysis(String, JavaConstant, boolean)->void:::Runs Escape Analysis on the given snippet and makes sure that no allocations remain in the graph.
org.graalvm.compiler.core.test.ea.EATestBase#testEscapeAnalysis(String, JavaConstant, boolean, int)->void::: test base test escape analysis
org.graalvm.compiler.core.test.ea.EATestBase#getAllocationCount()->int::: test base get allocation count
org.graalvm.compiler.core.test.ea.EATestBase#prepareGraph(String, boolean)->void::: test base prepare graph
org.graalvm.compiler.core.test.ea.EATestBase#postEACanonicalizeGraph()->void::: test base post canonicalize graph
org.graalvm.compiler.core.test.ea.EATestBase#canonicalizeGraph()->void::: test base canonicalize graph
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#test1()->void::: escape analysis test test1
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#test1Snippet()->int::: escape analysis test test1 snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#test2()->void::: escape analysis test test2
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#test2Snippet()->int::: escape analysis test test2 snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#test3()->void::: escape analysis test test3
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#test3Snippet()->Object::: escape analysis test test3 snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMonitor()->void::: escape analysis test test monitor
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMonitorSnippet()->int::: escape analysis test test monitor snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMonitor2()->void::: escape analysis test test monitor2
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMonitor2Snippet()->int:::This test case differs from the last one in that it requires inlining within a synchronized region.
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMerge()->void::: escape analysis test test merge
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMerge1Snippet(int)->int::: escape analysis test test merge1 snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testSimpleLoop()->void::: escape analysis test test simple loop
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testSimpleLoopSnippet(int)->int::: escape analysis test test simple loop snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testModifyingLoop()->void::: escape analysis test test modifying loop
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testModifyingLoopSnippet(int)->int::: escape analysis test test modifying loop snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsInt()->void::: escape analysis test test merge allocations int
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsIntSnippet(int)->int::: escape analysis test test merge allocations int snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsInt2()->void::: escape analysis test test merge allocations int2
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsInt2Snippet(int)->int::: escape analysis test test merge allocations int2 snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsInt3()->void::: escape analysis test test merge allocations int3
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsInt3Snippet(boolean)->boolean::: escape analysis test test merge allocations int3 snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsObj()->void::: escape analysis test test merge allocations obj
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsObjSnippet(int)->int::: escape analysis test test merge allocations obj snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsObjCirc()->void::: escape analysis test test merge allocations obj circ
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsObjCircSnippet(int)->int::: escape analysis test test merge allocations obj circ snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest.MyException#fillInStackTrace()->Throwable::: my exception fill in stack trace
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsException()->void::: escape analysis test test merge allocations exception
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testMergeAllocationsExceptionSnippet(int)->int::: escape analysis test test merge allocations exception snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testChangeHandling()->void:::Tests that a graph with allocations that does not make progress during PEA will not be changed.
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testChangeHandlingSnippet(int)->int::: escape analysis test test change handling snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testRemovalSpecialCase()->void:::Test the case where allocations before and during a loop that have no usages other than their phi need to be recognized as an important change
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testRemovalSpecialCaseSnippet(int)->int::: escape analysis test test removal special case snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testCheckCast()->void::: escape analysis test test check cast
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testCheckCastSnippet()->Object::: escape analysis test test check cast snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testInstanceOf()->void::: escape analysis test test instance of
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testInstanceOfSnippet()->boolean::: escape analysis test test instance of snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testNewNodeSnippet()->void::: escape analysis test test new node snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testNewNode()->void:::This test makes sure that the allocation of a Node can be removed
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testFullyUnrolledLoopSnippet()->Object::: escape analysis test test fully unrolled loop snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testFullyUnrolledLoop()->void::: escape analysis test test fully unrolled loop
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testPeeledLoopSnippet()->Object::: escape analysis test test peeled loop snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testPeeledLoop()->void::: escape analysis test test peeled loop
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testDeoptMonitorSnippetInner(Object, Object, int)->void::: escape analysis test test deopt monitor snippet inner
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testDeoptMonitorSnippet(Object, int)->void::: escape analysis test test deopt monitor snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testDeoptMonitor()->void::: escape analysis test test deopt monitor
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testInterfaceArrayAssignment()->void::: escape analysis test test interface array assignment
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testInterfaceArrayAssignmentSnippet()->boolean::: escape analysis test test interface array assignment snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest.Complex#mul(Complex)->Complex::: complex mul
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest.Complex#add(Complex)->Complex::: complex add
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest.Complex#equals(Object)->boolean::: complex equals
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest.Complex#hashCode()->int::: complex hash code
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testComplexMultiplySnippet1(Complex[][])->Complex[][]::: escape analysis test test complex multiply snippet1
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testComplexMultiply1()->void::: escape analysis test test complex multiply1
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testComplexMultiplySnippet2(Complex[][])->Complex[][]::: escape analysis test test complex multiply snippet2
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testComplexMultiply2()->void::: escape analysis test test complex multiply2
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testComplexAddSnippet(Complex[][])->Complex::: escape analysis test test complex add snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testComplexAdd()->void::: escape analysis test test complex add
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testComplexRowSumSnippet(Complex[][])->Complex[]::: escape analysis test test complex row sum snippet
org.graalvm.compiler.core.test.ea.EscapeAnalysisTest#testComplexRowSum()->void::: escape analysis test test complex row sum
org.graalvm.compiler.core.test.ea.NestedBoxingTest#testSimpleMerge()->void::: nested boxing test test simple merge
org.graalvm.compiler.core.test.ea.NestedBoxingTest#testSnippet(int)->int::: nested boxing test test snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisIterationTest#canonicalizeGraph()->void::: partial escape analysis iteration test canonicalize graph
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisIterationTest#moveIntoBranchBox(int)->String::: partial escape analysis iteration test move into branch box
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisIterationTest#moveIntoBranch(int)->String::: partial escape analysis iteration test move into branch
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisIterationTest#testJMHBlackholePattern()->void::: partial escape analysis iteration test test blackhole pattern
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisIterationTest#noLoopIterationBox(int)->String::: partial escape analysis iteration test no loop iteration box
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisIterationTest#noLoopIteration(int)->String::: partial escape analysis iteration test no loop iteration
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisIterationTest#noLoopIterationEmpty(int)->String::: partial escape analysis iteration test no loop iteration empty
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisIterationTest#testNoLoopIteration()->void::: partial escape analysis iteration test test no loop iteration
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#test1()->void::: partial escape analysis test test1
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#test1Snippet(int, int, Object, Object)->Object::: partial escape analysis test test1 snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#test2()->void::: partial escape analysis test test2
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#test2Snippet(int, Object, Object, Object)->Object::: partial escape analysis test test2 snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#test3()->void::: partial escape analysis test test3
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#test3Snippet(int)->Object::: partial escape analysis test test3 snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testArrayCopy()->void::: partial escape analysis test test array copy
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testArrayCopySnippet(int)->Object::: partial escape analysis test test array copy snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testPrimitiveArraycopy()->void::: partial escape analysis test test primitive arraycopy
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testPrimitiveArraycopySnippet(int)->Object::: partial escape analysis test test primitive arraycopy snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testCache()->void::: partial escape analysis test test cache
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest.CacheKey#hashCode()->int::: cache key hash code
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest.CacheKey#equals(CacheKey)->boolean::: cache key equals
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testCacheSnippet(int, Object)->Object::: partial escape analysis test test cache snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testReference1Snippet(Object)->int::: partial escape analysis test test reference1 snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testReference1()->void::: partial escape analysis test test reference1
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testCanonicalizeSnippet(int)->int::: partial escape analysis test test canonicalize snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testCanonicalize()->void::: partial escape analysis test test canonicalize
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testBoxLoopSnippet(int)->int::: partial escape analysis test test box loop snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testBoxLoop()->void::: partial escape analysis test test box loop
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#deoptWithVirtualObjectsSnippet()->Object::: partial escape analysis test deopt with virtual objects snippet
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testDeoptWithVirtualObjects()->void:::Tests deoptimizing with virtual objects in debug info.
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTest#testPartialEscapeAnalysis(String, double, int, Class...)->void::: partial escape analysis test test partial escape analysis
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTreesTest.TreeNode#visit(HashSet)->void::: tree node visit
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTreesTest.TreeNode#countInstances()->int::: tree node count instances
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTreesTest#buildTree(boolean)->TreeNode::: partial escape analysis trees test build tree
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTreesTest#testBuildTree()->void::: partial escape analysis trees test test build tree
org.graalvm.compiler.core.test.ea.PartialEscapeAnalysisTreesTest#testGraph(String)->void:::Prepare a graph that includes some blackholes and then remove the blackholes and compile normally to create an unusual situation for PEA.
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithCharStoreSnippet(char)->byte[]::: partial escape unsafe store test test byte array with char store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithCharStore()->void::: partial escape unsafe store test test byte array with char store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithShortStoreSnippet(short)->byte[]::: partial escape unsafe store test test byte array with short store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithShortStore()->void::: partial escape unsafe store test test byte array with short store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithIntStoreSnippet(int)->byte[]::: partial escape unsafe store test test byte array with int store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithIntStore()->void::: partial escape unsafe store test test byte array with int store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithLongStoreSnippet(long)->byte[]::: partial escape unsafe store test test byte array with long store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithLongStore()->void::: partial escape unsafe store test test byte array with long store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithFloatStoreSnippet(float)->byte[]::: partial escape unsafe store test test byte array with float store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithFloatStore()->void::: partial escape unsafe store test test byte array with float store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithDoubleStoreSnippet(double)->byte[]::: partial escape unsafe store test test byte array with double store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithDoubleStore()->void::: partial escape unsafe store test test byte array with double store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithByteStoreSnippet(byte)->char[]::: partial escape unsafe store test test char array with byte store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithByteStore()->void::: partial escape unsafe store test test char array with byte store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithShortStoreSnippet(short)->char[]::: partial escape unsafe store test test char array with short store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithShortStore()->void::: partial escape unsafe store test test char array with short store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithIntStoreSnippet(int)->char[]::: partial escape unsafe store test test char array with int store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithIntStore()->void::: partial escape unsafe store test test char array with int store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithLongStoreSnippet(long)->char[]::: partial escape unsafe store test test char array with long store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithLongStore()->void::: partial escape unsafe store test test char array with long store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithFloatStoreSnippet(float)->char[]::: partial escape unsafe store test test char array with float store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithFloatStore()->void::: partial escape unsafe store test test char array with float store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithDoubleStoreSnippet(double)->char[]::: partial escape unsafe store test test char array with double store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithDoubleStore()->void::: partial escape unsafe store test test char array with double store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithByteStoreSnippet(byte)->short[]::: partial escape unsafe store test test short array with byte store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithByteStore()->void::: partial escape unsafe store test test short array with byte store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithCharStoreSnippet(char)->short[]::: partial escape unsafe store test test short array with char store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithCharStore()->void::: partial escape unsafe store test test short array with char store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithIntStoreSnippet(int)->short[]::: partial escape unsafe store test test short array with int store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithIntStore()->void::: partial escape unsafe store test test short array with int store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithLongStoreSnippet(long)->short[]::: partial escape unsafe store test test short array with long store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithLongStore()->void::: partial escape unsafe store test test short array with long store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithFloatStoreSnippet(float)->short[]::: partial escape unsafe store test test short array with float store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithFloatStore()->void::: partial escape unsafe store test test short array with float store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithDoubleStoreSnippet(double)->short[]::: partial escape unsafe store test test short array with double store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithDoubleStore()->void::: partial escape unsafe store test test short array with double store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithByteStoreSnippet(byte)->int[]::: partial escape unsafe store test test int array with byte store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithByteStore()->void::: partial escape unsafe store test test int array with byte store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithCharStoreSnippet(char)->int[]::: partial escape unsafe store test test int array with char store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithCharStore()->void::: partial escape unsafe store test test int array with char store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithShortStoreSnippet(short)->int[]::: partial escape unsafe store test test int array with short store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithShortStore()->void::: partial escape unsafe store test test int array with short store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithLongStoreSnippet(long)->int[]::: partial escape unsafe store test test int array with long store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithLongStore()->void::: partial escape unsafe store test test int array with long store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithFloatStoreSnippet(float)->int[]::: partial escape unsafe store test test int array with float store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithFloatStore()->void::: partial escape unsafe store test test int array with float store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithDoubleStoreSnippet(double)->int[]::: partial escape unsafe store test test int array with double store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithDoubleStore()->void::: partial escape unsafe store test test int array with double store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithByteStoreSnippet(byte)->long[]::: partial escape unsafe store test test long array with byte store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithByteStore()->void::: partial escape unsafe store test test long array with byte store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithCharStoreSnippet(char)->long[]::: partial escape unsafe store test test long array with char store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithCharStore()->void::: partial escape unsafe store test test long array with char store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithShortStoreSnippet(short)->long[]::: partial escape unsafe store test test long array with short store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithShortStore()->void::: partial escape unsafe store test test long array with short store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithIntStoreSnippet(int)->long[]::: partial escape unsafe store test test long array with int store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithIntStore()->void::: partial escape unsafe store test test long array with int store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithFloatStoreSnippet(float)->long[]::: partial escape unsafe store test test long array with float store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithFloatStore()->void::: partial escape unsafe store test test long array with float store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithDoubleStoreSnippet(double)->long[]::: partial escape unsafe store test test long array with double store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithDoubleStore()->void::: partial escape unsafe store test test long array with double store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithByteStoreSnippet(byte)->float[]::: partial escape unsafe store test test float array with byte store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithByteStore()->void::: partial escape unsafe store test test float array with byte store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithCharStoreSnippet(char)->float[]::: partial escape unsafe store test test float array with char store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithCharStore()->void::: partial escape unsafe store test test float array with char store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithShortStoreSnippet(short)->float[]::: partial escape unsafe store test test float array with short store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithShortStore()->void::: partial escape unsafe store test test float array with short store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithIntStoreSnippet(int)->float[]::: partial escape unsafe store test test float array with int store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithIntStore()->void::: partial escape unsafe store test test float array with int store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithLongStoreSnippet(long)->float[]::: partial escape unsafe store test test float array with long store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithLongStore()->void::: partial escape unsafe store test test float array with long store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithDoubleStoreSnippet(double)->float[]::: partial escape unsafe store test test float array with double store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithDoubleStore()->void::: partial escape unsafe store test test float array with double store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithByteStoreSnippet(byte)->double[]::: partial escape unsafe store test test double array with byte store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithByteStore()->void::: partial escape unsafe store test test double array with byte store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithCharStoreSnippet(char)->double[]::: partial escape unsafe store test test double array with char store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithCharStore()->void::: partial escape unsafe store test test double array with char store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithShortStoreSnippet(short)->double[]::: partial escape unsafe store test test double array with short store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithShortStore()->void::: partial escape unsafe store test test double array with short store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithIntStoreSnippet(int)->double[]::: partial escape unsafe store test test double array with int store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithIntStore()->void::: partial escape unsafe store test test double array with int store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithLongStoreSnippet(long)->double[]::: partial escape unsafe store test test double array with long store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithLongStore()->void::: partial escape unsafe store test test double array with long store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithFloatStoreSnippet(float)->double[]::: partial escape unsafe store test test double array with float store snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithFloatStore()->void::: partial escape unsafe store test test double array with float store
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithCharStoreAndReadSnippet(char)->byte::: partial escape unsafe store test test byte array with char store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithCharStoreAndRead()->void::: partial escape unsafe store test test byte array with char store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithShortStoreAndReadSnippet(short)->byte::: partial escape unsafe store test test byte array with short store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithShortStoreAndRead()->void::: partial escape unsafe store test test byte array with short store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithIntStoreAndReadSnippet(int)->byte::: partial escape unsafe store test test byte array with int store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithIntStoreAndRead()->void::: partial escape unsafe store test test byte array with int store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithLongStoreAndReadSnippet(long)->byte::: partial escape unsafe store test test byte array with long store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithLongStoreAndRead()->void::: partial escape unsafe store test test byte array with long store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithFloatStoreAndReadSnippet(float)->byte::: partial escape unsafe store test test byte array with float store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithFloatStoreAndRead()->void::: partial escape unsafe store test test byte array with float store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithDoubleStoreAndReadSnippet(double)->byte::: partial escape unsafe store test test byte array with double store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testByteArrayWithDoubleStoreAndRead()->void::: partial escape unsafe store test test byte array with double store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithByteStoreAndReadSnippet(byte)->char::: partial escape unsafe store test test char array with byte store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithByteStoreAndRead()->void::: partial escape unsafe store test test char array with byte store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithShortStoreAndReadSnippet(short)->char::: partial escape unsafe store test test char array with short store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithShortStoreAndRead()->void::: partial escape unsafe store test test char array with short store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithIntStoreAndReadSnippet(int)->char::: partial escape unsafe store test test char array with int store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithIntStoreAndRead()->void::: partial escape unsafe store test test char array with int store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithLongStoreAndReadSnippet(long)->char::: partial escape unsafe store test test char array with long store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithLongStoreAndRead()->void::: partial escape unsafe store test test char array with long store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithFloatStoreAndReadSnippet(float)->char::: partial escape unsafe store test test char array with float store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithFloatStoreAndRead()->void::: partial escape unsafe store test test char array with float store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithDoubleStoreAndReadSnippet(double)->char::: partial escape unsafe store test test char array with double store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testCharArrayWithDoubleStoreAndRead()->void::: partial escape unsafe store test test char array with double store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithByteStoreAndReadSnippet(byte)->short::: partial escape unsafe store test test short array with byte store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithByteStoreAndRead()->void::: partial escape unsafe store test test short array with byte store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithCharStoreAndReadSnippet(char)->short::: partial escape unsafe store test test short array with char store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithCharStoreAndRead()->void::: partial escape unsafe store test test short array with char store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithIntStoreAndReadSnippet(int)->short::: partial escape unsafe store test test short array with int store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithIntStoreAndRead()->void::: partial escape unsafe store test test short array with int store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithLongStoreAndReadSnippet(long)->short::: partial escape unsafe store test test short array with long store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithLongStoreAndRead()->void::: partial escape unsafe store test test short array with long store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithFloatStoreAndReadSnippet(float)->short::: partial escape unsafe store test test short array with float store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithFloatStoreAndRead()->void::: partial escape unsafe store test test short array with float store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithDoubleStoreAndReadSnippet(double)->short::: partial escape unsafe store test test short array with double store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testShortArrayWithDoubleStoreAndRead()->void::: partial escape unsafe store test test short array with double store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithByteStoreAndReadSnippet(byte)->int::: partial escape unsafe store test test int array with byte store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithByteStoreAndRead()->void::: partial escape unsafe store test test int array with byte store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithCharStoreAndReadSnippet(char)->int::: partial escape unsafe store test test int array with char store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithCharStoreAndRead()->void::: partial escape unsafe store test test int array with char store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithShortStoreAndReadSnippet(short)->int::: partial escape unsafe store test test int array with short store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithShortStoreAndRead()->void::: partial escape unsafe store test test int array with short store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithLongStoreAndReadSnippet(long)->int::: partial escape unsafe store test test int array with long store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithLongStoreAndRead()->void::: partial escape unsafe store test test int array with long store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithFloatStoreAndReadSnippet(float)->int::: partial escape unsafe store test test int array with float store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithFloatStoreAndRead()->void::: partial escape unsafe store test test int array with float store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithDoubleStoreAndReadSnippet(double)->int::: partial escape unsafe store test test int array with double store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testIntArrayWithDoubleStoreAndRead()->void::: partial escape unsafe store test test int array with double store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithByteStoreAndReadSnippet(byte)->long::: partial escape unsafe store test test long array with byte store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithByteStoreAndRead()->void::: partial escape unsafe store test test long array with byte store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithCharStoreAndReadSnippet(char)->long::: partial escape unsafe store test test long array with char store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithCharStoreAndRead()->void::: partial escape unsafe store test test long array with char store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithShortStoreAndReadSnippet(short)->long::: partial escape unsafe store test test long array with short store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithShortStoreAndRead()->void::: partial escape unsafe store test test long array with short store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithIntStoreAndReadSnippet(int)->long::: partial escape unsafe store test test long array with int store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithIntStoreAndRead()->void::: partial escape unsafe store test test long array with int store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithFloatStoreAndReadSnippet(float)->long::: partial escape unsafe store test test long array with float store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithFloatStoreAndRead()->void::: partial escape unsafe store test test long array with float store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithDoubleStoreAndReadSnippet(double)->long::: partial escape unsafe store test test long array with double store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testLongArrayWithDoubleStoreAndRead()->void::: partial escape unsafe store test test long array with double store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithByteStoreAndReadSnippet(byte)->float::: partial escape unsafe store test test float array with byte store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithByteStoreAndRead()->void::: partial escape unsafe store test test float array with byte store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithCharStoreAndReadSnippet(char)->float::: partial escape unsafe store test test float array with char store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithCharStoreAndRead()->void::: partial escape unsafe store test test float array with char store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithShortStoreAndReadSnippet(short)->float::: partial escape unsafe store test test float array with short store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithShortStoreAndRead()->void::: partial escape unsafe store test test float array with short store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithIntStoreAndReadSnippet(int)->float::: partial escape unsafe store test test float array with int store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithIntStoreAndRead()->void::: partial escape unsafe store test test float array with int store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithLongStoreAndReadSnippet(long)->float::: partial escape unsafe store test test float array with long store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithLongStoreAndRead()->void::: partial escape unsafe store test test float array with long store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithDoubleStoreAndReadSnippet(double)->float::: partial escape unsafe store test test float array with double store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testFloatArrayWithDoubleStoreAndRead()->void::: partial escape unsafe store test test float array with double store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithByteStoreAndReadSnippet(byte)->double::: partial escape unsafe store test test double array with byte store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithByteStoreAndRead()->void::: partial escape unsafe store test test double array with byte store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithCharStoreAndReadSnippet(char)->double::: partial escape unsafe store test test double array with char store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithCharStoreAndRead()->void::: partial escape unsafe store test test double array with char store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithShortStoreAndReadSnippet(short)->double::: partial escape unsafe store test test double array with short store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithShortStoreAndRead()->void::: partial escape unsafe store test test double array with short store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithIntStoreAndReadSnippet(int)->double::: partial escape unsafe store test test double array with int store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithIntStoreAndRead()->void::: partial escape unsafe store test test double array with int store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithLongStoreAndReadSnippet(long)->double::: partial escape unsafe store test test double array with long store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithLongStoreAndRead()->void::: partial escape unsafe store test test double array with long store and read
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithFloatStoreAndReadSnippet(float)->double::: partial escape unsafe store test test double array with float store and read snippet
org.graalvm.compiler.core.test.ea.PartialEscapeUnsafeStoreTest#testDoubleArrayWithFloatStoreAndRead()->void::: partial escape unsafe store test test double array with float store and read
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#getDefaultHighTierContext()->HighTierContext:::These tests assume all code paths are reachable so disable profile based dead code removal.
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippet1(int)->void::: assertions test snippet1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#test1()->void::: assertions test test1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippet2(int)->void::: assertions test snippet2
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#test2()->void::: assertions test test2
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippet3(int)->void::: assertions test snippet3
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#test3()->void::: assertions test test3
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetHere1(int)->void::: assertions test snippet here1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testHere1()->void::: assertions test test here1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetHere2(int)->void::: assertions test snippet here2
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testHere2()->void::: assertions test test here2
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetHere3(int)->void::: assertions test snippet here3
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testHere3()->void::: assertions test test here3
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetBoxing1(int)->void::: assertions test snippet boxing1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testBoxing1()->void::: assertions test test boxing1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetBoxing2(int)->void::: assertions test snippet boxing2
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testBoxing2()->void::: assertions test test boxing2
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetControlFlow1(boolean, int)->void::: assertions test snippet control flow1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testControlFlow1()->void::: assertions test test control flow1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetControlFlow2(boolean, int)->void::: assertions test snippet control flow2
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testControlFlow2()->void::: assertions test test control flow2
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetControlFlow3(boolean, int)->void::: assertions test snippet control flow3
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testControlFlow3()->void::: assertions test test control flow3
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetControlFlow4(boolean, int)->void::: assertions test snippet control flow4
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testControlFlow4()->void::: assertions test test control flow4
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetControlFlow5(boolean, int)->void::: assertions test snippet control flow5
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testControlFlow5()->void::: assertions test test control flow5
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetIndirect1(boolean, int)->void::: assertions test snippet indirect1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testIndirect1()->void::: assertions test test indirect1
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#snippetIndirect2(boolean, int)->void::: assertions test snippet indirect2
org.graalvm.compiler.core.test.ea.PEAAssertionsTest#testIndirect2()->void::: assertions test test indirect2
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testIndexed1Snippet(int[])->int::: read elimination test test indexed1 snippet
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testIndexed1()->void::: read elimination test test indexed1
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testIndexed2Snippet(int, int[])->int::: read elimination test test indexed2 snippet
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testIndexed2()->void::: read elimination test test indexed2
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testIndexed3Snippet(int, int[], short[])->int::: read elimination test test indexed3 snippet
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testIndexed3()->void::: read elimination test test indexed3
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testIndexed4Snippet(int[])->int::: read elimination test test indexed4 snippet
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testIndexed4()->void::: read elimination test test indexed4
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testUnsafe1Snippet(int, int[])->int::: read elimination test test unsafe1 snippet
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testUnsafe1()->void::: read elimination test test unsafe1
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testUnsafe2Snippet(int, Object)->int::: read elimination test test unsafe2 snippet
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testUnsafe2()->void::: read elimination test test unsafe2
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testUnsafe3Snippet(int, Object[])->int::: read elimination test test unsafe3 snippet
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testUnsafe3()->void::: read elimination test test unsafe3
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testUnsafe4Snippet(int, Object[])->int::: read elimination test test unsafe4 snippet
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#testUnsafe4()->void::: read elimination test test unsafe4
org.graalvm.compiler.core.test.ea.PEAReadEliminationTest#processMethod(String)->StructuredGraph::: read elimination test process method
org.graalvm.compiler.core.test.ea.PoorMansEATest#test1Snippet()->A::: poor mans test test1 snippet
org.graalvm.compiler.core.test.ea.PoorMansEATest#test1()->void::: poor mans test test1
org.graalvm.compiler.core.test.ea.TrufflePEATest#unsafeAccessToLongArray(int, Frame)->int::: truffle test unsafe access to long array
org.graalvm.compiler.core.test.ea.TrufflePEATest#testUnsafeAccessToLongArray()->void::: truffle test test unsafe access to long array
org.graalvm.compiler.core.test.ea.TrufflePEATest#newFrame(long)->long::: truffle test new frame
org.graalvm.compiler.core.test.ea.TrufflePEATest#testNewFrame()->void::: truffle test test new frame
org.graalvm.compiler.core.test.ea.TrufflePEATest#processMethod(String)->StructuredGraph::: truffle test process method
org.graalvm.compiler.core.test.ea.TrufflePEATest#accessDynamicObject(double)->double::: truffle test access dynamic object
org.graalvm.compiler.core.test.ea.TrufflePEATest#testAccessDynamicObject()->void::: truffle test test access dynamic object
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothVirtualNoMatch()->boolean::: unsafe compare and swap virtualization test both virtual no match
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothVirtualNoMatchTest()->void::: unsafe compare and swap virtualization test both virtual no match test
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothVirtualMatch()->boolean::: unsafe compare and swap virtualization test both virtual match
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothVirtualMatchTest()->void::: unsafe compare and swap virtualization test both virtual match test
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#expectedVirtualMatch()->boolean::: unsafe compare and swap virtualization test expected virtual match
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#expectedVirtualMatchTest()->void::: unsafe compare and swap virtualization test expected virtual match test
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#expectedVirtualNoMatch()->boolean::: unsafe compare and swap virtualization test expected virtual no match
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#expectedVirtualNoMatchTest()->void::: unsafe compare and swap virtualization test expected virtual no match test
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothNonVirtualNoMatch()->boolean::: unsafe compare and swap virtualization test both non virtual no match
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothNonVirtualNoMatchTest()->void::: unsafe compare and swap virtualization test both non virtual no match test
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothNonVirtualMatch()->boolean::: unsafe compare and swap virtualization test both non virtual match
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothNonVirtualMatchTest()->void::: unsafe compare and swap virtualization test both non virtual match test
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#onlyInitialValueVirtualNoMatch()->boolean::: unsafe compare and swap virtualization test only initial value virtual no match
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#onlyInitialValueVirtualNoMatchTest()->void::: unsafe compare and swap virtualization test only initial value virtual no match test
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#onlyInitialValueVirtualMatch()->boolean::: unsafe compare and swap virtualization test only initial value virtual match
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#onlyInitialValueVirtualMatchTest()->void::: unsafe compare and swap virtualization test only initial value virtual match test
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothVirtualNoMatchArray()->boolean::: unsafe compare and swap virtualization test both virtual no match array
org.graalvm.compiler.core.test.ea.UnsafeCompareAndSwapVirtualizationTest#bothVirtualNoMatchArrayTest()->void::: unsafe compare and swap virtualization test both virtual no match array test
org.graalvm.compiler.core.test.ea.UnsafeEATest#testEscapeAnalysis(String, JavaConstant, boolean)->void::: unsafe test test escape analysis
org.graalvm.compiler.core.test.ea.UnsafeEATest#canonicalizeGraph()->void::: unsafe test canonicalize graph
org.graalvm.compiler.core.test.ea.UnsafeEATest#postEACanonicalizeGraph()->void::: unsafe test post canonicalize graph
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleInt()->void::: unsafe test test simple int
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleIntSnippet()->int::: unsafe test test simple int snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testMaterializedInt()->void::: unsafe test test materialized int
org.graalvm.compiler.core.test.ea.UnsafeEATest#testMaterializedIntSnippet()->TestClassInt::: unsafe test test materialized int snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleDouble()->void::: unsafe test test simple double
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleDoubleSnippet()->double::: unsafe test test simple double snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleDoubleOverwriteWithInt()->void::: unsafe test test simple double overwrite with int
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleDoubleOverwriteWithIntSnippet()->int::: unsafe test test simple double overwrite with int snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleDoubleOverwriteWithSecondInt()->void::: unsafe test test simple double overwrite with second int
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleDoubleOverwriteWithSecondIntSnippet()->int::: unsafe test test simple double overwrite with second int snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleDoubleOverwriteWithFirstInt()->void::: unsafe test test simple double overwrite with first int
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleDoubleOverwriteWithFirstIntSnippet()->int::: unsafe test test simple double overwrite with first int snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleLongOverwriteWithSecondInt()->void::: unsafe test test simple long overwrite with second int
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleLongOverwriteWithSecondIntSnippet()->int::: unsafe test test simple long overwrite with second int snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleLongOverwriteWithFirstInt()->void::: unsafe test test simple long overwrite with first int
org.graalvm.compiler.core.test.ea.UnsafeEATest#testSimpleLongOverwriteWithFirstIntSnippet()->int::: unsafe test test simple long overwrite with first int snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testMergedDouble()->void::: unsafe test test merged double
org.graalvm.compiler.core.test.ea.UnsafeEATest#testMergedDoubleSnippet(boolean)->double::: unsafe test test merged double snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testMergedVirtualObjects()->void::: unsafe test test merged virtual objects
org.graalvm.compiler.core.test.ea.UnsafeEATest#testMergedVirtualObjectsSnippet(int)->TestClassInt::: unsafe test test merged virtual objects snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testMaterializedDouble()->void::: unsafe test test materialized double
org.graalvm.compiler.core.test.ea.UnsafeEATest#testMaterializedDoubleSnippet()->TestClassInt::: unsafe test test materialized double snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testDeoptDoubleVar()->void::: unsafe test test deopt double var
org.graalvm.compiler.core.test.ea.UnsafeEATest#testDeoptDoubleVarSnippet()->TestClassInt::: unsafe test test deopt double var snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testDeoptDoubleConstant()->void::: unsafe test test deopt double constant
org.graalvm.compiler.core.test.ea.UnsafeEATest#testDeoptDoubleConstantSnippet()->TestClassInt::: unsafe test test deopt double constant snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testDeoptLongVar()->void::: unsafe test test deopt long var
org.graalvm.compiler.core.test.ea.UnsafeEATest#testDeoptLongVarSnippet()->TestClassInt::: unsafe test test deopt long var snippet
org.graalvm.compiler.core.test.ea.UnsafeEATest#testDeoptLongConstant()->void::: unsafe test test deopt long constant
org.graalvm.compiler.core.test.ea.UnsafeEATest#testDeoptLongConstantSnippet()->TestClassInt::: unsafe test test deopt long constant snippet

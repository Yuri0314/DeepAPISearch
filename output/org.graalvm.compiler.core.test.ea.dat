EATestBase#testEscapeAnalysis(String, JavaConstant, boolean):::Runs Escape Analysis on the given snippet and makes sure that no allocations remain in the graph.:::testEscapeAnalysis
EscapeAnalysisTest#testMonitor2Snippet():::This test case differs from the last one in that it requires inlining within a synchronized region.:::x->new->Integer->y->new->Double->z->new->Object->synchronized->synchronized->synchronized->notInlineable->return->x->intValue
EscapeAnalysisTest#testChangeHandling():::Tests that a graph with allocations that does not make progress during PEA will not be changed.:::prepareGraph->Assert->graph->getNodes->filter->count->assertEquals->Assert->graph->getNodes->filter->count->assertEquals->nodes->graph->getNodes->snapshot->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->Assert->nodes->size->graph->getNodeCount->assertEquals->foreach->Assert->node->isAlive->assertTrue
EscapeAnalysisTest#testRemovalSpecialCase():::Test the case where allocations before and during a loop that have no usages other than their phi need to be recognized as an important change:::prepareGraph->Assert->graph->getNodes->filter->count->assertEquals->graph->graph->getNodes->filter->first->graph->ConstantNode->forInt->unique->replaceFixedWithFloating->new->CanonicalizerPhase->apply->new->CanonicalizerPhase->graph->getOptions->new->PartialEscapePhase->apply->Assert->graph->getNodes->filter->count->assertEquals
EscapeAnalysisTest#testNewNode():::This test makes sure that the allocation of a Node can be removed:::Assume->assumeFalse->testEscapeAnalysis
PartialEscapeAnalysisTest#testDeoptWithVirtualObjects():::Tests deoptimizing with virtual objects in debug info.:::assertFalse->test->assertTrue
PartialEscapeAnalysisTreesTest#testGraph(String):::Prepare a graph that includes some blackholes and then remove the blackholes and compile normally to create an unusual situation for PEA.:::method->getResolvedJavaMethod->prepareGraph->try->s->graph->getDebug->getClass->getCodeCache->scope->foreach->graph->getNodes->filter->graph->removeFixed->new->DeadCodeEliminationPhase->apply->new->CanonicalizerPhase->apply->code->getCode->r->executeExpected->expectedInstances->countInstances->r2->code->executeVarargs->Assert->r2->countInstances->assertEquals->executeExpected->countInstances->code->executeVarargs->Assert->r2->countInstances->assertEquals->catch->throw->graph->getDebug->handle->finally
PEAAssertionsTest#getDefaultHighTierContext():::These tests assume all code paths are reachable so disable profile based dead code removal.:::return->getProviders->getDefaultGraphBuilderSuite->remove->new->HighTierContext

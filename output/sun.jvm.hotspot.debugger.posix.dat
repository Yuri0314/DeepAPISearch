AddressDataSource#readByte()::: address data source read byte:::try->res->addr->getCIntegerAt->return->catch->throw->Long->e->getAddress->toHexString->new->IOException->initCause->throw->new->IOException->initCause->finally
AddressDataSource#readShort()::: address data source read short:::b1->readByte->b2->readByte->return
AddressDataSource#readInt()::: address data source read int:::b1->readByte->b2->readByte->b3->readByte->b4->readByte->return
AddressDataSource#readLong()::: address data source read long:::b1->readByte->b2->readByte->b3->readByte->b4->readByte->b5->readByte->b6->readByte->b7->readByte->b8->readByte->return
AddressDataSource#read(byte[])::: address data source read:::for->i->return
AddressDataSource#seek(long)::: address data source seek:::
AddressDataSource#getFilePointer()::: address data source get file pointer:::return
AddressDataSource#close()::: address data source close:::
DSO.IsDSO#computeValue()::: is o compute value:::return->getFile->getHeader->getFileType
DSO.ELFFileByName#computeValue()::: file by name compute value:::return->ELFFileParser->getParser->parse
DSO.ELFFileByAddress#computeValue()::: file by address compute value:::return->ELFFileParser->getParser->new->AddressDataSource->parse
DSO#getName()::: o get name:::return
DSO#getBase()::: o get base:::return
DSO#setBase(Address):::if this .so is unloaded and re-loaded in the same process at a different         base, change the base by calling this to avoid re-parsing the ELF.:::if->new->ELFFileByAddress->new->IsDSO
DSO#getSize()::: o get size:::return
DSO#getDebugInfoDataBase()::: o get debug info data base:::return
DSO#debugInfoForPC(Address)::: o debug info for c:::return
DSO#closestSymbolToPC(Address)::: o closest symbol to c:::dso->isDSO->offset->pcAsAddr->minus->getAddressValue->sym->getFile->getHeader->getELFSymbol->return->sym->getName->sym->getValue->createClosestSymbol
DSO#lineNumberForPC(Address)::: o line number for c:::return
DSO#isDSO():::return true if file is a .so:::return->dso->getValue
DSO#lookupSymbol(String):::Look up a symbol; returns absolute address or null if symbol was         not found.:::sym->getFile->getHeader->getELFSymbol->if->return->value->sym->getValue->if->isDSO->return->addr->addOffsetTo->else->return->newAddress
DSO#equals(Object)::: o equals:::if->return->other->return->getBase->other->getBase->equals
DSO#hashCode()::: o hash code:::return->getBase->hashCode
DSO#getFile()::: o get file:::return->file->getValue
DSO#newAddress(long)::: o new address:::
DSO#getAddressValue(Address)::: o get address value:::
DSO#createClosestSymbol(String, long)::: o create closest symbol:::return->new->ClosestSymbol

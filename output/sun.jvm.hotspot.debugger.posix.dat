sun.jvm.hotspot.debugger.posix.AddressDataSource#readByte()->byte::: address data source read byte
sun.jvm.hotspot.debugger.posix.AddressDataSource#readShort()->short::: address data source read short
sun.jvm.hotspot.debugger.posix.AddressDataSource#readInt()->int::: address data source read int
sun.jvm.hotspot.debugger.posix.AddressDataSource#readLong()->long::: address data source read long
sun.jvm.hotspot.debugger.posix.AddressDataSource#read(byte[])->int::: address data source read
sun.jvm.hotspot.debugger.posix.AddressDataSource#seek(long)->void::: address data source seek
sun.jvm.hotspot.debugger.posix.AddressDataSource#getFilePointer()->long::: address data source get file pointer
sun.jvm.hotspot.debugger.posix.AddressDataSource#close()->void::: address data source close
sun.jvm.hotspot.debugger.posix.DSO.IsDSO#computeValue()->boolean::: is o compute value
sun.jvm.hotspot.debugger.posix.DSO.ELFFileByName#computeValue()->Object::: file by name compute value
sun.jvm.hotspot.debugger.posix.DSO.ELFFileByAddress#computeValue()->Object::: file by address compute value
sun.jvm.hotspot.debugger.posix.DSO#getName()->String::: o get name
sun.jvm.hotspot.debugger.posix.DSO#getBase()->Address::: o get base
sun.jvm.hotspot.debugger.posix.DSO#setBase(Address)->void:::if this .so is unloaded and re-loaded in the same process at a different         base, change the base by calling this to avoid re-parsing the ELF.
sun.jvm.hotspot.debugger.posix.DSO#getSize()->long::: o get size
sun.jvm.hotspot.debugger.posix.DSO#getDebugInfoDataBase()->CDebugInfoDataBase::: o get debug info data base
sun.jvm.hotspot.debugger.posix.DSO#debugInfoForPC(Address)->BlockSym::: o debug info for c
sun.jvm.hotspot.debugger.posix.DSO#closestSymbolToPC(Address)->ClosestSymbol::: o closest symbol to c
sun.jvm.hotspot.debugger.posix.DSO#lineNumberForPC(Address)->LineNumberInfo::: o line number for c
sun.jvm.hotspot.debugger.posix.DSO#isDSO()->boolean:::return true if file is a .so
sun.jvm.hotspot.debugger.posix.DSO#lookupSymbol(String)->Address:::Look up a symbol; returns absolute address or null if symbol was         not found.
sun.jvm.hotspot.debugger.posix.DSO#equals(Object)->boolean::: o equals
sun.jvm.hotspot.debugger.posix.DSO#hashCode()->int::: o hash code
sun.jvm.hotspot.debugger.posix.DSO#getFile()->ELFFile::: o get file
sun.jvm.hotspot.debugger.posix.DSO#newAddress(long)->Address::: o new address
sun.jvm.hotspot.debugger.posix.DSO#getAddressValue(Address)->long::: o get address value
sun.jvm.hotspot.debugger.posix.DSO#createClosestSymbol(String, long)->ClosestSymbol::: o create closest symbol

ProfileNode_OptionDescriptors#get(String)::: profile node_ option descriptors get:::switch->return->OptionDescriptor->create->return
ProfileNode_OptionDescriptors#iterator()::: profile node_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
ProfileBranchNode#bci()::: profile branch node bci:::return
ProfileBranchNode#targetBci()::: profile branch node target bci:::return
ProfileBranchNode#branchCondition()::: profile branch node branch condition:::return
ProfileBranchNode#hasCondition()::: profile branch node has condition:::return
ProfileBranchNode#canBeMergedWith(ProfileNode)::: profile branch node can be merged with:::if->that->return->equals->return
ProfileBranchNode#getProfileBranchNodes(StructuredGraph):::Gathers all the ProfileBranchNodes that are inputs to the StructuredGraph#getNodes() live nodes in a given graph.:::return->graph->getNodes->filter
ProfileInvokeNode#canBeMergedWith(ProfileNode)::: profile invoke node can be merged with:::if->that->return->equals->return
ProfileInvokeNode#getProfileInvokeNodes(StructuredGraph):::Gathers all the ProfileInvokeNodes that are inputs to the StructuredGraph#getNodes() live nodes in a given graph.:::return->graph->getNodes->filter
ProfileNode#canDeoptimize()::: profile node can deoptimize:::return
ProfileNode#lower(LoweringTool)::: profile node lower:::tool->getLowerer->lower
ProfileNode#getProfiledMethod()::: profile node get profiled method:::return
ProfileNode#getRandom()::: profile node get random:::return
ProfileNode#setRandom(ValueNode)::: profile node set random:::updateUsages
ProfileNode#getStep()::: profile node get step:::return
ProfileNode#setStep(int)::: profile node set step:::
ProfileNode#getProbabilityLog():::Get the logarithm base 2 of the profile probability.:::return
ProfileNode#getProfileNodes(StructuredGraph):::Gathers all the ProfileNodes that are inputs to the StructuredGraph#getNodes() live nodes in a given graph.:::return->graph->getNodes->filter
ProfileNode#canBeMergedWith(ProfileNode)::: profile node can be merged with:::
ProfileNode#simplify(SimplifierTool)::: profile node simplify:::for->p->predecessor->p->predecessor
ProfileWithNotificationNode#getNotificationFreqLog():::Get the logarithm base 2 of the notification frequency.:::return
ProfileWithNotificationNode#setNotificationFreqLog(int):::Set the logarithm base 2 of the notification frequency.:::
ProfileWithNotificationNode#setNotificationOff()::: profile with notification node set notification off:::setNotificationFreqLog
RandomSeedNode#generate(NodeLIRBuilderTool)::: random seed node generate:::result->gen->getLIRGeneratorTool->emitRandomSeed->gen->setResult

AMD64HotSpotJVMCIBackendFactory#computeFeatures(AMD64HotSpotVMConfig)::: d64 hot spot backend factory compute features:::features->EnumSet->noneOf->if->features->add->features->add->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->return
AMD64HotSpotJVMCIBackendFactory#computeFlags(AMD64HotSpotVMConfig)::: d64 hot spot backend factory compute flags:::flags->EnumSet->noneOf->if->flags->add->if->flags->add->return
AMD64HotSpotJVMCIBackendFactory#createTarget(AMD64HotSpotVMConfig)::: d64 hot spot backend factory create target:::stackFrameAlignment->implicitNullCheckLimit->inlineObjects->arch->computeFeatures->computeFlags->new->AMD64->return->new->TargetDescription
AMD64HotSpotJVMCIBackendFactory#createConstantReflection(HotSpotJVMCIRuntime)::: d64 hot spot backend factory create constant reflection:::return->new->HotSpotConstantReflectionProvider
AMD64HotSpotJVMCIBackendFactory#createRegisterConfig(AMD64HotSpotVMConfig, TargetDescription)::: d64 hot spot backend factory create register config:::return->new->AMD64HotSpotRegisterConfig
AMD64HotSpotJVMCIBackendFactory#createCodeCache(HotSpotJVMCIRuntime, TargetDescription, RegisterConfig)::: d64 hot spot backend factory create code cache:::return->new->HotSpotCodeCacheProvider
AMD64HotSpotJVMCIBackendFactory#createMetaAccess(HotSpotJVMCIRuntime)::: d64 hot spot backend factory create meta access:::return->new->HotSpotMetaAccessProvider
AMD64HotSpotJVMCIBackendFactory#getArchitecture()::: d64 hot spot backend factory get architecture:::return
AMD64HotSpotJVMCIBackendFactory#toString()::: d64 hot spot backend factory to string:::return->getArchitecture
AMD64HotSpotJVMCIBackendFactory#createJVMCIBackend(HotSpotJVMCIRuntime, JVMCIBackend)::: d64 hot spot backend factory create backend:::config->runtime->getConfigStore->new->AMD64HotSpotVMConfig->target->createTarget->regConfig->codeCache->constantReflection->metaAccess->stackIntrospection->try->t->timer->try->rt->timer->createMetaAccess->catch->finally->try->rt->timer->createRegisterConfig->catch->finally->try->rt->timer->createCodeCache->catch->finally->try->rt->timer->createConstantReflection->catch->finally->try->rt->timer->new->HotSpotStackIntrospection->catch->finally->catch->finally->try->rt->timer->return->createBackend->catch->finally
AMD64HotSpotJVMCIBackendFactory#createBackend(HotSpotMetaAccessProvider, HotSpotCodeCacheProvider, ConstantReflectionProvider, StackIntrospection)::: d64 hot spot backend factory create backend:::return->new->JVMCIBackend
AMD64HotSpotRegisterConfig#getAllocatableRegisters()::: d64 hot spot register config get allocatable registers:::return
AMD64HotSpotRegisterConfig#filterAllocatableRegisters(PlatformKind, RegisterArray)::: d64 hot spot register config filter allocatable registers:::list->new->ArrayList<>->foreach->if->reg->getRegisterCategory->canStoreValue->list->add->ret->new->RegisterArray->return
AMD64HotSpotRegisterConfig#getAttributesMap()::: d64 hot spot register config get attributes map:::return->attributesMap->clone
AMD64HotSpotRegisterConfig#initAllocatable(Architecture, boolean)::: d64 hot spot register config init allocatable:::allRegisters->arch->getAvailableValueRegisters->registers->allRegisters->size->reservedRegisters->size->new->RegisterArr->reservedRegistersList->reservedRegisters->asList->idx->foreach->if->reservedRegistersList->contains->continue->if->reg->equals->continue->return->new->RegisterArray
AMD64HotSpotRegisterConfig#getCallerSaveRegisters()::: d64 hot spot register config get caller save registers:::return
AMD64HotSpotRegisterConfig#getCalleeSaveRegisters()::: d64 hot spot register config get callee save registers:::return
AMD64HotSpotRegisterConfig#areAllAllocatableRegistersCallerSaved()::: d64 hot spot register config are all allocatable registers caller saved:::return
AMD64HotSpotRegisterConfig#getCallingConvention(Type, JavaType, JavaType[], ValueKindFactory)::: d64 hot spot register config get calling convention:::hotspotType->if->return->callingConvention->return->callingConvention
AMD64HotSpotRegisterConfig#getCallingConventionRegisters(Type, JavaKind)::: d64 hot spot register config get calling convention registers:::hotspotType->switch->return->return->throw->JVMCIError->shouldNotReachHere
AMD64HotSpotRegisterConfig#callingConvention(RegisterArray, RegisterArray, boolean, JavaType, JavaType[], HotSpotCallingConventionType, ValueKindFactory):::Hand out registers matching the calling convention from the generalParameterRegisters and xmmParameterRegisters sets:::locations->new->AllocatableValueArr->currentGeneral->currentXMM->currentStackOffset->generalParameterRegisters->size->for->i->returnKind->returnType->getJavaKind->returnLocation->getReturnRegister->valueKindFactory->returnKind->getStackKind->getValueKind->asValue->return->new->CallingConvention
AMD64HotSpotRegisterConfig#getReturnRegister(JavaKind)::: d64 hot spot register config get return register:::switch->return->return->return->throw->new->UnsupportedOperationException
AMD64HotSpotRegisterConfig#getFrameRegister()::: d64 hot spot register config get frame register:::return
AMD64HotSpotRegisterConfig#toString()::: d64 hot spot register config to string:::return->String->getAllocatableRegisters->getCallerSaveRegisters->format

org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest#checkJavaAgent()->void::: classfile bytecode provider test check java agent
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest#test()->void::: classfile bytecode provider test test
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest#checkClass(MetaAccessProvider, SnippetReflectionProvider, String)->void::: classfile bytecode provider test check class
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest#getBytecode(ClassfileBytecodeProvider, ResolvedJavaMethod)->Bytecode::: classfile bytecode provider test get bytecode
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#compare()->void::: bytecode comparer compare
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#compare0()->void::: bytecode comparer compare0
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#lookupConstant(ConstantPool, int, int)->Object::: bytecode comparer lookup constant
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#lookupField(ConstantPool, int, ResolvedJavaMethod, int)->ResolvedJavaField::: bytecode comparer lookup field
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#lookupMethod(ConstantPool, int, int)->ResolvedJavaMethod::: bytecode comparer lookup method
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#lookupMethodOrNull(ConstantPool, int, int)->ResolvedJavaMethod::: bytecode comparer lookup method or null
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#lookupType(ConstantPool, int, int)->ResolvedJavaType::: bytecode comparer lookup type
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#assertEqualsConstants(Object, Object)->void::: bytecode comparer assert equals constants
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#assertEqualFields(JavaField, JavaField)->void::: bytecode comparer assert equal fields
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#assertEqualTypes(JavaType, JavaType)->void::: bytecode comparer assert equal types
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#assertEqualMethods(ResolvedJavaMethod, ResolvedJavaMethod)->void::: bytecode comparer assert equal methods
org.graalvm.compiler.replacements.test.classfile.ClassfileBytecodeProviderTest.BytecodeComparer#typesAreRelated(ResolvedJavaMethod, ResolvedJavaMethod)->boolean:::The VM can resolve references to methods not available via reflection
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest.Original#getValue()->String::: original get value
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest#registerInvocationPlugins(InvocationPlugins)->void::: redefine intrinsic test register invocation plugins
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest#callOriginalGetValue()->String::: redefine intrinsic test call original get value
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest#callIntrinsicGetValue()->String::: redefine intrinsic test call intrinsic get value
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest#test()->void::: redefine intrinsic test test
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest#testHelper()->void::: redefine intrinsic test test helper
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest#add(JarOutputStream, Class)->void:::Adds the class file bytes for a given class to a JAR stream.
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest#redefineIntrinsic()->boolean::: redefine intrinsic test redefine intrinsic
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest#loadAgent(Path)->boolean::: redefine intrinsic test load agent
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest.RedefinerAgent#agentmain(String, Instrumentation)->void::: redefiner agent agentmain
org.graalvm.compiler.replacements.test.classfile.RedefineIntrinsicTest.Redefiner#transform(ClassLoader, String, Class, ProtectionDomain, byte[])->byte[]::: redefiner transform

AbstractCollection#iterator():::Returns an iterator over the elements contained in this collection.:::
AbstractCollection#size()::: abstract collection size:::
AbstractCollection#isEmpty()::: abstract collection is empty:::return->size
AbstractCollection#contains(Object)::: abstract collection contains:::it->iterator->if->while->it->hasNext->if->it->next->return->else->while->it->hasNext->if->o->it->next->equals->return->return
AbstractCollection#toArray()::: abstract collection to array:::r->size->new->ObjectArr->it->iterator->for->i->return->it->hasNext->finishToArray
AbstractCollection#toArray(T[])::: abstract collection to array:::size->size->r->a->getClass->getComponentType->newInstance->it->iterator->for->i->return->it->hasNext->finishToArray
AbstractCollection#finishToArray(T[], Iterator):::Reallocates the array being used within toArray when the iterator returned more elements than expected, and finishes filling it from the iterator.:::i->while->it->hasNext->cap->if->newCap->if->hugeCapacity->Arrays->copyOf->it->next->return->Arrays->copyOf
AbstractCollection#hugeCapacity(int)::: abstract collection huge capacity:::if->throw->new->OutOfMemoryError->return
AbstractCollection#add(E)::: abstract collection add:::throw->new->UnsupportedOperationException
AbstractCollection#remove(Object)::: abstract collection remove:::it->iterator->if->while->it->hasNext->if->it->next->it->remove->return->else->while->it->hasNext->if->o->it->next->equals->it->remove->return->return
AbstractCollection#containsAll(Collection)::: abstract collection contains all:::foreach->if->contains->return->return
AbstractCollection#addAll(Collection)::: abstract collection add all:::modified->foreach->if->add->return
AbstractCollection#removeAll(Collection)::: abstract collection remove all:::Objects->requireNonNull->modified->it->iterator->while->it->hasNext->if->c->it->next->contains->it->remove->return
AbstractCollection#retainAll(Collection)::: abstract collection retain all:::Objects->requireNonNull->modified->it->iterator->while->it->hasNext->if->c->it->next->contains->it->remove->return
AbstractCollection#clear()::: abstract collection clear:::it->iterator->while->it->hasNext->it->next->it->remove
AbstractCollection#toString():::Returns a string representation of this collection:::it->iterator->if->it->hasNext->return->sb->new->StringBuilder->sb->append->for
AbstractList#add(E):::Appends the specified element to the end of this list (optional operation):::size->add->return
AbstractList#get(int)::: abstract list get:::
AbstractList#set(int, E)::: abstract list set:::throw->new->UnsupportedOperationException
AbstractList#add(int, E)::: abstract list add:::throw->new->UnsupportedOperationException
AbstractList#remove(int)::: abstract list remove:::throw->new->UnsupportedOperationException
AbstractList#indexOf(Object)::: abstract list index of:::it->listIterator->if->while->it->hasNext->if->it->next->return->it->previousIndex->else->while->it->hasNext->if->o->it->next->equals->return->it->previousIndex->return
AbstractList#lastIndexOf(Object)::: abstract list last index of:::it->size->listIterator->if->while->it->hasPrevious->if->it->previous->return->it->nextIndex->else->while->it->hasPrevious->if->o->it->previous->equals->return->it->nextIndex->return
AbstractList#clear():::Removes all of the elements from this list (optional operation):::size->removeRange
AbstractList#addAll(int, Collection)::: abstract list add all:::rangeCheckForAdd->modified->foreach->add->return
AbstractList#iterator():::Returns an iterator over the elements in this list in proper sequence.:::return->new->Itr
AbstractList#listIterator()::: abstract list list iterator:::return->listIterator
AbstractList#listIterator(int)::: abstract list list iterator:::rangeCheckForAdd->return->new->ListItr
AbstractList.Itr#hasNext()::: itr has next:::return->size
AbstractList.Itr#next()::: itr next:::checkForComodification->try->i->next->get->return->catch->checkForComodification->throw->new->NoSuchElementException->finally
AbstractList.Itr#remove()::: itr remove:::if->throw->new->IllegalStateException->checkForComodification->try->AbstractList.this->remove->if->catch->throw->new->ConcurrentModificationException->finally
AbstractList.Itr#checkForComodification()::: itr check for comodification:::if->throw->new->ConcurrentModificationException
AbstractList.ListItr#hasPrevious()::: list itr has previous:::return
AbstractList.ListItr#previous()::: list itr previous:::checkForComodification->try->i->previous->get->return->catch->checkForComodification->throw->new->NoSuchElementException->finally
AbstractList.ListItr#nextIndex()::: list itr next index:::return
AbstractList.ListItr#previousIndex()::: list itr previous index:::return
AbstractList.ListItr#set(E)::: list itr set:::if->throw->new->IllegalStateException->checkForComodification->try->AbstractList.this->set->catch->throw->new->ConcurrentModificationException->finally
AbstractList.ListItr#add(E)::: list itr add:::checkForComodification->try->i->AbstractList.this->add->catch->throw->new->ConcurrentModificationException->finally
AbstractList#subList(int, int)::: abstract list sub list:::size->subListRangeCheck->return->new->RandomAccessSubList<>->new->SubList<>
AbstractList#subListRangeCheck(int, int, int)::: abstract list sub list range check:::if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->if->throw->new->IllegalArgumentException
AbstractList#equals(Object):::Compares the specified object with this list for equality:::if->return->if->return->e1->listIterator->e2->listIterator->while->e1->hasNext->e2->hasNext->o1->e1->next->o2->e2->next->if->o1->equals->return->return->e1->hasNext->e2->hasNext
AbstractList#hashCode():::Returns the hash code value for this list.:::hashCode->foreach->e->hashCode->return
AbstractList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive:::it->listIterator->for->i->n
AbstractList#rangeCheckForAdd(int)::: abstract list range check for add:::if->size->throw->outOfBoundsMsg->new->IndexOutOfBoundsException
AbstractList#outOfBoundsMsg(int)::: abstract list out of bounds msg:::return->size
AbstractList.RandomAccessSpliterator#getFence()::: random access spliterator get fence:::hi->lst->if->if->lst->size->return
AbstractList.RandomAccessSpliterator#trySplit()::: random access spliterator try split:::hi->getFence->lo->mid->return->new->RandomAccessSpliterator<>
AbstractList.RandomAccessSpliterator#tryAdvance(Consumer)::: random access spliterator try advance:::if->throw->new->NullPointerException->hi->getFence->i->if->action->get->accept->checkAbstractListModCount->return->return
AbstractList.RandomAccessSpliterator#forEachRemaining(Consumer)::: random access spliterator for each remaining:::Objects->requireNonNull->lst->hi->getFence->i->for->checkAbstractListModCount
AbstractList.RandomAccessSpliterator#estimateSize()::: random access spliterator estimate size:::return->getFence
AbstractList.RandomAccessSpliterator#characteristics()::: random access spliterator characteristics:::return
AbstractList.RandomAccessSpliterator#get(List, int)::: random access spliterator get:::try->return->list->get->catch->throw->new->ConcurrentModificationException->finally
AbstractList.RandomAccessSpliterator#checkAbstractListModCount(AbstractList, int)::: random access spliterator check abstract list mod count:::if->throw->new->ConcurrentModificationException
AbstractList.SubList#set(int, E)::: sub list set:::Objects->checkIndex->checkForComodification->return->root->set
AbstractList.SubList#get(int)::: sub list get:::Objects->checkIndex->checkForComodification->return->root->get
AbstractList.SubList#size()::: sub list size:::checkForComodification->return
AbstractList.SubList#add(int, E)::: sub list add:::rangeCheckForAdd->checkForComodification->root->add->updateSizeAndModCount
AbstractList.SubList#remove(int)::: sub list remove:::Objects->checkIndex->checkForComodification->result->root->remove->updateSizeAndModCount->return
AbstractList.SubList#removeRange(int, int)::: sub list remove range:::checkForComodification->root->removeRange->updateSizeAndModCount
AbstractList.SubList#addAll(Collection)::: sub list add all:::return->addAll
AbstractList.SubList#addAll(int, Collection)::: sub list add all:::rangeCheckForAdd->cSize->c->size->if->return->checkForComodification->root->addAll->updateSizeAndModCount->return
AbstractList.SubList#iterator()::: sub list iterator:::return->listIterator
AbstractList.SubList#listIterator(int)::: sub list list iterator:::checkForComodification->rangeCheckForAdd->return->new->ListIterator<E>
AbstractList.SubList#subList(int, int)::: sub list sub list:::subListRangeCheck->return->new->SubList<>
AbstractList.SubList#rangeCheckForAdd(int)::: sub list range check for add:::if->throw->outOfBoundsMsg->new->IndexOutOfBoundsException
AbstractList.SubList#outOfBoundsMsg(int)::: sub list out of bounds msg:::return
AbstractList.SubList#checkForComodification()::: sub list check for comodification:::if->throw->new->ConcurrentModificationException
AbstractList.SubList#updateSizeAndModCount(int)::: sub list update size and mod count:::slist->do->while
AbstractList.RandomAccessSubList#subList(int, int)::: random access sub list sub list:::subListRangeCheck->return->new->RandomAccessSubList<>
AbstractMap#size()::: abstract map size:::return->entrySet->size
AbstractMap#isEmpty()::: abstract map is empty:::return->size
AbstractMap#containsValue(Object)::: abstract map contains value:::i->entrySet->iterator->if->while->i->hasNext->e->i->next->if->e->getValue->return->else->while->i->hasNext->e->i->next->if->value->e->getValue->equals->return->return
AbstractMap#containsKey(Object)::: abstract map contains key:::i->entrySet->iterator->if->while->i->hasNext->e->i->next->if->e->getKey->return->else->while->i->hasNext->e->i->next->if->key->e->getKey->equals->return->return
AbstractMap#get(Object)::: abstract map get:::i->entrySet->iterator->if->while->i->hasNext->e->i->next->if->e->getKey->return->e->getValue->else->while->i->hasNext->e->i->next->if->key->e->getKey->equals->return->e->getValue->return
AbstractMap#put(K, V)::: abstract map put:::throw->new->UnsupportedOperationException
AbstractMap#remove(Object)::: abstract map remove:::i->entrySet->iterator->correctEntry->if->while->i->hasNext->e->i->next->if->e->getKey->else->while->i->hasNext->e->i->next->if->key->e->getKey->equals->oldValue->if->correctEntry->getValue->i->remove->return
AbstractMap#putAll(Map)::: abstract map put all:::foreach->m->entrySet->e->getKey->e->getValue->put
AbstractMap#clear()::: abstract map clear:::entrySet->clear
AbstractMap#keySet()::: abstract map key set:::ks->if->new->AbstractSet<K>->return
AbstractMap#values()::: abstract map values:::vals->if->new->AbstractCollection<V>->return
AbstractMap#entrySet()::: abstract map entry set:::
AbstractMap#equals(Object):::Compares the specified object with this map for equality:::if->return->if->return->m->if->m->size->size->return->try->foreach->entrySet->key->e->getKey->value->e->getValue->if->if->m->get->m->containsKey->return->else->if->value->m->get->equals->return->catch->return->return->finally->return
AbstractMap#hashCode():::Returns the hash code value for this map:::h->foreach->entrySet->entry->hashCode->return
AbstractMap#toString():::Returns a string representation of this map:::i->entrySet->iterator->if->i->hasNext->return->sb->new->StringBuilder->sb->append->for
AbstractMap#clone():::Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.:::result->super->clone->return
AbstractMap#eq(Object, Object):::Utility method for SimpleEntry and SimpleImmutableEntry:::return->o1->equals
AbstractMap.SimpleEntry#getKey():::Returns the key corresponding to this entry.:::return
AbstractMap.SimpleEntry#getValue():::Returns the value corresponding to this entry.:::return
AbstractMap.SimpleEntry#setValue(V):::Replaces the value corresponding to this entry with the specified value.:::oldValue->return
AbstractMap.SimpleEntry#equals(Object):::Compares the specified object with this entry for equality:::if->return->e->return->e->getKey->eq->e->getValue->eq
AbstractMap.SimpleEntry#hashCode():::Returns the hash code value for this map entry:::return->key->hashCode->value->hashCode
AbstractMap.SimpleEntry#toString():::Returns a String representation of this map entry:::return
AbstractMap.SimpleImmutableEntry#getKey():::Returns the key corresponding to this entry.:::return
AbstractMap.SimpleImmutableEntry#getValue():::Returns the value corresponding to this entry.:::return
AbstractMap.SimpleImmutableEntry#setValue(V):::Replaces the value corresponding to this entry with the specified value (optional operation):::throw->new->UnsupportedOperationException
AbstractMap.SimpleImmutableEntry#equals(Object):::Compares the specified object with this entry for equality:::if->return->e->return->e->getKey->eq->e->getValue->eq
AbstractMap.SimpleImmutableEntry#hashCode():::Returns the hash code value for this map entry:::return->key->hashCode->value->hashCode
AbstractMap.SimpleImmutableEntry#toString():::Returns a String representation of this map entry:::return
AbstractQueue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available:::if->offer->return->else->throw->new->IllegalStateException
AbstractQueue#remove():::Retrieves and removes the head of this queue:::x->poll->if->return->else->throw->new->NoSuchElementException
AbstractQueue#element():::Retrieves, but does not remove, the head of this queue:::x->peek->if->return->else->throw->new->NoSuchElementException
AbstractQueue#clear():::Removes all of the elements from this queue:::while->poll
AbstractQueue#addAll(Collection):::Adds all of the elements in the specified collection to this queue:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->modified->foreach->if->add->return
AbstractSequentialList#get(int):::Returns the element at the specified position in this list:::try->return->listIterator->next->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#set(int, E):::Replaces the element at the specified position in this list with the specified element (optional operation):::try->e->listIterator->oldVal->e->next->e->set->return->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#add(int, E):::Inserts the specified element at the specified position in this list (optional operation):::try->listIterator->add->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#remove(int):::Removes the element at the specified position in this list (optional operation):::try->e->listIterator->outCast->e->next->e->remove->return->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list at the specified position (optional operation):::try->modified->e1->listIterator->foreach->e1->add->return->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#iterator():::Returns an iterator over the elements in this list (in proper sequence).  This implementation merely returns a list iterator over the list.:::return->listIterator
AbstractSequentialList#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence).:::
AbstractSet#equals(Object):::Compares the specified object with this set for equality:::if->return->if->return->c->if->c->size->size->return->try->return->containsAll->catch->return->finally
AbstractSet#hashCode():::Returns the hash code value for this set:::h->i->iterator->while->i->hasNext->obj->i->next->if->obj->hashCode->return
AbstractSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection (optional operation):::Objects->requireNonNull->modified->if->size->c->size->foreach->remove->else->for->i->iterator->i->hasNext->return
ArrayDeque#grow(int):::Increases the capacity of this deque by at least the given amount.:::oldCapacity->newCapacity->jump->if->newCapacity->es->Arrays->copyOf->if->newSpace->System->arraycopy->for->i->to
ArrayDeque#newCapacity(int, int):::Capacity calculation for edge conditions, especially overflow.:::oldCapacity->minCapacity->if->if->throw->new->IllegalStateException->return->if->return->return
ArrayDeque#inc(int, int):::Circularly increments i, mod modulus:::if->return
ArrayDeque#dec(int, int):::Circularly decrements i, mod modulus:::if->return
ArrayDeque#inc(int, int, int):::Circularly adds the given distance to index i, mod modulus:::if->return
ArrayDeque#sub(int, int, int):::Subtracts j from i, mod modulus:::if->return
ArrayDeque#elementAt(Object[], int):::Returns element at array index i:::return
ArrayDeque#nonNullElementAt(Object[], int):::A version of elementAt that checks for null elements:::e->if->throw->new->ConcurrentModificationException->return
ArrayDeque#addFirst(E):::Inserts the specified element at the front of this deque.:::if->throw->new->NullPointerException->es->dec->if->grow
ArrayDeque#addLast(E):::Inserts the specified element at the end of this deque:::if->throw->new->NullPointerException->es->if->inc->grow
ArrayDeque#addAll(Collection):::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator.:::s->needed->if->size->c->size->grow->copyElements->return->size
ArrayDeque#copyElements(Collection)::: array deque copy elements:::c->this->addLast->forEach
ArrayDeque#offerFirst(E):::Inserts the specified element at the front of this deque.:::addFirst->return
ArrayDeque#offerLast(E):::Inserts the specified element at the end of this deque.:::addLast->return
ArrayDeque#removeFirst()::: array deque remove first:::e->pollFirst->if->throw->new->NoSuchElementException->return
ArrayDeque#removeLast()::: array deque remove last:::e->pollLast->if->throw->new->NoSuchElementException->return
ArrayDeque#pollFirst()::: array deque poll first:::es->h->e->elementAt->if->inc->return
ArrayDeque#pollLast()::: array deque poll last:::es->t->e->dec->elementAt->if->return
ArrayDeque#getFirst()::: array deque get first:::e->elementAt->if->throw->new->NoSuchElementException->return
ArrayDeque#getLast()::: array deque get last:::es->e->dec->elementAt->if->throw->new->NoSuchElementException->return
ArrayDeque#peekFirst()::: array deque peek first:::return->elementAt
ArrayDeque#peekLast()::: array deque peek last:::es->return->dec->elementAt
ArrayDeque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail):::if->es->for->i->end->to->return
ArrayDeque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail):::if->es->for->i->end->to->return
ArrayDeque#add(E):::Inserts the specified element at the end of this deque:::addLast->return
ArrayDeque#offer(E):::Inserts the specified element at the end of this deque:::return->offerLast
ArrayDeque#remove():::Retrieves and removes the head of the queue represented by this deque:::return->removeFirst
ArrayDeque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty:::return->pollFirst
ArrayDeque#element():::Retrieves, but does not remove, the head of the queue represented by this deque:::return->getFirst
ArrayDeque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty:::return->peekFirst
ArrayDeque#push(E):::Pushes an element onto the stack represented by this deque:::addFirst
ArrayDeque#pop():::Pops an element from the stack represented by this deque:::return->removeFirst
ArrayDeque#delete(int):::Removes the element at the specified position in the elements array:::es->capacity->h->t->front->sub->back->sub->if->if->System->arraycopy->else->System->arraycopy->System->arraycopy->inc->return->else->dec->if->System->arraycopy->else->System->arraycopy->System->arraycopy->return
ArrayDeque#size():::Returns the number of elements in this deque.:::return->sub
ArrayDeque#isEmpty():::Returns true if this deque contains no elements.:::return
ArrayDeque#iterator():::Returns an iterator over the elements in this deque:::return->new->DeqIterator
ArrayDeque#descendingIterator()::: array deque descending iterator:::return->new->DescendingIterator
ArrayDeque.DeqIterator#hasNext()::: deq iterator has next:::return
ArrayDeque.DeqIterator#next()::: deq iterator next:::if->throw->new->NoSuchElementException->es->e->nonNullElementAt->inc->return
ArrayDeque.DeqIterator#postDelete(boolean)::: deq iterator post delete:::if->dec
ArrayDeque.DeqIterator#remove()::: deq iterator remove:::if->throw->new->IllegalStateException->delete->postDelete
ArrayDeque.DeqIterator#forEachRemaining(Consumer)::: deq iterator for each remaining:::Objects->requireNonNull->r->if->return->es->if->sub->throw->new->ConcurrentModificationException->for->i->end->to
ArrayDeque.DescendingIterator#next()::: descending iterator next:::if->throw->new->NoSuchElementException->es->e->nonNullElementAt->dec->return
ArrayDeque.DescendingIterator#postDelete(boolean)::: descending iterator post delete:::if->inc
ArrayDeque.DescendingIterator#forEachRemaining(Consumer)::: descending iterator for each remaining:::Objects->requireNonNull->r->if->return->es->if->sub->throw->new->ConcurrentModificationException->for->i->end->to
ArrayDeque#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this deque:::return->new->DeqSpliterator
ArrayDeque.DeqSpliterator#getFence():::Ensures late-binding initialization; then returns fence.:::t->if->return
ArrayDeque.DeqSpliterator#trySplit()::: deq spliterator try split:::es->i->n->return->getFence->sub->inc->new->DeqSpliterator
ArrayDeque.DeqSpliterator#forEachRemaining(Consumer)::: deq spliterator for each remaining:::if->throw->new->NullPointerException->end->getFence->cursor->es->if->if->dec->throw->new->ConcurrentModificationException->for->i->to
ArrayDeque.DeqSpliterator#tryAdvance(Consumer)::: deq spliterator try advance:::Objects->requireNonNull->es->if->i->if->return->e->nonNullElementAt->inc->action->accept->return
ArrayDeque.DeqSpliterator#estimateSize()::: deq spliterator estimate size:::return->getFence->sub
ArrayDeque.DeqSpliterator#characteristics()::: deq spliterator characteristics:::return
ArrayDeque#forEach(Consumer)::: array deque for each:::Objects->requireNonNull->es->for->i->end->to
ArrayDeque#removeIf(Predicate)::: array deque remove if:::Objects->requireNonNull->return->bulkRemove
ArrayDeque#removeAll(Collection)::: array deque remove all:::Objects->requireNonNull->return->c->contains->bulkRemove
ArrayDeque#retainAll(Collection)::: array deque retain all:::Objects->requireNonNull->return->c->contains->bulkRemove
ArrayDeque#bulkRemove(Predicate):::Implementation of bulk remove methods.:::es->for->i->end->to->return
ArrayDeque#nBits(int)::: array deque n bits:::return->new->longArr
ArrayDeque#setBit(long[], int)::: array deque set bit:::
ArrayDeque#isClear(long[], int)::: array deque is clear:::return
ArrayDeque#bulkRemoveModified(Predicate, int):::Helper for bulkRemove, in case of at least one deletion:::es->capacity->end->deathRow->sub->nBits->for->i->to->k->w->for->i->to->k->if->throw->new->ConcurrentModificationException->circularClear->return
ArrayDeque#contains(Object):::Returns true if this deque contains the specified element:::if->es->for->i->end->to->return
ArrayDeque#remove(Object):::Removes a single instance of the specified element from this deque:::return->removeFirstOccurrence
ArrayDeque#clear():::Removes all of the elements from this deque:::circularClear
ArrayDeque#circularClear(Object[], int, int):::Nulls out slots starting at array index i, upto index end:::for->to
ArrayDeque#toArray():::Returns an array containing all of the elements in this deque in proper sequence (from first to last element):::return->toArray
ArrayDeque#toArray(Class)::: array deque to array:::es->a->head->tail->end->if->Arrays->copyOfRange->else->Arrays->copyOfRange->System->arraycopy->if->System->arraycopy->return
ArrayDeque#toArray(T[]):::Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::size->if->size->return->a->getClass->toArray->es->for->i->j->len->Math->min->if->return
ArrayDeque#clone():::Returns a copy of this deque.:::try->result->super->clone->Arrays->copyOf->return->catch->throw->new->AssertionError->finally
ArrayDeque#writeObject(java.io.ObjectOutputStream):::Saves this deque to a stream (that is, serializes it).:::s->defaultWriteObject->s->size->writeInt->es->for->i->end->to
ArrayDeque#readObject(java.io.ObjectInputStream):::Reconstitutes this deque from a stream (that is, deserializes it).:::s->defaultReadObject->size->s->readInt->SharedSecrets->getJavaObjectInputStreamAccess->checkArray->new->ObjectArr->for->i
ArrayDeque#checkInvariants():::debugging:::try->capacity->catch->printf->Arrays->toString->printf->throw->finally
ArrayList#trimToSize():::Trims the capacity of this ArrayList instance to be the list's current size:::if->Arrays->copyOf
ArrayList#ensureCapacity(int):::Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.:::if->grow
ArrayList#grow(int):::Increases the capacity to ensure that it can hold at least the number of elements specified by the minimum capacity argument.:::return->Arrays->newCapacity->copyOf
ArrayList#grow()::: array list grow:::return->grow
ArrayList#newCapacity(int):::Returns a capacity at least as large as the given minimum capacity:::oldCapacity->newCapacity->if->if->return->Math->max->if->throw->new->OutOfMemoryError->return->return->hugeCapacity
ArrayList#hugeCapacity(int)::: array list huge capacity:::if->throw->new->OutOfMemoryError->return
ArrayList#size():::Returns the number of elements in this list.:::return
ArrayList#isEmpty():::Returns true if this list contains no elements.:::return
ArrayList#contains(Object):::Returns true if this list contains the specified element:::return->indexOf
ArrayList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element:::return->indexOfRange
ArrayList#indexOfRange(Object, int, int)::: array list index of range:::es->if->for->i->else->for->i->return
ArrayList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element:::return->lastIndexOfRange
ArrayList#lastIndexOfRange(Object, int, int)::: array list last index of range:::es->if->for->i->else->for->i->return
ArrayList#clone():::Returns a shallow copy of this ArrayList instance:::try->v->super->clone->Arrays->copyOf->return->catch->throw->new->InternalError->finally
ArrayList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element):::return->Arrays->copyOf
ArrayList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::if->return->Arrays->a->getClass->copyOf->System->arraycopy->if->return
ArrayList#elementData(int)::: array list element data:::return
ArrayList#elementAt(Object[], int)::: array list element at:::return
ArrayList#get(int):::Returns the element at the specified position in this list.:::Objects->checkIndex->return->elementData
ArrayList#set(int, E):::Replaces the element at the specified position in this list with the specified element.:::Objects->checkIndex->oldValue->elementData->return
ArrayList#add(E, Object[], int):::This helper method split out from add(E) to keep method bytecode size under 35 (the -XX:MaxInlineSize default value), which helps when add(E) is called in a C1-compiled loop.:::if->grow
ArrayList#add(E):::Appends the specified element to the end of this list.:::add->return
ArrayList#add(int, E):::Inserts the specified element at the specified position in this list:::rangeCheckForAdd->s->elementData->if->grow->System->arraycopy
ArrayList#remove(int):::Removes the element at the specified position in this list:::Objects->checkIndex->es->oldValue->fastRemove->return
ArrayList#equals(Object)::: array list equals:::if->return->if->return->expectedModCount->equal->o->getClass->equalsArrayList->equalsRange->checkForComodification->return
ArrayList#equalsRange(List, int, int)::: array list equals range:::es->if->throw->new->ConcurrentModificationException->oit->other->iterator->for->return->oit->hasNext
ArrayList#equalsArrayList(ArrayList)::: array list equals array list:::otherModCount->s->equal->if->otherEs->es->if->throw->new->ConcurrentModificationException->for->i->other->checkForComodification->return
ArrayList#checkForComodification(int)::: array list check for comodification:::if->throw->new->ConcurrentModificationException
ArrayList#hashCode()::: array list hash code:::expectedModCount->hash->hashCodeRange->checkForComodification->return
ArrayList#hashCodeRange(int, int)::: array list hash code range:::es->if->throw->new->ConcurrentModificationException->hashCode->for->i->return
ArrayList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present:::es->size->i->if->for->else->for->return->fastRemove->return
ArrayList#fastRemove(Object[], int):::Private remove method that skips bounds checking and does not return the value removed.:::newSize->if->System->arraycopy
ArrayList#clear():::Removes all of the elements from this list:::es->for->to->i
ArrayList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator:::a->c->toArray->numNew->if->return->elementData->s->if->grow->System->arraycopy->return
ArrayList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position:::rangeCheckForAdd->a->c->toArray->numNew->if->return->elementData->s->if->grow->numMoved->if->System->arraycopy->System->arraycopy->return
ArrayList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive:::if->throw->outOfBoundsMsg->new->IndexOutOfBoundsException->shiftTailOverGap
ArrayList#shiftTailOverGap(Object[], int, int):::Erases the gap from lo to hi, by sliding down following elements.:::System->arraycopy->for->to->i
ArrayList#rangeCheckForAdd(int):::A version of rangeCheck used by add and addAll.:::if->throw->outOfBoundsMsg->new->IndexOutOfBoundsException
ArrayList#outOfBoundsMsg(int):::Constructs an IndexOutOfBoundsException detail message:::return
ArrayList#outOfBoundsMsg(int, int):::A version used in checking (fromIndex > toIndex) condition:::return
ArrayList#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection.:::return->batchRemove
ArrayList#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection:::return->batchRemove
ArrayList#batchRemove(Collection, boolean, int, int)::: array list batch remove:::Objects->requireNonNull->es->r->for->w->try->for->e->catch->System->arraycopy->throw->finally->shiftTailOverGap->return
ArrayList#writeObject(java.io.ObjectOutputStream):::Saves the state of the ArrayList instance to a stream (that is, serializes it).:::expectedModCount->s->defaultWriteObject->s->writeInt->for->i->if->throw->new->ConcurrentModificationException
ArrayList#readObject(java.io.ObjectInputStream):::Reconstitutes the ArrayList instance from a stream (that is, deserializes it).:::s->defaultReadObject->s->readInt->if->SharedSecrets->getJavaObjectInputStreamAccess->checkArray->elements->new->ObjectArr->for->i->else->if->else->throw->new->java.io.InvalidObjectException
ArrayList#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list:::rangeCheckForAdd->return->new->ListItr
ArrayList#listIterator():::Returns a list iterator over the elements in this list (in proper sequence):::return->new->ListItr
ArrayList#iterator():::Returns an iterator over the elements in this list in proper sequence:::return->new->Itr
ArrayList.Itr#hasNext()::: itr has next:::return
ArrayList.Itr#next()::: itr next:::checkForComodification->i->if->throw->new->NoSuchElementException->elementData->if->throw->new->ConcurrentModificationException->return
ArrayList.Itr#remove()::: itr remove:::if->throw->new->IllegalStateException->checkForComodification->try->ArrayList.this->remove->catch->throw->new->ConcurrentModificationException->finally
ArrayList.Itr#forEachRemaining(Consumer)::: itr for each remaining:::Objects->requireNonNull->size->i->if->es->if->throw->new->ConcurrentModificationException->for->checkForComodification
ArrayList.Itr#checkForComodification()::: itr check for comodification:::if->throw->new->ConcurrentModificationException
ArrayList.ListItr#hasPrevious()::: list itr has previous:::return
ArrayList.ListItr#nextIndex()::: list itr next index:::return
ArrayList.ListItr#previousIndex()::: list itr previous index:::return
ArrayList.ListItr#previous()::: list itr previous:::checkForComodification->i->if->throw->new->NoSuchElementException->elementData->if->throw->new->ConcurrentModificationException->return
ArrayList.ListItr#set(E)::: list itr set:::if->throw->new->IllegalStateException->checkForComodification->try->ArrayList.this->set->catch->throw->new->ConcurrentModificationException->finally
ArrayList.ListItr#add(E)::: list itr add:::checkForComodification->try->i->ArrayList.this->add->catch->throw->new->ConcurrentModificationException->finally
ArrayList#subList(int, int):::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive:::subListRangeCheck->return->new->SubList<>
ArrayList.SubList#set(int, E)::: sub list set:::Objects->checkIndex->checkForComodification->oldValue->root->elementData->return
ArrayList.SubList#get(int)::: sub list get:::Objects->checkIndex->checkForComodification->return->root->elementData
ArrayList.SubList#size()::: sub list size:::checkForComodification->return
ArrayList.SubList#add(int, E)::: sub list add:::rangeCheckForAdd->checkForComodification->root->add->updateSizeAndModCount
ArrayList.SubList#remove(int)::: sub list remove:::Objects->checkIndex->checkForComodification->result->root->remove->updateSizeAndModCount->return
ArrayList.SubList#removeRange(int, int)::: sub list remove range:::checkForComodification->root->removeRange->updateSizeAndModCount
ArrayList.SubList#addAll(Collection)::: sub list add all:::return->addAll
ArrayList.SubList#addAll(int, Collection)::: sub list add all:::rangeCheckForAdd->cSize->c->size->if->return->checkForComodification->root->addAll->updateSizeAndModCount->return
ArrayList.SubList#replaceAll(UnaryOperator)::: sub list replace all:::root->replaceAllRange
ArrayList.SubList#removeAll(Collection)::: sub list remove all:::return->batchRemove
ArrayList.SubList#retainAll(Collection)::: sub list retain all:::return->batchRemove
ArrayList.SubList#batchRemove(Collection, boolean)::: sub list batch remove:::checkForComodification->oldSize->modified->root->batchRemove->if->updateSizeAndModCount->return
ArrayList.SubList#removeIf(Predicate)::: sub list remove if:::checkForComodification->oldSize->modified->root->removeIf->if->updateSizeAndModCount->return
ArrayList.SubList#toArray()::: sub list to array:::checkForComodification->return->Arrays->copyOfRange
ArrayList.SubList#toArray(T[])::: sub list to array:::checkForComodification->if->return->Arrays->a->getClass->copyOfRange->System->arraycopy->if->return
ArrayList.SubList#equals(Object)::: sub list equals:::if->return->if->return->equal->root->equalsRange->checkForComodification->return
ArrayList.SubList#hashCode()::: sub list hash code:::hash->root->hashCodeRange->checkForComodification->return
ArrayList.SubList#indexOf(Object)::: sub list index of:::index->root->indexOfRange->checkForComodification->return
ArrayList.SubList#lastIndexOf(Object)::: sub list last index of:::index->root->lastIndexOfRange->checkForComodification->return
ArrayList.SubList#contains(Object)::: sub list contains:::return->indexOf
ArrayList.SubList#iterator()::: sub list iterator:::return->listIterator
ArrayList.SubList#listIterator(int)::: sub list list iterator:::checkForComodification->rangeCheckForAdd->return->new->ListIterator<E>
ArrayList.SubList#subList(int, int)::: sub list sub list:::subListRangeCheck->return->new->SubList<>
ArrayList.SubList#rangeCheckForAdd(int)::: sub list range check for add:::if->throw->outOfBoundsMsg->new->IndexOutOfBoundsException
ArrayList.SubList#outOfBoundsMsg(int)::: sub list out of bounds msg:::return
ArrayList.SubList#checkForComodification()::: sub list check for comodification:::if->throw->new->ConcurrentModificationException
ArrayList.SubList#updateSizeAndModCount(int)::: sub list update size and mod count:::slist->do->while
ArrayList.SubList#spliterator()::: sub list spliterator:::checkForComodification->return->new->Spliterator<E>
ArrayList#forEach(Consumer)::: array list for each:::Objects->requireNonNull->expectedModCount->es->size->for->i->if->throw->new->ConcurrentModificationException
ArrayList#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list:::return->new->ArrayListSpliterator
ArrayList.ArrayListSpliterator#getFence()::: array list spliterator get fence:::hi->if->return
ArrayList.ArrayListSpliterator#trySplit()::: array list spliterator try split:::hi->getFence->lo->mid->return->new->ArrayListSpliterator
ArrayList.ArrayListSpliterator#tryAdvance(Consumer)::: array list spliterator try advance:::if->throw->new->NullPointerException->hi->getFence->i->if->e->action->accept->if->throw->new->ConcurrentModificationException->return->return
ArrayList.ArrayListSpliterator#forEachRemaining(Consumer)::: array list spliterator for each remaining:::i->hi->mc->a->if->throw->new->NullPointerException->if->if->else->if->for->if->return->throw->new->ConcurrentModificationException
ArrayList.ArrayListSpliterator#estimateSize()::: array list spliterator estimate size:::return->getFence
ArrayList.ArrayListSpliterator#characteristics()::: array list spliterator characteristics:::return
ArrayList#nBits(int)::: array list n bits:::return->new->longArr
ArrayList#setBit(long[], int)::: array list set bit:::
ArrayList#isClear(long[], int)::: array list is clear:::return
ArrayList#removeIf(Predicate)::: array list remove if:::return->removeIf
ArrayList#removeIf(Predicate, int, int):::Removes all elements satisfying the given predicate, from index i (inclusive) to index end (exclusive).:::Objects->requireNonNull->expectedModCount->es->for->filter->elementAt->test->if->beg->deathRow->nBits->for->if->throw->new->ConcurrentModificationException->w->for->shiftTailOverGap->return->else->if->throw->new->ConcurrentModificationException->return
ArrayList#replaceAll(UnaryOperator)::: array list replace all:::replaceAllRange
ArrayList#replaceAllRange(UnaryOperator, int, int)::: array list replace all range:::Objects->requireNonNull->expectedModCount->es->for->if->throw->new->ConcurrentModificationException
ArrayList#sort(Comparator)::: array list sort:::expectedModCount->Arrays->sort->if->throw->new->ConcurrentModificationException
ArrayList#checkInvariants()::: array list check invariants:::
ArrayPrefixHelpers.CumulateTask#compute()::: cumulate task compute:::fn->a->if->throw->new->NullPointerException->th->org->fnc->l->h->t->while->if->lt->rt->f->if->mid->new->CumulateTask<T>->new->CumulateTask<T>->else->pin->if->lout->fn->apply->for->c->for->c->if->break->if->f->fork->else->state->for->b->sum->if->first->if->else->for->i->else->if->for->i->else->for->par
ArrayPrefixHelpers.LongCumulateTask#compute()::: long cumulate task compute:::fn->a->if->throw->new->NullPointerException->th->org->fnc->l->h->t->while->if->lt->rt->f->if->mid->new->LongCumulateTask->new->LongCumulateTask->else->pin->if->lout->fn->applyAsLong->for->c->for->c->if->break->if->f->fork->else->state->for->b->sum->if->first->if->else->for->i->else->if->for->i->else->for->par
ArrayPrefixHelpers.DoubleCumulateTask#compute()::: double cumulate task compute:::fn->a->if->throw->new->NullPointerException->th->org->fnc->l->h->t->while->if->lt->rt->f->if->mid->new->DoubleCumulateTask->new->DoubleCumulateTask->else->pin->if->lout->fn->applyAsDouble->for->c->for->c->if->break->if->f->fork->else->state->for->b->sum->if->first->if->else->for->i->else->if->for->i->else->for->par
ArrayPrefixHelpers.IntCumulateTask#compute()::: int cumulate task compute:::fn->a->if->throw->new->NullPointerException->th->org->fnc->l->h->t->while->if->lt->rt->f->if->mid->new->IntCumulateTask->new->IntCumulateTask->else->pin->if->lout->fn->applyAsInt->for->c->for->c->if->break->if->f->fork->else->state->for->b->sum->if->first->if->else->for->i->else->if->for->i->else->for->par
Arrays.NaturalOrder#compare(Object, Object)::: natural order compare:::return->compareTo
Arrays#rangeCheck(int, int, int):::Checks that fromIndex and toIndex are in the range and throws an exception if they aren't.:::if->throw->new->IllegalArgumentException->if->throw->new->ArrayIndexOutOfBoundsException->if->throw->new->ArrayIndexOutOfBoundsException
Arrays#sort(int[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(int[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(long[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(long[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(short[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(short[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(char[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(char[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(byte[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(byte[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(float[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(float[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(double[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(double[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#parallelSort(byte[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->byteArr->new->ArraysParallelSortHelpers.FJByte.Sorter->invoke
Arrays#parallelSort(byte[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->byteArr->new->ArraysParallelSortHelpers.FJByte.Sorter->invoke
Arrays#parallelSort(char[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->charArr->new->ArraysParallelSortHelpers.FJChar.Sorter->invoke
Arrays#parallelSort(char[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->charArr->new->ArraysParallelSortHelpers.FJChar.Sorter->invoke
Arrays#parallelSort(short[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->shortArr->new->ArraysParallelSortHelpers.FJShort.Sorter->invoke
Arrays#parallelSort(short[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->shortArr->new->ArraysParallelSortHelpers.FJShort.Sorter->invoke
Arrays#parallelSort(int[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->intArr->new->ArraysParallelSortHelpers.FJInt.Sorter->invoke
Arrays#parallelSort(int[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->intArr->new->ArraysParallelSortHelpers.FJInt.Sorter->invoke
Arrays#parallelSort(long[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->longArr->new->ArraysParallelSortHelpers.FJLong.Sorter->invoke
Arrays#parallelSort(long[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->longArr->new->ArraysParallelSortHelpers.FJLong.Sorter->invoke
Arrays#parallelSort(float[]):::Sorts the specified array into ascending numerical order:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->floatArr->new->ArraysParallelSortHelpers.FJFloat.Sorter->invoke
Arrays#parallelSort(float[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->floatArr->new->ArraysParallelSortHelpers.FJFloat.Sorter->invoke
Arrays#parallelSort(double[]):::Sorts the specified array into ascending numerical order:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->doubleArr->new->ArraysParallelSortHelpers.FJDouble.Sorter->invoke
Arrays#parallelSort(double[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->doubleArr->new->ArraysParallelSortHelpers.FJDouble.Sorter->invoke
Arrays#parallelSort(T[]):::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->TimSort->sort->else->Array->a->getClass->getComponentType->newInstance->new->ArraysParallelSortHelpers.FJObject.Sorter<>->invoke
Arrays#parallelSort(T[], int, int):::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->TimSort->sort->else->Array->a->getClass->getComponentType->newInstance->new->ArraysParallelSortHelpers.FJObject.Sorter<>->invoke
Arrays#parallelSort(T[], Comparator):::Sorts the specified array of objects according to the order induced by the specified comparator:::if->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->TimSort->sort->else->Array->a->getClass->getComponentType->newInstance->new->ArraysParallelSortHelpers.FJObject.Sorter<>->invoke
Arrays#parallelSort(T[], int, int, Comparator):::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator:::rangeCheck->if->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->TimSort->sort->else->Array->a->getClass->getComponentType->newInstance->new->ArraysParallelSortHelpers.FJObject.Sorter<>->invoke
Arrays#sort(Object[]):::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements:::if->legacyMergeSort->else->ComparableTimSort->sort
Arrays#legacyMergeSort(Object[]):::To be removed in a future release.:::aux->a->clone->mergeSort
Arrays#sort(Object[], int, int):::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements:::rangeCheck->if->legacyMergeSort->else->ComparableTimSort->sort
Arrays#legacyMergeSort(Object[], int, int):::To be removed in a future release.:::aux->copyOfRange->mergeSort
Arrays#mergeSort(Object[], Object[], int, int, int):::Src is the source array that starts at index 0 Dest is the (possibly larger) array destination with a possible offset low is the index in dest to start sorting high is the end index in dest to end sorting off is the offset to generate corresponding low, high in src To be removed in a future release.:::length->if->for->i->return->destLow->destHigh->mid->mergeSort->mergeSort->if->compareTo->System->arraycopy->return->for->i->p->q
Arrays#swap(Object[], int, int):::Swaps x[a] with x[b].:::t
Arrays#sort(T[], Comparator):::Sorts the specified array of objects according to the order induced by the specified comparator:::if->sort->else->if->legacyMergeSort->else->TimSort->sort
Arrays#legacyMergeSort(T[], Comparator):::To be removed in a future release.:::aux->a->clone->if->mergeSort->else->mergeSort
Arrays#sort(T[], int, int, Comparator):::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator:::if->sort->else->rangeCheck->if->legacyMergeSort->else->TimSort->sort
Arrays#legacyMergeSort(T[], int, int, Comparator):::To be removed in a future release.:::aux->copyOfRange->if->mergeSort->else->mergeSort
Arrays#mergeSort(Object[], Object[], int, int, int, Comparator):::Src is the source array that starts at index 0 Dest is the (possibly larger) array destination with a possible offset low is the index in dest to start sorting high is the end index in dest to end sorting off is the offset into src corresponding to low in dest To be removed in a future release.:::length->if->for->i->return->destLow->destHigh->mid->mergeSort->mergeSort->if->c->compare->System->arraycopy->return->for->i->p->q
Arrays#parallelPrefix(T[], BinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function:::Objects->requireNonNull->if->new->ArrayPrefixHelpers.CumulateTask<>->invoke
Arrays#parallelPrefix(T[], int, int, BinaryOperator):::Performs #parallelPrefix(Object[], BinaryOperator) for the given subrange of the array.:::Objects->requireNonNull->rangeCheck->if->new->ArrayPrefixHelpers.CumulateTask<>->invoke
Arrays#parallelPrefix(long[], LongBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function:::Objects->requireNonNull->if->new->ArrayPrefixHelpers.LongCumulateTask->invoke
Arrays#parallelPrefix(long[], int, int, LongBinaryOperator):::Performs #parallelPrefix(long[], LongBinaryOperator) for the given subrange of the array.:::Objects->requireNonNull->rangeCheck->if->new->ArrayPrefixHelpers.LongCumulateTask->invoke
Arrays#parallelPrefix(double[], DoubleBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function:::Objects->requireNonNull->if->new->ArrayPrefixHelpers.DoubleCumulateTask->invoke
Arrays#parallelPrefix(double[], int, int, DoubleBinaryOperator):::Performs #parallelPrefix(double[], DoubleBinaryOperator) for the given subrange of the array.:::Objects->requireNonNull->rangeCheck->if->new->ArrayPrefixHelpers.DoubleCumulateTask->invoke
Arrays#parallelPrefix(int[], IntBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function:::Objects->requireNonNull->if->new->ArrayPrefixHelpers.IntCumulateTask->invoke
Arrays#parallelPrefix(int[], int, int, IntBinaryOperator):::Performs #parallelPrefix(int[], IntBinaryOperator) for the given subrange of the array.:::Objects->requireNonNull->rangeCheck->if->new->ArrayPrefixHelpers.IntCumulateTask->invoke
Arrays#binarySearch(long[], long):::Searches the specified array of longs for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(long[], int, int, long):::Searches a range of the specified array of longs for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch0(long[], int, int, long)::: arrays binary search0:::low->high->while->mid->midVal->if->else->if->else->return->return
Arrays#binarySearch(int[], int):::Searches the specified array of ints for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(int[], int, int, int):::Searches a range of the specified array of ints for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch0(int[], int, int, int)::: arrays binary search0:::low->high->while->mid->midVal->if->else->if->else->return->return
Arrays#binarySearch(short[], short):::Searches the specified array of shorts for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(short[], int, int, short):::Searches a range of the specified array of shorts for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch0(short[], int, int, short)::: arrays binary search0:::low->high->while->mid->midVal->if->else->if->else->return->return
Arrays#binarySearch(char[], char):::Searches the specified array of chars for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(char[], int, int, char):::Searches a range of the specified array of chars for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch0(char[], int, int, char)::: arrays binary search0:::low->high->while->mid->midVal->if->else->if->else->return->return
Arrays#binarySearch(byte[], byte):::Searches the specified array of bytes for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(byte[], int, int, byte):::Searches a range of the specified array of bytes for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch0(byte[], int, int, byte)::: arrays binary search0:::low->high->while->mid->midVal->if->else->if->else->return->return
Arrays#binarySearch(double[], double):::Searches the specified array of doubles for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(double[], int, int, double):::Searches a range of the specified array of doubles for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch0(double[], int, int, double)::: arrays binary search0:::low->high->while->mid->midVal->if->else->if->else->midBits->Double->doubleToLongBits->keyBits->Double->doubleToLongBits->if->return->else->if->else->return
Arrays#binarySearch(float[], float):::Searches the specified array of floats for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(float[], int, int, float):::Searches a range of the specified array of floats for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch0(float[], int, int, float)::: arrays binary search0:::low->high->while->mid->midVal->if->else->if->else->midBits->Float->floatToIntBits->keyBits->Float->floatToIntBits->if->return->else->if->else->return
Arrays#binarySearch(Object[], Object):::Searches the specified array for the specified object using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(Object[], int, int, Object):::Searches a range of the specified array for the specified object using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch0(Object[], int, int, Object)::: arrays binary search0:::low->high->while->mid->midVal->cmp->midVal->compareTo->if->else->if->else->return->return
Arrays#binarySearch(T[], T, Comparator):::Searches the specified array for the specified object using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(T[], int, int, T, Comparator):::Searches a range of the specified array for the specified object using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch0(T[], int, int, T, Comparator)::: arrays binary search0:::if->return->binarySearch0->low->high->while->mid->midVal->cmp->c->compare->if->else->if->else->return->return
Arrays#equals(long[], long[]):::Returns true if the two specified arrays of longs are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(long[], int, int, long[], int, int):::Returns true if the two specified arrays of longs, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(int[], int[]):::Returns true if the two specified arrays of ints are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(int[], int, int, int[], int, int):::Returns true if the two specified arrays of ints, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(short[], short[]):::Returns true if the two specified arrays of shorts are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(short[], int, int, short[], int, int):::Returns true if the two specified arrays of shorts, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(char[], char[]):::Returns true if the two specified arrays of chars are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(char[], int, int, char[], int, int):::Returns true if the two specified arrays of chars, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(byte[], byte[]):::Returns true if the two specified arrays of bytes are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(byte[], int, int, byte[], int, int):::Returns true if the two specified arrays of bytes, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(boolean[], boolean[]):::Returns true if the two specified arrays of booleans are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(boolean[], int, int, boolean[], int, int):::Returns true if the two specified arrays of booleans, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(double[], double[]):::Returns true if the two specified arrays of doubles are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(double[], int, int, double[], int, int):::Returns true if the two specified arrays of doubles, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(float[], float[]):::Returns true if the two specified arrays of floats are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(float[], int, int, float[], int, int):::Returns true if the two specified arrays of floats, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(Object[], Object[]):::Returns true if the two specified arrays of Objects are equal to one another:::if->return->if->return->length->if->return->for->i->return
Arrays#equals(Object[], int, int, Object[], int, int):::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->for->i->return
Arrays#equals(T[], T[], Comparator):::Returns true if the two specified arrays of Objects are equal to one another:::Objects->requireNonNull->if->return->if->return->length->if->return->for->i->return
Arrays#equals(T[], int, int, T[], int, int, Comparator):::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another:::Objects->requireNonNull->rangeCheck->rangeCheck->aLength->bLength->if->return->for->i->return
Arrays#fill(long[], long):::Assigns the specified long value to each element of the specified array of longs.:::for->i->len
Arrays#fill(long[], int, int, long):::Assigns the specified long value to each element of the specified range of the specified array of longs:::rangeCheck->for->i
Arrays#fill(int[], int):::Assigns the specified int value to each element of the specified array of ints.:::for->i->len
Arrays#fill(int[], int, int, int):::Assigns the specified int value to each element of the specified range of the specified array of ints:::rangeCheck->for->i
Arrays#fill(short[], short):::Assigns the specified short value to each element of the specified array of shorts.:::for->i->len
Arrays#fill(short[], int, int, short):::Assigns the specified short value to each element of the specified range of the specified array of shorts:::rangeCheck->for->i
Arrays#fill(char[], char):::Assigns the specified char value to each element of the specified array of chars.:::for->i->len
Arrays#fill(char[], int, int, char):::Assigns the specified char value to each element of the specified range of the specified array of chars:::rangeCheck->for->i
Arrays#fill(byte[], byte):::Assigns the specified byte value to each element of the specified array of bytes.:::for->i->len
Arrays#fill(byte[], int, int, byte):::Assigns the specified byte value to each element of the specified range of the specified array of bytes:::rangeCheck->for->i
Arrays#fill(boolean[], boolean):::Assigns the specified boolean value to each element of the specified array of booleans.:::for->i->len
Arrays#fill(boolean[], int, int, boolean):::Assigns the specified boolean value to each element of the specified range of the specified array of booleans:::rangeCheck->for->i
Arrays#fill(double[], double):::Assigns the specified double value to each element of the specified array of doubles.:::for->i->len
Arrays#fill(double[], int, int, double):::Assigns the specified double value to each element of the specified range of the specified array of doubles:::rangeCheck->for->i
Arrays#fill(float[], float):::Assigns the specified float value to each element of the specified array of floats.:::for->i->len
Arrays#fill(float[], int, int, float):::Assigns the specified float value to each element of the specified range of the specified array of floats:::rangeCheck->for->i
Arrays#fill(Object[], Object):::Assigns the specified Object reference to each element of the specified array of Objects.:::for->i->len
Arrays#fill(Object[], int, int, Object):::Assigns the specified Object reference to each element of the specified range of the specified array of Objects:::rangeCheck->for->i
Arrays#copyOf(T[], int):::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length:::return->original->getClass->copyOf
Arrays#copyOf(U[], int, Class):::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length:::copy->new->ObjectArr->Array->newType->getComponentType->newInstance->System->Math->min->arraycopy->return
Arrays#copyOf(byte[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->byteArr->System->Math->min->arraycopy->return
Arrays#copyOf(short[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->shortArr->System->Math->min->arraycopy->return
Arrays#copyOf(int[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->intArr->System->Math->min->arraycopy->return
Arrays#copyOf(long[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->longArr->System->Math->min->arraycopy->return
Arrays#copyOf(char[], int):::Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length:::copy->new->charArr->System->Math->min->arraycopy->return
Arrays#copyOf(float[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->floatArr->System->Math->min->arraycopy->return
Arrays#copyOf(double[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->doubleArr->System->Math->min->arraycopy->return
Arrays#copyOf(boolean[], int):::Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length:::copy->new->booleanArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(T[], int, int):::Copies the specified range of the specified array into a new array:::return->original->getClass->copyOfRange
Arrays#copyOfRange(U[], int, int, Class):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->ObjectArr->Array->newType->getComponentType->newInstance->System->Math->min->arraycopy->return
Arrays#copyOfRange(byte[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->byteArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(short[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->shortArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(int[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->intArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(long[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->longArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(char[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->charArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(float[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->floatArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(double[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->doubleArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(boolean[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->booleanArr->System->Math->min->arraycopy->return
Arrays#asList(T...):::Returns a fixed-size list backed by the specified array:::return->new->ArrayList<>
Arrays.ArrayList#size()::: array list size:::return
Arrays.ArrayList#toArray()::: array list to array:::return->Arrays->copyOf
Arrays.ArrayList#toArray(T[])::: array list to array:::size->size->if->return->Arrays->a->getClass->copyOf->System->arraycopy->if->return
Arrays.ArrayList#get(int)::: array list get:::return
Arrays.ArrayList#set(int, E)::: array list set:::oldValue->return
Arrays.ArrayList#indexOf(Object)::: array list index of:::a->if->for->i->else->for->i->return
Arrays.ArrayList#contains(Object)::: array list contains:::return->indexOf
Arrays.ArrayList#spliterator()::: array list spliterator:::return->Spliterators->spliterator
Arrays.ArrayList#forEach(Consumer)::: array list for each:::Objects->requireNonNull->foreach->action->accept
Arrays.ArrayList#replaceAll(UnaryOperator)::: array list replace all:::Objects->requireNonNull->a->for->i
Arrays.ArrayList#sort(Comparator)::: array list sort:::Arrays->sort
Arrays.ArrayList#iterator()::: array list iterator:::return->new->ArrayItr<>
Arrays.ArrayItr#hasNext()::: array itr has next:::return
Arrays.ArrayItr#next()::: array itr next:::i->if->throw->new->NoSuchElementException->return
Arrays#hashCode(long[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->elementHash->return
Arrays#hashCode(int[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(short[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(char[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(byte[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(boolean[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(float[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->Float->floatToIntBits->return
Arrays#hashCode(double[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->bits->Double->doubleToLongBits->return
Arrays#hashCode(Object[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->element->hashCode->return
Arrays#deepHashCode(Object[]):::Returns a hash code based on the "deep contents" of the specified array:::if->return->result->foreach->elementHash->cl->if->else->if->element->getClass->getComponentType->element->hashCode->else->if->deepHashCode->else->primitiveArrayHashCode->return
Arrays#primitiveArrayHashCode(Object, Class)::: arrays primitive array hash code:::return->hashCode->hashCode->hashCode->hashCode->hashCode->hashCode->hashCode->hashCode
Arrays#deepEquals(Object[], Object[]):::Returns true if the two specified arrays are deeply equal to one another:::if->return->if->return->length->if->return->for->i->return
Arrays#deepEquals0(Object, Object)::: arrays deep equals0:::eq->if->deepEquals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->if->equals->else->e1->equals->return
Arrays#toString(long[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(int[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(short[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(char[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(byte[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(boolean[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(float[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(double[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(Object[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#deepToString(Object[]):::Returns a string representation of the "deep contents" of the specified array:::if->return->bufLen->if->buf->new->StringBuilder->new->HashSet<>->deepToString->return->buf->toString
Arrays#deepToString(Object[], StringBuilder, Set)::: arrays deep to string:::if->buf->append->return->iMax->if->buf->append->return->dejaVu->add->buf->append->for->i->buf->append->dejaVu->remove
Arrays#setAll(T[], IntFunction):::Set all elements of the specified array, using the provided generator function to compute each element:::Objects->requireNonNull->for->i
Arrays#parallelSetAll(T[], IntFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element:::Objects->requireNonNull->IntStream->range->parallel->generator->apply->forEach
Arrays#setAll(int[], IntUnaryOperator):::Set all elements of the specified array, using the provided generator function to compute each element:::Objects->requireNonNull->for->i
Arrays#parallelSetAll(int[], IntUnaryOperator):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element:::Objects->requireNonNull->IntStream->range->parallel->generator->applyAsInt->forEach
Arrays#setAll(long[], IntToLongFunction):::Set all elements of the specified array, using the provided generator function to compute each element:::Objects->requireNonNull->for->i
Arrays#parallelSetAll(long[], IntToLongFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element:::Objects->requireNonNull->IntStream->range->parallel->generator->applyAsLong->forEach
Arrays#setAll(double[], IntToDoubleFunction):::Set all elements of the specified array, using the provided generator function to compute each element:::Objects->requireNonNull->for->i
Arrays#parallelSetAll(double[], IntToDoubleFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element:::Objects->requireNonNull->IntStream->range->parallel->generator->applyAsDouble->forEach
Arrays#spliterator(T[]):::Returns a Spliterator covering all of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(T[], int, int):::Returns a Spliterator covering the specified range of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(int[]):::Returns a Spliterator.OfInt covering all of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(int[], int, int):::Returns a Spliterator.OfInt covering the specified range of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(long[]):::Returns a Spliterator.OfLong covering all of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(long[], int, int):::Returns a Spliterator.OfLong covering the specified range of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(double[]):::Returns a Spliterator.OfDouble covering all of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(double[], int, int):::Returns a Spliterator.OfDouble covering the specified range of the specified array:::return->Spliterators->spliterator
Arrays#stream(T[]):::Returns a sequential Stream with the specified array as its source.:::return->stream
Arrays#stream(T[], int, int):::Returns a sequential Stream with the specified range of the specified array as its source.:::return->StreamSupport->spliterator->stream
Arrays#stream(int[]):::Returns a sequential IntStream with the specified array as its source.:::return->stream
Arrays#stream(int[], int, int):::Returns a sequential IntStream with the specified range of the specified array as its source.:::return->StreamSupport->spliterator->intStream
Arrays#stream(long[]):::Returns a sequential LongStream with the specified array as its source.:::return->stream
Arrays#stream(long[], int, int):::Returns a sequential LongStream with the specified range of the specified array as its source.:::return->StreamSupport->spliterator->longStream
Arrays#stream(double[]):::Returns a sequential DoubleStream with the specified array as its source.:::return->stream
Arrays#stream(double[], int, int):::Returns a sequential DoubleStream with the specified range of the specified array as its source.:::return->StreamSupport->spliterator->doubleStream
Arrays#compare(boolean[], boolean[]):::Compares two boolean arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Boolean->compare->return
Arrays#compare(boolean[], int, int, boolean[], int, int):::Compares two boolean arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Boolean->compare->return
Arrays#compare(byte[], byte[]):::Compares two byte arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Byte->compare->return
Arrays#compare(byte[], int, int, byte[], int, int):::Compares two byte arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Byte->compare->return
Arrays#compareUnsigned(byte[], byte[]):::Compares two byte arrays lexicographically, numerically treating elements as unsigned:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Byte->compareUnsigned->return
Arrays#compareUnsigned(byte[], int, int, byte[], int, int):::Compares two byte arrays lexicographically over the specified ranges, numerically treating elements as unsigned:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Byte->compareUnsigned->return
Arrays#compare(short[], short[]):::Compares two short arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Short->compare->return
Arrays#compare(short[], int, int, short[], int, int):::Compares two short arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Short->compare->return
Arrays#compareUnsigned(short[], short[]):::Compares two short arrays lexicographically, numerically treating elements as unsigned:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Short->compareUnsigned->return
Arrays#compareUnsigned(short[], int, int, short[], int, int):::Compares two short arrays lexicographically over the specified ranges, numerically treating elements as unsigned:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Short->compareUnsigned->return
Arrays#compare(char[], char[]):::Compares two char arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Character->compare->return
Arrays#compare(char[], int, int, char[], int, int):::Compares two char arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Character->compare->return
Arrays#compare(int[], int[]):::Compares two int arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Integer->compare->return
Arrays#compare(int[], int, int, int[], int, int):::Compares two int arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Integer->compare->return
Arrays#compareUnsigned(int[], int[]):::Compares two int arrays lexicographically, numerically treating elements as unsigned:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Integer->compareUnsigned->return
Arrays#compareUnsigned(int[], int, int, int[], int, int):::Compares two int arrays lexicographically over the specified ranges, numerically treating elements as unsigned:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Integer->compareUnsigned->return
Arrays#compare(long[], long[]):::Compares two long arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Long->compare->return
Arrays#compare(long[], int, int, long[], int, int):::Compares two long arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Long->compare->return
Arrays#compareUnsigned(long[], long[]):::Compares two long arrays lexicographically, numerically treating elements as unsigned:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Long->compareUnsigned->return
Arrays#compareUnsigned(long[], int, int, long[], int, int):::Compares two long arrays lexicographically over the specified ranges, numerically treating elements as unsigned:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Long->compareUnsigned->return
Arrays#compare(float[], float[]):::Compares two float arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Float->compare->return
Arrays#compare(float[], int, int, float[], int, int):::Compares two float arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Float->compare->return
Arrays#compare(double[], double[]):::Compares two double arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Double->compare->return
Arrays#compare(double[], int, int, double[], int, int):::Compares two double arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Double->compare->return
Arrays#compare(T[], T[]):::Compares two Object arrays, within comparable elements, lexicographically:::if->return->if->return->length->Math->min->for->i->return
Arrays#compare(T[], int, int, T[], int, int):::Compares two Object arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->for->i->return
Arrays#compare(T[], T[], Comparator):::Compares two Object arrays lexicographically using a specified comparator:::Objects->requireNonNull->if->return->if->return->length->Math->min->for->i->return
Arrays#compare(T[], int, int, T[], int, int, Comparator):::Compares two Object arrays lexicographically over the specified ranges:::Objects->requireNonNull->rangeCheck->rangeCheck->aLength->bLength->length->Math->min->for->i->return
Arrays#mismatch(boolean[], boolean[]):::Finds and returns the index of the first mismatch between two boolean arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(boolean[], int, int, boolean[], int, int):::Finds and returns the relative index of the first mismatch between two boolean arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(byte[], byte[]):::Finds and returns the index of the first mismatch between two byte arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(byte[], int, int, byte[], int, int):::Finds and returns the relative index of the first mismatch between two byte arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(char[], char[]):::Finds and returns the index of the first mismatch between two char arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(char[], int, int, char[], int, int):::Finds and returns the relative index of the first mismatch between two char arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(short[], short[]):::Finds and returns the index of the first mismatch between two short arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(short[], int, int, short[], int, int):::Finds and returns the relative index of the first mismatch between two short arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(int[], int[]):::Finds and returns the index of the first mismatch between two int arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(int[], int, int, int[], int, int):::Finds and returns the relative index of the first mismatch between two int arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(long[], long[]):::Finds and returns the index of the first mismatch between two long arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(long[], int, int, long[], int, int):::Finds and returns the relative index of the first mismatch between two long arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(float[], float[]):::Finds and returns the index of the first mismatch between two float arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(float[], int, int, float[], int, int):::Finds and returns the relative index of the first mismatch between two float arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(double[], double[]):::Finds and returns the index of the first mismatch between two double arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(double[], int, int, double[], int, int):::Finds and returns the relative index of the first mismatch between two double arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(Object[], Object[]):::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->for->i->return
Arrays#mismatch(Object[], int, int, Object[], int, int):::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->for->i->return
Arrays#mismatch(T[], T[], Comparator):::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found:::Objects->requireNonNull->length->Math->min->if->return->for->i->return
Arrays#mismatch(T[], int, int, T[], int, int, Comparator):::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found:::Objects->requireNonNull->rangeCheck->rangeCheck->aLength->bLength->length->Math->min->for->i->return
ArraysParallelSortHelpers.EmptyCompleter#compute()::: empty completer compute:::
ArraysParallelSortHelpers.Relay#compute()::: relay compute:::
ArraysParallelSortHelpers.Relay#onCompletion(CountedCompleter)::: relay on completion:::task->compute
ArraysParallelSortHelpers.FJObject.Sorter#compute()::: sorter compute:::s->c->a->w->b->n->wb->g->while->h->q->u->fc->new->Merger<>->new->Relay->rc->new->Merger<>->new->Relay->new->Sorter<>->fork->new->Sorter<>->fork->bc->new->Merger<>->new->Relay->new->Sorter<>->fork->new->EmptyCompleter->TimSort->sort->s->tryComplete
ArraysParallelSortHelpers.FJObject.Merger#compute()::: merger compute:::c->a->w->lb->ln->rb->rn->k->g->if->throw->new->IllegalStateException->for->lh->rh->lf->rf->while->t->al->ar->if->c->compare->else->if->System->arraycopy->else->if->System->arraycopy->tryComplete
ArraysParallelSortHelpers.FJByte.Sorter#compute()::: sorter compute:::s->a->w->b->n->wb->g->while->h->q->u->fc->new->Merger->new->Relay->rc->new->Merger->new->Relay->new->Sorter->fork->new->Sorter->fork->bc->new->Merger->new->Relay->new->Sorter->fork->new->EmptyCompleter->DualPivotQuicksort->sort->s->tryComplete
ArraysParallelSortHelpers.FJByte.Merger#compute()::: merger compute:::a->w->lb->ln->rb->rn->k->g->if->throw->new->IllegalStateException->for->lh->rh->lf->rf->while->t->al->ar->if->else->if->System->arraycopy->else->if->System->arraycopy->tryComplete
ArraysParallelSortHelpers.FJChar.Sorter#compute()::: sorter compute:::s->a->w->b->n->wb->g->while->h->q->u->fc->new->Merger->new->Relay->rc->new->Merger->new->Relay->new->Sorter->fork->new->Sorter->fork->bc->new->Merger->new->Relay->new->Sorter->fork->new->EmptyCompleter->DualPivotQuicksort->sort->s->tryComplete
ArraysParallelSortHelpers.FJChar.Merger#compute()::: merger compute:::a->w->lb->ln->rb->rn->k->g->if->throw->new->IllegalStateException->for->lh->rh->lf->rf->while->t->al->ar->if->else->if->System->arraycopy->else->if->System->arraycopy->tryComplete
ArraysParallelSortHelpers.FJShort.Sorter#compute()::: sorter compute:::s->a->w->b->n->wb->g->while->h->q->u->fc->new->Merger->new->Relay->rc->new->Merger->new->Relay->new->Sorter->fork->new->Sorter->fork->bc->new->Merger->new->Relay->new->Sorter->fork->new->EmptyCompleter->DualPivotQuicksort->sort->s->tryComplete
ArraysParallelSortHelpers.FJShort.Merger#compute()::: merger compute:::a->w->lb->ln->rb->rn->k->g->if->throw->new->IllegalStateException->for->lh->rh->lf->rf->while->t->al->ar->if->else->if->System->arraycopy->else->if->System->arraycopy->tryComplete
ArraysParallelSortHelpers.FJInt.Sorter#compute()::: sorter compute:::s->a->w->b->n->wb->g->while->h->q->u->fc->new->Merger->new->Relay->rc->new->Merger->new->Relay->new->Sorter->fork->new->Sorter->fork->bc->new->Merger->new->Relay->new->Sorter->fork->new->EmptyCompleter->DualPivotQuicksort->sort->s->tryComplete
ArraysParallelSortHelpers.FJInt.Merger#compute()::: merger compute:::a->w->lb->ln->rb->rn->k->g->if->throw->new->IllegalStateException->for->lh->rh->lf->rf->while->t->al->ar->if->else->if->System->arraycopy->else->if->System->arraycopy->tryComplete
ArraysParallelSortHelpers.FJLong.Sorter#compute()::: sorter compute:::s->a->w->b->n->wb->g->while->h->q->u->fc->new->Merger->new->Relay->rc->new->Merger->new->Relay->new->Sorter->fork->new->Sorter->fork->bc->new->Merger->new->Relay->new->Sorter->fork->new->EmptyCompleter->DualPivotQuicksort->sort->s->tryComplete
ArraysParallelSortHelpers.FJLong.Merger#compute()::: merger compute:::a->w->lb->ln->rb->rn->k->g->if->throw->new->IllegalStateException->for->lh->rh->lf->rf->while->t->al->ar->if->else->if->System->arraycopy->else->if->System->arraycopy->tryComplete
ArraysParallelSortHelpers.FJFloat.Sorter#compute()::: sorter compute:::s->a->w->b->n->wb->g->while->h->q->u->fc->new->Merger->new->Relay->rc->new->Merger->new->Relay->new->Sorter->fork->new->Sorter->fork->bc->new->Merger->new->Relay->new->Sorter->fork->new->EmptyCompleter->DualPivotQuicksort->sort->s->tryComplete
ArraysParallelSortHelpers.FJFloat.Merger#compute()::: merger compute:::a->w->lb->ln->rb->rn->k->g->if->throw->new->IllegalStateException->for->lh->rh->lf->rf->while->t->al->ar->if->else->if->System->arraycopy->else->if->System->arraycopy->tryComplete
ArraysParallelSortHelpers.FJDouble.Sorter#compute()::: sorter compute:::s->a->w->b->n->wb->g->while->h->q->u->fc->new->Merger->new->Relay->rc->new->Merger->new->Relay->new->Sorter->fork->new->Sorter->fork->bc->new->Merger->new->Relay->new->Sorter->fork->new->EmptyCompleter->DualPivotQuicksort->sort->s->tryComplete
ArraysParallelSortHelpers.FJDouble.Merger#compute()::: merger compute:::a->w->lb->ln->rb->rn->k->g->if->throw->new->IllegalStateException->for->lh->rh->lf->rf->while->t->al->ar->if->else->if->System->arraycopy->else->if->System->arraycopy->tryComplete
Base64#getEncoder():::Returns a Encoder that encodes using the Basic type base64 encoding scheme.:::return
Base64#getUrlEncoder():::Returns a Encoder that encodes using the URL and Filename safe type base64 encoding scheme.:::return
Base64#getMimeEncoder():::Returns a Encoder that encodes using the MIME type base64 encoding scheme.:::return
Base64#getMimeEncoder(int, byte[]):::Returns a Encoder that encodes using the MIME type base64 encoding scheme with specified line length and line separators.:::Objects->requireNonNull->base64->foreach->if->throw->Integer->toString->new->IllegalArgumentException->if->return->return->new->Encoder
Base64#getDecoder():::Returns a Decoder that decodes using the Basic type base64 encoding scheme.:::return
Base64#getUrlDecoder():::Returns a Decoder that decodes using the URL and Filename safe type base64 encoding scheme.:::return
Base64#getMimeDecoder():::Returns a Decoder that decodes using the MIME type base64 decoding scheme.:::return
Base64.Encoder#outLength(int)::: encoder out length:::len->if->else->n->if->return
Base64.Encoder#encode(byte[]):::Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme:::len->outLength->dst->new->byteArr->ret->encode0->if->return->Arrays->copyOf->return
Base64.Encoder#encode(byte[], byte[]):::Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0:::len->outLength->if->throw->new->IllegalArgumentException->return->encode0
Base64.Encoder#encodeToString(byte[]):::Encodes the specified byte array into a String using the Base64 encoding scheme:::encoded->encode->return->new->String
Base64.Encoder#encode(ByteBuffer):::Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme:::len->buffer->remaining->outLength->dst->new->byteArr->ret->if->buffer->hasArray->buffer->array->buffer->arrayOffset->buffer->position->buffer->arrayOffset->buffer->limit->encode0->buffer->buffer->limit->position->else->src->buffer->remaining->new->byteArr->buffer->get->encode0->if->Arrays->copyOf->return->ByteBuffer->wrap
Base64.Encoder#wrap(OutputStream):::Wraps an output stream for encoding byte data using the Base64 encoding scheme:::Objects->requireNonNull->return->new->EncOutputStream
Base64.Encoder#withoutPadding():::Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data:::if->return->return->new->Encoder
Base64.Encoder#encodeBlock(byte[], int, int, byte[], int, boolean)::: encoder encode block:::base64->for->sp0->dp0
Base64.Encoder#encode0(byte[], int, int, byte[])::: encoder encode0:::base64->sp->slen->sl->if->dp->while->sl0->Math->min->encodeBlock->dlen->if->foreach->if->b0->if->if->else->b1->if->return
Base64.Decoder#decode(byte[]):::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into a newly-allocated output byte array:::dst->outLength->new->byteArr->ret->decode0->if->Arrays->copyOf->return
Base64.Decoder#decode(String):::Decodes a Base64 encoded String into a newly-allocated byte array using the Base64 encoding scheme:::return->src->getBytes->decode
Base64.Decoder#decode(byte[], byte[]):::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into the given output byte array, starting at offset 0:::len->outLength->if->throw->new->IllegalArgumentException->return->decode0
Base64.Decoder#decode(ByteBuffer):::Decodes all bytes from the input byte buffer using the Base64 encoding scheme, writing the results into a newly-allocated ByteBuffer:::pos0->buffer->position->try->src->sp->sl->if->buffer->hasArray->buffer->array->buffer->arrayOffset->buffer->position->buffer->arrayOffset->buffer->limit->buffer->buffer->limit->position->else->buffer->remaining->new->byteArr->buffer->get->dst->outLength->new->byteArr->return->ByteBuffer->decode0->wrap->catch->buffer->position->throw->finally
Base64.Decoder#wrap(InputStream):::Returns an input stream for decoding Base64 encoded byte stream:::Objects->requireNonNull->return->new->DecInputStream
Base64.Decoder#outLength(byte[], int, int)::: decoder out length:::base64->paddings->len->if->return->if->if->return->throw->new->IllegalArgumentException->if->n->while->b->if->break->if->else->if->if->if->return
Base64.Decoder#decode0(byte[], int, int, byte[])::: decoder decode0:::base64->dp->bits->shiftto->while->if->sl0->while->b1->b2->b3->b4->if->break->bits0->if->break->b->if->if->if->throw->new->IllegalArgumentException->break->if->continue->else->throw->Integer->toString->new->IllegalArgumentException->if->if->else->if->else->if->throw->new->IllegalArgumentException->while->if->continue->throw->new->IllegalArgumentException->return
Base64.EncOutputStream#write(int)::: enc output stream write:::buf->new->byteArr->write
Base64.EncOutputStream#checkNewline()::: enc output stream check newline:::if->out->write
Base64.EncOutputStream#writeb4(char, char, char, char)::: enc output stream writeb4:::out->write
Base64.EncOutputStream#write(byte[], int, int)::: enc output stream write:::if->throw->new->IOException->if->throw->new->ArrayIndexOutOfBoundsException->if->return->if->if->if->return->checkNewline->writeb4->nBits24->while->checkNewline->dl->sl->Math->min->dp->for->sp->out->write->if->else->if
Base64.EncOutputStream#close()::: enc output stream close:::if->if->checkNewline->out->write->out->write->if->out->write->out->write->else->if->checkNewline->out->write->out->write->out->write->if->out->write->out->close
Base64.DecInputStream#read()::: dec input stream read:::return->read
Base64.DecInputStream#eof(byte[], int, int, int)::: dec input stream eof:::if->if->throw->new->IOException->if->if->else->return
Base64.DecInputStream#padding(byte[], int, int, int)::: dec input stream padding:::if->is->read->throw->new->IOException->if->if->else->return
Base64.DecInputStream#read(byte[], int, int)::: dec input stream read:::if->throw->new->IOException->if->return->if->throw->new->IndexOutOfBoundsException->oldOff->while->if->return->while->v->is->read->if->return->eof->if->if->return->padding->if->if->throw->Integer->toString->new->IOException->continue->if->if->break->if->break->else->return
Base64.DecInputStream#available()::: dec input stream available:::if->throw->new->IOException->return->is->available
Base64.DecInputStream#close()::: dec input stream close:::if->is->close
BitSet#wordIndex(int):::Given a bit index, return word index containing it.:::return
BitSet#checkInvariants():::Every public method must preserve these invariants.:::
BitSet#recalculateWordsInUse():::Sets the field wordsInUse to the logical size in words of the bit set:::i->for
BitSet#initWords(int)::: bit set init words:::wordIndex->new->longArr
BitSet#valueOf(long[]):::Returns a new bit set containing all the bits in the given long array:::n->for->return->Arrays->copyOf->new->BitSet
BitSet#valueOf(LongBuffer):::Returns a new bit set containing all the bits in the given long buffer between its position and limit:::lb->slice->n->for->lb->remaining->lb->get->words->new->longArr->lb->get->return->new->BitSet
BitSet#valueOf(byte[]):::Returns a new bit set containing all the bits in the given byte array:::return->BitSet->ByteBuffer->wrap->valueOf
BitSet#valueOf(ByteBuffer):::Returns a new bit set containing all the bits in the given byte buffer between its position and limit:::bb->slice->order->n->for->bb->remaining->bb->get->words->new->longArr->bb->limit->i->while->bb->remaining->bb->getLong->for->remaining->bb->remaining->j->return->new->BitSet
BitSet#toByteArray():::Returns a new byte array containing all the bits in this bit set:::n->if->return->new->byteArr->len->for->x->bytes->new->byteArr->bb->ByteBuffer->wrap->order->for->i->for->x->return
BitSet#toLongArray():::Returns a new long array containing all the bits in this bit set:::return->Arrays->copyOf
BitSet#ensureCapacity(int):::Ensures that the BitSet can hold enough words.:::if->request->Math->max->Arrays->copyOf
BitSet#expandTo(int):::Ensures that the BitSet can accommodate a given wordIndex, temporarily violating the invariants:::wordsRequired->if->ensureCapacity
BitSet#checkRange(int, int):::Checks that fromIndex ..:::if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException
BitSet#flip(int):::Sets the bit at the specified index to the complement of its current value.:::if->throw->new->IndexOutOfBoundsException->wordIndex->wordIndex->expandTo->recalculateWordsInUse->checkInvariants
BitSet#flip(int, int):::Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value.:::checkRange->if->return->startWordIndex->wordIndex->endWordIndex->wordIndex->expandTo->firstWordMask->lastWordMask->if->else->for->i->recalculateWordsInUse->checkInvariants
BitSet#set(int):::Sets the bit at the specified index to true.:::if->throw->new->IndexOutOfBoundsException->wordIndex->wordIndex->expandTo->checkInvariants
BitSet#set(int, boolean):::Sets the bit at the specified index to the specified value.:::if->set->else->clear
BitSet#set(int, int):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true.:::checkRange->if->return->startWordIndex->wordIndex->endWordIndex->wordIndex->expandTo->firstWordMask->lastWordMask->if->else->for->i->checkInvariants
BitSet#set(int, int, boolean):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value.:::if->set->else->clear
BitSet#clear(int):::Sets the bit specified by the index to false.:::if->throw->new->IndexOutOfBoundsException->wordIndex->wordIndex->if->return->recalculateWordsInUse->checkInvariants
BitSet#clear(int, int):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false.:::checkRange->if->return->startWordIndex->wordIndex->if->return->endWordIndex->wordIndex->if->length->firstWordMask->lastWordMask->if->else->for->i->recalculateWordsInUse->checkInvariants
BitSet#clear():::Sets all of the bits in this BitSet to false.:::while
BitSet#get(int):::Returns the value of the bit with the specified index:::if->throw->new->IndexOutOfBoundsException->checkInvariants->wordIndex->wordIndex->return
BitSet#get(int, int):::Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive).:::checkRange->checkInvariants->len->length->if->return->new->BitSet->if->result->new->BitSet->targetWords->wordIndex->sourceIndex->wordIndex->wordAligned->for->i->lastWordMask->result->recalculateWordsInUse->result->checkInvariants->return
BitSet#nextSetBit(int):::Returns the index of the first bit that is set to true that occurs on or after the specified starting index:::if->throw->new->IndexOutOfBoundsException->checkInvariants->u->wordIndex->if->return->word->while->if->return->Long->numberOfTrailingZeros->if->return
BitSet#nextClearBit(int):::Returns the index of the first bit that is set to false that occurs on or after the specified starting index.:::if->throw->new->IndexOutOfBoundsException->checkInvariants->u->wordIndex->if->return->word->while->if->return->Long->numberOfTrailingZeros->if->return
BitSet#previousSetBit(int):::Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index:::if->if->return->throw->new->IndexOutOfBoundsException->checkInvariants->u->wordIndex->if->return->length->word->while->if->return->Long->numberOfLeadingZeros->if->return
BitSet#previousClearBit(int):::Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index:::if->if->return->throw->new->IndexOutOfBoundsException->checkInvariants->u->wordIndex->if->return->word->while->if->return->Long->numberOfLeadingZeros->if->return
BitSet#length():::Returns the "logical size" of this BitSet: the index of the highest set bit in the BitSet plus one:::if->return->return->Long->numberOfLeadingZeros
BitSet#isEmpty():::Returns true if this BitSet contains no bits that are set to true.:::return
BitSet#intersects(BitSet):::Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.:::for->i->Math->min->return
BitSet#cardinality():::Returns the number of bits set to true in this BitSet.:::sum->for->i->return
BitSet#and(BitSet):::Performs a logical AND of this target bit set with the argument bit set:::if->return->while->for->i->recalculateWordsInUse->checkInvariants
BitSet#or(BitSet):::Performs a logical OR of this bit set with the bit set argument:::if->return->wordsInCommon->Math->min->if->ensureCapacity->for->i->if->System->arraycopy->checkInvariants
BitSet#xor(BitSet):::Performs a logical XOR of this bit set with the bit set argument:::wordsInCommon->Math->min->if->ensureCapacity->for->i->if->System->arraycopy->recalculateWordsInUse->checkInvariants
BitSet#andNot(BitSet):::Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet.:::for->i->Math->min->recalculateWordsInUse->checkInvariants
BitSet#hashCode():::Returns the hash code value for this bit set:::h->for->i->return
BitSet#size():::Returns the number of bits of space actually in use by this BitSet to represent bit values:::return
BitSet#equals(Object):::Compares this object against the specified object:::if->return->if->return->set->checkInvariants->set->checkInvariants->if->return->for->i->return
BitSet#clone():::Cloning this BitSet produces a new BitSet that is equal to it:::if->trimToSize->try->result->super->clone->words->clone->result->checkInvariants->return->catch->throw->new->InternalError->finally
BitSet#trimToSize():::Attempts to reduce internal storage used for the bits in this bit set:::if->Arrays->copyOf->checkInvariants
BitSet#writeObject(ObjectOutputStream):::Save the state of the BitSet instance to a stream (i.e., serialize it).:::checkInvariants->if->trimToSize->fields->s->putFields->fields->put->s->writeFields
BitSet#readObject(ObjectInputStream):::Reconstitute the BitSet instance from a stream (i.e., deserialize it).:::fields->s->readFields->fields->get->recalculateWordsInUse->checkInvariants
BitSet#toString():::Returns a string representation of this bit set:::checkInvariants->numBits->cardinality->b->new->StringBuilder->b->append->i->nextSetBit->if->b->append->while->if->break->if->nextSetBit->break->endOfRun->nextClearBit->do->b->append->append->while->b->append->return->b->toString
BitSet#stream():::Returns a stream of indices for which this BitSet contains a bit in the set state:::return->StreamSupport->new->BitSetSpliterator->intStream
BitSet#nextSetBit(int, int):::Returns the index of the first bit that is set to true that occurs on or after the specified starting index and up to and including the specified word index If no such bit exists then -1 is returned.:::u->wordIndex->if->return->word->while->if->return->Long->numberOfTrailingZeros->if->return
Calendar.Builder#setInstant(long):::Sets the instant parameter to the given instant value that is a millisecond offset from the Epoch.:::if->throw->new->IllegalStateException->return
Calendar.Builder#setInstant(Date):::Sets the instant parameter to the instant value given by a Date:::return->instant->getTime->setInstant
Calendar.Builder#set(int, int):::Sets the field parameter to the given value:::if->throw->new->IllegalArgumentException->if->isInstantSet->throw->new->IllegalStateException->allocateFields->internalSet->return
Calendar.Builder#setFields(int...):::Sets field parameters to their values given by fieldValuePairs that are pairs of a field and its value:::len->if->throw->new->IllegalArgumentException->if->isInstantSet->throw->new->IllegalStateException->if->throw->new->IllegalStateException->allocateFields->for->i->return
Calendar.Builder#setDate(int, int, int):::Sets the date field parameters to the values given by year, month, and dayOfMonth:::return->setFields
Calendar.Builder#setTimeOfDay(int, int, int):::Sets the time of day field parameters to the values given by hourOfDay, minute, and second:::return->setTimeOfDay
Calendar.Builder#setTimeOfDay(int, int, int, int):::Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis:::return->setFields
Calendar.Builder#setWeekDate(int, int, int):::Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week:::allocateFields->internalSet->internalSet->internalSet->return
Calendar.Builder#setTimeZone(TimeZone):::Sets the time zone parameter to the given zone:::if->throw->new->NullPointerException->return
Calendar.Builder#setLenient(boolean):::Sets the lenient mode parameter to the value given by lenient:::return
Calendar.Builder#setCalendarType(String):::Sets the calendar type parameter to the given type:::if->type->equals->if->Calendar->getAvailableCalendarTypes->contains->type->equals->throw->new->IllegalArgumentException->if->else->if->equals->throw->new->IllegalStateException->return
Calendar.Builder#setLocale(Locale):::Sets the locale parameter to the given locale:::if->throw->new->NullPointerException->return
Calendar.Builder#setWeekDefinition(int, int):::Sets the week definition parameters to the values given by firstDayOfWeek and minimalDaysInFirstWeek that are used to determine the first week of a year:::if->isValidWeekParameter->isValidWeekParameter->throw->new->IllegalArgumentException->return
Calendar.Builder#build():::Returns a Calendar built from the parameters set by the setter methods:::if->Locale->getDefault->if->defaultTimeZone->cal->if->locale->getUnicodeLocaleType->if->if->locale->getCountry->locale->getLanguage->else->switch->new->GregorianCalendar->break->gcal->new->GregorianCalendar->gcal->new->Date->setGregorianChange->setWeekDefinition->break->new->BuddhistCalendar->cal->clear->break->new->JapaneseImperialCalendar->break->throw->new->IllegalArgumentException->cal->setLenient->if->cal->setFirstDayOfWeek->cal->setMinimalDaysInFirstWeek->if->isInstantSet->cal->setTimeInMillis->cal->complete->return->if->weekDate->isSet->if->cal->isWeekDateSupported->throw->new->IllegalArgumentException->for->stamp->if->weekOfYear->isSet->dayOfWeek->isSet->cal->getFirstDayOfWeek->cal->setWeekDate->cal->complete->return
Calendar.Builder#allocateFields()::: builder allocate fields:::if->new->intArr
Calendar.Builder#internalSet(int, int)::: builder internal set:::if->throw->new->IllegalStateException->if
Calendar.Builder#isInstantSet()::: builder is instant set:::return
Calendar.Builder#isSet(int)::: builder is set:::return
Calendar.Builder#isValidWeekParameter(int)::: builder is valid week parameter:::return
Calendar#getInstance():::Gets a calendar using the default time zone and locale:::aLocale->Locale->getDefault->return->defaultTimeZone->createCalendar
Calendar#getInstance(TimeZone):::Gets a calendar using the specified time zone and default locale:::return->Locale->getDefault->createCalendar
Calendar#getInstance(Locale):::Gets a calendar using the default time zone and specified locale:::return->defaultTimeZone->createCalendar
Calendar#getInstance(TimeZone, Locale):::Gets a calendar with the specified time zone and locale:::return->createCalendar
Calendar#defaultTimeZone(Locale)::: calendar default time zone:::defaultTZ->TimeZone->getDefault->shortTZID->l->getUnicodeLocaleType->return->TimeZoneNameUtility->convertLDMLShortID->TimeZone->getTimeZone->map->orElse
Calendar#createCalendar(TimeZone, Locale)::: calendar create calendar:::provider->LocaleProviderAdapter->getAdapter->getCalendarProvider->if->try->return->provider->getInstance->catch->finally->cal->if->aLocale->hasExtensions->caltype->aLocale->getUnicodeLocaleType->if->switch->new->BuddhistCalendar->break->new->JapaneseImperialCalendar->break->new->GregorianCalendar->break->if->if->aLocale->getLanguage->aLocale->getCountry->new->BuddhistCalendar->else->if->aLocale->getVariant->aLocale->getLanguage->aLocale->getCountry->new->JapaneseImperialCalendar->else->new->GregorianCalendar->return
Calendar#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances:::return->DateFormat->getAvailableLocales
Calendar#computeTime():::Converts the current calendar field values in #fields fields[] to the millisecond time value #time.:::
Calendar#computeFields():::Converts the current millisecond time value #time to calendar field values in #fields fields[]:::
Calendar#getTime():::Returns a Date object representing this Calendar's time value (millisecond offset from the Epoch").:::return->getTimeInMillis->new->Date
Calendar#setTime(Date):::Sets this Calendar's time with the given Date:::date->getTime->setTimeInMillis
Calendar#getTimeInMillis():::Returns this Calendar's time value in milliseconds.:::if->updateTime->return
Calendar#setTimeInMillis(long):::Sets this Calendar's current time from the given long value.:::if->isDirty->return->computeFields
Calendar#get(int):::Returns the value of the given calendar field:::complete->return->internalGet
Calendar#internalGet(int):::Returns the value of the given calendar field:::return
Calendar#internalSet(int, int):::Sets the value of the given calendar field:::
Calendar#set(int, int):::Sets the given calendar field to the given value:::if->computeFields->internalSet->if->adjustStamp
Calendar#set(int, int, int):::Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH:::set->set->set
Calendar#set(int, int, int, int, int):::Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE:::set->set->set->set->set
Calendar#set(int, int, int, int, int, int):::Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND:::set->set->set->set->set->set
Calendar#clear():::Sets all the calendar field values and the time value (millisecond offset from the Epoch) of this Calendar undefined:::for->i
Calendar#clear(int):::Sets the given calendar field value and the time value (millisecond offset from the Epoch) of this Calendar undefined:::
Calendar#isSet(int):::Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call.:::return
Calendar#getDisplayName(int, int, Locale):::Returns the string representation of the calendar field value in the given style and locale:::if->checkDisplayNameParams->return->calendarType->getCalendarType->fieldValue->get->if->isStandaloneStyle->isNarrowFormatStyle->val->CalendarDataUtility->retrieveFieldValueName->if->if->isNarrowFormatStyle->CalendarDataUtility->toStandaloneStyle->retrieveFieldValueName->else->if->isStandaloneStyle->CalendarDataUtility->getBaseStyle->retrieveFieldValueName->return->symbols->DateFormatSymbols->getInstance->strings->getFieldStrings->if->if->return->return
Calendar#getDisplayNames(int, int, Locale):::Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values:::if->checkDisplayNameParams->return->calendarType->getCalendarType->if->isStandaloneStyle->isNarrowFormatStyle->map->CalendarDataUtility->retrieveFieldValueNames->if->if->isNarrowFormatStyle->CalendarDataUtility->toStandaloneStyle->retrieveFieldValueNames->else->if->CalendarDataUtility->getBaseStyle->retrieveFieldValueNames->return->return->getDisplayNamesImpl
Calendar#getDisplayNamesImpl(int, int, Locale)::: calendar get display names impl:::symbols->DateFormatSymbols->getInstance->strings->getFieldStrings->if->names->new->HashMap<>->for->i->return->return
Calendar#checkDisplayNameParams(int, int, int, int, Locale, int)::: calendar check display name params:::baseStyle->getBaseStyle->if->throw->new->IllegalArgumentException->if->throw->new->NullPointerException->return->isFieldSet
Calendar#getFieldStrings(int, int, DateFormatSymbols)::: calendar get field strings:::baseStyle->getBaseStyle->if->return->strings->switch->symbols->getEras->break->symbols->getMonths->symbols->getShortMonths->break->symbols->getWeekdays->symbols->getShortWeekdays->break->symbols->getAmPmStrings->break->return
Calendar#complete():::Fills in any unset fields in the calendar fields:::if->updateTime->if->computeFields
Calendar#isExternallySet(int):::Returns whether the value of the specified calendar field has been set externally by calling one of the setter methods rather than by the internal time calculation.:::return
Calendar#getSetStateFields():::Returns a field mask (bit mask) indicating all calendar fields that have the state of externally or internally set.:::mask->for->i->return
Calendar#setFieldsComputed(int):::Sets the state of the specified calendar fields to computed:::if->for->i->else->for->i
Calendar#setFieldsNormalized(int):::Sets the state of the calendar fields that are not specified by fieldMask to unset:::if->for->i
Calendar#isPartiallyNormalized():::Returns whether the calendar fields are partially in sync with the time value or fully in sync but not stamp values are not normalized yet.:::return
Calendar#isFullyNormalized():::Returns whether the calendar fields are fully in sync with the time value.:::return
Calendar#setUnnormalized():::Marks this Calendar as not sync'd.:::
Calendar#isFieldSet(int, int):::Returns whether the specified field is on in the fieldMask.:::return
Calendar#selectFields():::Returns a field mask indicating which calendar field values to be used to calculate the time value:::fieldMask->if->dowStamp->monthStamp->domStamp->womStamp->aggregateStamp->dowimStamp->aggregateStamp->doyStamp->woyStamp->aggregateStamp->bestStamp->if->if->if->if->if->Math->max->Math->Math->max->max->if->if->if->else->if->if->if->else->else->if->else->if->else->if->else->if->hourOfDayStamp->hourStamp->aggregateStamp->if->Math->max->if->if->else->if->if->if->if->if->if->return
Calendar#getBaseStyle(int)::: calendar get base style:::return
Calendar#toStandaloneStyle(int)::: calendar to standalone style:::return
Calendar#isStandaloneStyle(int)::: calendar is standalone style:::return
Calendar#isNarrowStyle(int)::: calendar is narrow style:::return
Calendar#isNarrowFormatStyle(int)::: calendar is narrow format style:::return
Calendar#aggregateStamp(int, int):::Returns the pseudo-time-stamp for two fields, given their individual pseudo-time-stamps:::if->return->return
Calendar#getAvailableCalendarTypes():::Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment:::return
Calendar#getCalendarType():::Returns the calendar type of this Calendar:::return->this->getClass->getName
Calendar#equals(Object):::Compares this Calendar to the specified Object:::if->return->try->that->return->getMillisOf->compareTo->zone->equals->catch->finally->return
Calendar#hashCode():::Returns a hash code for this calendar.:::otheritems->zone->hashCode->t->getMillisOf->return
Calendar#before(Object):::Returns whether this Calendar represents a time before the time represented by the specified Object:::return->compareTo
Calendar#after(Object):::Returns whether this Calendar represents a time after the time represented by the specified Object:::return->compareTo
Calendar#compareTo(Calendar):::Compares the time values (millisecond offsets from the Epoch) represented by two Calendar objects.:::return->getMillisOf->compareTo
Calendar#add(int, int):::Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules:::
Calendar#roll(int, boolean):::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields:::
Calendar#roll(int, int):::Adds the specified (signed) amount to the specified calendar field without changing larger fields:::while->roll->while->roll
Calendar#setTimeZone(TimeZone):::Sets the time zone with the given time zone value.:::
Calendar#getTimeZone():::Gets the time zone.:::if->zone->clone->return
Calendar#getZone():::Returns the time zone (without cloning).:::return
Calendar#setZoneShared(boolean):::Sets the sharedZone flag to shared.:::
Calendar#setLenient(boolean):::Specifies whether or not date/time interpretation is to be lenient:::
Calendar#isLenient():::Tells whether date/time interpretation is to be lenient.:::return
Calendar#setFirstDayOfWeek(int):::Sets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.:::if->return->invalidateWeekFields
Calendar#getFirstDayOfWeek():::Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.:::return
Calendar#setMinimalDaysInFirstWeek(int):::Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1:::if->return->invalidateWeekFields
Calendar#getMinimalDaysInFirstWeek():::Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1:::return
Calendar#isWeekDateSupported():::Returns whether this Calendar supports week dates:::return
Calendar#getWeekYear():::Returns the week year represented by this Calendar:::throw->new->UnsupportedOperationException
Calendar#setWeekDate(int, int, int):::Sets the date of this Calendar with the given date specifiers - week year, week of year, and day of week:::throw->new->UnsupportedOperationException
Calendar#getWeeksInWeekYear():::Returns the number of weeks in the week year represented by this Calendar:::throw->new->UnsupportedOperationException
Calendar#getMinimum(int):::Returns the minimum value for the given calendar field of this Calendar instance:::
Calendar#getMaximum(int):::Returns the maximum value for the given calendar field of this Calendar instance:::
Calendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this Calendar instance:::
Calendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this Calendar instance:::
Calendar#getActualMinimum(int):::Returns the minimum value that the specified calendar field could have, given the time value of this Calendar:::fieldValue->getGreatestMinimum->endValue->getMinimum->if->return->work->this->clone->work->setLenient->result->do->work->set->if->work->get->break->else->while->return
Calendar#getActualMaximum(int):::Returns the maximum value that the specified calendar field could have, given the time value of this Calendar:::fieldValue->getLeastMaximum->endValue->getMaximum->if->return->work->this->clone->work->setLenient->if->work->set->result->do->work->set->if->work->get->break->else->while->return
Calendar#clone():::Creates and returns a copy of this object.:::try->other->super->clone->new->intArr->new->booleanArr->new->intArr->for->i->zone->clone->return->catch->throw->new->InternalError->finally
Calendar#getFieldName(int):::Returns the name of the specified calendar field.:::return
Calendar#toString():::Return a string representation of this calendar:::buffer->new->StringBuilder->buffer->getClass->getName->append->append->appendValue->buffer->append->append->buffer->append->append->buffer->append->append->buffer->append->append->appendValue->appendValue->for->i->buffer->append->return->buffer->toString
Calendar#appendValue(StringBuilder, String, boolean, long)::: calendar append value:::sb->append->append->if->sb->append->else->sb->append
Calendar#setWeekCountData(Locale):::Both firstDayOfWeek and minimalDaysInFirstWeek are locale-dependent:::data->cachedLocaleData->get->if->new->intArr->CalendarDataUtility->retrieveFirstDayOfWeek->CalendarDataUtility->retrieveMinimalDaysInFirstWeek->cachedLocaleData->putIfAbsent
Calendar#updateTime():::Recomputes the time and updates the status fields isTimeSet and areFieldsSet:::computeTime
Calendar#compareTo(long)::: calendar compare to:::thisTime->getMillisOf->return
Calendar#getMillisOf(Calendar)::: calendar get millis of:::if->return->cal->calendar->clone->cal->setLenient->return->cal->getTimeInMillis
Calendar#adjustStamp():::Adjusts the stamp[] values before nextStamp overflow:::max->newStamp->for
Calendar#invalidateWeekFields():::Sets the WEEK_OF_MONTH and WEEK_OF_YEAR fields to new values with the new parameter value if they have been calculated internally.:::if->return->cal->clone->cal->setLenient->cal->clear->cal->clear->if->weekOfMonth->cal->get->if->if->weekOfYear->cal->get->if
Calendar#writeObject(ObjectOutputStream):::Save the state of this object to a stream (i.e., serialize it):::if->try->updateTime->catch->finally->savedZone->if->stz->getLastRuleInstance->if->zone->getRawOffset->zone->getID->new->SimpleTimeZone->stream->defaultWriteObject->stream->writeObject->if
Calendar#readObject(ObjectInputStream):::Reconstitutes this object from a stream (i.e., deserialize it).:::input->input->defaultReadObject->new->intArr->if->if->new->intArr->if->new->booleanArr->else->if->for->i->zi->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->e->pae->getException->if->if->throw->else->if->throw->else->if->throw->throw->new->RuntimeException->finally->if->if->id->zone->getID->tz->TimeZone->getTimeZone->if->tz->hasSameRules->tz->getID->equals
Calendar#toInstant():::Converts this object to an Instant:::return->Instant->getTimeInMillis->ofEpochMilli
Collection#size():::Returns the number of elements in this collection:::
Collection#isEmpty():::Returns true if this collection contains no elements.:::
Collection#contains(Object):::Returns true if this collection contains the specified element:::
Collection#iterator():::Returns an iterator over the elements in this collection:::
Collection#toArray():::Returns an array containing all of the elements in this collection:::
Collection#toArray(T[]):::Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array:::
Collection#toArray(IntFunction):::Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array:::return->generator->apply->toArray
Collection#add(E):::Ensures that this collection contains the specified element (optional operation):::
Collection#remove(Object):::Removes a single instance of the specified element from this collection, if it is present (optional operation):::
Collection#containsAll(Collection):::Returns true if this collection contains all of the elements in the specified collection.:::
Collection#addAll(Collection):::Adds all of the elements in the specified collection to this collection (optional operation):::
Collection#removeAll(Collection):::Removes all of this collection's elements that are also contained in the specified collection (optional operation):::
Collection#removeIf(Predicate):::Removes all of the elements of this collection that satisfy the given predicate:::Objects->requireNonNull->removed->each->iterator->while->each->hasNext->if->filter->each->next->test->each->remove->return
Collection#retainAll(Collection):::Retains only the elements in this collection that are contained in the specified collection (optional operation):::
Collection#clear():::Removes all of the elements from this collection (optional operation):::
Collection#equals(Object):::Compares the specified object with this collection for equality:::
Collection#hashCode():::Returns the hash code value for this collection:::
Collection#spliterator():::Creates a Spliterator over the elements in this collection:::return->Spliterators->spliterator
Collection#stream():::Returns a sequential Stream with this collection as its source:::return->StreamSupport->spliterator->stream
Collection#parallelStream():::Returns a possibly parallel Stream with this collection as its source:::return->StreamSupport->spliterator->stream
Collections#sort(List):::Sorts the specified list into ascending order, according to the Comparable natural ordering of its elements:::list->sort
Collections#sort(List, Comparator):::Sorts the specified list according to the order induced by the specified comparator:::list->sort
Collections#binarySearch(List>, T):::Searches the specified list for the specified object using the binary search algorithm:::if->list->size->return->Collections->indexedBinarySearch->else->return->Collections->iteratorBinarySearch
Collections#indexedBinarySearch(List>, T)::: collections indexed binary search:::low->high->list->size->while->mid->midVal->list->get->cmp->midVal->compareTo->if->else->if->else->return->return
Collections#iteratorBinarySearch(List>, T)::: collections iterator binary search:::low->high->list->size->i->list->listIterator->while->mid->midVal->get->cmp->midVal->compareTo->if->else->if->else->return->return
Collections#get(ListIterator, int):::Gets the ith element from the given list by repositioning the specified list listIterator.:::obj->pos->i->nextIndex->if->do->i->next->while->else->do->i->previous->while->return
Collections#binarySearch(List, T, Comparator):::Searches the specified list for the specified object using the binary search algorithm:::if->return->binarySearch->if->list->size->return->Collections->indexedBinarySearch->else->return->Collections->iteratorBinarySearch
Collections#indexedBinarySearch(List, T, Comparator)::: collections indexed binary search:::low->high->l->size->while->mid->midVal->l->get->cmp->c->compare->if->else->if->else->return->return
Collections#iteratorBinarySearch(List, T, Comparator)::: collections iterator binary search:::low->high->l->size->i->l->listIterator->while->mid->midVal->get->cmp->c->compare->if->else->if->else->return->return
Collections#reverse(List):::Reverses the order of the elements in the specified list.  This method runs in linear time.:::size->list->size->if->for->i->mid->j->else->fwd->list->listIterator->rev->list->listIterator->for->i->mid->list->size
Collections#shuffle(List):::Randomly permutes the specified list using a default source of randomness:::rnd->if->new->Random->shuffle
Collections#shuffle(List, Random):::Randomly permute the specified list using the specified source of randomness:::size->list->size->if->for->i->else->arr->list->toArray->for->i->it->list->listIterator->foreach->it->next->it->set
Collections#swap(List, int, int):::Swaps the elements at the specified positions in the specified list:::l->l->l->l->get->set->set
Collections#swap(Object[], int, int):::Swaps the two specified elements in the specified array.:::tmp
Collections#fill(List, T):::Replaces all of the elements of the specified list with the specified element:::size->list->size->if->for->i->else->itr->list->listIterator->for->i
Collections#copy(List, List):::Copies all of the elements from one list into another:::srcSize->src->size->if->dest->size->throw->new->IndexOutOfBoundsException->if->for->i->else->di->dest->listIterator->si->src->listIterator->for->i
Collections#min(Collection):::Returns the minimum element of the given collection, according to the natural ordering of its elements:::i->coll->iterator->candidate->i->next->while->i->hasNext->next->i->next->if->next->compareTo->return
Collections#min(Collection, Comparator):::Returns the minimum element of the given collection, according to the order induced by the specified comparator:::if->return->min->i->coll->iterator->candidate->i->next->while->i->hasNext->next->i->next->if->comp->compare->return
Collections#max(Collection):::Returns the maximum element of the given collection, according to the natural ordering of its elements:::i->coll->iterator->candidate->i->next->while->i->hasNext->next->i->next->if->next->compareTo->return
Collections#max(Collection, Comparator):::Returns the maximum element of the given collection, according to the order induced by the specified comparator:::if->return->max->i->coll->iterator->candidate->i->next->while->i->hasNext->next->i->next->if->comp->compare->return
Collections#rotate(List, int):::Rotates the elements in the specified list by the specified distance:::if->list->size->rotate1->else->rotate2
Collections#rotate1(List, int)::: collections rotate1:::size->list->size->if->return->if->if->return->for->cycleStart->nMoved
Collections#rotate2(List, int)::: collections rotate2:::size->list->size->if->return->mid->if->if->return->list->subList->reverse->list->subList->reverse->reverse
Collections#replaceAll(List, T, T):::Replaces all occurrences of one specified value in a list with another:::result->size->list->size->if->if->for->i->else->for->i->else->itr->list->listIterator->if->for->i->else->for->i->return
Collections#indexOfSubList(List, List):::Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence:::sourceSize->source->size->targetSize->target->size->maxCandidate->if->for->candidate->else->si->source->listIterator->for->candidate->return
Collections#lastIndexOfSubList(List, List):::Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence:::sourceSize->source->size->targetSize->target->size->maxCandidate->if->for->candidate->else->if->return->si->source->listIterator->for->candidate->return
Collections#unmodifiableCollection(Collection):::Returns an unmodifiable view of the specified collection:::return->new->UnmodifiableCollection<>
Collections.UnmodifiableCollection#size()::: unmodifiable collection size:::return->c->size
Collections.UnmodifiableCollection#isEmpty()::: unmodifiable collection is empty:::return->c->isEmpty
Collections.UnmodifiableCollection#contains(Object)::: unmodifiable collection contains:::return->c->contains
Collections.UnmodifiableCollection#toArray()::: unmodifiable collection to array:::return->c->toArray
Collections.UnmodifiableCollection#toArray(T[])::: unmodifiable collection to array:::return->c->toArray
Collections.UnmodifiableCollection#toArray(IntFunction)::: unmodifiable collection to array:::return->c->toArray
Collections.UnmodifiableCollection#toString()::: unmodifiable collection to string:::return->c->toString
Collections.UnmodifiableCollection#iterator()::: unmodifiable collection iterator:::return->new->Iterator<E>
Collections.UnmodifiableCollection#add(E)::: unmodifiable collection add:::throw->new->UnsupportedOperationException
Collections.UnmodifiableCollection#remove(Object)::: unmodifiable collection remove:::throw->new->UnsupportedOperationException
Collections.UnmodifiableCollection#containsAll(Collection)::: unmodifiable collection contains all:::return->c->containsAll
Collections.UnmodifiableCollection#addAll(Collection)::: unmodifiable collection add all:::throw->new->UnsupportedOperationException
Collections.UnmodifiableCollection#removeAll(Collection)::: unmodifiable collection remove all:::throw->new->UnsupportedOperationException
Collections.UnmodifiableCollection#retainAll(Collection)::: unmodifiable collection retain all:::throw->new->UnsupportedOperationException
Collections.UnmodifiableCollection#clear()::: unmodifiable collection clear:::throw->new->UnsupportedOperationException
Collections.UnmodifiableCollection#forEach(Consumer)::: unmodifiable collection for each:::c->forEach
Collections.UnmodifiableCollection#removeIf(Predicate)::: unmodifiable collection remove if:::throw->new->UnsupportedOperationException
Collections.UnmodifiableCollection#spliterator()::: unmodifiable collection spliterator:::return->c->spliterator
Collections.UnmodifiableCollection#stream()::: unmodifiable collection stream:::return->c->stream
Collections.UnmodifiableCollection#parallelStream()::: unmodifiable collection parallel stream:::return->c->parallelStream
Collections#unmodifiableSet(Set):::Returns an unmodifiable view of the specified set:::return->new->UnmodifiableSet<>
Collections.UnmodifiableSet#equals(Object)::: unmodifiable set equals:::return->c->equals
Collections.UnmodifiableSet#hashCode()::: unmodifiable set hash code:::return->c->hashCode
Collections#unmodifiableSortedSet(SortedSet):::Returns an unmodifiable view of the specified sorted set:::return->new->UnmodifiableSortedSet<>
Collections.UnmodifiableSortedSet#comparator()::: unmodifiable sorted set comparator:::return->ss->comparator
Collections.UnmodifiableSortedSet#subSet(E, E)::: unmodifiable sorted set sub set:::return->ss->subSet->new->UnmodifiableSortedSet<>
Collections.UnmodifiableSortedSet#headSet(E)::: unmodifiable sorted set head set:::return->ss->headSet->new->UnmodifiableSortedSet<>
Collections.UnmodifiableSortedSet#tailSet(E)::: unmodifiable sorted set tail set:::return->ss->tailSet->new->UnmodifiableSortedSet<>
Collections.UnmodifiableSortedSet#first()::: unmodifiable sorted set first:::return->ss->first
Collections.UnmodifiableSortedSet#last()::: unmodifiable sorted set last:::return->ss->last
Collections#unmodifiableNavigableSet(NavigableSet):::Returns an unmodifiable view of the specified navigable set:::return->new->UnmodifiableNavigableSet<>
Collections.UnmodifiableNavigableSet.EmptyNavigableSet#readResolve()::: empty navigable set read resolve:::return
Collections.UnmodifiableNavigableSet#lower(E)::: unmodifiable navigable set lower:::return->ns->lower
Collections.UnmodifiableNavigableSet#floor(E)::: unmodifiable navigable set floor:::return->ns->floor
Collections.UnmodifiableNavigableSet#ceiling(E)::: unmodifiable navigable set ceiling:::return->ns->ceiling
Collections.UnmodifiableNavigableSet#higher(E)::: unmodifiable navigable set higher:::return->ns->higher
Collections.UnmodifiableNavigableSet#pollFirst()::: unmodifiable navigable set poll first:::throw->new->UnsupportedOperationException
Collections.UnmodifiableNavigableSet#pollLast()::: unmodifiable navigable set poll last:::throw->new->UnsupportedOperationException
Collections.UnmodifiableNavigableSet#descendingSet()::: unmodifiable navigable set descending set:::return->ns->descendingSet->new->UnmodifiableNavigableSet<>
Collections.UnmodifiableNavigableSet#descendingIterator()::: unmodifiable navigable set descending iterator:::return->descendingSet->iterator
Collections.UnmodifiableNavigableSet#subSet(E, boolean, E, boolean)::: unmodifiable navigable set sub set:::return->ns->subSet->new->UnmodifiableNavigableSet<>
Collections.UnmodifiableNavigableSet#headSet(E, boolean)::: unmodifiable navigable set head set:::return->ns->headSet->new->UnmodifiableNavigableSet<>
Collections.UnmodifiableNavigableSet#tailSet(E, boolean)::: unmodifiable navigable set tail set:::return->ns->tailSet->new->UnmodifiableNavigableSet<>
Collections#unmodifiableList(List):::Returns an unmodifiable view of the specified list:::return->new->UnmodifiableRandomAccessList<>->new->UnmodifiableList<>
Collections.UnmodifiableList#equals(Object)::: unmodifiable list equals:::return->list->equals
Collections.UnmodifiableList#hashCode()::: unmodifiable list hash code:::return->list->hashCode
Collections.UnmodifiableList#get(int)::: unmodifiable list get:::return->list->get
Collections.UnmodifiableList#set(int, E)::: unmodifiable list set:::throw->new->UnsupportedOperationException
Collections.UnmodifiableList#add(int, E)::: unmodifiable list add:::throw->new->UnsupportedOperationException
Collections.UnmodifiableList#remove(int)::: unmodifiable list remove:::throw->new->UnsupportedOperationException
Collections.UnmodifiableList#indexOf(Object)::: unmodifiable list index of:::return->list->indexOf
Collections.UnmodifiableList#lastIndexOf(Object)::: unmodifiable list last index of:::return->list->lastIndexOf
Collections.UnmodifiableList#addAll(int, Collection)::: unmodifiable list add all:::throw->new->UnsupportedOperationException
Collections.UnmodifiableList#replaceAll(UnaryOperator)::: unmodifiable list replace all:::throw->new->UnsupportedOperationException
Collections.UnmodifiableList#sort(Comparator)::: unmodifiable list sort:::throw->new->UnsupportedOperationException
Collections.UnmodifiableList#listIterator()::: unmodifiable list list iterator:::return->listIterator
Collections.UnmodifiableList#listIterator(int)::: unmodifiable list list iterator:::return->new->ListIterator<E>
Collections.UnmodifiableList#subList(int, int)::: unmodifiable list sub list:::return->list->subList->new->UnmodifiableList<>
Collections.UnmodifiableList#readResolve():::UnmodifiableRandomAccessList instances are serialized as UnmodifiableList instances to allow them to be deserialized in pre-1.4 JREs (which do not have UnmodifiableRandomAccessList):::return->new->UnmodifiableRandomAccessList<>
Collections.UnmodifiableRandomAccessList#subList(int, int)::: unmodifiable random access list sub list:::return->list->subList->new->UnmodifiableRandomAccessList<>
Collections.UnmodifiableRandomAccessList#writeReplace():::Allows instances to be deserialized in pre-1.4 JREs (which do not have UnmodifiableRandomAccessList):::return->new->UnmodifiableList<>
Collections#unmodifiableMap(Map):::Returns an unmodifiable view of the specified map:::return->new->UnmodifiableMap<>
Collections.UnmodifiableMap#size()::: unmodifiable map size:::return->m->size
Collections.UnmodifiableMap#isEmpty()::: unmodifiable map is empty:::return->m->isEmpty
Collections.UnmodifiableMap#containsKey(Object)::: unmodifiable map contains key:::return->m->containsKey
Collections.UnmodifiableMap#containsValue(Object)::: unmodifiable map contains value:::return->m->containsValue
Collections.UnmodifiableMap#get(Object)::: unmodifiable map get:::return->m->get
Collections.UnmodifiableMap#put(K, V)::: unmodifiable map put:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#remove(Object)::: unmodifiable map remove:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#putAll(Map)::: unmodifiable map put all:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#clear()::: unmodifiable map clear:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#keySet()::: unmodifiable map key set:::if->m->keySet->unmodifiableSet->return
Collections.UnmodifiableMap#entrySet()::: unmodifiable map entry set:::if->m->entrySet->new->UnmodifiableEntrySet<>->return
Collections.UnmodifiableMap#values()::: unmodifiable map values:::if->m->values->unmodifiableCollection->return
Collections.UnmodifiableMap#equals(Object)::: unmodifiable map equals:::return->m->equals
Collections.UnmodifiableMap#hashCode()::: unmodifiable map hash code:::return->m->hashCode
Collections.UnmodifiableMap#toString()::: unmodifiable map to string:::return->m->toString
Collections.UnmodifiableMap#getOrDefault(Object, V)::: unmodifiable map get or default:::return->getOrDefault
Collections.UnmodifiableMap#forEach(BiConsumer)::: unmodifiable map for each:::m->forEach
Collections.UnmodifiableMap#replaceAll(BiFunction)::: unmodifiable map replace all:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#putIfAbsent(K, V)::: unmodifiable map put if absent:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#remove(Object, Object)::: unmodifiable map remove:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#replace(K, V, V)::: unmodifiable map replace:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#replace(K, V)::: unmodifiable map replace:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#computeIfAbsent(K, Function)::: unmodifiable map compute if absent:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#computeIfPresent(K, BiFunction)::: unmodifiable map compute if present:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#compute(K, BiFunction)::: unmodifiable map compute:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap#merge(K, V, BiFunction)::: unmodifiable map merge:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap.UnmodifiableEntrySet#entryConsumer(Consumer>)::: unmodifiable entry set entry consumer:::return->action->new->UnmodifiableEntry<>->accept
Collections.UnmodifiableMap.UnmodifiableEntrySet#forEach(Consumer>)::: unmodifiable entry set for each:::Objects->requireNonNull->c->entryConsumer->forEach
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntrySetSpliterator#tryAdvance(Consumer>)::: unmodifiable entry set spliterator try advance:::Objects->requireNonNull->return->s->entryConsumer->tryAdvance
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntrySetSpliterator#forEachRemaining(Consumer>)::: unmodifiable entry set spliterator for each remaining:::Objects->requireNonNull->s->entryConsumer->forEachRemaining
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntrySetSpliterator#trySplit()::: unmodifiable entry set spliterator try split:::split->s->trySplit->return->new->UnmodifiableEntrySetSpliterator<>
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntrySetSpliterator#estimateSize()::: unmodifiable entry set spliterator estimate size:::return->s->estimateSize
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntrySetSpliterator#getExactSizeIfKnown()::: unmodifiable entry set spliterator get exact size if known:::return->s->getExactSizeIfKnown
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntrySetSpliterator#characteristics()::: unmodifiable entry set spliterator characteristics:::return->s->characteristics
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntrySetSpliterator#hasCharacteristics(int)::: unmodifiable entry set spliterator has characteristics:::return->s->hasCharacteristics
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntrySetSpliterator#getComparator()::: unmodifiable entry set spliterator get comparator:::return->s->getComparator
Collections.UnmodifiableMap.UnmodifiableEntrySet#spliterator()::: unmodifiable entry set spliterator:::return->c->spliterator->new->UnmodifiableEntrySetSpliterator<>
Collections.UnmodifiableMap.UnmodifiableEntrySet#stream()::: unmodifiable entry set stream:::return->StreamSupport->spliterator->stream
Collections.UnmodifiableMap.UnmodifiableEntrySet#parallelStream()::: unmodifiable entry set parallel stream:::return->StreamSupport->spliterator->stream
Collections.UnmodifiableMap.UnmodifiableEntrySet#iterator()::: unmodifiable entry set iterator:::return->new->Iterator<Map.Entry<K,V>>
Collections.UnmodifiableMap.UnmodifiableEntrySet#toArray()::: unmodifiable entry set to array:::a->c->toArray->for->i->return
Collections.UnmodifiableMap.UnmodifiableEntrySet#toArray(T[])::: unmodifiable entry set to array:::arr->c->Arrays->copyOf->toArray->for->i->if->return->System->arraycopy->if->return
Collections.UnmodifiableMap.UnmodifiableEntrySet#contains(Object):::This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equality-candidate is Map.Entry and calls its setValue method.:::if->return->return->c->new->UnmodifiableEntry<>->contains
Collections.UnmodifiableMap.UnmodifiableEntrySet#containsAll(Collection):::The next two methods are overridden to protect against an unscrupulous List whose contains(Object o) method senses when o is a Map.Entry, and calls o.setValue.:::foreach->if->contains->return->return
Collections.UnmodifiableMap.UnmodifiableEntrySet#equals(Object)::: unmodifiable entry set equals:::if->return->if->return->s->if->s->size->c->size->return->return->containsAll
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry#getKey()::: unmodifiable entry get key:::return->e->getKey
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry#getValue()::: unmodifiable entry get value:::return->e->getValue
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry#setValue(V)::: unmodifiable entry set value:::throw->new->UnsupportedOperationException
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry#hashCode()::: unmodifiable entry hash code:::return->e->hashCode
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry#equals(Object)::: unmodifiable entry equals:::if->return->if->return->t->return->e->getKey->t->getKey->eq->e->getValue->t->getValue->eq
Collections.UnmodifiableMap.UnmodifiableEntrySet.UnmodifiableEntry#toString()::: unmodifiable entry to string:::return->e->toString
Collections#unmodifiableSortedMap(SortedMap):::Returns an unmodifiable view of the specified sorted map:::return->new->UnmodifiableSortedMap<>
Collections.UnmodifiableSortedMap#comparator()::: unmodifiable sorted map comparator:::return->sm->comparator
Collections.UnmodifiableSortedMap#subMap(K, K)::: unmodifiable sorted map sub map:::return->sm->subMap->new->UnmodifiableSortedMap<>
Collections.UnmodifiableSortedMap#headMap(K)::: unmodifiable sorted map head map:::return->sm->headMap->new->UnmodifiableSortedMap<>
Collections.UnmodifiableSortedMap#tailMap(K)::: unmodifiable sorted map tail map:::return->sm->tailMap->new->UnmodifiableSortedMap<>
Collections.UnmodifiableSortedMap#firstKey()::: unmodifiable sorted map first key:::return->sm->firstKey
Collections.UnmodifiableSortedMap#lastKey()::: unmodifiable sorted map last key:::return->sm->lastKey
Collections#unmodifiableNavigableMap(NavigableMap):::Returns an unmodifiable view of the specified navigable map:::return->new->UnmodifiableNavigableMap<>
Collections.UnmodifiableNavigableMap.EmptyNavigableMap#navigableKeySet()::: empty navigable map navigable key set:::return->emptyNavigableSet
Collections.UnmodifiableNavigableMap.EmptyNavigableMap#readResolve()::: empty navigable map read resolve:::return
Collections.UnmodifiableNavigableMap#lowerKey(K)::: unmodifiable navigable map lower key:::return->nm->lowerKey
Collections.UnmodifiableNavigableMap#floorKey(K)::: unmodifiable navigable map floor key:::return->nm->floorKey
Collections.UnmodifiableNavigableMap#ceilingKey(K)::: unmodifiable navigable map ceiling key:::return->nm->ceilingKey
Collections.UnmodifiableNavigableMap#higherKey(K)::: unmodifiable navigable map higher key:::return->nm->higherKey
Collections.UnmodifiableNavigableMap#lowerEntry(K)::: unmodifiable navigable map lower entry:::lower->nm->lowerEntry->return->new->UnmodifiableEntrySet.UnmodifiableEntry<>
Collections.UnmodifiableNavigableMap#floorEntry(K)::: unmodifiable navigable map floor entry:::floor->nm->floorEntry->return->new->UnmodifiableEntrySet.UnmodifiableEntry<>
Collections.UnmodifiableNavigableMap#ceilingEntry(K)::: unmodifiable navigable map ceiling entry:::ceiling->nm->ceilingEntry->return->new->UnmodifiableEntrySet.UnmodifiableEntry<>
Collections.UnmodifiableNavigableMap#higherEntry(K)::: unmodifiable navigable map higher entry:::higher->nm->higherEntry->return->new->UnmodifiableEntrySet.UnmodifiableEntry<>
Collections.UnmodifiableNavigableMap#firstEntry()::: unmodifiable navigable map first entry:::first->nm->firstEntry->return->new->UnmodifiableEntrySet.UnmodifiableEntry<>
Collections.UnmodifiableNavigableMap#lastEntry()::: unmodifiable navigable map last entry:::last->nm->lastEntry->return->new->UnmodifiableEntrySet.UnmodifiableEntry<>
Collections.UnmodifiableNavigableMap#pollFirstEntry()::: unmodifiable navigable map poll first entry:::throw->new->UnsupportedOperationException
Collections.UnmodifiableNavigableMap#pollLastEntry()::: unmodifiable navigable map poll last entry:::throw->new->UnsupportedOperationException
Collections.UnmodifiableNavigableMap#descendingMap()::: unmodifiable navigable map descending map:::return->nm->descendingMap->unmodifiableNavigableMap
Collections.UnmodifiableNavigableMap#navigableKeySet()::: unmodifiable navigable map navigable key set:::return->nm->navigableKeySet->unmodifiableNavigableSet
Collections.UnmodifiableNavigableMap#descendingKeySet()::: unmodifiable navigable map descending key set:::return->nm->descendingKeySet->unmodifiableNavigableSet
Collections.UnmodifiableNavigableMap#subMap(K, boolean, K, boolean)::: unmodifiable navigable map sub map:::return->nm->subMap->unmodifiableNavigableMap
Collections.UnmodifiableNavigableMap#headMap(K, boolean)::: unmodifiable navigable map head map:::return->nm->headMap->unmodifiableNavigableMap
Collections.UnmodifiableNavigableMap#tailMap(K, boolean)::: unmodifiable navigable map tail map:::return->nm->tailMap->unmodifiableNavigableMap
Collections#synchronizedCollection(Collection):::Returns a synchronized (thread-safe) collection backed by the specified collection:::return->new->SynchronizedCollection<>
Collections#synchronizedCollection(Collection, Object)::: collections synchronized collection:::return->new->SynchronizedCollection<>
Collections.SynchronizedCollection#size()::: synchronized collection size:::synchronized->return->c->size
Collections.SynchronizedCollection#isEmpty()::: synchronized collection is empty:::synchronized->return->c->isEmpty
Collections.SynchronizedCollection#contains(Object)::: synchronized collection contains:::synchronized->return->c->contains
Collections.SynchronizedCollection#toArray()::: synchronized collection to array:::synchronized->return->c->toArray
Collections.SynchronizedCollection#toArray(T[])::: synchronized collection to array:::synchronized->return->c->toArray
Collections.SynchronizedCollection#toArray(IntFunction)::: synchronized collection to array:::synchronized->return->c->toArray
Collections.SynchronizedCollection#iterator()::: synchronized collection iterator:::return->c->iterator
Collections.SynchronizedCollection#add(E)::: synchronized collection add:::synchronized->return->c->add
Collections.SynchronizedCollection#remove(Object)::: synchronized collection remove:::synchronized->return->c->remove
Collections.SynchronizedCollection#containsAll(Collection)::: synchronized collection contains all:::synchronized->return->c->containsAll
Collections.SynchronizedCollection#addAll(Collection)::: synchronized collection add all:::synchronized->return->c->addAll
Collections.SynchronizedCollection#removeAll(Collection)::: synchronized collection remove all:::synchronized->return->c->removeAll
Collections.SynchronizedCollection#retainAll(Collection)::: synchronized collection retain all:::synchronized->return->c->retainAll
Collections.SynchronizedCollection#clear()::: synchronized collection clear:::synchronized->c->clear
Collections.SynchronizedCollection#toString()::: synchronized collection to string:::synchronized->return->c->toString
Collections.SynchronizedCollection#forEach(Consumer)::: synchronized collection for each:::synchronized->c->forEach
Collections.SynchronizedCollection#removeIf(Predicate)::: synchronized collection remove if:::synchronized->return->c->removeIf
Collections.SynchronizedCollection#spliterator()::: synchronized collection spliterator:::return->c->spliterator
Collections.SynchronizedCollection#stream()::: synchronized collection stream:::return->c->stream
Collections.SynchronizedCollection#parallelStream()::: synchronized collection parallel stream:::return->c->parallelStream
Collections.SynchronizedCollection#writeObject(ObjectOutputStream)::: synchronized collection write object:::synchronized->s->defaultWriteObject
Collections#synchronizedSet(Set):::Returns a synchronized (thread-safe) set backed by the specified set:::return->new->SynchronizedSet<>
Collections#synchronizedSet(Set, Object)::: collections synchronized set:::return->new->SynchronizedSet<>
Collections.SynchronizedSet#equals(Object)::: synchronized set equals:::if->return->synchronized->return->c->equals
Collections.SynchronizedSet#hashCode()::: synchronized set hash code:::synchronized->return->c->hashCode
Collections#synchronizedSortedSet(SortedSet):::Returns a synchronized (thread-safe) sorted set backed by the specified sorted set:::return->new->SynchronizedSortedSet<>
Collections.SynchronizedSortedSet#comparator()::: synchronized sorted set comparator:::synchronized->return->ss->comparator
Collections.SynchronizedSortedSet#subSet(E, E)::: synchronized sorted set sub set:::synchronized->return->ss->subSet->new->SynchronizedSortedSet<>
Collections.SynchronizedSortedSet#headSet(E)::: synchronized sorted set head set:::synchronized->return->ss->headSet->new->SynchronizedSortedSet<>
Collections.SynchronizedSortedSet#tailSet(E)::: synchronized sorted set tail set:::synchronized->return->ss->tailSet->new->SynchronizedSortedSet<>
Collections.SynchronizedSortedSet#first()::: synchronized sorted set first:::synchronized->return->ss->first
Collections.SynchronizedSortedSet#last()::: synchronized sorted set last:::synchronized->return->ss->last
Collections#synchronizedNavigableSet(NavigableSet):::Returns a synchronized (thread-safe) navigable set backed by the specified navigable set:::return->new->SynchronizedNavigableSet<>
Collections.SynchronizedNavigableSet#lower(E)::: synchronized navigable set lower:::synchronized->return->ns->lower
Collections.SynchronizedNavigableSet#floor(E)::: synchronized navigable set floor:::synchronized->return->ns->floor
Collections.SynchronizedNavigableSet#ceiling(E)::: synchronized navigable set ceiling:::synchronized->return->ns->ceiling
Collections.SynchronizedNavigableSet#higher(E)::: synchronized navigable set higher:::synchronized->return->ns->higher
Collections.SynchronizedNavigableSet#pollFirst()::: synchronized navigable set poll first:::synchronized->return->ns->pollFirst
Collections.SynchronizedNavigableSet#pollLast()::: synchronized navigable set poll last:::synchronized->return->ns->pollLast
Collections.SynchronizedNavigableSet#descendingSet()::: synchronized navigable set descending set:::synchronized->return->ns->descendingSet->new->SynchronizedNavigableSet<>
Collections.SynchronizedNavigableSet#descendingIterator()::: synchronized navigable set descending iterator:::synchronized->return->descendingSet->iterator
Collections.SynchronizedNavigableSet#subSet(E, E)::: synchronized navigable set sub set:::synchronized->return->ns->subSet->new->SynchronizedNavigableSet<>
Collections.SynchronizedNavigableSet#headSet(E)::: synchronized navigable set head set:::synchronized->return->ns->headSet->new->SynchronizedNavigableSet<>
Collections.SynchronizedNavigableSet#tailSet(E)::: synchronized navigable set tail set:::synchronized->return->ns->tailSet->new->SynchronizedNavigableSet<>
Collections.SynchronizedNavigableSet#subSet(E, boolean, E, boolean)::: synchronized navigable set sub set:::synchronized->return->ns->subSet->new->SynchronizedNavigableSet<>
Collections.SynchronizedNavigableSet#headSet(E, boolean)::: synchronized navigable set head set:::synchronized->return->ns->headSet->new->SynchronizedNavigableSet<>
Collections.SynchronizedNavigableSet#tailSet(E, boolean)::: synchronized navigable set tail set:::synchronized->return->ns->tailSet->new->SynchronizedNavigableSet<>
Collections#synchronizedList(List):::Returns a synchronized (thread-safe) list backed by the specified list:::return->new->SynchronizedRandomAccessList<>->new->SynchronizedList<>
Collections#synchronizedList(List, Object)::: collections synchronized list:::return->new->SynchronizedRandomAccessList<>->new->SynchronizedList<>
Collections.SynchronizedList#equals(Object)::: synchronized list equals:::if->return->synchronized->return->list->equals
Collections.SynchronizedList#hashCode()::: synchronized list hash code:::synchronized->return->list->hashCode
Collections.SynchronizedList#get(int)::: synchronized list get:::synchronized->return->list->get
Collections.SynchronizedList#set(int, E)::: synchronized list set:::synchronized->return->list->set
Collections.SynchronizedList#add(int, E)::: synchronized list add:::synchronized->list->add
Collections.SynchronizedList#remove(int)::: synchronized list remove:::synchronized->return->list->remove
Collections.SynchronizedList#indexOf(Object)::: synchronized list index of:::synchronized->return->list->indexOf
Collections.SynchronizedList#lastIndexOf(Object)::: synchronized list last index of:::synchronized->return->list->lastIndexOf
Collections.SynchronizedList#addAll(int, Collection)::: synchronized list add all:::synchronized->return->list->addAll
Collections.SynchronizedList#listIterator()::: synchronized list list iterator:::return->list->listIterator
Collections.SynchronizedList#listIterator(int)::: synchronized list list iterator:::return->list->listIterator
Collections.SynchronizedList#subList(int, int)::: synchronized list sub list:::synchronized->return->list->subList->new->SynchronizedList<>
Collections.SynchronizedList#replaceAll(UnaryOperator)::: synchronized list replace all:::synchronized->list->replaceAll
Collections.SynchronizedList#sort(Comparator)::: synchronized list sort:::synchronized->list->sort
Collections.SynchronizedList#readResolve():::SynchronizedRandomAccessList instances are serialized as SynchronizedList instances to allow them to be deserialized in pre-1.4 JREs (which do not have SynchronizedRandomAccessList):::return->new->SynchronizedRandomAccessList<>
Collections.SynchronizedRandomAccessList#subList(int, int)::: synchronized random access list sub list:::synchronized->return->list->subList->new->SynchronizedRandomAccessList<>
Collections.SynchronizedRandomAccessList#writeReplace():::Allows instances to be deserialized in pre-1.4 JREs (which do not have SynchronizedRandomAccessList):::return->new->SynchronizedList<>
Collections#synchronizedMap(Map):::Returns a synchronized (thread-safe) map backed by the specified map:::return->new->SynchronizedMap<>
Collections.SynchronizedMap#size()::: synchronized map size:::synchronized->return->m->size
Collections.SynchronizedMap#isEmpty()::: synchronized map is empty:::synchronized->return->m->isEmpty
Collections.SynchronizedMap#containsKey(Object)::: synchronized map contains key:::synchronized->return->m->containsKey
Collections.SynchronizedMap#containsValue(Object)::: synchronized map contains value:::synchronized->return->m->containsValue
Collections.SynchronizedMap#get(Object)::: synchronized map get:::synchronized->return->m->get
Collections.SynchronizedMap#put(K, V)::: synchronized map put:::synchronized->return->m->put
Collections.SynchronizedMap#remove(Object)::: synchronized map remove:::synchronized->return->m->remove
Collections.SynchronizedMap#putAll(Map)::: synchronized map put all:::synchronized->m->putAll
Collections.SynchronizedMap#clear()::: synchronized map clear:::synchronized->m->clear
Collections.SynchronizedMap#keySet()::: synchronized map key set:::synchronized->if->m->keySet->new->SynchronizedSet<>->return
Collections.SynchronizedMap#entrySet()::: synchronized map entry set:::synchronized->if->m->entrySet->new->SynchronizedSet<>->return
Collections.SynchronizedMap#values()::: synchronized map values:::synchronized->if->m->values->new->SynchronizedCollection<>->return
Collections.SynchronizedMap#equals(Object)::: synchronized map equals:::if->return->synchronized->return->m->equals
Collections.SynchronizedMap#hashCode()::: synchronized map hash code:::synchronized->return->m->hashCode
Collections.SynchronizedMap#toString()::: synchronized map to string:::synchronized->return->m->toString
Collections.SynchronizedMap#getOrDefault(Object, V)::: synchronized map get or default:::synchronized->return->m->getOrDefault
Collections.SynchronizedMap#forEach(BiConsumer)::: synchronized map for each:::synchronized->m->forEach
Collections.SynchronizedMap#replaceAll(BiFunction)::: synchronized map replace all:::synchronized->m->replaceAll
Collections.SynchronizedMap#putIfAbsent(K, V)::: synchronized map put if absent:::synchronized->return->m->putIfAbsent
Collections.SynchronizedMap#remove(Object, Object)::: synchronized map remove:::synchronized->return->m->remove
Collections.SynchronizedMap#replace(K, V, V)::: synchronized map replace:::synchronized->return->m->replace
Collections.SynchronizedMap#replace(K, V)::: synchronized map replace:::synchronized->return->m->replace
Collections.SynchronizedMap#computeIfAbsent(K, Function)::: synchronized map compute if absent:::synchronized->return->m->computeIfAbsent
Collections.SynchronizedMap#computeIfPresent(K, BiFunction)::: synchronized map compute if present:::synchronized->return->m->computeIfPresent
Collections.SynchronizedMap#compute(K, BiFunction)::: synchronized map compute:::synchronized->return->m->compute
Collections.SynchronizedMap#merge(K, V, BiFunction)::: synchronized map merge:::synchronized->return->m->merge
Collections.SynchronizedMap#writeObject(ObjectOutputStream)::: synchronized map write object:::synchronized->s->defaultWriteObject
Collections#synchronizedSortedMap(SortedMap):::Returns a synchronized (thread-safe) sorted map backed by the specified sorted map:::return->new->SynchronizedSortedMap<>
Collections.SynchronizedSortedMap#comparator()::: synchronized sorted map comparator:::synchronized->return->sm->comparator
Collections.SynchronizedSortedMap#subMap(K, K)::: synchronized sorted map sub map:::synchronized->return->sm->subMap->new->SynchronizedSortedMap<>
Collections.SynchronizedSortedMap#headMap(K)::: synchronized sorted map head map:::synchronized->return->sm->headMap->new->SynchronizedSortedMap<>
Collections.SynchronizedSortedMap#tailMap(K)::: synchronized sorted map tail map:::synchronized->return->sm->tailMap->new->SynchronizedSortedMap<>
Collections.SynchronizedSortedMap#firstKey()::: synchronized sorted map first key:::synchronized->return->sm->firstKey
Collections.SynchronizedSortedMap#lastKey()::: synchronized sorted map last key:::synchronized->return->sm->lastKey
Collections#synchronizedNavigableMap(NavigableMap):::Returns a synchronized (thread-safe) navigable map backed by the specified navigable map:::return->new->SynchronizedNavigableMap<>
Collections.SynchronizedNavigableMap#lowerEntry(K)::: synchronized navigable map lower entry:::synchronized->return->nm->lowerEntry
Collections.SynchronizedNavigableMap#lowerKey(K)::: synchronized navigable map lower key:::synchronized->return->nm->lowerKey
Collections.SynchronizedNavigableMap#floorEntry(K)::: synchronized navigable map floor entry:::synchronized->return->nm->floorEntry
Collections.SynchronizedNavigableMap#floorKey(K)::: synchronized navigable map floor key:::synchronized->return->nm->floorKey
Collections.SynchronizedNavigableMap#ceilingEntry(K)::: synchronized navigable map ceiling entry:::synchronized->return->nm->ceilingEntry
Collections.SynchronizedNavigableMap#ceilingKey(K)::: synchronized navigable map ceiling key:::synchronized->return->nm->ceilingKey
Collections.SynchronizedNavigableMap#higherEntry(K)::: synchronized navigable map higher entry:::synchronized->return->nm->higherEntry
Collections.SynchronizedNavigableMap#higherKey(K)::: synchronized navigable map higher key:::synchronized->return->nm->higherKey
Collections.SynchronizedNavigableMap#firstEntry()::: synchronized navigable map first entry:::synchronized->return->nm->firstEntry
Collections.SynchronizedNavigableMap#lastEntry()::: synchronized navigable map last entry:::synchronized->return->nm->lastEntry
Collections.SynchronizedNavigableMap#pollFirstEntry()::: synchronized navigable map poll first entry:::synchronized->return->nm->pollFirstEntry
Collections.SynchronizedNavigableMap#pollLastEntry()::: synchronized navigable map poll last entry:::synchronized->return->nm->pollLastEntry
Collections.SynchronizedNavigableMap#descendingMap()::: synchronized navigable map descending map:::synchronized->return->nm->descendingMap->new->SynchronizedNavigableMap<>
Collections.SynchronizedNavigableMap#keySet()::: synchronized navigable map key set:::return->navigableKeySet
Collections.SynchronizedNavigableMap#navigableKeySet()::: synchronized navigable map navigable key set:::synchronized->return->nm->navigableKeySet->new->SynchronizedNavigableSet<>
Collections.SynchronizedNavigableMap#descendingKeySet()::: synchronized navigable map descending key set:::synchronized->return->nm->descendingKeySet->new->SynchronizedNavigableSet<>
Collections.SynchronizedNavigableMap#subMap(K, K)::: synchronized navigable map sub map:::synchronized->return->nm->subMap->new->SynchronizedNavigableMap<>
Collections.SynchronizedNavigableMap#headMap(K)::: synchronized navigable map head map:::synchronized->return->nm->headMap->new->SynchronizedNavigableMap<>
Collections.SynchronizedNavigableMap#tailMap(K)::: synchronized navigable map tail map:::synchronized->return->nm->tailMap->new->SynchronizedNavigableMap<>
Collections.SynchronizedNavigableMap#subMap(K, boolean, K, boolean)::: synchronized navigable map sub map:::synchronized->return->nm->subMap->new->SynchronizedNavigableMap<>
Collections.SynchronizedNavigableMap#headMap(K, boolean)::: synchronized navigable map head map:::synchronized->return->nm->headMap->new->SynchronizedNavigableMap<>
Collections.SynchronizedNavigableMap#tailMap(K, boolean)::: synchronized navigable map tail map:::synchronized->return->nm->tailMap->new->SynchronizedNavigableMap<>
Collections#checkedCollection(Collection, Class):::Returns a dynamically typesafe view of the specified collection:::return->new->CheckedCollection<>
Collections#zeroLengthArray(Class)::: collections zero length array:::return->Array->newInstance
Collections.CheckedCollection#typeCheck(Object)::: checked collection type check:::if->type->isInstance->throw->badElementMsg->new->ClassCastException->return
Collections.CheckedCollection#badElementMsg(Object)::: checked collection bad element msg:::return->o->getClass
Collections.CheckedCollection#size()::: checked collection size:::return->c->size
Collections.CheckedCollection#isEmpty()::: checked collection is empty:::return->c->isEmpty
Collections.CheckedCollection#contains(Object)::: checked collection contains:::return->c->contains
Collections.CheckedCollection#toArray()::: checked collection to array:::return->c->toArray
Collections.CheckedCollection#toArray(T[])::: checked collection to array:::return->c->toArray
Collections.CheckedCollection#toArray(IntFunction)::: checked collection to array:::return->c->toArray
Collections.CheckedCollection#toString()::: checked collection to string:::return->c->toString
Collections.CheckedCollection#remove(Object)::: checked collection remove:::return->c->remove
Collections.CheckedCollection#clear()::: checked collection clear:::c->clear
Collections.CheckedCollection#containsAll(Collection)::: checked collection contains all:::return->c->containsAll
Collections.CheckedCollection#removeAll(Collection)::: checked collection remove all:::return->c->removeAll
Collections.CheckedCollection#retainAll(Collection)::: checked collection retain all:::return->c->retainAll
Collections.CheckedCollection#iterator()::: checked collection iterator:::it->c->iterator->return->new->Iterator<E>
Collections.CheckedCollection#add(E)::: checked collection add:::return->c->typeCheck->add
Collections.CheckedCollection#zeroLengthElementArray()::: checked collection zero length element array:::return->zeroLengthArray
Collections.CheckedCollection#checkedCopyOf(Collection)::: checked collection checked copy of:::a->try->z->zeroLengthElementArray->coll->toArray->if->a->getClass->z->getClass->Arrays->z->getClass->copyOf->catch->coll->toArray->clone->foreach->typeCheck->finally->return->Arrays->asList
Collections.CheckedCollection#addAll(Collection)::: checked collection add all:::return->c->checkedCopyOf->addAll
Collections.CheckedCollection#forEach(Consumer)::: checked collection for each:::c->forEach
Collections.CheckedCollection#removeIf(Predicate)::: checked collection remove if:::return->c->removeIf
Collections.CheckedCollection#spliterator()::: checked collection spliterator:::return->c->spliterator
Collections.CheckedCollection#stream()::: checked collection stream:::return->c->stream
Collections.CheckedCollection#parallelStream()::: checked collection parallel stream:::return->c->parallelStream
Collections#checkedQueue(Queue, Class):::Returns a dynamically typesafe view of the specified queue:::return->new->CheckedQueue<>
Collections.CheckedQueue#element()::: checked queue element:::return->queue->element
Collections.CheckedQueue#equals(Object)::: checked queue equals:::return->c->equals
Collections.CheckedQueue#hashCode()::: checked queue hash code:::return->c->hashCode
Collections.CheckedQueue#peek()::: checked queue peek:::return->queue->peek
Collections.CheckedQueue#poll()::: checked queue poll:::return->queue->poll
Collections.CheckedQueue#remove()::: checked queue remove:::return->queue->remove
Collections.CheckedQueue#offer(E)::: checked queue offer:::return->queue->typeCheck->offer
Collections#checkedSet(Set, Class):::Returns a dynamically typesafe view of the specified set:::return->new->CheckedSet<>
Collections.CheckedSet#equals(Object)::: checked set equals:::return->c->equals
Collections.CheckedSet#hashCode()::: checked set hash code:::return->c->hashCode
Collections#checkedSortedSet(SortedSet, Class):::Returns a dynamically typesafe view of the specified sorted set:::return->new->CheckedSortedSet<>
Collections.CheckedSortedSet#comparator()::: checked sorted set comparator:::return->ss->comparator
Collections.CheckedSortedSet#first()::: checked sorted set first:::return->ss->first
Collections.CheckedSortedSet#last()::: checked sorted set last:::return->ss->last
Collections.CheckedSortedSet#subSet(E, E)::: checked sorted set sub set:::return->ss->subSet->checkedSortedSet
Collections.CheckedSortedSet#headSet(E)::: checked sorted set head set:::return->ss->headSet->checkedSortedSet
Collections.CheckedSortedSet#tailSet(E)::: checked sorted set tail set:::return->ss->tailSet->checkedSortedSet
Collections#checkedNavigableSet(NavigableSet, Class):::Returns a dynamically typesafe view of the specified navigable set:::return->new->CheckedNavigableSet<>
Collections.CheckedNavigableSet#lower(E)::: checked navigable set lower:::return->ns->lower
Collections.CheckedNavigableSet#floor(E)::: checked navigable set floor:::return->ns->floor
Collections.CheckedNavigableSet#ceiling(E)::: checked navigable set ceiling:::return->ns->ceiling
Collections.CheckedNavigableSet#higher(E)::: checked navigable set higher:::return->ns->higher
Collections.CheckedNavigableSet#pollFirst()::: checked navigable set poll first:::return->ns->pollFirst
Collections.CheckedNavigableSet#pollLast()::: checked navigable set poll last:::return->ns->pollLast
Collections.CheckedNavigableSet#descendingSet()::: checked navigable set descending set:::return->ns->descendingSet->checkedNavigableSet
Collections.CheckedNavigableSet#descendingIterator()::: checked navigable set descending iterator:::return->ns->descendingSet->checkedNavigableSet->iterator
Collections.CheckedNavigableSet#subSet(E, E)::: checked navigable set sub set:::return->ns->subSet->checkedNavigableSet
Collections.CheckedNavigableSet#headSet(E)::: checked navigable set head set:::return->ns->headSet->checkedNavigableSet
Collections.CheckedNavigableSet#tailSet(E)::: checked navigable set tail set:::return->ns->tailSet->checkedNavigableSet
Collections.CheckedNavigableSet#subSet(E, boolean, E, boolean)::: checked navigable set sub set:::return->ns->subSet->checkedNavigableSet
Collections.CheckedNavigableSet#headSet(E, boolean)::: checked navigable set head set:::return->ns->headSet->checkedNavigableSet
Collections.CheckedNavigableSet#tailSet(E, boolean)::: checked navigable set tail set:::return->ns->tailSet->checkedNavigableSet
Collections#checkedList(List, Class):::Returns a dynamically typesafe view of the specified list:::return->new->CheckedRandomAccessList<>->new->CheckedList<>
Collections.CheckedList#equals(Object)::: checked list equals:::return->list->equals
Collections.CheckedList#hashCode()::: checked list hash code:::return->list->hashCode
Collections.CheckedList#get(int)::: checked list get:::return->list->get
Collections.CheckedList#remove(int)::: checked list remove:::return->list->remove
Collections.CheckedList#indexOf(Object)::: checked list index of:::return->list->indexOf
Collections.CheckedList#lastIndexOf(Object)::: checked list last index of:::return->list->lastIndexOf
Collections.CheckedList#set(int, E)::: checked list set:::return->list->typeCheck->set
Collections.CheckedList#add(int, E)::: checked list add:::list->typeCheck->add
Collections.CheckedList#addAll(int, Collection)::: checked list add all:::return->list->checkedCopyOf->addAll
Collections.CheckedList#listIterator()::: checked list list iterator:::return->listIterator
Collections.CheckedList#listIterator(int)::: checked list list iterator:::i->list->listIterator->return->new->ListIterator<E>
Collections.CheckedList#subList(int, int)::: checked list sub list:::return->list->subList->new->CheckedList<>
Collections.CheckedList#replaceAll(UnaryOperator)::: checked list replace all:::Objects->requireNonNull->list->operator->apply->typeCheck->replaceAll
Collections.CheckedList#sort(Comparator)::: checked list sort:::list->sort
Collections.CheckedRandomAccessList#subList(int, int)::: checked random access list sub list:::return->list->subList->new->CheckedRandomAccessList<>
Collections#checkedMap(Map, Class, Class):::Returns a dynamically typesafe view of the specified map:::return->new->CheckedMap<>
Collections.CheckedMap#typeCheck(Object, Object)::: checked map type check:::if->keyType->isInstance->throw->badKeyMsg->new->ClassCastException->if->valueType->isInstance->throw->badValueMsg->new->ClassCastException
Collections.CheckedMap#typeCheck(BiFunction)::: checked map type check:::Objects->requireNonNull->return->newValue->func->apply->typeCheck->return
Collections.CheckedMap#badKeyMsg(Object)::: checked map bad key msg:::return->key->getClass
Collections.CheckedMap#badValueMsg(Object)::: checked map bad value msg:::return->value->getClass
Collections.CheckedMap#size()::: checked map size:::return->m->size
Collections.CheckedMap#isEmpty()::: checked map is empty:::return->m->isEmpty
Collections.CheckedMap#containsKey(Object)::: checked map contains key:::return->m->containsKey
Collections.CheckedMap#containsValue(Object)::: checked map contains value:::return->m->containsValue
Collections.CheckedMap#get(Object)::: checked map get:::return->m->get
Collections.CheckedMap#remove(Object)::: checked map remove:::return->m->remove
Collections.CheckedMap#clear()::: checked map clear:::m->clear
Collections.CheckedMap#keySet()::: checked map key set:::return->m->keySet
Collections.CheckedMap#values()::: checked map values:::return->m->values
Collections.CheckedMap#equals(Object)::: checked map equals:::return->m->equals
Collections.CheckedMap#hashCode()::: checked map hash code:::return->m->hashCode
Collections.CheckedMap#toString()::: checked map to string:::return->m->toString
Collections.CheckedMap#put(K, V)::: checked map put:::typeCheck->return->m->put
Collections.CheckedMap#putAll(Map)::: checked map put all:::entries->t->entrySet->toArray->checked->new->ArrayList<>->foreach->e->k->e->getKey->v->e->getValue->typeCheck->checked->new->AbstractMap.SimpleImmutableEntry<>->add->foreach->m->e->getKey->e->getValue->put
Collections.CheckedMap#entrySet()::: checked map entry set:::if->m->entrySet->new->CheckedEntrySet<>->return
Collections.CheckedMap#forEach(BiConsumer)::: checked map for each:::m->forEach
Collections.CheckedMap#replaceAll(BiFunction)::: checked map replace all:::m->typeCheck->replaceAll
Collections.CheckedMap#putIfAbsent(K, V)::: checked map put if absent:::typeCheck->return->m->putIfAbsent
Collections.CheckedMap#remove(Object, Object)::: checked map remove:::return->m->remove
Collections.CheckedMap#replace(K, V, V)::: checked map replace:::typeCheck->return->m->replace
Collections.CheckedMap#replace(K, V)::: checked map replace:::typeCheck->return->m->replace
Collections.CheckedMap#computeIfAbsent(K, Function)::: checked map compute if absent:::Objects->requireNonNull->return->m->value->mappingFunction->apply->typeCheck->return->computeIfAbsent
Collections.CheckedMap#computeIfPresent(K, BiFunction)::: checked map compute if present:::return->m->typeCheck->computeIfPresent
Collections.CheckedMap#compute(K, BiFunction)::: checked map compute:::return->m->typeCheck->compute
Collections.CheckedMap#merge(K, V, BiFunction)::: checked map merge:::Objects->requireNonNull->return->m->newValue->remappingFunction->apply->typeCheck->return->merge
Collections.CheckedMap.CheckedEntrySet#size()::: checked entry set size:::return->s->size
Collections.CheckedMap.CheckedEntrySet#isEmpty()::: checked entry set is empty:::return->s->isEmpty
Collections.CheckedMap.CheckedEntrySet#toString()::: checked entry set to string:::return->s->toString
Collections.CheckedMap.CheckedEntrySet#hashCode()::: checked entry set hash code:::return->s->hashCode
Collections.CheckedMap.CheckedEntrySet#clear()::: checked entry set clear:::s->clear
Collections.CheckedMap.CheckedEntrySet#add(Map.Entry)::: checked entry set add:::throw->new->UnsupportedOperationException
Collections.CheckedMap.CheckedEntrySet#addAll(Collection>)::: checked entry set add all:::throw->new->UnsupportedOperationException
Collections.CheckedMap.CheckedEntrySet#iterator()::: checked entry set iterator:::i->s->iterator->return->new->Iterator<Map.Entry<K,V>>
Collections.CheckedMap.CheckedEntrySet#toArray()::: checked entry set to array:::source->s->toArray->dest->source->getClass->new->ObjectArr->for->i->return
Collections.CheckedMap.CheckedEntrySet#toArray(T[])::: checked entry set to array:::arr->s->Arrays->copyOf->toArray->for->i->if->return->System->arraycopy->if->return
Collections.CheckedMap.CheckedEntrySet#contains(Object):::This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equality-candidate is Map.Entry and calls its setValue method.:::if->return->e->return->s->checkedEntry->contains
Collections.CheckedMap.CheckedEntrySet#containsAll(Collection):::The bulk collection methods are overridden to protect against an unscrupulous collection whose contains(Object o) method senses when o is a Map.Entry, and calls o.setValue.:::foreach->if->contains->return->return
Collections.CheckedMap.CheckedEntrySet#remove(Object)::: checked entry set remove:::if->return->return->s->new->AbstractMap.SimpleImmutableEntry<>->remove
Collections.CheckedMap.CheckedEntrySet#removeAll(Collection)::: checked entry set remove all:::return->batchRemove
Collections.CheckedMap.CheckedEntrySet#retainAll(Collection)::: checked entry set retain all:::return->batchRemove
Collections.CheckedMap.CheckedEntrySet#batchRemove(Collection, boolean)::: checked entry set batch remove:::Objects->requireNonNull->modified->it->iterator->while->it->hasNext->if->c->it->next->contains->it->remove->return
Collections.CheckedMap.CheckedEntrySet#equals(Object)::: checked entry set equals:::if->return->if->return->that->return->that->size->s->size->containsAll
Collections.CheckedMap.CheckedEntrySet#checkedEntry(Map.Entry, Class)::: checked entry set checked entry:::return->new->CheckedEntry<>
Collections.CheckedMap.CheckedEntrySet.CheckedEntry#getKey()::: checked entry get key:::return->e->getKey
Collections.CheckedMap.CheckedEntrySet.CheckedEntry#getValue()::: checked entry get value:::return->e->getValue
Collections.CheckedMap.CheckedEntrySet.CheckedEntry#hashCode()::: checked entry hash code:::return->e->hashCode
Collections.CheckedMap.CheckedEntrySet.CheckedEntry#toString()::: checked entry to string:::return->e->toString
Collections.CheckedMap.CheckedEntrySet.CheckedEntry#setValue(V)::: checked entry set value:::if->valueType->isInstance->throw->badValueMsg->new->ClassCastException->return->e->setValue
Collections.CheckedMap.CheckedEntrySet.CheckedEntry#badValueMsg(Object)::: checked entry bad value msg:::return->value->getClass
Collections.CheckedMap.CheckedEntrySet.CheckedEntry#equals(Object)::: checked entry equals:::if->return->if->return->return->e->new->AbstractMap.SimpleImmutableEntry<>->equals
Collections#checkedSortedMap(SortedMap, Class, Class):::Returns a dynamically typesafe view of the specified sorted map:::return->new->CheckedSortedMap<>
Collections.CheckedSortedMap#comparator()::: checked sorted map comparator:::return->sm->comparator
Collections.CheckedSortedMap#firstKey()::: checked sorted map first key:::return->sm->firstKey
Collections.CheckedSortedMap#lastKey()::: checked sorted map last key:::return->sm->lastKey
Collections.CheckedSortedMap#subMap(K, K)::: checked sorted map sub map:::return->sm->subMap->checkedSortedMap
Collections.CheckedSortedMap#headMap(K)::: checked sorted map head map:::return->sm->headMap->checkedSortedMap
Collections.CheckedSortedMap#tailMap(K)::: checked sorted map tail map:::return->sm->tailMap->checkedSortedMap
Collections#checkedNavigableMap(NavigableMap, Class, Class):::Returns a dynamically typesafe view of the specified navigable map:::return->new->CheckedNavigableMap<>
Collections.CheckedNavigableMap#comparator()::: checked navigable map comparator:::return->nm->comparator
Collections.CheckedNavigableMap#firstKey()::: checked navigable map first key:::return->nm->firstKey
Collections.CheckedNavigableMap#lastKey()::: checked navigable map last key:::return->nm->lastKey
Collections.CheckedNavigableMap#lowerEntry(K)::: checked navigable map lower entry:::lower->nm->lowerEntry->return->new->CheckedMap.CheckedEntrySet.CheckedEntry<>
Collections.CheckedNavigableMap#lowerKey(K)::: checked navigable map lower key:::return->nm->lowerKey
Collections.CheckedNavigableMap#floorEntry(K)::: checked navigable map floor entry:::floor->nm->floorEntry->return->new->CheckedMap.CheckedEntrySet.CheckedEntry<>
Collections.CheckedNavigableMap#floorKey(K)::: checked navigable map floor key:::return->nm->floorKey
Collections.CheckedNavigableMap#ceilingEntry(K)::: checked navigable map ceiling entry:::ceiling->nm->ceilingEntry->return->new->CheckedMap.CheckedEntrySet.CheckedEntry<>
Collections.CheckedNavigableMap#ceilingKey(K)::: checked navigable map ceiling key:::return->nm->ceilingKey
Collections.CheckedNavigableMap#higherEntry(K)::: checked navigable map higher entry:::higher->nm->higherEntry->return->new->CheckedMap.CheckedEntrySet.CheckedEntry<>
Collections.CheckedNavigableMap#higherKey(K)::: checked navigable map higher key:::return->nm->higherKey
Collections.CheckedNavigableMap#firstEntry()::: checked navigable map first entry:::first->nm->firstEntry->return->new->CheckedMap.CheckedEntrySet.CheckedEntry<>
Collections.CheckedNavigableMap#lastEntry()::: checked navigable map last entry:::last->nm->lastEntry->return->new->CheckedMap.CheckedEntrySet.CheckedEntry<>
Collections.CheckedNavigableMap#pollFirstEntry()::: checked navigable map poll first entry:::entry->nm->pollFirstEntry->return->new->CheckedMap.CheckedEntrySet.CheckedEntry<>
Collections.CheckedNavigableMap#pollLastEntry()::: checked navigable map poll last entry:::entry->nm->pollLastEntry->return->new->CheckedMap.CheckedEntrySet.CheckedEntry<>
Collections.CheckedNavigableMap#descendingMap()::: checked navigable map descending map:::return->nm->descendingMap->checkedNavigableMap
Collections.CheckedNavigableMap#keySet()::: checked navigable map key set:::return->navigableKeySet
Collections.CheckedNavigableMap#navigableKeySet()::: checked navigable map navigable key set:::return->nm->navigableKeySet->checkedNavigableSet
Collections.CheckedNavigableMap#descendingKeySet()::: checked navigable map descending key set:::return->nm->descendingKeySet->checkedNavigableSet
Collections.CheckedNavigableMap#subMap(K, K)::: checked navigable map sub map:::return->nm->subMap->checkedNavigableMap
Collections.CheckedNavigableMap#headMap(K)::: checked navigable map head map:::return->nm->headMap->checkedNavigableMap
Collections.CheckedNavigableMap#tailMap(K)::: checked navigable map tail map:::return->nm->tailMap->checkedNavigableMap
Collections.CheckedNavigableMap#subMap(K, boolean, K, boolean)::: checked navigable map sub map:::return->nm->subMap->checkedNavigableMap
Collections.CheckedNavigableMap#headMap(K, boolean)::: checked navigable map head map:::return->nm->headMap->checkedNavigableMap
Collections.CheckedNavigableMap#tailMap(K, boolean)::: checked navigable map tail map:::return->nm->tailMap->checkedNavigableMap
Collections#emptyIterator():::Returns an iterator that has no elements:::return
Collections.EmptyIterator#hasNext()::: empty iterator has next:::return
Collections.EmptyIterator#next()::: empty iterator next:::throw->new->NoSuchElementException
Collections.EmptyIterator#remove()::: empty iterator remove:::throw->new->IllegalStateException
Collections.EmptyIterator#forEachRemaining(Consumer)::: empty iterator for each remaining:::Objects->requireNonNull
Collections#emptyListIterator():::Returns a list iterator that has no elements:::return
Collections.EmptyListIterator#hasPrevious()::: empty list iterator has previous:::return
Collections.EmptyListIterator#previous()::: empty list iterator previous:::throw->new->NoSuchElementException
Collections.EmptyListIterator#nextIndex()::: empty list iterator next index:::return
Collections.EmptyListIterator#previousIndex()::: empty list iterator previous index:::return
Collections.EmptyListIterator#set(E)::: empty list iterator set:::throw->new->IllegalStateException
Collections.EmptyListIterator#add(E)::: empty list iterator add:::throw->new->UnsupportedOperationException
Collections#emptyEnumeration():::Returns an enumeration that has no elements:::return
Collections.EmptyEnumeration#hasMoreElements()::: empty enumeration has more elements:::return
Collections.EmptyEnumeration#nextElement()::: empty enumeration next element:::throw->new->NoSuchElementException
Collections.EmptyEnumeration#asIterator()::: empty enumeration as iterator:::return->emptyIterator
Collections#emptySet():::Returns an empty set (immutable):::return
Collections.EmptySet#iterator()::: empty set iterator:::return->emptyIterator
Collections.EmptySet#size()::: empty set size:::return
Collections.EmptySet#isEmpty()::: empty set is empty:::return
Collections.EmptySet#clear()::: empty set clear:::
Collections.EmptySet#contains(Object)::: empty set contains:::return
Collections.EmptySet#containsAll(Collection)::: empty set contains all:::return->c->isEmpty
Collections.EmptySet#toArray()::: empty set to array:::return->new->ObjectArr
Collections.EmptySet#toArray(T[])::: empty set to array:::if->return
Collections.EmptySet#forEach(Consumer)::: empty set for each:::Objects->requireNonNull
Collections.EmptySet#removeIf(Predicate)::: empty set remove if:::Objects->requireNonNull->return
Collections.EmptySet#spliterator()::: empty set spliterator:::return->Spliterators->emptySpliterator
Collections.EmptySet#readResolve()::: empty set read resolve:::return
Collections.EmptySet#hashCode()::: empty set hash code:::return
Collections#emptySortedSet():::Returns an empty sorted set (immutable):::return
Collections#emptyNavigableSet():::Returns an empty navigable set (immutable):::return
Collections#emptyList():::Returns an empty list (immutable):::return
Collections.EmptyList#iterator()::: empty list iterator:::return->emptyIterator
Collections.EmptyList#listIterator()::: empty list list iterator:::return->emptyListIterator
Collections.EmptyList#size()::: empty list size:::return
Collections.EmptyList#isEmpty()::: empty list is empty:::return
Collections.EmptyList#clear()::: empty list clear:::
Collections.EmptyList#contains(Object)::: empty list contains:::return
Collections.EmptyList#containsAll(Collection)::: empty list contains all:::return->c->isEmpty
Collections.EmptyList#toArray()::: empty list to array:::return->new->ObjectArr
Collections.EmptyList#toArray(T[])::: empty list to array:::if->return
Collections.EmptyList#get(int)::: empty list get:::throw->new->IndexOutOfBoundsException
Collections.EmptyList#equals(Object)::: empty list equals:::return->isEmpty
Collections.EmptyList#hashCode()::: empty list hash code:::return
Collections.EmptyList#removeIf(Predicate)::: empty list remove if:::Objects->requireNonNull->return
Collections.EmptyList#replaceAll(UnaryOperator)::: empty list replace all:::Objects->requireNonNull
Collections.EmptyList#sort(Comparator)::: empty list sort:::
Collections.EmptyList#forEach(Consumer)::: empty list for each:::Objects->requireNonNull
Collections.EmptyList#spliterator()::: empty list spliterator:::return->Spliterators->emptySpliterator
Collections.EmptyList#readResolve()::: empty list read resolve:::return
Collections#emptyMap():::Returns an empty map (immutable):::return
Collections#emptySortedMap():::Returns an empty sorted map (immutable):::return
Collections#emptyNavigableMap():::Returns an empty navigable map (immutable):::return
Collections.EmptyMap#size()::: empty map size:::return
Collections.EmptyMap#isEmpty()::: empty map is empty:::return
Collections.EmptyMap#clear()::: empty map clear:::
Collections.EmptyMap#containsKey(Object)::: empty map contains key:::return
Collections.EmptyMap#containsValue(Object)::: empty map contains value:::return
Collections.EmptyMap#get(Object)::: empty map get:::return
Collections.EmptyMap#keySet()::: empty map key set:::return->emptySet
Collections.EmptyMap#values()::: empty map values:::return->emptySet
Collections.EmptyMap#entrySet()::: empty map entry set:::return->emptySet
Collections.EmptyMap#equals(Object)::: empty map equals:::return->isEmpty
Collections.EmptyMap#hashCode()::: empty map hash code:::return
Collections.EmptyMap#getOrDefault(Object, V)::: empty map get or default:::return
Collections.EmptyMap#forEach(BiConsumer)::: empty map for each:::Objects->requireNonNull
Collections.EmptyMap#replaceAll(BiFunction)::: empty map replace all:::Objects->requireNonNull
Collections.EmptyMap#putIfAbsent(K, V)::: empty map put if absent:::throw->new->UnsupportedOperationException
Collections.EmptyMap#remove(Object, Object)::: empty map remove:::throw->new->UnsupportedOperationException
Collections.EmptyMap#replace(K, V, V)::: empty map replace:::throw->new->UnsupportedOperationException
Collections.EmptyMap#replace(K, V)::: empty map replace:::throw->new->UnsupportedOperationException
Collections.EmptyMap#computeIfAbsent(K, Function)::: empty map compute if absent:::throw->new->UnsupportedOperationException
Collections.EmptyMap#computeIfPresent(K, BiFunction)::: empty map compute if present:::throw->new->UnsupportedOperationException
Collections.EmptyMap#compute(K, BiFunction)::: empty map compute:::throw->new->UnsupportedOperationException
Collections.EmptyMap#merge(K, V, BiFunction)::: empty map merge:::throw->new->UnsupportedOperationException
Collections.EmptyMap#readResolve()::: empty map read resolve:::return
Collections#singleton(T):::Returns an immutable set containing only the specified object:::return->new->SingletonSet<>
Collections#singletonIterator(E)::: collections singleton iterator:::return->new->Iterator<E>
Collections#singletonSpliterator(T):::Creates a Spliterator with only the specified element:::return->new->Spliterator<T>
Collections.SingletonSet#iterator()::: singleton set iterator:::return->singletonIterator
Collections.SingletonSet#size()::: singleton set size:::return
Collections.SingletonSet#contains(Object)::: singleton set contains:::return->eq
Collections.SingletonSet#forEach(Consumer)::: singleton set for each:::action->accept
Collections.SingletonSet#spliterator()::: singleton set spliterator:::return->singletonSpliterator
Collections.SingletonSet#removeIf(Predicate)::: singleton set remove if:::throw->new->UnsupportedOperationException
Collections.SingletonSet#hashCode()::: singleton set hash code:::return->Objects->hashCode
Collections#singletonList(T):::Returns an immutable list containing only the specified object:::return->new->SingletonList<>
Collections.SingletonList#iterator()::: singleton list iterator:::return->singletonIterator
Collections.SingletonList#size()::: singleton list size:::return
Collections.SingletonList#contains(Object)::: singleton list contains:::return->eq
Collections.SingletonList#get(int)::: singleton list get:::if->throw->new->IndexOutOfBoundsException->return
Collections.SingletonList#forEach(Consumer)::: singleton list for each:::action->accept
Collections.SingletonList#removeIf(Predicate)::: singleton list remove if:::throw->new->UnsupportedOperationException
Collections.SingletonList#replaceAll(UnaryOperator)::: singleton list replace all:::throw->new->UnsupportedOperationException
Collections.SingletonList#sort(Comparator)::: singleton list sort:::
Collections.SingletonList#spliterator()::: singleton list spliterator:::return->singletonSpliterator
Collections.SingletonList#hashCode()::: singleton list hash code:::return->Objects->hashCode
Collections#singletonMap(K, V):::Returns an immutable map, mapping only the specified key to the specified value:::return->new->SingletonMap<>
Collections.SingletonMap#size()::: singleton map size:::return
Collections.SingletonMap#isEmpty()::: singleton map is empty:::return
Collections.SingletonMap#containsKey(Object)::: singleton map contains key:::return->eq
Collections.SingletonMap#containsValue(Object)::: singleton map contains value:::return->eq
Collections.SingletonMap#get(Object)::: singleton map get:::return->eq
Collections.SingletonMap#keySet()::: singleton map key set:::if->singleton->return
Collections.SingletonMap#entrySet()::: singleton map entry set:::if->Collections->new->SimpleImmutableEntry<>->singleton->return
Collections.SingletonMap#values()::: singleton map values:::if->singleton->return
Collections.SingletonMap#getOrDefault(Object, V)::: singleton map get or default:::return->eq
Collections.SingletonMap#forEach(BiConsumer)::: singleton map for each:::action->accept
Collections.SingletonMap#replaceAll(BiFunction)::: singleton map replace all:::throw->new->UnsupportedOperationException
Collections.SingletonMap#putIfAbsent(K, V)::: singleton map put if absent:::throw->new->UnsupportedOperationException
Collections.SingletonMap#remove(Object, Object)::: singleton map remove:::throw->new->UnsupportedOperationException
Collections.SingletonMap#replace(K, V, V)::: singleton map replace:::throw->new->UnsupportedOperationException
Collections.SingletonMap#replace(K, V)::: singleton map replace:::throw->new->UnsupportedOperationException
Collections.SingletonMap#computeIfAbsent(K, Function)::: singleton map compute if absent:::throw->new->UnsupportedOperationException
Collections.SingletonMap#computeIfPresent(K, BiFunction)::: singleton map compute if present:::throw->new->UnsupportedOperationException
Collections.SingletonMap#compute(K, BiFunction)::: singleton map compute:::throw->new->UnsupportedOperationException
Collections.SingletonMap#merge(K, V, BiFunction)::: singleton map merge:::throw->new->UnsupportedOperationException
Collections.SingletonMap#hashCode()::: singleton map hash code:::return->Objects->hashCode->Objects->hashCode
Collections#nCopies(int, T):::Returns an immutable list consisting of n copies of the specified object:::if->throw->new->IllegalArgumentException->return->new->CopiesList<>
Collections.CopiesList#size()::: copies list size:::return
Collections.CopiesList#contains(Object)::: copies list contains:::return->eq
Collections.CopiesList#indexOf(Object)::: copies list index of:::return->contains
Collections.CopiesList#lastIndexOf(Object)::: copies list last index of:::return->contains
Collections.CopiesList#get(int)::: copies list get:::if->throw->new->IndexOutOfBoundsException->return
Collections.CopiesList#toArray()::: copies list to array:::a->new->ObjectArr->if->Arrays->fill->return
Collections.CopiesList#toArray(T[])::: copies list to array:::n->if->a->getClass->getComponentType->newInstance->if->Arrays->fill->else->Arrays->fill->if->return
Collections.CopiesList#subList(int, int)::: copies list sub list:::if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->if->throw->new->IllegalArgumentException->return->new->CopiesList<>
Collections.CopiesList#hashCode()::: copies list hash code:::if->return->pow->sum->for->i->Integer->numberOfLeadingZeros->return->element->hashCode
Collections.CopiesList#equals(Object)::: copies list equals:::if->return->if->other->return->eq->if->return->remaining->e->itr->iterator->if->while->itr->hasNext->if->itr->next->return->else->while->itr->hasNext->if->e->itr->next->equals->return->return->itr->hasNext
Collections.CopiesList#stream()::: copies list stream:::return->IntStream->range->mapToObj
Collections.CopiesList#parallelStream()::: copies list parallel stream:::return->IntStream->range->parallel->mapToObj
Collections.CopiesList#spliterator()::: copies list spliterator:::return->stream->spliterator
Collections.CopiesList#readObject(ObjectInputStream)::: copies list read object:::ois->defaultReadObject->SharedSecrets->getJavaObjectInputStreamAccess->checkArray
Collections#reverseOrder():::Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface:::return
Collections.ReverseComparator#compare(Comparable, Comparable)::: reverse comparator compare:::return->c2->compareTo
Collections.ReverseComparator#readResolve()::: reverse comparator read resolve:::return->Collections->reverseOrder
Collections.ReverseComparator#reversed()::: reverse comparator reversed:::return->Comparator->naturalOrder
Collections#reverseOrder(Comparator):::Returns a comparator that imposes the reverse ordering of the specified comparator:::if->return->else->if->return->else->if->return->else->if->return->else->return->new->ReverseComparator2<>
Collections.ReverseComparator2#compare(T, T)::: reverse comparator2 compare:::return->cmp->compare
Collections.ReverseComparator2#equals(Object)::: reverse comparator2 equals:::return->cmp->equals
Collections.ReverseComparator2#hashCode()::: reverse comparator2 hash code:::return->cmp->hashCode
Collections.ReverseComparator2#reversed()::: reverse comparator2 reversed:::return
Collections#enumeration(Collection):::Returns an enumeration over the specified collection:::return->new->Enumeration<T>
Collections#list(Enumeration):::Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration:::l->new->ArrayList<>->while->e->hasMoreElements->l->e->nextElement->add->return
Collections#eq(Object, Object):::Returns true if the specified arguments are equal, or both null:::return->o1->equals
Collections#frequency(Collection, Object):::Returns the number of elements in the specified collection equal to the specified object:::result->if->foreach->if->else->foreach->if->o->equals->return
Collections#disjoint(Collection, Collection):::Returns true if the two specified collections have no elements in common:::contains->iterate->if->else->if->c1size->c1->size->c2size->c2->size->if->return->if->foreach->if->contains->contains->return->return
Collections#addAll(Collection, T...):::Adds all of the specified elements to the specified collection:::result->foreach->c->add->return
Collections#newSetFromMap(Map):::Returns a set backed by the specified map:::return->new->SetFromMap<>
Collections.SetFromMap#clear()::: set from map clear:::m->clear
Collections.SetFromMap#size()::: set from map size:::return->m->size
Collections.SetFromMap#isEmpty()::: set from map is empty:::return->m->isEmpty
Collections.SetFromMap#contains(Object)::: set from map contains:::return->m->containsKey
Collections.SetFromMap#remove(Object)::: set from map remove:::return->m->remove
Collections.SetFromMap#add(E)::: set from map add:::return->m->put
Collections.SetFromMap#iterator()::: set from map iterator:::return->s->iterator
Collections.SetFromMap#toArray()::: set from map to array:::return->s->toArray
Collections.SetFromMap#toArray(T[])::: set from map to array:::return->s->toArray
Collections.SetFromMap#toString()::: set from map to string:::return->s->toString
Collections.SetFromMap#hashCode()::: set from map hash code:::return->s->hashCode
Collections.SetFromMap#equals(Object)::: set from map equals:::return->s->equals
Collections.SetFromMap#containsAll(Collection)::: set from map contains all:::return->s->containsAll
Collections.SetFromMap#removeAll(Collection)::: set from map remove all:::return->s->removeAll
Collections.SetFromMap#retainAll(Collection)::: set from map retain all:::return->s->retainAll
Collections.SetFromMap#forEach(Consumer)::: set from map for each:::s->forEach
Collections.SetFromMap#removeIf(Predicate)::: set from map remove if:::return->s->removeIf
Collections.SetFromMap#spliterator()::: set from map spliterator:::return->s->spliterator
Collections.SetFromMap#stream()::: set from map stream:::return->s->stream
Collections.SetFromMap#parallelStream()::: set from map parallel stream:::return->s->parallelStream
Collections.SetFromMap#readObject(java.io.ObjectInputStream)::: set from map read object:::stream->defaultReadObject->m->keySet
Collections#asLifoQueue(Deque):::Returns a view of a Deque as a Last-in-first-out (Lifo) Queue:::return->Objects->requireNonNull->new->AsLIFOQueue<>
Collections.AsLIFOQueue#add(E)::: as queue add:::q->addFirst->return
Collections.AsLIFOQueue#offer(E)::: as queue offer:::return->q->offerFirst
Collections.AsLIFOQueue#poll()::: as queue poll:::return->q->pollFirst
Collections.AsLIFOQueue#remove()::: as queue remove:::return->q->removeFirst
Collections.AsLIFOQueue#peek()::: as queue peek:::return->q->peekFirst
Collections.AsLIFOQueue#element()::: as queue element:::return->q->getFirst
Collections.AsLIFOQueue#clear()::: as queue clear:::q->clear
Collections.AsLIFOQueue#size()::: as queue size:::return->q->size
Collections.AsLIFOQueue#isEmpty()::: as queue is empty:::return->q->isEmpty
Collections.AsLIFOQueue#contains(Object)::: as queue contains:::return->q->contains
Collections.AsLIFOQueue#remove(Object)::: as queue remove:::return->q->remove
Collections.AsLIFOQueue#iterator()::: as queue iterator:::return->q->iterator
Collections.AsLIFOQueue#toArray()::: as queue to array:::return->q->toArray
Collections.AsLIFOQueue#toArray(T[])::: as queue to array:::return->q->toArray
Collections.AsLIFOQueue#toArray(IntFunction)::: as queue to array:::return->q->toArray
Collections.AsLIFOQueue#toString()::: as queue to string:::return->q->toString
Collections.AsLIFOQueue#containsAll(Collection)::: as queue contains all:::return->q->containsAll
Collections.AsLIFOQueue#removeAll(Collection)::: as queue remove all:::return->q->removeAll
Collections.AsLIFOQueue#retainAll(Collection)::: as queue retain all:::return->q->retainAll
Collections.AsLIFOQueue#forEach(Consumer)::: as queue for each:::q->forEach
Collections.AsLIFOQueue#removeIf(Predicate)::: as queue remove if:::return->q->removeIf
Collections.AsLIFOQueue#spliterator()::: as queue spliterator:::return->q->spliterator
Collections.AsLIFOQueue#stream()::: as queue stream:::return->q->stream
Collections.AsLIFOQueue#parallelStream()::: as queue parallel stream:::return->q->parallelStream
ComparableTimSort#sort(Object[], int, int, Object[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible:::nRemaining->if->return->if->initRunLen->countRunAndMakeAscending->binarySort->return->ts->new->ComparableTimSort->minRun->minRunLength->do->runLen->countRunAndMakeAscending->if->force->binarySort->ts->pushRun->ts->mergeCollapse->while->ts->mergeForceCollapse
ComparableTimSort#binarySort(Object[], int, int, int):::Sorts the specified portion of the specified array using a binary insertion sort:::if->for
ComparableTimSort#countRunAndMakeAscending(Object[], int, int):::Returns the length of the run beginning at the specified position in the specified array and reverses the run if it is descending (ensuring that the run will always be ascending when the method returns):::runHi->if->return->if->compareTo->while->compareTo->reverseRange->else->while->compareTo->return
ComparableTimSort#reverseRange(Object[], int, int):::Reverse the specified range of the specified array.:::while->t
ComparableTimSort#minRunLength(int):::Returns the minimum acceptable run length for an array of the specified length:::r->while->return
ComparableTimSort#pushRun(int, int):::Pushes the specified run onto the pending-run stack.:::
ComparableTimSort#mergeCollapse():::Examines the stack of runs waiting to be merged and merges adjacent runs until the stack invariants are reestablished:      1:::while->n->if->if->else->if->break->mergeAt
ComparableTimSort#mergeForceCollapse():::Merges all runs on the stack until only one remains:::while->n->if->mergeAt
ComparableTimSort#mergeAt(int):::Merges the two runs at stack indices i and i+1:::base1->len1->base2->len2->if->k->gallopRight->if->return->gallopLeft->if->return->if->mergeLo->else->mergeHi
ComparableTimSort#gallopLeft(Comparable, Object[], int, int, int):::Locates the position at which to insert the specified key into the specified sorted range; if the range contains an element equal to key, returns the index of the leftmost equal element.:::lastOfs->ofs->if->key->compareTo->maxOfs->while->key->compareTo->if->if->else->maxOfs->while->key->compareTo->if->if->tmp->while->m->if->key->compareTo->else->return
ComparableTimSort#gallopRight(Comparable, Object[], int, int, int):::Like gallopLeft, except that if the range contains an element equal to key, gallopRight returns the index after the rightmost equal element.:::ofs->lastOfs->if->key->compareTo->maxOfs->while->key->compareTo->if->if->tmp->else->maxOfs->while->key->compareTo->if->if->while->m->if->key->compareTo->else->return
ComparableTimSort#mergeLo(int, int, int, int):::Merges two adjacent runs in place, in a stable fashion:::a->tmp->ensureCapacity->cursor1->cursor2->dest->System->arraycopy->if->System->arraycopy->return->if->System->arraycopy->return->minGallop->while->count1->count2->do->if->compareTo->if->break->else->if->break->while->do->gallopRight->if->System->arraycopy->if->break->if->break->gallopLeft->if->System->arraycopy->if->break->if->break->while->if->if->System->arraycopy->else->if->throw->new->IllegalArgumentException->else->System->arraycopy
ComparableTimSort#mergeHi(int, int, int, int):::Like mergeLo, except that this method should be called only if len1 >= len2; mergeLo should be called if len1 <= len2:::a->tmp->ensureCapacity->tmpBase->System->arraycopy->cursor1->cursor2->dest->if->System->arraycopy->return->if->System->arraycopy->return->minGallop->while->count1->count2->do->if->compareTo->if->break->else->if->break->while->do->gallopRight->if->System->arraycopy->if->break->if->break->gallopLeft->if->System->arraycopy->if->break->if->break->while->if->if->System->arraycopy->else->if->throw->new->IllegalArgumentException->else->System->arraycopy
ComparableTimSort#ensureCapacity(int):::Ensures that the external array tmp has at least the specified number of elements, increasing its size if necessary:::if->newSize->Integer->numberOfLeadingZeros->if->else->Math->min->newArray->new->ObjectArr->return
Comparator#compare(T, T):::Compares its two arguments for order:::
Comparator#equals(Object):::Indicates whether some other object is "equal to" this comparator:::
Comparator#reversed():::Returns a comparator that imposes the reverse ordering of this comparator.:::return->Collections->reverseOrder
Comparator#thenComparing(Comparator):::Returns a lexicographic-order comparator with another comparator:::Objects->requireNonNull->return->res->compare->return->other->compare
Comparator#thenComparing(Function, Comparator):::Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.:::return->comparing->thenComparing
Comparator#thenComparing(Function):::Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.:::return->comparing->thenComparing
Comparator#thenComparingInt(ToIntFunction):::Returns a lexicographic-order comparator with a function that extracts an int sort key.:::return->comparingInt->thenComparing
Comparator#thenComparingLong(ToLongFunction):::Returns a lexicographic-order comparator with a function that extracts a long sort key.:::return->comparingLong->thenComparing
Comparator#thenComparingDouble(ToDoubleFunction):::Returns a lexicographic-order comparator with a function that extracts a double sort key.:::return->comparingDouble->thenComparing
Comparator#reverseOrder():::Returns a comparator that imposes the reverse of the natural ordering:::return->Collections->reverseOrder
Comparator#naturalOrder():::Returns a comparator that compares Comparable objects in natural order:::return
Comparator#nullsFirst(Comparator):::Returns a null-friendly comparator that considers null to be less than non-null:::return->new->Comparators.NullComparator<>
Comparator#nullsLast(Comparator):::Returns a null-friendly comparator that considers null to be greater than non-null:::return->new->Comparators.NullComparator<>
Comparator#comparing(Function, Comparator):::Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator:::Objects->requireNonNull->Objects->requireNonNull->return->keyComparator->keyExtractor->apply->keyExtractor->apply->compare
Comparator#comparing(Function):::Accepts a function that extracts a java.lang.Comparable Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key:::Objects->requireNonNull->return->keyExtractor->apply->keyExtractor->apply->compareTo
Comparator#comparingInt(ToIntFunction):::Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key:::Objects->requireNonNull->return->Integer->keyExtractor->applyAsInt->keyExtractor->applyAsInt->compare
Comparator#comparingLong(ToLongFunction):::Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key:::Objects->requireNonNull->return->Long->keyExtractor->applyAsLong->keyExtractor->applyAsLong->compare
Comparator#comparingDouble(ToDoubleFunction):::Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key:::Objects->requireNonNull->return->Double->keyExtractor->applyAsDouble->keyExtractor->applyAsDouble->compare
Comparators.NullComparator#compare(T, T)::: null comparator compare:::if->return->else->if->return->else->return->real->compare
Comparators.NullComparator#thenComparing(Comparator)::: null comparator then comparing:::Objects->requireNonNull->return->real->thenComparing->new->NullComparator<>
Comparators.NullComparator#reversed()::: null comparator reversed:::return->real->reversed->new->NullComparator<>
Currency#getInstance(String):::Returns the Currency instance for the given currency code.:::return->getInstance
Currency#getInstance(String, int, int)::: currency get instance:::instance->instances->get->if->return->if->found->if->currencyCode->length->throw->new->IllegalArgumentException->char1->currencyCode->charAt->char2->currencyCode->charAt->tableEntry->getMainTableEntry->if->currencyCode->charAt->else->fractionAndNumericCode->SpecialCaseEntry->findEntry->if->if->ocEntry->OtherCurrencyEntry->findEntry->if->throw->new->IllegalArgumentException->currencyVal->new->Currency->instances->putIfAbsent->return
Currency#getInstance(Locale):::Returns the Currency instance for the country of the given locale:::override->locale->getUnicodeLocaleType->if->try->return->override->toUpperCase->getInstance->catch->finally->country->CalendarDataUtility->findRegionOverride->getCountry->if->country->matches->throw->new->IllegalArgumentException->char1->country->charAt->char2->country->charAt->tableEntry->getMainTableEntry->if->finalChar->defaultFractionDigits->numericCode->sb->new->StringBuilder->sb->append->return->sb->toString->getInstance->else->if->throw->new->IllegalArgumentException->if->return->else->index->SpecialCaseEntry->toIndex->scEntry->specialCasesList->get->if->System->currentTimeMillis->return->getInstance->else->return->getInstance
Currency#getAvailableCurrencies():::Gets the set of available currencies:::synchronized->if->new->HashSet<>->for->c1->foreach->available->getInstance->add->result->available->clone->return
Currency#getCurrencyCode():::Gets the ISO 4217 currency code of this currency.:::return
Currency#getSymbol():::Gets the symbol of this currency for the default Locale.Category#DISPLAY DISPLAY locale:::return->Locale->getDefault->getSymbol
Currency#getSymbol(Locale):::Gets the symbol of this currency for the specified locale:::pool->LocaleServiceProviderPool->getPool->CalendarDataUtility->findRegionOverride->symbol->pool->getLocalizedObject->if->return->return
Currency#getDefaultFractionDigits():::Gets the default number of fraction digits used with this currency:::return
Currency#getNumericCode():::Returns the ISO 4217 numeric code of this currency.:::return
Currency#getNumericCodeAsString():::Returns the 3 digit ISO 4217 numeric code of this currency as a String:::if->sb->new->StringBuilder->sb->append->if->sb->append->return->sb->append->toString->return->String->valueOf
Currency#getDisplayName():::Gets the name that is suitable for displaying this currency for the default Locale.Category#DISPLAY DISPLAY locale:::return->Locale->getDefault->getDisplayName
Currency#getDisplayName(Locale):::Gets the name that is suitable for displaying this currency for the specified locale:::pool->LocaleServiceProviderPool->getPool->result->pool->getLocalizedObject->if->return->return
Currency#toString():::Returns the ISO 4217 currency code of this currency.:::return
Currency#readResolve():::Resolves instances being deserialized to a single instance per currency.:::return->getInstance
Currency#getMainTableEntry(char, char):::Gets the main table entry for the country whose country code consists of char1 and char2.:::if->throw->new->IllegalArgumentException->return
Currency#setMainTableEntry(char, char, int):::Sets the main table entry for the country whose country code consists of char1 and char2.:::if->throw->new->IllegalArgumentException
Currency.CurrencyNameGetter#getObject(CurrencyNameProvider, Locale, String, Object...)::: currency name getter get object:::type->switch->return->currencyNameProvider->getSymbol->return->currencyNameProvider->getDisplayName->return
Currency#readIntArray(DataInputStream, int)::: currency read int array:::ret->new->intArr->for->i->return
Currency#readSpecialCases(DataInputStream, int)::: currency read special cases:::list->new->ArrayList<>->cutOverTime->oldCurrency->newCurrency->oldCurrencyFraction->newCurrencyFraction->oldCurrencyNumericCode->newCurrencyNumericCode->for->i->return
Currency#readOtherCurrencies(DataInputStream, int)::: currency read other currencies:::list->new->ArrayList<>->currencyCode->fraction->numericCode->for->i->return
Currency#getValidCurrencyData(Properties, Pattern):::Parse currency data found in the properties file (that java.util.currency.data designates) to a List of CurrencyProperty instances:::keys->props->stringPropertyNames->propertyEntries->new->ArrayList<>->currencyCodeGroup->keys->stream->CurrencyProperty->k->toUpperCase->props->getProperty->toUpperCase->getValidEntry->map->o->stream->flatMap->Collectors->groupingBy->collect->currencyCodeGroup->inconsistent->CurrencyProperty->containsInconsistentInstances->if->list->CurrencyProperty->info->forEach->else->propertyEntries->addAll->forEach->return
Currency#replaceCurrencyData(CurrencyProperty):::Replaces currency data found in the properties file that java.util.currency.data designates:::ctry->code->numeric->fraction->entry->index->SpecialCaseEntry->indexOf->scCurrencyCodeIndex->if->SpecialCaseEntry->currencyCodeIndex->if->specialCasesList->new->SpecialCaseEntry->set->oe->OtherCurrencyEntry->findEntry->if->oIndex->otherCurrenciesList->indexOf->otherCurrenciesList->new->OtherCurrencyEntry->set->if->ctry->charAt->code->charAt->ctry->charAt->code->charAt->if->specialCasesList->new->SpecialCaseEntry->add->specialCasesList->size->else->updateMainTableEntry->if->code->charAt->else->ctry->charAt->ctry->charAt->setMainTableEntry
Currency#updateMainTableEntry(String, int, int)::: currency update main table entry:::tableEntry->code->charAt->code->charAt->getMainTableEntry->entry->if->code->charAt->numericCode->defaultFractionDigits->if->code->charAt->code->charAt->code->charAt->setMainTableEntry
Currency.SpecialCaseEntry#indexOf(String, int, int)::: special case entry index of:::size->specialCasesList->size->for->index->return
Currency.SpecialCaseEntry#findEntry(String)::: special case entry find entry:::fractionAndNumericCode->size->specialCasesList->size->for->index->return
Currency.SpecialCaseEntry#currencyCodeIndex(String)::: special case entry currency code index:::size->specialCasesList->size->for->index->return
Currency.SpecialCaseEntry#toIndex(int)::: special case entry to index:::return
Currency.OtherCurrencyEntry#findEntry(String)::: other currency entry find entry:::size->otherCurrenciesList->size->for->index->return
Currency.CurrencyProperty#getValidEntry(String, String, Pattern):::Check the valid currency data and create/return an Optional instance of CurrencyProperty:::prop->if->ctry->length->else->parseProperty->if->curData->chars->map->sum->else->if->else->try->if->isPastCutoverDate->catch->finally->if->info->return->Optional->ofNullable
Currency.CurrencyProperty#parseProperty(String, String, Pattern)::: currency property parse property:::m->pattern->matcher->if->m->find->return->else->return->m->group->Integer->m->group->parseInt->Integer->m->group->parseInt->m->group->new->CurrencyProperty
Currency.CurrencyProperty#containsInconsistentInstances(List):::Checks if the given list contains multiple inconsistent currency instances:::numCode->list->get->fractionDigit->list->get->return->list->stream->anyMatch
Currency.CurrencyProperty#isPastCutoverDate(String)::: currency property is past cutover date:::format->new->SimpleDateFormat->format->TimeZone->getTimeZone->setTimeZone->format->setLenient->time->format->s->trim->parse->getTime->return->System->currentTimeMillis
Currency.CurrencyProperty#info(String, Throwable)::: currency property info:::logger->PlatformLogger->getLogger->if->logger->isLoggable->if->logger->info->else->logger->info
Date#clone():::Return a copy of this object.:::d->try->super->clone->if->cdate->clone->catch->finally->return
Date#UTC(int, int, int, int, int, int):::Determines the date and time based on the arguments:::y->if->else->if->CalendarUtils->floorDivide->CalendarUtils->mod->m->cal->getCalendarSystem->udate->cal->newCalendarDate->udate->setNormalizedDate->setTimeOfDay->d->new->Date->d->normalize->return
Date#parse(String):::Attempts to interpret the string s as a representation of a date and time:::year->mon->mday->hour->min->sec->millis->c->i->n->wst->tzoffset->prevc->if->break->limit->s->length->while->s->charAt->if->continue->if->depth->while->s->charAt->if->else->if->if->break->continue->if->while->s->charAt->if->if->else->if->if->break->else->if->if->break->else->if->else->break->else->if->if->else->if->else->break->else->if->if->else->if->else->break->else->if->break->else->if->else->if->else->if->else->if->else->break->else->if->else->st->while->s->charAt->if->break->if->break->k->for->if->break->if->break->if->synchronized->if->gcal->getCalendarDate->getYear->if->if->if->if->cal->getCalendarSystem->if->ldate->cal->TimeZone->getDefaultRef->newCalendarDate->ldate->setDate->ldate->setTimeOfDay->return->cal->getTime->udate->cal->newCalendarDate->udate->setDate->udate->setTimeOfDay->return->cal->getTime->throw->new->IllegalArgumentException
Date#getYear():::Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.:::return->normalize->getYear
Date#setYear(int):::Sets the year of this Date object to be the specified value plus 1900:::getCalendarDate->setNormalizedYear
Date#getMonth():::Returns a number representing the month that contains or begins with the instant in time represented by this Date object:::return->normalize->getMonth
Date#setMonth(int):::Sets the month of this date to the specified value:::y->if->else->if->CalendarUtils->floorDivide->CalendarUtils->mod->d->getCalendarDate->if->d->d->getNormalizedYear->setNormalizedYear->d->setMonth
Date#getDate():::Returns the day of the month represented by this Date object:::return->normalize->getDayOfMonth
Date#setDate(int):::Sets the day of the month of this Date object to the specified value:::getCalendarDate->setDayOfMonth
Date#getDay():::Returns the day of the week represented by this date:::return->normalize->getDayOfWeek
Date#getHours():::Returns the hour represented by this Date object:::return->normalize->getHours
Date#setHours(int):::Sets the hour of this Date object to the specified value:::getCalendarDate->setHours
Date#getMinutes():::Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone:::return->normalize->getMinutes
Date#setMinutes(int):::Sets the minutes of this Date object to the specified value:::getCalendarDate->setMinutes
Date#getSeconds():::Returns the number of seconds past the minute represented by this date:::return->normalize->getSeconds
Date#setSeconds(int):::Sets the seconds of this Date to the specified value:::getCalendarDate->setSeconds
Date#getTime():::Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object.:::return->getTimeImpl
Date#getTimeImpl()::: date get time impl:::if->cdate->isNormalized->normalize->return
Date#setTime(long):::Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.:::
Date#before(Date):::Tests if this date is before the specified date.:::return->getMillisOf->getMillisOf
Date#after(Date):::Tests if this date is after the specified date.:::return->getMillisOf->getMillisOf
Date#equals(Object):::Compares two dates for equality:::return->getTime->getTime
Date#getMillisOf(Date):::Returns the millisecond value of this Date object without affecting its internal state.:::if->date->getClass->return->date->getTime->if->isNormalized->return->d->clone->return->gcal->getTime
Date#compareTo(Date):::Compares two Dates for ordering.:::thisTime->getMillisOf->anotherTime->getMillisOf->return
Date#hashCode():::Returns a hash code value for this object:::ht->this->getTime->return
Date#toString():::Converts this Date object to a String of the form:  dow mon dd hh:mm:ss zzz yyyy where:<ul> <li>dow is the day of the week (Sun, Mon, Tue, Wed,     Thu, Fri, Sat):::date->normalize->sb->new->StringBuilder->index->date->getDayOfWeek->if->convertToAbbr->append->date->getMonth->convertToAbbr->append->CalendarUtils->date->getDayOfMonth->sprintf0d->append->CalendarUtils->date->getHours->sprintf0d->append->CalendarUtils->date->getMinutes->sprintf0d->append->CalendarUtils->date->getSeconds->sprintf0d->append->zi->date->getZone->if->sb->zi->date->isDaylightTime->getDisplayName->append->else->sb->append->sb->append->date->getYear->append->return->sb->toString
Date#convertToAbbr(StringBuilder, String):::Converts the given name to its 3-letter abbreviation (e.g., "monday" -> "Mon") and stored the abbreviation in the given StringBuilder.:::sb->Character->name->charAt->toUpperCase->append->sb->name->charAt->append->name->charAt->append->return
Date#toLocaleString():::Creates a string representation of this Date object in an implementation-dependent form:::formatter->DateFormat->getDateTimeInstance->return->formatter->format
Date#toGMTString():::Creates a string representation of this Date object of the form:  d mon yyyy hh:mm:ss GMT where:<ul> <li>d is the day of the month (1 through 31),     as one or two decimal digits:::t->getTime->cal->getCalendarSystem->date->cal->getTime->getCalendarDate->sb->new->StringBuilder->CalendarUtils->date->getDayOfMonth->sprintf0d->append->date->getMonth->convertToAbbr->append->sb->date->getYear->append->append->CalendarUtils->date->getHours->sprintf0d->append->CalendarUtils->date->getMinutes->sprintf0d->append->CalendarUtils->date->getSeconds->sprintf0d->sb->append->return->sb->toString
Date#getTimezoneOffset():::Returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this Date object:::zoneOffset->if->tz->TimeZone->getDefaultRef->if->getOffsets->else->tz->getOffset->else->normalize->cdate->getZoneOffset->return
Date#getCalendarDate()::: date get calendar date:::if->cal->getCalendarSystem->cal->TimeZone->getDefaultRef->getCalendarDate->return
Date#normalize()::: date normalize:::if->cal->getCalendarSystem->cal->TimeZone->getDefaultRef->getCalendarDate->return->if->cdate->isNormalized->normalize->tz->TimeZone->getDefaultRef->if->cdate->getZone->cdate->setZone->cal->getCalendarSystem->cal->getCalendarDate->return
Date#normalize(BaseCalendar.Date)::: date normalize:::y->date->getNormalizedYear->m->date->getMonth->d->date->getDayOfMonth->hh->date->getHours->mm->date->getMinutes->ss->date->getSeconds->ms->date->getMillis->tz->date->getZone->if->if->TimeZone->getTimeZone->gc->new->GregorianCalendar->gc->clear->gc->set->gc->set->gc->getTimeInMillis->cal->getCalendarSystem->cal->getCalendarDate->return->cal->getCalendarSystem->if->getCalendarSystem->cal->newCalendarDate->date->setNormalizedDate->setTimeOfDay->cal->getTime->ncal->getCalendarSystem->if->ncal->newCalendarDate->date->setNormalizedDate->setTimeOfDay->ncal->getTime->return
Date#getCalendarSystem(int):::Returns the Gregorian or Julian calendar system to use with the given date:::if->return->return->getJulianCalendar
Date#getCalendarSystem(long)::: date get calendar system:::if->TimeZone->getDefaultRef->getOffset->return->return->getJulianCalendar
Date#getCalendarSystem(BaseCalendar.Date)::: date get calendar system:::if->return->if->cdate->getEra->return->return
Date#getJulianCalendar()::: date get julian calendar:::if->CalendarSystem->forName->return
Date#writeObject(ObjectOutputStream):::Save the state of this object to a stream (i.e., serialize it).:::s->defaultWriteObject->s->getTimeImpl->writeLong
Date#readObject(ObjectInputStream):::Reconstitute this object from a stream (i.e., deserialize it).:::s->defaultReadObject->s->readLong
Date#from(Instant):::Obtains an instance of Date from an Instant object:::try->return->instant->toEpochMilli->new->Date->catch->throw->new->IllegalArgumentException->finally
Date#toInstant():::Converts this Date object to an Instant:::return->Instant->getTime->ofEpochMilli
Deque#addFirst(E):::Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available:::
Deque#addLast(E):::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available:::
Deque#offerFirst(E):::Inserts the specified element at the front of this deque unless it would violate capacity restrictions:::
Deque#offerLast(E):::Inserts the specified element at the end of this deque unless it would violate capacity restrictions:::
Deque#removeFirst():::Retrieves and removes the first element of this deque:::
Deque#removeLast():::Retrieves and removes the last element of this deque:::
Deque#pollFirst():::Retrieves and removes the first element of this deque, or returns null if this deque is empty.:::
Deque#pollLast():::Retrieves and removes the last element of this deque, or returns null if this deque is empty.:::
Deque#getFirst():::Retrieves, but does not remove, the first element of this deque:::
Deque#getLast():::Retrieves, but does not remove, the last element of this deque:::
Deque#peekFirst():::Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.:::
Deque#peekLast():::Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.:::
Deque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element from this deque:::
Deque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element from this deque:::
Deque#add(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available:::
Deque#offer(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available:::
Deque#remove():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque):::
Deque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty:::
Deque#element():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque):::
Deque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty:::
Deque#addAll(Collection):::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator:::
Deque#push(E):::Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available:::
Deque#pop():::Pops an element from the stack represented by this deque:::
Deque#remove(Object):::Removes the first occurrence of the specified element from this deque:::
Deque#contains(Object):::Returns true if this deque contains the specified element:::
Deque#size():::Returns the number of elements in this deque.:::
Deque#iterator():::Returns an iterator over the elements in this deque in proper sequence:::
Deque#descendingIterator():::Returns an iterator over the elements in this deque in reverse sequential order:::
Dictionary#size():::Returns the number of entries (distinct keys) in this dictionary.:::
Dictionary#isEmpty():::Tests if this dictionary maps no keys to value:::
Dictionary#keys():::Returns an enumeration of the keys in this dictionary:::
Dictionary#elements():::Returns an enumeration of the values in this dictionary:::
Dictionary#get(Object):::Returns the value to which the key is mapped in this dictionary:::
Dictionary#put(K, V):::Maps the specified key to the specified value in this dictionary:::
Dictionary#remove(Object):::Removes the key (and its corresponding value) from this dictionary:::
DoubleSummaryStatistics#accept(double):::Records another value into the summary information.:::sumWithCompensation->Math->min->Math->max
DoubleSummaryStatistics#combine(DoubleSummaryStatistics):::Combines the state of another DoubleSummaryStatistics into this one.:::sumWithCompensation->sumWithCompensation->Math->min->Math->max
DoubleSummaryStatistics#sumWithCompensation(double):::Incorporate a new double value using Kahan summation / compensated summation.:::tmp->velvel
DoubleSummaryStatistics#getCount():::Return the count of values recorded.:::return
DoubleSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded:::tmp->if->Double->isNaN->Double->isInfinite->return->else->return
DoubleSummaryStatistics#getMin():::Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded:::return
DoubleSummaryStatistics#getMax():::Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded:::return
DoubleSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded:::return->getCount->getSum->getCount
DoubleSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging:::return->String->this->getClass->getSimpleName->getCount->getSum->getMin->getAverage->getMax->format
DualPivotQuicksort#sort(int[], int, int, int[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::if->sort->return->run->new->intArr->count->for->k->if->return->else->if->return->if->odd->for->n->b->ao->bo->blen->if->new->intArr->if->System->arraycopy->else->for->last
DualPivotQuicksort#sort(int[], int, int, boolean):::Sorts the specified range of the array by Dual-Pivot Quicksort.:::length->if->if->for->i->j->else->do->if->return->while->for->k->last->while->return->seventh->e3->e2->e1->e4->e5->if->t->if->t->if->if->t->if->if->if->t->if->if->if->less->great->if->pivot1->pivot2->while->while->for->k->sort->sort->if->while->while->for->k->sort->else->pivot->for->k->sort->sort
DualPivotQuicksort#sort(long[], int, int, long[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::if->sort->return->run->new->intArr->count->for->k->if->return->else->if->return->if->odd->for->n->b->ao->bo->blen->if->new->longArr->if->System->arraycopy->else->for->last
DualPivotQuicksort#sort(long[], int, int, boolean):::Sorts the specified range of the array by Dual-Pivot Quicksort.:::length->if->if->for->i->j->else->do->if->return->while->for->k->last->while->return->seventh->e3->e2->e1->e4->e5->if->t->if->t->if->if->t->if->if->if->t->if->if->if->less->great->if->pivot1->pivot2->while->while->for->k->sort->sort->if->while->while->for->k->sort->else->pivot->for->k->sort->sort
DualPivotQuicksort#sort(short[], int, int, short[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::if->count->new->intArr->for->i->for->i->k->else->doSort
DualPivotQuicksort#doSort(short[], int, int, short[], int, int):::Sorts the specified range of the array.:::if->sort->return->run->new->intArr->count->for->k->if->return->else->if->return->if->odd->for->n->b->ao->bo->blen->if->new->shortArr->if->System->arraycopy->else->for->last
DualPivotQuicksort#sort(short[], int, int, boolean):::Sorts the specified range of the array by Dual-Pivot Quicksort.:::length->if->if->for->i->j->else->do->if->return->while->for->k->last->while->return->seventh->e3->e2->e1->e4->e5->if->t->if->t->if->if->t->if->if->if->t->if->if->if->less->great->if->pivot1->pivot2->while->while->for->k->sort->sort->if->while->while->for->k->sort->else->pivot->for->k->sort->sort
DualPivotQuicksort#sort(char[], int, int, char[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::if->count->new->intArr->for->i->for->i->k->else->doSort
DualPivotQuicksort#doSort(char[], int, int, char[], int, int):::Sorts the specified range of the array.:::if->sort->return->run->new->intArr->count->for->k->if->return->else->if->return->if->odd->for->n->b->ao->bo->blen->if->new->charArr->if->System->arraycopy->else->for->last
DualPivotQuicksort#sort(char[], int, int, boolean):::Sorts the specified range of the array by Dual-Pivot Quicksort.:::length->if->if->for->i->j->else->do->if->return->while->for->k->last->while->return->seventh->e3->e2->e1->e4->e5->if->t->if->t->if->if->t->if->if->if->t->if->if->if->less->great->if->pivot1->pivot2->while->while->for->k->sort->sort->if->while->while->for->k->sort->else->pivot->for->k->sort->sort
DualPivotQuicksort#sort(byte[], int, int):::Sorts the specified range of the array.:::if->count->new->intArr->for->i->for->i->k->else->for->i->j
DualPivotQuicksort#sort(float[], int, int, float[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::while->Float->isNaN->for->k->doSort->hi->while->middle->middleValue->if->else->while->Float->floatToRawIntBits->for->k->p
DualPivotQuicksort#doSort(float[], int, int, float[], int, int):::Sorts the specified range of the array.:::if->sort->return->run->new->intArr->count->for->k->if->return->else->if->return->if->odd->for->n->b->ao->bo->blen->if->new->floatArr->if->System->arraycopy->else->for->last
DualPivotQuicksort#sort(float[], int, int, boolean):::Sorts the specified range of the array by Dual-Pivot Quicksort.:::length->if->if->for->i->j->else->do->if->return->while->for->k->last->while->return->seventh->e3->e2->e1->e4->e5->if->t->if->t->if->if->t->if->if->if->t->if->if->if->less->great->if->pivot1->pivot2->while->while->for->k->sort->sort->if->while->while->for->k->sort->else->pivot->for->k->sort->sort
DualPivotQuicksort#sort(double[], int, int, double[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::while->Double->isNaN->for->k->doSort->hi->while->middle->middleValue->if->else->while->Double->doubleToRawLongBits->for->k->p
DualPivotQuicksort#doSort(double[], int, int, double[], int, int):::Sorts the specified range of the array.:::if->sort->return->run->new->intArr->count->for->k->if->return->else->if->return->if->odd->for->n->b->ao->bo->blen->if->new->doubleArr->if->System->arraycopy->else->for->last
DualPivotQuicksort#sort(double[], int, int, boolean):::Sorts the specified range of the array by Dual-Pivot Quicksort.:::length->if->if->for->i->j->else->do->if->return->while->for->k->last->while->return->seventh->e3->e2->e1->e4->e5->if->t->if->t->if->if->t->if->if->if->t->if->if->if->less->great->if->pivot1->pivot2->while->while->for->k->sort->sort->if->while->while->for->k->sort->else->pivot->for->k->sort->sort
DuplicateFormatFlagsException#getFlags():::Returns the set of flags which contains a duplicate flag.:::return
DuplicateFormatFlagsException#getMessage()::: duplicate format flags exception get message:::return->String->format
Enumeration#hasMoreElements():::Tests if this enumeration contains more elements.:::
Enumeration#nextElement():::Returns the next element of this enumeration if this enumeration object has at least one more element to provide.:::
Enumeration#asIterator():::Returns an Iterator that traverses the remaining elements covered by this enumeration:::return->new->Iterator<>
EnumMap#maskNull(Object)::: enum map mask null:::return
EnumMap#unmaskNull(Object)::: enum map unmask null:::return
EnumMap#size():::Returns the number of key-value mappings in this map.:::return
EnumMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.:::maskNull->foreach->if->value->equals->return->return
EnumMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.:::return->isValidKey->ordinal
EnumMap#containsMapping(Object, Object)::: enum map contains mapping:::return->isValidKey->maskNull->ordinal->equals
EnumMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::return->isValidKey->ordinal->unmaskNull
EnumMap#put(K, V):::Associates the specified value with the specified key in this map:::typeCheck->index->key->ordinal->oldValue->maskNull->if->return->unmaskNull
EnumMap#remove(Object):::Removes the mapping for this key from this map if present.:::if->isValidKey->return->index->ordinal->oldValue->if->return->unmaskNull
EnumMap#removeMapping(Object, Object)::: enum map remove mapping:::if->isValidKey->return->index->ordinal->if->maskNull->equals->return->return
EnumMap#isValidKey(Object):::Returns true if key is of the proper type to be a key in this enum map.:::if->return->keyClass->key->getClass->return->keyClass->getSuperclass
EnumMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::if->em->if->if->em->isEmpty->return->throw->new->ClassCastException->for->i->else->super->putAll
EnumMap#clear():::Removes all mappings from this map.:::Arrays->fill
EnumMap#keySet():::Returns a Set view of the keys contained in this map:::ks->if->new->KeySet->return
EnumMap.KeySet#iterator()::: key set iterator:::return->new->KeyIterator
EnumMap.KeySet#size()::: key set size:::return
EnumMap.KeySet#contains(Object)::: key set contains:::return->containsKey
EnumMap.KeySet#remove(Object)::: key set remove:::oldSize->EnumMap.this->remove->return
EnumMap.KeySet#clear()::: key set clear:::EnumMap.this->clear
EnumMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
EnumMap.Values#iterator()::: values iterator:::return->new->ValueIterator
EnumMap.Values#size()::: values size:::return
EnumMap.Values#contains(Object)::: values contains:::return->containsValue
EnumMap.Values#remove(Object)::: values remove:::maskNull->for->i->return
EnumMap.Values#clear()::: values clear:::EnumMap.this->clear
EnumMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->if->return->else->return->new->EntrySet
EnumMap.EntrySet#iterator()::: entry set iterator:::return->new->EntryIterator
EnumMap.EntrySet#contains(Object)::: entry set contains:::if->return->entry->return->entry->getKey->entry->getValue->containsMapping
EnumMap.EntrySet#remove(Object)::: entry set remove:::if->return->entry->return->entry->getKey->entry->getValue->removeMapping
EnumMap.EntrySet#size()::: entry set size:::return
EnumMap.EntrySet#clear()::: entry set clear:::EnumMap.this->clear
EnumMap.EntrySet#toArray()::: entry set to array:::return->new->ObjectArr->fillEntryArray
EnumMap.EntrySet#toArray(T[])::: entry set to array:::size->size->if->a->getClass->getComponentType->newInstance->if->return->fillEntryArray
EnumMap.EntrySet#fillEntryArray(Object[])::: entry set fill entry array:::j->for->i->return
EnumMap.EnumMapIterator#hasNext()::: enum map iterator has next:::while->return
EnumMap.EnumMapIterator#remove()::: enum map iterator remove:::checkLastReturnedIndex->if
EnumMap.EnumMapIterator#checkLastReturnedIndex()::: enum map iterator check last returned index:::if->throw->new->IllegalStateException
EnumMap.KeyIterator#next()::: key iterator next:::if->hasNext->throw->new->NoSuchElementException->return
EnumMap.ValueIterator#next()::: value iterator next:::if->hasNext->throw->new->NoSuchElementException->return->unmaskNull
EnumMap.EntryIterator#next()::: entry iterator next:::if->hasNext->throw->new->NoSuchElementException->new->Entry->return
EnumMap.EntryIterator#remove()::: entry iterator remove:::super->remove
EnumMap.EntryIterator.Entry#getKey()::: entry get key:::checkIndexForEntryUse->return
EnumMap.EntryIterator.Entry#getValue()::: entry get value:::checkIndexForEntryUse->return->unmaskNull
EnumMap.EntryIterator.Entry#setValue(V)::: entry set value:::checkIndexForEntryUse->oldValue->unmaskNull->maskNull->return
EnumMap.EntryIterator.Entry#equals(Object)::: entry equals:::if->return->if->return->e->ourValue->unmaskNull->hisValue->e->getValue->return->e->getKey->ourValue->equals
EnumMap.EntryIterator.Entry#hashCode()::: entry hash code:::if->return->super->hashCode->return->entryHashCode
EnumMap.EntryIterator.Entry#toString()::: entry to string:::if->return->super->toString->return->unmaskNull
EnumMap.EntryIterator.Entry#checkIndexForEntryUse()::: entry check index for entry use:::if->throw->new->IllegalStateException
EnumMap#equals(Object):::Compares the specified object with this map for equality:::if->return->if->return->equals->if->return->m->if->m->size->return->for->i->return
EnumMap#equals(EnumMap)::: enum map equals:::if->return->if->return->for->i->return
EnumMap#hashCode():::Returns the hash code value for this map:::h->for->i->return
EnumMap#entryHashCode(int)::: enum map entry hash code:::return->hashCode->hashCode
EnumMap#clone():::Returns a shallow copy of this enum map:::result->try->super->clone->catch->throw->new->AssertionError->finally->clone->return
EnumMap#typeCheck(K):::Throws an exception if e is not of the correct type for this enum set.:::keyClass->key->getClass->if->keyClass->getSuperclass->throw->new->ClassCastException
EnumMap#getKeyUniverse(Class):::Returns all of the values comprising K:::return->SharedSecrets->getJavaLangAccess->getEnumConstantsShared
EnumMap#writeObject(java.io.ObjectOutputStream):::Save the state of the EnumMap instance to a stream (i.e., serialize it).:::s->defaultWriteObject->s->writeInt->entriesToBeWritten->for->i
EnumMap#readObject(java.io.ObjectInputStream):::Reconstitute the EnumMap instance from a stream (i.e., deserialize it).:::s->defaultReadObject->getKeyUniverse->new->ObjectArr->size->s->readInt->for->i
EnumSet#access$000()::: enum set access$000:::return
EnumSet#noneOf(Class):::Creates an empty enum set with the specified element type.:::universe->getUniverse->if->throw->new->ClassCastException->if->return->new->RegularEnumSet<>->else->return->new->JumboEnumSet<>
EnumSet#allOf(Class):::Creates an enum set containing all of the elements in the specified element type.:::result->noneOf->result->addAll->return
EnumSet#addAll():::Adds all of the elements from the appropriate enum type to this enum set, which is empty prior to the call.:::
EnumSet#copyOf(EnumSet):::Creates an enum set with the same element type as the specified enum set, initially containing the same elements (if any).:::return->s->clone
EnumSet#copyOf(Collection):::Creates an enum set initialized from the specified collection:::if->return->clone->else->if->c->isEmpty->throw->new->IllegalArgumentException->i->c->iterator->first->i->next->result->EnumSet->of->while->i->hasNext->result->i->next->add->return
EnumSet#complementOf(EnumSet):::Creates an enum set with the same element type as the specified enum set, initially containing all the elements of this type that are not contained in the specified set.:::result->copyOf->result->complement->return
EnumSet#of(E):::Creates an enum set initially containing the specified element:::result->e->getDeclaringClass->noneOf->result->add->return
EnumSet#of(E, E):::Creates an enum set initially containing the specified elements:::result->e1->getDeclaringClass->noneOf->result->add->result->add->return
EnumSet#of(E, E, E):::Creates an enum set initially containing the specified elements:::result->e1->getDeclaringClass->noneOf->result->add->result->add->result->add->return
EnumSet#of(E, E, E, E):::Creates an enum set initially containing the specified elements:::result->e1->getDeclaringClass->noneOf->result->add->result->add->result->add->result->add->return
EnumSet#of(E, E, E, E, E):::Creates an enum set initially containing the specified elements:::result->e1->getDeclaringClass->noneOf->result->add->result->add->result->add->result->add->result->add->return
EnumSet#of(E, E...):::Creates an enum set initially containing the specified elements:::result->first->getDeclaringClass->noneOf->result->add->foreach->result->add->return
EnumSet#range(E, E):::Creates an enum set initially containing all of the elements in the range defined by the two specified endpoints:::if->from->compareTo->throw->new->IllegalArgumentException->result->from->getDeclaringClass->noneOf->result->addRange->return
EnumSet#addRange(E, E):::Adds the specified range to this enum set, which is empty prior to the call.:::
EnumSet#clone():::Returns a copy of this set.:::try->return->super->clone->catch->throw->new->AssertionError->finally
EnumSet#complement():::Complements the contents of this enum set.:::
EnumSet#typeCheck(E):::Throws an exception if e is not of the correct type for this enum set.:::eClass->e->getClass->if->eClass->getSuperclass->throw->new->ClassCastException
EnumSet#getUniverse(Class):::Returns all of the values comprising E:::return->SharedSecrets->getJavaLangAccess->getEnumConstantsShared
EnumSet.SerializationProxy#readResolve():::Returns an EnumSet object with initial state held by this proxy.:::result->EnumSet->noneOf->foreach->result->add->return
EnumSet#writeReplace():::Returns a  SerializationProxy representing the state of this instance.:::return->new->SerializationProxy<>
EnumSet#readObject(java.io.ObjectInputStream)::: enum set read object:::throw->new->java.io.InvalidObjectException
EventListenerProxy#getListener():::Returns the listener associated with the proxy.:::return
EventObject#getSource():::The object on which the Event initially occurred.:::return
EventObject#toString():::Returns a String representation of this EventObject.:::return->getClass->getName
FormatFlagsConversionMismatchException#getFlags():::Returns the incompatible flag.:::return
FormatFlagsConversionMismatchException#getConversion():::Returns the incompatible conversion.:::return
FormatFlagsConversionMismatchException#getMessage()::: format flags conversion mismatch exception get message:::return
Formattable#formatTo(Formatter, int, int, int):::Formats the object using the provided Formatter formatter.:::
Formatter#toCharset(String):::Returns a charset object for the given charset name.:::Objects->requireNonNull->try->return->Charset->forName->catch->throw->new->UnsupportedEncodingException->finally
Formatter#nonNullAppendable(Appendable)::: formatter non null appendable:::if->return->new->StringBuilder->return
Formatter#getZero(Locale)::: formatter get zero:::if->l->equals->dfs->DecimalFormatSymbols->getInstance->return->dfs->getZeroDigit->else->return
Formatter#locale():::Returns the locale set by the construction of this formatter:::ensureOpen->return
Formatter#out():::Returns the destination for the output.:::ensureOpen->return
Formatter#toString():::Returns the result of invoking toString() on the destination for the output:::ensureOpen->return->a->toString
Formatter#flush():::Flushes this formatter:::ensureOpen->if->try->flush->catch->finally
Formatter#close():::Closes this formatter:::if->return->try->if->close->catch->finally
Formatter#ensureOpen()::: formatter ensure open:::if->throw->new->FormatterClosedException
Formatter#ioException():::Returns the IOException last thrown by this formatter's Appendable:::return
Formatter#format(String, Object...):::Writes a formatted string to this object's destination using the specified format string and arguments:::return->format
Formatter#format(Locale, String, Object...):::Writes a formatted string to this object's destination using the specified locale, format string, and arguments.:::ensureOpen->last->lasto->fsa->parse->foreach->index->fs->index->try->switch->fs->print->break->if->throw->fs->toString->new->MissingFormatArgumentException->fs->print->break->if->throw->fs->toString->new->MissingFormatArgumentException->fs->print->break->if->throw->fs->toString->new->MissingFormatArgumentException->fs->print->break->catch->finally->return
Formatter#parse(String):::Finds format specifiers in the format string.:::al->new->ArrayList<>->m->fsPattern->matcher->for->i->len->s->length->return
Formatter#checkText(String, int, int)::: formatter check text:::for->i
Formatter.FormatString#index()::: format string index:::
Formatter.FormatString#print(Object, Locale)::: format string print:::
Formatter.FormatString#toString()::: format string to string:::
Formatter.FixedString#index()::: fixed string index:::return
Formatter.FixedString#print(Object, Locale)::: fixed string print:::a->append
Formatter.FixedString#toString()::: fixed string to string:::return->s->substring
Formatter.FormatSpecifier#index(String, int, int)::: format specifier index:::if->try->Integer->parseInt->catch->finally->else->return
Formatter.FormatSpecifier#index()::: format specifier index:::return
Formatter.FormatSpecifier#flags(String, int, int)::: format specifier flags:::Flags->parse->if->f->contains->return
Formatter.FormatSpecifier#width(String, int, int)::: format specifier width:::if->try->Integer->parseInt->if->throw->new->IllegalFormatWidthException->catch->finally->return
Formatter.FormatSpecifier#precision(String, int, int)::: format specifier precision:::if->try->Integer->parseInt->if->throw->new->IllegalFormatPrecisionException->catch->finally->return
Formatter.FormatSpecifier#conversion(char)::: format specifier conversion:::if->if->Conversion->isValid->throw->String->valueOf->new->UnknownFormatConversionException->if->Character->isUpperCase->f->add->Character->toLowerCase->if->Conversion->isText->return
Formatter.FormatSpecifier#print(Object, Locale)::: format specifier print:::if->printDateTime->return->switch->printInteger->break->printFloat->break->printCharacter->break->printBoolean->break->printString->break->printHashCode->break->a->System->lineSeparator->append->break->print->break
Formatter.FormatSpecifier#printInteger(Object, Locale)::: format specifier print integer:::if->print->else->if->byteValue->print->else->if->shortValue->print->else->if->intValue->print->else->if->longValue->print->else->if->print->else->failConversion
Formatter.FormatSpecifier#printFloat(Object, Locale)::: format specifier print float:::if->print->else->if->floatValue->print->else->if->doubleValue->print->else->if->print->else->failConversion
Formatter.FormatSpecifier#printDateTime(Object, Locale)::: format specifier print date time:::if->print->return->cal->if->Calendar->getInstance->cal->setTimeInMillis->else->if->Calendar->getInstance->cal->setTime->else->if->clone->cal->setLenient->else->if->print->return->else->failConversion->print
Formatter.FormatSpecifier#printCharacter(Object, Locale)::: format specifier print character:::if->print->return->s->if->toString->else->if->i->byteValue->if->Character->isValidCodePoint->Character->toChars->new->String->else->throw->new->IllegalFormatCodePointException->else->if->i->shortValue->if->Character->isValidCodePoint->Character->toChars->new->String->else->throw->new->IllegalFormatCodePointException->else->if->i->intValue->if->Character->isValidCodePoint->Character->toChars->new->String->else->throw->new->IllegalFormatCodePointException->else->failConversion->print
Formatter.FormatSpecifier#printString(Object, Locale)::: format specifier print string:::if->fmt->if->fmt->locale->fmt->out->new->Formatter->f->valueOf->formatTo->else->if->f->contains->failMismatch->if->print->else->arg->toString->print
Formatter.FormatSpecifier#printBoolean(Object, Locale)::: format specifier print boolean:::s->if->toString->Boolean->toString->else->Boolean->toString->print
Formatter.FormatSpecifier#printHashCode(Object, Locale)::: format specifier print hash code:::s->Integer->arg->hashCode->toHexString->print
Formatter.FormatSpecifier#print(String, Locale)::: format specifier print:::if->s->length->s->substring->if->f->contains->toUpperCaseWithLocale->appendJustified
Formatter.FormatSpecifier#toUpperCaseWithLocale(String, Locale)::: format specifier to upper case with locale:::return->s->Objects->Locale->getDefault->requireNonNullElse->toUpperCase
Formatter.FormatSpecifier#appendJustified(Appendable, CharSequence)::: format specifier append justified:::if->return->a->append->padRight->f->contains->sp->cs->length->if->a->append->for->i->if->a->append->return
Formatter.FormatSpecifier#toString()::: format specifier to string:::sb->new->StringBuilder->dupf->f->dup->remove->sb->dupf->toString->append->if->sb->append->append->if->sb->append->if->sb->append->append->if->sb->f->contains->append->sb->f->contains->Character->toUpperCase->append->return->sb->toString
Formatter.FormatSpecifier#checkGeneral()::: format specifier check general:::if->f->contains->failMismatch->if->f->contains->throw->toString->new->MissingFormatWidthException->checkBadFlags
Formatter.FormatSpecifier#checkDateTime()::: format specifier check date time:::if->throw->new->IllegalFormatPrecisionException->if->DateTime->isValid->throw->new->UnknownFormatConversionException->checkBadFlags->if->f->contains->throw->toString->new->MissingFormatWidthException
Formatter.FormatSpecifier#checkCharacter()::: format specifier check character:::if->throw->new->IllegalFormatPrecisionException->checkBadFlags->if->f->contains->throw->toString->new->MissingFormatWidthException
Formatter.FormatSpecifier#checkInteger()::: format specifier check integer:::checkNumeric->if->throw->new->IllegalFormatPrecisionException->if->checkBadFlags->else->if->checkBadFlags->else->checkBadFlags
Formatter.FormatSpecifier#checkBadFlags(Flags...)::: format specifier check bad flags:::foreach->if->f->contains->failMismatch
Formatter.FormatSpecifier#checkFloat()::: format specifier check float:::checkNumeric->if->else->if->checkBadFlags->else->if->checkBadFlags->else->if->checkBadFlags
Formatter.FormatSpecifier#checkNumeric()::: format specifier check numeric:::if->throw->new->IllegalFormatWidthException->if->throw->new->IllegalFormatPrecisionException->if->f->contains->f->contains->throw->toString->new->MissingFormatWidthException->if->f->contains->f->contains->f->contains->f->contains->throw->f->toString->new->IllegalFormatFlagsException
Formatter.FormatSpecifier#checkText()::: format specifier check text:::if->throw->new->IllegalFormatPrecisionException->switch->if->f->valueOf->valueOf->f->valueOf->valueOf->throw->f->toString->new->IllegalFormatFlagsException->if->f->contains->throw->toString->new->MissingFormatWidthException->break->if->throw->new->IllegalFormatWidthException->if->f->valueOf->valueOf->throw->f->toString->new->IllegalFormatFlagsException->break
Formatter.FormatSpecifier#print(byte, Locale)::: format specifier print:::v->if->print
Formatter.FormatSpecifier#print(short, Locale)::: format specifier print:::v->if->print
Formatter.FormatSpecifier#print(int, Locale)::: format specifier print:::v->if->print
Formatter.FormatSpecifier#print(long, Locale)::: format specifier print:::sb->new->StringBuilder->if->neg->valueStr->Long->toString->leadingSign->adjustWidth->localizedMagnitude->trailingSign->else->if->checkBadFlags->s->Long->toOctalString->len->f->contains->s->length->s->length->if->f->contains->sb->append->if->f->contains->trailingZeros->sb->append->else->if->checkBadFlags->s->Long->toHexString->len->f->contains->s->length->s->length->if->f->contains->sb->f->contains->append->if->f->contains->trailingZeros->if->f->contains->toUpperCaseWithLocale->sb->append->appendJustified
Formatter.FormatSpecifier#leadingSign(StringBuilder, boolean)::: format specifier leading sign:::if->if->f->contains->sb->append->else->if->f->contains->sb->append->else->if->f->contains->sb->append->else->sb->append->return
Formatter.FormatSpecifier#trailingSign(StringBuilder, boolean)::: format specifier trailing sign:::if->f->contains->sb->append->return
Formatter.FormatSpecifier#print(BigInteger, Locale)::: format specifier print:::sb->new->StringBuilder->neg->value->signum->v->value->abs->leadingSign->if->v->toString->adjustWidth->localizedMagnitude->else->if->s->v->toString->len->s->length->sb->length->if->f->contains->if->f->contains->sb->append->if->f->contains->trailingZeros->sb->append->else->if->s->v->toString->len->s->length->sb->length->if->f->contains->if->f->contains->sb->f->contains->append->if->f->contains->trailingZeros->if->f->contains->toUpperCaseWithLocale->sb->append->value->signum->trailingSign->appendJustified
Formatter.FormatSpecifier#print(float, Locale)::: format specifier print:::print
Formatter.FormatSpecifier#print(double, Locale)::: format specifier print:::sb->new->StringBuilder->neg->Double->compare->if->Double->isNaN->v->Math->abs->leadingSign->if->Double->isInfinite->print->else->sb->f->contains->append->trailingSign->else->sb->f->contains->append->appendJustified
Formatter.FormatSpecifier#print(StringBuilder, double, Locale, Flags, char, int, boolean)::: format specifier print:::if->prec->fd->FormattedFloatingDecimal->valueOf->mant->new->StringBuilder->fd->getMantissa->append->addZeros->if->f->contains->mant->append->exp->new->charArr->fd->getExponent->newW->if->adjustWidth->localizedMagnitude->sb->f->contains->append->sign->sb->append->localizedMagnitudeExp->else->if->prec->fd->FormattedFloatingDecimal->valueOf->mant->new->StringBuilder->fd->getMantissa->append->addZeros->if->f->contains->mant->append->newW->if->adjustWidth->localizedMagnitude->else->if->prec->if->else->if->exp->mant->new->StringBuilder->expRounded->if->mant->append->else->fd->FormattedFloatingDecimal->valueOf->fd->getExponent->mant->fd->getMantissa->append->fd->getExponentRounded->if->else->addZeros->if->f->contains->mant->append->newW->if->if->adjustWidth->else->adjustWidth->localizedMagnitude->if->sb->f->contains->append->sign->sb->append->localizedMagnitudeExp->else->if->prec->if->else->if->s->hexDouble->va->new->StringBuilder->upper->f->contains->sb->append->if->f->contains->s->length->trailingZeros->idx->s->indexOf->if->tmp->s->substring->tmp->toUpperCase->va->append->else->va->append->if->addZeros->sb->append->sb->append->sb->s->length->append
Formatter.FormatSpecifier#addZeros(StringBuilder, int)::: format specifier add zeros:::len->sb->length->i->for->needDot->if->outPrec->if->return->if->sb->append->trailingZeros
Formatter.FormatSpecifier#hexDouble(double, int)::: format specifier hex double:::if->Double->isFinite->return->Double->toHexString->substring->else->exponent->Math->getExponent->subnormal->if->Math->scalb->Math->getExponent->precision->shiftDistance->doppel->Double->doubleToLongBits->newSignif->roundingBits->leastZero->round->sticky->if->signBit->result->Double->longBitsToDouble->if->Double->isInfinite->return->else->res->Double->toHexString->substring->if->return->else->idx->res->indexOf->if->return->else->exp->res->substring->iexp->Integer->parseInt->return->res->substring->Integer->toString
Formatter.FormatSpecifier#print(BigDecimal, Locale)::: format specifier print:::if->failConversion->sb->new->StringBuilder->neg->value->signum->v->value->abs->leadingSign->print->trailingSign->appendJustified
Formatter.FormatSpecifier#print(StringBuilder, BigDecimal, Locale, Flags, char, int, boolean)::: format specifier print:::if->prec->scale->value->scale->origPrec->value->precision->nzeros->compPrec->if->else->mc->new->MathContext->v->value->unscaledValue->new->BigDecimal->bdl->v->unscaledValue->v->scale->new->BigDecimalLayout->mant->bdl->mantissa->if->bdl->hasDot->f->contains->mant->append->trailingZeros->exp->bdl->exponent->newW->if->exp->length->adjustWidth->localizedMagnitude->sb->f->contains->append->flags->f->dup->remove->sign->exp->charAt->sb->append->sb->localizedMagnitude->append->else->if->prec->scale->value->scale->if->compPrec->value->precision->if->value->setScale->else->value->unscaledValue->new->MathContext->new->BigDecimal->bdl->value->unscaledValue->value->scale->new->BigDecimalLayout->mant->bdl->mantissa->nzeros->bdl->scale->bdl->scale->if->bdl->scale->f->contains->mant->append->trailingZeros->adjustWidth->localizedMagnitude->else->if->prec->if->else->if->tenToTheNegFour->BigDecimal->valueOf->tenToThePrec->BigDecimal->valueOf->if->value->equals->value->compareTo->value->compareTo->e->value->scale->value->unscaledValue->toString->length->print->else->print->else->if
Formatter.FormatSpecifier.BigDecimalLayout#hasDot()::: big decimal layout has dot:::return
Formatter.FormatSpecifier.BigDecimalLayout#scale()::: big decimal layout scale:::return
Formatter.FormatSpecifier.BigDecimalLayout#mantissa()::: big decimal layout mantissa:::return
Formatter.FormatSpecifier.BigDecimalLayout#exponent()::: big decimal layout exponent:::return
Formatter.FormatSpecifier.BigDecimalLayout#layout(BigInteger, int, BigDecimalLayoutForm)::: big decimal layout layout:::coeff->intVal->toString->len->coeff->length->new->StringBuilder->if->if->mant->coeff->charAt->append->if->mant->append->mant->append->new->StringBuilder->if->exp->append->append->else->exp->append->else->mant->append->else->mant->append->if->new->StringBuilder->else->if->if->mant->append->trailingZeros->mant->append->else->if->pad->mant->append->mant->append->mant->append->else->mant->append->if->intVal->signum->trailingZeros->else->mant->coeff->charAt->append->if->mant->append->mant->append->new->StringBuilder->adjusted->if->abs->Math->abs->exp->append->if->exp->append->exp->append->else->exp->append
Formatter.FormatSpecifier#adjustWidth(int, Flags, boolean)::: format specifier adjust width:::newW->if->f->contains->return
Formatter.FormatSpecifier#trailingZeros(StringBuilder, int)::: format specifier trailing zeros:::for->i
Formatter.FormatSpecifier#print(Calendar, char, Locale)::: format specifier print:::sb->new->StringBuilder->print->if->f->contains->sb->toString->toUpperCaseWithLocale->appendJustified->else->appendJustified
Formatter.FormatSpecifier#print(StringBuilder, Calendar, char, Locale)::: format specifier print:::if->new->StringBuilder->switch->i->t->get->if->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->getTimeInMillis->flags->sb->localizedMagnitude->append->break->ampm->if->dfs->DateFormatSymbols->getInstance->dfs->getAmPmStrings->s->t->get->sb->s->Objects->Locale->getDefault->requireNonNullElse->toLowerCase->append->break->i->t->getTimeInMillis->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->get->t->get->neg->sb->append->if->min->offset->flags->sb->localizedMagnitude->append->break->tz->t->getTimeZone->sb->tz->t->get->Objects->requireNonNullElse->getDisplayName->append->break->i->t->get->lt->Objects->requireNonNullElse->dfs->DateFormatSymbols->getInstance->if->sb->dfs->getWeekdays->append->else->sb->dfs->getShortWeekdays->append->break->i->t->get->lt->Objects->requireNonNullElse->dfs->DateFormatSymbols->getInstance->if->sb->dfs->getMonths->append->else->sb->dfs->getShortMonths->append->break->i->t->get->size->switch->break->break->break->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->sep->print->append->print->if->sb->append->print->break->sep->print->append->print->append->print->append->tsb->new->StringBuilder->print->sb->tsb->toString->toUpperCaseWithLocale->append->break->sep->print->append->print->append->print->append->print->append->print->append->print->break->sep->print->append->print->append->print->break->sep->print->append->print->append->print->break->return
Formatter.FormatSpecifier#print(TemporalAccessor, char, Locale)::: format specifier print:::sb->new->StringBuilder->print->if->f->contains->sb->toString->toUpperCaseWithLocale->appendJustified->else->appendJustified
Formatter.FormatSpecifier#print(StringBuilder, TemporalAccessor, char, Locale)::: format specifier print:::if->new->StringBuilder->try->switch->i->t->get->sb->localizedMagnitude->append->break->i->t->get->sb->localizedMagnitude->append->break->i->t->get->sb->localizedMagnitude->append->break->i->t->get->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->try->t->get->catch->t->get->finally->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->getLong->t->getLong->flags->sb->localizedMagnitude->append->break->ampm->if->dfs->DateFormatSymbols->getInstance->dfs->getAmPmStrings->s->t->get->sb->s->Objects->Locale->getDefault->requireNonNullElse->toLowerCase->append->break->i->t->getLong->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->get->neg->sb->append->if->min->offset->flags->sb->localizedMagnitude->append->break->zid->t->TemporalQueries->zone->query->if->throw->t->getClass->new->IllegalFormatConversionException->if->t->isSupported->instant->Instant->from->sb->TimeZone->zid->getId->getTimeZone->zid->getRules->isDaylightSavings->Objects->requireNonNullElse->getDisplayName->append->break->sb->zid->getId->append->break->i->t->get->lt->Objects->requireNonNullElse->dfs->DateFormatSymbols->getInstance->if->sb->dfs->getWeekdays->append->else->sb->dfs->getShortWeekdays->append->break->i->t->get->lt->Objects->requireNonNullElse->dfs->DateFormatSymbols->getInstance->if->sb->dfs->getMonths->append->else->sb->dfs->getShortMonths->append->break->i->t->get->size->switch->break->break->break->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->i->t->get->flags->sb->localizedMagnitude->append->break->sep->print->append->print->if->sb->append->print->break->sep->print->append->print->append->print->append->tsb->new->StringBuilder->print->sb->tsb->toString->toUpperCaseWithLocale->append->break->sep->print->append->print->append->print->append->print->append->print->append->print->break->sep->print->append->print->append->print->break->sep->print->append->print->append->print->break->catch->throw->t->getClass->new->IllegalFormatConversionException->finally->return
Formatter.FormatSpecifier#failMismatch(Flags, char)::: format specifier fail mismatch:::fs->f->toString->throw->new->FormatFlagsConversionMismatchException
Formatter.FormatSpecifier#failConversion(char, Object)::: format specifier fail conversion:::throw->arg->getClass->new->IllegalFormatConversionException
Formatter.FormatSpecifier#getZero(Locale)::: format specifier get zero:::if->l->locale->equals->dfs->DecimalFormatSymbols->getInstance->return->dfs->getZeroDigit->return
Formatter.FormatSpecifier#localizedMagnitude(StringBuilder, long, Flags, int, Locale)::: format specifier localized magnitude:::return->Long->toString->localizedMagnitude
Formatter.FormatSpecifier#localizedMagnitude(StringBuilder, CharSequence, int, Flags, int, Locale)::: format specifier localized magnitude:::if->new->StringBuilder->begin->sb->length->zero->getZero->grpSep->grpSize->decSep->len->value->length->dot->for->j->if->if->l->equals->else->dfs->DecimalFormatSymbols->getInstance->dfs->getDecimalSeparator->if->f->contains->if->l->equals->else->dfs->DecimalFormatSymbols->getInstance->dfs->getGroupingSeparator->df->nf->NumberFormat->getNumberInstance->if->else->adapter->LocaleProviderAdapter->getAdapter->if->LocaleProviderAdapter->getResourceBundleBased->all->adapter->getLocaleResources->getNumberPatterns->new->DecimalFormat->df->getGroupingSize->if->df->isGroupingUsed->for->j->if->f->contains->for->k->sb->length->return
Formatter.FormatSpecifier#localizedMagnitudeExp(StringBuilder, char[], int, Locale)::: format specifier localized magnitude exp:::zero->getZero->len->for->j
Formatter.Flags#valueOf()::: flags value of:::return
Formatter.Flags#contains(Flags)::: flags contains:::return->f->valueOf->f->valueOf
Formatter.Flags#dup()::: flags dup:::return->new->Flags
Formatter.Flags#add(Flags)::: flags add:::f->valueOf->return
Formatter.Flags#remove(Flags)::: flags remove:::f->valueOf->return
Formatter.Flags#parse(String, int, int)::: flags parse:::f->new->Flags->for->i->return
Formatter.Flags#parse(char)::: flags parse:::switch->return->return->return->return->return->return->return->return->throw->String->valueOf->new->UnknownFormatFlagsException
Formatter.Flags#toString(Flags)::: flags to string:::return->f->toString
Formatter.Flags#toString()::: flags to string:::sb->new->StringBuilder->if->contains->sb->append->if->contains->sb->append->if->contains->sb->append->if->contains->sb->append->if->contains->sb->append->if->contains->sb->append->if->contains->sb->append->if->contains->sb->append->if->contains->sb->append->return->sb->toString
Formatter.Conversion#isValid(char)::: conversion is valid:::return->isGeneral->isInteger->isFloat->isText->isCharacter
Formatter.Conversion#isGeneral(char)::: conversion is general:::switch->return->return
Formatter.Conversion#isCharacter(char)::: conversion is character:::switch->return->return
Formatter.Conversion#isInteger(char)::: conversion is integer:::switch->return->return
Formatter.Conversion#isFloat(char)::: conversion is float:::switch->return->return
Formatter.Conversion#isText(char)::: conversion is text:::switch->return->return
Formatter.DateTime#isValid(char)::: date time is valid:::switch->return->return
GregorianCalendar#setGregorianChange(Date):::Sets the GregorianCalendar change date:::cutoverTime->date->getTime->if->return->complete->setGregorianChange
GregorianCalendar#setGregorianChange(long)::: gregorian calendar set gregorian change:::CalendarUtils->floorDivide->if->d->getGregorianCutoverDate->d->getYear->julianCal->getJulianCalendarSystem->julianCal->newCalendarDate->julianCal->getCalendarDateFromFixedDate->d->getNormalizedYear->if->setUnnormalized
GregorianCalendar#getGregorianChange():::Gets the Gregorian Calendar change date:::return->new->Date
GregorianCalendar#isLeapYear(int):::Determines if the given year is a leap year:::if->return->if->return->if->return->gregorian->if->d->getCalendarDate->d->getMonth->else->return
GregorianCalendar#getCalendarType():::Returns "gregory" as the calendar type.:::return
GregorianCalendar#equals(Object):::Compares this GregorianCalendar to the specified Object:::return->super->equals
GregorianCalendar#hashCode():::Generates the hash code for this GregorianCalendar object.:::return->super->hashCode
GregorianCalendar#add(int, int):::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules:::if->return->if->throw->new->IllegalArgumentException->complete->if->year->internalGet->if->internalGetEra->if->set->else->set->set->else->if->set->else->set->set->pinDayOfMonth->else->if->month->internalGet->year->internalGet->y_amount->if->else->if->if->internalGetEra->if->set->else->set->set->else->if->set->else->set->set->if->set->else->if->set->pinDayOfMonth->else->if->era->internalGet->if->if->set->else->delta->timeOfDay->switch->break->break->break->break->break->break->break->if->setTimeInMillis->return->fd->getCurrentFixedDate->internalGet->internalGet->internalGet->internalGet->if->else->if->zoneOffset->internalGet->internalGet->setTimeInMillis->internalGet->internalGet->if->setTimeInMillis->fd2->getCurrentFixedDate->if->setTimeInMillis
GregorianCalendar#roll(int, boolean):::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields:::roll
GregorianCalendar#roll(int, int):::Adds a signed amount to the specified calendar field without changing larger fields:::if->return->if->throw->new->IllegalArgumentException->complete->min->getMinimum->max->getMaximum->switch->break->rolledValue->internalGet->getRolledValue->hourOfDay->if->internalGet->d->calsys->getZone->getCalendarDate->d->setHours->calsys->getTime->if->internalGet->d->getHours->getRolledValue->if->internalGet->d->setHours->calsys->getTime->d->getHours->internalSet->internalSet->internalSet->zoneOffset->d->getZoneOffset->saving->d->getDaylightSaving->internalSet->internalSet->return->if->cdate->getNormalizedYear->isCutoverYear->mon->internalGet->if->set->monthLen->monthLength->if->internalGet->set->else->yearLength->getActualMaximum->mon->internalGet->if->set->monthLen->getActualMaximum->if->internalGet->set->return->y->cdate->getNormalizedYear->getActualMaximum->internalGet->set->woy->internalGet->value->if->isCutoverYear->weekYear->getWeekYear->if->if->set->return->fd->getCurrentFixedDate->day1->if->calsys->getYearFromFixedDate->internalGet->if->calsys->getYearFromFixedDate->else->if->if->else->if->getRolledValue->set->return->fd->getCurrentFixedDate->cal->if->getCutoverCalendarSystem->else->if->else->getJulianCalendarSystem->day1->if->cal->getYearFromFixedDate->getJulianCalendarSystem->if->cal->getYearFromFixedDate->getRolledValue->d->getCalendarDate->d->getMonth->set->d->getDayOfMonth->set->return->isCutoverYear->cdate->getNormalizedYear->isCutoverYear->dow->internalGet->getFirstDayOfWeek->if->fd->getCurrentFixedDate->month1->monthLength->if->getFixedDateMonth1->actualMonthLength->else->internalGet->calsys->getMonthLength->monthDay1st->BaseCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->getMinimalDaysInFirstWeek->getActualMaximum->value->internalGet->getRolledValue->nfd->if->else->if->dayOfMonth->if->d->getCalendarDate->d->getDayOfMonth->else->set->return->if->cdate->getNormalizedYear->isCutoverYear->calsys->getMonthLength->break->fd->getCurrentFixedDate->month1->getFixedDateMonth1->value->actualMonthLength->getRolledValue->d->getCalendarDate->d->getDayOfMonth->set->return->getActualMaximum->if->cdate->getNormalizedYear->isCutoverYear->break->fd->getCurrentFixedDate->jan1->internalGet->value->getRolledValue->d->getCalendarDate->d->getMonth->set->d->getDayOfMonth->set->return->if->cdate->getNormalizedYear->isCutoverYear->weekOfYear->internalGet->if->set->break->if->return->fd->getCurrentFixedDate->dowFirst->BaseCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->else->if->d->getCalendarDate->d->getNormalizedYear->set->d->getYear->d->getMonth->d->getDayOfMonth->set->return->if->cdate->getNormalizedYear->isCutoverYear->dom->internalGet->monthLength->calsys->getMonthLength->lastDays->x->if->internalGet->set->break->fd->getCurrentFixedDate->month1->getFixedDateMonth1->monthLength->actualMonthLength->lastDays->x->if->value->internalGet->getRolledValue->cal->getJulianCalendarSystem->d->cal->newCalendarDate->cal->getCalendarDateFromFixedDate->d->getDayOfMonth->set->return->internalGet->getRolledValue->set
GregorianCalendar#getMinimum(int):::Returns the minimum value for the given calendar field of this GregorianCalendar instance:::return
GregorianCalendar#getMaximum(int):::Returns the maximum value for the given calendar field of this GregorianCalendar instance:::switch->if->break->gc->clone->gc->setLenient->gc->setTimeInMillis->v1->gc->getActualMaximum->gc->setTimeInMillis->v2->gc->getActualMaximum->return->Math->Math->max->max->return
GregorianCalendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance:::if->d->getGregorianCutoverDate->mon1->getFixedDateMonth1->getCalendarDate->return->Math->d->getDayOfMonth->max->return
GregorianCalendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance:::switch->gc->clone->gc->setLenient->gc->setTimeInMillis->v1->gc->getActualMaximum->gc->setTimeInMillis->v2->gc->getActualMaximum->return->Math->Math->min->min->return
GregorianCalendar#getActualMinimum(int):::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods:::if->gc->getNormalizedCalendar->year->getNormalizedYear->if->month1->getFixedDate->getFixedDateMonth1->d->getCalendarDate->return->d->getDayOfMonth->return->getMinimum
GregorianCalendar#getActualMaximum(int):::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods:::fieldsForFixedMax->if->return->getMaximum->gc->getNormalizedCalendar->date->cal->normalizedYear->date->getNormalizedYear->value->switch->if->gc->isCutoverYear->break->nextJan1->do->gcal->getFixedDate->while->d->date->clone->cal->getCalendarDateFromFixedDate->d->getMonth->break->cal->getMonthLength->if->gc->isCutoverYear->date->getDayOfMonth->break->fd->gc->getCurrentFixedDate->if->break->monthLength->gc->actualMonthLength->monthEnd->gc->getFixedDateMonth1->d->gc->getCalendarDate->d->getDayOfMonth->break->if->gc->isCutoverYear->cal->getYearLength->break->jan1->if->cocal->gc->getCutoverCalendarSystem->cocal->getFixedDate->else->if->cal->getFixedDate->else->nextJan1->gcal->getFixedDate->if->break->if->gc->isCutoverYear->d->cal->newCalendarDate->d->date->getYear->setDate->dayOfWeek->cal->getDayOfWeek->getFirstDayOfWeek->if->magic->getMinimalDaysInFirstWeek->if->date->isLeapYear->break->if->gc->clone->maxDayOfYear->getActualMaximum->gc->set->gc->get->if->internalGet->gc->getWeekYear->gc->set->gc->get->break->if->gc->isCutoverYear->d->cal->newCalendarDate->d->date->getYear->date->getMonth->setDate->dayOfWeek->cal->getDayOfWeek->monthLength->cal->getMonthLength->getFirstDayOfWeek->if->nDaysFirstWeek->if->getMinimalDaysInFirstWeek->if->if->break->if->gc->clone->y->gc->internalGet->m->gc->internalGet->do->gc->get->gc->add->while->gc->get->gc->get->break->ndays->dow1->dow->date->getDayOfWeek->if->gc->isCutoverYear->d->date->clone->cal->getMonthLength->d->setDayOfMonth->cal->normalize->d->getDayOfWeek->else->if->clone->gc->actualMonthLength->gc->gc->getActualMinimum->set->gc->get->x->if->break->if->clone->current->gc->getYearOffsetInMillis->if->gc->internalGetEra->gc->setTimeInMillis->gc->get->maxEnd->gc->getYearOffsetInMillis->if->else->mincal->gc->getTimeInMillis->getJulianCalendarSystem->d->mincal->getZone->getCalendarDate->maxEnd->cal->getDayOfYear->d->getHours->d->getMinutes->d->getSeconds->d->getMillis->d->getYear->if->if->break->throw->new->ArrayIndexOutOfBoundsException->return
GregorianCalendar#getYearOffsetInMillis():::Returns the millisecond offset from the beginning of this year:::t->internalGet->internalGet->internalGet->internalGet->return->internalGet->internalGet->internalGet
GregorianCalendar#clone()::: gregorian calendar clone:::other->super->clone->gdate->clone->if->if->cdate->clone->else->return
GregorianCalendar#getTimeZone()::: gregorian calendar get time zone:::zone->super->getTimeZone->gdate->setZone->if->cdate->setZone->return
GregorianCalendar#setTimeZone(TimeZone)::: gregorian calendar set time zone:::super->setTimeZone->gdate->setZone->if->cdate->setZone
GregorianCalendar#isWeekDateSupported():::Returns true indicating this GregorianCalendar supports week dates.:::return
GregorianCalendar#getWeekYear():::Returns the week year represented by this GregorianCalendar:::year->get->if->internalGetEra->if->weekOfYear->internalGet->if->internalGet->if->else->if->return->dayOfYear->internalGet->maxDayOfYear->getActualMaximum->minimalDays->getMinimalDaysInFirstWeek->if->return->cal->clone->cal->setLenient->cal->TimeZone->getTimeZone->setTimeZone->cal->set->cal->complete->delta->getFirstDayOfWeek->cal->get->if->if->cal->add->minDayOfYear->cal->get->if->if->else->cal->set->cal->set->cal->complete->del->getFirstDayOfWeek->cal->get->if->if->cal->add->cal->get->if->if->days->if->return
GregorianCalendar#setWeekDate(int, int, int):::Sets this GregorianCalendar to the date given by the date specifiers - weekYear, weekOfYear, and dayOfWeek:::if->throw->new->IllegalArgumentException->gc->clone->gc->setLenient->era->gc->get->gc->clear->gc->TimeZone->getTimeZone->setTimeZone->gc->set->gc->set->gc->set->gc->getFirstDayOfWeek->set->days->getFirstDayOfWeek->if->if->gc->add->else->gc->complete->if->isLenient->gc->getWeekYear->gc->internalGet->gc->internalGet->throw->new->IllegalArgumentException->gc->internalGet->set->gc->internalGet->set->gc->internalGet->set->gc->internalGet->set->internalSet->complete
GregorianCalendar#getWeeksInWeekYear():::Returns the number of weeks in the week year represented by this GregorianCalendar:::gc->getNormalizedCalendar->weekYear->gc->getWeekYear->if->gc->internalGet->return->gc->getActualMaximum->if->gc->clone->gc->internalGet->setWeekDate->return->gc->getActualMaximum
GregorianCalendar#computeFields():::Converts the time value (millisecond offset from the Epoch) to calendar field values:::mask->if->isPartiallyNormalized->getSetStateFields->fieldMask->if->computeFields->else->computeFields->setFieldsComputed
GregorianCalendar#computeFields(int, int):::This computeFields implements the conversion from UTC (millisecond offset from the Epoch) to calendar field values:::zoneOffset->tz->getZone->if->new->intArr->if->if->getOffsets->else->tz->getOffset->tz->getRawOffset->if->if->isFieldSet->internalGet->if->isFieldSet->internalGet->fixedDate->timeOfDay->if->else->while->era->year->if->if->gcal->getCalendarDateFromFixedDate->gdate->getYear->if->else->getJulianCalendarSystem->jcal->getZone->newCalendarDate->jcal->getCalendarDateFromFixedDate->e->cdate->getEra->if->cdate->getYear->internalSet->internalSet->mask->month->cdate->getMonth->dayOfMonth->cdate->getDayOfMonth->if->internalSet->internalSet->cdate->getDayOfWeek->internalSet->if->if->hours->internalSet->internalSet->internalSet->r->internalSet->internalSet->internalSet->else->internalSet->internalSet->internalSet->internalSet->internalSet->internalSet->if->internalSet->internalSet->if->normalizedYear->cdate->getNormalizedYear->fixedDateJan1->calsys->getFixedDate->dayOfYear->fixedDateMonth1->cutoverGap->cutoverYear->relativeDayOfMonth->if->if->getFixedDateJan1->if->getFixedDateMonth1->realDayOfYear->internalSet->internalSet->weekOfYear->getWeekNumber->if->fixedDec31->prevJan1->if->if->CalendarUtils->isGregorianLeapYear->else->if->if->CalendarUtils->isJulianLeapYear->else->calForJan1->prevYear->getCalendarDate->getNormalizedYear->if->getCutoverCalendarSystem->if->calForJan1->getFixedDate->else->else->if->getJulianCalendarSystem->calForJan1->getFixedDate->getWeekNumber->else->if->if->nextJan1->if->cdate->isLeapYear->nextJan1st->BaseCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->ndays->if->getMinimalDaysInFirstWeek->else->calForJan1->nextYear->if->if->getCutoverCalendarSystem->nextJan1->if->calForJan1->getFixedDate->else->nextJan1st->BaseCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->ndays->if->getMinimalDaysInFirstWeek->internalSet->getWeekNumber->internalSet->return
GregorianCalendar#getWeekNumber(long, long):::Returns the number of weeks in a period between fixedDay1 and fixedDate:::fixedDay1st->Gregorian->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->ndays->if->getMinimalDaysInFirstWeek->normalizedDayOfPeriod->if->return->return->CalendarUtils->floorDivide
GregorianCalendar#computeTime():::Converts calendar field values to the time value (millisecond offset from the Epoch).:::if->isLenient->if->new->intArr->for->field->fieldMask->selectFields->year->isSet->internalGet->era->internalGetEra->if->else->if->throw->new->IllegalArgumentException->if->isSet->setFieldsComputed->timeOfDay->if->isFieldSet->internalGet->else->internalGet->if->isFieldSet->internalGet->internalGet->internalGet->internalGet->fixedDate->while->gfd->jfd->if->getFixedDate->if->break->getJulianCalendarSystem->getFixedDate->else->if->getJulianCalendarSystem->getFixedDate->if->break->else->getJulianCalendarSystem->getFixedDate->getFixedDate->if->isFieldSet->isFieldSet->if->break->else->if->break->if->if->else->if->else->else->if->else->if->isLenient->throw->new->IllegalArgumentException->millis->zone->getZone->if->new->intArr->tzMask->if->if->getOffsetsByWall->else->gmtOffset->isFieldSet->internalGet->zone->getRawOffset->zone->getOffsets->if->if->isFieldSet->internalGet->if->isFieldSet->internalGet->mask->getSetStateFields->computeFields->if->isLenient->for->field->setFieldsNormalized
GregorianCalendar#getFixedDate(BaseCalendar, int, int):::Computes the fixed date under either the Gregorian or the Julian calendar, using the given year and the specified calendar fields.:::month->if->isFieldSet->internalGet->if->else->if->rem->new->intArr->CalendarUtils->floorDivide->fixedDate->cal->getFixedDate->if->isFieldSet->if->isFieldSet->if->isSet->internalGet->else->if->isFieldSet->firstDayOfWeek->BaseCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->getMinimalDaysInFirstWeek->if->isFieldSet->BaseCalendar->internalGet->getDayOfWeekDateOnOrBefore->internalGet->else->dayOfWeek->if->isFieldSet->internalGet->else->getFirstDayOfWeek->dowim->if->isFieldSet->internalGet->else->if->BaseCalendar->getDayOfWeekDateOnOrBefore->else->lastDate->monthLength->BaseCalendar->getDayOfWeekDateOnOrBefore->else->if->if->isFieldSet->internalGet->else->firstDayOfWeek->BaseCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->getMinimalDaysInFirstWeek->if->isFieldSet->dayOfWeek->internalGet->if->getFirstDayOfWeek->BaseCalendar->getDayOfWeekDateOnOrBefore->internalGet->return
GregorianCalendar#getNormalizedCalendar():::Returns this object if it's normalized (all fields and time are in sync):::gc->if->isFullyNormalized->else->this->clone->gc->setLenient->gc->complete->return
GregorianCalendar#getJulianCalendarSystem():::Returns the Julian calendar system instance (singleton):::if->CalendarSystem->forName->jcal->getEras->return
GregorianCalendar#getCutoverCalendarSystem():::Returns the calendar system for dates before the cutover date in the cutover year:::if->return->return->getJulianCalendarSystem
GregorianCalendar#isCutoverYear(int):::Determines if the specified year (normalized) is the Gregorian cutover year:::cutoverYear->return
GregorianCalendar#getFixedDateJan1(BaseCalendar.Date, long):::Returns the fixed date of the first day of the year (usually January 1) before the specified date.:::if->if->return->juliancal->getJulianCalendarSystem->return->juliancal->date->getNormalizedYear->getFixedDate
GregorianCalendar#getFixedDateMonth1(BaseCalendar.Date, long):::Returns the fixed date of the first date of the month (usually the 1st of the month) before the specified date.:::gCutover->getGregorianCutoverDate->if->gCutover->getMonth->gCutover->getDayOfMonth->return->date->getDayOfMonth->fixedDateMonth1->if->date->getMonth->gCutover->getMonth->jLastDate->getLastJulianDate->if->gCutover->getMonth->jLastDate->getMonth->jcal->date->getNormalizedYear->date->getMonth->getFixedDate->else->else->date->getDayOfMonth->return
GregorianCalendar#getCalendarDate(long):::Returns a CalendarDate produced from the specified fixed date.:::cal->getJulianCalendarSystem->d->cal->newCalendarDate->cal->getCalendarDateFromFixedDate->return
GregorianCalendar#getGregorianCutoverDate():::Returns the Gregorian cutover date as a BaseCalendar.Date:::return->getCalendarDate
GregorianCalendar#getLastJulianDate():::Returns the day before the Gregorian cutover date as a BaseCalendar.Date:::return->getCalendarDate
GregorianCalendar#monthLength(int, int):::Returns the length of the specified month in the specified year:::return->isLeapYear
GregorianCalendar#monthLength(int):::Returns the length of the specified month in the year provided by internalGet(YEAR).:::year->internalGet->if->internalGetEra->return->monthLength
GregorianCalendar#actualMonthLength()::: gregorian calendar actual month length:::year->cdate->getNormalizedYear->if->return->calsys->getMonthLength->date->cdate->clone->fd->calsys->getFixedDate->month1->getFixedDateMonth1->next1->calsys->getMonthLength->if->return->if->gcal->newCalendarDate->gcal->getCalendarDateFromFixedDate->getFixedDateMonth1->return
GregorianCalendar#yearLength(int):::Returns the length (in days) of the specified year:::return->isLeapYear
GregorianCalendar#yearLength():::Returns the length (in days) of the year provided by internalGet(YEAR).:::year->internalGet->if->internalGetEra->return->yearLength
GregorianCalendar#pinDayOfMonth():::After adjustments such as add(MONTH), add(YEAR), we don't want the month to jump around:::year->internalGet->monthLen->if->internalGet->monthLength->else->gc->getNormalizedCalendar->gc->getActualMaximum->dom->internalGet->if->set
GregorianCalendar#getCurrentFixedDate():::Returns the fixed date value of this object:::return->calsys->getFixedDate
GregorianCalendar#getRolledValue(int, int, int, int):::Returns the new value after 'roll'ing the specified value and amount.:::range->n->if->else->if->return
GregorianCalendar#internalGetEra():::Returns the ERA:::return->isSet->internalGet
GregorianCalendar#readObject(ObjectInputStream):::Updates internal state.:::stream->defaultReadObject->if->gcal->getZone->newCalendarDate->setGregorianChange
GregorianCalendar#toZonedDateTime():::Converts this object to a ZonedDateTime that represents the same point on the time-line as this GregorianCalendar:::return->ZonedDateTime->Instant->getTimeInMillis->ofEpochMilli->getTimeZone->toZoneId->ofInstant
GregorianCalendar#from(ZonedDateTime):::Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object:::cal->TimeZone->zdt->getZone->getTimeZone->new->GregorianCalendar->cal->new->Date->setGregorianChange->cal->setFirstDayOfWeek->cal->setMinimalDaysInFirstWeek->try->cal->Math->Math->zdt->toEpochSecond->multiplyExact->zdt->get->addExact->setTimeInMillis->catch->throw->new->IllegalArgumentException->finally->return
HashMap.Node#getKey()::: node get key:::return
HashMap.Node#getValue()::: node get value:::return
HashMap.Node#toString()::: node to string:::return
HashMap.Node#hashCode()::: node hash code:::return->Objects->hashCode->Objects->hashCode
HashMap.Node#setValue(V)::: node set value:::oldValue->return
HashMap.Node#equals(Object)::: node equals:::if->return->if->e->if->Objects->e->getKey->equals->Objects->e->getValue->equals->return->return
HashMap#hash(Object):::Computes key.hashCode() and spreads (XORs) higher bits of hash to lower:::h->return->key->hashCode
HashMap#comparableClassFor(Object):::Returns x's Class if it is of the form "class C implements Comparable<C>", else null.:::if->c->ts->as->p->if->x->getClass->return->if->c->getGenericInterfaces->foreach->if->getRawType->p->getActualTypeArguments->return->return
HashMap#compareComparables(Class, Object, Object):::Returns k.compareTo(x) if x matches kc (k's screened comparable class), else 0.:::return->x->getClass->compareTo
HashMap#tableSizeFor(int):::Returns a power of two size for the given target capacity.:::n->Integer->numberOfLeadingZeros->return
HashMap#putMapEntries(Map, boolean):::Implements Map.putAll and Map constructor.:::s->m->size->if->if->ft->t->if->tableSizeFor->else->if->resize->foreach->m->entrySet->key->e->getKey->value->e->getValue->hash->putVal
HashMap#size():::Returns the number of key-value mappings in this map.:::return
HashMap#isEmpty():::Returns true if this map contains no key-value mappings.:::return
HashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::e->return->hash->getNode
HashMap#getNode(int, Object):::Implements Map.get and related methods.:::tab->first->e->n->k->if->if->key->equals->return->if->if->return->getTreeNode->do->if->key->equals->return->while->return
HashMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.:::return->hash->getNode
HashMap#put(K, V):::Associates the specified value with the specified key in this map:::return->hash->putVal
HashMap#putVal(int, K, V, boolean, boolean):::Implements Map.put and related methods.:::tab->p->n->i->if->resize->if->newNode->else->e->k->if->key->equals->else->if->putTreeVal->else->for->binCount->if->oldValue->if->afterNodeAccess->return->if->resize->afterNodeInsertion->return
HashMap#resize():::Initializes or doubles table size:::oldTab->oldCap->oldThr->newCap->newThr->if->if->return->else->if->else->if->else->if->ft->newTab->new->NodeArr->if->for->j->return
HashMap#treeifyBin(Node[], int):::Replaces all linked nodes in bin at index for given hash unless table is too small, in which case resizes instead.:::n->index->e->if->resize->else->if->hd->tl->do->p->replacementTreeNode->if->else->while->if->hd->treeify
HashMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::putMapEntries
HashMap#remove(Object):::Removes the mapping for the specified key from this map if present.:::e->return->hash->removeNode
HashMap#removeNode(int, Object, Object, boolean, boolean):::Implements Map.remove and related methods.:::tab->p->n->index->if->node->e->k->v->if->key->equals->else->if->if->getTreeNode->else->do->if->key->equals->break->while->if->value->equals->if->removeTreeNode->else->if->else->afterNodeRemoval->return->return
HashMap#clear():::Removes all of the mappings from this map:::tab->if->for->i
HashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.:::tab->v->if->foreach->for->return
HashMap#keySet():::Returns a Set view of the keys contained in this map:::ks->if->new->KeySet->return
HashMap.KeySet#size()::: key set size:::return
HashMap.KeySet#clear()::: key set clear:::HashMap.this->clear
HashMap.KeySet#iterator()::: key set iterator:::return->new->KeyIterator
HashMap.KeySet#contains(Object)::: key set contains:::return->containsKey
HashMap.KeySet#remove(Object)::: key set remove:::return->hash->removeNode
HashMap.KeySet#spliterator()::: key set spliterator:::return->new->KeySpliterator<>
HashMap.KeySet#forEach(Consumer)::: key set for each:::tab->if->throw->new->NullPointerException->if->mc->foreach->for->if->throw->new->ConcurrentModificationException
HashMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
HashMap.Values#size()::: values size:::return
HashMap.Values#clear()::: values clear:::HashMap.this->clear
HashMap.Values#iterator()::: values iterator:::return->new->ValueIterator
HashMap.Values#contains(Object)::: values contains:::return->containsValue
HashMap.Values#spliterator()::: values spliterator:::return->new->ValueSpliterator<>
HashMap.Values#forEach(Consumer)::: values for each:::tab->if->throw->new->NullPointerException->if->mc->foreach->for->if->throw->new->ConcurrentModificationException
HashMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->return->new->EntrySet
HashMap.EntrySet#size()::: entry set size:::return
HashMap.EntrySet#clear()::: entry set clear:::HashMap.this->clear
HashMap.EntrySet#iterator()::: entry set iterator:::return->new->EntryIterator
HashMap.EntrySet#contains(Object)::: entry set contains:::if->return->e->key->e->getKey->candidate->hash->getNode->return->candidate->equals
HashMap.EntrySet#remove(Object)::: entry set remove:::if->e->key->e->getKey->value->e->getValue->return->hash->removeNode->return
HashMap.EntrySet#spliterator()::: entry set spliterator:::return->new->EntrySpliterator<>
HashMap.EntrySet#forEach(Consumer>)::: entry set for each:::tab->if->throw->new->NullPointerException->if->mc->foreach->for->if->throw->new->ConcurrentModificationException
HashMap#getOrDefault(Object, V)::: hash map get or default:::e->return->hash->getNode
HashMap#putIfAbsent(K, V)::: hash map put if absent:::return->hash->putVal
HashMap#remove(Object, Object)::: hash map remove:::return->hash->removeNode
HashMap#replace(K, V, V)::: hash map replace:::e->v->if->hash->getNode->v->equals->afterNodeAccess->return->return
HashMap#replace(K, V)::: hash map replace:::e->if->hash->getNode->oldValue->afterNodeAccess->return->return
HashMap#computeIfAbsent(K, Function):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the mapping function modifies this map during computation.:::if->throw->new->NullPointerException->hash->hash->tab->first->n->i->binCount->t->old->if->resize->if->if->getTreeNode->else->e->k->do->if->key->equals->break->while->oldValue->if->afterNodeAccess->return->mc->v->mappingFunction->apply->if->throw->new->ConcurrentModificationException->if->return->else->if->afterNodeAccess->return->else->if->t->putTreeVal->else->newNode->if->treeifyBin->afterNodeInsertion->return
HashMap#computeIfPresent(K, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.:::if->throw->new->NullPointerException->e->oldValue->hash->hash->if->getNode->mc->v->remappingFunction->apply->if->throw->new->ConcurrentModificationException->if->afterNodeAccess->return->else->removeNode->return
HashMap#compute(K, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.:::if->throw->new->NullPointerException->hash->hash->tab->first->n->i->binCount->t->old->if->resize->if->if->getTreeNode->else->e->k->do->if->key->equals->break->while->oldValue->mc->v->remappingFunction->apply->if->throw->new->ConcurrentModificationException->if->if->afterNodeAccess->else->removeNode->else->if->if->t->putTreeVal->else->newNode->if->treeifyBin->afterNodeInsertion->return
HashMap#merge(K, V, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->hash->hash->tab->first->n->i->binCount->t->old->if->resize->if->if->getTreeNode->else->e->k->do->if->key->equals->break->while->if->v->if->mc->remappingFunction->apply->if->throw->new->ConcurrentModificationException->else->if->afterNodeAccess->else->removeNode->return->if->if->t->putTreeVal->else->newNode->if->treeifyBin->afterNodeInsertion->return
HashMap#forEach(BiConsumer)::: hash map for each:::tab->if->throw->new->NullPointerException->if->mc->foreach->for->if->throw->new->ConcurrentModificationException
HashMap#replaceAll(BiFunction)::: hash map replace all:::tab->if->throw->new->NullPointerException->if->mc->foreach->for->if->throw->new->ConcurrentModificationException
HashMap#clone():::Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned.:::result->try->super->clone->catch->throw->new->InternalError->finally->result->reinitialize->result->putMapEntries->return
HashMap#loadFactor()::: hash map load factor:::return
HashMap#capacity()::: hash map capacity:::return
HashMap#writeObject(java.io.ObjectOutputStream):::Saves this map to a stream (that is, serializes it).:::buckets->capacity->s->defaultWriteObject->s->writeInt->s->writeInt->internalWriteEntries
HashMap#readObject(java.io.ObjectInputStream):::Reconstitutes this map from a stream (that is, deserializes it).:::s->defaultReadObject->reinitialize->if->Float->isNaN->throw->new->InvalidObjectException->s->readInt->mappings->s->readInt->if->throw->new->InvalidObjectException->else->if->lf->Math->Math->max->min->fc->cap->tableSizeFor->ft->SharedSecrets->getJavaObjectInputStreamAccess->checkArray->tab->new->NodeArr->for->i
HashMap.HashIterator#hasNext()::: hash iterator has next:::return
HashMap.HashIterator#nextNode()::: hash iterator next node:::t->e->if->throw->new->ConcurrentModificationException->if->throw->new->NoSuchElementException->if->do->while->return
HashMap.HashIterator#remove()::: hash iterator remove:::p->if->throw->new->IllegalStateException->if->throw->new->ConcurrentModificationException->removeNode
HashMap.KeyIterator#next()::: key iterator next:::return->nextNode
HashMap.ValueIterator#next()::: value iterator next:::return->nextNode
HashMap.EntryIterator#next()::: entry iterator next:::return->nextNode
HashMap.HashMapSpliterator#getFence()::: hash map spliterator get fence:::hi->if->m->tab->return
HashMap.HashMapSpliterator#estimateSize()::: hash map spliterator estimate size:::getFence->return
HashMap.KeySpliterator#trySplit()::: key spliterator try split:::hi->getFence->lo->mid->return->new->KeySpliterator<>
HashMap.KeySpliterator#forEachRemaining(Consumer)::: key spliterator for each remaining:::i->hi->mc->if->throw->new->NullPointerException->m->tab->if->else->if->p->do->if->else->action->accept->while->if->throw->new->ConcurrentModificationException
HashMap.KeySpliterator#tryAdvance(Consumer)::: key spliterator try advance:::hi->if->throw->new->NullPointerException->tab->if->getFence->while->if->else->k->action->accept->if->throw->new->ConcurrentModificationException->return->return
HashMap.KeySpliterator#characteristics()::: key spliterator characteristics:::return
HashMap.ValueSpliterator#trySplit()::: value spliterator try split:::hi->getFence->lo->mid->return->new->ValueSpliterator<>
HashMap.ValueSpliterator#forEachRemaining(Consumer)::: value spliterator for each remaining:::i->hi->mc->if->throw->new->NullPointerException->m->tab->if->else->if->p->do->if->else->action->accept->while->if->throw->new->ConcurrentModificationException
HashMap.ValueSpliterator#tryAdvance(Consumer)::: value spliterator try advance:::hi->if->throw->new->NullPointerException->tab->if->getFence->while->if->else->v->action->accept->if->throw->new->ConcurrentModificationException->return->return
HashMap.ValueSpliterator#characteristics()::: value spliterator characteristics:::return
HashMap.EntrySpliterator#trySpliterator trySplit()::: entry spliterator try split:::hi->getFence->lo->mid->return->new->EntrySpliterator<>
HashMap.EntrySpliterator#forEachRemaining(Consumer>)::: entry spliterator for each remaining:::i->hi->mc->if->throw->new->NullPointerException->m->tab->if->else->if->p->do->if->else->action->accept->while->if->throw->new->ConcurrentModificationException
HashMap.EntrySpliterator#tryAdvance(Consumer>)::: entry spliterator try advance:::hi->if->throw->new->NullPointerException->tab->if->getFence->while->if->else->e->action->accept->if->throw->new->ConcurrentModificationException->return->return
HashMap.EntrySpliterator#characteristics()::: entry spliterator characteristics:::return
HashMap#newNode(int, K, V, Node)::: hash map new node:::return->new->Node<>
HashMap#replacementNode(Node, Node)::: hash map replacement node:::return->new->Node<>
HashMap#newTreeNode(int, K, V, Node)::: hash map new tree node:::return->new->TreeNode<>
HashMap#replacementTreeNode(Node, Node)::: hash map replacement tree node:::return->new->TreeNode<>
HashMap#reinitialize():::Reset to initial default state:::
HashMap#afterNodeAccess(Node)::: hash map after node access:::
HashMap#afterNodeInsertion(boolean)::: hash map after node insertion:::
HashMap#afterNodeRemoval(Node)::: hash map after node removal:::
HashMap#internalWriteEntries(java.io.ObjectOutputStream)::: hash map internal write entries:::tab->if->foreach->for
HashMap.TreeNode#root():::Returns root of tree containing this node.:::for->r->p
HashMap.TreeNode#moveRootToFront(Node[], TreeNode):::Ensures that the given root is the first node of its bin.:::n->if->index->first->if->rn->rp->if->if->if
HashMap.TreeNode#find(int, Object, Class):::Finds the node starting at root p with the given hash and key:::p->do->ph->dir->pk->pl->pr->q->if->else->if->else->if->k->equals->return->else->if->else->if->else->if->comparableClassFor->compareComparables->else->if->pr->find->return->else->while->return
HashMap.TreeNode#getTreeNode(int, Object):::Calls find for root node.:::return->root->find
HashMap.TreeNode#tieBreakOrder(Object, Object):::Tie-breaking utility for ordering insertions when equal hashCodes and non-comparable:::d->if->a->getClass->getName->b->getClass->getName->compareTo->System->identityHashCode->System->identityHashCode->return
HashMap.TreeNode#treeify(Node[]):::Forms tree of the nodes linked from this node.:::root->for->x->next->moveRootToFront
HashMap.TreeNode#untreeify(HashMap):::Returns a list of non-TreeNodes replacing those linked from this node.:::hd->tl->for->q->return
HashMap.TreeNode#putTreeVal(HashMap, Node[], int, K, V):::Tree version of putVal.:::kc->searched->root->root->for->p
HashMap.TreeNode#removeTreeNode(HashMap, Node[], boolean):::Removes the given node, that must be present before this call:::n->if->return->index->first->root->rl->succ->pred->if->else->if->if->return->if->root->root->if->first->untreeify->return->p->pl->pr->replacement->if->s->sl->while->c->sr->pp->if->else->sp->if->if->else->if->if->if->if->else->if->else->if->else->else->if->else->if->else->if->pp->if->else->if->else->r->balanceDeletion->if->pp->if->if->else->if->if->moveRootToFront
HashMap.TreeNode#split(HashMap, Node[], int, int):::Splits nodes in a tree bin into lower and upper tree bins, or untreeifies if now too small:::b->loHead->loTail->hiHead->hiTail->lc->hc->for->e->next->if->if->loHead->untreeify->else->if->loHead->treeify->if->if->hiHead->untreeify->else->if->hiHead->treeify
HashMap.TreeNode#rotateLeft(TreeNode, TreeNode)::: tree node rotate left:::r->pp->rl->if->if->if->else->if->else->return
HashMap.TreeNode#rotateRight(TreeNode, TreeNode)::: tree node rotate right:::l->pp->lr->if->if->if->else->if->else->return
HashMap.TreeNode#balanceInsertion(TreeNode, TreeNode)::: tree node balance insertion:::for->xp->xpp->xppl->xppr
HashMap.TreeNode#balanceDeletion(TreeNode, TreeNode)::: tree node balance deletion:::for->xp->xpl->xpr
HashMap.TreeNode#checkInvariants(TreeNode):::Recursive invariant check:::tp->tl->tr->tb->tn->if->return->if->return->if->return->if->return->if->return->if->return->if->checkInvariants->return->if->checkInvariants->return->return
HashSet#iterator():::Returns an iterator over the elements in this set:::return->map->keySet->iterator
HashSet#size():::Returns the number of elements in this set (its cardinality).:::return->map->size
HashSet#isEmpty():::Returns true if this set contains no elements.:::return->map->isEmpty
HashSet#contains(Object):::Returns true if this set contains the specified element:::return->map->containsKey
HashSet#add(E):::Adds the specified element to this set if it is not already present:::return->map->put
HashSet#remove(Object):::Removes the specified element from this set if it is present:::return->map->remove
HashSet#clear():::Removes all of the elements from this set:::map->clear
HashSet#clone():::Returns a shallow copy of this HashSet instance: the elements themselves are not cloned.:::try->newSet->super->clone->map->clone->return->catch->throw->new->InternalError->finally
HashSet#writeObject(java.io.ObjectOutputStream):::Save the state of this HashSet instance to a stream (that is, serialize it).:::s->defaultWriteObject->s->map->capacity->writeInt->s->map->loadFactor->writeFloat->s->map->size->writeInt->foreach->map->keySet->s->writeObject
HashSet#readObject(java.io.ObjectInputStream):::Reconstitute the HashSet instance from a stream (that is, deserialize it).:::s->defaultReadObject->capacity->s->readInt->if->throw->new->InvalidObjectException->loadFactor->s->readFloat->if->Float->isNaN->throw->new->InvalidObjectException->size->s->readInt->if->throw->new->InvalidObjectException->Math->Math->min->min->SharedSecrets->getJavaObjectInputStreamAccess->HashMap->tableSizeFor->checkArray->new->LinkedHashMap<>->new->HashMap<>->for->i
HashSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set:::return->new->HashMap.KeySpliterator<>
Hashtable#size():::Returns the number of keys in this hashtable.:::return
Hashtable#isEmpty():::Tests if this hashtable maps no keys to values.:::return
Hashtable#keys():::Returns an enumeration of the keys in this hashtable:::return->this->getEnumeration
Hashtable#elements():::Returns an enumeration of the values in this hashtable:::return->this->getEnumeration
Hashtable#contains(Object):::Tests if some key maps into the specified value in this hashtable:::if->throw->new->NullPointerException->tab->for->i->return
Hashtable#containsValue(Object):::Returns true if this hashtable maps one or more keys to this value:::return->contains
Hashtable#containsKey(Object):::Tests if the specified object is a key in this hashtable.:::tab->hash->key->hashCode->index->for->e->return
Hashtable#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::tab->hash->key->hashCode->index->for->e->return
Hashtable#rehash():::Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently:::oldCapacity->oldMap->newCapacity->if->if->return->newMap->new->Entry<?,?>Arr->Math->min->for->i
Hashtable#addEntry(int, K, V, int)::: hashtable add entry:::tab->if->rehash->key->hashCode->e->new->Entry<>
Hashtable#put(K, V):::Maps the specified key to the specified value in this hashtable:::if->throw->new->NullPointerException->tab->hash->key->hashCode->index->entry->for->addEntry->return
Hashtable#remove(Object):::Removes the key (and its corresponding value) from this hashtable:::tab->hash->key->hashCode->index->e->for->prev->return
Hashtable#putAll(Map):::Copies all of the mappings from the specified map to this hashtable:::foreach->t->entrySet->e->getKey->e->getValue->put
Hashtable#clear():::Clears this hashtable so that it contains no keys.:::tab->for->index
Hashtable#clone():::Creates a shallow copy of this hashtable:::t->cloneHashtable->new->Entry<?,?>Arr->for->i->return
Hashtable#cloneHashtable():::Calls super.clone():::try->return->super->clone->catch->throw->new->InternalError->finally
Hashtable#toString():::Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters " , " (comma and space):::max->size->if->return->sb->new->StringBuilder->it->entrySet->iterator->sb->append->for->i
Hashtable#getEnumeration(int)::: hashtable get enumeration:::if->return->Collections->emptyEnumeration->else->return->new->Enumerator<>
Hashtable#getIterator(int)::: hashtable get iterator:::if->return->Collections->emptyIterator->else->return->new->Enumerator<>
Hashtable#keySet():::Returns a Set view of the keys contained in this map:::if->Collections->new->KeySet->synchronizedSet->return
Hashtable.KeySet#iterator()::: key set iterator:::return->getIterator
Hashtable.KeySet#size()::: key set size:::return
Hashtable.KeySet#contains(Object)::: key set contains:::return->containsKey
Hashtable.KeySet#remove(Object)::: key set remove:::return->Hashtable.this->remove
Hashtable.KeySet#clear()::: key set clear:::Hashtable.this->clear
Hashtable#entrySet():::Returns a Set view of the mappings contained in this map:::if->Collections->new->EntrySet->synchronizedSet->return
Hashtable.EntrySet#iterator()::: entry set iterator:::return->getIterator
Hashtable.EntrySet#add(Map.Entry)::: entry set add:::return->super->add
Hashtable.EntrySet#contains(Object)::: entry set contains:::if->return->entry->key->entry->getKey->tab->hash->key->hashCode->index->for->e->return
Hashtable.EntrySet#remove(Object)::: entry set remove:::if->return->entry->key->entry->getKey->tab->hash->key->hashCode->index->e->for->prev->return
Hashtable.EntrySet#size()::: entry set size:::return
Hashtable.EntrySet#clear()::: entry set clear:::Hashtable.this->clear
Hashtable#values():::Returns a Collection view of the values contained in this map:::if->Collections->new->ValueCollection->synchronizedCollection->return
Hashtable.ValueCollection#iterator()::: value collection iterator:::return->getIterator
Hashtable.ValueCollection#size()::: value collection size:::return
Hashtable.ValueCollection#contains(Object)::: value collection contains:::return->containsValue
Hashtable.ValueCollection#clear()::: value collection clear:::Hashtable.this->clear
Hashtable#equals(Object):::Compares the specified Object with this Map for equality, as per the definition in the Map interface.:::if->return->if->return->t->if->t->size->size->return->try->foreach->entrySet->key->e->getKey->value->e->getValue->if->if->t->get->t->containsKey->return->else->if->value->t->get->equals->return->catch->return->return->finally->return
Hashtable#hashCode():::Returns the hash code value for this Map as per the definition in the Map interface.:::h->if->return->tab->foreach->while->entry->hashCode->return
Hashtable#getOrDefault(Object, V)::: hashtable get or default:::result->get->return
Hashtable#forEach(BiConsumer)::: hashtable for each:::Objects->requireNonNull->expectedModCount->tab->foreach->while->action->accept->if->throw->new->ConcurrentModificationException
Hashtable#replaceAll(BiFunction)::: hashtable replace all:::Objects->requireNonNull->expectedModCount->tab->foreach->while->Objects->function->apply->requireNonNull->if->throw->new->ConcurrentModificationException
Hashtable#putIfAbsent(K, V)::: hashtable put if absent:::Objects->requireNonNull->tab->hash->key->hashCode->index->entry->for->addEntry->return
Hashtable#remove(Object, Object)::: hashtable remove:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->prev->return
Hashtable#replace(K, V, V)::: hashtable replace:::Objects->requireNonNull->Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->return
Hashtable#replace(K, V)::: hashtable replace:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->return
Hashtable#computeIfAbsent(K, Function):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the mapping function modified this map during computation.:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->mc->newValue->mappingFunction->apply->if->throw->new->ConcurrentModificationException->if->addEntry->return
Hashtable#computeIfPresent(K, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->prev->return
Hashtable#compute(K, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->prev->mc->newValue->remappingFunction->apply->if->throw->new->ConcurrentModificationException->if->addEntry->return
Hashtable#merge(K, V, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->prev->if->addEntry->return
Hashtable#writeObject(java.io.ObjectOutputStream):::Save the state of the Hashtable to a stream (i.e., serialize it).:::writeHashtable
Hashtable#writeHashtable(java.io.ObjectOutputStream):::Perform serialization of the Hashtable to an ObjectOutputStream:::entryStack->synchronized->s->defaultWriteObject->s->writeInt->s->writeInt->foreach->while->new->Entry<>->while->s->writeObject->s->writeObject
Hashtable#defaultWriteHashtable(java.io.ObjectOutputStream, int, float):::Called by Properties to write out a simulated threshold and loadfactor.:::Math->min->s->defaultWriteObject
Hashtable#readObject(java.io.ObjectInputStream):::Reconstitute the Hashtable from a stream (i.e., deserialize it).:::readHashtable
Hashtable#readHashtable(java.io.ObjectInputStream):::Perform deserialization of the Hashtable from an ObjectInputStream:::s->defaultReadObject->if->Float->isNaN->throw->new->StreamCorruptedException->origlength->s->readInt->elements->s->readInt->if->throw->new->StreamCorruptedException->Math->max->length->if->Math->min->if->SharedSecrets->getJavaObjectInputStreamAccess->checkArray->new->Entry<?,?>Arr->Math->min->for
Hashtable#reconstitutionPut(Entry[], K, V):::The put method used by readObject:::if->throw->new->java.io.StreamCorruptedException->hash->key->hashCode->index->for->e->e->new->Entry<>
Hashtable.Entry#clone()::: entry clone:::return->next->clone->new->Entry<>
Hashtable.Entry#getKey()::: entry get key:::return
Hashtable.Entry#getValue()::: entry get value:::return
Hashtable.Entry#setValue(V)::: entry set value:::if->throw->new->NullPointerException->oldValue->return
Hashtable.Entry#equals(Object)::: entry equals:::if->return->e->return->e->getKey->key->e->getKey->equals->e->getValue->value->e->getValue->equals
Hashtable.Entry#hashCode()::: entry hash code:::return->Objects->hashCode
Hashtable.Entry#toString()::: entry to string:::return->key->toString->value->toString
Hashtable.Enumerator#hasMoreElements()::: enumerator has more elements:::e->i->t->while->return
Hashtable.Enumerator#nextElement()::: enumerator next element:::et->i->t->while->if->e->return->throw->new->NoSuchElementException
Hashtable.Enumerator#hasNext()::: enumerator has next:::return->hasMoreElements
Hashtable.Enumerator#next()::: enumerator next:::if->throw->new->ConcurrentModificationException->return->nextElement
Hashtable.Enumerator#remove()::: enumerator remove:::if->throw->new->UnsupportedOperationException->if->throw->new->IllegalStateException->if->throw->new->ConcurrentModificationException->synchronized->tab->index->e->for->prev->throw->new->ConcurrentModificationException
IdentityHashMap#maskNull(Object):::Use NULL_KEY for key if it is null.:::return
IdentityHashMap#unmaskNull(Object):::Returns internal representation of null key back to caller as null.:::return
IdentityHashMap#capacity(int):::Returns the appropriate capacity for the given expected maximum size:::return->Integer->highestOneBit
IdentityHashMap#init(int):::Initializes object to be an empty map with the specified initial capacity, which is assumed to be a power of two between MINIMUM_CAPACITY and MAXIMUM_CAPACITY inclusive.:::new->ObjectArr
IdentityHashMap#size():::Returns the number of key-value mappings in this identity hash map.:::return
IdentityHashMap#isEmpty():::Returns true if this identity hash map contains no key-value mappings.:::return
IdentityHashMap#hash(Object, int):::Returns index for Object x.:::h->System->identityHashCode->return
IdentityHashMap#nextKeyIndex(int, int):::Circularly traverses table of size len.:::return
IdentityHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::k->maskNull->tab->len->i->hash->while->item->if->return->if->return->nextKeyIndex
IdentityHashMap#containsKey(Object):::Tests whether the specified object reference is a key in this identity hash map.:::k->maskNull->tab->len->i->hash->while->item->if->return->if->return->nextKeyIndex
IdentityHashMap#containsValue(Object):::Tests whether the specified object reference is a value in this identity hash map.:::tab->for->i->return
IdentityHashMap#containsMapping(Object, Object):::Tests if the specified key-value mapping is in the map.:::k->maskNull->tab->len->i->hash->while->item->if->return->if->return->nextKeyIndex
IdentityHashMap#put(K, V):::Associates the specified value with the specified key in this identity hash map:::k->maskNull->for
IdentityHashMap#resize(int):::Resizes the table if necessary to hold given capacity.:::newLength->oldTable->oldLength->if->if->throw->new->IllegalStateException->return->if->return->newTable->new->ObjectArr->for->j->return
IdentityHashMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::n->m->size->if->return->if->capacity->resize->foreach->m->entrySet->e->getKey->e->getValue->put
IdentityHashMap#remove(Object):::Removes the mapping for this key from this map if present.:::k->maskNull->tab->len->i->hash->while->item->if->oldValue->closeDeletion->return->if->return->nextKeyIndex
IdentityHashMap#removeMapping(Object, Object):::Removes the specified key-value mapping from the map if it is present.:::k->maskNull->tab->len->i->hash->while->item->if->if->return->closeDeletion->return->if->return->nextKeyIndex
IdentityHashMap#closeDeletion(int):::Rehash all possibly-colliding entries following a deletion:::tab->len->item->for->i->nextKeyIndex->nextKeyIndex
IdentityHashMap#clear():::Removes all of the mappings from this map:::tab->for->i
IdentityHashMap#equals(Object):::Compares the specified object with this map for equality:::if->return->else->if->m->if->m->size->return->tab->for->i->return->else->if->m->return->entrySet->m->entrySet->equals->else->return
IdentityHashMap#hashCode():::Returns the hash code value for this map:::result->tab->for->i->return
IdentityHashMap#clone():::Returns a shallow copy of this identity hash map: the keys and values themselves are not cloned.:::try->m->super->clone->table->clone->return->catch->throw->new->InternalError->finally
IdentityHashMap.IdentityHashMapIterator#hasNext()::: identity hash map iterator has next:::tab->for->i->return
IdentityHashMap.IdentityHashMapIterator#nextIndex()::: identity hash map iterator next index:::if->throw->new->ConcurrentModificationException->if->hasNext->throw->new->NoSuchElementException->return
IdentityHashMap.IdentityHashMapIterator#remove()::: identity hash map iterator remove:::if->throw->new->IllegalStateException->if->throw->new->ConcurrentModificationException->deletedSlot->tab->len->d->key->if->IdentityHashMap.this->remove->return->item->for->i->nextKeyIndex->nextKeyIndex
IdentityHashMap.KeyIterator#next()::: key iterator next:::return->nextIndex->unmaskNull
IdentityHashMap.ValueIterator#next()::: value iterator next:::return->nextIndex
IdentityHashMap.EntryIterator#next()::: entry iterator next:::nextIndex->new->Entry->return
IdentityHashMap.EntryIterator#remove()::: entry iterator remove:::super->remove
IdentityHashMap.EntryIterator.Entry#getKey()::: entry get key:::checkIndexForEntryUse->return->unmaskNull
IdentityHashMap.EntryIterator.Entry#getValue()::: entry get value:::checkIndexForEntryUse->return
IdentityHashMap.EntryIterator.Entry#setValue(V)::: entry set value:::checkIndexForEntryUse->oldValue->if->put->return
IdentityHashMap.EntryIterator.Entry#equals(Object)::: entry equals:::if->return->super->equals->if->return->e->return->e->getKey->unmaskNull->e->getValue
IdentityHashMap.EntryIterator.Entry#hashCode()::: entry hash code:::if->return->super->hashCode->return->System->unmaskNull->identityHashCode->System->identityHashCode
IdentityHashMap.EntryIterator.Entry#toString()::: entry to string:::if->return->super->toString->return->unmaskNull
IdentityHashMap.EntryIterator.Entry#checkIndexForEntryUse()::: entry check index for entry use:::if->throw->new->IllegalStateException
IdentityHashMap#keySet():::Returns an identity-based set view of the keys contained in this map:::ks->if->new->KeySet->return
IdentityHashMap.KeySet#iterator()::: key set iterator:::return->new->KeyIterator
IdentityHashMap.KeySet#size()::: key set size:::return
IdentityHashMap.KeySet#contains(Object)::: key set contains:::return->containsKey
IdentityHashMap.KeySet#remove(Object)::: key set remove:::oldSize->IdentityHashMap.this->remove->return
IdentityHashMap.KeySet#removeAll(Collection)::: key set remove all:::Objects->requireNonNull->modified->for->i->iterator->i->hasNext->return
IdentityHashMap.KeySet#clear()::: key set clear:::IdentityHashMap.this->clear
IdentityHashMap.KeySet#hashCode()::: key set hash code:::result->foreach->System->identityHashCode->return
IdentityHashMap.KeySet#toArray()::: key set to array:::return->new->ObjectArr->toArray
IdentityHashMap.KeySet#toArray(T[])::: key set to array:::expectedModCount->size->size->if->Array->a->getClass->getComponentType->newInstance->tab->ti->for->si->if->throw->new->ConcurrentModificationException->if->return
IdentityHashMap.KeySet#spliterator()::: key set spliterator:::return->new->KeySpliterator<>
IdentityHashMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
IdentityHashMap.Values#iterator()::: values iterator:::return->new->ValueIterator
IdentityHashMap.Values#size()::: values size:::return
IdentityHashMap.Values#contains(Object)::: values contains:::return->containsValue
IdentityHashMap.Values#remove(Object)::: values remove:::for->i->iterator->i->hasNext->return
IdentityHashMap.Values#clear()::: values clear:::IdentityHashMap.this->clear
IdentityHashMap.Values#toArray()::: values to array:::return->new->ObjectArr->toArray
IdentityHashMap.Values#toArray(T[])::: values to array:::expectedModCount->size->size->if->Array->a->getClass->getComponentType->newInstance->tab->ti->for->si->if->throw->new->ConcurrentModificationException->if->return
IdentityHashMap.Values#spliterator()::: values spliterator:::return->new->ValueSpliterator<>
IdentityHashMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->if->return->else->return->new->EntrySet
IdentityHashMap.EntrySet#iterator()::: entry set iterator:::return->new->EntryIterator
IdentityHashMap.EntrySet#contains(Object)::: entry set contains:::if->return->entry->return->entry->getKey->entry->getValue->containsMapping
IdentityHashMap.EntrySet#remove(Object)::: entry set remove:::if->return->entry->return->entry->getKey->entry->getValue->removeMapping
IdentityHashMap.EntrySet#size()::: entry set size:::return
IdentityHashMap.EntrySet#clear()::: entry set clear:::IdentityHashMap.this->clear
IdentityHashMap.EntrySet#removeAll(Collection)::: entry set remove all:::Objects->requireNonNull->modified->for->i->iterator->i->hasNext->return
IdentityHashMap.EntrySet#toArray()::: entry set to array:::return->new->ObjectArr->toArray
IdentityHashMap.EntrySet#toArray(T[])::: entry set to array:::expectedModCount->size->size->if->Array->a->getClass->getComponentType->newInstance->tab->ti->for->si->if->throw->new->ConcurrentModificationException->if->return
IdentityHashMap.EntrySet#spliterator()::: entry set spliterator:::return->new->EntrySpliterator<>
IdentityHashMap#writeObject(java.io.ObjectOutputStream):::Saves the state of the IdentityHashMap instance to a stream (i.e., serializes it).:::s->defaultWriteObject->s->writeInt->tab->for->i
IdentityHashMap#readObject(java.io.ObjectInputStream):::Reconstitutes the IdentityHashMap instance from a stream (i.e., deserializes it).:::s->defaultReadObject->size->s->readInt->if->throw->new->java.io.StreamCorruptedException->cap->capacity->SharedSecrets->getJavaObjectInputStreamAccess->checkArray->init->for->i
IdentityHashMap#putForCreate(K, V):::The put method for readObject:::k->maskNull->tab->len->i->hash->item->while->if->throw->new->java.io.StreamCorruptedException->nextKeyIndex
IdentityHashMap#forEach(BiConsumer)::: identity hash map for each:::Objects->requireNonNull->expectedModCount->t->for->index
IdentityHashMap#replaceAll(BiFunction)::: identity hash map replace all:::Objects->requireNonNull->expectedModCount->t->for->index
IdentityHashMap.IdentityHashMapSpliterator#getFence()::: identity hash map spliterator get fence:::hi->if->return
IdentityHashMap.IdentityHashMapSpliterator#estimateSize()::: identity hash map spliterator estimate size:::getFence->return
IdentityHashMap.KeySpliterator#trySplit()::: key spliterator try split:::hi->getFence->lo->mid->return->new->KeySpliterator<>
IdentityHashMap.KeySpliterator#forEachRemaining(Consumer)::: key spliterator for each remaining:::if->throw->new->NullPointerException->i->hi->mc->key->m->a->if->getFence->for->if->return->throw->new->ConcurrentModificationException
IdentityHashMap.KeySpliterator#tryAdvance(Consumer)::: key spliterator try advance:::if->throw->new->NullPointerException->a->hi->getFence->while->key->if->action->unmaskNull->accept->if->throw->new->ConcurrentModificationException->return->return
IdentityHashMap.KeySpliterator#characteristics()::: key spliterator characteristics:::return
IdentityHashMap.ValueSpliterator#trySplit()::: value spliterator try split:::hi->getFence->lo->mid->return->new->ValueSpliterator<>
IdentityHashMap.ValueSpliterator#forEachRemaining(Consumer)::: value spliterator for each remaining:::if->throw->new->NullPointerException->i->hi->mc->m->a->if->getFence->for->if->return->throw->new->ConcurrentModificationException
IdentityHashMap.ValueSpliterator#tryAdvance(Consumer)::: value spliterator try advance:::if->throw->new->NullPointerException->a->hi->getFence->while->key->v->if->action->accept->if->throw->new->ConcurrentModificationException->return->return
IdentityHashMap.ValueSpliterator#characteristics()::: value spliterator characteristics:::return
IdentityHashMap.EntrySpliterator#trySpliterator trySplit()::: entry spliterator try split:::hi->getFence->lo->mid->return->new->EntrySpliterator<>
IdentityHashMap.EntrySpliterator#forEachRemaining(Consumer>)::: entry spliterator for each remaining:::if->throw->new->NullPointerException->i->hi->mc->m->a->if->getFence->for->if->return->throw->new->ConcurrentModificationException
IdentityHashMap.EntrySpliterator#tryAdvance(Consumer>)::: entry spliterator try advance:::if->throw->new->NullPointerException->a->hi->getFence->while->key->v->if->k->unmaskNull->action->new->AbstractMap.SimpleImmutableEntry<>->accept->if->throw->new->ConcurrentModificationException->return->return
IdentityHashMap.EntrySpliterator#characteristics()::: entry spliterator characteristics:::return
IllegalFormatCodePointException#getCodePoint():::Returns the illegal code point as defined by Character#isValidCodePoint.:::return
IllegalFormatCodePointException#getMessage()::: illegal format code point exception get message:::return->String->format
IllegalFormatConversionException#getConversion():::Returns the inapplicable conversion.:::return
IllegalFormatConversionException#getArgumentClass():::Returns the class of the mismatched argument.:::return
IllegalFormatConversionException#getMessage()::: illegal format conversion exception get message:::return->String->arg->getName->format
IllegalFormatFlagsException#getFlags():::Returns the set of flags which contains an illegal combination.:::return
IllegalFormatFlagsException#getMessage()::: illegal format flags exception get message:::return
IllegalFormatPrecisionException#getPrecision():::Returns the precision:::return
IllegalFormatPrecisionException#getMessage()::: illegal format precision exception get message:::return->Integer->toString
IllegalFormatWidthException#getWidth():::Returns the width:::return
IllegalFormatWidthException#getMessage()::: illegal format width exception get message:::return->Integer->toString
IllformedLocaleException#getErrorIndex():::Returns the index where the error was found:::return
ImmutableCollections#uoe()::: immutable collections uoe:::return->new->UnsupportedOperationException
ImmutableCollections.AbstractImmutableCollection#add(E)::: abstract immutable collection add:::throw->uoe
ImmutableCollections.AbstractImmutableCollection#addAll(Collection)::: abstract immutable collection add all:::throw->uoe
ImmutableCollections.AbstractImmutableCollection#clear()::: abstract immutable collection clear:::throw->uoe
ImmutableCollections.AbstractImmutableCollection#remove(Object)::: abstract immutable collection remove:::throw->uoe
ImmutableCollections.AbstractImmutableCollection#removeAll(Collection)::: abstract immutable collection remove all:::throw->uoe
ImmutableCollections.AbstractImmutableCollection#removeIf(Predicate)::: abstract immutable collection remove if:::throw->uoe
ImmutableCollections.AbstractImmutableCollection#retainAll(Collection)::: abstract immutable collection retain all:::throw->uoe
ImmutableCollections#listCopy(Collection)::: immutable collections list copy:::if->coll->getClass->return->else->return->List->coll->toArray->of
ImmutableCollections#emptyList()::: immutable collections empty list:::return
ImmutableCollections.AbstractImmutableList#add(int, E)::: abstract immutable list add:::throw->uoe
ImmutableCollections.AbstractImmutableList#addAll(int, Collection)::: abstract immutable list add all:::throw->uoe
ImmutableCollections.AbstractImmutableList#remove(int)::: abstract immutable list remove:::throw->uoe
ImmutableCollections.AbstractImmutableList#replaceAll(UnaryOperator)::: abstract immutable list replace all:::throw->uoe
ImmutableCollections.AbstractImmutableList#set(int, E)::: abstract immutable list set:::throw->uoe
ImmutableCollections.AbstractImmutableList#sort(Comparator)::: abstract immutable list sort:::throw->uoe
ImmutableCollections.AbstractImmutableList#subList(int, int)::: abstract immutable list sub list:::size->size->subListRangeCheck->return->SubList->fromList
ImmutableCollections.AbstractImmutableList#subListRangeCheck(int, int, int)::: abstract immutable list sub list range check:::if->throw->new->IndexOutOfBoundsException->if->throw->new->IndexOutOfBoundsException->if->throw->new->IllegalArgumentException
ImmutableCollections.AbstractImmutableList#iterator()::: abstract immutable list iterator:::return->size->new->ListItr<E>
ImmutableCollections.AbstractImmutableList#listIterator()::: abstract immutable list list iterator:::return->listIterator
ImmutableCollections.AbstractImmutableList#listIterator(int)::: abstract immutable list list iterator:::size->size->if->throw->outOfBounds->return->new->ListItr<E>
ImmutableCollections.AbstractImmutableList#equals(Object)::: abstract immutable list equals:::if->return->if->return->oit->iterator->for->i->s->size->return->oit->hasNext
ImmutableCollections.AbstractImmutableList#indexOf(Object)::: abstract immutable list index of:::Objects->requireNonNull->for->i->s->size->return
ImmutableCollections.AbstractImmutableList#lastIndexOf(Object)::: abstract immutable list last index of:::Objects->requireNonNull->for->i->size->return
ImmutableCollections.AbstractImmutableList#hashCode()::: abstract immutable list hash code:::hash->for->i->s->size->return
ImmutableCollections.AbstractImmutableList#contains(Object)::: abstract immutable list contains:::return->indexOf
ImmutableCollections.AbstractImmutableList#outOfBounds(int)::: abstract immutable list out of bounds:::return->size->new->IndexOutOfBoundsException
ImmutableCollections.ListItr#hasNext()::: list itr has next:::return
ImmutableCollections.ListItr#next()::: list itr next:::try->i->next->list->get->return->catch->throw->new->NoSuchElementException->finally
ImmutableCollections.ListItr#remove()::: list itr remove:::throw->uoe
ImmutableCollections.ListItr#hasPrevious()::: list itr has previous:::if->throw->uoe->return
ImmutableCollections.ListItr#previous()::: list itr previous:::if->throw->uoe->try->i->previous->list->get->return->catch->throw->new->NoSuchElementException->finally
ImmutableCollections.ListItr#nextIndex()::: list itr next index:::if->throw->uoe->return
ImmutableCollections.ListItr#previousIndex()::: list itr previous index:::if->throw->uoe->return
ImmutableCollections.ListItr#set(E)::: list itr set:::throw->uoe
ImmutableCollections.ListItr#add(E)::: list itr add:::throw->uoe
ImmutableCollections.SubList#fromSubList(SubList, int, int):::Constructs a sublist of another SubList.:::return->new->SubList<>
ImmutableCollections.SubList#fromList(List, int, int):::Constructs a sublist of an arbitrary AbstractImmutableList, which is not a SubList itself.:::return->new->SubList<>
ImmutableCollections.SubList#get(int)::: sub list get:::Objects->checkIndex->return->root->get
ImmutableCollections.SubList#size()::: sub list size:::return
ImmutableCollections.SubList#iterator()::: sub list iterator:::return->size->new->ListItr<>
ImmutableCollections.SubList#listIterator(int)::: sub list list iterator:::rangeCheck->return->size->new->ListItr<>
ImmutableCollections.SubList#subList(int, int)::: sub list sub list:::subListRangeCheck->return->SubList->fromSubList
ImmutableCollections.SubList#rangeCheck(int)::: sub list range check:::if->throw->outOfBounds
ImmutableCollections.List12#size()::: list12 size:::return
ImmutableCollections.List12#get(int)::: list12 get:::if->return->else->if->return->throw->outOfBounds
ImmutableCollections.List12#readObject(ObjectInputStream)::: list12 read object:::throw->new->InvalidObjectException
ImmutableCollections.List12#writeReplace()::: list12 write replace:::if->return->new->CollSer->else->return->new->CollSer
ImmutableCollections.ListN#isEmpty()::: list n is empty:::return->size
ImmutableCollections.ListN#size()::: list n size:::return
ImmutableCollections.ListN#get(int)::: list n get:::return
ImmutableCollections.ListN#readObject(ObjectInputStream)::: list n read object:::throw->new->InvalidObjectException
ImmutableCollections.ListN#writeReplace()::: list n write replace:::return->new->CollSer
ImmutableCollections.AbstractImmutableSet#equals(Object)::: abstract immutable set equals:::if->return->else->if->return->c->if->c->size->size->return->foreach->if->contains->return->return
ImmutableCollections.AbstractImmutableSet#hashCode()::: abstract immutable set hash code:::
ImmutableCollections#emptySet()::: immutable collections empty set:::return
ImmutableCollections.Set12#size()::: set12 size:::return
ImmutableCollections.Set12#contains(Object)::: set12 contains:::return->o->equals->o->equals
ImmutableCollections.Set12#hashCode()::: set12 hash code:::return->e0->hashCode->e1->hashCode
ImmutableCollections.Set12#iterator()::: set12 iterator:::return->new->Iterator<>
ImmutableCollections.Set12#readObject(ObjectInputStream)::: set12 read object:::throw->new->InvalidObjectException
ImmutableCollections.Set12#writeReplace()::: set12 write replace:::if->return->new->CollSer->else->return->new->CollSer
ImmutableCollections.SetN#size()::: set n size:::return
ImmutableCollections.SetN#contains(Object)::: set n contains:::Objects->requireNonNull->return->probe
ImmutableCollections.SetN.SetNIterator#hasNext()::: set iterator has next:::return
ImmutableCollections.SetN.SetNIterator#nextIndex()::: set iterator next index:::idx->if->if->else->if->return
ImmutableCollections.SetN.SetNIterator#next()::: set iterator next:::if->hasNext->element->while->nextIndex->return->else->throw->new->NoSuchElementException
ImmutableCollections.SetN#iterator()::: set n iterator:::return->new->SetNIterator
ImmutableCollections.SetN#hashCode()::: set n hash code:::h->foreach->if->e->hashCode->return
ImmutableCollections.SetN#probe(Object)::: set n probe:::idx->Math->pe->hashCode->floorMod->while->ee->if->return->else->if->pe->equals->return->else->if
ImmutableCollections.SetN#readObject(ObjectInputStream)::: set n read object:::throw->new->InvalidObjectException
ImmutableCollections.SetN#writeReplace()::: set n write replace:::array->new->ObjectArr->dest->foreach->if->return->new->CollSer
ImmutableCollections#emptyMap()::: immutable collections empty map:::return
ImmutableCollections.AbstractImmutableMap#clear()::: abstract immutable map clear:::throw->uoe
ImmutableCollections.AbstractImmutableMap#compute(K, BiFunction)::: abstract immutable map compute:::throw->uoe
ImmutableCollections.AbstractImmutableMap#computeIfAbsent(K, Function)::: abstract immutable map compute if absent:::throw->uoe
ImmutableCollections.AbstractImmutableMap#computeIfPresent(K, BiFunction)::: abstract immutable map compute if present:::throw->uoe
ImmutableCollections.AbstractImmutableMap#merge(K, V, BiFunction)::: abstract immutable map merge:::throw->uoe
ImmutableCollections.AbstractImmutableMap#put(K, V)::: abstract immutable map put:::throw->uoe
ImmutableCollections.AbstractImmutableMap#putAll(Map)::: abstract immutable map put all:::throw->uoe
ImmutableCollections.AbstractImmutableMap#putIfAbsent(K, V)::: abstract immutable map put if absent:::throw->uoe
ImmutableCollections.AbstractImmutableMap#remove(Object)::: abstract immutable map remove:::throw->uoe
ImmutableCollections.AbstractImmutableMap#remove(Object, Object)::: abstract immutable map remove:::throw->uoe
ImmutableCollections.AbstractImmutableMap#replace(K, V)::: abstract immutable map replace:::throw->uoe
ImmutableCollections.AbstractImmutableMap#replace(K, V, V)::: abstract immutable map replace:::throw->uoe
ImmutableCollections.AbstractImmutableMap#replaceAll(BiFunction)::: abstract immutable map replace all:::throw->uoe
ImmutableCollections.Map1#entrySet()::: map1 entry set:::return->Set->new->KeyValueHolder<>->of
ImmutableCollections.Map1#get(Object)::: map1 get:::return->o->equals
ImmutableCollections.Map1#containsKey(Object)::: map1 contains key:::return->o->equals
ImmutableCollections.Map1#containsValue(Object)::: map1 contains value:::return->o->equals
ImmutableCollections.Map1#readObject(ObjectInputStream)::: map1 read object:::throw->new->InvalidObjectException
ImmutableCollections.Map1#writeReplace()::: map1 write replace:::return->new->CollSer
ImmutableCollections.Map1#hashCode()::: map1 hash code:::return->k0->hashCode->v0->hashCode
ImmutableCollections.MapN#containsKey(Object)::: map n contains key:::Objects->requireNonNull->return->probe
ImmutableCollections.MapN#containsValue(Object)::: map n contains value:::Objects->requireNonNull->for->i->return
ImmutableCollections.MapN#hashCode()::: map n hash code:::hash->for->i->return
ImmutableCollections.MapN#get(Object)::: map n get:::if->Objects->requireNonNull->return->i->probe->if->return->else->return
ImmutableCollections.MapN#size()::: map n size:::return
ImmutableCollections.MapN.MapNIterator#hasNext()::: map iterator has next:::return
ImmutableCollections.MapN.MapNIterator#nextIndex()::: map iterator next index:::idx->if->if->else->if->return
ImmutableCollections.MapN.MapNIterator#next()::: map iterator next:::if->hasNext->while->nextIndex->e->new->KeyValueHolder<>->return->else->throw->new->NoSuchElementException
ImmutableCollections.MapN#entrySet()::: map n entry set:::return->new->AbstractSet<>
ImmutableCollections.MapN#probe(Object)::: map n probe:::idx->Math->pk->hashCode->floorMod->while->ek->if->return->else->if->pk->equals->return->else->if
ImmutableCollections.MapN#readObject(ObjectInputStream)::: map n read object:::throw->new->InvalidObjectException
ImmutableCollections.MapN#writeReplace()::: map n write replace:::array->new->ObjectArr->len->dest->for->i->return->new->CollSer
CollSer#readObject(ObjectInputStream):::Reads objects from the stream and stores them in the transient Object[] array field.:::ois->defaultReadObject->len->ois->readInt->if->throw->new->InvalidObjectException->SharedSecrets->getJavaObjectInputStreamAccess->checkArray->a->new->ObjectArr->for->i
CollSer#writeObject(ObjectOutputStream):::Writes objects to the stream from the transient Object[] array field.:::oos->defaultWriteObject->oos->writeInt->for->i
CollSer#readResolve():::Creates and returns an immutable collection from this proxy class:::try->if->throw->new->InvalidObjectException->switch->return->List->of->return->Set->of->if->return->ImmutableCollections->emptyMap->else->if->return->new->ImmutableCollections.Map1<>->else->return->new->ImmutableCollections.MapN<>->throw->String->format->new->InvalidObjectException->catch->ioe->new->InvalidObjectException->ioe->initCause->throw->finally
IntSummaryStatistics#accept(int):::Records a new value into the summary information:::Math->min->Math->max
IntSummaryStatistics#combine(IntSummaryStatistics):::Combines the state of another IntSummaryStatistics into this one.:::Math->min->Math->max
IntSummaryStatistics#getCount():::Returns the count of values recorded.:::return
IntSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded.:::return
IntSummaryStatistics#getMin():::Returns the minimum value recorded, or Integer.MAX_VALUE if no values have been recorded.:::return
IntSummaryStatistics#getMax():::Returns the maximum value recorded, or Integer.MIN_VALUE if no values have been recorded.:::return
IntSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.:::return->getCount->getSum->getCount
IntSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging:::return->String->this->getClass->getSimpleName->getCount->getSum->getMin->getAverage->getMax->format
InvalidPropertiesFormatException#writeObject(java.io.ObjectOutputStream):::Throws NotSerializableException, since InvalidPropertiesFormatException objects are not intended to be serializable.:::throw->new->NotSerializableException
InvalidPropertiesFormatException#readObject(java.io.ObjectInputStream):::Throws NotSerializableException, since InvalidPropertiesFormatException objects are not intended to be serializable.:::throw->new->NotSerializableException
Iterator#hasNext():::Returns true if the iteration has more elements:::
Iterator#next():::Returns the next element in the iteration.:::
Iterator#remove():::Removes from the underlying collection the last element returned by this iterator (optional operation):::throw->new->UnsupportedOperationException
Iterator#forEachRemaining(Consumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception:::Objects->requireNonNull->while->hasNext->action->next->accept
JapaneseImperialCalendar#getCalendarType():::Returns "japanese" as the calendar type of this JapaneseImperialCalendar.:::return
JapaneseImperialCalendar#equals(Object):::Compares this JapaneseImperialCalendar to the specified Object:::return->super->equals
JapaneseImperialCalendar#hashCode():::Generates the hash code for this JapaneseImperialCalendar object.:::return->super->hashCode->jdate->hashCode
JapaneseImperialCalendar#add(int, int):::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules:::if->return->if->throw->new->IllegalArgumentException->complete->if->d->jdate->clone->d->addYear->pinDayOfMonth->getEraIndex->set->d->getYear->set->d->getMonth->set->d->getDayOfMonth->set->else->if->d->jdate->clone->d->addMonth->pinDayOfMonth->getEraIndex->set->d->getYear->set->d->getMonth->set->d->getDayOfMonth->set->else->if->era->internalGet->if->else->if->set->else->delta->timeOfDay->switch->break->break->break->break->break->break->break->if->setTimeInMillis->return->fd->internalGet->internalGet->internalGet->internalGet->if->else->if->zoneOffset->internalGet->internalGet->setTimeInMillis->internalGet->internalGet->if->setTimeInMillis->fd2->if->setTimeInMillis
JapaneseImperialCalendar#roll(int, boolean)::: japanese imperial calendar roll:::roll
JapaneseImperialCalendar#roll(int, int):::Adds a signed amount to the specified calendar field without changing larger fields:::if->return->if->throw->new->IllegalArgumentException->complete->min->getMinimum->max->getMaximum->switch->break->unit->h->internalGet->nh->if->d->jcal->getZone->getCalendarDate->if->internalGet->d->getDayOfMonth->d->jdate->getEra->setEra->d->internalGet->internalGet->internalGet->setDate->if->d->addHours->jcal->getTime->hourOfDay->d->getHours->internalSet->if->internalSet->else->internalSet->internalSet->zoneOffset->d->getZoneOffset->saving->d->getDaylightSaving->internalSet->internalSet->return->getActualMinimum->getActualMaximum->break->if->jdate->getNormalizedYear->isTransitionYear->year->jdate->getYear->if->getMaximum->jd->jcal->getZone->getCalendarDate->d->jcal->getZone->getCalendarDate->d->getMonth->n->internalGet->getRolledValue->if->jd->addYear->jd->setMonth->if->jd->getDayOfMonth->d->getDayOfMonth->jd->d->getDayOfMonth->setDayOfMonth->jcal->normalize->if->jd->getDayOfMonth->d->getDayOfMonth->jd->getTimeOfDay->d->getTimeOfDay->jd->setMonth->jd->d->getDayOfMonth->setDayOfMonth->jcal->normalize->jd->getMonth->jd->getDayOfMonth->set->set->else->if->getMinimum->jd->jcal->getZone->getCalendarDate->d->jcal->getZone->getCalendarDate->d->getMonth->n->internalGet->getRolledValue->if->jd->addYear->jd->setMonth->if->jd->getDayOfMonth->d->getDayOfMonth->jd->d->getDayOfMonth->setDayOfMonth->jcal->normalize->if->jd->getDayOfMonth->d->getDayOfMonth->jd->getTimeOfDay->d->getTimeOfDay->jd->setMonth->jd->d->getDayOfMonth->setDayOfMonth->jcal->normalize->jd->getMonth->jd->getDayOfMonth->set->set->else->mon->internalGet->if->set->monthLen->monthLength->if->internalGet->set->else->eraIndex->getEraIndex->transition->if->jdate->getYear->getSinceDate->transition->getMonth->else->if->getSinceDate->if->transition->getYear->jdate->getNormalizedYear->transition->getMonth->if->transition->getDayOfMonth->if->return->n->internalGet->getRolledValue->set->if->if->transition->getMonth->transition->getDayOfMonth->if->jdate->getDayOfMonth->transition->getDayOfMonth->transition->getDayOfMonth->set->else->if->transition->getMonth->dom->transition->getDayOfMonth->if->jdate->getDayOfMonth->set->return->y->jdate->getNormalizedYear->getActualMaximum->internalGet->set->woy->internalGet->value->if->jdate->getNormalizedYear->isTransitionYear->year->jdate->getYear->if->getMaximum->getActualMaximum->else->if->getMinimum->getActualMinimum->getActualMaximum->if->set->return->if->set->return->fd->day1->if->getMinimum->if->gcal->getYearFromFixedDate->else->d->jcal->getZone->getCalendarDate->if->jcal->getFixedDate->internalGet->if->gcal->getYearFromFixedDate->break->fd->day1->d->getCalendarDate->if->d->getEra->jdate->getEra->d->getYear->jdate->getYear->jcal->getCalendarDateFromFixedDate->if->d->getEra->jdate->getEra->d->getYear->jdate->getYear->getRolledValue->getCalendarDate->d->getMonth->set->d->getDayOfMonth->set->return->isTransitionYear->jdate->getNormalizedYear->isTransitionYear->dow->internalGet->getFirstDayOfWeek->if->fd->month1->monthLength->if->getFixedDateMonth1->actualMonthLength->else->internalGet->jcal->getMonthLength->monthDay1st->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->getMinimalDaysInFirstWeek->getActualMaximum->value->internalGet->getRolledValue->nfd->if->else->if->set->return->if->jdate->getNormalizedYear->isTransitionYear->jcal->getMonthLength->break->month1->getFixedDateMonth1->value->actualMonthLength->getRolledValue->d->getCalendarDate->d->getDayOfMonth->set->return->getActualMaximum->if->jdate->getNormalizedYear->isTransitionYear->break->value->internalGet->getRolledValue->jan0->internalGet->d->getCalendarDate->d->getMonth->set->d->getDayOfMonth->set->return->normalizedYear->jdate->getNormalizedYear->if->isTransitionYear->isTransitionYear->weekOfYear->internalGet->if->internalGet->set->break->if->return->fd->dowFirst->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->else->if->d->getCalendarDate->getEraIndex->set->d->getYear->d->getMonth->d->getDayOfMonth->set->return->if->jdate->getNormalizedYear->isTransitionYear->dom->internalGet->monthLength->jcal->getMonthLength->lastDays->x->if->internalGet->set->break->fd->month1->getFixedDateMonth1->monthLength->actualMonthLength->lastDays->x->if->value->internalGet->getRolledValue->d->getCalendarDate->d->getDayOfMonth->set->return->internalGet->getRolledValue->set
JapaneseImperialCalendar#getDisplayName(int, int, Locale)::: japanese imperial calendar get display name:::if->checkDisplayNameParams->return->fieldValue->get->if->getBaseStyle->get->return->name->CalendarDataUtility->getCalendarType->retrieveFieldValueName->if->name->isEmpty->era->era->getAbbreviation->era->getName->return
JapaneseImperialCalendar#getDisplayNames(int, int, Locale)::: japanese imperial calendar get display names:::if->checkDisplayNameParams->return->names->CalendarDataUtility->getCalendarType->retrieveFieldValueNames->if->if->size->names->size->if->values->new->HashSet<>->foreach->names->keySet->values->names->get->add->values->size->if->baseStyle->getBaseStyle->for->i->return
JapaneseImperialCalendar#getMinimum(int):::Returns the minimum value for the given calendar field of this Calendar instance:::return
JapaneseImperialCalendar#getMaximum(int):::Returns the maximum value for the given calendar field of this GregorianCalendar instance:::switch->d->jcal->getZone->getCalendarDate->return->Math->d->getYear->max->return
JapaneseImperialCalendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance:::return
JapaneseImperialCalendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance:::switch->return->Math->getMaximum->min->return
JapaneseImperialCalendar#getActualMinimum(int):::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods.:::if->isFieldSet->return->getMinimum->value->jc->getNormalizedCalendar->jd->jcal->jc->getTimeInMillis->getZone->getCalendarDate->eraIndex->getEraIndex->switch->if->since->getZone->getSince->d->jcal->getZone->getCalendarDate->jd->d->getYear->setYear->jcal->normalize->if->getYearOffsetInMillis->getYearOffsetInMillis->else->getMinimum->d->jcal->getZone->getCalendarDate->y->d->getYear->if->jd->setYear->jcal->normalize->if->getYearOffsetInMillis->getYearOffsetInMillis->break->if->jd->getYear->since->getZone->getSince->d->jcal->getZone->getCalendarDate->d->getMonth->if->jd->getDayOfMonth->d->getDayOfMonth->break->d->jcal->getZone->getCalendarDate->d->addYear->jcal->normalize->jd->d->getEra->setEra->jd->d->getYear->setYear->jcal->normalize->jan1->jcal->getFixedDate->fd->jcal->getFixedDate->woy->getWeekNumber->day1->if->jd->getTimeOfDay->d->getTimeOfDay->break->return
JapaneseImperialCalendar#getActualMaximum(int):::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods:::fieldsForFixedMax->if->return->getMaximum->jc->getNormalizedCalendar->date->normalizedYear->date->getNormalizedYear->value->switch->if->date->getNormalizedYear->isTransitionYear->eraIndex->getEraIndex->if->date->getYear->transition->fd->if->ldate->date->clone->jcal->getCalendarDateFromFixedDate->ldate->getMonth->else->d->jcal->getZone->getCalendarDate->if->date->getEra->d->getEra->date->getYear->d->getYear->d->getMonth->break->jcal->getMonthLength->break->if->date->getNormalizedYear->isTransitionYear->eraIndex->getEraIndex->if->date->getYear->transition->fd->d->gcal->newCalendarDate->d->date->getNormalizedYear->setDate->if->gcal->getFixedDate->else->d->addYear->gcal->getFixedDate->else->d->jcal->getZone->getCalendarDate->if->date->getEra->d->getEra->date->getYear->d->getYear->fd->jcal->getFixedDate->jan1->getFixedDateJan1->else->if->date->getYear->getMinimum->d1->jcal->getZone->getCalendarDate->fd1->jcal->getFixedDate->d1->addYear->d1->setMonth->setDayOfMonth->jcal->normalize->fd2->jcal->getFixedDate->else->jcal->getYearLength->break->if->date->getNormalizedYear->isTransitionYear->jd->jcal->getZone->getCalendarDate->if->date->getEra->jd->getEra->date->getYear->jd->getYear->fd->jcal->getFixedDate->jan1->getFixedDateJan1->getWeekNumber->else->if->date->getEra->date->getYear->getMinimum->d->jcal->getZone->getCalendarDate->d->addYear->jcal->normalize->jd->d->getEra->setEra->jd->d->getYear->setDate->jcal->normalize->jan1->jcal->getFixedDate->nextJan1->jcal->getFixedDate->nextJan1st->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->ndays->if->getMinimalDaysInFirstWeek->getWeekNumber->else->d->gcal->newCalendarDate->d->date->getNormalizedYear->setDate->dayOfWeek->gcal->getDayOfWeek->getFirstDayOfWeek->if->magic->getMinimalDaysInFirstWeek->if->date->isLeapYear->break->if->jc->clone->max->getActualMaximum->jc->set->jc->get->if->jc->add->jc->get->break->jd->jcal->getZone->getCalendarDate->if->date->getEra->jd->getEra->date->getYear->jd->getYear->d->gcal->newCalendarDate->d->date->getNormalizedYear->date->getMonth->setDate->dayOfWeek->gcal->getDayOfWeek->monthLength->gcal->getMonthLength->getFirstDayOfWeek->if->nDaysFirstWeek->if->getMinimalDaysInFirstWeek->if->if->else->fd->jcal->getFixedDate->month1->jd->getDayOfMonth->getWeekNumber->break->ndays->dow1->dow->date->getDayOfWeek->d->date->clone->jcal->getMonthLength->d->setDayOfMonth->jcal->normalize->d->getDayOfWeek->x->if->break->jd->jcal->jc->getTimeInMillis->getZone->getCalendarDate->d->eraIndex->getEraIndex->if->jcal->getZone->getCalendarDate->d->getYear->if->jd->setYear->else->jcal->getZone->getSince->getZone->getCalendarDate->d->getYear->jd->setYear->jcal->normalize->if->getYearOffsetInMillis->getYearOffsetInMillis->break->throw->new->ArrayIndexOutOfBoundsException->return
JapaneseImperialCalendar#getYearOffsetInMillis(CalendarDate):::Returns the millisecond offset from the beginning of the year:::t->jcal->getDayOfYear->return->date->getTimeOfDay->date->getZoneOffset
JapaneseImperialCalendar#clone()::: japanese imperial calendar clone:::other->super->clone->jdate->clone->return
JapaneseImperialCalendar#getTimeZone()::: japanese imperial calendar get time zone:::zone->super->getTimeZone->jdate->setZone->return
JapaneseImperialCalendar#setTimeZone(TimeZone)::: japanese imperial calendar set time zone:::super->setTimeZone->jdate->setZone
JapaneseImperialCalendar#computeFields():::Converts the time value (millisecond offset from the Epoch) to calendar field values:::mask->if->isPartiallyNormalized->getSetStateFields->fieldMask->if->computeFields->else->computeFields->setFieldsComputed
JapaneseImperialCalendar#computeFields(int, int):::This computeFields implements the conversion from UTC (millisecond offset from the Epoch) to calendar field values:::zoneOffset->tz->getZone->if->new->intArr->if->if->getOffsets->else->tz->getOffset->tz->getRawOffset->if->if->isFieldSet->internalGet->if->isFieldSet->internalGet->fixedDate->timeOfDay->if->else->while->if->jcal->getCalendarDateFromFixedDate->era->getEraIndex->year->jdate->getYear->internalSet->internalSet->mask->month->jdate->getMonth->dayOfMonth->jdate->getDayOfMonth->if->internalSet->internalSet->jdate->getDayOfWeek->internalSet->if->if->hours->internalSet->internalSet->internalSet->r->internalSet->internalSet->internalSet->else->internalSet->internalSet->internalSet->internalSet->internalSet->internalSet->if->internalSet->internalSet->if->normalizedYear->jdate->getNormalizedYear->transitionYear->jdate->getNormalizedYear->isTransitionYear->dayOfYear->fixedDateJan1->if->getFixedDateJan1->else->if->dx->jcal->getZone->getCalendarDate->jcal->getFixedDate->else->jcal->getDayOfYear->fixedDateMonth1->getFixedDateMonth1->internalSet->internalSet->weekOfYear->getWeekNumber->if->fixedDec31->prevJan1->d->getCalendarDate->if->d->getNormalizedYear->isTransitionYear->if->d->isLeapYear->else->if->if->jdate->getYear->if->pd->getSinceDate->if->pd->getYear->d->pd->getMonth->setMonth->pd->getDayOfMonth->setDayOfMonth->else->d->setMonth->setDayOfMonth->jcal->normalize->jcal->getFixedDate->else->if->d->isLeapYear->else->cd->getEraIndex->getSinceDate->d->cd->getMonth->setMonth->cd->getDayOfMonth->setDayOfMonth->jcal->normalize->jcal->getFixedDate->getWeekNumber->else->if->if->nextJan1->if->jdate->isLeapYear->nextJan1st->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->ndays->if->getMinimalDaysInFirstWeek->else->d->jdate->clone->nextJan1->if->jdate->getYear->d->addYear->d->setMonth->setDayOfMonth->jcal->getFixedDate->else->nextEraIndex->getEraIndex->cd->getSinceDate->d->setEra->d->cd->getMonth->cd->getDayOfMonth->setDate->jcal->normalize->jcal->getFixedDate->nextJan1st->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->ndays->if->getMinimalDaysInFirstWeek->internalSet->getWeekNumber->internalSet->return
JapaneseImperialCalendar#getWeekNumber(long, long):::Returns the number of weeks in a period between fixedDay1 and fixedDate:::fixedDay1st->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->ndays->if->getMinimalDaysInFirstWeek->normalizedDayOfPeriod->if->return->return->CalendarUtils->floorDivide
JapaneseImperialCalendar#computeTime():::Converts calendar field values to the time value (millisecond offset from the Epoch).:::if->isLenient->if->new->intArr->for->field->fieldMask->selectFields->year->era->if->isSet->internalGet->isSet->internalGet->else->if->isSet->internalGet->else->timeOfDay->if->isFieldSet->internalGet->else->internalGet->if->isFieldSet->internalGet->internalGet->internalGet->internalGet->fixedDate->while->getFixedDate->millis->zone->getZone->if->new->intArr->tzMask->if->if->getOffsetsByWall->else->zone->zone->getRawOffset->getOffsets->if->if->isFieldSet->internalGet->if->isFieldSet->internalGet->mask->getSetStateFields->computeFields->if->isLenient->for->field->setFieldsNormalized
JapaneseImperialCalendar#getFixedDate(int, int, int):::Computes the fixed date under either the Gregorian or the Julian calendar, using the given year and the specified calendar fields.:::month->firstDayOfMonth->if->isFieldSet->internalGet->if->else->if->rem->new->intArr->CalendarUtils->floorDivide->else->if->d->getSinceDate->d->getMonth->d->getDayOfMonth->if->dx->jcal->getZone->getCalendarDate->m->dx->getMonth->if->if->dx->getDayOfMonth->date->jcal->newCalendarDate->date->setEra->date->setDate->jcal->normalize->fixedDate->jcal->getFixedDate->if->isFieldSet->if->isFieldSet->if->isSet->internalGet->else->if->isFieldSet->firstDayOfWeek->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->getMinimalDaysInFirstWeek->if->isFieldSet->LocalGregorianCalendar->internalGet->getDayOfWeekDateOnOrBefore->internalGet->else->dayOfWeek->if->isFieldSet->internalGet->else->getFirstDayOfWeek->dowim->if->isFieldSet->internalGet->else->if->LocalGregorianCalendar->getDayOfWeekDateOnOrBefore->else->lastDate->monthLength->LocalGregorianCalendar->getDayOfWeekDateOnOrBefore->else->if->isFieldSet->if->date->getNormalizedYear->isTransitionYear->getFixedDateJan1->internalGet->else->firstDayOfWeek->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->getMinimalDaysInFirstWeek->if->isFieldSet->dayOfWeek->internalGet->if->getFirstDayOfWeek->LocalGregorianCalendar->getDayOfWeekDateOnOrBefore->internalGet->return
JapaneseImperialCalendar#getFixedDateJan1(LocalGregorianCalendar.Date, long):::Returns the fixed date of the first day of the year (usually January 1) before the specified date.:::era->date->getEra->if->date->getEra->date->getYear->for->eraIndex->getEraIndex->d->gcal->newCalendarDate->d->date->getNormalizedYear->setDate->return->gcal->getFixedDate
JapaneseImperialCalendar#getFixedDateMonth1(LocalGregorianCalendar.Date, long):::Returns the fixed date of the first date of the month (usually the 1st of the month) before the specified date.:::eraIndex->getTransitionEraIndex->if->transition->if->return->return->date->getDayOfMonth
JapaneseImperialCalendar#getCalendarDate(long):::Returns a LocalGregorianCalendar.Date produced from the specified fixed date.:::d->jcal->newCalendarDate->jcal->getCalendarDateFromFixedDate->return
JapaneseImperialCalendar#monthLength(int, int):::Returns the length of the specified month in the specified Gregorian year:::return->CalendarUtils->isGregorianLeapYear
JapaneseImperialCalendar#monthLength(int):::Returns the length of the specified month in the year provided by internalGet(YEAR).:::return->jdate->isLeapYear
JapaneseImperialCalendar#actualMonthLength()::: japanese imperial calendar actual month length:::length->jcal->getMonthLength->eraIndex->getTransitionEraIndex->if->transitionFixedDate->d->getSinceDate->if->d->getDayOfMonth->else->d->getDayOfMonth->return
JapaneseImperialCalendar#getTransitionEraIndex(LocalGregorianCalendar.Date):::Returns the index to the new era if the given date is in a transition month:::eraIndex->getEraIndex->transitionDate->getSinceDate->if->transitionDate->getYear->date->getNormalizedYear->transitionDate->getMonth->date->getMonth->return->if->getSinceDate->if->transitionDate->getYear->date->getNormalizedYear->transitionDate->getMonth->date->getMonth->return->return
JapaneseImperialCalendar#isTransitionYear(int)::: japanese imperial calendar is transition year:::for->i->return
JapaneseImperialCalendar#getEraIndex(LocalGregorianCalendar.Date)::: japanese imperial calendar get era index:::era->date->getEra->for->i->return
JapaneseImperialCalendar#getNormalizedCalendar():::Returns this object if it's normalized (all fields and time are in sync):::jc->if->isFullyNormalized->else->this->clone->jc->setLenient->jc->complete->return
JapaneseImperialCalendar#pinDayOfMonth(LocalGregorianCalendar.Date):::After adjustments such as add(MONTH), add(YEAR), we don't want the month to jump around:::year->date->getYear->dom->date->getDayOfMonth->if->getMinimum->date->setDayOfMonth->jcal->normalize->monthLength->jcal->getMonthLength->if->date->setDayOfMonth->else->date->setDayOfMonth->jcal->normalize->else->d->jcal->getZone->getCalendarDate->realDate->jcal->getZone->getCalendarDate->tod->realDate->getTimeOfDay->realDate->addYear->realDate->date->getMonth->setMonth->realDate->setDayOfMonth->jcal->normalize->monthLength->jcal->getMonthLength->if->realDate->setDayOfMonth->else->if->d->getDayOfMonth->realDate->d->getDayOfMonth->setDayOfMonth->else->realDate->setDayOfMonth->if->realDate->getDayOfMonth->d->getDayOfMonth->d->getTimeOfDay->realDate->Math->min->setDayOfMonth->date->realDate->getMonth->realDate->getDayOfMonth->setDate
JapaneseImperialCalendar#getRolledValue(int, int, int, int):::Returns the new value after 'roll'ing the specified value and amount.:::range->n->if->else->if->return
JapaneseImperialCalendar#internalGetEra():::Returns the ERA:::return->isSet->internalGet
JapaneseImperialCalendar#readObject(ObjectInputStream):::Updates internal state.:::stream->defaultReadObject->if->jcal->getZone->newCalendarDate
JumboEnumSet#addRange(E, E)::: jumbo enum set add range:::fromIndex->from->ordinal->toIndex->to->ordinal->if->from->ordinal->to->ordinal->from->ordinal->else->from->ordinal->for->i->to->ordinal->to->ordinal->from->ordinal
JumboEnumSet#addAll()::: jumbo enum set add all:::for->i
JumboEnumSet#complement()::: jumbo enum set complement:::for->i
JumboEnumSet#iterator():::Returns an iterator over the elements contained in this set:::return->new->EnumSetIterator<>
JumboEnumSet.EnumSetIterator#hasNext()::: enum set iterator has next:::while->return
JumboEnumSet.EnumSetIterator#next()::: enum set iterator next:::if->hasNext->throw->new->NoSuchElementException->return->Long->numberOfTrailingZeros
JumboEnumSet.EnumSetIterator#remove()::: enum set iterator remove:::if->throw->new->IllegalStateException->oldElements->if
JumboEnumSet#size():::Returns the number of elements in this set.:::return
JumboEnumSet#isEmpty():::Returns true if this set contains no elements.:::return
JumboEnumSet#contains(Object):::Returns true if this set contains the specified element.:::if->return->eClass->e->getClass->if->eClass->getSuperclass->return->eOrdinal->ordinal->return
JumboEnumSet#add(E):::Adds the specified element to this set if it is not already present.:::typeCheck->eOrdinal->e->ordinal->eWordNum->oldElements->result->if->return
JumboEnumSet#remove(Object):::Removes the specified element from this set if it is present.:::if->return->eClass->e->getClass->if->eClass->getSuperclass->return->eOrdinal->ordinal->eWordNum->oldElements->result->if->return
JumboEnumSet#containsAll(Collection):::Returns true if this set contains all of the elements in the specified collection.:::if->return->super->containsAll->es->if->return->es->isEmpty->for->i->return
JumboEnumSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.:::if->return->super->addAll->es->if->if->es->isEmpty->return->else->throw->new->ClassCastException->for->i->return->recalculateSize
JumboEnumSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection.:::if->return->super->removeAll->es->if->return->for->i->return->recalculateSize
JumboEnumSet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection.:::if->return->super->retainAll->es->if->changed->clear->return->for->i->return->recalculateSize
JumboEnumSet#clear():::Removes all of the elements from this set.:::Arrays->fill
JumboEnumSet#equals(Object):::Compares the specified object with this set for equality:::if->return->super->equals->es->if->return->return->Arrays->equals
JumboEnumSet#recalculateSize():::Recalculates the size of the set:::oldSize->foreach->Long->bitCount->return
JumboEnumSet#clone()::: jumbo enum set clone:::result->super->clone->clone->return
KeyValueHolder#getKey():::Gets the key from this holder.:::return
KeyValueHolder#getValue():::Gets the value from this holder.:::return
KeyValueHolder#setValue(V):::Throws UnsupportedOperationException.:::throw->new->UnsupportedOperationException
KeyValueHolder#equals(Object):::Compares the specified object with this entry for equality:::if->return->e->return->key->e->getKey->equals->value->e->getValue->equals
KeyValueHolder#hashCode():::Returns the hash code value for this map entry:::return->key->hashCode->value->hashCode
KeyValueHolder#toString():::Returns a String representation of this map entry:::return
LinkedHashMap#linkNodeLast(LinkedHashMap.Entry)::: linked hash map link node last:::last->if->else
LinkedHashMap#transferLinks(LinkedHashMap.Entry, LinkedHashMap.Entry)::: linked hash map transfer links:::b->a->if->else->if->else
LinkedHashMap#reinitialize()::: linked hash map reinitialize:::super->reinitialize
LinkedHashMap#newNode(int, K, V, Node)::: linked hash map new node:::p->new->LinkedHashMap.Entry<>->linkNodeLast->return
LinkedHashMap#replacementNode(Node, Node)::: linked hash map replacement node:::q->t->new->LinkedHashMap.Entry<>->transferLinks->return
LinkedHashMap#newTreeNode(int, K, V, Node)::: linked hash map new tree node:::p->new->TreeNode<>->linkNodeLast->return
LinkedHashMap#replacementTreeNode(Node, Node)::: linked hash map replacement tree node:::q->t->new->TreeNode<>->transferLinks->return
LinkedHashMap#afterNodeRemoval(Node)::: linked hash map after node removal:::p->b->a->if->else->if->else
LinkedHashMap#afterNodeInsertion(boolean)::: linked hash map after node insertion:::first->if->removeEldestEntry->key->hash->removeNode
LinkedHashMap#afterNodeAccess(Node)::: linked hash map after node access:::last->if->p->b->a->if->else->if->else->if->else
LinkedHashMap#internalWriteEntries(java.io.ObjectOutputStream)::: linked hash map internal write entries:::for->e
LinkedHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.:::for->e->return
LinkedHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::e->if->hash->getNode->return->if->afterNodeAccess->return
LinkedHashMap#getOrDefault(Object, V)::: linked hash map get or default:::e->if->hash->getNode->return->if->afterNodeAccess->return
LinkedHashMap#clear()::: linked hash map clear:::super->clear
LinkedHashMap#removeEldestEntry(Map.Entry):::Returns true if this map should remove its eldest entry:::return
LinkedHashMap#keySet():::Returns a Set view of the keys contained in this map:::ks->if->new->LinkedKeySet->return
LinkedHashMap.LinkedKeySet#size()::: linked key set size:::return
LinkedHashMap.LinkedKeySet#clear()::: linked key set clear:::LinkedHashMap.this->clear
LinkedHashMap.LinkedKeySet#iterator()::: linked key set iterator:::return->new->LinkedKeyIterator
LinkedHashMap.LinkedKeySet#contains(Object)::: linked key set contains:::return->containsKey
LinkedHashMap.LinkedKeySet#remove(Object)::: linked key set remove:::return->hash->removeNode
LinkedHashMap.LinkedKeySet#spliterator()::: linked key set spliterator:::return->Spliterators->spliterator
LinkedHashMap.LinkedKeySet#forEach(Consumer)::: linked key set for each:::if->throw->new->NullPointerException->mc->for->e->if->throw->new->ConcurrentModificationException
LinkedHashMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->LinkedValues->return
LinkedHashMap.LinkedValues#size()::: linked values size:::return
LinkedHashMap.LinkedValues#clear()::: linked values clear:::LinkedHashMap.this->clear
LinkedHashMap.LinkedValues#iterator()::: linked values iterator:::return->new->LinkedValueIterator
LinkedHashMap.LinkedValues#contains(Object)::: linked values contains:::return->containsValue
LinkedHashMap.LinkedValues#spliterator()::: linked values spliterator:::return->Spliterators->spliterator
LinkedHashMap.LinkedValues#forEach(Consumer)::: linked values for each:::if->throw->new->NullPointerException->mc->for->e->if->throw->new->ConcurrentModificationException
LinkedHashMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->return->new->LinkedEntrySet
LinkedHashMap.LinkedEntrySet#size()::: linked entry set size:::return
LinkedHashMap.LinkedEntrySet#clear()::: linked entry set clear:::LinkedHashMap.this->clear
LinkedHashMap.LinkedEntrySet#iterator()::: linked entry set iterator:::return->new->LinkedEntryIterator
LinkedHashMap.LinkedEntrySet#contains(Object)::: linked entry set contains:::if->return->e->key->e->getKey->candidate->hash->getNode->return->candidate->equals
LinkedHashMap.LinkedEntrySet#remove(Object)::: linked entry set remove:::if->e->key->e->getKey->value->e->getValue->return->hash->removeNode->return
LinkedHashMap.LinkedEntrySet#spliterator()::: linked entry set spliterator:::return->Spliterators->spliterator
LinkedHashMap.LinkedEntrySet#forEach(Consumer>)::: linked entry set for each:::if->throw->new->NullPointerException->mc->for->e->if->throw->new->ConcurrentModificationException
LinkedHashMap#forEach(BiConsumer)::: linked hash map for each:::if->throw->new->NullPointerException->mc->for->e->if->throw->new->ConcurrentModificationException
LinkedHashMap#replaceAll(BiFunction)::: linked hash map replace all:::if->throw->new->NullPointerException->mc->for->e->if->throw->new->ConcurrentModificationException
LinkedHashMap.LinkedHashIterator#hasNext()::: linked hash iterator has next:::return
LinkedHashMap.LinkedHashIterator#nextNode()::: linked hash iterator next node:::e->if->throw->new->ConcurrentModificationException->if->throw->new->NoSuchElementException->return
LinkedHashMap.LinkedHashIterator#remove()::: linked hash iterator remove:::p->if->throw->new->IllegalStateException->if->throw->new->ConcurrentModificationException->removeNode
LinkedHashMap.LinkedKeyIterator#next()::: linked key iterator next:::return->nextNode->getKey
LinkedHashMap.LinkedValueIterator#next()::: linked value iterator next:::return->nextNode
LinkedHashMap.LinkedEntryIterator#next()::: linked entry iterator next:::return->nextNode
LinkedHashSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set:::return->Spliterators->spliterator
LinkedList#linkFirst(E):::Links e as first element.:::f->newNode->new->Node<>->if->else
LinkedList#linkLast(E):::Links e as last element.:::l->newNode->new->Node<>->if->else
LinkedList#linkBefore(E, Node):::Inserts element e before non-null Node succ.:::pred->newNode->new->Node<>->if->else
LinkedList#unlinkFirst(Node):::Unlinks non-null first node f.:::element->next->if->else->return
LinkedList#unlinkLast(Node):::Unlinks non-null last node l.:::element->prev->if->else->return
LinkedList#unlink(Node):::Unlinks non-null node x.:::element->next->prev->if->else->if->else->return
LinkedList#getFirst():::Returns the first element in this list.:::f->if->throw->new->NoSuchElementException->return
LinkedList#getLast():::Returns the last element in this list.:::l->if->throw->new->NoSuchElementException->return
LinkedList#removeFirst():::Removes and returns the first element from this list.:::f->if->throw->new->NoSuchElementException->return->unlinkFirst
LinkedList#removeLast():::Removes and returns the last element from this list.:::l->if->throw->new->NoSuchElementException->return->unlinkLast
LinkedList#addFirst(E):::Inserts the specified element at the beginning of this list.:::linkFirst
LinkedList#addLast(E):::Appends the specified element to the end of this list:::linkLast
LinkedList#contains(Object):::Returns true if this list contains the specified element:::return->indexOf
LinkedList#size():::Returns the number of elements in this list.:::return
LinkedList#add(E):::Appends the specified element to the end of this list:::linkLast->return
LinkedList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present:::if->for->x->else->for->x->return
LinkedList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator:::return->addAll
LinkedList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position:::checkPositionIndex->a->c->toArray->numNew->if->return->pred->succ->if->else->node->foreach->e->newNode->new->Node<>->if->else->if->else->return
LinkedList#clear():::Removes all of the elements from this list:::for->x
LinkedList#get(int):::Returns the element at the specified position in this list.:::checkElementIndex->return->node
LinkedList#set(int, E):::Replaces the element at the specified position in this list with the specified element.:::checkElementIndex->x->node->oldVal->return
LinkedList#add(int, E):::Inserts the specified element at the specified position in this list:::checkPositionIndex->if->linkLast->else->node->linkBefore
LinkedList#remove(int):::Removes the element at the specified position in this list:::checkElementIndex->return->node->unlink
LinkedList#isElementIndex(int):::Tells if the argument is the index of an existing element.:::return
LinkedList#isPositionIndex(int):::Tells if the argument is the index of a valid position for an iterator or an add operation.:::return
LinkedList#outOfBoundsMsg(int):::Constructs an IndexOutOfBoundsException detail message:::return
LinkedList#checkElementIndex(int)::: linked list check element index:::if->isElementIndex->throw->outOfBoundsMsg->new->IndexOutOfBoundsException
LinkedList#checkPositionIndex(int)::: linked list check position index:::if->isPositionIndex->throw->outOfBoundsMsg->new->IndexOutOfBoundsException
LinkedList#node(int):::Returns the (non-null) Node at the specified element index.:::if->x->for->i->return->else->x->for->i->return
LinkedList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element:::index->if->for->x->else->for->x->return
LinkedList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element:::index->if->for->x->else->for->x->return
LinkedList#peek():::Retrieves, but does not remove, the head (first element) of this list.:::f->return
LinkedList#element():::Retrieves, but does not remove, the head (first element) of this list.:::return->getFirst
LinkedList#poll():::Retrieves and removes the head (first element) of this list.:::f->return->unlinkFirst
LinkedList#remove():::Retrieves and removes the head (first element) of this list.:::return->removeFirst
LinkedList#offer(E):::Adds the specified element as the tail (last element) of this list.:::return->add
LinkedList#offerFirst(E):::Inserts the specified element at the front of this list.:::addFirst->return
LinkedList#offerLast(E):::Inserts the specified element at the end of this list.:::addLast->return
LinkedList#peekFirst():::Retrieves, but does not remove, the first element of this list, or returns null if this list is empty.:::f->return
LinkedList#peekLast():::Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.:::l->return
LinkedList#pollFirst():::Retrieves and removes the first element of this list, or returns null if this list is empty.:::f->return->unlinkFirst
LinkedList#pollLast():::Retrieves and removes the last element of this list, or returns null if this list is empty.:::l->return->unlinkLast
LinkedList#push(E):::Pushes an element onto the stack represented by this list:::addFirst
LinkedList#pop():::Pops an element from the stack represented by this list:::return->removeFirst
LinkedList#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element in this list (when traversing the list from head to tail):::return->remove
LinkedList#removeLastOccurrence(Object):::Removes the last occurrence of the specified element in this list (when traversing the list from head to tail):::if->for->x->else->for->x->return
LinkedList#listIterator(int):::Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list:::checkPositionIndex->return->new->ListItr
LinkedList.ListItr#hasNext()::: list itr has next:::return
LinkedList.ListItr#next()::: list itr next:::checkForComodification->if->hasNext->throw->new->NoSuchElementException->return
LinkedList.ListItr#hasPrevious()::: list itr has previous:::return
LinkedList.ListItr#previous()::: list itr previous:::checkForComodification->if->hasPrevious->throw->new->NoSuchElementException->return
LinkedList.ListItr#nextIndex()::: list itr next index:::return
LinkedList.ListItr#previousIndex()::: list itr previous index:::return
LinkedList.ListItr#remove()::: list itr remove:::checkForComodification->if->throw->new->IllegalStateException->lastNext->unlink->if->else
LinkedList.ListItr#set(E)::: list itr set:::if->throw->new->IllegalStateException->checkForComodification
LinkedList.ListItr#add(E)::: list itr add:::checkForComodification->if->linkLast->else->linkBefore
LinkedList.ListItr#forEachRemaining(Consumer)::: list itr for each remaining:::Objects->requireNonNull->while->action->accept->checkForComodification
LinkedList.ListItr#checkForComodification()::: list itr check for comodification:::if->throw->new->ConcurrentModificationException
LinkedList#descendingIterator()::: linked list descending iterator:::return->new->DescendingIterator
LinkedList.DescendingIterator#hasNext()::: descending iterator has next:::return->itr->hasPrevious
LinkedList.DescendingIterator#next()::: descending iterator next:::return->itr->previous
LinkedList.DescendingIterator#remove()::: descending iterator remove:::itr->remove
LinkedList#superClone()::: linked list super clone:::try->return->super->clone->catch->throw->new->InternalError->finally
LinkedList#clone():::Returns a shallow copy of this LinkedList:::clone->superClone->for->x->return
LinkedList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element):::result->new->ObjectArr->i->for->x->return
LinkedList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::if->a->getClass->getComponentType->newInstance->i->result->for->x->if->return
LinkedList#writeObject(java.io.ObjectOutputStream):::Saves the state of this LinkedList instance to a stream (that is, serializes it).:::s->defaultWriteObject->s->writeInt->for->x
LinkedList#readObject(java.io.ObjectInputStream):::Reconstitutes this LinkedList instance from a stream (that is, deserializes it).:::s->defaultReadObject->size->s->readInt->for->i
LinkedList#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list:::return->new->LLSpliterator<>
LinkedList.LLSpliterator#getEst()::: spliterator get est:::s->lst->if->if->else->return
LinkedList.LLSpliterator#estimateSize()::: spliterator estimate size:::return->getEst
LinkedList.LLSpliterator#trySplit()::: spliterator try split:::p->s->getEst->if->n->if->if->a->new->ObjectArr->j->do->while->return->Spliterators->spliterator->return
LinkedList.LLSpliterator#forEachRemaining(Consumer)::: spliterator for each remaining:::p->n->if->throw->new->NullPointerException->if->getEst->do->e->action->accept->while->if->throw->new->ConcurrentModificationException
LinkedList.LLSpliterator#tryAdvance(Consumer)::: spliterator try advance:::p->if->throw->new->NullPointerException->if->getEst->e->action->accept->if->throw->new->ConcurrentModificationException->return->return
LinkedList.LLSpliterator#characteristics()::: spliterator characteristics:::return
List#size():::Returns the number of elements in this list:::
List#isEmpty():::Returns true if this list contains no elements.:::
List#contains(Object):::Returns true if this list contains the specified element:::
List#iterator():::Returns an iterator over the elements in this list in proper sequence.:::
List#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element):::
List#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::
List#add(E):::Appends the specified element to the end of this list (optional operation):::
List#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present (optional operation):::
List#containsAll(Collection):::Returns true if this list contains all of the elements of the specified collection.:::
List#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation):::
List#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list at the specified position (optional operation):::
List#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection (optional operation).:::
List#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection (optional operation):::
List#replaceAll(UnaryOperator):::Replaces each element of this list with the result of applying the operator to that element:::Objects->requireNonNull->li->this->listIterator->while->li->hasNext->li->operator->li->next->apply->set
List#sort(Comparator):::Sorts this list according to the order induced by the specified Comparator:::a->this->toArray->Arrays->sort->i->this->listIterator->foreach->i->next->i->set
List#clear():::Removes all of the elements from this list (optional operation):::
List#equals(Object):::Compares the specified object with this list for equality:::
List#hashCode():::Returns the hash code value for this list:::
List#get(int):::Returns the element at the specified position in this list.:::
List#set(int, E):::Replaces the element at the specified position in this list with the specified element (optional operation).:::
List#add(int, E):::Inserts the specified element at the specified position in this list (optional operation):::
List#remove(int):::Removes the element at the specified position in this list (optional operation):::
List#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element:::
List#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element:::
List#listIterator():::Returns a list iterator over the elements in this list (in proper sequence).:::
List#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list:::
List#subList(int, int):::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive:::
List#spliterator():::Creates a Spliterator over the elements in this list:::if->return->new->AbstractList.RandomAccessSpliterator<>->else->return->Spliterators->spliterator
List#of():::Returns an unmodifiable list containing zero elements:::return->ImmutableCollections->emptyList
List#of(E):::Returns an unmodifiable list containing one element:::return->new->ImmutableCollections.List12<>
List#of(E, E):::Returns an unmodifiable list containing two elements:::return->new->ImmutableCollections.List12<>
List#of(E, E, E):::Returns an unmodifiable list containing three elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E):::Returns an unmodifiable list containing four elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E):::Returns an unmodifiable list containing five elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E):::Returns an unmodifiable list containing six elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E, E):::Returns an unmodifiable list containing seven elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing eight elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing nine elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing ten elements:::return->new->ImmutableCollections.ListN<>
List#of(E...):::Returns an unmodifiable list containing an arbitrary number of elements:::switch->return->ImmutableCollections->emptyList->return->new->ImmutableCollections.List12<>->return->new->ImmutableCollections.List12<>->return->new->ImmutableCollections.ListN<>
List#copyOf(Collection):::Returns an unmodifiable List containing the elements of the given Collection, in its iteration order:::return->ImmutableCollections->listCopy
ListIterator#hasNext():::Returns true if this list iterator has more elements when traversing the list in the forward direction:::
ListIterator#next():::Returns the next element in the list and advances the cursor position:::
ListIterator#hasPrevious():::Returns true if this list iterator has more elements when traversing the list in the reverse direction:::
ListIterator#previous():::Returns the previous element in the list and moves the cursor position backwards:::
ListIterator#nextIndex():::Returns the index of the element that would be returned by a subsequent call to #next:::
ListIterator#previousIndex():::Returns the index of the element that would be returned by a subsequent call to #previous:::
ListIterator#remove():::Removes from the list the last element that was returned by #next or #previous (optional operation):::
ListIterator#set(E):::Replaces the last element returned by #next or #previous with the specified element (optional operation):::
ListIterator#add(E):::Inserts the specified element into the list (optional operation):::
ListResourceBundle#handleGetObject(String)::: list resource bundle handle get object:::if->loadLookup->if->throw->new->NullPointerException->return->lookup->get
ListResourceBundle#getKeys():::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.:::if->loadLookup->parent->return->lookup->keySet->parent->getKeys->new->ResourceBundleEnumeration
ListResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle.:::if->loadLookup->return->lookup->keySet
ListResourceBundle#getContents():::Returns an array in which each item is a pair of objects in an Object array:::
ListResourceBundle#loadLookup():::We lazily load the lookup hashtable:::if->return->contents->getContents->temp->new->HashMap<>->foreach->key->value->if->throw->new->NullPointerException->temp->put
Locale#createConstant(String, String):::This method must be called only for creating the Locale.* constants due to making shortcuts.:::base->BaseLocale->createInstance->return->getInstance
Locale#getInstance(String, String, String):::Returns a Locale constructed from the given language, country and variant:::return->getInstance
Locale#getInstance(String, String, String, String, LocaleExtensions)::: locale get instance:::if->throw->new->NullPointerException->if->getCompatibilityExtensions->baseloc->BaseLocale->getInstance->return->getInstance
Locale#getInstance(BaseLocale, LocaleExtensions)::: locale get instance:::if->return->LOCALECACHE->get->else->key->new->LocaleKey->return->LOCALECACHE->get
Locale.Cache#createObject(Object)::: cache create object:::if->return->new->Locale->else->lk->return->new->Locale
Locale.LocaleKey#equals(Object)::: locale key equals:::if->return->if->return->other->if->base->equals->return->if->return->return->exts->equals
Locale.LocaleKey#hashCode()::: locale key hash code:::return
Locale#getDefault():::Gets the current value of the default locale for this instance of the Java Virtual Machine:::return
Locale#getDefault(Locale.Category):::Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine:::switch->if->synchronized->if->initDefault->return->if->synchronized->if->initDefault->return->return->getDefault
Locale#initDefault()::: locale init default:::language->region->script->country->variant->props->GetPropertyAction->privilegedGetProperties->props->getProperty->props->getProperty->if->i->region->indexOf->if->region->substring->region->substring->else->else->props->getProperty->props->getProperty->props->getProperty->return->props->getProperty->getDefaultExtensions->orElse->getInstance
Locale#initDefault(Locale.Category)::: locale init default:::props->GetPropertyAction->privilegedGetProperties->return->props->defaultLocale->getLanguage->getProperty->props->defaultLocale->getScript->getProperty->props->defaultLocale->getCountry->getProperty->props->defaultLocale->getVariant->getProperty->props->getProperty->getDefaultExtensions->defaultLocale->getLocaleExtensions->orElse->getInstance
Locale#getDefaultExtensions(String)::: locale get default extensions:::exts->try->new->InternalLocaleBuilder->setExtensions->getLocaleExtensions->catch->finally->return->Optional->ofNullable
Locale#setDefault(Locale):::Sets the default locale for this instance of the Java Virtual Machine:::setDefault->setDefault
Locale#setDefault(Locale.Category, Locale):::Sets the default locale for the specified Category for this instance of the Java Virtual Machine:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->sm->System->getSecurityManager->if->sm->new->PropertyPermission->checkPermission->switch->break->break
Locale#getAvailableLocales():::Returns an array of all installed locales:::return->LocaleServiceProviderPool->getAllAvailableLocales
Locale#getISOCountries():::Returns a list of all 2-letter country codes defined in ISO 3166:::if->getISO2Table->result->new->StringArr->System->arraycopy->return
Locale#getISOCountries(IsoCountryCode):::Returns a Set of ISO3166 country codes for the specified type.:::Objects->requireNonNull->return->IsoCountryCode->retrieveISOCountryCodes
Locale#getISOLanguages():::Returns a list of all 2-letter language codes defined in ISO 639:::if->getISO2Table->result->new->StringArr->System->arraycopy->return
Locale#getISO2Table(String)::: locale get o2 table:::len->table->length->isoTable->new->StringArr->for->i->j->return
Locale#getLanguage():::Returns the language code of this Locale:::return->baseLocale->getLanguage
Locale#getScript():::Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code:::return->baseLocale->getScript
Locale#getCountry():::Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.:::return->baseLocale->getRegion
Locale#getVariant():::Returns the variant code for this locale.:::return->baseLocale->getVariant
Locale#hasExtensions():::Returns true if this Locale has any  extensions.:::return
Locale#stripExtensions():::Returns a copy of this Locale with no  extensions:::return->hasExtensions->Locale->getInstance
Locale#getExtension(char):::Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key:::if->LocaleExtensions->isValidKey->throw->new->IllegalArgumentException->return->hasExtensions->localeExtensions->getExtensionValue
Locale#getExtensionKeys():::Returns the set of extension keys associated with this locale, or the empty set if it has no extensions:::if->hasExtensions->return->Collections->emptySet->return->localeExtensions->getKeys
Locale#getUnicodeLocaleAttributes():::Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes:::if->hasExtensions->return->Collections->emptySet->return->localeExtensions->getUnicodeLocaleAttributes
Locale#getUnicodeLocaleType(String):::Returns the Unicode locale type associated with the specified Unicode locale key for this locale:::if->isUnicodeExtensionKey->throw->new->IllegalArgumentException->return->hasExtensions->localeExtensions->getUnicodeLocaleType
Locale#getUnicodeLocaleKeys():::Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none:::if->return->Collections->emptySet->return->localeExtensions->getUnicodeLocaleKeys
Locale#getBaseLocale():::Package locale method returning the Locale's BaseLocale, used by ResourceBundle:::return
Locale#getLocaleExtensions():::Package private method returning the Locale's LocaleExtensions, used by ResourceBundle.:::return
Locale#toString():::Returns a string representation of this Locale object, consisting of language, country, variant, script, and extensions as below:  language + "_" + country + "_" + (variant + "_#" | "#") + script + "_" + extensions   Language is always lower case, country is always upper case, script is always title case, and extensions are always lower case:::l->baseLocale->getLanguage->length->s->baseLocale->getScript->length->r->baseLocale->getRegion->length->v->baseLocale->getVariant->length->e->localeExtensions->getID->length->result->baseLocale->getLanguage->new->StringBuilder->if->result->append->baseLocale->getRegion->append->if->result->append->baseLocale->getVariant->append->if->result->append->baseLocale->getScript->append->if->result->append->if->result->append->result->localeExtensions->getID->append->return->result->toString
Locale#toLanguageTag():::Returns a well-formed IETF BCP 47 language tag representing this locale:::if->return->tag->LanguageTag->parseLocale->buf->new->StringBuilder->subtag->tag->getLanguage->if->subtag->length->buf->LanguageTag->canonicalizeLanguage->append->tag->getScript->if->subtag->length->buf->append->buf->LanguageTag->canonicalizeScript->append->tag->getRegion->if->subtag->length->buf->append->buf->LanguageTag->canonicalizeRegion->append->subtags->tag->getVariants->foreach->buf->append->buf->append->tag->getExtensions->foreach->buf->append->buf->LanguageTag->canonicalizeExtension->append->tag->getPrivateuse->if->subtag->length->if->buf->length->buf->append->buf->append->append->buf->append->langTag->buf->toString->synchronized->if->return
Locale#forLanguageTag(String):::Returns a locale for the specified IETF BCP 47 language tag string:::tag->LanguageTag->parse->bldr->new->InternalLocaleBuilder->bldr->setLanguageTag->base->bldr->getBaseLocale->exts->bldr->getLocaleExtensions->if->base->getVariant->length->base->getLanguage->base->getScript->base->getRegion->base->getVariant->getCompatibilityExtensions->return->getInstance
Locale#getISO3Language():::Returns a three-letter abbreviation of this locale's language:::lang->baseLocale->getLanguage->if->lang->length->return->language3->getISO3Code->if->throw->toString->new->MissingResourceException->return
Locale#getISO3Country():::Returns a three-letter abbreviation for this locale's country:::country3->baseLocale->getRegion->getISO3Code->if->throw->baseLocale->getRegion->toString->new->MissingResourceException->return
Locale#getISO3Code(String, String)::: locale get o3 code:::codeLength->iso2Code->length->if->return->tableLength->table->length->index->if->c1->iso2Code->charAt->c2->iso2Code->charAt->for->return->table->substring
Locale#getDisplayLanguage():::Returns a name for the locale's language that is appropriate for display to the user:::return->getDefault->getDisplayLanguage
Locale#getDisplayLanguage(Locale):::Returns a name for the locale's language that is appropriate for display to the user:::return->baseLocale->getLanguage->getDisplayString
Locale#getDisplayScript():::Returns a name for the locale's script that is appropriate for display to the user:::return->getDefault->getDisplayScript
Locale#getDisplayScript(Locale):::Returns a name for the locale's script that is appropriate for display to the user:::return->baseLocale->getScript->getDisplayString
Locale#getDisplayCountry():::Returns a name for the locale's country that is appropriate for display to the user:::return->getDefault->getDisplayCountry
Locale#getDisplayCountry(Locale):::Returns a name for the locale's country that is appropriate for display to the user:::return->baseLocale->getRegion->getDisplayString
Locale#getDisplayString(String, String, Locale, int)::: locale get display string:::Objects->requireNonNull->Objects->requireNonNull->if->code->isEmpty->return->pool->LocaleServiceProviderPool->getPool->rbKey->result->pool->getLocalizedObject->return
Locale#getDisplayVariant():::Returns a name for the locale's variant code that is appropriate for display to the user:::return->getDefault->getDisplayVariant
Locale#getDisplayVariant(Locale):::Returns a name for the locale's variant code that is appropriate for display to the user:::if->baseLocale->getVariant->length->return->lr->LocaleProviderAdapter->getResourceBundleBased->getLocaleResources->names->getDisplayVariantArray->return->lr->getLocaleName->formatList
Locale#getDisplayName():::Returns a name for the locale that is appropriate for display to the user:::return->getDefault->getDisplayName
Locale#getDisplayName(Locale):::Returns a name for the locale that is appropriate for display to the user:::lr->LocaleProviderAdapter->getResourceBundleBased->getLocaleResources->languageName->getDisplayLanguage->scriptName->getDisplayScript->countryName->getDisplayCountry->variantNames->getDisplayVariantArray->displayNamePattern->lr->getLocaleName->listCompositionPattern->lr->getLocaleName->mainName->qualifierNames->if->languageName->length->scriptName->length->countryName->length->if->return->else->return->formatList->names->new->ArrayList<>->if->languageName->length->names->add->if->scriptName->length->names->add->if->countryName->length->names->add->if->names->Arrays->asList->addAll->if->localeExtensions->getUnicodeLocaleAttributes->stream->getDisplayString->map->names->add->forEach->localeExtensions->getUnicodeLocaleKeys->stream->getDisplayKeyTypeExtensionString->map->names->add->forEach->names->get->numNames->names->size->names->subList->new->StringArr->toArray->new->StringArr->displayNames->formatList->if->return->new->MessageFormat->format->else->result->new->StringBuilder->result->append->if->result->append->result->append->result->append->return->result->toString
Locale#clone():::Overrides Cloneable.:::try->that->super->clone->return->catch->throw->new->InternalError->finally
Locale#hashCode():::Override hashCode:::hc->if->baseLocale->hashCode->if->localeExtensions->hashCode->return
Locale#equals(Object):::Returns true if this Locale is equal to another object:::if->return->if->return->otherBase->if->baseLocale->equals->return->if->return->return->localeExtensions->equals
Locale#getDisplayVariantArray(Locale):::Return an array of the display names of the variant.:::tokenizer->baseLocale->getVariant->new->StringTokenizer->names->tokenizer->countTokens->new->StringArr->for->i->return
Locale#getDisplayKeyTypeExtensionString(String, LocaleResources, Locale)::: locale get display key type extension string:::type->localeExtensions->getUnicodeLocaleType->ret->getDisplayString->if->ret->equals->displayType->switch->lr->type->toLowerCase->getCurrencyName->break->if->type->matches->lr->type->substring->toUpperCase->getLocaleName->break->TimeZoneNameUtility->convertLDMLShortID->TimeZoneNameUtility->retrieveGenericDisplayName->map->orElse->break->MessageFormat->lr->getLocaleName->getDisplayString->Optional->ofNullable->orElse->format->return
Locale#formatList(String[], String):::Format a list using given pattern strings:::if->return->Arrays->stream->Collectors->joining->collect->switch->return->return->return->Arrays->stream->if->s1->equals->return->if->s2->equals->return->return->MessageFormat->format->reduce
Locale#isUnicodeExtensionKey(String)::: locale is unicode extension key:::return->s->length->LocaleUtils->isAlphaNumericString
Locale#writeObject(ObjectOutputStream):::Serializes this Locale to the specified ObjectOutputStream.:::fields->out->putFields->fields->baseLocale->getLanguage->put->fields->baseLocale->getScript->put->fields->baseLocale->getRegion->put->fields->baseLocale->getVariant->put->fields->localeExtensions->getID->put->fields->put->out->writeFields
Locale#readObject(ObjectInputStream):::Deserializes this Locale.:::fields->in->readFields->language->fields->get->script->fields->get->country->fields->get->variant->fields->get->extStr->fields->get->BaseLocale->convertOldISOCodes->getInstance->if->extStr->length->try->bldr->new->InternalLocaleBuilder->bldr->setExtensions->bldr->getLocaleExtensions->catch->throw->e->getMessage->new->IllformedLocaleException->finally->else
Locale#readResolve():::Returns a cached Locale instance equivalent to the deserialized Locale:::return->baseLocale->getLanguage->baseLocale->getScript->baseLocale->getRegion->baseLocale->getVariant->getInstance
Locale#convertOldISOCodes(String)::: locale convert old codes:::LocaleUtils->toLowerString->intern->if->return->else->if->return->else->if->return->else->return
Locale#getCompatibilityExtensions(String, String, String, String)::: locale get compatibility extensions:::extensions->if->LocaleUtils->caseIgnoreMatch->script->length->LocaleUtils->caseIgnoreMatch->equals->else->if->LocaleUtils->caseIgnoreMatch->script->length->LocaleUtils->caseIgnoreMatch->equals->return
Locale.LocaleNameGetter#getObject(LocaleNameProvider, Locale, String, Object...)::: locale name getter get object:::type->code->cat->switch->return->localeNameProvider->getDisplayLanguage->return->localeNameProvider->getDisplayCountry->return->localeNameProvider->getDisplayVariant->return->localeNameProvider->getDisplayScript->return->localeNameProvider->getDisplayUnicodeExtensionKey->return->localeNameProvider->getDisplayUnicodeExtensionType->return
Locale.Builder#setLocale(Locale):::Resets the Builder to match the provided locale:::try->localeBuilder->setLocale->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setLanguageTag(String):::Resets the Builder to match the provided IETF BCP 47 language tag:::sts->new->ParseStatus->tag->LanguageTag->parse->if->sts->isError->throw->sts->getErrorMessage->sts->getErrorIndex->new->IllformedLocaleException->localeBuilder->setLanguageTag->return
Locale.Builder#setLanguage(String):::Sets the language:::try->localeBuilder->setLanguage->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setScript(String):::Sets the script:::try->localeBuilder->setScript->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setRegion(String):::Sets the region:::try->localeBuilder->setRegion->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setVariant(String):::Sets the variant:::try->localeBuilder->setVariant->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setExtension(char, String):::Sets the extension for the given key:::try->localeBuilder->setExtension->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setUnicodeLocaleKeyword(String, String):::Sets the Unicode locale keyword type for the given key:::try->localeBuilder->setUnicodeLocaleKeyword->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#addUnicodeLocaleAttribute(String):::Adds a unicode locale attribute, if not already present, otherwise has no effect:::try->localeBuilder->addUnicodeLocaleAttribute->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#removeUnicodeLocaleAttribute(String):::Removes a unicode locale attribute, if present, otherwise has no effect:::Objects->requireNonNull->try->localeBuilder->removeUnicodeLocaleAttribute->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#clear():::Resets the builder to its initial, empty state.:::localeBuilder->clear->return
Locale.Builder#clearExtensions():::Resets the extensions to their initial, empty state:::localeBuilder->clearExtensions->return
Locale.Builder#build():::Returns an instance of Locale created from the fields set on this builder:::baseloc->localeBuilder->getBaseLocale->extensions->localeBuilder->getLocaleExtensions->if->baseloc->getVariant->length->baseloc->getLanguage->baseloc->getScript->baseloc->getRegion->baseloc->getVariant->getCompatibilityExtensions->return->Locale->getInstance
Locale.LanguageRange#isSubtagIllFormed(String, boolean)::: language range is subtag ill formed:::if->subtag->equals->subtag->length->return->else->if->subtag->equals->return->charArray->subtag->toCharArray->if->foreach->if->return->else->foreach->if->return->return
Locale.LanguageRange#getRange():::Returns the language range of this LanguageRange.:::return
Locale.LanguageRange#getWeight():::Returns the weight of this LanguageRange.:::return
Locale.LanguageRange#parse(String):::Parses the given ranges to generate a Language Priority List:::return->LocaleMatcher->parse
Locale.LanguageRange#parse(String, Map>):::Parses the given ranges to generate a Language Priority List, and then customizes the list using the given map:::return->parse->mapEquivalents
Locale.LanguageRange#mapEquivalents(List, Map>):::Generates a new customized Language Priority List using the given priorityList and map:::return->LocaleMatcher->mapEquivalents
Locale.LanguageRange#hashCode():::Returns a hash code value for the object.:::h->if->range->hashCode->bitsWeight->Double->doubleToLongBits->if->return
Locale.LanguageRange#equals(Object):::Compares this object to the specified object:::if->return->if->return->other->return->range->equals
Locale.LanguageRange#toString():::Returns an informative string representation of this LanguageRange object, consisting of language range and weight if the range is weighted and the weight is less than the max weight.:::return
Locale#filter(List, Collection, FilteringMode):::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647:::return->LocaleMatcher->filter
Locale#filter(List, Collection):::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647:::return->filter
Locale#filterTags(List, Collection, FilteringMode):::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647:::return->LocaleMatcher->filterTags
Locale#filterTags(List, Collection):::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647:::return->filterTags
Locale#lookup(List, Collection):::Returns a Locale instance for the best-matching language tag using the lookup mechanism defined in RFC 4647.:::return->LocaleMatcher->lookup
Locale#lookupTag(List, Collection):::Returns the best-matching language tag using the lookup mechanism defined in RFC 4647:::return->LocaleMatcher->lookupTag
LocaleISOData#computeISO3166_1Alpha3Countries():::This method computes a set of ISO3166-1 alpha-3 country codes from existing isoCountryTable.:::tableLength->isoCountryTable->length->isoTable->new->StringArr->for->i->index->return->Set->of
LongSummaryStatistics#accept(int):::Records a new int value into the summary information.:::accept
LongSummaryStatistics#accept(long):::Records a new long value into the summary information.:::Math->min->Math->max
LongSummaryStatistics#combine(LongSummaryStatistics):::Combines the state of another LongSummaryStatistics into this one.:::Math->min->Math->max
LongSummaryStatistics#getCount():::Returns the count of values recorded.:::return
LongSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded.:::return
LongSummaryStatistics#getMin():::Returns the minimum value recorded, or Long.MAX_VALUE if no values have been recorded.:::return
LongSummaryStatistics#getMax():::Returns the maximum value recorded, or Long.MIN_VALUE if no values have been recorded:::return
LongSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.:::return->getCount->getSum->getCount
LongSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging:::return->String->this->getClass->getSimpleName->getCount->getSum->getMin->getAverage->getMax->format
Map#size():::Returns the number of key-value mappings in this map:::
Map#isEmpty():::Returns true if this map contains no key-value mappings.:::
Map#containsKey(Object):::Returns true if this map contains a mapping for the specified key:::
Map#containsValue(Object):::Returns true if this map maps one or more keys to the specified value:::
Map#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::
Map#put(K, V):::Associates the specified value with the specified key in this map (optional operation):::
Map#remove(Object):::Removes the mapping for a key from this map if it is present (optional operation):::
Map#putAll(Map):::Copies all of the mappings from the specified map to this map (optional operation):::
Map#clear():::Removes all of the mappings from this map (optional operation):::
Map#keySet():::Returns a Set view of the keys contained in this map:::
Map#values():::Returns a Collection view of the values contained in this map:::
Map#entrySet():::Returns a Set view of the mappings contained in this map:::
Map.Entry#getKey():::Returns the key corresponding to this entry.:::
Map.Entry#getValue():::Returns the value corresponding to this entry:::
Map.Entry#setValue(V):::Replaces the value corresponding to this entry with the specified value (optional operation):::
Map.Entry#equals(Object):::Compares the specified object with this entry for equality:::
Map.Entry#hashCode():::Returns the hash code value for this map entry:::
Map.Entry#comparingByKey():::Returns a comparator that compares Map.Entry in natural order on key:::return->c1->getKey->c2->getKey->compareTo
Map.Entry#comparingByValue():::Returns a comparator that compares Map.Entry in natural order on value:::return->c1->getValue->c2->getValue->compareTo
Map.Entry#comparingByKey(Comparator):::Returns a comparator that compares Map.Entry by key using the given Comparator:::Objects->requireNonNull->return->cmp->c1->getKey->c2->getKey->compare
Map.Entry#comparingByValue(Comparator):::Returns a comparator that compares Map.Entry by value using the given Comparator:::Objects->requireNonNull->return->cmp->c1->getValue->c2->getValue->compare
Map#equals(Object):::Compares the specified object with this map for equality:::
Map#hashCode():::Returns the hash code value for this map:::
Map#getOrDefault(Object, V):::Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.:::v->return->get->containsKey
Map#forEach(BiConsumer):::Performs the given action for each entry in this map until all entries have been processed or the action throws an exception:::Objects->requireNonNull->foreach->entrySet->k->v->try->entry->getKey->entry->getValue->catch->throw->new->ConcurrentModificationException->finally->action->accept
Map#replaceAll(BiFunction):::Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception:::Objects->requireNonNull->foreach->entrySet->k->v->try->entry->getKey->entry->getValue->catch->throw->new->ConcurrentModificationException->finally->function->apply->try->entry->setValue->catch->throw->new->ConcurrentModificationException->finally
Map#putIfAbsent(K, V):::If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.:::v->get->if->put->return
Map#remove(Object, Object):::Removes the entry for the specified key only if it is currently mapped to the specified value.:::curValue->get->if->Objects->equals->containsKey->return->remove->return
Map#replace(K, V, V):::Replaces the entry for the specified key only if currently mapped to the specified value.:::curValue->get->if->Objects->equals->containsKey->return->put->return
Map#replace(K, V):::Replaces the entry for the specified key only if it is currently mapped to some value.:::curValue->if->get->containsKey->put->return
Map#computeIfAbsent(K, Function):::If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null:::Objects->requireNonNull->v->if->get->newValue->if->mappingFunction->apply->put->return->return
Map#computeIfPresent(K, BiFunction):::If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value:::Objects->requireNonNull->oldValue->if->get->newValue->remappingFunction->apply->if->put->return->else->remove->return->else->return
Map#compute(K, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping):::Objects->requireNonNull->oldValue->get->newValue->remappingFunction->apply->if->if->containsKey->remove->return->else->return->else->put->return
Map#merge(K, V, BiFunction):::If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value:::Objects->requireNonNull->Objects->requireNonNull->oldValue->get->newValue->remappingFunction->apply->if->remove->else->put->return
Map#of():::Returns an unmodifiable map containing zero mappings:::return->ImmutableCollections->emptyMap
Map#of(K, V):::Returns an unmodifiable map containing a single mapping:::return->new->ImmutableCollections.Map1<>
Map#of(K, V, K, V):::Returns an unmodifiable map containing two mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V):::Returns an unmodifiable map containing three mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing four mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing five mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing six mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing seven mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing eight mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing nine mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing ten mappings:::return->new->ImmutableCollections.MapN<>
Map#ofEntries(Entry...):::Returns an unmodifiable map containing keys and values extracted from the given entries:::if->return->ImmutableCollections->emptyMap->else->if->return->getKey->getValue->new->ImmutableCollections.Map1<>->else->kva->new->ObjectArr->a->foreach->entry->getKey->entry->getValue->return->new->ImmutableCollections.MapN<>
Map#entry(K, V):::Returns an unmodifiable Entry containing the given key and value:::return->new->KeyValueHolder<>
Map#copyOf(Map):::Returns an unmodifiable Map containing the entries of the given Map:::if->return->else->return->Map->map->entrySet->new->EntryArr->toArray->ofEntries
MissingFormatArgumentException#getFormatSpecifier():::Returns the unmatched format specifier.:::return
MissingFormatArgumentException#getMessage()::: missing format argument exception get message:::return
MissingFormatWidthException#getFormatSpecifier():::Returns the format specifier which does not have a width.:::return
MissingFormatWidthException#getMessage()::: missing format width exception get message:::return
MissingResourceException#getClassName():::Gets parameter passed by constructor.:::return
MissingResourceException#getKey():::Gets parameter passed by constructor.:::return
NavigableMap#lowerEntry(K):::Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.:::
NavigableMap#lowerKey(K):::Returns the greatest key strictly less than the given key, or null if there is no such key.:::
NavigableMap#floorEntry(K):::Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.:::
NavigableMap#floorKey(K):::Returns the greatest key less than or equal to the given key, or null if there is no such key.:::
NavigableMap#ceilingEntry(K):::Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.:::
NavigableMap#ceilingKey(K):::Returns the least key greater than or equal to the given key, or null if there is no such key.:::
NavigableMap#higherEntry(K):::Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.:::
NavigableMap#higherKey(K):::Returns the least key strictly greater than the given key, or null if there is no such key.:::
NavigableMap#firstEntry():::Returns a key-value mapping associated with the least key in this map, or null if the map is empty.:::
NavigableMap#lastEntry():::Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.:::
NavigableMap#pollFirstEntry():::Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.:::
NavigableMap#pollLastEntry():::Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.:::
NavigableMap#descendingMap():::Returns a reverse order view of the mappings contained in this map:::
NavigableMap#navigableKeySet():::Returns a NavigableSet view of the keys contained in this map:::
NavigableMap#descendingKeySet():::Returns a reverse order NavigableSet view of the keys contained in this map:::
NavigableMap#subMap(K, boolean, K, boolean):::Returns a view of the portion of this map whose keys range from fromKey to toKey:::
NavigableMap#headMap(K, boolean):::Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey:::
NavigableMap#tailMap(K, boolean):::Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey:::
NavigableMap#subMap(K, K):::Equivalent to {@code subMap(fromKey, true, toKey, false).:::
NavigableMap#headMap(K):::Equivalent to {@code headMap(toKey, false).:::
NavigableMap#tailMap(K):::Equivalent to {@code tailMap(fromKey, true).:::
NavigableSet#lower(E):::Returns the greatest element in this set strictly less than the given element, or null if there is no such element.:::
NavigableSet#floor(E):::Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.:::
NavigableSet#ceiling(E):::Returns the least element in this set greater than or equal to the given element, or null if there is no such element.:::
NavigableSet#higher(E):::Returns the least element in this set strictly greater than the given element, or null if there is no such element.:::
NavigableSet#pollFirst():::Retrieves and removes the first (lowest) element, or returns null if this set is empty.:::
NavigableSet#pollLast():::Retrieves and removes the last (highest) element, or returns null if this set is empty.:::
NavigableSet#iterator():::Returns an iterator over the elements in this set, in ascending order.:::
NavigableSet#descendingSet():::Returns a reverse order view of the elements contained in this set:::
NavigableSet#descendingIterator():::Returns an iterator over the elements in this set, in descending order:::
NavigableSet#subSet(E, boolean, E, boolean):::Returns a view of the portion of this set whose elements range from fromElement to toElement:::
NavigableSet#headSet(E, boolean):::Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement:::
NavigableSet#tailSet(E, boolean):::Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement:::
NavigableSet#subSet(E, E):::Equivalent to {@code subSet(fromElement, true, toElement, false).:::
NavigableSet#headSet(E):::Equivalent to {@code headSet(toElement, false).:::
NavigableSet#tailSet(E):::Equivalent to {@code tailSet(fromElement, true).:::
Objects#equals(Object, Object):::Returns true if the arguments are equal to each other and false otherwise:::return->a->equals
Objects#deepEquals(Object, Object):::Returns true if the arguments are deeply equal to each other and false otherwise:::if->return->else->if->return->else->return->Arrays->deepEquals0
Objects#hashCode(Object):::Returns the hash code of a non-null argument and 0 for a null argument.:::return->o->hashCode
Objects#hash(Object...):::Generates a hash code for a sequence of input values:::return->Arrays->hashCode
Objects#toString(Object):::Returns the result of calling toString for a non-null argument and "null" for a null argument.:::return->String->valueOf
Objects#toString(Object, String):::Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.:::return->o->toString
Objects#compare(T, T, Comparator):::Returns 0 if the arguments are identical and c.compare(a, b) otherwise:::return->c->compare
Objects#requireNonNull(T):::Checks that the specified object reference is not null:::if->throw->new->NullPointerException->return
Objects#requireNonNull(T, String):::Checks that the specified object reference is not null and throws a customized NullPointerException if it is:::if->throw->new->NullPointerException->return
Objects#isNull(Object):::Returns true if the provided reference is null otherwise returns false.:::return
Objects#nonNull(Object):::Returns true if the provided reference is non-null otherwise returns false.:::return
Objects#requireNonNullElse(T, T):::Returns the first argument if it is non-null and otherwise returns the non-null second argument.:::return->requireNonNull
Objects#requireNonNullElseGet(T, Supplier):::Returns the first argument if it is non-null and otherwise returns the non-null value of supplier.get().:::return->requireNonNull->get->requireNonNull
Objects#requireNonNull(T, Supplier):::Checks that the specified object reference is not null and throws a customized NullPointerException if it is:::if->throw->messageSupplier->get->new->NullPointerException->return
Objects#checkIndex(int, int):::Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive):::return->Preconditions->checkIndex
Objects#checkFromToIndex(int, int, int):::Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive):::return->Preconditions->checkFromToIndex
Objects#checkFromIndexSize(int, int, int):::Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive):::return->Preconditions->checkFromIndexSize
Observable#addObserver(Observer):::Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set:::if->throw->new->NullPointerException->if->obs->contains->obs->addElement
Observable#deleteObserver(Observer):::Deletes an observer from the set of observers of this object:::obs->removeElement
Observable#notifyObservers():::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed:::notifyObservers
Observable#notifyObservers(Object):::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed:::arrLocal->synchronized->if->return->obs->toArray->clearChanged->for->i
Observable#deleteObservers():::Clears the observer list so that this object no longer has any observers.:::obs->removeAllElements
Observable#setChanged():::Marks this Observable object as having been changed; the hasChanged method will now return true.:::
Observable#clearChanged():::Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false:::
Observable#hasChanged():::Tests if this object has changed.:::return
Observable#countObservers():::Returns the number of observers of this Observable object.:::return->obs->size
Observer#update(Observable, Object):::This method is called whenever the observed object is changed:::
Optional#empty():::Returns an empty Optional instance:::t->return
Optional#of(T):::Returns an Optional describing the given non-null value.:::return->new->Optional<>
Optional#ofNullable(T):::Returns an Optional describing the given value, if non-null, otherwise returns an empty Optional.:::return->empty->of
Optional#get():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
Optional#isPresent():::If a value is present, returns true, otherwise false.:::return
Optional#isEmpty():::If a value is  not present, returns true, otherwise false.:::return
Optional#ifPresent(Consumer):::If a value is present, performs the given action with the value, otherwise does nothing.:::if->action->accept
Optional#ifPresentOrElse(Consumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.:::if->action->accept->else->emptyAction->run
Optional#filter(Predicate):::If a value is present, and the value matches the given predicate, returns an Optional describing the value, otherwise returns an empty Optional.:::Objects->requireNonNull->if->isPresent->return->else->return->predicate->test->empty
Optional#map(Function):::If a value is present, returns an Optional describing (as if by #ofNullable) the result of applying the given mapping function to the value, otherwise returns an empty Optional:::Objects->requireNonNull->if->isPresent->return->empty->else->return->Optional->mapper->apply->ofNullable
Optional#flatMap(Function>):::If a value is present, returns the result of applying the given Optional-bearing mapping function to the value, otherwise returns an empty Optional:::Objects->requireNonNull->if->isPresent->return->empty->else->r->mapper->apply->return->Objects->requireNonNull
Optional#or(Supplier>):::If a value is present, returns an Optional describing the value, otherwise returns an Optional produced by the supplying function.:::Objects->requireNonNull->if->isPresent->return->else->r->supplier->get->return->Objects->requireNonNull
Optional#stream():::If a value is present, returns a sequential Stream containing only that value, otherwise returns an empty Stream.:::if->isPresent->return->Stream->empty->else->return->Stream->of
Optional#orElse(T):::If a value is present, returns the value, otherwise returns other.:::return
Optional#orElseGet(Supplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.:::return->supplier->get
Optional#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
Optional#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.:::if->return->else->throw->exceptionSupplier->get
Optional#equals(Object):::Indicates whether some other object is "equal to" this Optional:::if->return->if->return->other->return->Objects->equals
Optional#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.:::return->Objects->hashCode
Optional#toString():::Returns a non-empty string representation of this Optional suitable for debugging:::return->String->format
OptionalDouble#empty():::Returns an empty OptionalDouble instance:::return
OptionalDouble#of(double):::Returns an OptionalDouble describing the given value.:::return->new->OptionalDouble
OptionalDouble#getAsDouble():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalDouble#isPresent():::If a value is present, returns true, otherwise false.:::return
OptionalDouble#isEmpty():::If a value is not present, returns true, otherwise false.:::return
OptionalDouble#ifPresent(DoubleConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.:::if->action->accept
OptionalDouble#ifPresentOrElse(DoubleConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.:::if->action->accept->else->emptyAction->run
OptionalDouble#stream():::If a value is present, returns a sequential DoubleStream containing only that value, otherwise returns an empty DoubleStream.:::if->return->DoubleStream->of->else->return->DoubleStream->empty
OptionalDouble#orElse(double):::If a value is present, returns the value, otherwise returns other.:::return
OptionalDouble#orElseGet(DoubleSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.:::return->supplier->getAsDouble
OptionalDouble#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalDouble#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.:::if->return->else->throw->exceptionSupplier->get
OptionalDouble#equals(Object):::Indicates whether some other object is "equal to" this OptionalDouble:::if->return->if->return->other->return->Double->compare
OptionalDouble#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.:::return->Double->hashCode
OptionalDouble#toString():::Returns a non-empty string representation of this OptionalDouble suitable for debugging:::return->String->format
OptionalInt#empty():::Returns an empty OptionalInt instance:::return
OptionalInt#of(int):::Returns an OptionalInt describing the given value.:::return->new->OptionalInt
OptionalInt#getAsInt():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalInt#isPresent():::If a value is present, returns true, otherwise false.:::return
OptionalInt#isEmpty():::If a value is not present, returns true, otherwise false.:::return
OptionalInt#ifPresent(IntConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.:::if->action->accept
OptionalInt#ifPresentOrElse(IntConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.:::if->action->accept->else->emptyAction->run
OptionalInt#stream():::If a value is present, returns a sequential IntStream containing only that value, otherwise returns an empty IntStream.:::if->return->IntStream->of->else->return->IntStream->empty
OptionalInt#orElse(int):::If a value is present, returns the value, otherwise returns other.:::return
OptionalInt#orElseGet(IntSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.:::return->supplier->getAsInt
OptionalInt#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalInt#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.:::if->return->else->throw->exceptionSupplier->get
OptionalInt#equals(Object):::Indicates whether some other object is "equal to" this OptionalInt:::if->return->if->return->other->return
OptionalInt#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.:::return->Integer->hashCode
OptionalInt#toString():::Returns a non-empty string representation of this OptionalInt suitable for debugging:::return->String->format
OptionalLong#empty():::Returns an empty OptionalLong instance:::return
OptionalLong#of(long):::Returns an OptionalLong describing the given value.:::return->new->OptionalLong
OptionalLong#getAsLong():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalLong#isPresent():::If a value is present, returns true, otherwise false.:::return
OptionalLong#isEmpty():::If a value is not present, returns true, otherwise false.:::return
OptionalLong#ifPresent(LongConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.:::if->action->accept
OptionalLong#ifPresentOrElse(LongConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.:::if->action->accept->else->emptyAction->run
OptionalLong#stream():::If a value is present, returns a sequential LongStream containing only that value, otherwise returns an empty LongStream.:::if->return->LongStream->of->else->return->LongStream->empty
OptionalLong#orElse(long):::If a value is present, returns the value, otherwise returns other.:::return
OptionalLong#orElseGet(LongSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.:::return->supplier->getAsLong
OptionalLong#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalLong#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.:::if->return->else->throw->exceptionSupplier->get
OptionalLong#equals(Object):::Indicates whether some other object is "equal to" this OptionalLong:::if->return->if->return->other->return
OptionalLong#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.:::return->Long->hashCode
OptionalLong#toString():::Returns a non-empty string representation of this OptionalLong suitable for debugging:::return->String->format
PrimitiveIterator#forEachRemaining(T_CONS):::Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception:::
PrimitiveIterator.OfInt#nextInt():::Returns the next int element in the iteration.:::
PrimitiveIterator.OfInt#forEachRemaining(IntConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception:::Objects->requireNonNull->while->hasNext->action->nextInt->accept
PrimitiveIterator.OfInt#next()::: of int next:::if->Tripwire->getClass->trip->return->nextInt
PrimitiveIterator.OfInt#forEachRemaining(Consumer)::: of int for each remaining:::if->forEachRemaining->else->Objects->requireNonNull->if->Tripwire->getClass->trip->action->accept->forEachRemaining
PrimitiveIterator.OfLong#nextLong():::Returns the next long element in the iteration.:::
PrimitiveIterator.OfLong#forEachRemaining(LongConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception:::Objects->requireNonNull->while->hasNext->action->nextLong->accept
PrimitiveIterator.OfLong#next()::: of long next:::if->Tripwire->getClass->trip->return->nextLong
PrimitiveIterator.OfLong#forEachRemaining(Consumer)::: of long for each remaining:::if->forEachRemaining->else->Objects->requireNonNull->if->Tripwire->getClass->trip->action->accept->forEachRemaining
PrimitiveIterator.OfDouble#nextDouble():::Returns the next double element in the iteration.:::
PrimitiveIterator.OfDouble#forEachRemaining(DoubleConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception:::Objects->requireNonNull->while->hasNext->action->nextDouble->accept
PrimitiveIterator.OfDouble#next()::: of double next:::if->Tripwire->getClass->trip->return->nextDouble
PrimitiveIterator.OfDouble#forEachRemaining(Consumer)::: of double for each remaining:::if->forEachRemaining->else->Objects->requireNonNull->if->Tripwire->getClass->trip->action->accept->forEachRemaining
PriorityQueue#ensureNonEmpty(Object[]):::Ensures that queue[0] exists, helping peek() and poll().:::return->new->ObjectArr
PriorityQueue#initFromPriorityQueue(PriorityQueue)::: priority queue init from priority queue:::if->c->getClass->c->toArray->ensureNonEmpty->c->size->else->initFromCollection
PriorityQueue#initElementsFromCollection(Collection)::: priority queue init elements from collection:::es->c->toArray->len->if->es->getClass->Arrays->copyOf->if->foreach->if->throw->new->NullPointerException->ensureNonEmpty
PriorityQueue#initFromCollection(Collection):::Initializes queue array with elements from the given Collection.:::initElementsFromCollection->heapify
PriorityQueue#grow(int):::Increases the capacity of the array.:::oldCapacity->newCapacity->if->hugeCapacity->Arrays->copyOf
PriorityQueue#hugeCapacity(int)::: priority queue huge capacity:::if->throw->new->OutOfMemoryError->return
PriorityQueue#add(E):::Inserts the specified element into this priority queue.:::return->offer
PriorityQueue#offer(E):::Inserts the specified element into this priority queue.:::if->throw->new->NullPointerException->i->if->grow->siftUp->return
PriorityQueue#peek()::: priority queue peek:::return
PriorityQueue#indexOf(Object)::: priority queue index of:::if->es->for->i->n->return
PriorityQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present:::i->indexOf->if->return->else->removeAt->return
PriorityQueue#removeEq(Object):::Identity-based version for use in Itr.remove.:::es->for->i->n
PriorityQueue#contains(Object):::Returns true if this queue contains the specified element:::return->indexOf
PriorityQueue#toArray():::Returns an array containing all of the elements in this queue:::return->Arrays->copyOf
PriorityQueue#toArray(T[]):::Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array:::size->if->return->Arrays->a->getClass->copyOf->System->arraycopy->if->return
PriorityQueue#iterator():::Returns an iterator over the elements in this queue:::return->new->Itr
PriorityQueue.Itr#hasNext()::: itr has next:::return->forgetMeNot->isEmpty
PriorityQueue.Itr#next()::: itr next:::if->throw->new->ConcurrentModificationException->if->return->if->forgetMeNot->poll->if->return->throw->new->NoSuchElementException
PriorityQueue.Itr#remove()::: itr remove:::if->throw->new->ConcurrentModificationException->if->moved->PriorityQueue.this->removeAt->if->else->if->new->ArrayDeque<>->forgetMeNot->add->else->if->PriorityQueue.this->removeEq->else->throw->new->IllegalStateException
PriorityQueue#size()::: priority queue size:::return
PriorityQueue#clear():::Removes all of the elements from this priority queue:::es->for->i->n
PriorityQueue#poll()::: priority queue poll:::es->result->if->n->x->if->cmp->if->siftDownComparable->else->siftDownUsingComparator->return
PriorityQueue#removeAt(int):::Removes the ith element from queue:::es->s->if->else->moved->siftDown->if->siftUp->if->return->return
PriorityQueue#siftUp(int, E):::Inserts item x at position k, maintaining heap invariant by promoting x up the tree until it is greater than or equal to its parent, or is the root:::if->siftUpUsingComparator->else->siftUpComparable
PriorityQueue#siftUpComparable(int, T, Object[])::: priority queue sift up comparable:::key->while->parent->e->if->key->compareTo->break
PriorityQueue#siftUpUsingComparator(int, T, Object[], Comparator)::: priority queue sift up using comparator:::while->parent->e->if->cmp->compare->break
PriorityQueue#siftDown(int, E):::Inserts item x at position k, maintaining heap invariant by demoting x down the tree repeatedly until it is less than or equal to its children or is a leaf.:::if->siftDownUsingComparator->else->siftDownComparable
PriorityQueue#siftDownComparable(int, T, Object[], int)::: priority queue sift down comparable:::key->half->while->child->c->right->if->compareTo->if->key->compareTo->break
PriorityQueue#siftDownUsingComparator(int, T, Object[], int, Comparator)::: priority queue sift down using comparator:::half->while->child->c->right->if->cmp->compare->if->cmp->compare->break
PriorityQueue#heapify():::Establishes the heap invariant (described above) in the entire tree, assuming nothing about the order of the elements prior to the call:::es->n->i->cmp->if->for->else->for
PriorityQueue#comparator():::Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the Comparable natural ordering of its elements.:::return
PriorityQueue#writeObject(java.io.ObjectOutputStream):::Saves this queue to a stream (that is, serializes it).:::s->defaultWriteObject->s->Math->max->writeInt->es->for->i->n
PriorityQueue#readObject(java.io.ObjectInputStream):::Reconstitutes the PriorityQueue instance from a stream (that is, deserializes it).:::s->defaultReadObject->s->readInt->SharedSecrets->getJavaObjectInputStreamAccess->checkArray->es->Math->max->new->ObjectArr->for->i->n->heapify
PriorityQueue#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this queue:::return->new->PriorityQueueSpliterator
PriorityQueue.PriorityQueueSpliterator#getFence()::: priority queue spliterator get fence:::hi->if->return
PriorityQueue.PriorityQueueSpliterator#trySplit()::: priority queue spliterator try split:::hi->getFence->lo->mid->return->new->PriorityQueueSpliterator
PriorityQueue.PriorityQueueSpliterator#forEachRemaining(Consumer)::: priority queue spliterator for each remaining:::if->throw->new->NullPointerException->if->es->i->hi->e->for->if->throw->new->ConcurrentModificationException
PriorityQueue.PriorityQueueSpliterator#tryAdvance(Consumer)::: priority queue spliterator try advance:::if->throw->new->NullPointerException->if->i->if->e->if->throw->new->ConcurrentModificationException->action->accept->return->return
PriorityQueue.PriorityQueueSpliterator#estimateSize()::: priority queue spliterator estimate size:::return->getFence
PriorityQueue.PriorityQueueSpliterator#characteristics()::: priority queue spliterator characteristics:::return
PriorityQueue#removeIf(Predicate)::: priority queue remove if:::Objects->requireNonNull->return->bulkRemove
PriorityQueue#removeAll(Collection)::: priority queue remove all:::Objects->requireNonNull->return->c->contains->bulkRemove
PriorityQueue#retainAll(Collection)::: priority queue retain all:::Objects->requireNonNull->return->c->contains->bulkRemove
PriorityQueue#nBits(int)::: priority queue n bits:::return->new->longArr
PriorityQueue#setBit(long[], int)::: priority queue set bit:::
PriorityQueue#isClear(long[], int)::: priority queue is clear:::return
PriorityQueue#bulkRemove(Predicate):::Implementation of bulk remove methods.:::expectedModCount->es->end->i->for->filter->test->if->if->throw->new->ConcurrentModificationException->return->beg->deathRow->nBits->for->if->throw->new->ConcurrentModificationException->w->for->for->heapify->return
PriorityQueue#forEach(Consumer)::: priority queue for each:::Objects->requireNonNull->expectedModCount->es->for->i->n->if->throw->new->ConcurrentModificationException
Properties#setProperty(String, String):::Calls the Hashtable method put:::return->put
Properties#load(Reader):::Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format:::Objects->requireNonNull->new->LineReader->load0
Properties#load(InputStream):::Reads a property list (key and element pairs) from the input byte stream:::Objects->requireNonNull->new->LineReader->load0
Properties#load0(LineReader)::: properties load0:::outBuffer->new->StringBuilder->limit->keyLen->valueStart->hasSep->precedingBackslash->while->lr->readLine->while->c->if->break->else->if->break->if->else->while->c->if->if->else->break->key->loadConvert->value->loadConvert->put
Properties.LineReader#readLine()::: line reader read line:::len->off->limit->skipWhiteSpace->appendedLineBegin->precedingBackslash->fromStream->byteBuf->charBuf->lineBuf->c->while->if->inStream->read->reader->read->if->if->return->return->if->if->continue->if->continue->if->if->while->if->b->while->if->break->if->inStream->read->if->return->else->while->if->break->if->reader->read->if->return->continue->if->if->ArraysSupport->newLength->new->charArr->System->arraycopy->else->if->continue->if->inStream->read->reader->read->if->return->if->if->if->if->else->if->else->return
Properties#loadConvert(char[], int, int, StringBuilder)::: properties load convert:::aChar->end->start->while->if->break->if->return->new->String->out->setLength->out->append->while->if->if->value->for->i->out->append->else->if->else->if->else->if->else->if->out->append->else->out->append->return->out->toString
Properties#saveConvert(String, boolean, boolean)::: properties save convert:::len->theString->length->bufLen->if->outBuffer->new->StringBuilder->for->x->return->outBuffer->toString
Properties#writeComments(BufferedWriter, String)::: properties write comments:::bw->write->len->comments->length->current->last->uu->new->charArr->while->c->comments->charAt->if->if->bw->comments->substring->write->if->toHex->toHex->toHex->toHex->bw->new->String->write->else->bw->newLine->if->comments->charAt->if->comments->charAt->comments->charAt->bw->write->if->bw->comments->substring->write->bw->newLine
Properties#save(OutputStream, String):::Calls the store(OutputStream out, String comments) method and suppresses IOExceptions that were thrown.:::try->store->catch->finally
Properties#store(Writer, String):::Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the #load(java.io.Reader) load(Reader) method:::new->BufferedWriter->store0
Properties#store(OutputStream, String):::Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the #load(InputStream) load(InputStream) method:::new->OutputStreamWriter->new->BufferedWriter->store0
Properties#store0(BufferedWriter, String, boolean)::: properties store0:::if->writeComments->bw->new->Date->toString->write->bw->newLine->synchronized->foreach->entrySet->key->e->getKey->val->e->getValue->saveConvert->saveConvert->bw->write->bw->newLine->bw->flush
Properties#loadFromXML(InputStream):::Loads all of the properties represented by the XML document on the specified input stream into this properties table:::Objects->requireNonNull->handler->new->PropertiesDefaultHandler->handler->load->in->close
Properties#storeToXML(OutputStream, String):::Emits an XML document representing all of the properties contained in this table:::storeToXML
Properties#storeToXML(OutputStream, String, String):::Emits an XML document representing all of the properties contained in this table, using the specified encoding:::Objects->requireNonNull->Objects->requireNonNull->try->charset->Charset->forName->storeToXML->catch->throw->new->UnsupportedEncodingException->finally
Properties#storeToXML(OutputStream, String, Charset):::Emits an XML document representing all of the properties contained in this table, using the specified encoding:::Objects->requireNonNull->Objects->requireNonNull->handler->new->PropertiesDefaultHandler->handler->store
Properties#getProperty(String):::Searches for the property with the specified key in this property list:::oval->map->get->sval->defaults->return->defaults->getProperty
Properties#getProperty(String, String):::Searches for the property with the specified key in this property list:::val->getProperty->return
Properties#propertyNames():::Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.:::h->new->Hashtable<>->enumerate->return->h->keys
Properties#stringPropertyNames():::Returns an unmodifiable set of keys from this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list:::h->new->HashMap<>->enumerateStringProperties->return->Collections->h->keySet->unmodifiableSet
Properties#list(PrintStream):::Prints this property list out to the specified output stream:::out->println->h->new->HashMap<>->enumerate->foreach->h->entrySet->key->e->getKey->val->e->getValue->if->val->length->val->substring->out->println
Properties#list(PrintWriter)::: properties list:::out->println->h->new->HashMap<>->enumerate->foreach->h->entrySet->key->e->getKey->val->e->getValue->if->val->length->val->substring->out->println
Properties#enumerate(Map):::Enumerates all key/value pairs into the specified Map.:::if->defaults->enumerate->foreach->entrySet->key->e->getKey->h->e->getValue->put
Properties#enumerateStringProperties(Map):::Enumerates all key/value pairs into the specified Map and omits the property if the key or value is not a string.:::if->defaults->enumerateStringProperties->foreach->entrySet->k->e->getKey->v->e->getValue->if->h->put
Properties#toHex(int):::Convert a nibble to a hex character:::return
Properties#size()::: properties size:::return->map->size
Properties#isEmpty()::: properties is empty:::return->map->isEmpty
Properties#keys()::: properties keys:::return->Collections->map->keySet->enumeration
Properties#elements()::: properties elements:::return->Collections->map->values->enumeration
Properties#contains(Object)::: properties contains:::return->map->contains
Properties#containsValue(Object)::: properties contains value:::return->map->containsValue
Properties#containsKey(Object)::: properties contains key:::return->map->containsKey
Properties#get(Object)::: properties get:::return->map->get
Properties#put(Object, Object)::: properties put:::return->map->put
Properties#remove(Object)::: properties remove:::return->map->remove
Properties#putAll(Map)::: properties put all:::map->putAll
Properties#clear()::: properties clear:::map->clear
Properties#toString()::: properties to string:::return->map->toString
Properties#keySet()::: properties key set:::return->Collections->map->keySet->synchronizedSet
Properties#values()::: properties values:::return->Collections->map->values->synchronizedCollection
Properties#entrySet()::: properties entry set:::return->Collections->map->entrySet->new->EntrySet->synchronizedSet
Properties.EntrySet#size()::: entry set size:::return->entrySet->size
Properties.EntrySet#isEmpty()::: entry set is empty:::return->entrySet->isEmpty
Properties.EntrySet#contains(Object)::: entry set contains:::return->entrySet->contains
Properties.EntrySet#toArray()::: entry set to array:::return->entrySet->toArray
Properties.EntrySet#toArray(T[])::: entry set to array:::return->entrySet->toArray
Properties.EntrySet#clear()::: entry set clear:::entrySet->clear
Properties.EntrySet#remove(Object)::: entry set remove:::return->entrySet->remove
Properties.EntrySet#add(Map.Entry)::: entry set add:::throw->new->UnsupportedOperationException
Properties.EntrySet#addAll(Collection>)::: entry set add all:::throw->new->UnsupportedOperationException
Properties.EntrySet#containsAll(Collection)::: entry set contains all:::return->entrySet->containsAll
Properties.EntrySet#removeAll(Collection)::: entry set remove all:::return->entrySet->removeAll
Properties.EntrySet#retainAll(Collection)::: entry set retain all:::return->entrySet->retainAll
Properties.EntrySet#iterator()::: entry set iterator:::return->entrySet->iterator
Properties#equals(Object)::: properties equals:::return->map->equals
Properties#hashCode()::: properties hash code:::return->map->hashCode
Properties#getOrDefault(Object, Object)::: properties get or default:::return->map->getOrDefault
Properties#forEach(BiConsumer)::: properties for each:::map->forEach
Properties#replaceAll(BiFunction)::: properties replace all:::map->replaceAll
Properties#putIfAbsent(Object, Object)::: properties put if absent:::return->map->putIfAbsent
Properties#remove(Object, Object)::: properties remove:::return->map->remove
Properties#replace(Object, Object, Object)::: properties replace:::return->map->replace
Properties#replace(Object, Object)::: properties replace:::return->map->replace
Properties#computeIfAbsent(Object, Function)::: properties compute if absent:::return->map->computeIfAbsent
Properties#computeIfPresent(Object, BiFunction)::: properties compute if present:::return->map->computeIfPresent
Properties#compute(Object, BiFunction)::: properties compute:::return->map->compute
Properties#merge(Object, Object, BiFunction)::: properties merge:::return->map->merge
Properties#rehash()::: properties rehash:::
Properties#clone()::: properties clone:::clone->cloneHashtable->new->ConcurrentHashMap<>->return
Properties#writeHashtable(ObjectOutputStream)::: properties write hashtable:::map->entryStack->map->size->new->ArrayList<>->foreach->map->entrySet->entryStack->entry->getValue->add->entryStack->entry->getKey->add->loadFactor->count->entryStack->size->length->if->synchronized->defaultWriteHashtable->s->writeInt->s->writeInt->for->i->entryStack->size
Properties#readHashtable(ObjectInputStream)::: properties read hashtable:::s->defaultReadObject->origlength->s->readInt->elements->s->readInt->if->throw->new->StreamCorruptedException->SharedSecrets->getJavaObjectInputStreamAccess->HashMap->tableSizeFor->checkArray->map->new->ConcurrentHashMap<>->for
PropertyPermission#init(int):::initialize a PropertyPermission object:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->getName->throw->new->NullPointerException
PropertyPermission#implies(Permission):::Checks if this PropertyPermission object "implies" the specified permission:::if->return->that->return->super->implies
PropertyPermission#equals(Object):::Checks two PropertyPermission objects for equality:::if->return->if->return->that->return->this->getName->that->getName->equals
PropertyPermission#hashCode():::Returns the hash code value for this object:::return->this->getName->hashCode
PropertyPermission#getMask(String):::Converts an actions String to an actions mask.:::mask->if->return->if->return->if->return->else->if->return->a->actions->toCharArray->i->if->return->while->c->while->matchlen->if->else->if->else->throw->new->IllegalArgumentException->seencomma->while->switch->break->break->throw->new->IllegalArgumentException->return
PropertyPermission#getActions(int):::Return the canonical string representation of the actions:::switch->return->return->return->return
PropertyPermission#getActions():::Returns the "canonical string representation" of the actions:::if->getActions->return
PropertyPermission#getMask():::Return the current action mask:::return
PropertyPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing PropertyPermission objects.:::return->new->PropertyPermissionCollection
PropertyPermission#writeObject(java.io.ObjectOutputStream):::WriteObject is called to save the state of the PropertyPermission to a stream:::if->getActions->s->defaultWriteObject
PropertyPermission#readObject(java.io.ObjectInputStream):::readObject is called to restore the state of the PropertyPermission from a stream.:::s->defaultReadObject->getMask->init
PropertyPermissionCollection#add(Permission):::Adds a permission to the PropertyPermissions:::if->throw->new->IllegalArgumentException->if->isReadOnly->throw->new->SecurityException->pp->propName->pp->getName->perms->new->java.util.function.BiFunction<>->merge->if->if->propName->equals
PropertyPermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".:::if->return->pp->x->desired->pp->getMask->effective->if->perms->get->if->x->getMask->if->return->name->pp->getName->perms->get->if->x->getMask->if->return->last->offset->name->length->while->name->lastIndexOf->name->substring->perms->get->if->x->getMask->if->return->return
PropertyPermissionCollection#elements():::Returns an enumeration of all the PropertyPermission objects in the container.:::return->perms->elements
PropertyPermissionCollection#writeObject(ObjectOutputStream)::: property permission collection write object:::permissions->perms->size->new->Hashtable<>->permissions->putAll->pfields->out->putFields->pfields->put->pfields->put->out->writeFields
PropertyPermissionCollection#readObject(ObjectInputStream)::: property permission collection read object:::gfields->in->readFields->gfields->get->permissions->gfields->get->permissions->size->new->ConcurrentHashMap<>->perms->putAll
PropertyResourceBundle#handleGetObject(String)::: property resource bundle handle get object:::if->throw->new->NullPointerException->return->lookup->get
PropertyResourceBundle#getKeys():::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.:::parent->return->lookup->keySet->parent->getKeys->new->ResourceBundleEnumeration
PropertyResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle.:::return->lookup->keySet
Queue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.:::
Queue#offer(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions:::
Queue#remove():::Retrieves and removes the head of this queue:::
Queue#poll():::Retrieves and removes the head of this queue, or returns null if this queue is empty.:::
Queue#element():::Retrieves, but does not remove, the head of this queue:::
Queue#peek():::Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.:::
Random#seedUniquifier()::: random seed uniquifier:::for
Random#initialScramble(long)::: random initial scramble:::return
Random#setSeed(long):::Sets the seed of this random number generator using a single long seed:::initialScramble->set
Random#next(int):::Generates the next pseudorandom number:::oldseed->nextseed->seed->do->seed->get->while->seed->compareAndSet->return
Random#nextBytes(byte[]):::Generates random bytes and places them into a user-supplied byte array:::for->i->len
Random#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators:::r->nextLong->if->n->m->if->else->if->for->u->nextLong->else->while->nextLong->return
Random#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators:::if->n->if->return->nextInt->else->r->do->nextInt->while->return->else->return->nextInt
Random#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.:::r->nextDouble->if->if->Double->Double->doubleToLongBits->longBitsToDouble->return
Random#nextInt():::Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence:::return->next
Random#nextInt(int):::Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence:::if->throw->new->IllegalArgumentException->r->next->m->if->else->for->u->next->return
Random#nextLong():::Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence:::return->next->next
Random#nextBoolean():::Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence:::return->next
Random#nextFloat():::Returns the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence:::return->next
Random#nextDouble():::Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence:::return->next->next
Random#nextGaussian():::Returns the next pseudorandom, Gaussian ("normally") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence:::if->return->else->v1->v2->s->do->nextDouble->nextDouble->while->multiplier->StrictMath->StrictMath->log->sqrt->return
Random#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
Random#ints():::Returns an effectively unlimited stream of pseudorandom int values:::return->StreamSupport->new->RandomIntsSpliterator->intStream
Random#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
Random#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
Random#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
Random#longs():::Returns an effectively unlimited stream of pseudorandom long values:::return->StreamSupport->new->RandomLongsSpliterator->longStream
Random#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
Random#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
Random#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive):::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
Random#doubles():::Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive):::return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
Random#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
Random#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
Random.RandomIntsSpliterator#trySplit()::: random ints spliterator try split:::i->m->return->new->RandomIntsSpliterator
Random.RandomIntsSpliterator#estimateSize()::: random ints spliterator estimate size:::return
Random.RandomIntsSpliterator#characteristics()::: random ints spliterator characteristics:::return
Random.RandomIntsSpliterator#tryAdvance(IntConsumer)::: random ints spliterator try advance:::if->throw->new->NullPointerException->i->f->if->consumer->rng->internalNextInt->accept->return->return
Random.RandomIntsSpliterator#forEachRemaining(IntConsumer)::: random ints spliterator for each remaining:::if->throw->new->NullPointerException->i->f->if->r->o->b->do->consumer->r->internalNextInt->accept->while
Random.RandomLongsSpliterator#trySplit()::: random longs spliterator try split:::i->m->return->new->RandomLongsSpliterator
Random.RandomLongsSpliterator#estimateSize()::: random longs spliterator estimate size:::return
Random.RandomLongsSpliterator#characteristics()::: random longs spliterator characteristics:::return
Random.RandomLongsSpliterator#tryAdvance(LongConsumer)::: random longs spliterator try advance:::if->throw->new->NullPointerException->i->f->if->consumer->rng->internalNextLong->accept->return->return
Random.RandomLongsSpliterator#forEachRemaining(LongConsumer)::: random longs spliterator for each remaining:::if->throw->new->NullPointerException->i->f->if->r->o->b->do->consumer->r->internalNextLong->accept->while
Random.RandomDoublesSpliterator#trySplit()::: random doubles spliterator try split:::i->m->return->new->RandomDoublesSpliterator
Random.RandomDoublesSpliterator#estimateSize()::: random doubles spliterator estimate size:::return
Random.RandomDoublesSpliterator#characteristics()::: random doubles spliterator characteristics:::return
Random.RandomDoublesSpliterator#tryAdvance(DoubleConsumer)::: random doubles spliterator try advance:::if->throw->new->NullPointerException->i->f->if->consumer->rng->internalNextDouble->accept->return->return
Random.RandomDoublesSpliterator#forEachRemaining(DoubleConsumer)::: random doubles spliterator for each remaining:::if->throw->new->NullPointerException->i->f->if->r->o->b->do->consumer->r->internalNextDouble->accept->while
Random#readObject(java.io.ObjectInputStream):::Reconstitute the Random instance from a stream (that is, deserialize it).:::fields->s->readFields->seedVal->fields->get->if->throw->new->java.io.StreamCorruptedException->resetSeed->fields->get->fields->get
Random#writeObject(ObjectOutputStream):::Save the Random instance to a stream.:::fields->s->putFields->fields->seed->get->put->fields->put->fields->put->s->writeFields
Random#resetSeed(long)::: random reset seed:::unsafe->new->AtomicLong->putObjectVolatile
RegularEnumSet#addRange(E, E)::: regular enum set add range:::from->ordinal->to->ordinal->from->ordinal
RegularEnumSet#addAll()::: regular enum set add all:::if
RegularEnumSet#complement()::: regular enum set complement:::if
RegularEnumSet#iterator():::Returns an iterator over the elements contained in this set:::return->new->EnumSetIterator<>
RegularEnumSet.EnumSetIterator#hasNext()::: enum set iterator has next:::return
RegularEnumSet.EnumSetIterator#next()::: enum set iterator next:::if->throw->new->NoSuchElementException->return->Long->numberOfTrailingZeros
RegularEnumSet.EnumSetIterator#remove()::: enum set iterator remove:::if->throw->new->IllegalStateException
RegularEnumSet#size():::Returns the number of elements in this set.:::return->Long->bitCount
RegularEnumSet#isEmpty():::Returns true if this set contains no elements.:::return
RegularEnumSet#contains(Object):::Returns true if this set contains the specified element.:::if->return->eClass->e->getClass->if->eClass->getSuperclass->return->return->ordinal
RegularEnumSet#add(E):::Adds the specified element to this set if it is not already present.:::typeCheck->oldElements->ordinal->return
RegularEnumSet#remove(Object):::Removes the specified element from this set if it is present.:::if->return->eClass->e->getClass->if->eClass->getSuperclass->return->oldElements->ordinal->return
RegularEnumSet#containsAll(Collection):::Returns true if this set contains all of the elements in the specified collection.:::if->return->super->containsAll->es->if->return->es->isEmpty->return
RegularEnumSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.:::if->return->super->addAll->es->if->if->es->isEmpty->return->else->throw->new->ClassCastException->oldElements->return
RegularEnumSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection.:::if->return->super->removeAll->es->if->return->oldElements->return
RegularEnumSet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection.:::if->return->super->retainAll->es->if->changed->return->oldElements->return
RegularEnumSet#clear():::Removes all of the elements from this set.:::
RegularEnumSet#equals(Object):::Compares the specified object with this set for equality:::if->return->super->equals->es->if->return->return
ResourceBundle#getBaseBundleName():::Returns the base name of this bundle, if known, or null if unknown:::return
ResourceBundle#getString(String):::Gets a string for the given key from this resource bundle or one of its parents:::return->getObject
ResourceBundle#getStringArray(String):::Gets a string array for the given key from this resource bundle or one of its parents:::return->getObject
ResourceBundle#getObject(String):::Gets an object for the given key from this resource bundle or one of its parents:::obj->handleGetObject->if->if->parent->getObject->if->throw->this->getClass->getName->this->getClass->getName->new->MissingResourceException->return
ResourceBundle#getLocale():::Returns the locale of this resource bundle:::return
ResourceBundle#getLoader(Module)::: resource bundle get loader:::pa->module->getClassLoader->return->AccessController->doPrivileged
ResourceBundle#getLoaderForControl(Module)::: resource bundle get loader for control:::loader->getLoader->return->ClassLoader->getPlatformClassLoader
ResourceBundle#setParent(ResourceBundle):::Sets the parent bundle of this bundle:::
ResourceBundle.CacheKey#getName()::: cache key get name:::return
ResourceBundle.CacheKey#getLocale()::: cache key get locale:::return
ResourceBundle.CacheKey#setLocale(Locale)::: cache key set locale:::return
ResourceBundle.CacheKey#getModule()::: cache key get module:::return->moduleRef->get
ResourceBundle.CacheKey#getCallerModule()::: cache key get caller module:::return->callerRef->get
ResourceBundle.CacheKey#getProviders()::: cache key get providers:::if->getModule->getServiceLoader->return
ResourceBundle.CacheKey#hasProviders()::: cache key has providers:::return->getProviders
ResourceBundle.CacheKey#callerHasProvider()::: cache key caller has provider:::return
ResourceBundle.CacheKey#equals(Object)::: cache key equals:::if->return->try->otherEntry->if->return->if->name->equals->return->if->locale->equals->return->module->getModule->caller->getCallerModule->return->module->otherEntry->getModule->equals->caller->otherEntry->getCallerModule->equals->catch->finally->return
ResourceBundle.CacheKey#hashCode()::: cache key hash code:::return->name->hashCode->locale->hashCode
ResourceBundle.CacheKey#getFormat()::: cache key get format:::return
ResourceBundle.CacheKey#setFormat(String)::: cache key set format:::
ResourceBundle.CacheKey#setCause(Throwable)::: cache key set cause:::if->else->if
ResourceBundle.CacheKey#getCause()::: cache key get cause:::return
ResourceBundle.CacheKey#toString()::: cache key to string:::l->locale->toString->if->l->length->if->locale->getVariant->length->locale->getVariant->else->return->getModule->getCallerModule
ResourceBundle.CacheKeyReference#getCacheKey()::: cache key reference get cache key:::
ResourceBundle.KeyElementReference#getCacheKey()::: key element reference get cache key:::return
ResourceBundle.BundleReference#getCacheKey()::: bundle reference get cache key:::return
ResourceBundle#getBundle(String):::Gets a resource bundle using the specified base name, the default locale, and the caller module:::caller->Reflection->getCallerClass->return->Locale->getDefault->getDefaultControl->getBundleImpl
ResourceBundle#getBundle(String, Control):::Returns a resource bundle using the specified base name, the default locale and the specified control:::caller->Reflection->getCallerClass->targetLocale->Locale->getDefault->checkNamedModule->return->getBundleImpl
ResourceBundle#getBundle(String, Locale):::Gets a resource bundle using the specified base name and locale, and the caller module:::caller->Reflection->getCallerClass->return->getDefaultControl->getBundleImpl
ResourceBundle#getBundle(String, Module):::Gets a resource bundle using the specified base name and the default locale on behalf of the specified module:::return->Reflection->getCallerClass->Locale->getDefault->getDefaultControl->getBundleFromModule
ResourceBundle#getBundle(String, Locale, Module):::Gets a resource bundle using the specified base name and locale on behalf of the specified module:::return->Reflection->getCallerClass->getDefaultControl->getBundleFromModule
ResourceBundle#getBundle(String, Locale, Control):::Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader:::caller->Reflection->getCallerClass->checkNamedModule->return->getBundleImpl
ResourceBundle#getBundle(String, Locale, ClassLoader):::Gets a resource bundle using the specified base name, locale, and class loader:::if->throw->new->NullPointerException->caller->Reflection->getCallerClass->return->getDefaultControl->getBundleImpl
ResourceBundle#getBundle(String, Locale, ClassLoader, Control):::Returns a resource bundle using the specified base name, target locale, class loader and control:::if->throw->new->NullPointerException->caller->Reflection->getCallerClass->checkNamedModule->return->getBundleImpl
ResourceBundle#getDefaultControl(Class, String)::: resource bundle get default control:::return->caller->getModule->getDefaultControl
ResourceBundle#getDefaultControl(Module, String)::: resource bundle get default control:::return->targetModule->isNamed->ResourceBundleControlProviderHolder->getControl
ResourceBundle.ResourceBundleControlProviderHolder#getControl(String)::: resource bundle control provider holder get control:::return->CONTROL_PROVIDERS->isEmpty->CONTROL_PROVIDERS->stream->Stream->provider->getControl->ofNullable->flatMap->findFirst->orElse
ResourceBundle#checkNamedModule(Class)::: resource bundle check named module:::if->caller->getModule->isNamed->throw->new->UnsupportedOperationException
ResourceBundle#getBundleImpl(String, Locale, Class, Control)::: resource bundle get bundle impl:::return->caller->getClassLoader->getBundleImpl
ResourceBundle#getBundleImpl(String, Locale, Class, ClassLoader, Control):::This method will find resource bundles using the legacy mechanism if the caller is unnamed module or the given class loader is not the class loader of the caller module getting the resource bundle, i.e:::if->throw->new->InternalError->callerModule->caller->getModule->if->callerModule->isNamed->getLoader->return->getBundleImpl->unnamedModule->loader->getUnnamedModule->BootLoader->getUnnamedModule->return->getBundleImpl
ResourceBundle#getBundleFromModule(Class, Module, String, Locale, Control)::: resource bundle get bundle from module:::Objects->requireNonNull->callerModule->caller->getModule->if->sm->System->getSecurityManager->if->sm->checkPermission->return->getBundleImpl
ResourceBundle#getBundleImpl(Module, Module, String, Locale, Control)::: resource bundle get bundle impl:::if->throw->new->NullPointerException->cacheKey->new->CacheKey->bundle->bundleRef->cacheList->get->if->bundleRef->get->if->isValidBundle->hasValidParentChain->return->isKnownControl->formats->control->getFormats->if->checkList->throw->new->IllegalArgumentException->baseBundle->for->targetLocale->control->getFallbackLocale->if->if->cacheKey->getCause->throwMissingResourceException->Reference->reachabilityFence->Reference->reachabilityFence->return
ResourceBundle#checkList(List):::Checks if the given List is not null, not empty, not having null in its elements.:::valid->a->isEmpty->if->size->a->size->for->i->return
ResourceBundle#findBundle(Module, Module, CacheKey, List, List, int, Control, ResourceBundle)::: resource bundle find bundle:::targetLocale->candidateLocales->get->parent->if->candidateLocales->size->findBundle->else->if->equals->return->ref->while->referenceQueue->poll->cacheList->getCacheKey->remove->expiredBundle->cacheKey->setLocale->bundle->findBundleInCache->if->isValidBundle->if->if->return->bundleRef->cacheList->get->if->bundleRef->get->cacheList->remove->if->trace->if->module->isNamed->loadBundle->else->loadBundle->if->if->bundle->setParent->putBundleInCache->return->putBundleInCache->return
ResourceBundle#loadBundle(CacheKey, List, Control, Module, Module)::: resource bundle load bundle:::baseName->cacheKey->getName->targetLocale->cacheKey->getLocale->bundle->if->cacheKey->hasProviders->if->cacheKey->getProviders->loadBundleFromProviders->else->loader->getLoader->svc->getResourceBundleProviderType->if->Reflection->verifyModuleAccess->callerModule->canUse->cacheKey->getProviders->loadBundleFromProviders->if->cacheKey->setFormat->if->cacheKey->callerHasProvider->foreach->try->switch->ResourceBundleProviderHelper->loadResourceBundle->break->ResourceBundleProviderHelper->loadPropertyResourceBundle->break->throw->new->InternalError->if->cacheKey->setFormat->break->catch->cacheKey->setCause->finally->return
ResourceBundle#getServiceLoader(Module, String):::Returns a ServiceLoader that will find providers that are bound to a given named module.:::if->module->isNamed->return->loader->getLoader->service->getResourceBundleProviderType->if->Reflection->verifyModuleAccess->try->return->ServiceLoader->load->catch->return->finally->return
ResourceBundle#getResourceBundleProviderType(String, ClassLoader):::Returns the service type of the given baseName that is visible to the given class loader:::i->baseName->lastIndexOf->if->return->name->baseName->baseName->length->substring->providerName->baseName->substring->return->AccessController->new->PrivilegedAction<>->doPrivileged
ResourceBundle#loadBundleFromProviders(String, Locale, ServiceLoader, CacheKey):::Loads ResourceBundle from service providers.:::if->return->return->AccessController->new->PrivilegedAction<>->doPrivileged
ResourceBundle#loadBundle(CacheKey, List, Control, boolean)::: resource bundle load bundle:::targetLocale->cacheKey->getLocale->module->cacheKey->getModule->if->throw->new->InternalError->loader->getLoaderForControl->bundle->foreach->try->control->cacheKey->getName->newBundle->catch->cacheKey->setCause->finally->if->cacheKey->setFormat->cacheKey->getName->break->return
ResourceBundle#isValidBundle(ResourceBundle)::: resource bundle is valid bundle:::return
ResourceBundle#hasValidParentChain(ResourceBundle):::Determines whether any of resource bundles in the parent chain, including the leaf, have expired.:::now->System->currentTimeMillis->while->if->return->key->if->expirationTime->if->return->return
ResourceBundle#throwMissingResourceException(String, Locale, Throwable):::Throw a MissingResourceException with proper message:::if->throw->new->MissingResourceException
ResourceBundle#findBundleInCache(CacheKey, Control):::Finds a bundle in the cache:::bundleRef->cacheList->get->if->return->bundle->bundleRef->get->if->return->p->if->cacheList->remove->else->key->bundleRef->getCacheKey->expirationTime->if->System->currentTimeMillis->if->synchronized->if->System->currentTimeMillis->try->module->cacheKey->getModule->control->key->getName->key->getLocale->key->getFormat->getLoaderForControl->needsReload->catch->cacheKey->setCause->finally->if->cacheList->remove->else->setExpirationTime->else->cacheList->remove->return
ResourceBundle#putBundleInCache(CacheKey, ResourceBundle, Control):::Put a new bundle in the cache.:::setExpirationTime->if->key->new->CacheKey->bundleRef->new->BundleReference->result->cacheList->putIfAbsent->if->rb->result->get->if->bundleRef->clear->else->cacheList->put->return
ResourceBundle#setExpirationTime(CacheKey, Control)::: resource bundle set expiration time:::ttl->control->cacheKey->getName->cacheKey->getLocale->getTimeToLive->if->now->System->currentTimeMillis->else->if->else->throw->new->IllegalArgumentException
ResourceBundle#clearCache():::Removes all resource bundles from the cache that have been loaded by the caller's module.:::caller->Reflection->getCallerClass->cacheList->keySet->key->getCallerModule->caller->getModule->removeIf
ResourceBundle#clearCache(ClassLoader):::Removes all resource bundles from the cache that have been loaded by the given class loader.:::Objects->requireNonNull->cacheList->keySet->m->return->key->getModule->getLoader->removeIf
ResourceBundle#handleGetObject(String):::Gets an object for the given key from this resource bundle:::
ResourceBundle#getKeys():::Returns an enumeration of the keys.:::
ResourceBundle#containsKey(String):::Determines whether the given key is contained in this ResourceBundle or its parent bundles.:::if->throw->new->NullPointerException->for->rb->return
ResourceBundle#keySet():::Returns a Set of all keys contained in this ResourceBundle and its parent bundles.:::keys->new->HashSet<>->for->rb->return
ResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle:::if->synchronized->if->keys->new->HashSet<>->enumKeys->getKeys->while->enumKeys->hasMoreElements->key->enumKeys->nextElement->if->handleGetObject->keys->add->return
ResourceBundle.Control#getControl(List):::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats:::if->formats->equals->return->if->formats->equals->return->if->formats->equals->return->throw->new->IllegalArgumentException
ResourceBundle.Control#getNoFallbackControl(List):::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats and the Control#getFallbackLocale(String, Locale) getFallbackLocale method returns null:::if->formats->equals->return->if->formats->equals->return->if->formats->equals->return->throw->new->IllegalArgumentException
ResourceBundle.Control#getFormats(String):::Returns a List of Strings containing formats to be used to load resource bundles for the given baseName:::if->throw->new->NullPointerException->return
ResourceBundle.Control#getCandidateLocales(String, Locale):::Returns a List of Locales as candidate locales for baseName and locale:::if->throw->new->NullPointerException->return->CANDIDATES_CACHE->locale->getBaseLocale->get->new->ArrayList<>
ResourceBundle.Control.CandidateListCache#createObject(BaseLocale)::: candidate list cache create object:::language->base->getLanguage->script->base->getScript->region->base->getRegion->variant->base->getVariant->isNorwegianBokmal->isNorwegianNynorsk->if->language->equals->if->region->equals->variant->equals->else->if->language->equals->tmpList->getDefaultList->bokmalList->new->LinkedList<>->foreach->bokmalList->add->if->l->getLanguage->length->break->bokmalList->Locale->l->getScript->l->getCountry->l->getVariant->getInstance->add->return->else->if->language->equals->nynorskList->getDefaultList->idx->nynorskList->size->nynorskList->Locale->getInstance->add->nynorskList->Locale->getInstance->add->nynorskList->Locale->getInstance->add->return->else->if->language->equals->if->script->length->region->length->switch->break->break->return->getDefaultList
ResourceBundle.Control.CandidateListCache#getDefaultList(String, String, String, String)::: candidate list cache get default list:::variants->if->variant->length->new->LinkedList<>->idx->variant->length->while->variants->variant->substring->add->variant->lastIndexOf->list->new->LinkedList<>->if->foreach->list->Locale->getInstance->add->if->region->length->list->Locale->getInstance->add->if->script->length->list->Locale->getInstance->add->if->language->equals->if->region->length->switch->break->break->if->foreach->list->Locale->getInstance->add->if->region->length->list->Locale->getInstance->add->if->language->length->list->Locale->getInstance->add->list->add->return
ResourceBundle.Control#getFallbackLocale(String, Locale):::Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method:::if->throw->new->NullPointerException->defaultLocale->Locale->getDefault->return->locale->equals
ResourceBundle.Control#newBundle(String, Locale, String, ClassLoader, boolean):::Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary:::bundleName->toBundleName->bundle->if->format->equals->try->c->loader->loadClass->if->isAssignableFrom->bundleClass->m->bundleClass->getModule->if->m->isNamed->m->bundleClass->getPackageName->isOpen->throw->bundleClass->getName->m->toString->new->IllegalAccessException->try->ctor->bundleClass->getConstructor->if->Modifier->ctor->getModifiers->isPublic->return->pa1->ctor->setAccessible->return->AccessController->doPrivileged->ctor->newInstance->catch->uncheckedThrow->finally->else->throw->c->getName->new->ClassCastException->catch->finally->else->if->format->equals->resourceName->toResourceName0->if->return->reloadFlag->stream->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->e->getException->finally->if->try->new->PropertyResourceBundle->catch->finally->stream->close->else->throw->new->IllegalArgumentException->return
ResourceBundle.Control#getTimeToLive(String, Locale):::Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control:::if->throw->new->NullPointerException->return
ResourceBundle.Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle, long):::Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria:::if->throw->new->NullPointerException->if->format->equals->format->equals->format->substring->result->try->resourceName->toBundleName->toResourceName0->if->return->url->loader->getResource->if->lastModified->connection->url->openConnection->if->connection->setUseCaches->if->ent->getJarEntry->if->ent->getTime->if->else->connection->getLastModified->catch->throw->finally->return
ResourceBundle.Control#toBundleName(String, Locale):::Converts the given baseName and locale to the bundle name:::if->return->language->locale->getLanguage->script->locale->getScript->country->locale->getCountry->variant->locale->getVariant->if->return->sb->new->StringBuilder->sb->append->if->if->sb->append->append->append->append->append->append->append->else->if->sb->append->append->append->append->append->else->sb->append->append->append->else->if->sb->append->append->append->append->append->else->if->sb->append->append->append->else->sb->append->return->sb->toString
ResourceBundle.Control#toResourceName(String, String):::Converts the given bundleName to the form required by the ClassLoader#getResource ClassLoader.getResource method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix:::sb->bundleName->length->suffix->length->new->StringBuilder->sb->bundleName->replace->append->append->append->return->sb->toString
ResourceBundle.Control#toResourceName0(String, String)::: control to resource name0:::if->bundleName->contains->return->else->return->toResourceName
ResourceBundle#uncheckedThrow(Throwable)::: resource bundle unchecked throw:::if->throw->else->throw->new->Error
ResourceBundle.SingleFormatControl#getFormats(String)::: single format control get formats:::if->throw->new->NullPointerException->return
ResourceBundle.NoFallbackControl#getFallbackLocale(String, Locale)::: no fallback control get fallback locale:::if->throw->new->NullPointerException->return
ResourceBundle.ResourceBundleProviderHelper#newResourceBundle(Class):::Returns a new ResourceBundle instance of the given bundleClass:::try->ctor->bundleClass->getConstructor->if->Modifier->ctor->getModifiers->isPublic->return->pa->ctor->setAccessible->return->AccessController->doPrivileged->try->return->ctor->newInstance->catch->uncheckedThrow->throw->new->InternalError->finally->catch->throw->new->InternalError->finally->return
ResourceBundle.ResourceBundleProviderHelper#loadResourceBundle(Module, Module, String, Locale):::Loads a ResourceBundle of the given bundleName local to the given module:::bundleName->toBundleName->try->pa->Class->forName->c->AccessController->doPrivileged->trace->if->loader->getLoader->if->Class->forName->else->BootLoader->loadClassOrNull->trace->if->isAssignableFrom->bundleClass->m->bundleClass->getModule->if->bundleClass->getPackageName->isAccessible->m->getName->bundleClass->getPackageName->trace->return->return->newResourceBundle->catch->finally->return
ResourceBundle.ResourceBundleProviderHelper#isAccessible(Module, Module, String):::Tests if resources of the given package name from the given module are open to the caller module.:::if->module->isNamed->return->return->module->isOpen
ResourceBundle.ResourceBundleProviderHelper#loadPropertyResourceBundle(Module, Module, String, Locale):::Loads properties of the given bundleName local in the given module:::bundleName->toBundleName->pa->try->resourceName->toResourceName0->if->return->trace->pn->toPackageName->module->getName->isAccessible->trace->if->isAccessible->in->module->getResourceAsStream->if->return->loader->module->getClassLoader->trace->try->if->return->loader->getResourceAsStream->else->url->BootLoader->findResource->if->return->url->openStream->catch->finally->return->catch->throw->new->UncheckedIOException->finally->try->stream->AccessController->doPrivileged->if->return->new->PropertyResourceBundle->else->return->catch->throw->e->getCause->finally
ResourceBundle.ResourceBundleProviderHelper#toPackageName(String)::: resource bundle provider helper to package name:::i->bundleName->lastIndexOf->return->bundleName->substring
ResourceBundle#trace(String, Object...)::: resource bundle trace:::if->format
Scanner#boolPattern()::: scanner bool pattern:::bp->if->Pattern->compile->return
Scanner#buildIntegerPatternString()::: scanner build integer pattern string:::radixDigits->digits->substring->digit->groupedNumeral->numeral->javaStyleInteger->negativeInteger->positiveInteger->return
Scanner#integerPattern()::: scanner integer pattern:::if->patternCache->buildIntegerPatternString->forName->return
Scanner#separatorPattern()::: scanner separator pattern:::sp->if->Pattern->compile->return
Scanner#linePattern()::: scanner line pattern:::lp->if->Pattern->compile->return
Scanner#buildFloatAndDecimalPattern()::: scanner build float and decimal pattern:::digit->exponent->groupedNumeral->numeral->decimalNumeral->nonNumber->positiveFloat->negativeFloat->decimal->hexFloat->positiveNonNumber->negativeNonNumber->signedNonNumber->Pattern->compile->Pattern->compile
Scanner#floatPattern()::: scanner float pattern:::if->buildFloatAndDecimalPattern->return
Scanner#decimalPattern()::: scanner decimal pattern:::if->buildFloatAndDecimalPattern->return
Scanner#toCharset(String):::Returns a charset object for the given charset name.:::Objects->requireNonNull->try->return->Charset->forName->catch->throw->new->IllegalArgumentException->finally
Scanner#makeReadable(Path, Charset)::: scanner make readable:::Objects->requireNonNull->return->Files->newInputStream->makeReadable
Scanner#makeReadable(InputStream, Charset)::: scanner make readable:::Objects->requireNonNull->return->new->InputStreamReader
Scanner#toDecoder(String)::: scanner to decoder:::Objects->requireNonNull->try->return->Charset->forName->newDecoder->catch->throw->new->IllegalArgumentException->finally
Scanner#makeReadable(ReadableByteChannel, CharsetDecoder)::: scanner make readable:::return->Channels->newReader
Scanner#makeReadable(ReadableByteChannel, Charset)::: scanner make readable:::Objects->requireNonNull->return->Channels->newReader
Scanner#makeReadable(ReadableByteChannel)::: scanner make readable:::return->Charset->defaultCharset->newDecoder->makeReadable
Scanner#saveState()::: scanner save state:::
Scanner#revertState()::: scanner revert state:::
Scanner#revertState(boolean)::: scanner revert state:::return
Scanner#cacheResult()::: scanner cache result:::matcher->group->matcher->end->matcher->pattern
Scanner#cacheResult(String)::: scanner cache result:::matcher->end->matcher->pattern
Scanner#clearCaches()::: scanner clear caches:::
Scanner#getCachedResult()::: scanner get cached result:::return
Scanner#useTypeCache()::: scanner use type cache:::if->throw->new->IllegalStateException
Scanner#readInput()::: scanner read input:::if->buf->limit->buf->capacity->makeSpace->p->buf->position->buf->buf->limit->position->buf->buf->capacity->limit->n->try->source->read->catch->finally->if->if->buf->buf->position->limit->buf->position
Scanner#makeSpace()::: scanner make space:::clearCaches->offset->buf->position->if->buf->compact->translateSavedIndexes->buf->flip->return->newSize->buf->capacity->newBuf->CharBuffer->allocate->newBuf->put->newBuf->flip->translateSavedIndexes->matcher->reset->return
Scanner#translateSavedIndexes(int)::: scanner translate saved indexes:::if
Scanner#throwFor()::: scanner throw for:::if->buf->limit->throw->new->NoSuchElementException->else->throw->new->InputMismatchException
Scanner#hasTokenInBuffer()::: scanner has token in buffer:::matcher->usePattern->matcher->buf->limit->region->if->matcher->lookingAt->if->matcher->hitEnd->return->matcher->end->if->buf->limit->return->return
Scanner#getCompleteTokenInBuffer(Pattern)::: scanner get complete token in buffer:::matcher->usePattern->if->matcher->buf->limit->region->if->matcher->lookingAt->if->matcher->hitEnd->return->matcher->end->if->buf->limit->if->return->return->matcher->buf->limit->region->foundNextDelim->matcher->find->if->matcher->end->matcher->find->if->if->matcher->requireEnd->return->tokenEnd->matcher->start->if->matcher->usePattern->matcher->region->if->matcher->matches->s->matcher->group->matcher->end->return->else->return->if->if->matcher->usePattern->matcher->buf->limit->region->if->matcher->matches->s->matcher->group->matcher->end->return->return->return
Scanner#findPatternInBuffer(Pattern, int)::: scanner find pattern in buffer:::matcher->usePattern->bufferLimit->buf->limit->horizonLimit->searchLimit->if->if->matcher->region->if->matcher->find->if->matcher->hitEnd->if->return->if->matcher->requireEnd->return->matcher->end->return->if->return->if->return
Scanner#matchPatternInBuffer(Pattern)::: scanner match pattern in buffer:::matcher->usePattern->matcher->buf->limit->region->if->matcher->lookingAt->if->matcher->hitEnd->return->matcher->end->return->if->return->return
Scanner#ensureOpen()::: scanner ensure open:::if->throw->new->IllegalStateException
Scanner#close():::Closes this scanner:::if->return->if->try->close->catch->finally
Scanner#ioException():::Returns the IOException last thrown by this Scanner's underlying Readable:::return
Scanner#delimiter():::Returns the Pattern this Scanner is currently using to match delimiters.:::return
Scanner#useDelimiter(Pattern):::Sets this scanner's delimiting pattern to the specified pattern.:::return
Scanner#useDelimiter(String):::Sets this scanner's delimiting pattern to a pattern constructed from the specified String:::patternCache->forName->return
Scanner#locale():::Returns this scanner's locale:::return
Scanner#useLocale(Locale):::Sets this scanner's locale to the specified locale:::if->locale->equals->return->df->nf->NumberFormat->getNumberInstance->dfs->DecimalFormatSymbols->getInstance->if->else->adapter->LocaleProviderAdapter->getAdapter->if->LocaleProviderAdapter->getResourceBundleBased->all->adapter->getLocaleResources->getNumberPatterns->new->DecimalFormat->Integer->dfs->getGroupingSeparator->toHexString->Integer->dfs->getDecimalSeparator->toHexString->Pattern->dfs->getNaN->quote->Pattern->dfs->getInfinity->quote->df->getPositivePrefix->if->positivePrefix->isEmpty->Pattern->quote->df->getNegativePrefix->if->negativePrefix->isEmpty->Pattern->quote->df->getPositiveSuffix->if->positiveSuffix->isEmpty->Pattern->quote->df->getNegativeSuffix->if->negativeSuffix->isEmpty->Pattern->quote->return
Scanner#radix():::Returns this scanner's default radix:::return
Scanner#useRadix(int):::Sets this scanner's default radix to the specified radix:::if->throw->new->IllegalArgumentException->if->return->return
Scanner#setRadix(int)::: scanner set radix:::if->throw->new->IllegalArgumentException->if
Scanner#match():::Returns the match result of the last scanning operation performed by this scanner:::if->throw->new->IllegalStateException->return->matcher->toMatchResult
Scanner#toString():::Returns the string representation of this Scanner:::sb->new->StringBuilder->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->return->sb->toString
Scanner#hasNext():::Returns true if this scanner has another token in its input:::ensureOpen->saveState->while->if->hasTokenInBuffer->return->revertState->readInput->result->hasTokenInBuffer->return->revertState
Scanner#next():::Finds and returns the next complete token from this scanner:::ensureOpen->clearCaches->while->token->getCompleteTokenInBuffer->if->return->if->readInput->else->throwFor
Scanner#remove():::The remove operation is not supported by this implementation of Iterator.:::throw->new->UnsupportedOperationException
Scanner#hasNext(String):::Returns true if the next token matches the pattern constructed from the specified string:::return->patternCache->forName->hasNext
Scanner#next(String):::Returns the next token if it matches the pattern constructed from the specified string:::return->patternCache->forName->next
Scanner#hasNext(Pattern):::Returns true if the next complete token matches the specified pattern:::ensureOpen->if->throw->new->NullPointerException->saveState->while->if->getCompleteTokenInBuffer->cacheResult->return->revertState->if->readInput->else->return->revertState
Scanner#next(Pattern):::Returns the next token if it matches the specified pattern:::ensureOpen->if->throw->new->NullPointerException->if->return->getCachedResult->clearCaches->while->token->getCompleteTokenInBuffer->if->return->if->readInput->else->throwFor
Scanner#hasNextLine():::Returns true if there is another line in the input of this scanner:::saveState->result->linePattern->findWithinHorizon->if->mr->this->match->lineSep->mr->group->if->result->result->length->lineSep->length->substring->cacheResult->else->cacheResult->revertState->return
Scanner#nextLine():::Advances this scanner past the current line and returns the input that was skipped:::if->linePattern->return->getCachedResult->clearCaches->result->findWithinHorizon->if->throw->new->NoSuchElementException->mr->this->match->lineSep->mr->group->if->result->result->length->lineSep->length->substring->if->throw->new->NoSuchElementException->else->return
Scanner#findInLine(String):::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters:::return->patternCache->forName->findInLine
Scanner#findInLine(Pattern):::Attempts to find the next occurrence of the specified pattern ignoring delimiters:::ensureOpen->if->throw->new->NullPointerException->clearCaches->endPosition->saveState->while->if->separatorPattern->findPatternInBuffer->matcher->start->break->if->readInput->else->buf->limit->break->revertState->horizonForLine->if->return->return->findWithinHorizon
Scanner#findWithinHorizon(String, int):::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters:::return->patternCache->forName->findWithinHorizon
Scanner#findWithinHorizon(Pattern, int):::Attempts to find the next occurrence of the specified pattern:::ensureOpen->if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->clearCaches->while->if->findPatternInBuffer->return->matcher->group->if->readInput->else->break->return
Scanner#skip(Pattern):::Skips input that matches the specified pattern, ignoring delimiters:::ensureOpen->if->throw->new->NullPointerException->clearCaches->while->if->matchPatternInBuffer->matcher->end->return->if->readInput->else->throw->new->NoSuchElementException
Scanner#skip(String):::Skips input that matches a pattern constructed from the specified string:::return->patternCache->forName->skip
Scanner#hasNextBoolean():::Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string "true|false":::return->boolPattern->hasNext
Scanner#nextBoolean():::Scans the next token of the input into a boolean value and returns that value:::clearCaches->return->Boolean->boolPattern->next->parseBoolean
Scanner#hasNextByte():::Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the #nextByte method:::return->hasNextByte
Scanner#hasNextByte(int):::Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the #nextByte method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->Byte->parseByte->catch->finally->return
Scanner#nextByte():::Scans the next token of the input as a byte:::return->nextByte
Scanner#nextByte(int):::Scans the next token of the input as a byte:::if->val->byteValue->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->Byte->parseByte->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextShort():::Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the #nextShort method:::return->hasNextShort
Scanner#hasNextShort(int):::Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the #nextShort method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->Short->parseShort->catch->finally->return
Scanner#nextShort():::Scans the next token of the input as a short:::return->nextShort
Scanner#nextShort(int):::Scans the next token of the input as a short:::if->val->shortValue->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->Short->parseShort->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextInt():::Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the #nextInt method:::return->hasNextInt
Scanner#hasNextInt(int):::Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the #nextInt method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->Integer->parseInt->catch->finally->return
Scanner#processIntegerToken(String):::The integer token must be stripped of prefixes, group separators, and suffixes, non ascii digits must be converted into ascii digits before parse will accept it.:::result->token->replaceAll->isNegative->preLen->negativePrefix->length->if->result->startsWith->result->substring->sufLen->negativeSuffix->length->if->result->endsWith->result->result->length->result->length->substring->if->return
Scanner#nextInt():::Scans the next token of the input as an int:::return->nextInt
Scanner#nextInt(int):::Scans the next token of the input as an int:::if->val->intValue->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->Integer->parseInt->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextLong():::Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the #nextLong method:::return->hasNextLong
Scanner#hasNextLong(int):::Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the #nextLong method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->Long->parseLong->catch->finally->return
Scanner#nextLong():::Scans the next token of the input as a long:::return->nextLong
Scanner#nextLong(int):::Scans the next token of the input as a long:::if->val->longValue->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->Long->parseLong->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#processFloatToken(String):::The float token must be stripped of prefixes, group separators, and suffixes, non ascii digits must be converted into ascii digits before parseFloat will accept it:::result->token->replaceAll->if->decimalSeparator->equals->result->replaceAll->isNegative->preLen->negativePrefix->length->if->result->startsWith->result->substring->sufLen->negativeSuffix->length->if->result->endsWith->result->result->length->result->length->substring->if->result->equals->if->result->equals->if->m->NON_ASCII_DIGIT->matcher->if->m->find->inASCII->new->StringBuilder->for->i->result->length->inASCII->toString->return
Scanner#hasNextFloat():::Returns true if the next token in this scanner's input can be interpreted as a float value using the #nextFloat method:::setRadix->result->floatPattern->hasNext->if->try->s->processFloatToken->Float->Float->parseFloat->valueOf->catch->finally->return
Scanner#nextFloat():::Scans the next token of the input as a float:::if->val->floatValue->useTypeCache->return->setRadix->clearCaches->try->return->Float->floatPattern->next->processFloatToken->parseFloat->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextDouble():::Returns true if the next token in this scanner's input can be interpreted as a double value using the #nextDouble method:::setRadix->result->floatPattern->hasNext->if->try->s->processFloatToken->Double->Double->parseDouble->valueOf->catch->finally->return
Scanner#nextDouble():::Scans the next token of the input as a double:::if->val->doubleValue->useTypeCache->return->setRadix->clearCaches->try->return->Double->floatPattern->next->processFloatToken->parseDouble->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextBigInteger():::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the #nextBigInteger method:::return->hasNextBigInteger
Scanner#hasNextBigInteger(int):::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the #nextBigInteger method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->new->BigInteger->catch->finally->return
Scanner#nextBigInteger():::Scans the next token of the input as a java.math.BigInteger BigInteger:::return->nextBigInteger
Scanner#nextBigInteger(int):::Scans the next token of the input as a java.math.BigInteger BigInteger:::if->val->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->new->BigInteger->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextBigDecimal():::Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the #nextBigDecimal method:::setRadix->result->decimalPattern->hasNext->if->try->s->processFloatToken->new->BigDecimal->catch->finally->return
Scanner#nextBigDecimal():::Scans the next token of the input as a java.math.BigDecimal BigDecimal:::if->val->useTypeCache->return->setRadix->clearCaches->try->s->decimalPattern->next->processFloatToken->return->new->BigDecimal->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#reset():::Resets this scanner:::Locale->getDefault->useLocale->useRadix->clearCaches->return
Scanner#tokens():::Returns a stream of delimiter-separated tokens from this scanner:::ensureOpen->stream->StreamSupport->new->TokenSpliterator->stream->return->stream->this->close->onClose
Scanner.TokenSpliterator#tryAdvance(Consumer)::: token spliterator try advance:::if->throw->new->ConcurrentModificationException->if->hasNext->token->next->cons->accept->if->throw->new->ConcurrentModificationException->return->else->return
Scanner#findAll(Pattern):::Returns a stream of match results from this scanner:::Objects->requireNonNull->ensureOpen->stream->StreamSupport->new->FindSpliterator->stream->return->stream->this->close->onClose
Scanner#findAll(String):::Returns a stream of match results that match the provided pattern string:::Objects->requireNonNull->ensureOpen->return->patternCache->forName->findAll
Scanner.FindSpliterator#tryAdvance(Consumer)::: find spliterator try advance:::ensureOpen->if->if->throw->new->ConcurrentModificationException->else->matcher->usePattern->while->if->nextInBuffer->cons->matcher->toMatchResult->accept->if->throw->new->ConcurrentModificationException->return->if->readInput->else->return
Scanner.FindSpliterator#nextInBuffer()::: find spliterator next in buffer:::if->if->buf->limit->if->return->matcher->buf->limit->region->if->matcher->find->matcher->hitEnd->matcher->end->matcher->start->return->if->return
Scanner.PatternLRUCache#hasName(Pattern, String)::: pattern cache has name:::return->p->pattern->equals
Scanner.PatternLRUCache#moveToFront(Object[], int)::: pattern cache move to front:::ob->for->j
Scanner.PatternLRUCache#forName(String)::: pattern cache for name:::if->temp->new->PatternArr->else->for->i->ob->Pattern->compile->moveToFront->return
ServiceLoader.Provider#type():::Returns the provider type:::
ServiceLoader.Provider#get():::Returns an instance of the provider.:::
ServiceLoader#checkCaller(Class, Class):::Checks that the given service type is accessible to types in the given module, and check that the module declares that it uses the service type.:::if->fail->callerModule->caller->getModule->mods->svc->getModifiers->if->Reflection->verifyMemberAccess->fail->if->callerModule->canUse->fail
ServiceLoader#fail(Class, String, Throwable)::: service loader fail:::throw->service->getName->new->ServiceConfigurationError
ServiceLoader#fail(Class, String)::: service loader fail:::throw->service->getName->new->ServiceConfigurationError
ServiceLoader#fail(Class, URL, int, String)::: service loader fail:::fail
ServiceLoader#inExplicitModule(Class):::Returns true if the provider is in an explicit module:::module->clazz->getModule->return->module->isNamed->module->getDescriptor->isAutomatic
ServiceLoader#findStaticProviderMethod(Class):::Returns the public static "provider" method if found.:::methods->try->LANG_ACCESS->getDeclaredPublicMethods->catch->fail->finally->if->methods->isEmpty->return->result->foreach->mods->method->getModifiers->if->Modifier->isStatic->if->fail->if->m->pa->m->setAccessible->return->AccessController->doPrivileged->return
ServiceLoader#getConstructor(Class):::Returns the public no-arg constructor of a class.:::pa->new->PrivilegedExceptionAction<>->ctor->try->AccessController->doPrivileged->catch->if->x->getCause->cn->clazz->getName->fail->finally->return
ServiceLoader.ProviderImpl#type()::: provider impl type:::return
ServiceLoader.ProviderImpl#get()::: provider impl get:::if->return->invokeFactoryMethod->else->return->newInstance
ServiceLoader.ProviderImpl#invokeFactoryMethod():::Invokes the provider's "provider" method to instantiate a provider:::result->exc->if->try->factoryMethod->invoke->catch->finally->else->pa->new->PrivilegedExceptionAction<>->try->AccessController->doPrivileged->catch->if->x->getCause->finally->if->if->exc->getCause->fail->if->fail->p->return
ServiceLoader.ProviderImpl#newInstance():::Invokes Constructor::newInstance to instantiate a provider:::p->exc->if->try->ctor->newInstance->catch->finally->else->pa->new->PrivilegedExceptionAction<>->try->AccessController->doPrivileged->catch->if->x->getCause->finally->if->if->exc->getCause->cn->ctor->getDeclaringClass->getName->fail->return
ServiceLoader.ProviderImpl#hashCode()::: provider impl hash code:::return->Objects->hash
ServiceLoader.ProviderImpl#equals(Object)::: provider impl equals:::if->return->that->return->Objects->equals
ServiceLoader#loadProvider(ServiceProvider):::Loads a service provider in a module:::module->provider->module->if->module->service->getModule->canRead->return->cn->provider->providerName->clazz->if->try->Class->forName->catch->fail->finally->else->pa->Class->forName->try->AccessController->doPrivileged->catch->if->x->getCause->fail->return->finally->if->fail->mods->clazz->getModifiers->if->Modifier->isPublic->fail->if->inExplicitModule->factoryMethod->findStaticProviderMethod->if->returnType->factoryMethod->getReturnType->if->service->isAssignableFrom->fail->type->return->new->ProviderImpl<S>->if->service->isAssignableFrom->clazz->getName->fail->type->ctor->getConstructor->return->new->ProviderImpl<S>
ServiceLoader.LayerLookupIterator#providers(ModuleLayer)::: layer lookup iterator providers:::catalog->LANG_ACCESS->getServicesCatalog->return->catalog->findServices->iterator
ServiceLoader.LayerLookupIterator#hasNext()::: layer lookup iterator has next:::while->while->iterator->hasNext->if->stack->isEmpty->return->layer->stack->pop->parents->layer->parents->for->i->parents->size->providers->provider->iterator->next->try->next->loadProvider->catch->finally->return
ServiceLoader.LayerLookupIterator#next()::: layer lookup iterator next:::if->hasNext->throw->new->NoSuchElementException->provider->if->return->else->e->throw
ServiceLoader.ModuleServicesLookupIterator#providers(ModuleLayer):::Returns iterator to iterate over the implementations of service in the given layer.:::catalog->LANG_ACCESS->getServicesCatalog->return->catalog->findServices
ServiceLoader.ModuleServicesLookupIterator#loaderFor(Module):::Returns the class loader that a module is defined to:::sm->System->getSecurityManager->if->return->module->getClassLoader->else->pa->module->getClassLoader->return->AccessController->doPrivileged
ServiceLoader.ModuleServicesLookupIterator#iteratorFor(ClassLoader):::Returns an iterator to iterate over the implementations of service in modules defined to the given class loader or in custom layers with a module defined to this class loader.:::catalog->if->BootLoader->getServicesCatalog->else->ServicesCatalog->getServicesCatalogOrNull->providers->if->List->of->else->catalog->findServices->platformClassLoader->ClassLoaders->platformClassLoader->if->return->providers->iterator->else->allProviders->new->ArrayList<>->iterator->LANG_ACCESS->layers->iterator->while->iterator->hasNext->layer->iterator->next->foreach->providers->l->sp->module->loaderFor->if->allProviders->add->return->allProviders->iterator
ServiceLoader.ModuleServicesLookupIterator#hasNext()::: module services lookup iterator has next:::while->while->iterator->hasNext->if->return->else->currentLoader->getParent->iteratorFor->provider->iterator->next->try->next->loadProvider->catch->finally->return
ServiceLoader.ModuleServicesLookupIterator#next()::: module services lookup iterator next:::if->hasNext->throw->new->NoSuchElementException->provider->if->return->else->e->throw
ServiceLoader.LazyClassPathLookupIterator#parseLine(URL, BufferedReader, int, Set):::Parse a single line from the given configuration file, adding the name on the line to set of names if not already seen.:::ln->r->readLine->if->return->ci->ln->indexOf->if->ln->substring->ln->trim->n->ln->length->if->if->ln->indexOf->ln->indexOf->fail->cp->ln->codePointAt->if->Character->isJavaIdentifierStart->fail->start->Character->charCount->for->i->Character->charCount->if->providerNames->add->names->add->return
ServiceLoader.LazyClassPathLookupIterator#parse(URL):::Parse the content of the given URL as a provider-configuration file.:::names->new->LinkedHashSet<>->try->uc->u->openConnection->uc->setUseCaches->try->in->uc->getInputStream->r->new->InputStreamReader->new->BufferedReader->lc->while->parseLine->catch->finally->catch->fail->finally->return->names->iterator
ServiceLoader.LazyClassPathLookupIterator#nextProviderClass():::Loads and returns the next provider class.:::if->try->fullName->service->getName->if->ClassLoader->getSystemResources->else->if->ClassLoaders->platformClassLoader->if->BootLoader->hasClassPath->BootLoader->findResources->else->Collections->emptyEnumeration->else->loader->getResources->catch->fail->finally->while->pending->hasNext->if->configs->hasMoreElements->return->configs->nextElement->parse->cn->pending->next->try->return->Class->forName->catch->fail->return->finally
ServiceLoader.LazyClassPathLookupIterator#hasNextService()::: lazy class path lookup iterator has next service:::while->try->clazz->nextProviderClass->if->return->if->clazz->getModule->isNamed->continue->if->service->isAssignableFrom->type->ctor->getConstructor->p->new->ProviderImpl<S>->else->clazz->getName->fail->catch->finally->return
ServiceLoader.LazyClassPathLookupIterator#nextService()::: lazy class path lookup iterator next service:::if->hasNextService->throw->new->NoSuchElementException->provider->if->return->else->e->throw
ServiceLoader.LazyClassPathLookupIterator#hasNext()::: lazy class path lookup iterator has next:::if->return->hasNextService->else->action->new->PrivilegedAction<>->return->AccessController->doPrivileged
ServiceLoader.LazyClassPathLookupIterator#next()::: lazy class path lookup iterator next:::if->return->nextService->else->action->new->PrivilegedAction<>->return->AccessController->doPrivileged
ServiceLoader#newLookupIterator():::Returns a new lookup iterator.:::if->return->new->LayerLookupIterator<>->else->first->new->ModuleServicesLookupIterator<>->second->new->LazyClassPathLookupIterator<>->return->new->Iterator<Provider<S>>
ServiceLoader#iterator():::Returns an iterator to lazily load and instantiate the available providers of this loader's service:::if->newLookupIterator->return->new->Iterator<S>
ServiceLoader#stream():::Returns a stream to lazily load available providers of this loader's service:::if->return->loadedProviders->stream->if->newLookupIterator->s->new->ProviderSpliterator<>->return->StreamSupport->stream
ServiceLoader.ProviderSpliterator#trySplit()::: provider spliterator try split:::return
ServiceLoader.ProviderSpliterator#tryAdvance(Consumer>)::: provider spliterator try advance:::if->throw->new->ConcurrentModificationException->next->if->loadedProviders->size->loadedProviders->get->else->if->iterator->hasNext->iterator->next->loadedProviders->add->else->if->action->accept->return->else->return
ServiceLoader.ProviderSpliterator#characteristics()::: provider spliterator characteristics:::return
ServiceLoader.ProviderSpliterator#estimateSize()::: provider spliterator estimate size:::return
ServiceLoader#load(Class, ClassLoader, Module):::Creates a new service loader for the given service type, class loader, and caller.:::return->new->ServiceLoader<>
ServiceLoader#load(Class, ClassLoader):::Creates a new service loader for the given service:::return->Reflection->getCallerClass->new->ServiceLoader<>
ServiceLoader#load(Class):::Creates a new service loader for the given service type, using the current thread's java.lang.Thread#getContextClassLoader context class loader:::cl->Thread->currentThread->getContextClassLoader->return->Reflection->getCallerClass->new->ServiceLoader<>
ServiceLoader#loadInstalled(Class):::Creates a new service loader for the given service type, using the ClassLoader#getPlatformClassLoader() platform class loader:::cl->ClassLoader->getPlatformClassLoader->return->Reflection->getCallerClass->new->ServiceLoader<>
ServiceLoader#load(ModuleLayer, Class):::Creates a new service loader for the given service type to load service providers from modules in the given module layer and its ancestors:::return->Reflection->getCallerClass->new->ServiceLoader<>
ServiceLoader#findFirst():::Load the first available service provider of this loader's service:::iterator->iterator->if->iterator->hasNext->return->Optional->iterator->next->of->else->return->Optional->empty
ServiceLoader#reload():::Clear this loader's provider cache so that all providers will be reloaded:::instantiatedProviders->clear->loadedProviders->clear
ServiceLoader#toString():::Returns a string describing this service.:::return->service->getName
Set#size():::Returns the number of elements in this set (its cardinality):::
Set#isEmpty():::Returns true if this set contains no elements.:::
Set#contains(Object):::Returns true if this set contains the specified element:::
Set#iterator():::Returns an iterator over the elements in this set:::
Set#toArray():::Returns an array containing all of the elements in this set:::
Set#toArray(T[]):::Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array:::
Set#add(E):::Adds the specified element to this set if it is not already present (optional operation):::
Set#remove(Object):::Removes the specified element from this set if it is present (optional operation):::
Set#containsAll(Collection):::Returns true if this set contains all of the elements of the specified collection:::
Set#addAll(Collection):::Adds all of the elements in the specified collection to this set if they're not already present (optional operation):::
Set#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection (optional operation):::
Set#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection (optional operation):::
Set#clear():::Removes all of the elements from this set (optional operation):::
Set#equals(Object):::Compares the specified object with this set for equality:::
Set#hashCode():::Returns the hash code value for this set:::
Set#spliterator():::Creates a Spliterator over the elements in this set:::return->Spliterators->spliterator
Set#of():::Returns an unmodifiable set containing zero elements:::return->ImmutableCollections->emptySet
Set#of(E):::Returns an unmodifiable set containing one element:::return->new->ImmutableCollections.Set12<>
Set#of(E, E):::Returns an unmodifiable set containing two elements:::return->new->ImmutableCollections.Set12<>
Set#of(E, E, E):::Returns an unmodifiable set containing three elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E):::Returns an unmodifiable set containing four elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E):::Returns an unmodifiable set containing five elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E):::Returns an unmodifiable set containing six elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E, E):::Returns an unmodifiable set containing seven elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing eight elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing nine elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing ten elements:::return->new->ImmutableCollections.SetN<>
Set#of(E...):::Returns an unmodifiable set containing an arbitrary number of elements:::switch->return->ImmutableCollections->emptySet->return->new->ImmutableCollections.Set12<>->return->new->ImmutableCollections.Set12<>->return->new->ImmutableCollections.SetN<>
Set#copyOf(Collection):::Returns an unmodifiable Set containing the elements of the given Collection:::if->return->else->return->Set->new->HashSet<>->toArray->of
SimpleTimeZone#setStartYear(int):::Sets the daylight saving time starting year.:::invalidateCache
SimpleTimeZone#setStartRule(int, int, int, int):::Sets the daylight saving time start rule:::decodeStartRule->invalidateCache
SimpleTimeZone#setStartRule(int, int, int):::Sets the daylight saving time start rule to a fixed date within a month:::setStartRule
SimpleTimeZone#setStartRule(int, int, int, int, boolean):::Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.:::if->setStartRule->else->setStartRule
SimpleTimeZone#setEndRule(int, int, int, int):::Sets the daylight saving time end rule:::decodeEndRule->invalidateCache
SimpleTimeZone#setEndRule(int, int, int):::Sets the daylight saving time end rule to a fixed date within a month:::setEndRule
SimpleTimeZone#setEndRule(int, int, int, int, boolean):::Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.:::if->setEndRule->else->setEndRule
SimpleTimeZone#getOffset(long):::Returns the offset of this time zone from UTC at the given time:::return->getOffsets
SimpleTimeZone#getOffsets(long, int[])::: simple time zone get offsets:::offset->if->cache->if->if->break->cal->CalendarSystem->forName->cdate->cal->newCalendarDate->cal->getCalendarDate->year->cdate->getNormalizedYear->if->cdate->setTimeOfDay->getOffset->if->return
SimpleTimeZone#getOffset(int, int, int, int, int, int):::Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time:::if->throw->new->IllegalArgumentException->y->if->if->else->if->CalendarUtils->mod->m->cal->cdate->cal->newCalendarDate->cdate->setDate->time->cal->getTime->if->CalendarSystem->forName->cal->newCalendarDate->cdate->setNormalizedDate->cal->getTime->if->cdate->getNormalizedYear->cdate->getMonth->cdate->getDayOfMonth->throw->new->IllegalArgumentException->if->return->return->getOffset
SimpleTimeZone#getOffset(BaseCalendar, BaseCalendar.Date, int, long)::: simple time zone get offset:::cache->if->if->return->if->return->start->getStart->end->getEnd->offset->if->if->new->Cache->else->if->getStart->if->else->if->getEnd->if->if->new->Cache->return
SimpleTimeZone#getStart(BaseCalendar, BaseCalendar.Date, int)::: simple time zone get start:::time->if->return->getTransition
SimpleTimeZone#getEnd(BaseCalendar, BaseCalendar.Date, int)::: simple time zone get end:::time->if->if->return->getTransition
SimpleTimeZone#getTransition(BaseCalendar, BaseCalendar.Date, int, int, int, int, int, int)::: simple time zone get transition:::cdate->setNormalizedYear->cdate->setMonth->switch->cdate->setDayOfMonth->break->cdate->setDayOfMonth->if->cdate->cal->getMonthLength->setDayOfMonth->cal->getNthDayOfWeek->break->cdate->setDayOfMonth->cal->getNthDayOfWeek->break->cdate->setDayOfMonth->cal->getNthDayOfWeek->break->return->cal->getTime
SimpleTimeZone#getRawOffset():::Gets the GMT offset for this time zone.:::return
SimpleTimeZone#setRawOffset(int):::Sets the base time zone offset to GMT:::
SimpleTimeZone#setDSTSavings(int):::Sets the amount of time in milliseconds that the clock is advanced during daylight saving time.:::if->throw->new->IllegalArgumentException
SimpleTimeZone#getDSTSavings():::Returns the amount of time in milliseconds that the clock is advanced during daylight saving time.:::return
SimpleTimeZone#useDaylightTime():::Queries if this time zone uses daylight saving time.:::return
SimpleTimeZone#observesDaylightTime():::Returns true if this SimpleTimeZone observes Daylight Saving Time:::return->useDaylightTime
SimpleTimeZone#inDaylightTime(Date):::Queries if the given date is in daylight saving time.:::return->date->getTime->getOffset
SimpleTimeZone#clone():::Returns a clone of this SimpleTimeZone instance.:::return->super->clone
SimpleTimeZone#hashCode():::Generates the hash code for the SimpleDateFormat object.:::return
SimpleTimeZone#equals(Object):::Compares the equality of two SimpleTimeZone objects.:::if->return->if->return->that->return->getID->that->getID->equals->hasSameRules
SimpleTimeZone#hasSameRules(TimeZone):::Returns true if this zone has the same rules and offset as another zone.:::if->return->if->return->that->return
SimpleTimeZone#toString():::Returns a string representation of this time zone.:::return->getClass->getName->getID
SimpleTimeZone#invalidateCache()::: simple time zone invalidate cache:::
SimpleTimeZone#decodeRules():::Given a set of encoded rules in startDay and startDayOfMonth, decode them and set the startMode appropriately:::decodeStartRule->decodeEndRule
SimpleTimeZone#decodeStartRule():::Decode the start rule and validate the parameters:::if->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->else->if->else->if->else->if->throw->new->IllegalArgumentException->if->if->throw->new->IllegalArgumentException->else->if->throw->new->IllegalArgumentException
SimpleTimeZone#decodeEndRule():::Decode the end rule and validate the parameters:::if->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->else->if->else->if->else->if->throw->new->IllegalArgumentException->if->if->throw->new->IllegalArgumentException->else->if->throw->new->IllegalArgumentException
SimpleTimeZone#makeRulesCompatible():::Make rules compatible to 1.1 FCS code:::switch->break->if->break->if->else->break->switch->break->if->break->if->else->break->switch->break->while->while->switch->break->while->while
SimpleTimeZone#packRules():::Pack the start and end rules into an array of bytes:::rules->new->byteArr->return
SimpleTimeZone#unpackRules(byte[]):::Given an array of bytes produced by packRules, interpret them as the start and end rules.:::if
SimpleTimeZone#packTimes():::Pack the start and end times into an array of bytes:::times->new->intArr->return
SimpleTimeZone#unpackTimes(int[]):::Unpack the start and end times from an array of bytes:::
SimpleTimeZone#writeObject(ObjectOutputStream):::Save the state of this object to a stream (i.e., serialize it).:::rules->packRules->times->packTimes->makeRulesCompatible->stream->defaultWriteObject->stream->writeInt->stream->write->stream->writeObject->unpackRules->unpackTimes
SimpleTimeZone#readObject(ObjectInputStream):::Reconstitute this object from a stream (i.e., deserialize it):::stream->defaultReadObject->if->if->if->else->length->stream->readInt->if->rules->new->byteArr->stream->readFully->unpackRules->else->throw->new->InvalidObjectException->if->times->stream->readObject->unpackTimes
SortedMap#comparator():::Returns the comparator used to order the keys in this map, or null if this map uses the Comparable natural ordering of its keys.:::
SortedMap#subMap(K, K):::Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive:::
SortedMap#headMap(K):::Returns a view of the portion of this map whose keys are strictly less than toKey:::
SortedMap#tailMap(K):::Returns a view of the portion of this map whose keys are greater than or equal to fromKey:::
SortedMap#firstKey():::Returns the first (lowest) key currently in this map.:::
SortedMap#lastKey():::Returns the last (highest) key currently in this map.:::
SortedMap#keySet():::Returns a Set view of the keys contained in this map:::
SortedMap#values():::Returns a Collection view of the values contained in this map:::
SortedMap#entrySet():::Returns a Set view of the mappings contained in this map:::
SortedSet#comparator():::Returns the comparator used to order the elements in this set, or null if this set uses the Comparable natural ordering of its elements.:::
SortedSet#subSet(E, E):::Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive:::
SortedSet#headSet(E):::Returns a view of the portion of this set whose elements are strictly less than toElement:::
SortedSet#tailSet(E):::Returns a view of the portion of this set whose elements are greater than or equal to fromElement:::
SortedSet#first():::Returns the first (lowest) element currently in this set.:::
SortedSet#last():::Returns the last (highest) element currently in this set.:::
SortedSet#spliterator():::Creates a Spliterator over the elements in this sorted set:::return->new->Spliterators.IteratorSpliterator<E>
Spliterator#tryAdvance(Consumer):::If a remaining element exists, performs the given action on it, returning true; else returns false:::
Spliterator#forEachRemaining(Consumer):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception:::do->while->tryAdvance
Spliterator#trySplit():::If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator:::
Spliterator#estimateSize():::Returns an estimate of the number of elements that would be encountered by a #forEachRemaining traversal, or returns Long#MAX_VALUE if infinite, unknown, or too expensive to compute:::
Spliterator#getExactSizeIfKnown():::Convenience method that returns #estimateSize() if this Spliterator is #SIZED, else -1.:::return->characteristics->estimateSize
Spliterator#characteristics():::Returns a set of characteristics of this Spliterator and its elements:::
Spliterator#hasCharacteristics(int):::Returns true if this Spliterator's #characteristics contain all of the given characteristics.:::return->characteristics
Spliterator#getComparator():::If this Spliterator's source is #SORTED by a Comparator, returns that Comparator:::throw->new->IllegalStateException
Spliterator.OfPrimitive#trySplit()::: of primitive try split:::
Spliterator.OfPrimitive#tryAdvance(T_CONS):::If a remaining element exists, performs the given action on it, returning true; else returns false:::
Spliterator.OfPrimitive#forEachRemaining(T_CONS):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception:::do->while->tryAdvance
Spliterator.OfInt#trySplit()::: of int try split:::
Spliterator.OfInt#tryAdvance(IntConsumer)::: of int try advance:::
Spliterator.OfInt#forEachRemaining(IntConsumer)::: of int for each remaining:::do->while->tryAdvance
Spliterator.OfInt#tryAdvance(Consumer)::: of int try advance:::if->return->tryAdvance->else->if->Tripwire->getClass->trip->return->action->accept->tryAdvance
Spliterator.OfInt#forEachRemaining(Consumer)::: of int for each remaining:::if->forEachRemaining->else->if->Tripwire->getClass->trip->action->accept->forEachRemaining
Spliterator.OfLong#trySplit()::: of long try split:::
Spliterator.OfLong#tryAdvance(LongConsumer)::: of long try advance:::
Spliterator.OfLong#forEachRemaining(LongConsumer)::: of long for each remaining:::do->while->tryAdvance
Spliterator.OfLong#tryAdvance(Consumer)::: of long try advance:::if->return->tryAdvance->else->if->Tripwire->getClass->trip->return->action->accept->tryAdvance
Spliterator.OfLong#forEachRemaining(Consumer)::: of long for each remaining:::if->forEachRemaining->else->if->Tripwire->getClass->trip->action->accept->forEachRemaining
Spliterator.OfDouble#trySplit()::: of double try split:::
Spliterator.OfDouble#tryAdvance(DoubleConsumer)::: of double try advance:::
Spliterator.OfDouble#forEachRemaining(DoubleConsumer)::: of double for each remaining:::do->while->tryAdvance
Spliterator.OfDouble#tryAdvance(Consumer)::: of double try advance:::if->return->tryAdvance->else->if->Tripwire->getClass->trip->return->action->accept->tryAdvance
Spliterator.OfDouble#forEachRemaining(Consumer)::: of double for each remaining:::if->forEachRemaining->else->if->Tripwire->getClass->trip->action->accept->forEachRemaining
Spliterators#emptySpliterator():::Creates an empty Spliterator  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED:::return
Spliterators#emptyIntSpliterator():::Creates an empty Spliterator.OfInt  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED:::return
Spliterators#emptyLongSpliterator():::Creates an empty Spliterator.OfLong  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED:::return
Spliterators#emptyDoubleSpliterator():::Creates an empty Spliterator.OfDouble  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED:::return
Spliterators#spliterator(Object[], int):::Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics:::return->Objects->requireNonNull->new->ArraySpliterator<>
Spliterators#spliterator(Object[], int, int, int):::Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics:::Objects->requireNonNull->checkFromToBounds->return->new->ArraySpliterator<>
Spliterators#spliterator(int[], int):::Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics:::return->Objects->requireNonNull->new->IntArraySpliterator
Spliterators#spliterator(int[], int, int, int):::Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics:::Objects->requireNonNull->checkFromToBounds->return->new->IntArraySpliterator
Spliterators#spliterator(long[], int):::Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics:::return->Objects->requireNonNull->new->LongArraySpliterator
Spliterators#spliterator(long[], int, int, int):::Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics:::Objects->requireNonNull->checkFromToBounds->return->new->LongArraySpliterator
Spliterators#spliterator(double[], int):::Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics:::return->Objects->requireNonNull->new->DoubleArraySpliterator
Spliterators#spliterator(double[], int, int, int):::Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics:::Objects->requireNonNull->checkFromToBounds->return->new->DoubleArraySpliterator
Spliterators#checkFromToBounds(int, int, int):::Validate inclusive start index and exclusive end index against the length of an array.:::if->throw->new->ArrayIndexOutOfBoundsException->if->throw->new->ArrayIndexOutOfBoundsException->if->throw->new->ArrayIndexOutOfBoundsException
Spliterators#spliterator(Collection, int):::Creates a Spliterator using the given collection's java.util.Collection#iterator() as the source of elements, and reporting its java.util.Collection#size() as its initial size:::return->Objects->requireNonNull->new->IteratorSpliterator<>
Spliterators#spliterator(Iterator, long, int):::Creates a Spliterator using a given Iterator as the source of elements, and with a given initially reported size:::return->Objects->requireNonNull->new->IteratorSpliterator<>
Spliterators#spliteratorUnknownSize(Iterator, int):::Creates a Spliterator using a given Iterator as the source of elements, with no initial size estimate:::return->Objects->requireNonNull->new->IteratorSpliterator<>
Spliterators#spliterator(PrimitiveIterator.OfInt, long, int):::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, and with a given initially reported size:::return->Objects->requireNonNull->new->IntIteratorSpliterator
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfInt, int):::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, with no initial size estimate:::return->Objects->requireNonNull->new->IntIteratorSpliterator
Spliterators#spliterator(PrimitiveIterator.OfLong, long, int):::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, and with a given initially reported size:::return->Objects->requireNonNull->new->LongIteratorSpliterator
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfLong, int):::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, with no initial size estimate:::return->Objects->requireNonNull->new->LongIteratorSpliterator
Spliterators#spliterator(PrimitiveIterator.OfDouble, long, int):::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, and with a given initially reported size:::return->Objects->requireNonNull->new->DoubleIteratorSpliterator
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfDouble, int):::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, with no initial size estimate:::return->Objects->requireNonNull->new->DoubleIteratorSpliterator
Spliterators#iterator(Spliterator):::Creates an Iterator from a Spliterator:::Objects->requireNonNull->return->new->Adapter
Spliterators#iterator(Spliterator.OfInt):::Creates an PrimitiveIterator.OfInt from a Spliterator.OfInt:::Objects->requireNonNull->return->new->Adapter
Spliterators#iterator(Spliterator.OfLong):::Creates an PrimitiveIterator.OfLong from a Spliterator.OfLong:::Objects->requireNonNull->return->new->Adapter
Spliterators#iterator(Spliterator.OfDouble):::Creates an PrimitiveIterator.OfDouble from a Spliterator.OfDouble:::Objects->requireNonNull->return->new->Adapter
Spliterators.EmptySpliterator#trySplit()::: empty spliterator try split:::return
Spliterators.EmptySpliterator#tryAdvance(C)::: empty spliterator try advance:::Objects->requireNonNull->return
Spliterators.EmptySpliterator#forEachRemaining(C)::: empty spliterator for each remaining:::Objects->requireNonNull
Spliterators.EmptySpliterator#estimateSize()::: empty spliterator estimate size:::return
Spliterators.EmptySpliterator#characteristics()::: empty spliterator characteristics:::return
Spliterators.ArraySpliterator#trySplit()::: array spliterator try split:::lo->mid->return->new->ArraySpliterator<>
Spliterators.ArraySpliterator#forEachRemaining(Consumer)::: array spliterator for each remaining:::a->i->hi->if->throw->new->NullPointerException->if->do->action->accept->while
Spliterators.ArraySpliterator#tryAdvance(Consumer)::: array spliterator try advance:::if->throw->new->NullPointerException->if->e->action->accept->return->return
Spliterators.ArraySpliterator#estimateSize()::: array spliterator estimate size:::return
Spliterators.ArraySpliterator#characteristics()::: array spliterator characteristics:::return
Spliterators.ArraySpliterator#getComparator()::: array spliterator get comparator:::if->hasCharacteristics->return->throw->new->IllegalStateException
Spliterators.IntArraySpliterator#trySplit()::: int array spliterator try split:::lo->mid->return->new->IntArraySpliterator
Spliterators.IntArraySpliterator#forEachRemaining(IntConsumer)::: int array spliterator for each remaining:::a->i->hi->if->throw->new->NullPointerException->if->do->action->accept->while
Spliterators.IntArraySpliterator#tryAdvance(IntConsumer)::: int array spliterator try advance:::if->throw->new->NullPointerException->if->action->accept->return->return
Spliterators.IntArraySpliterator#estimateSize()::: int array spliterator estimate size:::return
Spliterators.IntArraySpliterator#characteristics()::: int array spliterator characteristics:::return
Spliterators.IntArraySpliterator#getComparator()::: int array spliterator get comparator:::if->hasCharacteristics->return->throw->new->IllegalStateException
Spliterators.LongArraySpliterator#trySplit()::: long array spliterator try split:::lo->mid->return->new->LongArraySpliterator
Spliterators.LongArraySpliterator#forEachRemaining(LongConsumer)::: long array spliterator for each remaining:::a->i->hi->if->throw->new->NullPointerException->if->do->action->accept->while
Spliterators.LongArraySpliterator#tryAdvance(LongConsumer)::: long array spliterator try advance:::if->throw->new->NullPointerException->if->action->accept->return->return
Spliterators.LongArraySpliterator#estimateSize()::: long array spliterator estimate size:::return
Spliterators.LongArraySpliterator#characteristics()::: long array spliterator characteristics:::return
Spliterators.LongArraySpliterator#getComparator()::: long array spliterator get comparator:::if->hasCharacteristics->return->throw->new->IllegalStateException
Spliterators.DoubleArraySpliterator#trySplit()::: double array spliterator try split:::lo->mid->return->new->DoubleArraySpliterator
Spliterators.DoubleArraySpliterator#forEachRemaining(DoubleConsumer)::: double array spliterator for each remaining:::a->i->hi->if->throw->new->NullPointerException->if->do->action->accept->while
Spliterators.DoubleArraySpliterator#tryAdvance(DoubleConsumer)::: double array spliterator try advance:::if->throw->new->NullPointerException->if->action->accept->return->return
Spliterators.DoubleArraySpliterator#estimateSize()::: double array spliterator estimate size:::return
Spliterators.DoubleArraySpliterator#characteristics()::: double array spliterator characteristics:::return
Spliterators.DoubleArraySpliterator#getComparator()::: double array spliterator get comparator:::if->hasCharacteristics->return->throw->new->IllegalStateException
Spliterators.AbstractSpliterator.HoldingConsumer#accept(T)::: holding consumer accept:::
Spliterators.AbstractSpliterator#trySplit():::  This implementation permits limited parallelism.:::holder->new->HoldingConsumer<>->s->if->tryAdvance->n->if->if->a->new->ObjectArr->j->do->while->tryAdvance->if->return->characteristics->new->ArraySpliterator<>->return
Spliterators.AbstractSpliterator#estimateSize()::: abstract spliterator estimate size:::return
Spliterators.AbstractSpliterator#characteristics()::: abstract spliterator characteristics:::return
Spliterators.AbstractIntSpliterator.HoldingIntConsumer#accept(int)::: holding int consumer accept:::
Spliterators.AbstractIntSpliterator#trySplit():::  This implementation permits limited parallelism.:::holder->new->HoldingIntConsumer->s->if->tryAdvance->n->if->if->a->new->intArr->j->do->while->tryAdvance->if->return->characteristics->new->IntArraySpliterator->return
Spliterators.AbstractIntSpliterator#estimateSize()::: abstract int spliterator estimate size:::return
Spliterators.AbstractIntSpliterator#characteristics()::: abstract int spliterator characteristics:::return
Spliterators.AbstractLongSpliterator.HoldingLongConsumer#accept(long)::: holding long consumer accept:::
Spliterators.AbstractLongSpliterator#trySplit():::  This implementation permits limited parallelism.:::holder->new->HoldingLongConsumer->s->if->tryAdvance->n->if->if->a->new->longArr->j->do->while->tryAdvance->if->return->characteristics->new->LongArraySpliterator->return
Spliterators.AbstractLongSpliterator#estimateSize()::: abstract long spliterator estimate size:::return
Spliterators.AbstractLongSpliterator#characteristics()::: abstract long spliterator characteristics:::return
Spliterators.AbstractDoubleSpliterator.HoldingDoubleConsumer#accept(double)::: holding double consumer accept:::
Spliterators.AbstractDoubleSpliterator#trySplit():::  This implementation permits limited parallelism.:::holder->new->HoldingDoubleConsumer->s->if->tryAdvance->n->if->if->a->new->doubleArr->j->do->while->tryAdvance->if->return->characteristics->new->DoubleArraySpliterator->return
Spliterators.AbstractDoubleSpliterator#estimateSize()::: abstract double spliterator estimate size:::return
Spliterators.AbstractDoubleSpliterator#characteristics()::: abstract double spliterator characteristics:::return
Spliterators.IteratorSpliterator#trySplit()::: iterator spliterator try split:::i->s->if->collection->iterator->collection->size->else->if->i->hasNext->n->if->if->a->new->ObjectArr->j->do->i->next->while->i->hasNext->if->return->new->ArraySpliterator<>->return
Spliterators.IteratorSpliterator#forEachRemaining(Consumer)::: iterator spliterator for each remaining:::if->throw->new->NullPointerException->i->if->collection->iterator->collection->size->i->forEachRemaining
Spliterators.IteratorSpliterator#tryAdvance(Consumer)::: iterator spliterator try advance:::if->throw->new->NullPointerException->if->collection->iterator->collection->size->if->it->hasNext->action->it->next->accept->return->return
Spliterators.IteratorSpliterator#estimateSize()::: iterator spliterator estimate size:::if->collection->iterator->return->collection->size->return
Spliterators.IteratorSpliterator#characteristics()::: iterator spliterator characteristics:::return
Spliterators.IteratorSpliterator#getComparator()::: iterator spliterator get comparator:::if->hasCharacteristics->return->throw->new->IllegalStateException
Spliterators.IntIteratorSpliterator#trySplit()::: int iterator spliterator try split:::i->s->if->i->hasNext->n->if->if->a->new->intArr->j->do->i->nextInt->while->i->hasNext->if->return->new->IntArraySpliterator->return
Spliterators.IntIteratorSpliterator#forEachRemaining(IntConsumer)::: int iterator spliterator for each remaining:::if->throw->new->NullPointerException->it->forEachRemaining
Spliterators.IntIteratorSpliterator#tryAdvance(IntConsumer)::: int iterator spliterator try advance:::if->throw->new->NullPointerException->if->it->hasNext->action->it->nextInt->accept->return->return
Spliterators.IntIteratorSpliterator#estimateSize()::: int iterator spliterator estimate size:::return
Spliterators.IntIteratorSpliterator#characteristics()::: int iterator spliterator characteristics:::return
Spliterators.IntIteratorSpliterator#getComparator()::: int iterator spliterator get comparator:::if->hasCharacteristics->return->throw->new->IllegalStateException
Spliterators.LongIteratorSpliterator#trySplit()::: long iterator spliterator try split:::i->s->if->i->hasNext->n->if->if->a->new->longArr->j->do->i->nextLong->while->i->hasNext->if->return->new->LongArraySpliterator->return
Spliterators.LongIteratorSpliterator#forEachRemaining(LongConsumer)::: long iterator spliterator for each remaining:::if->throw->new->NullPointerException->it->forEachRemaining
Spliterators.LongIteratorSpliterator#tryAdvance(LongConsumer)::: long iterator spliterator try advance:::if->throw->new->NullPointerException->if->it->hasNext->action->it->nextLong->accept->return->return
Spliterators.LongIteratorSpliterator#estimateSize()::: long iterator spliterator estimate size:::return
Spliterators.LongIteratorSpliterator#characteristics()::: long iterator spliterator characteristics:::return
Spliterators.LongIteratorSpliterator#getComparator()::: long iterator spliterator get comparator:::if->hasCharacteristics->return->throw->new->IllegalStateException
Spliterators.DoubleIteratorSpliterator#trySplit()::: double iterator spliterator try split:::i->s->if->i->hasNext->n->if->if->a->new->doubleArr->j->do->i->nextDouble->while->i->hasNext->if->return->new->DoubleArraySpliterator->return
Spliterators.DoubleIteratorSpliterator#forEachRemaining(DoubleConsumer)::: double iterator spliterator for each remaining:::if->throw->new->NullPointerException->it->forEachRemaining
Spliterators.DoubleIteratorSpliterator#tryAdvance(DoubleConsumer)::: double iterator spliterator try advance:::if->throw->new->NullPointerException->if->it->hasNext->action->it->nextDouble->accept->return->return
Spliterators.DoubleIteratorSpliterator#estimateSize()::: double iterator spliterator estimate size:::return
Spliterators.DoubleIteratorSpliterator#characteristics()::: double iterator spliterator characteristics:::return
Spliterators.DoubleIteratorSpliterator#getComparator()::: double iterator spliterator get comparator:::if->hasCharacteristics->return->throw->new->IllegalStateException
SplittableRandom#mix64(long):::Computes Stafford variant 13 of 64bit mix function.:::return
SplittableRandom#mix32(long):::Returns the 32 high bits of Stafford variant 4 mix64 function as int.:::return
SplittableRandom#mixGamma(long):::Returns the gamma value to use for a new split instance.:::n->Long->bitCount->return
SplittableRandom#nextSeed():::Adds gamma to seed.:::return
SplittableRandom#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators:::r->nextSeed->mix64->if->n->m->if->else->if->for->u->nextSeed->mix64->else->while->nextSeed->mix64->return
SplittableRandom#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators:::r->nextSeed->mix32->if->n->m->if->else->if->for->u->nextSeed->mix32->else->while->nextSeed->mix32->return
SplittableRandom#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.:::r->nextLong->if->if->Double->Double->doubleToLongBits->longBitsToDouble->return
SplittableRandom#split():::Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance:::return->nextLong->nextSeed->mixGamma->new->SplittableRandom
SplittableRandom#nextBytes(byte[]):::Fills a user-supplied byte array with generated pseudorandom bytes.:::i->len->for->words->if->for->rnd->nextLong
SplittableRandom#nextInt():::Returns a pseudorandom int value.:::return->nextSeed->mix32
SplittableRandom#nextInt(int):::Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->r->nextSeed->mix32->m->if->else->for->u->nextSeed->mix32->return
SplittableRandom#nextInt(int, int):::Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->return->internalNextInt
SplittableRandom#nextLong():::Returns a pseudorandom long value.:::return->nextSeed->mix64
SplittableRandom#nextLong(long):::Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->r->nextSeed->mix64->m->if->else->for->u->nextSeed->mix64->return
SplittableRandom#nextLong(long, long):::Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->return->internalNextLong
SplittableRandom#nextDouble():::Returns a pseudorandom double value between zero (inclusive) and one (exclusive).:::return->nextSeed->mix64
SplittableRandom#nextDouble(double):::Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->result->nextSeed->mix64->return->Double->Double->doubleToLongBits->longBitsToDouble
SplittableRandom#nextDouble(double, double):::Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->return->internalNextDouble
SplittableRandom#nextBoolean():::Returns a pseudorandom boolean value.:::return->nextSeed->mix32
SplittableRandom#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it.:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
SplittableRandom#ints():::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it.:::return->StreamSupport->new->RandomIntsSpliterator->intStream
SplittableRandom#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
SplittableRandom#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
SplittableRandom#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it.:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
SplittableRandom#longs():::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it.:::return->StreamSupport->new->RandomLongsSpliterator->longStream
SplittableRandom#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
SplittableRandom#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
SplittableRandom#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
SplittableRandom#doubles():::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).:::return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
SplittableRandom#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
SplittableRandom#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
SplittableRandom.RandomIntsSpliterator#trySplit()::: random ints spliterator try split:::i->m->return->rng->split->new->RandomIntsSpliterator
SplittableRandom.RandomIntsSpliterator#estimateSize()::: random ints spliterator estimate size:::return
SplittableRandom.RandomIntsSpliterator#characteristics()::: random ints spliterator characteristics:::return
SplittableRandom.RandomIntsSpliterator#tryAdvance(IntConsumer)::: random ints spliterator try advance:::if->throw->new->NullPointerException->i->f->if->consumer->rng->internalNextInt->accept->return->return
SplittableRandom.RandomIntsSpliterator#forEachRemaining(IntConsumer)::: random ints spliterator for each remaining:::if->throw->new->NullPointerException->i->f->if->r->o->b->do->consumer->r->internalNextInt->accept->while
SplittableRandom.RandomLongsSpliterator#trySplit()::: random longs spliterator try split:::i->m->return->rng->split->new->RandomLongsSpliterator
SplittableRandom.RandomLongsSpliterator#estimateSize()::: random longs spliterator estimate size:::return
SplittableRandom.RandomLongsSpliterator#characteristics()::: random longs spliterator characteristics:::return
SplittableRandom.RandomLongsSpliterator#tryAdvance(LongConsumer)::: random longs spliterator try advance:::if->throw->new->NullPointerException->i->f->if->consumer->rng->internalNextLong->accept->return->return
SplittableRandom.RandomLongsSpliterator#forEachRemaining(LongConsumer)::: random longs spliterator for each remaining:::if->throw->new->NullPointerException->i->f->if->r->o->b->do->consumer->r->internalNextLong->accept->while
SplittableRandom.RandomDoublesSpliterator#trySplit()::: random doubles spliterator try split:::i->m->return->rng->split->new->RandomDoublesSpliterator
SplittableRandom.RandomDoublesSpliterator#estimateSize()::: random doubles spliterator estimate size:::return
SplittableRandom.RandomDoublesSpliterator#characteristics()::: random doubles spliterator characteristics:::return
SplittableRandom.RandomDoublesSpliterator#tryAdvance(DoubleConsumer)::: random doubles spliterator try advance:::if->throw->new->NullPointerException->i->f->if->consumer->rng->internalNextDouble->accept->return->return
SplittableRandom.RandomDoublesSpliterator#forEachRemaining(DoubleConsumer)::: random doubles spliterator for each remaining:::if->throw->new->NullPointerException->i->f->if->r->o->b->do->consumer->r->internalNextDouble->accept->while
Stack#push(E):::Pushes an item onto the top of this stack:::addElement->return
Stack#pop():::Removes the object at the top of this stack and returns that object as the value of this function.:::obj->len->size->peek->removeElementAt->return
Stack#peek():::Looks at the object at the top of this stack without removing it from the stack.:::len->size->if->throw->new->EmptyStackException->return->elementAt
Stack#empty():::Tests if this stack is empty.:::return->size
Stack#search(Object):::Returns the 1-based position where an object is on this stack:::i->lastIndexOf->if->return->size->return
StringJoiner#setEmptyValue(CharSequence):::Sets the sequence of characters to be used when determining the string representation of this StringJoiner and no elements have been added yet, that is, when it is empty:::Objects->requireNonNull->toString->return
StringJoiner#getChars(String, char[], int)::: string joiner get chars:::len->s->length->s->getChars->return
StringJoiner#toString():::Returns the current value, consisting of the prefix, the values added so far separated by the delimiter, and the suffix, unless no elements have been added in which case, the prefix + suffix or the emptyValue characters are returned.:::elts->if->return->size->addLen->prefix->length->suffix->length->if->compactElts->return->delimiter->chars->new->charArr->k->getChars->if->getChars->for->i->getChars->return->new->String
StringJoiner#add(CharSequence):::Adds a copy of the given CharSequence value as the next element of the StringJoiner value:::elt->String->valueOf->if->new->StringArr->else->if->Arrays->copyOf->delimiter->length->elt->length->return
StringJoiner#merge(StringJoiner):::Adds the contents of the given StringJoiner without prefix and suffix as the next element if it is non-empty:::Objects->requireNonNull->if->return->other->compactElts->return->add
StringJoiner#compactElts()::: string joiner compact elts:::if->chars->new->charArr->i->k->getChars->do->getChars->getChars->while->new->String
StringJoiner#length():::Returns the length of the String representation of this StringJoiner:::return->emptyValue->length->prefix->length->suffix->length
StringTokenizer#setMaxDelimCodePoint():::Set maxDelimCodePoint to the highest char in the delimiter set.:::if->return->m->c->count->for->i->delimiters->length->Character->charCount->if->new->intArr->for->i->j->Character->charCount
StringTokenizer#skipDelimiters(int):::Skips delimiters starting from the specified position:::if->throw->new->NullPointerException->position->while->if->c->str->charAt->if->delimiters->indexOf->break->else->c->str->codePointAt->if->isDelimiter->break->Character->charCount->return
StringTokenizer#scanToken(int):::Skips ahead from startPos and returns the index of the next delimiter character encountered, or maxPosition if no such delimiter is found.:::position->while->if->c->str->charAt->if->delimiters->indexOf->break->else->c->str->codePointAt->if->isDelimiter->break->Character->charCount->if->if->c->str->charAt->if->delimiters->indexOf->else->c->str->codePointAt->if->isDelimiter->Character->charCount->return
StringTokenizer#isDelimiter(int)::: string tokenizer is delimiter:::foreach->if->return->return
StringTokenizer#hasMoreTokens():::Tests if there are more tokens available from this tokenizer's string:::skipDelimiters->return
StringTokenizer#nextToken():::Returns the next token from this string tokenizer.:::skipDelimiters->if->throw->new->NoSuchElementException->start->scanToken->return->str->substring
StringTokenizer#nextToken(String):::Returns the next token in this string tokenizer's string:::setMaxDelimCodePoint->return->nextToken
StringTokenizer#hasMoreElements():::Returns the same value as the hasMoreTokens method:::return->hasMoreTokens
StringTokenizer#nextElement():::Returns the same value as the nextToken method, except that its declared return value is Object rather than String:::return->nextToken
StringTokenizer#countTokens():::Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception:::count->currpos->while->skipDelimiters->if->break->scanToken->return
Timer#serialNumber()::: timer serial number:::return->nextSerialNumber->getAndIncrement
Timer#schedule(TimerTask, long):::Schedules the specified task for execution after the specified delay.:::if->throw->new->IllegalArgumentException->System->currentTimeMillis->sched
Timer#schedule(TimerTask, Date):::Schedules the specified task for execution at the specified time:::time->getTime->sched
Timer#schedule(TimerTask, long, long):::Schedules the specified task for repeated fixed-delay execution, beginning after the specified delay:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->System->currentTimeMillis->sched
Timer#schedule(TimerTask, Date, long):::Schedules the specified task for repeated fixed-delay execution, beginning at the specified time:::if->throw->new->IllegalArgumentException->firstTime->getTime->sched
Timer#scheduleAtFixedRate(TimerTask, long, long):::Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->System->currentTimeMillis->sched
Timer#scheduleAtFixedRate(TimerTask, Date, long):::Schedules the specified task for repeated fixed-rate execution, beginning at the specified time:::if->throw->new->IllegalArgumentException->firstTime->getTime->sched
Timer#sched(TimerTask, long, long):::Schedule the specified timer task for execution at the specified time with the specified period, in milliseconds:::if->throw->new->IllegalArgumentException->if->Math->abs->synchronized->if->throw->new->IllegalStateException->synchronized->if->throw->new->IllegalStateException->queue->add->if->queue->getMin->queue->notify
Timer#cancel():::Terminates this timer, discarding any currently scheduled tasks:::synchronized->queue->clear->queue->notify
Timer#purge():::Removes all cancelled tasks from this timer's task queue:::result->synchronized->for->i->queue->size->if->queue->heapify->return
TimerThread#run()::: timer thread run:::try->mainLoop->catch->finally->synchronized->queue->clear
TimerThread#mainLoop():::The main timer loop:::while->try->task->taskFired->synchronized->while->queue->isEmpty->queue->wait->if->queue->isEmpty->break->currentTime->executionTime->queue->getMin->synchronized->if->queue->removeMin->continue->System->currentTimeMillis->if->if->queue->removeMin->else->queue->rescheduleMin->if->queue->wait->if->task->run->catch->finally
TaskQueue#size():::Returns the number of tasks currently on the queue.:::return
TaskQueue#add(TimerTask):::Adds a new task to the priority queue.:::if->Arrays->copyOf->fixUp
TaskQueue#getMin():::Return the "head task" of the priority queue:::return
TaskQueue#get(int):::Return the ith task in the priority queue, where i ranges from 1 (the head task, which is returned by getMin) to the number of tasks on the queue, inclusive.:::return
TaskQueue#removeMin():::Remove the head task from the priority queue.:::fixDown
TaskQueue#quickRemove(int):::Removes the ith element from queue without regard for maintaining the heap invariant:::
TaskQueue#rescheduleMin(long):::Sets the nextExecutionTime associated with the head task to the specified value, and adjusts priority queue accordingly.:::fixDown
TaskQueue#isEmpty():::Returns true if the priority queue contains no elements.:::return
TaskQueue#clear():::Removes all elements from the priority queue.:::for->i
TaskQueue#fixUp(int):::Establishes the heap invariant (described above) assuming the heap satisfies the invariant except possibly for the leaf-node indexed by k (which may have a nextExecutionTime less than its parent's):::while->j->if->break->tmp
TaskQueue#fixDown(int):::Establishes the heap invariant (described above) in the subtree rooted at k, which is assumed to satisfy the heap invariant except possibly for node k itself (which may have a nextExecutionTime greater than its children's):::j->while->if->if->break->tmp
TaskQueue#heapify():::Establishes the heap invariant (described above) in the entire tree, assuming nothing about the order of the elements prior to the call.:::for->i
TimerTask#run():::The action to be performed by this timer task.:::
TimerTask#cancel():::Cancels this timer task:::synchronized->result->return
TimerTask#scheduledExecutionTime():::Returns the scheduled execution time of the most recent actual execution of this task:::synchronized->return
TimeZone#getOffset(int, int, int, int, int, int):::Gets the time zone offset, for current date, modified in case of daylight savings:::
TimeZone#getOffset(long):::Returns the offset of this time zone from UTC at the specified date:::if->new->Date->inDaylightTime->return->getRawOffset->getDSTSavings->return->getRawOffset
TimeZone#getOffsets(long, int[]):::Gets the raw GMT offset and the amount of daylight saving of this time zone at the given time.:::rawoffset->getRawOffset->dstoffset->if->new->Date->inDaylightTime->getDSTSavings->if->return
TimeZone#setRawOffset(int):::Sets the base time zone offset to GMT:::
TimeZone#getRawOffset():::Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone:::
TimeZone#getID():::Gets the ID of this time zone.:::return
TimeZone#setID(String):::Sets the time zone ID:::if->throw->new->NullPointerException
TimeZone#getDisplayName():::Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale:::return->Locale->getDefault->getDisplayName
TimeZone#getDisplayName(Locale):::Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale:::return->getDisplayName
TimeZone#getDisplayName(boolean, int):::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale:::return->Locale->getDefault->getDisplayName
TimeZone#getDisplayName(boolean, int, Locale):::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the specified locale:::if->throw->new->IllegalArgumentException->id->getID->name->TimeZoneNameUtility->retrieveDisplayName->if->return->if->id->startsWith->id->length->sign->id->charAt->if->return->offset->getRawOffset->if->getDSTSavings->return->ZoneInfoFile->toCustomID
TimeZone#getDisplayNames(String, Locale)::: time zone get display names:::return->TimeZoneNameUtility->retrieveDisplayNames
TimeZone#getDSTSavings():::Returns the amount of time to be added to local standard time to get local wall clock time:::if->useDaylightTime->return->return
TimeZone#useDaylightTime():::Queries if this TimeZone uses Daylight Saving Time:::
TimeZone#observesDaylightTime():::Returns true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time:::return->useDaylightTime->new->Date->inDaylightTime
TimeZone#inDaylightTime(Date):::Queries if the given date is in Daylight Saving Time in this time zone.:::
TimeZone#getTimeZone(String):::Gets the TimeZone for the given ID.:::return->getTimeZone
TimeZone#getTimeZone(ZoneId):::Gets the TimeZone for the given zoneId.:::tzid->zoneId->getId->c->tzid->charAt->if->else->if->tzid->length->return->getTimeZone
TimeZone#toZoneId():::Converts this TimeZone object to a ZoneId.:::zId->if->toZoneId0->return
TimeZone#toZoneId0()::: time zone to zone id0:::id->getID->defaultZone->if->id->defaultZone->getID->equals->return->defaultZone->toZoneId->if->ZoneInfoFile->useOldMapping->id->length->if->equals->return->ZoneId->of->if->equals->return->ZoneId->of->if->equals->return->ZoneId->of->return->ZoneId->of
TimeZone#getTimeZone(String, boolean)::: time zone get time zone:::tz->ZoneInfo->getTimeZone->if->parseCustomTimeZone->if->new->ZoneInfo->return
TimeZone#getAvailableIDs(int):::Gets the available IDs according to the given time zone offset in milliseconds.:::return->ZoneInfo->getAvailableIDs
TimeZone#getAvailableIDs():::Gets all the available IDs supported.:::return->ZoneInfo->getAvailableIDs
TimeZone#getSystemTimeZoneID(String):::Gets the platform defined TimeZone ID.:::
TimeZone#getSystemGMTOffsetID():::Gets the custom time zone ID based on the GMT offset of the platform:::
TimeZone#getDefault():::Gets the default TimeZone of the Java virtual machine:::return->getDefaultRef->clone
TimeZone#getDefaultRef():::Returns the reference to the default TimeZone object:::defaultZone->if->setDefaultZone->return
TimeZone#setDefaultZone()::: time zone set default zone:::tz->props->GetPropertyAction->privilegedGetProperties->zoneID->props->getProperty->if->zoneID->isEmpty->javaHome->StaticProperty->javaHome->try->getSystemTimeZoneID->if->catch->finally->getTimeZone->if->gmtOffsetID->getSystemGMTOffsetID->if->getTimeZone->id->props->setProperty->return
TimeZone#setDefault(TimeZone):::Sets the TimeZone that is returned by the getDefault method:::sm->System->getSecurityManager->if->sm->new->PropertyPermission->checkPermission->zone->clone
TimeZone#hasSameRules(TimeZone):::Returns true if this zone has the same rule and offset as another zone:::return->getRawOffset->other->getRawOffset->useDaylightTime->other->useDaylightTime
TimeZone#clone():::Creates a copy of this TimeZone.:::try->return->super->clone->catch->throw->new->InternalError->finally
TimeZone#parseCustomTimeZone(String):::Parses a custom time zone identifier and returns a corresponding zone:::length->if->id->length->id->indexOf->return->zi->ZoneInfoFile->getZoneInfo->if->return->index->negative->c->id->charAt->if->else->if->return->hours->num->countDelim->len->while->id->charAt->if->if->return->if->return->continue->if->return->if->return->if->if->else->else->if->return->if->return->gmtOffset->if->ZoneInfoFile->getZoneInfo->if->zi->setID->else->zi->setID->else->ZoneInfoFile->getCustomTimeZone->return
TimSort#sort(T[], int, int, Comparator, T[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible:::nRemaining->if->return->if->initRunLen->countRunAndMakeAscending->binarySort->return->ts->new->TimSort<>->minRun->minRunLength->do->runLen->countRunAndMakeAscending->if->force->binarySort->ts->pushRun->ts->mergeCollapse->while->ts->mergeForceCollapse
TimSort#binarySort(T[], int, int, int, Comparator):::Sorts the specified portion of the specified array using a binary insertion sort:::if->for
TimSort#countRunAndMakeAscending(T[], int, int, Comparator):::Returns the length of the run beginning at the specified position in the specified array and reverses the run if it is descending (ensuring that the run will always be ascending when the method returns):::runHi->if->return->if->c->compare->while->c->compare->reverseRange->else->while->c->compare->return
TimSort#reverseRange(Object[], int, int):::Reverse the specified range of the specified array.:::while->t
TimSort#minRunLength(int):::Returns the minimum acceptable run length for an array of the specified length:::r->while->return
TimSort#pushRun(int, int):::Pushes the specified run onto the pending-run stack.:::
TimSort#mergeCollapse():::Examines the stack of runs waiting to be merged and merges adjacent runs until the stack invariants are reestablished:      1:::while->n->if->if->else->if->break->mergeAt
TimSort#mergeForceCollapse():::Merges all runs on the stack until only one remains:::while->n->if->mergeAt
TimSort#mergeAt(int):::Merges the two runs at stack indices i and i+1:::base1->len1->base2->len2->if->k->gallopRight->if->return->gallopLeft->if->return->if->mergeLo->else->mergeHi
TimSort#gallopLeft(T, T[], int, int, int, Comparator):::Locates the position at which to insert the specified key into the specified sorted range; if the range contains an element equal to key, returns the index of the leftmost equal element.:::lastOfs->ofs->if->c->compare->maxOfs->while->c->compare->if->if->else->maxOfs->while->c->compare->if->if->tmp->while->m->if->c->compare->else->return
TimSort#gallopRight(T, T[], int, int, int, Comparator):::Like gallopLeft, except that if the range contains an element equal to key, gallopRight returns the index after the rightmost equal element.:::ofs->lastOfs->if->c->compare->maxOfs->while->c->compare->if->if->tmp->else->maxOfs->while->c->compare->if->if->while->m->if->c->compare->else->return
TimSort#mergeLo(int, int, int, int):::Merges two adjacent runs in place, in a stable fashion:::a->tmp->ensureCapacity->cursor1->cursor2->dest->System->arraycopy->if->System->arraycopy->return->if->System->arraycopy->return->c->minGallop->while->count1->count2->do->if->c->compare->if->break->else->if->break->while->do->gallopRight->if->System->arraycopy->if->break->if->break->gallopLeft->if->System->arraycopy->if->break->if->break->while->if->if->System->arraycopy->else->if->throw->new->IllegalArgumentException->else->System->arraycopy
TimSort#mergeHi(int, int, int, int):::Like mergeLo, except that this method should be called only if len1 >= len2; mergeLo should be called if len1 <= len2:::a->tmp->ensureCapacity->tmpBase->System->arraycopy->cursor1->cursor2->dest->if->System->arraycopy->return->if->System->arraycopy->return->c->minGallop->while->count1->count2->do->if->c->compare->if->break->else->if->break->while->do->gallopRight->if->System->arraycopy->if->break->if->break->gallopLeft->if->System->arraycopy->if->break->if->break->while->if->if->System->arraycopy->else->if->throw->new->IllegalArgumentException->else->System->arraycopy
TimSort#ensureCapacity(int):::Ensures that the external array tmp has at least the specified number of elements, increasing its size if necessary:::if->newSize->Integer->numberOfLeadingZeros->if->else->Math->min->newArray->a->getClass->getComponentType->newInstance->return
TreeMap#size():::Returns the number of key-value mappings in this map.:::return
TreeMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.:::return->getEntry
TreeMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value:::for->e->getFirstEntry->successor->return
TreeMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::p->getEntry->return
TreeMap#comparator()::: tree map comparator:::return
TreeMap#firstKey()::: tree map first key:::return->getFirstEntry->key
TreeMap#lastKey()::: tree map last key:::return->getLastEntry->key
TreeMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::mapSize->map->size->if->c->comparator->if->c->equals->try->map->entrySet->iterator->buildFromSorted->catch->finally->return->super->putAll
TreeMap#getEntry(Object):::Returns this map's entry for the given key, or null if the map does not contain an entry for the key.:::if->return->getEntryUsingComparator->if->throw->new->NullPointerException->k->p->while->cmp->k->compareTo->if->else->if->else->return->return
TreeMap#getEntryUsingComparator(Object):::Version of getEntry using comparator:::k->cpr->if->p->while->cmp->cpr->compare->if->else->if->else->return->return
TreeMap#getCeilingEntry(K):::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists (i.e., the greatest key in the Tree is less than the specified key), returns null.:::p->while->cmp->compare->if->if->else->return->else->if->if->else->parent->ch->while->return->else->return->return
TreeMap#getFloorEntry(K):::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the greatest key less than the specified key; if no such entry exists, returns null.:::p->while->cmp->compare->if->if->else->return->else->if->if->else->parent->ch->while->return->else->return->return
TreeMap#getHigherEntry(K):::Gets the entry for the least key greater than the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists returns null.:::p->while->cmp->compare->if->if->else->return->else->if->else->parent->ch->while->return->return
TreeMap#getLowerEntry(K):::Returns the entry for the greatest key less than the specified key; if no such entry exists (i.e., the least key in the Tree is greater than the specified key), returns null.:::p->while->cmp->compare->if->if->else->return->else->if->else->parent->ch->while->return->return
TreeMap#put(K, V):::Associates the specified value with the specified key in this map:::t->if->compare->new->Entry<>->return->cmp->parent->cpr->if->do->cpr->compare->if->else->if->else->return->t->setValue->while->else->if->throw->new->NullPointerException->k->do->k->compareTo->if->else->if->else->return->t->setValue->while->e->new->Entry<>->if->else->fixAfterInsertion->return
TreeMap#remove(Object):::Removes the mapping for this key from this TreeMap if present.:::p->getEntry->if->return->oldValue->deleteEntry->return
TreeMap#clear():::Removes all of the mappings from this map:::
TreeMap#clone():::Returns a shallow copy of this TreeMap instance:::clone->try->super->clone->catch->throw->new->InternalError->finally->try->clone->entrySet->iterator->buildFromSorted->catch->finally->return
TreeMap#firstEntry()::: tree map first entry:::return->getFirstEntry->exportEntry
TreeMap#lastEntry()::: tree map last entry:::return->getLastEntry->exportEntry
TreeMap#pollFirstEntry()::: tree map poll first entry:::p->getFirstEntry->result->exportEntry->if->deleteEntry->return
TreeMap#pollLastEntry()::: tree map poll last entry:::p->getLastEntry->result->exportEntry->if->deleteEntry->return
TreeMap#lowerEntry(K)::: tree map lower entry:::return->getLowerEntry->exportEntry
TreeMap#lowerKey(K)::: tree map lower key:::return->getLowerEntry->keyOrNull
TreeMap#floorEntry(K)::: tree map floor entry:::return->getFloorEntry->exportEntry
TreeMap#floorKey(K)::: tree map floor key:::return->getFloorEntry->keyOrNull
TreeMap#ceilingEntry(K)::: tree map ceiling entry:::return->getCeilingEntry->exportEntry
TreeMap#ceilingKey(K)::: tree map ceiling key:::return->getCeilingEntry->keyOrNull
TreeMap#higherEntry(K)::: tree map higher entry:::return->getHigherEntry->exportEntry
TreeMap#higherKey(K)::: tree map higher key:::return->getHigherEntry->keyOrNull
TreeMap#keySet():::Returns a Set view of the keys contained in this map:::return->navigableKeySet
TreeMap#navigableKeySet()::: tree map navigable key set:::nks->return->new->KeySet<>
TreeMap#descendingKeySet()::: tree map descending key set:::return->descendingMap->navigableKeySet
TreeMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
TreeMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->return->new->EntrySet
TreeMap#descendingMap()::: tree map descending map:::km->return->new->DescendingSubMap<>
TreeMap#subMap(K, boolean, K, boolean)::: tree map sub map:::return->new->AscendingSubMap<>
TreeMap#headMap(K, boolean)::: tree map head map:::return->new->AscendingSubMap<>
TreeMap#tailMap(K, boolean)::: tree map tail map:::return->new->AscendingSubMap<>
TreeMap#subMap(K, K)::: tree map sub map:::return->subMap
TreeMap#headMap(K)::: tree map head map:::return->headMap
TreeMap#tailMap(K)::: tree map tail map:::return->tailMap
TreeMap#replace(K, V, V)::: tree map replace:::p->getEntry->if->Objects->equals->return->return
TreeMap#replace(K, V)::: tree map replace:::p->getEntry->if->oldValue->return->return
TreeMap#forEach(BiConsumer)::: tree map for each:::Objects->requireNonNull->expectedModCount->for->e->getFirstEntry->successor
TreeMap#replaceAll(BiFunction)::: tree map replace all:::Objects->requireNonNull->expectedModCount->for->e->getFirstEntry->successor
TreeMap.Values#iterator()::: values iterator:::return->getFirstEntry->new->ValueIterator
TreeMap.Values#size()::: values size:::return->TreeMap.this->size
TreeMap.Values#contains(Object)::: values contains:::return->TreeMap.this->containsValue
TreeMap.Values#remove(Object)::: values remove:::for->e->getFirstEntry->successor->return
TreeMap.Values#clear()::: values clear:::TreeMap.this->clear
TreeMap.Values#spliterator()::: values spliterator:::return->new->ValueSpliterator<>
TreeMap.EntrySet#iterator()::: entry set iterator:::return->getFirstEntry->new->EntryIterator
TreeMap.EntrySet#contains(Object)::: entry set contains:::if->return->entry->value->entry->getValue->p->entry->getKey->getEntry->return->p->getValue->valEquals
TreeMap.EntrySet#remove(Object)::: entry set remove:::if->return->entry->value->entry->getValue->p->entry->getKey->getEntry->if->p->getValue->valEquals->deleteEntry->return->return
TreeMap.EntrySet#size()::: entry set size:::return->TreeMap.this->size
TreeMap.EntrySet#clear()::: entry set clear:::TreeMap.this->clear
TreeMap.EntrySet#spliterator()::: entry set spliterator:::return->new->EntrySpliterator<>
TreeMap#keyIterator()::: tree map key iterator:::return->getFirstEntry->new->KeyIterator
TreeMap#descendingKeyIterator()::: tree map descending key iterator:::return->getLastEntry->new->DescendingKeyIterator
TreeMap.KeySet#iterator()::: key set iterator:::if->return->keyIterator->else->return->keyIterator
TreeMap.KeySet#descendingIterator()::: key set descending iterator:::if->return->descendingKeyIterator->else->return->descendingKeyIterator
TreeMap.KeySet#size()::: key set size:::return->m->size
TreeMap.KeySet#isEmpty()::: key set is empty:::return->m->isEmpty
TreeMap.KeySet#contains(Object)::: key set contains:::return->m->containsKey
TreeMap.KeySet#clear()::: key set clear:::m->clear
TreeMap.KeySet#lower(E)::: key set lower:::return->m->lowerKey
TreeMap.KeySet#floor(E)::: key set floor:::return->m->floorKey
TreeMap.KeySet#ceiling(E)::: key set ceiling:::return->m->ceilingKey
TreeMap.KeySet#higher(E)::: key set higher:::return->m->higherKey
TreeMap.KeySet#first()::: key set first:::return->m->firstKey
TreeMap.KeySet#last()::: key set last:::return->m->lastKey
TreeMap.KeySet#comparator()::: key set comparator:::return->m->comparator
TreeMap.KeySet#pollFirst()::: key set poll first:::e->m->pollFirstEntry->return->e->getKey
TreeMap.KeySet#pollLast()::: key set poll last:::e->m->pollLastEntry->return->e->getKey
TreeMap.KeySet#remove(Object)::: key set remove:::oldSize->size->m->remove->return->size
TreeMap.KeySet#subSet(E, boolean, E, boolean)::: key set sub set:::return->m->subMap->new->KeySet<>
TreeMap.KeySet#headSet(E, boolean)::: key set head set:::return->m->headMap->new->KeySet<>
TreeMap.KeySet#tailSet(E, boolean)::: key set tail set:::return->m->tailMap->new->KeySet<>
TreeMap.KeySet#subSet(E, E)::: key set sub set:::return->subSet
TreeMap.KeySet#headSet(E)::: key set head set:::return->headSet
TreeMap.KeySet#tailSet(E)::: key set tail set:::return->tailSet
TreeMap.KeySet#descendingSet()::: key set descending set:::return->m->descendingMap->new->KeySet<>
TreeMap.KeySet#spliterator()::: key set spliterator:::return->keySpliteratorFor
TreeMap.PrivateEntryIterator#hasNext()::: private entry iterator has next:::return
TreeMap.PrivateEntryIterator#nextEntry()::: private entry iterator next entry:::e->if->throw->new->NoSuchElementException->if->throw->new->ConcurrentModificationException->successor->return
TreeMap.PrivateEntryIterator#prevEntry()::: private entry iterator prev entry:::e->if->throw->new->NoSuchElementException->if->throw->new->ConcurrentModificationException->predecessor->return
TreeMap.PrivateEntryIterator#remove()::: private entry iterator remove:::if->throw->new->IllegalStateException->if->throw->new->ConcurrentModificationException->if->deleteEntry
TreeMap.EntryIterator#next()::: entry iterator next:::return->nextEntry
TreeMap.ValueIterator#next()::: value iterator next:::return->nextEntry
TreeMap.KeyIterator#next()::: key iterator next:::return->nextEntry
TreeMap.DescendingKeyIterator#next()::: descending key iterator next:::return->prevEntry
TreeMap.DescendingKeyIterator#remove()::: descending key iterator remove:::if->throw->new->IllegalStateException->if->throw->new->ConcurrentModificationException->deleteEntry
TreeMap#compare(Object, Object):::Compares two keys using the correct comparison method for this TreeMap.:::return->compareTo->comparator->compare
TreeMap#valEquals(Object, Object):::Test two values for equality:::return->o1->equals
TreeMap#exportEntry(TreeMap.Entry):::Return SimpleImmutableEntry for entry, or null if null:::return->new->AbstractMap.SimpleImmutableEntry<>
TreeMap#keyOrNull(TreeMap.Entry):::Return key for entry, or null if null:::return
TreeMap#key(Entry):::Returns the key corresponding to the specified Entry.:::if->throw->new->NoSuchElementException->return
TreeMap.NavigableSubMap#tooLow(Object)::: navigable sub map too low:::if->c->m->compare->if->return->return
TreeMap.NavigableSubMap#tooHigh(Object)::: navigable sub map too high:::if->c->m->compare->if->return->return
TreeMap.NavigableSubMap#inRange(Object)::: navigable sub map in range:::return->tooLow->tooHigh
TreeMap.NavigableSubMap#inClosedRange(Object)::: navigable sub map in closed range:::return->m->compare->m->compare
TreeMap.NavigableSubMap#inRange(Object, boolean)::: navigable sub map in range:::return->inRange->inClosedRange
TreeMap.NavigableSubMap#absLowest()::: navigable sub map abs lowest:::e->m->getFirstEntry->m->getCeilingEntry->m->getHigherEntry->return->tooHigh
TreeMap.NavigableSubMap#absHighest()::: navigable sub map abs highest:::e->m->getLastEntry->m->getFloorEntry->m->getLowerEntry->return->tooLow
TreeMap.NavigableSubMap#absCeiling(K)::: navigable sub map abs ceiling:::if->tooLow->return->absLowest->e->m->getCeilingEntry->return->tooHigh
TreeMap.NavigableSubMap#absHigher(K)::: navigable sub map abs higher:::if->tooLow->return->absLowest->e->m->getHigherEntry->return->tooHigh
TreeMap.NavigableSubMap#absFloor(K)::: navigable sub map abs floor:::if->tooHigh->return->absHighest->e->m->getFloorEntry->return->tooLow
TreeMap.NavigableSubMap#absLower(K)::: navigable sub map abs lower:::if->tooHigh->return->absHighest->e->m->getLowerEntry->return->tooLow
TreeMap.NavigableSubMap#absHighFence():::Returns the absolute high fence for ascending traversal:::return->m->getHigherEntry->m->getCeilingEntry
TreeMap.NavigableSubMap#absLowFence():::Return the absolute low fence for descending traversal:::return->m->getLowerEntry->m->getFloorEntry
TreeMap.NavigableSubMap#subLowest()::: navigable sub map sub lowest:::
TreeMap.NavigableSubMap#subHighest()::: navigable sub map sub highest:::
TreeMap.NavigableSubMap#subCeiling(K)::: navigable sub map sub ceiling:::
TreeMap.NavigableSubMap#subHigher(K)::: navigable sub map sub higher:::
TreeMap.NavigableSubMap#subFloor(K)::: navigable sub map sub floor:::
TreeMap.NavigableSubMap#subLower(K)::: navigable sub map sub lower:::
TreeMap.NavigableSubMap#keyIterator():::Returns ascending iterator from the perspective of this submap:::
TreeMap.NavigableSubMap#keySpliterator()::: navigable sub map key spliterator:::
TreeMap.NavigableSubMap#descendingKeyIterator():::Returns descending iterator from the perspective of this submap:::
TreeMap.NavigableSubMap#isEmpty()::: navigable sub map is empty:::return->m->isEmpty->entrySet->isEmpty
TreeMap.NavigableSubMap#size()::: navigable sub map size:::return->m->size->entrySet->size
TreeMap.NavigableSubMap#containsKey(Object)::: navigable sub map contains key:::return->inRange->m->containsKey
TreeMap.NavigableSubMap#put(K, V)::: navigable sub map put:::if->inRange->throw->new->IllegalArgumentException->return->m->put
TreeMap.NavigableSubMap#get(Object)::: navigable sub map get:::return->inRange->m->get
TreeMap.NavigableSubMap#remove(Object)::: navigable sub map remove:::return->inRange->m->remove
TreeMap.NavigableSubMap#ceilingEntry(K)::: navigable sub map ceiling entry:::return->subCeiling->exportEntry
TreeMap.NavigableSubMap#ceilingKey(K)::: navigable sub map ceiling key:::return->subCeiling->keyOrNull
TreeMap.NavigableSubMap#higherEntry(K)::: navigable sub map higher entry:::return->subHigher->exportEntry
TreeMap.NavigableSubMap#higherKey(K)::: navigable sub map higher key:::return->subHigher->keyOrNull
TreeMap.NavigableSubMap#floorEntry(K)::: navigable sub map floor entry:::return->subFloor->exportEntry
TreeMap.NavigableSubMap#floorKey(K)::: navigable sub map floor key:::return->subFloor->keyOrNull
TreeMap.NavigableSubMap#lowerEntry(K)::: navigable sub map lower entry:::return->subLower->exportEntry
TreeMap.NavigableSubMap#lowerKey(K)::: navigable sub map lower key:::return->subLower->keyOrNull
TreeMap.NavigableSubMap#firstKey()::: navigable sub map first key:::return->subLowest->key
TreeMap.NavigableSubMap#lastKey()::: navigable sub map last key:::return->subHighest->key
TreeMap.NavigableSubMap#firstEntry()::: navigable sub map first entry:::return->subLowest->exportEntry
TreeMap.NavigableSubMap#lastEntry()::: navigable sub map last entry:::return->subHighest->exportEntry
TreeMap.NavigableSubMap#pollFirstEntry()::: navigable sub map poll first entry:::e->subLowest->result->exportEntry->if->m->deleteEntry->return
TreeMap.NavigableSubMap#pollLastEntry()::: navigable sub map poll last entry:::e->subHighest->result->exportEntry->if->m->deleteEntry->return
TreeMap.NavigableSubMap#navigableKeySet()::: navigable sub map navigable key set:::nksv->return->new->TreeMap.KeySet<>
TreeMap.NavigableSubMap#keySet()::: navigable sub map key set:::return->navigableKeySet
TreeMap.NavigableSubMap#descendingKeySet()::: navigable sub map descending key set:::return->descendingMap->navigableKeySet
TreeMap.NavigableSubMap#subMap(K, K)::: navigable sub map sub map:::return->subMap
TreeMap.NavigableSubMap#headMap(K)::: navigable sub map head map:::return->headMap
TreeMap.NavigableSubMap#tailMap(K)::: navigable sub map tail map:::return->tailMap
TreeMap.NavigableSubMap.EntrySetView#size()::: entry set view size:::if->return->m->size->if->i->iterator->while->i->hasNext->i->next->return
TreeMap.NavigableSubMap.EntrySetView#isEmpty()::: entry set view is empty:::n->absLowest->return->tooHigh
TreeMap.NavigableSubMap.EntrySetView#contains(Object)::: entry set view contains:::if->return->entry->key->entry->getKey->if->inRange->return->node->m->getEntry->return->node->getValue->entry->getValue->valEquals
TreeMap.NavigableSubMap.EntrySetView#remove(Object)::: entry set view remove:::if->return->entry->key->entry->getKey->if->inRange->return->node->m->getEntry->if->node->getValue->entry->getValue->valEquals->m->deleteEntry->return->return
TreeMap.NavigableSubMap.SubMapIterator#hasNext()::: sub map iterator has next:::return
TreeMap.NavigableSubMap.SubMapIterator#nextEntry()::: sub map iterator next entry:::e->if->throw->new->NoSuchElementException->if->throw->new->ConcurrentModificationException->successor->return
TreeMap.NavigableSubMap.SubMapIterator#prevEntry()::: sub map iterator prev entry:::e->if->throw->new->NoSuchElementException->if->throw->new->ConcurrentModificationException->predecessor->return
TreeMap.NavigableSubMap.SubMapIterator#removeAscending()::: sub map iterator remove ascending:::if->throw->new->IllegalStateException->if->throw->new->ConcurrentModificationException->if->m->deleteEntry
TreeMap.NavigableSubMap.SubMapIterator#removeDescending()::: sub map iterator remove descending:::if->throw->new->IllegalStateException->if->throw->new->ConcurrentModificationException->m->deleteEntry
TreeMap.NavigableSubMap.SubMapEntryIterator#next()::: sub map entry iterator next:::return->nextEntry
TreeMap.NavigableSubMap.SubMapEntryIterator#remove()::: sub map entry iterator remove:::removeAscending
TreeMap.NavigableSubMap.DescendingSubMapEntryIterator#next()::: descending sub map entry iterator next:::return->prevEntry
TreeMap.NavigableSubMap.DescendingSubMapEntryIterator#remove()::: descending sub map entry iterator remove:::removeDescending
TreeMap.NavigableSubMap.SubMapKeyIterator#next()::: sub map key iterator next:::return->nextEntry
TreeMap.NavigableSubMap.SubMapKeyIterator#remove()::: sub map key iterator remove:::removeAscending
TreeMap.NavigableSubMap.SubMapKeyIterator#trySplit()::: sub map key iterator try split:::return
TreeMap.NavigableSubMap.SubMapKeyIterator#forEachRemaining(Consumer)::: sub map key iterator for each remaining:::while->hasNext->action->next->accept
TreeMap.NavigableSubMap.SubMapKeyIterator#tryAdvance(Consumer)::: sub map key iterator try advance:::if->hasNext->action->next->accept->return->return
TreeMap.NavigableSubMap.SubMapKeyIterator#estimateSize()::: sub map key iterator estimate size:::return
TreeMap.NavigableSubMap.SubMapKeyIterator#characteristics()::: sub map key iterator characteristics:::return
TreeMap.NavigableSubMap.SubMapKeyIterator#getComparator()::: sub map key iterator get comparator:::return->NavigableSubMap.this->comparator
TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#next()::: descending sub map key iterator next:::return->prevEntry
TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#remove()::: descending sub map key iterator remove:::removeDescending
TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#trySplit()::: descending sub map key iterator try split:::return
TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#forEachRemaining(Consumer)::: descending sub map key iterator for each remaining:::while->hasNext->action->next->accept
TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#tryAdvance(Consumer)::: descending sub map key iterator try advance:::if->hasNext->action->next->accept->return->return
TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#estimateSize()::: descending sub map key iterator estimate size:::return
TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#characteristics()::: descending sub map key iterator characteristics:::return
TreeMap.AscendingSubMap#comparator()::: ascending sub map comparator:::return->m->comparator
TreeMap.AscendingSubMap#subMap(K, boolean, K, boolean)::: ascending sub map sub map:::if->inRange->throw->new->IllegalArgumentException->if->inRange->throw->new->IllegalArgumentException->return->new->AscendingSubMap<>
TreeMap.AscendingSubMap#headMap(K, boolean)::: ascending sub map head map:::if->inRange->throw->new->IllegalArgumentException->return->new->AscendingSubMap<>
TreeMap.AscendingSubMap#tailMap(K, boolean)::: ascending sub map tail map:::if->inRange->throw->new->IllegalArgumentException->return->new->AscendingSubMap<>
TreeMap.AscendingSubMap#descendingMap()::: ascending sub map descending map:::mv->return->new->DescendingSubMap<>
TreeMap.AscendingSubMap#keyIterator()::: ascending sub map key iterator:::return->absLowest->absHighFence->new->SubMapKeyIterator
TreeMap.AscendingSubMap#keySpliterator()::: ascending sub map key spliterator:::return->absLowest->absHighFence->new->SubMapKeyIterator
TreeMap.AscendingSubMap#descendingKeyIterator()::: ascending sub map descending key iterator:::return->absHighest->absLowFence->new->DescendingSubMapKeyIterator
TreeMap.AscendingSubMap.AscendingEntrySetView#iterator()::: ascending entry set view iterator:::return->absLowest->absHighFence->new->SubMapEntryIterator
TreeMap.AscendingSubMap#entrySet()::: ascending sub map entry set:::es->return->new->AscendingEntrySetView
TreeMap.AscendingSubMap#subLowest()::: ascending sub map sub lowest:::return->absLowest
TreeMap.AscendingSubMap#subHighest()::: ascending sub map sub highest:::return->absHighest
TreeMap.AscendingSubMap#subCeiling(K)::: ascending sub map sub ceiling:::return->absCeiling
TreeMap.AscendingSubMap#subHigher(K)::: ascending sub map sub higher:::return->absHigher
TreeMap.AscendingSubMap#subFloor(K)::: ascending sub map sub floor:::return->absFloor
TreeMap.AscendingSubMap#subLower(K)::: ascending sub map sub lower:::return->absLower
TreeMap.DescendingSubMap#comparator()::: descending sub map comparator:::return
TreeMap.DescendingSubMap#subMap(K, boolean, K, boolean)::: descending sub map sub map:::if->inRange->throw->new->IllegalArgumentException->if->inRange->throw->new->IllegalArgumentException->return->new->DescendingSubMap<>
TreeMap.DescendingSubMap#headMap(K, boolean)::: descending sub map head map:::if->inRange->throw->new->IllegalArgumentException->return->new->DescendingSubMap<>
TreeMap.DescendingSubMap#tailMap(K, boolean)::: descending sub map tail map:::if->inRange->throw->new->IllegalArgumentException->return->new->DescendingSubMap<>
TreeMap.DescendingSubMap#descendingMap()::: descending sub map descending map:::mv->return->new->AscendingSubMap<>
TreeMap.DescendingSubMap#keyIterator()::: descending sub map key iterator:::return->absHighest->absLowFence->new->DescendingSubMapKeyIterator
TreeMap.DescendingSubMap#keySpliterator()::: descending sub map key spliterator:::return->absHighest->absLowFence->new->DescendingSubMapKeyIterator
TreeMap.DescendingSubMap#descendingKeyIterator()::: descending sub map descending key iterator:::return->absLowest->absHighFence->new->SubMapKeyIterator
TreeMap.DescendingSubMap.DescendingEntrySetView#iterator()::: descending entry set view iterator:::return->absHighest->absLowFence->new->DescendingSubMapEntryIterator
TreeMap.DescendingSubMap#entrySet()::: descending sub map entry set:::es->return->new->DescendingEntrySetView
TreeMap.DescendingSubMap#subLowest()::: descending sub map sub lowest:::return->absHighest
TreeMap.DescendingSubMap#subHighest()::: descending sub map sub highest:::return->absLowest
TreeMap.DescendingSubMap#subCeiling(K)::: descending sub map sub ceiling:::return->absFloor
TreeMap.DescendingSubMap#subHigher(K)::: descending sub map sub higher:::return->absLower
TreeMap.DescendingSubMap#subFloor(K)::: descending sub map sub floor:::return->absCeiling
TreeMap.DescendingSubMap#subLower(K)::: descending sub map sub lower:::return->absHigher
TreeMap.SubMap#readResolve()::: sub map read resolve:::return->new->AscendingSubMap<>
TreeMap.SubMap#entrySet()::: sub map entry set:::throw->new->InternalError
TreeMap.SubMap#lastKey()::: sub map last key:::throw->new->InternalError
TreeMap.SubMap#firstKey()::: sub map first key:::throw->new->InternalError
TreeMap.SubMap#subMap(K, K)::: sub map sub map:::throw->new->InternalError
TreeMap.SubMap#headMap(K)::: sub map head map:::throw->new->InternalError
TreeMap.SubMap#tailMap(K)::: sub map tail map:::throw->new->InternalError
TreeMap.SubMap#comparator()::: sub map comparator:::throw->new->InternalError
TreeMap.Entry#getKey():::Returns the key.:::return
TreeMap.Entry#getValue():::Returns the value associated with the key.:::return
TreeMap.Entry#setValue(V):::Replaces the value currently associated with the key with the given value.:::oldValue->return
TreeMap.Entry#equals(Object)::: entry equals:::if->return->e->return->e->getKey->valEquals->e->getValue->valEquals
TreeMap.Entry#hashCode()::: entry hash code:::keyHash->key->hashCode->valueHash->value->hashCode->return
TreeMap.Entry#toString()::: entry to string:::return
TreeMap#getFirstEntry():::Returns the first Entry in the TreeMap (according to the TreeMap's key-sort function):::p->if->while->return
TreeMap#getLastEntry():::Returns the last Entry in the TreeMap (according to the TreeMap's key-sort function):::p->if->while->return
TreeMap#successor(Entry):::Returns the successor of the specified Entry, or null if no such.:::if->return->else->if->p->while->return->else->p->ch->while->return
TreeMap#predecessor(Entry):::Returns the predecessor of the specified Entry, or null if no such.:::if->return->else->if->p->while->return->else->p->ch->while->return
TreeMap#colorOf(Entry)::: tree map color of:::return
TreeMap#parentOf(Entry)::: tree map parent of:::return
TreeMap#setColor(Entry, boolean)::: tree map set color:::if
TreeMap#leftOf(Entry)::: tree map left of:::return
TreeMap#rightOf(Entry)::: tree map right of:::return
TreeMap#rotateLeft(Entry):::From CLR:::if->r->if->if->else->if->else
TreeMap#rotateRight(Entry):::From CLR:::if->l->if->if->else->if->else
TreeMap#fixAfterInsertion(Entry):::From CLR:::while->if->parentOf->parentOf->parentOf->leftOf->y->parentOf->parentOf->rightOf->if->colorOf->parentOf->setColor->setColor->parentOf->parentOf->setColor->parentOf->parentOf->else->if->parentOf->rightOf->parentOf->rotateLeft->parentOf->setColor->parentOf->parentOf->setColor->parentOf->parentOf->rotateRight->else->y->parentOf->parentOf->leftOf->if->colorOf->parentOf->setColor->setColor->parentOf->parentOf->setColor->parentOf->parentOf->else->if->parentOf->leftOf->parentOf->rotateRight->parentOf->setColor->parentOf->parentOf->setColor->parentOf->parentOf->rotateLeft
TreeMap#deleteEntry(Entry):::Delete node p, and then rebalance the tree.:::if->s->successor->replacement->if->if->else->if->else->if->fixAfterDeletion->else->if->else->if->fixAfterDeletion->if->if->else->if
TreeMap#fixAfterDeletion(Entry):::From CLR:::while->colorOf->if->parentOf->leftOf->sib->parentOf->rightOf->if->colorOf->setColor->parentOf->setColor->parentOf->rotateLeft->parentOf->rightOf->if->leftOf->colorOf->rightOf->colorOf->setColor->parentOf->else->if->rightOf->colorOf->leftOf->setColor->setColor->rotateRight->parentOf->rightOf->parentOf->colorOf->setColor->parentOf->setColor->rightOf->setColor->parentOf->rotateLeft->else->sib->parentOf->leftOf->if->colorOf->setColor->parentOf->setColor->parentOf->rotateRight->parentOf->leftOf->if->rightOf->colorOf->leftOf->colorOf->setColor->parentOf->else->if->leftOf->colorOf->rightOf->setColor->setColor->rotateLeft->parentOf->leftOf->parentOf->colorOf->setColor->parentOf->setColor->leftOf->setColor->parentOf->rotateRight->setColor
TreeMap#writeObject(java.io.ObjectOutputStream):::Save the state of the TreeMap instance to a stream (i.e., serialize it).:::s->defaultWriteObject->s->writeInt->foreach->entrySet->s->e->getKey->writeObject->s->e->getValue->writeObject
TreeMap#readObject(java.io.ObjectInputStream):::Reconstitute the TreeMap instance from a stream (i.e., deserialize it).:::s->defaultReadObject->size->s->readInt->buildFromSorted
TreeMap#readTreeSet(int, java.io.ObjectInputStream, V):::Intended to be called only from TreeSet.readObject:::buildFromSorted
TreeMap#addAllForTreeSet(SortedSet, V):::Intended to be called only from TreeSet.addAll:::try->set->size->set->iterator->buildFromSorted->catch->finally
TreeMap#buildFromSorted(int, Iterator, java.io.ObjectInputStream, V):::Linear time tree building algorithm from sorted data:::computeRedLevel->buildFromSorted
TreeMap#buildFromSorted(int, int, int, int, Iterator, java.io.ObjectInputStream, V):::Recursive "helper method" that does the real work of the previous method:::if->return->mid->left->if->buildFromSorted->key->value->if->if->entry->it->next->entry->getKey->entry->getValue->else->it->next->else->str->readObject->str->readObject->middle->new->Entry<>->if->if->if->right->buildFromSorted->return
TreeMap#computeRedLevel(int):::Finds the level down to which to assign all nodes BLACK:::return->Integer->numberOfLeadingZeros
TreeMap#keySpliteratorFor(NavigableMap):::Currently, we support Spliterator-based versions only for the full map, in either plain of descending form, otherwise relying on defaults because size estimation for submaps would dominate costs:::if->t->return->t->keySpliterator->if->dm->tm->if->t->return->t->descendingKeySpliterator->sm->return->sm->keySpliterator
TreeMap#keySpliterator()::: tree map key spliterator:::return->new->KeySpliterator<>
TreeMap#descendingKeySpliterator()::: tree map descending key spliterator:::return->new->DescendingKeySpliterator<>
TreeMap.TreeMapSpliterator#getEstimate()::: tree map spliterator get estimate:::s->t->if->if->t->getFirstEntry->t->getLastEntry->else->return
TreeMap.TreeMapSpliterator#estimateSize()::: tree map spliterator estimate size:::return->getEstimate
TreeMap.KeySpliterator#trySplit()::: key spliterator try split:::if->getEstimate->d->e->f->s->if->tree->compare->return->new->KeySpliterator<>->return
TreeMap.KeySpliterator#forEachRemaining(Consumer)::: key spliterator for each remaining:::if->throw->new->NullPointerException->if->getEstimate->f->e->p->pl->if->do->action->accept->if->while->else->while->while->if->throw->new->ConcurrentModificationException
TreeMap.KeySpliterator#tryAdvance(Consumer)::: key spliterator try advance:::e->if->throw->new->NullPointerException->if->getEstimate->if->return->successor->action->accept->if->throw->new->ConcurrentModificationException->return
TreeMap.KeySpliterator#characteristics()::: key spliterator characteristics:::return
TreeMap.KeySpliterator#getComparator()::: key spliterator get comparator:::return
TreeMap.DescendingKeySpliterator#trySplit()::: descending key spliterator try split:::if->getEstimate->d->e->f->s->if->tree->compare->return->new->DescendingKeySpliterator<>->return
TreeMap.DescendingKeySpliterator#forEachRemaining(Consumer)::: descending key spliterator for each remaining:::if->throw->new->NullPointerException->if->getEstimate->f->e->p->pr->if->do->action->accept->if->while->else->while->while->if->throw->new->ConcurrentModificationException
TreeMap.DescendingKeySpliterator#tryAdvance(Consumer)::: descending key spliterator try advance:::e->if->throw->new->NullPointerException->if->getEstimate->if->return->predecessor->action->accept->if->throw->new->ConcurrentModificationException->return
TreeMap.DescendingKeySpliterator#characteristics()::: descending key spliterator characteristics:::return
TreeMap.ValueSpliterator#trySplit()::: value spliterator try split:::if->getEstimate->d->e->f->s->if->tree->compare->return->new->ValueSpliterator<>->return
TreeMap.ValueSpliterator#forEachRemaining(Consumer)::: value spliterator for each remaining:::if->throw->new->NullPointerException->if->getEstimate->f->e->p->pl->if->do->action->accept->if->while->else->while->while->if->throw->new->ConcurrentModificationException
TreeMap.ValueSpliterator#tryAdvance(Consumer)::: value spliterator try advance:::e->if->throw->new->NullPointerException->if->getEstimate->if->return->successor->action->accept->if->throw->new->ConcurrentModificationException->return
TreeMap.ValueSpliterator#characteristics()::: value spliterator characteristics:::return
TreeMap.EntrySpliterator#trySpliterator trySplit()::: entry spliterator try split:::if->getEstimate->d->e->f->s->if->tree->compare->return->new->EntrySpliterator<>->return
TreeMap.EntrySpliterator#forEachRemaining(Consumer>)::: entry spliterator for each remaining:::if->throw->new->NullPointerException->if->getEstimate->f->e->p->pl->if->do->action->accept->if->while->else->while->while->if->throw->new->ConcurrentModificationException
TreeMap.EntrySpliterator#tryAdvance(Consumer>)::: entry spliterator try advance:::e->if->throw->new->NullPointerException->if->getEstimate->if->return->successor->action->accept->if->throw->new->ConcurrentModificationException->return
TreeMap.EntrySpliterator#characteristics()::: entry spliterator characteristics:::return
TreeMap.EntrySpliterator#getComparator()::: entry spliterator get comparator:::if->return->comparingByKey->else->return->k1->e1->getKey->return->k1->e2->getKey->compareTo
TreeSet#iterator():::Returns an iterator over the elements in this set in ascending order.:::return->m->navigableKeySet->iterator
TreeSet#descendingIterator():::Returns an iterator over the elements in this set in descending order.:::return->m->descendingKeySet->iterator
TreeSet#descendingSet()::: tree set descending set:::return->m->descendingMap->new->TreeSet<>
TreeSet#size():::Returns the number of elements in this set (its cardinality).:::return->m->size
TreeSet#isEmpty():::Returns true if this set contains no elements.:::return->m->isEmpty
TreeSet#contains(Object):::Returns true if this set contains the specified element:::return->m->containsKey
TreeSet#add(E):::Adds the specified element to this set if it is not already present:::return->m->put
TreeSet#remove(Object):::Removes the specified element from this set if it is present:::return->m->remove
TreeSet#clear():::Removes all of the elements from this set:::m->clear
TreeSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.:::if->m->size->c->size->set->map->cc->set->comparator->mc->map->comparator->if->cc->equals->map->addAllForTreeSet->return->return->super->addAll
TreeSet#subSet(E, boolean, E, boolean)::: tree set sub set:::return->m->subMap->new->TreeSet<>
TreeSet#headSet(E, boolean)::: tree set head set:::return->m->headMap->new->TreeSet<>
TreeSet#tailSet(E, boolean)::: tree set tail set:::return->m->tailMap->new->TreeSet<>
TreeSet#subSet(E, E)::: tree set sub set:::return->subSet
TreeSet#headSet(E)::: tree set head set:::return->headSet
TreeSet#tailSet(E)::: tree set tail set:::return->tailSet
TreeSet#comparator()::: tree set comparator:::return->m->comparator
TreeSet#first()::: tree set first:::return->m->firstKey
TreeSet#last()::: tree set last:::return->m->lastKey
TreeSet#lower(E)::: tree set lower:::return->m->lowerKey
TreeSet#floor(E)::: tree set floor:::return->m->floorKey
TreeSet#ceiling(E)::: tree set ceiling:::return->m->ceilingKey
TreeSet#higher(E)::: tree set higher:::return->m->higherKey
TreeSet#pollFirst()::: tree set poll first:::e->m->pollFirstEntry->return->e->getKey
TreeSet#pollLast()::: tree set poll last:::e->m->pollLastEntry->return->e->getKey
TreeSet#clone():::Returns a shallow copy of this TreeSet instance:::clone->try->super->clone->catch->throw->new->InternalError->finally->new->TreeMap<>->return
TreeSet#writeObject(java.io.ObjectOutputStream):::Save the state of the TreeSet instance to a stream (that is, serialize it).:::s->defaultWriteObject->s->m->comparator->writeObject->s->m->size->writeInt->foreach->m->keySet->s->writeObject
TreeSet#readObject(java.io.ObjectInputStream):::Reconstitute the TreeSet instance from a stream (that is, deserialize it).:::s->defaultReadObject->c->s->readObject->tm->new->TreeMap<>->size->s->readInt->tm->readTreeSet
TreeSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set:::return->TreeMap->keySpliteratorFor
Tripwire#trip(Class, String):::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message:::PlatformLogger->trippingClass->getName->getLogger->trippingClass->getName->warning
UnknownFormatConversionException#getConversion():::Returns the unknown conversion.:::return
UnknownFormatConversionException#getMessage()::: unknown format conversion exception get message:::return->String->format
UnknownFormatFlagsException#getFlags():::Returns the set of flags which contains an unknown flag.:::return
UnknownFormatFlagsException#getMessage()::: unknown format flags exception get message:::return
UUID#randomUUID():::Static factory to retrieve a type 4 (pseudo randomly generated) UUID:::ng->randomBytes->new->byteArr->ng->nextBytes->return->new->UUID
UUID#nameUUIDFromBytes(byte[]):::Static factory to retrieve a type 3 (name based) UUID based on the specified byte array.:::md->try->MessageDigest->getInstance->catch->throw->new->InternalError->finally->md5Bytes->md->digest->return->new->UUID
UUID#fromString(String):::Creates a UUID from the string standard representation as described in the #toString method.:::len->name->length->if->throw->new->IllegalArgumentException->dash1->name->indexOf->dash2->name->indexOf->dash3->name->indexOf->dash4->name->indexOf->dash5->name->indexOf->if->throw->new->IllegalArgumentException->mostSigBits->Long->parseLong->Long->parseLong->Long->parseLong->leastSigBits->Long->parseLong->Long->parseLong->return->new->UUID
UUID#getLeastSignificantBits():::Returns the least significant 64 bits of this UUID's 128 bit value.:::return
UUID#getMostSignificantBits():::Returns the most significant 64 bits of this UUID's 128 bit value.:::return
UUID#version():::The version number associated with this UUID:::return
UUID#variant():::The variant number associated with this UUID:::return
UUID#timestamp():::The timestamp value associated with this UUID:::if->version->throw->new->UnsupportedOperationException->return
UUID#clockSequence():::The clock sequence value associated with this UUID:::if->version->throw->new->UnsupportedOperationException->return
UUID#node():::The node value associated with this UUID:::if->version->throw->new->UnsupportedOperationException->return
UUID#toString():::Returns a String object representing this UUID:::return->jla->fastUUID
UUID#hashCode():::Returns a hash code for this UUID.:::hilo->return
UUID#equals(Object):::Compares this object to the specified object:::if->obj->getClass->return->id->return
UUID#compareTo(UUID):::Compares this UUID with the specified UUID:::return
Vector#copyInto(Object[]):::Copies the components of this vector into the specified array:::System->arraycopy
Vector#trimToSize():::Trims the capacity of this vector to be the vector's current size:::oldCapacity->if->Arrays->copyOf
Vector#ensureCapacity(int):::Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument:::if->if->grow
Vector#grow(int):::Increases the capacity to ensure that it can hold at least the number of elements specified by the minimum capacity argument.:::return->Arrays->newCapacity->copyOf
Vector#grow()::: vector grow:::return->grow
Vector#newCapacity(int):::Returns a capacity at least as large as the given minimum capacity:::oldCapacity->newCapacity->if->if->throw->new->OutOfMemoryError->return->return->hugeCapacity
Vector#hugeCapacity(int)::: vector huge capacity:::if->throw->new->OutOfMemoryError->return
Vector#setSize(int):::Sets the size of this vector:::if->grow->es->for->to->i
Vector#capacity():::Returns the current capacity of this vector.:::return
Vector#size():::Returns the number of components in this vector.:::return
Vector#isEmpty():::Tests if this vector has no components.:::return
Vector#elements():::Returns an enumeration of the components of this vector:::return->new->Enumeration<E>
Vector#contains(Object):::Returns true if this vector contains the specified element:::return->indexOf
Vector#indexOf(Object):::Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element:::return->indexOf
Vector#indexOf(Object, int):::Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found:::if->for->i->else->for->i->return
Vector#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element:::return->lastIndexOf
Vector#lastIndexOf(Object, int):::Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found:::if->throw->new->IndexOutOfBoundsException->if->for->i->else->for->i->return
Vector#elementAt(int):::Returns the component at the specified index:::if->throw->new->ArrayIndexOutOfBoundsException->return->elementData
Vector#firstElement():::Returns the first component (the item at index 0) of this vector.:::if->throw->new->NoSuchElementException->return->elementData
Vector#lastElement():::Returns the last component of the vector.:::if->throw->new->NoSuchElementException->return->elementData
Vector#setElementAt(E, int):::Sets the component at the specified index of this vector to be the specified object:::if->throw->new->ArrayIndexOutOfBoundsException
Vector#removeElementAt(int):::Deletes the component at the specified index:::if->throw->new->ArrayIndexOutOfBoundsException->else->if->throw->new->ArrayIndexOutOfBoundsException->j->if->System->arraycopy
Vector#insertElementAt(E, int):::Inserts the specified object as a component in this vector at the specified index:::if->throw->new->ArrayIndexOutOfBoundsException->s->elementData->if->grow->System->arraycopy
Vector#addElement(E):::Adds the specified component to the end of this vector, increasing its size by one:::add
Vector#removeElement(Object):::Removes the first (lowest-indexed) occurrence of the argument from this vector:::i->indexOf->if->removeElementAt->return->return
Vector#removeAllElements():::Removes all components from this vector and sets its size to zero:::es->for->to->i
Vector#clone():::Returns a clone of this vector:::try->v->super->clone->Arrays->copyOf->return->catch->throw->new->InternalError->finally
Vector#toArray():::Returns an array containing all of the elements in this Vector in the correct order.:::return->Arrays->copyOf
Vector#toArray(T[]):::Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array:::if->return->Arrays->a->getClass->copyOf->System->arraycopy->if->return
Vector#elementData(int)::: vector element data:::return
Vector#elementAt(Object[], int)::: vector element at:::return
Vector#get(int):::Returns the element at the specified position in this Vector.:::if->throw->new->ArrayIndexOutOfBoundsException->return->elementData
Vector#set(int, E):::Replaces the element at the specified position in this Vector with the specified element.:::if->throw->new->ArrayIndexOutOfBoundsException->oldValue->elementData->return
Vector#add(E, Object[], int):::This helper method split out from add(E) to keep method bytecode size under 35 (the -XX:MaxInlineSize default value), which helps when add(E) is called in a C1-compiled loop.:::if->grow
Vector#add(E):::Appends the specified element to the end of this Vector.:::add->return
Vector#remove(Object):::Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged:::return->removeElement
Vector#add(int, E):::Inserts the specified element at the specified position in this Vector:::insertElementAt
Vector#remove(int):::Removes the element at the specified position in this Vector:::if->throw->new->ArrayIndexOutOfBoundsException->oldValue->elementData->numMoved->if->System->arraycopy->return
Vector#clear():::Removes all of the elements from this Vector:::removeAllElements
Vector#containsAll(Collection):::Returns true if this Vector contains all of the elements in the specified Collection.:::return->super->containsAll
Vector#addAll(Collection):::Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator:::a->c->toArray->numNew->if->return->synchronized->elementData->s->if->grow->System->arraycopy->return
Vector#removeAll(Collection):::Removes from this Vector all of its elements that are contained in the specified Collection.:::Objects->requireNonNull->return->c->contains->bulkRemove
Vector#retainAll(Collection):::Retains only the elements in this Vector that are contained in the specified Collection:::Objects->requireNonNull->return->c->contains->bulkRemove
Vector#removeIf(Predicate)::: vector remove if:::Objects->requireNonNull->return->bulkRemove
Vector#nBits(int)::: vector n bits:::return->new->longArr
Vector#setBit(long[], int)::: vector set bit:::
Vector#isClear(long[], int)::: vector is clear:::return
Vector#bulkRemove(Predicate)::: vector bulk remove:::expectedModCount->es->end->i->for->filter->elementAt->test->if->beg->deathRow->nBits->for->if->throw->new->ConcurrentModificationException->w->for->for->return->else->if->throw->new->ConcurrentModificationException->return
Vector#addAll(int, Collection):::Inserts all of the elements in the specified Collection into this Vector at the specified position:::if->throw->new->ArrayIndexOutOfBoundsException->a->c->toArray->numNew->if->return->elementData->s->if->grow->numMoved->if->System->arraycopy->System->arraycopy->return
Vector#equals(Object):::Compares the specified Object with this Vector for equality:::return->super->equals
Vector#hashCode():::Returns the hash code value for this Vector.:::return->super->hashCode
Vector#toString():::Returns a string representation of this Vector, containing the String representation of each element.:::return->super->toString
Vector#subList(int, int):::Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive:::return->Collections->super->subList->synchronizedList
Vector#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive:::shiftTailOverGap
Vector#shiftTailOverGap(Object[], int, int):::Erases the gap from lo to hi, by sliding down following elements.:::System->arraycopy->for->to->i
Vector#readObject(ObjectInputStream):::Loads a Vector instance from a stream (that is, deserializes it):::gfields->in->readFields->count->gfields->get->data->gfields->get->if->throw->new->StreamCorruptedException->data->clone
Vector#writeObject(java.io.ObjectOutputStream):::Saves the state of the Vector instance to a stream (that is, serializes it):::fields->s->putFields->data->synchronized->fields->put->fields->put->elementData->clone->fields->put->s->writeFields
Vector#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list:::if->throw->new->IndexOutOfBoundsException->return->new->ListItr
Vector#listIterator():::Returns a list iterator over the elements in this list (in proper sequence):::return->new->ListItr
Vector#iterator():::Returns an iterator over the elements in this list in proper sequence:::return->new->Itr
Vector.Itr#hasNext()::: itr has next:::return
Vector.Itr#next()::: itr next:::synchronized->checkForComodification->i->if->throw->new->NoSuchElementException->return->elementData
Vector.Itr#remove()::: itr remove:::if->throw->new->IllegalStateException->synchronized->checkForComodification->Vector.this->remove
Vector.Itr#forEachRemaining(Consumer)::: itr for each remaining:::Objects->requireNonNull->synchronized->size->i->if->return->es->if->throw->new->ConcurrentModificationException->while->action->elementAt->accept->checkForComodification
Vector.Itr#checkForComodification()::: itr check for comodification:::if->throw->new->ConcurrentModificationException
Vector.ListItr#hasPrevious()::: list itr has previous:::return
Vector.ListItr#nextIndex()::: list itr next index:::return
Vector.ListItr#previousIndex()::: list itr previous index:::return
Vector.ListItr#previous()::: list itr previous:::synchronized->checkForComodification->i->if->throw->new->NoSuchElementException->return->elementData
Vector.ListItr#set(E)::: list itr set:::if->throw->new->IllegalStateException->synchronized->checkForComodification->Vector.this->set
Vector.ListItr#add(E)::: list itr add:::i->synchronized->checkForComodification->Vector.this->add
Vector#forEach(Consumer)::: vector for each:::Objects->requireNonNull->expectedModCount->es->size->for->i->if->throw->new->ConcurrentModificationException
Vector#replaceAll(UnaryOperator)::: vector replace all:::Objects->requireNonNull->expectedModCount->es->size->for->i->if->throw->new->ConcurrentModificationException
Vector#sort(Comparator)::: vector sort:::expectedModCount->Arrays->sort->if->throw->new->ConcurrentModificationException
Vector#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list:::return->new->VectorSpliterator
Vector.VectorSpliterator#getFence()::: vector spliterator get fence:::hi->if->synchronized->return
Vector.VectorSpliterator#trySplit()::: vector spliterator try split:::hi->getFence->lo->mid->return->new->VectorSpliterator
Vector.VectorSpliterator#tryAdvance(Consumer)::: vector spliterator try advance:::Objects->requireNonNull->i->if->getFence->action->accept->if->throw->new->ConcurrentModificationException->return->return
Vector.VectorSpliterator#forEachRemaining(Consumer)::: vector spliterator for each remaining:::Objects->requireNonNull->hi->getFence->a->i->for->if->throw->new->ConcurrentModificationException
Vector.VectorSpliterator#estimateSize()::: vector spliterator estimate size:::return->getFence
Vector.VectorSpliterator#characteristics()::: vector spliterator characteristics:::return
Vector#checkInvariants()::: vector check invariants:::
WeakHashMap#newTable(int)::: weak hash map new table:::return->new->Entry<?,?>Arr
WeakHashMap#maskNull(Object):::Use NULL_KEY for key if it is null.:::return
WeakHashMap#unmaskNull(Object):::Returns internal representation of null key back to caller as null.:::return
WeakHashMap#eq(Object, Object):::Checks for equality of non-null reference x and possibly-null y:::return->x->equals
WeakHashMap#hash(Object):::Retrieve object hash code and applies a supplemental hash function to the result hash, which defends against poor quality hash functions:::h->k->hashCode->return
WeakHashMap#indexFor(int, int):::Returns index for hash code h.:::return
WeakHashMap#expungeStaleEntries():::Expunges stale entries from the table.:::for->x->queue->poll
WeakHashMap#getTable():::Returns the table after first expunging stale entries.:::expungeStaleEntries->return
WeakHashMap#size():::Returns the number of key-value mappings in this map:::if->return->expungeStaleEntries->return
WeakHashMap#isEmpty():::Returns true if this map contains no key-value mappings:::return->size
WeakHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::k->maskNull->h->hash->tab->getTable->index->indexFor->e->while->if->e->get->eq->return->return
WeakHashMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.:::return->getEntry
WeakHashMap#getEntry(Object):::Returns the entry associated with the specified key in this map:::k->maskNull->h->hash->tab->getTable->index->indexFor->e->while->e->get->eq->return
WeakHashMap#put(K, V):::Associates the specified value with the specified key in this map:::k->maskNull->h->hash->tab->getTable->i->indexFor->for->e->e->new->Entry<>->if->resize->return
WeakHashMap#resize(int):::Rehashes the contents of this map into a new array with a larger capacity:::oldTable->getTable->oldCapacity->if->return->newTable->newTable->transfer->if->else->expungeStaleEntries->transfer
WeakHashMap#transfer(Entry[], Entry[]):::Transfers all entries from src to dest tables:::for->j
WeakHashMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::numKeysToBeAdded->m->size->if->return->if->targetCapacity->if->newCapacity->while->if->resize->foreach->m->entrySet->e->getKey->e->getValue->put
WeakHashMap#remove(Object):::Removes the mapping for a key from this weak hash map if it is present:::k->maskNull->h->hash->tab->getTable->i->indexFor->prev->e->while->next->if->e->get->eq->if->else->return->return
WeakHashMap#removeMapping(Object):::Special version of remove needed by Entry set:::if->return->tab->getTable->entry->k->entry->getKey->maskNull->h->hash->i->indexFor->prev->e->while->next->if->e->equals->if->else->return->return
WeakHashMap#clear():::Removes all of the mappings from this map:::while->queue->poll->Arrays->fill->while->queue->poll
WeakHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.:::if->return->containsNullValue->tab->getTable->for->i->return
WeakHashMap#containsNullValue():::Special-case code for containsValue with null argument:::tab->getTable->for->i->return
WeakHashMap.Entry#getKey()::: entry get key:::return->WeakHashMap->get->unmaskNull
WeakHashMap.Entry#getValue()::: entry get value:::return
WeakHashMap.Entry#setValue(V)::: entry set value:::oldValue->return
WeakHashMap.Entry#equals(Object)::: entry equals:::if->return->e->k1->getKey->k2->e->getKey->if->k1->equals->v1->getValue->v2->e->getValue->if->v1->equals->return->return
WeakHashMap.Entry#hashCode()::: entry hash code:::k->getKey->v->getValue->return->Objects->hashCode->Objects->hashCode
WeakHashMap.Entry#toString()::: entry to string:::return->getKey->getValue
WeakHashMap.HashIterator#hasNext()::: hash iterator has next:::t->while->e->i->while->if->return->e->get->if->return
WeakHashMap.HashIterator#nextEntry():::The common parts of next() across different types of iterators:::if->throw->new->ConcurrentModificationException->if->hasNext->throw->new->NoSuchElementException->return
WeakHashMap.HashIterator#remove()::: hash iterator remove:::if->throw->new->IllegalStateException->if->throw->new->ConcurrentModificationException->WeakHashMap.this->remove
WeakHashMap.ValueIterator#next()::: value iterator next:::return->nextEntry
WeakHashMap.KeyIterator#next()::: key iterator next:::return->nextEntry->getKey
WeakHashMap.EntryIterator#next()::: entry iterator next:::return->nextEntry
WeakHashMap#keySet():::Returns a Set view of the keys contained in this map:::ks->if->new->KeySet->return
WeakHashMap.KeySet#iterator()::: key set iterator:::return->new->KeyIterator
WeakHashMap.KeySet#size()::: key set size:::return->WeakHashMap.this->size
WeakHashMap.KeySet#contains(Object)::: key set contains:::return->containsKey
WeakHashMap.KeySet#remove(Object)::: key set remove:::if->containsKey->WeakHashMap.this->remove->return->else->return
WeakHashMap.KeySet#clear()::: key set clear:::WeakHashMap.this->clear
WeakHashMap.KeySet#spliterator()::: key set spliterator:::return->new->KeySpliterator<>
WeakHashMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
WeakHashMap.Values#iterator()::: values iterator:::return->new->ValueIterator
WeakHashMap.Values#size()::: values size:::return->WeakHashMap.this->size
WeakHashMap.Values#contains(Object)::: values contains:::return->containsValue
WeakHashMap.Values#clear()::: values clear:::WeakHashMap.this->clear
WeakHashMap.Values#spliterator()::: values spliterator:::return->new->ValueSpliterator<>
WeakHashMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->return->new->EntrySet
WeakHashMap.EntrySet#iterator()::: entry set iterator:::return->new->EntryIterator
WeakHashMap.EntrySet#contains(Object)::: entry set contains:::if->return->e->candidate->e->getKey->getEntry->return->candidate->equals
WeakHashMap.EntrySet#remove(Object)::: entry set remove:::return->removeMapping
WeakHashMap.EntrySet#size()::: entry set size:::return->WeakHashMap.this->size
WeakHashMap.EntrySet#clear()::: entry set clear:::WeakHashMap.this->clear
WeakHashMap.EntrySet#deepCopy()::: entry set deep copy:::list->size->new->ArrayList<>->foreach->list->new->AbstractMap.SimpleEntry<>->add->return
WeakHashMap.EntrySet#toArray()::: entry set to array:::return->deepCopy->toArray
WeakHashMap.EntrySet#toArray(T[])::: entry set to array:::return->deepCopy->toArray
WeakHashMap.EntrySet#spliterator()::: entry set spliterator:::return->new->EntrySpliterator<>
WeakHashMap#forEach(BiConsumer)::: weak hash map for each:::Objects->requireNonNull->expectedModCount->tab->getTable->foreach->while->key->entry->get->if->action->WeakHashMap->unmaskNull->accept->if->throw->new->ConcurrentModificationException
WeakHashMap#replaceAll(BiFunction)::: weak hash map replace all:::Objects->requireNonNull->expectedModCount->tab->getTable->foreach->while->key->entry->get->if->function->WeakHashMap->unmaskNull->apply->if->throw->new->ConcurrentModificationException
WeakHashMap.WeakHashMapSpliterator#getFence()::: weak hash map spliterator get fence:::hi->if->m->m->size->return
WeakHashMap.WeakHashMapSpliterator#estimateSize()::: weak hash map spliterator estimate size:::getFence->return
WeakHashMap.KeySpliterator#trySplit()::: key spliterator try split:::hi->getFence->lo->mid->return->new->KeySpliterator<>
WeakHashMap.KeySpliterator#forEachRemaining(Consumer)::: key spliterator for each remaining:::i->hi->mc->if->throw->new->NullPointerException->m->tab->if->else->if->p->do->if->else->x->p->get->if->k->WeakHashMap->unmaskNull->action->accept->while->if->throw->new->ConcurrentModificationException
WeakHashMap.KeySpliterator#tryAdvance(Consumer)::: key spliterator try advance:::hi->if->throw->new->NullPointerException->tab->if->getFence->while->if->else->x->current->get->if->k->WeakHashMap->unmaskNull->action->accept->if->throw->new->ConcurrentModificationException->return->return
WeakHashMap.KeySpliterator#characteristics()::: key spliterator characteristics:::return
WeakHashMap.ValueSpliterator#trySplit()::: value spliterator try split:::hi->getFence->lo->mid->return->new->ValueSpliterator<>
WeakHashMap.ValueSpliterator#forEachRemaining(Consumer)::: value spliterator for each remaining:::i->hi->mc->if->throw->new->NullPointerException->m->tab->if->else->if->p->do->if->else->x->p->get->v->if->action->accept->while->if->throw->new->ConcurrentModificationException
WeakHashMap.ValueSpliterator#tryAdvance(Consumer)::: value spliterator try advance:::hi->if->throw->new->NullPointerException->tab->if->getFence->while->if->else->x->current->get->v->if->action->accept->if->throw->new->ConcurrentModificationException->return->return
WeakHashMap.ValueSpliterator#characteristics()::: value spliterator characteristics:::return
WeakHashMap.EntrySpliterator#trySpliterator trySplit()::: entry spliterator try split:::hi->getFence->lo->mid->return->new->EntrySpliterator<>
WeakHashMap.EntrySpliterator#forEachRemaining(Consumer>)::: entry spliterator for each remaining:::i->hi->mc->if->throw->new->NullPointerException->m->tab->if->else->if->p->do->if->else->x->p->get->v->if->k->WeakHashMap->unmaskNull->action->new->AbstractMap.SimpleImmutableEntry<>->accept->while->if->throw->new->ConcurrentModificationException
WeakHashMap.EntrySpliterator#tryAdvance(Consumer>)::: entry spliterator try advance:::hi->if->throw->new->NullPointerException->tab->if->getFence->while->if->else->x->current->get->v->if->k->WeakHashMap->unmaskNull->action->new->AbstractMap.SimpleImmutableEntry<>->accept->if->throw->new->ConcurrentModificationException->return->return
WeakHashMap.EntrySpliterator#characteristics()::: entry spliterator characteristics:::return

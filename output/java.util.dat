AbstractCollection#iterator():::Returns an iterator over the elements contained in this collection.
AbstractCollection#toString():::Returns a string representation of this collection
AbstractList#add(E):::Appends the specified element to the end of this list (optional operation)
AbstractList#clear():::Removes all of the elements from this list (optional operation)
AbstractList#iterator():::Returns an iterator over the elements in this list in proper sequence.
AbstractList#equals(Object):::Compares the specified object with this list for equality
AbstractList#hashCode():::Returns the hash code value for this list.
AbstractList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
AbstractMap#equals(Object):::Compares the specified object with this map for equality
AbstractMap#hashCode():::Returns the hash code value for this map
AbstractMap#toString():::Returns a string representation of this map
AbstractMap#clone():::Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.
AbstractMap.SimpleEntry#getKey():::Returns the key corresponding to this entry.
AbstractMap.SimpleEntry#getValue():::Returns the value corresponding to this entry.
AbstractMap.SimpleEntry#setValue(V):::Replaces the value corresponding to this entry with the specified value.
AbstractMap.SimpleEntry#equals(Object):::Compares the specified object with this entry for equality
AbstractMap.SimpleEntry#hashCode():::Returns the hash code value for this map entry
AbstractMap.SimpleEntry#toString():::Returns a String representation of this map entry
AbstractMap.SimpleImmutableEntry#getKey():::Returns the key corresponding to this entry.
AbstractMap.SimpleImmutableEntry#getValue():::Returns the value corresponding to this entry.
AbstractMap.SimpleImmutableEntry#setValue(V):::Replaces the value corresponding to this entry with the specified value (optional operation)
AbstractMap.SimpleImmutableEntry#equals(Object):::Compares the specified object with this entry for equality
AbstractMap.SimpleImmutableEntry#hashCode():::Returns the hash code value for this map entry
AbstractMap.SimpleImmutableEntry#toString():::Returns a String representation of this map entry
AbstractQueue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
AbstractQueue#remove():::Retrieves and removes the head of this queue
AbstractQueue#element():::Retrieves, but does not remove, the head of this queue
AbstractQueue#clear():::Removes all of the elements from this queue
AbstractQueue#addAll(Collection):::Adds all of the elements in the specified collection to this queue
AbstractSequentialList#get(int):::Returns the element at the specified position in this list
AbstractSequentialList#set(int, E):::Replaces the element at the specified position in this list with the specified element (optional operation)
AbstractSequentialList#add(int, E):::Inserts the specified element at the specified position in this list (optional operation)
AbstractSequentialList#remove(int):::Removes the element at the specified position in this list (optional operation)
AbstractSequentialList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list at the specified position (optional operation)
AbstractSequentialList#iterator():::Returns an iterator over the elements in this list (in proper sequence).  This implementation merely returns a list iterator over the list.
AbstractSequentialList#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence).
AbstractSet#equals(Object):::Compares the specified object with this set for equality
AbstractSet#hashCode():::Returns the hash code value for this set
AbstractSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection (optional operation)
ArrayDeque#inc(int, int):::Circularly increments i, mod modulus
ArrayDeque#dec(int, int):::Circularly decrements i, mod modulus
ArrayDeque#inc(int, int, int):::Circularly adds the given distance to index i, mod modulus
ArrayDeque#sub(int, int, int):::Subtracts j from i, mod modulus
ArrayDeque#elementAt(Object[], int):::Returns element at array index i
ArrayDeque#nonNullElementAt(Object[], int):::A version of elementAt that checks for null elements
ArrayDeque#addFirst(E):::Inserts the specified element at the front of this deque.
ArrayDeque#addLast(E):::Inserts the specified element at the end of this deque
ArrayDeque#addAll(Collection):::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator.
ArrayDeque#offerFirst(E):::Inserts the specified element at the front of this deque.
ArrayDeque#offerLast(E):::Inserts the specified element at the end of this deque.
ArrayDeque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail)
ArrayDeque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail)
ArrayDeque#add(E):::Inserts the specified element at the end of this deque
ArrayDeque#offer(E):::Inserts the specified element at the end of this deque
ArrayDeque#remove():::Retrieves and removes the head of the queue represented by this deque
ArrayDeque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
ArrayDeque#element():::Retrieves, but does not remove, the head of the queue represented by this deque
ArrayDeque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty
ArrayDeque#push(E):::Pushes an element onto the stack represented by this deque
ArrayDeque#pop():::Pops an element from the stack represented by this deque
ArrayDeque#delete(int):::Removes the element at the specified position in the elements array
ArrayDeque#size():::Returns the number of elements in this deque.
ArrayDeque#isEmpty():::Returns true if this deque contains no elements.
ArrayDeque#iterator():::Returns an iterator over the elements in this deque
ArrayDeque#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this deque
ArrayDeque#contains(Object):::Returns true if this deque contains the specified element
ArrayDeque#remove(Object):::Removes a single instance of the specified element from this deque
ArrayDeque#clear():::Removes all of the elements from this deque
ArrayDeque#toArray():::Returns an array containing all of the elements in this deque in proper sequence (from first to last element)
ArrayDeque#toArray(T[]):::Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
ArrayDeque#clone():::Returns a copy of this deque.
ArrayDeque#checkInvariants():::debugging
ArrayList#trimToSize():::Trims the capacity of this ArrayList instance to be the list's current size
ArrayList#ensureCapacity(int):::Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.
ArrayList#size():::Returns the number of elements in this list.
ArrayList#isEmpty():::Returns true if this list contains no elements.
ArrayList#contains(Object):::Returns true if this list contains the specified element
ArrayList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
ArrayList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
ArrayList#clone():::Returns a shallow copy of this ArrayList instance
ArrayList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
ArrayList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
ArrayList#get(int):::Returns the element at the specified position in this list.
ArrayList#set(int, E):::Replaces the element at the specified position in this list with the specified element.
ArrayList#add(E):::Appends the specified element to the end of this list.
ArrayList#add(int, E):::Inserts the specified element at the specified position in this list
ArrayList#remove(int):::Removes the element at the specified position in this list
ArrayList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present
ArrayList#clear():::Removes all of the elements from this list
ArrayList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator
ArrayList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position
ArrayList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
ArrayList#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection.
ArrayList#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection
ArrayList#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
ArrayList#listIterator():::Returns a list iterator over the elements in this list (in proper sequence)
ArrayList#iterator():::Returns an iterator over the elements in this list in proper sequence
ArrayList#subList(int, int):::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive
ArrayList#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list
ArrayList#removeIf(Predicate, int, int):::Removes all elements satisfying the given predicate, from index i (inclusive) to index end (exclusive).
Arrays#rangeCheck(int, int, int):::Checks that fromIndex and toIndex are in the range and throws an exception if they aren't.
Arrays#sort(int[]):::Sorts the specified array into ascending numerical order
Arrays#sort(int[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(long[]):::Sorts the specified array into ascending numerical order
Arrays#sort(long[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(short[]):::Sorts the specified array into ascending numerical order
Arrays#sort(short[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(char[]):::Sorts the specified array into ascending numerical order
Arrays#sort(char[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(byte[]):::Sorts the specified array into ascending numerical order
Arrays#sort(byte[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(float[]):::Sorts the specified array into ascending numerical order
Arrays#sort(float[], int, int):::Sorts the specified range of the array into ascending order
Arrays#sort(double[]):::Sorts the specified array into ascending numerical order
Arrays#sort(double[], int, int):::Sorts the specified range of the array into ascending order
Arrays#parallelSort(byte[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(byte[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(char[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(char[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(short[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(short[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(int[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(int[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(long[]):::Sorts the specified array into ascending numerical order.
Arrays#parallelSort(long[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(float[]):::Sorts the specified array into ascending numerical order
Arrays#parallelSort(float[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(double[]):::Sorts the specified array into ascending numerical order
Arrays#parallelSort(double[], int, int):::Sorts the specified range of the array into ascending numerical order
Arrays#parallelSort(T[]):::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
Arrays#parallelSort(T[], int, int):::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
Arrays#parallelSort(T[], Comparator):::Sorts the specified array of objects according to the order induced by the specified comparator
Arrays#parallelSort(T[], int, int, Comparator):::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator
Arrays#sort(Object[]):::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
Arrays#sort(Object[], int, int):::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
Arrays#sort(T[], Comparator):::Sorts the specified array of objects according to the order induced by the specified comparator
Arrays#sort(T[], int, int, Comparator):::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator
Arrays#parallelPrefix(T[], BinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function
Arrays#parallelPrefix(T[], int, int, BinaryOperator):::Performs #parallelPrefix(Object[], BinaryOperator) for the given subrange of the array.
Arrays#parallelPrefix(long[], LongBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function
Arrays#parallelPrefix(long[], int, int, LongBinaryOperator):::Performs #parallelPrefix(long[], LongBinaryOperator) for the given subrange of the array.
Arrays#parallelPrefix(double[], DoubleBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function
Arrays#parallelPrefix(double[], int, int, DoubleBinaryOperator):::Performs #parallelPrefix(double[], DoubleBinaryOperator) for the given subrange of the array.
Arrays#parallelPrefix(int[], IntBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function
Arrays#parallelPrefix(int[], int, int, IntBinaryOperator):::Performs #parallelPrefix(int[], IntBinaryOperator) for the given subrange of the array.
Arrays#binarySearch(long[], long):::Searches the specified array of longs for the specified value using the binary search algorithm
Arrays#binarySearch(long[], int, int, long):::Searches a range of the specified array of longs for the specified value using the binary search algorithm
Arrays#binarySearch(int[], int):::Searches the specified array of ints for the specified value using the binary search algorithm
Arrays#binarySearch(int[], int, int, int):::Searches a range of the specified array of ints for the specified value using the binary search algorithm
Arrays#binarySearch(short[], short):::Searches the specified array of shorts for the specified value using the binary search algorithm
Arrays#binarySearch(short[], int, int, short):::Searches a range of the specified array of shorts for the specified value using the binary search algorithm
Arrays#binarySearch(char[], char):::Searches the specified array of chars for the specified value using the binary search algorithm
Arrays#binarySearch(char[], int, int, char):::Searches a range of the specified array of chars for the specified value using the binary search algorithm
Arrays#binarySearch(byte[], byte):::Searches the specified array of bytes for the specified value using the binary search algorithm
Arrays#binarySearch(byte[], int, int, byte):::Searches a range of the specified array of bytes for the specified value using the binary search algorithm
Arrays#binarySearch(double[], double):::Searches the specified array of doubles for the specified value using the binary search algorithm
Arrays#binarySearch(double[], int, int, double):::Searches a range of the specified array of doubles for the specified value using the binary search algorithm
Arrays#binarySearch(float[], float):::Searches the specified array of floats for the specified value using the binary search algorithm
Arrays#binarySearch(float[], int, int, float):::Searches a range of the specified array of floats for the specified value using the binary search algorithm
Arrays#binarySearch(Object[], Object):::Searches the specified array for the specified object using the binary search algorithm
Arrays#binarySearch(Object[], int, int, Object):::Searches a range of the specified array for the specified object using the binary search algorithm
Arrays#binarySearch(T[], T, Comparator):::Searches the specified array for the specified object using the binary search algorithm
Arrays#binarySearch(T[], int, int, T, Comparator):::Searches a range of the specified array for the specified object using the binary search algorithm
Arrays#equals(long[], long[]):::Returns true if the two specified arrays of longs are equal to one another
Arrays#equals(long[], int, int, long[], int, int):::Returns true if the two specified arrays of longs, over the specified ranges, are equal to one another
Arrays#equals(int[], int[]):::Returns true if the two specified arrays of ints are equal to one another
Arrays#equals(int[], int, int, int[], int, int):::Returns true if the two specified arrays of ints, over the specified ranges, are equal to one another
Arrays#equals(short[], short[]):::Returns true if the two specified arrays of shorts are equal to one another
Arrays#equals(short[], int, int, short[], int, int):::Returns true if the two specified arrays of shorts, over the specified ranges, are equal to one another
Arrays#equals(char[], char[]):::Returns true if the two specified arrays of chars are equal to one another
Arrays#equals(char[], int, int, char[], int, int):::Returns true if the two specified arrays of chars, over the specified ranges, are equal to one another
Arrays#equals(byte[], byte[]):::Returns true if the two specified arrays of bytes are equal to one another
Arrays#equals(byte[], int, int, byte[], int, int):::Returns true if the two specified arrays of bytes, over the specified ranges, are equal to one another
Arrays#equals(boolean[], boolean[]):::Returns true if the two specified arrays of booleans are equal to one another
Arrays#equals(boolean[], int, int, boolean[], int, int):::Returns true if the two specified arrays of booleans, over the specified ranges, are equal to one another
Arrays#equals(double[], double[]):::Returns true if the two specified arrays of doubles are equal to one another
Arrays#equals(double[], int, int, double[], int, int):::Returns true if the two specified arrays of doubles, over the specified ranges, are equal to one another
Arrays#equals(float[], float[]):::Returns true if the two specified arrays of floats are equal to one another
Arrays#equals(float[], int, int, float[], int, int):::Returns true if the two specified arrays of floats, over the specified ranges, are equal to one another
Arrays#equals(Object[], Object[]):::Returns true if the two specified arrays of Objects are equal to one another
Arrays#equals(Object[], int, int, Object[], int, int):::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another
Arrays#equals(T[], T[], Comparator):::Returns true if the two specified arrays of Objects are equal to one another
Arrays#equals(T[], int, int, T[], int, int, Comparator):::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another
Arrays#fill(long[], long):::Assigns the specified long value to each element of the specified array of longs.
Arrays#fill(long[], int, int, long):::Assigns the specified long value to each element of the specified range of the specified array of longs
Arrays#fill(int[], int):::Assigns the specified int value to each element of the specified array of ints.
Arrays#fill(int[], int, int, int):::Assigns the specified int value to each element of the specified range of the specified array of ints
Arrays#fill(short[], short):::Assigns the specified short value to each element of the specified array of shorts.
Arrays#fill(short[], int, int, short):::Assigns the specified short value to each element of the specified range of the specified array of shorts
Arrays#fill(char[], char):::Assigns the specified char value to each element of the specified array of chars.
Arrays#fill(char[], int, int, char):::Assigns the specified char value to each element of the specified range of the specified array of chars
Arrays#fill(byte[], byte):::Assigns the specified byte value to each element of the specified array of bytes.
Arrays#fill(byte[], int, int, byte):::Assigns the specified byte value to each element of the specified range of the specified array of bytes
Arrays#fill(boolean[], boolean):::Assigns the specified boolean value to each element of the specified array of booleans.
Arrays#fill(boolean[], int, int, boolean):::Assigns the specified boolean value to each element of the specified range of the specified array of booleans
Arrays#fill(double[], double):::Assigns the specified double value to each element of the specified array of doubles.
Arrays#fill(double[], int, int, double):::Assigns the specified double value to each element of the specified range of the specified array of doubles
Arrays#fill(float[], float):::Assigns the specified float value to each element of the specified array of floats.
Arrays#fill(float[], int, int, float):::Assigns the specified float value to each element of the specified range of the specified array of floats
Arrays#fill(Object[], Object):::Assigns the specified Object reference to each element of the specified array of Objects.
Arrays#fill(Object[], int, int, Object):::Assigns the specified Object reference to each element of the specified range of the specified array of Objects
Arrays#copyOf(T[], int):::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length
Arrays#copyOf(U[], int, Class):::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length
Arrays#copyOf(byte[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(short[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(int[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(long[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(char[], int):::Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length
Arrays#copyOf(float[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(double[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
Arrays#copyOf(boolean[], int):::Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length
Arrays#copyOfRange(T[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(U[], int, int, Class):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(byte[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(short[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(int[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(long[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(char[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(float[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(double[], int, int):::Copies the specified range of the specified array into a new array
Arrays#copyOfRange(boolean[], int, int):::Copies the specified range of the specified array into a new array
Arrays#asList(T...):::Returns a fixed-size list backed by the specified array
Arrays#hashCode(long[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(int[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(short[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(char[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(byte[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(boolean[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(float[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(double[]):::Returns a hash code based on the contents of the specified array
Arrays#hashCode(Object[]):::Returns a hash code based on the contents of the specified array
Arrays#deepHashCode(Object[]):::Returns a hash code based on the "deep contents" of the specified array
Arrays#deepEquals(Object[], Object[]):::Returns true if the two specified arrays are deeply equal to one another
Arrays#toString(long[]):::Returns a string representation of the contents of the specified array
Arrays#toString(int[]):::Returns a string representation of the contents of the specified array
Arrays#toString(short[]):::Returns a string representation of the contents of the specified array
Arrays#toString(char[]):::Returns a string representation of the contents of the specified array
Arrays#toString(byte[]):::Returns a string representation of the contents of the specified array
Arrays#toString(boolean[]):::Returns a string representation of the contents of the specified array
Arrays#toString(float[]):::Returns a string representation of the contents of the specified array
Arrays#toString(double[]):::Returns a string representation of the contents of the specified array
Arrays#toString(Object[]):::Returns a string representation of the contents of the specified array
Arrays#deepToString(Object[]):::Returns a string representation of the "deep contents" of the specified array
Arrays#setAll(T[], IntFunction):::Set all elements of the specified array, using the provided generator function to compute each element
Arrays#parallelSetAll(T[], IntFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Arrays#setAll(int[], IntUnaryOperator):::Set all elements of the specified array, using the provided generator function to compute each element
Arrays#parallelSetAll(int[], IntUnaryOperator):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Arrays#setAll(long[], IntToLongFunction):::Set all elements of the specified array, using the provided generator function to compute each element
Arrays#parallelSetAll(long[], IntToLongFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Arrays#setAll(double[], IntToDoubleFunction):::Set all elements of the specified array, using the provided generator function to compute each element
Arrays#parallelSetAll(double[], IntToDoubleFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
Arrays#spliterator(T[]):::Returns a Spliterator covering all of the specified array
Arrays#spliterator(T[], int, int):::Returns a Spliterator covering the specified range of the specified array
Arrays#spliterator(int[]):::Returns a Spliterator.OfInt covering all of the specified array
Arrays#spliterator(int[], int, int):::Returns a Spliterator.OfInt covering the specified range of the specified array
Arrays#spliterator(long[]):::Returns a Spliterator.OfLong covering all of the specified array
Arrays#spliterator(long[], int, int):::Returns a Spliterator.OfLong covering the specified range of the specified array
Arrays#spliterator(double[]):::Returns a Spliterator.OfDouble covering all of the specified array
Arrays#spliterator(double[], int, int):::Returns a Spliterator.OfDouble covering the specified range of the specified array
Arrays#stream(T[]):::Returns a sequential Stream with the specified array as its source.
Arrays#stream(T[], int, int):::Returns a sequential Stream with the specified range of the specified array as its source.
Arrays#stream(int[]):::Returns a sequential IntStream with the specified array as its source.
Arrays#stream(int[], int, int):::Returns a sequential IntStream with the specified range of the specified array as its source.
Arrays#stream(long[]):::Returns a sequential LongStream with the specified array as its source.
Arrays#stream(long[], int, int):::Returns a sequential LongStream with the specified range of the specified array as its source.
Arrays#stream(double[]):::Returns a sequential DoubleStream with the specified array as its source.
Arrays#stream(double[], int, int):::Returns a sequential DoubleStream with the specified range of the specified array as its source.
Arrays#compare(boolean[], boolean[]):::Compares two boolean arrays lexicographically
Arrays#compare(boolean[], int, int, boolean[], int, int):::Compares two boolean arrays lexicographically over the specified ranges
Arrays#compare(byte[], byte[]):::Compares two byte arrays lexicographically
Arrays#compare(byte[], int, int, byte[], int, int):::Compares two byte arrays lexicographically over the specified ranges
Arrays#compareUnsigned(byte[], byte[]):::Compares two byte arrays lexicographically, numerically treating elements as unsigned
Arrays#compareUnsigned(byte[], int, int, byte[], int, int):::Compares two byte arrays lexicographically over the specified ranges, numerically treating elements as unsigned
Arrays#compare(short[], short[]):::Compares two short arrays lexicographically
Arrays#compare(short[], int, int, short[], int, int):::Compares two short arrays lexicographically over the specified ranges
Arrays#compareUnsigned(short[], short[]):::Compares two short arrays lexicographically, numerically treating elements as unsigned
Arrays#compareUnsigned(short[], int, int, short[], int, int):::Compares two short arrays lexicographically over the specified ranges, numerically treating elements as unsigned
Arrays#compare(char[], char[]):::Compares two char arrays lexicographically
Arrays#compare(char[], int, int, char[], int, int):::Compares two char arrays lexicographically over the specified ranges
Arrays#compare(int[], int[]):::Compares two int arrays lexicographically
Arrays#compare(int[], int, int, int[], int, int):::Compares two int arrays lexicographically over the specified ranges
Arrays#compareUnsigned(int[], int[]):::Compares two int arrays lexicographically, numerically treating elements as unsigned
Arrays#compareUnsigned(int[], int, int, int[], int, int):::Compares two int arrays lexicographically over the specified ranges, numerically treating elements as unsigned
Arrays#compare(long[], long[]):::Compares two long arrays lexicographically
Arrays#compare(long[], int, int, long[], int, int):::Compares two long arrays lexicographically over the specified ranges
Arrays#compareUnsigned(long[], long[]):::Compares two long arrays lexicographically, numerically treating elements as unsigned
Arrays#compareUnsigned(long[], int, int, long[], int, int):::Compares two long arrays lexicographically over the specified ranges, numerically treating elements as unsigned
Arrays#compare(float[], float[]):::Compares two float arrays lexicographically
Arrays#compare(float[], int, int, float[], int, int):::Compares two float arrays lexicographically over the specified ranges
Arrays#compare(double[], double[]):::Compares two double arrays lexicographically
Arrays#compare(double[], int, int, double[], int, int):::Compares two double arrays lexicographically over the specified ranges
Arrays#compare(T[], T[]):::Compares two Object arrays, within comparable elements, lexicographically
Arrays#compare(T[], int, int, T[], int, int):::Compares two Object arrays lexicographically over the specified ranges
Arrays#compare(T[], T[], Comparator):::Compares two Object arrays lexicographically using a specified comparator
Arrays#compare(T[], int, int, T[], int, int, Comparator):::Compares two Object arrays lexicographically over the specified ranges
Arrays#mismatch(boolean[], boolean[]):::Finds and returns the index of the first mismatch between two boolean arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(boolean[], int, int, boolean[], int, int):::Finds and returns the relative index of the first mismatch between two boolean arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(byte[], byte[]):::Finds and returns the index of the first mismatch between two byte arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(byte[], int, int, byte[], int, int):::Finds and returns the relative index of the first mismatch between two byte arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(char[], char[]):::Finds and returns the index of the first mismatch between two char arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(char[], int, int, char[], int, int):::Finds and returns the relative index of the first mismatch between two char arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(short[], short[]):::Finds and returns the index of the first mismatch between two short arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(short[], int, int, short[], int, int):::Finds and returns the relative index of the first mismatch between two short arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(int[], int[]):::Finds and returns the index of the first mismatch between two int arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(int[], int, int, int[], int, int):::Finds and returns the relative index of the first mismatch between two int arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(long[], long[]):::Finds and returns the index of the first mismatch between two long arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(long[], int, int, long[], int, int):::Finds and returns the relative index of the first mismatch between two long arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(float[], float[]):::Finds and returns the index of the first mismatch between two float arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(float[], int, int, float[], int, int):::Finds and returns the relative index of the first mismatch between two float arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(double[], double[]):::Finds and returns the index of the first mismatch between two double arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(double[], int, int, double[], int, int):::Finds and returns the relative index of the first mismatch between two double arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(Object[], Object[]):::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(Object[], int, int, Object[], int, int):::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found
Arrays#mismatch(T[], T[], Comparator):::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found
Arrays#mismatch(T[], int, int, T[], int, int, Comparator):::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found
Base64#getEncoder():::Returns a Encoder that encodes using the Basic type base64 encoding scheme.
Base64#getUrlEncoder():::Returns a Encoder that encodes using the URL and Filename safe type base64 encoding scheme.
Base64#getMimeEncoder():::Returns a Encoder that encodes using the MIME type base64 encoding scheme.
Base64#getMimeEncoder(int, byte[]):::Returns a Encoder that encodes using the MIME type base64 encoding scheme with specified line length and line separators.
Base64#getDecoder():::Returns a Decoder that decodes using the Basic type base64 encoding scheme.
Base64#getUrlDecoder():::Returns a Decoder that decodes using the URL and Filename safe type base64 encoding scheme.
Base64#getMimeDecoder():::Returns a Decoder that decodes using the MIME type base64 decoding scheme.
Base64.Encoder#encode(byte[]):::Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme
Base64.Encoder#encode(byte[], byte[]):::Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0
Base64.Encoder#encodeToString(byte[]):::Encodes the specified byte array into a String using the Base64 encoding scheme
Base64.Encoder#encode(ByteBuffer):::Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme
Base64.Encoder#wrap(OutputStream):::Wraps an output stream for encoding byte data using the Base64 encoding scheme
Base64.Encoder#withoutPadding():::Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data
Base64.Decoder#decode(byte[]):::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into a newly-allocated output byte array
Base64.Decoder#decode(String):::Decodes a Base64 encoded String into a newly-allocated byte array using the Base64 encoding scheme
Base64.Decoder#decode(byte[], byte[]):::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into the given output byte array, starting at offset 0
Base64.Decoder#decode(ByteBuffer):::Decodes all bytes from the input byte buffer using the Base64 encoding scheme, writing the results into a newly-allocated ByteBuffer
Base64.Decoder#wrap(InputStream):::Returns an input stream for decoding Base64 encoded byte stream
BitSet#valueOf(long[]):::Returns a new bit set containing all the bits in the given long array
BitSet#valueOf(LongBuffer):::Returns a new bit set containing all the bits in the given long buffer between its position and limit
BitSet#valueOf(byte[]):::Returns a new bit set containing all the bits in the given byte array
BitSet#valueOf(ByteBuffer):::Returns a new bit set containing all the bits in the given byte buffer between its position and limit
BitSet#toByteArray():::Returns a new byte array containing all the bits in this bit set
BitSet#toLongArray():::Returns a new long array containing all the bits in this bit set
BitSet#flip(int):::Sets the bit at the specified index to the complement of its current value.
BitSet#flip(int, int):::Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value.
BitSet#set(int):::Sets the bit at the specified index to true.
BitSet#set(int, boolean):::Sets the bit at the specified index to the specified value.
BitSet#set(int, int):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true.
BitSet#set(int, int, boolean):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value.
BitSet#clear(int):::Sets the bit specified by the index to false.
BitSet#clear(int, int):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false.
BitSet#clear():::Sets all of the bits in this BitSet to false.
BitSet#get(int):::Returns the value of the bit with the specified index
BitSet#get(int, int):::Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive).
BitSet#nextSetBit(int):::Returns the index of the first bit that is set to true that occurs on or after the specified starting index
BitSet#nextClearBit(int):::Returns the index of the first bit that is set to false that occurs on or after the specified starting index.
BitSet#previousSetBit(int):::Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index
BitSet#previousClearBit(int):::Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index
BitSet#length():::Returns the "logical size" of this BitSet: the index of the highest set bit in the BitSet plus one
BitSet#isEmpty():::Returns true if this BitSet contains no bits that are set to true.
BitSet#intersects(BitSet):::Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.
BitSet#cardinality():::Returns the number of bits set to true in this BitSet.
BitSet#and(BitSet):::Performs a logical AND of this target bit set with the argument bit set
BitSet#or(BitSet):::Performs a logical OR of this bit set with the bit set argument
BitSet#xor(BitSet):::Performs a logical XOR of this bit set with the bit set argument
BitSet#andNot(BitSet):::Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet.
BitSet#hashCode():::Returns the hash code value for this bit set
BitSet#size():::Returns the number of bits of space actually in use by this BitSet to represent bit values
BitSet#equals(Object):::Compares this object against the specified object
BitSet#clone():::Cloning this BitSet produces a new BitSet that is equal to it
BitSet#toString():::Returns a string representation of this bit set
BitSet#stream():::Returns a stream of indices for which this BitSet contains a bit in the set state
Calendar.Builder#setInstant(long):::Sets the instant parameter to the given instant value that is a millisecond offset from the Epoch.
Calendar.Builder#setInstant(Date):::Sets the instant parameter to the instant value given by a Date
Calendar.Builder#set(int, int):::Sets the field parameter to the given value
Calendar.Builder#setFields(int...):::Sets field parameters to their values given by fieldValuePairs that are pairs of a field and its value
Calendar.Builder#setDate(int, int, int):::Sets the date field parameters to the values given by year, month, and dayOfMonth
Calendar.Builder#setTimeOfDay(int, int, int):::Sets the time of day field parameters to the values given by hourOfDay, minute, and second
Calendar.Builder#setTimeOfDay(int, int, int, int):::Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis
Calendar.Builder#setWeekDate(int, int, int):::Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week
Calendar.Builder#setTimeZone(TimeZone):::Sets the time zone parameter to the given zone
Calendar.Builder#setLenient(boolean):::Sets the lenient mode parameter to the value given by lenient
Calendar.Builder#setCalendarType(String):::Sets the calendar type parameter to the given type
Calendar.Builder#setLocale(Locale):::Sets the locale parameter to the given locale
Calendar.Builder#setWeekDefinition(int, int):::Sets the week definition parameters to the values given by firstDayOfWeek and minimalDaysInFirstWeek that are used to determine the first week of a year
Calendar.Builder#build():::Returns a Calendar built from the parameters set by the setter methods
Calendar#getInstance():::Gets a calendar using the default time zone and locale
Calendar#getInstance(TimeZone):::Gets a calendar using the specified time zone and default locale
Calendar#getInstance(Locale):::Gets a calendar using the default time zone and specified locale
Calendar#getInstance(TimeZone, Locale):::Gets a calendar with the specified time zone and locale
Calendar#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances
Calendar#computeTime():::Converts the current calendar field values in #fields fields[] to the millisecond time value #time.
Calendar#computeFields():::Converts the current millisecond time value #time to calendar field values in #fields fields[]
Calendar#getTime():::Returns a Date object representing this Calendar's time value (millisecond offset from the Epoch").
Calendar#setTime(Date):::Sets this Calendar's time with the given Date
Calendar#getTimeInMillis():::Returns this Calendar's time value in milliseconds.
Calendar#setTimeInMillis(long):::Sets this Calendar's current time from the given long value.
Calendar#get(int):::Returns the value of the given calendar field
Calendar#internalGet(int):::Returns the value of the given calendar field
Calendar#internalSet(int, int):::Sets the value of the given calendar field
Calendar#set(int, int):::Sets the given calendar field to the given value
Calendar#set(int, int, int):::Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH
Calendar#set(int, int, int, int, int):::Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE
Calendar#set(int, int, int, int, int, int):::Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND
Calendar#clear():::Sets all the calendar field values and the time value (millisecond offset from the Epoch) of this Calendar undefined
Calendar#clear(int):::Sets the given calendar field value and the time value (millisecond offset from the Epoch) of this Calendar undefined
Calendar#isSet(int):::Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call.
Calendar#getDisplayName(int, int, Locale):::Returns the string representation of the calendar field value in the given style and locale
Calendar#getDisplayNames(int, int, Locale):::Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values
Calendar#complete():::Fills in any unset fields in the calendar fields
Calendar#isExternallySet(int):::Returns whether the value of the specified calendar field has been set externally by calling one of the setter methods rather than by the internal time calculation.
Calendar#getSetStateFields():::Returns a field mask (bit mask) indicating all calendar fields that have the state of externally or internally set.
Calendar#setFieldsComputed(int):::Sets the state of the specified calendar fields to computed
Calendar#setFieldsNormalized(int):::Sets the state of the calendar fields that are not specified by fieldMask to unset
Calendar#isPartiallyNormalized():::Returns whether the calendar fields are partially in sync with the time value or fully in sync but not stamp values are not normalized yet.
Calendar#isFullyNormalized():::Returns whether the calendar fields are fully in sync with the time value.
Calendar#setUnnormalized():::Marks this Calendar as not sync'd.
Calendar#isFieldSet(int, int):::Returns whether the specified field is on in the fieldMask.
Calendar#selectFields():::Returns a field mask indicating which calendar field values to be used to calculate the time value
Calendar#getAvailableCalendarTypes():::Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment
Calendar#getCalendarType():::Returns the calendar type of this Calendar
Calendar#equals(Object):::Compares this Calendar to the specified Object
Calendar#hashCode():::Returns a hash code for this calendar.
Calendar#before(Object):::Returns whether this Calendar represents a time before the time represented by the specified Object
Calendar#after(Object):::Returns whether this Calendar represents a time after the time represented by the specified Object
Calendar#compareTo(Calendar):::Compares the time values (millisecond offsets from the Epoch) represented by two Calendar objects.
Calendar#add(int, int):::Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules
Calendar#roll(int, boolean):::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields
Calendar#roll(int, int):::Adds the specified (signed) amount to the specified calendar field without changing larger fields
Calendar#setTimeZone(TimeZone):::Sets the time zone with the given time zone value.
Calendar#getTimeZone():::Gets the time zone.
Calendar#getZone():::Returns the time zone (without cloning).
Calendar#setZoneShared(boolean):::Sets the sharedZone flag to shared.
Calendar#setLenient(boolean):::Specifies whether or not date/time interpretation is to be lenient
Calendar#isLenient():::Tells whether date/time interpretation is to be lenient.
Calendar#setFirstDayOfWeek(int):::Sets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.
Calendar#getFirstDayOfWeek():::Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.
Calendar#setMinimalDaysInFirstWeek(int):::Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1
Calendar#getMinimalDaysInFirstWeek():::Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1
Calendar#isWeekDateSupported():::Returns whether this Calendar supports week dates
Calendar#getWeekYear():::Returns the week year represented by this Calendar
Calendar#setWeekDate(int, int, int):::Sets the date of this Calendar with the given date specifiers - week year, week of year, and day of week
Calendar#getWeeksInWeekYear():::Returns the number of weeks in the week year represented by this Calendar
Calendar#getMinimum(int):::Returns the minimum value for the given calendar field of this Calendar instance
Calendar#getMaximum(int):::Returns the maximum value for the given calendar field of this Calendar instance
Calendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this Calendar instance
Calendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this Calendar instance
Calendar#getActualMinimum(int):::Returns the minimum value that the specified calendar field could have, given the time value of this Calendar
Calendar#getActualMaximum(int):::Returns the maximum value that the specified calendar field could have, given the time value of this Calendar
Calendar#clone():::Creates and returns a copy of this object.
Calendar#getFieldName(int):::Returns the name of the specified calendar field.
Calendar#toString():::Return a string representation of this calendar
Calendar#toInstant():::Converts this object to an Instant
Collection#size():::Returns the number of elements in this collection
Collection#isEmpty():::Returns true if this collection contains no elements.
Collection#contains(Object):::Returns true if this collection contains the specified element
Collection#iterator():::Returns an iterator over the elements in this collection
Collection#toArray():::Returns an array containing all of the elements in this collection
Collection#toArray(T[]):::Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array
Collection#toArray(IntFunction):::Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array
Collection#add(E):::Ensures that this collection contains the specified element (optional operation)
Collection#remove(Object):::Removes a single instance of the specified element from this collection, if it is present (optional operation)
Collection#containsAll(Collection):::Returns true if this collection contains all of the elements in the specified collection.
Collection#addAll(Collection):::Adds all of the elements in the specified collection to this collection (optional operation)
Collection#removeAll(Collection):::Removes all of this collection's elements that are also contained in the specified collection (optional operation)
Collection#removeIf(Predicate):::Removes all of the elements of this collection that satisfy the given predicate
Collection#retainAll(Collection):::Retains only the elements in this collection that are contained in the specified collection (optional operation)
Collection#clear():::Removes all of the elements from this collection (optional operation)
Collection#equals(Object):::Compares the specified object with this collection for equality
Collection#hashCode():::Returns the hash code value for this collection
Collection#spliterator():::Creates a Spliterator over the elements in this collection
Collection#stream():::Returns a sequential Stream with this collection as its source
Collection#parallelStream():::Returns a possibly parallel Stream with this collection as its source
Collections#sort(List):::Sorts the specified list into ascending order, according to the Comparable natural ordering of its elements
Collections#sort(List, Comparator):::Sorts the specified list according to the order induced by the specified comparator
Collections#binarySearch(List>, T):::Searches the specified list for the specified object using the binary search algorithm
Collections#binarySearch(List, T, Comparator):::Searches the specified list for the specified object using the binary search algorithm
Collections#reverse(List):::Reverses the order of the elements in the specified list.  This method runs in linear time.
Collections#shuffle(List):::Randomly permutes the specified list using a default source of randomness
Collections#shuffle(List, Random):::Randomly permute the specified list using the specified source of randomness
Collections#swap(List, int, int):::Swaps the elements at the specified positions in the specified list
Collections#fill(List, T):::Replaces all of the elements of the specified list with the specified element
Collections#copy(List, List):::Copies all of the elements from one list into another
Collections#min(Collection):::Returns the minimum element of the given collection, according to the natural ordering of its elements
Collections#min(Collection, Comparator):::Returns the minimum element of the given collection, according to the order induced by the specified comparator
Collections#max(Collection):::Returns the maximum element of the given collection, according to the natural ordering of its elements
Collections#max(Collection, Comparator):::Returns the maximum element of the given collection, according to the order induced by the specified comparator
Collections#rotate(List, int):::Rotates the elements in the specified list by the specified distance
Collections#replaceAll(List, T, T):::Replaces all occurrences of one specified value in a list with another
Collections#indexOfSubList(List, List):::Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence
Collections#lastIndexOfSubList(List, List):::Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence
Collections#unmodifiableCollection(Collection):::Returns an unmodifiable view of the specified collection
Collections#unmodifiableSet(Set):::Returns an unmodifiable view of the specified set
Collections#unmodifiableSortedSet(SortedSet):::Returns an unmodifiable view of the specified sorted set
Collections#unmodifiableNavigableSet(NavigableSet):::Returns an unmodifiable view of the specified navigable set
Collections#unmodifiableList(List):::Returns an unmodifiable view of the specified list
Collections#unmodifiableMap(Map):::Returns an unmodifiable view of the specified map
Collections#unmodifiableSortedMap(SortedMap):::Returns an unmodifiable view of the specified sorted map
Collections#unmodifiableNavigableMap(NavigableMap):::Returns an unmodifiable view of the specified navigable map
Collections#synchronizedCollection(Collection):::Returns a synchronized (thread-safe) collection backed by the specified collection
Collections#synchronizedSet(Set):::Returns a synchronized (thread-safe) set backed by the specified set
Collections#synchronizedSortedSet(SortedSet):::Returns a synchronized (thread-safe) sorted set backed by the specified sorted set
Collections#synchronizedNavigableSet(NavigableSet):::Returns a synchronized (thread-safe) navigable set backed by the specified navigable set
Collections#synchronizedList(List):::Returns a synchronized (thread-safe) list backed by the specified list
Collections#synchronizedMap(Map):::Returns a synchronized (thread-safe) map backed by the specified map
Collections#synchronizedSortedMap(SortedMap):::Returns a synchronized (thread-safe) sorted map backed by the specified sorted map
Collections#synchronizedNavigableMap(NavigableMap):::Returns a synchronized (thread-safe) navigable map backed by the specified navigable map
Collections#checkedCollection(Collection, Class):::Returns a dynamically typesafe view of the specified collection
Collections#checkedQueue(Queue, Class):::Returns a dynamically typesafe view of the specified queue
Collections#checkedSet(Set, Class):::Returns a dynamically typesafe view of the specified set
Collections#checkedSortedSet(SortedSet, Class):::Returns a dynamically typesafe view of the specified sorted set
Collections#checkedNavigableSet(NavigableSet, Class):::Returns a dynamically typesafe view of the specified navigable set
Collections#checkedList(List, Class):::Returns a dynamically typesafe view of the specified list
Collections#checkedMap(Map, Class, Class):::Returns a dynamically typesafe view of the specified map
Collections#checkedSortedMap(SortedMap, Class, Class):::Returns a dynamically typesafe view of the specified sorted map
Collections#checkedNavigableMap(NavigableMap, Class, Class):::Returns a dynamically typesafe view of the specified navigable map
Collections#emptyIterator():::Returns an iterator that has no elements
Collections#emptyListIterator():::Returns a list iterator that has no elements
Collections#emptyEnumeration():::Returns an enumeration that has no elements
Collections#emptySet():::Returns an empty set (immutable)
Collections#emptySortedSet():::Returns an empty sorted set (immutable)
Collections#emptyNavigableSet():::Returns an empty navigable set (immutable)
Collections#emptyList():::Returns an empty list (immutable)
Collections#emptyMap():::Returns an empty map (immutable)
Collections#emptySortedMap():::Returns an empty sorted map (immutable)
Collections#emptyNavigableMap():::Returns an empty navigable map (immutable)
Collections#singleton(T):::Returns an immutable set containing only the specified object
Collections#singletonSpliterator(T):::Creates a Spliterator with only the specified element
Collections#singletonList(T):::Returns an immutable list containing only the specified object
Collections#singletonMap(K, V):::Returns an immutable map, mapping only the specified key to the specified value
Collections#nCopies(int, T):::Returns an immutable list consisting of n copies of the specified object
Collections#reverseOrder():::Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface
Collections#reverseOrder(Comparator):::Returns a comparator that imposes the reverse ordering of the specified comparator
Collections#enumeration(Collection):::Returns an enumeration over the specified collection
Collections#list(Enumeration):::Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration
Collections#eq(Object, Object):::Returns true if the specified arguments are equal, or both null
Collections#frequency(Collection, Object):::Returns the number of elements in the specified collection equal to the specified object
Collections#disjoint(Collection, Collection):::Returns true if the two specified collections have no elements in common
Collections#addAll(Collection, T...):::Adds all of the specified elements to the specified collection
Collections#newSetFromMap(Map):::Returns a set backed by the specified map
Collections#asLifoQueue(Deque):::Returns a view of a Deque as a Last-in-first-out (Lifo) Queue
ComparableTimSort#sort(Object[], int, int, Object[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible
Comparator#compare(T, T):::Compares its two arguments for order
Comparator#equals(Object):::Indicates whether some other object is &quot;equal to&quot; this comparator
Comparator#reversed():::Returns a comparator that imposes the reverse ordering of this comparator.
Comparator#thenComparing(Comparator):::Returns a lexicographic-order comparator with another comparator
Comparator#thenComparing(Function, Comparator):::Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.
Comparator#thenComparing(Function):::Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.
Comparator#thenComparingInt(ToIntFunction):::Returns a lexicographic-order comparator with a function that extracts an int sort key.
Comparator#thenComparingLong(ToLongFunction):::Returns a lexicographic-order comparator with a function that extracts a long sort key.
Comparator#thenComparingDouble(ToDoubleFunction):::Returns a lexicographic-order comparator with a function that extracts a double sort key.
Comparator#reverseOrder():::Returns a comparator that imposes the reverse of the natural ordering
Comparator#naturalOrder():::Returns a comparator that compares Comparable objects in natural order
Comparator#nullsFirst(Comparator):::Returns a null-friendly comparator that considers null to be less than non-null
Comparator#nullsLast(Comparator):::Returns a null-friendly comparator that considers null to be greater than non-null
Comparator#comparing(Function, Comparator):::Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator
Comparator#comparing(Function):::Accepts a function that extracts a java.lang.Comparable Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key
Comparator#comparingInt(ToIntFunction):::Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key
Comparator#comparingLong(ToLongFunction):::Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key
Comparator#comparingDouble(ToDoubleFunction):::Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key
Currency#getInstance(String):::Returns the Currency instance for the given currency code.
Currency#getInstance(Locale):::Returns the Currency instance for the country of the given locale
Currency#getAvailableCurrencies():::Gets the set of available currencies
Currency#getCurrencyCode():::Gets the ISO 4217 currency code of this currency.
Currency#getSymbol():::Gets the symbol of this currency for the default Locale.Category#DISPLAY DISPLAY locale
Currency#getSymbol(Locale):::Gets the symbol of this currency for the specified locale
Currency#getDefaultFractionDigits():::Gets the default number of fraction digits used with this currency
Currency#getNumericCode():::Returns the ISO 4217 numeric code of this currency.
Currency#getNumericCodeAsString():::Returns the 3 digit ISO 4217 numeric code of this currency as a String
Currency#getDisplayName():::Gets the name that is suitable for displaying this currency for the default Locale.Category#DISPLAY DISPLAY locale
Currency#getDisplayName(Locale):::Gets the name that is suitable for displaying this currency for the specified locale
Currency#toString():::Returns the ISO 4217 currency code of this currency.
Date#clone():::Return a copy of this object.
Date#UTC(int, int, int, int, int, int):::Determines the date and time based on the arguments
Date#parse(String):::Attempts to interpret the string s as a representation of a date and time
Date#getYear():::Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.
Date#setYear(int):::Sets the year of this Date object to be the specified value plus 1900
Date#getMonth():::Returns a number representing the month that contains or begins with the instant in time represented by this Date object
Date#setMonth(int):::Sets the month of this date to the specified value
Date#getDate():::Returns the day of the month represented by this Date object
Date#setDate(int):::Sets the day of the month of this Date object to the specified value
Date#getDay():::Returns the day of the week represented by this date
Date#getHours():::Returns the hour represented by this Date object
Date#setHours(int):::Sets the hour of this Date object to the specified value
Date#getMinutes():::Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone
Date#setMinutes(int):::Sets the minutes of this Date object to the specified value
Date#getSeconds():::Returns the number of seconds past the minute represented by this date
Date#setSeconds(int):::Sets the seconds of this Date to the specified value
Date#getTime():::Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object.
Date#setTime(long):::Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.
Date#before(Date):::Tests if this date is before the specified date.
Date#after(Date):::Tests if this date is after the specified date.
Date#equals(Object):::Compares two dates for equality
Date#getMillisOf(Date):::Returns the millisecond value of this Date object without affecting its internal state.
Date#compareTo(Date):::Compares two Dates for ordering.
Date#hashCode():::Returns a hash code value for this object
Date#toString():::Converts this Date object to a String of the form:  dow mon dd hh:mm:ss zzz yyyy where:<ul> <li>dow is the day of the week (Sun, Mon, Tue, Wed,     Thu, Fri, Sat)
Date#toLocaleString():::Creates a string representation of this Date object in an implementation-dependent form
Date#toGMTString():::Creates a string representation of this Date object of the form:  d mon yyyy hh:mm:ss GMT where:<ul> <li>d is the day of the month (1 through 31),     as one or two decimal digits
Date#getTimezoneOffset():::Returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this Date object
Date#from(Instant):::Obtains an instance of Date from an Instant object
Date#toInstant():::Converts this Date object to an Instant
Deque#addFirst(E):::Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
Deque#addLast(E):::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
Deque#offerFirst(E):::Inserts the specified element at the front of this deque unless it would violate capacity restrictions
Deque#offerLast(E):::Inserts the specified element at the end of this deque unless it would violate capacity restrictions
Deque#removeFirst():::Retrieves and removes the first element of this deque
Deque#removeLast():::Retrieves and removes the last element of this deque
Deque#pollFirst():::Retrieves and removes the first element of this deque, or returns null if this deque is empty.
Deque#pollLast():::Retrieves and removes the last element of this deque, or returns null if this deque is empty.
Deque#getFirst():::Retrieves, but does not remove, the first element of this deque
Deque#getLast():::Retrieves, but does not remove, the last element of this deque
Deque#peekFirst():::Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.
Deque#peekLast():::Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.
Deque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element from this deque
Deque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element from this deque
Deque#add(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
Deque#offer(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
Deque#remove():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)
Deque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
Deque#element():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)
Deque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
Deque#addAll(Collection):::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator
Deque#push(E):::Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
Deque#pop():::Pops an element from the stack represented by this deque
Deque#remove(Object):::Removes the first occurrence of the specified element from this deque
Deque#contains(Object):::Returns true if this deque contains the specified element
Deque#size():::Returns the number of elements in this deque.
Deque#iterator():::Returns an iterator over the elements in this deque in proper sequence
Deque#descendingIterator():::Returns an iterator over the elements in this deque in reverse sequential order
Dictionary#size():::Returns the number of entries (distinct keys) in this dictionary.
Dictionary#isEmpty():::Tests if this dictionary maps no keys to value
Dictionary#keys():::Returns an enumeration of the keys in this dictionary
Dictionary#elements():::Returns an enumeration of the values in this dictionary
Dictionary#get(Object):::Returns the value to which the key is mapped in this dictionary
Dictionary#put(K, V):::Maps the specified key to the specified value in this dictionary
Dictionary#remove(Object):::Removes the key (and its corresponding value) from this dictionary
DoubleSummaryStatistics#accept(double):::Records another value into the summary information.
DoubleSummaryStatistics#combine(DoubleSummaryStatistics):::Combines the state of another DoubleSummaryStatistics into this one.
DoubleSummaryStatistics#getCount():::Return the count of values recorded.
DoubleSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded
DoubleSummaryStatistics#getMin():::Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded
DoubleSummaryStatistics#getMax():::Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded
DoubleSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded
DoubleSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging
DualPivotQuicksort#sort(int[], int, int, int[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(long[], int, int, long[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(short[], int, int, short[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(char[], int, int, char[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(byte[], int, int):::Sorts the specified range of the array.
DualPivotQuicksort#sort(float[], int, int, float[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DualPivotQuicksort#sort(double[], int, int, double[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging
DuplicateFormatFlagsException#getFlags():::Returns the set of flags which contains a duplicate flag.
Enumeration#hasMoreElements():::Tests if this enumeration contains more elements.
Enumeration#nextElement():::Returns the next element of this enumeration if this enumeration object has at least one more element to provide.
Enumeration#asIterator():::Returns an Iterator that traverses the remaining elements covered by this enumeration
EnumMap#size():::Returns the number of key-value mappings in this map.
EnumMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.
EnumMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
EnumMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
EnumMap#put(K, V):::Associates the specified value with the specified key in this map
EnumMap#remove(Object):::Removes the mapping for this key from this map if present.
EnumMap#putAll(Map):::Copies all of the mappings from the specified map to this map
EnumMap#clear():::Removes all mappings from this map.
EnumMap#keySet():::Returns a Set view of the keys contained in this map
EnumMap#values():::Returns a Collection view of the values contained in this map
EnumMap#entrySet():::Returns a Set view of the mappings contained in this map
EnumMap#equals(Object):::Compares the specified object with this map for equality
EnumMap#hashCode():::Returns the hash code value for this map
EnumMap#clone():::Returns a shallow copy of this enum map
EnumSet#noneOf(Class):::Creates an empty enum set with the specified element type.
EnumSet#allOf(Class):::Creates an enum set containing all of the elements in the specified element type.
EnumSet#addAll():::Adds all of the elements from the appropriate enum type to this enum set, which is empty prior to the call.
EnumSet#copyOf(EnumSet):::Creates an enum set with the same element type as the specified enum set, initially containing the same elements (if any).
EnumSet#copyOf(Collection):::Creates an enum set initialized from the specified collection
EnumSet#complementOf(EnumSet):::Creates an enum set with the same element type as the specified enum set, initially containing all the elements of this type that are not contained in the specified set.
EnumSet#of(E):::Creates an enum set initially containing the specified element
EnumSet#of(E, E):::Creates an enum set initially containing the specified elements
EnumSet#of(E, E, E):::Creates an enum set initially containing the specified elements
EnumSet#of(E, E, E, E):::Creates an enum set initially containing the specified elements
EnumSet#of(E, E, E, E, E):::Creates an enum set initially containing the specified elements
EnumSet#of(E, E...):::Creates an enum set initially containing the specified elements
EnumSet#range(E, E):::Creates an enum set initially containing all of the elements in the range defined by the two specified endpoints
EnumSet#addRange(E, E):::Adds the specified range to this enum set, which is empty prior to the call.
EnumSet#clone():::Returns a copy of this set.
EnumSet#complement():::Complements the contents of this enum set.
EnumSet#typeCheck(E):::Throws an exception if e is not of the correct type for this enum set.
EnumSet#writeReplace():::Returns a  SerializationProxy representing the state of this instance.
EventListenerProxy#getListener():::Returns the listener associated with the proxy.
EventObject#getSource():::The object on which the Event initially occurred.
EventObject#toString():::Returns a String representation of this EventObject.
FormatFlagsConversionMismatchException#getFlags():::Returns the incompatible flag.
FormatFlagsConversionMismatchException#getConversion():::Returns the incompatible conversion.
Formattable#formatTo(Formatter, int, int, int):::Formats the object using the provided Formatter formatter.
Formatter#locale():::Returns the locale set by the construction of this formatter
Formatter#out():::Returns the destination for the output.
Formatter#toString():::Returns the result of invoking toString() on the destination for the output
Formatter#flush():::Flushes this formatter
Formatter#close():::Closes this formatter
Formatter#ioException():::Returns the IOException last thrown by this formatter's Appendable
Formatter#format(String, Object...):::Writes a formatted string to this object's destination using the specified format string and arguments
Formatter#format(Locale, String, Object...):::Writes a formatted string to this object's destination using the specified locale, format string, and arguments.
GregorianCalendar#setGregorianChange(Date):::Sets the GregorianCalendar change date
GregorianCalendar#getGregorianChange():::Gets the Gregorian Calendar change date
GregorianCalendar#isLeapYear(int):::Determines if the given year is a leap year
GregorianCalendar#getCalendarType():::Returns "gregory" as the calendar type.
GregorianCalendar#equals(Object):::Compares this GregorianCalendar to the specified Object
GregorianCalendar#hashCode():::Generates the hash code for this GregorianCalendar object.
GregorianCalendar#add(int, int):::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules
GregorianCalendar#roll(int, boolean):::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields
GregorianCalendar#roll(int, int):::Adds a signed amount to the specified calendar field without changing larger fields
GregorianCalendar#getMinimum(int):::Returns the minimum value for the given calendar field of this GregorianCalendar instance
GregorianCalendar#getMaximum(int):::Returns the maximum value for the given calendar field of this GregorianCalendar instance
GregorianCalendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance
GregorianCalendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance
GregorianCalendar#getActualMinimum(int):::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods
GregorianCalendar#getActualMaximum(int):::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods
GregorianCalendar#isWeekDateSupported():::Returns true indicating this GregorianCalendar supports week dates.
GregorianCalendar#getWeekYear():::Returns the week year represented by this GregorianCalendar
GregorianCalendar#setWeekDate(int, int, int):::Sets this GregorianCalendar to the date given by the date specifiers - weekYear, weekOfYear, and dayOfWeek
GregorianCalendar#getWeeksInWeekYear():::Returns the number of weeks in the week year represented by this GregorianCalendar
GregorianCalendar#computeFields():::Converts the time value (millisecond offset from the Epoch) to calendar field values
GregorianCalendar#computeTime():::Converts calendar field values to the time value (millisecond offset from the Epoch).
GregorianCalendar#toZonedDateTime():::Converts this object to a ZonedDateTime that represents the same point on the time-line as this GregorianCalendar
GregorianCalendar#from(ZonedDateTime):::Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object
HashMap#hash(Object):::Computes key.hashCode() and spreads (XORs) higher bits of hash to lower
HashMap#comparableClassFor(Object):::Returns x's Class if it is of the form "class C implements Comparable<C>", else null.
HashMap#compareComparables(Class, Object, Object):::Returns k.compareTo(x) if x matches kc (k's screened comparable class), else 0.
HashMap#tableSizeFor(int):::Returns a power of two size for the given target capacity.
HashMap#putMapEntries(Map, boolean):::Implements Map.putAll and Map constructor.
HashMap#size():::Returns the number of key-value mappings in this map.
HashMap#isEmpty():::Returns true if this map contains no key-value mappings.
HashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
HashMap#getNode(int, Object):::Implements Map.get and related methods.
HashMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
HashMap#put(K, V):::Associates the specified value with the specified key in this map
HashMap#putVal(int, K, V, boolean, boolean):::Implements Map.put and related methods.
HashMap#resize():::Initializes or doubles table size
HashMap#treeifyBin(Node[], int):::Replaces all linked nodes in bin at index for given hash unless table is too small, in which case resizes instead.
HashMap#putAll(Map):::Copies all of the mappings from the specified map to this map
HashMap#remove(Object):::Removes the mapping for the specified key from this map if present.
HashMap#removeNode(int, Object, Object, boolean, boolean):::Implements Map.remove and related methods.
HashMap#clear():::Removes all of the mappings from this map
HashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.
HashMap#keySet():::Returns a Set view of the keys contained in this map
HashMap#values():::Returns a Collection view of the values contained in this map
HashMap#entrySet():::Returns a Set view of the mappings contained in this map
HashMap#computeIfAbsent(K, Function):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the mapping function modifies this map during computation.
HashMap#computeIfPresent(K, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.
HashMap#compute(K, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.
HashMap#merge(K, V, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.
HashMap#clone():::Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned.
HashMap#reinitialize():::Reset to initial default state
HashMap.TreeNode#root():::Returns root of tree containing this node.
HashMap.TreeNode#moveRootToFront(Node[], TreeNode):::Ensures that the given root is the first node of its bin.
HashMap.TreeNode#find(int, Object, Class):::Finds the node starting at root p with the given hash and key
HashMap.TreeNode#getTreeNode(int, Object):::Calls find for root node.
HashMap.TreeNode#tieBreakOrder(Object, Object):::Tie-breaking utility for ordering insertions when equal hashCodes and non-comparable
HashMap.TreeNode#treeify(Node[]):::Forms tree of the nodes linked from this node.
HashMap.TreeNode#untreeify(HashMap):::Returns a list of non-TreeNodes replacing those linked from this node.
HashMap.TreeNode#putTreeVal(HashMap, Node[], int, K, V):::Tree version of putVal.
HashMap.TreeNode#removeTreeNode(HashMap, Node[], boolean):::Removes the given node, that must be present before this call
HashMap.TreeNode#split(HashMap, Node[], int, int):::Splits nodes in a tree bin into lower and upper tree bins, or untreeifies if now too small
HashMap.TreeNode#checkInvariants(TreeNode):::Recursive invariant check
HashSet#iterator():::Returns an iterator over the elements in this set
HashSet#size():::Returns the number of elements in this set (its cardinality).
HashSet#isEmpty():::Returns true if this set contains no elements.
HashSet#contains(Object):::Returns true if this set contains the specified element
HashSet#add(E):::Adds the specified element to this set if it is not already present
HashSet#remove(Object):::Removes the specified element from this set if it is present
HashSet#clear():::Removes all of the elements from this set
HashSet#clone():::Returns a shallow copy of this HashSet instance: the elements themselves are not cloned.
HashSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set
Hashtable#size():::Returns the number of keys in this hashtable.
Hashtable#isEmpty():::Tests if this hashtable maps no keys to values.
Hashtable#keys():::Returns an enumeration of the keys in this hashtable
Hashtable#elements():::Returns an enumeration of the values in this hashtable
Hashtable#contains(Object):::Tests if some key maps into the specified value in this hashtable
Hashtable#containsValue(Object):::Returns true if this hashtable maps one or more keys to this value
Hashtable#containsKey(Object):::Tests if the specified object is a key in this hashtable.
Hashtable#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
Hashtable#rehash():::Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently
Hashtable#put(K, V):::Maps the specified key to the specified value in this hashtable
Hashtable#remove(Object):::Removes the key (and its corresponding value) from this hashtable
Hashtable#putAll(Map):::Copies all of the mappings from the specified map to this hashtable
Hashtable#clear():::Clears this hashtable so that it contains no keys.
Hashtable#clone():::Creates a shallow copy of this hashtable
Hashtable#cloneHashtable():::Calls super.clone()
Hashtable#toString():::Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters " ,&nbsp;" (comma and space)
Hashtable#keySet():::Returns a Set view of the keys contained in this map
Hashtable#entrySet():::Returns a Set view of the mappings contained in this map
Hashtable#values():::Returns a Collection view of the values contained in this map
Hashtable#equals(Object):::Compares the specified Object with this Map for equality, as per the definition in the Map interface.
Hashtable#hashCode():::Returns the hash code value for this Map as per the definition in the Map interface.
Hashtable#computeIfAbsent(K, Function):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the mapping function modified this map during computation.
Hashtable#computeIfPresent(K, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.
Hashtable#compute(K, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.
Hashtable#merge(K, V, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.
Hashtable#writeHashtable(java.io.ObjectOutputStream):::Perform serialization of the Hashtable to an ObjectOutputStream
Hashtable#defaultWriteHashtable(java.io.ObjectOutputStream, int, float):::Called by Properties to write out a simulated threshold and loadfactor.
Hashtable#readHashtable(java.io.ObjectInputStream):::Perform deserialization of the Hashtable from an ObjectInputStream
IdentityHashMap#unmaskNull(Object):::Returns internal representation of null key back to caller as null.
IdentityHashMap#size():::Returns the number of key-value mappings in this identity hash map.
IdentityHashMap#isEmpty():::Returns true if this identity hash map contains no key-value mappings.
IdentityHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
IdentityHashMap#containsKey(Object):::Tests whether the specified object reference is a key in this identity hash map.
IdentityHashMap#containsValue(Object):::Tests whether the specified object reference is a value in this identity hash map.
IdentityHashMap#put(K, V):::Associates the specified value with the specified key in this identity hash map
IdentityHashMap#putAll(Map):::Copies all of the mappings from the specified map to this map
IdentityHashMap#remove(Object):::Removes the mapping for this key from this map if present.
IdentityHashMap#clear():::Removes all of the mappings from this map
IdentityHashMap#equals(Object):::Compares the specified object with this map for equality
IdentityHashMap#hashCode():::Returns the hash code value for this map
IdentityHashMap#clone():::Returns a shallow copy of this identity hash map: the keys and values themselves are not cloned.
IdentityHashMap#keySet():::Returns an identity-based set view of the keys contained in this map
IdentityHashMap#values():::Returns a Collection view of the values contained in this map
IdentityHashMap#entrySet():::Returns a Set view of the mappings contained in this map
IllegalFormatCodePointException#getCodePoint():::Returns the illegal code point as defined by Character#isValidCodePoint.
IllegalFormatConversionException#getConversion():::Returns the inapplicable conversion.
IllegalFormatConversionException#getArgumentClass():::Returns the class of the mismatched argument.
IllegalFormatFlagsException#getFlags():::Returns the set of flags which contains an illegal combination.
IllegalFormatPrecisionException#getPrecision():::Returns the precision
IllegalFormatWidthException#getWidth():::Returns the width
IllformedLocaleException#getErrorIndex():::Returns the index where the error was found
ImmutableCollections.SubList#fromSubList(SubList, int, int):::Constructs a sublist of another SubList.
ImmutableCollections.SubList#fromList(List, int, int):::Constructs a sublist of an arbitrary AbstractImmutableList, which is not a SubList itself.
IntSummaryStatistics#accept(int):::Records a new value into the summary information
IntSummaryStatistics#combine(IntSummaryStatistics):::Combines the state of another IntSummaryStatistics into this one.
IntSummaryStatistics#getCount():::Returns the count of values recorded.
IntSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded.
IntSummaryStatistics#getMin():::Returns the minimum value recorded, or Integer.MAX_VALUE if no values have been recorded.
IntSummaryStatistics#getMax():::Returns the maximum value recorded, or Integer.MIN_VALUE if no values have been recorded.
IntSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.
IntSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging
Iterator#hasNext():::Returns true if the iteration has more elements
Iterator#next():::Returns the next element in the iteration.
Iterator#remove():::Removes from the underlying collection the last element returned by this iterator (optional operation)
Iterator#forEachRemaining(Consumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
JapaneseImperialCalendar#getCalendarType():::Returns "japanese" as the calendar type of this JapaneseImperialCalendar.
JapaneseImperialCalendar#equals(Object):::Compares this JapaneseImperialCalendar to the specified Object
JapaneseImperialCalendar#hashCode():::Generates the hash code for this JapaneseImperialCalendar object.
JapaneseImperialCalendar#add(int, int):::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules
JapaneseImperialCalendar#roll(int, int):::Adds a signed amount to the specified calendar field without changing larger fields
JapaneseImperialCalendar#getMinimum(int):::Returns the minimum value for the given calendar field of this Calendar instance
JapaneseImperialCalendar#getMaximum(int):::Returns the maximum value for the given calendar field of this GregorianCalendar instance
JapaneseImperialCalendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance
JapaneseImperialCalendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance
JapaneseImperialCalendar#getActualMinimum(int):::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods.
JapaneseImperialCalendar#getActualMaximum(int):::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods
JapaneseImperialCalendar#computeFields():::Converts the time value (millisecond offset from the Epoch) to calendar field values
JapaneseImperialCalendar#computeTime():::Converts calendar field values to the time value (millisecond offset from the Epoch).
JumboEnumSet#iterator():::Returns an iterator over the elements contained in this set
JumboEnumSet#size():::Returns the number of elements in this set.
JumboEnumSet#isEmpty():::Returns true if this set contains no elements.
JumboEnumSet#contains(Object):::Returns true if this set contains the specified element.
JumboEnumSet#add(E):::Adds the specified element to this set if it is not already present.
JumboEnumSet#remove(Object):::Removes the specified element from this set if it is present.
JumboEnumSet#containsAll(Collection):::Returns true if this set contains all of the elements in the specified collection.
JumboEnumSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.
JumboEnumSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection.
JumboEnumSet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection.
JumboEnumSet#clear():::Removes all of the elements from this set.
JumboEnumSet#equals(Object):::Compares the specified object with this set for equality
KeyValueHolder#getKey():::Gets the key from this holder.
KeyValueHolder#getValue():::Gets the value from this holder.
KeyValueHolder#setValue(V):::Throws UnsupportedOperationException.
KeyValueHolder#equals(Object):::Compares the specified object with this entry for equality
KeyValueHolder#hashCode():::Returns the hash code value for this map entry
KeyValueHolder#toString():::Returns a String representation of this map entry
LinkedHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.
LinkedHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
LinkedHashMap#removeEldestEntry(Map.Entry):::Returns true if this map should remove its eldest entry
LinkedHashMap#keySet():::Returns a Set view of the keys contained in this map
LinkedHashMap#values():::Returns a Collection view of the values contained in this map
LinkedHashMap#entrySet():::Returns a Set view of the mappings contained in this map
LinkedHashSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set
LinkedList#linkLast(E):::Links e as last element.
LinkedList#linkBefore(E, Node):::Inserts element e before non-null Node succ.
LinkedList#unlink(Node):::Unlinks non-null node x.
LinkedList#getFirst():::Returns the first element in this list.
LinkedList#getLast():::Returns the last element in this list.
LinkedList#removeFirst():::Removes and returns the first element from this list.
LinkedList#removeLast():::Removes and returns the last element from this list.
LinkedList#addFirst(E):::Inserts the specified element at the beginning of this list.
LinkedList#addLast(E):::Appends the specified element to the end of this list
LinkedList#contains(Object):::Returns true if this list contains the specified element
LinkedList#size():::Returns the number of elements in this list.
LinkedList#add(E):::Appends the specified element to the end of this list
LinkedList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present
LinkedList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator
LinkedList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position
LinkedList#clear():::Removes all of the elements from this list
LinkedList#get(int):::Returns the element at the specified position in this list.
LinkedList#set(int, E):::Replaces the element at the specified position in this list with the specified element.
LinkedList#add(int, E):::Inserts the specified element at the specified position in this list
LinkedList#remove(int):::Removes the element at the specified position in this list
LinkedList#node(int):::Returns the (non-null) Node at the specified element index.
LinkedList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
LinkedList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
LinkedList#peek():::Retrieves, but does not remove, the head (first element) of this list.
LinkedList#element():::Retrieves, but does not remove, the head (first element) of this list.
LinkedList#poll():::Retrieves and removes the head (first element) of this list.
LinkedList#remove():::Retrieves and removes the head (first element) of this list.
LinkedList#offer(E):::Adds the specified element as the tail (last element) of this list.
LinkedList#offerFirst(E):::Inserts the specified element at the front of this list.
LinkedList#offerLast(E):::Inserts the specified element at the end of this list.
LinkedList#peekFirst():::Retrieves, but does not remove, the first element of this list, or returns null if this list is empty.
LinkedList#peekLast():::Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.
LinkedList#pollFirst():::Retrieves and removes the first element of this list, or returns null if this list is empty.
LinkedList#pollLast():::Retrieves and removes the last element of this list, or returns null if this list is empty.
LinkedList#push(E):::Pushes an element onto the stack represented by this list
LinkedList#pop():::Pops an element from the stack represented by this list
LinkedList#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element in this list (when traversing the list from head to tail)
LinkedList#removeLastOccurrence(Object):::Removes the last occurrence of the specified element in this list (when traversing the list from head to tail)
LinkedList#listIterator(int):::Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list
LinkedList#clone():::Returns a shallow copy of this LinkedList
LinkedList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
LinkedList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
LinkedList#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list
List#size():::Returns the number of elements in this list
List#isEmpty():::Returns true if this list contains no elements.
List#contains(Object):::Returns true if this list contains the specified element
List#iterator():::Returns an iterator over the elements in this list in proper sequence.
List#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
List#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
List#add(E):::Appends the specified element to the end of this list (optional operation)
List#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present (optional operation)
List#containsAll(Collection):::Returns true if this list contains all of the elements of the specified collection.
List#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation)
List#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list at the specified position (optional operation)
List#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection (optional operation).
List#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection (optional operation)
List#replaceAll(UnaryOperator):::Replaces each element of this list with the result of applying the operator to that element
List#sort(Comparator):::Sorts this list according to the order induced by the specified Comparator
List#clear():::Removes all of the elements from this list (optional operation)
List#equals(Object):::Compares the specified object with this list for equality
List#hashCode():::Returns the hash code value for this list
List#get(int):::Returns the element at the specified position in this list.
List#set(int, E):::Replaces the element at the specified position in this list with the specified element (optional operation).
List#add(int, E):::Inserts the specified element at the specified position in this list (optional operation)
List#remove(int):::Removes the element at the specified position in this list (optional operation)
List#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
List#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
List#listIterator():::Returns a list iterator over the elements in this list (in proper sequence).
List#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
List#subList(int, int):::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive
List#spliterator():::Creates a Spliterator over the elements in this list
List#of():::Returns an unmodifiable list containing zero elements
List#of(E):::Returns an unmodifiable list containing one element
List#of(E, E):::Returns an unmodifiable list containing two elements
List#of(E, E, E):::Returns an unmodifiable list containing three elements
List#of(E, E, E, E):::Returns an unmodifiable list containing four elements
List#of(E, E, E, E, E):::Returns an unmodifiable list containing five elements
List#of(E, E, E, E, E, E):::Returns an unmodifiable list containing six elements
List#of(E, E, E, E, E, E, E):::Returns an unmodifiable list containing seven elements
List#of(E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing eight elements
List#of(E, E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing nine elements
List#of(E, E, E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing ten elements
List#of(E...):::Returns an unmodifiable list containing an arbitrary number of elements
List#copyOf(Collection):::Returns an unmodifiable List containing the elements of the given Collection, in its iteration order
ListIterator#hasNext():::Returns true if this list iterator has more elements when traversing the list in the forward direction
ListIterator#next():::Returns the next element in the list and advances the cursor position
ListIterator#hasPrevious():::Returns true if this list iterator has more elements when traversing the list in the reverse direction
ListIterator#previous():::Returns the previous element in the list and moves the cursor position backwards
ListIterator#nextIndex():::Returns the index of the element that would be returned by a subsequent call to #next
ListIterator#previousIndex():::Returns the index of the element that would be returned by a subsequent call to #previous
ListIterator#remove():::Removes from the list the last element that was returned by #next or #previous (optional operation)
ListIterator#set(E):::Replaces the last element returned by #next or #previous with the specified element (optional operation)
ListIterator#add(E):::Inserts the specified element into the list (optional operation)
ListResourceBundle#getKeys():::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
ListResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle.
ListResourceBundle#getContents():::Returns an array in which each item is a pair of objects in an Object array
Locale#getInstance(String, String, String):::Returns a Locale constructed from the given language, country and variant
Locale#getDefault():::Gets the current value of the default locale for this instance of the Java Virtual Machine
Locale#getDefault(Locale.Category):::Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine
Locale#setDefault(Locale):::Sets the default locale for this instance of the Java Virtual Machine
Locale#setDefault(Locale.Category, Locale):::Sets the default locale for the specified Category for this instance of the Java Virtual Machine
Locale#getAvailableLocales():::Returns an array of all installed locales
Locale#getISOCountries():::Returns a list of all 2-letter country codes defined in ISO 3166
Locale#getISOCountries(IsoCountryCode):::Returns a Set of ISO3166 country codes for the specified type.
Locale#getISOLanguages():::Returns a list of all 2-letter language codes defined in ISO 639
Locale#getLanguage():::Returns the language code of this Locale
Locale#getScript():::Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code
Locale#getCountry():::Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.
Locale#getVariant():::Returns the variant code for this locale.
Locale#hasExtensions():::Returns true if this Locale has any  extensions.
Locale#stripExtensions():::Returns a copy of this Locale with no  extensions
Locale#getExtension(char):::Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key
Locale#getExtensionKeys():::Returns the set of extension keys associated with this locale, or the empty set if it has no extensions
Locale#getUnicodeLocaleAttributes():::Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes
Locale#getUnicodeLocaleType(String):::Returns the Unicode locale type associated with the specified Unicode locale key for this locale
Locale#getUnicodeLocaleKeys():::Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none
Locale#getBaseLocale():::Package locale method returning the Locale's BaseLocale, used by ResourceBundle
Locale#getLocaleExtensions():::Package private method returning the Locale's LocaleExtensions, used by ResourceBundle.
Locale#toString():::Returns a string representation of this Locale object, consisting of language, country, variant, script, and extensions as below:  language + "_" + country + "_" + (variant + "_#" | "#") + script + "_" + extensions   Language is always lower case, country is always upper case, script is always title case, and extensions are always lower case
Locale#toLanguageTag():::Returns a well-formed IETF BCP 47 language tag representing this locale
Locale#forLanguageTag(String):::Returns a locale for the specified IETF BCP 47 language tag string
Locale#getISO3Language():::Returns a three-letter abbreviation of this locale's language
Locale#getISO3Country():::Returns a three-letter abbreviation for this locale's country
Locale#getDisplayLanguage():::Returns a name for the locale's language that is appropriate for display to the user
Locale#getDisplayLanguage(Locale):::Returns a name for the locale's language that is appropriate for display to the user
Locale#getDisplayScript():::Returns a name for the locale's script that is appropriate for display to the user
Locale#getDisplayScript(Locale):::Returns a name for the locale's script that is appropriate for display to the user
Locale#getDisplayCountry():::Returns a name for the locale's country that is appropriate for display to the user
Locale#getDisplayCountry(Locale):::Returns a name for the locale's country that is appropriate for display to the user
Locale#getDisplayVariant():::Returns a name for the locale's variant code that is appropriate for display to the user
Locale#getDisplayVariant(Locale):::Returns a name for the locale's variant code that is appropriate for display to the user
Locale#getDisplayName():::Returns a name for the locale that is appropriate for display to the user
Locale#getDisplayName(Locale):::Returns a name for the locale that is appropriate for display to the user
Locale#clone():::Overrides Cloneable.
Locale#hashCode():::Override hashCode
Locale#equals(Object):::Returns true if this Locale is equal to another object
Locale.Builder#setLocale(Locale):::Resets the Builder to match the provided locale
Locale.Builder#setLanguageTag(String):::Resets the Builder to match the provided IETF BCP 47 language tag
Locale.Builder#setLanguage(String):::Sets the language
Locale.Builder#setScript(String):::Sets the script
Locale.Builder#setRegion(String):::Sets the region
Locale.Builder#setVariant(String):::Sets the variant
Locale.Builder#setExtension(char, String):::Sets the extension for the given key
Locale.Builder#setUnicodeLocaleKeyword(String, String):::Sets the Unicode locale keyword type for the given key
Locale.Builder#addUnicodeLocaleAttribute(String):::Adds a unicode locale attribute, if not already present, otherwise has no effect
Locale.Builder#removeUnicodeLocaleAttribute(String):::Removes a unicode locale attribute, if present, otherwise has no effect
Locale.Builder#clear():::Resets the builder to its initial, empty state.
Locale.Builder#clearExtensions():::Resets the extensions to their initial, empty state
Locale.Builder#build():::Returns an instance of Locale created from the fields set on this builder
Locale.LanguageRange#getRange():::Returns the language range of this LanguageRange.
Locale.LanguageRange#getWeight():::Returns the weight of this LanguageRange.
Locale.LanguageRange#parse(String):::Parses the given ranges to generate a Language Priority List
Locale.LanguageRange#parse(String, Map>):::Parses the given ranges to generate a Language Priority List, and then customizes the list using the given map
Locale.LanguageRange#mapEquivalents(List, Map>):::Generates a new customized Language Priority List using the given priorityList and map
Locale.LanguageRange#hashCode():::Returns a hash code value for the object.
Locale.LanguageRange#equals(Object):::Compares this object to the specified object
Locale.LanguageRange#toString():::Returns an informative string representation of this LanguageRange object, consisting of language range and weight if the range is weighted and the weight is less than the max weight.
Locale#filter(List, Collection, FilteringMode):::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647
Locale#filter(List, Collection):::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647
Locale#filterTags(List, Collection, FilteringMode):::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647
Locale#filterTags(List, Collection):::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647
Locale#lookup(List, Collection):::Returns a Locale instance for the best-matching language tag using the lookup mechanism defined in RFC 4647.
Locale#lookupTag(List, Collection):::Returns the best-matching language tag using the lookup mechanism defined in RFC 4647
LocaleISOData#computeISO3166_1Alpha3Countries():::This method computes a set of ISO3166-1 alpha-3 country codes from existing isoCountryTable.
LongSummaryStatistics#accept(int):::Records a new int value into the summary information.
LongSummaryStatistics#accept(long):::Records a new long value into the summary information.
LongSummaryStatistics#combine(LongSummaryStatistics):::Combines the state of another LongSummaryStatistics into this one.
LongSummaryStatistics#getCount():::Returns the count of values recorded.
LongSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded.
LongSummaryStatistics#getMin():::Returns the minimum value recorded, or Long.MAX_VALUE if no values have been recorded.
LongSummaryStatistics#getMax():::Returns the maximum value recorded, or Long.MIN_VALUE if no values have been recorded
LongSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.
LongSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging
Map#size():::Returns the number of key-value mappings in this map
Map#isEmpty():::Returns true if this map contains no key-value mappings.
Map#containsKey(Object):::Returns true if this map contains a mapping for the specified key
Map#containsValue(Object):::Returns true if this map maps one or more keys to the specified value
Map#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
Map#put(K, V):::Associates the specified value with the specified key in this map (optional operation)
Map#remove(Object):::Removes the mapping for a key from this map if it is present (optional operation)
Map#putAll(Map):::Copies all of the mappings from the specified map to this map (optional operation)
Map#clear():::Removes all of the mappings from this map (optional operation)
Map#keySet():::Returns a Set view of the keys contained in this map
Map#values():::Returns a Collection view of the values contained in this map
Map#entrySet():::Returns a Set view of the mappings contained in this map
Map.Entry#getKey():::Returns the key corresponding to this entry.
Map.Entry#getValue():::Returns the value corresponding to this entry
Map.Entry#setValue(V):::Replaces the value corresponding to this entry with the specified value (optional operation)
Map.Entry#equals(Object):::Compares the specified object with this entry for equality
Map.Entry#hashCode():::Returns the hash code value for this map entry
Map.Entry#comparingByKey():::Returns a comparator that compares Map.Entry in natural order on key
Map.Entry#comparingByValue():::Returns a comparator that compares Map.Entry in natural order on value
Map.Entry#comparingByKey(Comparator):::Returns a comparator that compares Map.Entry by key using the given Comparator
Map.Entry#comparingByValue(Comparator):::Returns a comparator that compares Map.Entry by value using the given Comparator
Map#equals(Object):::Compares the specified object with this map for equality
Map#hashCode():::Returns the hash code value for this map
Map#getOrDefault(Object, V):::Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.
Map#forEach(BiConsumer):::Performs the given action for each entry in this map until all entries have been processed or the action throws an exception
Map#replaceAll(BiFunction):::Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception
Map#putIfAbsent(K, V):::If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.
Map#remove(Object, Object):::Removes the entry for the specified key only if it is currently mapped to the specified value.
Map#replace(K, V, V):::Replaces the entry for the specified key only if currently mapped to the specified value.
Map#replace(K, V):::Replaces the entry for the specified key only if it is currently mapped to some value.
Map#computeIfAbsent(K, Function):::If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null
Map#computeIfPresent(K, BiFunction):::If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value
Map#compute(K, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)
Map#merge(K, V, BiFunction):::If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value
Map#of():::Returns an unmodifiable map containing zero mappings
Map#of(K, V):::Returns an unmodifiable map containing a single mapping
Map#of(K, V, K, V):::Returns an unmodifiable map containing two mappings
Map#of(K, V, K, V, K, V):::Returns an unmodifiable map containing three mappings
Map#of(K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing four mappings
Map#of(K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing five mappings
Map#of(K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing six mappings
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing seven mappings
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing eight mappings
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing nine mappings
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing ten mappings
Map#ofEntries(Entry...):::Returns an unmodifiable map containing keys and values extracted from the given entries
Map#entry(K, V):::Returns an unmodifiable Entry containing the given key and value
Map#copyOf(Map):::Returns an unmodifiable Map containing the entries of the given Map
MissingFormatArgumentException#getFormatSpecifier():::Returns the unmatched format specifier.
MissingFormatWidthException#getFormatSpecifier():::Returns the format specifier which does not have a width.
MissingResourceException#getClassName():::Gets parameter passed by constructor.
MissingResourceException#getKey():::Gets parameter passed by constructor.
NavigableMap#lowerEntry(K):::Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.
NavigableMap#lowerKey(K):::Returns the greatest key strictly less than the given key, or null if there is no such key.
NavigableMap#floorEntry(K):::Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.
NavigableMap#floorKey(K):::Returns the greatest key less than or equal to the given key, or null if there is no such key.
NavigableMap#ceilingEntry(K):::Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.
NavigableMap#ceilingKey(K):::Returns the least key greater than or equal to the given key, or null if there is no such key.
NavigableMap#higherEntry(K):::Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.
NavigableMap#higherKey(K):::Returns the least key strictly greater than the given key, or null if there is no such key.
NavigableMap#firstEntry():::Returns a key-value mapping associated with the least key in this map, or null if the map is empty.
NavigableMap#lastEntry():::Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
NavigableMap#pollFirstEntry():::Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.
NavigableMap#pollLastEntry():::Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
NavigableMap#descendingMap():::Returns a reverse order view of the mappings contained in this map
NavigableMap#navigableKeySet():::Returns a NavigableSet view of the keys contained in this map
NavigableMap#descendingKeySet():::Returns a reverse order NavigableSet view of the keys contained in this map
NavigableMap#subMap(K, boolean, K, boolean):::Returns a view of the portion of this map whose keys range from fromKey to toKey
NavigableMap#headMap(K, boolean):::Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey
NavigableMap#tailMap(K, boolean):::Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey
NavigableMap#subMap(K, K):::Equivalent to {@code subMap(fromKey, true, toKey, false).
NavigableMap#headMap(K):::Equivalent to {@code headMap(toKey, false).
NavigableMap#tailMap(K):::Equivalent to {@code tailMap(fromKey, true).
NavigableSet#lower(E):::Returns the greatest element in this set strictly less than the given element, or null if there is no such element.
NavigableSet#floor(E):::Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.
NavigableSet#ceiling(E):::Returns the least element in this set greater than or equal to the given element, or null if there is no such element.
NavigableSet#higher(E):::Returns the least element in this set strictly greater than the given element, or null if there is no such element.
NavigableSet#pollFirst():::Retrieves and removes the first (lowest) element, or returns null if this set is empty.
NavigableSet#pollLast():::Retrieves and removes the last (highest) element, or returns null if this set is empty.
NavigableSet#iterator():::Returns an iterator over the elements in this set, in ascending order.
NavigableSet#descendingSet():::Returns a reverse order view of the elements contained in this set
NavigableSet#descendingIterator():::Returns an iterator over the elements in this set, in descending order
NavigableSet#subSet(E, boolean, E, boolean):::Returns a view of the portion of this set whose elements range from fromElement to toElement
NavigableSet#headSet(E, boolean):::Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement
NavigableSet#tailSet(E, boolean):::Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement
NavigableSet#subSet(E, E):::Equivalent to {@code subSet(fromElement, true, toElement, false).
NavigableSet#headSet(E):::Equivalent to {@code headSet(toElement, false).
NavigableSet#tailSet(E):::Equivalent to {@code tailSet(fromElement, true).
Objects#equals(Object, Object):::Returns true if the arguments are equal to each other and false otherwise
Objects#deepEquals(Object, Object):::Returns true if the arguments are deeply equal to each other and false otherwise
Objects#hashCode(Object):::Returns the hash code of a non-null argument and 0 for a null argument.
Objects#hash(Object...):::Generates a hash code for a sequence of input values
Objects#toString(Object):::Returns the result of calling toString for a non-null argument and "null" for a null argument.
Objects#toString(Object, String):::Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.
Objects#compare(T, T, Comparator):::Returns 0 if the arguments are identical and c.compare(a, b) otherwise
Objects#requireNonNull(T):::Checks that the specified object reference is not null
Objects#requireNonNull(T, String):::Checks that the specified object reference is not null and throws a customized NullPointerException if it is
Objects#isNull(Object):::Returns true if the provided reference is null otherwise returns false.
Objects#nonNull(Object):::Returns true if the provided reference is non-null otherwise returns false.
Objects#requireNonNullElse(T, T):::Returns the first argument if it is non-null and otherwise returns the non-null second argument.
Objects#requireNonNullElseGet(T, Supplier):::Returns the first argument if it is non-null and otherwise returns the non-null value of supplier.get().
Objects#requireNonNull(T, Supplier):::Checks that the specified object reference is not null and throws a customized NullPointerException if it is
Objects#checkIndex(int, int):::Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive)
Objects#checkFromToIndex(int, int, int):::Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)
Objects#checkFromIndexSize(int, int, int):::Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)
Observable#addObserver(Observer):::Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set
Observable#deleteObserver(Observer):::Deletes an observer from the set of observers of this object
Observable#notifyObservers():::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
Observable#notifyObservers(Object):::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
Observable#deleteObservers():::Clears the observer list so that this object no longer has any observers.
Observable#setChanged():::Marks this Observable object as having been changed; the hasChanged method will now return true.
Observable#clearChanged():::Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false
Observable#hasChanged():::Tests if this object has changed.
Observable#countObservers():::Returns the number of observers of this Observable object.
Observer#update(Observable, Object):::This method is called whenever the observed object is changed
Optional#empty():::Returns an empty Optional instance
Optional#of(T):::Returns an Optional describing the given non-null value.
Optional#ofNullable(T):::Returns an Optional describing the given value, if non-null, otherwise returns an empty Optional.
Optional#get():::If a value is present, returns the value, otherwise throws NoSuchElementException.
Optional#isPresent():::If a value is present, returns true, otherwise false.
Optional#isEmpty():::If a value is  not present, returns true, otherwise false.
Optional#ifPresent(Consumer):::If a value is present, performs the given action with the value, otherwise does nothing.
Optional#ifPresentOrElse(Consumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
Optional#filter(Predicate):::If a value is present, and the value matches the given predicate, returns an Optional describing the value, otherwise returns an empty Optional.
Optional#map(Function):::If a value is present, returns an Optional describing (as if by #ofNullable) the result of applying the given mapping function to the value, otherwise returns an empty Optional
Optional#flatMap(Function>):::If a value is present, returns the result of applying the given Optional-bearing mapping function to the value, otherwise returns an empty Optional
Optional#or(Supplier>):::If a value is present, returns an Optional describing the value, otherwise returns an Optional produced by the supplying function.
Optional#stream():::If a value is present, returns a sequential Stream containing only that value, otherwise returns an empty Stream.
Optional#orElse(T):::If a value is present, returns the value, otherwise returns other.
Optional#orElseGet(Supplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
Optional#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.
Optional#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
Optional#equals(Object):::Indicates whether some other object is "equal to" this Optional
Optional#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
Optional#toString():::Returns a non-empty string representation of this Optional suitable for debugging
OptionalDouble#empty():::Returns an empty OptionalDouble instance
OptionalDouble#of(double):::Returns an OptionalDouble describing the given value.
OptionalDouble#getAsDouble():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalDouble#isPresent():::If a value is present, returns true, otherwise false.
OptionalDouble#isEmpty():::If a value is not present, returns true, otherwise false.
OptionalDouble#ifPresent(DoubleConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.
OptionalDouble#ifPresentOrElse(DoubleConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
OptionalDouble#stream():::If a value is present, returns a sequential DoubleStream containing only that value, otherwise returns an empty DoubleStream.
OptionalDouble#orElse(double):::If a value is present, returns the value, otherwise returns other.
OptionalDouble#orElseGet(DoubleSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
OptionalDouble#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalDouble#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
OptionalDouble#equals(Object):::Indicates whether some other object is "equal to" this OptionalDouble
OptionalDouble#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
OptionalDouble#toString():::Returns a non-empty string representation of this OptionalDouble suitable for debugging
OptionalInt#empty():::Returns an empty OptionalInt instance
OptionalInt#of(int):::Returns an OptionalInt describing the given value.
OptionalInt#getAsInt():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalInt#isPresent():::If a value is present, returns true, otherwise false.
OptionalInt#isEmpty():::If a value is not present, returns true, otherwise false.
OptionalInt#ifPresent(IntConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.
OptionalInt#ifPresentOrElse(IntConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
OptionalInt#stream():::If a value is present, returns a sequential IntStream containing only that value, otherwise returns an empty IntStream.
OptionalInt#orElse(int):::If a value is present, returns the value, otherwise returns other.
OptionalInt#orElseGet(IntSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
OptionalInt#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalInt#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
OptionalInt#equals(Object):::Indicates whether some other object is "equal to" this OptionalInt
OptionalInt#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
OptionalInt#toString():::Returns a non-empty string representation of this OptionalInt suitable for debugging
OptionalLong#empty():::Returns an empty OptionalLong instance
OptionalLong#of(long):::Returns an OptionalLong describing the given value.
OptionalLong#getAsLong():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalLong#isPresent():::If a value is present, returns true, otherwise false.
OptionalLong#isEmpty():::If a value is not present, returns true, otherwise false.
OptionalLong#ifPresent(LongConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.
OptionalLong#ifPresentOrElse(LongConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
OptionalLong#stream():::If a value is present, returns a sequential LongStream containing only that value, otherwise returns an empty LongStream.
OptionalLong#orElse(long):::If a value is present, returns the value, otherwise returns other.
OptionalLong#orElseGet(LongSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
OptionalLong#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.
OptionalLong#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
OptionalLong#equals(Object):::Indicates whether some other object is "equal to" this OptionalLong
OptionalLong#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
OptionalLong#toString():::Returns a non-empty string representation of this OptionalLong suitable for debugging
PrimitiveIterator#forEachRemaining(T_CONS):::Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception
PrimitiveIterator.OfInt#nextInt():::Returns the next int element in the iteration.
PrimitiveIterator.OfInt#forEachRemaining(IntConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
PrimitiveIterator.OfLong#nextLong():::Returns the next long element in the iteration.
PrimitiveIterator.OfLong#forEachRemaining(LongConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
PrimitiveIterator.OfDouble#nextDouble():::Returns the next double element in the iteration.
PrimitiveIterator.OfDouble#forEachRemaining(DoubleConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
PriorityQueue#add(E):::Inserts the specified element into this priority queue.
PriorityQueue#offer(E):::Inserts the specified element into this priority queue.
PriorityQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present
PriorityQueue#removeEq(Object):::Identity-based version for use in Itr.remove.
PriorityQueue#contains(Object):::Returns true if this queue contains the specified element
PriorityQueue#toArray():::Returns an array containing all of the elements in this queue
PriorityQueue#toArray(T[]):::Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
PriorityQueue#iterator():::Returns an iterator over the elements in this queue
PriorityQueue#clear():::Removes all of the elements from this priority queue
PriorityQueue#removeAt(int):::Removes the ith element from queue
PriorityQueue#comparator():::Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the Comparable natural ordering of its elements.
PriorityQueue#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this queue
Properties#setProperty(String, String):::Calls the Hashtable method put
Properties#load(Reader):::Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format
Properties#load(InputStream):::Reads a property list (key and element pairs) from the input byte stream
Properties#save(OutputStream, String):::Calls the store(OutputStream out, String comments) method and suppresses IOExceptions that were thrown.
Properties#store(Writer, String):::Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the #load(java.io.Reader) load(Reader) method
Properties#store(OutputStream, String):::Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the #load(InputStream) load(InputStream) method
Properties#loadFromXML(InputStream):::Loads all of the properties represented by the XML document on the specified input stream into this properties table
Properties#storeToXML(OutputStream, String):::Emits an XML document representing all of the properties contained in this table
Properties#storeToXML(OutputStream, String, String):::Emits an XML document representing all of the properties contained in this table, using the specified encoding
Properties#storeToXML(OutputStream, String, Charset):::Emits an XML document representing all of the properties contained in this table, using the specified encoding
Properties#getProperty(String):::Searches for the property with the specified key in this property list
Properties#getProperty(String, String):::Searches for the property with the specified key in this property list
Properties#propertyNames():::Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.
Properties#stringPropertyNames():::Returns an unmodifiable set of keys from this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list
Properties#list(PrintStream):::Prints this property list out to the specified output stream
PropertyPermission#implies(Permission):::Checks if this PropertyPermission object "implies" the specified permission
PropertyPermission#equals(Object):::Checks two PropertyPermission objects for equality
PropertyPermission#hashCode():::Returns the hash code value for this object
PropertyPermission#getActions(int):::Return the canonical string representation of the actions
PropertyPermission#getActions():::Returns the "canonical string representation" of the actions
PropertyPermission#getMask():::Return the current action mask
PropertyPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing PropertyPermission objects.
PropertyPermissionCollection#add(Permission):::Adds a permission to the PropertyPermissions
PropertyPermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".
PropertyPermissionCollection#elements():::Returns an enumeration of all the PropertyPermission objects in the container.
PropertyResourceBundle#getKeys():::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
PropertyResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle.
Queue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.
Queue#offer(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions
Queue#remove():::Retrieves and removes the head of this queue
Queue#poll():::Retrieves and removes the head of this queue, or returns null if this queue is empty.
Queue#element():::Retrieves, but does not remove, the head of this queue
Queue#peek():::Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
Random#setSeed(long):::Sets the seed of this random number generator using a single long seed
Random#next(int):::Generates the next pseudorandom number
Random#nextBytes(byte[]):::Generates random bytes and places them into a user-supplied byte array
Random#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators
Random#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators
Random#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.
Random#nextInt():::Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence
Random#nextInt(int):::Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence
Random#nextLong():::Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence
Random#nextBoolean():::Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence
Random#nextFloat():::Returns the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence
Random#nextDouble():::Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence
Random#nextGaussian():::Returns the next pseudorandom, Gaussian ("normally") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence
Random#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values
Random#ints():::Returns an effectively unlimited stream of pseudorandom int values
Random#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)
Random#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)
Random#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values
Random#longs():::Returns an effectively unlimited stream of pseudorandom long values
Random#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive)
Random#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive)
Random#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive)
Random#doubles():::Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive)
Random#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)
Random#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)
RegularEnumSet#iterator():::Returns an iterator over the elements contained in this set
RegularEnumSet#size():::Returns the number of elements in this set.
RegularEnumSet#isEmpty():::Returns true if this set contains no elements.
RegularEnumSet#contains(Object):::Returns true if this set contains the specified element.
RegularEnumSet#add(E):::Adds the specified element to this set if it is not already present.
RegularEnumSet#remove(Object):::Removes the specified element from this set if it is present.
RegularEnumSet#containsAll(Collection):::Returns true if this set contains all of the elements in the specified collection.
RegularEnumSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.
RegularEnumSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection.
RegularEnumSet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection.
RegularEnumSet#clear():::Removes all of the elements from this set.
RegularEnumSet#equals(Object):::Compares the specified object with this set for equality
ResourceBundle#getBaseBundleName():::Returns the base name of this bundle, if known, or null if unknown
ResourceBundle#getString(String):::Gets a string for the given key from this resource bundle or one of its parents
ResourceBundle#getStringArray(String):::Gets a string array for the given key from this resource bundle or one of its parents
ResourceBundle#getObject(String):::Gets an object for the given key from this resource bundle or one of its parents
ResourceBundle#getLocale():::Returns the locale of this resource bundle
ResourceBundle#setParent(ResourceBundle):::Sets the parent bundle of this bundle
ResourceBundle#getBundle(String):::Gets a resource bundle using the specified base name, the default locale, and the caller module
ResourceBundle#getBundle(String, Control):::Returns a resource bundle using the specified base name, the default locale and the specified control
ResourceBundle#getBundle(String, Locale):::Gets a resource bundle using the specified base name and locale, and the caller module
ResourceBundle#getBundle(String, Module):::Gets a resource bundle using the specified base name and the default locale on behalf of the specified module
ResourceBundle#getBundle(String, Locale, Module):::Gets a resource bundle using the specified base name and locale on behalf of the specified module
ResourceBundle#getBundle(String, Locale, Control):::Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader
ResourceBundle#getBundle(String, Locale, ClassLoader):::Gets a resource bundle using the specified base name, locale, and class loader
ResourceBundle#getBundle(String, Locale, ClassLoader, Control):::Returns a resource bundle using the specified base name, target locale, class loader and control
ResourceBundle#clearCache():::Removes all resource bundles from the cache that have been loaded by the caller's module.
ResourceBundle#clearCache(ClassLoader):::Removes all resource bundles from the cache that have been loaded by the given class loader.
ResourceBundle#handleGetObject(String):::Gets an object for the given key from this resource bundle
ResourceBundle#getKeys():::Returns an enumeration of the keys.
ResourceBundle#containsKey(String):::Determines whether the given key is contained in this ResourceBundle or its parent bundles.
ResourceBundle#keySet():::Returns a Set of all keys contained in this ResourceBundle and its parent bundles.
ResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle
ResourceBundle.Control#getControl(List):::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats
ResourceBundle.Control#getNoFallbackControl(List):::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats and the Control#getFallbackLocale(String, Locale) getFallbackLocale method returns null
ResourceBundle.Control#getFormats(String):::Returns a List of Strings containing formats to be used to load resource bundles for the given baseName
ResourceBundle.Control#getCandidateLocales(String, Locale):::Returns a List of Locales as candidate locales for baseName and locale
ResourceBundle.Control#getFallbackLocale(String, Locale):::Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method
ResourceBundle.Control#newBundle(String, Locale, String, ClassLoader, boolean):::Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary
ResourceBundle.Control#getTimeToLive(String, Locale):::Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control
ResourceBundle.Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle, long):::Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria
ResourceBundle.Control#toBundleName(String, Locale):::Converts the given baseName and locale to the bundle name
ResourceBundle.Control#toResourceName(String, String):::Converts the given bundleName to the form required by the ClassLoader#getResource ClassLoader.getResource method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix
Scanner#close():::Closes this scanner
Scanner#ioException():::Returns the IOException last thrown by this Scanner's underlying Readable
Scanner#delimiter():::Returns the Pattern this Scanner is currently using to match delimiters.
Scanner#useDelimiter(Pattern):::Sets this scanner's delimiting pattern to the specified pattern.
Scanner#useDelimiter(String):::Sets this scanner's delimiting pattern to a pattern constructed from the specified String
Scanner#locale():::Returns this scanner's locale
Scanner#useLocale(Locale):::Sets this scanner's locale to the specified locale
Scanner#radix():::Returns this scanner's default radix
Scanner#useRadix(int):::Sets this scanner's default radix to the specified radix
Scanner#match():::Returns the match result of the last scanning operation performed by this scanner
Scanner#toString():::Returns the string representation of this Scanner
Scanner#hasNext():::Returns true if this scanner has another token in its input
Scanner#next():::Finds and returns the next complete token from this scanner
Scanner#remove():::The remove operation is not supported by this implementation of Iterator.
Scanner#hasNext(String):::Returns true if the next token matches the pattern constructed from the specified string
Scanner#next(String):::Returns the next token if it matches the pattern constructed from the specified string
Scanner#hasNext(Pattern):::Returns true if the next complete token matches the specified pattern
Scanner#next(Pattern):::Returns the next token if it matches the specified pattern
Scanner#hasNextLine():::Returns true if there is another line in the input of this scanner
Scanner#nextLine():::Advances this scanner past the current line and returns the input that was skipped
Scanner#findInLine(String):::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters
Scanner#findInLine(Pattern):::Attempts to find the next occurrence of the specified pattern ignoring delimiters
Scanner#findWithinHorizon(String, int):::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters
Scanner#findWithinHorizon(Pattern, int):::Attempts to find the next occurrence of the specified pattern
Scanner#skip(Pattern):::Skips input that matches the specified pattern, ignoring delimiters
Scanner#skip(String):::Skips input that matches a pattern constructed from the specified string
Scanner#hasNextBoolean():::Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string "true|false"
Scanner#nextBoolean():::Scans the next token of the input into a boolean value and returns that value
Scanner#hasNextByte():::Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the #nextByte method
Scanner#hasNextByte(int):::Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the #nextByte method
Scanner#nextByte():::Scans the next token of the input as a byte
Scanner#nextByte(int):::Scans the next token of the input as a byte
Scanner#hasNextShort():::Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the #nextShort method
Scanner#hasNextShort(int):::Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the #nextShort method
Scanner#nextShort():::Scans the next token of the input as a short
Scanner#nextShort(int):::Scans the next token of the input as a short
Scanner#hasNextInt():::Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the #nextInt method
Scanner#hasNextInt(int):::Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the #nextInt method
Scanner#nextInt():::Scans the next token of the input as an int
Scanner#nextInt(int):::Scans the next token of the input as an int
Scanner#hasNextLong():::Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the #nextLong method
Scanner#hasNextLong(int):::Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the #nextLong method
Scanner#nextLong():::Scans the next token of the input as a long
Scanner#nextLong(int):::Scans the next token of the input as a long
Scanner#hasNextFloat():::Returns true if the next token in this scanner's input can be interpreted as a float value using the #nextFloat method
Scanner#nextFloat():::Scans the next token of the input as a float
Scanner#hasNextDouble():::Returns true if the next token in this scanner's input can be interpreted as a double value using the #nextDouble method
Scanner#nextDouble():::Scans the next token of the input as a double
Scanner#hasNextBigInteger():::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the #nextBigInteger method
Scanner#hasNextBigInteger(int):::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the #nextBigInteger method
Scanner#nextBigInteger():::Scans the next token of the input as a java.math.BigInteger BigInteger
Scanner#nextBigInteger(int):::Scans the next token of the input as a java.math.BigInteger BigInteger
Scanner#hasNextBigDecimal():::Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the #nextBigDecimal method
Scanner#nextBigDecimal():::Scans the next token of the input as a java.math.BigDecimal BigDecimal
Scanner#reset():::Resets this scanner
Scanner#tokens():::Returns a stream of delimiter-separated tokens from this scanner
Scanner#findAll(Pattern):::Returns a stream of match results from this scanner
Scanner#findAll(String):::Returns a stream of match results that match the provided pattern string
ServiceLoader.Provider#type():::Returns the provider type
ServiceLoader.Provider#get():::Returns an instance of the provider.
ServiceLoader#iterator():::Returns an iterator to lazily load and instantiate the available providers of this loader's service
ServiceLoader#stream():::Returns a stream to lazily load available providers of this loader's service
ServiceLoader#load(Class, ClassLoader, Module):::Creates a new service loader for the given service type, class loader, and caller.
ServiceLoader#load(Class, ClassLoader):::Creates a new service loader for the given service
ServiceLoader#load(Class):::Creates a new service loader for the given service type, using the current thread's java.lang.Thread#getContextClassLoader context class loader
ServiceLoader#loadInstalled(Class):::Creates a new service loader for the given service type, using the ClassLoader#getPlatformClassLoader() platform class loader
ServiceLoader#load(ModuleLayer, Class):::Creates a new service loader for the given service type to load service providers from modules in the given module layer and its ancestors
ServiceLoader#findFirst():::Load the first available service provider of this loader's service
ServiceLoader#reload():::Clear this loader's provider cache so that all providers will be reloaded
ServiceLoader#toString():::Returns a string describing this service.
Set#size():::Returns the number of elements in this set (its cardinality)
Set#isEmpty():::Returns true if this set contains no elements.
Set#contains(Object):::Returns true if this set contains the specified element
Set#iterator():::Returns an iterator over the elements in this set
Set#toArray():::Returns an array containing all of the elements in this set
Set#toArray(T[]):::Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array
Set#add(E):::Adds the specified element to this set if it is not already present (optional operation)
Set#remove(Object):::Removes the specified element from this set if it is present (optional operation)
Set#containsAll(Collection):::Returns true if this set contains all of the elements of the specified collection
Set#addAll(Collection):::Adds all of the elements in the specified collection to this set if they're not already present (optional operation)
Set#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection (optional operation)
Set#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection (optional operation)
Set#clear():::Removes all of the elements from this set (optional operation)
Set#equals(Object):::Compares the specified object with this set for equality
Set#hashCode():::Returns the hash code value for this set
Set#spliterator():::Creates a Spliterator over the elements in this set
Set#of():::Returns an unmodifiable set containing zero elements
Set#of(E):::Returns an unmodifiable set containing one element
Set#of(E, E):::Returns an unmodifiable set containing two elements
Set#of(E, E, E):::Returns an unmodifiable set containing three elements
Set#of(E, E, E, E):::Returns an unmodifiable set containing four elements
Set#of(E, E, E, E, E):::Returns an unmodifiable set containing five elements
Set#of(E, E, E, E, E, E):::Returns an unmodifiable set containing six elements
Set#of(E, E, E, E, E, E, E):::Returns an unmodifiable set containing seven elements
Set#of(E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing eight elements
Set#of(E, E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing nine elements
Set#of(E, E, E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing ten elements
Set#of(E...):::Returns an unmodifiable set containing an arbitrary number of elements
Set#copyOf(Collection):::Returns an unmodifiable Set containing the elements of the given Collection
SimpleTimeZone#setStartYear(int):::Sets the daylight saving time starting year.
SimpleTimeZone#setStartRule(int, int, int, int):::Sets the daylight saving time start rule
SimpleTimeZone#setStartRule(int, int, int):::Sets the daylight saving time start rule to a fixed date within a month
SimpleTimeZone#setStartRule(int, int, int, int, boolean):::Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.
SimpleTimeZone#setEndRule(int, int, int, int):::Sets the daylight saving time end rule
SimpleTimeZone#setEndRule(int, int, int):::Sets the daylight saving time end rule to a fixed date within a month
SimpleTimeZone#setEndRule(int, int, int, int, boolean):::Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.
SimpleTimeZone#getOffset(long):::Returns the offset of this time zone from UTC at the given time
SimpleTimeZone#getOffset(int, int, int, int, int, int):::Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time
SimpleTimeZone#getRawOffset():::Gets the GMT offset for this time zone.
SimpleTimeZone#setRawOffset(int):::Sets the base time zone offset to GMT
SimpleTimeZone#setDSTSavings(int):::Sets the amount of time in milliseconds that the clock is advanced during daylight saving time.
SimpleTimeZone#getDSTSavings():::Returns the amount of time in milliseconds that the clock is advanced during daylight saving time.
SimpleTimeZone#useDaylightTime():::Queries if this time zone uses daylight saving time.
SimpleTimeZone#observesDaylightTime():::Returns true if this SimpleTimeZone observes Daylight Saving Time
SimpleTimeZone#inDaylightTime(Date):::Queries if the given date is in daylight saving time.
SimpleTimeZone#clone():::Returns a clone of this SimpleTimeZone instance.
SimpleTimeZone#hashCode():::Generates the hash code for the SimpleDateFormat object.
SimpleTimeZone#equals(Object):::Compares the equality of two SimpleTimeZone objects.
SimpleTimeZone#hasSameRules(TimeZone):::Returns true if this zone has the same rules and offset as another zone.
SimpleTimeZone#toString():::Returns a string representation of this time zone.
SortedMap#comparator():::Returns the comparator used to order the keys in this map, or null if this map uses the Comparable natural ordering of its keys.
SortedMap#subMap(K, K):::Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive
SortedMap#headMap(K):::Returns a view of the portion of this map whose keys are strictly less than toKey
SortedMap#tailMap(K):::Returns a view of the portion of this map whose keys are greater than or equal to fromKey
SortedMap#firstKey():::Returns the first (lowest) key currently in this map.
SortedMap#lastKey():::Returns the last (highest) key currently in this map.
SortedMap#keySet():::Returns a Set view of the keys contained in this map
SortedMap#values():::Returns a Collection view of the values contained in this map
SortedMap#entrySet():::Returns a Set view of the mappings contained in this map
SortedSet#comparator():::Returns the comparator used to order the elements in this set, or null if this set uses the Comparable natural ordering of its elements.
SortedSet#subSet(E, E):::Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive
SortedSet#headSet(E):::Returns a view of the portion of this set whose elements are strictly less than toElement
SortedSet#tailSet(E):::Returns a view of the portion of this set whose elements are greater than or equal to fromElement
SortedSet#first():::Returns the first (lowest) element currently in this set.
SortedSet#last():::Returns the last (highest) element currently in this set.
SortedSet#spliterator():::Creates a Spliterator over the elements in this sorted set
Spliterator#tryAdvance(Consumer):::If a remaining element exists, performs the given action on it, returning true; else returns false
Spliterator#forEachRemaining(Consumer):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
Spliterator#trySplit():::If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator
Spliterator#estimateSize():::Returns an estimate of the number of elements that would be encountered by a #forEachRemaining traversal, or returns Long#MAX_VALUE if infinite, unknown, or too expensive to compute
Spliterator#getExactSizeIfKnown():::Convenience method that returns #estimateSize() if this Spliterator is #SIZED, else -1.
Spliterator#characteristics():::Returns a set of characteristics of this Spliterator and its elements
Spliterator#hasCharacteristics(int):::Returns true if this Spliterator's #characteristics contain all of the given characteristics.
Spliterator#getComparator():::If this Spliterator's source is #SORTED by a Comparator, returns that Comparator
Spliterator.OfPrimitive#tryAdvance(T_CONS):::If a remaining element exists, performs the given action on it, returning true; else returns false
Spliterator.OfPrimitive#forEachRemaining(T_CONS):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
Spliterators#emptySpliterator():::Creates an empty Spliterator  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
Spliterators#emptyIntSpliterator():::Creates an empty Spliterator.OfInt  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
Spliterators#emptyLongSpliterator():::Creates an empty Spliterator.OfLong  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
Spliterators#emptyDoubleSpliterator():::Creates an empty Spliterator.OfDouble  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
Spliterators#spliterator(Object[], int):::Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(Object[], int, int, int):::Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(int[], int):::Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(int[], int, int, int):::Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(long[], int):::Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(long[], int, int, int):::Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(double[], int):::Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(double[], int, int, int):::Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics
Spliterators#spliterator(Collection, int):::Creates a Spliterator using the given collection's java.util.Collection#iterator() as the source of elements, and reporting its java.util.Collection#size() as its initial size
Spliterators#spliterator(Iterator, long, int):::Creates a Spliterator using a given Iterator as the source of elements, and with a given initially reported size
Spliterators#spliteratorUnknownSize(Iterator, int):::Creates a Spliterator using a given Iterator as the source of elements, with no initial size estimate
Spliterators#spliterator(PrimitiveIterator.OfInt, long, int):::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, and with a given initially reported size
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfInt, int):::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, with no initial size estimate
Spliterators#spliterator(PrimitiveIterator.OfLong, long, int):::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, and with a given initially reported size
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfLong, int):::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, with no initial size estimate
Spliterators#spliterator(PrimitiveIterator.OfDouble, long, int):::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, and with a given initially reported size
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfDouble, int):::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, with no initial size estimate
Spliterators#iterator(Spliterator):::Creates an Iterator from a Spliterator
Spliterators#iterator(Spliterator.OfInt):::Creates an PrimitiveIterator.OfInt from a Spliterator.OfInt
Spliterators#iterator(Spliterator.OfLong):::Creates an PrimitiveIterator.OfLong from a Spliterator.OfLong
Spliterators#iterator(Spliterator.OfDouble):::Creates an PrimitiveIterator.OfDouble from a Spliterator.OfDouble
Spliterators.AbstractSpliterator#trySplit():::  This implementation permits limited parallelism.
Spliterators.AbstractIntSpliterator#trySplit():::  This implementation permits limited parallelism.
Spliterators.AbstractLongSpliterator#trySplit():::  This implementation permits limited parallelism.
Spliterators.AbstractDoubleSpliterator#trySplit():::  This implementation permits limited parallelism.
SplittableRandom#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators
SplittableRandom#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators
SplittableRandom#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.
SplittableRandom#split():::Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance
SplittableRandom#nextBytes(byte[]):::Fills a user-supplied byte array with generated pseudorandom bytes.
SplittableRandom#nextInt():::Returns a pseudorandom int value.
SplittableRandom#nextInt(int):::Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
SplittableRandom#nextInt(int, int):::Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).
SplittableRandom#nextLong():::Returns a pseudorandom long value.
SplittableRandom#nextLong(long):::Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
SplittableRandom#nextLong(long, long):::Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
SplittableRandom#nextDouble():::Returns a pseudorandom double value between zero (inclusive) and one (exclusive).
SplittableRandom#nextDouble(double):::Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).
SplittableRandom#nextDouble(double, double):::Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
SplittableRandom#nextBoolean():::Returns a pseudorandom boolean value.
SplittableRandom#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it.
SplittableRandom#ints():::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it.
SplittableRandom#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it.
SplittableRandom#longs():::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it.
SplittableRandom#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
SplittableRandom#doubles():::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
SplittableRandom#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
SplittableRandom#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
Stack#push(E):::Pushes an item onto the top of this stack
Stack#pop():::Removes the object at the top of this stack and returns that object as the value of this function.
Stack#peek():::Looks at the object at the top of this stack without removing it from the stack.
Stack#empty():::Tests if this stack is empty.
Stack#search(Object):::Returns the 1-based position where an object is on this stack
StringJoiner#setEmptyValue(CharSequence):::Sets the sequence of characters to be used when determining the string representation of this StringJoiner and no elements have been added yet, that is, when it is empty
StringJoiner#toString():::Returns the current value, consisting of the prefix, the values added so far separated by the delimiter, and the suffix, unless no elements have been added in which case, the prefix + suffix or the emptyValue characters are returned.
StringJoiner#add(CharSequence):::Adds a copy of the given CharSequence value as the next element of the StringJoiner value
StringJoiner#merge(StringJoiner):::Adds the contents of the given StringJoiner without prefix and suffix as the next element if it is non-empty
StringJoiner#length():::Returns the length of the String representation of this StringJoiner
StringTokenizer#hasMoreTokens():::Tests if there are more tokens available from this tokenizer's string
StringTokenizer#nextToken():::Returns the next token from this string tokenizer.
StringTokenizer#nextToken(String):::Returns the next token in this string tokenizer's string
StringTokenizer#hasMoreElements():::Returns the same value as the hasMoreTokens method
StringTokenizer#nextElement():::Returns the same value as the nextToken method, except that its declared return value is Object rather than String
StringTokenizer#countTokens():::Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception
Timer#schedule(TimerTask, long):::Schedules the specified task for execution after the specified delay.
Timer#schedule(TimerTask, Date):::Schedules the specified task for execution at the specified time
Timer#schedule(TimerTask, long, long):::Schedules the specified task for repeated fixed-delay execution, beginning after the specified delay
Timer#schedule(TimerTask, Date, long):::Schedules the specified task for repeated fixed-delay execution, beginning at the specified time
Timer#scheduleAtFixedRate(TimerTask, long, long):::Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay
Timer#scheduleAtFixedRate(TimerTask, Date, long):::Schedules the specified task for repeated fixed-rate execution, beginning at the specified time
Timer#cancel():::Terminates this timer, discarding any currently scheduled tasks
Timer#purge():::Removes all cancelled tasks from this timer's task queue
TaskQueue#size():::Returns the number of tasks currently on the queue.
TaskQueue#add(TimerTask):::Adds a new task to the priority queue.
TaskQueue#getMin():::Return the "head task" of the priority queue
TaskQueue#get(int):::Return the ith task in the priority queue, where i ranges from 1 (the head task, which is returned by getMin) to the number of tasks on the queue, inclusive.
TaskQueue#removeMin():::Remove the head task from the priority queue.
TaskQueue#quickRemove(int):::Removes the ith element from queue without regard for maintaining the heap invariant
TaskQueue#rescheduleMin(long):::Sets the nextExecutionTime associated with the head task to the specified value, and adjusts priority queue accordingly.
TaskQueue#isEmpty():::Returns true if the priority queue contains no elements.
TaskQueue#clear():::Removes all elements from the priority queue.
TaskQueue#heapify():::Establishes the heap invariant (described above) in the entire tree, assuming nothing about the order of the elements prior to the call.
TimerTask#run():::The action to be performed by this timer task.
TimerTask#cancel():::Cancels this timer task
TimerTask#scheduledExecutionTime():::Returns the scheduled execution time of the most recent actual execution of this task
TimeZone#getOffset(int, int, int, int, int, int):::Gets the time zone offset, for current date, modified in case of daylight savings
TimeZone#getOffset(long):::Returns the offset of this time zone from UTC at the specified date
TimeZone#getOffsets(long, int[]):::Gets the raw GMT offset and the amount of daylight saving of this time zone at the given time.
TimeZone#setRawOffset(int):::Sets the base time zone offset to GMT
TimeZone#getRawOffset():::Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone
TimeZone#getID():::Gets the ID of this time zone.
TimeZone#setID(String):::Sets the time zone ID
TimeZone#getDisplayName():::Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale
TimeZone#getDisplayName(Locale):::Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale
TimeZone#getDisplayName(boolean, int):::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale
TimeZone#getDisplayName(boolean, int, Locale):::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the specified locale
TimeZone#getDSTSavings():::Returns the amount of time to be added to local standard time to get local wall clock time
TimeZone#useDaylightTime():::Queries if this TimeZone uses Daylight Saving Time
TimeZone#observesDaylightTime():::Returns true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time
TimeZone#inDaylightTime(Date):::Queries if the given date is in Daylight Saving Time in this time zone.
TimeZone#getTimeZone(String):::Gets the TimeZone for the given ID.
TimeZone#getTimeZone(ZoneId):::Gets the TimeZone for the given zoneId.
TimeZone#toZoneId():::Converts this TimeZone object to a ZoneId.
TimeZone#getAvailableIDs(int):::Gets the available IDs according to the given time zone offset in milliseconds.
TimeZone#getAvailableIDs():::Gets all the available IDs supported.
TimeZone#getDefault():::Gets the default TimeZone of the Java virtual machine
TimeZone#getDefaultRef():::Returns the reference to the default TimeZone object
TimeZone#setDefault(TimeZone):::Sets the TimeZone that is returned by the getDefault method
TimeZone#hasSameRules(TimeZone):::Returns true if this zone has the same rule and offset as another zone
TimeZone#clone():::Creates a copy of this TimeZone.
TimSort#sort(T[], int, int, Comparator, T[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible
TreeMap#size():::Returns the number of key-value mappings in this map.
TreeMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
TreeMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value
TreeMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
TreeMap#putAll(Map):::Copies all of the mappings from the specified map to this map
TreeMap#getEntry(Object):::Returns this map's entry for the given key, or null if the map does not contain an entry for the key.
TreeMap#getEntryUsingComparator(Object):::Version of getEntry using comparator
TreeMap#getCeilingEntry(K):::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists (i.e., the greatest key in the Tree is less than the specified key), returns null.
TreeMap#getFloorEntry(K):::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the greatest key less than the specified key; if no such entry exists, returns null.
TreeMap#getHigherEntry(K):::Gets the entry for the least key greater than the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists returns null.
TreeMap#getLowerEntry(K):::Returns the entry for the greatest key less than the specified key; if no such entry exists (i.e., the least key in the Tree is greater than the specified key), returns null.
TreeMap#put(K, V):::Associates the specified value with the specified key in this map
TreeMap#remove(Object):::Removes the mapping for this key from this TreeMap if present.
TreeMap#clear():::Removes all of the mappings from this map
TreeMap#clone():::Returns a shallow copy of this TreeMap instance
TreeMap#keySet():::Returns a Set view of the keys contained in this map
TreeMap#values():::Returns a Collection view of the values contained in this map
TreeMap#entrySet():::Returns a Set view of the mappings contained in this map
TreeMap#compare(Object, Object):::Compares two keys using the correct comparison method for this TreeMap.
TreeMap#valEquals(Object, Object):::Test two values for equality
TreeMap#exportEntry(TreeMap.Entry):::Return SimpleImmutableEntry for entry, or null if null
TreeMap#keyOrNull(TreeMap.Entry):::Return key for entry, or null if null
TreeMap#key(Entry):::Returns the key corresponding to the specified Entry.
TreeMap.NavigableSubMap#absHighFence():::Returns the absolute high fence for ascending traversal
TreeMap.NavigableSubMap#absLowFence():::Return the absolute low fence for descending traversal
TreeMap.NavigableSubMap#keyIterator():::Returns ascending iterator from the perspective of this submap
TreeMap.NavigableSubMap#descendingKeyIterator():::Returns descending iterator from the perspective of this submap
TreeMap.Entry#getKey():::Returns the key.
TreeMap.Entry#getValue():::Returns the value associated with the key.
TreeMap.Entry#setValue(V):::Replaces the value currently associated with the key with the given value.
TreeMap#getFirstEntry():::Returns the first Entry in the TreeMap (according to the TreeMap's key-sort function)
TreeMap#getLastEntry():::Returns the last Entry in the TreeMap (according to the TreeMap's key-sort function)
TreeMap#successor(Entry):::Returns the successor of the specified Entry, or null if no such.
TreeMap#predecessor(Entry):::Returns the predecessor of the specified Entry, or null if no such.
TreeMap#readTreeSet(int, java.io.ObjectInputStream, V):::Intended to be called only from TreeSet.readObject
TreeMap#addAllForTreeSet(SortedSet, V):::Intended to be called only from TreeSet.addAll
TreeMap#keySpliteratorFor(NavigableMap):::Currently, we support Spliterator-based versions only for the full map, in either plain of descending form, otherwise relying on defaults because size estimation for submaps would dominate costs
TreeSet#iterator():::Returns an iterator over the elements in this set in ascending order.
TreeSet#descendingIterator():::Returns an iterator over the elements in this set in descending order.
TreeSet#size():::Returns the number of elements in this set (its cardinality).
TreeSet#isEmpty():::Returns true if this set contains no elements.
TreeSet#contains(Object):::Returns true if this set contains the specified element
TreeSet#add(E):::Adds the specified element to this set if it is not already present
TreeSet#remove(Object):::Removes the specified element from this set if it is present
TreeSet#clear():::Removes all of the elements from this set
TreeSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.
TreeSet#clone():::Returns a shallow copy of this TreeSet instance
TreeSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set
Tripwire#trip(Class, String):::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message
UnknownFormatConversionException#getConversion():::Returns the unknown conversion.
UnknownFormatFlagsException#getFlags():::Returns the set of flags which contains an unknown flag.
UUID#randomUUID():::Static factory to retrieve a type 4 (pseudo randomly generated) UUID
UUID#nameUUIDFromBytes(byte[]):::Static factory to retrieve a type 3 (name based) UUID based on the specified byte array.
UUID#fromString(String):::Creates a UUID from the string standard representation as described in the #toString method.
UUID#getLeastSignificantBits():::Returns the least significant 64 bits of this UUID's 128 bit value.
UUID#getMostSignificantBits():::Returns the most significant 64 bits of this UUID's 128 bit value.
UUID#version():::The version number associated with this UUID
UUID#variant():::The variant number associated with this UUID
UUID#timestamp():::The timestamp value associated with this UUID
UUID#clockSequence():::The clock sequence value associated with this UUID
UUID#node():::The node value associated with this UUID
UUID#toString():::Returns a String object representing this UUID
UUID#hashCode():::Returns a hash code for this UUID.
UUID#equals(Object):::Compares this object to the specified object
UUID#compareTo(UUID):::Compares this UUID with the specified UUID
Vector#copyInto(Object[]):::Copies the components of this vector into the specified array
Vector#trimToSize():::Trims the capacity of this vector to be the vector's current size
Vector#ensureCapacity(int):::Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument
Vector#setSize(int):::Sets the size of this vector
Vector#capacity():::Returns the current capacity of this vector.
Vector#size():::Returns the number of components in this vector.
Vector#isEmpty():::Tests if this vector has no components.
Vector#elements():::Returns an enumeration of the components of this vector
Vector#contains(Object):::Returns true if this vector contains the specified element
Vector#indexOf(Object):::Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element
Vector#indexOf(Object, int):::Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found
Vector#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element
Vector#lastIndexOf(Object, int):::Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found
Vector#elementAt(int):::Returns the component at the specified index
Vector#firstElement():::Returns the first component (the item at index 0) of this vector.
Vector#lastElement():::Returns the last component of the vector.
Vector#setElementAt(E, int):::Sets the component at the specified index of this vector to be the specified object
Vector#removeElementAt(int):::Deletes the component at the specified index
Vector#insertElementAt(E, int):::Inserts the specified object as a component in this vector at the specified index
Vector#addElement(E):::Adds the specified component to the end of this vector, increasing its size by one
Vector#removeElement(Object):::Removes the first (lowest-indexed) occurrence of the argument from this vector
Vector#removeAllElements():::Removes all components from this vector and sets its size to zero
Vector#clone():::Returns a clone of this vector
Vector#toArray():::Returns an array containing all of the elements in this Vector in the correct order.
Vector#toArray(T[]):::Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array
Vector#get(int):::Returns the element at the specified position in this Vector.
Vector#set(int, E):::Replaces the element at the specified position in this Vector with the specified element.
Vector#add(E):::Appends the specified element to the end of this Vector.
Vector#remove(Object):::Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged
Vector#add(int, E):::Inserts the specified element at the specified position in this Vector
Vector#remove(int):::Removes the element at the specified position in this Vector
Vector#clear():::Removes all of the elements from this Vector
Vector#containsAll(Collection):::Returns true if this Vector contains all of the elements in the specified Collection.
Vector#addAll(Collection):::Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator
Vector#removeAll(Collection):::Removes from this Vector all of its elements that are contained in the specified Collection.
Vector#retainAll(Collection):::Retains only the elements in this Vector that are contained in the specified Collection
Vector#addAll(int, Collection):::Inserts all of the elements in the specified Collection into this Vector at the specified position
Vector#equals(Object):::Compares the specified Object with this Vector for equality
Vector#hashCode():::Returns the hash code value for this Vector.
Vector#toString():::Returns a string representation of this Vector, containing the String representation of each element.
Vector#subList(int, int):::Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive
Vector#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
Vector#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
Vector#listIterator():::Returns a list iterator over the elements in this list (in proper sequence)
Vector#iterator():::Returns an iterator over the elements in this list in proper sequence
Vector#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list
WeakHashMap#unmaskNull(Object):::Returns internal representation of null key back to caller as null.
WeakHashMap#hash(Object):::Retrieve object hash code and applies a supplemental hash function to the result hash, which defends against poor quality hash functions
WeakHashMap#size():::Returns the number of key-value mappings in this map
WeakHashMap#isEmpty():::Returns true if this map contains no key-value mappings
WeakHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
WeakHashMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.
WeakHashMap#getEntry(Object):::Returns the entry associated with the specified key in this map
WeakHashMap#put(K, V):::Associates the specified value with the specified key in this map
WeakHashMap#resize(int):::Rehashes the contents of this map into a new array with a larger capacity
WeakHashMap#putAll(Map):::Copies all of the mappings from the specified map to this map
WeakHashMap#remove(Object):::Removes the mapping for a key from this weak hash map if it is present
WeakHashMap#removeMapping(Object):::Special version of remove needed by Entry set
WeakHashMap#clear():::Removes all of the mappings from this map
WeakHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.
WeakHashMap#keySet():::Returns a Set view of the keys contained in this map
WeakHashMap#values():::Returns a Collection view of the values contained in this map
WeakHashMap#entrySet():::Returns a Set view of the mappings contained in this map

AbstractCollection#iterator():::Returns an iterator over the elements contained in this collection.:::
AbstractCollection#toString():::Returns a string representation of this collection:::it->iterator->if->it->hasNext->return->sb->new->StringBuilder->sb->append->for
AbstractList#add(E):::Appends the specified element to the end of this list (optional operation):::size->add->return
AbstractList#clear():::Removes all of the elements from this list (optional operation):::size->removeRange
AbstractList#iterator():::Returns an iterator over the elements in this list in proper sequence.:::return->new->Itr
AbstractList#equals(Object):::Compares the specified object with this list for equality:::if->return->if->return->e1->listIterator->e2->listIterator->while->e1->hasNext->e2->hasNext->o1->e1->next->o2->e2->next->if->o1->equals->return->return->e1->hasNext->e2->hasNext
AbstractList#hashCode():::Returns the hash code value for this list.:::hashCode->foreach->e->hashCode->return
AbstractList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive:::it->listIterator->for->i->n
AbstractMap#equals(Object):::Compares the specified object with this map for equality:::if->return->if->return->m->if->m->size->size->return->try->foreach->entrySet->key->e->getKey->value->e->getValue->if->if->m->get->m->containsKey->return->else->if->value->m->get->equals->return->catch->return->return->finally->return
AbstractMap#hashCode():::Returns the hash code value for this map:::h->foreach->entrySet->entry->hashCode->return
AbstractMap#toString():::Returns a string representation of this map:::i->entrySet->iterator->if->i->hasNext->return->sb->new->StringBuilder->sb->append->for
AbstractMap#clone():::Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.:::result->super->clone->return
AbstractMap.SimpleEntry#getKey():::Returns the key corresponding to this entry.:::return
AbstractMap.SimpleEntry#getValue():::Returns the value corresponding to this entry.:::return
AbstractMap.SimpleEntry#setValue(V):::Replaces the value corresponding to this entry with the specified value.:::oldValue->return
AbstractMap.SimpleEntry#equals(Object):::Compares the specified object with this entry for equality:::if->return->e->return->e->getKey->eq->e->getValue->eq
AbstractMap.SimpleEntry#hashCode():::Returns the hash code value for this map entry:::return->key->hashCode->value->hashCode
AbstractMap.SimpleEntry#toString():::Returns a String representation of this map entry:::return
AbstractMap.SimpleImmutableEntry#getKey():::Returns the key corresponding to this entry.:::return
AbstractMap.SimpleImmutableEntry#getValue():::Returns the value corresponding to this entry.:::return
AbstractMap.SimpleImmutableEntry#setValue(V):::Replaces the value corresponding to this entry with the specified value (optional operation):::throw->new->UnsupportedOperationException
AbstractMap.SimpleImmutableEntry#equals(Object):::Compares the specified object with this entry for equality:::if->return->e->return->e->getKey->eq->e->getValue->eq
AbstractMap.SimpleImmutableEntry#hashCode():::Returns the hash code value for this map entry:::return->key->hashCode->value->hashCode
AbstractMap.SimpleImmutableEntry#toString():::Returns a String representation of this map entry:::return
AbstractQueue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available:::if->offer->return->else->throw->new->IllegalStateException
AbstractQueue#remove():::Retrieves and removes the head of this queue:::x->poll->if->return->else->throw->new->NoSuchElementException
AbstractQueue#element():::Retrieves, but does not remove, the head of this queue:::x->peek->if->return->else->throw->new->NoSuchElementException
AbstractQueue#clear():::Removes all of the elements from this queue:::while->poll
AbstractQueue#addAll(Collection):::Adds all of the elements in the specified collection to this queue:::if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->modified->foreach->if->add->return
AbstractSequentialList#get(int):::Returns the element at the specified position in this list:::try->return->listIterator->next->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#set(int, E):::Replaces the element at the specified position in this list with the specified element (optional operation):::try->e->listIterator->oldVal->e->next->e->set->return->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#add(int, E):::Inserts the specified element at the specified position in this list (optional operation):::try->listIterator->add->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#remove(int):::Removes the element at the specified position in this list (optional operation):::try->e->listIterator->outCast->e->next->e->remove->return->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list at the specified position (optional operation):::try->modified->e1->listIterator->foreach->e1->add->return->catch->throw->new->IndexOutOfBoundsException->finally
AbstractSequentialList#iterator():::Returns an iterator over the elements in this list (in proper sequence).  This implementation merely returns a list iterator over the list.:::return->listIterator
AbstractSequentialList#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence).:::
AbstractSet#equals(Object):::Compares the specified object with this set for equality:::if->return->if->return->c->if->c->size->size->return->try->return->containsAll->catch->return->finally
AbstractSet#hashCode():::Returns the hash code value for this set:::h->i->iterator->while->i->hasNext->obj->i->next->if->obj->hashCode->return
AbstractSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection (optional operation):::Objects->requireNonNull->modified->if->size->c->size->foreach->remove->else->for->i->iterator->i->hasNext->return
ArrayDeque#inc(int, int):::Circularly increments i, mod modulus:::if->return
ArrayDeque#dec(int, int):::Circularly decrements i, mod modulus:::if->return
ArrayDeque#inc(int, int, int):::Circularly adds the given distance to index i, mod modulus:::if->return
ArrayDeque#sub(int, int, int):::Subtracts j from i, mod modulus:::if->return
ArrayDeque#elementAt(Object[], int):::Returns element at array index i:::return
ArrayDeque#nonNullElementAt(Object[], int):::A version of elementAt that checks for null elements:::e->if->throw->new->ConcurrentModificationException->return
ArrayDeque#addFirst(E):::Inserts the specified element at the front of this deque.:::if->throw->new->NullPointerException->es->dec->if->grow
ArrayDeque#addLast(E):::Inserts the specified element at the end of this deque:::if->throw->new->NullPointerException->es->if->inc->grow
ArrayDeque#addAll(Collection):::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator.:::s->needed->if->size->c->size->grow->copyElements->return->size
ArrayDeque#offerFirst(E):::Inserts the specified element at the front of this deque.:::addFirst->return
ArrayDeque#offerLast(E):::Inserts the specified element at the end of this deque.:::addLast->return
ArrayDeque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail):::if->es->for->i->end->to->return
ArrayDeque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail):::if->es->for->i->end->to->return
ArrayDeque#add(E):::Inserts the specified element at the end of this deque:::addLast->return
ArrayDeque#offer(E):::Inserts the specified element at the end of this deque:::return->offerLast
ArrayDeque#remove():::Retrieves and removes the head of the queue represented by this deque:::return->removeFirst
ArrayDeque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty:::return->pollFirst
ArrayDeque#element():::Retrieves, but does not remove, the head of the queue represented by this deque:::return->getFirst
ArrayDeque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty:::return->peekFirst
ArrayDeque#push(E):::Pushes an element onto the stack represented by this deque:::addFirst
ArrayDeque#pop():::Pops an element from the stack represented by this deque:::return->removeFirst
ArrayDeque#delete(int):::Removes the element at the specified position in the elements array:::es->capacity->h->t->front->sub->back->sub->if->if->System->arraycopy->else->System->arraycopy->System->arraycopy->inc->return->else->dec->if->System->arraycopy->else->System->arraycopy->System->arraycopy->return
ArrayDeque#size():::Returns the number of elements in this deque.:::return->sub
ArrayDeque#isEmpty():::Returns true if this deque contains no elements.:::return
ArrayDeque#iterator():::Returns an iterator over the elements in this deque:::return->new->DeqIterator
ArrayDeque#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this deque:::return->new->DeqSpliterator
ArrayDeque#contains(Object):::Returns true if this deque contains the specified element:::if->es->for->i->end->to->return
ArrayDeque#remove(Object):::Removes a single instance of the specified element from this deque:::return->removeFirstOccurrence
ArrayDeque#clear():::Removes all of the elements from this deque:::circularClear
ArrayDeque#toArray():::Returns an array containing all of the elements in this deque in proper sequence (from first to last element):::return->toArray
ArrayDeque#toArray(T[]):::Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::size->if->size->return->a->getClass->toArray->es->for->i->j->len->Math->min->if->return
ArrayDeque#clone():::Returns a copy of this deque.:::try->result->super->clone->Arrays->copyOf->return->catch->throw->new->AssertionError->finally
ArrayDeque#checkInvariants():::debugging:::try->capacity->catch->printf->Arrays->toString->printf->throw->finally
ArrayList#trimToSize():::Trims the capacity of this ArrayList instance to be the list's current size:::if->Arrays->copyOf
ArrayList#ensureCapacity(int):::Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.:::if->grow
ArrayList#size():::Returns the number of elements in this list.:::return
ArrayList#isEmpty():::Returns true if this list contains no elements.:::return
ArrayList#contains(Object):::Returns true if this list contains the specified element:::return->indexOf
ArrayList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element:::return->indexOfRange
ArrayList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element:::return->lastIndexOfRange
ArrayList#clone():::Returns a shallow copy of this ArrayList instance:::try->v->super->clone->Arrays->copyOf->return->catch->throw->new->InternalError->finally
ArrayList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element):::return->Arrays->copyOf
ArrayList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::if->return->Arrays->a->getClass->copyOf->System->arraycopy->if->return
ArrayList#get(int):::Returns the element at the specified position in this list.:::Objects->checkIndex->return->elementData
ArrayList#set(int, E):::Replaces the element at the specified position in this list with the specified element.:::Objects->checkIndex->oldValue->elementData->return
ArrayList#add(E):::Appends the specified element to the end of this list.:::add->return
ArrayList#add(int, E):::Inserts the specified element at the specified position in this list:::rangeCheckForAdd->s->elementData->if->grow->System->arraycopy
ArrayList#remove(int):::Removes the element at the specified position in this list:::Objects->checkIndex->es->oldValue->fastRemove->return
ArrayList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present:::es->size->i->if->for->else->for->return->fastRemove->return
ArrayList#clear():::Removes all of the elements from this list:::es->for->to->i
ArrayList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator:::a->c->toArray->numNew->if->return->elementData->s->if->grow->System->arraycopy->return
ArrayList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position:::rangeCheckForAdd->a->c->toArray->numNew->if->return->elementData->s->if->grow->numMoved->if->System->arraycopy->System->arraycopy->return
ArrayList#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive:::if->throw->outOfBoundsMsg->new->IndexOutOfBoundsException->shiftTailOverGap
ArrayList#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection.:::return->batchRemove
ArrayList#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection:::return->batchRemove
ArrayList#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list:::rangeCheckForAdd->return->new->ListItr
ArrayList#listIterator():::Returns a list iterator over the elements in this list (in proper sequence):::return->new->ListItr
ArrayList#iterator():::Returns an iterator over the elements in this list in proper sequence:::return->new->Itr
ArrayList#subList(int, int):::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive:::subListRangeCheck->return->new->SubList<>
ArrayList#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list:::return->new->ArrayListSpliterator
ArrayList#removeIf(Predicate, int, int):::Removes all elements satisfying the given predicate, from index i (inclusive) to index end (exclusive).:::Objects->requireNonNull->expectedModCount->es->for->filter->elementAt->test->if->beg->deathRow->nBits->for->if->throw->new->ConcurrentModificationException->w->for->shiftTailOverGap->return->else->if->throw->new->ConcurrentModificationException->return
Arrays#rangeCheck(int, int, int):::Checks that fromIndex and toIndex are in the range and throws an exception if they aren't.:::if->throw->new->IllegalArgumentException->if->throw->new->ArrayIndexOutOfBoundsException->if->throw->new->ArrayIndexOutOfBoundsException
Arrays#sort(int[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(int[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(long[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(long[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(short[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(short[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(char[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(char[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(byte[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(byte[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(float[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(float[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#sort(double[]):::Sorts the specified array into ascending numerical order:::DualPivotQuicksort->sort
Arrays#sort(double[], int, int):::Sorts the specified range of the array into ascending order:::rangeCheck->DualPivotQuicksort->sort
Arrays#parallelSort(byte[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->byteArr->new->ArraysParallelSortHelpers.FJByte.Sorter->invoke
Arrays#parallelSort(byte[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->byteArr->new->ArraysParallelSortHelpers.FJByte.Sorter->invoke
Arrays#parallelSort(char[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->charArr->new->ArraysParallelSortHelpers.FJChar.Sorter->invoke
Arrays#parallelSort(char[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->charArr->new->ArraysParallelSortHelpers.FJChar.Sorter->invoke
Arrays#parallelSort(short[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->shortArr->new->ArraysParallelSortHelpers.FJShort.Sorter->invoke
Arrays#parallelSort(short[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->shortArr->new->ArraysParallelSortHelpers.FJShort.Sorter->invoke
Arrays#parallelSort(int[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->intArr->new->ArraysParallelSortHelpers.FJInt.Sorter->invoke
Arrays#parallelSort(int[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->intArr->new->ArraysParallelSortHelpers.FJInt.Sorter->invoke
Arrays#parallelSort(long[]):::Sorts the specified array into ascending numerical order.:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->longArr->new->ArraysParallelSortHelpers.FJLong.Sorter->invoke
Arrays#parallelSort(long[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->longArr->new->ArraysParallelSortHelpers.FJLong.Sorter->invoke
Arrays#parallelSort(float[]):::Sorts the specified array into ascending numerical order:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->floatArr->new->ArraysParallelSortHelpers.FJFloat.Sorter->invoke
Arrays#parallelSort(float[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->floatArr->new->ArraysParallelSortHelpers.FJFloat.Sorter->invoke
Arrays#parallelSort(double[]):::Sorts the specified array into ascending numerical order:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->doubleArr->new->ArraysParallelSortHelpers.FJDouble.Sorter->invoke
Arrays#parallelSort(double[], int, int):::Sorts the specified range of the array into ascending numerical order:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->DualPivotQuicksort->sort->else->new->doubleArr->new->ArraysParallelSortHelpers.FJDouble.Sorter->invoke
Arrays#parallelSort(T[]):::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements:::n->p->g->if->ForkJoinPool->getCommonPoolParallelism->TimSort->sort->else->Array->a->getClass->getComponentType->newInstance->new->ArraysParallelSortHelpers.FJObject.Sorter<>->invoke
Arrays#parallelSort(T[], int, int):::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements:::rangeCheck->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->TimSort->sort->else->Array->a->getClass->getComponentType->newInstance->new->ArraysParallelSortHelpers.FJObject.Sorter<>->invoke
Arrays#parallelSort(T[], Comparator):::Sorts the specified array of objects according to the order induced by the specified comparator:::if->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->TimSort->sort->else->Array->a->getClass->getComponentType->newInstance->new->ArraysParallelSortHelpers.FJObject.Sorter<>->invoke
Arrays#parallelSort(T[], int, int, Comparator):::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator:::rangeCheck->if->n->p->g->if->ForkJoinPool->getCommonPoolParallelism->TimSort->sort->else->Array->a->getClass->getComponentType->newInstance->new->ArraysParallelSortHelpers.FJObject.Sorter<>->invoke
Arrays#sort(Object[]):::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements:::if->legacyMergeSort->else->ComparableTimSort->sort
Arrays#sort(Object[], int, int):::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements:::rangeCheck->if->legacyMergeSort->else->ComparableTimSort->sort
Arrays#sort(T[], Comparator):::Sorts the specified array of objects according to the order induced by the specified comparator:::if->sort->else->if->legacyMergeSort->else->TimSort->sort
Arrays#sort(T[], int, int, Comparator):::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator:::if->sort->else->rangeCheck->if->legacyMergeSort->else->TimSort->sort
Arrays#parallelPrefix(T[], BinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function:::Objects->requireNonNull->if->new->ArrayPrefixHelpers.CumulateTask<>->invoke
Arrays#parallelPrefix(T[], int, int, BinaryOperator):::Performs #parallelPrefix(Object[], BinaryOperator) for the given subrange of the array.:::Objects->requireNonNull->rangeCheck->if->new->ArrayPrefixHelpers.CumulateTask<>->invoke
Arrays#parallelPrefix(long[], LongBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function:::Objects->requireNonNull->if->new->ArrayPrefixHelpers.LongCumulateTask->invoke
Arrays#parallelPrefix(long[], int, int, LongBinaryOperator):::Performs #parallelPrefix(long[], LongBinaryOperator) for the given subrange of the array.:::Objects->requireNonNull->rangeCheck->if->new->ArrayPrefixHelpers.LongCumulateTask->invoke
Arrays#parallelPrefix(double[], DoubleBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function:::Objects->requireNonNull->if->new->ArrayPrefixHelpers.DoubleCumulateTask->invoke
Arrays#parallelPrefix(double[], int, int, DoubleBinaryOperator):::Performs #parallelPrefix(double[], DoubleBinaryOperator) for the given subrange of the array.:::Objects->requireNonNull->rangeCheck->if->new->ArrayPrefixHelpers.DoubleCumulateTask->invoke
Arrays#parallelPrefix(int[], IntBinaryOperator):::Cumulates, in parallel, each element of the given array in place, using the supplied function:::Objects->requireNonNull->if->new->ArrayPrefixHelpers.IntCumulateTask->invoke
Arrays#parallelPrefix(int[], int, int, IntBinaryOperator):::Performs #parallelPrefix(int[], IntBinaryOperator) for the given subrange of the array.:::Objects->requireNonNull->rangeCheck->if->new->ArrayPrefixHelpers.IntCumulateTask->invoke
Arrays#binarySearch(long[], long):::Searches the specified array of longs for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(long[], int, int, long):::Searches a range of the specified array of longs for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch(int[], int):::Searches the specified array of ints for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(int[], int, int, int):::Searches a range of the specified array of ints for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch(short[], short):::Searches the specified array of shorts for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(short[], int, int, short):::Searches a range of the specified array of shorts for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch(char[], char):::Searches the specified array of chars for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(char[], int, int, char):::Searches a range of the specified array of chars for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch(byte[], byte):::Searches the specified array of bytes for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(byte[], int, int, byte):::Searches a range of the specified array of bytes for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch(double[], double):::Searches the specified array of doubles for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(double[], int, int, double):::Searches a range of the specified array of doubles for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch(float[], float):::Searches the specified array of floats for the specified value using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(float[], int, int, float):::Searches a range of the specified array of floats for the specified value using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch(Object[], Object):::Searches the specified array for the specified object using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(Object[], int, int, Object):::Searches a range of the specified array for the specified object using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#binarySearch(T[], T, Comparator):::Searches the specified array for the specified object using the binary search algorithm:::return->binarySearch0
Arrays#binarySearch(T[], int, int, T, Comparator):::Searches a range of the specified array for the specified object using the binary search algorithm:::rangeCheck->return->binarySearch0
Arrays#equals(long[], long[]):::Returns true if the two specified arrays of longs are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(long[], int, int, long[], int, int):::Returns true if the two specified arrays of longs, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(int[], int[]):::Returns true if the two specified arrays of ints are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(int[], int, int, int[], int, int):::Returns true if the two specified arrays of ints, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(short[], short[]):::Returns true if the two specified arrays of shorts are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(short[], int, int, short[], int, int):::Returns true if the two specified arrays of shorts, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(char[], char[]):::Returns true if the two specified arrays of chars are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(char[], int, int, char[], int, int):::Returns true if the two specified arrays of chars, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(byte[], byte[]):::Returns true if the two specified arrays of bytes are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(byte[], int, int, byte[], int, int):::Returns true if the two specified arrays of bytes, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(boolean[], boolean[]):::Returns true if the two specified arrays of booleans are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(boolean[], int, int, boolean[], int, int):::Returns true if the two specified arrays of booleans, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(double[], double[]):::Returns true if the two specified arrays of doubles are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(double[], int, int, double[], int, int):::Returns true if the two specified arrays of doubles, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(float[], float[]):::Returns true if the two specified arrays of floats are equal to one another:::if->return->if->return->length->if->return->return->ArraysSupport->mismatch
Arrays#equals(float[], int, int, float[], int, int):::Returns true if the two specified arrays of floats, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->return->ArraysSupport->mismatch
Arrays#equals(Object[], Object[]):::Returns true if the two specified arrays of Objects are equal to one another:::if->return->if->return->length->if->return->for->i->return
Arrays#equals(Object[], int, int, Object[], int, int):::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another:::rangeCheck->rangeCheck->aLength->bLength->if->return->for->i->return
Arrays#equals(T[], T[], Comparator):::Returns true if the two specified arrays of Objects are equal to one another:::Objects->requireNonNull->if->return->if->return->length->if->return->for->i->return
Arrays#equals(T[], int, int, T[], int, int, Comparator):::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another:::Objects->requireNonNull->rangeCheck->rangeCheck->aLength->bLength->if->return->for->i->return
Arrays#fill(long[], long):::Assigns the specified long value to each element of the specified array of longs.:::for->i->len
Arrays#fill(long[], int, int, long):::Assigns the specified long value to each element of the specified range of the specified array of longs:::rangeCheck->for->i
Arrays#fill(int[], int):::Assigns the specified int value to each element of the specified array of ints.:::for->i->len
Arrays#fill(int[], int, int, int):::Assigns the specified int value to each element of the specified range of the specified array of ints:::rangeCheck->for->i
Arrays#fill(short[], short):::Assigns the specified short value to each element of the specified array of shorts.:::for->i->len
Arrays#fill(short[], int, int, short):::Assigns the specified short value to each element of the specified range of the specified array of shorts:::rangeCheck->for->i
Arrays#fill(char[], char):::Assigns the specified char value to each element of the specified array of chars.:::for->i->len
Arrays#fill(char[], int, int, char):::Assigns the specified char value to each element of the specified range of the specified array of chars:::rangeCheck->for->i
Arrays#fill(byte[], byte):::Assigns the specified byte value to each element of the specified array of bytes.:::for->i->len
Arrays#fill(byte[], int, int, byte):::Assigns the specified byte value to each element of the specified range of the specified array of bytes:::rangeCheck->for->i
Arrays#fill(boolean[], boolean):::Assigns the specified boolean value to each element of the specified array of booleans.:::for->i->len
Arrays#fill(boolean[], int, int, boolean):::Assigns the specified boolean value to each element of the specified range of the specified array of booleans:::rangeCheck->for->i
Arrays#fill(double[], double):::Assigns the specified double value to each element of the specified array of doubles.:::for->i->len
Arrays#fill(double[], int, int, double):::Assigns the specified double value to each element of the specified range of the specified array of doubles:::rangeCheck->for->i
Arrays#fill(float[], float):::Assigns the specified float value to each element of the specified array of floats.:::for->i->len
Arrays#fill(float[], int, int, float):::Assigns the specified float value to each element of the specified range of the specified array of floats:::rangeCheck->for->i
Arrays#fill(Object[], Object):::Assigns the specified Object reference to each element of the specified array of Objects.:::for->i->len
Arrays#fill(Object[], int, int, Object):::Assigns the specified Object reference to each element of the specified range of the specified array of Objects:::rangeCheck->for->i
Arrays#copyOf(T[], int):::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length:::return->original->getClass->copyOf
Arrays#copyOf(U[], int, Class):::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length:::copy->new->ObjectArr->Array->newType->getComponentType->newInstance->System->Math->min->arraycopy->return
Arrays#copyOf(byte[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->byteArr->System->Math->min->arraycopy->return
Arrays#copyOf(short[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->shortArr->System->Math->min->arraycopy->return
Arrays#copyOf(int[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->intArr->System->Math->min->arraycopy->return
Arrays#copyOf(long[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->longArr->System->Math->min->arraycopy->return
Arrays#copyOf(char[], int):::Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length:::copy->new->charArr->System->Math->min->arraycopy->return
Arrays#copyOf(float[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->floatArr->System->Math->min->arraycopy->return
Arrays#copyOf(double[], int):::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length:::copy->new->doubleArr->System->Math->min->arraycopy->return
Arrays#copyOf(boolean[], int):::Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length:::copy->new->booleanArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(T[], int, int):::Copies the specified range of the specified array into a new array:::return->original->getClass->copyOfRange
Arrays#copyOfRange(U[], int, int, Class):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->ObjectArr->Array->newType->getComponentType->newInstance->System->Math->min->arraycopy->return
Arrays#copyOfRange(byte[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->byteArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(short[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->shortArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(int[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->intArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(long[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->longArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(char[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->charArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(float[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->floatArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(double[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->doubleArr->System->Math->min->arraycopy->return
Arrays#copyOfRange(boolean[], int, int):::Copies the specified range of the specified array into a new array:::newLength->if->throw->new->IllegalArgumentException->copy->new->booleanArr->System->Math->min->arraycopy->return
Arrays#asList(T...):::Returns a fixed-size list backed by the specified array:::return->new->ArrayList<>
Arrays#hashCode(long[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->elementHash->return
Arrays#hashCode(int[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(short[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(char[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(byte[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(boolean[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->return
Arrays#hashCode(float[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->Float->floatToIntBits->return
Arrays#hashCode(double[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->bits->Double->doubleToLongBits->return
Arrays#hashCode(Object[]):::Returns a hash code based on the contents of the specified array:::if->return->result->foreach->element->hashCode->return
Arrays#deepHashCode(Object[]):::Returns a hash code based on the "deep contents" of the specified array:::if->return->result->foreach->elementHash->cl->if->else->if->element->getClass->getComponentType->element->hashCode->else->if->deepHashCode->else->primitiveArrayHashCode->return
Arrays#deepEquals(Object[], Object[]):::Returns true if the two specified arrays are deeply equal to one another:::if->return->if->return->length->if->return->for->i->return
Arrays#toString(long[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(int[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(short[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(char[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(byte[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(boolean[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(float[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(double[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#toString(Object[]):::Returns a string representation of the contents of the specified array:::if->return->iMax->if->return->b->new->StringBuilder->b->append->for->i
Arrays#deepToString(Object[]):::Returns a string representation of the "deep contents" of the specified array:::if->return->bufLen->if->buf->new->StringBuilder->new->HashSet<>->deepToString->return->buf->toString
Arrays#setAll(T[], IntFunction):::Set all elements of the specified array, using the provided generator function to compute each element:::Objects->requireNonNull->for->i
Arrays#parallelSetAll(T[], IntFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element:::Objects->requireNonNull->IntStream->range->parallel->generator->apply->forEach
Arrays#setAll(int[], IntUnaryOperator):::Set all elements of the specified array, using the provided generator function to compute each element:::Objects->requireNonNull->for->i
Arrays#parallelSetAll(int[], IntUnaryOperator):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element:::Objects->requireNonNull->IntStream->range->parallel->generator->applyAsInt->forEach
Arrays#setAll(long[], IntToLongFunction):::Set all elements of the specified array, using the provided generator function to compute each element:::Objects->requireNonNull->for->i
Arrays#parallelSetAll(long[], IntToLongFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element:::Objects->requireNonNull->IntStream->range->parallel->generator->applyAsLong->forEach
Arrays#setAll(double[], IntToDoubleFunction):::Set all elements of the specified array, using the provided generator function to compute each element:::Objects->requireNonNull->for->i
Arrays#parallelSetAll(double[], IntToDoubleFunction):::Set all elements of the specified array, in parallel, using the provided generator function to compute each element:::Objects->requireNonNull->IntStream->range->parallel->generator->applyAsDouble->forEach
Arrays#spliterator(T[]):::Returns a Spliterator covering all of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(T[], int, int):::Returns a Spliterator covering the specified range of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(int[]):::Returns a Spliterator.OfInt covering all of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(int[], int, int):::Returns a Spliterator.OfInt covering the specified range of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(long[]):::Returns a Spliterator.OfLong covering all of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(long[], int, int):::Returns a Spliterator.OfLong covering the specified range of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(double[]):::Returns a Spliterator.OfDouble covering all of the specified array:::return->Spliterators->spliterator
Arrays#spliterator(double[], int, int):::Returns a Spliterator.OfDouble covering the specified range of the specified array:::return->Spliterators->spliterator
Arrays#stream(T[]):::Returns a sequential Stream with the specified array as its source.:::return->stream
Arrays#stream(T[], int, int):::Returns a sequential Stream with the specified range of the specified array as its source.:::return->StreamSupport->spliterator->stream
Arrays#stream(int[]):::Returns a sequential IntStream with the specified array as its source.:::return->stream
Arrays#stream(int[], int, int):::Returns a sequential IntStream with the specified range of the specified array as its source.:::return->StreamSupport->spliterator->intStream
Arrays#stream(long[]):::Returns a sequential LongStream with the specified array as its source.:::return->stream
Arrays#stream(long[], int, int):::Returns a sequential LongStream with the specified range of the specified array as its source.:::return->StreamSupport->spliterator->longStream
Arrays#stream(double[]):::Returns a sequential DoubleStream with the specified array as its source.:::return->stream
Arrays#stream(double[], int, int):::Returns a sequential DoubleStream with the specified range of the specified array as its source.:::return->StreamSupport->spliterator->doubleStream
Arrays#compare(boolean[], boolean[]):::Compares two boolean arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Boolean->compare->return
Arrays#compare(boolean[], int, int, boolean[], int, int):::Compares two boolean arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Boolean->compare->return
Arrays#compare(byte[], byte[]):::Compares two byte arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Byte->compare->return
Arrays#compare(byte[], int, int, byte[], int, int):::Compares two byte arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Byte->compare->return
Arrays#compareUnsigned(byte[], byte[]):::Compares two byte arrays lexicographically, numerically treating elements as unsigned:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Byte->compareUnsigned->return
Arrays#compareUnsigned(byte[], int, int, byte[], int, int):::Compares two byte arrays lexicographically over the specified ranges, numerically treating elements as unsigned:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Byte->compareUnsigned->return
Arrays#compare(short[], short[]):::Compares two short arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Short->compare->return
Arrays#compare(short[], int, int, short[], int, int):::Compares two short arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Short->compare->return
Arrays#compareUnsigned(short[], short[]):::Compares two short arrays lexicographically, numerically treating elements as unsigned:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Short->compareUnsigned->return
Arrays#compareUnsigned(short[], int, int, short[], int, int):::Compares two short arrays lexicographically over the specified ranges, numerically treating elements as unsigned:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Short->compareUnsigned->return
Arrays#compare(char[], char[]):::Compares two char arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Character->compare->return
Arrays#compare(char[], int, int, char[], int, int):::Compares two char arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Character->compare->return
Arrays#compare(int[], int[]):::Compares two int arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Integer->compare->return
Arrays#compare(int[], int, int, int[], int, int):::Compares two int arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Integer->compare->return
Arrays#compareUnsigned(int[], int[]):::Compares two int arrays lexicographically, numerically treating elements as unsigned:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Integer->compareUnsigned->return
Arrays#compareUnsigned(int[], int, int, int[], int, int):::Compares two int arrays lexicographically over the specified ranges, numerically treating elements as unsigned:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Integer->compareUnsigned->return
Arrays#compare(long[], long[]):::Compares two long arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Long->compare->return
Arrays#compare(long[], int, int, long[], int, int):::Compares two long arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Long->compare->return
Arrays#compareUnsigned(long[], long[]):::Compares two long arrays lexicographically, numerically treating elements as unsigned:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Long->compareUnsigned->return
Arrays#compareUnsigned(long[], int, int, long[], int, int):::Compares two long arrays lexicographically over the specified ranges, numerically treating elements as unsigned:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Long->compareUnsigned->return
Arrays#compare(float[], float[]):::Compares two float arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Float->compare->return
Arrays#compare(float[], int, int, float[], int, int):::Compares two float arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Float->compare->return
Arrays#compare(double[], double[]):::Compares two double arrays lexicographically:::if->return->if->return->i->ArraysSupport->Math->min->mismatch->if->return->Double->compare->return
Arrays#compare(double[], int, int, double[], int, int):::Compares two double arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->i->ArraysSupport->Math->min->mismatch->if->return->Double->compare->return
Arrays#compare(T[], T[]):::Compares two Object arrays, within comparable elements, lexicographically:::if->return->if->return->length->Math->min->for->i->return
Arrays#compare(T[], int, int, T[], int, int):::Compares two Object arrays lexicographically over the specified ranges:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->for->i->return
Arrays#compare(T[], T[], Comparator):::Compares two Object arrays lexicographically using a specified comparator:::Objects->requireNonNull->if->return->if->return->length->Math->min->for->i->return
Arrays#compare(T[], int, int, T[], int, int, Comparator):::Compares two Object arrays lexicographically over the specified ranges:::Objects->requireNonNull->rangeCheck->rangeCheck->aLength->bLength->length->Math->min->for->i->return
Arrays#mismatch(boolean[], boolean[]):::Finds and returns the index of the first mismatch between two boolean arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(boolean[], int, int, boolean[], int, int):::Finds and returns the relative index of the first mismatch between two boolean arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(byte[], byte[]):::Finds and returns the index of the first mismatch between two byte arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(byte[], int, int, byte[], int, int):::Finds and returns the relative index of the first mismatch between two byte arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(char[], char[]):::Finds and returns the index of the first mismatch between two char arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(char[], int, int, char[], int, int):::Finds and returns the relative index of the first mismatch between two char arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(short[], short[]):::Finds and returns the index of the first mismatch between two short arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(short[], int, int, short[], int, int):::Finds and returns the relative index of the first mismatch between two short arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(int[], int[]):::Finds and returns the index of the first mismatch between two int arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(int[], int, int, int[], int, int):::Finds and returns the relative index of the first mismatch between two int arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(long[], long[]):::Finds and returns the index of the first mismatch between two long arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(long[], int, int, long[], int, int):::Finds and returns the relative index of the first mismatch between two long arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(float[], float[]):::Finds and returns the index of the first mismatch between two float arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(float[], int, int, float[], int, int):::Finds and returns the relative index of the first mismatch between two float arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(double[], double[]):::Finds and returns the index of the first mismatch between two double arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->i->ArraysSupport->mismatch->return
Arrays#mismatch(double[], int, int, double[], int, int):::Finds and returns the relative index of the first mismatch between two double arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->i->ArraysSupport->mismatch->return
Arrays#mismatch(Object[], Object[]):::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found:::length->Math->min->if->return->for->i->return
Arrays#mismatch(Object[], int, int, Object[], int, int):::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found:::rangeCheck->rangeCheck->aLength->bLength->length->Math->min->for->i->return
Arrays#mismatch(T[], T[], Comparator):::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found:::Objects->requireNonNull->length->Math->min->if->return->for->i->return
Arrays#mismatch(T[], int, int, T[], int, int, Comparator):::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found:::Objects->requireNonNull->rangeCheck->rangeCheck->aLength->bLength->length->Math->min->for->i->return
Base64#getEncoder():::Returns a Encoder that encodes using the Basic type base64 encoding scheme.:::return
Base64#getUrlEncoder():::Returns a Encoder that encodes using the URL and Filename safe type base64 encoding scheme.:::return
Base64#getMimeEncoder():::Returns a Encoder that encodes using the MIME type base64 encoding scheme.:::return
Base64#getMimeEncoder(int, byte[]):::Returns a Encoder that encodes using the MIME type base64 encoding scheme with specified line length and line separators.:::Objects->requireNonNull->base64->foreach->if->throw->Integer->toString->new->IllegalArgumentException->if->return->return->new->Encoder
Base64#getDecoder():::Returns a Decoder that decodes using the Basic type base64 encoding scheme.:::return
Base64#getUrlDecoder():::Returns a Decoder that decodes using the URL and Filename safe type base64 encoding scheme.:::return
Base64#getMimeDecoder():::Returns a Decoder that decodes using the MIME type base64 decoding scheme.:::return
Base64.Encoder#encode(byte[]):::Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme:::len->outLength->dst->new->byteArr->ret->encode0->if->return->Arrays->copyOf->return
Base64.Encoder#encode(byte[], byte[]):::Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0:::len->outLength->if->throw->new->IllegalArgumentException->return->encode0
Base64.Encoder#encodeToString(byte[]):::Encodes the specified byte array into a String using the Base64 encoding scheme:::encoded->encode->return->new->String
Base64.Encoder#encode(ByteBuffer):::Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme:::len->buffer->remaining->outLength->dst->new->byteArr->ret->if->buffer->hasArray->buffer->array->buffer->arrayOffset->buffer->position->buffer->arrayOffset->buffer->limit->encode0->buffer->buffer->limit->position->else->src->buffer->remaining->new->byteArr->buffer->get->encode0->if->Arrays->copyOf->return->ByteBuffer->wrap
Base64.Encoder#wrap(OutputStream):::Wraps an output stream for encoding byte data using the Base64 encoding scheme:::Objects->requireNonNull->return->new->EncOutputStream
Base64.Encoder#withoutPadding():::Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data:::if->return->return->new->Encoder
Base64.Decoder#decode(byte[]):::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into a newly-allocated output byte array:::dst->outLength->new->byteArr->ret->decode0->if->Arrays->copyOf->return
Base64.Decoder#decode(String):::Decodes a Base64 encoded String into a newly-allocated byte array using the Base64 encoding scheme:::return->src->getBytes->decode
Base64.Decoder#decode(byte[], byte[]):::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into the given output byte array, starting at offset 0:::len->outLength->if->throw->new->IllegalArgumentException->return->decode0
Base64.Decoder#decode(ByteBuffer):::Decodes all bytes from the input byte buffer using the Base64 encoding scheme, writing the results into a newly-allocated ByteBuffer:::pos0->buffer->position->try->src->sp->sl->if->buffer->hasArray->buffer->array->buffer->arrayOffset->buffer->position->buffer->arrayOffset->buffer->limit->buffer->buffer->limit->position->else->buffer->remaining->new->byteArr->buffer->get->dst->outLength->new->byteArr->return->ByteBuffer->decode0->wrap->catch->buffer->position->throw->finally
Base64.Decoder#wrap(InputStream):::Returns an input stream for decoding Base64 encoded byte stream:::Objects->requireNonNull->return->new->DecInputStream
BitSet#valueOf(long[]):::Returns a new bit set containing all the bits in the given long array:::n->for->return->Arrays->copyOf->new->BitSet
BitSet#valueOf(LongBuffer):::Returns a new bit set containing all the bits in the given long buffer between its position and limit:::lb->slice->n->for->lb->remaining->lb->get->words->new->longArr->lb->get->return->new->BitSet
BitSet#valueOf(byte[]):::Returns a new bit set containing all the bits in the given byte array:::return->BitSet->ByteBuffer->wrap->valueOf
BitSet#valueOf(ByteBuffer):::Returns a new bit set containing all the bits in the given byte buffer between its position and limit:::bb->slice->order->n->for->bb->remaining->bb->get->words->new->longArr->bb->limit->i->while->bb->remaining->bb->getLong->for->remaining->bb->remaining->j->return->new->BitSet
BitSet#toByteArray():::Returns a new byte array containing all the bits in this bit set:::n->if->return->new->byteArr->len->for->x->bytes->new->byteArr->bb->ByteBuffer->wrap->order->for->i->for->x->return
BitSet#toLongArray():::Returns a new long array containing all the bits in this bit set:::return->Arrays->copyOf
BitSet#flip(int):::Sets the bit at the specified index to the complement of its current value.:::if->throw->new->IndexOutOfBoundsException->wordIndex->wordIndex->expandTo->recalculateWordsInUse->checkInvariants
BitSet#flip(int, int):::Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value.:::checkRange->if->return->startWordIndex->wordIndex->endWordIndex->wordIndex->expandTo->firstWordMask->lastWordMask->if->else->for->i->recalculateWordsInUse->checkInvariants
BitSet#set(int):::Sets the bit at the specified index to true.:::if->throw->new->IndexOutOfBoundsException->wordIndex->wordIndex->expandTo->checkInvariants
BitSet#set(int, boolean):::Sets the bit at the specified index to the specified value.:::if->set->else->clear
BitSet#set(int, int):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true.:::checkRange->if->return->startWordIndex->wordIndex->endWordIndex->wordIndex->expandTo->firstWordMask->lastWordMask->if->else->for->i->checkInvariants
BitSet#set(int, int, boolean):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value.:::if->set->else->clear
BitSet#clear(int):::Sets the bit specified by the index to false.:::if->throw->new->IndexOutOfBoundsException->wordIndex->wordIndex->if->return->recalculateWordsInUse->checkInvariants
BitSet#clear(int, int):::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false.:::checkRange->if->return->startWordIndex->wordIndex->if->return->endWordIndex->wordIndex->if->length->firstWordMask->lastWordMask->if->else->for->i->recalculateWordsInUse->checkInvariants
BitSet#clear():::Sets all of the bits in this BitSet to false.:::while
BitSet#get(int):::Returns the value of the bit with the specified index:::if->throw->new->IndexOutOfBoundsException->checkInvariants->wordIndex->wordIndex->return
BitSet#get(int, int):::Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive).:::checkRange->checkInvariants->len->length->if->return->new->BitSet->if->result->new->BitSet->targetWords->wordIndex->sourceIndex->wordIndex->wordAligned->for->i->lastWordMask->result->recalculateWordsInUse->result->checkInvariants->return
BitSet#nextSetBit(int):::Returns the index of the first bit that is set to true that occurs on or after the specified starting index:::if->throw->new->IndexOutOfBoundsException->checkInvariants->u->wordIndex->if->return->word->while->if->return->Long->numberOfTrailingZeros->if->return
BitSet#nextClearBit(int):::Returns the index of the first bit that is set to false that occurs on or after the specified starting index.:::if->throw->new->IndexOutOfBoundsException->checkInvariants->u->wordIndex->if->return->word->while->if->return->Long->numberOfTrailingZeros->if->return
BitSet#previousSetBit(int):::Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index:::if->if->return->throw->new->IndexOutOfBoundsException->checkInvariants->u->wordIndex->if->return->length->word->while->if->return->Long->numberOfLeadingZeros->if->return
BitSet#previousClearBit(int):::Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index:::if->if->return->throw->new->IndexOutOfBoundsException->checkInvariants->u->wordIndex->if->return->word->while->if->return->Long->numberOfLeadingZeros->if->return
BitSet#length():::Returns the "logical size" of this BitSet: the index of the highest set bit in the BitSet plus one:::if->return->return->Long->numberOfLeadingZeros
BitSet#isEmpty():::Returns true if this BitSet contains no bits that are set to true.:::return
BitSet#intersects(BitSet):::Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.:::for->i->Math->min->return
BitSet#cardinality():::Returns the number of bits set to true in this BitSet.:::sum->for->i->return
BitSet#and(BitSet):::Performs a logical AND of this target bit set with the argument bit set:::if->return->while->for->i->recalculateWordsInUse->checkInvariants
BitSet#or(BitSet):::Performs a logical OR of this bit set with the bit set argument:::if->return->wordsInCommon->Math->min->if->ensureCapacity->for->i->if->System->arraycopy->checkInvariants
BitSet#xor(BitSet):::Performs a logical XOR of this bit set with the bit set argument:::wordsInCommon->Math->min->if->ensureCapacity->for->i->if->System->arraycopy->recalculateWordsInUse->checkInvariants
BitSet#andNot(BitSet):::Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet.:::for->i->Math->min->recalculateWordsInUse->checkInvariants
BitSet#hashCode():::Returns the hash code value for this bit set:::h->for->i->return
BitSet#size():::Returns the number of bits of space actually in use by this BitSet to represent bit values:::return
BitSet#equals(Object):::Compares this object against the specified object:::if->return->if->return->set->checkInvariants->set->checkInvariants->if->return->for->i->return
BitSet#clone():::Cloning this BitSet produces a new BitSet that is equal to it:::if->trimToSize->try->result->super->clone->words->clone->result->checkInvariants->return->catch->throw->new->InternalError->finally
BitSet#toString():::Returns a string representation of this bit set:::checkInvariants->numBits->cardinality->b->new->StringBuilder->b->append->i->nextSetBit->if->b->append->while->if->break->if->nextSetBit->break->endOfRun->nextClearBit->do->b->append->append->while->b->append->return->b->toString
BitSet#stream():::Returns a stream of indices for which this BitSet contains a bit in the set state:::return->StreamSupport->new->BitSetSpliterator->intStream
Calendar.Builder#setInstant(long):::Sets the instant parameter to the given instant value that is a millisecond offset from the Epoch.:::if->throw->new->IllegalStateException->return
Calendar.Builder#setInstant(Date):::Sets the instant parameter to the instant value given by a Date:::return->instant->getTime->setInstant
Calendar.Builder#set(int, int):::Sets the field parameter to the given value:::if->throw->new->IllegalArgumentException->if->isInstantSet->throw->new->IllegalStateException->allocateFields->internalSet->return
Calendar.Builder#setFields(int...):::Sets field parameters to their values given by fieldValuePairs that are pairs of a field and its value:::len->if->throw->new->IllegalArgumentException->if->isInstantSet->throw->new->IllegalStateException->if->throw->new->IllegalStateException->allocateFields->for->i->return
Calendar.Builder#setDate(int, int, int):::Sets the date field parameters to the values given by year, month, and dayOfMonth:::return->setFields
Calendar.Builder#setTimeOfDay(int, int, int):::Sets the time of day field parameters to the values given by hourOfDay, minute, and second:::return->setTimeOfDay
Calendar.Builder#setTimeOfDay(int, int, int, int):::Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis:::return->setFields
Calendar.Builder#setWeekDate(int, int, int):::Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week:::allocateFields->internalSet->internalSet->internalSet->return
Calendar.Builder#setTimeZone(TimeZone):::Sets the time zone parameter to the given zone:::if->throw->new->NullPointerException->return
Calendar.Builder#setLenient(boolean):::Sets the lenient mode parameter to the value given by lenient:::return
Calendar.Builder#setCalendarType(String):::Sets the calendar type parameter to the given type:::if->type->equals->if->Calendar->getAvailableCalendarTypes->contains->type->equals->throw->new->IllegalArgumentException->if->else->if->equals->throw->new->IllegalStateException->return
Calendar.Builder#setLocale(Locale):::Sets the locale parameter to the given locale:::if->throw->new->NullPointerException->return
Calendar.Builder#setWeekDefinition(int, int):::Sets the week definition parameters to the values given by firstDayOfWeek and minimalDaysInFirstWeek that are used to determine the first week of a year:::if->isValidWeekParameter->isValidWeekParameter->throw->new->IllegalArgumentException->return
Calendar.Builder#build():::Returns a Calendar built from the parameters set by the setter methods:::if->Locale->getDefault->if->defaultTimeZone->cal->if->locale->getUnicodeLocaleType->if->if->locale->getCountry->locale->getLanguage->else->switch->new->GregorianCalendar->break->gcal->new->GregorianCalendar->gcal->new->Date->setGregorianChange->setWeekDefinition->break->new->BuddhistCalendar->cal->clear->break->new->JapaneseImperialCalendar->break->throw->new->IllegalArgumentException->cal->setLenient->if->cal->setFirstDayOfWeek->cal->setMinimalDaysInFirstWeek->if->isInstantSet->cal->setTimeInMillis->cal->complete->return->if->weekDate->isSet->if->cal->isWeekDateSupported->throw->new->IllegalArgumentException->for->stamp->if->weekOfYear->isSet->dayOfWeek->isSet->cal->getFirstDayOfWeek->cal->setWeekDate->cal->complete->return
Calendar#getInstance():::Gets a calendar using the default time zone and locale:::aLocale->Locale->getDefault->return->defaultTimeZone->createCalendar
Calendar#getInstance(TimeZone):::Gets a calendar using the specified time zone and default locale:::return->Locale->getDefault->createCalendar
Calendar#getInstance(Locale):::Gets a calendar using the default time zone and specified locale:::return->defaultTimeZone->createCalendar
Calendar#getInstance(TimeZone, Locale):::Gets a calendar with the specified time zone and locale:::return->createCalendar
Calendar#getAvailableLocales():::Returns an array of all locales for which the getInstance methods of this class can return localized instances:::return->DateFormat->getAvailableLocales
Calendar#computeTime():::Converts the current calendar field values in #fields fields[] to the millisecond time value #time.:::
Calendar#computeFields():::Converts the current millisecond time value #time to calendar field values in #fields fields[]:::
Calendar#getTime():::Returns a Date object representing this Calendar's time value (millisecond offset from the Epoch").:::return->getTimeInMillis->new->Date
Calendar#setTime(Date):::Sets this Calendar's time with the given Date:::date->getTime->setTimeInMillis
Calendar#getTimeInMillis():::Returns this Calendar's time value in milliseconds.:::if->updateTime->return
Calendar#setTimeInMillis(long):::Sets this Calendar's current time from the given long value.:::if->isDirty->return->computeFields
Calendar#get(int):::Returns the value of the given calendar field:::complete->return->internalGet
Calendar#internalGet(int):::Returns the value of the given calendar field:::return
Calendar#internalSet(int, int):::Sets the value of the given calendar field:::
Calendar#set(int, int):::Sets the given calendar field to the given value:::if->computeFields->internalSet->if->adjustStamp
Calendar#set(int, int, int):::Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH:::set->set->set
Calendar#set(int, int, int, int, int):::Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE:::set->set->set->set->set
Calendar#set(int, int, int, int, int, int):::Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND:::set->set->set->set->set->set
Calendar#clear():::Sets all the calendar field values and the time value (millisecond offset from the Epoch) of this Calendar undefined:::for->i
Calendar#clear(int):::Sets the given calendar field value and the time value (millisecond offset from the Epoch) of this Calendar undefined:::
Calendar#isSet(int):::Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call.:::return
Calendar#getDisplayName(int, int, Locale):::Returns the string representation of the calendar field value in the given style and locale:::if->checkDisplayNameParams->return->calendarType->getCalendarType->fieldValue->get->if->isStandaloneStyle->isNarrowFormatStyle->val->CalendarDataUtility->retrieveFieldValueName->if->if->isNarrowFormatStyle->CalendarDataUtility->toStandaloneStyle->retrieveFieldValueName->else->if->isStandaloneStyle->CalendarDataUtility->getBaseStyle->retrieveFieldValueName->return->symbols->DateFormatSymbols->getInstance->strings->getFieldStrings->if->if->return->return
Calendar#getDisplayNames(int, int, Locale):::Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values:::if->checkDisplayNameParams->return->calendarType->getCalendarType->if->isStandaloneStyle->isNarrowFormatStyle->map->CalendarDataUtility->retrieveFieldValueNames->if->if->isNarrowFormatStyle->CalendarDataUtility->toStandaloneStyle->retrieveFieldValueNames->else->if->CalendarDataUtility->getBaseStyle->retrieveFieldValueNames->return->return->getDisplayNamesImpl
Calendar#complete():::Fills in any unset fields in the calendar fields:::if->updateTime->if->computeFields
Calendar#isExternallySet(int):::Returns whether the value of the specified calendar field has been set externally by calling one of the setter methods rather than by the internal time calculation.:::return
Calendar#getSetStateFields():::Returns a field mask (bit mask) indicating all calendar fields that have the state of externally or internally set.:::mask->for->i->return
Calendar#setFieldsComputed(int):::Sets the state of the specified calendar fields to computed:::if->for->i->else->for->i
Calendar#setFieldsNormalized(int):::Sets the state of the calendar fields that are not specified by fieldMask to unset:::if->for->i
Calendar#isPartiallyNormalized():::Returns whether the calendar fields are partially in sync with the time value or fully in sync but not stamp values are not normalized yet.:::return
Calendar#isFullyNormalized():::Returns whether the calendar fields are fully in sync with the time value.:::return
Calendar#setUnnormalized():::Marks this Calendar as not sync'd.:::
Calendar#isFieldSet(int, int):::Returns whether the specified field is on in the fieldMask.:::return
Calendar#selectFields():::Returns a field mask indicating which calendar field values to be used to calculate the time value:::fieldMask->if->dowStamp->monthStamp->domStamp->womStamp->aggregateStamp->dowimStamp->aggregateStamp->doyStamp->woyStamp->aggregateStamp->bestStamp->if->if->if->if->if->Math->max->Math->Math->max->max->if->if->if->else->if->if->if->else->else->if->else->if->else->if->else->if->hourOfDayStamp->hourStamp->aggregateStamp->if->Math->max->if->if->else->if->if->if->if->if->if->return
Calendar#getAvailableCalendarTypes():::Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment:::return
Calendar#getCalendarType():::Returns the calendar type of this Calendar:::return->this->getClass->getName
Calendar#equals(Object):::Compares this Calendar to the specified Object:::if->return->try->that->return->getMillisOf->compareTo->zone->equals->catch->finally->return
Calendar#hashCode():::Returns a hash code for this calendar.:::otheritems->zone->hashCode->t->getMillisOf->return
Calendar#before(Object):::Returns whether this Calendar represents a time before the time represented by the specified Object:::return->compareTo
Calendar#after(Object):::Returns whether this Calendar represents a time after the time represented by the specified Object:::return->compareTo
Calendar#compareTo(Calendar):::Compares the time values (millisecond offsets from the Epoch) represented by two Calendar objects.:::return->getMillisOf->compareTo
Calendar#add(int, int):::Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules:::
Calendar#roll(int, boolean):::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields:::
Calendar#roll(int, int):::Adds the specified (signed) amount to the specified calendar field without changing larger fields:::while->roll->while->roll
Calendar#setTimeZone(TimeZone):::Sets the time zone with the given time zone value.:::
Calendar#getTimeZone():::Gets the time zone.:::if->zone->clone->return
Calendar#getZone():::Returns the time zone (without cloning).:::return
Calendar#setZoneShared(boolean):::Sets the sharedZone flag to shared.:::
Calendar#setLenient(boolean):::Specifies whether or not date/time interpretation is to be lenient:::
Calendar#isLenient():::Tells whether date/time interpretation is to be lenient.:::return
Calendar#setFirstDayOfWeek(int):::Sets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.:::if->return->invalidateWeekFields
Calendar#getFirstDayOfWeek():::Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.:::return
Calendar#setMinimalDaysInFirstWeek(int):::Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1:::if->return->invalidateWeekFields
Calendar#getMinimalDaysInFirstWeek():::Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1:::return
Calendar#isWeekDateSupported():::Returns whether this Calendar supports week dates:::return
Calendar#getWeekYear():::Returns the week year represented by this Calendar:::throw->new->UnsupportedOperationException
Calendar#setWeekDate(int, int, int):::Sets the date of this Calendar with the given date specifiers - week year, week of year, and day of week:::throw->new->UnsupportedOperationException
Calendar#getWeeksInWeekYear():::Returns the number of weeks in the week year represented by this Calendar:::throw->new->UnsupportedOperationException
Calendar#getMinimum(int):::Returns the minimum value for the given calendar field of this Calendar instance:::
Calendar#getMaximum(int):::Returns the maximum value for the given calendar field of this Calendar instance:::
Calendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this Calendar instance:::
Calendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this Calendar instance:::
Calendar#getActualMinimum(int):::Returns the minimum value that the specified calendar field could have, given the time value of this Calendar:::fieldValue->getGreatestMinimum->endValue->getMinimum->if->return->work->this->clone->work->setLenient->result->do->work->set->if->work->get->break->else->while->return
Calendar#getActualMaximum(int):::Returns the maximum value that the specified calendar field could have, given the time value of this Calendar:::fieldValue->getLeastMaximum->endValue->getMaximum->if->return->work->this->clone->work->setLenient->if->work->set->result->do->work->set->if->work->get->break->else->while->return
Calendar#clone():::Creates and returns a copy of this object.:::try->other->super->clone->new->intArr->new->booleanArr->new->intArr->for->i->zone->clone->return->catch->throw->new->InternalError->finally
Calendar#getFieldName(int):::Returns the name of the specified calendar field.:::return
Calendar#toString():::Return a string representation of this calendar:::buffer->new->StringBuilder->buffer->getClass->getName->append->append->appendValue->buffer->append->append->buffer->append->append->buffer->append->append->buffer->append->append->appendValue->appendValue->for->i->buffer->append->return->buffer->toString
Calendar#toInstant():::Converts this object to an Instant:::return->Instant->getTimeInMillis->ofEpochMilli
Collection#size():::Returns the number of elements in this collection:::
Collection#isEmpty():::Returns true if this collection contains no elements.:::
Collection#contains(Object):::Returns true if this collection contains the specified element:::
Collection#iterator():::Returns an iterator over the elements in this collection:::
Collection#toArray():::Returns an array containing all of the elements in this collection:::
Collection#toArray(T[]):::Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array:::
Collection#toArray(IntFunction):::Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array:::return->generator->apply->toArray
Collection#add(E):::Ensures that this collection contains the specified element (optional operation):::
Collection#remove(Object):::Removes a single instance of the specified element from this collection, if it is present (optional operation):::
Collection#containsAll(Collection):::Returns true if this collection contains all of the elements in the specified collection.:::
Collection#addAll(Collection):::Adds all of the elements in the specified collection to this collection (optional operation):::
Collection#removeAll(Collection):::Removes all of this collection's elements that are also contained in the specified collection (optional operation):::
Collection#removeIf(Predicate):::Removes all of the elements of this collection that satisfy the given predicate:::Objects->requireNonNull->removed->each->iterator->while->each->hasNext->if->filter->each->next->test->each->remove->return
Collection#retainAll(Collection):::Retains only the elements in this collection that are contained in the specified collection (optional operation):::
Collection#clear():::Removes all of the elements from this collection (optional operation):::
Collection#equals(Object):::Compares the specified object with this collection for equality:::
Collection#hashCode():::Returns the hash code value for this collection:::
Collection#spliterator():::Creates a Spliterator over the elements in this collection:::return->Spliterators->spliterator
Collection#stream():::Returns a sequential Stream with this collection as its source:::return->StreamSupport->spliterator->stream
Collection#parallelStream():::Returns a possibly parallel Stream with this collection as its source:::return->StreamSupport->spliterator->stream
Collections#sort(List):::Sorts the specified list into ascending order, according to the Comparable natural ordering of its elements:::list->sort
Collections#sort(List, Comparator):::Sorts the specified list according to the order induced by the specified comparator:::list->sort
Collections#binarySearch(List>, T):::Searches the specified list for the specified object using the binary search algorithm:::if->list->size->return->Collections->indexedBinarySearch->else->return->Collections->iteratorBinarySearch
Collections#binarySearch(List, T, Comparator):::Searches the specified list for the specified object using the binary search algorithm:::if->return->binarySearch->if->list->size->return->Collections->indexedBinarySearch->else->return->Collections->iteratorBinarySearch
Collections#reverse(List):::Reverses the order of the elements in the specified list.  This method runs in linear time.:::size->list->size->if->for->i->mid->j->else->fwd->list->listIterator->rev->list->listIterator->for->i->mid->list->size
Collections#shuffle(List):::Randomly permutes the specified list using a default source of randomness:::rnd->if->new->Random->shuffle
Collections#shuffle(List, Random):::Randomly permute the specified list using the specified source of randomness:::size->list->size->if->for->i->else->arr->list->toArray->for->i->it->list->listIterator->foreach->it->next->it->set
Collections#swap(List, int, int):::Swaps the elements at the specified positions in the specified list:::l->l->l->l->get->set->set
Collections#fill(List, T):::Replaces all of the elements of the specified list with the specified element:::size->list->size->if->for->i->else->itr->list->listIterator->for->i
Collections#copy(List, List):::Copies all of the elements from one list into another:::srcSize->src->size->if->dest->size->throw->new->IndexOutOfBoundsException->if->for->i->else->di->dest->listIterator->si->src->listIterator->for->i
Collections#min(Collection):::Returns the minimum element of the given collection, according to the natural ordering of its elements:::i->coll->iterator->candidate->i->next->while->i->hasNext->next->i->next->if->next->compareTo->return
Collections#min(Collection, Comparator):::Returns the minimum element of the given collection, according to the order induced by the specified comparator:::if->return->min->i->coll->iterator->candidate->i->next->while->i->hasNext->next->i->next->if->comp->compare->return
Collections#max(Collection):::Returns the maximum element of the given collection, according to the natural ordering of its elements:::i->coll->iterator->candidate->i->next->while->i->hasNext->next->i->next->if->next->compareTo->return
Collections#max(Collection, Comparator):::Returns the maximum element of the given collection, according to the order induced by the specified comparator:::if->return->max->i->coll->iterator->candidate->i->next->while->i->hasNext->next->i->next->if->comp->compare->return
Collections#rotate(List, int):::Rotates the elements in the specified list by the specified distance:::if->list->size->rotate1->else->rotate2
Collections#replaceAll(List, T, T):::Replaces all occurrences of one specified value in a list with another:::result->size->list->size->if->if->for->i->else->for->i->else->itr->list->listIterator->if->for->i->else->for->i->return
Collections#indexOfSubList(List, List):::Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence:::sourceSize->source->size->targetSize->target->size->maxCandidate->if->for->candidate->else->si->source->listIterator->for->candidate->return
Collections#lastIndexOfSubList(List, List):::Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence:::sourceSize->source->size->targetSize->target->size->maxCandidate->if->for->candidate->else->if->return->si->source->listIterator->for->candidate->return
Collections#unmodifiableCollection(Collection):::Returns an unmodifiable view of the specified collection:::return->new->UnmodifiableCollection<>
Collections#unmodifiableSet(Set):::Returns an unmodifiable view of the specified set:::return->new->UnmodifiableSet<>
Collections#unmodifiableSortedSet(SortedSet):::Returns an unmodifiable view of the specified sorted set:::return->new->UnmodifiableSortedSet<>
Collections#unmodifiableNavigableSet(NavigableSet):::Returns an unmodifiable view of the specified navigable set:::return->new->UnmodifiableNavigableSet<>
Collections#unmodifiableList(List):::Returns an unmodifiable view of the specified list:::return->new->UnmodifiableRandomAccessList<>->new->UnmodifiableList<>
Collections#unmodifiableMap(Map):::Returns an unmodifiable view of the specified map:::return->new->UnmodifiableMap<>
Collections#unmodifiableSortedMap(SortedMap):::Returns an unmodifiable view of the specified sorted map:::return->new->UnmodifiableSortedMap<>
Collections#unmodifiableNavigableMap(NavigableMap):::Returns an unmodifiable view of the specified navigable map:::return->new->UnmodifiableNavigableMap<>
Collections#synchronizedCollection(Collection):::Returns a synchronized (thread-safe) collection backed by the specified collection:::return->new->SynchronizedCollection<>
Collections#synchronizedSet(Set):::Returns a synchronized (thread-safe) set backed by the specified set:::return->new->SynchronizedSet<>
Collections#synchronizedSortedSet(SortedSet):::Returns a synchronized (thread-safe) sorted set backed by the specified sorted set:::return->new->SynchronizedSortedSet<>
Collections#synchronizedNavigableSet(NavigableSet):::Returns a synchronized (thread-safe) navigable set backed by the specified navigable set:::return->new->SynchronizedNavigableSet<>
Collections#synchronizedList(List):::Returns a synchronized (thread-safe) list backed by the specified list:::return->new->SynchronizedRandomAccessList<>->new->SynchronizedList<>
Collections#synchronizedMap(Map):::Returns a synchronized (thread-safe) map backed by the specified map:::return->new->SynchronizedMap<>
Collections#synchronizedSortedMap(SortedMap):::Returns a synchronized (thread-safe) sorted map backed by the specified sorted map:::return->new->SynchronizedSortedMap<>
Collections#synchronizedNavigableMap(NavigableMap):::Returns a synchronized (thread-safe) navigable map backed by the specified navigable map:::return->new->SynchronizedNavigableMap<>
Collections#checkedCollection(Collection, Class):::Returns a dynamically typesafe view of the specified collection:::return->new->CheckedCollection<>
Collections#checkedQueue(Queue, Class):::Returns a dynamically typesafe view of the specified queue:::return->new->CheckedQueue<>
Collections#checkedSet(Set, Class):::Returns a dynamically typesafe view of the specified set:::return->new->CheckedSet<>
Collections#checkedSortedSet(SortedSet, Class):::Returns a dynamically typesafe view of the specified sorted set:::return->new->CheckedSortedSet<>
Collections#checkedNavigableSet(NavigableSet, Class):::Returns a dynamically typesafe view of the specified navigable set:::return->new->CheckedNavigableSet<>
Collections#checkedList(List, Class):::Returns a dynamically typesafe view of the specified list:::return->new->CheckedRandomAccessList<>->new->CheckedList<>
Collections#checkedMap(Map, Class, Class):::Returns a dynamically typesafe view of the specified map:::return->new->CheckedMap<>
Collections#checkedSortedMap(SortedMap, Class, Class):::Returns a dynamically typesafe view of the specified sorted map:::return->new->CheckedSortedMap<>
Collections#checkedNavigableMap(NavigableMap, Class, Class):::Returns a dynamically typesafe view of the specified navigable map:::return->new->CheckedNavigableMap<>
Collections#emptyIterator():::Returns an iterator that has no elements:::return
Collections#emptyListIterator():::Returns a list iterator that has no elements:::return
Collections#emptyEnumeration():::Returns an enumeration that has no elements:::return
Collections#emptySet():::Returns an empty set (immutable):::return
Collections#emptySortedSet():::Returns an empty sorted set (immutable):::return
Collections#emptyNavigableSet():::Returns an empty navigable set (immutable):::return
Collections#emptyList():::Returns an empty list (immutable):::return
Collections#emptyMap():::Returns an empty map (immutable):::return
Collections#emptySortedMap():::Returns an empty sorted map (immutable):::return
Collections#emptyNavigableMap():::Returns an empty navigable map (immutable):::return
Collections#singleton(T):::Returns an immutable set containing only the specified object:::return->new->SingletonSet<>
Collections#singletonSpliterator(T):::Creates a Spliterator with only the specified element:::return->new->Spliterator<T>
Collections#singletonList(T):::Returns an immutable list containing only the specified object:::return->new->SingletonList<>
Collections#singletonMap(K, V):::Returns an immutable map, mapping only the specified key to the specified value:::return->new->SingletonMap<>
Collections#nCopies(int, T):::Returns an immutable list consisting of n copies of the specified object:::if->throw->new->IllegalArgumentException->return->new->CopiesList<>
Collections#reverseOrder():::Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface:::return
Collections#reverseOrder(Comparator):::Returns a comparator that imposes the reverse ordering of the specified comparator:::if->return->else->if->return->else->if->return->else->if->return->else->return->new->ReverseComparator2<>
Collections#enumeration(Collection):::Returns an enumeration over the specified collection:::return->new->Enumeration<T>
Collections#list(Enumeration):::Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration:::l->new->ArrayList<>->while->e->hasMoreElements->l->e->nextElement->add->return
Collections#eq(Object, Object):::Returns true if the specified arguments are equal, or both null:::return->o1->equals
Collections#frequency(Collection, Object):::Returns the number of elements in the specified collection equal to the specified object:::result->if->foreach->if->else->foreach->if->o->equals->return
Collections#disjoint(Collection, Collection):::Returns true if the two specified collections have no elements in common:::contains->iterate->if->else->if->c1size->c1->size->c2size->c2->size->if->return->if->foreach->if->contains->contains->return->return
Collections#addAll(Collection, T...):::Adds all of the specified elements to the specified collection:::result->foreach->c->add->return
Collections#newSetFromMap(Map):::Returns a set backed by the specified map:::return->new->SetFromMap<>
Collections#asLifoQueue(Deque):::Returns a view of a Deque as a Last-in-first-out (Lifo) Queue:::return->Objects->requireNonNull->new->AsLIFOQueue<>
ComparableTimSort#sort(Object[], int, int, Object[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible:::nRemaining->if->return->if->initRunLen->countRunAndMakeAscending->binarySort->return->ts->new->ComparableTimSort->minRun->minRunLength->do->runLen->countRunAndMakeAscending->if->force->binarySort->ts->pushRun->ts->mergeCollapse->while->ts->mergeForceCollapse
Comparator#compare(T, T):::Compares its two arguments for order:::
Comparator#equals(Object):::Indicates whether some other object is &quot;equal to&quot; this comparator:::
Comparator#reversed():::Returns a comparator that imposes the reverse ordering of this comparator.:::return->Collections->reverseOrder
Comparator#thenComparing(Comparator):::Returns a lexicographic-order comparator with another comparator:::Objects->requireNonNull->return->res->compare->return->other->compare
Comparator#thenComparing(Function, Comparator):::Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.:::return->comparing->thenComparing
Comparator#thenComparing(Function):::Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.:::return->comparing->thenComparing
Comparator#thenComparingInt(ToIntFunction):::Returns a lexicographic-order comparator with a function that extracts an int sort key.:::return->comparingInt->thenComparing
Comparator#thenComparingLong(ToLongFunction):::Returns a lexicographic-order comparator with a function that extracts a long sort key.:::return->comparingLong->thenComparing
Comparator#thenComparingDouble(ToDoubleFunction):::Returns a lexicographic-order comparator with a function that extracts a double sort key.:::return->comparingDouble->thenComparing
Comparator#reverseOrder():::Returns a comparator that imposes the reverse of the natural ordering:::return->Collections->reverseOrder
Comparator#naturalOrder():::Returns a comparator that compares Comparable objects in natural order:::return
Comparator#nullsFirst(Comparator):::Returns a null-friendly comparator that considers null to be less than non-null:::return->new->Comparators.NullComparator<>
Comparator#nullsLast(Comparator):::Returns a null-friendly comparator that considers null to be greater than non-null:::return->new->Comparators.NullComparator<>
Comparator#comparing(Function, Comparator):::Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator:::Objects->requireNonNull->Objects->requireNonNull->return->keyComparator->keyExtractor->apply->keyExtractor->apply->compare
Comparator#comparing(Function):::Accepts a function that extracts a java.lang.Comparable Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key:::Objects->requireNonNull->return->keyExtractor->apply->keyExtractor->apply->compareTo
Comparator#comparingInt(ToIntFunction):::Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key:::Objects->requireNonNull->return->Integer->keyExtractor->applyAsInt->keyExtractor->applyAsInt->compare
Comparator#comparingLong(ToLongFunction):::Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key:::Objects->requireNonNull->return->Long->keyExtractor->applyAsLong->keyExtractor->applyAsLong->compare
Comparator#comparingDouble(ToDoubleFunction):::Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key:::Objects->requireNonNull->return->Double->keyExtractor->applyAsDouble->keyExtractor->applyAsDouble->compare
Currency#getInstance(String):::Returns the Currency instance for the given currency code.:::return->getInstance
Currency#getInstance(Locale):::Returns the Currency instance for the country of the given locale:::override->locale->getUnicodeLocaleType->if->try->return->override->toUpperCase->getInstance->catch->finally->country->CalendarDataUtility->findRegionOverride->getCountry->if->country->matches->throw->new->IllegalArgumentException->char1->country->charAt->char2->country->charAt->tableEntry->getMainTableEntry->if->finalChar->defaultFractionDigits->numericCode->sb->new->StringBuilder->sb->append->return->sb->toString->getInstance->else->if->throw->new->IllegalArgumentException->if->return->else->index->SpecialCaseEntry->toIndex->scEntry->specialCasesList->get->if->System->currentTimeMillis->return->getInstance->else->return->getInstance
Currency#getAvailableCurrencies():::Gets the set of available currencies:::synchronized->if->new->HashSet<>->for->c1->foreach->available->getInstance->add->result->available->clone->return
Currency#getCurrencyCode():::Gets the ISO 4217 currency code of this currency.:::return
Currency#getSymbol():::Gets the symbol of this currency for the default Locale.Category#DISPLAY DISPLAY locale:::return->Locale->getDefault->getSymbol
Currency#getSymbol(Locale):::Gets the symbol of this currency for the specified locale:::pool->LocaleServiceProviderPool->getPool->CalendarDataUtility->findRegionOverride->symbol->pool->getLocalizedObject->if->return->return
Currency#getDefaultFractionDigits():::Gets the default number of fraction digits used with this currency:::return
Currency#getNumericCode():::Returns the ISO 4217 numeric code of this currency.:::return
Currency#getNumericCodeAsString():::Returns the 3 digit ISO 4217 numeric code of this currency as a String:::if->sb->new->StringBuilder->sb->append->if->sb->append->return->sb->append->toString->return->String->valueOf
Currency#getDisplayName():::Gets the name that is suitable for displaying this currency for the default Locale.Category#DISPLAY DISPLAY locale:::return->Locale->getDefault->getDisplayName
Currency#getDisplayName(Locale):::Gets the name that is suitable for displaying this currency for the specified locale:::pool->LocaleServiceProviderPool->getPool->result->pool->getLocalizedObject->if->return->return
Currency#toString():::Returns the ISO 4217 currency code of this currency.:::return
Date#clone():::Return a copy of this object.:::d->try->super->clone->if->cdate->clone->catch->finally->return
Date#UTC(int, int, int, int, int, int):::Determines the date and time based on the arguments:::y->if->else->if->CalendarUtils->floorDivide->CalendarUtils->mod->m->cal->getCalendarSystem->udate->cal->newCalendarDate->udate->setNormalizedDate->setTimeOfDay->d->new->Date->d->normalize->return
Date#parse(String):::Attempts to interpret the string s as a representation of a date and time:::year->mon->mday->hour->min->sec->millis->c->i->n->wst->tzoffset->prevc->if->break->limit->s->length->while->s->charAt->if->continue->if->depth->while->s->charAt->if->else->if->if->break->continue->if->while->s->charAt->if->if->else->if->if->break->else->if->if->break->else->if->else->break->else->if->if->else->if->else->break->else->if->if->else->if->else->break->else->if->break->else->if->else->if->else->if->else->if->else->break->else->if->else->st->while->s->charAt->if->break->if->break->k->for->if->break->if->break->if->synchronized->if->gcal->getCalendarDate->getYear->if->if->if->if->cal->getCalendarSystem->if->ldate->cal->TimeZone->getDefaultRef->newCalendarDate->ldate->setDate->ldate->setTimeOfDay->return->cal->getTime->udate->cal->newCalendarDate->udate->setDate->udate->setTimeOfDay->return->cal->getTime->throw->new->IllegalArgumentException
Date#getYear():::Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.:::return->normalize->getYear
Date#setYear(int):::Sets the year of this Date object to be the specified value plus 1900:::getCalendarDate->setNormalizedYear
Date#getMonth():::Returns a number representing the month that contains or begins with the instant in time represented by this Date object:::return->normalize->getMonth
Date#setMonth(int):::Sets the month of this date to the specified value:::y->if->else->if->CalendarUtils->floorDivide->CalendarUtils->mod->d->getCalendarDate->if->d->d->getNormalizedYear->setNormalizedYear->d->setMonth
Date#getDate():::Returns the day of the month represented by this Date object:::return->normalize->getDayOfMonth
Date#setDate(int):::Sets the day of the month of this Date object to the specified value:::getCalendarDate->setDayOfMonth
Date#getDay():::Returns the day of the week represented by this date:::return->normalize->getDayOfWeek
Date#getHours():::Returns the hour represented by this Date object:::return->normalize->getHours
Date#setHours(int):::Sets the hour of this Date object to the specified value:::getCalendarDate->setHours
Date#getMinutes():::Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone:::return->normalize->getMinutes
Date#setMinutes(int):::Sets the minutes of this Date object to the specified value:::getCalendarDate->setMinutes
Date#getSeconds():::Returns the number of seconds past the minute represented by this date:::return->normalize->getSeconds
Date#setSeconds(int):::Sets the seconds of this Date to the specified value:::getCalendarDate->setSeconds
Date#getTime():::Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object.:::return->getTimeImpl
Date#setTime(long):::Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.:::
Date#before(Date):::Tests if this date is before the specified date.:::return->getMillisOf->getMillisOf
Date#after(Date):::Tests if this date is after the specified date.:::return->getMillisOf->getMillisOf
Date#equals(Object):::Compares two dates for equality:::return->getTime->getTime
Date#getMillisOf(Date):::Returns the millisecond value of this Date object without affecting its internal state.:::if->date->getClass->return->date->getTime->if->isNormalized->return->d->clone->return->gcal->getTime
Date#compareTo(Date):::Compares two Dates for ordering.:::thisTime->getMillisOf->anotherTime->getMillisOf->return
Date#hashCode():::Returns a hash code value for this object:::ht->this->getTime->return
Date#toString():::Converts this Date object to a String of the form:  dow mon dd hh:mm:ss zzz yyyy where:<ul> <li>dow is the day of the week (Sun, Mon, Tue, Wed,     Thu, Fri, Sat):::date->normalize->sb->new->StringBuilder->index->date->getDayOfWeek->if->convertToAbbr->append->date->getMonth->convertToAbbr->append->CalendarUtils->date->getDayOfMonth->sprintf0d->append->CalendarUtils->date->getHours->sprintf0d->append->CalendarUtils->date->getMinutes->sprintf0d->append->CalendarUtils->date->getSeconds->sprintf0d->append->zi->date->getZone->if->sb->zi->date->isDaylightTime->getDisplayName->append->else->sb->append->sb->append->date->getYear->append->return->sb->toString
Date#toLocaleString():::Creates a string representation of this Date object in an implementation-dependent form:::formatter->DateFormat->getDateTimeInstance->return->formatter->format
Date#toGMTString():::Creates a string representation of this Date object of the form:  d mon yyyy hh:mm:ss GMT where:<ul> <li>d is the day of the month (1 through 31),     as one or two decimal digits:::t->getTime->cal->getCalendarSystem->date->cal->getTime->getCalendarDate->sb->new->StringBuilder->CalendarUtils->date->getDayOfMonth->sprintf0d->append->date->getMonth->convertToAbbr->append->sb->date->getYear->append->append->CalendarUtils->date->getHours->sprintf0d->append->CalendarUtils->date->getMinutes->sprintf0d->append->CalendarUtils->date->getSeconds->sprintf0d->sb->append->return->sb->toString
Date#getTimezoneOffset():::Returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this Date object:::zoneOffset->if->tz->TimeZone->getDefaultRef->if->getOffsets->else->tz->getOffset->else->normalize->cdate->getZoneOffset->return
Date#from(Instant):::Obtains an instance of Date from an Instant object:::try->return->instant->toEpochMilli->new->Date->catch->throw->new->IllegalArgumentException->finally
Date#toInstant():::Converts this Date object to an Instant:::return->Instant->getTime->ofEpochMilli
Deque#addFirst(E):::Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available:::
Deque#addLast(E):::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available:::
Deque#offerFirst(E):::Inserts the specified element at the front of this deque unless it would violate capacity restrictions:::
Deque#offerLast(E):::Inserts the specified element at the end of this deque unless it would violate capacity restrictions:::
Deque#removeFirst():::Retrieves and removes the first element of this deque:::
Deque#removeLast():::Retrieves and removes the last element of this deque:::
Deque#pollFirst():::Retrieves and removes the first element of this deque, or returns null if this deque is empty.:::
Deque#pollLast():::Retrieves and removes the last element of this deque, or returns null if this deque is empty.:::
Deque#getFirst():::Retrieves, but does not remove, the first element of this deque:::
Deque#getLast():::Retrieves, but does not remove, the last element of this deque:::
Deque#peekFirst():::Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.:::
Deque#peekLast():::Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.:::
Deque#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element from this deque:::
Deque#removeLastOccurrence(Object):::Removes the last occurrence of the specified element from this deque:::
Deque#add(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available:::
Deque#offer(E):::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available:::
Deque#remove():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque):::
Deque#poll():::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty:::
Deque#element():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque):::
Deque#peek():::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty:::
Deque#addAll(Collection):::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator:::
Deque#push(E):::Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available:::
Deque#pop():::Pops an element from the stack represented by this deque:::
Deque#remove(Object):::Removes the first occurrence of the specified element from this deque:::
Deque#contains(Object):::Returns true if this deque contains the specified element:::
Deque#size():::Returns the number of elements in this deque.:::
Deque#iterator():::Returns an iterator over the elements in this deque in proper sequence:::
Deque#descendingIterator():::Returns an iterator over the elements in this deque in reverse sequential order:::
Dictionary#size():::Returns the number of entries (distinct keys) in this dictionary.:::
Dictionary#isEmpty():::Tests if this dictionary maps no keys to value:::
Dictionary#keys():::Returns an enumeration of the keys in this dictionary:::
Dictionary#elements():::Returns an enumeration of the values in this dictionary:::
Dictionary#get(Object):::Returns the value to which the key is mapped in this dictionary:::
Dictionary#put(K, V):::Maps the specified key to the specified value in this dictionary:::
Dictionary#remove(Object):::Removes the key (and its corresponding value) from this dictionary:::
DoubleSummaryStatistics#accept(double):::Records another value into the summary information.:::sumWithCompensation->Math->min->Math->max
DoubleSummaryStatistics#combine(DoubleSummaryStatistics):::Combines the state of another DoubleSummaryStatistics into this one.:::sumWithCompensation->sumWithCompensation->Math->min->Math->max
DoubleSummaryStatistics#getCount():::Return the count of values recorded.:::return
DoubleSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded:::tmp->if->Double->isNaN->Double->isInfinite->return->else->return
DoubleSummaryStatistics#getMin():::Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded:::return
DoubleSummaryStatistics#getMax():::Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded:::return
DoubleSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded:::return->getCount->getSum->getCount
DoubleSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging:::return->String->this->getClass->getSimpleName->getCount->getSum->getMin->getAverage->getMax->format
DualPivotQuicksort#sort(int[], int, int, int[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::if->sort->return->run->new->intArr->count->for->k->if->return->else->if->return->if->odd->for->n->b->ao->bo->blen->if->new->intArr->if->System->arraycopy->else->for->last
DualPivotQuicksort#sort(long[], int, int, long[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::if->sort->return->run->new->intArr->count->for->k->if->return->else->if->return->if->odd->for->n->b->ao->bo->blen->if->new->longArr->if->System->arraycopy->else->for->last
DualPivotQuicksort#sort(short[], int, int, short[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::if->count->new->intArr->for->i->for->i->k->else->doSort
DualPivotQuicksort#sort(char[], int, int, char[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::if->count->new->intArr->for->i->for->i->k->else->doSort
DualPivotQuicksort#sort(byte[], int, int):::Sorts the specified range of the array.:::if->count->new->intArr->for->i->for->i->k->else->for->i->j
DualPivotQuicksort#sort(float[], int, int, float[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::while->Float->isNaN->for->k->doSort->hi->while->middle->middleValue->if->else->while->Float->floatToRawIntBits->for->k->p
DualPivotQuicksort#sort(double[], int, int, double[], int, int):::Sorts the specified range of the array using the given workspace array slice if possible for merging:::while->Double->isNaN->for->k->doSort->hi->while->middle->middleValue->if->else->while->Double->doubleToRawLongBits->for->k->p
DuplicateFormatFlagsException#getFlags():::Returns the set of flags which contains a duplicate flag.:::return
Enumeration#hasMoreElements():::Tests if this enumeration contains more elements.:::
Enumeration#nextElement():::Returns the next element of this enumeration if this enumeration object has at least one more element to provide.:::
Enumeration#asIterator():::Returns an Iterator that traverses the remaining elements covered by this enumeration:::return->new->Iterator<>
EnumMap#size():::Returns the number of key-value mappings in this map.:::return
EnumMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.:::maskNull->foreach->if->value->equals->return->return
EnumMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.:::return->isValidKey->ordinal
EnumMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::return->isValidKey->ordinal->unmaskNull
EnumMap#put(K, V):::Associates the specified value with the specified key in this map:::typeCheck->index->key->ordinal->oldValue->maskNull->if->return->unmaskNull
EnumMap#remove(Object):::Removes the mapping for this key from this map if present.:::if->isValidKey->return->index->ordinal->oldValue->if->return->unmaskNull
EnumMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::if->em->if->if->em->isEmpty->return->throw->new->ClassCastException->for->i->else->super->putAll
EnumMap#clear():::Removes all mappings from this map.:::Arrays->fill
EnumMap#keySet():::Returns a Set view of the keys contained in this map:::ks->if->new->KeySet->return
EnumMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
EnumMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->if->return->else->return->new->EntrySet
EnumMap#equals(Object):::Compares the specified object with this map for equality:::if->return->if->return->equals->if->return->m->if->m->size->return->for->i->return
EnumMap#hashCode():::Returns the hash code value for this map:::h->for->i->return
EnumMap#clone():::Returns a shallow copy of this enum map:::result->try->super->clone->catch->throw->new->AssertionError->finally->clone->return
EnumSet#noneOf(Class):::Creates an empty enum set with the specified element type.:::universe->getUniverse->if->throw->new->ClassCastException->if->return->new->RegularEnumSet<>->else->return->new->JumboEnumSet<>
EnumSet#allOf(Class):::Creates an enum set containing all of the elements in the specified element type.:::result->noneOf->result->addAll->return
EnumSet#addAll():::Adds all of the elements from the appropriate enum type to this enum set, which is empty prior to the call.:::
EnumSet#copyOf(EnumSet):::Creates an enum set with the same element type as the specified enum set, initially containing the same elements (if any).:::return->s->clone
EnumSet#copyOf(Collection):::Creates an enum set initialized from the specified collection:::if->return->clone->else->if->c->isEmpty->throw->new->IllegalArgumentException->i->c->iterator->first->i->next->result->EnumSet->of->while->i->hasNext->result->i->next->add->return
EnumSet#complementOf(EnumSet):::Creates an enum set with the same element type as the specified enum set, initially containing all the elements of this type that are not contained in the specified set.:::result->copyOf->result->complement->return
EnumSet#of(E):::Creates an enum set initially containing the specified element:::result->e->getDeclaringClass->noneOf->result->add->return
EnumSet#of(E, E):::Creates an enum set initially containing the specified elements:::result->e1->getDeclaringClass->noneOf->result->add->result->add->return
EnumSet#of(E, E, E):::Creates an enum set initially containing the specified elements:::result->e1->getDeclaringClass->noneOf->result->add->result->add->result->add->return
EnumSet#of(E, E, E, E):::Creates an enum set initially containing the specified elements:::result->e1->getDeclaringClass->noneOf->result->add->result->add->result->add->result->add->return
EnumSet#of(E, E, E, E, E):::Creates an enum set initially containing the specified elements:::result->e1->getDeclaringClass->noneOf->result->add->result->add->result->add->result->add->result->add->return
EnumSet#of(E, E...):::Creates an enum set initially containing the specified elements:::result->first->getDeclaringClass->noneOf->result->add->foreach->result->add->return
EnumSet#range(E, E):::Creates an enum set initially containing all of the elements in the range defined by the two specified endpoints:::if->from->compareTo->throw->new->IllegalArgumentException->result->from->getDeclaringClass->noneOf->result->addRange->return
EnumSet#addRange(E, E):::Adds the specified range to this enum set, which is empty prior to the call.:::
EnumSet#clone():::Returns a copy of this set.:::try->return->super->clone->catch->throw->new->AssertionError->finally
EnumSet#complement():::Complements the contents of this enum set.:::
EnumSet#typeCheck(E):::Throws an exception if e is not of the correct type for this enum set.:::eClass->e->getClass->if->eClass->getSuperclass->throw->new->ClassCastException
EnumSet#writeReplace():::Returns a  SerializationProxy representing the state of this instance.:::return->new->SerializationProxy<>
EventListenerProxy#getListener():::Returns the listener associated with the proxy.:::return
EventObject#getSource():::The object on which the Event initially occurred.:::return
EventObject#toString():::Returns a String representation of this EventObject.:::return->getClass->getName
FormatFlagsConversionMismatchException#getFlags():::Returns the incompatible flag.:::return
FormatFlagsConversionMismatchException#getConversion():::Returns the incompatible conversion.:::return
Formattable#formatTo(Formatter, int, int, int):::Formats the object using the provided Formatter formatter.:::
Formatter#locale():::Returns the locale set by the construction of this formatter:::ensureOpen->return
Formatter#out():::Returns the destination for the output.:::ensureOpen->return
Formatter#toString():::Returns the result of invoking toString() on the destination for the output:::ensureOpen->return->a->toString
Formatter#flush():::Flushes this formatter:::ensureOpen->if->try->flush->catch->finally
Formatter#close():::Closes this formatter:::if->return->try->if->close->catch->finally
Formatter#ioException():::Returns the IOException last thrown by this formatter's Appendable:::return
Formatter#format(String, Object...):::Writes a formatted string to this object's destination using the specified format string and arguments:::return->format
Formatter#format(Locale, String, Object...):::Writes a formatted string to this object's destination using the specified locale, format string, and arguments.:::ensureOpen->last->lasto->fsa->parse->foreach->index->fs->index->try->switch->fs->print->break->if->throw->fs->toString->new->MissingFormatArgumentException->fs->print->break->if->throw->fs->toString->new->MissingFormatArgumentException->fs->print->break->if->throw->fs->toString->new->MissingFormatArgumentException->fs->print->break->catch->finally->return
GregorianCalendar#setGregorianChange(Date):::Sets the GregorianCalendar change date:::cutoverTime->date->getTime->if->return->complete->setGregorianChange
GregorianCalendar#getGregorianChange():::Gets the Gregorian Calendar change date:::return->new->Date
GregorianCalendar#isLeapYear(int):::Determines if the given year is a leap year:::if->return->if->return->if->return->gregorian->if->d->getCalendarDate->d->getMonth->else->return
GregorianCalendar#getCalendarType():::Returns "gregory" as the calendar type.:::return
GregorianCalendar#equals(Object):::Compares this GregorianCalendar to the specified Object:::return->super->equals
GregorianCalendar#hashCode():::Generates the hash code for this GregorianCalendar object.:::return->super->hashCode
GregorianCalendar#add(int, int):::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules:::if->return->if->throw->new->IllegalArgumentException->complete->if->year->internalGet->if->internalGetEra->if->set->else->set->set->else->if->set->else->set->set->pinDayOfMonth->else->if->month->internalGet->year->internalGet->y_amount->if->else->if->if->internalGetEra->if->set->else->set->set->else->if->set->else->set->set->if->set->else->if->set->pinDayOfMonth->else->if->era->internalGet->if->if->set->else->delta->timeOfDay->switch->break->break->break->break->break->break->break->if->setTimeInMillis->return->fd->getCurrentFixedDate->internalGet->internalGet->internalGet->internalGet->if->else->if->zoneOffset->internalGet->internalGet->setTimeInMillis->internalGet->internalGet->if->setTimeInMillis->fd2->getCurrentFixedDate->if->setTimeInMillis
GregorianCalendar#roll(int, boolean):::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields:::roll
GregorianCalendar#roll(int, int):::Adds a signed amount to the specified calendar field without changing larger fields:::if->return->if->throw->new->IllegalArgumentException->complete->min->getMinimum->max->getMaximum->switch->break->rolledValue->internalGet->getRolledValue->hourOfDay->if->internalGet->d->calsys->getZone->getCalendarDate->d->setHours->calsys->getTime->if->internalGet->d->getHours->getRolledValue->if->internalGet->d->setHours->calsys->getTime->d->getHours->internalSet->internalSet->internalSet->zoneOffset->d->getZoneOffset->saving->d->getDaylightSaving->internalSet->internalSet->return->if->cdate->getNormalizedYear->isCutoverYear->mon->internalGet->if->set->monthLen->monthLength->if->internalGet->set->else->yearLength->getActualMaximum->mon->internalGet->if->set->monthLen->getActualMaximum->if->internalGet->set->return->y->cdate->getNormalizedYear->getActualMaximum->internalGet->set->woy->internalGet->value->if->isCutoverYear->weekYear->getWeekYear->if->if->set->return->fd->getCurrentFixedDate->day1->if->calsys->getYearFromFixedDate->internalGet->if->calsys->getYearFromFixedDate->else->if->if->else->if->getRolledValue->set->return->fd->getCurrentFixedDate->cal->if->getCutoverCalendarSystem->else->if->else->getJulianCalendarSystem->day1->if->cal->getYearFromFixedDate->getJulianCalendarSystem->if->cal->getYearFromFixedDate->getRolledValue->d->getCalendarDate->d->getMonth->set->d->getDayOfMonth->set->return->isCutoverYear->cdate->getNormalizedYear->isCutoverYear->dow->internalGet->getFirstDayOfWeek->if->fd->getCurrentFixedDate->month1->monthLength->if->getFixedDateMonth1->actualMonthLength->else->internalGet->calsys->getMonthLength->monthDay1st->BaseCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->getMinimalDaysInFirstWeek->getActualMaximum->value->internalGet->getRolledValue->nfd->if->else->if->dayOfMonth->if->d->getCalendarDate->d->getDayOfMonth->else->set->return->if->cdate->getNormalizedYear->isCutoverYear->calsys->getMonthLength->break->fd->getCurrentFixedDate->month1->getFixedDateMonth1->value->actualMonthLength->getRolledValue->d->getCalendarDate->d->getDayOfMonth->set->return->getActualMaximum->if->cdate->getNormalizedYear->isCutoverYear->break->fd->getCurrentFixedDate->jan1->internalGet->value->getRolledValue->d->getCalendarDate->d->getMonth->set->d->getDayOfMonth->set->return->if->cdate->getNormalizedYear->isCutoverYear->weekOfYear->internalGet->if->set->break->if->return->fd->getCurrentFixedDate->dowFirst->BaseCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->else->if->d->getCalendarDate->d->getNormalizedYear->set->d->getYear->d->getMonth->d->getDayOfMonth->set->return->if->cdate->getNormalizedYear->isCutoverYear->dom->internalGet->monthLength->calsys->getMonthLength->lastDays->x->if->internalGet->set->break->fd->getCurrentFixedDate->month1->getFixedDateMonth1->monthLength->actualMonthLength->lastDays->x->if->value->internalGet->getRolledValue->cal->getJulianCalendarSystem->d->cal->newCalendarDate->cal->getCalendarDateFromFixedDate->d->getDayOfMonth->set->return->internalGet->getRolledValue->set
GregorianCalendar#getMinimum(int):::Returns the minimum value for the given calendar field of this GregorianCalendar instance:::return
GregorianCalendar#getMaximum(int):::Returns the maximum value for the given calendar field of this GregorianCalendar instance:::switch->if->break->gc->clone->gc->setLenient->gc->setTimeInMillis->v1->gc->getActualMaximum->gc->setTimeInMillis->v2->gc->getActualMaximum->return->Math->Math->max->max->return
GregorianCalendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance:::if->d->getGregorianCutoverDate->mon1->getFixedDateMonth1->getCalendarDate->return->Math->d->getDayOfMonth->max->return
GregorianCalendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance:::switch->gc->clone->gc->setLenient->gc->setTimeInMillis->v1->gc->getActualMaximum->gc->setTimeInMillis->v2->gc->getActualMaximum->return->Math->Math->min->min->return
GregorianCalendar#getActualMinimum(int):::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods:::if->gc->getNormalizedCalendar->year->getNormalizedYear->if->month1->getFixedDate->getFixedDateMonth1->d->getCalendarDate->return->d->getDayOfMonth->return->getMinimum
GregorianCalendar#getActualMaximum(int):::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods:::fieldsForFixedMax->if->return->getMaximum->gc->getNormalizedCalendar->date->cal->normalizedYear->date->getNormalizedYear->value->switch->if->gc->isCutoverYear->break->nextJan1->do->gcal->getFixedDate->while->d->date->clone->cal->getCalendarDateFromFixedDate->d->getMonth->break->cal->getMonthLength->if->gc->isCutoverYear->date->getDayOfMonth->break->fd->gc->getCurrentFixedDate->if->break->monthLength->gc->actualMonthLength->monthEnd->gc->getFixedDateMonth1->d->gc->getCalendarDate->d->getDayOfMonth->break->if->gc->isCutoverYear->cal->getYearLength->break->jan1->if->cocal->gc->getCutoverCalendarSystem->cocal->getFixedDate->else->if->cal->getFixedDate->else->nextJan1->gcal->getFixedDate->if->break->if->gc->isCutoverYear->d->cal->newCalendarDate->d->date->getYear->setDate->dayOfWeek->cal->getDayOfWeek->getFirstDayOfWeek->if->magic->getMinimalDaysInFirstWeek->if->date->isLeapYear->break->if->gc->clone->maxDayOfYear->getActualMaximum->gc->set->gc->get->if->internalGet->gc->getWeekYear->gc->set->gc->get->break->if->gc->isCutoverYear->d->cal->newCalendarDate->d->date->getYear->date->getMonth->setDate->dayOfWeek->cal->getDayOfWeek->monthLength->cal->getMonthLength->getFirstDayOfWeek->if->nDaysFirstWeek->if->getMinimalDaysInFirstWeek->if->if->break->if->gc->clone->y->gc->internalGet->m->gc->internalGet->do->gc->get->gc->add->while->gc->get->gc->get->break->ndays->dow1->dow->date->getDayOfWeek->if->gc->isCutoverYear->d->date->clone->cal->getMonthLength->d->setDayOfMonth->cal->normalize->d->getDayOfWeek->else->if->clone->gc->actualMonthLength->gc->gc->getActualMinimum->set->gc->get->x->if->break->if->clone->current->gc->getYearOffsetInMillis->if->gc->internalGetEra->gc->setTimeInMillis->gc->get->maxEnd->gc->getYearOffsetInMillis->if->else->mincal->gc->getTimeInMillis->getJulianCalendarSystem->d->mincal->getZone->getCalendarDate->maxEnd->cal->getDayOfYear->d->getHours->d->getMinutes->d->getSeconds->d->getMillis->d->getYear->if->if->break->throw->new->ArrayIndexOutOfBoundsException->return
GregorianCalendar#isWeekDateSupported():::Returns true indicating this GregorianCalendar supports week dates.:::return
GregorianCalendar#getWeekYear():::Returns the week year represented by this GregorianCalendar:::year->get->if->internalGetEra->if->weekOfYear->internalGet->if->internalGet->if->else->if->return->dayOfYear->internalGet->maxDayOfYear->getActualMaximum->minimalDays->getMinimalDaysInFirstWeek->if->return->cal->clone->cal->setLenient->cal->TimeZone->getTimeZone->setTimeZone->cal->set->cal->complete->delta->getFirstDayOfWeek->cal->get->if->if->cal->add->minDayOfYear->cal->get->if->if->else->cal->set->cal->set->cal->complete->del->getFirstDayOfWeek->cal->get->if->if->cal->add->cal->get->if->if->days->if->return
GregorianCalendar#setWeekDate(int, int, int):::Sets this GregorianCalendar to the date given by the date specifiers - weekYear, weekOfYear, and dayOfWeek:::if->throw->new->IllegalArgumentException->gc->clone->gc->setLenient->era->gc->get->gc->clear->gc->TimeZone->getTimeZone->setTimeZone->gc->set->gc->set->gc->set->gc->getFirstDayOfWeek->set->days->getFirstDayOfWeek->if->if->gc->add->else->gc->complete->if->isLenient->gc->getWeekYear->gc->internalGet->gc->internalGet->throw->new->IllegalArgumentException->gc->internalGet->set->gc->internalGet->set->gc->internalGet->set->gc->internalGet->set->internalSet->complete
GregorianCalendar#getWeeksInWeekYear():::Returns the number of weeks in the week year represented by this GregorianCalendar:::gc->getNormalizedCalendar->weekYear->gc->getWeekYear->if->gc->internalGet->return->gc->getActualMaximum->if->gc->clone->gc->internalGet->setWeekDate->return->gc->getActualMaximum
GregorianCalendar#computeFields():::Converts the time value (millisecond offset from the Epoch) to calendar field values:::mask->if->isPartiallyNormalized->getSetStateFields->fieldMask->if->computeFields->else->computeFields->setFieldsComputed
GregorianCalendar#computeTime():::Converts calendar field values to the time value (millisecond offset from the Epoch).:::if->isLenient->if->new->intArr->for->field->fieldMask->selectFields->year->isSet->internalGet->era->internalGetEra->if->else->if->throw->new->IllegalArgumentException->if->isSet->setFieldsComputed->timeOfDay->if->isFieldSet->internalGet->else->internalGet->if->isFieldSet->internalGet->internalGet->internalGet->internalGet->fixedDate->while->gfd->jfd->if->getFixedDate->if->break->getJulianCalendarSystem->getFixedDate->else->if->getJulianCalendarSystem->getFixedDate->if->break->else->getJulianCalendarSystem->getFixedDate->getFixedDate->if->isFieldSet->isFieldSet->if->break->else->if->break->if->if->else->if->else->else->if->else->if->isLenient->throw->new->IllegalArgumentException->millis->zone->getZone->if->new->intArr->tzMask->if->if->getOffsetsByWall->else->gmtOffset->isFieldSet->internalGet->zone->getRawOffset->zone->getOffsets->if->if->isFieldSet->internalGet->if->isFieldSet->internalGet->mask->getSetStateFields->computeFields->if->isLenient->for->field->setFieldsNormalized
GregorianCalendar#toZonedDateTime():::Converts this object to a ZonedDateTime that represents the same point on the time-line as this GregorianCalendar:::return->ZonedDateTime->Instant->getTimeInMillis->ofEpochMilli->getTimeZone->toZoneId->ofInstant
GregorianCalendar#from(ZonedDateTime):::Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object:::cal->TimeZone->zdt->getZone->getTimeZone->new->GregorianCalendar->cal->new->Date->setGregorianChange->cal->setFirstDayOfWeek->cal->setMinimalDaysInFirstWeek->try->cal->Math->Math->zdt->toEpochSecond->multiplyExact->zdt->get->addExact->setTimeInMillis->catch->throw->new->IllegalArgumentException->finally->return
HashMap#hash(Object):::Computes key.hashCode() and spreads (XORs) higher bits of hash to lower:::h->return->key->hashCode
HashMap#comparableClassFor(Object):::Returns x's Class if it is of the form "class C implements Comparable<C>", else null.:::if->c->ts->as->p->if->x->getClass->return->if->c->getGenericInterfaces->foreach->if->getRawType->p->getActualTypeArguments->return->return
HashMap#compareComparables(Class, Object, Object):::Returns k.compareTo(x) if x matches kc (k's screened comparable class), else 0.:::return->x->getClass->compareTo
HashMap#tableSizeFor(int):::Returns a power of two size for the given target capacity.:::n->Integer->numberOfLeadingZeros->return
HashMap#putMapEntries(Map, boolean):::Implements Map.putAll and Map constructor.:::s->m->size->if->if->ft->t->if->tableSizeFor->else->if->resize->foreach->m->entrySet->key->e->getKey->value->e->getValue->hash->putVal
HashMap#size():::Returns the number of key-value mappings in this map.:::return
HashMap#isEmpty():::Returns true if this map contains no key-value mappings.:::return
HashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::e->return->hash->getNode
HashMap#getNode(int, Object):::Implements Map.get and related methods.:::tab->first->e->n->k->if->if->key->equals->return->if->if->return->getTreeNode->do->if->key->equals->return->while->return
HashMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.:::return->hash->getNode
HashMap#put(K, V):::Associates the specified value with the specified key in this map:::return->hash->putVal
HashMap#putVal(int, K, V, boolean, boolean):::Implements Map.put and related methods.:::tab->p->n->i->if->resize->if->newNode->else->e->k->if->key->equals->else->if->putTreeVal->else->for->binCount->if->oldValue->if->afterNodeAccess->return->if->resize->afterNodeInsertion->return
HashMap#resize():::Initializes or doubles table size:::oldTab->oldCap->oldThr->newCap->newThr->if->if->return->else->if->else->if->else->if->ft->newTab->new->NodeArr->if->for->j->return
HashMap#treeifyBin(Node[], int):::Replaces all linked nodes in bin at index for given hash unless table is too small, in which case resizes instead.:::n->index->e->if->resize->else->if->hd->tl->do->p->replacementTreeNode->if->else->while->if->hd->treeify
HashMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::putMapEntries
HashMap#remove(Object):::Removes the mapping for the specified key from this map if present.:::e->return->hash->removeNode
HashMap#removeNode(int, Object, Object, boolean, boolean):::Implements Map.remove and related methods.:::tab->p->n->index->if->node->e->k->v->if->key->equals->else->if->if->getTreeNode->else->do->if->key->equals->break->while->if->value->equals->if->removeTreeNode->else->if->else->afterNodeRemoval->return->return
HashMap#clear():::Removes all of the mappings from this map:::tab->if->for->i
HashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.:::tab->v->if->foreach->for->return
HashMap#keySet():::Returns a Set view of the keys contained in this map:::ks->if->new->KeySet->return
HashMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
HashMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->return->new->EntrySet
HashMap#computeIfAbsent(K, Function):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the mapping function modifies this map during computation.:::if->throw->new->NullPointerException->hash->hash->tab->first->n->i->binCount->t->old->if->resize->if->if->getTreeNode->else->e->k->do->if->key->equals->break->while->oldValue->if->afterNodeAccess->return->mc->v->mappingFunction->apply->if->throw->new->ConcurrentModificationException->if->return->else->if->afterNodeAccess->return->else->if->t->putTreeVal->else->newNode->if->treeifyBin->afterNodeInsertion->return
HashMap#computeIfPresent(K, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.:::if->throw->new->NullPointerException->e->oldValue->hash->hash->if->getNode->mc->v->remappingFunction->apply->if->throw->new->ConcurrentModificationException->if->afterNodeAccess->return->else->removeNode->return
HashMap#compute(K, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.:::if->throw->new->NullPointerException->hash->hash->tab->first->n->i->binCount->t->old->if->resize->if->if->getTreeNode->else->e->k->do->if->key->equals->break->while->oldValue->mc->v->remappingFunction->apply->if->throw->new->ConcurrentModificationException->if->if->afterNodeAccess->else->removeNode->else->if->if->t->putTreeVal->else->newNode->if->treeifyBin->afterNodeInsertion->return
HashMap#merge(K, V, BiFunction):::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->hash->hash->tab->first->n->i->binCount->t->old->if->resize->if->if->getTreeNode->else->e->k->do->if->key->equals->break->while->if->v->if->mc->remappingFunction->apply->if->throw->new->ConcurrentModificationException->else->if->afterNodeAccess->else->removeNode->return->if->if->t->putTreeVal->else->newNode->if->treeifyBin->afterNodeInsertion->return
HashMap#clone():::Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned.:::result->try->super->clone->catch->throw->new->InternalError->finally->result->reinitialize->result->putMapEntries->return
HashMap#reinitialize():::Reset to initial default state:::
HashMap.TreeNode#root():::Returns root of tree containing this node.:::for->r->p
HashMap.TreeNode#moveRootToFront(Node[], TreeNode):::Ensures that the given root is the first node of its bin.:::n->if->index->first->if->rn->rp->if->if->if
HashMap.TreeNode#find(int, Object, Class):::Finds the node starting at root p with the given hash and key:::p->do->ph->dir->pk->pl->pr->q->if->else->if->else->if->k->equals->return->else->if->else->if->else->if->comparableClassFor->compareComparables->else->if->pr->find->return->else->while->return
HashMap.TreeNode#getTreeNode(int, Object):::Calls find for root node.:::return->root->find
HashMap.TreeNode#tieBreakOrder(Object, Object):::Tie-breaking utility for ordering insertions when equal hashCodes and non-comparable:::d->if->a->getClass->getName->b->getClass->getName->compareTo->System->identityHashCode->System->identityHashCode->return
HashMap.TreeNode#treeify(Node[]):::Forms tree of the nodes linked from this node.:::root->for->x->next->moveRootToFront
HashMap.TreeNode#untreeify(HashMap):::Returns a list of non-TreeNodes replacing those linked from this node.:::hd->tl->for->q->return
HashMap.TreeNode#putTreeVal(HashMap, Node[], int, K, V):::Tree version of putVal.:::kc->searched->root->root->for->p
HashMap.TreeNode#removeTreeNode(HashMap, Node[], boolean):::Removes the given node, that must be present before this call:::n->if->return->index->first->root->rl->succ->pred->if->else->if->if->return->if->root->root->if->first->untreeify->return->p->pl->pr->replacement->if->s->sl->while->c->sr->pp->if->else->sp->if->if->else->if->if->if->if->else->if->else->if->else->else->if->else->if->else->if->pp->if->else->if->else->r->balanceDeletion->if->pp->if->if->else->if->if->moveRootToFront
HashMap.TreeNode#split(HashMap, Node[], int, int):::Splits nodes in a tree bin into lower and upper tree bins, or untreeifies if now too small:::b->loHead->loTail->hiHead->hiTail->lc->hc->for->e->next->if->if->loHead->untreeify->else->if->loHead->treeify->if->if->hiHead->untreeify->else->if->hiHead->treeify
HashMap.TreeNode#checkInvariants(TreeNode):::Recursive invariant check:::tp->tl->tr->tb->tn->if->return->if->return->if->return->if->return->if->return->if->return->if->checkInvariants->return->if->checkInvariants->return->return
HashSet#iterator():::Returns an iterator over the elements in this set:::return->map->keySet->iterator
HashSet#size():::Returns the number of elements in this set (its cardinality).:::return->map->size
HashSet#isEmpty():::Returns true if this set contains no elements.:::return->map->isEmpty
HashSet#contains(Object):::Returns true if this set contains the specified element:::return->map->containsKey
HashSet#add(E):::Adds the specified element to this set if it is not already present:::return->map->put
HashSet#remove(Object):::Removes the specified element from this set if it is present:::return->map->remove
HashSet#clear():::Removes all of the elements from this set:::map->clear
HashSet#clone():::Returns a shallow copy of this HashSet instance: the elements themselves are not cloned.:::try->newSet->super->clone->map->clone->return->catch->throw->new->InternalError->finally
HashSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set:::return->new->HashMap.KeySpliterator<>
Hashtable#size():::Returns the number of keys in this hashtable.:::return
Hashtable#isEmpty():::Tests if this hashtable maps no keys to values.:::return
Hashtable#keys():::Returns an enumeration of the keys in this hashtable:::return->this->getEnumeration
Hashtable#elements():::Returns an enumeration of the values in this hashtable:::return->this->getEnumeration
Hashtable#contains(Object):::Tests if some key maps into the specified value in this hashtable:::if->throw->new->NullPointerException->tab->for->i->return
Hashtable#containsValue(Object):::Returns true if this hashtable maps one or more keys to this value:::return->contains
Hashtable#containsKey(Object):::Tests if the specified object is a key in this hashtable.:::tab->hash->key->hashCode->index->for->e->return
Hashtable#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::tab->hash->key->hashCode->index->for->e->return
Hashtable#rehash():::Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently:::oldCapacity->oldMap->newCapacity->if->if->return->newMap->new->Entry<?,?>Arr->Math->min->for->i
Hashtable#put(K, V):::Maps the specified key to the specified value in this hashtable:::if->throw->new->NullPointerException->tab->hash->key->hashCode->index->entry->for->addEntry->return
Hashtable#remove(Object):::Removes the key (and its corresponding value) from this hashtable:::tab->hash->key->hashCode->index->e->for->prev->return
Hashtable#putAll(Map):::Copies all of the mappings from the specified map to this hashtable:::foreach->t->entrySet->e->getKey->e->getValue->put
Hashtable#clear():::Clears this hashtable so that it contains no keys.:::tab->for->index
Hashtable#clone():::Creates a shallow copy of this hashtable:::t->cloneHashtable->new->Entry<?,?>Arr->for->i->return
Hashtable#cloneHashtable():::Calls super.clone():::try->return->super->clone->catch->throw->new->InternalError->finally
Hashtable#toString():::Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters " ,&nbsp;" (comma and space):::max->size->if->return->sb->new->StringBuilder->it->entrySet->iterator->sb->append->for->i
Hashtable#keySet():::Returns a Set view of the keys contained in this map:::if->Collections->new->KeySet->synchronizedSet->return
Hashtable#entrySet():::Returns a Set view of the mappings contained in this map:::if->Collections->new->EntrySet->synchronizedSet->return
Hashtable#values():::Returns a Collection view of the values contained in this map:::if->Collections->new->ValueCollection->synchronizedCollection->return
Hashtable#equals(Object):::Compares the specified Object with this Map for equality, as per the definition in the Map interface.:::if->return->if->return->t->if->t->size->size->return->try->foreach->entrySet->key->e->getKey->value->e->getValue->if->if->t->get->t->containsKey->return->else->if->value->t->get->equals->return->catch->return->return->finally->return
Hashtable#hashCode():::Returns the hash code value for this Map as per the definition in the Map interface.:::h->if->return->tab->foreach->while->entry->hashCode->return
Hashtable#computeIfAbsent(K, Function):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the mapping function modified this map during computation.:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->mc->newValue->mappingFunction->apply->if->throw->new->ConcurrentModificationException->if->addEntry->return
Hashtable#computeIfPresent(K, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->prev->return
Hashtable#compute(K, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->prev->mc->newValue->remappingFunction->apply->if->throw->new->ConcurrentModificationException->if->addEntry->return
Hashtable#merge(K, V, BiFunction):::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.:::Objects->requireNonNull->tab->hash->key->hashCode->index->e->for->prev->if->addEntry->return
Hashtable#writeHashtable(java.io.ObjectOutputStream):::Perform serialization of the Hashtable to an ObjectOutputStream:::entryStack->synchronized->s->defaultWriteObject->s->writeInt->s->writeInt->foreach->while->new->Entry<>->while->s->writeObject->s->writeObject
Hashtable#defaultWriteHashtable(java.io.ObjectOutputStream, int, float):::Called by Properties to write out a simulated threshold and loadfactor.:::Math->min->s->defaultWriteObject
Hashtable#readHashtable(java.io.ObjectInputStream):::Perform deserialization of the Hashtable from an ObjectInputStream:::s->defaultReadObject->if->Float->isNaN->throw->new->StreamCorruptedException->origlength->s->readInt->elements->s->readInt->if->throw->new->StreamCorruptedException->Math->max->length->if->Math->min->if->SharedSecrets->getJavaObjectInputStreamAccess->checkArray->new->Entry<?,?>Arr->Math->min->for
IdentityHashMap#unmaskNull(Object):::Returns internal representation of null key back to caller as null.:::return
IdentityHashMap#size():::Returns the number of key-value mappings in this identity hash map.:::return
IdentityHashMap#isEmpty():::Returns true if this identity hash map contains no key-value mappings.:::return
IdentityHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::k->maskNull->tab->len->i->hash->while->item->if->return->if->return->nextKeyIndex
IdentityHashMap#containsKey(Object):::Tests whether the specified object reference is a key in this identity hash map.:::k->maskNull->tab->len->i->hash->while->item->if->return->if->return->nextKeyIndex
IdentityHashMap#containsValue(Object):::Tests whether the specified object reference is a value in this identity hash map.:::tab->for->i->return
IdentityHashMap#put(K, V):::Associates the specified value with the specified key in this identity hash map:::k->maskNull->for
IdentityHashMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::n->m->size->if->return->if->capacity->resize->foreach->m->entrySet->e->getKey->e->getValue->put
IdentityHashMap#remove(Object):::Removes the mapping for this key from this map if present.:::k->maskNull->tab->len->i->hash->while->item->if->oldValue->closeDeletion->return->if->return->nextKeyIndex
IdentityHashMap#clear():::Removes all of the mappings from this map:::tab->for->i
IdentityHashMap#equals(Object):::Compares the specified object with this map for equality:::if->return->else->if->m->if->m->size->return->tab->for->i->return->else->if->m->return->entrySet->m->entrySet->equals->else->return
IdentityHashMap#hashCode():::Returns the hash code value for this map:::result->tab->for->i->return
IdentityHashMap#clone():::Returns a shallow copy of this identity hash map: the keys and values themselves are not cloned.:::try->m->super->clone->table->clone->return->catch->throw->new->InternalError->finally
IdentityHashMap#keySet():::Returns an identity-based set view of the keys contained in this map:::ks->if->new->KeySet->return
IdentityHashMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
IdentityHashMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->if->return->else->return->new->EntrySet
IllegalFormatCodePointException#getCodePoint():::Returns the illegal code point as defined by Character#isValidCodePoint.:::return
IllegalFormatConversionException#getConversion():::Returns the inapplicable conversion.:::return
IllegalFormatConversionException#getArgumentClass():::Returns the class of the mismatched argument.:::return
IllegalFormatFlagsException#getFlags():::Returns the set of flags which contains an illegal combination.:::return
IllegalFormatPrecisionException#getPrecision():::Returns the precision:::return
IllegalFormatWidthException#getWidth():::Returns the width:::return
IllformedLocaleException#getErrorIndex():::Returns the index where the error was found:::return
ImmutableCollections.SubList#fromSubList(SubList, int, int):::Constructs a sublist of another SubList.:::return->new->SubList<>
ImmutableCollections.SubList#fromList(List, int, int):::Constructs a sublist of an arbitrary AbstractImmutableList, which is not a SubList itself.:::return->new->SubList<>
IntSummaryStatistics#accept(int):::Records a new value into the summary information:::Math->min->Math->max
IntSummaryStatistics#combine(IntSummaryStatistics):::Combines the state of another IntSummaryStatistics into this one.:::Math->min->Math->max
IntSummaryStatistics#getCount():::Returns the count of values recorded.:::return
IntSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded.:::return
IntSummaryStatistics#getMin():::Returns the minimum value recorded, or Integer.MAX_VALUE if no values have been recorded.:::return
IntSummaryStatistics#getMax():::Returns the maximum value recorded, or Integer.MIN_VALUE if no values have been recorded.:::return
IntSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.:::return->getCount->getSum->getCount
IntSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging:::return->String->this->getClass->getSimpleName->getCount->getSum->getMin->getAverage->getMax->format
Iterator#hasNext():::Returns true if the iteration has more elements:::
Iterator#next():::Returns the next element in the iteration.:::
Iterator#remove():::Removes from the underlying collection the last element returned by this iterator (optional operation):::throw->new->UnsupportedOperationException
Iterator#forEachRemaining(Consumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception:::Objects->requireNonNull->while->hasNext->action->next->accept
JapaneseImperialCalendar#getCalendarType():::Returns "japanese" as the calendar type of this JapaneseImperialCalendar.:::return
JapaneseImperialCalendar#equals(Object):::Compares this JapaneseImperialCalendar to the specified Object:::return->super->equals
JapaneseImperialCalendar#hashCode():::Generates the hash code for this JapaneseImperialCalendar object.:::return->super->hashCode->jdate->hashCode
JapaneseImperialCalendar#add(int, int):::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules:::if->return->if->throw->new->IllegalArgumentException->complete->if->d->jdate->clone->d->addYear->pinDayOfMonth->getEraIndex->set->d->getYear->set->d->getMonth->set->d->getDayOfMonth->set->else->if->d->jdate->clone->d->addMonth->pinDayOfMonth->getEraIndex->set->d->getYear->set->d->getMonth->set->d->getDayOfMonth->set->else->if->era->internalGet->if->else->if->set->else->delta->timeOfDay->switch->break->break->break->break->break->break->break->if->setTimeInMillis->return->fd->internalGet->internalGet->internalGet->internalGet->if->else->if->zoneOffset->internalGet->internalGet->setTimeInMillis->internalGet->internalGet->if->setTimeInMillis->fd2->if->setTimeInMillis
JapaneseImperialCalendar#roll(int, int):::Adds a signed amount to the specified calendar field without changing larger fields:::if->return->if->throw->new->IllegalArgumentException->complete->min->getMinimum->max->getMaximum->switch->break->unit->h->internalGet->nh->if->d->jcal->getZone->getCalendarDate->if->internalGet->d->getDayOfMonth->d->jdate->getEra->setEra->d->internalGet->internalGet->internalGet->setDate->if->d->addHours->jcal->getTime->hourOfDay->d->getHours->internalSet->if->internalSet->else->internalSet->internalSet->zoneOffset->d->getZoneOffset->saving->d->getDaylightSaving->internalSet->internalSet->return->getActualMinimum->getActualMaximum->break->if->jdate->getNormalizedYear->isTransitionYear->year->jdate->getYear->if->getMaximum->jd->jcal->getZone->getCalendarDate->d->jcal->getZone->getCalendarDate->d->getMonth->n->internalGet->getRolledValue->if->jd->addYear->jd->setMonth->if->jd->getDayOfMonth->d->getDayOfMonth->jd->d->getDayOfMonth->setDayOfMonth->jcal->normalize->if->jd->getDayOfMonth->d->getDayOfMonth->jd->getTimeOfDay->d->getTimeOfDay->jd->setMonth->jd->d->getDayOfMonth->setDayOfMonth->jcal->normalize->jd->getMonth->jd->getDayOfMonth->set->set->else->if->getMinimum->jd->jcal->getZone->getCalendarDate->d->jcal->getZone->getCalendarDate->d->getMonth->n->internalGet->getRolledValue->if->jd->addYear->jd->setMonth->if->jd->getDayOfMonth->d->getDayOfMonth->jd->d->getDayOfMonth->setDayOfMonth->jcal->normalize->if->jd->getDayOfMonth->d->getDayOfMonth->jd->getTimeOfDay->d->getTimeOfDay->jd->setMonth->jd->d->getDayOfMonth->setDayOfMonth->jcal->normalize->jd->getMonth->jd->getDayOfMonth->set->set->else->mon->internalGet->if->set->monthLen->monthLength->if->internalGet->set->else->eraIndex->getEraIndex->transition->if->jdate->getYear->getSinceDate->transition->getMonth->else->if->getSinceDate->if->transition->getYear->jdate->getNormalizedYear->transition->getMonth->if->transition->getDayOfMonth->if->return->n->internalGet->getRolledValue->set->if->if->transition->getMonth->transition->getDayOfMonth->if->jdate->getDayOfMonth->transition->getDayOfMonth->transition->getDayOfMonth->set->else->if->transition->getMonth->dom->transition->getDayOfMonth->if->jdate->getDayOfMonth->set->return->y->jdate->getNormalizedYear->getActualMaximum->internalGet->set->woy->internalGet->value->if->jdate->getNormalizedYear->isTransitionYear->year->jdate->getYear->if->getMaximum->getActualMaximum->else->if->getMinimum->getActualMinimum->getActualMaximum->if->set->return->if->set->return->fd->day1->if->getMinimum->if->gcal->getYearFromFixedDate->else->d->jcal->getZone->getCalendarDate->if->jcal->getFixedDate->internalGet->if->gcal->getYearFromFixedDate->break->fd->day1->d->getCalendarDate->if->d->getEra->jdate->getEra->d->getYear->jdate->getYear->jcal->getCalendarDateFromFixedDate->if->d->getEra->jdate->getEra->d->getYear->jdate->getYear->getRolledValue->getCalendarDate->d->getMonth->set->d->getDayOfMonth->set->return->isTransitionYear->jdate->getNormalizedYear->isTransitionYear->dow->internalGet->getFirstDayOfWeek->if->fd->month1->monthLength->if->getFixedDateMonth1->actualMonthLength->else->internalGet->jcal->getMonthLength->monthDay1st->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->getMinimalDaysInFirstWeek->getActualMaximum->value->internalGet->getRolledValue->nfd->if->else->if->set->return->if->jdate->getNormalizedYear->isTransitionYear->jcal->getMonthLength->break->month1->getFixedDateMonth1->value->actualMonthLength->getRolledValue->d->getCalendarDate->d->getDayOfMonth->set->return->getActualMaximum->if->jdate->getNormalizedYear->isTransitionYear->break->value->internalGet->getRolledValue->jan0->internalGet->d->getCalendarDate->d->getMonth->set->d->getDayOfMonth->set->return->normalizedYear->jdate->getNormalizedYear->if->isTransitionYear->isTransitionYear->weekOfYear->internalGet->if->internalGet->set->break->if->return->fd->dowFirst->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->if->else->if->d->getCalendarDate->getEraIndex->set->d->getYear->d->getMonth->d->getDayOfMonth->set->return->if->jdate->getNormalizedYear->isTransitionYear->dom->internalGet->monthLength->jcal->getMonthLength->lastDays->x->if->internalGet->set->break->fd->month1->getFixedDateMonth1->monthLength->actualMonthLength->lastDays->x->if->value->internalGet->getRolledValue->d->getCalendarDate->d->getDayOfMonth->set->return->internalGet->getRolledValue->set
JapaneseImperialCalendar#getMinimum(int):::Returns the minimum value for the given calendar field of this Calendar instance:::return
JapaneseImperialCalendar#getMaximum(int):::Returns the maximum value for the given calendar field of this GregorianCalendar instance:::switch->d->jcal->getZone->getCalendarDate->return->Math->d->getYear->max->return
JapaneseImperialCalendar#getGreatestMinimum(int):::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance:::return
JapaneseImperialCalendar#getLeastMaximum(int):::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance:::switch->return->Math->getMaximum->min->return
JapaneseImperialCalendar#getActualMinimum(int):::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods.:::if->isFieldSet->return->getMinimum->value->jc->getNormalizedCalendar->jd->jcal->jc->getTimeInMillis->getZone->getCalendarDate->eraIndex->getEraIndex->switch->if->since->getZone->getSince->d->jcal->getZone->getCalendarDate->jd->d->getYear->setYear->jcal->normalize->if->getYearOffsetInMillis->getYearOffsetInMillis->else->getMinimum->d->jcal->getZone->getCalendarDate->y->d->getYear->if->jd->setYear->jcal->normalize->if->getYearOffsetInMillis->getYearOffsetInMillis->break->if->jd->getYear->since->getZone->getSince->d->jcal->getZone->getCalendarDate->d->getMonth->if->jd->getDayOfMonth->d->getDayOfMonth->break->d->jcal->getZone->getCalendarDate->d->addYear->jcal->normalize->jd->d->getEra->setEra->jd->d->getYear->setYear->jcal->normalize->jan1->jcal->getFixedDate->fd->jcal->getFixedDate->woy->getWeekNumber->day1->if->jd->getTimeOfDay->d->getTimeOfDay->break->return
JapaneseImperialCalendar#getActualMaximum(int):::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods:::fieldsForFixedMax->if->return->getMaximum->jc->getNormalizedCalendar->date->normalizedYear->date->getNormalizedYear->value->switch->if->date->getNormalizedYear->isTransitionYear->eraIndex->getEraIndex->if->date->getYear->transition->fd->if->ldate->date->clone->jcal->getCalendarDateFromFixedDate->ldate->getMonth->else->d->jcal->getZone->getCalendarDate->if->date->getEra->d->getEra->date->getYear->d->getYear->d->getMonth->break->jcal->getMonthLength->break->if->date->getNormalizedYear->isTransitionYear->eraIndex->getEraIndex->if->date->getYear->transition->fd->d->gcal->newCalendarDate->d->date->getNormalizedYear->setDate->if->gcal->getFixedDate->else->d->addYear->gcal->getFixedDate->else->d->jcal->getZone->getCalendarDate->if->date->getEra->d->getEra->date->getYear->d->getYear->fd->jcal->getFixedDate->jan1->getFixedDateJan1->else->if->date->getYear->getMinimum->d1->jcal->getZone->getCalendarDate->fd1->jcal->getFixedDate->d1->addYear->d1->setMonth->setDayOfMonth->jcal->normalize->fd2->jcal->getFixedDate->else->jcal->getYearLength->break->if->date->getNormalizedYear->isTransitionYear->jd->jcal->getZone->getCalendarDate->if->date->getEra->jd->getEra->date->getYear->jd->getYear->fd->jcal->getFixedDate->jan1->getFixedDateJan1->getWeekNumber->else->if->date->getEra->date->getYear->getMinimum->d->jcal->getZone->getCalendarDate->d->addYear->jcal->normalize->jd->d->getEra->setEra->jd->d->getYear->setDate->jcal->normalize->jan1->jcal->getFixedDate->nextJan1->jcal->getFixedDate->nextJan1st->LocalGregorianCalendar->getFirstDayOfWeek->getDayOfWeekDateOnOrBefore->ndays->if->getMinimalDaysInFirstWeek->getWeekNumber->else->d->gcal->newCalendarDate->d->date->getNormalizedYear->setDate->dayOfWeek->gcal->getDayOfWeek->getFirstDayOfWeek->if->magic->getMinimalDaysInFirstWeek->if->date->isLeapYear->break->if->jc->clone->max->getActualMaximum->jc->set->jc->get->if->jc->add->jc->get->break->jd->jcal->getZone->getCalendarDate->if->date->getEra->jd->getEra->date->getYear->jd->getYear->d->gcal->newCalendarDate->d->date->getNormalizedYear->date->getMonth->setDate->dayOfWeek->gcal->getDayOfWeek->monthLength->gcal->getMonthLength->getFirstDayOfWeek->if->nDaysFirstWeek->if->getMinimalDaysInFirstWeek->if->if->else->fd->jcal->getFixedDate->month1->jd->getDayOfMonth->getWeekNumber->break->ndays->dow1->dow->date->getDayOfWeek->d->date->clone->jcal->getMonthLength->d->setDayOfMonth->jcal->normalize->d->getDayOfWeek->x->if->break->jd->jcal->jc->getTimeInMillis->getZone->getCalendarDate->d->eraIndex->getEraIndex->if->jcal->getZone->getCalendarDate->d->getYear->if->jd->setYear->else->jcal->getZone->getSince->getZone->getCalendarDate->d->getYear->jd->setYear->jcal->normalize->if->getYearOffsetInMillis->getYearOffsetInMillis->break->throw->new->ArrayIndexOutOfBoundsException->return
JapaneseImperialCalendar#computeFields():::Converts the time value (millisecond offset from the Epoch) to calendar field values:::mask->if->isPartiallyNormalized->getSetStateFields->fieldMask->if->computeFields->else->computeFields->setFieldsComputed
JapaneseImperialCalendar#computeTime():::Converts calendar field values to the time value (millisecond offset from the Epoch).:::if->isLenient->if->new->intArr->for->field->fieldMask->selectFields->year->era->if->isSet->internalGet->isSet->internalGet->else->if->isSet->internalGet->else->timeOfDay->if->isFieldSet->internalGet->else->internalGet->if->isFieldSet->internalGet->internalGet->internalGet->internalGet->fixedDate->while->getFixedDate->millis->zone->getZone->if->new->intArr->tzMask->if->if->getOffsetsByWall->else->zone->zone->getRawOffset->getOffsets->if->if->isFieldSet->internalGet->if->isFieldSet->internalGet->mask->getSetStateFields->computeFields->if->isLenient->for->field->setFieldsNormalized
JumboEnumSet#iterator():::Returns an iterator over the elements contained in this set:::return->new->EnumSetIterator<>
JumboEnumSet#size():::Returns the number of elements in this set.:::return
JumboEnumSet#isEmpty():::Returns true if this set contains no elements.:::return
JumboEnumSet#contains(Object):::Returns true if this set contains the specified element.:::if->return->eClass->e->getClass->if->eClass->getSuperclass->return->eOrdinal->ordinal->return
JumboEnumSet#add(E):::Adds the specified element to this set if it is not already present.:::typeCheck->eOrdinal->e->ordinal->eWordNum->oldElements->result->if->return
JumboEnumSet#remove(Object):::Removes the specified element from this set if it is present.:::if->return->eClass->e->getClass->if->eClass->getSuperclass->return->eOrdinal->ordinal->eWordNum->oldElements->result->if->return
JumboEnumSet#containsAll(Collection):::Returns true if this set contains all of the elements in the specified collection.:::if->return->super->containsAll->es->if->return->es->isEmpty->for->i->return
JumboEnumSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.:::if->return->super->addAll->es->if->if->es->isEmpty->return->else->throw->new->ClassCastException->for->i->return->recalculateSize
JumboEnumSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection.:::if->return->super->removeAll->es->if->return->for->i->return->recalculateSize
JumboEnumSet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection.:::if->return->super->retainAll->es->if->changed->clear->return->for->i->return->recalculateSize
JumboEnumSet#clear():::Removes all of the elements from this set.:::Arrays->fill
JumboEnumSet#equals(Object):::Compares the specified object with this set for equality:::if->return->super->equals->es->if->return->return->Arrays->equals
KeyValueHolder#getKey():::Gets the key from this holder.:::return
KeyValueHolder#getValue():::Gets the value from this holder.:::return
KeyValueHolder#setValue(V):::Throws UnsupportedOperationException.:::throw->new->UnsupportedOperationException
KeyValueHolder#equals(Object):::Compares the specified object with this entry for equality:::if->return->e->return->key->e->getKey->equals->value->e->getValue->equals
KeyValueHolder#hashCode():::Returns the hash code value for this map entry:::return->key->hashCode->value->hashCode
KeyValueHolder#toString():::Returns a String representation of this map entry:::return
LinkedHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.:::for->e->return
LinkedHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::e->if->hash->getNode->return->if->afterNodeAccess->return
LinkedHashMap#removeEldestEntry(Map.Entry):::Returns true if this map should remove its eldest entry:::return
LinkedHashMap#keySet():::Returns a Set view of the keys contained in this map:::ks->if->new->LinkedKeySet->return
LinkedHashMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->LinkedValues->return
LinkedHashMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->return->new->LinkedEntrySet
LinkedHashSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set:::return->Spliterators->spliterator
LinkedList#linkLast(E):::Links e as last element.:::l->newNode->new->Node<>->if->else
LinkedList#linkBefore(E, Node):::Inserts element e before non-null Node succ.:::pred->newNode->new->Node<>->if->else
LinkedList#unlink(Node):::Unlinks non-null node x.:::element->next->prev->if->else->if->else->return
LinkedList#getFirst():::Returns the first element in this list.:::f->if->throw->new->NoSuchElementException->return
LinkedList#getLast():::Returns the last element in this list.:::l->if->throw->new->NoSuchElementException->return
LinkedList#removeFirst():::Removes and returns the first element from this list.:::f->if->throw->new->NoSuchElementException->return->unlinkFirst
LinkedList#removeLast():::Removes and returns the last element from this list.:::l->if->throw->new->NoSuchElementException->return->unlinkLast
LinkedList#addFirst(E):::Inserts the specified element at the beginning of this list.:::linkFirst
LinkedList#addLast(E):::Appends the specified element to the end of this list:::linkLast
LinkedList#contains(Object):::Returns true if this list contains the specified element:::return->indexOf
LinkedList#size():::Returns the number of elements in this list.:::return
LinkedList#add(E):::Appends the specified element to the end of this list:::linkLast->return
LinkedList#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present:::if->for->x->else->for->x->return
LinkedList#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator:::return->addAll
LinkedList#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list, starting at the specified position:::checkPositionIndex->a->c->toArray->numNew->if->return->pred->succ->if->else->node->foreach->e->newNode->new->Node<>->if->else->if->else->return
LinkedList#clear():::Removes all of the elements from this list:::for->x
LinkedList#get(int):::Returns the element at the specified position in this list.:::checkElementIndex->return->node
LinkedList#set(int, E):::Replaces the element at the specified position in this list with the specified element.:::checkElementIndex->x->node->oldVal->return
LinkedList#add(int, E):::Inserts the specified element at the specified position in this list:::checkPositionIndex->if->linkLast->else->node->linkBefore
LinkedList#remove(int):::Removes the element at the specified position in this list:::checkElementIndex->return->node->unlink
LinkedList#node(int):::Returns the (non-null) Node at the specified element index.:::if->x->for->i->return->else->x->for->i->return
LinkedList#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element:::index->if->for->x->else->for->x->return
LinkedList#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element:::index->if->for->x->else->for->x->return
LinkedList#peek():::Retrieves, but does not remove, the head (first element) of this list.:::f->return
LinkedList#element():::Retrieves, but does not remove, the head (first element) of this list.:::return->getFirst
LinkedList#poll():::Retrieves and removes the head (first element) of this list.:::f->return->unlinkFirst
LinkedList#remove():::Retrieves and removes the head (first element) of this list.:::return->removeFirst
LinkedList#offer(E):::Adds the specified element as the tail (last element) of this list.:::return->add
LinkedList#offerFirst(E):::Inserts the specified element at the front of this list.:::addFirst->return
LinkedList#offerLast(E):::Inserts the specified element at the end of this list.:::addLast->return
LinkedList#peekFirst():::Retrieves, but does not remove, the first element of this list, or returns null if this list is empty.:::f->return
LinkedList#peekLast():::Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.:::l->return
LinkedList#pollFirst():::Retrieves and removes the first element of this list, or returns null if this list is empty.:::f->return->unlinkFirst
LinkedList#pollLast():::Retrieves and removes the last element of this list, or returns null if this list is empty.:::l->return->unlinkLast
LinkedList#push(E):::Pushes an element onto the stack represented by this list:::addFirst
LinkedList#pop():::Pops an element from the stack represented by this list:::return->removeFirst
LinkedList#removeFirstOccurrence(Object):::Removes the first occurrence of the specified element in this list (when traversing the list from head to tail):::return->remove
LinkedList#removeLastOccurrence(Object):::Removes the last occurrence of the specified element in this list (when traversing the list from head to tail):::if->for->x->else->for->x->return
LinkedList#listIterator(int):::Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list:::checkPositionIndex->return->new->ListItr
LinkedList#clone():::Returns a shallow copy of this LinkedList:::clone->superClone->for->x->return
LinkedList#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element):::result->new->ObjectArr->i->for->x->return
LinkedList#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::if->a->getClass->getComponentType->newInstance->i->result->for->x->if->return
LinkedList#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list:::return->new->LLSpliterator<>
List#size():::Returns the number of elements in this list:::
List#isEmpty():::Returns true if this list contains no elements.:::
List#contains(Object):::Returns true if this list contains the specified element:::
List#iterator():::Returns an iterator over the elements in this list in proper sequence.:::
List#toArray():::Returns an array containing all of the elements in this list in proper sequence (from first to last element):::
List#toArray(T[]):::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array:::
List#add(E):::Appends the specified element to the end of this list (optional operation):::
List#remove(Object):::Removes the first occurrence of the specified element from this list, if it is present (optional operation):::
List#containsAll(Collection):::Returns true if this list contains all of the elements of the specified collection.:::
List#addAll(Collection):::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation):::
List#addAll(int, Collection):::Inserts all of the elements in the specified collection into this list at the specified position (optional operation):::
List#removeAll(Collection):::Removes from this list all of its elements that are contained in the specified collection (optional operation).:::
List#retainAll(Collection):::Retains only the elements in this list that are contained in the specified collection (optional operation):::
List#replaceAll(UnaryOperator):::Replaces each element of this list with the result of applying the operator to that element:::Objects->requireNonNull->li->this->listIterator->while->li->hasNext->li->operator->li->next->apply->set
List#sort(Comparator):::Sorts this list according to the order induced by the specified Comparator:::a->this->toArray->Arrays->sort->i->this->listIterator->foreach->i->next->i->set
List#clear():::Removes all of the elements from this list (optional operation):::
List#equals(Object):::Compares the specified object with this list for equality:::
List#hashCode():::Returns the hash code value for this list:::
List#get(int):::Returns the element at the specified position in this list.:::
List#set(int, E):::Replaces the element at the specified position in this list with the specified element (optional operation).:::
List#add(int, E):::Inserts the specified element at the specified position in this list (optional operation):::
List#remove(int):::Removes the element at the specified position in this list (optional operation):::
List#indexOf(Object):::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element:::
List#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element:::
List#listIterator():::Returns a list iterator over the elements in this list (in proper sequence).:::
List#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list:::
List#subList(int, int):::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive:::
List#spliterator():::Creates a Spliterator over the elements in this list:::if->return->new->AbstractList.RandomAccessSpliterator<>->else->return->Spliterators->spliterator
List#of():::Returns an unmodifiable list containing zero elements:::return->ImmutableCollections->emptyList
List#of(E):::Returns an unmodifiable list containing one element:::return->new->ImmutableCollections.List12<>
List#of(E, E):::Returns an unmodifiable list containing two elements:::return->new->ImmutableCollections.List12<>
List#of(E, E, E):::Returns an unmodifiable list containing three elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E):::Returns an unmodifiable list containing four elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E):::Returns an unmodifiable list containing five elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E):::Returns an unmodifiable list containing six elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E, E):::Returns an unmodifiable list containing seven elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing eight elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing nine elements:::return->new->ImmutableCollections.ListN<>
List#of(E, E, E, E, E, E, E, E, E, E):::Returns an unmodifiable list containing ten elements:::return->new->ImmutableCollections.ListN<>
List#of(E...):::Returns an unmodifiable list containing an arbitrary number of elements:::switch->return->ImmutableCollections->emptyList->return->new->ImmutableCollections.List12<>->return->new->ImmutableCollections.List12<>->return->new->ImmutableCollections.ListN<>
List#copyOf(Collection):::Returns an unmodifiable List containing the elements of the given Collection, in its iteration order:::return->ImmutableCollections->listCopy
ListIterator#hasNext():::Returns true if this list iterator has more elements when traversing the list in the forward direction:::
ListIterator#next():::Returns the next element in the list and advances the cursor position:::
ListIterator#hasPrevious():::Returns true if this list iterator has more elements when traversing the list in the reverse direction:::
ListIterator#previous():::Returns the previous element in the list and moves the cursor position backwards:::
ListIterator#nextIndex():::Returns the index of the element that would be returned by a subsequent call to #next:::
ListIterator#previousIndex():::Returns the index of the element that would be returned by a subsequent call to #previous:::
ListIterator#remove():::Removes from the list the last element that was returned by #next or #previous (optional operation):::
ListIterator#set(E):::Replaces the last element returned by #next or #previous with the specified element (optional operation):::
ListIterator#add(E):::Inserts the specified element into the list (optional operation):::
ListResourceBundle#getKeys():::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.:::if->loadLookup->parent->return->lookup->keySet->parent->getKeys->new->ResourceBundleEnumeration
ListResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle.:::if->loadLookup->return->lookup->keySet
ListResourceBundle#getContents():::Returns an array in which each item is a pair of objects in an Object array:::
Locale#getInstance(String, String, String):::Returns a Locale constructed from the given language, country and variant:::return->getInstance
Locale#getDefault():::Gets the current value of the default locale for this instance of the Java Virtual Machine:::return
Locale#getDefault(Locale.Category):::Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine:::switch->if->synchronized->if->initDefault->return->if->synchronized->if->initDefault->return->return->getDefault
Locale#setDefault(Locale):::Sets the default locale for this instance of the Java Virtual Machine:::setDefault->setDefault
Locale#setDefault(Locale.Category, Locale):::Sets the default locale for the specified Category for this instance of the Java Virtual Machine:::if->throw->new->NullPointerException->if->throw->new->NullPointerException->sm->System->getSecurityManager->if->sm->new->PropertyPermission->checkPermission->switch->break->break
Locale#getAvailableLocales():::Returns an array of all installed locales:::return->LocaleServiceProviderPool->getAllAvailableLocales
Locale#getISOCountries():::Returns a list of all 2-letter country codes defined in ISO 3166:::if->getISO2Table->result->new->StringArr->System->arraycopy->return
Locale#getISOCountries(IsoCountryCode):::Returns a Set of ISO3166 country codes for the specified type.:::Objects->requireNonNull->return->IsoCountryCode->retrieveISOCountryCodes
Locale#getISOLanguages():::Returns a list of all 2-letter language codes defined in ISO 639:::if->getISO2Table->result->new->StringArr->System->arraycopy->return
Locale#getLanguage():::Returns the language code of this Locale:::return->baseLocale->getLanguage
Locale#getScript():::Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code:::return->baseLocale->getScript
Locale#getCountry():::Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.:::return->baseLocale->getRegion
Locale#getVariant():::Returns the variant code for this locale.:::return->baseLocale->getVariant
Locale#hasExtensions():::Returns true if this Locale has any  extensions.:::return
Locale#stripExtensions():::Returns a copy of this Locale with no  extensions:::return->hasExtensions->Locale->getInstance
Locale#getExtension(char):::Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key:::if->LocaleExtensions->isValidKey->throw->new->IllegalArgumentException->return->hasExtensions->localeExtensions->getExtensionValue
Locale#getExtensionKeys():::Returns the set of extension keys associated with this locale, or the empty set if it has no extensions:::if->hasExtensions->return->Collections->emptySet->return->localeExtensions->getKeys
Locale#getUnicodeLocaleAttributes():::Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes:::if->hasExtensions->return->Collections->emptySet->return->localeExtensions->getUnicodeLocaleAttributes
Locale#getUnicodeLocaleType(String):::Returns the Unicode locale type associated with the specified Unicode locale key for this locale:::if->isUnicodeExtensionKey->throw->new->IllegalArgumentException->return->hasExtensions->localeExtensions->getUnicodeLocaleType
Locale#getUnicodeLocaleKeys():::Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none:::if->return->Collections->emptySet->return->localeExtensions->getUnicodeLocaleKeys
Locale#getBaseLocale():::Package locale method returning the Locale's BaseLocale, used by ResourceBundle:::return
Locale#getLocaleExtensions():::Package private method returning the Locale's LocaleExtensions, used by ResourceBundle.:::return
Locale#toString():::Returns a string representation of this Locale object, consisting of language, country, variant, script, and extensions as below:  language + "_" + country + "_" + (variant + "_#" | "#") + script + "_" + extensions   Language is always lower case, country is always upper case, script is always title case, and extensions are always lower case:::l->baseLocale->getLanguage->length->s->baseLocale->getScript->length->r->baseLocale->getRegion->length->v->baseLocale->getVariant->length->e->localeExtensions->getID->length->result->baseLocale->getLanguage->new->StringBuilder->if->result->append->baseLocale->getRegion->append->if->result->append->baseLocale->getVariant->append->if->result->append->baseLocale->getScript->append->if->result->append->if->result->append->result->localeExtensions->getID->append->return->result->toString
Locale#toLanguageTag():::Returns a well-formed IETF BCP 47 language tag representing this locale:::if->return->tag->LanguageTag->parseLocale->buf->new->StringBuilder->subtag->tag->getLanguage->if->subtag->length->buf->LanguageTag->canonicalizeLanguage->append->tag->getScript->if->subtag->length->buf->append->buf->LanguageTag->canonicalizeScript->append->tag->getRegion->if->subtag->length->buf->append->buf->LanguageTag->canonicalizeRegion->append->subtags->tag->getVariants->foreach->buf->append->buf->append->tag->getExtensions->foreach->buf->append->buf->LanguageTag->canonicalizeExtension->append->tag->getPrivateuse->if->subtag->length->if->buf->length->buf->append->buf->append->append->buf->append->langTag->buf->toString->synchronized->if->return
Locale#forLanguageTag(String):::Returns a locale for the specified IETF BCP 47 language tag string:::tag->LanguageTag->parse->bldr->new->InternalLocaleBuilder->bldr->setLanguageTag->base->bldr->getBaseLocale->exts->bldr->getLocaleExtensions->if->base->getVariant->length->base->getLanguage->base->getScript->base->getRegion->base->getVariant->getCompatibilityExtensions->return->getInstance
Locale#getISO3Language():::Returns a three-letter abbreviation of this locale's language:::lang->baseLocale->getLanguage->if->lang->length->return->language3->getISO3Code->if->throw->toString->new->MissingResourceException->return
Locale#getISO3Country():::Returns a three-letter abbreviation for this locale's country:::country3->baseLocale->getRegion->getISO3Code->if->throw->baseLocale->getRegion->toString->new->MissingResourceException->return
Locale#getDisplayLanguage():::Returns a name for the locale's language that is appropriate for display to the user:::return->getDefault->getDisplayLanguage
Locale#getDisplayLanguage(Locale):::Returns a name for the locale's language that is appropriate for display to the user:::return->baseLocale->getLanguage->getDisplayString
Locale#getDisplayScript():::Returns a name for the locale's script that is appropriate for display to the user:::return->getDefault->getDisplayScript
Locale#getDisplayScript(Locale):::Returns a name for the locale's script that is appropriate for display to the user:::return->baseLocale->getScript->getDisplayString
Locale#getDisplayCountry():::Returns a name for the locale's country that is appropriate for display to the user:::return->getDefault->getDisplayCountry
Locale#getDisplayCountry(Locale):::Returns a name for the locale's country that is appropriate for display to the user:::return->baseLocale->getRegion->getDisplayString
Locale#getDisplayVariant():::Returns a name for the locale's variant code that is appropriate for display to the user:::return->getDefault->getDisplayVariant
Locale#getDisplayVariant(Locale):::Returns a name for the locale's variant code that is appropriate for display to the user:::if->baseLocale->getVariant->length->return->lr->LocaleProviderAdapter->getResourceBundleBased->getLocaleResources->names->getDisplayVariantArray->return->lr->getLocaleName->formatList
Locale#getDisplayName():::Returns a name for the locale that is appropriate for display to the user:::return->getDefault->getDisplayName
Locale#getDisplayName(Locale):::Returns a name for the locale that is appropriate for display to the user:::lr->LocaleProviderAdapter->getResourceBundleBased->getLocaleResources->languageName->getDisplayLanguage->scriptName->getDisplayScript->countryName->getDisplayCountry->variantNames->getDisplayVariantArray->displayNamePattern->lr->getLocaleName->listCompositionPattern->lr->getLocaleName->mainName->qualifierNames->if->languageName->length->scriptName->length->countryName->length->if->return->else->return->formatList->names->new->ArrayList<>->if->languageName->length->names->add->if->scriptName->length->names->add->if->countryName->length->names->add->if->names->Arrays->asList->addAll->if->localeExtensions->getUnicodeLocaleAttributes->stream->getDisplayString->map->names->add->forEach->localeExtensions->getUnicodeLocaleKeys->stream->getDisplayKeyTypeExtensionString->map->names->add->forEach->names->get->numNames->names->size->names->subList->new->StringArr->toArray->new->StringArr->displayNames->formatList->if->return->new->MessageFormat->format->else->result->new->StringBuilder->result->append->if->result->append->result->append->result->append->return->result->toString
Locale#clone():::Overrides Cloneable.:::try->that->super->clone->return->catch->throw->new->InternalError->finally
Locale#hashCode():::Override hashCode:::hc->if->baseLocale->hashCode->if->localeExtensions->hashCode->return
Locale#equals(Object):::Returns true if this Locale is equal to another object:::if->return->if->return->otherBase->if->baseLocale->equals->return->if->return->return->localeExtensions->equals
Locale.Builder#setLocale(Locale):::Resets the Builder to match the provided locale:::try->localeBuilder->setLocale->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setLanguageTag(String):::Resets the Builder to match the provided IETF BCP 47 language tag:::sts->new->ParseStatus->tag->LanguageTag->parse->if->sts->isError->throw->sts->getErrorMessage->sts->getErrorIndex->new->IllformedLocaleException->localeBuilder->setLanguageTag->return
Locale.Builder#setLanguage(String):::Sets the language:::try->localeBuilder->setLanguage->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setScript(String):::Sets the script:::try->localeBuilder->setScript->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setRegion(String):::Sets the region:::try->localeBuilder->setRegion->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setVariant(String):::Sets the variant:::try->localeBuilder->setVariant->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setExtension(char, String):::Sets the extension for the given key:::try->localeBuilder->setExtension->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#setUnicodeLocaleKeyword(String, String):::Sets the Unicode locale keyword type for the given key:::try->localeBuilder->setUnicodeLocaleKeyword->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#addUnicodeLocaleAttribute(String):::Adds a unicode locale attribute, if not already present, otherwise has no effect:::try->localeBuilder->addUnicodeLocaleAttribute->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#removeUnicodeLocaleAttribute(String):::Removes a unicode locale attribute, if present, otherwise has no effect:::Objects->requireNonNull->try->localeBuilder->removeUnicodeLocaleAttribute->catch->throw->e->getMessage->e->getErrorIndex->new->IllformedLocaleException->finally->return
Locale.Builder#clear():::Resets the builder to its initial, empty state.:::localeBuilder->clear->return
Locale.Builder#clearExtensions():::Resets the extensions to their initial, empty state:::localeBuilder->clearExtensions->return
Locale.Builder#build():::Returns an instance of Locale created from the fields set on this builder:::baseloc->localeBuilder->getBaseLocale->extensions->localeBuilder->getLocaleExtensions->if->baseloc->getVariant->length->baseloc->getLanguage->baseloc->getScript->baseloc->getRegion->baseloc->getVariant->getCompatibilityExtensions->return->Locale->getInstance
Locale.LanguageRange#getRange():::Returns the language range of this LanguageRange.:::return
Locale.LanguageRange#getWeight():::Returns the weight of this LanguageRange.:::return
Locale.LanguageRange#parse(String):::Parses the given ranges to generate a Language Priority List:::return->LocaleMatcher->parse
Locale.LanguageRange#parse(String, Map>):::Parses the given ranges to generate a Language Priority List, and then customizes the list using the given map:::return->parse->mapEquivalents
Locale.LanguageRange#mapEquivalents(List, Map>):::Generates a new customized Language Priority List using the given priorityList and map:::return->LocaleMatcher->mapEquivalents
Locale.LanguageRange#hashCode():::Returns a hash code value for the object.:::h->if->range->hashCode->bitsWeight->Double->doubleToLongBits->if->return
Locale.LanguageRange#equals(Object):::Compares this object to the specified object:::if->return->if->return->other->return->range->equals
Locale.LanguageRange#toString():::Returns an informative string representation of this LanguageRange object, consisting of language range and weight if the range is weighted and the weight is less than the max weight.:::return
Locale#filter(List, Collection, FilteringMode):::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647:::return->LocaleMatcher->filter
Locale#filter(List, Collection):::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647:::return->filter
Locale#filterTags(List, Collection, FilteringMode):::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647:::return->LocaleMatcher->filterTags
Locale#filterTags(List, Collection):::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647:::return->filterTags
Locale#lookup(List, Collection):::Returns a Locale instance for the best-matching language tag using the lookup mechanism defined in RFC 4647.:::return->LocaleMatcher->lookup
Locale#lookupTag(List, Collection):::Returns the best-matching language tag using the lookup mechanism defined in RFC 4647:::return->LocaleMatcher->lookupTag
LocaleISOData#computeISO3166_1Alpha3Countries():::This method computes a set of ISO3166-1 alpha-3 country codes from existing isoCountryTable.:::tableLength->isoCountryTable->length->isoTable->new->StringArr->for->i->index->return->Set->of
LongSummaryStatistics#accept(int):::Records a new int value into the summary information.:::accept
LongSummaryStatistics#accept(long):::Records a new long value into the summary information.:::Math->min->Math->max
LongSummaryStatistics#combine(LongSummaryStatistics):::Combines the state of another LongSummaryStatistics into this one.:::Math->min->Math->max
LongSummaryStatistics#getCount():::Returns the count of values recorded.:::return
LongSummaryStatistics#getSum():::Returns the sum of values recorded, or zero if no values have been recorded.:::return
LongSummaryStatistics#getMin():::Returns the minimum value recorded, or Long.MAX_VALUE if no values have been recorded.:::return
LongSummaryStatistics#getMax():::Returns the maximum value recorded, or Long.MIN_VALUE if no values have been recorded:::return
LongSummaryStatistics#getAverage():::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.:::return->getCount->getSum->getCount
LongSummaryStatistics#toString():::Returns a non-empty string representation of this object suitable for debugging:::return->String->this->getClass->getSimpleName->getCount->getSum->getMin->getAverage->getMax->format
Map#size():::Returns the number of key-value mappings in this map:::
Map#isEmpty():::Returns true if this map contains no key-value mappings.:::
Map#containsKey(Object):::Returns true if this map contains a mapping for the specified key:::
Map#containsValue(Object):::Returns true if this map maps one or more keys to the specified value:::
Map#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::
Map#put(K, V):::Associates the specified value with the specified key in this map (optional operation):::
Map#remove(Object):::Removes the mapping for a key from this map if it is present (optional operation):::
Map#putAll(Map):::Copies all of the mappings from the specified map to this map (optional operation):::
Map#clear():::Removes all of the mappings from this map (optional operation):::
Map#keySet():::Returns a Set view of the keys contained in this map:::
Map#values():::Returns a Collection view of the values contained in this map:::
Map#entrySet():::Returns a Set view of the mappings contained in this map:::
Map.Entry#getKey():::Returns the key corresponding to this entry.:::
Map.Entry#getValue():::Returns the value corresponding to this entry:::
Map.Entry#setValue(V):::Replaces the value corresponding to this entry with the specified value (optional operation):::
Map.Entry#equals(Object):::Compares the specified object with this entry for equality:::
Map.Entry#hashCode():::Returns the hash code value for this map entry:::
Map.Entry#comparingByKey():::Returns a comparator that compares Map.Entry in natural order on key:::return->c1->getKey->c2->getKey->compareTo
Map.Entry#comparingByValue():::Returns a comparator that compares Map.Entry in natural order on value:::return->c1->getValue->c2->getValue->compareTo
Map.Entry#comparingByKey(Comparator):::Returns a comparator that compares Map.Entry by key using the given Comparator:::Objects->requireNonNull->return->cmp->c1->getKey->c2->getKey->compare
Map.Entry#comparingByValue(Comparator):::Returns a comparator that compares Map.Entry by value using the given Comparator:::Objects->requireNonNull->return->cmp->c1->getValue->c2->getValue->compare
Map#equals(Object):::Compares the specified object with this map for equality:::
Map#hashCode():::Returns the hash code value for this map:::
Map#getOrDefault(Object, V):::Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.:::v->return->get->containsKey
Map#forEach(BiConsumer):::Performs the given action for each entry in this map until all entries have been processed or the action throws an exception:::Objects->requireNonNull->foreach->entrySet->k->v->try->entry->getKey->entry->getValue->catch->throw->new->ConcurrentModificationException->finally->action->accept
Map#replaceAll(BiFunction):::Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception:::Objects->requireNonNull->foreach->entrySet->k->v->try->entry->getKey->entry->getValue->catch->throw->new->ConcurrentModificationException->finally->function->apply->try->entry->setValue->catch->throw->new->ConcurrentModificationException->finally
Map#putIfAbsent(K, V):::If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.:::v->get->if->put->return
Map#remove(Object, Object):::Removes the entry for the specified key only if it is currently mapped to the specified value.:::curValue->get->if->Objects->equals->containsKey->return->remove->return
Map#replace(K, V, V):::Replaces the entry for the specified key only if currently mapped to the specified value.:::curValue->get->if->Objects->equals->containsKey->return->put->return
Map#replace(K, V):::Replaces the entry for the specified key only if it is currently mapped to some value.:::curValue->if->get->containsKey->put->return
Map#computeIfAbsent(K, Function):::If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null:::Objects->requireNonNull->v->if->get->newValue->if->mappingFunction->apply->put->return->return
Map#computeIfPresent(K, BiFunction):::If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value:::Objects->requireNonNull->oldValue->if->get->newValue->remappingFunction->apply->if->put->return->else->remove->return->else->return
Map#compute(K, BiFunction):::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping):::Objects->requireNonNull->oldValue->get->newValue->remappingFunction->apply->if->if->containsKey->remove->return->else->return->else->put->return
Map#merge(K, V, BiFunction):::If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value:::Objects->requireNonNull->Objects->requireNonNull->oldValue->get->newValue->remappingFunction->apply->if->remove->else->put->return
Map#of():::Returns an unmodifiable map containing zero mappings:::return->ImmutableCollections->emptyMap
Map#of(K, V):::Returns an unmodifiable map containing a single mapping:::return->new->ImmutableCollections.Map1<>
Map#of(K, V, K, V):::Returns an unmodifiable map containing two mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V):::Returns an unmodifiable map containing three mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing four mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing five mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing six mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing seven mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing eight mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing nine mappings:::return->new->ImmutableCollections.MapN<>
Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V):::Returns an unmodifiable map containing ten mappings:::return->new->ImmutableCollections.MapN<>
Map#ofEntries(Entry...):::Returns an unmodifiable map containing keys and values extracted from the given entries:::if->return->ImmutableCollections->emptyMap->else->if->return->getKey->getValue->new->ImmutableCollections.Map1<>->else->kva->new->ObjectArr->a->foreach->entry->getKey->entry->getValue->return->new->ImmutableCollections.MapN<>
Map#entry(K, V):::Returns an unmodifiable Entry containing the given key and value:::return->new->KeyValueHolder<>
Map#copyOf(Map):::Returns an unmodifiable Map containing the entries of the given Map:::if->return->else->return->Map->map->entrySet->new->EntryArr->toArray->ofEntries
MissingFormatArgumentException#getFormatSpecifier():::Returns the unmatched format specifier.:::return
MissingFormatWidthException#getFormatSpecifier():::Returns the format specifier which does not have a width.:::return
MissingResourceException#getClassName():::Gets parameter passed by constructor.:::return
MissingResourceException#getKey():::Gets parameter passed by constructor.:::return
NavigableMap#lowerEntry(K):::Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.:::
NavigableMap#lowerKey(K):::Returns the greatest key strictly less than the given key, or null if there is no such key.:::
NavigableMap#floorEntry(K):::Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.:::
NavigableMap#floorKey(K):::Returns the greatest key less than or equal to the given key, or null if there is no such key.:::
NavigableMap#ceilingEntry(K):::Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.:::
NavigableMap#ceilingKey(K):::Returns the least key greater than or equal to the given key, or null if there is no such key.:::
NavigableMap#higherEntry(K):::Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.:::
NavigableMap#higherKey(K):::Returns the least key strictly greater than the given key, or null if there is no such key.:::
NavigableMap#firstEntry():::Returns a key-value mapping associated with the least key in this map, or null if the map is empty.:::
NavigableMap#lastEntry():::Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.:::
NavigableMap#pollFirstEntry():::Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.:::
NavigableMap#pollLastEntry():::Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.:::
NavigableMap#descendingMap():::Returns a reverse order view of the mappings contained in this map:::
NavigableMap#navigableKeySet():::Returns a NavigableSet view of the keys contained in this map:::
NavigableMap#descendingKeySet():::Returns a reverse order NavigableSet view of the keys contained in this map:::
NavigableMap#subMap(K, boolean, K, boolean):::Returns a view of the portion of this map whose keys range from fromKey to toKey:::
NavigableMap#headMap(K, boolean):::Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey:::
NavigableMap#tailMap(K, boolean):::Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey:::
NavigableMap#subMap(K, K):::Equivalent to {@code subMap(fromKey, true, toKey, false).:::
NavigableMap#headMap(K):::Equivalent to {@code headMap(toKey, false).:::
NavigableMap#tailMap(K):::Equivalent to {@code tailMap(fromKey, true).:::
NavigableSet#lower(E):::Returns the greatest element in this set strictly less than the given element, or null if there is no such element.:::
NavigableSet#floor(E):::Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.:::
NavigableSet#ceiling(E):::Returns the least element in this set greater than or equal to the given element, or null if there is no such element.:::
NavigableSet#higher(E):::Returns the least element in this set strictly greater than the given element, or null if there is no such element.:::
NavigableSet#pollFirst():::Retrieves and removes the first (lowest) element, or returns null if this set is empty.:::
NavigableSet#pollLast():::Retrieves and removes the last (highest) element, or returns null if this set is empty.:::
NavigableSet#iterator():::Returns an iterator over the elements in this set, in ascending order.:::
NavigableSet#descendingSet():::Returns a reverse order view of the elements contained in this set:::
NavigableSet#descendingIterator():::Returns an iterator over the elements in this set, in descending order:::
NavigableSet#subSet(E, boolean, E, boolean):::Returns a view of the portion of this set whose elements range from fromElement to toElement:::
NavigableSet#headSet(E, boolean):::Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement:::
NavigableSet#tailSet(E, boolean):::Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement:::
NavigableSet#subSet(E, E):::Equivalent to {@code subSet(fromElement, true, toElement, false).:::
NavigableSet#headSet(E):::Equivalent to {@code headSet(toElement, false).:::
NavigableSet#tailSet(E):::Equivalent to {@code tailSet(fromElement, true).:::
Objects#equals(Object, Object):::Returns true if the arguments are equal to each other and false otherwise:::return->a->equals
Objects#deepEquals(Object, Object):::Returns true if the arguments are deeply equal to each other and false otherwise:::if->return->else->if->return->else->return->Arrays->deepEquals0
Objects#hashCode(Object):::Returns the hash code of a non-null argument and 0 for a null argument.:::return->o->hashCode
Objects#hash(Object...):::Generates a hash code for a sequence of input values:::return->Arrays->hashCode
Objects#toString(Object):::Returns the result of calling toString for a non-null argument and "null" for a null argument.:::return->String->valueOf
Objects#toString(Object, String):::Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.:::return->o->toString
Objects#compare(T, T, Comparator):::Returns 0 if the arguments are identical and c.compare(a, b) otherwise:::return->c->compare
Objects#requireNonNull(T):::Checks that the specified object reference is not null:::if->throw->new->NullPointerException->return
Objects#requireNonNull(T, String):::Checks that the specified object reference is not null and throws a customized NullPointerException if it is:::if->throw->new->NullPointerException->return
Objects#isNull(Object):::Returns true if the provided reference is null otherwise returns false.:::return
Objects#nonNull(Object):::Returns true if the provided reference is non-null otherwise returns false.:::return
Objects#requireNonNullElse(T, T):::Returns the first argument if it is non-null and otherwise returns the non-null second argument.:::return->requireNonNull
Objects#requireNonNullElseGet(T, Supplier):::Returns the first argument if it is non-null and otherwise returns the non-null value of supplier.get().:::return->requireNonNull->get->requireNonNull
Objects#requireNonNull(T, Supplier):::Checks that the specified object reference is not null and throws a customized NullPointerException if it is:::if->throw->messageSupplier->get->new->NullPointerException->return
Objects#checkIndex(int, int):::Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive):::return->Preconditions->checkIndex
Objects#checkFromToIndex(int, int, int):::Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive):::return->Preconditions->checkFromToIndex
Objects#checkFromIndexSize(int, int, int):::Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive):::return->Preconditions->checkFromIndexSize
Observable#addObserver(Observer):::Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set:::if->throw->new->NullPointerException->if->obs->contains->obs->addElement
Observable#deleteObserver(Observer):::Deletes an observer from the set of observers of this object:::obs->removeElement
Observable#notifyObservers():::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed:::notifyObservers
Observable#notifyObservers(Object):::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed:::arrLocal->synchronized->if->return->obs->toArray->clearChanged->for->i
Observable#deleteObservers():::Clears the observer list so that this object no longer has any observers.:::obs->removeAllElements
Observable#setChanged():::Marks this Observable object as having been changed; the hasChanged method will now return true.:::
Observable#clearChanged():::Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false:::
Observable#hasChanged():::Tests if this object has changed.:::return
Observable#countObservers():::Returns the number of observers of this Observable object.:::return->obs->size
Observer#update(Observable, Object):::This method is called whenever the observed object is changed:::
Optional#empty():::Returns an empty Optional instance:::t->return
Optional#of(T):::Returns an Optional describing the given non-null value.:::return->new->Optional<>
Optional#ofNullable(T):::Returns an Optional describing the given value, if non-null, otherwise returns an empty Optional.:::return->empty->of
Optional#get():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
Optional#isPresent():::If a value is present, returns true, otherwise false.:::return
Optional#isEmpty():::If a value is  not present, returns true, otherwise false.:::return
Optional#ifPresent(Consumer):::If a value is present, performs the given action with the value, otherwise does nothing.:::if->action->accept
Optional#ifPresentOrElse(Consumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.:::if->action->accept->else->emptyAction->run
Optional#filter(Predicate):::If a value is present, and the value matches the given predicate, returns an Optional describing the value, otherwise returns an empty Optional.:::Objects->requireNonNull->if->isPresent->return->else->return->predicate->test->empty
Optional#map(Function):::If a value is present, returns an Optional describing (as if by #ofNullable) the result of applying the given mapping function to the value, otherwise returns an empty Optional:::Objects->requireNonNull->if->isPresent->return->empty->else->return->Optional->mapper->apply->ofNullable
Optional#flatMap(Function>):::If a value is present, returns the result of applying the given Optional-bearing mapping function to the value, otherwise returns an empty Optional:::Objects->requireNonNull->if->isPresent->return->empty->else->r->mapper->apply->return->Objects->requireNonNull
Optional#or(Supplier>):::If a value is present, returns an Optional describing the value, otherwise returns an Optional produced by the supplying function.:::Objects->requireNonNull->if->isPresent->return->else->r->supplier->get->return->Objects->requireNonNull
Optional#stream():::If a value is present, returns a sequential Stream containing only that value, otherwise returns an empty Stream.:::if->isPresent->return->Stream->empty->else->return->Stream->of
Optional#orElse(T):::If a value is present, returns the value, otherwise returns other.:::return
Optional#orElseGet(Supplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.:::return->supplier->get
Optional#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
Optional#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.:::if->return->else->throw->exceptionSupplier->get
Optional#equals(Object):::Indicates whether some other object is "equal to" this Optional:::if->return->if->return->other->return->Objects->equals
Optional#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.:::return->Objects->hashCode
Optional#toString():::Returns a non-empty string representation of this Optional suitable for debugging:::return->String->format
OptionalDouble#empty():::Returns an empty OptionalDouble instance:::return
OptionalDouble#of(double):::Returns an OptionalDouble describing the given value.:::return->new->OptionalDouble
OptionalDouble#getAsDouble():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalDouble#isPresent():::If a value is present, returns true, otherwise false.:::return
OptionalDouble#isEmpty():::If a value is not present, returns true, otherwise false.:::return
OptionalDouble#ifPresent(DoubleConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.:::if->action->accept
OptionalDouble#ifPresentOrElse(DoubleConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.:::if->action->accept->else->emptyAction->run
OptionalDouble#stream():::If a value is present, returns a sequential DoubleStream containing only that value, otherwise returns an empty DoubleStream.:::if->return->DoubleStream->of->else->return->DoubleStream->empty
OptionalDouble#orElse(double):::If a value is present, returns the value, otherwise returns other.:::return
OptionalDouble#orElseGet(DoubleSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.:::return->supplier->getAsDouble
OptionalDouble#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalDouble#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.:::if->return->else->throw->exceptionSupplier->get
OptionalDouble#equals(Object):::Indicates whether some other object is "equal to" this OptionalDouble:::if->return->if->return->other->return->Double->compare
OptionalDouble#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.:::return->Double->hashCode
OptionalDouble#toString():::Returns a non-empty string representation of this OptionalDouble suitable for debugging:::return->String->format
OptionalInt#empty():::Returns an empty OptionalInt instance:::return
OptionalInt#of(int):::Returns an OptionalInt describing the given value.:::return->new->OptionalInt
OptionalInt#getAsInt():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalInt#isPresent():::If a value is present, returns true, otherwise false.:::return
OptionalInt#isEmpty():::If a value is not present, returns true, otherwise false.:::return
OptionalInt#ifPresent(IntConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.:::if->action->accept
OptionalInt#ifPresentOrElse(IntConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.:::if->action->accept->else->emptyAction->run
OptionalInt#stream():::If a value is present, returns a sequential IntStream containing only that value, otherwise returns an empty IntStream.:::if->return->IntStream->of->else->return->IntStream->empty
OptionalInt#orElse(int):::If a value is present, returns the value, otherwise returns other.:::return
OptionalInt#orElseGet(IntSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.:::return->supplier->getAsInt
OptionalInt#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalInt#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.:::if->return->else->throw->exceptionSupplier->get
OptionalInt#equals(Object):::Indicates whether some other object is "equal to" this OptionalInt:::if->return->if->return->other->return
OptionalInt#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.:::return->Integer->hashCode
OptionalInt#toString():::Returns a non-empty string representation of this OptionalInt suitable for debugging:::return->String->format
OptionalLong#empty():::Returns an empty OptionalLong instance:::return
OptionalLong#of(long):::Returns an OptionalLong describing the given value.:::return->new->OptionalLong
OptionalLong#getAsLong():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalLong#isPresent():::If a value is present, returns true, otherwise false.:::return
OptionalLong#isEmpty():::If a value is not present, returns true, otherwise false.:::return
OptionalLong#ifPresent(LongConsumer):::If a value is present, performs the given action with the value, otherwise does nothing.:::if->action->accept
OptionalLong#ifPresentOrElse(LongConsumer, Runnable):::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.:::if->action->accept->else->emptyAction->run
OptionalLong#stream():::If a value is present, returns a sequential LongStream containing only that value, otherwise returns an empty LongStream.:::if->return->LongStream->of->else->return->LongStream->empty
OptionalLong#orElse(long):::If a value is present, returns the value, otherwise returns other.:::return
OptionalLong#orElseGet(LongSupplier):::If a value is present, returns the value, otherwise returns the result produced by the supplying function.:::return->supplier->getAsLong
OptionalLong#orElseThrow():::If a value is present, returns the value, otherwise throws NoSuchElementException.:::if->throw->new->NoSuchElementException->return
OptionalLong#orElseThrow(Supplier):::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.:::if->return->else->throw->exceptionSupplier->get
OptionalLong#equals(Object):::Indicates whether some other object is "equal to" this OptionalLong:::if->return->if->return->other->return
OptionalLong#hashCode():::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.:::return->Long->hashCode
OptionalLong#toString():::Returns a non-empty string representation of this OptionalLong suitable for debugging:::return->String->format
PrimitiveIterator#forEachRemaining(T_CONS):::Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception:::
PrimitiveIterator.OfInt#nextInt():::Returns the next int element in the iteration.:::
PrimitiveIterator.OfInt#forEachRemaining(IntConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception:::Objects->requireNonNull->while->hasNext->action->nextInt->accept
PrimitiveIterator.OfLong#nextLong():::Returns the next long element in the iteration.:::
PrimitiveIterator.OfLong#forEachRemaining(LongConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception:::Objects->requireNonNull->while->hasNext->action->nextLong->accept
PrimitiveIterator.OfDouble#nextDouble():::Returns the next double element in the iteration.:::
PrimitiveIterator.OfDouble#forEachRemaining(DoubleConsumer):::Performs the given action for each remaining element until all elements have been processed or the action throws an exception:::Objects->requireNonNull->while->hasNext->action->nextDouble->accept
PriorityQueue#add(E):::Inserts the specified element into this priority queue.:::return->offer
PriorityQueue#offer(E):::Inserts the specified element into this priority queue.:::if->throw->new->NullPointerException->i->if->grow->siftUp->return
PriorityQueue#remove(Object):::Removes a single instance of the specified element from this queue, if it is present:::i->indexOf->if->return->else->removeAt->return
PriorityQueue#removeEq(Object):::Identity-based version for use in Itr.remove.:::es->for->i->n
PriorityQueue#contains(Object):::Returns true if this queue contains the specified element:::return->indexOf
PriorityQueue#toArray():::Returns an array containing all of the elements in this queue:::return->Arrays->copyOf
PriorityQueue#toArray(T[]):::Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array:::size->if->return->Arrays->a->getClass->copyOf->System->arraycopy->if->return
PriorityQueue#iterator():::Returns an iterator over the elements in this queue:::return->new->Itr
PriorityQueue#clear():::Removes all of the elements from this priority queue:::es->for->i->n
PriorityQueue#removeAt(int):::Removes the ith element from queue:::es->s->if->else->moved->siftDown->if->siftUp->if->return->return
PriorityQueue#comparator():::Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the Comparable natural ordering of its elements.:::return
PriorityQueue#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this queue:::return->new->PriorityQueueSpliterator
Properties#setProperty(String, String):::Calls the Hashtable method put:::return->put
Properties#load(Reader):::Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format:::Objects->requireNonNull->new->LineReader->load0
Properties#load(InputStream):::Reads a property list (key and element pairs) from the input byte stream:::Objects->requireNonNull->new->LineReader->load0
Properties#save(OutputStream, String):::Calls the store(OutputStream out, String comments) method and suppresses IOExceptions that were thrown.:::try->store->catch->finally
Properties#store(Writer, String):::Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the #load(java.io.Reader) load(Reader) method:::new->BufferedWriter->store0
Properties#store(OutputStream, String):::Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the #load(InputStream) load(InputStream) method:::new->OutputStreamWriter->new->BufferedWriter->store0
Properties#loadFromXML(InputStream):::Loads all of the properties represented by the XML document on the specified input stream into this properties table:::Objects->requireNonNull->handler->new->PropertiesDefaultHandler->handler->load->in->close
Properties#storeToXML(OutputStream, String):::Emits an XML document representing all of the properties contained in this table:::storeToXML
Properties#storeToXML(OutputStream, String, String):::Emits an XML document representing all of the properties contained in this table, using the specified encoding:::Objects->requireNonNull->Objects->requireNonNull->try->charset->Charset->forName->storeToXML->catch->throw->new->UnsupportedEncodingException->finally
Properties#storeToXML(OutputStream, String, Charset):::Emits an XML document representing all of the properties contained in this table, using the specified encoding:::Objects->requireNonNull->Objects->requireNonNull->handler->new->PropertiesDefaultHandler->handler->store
Properties#getProperty(String):::Searches for the property with the specified key in this property list:::oval->map->get->sval->defaults->return->defaults->getProperty
Properties#getProperty(String, String):::Searches for the property with the specified key in this property list:::val->getProperty->return
Properties#propertyNames():::Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.:::h->new->Hashtable<>->enumerate->return->h->keys
Properties#stringPropertyNames():::Returns an unmodifiable set of keys from this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list:::h->new->HashMap<>->enumerateStringProperties->return->Collections->h->keySet->unmodifiableSet
Properties#list(PrintStream):::Prints this property list out to the specified output stream:::out->println->h->new->HashMap<>->enumerate->foreach->h->entrySet->key->e->getKey->val->e->getValue->if->val->length->val->substring->out->println
PropertyPermission#implies(Permission):::Checks if this PropertyPermission object "implies" the specified permission:::if->return->that->return->super->implies
PropertyPermission#equals(Object):::Checks two PropertyPermission objects for equality:::if->return->if->return->that->return->this->getName->that->getName->equals
PropertyPermission#hashCode():::Returns the hash code value for this object:::return->this->getName->hashCode
PropertyPermission#getActions(int):::Return the canonical string representation of the actions:::switch->return->return->return->return
PropertyPermission#getActions():::Returns the "canonical string representation" of the actions:::if->getActions->return
PropertyPermission#getMask():::Return the current action mask:::return
PropertyPermission#newPermissionCollection():::Returns a new PermissionCollection object for storing PropertyPermission objects.:::return->new->PropertyPermissionCollection
PropertyPermissionCollection#add(Permission):::Adds a permission to the PropertyPermissions:::if->throw->new->IllegalArgumentException->if->isReadOnly->throw->new->SecurityException->pp->propName->pp->getName->perms->new->java.util.function.BiFunction<>->merge->if->if->propName->equals
PropertyPermissionCollection#implies(Permission):::Check and see if this set of permissions implies the permissions expressed in "permission".:::if->return->pp->x->desired->pp->getMask->effective->if->perms->get->if->x->getMask->if->return->name->pp->getName->perms->get->if->x->getMask->if->return->last->offset->name->length->while->name->lastIndexOf->name->substring->perms->get->if->x->getMask->if->return->return
PropertyPermissionCollection#elements():::Returns an enumeration of all the PropertyPermission objects in the container.:::return->perms->elements
PropertyResourceBundle#getKeys():::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.:::parent->return->lookup->keySet->parent->getKeys->new->ResourceBundleEnumeration
PropertyResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle.:::return->lookup->keySet
Queue#add(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.:::
Queue#offer(E):::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions:::
Queue#remove():::Retrieves and removes the head of this queue:::
Queue#poll():::Retrieves and removes the head of this queue, or returns null if this queue is empty.:::
Queue#element():::Retrieves, but does not remove, the head of this queue:::
Queue#peek():::Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.:::
Random#setSeed(long):::Sets the seed of this random number generator using a single long seed:::initialScramble->set
Random#next(int):::Generates the next pseudorandom number:::oldseed->nextseed->seed->do->seed->get->while->seed->compareAndSet->return
Random#nextBytes(byte[]):::Generates random bytes and places them into a user-supplied byte array:::for->i->len
Random#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators:::r->nextLong->if->n->m->if->else->if->for->u->nextLong->else->while->nextLong->return
Random#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators:::if->n->if->return->nextInt->else->r->do->nextInt->while->return->else->return->nextInt
Random#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.:::r->nextDouble->if->if->Double->Double->doubleToLongBits->longBitsToDouble->return
Random#nextInt():::Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence:::return->next
Random#nextInt(int):::Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence:::if->throw->new->IllegalArgumentException->r->next->m->if->else->for->u->next->return
Random#nextLong():::Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence:::return->next->next
Random#nextBoolean():::Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence:::return->next
Random#nextFloat():::Returns the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence:::return->next
Random#nextDouble():::Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence:::return->next->next
Random#nextGaussian():::Returns the next pseudorandom, Gaussian ("normally") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence:::if->return->else->v1->v2->s->do->nextDouble->nextDouble->while->multiplier->StrictMath->StrictMath->log->sqrt->return
Random#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
Random#ints():::Returns an effectively unlimited stream of pseudorandom int values:::return->StreamSupport->new->RandomIntsSpliterator->intStream
Random#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
Random#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
Random#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
Random#longs():::Returns an effectively unlimited stream of pseudorandom long values:::return->StreamSupport->new->RandomLongsSpliterator->longStream
Random#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
Random#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
Random#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive):::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
Random#doubles():::Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive):::return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
Random#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
Random#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive):::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
RegularEnumSet#iterator():::Returns an iterator over the elements contained in this set:::return->new->EnumSetIterator<>
RegularEnumSet#size():::Returns the number of elements in this set.:::return->Long->bitCount
RegularEnumSet#isEmpty():::Returns true if this set contains no elements.:::return
RegularEnumSet#contains(Object):::Returns true if this set contains the specified element.:::if->return->eClass->e->getClass->if->eClass->getSuperclass->return->return->ordinal
RegularEnumSet#add(E):::Adds the specified element to this set if it is not already present.:::typeCheck->oldElements->ordinal->return
RegularEnumSet#remove(Object):::Removes the specified element from this set if it is present.:::if->return->eClass->e->getClass->if->eClass->getSuperclass->return->oldElements->ordinal->return
RegularEnumSet#containsAll(Collection):::Returns true if this set contains all of the elements in the specified collection.:::if->return->super->containsAll->es->if->return->es->isEmpty->return
RegularEnumSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.:::if->return->super->addAll->es->if->if->es->isEmpty->return->else->throw->new->ClassCastException->oldElements->return
RegularEnumSet#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection.:::if->return->super->removeAll->es->if->return->oldElements->return
RegularEnumSet#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection.:::if->return->super->retainAll->es->if->changed->return->oldElements->return
RegularEnumSet#clear():::Removes all of the elements from this set.:::
RegularEnumSet#equals(Object):::Compares the specified object with this set for equality:::if->return->super->equals->es->if->return->return
ResourceBundle#getBaseBundleName():::Returns the base name of this bundle, if known, or null if unknown:::return
ResourceBundle#getString(String):::Gets a string for the given key from this resource bundle or one of its parents:::return->getObject
ResourceBundle#getStringArray(String):::Gets a string array for the given key from this resource bundle or one of its parents:::return->getObject
ResourceBundle#getObject(String):::Gets an object for the given key from this resource bundle or one of its parents:::obj->handleGetObject->if->if->parent->getObject->if->throw->this->getClass->getName->this->getClass->getName->new->MissingResourceException->return
ResourceBundle#getLocale():::Returns the locale of this resource bundle:::return
ResourceBundle#setParent(ResourceBundle):::Sets the parent bundle of this bundle:::
ResourceBundle#getBundle(String):::Gets a resource bundle using the specified base name, the default locale, and the caller module:::caller->Reflection->getCallerClass->return->Locale->getDefault->getDefaultControl->getBundleImpl
ResourceBundle#getBundle(String, Control):::Returns a resource bundle using the specified base name, the default locale and the specified control:::caller->Reflection->getCallerClass->targetLocale->Locale->getDefault->checkNamedModule->return->getBundleImpl
ResourceBundle#getBundle(String, Locale):::Gets a resource bundle using the specified base name and locale, and the caller module:::caller->Reflection->getCallerClass->return->getDefaultControl->getBundleImpl
ResourceBundle#getBundle(String, Module):::Gets a resource bundle using the specified base name and the default locale on behalf of the specified module:::return->Reflection->getCallerClass->Locale->getDefault->getDefaultControl->getBundleFromModule
ResourceBundle#getBundle(String, Locale, Module):::Gets a resource bundle using the specified base name and locale on behalf of the specified module:::return->Reflection->getCallerClass->getDefaultControl->getBundleFromModule
ResourceBundle#getBundle(String, Locale, Control):::Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader:::caller->Reflection->getCallerClass->checkNamedModule->return->getBundleImpl
ResourceBundle#getBundle(String, Locale, ClassLoader):::Gets a resource bundle using the specified base name, locale, and class loader:::if->throw->new->NullPointerException->caller->Reflection->getCallerClass->return->getDefaultControl->getBundleImpl
ResourceBundle#getBundle(String, Locale, ClassLoader, Control):::Returns a resource bundle using the specified base name, target locale, class loader and control:::if->throw->new->NullPointerException->caller->Reflection->getCallerClass->checkNamedModule->return->getBundleImpl
ResourceBundle#clearCache():::Removes all resource bundles from the cache that have been loaded by the caller's module.:::caller->Reflection->getCallerClass->cacheList->keySet->key->getCallerModule->caller->getModule->removeIf
ResourceBundle#clearCache(ClassLoader):::Removes all resource bundles from the cache that have been loaded by the given class loader.:::Objects->requireNonNull->cacheList->keySet->m->return->key->getModule->getLoader->removeIf
ResourceBundle#handleGetObject(String):::Gets an object for the given key from this resource bundle:::
ResourceBundle#getKeys():::Returns an enumeration of the keys.:::
ResourceBundle#containsKey(String):::Determines whether the given key is contained in this ResourceBundle or its parent bundles.:::if->throw->new->NullPointerException->for->rb->return
ResourceBundle#keySet():::Returns a Set of all keys contained in this ResourceBundle and its parent bundles.:::keys->new->HashSet<>->for->rb->return
ResourceBundle#handleKeySet():::Returns a Set of the keys contained only in this ResourceBundle:::if->synchronized->if->keys->new->HashSet<>->enumKeys->getKeys->while->enumKeys->hasMoreElements->key->enumKeys->nextElement->if->handleGetObject->keys->add->return
ResourceBundle.Control#getControl(List):::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats:::if->formats->equals->return->if->formats->equals->return->if->formats->equals->return->throw->new->IllegalArgumentException
ResourceBundle.Control#getNoFallbackControl(List):::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats and the Control#getFallbackLocale(String, Locale) getFallbackLocale method returns null:::if->formats->equals->return->if->formats->equals->return->if->formats->equals->return->throw->new->IllegalArgumentException
ResourceBundle.Control#getFormats(String):::Returns a List of Strings containing formats to be used to load resource bundles for the given baseName:::if->throw->new->NullPointerException->return
ResourceBundle.Control#getCandidateLocales(String, Locale):::Returns a List of Locales as candidate locales for baseName and locale:::if->throw->new->NullPointerException->return->CANDIDATES_CACHE->locale->getBaseLocale->get->new->ArrayList<>
ResourceBundle.Control#getFallbackLocale(String, Locale):::Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method:::if->throw->new->NullPointerException->defaultLocale->Locale->getDefault->return->locale->equals
ResourceBundle.Control#newBundle(String, Locale, String, ClassLoader, boolean):::Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary:::bundleName->toBundleName->bundle->if->format->equals->try->c->loader->loadClass->if->isAssignableFrom->bundleClass->m->bundleClass->getModule->if->m->isNamed->m->bundleClass->getPackageName->isOpen->throw->bundleClass->getName->m->toString->new->IllegalAccessException->try->ctor->bundleClass->getConstructor->if->Modifier->ctor->getModifiers->isPublic->return->pa1->ctor->setAccessible->return->AccessController->doPrivileged->ctor->newInstance->catch->uncheckedThrow->finally->else->throw->c->getName->new->ClassCastException->catch->finally->else->if->format->equals->resourceName->toResourceName0->if->return->reloadFlag->stream->try->AccessController->new->PrivilegedExceptionAction<>->doPrivileged->catch->throw->e->getException->finally->if->try->new->PropertyResourceBundle->catch->finally->stream->close->else->throw->new->IllegalArgumentException->return
ResourceBundle.Control#getTimeToLive(String, Locale):::Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control:::if->throw->new->NullPointerException->return
ResourceBundle.Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle, long):::Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria:::if->throw->new->NullPointerException->if->format->equals->format->equals->format->substring->result->try->resourceName->toBundleName->toResourceName0->if->return->url->loader->getResource->if->lastModified->connection->url->openConnection->if->connection->setUseCaches->if->ent->getJarEntry->if->ent->getTime->if->else->connection->getLastModified->catch->throw->finally->return
ResourceBundle.Control#toBundleName(String, Locale):::Converts the given baseName and locale to the bundle name:::if->return->language->locale->getLanguage->script->locale->getScript->country->locale->getCountry->variant->locale->getVariant->if->return->sb->new->StringBuilder->sb->append->if->if->sb->append->append->append->append->append->append->append->else->if->sb->append->append->append->append->append->else->sb->append->append->append->else->if->sb->append->append->append->append->append->else->if->sb->append->append->append->else->sb->append->return->sb->toString
ResourceBundle.Control#toResourceName(String, String):::Converts the given bundleName to the form required by the ClassLoader#getResource ClassLoader.getResource method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix:::sb->bundleName->length->suffix->length->new->StringBuilder->sb->bundleName->replace->append->append->append->return->sb->toString
Scanner#close():::Closes this scanner:::if->return->if->try->close->catch->finally
Scanner#ioException():::Returns the IOException last thrown by this Scanner's underlying Readable:::return
Scanner#delimiter():::Returns the Pattern this Scanner is currently using to match delimiters.:::return
Scanner#useDelimiter(Pattern):::Sets this scanner's delimiting pattern to the specified pattern.:::return
Scanner#useDelimiter(String):::Sets this scanner's delimiting pattern to a pattern constructed from the specified String:::patternCache->forName->return
Scanner#locale():::Returns this scanner's locale:::return
Scanner#useLocale(Locale):::Sets this scanner's locale to the specified locale:::if->locale->equals->return->df->nf->NumberFormat->getNumberInstance->dfs->DecimalFormatSymbols->getInstance->if->else->adapter->LocaleProviderAdapter->getAdapter->if->LocaleProviderAdapter->getResourceBundleBased->all->adapter->getLocaleResources->getNumberPatterns->new->DecimalFormat->Integer->dfs->getGroupingSeparator->toHexString->Integer->dfs->getDecimalSeparator->toHexString->Pattern->dfs->getNaN->quote->Pattern->dfs->getInfinity->quote->df->getPositivePrefix->if->positivePrefix->isEmpty->Pattern->quote->df->getNegativePrefix->if->negativePrefix->isEmpty->Pattern->quote->df->getPositiveSuffix->if->positiveSuffix->isEmpty->Pattern->quote->df->getNegativeSuffix->if->negativeSuffix->isEmpty->Pattern->quote->return
Scanner#radix():::Returns this scanner's default radix:::return
Scanner#useRadix(int):::Sets this scanner's default radix to the specified radix:::if->throw->new->IllegalArgumentException->if->return->return
Scanner#match():::Returns the match result of the last scanning operation performed by this scanner:::if->throw->new->IllegalStateException->return->matcher->toMatchResult
Scanner#toString():::Returns the string representation of this Scanner:::sb->new->StringBuilder->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->sb->append->return->sb->toString
Scanner#hasNext():::Returns true if this scanner has another token in its input:::ensureOpen->saveState->while->if->hasTokenInBuffer->return->revertState->readInput->result->hasTokenInBuffer->return->revertState
Scanner#next():::Finds and returns the next complete token from this scanner:::ensureOpen->clearCaches->while->token->getCompleteTokenInBuffer->if->return->if->readInput->else->throwFor
Scanner#remove():::The remove operation is not supported by this implementation of Iterator.:::throw->new->UnsupportedOperationException
Scanner#hasNext(String):::Returns true if the next token matches the pattern constructed from the specified string:::return->patternCache->forName->hasNext
Scanner#next(String):::Returns the next token if it matches the pattern constructed from the specified string:::return->patternCache->forName->next
Scanner#hasNext(Pattern):::Returns true if the next complete token matches the specified pattern:::ensureOpen->if->throw->new->NullPointerException->saveState->while->if->getCompleteTokenInBuffer->cacheResult->return->revertState->if->readInput->else->return->revertState
Scanner#next(Pattern):::Returns the next token if it matches the specified pattern:::ensureOpen->if->throw->new->NullPointerException->if->return->getCachedResult->clearCaches->while->token->getCompleteTokenInBuffer->if->return->if->readInput->else->throwFor
Scanner#hasNextLine():::Returns true if there is another line in the input of this scanner:::saveState->result->linePattern->findWithinHorizon->if->mr->this->match->lineSep->mr->group->if->result->result->length->lineSep->length->substring->cacheResult->else->cacheResult->revertState->return
Scanner#nextLine():::Advances this scanner past the current line and returns the input that was skipped:::if->linePattern->return->getCachedResult->clearCaches->result->findWithinHorizon->if->throw->new->NoSuchElementException->mr->this->match->lineSep->mr->group->if->result->result->length->lineSep->length->substring->if->throw->new->NoSuchElementException->else->return
Scanner#findInLine(String):::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters:::return->patternCache->forName->findInLine
Scanner#findInLine(Pattern):::Attempts to find the next occurrence of the specified pattern ignoring delimiters:::ensureOpen->if->throw->new->NullPointerException->clearCaches->endPosition->saveState->while->if->separatorPattern->findPatternInBuffer->matcher->start->break->if->readInput->else->buf->limit->break->revertState->horizonForLine->if->return->return->findWithinHorizon
Scanner#findWithinHorizon(String, int):::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters:::return->patternCache->forName->findWithinHorizon
Scanner#findWithinHorizon(Pattern, int):::Attempts to find the next occurrence of the specified pattern:::ensureOpen->if->throw->new->NullPointerException->if->throw->new->IllegalArgumentException->clearCaches->while->if->findPatternInBuffer->return->matcher->group->if->readInput->else->break->return
Scanner#skip(Pattern):::Skips input that matches the specified pattern, ignoring delimiters:::ensureOpen->if->throw->new->NullPointerException->clearCaches->while->if->matchPatternInBuffer->matcher->end->return->if->readInput->else->throw->new->NoSuchElementException
Scanner#skip(String):::Skips input that matches a pattern constructed from the specified string:::return->patternCache->forName->skip
Scanner#hasNextBoolean():::Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string "true|false":::return->boolPattern->hasNext
Scanner#nextBoolean():::Scans the next token of the input into a boolean value and returns that value:::clearCaches->return->Boolean->boolPattern->next->parseBoolean
Scanner#hasNextByte():::Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the #nextByte method:::return->hasNextByte
Scanner#hasNextByte(int):::Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the #nextByte method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->Byte->parseByte->catch->finally->return
Scanner#nextByte():::Scans the next token of the input as a byte:::return->nextByte
Scanner#nextByte(int):::Scans the next token of the input as a byte:::if->val->byteValue->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->Byte->parseByte->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextShort():::Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the #nextShort method:::return->hasNextShort
Scanner#hasNextShort(int):::Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the #nextShort method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->Short->parseShort->catch->finally->return
Scanner#nextShort():::Scans the next token of the input as a short:::return->nextShort
Scanner#nextShort(int):::Scans the next token of the input as a short:::if->val->shortValue->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->Short->parseShort->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextInt():::Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the #nextInt method:::return->hasNextInt
Scanner#hasNextInt(int):::Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the #nextInt method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->Integer->parseInt->catch->finally->return
Scanner#nextInt():::Scans the next token of the input as an int:::return->nextInt
Scanner#nextInt(int):::Scans the next token of the input as an int:::if->val->intValue->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->Integer->parseInt->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextLong():::Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the #nextLong method:::return->hasNextLong
Scanner#hasNextLong(int):::Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the #nextLong method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->Long->parseLong->catch->finally->return
Scanner#nextLong():::Scans the next token of the input as a long:::return->nextLong
Scanner#nextLong(int):::Scans the next token of the input as a long:::if->val->longValue->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->Long->parseLong->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextFloat():::Returns true if the next token in this scanner's input can be interpreted as a float value using the #nextFloat method:::setRadix->result->floatPattern->hasNext->if->try->s->processFloatToken->Float->Float->parseFloat->valueOf->catch->finally->return
Scanner#nextFloat():::Scans the next token of the input as a float:::if->val->floatValue->useTypeCache->return->setRadix->clearCaches->try->return->Float->floatPattern->next->processFloatToken->parseFloat->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextDouble():::Returns true if the next token in this scanner's input can be interpreted as a double value using the #nextDouble method:::setRadix->result->floatPattern->hasNext->if->try->s->processFloatToken->Double->Double->parseDouble->valueOf->catch->finally->return
Scanner#nextDouble():::Scans the next token of the input as a double:::if->val->doubleValue->useTypeCache->return->setRadix->clearCaches->try->return->Double->floatPattern->next->processFloatToken->parseDouble->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextBigInteger():::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the #nextBigInteger method:::return->hasNextBigInteger
Scanner#hasNextBigInteger(int):::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the #nextBigInteger method:::setRadix->result->integerPattern->hasNext->if->try->s->matcher->group->processIntegerToken->new->BigInteger->catch->finally->return
Scanner#nextBigInteger():::Scans the next token of the input as a java.math.BigInteger BigInteger:::return->nextBigInteger
Scanner#nextBigInteger(int):::Scans the next token of the input as a java.math.BigInteger BigInteger:::if->val->useTypeCache->return->setRadix->clearCaches->try->s->integerPattern->next->if->matcher->group->processIntegerToken->return->new->BigInteger->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#hasNextBigDecimal():::Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the #nextBigDecimal method:::setRadix->result->decimalPattern->hasNext->if->try->s->processFloatToken->new->BigDecimal->catch->finally->return
Scanner#nextBigDecimal():::Scans the next token of the input as a java.math.BigDecimal BigDecimal:::if->val->useTypeCache->return->setRadix->clearCaches->try->s->decimalPattern->next->processFloatToken->return->new->BigDecimal->catch->matcher->start->throw->nfe->getMessage->new->InputMismatchException->finally
Scanner#reset():::Resets this scanner:::Locale->getDefault->useLocale->useRadix->clearCaches->return
Scanner#tokens():::Returns a stream of delimiter-separated tokens from this scanner:::ensureOpen->stream->StreamSupport->new->TokenSpliterator->stream->return->stream->this->close->onClose
Scanner#findAll(Pattern):::Returns a stream of match results from this scanner:::Objects->requireNonNull->ensureOpen->stream->StreamSupport->new->FindSpliterator->stream->return->stream->this->close->onClose
Scanner#findAll(String):::Returns a stream of match results that match the provided pattern string:::Objects->requireNonNull->ensureOpen->return->patternCache->forName->findAll
ServiceLoader.Provider#type():::Returns the provider type:::
ServiceLoader.Provider#get():::Returns an instance of the provider.:::
ServiceLoader#iterator():::Returns an iterator to lazily load and instantiate the available providers of this loader's service:::if->newLookupIterator->return->new->Iterator<S>
ServiceLoader#stream():::Returns a stream to lazily load available providers of this loader's service:::if->return->loadedProviders->stream->if->newLookupIterator->s->new->ProviderSpliterator<>->return->StreamSupport->stream
ServiceLoader#load(Class, ClassLoader, Module):::Creates a new service loader for the given service type, class loader, and caller.:::return->new->ServiceLoader<>
ServiceLoader#load(Class, ClassLoader):::Creates a new service loader for the given service:::return->Reflection->getCallerClass->new->ServiceLoader<>
ServiceLoader#load(Class):::Creates a new service loader for the given service type, using the current thread's java.lang.Thread#getContextClassLoader context class loader:::cl->Thread->currentThread->getContextClassLoader->return->Reflection->getCallerClass->new->ServiceLoader<>
ServiceLoader#loadInstalled(Class):::Creates a new service loader for the given service type, using the ClassLoader#getPlatformClassLoader() platform class loader:::cl->ClassLoader->getPlatformClassLoader->return->Reflection->getCallerClass->new->ServiceLoader<>
ServiceLoader#load(ModuleLayer, Class):::Creates a new service loader for the given service type to load service providers from modules in the given module layer and its ancestors:::return->Reflection->getCallerClass->new->ServiceLoader<>
ServiceLoader#findFirst():::Load the first available service provider of this loader's service:::iterator->iterator->if->iterator->hasNext->return->Optional->iterator->next->of->else->return->Optional->empty
ServiceLoader#reload():::Clear this loader's provider cache so that all providers will be reloaded:::instantiatedProviders->clear->loadedProviders->clear
ServiceLoader#toString():::Returns a string describing this service.:::return->service->getName
Set#size():::Returns the number of elements in this set (its cardinality):::
Set#isEmpty():::Returns true if this set contains no elements.:::
Set#contains(Object):::Returns true if this set contains the specified element:::
Set#iterator():::Returns an iterator over the elements in this set:::
Set#toArray():::Returns an array containing all of the elements in this set:::
Set#toArray(T[]):::Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array:::
Set#add(E):::Adds the specified element to this set if it is not already present (optional operation):::
Set#remove(Object):::Removes the specified element from this set if it is present (optional operation):::
Set#containsAll(Collection):::Returns true if this set contains all of the elements of the specified collection:::
Set#addAll(Collection):::Adds all of the elements in the specified collection to this set if they're not already present (optional operation):::
Set#retainAll(Collection):::Retains only the elements in this set that are contained in the specified collection (optional operation):::
Set#removeAll(Collection):::Removes from this set all of its elements that are contained in the specified collection (optional operation):::
Set#clear():::Removes all of the elements from this set (optional operation):::
Set#equals(Object):::Compares the specified object with this set for equality:::
Set#hashCode():::Returns the hash code value for this set:::
Set#spliterator():::Creates a Spliterator over the elements in this set:::return->Spliterators->spliterator
Set#of():::Returns an unmodifiable set containing zero elements:::return->ImmutableCollections->emptySet
Set#of(E):::Returns an unmodifiable set containing one element:::return->new->ImmutableCollections.Set12<>
Set#of(E, E):::Returns an unmodifiable set containing two elements:::return->new->ImmutableCollections.Set12<>
Set#of(E, E, E):::Returns an unmodifiable set containing three elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E):::Returns an unmodifiable set containing four elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E):::Returns an unmodifiable set containing five elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E):::Returns an unmodifiable set containing six elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E, E):::Returns an unmodifiable set containing seven elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing eight elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing nine elements:::return->new->ImmutableCollections.SetN<>
Set#of(E, E, E, E, E, E, E, E, E, E):::Returns an unmodifiable set containing ten elements:::return->new->ImmutableCollections.SetN<>
Set#of(E...):::Returns an unmodifiable set containing an arbitrary number of elements:::switch->return->ImmutableCollections->emptySet->return->new->ImmutableCollections.Set12<>->return->new->ImmutableCollections.Set12<>->return->new->ImmutableCollections.SetN<>
Set#copyOf(Collection):::Returns an unmodifiable Set containing the elements of the given Collection:::if->return->else->return->Set->new->HashSet<>->toArray->of
SimpleTimeZone#setStartYear(int):::Sets the daylight saving time starting year.:::invalidateCache
SimpleTimeZone#setStartRule(int, int, int, int):::Sets the daylight saving time start rule:::decodeStartRule->invalidateCache
SimpleTimeZone#setStartRule(int, int, int):::Sets the daylight saving time start rule to a fixed date within a month:::setStartRule
SimpleTimeZone#setStartRule(int, int, int, int, boolean):::Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.:::if->setStartRule->else->setStartRule
SimpleTimeZone#setEndRule(int, int, int, int):::Sets the daylight saving time end rule:::decodeEndRule->invalidateCache
SimpleTimeZone#setEndRule(int, int, int):::Sets the daylight saving time end rule to a fixed date within a month:::setEndRule
SimpleTimeZone#setEndRule(int, int, int, int, boolean):::Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.:::if->setEndRule->else->setEndRule
SimpleTimeZone#getOffset(long):::Returns the offset of this time zone from UTC at the given time:::return->getOffsets
SimpleTimeZone#getOffset(int, int, int, int, int, int):::Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time:::if->throw->new->IllegalArgumentException->y->if->if->else->if->CalendarUtils->mod->m->cal->cdate->cal->newCalendarDate->cdate->setDate->time->cal->getTime->if->CalendarSystem->forName->cal->newCalendarDate->cdate->setNormalizedDate->cal->getTime->if->cdate->getNormalizedYear->cdate->getMonth->cdate->getDayOfMonth->throw->new->IllegalArgumentException->if->return->return->getOffset
SimpleTimeZone#getRawOffset():::Gets the GMT offset for this time zone.:::return
SimpleTimeZone#setRawOffset(int):::Sets the base time zone offset to GMT:::
SimpleTimeZone#setDSTSavings(int):::Sets the amount of time in milliseconds that the clock is advanced during daylight saving time.:::if->throw->new->IllegalArgumentException
SimpleTimeZone#getDSTSavings():::Returns the amount of time in milliseconds that the clock is advanced during daylight saving time.:::return
SimpleTimeZone#useDaylightTime():::Queries if this time zone uses daylight saving time.:::return
SimpleTimeZone#observesDaylightTime():::Returns true if this SimpleTimeZone observes Daylight Saving Time:::return->useDaylightTime
SimpleTimeZone#inDaylightTime(Date):::Queries if the given date is in daylight saving time.:::return->date->getTime->getOffset
SimpleTimeZone#clone():::Returns a clone of this SimpleTimeZone instance.:::return->super->clone
SimpleTimeZone#hashCode():::Generates the hash code for the SimpleDateFormat object.:::return
SimpleTimeZone#equals(Object):::Compares the equality of two SimpleTimeZone objects.:::if->return->if->return->that->return->getID->that->getID->equals->hasSameRules
SimpleTimeZone#hasSameRules(TimeZone):::Returns true if this zone has the same rules and offset as another zone.:::if->return->if->return->that->return
SimpleTimeZone#toString():::Returns a string representation of this time zone.:::return->getClass->getName->getID
SortedMap#comparator():::Returns the comparator used to order the keys in this map, or null if this map uses the Comparable natural ordering of its keys.:::
SortedMap#subMap(K, K):::Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive:::
SortedMap#headMap(K):::Returns a view of the portion of this map whose keys are strictly less than toKey:::
SortedMap#tailMap(K):::Returns a view of the portion of this map whose keys are greater than or equal to fromKey:::
SortedMap#firstKey():::Returns the first (lowest) key currently in this map.:::
SortedMap#lastKey():::Returns the last (highest) key currently in this map.:::
SortedMap#keySet():::Returns a Set view of the keys contained in this map:::
SortedMap#values():::Returns a Collection view of the values contained in this map:::
SortedMap#entrySet():::Returns a Set view of the mappings contained in this map:::
SortedSet#comparator():::Returns the comparator used to order the elements in this set, or null if this set uses the Comparable natural ordering of its elements.:::
SortedSet#subSet(E, E):::Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive:::
SortedSet#headSet(E):::Returns a view of the portion of this set whose elements are strictly less than toElement:::
SortedSet#tailSet(E):::Returns a view of the portion of this set whose elements are greater than or equal to fromElement:::
SortedSet#first():::Returns the first (lowest) element currently in this set.:::
SortedSet#last():::Returns the last (highest) element currently in this set.:::
SortedSet#spliterator():::Creates a Spliterator over the elements in this sorted set:::return->new->Spliterators.IteratorSpliterator<E>
Spliterator#tryAdvance(Consumer):::If a remaining element exists, performs the given action on it, returning true; else returns false:::
Spliterator#forEachRemaining(Consumer):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception:::do->while->tryAdvance
Spliterator#trySplit():::If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator:::
Spliterator#estimateSize():::Returns an estimate of the number of elements that would be encountered by a #forEachRemaining traversal, or returns Long#MAX_VALUE if infinite, unknown, or too expensive to compute:::
Spliterator#getExactSizeIfKnown():::Convenience method that returns #estimateSize() if this Spliterator is #SIZED, else -1.:::return->characteristics->estimateSize
Spliterator#characteristics():::Returns a set of characteristics of this Spliterator and its elements:::
Spliterator#hasCharacteristics(int):::Returns true if this Spliterator's #characteristics contain all of the given characteristics.:::return->characteristics
Spliterator#getComparator():::If this Spliterator's source is #SORTED by a Comparator, returns that Comparator:::throw->new->IllegalStateException
Spliterator.OfPrimitive#tryAdvance(T_CONS):::If a remaining element exists, performs the given action on it, returning true; else returns false:::
Spliterator.OfPrimitive#forEachRemaining(T_CONS):::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception:::do->while->tryAdvance
Spliterators#emptySpliterator():::Creates an empty Spliterator  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED:::return
Spliterators#emptyIntSpliterator():::Creates an empty Spliterator.OfInt  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED:::return
Spliterators#emptyLongSpliterator():::Creates an empty Spliterator.OfLong  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED:::return
Spliterators#emptyDoubleSpliterator():::Creates an empty Spliterator.OfDouble  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED:::return
Spliterators#spliterator(Object[], int):::Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics:::return->Objects->requireNonNull->new->ArraySpliterator<>
Spliterators#spliterator(Object[], int, int, int):::Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics:::Objects->requireNonNull->checkFromToBounds->return->new->ArraySpliterator<>
Spliterators#spliterator(int[], int):::Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics:::return->Objects->requireNonNull->new->IntArraySpliterator
Spliterators#spliterator(int[], int, int, int):::Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics:::Objects->requireNonNull->checkFromToBounds->return->new->IntArraySpliterator
Spliterators#spliterator(long[], int):::Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics:::return->Objects->requireNonNull->new->LongArraySpliterator
Spliterators#spliterator(long[], int, int, int):::Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics:::Objects->requireNonNull->checkFromToBounds->return->new->LongArraySpliterator
Spliterators#spliterator(double[], int):::Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics:::return->Objects->requireNonNull->new->DoubleArraySpliterator
Spliterators#spliterator(double[], int, int, int):::Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics:::Objects->requireNonNull->checkFromToBounds->return->new->DoubleArraySpliterator
Spliterators#spliterator(Collection, int):::Creates a Spliterator using the given collection's java.util.Collection#iterator() as the source of elements, and reporting its java.util.Collection#size() as its initial size:::return->Objects->requireNonNull->new->IteratorSpliterator<>
Spliterators#spliterator(Iterator, long, int):::Creates a Spliterator using a given Iterator as the source of elements, and with a given initially reported size:::return->Objects->requireNonNull->new->IteratorSpliterator<>
Spliterators#spliteratorUnknownSize(Iterator, int):::Creates a Spliterator using a given Iterator as the source of elements, with no initial size estimate:::return->Objects->requireNonNull->new->IteratorSpliterator<>
Spliterators#spliterator(PrimitiveIterator.OfInt, long, int):::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, and with a given initially reported size:::return->Objects->requireNonNull->new->IntIteratorSpliterator
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfInt, int):::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, with no initial size estimate:::return->Objects->requireNonNull->new->IntIteratorSpliterator
Spliterators#spliterator(PrimitiveIterator.OfLong, long, int):::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, and with a given initially reported size:::return->Objects->requireNonNull->new->LongIteratorSpliterator
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfLong, int):::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, with no initial size estimate:::return->Objects->requireNonNull->new->LongIteratorSpliterator
Spliterators#spliterator(PrimitiveIterator.OfDouble, long, int):::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, and with a given initially reported size:::return->Objects->requireNonNull->new->DoubleIteratorSpliterator
Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfDouble, int):::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, with no initial size estimate:::return->Objects->requireNonNull->new->DoubleIteratorSpliterator
Spliterators#iterator(Spliterator):::Creates an Iterator from a Spliterator:::Objects->requireNonNull->return->new->Adapter
Spliterators#iterator(Spliterator.OfInt):::Creates an PrimitiveIterator.OfInt from a Spliterator.OfInt:::Objects->requireNonNull->return->new->Adapter
Spliterators#iterator(Spliterator.OfLong):::Creates an PrimitiveIterator.OfLong from a Spliterator.OfLong:::Objects->requireNonNull->return->new->Adapter
Spliterators#iterator(Spliterator.OfDouble):::Creates an PrimitiveIterator.OfDouble from a Spliterator.OfDouble:::Objects->requireNonNull->return->new->Adapter
Spliterators.AbstractSpliterator#trySplit():::  This implementation permits limited parallelism.:::holder->new->HoldingConsumer<>->s->if->tryAdvance->n->if->if->a->new->ObjectArr->j->do->while->tryAdvance->if->return->characteristics->new->ArraySpliterator<>->return
Spliterators.AbstractIntSpliterator#trySplit():::  This implementation permits limited parallelism.:::holder->new->HoldingIntConsumer->s->if->tryAdvance->n->if->if->a->new->intArr->j->do->while->tryAdvance->if->return->characteristics->new->IntArraySpliterator->return
Spliterators.AbstractLongSpliterator#trySplit():::  This implementation permits limited parallelism.:::holder->new->HoldingLongConsumer->s->if->tryAdvance->n->if->if->a->new->longArr->j->do->while->tryAdvance->if->return->characteristics->new->LongArraySpliterator->return
Spliterators.AbstractDoubleSpliterator#trySplit():::  This implementation permits limited parallelism.:::holder->new->HoldingDoubleConsumer->s->if->tryAdvance->n->if->if->a->new->doubleArr->j->do->while->tryAdvance->if->return->characteristics->new->DoubleArraySpliterator->return
SplittableRandom#internalNextLong(long, long):::The form of nextLong used by LongStream Spliterators:::r->nextSeed->mix64->if->n->m->if->else->if->for->u->nextSeed->mix64->else->while->nextSeed->mix64->return
SplittableRandom#internalNextInt(int, int):::The form of nextInt used by IntStream Spliterators:::r->nextSeed->mix32->if->n->m->if->else->if->for->u->nextSeed->mix32->else->while->nextSeed->mix32->return
SplittableRandom#internalNextDouble(double, double):::The form of nextDouble used by DoubleStream Spliterators.:::r->nextLong->if->if->Double->Double->doubleToLongBits->longBitsToDouble->return
SplittableRandom#split():::Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance:::return->nextLong->nextSeed->mixGamma->new->SplittableRandom
SplittableRandom#nextBytes(byte[]):::Fills a user-supplied byte array with generated pseudorandom bytes.:::i->len->for->words->if->for->rnd->nextLong
SplittableRandom#nextInt():::Returns a pseudorandom int value.:::return->nextSeed->mix32
SplittableRandom#nextInt(int):::Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->r->nextSeed->mix32->m->if->else->for->u->nextSeed->mix32->return
SplittableRandom#nextInt(int, int):::Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->return->internalNextInt
SplittableRandom#nextLong():::Returns a pseudorandom long value.:::return->nextSeed->mix64
SplittableRandom#nextLong(long):::Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->r->nextSeed->mix64->m->if->else->for->u->nextSeed->mix64->return
SplittableRandom#nextLong(long, long):::Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->return->internalNextLong
SplittableRandom#nextDouble():::Returns a pseudorandom double value between zero (inclusive) and one (exclusive).:::return->nextSeed->mix64
SplittableRandom#nextDouble(double):::Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).:::if->throw->new->IllegalArgumentException->result->nextSeed->mix64->return->Double->Double->doubleToLongBits->longBitsToDouble
SplittableRandom#nextDouble(double, double):::Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->return->internalNextDouble
SplittableRandom#nextBoolean():::Returns a pseudorandom boolean value.:::return->nextSeed->mix32
SplittableRandom#ints(long):::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it.:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
SplittableRandom#ints():::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it.:::return->StreamSupport->new->RandomIntsSpliterator->intStream
SplittableRandom#ints(long, int, int):::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
SplittableRandom#ints(int, int):::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomIntsSpliterator->intStream
SplittableRandom#longs(long):::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it.:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
SplittableRandom#longs():::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it.:::return->StreamSupport->new->RandomLongsSpliterator->longStream
SplittableRandom#longs(long, long, long):::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
SplittableRandom#longs(long, long):::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomLongsSpliterator->longStream
SplittableRandom#doubles(long):::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
SplittableRandom#doubles():::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).:::return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
SplittableRandom#doubles(long, double, double):::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
SplittableRandom#doubles(double, double):::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).:::if->throw->new->IllegalArgumentException->return->StreamSupport->new->RandomDoublesSpliterator->doubleStream
Stack#push(E):::Pushes an item onto the top of this stack:::addElement->return
Stack#pop():::Removes the object at the top of this stack and returns that object as the value of this function.:::obj->len->size->peek->removeElementAt->return
Stack#peek():::Looks at the object at the top of this stack without removing it from the stack.:::len->size->if->throw->new->EmptyStackException->return->elementAt
Stack#empty():::Tests if this stack is empty.:::return->size
Stack#search(Object):::Returns the 1-based position where an object is on this stack:::i->lastIndexOf->if->return->size->return
StringJoiner#setEmptyValue(CharSequence):::Sets the sequence of characters to be used when determining the string representation of this StringJoiner and no elements have been added yet, that is, when it is empty:::Objects->requireNonNull->toString->return
StringJoiner#toString():::Returns the current value, consisting of the prefix, the values added so far separated by the delimiter, and the suffix, unless no elements have been added in which case, the prefix + suffix or the emptyValue characters are returned.:::elts->if->return->size->addLen->prefix->length->suffix->length->if->compactElts->return->delimiter->chars->new->charArr->k->getChars->if->getChars->for->i->getChars->return->new->String
StringJoiner#add(CharSequence):::Adds a copy of the given CharSequence value as the next element of the StringJoiner value:::elt->String->valueOf->if->new->StringArr->else->if->Arrays->copyOf->delimiter->length->elt->length->return
StringJoiner#merge(StringJoiner):::Adds the contents of the given StringJoiner without prefix and suffix as the next element if it is non-empty:::Objects->requireNonNull->if->return->other->compactElts->return->add
StringJoiner#length():::Returns the length of the String representation of this StringJoiner:::return->emptyValue->length->prefix->length->suffix->length
StringTokenizer#hasMoreTokens():::Tests if there are more tokens available from this tokenizer's string:::skipDelimiters->return
StringTokenizer#nextToken():::Returns the next token from this string tokenizer.:::skipDelimiters->if->throw->new->NoSuchElementException->start->scanToken->return->str->substring
StringTokenizer#nextToken(String):::Returns the next token in this string tokenizer's string:::setMaxDelimCodePoint->return->nextToken
StringTokenizer#hasMoreElements():::Returns the same value as the hasMoreTokens method:::return->hasMoreTokens
StringTokenizer#nextElement():::Returns the same value as the nextToken method, except that its declared return value is Object rather than String:::return->nextToken
StringTokenizer#countTokens():::Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception:::count->currpos->while->skipDelimiters->if->break->scanToken->return
Timer#schedule(TimerTask, long):::Schedules the specified task for execution after the specified delay.:::if->throw->new->IllegalArgumentException->System->currentTimeMillis->sched
Timer#schedule(TimerTask, Date):::Schedules the specified task for execution at the specified time:::time->getTime->sched
Timer#schedule(TimerTask, long, long):::Schedules the specified task for repeated fixed-delay execution, beginning after the specified delay:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->System->currentTimeMillis->sched
Timer#schedule(TimerTask, Date, long):::Schedules the specified task for repeated fixed-delay execution, beginning at the specified time:::if->throw->new->IllegalArgumentException->firstTime->getTime->sched
Timer#scheduleAtFixedRate(TimerTask, long, long):::Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay:::if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->System->currentTimeMillis->sched
Timer#scheduleAtFixedRate(TimerTask, Date, long):::Schedules the specified task for repeated fixed-rate execution, beginning at the specified time:::if->throw->new->IllegalArgumentException->firstTime->getTime->sched
Timer#cancel():::Terminates this timer, discarding any currently scheduled tasks:::synchronized->queue->clear->queue->notify
Timer#purge():::Removes all cancelled tasks from this timer's task queue:::result->synchronized->for->i->queue->size->if->queue->heapify->return
TaskQueue#size():::Returns the number of tasks currently on the queue.:::return
TaskQueue#add(TimerTask):::Adds a new task to the priority queue.:::if->Arrays->copyOf->fixUp
TaskQueue#getMin():::Return the "head task" of the priority queue:::return
TaskQueue#get(int):::Return the ith task in the priority queue, where i ranges from 1 (the head task, which is returned by getMin) to the number of tasks on the queue, inclusive.:::return
TaskQueue#removeMin():::Remove the head task from the priority queue.:::fixDown
TaskQueue#quickRemove(int):::Removes the ith element from queue without regard for maintaining the heap invariant:::
TaskQueue#rescheduleMin(long):::Sets the nextExecutionTime associated with the head task to the specified value, and adjusts priority queue accordingly.:::fixDown
TaskQueue#isEmpty():::Returns true if the priority queue contains no elements.:::return
TaskQueue#clear():::Removes all elements from the priority queue.:::for->i
TaskQueue#heapify():::Establishes the heap invariant (described above) in the entire tree, assuming nothing about the order of the elements prior to the call.:::for->i
TimerTask#run():::The action to be performed by this timer task.:::
TimerTask#cancel():::Cancels this timer task:::synchronized->result->return
TimerTask#scheduledExecutionTime():::Returns the scheduled execution time of the most recent actual execution of this task:::synchronized->return
TimeZone#getOffset(int, int, int, int, int, int):::Gets the time zone offset, for current date, modified in case of daylight savings:::
TimeZone#getOffset(long):::Returns the offset of this time zone from UTC at the specified date:::if->new->Date->inDaylightTime->return->getRawOffset->getDSTSavings->return->getRawOffset
TimeZone#getOffsets(long, int[]):::Gets the raw GMT offset and the amount of daylight saving of this time zone at the given time.:::rawoffset->getRawOffset->dstoffset->if->new->Date->inDaylightTime->getDSTSavings->if->return
TimeZone#setRawOffset(int):::Sets the base time zone offset to GMT:::
TimeZone#getRawOffset():::Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone:::
TimeZone#getID():::Gets the ID of this time zone.:::return
TimeZone#setID(String):::Sets the time zone ID:::if->throw->new->NullPointerException
TimeZone#getDisplayName():::Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale:::return->Locale->getDefault->getDisplayName
TimeZone#getDisplayName(Locale):::Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale:::return->getDisplayName
TimeZone#getDisplayName(boolean, int):::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale:::return->Locale->getDefault->getDisplayName
TimeZone#getDisplayName(boolean, int, Locale):::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the specified locale:::if->throw->new->IllegalArgumentException->id->getID->name->TimeZoneNameUtility->retrieveDisplayName->if->return->if->id->startsWith->id->length->sign->id->charAt->if->return->offset->getRawOffset->if->getDSTSavings->return->ZoneInfoFile->toCustomID
TimeZone#getDSTSavings():::Returns the amount of time to be added to local standard time to get local wall clock time:::if->useDaylightTime->return->return
TimeZone#useDaylightTime():::Queries if this TimeZone uses Daylight Saving Time:::
TimeZone#observesDaylightTime():::Returns true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time:::return->useDaylightTime->new->Date->inDaylightTime
TimeZone#inDaylightTime(Date):::Queries if the given date is in Daylight Saving Time in this time zone.:::
TimeZone#getTimeZone(String):::Gets the TimeZone for the given ID.:::return->getTimeZone
TimeZone#getTimeZone(ZoneId):::Gets the TimeZone for the given zoneId.:::tzid->zoneId->getId->c->tzid->charAt->if->else->if->tzid->length->return->getTimeZone
TimeZone#toZoneId():::Converts this TimeZone object to a ZoneId.:::zId->if->toZoneId0->return
TimeZone#getAvailableIDs(int):::Gets the available IDs according to the given time zone offset in milliseconds.:::return->ZoneInfo->getAvailableIDs
TimeZone#getAvailableIDs():::Gets all the available IDs supported.:::return->ZoneInfo->getAvailableIDs
TimeZone#getDefault():::Gets the default TimeZone of the Java virtual machine:::return->getDefaultRef->clone
TimeZone#getDefaultRef():::Returns the reference to the default TimeZone object:::defaultZone->if->setDefaultZone->return
TimeZone#setDefault(TimeZone):::Sets the TimeZone that is returned by the getDefault method:::sm->System->getSecurityManager->if->sm->new->PropertyPermission->checkPermission->zone->clone
TimeZone#hasSameRules(TimeZone):::Returns true if this zone has the same rule and offset as another zone:::return->getRawOffset->other->getRawOffset->useDaylightTime->other->useDaylightTime
TimeZone#clone():::Creates a copy of this TimeZone.:::try->return->super->clone->catch->throw->new->InternalError->finally
TimSort#sort(T[], int, int, Comparator, T[], int, int):::Sorts the given range, using the given workspace array slice for temp storage when possible:::nRemaining->if->return->if->initRunLen->countRunAndMakeAscending->binarySort->return->ts->new->TimSort<>->minRun->minRunLength->do->runLen->countRunAndMakeAscending->if->force->binarySort->ts->pushRun->ts->mergeCollapse->while->ts->mergeForceCollapse
TreeMap#size():::Returns the number of key-value mappings in this map.:::return
TreeMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.:::return->getEntry
TreeMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value:::for->e->getFirstEntry->successor->return
TreeMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::p->getEntry->return
TreeMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::mapSize->map->size->if->c->comparator->if->c->equals->try->map->entrySet->iterator->buildFromSorted->catch->finally->return->super->putAll
TreeMap#getEntry(Object):::Returns this map's entry for the given key, or null if the map does not contain an entry for the key.:::if->return->getEntryUsingComparator->if->throw->new->NullPointerException->k->p->while->cmp->k->compareTo->if->else->if->else->return->return
TreeMap#getEntryUsingComparator(Object):::Version of getEntry using comparator:::k->cpr->if->p->while->cmp->cpr->compare->if->else->if->else->return->return
TreeMap#getCeilingEntry(K):::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists (i.e., the greatest key in the Tree is less than the specified key), returns null.:::p->while->cmp->compare->if->if->else->return->else->if->if->else->parent->ch->while->return->else->return->return
TreeMap#getFloorEntry(K):::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the greatest key less than the specified key; if no such entry exists, returns null.:::p->while->cmp->compare->if->if->else->return->else->if->if->else->parent->ch->while->return->else->return->return
TreeMap#getHigherEntry(K):::Gets the entry for the least key greater than the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists returns null.:::p->while->cmp->compare->if->if->else->return->else->if->else->parent->ch->while->return->return
TreeMap#getLowerEntry(K):::Returns the entry for the greatest key less than the specified key; if no such entry exists (i.e., the least key in the Tree is greater than the specified key), returns null.:::p->while->cmp->compare->if->if->else->return->else->if->else->parent->ch->while->return->return
TreeMap#put(K, V):::Associates the specified value with the specified key in this map:::t->if->compare->new->Entry<>->return->cmp->parent->cpr->if->do->cpr->compare->if->else->if->else->return->t->setValue->while->else->if->throw->new->NullPointerException->k->do->k->compareTo->if->else->if->else->return->t->setValue->while->e->new->Entry<>->if->else->fixAfterInsertion->return
TreeMap#remove(Object):::Removes the mapping for this key from this TreeMap if present.:::p->getEntry->if->return->oldValue->deleteEntry->return
TreeMap#clear():::Removes all of the mappings from this map:::
TreeMap#clone():::Returns a shallow copy of this TreeMap instance:::clone->try->super->clone->catch->throw->new->InternalError->finally->try->clone->entrySet->iterator->buildFromSorted->catch->finally->return
TreeMap#keySet():::Returns a Set view of the keys contained in this map:::return->navigableKeySet
TreeMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
TreeMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->return->new->EntrySet
TreeMap#compare(Object, Object):::Compares two keys using the correct comparison method for this TreeMap.:::return->compareTo->comparator->compare
TreeMap#valEquals(Object, Object):::Test two values for equality:::return->o1->equals
TreeMap#exportEntry(TreeMap.Entry):::Return SimpleImmutableEntry for entry, or null if null:::return->new->AbstractMap.SimpleImmutableEntry<>
TreeMap#keyOrNull(TreeMap.Entry):::Return key for entry, or null if null:::return
TreeMap#key(Entry):::Returns the key corresponding to the specified Entry.:::if->throw->new->NoSuchElementException->return
TreeMap.NavigableSubMap#absHighFence():::Returns the absolute high fence for ascending traversal:::return->m->getHigherEntry->m->getCeilingEntry
TreeMap.NavigableSubMap#absLowFence():::Return the absolute low fence for descending traversal:::return->m->getLowerEntry->m->getFloorEntry
TreeMap.NavigableSubMap#keyIterator():::Returns ascending iterator from the perspective of this submap:::
TreeMap.NavigableSubMap#descendingKeyIterator():::Returns descending iterator from the perspective of this submap:::
TreeMap.Entry#getKey():::Returns the key.:::return
TreeMap.Entry#getValue():::Returns the value associated with the key.:::return
TreeMap.Entry#setValue(V):::Replaces the value currently associated with the key with the given value.:::oldValue->return
TreeMap#getFirstEntry():::Returns the first Entry in the TreeMap (according to the TreeMap's key-sort function):::p->if->while->return
TreeMap#getLastEntry():::Returns the last Entry in the TreeMap (according to the TreeMap's key-sort function):::p->if->while->return
TreeMap#successor(Entry):::Returns the successor of the specified Entry, or null if no such.:::if->return->else->if->p->while->return->else->p->ch->while->return
TreeMap#predecessor(Entry):::Returns the predecessor of the specified Entry, or null if no such.:::if->return->else->if->p->while->return->else->p->ch->while->return
TreeMap#readTreeSet(int, java.io.ObjectInputStream, V):::Intended to be called only from TreeSet.readObject:::buildFromSorted
TreeMap#addAllForTreeSet(SortedSet, V):::Intended to be called only from TreeSet.addAll:::try->set->size->set->iterator->buildFromSorted->catch->finally
TreeMap#keySpliteratorFor(NavigableMap):::Currently, we support Spliterator-based versions only for the full map, in either plain of descending form, otherwise relying on defaults because size estimation for submaps would dominate costs:::if->t->return->t->keySpliterator->if->dm->tm->if->t->return->t->descendingKeySpliterator->sm->return->sm->keySpliterator
TreeSet#iterator():::Returns an iterator over the elements in this set in ascending order.:::return->m->navigableKeySet->iterator
TreeSet#descendingIterator():::Returns an iterator over the elements in this set in descending order.:::return->m->descendingKeySet->iterator
TreeSet#size():::Returns the number of elements in this set (its cardinality).:::return->m->size
TreeSet#isEmpty():::Returns true if this set contains no elements.:::return->m->isEmpty
TreeSet#contains(Object):::Returns true if this set contains the specified element:::return->m->containsKey
TreeSet#add(E):::Adds the specified element to this set if it is not already present:::return->m->put
TreeSet#remove(Object):::Removes the specified element from this set if it is present:::return->m->remove
TreeSet#clear():::Removes all of the elements from this set:::m->clear
TreeSet#addAll(Collection):::Adds all of the elements in the specified collection to this set.:::if->m->size->c->size->set->map->cc->set->comparator->mc->map->comparator->if->cc->equals->map->addAllForTreeSet->return->return->super->addAll
TreeSet#clone():::Returns a shallow copy of this TreeSet instance:::clone->try->super->clone->catch->throw->new->InternalError->finally->new->TreeMap<>->return
TreeSet#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this set:::return->TreeMap->keySpliteratorFor
Tripwire#trip(Class, String):::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message:::PlatformLogger->trippingClass->getName->getLogger->trippingClass->getName->warning
UnknownFormatConversionException#getConversion():::Returns the unknown conversion.:::return
UnknownFormatFlagsException#getFlags():::Returns the set of flags which contains an unknown flag.:::return
UUID#randomUUID():::Static factory to retrieve a type 4 (pseudo randomly generated) UUID:::ng->randomBytes->new->byteArr->ng->nextBytes->return->new->UUID
UUID#nameUUIDFromBytes(byte[]):::Static factory to retrieve a type 3 (name based) UUID based on the specified byte array.:::md->try->MessageDigest->getInstance->catch->throw->new->InternalError->finally->md5Bytes->md->digest->return->new->UUID
UUID#fromString(String):::Creates a UUID from the string standard representation as described in the #toString method.:::len->name->length->if->throw->new->IllegalArgumentException->dash1->name->indexOf->dash2->name->indexOf->dash3->name->indexOf->dash4->name->indexOf->dash5->name->indexOf->if->throw->new->IllegalArgumentException->mostSigBits->Long->parseLong->Long->parseLong->Long->parseLong->leastSigBits->Long->parseLong->Long->parseLong->return->new->UUID
UUID#getLeastSignificantBits():::Returns the least significant 64 bits of this UUID's 128 bit value.:::return
UUID#getMostSignificantBits():::Returns the most significant 64 bits of this UUID's 128 bit value.:::return
UUID#version():::The version number associated with this UUID:::return
UUID#variant():::The variant number associated with this UUID:::return
UUID#timestamp():::The timestamp value associated with this UUID:::if->version->throw->new->UnsupportedOperationException->return
UUID#clockSequence():::The clock sequence value associated with this UUID:::if->version->throw->new->UnsupportedOperationException->return
UUID#node():::The node value associated with this UUID:::if->version->throw->new->UnsupportedOperationException->return
UUID#toString():::Returns a String object representing this UUID:::return->jla->fastUUID
UUID#hashCode():::Returns a hash code for this UUID.:::hilo->return
UUID#equals(Object):::Compares this object to the specified object:::if->obj->getClass->return->id->return
UUID#compareTo(UUID):::Compares this UUID with the specified UUID:::return
Vector#copyInto(Object[]):::Copies the components of this vector into the specified array:::System->arraycopy
Vector#trimToSize():::Trims the capacity of this vector to be the vector's current size:::oldCapacity->if->Arrays->copyOf
Vector#ensureCapacity(int):::Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument:::if->if->grow
Vector#setSize(int):::Sets the size of this vector:::if->grow->es->for->to->i
Vector#capacity():::Returns the current capacity of this vector.:::return
Vector#size():::Returns the number of components in this vector.:::return
Vector#isEmpty():::Tests if this vector has no components.:::return
Vector#elements():::Returns an enumeration of the components of this vector:::return->new->Enumeration<E>
Vector#contains(Object):::Returns true if this vector contains the specified element:::return->indexOf
Vector#indexOf(Object):::Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element:::return->indexOf
Vector#indexOf(Object, int):::Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found:::if->for->i->else->for->i->return
Vector#lastIndexOf(Object):::Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element:::return->lastIndexOf
Vector#lastIndexOf(Object, int):::Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found:::if->throw->new->IndexOutOfBoundsException->if->for->i->else->for->i->return
Vector#elementAt(int):::Returns the component at the specified index:::if->throw->new->ArrayIndexOutOfBoundsException->return->elementData
Vector#firstElement():::Returns the first component (the item at index 0) of this vector.:::if->throw->new->NoSuchElementException->return->elementData
Vector#lastElement():::Returns the last component of the vector.:::if->throw->new->NoSuchElementException->return->elementData
Vector#setElementAt(E, int):::Sets the component at the specified index of this vector to be the specified object:::if->throw->new->ArrayIndexOutOfBoundsException
Vector#removeElementAt(int):::Deletes the component at the specified index:::if->throw->new->ArrayIndexOutOfBoundsException->else->if->throw->new->ArrayIndexOutOfBoundsException->j->if->System->arraycopy
Vector#insertElementAt(E, int):::Inserts the specified object as a component in this vector at the specified index:::if->throw->new->ArrayIndexOutOfBoundsException->s->elementData->if->grow->System->arraycopy
Vector#addElement(E):::Adds the specified component to the end of this vector, increasing its size by one:::add
Vector#removeElement(Object):::Removes the first (lowest-indexed) occurrence of the argument from this vector:::i->indexOf->if->removeElementAt->return->return
Vector#removeAllElements():::Removes all components from this vector and sets its size to zero:::es->for->to->i
Vector#clone():::Returns a clone of this vector:::try->v->super->clone->Arrays->copyOf->return->catch->throw->new->InternalError->finally
Vector#toArray():::Returns an array containing all of the elements in this Vector in the correct order.:::return->Arrays->copyOf
Vector#toArray(T[]):::Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array:::if->return->Arrays->a->getClass->copyOf->System->arraycopy->if->return
Vector#get(int):::Returns the element at the specified position in this Vector.:::if->throw->new->ArrayIndexOutOfBoundsException->return->elementData
Vector#set(int, E):::Replaces the element at the specified position in this Vector with the specified element.:::if->throw->new->ArrayIndexOutOfBoundsException->oldValue->elementData->return
Vector#add(E):::Appends the specified element to the end of this Vector.:::add->return
Vector#remove(Object):::Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged:::return->removeElement
Vector#add(int, E):::Inserts the specified element at the specified position in this Vector:::insertElementAt
Vector#remove(int):::Removes the element at the specified position in this Vector:::if->throw->new->ArrayIndexOutOfBoundsException->oldValue->elementData->numMoved->if->System->arraycopy->return
Vector#clear():::Removes all of the elements from this Vector:::removeAllElements
Vector#containsAll(Collection):::Returns true if this Vector contains all of the elements in the specified Collection.:::return->super->containsAll
Vector#addAll(Collection):::Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator:::a->c->toArray->numNew->if->return->synchronized->elementData->s->if->grow->System->arraycopy->return
Vector#removeAll(Collection):::Removes from this Vector all of its elements that are contained in the specified Collection.:::Objects->requireNonNull->return->c->contains->bulkRemove
Vector#retainAll(Collection):::Retains only the elements in this Vector that are contained in the specified Collection:::Objects->requireNonNull->return->c->contains->bulkRemove
Vector#addAll(int, Collection):::Inserts all of the elements in the specified Collection into this Vector at the specified position:::if->throw->new->ArrayIndexOutOfBoundsException->a->c->toArray->numNew->if->return->elementData->s->if->grow->numMoved->if->System->arraycopy->System->arraycopy->return
Vector#equals(Object):::Compares the specified Object with this Vector for equality:::return->super->equals
Vector#hashCode():::Returns the hash code value for this Vector.:::return->super->hashCode
Vector#toString():::Returns a string representation of this Vector, containing the String representation of each element.:::return->super->toString
Vector#subList(int, int):::Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive:::return->Collections->super->subList->synchronizedList
Vector#removeRange(int, int):::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive:::shiftTailOverGap
Vector#listIterator(int):::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list:::if->throw->new->IndexOutOfBoundsException->return->new->ListItr
Vector#listIterator():::Returns a list iterator over the elements in this list (in proper sequence):::return->new->ListItr
Vector#iterator():::Returns an iterator over the elements in this list in proper sequence:::return->new->Itr
Vector#spliterator():::Creates a late-binding and fail-fast Spliterator over the elements in this list:::return->new->VectorSpliterator
WeakHashMap#unmaskNull(Object):::Returns internal representation of null key back to caller as null.:::return
WeakHashMap#hash(Object):::Retrieve object hash code and applies a supplemental hash function to the result hash, which defends against poor quality hash functions:::h->k->hashCode->return
WeakHashMap#size():::Returns the number of key-value mappings in this map:::if->return->expungeStaleEntries->return
WeakHashMap#isEmpty():::Returns true if this map contains no key-value mappings:::return->size
WeakHashMap#get(Object):::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key:::k->maskNull->h->hash->tab->getTable->index->indexFor->e->while->if->e->get->eq->return->return
WeakHashMap#containsKey(Object):::Returns true if this map contains a mapping for the specified key.:::return->getEntry
WeakHashMap#getEntry(Object):::Returns the entry associated with the specified key in this map:::k->maskNull->h->hash->tab->getTable->index->indexFor->e->while->e->get->eq->return
WeakHashMap#put(K, V):::Associates the specified value with the specified key in this map:::k->maskNull->h->hash->tab->getTable->i->indexFor->for->e->e->new->Entry<>->if->resize->return
WeakHashMap#resize(int):::Rehashes the contents of this map into a new array with a larger capacity:::oldTable->getTable->oldCapacity->if->return->newTable->newTable->transfer->if->else->expungeStaleEntries->transfer
WeakHashMap#putAll(Map):::Copies all of the mappings from the specified map to this map:::numKeysToBeAdded->m->size->if->return->if->targetCapacity->if->newCapacity->while->if->resize->foreach->m->entrySet->e->getKey->e->getValue->put
WeakHashMap#remove(Object):::Removes the mapping for a key from this weak hash map if it is present:::k->maskNull->h->hash->tab->getTable->i->indexFor->prev->e->while->next->if->e->get->eq->if->else->return->return
WeakHashMap#removeMapping(Object):::Special version of remove needed by Entry set:::if->return->tab->getTable->entry->k->entry->getKey->maskNull->h->hash->i->indexFor->prev->e->while->next->if->e->equals->if->else->return->return
WeakHashMap#clear():::Removes all of the mappings from this map:::while->queue->poll->Arrays->fill->while->queue->poll
WeakHashMap#containsValue(Object):::Returns true if this map maps one or more keys to the specified value.:::if->return->containsNullValue->tab->getTable->for->i->return
WeakHashMap#keySet():::Returns a Set view of the keys contained in this map:::ks->if->new->KeySet->return
WeakHashMap#values():::Returns a Collection view of the values contained in this map:::vs->if->new->Values->return
WeakHashMap#entrySet():::Returns a Set view of the mappings contained in this map:::es->return->new->EntrySet

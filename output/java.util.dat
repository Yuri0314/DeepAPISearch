java.util.AbstractCollection#iterator()->Iterator:::Returns an iterator over the elements contained in this collection.
java.util.AbstractCollection#size()->int::: abstract collection size
java.util.AbstractCollection#isEmpty()->boolean::: abstract collection is empty
java.util.AbstractCollection#contains(Object)->boolean::: abstract collection contains
java.util.AbstractCollection#toArray()->Object[]::: abstract collection to array
java.util.AbstractCollection#toArray(T[])->T[]::: abstract collection to array
java.util.AbstractCollection#add(E)->boolean::: abstract collection add
java.util.AbstractCollection#remove(Object)->boolean::: abstract collection remove
java.util.AbstractCollection#containsAll(Collection)->boolean::: abstract collection contains all
java.util.AbstractCollection#addAll(Collection)->boolean::: abstract collection add all
java.util.AbstractCollection#removeAll(Collection)->boolean::: abstract collection remove all
java.util.AbstractCollection#retainAll(Collection)->boolean::: abstract collection retain all
java.util.AbstractCollection#clear()->void::: abstract collection clear
java.util.AbstractCollection#toString()->String:::Returns a string representation of this collection
java.util.AbstractList#add(E)->boolean:::Appends the specified element to the end of this list (optional operation)
java.util.AbstractList#get(int)->E::: abstract list get
java.util.AbstractList#set(int, E)->E::: abstract list set
java.util.AbstractList#add(int, E)->void::: abstract list add
java.util.AbstractList#remove(int)->E::: abstract list remove
java.util.AbstractList#indexOf(Object)->int::: abstract list index of
java.util.AbstractList#lastIndexOf(Object)->int::: abstract list last index of
java.util.AbstractList#clear()->void:::Removes all of the elements from this list (optional operation)
java.util.AbstractList#addAll(int, Collection)->boolean::: abstract list add all
java.util.AbstractList#iterator()->Iterator:::Returns an iterator over the elements in this list in proper sequence.
java.util.AbstractList#listIterator()->ListIterator::: abstract list list iterator
java.util.AbstractList#listIterator(int)->ListIterator::: abstract list list iterator
java.util.AbstractList#subList(int, int)->List::: abstract list sub list
java.util.AbstractList#subListRangeCheck(int, int, int)->void::: abstract list sub list range check
java.util.AbstractList#equals(Object)->boolean:::Compares the specified object with this list for equality
java.util.AbstractList#hashCode()->int:::Returns the hash code value for this list.
java.util.AbstractList#removeRange(int, int)->void:::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
java.util.AbstractList.RandomAccessSpliterator#trySplit()->Spliterator::: random access spliterator try split
java.util.AbstractList.RandomAccessSpliterator#tryAdvance(Consumer)->boolean::: random access spliterator try advance
java.util.AbstractList.RandomAccessSpliterator#forEachRemaining(Consumer)->void::: random access spliterator for each remaining
java.util.AbstractList.RandomAccessSpliterator#estimateSize()->long::: random access spliterator estimate size
java.util.AbstractList.RandomAccessSpliterator#characteristics()->int::: random access spliterator characteristics
java.util.AbstractList.RandomAccessSpliterator#checkAbstractListModCount(AbstractList, int)->void::: random access spliterator check abstract list mod count
java.util.AbstractMap#size()->int::: abstract map size
java.util.AbstractMap#isEmpty()->boolean::: abstract map is empty
java.util.AbstractMap#containsValue(Object)->boolean::: abstract map contains value
java.util.AbstractMap#containsKey(Object)->boolean::: abstract map contains key
java.util.AbstractMap#get(Object)->V::: abstract map get
java.util.AbstractMap#put(K, V)->V::: abstract map put
java.util.AbstractMap#remove(Object)->V::: abstract map remove
java.util.AbstractMap#putAll(Map)->void::: abstract map put all
java.util.AbstractMap#clear()->void::: abstract map clear
java.util.AbstractMap#keySet()->Set::: abstract map key set
java.util.AbstractMap#values()->Collection::: abstract map values
java.util.AbstractMap#entrySet()->Set>::: abstract map entry set
java.util.AbstractMap#equals(Object)->boolean:::Compares the specified object with this map for equality
java.util.AbstractMap#hashCode()->int:::Returns the hash code value for this map
java.util.AbstractMap#toString()->String:::Returns a string representation of this map
java.util.AbstractMap#clone()->Object:::Returns a shallow copy of this AbstractMap instance: the keys and values themselves are not cloned.
java.util.AbstractMap.SimpleEntry#getKey()->K:::Returns the key corresponding to this entry.
java.util.AbstractMap.SimpleEntry#getValue()->V:::Returns the value corresponding to this entry.
java.util.AbstractMap.SimpleEntry#setValue(V)->V:::Replaces the value corresponding to this entry with the specified value.
java.util.AbstractMap.SimpleEntry#equals(Object)->boolean:::Compares the specified object with this entry for equality
java.util.AbstractMap.SimpleEntry#hashCode()->int:::Returns the hash code value for this map entry
java.util.AbstractMap.SimpleEntry#toString()->String:::Returns a String representation of this map entry
java.util.AbstractMap.SimpleImmutableEntry#getKey()->K:::Returns the key corresponding to this entry.
java.util.AbstractMap.SimpleImmutableEntry#getValue()->V:::Returns the value corresponding to this entry.
java.util.AbstractMap.SimpleImmutableEntry#setValue(V)->V:::Replaces the value corresponding to this entry with the specified value (optional operation)
java.util.AbstractMap.SimpleImmutableEntry#equals(Object)->boolean:::Compares the specified object with this entry for equality
java.util.AbstractMap.SimpleImmutableEntry#hashCode()->int:::Returns the hash code value for this map entry
java.util.AbstractMap.SimpleImmutableEntry#toString()->String:::Returns a String representation of this map entry
java.util.AbstractQueue#add(E)->boolean:::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
java.util.AbstractQueue#remove()->E:::Retrieves and removes the head of this queue
java.util.AbstractQueue#element()->E:::Retrieves, but does not remove, the head of this queue
java.util.AbstractQueue#clear()->void:::Removes all of the elements from this queue
java.util.AbstractQueue#addAll(Collection)->boolean:::Adds all of the elements in the specified collection to this queue
java.util.AbstractSequentialList#get(int)->E:::Returns the element at the specified position in this list
java.util.AbstractSequentialList#set(int, E)->E:::Replaces the element at the specified position in this list with the specified element (optional operation)
java.util.AbstractSequentialList#add(int, E)->void:::Inserts the specified element at the specified position in this list (optional operation)
java.util.AbstractSequentialList#remove(int)->E:::Removes the element at the specified position in this list (optional operation)
java.util.AbstractSequentialList#addAll(int, Collection)->boolean:::Inserts all of the elements in the specified collection into this list at the specified position (optional operation)
java.util.AbstractSequentialList#iterator()->Iterator:::Returns an iterator over the elements in this list (in proper sequence).  This implementation merely returns a list iterator over the list.
java.util.AbstractSequentialList#listIterator(int)->ListIterator:::Returns a list iterator over the elements in this list (in proper sequence).
java.util.AbstractSet#equals(Object)->boolean:::Compares the specified object with this set for equality
java.util.AbstractSet#hashCode()->int:::Returns the hash code value for this set
java.util.AbstractSet#removeAll(Collection)->boolean:::Removes from this set all of its elements that are contained in the specified collection (optional operation)
java.util.ArrayDeque#inc(int, int)->int:::Circularly increments i, mod modulus
java.util.ArrayDeque#dec(int, int)->int:::Circularly decrements i, mod modulus
java.util.ArrayDeque#inc(int, int, int)->int:::Circularly adds the given distance to index i, mod modulus
java.util.ArrayDeque#sub(int, int, int)->int:::Subtracts j from i, mod modulus
java.util.ArrayDeque#elementAt(Object[], int)->E:::Returns element at array index i
java.util.ArrayDeque#nonNullElementAt(Object[], int)->E:::A version of elementAt that checks for null elements
java.util.ArrayDeque#addFirst(E)->void:::Inserts the specified element at the front of this deque.
java.util.ArrayDeque#addLast(E)->void:::Inserts the specified element at the end of this deque
java.util.ArrayDeque#addAll(Collection)->boolean:::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator.
java.util.ArrayDeque#offerFirst(E)->boolean:::Inserts the specified element at the front of this deque.
java.util.ArrayDeque#offerLast(E)->boolean:::Inserts the specified element at the end of this deque.
java.util.ArrayDeque#removeFirst()->E::: array deque remove first
java.util.ArrayDeque#removeLast()->E::: array deque remove last
java.util.ArrayDeque#pollFirst()->E::: array deque poll first
java.util.ArrayDeque#pollLast()->E::: array deque poll last
java.util.ArrayDeque#getFirst()->E::: array deque get first
java.util.ArrayDeque#getLast()->E::: array deque get last
java.util.ArrayDeque#peekFirst()->E::: array deque peek first
java.util.ArrayDeque#peekLast()->E::: array deque peek last
java.util.ArrayDeque#removeFirstOccurrence(Object)->boolean:::Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail)
java.util.ArrayDeque#removeLastOccurrence(Object)->boolean:::Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail)
java.util.ArrayDeque#add(E)->boolean:::Inserts the specified element at the end of this deque
java.util.ArrayDeque#offer(E)->boolean:::Inserts the specified element at the end of this deque
java.util.ArrayDeque#remove()->E:::Retrieves and removes the head of the queue represented by this deque
java.util.ArrayDeque#poll()->E:::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
java.util.ArrayDeque#element()->E:::Retrieves, but does not remove, the head of the queue represented by this deque
java.util.ArrayDeque#peek()->E:::Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty
java.util.ArrayDeque#push(E)->void:::Pushes an element onto the stack represented by this deque
java.util.ArrayDeque#pop()->E:::Pops an element from the stack represented by this deque
java.util.ArrayDeque#delete(int)->boolean:::Removes the element at the specified position in the elements array
java.util.ArrayDeque#size()->int:::Returns the number of elements in this deque.
java.util.ArrayDeque#isEmpty()->boolean:::Returns true if this deque contains no elements.
java.util.ArrayDeque#iterator()->Iterator:::Returns an iterator over the elements in this deque
java.util.ArrayDeque#descendingIterator()->Iterator::: array deque descending iterator
java.util.ArrayDeque#spliterator()->Spliterator:::Creates a late-binding and fail-fast Spliterator over the elements in this deque
java.util.ArrayDeque.DeqSpliterator#trySplit()->DeqSpliterator::: deq spliterator try split
java.util.ArrayDeque.DeqSpliterator#forEachRemaining(Consumer)->void::: deq spliterator for each remaining
java.util.ArrayDeque.DeqSpliterator#tryAdvance(Consumer)->boolean::: deq spliterator try advance
java.util.ArrayDeque.DeqSpliterator#estimateSize()->long::: deq spliterator estimate size
java.util.ArrayDeque.DeqSpliterator#characteristics()->int::: deq spliterator characteristics
java.util.ArrayDeque#forEach(Consumer)->void::: array deque for each
java.util.ArrayDeque#removeIf(Predicate)->boolean::: array deque remove if
java.util.ArrayDeque#removeAll(Collection)->boolean::: array deque remove all
java.util.ArrayDeque#retainAll(Collection)->boolean::: array deque retain all
java.util.ArrayDeque#contains(Object)->boolean:::Returns true if this deque contains the specified element
java.util.ArrayDeque#remove(Object)->boolean:::Removes a single instance of the specified element from this deque
java.util.ArrayDeque#clear()->void:::Removes all of the elements from this deque
java.util.ArrayDeque#toArray()->Object[]:::Returns an array containing all of the elements in this deque in proper sequence (from first to last element)
java.util.ArrayDeque#toArray(T[])->T[]:::Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
java.util.ArrayDeque#clone()->ArrayDeque:::Returns a copy of this deque.
java.util.ArrayDeque#checkInvariants()->void:::debugging
java.util.ArrayList#trimToSize()->void:::Trims the capacity of this ArrayList instance to be the list's current size
java.util.ArrayList#ensureCapacity(int)->void:::Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.
java.util.ArrayList#size()->int:::Returns the number of elements in this list.
java.util.ArrayList#isEmpty()->boolean:::Returns true if this list contains no elements.
java.util.ArrayList#contains(Object)->boolean:::Returns true if this list contains the specified element
java.util.ArrayList#indexOf(Object)->int:::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
java.util.ArrayList#indexOfRange(Object, int, int)->int::: array list index of range
java.util.ArrayList#lastIndexOf(Object)->int:::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
java.util.ArrayList#lastIndexOfRange(Object, int, int)->int::: array list last index of range
java.util.ArrayList#clone()->Object:::Returns a shallow copy of this ArrayList instance
java.util.ArrayList#toArray()->Object[]:::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
java.util.ArrayList#toArray(T[])->T[]:::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
java.util.ArrayList#elementData(int)->E::: array list element data
java.util.ArrayList#elementAt(Object[], int)->E::: array list element at
java.util.ArrayList#get(int)->E:::Returns the element at the specified position in this list.
java.util.ArrayList#set(int, E)->E:::Replaces the element at the specified position in this list with the specified element.
java.util.ArrayList#add(E)->boolean:::Appends the specified element to the end of this list.
java.util.ArrayList#add(int, E)->void:::Inserts the specified element at the specified position in this list
java.util.ArrayList#remove(int)->E:::Removes the element at the specified position in this list
java.util.ArrayList#equals(Object)->boolean::: array list equals
java.util.ArrayList#equalsRange(List, int, int)->boolean::: array list equals range
java.util.ArrayList#hashCode()->int::: array list hash code
java.util.ArrayList#hashCodeRange(int, int)->int::: array list hash code range
java.util.ArrayList#remove(Object)->boolean:::Removes the first occurrence of the specified element from this list, if it is present
java.util.ArrayList#clear()->void:::Removes all of the elements from this list
java.util.ArrayList#addAll(Collection)->boolean:::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator
java.util.ArrayList#addAll(int, Collection)->boolean:::Inserts all of the elements in the specified collection into this list, starting at the specified position
java.util.ArrayList#removeRange(int, int)->void:::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
java.util.ArrayList#removeAll(Collection)->boolean:::Removes from this list all of its elements that are contained in the specified collection.
java.util.ArrayList#retainAll(Collection)->boolean:::Retains only the elements in this list that are contained in the specified collection
java.util.ArrayList#batchRemove(Collection, boolean, int, int)->boolean::: array list batch remove
java.util.ArrayList#listIterator(int)->ListIterator:::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
java.util.ArrayList#listIterator()->ListIterator:::Returns a list iterator over the elements in this list (in proper sequence)
java.util.ArrayList#iterator()->Iterator:::Returns an iterator over the elements in this list in proper sequence
java.util.ArrayList#subList(int, int)->List:::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive
java.util.ArrayList#forEach(Consumer)->void::: array list for each
java.util.ArrayList#spliterator()->Spliterator:::Creates a late-binding and fail-fast Spliterator over the elements in this list
java.util.ArrayList.ArrayListSpliterator#trySplit()->ArrayListSpliterator::: array list spliterator try split
java.util.ArrayList.ArrayListSpliterator#tryAdvance(Consumer)->boolean::: array list spliterator try advance
java.util.ArrayList.ArrayListSpliterator#forEachRemaining(Consumer)->void::: array list spliterator for each remaining
java.util.ArrayList.ArrayListSpliterator#estimateSize()->long::: array list spliterator estimate size
java.util.ArrayList.ArrayListSpliterator#characteristics()->int::: array list spliterator characteristics
java.util.ArrayList#removeIf(Predicate)->boolean::: array list remove if
java.util.ArrayList#removeIf(Predicate, int, int)->boolean:::Removes all elements satisfying the given predicate, from index i (inclusive) to index end (exclusive).
java.util.ArrayList#replaceAll(UnaryOperator)->void::: array list replace all
java.util.ArrayList#sort(Comparator)->void::: array list sort
java.util.ArrayList#checkInvariants()->void::: array list check invariants
java.util.ArrayPrefixHelpers.CumulateTask#compute()->void::: cumulate task compute
java.util.ArrayPrefixHelpers.LongCumulateTask#compute()->void::: long cumulate task compute
java.util.ArrayPrefixHelpers.DoubleCumulateTask#compute()->void::: double cumulate task compute
java.util.ArrayPrefixHelpers.IntCumulateTask#compute()->void::: int cumulate task compute
java.util.Arrays.NaturalOrder#compare(Object, Object)->int::: natural order compare
java.util.Arrays#rangeCheck(int, int, int)->void:::Checks that fromIndex and toIndex are in the range and throws an exception if they aren't.
java.util.Arrays#sort(int[])->void:::Sorts the specified array into ascending numerical order
java.util.Arrays#sort(int[], int, int)->void:::Sorts the specified range of the array into ascending order
java.util.Arrays#sort(long[])->void:::Sorts the specified array into ascending numerical order
java.util.Arrays#sort(long[], int, int)->void:::Sorts the specified range of the array into ascending order
java.util.Arrays#sort(short[])->void:::Sorts the specified array into ascending numerical order
java.util.Arrays#sort(short[], int, int)->void:::Sorts the specified range of the array into ascending order
java.util.Arrays#sort(char[])->void:::Sorts the specified array into ascending numerical order
java.util.Arrays#sort(char[], int, int)->void:::Sorts the specified range of the array into ascending order
java.util.Arrays#sort(byte[])->void:::Sorts the specified array into ascending numerical order
java.util.Arrays#sort(byte[], int, int)->void:::Sorts the specified range of the array into ascending order
java.util.Arrays#sort(float[])->void:::Sorts the specified array into ascending numerical order
java.util.Arrays#sort(float[], int, int)->void:::Sorts the specified range of the array into ascending order
java.util.Arrays#sort(double[])->void:::Sorts the specified array into ascending numerical order
java.util.Arrays#sort(double[], int, int)->void:::Sorts the specified range of the array into ascending order
java.util.Arrays#parallelSort(byte[])->void:::Sorts the specified array into ascending numerical order.
java.util.Arrays#parallelSort(byte[], int, int)->void:::Sorts the specified range of the array into ascending numerical order
java.util.Arrays#parallelSort(char[])->void:::Sorts the specified array into ascending numerical order.
java.util.Arrays#parallelSort(char[], int, int)->void:::Sorts the specified range of the array into ascending numerical order
java.util.Arrays#parallelSort(short[])->void:::Sorts the specified array into ascending numerical order.
java.util.Arrays#parallelSort(short[], int, int)->void:::Sorts the specified range of the array into ascending numerical order
java.util.Arrays#parallelSort(int[])->void:::Sorts the specified array into ascending numerical order.
java.util.Arrays#parallelSort(int[], int, int)->void:::Sorts the specified range of the array into ascending numerical order
java.util.Arrays#parallelSort(long[])->void:::Sorts the specified array into ascending numerical order.
java.util.Arrays#parallelSort(long[], int, int)->void:::Sorts the specified range of the array into ascending numerical order
java.util.Arrays#parallelSort(float[])->void:::Sorts the specified array into ascending numerical order
java.util.Arrays#parallelSort(float[], int, int)->void:::Sorts the specified range of the array into ascending numerical order
java.util.Arrays#parallelSort(double[])->void:::Sorts the specified array into ascending numerical order
java.util.Arrays#parallelSort(double[], int, int)->void:::Sorts the specified range of the array into ascending numerical order
java.util.Arrays#parallelSort(T[])->void:::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
java.util.Arrays#parallelSort(T[], int, int)->void:::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
java.util.Arrays#parallelSort(T[], Comparator)->void:::Sorts the specified array of objects according to the order induced by the specified comparator
java.util.Arrays#parallelSort(T[], int, int, Comparator)->void:::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator
java.util.Arrays#sort(Object[])->void:::Sorts the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
java.util.Arrays#sort(Object[], int, int)->void:::Sorts the specified range of the specified array of objects into ascending order, according to the Comparable natural ordering of its elements
java.util.Arrays#sort(T[], Comparator)->void:::Sorts the specified array of objects according to the order induced by the specified comparator
java.util.Arrays#sort(T[], int, int, Comparator)->void:::Sorts the specified range of the specified array of objects according to the order induced by the specified comparator
java.util.Arrays#parallelPrefix(T[], BinaryOperator)->void:::Cumulates, in parallel, each element of the given array in place, using the supplied function
java.util.Arrays#parallelPrefix(T[], int, int, BinaryOperator)->void:::Performs #parallelPrefix(Object[], BinaryOperator) for the given subrange of the array.
java.util.Arrays#parallelPrefix(long[], LongBinaryOperator)->void:::Cumulates, in parallel, each element of the given array in place, using the supplied function
java.util.Arrays#parallelPrefix(long[], int, int, LongBinaryOperator)->void:::Performs #parallelPrefix(long[], LongBinaryOperator) for the given subrange of the array.
java.util.Arrays#parallelPrefix(double[], DoubleBinaryOperator)->void:::Cumulates, in parallel, each element of the given array in place, using the supplied function
java.util.Arrays#parallelPrefix(double[], int, int, DoubleBinaryOperator)->void:::Performs #parallelPrefix(double[], DoubleBinaryOperator) for the given subrange of the array.
java.util.Arrays#parallelPrefix(int[], IntBinaryOperator)->void:::Cumulates, in parallel, each element of the given array in place, using the supplied function
java.util.Arrays#parallelPrefix(int[], int, int, IntBinaryOperator)->void:::Performs #parallelPrefix(int[], IntBinaryOperator) for the given subrange of the array.
java.util.Arrays#binarySearch(long[], long)->int:::Searches the specified array of longs for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(long[], int, int, long)->int:::Searches a range of the specified array of longs for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(int[], int)->int:::Searches the specified array of ints for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(int[], int, int, int)->int:::Searches a range of the specified array of ints for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(short[], short)->int:::Searches the specified array of shorts for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(short[], int, int, short)->int:::Searches a range of the specified array of shorts for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(char[], char)->int:::Searches the specified array of chars for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(char[], int, int, char)->int:::Searches a range of the specified array of chars for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(byte[], byte)->int:::Searches the specified array of bytes for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(byte[], int, int, byte)->int:::Searches a range of the specified array of bytes for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(double[], double)->int:::Searches the specified array of doubles for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(double[], int, int, double)->int:::Searches a range of the specified array of doubles for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(float[], float)->int:::Searches the specified array of floats for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(float[], int, int, float)->int:::Searches a range of the specified array of floats for the specified value using the binary search algorithm
java.util.Arrays#binarySearch(Object[], Object)->int:::Searches the specified array for the specified object using the binary search algorithm
java.util.Arrays#binarySearch(Object[], int, int, Object)->int:::Searches a range of the specified array for the specified object using the binary search algorithm
java.util.Arrays#binarySearch(T[], T, Comparator)->int:::Searches the specified array for the specified object using the binary search algorithm
java.util.Arrays#binarySearch(T[], int, int, T, Comparator)->int:::Searches a range of the specified array for the specified object using the binary search algorithm
java.util.Arrays#equals(long[], long[])->boolean:::Returns true if the two specified arrays of longs are equal to one another
java.util.Arrays#equals(long[], int, int, long[], int, int)->boolean:::Returns true if the two specified arrays of longs, over the specified ranges, are equal to one another
java.util.Arrays#equals(int[], int[])->boolean:::Returns true if the two specified arrays of ints are equal to one another
java.util.Arrays#equals(int[], int, int, int[], int, int)->boolean:::Returns true if the two specified arrays of ints, over the specified ranges, are equal to one another
java.util.Arrays#equals(short[], short[])->boolean:::Returns true if the two specified arrays of shorts are equal to one another
java.util.Arrays#equals(short[], int, int, short[], int, int)->boolean:::Returns true if the two specified arrays of shorts, over the specified ranges, are equal to one another
java.util.Arrays#equals(char[], char[])->boolean:::Returns true if the two specified arrays of chars are equal to one another
java.util.Arrays#equals(char[], int, int, char[], int, int)->boolean:::Returns true if the two specified arrays of chars, over the specified ranges, are equal to one another
java.util.Arrays#equals(byte[], byte[])->boolean:::Returns true if the two specified arrays of bytes are equal to one another
java.util.Arrays#equals(byte[], int, int, byte[], int, int)->boolean:::Returns true if the two specified arrays of bytes, over the specified ranges, are equal to one another
java.util.Arrays#equals(boolean[], boolean[])->boolean:::Returns true if the two specified arrays of booleans are equal to one another
java.util.Arrays#equals(boolean[], int, int, boolean[], int, int)->boolean:::Returns true if the two specified arrays of booleans, over the specified ranges, are equal to one another
java.util.Arrays#equals(double[], double[])->boolean:::Returns true if the two specified arrays of doubles are equal to one another
java.util.Arrays#equals(double[], int, int, double[], int, int)->boolean:::Returns true if the two specified arrays of doubles, over the specified ranges, are equal to one another
java.util.Arrays#equals(float[], float[])->boolean:::Returns true if the two specified arrays of floats are equal to one another
java.util.Arrays#equals(float[], int, int, float[], int, int)->boolean:::Returns true if the two specified arrays of floats, over the specified ranges, are equal to one another
java.util.Arrays#equals(Object[], Object[])->boolean:::Returns true if the two specified arrays of Objects are equal to one another
java.util.Arrays#equals(Object[], int, int, Object[], int, int)->boolean:::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another
java.util.Arrays#equals(T[], T[], Comparator)->boolean:::Returns true if the two specified arrays of Objects are equal to one another
java.util.Arrays#equals(T[], int, int, T[], int, int, Comparator)->boolean:::Returns true if the two specified arrays of Objects, over the specified ranges, are equal to one another
java.util.Arrays#fill(long[], long)->void:::Assigns the specified long value to each element of the specified array of longs.
java.util.Arrays#fill(long[], int, int, long)->void:::Assigns the specified long value to each element of the specified range of the specified array of longs
java.util.Arrays#fill(int[], int)->void:::Assigns the specified int value to each element of the specified array of ints.
java.util.Arrays#fill(int[], int, int, int)->void:::Assigns the specified int value to each element of the specified range of the specified array of ints
java.util.Arrays#fill(short[], short)->void:::Assigns the specified short value to each element of the specified array of shorts.
java.util.Arrays#fill(short[], int, int, short)->void:::Assigns the specified short value to each element of the specified range of the specified array of shorts
java.util.Arrays#fill(char[], char)->void:::Assigns the specified char value to each element of the specified array of chars.
java.util.Arrays#fill(char[], int, int, char)->void:::Assigns the specified char value to each element of the specified range of the specified array of chars
java.util.Arrays#fill(byte[], byte)->void:::Assigns the specified byte value to each element of the specified array of bytes.
java.util.Arrays#fill(byte[], int, int, byte)->void:::Assigns the specified byte value to each element of the specified range of the specified array of bytes
java.util.Arrays#fill(boolean[], boolean)->void:::Assigns the specified boolean value to each element of the specified array of booleans.
java.util.Arrays#fill(boolean[], int, int, boolean)->void:::Assigns the specified boolean value to each element of the specified range of the specified array of booleans
java.util.Arrays#fill(double[], double)->void:::Assigns the specified double value to each element of the specified array of doubles.
java.util.Arrays#fill(double[], int, int, double)->void:::Assigns the specified double value to each element of the specified range of the specified array of doubles
java.util.Arrays#fill(float[], float)->void:::Assigns the specified float value to each element of the specified array of floats.
java.util.Arrays#fill(float[], int, int, float)->void:::Assigns the specified float value to each element of the specified range of the specified array of floats
java.util.Arrays#fill(Object[], Object)->void:::Assigns the specified Object reference to each element of the specified array of Objects.
java.util.Arrays#fill(Object[], int, int, Object)->void:::Assigns the specified Object reference to each element of the specified range of the specified array of Objects
java.util.Arrays#copyOf(T[], int)->T[]:::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length
java.util.Arrays#copyOf(U[], int, Class)->T[]:::Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length
java.util.Arrays#copyOf(byte[], int)->byte[]:::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
java.util.Arrays#copyOf(short[], int)->short[]:::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
java.util.Arrays#copyOf(int[], int)->int[]:::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
java.util.Arrays#copyOf(long[], int)->long[]:::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
java.util.Arrays#copyOf(char[], int)->char[]:::Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length
java.util.Arrays#copyOf(float[], int)->float[]:::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
java.util.Arrays#copyOf(double[], int)->double[]:::Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length
java.util.Arrays#copyOf(boolean[], int)->boolean[]:::Copies the specified array, truncating or padding with false (if necessary) so the copy has the specified length
java.util.Arrays#copyOfRange(T[], int, int)->T[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#copyOfRange(U[], int, int, Class)->T[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#copyOfRange(byte[], int, int)->byte[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#copyOfRange(short[], int, int)->short[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#copyOfRange(int[], int, int)->int[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#copyOfRange(long[], int, int)->long[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#copyOfRange(char[], int, int)->char[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#copyOfRange(float[], int, int)->float[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#copyOfRange(double[], int, int)->double[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#copyOfRange(boolean[], int, int)->boolean[]:::Copies the specified range of the specified array into a new array
java.util.Arrays#asList(T...)->List:::Returns a fixed-size list backed by the specified array
java.util.Arrays#hashCode(long[])->int:::Returns a hash code based on the contents of the specified array
java.util.Arrays#hashCode(int[])->int:::Returns a hash code based on the contents of the specified array
java.util.Arrays#hashCode(short[])->int:::Returns a hash code based on the contents of the specified array
java.util.Arrays#hashCode(char[])->int:::Returns a hash code based on the contents of the specified array
java.util.Arrays#hashCode(byte[])->int:::Returns a hash code based on the contents of the specified array
java.util.Arrays#hashCode(boolean[])->int:::Returns a hash code based on the contents of the specified array
java.util.Arrays#hashCode(float[])->int:::Returns a hash code based on the contents of the specified array
java.util.Arrays#hashCode(double[])->int:::Returns a hash code based on the contents of the specified array
java.util.Arrays#hashCode(Object[])->int:::Returns a hash code based on the contents of the specified array
java.util.Arrays#deepHashCode(Object[])->int:::Returns a hash code based on the "deep contents" of the specified array
java.util.Arrays#deepEquals(Object[], Object[])->boolean:::Returns true if the two specified arrays are deeply equal to one another
java.util.Arrays#deepEquals0(Object, Object)->boolean::: arrays deep equals0
java.util.Arrays#toString(long[])->String:::Returns a string representation of the contents of the specified array
java.util.Arrays#toString(int[])->String:::Returns a string representation of the contents of the specified array
java.util.Arrays#toString(short[])->String:::Returns a string representation of the contents of the specified array
java.util.Arrays#toString(char[])->String:::Returns a string representation of the contents of the specified array
java.util.Arrays#toString(byte[])->String:::Returns a string representation of the contents of the specified array
java.util.Arrays#toString(boolean[])->String:::Returns a string representation of the contents of the specified array
java.util.Arrays#toString(float[])->String:::Returns a string representation of the contents of the specified array
java.util.Arrays#toString(double[])->String:::Returns a string representation of the contents of the specified array
java.util.Arrays#toString(Object[])->String:::Returns a string representation of the contents of the specified array
java.util.Arrays#deepToString(Object[])->String:::Returns a string representation of the "deep contents" of the specified array
java.util.Arrays#setAll(T[], IntFunction)->void:::Set all elements of the specified array, using the provided generator function to compute each element
java.util.Arrays#parallelSetAll(T[], IntFunction)->void:::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
java.util.Arrays#setAll(int[], IntUnaryOperator)->void:::Set all elements of the specified array, using the provided generator function to compute each element
java.util.Arrays#parallelSetAll(int[], IntUnaryOperator)->void:::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
java.util.Arrays#setAll(long[], IntToLongFunction)->void:::Set all elements of the specified array, using the provided generator function to compute each element
java.util.Arrays#parallelSetAll(long[], IntToLongFunction)->void:::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
java.util.Arrays#setAll(double[], IntToDoubleFunction)->void:::Set all elements of the specified array, using the provided generator function to compute each element
java.util.Arrays#parallelSetAll(double[], IntToDoubleFunction)->void:::Set all elements of the specified array, in parallel, using the provided generator function to compute each element
java.util.Arrays#spliterator(T[])->Spliterator:::Returns a Spliterator covering all of the specified array
java.util.Arrays#spliterator(T[], int, int)->Spliterator:::Returns a Spliterator covering the specified range of the specified array
java.util.Arrays#spliterator(int[])->Spliterator.OfInt:::Returns a Spliterator.OfInt covering all of the specified array
java.util.Arrays#spliterator(int[], int, int)->Spliterator.OfInt:::Returns a Spliterator.OfInt covering the specified range of the specified array
java.util.Arrays#spliterator(long[])->Spliterator.OfLong:::Returns a Spliterator.OfLong covering all of the specified array
java.util.Arrays#spliterator(long[], int, int)->Spliterator.OfLong:::Returns a Spliterator.OfLong covering the specified range of the specified array
java.util.Arrays#spliterator(double[])->Spliterator.OfDouble:::Returns a Spliterator.OfDouble covering all of the specified array
java.util.Arrays#spliterator(double[], int, int)->Spliterator.OfDouble:::Returns a Spliterator.OfDouble covering the specified range of the specified array
java.util.Arrays#stream(T[])->Stream:::Returns a sequential Stream with the specified array as its source.
java.util.Arrays#stream(T[], int, int)->Stream:::Returns a sequential Stream with the specified range of the specified array as its source.
java.util.Arrays#stream(int[])->IntStream:::Returns a sequential IntStream with the specified array as its source.
java.util.Arrays#stream(int[], int, int)->IntStream:::Returns a sequential IntStream with the specified range of the specified array as its source.
java.util.Arrays#stream(long[])->LongStream:::Returns a sequential LongStream with the specified array as its source.
java.util.Arrays#stream(long[], int, int)->LongStream:::Returns a sequential LongStream with the specified range of the specified array as its source.
java.util.Arrays#stream(double[])->DoubleStream:::Returns a sequential DoubleStream with the specified array as its source.
java.util.Arrays#stream(double[], int, int)->DoubleStream:::Returns a sequential DoubleStream with the specified range of the specified array as its source.
java.util.Arrays#compare(boolean[], boolean[])->int:::Compares two boolean arrays lexicographically
java.util.Arrays#compare(boolean[], int, int, boolean[], int, int)->int:::Compares two boolean arrays lexicographically over the specified ranges
java.util.Arrays#compare(byte[], byte[])->int:::Compares two byte arrays lexicographically
java.util.Arrays#compare(byte[], int, int, byte[], int, int)->int:::Compares two byte arrays lexicographically over the specified ranges
java.util.Arrays#compareUnsigned(byte[], byte[])->int:::Compares two byte arrays lexicographically, numerically treating elements as unsigned
java.util.Arrays#compareUnsigned(byte[], int, int, byte[], int, int)->int:::Compares two byte arrays lexicographically over the specified ranges, numerically treating elements as unsigned
java.util.Arrays#compare(short[], short[])->int:::Compares two short arrays lexicographically
java.util.Arrays#compare(short[], int, int, short[], int, int)->int:::Compares two short arrays lexicographically over the specified ranges
java.util.Arrays#compareUnsigned(short[], short[])->int:::Compares two short arrays lexicographically, numerically treating elements as unsigned
java.util.Arrays#compareUnsigned(short[], int, int, short[], int, int)->int:::Compares two short arrays lexicographically over the specified ranges, numerically treating elements as unsigned
java.util.Arrays#compare(char[], char[])->int:::Compares two char arrays lexicographically
java.util.Arrays#compare(char[], int, int, char[], int, int)->int:::Compares two char arrays lexicographically over the specified ranges
java.util.Arrays#compare(int[], int[])->int:::Compares two int arrays lexicographically
java.util.Arrays#compare(int[], int, int, int[], int, int)->int:::Compares two int arrays lexicographically over the specified ranges
java.util.Arrays#compareUnsigned(int[], int[])->int:::Compares two int arrays lexicographically, numerically treating elements as unsigned
java.util.Arrays#compareUnsigned(int[], int, int, int[], int, int)->int:::Compares two int arrays lexicographically over the specified ranges, numerically treating elements as unsigned
java.util.Arrays#compare(long[], long[])->int:::Compares two long arrays lexicographically
java.util.Arrays#compare(long[], int, int, long[], int, int)->int:::Compares two long arrays lexicographically over the specified ranges
java.util.Arrays#compareUnsigned(long[], long[])->int:::Compares two long arrays lexicographically, numerically treating elements as unsigned
java.util.Arrays#compareUnsigned(long[], int, int, long[], int, int)->int:::Compares two long arrays lexicographically over the specified ranges, numerically treating elements as unsigned
java.util.Arrays#compare(float[], float[])->int:::Compares two float arrays lexicographically
java.util.Arrays#compare(float[], int, int, float[], int, int)->int:::Compares two float arrays lexicographically over the specified ranges
java.util.Arrays#compare(double[], double[])->int:::Compares two double arrays lexicographically
java.util.Arrays#compare(double[], int, int, double[], int, int)->int:::Compares two double arrays lexicographically over the specified ranges
java.util.Arrays#compare(T[], T[])->int:::Compares two Object arrays, within comparable elements, lexicographically
java.util.Arrays#compare(T[], int, int, T[], int, int)->int:::Compares two Object arrays lexicographically over the specified ranges
java.util.Arrays#compare(T[], T[], Comparator)->int:::Compares two Object arrays lexicographically using a specified comparator
java.util.Arrays#compare(T[], int, int, T[], int, int, Comparator)->int:::Compares two Object arrays lexicographically over the specified ranges
java.util.Arrays#mismatch(boolean[], boolean[])->int:::Finds and returns the index of the first mismatch between two boolean arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(boolean[], int, int, boolean[], int, int)->int:::Finds and returns the relative index of the first mismatch between two boolean arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(byte[], byte[])->int:::Finds and returns the index of the first mismatch between two byte arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(byte[], int, int, byte[], int, int)->int:::Finds and returns the relative index of the first mismatch between two byte arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(char[], char[])->int:::Finds and returns the index of the first mismatch between two char arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(char[], int, int, char[], int, int)->int:::Finds and returns the relative index of the first mismatch between two char arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(short[], short[])->int:::Finds and returns the index of the first mismatch between two short arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(short[], int, int, short[], int, int)->int:::Finds and returns the relative index of the first mismatch between two short arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(int[], int[])->int:::Finds and returns the index of the first mismatch between two int arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(int[], int, int, int[], int, int)->int:::Finds and returns the relative index of the first mismatch between two int arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(long[], long[])->int:::Finds and returns the index of the first mismatch between two long arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(long[], int, int, long[], int, int)->int:::Finds and returns the relative index of the first mismatch between two long arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(float[], float[])->int:::Finds and returns the index of the first mismatch between two float arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(float[], int, int, float[], int, int)->int:::Finds and returns the relative index of the first mismatch between two float arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(double[], double[])->int:::Finds and returns the index of the first mismatch between two double arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(double[], int, int, double[], int, int)->int:::Finds and returns the relative index of the first mismatch between two double arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(Object[], Object[])->int:::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(Object[], int, int, Object[], int, int)->int:::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(T[], T[], Comparator)->int:::Finds and returns the index of the first mismatch between two Object arrays, otherwise return -1 if no mismatch is found
java.util.Arrays#mismatch(T[], int, int, T[], int, int, Comparator)->int:::Finds and returns the relative index of the first mismatch between two Object arrays over the specified ranges, otherwise return -1 if no mismatch is found
java.util.ArraysParallelSortHelpers.EmptyCompleter#compute()->void::: empty completer compute
java.util.ArraysParallelSortHelpers.Relay#compute()->void::: relay compute
java.util.ArraysParallelSortHelpers.Relay#onCompletion(CountedCompleter)->void::: relay on completion
java.util.ArraysParallelSortHelpers.FJObject.Sorter#compute()->void::: sorter compute
java.util.ArraysParallelSortHelpers.FJObject.Merger#compute()->void::: merger compute
java.util.ArraysParallelSortHelpers.FJByte.Sorter#compute()->void::: sorter compute
java.util.ArraysParallelSortHelpers.FJByte.Merger#compute()->void::: merger compute
java.util.ArraysParallelSortHelpers.FJChar.Sorter#compute()->void::: sorter compute
java.util.ArraysParallelSortHelpers.FJChar.Merger#compute()->void::: merger compute
java.util.ArraysParallelSortHelpers.FJShort.Sorter#compute()->void::: sorter compute
java.util.ArraysParallelSortHelpers.FJShort.Merger#compute()->void::: merger compute
java.util.ArraysParallelSortHelpers.FJInt.Sorter#compute()->void::: sorter compute
java.util.ArraysParallelSortHelpers.FJInt.Merger#compute()->void::: merger compute
java.util.ArraysParallelSortHelpers.FJLong.Sorter#compute()->void::: sorter compute
java.util.ArraysParallelSortHelpers.FJLong.Merger#compute()->void::: merger compute
java.util.ArraysParallelSortHelpers.FJFloat.Sorter#compute()->void::: sorter compute
java.util.ArraysParallelSortHelpers.FJFloat.Merger#compute()->void::: merger compute
java.util.ArraysParallelSortHelpers.FJDouble.Sorter#compute()->void::: sorter compute
java.util.ArraysParallelSortHelpers.FJDouble.Merger#compute()->void::: merger compute
java.util.Base64#getEncoder()->Encoder:::Returns a Encoder that encodes using the Basic type base64 encoding scheme.
java.util.Base64#getUrlEncoder()->Encoder:::Returns a Encoder that encodes using the URL and Filename safe type base64 encoding scheme.
java.util.Base64#getMimeEncoder()->Encoder:::Returns a Encoder that encodes using the MIME type base64 encoding scheme.
java.util.Base64#getMimeEncoder(int, byte[])->Encoder:::Returns a Encoder that encodes using the MIME type base64 encoding scheme with specified line length and line separators.
java.util.Base64#getDecoder()->Decoder:::Returns a Decoder that decodes using the Basic type base64 encoding scheme.
java.util.Base64#getUrlDecoder()->Decoder:::Returns a Decoder that decodes using the URL and Filename safe type base64 encoding scheme.
java.util.Base64#getMimeDecoder()->Decoder:::Returns a Decoder that decodes using the MIME type base64 decoding scheme.
java.util.Base64.Encoder#encode(byte[])->byte[]:::Encodes all bytes from the specified byte array into a newly-allocated byte array using the Base64 encoding scheme
java.util.Base64.Encoder#encode(byte[], byte[])->int:::Encodes all bytes from the specified byte array using the Base64 encoding scheme, writing the resulting bytes to the given output byte array, starting at offset 0
java.util.Base64.Encoder#encodeToString(byte[])->String:::Encodes the specified byte array into a String using the Base64 encoding scheme
java.util.Base64.Encoder#encode(ByteBuffer)->ByteBuffer:::Encodes all remaining bytes from the specified byte buffer into a newly-allocated ByteBuffer using the Base64 encoding scheme
java.util.Base64.Encoder#wrap(OutputStream)->OutputStream:::Wraps an output stream for encoding byte data using the Base64 encoding scheme
java.util.Base64.Encoder#withoutPadding()->Encoder:::Returns an encoder instance that encodes equivalently to this one, but without adding any padding character at the end of the encoded byte data
java.util.Base64.Decoder#decode(byte[])->byte[]:::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into a newly-allocated output byte array
java.util.Base64.Decoder#decode(String)->byte[]:::Decodes a Base64 encoded String into a newly-allocated byte array using the Base64 encoding scheme
java.util.Base64.Decoder#decode(byte[], byte[])->int:::Decodes all bytes from the input byte array using the Base64 encoding scheme, writing the results into the given output byte array, starting at offset 0
java.util.Base64.Decoder#decode(ByteBuffer)->ByteBuffer:::Decodes all bytes from the input byte buffer using the Base64 encoding scheme, writing the results into a newly-allocated ByteBuffer
java.util.Base64.Decoder#wrap(InputStream)->InputStream:::Returns an input stream for decoding Base64 encoded byte stream
java.util.BitSet#valueOf(long[])->BitSet:::Returns a new bit set containing all the bits in the given long array
java.util.BitSet#valueOf(LongBuffer)->BitSet:::Returns a new bit set containing all the bits in the given long buffer between its position and limit
java.util.BitSet#valueOf(byte[])->BitSet:::Returns a new bit set containing all the bits in the given byte array
java.util.BitSet#valueOf(ByteBuffer)->BitSet:::Returns a new bit set containing all the bits in the given byte buffer between its position and limit
java.util.BitSet#toByteArray()->byte[]:::Returns a new byte array containing all the bits in this bit set
java.util.BitSet#toLongArray()->long[]:::Returns a new long array containing all the bits in this bit set
java.util.BitSet#flip(int)->void:::Sets the bit at the specified index to the complement of its current value.
java.util.BitSet#flip(int, int)->void:::Sets each bit from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the complement of its current value.
java.util.BitSet#set(int)->void:::Sets the bit at the specified index to true.
java.util.BitSet#set(int, boolean)->void:::Sets the bit at the specified index to the specified value.
java.util.BitSet#set(int, int)->void:::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to true.
java.util.BitSet#set(int, int, boolean)->void:::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to the specified value.
java.util.BitSet#clear(int)->void:::Sets the bit specified by the index to false.
java.util.BitSet#clear(int, int)->void:::Sets the bits from the specified fromIndex (inclusive) to the specified toIndex (exclusive) to false.
java.util.BitSet#clear()->void:::Sets all of the bits in this BitSet to false.
java.util.BitSet#get(int)->boolean:::Returns the value of the bit with the specified index
java.util.BitSet#get(int, int)->BitSet:::Returns a new BitSet composed of bits from this BitSet from fromIndex (inclusive) to toIndex (exclusive).
java.util.BitSet#nextSetBit(int)->int:::Returns the index of the first bit that is set to true that occurs on or after the specified starting index
java.util.BitSet#nextClearBit(int)->int:::Returns the index of the first bit that is set to false that occurs on or after the specified starting index.
java.util.BitSet#previousSetBit(int)->int:::Returns the index of the nearest bit that is set to true that occurs on or before the specified starting index
java.util.BitSet#previousClearBit(int)->int:::Returns the index of the nearest bit that is set to false that occurs on or before the specified starting index
java.util.BitSet#length()->int:::Returns the "logical size" of this BitSet: the index of the highest set bit in the BitSet plus one
java.util.BitSet#isEmpty()->boolean:::Returns true if this BitSet contains no bits that are set to true.
java.util.BitSet#intersects(BitSet)->boolean:::Returns true if the specified BitSet has any bits set to true that are also set to true in this BitSet.
java.util.BitSet#cardinality()->int:::Returns the number of bits set to true in this BitSet.
java.util.BitSet#and(BitSet)->void:::Performs a logical AND of this target bit set with the argument bit set
java.util.BitSet#or(BitSet)->void:::Performs a logical OR of this bit set with the bit set argument
java.util.BitSet#xor(BitSet)->void:::Performs a logical XOR of this bit set with the bit set argument
java.util.BitSet#andNot(BitSet)->void:::Clears all of the bits in this BitSet whose corresponding bit is set in the specified BitSet.
java.util.BitSet#hashCode()->int:::Returns the hash code value for this bit set
java.util.BitSet#size()->int:::Returns the number of bits of space actually in use by this BitSet to represent bit values
java.util.BitSet#equals(Object)->boolean:::Compares this object against the specified object
java.util.BitSet#clone()->Object:::Cloning this BitSet produces a new BitSet that is equal to it
java.util.BitSet#toString()->String:::Returns a string representation of this bit set
java.util.BitSet#stream()->IntStream:::Returns a stream of indices for which this BitSet contains a bit in the set state
java.util.Calendar.Builder#setInstant(long)->Builder:::Sets the instant parameter to the given instant value that is a millisecond offset from the Epoch.
java.util.Calendar.Builder#setInstant(Date)->Builder:::Sets the instant parameter to the instant value given by a Date
java.util.Calendar.Builder#set(int, int)->Builder:::Sets the field parameter to the given value
java.util.Calendar.Builder#setFields(int...)->Builder:::Sets field parameters to their values given by fieldValuePairs that are pairs of a field and its value
java.util.Calendar.Builder#setDate(int, int, int)->Builder:::Sets the date field parameters to the values given by year, month, and dayOfMonth
java.util.Calendar.Builder#setTimeOfDay(int, int, int)->Builder:::Sets the time of day field parameters to the values given by hourOfDay, minute, and second
java.util.Calendar.Builder#setTimeOfDay(int, int, int, int)->Builder:::Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis
java.util.Calendar.Builder#setWeekDate(int, int, int)->Builder:::Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week
java.util.Calendar.Builder#setTimeZone(TimeZone)->Builder:::Sets the time zone parameter to the given zone
java.util.Calendar.Builder#setLenient(boolean)->Builder:::Sets the lenient mode parameter to the value given by lenient
java.util.Calendar.Builder#setCalendarType(String)->Builder:::Sets the calendar type parameter to the given type
java.util.Calendar.Builder#setLocale(Locale)->Builder:::Sets the locale parameter to the given locale
java.util.Calendar.Builder#setWeekDefinition(int, int)->Builder:::Sets the week definition parameters to the values given by firstDayOfWeek and minimalDaysInFirstWeek that are used to determine the first week of a year
java.util.Calendar.Builder#build()->Calendar:::Returns a Calendar built from the parameters set by the setter methods
java.util.Calendar#getInstance()->Calendar:::Gets a calendar using the default time zone and locale
java.util.Calendar#getInstance(TimeZone)->Calendar:::Gets a calendar using the specified time zone and default locale
java.util.Calendar#getInstance(Locale)->Calendar:::Gets a calendar using the default time zone and specified locale
java.util.Calendar#getInstance(TimeZone, Locale)->Calendar:::Gets a calendar with the specified time zone and locale
java.util.Calendar#getAvailableLocales()->Locale[]:::Returns an array of all locales for which the getInstance methods of this class can return localized instances
java.util.Calendar#computeTime()->void:::Converts the current calendar field values in #fields fields[] to the millisecond time value #time.
java.util.Calendar#computeFields()->void:::Converts the current millisecond time value #time to calendar field values in #fields fields[]
java.util.Calendar#getTime()->Date:::Returns a Date object representing this Calendar's time value (millisecond offset from the Epoch").
java.util.Calendar#setTime(Date)->void:::Sets this Calendar's time with the given Date
java.util.Calendar#getTimeInMillis()->long:::Returns this Calendar's time value in milliseconds.
java.util.Calendar#setTimeInMillis(long)->void:::Sets this Calendar's current time from the given long value.
java.util.Calendar#get(int)->int:::Returns the value of the given calendar field
java.util.Calendar#internalGet(int)->int:::Returns the value of the given calendar field
java.util.Calendar#internalSet(int, int)->void:::Sets the value of the given calendar field
java.util.Calendar#set(int, int)->void:::Sets the given calendar field to the given value
java.util.Calendar#set(int, int, int)->void:::Sets the values for the calendar fields YEAR, MONTH, and DAY_OF_MONTH
java.util.Calendar#set(int, int, int, int, int)->void:::Sets the values for the calendar fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, and MINUTE
java.util.Calendar#set(int, int, int, int, int, int)->void:::Sets the values for the fields YEAR, MONTH, DAY_OF_MONTH, HOUR_OF_DAY, MINUTE, and SECOND
java.util.Calendar#clear()->void:::Sets all the calendar field values and the time value (millisecond offset from the Epoch) of this Calendar undefined
java.util.Calendar#clear(int)->void:::Sets the given calendar field value and the time value (millisecond offset from the Epoch) of this Calendar undefined
java.util.Calendar#isSet(int)->boolean:::Determines if the given calendar field has a value set, including cases that the value has been set by internal fields calculations triggered by a get method call.
java.util.Calendar#getDisplayName(int, int, Locale)->String:::Returns the string representation of the calendar field value in the given style and locale
java.util.Calendar#getDisplayNames(int, int, Locale)->Map:::Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values
java.util.Calendar#checkDisplayNameParams(int, int, int, int, Locale, int)->boolean::: calendar check display name params
java.util.Calendar#complete()->void:::Fills in any unset fields in the calendar fields
java.util.Calendar#isExternallySet(int)->boolean:::Returns whether the value of the specified calendar field has been set externally by calling one of the setter methods rather than by the internal time calculation.
java.util.Calendar#getSetStateFields()->int:::Returns a field mask (bit mask) indicating all calendar fields that have the state of externally or internally set.
java.util.Calendar#setFieldsComputed(int)->void:::Sets the state of the specified calendar fields to computed
java.util.Calendar#setFieldsNormalized(int)->void:::Sets the state of the calendar fields that are not specified by fieldMask to unset
java.util.Calendar#isPartiallyNormalized()->boolean:::Returns whether the calendar fields are partially in sync with the time value or fully in sync but not stamp values are not normalized yet.
java.util.Calendar#isFullyNormalized()->boolean:::Returns whether the calendar fields are fully in sync with the time value.
java.util.Calendar#setUnnormalized()->void:::Marks this Calendar as not sync'd.
java.util.Calendar#isFieldSet(int, int)->boolean:::Returns whether the specified field is on in the fieldMask.
java.util.Calendar#selectFields()->int:::Returns a field mask indicating which calendar field values to be used to calculate the time value
java.util.Calendar#getBaseStyle(int)->int::: calendar get base style
java.util.Calendar#getAvailableCalendarTypes()->Set:::Returns an unmodifiable Set containing all calendar types supported by Calendar in the runtime environment
java.util.Calendar#getCalendarType()->String:::Returns the calendar type of this Calendar
java.util.Calendar#equals(Object)->boolean:::Compares this Calendar to the specified Object
java.util.Calendar#hashCode()->int:::Returns a hash code for this calendar.
java.util.Calendar#before(Object)->boolean:::Returns whether this Calendar represents a time before the time represented by the specified Object
java.util.Calendar#after(Object)->boolean:::Returns whether this Calendar represents a time after the time represented by the specified Object
java.util.Calendar#compareTo(Calendar)->int:::Compares the time values (millisecond offsets from the Epoch) represented by two Calendar objects.
java.util.Calendar#add(int, int)->void:::Adds or subtracts the specified amount of time to the given calendar field, based on the calendar's rules
java.util.Calendar#roll(int, boolean)->void:::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields
java.util.Calendar#roll(int, int)->void:::Adds the specified (signed) amount to the specified calendar field without changing larger fields
java.util.Calendar#setTimeZone(TimeZone)->void:::Sets the time zone with the given time zone value.
java.util.Calendar#getTimeZone()->TimeZone:::Gets the time zone.
java.util.Calendar#getZone()->TimeZone:::Returns the time zone (without cloning).
java.util.Calendar#setZoneShared(boolean)->void:::Sets the sharedZone flag to shared.
java.util.Calendar#setLenient(boolean)->void:::Specifies whether or not date/time interpretation is to be lenient
java.util.Calendar#isLenient()->boolean:::Tells whether date/time interpretation is to be lenient.
java.util.Calendar#setFirstDayOfWeek(int)->void:::Sets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.
java.util.Calendar#getFirstDayOfWeek()->int:::Gets what the first day of the week is; e.g., SUNDAY in the U.S., MONDAY in France.
java.util.Calendar#setMinimalDaysInFirstWeek(int)->void:::Sets what the minimal days required in the first week of the year are; For example, if the first week is defined as one that contains the first day of the first month of a year, call this method with value 1
java.util.Calendar#getMinimalDaysInFirstWeek()->int:::Gets what the minimal days required in the first week of the year are; e.g., if the first week is defined as one that contains the first day of the first month of a year, this method returns 1
java.util.Calendar#isWeekDateSupported()->boolean:::Returns whether this Calendar supports week dates
java.util.Calendar#getWeekYear()->int:::Returns the week year represented by this Calendar
java.util.Calendar#setWeekDate(int, int, int)->void:::Sets the date of this Calendar with the given date specifiers - week year, week of year, and day of week
java.util.Calendar#getWeeksInWeekYear()->int:::Returns the number of weeks in the week year represented by this Calendar
java.util.Calendar#getMinimum(int)->int:::Returns the minimum value for the given calendar field of this Calendar instance
java.util.Calendar#getMaximum(int)->int:::Returns the maximum value for the given calendar field of this Calendar instance
java.util.Calendar#getGreatestMinimum(int)->int:::Returns the highest minimum value for the given calendar field of this Calendar instance
java.util.Calendar#getLeastMaximum(int)->int:::Returns the lowest maximum value for the given calendar field of this Calendar instance
java.util.Calendar#getActualMinimum(int)->int:::Returns the minimum value that the specified calendar field could have, given the time value of this Calendar
java.util.Calendar#getActualMaximum(int)->int:::Returns the maximum value that the specified calendar field could have, given the time value of this Calendar
java.util.Calendar#clone()->Object:::Creates and returns a copy of this object.
java.util.Calendar#getFieldName(int)->String:::Returns the name of the specified calendar field.
java.util.Calendar#toString()->String:::Return a string representation of this calendar
java.util.Calendar#toInstant()->Instant:::Converts this object to an Instant
java.util.Collection#size()->int:::Returns the number of elements in this collection
java.util.Collection#isEmpty()->boolean:::Returns true if this collection contains no elements.
java.util.Collection#contains(Object)->boolean:::Returns true if this collection contains the specified element
java.util.Collection#iterator()->Iterator:::Returns an iterator over the elements in this collection
java.util.Collection#toArray()->Object[]:::Returns an array containing all of the elements in this collection
java.util.Collection#toArray(T[])->T[]:::Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array
java.util.Collection#toArray(IntFunction)->T[]:::Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array
java.util.Collection#add(E)->boolean:::Ensures that this collection contains the specified element (optional operation)
java.util.Collection#remove(Object)->boolean:::Removes a single instance of the specified element from this collection, if it is present (optional operation)
java.util.Collection#containsAll(Collection)->boolean:::Returns true if this collection contains all of the elements in the specified collection.
java.util.Collection#addAll(Collection)->boolean:::Adds all of the elements in the specified collection to this collection (optional operation)
java.util.Collection#removeAll(Collection)->boolean:::Removes all of this collection's elements that are also contained in the specified collection (optional operation)
java.util.Collection#removeIf(Predicate)->boolean:::Removes all of the elements of this collection that satisfy the given predicate
java.util.Collection#retainAll(Collection)->boolean:::Retains only the elements in this collection that are contained in the specified collection (optional operation)
java.util.Collection#clear()->void:::Removes all of the elements from this collection (optional operation)
java.util.Collection#equals(Object)->boolean:::Compares the specified object with this collection for equality
java.util.Collection#hashCode()->int:::Returns the hash code value for this collection
java.util.Collection#spliterator()->Spliterator:::Creates a Spliterator over the elements in this collection
java.util.Collection#stream()->Stream:::Returns a sequential Stream with this collection as its source
java.util.Collection#parallelStream()->Stream:::Returns a possibly parallel Stream with this collection as its source
java.util.Collections#sort(List)->void:::Sorts the specified list into ascending order, according to the Comparable natural ordering of its elements
java.util.Collections#sort(List, Comparator)->void:::Sorts the specified list according to the order induced by the specified comparator
java.util.Collections#binarySearch(List>, T)->int:::Searches the specified list for the specified object using the binary search algorithm
java.util.Collections#binarySearch(List, T, Comparator)->int:::Searches the specified list for the specified object using the binary search algorithm
java.util.Collections#reverse(List)->void:::Reverses the order of the elements in the specified list.  This method runs in linear time.
java.util.Collections#shuffle(List)->void:::Randomly permutes the specified list using a default source of randomness
java.util.Collections#shuffle(List, Random)->void:::Randomly permute the specified list using the specified source of randomness
java.util.Collections#swap(List, int, int)->void:::Swaps the elements at the specified positions in the specified list
java.util.Collections#fill(List, T)->void:::Replaces all of the elements of the specified list with the specified element
java.util.Collections#copy(List, List)->void:::Copies all of the elements from one list into another
java.util.Collections#min(Collection)->T:::Returns the minimum element of the given collection, according to the natural ordering of its elements
java.util.Collections#min(Collection, Comparator)->T:::Returns the minimum element of the given collection, according to the order induced by the specified comparator
java.util.Collections#max(Collection)->T:::Returns the maximum element of the given collection, according to the natural ordering of its elements
java.util.Collections#max(Collection, Comparator)->T:::Returns the maximum element of the given collection, according to the order induced by the specified comparator
java.util.Collections#rotate(List, int)->void:::Rotates the elements in the specified list by the specified distance
java.util.Collections#replaceAll(List, T, T)->boolean:::Replaces all occurrences of one specified value in a list with another
java.util.Collections#indexOfSubList(List, List)->int:::Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence
java.util.Collections#lastIndexOfSubList(List, List)->int:::Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence
java.util.Collections#unmodifiableCollection(Collection)->Collection:::Returns an unmodifiable view of the specified collection
java.util.Collections.UnmodifiableCollection#size()->int::: unmodifiable collection size
java.util.Collections.UnmodifiableCollection#isEmpty()->boolean::: unmodifiable collection is empty
java.util.Collections.UnmodifiableCollection#contains(Object)->boolean::: unmodifiable collection contains
java.util.Collections.UnmodifiableCollection#toArray()->Object[]::: unmodifiable collection to array
java.util.Collections.UnmodifiableCollection#toArray(T[])->T[]::: unmodifiable collection to array
java.util.Collections.UnmodifiableCollection#toArray(IntFunction)->T[]::: unmodifiable collection to array
java.util.Collections.UnmodifiableCollection#toString()->String::: unmodifiable collection to string
java.util.Collections.UnmodifiableCollection#iterator()->Iterator::: unmodifiable collection iterator
java.util.Collections.UnmodifiableCollection#add(E)->boolean::: unmodifiable collection add
java.util.Collections.UnmodifiableCollection#remove(Object)->boolean::: unmodifiable collection remove
java.util.Collections.UnmodifiableCollection#containsAll(Collection)->boolean::: unmodifiable collection contains all
java.util.Collections.UnmodifiableCollection#addAll(Collection)->boolean::: unmodifiable collection add all
java.util.Collections.UnmodifiableCollection#removeAll(Collection)->boolean::: unmodifiable collection remove all
java.util.Collections.UnmodifiableCollection#retainAll(Collection)->boolean::: unmodifiable collection retain all
java.util.Collections.UnmodifiableCollection#clear()->void::: unmodifiable collection clear
java.util.Collections.UnmodifiableCollection#forEach(Consumer)->void::: unmodifiable collection for each
java.util.Collections.UnmodifiableCollection#removeIf(Predicate)->boolean::: unmodifiable collection remove if
java.util.Collections.UnmodifiableCollection#spliterator()->Spliterator::: unmodifiable collection spliterator
java.util.Collections.UnmodifiableCollection#stream()->Stream::: unmodifiable collection stream
java.util.Collections.UnmodifiableCollection#parallelStream()->Stream::: unmodifiable collection parallel stream
java.util.Collections#unmodifiableSet(Set)->Set:::Returns an unmodifiable view of the specified set
java.util.Collections.UnmodifiableSet#equals(Object)->boolean::: unmodifiable set equals
java.util.Collections.UnmodifiableSet#hashCode()->int::: unmodifiable set hash code
java.util.Collections#unmodifiableSortedSet(SortedSet)->SortedSet:::Returns an unmodifiable view of the specified sorted set
java.util.Collections.UnmodifiableSortedSet#comparator()->Comparator::: unmodifiable sorted set comparator
java.util.Collections.UnmodifiableSortedSet#subSet(E, E)->SortedSet::: unmodifiable sorted set sub set
java.util.Collections.UnmodifiableSortedSet#headSet(E)->SortedSet::: unmodifiable sorted set head set
java.util.Collections.UnmodifiableSortedSet#tailSet(E)->SortedSet::: unmodifiable sorted set tail set
java.util.Collections.UnmodifiableSortedSet#first()->E::: unmodifiable sorted set first
java.util.Collections.UnmodifiableSortedSet#last()->E::: unmodifiable sorted set last
java.util.Collections#unmodifiableNavigableSet(NavigableSet)->NavigableSet:::Returns an unmodifiable view of the specified navigable set
java.util.Collections.UnmodifiableNavigableSet#lower(E)->E::: unmodifiable navigable set lower
java.util.Collections.UnmodifiableNavigableSet#floor(E)->E::: unmodifiable navigable set floor
java.util.Collections.UnmodifiableNavigableSet#ceiling(E)->E::: unmodifiable navigable set ceiling
java.util.Collections.UnmodifiableNavigableSet#higher(E)->E::: unmodifiable navigable set higher
java.util.Collections.UnmodifiableNavigableSet#pollFirst()->E::: unmodifiable navigable set poll first
java.util.Collections.UnmodifiableNavigableSet#pollLast()->E::: unmodifiable navigable set poll last
java.util.Collections.UnmodifiableNavigableSet#descendingSet()->NavigableSet::: unmodifiable navigable set descending set
java.util.Collections.UnmodifiableNavigableSet#descendingIterator()->Iterator::: unmodifiable navigable set descending iterator
java.util.Collections.UnmodifiableNavigableSet#subSet(E, boolean, E, boolean)->NavigableSet::: unmodifiable navigable set sub set
java.util.Collections.UnmodifiableNavigableSet#headSet(E, boolean)->NavigableSet::: unmodifiable navigable set head set
java.util.Collections.UnmodifiableNavigableSet#tailSet(E, boolean)->NavigableSet::: unmodifiable navigable set tail set
java.util.Collections#unmodifiableList(List)->List:::Returns an unmodifiable view of the specified list
java.util.Collections.UnmodifiableList#equals(Object)->boolean::: unmodifiable list equals
java.util.Collections.UnmodifiableList#hashCode()->int::: unmodifiable list hash code
java.util.Collections.UnmodifiableList#get(int)->E::: unmodifiable list get
java.util.Collections.UnmodifiableList#set(int, E)->E::: unmodifiable list set
java.util.Collections.UnmodifiableList#add(int, E)->void::: unmodifiable list add
java.util.Collections.UnmodifiableList#remove(int)->E::: unmodifiable list remove
java.util.Collections.UnmodifiableList#indexOf(Object)->int::: unmodifiable list index of
java.util.Collections.UnmodifiableList#lastIndexOf(Object)->int::: unmodifiable list last index of
java.util.Collections.UnmodifiableList#addAll(int, Collection)->boolean::: unmodifiable list add all
java.util.Collections.UnmodifiableList#replaceAll(UnaryOperator)->void::: unmodifiable list replace all
java.util.Collections.UnmodifiableList#sort(Comparator)->void::: unmodifiable list sort
java.util.Collections.UnmodifiableList#listIterator()->ListIterator::: unmodifiable list list iterator
java.util.Collections.UnmodifiableList#listIterator(int)->ListIterator::: unmodifiable list list iterator
java.util.Collections.UnmodifiableList#subList(int, int)->List::: unmodifiable list sub list
java.util.Collections.UnmodifiableRandomAccessList#subList(int, int)->List::: unmodifiable random access list sub list
java.util.Collections#unmodifiableMap(Map)->Map:::Returns an unmodifiable view of the specified map
java.util.Collections#unmodifiableSortedMap(SortedMap)->SortedMap:::Returns an unmodifiable view of the specified sorted map
java.util.Collections.UnmodifiableSortedMap#comparator()->Comparator::: unmodifiable sorted map comparator
java.util.Collections.UnmodifiableSortedMap#subMap(K, K)->SortedMap::: unmodifiable sorted map sub map
java.util.Collections.UnmodifiableSortedMap#headMap(K)->SortedMap::: unmodifiable sorted map head map
java.util.Collections.UnmodifiableSortedMap#tailMap(K)->SortedMap::: unmodifiable sorted map tail map
java.util.Collections.UnmodifiableSortedMap#firstKey()->K::: unmodifiable sorted map first key
java.util.Collections.UnmodifiableSortedMap#lastKey()->K::: unmodifiable sorted map last key
java.util.Collections#unmodifiableNavigableMap(NavigableMap)->NavigableMap:::Returns an unmodifiable view of the specified navigable map
java.util.Collections.UnmodifiableNavigableMap#lowerKey(K)->K::: unmodifiable navigable map lower key
java.util.Collections.UnmodifiableNavigableMap#floorKey(K)->K::: unmodifiable navigable map floor key
java.util.Collections.UnmodifiableNavigableMap#ceilingKey(K)->K::: unmodifiable navigable map ceiling key
java.util.Collections.UnmodifiableNavigableMap#higherKey(K)->K::: unmodifiable navigable map higher key
java.util.Collections.UnmodifiableNavigableMap#lowerEntry(K)->Entry::: unmodifiable navigable map lower entry
java.util.Collections.UnmodifiableNavigableMap#floorEntry(K)->Entry::: unmodifiable navigable map floor entry
java.util.Collections.UnmodifiableNavigableMap#ceilingEntry(K)->Entry::: unmodifiable navigable map ceiling entry
java.util.Collections.UnmodifiableNavigableMap#higherEntry(K)->Entry::: unmodifiable navigable map higher entry
java.util.Collections.UnmodifiableNavigableMap#firstEntry()->Entry::: unmodifiable navigable map first entry
java.util.Collections.UnmodifiableNavigableMap#lastEntry()->Entry::: unmodifiable navigable map last entry
java.util.Collections.UnmodifiableNavigableMap#pollFirstEntry()->Entry::: unmodifiable navigable map poll first entry
java.util.Collections.UnmodifiableNavigableMap#pollLastEntry()->Entry::: unmodifiable navigable map poll last entry
java.util.Collections.UnmodifiableNavigableMap#descendingMap()->NavigableMap::: unmodifiable navigable map descending map
java.util.Collections.UnmodifiableNavigableMap#navigableKeySet()->NavigableSet::: unmodifiable navigable map navigable key set
java.util.Collections.UnmodifiableNavigableMap#descendingKeySet()->NavigableSet::: unmodifiable navigable map descending key set
java.util.Collections.UnmodifiableNavigableMap#subMap(K, boolean, K, boolean)->NavigableMap::: unmodifiable navigable map sub map
java.util.Collections.UnmodifiableNavigableMap#headMap(K, boolean)->NavigableMap::: unmodifiable navigable map head map
java.util.Collections.UnmodifiableNavigableMap#tailMap(K, boolean)->NavigableMap::: unmodifiable navigable map tail map
java.util.Collections#synchronizedCollection(Collection)->Collection:::Returns a synchronized (thread-safe) collection backed by the specified collection
java.util.Collections#synchronizedCollection(Collection, Object)->Collection::: collections synchronized collection
java.util.Collections.SynchronizedCollection#size()->int::: synchronized collection size
java.util.Collections.SynchronizedCollection#isEmpty()->boolean::: synchronized collection is empty
java.util.Collections.SynchronizedCollection#contains(Object)->boolean::: synchronized collection contains
java.util.Collections.SynchronizedCollection#toArray()->Object[]::: synchronized collection to array
java.util.Collections.SynchronizedCollection#toArray(T[])->T[]::: synchronized collection to array
java.util.Collections.SynchronizedCollection#toArray(IntFunction)->T[]::: synchronized collection to array
java.util.Collections.SynchronizedCollection#iterator()->Iterator::: synchronized collection iterator
java.util.Collections.SynchronizedCollection#add(E)->boolean::: synchronized collection add
java.util.Collections.SynchronizedCollection#remove(Object)->boolean::: synchronized collection remove
java.util.Collections.SynchronizedCollection#containsAll(Collection)->boolean::: synchronized collection contains all
java.util.Collections.SynchronizedCollection#addAll(Collection)->boolean::: synchronized collection add all
java.util.Collections.SynchronizedCollection#removeAll(Collection)->boolean::: synchronized collection remove all
java.util.Collections.SynchronizedCollection#retainAll(Collection)->boolean::: synchronized collection retain all
java.util.Collections.SynchronizedCollection#clear()->void::: synchronized collection clear
java.util.Collections.SynchronizedCollection#toString()->String::: synchronized collection to string
java.util.Collections.SynchronizedCollection#forEach(Consumer)->void::: synchronized collection for each
java.util.Collections.SynchronizedCollection#removeIf(Predicate)->boolean::: synchronized collection remove if
java.util.Collections.SynchronizedCollection#spliterator()->Spliterator::: synchronized collection spliterator
java.util.Collections.SynchronizedCollection#stream()->Stream::: synchronized collection stream
java.util.Collections.SynchronizedCollection#parallelStream()->Stream::: synchronized collection parallel stream
java.util.Collections#synchronizedSet(Set)->Set:::Returns a synchronized (thread-safe) set backed by the specified set
java.util.Collections#synchronizedSet(Set, Object)->Set::: collections synchronized set
java.util.Collections.SynchronizedSet#equals(Object)->boolean::: synchronized set equals
java.util.Collections.SynchronizedSet#hashCode()->int::: synchronized set hash code
java.util.Collections#synchronizedSortedSet(SortedSet)->SortedSet:::Returns a synchronized (thread-safe) sorted set backed by the specified sorted set
java.util.Collections.SynchronizedSortedSet#comparator()->Comparator::: synchronized sorted set comparator
java.util.Collections.SynchronizedSortedSet#subSet(E, E)->SortedSet::: synchronized sorted set sub set
java.util.Collections.SynchronizedSortedSet#headSet(E)->SortedSet::: synchronized sorted set head set
java.util.Collections.SynchronizedSortedSet#tailSet(E)->SortedSet::: synchronized sorted set tail set
java.util.Collections.SynchronizedSortedSet#first()->E::: synchronized sorted set first
java.util.Collections.SynchronizedSortedSet#last()->E::: synchronized sorted set last
java.util.Collections#synchronizedNavigableSet(NavigableSet)->NavigableSet:::Returns a synchronized (thread-safe) navigable set backed by the specified navigable set
java.util.Collections.SynchronizedNavigableSet#lower(E)->E::: synchronized navigable set lower
java.util.Collections.SynchronizedNavigableSet#floor(E)->E::: synchronized navigable set floor
java.util.Collections.SynchronizedNavigableSet#ceiling(E)->E::: synchronized navigable set ceiling
java.util.Collections.SynchronizedNavigableSet#higher(E)->E::: synchronized navigable set higher
java.util.Collections.SynchronizedNavigableSet#pollFirst()->E::: synchronized navigable set poll first
java.util.Collections.SynchronizedNavigableSet#pollLast()->E::: synchronized navigable set poll last
java.util.Collections.SynchronizedNavigableSet#descendingSet()->NavigableSet::: synchronized navigable set descending set
java.util.Collections.SynchronizedNavigableSet#descendingIterator()->Iterator::: synchronized navigable set descending iterator
java.util.Collections.SynchronizedNavigableSet#subSet(E, E)->NavigableSet::: synchronized navigable set sub set
java.util.Collections.SynchronizedNavigableSet#headSet(E)->NavigableSet::: synchronized navigable set head set
java.util.Collections.SynchronizedNavigableSet#tailSet(E)->NavigableSet::: synchronized navigable set tail set
java.util.Collections.SynchronizedNavigableSet#subSet(E, boolean, E, boolean)->NavigableSet::: synchronized navigable set sub set
java.util.Collections.SynchronizedNavigableSet#headSet(E, boolean)->NavigableSet::: synchronized navigable set head set
java.util.Collections.SynchronizedNavigableSet#tailSet(E, boolean)->NavigableSet::: synchronized navigable set tail set
java.util.Collections#synchronizedList(List)->List:::Returns a synchronized (thread-safe) list backed by the specified list
java.util.Collections#synchronizedList(List, Object)->List::: collections synchronized list
java.util.Collections.SynchronizedList#equals(Object)->boolean::: synchronized list equals
java.util.Collections.SynchronizedList#hashCode()->int::: synchronized list hash code
java.util.Collections.SynchronizedList#get(int)->E::: synchronized list get
java.util.Collections.SynchronizedList#set(int, E)->E::: synchronized list set
java.util.Collections.SynchronizedList#add(int, E)->void::: synchronized list add
java.util.Collections.SynchronizedList#remove(int)->E::: synchronized list remove
java.util.Collections.SynchronizedList#indexOf(Object)->int::: synchronized list index of
java.util.Collections.SynchronizedList#lastIndexOf(Object)->int::: synchronized list last index of
java.util.Collections.SynchronizedList#addAll(int, Collection)->boolean::: synchronized list add all
java.util.Collections.SynchronizedList#listIterator()->ListIterator::: synchronized list list iterator
java.util.Collections.SynchronizedList#listIterator(int)->ListIterator::: synchronized list list iterator
java.util.Collections.SynchronizedList#subList(int, int)->List::: synchronized list sub list
java.util.Collections.SynchronizedList#replaceAll(UnaryOperator)->void::: synchronized list replace all
java.util.Collections.SynchronizedList#sort(Comparator)->void::: synchronized list sort
java.util.Collections.SynchronizedRandomAccessList#subList(int, int)->List::: synchronized random access list sub list
java.util.Collections#synchronizedMap(Map)->Map:::Returns a synchronized (thread-safe) map backed by the specified map
java.util.Collections#synchronizedSortedMap(SortedMap)->SortedMap:::Returns a synchronized (thread-safe) sorted map backed by the specified sorted map
java.util.Collections.SynchronizedSortedMap#comparator()->Comparator::: synchronized sorted map comparator
java.util.Collections.SynchronizedSortedMap#subMap(K, K)->SortedMap::: synchronized sorted map sub map
java.util.Collections.SynchronizedSortedMap#headMap(K)->SortedMap::: synchronized sorted map head map
java.util.Collections.SynchronizedSortedMap#tailMap(K)->SortedMap::: synchronized sorted map tail map
java.util.Collections.SynchronizedSortedMap#firstKey()->K::: synchronized sorted map first key
java.util.Collections.SynchronizedSortedMap#lastKey()->K::: synchronized sorted map last key
java.util.Collections#synchronizedNavigableMap(NavigableMap)->NavigableMap:::Returns a synchronized (thread-safe) navigable map backed by the specified navigable map
java.util.Collections.SynchronizedNavigableMap#lowerEntry(K)->Entry::: synchronized navigable map lower entry
java.util.Collections.SynchronizedNavigableMap#lowerKey(K)->K::: synchronized navigable map lower key
java.util.Collections.SynchronizedNavigableMap#floorEntry(K)->Entry::: synchronized navigable map floor entry
java.util.Collections.SynchronizedNavigableMap#floorKey(K)->K::: synchronized navigable map floor key
java.util.Collections.SynchronizedNavigableMap#ceilingEntry(K)->Entry::: synchronized navigable map ceiling entry
java.util.Collections.SynchronizedNavigableMap#ceilingKey(K)->K::: synchronized navigable map ceiling key
java.util.Collections.SynchronizedNavigableMap#higherEntry(K)->Entry::: synchronized navigable map higher entry
java.util.Collections.SynchronizedNavigableMap#higherKey(K)->K::: synchronized navigable map higher key
java.util.Collections.SynchronizedNavigableMap#firstEntry()->Entry::: synchronized navigable map first entry
java.util.Collections.SynchronizedNavigableMap#lastEntry()->Entry::: synchronized navigable map last entry
java.util.Collections.SynchronizedNavigableMap#pollFirstEntry()->Entry::: synchronized navigable map poll first entry
java.util.Collections.SynchronizedNavigableMap#pollLastEntry()->Entry::: synchronized navigable map poll last entry
java.util.Collections.SynchronizedNavigableMap#descendingMap()->NavigableMap::: synchronized navigable map descending map
java.util.Collections.SynchronizedNavigableMap#keySet()->NavigableSet::: synchronized navigable map key set
java.util.Collections.SynchronizedNavigableMap#navigableKeySet()->NavigableSet::: synchronized navigable map navigable key set
java.util.Collections.SynchronizedNavigableMap#descendingKeySet()->NavigableSet::: synchronized navigable map descending key set
java.util.Collections.SynchronizedNavigableMap#subMap(K, K)->SortedMap::: synchronized navigable map sub map
java.util.Collections.SynchronizedNavigableMap#headMap(K)->SortedMap::: synchronized navigable map head map
java.util.Collections.SynchronizedNavigableMap#tailMap(K)->SortedMap::: synchronized navigable map tail map
java.util.Collections.SynchronizedNavigableMap#subMap(K, boolean, K, boolean)->NavigableMap::: synchronized navigable map sub map
java.util.Collections.SynchronizedNavigableMap#headMap(K, boolean)->NavigableMap::: synchronized navigable map head map
java.util.Collections.SynchronizedNavigableMap#tailMap(K, boolean)->NavigableMap::: synchronized navigable map tail map
java.util.Collections#checkedCollection(Collection, Class)->Collection:::Returns a dynamically typesafe view of the specified collection
java.util.Collections#zeroLengthArray(Class)->T[]::: collections zero length array
java.util.Collections.CheckedCollection#typeCheck(Object)->E::: checked collection type check
java.util.Collections.CheckedCollection#size()->int::: checked collection size
java.util.Collections.CheckedCollection#isEmpty()->boolean::: checked collection is empty
java.util.Collections.CheckedCollection#contains(Object)->boolean::: checked collection contains
java.util.Collections.CheckedCollection#toArray()->Object[]::: checked collection to array
java.util.Collections.CheckedCollection#toArray(T[])->T[]::: checked collection to array
java.util.Collections.CheckedCollection#toArray(IntFunction)->T[]::: checked collection to array
java.util.Collections.CheckedCollection#toString()->String::: checked collection to string
java.util.Collections.CheckedCollection#remove(Object)->boolean::: checked collection remove
java.util.Collections.CheckedCollection#clear()->void::: checked collection clear
java.util.Collections.CheckedCollection#containsAll(Collection)->boolean::: checked collection contains all
java.util.Collections.CheckedCollection#removeAll(Collection)->boolean::: checked collection remove all
java.util.Collections.CheckedCollection#retainAll(Collection)->boolean::: checked collection retain all
java.util.Collections.CheckedCollection#iterator()->Iterator::: checked collection iterator
java.util.Collections.CheckedCollection#add(E)->boolean::: checked collection add
java.util.Collections.CheckedCollection#checkedCopyOf(Collection)->Collection::: checked collection checked copy of
java.util.Collections.CheckedCollection#addAll(Collection)->boolean::: checked collection add all
java.util.Collections.CheckedCollection#forEach(Consumer)->void::: checked collection for each
java.util.Collections.CheckedCollection#removeIf(Predicate)->boolean::: checked collection remove if
java.util.Collections.CheckedCollection#spliterator()->Spliterator::: checked collection spliterator
java.util.Collections.CheckedCollection#stream()->Stream::: checked collection stream
java.util.Collections.CheckedCollection#parallelStream()->Stream::: checked collection parallel stream
java.util.Collections#checkedQueue(Queue, Class)->Queue:::Returns a dynamically typesafe view of the specified queue
java.util.Collections.CheckedQueue#element()->E::: checked queue element
java.util.Collections.CheckedQueue#equals(Object)->boolean::: checked queue equals
java.util.Collections.CheckedQueue#hashCode()->int::: checked queue hash code
java.util.Collections.CheckedQueue#peek()->E::: checked queue peek
java.util.Collections.CheckedQueue#poll()->E::: checked queue poll
java.util.Collections.CheckedQueue#remove()->E::: checked queue remove
java.util.Collections.CheckedQueue#offer(E)->boolean::: checked queue offer
java.util.Collections#checkedSet(Set, Class)->Set:::Returns a dynamically typesafe view of the specified set
java.util.Collections.CheckedSet#equals(Object)->boolean::: checked set equals
java.util.Collections.CheckedSet#hashCode()->int::: checked set hash code
java.util.Collections#checkedSortedSet(SortedSet, Class)->SortedSet:::Returns a dynamically typesafe view of the specified sorted set
java.util.Collections.CheckedSortedSet#comparator()->Comparator::: checked sorted set comparator
java.util.Collections.CheckedSortedSet#first()->E::: checked sorted set first
java.util.Collections.CheckedSortedSet#last()->E::: checked sorted set last
java.util.Collections.CheckedSortedSet#subSet(E, E)->SortedSet::: checked sorted set sub set
java.util.Collections.CheckedSortedSet#headSet(E)->SortedSet::: checked sorted set head set
java.util.Collections.CheckedSortedSet#tailSet(E)->SortedSet::: checked sorted set tail set
java.util.Collections#checkedNavigableSet(NavigableSet, Class)->NavigableSet:::Returns a dynamically typesafe view of the specified navigable set
java.util.Collections.CheckedNavigableSet#lower(E)->E::: checked navigable set lower
java.util.Collections.CheckedNavigableSet#floor(E)->E::: checked navigable set floor
java.util.Collections.CheckedNavigableSet#ceiling(E)->E::: checked navigable set ceiling
java.util.Collections.CheckedNavigableSet#higher(E)->E::: checked navigable set higher
java.util.Collections.CheckedNavigableSet#pollFirst()->E::: checked navigable set poll first
java.util.Collections.CheckedNavigableSet#pollLast()->E::: checked navigable set poll last
java.util.Collections.CheckedNavigableSet#descendingSet()->NavigableSet::: checked navigable set descending set
java.util.Collections.CheckedNavigableSet#descendingIterator()->Iterator::: checked navigable set descending iterator
java.util.Collections.CheckedNavigableSet#subSet(E, E)->NavigableSet::: checked navigable set sub set
java.util.Collections.CheckedNavigableSet#headSet(E)->NavigableSet::: checked navigable set head set
java.util.Collections.CheckedNavigableSet#tailSet(E)->NavigableSet::: checked navigable set tail set
java.util.Collections.CheckedNavigableSet#subSet(E, boolean, E, boolean)->NavigableSet::: checked navigable set sub set
java.util.Collections.CheckedNavigableSet#headSet(E, boolean)->NavigableSet::: checked navigable set head set
java.util.Collections.CheckedNavigableSet#tailSet(E, boolean)->NavigableSet::: checked navigable set tail set
java.util.Collections#checkedList(List, Class)->List:::Returns a dynamically typesafe view of the specified list
java.util.Collections.CheckedList#equals(Object)->boolean::: checked list equals
java.util.Collections.CheckedList#hashCode()->int::: checked list hash code
java.util.Collections.CheckedList#get(int)->E::: checked list get
java.util.Collections.CheckedList#remove(int)->E::: checked list remove
java.util.Collections.CheckedList#indexOf(Object)->int::: checked list index of
java.util.Collections.CheckedList#lastIndexOf(Object)->int::: checked list last index of
java.util.Collections.CheckedList#set(int, E)->E::: checked list set
java.util.Collections.CheckedList#add(int, E)->void::: checked list add
java.util.Collections.CheckedList#addAll(int, Collection)->boolean::: checked list add all
java.util.Collections.CheckedList#listIterator()->ListIterator::: checked list list iterator
java.util.Collections.CheckedList#listIterator(int)->ListIterator::: checked list list iterator
java.util.Collections.CheckedList#subList(int, int)->List::: checked list sub list
java.util.Collections.CheckedList#replaceAll(UnaryOperator)->void::: checked list replace all
java.util.Collections.CheckedList#sort(Comparator)->void::: checked list sort
java.util.Collections.CheckedRandomAccessList#subList(int, int)->List::: checked random access list sub list
java.util.Collections#checkedMap(Map, Class, Class)->Map:::Returns a dynamically typesafe view of the specified map
java.util.Collections#checkedSortedMap(SortedMap, Class, Class)->SortedMap:::Returns a dynamically typesafe view of the specified sorted map
java.util.Collections.CheckedSortedMap#comparator()->Comparator::: checked sorted map comparator
java.util.Collections.CheckedSortedMap#firstKey()->K::: checked sorted map first key
java.util.Collections.CheckedSortedMap#lastKey()->K::: checked sorted map last key
java.util.Collections.CheckedSortedMap#subMap(K, K)->SortedMap::: checked sorted map sub map
java.util.Collections.CheckedSortedMap#headMap(K)->SortedMap::: checked sorted map head map
java.util.Collections.CheckedSortedMap#tailMap(K)->SortedMap::: checked sorted map tail map
java.util.Collections#checkedNavigableMap(NavigableMap, Class, Class)->NavigableMap:::Returns a dynamically typesafe view of the specified navigable map
java.util.Collections.CheckedNavigableMap#comparator()->Comparator::: checked navigable map comparator
java.util.Collections.CheckedNavigableMap#firstKey()->K::: checked navigable map first key
java.util.Collections.CheckedNavigableMap#lastKey()->K::: checked navigable map last key
java.util.Collections.CheckedNavigableMap#lowerEntry(K)->Entry::: checked navigable map lower entry
java.util.Collections.CheckedNavigableMap#lowerKey(K)->K::: checked navigable map lower key
java.util.Collections.CheckedNavigableMap#floorEntry(K)->Entry::: checked navigable map floor entry
java.util.Collections.CheckedNavigableMap#floorKey(K)->K::: checked navigable map floor key
java.util.Collections.CheckedNavigableMap#ceilingEntry(K)->Entry::: checked navigable map ceiling entry
java.util.Collections.CheckedNavigableMap#ceilingKey(K)->K::: checked navigable map ceiling key
java.util.Collections.CheckedNavigableMap#higherEntry(K)->Entry::: checked navigable map higher entry
java.util.Collections.CheckedNavigableMap#higherKey(K)->K::: checked navigable map higher key
java.util.Collections.CheckedNavigableMap#firstEntry()->Entry::: checked navigable map first entry
java.util.Collections.CheckedNavigableMap#lastEntry()->Entry::: checked navigable map last entry
java.util.Collections.CheckedNavigableMap#pollFirstEntry()->Entry::: checked navigable map poll first entry
java.util.Collections.CheckedNavigableMap#pollLastEntry()->Entry::: checked navigable map poll last entry
java.util.Collections.CheckedNavigableMap#descendingMap()->NavigableMap::: checked navigable map descending map
java.util.Collections.CheckedNavigableMap#keySet()->NavigableSet::: checked navigable map key set
java.util.Collections.CheckedNavigableMap#navigableKeySet()->NavigableSet::: checked navigable map navigable key set
java.util.Collections.CheckedNavigableMap#descendingKeySet()->NavigableSet::: checked navigable map descending key set
java.util.Collections.CheckedNavigableMap#subMap(K, K)->NavigableMap::: checked navigable map sub map
java.util.Collections.CheckedNavigableMap#headMap(K)->NavigableMap::: checked navigable map head map
java.util.Collections.CheckedNavigableMap#tailMap(K)->NavigableMap::: checked navigable map tail map
java.util.Collections.CheckedNavigableMap#subMap(K, boolean, K, boolean)->NavigableMap::: checked navigable map sub map
java.util.Collections.CheckedNavigableMap#headMap(K, boolean)->NavigableMap::: checked navigable map head map
java.util.Collections.CheckedNavigableMap#tailMap(K, boolean)->NavigableMap::: checked navigable map tail map
java.util.Collections#emptyIterator()->Iterator:::Returns an iterator that has no elements
java.util.Collections#emptyListIterator()->ListIterator:::Returns a list iterator that has no elements
java.util.Collections#emptyEnumeration()->Enumeration:::Returns an enumeration that has no elements
java.util.Collections#emptySet()->Set:::Returns an empty set (immutable)
java.util.Collections#emptySortedSet()->SortedSet:::Returns an empty sorted set (immutable)
java.util.Collections#emptyNavigableSet()->NavigableSet:::Returns an empty navigable set (immutable)
java.util.Collections#emptyList()->List:::Returns an empty list (immutable)
java.util.Collections#emptyMap()->Map:::Returns an empty map (immutable)
java.util.Collections#emptySortedMap()->SortedMap:::Returns an empty sorted map (immutable)
java.util.Collections#emptyNavigableMap()->NavigableMap:::Returns an empty navigable map (immutable)
java.util.Collections#singleton(T)->Set:::Returns an immutable set containing only the specified object
java.util.Collections#singletonIterator(E)->Iterator::: collections singleton iterator
java.util.Collections#singletonSpliterator(T)->Spliterator:::Creates a Spliterator with only the specified element
java.util.Collections#singletonList(T)->List:::Returns an immutable list containing only the specified object
java.util.Collections#singletonMap(K, V)->Map:::Returns an immutable map, mapping only the specified key to the specified value
java.util.Collections#nCopies(int, T)->List:::Returns an immutable list consisting of n copies of the specified object
java.util.Collections#reverseOrder()->Comparator:::Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface
java.util.Collections#reverseOrder(Comparator)->Comparator:::Returns a comparator that imposes the reverse ordering of the specified comparator
java.util.Collections#enumeration(Collection)->Enumeration:::Returns an enumeration over the specified collection
java.util.Collections#list(Enumeration)->ArrayList:::Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration
java.util.Collections#eq(Object, Object)->boolean:::Returns true if the specified arguments are equal, or both null
java.util.Collections#frequency(Collection, Object)->int:::Returns the number of elements in the specified collection equal to the specified object
java.util.Collections#disjoint(Collection, Collection)->boolean:::Returns true if the two specified collections have no elements in common
java.util.Collections#addAll(Collection, T...)->boolean:::Adds all of the specified elements to the specified collection
java.util.Collections#newSetFromMap(Map)->Set:::Returns a set backed by the specified map
java.util.Collections#asLifoQueue(Deque)->Queue:::Returns a view of a Deque as a Last-in-first-out (Lifo) Queue
java.util.Collections.AsLIFOQueue#add(E)->boolean::: as queue add
java.util.Collections.AsLIFOQueue#offer(E)->boolean::: as queue offer
java.util.Collections.AsLIFOQueue#poll()->E::: as queue poll
java.util.Collections.AsLIFOQueue#remove()->E::: as queue remove
java.util.Collections.AsLIFOQueue#peek()->E::: as queue peek
java.util.Collections.AsLIFOQueue#element()->E::: as queue element
java.util.Collections.AsLIFOQueue#clear()->void::: as queue clear
java.util.Collections.AsLIFOQueue#size()->int::: as queue size
java.util.Collections.AsLIFOQueue#isEmpty()->boolean::: as queue is empty
java.util.Collections.AsLIFOQueue#contains(Object)->boolean::: as queue contains
java.util.Collections.AsLIFOQueue#remove(Object)->boolean::: as queue remove
java.util.Collections.AsLIFOQueue#iterator()->Iterator::: as queue iterator
java.util.Collections.AsLIFOQueue#toArray()->Object[]::: as queue to array
java.util.Collections.AsLIFOQueue#toArray(T[])->T[]::: as queue to array
java.util.Collections.AsLIFOQueue#toArray(IntFunction)->T[]::: as queue to array
java.util.Collections.AsLIFOQueue#toString()->String::: as queue to string
java.util.Collections.AsLIFOQueue#containsAll(Collection)->boolean::: as queue contains all
java.util.Collections.AsLIFOQueue#removeAll(Collection)->boolean::: as queue remove all
java.util.Collections.AsLIFOQueue#retainAll(Collection)->boolean::: as queue retain all
java.util.Collections.AsLIFOQueue#forEach(Consumer)->void::: as queue for each
java.util.Collections.AsLIFOQueue#removeIf(Predicate)->boolean::: as queue remove if
java.util.Collections.AsLIFOQueue#spliterator()->Spliterator::: as queue spliterator
java.util.Collections.AsLIFOQueue#stream()->Stream::: as queue stream
java.util.Collections.AsLIFOQueue#parallelStream()->Stream::: as queue parallel stream
java.util.ComparableTimSort#sort(Object[], int, int, Object[], int, int)->void:::Sorts the given range, using the given workspace array slice for temp storage when possible
java.util.Comparator#compare(T, T)->int:::Compares its two arguments for order
java.util.Comparator#equals(Object)->boolean:::Indicates whether some other object is &quot;equal to&quot; this comparator
java.util.Comparator#reversed()->Comparator:::Returns a comparator that imposes the reverse ordering of this comparator.
java.util.Comparator#thenComparing(Comparator)->Comparator:::Returns a lexicographic-order comparator with another comparator
java.util.Comparator#thenComparing(Function, Comparator)->Comparator:::Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.
java.util.Comparator#thenComparing(Function)->Comparator:::Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.
java.util.Comparator#thenComparingInt(ToIntFunction)->Comparator:::Returns a lexicographic-order comparator with a function that extracts an int sort key.
java.util.Comparator#thenComparingLong(ToLongFunction)->Comparator:::Returns a lexicographic-order comparator with a function that extracts a long sort key.
java.util.Comparator#thenComparingDouble(ToDoubleFunction)->Comparator:::Returns a lexicographic-order comparator with a function that extracts a double sort key.
java.util.Comparator#reverseOrder()->Comparator:::Returns a comparator that imposes the reverse of the natural ordering
java.util.Comparator#naturalOrder()->Comparator:::Returns a comparator that compares Comparable objects in natural order
java.util.Comparator#nullsFirst(Comparator)->Comparator:::Returns a null-friendly comparator that considers null to be less than non-null
java.util.Comparator#nullsLast(Comparator)->Comparator:::Returns a null-friendly comparator that considers null to be greater than non-null
java.util.Comparator#comparing(Function, Comparator)->Comparator:::Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator
java.util.Comparator#comparing(Function)->Comparator:::Accepts a function that extracts a java.lang.Comparable Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key
java.util.Comparator#comparingInt(ToIntFunction)->Comparator:::Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key
java.util.Comparator#comparingLong(ToLongFunction)->Comparator:::Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key
java.util.Comparator#comparingDouble(ToDoubleFunction)->Comparator:::Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key
java.util.Comparators.NullComparator#compare(T, T)->int::: null comparator compare
java.util.Comparators.NullComparator#thenComparing(Comparator)->Comparator::: null comparator then comparing
java.util.Comparators.NullComparator#reversed()->Comparator::: null comparator reversed
java.util.Currency#getInstance(String)->Currency:::Returns the Currency instance for the given currency code.
java.util.Currency#getInstance(Locale)->Currency:::Returns the Currency instance for the country of the given locale
java.util.Currency#getAvailableCurrencies()->Set:::Gets the set of available currencies
java.util.Currency#getCurrencyCode()->String:::Gets the ISO 4217 currency code of this currency.
java.util.Currency#getSymbol()->String:::Gets the symbol of this currency for the default Locale.Category#DISPLAY DISPLAY locale
java.util.Currency#getSymbol(Locale)->String:::Gets the symbol of this currency for the specified locale
java.util.Currency#getDefaultFractionDigits()->int:::Gets the default number of fraction digits used with this currency
java.util.Currency#getNumericCode()->int:::Returns the ISO 4217 numeric code of this currency.
java.util.Currency#getNumericCodeAsString()->String:::Returns the 3 digit ISO 4217 numeric code of this currency as a String
java.util.Currency#getDisplayName()->String:::Gets the name that is suitable for displaying this currency for the default Locale.Category#DISPLAY DISPLAY locale
java.util.Currency#getDisplayName(Locale)->String:::Gets the name that is suitable for displaying this currency for the specified locale
java.util.Currency#toString()->String:::Returns the ISO 4217 currency code of this currency.
java.util.Date#clone()->Object:::Return a copy of this object.
java.util.Date#UTC(int, int, int, int, int, int)->long:::Determines the date and time based on the arguments
java.util.Date#parse(String)->long:::Attempts to interpret the string s as a representation of a date and time
java.util.Date#getYear()->int:::Returns a value that is the result of subtracting 1900 from the year that contains or begins with the instant in time represented by this Date object, as interpreted in the local time zone.
java.util.Date#setYear(int)->void:::Sets the year of this Date object to be the specified value plus 1900
java.util.Date#getMonth()->int:::Returns a number representing the month that contains or begins with the instant in time represented by this Date object
java.util.Date#setMonth(int)->void:::Sets the month of this date to the specified value
java.util.Date#getDate()->int:::Returns the day of the month represented by this Date object
java.util.Date#setDate(int)->void:::Sets the day of the month of this Date object to the specified value
java.util.Date#getDay()->int:::Returns the day of the week represented by this date
java.util.Date#getHours()->int:::Returns the hour represented by this Date object
java.util.Date#setHours(int)->void:::Sets the hour of this Date object to the specified value
java.util.Date#getMinutes()->int:::Returns the number of minutes past the hour represented by this date, as interpreted in the local time zone
java.util.Date#setMinutes(int)->void:::Sets the minutes of this Date object to the specified value
java.util.Date#getSeconds()->int:::Returns the number of seconds past the minute represented by this date
java.util.Date#setSeconds(int)->void:::Sets the seconds of this Date to the specified value
java.util.Date#getTime()->long:::Returns the number of milliseconds since January 1, 1970, 00:00:00 GMT represented by this Date object.
java.util.Date#setTime(long)->void:::Sets this Date object to represent a point in time that is time milliseconds after January 1, 1970 00:00:00 GMT.
java.util.Date#before(Date)->boolean:::Tests if this date is before the specified date.
java.util.Date#after(Date)->boolean:::Tests if this date is after the specified date.
java.util.Date#equals(Object)->boolean:::Compares two dates for equality
java.util.Date#getMillisOf(Date)->long:::Returns the millisecond value of this Date object without affecting its internal state.
java.util.Date#compareTo(Date)->int:::Compares two Dates for ordering.
java.util.Date#hashCode()->int:::Returns a hash code value for this object
java.util.Date#toString()->String:::Converts this Date object to a String of the form:  dow mon dd hh:mm:ss zzz yyyy where:<ul> <li>dow is the day of the week (Sun, Mon, Tue, Wed,     Thu, Fri, Sat)
java.util.Date#toLocaleString()->String:::Creates a string representation of this Date object in an implementation-dependent form
java.util.Date#toGMTString()->String:::Creates a string representation of this Date object of the form:  d mon yyyy hh:mm:ss GMT where:<ul> <li>d is the day of the month (1 through 31),     as one or two decimal digits
java.util.Date#getTimezoneOffset()->int:::Returns the offset, measured in minutes, for the local time zone relative to UTC that is appropriate for the time represented by this Date object
java.util.Date#from(Instant)->Date:::Obtains an instance of Date from an Instant object
java.util.Date#toInstant()->Instant:::Converts this Date object to an Instant
java.util.Deque#addFirst(E)->void:::Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
java.util.Deque#addLast(E)->void:::Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
java.util.Deque#offerFirst(E)->boolean:::Inserts the specified element at the front of this deque unless it would violate capacity restrictions
java.util.Deque#offerLast(E)->boolean:::Inserts the specified element at the end of this deque unless it would violate capacity restrictions
java.util.Deque#removeFirst()->E:::Retrieves and removes the first element of this deque
java.util.Deque#removeLast()->E:::Retrieves and removes the last element of this deque
java.util.Deque#pollFirst()->E:::Retrieves and removes the first element of this deque, or returns null if this deque is empty.
java.util.Deque#pollLast()->E:::Retrieves and removes the last element of this deque, or returns null if this deque is empty.
java.util.Deque#getFirst()->E:::Retrieves, but does not remove, the first element of this deque
java.util.Deque#getLast()->E:::Retrieves, but does not remove, the last element of this deque
java.util.Deque#peekFirst()->E:::Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.
java.util.Deque#peekLast()->E:::Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.
java.util.Deque#removeFirstOccurrence(Object)->boolean:::Removes the first occurrence of the specified element from this deque
java.util.Deque#removeLastOccurrence(Object)->boolean:::Removes the last occurrence of the specified element from this deque
java.util.Deque#add(E)->boolean:::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available
java.util.Deque#offer(E)->boolean:::Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available
java.util.Deque#remove()->E:::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque)
java.util.Deque#poll()->E:::Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
java.util.Deque#element()->E:::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque)
java.util.Deque#peek()->E:::Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty
java.util.Deque#addAll(Collection)->boolean:::Adds all of the elements in the specified collection at the end of this deque, as if by calling #addLast on each one, in the order that they are returned by the collection's iterator
java.util.Deque#push(E)->void:::Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available
java.util.Deque#pop()->E:::Pops an element from the stack represented by this deque
java.util.Deque#remove(Object)->boolean:::Removes the first occurrence of the specified element from this deque
java.util.Deque#contains(Object)->boolean:::Returns true if this deque contains the specified element
java.util.Deque#size()->int:::Returns the number of elements in this deque.
java.util.Deque#iterator()->Iterator:::Returns an iterator over the elements in this deque in proper sequence
java.util.Deque#descendingIterator()->Iterator:::Returns an iterator over the elements in this deque in reverse sequential order
java.util.Dictionary#size()->int:::Returns the number of entries (distinct keys) in this dictionary.
java.util.Dictionary#isEmpty()->boolean:::Tests if this dictionary maps no keys to value
java.util.Dictionary#keys()->Enumeration:::Returns an enumeration of the keys in this dictionary
java.util.Dictionary#elements()->Enumeration:::Returns an enumeration of the values in this dictionary
java.util.Dictionary#get(Object)->V:::Returns the value to which the key is mapped in this dictionary
java.util.Dictionary#put(K, V)->V:::Maps the specified key to the specified value in this dictionary
java.util.Dictionary#remove(Object)->V:::Removes the key (and its corresponding value) from this dictionary
java.util.DoubleSummaryStatistics#accept(double)->void:::Records another value into the summary information.
java.util.DoubleSummaryStatistics#combine(DoubleSummaryStatistics)->void:::Combines the state of another DoubleSummaryStatistics into this one.
java.util.DoubleSummaryStatistics#getCount()->long:::Return the count of values recorded.
java.util.DoubleSummaryStatistics#getSum()->double:::Returns the sum of values recorded, or zero if no values have been recorded
java.util.DoubleSummaryStatistics#getMin()->double:::Returns the minimum recorded value, Double.NaN if any recorded value was NaN or Double.POSITIVE_INFINITY if no values were recorded
java.util.DoubleSummaryStatistics#getMax()->double:::Returns the maximum recorded value, Double.NaN if any recorded value was NaN or Double.NEGATIVE_INFINITY if no values were recorded
java.util.DoubleSummaryStatistics#getAverage()->double:::Returns the arithmetic mean of values recorded, or zero if no values have been recorded
java.util.DoubleSummaryStatistics#toString()->String:::Returns a non-empty string representation of this object suitable for debugging
java.util.DualPivotQuicksort#sort(int[], int, int, int[], int, int)->void:::Sorts the specified range of the array using the given workspace array slice if possible for merging
java.util.DualPivotQuicksort#sort(long[], int, int, long[], int, int)->void:::Sorts the specified range of the array using the given workspace array slice if possible for merging
java.util.DualPivotQuicksort#sort(short[], int, int, short[], int, int)->void:::Sorts the specified range of the array using the given workspace array slice if possible for merging
java.util.DualPivotQuicksort#sort(char[], int, int, char[], int, int)->void:::Sorts the specified range of the array using the given workspace array slice if possible for merging
java.util.DualPivotQuicksort#sort(byte[], int, int)->void:::Sorts the specified range of the array.
java.util.DualPivotQuicksort#sort(float[], int, int, float[], int, int)->void:::Sorts the specified range of the array using the given workspace array slice if possible for merging
java.util.DualPivotQuicksort#sort(double[], int, int, double[], int, int)->void:::Sorts the specified range of the array using the given workspace array slice if possible for merging
java.util.DuplicateFormatFlagsException#getFlags()->String:::Returns the set of flags which contains a duplicate flag.
java.util.DuplicateFormatFlagsException#getMessage()->String::: duplicate format flags exception get message
java.util.Enumeration#hasMoreElements()->boolean:::Tests if this enumeration contains more elements.
java.util.Enumeration#nextElement()->E:::Returns the next element of this enumeration if this enumeration object has at least one more element to provide.
java.util.Enumeration#asIterator()->Iterator:::Returns an Iterator that traverses the remaining elements covered by this enumeration
java.util.EnumMap#size()->int:::Returns the number of key-value mappings in this map.
java.util.EnumMap#containsValue(Object)->boolean:::Returns true if this map maps one or more keys to the specified value.
java.util.EnumMap#containsKey(Object)->boolean:::Returns true if this map contains a mapping for the specified key.
java.util.EnumMap#get(Object)->V:::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
java.util.EnumMap#put(K, V)->V:::Associates the specified value with the specified key in this map
java.util.EnumMap#remove(Object)->V:::Removes the mapping for this key from this map if present.
java.util.EnumMap#putAll(Map)->void:::Copies all of the mappings from the specified map to this map
java.util.EnumMap#clear()->void:::Removes all mappings from this map.
java.util.EnumMap#keySet()->Set:::Returns a Set view of the keys contained in this map
java.util.EnumMap#values()->Collection:::Returns a Collection view of the values contained in this map
java.util.EnumMap#entrySet()->Set>:::Returns a Set view of the mappings contained in this map
java.util.EnumMap#equals(Object)->boolean:::Compares the specified object with this map for equality
java.util.EnumMap#hashCode()->int:::Returns the hash code value for this map
java.util.EnumMap#clone()->EnumMap:::Returns a shallow copy of this enum map
java.util.EnumSet#access$000()->Enum[]::: enum set access$000
java.util.EnumSet#noneOf(Class)->EnumSet:::Creates an empty enum set with the specified element type.
java.util.EnumSet#allOf(Class)->EnumSet:::Creates an enum set containing all of the elements in the specified element type.
java.util.EnumSet#addAll()->void:::Adds all of the elements from the appropriate enum type to this enum set, which is empty prior to the call.
java.util.EnumSet#copyOf(EnumSet)->EnumSet:::Creates an enum set with the same element type as the specified enum set, initially containing the same elements (if any).
java.util.EnumSet#copyOf(Collection)->EnumSet:::Creates an enum set initialized from the specified collection
java.util.EnumSet#complementOf(EnumSet)->EnumSet:::Creates an enum set with the same element type as the specified enum set, initially containing all the elements of this type that are not contained in the specified set.
java.util.EnumSet#of(E)->EnumSet:::Creates an enum set initially containing the specified element
java.util.EnumSet#of(E, E)->EnumSet:::Creates an enum set initially containing the specified elements
java.util.EnumSet#of(E, E, E)->EnumSet:::Creates an enum set initially containing the specified elements
java.util.EnumSet#of(E, E, E, E)->EnumSet:::Creates an enum set initially containing the specified elements
java.util.EnumSet#of(E, E, E, E, E)->EnumSet:::Creates an enum set initially containing the specified elements
java.util.EnumSet#of(E, E...)->EnumSet:::Creates an enum set initially containing the specified elements
java.util.EnumSet#range(E, E)->EnumSet:::Creates an enum set initially containing all of the elements in the range defined by the two specified endpoints
java.util.EnumSet#addRange(E, E)->void:::Adds the specified range to this enum set, which is empty prior to the call.
java.util.EnumSet#clone()->EnumSet:::Returns a copy of this set.
java.util.EnumSet#complement()->void:::Complements the contents of this enum set.
java.util.EnumSet#typeCheck(E)->void:::Throws an exception if e is not of the correct type for this enum set.
java.util.EnumSet#writeReplace()->Object:::Returns a  SerializationProxy representing the state of this instance.
java.util.EventListenerProxy#getListener()->T:::Returns the listener associated with the proxy.
java.util.EventObject#getSource()->Object:::The object on which the Event initially occurred.
java.util.EventObject#toString()->String:::Returns a String representation of this EventObject.
java.util.FormatFlagsConversionMismatchException#getFlags()->String:::Returns the incompatible flag.
java.util.FormatFlagsConversionMismatchException#getConversion()->char:::Returns the incompatible conversion.
java.util.FormatFlagsConversionMismatchException#getMessage()->String::: format flags conversion mismatch exception get message
java.util.Formattable#formatTo(Formatter, int, int, int)->void:::Formats the object using the provided Formatter formatter.
java.util.Formatter#locale()->Locale:::Returns the locale set by the construction of this formatter
java.util.Formatter#out()->Appendable:::Returns the destination for the output.
java.util.Formatter#toString()->String:::Returns the result of invoking toString() on the destination for the output
java.util.Formatter#flush()->void:::Flushes this formatter
java.util.Formatter#close()->void:::Closes this formatter
java.util.Formatter#ioException()->IOException:::Returns the IOException last thrown by this formatter's Appendable
java.util.Formatter#format(String, Object...)->Formatter:::Writes a formatted string to this object's destination using the specified format string and arguments
java.util.Formatter#format(Locale, String, Object...)->Formatter:::Writes a formatted string to this object's destination using the specified locale, format string, and arguments.
java.util.GregorianCalendar#setGregorianChange(Date)->void:::Sets the GregorianCalendar change date
java.util.GregorianCalendar#getGregorianChange()->Date:::Gets the Gregorian Calendar change date
java.util.GregorianCalendar#isLeapYear(int)->boolean:::Determines if the given year is a leap year
java.util.GregorianCalendar#getCalendarType()->String:::Returns "gregory" as the calendar type.
java.util.GregorianCalendar#equals(Object)->boolean:::Compares this GregorianCalendar to the specified Object
java.util.GregorianCalendar#hashCode()->int:::Generates the hash code for this GregorianCalendar object.
java.util.GregorianCalendar#add(int, int)->void:::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules
java.util.GregorianCalendar#roll(int, boolean)->void:::Adds or subtracts (up/down) a single unit of time on the given time field without changing larger fields
java.util.GregorianCalendar#roll(int, int)->void:::Adds a signed amount to the specified calendar field without changing larger fields
java.util.GregorianCalendar#getMinimum(int)->int:::Returns the minimum value for the given calendar field of this GregorianCalendar instance
java.util.GregorianCalendar#getMaximum(int)->int:::Returns the maximum value for the given calendar field of this GregorianCalendar instance
java.util.GregorianCalendar#getGreatestMinimum(int)->int:::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance
java.util.GregorianCalendar#getLeastMaximum(int)->int:::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance
java.util.GregorianCalendar#getActualMinimum(int)->int:::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods
java.util.GregorianCalendar#getActualMaximum(int)->int:::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, #getGregorianChange() getGregorianChange and Calendar#getTimeZone() getTimeZone methods
java.util.GregorianCalendar#clone()->Object::: gregorian calendar clone
java.util.GregorianCalendar#getTimeZone()->TimeZone::: gregorian calendar get time zone
java.util.GregorianCalendar#setTimeZone(TimeZone)->void::: gregorian calendar set time zone
java.util.GregorianCalendar#isWeekDateSupported()->boolean:::Returns true indicating this GregorianCalendar supports week dates.
java.util.GregorianCalendar#getWeekYear()->int:::Returns the week year represented by this GregorianCalendar
java.util.GregorianCalendar#setWeekDate(int, int, int)->void:::Sets this GregorianCalendar to the date given by the date specifiers - weekYear, weekOfYear, and dayOfWeek
java.util.GregorianCalendar#getWeeksInWeekYear()->int:::Returns the number of weeks in the week year represented by this GregorianCalendar
java.util.GregorianCalendar#computeFields()->void:::Converts the time value (millisecond offset from the Epoch) to calendar field values
java.util.GregorianCalendar#computeTime()->void:::Converts calendar field values to the time value (millisecond offset from the Epoch).
java.util.GregorianCalendar#toZonedDateTime()->ZonedDateTime:::Converts this object to a ZonedDateTime that represents the same point on the time-line as this GregorianCalendar
java.util.GregorianCalendar#from(ZonedDateTime)->GregorianCalendar:::Obtains an instance of GregorianCalendar with the default locale from a ZonedDateTime object
java.util.HashMap.Node#getKey()->K::: node get key
java.util.HashMap.Node#getValue()->V::: node get value
java.util.HashMap.Node#toString()->String::: node to string
java.util.HashMap.Node#hashCode()->int::: node hash code
java.util.HashMap.Node#setValue(V)->V::: node set value
java.util.HashMap.Node#equals(Object)->boolean::: node equals
java.util.HashMap#hash(Object)->int:::Computes key.hashCode() and spreads (XORs) higher bits of hash to lower
java.util.HashMap#comparableClassFor(Object)->Class:::Returns x's Class if it is of the form "class C implements Comparable<C>", else null.
java.util.HashMap#compareComparables(Class, Object, Object)->int:::Returns k.compareTo(x) if x matches kc (k's screened comparable class), else 0.
java.util.HashMap#tableSizeFor(int)->int:::Returns a power of two size for the given target capacity.
java.util.HashMap#putMapEntries(Map, boolean)->void:::Implements Map.putAll and Map constructor.
java.util.HashMap#size()->int:::Returns the number of key-value mappings in this map.
java.util.HashMap#isEmpty()->boolean:::Returns true if this map contains no key-value mappings.
java.util.HashMap#get(Object)->V:::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
java.util.HashMap#getNode(int, Object)->Node:::Implements Map.get and related methods.
java.util.HashMap#containsKey(Object)->boolean:::Returns true if this map contains a mapping for the specified key.
java.util.HashMap#put(K, V)->V:::Associates the specified value with the specified key in this map
java.util.HashMap#putVal(int, K, V, boolean, boolean)->V:::Implements Map.put and related methods.
java.util.HashMap#resize()->Node[]:::Initializes or doubles table size
java.util.HashMap#treeifyBin(Node[], int)->void:::Replaces all linked nodes in bin at index for given hash unless table is too small, in which case resizes instead.
java.util.HashMap#putAll(Map)->void:::Copies all of the mappings from the specified map to this map
java.util.HashMap#remove(Object)->V:::Removes the mapping for the specified key from this map if present.
java.util.HashMap#removeNode(int, Object, Object, boolean, boolean)->Node:::Implements Map.remove and related methods.
java.util.HashMap#clear()->void:::Removes all of the mappings from this map
java.util.HashMap#containsValue(Object)->boolean:::Returns true if this map maps one or more keys to the specified value.
java.util.HashMap#keySet()->Set:::Returns a Set view of the keys contained in this map
java.util.HashMap.KeySet#size()->int::: key set size
java.util.HashMap.KeySet#clear()->void::: key set clear
java.util.HashMap.KeySet#iterator()->Iterator::: key set iterator
java.util.HashMap.KeySet#contains(Object)->boolean::: key set contains
java.util.HashMap.KeySet#remove(Object)->boolean::: key set remove
java.util.HashMap.KeySet#spliterator()->Spliterator::: key set spliterator
java.util.HashMap.KeySet#forEach(Consumer)->void::: key set for each
java.util.HashMap#values()->Collection:::Returns a Collection view of the values contained in this map
java.util.HashMap.Values#size()->int::: values size
java.util.HashMap.Values#clear()->void::: values clear
java.util.HashMap.Values#iterator()->Iterator::: values iterator
java.util.HashMap.Values#contains(Object)->boolean::: values contains
java.util.HashMap.Values#spliterator()->Spliterator::: values spliterator
java.util.HashMap.Values#forEach(Consumer)->void::: values for each
java.util.HashMap#entrySet()->Set>:::Returns a Set view of the mappings contained in this map
java.util.HashMap.EntrySet#size()->int::: entry set size
java.util.HashMap.EntrySet#clear()->void::: entry set clear
java.util.HashMap.EntrySet#iterator()->Iterator>::: entry set iterator
java.util.HashMap.EntrySet#contains(Object)->boolean::: entry set contains
java.util.HashMap.EntrySet#remove(Object)->boolean::: entry set remove
java.util.HashMap.EntrySet#spliterator()->Spliterator>::: entry set spliterator
java.util.HashMap.EntrySet#forEach(Consumer>)->void::: entry set for each
java.util.HashMap#getOrDefault(Object, V)->V::: hash map get or default
java.util.HashMap#putIfAbsent(K, V)->V::: hash map put if absent
java.util.HashMap#remove(Object, Object)->boolean::: hash map remove
java.util.HashMap#replace(K, V, V)->boolean::: hash map replace
java.util.HashMap#replace(K, V)->V::: hash map replace
java.util.HashMap#computeIfAbsent(K, Function)->V:::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the mapping function modifies this map during computation.
java.util.HashMap#computeIfPresent(K, BiFunction)->V:::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.
java.util.HashMap#compute(K, BiFunction)->V:::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.
java.util.HashMap#merge(K, V, BiFunction)->V:::This method will, on a best-effort basis, throw a {@link ConcurrentModificationException if it is detected that the remapping function modifies this map during computation.
java.util.HashMap#forEach(BiConsumer)->void::: hash map for each
java.util.HashMap#replaceAll(BiFunction)->void::: hash map replace all
java.util.HashMap#clone()->Object:::Returns a shallow copy of this HashMap instance: the keys and values themselves are not cloned.
java.util.HashMap#loadFactor()->float::: hash map load factor
java.util.HashMap#capacity()->int::: hash map capacity
java.util.HashMap.HashIterator#hasNext()->boolean::: hash iterator has next
java.util.HashMap.HashIterator#nextNode()->Node::: hash iterator next node
java.util.HashMap.HashIterator#remove()->void::: hash iterator remove
java.util.HashMap.KeyIterator#next()->K::: key iterator next
java.util.HashMap.ValueIterator#next()->V::: value iterator next
java.util.HashMap.EntryIterator#next()->Map.Entry::: entry iterator next
java.util.HashMap.HashMapSpliterator#getFence()->int::: hash map spliterator get fence
java.util.HashMap.HashMapSpliterator#estimateSize()->long::: hash map spliterator estimate size
java.util.HashMap.KeySpliterator#trySplit()->KeySpliterator::: key spliterator try split
java.util.HashMap.KeySpliterator#forEachRemaining(Consumer)->void::: key spliterator for each remaining
java.util.HashMap.KeySpliterator#tryAdvance(Consumer)->boolean::: key spliterator try advance
java.util.HashMap.KeySpliterator#characteristics()->int::: key spliterator characteristics
java.util.HashMap.ValueSpliterator#trySplit()->ValueSpliterator::: value spliterator try split
java.util.HashMap.ValueSpliterator#forEachRemaining(Consumer)->void::: value spliterator for each remaining
java.util.HashMap.ValueSpliterator#tryAdvance(Consumer)->boolean::: value spliterator try advance
java.util.HashMap.ValueSpliterator#characteristics()->int::: value spliterator characteristics
java.util.HashMap.EntrySpliterator#trySpliterator trySplit()->En::: entry spliterator try split
java.util.HashMap.EntrySpliterator#forEachRemaining(Consumer>)->void::: entry spliterator for each remaining
java.util.HashMap.EntrySpliterator#tryAdvance(Consumer>)->boolean::: entry spliterator try advance
java.util.HashMap.EntrySpliterator#characteristics()->int::: entry spliterator characteristics
java.util.HashMap#newNode(int, K, V, Node)->Node::: hash map new node
java.util.HashMap#replacementNode(Node, Node)->Node::: hash map replacement node
java.util.HashMap#newTreeNode(int, K, V, Node)->TreeNode::: hash map new tree node
java.util.HashMap#replacementTreeNode(Node, Node)->TreeNode::: hash map replacement tree node
java.util.HashMap#reinitialize()->void:::Reset to initial default state
java.util.HashMap#afterNodeAccess(Node)->void::: hash map after node access
java.util.HashMap#afterNodeInsertion(boolean)->void::: hash map after node insertion
java.util.HashMap#afterNodeRemoval(Node)->void::: hash map after node removal
java.util.HashMap#internalWriteEntries(java.io.ObjectOutputStream)->void::: hash map internal write entries
java.util.HashMap.TreeNode#root()->TreeNode:::Returns root of tree containing this node.
java.util.HashMap.TreeNode#moveRootToFront(Node[], TreeNode)->void:::Ensures that the given root is the first node of its bin.
java.util.HashMap.TreeNode#find(int, Object, Class)->TreeNode:::Finds the node starting at root p with the given hash and key
java.util.HashMap.TreeNode#getTreeNode(int, Object)->TreeNode:::Calls find for root node.
java.util.HashMap.TreeNode#tieBreakOrder(Object, Object)->int:::Tie-breaking utility for ordering insertions when equal hashCodes and non-comparable
java.util.HashMap.TreeNode#treeify(Node[])->void:::Forms tree of the nodes linked from this node.
java.util.HashMap.TreeNode#untreeify(HashMap)->Node:::Returns a list of non-TreeNodes replacing those linked from this node.
java.util.HashMap.TreeNode#putTreeVal(HashMap, Node[], int, K, V)->TreeNode:::Tree version of putVal.
java.util.HashMap.TreeNode#removeTreeNode(HashMap, Node[], boolean)->void:::Removes the given node, that must be present before this call
java.util.HashMap.TreeNode#split(HashMap, Node[], int, int)->void:::Splits nodes in a tree bin into lower and upper tree bins, or untreeifies if now too small
java.util.HashMap.TreeNode#rotateLeft(TreeNode, TreeNode)->TreeNode::: tree node rotate left
java.util.HashMap.TreeNode#rotateRight(TreeNode, TreeNode)->TreeNode::: tree node rotate right
java.util.HashMap.TreeNode#balanceInsertion(TreeNode, TreeNode)->TreeNode::: tree node balance insertion
java.util.HashMap.TreeNode#balanceDeletion(TreeNode, TreeNode)->TreeNode::: tree node balance deletion
java.util.HashMap.TreeNode#checkInvariants(TreeNode)->boolean:::Recursive invariant check
java.util.HashSet#iterator()->Iterator:::Returns an iterator over the elements in this set
java.util.HashSet#size()->int:::Returns the number of elements in this set (its cardinality).
java.util.HashSet#isEmpty()->boolean:::Returns true if this set contains no elements.
java.util.HashSet#contains(Object)->boolean:::Returns true if this set contains the specified element
java.util.HashSet#add(E)->boolean:::Adds the specified element to this set if it is not already present
java.util.HashSet#remove(Object)->boolean:::Removes the specified element from this set if it is present
java.util.HashSet#clear()->void:::Removes all of the elements from this set
java.util.HashSet#clone()->Object:::Returns a shallow copy of this HashSet instance: the elements themselves are not cloned.
java.util.HashSet#spliterator()->Spliterator:::Creates a late-binding and fail-fast Spliterator over the elements in this set
java.util.Hashtable#size()->int:::Returns the number of keys in this hashtable.
java.util.Hashtable#isEmpty()->boolean:::Tests if this hashtable maps no keys to values.
java.util.Hashtable#keys()->Enumeration:::Returns an enumeration of the keys in this hashtable
java.util.Hashtable#elements()->Enumeration:::Returns an enumeration of the values in this hashtable
java.util.Hashtable#contains(Object)->boolean:::Tests if some key maps into the specified value in this hashtable
java.util.Hashtable#containsValue(Object)->boolean:::Returns true if this hashtable maps one or more keys to this value
java.util.Hashtable#containsKey(Object)->boolean:::Tests if the specified object is a key in this hashtable.
java.util.Hashtable#get(Object)->V:::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
java.util.Hashtable#rehash()->void:::Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently
java.util.Hashtable#put(K, V)->V:::Maps the specified key to the specified value in this hashtable
java.util.Hashtable#remove(Object)->V:::Removes the key (and its corresponding value) from this hashtable
java.util.Hashtable#putAll(Map)->void:::Copies all of the mappings from the specified map to this hashtable
java.util.Hashtable#clear()->void:::Clears this hashtable so that it contains no keys.
java.util.Hashtable#clone()->Object:::Creates a shallow copy of this hashtable
java.util.Hashtable#cloneHashtable()->Hashtable:::Calls super.clone()
java.util.Hashtable#toString()->String:::Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters " ,&nbsp;" (comma and space)
java.util.Hashtable#keySet()->Set:::Returns a Set view of the keys contained in this map
java.util.Hashtable#entrySet()->Set>:::Returns a Set view of the mappings contained in this map
java.util.Hashtable#values()->Collection:::Returns a Collection view of the values contained in this map
java.util.Hashtable#equals(Object)->boolean:::Compares the specified Object with this Map for equality, as per the definition in the Map interface.
java.util.Hashtable#hashCode()->int:::Returns the hash code value for this Map as per the definition in the Map interface.
java.util.Hashtable#getOrDefault(Object, V)->V::: hashtable get or default
java.util.Hashtable#forEach(BiConsumer)->void::: hashtable for each
java.util.Hashtable#replaceAll(BiFunction)->void::: hashtable replace all
java.util.Hashtable#putIfAbsent(K, V)->V::: hashtable put if absent
java.util.Hashtable#remove(Object, Object)->boolean::: hashtable remove
java.util.Hashtable#replace(K, V, V)->boolean::: hashtable replace
java.util.Hashtable#replace(K, V)->V::: hashtable replace
java.util.Hashtable#computeIfAbsent(K, Function)->V:::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the mapping function modified this map during computation.
java.util.Hashtable#computeIfPresent(K, BiFunction)->V:::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.
java.util.Hashtable#compute(K, BiFunction)->V:::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.
java.util.Hashtable#merge(K, V, BiFunction)->V:::This method will, on a best-effort basis, throw a {@link java.util.ConcurrentModificationException if the remapping function modified this map during computation.
java.util.Hashtable#writeHashtable(java.io.ObjectOutputStream)->void:::Perform serialization of the Hashtable to an ObjectOutputStream
java.util.Hashtable#defaultWriteHashtable(java.io.ObjectOutputStream, int, float)->void:::Called by Properties to write out a simulated threshold and loadfactor.
java.util.Hashtable#readHashtable(java.io.ObjectInputStream)->void:::Perform deserialization of the Hashtable from an ObjectInputStream
java.util.IdentityHashMap#unmaskNull(Object)->Object:::Returns internal representation of null key back to caller as null.
java.util.IdentityHashMap#size()->int:::Returns the number of key-value mappings in this identity hash map.
java.util.IdentityHashMap#isEmpty()->boolean:::Returns true if this identity hash map contains no key-value mappings.
java.util.IdentityHashMap#get(Object)->V:::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
java.util.IdentityHashMap#containsKey(Object)->boolean:::Tests whether the specified object reference is a key in this identity hash map.
java.util.IdentityHashMap#containsValue(Object)->boolean:::Tests whether the specified object reference is a value in this identity hash map.
java.util.IdentityHashMap#put(K, V)->V:::Associates the specified value with the specified key in this identity hash map
java.util.IdentityHashMap#putAll(Map)->void:::Copies all of the mappings from the specified map to this map
java.util.IdentityHashMap#remove(Object)->V:::Removes the mapping for this key from this map if present.
java.util.IdentityHashMap#clear()->void:::Removes all of the mappings from this map
java.util.IdentityHashMap#equals(Object)->boolean:::Compares the specified object with this map for equality
java.util.IdentityHashMap#hashCode()->int:::Returns the hash code value for this map
java.util.IdentityHashMap#clone()->Object:::Returns a shallow copy of this identity hash map: the keys and values themselves are not cloned.
java.util.IdentityHashMap#keySet()->Set:::Returns an identity-based set view of the keys contained in this map
java.util.IdentityHashMap#values()->Collection:::Returns a Collection view of the values contained in this map
java.util.IdentityHashMap#entrySet()->Set>:::Returns a Set view of the mappings contained in this map
java.util.IdentityHashMap#forEach(BiConsumer)->void::: identity hash map for each
java.util.IdentityHashMap#replaceAll(BiFunction)->void::: identity hash map replace all
java.util.IdentityHashMap.IdentityHashMapSpliterator#getFence()->int::: identity hash map spliterator get fence
java.util.IdentityHashMap.IdentityHashMapSpliterator#estimateSize()->long::: identity hash map spliterator estimate size
java.util.IdentityHashMap.KeySpliterator#trySplit()->KeySpliterator::: key spliterator try split
java.util.IdentityHashMap.KeySpliterator#forEachRemaining(Consumer)->void::: key spliterator for each remaining
java.util.IdentityHashMap.KeySpliterator#tryAdvance(Consumer)->boolean::: key spliterator try advance
java.util.IdentityHashMap.KeySpliterator#characteristics()->int::: key spliterator characteristics
java.util.IdentityHashMap.ValueSpliterator#trySplit()->ValueSpliterator::: value spliterator try split
java.util.IdentityHashMap.ValueSpliterator#forEachRemaining(Consumer)->void::: value spliterator for each remaining
java.util.IdentityHashMap.ValueSpliterator#tryAdvance(Consumer)->boolean::: value spliterator try advance
java.util.IdentityHashMap.ValueSpliterator#characteristics()->int::: value spliterator characteristics
java.util.IdentityHashMap.EntrySpliterator#trySpliterator trySplit()->En::: entry spliterator try split
java.util.IdentityHashMap.EntrySpliterator#forEachRemaining(Consumer>)->void::: entry spliterator for each remaining
java.util.IdentityHashMap.EntrySpliterator#tryAdvance(Consumer>)->boolean::: entry spliterator try advance
java.util.IdentityHashMap.EntrySpliterator#characteristics()->int::: entry spliterator characteristics
java.util.IllegalFormatCodePointException#getCodePoint()->int:::Returns the illegal code point as defined by Character#isValidCodePoint.
java.util.IllegalFormatCodePointException#getMessage()->String::: illegal format code point exception get message
java.util.IllegalFormatConversionException#getConversion()->char:::Returns the inapplicable conversion.
java.util.IllegalFormatConversionException#getArgumentClass()->Class:::Returns the class of the mismatched argument.
java.util.IllegalFormatConversionException#getMessage()->String::: illegal format conversion exception get message
java.util.IllegalFormatFlagsException#getFlags()->String:::Returns the set of flags which contains an illegal combination.
java.util.IllegalFormatFlagsException#getMessage()->String::: illegal format flags exception get message
java.util.IllegalFormatPrecisionException#getPrecision()->int:::Returns the precision
java.util.IllegalFormatPrecisionException#getMessage()->String::: illegal format precision exception get message
java.util.IllegalFormatWidthException#getWidth()->int:::Returns the width
java.util.IllegalFormatWidthException#getMessage()->String::: illegal format width exception get message
java.util.IllformedLocaleException#getErrorIndex()->int:::Returns the index where the error was found
java.util.ImmutableCollections#uoe()->UnsupportedOperationException::: immutable collections uoe
java.util.ImmutableCollections.AbstractImmutableCollection#add(E)->boolean::: abstract immutable collection add
java.util.ImmutableCollections.AbstractImmutableCollection#addAll(Collection)->boolean::: abstract immutable collection add all
java.util.ImmutableCollections.AbstractImmutableCollection#clear()->void::: abstract immutable collection clear
java.util.ImmutableCollections.AbstractImmutableCollection#remove(Object)->boolean::: abstract immutable collection remove
java.util.ImmutableCollections.AbstractImmutableCollection#removeAll(Collection)->boolean::: abstract immutable collection remove all
java.util.ImmutableCollections.AbstractImmutableCollection#removeIf(Predicate)->boolean::: abstract immutable collection remove if
java.util.ImmutableCollections.AbstractImmutableCollection#retainAll(Collection)->boolean::: abstract immutable collection retain all
java.util.ImmutableCollections#listCopy(Collection)->List::: immutable collections list copy
java.util.ImmutableCollections#emptyList()->List::: immutable collections empty list
java.util.ImmutableCollections.AbstractImmutableList#add(int, E)->void::: abstract immutable list add
java.util.ImmutableCollections.AbstractImmutableList#addAll(int, Collection)->boolean::: abstract immutable list add all
java.util.ImmutableCollections.AbstractImmutableList#remove(int)->E::: abstract immutable list remove
java.util.ImmutableCollections.AbstractImmutableList#replaceAll(UnaryOperator)->void::: abstract immutable list replace all
java.util.ImmutableCollections.AbstractImmutableList#set(int, E)->E::: abstract immutable list set
java.util.ImmutableCollections.AbstractImmutableList#sort(Comparator)->void::: abstract immutable list sort
java.util.ImmutableCollections.AbstractImmutableList#subList(int, int)->List::: abstract immutable list sub list
java.util.ImmutableCollections.AbstractImmutableList#subListRangeCheck(int, int, int)->void::: abstract immutable list sub list range check
java.util.ImmutableCollections.AbstractImmutableList#iterator()->Iterator::: abstract immutable list iterator
java.util.ImmutableCollections.AbstractImmutableList#listIterator()->ListIterator::: abstract immutable list list iterator
java.util.ImmutableCollections.AbstractImmutableList#listIterator(int)->ListIterator::: abstract immutable list list iterator
java.util.ImmutableCollections.AbstractImmutableList#equals(Object)->boolean::: abstract immutable list equals
java.util.ImmutableCollections.AbstractImmutableList#indexOf(Object)->int::: abstract immutable list index of
java.util.ImmutableCollections.AbstractImmutableList#lastIndexOf(Object)->int::: abstract immutable list last index of
java.util.ImmutableCollections.AbstractImmutableList#hashCode()->int::: abstract immutable list hash code
java.util.ImmutableCollections.AbstractImmutableList#contains(Object)->boolean::: abstract immutable list contains
java.util.ImmutableCollections.AbstractImmutableList#outOfBounds(int)->IndexOutOfBoundsException::: abstract immutable list out of bounds
java.util.ImmutableCollections.ListItr#hasNext()->boolean::: list itr has next
java.util.ImmutableCollections.ListItr#next()->E::: list itr next
java.util.ImmutableCollections.ListItr#remove()->void::: list itr remove
java.util.ImmutableCollections.ListItr#hasPrevious()->boolean::: list itr has previous
java.util.ImmutableCollections.ListItr#previous()->E::: list itr previous
java.util.ImmutableCollections.ListItr#nextIndex()->int::: list itr next index
java.util.ImmutableCollections.ListItr#previousIndex()->int::: list itr previous index
java.util.ImmutableCollections.ListItr#set(E)->void::: list itr set
java.util.ImmutableCollections.ListItr#add(E)->void::: list itr add
java.util.ImmutableCollections.SubList#fromSubList(SubList, int, int)->SubList:::Constructs a sublist of another SubList.
java.util.ImmutableCollections.SubList#fromList(List, int, int)->SubList:::Constructs a sublist of an arbitrary AbstractImmutableList, which is not a SubList itself.
java.util.ImmutableCollections.SubList#get(int)->E::: sub list get
java.util.ImmutableCollections.SubList#size()->int::: sub list size
java.util.ImmutableCollections.SubList#iterator()->Iterator::: sub list iterator
java.util.ImmutableCollections.SubList#listIterator(int)->ListIterator::: sub list list iterator
java.util.ImmutableCollections.SubList#subList(int, int)->List::: sub list sub list
java.util.ImmutableCollections.List12#size()->int::: list12 size
java.util.ImmutableCollections.List12#get(int)->E::: list12 get
java.util.ImmutableCollections.ListN#isEmpty()->boolean::: list n is empty
java.util.ImmutableCollections.ListN#size()->int::: list n size
java.util.ImmutableCollections.ListN#get(int)->E::: list n get
java.util.ImmutableCollections.AbstractImmutableSet#equals(Object)->boolean::: abstract immutable set equals
java.util.ImmutableCollections.AbstractImmutableSet#hashCode()->int::: abstract immutable set hash code
java.util.ImmutableCollections#emptySet()->Set::: immutable collections empty set
java.util.ImmutableCollections.Set12#size()->int::: set12 size
java.util.ImmutableCollections.Set12#contains(Object)->boolean::: set12 contains
java.util.ImmutableCollections.Set12#hashCode()->int::: set12 hash code
java.util.ImmutableCollections.Set12#iterator()->Iterator::: set12 iterator
java.util.ImmutableCollections.SetN#size()->int::: set n size
java.util.ImmutableCollections.SetN#contains(Object)->boolean::: set n contains
java.util.ImmutableCollections.SetN#iterator()->Iterator::: set n iterator
java.util.ImmutableCollections.SetN#hashCode()->int::: set n hash code
java.util.ImmutableCollections#emptyMap()->Map::: immutable collections empty map
java.util.ImmutableCollections.AbstractImmutableMap#clear()->void::: abstract immutable map clear
java.util.ImmutableCollections.AbstractImmutableMap#compute(K, BiFunction)->V::: abstract immutable map compute
java.util.ImmutableCollections.AbstractImmutableMap#computeIfAbsent(K, Function)->V::: abstract immutable map compute if absent
java.util.ImmutableCollections.AbstractImmutableMap#computeIfPresent(K, BiFunction)->V::: abstract immutable map compute if present
java.util.ImmutableCollections.AbstractImmutableMap#merge(K, V, BiFunction)->V::: abstract immutable map merge
java.util.ImmutableCollections.AbstractImmutableMap#put(K, V)->V::: abstract immutable map put
java.util.ImmutableCollections.AbstractImmutableMap#putAll(Map)->void::: abstract immutable map put all
java.util.ImmutableCollections.AbstractImmutableMap#putIfAbsent(K, V)->V::: abstract immutable map put if absent
java.util.ImmutableCollections.AbstractImmutableMap#remove(Object)->V::: abstract immutable map remove
java.util.ImmutableCollections.AbstractImmutableMap#remove(Object, Object)->boolean::: abstract immutable map remove
java.util.ImmutableCollections.AbstractImmutableMap#replace(K, V)->V::: abstract immutable map replace
java.util.ImmutableCollections.AbstractImmutableMap#replace(K, V, V)->boolean::: abstract immutable map replace
java.util.ImmutableCollections.AbstractImmutableMap#replaceAll(BiFunction)->void::: abstract immutable map replace all
java.util.ImmutableCollections.Map1#entrySet()->Set>::: map1 entry set
java.util.ImmutableCollections.Map1#get(Object)->V::: map1 get
java.util.ImmutableCollections.Map1#containsKey(Object)->boolean::: map1 contains key
java.util.ImmutableCollections.Map1#containsValue(Object)->boolean::: map1 contains value
java.util.ImmutableCollections.Map1#hashCode()->int::: map1 hash code
java.util.ImmutableCollections.MapN#containsKey(Object)->boolean::: map n contains key
java.util.ImmutableCollections.MapN#containsValue(Object)->boolean::: map n contains value
java.util.ImmutableCollections.MapN#hashCode()->int::: map n hash code
java.util.ImmutableCollections.MapN#get(Object)->V::: map n get
java.util.ImmutableCollections.MapN#size()->int::: map n size
java.util.ImmutableCollections.MapN.MapNIterator#hasNext()->boolean::: map iterator has next
java.util.ImmutableCollections.MapN.MapNIterator#next()->Map.Entry::: map iterator next
java.util.ImmutableCollections.MapN#entrySet()->Set>::: map n entry set
java.util.IntSummaryStatistics#accept(int)->void:::Records a new value into the summary information
java.util.IntSummaryStatistics#combine(IntSummaryStatistics)->void:::Combines the state of another IntSummaryStatistics into this one.
java.util.IntSummaryStatistics#getCount()->long:::Returns the count of values recorded.
java.util.IntSummaryStatistics#getSum()->long:::Returns the sum of values recorded, or zero if no values have been recorded.
java.util.IntSummaryStatistics#getMin()->int:::Returns the minimum value recorded, or Integer.MAX_VALUE if no values have been recorded.
java.util.IntSummaryStatistics#getMax()->int:::Returns the maximum value recorded, or Integer.MIN_VALUE if no values have been recorded.
java.util.IntSummaryStatistics#getAverage()->double:::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.
java.util.IntSummaryStatistics#toString()->String:::Returns a non-empty string representation of this object suitable for debugging
java.util.Iterator#hasNext()->boolean:::Returns true if the iteration has more elements
java.util.Iterator#next()->E:::Returns the next element in the iteration.
java.util.Iterator#remove()->void:::Removes from the underlying collection the last element returned by this iterator (optional operation)
java.util.Iterator#forEachRemaining(Consumer)->void:::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
java.util.JapaneseImperialCalendar#getCalendarType()->String:::Returns "japanese" as the calendar type of this JapaneseImperialCalendar.
java.util.JapaneseImperialCalendar#equals(Object)->boolean:::Compares this JapaneseImperialCalendar to the specified Object
java.util.JapaneseImperialCalendar#hashCode()->int:::Generates the hash code for this JapaneseImperialCalendar object.
java.util.JapaneseImperialCalendar#add(int, int)->void:::Adds the specified (signed) amount of time to the given calendar field, based on the calendar's rules
java.util.JapaneseImperialCalendar#roll(int, boolean)->void::: japanese imperial calendar roll
java.util.JapaneseImperialCalendar#roll(int, int)->void:::Adds a signed amount to the specified calendar field without changing larger fields
java.util.JapaneseImperialCalendar#getDisplayName(int, int, Locale)->String::: japanese imperial calendar get display name
java.util.JapaneseImperialCalendar#getDisplayNames(int, int, Locale)->Map::: japanese imperial calendar get display names
java.util.JapaneseImperialCalendar#getMinimum(int)->int:::Returns the minimum value for the given calendar field of this Calendar instance
java.util.JapaneseImperialCalendar#getMaximum(int)->int:::Returns the maximum value for the given calendar field of this GregorianCalendar instance
java.util.JapaneseImperialCalendar#getGreatestMinimum(int)->int:::Returns the highest minimum value for the given calendar field of this GregorianCalendar instance
java.util.JapaneseImperialCalendar#getLeastMaximum(int)->int:::Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance
java.util.JapaneseImperialCalendar#getActualMinimum(int)->int:::Returns the minimum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods.
java.util.JapaneseImperialCalendar#getActualMaximum(int)->int:::Returns the maximum value that this calendar field could have, taking into consideration the given time value and the current values of the Calendar#getFirstDayOfWeek() getFirstDayOfWeek, Calendar#getMinimalDaysInFirstWeek() getMinimalDaysInFirstWeek, and Calendar#getTimeZone() getTimeZone methods
java.util.JapaneseImperialCalendar#clone()->Object::: japanese imperial calendar clone
java.util.JapaneseImperialCalendar#getTimeZone()->TimeZone::: japanese imperial calendar get time zone
java.util.JapaneseImperialCalendar#setTimeZone(TimeZone)->void::: japanese imperial calendar set time zone
java.util.JapaneseImperialCalendar#computeFields()->void:::Converts the time value (millisecond offset from the Epoch) to calendar field values
java.util.JapaneseImperialCalendar#computeTime()->void:::Converts calendar field values to the time value (millisecond offset from the Epoch).
java.util.JumboEnumSet#addRange(E, E)->void::: jumbo enum set add range
java.util.JumboEnumSet#addAll()->void::: jumbo enum set add all
java.util.JumboEnumSet#complement()->void::: jumbo enum set complement
java.util.JumboEnumSet#iterator()->Iterator:::Returns an iterator over the elements contained in this set
java.util.JumboEnumSet#size()->int:::Returns the number of elements in this set.
java.util.JumboEnumSet#isEmpty()->boolean:::Returns true if this set contains no elements.
java.util.JumboEnumSet#contains(Object)->boolean:::Returns true if this set contains the specified element.
java.util.JumboEnumSet#add(E)->boolean:::Adds the specified element to this set if it is not already present.
java.util.JumboEnumSet#remove(Object)->boolean:::Removes the specified element from this set if it is present.
java.util.JumboEnumSet#containsAll(Collection)->boolean:::Returns true if this set contains all of the elements in the specified collection.
java.util.JumboEnumSet#addAll(Collection)->boolean:::Adds all of the elements in the specified collection to this set.
java.util.JumboEnumSet#removeAll(Collection)->boolean:::Removes from this set all of its elements that are contained in the specified collection.
java.util.JumboEnumSet#retainAll(Collection)->boolean:::Retains only the elements in this set that are contained in the specified collection.
java.util.JumboEnumSet#clear()->void:::Removes all of the elements from this set.
java.util.JumboEnumSet#equals(Object)->boolean:::Compares the specified object with this set for equality
java.util.JumboEnumSet#clone()->EnumSet::: jumbo enum set clone
java.util.KeyValueHolder#getKey()->K:::Gets the key from this holder.
java.util.KeyValueHolder#getValue()->V:::Gets the value from this holder.
java.util.KeyValueHolder#setValue(V)->V:::Throws UnsupportedOperationException.
java.util.KeyValueHolder#equals(Object)->boolean:::Compares the specified object with this entry for equality
java.util.KeyValueHolder#hashCode()->int:::Returns the hash code value for this map entry
java.util.KeyValueHolder#toString()->String:::Returns a String representation of this map entry
java.util.LinkedHashMap#reinitialize()->void::: linked hash map reinitialize
java.util.LinkedHashMap#newNode(int, K, V, Node)->Node::: linked hash map new node
java.util.LinkedHashMap#replacementNode(Node, Node)->Node::: linked hash map replacement node
java.util.LinkedHashMap#newTreeNode(int, K, V, Node)->TreeNode::: linked hash map new tree node
java.util.LinkedHashMap#replacementTreeNode(Node, Node)->TreeNode::: linked hash map replacement tree node
java.util.LinkedHashMap#afterNodeRemoval(Node)->void::: linked hash map after node removal
java.util.LinkedHashMap#afterNodeInsertion(boolean)->void::: linked hash map after node insertion
java.util.LinkedHashMap#afterNodeAccess(Node)->void::: linked hash map after node access
java.util.LinkedHashMap#internalWriteEntries(java.io.ObjectOutputStream)->void::: linked hash map internal write entries
java.util.LinkedHashMap#containsValue(Object)->boolean:::Returns true if this map maps one or more keys to the specified value.
java.util.LinkedHashMap#get(Object)->V:::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
java.util.LinkedHashMap#getOrDefault(Object, V)->V::: linked hash map get or default
java.util.LinkedHashMap#clear()->void::: linked hash map clear
java.util.LinkedHashMap#removeEldestEntry(Map.Entry)->boolean:::Returns true if this map should remove its eldest entry
java.util.LinkedHashMap#keySet()->Set:::Returns a Set view of the keys contained in this map
java.util.LinkedHashMap.LinkedKeySet#size()->int::: linked key set size
java.util.LinkedHashMap.LinkedKeySet#clear()->void::: linked key set clear
java.util.LinkedHashMap.LinkedKeySet#iterator()->Iterator::: linked key set iterator
java.util.LinkedHashMap.LinkedKeySet#contains(Object)->boolean::: linked key set contains
java.util.LinkedHashMap.LinkedKeySet#remove(Object)->boolean::: linked key set remove
java.util.LinkedHashMap.LinkedKeySet#spliterator()->Spliterator::: linked key set spliterator
java.util.LinkedHashMap.LinkedKeySet#forEach(Consumer)->void::: linked key set for each
java.util.LinkedHashMap#values()->Collection:::Returns a Collection view of the values contained in this map
java.util.LinkedHashMap.LinkedValues#size()->int::: linked values size
java.util.LinkedHashMap.LinkedValues#clear()->void::: linked values clear
java.util.LinkedHashMap.LinkedValues#iterator()->Iterator::: linked values iterator
java.util.LinkedHashMap.LinkedValues#contains(Object)->boolean::: linked values contains
java.util.LinkedHashMap.LinkedValues#spliterator()->Spliterator::: linked values spliterator
java.util.LinkedHashMap.LinkedValues#forEach(Consumer)->void::: linked values for each
java.util.LinkedHashMap#entrySet()->Set>:::Returns a Set view of the mappings contained in this map
java.util.LinkedHashMap.LinkedEntrySet#size()->int::: linked entry set size
java.util.LinkedHashMap.LinkedEntrySet#clear()->void::: linked entry set clear
java.util.LinkedHashMap.LinkedEntrySet#iterator()->Iterator>::: linked entry set iterator
java.util.LinkedHashMap.LinkedEntrySet#contains(Object)->boolean::: linked entry set contains
java.util.LinkedHashMap.LinkedEntrySet#remove(Object)->boolean::: linked entry set remove
java.util.LinkedHashMap.LinkedEntrySet#spliterator()->Spliterator>::: linked entry set spliterator
java.util.LinkedHashMap.LinkedEntrySet#forEach(Consumer>)->void::: linked entry set for each
java.util.LinkedHashMap#forEach(BiConsumer)->void::: linked hash map for each
java.util.LinkedHashMap#replaceAll(BiFunction)->void::: linked hash map replace all
java.util.LinkedHashMap.LinkedHashIterator#hasNext()->boolean::: linked hash iterator has next
java.util.LinkedHashMap.LinkedHashIterator#nextNode()->LinkedHashMap.Entry::: linked hash iterator next node
java.util.LinkedHashMap.LinkedHashIterator#remove()->void::: linked hash iterator remove
java.util.LinkedHashMap.LinkedKeyIterator#next()->K::: linked key iterator next
java.util.LinkedHashMap.LinkedValueIterator#next()->V::: linked value iterator next
java.util.LinkedHashMap.LinkedEntryIterator#next()->Map.Entry::: linked entry iterator next
java.util.LinkedHashSet#spliterator()->Spliterator:::Creates a late-binding and fail-fast Spliterator over the elements in this set
java.util.LinkedList#linkLast(E)->void:::Links e as last element.
java.util.LinkedList#linkBefore(E, Node)->void:::Inserts element e before non-null Node succ.
java.util.LinkedList#unlink(Node)->E:::Unlinks non-null node x.
java.util.LinkedList#getFirst()->E:::Returns the first element in this list.
java.util.LinkedList#getLast()->E:::Returns the last element in this list.
java.util.LinkedList#removeFirst()->E:::Removes and returns the first element from this list.
java.util.LinkedList#removeLast()->E:::Removes and returns the last element from this list.
java.util.LinkedList#addFirst(E)->void:::Inserts the specified element at the beginning of this list.
java.util.LinkedList#addLast(E)->void:::Appends the specified element to the end of this list
java.util.LinkedList#contains(Object)->boolean:::Returns true if this list contains the specified element
java.util.LinkedList#size()->int:::Returns the number of elements in this list.
java.util.LinkedList#add(E)->boolean:::Appends the specified element to the end of this list
java.util.LinkedList#remove(Object)->boolean:::Removes the first occurrence of the specified element from this list, if it is present
java.util.LinkedList#addAll(Collection)->boolean:::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator
java.util.LinkedList#addAll(int, Collection)->boolean:::Inserts all of the elements in the specified collection into this list, starting at the specified position
java.util.LinkedList#clear()->void:::Removes all of the elements from this list
java.util.LinkedList#get(int)->E:::Returns the element at the specified position in this list.
java.util.LinkedList#set(int, E)->E:::Replaces the element at the specified position in this list with the specified element.
java.util.LinkedList#add(int, E)->void:::Inserts the specified element at the specified position in this list
java.util.LinkedList#remove(int)->E:::Removes the element at the specified position in this list
java.util.LinkedList#node(int)->Node:::Returns the (non-null) Node at the specified element index.
java.util.LinkedList#indexOf(Object)->int:::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
java.util.LinkedList#lastIndexOf(Object)->int:::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
java.util.LinkedList#peek()->E:::Retrieves, but does not remove, the head (first element) of this list.
java.util.LinkedList#element()->E:::Retrieves, but does not remove, the head (first element) of this list.
java.util.LinkedList#poll()->E:::Retrieves and removes the head (first element) of this list.
java.util.LinkedList#remove()->E:::Retrieves and removes the head (first element) of this list.
java.util.LinkedList#offer(E)->boolean:::Adds the specified element as the tail (last element) of this list.
java.util.LinkedList#offerFirst(E)->boolean:::Inserts the specified element at the front of this list.
java.util.LinkedList#offerLast(E)->boolean:::Inserts the specified element at the end of this list.
java.util.LinkedList#peekFirst()->E:::Retrieves, but does not remove, the first element of this list, or returns null if this list is empty.
java.util.LinkedList#peekLast()->E:::Retrieves, but does not remove, the last element of this list, or returns null if this list is empty.
java.util.LinkedList#pollFirst()->E:::Retrieves and removes the first element of this list, or returns null if this list is empty.
java.util.LinkedList#pollLast()->E:::Retrieves and removes the last element of this list, or returns null if this list is empty.
java.util.LinkedList#push(E)->void:::Pushes an element onto the stack represented by this list
java.util.LinkedList#pop()->E:::Pops an element from the stack represented by this list
java.util.LinkedList#removeFirstOccurrence(Object)->boolean:::Removes the first occurrence of the specified element in this list (when traversing the list from head to tail)
java.util.LinkedList#removeLastOccurrence(Object)->boolean:::Removes the last occurrence of the specified element in this list (when traversing the list from head to tail)
java.util.LinkedList#listIterator(int)->ListIterator:::Returns a list-iterator of the elements in this list (in proper sequence), starting at the specified position in the list
java.util.LinkedList#descendingIterator()->Iterator::: linked list descending iterator
java.util.LinkedList#clone()->Object:::Returns a shallow copy of this LinkedList
java.util.LinkedList#toArray()->Object[]:::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
java.util.LinkedList#toArray(T[])->T[]:::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
java.util.LinkedList#spliterator()->Spliterator:::Creates a late-binding and fail-fast Spliterator over the elements in this list
java.util.LinkedList.LLSpliterator#getEst()->int::: spliterator get est
java.util.LinkedList.LLSpliterator#estimateSize()->long::: spliterator estimate size
java.util.LinkedList.LLSpliterator#trySplit()->Spliterator::: spliterator try split
java.util.LinkedList.LLSpliterator#forEachRemaining(Consumer)->void::: spliterator for each remaining
java.util.LinkedList.LLSpliterator#tryAdvance(Consumer)->boolean::: spliterator try advance
java.util.LinkedList.LLSpliterator#characteristics()->int::: spliterator characteristics
java.util.List#size()->int:::Returns the number of elements in this list
java.util.List#isEmpty()->boolean:::Returns true if this list contains no elements.
java.util.List#contains(Object)->boolean:::Returns true if this list contains the specified element
java.util.List#iterator()->Iterator:::Returns an iterator over the elements in this list in proper sequence.
java.util.List#toArray()->Object[]:::Returns an array containing all of the elements in this list in proper sequence (from first to last element)
java.util.List#toArray(T[])->T[]:::Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array
java.util.List#add(E)->boolean:::Appends the specified element to the end of this list (optional operation)
java.util.List#remove(Object)->boolean:::Removes the first occurrence of the specified element from this list, if it is present (optional operation)
java.util.List#containsAll(Collection)->boolean:::Returns true if this list contains all of the elements of the specified collection.
java.util.List#addAll(Collection)->boolean:::Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation)
java.util.List#addAll(int, Collection)->boolean:::Inserts all of the elements in the specified collection into this list at the specified position (optional operation)
java.util.List#removeAll(Collection)->boolean:::Removes from this list all of its elements that are contained in the specified collection (optional operation).
java.util.List#retainAll(Collection)->boolean:::Retains only the elements in this list that are contained in the specified collection (optional operation)
java.util.List#replaceAll(UnaryOperator)->void:::Replaces each element of this list with the result of applying the operator to that element
java.util.List#sort(Comparator)->void:::Sorts this list according to the order induced by the specified Comparator
java.util.List#clear()->void:::Removes all of the elements from this list (optional operation)
java.util.List#equals(Object)->boolean:::Compares the specified object with this list for equality
java.util.List#hashCode()->int:::Returns the hash code value for this list
java.util.List#get(int)->E:::Returns the element at the specified position in this list.
java.util.List#set(int, E)->E:::Replaces the element at the specified position in this list with the specified element (optional operation).
java.util.List#add(int, E)->void:::Inserts the specified element at the specified position in this list (optional operation)
java.util.List#remove(int)->E:::Removes the element at the specified position in this list (optional operation)
java.util.List#indexOf(Object)->int:::Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element
java.util.List#lastIndexOf(Object)->int:::Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element
java.util.List#listIterator()->ListIterator:::Returns a list iterator over the elements in this list (in proper sequence).
java.util.List#listIterator(int)->ListIterator:::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
java.util.List#subList(int, int)->List:::Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive
java.util.List#spliterator()->Spliterator:::Creates a Spliterator over the elements in this list
java.util.List#of()->List:::Returns an unmodifiable list containing zero elements
java.util.List#of(E)->List:::Returns an unmodifiable list containing one element
java.util.List#of(E, E)->List:::Returns an unmodifiable list containing two elements
java.util.List#of(E, E, E)->List:::Returns an unmodifiable list containing three elements
java.util.List#of(E, E, E, E)->List:::Returns an unmodifiable list containing four elements
java.util.List#of(E, E, E, E, E)->List:::Returns an unmodifiable list containing five elements
java.util.List#of(E, E, E, E, E, E)->List:::Returns an unmodifiable list containing six elements
java.util.List#of(E, E, E, E, E, E, E)->List:::Returns an unmodifiable list containing seven elements
java.util.List#of(E, E, E, E, E, E, E, E)->List:::Returns an unmodifiable list containing eight elements
java.util.List#of(E, E, E, E, E, E, E, E, E)->List:::Returns an unmodifiable list containing nine elements
java.util.List#of(E, E, E, E, E, E, E, E, E, E)->List:::Returns an unmodifiable list containing ten elements
java.util.List#of(E...)->List:::Returns an unmodifiable list containing an arbitrary number of elements
java.util.List#copyOf(Collection)->List:::Returns an unmodifiable List containing the elements of the given Collection, in its iteration order
java.util.ListIterator#hasNext()->boolean:::Returns true if this list iterator has more elements when traversing the list in the forward direction
java.util.ListIterator#next()->E:::Returns the next element in the list and advances the cursor position
java.util.ListIterator#hasPrevious()->boolean:::Returns true if this list iterator has more elements when traversing the list in the reverse direction
java.util.ListIterator#previous()->E:::Returns the previous element in the list and moves the cursor position backwards
java.util.ListIterator#nextIndex()->int:::Returns the index of the element that would be returned by a subsequent call to #next
java.util.ListIterator#previousIndex()->int:::Returns the index of the element that would be returned by a subsequent call to #previous
java.util.ListIterator#remove()->void:::Removes from the list the last element that was returned by #next or #previous (optional operation)
java.util.ListIterator#set(E)->void:::Replaces the last element returned by #next or #previous with the specified element (optional operation)
java.util.ListIterator#add(E)->void:::Inserts the specified element into the list (optional operation)
java.util.ListResourceBundle#handleGetObject(String)->Object::: list resource bundle handle get object
java.util.ListResourceBundle#getKeys()->Enumeration:::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
java.util.ListResourceBundle#handleKeySet()->Set:::Returns a Set of the keys contained only in this ResourceBundle.
java.util.ListResourceBundle#getContents()->Object[][]:::Returns an array in which each item is a pair of objects in an Object array
java.util.Locale#getInstance(String, String, String)->Locale:::Returns a Locale constructed from the given language, country and variant
java.util.Locale#getInstance(String, String, String, String, LocaleExtensions)->Locale::: locale get instance
java.util.Locale#getInstance(BaseLocale, LocaleExtensions)->Locale::: locale get instance
java.util.Locale#getDefault()->Locale:::Gets the current value of the default locale for this instance of the Java Virtual Machine
java.util.Locale#getDefault(Locale.Category)->Locale:::Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine
java.util.Locale#setDefault(Locale)->void:::Sets the default locale for this instance of the Java Virtual Machine
java.util.Locale#setDefault(Locale.Category, Locale)->void:::Sets the default locale for the specified Category for this instance of the Java Virtual Machine
java.util.Locale#getAvailableLocales()->Locale[]:::Returns an array of all installed locales
java.util.Locale#getISOCountries()->String[]:::Returns a list of all 2-letter country codes defined in ISO 3166
java.util.Locale#getISOCountries(IsoCountryCode)->Set:::Returns a Set of ISO3166 country codes for the specified type.
java.util.Locale#getISOLanguages()->String[]:::Returns a list of all 2-letter language codes defined in ISO 639
java.util.Locale#getLanguage()->String:::Returns the language code of this Locale
java.util.Locale#getScript()->String:::Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code
java.util.Locale#getCountry()->String:::Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.
java.util.Locale#getVariant()->String:::Returns the variant code for this locale.
java.util.Locale#hasExtensions()->boolean:::Returns true if this Locale has any  extensions.
java.util.Locale#stripExtensions()->Locale:::Returns a copy of this Locale with no  extensions
java.util.Locale#getExtension(char)->String:::Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key
java.util.Locale#getExtensionKeys()->Set:::Returns the set of extension keys associated with this locale, or the empty set if it has no extensions
java.util.Locale#getUnicodeLocaleAttributes()->Set:::Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes
java.util.Locale#getUnicodeLocaleType(String)->String:::Returns the Unicode locale type associated with the specified Unicode locale key for this locale
java.util.Locale#getUnicodeLocaleKeys()->Set:::Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none
java.util.Locale#getBaseLocale()->BaseLocale:::Package locale method returning the Locale's BaseLocale, used by ResourceBundle
java.util.Locale#getLocaleExtensions()->LocaleExtensions:::Package private method returning the Locale's LocaleExtensions, used by ResourceBundle.
java.util.Locale#toString()->String:::Returns a string representation of this Locale object, consisting of language, country, variant, script, and extensions as below:  language + "_" + country + "_" + (variant + "_#" | "#") + script + "_" + extensions   Language is always lower case, country is always upper case, script is always title case, and extensions are always lower case
java.util.Locale#toLanguageTag()->String:::Returns a well-formed IETF BCP 47 language tag representing this locale
java.util.Locale#forLanguageTag(String)->Locale:::Returns a locale for the specified IETF BCP 47 language tag string
java.util.Locale#getISO3Language()->String:::Returns a three-letter abbreviation of this locale's language
java.util.Locale#getISO3Country()->String:::Returns a three-letter abbreviation for this locale's country
java.util.Locale#getDisplayLanguage()->String:::Returns a name for the locale's language that is appropriate for display to the user
java.util.Locale#getDisplayLanguage(Locale)->String:::Returns a name for the locale's language that is appropriate for display to the user
java.util.Locale#getDisplayScript()->String:::Returns a name for the locale's script that is appropriate for display to the user
java.util.Locale#getDisplayScript(Locale)->String:::Returns a name for the locale's script that is appropriate for display to the user
java.util.Locale#getDisplayCountry()->String:::Returns a name for the locale's country that is appropriate for display to the user
java.util.Locale#getDisplayCountry(Locale)->String:::Returns a name for the locale's country that is appropriate for display to the user
java.util.Locale#getDisplayVariant()->String:::Returns a name for the locale's variant code that is appropriate for display to the user
java.util.Locale#getDisplayVariant(Locale)->String:::Returns a name for the locale's variant code that is appropriate for display to the user
java.util.Locale#getDisplayName()->String:::Returns a name for the locale that is appropriate for display to the user
java.util.Locale#getDisplayName(Locale)->String:::Returns a name for the locale that is appropriate for display to the user
java.util.Locale#clone()->Object:::Overrides Cloneable.
java.util.Locale#hashCode()->int:::Override hashCode
java.util.Locale#equals(Object)->boolean:::Returns true if this Locale is equal to another object
java.util.Locale.Builder#setLocale(Locale)->Builder:::Resets the Builder to match the provided locale
java.util.Locale.Builder#setLanguageTag(String)->Builder:::Resets the Builder to match the provided IETF BCP 47 language tag
java.util.Locale.Builder#setLanguage(String)->Builder:::Sets the language
java.util.Locale.Builder#setScript(String)->Builder:::Sets the script
java.util.Locale.Builder#setRegion(String)->Builder:::Sets the region
java.util.Locale.Builder#setVariant(String)->Builder:::Sets the variant
java.util.Locale.Builder#setExtension(char, String)->Builder:::Sets the extension for the given key
java.util.Locale.Builder#setUnicodeLocaleKeyword(String, String)->Builder:::Sets the Unicode locale keyword type for the given key
java.util.Locale.Builder#addUnicodeLocaleAttribute(String)->Builder:::Adds a unicode locale attribute, if not already present, otherwise has no effect
java.util.Locale.Builder#removeUnicodeLocaleAttribute(String)->Builder:::Removes a unicode locale attribute, if present, otherwise has no effect
java.util.Locale.Builder#clear()->Builder:::Resets the builder to its initial, empty state.
java.util.Locale.Builder#clearExtensions()->Builder:::Resets the extensions to their initial, empty state
java.util.Locale.Builder#build()->Locale:::Returns an instance of Locale created from the fields set on this builder
java.util.Locale.LanguageRange#getRange()->String:::Returns the language range of this LanguageRange.
java.util.Locale.LanguageRange#getWeight()->double:::Returns the weight of this LanguageRange.
java.util.Locale.LanguageRange#parse(String)->List:::Parses the given ranges to generate a Language Priority List
java.util.Locale.LanguageRange#parse(String, Map>)->List:::Parses the given ranges to generate a Language Priority List, and then customizes the list using the given map
java.util.Locale.LanguageRange#mapEquivalents(List, Map>)->List:::Generates a new customized Language Priority List using the given priorityList and map
java.util.Locale.LanguageRange#hashCode()->int:::Returns a hash code value for the object.
java.util.Locale.LanguageRange#equals(Object)->boolean:::Compares this object to the specified object
java.util.Locale.LanguageRange#toString()->String:::Returns an informative string representation of this LanguageRange object, consisting of language range and weight if the range is weighted and the weight is less than the max weight.
java.util.Locale#filter(List, Collection, FilteringMode)->List:::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647
java.util.Locale#filter(List, Collection)->List:::Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647
java.util.Locale#filterTags(List, Collection, FilteringMode)->List:::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647
java.util.Locale#filterTags(List, Collection)->List:::Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647
java.util.Locale#lookup(List, Collection)->Locale:::Returns a Locale instance for the best-matching language tag using the lookup mechanism defined in RFC 4647.
java.util.Locale#lookupTag(List, Collection)->String:::Returns the best-matching language tag using the lookup mechanism defined in RFC 4647
java.util.LocaleISOData#computeISO3166_1Alpha3Countries()->Set:::This method computes a set of ISO3166-1 alpha-3 country codes from existing isoCountryTable.
java.util.LongSummaryStatistics#accept(int)->void:::Records a new int value into the summary information.
java.util.LongSummaryStatistics#accept(long)->void:::Records a new long value into the summary information.
java.util.LongSummaryStatistics#combine(LongSummaryStatistics)->void:::Combines the state of another LongSummaryStatistics into this one.
java.util.LongSummaryStatistics#getCount()->long:::Returns the count of values recorded.
java.util.LongSummaryStatistics#getSum()->long:::Returns the sum of values recorded, or zero if no values have been recorded.
java.util.LongSummaryStatistics#getMin()->long:::Returns the minimum value recorded, or Long.MAX_VALUE if no values have been recorded.
java.util.LongSummaryStatistics#getMax()->long:::Returns the maximum value recorded, or Long.MIN_VALUE if no values have been recorded
java.util.LongSummaryStatistics#getAverage()->double:::Returns the arithmetic mean of values recorded, or zero if no values have been recorded.
java.util.LongSummaryStatistics#toString()->String:::Returns a non-empty string representation of this object suitable for debugging
java.util.Map#size()->int:::Returns the number of key-value mappings in this map
java.util.Map#isEmpty()->boolean:::Returns true if this map contains no key-value mappings.
java.util.Map#containsKey(Object)->boolean:::Returns true if this map contains a mapping for the specified key
java.util.Map#containsValue(Object)->boolean:::Returns true if this map maps one or more keys to the specified value
java.util.Map#get(Object)->V:::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
java.util.Map#put(K, V)->V:::Associates the specified value with the specified key in this map (optional operation)
java.util.Map#remove(Object)->V:::Removes the mapping for a key from this map if it is present (optional operation)
java.util.Map#putAll(Map)->void:::Copies all of the mappings from the specified map to this map (optional operation)
java.util.Map#clear()->void:::Removes all of the mappings from this map (optional operation)
java.util.Map#keySet()->Set:::Returns a Set view of the keys contained in this map
java.util.Map#values()->Collection:::Returns a Collection view of the values contained in this map
java.util.Map#entrySet()->Set>:::Returns a Set view of the mappings contained in this map
java.util.Map.Entry#getKey()->K:::Returns the key corresponding to this entry.
java.util.Map.Entry#getValue()->V:::Returns the value corresponding to this entry
java.util.Map.Entry#setValue(V)->V:::Replaces the value corresponding to this entry with the specified value (optional operation)
java.util.Map.Entry#equals(Object)->boolean:::Compares the specified object with this entry for equality
java.util.Map.Entry#hashCode()->int:::Returns the hash code value for this map entry
java.util.Map.Entry#comparingByKey()->Comparator>:::Returns a comparator that compares Map.Entry in natural order on key
java.util.Map.Entry#comparingByValue()->Comparator>:::Returns a comparator that compares Map.Entry in natural order on value
java.util.Map.Entry#comparingByKey(Comparator)->Comparator>:::Returns a comparator that compares Map.Entry by key using the given Comparator
java.util.Map.Entry#comparingByValue(Comparator)->Comparator>:::Returns a comparator that compares Map.Entry by value using the given Comparator
java.util.Map#equals(Object)->boolean:::Compares the specified object with this map for equality
java.util.Map#hashCode()->int:::Returns the hash code value for this map
java.util.Map#getOrDefault(Object, V)->V:::Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.
java.util.Map#forEach(BiConsumer)->void:::Performs the given action for each entry in this map until all entries have been processed or the action throws an exception
java.util.Map#replaceAll(BiFunction)->void:::Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception
java.util.Map#putIfAbsent(K, V)->V:::If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.
java.util.Map#remove(Object, Object)->boolean:::Removes the entry for the specified key only if it is currently mapped to the specified value.
java.util.Map#replace(K, V, V)->boolean:::Replaces the entry for the specified key only if currently mapped to the specified value.
java.util.Map#replace(K, V)->V:::Replaces the entry for the specified key only if it is currently mapped to some value.
java.util.Map#computeIfAbsent(K, Function)->V:::If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null
java.util.Map#computeIfPresent(K, BiFunction)->V:::If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value
java.util.Map#compute(K, BiFunction)->V:::Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping)
java.util.Map#merge(K, V, BiFunction)->V:::If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value
java.util.Map#of()->Map:::Returns an unmodifiable map containing zero mappings
java.util.Map#of(K, V)->Map:::Returns an unmodifiable map containing a single mapping
java.util.Map#of(K, V, K, V)->Map:::Returns an unmodifiable map containing two mappings
java.util.Map#of(K, V, K, V, K, V)->Map:::Returns an unmodifiable map containing three mappings
java.util.Map#of(K, V, K, V, K, V, K, V)->Map:::Returns an unmodifiable map containing four mappings
java.util.Map#of(K, V, K, V, K, V, K, V, K, V)->Map:::Returns an unmodifiable map containing five mappings
java.util.Map#of(K, V, K, V, K, V, K, V, K, V, K, V)->Map:::Returns an unmodifiable map containing six mappings
java.util.Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V)->Map:::Returns an unmodifiable map containing seven mappings
java.util.Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V)->Map:::Returns an unmodifiable map containing eight mappings
java.util.Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V)->Map:::Returns an unmodifiable map containing nine mappings
java.util.Map#of(K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V, K, V)->Map:::Returns an unmodifiable map containing ten mappings
java.util.Map#ofEntries(Entry...)->Map:::Returns an unmodifiable map containing keys and values extracted from the given entries
java.util.Map#entry(K, V)->Entry:::Returns an unmodifiable Entry containing the given key and value
java.util.Map#copyOf(Map)->Map:::Returns an unmodifiable Map containing the entries of the given Map
java.util.MissingFormatArgumentException#getFormatSpecifier()->String:::Returns the unmatched format specifier.
java.util.MissingFormatArgumentException#getMessage()->String::: missing format argument exception get message
java.util.MissingFormatWidthException#getFormatSpecifier()->String:::Returns the format specifier which does not have a width.
java.util.MissingFormatWidthException#getMessage()->String::: missing format width exception get message
java.util.MissingResourceException#getClassName()->String:::Gets parameter passed by constructor.
java.util.MissingResourceException#getKey()->String:::Gets parameter passed by constructor.
java.util.NavigableMap#lowerEntry(K)->Map.Entry:::Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.
java.util.NavigableMap#lowerKey(K)->K:::Returns the greatest key strictly less than the given key, or null if there is no such key.
java.util.NavigableMap#floorEntry(K)->Map.Entry:::Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.
java.util.NavigableMap#floorKey(K)->K:::Returns the greatest key less than or equal to the given key, or null if there is no such key.
java.util.NavigableMap#ceilingEntry(K)->Map.Entry:::Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.
java.util.NavigableMap#ceilingKey(K)->K:::Returns the least key greater than or equal to the given key, or null if there is no such key.
java.util.NavigableMap#higherEntry(K)->Map.Entry:::Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.
java.util.NavigableMap#higherKey(K)->K:::Returns the least key strictly greater than the given key, or null if there is no such key.
java.util.NavigableMap#firstEntry()->Map.Entry:::Returns a key-value mapping associated with the least key in this map, or null if the map is empty.
java.util.NavigableMap#lastEntry()->Map.Entry:::Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
java.util.NavigableMap#pollFirstEntry()->Map.Entry:::Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.
java.util.NavigableMap#pollLastEntry()->Map.Entry:::Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.
java.util.NavigableMap#descendingMap()->NavigableMap:::Returns a reverse order view of the mappings contained in this map
java.util.NavigableMap#navigableKeySet()->NavigableSet:::Returns a NavigableSet view of the keys contained in this map
java.util.NavigableMap#descendingKeySet()->NavigableSet:::Returns a reverse order NavigableSet view of the keys contained in this map
java.util.NavigableMap#subMap(K, boolean, K, boolean)->NavigableMap:::Returns a view of the portion of this map whose keys range from fromKey to toKey
java.util.NavigableMap#headMap(K, boolean)->NavigableMap:::Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey
java.util.NavigableMap#tailMap(K, boolean)->NavigableMap:::Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey
java.util.NavigableMap#subMap(K, K)->SortedMap:::Equivalent to {@code subMap(fromKey, true, toKey, false).
java.util.NavigableMap#headMap(K)->SortedMap:::Equivalent to {@code headMap(toKey, false).
java.util.NavigableMap#tailMap(K)->SortedMap:::Equivalent to {@code tailMap(fromKey, true).
java.util.NavigableSet#lower(E)->E:::Returns the greatest element in this set strictly less than the given element, or null if there is no such element.
java.util.NavigableSet#floor(E)->E:::Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.
java.util.NavigableSet#ceiling(E)->E:::Returns the least element in this set greater than or equal to the given element, or null if there is no such element.
java.util.NavigableSet#higher(E)->E:::Returns the least element in this set strictly greater than the given element, or null if there is no such element.
java.util.NavigableSet#pollFirst()->E:::Retrieves and removes the first (lowest) element, or returns null if this set is empty.
java.util.NavigableSet#pollLast()->E:::Retrieves and removes the last (highest) element, or returns null if this set is empty.
java.util.NavigableSet#iterator()->Iterator:::Returns an iterator over the elements in this set, in ascending order.
java.util.NavigableSet#descendingSet()->NavigableSet:::Returns a reverse order view of the elements contained in this set
java.util.NavigableSet#descendingIterator()->Iterator:::Returns an iterator over the elements in this set, in descending order
java.util.NavigableSet#subSet(E, boolean, E, boolean)->NavigableSet:::Returns a view of the portion of this set whose elements range from fromElement to toElement
java.util.NavigableSet#headSet(E, boolean)->NavigableSet:::Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement
java.util.NavigableSet#tailSet(E, boolean)->NavigableSet:::Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement
java.util.NavigableSet#subSet(E, E)->SortedSet:::Equivalent to {@code subSet(fromElement, true, toElement, false).
java.util.NavigableSet#headSet(E)->SortedSet:::Equivalent to {@code headSet(toElement, false).
java.util.NavigableSet#tailSet(E)->SortedSet:::Equivalent to {@code tailSet(fromElement, true).
java.util.Objects#equals(Object, Object)->boolean:::Returns true if the arguments are equal to each other and false otherwise
java.util.Objects#deepEquals(Object, Object)->boolean:::Returns true if the arguments are deeply equal to each other and false otherwise
java.util.Objects#hashCode(Object)->int:::Returns the hash code of a non-null argument and 0 for a null argument.
java.util.Objects#hash(Object...)->int:::Generates a hash code for a sequence of input values
java.util.Objects#toString(Object)->String:::Returns the result of calling toString for a non-null argument and "null" for a null argument.
java.util.Objects#toString(Object, String)->String:::Returns the result of calling toString on the first argument if the first argument is not null and returns the second argument otherwise.
java.util.Objects#compare(T, T, Comparator)->int:::Returns 0 if the arguments are identical and c.compare(a, b) otherwise
java.util.Objects#requireNonNull(T)->T:::Checks that the specified object reference is not null
java.util.Objects#requireNonNull(T, String)->T:::Checks that the specified object reference is not null and throws a customized NullPointerException if it is
java.util.Objects#isNull(Object)->boolean:::Returns true if the provided reference is null otherwise returns false.
java.util.Objects#nonNull(Object)->boolean:::Returns true if the provided reference is non-null otherwise returns false.
java.util.Objects#requireNonNullElse(T, T)->T:::Returns the first argument if it is non-null and otherwise returns the non-null second argument.
java.util.Objects#requireNonNullElseGet(T, Supplier)->T:::Returns the first argument if it is non-null and otherwise returns the non-null value of supplier.get().
java.util.Objects#requireNonNull(T, Supplier)->T:::Checks that the specified object reference is not null and throws a customized NullPointerException if it is
java.util.Objects#checkIndex(int, int)->int:::Checks if the index is within the bounds of the range from 0 (inclusive) to length (exclusive)
java.util.Objects#checkFromToIndex(int, int, int)->int:::Checks if the sub-range from fromIndex (inclusive) to toIndex (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)
java.util.Objects#checkFromIndexSize(int, int, int)->int:::Checks if the sub-range from fromIndex (inclusive) to fromIndex + size (exclusive) is within the bounds of range from 0 (inclusive) to length (exclusive)
java.util.Observable#addObserver(Observer)->void:::Adds an observer to the set of observers for this object, provided that it is not the same as some observer already in the set
java.util.Observable#deleteObserver(Observer)->void:::Deletes an observer from the set of observers of this object
java.util.Observable#notifyObservers()->void:::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
java.util.Observable#notifyObservers(Object)->void:::If this object has changed, as indicated by the hasChanged method, then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
java.util.Observable#deleteObservers()->void:::Clears the observer list so that this object no longer has any observers.
java.util.Observable#setChanged()->void:::Marks this Observable object as having been changed; the hasChanged method will now return true.
java.util.Observable#clearChanged()->void:::Indicates that this object has no longer changed, or that it has already notified all of its observers of its most recent change, so that the hasChanged method will now return false
java.util.Observable#hasChanged()->boolean:::Tests if this object has changed.
java.util.Observable#countObservers()->int:::Returns the number of observers of this Observable object.
java.util.Observer#update(Observable, Object)->void:::This method is called whenever the observed object is changed
java.util.Optional#empty()->Optional:::Returns an empty Optional instance
java.util.Optional#of(T)->Optional:::Returns an Optional describing the given non-null value.
java.util.Optional#ofNullable(T)->Optional:::Returns an Optional describing the given value, if non-null, otherwise returns an empty Optional.
java.util.Optional#get()->T:::If a value is present, returns the value, otherwise throws NoSuchElementException.
java.util.Optional#isPresent()->boolean:::If a value is present, returns true, otherwise false.
java.util.Optional#isEmpty()->boolean:::If a value is  not present, returns true, otherwise false.
java.util.Optional#ifPresent(Consumer)->void:::If a value is present, performs the given action with the value, otherwise does nothing.
java.util.Optional#ifPresentOrElse(Consumer, Runnable)->void:::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
java.util.Optional#filter(Predicate)->Optional:::If a value is present, and the value matches the given predicate, returns an Optional describing the value, otherwise returns an empty Optional.
java.util.Optional#map(Function)->Optional:::If a value is present, returns an Optional describing (as if by #ofNullable) the result of applying the given mapping function to the value, otherwise returns an empty Optional
java.util.Optional#flatMap(Function>)->Optional:::If a value is present, returns the result of applying the given Optional-bearing mapping function to the value, otherwise returns an empty Optional
java.util.Optional#or(Supplier>)->Optional:::If a value is present, returns an Optional describing the value, otherwise returns an Optional produced by the supplying function.
java.util.Optional#stream()->Stream:::If a value is present, returns a sequential Stream containing only that value, otherwise returns an empty Stream.
java.util.Optional#orElse(T)->T:::If a value is present, returns the value, otherwise returns other.
java.util.Optional#orElseGet(Supplier)->T:::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
java.util.Optional#orElseThrow()->T:::If a value is present, returns the value, otherwise throws NoSuchElementException.
java.util.Optional#orElseThrow(Supplier)->T:::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
java.util.Optional#equals(Object)->boolean:::Indicates whether some other object is "equal to" this Optional
java.util.Optional#hashCode()->int:::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
java.util.Optional#toString()->String:::Returns a non-empty string representation of this Optional suitable for debugging
java.util.OptionalDouble#empty()->OptionalDouble:::Returns an empty OptionalDouble instance
java.util.OptionalDouble#of(double)->OptionalDouble:::Returns an OptionalDouble describing the given value.
java.util.OptionalDouble#getAsDouble()->double:::If a value is present, returns the value, otherwise throws NoSuchElementException.
java.util.OptionalDouble#isPresent()->boolean:::If a value is present, returns true, otherwise false.
java.util.OptionalDouble#isEmpty()->boolean:::If a value is not present, returns true, otherwise false.
java.util.OptionalDouble#ifPresent(DoubleConsumer)->void:::If a value is present, performs the given action with the value, otherwise does nothing.
java.util.OptionalDouble#ifPresentOrElse(DoubleConsumer, Runnable)->void:::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
java.util.OptionalDouble#stream()->DoubleStream:::If a value is present, returns a sequential DoubleStream containing only that value, otherwise returns an empty DoubleStream.
java.util.OptionalDouble#orElse(double)->double:::If a value is present, returns the value, otherwise returns other.
java.util.OptionalDouble#orElseGet(DoubleSupplier)->double:::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
java.util.OptionalDouble#orElseThrow()->double:::If a value is present, returns the value, otherwise throws NoSuchElementException.
java.util.OptionalDouble#orElseThrow(Supplier)->double:::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
java.util.OptionalDouble#equals(Object)->boolean:::Indicates whether some other object is "equal to" this OptionalDouble
java.util.OptionalDouble#hashCode()->int:::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
java.util.OptionalDouble#toString()->String:::Returns a non-empty string representation of this OptionalDouble suitable for debugging
java.util.OptionalInt#empty()->OptionalInt:::Returns an empty OptionalInt instance
java.util.OptionalInt#of(int)->OptionalInt:::Returns an OptionalInt describing the given value.
java.util.OptionalInt#getAsInt()->int:::If a value is present, returns the value, otherwise throws NoSuchElementException.
java.util.OptionalInt#isPresent()->boolean:::If a value is present, returns true, otherwise false.
java.util.OptionalInt#isEmpty()->boolean:::If a value is not present, returns true, otherwise false.
java.util.OptionalInt#ifPresent(IntConsumer)->void:::If a value is present, performs the given action with the value, otherwise does nothing.
java.util.OptionalInt#ifPresentOrElse(IntConsumer, Runnable)->void:::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
java.util.OptionalInt#stream()->IntStream:::If a value is present, returns a sequential IntStream containing only that value, otherwise returns an empty IntStream.
java.util.OptionalInt#orElse(int)->int:::If a value is present, returns the value, otherwise returns other.
java.util.OptionalInt#orElseGet(IntSupplier)->int:::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
java.util.OptionalInt#orElseThrow()->int:::If a value is present, returns the value, otherwise throws NoSuchElementException.
java.util.OptionalInt#orElseThrow(Supplier)->int:::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
java.util.OptionalInt#equals(Object)->boolean:::Indicates whether some other object is "equal to" this OptionalInt
java.util.OptionalInt#hashCode()->int:::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
java.util.OptionalInt#toString()->String:::Returns a non-empty string representation of this OptionalInt suitable for debugging
java.util.OptionalLong#empty()->OptionalLong:::Returns an empty OptionalLong instance
java.util.OptionalLong#of(long)->OptionalLong:::Returns an OptionalLong describing the given value.
java.util.OptionalLong#getAsLong()->long:::If a value is present, returns the value, otherwise throws NoSuchElementException.
java.util.OptionalLong#isPresent()->boolean:::If a value is present, returns true, otherwise false.
java.util.OptionalLong#isEmpty()->boolean:::If a value is not present, returns true, otherwise false.
java.util.OptionalLong#ifPresent(LongConsumer)->void:::If a value is present, performs the given action with the value, otherwise does nothing.
java.util.OptionalLong#ifPresentOrElse(LongConsumer, Runnable)->void:::If a value is present, performs the given action with the value, otherwise performs the given empty-based action.
java.util.OptionalLong#stream()->LongStream:::If a value is present, returns a sequential LongStream containing only that value, otherwise returns an empty LongStream.
java.util.OptionalLong#orElse(long)->long:::If a value is present, returns the value, otherwise returns other.
java.util.OptionalLong#orElseGet(LongSupplier)->long:::If a value is present, returns the value, otherwise returns the result produced by the supplying function.
java.util.OptionalLong#orElseThrow()->long:::If a value is present, returns the value, otherwise throws NoSuchElementException.
java.util.OptionalLong#orElseThrow(Supplier)->long:::If a value is present, returns the value, otherwise throws an exception produced by the exception supplying function.
java.util.OptionalLong#equals(Object)->boolean:::Indicates whether some other object is "equal to" this OptionalLong
java.util.OptionalLong#hashCode()->int:::Returns the hash code of the value, if present, otherwise 0 (zero) if no value is present.
java.util.OptionalLong#toString()->String:::Returns a non-empty string representation of this OptionalLong suitable for debugging
java.util.PrimitiveIterator#forEachRemaining(T_CONS)->void:::Performs the given action for each remaining element, in the order elements occur when iterating, until all elements have been processed or the action throws an exception
java.util.PrimitiveIterator.OfInt#nextInt()->int:::Returns the next int element in the iteration.
java.util.PrimitiveIterator.OfInt#forEachRemaining(IntConsumer)->void:::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
java.util.PrimitiveIterator.OfInt#next()->Integer::: of int next
java.util.PrimitiveIterator.OfInt#forEachRemaining(Consumer)->void::: of int for each remaining
java.util.PrimitiveIterator.OfLong#nextLong()->long:::Returns the next long element in the iteration.
java.util.PrimitiveIterator.OfLong#forEachRemaining(LongConsumer)->void:::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
java.util.PrimitiveIterator.OfLong#next()->Long::: of long next
java.util.PrimitiveIterator.OfLong#forEachRemaining(Consumer)->void::: of long for each remaining
java.util.PrimitiveIterator.OfDouble#nextDouble()->double:::Returns the next double element in the iteration.
java.util.PrimitiveIterator.OfDouble#forEachRemaining(DoubleConsumer)->void:::Performs the given action for each remaining element until all elements have been processed or the action throws an exception
java.util.PrimitiveIterator.OfDouble#next()->Double::: of double next
java.util.PrimitiveIterator.OfDouble#forEachRemaining(Consumer)->void::: of double for each remaining
java.util.PriorityQueue#add(E)->boolean:::Inserts the specified element into this priority queue.
java.util.PriorityQueue#offer(E)->boolean:::Inserts the specified element into this priority queue.
java.util.PriorityQueue#peek()->E::: priority queue peek
java.util.PriorityQueue#remove(Object)->boolean:::Removes a single instance of the specified element from this queue, if it is present
java.util.PriorityQueue#removeEq(Object)->void:::Identity-based version for use in Itr.remove.
java.util.PriorityQueue#contains(Object)->boolean:::Returns true if this queue contains the specified element
java.util.PriorityQueue#toArray()->Object[]:::Returns an array containing all of the elements in this queue
java.util.PriorityQueue#toArray(T[])->T[]:::Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array
java.util.PriorityQueue#iterator()->Iterator:::Returns an iterator over the elements in this queue
java.util.PriorityQueue#size()->int::: priority queue size
java.util.PriorityQueue#clear()->void:::Removes all of the elements from this priority queue
java.util.PriorityQueue#poll()->E::: priority queue poll
java.util.PriorityQueue#removeAt(int)->E:::Removes the ith element from queue
java.util.PriorityQueue#comparator()->Comparator:::Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the Comparable natural ordering of its elements.
java.util.PriorityQueue#spliterator()->Spliterator:::Creates a late-binding and fail-fast Spliterator over the elements in this queue
java.util.PriorityQueue.PriorityQueueSpliterator#trySplit()->PriorityQueueSpliterator::: priority queue spliterator try split
java.util.PriorityQueue.PriorityQueueSpliterator#forEachRemaining(Consumer)->void::: priority queue spliterator for each remaining
java.util.PriorityQueue.PriorityQueueSpliterator#tryAdvance(Consumer)->boolean::: priority queue spliterator try advance
java.util.PriorityQueue.PriorityQueueSpliterator#estimateSize()->long::: priority queue spliterator estimate size
java.util.PriorityQueue.PriorityQueueSpliterator#characteristics()->int::: priority queue spliterator characteristics
java.util.PriorityQueue#removeIf(Predicate)->boolean::: priority queue remove if
java.util.PriorityQueue#removeAll(Collection)->boolean::: priority queue remove all
java.util.PriorityQueue#retainAll(Collection)->boolean::: priority queue retain all
java.util.PriorityQueue#forEach(Consumer)->void::: priority queue for each
java.util.Properties#setProperty(String, String)->Object:::Calls the Hashtable method put
java.util.Properties#load(Reader)->void:::Reads a property list (key and element pairs) from the input character stream in a simple line-oriented format
java.util.Properties#load(InputStream)->void:::Reads a property list (key and element pairs) from the input byte stream
java.util.Properties#save(OutputStream, String)->void:::Calls the store(OutputStream out, String comments) method and suppresses IOExceptions that were thrown.
java.util.Properties#store(Writer, String)->void:::Writes this property list (key and element pairs) in this Properties table to the output character stream in a format suitable for using the #load(java.io.Reader) load(Reader) method
java.util.Properties#store(OutputStream, String)->void:::Writes this property list (key and element pairs) in this Properties table to the output stream in a format suitable for loading into a Properties table using the #load(InputStream) load(InputStream) method
java.util.Properties#loadFromXML(InputStream)->void:::Loads all of the properties represented by the XML document on the specified input stream into this properties table
java.util.Properties#storeToXML(OutputStream, String)->void:::Emits an XML document representing all of the properties contained in this table
java.util.Properties#storeToXML(OutputStream, String, String)->void:::Emits an XML document representing all of the properties contained in this table, using the specified encoding
java.util.Properties#storeToXML(OutputStream, String, Charset)->void:::Emits an XML document representing all of the properties contained in this table, using the specified encoding
java.util.Properties#getProperty(String)->String:::Searches for the property with the specified key in this property list
java.util.Properties#getProperty(String, String)->String:::Searches for the property with the specified key in this property list
java.util.Properties#propertyNames()->Enumeration:::Returns an enumeration of all the keys in this property list, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list.
java.util.Properties#stringPropertyNames()->Set:::Returns an unmodifiable set of keys from this property list where the key and its corresponding value are strings, including distinct keys in the default property list if a key of the same name has not already been found from the main properties list
java.util.Properties#list(PrintStream)->void:::Prints this property list out to the specified output stream
java.util.Properties#list(PrintWriter)->void::: properties list
java.util.Properties#size()->int::: properties size
java.util.Properties#isEmpty()->boolean::: properties is empty
java.util.Properties#keys()->Enumeration::: properties keys
java.util.Properties#elements()->Enumeration::: properties elements
java.util.Properties#contains(Object)->boolean::: properties contains
java.util.Properties#containsValue(Object)->boolean::: properties contains value
java.util.Properties#containsKey(Object)->boolean::: properties contains key
java.util.Properties#get(Object)->Object::: properties get
java.util.Properties#put(Object, Object)->Object::: properties put
java.util.Properties#remove(Object)->Object::: properties remove
java.util.Properties#putAll(Map)->void::: properties put all
java.util.Properties#clear()->void::: properties clear
java.util.Properties#toString()->String::: properties to string
java.util.Properties#keySet()->Set::: properties key set
java.util.Properties#values()->Collection::: properties values
java.util.Properties#entrySet()->Set>::: properties entry set
java.util.Properties#equals(Object)->boolean::: properties equals
java.util.Properties#hashCode()->int::: properties hash code
java.util.Properties#getOrDefault(Object, Object)->Object::: properties get or default
java.util.Properties#forEach(BiConsumer)->void::: properties for each
java.util.Properties#replaceAll(BiFunction)->void::: properties replace all
java.util.Properties#putIfAbsent(Object, Object)->Object::: properties put if absent
java.util.Properties#remove(Object, Object)->boolean::: properties remove
java.util.Properties#replace(Object, Object, Object)->boolean::: properties replace
java.util.Properties#replace(Object, Object)->Object::: properties replace
java.util.Properties#computeIfAbsent(Object, Function)->Object::: properties compute if absent
java.util.Properties#computeIfPresent(Object, BiFunction)->Object::: properties compute if present
java.util.Properties#compute(Object, BiFunction)->Object::: properties compute
java.util.Properties#merge(Object, Object, BiFunction)->Object::: properties merge
java.util.Properties#rehash()->void::: properties rehash
java.util.Properties#clone()->Object::: properties clone
java.util.Properties#writeHashtable(ObjectOutputStream)->void::: properties write hashtable
java.util.Properties#readHashtable(ObjectInputStream)->void::: properties read hashtable
java.util.PropertyPermission#implies(Permission)->boolean:::Checks if this PropertyPermission object "implies" the specified permission
java.util.PropertyPermission#equals(Object)->boolean:::Checks two PropertyPermission objects for equality
java.util.PropertyPermission#hashCode()->int:::Returns the hash code value for this object
java.util.PropertyPermission#getActions(int)->String:::Return the canonical string representation of the actions
java.util.PropertyPermission#getActions()->String:::Returns the "canonical string representation" of the actions
java.util.PropertyPermission#getMask()->int:::Return the current action mask
java.util.PropertyPermission#newPermissionCollection()->PermissionCollection:::Returns a new PermissionCollection object for storing PropertyPermission objects.
java.util.PropertyPermissionCollection#add(Permission)->void:::Adds a permission to the PropertyPermissions
java.util.PropertyPermissionCollection#implies(Permission)->boolean:::Check and see if this set of permissions implies the permissions expressed in "permission".
java.util.PropertyPermissionCollection#elements()->Enumeration:::Returns an enumeration of all the PropertyPermission objects in the container.
java.util.PropertyResourceBundle#handleGetObject(String)->Object::: property resource bundle handle get object
java.util.PropertyResourceBundle#getKeys()->Enumeration:::Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.
java.util.PropertyResourceBundle#handleKeySet()->Set:::Returns a Set of the keys contained only in this ResourceBundle.
java.util.Queue#add(E)->boolean:::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.
java.util.Queue#offer(E)->boolean:::Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions
java.util.Queue#remove()->E:::Retrieves and removes the head of this queue
java.util.Queue#poll()->E:::Retrieves and removes the head of this queue, or returns null if this queue is empty.
java.util.Queue#element()->E:::Retrieves, but does not remove, the head of this queue
java.util.Queue#peek()->E:::Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
java.util.Random#setSeed(long)->void:::Sets the seed of this random number generator using a single long seed
java.util.Random#next(int)->int:::Generates the next pseudorandom number
java.util.Random#nextBytes(byte[])->void:::Generates random bytes and places them into a user-supplied byte array
java.util.Random#internalNextLong(long, long)->long:::The form of nextLong used by LongStream Spliterators
java.util.Random#internalNextInt(int, int)->int:::The form of nextInt used by IntStream Spliterators
java.util.Random#internalNextDouble(double, double)->double:::The form of nextDouble used by DoubleStream Spliterators.
java.util.Random#nextInt()->int:::Returns the next pseudorandom, uniformly distributed int value from this random number generator's sequence
java.util.Random#nextInt(int)->int:::Returns a pseudorandom, uniformly distributed int value between 0 (inclusive) and the specified value (exclusive), drawn from this random number generator's sequence
java.util.Random#nextLong()->long:::Returns the next pseudorandom, uniformly distributed long value from this random number generator's sequence
java.util.Random#nextBoolean()->boolean:::Returns the next pseudorandom, uniformly distributed boolean value from this random number generator's sequence
java.util.Random#nextFloat()->float:::Returns the next pseudorandom, uniformly distributed float value between 0.0 and 1.0 from this random number generator's sequence
java.util.Random#nextDouble()->double:::Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 from this random number generator's sequence
java.util.Random#nextGaussian()->double:::Returns the next pseudorandom, Gaussian ("normally") distributed double value with mean 0.0 and standard deviation 1.0 from this random number generator's sequence
java.util.Random#ints(long)->IntStream:::Returns a stream producing the given streamSize number of pseudorandom int values
java.util.Random#ints()->IntStream:::Returns an effectively unlimited stream of pseudorandom int values
java.util.Random#ints(long, int, int)->IntStream:::Returns a stream producing the given streamSize number of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)
java.util.Random#ints(int, int)->IntStream:::Returns an effectively unlimited stream of pseudorandom int values, each conforming to the given origin (inclusive) and bound (exclusive)
java.util.Random#longs(long)->LongStream:::Returns a stream producing the given streamSize number of pseudorandom long values
java.util.Random#longs()->LongStream:::Returns an effectively unlimited stream of pseudorandom long values
java.util.Random#longs(long, long, long)->LongStream:::Returns a stream producing the given streamSize number of pseudorandom long, each conforming to the given origin (inclusive) and bound (exclusive)
java.util.Random#longs(long, long)->LongStream:::Returns an effectively unlimited stream of pseudorandom long values, each conforming to the given origin (inclusive) and bound (exclusive)
java.util.Random#doubles(long)->DoubleStream:::Returns a stream producing the given streamSize number of pseudorandom double values, each between zero (inclusive) and one (exclusive)
java.util.Random#doubles()->DoubleStream:::Returns an effectively unlimited stream of pseudorandom double values, each between zero (inclusive) and one (exclusive)
java.util.Random#doubles(long, double, double)->DoubleStream:::Returns a stream producing the given streamSize number of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)
java.util.Random#doubles(double, double)->DoubleStream:::Returns an effectively unlimited stream of pseudorandom double values, each conforming to the given origin (inclusive) and bound (exclusive)
java.util.Random.RandomIntsSpliterator#trySplit()->RandomIntsSpliterator::: random ints spliterator try split
java.util.Random.RandomIntsSpliterator#estimateSize()->long::: random ints spliterator estimate size
java.util.Random.RandomIntsSpliterator#characteristics()->int::: random ints spliterator characteristics
java.util.Random.RandomIntsSpliterator#tryAdvance(IntConsumer)->boolean::: random ints spliterator try advance
java.util.Random.RandomIntsSpliterator#forEachRemaining(IntConsumer)->void::: random ints spliterator for each remaining
java.util.Random.RandomLongsSpliterator#trySplit()->RandomLongsSpliterator::: random longs spliterator try split
java.util.Random.RandomLongsSpliterator#estimateSize()->long::: random longs spliterator estimate size
java.util.Random.RandomLongsSpliterator#characteristics()->int::: random longs spliterator characteristics
java.util.Random.RandomLongsSpliterator#tryAdvance(LongConsumer)->boolean::: random longs spliterator try advance
java.util.Random.RandomLongsSpliterator#forEachRemaining(LongConsumer)->void::: random longs spliterator for each remaining
java.util.Random.RandomDoublesSpliterator#trySplit()->RandomDoublesSpliterator::: random doubles spliterator try split
java.util.Random.RandomDoublesSpliterator#estimateSize()->long::: random doubles spliterator estimate size
java.util.Random.RandomDoublesSpliterator#characteristics()->int::: random doubles spliterator characteristics
java.util.Random.RandomDoublesSpliterator#tryAdvance(DoubleConsumer)->boolean::: random doubles spliterator try advance
java.util.Random.RandomDoublesSpliterator#forEachRemaining(DoubleConsumer)->void::: random doubles spliterator for each remaining
java.util.RegularEnumSet#addRange(E, E)->void::: regular enum set add range
java.util.RegularEnumSet#addAll()->void::: regular enum set add all
java.util.RegularEnumSet#complement()->void::: regular enum set complement
java.util.RegularEnumSet#iterator()->Iterator:::Returns an iterator over the elements contained in this set
java.util.RegularEnumSet#size()->int:::Returns the number of elements in this set.
java.util.RegularEnumSet#isEmpty()->boolean:::Returns true if this set contains no elements.
java.util.RegularEnumSet#contains(Object)->boolean:::Returns true if this set contains the specified element.
java.util.RegularEnumSet#add(E)->boolean:::Adds the specified element to this set if it is not already present.
java.util.RegularEnumSet#remove(Object)->boolean:::Removes the specified element from this set if it is present.
java.util.RegularEnumSet#containsAll(Collection)->boolean:::Returns true if this set contains all of the elements in the specified collection.
java.util.RegularEnumSet#addAll(Collection)->boolean:::Adds all of the elements in the specified collection to this set.
java.util.RegularEnumSet#removeAll(Collection)->boolean:::Removes from this set all of its elements that are contained in the specified collection.
java.util.RegularEnumSet#retainAll(Collection)->boolean:::Retains only the elements in this set that are contained in the specified collection.
java.util.RegularEnumSet#clear()->void:::Removes all of the elements from this set.
java.util.RegularEnumSet#equals(Object)->boolean:::Compares the specified object with this set for equality
java.util.ResourceBundle#getBaseBundleName()->String:::Returns the base name of this bundle, if known, or null if unknown
java.util.ResourceBundle#getString(String)->String:::Gets a string for the given key from this resource bundle or one of its parents
java.util.ResourceBundle#getStringArray(String)->String[]:::Gets a string array for the given key from this resource bundle or one of its parents
java.util.ResourceBundle#getObject(String)->Object:::Gets an object for the given key from this resource bundle or one of its parents
java.util.ResourceBundle#getLocale()->Locale:::Returns the locale of this resource bundle
java.util.ResourceBundle#setParent(ResourceBundle)->void:::Sets the parent bundle of this bundle
java.util.ResourceBundle#getBundle(String)->ResourceBundle:::Gets a resource bundle using the specified base name, the default locale, and the caller module
java.util.ResourceBundle#getBundle(String, Control)->ResourceBundle:::Returns a resource bundle using the specified base name, the default locale and the specified control
java.util.ResourceBundle#getBundle(String, Locale)->ResourceBundle:::Gets a resource bundle using the specified base name and locale, and the caller module
java.util.ResourceBundle#getBundle(String, Module)->ResourceBundle:::Gets a resource bundle using the specified base name and the default locale on behalf of the specified module
java.util.ResourceBundle#getBundle(String, Locale, Module)->ResourceBundle:::Gets a resource bundle using the specified base name and locale on behalf of the specified module
java.util.ResourceBundle#getBundle(String, Locale, Control)->ResourceBundle:::Returns a resource bundle using the specified base name, target locale and control, and the caller's class loader
java.util.ResourceBundle#getBundle(String, Locale, ClassLoader)->ResourceBundle:::Gets a resource bundle using the specified base name, locale, and class loader
java.util.ResourceBundle#getBundle(String, Locale, ClassLoader, Control)->ResourceBundle:::Returns a resource bundle using the specified base name, target locale, class loader and control
java.util.ResourceBundle#clearCache()->void:::Removes all resource bundles from the cache that have been loaded by the caller's module.
java.util.ResourceBundle#clearCache(ClassLoader)->void:::Removes all resource bundles from the cache that have been loaded by the given class loader.
java.util.ResourceBundle#handleGetObject(String)->Object:::Gets an object for the given key from this resource bundle
java.util.ResourceBundle#getKeys()->Enumeration:::Returns an enumeration of the keys.
java.util.ResourceBundle#containsKey(String)->boolean:::Determines whether the given key is contained in this ResourceBundle or its parent bundles.
java.util.ResourceBundle#keySet()->Set:::Returns a Set of all keys contained in this ResourceBundle and its parent bundles.
java.util.ResourceBundle#handleKeySet()->Set:::Returns a Set of the keys contained only in this ResourceBundle
java.util.ResourceBundle.Control#getControl(List)->Control:::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats
java.util.ResourceBundle.Control#getNoFallbackControl(List)->Control:::Returns a ResourceBundle.Control in which the #getFormats(String) getFormats method returns the specified formats and the Control#getFallbackLocale(String, Locale) getFallbackLocale method returns null
java.util.ResourceBundle.Control#getFormats(String)->List:::Returns a List of Strings containing formats to be used to load resource bundles for the given baseName
java.util.ResourceBundle.Control#getCandidateLocales(String, Locale)->List:::Returns a List of Locales as candidate locales for baseName and locale
java.util.ResourceBundle.Control#getFallbackLocale(String, Locale)->Locale:::Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle.getBundle factory method
java.util.ResourceBundle.Control#newBundle(String, Locale, String, ClassLoader, boolean)->ResourceBundle:::Instantiates a resource bundle for the given bundle name of the given format and locale, using the given class loader if necessary
java.util.ResourceBundle.Control#getTimeToLive(String, Locale)->long:::Returns the time-to-live (TTL) value for resource bundles that are loaded under this ResourceBundle.Control
java.util.ResourceBundle.Control#needsReload(String, Locale, String, ClassLoader, ResourceBundle, long)->boolean:::Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria
java.util.ResourceBundle.Control#toBundleName(String, Locale)->String:::Converts the given baseName and locale to the bundle name
java.util.ResourceBundle.Control#toResourceName(String, String)->String:::Converts the given bundleName to the form required by the ClassLoader#getResource ClassLoader.getResource method by replacing all occurrences of '.' in bundleName with '/' and appending a '.' and the given file suffix
java.util.Scanner#close()->void:::Closes this scanner
java.util.Scanner#ioException()->IOException:::Returns the IOException last thrown by this Scanner's underlying Readable
java.util.Scanner#delimiter()->Pattern:::Returns the Pattern this Scanner is currently using to match delimiters.
java.util.Scanner#useDelimiter(Pattern)->Scanner:::Sets this scanner's delimiting pattern to the specified pattern.
java.util.Scanner#useDelimiter(String)->Scanner:::Sets this scanner's delimiting pattern to a pattern constructed from the specified String
java.util.Scanner#locale()->Locale:::Returns this scanner's locale
java.util.Scanner#useLocale(Locale)->Scanner:::Sets this scanner's locale to the specified locale
java.util.Scanner#radix()->int:::Returns this scanner's default radix
java.util.Scanner#useRadix(int)->Scanner:::Sets this scanner's default radix to the specified radix
java.util.Scanner#match()->MatchResult:::Returns the match result of the last scanning operation performed by this scanner
java.util.Scanner#toString()->String:::Returns the string representation of this Scanner
java.util.Scanner#hasNext()->boolean:::Returns true if this scanner has another token in its input
java.util.Scanner#next()->String:::Finds and returns the next complete token from this scanner
java.util.Scanner#remove()->void:::The remove operation is not supported by this implementation of Iterator.
java.util.Scanner#hasNext(String)->boolean:::Returns true if the next token matches the pattern constructed from the specified string
java.util.Scanner#next(String)->String:::Returns the next token if it matches the pattern constructed from the specified string
java.util.Scanner#hasNext(Pattern)->boolean:::Returns true if the next complete token matches the specified pattern
java.util.Scanner#next(Pattern)->String:::Returns the next token if it matches the specified pattern
java.util.Scanner#hasNextLine()->boolean:::Returns true if there is another line in the input of this scanner
java.util.Scanner#nextLine()->String:::Advances this scanner past the current line and returns the input that was skipped
java.util.Scanner#findInLine(String)->String:::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters
java.util.Scanner#findInLine(Pattern)->String:::Attempts to find the next occurrence of the specified pattern ignoring delimiters
java.util.Scanner#findWithinHorizon(String, int)->String:::Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters
java.util.Scanner#findWithinHorizon(Pattern, int)->String:::Attempts to find the next occurrence of the specified pattern
java.util.Scanner#skip(Pattern)->Scanner:::Skips input that matches the specified pattern, ignoring delimiters
java.util.Scanner#skip(String)->Scanner:::Skips input that matches a pattern constructed from the specified string
java.util.Scanner#hasNextBoolean()->boolean:::Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string "true|false"
java.util.Scanner#nextBoolean()->boolean:::Scans the next token of the input into a boolean value and returns that value
java.util.Scanner#hasNextByte()->boolean:::Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the #nextByte method
java.util.Scanner#hasNextByte(int)->boolean:::Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the #nextByte method
java.util.Scanner#nextByte()->byte:::Scans the next token of the input as a byte
java.util.Scanner#nextByte(int)->byte:::Scans the next token of the input as a byte
java.util.Scanner#hasNextShort()->boolean:::Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the #nextShort method
java.util.Scanner#hasNextShort(int)->boolean:::Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the #nextShort method
java.util.Scanner#nextShort()->short:::Scans the next token of the input as a short
java.util.Scanner#nextShort(int)->short:::Scans the next token of the input as a short
java.util.Scanner#hasNextInt()->boolean:::Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the #nextInt method
java.util.Scanner#hasNextInt(int)->boolean:::Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the #nextInt method
java.util.Scanner#nextInt()->int:::Scans the next token of the input as an int
java.util.Scanner#nextInt(int)->int:::Scans the next token of the input as an int
java.util.Scanner#hasNextLong()->boolean:::Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the #nextLong method
java.util.Scanner#hasNextLong(int)->boolean:::Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the #nextLong method
java.util.Scanner#nextLong()->long:::Scans the next token of the input as a long
java.util.Scanner#nextLong(int)->long:::Scans the next token of the input as a long
java.util.Scanner#hasNextFloat()->boolean:::Returns true if the next token in this scanner's input can be interpreted as a float value using the #nextFloat method
java.util.Scanner#nextFloat()->float:::Scans the next token of the input as a float
java.util.Scanner#hasNextDouble()->boolean:::Returns true if the next token in this scanner's input can be interpreted as a double value using the #nextDouble method
java.util.Scanner#nextDouble()->double:::Scans the next token of the input as a double
java.util.Scanner#hasNextBigInteger()->boolean:::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the #nextBigInteger method
java.util.Scanner#hasNextBigInteger(int)->boolean:::Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the #nextBigInteger method
java.util.Scanner#nextBigInteger()->BigInteger:::Scans the next token of the input as a java.math.BigInteger BigInteger
java.util.Scanner#nextBigInteger(int)->BigInteger:::Scans the next token of the input as a java.math.BigInteger BigInteger
java.util.Scanner#hasNextBigDecimal()->boolean:::Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the #nextBigDecimal method
java.util.Scanner#nextBigDecimal()->BigDecimal:::Scans the next token of the input as a java.math.BigDecimal BigDecimal
java.util.Scanner#reset()->Scanner:::Resets this scanner
java.util.Scanner#tokens()->Stream:::Returns a stream of delimiter-separated tokens from this scanner
java.util.Scanner.TokenSpliterator#tryAdvance(Consumer)->boolean::: token spliterator try advance
java.util.Scanner#findAll(Pattern)->Stream:::Returns a stream of match results from this scanner
java.util.Scanner#findAll(String)->Stream:::Returns a stream of match results that match the provided pattern string
java.util.Scanner.FindSpliterator#tryAdvance(Consumer)->boolean::: find spliterator try advance
java.util.ServiceLoader.Provider#type()->Class:::Returns the provider type
java.util.ServiceLoader.Provider#get()->S:::Returns an instance of the provider.
java.util.ServiceLoader#iterator()->Iterator:::Returns an iterator to lazily load and instantiate the available providers of this loader's service
java.util.ServiceLoader#stream()->Stream>:::Returns a stream to lazily load available providers of this loader's service
java.util.ServiceLoader#load(Class, ClassLoader, Module)->ServiceLoader:::Creates a new service loader for the given service type, class loader, and caller.
java.util.ServiceLoader#load(Class, ClassLoader)->ServiceLoader:::Creates a new service loader for the given service
java.util.ServiceLoader#load(Class)->ServiceLoader:::Creates a new service loader for the given service type, using the current thread's java.lang.Thread#getContextClassLoader context class loader
java.util.ServiceLoader#loadInstalled(Class)->ServiceLoader:::Creates a new service loader for the given service type, using the ClassLoader#getPlatformClassLoader() platform class loader
java.util.ServiceLoader#load(ModuleLayer, Class)->ServiceLoader:::Creates a new service loader for the given service type to load service providers from modules in the given module layer and its ancestors
java.util.ServiceLoader#findFirst()->Optional:::Load the first available service provider of this loader's service
java.util.ServiceLoader#reload()->void:::Clear this loader's provider cache so that all providers will be reloaded
java.util.ServiceLoader#toString()->String:::Returns a string describing this service.
java.util.Set#size()->int:::Returns the number of elements in this set (its cardinality)
java.util.Set#isEmpty()->boolean:::Returns true if this set contains no elements.
java.util.Set#contains(Object)->boolean:::Returns true if this set contains the specified element
java.util.Set#iterator()->Iterator:::Returns an iterator over the elements in this set
java.util.Set#toArray()->Object[]:::Returns an array containing all of the elements in this set
java.util.Set#toArray(T[])->T[]:::Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array
java.util.Set#add(E)->boolean:::Adds the specified element to this set if it is not already present (optional operation)
java.util.Set#remove(Object)->boolean:::Removes the specified element from this set if it is present (optional operation)
java.util.Set#containsAll(Collection)->boolean:::Returns true if this set contains all of the elements of the specified collection
java.util.Set#addAll(Collection)->boolean:::Adds all of the elements in the specified collection to this set if they're not already present (optional operation)
java.util.Set#retainAll(Collection)->boolean:::Retains only the elements in this set that are contained in the specified collection (optional operation)
java.util.Set#removeAll(Collection)->boolean:::Removes from this set all of its elements that are contained in the specified collection (optional operation)
java.util.Set#clear()->void:::Removes all of the elements from this set (optional operation)
java.util.Set#equals(Object)->boolean:::Compares the specified object with this set for equality
java.util.Set#hashCode()->int:::Returns the hash code value for this set
java.util.Set#spliterator()->Spliterator:::Creates a Spliterator over the elements in this set
java.util.Set#of()->Set:::Returns an unmodifiable set containing zero elements
java.util.Set#of(E)->Set:::Returns an unmodifiable set containing one element
java.util.Set#of(E, E)->Set:::Returns an unmodifiable set containing two elements
java.util.Set#of(E, E, E)->Set:::Returns an unmodifiable set containing three elements
java.util.Set#of(E, E, E, E)->Set:::Returns an unmodifiable set containing four elements
java.util.Set#of(E, E, E, E, E)->Set:::Returns an unmodifiable set containing five elements
java.util.Set#of(E, E, E, E, E, E)->Set:::Returns an unmodifiable set containing six elements
java.util.Set#of(E, E, E, E, E, E, E)->Set:::Returns an unmodifiable set containing seven elements
java.util.Set#of(E, E, E, E, E, E, E, E)->Set:::Returns an unmodifiable set containing eight elements
java.util.Set#of(E, E, E, E, E, E, E, E, E)->Set:::Returns an unmodifiable set containing nine elements
java.util.Set#of(E, E, E, E, E, E, E, E, E, E)->Set:::Returns an unmodifiable set containing ten elements
java.util.Set#of(E...)->Set:::Returns an unmodifiable set containing an arbitrary number of elements
java.util.Set#copyOf(Collection)->Set:::Returns an unmodifiable Set containing the elements of the given Collection
java.util.SimpleTimeZone#setStartYear(int)->void:::Sets the daylight saving time starting year.
java.util.SimpleTimeZone#setStartRule(int, int, int, int)->void:::Sets the daylight saving time start rule
java.util.SimpleTimeZone#setStartRule(int, int, int)->void:::Sets the daylight saving time start rule to a fixed date within a month
java.util.SimpleTimeZone#setStartRule(int, int, int, int, boolean)->void:::Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.
java.util.SimpleTimeZone#setEndRule(int, int, int, int)->void:::Sets the daylight saving time end rule
java.util.SimpleTimeZone#setEndRule(int, int, int)->void:::Sets the daylight saving time end rule to a fixed date within a month
java.util.SimpleTimeZone#setEndRule(int, int, int, int, boolean)->void:::Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.
java.util.SimpleTimeZone#getOffset(long)->int:::Returns the offset of this time zone from UTC at the given time
java.util.SimpleTimeZone#getOffsets(long, int[])->int::: simple time zone get offsets
java.util.SimpleTimeZone#getOffset(int, int, int, int, int, int)->int:::Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time
java.util.SimpleTimeZone#getRawOffset()->int:::Gets the GMT offset for this time zone.
java.util.SimpleTimeZone#setRawOffset(int)->void:::Sets the base time zone offset to GMT
java.util.SimpleTimeZone#setDSTSavings(int)->void:::Sets the amount of time in milliseconds that the clock is advanced during daylight saving time.
java.util.SimpleTimeZone#getDSTSavings()->int:::Returns the amount of time in milliseconds that the clock is advanced during daylight saving time.
java.util.SimpleTimeZone#useDaylightTime()->boolean:::Queries if this time zone uses daylight saving time.
java.util.SimpleTimeZone#observesDaylightTime()->boolean:::Returns true if this SimpleTimeZone observes Daylight Saving Time
java.util.SimpleTimeZone#inDaylightTime(Date)->boolean:::Queries if the given date is in daylight saving time.
java.util.SimpleTimeZone#clone()->Object:::Returns a clone of this SimpleTimeZone instance.
java.util.SimpleTimeZone#hashCode()->int:::Generates the hash code for the SimpleDateFormat object.
java.util.SimpleTimeZone#equals(Object)->boolean:::Compares the equality of two SimpleTimeZone objects.
java.util.SimpleTimeZone#hasSameRules(TimeZone)->boolean:::Returns true if this zone has the same rules and offset as another zone.
java.util.SimpleTimeZone#toString()->String:::Returns a string representation of this time zone.
java.util.SortedMap#comparator()->Comparator:::Returns the comparator used to order the keys in this map, or null if this map uses the Comparable natural ordering of its keys.
java.util.SortedMap#subMap(K, K)->SortedMap:::Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive
java.util.SortedMap#headMap(K)->SortedMap:::Returns a view of the portion of this map whose keys are strictly less than toKey
java.util.SortedMap#tailMap(K)->SortedMap:::Returns a view of the portion of this map whose keys are greater than or equal to fromKey
java.util.SortedMap#firstKey()->K:::Returns the first (lowest) key currently in this map.
java.util.SortedMap#lastKey()->K:::Returns the last (highest) key currently in this map.
java.util.SortedMap#keySet()->Set:::Returns a Set view of the keys contained in this map
java.util.SortedMap#values()->Collection:::Returns a Collection view of the values contained in this map
java.util.SortedMap#entrySet()->Set>:::Returns a Set view of the mappings contained in this map
java.util.SortedSet#comparator()->Comparator:::Returns the comparator used to order the elements in this set, or null if this set uses the Comparable natural ordering of its elements.
java.util.SortedSet#subSet(E, E)->SortedSet:::Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive
java.util.SortedSet#headSet(E)->SortedSet:::Returns a view of the portion of this set whose elements are strictly less than toElement
java.util.SortedSet#tailSet(E)->SortedSet:::Returns a view of the portion of this set whose elements are greater than or equal to fromElement
java.util.SortedSet#first()->E:::Returns the first (lowest) element currently in this set.
java.util.SortedSet#last()->E:::Returns the last (highest) element currently in this set.
java.util.SortedSet#spliterator()->Spliterator:::Creates a Spliterator over the elements in this sorted set
java.util.Spliterator#tryAdvance(Consumer)->boolean:::If a remaining element exists, performs the given action on it, returning true; else returns false
java.util.Spliterator#forEachRemaining(Consumer)->void:::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
java.util.Spliterator#trySplit()->Spliterator:::If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator
java.util.Spliterator#estimateSize()->long:::Returns an estimate of the number of elements that would be encountered by a #forEachRemaining traversal, or returns Long#MAX_VALUE if infinite, unknown, or too expensive to compute
java.util.Spliterator#getExactSizeIfKnown()->long:::Convenience method that returns #estimateSize() if this Spliterator is #SIZED, else -1.
java.util.Spliterator#characteristics()->int:::Returns a set of characteristics of this Spliterator and its elements
java.util.Spliterator#hasCharacteristics(int)->boolean:::Returns true if this Spliterator's #characteristics contain all of the given characteristics.
java.util.Spliterator#getComparator()->Comparator:::If this Spliterator's source is #SORTED by a Comparator, returns that Comparator
java.util.Spliterator.OfPrimitive#trySplit()->T_SPLITR::: of primitive try split
java.util.Spliterator.OfPrimitive#tryAdvance(T_CONS)->boolean:::If a remaining element exists, performs the given action on it, returning true; else returns false
java.util.Spliterator.OfPrimitive#forEachRemaining(T_CONS)->void:::Performs the given action for each remaining element, sequentially in the current thread, until all elements have been processed or the action throws an exception
java.util.Spliterator.OfInt#trySplit()->OfInt::: of int try split
java.util.Spliterator.OfInt#tryAdvance(IntConsumer)->boolean::: of int try advance
java.util.Spliterator.OfInt#forEachRemaining(IntConsumer)->void::: of int for each remaining
java.util.Spliterator.OfInt#tryAdvance(Consumer)->boolean::: of int try advance
java.util.Spliterator.OfInt#forEachRemaining(Consumer)->void::: of int for each remaining
java.util.Spliterator.OfLong#trySplit()->OfLong::: of long try split
java.util.Spliterator.OfLong#tryAdvance(LongConsumer)->boolean::: of long try advance
java.util.Spliterator.OfLong#forEachRemaining(LongConsumer)->void::: of long for each remaining
java.util.Spliterator.OfLong#tryAdvance(Consumer)->boolean::: of long try advance
java.util.Spliterator.OfLong#forEachRemaining(Consumer)->void::: of long for each remaining
java.util.Spliterator.OfDouble#trySplit()->OfDouble::: of double try split
java.util.Spliterator.OfDouble#tryAdvance(DoubleConsumer)->boolean::: of double try advance
java.util.Spliterator.OfDouble#forEachRemaining(DoubleConsumer)->void::: of double for each remaining
java.util.Spliterator.OfDouble#tryAdvance(Consumer)->boolean::: of double try advance
java.util.Spliterator.OfDouble#forEachRemaining(Consumer)->void::: of double for each remaining
java.util.Spliterators#emptySpliterator()->Spliterator:::Creates an empty Spliterator  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
java.util.Spliterators#emptyIntSpliterator()->Spliterator.OfInt:::Creates an empty Spliterator.OfInt  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
java.util.Spliterators#emptyLongSpliterator()->Spliterator.OfLong:::Creates an empty Spliterator.OfLong  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
java.util.Spliterators#emptyDoubleSpliterator()->Spliterator.OfDouble:::Creates an empty Spliterator.OfDouble  The empty spliterator reports Spliterator#SIZED and Spliterator#SUBSIZED
java.util.Spliterators#spliterator(Object[], int)->Spliterator:::Creates a Spliterator covering the elements of a given array, using a customized set of spliterator characteristics
java.util.Spliterators#spliterator(Object[], int, int, int)->Spliterator:::Creates a Spliterator covering a range of elements of a given array, using a customized set of spliterator characteristics
java.util.Spliterators#spliterator(int[], int)->Spliterator.OfInt:::Creates a Spliterator.OfInt covering the elements of a given array, using a customized set of spliterator characteristics
java.util.Spliterators#spliterator(int[], int, int, int)->Spliterator.OfInt:::Creates a Spliterator.OfInt covering a range of elements of a given array, using a customized set of spliterator characteristics
java.util.Spliterators#spliterator(long[], int)->Spliterator.OfLong:::Creates a Spliterator.OfLong covering the elements of a given array, using a customized set of spliterator characteristics
java.util.Spliterators#spliterator(long[], int, int, int)->Spliterator.OfLong:::Creates a Spliterator.OfLong covering a range of elements of a given array, using a customized set of spliterator characteristics
java.util.Spliterators#spliterator(double[], int)->Spliterator.OfDouble:::Creates a Spliterator.OfDouble covering the elements of a given array, using a customized set of spliterator characteristics
java.util.Spliterators#spliterator(double[], int, int, int)->Spliterator.OfDouble:::Creates a Spliterator.OfDouble covering a range of elements of a given array, using a customized set of spliterator characteristics
java.util.Spliterators#spliterator(Collection, int)->Spliterator:::Creates a Spliterator using the given collection's java.util.Collection#iterator() as the source of elements, and reporting its java.util.Collection#size() as its initial size
java.util.Spliterators#spliterator(Iterator, long, int)->Spliterator:::Creates a Spliterator using a given Iterator as the source of elements, and with a given initially reported size
java.util.Spliterators#spliteratorUnknownSize(Iterator, int)->Spliterator:::Creates a Spliterator using a given Iterator as the source of elements, with no initial size estimate
java.util.Spliterators#spliterator(PrimitiveIterator.OfInt, long, int)->Spliterator.OfInt:::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, and with a given initially reported size
java.util.Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfInt, int)->Spliterator.OfInt:::Creates a Spliterator.OfInt using a given IntStream.IntIterator as the source of elements, with no initial size estimate
java.util.Spliterators#spliterator(PrimitiveIterator.OfLong, long, int)->Spliterator.OfLong:::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, and with a given initially reported size
java.util.Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfLong, int)->Spliterator.OfLong:::Creates a Spliterator.OfLong using a given LongStream.LongIterator as the source of elements, with no initial size estimate
java.util.Spliterators#spliterator(PrimitiveIterator.OfDouble, long, int)->Spliterator.OfDouble:::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, and with a given initially reported size
java.util.Spliterators#spliteratorUnknownSize(PrimitiveIterator.OfDouble, int)->Spliterator.OfDouble:::Creates a Spliterator.OfDouble using a given DoubleStream.DoubleIterator as the source of elements, with no initial size estimate
java.util.Spliterators#iterator(Spliterator)->Iterator:::Creates an Iterator from a Spliterator
java.util.Spliterators#iterator(Spliterator.OfInt)->PrimitiveIterator.OfInt:::Creates an PrimitiveIterator.OfInt from a Spliterator.OfInt
java.util.Spliterators#iterator(Spliterator.OfLong)->PrimitiveIterator.OfLong:::Creates an PrimitiveIterator.OfLong from a Spliterator.OfLong
java.util.Spliterators#iterator(Spliterator.OfDouble)->PrimitiveIterator.OfDouble:::Creates an PrimitiveIterator.OfDouble from a Spliterator.OfDouble
java.util.Spliterators.ArraySpliterator#trySplit()->Spliterator::: array spliterator try split
java.util.Spliterators.ArraySpliterator#forEachRemaining(Consumer)->void::: array spliterator for each remaining
java.util.Spliterators.ArraySpliterator#tryAdvance(Consumer)->boolean::: array spliterator try advance
java.util.Spliterators.ArraySpliterator#estimateSize()->long::: array spliterator estimate size
java.util.Spliterators.ArraySpliterator#characteristics()->int::: array spliterator characteristics
java.util.Spliterators.ArraySpliterator#getComparator()->Comparator::: array spliterator get comparator
java.util.Spliterators.IntArraySpliterator#trySplit()->OfInt::: int array spliterator try split
java.util.Spliterators.IntArraySpliterator#forEachRemaining(IntConsumer)->void::: int array spliterator for each remaining
java.util.Spliterators.IntArraySpliterator#tryAdvance(IntConsumer)->boolean::: int array spliterator try advance
java.util.Spliterators.IntArraySpliterator#estimateSize()->long::: int array spliterator estimate size
java.util.Spliterators.IntArraySpliterator#characteristics()->int::: int array spliterator characteristics
java.util.Spliterators.IntArraySpliterator#getComparator()->Comparator::: int array spliterator get comparator
java.util.Spliterators.LongArraySpliterator#trySplit()->OfLong::: long array spliterator try split
java.util.Spliterators.LongArraySpliterator#forEachRemaining(LongConsumer)->void::: long array spliterator for each remaining
java.util.Spliterators.LongArraySpliterator#tryAdvance(LongConsumer)->boolean::: long array spliterator try advance
java.util.Spliterators.LongArraySpliterator#estimateSize()->long::: long array spliterator estimate size
java.util.Spliterators.LongArraySpliterator#characteristics()->int::: long array spliterator characteristics
java.util.Spliterators.LongArraySpliterator#getComparator()->Comparator::: long array spliterator get comparator
java.util.Spliterators.DoubleArraySpliterator#trySplit()->OfDouble::: double array spliterator try split
java.util.Spliterators.DoubleArraySpliterator#forEachRemaining(DoubleConsumer)->void::: double array spliterator for each remaining
java.util.Spliterators.DoubleArraySpliterator#tryAdvance(DoubleConsumer)->boolean::: double array spliterator try advance
java.util.Spliterators.DoubleArraySpliterator#estimateSize()->long::: double array spliterator estimate size
java.util.Spliterators.DoubleArraySpliterator#characteristics()->int::: double array spliterator characteristics
java.util.Spliterators.DoubleArraySpliterator#getComparator()->Comparator::: double array spliterator get comparator
java.util.Spliterators.AbstractSpliterator.HoldingConsumer#accept(T)->void::: holding consumer accept
java.util.Spliterators.AbstractSpliterator#trySplit()->Spliterator:::  This implementation permits limited parallelism.
java.util.Spliterators.AbstractSpliterator#estimateSize()->long::: abstract spliterator estimate size
java.util.Spliterators.AbstractSpliterator#characteristics()->int::: abstract spliterator characteristics
java.util.Spliterators.AbstractIntSpliterator.HoldingIntConsumer#accept(int)->void::: holding int consumer accept
java.util.Spliterators.AbstractIntSpliterator#trySplit()->Spliterator.OfInt:::  This implementation permits limited parallelism.
java.util.Spliterators.AbstractIntSpliterator#estimateSize()->long::: abstract int spliterator estimate size
java.util.Spliterators.AbstractIntSpliterator#characteristics()->int::: abstract int spliterator characteristics
java.util.Spliterators.AbstractLongSpliterator.HoldingLongConsumer#accept(long)->void::: holding long consumer accept
java.util.Spliterators.AbstractLongSpliterator#trySplit()->Spliterator.OfLong:::  This implementation permits limited parallelism.
java.util.Spliterators.AbstractLongSpliterator#estimateSize()->long::: abstract long spliterator estimate size
java.util.Spliterators.AbstractLongSpliterator#characteristics()->int::: abstract long spliterator characteristics
java.util.Spliterators.AbstractDoubleSpliterator.HoldingDoubleConsumer#accept(double)->void::: holding double consumer accept
java.util.Spliterators.AbstractDoubleSpliterator#trySplit()->Spliterator.OfDouble:::  This implementation permits limited parallelism.
java.util.Spliterators.AbstractDoubleSpliterator#estimateSize()->long::: abstract double spliterator estimate size
java.util.Spliterators.AbstractDoubleSpliterator#characteristics()->int::: abstract double spliterator characteristics
java.util.Spliterators.IteratorSpliterator#trySplit()->Spliterator::: iterator spliterator try split
java.util.Spliterators.IteratorSpliterator#forEachRemaining(Consumer)->void::: iterator spliterator for each remaining
java.util.Spliterators.IteratorSpliterator#tryAdvance(Consumer)->boolean::: iterator spliterator try advance
java.util.Spliterators.IteratorSpliterator#estimateSize()->long::: iterator spliterator estimate size
java.util.Spliterators.IteratorSpliterator#characteristics()->int::: iterator spliterator characteristics
java.util.Spliterators.IteratorSpliterator#getComparator()->Comparator::: iterator spliterator get comparator
java.util.Spliterators.IntIteratorSpliterator#trySplit()->OfInt::: int iterator spliterator try split
java.util.Spliterators.IntIteratorSpliterator#forEachRemaining(IntConsumer)->void::: int iterator spliterator for each remaining
java.util.Spliterators.IntIteratorSpliterator#tryAdvance(IntConsumer)->boolean::: int iterator spliterator try advance
java.util.Spliterators.IntIteratorSpliterator#estimateSize()->long::: int iterator spliterator estimate size
java.util.Spliterators.IntIteratorSpliterator#characteristics()->int::: int iterator spliterator characteristics
java.util.Spliterators.IntIteratorSpliterator#getComparator()->Comparator::: int iterator spliterator get comparator
java.util.Spliterators.LongIteratorSpliterator#trySplit()->OfLong::: long iterator spliterator try split
java.util.Spliterators.LongIteratorSpliterator#forEachRemaining(LongConsumer)->void::: long iterator spliterator for each remaining
java.util.Spliterators.LongIteratorSpliterator#tryAdvance(LongConsumer)->boolean::: long iterator spliterator try advance
java.util.Spliterators.LongIteratorSpliterator#estimateSize()->long::: long iterator spliterator estimate size
java.util.Spliterators.LongIteratorSpliterator#characteristics()->int::: long iterator spliterator characteristics
java.util.Spliterators.LongIteratorSpliterator#getComparator()->Comparator::: long iterator spliterator get comparator
java.util.Spliterators.DoubleIteratorSpliterator#trySplit()->OfDouble::: double iterator spliterator try split
java.util.Spliterators.DoubleIteratorSpliterator#forEachRemaining(DoubleConsumer)->void::: double iterator spliterator for each remaining
java.util.Spliterators.DoubleIteratorSpliterator#tryAdvance(DoubleConsumer)->boolean::: double iterator spliterator try advance
java.util.Spliterators.DoubleIteratorSpliterator#estimateSize()->long::: double iterator spliterator estimate size
java.util.Spliterators.DoubleIteratorSpliterator#characteristics()->int::: double iterator spliterator characteristics
java.util.Spliterators.DoubleIteratorSpliterator#getComparator()->Comparator::: double iterator spliterator get comparator
java.util.SplittableRandom#internalNextLong(long, long)->long:::The form of nextLong used by LongStream Spliterators
java.util.SplittableRandom#internalNextInt(int, int)->int:::The form of nextInt used by IntStream Spliterators
java.util.SplittableRandom#internalNextDouble(double, double)->double:::The form of nextDouble used by DoubleStream Spliterators.
java.util.SplittableRandom#split()->SplittableRandom:::Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance
java.util.SplittableRandom#nextBytes(byte[])->void:::Fills a user-supplied byte array with generated pseudorandom bytes.
java.util.SplittableRandom#nextInt()->int:::Returns a pseudorandom int value.
java.util.SplittableRandom#nextInt(int)->int:::Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).
java.util.SplittableRandom#nextInt(int, int)->int:::Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).
java.util.SplittableRandom#nextLong()->long:::Returns a pseudorandom long value.
java.util.SplittableRandom#nextLong(long)->long:::Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).
java.util.SplittableRandom#nextLong(long, long)->long:::Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).
java.util.SplittableRandom#nextDouble()->double:::Returns a pseudorandom double value between zero (inclusive) and one (exclusive).
java.util.SplittableRandom#nextDouble(double)->double:::Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).
java.util.SplittableRandom#nextDouble(double, double)->double:::Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).
java.util.SplittableRandom#nextBoolean()->boolean:::Returns a pseudorandom boolean value.
java.util.SplittableRandom#ints(long)->IntStream:::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it.
java.util.SplittableRandom#ints()->IntStream:::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it.
java.util.SplittableRandom#ints(long, int, int)->IntStream:::Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
java.util.SplittableRandom#ints(int, int)->IntStream:::Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
java.util.SplittableRandom#longs(long)->LongStream:::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it.
java.util.SplittableRandom#longs()->LongStream:::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it.
java.util.SplittableRandom#longs(long, long, long)->LongStream:::Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
java.util.SplittableRandom#longs(long, long)->LongStream:::Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
java.util.SplittableRandom#doubles(long)->DoubleStream:::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
java.util.SplittableRandom#doubles()->DoubleStream:::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).
java.util.SplittableRandom#doubles(long, double, double)->DoubleStream:::Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
java.util.SplittableRandom#doubles(double, double)->DoubleStream:::Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).
java.util.Stack#push(E)->E:::Pushes an item onto the top of this stack
java.util.Stack#pop()->E:::Removes the object at the top of this stack and returns that object as the value of this function.
java.util.Stack#peek()->E:::Looks at the object at the top of this stack without removing it from the stack.
java.util.Stack#empty()->boolean:::Tests if this stack is empty.
java.util.Stack#search(Object)->int:::Returns the 1-based position where an object is on this stack
java.util.StringJoiner#setEmptyValue(CharSequence)->StringJoiner:::Sets the sequence of characters to be used when determining the string representation of this StringJoiner and no elements have been added yet, that is, when it is empty
java.util.StringJoiner#toString()->String:::Returns the current value, consisting of the prefix, the values added so far separated by the delimiter, and the suffix, unless no elements have been added in which case, the prefix + suffix or the emptyValue characters are returned.
java.util.StringJoiner#add(CharSequence)->StringJoiner:::Adds a copy of the given CharSequence value as the next element of the StringJoiner value
java.util.StringJoiner#merge(StringJoiner)->StringJoiner:::Adds the contents of the given StringJoiner without prefix and suffix as the next element if it is non-empty
java.util.StringJoiner#length()->int:::Returns the length of the String representation of this StringJoiner
java.util.StringTokenizer#hasMoreTokens()->boolean:::Tests if there are more tokens available from this tokenizer's string
java.util.StringTokenizer#nextToken()->String:::Returns the next token from this string tokenizer.
java.util.StringTokenizer#nextToken(String)->String:::Returns the next token in this string tokenizer's string
java.util.StringTokenizer#hasMoreElements()->boolean:::Returns the same value as the hasMoreTokens method
java.util.StringTokenizer#nextElement()->Object:::Returns the same value as the nextToken method, except that its declared return value is Object rather than String
java.util.StringTokenizer#countTokens()->int:::Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception
java.util.Timer#schedule(TimerTask, long)->void:::Schedules the specified task for execution after the specified delay.
java.util.Timer#schedule(TimerTask, Date)->void:::Schedules the specified task for execution at the specified time
java.util.Timer#schedule(TimerTask, long, long)->void:::Schedules the specified task for repeated fixed-delay execution, beginning after the specified delay
java.util.Timer#schedule(TimerTask, Date, long)->void:::Schedules the specified task for repeated fixed-delay execution, beginning at the specified time
java.util.Timer#scheduleAtFixedRate(TimerTask, long, long)->void:::Schedules the specified task for repeated fixed-rate execution, beginning after the specified delay
java.util.Timer#scheduleAtFixedRate(TimerTask, Date, long)->void:::Schedules the specified task for repeated fixed-rate execution, beginning at the specified time
java.util.Timer#cancel()->void:::Terminates this timer, discarding any currently scheduled tasks
java.util.Timer#purge()->int:::Removes all cancelled tasks from this timer's task queue
java.util.TimerThread#run()->void::: timer thread run
java.util.TaskQueue#size()->int:::Returns the number of tasks currently on the queue.
java.util.TaskQueue#add(TimerTask)->void:::Adds a new task to the priority queue.
java.util.TaskQueue#getMin()->TimerTask:::Return the "head task" of the priority queue
java.util.TaskQueue#get(int)->TimerTask:::Return the ith task in the priority queue, where i ranges from 1 (the head task, which is returned by getMin) to the number of tasks on the queue, inclusive.
java.util.TaskQueue#removeMin()->void:::Remove the head task from the priority queue.
java.util.TaskQueue#quickRemove(int)->void:::Removes the ith element from queue without regard for maintaining the heap invariant
java.util.TaskQueue#rescheduleMin(long)->void:::Sets the nextExecutionTime associated with the head task to the specified value, and adjusts priority queue accordingly.
java.util.TaskQueue#isEmpty()->boolean:::Returns true if the priority queue contains no elements.
java.util.TaskQueue#clear()->void:::Removes all elements from the priority queue.
java.util.TaskQueue#heapify()->void:::Establishes the heap invariant (described above) in the entire tree, assuming nothing about the order of the elements prior to the call.
java.util.TimerTask#run()->void:::The action to be performed by this timer task.
java.util.TimerTask#cancel()->boolean:::Cancels this timer task
java.util.TimerTask#scheduledExecutionTime()->long:::Returns the scheduled execution time of the most recent actual execution of this task
java.util.TimeZone#getOffset(int, int, int, int, int, int)->int:::Gets the time zone offset, for current date, modified in case of daylight savings
java.util.TimeZone#getOffset(long)->int:::Returns the offset of this time zone from UTC at the specified date
java.util.TimeZone#getOffsets(long, int[])->int:::Gets the raw GMT offset and the amount of daylight saving of this time zone at the given time.
java.util.TimeZone#setRawOffset(int)->void:::Sets the base time zone offset to GMT
java.util.TimeZone#getRawOffset()->int:::Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone
java.util.TimeZone#getID()->String:::Gets the ID of this time zone.
java.util.TimeZone#setID(String)->void:::Sets the time zone ID
java.util.TimeZone#getDisplayName()->String:::Returns a long standard time name of this TimeZone suitable for presentation to the user in the default locale
java.util.TimeZone#getDisplayName(Locale)->String:::Returns a long standard time name of this TimeZone suitable for presentation to the user in the specified locale
java.util.TimeZone#getDisplayName(boolean, int)->String:::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the default locale
java.util.TimeZone#getDisplayName(boolean, int, Locale)->String:::Returns a name in the specified style of this TimeZone suitable for presentation to the user in the specified locale
java.util.TimeZone#getDSTSavings()->int:::Returns the amount of time to be added to local standard time to get local wall clock time
java.util.TimeZone#useDaylightTime()->boolean:::Queries if this TimeZone uses Daylight Saving Time
java.util.TimeZone#observesDaylightTime()->boolean:::Returns true if this TimeZone is currently in Daylight Saving Time, or if a transition from Standard Time to Daylight Saving Time occurs at any future time
java.util.TimeZone#inDaylightTime(Date)->boolean:::Queries if the given date is in Daylight Saving Time in this time zone.
java.util.TimeZone#getTimeZone(String)->TimeZone:::Gets the TimeZone for the given ID.
java.util.TimeZone#getTimeZone(ZoneId)->TimeZone:::Gets the TimeZone for the given zoneId.
java.util.TimeZone#toZoneId()->ZoneId:::Converts this TimeZone object to a ZoneId.
java.util.TimeZone#getAvailableIDs(int)->String[]:::Gets the available IDs according to the given time zone offset in milliseconds.
java.util.TimeZone#getAvailableIDs()->String[]:::Gets all the available IDs supported.
java.util.TimeZone#getDefault()->TimeZone:::Gets the default TimeZone of the Java virtual machine
java.util.TimeZone#getDefaultRef()->TimeZone:::Returns the reference to the default TimeZone object
java.util.TimeZone#setDefault(TimeZone)->void:::Sets the TimeZone that is returned by the getDefault method
java.util.TimeZone#hasSameRules(TimeZone)->boolean:::Returns true if this zone has the same rule and offset as another zone
java.util.TimeZone#clone()->Object:::Creates a copy of this TimeZone.
java.util.TimSort#sort(T[], int, int, Comparator, T[], int, int)->void:::Sorts the given range, using the given workspace array slice for temp storage when possible
java.util.TreeMap#size()->int:::Returns the number of key-value mappings in this map.
java.util.TreeMap#containsKey(Object)->boolean:::Returns true if this map contains a mapping for the specified key.
java.util.TreeMap#containsValue(Object)->boolean:::Returns true if this map maps one or more keys to the specified value
java.util.TreeMap#get(Object)->V:::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
java.util.TreeMap#comparator()->Comparator::: tree map comparator
java.util.TreeMap#firstKey()->K::: tree map first key
java.util.TreeMap#lastKey()->K::: tree map last key
java.util.TreeMap#putAll(Map)->void:::Copies all of the mappings from the specified map to this map
java.util.TreeMap#getEntry(Object)->Entry:::Returns this map's entry for the given key, or null if the map does not contain an entry for the key.
java.util.TreeMap#getEntryUsingComparator(Object)->Entry:::Version of getEntry using comparator
java.util.TreeMap#getCeilingEntry(K)->Entry:::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists (i.e., the greatest key in the Tree is less than the specified key), returns null.
java.util.TreeMap#getFloorEntry(K)->Entry:::Gets the entry corresponding to the specified key; if no such entry exists, returns the entry for the greatest key less than the specified key; if no such entry exists, returns null.
java.util.TreeMap#getHigherEntry(K)->Entry:::Gets the entry for the least key greater than the specified key; if no such entry exists, returns the entry for the least key greater than the specified key; if no such entry exists returns null.
java.util.TreeMap#getLowerEntry(K)->Entry:::Returns the entry for the greatest key less than the specified key; if no such entry exists (i.e., the least key in the Tree is greater than the specified key), returns null.
java.util.TreeMap#put(K, V)->V:::Associates the specified value with the specified key in this map
java.util.TreeMap#remove(Object)->V:::Removes the mapping for this key from this TreeMap if present.
java.util.TreeMap#clear()->void:::Removes all of the mappings from this map
java.util.TreeMap#clone()->Object:::Returns a shallow copy of this TreeMap instance
java.util.TreeMap#firstEntry()->Map.Entry::: tree map first entry
java.util.TreeMap#lastEntry()->Map.Entry::: tree map last entry
java.util.TreeMap#pollFirstEntry()->Map.Entry::: tree map poll first entry
java.util.TreeMap#pollLastEntry()->Map.Entry::: tree map poll last entry
java.util.TreeMap#lowerEntry(K)->Map.Entry::: tree map lower entry
java.util.TreeMap#lowerKey(K)->K::: tree map lower key
java.util.TreeMap#floorEntry(K)->Map.Entry::: tree map floor entry
java.util.TreeMap#floorKey(K)->K::: tree map floor key
java.util.TreeMap#ceilingEntry(K)->Map.Entry::: tree map ceiling entry
java.util.TreeMap#ceilingKey(K)->K::: tree map ceiling key
java.util.TreeMap#higherEntry(K)->Map.Entry::: tree map higher entry
java.util.TreeMap#higherKey(K)->K::: tree map higher key
java.util.TreeMap#keySet()->Set:::Returns a Set view of the keys contained in this map
java.util.TreeMap#navigableKeySet()->NavigableSet::: tree map navigable key set
java.util.TreeMap#descendingKeySet()->NavigableSet::: tree map descending key set
java.util.TreeMap#values()->Collection:::Returns a Collection view of the values contained in this map
java.util.TreeMap#entrySet()->Set>:::Returns a Set view of the mappings contained in this map
java.util.TreeMap#descendingMap()->NavigableMap::: tree map descending map
java.util.TreeMap#subMap(K, boolean, K, boolean)->NavigableMap::: tree map sub map
java.util.TreeMap#headMap(K, boolean)->NavigableMap::: tree map head map
java.util.TreeMap#tailMap(K, boolean)->NavigableMap::: tree map tail map
java.util.TreeMap#subMap(K, K)->SortedMap::: tree map sub map
java.util.TreeMap#headMap(K)->SortedMap::: tree map head map
java.util.TreeMap#tailMap(K)->SortedMap::: tree map tail map
java.util.TreeMap#replace(K, V, V)->boolean::: tree map replace
java.util.TreeMap#replace(K, V)->V::: tree map replace
java.util.TreeMap#forEach(BiConsumer)->void::: tree map for each
java.util.TreeMap#replaceAll(BiFunction)->void::: tree map replace all
java.util.TreeMap.Values#iterator()->Iterator::: values iterator
java.util.TreeMap.Values#size()->int::: values size
java.util.TreeMap.Values#contains(Object)->boolean::: values contains
java.util.TreeMap.Values#remove(Object)->boolean::: values remove
java.util.TreeMap.Values#clear()->void::: values clear
java.util.TreeMap.Values#spliterator()->Spliterator::: values spliterator
java.util.TreeMap.EntrySet#iterator()->Iterator>::: entry set iterator
java.util.TreeMap.EntrySet#contains(Object)->boolean::: entry set contains
java.util.TreeMap.EntrySet#remove(Object)->boolean::: entry set remove
java.util.TreeMap.EntrySet#size()->int::: entry set size
java.util.TreeMap.EntrySet#clear()->void::: entry set clear
java.util.TreeMap.EntrySet#spliterator()->Spliterator>::: entry set spliterator
java.util.TreeMap#keyIterator()->Iterator::: tree map key iterator
java.util.TreeMap#descendingKeyIterator()->Iterator::: tree map descending key iterator
java.util.TreeMap.KeySet#iterator()->Iterator::: key set iterator
java.util.TreeMap.KeySet#descendingIterator()->Iterator::: key set descending iterator
java.util.TreeMap.KeySet#size()->int::: key set size
java.util.TreeMap.KeySet#isEmpty()->boolean::: key set is empty
java.util.TreeMap.KeySet#contains(Object)->boolean::: key set contains
java.util.TreeMap.KeySet#clear()->void::: key set clear
java.util.TreeMap.KeySet#lower(E)->E::: key set lower
java.util.TreeMap.KeySet#floor(E)->E::: key set floor
java.util.TreeMap.KeySet#ceiling(E)->E::: key set ceiling
java.util.TreeMap.KeySet#higher(E)->E::: key set higher
java.util.TreeMap.KeySet#first()->E::: key set first
java.util.TreeMap.KeySet#last()->E::: key set last
java.util.TreeMap.KeySet#comparator()->Comparator::: key set comparator
java.util.TreeMap.KeySet#pollFirst()->E::: key set poll first
java.util.TreeMap.KeySet#pollLast()->E::: key set poll last
java.util.TreeMap.KeySet#remove(Object)->boolean::: key set remove
java.util.TreeMap.KeySet#subSet(E, boolean, E, boolean)->NavigableSet::: key set sub set
java.util.TreeMap.KeySet#headSet(E, boolean)->NavigableSet::: key set head set
java.util.TreeMap.KeySet#tailSet(E, boolean)->NavigableSet::: key set tail set
java.util.TreeMap.KeySet#subSet(E, E)->SortedSet::: key set sub set
java.util.TreeMap.KeySet#headSet(E)->SortedSet::: key set head set
java.util.TreeMap.KeySet#tailSet(E)->SortedSet::: key set tail set
java.util.TreeMap.KeySet#descendingSet()->NavigableSet::: key set descending set
java.util.TreeMap.KeySet#spliterator()->Spliterator::: key set spliterator
java.util.TreeMap.PrivateEntryIterator#hasNext()->boolean::: private entry iterator has next
java.util.TreeMap.PrivateEntryIterator#nextEntry()->Entry::: private entry iterator next entry
java.util.TreeMap.PrivateEntryIterator#prevEntry()->Entry::: private entry iterator prev entry
java.util.TreeMap.PrivateEntryIterator#remove()->void::: private entry iterator remove
java.util.TreeMap.EntryIterator#next()->Map.Entry::: entry iterator next
java.util.TreeMap.ValueIterator#next()->V::: value iterator next
java.util.TreeMap.KeyIterator#next()->K::: key iterator next
java.util.TreeMap.DescendingKeyIterator#next()->K::: descending key iterator next
java.util.TreeMap.DescendingKeyIterator#remove()->void::: descending key iterator remove
java.util.TreeMap#compare(Object, Object)->int:::Compares two keys using the correct comparison method for this TreeMap.
java.util.TreeMap#valEquals(Object, Object)->boolean:::Test two values for equality
java.util.TreeMap#exportEntry(TreeMap.Entry)->Map.Entry:::Return SimpleImmutableEntry for entry, or null if null
java.util.TreeMap#keyOrNull(TreeMap.Entry)->K:::Return key for entry, or null if null
java.util.TreeMap#key(Entry)->K:::Returns the key corresponding to the specified Entry.
java.util.TreeMap.NavigableSubMap#tooLow(Object)->boolean::: navigable sub map too low
java.util.TreeMap.NavigableSubMap#tooHigh(Object)->boolean::: navigable sub map too high
java.util.TreeMap.NavigableSubMap#inRange(Object)->boolean::: navigable sub map in range
java.util.TreeMap.NavigableSubMap#inClosedRange(Object)->boolean::: navigable sub map in closed range
java.util.TreeMap.NavigableSubMap#inRange(Object, boolean)->boolean::: navigable sub map in range
java.util.TreeMap.NavigableSubMap#absLowest()->TreeMap.Entry::: navigable sub map abs lowest
java.util.TreeMap.NavigableSubMap#absHighest()->TreeMap.Entry::: navigable sub map abs highest
java.util.TreeMap.NavigableSubMap#absCeiling(K)->TreeMap.Entry::: navigable sub map abs ceiling
java.util.TreeMap.NavigableSubMap#absHigher(K)->TreeMap.Entry::: navigable sub map abs higher
java.util.TreeMap.NavigableSubMap#absFloor(K)->TreeMap.Entry::: navigable sub map abs floor
java.util.TreeMap.NavigableSubMap#absLower(K)->TreeMap.Entry::: navigable sub map abs lower
java.util.TreeMap.NavigableSubMap#absHighFence()->TreeMap.Entry:::Returns the absolute high fence for ascending traversal
java.util.TreeMap.NavigableSubMap#absLowFence()->TreeMap.Entry:::Return the absolute low fence for descending traversal
java.util.TreeMap.NavigableSubMap#subLowest()->TreeMap.Entry::: navigable sub map sub lowest
java.util.TreeMap.NavigableSubMap#subHighest()->TreeMap.Entry::: navigable sub map sub highest
java.util.TreeMap.NavigableSubMap#subCeiling(K)->TreeMap.Entry::: navigable sub map sub ceiling
java.util.TreeMap.NavigableSubMap#subHigher(K)->TreeMap.Entry::: navigable sub map sub higher
java.util.TreeMap.NavigableSubMap#subFloor(K)->TreeMap.Entry::: navigable sub map sub floor
java.util.TreeMap.NavigableSubMap#subLower(K)->TreeMap.Entry::: navigable sub map sub lower
java.util.TreeMap.NavigableSubMap#keyIterator()->Iterator:::Returns ascending iterator from the perspective of this submap
java.util.TreeMap.NavigableSubMap#keySpliterator()->Spliterator::: navigable sub map key spliterator
java.util.TreeMap.NavigableSubMap#descendingKeyIterator()->Iterator:::Returns descending iterator from the perspective of this submap
java.util.TreeMap.NavigableSubMap#isEmpty()->boolean::: navigable sub map is empty
java.util.TreeMap.NavigableSubMap#size()->int::: navigable sub map size
java.util.TreeMap.NavigableSubMap#containsKey(Object)->boolean::: navigable sub map contains key
java.util.TreeMap.NavigableSubMap#put(K, V)->V::: navigable sub map put
java.util.TreeMap.NavigableSubMap#get(Object)->V::: navigable sub map get
java.util.TreeMap.NavigableSubMap#remove(Object)->V::: navigable sub map remove
java.util.TreeMap.NavigableSubMap#ceilingEntry(K)->Map.Entry::: navigable sub map ceiling entry
java.util.TreeMap.NavigableSubMap#ceilingKey(K)->K::: navigable sub map ceiling key
java.util.TreeMap.NavigableSubMap#higherEntry(K)->Map.Entry::: navigable sub map higher entry
java.util.TreeMap.NavigableSubMap#higherKey(K)->K::: navigable sub map higher key
java.util.TreeMap.NavigableSubMap#floorEntry(K)->Map.Entry::: navigable sub map floor entry
java.util.TreeMap.NavigableSubMap#floorKey(K)->K::: navigable sub map floor key
java.util.TreeMap.NavigableSubMap#lowerEntry(K)->Map.Entry::: navigable sub map lower entry
java.util.TreeMap.NavigableSubMap#lowerKey(K)->K::: navigable sub map lower key
java.util.TreeMap.NavigableSubMap#firstKey()->K::: navigable sub map first key
java.util.TreeMap.NavigableSubMap#lastKey()->K::: navigable sub map last key
java.util.TreeMap.NavigableSubMap#firstEntry()->Map.Entry::: navigable sub map first entry
java.util.TreeMap.NavigableSubMap#lastEntry()->Map.Entry::: navigable sub map last entry
java.util.TreeMap.NavigableSubMap#pollFirstEntry()->Map.Entry::: navigable sub map poll first entry
java.util.TreeMap.NavigableSubMap#pollLastEntry()->Map.Entry::: navigable sub map poll last entry
java.util.TreeMap.NavigableSubMap#navigableKeySet()->NavigableSet::: navigable sub map navigable key set
java.util.TreeMap.NavigableSubMap#keySet()->Set::: navigable sub map key set
java.util.TreeMap.NavigableSubMap#descendingKeySet()->NavigableSet::: navigable sub map descending key set
java.util.TreeMap.NavigableSubMap#subMap(K, K)->SortedMap::: navigable sub map sub map
java.util.TreeMap.NavigableSubMap#headMap(K)->SortedMap::: navigable sub map head map
java.util.TreeMap.NavigableSubMap#tailMap(K)->SortedMap::: navigable sub map tail map
java.util.TreeMap.NavigableSubMap.EntrySetView#size()->int::: entry set view size
java.util.TreeMap.NavigableSubMap.EntrySetView#isEmpty()->boolean::: entry set view is empty
java.util.TreeMap.NavigableSubMap.EntrySetView#contains(Object)->boolean::: entry set view contains
java.util.TreeMap.NavigableSubMap.EntrySetView#remove(Object)->boolean::: entry set view remove
java.util.TreeMap.NavigableSubMap.SubMapIterator#hasNext()->boolean::: sub map iterator has next
java.util.TreeMap.NavigableSubMap.SubMapIterator#nextEntry()->TreeMap.Entry::: sub map iterator next entry
java.util.TreeMap.NavigableSubMap.SubMapIterator#prevEntry()->TreeMap.Entry::: sub map iterator prev entry
java.util.TreeMap.NavigableSubMap.SubMapIterator#removeAscending()->void::: sub map iterator remove ascending
java.util.TreeMap.NavigableSubMap.SubMapIterator#removeDescending()->void::: sub map iterator remove descending
java.util.TreeMap.NavigableSubMap.SubMapEntryIterator#next()->Map.Entry::: sub map entry iterator next
java.util.TreeMap.NavigableSubMap.SubMapEntryIterator#remove()->void::: sub map entry iterator remove
java.util.TreeMap.NavigableSubMap.DescendingSubMapEntryIterator#next()->Map.Entry::: descending sub map entry iterator next
java.util.TreeMap.NavigableSubMap.DescendingSubMapEntryIterator#remove()->void::: descending sub map entry iterator remove
java.util.TreeMap.NavigableSubMap.SubMapKeyIterator#next()->K::: sub map key iterator next
java.util.TreeMap.NavigableSubMap.SubMapKeyIterator#remove()->void::: sub map key iterator remove
java.util.TreeMap.NavigableSubMap.SubMapKeyIterator#trySplit()->Spliterator::: sub map key iterator try split
java.util.TreeMap.NavigableSubMap.SubMapKeyIterator#forEachRemaining(Consumer)->void::: sub map key iterator for each remaining
java.util.TreeMap.NavigableSubMap.SubMapKeyIterator#tryAdvance(Consumer)->boolean::: sub map key iterator try advance
java.util.TreeMap.NavigableSubMap.SubMapKeyIterator#estimateSize()->long::: sub map key iterator estimate size
java.util.TreeMap.NavigableSubMap.SubMapKeyIterator#characteristics()->int::: sub map key iterator characteristics
java.util.TreeMap.NavigableSubMap.SubMapKeyIterator#getComparator()->Comparator::: sub map key iterator get comparator
java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#next()->K::: descending sub map key iterator next
java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#remove()->void::: descending sub map key iterator remove
java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#trySplit()->Spliterator::: descending sub map key iterator try split
java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#forEachRemaining(Consumer)->void::: descending sub map key iterator for each remaining
java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#tryAdvance(Consumer)->boolean::: descending sub map key iterator try advance
java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#estimateSize()->long::: descending sub map key iterator estimate size
java.util.TreeMap.NavigableSubMap.DescendingSubMapKeyIterator#characteristics()->int::: descending sub map key iterator characteristics
java.util.TreeMap.AscendingSubMap#comparator()->Comparator::: ascending sub map comparator
java.util.TreeMap.AscendingSubMap#subMap(K, boolean, K, boolean)->NavigableMap::: ascending sub map sub map
java.util.TreeMap.AscendingSubMap#headMap(K, boolean)->NavigableMap::: ascending sub map head map
java.util.TreeMap.AscendingSubMap#tailMap(K, boolean)->NavigableMap::: ascending sub map tail map
java.util.TreeMap.AscendingSubMap#descendingMap()->NavigableMap::: ascending sub map descending map
java.util.TreeMap.AscendingSubMap#keyIterator()->Iterator::: ascending sub map key iterator
java.util.TreeMap.AscendingSubMap#keySpliterator()->Spliterator::: ascending sub map key spliterator
java.util.TreeMap.AscendingSubMap#descendingKeyIterator()->Iterator::: ascending sub map descending key iterator
java.util.TreeMap.AscendingSubMap.AscendingEntrySetView#iterator()->Iterator>::: ascending entry set view iterator
java.util.TreeMap.AscendingSubMap#entrySet()->Set>::: ascending sub map entry set
java.util.TreeMap.AscendingSubMap#subLowest()->TreeMap.Entry::: ascending sub map sub lowest
java.util.TreeMap.AscendingSubMap#subHighest()->TreeMap.Entry::: ascending sub map sub highest
java.util.TreeMap.AscendingSubMap#subCeiling(K)->TreeMap.Entry::: ascending sub map sub ceiling
java.util.TreeMap.AscendingSubMap#subHigher(K)->TreeMap.Entry::: ascending sub map sub higher
java.util.TreeMap.AscendingSubMap#subFloor(K)->TreeMap.Entry::: ascending sub map sub floor
java.util.TreeMap.AscendingSubMap#subLower(K)->TreeMap.Entry::: ascending sub map sub lower
java.util.TreeMap.DescendingSubMap#comparator()->Comparator::: descending sub map comparator
java.util.TreeMap.DescendingSubMap#subMap(K, boolean, K, boolean)->NavigableMap::: descending sub map sub map
java.util.TreeMap.DescendingSubMap#headMap(K, boolean)->NavigableMap::: descending sub map head map
java.util.TreeMap.DescendingSubMap#tailMap(K, boolean)->NavigableMap::: descending sub map tail map
java.util.TreeMap.DescendingSubMap#descendingMap()->NavigableMap::: descending sub map descending map
java.util.TreeMap.DescendingSubMap#keyIterator()->Iterator::: descending sub map key iterator
java.util.TreeMap.DescendingSubMap#keySpliterator()->Spliterator::: descending sub map key spliterator
java.util.TreeMap.DescendingSubMap#descendingKeyIterator()->Iterator::: descending sub map descending key iterator
java.util.TreeMap.DescendingSubMap.DescendingEntrySetView#iterator()->Iterator>::: descending entry set view iterator
java.util.TreeMap.DescendingSubMap#entrySet()->Set>::: descending sub map entry set
java.util.TreeMap.DescendingSubMap#subLowest()->TreeMap.Entry::: descending sub map sub lowest
java.util.TreeMap.DescendingSubMap#subHighest()->TreeMap.Entry::: descending sub map sub highest
java.util.TreeMap.DescendingSubMap#subCeiling(K)->TreeMap.Entry::: descending sub map sub ceiling
java.util.TreeMap.DescendingSubMap#subHigher(K)->TreeMap.Entry::: descending sub map sub higher
java.util.TreeMap.DescendingSubMap#subFloor(K)->TreeMap.Entry::: descending sub map sub floor
java.util.TreeMap.DescendingSubMap#subLower(K)->TreeMap.Entry::: descending sub map sub lower
java.util.TreeMap.Entry#getKey()->K:::Returns the key.
java.util.TreeMap.Entry#getValue()->V:::Returns the value associated with the key.
java.util.TreeMap.Entry#setValue(V)->V:::Replaces the value currently associated with the key with the given value.
java.util.TreeMap.Entry#equals(Object)->boolean::: entry equals
java.util.TreeMap.Entry#hashCode()->int::: entry hash code
java.util.TreeMap.Entry#toString()->String::: entry to string
java.util.TreeMap#getFirstEntry()->Entry:::Returns the first Entry in the TreeMap (according to the TreeMap's key-sort function)
java.util.TreeMap#getLastEntry()->Entry:::Returns the last Entry in the TreeMap (according to the TreeMap's key-sort function)
java.util.TreeMap#successor(Entry)->TreeMap.Entry:::Returns the successor of the specified Entry, or null if no such.
java.util.TreeMap#predecessor(Entry)->Entry:::Returns the predecessor of the specified Entry, or null if no such.
java.util.TreeMap#readTreeSet(int, java.io.ObjectInputStream, V)->void:::Intended to be called only from TreeSet.readObject
java.util.TreeMap#addAllForTreeSet(SortedSet, V)->void:::Intended to be called only from TreeSet.addAll
java.util.TreeMap#keySpliteratorFor(NavigableMap)->Spliterator:::Currently, we support Spliterator-based versions only for the full map, in either plain of descending form, otherwise relying on defaults because size estimation for submaps would dominate costs
java.util.TreeMap#keySpliterator()->Spliterator::: tree map key spliterator
java.util.TreeMap#descendingKeySpliterator()->Spliterator::: tree map descending key spliterator
java.util.TreeMap.TreeMapSpliterator#getEstimate()->int::: tree map spliterator get estimate
java.util.TreeMap.TreeMapSpliterator#estimateSize()->long::: tree map spliterator estimate size
java.util.TreeMap.KeySpliterator#trySplit()->KeySpliterator::: key spliterator try split
java.util.TreeMap.KeySpliterator#forEachRemaining(Consumer)->void::: key spliterator for each remaining
java.util.TreeMap.KeySpliterator#tryAdvance(Consumer)->boolean::: key spliterator try advance
java.util.TreeMap.KeySpliterator#characteristics()->int::: key spliterator characteristics
java.util.TreeMap.KeySpliterator#getComparator()->Comparator::: key spliterator get comparator
java.util.TreeMap.DescendingKeySpliterator#trySplit()->DescendingKeySpliterator::: descending key spliterator try split
java.util.TreeMap.DescendingKeySpliterator#forEachRemaining(Consumer)->void::: descending key spliterator for each remaining
java.util.TreeMap.DescendingKeySpliterator#tryAdvance(Consumer)->boolean::: descending key spliterator try advance
java.util.TreeMap.DescendingKeySpliterator#characteristics()->int::: descending key spliterator characteristics
java.util.TreeMap.ValueSpliterator#trySplit()->ValueSpliterator::: value spliterator try split
java.util.TreeMap.ValueSpliterator#forEachRemaining(Consumer)->void::: value spliterator for each remaining
java.util.TreeMap.ValueSpliterator#tryAdvance(Consumer)->boolean::: value spliterator try advance
java.util.TreeMap.ValueSpliterator#characteristics()->int::: value spliterator characteristics
java.util.TreeMap.EntrySpliterator#trySpliterator trySplit()->En::: entry spliterator try split
java.util.TreeMap.EntrySpliterator#forEachRemaining(Consumer>)->void::: entry spliterator for each remaining
java.util.TreeMap.EntrySpliterator#tryAdvance(Consumer>)->boolean::: entry spliterator try advance
java.util.TreeMap.EntrySpliterator#characteristics()->int::: entry spliterator characteristics
java.util.TreeMap.EntrySpliterator#getComparator()->Comparator>::: entry spliterator get comparator
java.util.TreeSet#iterator()->Iterator:::Returns an iterator over the elements in this set in ascending order.
java.util.TreeSet#descendingIterator()->Iterator:::Returns an iterator over the elements in this set in descending order.
java.util.TreeSet#descendingSet()->NavigableSet::: tree set descending set
java.util.TreeSet#size()->int:::Returns the number of elements in this set (its cardinality).
java.util.TreeSet#isEmpty()->boolean:::Returns true if this set contains no elements.
java.util.TreeSet#contains(Object)->boolean:::Returns true if this set contains the specified element
java.util.TreeSet#add(E)->boolean:::Adds the specified element to this set if it is not already present
java.util.TreeSet#remove(Object)->boolean:::Removes the specified element from this set if it is present
java.util.TreeSet#clear()->void:::Removes all of the elements from this set
java.util.TreeSet#addAll(Collection)->boolean:::Adds all of the elements in the specified collection to this set.
java.util.TreeSet#subSet(E, boolean, E, boolean)->NavigableSet::: tree set sub set
java.util.TreeSet#headSet(E, boolean)->NavigableSet::: tree set head set
java.util.TreeSet#tailSet(E, boolean)->NavigableSet::: tree set tail set
java.util.TreeSet#subSet(E, E)->SortedSet::: tree set sub set
java.util.TreeSet#headSet(E)->SortedSet::: tree set head set
java.util.TreeSet#tailSet(E)->SortedSet::: tree set tail set
java.util.TreeSet#comparator()->Comparator::: tree set comparator
java.util.TreeSet#first()->E::: tree set first
java.util.TreeSet#last()->E::: tree set last
java.util.TreeSet#lower(E)->E::: tree set lower
java.util.TreeSet#floor(E)->E::: tree set floor
java.util.TreeSet#ceiling(E)->E::: tree set ceiling
java.util.TreeSet#higher(E)->E::: tree set higher
java.util.TreeSet#pollFirst()->E::: tree set poll first
java.util.TreeSet#pollLast()->E::: tree set poll last
java.util.TreeSet#clone()->Object:::Returns a shallow copy of this TreeSet instance
java.util.TreeSet#spliterator()->Spliterator:::Creates a late-binding and fail-fast Spliterator over the elements in this set
java.util.Tripwire#trip(Class, String)->void:::Produces a log warning, using PlatformLogger.getLogger(className), using the supplied message
java.util.UnknownFormatConversionException#getConversion()->String:::Returns the unknown conversion.
java.util.UnknownFormatConversionException#getMessage()->String::: unknown format conversion exception get message
java.util.UnknownFormatFlagsException#getFlags()->String:::Returns the set of flags which contains an unknown flag.
java.util.UnknownFormatFlagsException#getMessage()->String::: unknown format flags exception get message
java.util.UUID#randomUUID()->UUID:::Static factory to retrieve a type 4 (pseudo randomly generated) UUID
java.util.UUID#nameUUIDFromBytes(byte[])->UUID:::Static factory to retrieve a type 3 (name based) UUID based on the specified byte array.
java.util.UUID#fromString(String)->UUID:::Creates a UUID from the string standard representation as described in the #toString method.
java.util.UUID#getLeastSignificantBits()->long:::Returns the least significant 64 bits of this UUID's 128 bit value.
java.util.UUID#getMostSignificantBits()->long:::Returns the most significant 64 bits of this UUID's 128 bit value.
java.util.UUID#version()->int:::The version number associated with this UUID
java.util.UUID#variant()->int:::The variant number associated with this UUID
java.util.UUID#timestamp()->long:::The timestamp value associated with this UUID
java.util.UUID#clockSequence()->int:::The clock sequence value associated with this UUID
java.util.UUID#node()->long:::The node value associated with this UUID
java.util.UUID#toString()->String:::Returns a String object representing this UUID
java.util.UUID#hashCode()->int:::Returns a hash code for this UUID.
java.util.UUID#equals(Object)->boolean:::Compares this object to the specified object
java.util.UUID#compareTo(UUID)->int:::Compares this UUID with the specified UUID
java.util.Vector#copyInto(Object[])->void:::Copies the components of this vector into the specified array
java.util.Vector#trimToSize()->void:::Trims the capacity of this vector to be the vector's current size
java.util.Vector#ensureCapacity(int)->void:::Increases the capacity of this vector, if necessary, to ensure that it can hold at least the number of components specified by the minimum capacity argument
java.util.Vector#setSize(int)->void:::Sets the size of this vector
java.util.Vector#capacity()->int:::Returns the current capacity of this vector.
java.util.Vector#size()->int:::Returns the number of components in this vector.
java.util.Vector#isEmpty()->boolean:::Tests if this vector has no components.
java.util.Vector#elements()->Enumeration:::Returns an enumeration of the components of this vector
java.util.Vector#contains(Object)->boolean:::Returns true if this vector contains the specified element
java.util.Vector#indexOf(Object)->int:::Returns the index of the first occurrence of the specified element in this vector, or -1 if this vector does not contain the element
java.util.Vector#indexOf(Object, int)->int:::Returns the index of the first occurrence of the specified element in this vector, searching forwards from index, or returns -1 if the element is not found
java.util.Vector#lastIndexOf(Object)->int:::Returns the index of the last occurrence of the specified element in this vector, or -1 if this vector does not contain the element
java.util.Vector#lastIndexOf(Object, int)->int:::Returns the index of the last occurrence of the specified element in this vector, searching backwards from index, or returns -1 if the element is not found
java.util.Vector#elementAt(int)->E:::Returns the component at the specified index
java.util.Vector#firstElement()->E:::Returns the first component (the item at index 0) of this vector.
java.util.Vector#lastElement()->E:::Returns the last component of the vector.
java.util.Vector#setElementAt(E, int)->void:::Sets the component at the specified index of this vector to be the specified object
java.util.Vector#removeElementAt(int)->void:::Deletes the component at the specified index
java.util.Vector#insertElementAt(E, int)->void:::Inserts the specified object as a component in this vector at the specified index
java.util.Vector#addElement(E)->void:::Adds the specified component to the end of this vector, increasing its size by one
java.util.Vector#removeElement(Object)->boolean:::Removes the first (lowest-indexed) occurrence of the argument from this vector
java.util.Vector#removeAllElements()->void:::Removes all components from this vector and sets its size to zero
java.util.Vector#clone()->Object:::Returns a clone of this vector
java.util.Vector#toArray()->Object[]:::Returns an array containing all of the elements in this Vector in the correct order.
java.util.Vector#toArray(T[])->T[]:::Returns an array containing all of the elements in this Vector in the correct order; the runtime type of the returned array is that of the specified array
java.util.Vector#elementData(int)->E::: vector element data
java.util.Vector#elementAt(Object[], int)->E::: vector element at
java.util.Vector#get(int)->E:::Returns the element at the specified position in this Vector.
java.util.Vector#set(int, E)->E:::Replaces the element at the specified position in this Vector with the specified element.
java.util.Vector#add(E)->boolean:::Appends the specified element to the end of this Vector.
java.util.Vector#remove(Object)->boolean:::Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element, it is unchanged
java.util.Vector#add(int, E)->void:::Inserts the specified element at the specified position in this Vector
java.util.Vector#remove(int)->E:::Removes the element at the specified position in this Vector
java.util.Vector#clear()->void:::Removes all of the elements from this Vector
java.util.Vector#containsAll(Collection)->boolean:::Returns true if this Vector contains all of the elements in the specified Collection.
java.util.Vector#addAll(Collection)->boolean:::Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator
java.util.Vector#removeAll(Collection)->boolean:::Removes from this Vector all of its elements that are contained in the specified Collection.
java.util.Vector#retainAll(Collection)->boolean:::Retains only the elements in this Vector that are contained in the specified Collection
java.util.Vector#removeIf(Predicate)->boolean::: vector remove if
java.util.Vector#addAll(int, Collection)->boolean:::Inserts all of the elements in the specified Collection into this Vector at the specified position
java.util.Vector#equals(Object)->boolean:::Compares the specified Object with this Vector for equality
java.util.Vector#hashCode()->int:::Returns the hash code value for this Vector.
java.util.Vector#toString()->String:::Returns a string representation of this Vector, containing the String representation of each element.
java.util.Vector#subList(int, int)->List:::Returns a view of the portion of this List between fromIndex, inclusive, and toIndex, exclusive
java.util.Vector#removeRange(int, int)->void:::Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive
java.util.Vector#listIterator(int)->ListIterator:::Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list
java.util.Vector#listIterator()->ListIterator:::Returns a list iterator over the elements in this list (in proper sequence)
java.util.Vector#iterator()->Iterator:::Returns an iterator over the elements in this list in proper sequence
java.util.Vector.ListItr#hasPrevious()->boolean::: list itr has previous
java.util.Vector.ListItr#nextIndex()->int::: list itr next index
java.util.Vector.ListItr#previousIndex()->int::: list itr previous index
java.util.Vector.ListItr#previous()->E::: list itr previous
java.util.Vector.ListItr#set(E)->void::: list itr set
java.util.Vector.ListItr#add(E)->void::: list itr add
java.util.Vector#forEach(Consumer)->void::: vector for each
java.util.Vector#replaceAll(UnaryOperator)->void::: vector replace all
java.util.Vector#sort(Comparator)->void::: vector sort
java.util.Vector#spliterator()->Spliterator:::Creates a late-binding and fail-fast Spliterator over the elements in this list
java.util.Vector.VectorSpliterator#trySplit()->Spliterator::: vector spliterator try split
java.util.Vector.VectorSpliterator#tryAdvance(Consumer)->boolean::: vector spliterator try advance
java.util.Vector.VectorSpliterator#forEachRemaining(Consumer)->void::: vector spliterator for each remaining
java.util.Vector.VectorSpliterator#estimateSize()->long::: vector spliterator estimate size
java.util.Vector.VectorSpliterator#characteristics()->int::: vector spliterator characteristics
java.util.Vector#checkInvariants()->void::: vector check invariants
java.util.WeakHashMap#unmaskNull(Object)->Object:::Returns internal representation of null key back to caller as null.
java.util.WeakHashMap#hash(Object)->int:::Retrieve object hash code and applies a supplemental hash function to the result hash, which defends against poor quality hash functions
java.util.WeakHashMap#size()->int:::Returns the number of key-value mappings in this map
java.util.WeakHashMap#isEmpty()->boolean:::Returns true if this map contains no key-value mappings
java.util.WeakHashMap#get(Object)->V:::Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key
java.util.WeakHashMap#containsKey(Object)->boolean:::Returns true if this map contains a mapping for the specified key.
java.util.WeakHashMap#getEntry(Object)->Entry:::Returns the entry associated with the specified key in this map
java.util.WeakHashMap#put(K, V)->V:::Associates the specified value with the specified key in this map
java.util.WeakHashMap#resize(int)->void:::Rehashes the contents of this map into a new array with a larger capacity
java.util.WeakHashMap#putAll(Map)->void:::Copies all of the mappings from the specified map to this map
java.util.WeakHashMap#remove(Object)->V:::Removes the mapping for a key from this weak hash map if it is present
java.util.WeakHashMap#removeMapping(Object)->boolean:::Special version of remove needed by Entry set
java.util.WeakHashMap#clear()->void:::Removes all of the mappings from this map
java.util.WeakHashMap#containsValue(Object)->boolean:::Returns true if this map maps one or more keys to the specified value.
java.util.WeakHashMap#keySet()->Set:::Returns a Set view of the keys contained in this map
java.util.WeakHashMap#values()->Collection:::Returns a Collection view of the values contained in this map
java.util.WeakHashMap#entrySet()->Set>:::Returns a Set view of the mappings contained in this map
java.util.WeakHashMap#forEach(BiConsumer)->void::: weak hash map for each
java.util.WeakHashMap#replaceAll(BiFunction)->void::: weak hash map replace all
java.util.WeakHashMap.WeakHashMapSpliterator#getFence()->int::: weak hash map spliterator get fence
java.util.WeakHashMap.WeakHashMapSpliterator#estimateSize()->long::: weak hash map spliterator estimate size
java.util.WeakHashMap.KeySpliterator#trySplit()->KeySpliterator::: key spliterator try split
java.util.WeakHashMap.KeySpliterator#forEachRemaining(Consumer)->void::: key spliterator for each remaining
java.util.WeakHashMap.KeySpliterator#tryAdvance(Consumer)->boolean::: key spliterator try advance
java.util.WeakHashMap.KeySpliterator#characteristics()->int::: key spliterator characteristics
java.util.WeakHashMap.ValueSpliterator#trySplit()->ValueSpliterator::: value spliterator try split
java.util.WeakHashMap.ValueSpliterator#forEachRemaining(Consumer)->void::: value spliterator for each remaining
java.util.WeakHashMap.ValueSpliterator#tryAdvance(Consumer)->boolean::: value spliterator try advance
java.util.WeakHashMap.ValueSpliterator#characteristics()->int::: value spliterator characteristics
java.util.WeakHashMap.EntrySpliterator#trySpliterator trySplit()->En::: entry spliterator try split
java.util.WeakHashMap.EntrySpliterator#forEachRemaining(Consumer>)->void::: entry spliterator for each remaining
java.util.WeakHashMap.EntrySpliterator#tryAdvance(Consumer>)->boolean::: entry spliterator try advance
java.util.WeakHashMap.EntrySpliterator#characteristics()->int::: entry spliterator characteristics

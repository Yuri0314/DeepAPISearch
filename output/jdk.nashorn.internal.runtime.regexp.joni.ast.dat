AnchorNode#getType()::: anchor node get type:::return
AnchorNode#setChild(Node)::: anchor node set child:::
AnchorNode#getChild()::: anchor node get child:::return
AnchorNode#setTarget(Node)::: anchor node set target:::
AnchorNode#getName()::: anchor node get name:::return
AnchorNode#toString(int)::: anchor node to string:::value->new->StringBuilder->value->append->typeToString->append->value->append->pad->append->return->value->toString
AnchorNode#typeToString()::: anchor node type to string:::sb->new->StringBuilder->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->if->isType->sb->append->return->sb->toString
AnchorNode#isType(int)::: anchor node is type:::return
AnyCharNode#getType()::: any char node get type:::return
AnyCharNode#getName()::: any char node get name:::return
AnyCharNode#toString(int)::: any char node to string:::value->return
BackRefNode#getType()::: back ref node get type:::return
BackRefNode#getName()::: back ref node get name:::return
BackRefNode#toString(int)::: back ref node to string:::value->super->toString->new->StringBuilder->value->append->append->return->value->toString
CClassNode#clear()::: class node clear:::bs->clear
CClassNode#getType()::: class node get type:::return
CClassNode#getName()::: class node get name:::return
CClassNode#equals(Object)::: class node equals:::if->return->cc->return->isNot->cc->isNot
CClassNode#hashCode()::: class node hash code:::if->hash->if->isNot->return->return->super->hashCode
CClassNode#toString(int)::: class node to string:::value->new->StringBuilder->value->append->flagsToString->append->value->append->pad->append->value->append->pad->append->return->value->toString
CClassNode#flagsToString()::: class node flags to string:::f->new->StringBuilder->if->isNot->f->append->if->isShare->f->append->return->f->toString
CClassNode#isEmpty()::: class node is empty:::return->bs->isEmpty
CClassNode#addCodeRangeToBuf(int, int)::: class node add code range to buf:::CodeRangeBuffer->addCodeRangeToBuff
CClassNode#addCodeRange(ScanEnvironment, int, int)::: class node add code range:::CodeRangeBuffer->addCodeRange
CClassNode#addAllMultiByteRange()::: class node add all multi byte range:::CodeRangeBuffer->addAllMultiByteRange
CClassNode#clearNotFlag()::: class node clear not flag:::if->isNot->bs->invert->CodeRangeBuffer->notCodeRangeBuff->clearNot
CClassNode#and(CClassNode)::: class node and:::not1->isNot->bsr1->buf1->not2->other->isNot->bsr2->buf2->if->bs1->new->BitSet->bsr1->invertTo->if->bs2->new->BitSet->bsr2->invertTo->bsr1->and->if->bs->copy->if->bs->invert->pbuf->if->CodeRangeBuffer->orCodeRangeBuff->else->CodeRangeBuffer->andCodeRangeBuff->if->CodeRangeBuffer->notCodeRangeBuff
CClassNode#or(CClassNode)::: class node or:::not1->isNot->bsr1->buf1->not2->other->isNot->bsr2->buf2->if->bs1->new->BitSet->bsr1->invertTo->if->bs2->new->BitSet->bsr2->invertTo->bsr1->or->if->bs->copy->if->bs->invert->pbuf->if->CodeRangeBuffer->andCodeRangeBuff->else->CodeRangeBuffer->orCodeRangeBuff->if->CodeRangeBuffer->notCodeRangeBuff
CClassNode#addCTypeByRange(int, boolean, int, int[])::: class node add type by range:::n->if->for->i->for->i->else->prev->for->i->for->j->for->i->if->addCodeRangeToBuf
CClassNode#addCType(int, boolean, ScanEnvironment, IntHolder)::: class node add type:::ct->if->switch->if->break->if->for->c->addAllMultiByteRange->else->for->c->return->break->ranges->EncodingHelper->ctypeCodeRange->if->addCTypeByRange->return->switch->if->for->c->addAllMultiByteRange->else->for->c->break->if->for->c->else->for->c->addAllMultiByteRange->break->if->for->c->addAllMultiByteRange->else->for->c->break->throw->new->InternalException
CClassNode#nextStateClass(CCStateArg, ScanEnvironment)::: class node next state class:::if->throw->new->SyntaxException->if->if->bs->set->else->if->addCodeRange
CClassNode#nextStateValue(CCStateArg, ScanEnvironment)::: class node next state value:::switch->if->if->throw->new->ValueException->bs->set->else->if->addCodeRange->break->if->if->if->throw->new->ValueException->if->if->allowEmptyRangeInCC->break->throw->new->ValueException->bs->setRange->else->addCodeRange->else->if->if->allowEmptyRangeInCC->break->throw->new->ValueException->bs->setRange->addCodeRange->break->break->break
CClassNode#isCodeInCCLength(int)::: class node is code in length:::found->if->mbuf->isInCodeRange->else->bs->at->if->isNot->return->return
CClassNode#isCodeInCC(int)::: class node is code in c:::return->isCodeInCCLength
CClassNode#setNot()::: class node set not:::
CClassNode#clearNot()::: class node clear not:::
CClassNode#isNot()::: class node is not:::return
CClassNode#setShare()::: class node set share:::
CClassNode#clearShare()::: class node clear share:::
CClassNode#isShare()::: class node is share:::return
ConsAltNode#newAltNode(Node, ConsAltNode)::: cons alt node new alt node:::return->new->ConsAltNode
ConsAltNode#newListNode(Node, ConsAltNode)::: cons alt node new list node:::return->new->ConsAltNode
ConsAltNode#listAdd(ConsAltNode, Node)::: cons alt node list add:::n->newListNode->list->if->while->list->setCdr->return
ConsAltNode#toListNode()::: cons alt node to list node:::
ConsAltNode#toAltNode()::: cons alt node to alt node:::
ConsAltNode#getType()::: cons alt node get type:::return
ConsAltNode#setChild(Node)::: cons alt node set child:::
ConsAltNode#getChild()::: cons alt node get child:::return
ConsAltNode#swap(Node)::: cons alt node swap:::if->if->withCan->tmp->super->swap
ConsAltNode#verifyTree(Set, WarnCallback)::: cons alt node verify tree:::if->set->contains->set->add->if->if->warnings->this->getAddressName->car->getAddressName->warn->car->verifyTree->if->if->warnings->this->getAddressName->cdr->getAddressName->warn->cdr->verifyTree
ConsAltNode#setCar(Node)::: cons alt node set car:::return
ConsAltNode#setCdr(ConsAltNode)::: cons alt node set cdr:::return
ConsAltNode#getName()::: cons alt node get name:::switch->return->return->throw->new->InternalException
ConsAltNode#toString(int)::: cons alt node to string:::value->new->StringBuilder->value->append->pad->append->value->append->cdr->toString->append->return->value->toString
EncloseNode#getType()::: enclose node get type:::return
EncloseNode#setChild(Node)::: enclose node set child:::
EncloseNode#getChild()::: enclose node get child:::return
EncloseNode#setTarget(Node)::: enclose node set target:::
EncloseNode#getName()::: enclose node get name:::return
EncloseNode#toString(int)::: enclose node to string:::value->super->toString->new->StringBuilder->value->append->typeToString->append->value->append->append->value->append->Option->toString->append->value->append->pad->append->value->append->append->value->append->append->value->append->append->value->append->append->value->append->append->return->value->toString
EncloseNode#typeToString()::: enclose node type to string:::types->new->StringBuilder->if->isStopBacktrack->types->append->if->isMemory->types->append->if->isOption->types->append->return->types->toString
EncloseNode#isMemory()::: enclose node is memory:::return
EncloseNode#isOption()::: enclose node is option:::return
EncloseNode#isStopBacktrack()::: enclose node is stop backtrack:::return
Node#getType()::: node get type:::
Node#getType2Bit()::: node get type2 bit:::return->getType
Node#setChild(Node)::: node set child:::
Node#getChild()::: node get child:::return
Node#swap(Node)::: node swap:::tmp->if->parent->setChild->if->setChild
Node#verifyTree(Set, WarnCallback)::: node verify tree:::if->set->contains->getChild->set->add->if->getChild->warnings->this->getAddressName->getChild->getAddressName->warn->getChild->verifyTree
Node#getName()::: node get name:::
Node#toString(int)::: node to string:::
Node#getAddressName()::: node get address name:::return->getName->Integer->System->identityHashCode->toHexString
Node#toString()::: node to string:::s->new->StringBuilder->s->append->getAddressName->append->append->parent->getAddressName->append->append->return->toString
Node#pad(Object, int)::: node pad:::if->return->pad->new->StringBuilder->for->i->return->value->toString->replace
Node#isInvalidQuantifier()::: node is invalid quantifier:::if->return->node->switch->getType->return->break->do->if->isInvalidQuantifier->return->while->return->do->if->isInvalidQuantifier->return->while->break->break->return
Node#isAllowedInLookBehind()::: node is allowed in look behind:::return->getType2Bit
Node#isSimple()::: node is simple:::return->getType2Bit
QuantifierNode#getType()::: quantifier node get type:::return
QuantifierNode#setChild(Node)::: quantifier node set child:::
QuantifierNode#getChild()::: quantifier node get child:::return
QuantifierNode#setTarget(Node)::: quantifier node set target:::
QuantifierNode#convertToString(int)::: quantifier node convert to string:::sn->new->StringNode->sn->swap->return
QuantifierNode#getName()::: quantifier node get name:::return
QuantifierNode#toString(int)::: quantifier node to string:::value->super->toString->new->StringBuilder->value->append->pad->append->value->append->append->value->append->append->value->append->append->value->append->append->value->append->pad->append->value->append->pad->append->value->append->append->return->value->toString
QuantifierNode#isAnyCharStar()::: quantifier node is any char star:::return->isRepeatInfinite->target->getType
QuantifierNode#popularNum()::: quantifier node popular num:::if->if->if->return->else->if->isRepeatInfinite->return->else->if->if->isRepeatInfinite->return->else->if->if->return->else->if->isRepeatInfinite->return->else->if->if->isRepeatInfinite->return->return
QuantifierNode#set(QuantifierNode)::: quantifier node set:::setTarget
QuantifierNode#reduceNestedQuantifier(QuantifierNode)::: quantifier node reduce nested quantifier:::pnum->popularNum->cnum->other->popularNum->if->return->switch->set->break->setTarget->break->setTarget->break->setTarget->break->setTarget->return->setTarget->return->setTarget->return->break
QuantifierNode#setQuantifier(Node, boolean, ScanEnvironment, char[], int, int)::: quantifier node set quantifier:::if->return->switch->tgt->getType->if->sn->if->sn->canBeSplit->n->sn->splitLastChar->if->setTarget->return->break->qnt->nestQNum->popularNum->targetQNum->qnt->popularNum->if->if->isByNumber->qnt->isByNumber->warnReduntantNestedRepeat->switch->break->getWarnings->new->String->warn->break->getWarnings->new->String->ordinal->warn->if->if->reduceNestedQuantifier->return->else->if->if->isRepeatInfinite->break->setTarget->return
QuantifierNode#isRepeatInfinite(int)::: quantifier node is repeat infinite:::return
StateNode#toString(int)::: state node to string:::return->stateToString
StateNode#stateToString()::: state node state to string:::states->new->StringBuilder->if->isMinFixed->states->append->if->isMaxFixed->states->append->if->isMark1->states->append->if->isMark2->states->append->if->isMemBackrefed->states->append->if->isStopBtSimpleRepeat->states->append->if->isRecursion->states->append->if->isCalled->states->append->if->isAddrFixed->states->append->if->isInRepeat->states->append->if->isNestLevel->states->append->if->isByNumber->states->append->return->states->toString
StateNode#isMinFixed()::: state node is min fixed:::return
StateNode#setMinFixed()::: state node set min fixed:::
StateNode#isMaxFixed()::: state node is max fixed:::return
StateNode#setMaxFixed()::: state node set max fixed:::
StateNode#isCLenFixed()::: state node is len fixed:::return
StateNode#setCLenFixed()::: state node set len fixed:::
StateNode#isMark1()::: state node is mark1:::return
StateNode#setMark1()::: state node set mark1:::
StateNode#isMark2()::: state node is mark2:::return
StateNode#setMark2()::: state node set mark2:::
StateNode#clearMark2()::: state node clear mark2:::
StateNode#isMemBackrefed()::: state node is mem backrefed:::return
StateNode#setMemBackrefed()::: state node set mem backrefed:::
StateNode#isStopBtSimpleRepeat()::: state node is stop bt simple repeat:::return
StateNode#setStopBtSimpleRepeat()::: state node set stop bt simple repeat:::
StateNode#isRecursion()::: state node is recursion:::return
StateNode#setRecursion()::: state node set recursion:::
StateNode#isCalled()::: state node is called:::return
StateNode#setCalled()::: state node set called:::
StateNode#isAddrFixed()::: state node is addr fixed:::return
StateNode#setAddrFixed()::: state node set addr fixed:::
StateNode#isInRepeat()::: state node is in repeat:::return
StateNode#setInRepeat()::: state node set in repeat:::
StateNode#isNestLevel()::: state node is nest level:::return
StateNode#setNestLevel()::: state node set nest level:::
StateNode#isByNumber()::: state node is by number:::return
StateNode#setByNumber()::: state node set by number:::
StringNode#createEmpty():::Create a new empty StringNode.:::return->new->StringNode
StringNode#ensure(int)::: string node ensure:::len->if->tmp->new->charArr->System->arraycopy
StringNode#modifyEnsure(int)::: string node modify ensure:::if->isShared->len->tmp->new->charArr->System->arraycopy->clearShared->else->ensure
StringNode#getType()::: string node get type:::return
StringNode#getName()::: string node get name:::return
StringNode#toString(int)::: string node to string:::value->new->StringBuilder->value->append->for->i->value->append->return->value->toString
StringNode#length()::: string node length:::return
StringNode#splitLastChar()::: string node split last char:::n->if->prev->EncodingHelper->prevCharHead->if->new->StringNode->if->isRaw->n->setRaw->return
StringNode#canBeSplit()::: string node can be split:::return
StringNode#set(char[], int, int)::: string node set:::setShared
StringNode#cat(char[], int, int)::: string node cat:::len->modifyEnsure->System->arraycopy
StringNode#cat(char)::: string node cat:::modifyEnsure
StringNode#catCode(int)::: string node cat code:::cat
StringNode#clear()::: string node clear:::if->new->charArr
StringNode#setRaw()::: string node set raw:::
StringNode#clearRaw()::: string node clear raw:::
StringNode#isRaw()::: string node is raw:::return
StringNode#setAmbig()::: string node set ambig:::
StringNode#clearAmbig()::: string node clear ambig:::
StringNode#isAmbig()::: string node is ambig:::return
StringNode#setDontGetOptInfo()::: string node set dont get opt info:::
StringNode#clearDontGetOptInfo()::: string node clear dont get opt info:::
StringNode#isDontGetOptInfo()::: string node is dont get opt info:::return
StringNode#setShared()::: string node set shared:::
StringNode#clearShared()::: string node clear shared:::
StringNode#isShared()::: string node is shared:::return

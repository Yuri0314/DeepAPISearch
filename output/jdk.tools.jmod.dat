JmodOutputStream#newOutputStream(Path):::This method creates (or overrides, if exists) the JMOD file, returning the the output stream to write to the JMOD file.:::out->Files->newOutputStream->bos->new->BufferedOutputStream->return->new->JmodOutputStream
JmodOutputStream#writeEntry(InputStream, Section, String):::Writes the input stream to the named entry of the given section.:::ze->newEntry->zos->putNextEntry->in->transferTo->zos->closeEntry
JmodOutputStream#writeEntry(byte[], Section, String):::Writes the given bytes to the named entry of the given section.:::ze->newEntry->zos->putNextEntry->zos->write->zos->closeEntry
JmodOutputStream#writeEntry(InputStream, Entry):::Writes the given entry to the given input stream.:::zos->e->zipEntry->putNextEntry->zos->in->readAllBytes->write->zos->closeEntry
JmodOutputStream#newEntry(Section, String)::: jmod output stream new entry:::prefix->section->jmodDir->name->Paths->get->toString->replace->return->new->ZipEntry
JmodOutputStream#write(int)::: jmod output stream write:::zos->write
JmodOutputStream#close()::: jmod output stream close:::zos->close
JmodTask.CommandException#showUsage(boolean)::: command exception show usage:::return
JmodTask.CommandException#getMessageOrKey(String, Object...)::: command exception get message or key:::try->return->MessageFormat->getString->format->catch->return->finally
JmodTask#setLog(PrintWriter, PrintWriter)::: jmod task set log:::
JmodTask#run(String[])::: jmod task run:::try->handleOptions->if->showUsageSummary->return->if->showHelp->return->if->showVersion->return->ok->switch->create->break->extract->break->list->break->describe->break->hashModules->break->throw->name->new->AssertionError->return->catch->e->getMessage->reportError->if->showUsageSummary->return->x->getMessage->reportError->x->printStackTrace->return->finally->out->flush
JmodTask#list()::: jmod task list:::zip->try->try->toFile->new->ZipFile->catch->throw->new->IOException->finally->zip->stream->out->e->getName->println->forEach->return->catch->finally->if->zip->close
JmodTask#extract()::: jmod task extract:::dir->try->jf->new->JmodFile->jf->stream->try->entry->e->zipEntry->name->entry->getName->index->name->lastIndexOf->if->p->dir->name->substring->resolve->if->Files->notExists->Files->createDirectories->try->os->Files->dir->resolve->newOutputStream->jf->getInputStream->transferTo->catch->finally->catch->throw->new->UncheckedIOException->finally->forEach->return->catch->finally
JmodTask#hashModules()::: jmod task hash modules:::if->out->println->hasher->new->Hasher->hasher->computeHashes->if->out->format->hashes->names->stream->sorted->out->hashes->algorithm->hashes->hashFor->toHex->format->forEach->else->try->hasher->updateModuleInfo->catch->throw->new->UncheckedIOException->finally->forEach->return
JmodTask#describe()::: jmod task describe:::try->jf->new->JmodFile->try->in->jf->getInputStream->attrs->ModuleInfo->read->attrs->descriptor->attrs->target->attrs->recordedHashes->describeModule->return->catch->throw->new->CommandException->finally->catch->finally
JmodTask#toLowerCaseString(Collection)::: jmod task to lower case string:::if->c->isEmpty->return->return->c->stream->e->toString->toLowerCase->map->sorted->joining->collect
JmodTask#toString(Collection)::: jmod task to string:::if->c->isEmpty->return->return->c->stream->e->toString->map->sorted->joining->collect
JmodTask#describeModule(ModuleDescriptor, ModuleTarget, ModuleHashes)::: jmod task describe module:::sb->new->StringBuilder->sb->md->toNameAndVersion->append->if->md->isOpen->sb->append->if->md->isAutomatic->sb->append->sb->append->md->exports->stream->Comparator->Exports->source->comparing->sorted->e->isQualified->filter->sb->append->e->source->append->e->modifiers->toLowerCaseString->append->append->forEach->md->requires->stream->sorted->sb->append->r->name->append->r->modifiers->toLowerCaseString->append->append->forEach->md->uses->stream->sorted->sb->append->append->append->forEach->md->provides->stream->Comparator->Provides->service->comparing->sorted->sb->append->p->service->append->append->p->providers->toString->append->append->forEach->md->exports->stream->Comparator->Exports->source->comparing->sorted->Exports->isQualified->filter->sb->append->e->source->append->append->e->targets->toLowerCaseString->append->append->forEach->md->opens->stream->Comparator->Opens->source->comparing->sorted->o->isQualified->filter->sb->append->o->source->append->o->modifiers->toLowerCaseString->append->append->forEach->md->opens->stream->Comparator->Opens->source->comparing->sorted->Opens->isQualified->filter->sb->append->o->source->append->o->modifiers->toLowerCaseString->append->append->o->targets->toLowerCaseString->append->append->forEach->concealed->md->packages->new->TreeSet<>->md->exports->stream->Exports->source->map->concealed->remove->forEach->md->opens->stream->Opens->source->map->concealed->remove->forEach->concealed->sb->append->append->append->forEach->md->mainClass->sb->append->append->append->ifPresent->if->targetPlatform->target->targetPlatform->if->targetPlatform->isEmpty->sb->append->append->append->if->hashes->names->stream->sorted->sb->append->append->append->hashes->algorithm->append->append->hashes->hashFor->toHex->append->append->forEach->out->sb->toString->println
JmodTask#toHex(byte[])::: jmod task to hex:::sb->new->StringBuilder->foreach->sb->String->format->append->return->sb->toString
JmodTask#create()::: jmod task create:::jmod->new->JmodFileWriter->target->tempTarget->jmodTempFilePath->try->try->jos->JmodOutputStream->newOutputStream->jmod->write->catch->finally->Files->move->catch->try->Files->deleteIfExists->catch->e->addSuppressed->finally->throw->finally->return
JmodTask#jmodTempFilePath(Path)::: jmod task jmod temp file path:::return->target->target->getFileName->resolveSibling
JmodTask.JmodFileWriter#write(JmodOutputStream):::Writes the jmod to the given output stream.:::findPackages->writeModuleInfo->processClasses->processSection->processSection->processSection->processSection->processSection->processSection
JmodTask.JmodFileWriter#newModuleInfoSupplier():::Returns a supplier of an input stream to the module-info.class on the class path of directories and JAR files.:::baos->new->ByteArrayOutputStream->foreach->if->Files->isDirectory->mi->e->resolve->if->Files->isRegularFile->Files->copy->break->else->if->Files->isRegularFile->e->toString->endsWith->try->jf->e->toFile->new->JarFile->entry->jf->getEntry->if->jf->getInputStream->transferTo->break->catch->finally->if->baos->size->return->else->bytes->baos->toByteArray->return->new->ByteArrayInputStream
JmodTask.JmodFileWriter#writeModuleInfo(JmodOutputStream, Set):::Writes the updated module-info.class to the ZIP output stream:::miSupplier->newModuleInfoSupplier->if->throw->new->IOException->descriptor->try->in->miSupplier->get->ModuleDescriptor->read->catch->finally->try->in->miSupplier->get->extender->ModuleInfoExtender->newExtender->if->validatePackages->extender->packages->if->extender->mainClass->if->extender->targetPlatform->if->extender->version->if->md->try->is->miSupplier->get->ModuleDescriptor->read->catch->finally->moduleHashes->computeHashes->if->extender->hashes->else->descriptor->name->warning->if->moduleResolution->value->extender->moduleResolution->out->extender->toByteArray->writeEntry->catch->finally
JmodTask.JmodFileWriter#validatePackages(ModuleDescriptor, Set)::: jmod file writer validate packages:::nonExistPackages->new->TreeSet<>->descriptor->exports->stream->Exports->source->map->packages->contains->filter->nonExistPackages->add->forEach->descriptor->opens->stream->Opens->source->map->packages->contains->filter->nonExistPackages->add->forEach->if->nonExistPackages->isEmpty->throw->descriptor->name->new->CommandException
JmodTask.JmodFileWriter#computeHashes(ModuleDescriptor)::: jmod file writer compute hashes:::mn->descriptor->name->uri->toUri->mref->new->ModuleReference->finder->ModuleFinder->new->ModuleFinder->compose->return->new->Hasher->computeHashes->get
JmodTask.JmodFileWriter#findPackages(List):::Returns the set of all packages on the given class path.:::packages->new->HashSet<>->foreach->if->Files->isDirectory->packages->findPackages->addAll->else->if->Files->isRegularFile->path->toString->endsWith->try->jf->path->toString->new->JarFile->packages->findPackages->addAll->catch->throw->new->UncheckedIOException->finally->return
JmodTask.JmodFileWriter#findPackages(Path):::Returns the set of packages in the given directory tree.:::try->return->Files->attrs->isRegularFile->find->dir->relativize->map->path->toString->isResource->filter->toPackageName->map->pkg->length->filter->distinct->Collectors->toSet->collect->catch->throw->new->UncheckedIOException->finally
JmodTask.JmodFileWriter#findPackages(JarFile):::Returns the set of packages in the given JAR file.:::return->jf->stream->e->isDirectory->e->getName->isResource->filter->toPackageName->map->pkg->length->filter->distinct->Collectors->toSet->collect
JmodTask.JmodFileWriter#isResource(String):::Returns true if it's a .class or a resource with an effective package name.:::name->replace->return->name->endsWith->Resources->canEncapsulate
JmodTask.JmodFileWriter#toPackageName(Path)::: jmod file writer to package name:::name->path->toString->index->name->lastIndexOf->if->return->name->substring->replace->if->name->endsWith->name->equals->e->new->IOException->throw->new->UncheckedIOException->return
JmodTask.JmodFileWriter#toPackageName(ZipEntry)::: jmod file writer to package name:::name->entry->getName->index->name->lastIndexOf->if->return->name->substring->replace->if->name->endsWith->name->equals->e->new->IOException->throw->new->UncheckedIOException->return
JmodTask.JmodFileWriter#processClasses(JmodOutputStream, List)::: jmod file writer process classes:::if->return->foreach->if->Files->isDirectory->processSection->else->if->Files->isRegularFile->p->toString->endsWith->try->jf->p->toFile->new->JarFile->jec->new->JarEntryConsumer->jf->stream->filter->forEach->catch->finally
JmodTask.JmodFileWriter#processSection(JmodOutputStream, Section, List)::: jmod file writer process section:::if->return->foreach->processSection
JmodTask.JmodFileWriter#processSection(JmodOutputStream, Section, Path)::: jmod file writer process section:::Files->Set->of->new->SimpleFileVisitor<Path>->walkFileTree
JmodTask.JmodFileWriter#matches(Path, List)::: jmod file writer matches:::if->foreach->if->pm->matches->return->return
JmodTask.JmodFileWriter.JarEntryConsumer#accept(JarEntry)::: jar entry consumer accept:::try->in->jarfile->getInputStream->out->je->getName->writeEntry->catch->throw->new->UncheckedIOException->finally
JmodTask.JmodFileWriter.JarEntryConsumer#test(JarEntry)::: jar entry consumer test:::name->je->getName->return->name->endsWith->je->isDirectory
JmodTask.Hasher#computeHashes():::Returns a map of a module M to record hashes of the modules that depend upon M directly or indirectly:::if->return->if->return->hashesBuilder->Set->of->computeHashes->else->return->hashesBuilder->computeHashes
JmodTask.Hasher#recordHashes(InputStream, OutputStream, ModuleHashes):::Reads the given input stream of module-info.class and write the extended module-info.class with the given ModuleHashes:::extender->ModuleInfoExtender->newExtender->extender->hashes->extender->write
JmodTask.Hasher#updateModuleInfo(String, ModuleHashes)::: hasher update module info:::target->moduleToPath->tempTarget->jmodTempFilePath->try->if->target->getFileName->toString->endsWith->updateJmodFile->else->updateModularJar->catch->try->Files->deleteIfExists->catch->e->addSuppressed->finally->throw->finally->out->getMessage->println->Files->move
JmodTask.Hasher#updateModularJar(Path, Path, ModuleHashes)::: hasher update modular jar:::try->jf->target->toFile->new->JarFile->out->Files->newOutputStream->jos->new->JarOutputStream->jf->stream->try->in->jf->getInputStream->if->e->getName->equals->ze->e->getName->new->ZipEntry->ze->System->currentTimeMillis->setTime->jos->putNextEntry->recordHashes->jos->closeEntry->else->jos->putNextEntry->jos->in->readAllBytes->write->jos->closeEntry->catch->throw->new->UncheckedIOException->finally->forEach->catch->finally
JmodTask.Hasher#updateJmodFile(Path, Path, ModuleHashes)::: hasher update jmod file:::try->jf->new->JmodFile->jos->JmodOutputStream->newOutputStream->jf->stream->try->in->jf->e->section->e->name->getInputStream->if->e->name->equals->extender->ModuleInfoExtender->newExtender->extender->hashes->jos->extender->toByteArray->e->section->e->name->writeEntry->else->jos->writeEntry->catch->throw->new->UncheckedIOException->finally->forEach->catch->finally
JmodTask.Hasher#moduleToPath(String)::: hasher module to path:::rm->configuration->findModule->new->InternalError->orElseThrow->uri->rm->reference->location->get->path->Paths->get->fn->path->getFileName->toString->if->fn->endsWith->fn->endsWith->throw->new->InternalError->return
JmodTask.AbstractPathConverter#convert(String)::: abstract path converter convert:::paths->new->ArrayList<>->pathElements->value->split->foreach->paths->toPath->add->return
JmodTask.AbstractPathConverter#valueType()::: abstract path converter value type:::return
JmodTask.AbstractPathConverter#valuePattern()::: abstract path converter value pattern:::return
JmodTask.AbstractPathConverter#toPath(String)::: abstract path converter to path:::
JmodTask.ClassPathConverter#toPath(String)::: class path converter to path:::try->path->CWD->resolve->if->Files->notExists->throw->new->CommandException->if->Files->isDirectory->Files->isRegularFile->path->toString->endsWith->throw->new->CommandException->return->catch->throw->new->CommandException->finally
JmodTask.DirPathConverter#toPath(String)::: dir path converter to path:::try->path->CWD->resolve->if->Files->notExists->throw->new->CommandException->if->Files->isDirectory->throw->new->CommandException->return->catch->throw->new->CommandException->finally
JmodTask.ExtractDirPathConverter#convert(String)::: extract dir path converter convert:::try->path->CWD->resolve->if->Files->exists->if->Files->isDirectory->throw->new->CommandException->return->catch->throw->new->CommandException->finally
JmodTask.ExtractDirPathConverter#valueType()::: extract dir path converter value type:::return
JmodTask.ExtractDirPathConverter#valuePattern()::: extract dir path converter value pattern:::return
JmodTask.ModuleVersionConverter#convert(String)::: module version converter convert:::try->return->Version->parse->catch->throw->x->getMessage->new->CommandException->finally
JmodTask.ModuleVersionConverter#valueType()::: module version converter value type:::return
JmodTask.ModuleVersionConverter#valuePattern()::: module version converter value pattern:::return
JmodTask.WarnIfResolvedReasonConverter#convert(String)::: warn if resolved reason converter convert:::if->value->equals->return->ModuleResolution->empty->withDeprecated->else->if->value->equals->return->ModuleResolution->empty->withDeprecatedForRemoval->else->if->value->equals->return->ModuleResolution->empty->withIncubating->else->throw->new->CommandException
JmodTask.WarnIfResolvedReasonConverter#valueType()::: warn if resolved reason converter value type:::return
JmodTask.WarnIfResolvedReasonConverter#valuePattern()::: warn if resolved reason converter value pattern:::return
JmodTask.PatternConverter#convert(String)::: pattern converter convert:::try->if->value->startsWith->value->length->substring->trim->return->Pattern->compile->catch->throw->new->CommandException->finally
JmodTask.PatternConverter#valueType()::: pattern converter value type:::return
JmodTask.PatternConverter#valuePattern()::: pattern converter value pattern:::return
JmodTask.PathMatcherConverter#convert(String)::: path matcher converter convert:::try->return->Utils->FileSystems->getDefault->getPathMatcher->catch->throw->new->CommandException->finally
JmodTask.PathMatcherConverter#valueType()::: path matcher converter value type:::return
JmodTask.PathMatcherConverter#valuePattern()::: path matcher converter value pattern:::return
JmodTask.JmodHelpFormatter#format(Map)::: jmod help formatter format:::all->new->LinkedHashMap<>->all->putAll->if->all->remove->all->remove->all->new->OptionDescriptor->put->content->super->format->builder->new->StringBuilder->builder->getMessage->append->append->builder->getMessage->append->append->builder->getMessage->append->append->builder->getMessage->append->append->builder->getMessage->append->append->builder->getMessage->append->append->cmdfile->lines->content->split->foreach->if->line->startsWith->line->replace->else->if->line->startsWith->line->startsWith->builder->append->append->append->else->if->line->matches->builder->append->append->append->if->builder->append->append->append->return->builder->toString
JmodTask#handleOptions(String[])::: jmod task handle options:::new->Options->parser->new->JmodHelpFormatter->formatHelpWith->classPath->parser->getMessage->accepts->withRequiredArg->withValuesConvertedBy->cmds->parser->getMessage->accepts->withRequiredArg->withValuesConvertedBy->config->parser->getMessage->accepts->withRequiredArg->withValuesConvertedBy->dir->parser->getMessage->accepts->withRequiredArg->new->ExtractDirPathConverter->withValuesConvertedBy->dryrun->parser->getMessage->accepts->excludes->parser->getMessage->accepts->withRequiredArg->new->PathMatcherConverter->withValuesConvertedBy->hashModules->parser->getMessage->accepts->withRequiredArg->new->PatternConverter->withValuesConvertedBy->help->parser->List->of->getMessage->acceptsAll->forHelp->helpExtra->parser->getMessage->accepts->headerFiles->parser->getMessage->accepts->withRequiredArg->withValuesConvertedBy->libs->parser->getMessage->accepts->withRequiredArg->withValuesConvertedBy->legalNotices->parser->getMessage->accepts->withRequiredArg->withValuesConvertedBy->mainClass->parser->getMessage->accepts->withRequiredArg->getMessage->describedAs->manPages->parser->getMessage->accepts->withRequiredArg->withValuesConvertedBy->modulePath->parser->List->of->getMessage->acceptsAll->withRequiredArg->withValuesConvertedBy->moduleVersion->parser->getMessage->accepts->withRequiredArg->new->ModuleVersionConverter->withValuesConvertedBy->targetPlatform->parser->getMessage->accepts->withRequiredArg->getMessage->describedAs->doNotResolveByDefault->parser->getMessage->accepts->warnIfResolved->parser->getMessage->accepts->withRequiredArg->new->WarnIfResolvedReasonConverter->withValuesConvertedBy->version->parser->getMessage->accepts->nonOptions->parser->nonOptions->try->opts->parser->parse->if->opts->has->opts->has->opts->has->opts->has->opts->has->opts->has->return->words->opts->valuesOf->if->words->isEmpty->throw->new->CommandException->showUsage->verb->words->get->try->Enum->verb->toUpperCase->valueOf->catch->throw->new->CommandException->showUsage->finally->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->if->opts->has->opts->valuesOf->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->dirs->opts->valuesOf->getLastElement->new->PathArr->toArray->ModulePath->Runtime->version->of->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->opts->valuesOf->getLastElement->if->opts->has->if->ModuleResolution->empty->withDoNotResolveByDefault->if->opts->has->opts->valuesOf->getLastElement->if->throw->new->CommandException->showUsage->if->equals->if->throw->new->CommandException->showUsage->else->if->words->size->throw->new->CommandException->showUsage->path->Paths->words->get->get->if->equals->Files->exists->throw->new->CommandException->else->if->equals->equals->equals->Files->notExists->throw->new->CommandException->if->throw->new->CommandException->if->words->size->throw->words->words->size->subList->new->CommandException->showUsage->if->equals->throw->new->CommandException->showUsage->if->isValidJavaIdentifier->throw->new->CommandException->if->equals->try->Files->createDirectories->catch->throw->new->CommandException->finally->catch->throw->e->getMessage->new->CommandException->finally
JmodTask#isValidJavaIdentifier(String):::Returns true if, and only if, the given main class is a legal.:::if->mainClass->length->return->if->Character->mainClass->charAt->isJavaIdentifierStart->return->n->mainClass->length->for->i->if->mainClass->charAt->return->return
JmodTask#getLastElement(List)::: jmod task get last element:::if->list->size->throw->new->InternalError->return->list->list->size->get
JmodTask#reportError(String)::: jmod task report error:::out->getMessage->println
JmodTask#warning(String, Object...)::: jmod task warning:::out->getMessage->getMessage->println
JmodTask#showUsageSummary()::: jmod task show usage summary:::out->getMessage->println
JmodTask#showHelp()::: jmod task show help:::out->getMessage->println->try->parser->printHelpOn->catch->throw->new->AssertionError->finally
JmodTask#showVersion()::: jmod task show version:::out->version->println
JmodTask#version()::: jmod task version:::return->System->getProperty
JmodTask#getMessage(String, Object...)::: jmod task get message:::try->return->MessageFormat->getString->format->catch->throw->new->InternalError->finally
Main#main(String...)::: main main:::t->new->JmodTask->rc->t->run->System->exit
Main#run(PrintWriter, PrintWriter, String...):::Entry point that does not call System.exit.:::t->new->JmodTask->t->setLog->return->t->run
Main.JmodToolProvider#name()::: jmod tool provider name:::return
Main.JmodToolProvider#run(PrintWriter, PrintWriter, String...)::: jmod tool provider run:::return->Main->run

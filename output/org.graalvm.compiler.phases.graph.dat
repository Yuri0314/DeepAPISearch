FixedNodeRelativeFrequencyCache#applyAsDouble(FixedNode)::: Given a FixedNode this method finds the most immediate AbstractBeginNode preceding it that either: <ul> <li>has no predecessor (ie, the begin-node is a merge, in particular a loop-begin, or the start-node)</li> <li>has a control-split predecessor</li> </ul>    The thus found AbstractBeginNode is equi-probable with the FixedNode it was obtained from:::computeNodeRelativeFrequencyCounter->node->getDebug->increment->current->findBegin->if->return->cachedValue->cache->get->if->return->relativeFrequency->if->current->predecessor->if->handleMerge->else->else->split->current->predecessor->split->probability->applyAsDouble->multiplyRelativeFrequencies->cache->put->return
InferStamps#inferStamps(StructuredGraph):::Infer the stamps for all Object nodes in the graph, to make the stamps as precise as possible:::foreach->graph->getNodes->if->node->if->node->stamp->node->node->stamp->empty->setStamp->stampChanged->z->do->foreach->graph->getNodes->if->node->if->node->stamp->node->inferStamp->while
MergeableState#merge(AbstractMergeNode, List):::This method is called on merge on the state of the first branch:::
MergeableState#loopBegin(LoopBeginNode):::This method is called before a loop is entered (before the LoopBeginNode is visited).:::
MergeableState#loopEnds(LoopBeginNode, List):::This method is called after all LoopEndNodes belonging to a loop have been visited.:::
MergeableState#afterSplit(AbstractBeginNode):::This method is called before the successors of a ControlSplitNode are visited.:::
ReentrantNodeIterator.NodeIteratorClosure#continueIteration(StateT):::Determine whether iteration should continue in the current state.:::return
SinglePassNodeIterator#apply():::Performs a single-pass iteration:::current->do->if->invoke->queueSuccessors->nextQueuedNode->else->if->state->loopBegin->keepForLater->state->clone->loopBegin->next->else->if->loopEnd->finishLoopEnds->nextQueuedNode->else->if->merge->next->else->if->next->next->node->else->if->end->queueMerge->nextQueuedNode->else->if->node->nextQueuedNode->else->if->controlSplit->queueSuccessors->nextQueuedNode->else->while->finished
SinglePassNodeIterator#finished():::The lifecycle that single-pass node iterators go through is described in #apply()   When overriding this method don't forget to invoke this implementation, otherwise the assertions will be skipped:::

GraphNodeProcessor#getSupportedSourceVersion()::: graph node processor get supported source version:::return->SourceVersion->latest
GraphNodeProcessor#isEnclosedIn(Element, Element)::: graph node processor is enclosed in:::elementHierarchy->getElementHierarchy->return->elementHierarchy->contains
GraphNodeProcessor#errorMessage(Element, String, Object...)::: graph node processor error message:::message
GraphNodeProcessor#message(Kind, Element, String, Object...)::: graph node processor message:::if->isEnclosedIn->elementHierarchy->getElementHierarchy->reverse->loc->elementHierarchy->stream->e->getKind->filter->Object->toString->map->Collectors->joining->collect->processingEnv->getMessager->String->format->printMessage->else->processingEnv->getMessager->String->format->printMessage
GraphNodeProcessor#getElementHierarchy(Element)::: graph node processor get element hierarchy:::elements->new->ArrayList<>->elements->add->enclosing->e->getEnclosingElement->while->enclosing->getKind->elements->add->enclosing->getEnclosingElement->if->elements->add->return
GraphNodeProcessor#reportException(Kind, Element, Throwable):::Bugs in an annotation processor can cause silent failure so try to report any exception throws as errors.:::buf->new->StringWriter->t->new->PrintWriter->printStackTrace->buf->toString->message
GraphNodeProcessor#isNodeType(Element)::: graph node processor is node type:::if->element->getKind->return->type->types->processingEnv->getTypeUtils->while->if->type->toString->equals->return->types->type->getSuperclass->asElement->return
GraphNodeProcessor#doProcess(Set, RoundEnvironment)::: graph node processor do process:::if->roundEnv->processingOver->return->verifier->new->GraphNodeVerifier->foreach->roundEnv->getTypeElement->getElementsAnnotatedWith->try->if->isNodeType->getSimpleName->errorMessage->continue->nodeInfo->getType->getAnnotation->if->getSimpleName->errorMessage->continue->typeElement->modifiers->typeElement->getModifiers->found->foreach->typeElement->getEnclosedElements->if->e->getKind->if->e->getSimpleName->toString->equals->break->if->getSimpleName->errorMessage->if->typeElement->equals->modifiers->contains->verifier->verify->catch->ee->getMessage->errorMessage->isBug367599->reportException->finally->return
GraphNodeProcessor#isBug367599(Throwable):::Determines if a given exception is (most likely) caused by Bug 367599.:::if->foreach->t->getStackTrace->if->ste->toString->contains->return->if->t->getCause->return->t->getCause->isBug367599->return
GraphNodeVerifier#getTypeElement(String):::Returns a type element given a canonical name.:::return->processor->getTypeElement
GraphNodeVerifier#getTypeElement(Class)::: graph node verifier get type element:::return->cls->getName->getTypeElement
GraphNodeVerifier#getType(String)::: graph node verifier get type:::return->getTypeElement->asType
GraphNodeVerifier#isAssignableWithErasure(Element, Element)::: graph node verifier is assignable with erasure:::types->processor->env->getTypeUtils->fromType->types->from->asType->erasure->toType->types->to->asType->erasure->return->types->isAssignable
GraphNodeVerifier#scanFields(TypeElement)::: graph node verifier scan fields:::currentClazz->do->foreach->ElementFilter->currentClazz->getEnclosedElements->fieldsIn->modifiers->field->getModifiers->if->modifiers->contains->modifiers->contains->continue->annotations->field->getAnnotationMirrors->isNonOptionalInput->findAnnotationMirror->isOptionalInput->findAnnotationMirror->isSuccessor->findAnnotationMirror->if->if->findAnnotationMirror->throw->new->ElementException->else->if->throw->new->ElementException->else->if->isAssignableWithErasure->if->modifiers->contains->throw->new->ElementException->if->modifiers->contains->throw->new->ElementException->else->if->isAssignableWithErasure->field->getKind->throw->new->ElementException->if->modifiers->contains->throw->new->ElementException->if->modifiers->contains->throw->new->ElementException->else->if->if->isAssignableWithErasure->if->modifiers->contains->throw->new->ElementException->if->modifiers->contains->throw->new->ElementException->else->if->isAssignableWithErasure->throw->new->ElementException->if->modifiers->contains->throw->new->ElementException->if->modifiers->contains->throw->new->ElementException->else->if->isAssignableWithErasure->field->getSimpleName->contentEquals->throw->Input->getSimpleName->OptionalInput->getSimpleName->Successor->getSimpleName->new->ElementException->if->isAssignableWithErasure->throw->Input->getSimpleName->OptionalInput->getSimpleName->new->ElementException->if->isAssignableWithErasure->throw->Successor->getSimpleName->new->ElementException->if->modifiers->contains->modifiers->contains->throw->new->ElementException->getSuperType->while->getSuperType->asType->isObject
GraphNodeVerifier#findAnnotationMirror(List, TypeElement)::: graph node verifier find annotation mirror:::foreach->if->mirror->getAnnotationType->expectedAnnotationType->asType->sameType->return->return
GraphNodeVerifier#isObject(TypeMirror)::: graph node verifier is object:::return->object->asType->sameType
GraphNodeVerifier#sameType(TypeMirror, TypeMirror)::: graph node verifier same type:::return->processor->env->getTypeUtils->isSameType
GraphNodeVerifier#getSuperType(TypeElement)::: graph node verifier get super type:::if->element->getSuperclass->return->processor->element->getSuperclass->asTypeElement->return
GraphNodeVerifier#verify(TypeElement)::: graph node verifier verify:::scanFields->foundValidConstructor->foreach->ElementFilter->node->getEnclosedElements->constructorsIn->if->constructor->getModifiers->contains->continue->else->if->constructor->getModifiers->contains->constructor->getModifiers->contains->throw->new->ElementException->if->throw->new->ElementException

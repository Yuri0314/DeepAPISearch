WBMPImageReader#setInput(Object, boolean, boolean):::Overrides the method defined in the superclass.:::super->setInput
WBMPImageReader#getNumImages(boolean):::Overrides the method defined in the superclass.:::if->throw->I18N->getString->new->IllegalStateException->if->throw->I18N->getString->new->IllegalStateException->return
WBMPImageReader#getWidth(int)::: image reader get width:::checkIndex->readHeader->return
WBMPImageReader#getHeight(int)::: image reader get height:::checkIndex->readHeader->return
WBMPImageReader#isRandomAccessEasy(int)::: image reader is random access easy:::checkIndex->return
WBMPImageReader#checkIndex(int)::: image reader check index:::if->throw->I18N->getString->new->IndexOutOfBoundsException
WBMPImageReader#readHeader()::: image reader read header:::if->return->if->throw->new->IllegalStateException->new->WBMPMetadata->iis->readByte->fixHeaderField->iis->readByte->if->isValidWbmpType->throw->I18N->getString->new->IIOException->ReaderUtil->readMultiByteInteger->ReaderUtil->readMultiByteInteger
WBMPImageReader#getImageTypes(int)::: image reader get image types:::checkIndex->readHeader->bi->new->BufferedImage->list->new->ArrayList<>->list->new->ImageTypeSpecifier->add->return->list->iterator
WBMPImageReader#getDefaultReadParam()::: image reader get default read param:::return->new->ImageReadParam
WBMPImageReader#getImageMetadata(int)::: image reader get image metadata:::checkIndex->if->readHeader->return
WBMPImageReader#getStreamMetadata()::: image reader get stream metadata:::return
WBMPImageReader#read(int, ImageReadParam)::: image reader read:::if->throw->I18N->getString->new->IllegalStateException->checkIndex->clearAbortRequest->processImageStarted->if->getDefaultReadParam->readHeader->sourceRegion->new->Rectangle->destinationRegion->new->Rectangle->param->getDestination->computeRegions->scaleX->param->getSourceXSubsampling->scaleY->param->getSourceYSubsampling->xOffset->param->getSubsamplingXOffset->yOffset->param->getSubsamplingYOffset->bi->param->getDestination->if->new->BufferedImage->noTransform->destinationRegion->new->Rectangle->equals->destinationRegion->bi->getWidth->bi->getHeight->new->Rectangle->equals->tile->bi->getWritableTile->sm->bi->getSampleModel->if->if->abortRequested->processReadAborted->return->iis->tile->getDataBuffer->getData->sm->getScanlineStride->read->new->intArr->processImageUpdate->processImageProgress->else->len->buf->new->byteArr->data->tile->getDataBuffer->getData->lineStride->sm->getScanlineStride->iis->skipBytes->skipLength->srcOff->new->intArr->destOff->new->intArr->srcPos->new->intArr->destPos->new->intArr->for->i->x->j->for->j->y->k->if->abortRequested->processReadAborted->else->processImageComplete->return
WBMPImageReader#canReadRaster()::: image reader can read raster:::return
WBMPImageReader#readRaster(int, ImageReadParam)::: image reader read raster:::bi->read->return->bi->getData
WBMPImageReader#reset()::: image reader reset:::super->reset
WBMPImageReader#isValidWbmpType(int)::: image reader is valid wbmp type:::return
WBMPImageReaderSpi#onRegistration(ServiceRegistry, Class)::: image reader spi on registration:::if->return
WBMPImageReaderSpi#getDescription(Locale)::: image reader spi get description:::return
WBMPImageReaderSpi#canDecodeInput(Object)::: image reader spi can decode input:::if->return->stream->stream->mark->try->type->stream->readByte->fixHeaderField->stream->readByte->if->return->width->ReaderUtil->readMultiByteInteger->height->ReaderUtil->readMultiByteInteger->if->return->dataLength->stream->length->if->return->stream->getStreamPosition->scanSize->return->catch->finally->stream->reset
WBMPImageReaderSpi#createReaderInstance(Object)::: image reader spi create reader instance:::return->new->WBMPImageReader
WBMPImageWriter#getNumBits(int)::: image writer get num bits:::numBits->mask->while->return
WBMPImageWriter#intToMultiByte(int)::: image writer int to multi byte:::numBitsLeft->getNumBits->multiBytes->new->byteArr->maxIndex->for->b->return
WBMPImageWriter#setOutput(Object)::: image writer set output:::super->setOutput->if->if->throw->I18N->getString->new->IllegalArgumentException->else
WBMPImageWriter#getDefaultStreamMetadata(ImageWriteParam)::: image writer get default stream metadata:::return
WBMPImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)::: image writer get default image metadata:::meta->new->WBMPMetadata->return
WBMPImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)::: image writer convert stream metadata:::return
WBMPImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)::: image writer convert image metadata:::return
WBMPImageWriter#canWriteRasters()::: image writer can write rasters:::return
WBMPImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)::: image writer write:::if->throw->I18N->getString->new->IllegalStateException->if->throw->I18N->getString->new->IllegalArgumentException->clearAbortRequest->processImageStarted->if->getDefaultWriteParam->input->inputRaster->writeRaster->image->hasRaster->sourceRegion->param->getSourceRegion->sampleModel->if->image->getRaster->inputRaster->getSampleModel->else->image->getRenderedImage->input->getSampleModel->input->getData->checkSampleModel->if->inputRaster->getBounds->else->sourceRegion->inputRaster->getBounds->intersection->if->sourceRegion->isEmpty->throw->I18N->getString->new->RuntimeException->scaleX->param->getSourceXSubsampling->scaleY->param->getSourceYSubsampling->xOffset->param->getSubsamplingXOffset->yOffset->param->getSubsamplingYOffset->sourceRegion->translate->minX->minY->w->h->destinationRegion->new->Rectangle->sampleModel->createCompatibleSampleModel->destSM->if->sampleModel->getDataType->getDataBitOffset->new->MultiPixelPackedSampleModel->if->destinationRegion->equals->if->inputRaster->inputRaster->getMinX->inputRaster->getMinY->createChild->else->ras->Raster->new->Point->createWritableRaster->data->ras->getDataBuffer->getData->for->j->y->k->if->destSM->inputRaster->getSampleModel->equals->raster->Raster->inputRaster->getMinX->inputRaster->getMinY->new->Point->createWritableRaster->raster->setRect->isWhiteZero->if->input->getColorModel->icm->input->getColorModel->icm->getRed->icm->getRed->lineStride->getScanlineStride->bytesPerRow->bdata->inputRaster->getDataBuffer->getData->stream->write->stream->write->stream->intToMultiByte->write->stream->intToMultiByte->write->if->stream->write->processImageProgress->else->offset->if->for->row->else->inverted->new->byteArr->for->row->if->abortRequested->processWriteAborted->else->processImageComplete->stream->stream->getStreamPosition->flushBefore
WBMPImageWriter#reset()::: image writer reset:::super->reset
WBMPImageWriter#checkSampleModel(SampleModel)::: image writer check sample model:::type->sm->getDataType->if->sm->getNumBands->sm->getSampleSize->throw->I18N->getString->new->IllegalArgumentException
WBMPImageWriterSpi#getDescription(Locale)::: image writer spi get description:::return
WBMPImageWriterSpi#onRegistration(ServiceRegistry, Class)::: image writer spi on registration:::if->return
WBMPImageWriterSpi#canEncodeImage(ImageTypeSpecifier)::: image writer spi can encode image:::sm->type->getSampleModel->if->return->if->sm->getSampleSize->return->return
WBMPImageWriterSpi#createWriterInstance(Object)::: image writer spi create writer instance:::return->new->WBMPImageWriter
WBMPMetadata#isReadOnly()::: metadata is read only:::return
WBMPMetadata#getAsTree(String)::: metadata get as tree:::if->formatName->equals->return->getNativeTree->else->if->formatName->equals->return->getStandardTree->else->throw->I18N->getString->new->IllegalArgumentException
WBMPMetadata#getNativeTree()::: metadata get native tree:::root->new->IIOMetadataNode->addChildNode->addChildNode->addChildNode->return
WBMPMetadata#setFromTree(String, Node)::: metadata set from tree:::throw->I18N->getString->new->IllegalStateException
WBMPMetadata#mergeTree(String, Node)::: metadata merge tree:::throw->I18N->getString->new->IllegalStateException
WBMPMetadata#reset()::: metadata reset:::throw->I18N->getString->new->IllegalStateException
WBMPMetadata#addChildNode(IIOMetadataNode, String, Object)::: metadata add child node:::child->new->IIOMetadataNode->if->child->setUserObject->child->ImageUtil->convertObjectToString->setNodeValue->root->appendChild->return
WBMPMetadata#getStandardChromaNode()::: metadata get standard chroma node:::node->new->IIOMetadataNode->subNode->new->IIOMetadataNode->subNode->setAttribute->node->appendChild->return
WBMPMetadata#getStandardDimensionNode()::: metadata get standard dimension node:::dimension_node->new->IIOMetadataNode->node->new->IIOMetadataNode->node->setAttribute->dimension_node->appendChild->return
WBMPMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)::: metadata format can node appear:::return
WBMPMetadataFormat#getInstance()::: metadata format get instance:::if->new->WBMPMetadataFormat->return

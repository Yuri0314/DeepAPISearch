CompiledMethodTest#testMethod(Object, Object, Object)::: compiled method test test method:::res->return->GraalDirectives->inCompiledCode
CompiledMethodTest#testMethodVirtual(Object, Object, Object)::: compiled method test test method virtual:::return
CompiledMethodTest#test1():::Usages of the constant " " are replaced with the constant "-" and it is verified that executing the compiled code produces a result that the preserves the node replacement unless deoptimization occurs (e.g., due to -Xcomp causing profiles to be missing).:::javaMethod->getResolvedJavaMethod->graph->parseEager->new->CanonicalizerPhase->getProviders->apply->new->DeadCodeEliminationPhase->apply->foreach->ConstantNode->getConstantNodes->if->node->getStackKind->getSnippetReflection->node->asJavaConstant->asObject->equals->node->ConstantNode->getSnippetReflection->forObject->getMetaAccess->forConstant->replace->compiledMethod->getCode->try->result->compiledMethod->executeVarargs->if->equals->Assert->assertEquals->catch->Assert->fail->finally
CompiledMethodTest#test3()::: compiled method test test3:::javaMethod->getResolvedJavaMethod->compiledMethod->getCode->try->result->compiledMethod->executeVarargs->Assert->assertEquals->catch->Assert->fail->finally
CompiledMethodTest#test4()::: compiled method test test4:::javaMethod->getResolvedJavaMethod->compiledMethod->getCode->try->result->compiledMethod->executeVarargs->Assert->assertEquals->catch->Assert->fail->finally
MonitorDeoptTest.Monitor#setState(State)::: monitor set state:::notifyAll
MonitorDeoptTest.Monitor#tryUpdateState(State, State)::: monitor try update state:::if->notifyAll->return->else->return
MonitorDeoptTest.Monitor#waitState(State)::: monitor wait state:::startTime->System->currentTimeMillis->while->System->currentTimeMillis->wait->if->throw->new->IllegalStateException
MonitorDeoptTest.Monitor#safepoint(State):::Change the current state to State#ALLOWING_SAFEPOINT and do a short wait to allow a safepoint to happen:::if->wait->if->throw->new->InternalError->notifyAll
MonitorDeoptTest.Monitor#getState()::: monitor get state:::return
MonitorDeoptTest.Monitor#invalidate(InstalledCode)::: monitor invalidate:::waitState->code->invalidate
MonitorDeoptTest#test(Monitor)::: monitor deopt test test:::monitor->setState->timedOut->startTime->System->currentTimeMillis->safepointCheckTime->while->System->currentTimeMillis->if->monitor->tryUpdateState->break->if->System->currentTimeMillis->monitor->safepoint->System->currentTimeMillis->if->throw->monitor->getState->new->InternalError->for->i->return
MonitorDeoptTest#findFirstLoop(StructuredGraph)::: monitor deopt test find first loop:::node->graph->start->for
MonitorDeoptTest#removeLoopSafepoint(StructuredGraph):::Remove the safepoint from the first loop in the test method, so only the safepoints on MonitorEnter and MonitorExit remain in the loop:::loopBegin->findFirstLoop->loopBegin->disableSafepoint
MonitorDeoptTest#run0()::: monitor deopt test run0:::javaMethod->getResolvedJavaMethod->graph->parseEager->removeLoopSafepoint->compilationResult->compile->installedCode->getBackend->graph->getDebug->createDefaultInstalledCode->monitor->new->Monitor->controlThread->new->Runnable->new->Thread->controlThread->start->result->test->Assert->assertTrue
RethrowDeoptMaterializeTest.MyException#fillInStackTrace()::: my exception fill in stack trace:::return
RethrowDeoptMaterializeTest#executeDeoptRethrow(int)::: rethrow deopt materialize test execute deopt rethrow:::try->if->throw->new->MyException->else->if->throw->new->MyException->catch->e->t->getCause->GraalDirectives->deoptimize->if->throw->finally->return
RethrowDeoptMaterializeTest#testDeoptRethrow():::This tests that a state with FrameState#rethrowException() set to true can properly throw an exception that must be rematerialized.:::test
SafepointRethrowDeoptTest#execute()::: safepoint rethrow deopt test execute:::for->return
SafepointRethrowDeoptTest#test()::: safepoint rethrow deopt test test:::Assume->getInitialOptions->getValue->assumeTrue->synchronized->installed->getResolvedJavaMethod->getCode->cdl->new->CountDownLatch->t1->try->cdl->await->while->installed->invalidate->catch->Assert->fail->finally->new->Thread->t2->cdl->countDown->result->try->installed->executeVarargs->catch->e->printStackTrace->Assert->fail->return->finally->Assert->assertEquals->new->Thread->t1->start->t2->start->try->t1->join->t2->join->catch->Assert->fail->finally
SynchronizedMethodDeoptimizationTest#testMethodSynchronized(Object)::: synchronized method deoptimization test test method synchronized:::if->return->return
SynchronizedMethodDeoptimizationTest#test1()::: synchronized method deoptimization test test1:::Assume->assumeTrue->test->test

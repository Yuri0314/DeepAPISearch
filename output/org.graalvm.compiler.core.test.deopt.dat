org.graalvm.compiler.core.test.deopt.CompiledMethodTest#testMethod(Object, Object, Object)->Object::: compiled method test test method
org.graalvm.compiler.core.test.deopt.CompiledMethodTest#testMethodVirtual(Object, Object, Object)->Object::: compiled method test test method virtual
org.graalvm.compiler.core.test.deopt.CompiledMethodTest#test1()->void:::Usages of the constant " " are replaced with the constant "-" and it is verified that executing the compiled code produces a result that the preserves the node replacement unless deoptimization occurs (e.g., due to -Xcomp causing profiles to be missing).
org.graalvm.compiler.core.test.deopt.CompiledMethodTest#test3()->void::: compiled method test test3
org.graalvm.compiler.core.test.deopt.CompiledMethodTest#test4()->void::: compiled method test test4
org.graalvm.compiler.core.test.deopt.MonitorDeoptTest#test(Monitor)->boolean::: monitor deopt test test
org.graalvm.compiler.core.test.deopt.MonitorDeoptTest#run0()->void::: monitor deopt test run0
org.graalvm.compiler.core.test.deopt.RethrowDeoptMaterializeTest.MyException#fillInStackTrace()->Throwable::: my exception fill in stack trace
org.graalvm.compiler.core.test.deopt.RethrowDeoptMaterializeTest#executeDeoptRethrow(int)->Object::: rethrow deopt materialize test execute deopt rethrow
org.graalvm.compiler.core.test.deopt.RethrowDeoptMaterializeTest#testDeoptRethrow()->void:::This tests that a state with FrameState#rethrowException() set to true can properly throw an exception that must be rematerialized.
org.graalvm.compiler.core.test.deopt.SafepointRethrowDeoptTest#execute()->Object::: safepoint rethrow deopt test execute
org.graalvm.compiler.core.test.deopt.SafepointRethrowDeoptTest#test()->void::: safepoint rethrow deopt test test
org.graalvm.compiler.core.test.deopt.SynchronizedMethodDeoptimizationTest#testMethodSynchronized(Object)->Object::: synchronized method deoptimization test test method synchronized
org.graalvm.compiler.core.test.deopt.SynchronizedMethodDeoptimizationTest#test1()->void::: synchronized method deoptimization test test1

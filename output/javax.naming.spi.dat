ContinuationContext#getTargetContext()::: continuation context get target context:::if->if->cpe->getResolvedObj->throw->cpe->fillInStackTrace->NamingManager->cpe->getResolvedObj->cpe->getAltName->cpe->getAltNameCtx->getContext->if->throw->cpe->fillInStackTrace->return
ContinuationContext#lookup(Name)::: continuation context lookup:::ctx->getTargetContext->return->ctx->lookup
ContinuationContext#lookup(String)::: continuation context lookup:::ctx->getTargetContext->return->ctx->lookup
ContinuationContext#bind(Name, Object)::: continuation context bind:::ctx->getTargetContext->ctx->bind
ContinuationContext#bind(String, Object)::: continuation context bind:::ctx->getTargetContext->ctx->bind
ContinuationContext#rebind(Name, Object)::: continuation context rebind:::ctx->getTargetContext->ctx->rebind
ContinuationContext#rebind(String, Object)::: continuation context rebind:::ctx->getTargetContext->ctx->rebind
ContinuationContext#unbind(Name)::: continuation context unbind:::ctx->getTargetContext->ctx->unbind
ContinuationContext#unbind(String)::: continuation context unbind:::ctx->getTargetContext->ctx->unbind
ContinuationContext#rename(Name, Name)::: continuation context rename:::ctx->getTargetContext->ctx->rename
ContinuationContext#rename(String, String)::: continuation context rename:::ctx->getTargetContext->ctx->rename
ContinuationContext#list(Name)::: continuation context list:::ctx->getTargetContext->return->ctx->list
ContinuationContext#list(String)::: continuation context list:::ctx->getTargetContext->return->ctx->list
ContinuationContext#listBindings(Name)::: continuation context list bindings:::ctx->getTargetContext->return->ctx->listBindings
ContinuationContext#listBindings(String)::: continuation context list bindings:::ctx->getTargetContext->return->ctx->listBindings
ContinuationContext#destroySubcontext(Name)::: continuation context destroy subcontext:::ctx->getTargetContext->ctx->destroySubcontext
ContinuationContext#destroySubcontext(String)::: continuation context destroy subcontext:::ctx->getTargetContext->ctx->destroySubcontext
ContinuationContext#createSubcontext(Name)::: continuation context create subcontext:::ctx->getTargetContext->return->ctx->createSubcontext
ContinuationContext#createSubcontext(String)::: continuation context create subcontext:::ctx->getTargetContext->return->ctx->createSubcontext
ContinuationContext#lookupLink(Name)::: continuation context lookup link:::ctx->getTargetContext->return->ctx->lookupLink
ContinuationContext#lookupLink(String)::: continuation context lookup link:::ctx->getTargetContext->return->ctx->lookupLink
ContinuationContext#getNameParser(Name)::: continuation context get name parser:::ctx->getTargetContext->return->ctx->getNameParser
ContinuationContext#getNameParser(String)::: continuation context get name parser:::ctx->getTargetContext->return->ctx->getNameParser
ContinuationContext#composeName(Name, Name)::: continuation context compose name:::ctx->getTargetContext->return->ctx->composeName
ContinuationContext#composeName(String, String)::: continuation context compose name:::ctx->getTargetContext->return->ctx->composeName
ContinuationContext#addToEnvironment(String, Object)::: continuation context add to environment:::ctx->getTargetContext->return->ctx->addToEnvironment
ContinuationContext#removeFromEnvironment(String)::: continuation context remove from environment:::ctx->getTargetContext->return->ctx->removeFromEnvironment
ContinuationContext#getEnvironment()::: continuation context get environment:::ctx->getTargetContext->return->ctx->getEnvironment
ContinuationContext#getNameInNamespace()::: continuation context get name in namespace:::ctx->getTargetContext->return->ctx->getNameInNamespace
ContinuationContext#resolveToClass(Name, Class)::: continuation context resolve to class:::if->cpe->getResolvedObj->throw->cpe->fillInStackTrace->res->NamingManager->cpe->getResolvedObj->cpe->getAltName->cpe->getAltNameCtx->getResolver->if->throw->cpe->fillInStackTrace->return->res->resolveToClass
ContinuationContext#resolveToClass(String, Class)::: continuation context resolve to class:::if->cpe->getResolvedObj->throw->cpe->fillInStackTrace->res->NamingManager->cpe->getResolvedObj->cpe->getAltName->cpe->getAltNameCtx->getResolver->if->throw->cpe->fillInStackTrace->return->res->resolveToClass
ContinuationContext#close()::: continuation context close:::if->contCtx->close
ContinuationDirContext#getTargetContext(Name)::: continuation dir context get target context:::if->cpe->getResolvedObj->throw->cpe->fillInStackTrace->ctx->NamingManager->cpe->getResolvedObj->cpe->getAltName->cpe->getAltNameCtx->getContext->if->throw->cpe->fillInStackTrace->if->return->new->DirContextNamePair->if->res->rr->res->resolveToClass->dctx->rr->getResolvedObj->return->rr->getRemainingName->new->DirContextNamePair->ultimate->ctx->lookup->if->return->new->CompositeName->new->DirContextNamePair->throw->cpe->fillInStackTrace
ContinuationDirContext#getTargetContext(String)::: continuation dir context get target context:::if->cpe->getResolvedObj->throw->cpe->fillInStackTrace->ctx->NamingManager->cpe->getResolvedObj->cpe->getAltName->cpe->getAltNameCtx->getContext->if->return->new->DirContextStringPair->if->res->rr->res->resolveToClass->dctx->rr->getResolvedObj->tmp->rr->getRemainingName->remains->tmp->toString->return->new->DirContextStringPair->ultimate->ctx->lookup->if->return->new->DirContextStringPair->throw->cpe->fillInStackTrace
ContinuationDirContext#getAttributes(String)::: continuation dir context get attributes:::res->getTargetContext->return->res->getDirContext->res->getString->getAttributes
ContinuationDirContext#getAttributes(String, String[])::: continuation dir context get attributes:::res->getTargetContext->return->res->getDirContext->res->getString->getAttributes
ContinuationDirContext#getAttributes(Name)::: continuation dir context get attributes:::res->getTargetContext->return->res->getDirContext->res->getName->getAttributes
ContinuationDirContext#getAttributes(Name, String[])::: continuation dir context get attributes:::res->getTargetContext->return->res->getDirContext->res->getName->getAttributes
ContinuationDirContext#modifyAttributes(Name, int, Attributes)::: continuation dir context modify attributes:::res->getTargetContext->res->getDirContext->res->getName->modifyAttributes
ContinuationDirContext#modifyAttributes(String, int, Attributes)::: continuation dir context modify attributes:::res->getTargetContext->res->getDirContext->res->getString->modifyAttributes
ContinuationDirContext#modifyAttributes(Name, ModificationItem[])::: continuation dir context modify attributes:::res->getTargetContext->res->getDirContext->res->getName->modifyAttributes
ContinuationDirContext#modifyAttributes(String, ModificationItem[])::: continuation dir context modify attributes:::res->getTargetContext->res->getDirContext->res->getString->modifyAttributes
ContinuationDirContext#bind(Name, Object, Attributes)::: continuation dir context bind:::res->getTargetContext->res->getDirContext->res->getName->bind
ContinuationDirContext#bind(String, Object, Attributes)::: continuation dir context bind:::res->getTargetContext->res->getDirContext->res->getString->bind
ContinuationDirContext#rebind(Name, Object, Attributes)::: continuation dir context rebind:::res->getTargetContext->res->getDirContext->res->getName->rebind
ContinuationDirContext#rebind(String, Object, Attributes)::: continuation dir context rebind:::res->getTargetContext->res->getDirContext->res->getString->rebind
ContinuationDirContext#createSubcontext(Name, Attributes)::: continuation dir context create subcontext:::res->getTargetContext->return->res->getDirContext->res->getName->createSubcontext
ContinuationDirContext#createSubcontext(String, Attributes)::: continuation dir context create subcontext:::res->getTargetContext->return->res->getDirContext->res->getString->createSubcontext
ContinuationDirContext#search(Name, Attributes, String[])::: continuation dir context search:::res->getTargetContext->return->res->getDirContext->res->getName->search
ContinuationDirContext#search(String, Attributes, String[])::: continuation dir context search:::res->getTargetContext->return->res->getDirContext->res->getString->search
ContinuationDirContext#search(Name, Attributes)::: continuation dir context search:::res->getTargetContext->return->res->getDirContext->res->getName->search
ContinuationDirContext#search(String, Attributes)::: continuation dir context search:::res->getTargetContext->return->res->getDirContext->res->getString->search
ContinuationDirContext#search(Name, String, SearchControls)::: continuation dir context search:::res->getTargetContext->return->res->getDirContext->res->getName->search
ContinuationDirContext#search(String, String, SearchControls)::: continuation dir context search:::res->getTargetContext->return->res->getDirContext->res->getString->search
ContinuationDirContext#search(Name, String, Object[], SearchControls)::: continuation dir context search:::res->getTargetContext->return->res->getDirContext->res->getName->search
ContinuationDirContext#search(String, String, Object[], SearchControls)::: continuation dir context search:::res->getTargetContext->return->res->getDirContext->res->getString->search
ContinuationDirContext#getSchema(String)::: continuation dir context get schema:::res->getTargetContext->return->res->getDirContext->res->getString->getSchema
ContinuationDirContext#getSchema(Name)::: continuation dir context get schema:::res->getTargetContext->return->res->getDirContext->res->getName->getSchema
ContinuationDirContext#getSchemaClassDefinition(String)::: continuation dir context get schema class definition:::res->getTargetContext->return->res->getDirContext->res->getString->getSchemaClassDefinition
ContinuationDirContext#getSchemaClassDefinition(Name)::: continuation dir context get schema class definition:::res->getTargetContext->return->res->getDirContext->res->getName->getSchemaClassDefinition
DirContextNamePair#getDirContext()::: dir context name pair get dir context:::return
DirContextNamePair#getName()::: dir context name pair get name:::return
DirContextStringPair#getDirContext()::: dir context string pair get dir context:::return
DirContextStringPair#getString()::: dir context string pair get string:::return
DirectoryManager#getContinuationDirContext(CannotProceedException):::Creates a context in which to continue a DirContext operation:::env->cpe->getEnvironment->if->new->Hashtable<>->else->env->clone->env->put->return->new->ContinuationDirContext
DirectoryManager#getObjectInstance(Object, Name, Context, Hashtable, Attributes):::Creates an instance of an object for the specified object, attributes, and environment:::factory->builder->getObjectFactoryBuilder->if->builder->createObjectFactory->if->return->getObjectInstance->else->return->factory->getObjectInstance->ref->if->else->if->getReference->answer->if->f->ref->getFactoryClassName->if->getObjectFactoryFromReference->if->return->getObjectInstance->else->if->return->factory->getObjectInstance->return->else->processURLAddrs->if->return->createObjectFromFactories->return
DirectoryManager#createObjectFromFactories(Object, Name, Context, Hashtable, Attributes)::: directory manager create object from factories:::factories->ResourceManager->getFactories->if->return->factory->answer->while->factories->hasMore->factories->next->if->getObjectInstance->else->factory->getObjectInstance->return
DirectoryManager#getStateToBind(Object, Name, Context, Hashtable, Attributes):::Retrieves the state of an object for binding when given the original object and its attributes:::factories->ResourceManager->getFactories->if->return->new->DirStateFactory.Result->factory->objanswer->answer->while->factories->hasMore->factories->next->if->getStateToBind->else->factory->getStateToBind->if->new->DirStateFactory.Result->return->new->DirStateFactory.Result
DirObjectFactory#getObjectInstance(Object, Name, Context, Hashtable, Attributes):::Creates an object using the location or reference information, and attributes specified:::
DirStateFactory#getStateToBind(Object, Name, Context, Hashtable, Attributes):::Retrieves the state of an object for binding given the object and attributes to be transformed:::
DirStateFactory.Result#getObject():::Retrieves the object to be bound.:::return
DirStateFactory.Result#getAttributes():::Retrieves the attributes to be bound.:::return
InitialContextFactory#getInitialContext(Hashtable):::Creates an Initial Context for beginning name resolution:::
InitialContextFactoryBuilder#createInitialContextFactory(Hashtable):::Creates an initial context factory using the specified environment:::
NamingManager#setObjectFactoryBuilder(ObjectFactoryBuilder):::The ObjectFactoryBuilder determines the policy used when trying to load object factories:::if->throw->new->IllegalStateException->security->System->getSecurityManager->if->security->checkSetFactory
NamingManager#getObjectFactoryBuilder():::Used for accessing object factory builder.:::return
NamingManager#getObjectFactoryFromReference(Reference, String):::Retrieves the ObjectFactory for the object identified by a reference, using the reference's factory class name and factory codebase to load in the factory's class.:::clas->try->helper->loadClass->catch->finally->codebase->if->ref->getFactoryClassLocation->try->helper->loadClass->catch->finally->result->clas->newInstance->return
NamingManager#createObjectFromFactories(Object, Name, Context, Hashtable):::Creates an object using the factories specified in the Context.OBJECT_FACTORIES property of the environment or of the provider resource file associated with nameCtx.:::factories->ResourceManager->getFactories->if->return->factory->answer->while->factories->hasMore->factories->next->factory->getObjectInstance->return
NamingManager#getURLScheme(String)::: naming manager get scheme:::colon_posn->str->indexOf->slash_posn->str->indexOf->if->return->str->substring->return
NamingManager#getObjectInstance(Object, Name, Context, Hashtable):::Creates an instance of an object for the specified object and environment:::factory->builder->getObjectFactoryBuilder->if->builder->createObjectFactory->return->factory->getObjectInstance->ref->if->else->if->getReference->answer->if->f->ref->getFactoryClassName->if->getObjectFactoryFromReference->if->return->factory->getObjectInstance->return->else->processURLAddrs->if->return->createObjectFromFactories->return
NamingManager#processURLAddrs(Reference, Name, Context, Hashtable)::: naming manager process addrs:::for->i->ref->size->return
NamingManager#processURL(Object, Name, Context, Hashtable)::: naming manager process l:::answer->if->url->scheme->getURLScheme->if->getURLObject->if->return->if->urls->for->i->return
NamingManager#getContext(Object, Name, Context, Hashtable):::Retrieves a context identified by obj, using the specified environment:::answer->if->return->try->getObjectInstance->catch->throw->ne->new->NamingException->ne->setRootCause->throw->finally->return
NamingManager#getResolver(Object, Name, Context, Hashtable)::: naming manager get resolver:::answer->if->return->try->getObjectInstance->catch->throw->ne->new->NamingException->ne->setRootCause->throw->finally->return
NamingManager#getURLContext(String, Hashtable):::Creates a context for the given URL scheme id:::answer->getURLObject->if->return->else->return
NamingManager#getURLObject(String, Object, Name, Context, Hashtable):::Creates an object for the given URL scheme id using the supplied urlInfo:::factory->ResourceManager->getFactory->if->return->try->return->factory->getObjectInstance->catch->throw->ne->new->NamingException->ne->setRootCause->throw->finally
NamingManager#getInitialContextFactoryBuilder():::Use this method for accessing initctx_factory_builder while inside an unsynchronized method.:::return
NamingManager#getInitialContext(Hashtable):::Creates an initial context using the specified environment properties:::loader->factory->builder->getInitialContextFactoryBuilder->if->className->env->get->if->ne->new->NoInitialContextException->throw->if->System->getSecurityManager->Thread->currentThread->getContextClassLoader->if->ClassLoader->getSystemClassLoader->else->pa->cl->Thread->currentThread->getContextClassLoader->return->ClassLoader->getSystemClassLoader->AccessController->doPrivileged->key->FACTORIES_CACHE->sub->try->key->ky->key->getFactory->computeIfAbsent->catch->throw->e->getCause->finally->else->builder->createInitialContextFactory->return->factory->getInitialContext
NamingManager#getFactory(String)::: naming manager get factory:::factory->try->loader->ServiceLoader->load->loader->stream->p->type->getName->equals->filter->findFirst->ServiceLoader.Provider->get->map->orElse->catch->ne->new->NoInitialContextException->ne->setRootCause->throw->new->FactoryInitializationError->finally->if->try->o->helper->loadClass->newInstance->catch->ne->new->NoInitialContextException->ne->setRootCause->throw->new->FactoryInitializationError->finally->return
NamingManager#setInitialContextFactoryBuilder(InitialContextFactoryBuilder):::Sets the InitialContextFactory builder to be builder:::if->throw->new->IllegalStateException->security->System->getSecurityManager->if->security->checkSetFactory
NamingManager#hasInitialContextFactoryBuilder():::Determines whether an initial context factory builder has been set.:::return->getInitialContextFactoryBuilder
NamingManager#getContinuationContext(CannotProceedException):::Creates a context in which to continue a context operation:::env->cpe->getEnvironment->if->new->Hashtable<>->else->env->clone->env->put->cctx->new->ContinuationContext->return->cctx->getTargetContext
NamingManager#getStateToBind(Object, Name, Context, Hashtable):::Retrieves the state of an object for binding:::factories->ResourceManager->getFactories->if->return->factory->answer->while->factories->hasMore->factories->next->factory->getStateToBind->return
NamingManager.FactoryInitializationError#getCause()::: factory initialization error get cause:::return->super->getCause
ObjectFactory#getObjectInstance(Object, Name, Context, Hashtable):::Creates an object using the location or reference information specified:::
ObjectFactoryBuilder#createObjectFactory(Object, Hashtable):::Creates a new object factory using the environment supplied:::
Resolver#resolveToClass(Name, Class):::Partially resolves a name:::
Resolver#resolveToClass(String, Class):::Partially resolves a name:::
ResolveResult#getRemainingName():::Retrieves the remaining unresolved portion of the name.:::return
ResolveResult#getResolvedObj():::Retrieves the Object to which resolution was successful.:::return
ResolveResult#setRemainingName(Name):::Sets the remaining name field of this result to name:::if->name->clone->else
ResolveResult#appendRemainingName(Name):::Adds components to the end of remaining name.:::if->if->try->addAll->catch->finally->else->name->clone
ResolveResult#appendRemainingComponent(String):::Adds a single component to the end of remaining name.:::if->rname->new->CompositeName->try->rname->add->catch->finally->appendRemainingName
ResolveResult#setResolvedObj(Object):::Sets the resolved Object field of this result to obj.:::
StateFactory#getStateToBind(Object, Name, Context, Hashtable):::Retrieves the state of an object for binding:::

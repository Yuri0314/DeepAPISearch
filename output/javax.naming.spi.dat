DirectoryManager#getContinuationDirContext(CannotProceedException):::Creates a context in which to continue a DirContext operation:::env->cpe->getEnvironment->if->new->Hashtable<>->else->env->clone->env->put->return->new->ContinuationDirContext
DirectoryManager#getObjectInstance(Object, Name, Context, Hashtable, Attributes):::Creates an instance of an object for the specified object, attributes, and environment:::factory->builder->getObjectFactoryBuilder->if->builder->createObjectFactory->if->return->getObjectInstance->else->return->factory->getObjectInstance->ref->if->else->if->getReference->answer->if->f->ref->getFactoryClassName->if->getObjectFactoryFromReference->if->return->getObjectInstance->else->if->return->factory->getObjectInstance->return->else->processURLAddrs->if->return->createObjectFromFactories->return
DirectoryManager#getStateToBind(Object, Name, Context, Hashtable, Attributes):::Retrieves the state of an object for binding when given the original object and its attributes:::factories->ResourceManager->getFactories->if->return->new->DirStateFactory.Result->factory->objanswer->answer->while->factories->hasMore->factories->next->if->getStateToBind->else->factory->getStateToBind->if->new->DirStateFactory.Result->return->new->DirStateFactory.Result
DirObjectFactory#getObjectInstance(Object, Name, Context, Hashtable, Attributes):::Creates an object using the location or reference information, and attributes specified:::
DirStateFactory#getStateToBind(Object, Name, Context, Hashtable, Attributes):::Retrieves the state of an object for binding given the object and attributes to be transformed:::
DirStateFactory.Result#getObject():::Retrieves the object to be bound.:::return
DirStateFactory.Result#getAttributes():::Retrieves the attributes to be bound.:::return
InitialContextFactory#getInitialContext(Hashtable):::Creates an Initial Context for beginning name resolution:::
InitialContextFactoryBuilder#createInitialContextFactory(Hashtable):::Creates an initial context factory using the specified environment:::
NamingManager#setObjectFactoryBuilder(ObjectFactoryBuilder):::The ObjectFactoryBuilder determines the policy used when trying to load object factories:::if->throw->new->IllegalStateException->security->System->getSecurityManager->if->security->checkSetFactory
NamingManager#getObjectFactoryBuilder():::Used for accessing object factory builder.:::return
NamingManager#getObjectFactoryFromReference(Reference, String):::Retrieves the ObjectFactory for the object identified by a reference, using the reference's factory class name and factory codebase to load in the factory's class.:::clas->try->helper->loadClass->catch->finally->codebase->if->ref->getFactoryClassLocation->try->helper->loadClass->catch->finally->result->clas->newInstance->return
NamingManager#getObjectInstance(Object, Name, Context, Hashtable):::Creates an instance of an object for the specified object and environment:::factory->builder->getObjectFactoryBuilder->if->builder->createObjectFactory->return->factory->getObjectInstance->ref->if->else->if->getReference->answer->if->f->ref->getFactoryClassName->if->getObjectFactoryFromReference->if->return->factory->getObjectInstance->return->else->processURLAddrs->if->return->createObjectFromFactories->return
NamingManager#getContext(Object, Name, Context, Hashtable):::Retrieves a context identified by obj, using the specified environment:::answer->if->return->try->getObjectInstance->catch->throw->ne->new->NamingException->ne->setRootCause->throw->finally->return
NamingManager#getURLContext(String, Hashtable):::Creates a context for the given URL scheme id:::answer->getURLObject->if->return->else->return
NamingManager#getInitialContext(Hashtable):::Creates an initial context using the specified environment properties:::loader->factory->builder->getInitialContextFactoryBuilder->if->className->env->get->if->ne->new->NoInitialContextException->throw->if->System->getSecurityManager->Thread->currentThread->getContextClassLoader->if->ClassLoader->getSystemClassLoader->else->pa->cl->Thread->currentThread->getContextClassLoader->return->ClassLoader->getSystemClassLoader->AccessController->doPrivileged->key->FACTORIES_CACHE->sub->try->key->ky->key->getFactory->computeIfAbsent->catch->throw->e->getCause->finally->else->builder->createInitialContextFactory->return->factory->getInitialContext
NamingManager#setInitialContextFactoryBuilder(InitialContextFactoryBuilder):::Sets the InitialContextFactory builder to be builder:::if->throw->new->IllegalStateException->security->System->getSecurityManager->if->security->checkSetFactory
NamingManager#hasInitialContextFactoryBuilder():::Determines whether an initial context factory builder has been set.:::return->getInitialContextFactoryBuilder
NamingManager#getContinuationContext(CannotProceedException):::Creates a context in which to continue a context operation:::env->cpe->getEnvironment->if->new->Hashtable<>->else->env->clone->env->put->cctx->new->ContinuationContext->return->cctx->getTargetContext
NamingManager#getStateToBind(Object, Name, Context, Hashtable):::Retrieves the state of an object for binding:::factories->ResourceManager->getFactories->if->return->factory->answer->while->factories->hasMore->factories->next->factory->getStateToBind->return
ObjectFactory#getObjectInstance(Object, Name, Context, Hashtable):::Creates an object using the location or reference information specified:::
ObjectFactoryBuilder#createObjectFactory(Object, Hashtable):::Creates a new object factory using the environment supplied:::
Resolver#resolveToClass(Name, Class):::Partially resolves a name:::
Resolver#resolveToClass(String, Class):::Partially resolves a name:::
ResolveResult#getRemainingName():::Retrieves the remaining unresolved portion of the name.:::return
ResolveResult#getResolvedObj():::Retrieves the Object to which resolution was successful.:::return
ResolveResult#setRemainingName(Name):::Sets the remaining name field of this result to name:::if->name->clone->else
ResolveResult#appendRemainingName(Name):::Adds components to the end of remaining name.:::if->if->try->addAll->catch->finally->else->name->clone
ResolveResult#appendRemainingComponent(String):::Adds a single component to the end of remaining name.:::if->rname->new->CompositeName->try->rname->add->catch->finally->appendRemainingName
ResolveResult#setResolvedObj(Object):::Sets the resolved Object field of this result to obj.:::
StateFactory#getStateToBind(Object, Name, Context, Hashtable):::Retrieves the state of an object for binding:::

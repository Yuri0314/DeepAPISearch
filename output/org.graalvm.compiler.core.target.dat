org.graalvm.compiler.core.target.Backend#addCodeInstallationTask(CodeInstallationTaskFactory)->void::: backend add code installation task
org.graalvm.compiler.core.target.Backend#getProviders()->Providers::: backend get providers
org.graalvm.compiler.core.target.Backend#getCodeCache()->CodeCacheProvider::: backend get code cache
org.graalvm.compiler.core.target.Backend#getMetaAccess()->MetaAccessProvider::: backend get meta access
org.graalvm.compiler.core.target.Backend#getConstantReflection()->ConstantReflectionProvider::: backend get constant reflection
org.graalvm.compiler.core.target.Backend#getForeignCalls()->ForeignCallsProvider::: backend get foreign calls
org.graalvm.compiler.core.target.Backend#getSuites()->SuitesProvider::: backend get suites
org.graalvm.compiler.core.target.Backend#getTarget()->TargetDescription::: backend get target
org.graalvm.compiler.core.target.Backend#getValueKind(JavaKind)->LIRKind::: backend get value kind
org.graalvm.compiler.core.target.Backend#newRegisterAllocationConfig(RegisterConfig, String[])->RegisterAllocationConfig:::Creates a new configuration for register allocation.
org.graalvm.compiler.core.target.Backend#createCompiledCode(ResolvedJavaMethod, CompilationRequest, CompilationResult, boolean, OptionValues)->CompiledCode:::Turns a Graal CompilationResult into a CompiledCode object that can be passed to the VM for code installation.
org.graalvm.compiler.core.target.Backend#createInstalledCode(DebugContext, ResolvedJavaMethod, CompilationResult, InstalledCode, boolean)->InstalledCode::: backend create installed code
org.graalvm.compiler.core.target.Backend#createInstalledCode(DebugContext, ResolvedJavaMethod, CompilationRequest, CompilationResult, InstalledCode, boolean)->InstalledCode::: backend create installed code
org.graalvm.compiler.core.target.Backend#createInstalledCode(DebugContext, ResolvedJavaMethod, CompilationRequest, CompilationResult, InstalledCode, boolean, Object[])->InstalledCode:::Installs code based on a given compilation result.
org.graalvm.compiler.core.target.Backend#addInstalledCode(DebugContext, ResolvedJavaMethod, CompilationRequest, CompilationResult)->InstalledCode:::Installs code based on a given compilation result.
org.graalvm.compiler.core.target.Backend#createDefaultInstalledCode(DebugContext, ResolvedJavaMethod, CompilationResult)->InstalledCode:::Installs code based on a given compilation result and sets it as the default code to be used when method is invoked.
org.graalvm.compiler.core.target.Backend#getCompilationIdentifier(ResolvedJavaMethod)->CompilationIdentifier:::Gets the compilation id for a given ResolvedJavaMethod
org.graalvm.compiler.core.target.Backend#emitBackEnd(StructuredGraph, Object, ResolvedJavaMethod, CompilationResult, CompilationResultBuilderFactory, RegisterConfig, LIRSuites)->void::: backend emit back end
org.graalvm.compiler.core.target.Backend.CodeInstallationTask#preProcess(CompilationResult)->void:::Task to run before code installation.
org.graalvm.compiler.core.target.Backend.CodeInstallationTask#postProcess(CompilationResult, InstalledCode)->void:::Task to run after the code is installed.
org.graalvm.compiler.core.target.Backend.CodeInstallationTask#installFailed(Throwable)->void:::Invoked after #preProcess when code installation fails.
org.graalvm.compiler.core.target.Backend.CodeInstallationTaskFactory#create()->CodeInstallationTask::: code installation task factory create

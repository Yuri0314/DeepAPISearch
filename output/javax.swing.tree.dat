javax.swing.tree.AbstractLayoutCache#setNodeDimensions(NodeDimensions)->void:::Sets the renderer that is responsible for drawing nodes in the tree and which is therefore responsible for calculating the dimensions of individual nodes.
javax.swing.tree.AbstractLayoutCache#getNodeDimensions()->NodeDimensions:::Returns the object that renders nodes in the tree, and which is responsible for calculating the dimensions of individual nodes.
javax.swing.tree.AbstractLayoutCache#setModel(TreeModel)->void:::Sets the TreeModel that will provide the data.
javax.swing.tree.AbstractLayoutCache#getModel()->TreeModel:::Returns the TreeModel that is providing the data.
javax.swing.tree.AbstractLayoutCache#setRootVisible(boolean)->void:::Determines whether or not the root node from the TreeModel is visible.
javax.swing.tree.AbstractLayoutCache#isRootVisible()->boolean:::Returns true if the root node of the tree is displayed.
javax.swing.tree.AbstractLayoutCache#setRowHeight(int)->void:::Sets the height of each cell
javax.swing.tree.AbstractLayoutCache#getRowHeight()->int:::Returns the height of each row
javax.swing.tree.AbstractLayoutCache#setSelectionModel(TreeSelectionModel)->void:::Sets the TreeSelectionModel used to manage the selection to new LSM.
javax.swing.tree.AbstractLayoutCache#getSelectionModel()->TreeSelectionModel:::Returns the model used to maintain the selection.
javax.swing.tree.AbstractLayoutCache#getPreferredHeight()->int:::Returns the preferred height.
javax.swing.tree.AbstractLayoutCache#getPreferredWidth(Rectangle)->int:::Returns the preferred width for the passed in region
javax.swing.tree.AbstractLayoutCache#isExpanded(TreePath)->boolean:::Returns true if the value identified by row is currently expanded.
javax.swing.tree.AbstractLayoutCache#getBounds(TreePath, Rectangle)->Rectangle:::Returns a rectangle giving the bounds needed to draw path.
javax.swing.tree.AbstractLayoutCache#getPathForRow(int)->TreePath:::Returns the path for passed in row
javax.swing.tree.AbstractLayoutCache#getRowForPath(TreePath)->int:::Returns the row that the last item identified in path is visible at
javax.swing.tree.AbstractLayoutCache#getPathClosestTo(int, int)->TreePath:::Returns the path to the node that is closest to x,y
javax.swing.tree.AbstractLayoutCache#getVisiblePathsFrom(TreePath)->Enumeration:::Returns an Enumerator that increments over the visible paths starting at the passed in location
javax.swing.tree.AbstractLayoutCache#getVisibleChildCount(TreePath)->int:::Returns the number of visible children for row.
javax.swing.tree.AbstractLayoutCache#setExpandedState(TreePath, boolean)->void:::Marks the path path expanded state to isExpanded.
javax.swing.tree.AbstractLayoutCache#getExpandedState(TreePath)->boolean:::Returns true if the path is expanded, and visible.
javax.swing.tree.AbstractLayoutCache#getRowCount()->int:::Number of rows being displayed.
javax.swing.tree.AbstractLayoutCache#invalidateSizes()->void:::Informs the TreeState that it needs to recalculate all the sizes it is referencing.
javax.swing.tree.AbstractLayoutCache#invalidatePathBounds(TreePath)->void:::Instructs the LayoutCache that the bounds for path are invalid, and need to be updated.
javax.swing.tree.AbstractLayoutCache#treeNodesChanged(TreeModelEvent)->void::: Invoked after a node (or a set of siblings) has changed in some way
javax.swing.tree.AbstractLayoutCache#treeNodesInserted(TreeModelEvent)->void:::Invoked after nodes have been inserted into the tree.  e.path() returns the parent of the new nodes e.childIndices() returns the indices of the new nodes in ascending order.
javax.swing.tree.AbstractLayoutCache#treeNodesRemoved(TreeModelEvent)->void:::Invoked after nodes have been removed from the tree
javax.swing.tree.AbstractLayoutCache#treeStructureChanged(TreeModelEvent)->void:::Invoked after the tree has drastically changed structure from a given node down
javax.swing.tree.AbstractLayoutCache#getRowsForPaths(TreePath[])->int[]:::Returns the rows that the TreePath instances in path are being displayed at
javax.swing.tree.AbstractLayoutCache#getNodeDimensions(Object, int, int, boolean, Rectangle)->Rectangle:::Returns, by reference in placeIn, the size needed to represent value
javax.swing.tree.AbstractLayoutCache#isFixedRowHeight()->boolean:::Returns true if the height of each row is a fixed size.
javax.swing.tree.AbstractLayoutCache.NodeDimensions#getNodeDimensions(Object, int, int, boolean, Rectangle)->Rectangle:::Returns, by reference in bounds, the size and x origin to place value at
javax.swing.tree.DefaultMutableTreeNode#insert(MutableTreeNode, int)->void:::Removes newChild from its present parent (if it has a parent), sets the child's parent to this node, and then adds the child to this node's child array at index childIndex
javax.swing.tree.DefaultMutableTreeNode#remove(int)->void:::Removes the child at the specified index from this node's children and sets that node's parent to null
javax.swing.tree.DefaultMutableTreeNode#setParent(MutableTreeNode)->void:::Sets this node's parent to newParent but does not change the parent's child array
javax.swing.tree.DefaultMutableTreeNode#getParent()->TreeNode:::Returns this node's parent or null if this node has no parent.
javax.swing.tree.DefaultMutableTreeNode#getChildAt(int)->TreeNode:::Returns the child at the specified index in this node's child array.
javax.swing.tree.DefaultMutableTreeNode#getChildCount()->int:::Returns the number of children of this node.
javax.swing.tree.DefaultMutableTreeNode#getIndex(TreeNode)->int:::Returns the index of the specified child in this node's child array
javax.swing.tree.DefaultMutableTreeNode#children()->Enumeration:::Creates and returns a forward-order enumeration of this node's children
javax.swing.tree.DefaultMutableTreeNode#setAllowsChildren(boolean)->void:::Determines whether or not this node is allowed to have children
javax.swing.tree.DefaultMutableTreeNode#getAllowsChildren()->boolean:::Returns true if this node is allowed to have children.
javax.swing.tree.DefaultMutableTreeNode#setUserObject(Object)->void:::Sets the user object for this node to userObject.
javax.swing.tree.DefaultMutableTreeNode#getUserObject()->Object:::Returns this node's user object.
javax.swing.tree.DefaultMutableTreeNode#removeFromParent()->void:::Removes the subtree rooted at this node from the tree, giving this node a null parent
javax.swing.tree.DefaultMutableTreeNode#remove(MutableTreeNode)->void:::Removes aChild from this node's child array, giving it a null parent.
javax.swing.tree.DefaultMutableTreeNode#removeAllChildren()->void:::Removes all of this node's children, setting their parents to null
javax.swing.tree.DefaultMutableTreeNode#add(MutableTreeNode)->void:::Removes newChild from its parent and makes it a child of this node by adding it to the end of this node's child array.
javax.swing.tree.DefaultMutableTreeNode#isNodeAncestor(TreeNode)->boolean:::Returns true if anotherNode is an ancestor of this node -- if it is this node, this node's parent, or an ancestor of this node's parent
javax.swing.tree.DefaultMutableTreeNode#isNodeDescendant(DefaultMutableTreeNode)->boolean:::Returns true if anotherNode is a descendant of this node -- if it is this node, one of this node's children, or a descendant of one of this node's children
javax.swing.tree.DefaultMutableTreeNode#getSharedAncestor(DefaultMutableTreeNode)->TreeNode:::Returns the nearest common ancestor to this node and aNode
javax.swing.tree.DefaultMutableTreeNode#isNodeRelated(DefaultMutableTreeNode)->boolean:::Returns true if and only if aNode is in the same tree as this node
javax.swing.tree.DefaultMutableTreeNode#getDepth()->int:::Returns the depth of the tree rooted at this node -- the longest distance from this node to a leaf
javax.swing.tree.DefaultMutableTreeNode#getLevel()->int:::Returns the number of levels above this node -- the distance from the root to this node
javax.swing.tree.DefaultMutableTreeNode#getPath()->TreeNode[]:::Returns the path from the root, to get to this node
javax.swing.tree.DefaultMutableTreeNode#getPathToRoot(TreeNode, int)->TreeNode[]:::Builds the parents of node up to and including the root node, where the original node is the last element in the returned array
javax.swing.tree.DefaultMutableTreeNode#getUserObjectPath()->Object[]:::Returns the user object path, from the root, to get to this node
javax.swing.tree.DefaultMutableTreeNode#getRoot()->TreeNode:::Returns the root of the tree that contains this node
javax.swing.tree.DefaultMutableTreeNode#isRoot()->boolean:::Returns true if this node is the root of the tree
javax.swing.tree.DefaultMutableTreeNode#getNextNode()->DefaultMutableTreeNode:::Returns the node that follows this node in a preorder traversal of this node's tree
javax.swing.tree.DefaultMutableTreeNode#getPreviousNode()->DefaultMutableTreeNode:::Returns the node that precedes this node in a preorder traversal of this node's tree
javax.swing.tree.DefaultMutableTreeNode#preorderEnumeration()->Enumeration:::Creates and returns an enumeration that traverses the subtree rooted at this node in preorder
javax.swing.tree.DefaultMutableTreeNode#postorderEnumeration()->Enumeration:::Creates and returns an enumeration that traverses the subtree rooted at this node in postorder
javax.swing.tree.DefaultMutableTreeNode#breadthFirstEnumeration()->Enumeration:::Creates and returns an enumeration that traverses the subtree rooted at this node in breadth-first order
javax.swing.tree.DefaultMutableTreeNode#depthFirstEnumeration()->Enumeration:::Creates and returns an enumeration that traverses the subtree rooted at this node in depth-first order
javax.swing.tree.DefaultMutableTreeNode#pathFromAncestorEnumeration(TreeNode)->Enumeration:::Creates and returns an enumeration that follows the path from ancestor to this node
javax.swing.tree.DefaultMutableTreeNode#isNodeChild(TreeNode)->boolean:::Returns true if aNode is a child of this node
javax.swing.tree.DefaultMutableTreeNode#getFirstChild()->TreeNode:::Returns this node's first child
javax.swing.tree.DefaultMutableTreeNode#getLastChild()->TreeNode:::Returns this node's last child
javax.swing.tree.DefaultMutableTreeNode#getChildAfter(TreeNode)->TreeNode:::Returns the child in this node's child array that immediately follows aChild, which must be a child of this node
javax.swing.tree.DefaultMutableTreeNode#getChildBefore(TreeNode)->TreeNode:::Returns the child in this node's child array that immediately precedes aChild, which must be a child of this node
javax.swing.tree.DefaultMutableTreeNode#isNodeSibling(TreeNode)->boolean:::Returns true if anotherNode is a sibling of (has the same parent as) this node
javax.swing.tree.DefaultMutableTreeNode#getSiblingCount()->int:::Returns the number of siblings of this node
javax.swing.tree.DefaultMutableTreeNode#getNextSibling()->DefaultMutableTreeNode:::Returns the next sibling of this node in the parent's children array
javax.swing.tree.DefaultMutableTreeNode#getPreviousSibling()->DefaultMutableTreeNode:::Returns the previous sibling of this node in the parent's children array
javax.swing.tree.DefaultMutableTreeNode#isLeaf()->boolean:::Returns true if this node has no children
javax.swing.tree.DefaultMutableTreeNode#getFirstLeaf()->DefaultMutableTreeNode:::Finds and returns the first leaf that is a descendant of this node -- either this node or its first child's first leaf
javax.swing.tree.DefaultMutableTreeNode#getLastLeaf()->DefaultMutableTreeNode:::Finds and returns the last leaf that is a descendant of this node -- either this node or its last child's last leaf
javax.swing.tree.DefaultMutableTreeNode#getNextLeaf()->DefaultMutableTreeNode:::Returns the leaf after this node or null if this node is the last leaf in the tree
javax.swing.tree.DefaultMutableTreeNode#getPreviousLeaf()->DefaultMutableTreeNode:::Returns the leaf before this node or null if this node is the first leaf in the tree
javax.swing.tree.DefaultMutableTreeNode#getLeafCount()->int:::Returns the total number of leaves that are descendants of this node
javax.swing.tree.DefaultMutableTreeNode#toString()->String:::Returns the result of sending toString() to this node's user object, or the empty string if the node has no user object.
javax.swing.tree.DefaultMutableTreeNode#clone()->Object:::Overridden to make clone public
javax.swing.tree.DefaultMutableTreeNode.PostorderEnumeration#hasMoreElements()->boolean::: postorder enumeration has more elements
javax.swing.tree.DefaultMutableTreeNode.PostorderEnumeration#nextElement()->TreeNode::: postorder enumeration next element
javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration#hasMoreElements()->boolean::: breadth first enumeration has more elements
javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration#nextElement()->TreeNode::: breadth first enumeration next element
javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue#enqueue(Object)->void::: queue enqueue
javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue#dequeue()->Object::: queue dequeue
javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue#firstObject()->Object::: queue first object
javax.swing.tree.DefaultMutableTreeNode.BreadthFirstEnumeration.Queue#isEmpty()->boolean::: queue is empty
javax.swing.tree.DefaultMutableTreeNode.PathBetweenNodesEnumeration#hasMoreElements()->boolean::: path between nodes enumeration has more elements
javax.swing.tree.DefaultMutableTreeNode.PathBetweenNodesEnumeration#nextElement()->TreeNode::: path between nodes enumeration next element
javax.swing.tree.DefaultTreeCellEditor#setBorderSelectionColor(Color)->void:::Sets the color to use for the border.
javax.swing.tree.DefaultTreeCellEditor#getBorderSelectionColor()->Color:::Returns the color the border is drawn.
javax.swing.tree.DefaultTreeCellEditor#setFont(Font)->void:::Sets the font to edit with
javax.swing.tree.DefaultTreeCellEditor#getFont()->Font:::Gets the font used for editing.
javax.swing.tree.DefaultTreeCellEditor#getTreeCellEditorComponent(JTree, Object, boolean, boolean, boolean, int)->Component:::Configures the editor
javax.swing.tree.DefaultTreeCellEditor#getCellEditorValue()->Object:::Returns the value currently being edited.
javax.swing.tree.DefaultTreeCellEditor#isCellEditable(EventObject)->boolean:::If the realEditor returns true to this message, prepareForEditing is messaged and true is returned.
javax.swing.tree.DefaultTreeCellEditor#shouldSelectCell(EventObject)->boolean:::Messages the realEditor for the return value.
javax.swing.tree.DefaultTreeCellEditor#stopCellEditing()->boolean:::If the realEditor will allow editing to stop, the realEditor is removed and true is returned, otherwise false is returned.
javax.swing.tree.DefaultTreeCellEditor#cancelCellEditing()->void:::Messages cancelCellEditing to the realEditor and removes it from this instance.
javax.swing.tree.DefaultTreeCellEditor#addCellEditorListener(CellEditorListener)->void:::Adds the CellEditorListener.
javax.swing.tree.DefaultTreeCellEditor#removeCellEditorListener(CellEditorListener)->void:::Removes the previously added CellEditorListener.
javax.swing.tree.DefaultTreeCellEditor#getCellEditorListeners()->CellEditorListener[]:::Returns an array of all the CellEditorListeners added to this DefaultTreeCellEditor with addCellEditorListener().
javax.swing.tree.DefaultTreeCellEditor#valueChanged(TreeSelectionEvent)->void:::Resets lastPath.
javax.swing.tree.DefaultTreeCellEditor#actionPerformed(ActionEvent)->void:::Messaged when the timer fires, this will start the editing session.
javax.swing.tree.DefaultTreeCellEditor#setTree(JTree)->void:::Sets the tree currently editing for
javax.swing.tree.DefaultTreeCellEditor#shouldStartEditingTimer(EventObject)->boolean:::Returns true if event is a MouseEvent and the click count is 1.
javax.swing.tree.DefaultTreeCellEditor#startEditingTimer()->void:::Starts the editing timer.
javax.swing.tree.DefaultTreeCellEditor#canEditImmediately(EventObject)->boolean:::Returns true if event is null, or it is a MouseEvent with a click count &gt; 2 and inHitRegion returns true.
javax.swing.tree.DefaultTreeCellEditor#inHitRegion(int, int)->boolean:::Returns true if the passed in location is a valid mouse location to start editing from
javax.swing.tree.DefaultTreeCellEditor#determineOffset(JTree, Object, boolean, boolean, boolean, int)->void:::Determine the offset.
javax.swing.tree.DefaultTreeCellEditor#prepareForEditing()->void:::Invoked just before editing is to start
javax.swing.tree.DefaultTreeCellEditor#createContainer()->Container:::Creates the container to manage placement of editingComponent.
javax.swing.tree.DefaultTreeCellEditor#createTreeCellEditor()->TreeCellEditor:::This is invoked if a TreeCellEditor is not supplied in the constructor
javax.swing.tree.DefaultTreeCellEditor.DefaultTextField#setBorder(Border)->void:::Sets the border of this component. This is a bound property.
javax.swing.tree.DefaultTreeCellEditor.DefaultTextField#getBorder()->Border:::Overrides JComponent.getBorder to returns the current border.
javax.swing.tree.DefaultTreeCellEditor.DefaultTextField#getFont()->Font::: default text field get font
javax.swing.tree.DefaultTreeCellEditor.DefaultTextField#getPreferredSize()->Dimension:::Overrides JTextField.getPreferredSize to return the preferred size based on current font, if set, or else use renderer's font.
javax.swing.tree.DefaultTreeCellEditor.EditorContainer#EditorContainer()->void:::Do not use.
javax.swing.tree.DefaultTreeCellEditor.EditorContainer#paint(Graphics)->void:::Overrides Container.paint to paint the node's icon and use the selection color for the background.
javax.swing.tree.DefaultTreeCellEditor.EditorContainer#doLayout()->void:::Lays out this Container
javax.swing.tree.DefaultTreeCellEditor.EditorContainer#getPreferredSize()->Dimension:::Returns the preferred size for the Container
javax.swing.tree.DefaultTreeCellRenderer#updateUI()->void::: default tree cell renderer update i
javax.swing.tree.DefaultTreeCellRenderer#getDefaultOpenIcon()->Icon:::Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are expanded.
javax.swing.tree.DefaultTreeCellRenderer#getDefaultClosedIcon()->Icon:::Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are not expanded.
javax.swing.tree.DefaultTreeCellRenderer#getDefaultLeafIcon()->Icon:::Returns the default icon, for the current laf, that is used to represent leaf nodes.
javax.swing.tree.DefaultTreeCellRenderer#setOpenIcon(Icon)->void:::Sets the icon used to represent non-leaf nodes that are expanded.
javax.swing.tree.DefaultTreeCellRenderer#getOpenIcon()->Icon:::Returns the icon used to represent non-leaf nodes that are expanded.
javax.swing.tree.DefaultTreeCellRenderer#setClosedIcon(Icon)->void:::Sets the icon used to represent non-leaf nodes that are not expanded.
javax.swing.tree.DefaultTreeCellRenderer#getClosedIcon()->Icon:::Returns the icon used to represent non-leaf nodes that are not expanded.
javax.swing.tree.DefaultTreeCellRenderer#setLeafIcon(Icon)->void:::Sets the icon used to represent leaf nodes.
javax.swing.tree.DefaultTreeCellRenderer#getLeafIcon()->Icon:::Returns the icon used to represent leaf nodes.
javax.swing.tree.DefaultTreeCellRenderer#setTextSelectionColor(Color)->void:::Sets the color the text is drawn with when the node is selected.
javax.swing.tree.DefaultTreeCellRenderer#getTextSelectionColor()->Color:::Returns the color the text is drawn with when the node is selected.
javax.swing.tree.DefaultTreeCellRenderer#setTextNonSelectionColor(Color)->void:::Sets the color the text is drawn with when the node isn't selected.
javax.swing.tree.DefaultTreeCellRenderer#getTextNonSelectionColor()->Color:::Returns the color the text is drawn with when the node isn't selected.
javax.swing.tree.DefaultTreeCellRenderer#setBackgroundSelectionColor(Color)->void:::Sets the color to use for the background if node is selected.
javax.swing.tree.DefaultTreeCellRenderer#getBackgroundSelectionColor()->Color:::Returns the color to use for the background if node is selected.
javax.swing.tree.DefaultTreeCellRenderer#setBackgroundNonSelectionColor(Color)->void:::Sets the background color to be used for non selected nodes.
javax.swing.tree.DefaultTreeCellRenderer#getBackgroundNonSelectionColor()->Color:::Returns the background color to be used for non selected nodes.
javax.swing.tree.DefaultTreeCellRenderer#setBorderSelectionColor(Color)->void:::Sets the color to use for the border.
javax.swing.tree.DefaultTreeCellRenderer#getBorderSelectionColor()->Color:::Returns the color the border is drawn.
javax.swing.tree.DefaultTreeCellRenderer#setFont(Font)->void:::Subclassed to map FontUIResources to null
javax.swing.tree.DefaultTreeCellRenderer#getFont()->Font:::Gets the font of this component.
javax.swing.tree.DefaultTreeCellRenderer#setBackground(Color)->void:::Subclassed to map ColorUIResources to null
javax.swing.tree.DefaultTreeCellRenderer#getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean)->Component:::Configures the renderer based on the passed in components
javax.swing.tree.DefaultTreeCellRenderer#paint(Graphics)->void:::Paints the value
javax.swing.tree.DefaultTreeCellRenderer#getPreferredSize()->Dimension:::Overrides JComponent.getPreferredSize to return slightly wider preferred size value.
javax.swing.tree.DefaultTreeCellRenderer#validate()->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#invalidate()->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#revalidate()->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#repaint(long, int, int, int, int)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#repaint(Rectangle)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#repaint()->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#firePropertyChange(String, Object, Object)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#firePropertyChange(String, byte, byte)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#firePropertyChange(String, char, char)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#firePropertyChange(String, short, short)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#firePropertyChange(String, int, int)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#firePropertyChange(String, long, long)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#firePropertyChange(String, float, float)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#firePropertyChange(String, double, double)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeCellRenderer#firePropertyChange(String, boolean, boolean)->void:::Overridden for performance reasons
javax.swing.tree.DefaultTreeModel#setAsksAllowsChildren(boolean)->void:::Sets whether or not to test leafness by asking getAllowsChildren() or isLeaf() to the TreeNodes
javax.swing.tree.DefaultTreeModel#asksAllowsChildren()->boolean:::Tells how leaf nodes are determined.
javax.swing.tree.DefaultTreeModel#setRoot(TreeNode)->void:::Sets the root to root
javax.swing.tree.DefaultTreeModel#getRoot()->Object:::Returns the root of the tree
javax.swing.tree.DefaultTreeModel#getIndexOfChild(Object, Object)->int:::Returns the index of child in parent
javax.swing.tree.DefaultTreeModel#getChild(Object, int)->Object:::Returns the child of parent at index index in the parent's child array
javax.swing.tree.DefaultTreeModel#getChildCount(Object)->int:::Returns the number of children of parent
javax.swing.tree.DefaultTreeModel#isLeaf(Object)->boolean:::Returns whether the specified node is a leaf node
javax.swing.tree.DefaultTreeModel#reload()->void:::Invoke this method if you've modified the TreeNodes upon which this model depends
javax.swing.tree.DefaultTreeModel#valueForPathChanged(TreePath, Object)->void:::This sets the user object of the TreeNode identified by path and posts a node changed
javax.swing.tree.DefaultTreeModel#insertNodeInto(MutableTreeNode, MutableTreeNode, int)->void:::Invoked this to insert newChild at location index in parents children
javax.swing.tree.DefaultTreeModel#removeNodeFromParent(MutableTreeNode)->void:::Message this to remove node from its parent
javax.swing.tree.DefaultTreeModel#nodeChanged(TreeNode)->void:::Invoke this method after you've changed how node is to be represented in the tree.
javax.swing.tree.DefaultTreeModel#reload(TreeNode)->void:::Invoke this method if you've modified the TreeNodes upon which this model depends
javax.swing.tree.DefaultTreeModel#nodesWereInserted(TreeNode, int[])->void:::Invoke this method after you've inserted some TreeNodes into node
javax.swing.tree.DefaultTreeModel#nodesWereRemoved(TreeNode, int[], Object[])->void:::Invoke this method after you've removed some TreeNodes from node
javax.swing.tree.DefaultTreeModel#nodesChanged(TreeNode, int[])->void:::Invoke this method after you've changed how the children identified by childIndicies are to be represented in the tree.
javax.swing.tree.DefaultTreeModel#nodeStructureChanged(TreeNode)->void:::Invoke this method if you've totally changed the children of node and its children's children..
javax.swing.tree.DefaultTreeModel#getPathToRoot(TreeNode)->TreeNode[]:::Builds the parents of node up to and including the root node, where the original node is the last element in the returned array
javax.swing.tree.DefaultTreeModel#getPathToRoot(TreeNode, int)->TreeNode[]:::Builds the parents of node up to and including the root node, where the original node is the last element in the returned array
javax.swing.tree.DefaultTreeModel#addTreeModelListener(TreeModelListener)->void:::Adds a listener for the TreeModelEvent posted after the tree changes.
javax.swing.tree.DefaultTreeModel#removeTreeModelListener(TreeModelListener)->void:::Removes a listener previously added with <B>addTreeModelListener()</B>.
javax.swing.tree.DefaultTreeModel#getTreeModelListeners()->TreeModelListener[]:::Returns an array of all the tree model listeners registered on this model.
javax.swing.tree.DefaultTreeModel#fireTreeNodesChanged(Object, Object[], int[], Object[])->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.tree.DefaultTreeModel#fireTreeNodesInserted(Object, Object[], int[], Object[])->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.tree.DefaultTreeModel#fireTreeNodesRemoved(Object, Object[], int[], Object[])->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.tree.DefaultTreeModel#fireTreeStructureChanged(Object, Object[], int[], Object[])->void:::Notifies all listeners that have registered interest for notification on this event type
javax.swing.tree.DefaultTreeModel#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this model
javax.swing.tree.DefaultTreeSelectionModel#setRowMapper(RowMapper)->void:::Sets the RowMapper instance
javax.swing.tree.DefaultTreeSelectionModel#getRowMapper()->RowMapper:::Returns the RowMapper instance that is able to map a TreePath to a row.
javax.swing.tree.DefaultTreeSelectionModel#setSelectionMode(int)->void:::Sets the selection model, which must be one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION
javax.swing.tree.DefaultTreeSelectionModel#getSelectionMode()->int:::Returns the selection mode, one of SINGLE_TREE_SELECTION, DISCONTIGUOUS_TREE_SELECTION or CONTIGUOUS_TREE_SELECTION.
javax.swing.tree.DefaultTreeSelectionModel#setSelectionPath(TreePath)->void:::Sets the selection to path
javax.swing.tree.DefaultTreeSelectionModel#setSelectionPaths(TreePath[])->void:::Sets the selection
javax.swing.tree.DefaultTreeSelectionModel#addSelectionPath(TreePath)->void:::Adds path to the current selection
javax.swing.tree.DefaultTreeSelectionModel#addSelectionPaths(TreePath[])->void:::Adds paths to the current selection
javax.swing.tree.DefaultTreeSelectionModel#removeSelectionPath(TreePath)->void:::Removes path from the selection
javax.swing.tree.DefaultTreeSelectionModel#removeSelectionPaths(TreePath[])->void:::Removes paths from the selection
javax.swing.tree.DefaultTreeSelectionModel#getSelectionPath()->TreePath:::Returns the first path in the selection
javax.swing.tree.DefaultTreeSelectionModel#getSelectionPaths()->TreePath[]:::Returns the selection.
javax.swing.tree.DefaultTreeSelectionModel#getSelectionCount()->int:::Returns the number of paths that are selected.
javax.swing.tree.DefaultTreeSelectionModel#isPathSelected(TreePath)->boolean:::Returns true if the path, path, is in the current selection.
javax.swing.tree.DefaultTreeSelectionModel#isSelectionEmpty()->boolean:::Returns true if the selection is currently empty.
javax.swing.tree.DefaultTreeSelectionModel#clearSelection()->void:::Empties the current selection
javax.swing.tree.DefaultTreeSelectionModel#addTreeSelectionListener(TreeSelectionListener)->void:::Adds x to the list of listeners that are notified each time the set of selected TreePaths changes.
javax.swing.tree.DefaultTreeSelectionModel#removeTreeSelectionListener(TreeSelectionListener)->void:::Removes x from the list of listeners that are notified each time the set of selected TreePaths changes.
javax.swing.tree.DefaultTreeSelectionModel#getTreeSelectionListeners()->TreeSelectionListener[]:::Returns an array of all the tree selection listeners registered on this model.
javax.swing.tree.DefaultTreeSelectionModel#fireValueChanged(TreeSelectionEvent)->void:::Notifies all listeners that are registered for tree selection events on this object.
javax.swing.tree.DefaultTreeSelectionModel#getListeners(Class)->T[]:::Returns an array of all the objects currently registered as FooListeners upon this model
javax.swing.tree.DefaultTreeSelectionModel#getSelectionRows()->int[]:::Returns the selection in terms of rows
javax.swing.tree.DefaultTreeSelectionModel#getMinSelectionRow()->int:::Returns the smallest value obtained from the RowMapper for the current set of selected TreePaths
javax.swing.tree.DefaultTreeSelectionModel#getMaxSelectionRow()->int:::Returns the largest value obtained from the RowMapper for the current set of selected TreePaths
javax.swing.tree.DefaultTreeSelectionModel#isRowSelected(int)->boolean:::Returns true if the row identified by row is selected.
javax.swing.tree.DefaultTreeSelectionModel#resetRowSelection()->void:::Updates this object's mapping from TreePath to rows
javax.swing.tree.DefaultTreeSelectionModel#getLeadSelectionRow()->int:::Returns the lead selection index
javax.swing.tree.DefaultTreeSelectionModel#getLeadSelectionPath()->TreePath:::Returns the last path that was added
javax.swing.tree.DefaultTreeSelectionModel#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
javax.swing.tree.DefaultTreeSelectionModel#removePropertyChangeListener(PropertyChangeListener)->void::: default tree selection model remove property change listener
javax.swing.tree.DefaultTreeSelectionModel#getPropertyChangeListeners()->PropertyChangeListener[]:::Returns an array of all the property change listeners registered on this DefaultTreeSelectionModel.
javax.swing.tree.DefaultTreeSelectionModel#insureRowContinuity()->void:::Makes sure the currently selected TreePaths are valid for the current selection mode
javax.swing.tree.DefaultTreeSelectionModel#arePathsContiguous(TreePath[])->boolean:::Returns true if the paths are contiguous, or this object has no RowMapper.
javax.swing.tree.DefaultTreeSelectionModel#canPathsBeAdded(TreePath[])->boolean:::Used to test if a particular set of TreePaths can be added
javax.swing.tree.DefaultTreeSelectionModel#canPathsBeRemoved(TreePath[])->boolean:::Returns true if the paths can be removed without breaking the continuity of the model
javax.swing.tree.DefaultTreeSelectionModel#notifyPathChange(Vector, TreePath)->void:::Notifies listeners of a change in path
javax.swing.tree.DefaultTreeSelectionModel#updateLeadIndex()->void:::Updates the leadIndex instance variable.
javax.swing.tree.DefaultTreeSelectionModel#insureUniqueness()->void:::This method is obsolete and its implementation is now a noop
javax.swing.tree.DefaultTreeSelectionModel#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.tree.DefaultTreeSelectionModel#clone()->Object:::Returns a clone of this object with the same selection
javax.swing.tree.FixedHeightLayoutCache#setModel(TreeModel)->void:::Sets the TreeModel that will provide the data.
javax.swing.tree.FixedHeightLayoutCache#setRootVisible(boolean)->void:::Determines whether or not the root node from the TreeModel is visible.
javax.swing.tree.FixedHeightLayoutCache#setRowHeight(int)->void:::Sets the height of each cell
javax.swing.tree.FixedHeightLayoutCache#getRowCount()->int:::Returns the number of visible rows.
javax.swing.tree.FixedHeightLayoutCache#invalidatePathBounds(TreePath)->void:::Does nothing, FixedHeightLayoutCache doesn't cache width, and that is all that could change.
javax.swing.tree.FixedHeightLayoutCache#invalidateSizes()->void:::Informs the TreeState that it needs to recalculate all the sizes it is referencing.
javax.swing.tree.FixedHeightLayoutCache#isExpanded(TreePath)->boolean:::Returns true if the value identified by row is currently expanded.
javax.swing.tree.FixedHeightLayoutCache#getBounds(TreePath, Rectangle)->Rectangle:::Returns a rectangle giving the bounds needed to draw path.
javax.swing.tree.FixedHeightLayoutCache#getPathForRow(int)->TreePath:::Returns the path for passed in row
javax.swing.tree.FixedHeightLayoutCache#getRowForPath(TreePath)->int:::Returns the row that the last item identified in path is visible at
javax.swing.tree.FixedHeightLayoutCache#getPathClosestTo(int, int)->TreePath:::Returns the path to the node that is closest to x,y
javax.swing.tree.FixedHeightLayoutCache#getVisibleChildCount(TreePath)->int:::Returns the number of visible children for row.
javax.swing.tree.FixedHeightLayoutCache#getVisiblePathsFrom(TreePath)->Enumeration:::Returns an Enumerator that increments over the visible paths starting at the passed in location
javax.swing.tree.FixedHeightLayoutCache#setExpandedState(TreePath, boolean)->void:::Marks the path path expanded state to isExpanded.
javax.swing.tree.FixedHeightLayoutCache#getExpandedState(TreePath)->boolean:::Returns true if the path is expanded, and visible.
javax.swing.tree.FixedHeightLayoutCache#treeNodesChanged(TreeModelEvent)->void:::Invoked after a node (or a set of siblings) has changed in some way
javax.swing.tree.FixedHeightLayoutCache#treeNodesInserted(TreeModelEvent)->void:::Invoked after nodes have been inserted into the tree.  e.path() returns the parent of the new nodes e.childIndices() returns the indices of the new nodes in ascending order.
javax.swing.tree.FixedHeightLayoutCache#treeNodesRemoved(TreeModelEvent)->void:::Invoked after nodes have been removed from the tree
javax.swing.tree.FixedHeightLayoutCache#treeStructureChanged(TreeModelEvent)->void:::Invoked after the tree has drastically changed structure from a given node down
javax.swing.tree.MutableTreeNode#insert(MutableTreeNode, int)->void:::Adds child to the receiver at index
javax.swing.tree.MutableTreeNode#remove(int)->void:::Removes the child at index from the receiver.
javax.swing.tree.MutableTreeNode#remove(MutableTreeNode)->void:::Removes node from the receiver
javax.swing.tree.MutableTreeNode#setUserObject(Object)->void:::Resets the user object of the receiver to object.
javax.swing.tree.MutableTreeNode#removeFromParent()->void:::Removes the receiver from its parent.
javax.swing.tree.MutableTreeNode#setParent(MutableTreeNode)->void:::Sets the parent of the receiver to newParent.
javax.swing.tree.RowMapper#getRowsForPaths(TreePath[])->int[]:::Returns the rows that the TreePath instances in path are being displayed at
javax.swing.tree.TreeCellEditor#getTreeCellEditorComponent(JTree, Object, boolean, boolean, boolean, int)->Component:::Sets an initial value for the editor
javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean)->Component:::Sets the value of the current tree cell to value
javax.swing.tree.TreeModel#getRoot()->Object:::Returns the root of the tree
javax.swing.tree.TreeModel#getChild(Object, int)->Object:::Returns the child of parent at index index in the parent's child array
javax.swing.tree.TreeModel#getChildCount(Object)->int:::Returns the number of children of parent
javax.swing.tree.TreeModel#isLeaf(Object)->boolean:::Returns true if node is a leaf
javax.swing.tree.TreeModel#valueForPathChanged(TreePath, Object)->void:::Messaged when the user has altered the value for the item identified by path to newValue
javax.swing.tree.TreeModel#getIndexOfChild(Object, Object)->int:::Returns the index of child in parent
javax.swing.tree.TreeModel#addTreeModelListener(TreeModelListener)->void:::Adds a listener for the TreeModelEvent posted after the tree changes.
javax.swing.tree.TreeModel#removeTreeModelListener(TreeModelListener)->void:::Removes a listener previously added with addTreeModelListener.
javax.swing.tree.TreeNode#getChildAt(int)->TreeNode:::Returns the child TreeNode at index childIndex.
javax.swing.tree.TreeNode#getChildCount()->int:::Returns the number of children TreeNodes the receiver contains.
javax.swing.tree.TreeNode#getParent()->TreeNode:::Returns the parent TreeNode of the receiver.
javax.swing.tree.TreeNode#getIndex(TreeNode)->int:::Returns the index of node in the receivers children
javax.swing.tree.TreeNode#getAllowsChildren()->boolean:::Returns true if the receiver allows children.
javax.swing.tree.TreeNode#isLeaf()->boolean:::Returns true if the receiver is a leaf.
javax.swing.tree.TreeNode#children()->Enumeration:::Returns the children of the receiver as an Enumeration.
javax.swing.tree.TreePath#getPath()->Object[]:::Returns an ordered array of the elements of this TreePath
javax.swing.tree.TreePath#getLastPathComponent()->Object:::Returns the last element of this path.
javax.swing.tree.TreePath#getPathCount()->int:::Returns the number of elements in the path.
javax.swing.tree.TreePath#getPathComponent(int)->Object:::Returns the path element at the specified index.
javax.swing.tree.TreePath#equals(Object)->boolean:::Compares this TreePath to the specified object
javax.swing.tree.TreePath#hashCode()->int:::Returns the hash code of this TreePath
javax.swing.tree.TreePath#isDescendant(TreePath)->boolean:::Returns true if aTreePath is a descendant of this TreePath
javax.swing.tree.TreePath#pathByAddingChild(Object)->TreePath:::Returns a new path containing all the elements of this path plus child
javax.swing.tree.TreePath#getParentPath()->TreePath:::Returns the TreePath of the parent
javax.swing.tree.TreePath#toString()->String:::Returns a string that displays and identifies this object's properties.
javax.swing.tree.TreeSelectionModel#setSelectionMode(int)->void:::Sets the selection model, which must be one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION
javax.swing.tree.TreeSelectionModel#getSelectionMode()->int:::Returns the current selection mode, one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.
javax.swing.tree.TreeSelectionModel#setSelectionPath(TreePath)->void:::Sets the selection to path
javax.swing.tree.TreeSelectionModel#setSelectionPaths(TreePath[])->void:::Sets the selection to path
javax.swing.tree.TreeSelectionModel#addSelectionPath(TreePath)->void:::Adds path to the current selection
javax.swing.tree.TreeSelectionModel#addSelectionPaths(TreePath[])->void:::Adds paths to the current selection
javax.swing.tree.TreeSelectionModel#removeSelectionPath(TreePath)->void:::Removes path from the selection
javax.swing.tree.TreeSelectionModel#removeSelectionPaths(TreePath[])->void:::Removes paths from the selection
javax.swing.tree.TreeSelectionModel#getSelectionPath()->TreePath:::Returns the first path in the selection
javax.swing.tree.TreeSelectionModel#getSelectionPaths()->TreePath[]:::Returns the paths in the selection
javax.swing.tree.TreeSelectionModel#getSelectionCount()->int:::Returns the number of paths that are selected.
javax.swing.tree.TreeSelectionModel#isPathSelected(TreePath)->boolean:::Returns true if the path, path, is in the current selection.
javax.swing.tree.TreeSelectionModel#isSelectionEmpty()->boolean:::Returns true if the selection is currently empty.
javax.swing.tree.TreeSelectionModel#clearSelection()->void:::Empties the current selection
javax.swing.tree.TreeSelectionModel#setRowMapper(RowMapper)->void:::Sets the RowMapper instance
javax.swing.tree.TreeSelectionModel#getRowMapper()->RowMapper:::Returns the RowMapper instance that is able to map a TreePath to a row.
javax.swing.tree.TreeSelectionModel#getSelectionRows()->int[]:::Returns all of the currently selected rows
javax.swing.tree.TreeSelectionModel#getMinSelectionRow()->int:::Returns the smallest value obtained from the RowMapper for the current set of selected TreePaths
javax.swing.tree.TreeSelectionModel#getMaxSelectionRow()->int:::Returns the largest value obtained from the RowMapper for the current set of selected TreePaths
javax.swing.tree.TreeSelectionModel#isRowSelected(int)->boolean:::Returns true if the row identified by row is selected.
javax.swing.tree.TreeSelectionModel#resetRowSelection()->void:::Updates this object's mapping from TreePaths to rows
javax.swing.tree.TreeSelectionModel#getLeadSelectionRow()->int:::Returns the lead selection index
javax.swing.tree.TreeSelectionModel#getLeadSelectionPath()->TreePath:::Returns the last path that was added
javax.swing.tree.TreeSelectionModel#addPropertyChangeListener(PropertyChangeListener)->void:::Adds a PropertyChangeListener to the listener list
javax.swing.tree.TreeSelectionModel#removePropertyChangeListener(PropertyChangeListener)->void:::Removes a PropertyChangeListener from the listener list
javax.swing.tree.TreeSelectionModel#addTreeSelectionListener(TreeSelectionListener)->void:::Adds x to the list of listeners that are notified each time the set of selected TreePaths changes.
javax.swing.tree.TreeSelectionModel#removeTreeSelectionListener(TreeSelectionListener)->void:::Removes x from the list of listeners that are notified each time the set of selected TreePaths changes.
javax.swing.tree.VariableHeightLayoutCache#setModel(TreeModel)->void:::Sets the TreeModel that will provide the data.
javax.swing.tree.VariableHeightLayoutCache#setRootVisible(boolean)->void:::Determines whether or not the root node from the TreeModel is visible.
javax.swing.tree.VariableHeightLayoutCache#setRowHeight(int)->void:::Sets the height of each cell
javax.swing.tree.VariableHeightLayoutCache#setNodeDimensions(NodeDimensions)->void:::Sets the renderer that is responsible for drawing nodes in the tree.
javax.swing.tree.VariableHeightLayoutCache#setExpandedState(TreePath, boolean)->void:::Marks the path path expanded state to isExpanded.
javax.swing.tree.VariableHeightLayoutCache#getExpandedState(TreePath)->boolean:::Returns true if the path is expanded, and visible.
javax.swing.tree.VariableHeightLayoutCache#getBounds(TreePath, Rectangle)->Rectangle:::Returns the Rectangle enclosing the label portion into which the item identified by path will be drawn.
javax.swing.tree.VariableHeightLayoutCache#getPathForRow(int)->TreePath:::Returns the path for row
javax.swing.tree.VariableHeightLayoutCache#getRowForPath(TreePath)->int:::Returns the row where the last item identified in path is visible
javax.swing.tree.VariableHeightLayoutCache#getRowCount()->int:::Returns the number of visible rows.
javax.swing.tree.VariableHeightLayoutCache#invalidatePathBounds(TreePath)->void:::Instructs the LayoutCache that the bounds for path are invalid, and need to be updated.
javax.swing.tree.VariableHeightLayoutCache#getPreferredHeight()->int:::Returns the preferred height.
javax.swing.tree.VariableHeightLayoutCache#getPreferredWidth(Rectangle)->int:::Returns the preferred width and height for the region in visibleRegion.
javax.swing.tree.VariableHeightLayoutCache#getPathClosestTo(int, int)->TreePath:::Returns the path to the node that is closest to x,y
javax.swing.tree.VariableHeightLayoutCache#getVisiblePathsFrom(TreePath)->Enumeration:::Returns an Enumerator that increments over the visible paths starting at the passed in location
javax.swing.tree.VariableHeightLayoutCache#getVisibleChildCount(TreePath)->int:::Returns the number of visible children for path.
javax.swing.tree.VariableHeightLayoutCache#invalidateSizes()->void:::Informs the TreeState that it needs to recalculate all the sizes it is referencing.
javax.swing.tree.VariableHeightLayoutCache#isExpanded(TreePath)->boolean:::Returns true if the value identified by path is currently expanded.
javax.swing.tree.VariableHeightLayoutCache#treeNodesChanged(TreeModelEvent)->void:::Invoked after a node (or a set of siblings) has changed in some way
javax.swing.tree.VariableHeightLayoutCache#treeNodesInserted(TreeModelEvent)->void:::Invoked after nodes have been inserted into the tree
javax.swing.tree.VariableHeightLayoutCache#treeNodesRemoved(TreeModelEvent)->void:::Invoked after nodes have been removed from the tree
javax.swing.tree.VariableHeightLayoutCache#treeStructureChanged(TreeModelEvent)->void:::Invoked after the tree has drastically changed structure from a given node down

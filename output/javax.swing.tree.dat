AbstractLayoutCache#setNodeDimensions(NodeDimensions):::Sets the renderer that is responsible for drawing nodes in the tree and which is therefore responsible for calculating the dimensions of individual nodes.:::
AbstractLayoutCache#getNodeDimensions():::Returns the object that renders nodes in the tree, and which is responsible for calculating the dimensions of individual nodes.:::return
AbstractLayoutCache#setModel(TreeModel):::Sets the TreeModel that will provide the data.:::
AbstractLayoutCache#getModel():::Returns the TreeModel that is providing the data.:::return
AbstractLayoutCache#setRootVisible(boolean):::Determines whether or not the root node from the TreeModel is visible.:::
AbstractLayoutCache#isRootVisible():::Returns true if the root node of the tree is displayed.:::return
AbstractLayoutCache#setRowHeight(int):::Sets the height of each cell:::
AbstractLayoutCache#getRowHeight():::Returns the height of each row:::return
AbstractLayoutCache#setSelectionModel(TreeSelectionModel):::Sets the TreeSelectionModel used to manage the selection to new LSM.:::if->treeSelectionModel->setRowMapper->if->treeSelectionModel->setRowMapper
AbstractLayoutCache#getSelectionModel():::Returns the model used to maintain the selection.:::return
AbstractLayoutCache#getPreferredHeight():::Returns the preferred height.:::rowCount->getRowCount->if->bounds->getPathForRow->getBounds->if->return->return
AbstractLayoutCache#getPreferredWidth(Rectangle):::Returns the preferred width for the passed in region:::rowCount->getRowCount->if->firstPath->endY->if->getPathForRow->else->getPathClosestTo->paths->getVisiblePathsFrom->if->paths->hasMoreElements->pBounds->paths->nextElement->getBounds->width->if->if->return->else->while->paths->hasMoreElements->paths->nextElement->getBounds->if->Math->max->else->return->return
AbstractLayoutCache#isExpanded(TreePath):::Returns true if the value identified by row is currently expanded.:::
AbstractLayoutCache#getBounds(TreePath, Rectangle):::Returns a rectangle giving the bounds needed to draw path.:::
AbstractLayoutCache#getPathForRow(int):::Returns the path for passed in row:::
AbstractLayoutCache#getRowForPath(TreePath):::Returns the row that the last item identified in path is visible at:::
AbstractLayoutCache#getPathClosestTo(int, int):::Returns the path to the node that is closest to x,y:::
AbstractLayoutCache#getVisiblePathsFrom(TreePath):::Returns an Enumerator that increments over the visible paths starting at the passed in location:::
AbstractLayoutCache#getVisibleChildCount(TreePath):::Returns the number of visible children for row.:::
AbstractLayoutCache#setExpandedState(TreePath, boolean):::Marks the path path expanded state to isExpanded.:::
AbstractLayoutCache#getExpandedState(TreePath):::Returns true if the path is expanded, and visible.:::
AbstractLayoutCache#getRowCount():::Number of rows being displayed.:::
AbstractLayoutCache#invalidateSizes():::Informs the TreeState that it needs to recalculate all the sizes it is referencing.:::
AbstractLayoutCache#invalidatePathBounds(TreePath):::Instructs the LayoutCache that the bounds for path are invalid, and need to be updated.:::
AbstractLayoutCache#treeNodesChanged(TreeModelEvent)::: Invoked after a node (or a set of siblings) has changed in some way:::
AbstractLayoutCache#treeNodesInserted(TreeModelEvent):::Invoked after nodes have been inserted into the tree.  e.path() returns the parent of the new nodes e.childIndices() returns the indices of the new nodes in ascending order.:::
AbstractLayoutCache#treeNodesRemoved(TreeModelEvent):::Invoked after nodes have been removed from the tree:::
AbstractLayoutCache#treeStructureChanged(TreeModelEvent):::Invoked after the tree has drastically changed structure from a given node down:::
AbstractLayoutCache#getRowsForPaths(TreePath[]):::Returns the rows that the TreePath instances in path are being displayed at:::if->return->numPaths->rows->new->intArr->for->counter->return
AbstractLayoutCache#getNodeDimensions(Object, int, int, boolean, Rectangle):::Returns, by reference in placeIn, the size needed to represent value:::nd->getNodeDimensions->if->return->nd->getNodeDimensions->return
AbstractLayoutCache#isFixedRowHeight():::Returns true if the height of each row is a fixed size.:::return
AbstractLayoutCache.NodeDimensions#getNodeDimensions(Object, int, int, boolean, Rectangle):::Returns, by reference in bounds, the size and x origin to place value at:::
DefaultMutableTreeNode#insert(MutableTreeNode, int):::Removes newChild from its present parent (if it has a parent), sets the child's parent to this node, and then adds the child to this node's child array at index childIndex:::if->throw->new->IllegalStateException->else->if->throw->new->IllegalArgumentException->else->if->isNodeAncestor->throw->new->IllegalArgumentException->oldParent->newChild->getParent->if->oldParent->remove->newChild->setParent->if->new->Vector<>->children->insertElementAt
DefaultMutableTreeNode#remove(int):::Removes the child at the specified index from this node's children and sets that node's parent to null:::child->getChildAt->children->removeElementAt->child->setParent
DefaultMutableTreeNode#setParent(MutableTreeNode):::Sets this node's parent to newParent but does not change the parent's child array:::
DefaultMutableTreeNode#getParent():::Returns this node's parent or null if this node has no parent.:::return
DefaultMutableTreeNode#getChildAt(int):::Returns the child at the specified index in this node's child array.:::if->throw->new->ArrayIndexOutOfBoundsException->return->children->elementAt
DefaultMutableTreeNode#getChildCount():::Returns the number of children of this node.:::if->return->else->return->children->size
DefaultMutableTreeNode#getIndex(TreeNode):::Returns the index of the specified child in this node's child array:::if->throw->new->IllegalArgumentException->if->isNodeChild->return->return->children->indexOf
DefaultMutableTreeNode#children():::Creates and returns a forward-order enumeration of this node's children:::if->return->else->return->children->elements
DefaultMutableTreeNode#setAllowsChildren(boolean):::Determines whether or not this node is allowed to have children:::if->if->removeAllChildren
DefaultMutableTreeNode#getAllowsChildren():::Returns true if this node is allowed to have children.:::return
DefaultMutableTreeNode#setUserObject(Object):::Sets the user object for this node to userObject.:::
DefaultMutableTreeNode#getUserObject():::Returns this node's user object.:::return
DefaultMutableTreeNode#removeFromParent():::Removes the subtree rooted at this node from the tree, giving this node a null parent:::parent->getParent->if->parent->remove
DefaultMutableTreeNode#remove(MutableTreeNode):::Removes aChild from this node's child array, giving it a null parent.:::if->throw->new->IllegalArgumentException->if->isNodeChild->throw->new->IllegalArgumentException->getIndex->remove
DefaultMutableTreeNode#removeAllChildren():::Removes all of this node's children, setting their parents to null:::for->i->getChildCount
DefaultMutableTreeNode#add(MutableTreeNode):::Removes newChild from its parent and makes it a child of this node by adding it to the end of this node's child array.:::if->newChild->getParent->getChildCount->insert->else->getChildCount->insert
DefaultMutableTreeNode#isNodeAncestor(TreeNode):::Returns true if anotherNode is an ancestor of this node -- if it is this node, this node's parent, or an ancestor of this node's parent:::if->return->ancestor->do->if->return->while->ancestor->getParent->return
DefaultMutableTreeNode#isNodeDescendant(DefaultMutableTreeNode):::Returns true if anotherNode is a descendant of this node -- if it is this node, one of this node's children, or a descendant of one of this node's children:::if->return->return->anotherNode->isNodeAncestor
DefaultMutableTreeNode#getSharedAncestor(DefaultMutableTreeNode):::Returns the nearest common ancestor to this node and aNode:::if->return->else->if->return->level1->level2->diff->node1->node2->getLevel->aNode->getLevel->if->else->while->node1->getParent->do->if->return->node1->getParent->node2->getParent->while->if->throw->new->Error->return
DefaultMutableTreeNode#isNodeRelated(DefaultMutableTreeNode):::Returns true if and only if aNode is in the same tree as this node:::return->getRoot->aNode->getRoot
DefaultMutableTreeNode#getDepth():::Returns the depth of the tree rooted at this node -- the longest distance from this node to a leaf:::last->enum_->breadthFirstEnumeration->while->enum_->hasMoreElements->enum_->nextElement->if->throw->new->Error->return->getLevel->getLevel
DefaultMutableTreeNode#getLevel():::Returns the number of levels above this node -- the distance from the root to this node:::ancestor->levels->while->ancestor->getParent->return
DefaultMutableTreeNode#getPath():::Returns the path from the root, to get to this node:::return->getPathToRoot
DefaultMutableTreeNode#getPathToRoot(TreeNode, int):::Builds the parents of node up to and including the root node, where the original node is the last element in the returned array:::retNodes->if->if->return->else->new->TreeNodeArr->else->aNode->getParent->getPathToRoot->return
DefaultMutableTreeNode#getUserObjectPath():::Returns the user object path, from the root, to get to this node:::realPath->getPath->retPath->new->ObjectArr->for->counter->return
DefaultMutableTreeNode#getRoot():::Returns the root of the tree that contains this node:::ancestor->previous->do->ancestor->getParent->while->return
DefaultMutableTreeNode#isRoot():::Returns true if this node is the root of the tree:::return->getParent
DefaultMutableTreeNode#getNextNode():::Returns the node that follows this node in a preorder traversal of this node's tree:::if->getChildCount->nextSibling->getNextSibling->if->aNode->getParent->do->if->return->aNode->getNextSibling->if->return->aNode->getParent->while->else->return->else->return->getChildAt
DefaultMutableTreeNode#getPreviousNode():::Returns the node that precedes this node in a preorder traversal of this node's tree:::previousSibling->myParent->getParent->if->return->getPreviousSibling->if->if->previousSibling->getChildCount->return->else->return->previousSibling->getLastLeaf->else->return
DefaultMutableTreeNode#preorderEnumeration():::Creates and returns an enumeration that traverses the subtree rooted at this node in preorder:::return->new->PreorderEnumeration
DefaultMutableTreeNode#postorderEnumeration():::Creates and returns an enumeration that traverses the subtree rooted at this node in postorder:::return->new->PostorderEnumeration
DefaultMutableTreeNode#breadthFirstEnumeration():::Creates and returns an enumeration that traverses the subtree rooted at this node in breadth-first order:::return->new->BreadthFirstEnumeration
DefaultMutableTreeNode#depthFirstEnumeration():::Creates and returns an enumeration that traverses the subtree rooted at this node in depth-first order:::return->postorderEnumeration
DefaultMutableTreeNode#pathFromAncestorEnumeration(TreeNode):::Creates and returns an enumeration that follows the path from ancestor to this node:::return->new->PathBetweenNodesEnumeration
DefaultMutableTreeNode#isNodeChild(TreeNode):::Returns true if aNode is a child of this node:::retval->if->else->if->getChildCount->else->aNode->getParent->return
DefaultMutableTreeNode#getFirstChild():::Returns this node's first child:::if->getChildCount->throw->new->NoSuchElementException->return->getChildAt
DefaultMutableTreeNode#getLastChild():::Returns this node's last child:::if->getChildCount->throw->new->NoSuchElementException->return->getChildCount->getChildAt
DefaultMutableTreeNode#getChildAfter(TreeNode):::Returns the child in this node's child array that immediately follows aChild, which must be a child of this node:::if->throw->new->IllegalArgumentException->index->getIndex->if->throw->new->IllegalArgumentException->if->getChildCount->return->getChildAt->else->return
DefaultMutableTreeNode#getChildBefore(TreeNode):::Returns the child in this node's child array that immediately precedes aChild, which must be a child of this node:::if->throw->new->IllegalArgumentException->index->getIndex->if->throw->new->IllegalArgumentException->if->return->getChildAt->else->return
DefaultMutableTreeNode#isNodeSibling(TreeNode):::Returns true if anotherNode is a sibling of (has the same parent as) this node:::retval->if->else->if->else->myParent->getParent->anotherNode->getParent->if->getParent->isNodeChild->throw->new->Error->return
DefaultMutableTreeNode#getSiblingCount():::Returns the number of siblings of this node:::myParent->getParent->if->return->else->return->myParent->getChildCount
DefaultMutableTreeNode#getNextSibling():::Returns the next sibling of this node in the parent's children array:::retval->myParent->getParent->if->else->myParent->getChildAfter->if->isNodeSibling->throw->new->Error->return
DefaultMutableTreeNode#getPreviousSibling():::Returns the previous sibling of this node in the parent's children array:::retval->myParent->getParent->if->else->myParent->getChildBefore->if->isNodeSibling->throw->new->Error->return
DefaultMutableTreeNode#isLeaf():::Returns true if this node has no children:::return->getChildCount
DefaultMutableTreeNode#getFirstLeaf():::Finds and returns the first leaf that is a descendant of this node -- either this node or its first child's first leaf:::node->while->node->isLeaf->node->getFirstChild->return
DefaultMutableTreeNode#getLastLeaf():::Finds and returns the last leaf that is a descendant of this node -- either this node or its last child's last leaf:::node->while->node->isLeaf->node->getLastChild->return
DefaultMutableTreeNode#getNextLeaf():::Returns the leaf after this node or null if this node is the last leaf in the tree:::nextSibling->myParent->getParent->if->return->getNextSibling->if->return->nextSibling->getFirstLeaf->return->myParent->getNextLeaf
DefaultMutableTreeNode#getPreviousLeaf():::Returns the leaf before this node or null if this node is the first leaf in the tree:::previousSibling->myParent->getParent->if->return->getPreviousSibling->if->return->previousSibling->getLastLeaf->return->myParent->getPreviousLeaf
DefaultMutableTreeNode#getLeafCount():::Returns the total number of leaves that are descendants of this node:::count->node->enum_->breadthFirstEnumeration->while->enum_->hasMoreElements->enum_->nextElement->if->node->isLeaf->if->throw->new->Error->return
DefaultMutableTreeNode#toString():::Returns the result of sending toString() to this node's user object, or the empty string if the node has no user object.:::if->return->else->return->userObject->toString
DefaultMutableTreeNode#clone():::Overridden to make clone public:::newNode->try->super->clone->catch->throw->e->toString->new->Error->finally->return
DefaultMutableTreeNode#writeObject(ObjectOutputStream)::: default mutable tree node write object:::tValues->s->defaultWriteObject->if->new->ObjectArr->else->new->ObjectArr->s->writeObject
DefaultMutableTreeNode#readObject(ObjectInputStream)::: default mutable tree node read object:::f->s->readFields->f->get->newChildren->f->get->newAllowsChildren->f->get->if->newChildren->size->throw->new->IllegalStateException->tValues->s->readObject->if->equals
DefaultMutableTreeNode.PreorderEnumeration#hasMoreElements()::: preorder enumeration has more elements:::return->stack->empty->stack->peek->hasMoreElements
DefaultMutableTreeNode.PreorderEnumeration#nextElement()::: preorder enumeration next element:::enumer->stack->peek->node->enumer->nextElement->children->node->children->if->enumer->hasMoreElements->stack->pop->if->children->hasMoreElements->stack->push->return
DefaultMutableTreeNode.PostorderEnumeration#hasMoreElements()::: postorder enumeration has more elements:::return
DefaultMutableTreeNode.PostorderEnumeration#nextElement()::: postorder enumeration next element:::retval->if->subtree->hasMoreElements->subtree->nextElement->else->if->children->hasMoreElements->children->nextElement->new->PostorderEnumeration->subtree->nextElement->else->return
DefaultMutableTreeNode.BreadthFirstEnumeration#hasMoreElements()::: breadth first enumeration has more elements:::return->queue->isEmpty->queue->firstObject->hasMoreElements
DefaultMutableTreeNode.BreadthFirstEnumeration#nextElement()::: breadth first enumeration next element:::enumer->queue->firstObject->node->enumer->nextElement->children->node->children->if->enumer->hasMoreElements->queue->dequeue->if->children->hasMoreElements->queue->enqueue->return
DefaultMutableTreeNode.BreadthFirstEnumeration.Queue#enqueue(Object)::: queue enqueue:::if->new->QNode->else->new->QNode
DefaultMutableTreeNode.BreadthFirstEnumeration.Queue#dequeue()::: queue dequeue:::if->throw->new->NoSuchElementException->retval->oldHead->if->else->return
DefaultMutableTreeNode.BreadthFirstEnumeration.Queue#firstObject()::: queue first object:::if->throw->new->NoSuchElementException->return
DefaultMutableTreeNode.BreadthFirstEnumeration.Queue#isEmpty()::: queue is empty:::return
DefaultMutableTreeNode.PathBetweenNodesEnumeration#hasMoreElements()::: path between nodes enumeration has more elements:::return->stack->size
DefaultMutableTreeNode.PathBetweenNodesEnumeration#nextElement()::: path between nodes enumeration next element:::try->return->stack->pop->catch->throw->new->NoSuchElementException->finally
DefaultTreeCellEditor#setBorderSelectionColor(Color):::Sets the color to use for the border.:::
DefaultTreeCellEditor#getBorderSelectionColor():::Returns the color the border is drawn.:::return
DefaultTreeCellEditor#setFont(Font):::Sets the font to edit with:::
DefaultTreeCellEditor#getFont():::Gets the font used for editing.:::return
DefaultTreeCellEditor#getTreeCellEditorComponent(JTree, Object, boolean, boolean, boolean, int):::Configures the editor:::setTree->determineOffset->if->editingContainer->remove->realEditor->getTreeCellEditorComponent->newPath->tree->getPathForRow->lastPath->equals->font->getFont->if->if->renderer->getFont->if->tree->getFont->editingContainer->setFont->prepareForEditing->return
DefaultTreeCellEditor#getCellEditorValue():::Returns the value currently being edited.:::return->realEditor->getCellEditorValue
DefaultTreeCellEditor#isCellEditable(EventObject):::If the realEditor returns true to this message, prepareForEditing is messaged and true is returned.:::retValue->editable->if->if->event->getSource->event->getSource->setTree->if->path->tree->getX->getY->getPathForLocation->lastPath->equals->if->tree->getRowForPath->value->path->getLastPathComponent->isSelected->tree->isRowSelected->expanded->tree->isExpanded->treeModel->tree->getModel->leaf->treeModel->isLeaf->determineOffset->if->realEditor->isCellEditable->return->if->canEditImmediately->else->if->shouldStartEditingTimer->startEditingTimer->else->if->timer->isRunning->timer->stop->if->prepareForEditing->return
DefaultTreeCellEditor#shouldSelectCell(EventObject):::Messages the realEditor for the return value.:::return->realEditor->shouldSelectCell
DefaultTreeCellEditor#stopCellEditing():::If the realEditor will allow editing to stop, the realEditor is removed and true is returned, otherwise false is returned.:::if->realEditor->stopCellEditing->cleanupAfterEditing->return->return
DefaultTreeCellEditor#cancelCellEditing():::Messages cancelCellEditing to the realEditor and removes it from this instance.:::realEditor->cancelCellEditing->cleanupAfterEditing
DefaultTreeCellEditor#addCellEditorListener(CellEditorListener):::Adds the CellEditorListener.:::realEditor->addCellEditorListener
DefaultTreeCellEditor#removeCellEditorListener(CellEditorListener):::Removes the previously added CellEditorListener.:::realEditor->removeCellEditorListener
DefaultTreeCellEditor#getCellEditorListeners():::Returns an array of all the CellEditorListeners added to this DefaultTreeCellEditor with addCellEditorListener().:::return->getCellEditorListeners
DefaultTreeCellEditor#valueChanged(TreeSelectionEvent):::Resets lastPath.:::if->if->tree->getSelectionCount->tree->getSelectionPath->else->if->timer->stop
DefaultTreeCellEditor#actionPerformed(ActionEvent):::Messaged when the timer fires, this will start the editing session.:::if->tree->startEditingAtPath
DefaultTreeCellEditor#setTree(JTree):::Sets the tree currently editing for:::if->if->tree->removeTreeSelectionListener->if->tree->addTreeSelectionListener->if->timer->stop
DefaultTreeCellEditor#shouldStartEditingTimer(EventObject):::Returns true if event is a MouseEvent and the click count is 1.:::if->SwingUtilities->isLeftMouseButton->me->return->me->getClickCount->me->getX->me->getY->inHitRegion->return
DefaultTreeCellEditor#startEditingTimer():::Starts the editing timer.:::if->new->Timer->timer->setRepeats->timer->start
DefaultTreeCellEditor#canEditImmediately(EventObject):::Returns true if event is null, or it is a MouseEvent with a click count > 2 and inHitRegion returns true.:::if->SwingUtilities->isLeftMouseButton->me->return->me->getClickCount->me->getX->me->getY->inHitRegion->return
DefaultTreeCellEditor#inHitRegion(int, int):::Returns true if the passed in location is a valid mouse location to start editing from:::if->bounds->tree->getRowBounds->treeOrientation->tree->getComponentOrientation->if->treeOrientation->isLeftToRight->if->return->else->if->return->return
DefaultTreeCellEditor#determineOffset(JTree, Object, boolean, boolean, boolean, int):::Determine the offset.:::if->if->renderer->getLeafIcon->else->if->renderer->getOpenIcon->else->renderer->getClosedIcon->if->renderer->getIconTextGap->editingIcon->getIconWidth->else->renderer->getIconTextGap->else
DefaultTreeCellEditor#prepareForEditing():::Invoked just before editing is to start:::if->editingContainer->add
DefaultTreeCellEditor#createContainer():::Creates the container to manage placement of editingComponent.:::return->new->EditorContainer
DefaultTreeCellEditor#createTreeCellEditor():::This is invoked if a TreeCellEditor is not supplied in the constructor:::aBorder->UIManager->getBorder->editor->new->DefaultTextField->new->DefaultCellEditor->editor->setClickCountToStart->return
DefaultTreeCellEditor#cleanupAfterEditing():::Cleans up any state after editing has completed:::if->editingContainer->remove
DefaultTreeCellEditor.DefaultTextField#setBorder(Border):::Sets the border of this component. This is a bound property.:::super->setBorder
DefaultTreeCellEditor.DefaultTextField#getBorder():::Overrides JComponent.getBorder to returns the current border.:::return
DefaultTreeCellEditor.DefaultTextField#getFont()::: default text field get font:::font->super->getFont->if->parent->getParent->if->parent->getFont->parent->getFont->return
DefaultTreeCellEditor.DefaultTextField#getPreferredSize():::Overrides JTextField.getPreferredSize to return the preferred size based on current font, if set, or else use renderer's font.:::size->super->getPreferredSize->if->DefaultTreeCellEditor.this->getFont->rSize->renderer->getPreferredSize->return
DefaultTreeCellEditor.EditorContainer#EditorContainer():::Do not use.:::setLayout
DefaultTreeCellEditor.EditorContainer#paint(Graphics):::Overrides Container.paint to paint the node's icon and use the selection color for the background.:::width->getWidth->height->getHeight->if->yLoc->calculateIconY->if->getComponentOrientation->isLeftToRight->editingIcon->paintIcon->else->editingIcon->editingIcon->getIconWidth->paintIcon->background->getBorderSelectionColor->if->g->setColor->g->drawRect->super->paint
DefaultTreeCellEditor.EditorContainer#doLayout():::Lays out this Container:::if->width->getWidth->height->getHeight->if->getComponentOrientation->isLeftToRight->editingComponent->setBounds->else->editingComponent->setBounds
DefaultTreeCellEditor.EditorContainer#calculateIconY(Icon):::Calculate the y location for the icon.:::iconHeight->icon->getIconHeight->textHeight->editingComponent->editingComponent->getFont->getFontMetrics->getHeight->textY->totalY->Math->min->totalHeight->Math->max->return->getHeight
DefaultTreeCellEditor.EditorContainer#getPreferredSize():::Returns the preferred size for the Container:::if->pSize->editingComponent->getPreferredSize->rSize->renderer->getPreferredSize->if->Math->max->if->Math->editingIcon->getIconHeight->max->Math->max->return->return->new->Dimension
DefaultTreeCellRenderer#updateUI()::: default tree cell renderer update i:::super->updateUI->if->getLeafIcon->DefaultLookup->getIcon->setLeafIcon->if->getClosedIcon->DefaultLookup->getIcon->setClosedIcon->if->getOpenIcon->DefaultLookup->getIcon->setOpenIcon->if->getTextSelectionColor->DefaultLookup->getColor->setTextSelectionColor->if->getTextNonSelectionColor->DefaultLookup->getColor->setTextNonSelectionColor->if->getBackgroundSelectionColor->DefaultLookup->getColor->setBackgroundSelectionColor->if->getBackgroundNonSelectionColor->DefaultLookup->getColor->setBackgroundNonSelectionColor->if->getBorderSelectionColor->DefaultLookup->getColor->setBorderSelectionColor->DefaultLookup->getBoolean->DefaultLookup->getBoolean->DefaultLookup->getBoolean->margins->DefaultLookup->getInsets->if->new->EmptyBorder->setBorder->setName
DefaultTreeCellRenderer#getDefaultOpenIcon():::Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are expanded.:::return->DefaultLookup->getIcon
DefaultTreeCellRenderer#getDefaultClosedIcon():::Returns the default icon, for the current laf, that is used to represent non-leaf nodes that are not expanded.:::return->DefaultLookup->getIcon
DefaultTreeCellRenderer#getDefaultLeafIcon():::Returns the default icon, for the current laf, that is used to represent leaf nodes.:::return->DefaultLookup->getIcon
DefaultTreeCellRenderer#setOpenIcon(Icon):::Sets the icon used to represent non-leaf nodes that are expanded.:::
DefaultTreeCellRenderer#getOpenIcon():::Returns the icon used to represent non-leaf nodes that are expanded.:::return
DefaultTreeCellRenderer#setClosedIcon(Icon):::Sets the icon used to represent non-leaf nodes that are not expanded.:::
DefaultTreeCellRenderer#getClosedIcon():::Returns the icon used to represent non-leaf nodes that are not expanded.:::return
DefaultTreeCellRenderer#setLeafIcon(Icon):::Sets the icon used to represent leaf nodes.:::
DefaultTreeCellRenderer#getLeafIcon():::Returns the icon used to represent leaf nodes.:::return
DefaultTreeCellRenderer#setTextSelectionColor(Color):::Sets the color the text is drawn with when the node is selected.:::
DefaultTreeCellRenderer#getTextSelectionColor():::Returns the color the text is drawn with when the node is selected.:::return
DefaultTreeCellRenderer#setTextNonSelectionColor(Color):::Sets the color the text is drawn with when the node isn't selected.:::
DefaultTreeCellRenderer#getTextNonSelectionColor():::Returns the color the text is drawn with when the node isn't selected.:::return
DefaultTreeCellRenderer#setBackgroundSelectionColor(Color):::Sets the color to use for the background if node is selected.:::
DefaultTreeCellRenderer#getBackgroundSelectionColor():::Returns the color to use for the background if node is selected.:::return
DefaultTreeCellRenderer#setBackgroundNonSelectionColor(Color):::Sets the background color to be used for non selected nodes.:::
DefaultTreeCellRenderer#getBackgroundNonSelectionColor():::Returns the background color to be used for non selected nodes.:::return
DefaultTreeCellRenderer#setBorderSelectionColor(Color):::Sets the color to use for the border.:::
DefaultTreeCellRenderer#getBorderSelectionColor():::Returns the color the border is drawn.:::return
DefaultTreeCellRenderer#setFont(Font):::Subclassed to map FontUIResources to null:::if->super->setFont
DefaultTreeCellRenderer#getFont():::Gets the font of this component.:::font->super->getFont->if->tree->getFont->return
DefaultTreeCellRenderer#setBackground(Color):::Subclassed to map ColorUIResources to null:::if->super->setBackground
DefaultTreeCellRenderer#getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean):::Configures the renderer based on the passed in components:::stringValue->tree->convertValueToText->setText->fg->dropLocation->tree->getDropLocation->if->dropLocation->getChildIndex->tree->dropLocation->getPath->getRowForPath->col->DefaultLookup->getColor->if->else->getTextSelectionColor->else->if->getTextSelectionColor->else->getTextNonSelectionColor->setForeground->icon->if->getLeafIcon->else->if->getOpenIcon->else->getClosedIcon->if->tree->isEnabled->setEnabled->laf->UIManager->getLookAndFeel->disabledIcon->laf->getDisabledIcon->if->setDisabledIcon->else->setEnabled->setIcon->tree->getComponentOrientation->setComponentOrientation->return
DefaultTreeCellRenderer#paint(Graphics):::Paints the value:::bColor->if->DefaultLookup->getColor->if->getBackgroundSelectionColor->else->if->getBackgroundSelectionColor->else->getBackgroundNonSelectionColor->if->getBackground->imageOffset->if->getLabelStart->g->setColor->if->getComponentOrientation->isLeftToRight->g->getWidth->getHeight->fillRect->else->g->getWidth->getHeight->fillRect->if->if->else->if->getLabelStart->if->getComponentOrientation->isLeftToRight->getWidth->getHeight->paintFocus->else->getWidth->getHeight->paintFocus->super->paint
DefaultTreeCellRenderer#paintFocus(Graphics, int, int, int, int, Color)::: default tree cell renderer paint focus:::bsColor->getBorderSelectionColor->if->g->setColor->g->drawRect->if->if->notColor->getRGB->new->Color->g->setColor->BasicGraphicsUtils->drawDashedRect
DefaultTreeCellRenderer#getLabelStart()::: default tree cell renderer get label start:::currentI->getIcon->if->getText->return->currentI->getIconWidth->Math->getIconTextGap->max->return
DefaultTreeCellRenderer#getPreferredSize():::Overrides JComponent.getPreferredSize to return slightly wider preferred size value.:::retDimension->super->getPreferredSize->if->new->Dimension->return
DefaultTreeCellRenderer#validate():::Overridden for performance reasons:::
DefaultTreeCellRenderer#invalidate():::Overridden for performance reasons:::
DefaultTreeCellRenderer#revalidate():::Overridden for performance reasons:::
DefaultTreeCellRenderer#repaint(long, int, int, int, int):::Overridden for performance reasons:::
DefaultTreeCellRenderer#repaint(Rectangle):::Overridden for performance reasons:::
DefaultTreeCellRenderer#repaint():::Overridden for performance reasons:::
DefaultTreeCellRenderer#firePropertyChange(String, Object, Object):::Overridden for performance reasons:::if->SwingUtilities2->isScaleChanged->getClientProperty->super->firePropertyChange
DefaultTreeCellRenderer#firePropertyChange(String, byte, byte):::Overridden for performance reasons:::
DefaultTreeCellRenderer#firePropertyChange(String, char, char):::Overridden for performance reasons:::
DefaultTreeCellRenderer#firePropertyChange(String, short, short):::Overridden for performance reasons:::
DefaultTreeCellRenderer#firePropertyChange(String, int, int):::Overridden for performance reasons:::
DefaultTreeCellRenderer#firePropertyChange(String, long, long):::Overridden for performance reasons:::
DefaultTreeCellRenderer#firePropertyChange(String, float, float):::Overridden for performance reasons:::
DefaultTreeCellRenderer#firePropertyChange(String, double, double):::Overridden for performance reasons:::
DefaultTreeCellRenderer#firePropertyChange(String, boolean, boolean):::Overridden for performance reasons:::
DefaultTreeModel#setAsksAllowsChildren(boolean):::Sets whether or not to test leafness by asking getAllowsChildren() or isLeaf() to the TreeNodes:::
DefaultTreeModel#asksAllowsChildren():::Tells how leaf nodes are determined.:::return
DefaultTreeModel#setRoot(TreeNode):::Sets the root to root:::oldRoot->if->fireTreeStructureChanged->else->nodeStructureChanged
DefaultTreeModel#getRoot():::Returns the root of the tree:::return
DefaultTreeModel#getIndexOfChild(Object, Object):::Returns the index of child in parent:::if->return->return->getIndex
DefaultTreeModel#getChild(Object, int):::Returns the child of parent at index index in the parent's child array:::return->getChildAt
DefaultTreeModel#getChildCount(Object):::Returns the number of children of parent:::return->getChildCount
DefaultTreeModel#isLeaf(Object):::Returns whether the specified node is a leaf node:::if->return->getAllowsChildren->return->isLeaf
DefaultTreeModel#reload():::Invoke this method if you've modified the TreeNodes upon which this model depends:::reload
DefaultTreeModel#valueForPathChanged(TreePath, Object):::This sets the user object of the TreeNode identified by path and posts a node changed:::aNode->path->getLastPathComponent->aNode->setUserObject->nodeChanged
DefaultTreeModel#insertNodeInto(MutableTreeNode, MutableTreeNode, int):::Invoked this to insert newChild at location index in parents children:::parent->insert->newIndexs->new->intArr->nodesWereInserted
DefaultTreeModel#removeNodeFromParent(MutableTreeNode):::Message this to remove node from its parent:::parent->node->getParent->if->throw->new->IllegalArgumentException->childIndex->new->intArr->removedArray->new->ObjectArr->parent->getIndex->parent->remove->nodesWereRemoved
DefaultTreeModel#nodeChanged(TreeNode):::Invoke this method after you've changed how node is to be represented in the tree.:::if->parent->node->getParent->if->anIndex->parent->getIndex->if->cIndexs->new->intArr->nodesChanged->else->if->getRoot->nodesChanged
DefaultTreeModel#reload(TreeNode):::Invoke this method if you've modified the TreeNodes upon which this model depends:::if->getPathToRoot->fireTreeStructureChanged
DefaultTreeModel#nodesWereInserted(TreeNode, int[]):::Invoke this method after you've inserted some TreeNodes into node:::if->cCount->newChildren->new->ObjectArr->for->counter->getPathToRoot->fireTreeNodesInserted
DefaultTreeModel#nodesWereRemoved(TreeNode, int[], Object[]):::Invoke this method after you've removed some TreeNodes from node:::if->getPathToRoot->fireTreeNodesRemoved
DefaultTreeModel#nodesChanged(TreeNode, int[]):::Invoke this method after you've changed how the children identified by childIndicies are to be represented in the tree.:::if->if->cCount->if->cChildren->new->ObjectArr->for->counter->getPathToRoot->fireTreeNodesChanged->else->if->getRoot->getPathToRoot->fireTreeNodesChanged
DefaultTreeModel#nodeStructureChanged(TreeNode):::Invoke this method if you've totally changed the children of node and its children's children..:::if->getPathToRoot->fireTreeStructureChanged
DefaultTreeModel#getPathToRoot(TreeNode):::Builds the parents of node up to and including the root node, where the original node is the last element in the returned array:::return->getPathToRoot
DefaultTreeModel#getPathToRoot(TreeNode, int):::Builds the parents of node up to and including the root node, where the original node is the last element in the returned array:::retNodes->if->if->return->else->new->TreeNodeArr->else->if->new->TreeNodeArr->else->aNode->getParent->getPathToRoot->return
DefaultTreeModel#addTreeModelListener(TreeModelListener):::Adds a listener for the TreeModelEvent posted after the tree changes.:::listenerList->add
DefaultTreeModel#removeTreeModelListener(TreeModelListener):::Removes a listener previously added with <B>addTreeModelListener()</B>.:::listenerList->remove
DefaultTreeModel#getTreeModelListeners():::Returns an array of all the tree model listeners registered on this model.:::return->listenerList->getListeners
DefaultTreeModel#fireTreeNodesChanged(Object, Object[], int[], Object[]):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->for->i
DefaultTreeModel#fireTreeNodesInserted(Object, Object[], int[], Object[]):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->for->i
DefaultTreeModel#fireTreeNodesRemoved(Object, Object[], int[], Object[]):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->for->i
DefaultTreeModel#fireTreeStructureChanged(Object, Object[], int[], Object[]):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->for->i
DefaultTreeModel#fireTreeStructureChanged(Object, TreePath):::Notifies all listeners that have registered interest for notification on this event type:::listeners->listenerList->getListenerList->e->for->i
DefaultTreeModel#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this model:::return->listenerList->getListeners
DefaultTreeModel#writeObject(ObjectOutputStream)::: default tree model write object:::values->new->Vector<Object>->s->defaultWriteObject->if->values->addElement->values->addElement->s->writeObject
DefaultTreeModel#readObject(ObjectInputStream)::: default tree model read object:::f->s->readFields->newListenerList->f->get->if->throw->new->InvalidObjectException->f->get->values->s->readObject->indexCounter->maxCounter->values->size->if->values->elementAt->equals->newRoot->values->elementAt->if->throw->new->InvalidObjectException
DefaultTreeSelectionModel#setRowMapper(RowMapper):::Sets the RowMapper instance:::resetRowSelection
DefaultTreeSelectionModel#getRowMapper():::Returns the RowMapper instance that is able to map a TreePath to a row.:::return
DefaultTreeSelectionModel#setSelectionMode(int):::Sets the selection model, which must be one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION:::oldMode->validateSelectionMode->if->changeSupport->Integer->valueOf->Integer->valueOf->firePropertyChange
DefaultTreeSelectionModel#validateSelectionMode(int)::: default tree selection model validate selection mode:::return
DefaultTreeSelectionModel#getSelectionMode():::Returns the selection mode, one of SINGLE_TREE_SELECTION, DISCONTIGUOUS_TREE_SELECTION or CONTIGUOUS_TREE_SELECTION.:::return
DefaultTreeSelectionModel#setSelectionPath(TreePath):::Sets the selection to path:::if->setSelectionPaths->else->newPaths->new->TreePathArr->setSelectionPaths
DefaultTreeSelectionModel#setSelectionPaths(TreePath[]):::Sets the selection:::newCount->newCounter->oldCount->oldCounter->paths->if->else->if->else->if->if->if->new->TreePathArr->else->if->if->arePathsContiguous->new->TreePathArr->beginLeadPath->cPaths->new->Vector<PathPlaceHolder>->newSelectionAsList->new->ArrayList<TreePath>->lastPaths->clear->for->newSelection->newSelectionAsList->newSelectionAsList->size->new->TreePathArr->toArray->for->tempHT->lastPaths->clear->insureUniqueness->updateLeadIndex->resetRowSelection->if->cPaths->size->notifyPathChange
DefaultTreeSelectionModel#addSelectionPath(TreePath):::Adds path to the current selection:::if->toAdd->new->TreePathArr->addSelectionPaths
DefaultTreeSelectionModel#addSelectionPaths(TreePath[]):::Adds paths to the current selection:::newPathLength->if->if->setSelectionPaths->else->if->canPathsBeAdded->if->arePathsContiguous->setSelectionPaths->else->newPaths->new->TreePathArr->setSelectionPaths->else->counter->validCount->oldCount->beginLeadPath->cPaths->if->else->lastPaths->clear->for->if->if->newSelection->new->TreePathArr->if->System->arraycopy->if->newPaths->lastPaths->keys->while->newPaths->hasMoreElements->newPaths->nextElement->else->System->arraycopy->insureUniqueness->updateLeadIndex->resetRowSelection->notifyPathChange->else->lastPaths->clear
DefaultTreeSelectionModel#removeSelectionPath(TreePath):::Removes path from the selection:::if->rPath->new->TreePathArr->removeSelectionPaths
DefaultTreeSelectionModel#removeSelectionPaths(TreePath[]):::Removes paths from the selection:::if->if->canPathsBeRemoved->clearSelection->else->pathsToRemove->for->removeCounter->if->removeCount->pathsToRemove->size->beginLeadPath->if->else->pEnum->uniquePaths->keys->validCount->new->TreePathArr->while->pEnum->hasMoreElements->pEnum->nextElement->if->uniquePaths->get->if->else->else->if->else->updateLeadIndex->resetRowSelection->notifyPathChange
DefaultTreeSelectionModel#getSelectionPath():::Returns the first path in the selection:::if->return->return
DefaultTreeSelectionModel#getSelectionPaths():::Returns the selection.:::if->pathSize->result->new->TreePathArr->System->arraycopy->return->return->new->TreePathArr
DefaultTreeSelectionModel#getSelectionCount():::Returns the number of paths that are selected.:::return
DefaultTreeSelectionModel#isPathSelected(TreePath):::Returns true if the path, path, is in the current selection.:::return->uniquePaths->get
DefaultTreeSelectionModel#isSelectionEmpty():::Returns true if the selection is currently empty.:::return
DefaultTreeSelectionModel#clearSelection():::Empties the current selection:::if->selSize->newness->new->booleanArr->for->counter->event->new->TreeSelectionEvent->uniquePaths->clear->resetRowSelection->fireValueChanged
DefaultTreeSelectionModel#addTreeSelectionListener(TreeSelectionListener):::Adds x to the list of listeners that are notified each time the set of selected TreePaths changes.:::listenerList->add
DefaultTreeSelectionModel#removeTreeSelectionListener(TreeSelectionListener):::Removes x from the list of listeners that are notified each time the set of selected TreePaths changes.:::listenerList->remove
DefaultTreeSelectionModel#getTreeSelectionListeners():::Returns an array of all the tree selection listeners registered on this model.:::return->listenerList->getListeners
DefaultTreeSelectionModel#fireValueChanged(TreeSelectionEvent):::Notifies all listeners that are registered for tree selection events on this object.:::listeners->listenerList->getListenerList->for->i
DefaultTreeSelectionModel#getListeners(Class):::Returns an array of all the objects currently registered as FooListeners upon this model:::return->listenerList->getListeners
DefaultTreeSelectionModel#getSelectionRows():::Returns the selection in terms of rows:::if->rows->rowMapper->getRowsForPaths->if->invisCount->for->counter->if->if->else->tempRows->new->intArr->for->counter->visCounter->return->return->new->intArr
DefaultTreeSelectionModel#getMinSelectionRow():::Returns the smallest value obtained from the RowMapper for the current set of selected TreePaths:::return->listSelectionModel->getMinSelectionIndex
DefaultTreeSelectionModel#getMaxSelectionRow():::Returns the largest value obtained from the RowMapper for the current set of selected TreePaths:::return->listSelectionModel->getMaxSelectionIndex
DefaultTreeSelectionModel#isRowSelected(int):::Returns true if the row identified by row is selected.:::return->listSelectionModel->isSelectedIndex
DefaultTreeSelectionModel#resetRowSelection():::Updates this object's mapping from TreePath to rows:::listSelectionModel->clearSelection->if->aRow->validCount->rows->rowMapper->getRowsForPaths->for->counter->maxCounter->if->else->if->rowMapper->getRowsForPaths->else->insureRowContinuity->else
DefaultTreeSelectionModel#getLeadSelectionRow():::Returns the lead selection index:::return
DefaultTreeSelectionModel#getLeadSelectionPath():::Returns the last path that was added:::return
DefaultTreeSelectionModel#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::if->new->SwingPropertyChangeSupport->changeSupport->addPropertyChangeListener
DefaultTreeSelectionModel#removePropertyChangeListener(PropertyChangeListener)::: default tree selection model remove property change listener:::if->return->changeSupport->removePropertyChangeListener
DefaultTreeSelectionModel#getPropertyChangeListeners():::Returns an array of all the property change listeners registered on this DefaultTreeSelectionModel.:::if->return->new->PropertyChangeListenerArr->return->changeSupport->getPropertyChangeListeners
DefaultTreeSelectionModel#insureRowContinuity():::Makes sure the currently selected TreePaths are valid for the current selection mode:::if->lModel->min->lModel->getMinSelectionIndex->if->for->counter->maxCounter->lModel->getMaxSelectionIndex->else->if->setSelectionPath
DefaultTreeSelectionModel#arePathsContiguous(TreePath[]):::Returns true if the paths are contiguous, or this object has no RowMapper.:::if->return->else->bitSet->new->BitSet->anIndex->counter->min->pathCount->validCount->tempPath->new->TreePathArr->rowMapper->getRowsForPaths->for->maxCounter->for->return
DefaultTreeSelectionModel#canPathsBeAdded(TreePath[]):::Used to test if a particular set of TreePaths can be added:::if->return->else->bitSet->new->BitSet->lModel->anIndex->counter->min->lModel->getMinSelectionIndex->max->lModel->getMaxSelectionIndex->tempPath->new->TreePathArr->if->for->else->rowMapper->getRowsForPaths->for->for->return
DefaultTreeSelectionModel#canPathsBeRemoved(TreePath[]):::Returns true if the paths can be removed without breaking the continuity of the model:::if->return->else->bitSet->new->BitSet->counter->pathCount->anIndex->min->validCount->tempPath->new->TreePathArr->rows->lastPaths->clear->for->for->lastPaths->clear->if->for->return
DefaultTreeSelectionModel#notifyPathChange(Vector, TreePath):::Notifies listeners of a change in path:::cPathCount->changedPaths->size->newness->new->booleanArr->paths->new->TreePathArr->placeholder->for->counter->event->new->TreeSelectionEvent->fireValueChanged
DefaultTreeSelectionModel#updateLeadIndex():::Updates the leadIndex instance variable.:::if->if->else->for->counter->else
DefaultTreeSelectionModel#insureUniqueness():::This method is obsolete and its implementation is now a noop:::
DefaultTreeSelectionModel#toString():::Returns a string that displays and identifies this object's properties.:::selCount->getSelectionCount->sb->new->StringBuilder->rows->if->rowMapper->getRowsForPaths->else->sb->getClass->getName->hashCode->append->for->counter->sb->append->return->sb->toString
DefaultTreeSelectionModel#clone():::Returns a clone of this object with the same selection:::clone->super->clone->if->selLength->new->TreePathArr->System->arraycopy->new->EventListenerList->listSelectionModel->clone->new->Hashtable<TreePath,Boolean>->new->Hashtable<TreePath,Boolean>->new->TreePathArr->return
DefaultTreeSelectionModel#writeObject(ObjectOutputStream)::: default tree selection model write object:::tValues->s->defaultWriteObject->if->new->ObjectArr->else->new->ObjectArr->s->writeObject
DefaultTreeSelectionModel#readObject(ObjectInputStream)::: default tree selection model read object:::f->s->readFields->f->get->f->get->newListenerList->f->get->if->throw->new->InvalidObjectException->f->get->f->get->validateSelectionMode->f->get->f->get->f->get->newUniquePaths->f->get->newLastPaths->f->get->f->get->tValues->s->readObject->if->equals->newRowMapper->if->throw->new->InvalidObjectException
FixedHeightLayoutCache#setModel(TreeModel):::Sets the TreeModel that will provide the data.:::super->setModel->rebuild
FixedHeightLayoutCache#setRootVisible(boolean):::Determines whether or not the root node from the TreeModel is visible.:::if->isRootVisible->super->setRootVisible->if->if->root->adjustRowBy->else->root->adjustRowBy->visibleNodesChanged
FixedHeightLayoutCache#setRowHeight(int):::Sets the height of each cell:::if->throw->new->IllegalArgumentException->if->getRowHeight->super->setRowHeight->visibleNodesChanged
FixedHeightLayoutCache#getRowCount():::Returns the number of visible rows.:::return
FixedHeightLayoutCache#invalidatePathBounds(TreePath):::Does nothing, FixedHeightLayoutCache doesn't cache width, and that is all that could change.:::
FixedHeightLayoutCache#invalidateSizes():::Informs the TreeState that it needs to recalculate all the sizes it is referencing.:::visibleNodesChanged
FixedHeightLayoutCache#isExpanded(TreePath):::Returns true if the value identified by row is currently expanded.:::if->lastNode->getNodeForPath->return->lastNode->isExpanded->return
FixedHeightLayoutCache#getBounds(TreePath, Rectangle):::Returns a rectangle giving the bounds needed to draw path.:::if->return->node->getNodeForPath->if->return->getBounds->parentPath->path->getParentPath->getNodeForPath->if->node->isExpanded->childIndex->treeModel->parentPath->getLastPathComponent->path->getLastPathComponent->getIndexOfChild->if->return->getBounds->return
FixedHeightLayoutCache#getPathForRow(int):::Returns the path for passed in row:::if->getRowCount->if->root->getRowCount->getPathForRow->return->info->getPath->return
FixedHeightLayoutCache#getRowForPath(TreePath):::Returns the row that the last item identified in path is visible at:::if->return->node->getNodeForPath->if->return->node->getRow->parentPath->path->getParentPath->getNodeForPath->if->node->isExpanded->return->node->treeModel->parentPath->getLastPathComponent->path->getLastPathComponent->getIndexOfChild->getRowToModelIndex->return
FixedHeightLayoutCache#getPathClosestTo(int, int):::Returns the path to the node that is closest to x,y:::if->getRowCount->return->row->getRowContainingYLocation->return->getPathForRow
FixedHeightLayoutCache#getVisibleChildCount(TreePath):::Returns the number of visible children for row.:::node->getNodeForPath->if->return->return->node->getTotalChildCount
FixedHeightLayoutCache#getVisiblePathsFrom(TreePath):::Returns an Enumerator that increments over the visible paths starting at the passed in location:::if->return->node->getNodeForPath->if->return->new->VisibleFHTreeStateNodeEnumeration->parentPath->path->getParentPath->getNodeForPath->if->node->isExpanded->return->treeModel->parentPath->getLastPathComponent->path->getLastPathComponent->getIndexOfChild->new->VisibleFHTreeStateNodeEnumeration->return
FixedHeightLayoutCache#setExpandedState(TreePath, boolean):::Marks the path path expanded state to isExpanded.:::if->ensurePathIsExpanded->else->if->parentPath->path->getParentPath->if->parentNode->getNodeForPath->if->parentNode->makeVisible->childNode->getNodeForPath->if->childNode->collapse
FixedHeightLayoutCache#getExpandedState(TreePath):::Returns true if the path is expanded, and visible.:::node->getNodeForPath->return->node->isVisible->node->isExpanded
FixedHeightLayoutCache#treeNodesChanged(TreeModelEvent):::Invoked after a node (or a set of siblings) has changed in some way:::if->changedIndexs->changedParent->SwingUtilities2->getModel->getTreePath->getNodeForPath->maxCounter->e->getChildIndices->if->if->parentValue->changedParent->getUserObject->for->counter->if->changedParent->isVisible->changedParent->isExpanded->visibleNodesChanged->else->if->changedParent->isVisible->changedParent->isExpanded->visibleNodesChanged
FixedHeightLayoutCache#treeNodesInserted(TreeModelEvent):::Invoked after nodes have been inserted into the tree.  e.path() returns the parent of the new nodes e.childIndices() returns the indices of the new nodes in ascending order.:::if->changedIndexs->changedParent->SwingUtilities2->getModel->getTreePath->getNodeForPath->maxCounter->e->getChildIndices->if->isVisible->changedParent->isVisible->changedParent->isExpanded->for->counter->if->treeSelectionModel->resetRowSelection->if->changedParent->isVisible->this->visibleNodesChanged
FixedHeightLayoutCache#treeNodesRemoved(TreeModelEvent):::Invoked after nodes have been removed from the tree:::if->changedIndexs->maxCounter->parentPath->SwingUtilities2->getModel->getTreePath->changedParentNode->getNodeForPath->e->getChildIndices->if->children->e->getChildren->isVisible->changedParentNode->isVisible->changedParentNode->isExpanded->for->counter->if->if->treeSelectionModel->resetRowSelection->if->treeModel->changedParentNode->getUserObject->getChildCount->changedParentNode->isLeaf->changedParentNode->collapse->visibleNodesChanged->else->if->changedParentNode->isVisible->visibleNodesChanged
FixedHeightLayoutCache#treeStructureChanged(TreeModelEvent):::Invoked after the tree has drastically changed structure from a given node down:::if->changedPath->SwingUtilities2->getModel->getTreePath->changedNode->getNodeForPath->if->treeModel->getRoot->changedPath->getPathCount->rebuild->else->if->wasExpanded->wasVisible->parent->changedNode->getParent->changedNode->isExpanded->changedNode->isVisible->index->parent->getIndex->changedNode->collapse->parent->remove->if->row->changedNode->getRow->parent->changedNode->getChildIndex->resetChildrenRowsFrom->getNodeForPath->changedNode->expand->if->treeSelectionModel->resetRowSelection->if->this->visibleNodesChanged
FixedHeightLayoutCache#visibleNodesChanged()::: fixed height layout cache visible nodes changed:::
FixedHeightLayoutCache#getBounds(FHTreeStateNode, int, Rectangle):::Returns the bounds for the given node:::expanded->level->row->value->if->parent->getRow->parent->getUserObject->parent->isExpanded->parent->getLevel->else->parent->getRowToModelIndex->treeModel->parent->getUserObject->getChild->parent->getLevel->bounds->getNodeDimensions->if->return->if->new->Rectangle->getRowHeight->return
FixedHeightLayoutCache#adjustRowCountBy(int):::Adjust the large row count of the AbstractTreeUI the receiver was created with.:::
FixedHeightLayoutCache#addMapping(FHTreeStateNode):::Adds a mapping for node.:::treePathMapping->node->getTreePath->put
FixedHeightLayoutCache#removeMapping(FHTreeStateNode):::Removes the mapping for a previously added node.:::treePathMapping->node->getTreePath->remove
FixedHeightLayoutCache#getMapping(TreePath):::Returns the node previously added for path:::return->treePathMapping->get
FixedHeightLayoutCache#rebuild(boolean):::Sent to completely rebuild the visible tree:::rootUO->treePathMapping->clear->if->treeModel->getRoot->createNodeForValue->new->TreePath->addMapping->if->isRootVisible->else->root->expand->else->if->treeSelectionModel->clearSelection->this->visibleNodesChanged
FixedHeightLayoutCache#getRowContainingYLocation(int):::Returns the index of the row containing location:::if->getRowCount->return->return->Math->Math->getRowCount->getRowHeight->min->max
FixedHeightLayoutCache#ensurePathIsExpanded(TreePath, boolean):::Ensures that all the path components in path are expanded, accept for the last component which will only be expanded if expandLast is true:::if->if->treeModel->aPath->getLastPathComponent->isLeaf->aPath->getParentPath->if->lastNode->getNodeForPath->if->lastNode->makeVisible->if->lastNode->expand->return->return
FixedHeightLayoutCache#createNodeForValue(Object, int):::Creates and returns an instance of FHTreeStateNode.:::return->new->FHTreeStateNode
FixedHeightLayoutCache#getNodeForPath(TreePath, boolean, boolean):::Messages getTreeNodeForPage(path, onlyIfVisible, shouldCreate, path.length) as long as path is non-null and the length is > 0:::if->node->getMapping->if->if->node->isVisible->return->return->if->return->paths->if->tempStacks->size->new->Stack<TreePath>->else->tempStacks->pop->try->paths->push->path->getParentPath->while->getMapping->if->while->paths->size->paths->pop->node->path->getLastPathComponent->createChildFor->return->paths->push->path->getParentPath->catch->finally->paths->removeAllElements->tempStacks->push->return->return
FixedHeightLayoutCache.FHTreeStateNode#setParent(MutableTreeNode):::Messaged when this node is added somewhere, resets the path and adds a mapping from path to this node.:::super->setParent->if->getTreePath->getUserObject->pathByAddingChild->addMapping
FixedHeightLayoutCache.FHTreeStateNode#remove(int):::Messaged when this node is removed from its parent, this messages removedFromMapping to remove all the children.:::node->getChildAt->node->removeFromMapping->super->remove
FixedHeightLayoutCache.FHTreeStateNode#setUserObject(Object):::Messaged to set the user object:::super->setUserObject->if->parent->getParent->if->parent->getTreePath->resetChildrenPaths->else->resetChildrenPaths
FixedHeightLayoutCache.FHTreeStateNode#getChildIndex():::Returns the index of the receiver in the model.:::return
FixedHeightLayoutCache.FHTreeStateNode#getTreePath():::Returns the TreePath of the receiver.:::return
FixedHeightLayoutCache.FHTreeStateNode#getChildAtModelIndex(int):::Returns the child for the passed in model index, this will return null if the child for index has not yet been created (expanded).:::for->counter->getChildCount->return
FixedHeightLayoutCache.FHTreeStateNode#isVisible():::Returns true if this node is visible:::parent->getParent->if->return->return->parent->isExpanded->parent->isVisible
FixedHeightLayoutCache.FHTreeStateNode#getRow():::Returns the row of the receiver.:::return
FixedHeightLayoutCache.FHTreeStateNode#getRowToModelIndex(int):::Returns the row of the child with a model index of index.:::child->lastRow->getRow->retValue->for->counter->maxCounter->getChildCount->return->getRow->getTotalChildCount
FixedHeightLayoutCache.FHTreeStateNode#getTotalChildCount():::Returns the number of children in the receiver by descending all expanded nodes and messaging them with getTotalChildCount.:::if->isExpanded->parent->getParent->pIndex->if->parent->getIndex->parent->getChildCount->nextSibling->parent->getChildAt->return->else->retCount->for->counter->getChildCount->return->return
FixedHeightLayoutCache.FHTreeStateNode#isExpanded():::Returns true if this node is expanded.:::return
FixedHeightLayoutCache.FHTreeStateNode#getVisibleLevel():::The highest visible nodes have a depth of 0.:::if->isRootVisible->return->getLevel->else->return->getLevel
FixedHeightLayoutCache.FHTreeStateNode#resetChildrenPaths(TreePath):::Recreates the receivers path, and all its children's paths.:::removeMapping->if->getUserObject->new->TreePath->else->parentPath->getUserObject->pathByAddingChild->addMapping->for->counter->getChildCount
FixedHeightLayoutCache.FHTreeStateNode#removeFromMapping():::Removes the receiver, and all its children, from the mapping table.:::if->removeMapping->for->counter->getChildCount
FixedHeightLayoutCache.FHTreeStateNode#createChildFor(Object):::Creates a new node to represent userObject:::newChildIndex->treeModel->getUserObject->getIndexOfChild->if->return->aNode->child->createNodeForValue->childRow->if->isVisible->getRowToModelIndex->else->for->counter->maxCounter->getChildCount->add->return
FixedHeightLayoutCache.FHTreeStateNode#adjustRowBy(int):::Adjusts the receiver, and all its children rows by amount.:::if->for->counter->getChildCount
FixedHeightLayoutCache.FHTreeStateNode#adjustRowBy(int, int):::Adjusts this node, its child, and its parent starting at an index of index index is the index of the child to start adjusting from, which is not necessarily the model index.:::if->for->counter->getChildCount->parent->getParent->if->parent->parent->getIndex->adjustRowBy
FixedHeightLayoutCache.FHTreeStateNode#didExpand():::Messaged when the node has expanded:::nextRow->setRowAndChildren->parent->getParent->childRowCount->if->parent->parent->getIndex->adjustRowBy->adjustRowCountBy
FixedHeightLayoutCache.FHTreeStateNode#setRowAndChildren(int):::Sets the receivers row to nextRow and recursively updates all the children of the receivers rows:::if->isExpanded->return->lastRow->lastModelIndex->child->maxCounter->getChildCount->for->counter->return
FixedHeightLayoutCache.FHTreeStateNode#resetChildrenRowsFrom(int, int, int)::: tree state node reset children rows from:::lastRow->lastModelIndex->node->maxCounter->getChildCount->for->counter->getParent->if->node->node->getIndex->resetChildrenRowsFrom->else
FixedHeightLayoutCache.FHTreeStateNode#makeVisible():::Makes the receiver visible, but invoking expandParentAndReceiver on the superclass.:::parent->getParent->if->parent->expandParentAndReceiver
FixedHeightLayoutCache.FHTreeStateNode#expandParentAndReceiver():::Invokes expandParentAndReceiver on the parent, and expands the receiver.:::parent->getParent->if->parent->expandParentAndReceiver->expand
FixedHeightLayoutCache.FHTreeStateNode#expand():::Expands the receiver.:::if->isLeaf->visible->isVisible->treeModel->getUserObject->getChildCount->if->didExpand->if->treeSelectionModel->resetRowSelection
FixedHeightLayoutCache.FHTreeStateNode#collapse(boolean):::Collapses the receiver:::if->if->isVisible->childCount->getTotalChildCount->adjustRowCountBy->adjustRowBy->else->if->isVisible->treeSelectionModel->resetRowSelection
FixedHeightLayoutCache.FHTreeStateNode#isLeaf():::Returns true if the receiver is a leaf.:::model->getModel->return->model->this->getUserObject->isLeaf
FixedHeightLayoutCache.FHTreeStateNode#addNode(FHTreeStateNode):::Adds newChild to this nodes children at the appropriate location:::added->childIndex->newChild->getChildIndex->for->counter->maxCounter->getChildCount->if->add
FixedHeightLayoutCache.FHTreeStateNode#removeChildAtModelIndex(int, boolean):::Removes the child at modelIndex:::childNode->getChildAtModelIndex->if->row->childNode->getRow->index->getIndex->childNode->collapse->remove->adjustChildIndexs->if->resetChildrenRowsFrom->else->maxCounter->getChildCount->aChild->for->counter->if->adjustRowBy->adjustRowCountBy
FixedHeightLayoutCache.FHTreeStateNode#adjustChildIndexs(int, int):::Adjusts the child indexs of the receivers children by amount, starting at index.:::for->counter->maxCounter->getChildCount
FixedHeightLayoutCache.FHTreeStateNode#childInsertedAtModelIndex(int, boolean):::Messaged when a child has been inserted at index:::aChild->maxCounter->getChildCount->for->counter->if->adjustRowBy->adjustRowCountBy
FixedHeightLayoutCache.FHTreeStateNode#getPathForRow(int, int, SearchInfo):::Returns true if there is a row for row:::if->return->child->lastChild->for->counter->maxCounter->getChildCount->if->lastChildEndRow->if->return->lastChild->getPathForRow->return->else->retChildIndex->if->return->return
FixedHeightLayoutCache.FHTreeStateNode#getCountTo(int):::Asks all the children of the receiver for their totalChildCount and returns this value (plus stopIndex).:::aChild->retCount->for->counter->maxCounter->getChildCount->if->return->getParent->getCountTo->if->isRootVisible->return->return
FixedHeightLayoutCache.FHTreeStateNode#getNumExpandedChildrenTo(int):::Returns the number of children that are expanded to stopIndex:::aChild->retCount->for->counter->maxCounter->getChildCount->return
FixedHeightLayoutCache.FHTreeStateNode#didAdjustTree():::Messaged when this node either expands or collapses.:::
FixedHeightLayoutCache.SearchInfo#getPath()::: search info get path:::if->return->if->return->node->getTreePath->treeModel->node->getUserObject->getChild->pathByAddingChild->return
FixedHeightLayoutCache.VisibleFHTreeStateNodeEnumeration#hasMoreElements()::: visible tree state node enumeration has more elements:::return
FixedHeightLayoutCache.VisibleFHTreeStateNodeEnumeration#nextElement()::: visible tree state node enumeration next element:::if->hasMoreElements->throw->new->NoSuchElementException->retObject->if->parent->getTreePath->else->node->parent->getChildAtModelIndex->if->parent->getTreePath->treeModel->parent->getUserObject->getChild->pathByAddingChild->else->node->getTreePath->updateNextObject->return
FixedHeightLayoutCache.VisibleFHTreeStateNodeEnumeration#updateNextObject():::Determines the next object by invoking updateNextIndex and if not succesful findNextValidParent.:::if->updateNextIndex->findNextValidParent
FixedHeightLayoutCache.VisibleFHTreeStateNodeEnumeration#findNextValidParent():::Finds the next valid parent, this should be called when nextIndex is beyond the number of children of the current parent.:::if->return->while->newParent->parent->getParent->if->treeModel->parent->getUserObject->getChildCount->if->updateNextIndex->return->else->return
FixedHeightLayoutCache.VisibleFHTreeStateNodeEnumeration#updateNextIndex():::Updates nextIndex returning false if it is beyond the number of children of parent.:::if->parent->isExpanded->return->if->return->else->if->return->child->parent->getChildAtModelIndex->if->child->isExpanded->treeModel->child->getUserObject->getChildCount->return
MutableTreeNode#insert(MutableTreeNode, int):::Adds child to the receiver at index:::
MutableTreeNode#remove(int):::Removes the child at index from the receiver.:::
MutableTreeNode#remove(MutableTreeNode):::Removes node from the receiver:::
MutableTreeNode#setUserObject(Object):::Resets the user object of the receiver to object.:::
MutableTreeNode#removeFromParent():::Removes the receiver from its parent.:::
MutableTreeNode#setParent(MutableTreeNode):::Sets the parent of the receiver to newParent.:::
RowMapper#getRowsForPaths(TreePath[]):::Returns the rows that the TreePath instances in path are being displayed at:::
TreeCellEditor#getTreeCellEditorComponent(JTree, Object, boolean, boolean, boolean, int):::Sets an initial value for the editor:::
TreeCellRenderer#getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean):::Sets the value of the current tree cell to value:::
TreeModel#getRoot():::Returns the root of the tree:::
TreeModel#getChild(Object, int):::Returns the child of parent at index index in the parent's child array:::
TreeModel#getChildCount(Object):::Returns the number of children of parent:::
TreeModel#isLeaf(Object):::Returns true if node is a leaf:::
TreeModel#valueForPathChanged(TreePath, Object):::Messaged when the user has altered the value for the item identified by path to newValue:::
TreeModel#getIndexOfChild(Object, Object):::Returns the index of child in parent:::
TreeModel#addTreeModelListener(TreeModelListener):::Adds a listener for the TreeModelEvent posted after the tree changes.:::
TreeModel#removeTreeModelListener(TreeModelListener):::Removes a listener previously added with addTreeModelListener.:::
TreeNode#getChildAt(int):::Returns the child TreeNode at index childIndex.:::
TreeNode#getChildCount():::Returns the number of children TreeNodes the receiver contains.:::
TreeNode#getParent():::Returns the parent TreeNode of the receiver.:::
TreeNode#getIndex(TreeNode):::Returns the index of node in the receivers children:::
TreeNode#getAllowsChildren():::Returns true if the receiver allows children.:::
TreeNode#isLeaf():::Returns true if the receiver is a leaf.:::
TreeNode#children():::Returns the children of the receiver as an Enumeration.:::
TreePath#getPath():::Returns an ordered array of the elements of this TreePath:::i->getPathCount->result->new->ObjectArr->for->path->path->getParentPath->return
TreePath#getLastPathComponent():::Returns the last element of this path.:::return
TreePath#getPathCount():::Returns the number of elements in the path.:::result->for->path->path->getParentPath->return
TreePath#getPathComponent(int):::Returns the path element at the specified index.:::pathLength->getPathCount->if->throw->new->IllegalArgumentException->path->for->i->return->path->getLastPathComponent
TreePath#equals(Object):::Compares this TreePath to the specified object:::if->return->if->oTreePath->if->getPathCount->oTreePath->getPathCount->return->for->path->path->getParentPath->return->return
TreePath#hashCode():::Returns the hash code of this TreePath:::return->getLastPathComponent->hashCode
TreePath#isDescendant(TreePath):::Returns true if aTreePath is a descendant of this TreePath:::if->return->if->pathLength->getPathCount->oPathLength->aTreePath->getPathCount->if->return->while->aTreePath->getParentPath->return->equals->return
TreePath#pathByAddingChild(Object):::Returns a new path containing all the elements of this path plus child:::if->throw->new->NullPointerException->return->new->TreePath
TreePath#getParentPath():::Returns the TreePath of the parent:::return
TreePath#toString():::Returns a string that displays and identifies this object's properties.:::tempSpot->new->StringBuilder->for->counter->maxCounter->getPathCount->tempSpot->append->return->tempSpot->toString
TreeSelectionModel#setSelectionMode(int):::Sets the selection model, which must be one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION:::
TreeSelectionModel#getSelectionMode():::Returns the current selection mode, one of SINGLE_TREE_SELECTION, CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.:::
TreeSelectionModel#setSelectionPath(TreePath):::Sets the selection to path:::
TreeSelectionModel#setSelectionPaths(TreePath[]):::Sets the selection to path:::
TreeSelectionModel#addSelectionPath(TreePath):::Adds path to the current selection:::
TreeSelectionModel#addSelectionPaths(TreePath[]):::Adds paths to the current selection:::
TreeSelectionModel#removeSelectionPath(TreePath):::Removes path from the selection:::
TreeSelectionModel#removeSelectionPaths(TreePath[]):::Removes paths from the selection:::
TreeSelectionModel#getSelectionPath():::Returns the first path in the selection:::
TreeSelectionModel#getSelectionPaths():::Returns the paths in the selection:::
TreeSelectionModel#getSelectionCount():::Returns the number of paths that are selected.:::
TreeSelectionModel#isPathSelected(TreePath):::Returns true if the path, path, is in the current selection.:::
TreeSelectionModel#isSelectionEmpty():::Returns true if the selection is currently empty.:::
TreeSelectionModel#clearSelection():::Empties the current selection:::
TreeSelectionModel#setRowMapper(RowMapper):::Sets the RowMapper instance:::
TreeSelectionModel#getRowMapper():::Returns the RowMapper instance that is able to map a TreePath to a row.:::
TreeSelectionModel#getSelectionRows():::Returns all of the currently selected rows:::
TreeSelectionModel#getMinSelectionRow():::Returns the smallest value obtained from the RowMapper for the current set of selected TreePaths:::
TreeSelectionModel#getMaxSelectionRow():::Returns the largest value obtained from the RowMapper for the current set of selected TreePaths:::
TreeSelectionModel#isRowSelected(int):::Returns true if the row identified by row is selected.:::
TreeSelectionModel#resetRowSelection():::Updates this object's mapping from TreePaths to rows:::
TreeSelectionModel#getLeadSelectionRow():::Returns the lead selection index:::
TreeSelectionModel#getLeadSelectionPath():::Returns the last path that was added:::
TreeSelectionModel#addPropertyChangeListener(PropertyChangeListener):::Adds a PropertyChangeListener to the listener list:::
TreeSelectionModel#removePropertyChangeListener(PropertyChangeListener):::Removes a PropertyChangeListener from the listener list:::
TreeSelectionModel#addTreeSelectionListener(TreeSelectionListener):::Adds x to the list of listeners that are notified each time the set of selected TreePaths changes.:::
TreeSelectionModel#removeTreeSelectionListener(TreeSelectionListener):::Removes x from the list of listeners that are notified each time the set of selected TreePaths changes.:::
VariableHeightLayoutCache#setModel(TreeModel):::Sets the TreeModel that will provide the data.:::super->setModel->rebuild
VariableHeightLayoutCache#setRootVisible(boolean):::Determines whether or not the root node from the TreeModel is visible.:::if->isRootVisible->if->root->updatePreferredSize->visibleNodes->insertElementAt->else->if->visibleNodes->size->visibleNodes->removeElementAt->if->treeSelectionModel->root->getTreePath->removeSelectionPath->if->treeSelectionModel->resetRowSelection->if->getRowCount->getNode->setYOrigin->updateYLocationsFrom->visibleNodesChanged->super->setRootVisible
VariableHeightLayoutCache#setRowHeight(int):::Sets the height of each cell:::if->getRowHeight->super->setRowHeight->invalidateSizes->this->visibleNodesChanged
VariableHeightLayoutCache#setNodeDimensions(NodeDimensions):::Sets the renderer that is responsible for drawing nodes in the tree.:::super->setNodeDimensions->invalidateSizes->visibleNodesChanged
VariableHeightLayoutCache#setExpandedState(TreePath, boolean):::Marks the path path expanded state to isExpanded.:::if->if->ensurePathIsExpanded->else->node->getNodeForPath->if->node->makeVisible->node->collapse
VariableHeightLayoutCache#getExpandedState(TreePath):::Returns true if the path is expanded, and visible.:::node->getNodeForPath->return->node->isVisible->node->isExpanded
VariableHeightLayoutCache#getBounds(TreePath, Rectangle):::Returns the Rectangle enclosing the label portion into which the item identified by path will be drawn.:::node->getNodeForPath->if->if->updateNodeSizes->return->node->getNodeBounds->return
VariableHeightLayoutCache#getPathForRow(int):::Returns the path for row:::if->getRowCount->return->getNode->getTreePath->return
VariableHeightLayoutCache#getRowForPath(TreePath):::Returns the row where the last item identified in path is visible:::if->return->visNode->getNodeForPath->if->return->visNode->getRow->return
VariableHeightLayoutCache#getRowCount():::Returns the number of visible rows.:::return->visibleNodes->size
VariableHeightLayoutCache#invalidatePathBounds(TreePath):::Instructs the LayoutCache that the bounds for path are invalid, and need to be updated.:::node->getNodeForPath->if->node->markSizeInvalid->if->node->isVisible->node->getRow->updateYLocationsFrom
VariableHeightLayoutCache#getPreferredHeight():::Returns the preferred height.:::rowCount->getRowCount->if->node->getNode->return->node->getYOrigin->node->getPreferredHeight->return
VariableHeightLayoutCache#getPreferredWidth(Rectangle):::Returns the preferred width and height for the region in visibleRegion.:::if->updateNodeSizes->return->getMaxNodeWidth
VariableHeightLayoutCache#getPathClosestTo(int, int):::Returns the path to the node that is closest to x,y:::if->getRowCount->return->if->updateNodeSizes->row->getRowContainingYLocation->return->getNode->getTreePath
VariableHeightLayoutCache#getVisiblePathsFrom(TreePath):::Returns an Enumerator that increments over the visible paths starting at the passed in location:::node->getNodeForPath->if->return->new->VisibleTreeStateNodeEnumeration->return
VariableHeightLayoutCache#getVisibleChildCount(TreePath):::Returns the number of visible children for path.:::node->getNodeForPath->return->node->getVisibleChildCount
VariableHeightLayoutCache#invalidateSizes():::Informs the TreeState that it needs to recalculate all the sizes it is referencing.:::if->root->deepMarkSizeInvalid->if->isFixedRowHeight->visibleNodes->size->updateNodeSizes
VariableHeightLayoutCache#isExpanded(TreePath):::Returns true if the value identified by path is currently expanded.:::if->lastNode->getNodeForPath->return->lastNode->isExpanded->return
VariableHeightLayoutCache#treeNodesChanged(TreeModelEvent):::Invoked after a node (or a set of siblings) has changed in some way:::if->changedIndexs->e->getChildIndices->changedNode->SwingUtilities2->getModel->getTreePath->getNodeForPath->if->changedValue->changedNode->getValue->changedNode->updatePreferredSize->if->changedNode->hasBeenExpanded->foreach->changedChildNode->changedNode->getChildAt->changedChildNode->treeModel->getChild->setUserObject->changedChildNode->updatePreferredSize->else->if->changedNode->updatePreferredSize->if->isFixedRowHeight->aRow->changedNode->getRow->if->this->updateYLocationsFrom->this->visibleNodesChanged
VariableHeightLayoutCache#treeNodesInserted(TreeModelEvent):::Invoked after nodes have been inserted into the tree:::if->changedIndexs->e->getChildIndices->changedParentNode->SwingUtilities2->getModel->getTreePath->getNodeForPath->if->if->changedParentNode->hasBeenExpanded->makeVisible->changedParentNode->getRow->changedParentNode->isExpanded->oldChildCount->changedParentNode->getChildCount->foreach->this->createNodeAt->if->changedParentNode->updatePreferredSize->if->treeSelectionModel->resetRowSelection->if->isFixedRowHeight->changedParentNode->isVisible->if->this->updateYLocationsFrom->else->this->changedParentNode->getRow->updateYLocationsFrom->this->visibleNodesChanged->else->if->this->visibleNodesChanged->else->if->treeModel->changedParentNode->getValue->getChildCount->changedParentNode->updatePreferredSize->if->isFixedRowHeight->changedParentNode->isVisible->changedParentNode->getRow->updateYLocationsFrom
VariableHeightLayoutCache#treeNodesRemoved(TreeModelEvent):::Invoked after nodes have been removed from the tree:::if->changedIndexs->changedParentNode->e->getChildIndices->SwingUtilities2->getModel->getTreePath->getNodeForPath->if->if->changedParentNode->hasBeenExpanded->makeInvisible->counter->removedRow->removedNode->changedParentNode->getRow->changedParentNode->isExpanded->for->if->changedParentNode->getChildCount->changedParentNode->updatePreferredSize->if->changedParentNode->isExpanded->changedParentNode->isLeaf->changedParentNode->collapse->if->treeSelectionModel->resetRowSelection->if->isFixedRowHeight->changedParentNode->getChildCount->changedParentNode->isVisible->if->if->getRowCount->getNode->setYOrigin->updateYLocationsFrom->else->changedParentNode->getRow->updateYLocationsFrom->this->visibleNodesChanged->else->if->this->visibleNodesChanged->else->if->treeModel->changedParentNode->getValue->getChildCount->changedParentNode->updatePreferredSize->if->isFixedRowHeight->changedParentNode->isVisible->this->changedParentNode->getRow->updateYLocationsFrom
VariableHeightLayoutCache#treeStructureChanged(TreeModelEvent):::Invoked after the tree has drastically changed structure from a given node down:::if->changedPath->SwingUtilities2->getModel->getTreePath->changedNode->getNodeForPath->if->treeModel->getRoot->changedPath->getPathCount->rebuild->else->if->nodeIndex->newNode->parent->wasExpanded->wasVisible->newIndex->changedNode->isExpanded->changedNode->getRow->changedNode->getParent->parent->getIndex->if->changedNode->collapse->if->visibleNodes->removeElement->changedNode->removeFromParent->createNodeAt->parent->getChildAt->if->newNode->expand->newNode->getRow->if->isFixedRowHeight->if->updateYLocationsFrom->else->updateYLocationsFrom->this->visibleNodesChanged->else->if->this->visibleNodesChanged
VariableHeightLayoutCache#visibleNodesChanged()::: variable height layout cache visible nodes changed:::
VariableHeightLayoutCache#addMapping(TreeStateNode):::Adds a mapping for node.:::treePathMapping->node->getTreePath->put
VariableHeightLayoutCache#removeMapping(TreeStateNode):::Removes the mapping for a previously added node.:::treePathMapping->node->getTreePath->remove
VariableHeightLayoutCache#getMapping(TreePath):::Returns the node previously added for path:::return->treePathMapping->get
VariableHeightLayoutCache#getBounds(int, Rectangle):::Retursn the bounds for row, row by reference in placeIn:::if->updateNodeSizes->if->getRowCount->return->getNode->getNodeBounds->return
VariableHeightLayoutCache#rebuild(boolean):::Completely rebuild the tree, all expanded state, and node caches are removed:::rootObject->treePathMapping->clear->if->treeModel->getRoot->createNodeForValue->new->TreePath->addMapping->root->updatePreferredSize->visibleNodes->removeAllElements->if->isRootVisible->visibleNodes->addElement->if->root->isExpanded->root->expand->else->cursor->root->children->while->cursor->hasMoreElements->visibleNodes->cursor->nextElement->addElement->if->isFixedRowHeight->updateYLocationsFrom->else->visibleNodes->removeAllElements->if->treeSelectionModel->clearSelection->this->visibleNodesChanged
VariableHeightLayoutCache#createNodeAt(TreeStateNode, int):::Creates a new node to represent the node at childIndex in parents children:::isParentRoot->newValue->newChildNode->treeModel->parent->getValue->getChild->createNodeForValue->parent->insert->newChildNode->updatePreferredSize->if->parent->isExpanded->parent->getRow->newRow->if->if->isRootVisible->else->parent->getRow->else->if->parent->getChildCount->parent->getLastVisibleNode->getRow->else->previousNode->parent->getChildAt->previousNode->getLastVisibleNode->getRow->visibleNodes->insertElementAt->return
VariableHeightLayoutCache#getNodeForPath(TreePath, boolean, boolean):::Returns the TreeStateNode identified by path:::if->node->getMapping->if->if->node->isVisible->return->return->paths->if->tempStacks->size->new->Stack<TreePath>->else->tempStacks->pop->try->paths->push->path->getParentPath->while->getMapping->if->while->paths->size->paths->pop->node->getLoadedChildren->childIndex->treeModel->node->getUserObject->path->getLastPathComponent->getIndexOfChild->if->node->getChildCount->node->isVisible->else->node->getChildAt->return->paths->push->path->getParentPath->catch->finally->paths->removeAllElements->tempStacks->push->return
VariableHeightLayoutCache#updateYLocationsFrom(int):::Updates the y locations of all of the visible nodes after location.:::if->getRowCount->counter->maxCounter->newYOrigin->aNode->getNode->aNode->getYOrigin->aNode->getPreferredHeight->for->visibleNodes->size
VariableHeightLayoutCache#updateNodeSizes(boolean):::Resets the y origin of all the visible nodes as well as messaging all the visible nodes to updatePreferredSize():::aY->counter->maxCounter->node->for->visibleNodes->size
VariableHeightLayoutCache#getRowContainingYLocation(int):::Returns the index of the row containing location:::rows->getRowCount->if->return->if->isFixedRowHeight->return->Math->Math->getRowHeight->min->max->max->min->mid->while->node->visibleNodes->elementAt->minY->node->getYOrigin->maxY->node->getPreferredHeight->if->else->if->else->break->if->if->return
VariableHeightLayoutCache#ensurePathIsExpanded(TreePath, boolean):::Ensures that all the path components in path are expanded, accept for the last component which will only be expanded if expandLast is true:::if->if->treeModel->aPath->getLastPathComponent->isLeaf->aPath->getParentPath->if->lastNode->getNodeForPath->if->lastNode->makeVisible->if->lastNode->expand
VariableHeightLayoutCache#getNode(int):::Returns the AbstractTreeUI.VisibleNode displayed at the given row:::return->visibleNodes->elementAt
VariableHeightLayoutCache#getMaxNodeWidth():::Returns the maximum node width.:::maxWidth->nodeWidth->counter->node->for->getRowCount->return
VariableHeightLayoutCache#createNodeForValue(Object):::Responsible for creating a TreeStateNode that will be used to track display information about value.:::return->new->TreeStateNode
VariableHeightLayoutCache.TreeStateNode#setParent(MutableTreeNode):::Messaged when this node is added somewhere, resets the path and adds a mapping from path to this node.:::super->setParent->if->getTreePath->getUserObject->pathByAddingChild->addMapping
VariableHeightLayoutCache.TreeStateNode#remove(int):::Messaged when this node is removed from its parent, this messages removedFromMapping to remove all the children.:::node->getChildAt->node->removeFromMapping->super->remove
VariableHeightLayoutCache.TreeStateNode#setUserObject(Object):::Messaged to set the user object:::super->setUserObject->if->parent->getParent->if->parent->getTreePath->resetChildrenPaths->else->resetChildrenPaths
VariableHeightLayoutCache.TreeStateNode#children():::Returns the children of the receiver:::if->this->isExpanded->return->else->return->super->children
VariableHeightLayoutCache.TreeStateNode#isLeaf():::Returns true if the receiver is a leaf.:::return->getModel->this->getValue->isLeaf
VariableHeightLayoutCache.TreeStateNode#getNodeBounds(Rectangle):::Returns the location and size of this node.:::if->getXOrigin->getYOrigin->getPreferredWidth->getPreferredHeight->new->Rectangle->else->getXOrigin->getYOrigin->getPreferredWidth->getPreferredHeight->return
VariableHeightLayoutCache.TreeStateNode#getXOrigin()::: tree state node get origin:::if->hasValidSize->getRow->updatePreferredSize->return
VariableHeightLayoutCache.TreeStateNode#getYOrigin():::Returns the y origin the user object will be drawn at.:::if->isFixedRowHeight->aRow->getRow->if->return->return->getRowHeight->return
VariableHeightLayoutCache.TreeStateNode#getPreferredHeight():::Returns the preferred height of the receiver.:::if->isFixedRowHeight->return->getRowHeight->else->if->hasValidSize->getRow->updatePreferredSize->return
VariableHeightLayoutCache.TreeStateNode#getPreferredWidth():::Returns the preferred width of the receiver.:::if->hasValidSize->getRow->updatePreferredSize->return
VariableHeightLayoutCache.TreeStateNode#hasValidSize():::Returns true if this node has a valid size.:::return
VariableHeightLayoutCache.TreeStateNode#getRow():::Returns the row of the receiver.:::return->visibleNodes->indexOf
VariableHeightLayoutCache.TreeStateNode#hasBeenExpanded():::Returns true if this node has been expanded at least once.:::return
VariableHeightLayoutCache.TreeStateNode#isExpanded():::Returns true if the receiver has been expanded.:::return
VariableHeightLayoutCache.TreeStateNode#getLastVisibleNode():::Returns the last visible node that is a child of this instance.:::node->while->node->isExpanded->node->getChildCount->node->getLastChild->return
VariableHeightLayoutCache.TreeStateNode#isVisible():::Returns true if the receiver is currently visible.:::if->return->parent->getParent->return->parent->isExpanded->parent->isVisible
VariableHeightLayoutCache.TreeStateNode#getModelChildCount():::Returns the number of children this will have:::if->return->super->getChildCount->return->getModel->getValue->getChildCount
VariableHeightLayoutCache.TreeStateNode#getVisibleChildCount():::Returns the number of visible children, that is the number of children that are expanded, or leafs.:::childCount->if->isExpanded->maxCounter->getChildCount->for->counter->return
VariableHeightLayoutCache.TreeStateNode#toggleExpanded():::Toggles the receiver between expanded and collapsed.:::if->isExpanded->collapse->else->expand
VariableHeightLayoutCache.TreeStateNode#makeVisible():::Makes the receiver visible, but invoking expandParentAndReceiver on the superclass.:::parent->getParent->if->parent->expandParentAndReceiver
VariableHeightLayoutCache.TreeStateNode#expand():::Expands the receiver.:::expand
VariableHeightLayoutCache.TreeStateNode#collapse():::Collapses the receiver.:::collapse
VariableHeightLayoutCache.TreeStateNode#getValue():::Returns the value the receiver is representing:::return->getUserObject
VariableHeightLayoutCache.TreeStateNode#getTreePath():::Returns a TreePath instance for this node.:::return
VariableHeightLayoutCache.TreeStateNode#resetChildrenPaths(TreePath):::Recreates the receivers path, and all its children's paths.:::removeMapping->if->getUserObject->new->TreePath->else->parentPath->getUserObject->pathByAddingChild->addMapping->for->counter->getChildCount
VariableHeightLayoutCache.TreeStateNode#setYOrigin(int):::Sets y origin the user object will be drawn at to newYOrigin.:::
VariableHeightLayoutCache.TreeStateNode#shiftYOriginBy(int):::Shifts the y origin by offset.:::
VariableHeightLayoutCache.TreeStateNode#updatePreferredSize():::Updates the receivers preferredSize by invoking updatePreferredSize with an argument of -1.:::getRow->updatePreferredSize
VariableHeightLayoutCache.TreeStateNode#updatePreferredSize(int):::Updates the preferred size by asking the current renderer for the Dimension needed to draw the user object this instance represents.:::bounds->this->getUserObject->getLevel->isExpanded->getNodeDimensions->if->else->if->isFixedRowHeight->getRowHeight->else
VariableHeightLayoutCache.TreeStateNode#markSizeInvalid():::Marks the receivers size as invalid:::
VariableHeightLayoutCache.TreeStateNode#deepMarkSizeInvalid():::Marks the receivers size, and all its descendants sizes, as invalid.:::markSizeInvalid->for->counter->getChildCount
VariableHeightLayoutCache.TreeStateNode#getLoadedChildren(boolean):::Returns the children of the receiver:::if->return->super->children->newNode->realNode->getValue->treeModel->getModel->count->treeModel->getChildCount->childRow->getRow->if->for->i->else->for->i->return->super->children
VariableHeightLayoutCache.TreeStateNode#didAdjustTree():::Messaged from expand and collapse:::
VariableHeightLayoutCache.TreeStateNode#expandParentAndReceiver():::Invokes expandParentAndReceiver on the parent, and expands the receiver.:::parent->getParent->if->parent->expandParentAndReceiver->expand
VariableHeightLayoutCache.TreeStateNode#expand(boolean):::Expands this node in the tree:::if->isExpanded->isLeaf->isFixed->isFixedRowHeight->startHeight->getPreferredHeight->originalRow->getRow->updatePreferredSize->if->newNode->realNode->getValue->treeModel->getModel->count->treeModel->getChildCount->offset->for->i->i->cursor->preorderEnumeration->cursor->nextElement->newYOrigin->isRootVisible->getYOrigin->this->getPreferredHeight->aNode->if->while->cursor->hasMoreElements->cursor->nextElement->if->aNode->hasValidSize->aNode->updatePreferredSize->aNode->setYOrigin->aNode->getPreferredHeight->visibleNodes->insertElementAt->else->while->cursor->hasMoreElements->cursor->nextElement->visibleNodes->insertElementAt->if->getPreferredHeight->if->getRowCount->counter->heightDiff->getYOrigin->getPreferredHeight->getPreferredHeight->for->visibleNodes->size->didAdjustTree->visibleNodesChanged->if->treeSelectionModel->resetRowSelection
VariableHeightLayoutCache.TreeStateNode#collapse(boolean):::Collapses this node in the tree:::if->isExpanded->cursor->preorderEnumeration->cursor->nextElement->rowsDeleted->isFixed->isFixedRowHeight->lastYEnd->if->else->getPreferredHeight->getYOrigin->startHeight->getPreferredHeight->startYEnd->myRow->getRow->if->while->cursor->hasMoreElements->node->cursor->nextElement->if->node->isVisible->node->getYOrigin->node->getPreferredHeight->else->while->cursor->hasMoreElements->node->cursor->nextElement->if->node->isVisible->for->counter->if->markSizeInvalid->else->if->updatePreferredSize->if->getPreferredHeight->getPreferredHeight->if->getRowCount->counter->maxCounter->shiftAmount->for->visibleNodes->size->didAdjustTree->visibleNodesChanged->if->treeSelectionModel->resetRowSelection
VariableHeightLayoutCache.TreeStateNode#removeFromMapping():::Removes the receiver, and all its children, from the mapping table.:::if->removeMapping->for->counter->getChildCount
VariableHeightLayoutCache.VisibleTreeStateNodeEnumeration#hasMoreElements()::: visible tree state node enumeration has more elements:::return
VariableHeightLayoutCache.VisibleTreeStateNodeEnumeration#nextElement()::: visible tree state node enumeration next element:::if->hasMoreElements->throw->new->NoSuchElementException->retObject->if->parent->getTreePath->else->node->parent->getChildAt->node->getTreePath->updateNextObject->return
VariableHeightLayoutCache.VisibleTreeStateNodeEnumeration#updateNextObject():::Determines the next object by invoking updateNextIndex and if not succesful findNextValidParent.:::if->updateNextIndex->findNextValidParent
VariableHeightLayoutCache.VisibleTreeStateNodeEnumeration#findNextValidParent():::Finds the next valid parent, this should be called when nextIndex is beyond the number of children of the current parent.:::if->return->while->newParent->parent->getParent->if->newParent->getIndex->parent->getChildCount->if->updateNextIndex->return->else->return
VariableHeightLayoutCache.VisibleTreeStateNodeEnumeration#updateNextIndex():::Updates nextIndex returning false if it is beyond the number of children of parent.:::if->parent->isExpanded->return->child->parent->getChildAt->if->child->isExpanded->child->getChildCount->return

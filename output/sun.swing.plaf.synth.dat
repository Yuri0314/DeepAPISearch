DefaultSynthStyle#getColorForState(JComponent, Region, int, ColorType):::Returns the color for the specified state.:::si->getStateInfo->color->if->si->getColor->return->if->si->getComponentState->getStateInfo->if->return->si->getColor->return
DefaultSynthStyle#setFont(Font):::Sets the font that is used if there is no matching StateInfo, or it does not define a font.:::
DefaultSynthStyle#getFontForState(JComponent, Region, int):::Returns the font for the specified state:::if->return->si->getStateInfo->font->if->si->getFont->return->if->si->getComponentState->getStateInfo->if->si->getFont->return->return
DefaultSynthStyle#setGraphicsUtils(SynthGraphicsUtils):::Sets the SynthGraphicsUtils that will be used for rendering.:::
DefaultSynthStyle#getGraphicsUtils(SynthContext):::Returns a SynthGraphicsUtils.:::if->return->super->getGraphicsUtils->return
DefaultSynthStyle#setInsets(Insets):::Sets the insets.:::
DefaultSynthStyle#getInsets(SynthContext, Insets):::Returns the Insets:::if->new->Insets->if->else->return
DefaultSynthStyle#setPainter(SynthPainter):::Sets the Painter to use for the border.:::
DefaultSynthStyle#getPainter(SynthContext):::Returns the Painter for the passed in Component:::return
DefaultSynthStyle#setOpaque(boolean):::Sets whether or not the JComponent should be opaque.:::
DefaultSynthStyle#isOpaque(SynthContext):::Returns the value to initialize the opacity property of the Component to:::return
DefaultSynthStyle#setData(Map):::Sets style specific values:::
DefaultSynthStyle#getData():::Returns the style specific data.:::return
DefaultSynthStyle#get(SynthContext, Object):::Getter for a region specific style property.:::si->state->getComponentState->getStateInfo->if->si->getData->si->getData->getKeyFromData->return->si->getData->getKeyFromData->getStateInfo->if->si->getData->si->getData->getKeyFromData->return->si->getData->getKeyFromData->if->getKeyFromData->return->getKeyFromData->return->getDefaultValue
DefaultSynthStyle#getDefaultValue(SynthContext, Object):::Returns the default value for a particular property:::return->super->get
DefaultSynthStyle#clone():::Creates a clone of this style.:::style->try->super->clone->catch->return->finally->if->new->StateInfoArr->for->counter->if->new->HashMap<>->putAll->return
DefaultSynthStyle#addTo(DefaultSynthStyle):::Merges the contents of this Style with that of the passed in Style, returning the resulting merged syle:::if->if->if->if->if->if->new->StateInfoArr->for->counter->else->unique->matchCount->maxOStyles->for->thisCounter->if->newStates->new->StateInfoArr->newIndex->System->arraycopy->for->thisCounter->if->if->new->HashMap<>->putAll->return
DefaultSynthStyle#setStateInfo(StateInfo[]):::Sets the array of StateInfo's which are used to specify properties specific to a particular style.:::
DefaultSynthStyle#getStateInfo():::Returns the array of StateInfo's that that are used to specify properties specific to a particular style.:::return
DefaultSynthStyle#getStateInfo(int):::Returns the best matching StateInfo for a particular state.:::if->bestCount->bestIndex->wildIndex->if->for->counter->return->for->counter->if->return->if->return->return
DefaultSynthStyle.StateInfo#setFont(Font):::Sets the font for this state.:::
DefaultSynthStyle.StateInfo#getFont():::Returns the font for this state.:::return
DefaultSynthStyle.StateInfo#setColors(Color[]):::Sets the array of colors to use for rendering this state:::
DefaultSynthStyle.StateInfo#getColors():::Returns the array of colors to use for rendering this state:::return
DefaultSynthStyle.StateInfo#getColor(ColorType):::Returns the Color to used for the specified ColorType.:::if->id->type->getID->if->return->return
DefaultSynthStyle.StateInfo#addTo(StateInfo):::Merges the contents of this StateInfo with that of the passed in StateInfo, returning the resulting merged StateInfo:::if->if->if->new->HashMap<>->putAll->if->if->new->ColorArr->System->arraycopy->else->if->old->new->ColorArr->System->arraycopy->for->counter->return
DefaultSynthStyle.StateInfo#setComponentState(int):::Sets the state this StateInfo corresponds to.:::
DefaultSynthStyle.StateInfo#getComponentState():::Returns the state this StateInfo corresponds to.:::return
DefaultSynthStyle.StateInfo#clone():::Creates and returns a copy of this StateInfo.:::return->new->StateInfo
Paint9Painter#validImage(Image):::Convenience method for testing the validity of an image.:::return->image->getWidth->image->getHeight
Paint9Painter#paint(Component, Graphics, int, int, int, int, Image, Insets, Insets, PaintType, int):::Paints using the algorightm specified by paintType:::if->return->super->paint
Paint9Painter#createImage(Component, int, int, GraphicsConfiguration, Object[]):::Subclassed to always create a translucent image.:::if->return->new->BufferedImage->return->config->createCompatibleImage
StyleAssociation#createStyleAssociation(String, SynthStyle):::Returns a StyleAssociation that can be used to determine if a particular string matches the returned association.:::return->createStyleAssociation
StyleAssociation#createStyleAssociation(String, SynthStyle, int):::Returns a StyleAssociation that can be used to determine if a particular string matches the returned association.:::return->new->StyleAssociation
StyleAssociation#getID():::Returns the developer specified identifier for this association, will be 0 if an identifier was not specified when this StyleAssociation was created.:::return
StyleAssociation#matches(CharSequence):::Returns true if this StyleAssociation matches the passed in CharSequence.:::if->_pattern->matcher->else->_matcher->reset->return->_matcher->matches
StyleAssociation#getText():::Returns the text used in matching the string.:::return->_pattern->pattern
StyleAssociation#getStyle():::Returns the style this association is mapped to.:::return
SynthFileChooserUIImpl.DirectoryComboBoxModel#addItem(File):::Adds the directory to the model and sets it to be selected, additionally clears out the previous selected directory and the paths leading up to it, if any.:::if->return->useShellFolder->FilePane->usesShellFolder->oldSize->directories->size->directories->clear->if->fireIntervalRemoved->baseFolders->ShellFolder->get->fsv->getRoots->directories->Arrays->asList->addAll->canonical->try->ShellFolder->getNormalizedFile->catch->finally->try->sf->ShellFolder->getShellFolder->f->path->new->Vector<File>->do->path->addElement->while->f->getParentFile->pathCount->path->size->for->i->calculateDepths->setSelectedItem->catch->calculateDepths->finally

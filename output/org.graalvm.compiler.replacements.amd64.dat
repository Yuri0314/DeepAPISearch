Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of dispatch node_optimized array index of__0 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->asJavaConstant->asInt->else->return->arg4->arg5->arg6->arg7->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfDispatchNode->b->addPush->return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__0#getSource()::: plugin_ d64 array index of dispatch node_optimized array index of__0 get source:::return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of dispatch node_optimized array index of__1 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->asJavaConstant->asInt->else->return->arg4->arg5->arg6->arg7->arg8->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfDispatchNode->b->addPush->return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__1#getSource()::: plugin_ d64 array index of dispatch node_optimized array index of__1 get source:::return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__2#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of dispatch node_optimized array index of__2 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->asJavaConstant->asInt->else->return->arg4->arg5->arg6->arg7->arg8->arg9->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfDispatchNode->b->addPush->return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__2#getSource()::: plugin_ d64 array index of dispatch node_optimized array index of__2 get source:::return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__3#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of dispatch node_optimized array index of__3 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->asJavaConstant->asInt->else->return->arg4->arg5->arg6->arg7->arg8->arg9->arg10->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfDispatchNode->b->addPush->return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__3#getSource()::: plugin_ d64 array index of dispatch node_optimized array index of__3 get source:::return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__4#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of dispatch node_optimized array index of__4 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->asJavaConstant->asInt->else->return->arg4->arg5->arg6->arg7->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfDispatchNode->b->addPush->return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__4#getSource()::: plugin_ d64 array index of dispatch node_optimized array index of__4 get source:::return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__5#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of dispatch node_optimized array index of__5 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->asJavaConstant->asInt->else->return->arg4->arg5->arg6->arg7->arg8->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfDispatchNode->b->addPush->return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__5#getSource()::: plugin_ d64 array index of dispatch node_optimized array index of__5 get source:::return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__6#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of dispatch node_optimized array index of__6 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->asJavaConstant->asInt->else->return->arg4->arg5->arg6->arg7->arg8->arg9->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfDispatchNode->b->addPush->return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__6#getSource()::: plugin_ d64 array index of dispatch node_optimized array index of__6 get source:::return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__7#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of dispatch node_optimized array index of__7 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->asJavaConstant->asInt->else->return->arg4->arg5->arg6->arg7->arg8->arg9->arg10->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfDispatchNode->b->addPush->return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__7#getSource()::: plugin_ d64 array index of dispatch node_optimized array index of__7 get source:::return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__8#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of dispatch node_optimized array index of__8 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->if->isConstant->asJavaConstant->asInt->else->return->arg4->arg5->arg6->arg7->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfDispatchNode->b->addPush->return
Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__8#getSource()::: plugin_ d64 array index of dispatch node_optimized array index of__8 get source:::return
PluginFactory_AMD64ArrayIndexOfDispatchNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ d64 array index of dispatch node register plugins:::plugins->new->Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__0->register->plugins->new->Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__1->register->plugins->new->Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__2->register->plugins->new->Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__3->register->plugins->new->Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__4->register->plugins->new->Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__5->register->plugins->new->Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__6->register->plugins->new->Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__7->register->plugins->new->Plugin_AMD64ArrayIndexOfDispatchNode_optimizedArrayIndexOf__8->register
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of node_optimized array index of__0 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->asJavaConstant->asInt->else->return->arg3->arg4->arg5->arg6->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfNode->b->addPush->return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__0#getSource()::: plugin_ d64 array index of node_optimized array index of__0 get source:::return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of node_optimized array index of__1 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->asJavaConstant->asInt->else->return->arg3->arg4->arg5->arg6->arg7->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfNode->b->addPush->return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__1#getSource()::: plugin_ d64 array index of node_optimized array index of__1 get source:::return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__2#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of node_optimized array index of__2 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->asJavaConstant->asInt->else->return->arg3->arg4->arg5->arg6->arg7->arg8->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfNode->b->addPush->return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__2#getSource()::: plugin_ d64 array index of node_optimized array index of__2 get source:::return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__3#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of node_optimized array index of__3 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->asJavaConstant->asInt->else->return->arg3->arg4->arg5->arg6->arg7->arg8->arg9->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfNode->b->addPush->return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__3#getSource()::: plugin_ d64 array index of node_optimized array index of__3 get source:::return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__4#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of node_optimized array index of__4 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->asJavaConstant->asInt->else->return->arg3->arg4->arg5->arg6->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfNode->b->addPush->return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__4#getSource()::: plugin_ d64 array index of node_optimized array index of__4 get source:::return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__5#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of node_optimized array index of__5 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->asJavaConstant->asInt->else->return->arg3->arg4->arg5->arg6->arg7->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfNode->b->addPush->return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__5#getSource()::: plugin_ d64 array index of node_optimized array index of__5 get source:::return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__6#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of node_optimized array index of__6 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->asJavaConstant->asInt->else->return->arg3->arg4->arg5->arg6->arg7->arg8->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfNode->b->addPush->return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__6#getSource()::: plugin_ d64 array index of node_optimized array index of__6 get source:::return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__7#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of node_optimized array index of__7 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->asJavaConstant->asInt->else->return->arg3->arg4->arg5->arg6->arg7->arg8->arg9->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfNode->b->addPush->return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__7#getSource()::: plugin_ d64 array index of node_optimized array index of__7 get source:::return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__8#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 array index of node_optimized array index of__8 execute:::arg0->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg2->if->isConstant->asJavaConstant->asInt->else->return->arg3->arg4->arg5->arg6->node->new->org.graalvm.compiler.replacements.amd64.AMD64ArrayIndexOfNode->b->addPush->return
Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__8#getSource()::: plugin_ d64 array index of node_optimized array index of__8 get source:::return
PluginFactory_AMD64ArrayIndexOfNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ d64 array index of node register plugins:::plugins->new->Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__0->register->plugins->new->Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__1->register->plugins->new->Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__2->register->plugins->new->Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__3->register->plugins->new->Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__4->register->plugins->new->Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__5->register->plugins->new->Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__6->register->plugins->new->Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__7->register->plugins->new->Plugin_AMD64ArrayIndexOfNode_optimizedArrayIndexOf__8->register
Plugin_AMD64StringLatin1InflateNode_inflate#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string latin1 inflate node_inflate execute:::arg0->arg1->arg2->arg3->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.replacements.amd64.AMD64StringLatin1InflateNode->b->add->return
Plugin_AMD64StringLatin1InflateNode_inflate#getSource()::: plugin_ d64 string latin1 inflate node_inflate get source:::return
PluginFactory_AMD64StringLatin1InflateNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ d64 string latin1 inflate node register plugins:::plugins->new->Plugin_AMD64StringLatin1InflateNode_inflate->register
Plugin_AMD64StringLatin1Substitutions_byteArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string latin1 substitutions_byte array base offset execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->byteArrayBaseOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringLatin1Substitutions_byteArrayBaseOffset#getSource()::: plugin_ d64 string latin1 substitutions_byte array base offset get source:::return
Plugin_AMD64StringLatin1Substitutions_byteArrayIndexScale#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string latin1 substitutions_byte array index scale execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->byteArrayIndexScale->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringLatin1Substitutions_byteArrayIndexScale#getSource()::: plugin_ d64 string latin1 substitutions_byte array index scale get source:::return
Plugin_AMD64StringLatin1Substitutions_charArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string latin1 substitutions_char array base offset execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->charArrayBaseOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringLatin1Substitutions_charArrayBaseOffset#getSource()::: plugin_ d64 string latin1 substitutions_char array base offset get source:::return
Plugin_AMD64StringLatin1Substitutions_charArrayIndexScale#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string latin1 substitutions_char array index scale execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->charArrayIndexScale->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringLatin1Substitutions_charArrayIndexScale#getSource()::: plugin_ d64 string latin1 substitutions_char array index scale get source:::return
PluginFactory_AMD64StringLatin1Substitutions#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ d64 string latin1 substitutions register plugins:::plugins->new->Plugin_AMD64StringLatin1Substitutions_byteArrayBaseOffset->register->plugins->new->Plugin_AMD64StringLatin1Substitutions_byteArrayIndexScale->register->plugins->new->Plugin_AMD64StringLatin1Substitutions_charArrayBaseOffset->register->plugins->new->Plugin_AMD64StringLatin1Substitutions_charArrayIndexScale->register
Plugin_AMD64StringSubstitutions_charArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string substitutions_char array base offset execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->charArrayBaseOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringSubstitutions_charArrayBaseOffset#getSource()::: plugin_ d64 string substitutions_char array base offset get source:::return
Plugin_AMD64StringSubstitutions_charArrayIndexScale#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string substitutions_char array index scale execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->charArrayIndexScale->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringSubstitutions_charArrayIndexScale#getSource()::: plugin_ d64 string substitutions_char array index scale get source:::return
PluginFactory_AMD64StringSubstitutions#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ d64 string substitutions register plugins:::plugins->new->Plugin_AMD64StringSubstitutions_charArrayBaseOffset->register->plugins->new->Plugin_AMD64StringSubstitutions_charArrayIndexScale->register
Plugin_AMD64StringUTF16CompressNode_compress#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string f16 compress node_compress execute:::arg0->arg1->arg2->arg3->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.replacements.amd64.AMD64StringUTF16CompressNode->b->addPush->return
Plugin_AMD64StringUTF16CompressNode_compress#getSource()::: plugin_ d64 string f16 compress node_compress get source:::return
PluginFactory_AMD64StringUTF16CompressNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ d64 string f16 compress node register plugins:::plugins->new->Plugin_AMD64StringUTF16CompressNode_compress->register
Plugin_AMD64StringUTF16Substitutions_byteArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string f16 substitutions_byte array base offset execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->byteArrayBaseOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringUTF16Substitutions_byteArrayBaseOffset#getSource()::: plugin_ d64 string f16 substitutions_byte array base offset get source:::return
Plugin_AMD64StringUTF16Substitutions_byteArrayIndexScale#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string f16 substitutions_byte array index scale execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->byteArrayIndexScale->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringUTF16Substitutions_byteArrayIndexScale#getSource()::: plugin_ d64 string f16 substitutions_byte array index scale get source:::return
Plugin_AMD64StringUTF16Substitutions_charArrayBaseOffset#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string f16 substitutions_char array base offset execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->charArrayBaseOffset->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringUTF16Substitutions_charArrayBaseOffset#getSource()::: plugin_ d64 string f16 substitutions_char array base offset get source:::return
Plugin_AMD64StringUTF16Substitutions_charArrayIndexScale#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 string f16 substitutions_char array index scale execute:::if->checkInjectedArgument->return->arg0->b->getMetaAccess->result->charArrayIndexScale->constant->JavaConstant->forInt->node->ConstantNode->b->getMetaAccess->b->getGraph->forConstant->b->push->b->notifyReplacedCall->return
Plugin_AMD64StringUTF16Substitutions_charArrayIndexScale#getSource()::: plugin_ d64 string f16 substitutions_char array index scale get source:::return
PluginFactory_AMD64StringUTF16Substitutions#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ d64 string f16 substitutions register plugins:::plugins->new->Plugin_AMD64StringUTF16Substitutions_byteArrayBaseOffset->register->plugins->new->Plugin_AMD64StringUTF16Substitutions_byteArrayIndexScale->register->plugins->new->Plugin_AMD64StringUTF16Substitutions_charArrayBaseOffset->register->plugins->new->Plugin_AMD64StringUTF16Substitutions_charArrayIndexScale->register
AMD64ArrayIndexOf#indexOfTwoConsecutiveBytes(byte[], int, int, byte, byte)::: d64 array index of index of two consecutive bytes:::searchValue->Byte->toUnsignedInt->Byte->toUnsignedInt->return->AMD64ArrayIndexOfDispatchNode->indexOf2ConsecutiveBytes
AMD64ArrayIndexOf#indexOfTwoConsecutiveChars(char[], int, int, char, char)::: d64 array index of index of two consecutive chars:::searchValue->return->AMD64ArrayIndexOfDispatchNode->indexOf2ConsecutiveChars
AMD64ArrayIndexOf#indexOfTwoConsecutiveChars(byte[], int, int, char, char)::: d64 array index of index of two consecutive chars:::searchValue->return->AMD64ArrayIndexOfDispatchNode->indexOf2ConsecutiveChars
AMD64ArrayIndexOf#indexOf1Byte(byte[], int, int, byte)::: d64 array index of index of1 byte:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf2Bytes(byte[], int, int, byte, byte)::: d64 array index of index of2 bytes:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf3Bytes(byte[], int, int, byte, byte, byte)::: d64 array index of index of3 bytes:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf4Bytes(byte[], int, int, byte, byte, byte, byte)::: d64 array index of index of4 bytes:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf1Char(char[], int, int, char)::: d64 array index of index of1 char:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf2Chars(char[], int, int, char, char)::: d64 array index of index of2 chars:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf3Chars(char[], int, int, char, char, char)::: d64 array index of index of3 chars:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf4Chars(char[], int, int, char, char, char, char)::: d64 array index of index of4 chars:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf1Char(byte[], int, int, char)::: d64 array index of index of1 char:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf2Chars(byte[], int, int, char, char)::: d64 array index of index of2 chars:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf3Chars(byte[], int, int, char, char, char)::: d64 array index of index of3 chars:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOf#indexOf4Chars(byte[], int, int, char, char, char, char)::: d64 array index of index of4 chars:::return->AMD64ArrayIndexOfDispatchNode->indexOf
AMD64ArrayIndexOfDispatchNode#isFindTwoConsecutive()::: d64 array index of dispatch node is find two consecutive:::return
AMD64ArrayIndexOfDispatchNode#getArrayPointer()::: d64 array index of dispatch node get array pointer:::return
AMD64ArrayIndexOfDispatchNode#getArrayLength()::: d64 array index of dispatch node get array length:::return
AMD64ArrayIndexOfDispatchNode#getFromIndex()::: d64 array index of dispatch node get from index:::return
AMD64ArrayIndexOfDispatchNode#getSearchValues()::: d64 array index of dispatch node get search values:::return
AMD64ArrayIndexOfDispatchNode#canDeoptimize()::: d64 array index of dispatch node can deoptimize:::return
AMD64ArrayIndexOfDispatchNode#setStateBefore(FrameState)::: d64 array index of dispatch node set state before:::updateUsages
AMD64ArrayIndexOfDispatchNode#stateBefore()::: d64 array index of dispatch node state before:::return
AMD64ArrayIndexOfDispatchNode#getStubCallDescriptor()::: d64 array index of dispatch node get stub call descriptor:::return
AMD64ArrayIndexOfDispatchNode#getNumberOfValues()::: d64 array index of dispatch node get number of values:::return->searchValues->size
AMD64ArrayIndexOfDispatchNode#getArrayKind()::: d64 array index of dispatch node get array kind:::return
AMD64ArrayIndexOfDispatchNode#getValueKind()::: d64 array index of dispatch node get value kind:::return
AMD64ArrayIndexOfDispatchNode#getComparisonKind()::: d64 array index of dispatch node get comparison kind:::return
AMD64ArrayIndexOfDispatchNode#getStubCallArgs()::: d64 array index of dispatch node get stub call args:::ret->searchValues->size->new->ValueNodeArr->for->i->searchValues->size->return
AMD64ArrayIndexOfDispatchNode#getLocationIdentity()::: d64 array index of dispatch node get location identity:::return->NamedLocationIdentity->getArrayLocation
AMD64ArrayIndexOfDispatchNode#lower(LoweringTool)::: d64 array index of dispatch node lower:::tool->getLowerer->lower
AMD64ArrayIndexOfDispatchNode#getLastLocationAccess()::: d64 array index of dispatch node get last location access:::return
AMD64ArrayIndexOfDispatchNode#setLastLocationAccess(MemoryNode)::: d64 array index of dispatch node set last location access:::ValueNodeUtil->asNode->ValueNodeUtil->asNode->updateUsages
AMD64ArrayIndexOfDispatchNode#optimizedArrayIndexOf(ForeignCallDescriptor, JavaKind, JavaKind, boolean, Object, int, int, byte)::: d64 array index of dispatch node optimized array index of:::
AMD64ArrayIndexOfDispatchNode#optimizedArrayIndexOf(ForeignCallDescriptor, JavaKind, JavaKind, boolean, Object, int, int, byte, byte)::: d64 array index of dispatch node optimized array index of:::
AMD64ArrayIndexOfDispatchNode#optimizedArrayIndexOf(ForeignCallDescriptor, JavaKind, JavaKind, boolean, Object, int, int, byte, byte, byte)::: d64 array index of dispatch node optimized array index of:::
AMD64ArrayIndexOfDispatchNode#optimizedArrayIndexOf(ForeignCallDescriptor, JavaKind, JavaKind, boolean, Object, int, int, byte, byte, byte, byte)::: d64 array index of dispatch node optimized array index of:::
AMD64ArrayIndexOfDispatchNode#optimizedArrayIndexOf(ForeignCallDescriptor, JavaKind, JavaKind, boolean, Object, int, int, char)::: d64 array index of dispatch node optimized array index of:::
AMD64ArrayIndexOfDispatchNode#optimizedArrayIndexOf(ForeignCallDescriptor, JavaKind, JavaKind, boolean, Object, int, int, char, char)::: d64 array index of dispatch node optimized array index of:::
AMD64ArrayIndexOfDispatchNode#optimizedArrayIndexOf(ForeignCallDescriptor, JavaKind, JavaKind, boolean, Object, int, int, char, char, char)::: d64 array index of dispatch node optimized array index of:::
AMD64ArrayIndexOfDispatchNode#optimizedArrayIndexOf(ForeignCallDescriptor, JavaKind, JavaKind, boolean, Object, int, int, char, char, char, char)::: d64 array index of dispatch node optimized array index of:::
AMD64ArrayIndexOfDispatchNode#optimizedArrayIndexOf(ForeignCallDescriptor, JavaKind, JavaKind, boolean, Object, int, int, int)::: d64 array index of dispatch node optimized array index of:::
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, byte[], int, int, byte)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, byte[], int, int, byte, byte)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, byte[], int, int, byte, byte, byte)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, byte[], int, int, byte, byte, byte, byte)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, byte[], int, int, char)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, byte[], int, int, char, char)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, byte[], int, int, char, char, char)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, byte[], int, int, char, char, char, char)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, char[], int, int, char)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, char[], int, int, char, char)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, char[], int, int, char, char, char)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf(ForeignCallDescriptor, char[], int, int, char, char, char, char)::: d64 array index of dispatch node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf2ConsecutiveBytes(ForeignCallDescriptor, byte[], int, int, int)::: d64 array index of dispatch node index of2 consecutive bytes:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf2ConsecutiveChars(ForeignCallDescriptor, byte[], int, int, int)::: d64 array index of dispatch node index of2 consecutive chars:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfDispatchNode#indexOf2ConsecutiveChars(ForeignCallDescriptor, char[], int, int, int)::: d64 array index of dispatch node index of2 consecutive chars:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#getLocationIdentity()::: d64 array index of node get location identity:::return->NamedLocationIdentity->getArrayLocation
AMD64ArrayIndexOfNode#generate(NodeLIRBuilderTool)::: d64 array index of node generate:::searchValueOperands->searchValues->size->new->ValueArr->for->i->searchValues->size->result->gen->getLIRGeneratorTool->gen->operand->gen->operand->gen->operand->emitArrayIndexOf->gen->setResult
AMD64ArrayIndexOfNode#getLastLocationAccess()::: d64 array index of node get last location access:::return
AMD64ArrayIndexOfNode#setLastLocationAccess(MemoryNode)::: d64 array index of node set last location access:::ValueNodeUtil->asNode->ValueNodeUtil->asNode->updateUsages
AMD64ArrayIndexOfNode#optimizedArrayIndexOf(JavaKind, JavaKind, boolean, Object, int, int, byte)::: d64 array index of node optimized array index of:::
AMD64ArrayIndexOfNode#optimizedArrayIndexOf(JavaKind, JavaKind, boolean, Object, int, int, byte, byte)::: d64 array index of node optimized array index of:::
AMD64ArrayIndexOfNode#optimizedArrayIndexOf(JavaKind, JavaKind, boolean, Object, int, int, byte, byte, byte)::: d64 array index of node optimized array index of:::
AMD64ArrayIndexOfNode#optimizedArrayIndexOf(JavaKind, JavaKind, boolean, Object, int, int, byte, byte, byte, byte)::: d64 array index of node optimized array index of:::
AMD64ArrayIndexOfNode#optimizedArrayIndexOf(JavaKind, JavaKind, boolean, Object, int, int, char)::: d64 array index of node optimized array index of:::
AMD64ArrayIndexOfNode#optimizedArrayIndexOf(JavaKind, JavaKind, boolean, Object, int, int, char, char)::: d64 array index of node optimized array index of:::
AMD64ArrayIndexOfNode#optimizedArrayIndexOf(JavaKind, JavaKind, boolean, Object, int, int, char, char, char)::: d64 array index of node optimized array index of:::
AMD64ArrayIndexOfNode#optimizedArrayIndexOf(JavaKind, JavaKind, boolean, Object, int, int, char, char, char, char)::: d64 array index of node optimized array index of:::
AMD64ArrayIndexOfNode#optimizedArrayIndexOf(JavaKind, JavaKind, boolean, Object, int, int, int)::: d64 array index of node optimized array index of:::
AMD64ArrayIndexOfNode#indexOf(byte[], int, int, byte)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(byte[], int, int, byte, byte)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(byte[], int, int, byte, byte, byte)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(byte[], int, int, byte, byte, byte, byte)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(byte[], int, int, char)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(byte[], int, int, char, char)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(byte[], int, int, char, char, char)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(byte[], int, int, char, char, char, char)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(char[], int, int, char)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(char[], int, int, char, char)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(char[], int, int, char, char, char)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf(char[], int, int, char, char, char, char)::: d64 array index of node index of:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf2ConsecutiveBytes(byte[], int, int, int)::: d64 array index of node index of2 consecutive bytes:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf2ConsecutiveChars(byte[], int, int, int)::: d64 array index of node index of2 consecutive chars:::return->optimizedArrayIndexOf
AMD64ArrayIndexOfNode#indexOf2ConsecutiveChars(char[], int, int, int)::: d64 array index of node index of2 consecutive chars:::return->optimizedArrayIndexOf
AMD64ConvertSnippets#f2i(float, int):::Converts a float to an int:::if->probability->if->Float->isNaN->return->else->if->return->return
AMD64ConvertSnippets#f2l(float, long):::Converts a float to a long:::if->probability->if->Float->isNaN->return->else->if->return->return
AMD64ConvertSnippets#d2i(double, int):::Converts a double to an int:::if->probability->if->Double->isNaN->return->else->if->return->return
AMD64ConvertSnippets#d2l(double, long):::Converts a double to a long:::if->probability->if->Double->isNaN->return->else->if->return->return
AMD64ConvertSnippets.Templates#lower(FloatConvertNode, LoweringTool)::: templates lower:::key->switch->convert->getFloatConvert->break->break->break->break->return->graph->convert->graph->args->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->convert->getValue->add->args->graph->convert->getFloatConvert->convert->getValue->new->AMD64FloatConvertNode->unique->add->template->template->convert->getDebug->convert->getFloatConvert->log->template->providers->getMetaAccess->instantiate->convert->safeDelete
AMD64CountLeadingZerosNode#foldStamp(Stamp)::: d64 count leading zeros node fold stamp:::return->getValue->computeStamp
AMD64CountLeadingZerosNode#computeStamp(Stamp, ValueNode)::: d64 count leading zeros node compute stamp:::return->StampTool->stampForLeadingZeros
AMD64CountLeadingZerosNode#tryFold(ValueNode)::: d64 count leading zeros node try fold:::if->value->isConstant->c->value->asJavaConstant->if->value->getStackKind->return->ConstantNode->Integer->c->asInt->numberOfLeadingZeros->forInt->else->return->ConstantNode->Long->c->asLong->numberOfLeadingZeros->forInt->return
AMD64CountLeadingZerosNode#canonical(CanonicalizerTool, ValueNode)::: d64 count leading zeros node canonical:::folded->tryFold->return
AMD64CountLeadingZerosNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: d64 count leading zeros node generate:::builder->builder->getValue->operand->emitCountLeadingZeros->setResult
AMD64CountTrailingZerosNode#foldStamp(Stamp)::: d64 count trailing zeros node fold stamp:::return->getValue->computeStamp
AMD64CountTrailingZerosNode#computeStamp(Stamp, ValueNode)::: d64 count trailing zeros node compute stamp:::valueStamp->return->StampTool->stampForTrailingZeros
AMD64CountTrailingZerosNode#tryFold(ValueNode)::: d64 count trailing zeros node try fold:::if->value->isConstant->c->value->asJavaConstant->if->value->getStackKind->return->ConstantNode->Integer->c->asInt->numberOfTrailingZeros->forInt->else->return->ConstantNode->Long->c->asLong->numberOfTrailingZeros->forInt->return
AMD64CountTrailingZerosNode#canonical(CanonicalizerTool, ValueNode)::: d64 count trailing zeros node canonical:::folded->tryFold->return
AMD64CountTrailingZerosNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: d64 count trailing zeros node generate:::builder->builder->getValue->operand->emitCountTrailingZeros->setResult
AMD64FloatConvertNode#canonical(CanonicalizerTool, ValueNode)::: d64 float convert node canonical:::return
AMD64FloatConvertNode#foldStamp(Stamp)::: d64 float convert node fold stamp:::foldedStamp->super->foldStamp->return->foldedStamp->createInexactCaseStamp->meet
AMD64FloatConvertNode#createInexactCaseStamp()::: d64 float convert node create inexact case stamp:::intStamp->inexactValue->intStamp->getBits->return->StampFactory->JavaConstant->intStamp->getBits->forPrimitiveInt->forConstant
AMD64FloatConvertNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: d64 float convert node generate:::nodeValueMap->gen->nodeValueMap->getValue->operand->emitFloatConvert->setResult
AMD64GraphBuilderPlugins#register(Plugins, BytecodeProvider, AMD64, boolean, boolean, boolean)::: d64 graph builder plugins register:::invocationPlugins->plugins->getInvocationPlugins->invocationPlugins->new->Runnable->defer
AMD64GraphBuilderPlugins#registerThreadPlugins(InvocationPlugins, AMD64)::: d64 graph builder plugins register thread plugins:::if->if->arch->getFeatures->contains->r->new->Registration->r->new->InvocationPlugin->register0
AMD64GraphBuilderPlugins#registerIntegerLongPlugins(InvocationPlugins, Class, JavaKind, AMD64, BytecodeProvider)::: d64 graph builder plugins register integer long plugins:::declaringClass->kind->toBoxedJavaClass->type->kind->toJavaClass->r->new->Registration->r->registerMethodSubstitution->if->arch->getFeatures->contains->arch->getFlags->contains->r->setAllowOverwrite->r->new->InvocationPlugin->register1->r->registerMethodSubstitution->if->arch->getFeatures->contains->arch->getFlags->contains->r->setAllowOverwrite->r->new->InvocationPlugin->register1->if->arch->getFeatures->contains->r->new->InvocationPlugin->register1
AMD64GraphBuilderPlugins#registerMathPlugins(InvocationPlugins, boolean, AMD64, BytecodeProvider)::: d64 graph builder plugins register math plugins:::r->new->Registration->registerUnaryMath->registerUnaryMath->registerUnaryMath->registerBinaryMath->registerUnaryMath->registerUnaryMath->registerUnaryMath->if->arch->getFeatures->contains->registerRound->registerRound->registerRound->if->arch->getFeatures->contains->registerFMA
AMD64GraphBuilderPlugins#registerFMA(Registration)::: d64 graph builder plugins register a:::r->new->InvocationPlugin->register3->r->new->InvocationPlugin->register3
AMD64GraphBuilderPlugins#registerUnaryMath(Registration, String, UnaryOperation)::: d64 graph builder plugins register unary math:::r->new->InvocationPlugin->register1
AMD64GraphBuilderPlugins#registerBinaryMath(Registration, String, BinaryOperation)::: d64 graph builder plugins register binary math:::r->new->InvocationPlugin->register2
AMD64GraphBuilderPlugins#registerRound(Registration, String, RoundingMode)::: d64 graph builder plugins register round:::r->new->InvocationPlugin->register1
AMD64GraphBuilderPlugins#registerStringPlugins(InvocationPlugins, BytecodeProvider)::: d64 graph builder plugins register string plugins:::if->r->new->Registration->r->setAllowOverwrite->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution
AMD64GraphBuilderPlugins#registerStringLatin1Plugins(InvocationPlugins, BytecodeProvider)::: d64 graph builder plugins register string latin1 plugins:::r->new->Registration->r->setAllowOverwrite->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution
AMD64GraphBuilderPlugins#registerStringUTF16Plugins(InvocationPlugins, BytecodeProvider)::: d64 graph builder plugins register string f16 plugins:::r->new->Registration->r->setAllowOverwrite->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution->r->registerMethodSubstitution
AMD64GraphBuilderPlugins#registerUnsafePlugins(InvocationPlugins, BytecodeProvider, boolean)::: d64 graph builder plugins register unsafe plugins:::new->Registration->new->JavaKindArr->registerUnsafePlugins->if->new->Registration->new->JavaKindArr->registerUnsafePlugins
AMD64GraphBuilderPlugins#registerUnsafePlugins(Registration, boolean, JavaKind[])::: d64 graph builder plugins register unsafe plugins:::foreach->javaClass->kind->toJavaClass->r->kind->name->new->UnsafeAccessPlugin->register4->if->kind->isNumericInteger->r->kind->name->new->UnsafeAccessPlugin->register4->foreach->new->JavaKindArr->javaClass->kind->toJavaClass->r->kind->name->new->UnsafeGetPlugin->registerOptional3->r->kind->name->new->UnsafePutPlugin->registerOptional4
AMD64GraphBuilderPlugins#registerArraysEqualsPlugins(InvocationPlugins, BytecodeProvider)::: d64 graph builder plugins register arrays equals plugins:::r->new->Registration->r->registerMethodSubstitution->r->registerMethodSubstitution
AMD64RoundNode#round(RoundingMode, double)::: d64 round node round:::switch->return->Math->floor->return->Math->rint->return->Math->ceil->return->throw->GraalError->unimplemented
AMD64RoundNode#roundStamp(FloatStamp, RoundingMode)::: d64 round node round stamp:::min->stamp->lowerBound->Math->round->min->max->stamp->upperBound->Math->round->max->return->stamp->getBits->stamp->isNonNaN->new->FloatStamp
AMD64RoundNode#foldStamp(Stamp)::: d64 round node fold stamp:::return->roundStamp
AMD64RoundNode#tryFold(ValueNode)::: d64 round node try fold:::if->input->isConstant->c->input->asJavaConstant->if->c->getJavaKind->return->ConstantNode->c->asDouble->round->forDouble->else->if->c->getJavaKind->return->ConstantNode->c->asFloat->round->forFloat->return
AMD64RoundNode#canonical(CanonicalizerTool, ValueNode)::: d64 round node canonical:::folded->tryFold->return
AMD64RoundNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: d64 round node generate:::builder->builder->getValue->operand->emitRound->setResult
AMD64StringLatin1InflateNode#getLocationIdentity()::: d64 string latin1 inflate node get location identity:::return->NamedLocationIdentity->getArrayLocation
AMD64StringLatin1InflateNode#getLocationIdentities()::: d64 string latin1 inflate node get location identities:::return->new->LocationIdentityArr->NamedLocationIdentity->getArrayLocation
AMD64StringLatin1InflateNode#generate(NodeLIRBuilderTool)::: d64 string latin1 inflate node generate:::lgt->gen->getLIRGeneratorTool->lgt->gen->operand->gen->operand->gen->operand->emitStringLatin1Inflate
AMD64StringLatin1InflateNode#getLastLocationAccess()::: d64 string latin1 inflate node get last location access:::return
AMD64StringLatin1InflateNode#setLastLocationAccess(MemoryNode)::: d64 string latin1 inflate node set last location access:::ValueNodeUtil->asNode->ValueNodeUtil->asNode->updateUsages
AMD64StringLatin1InflateNode#inflate(Pointer, Pointer, int, JavaKind)::: d64 string latin1 inflate node inflate:::
AMD64StringLatin1Substitutions#byteArrayBaseOffset(MetaAccessProvider)::: d64 string latin1 substitutions byte array base offset:::return->metaAccess->getArrayBaseOffset
AMD64StringLatin1Substitutions#byteArrayIndexScale(MetaAccessProvider)::: d64 string latin1 substitutions byte array index scale:::return->metaAccess->getArrayIndexScale
AMD64StringLatin1Substitutions#charArrayBaseOffset(MetaAccessProvider)::: d64 string latin1 substitutions char array base offset:::return->metaAccess->getArrayBaseOffset
AMD64StringLatin1Substitutions#charArrayIndexScale(MetaAccessProvider)::: d64 string latin1 substitutions char array index scale:::return->metaAccess->getArrayIndexScale
AMD64StringLatin1Substitutions#compareTo(byte[], byte[])::: d64 string latin1 substitutions compare to:::return->ArrayCompareToNode->compareTo
AMD64StringLatin1Substitutions#compareToUTF16(byte[], byte[])::: d64 string latin1 substitutions compare to f16:::return->ArrayCompareToNode->compareTo
AMD64StringLatin1Substitutions#pointer(byte[])::: d64 string latin1 substitutions pointer:::return->Word->objectToTrackedPointer->byteArrayBaseOffset->add
AMD64StringLatin1Substitutions#byteOffsetPointer(byte[], int)::: d64 string latin1 substitutions byte offset pointer:::return->pointer->byteArrayIndexScale->add
AMD64StringLatin1Substitutions#indexOf(byte[], int, int)::: d64 string latin1 substitutions index of:::fromIndex->if->return->length->if->else->if->return->return->AMD64ArrayIndexOf->indexOf1Byte
AMD64StringLatin1Substitutions#indexOf(byte[], int, byte[], int, int)::: d64 string latin1 substitutions index of:::fromIndex->if->return->if->if->return->if->return->if->return->AMD64ArrayIndexOf->indexOf1Byte->else->if->return->AMD64ArrayIndexOf->indexOfTwoConsecutiveBytes->else->haystackLength->offset->while->indexOfResult->AMD64ArrayIndexOf->indexOfTwoConsecutiveBytes->if->return->cmpSourcePointer->byteOffsetPointer->targetPointer->pointer->if->ArrayRegionEqualsNode->regionEquals->return->return
AMD64StringLatin1Substitutions#inflate(byte[], int, char[], int, int):::Intrinsic for java.lang.StringLatin1.inflate([BI[CII)V:::if->DeoptimizeNode->deopt->srcPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->destPointer->Word->objectToTrackedPointer->charArrayBaseOffset->add->charArrayIndexScale->add->AMD64StringLatin1InflateNode->inflate
AMD64StringLatin1Substitutions#inflate(byte[], int, byte[], int, int):::Intrinsic for java.lang.StringLatin1.inflate([BI[BII)V}:::if->DeoptimizeNode->deopt->srcPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->destPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->AMD64StringLatin1InflateNode->inflate
AMD64StringSubstitutions#charArrayBaseOffset(MetaAccessProvider)::: d64 string substitutions char array base offset:::return->metaAccess->getArrayBaseOffset
AMD64StringSubstitutions#charArrayIndexScale(MetaAccessProvider)::: d64 string substitutions char array index scale:::return->metaAccess->getArrayIndexScale
AMD64StringSubstitutions#indexOf(char[], int, int, char[], int, int, int)::: d64 string substitutions index of:::fromIndex->if->return->if->if->return->totalOffset->if->return->if->return->AMD64ArrayIndexOf->indexOf1Char->else->if->return->AMD64ArrayIndexOf->indexOfTwoConsecutiveChars->else->haystackLength->while->indexOfResult->AMD64ArrayIndexOf->indexOfTwoConsecutiveChars->if->return->cmpSourcePointer->Word->objectToTrackedPointer->charArrayBaseOffset->add->charArrayIndexScale->add->targetPointer->Word->objectToTrackedPointer->charArrayBaseOffset->add->charArrayIndexScale->add->if->ArrayRegionEqualsNode->regionEquals->return->return
AMD64StringSubstitutions#indexOf(String, int, int)::: d64 string substitutions index of:::fromIndex->sourceCount->source->length->if->return->if->if->sourceArray->StringSubstitutions->getValue->return->AMD64ArrayIndexOf->indexOf1Char->else->return->indexOf
AMD64StringSubstitutions#compareTo(String, String)::: d64 string substitutions compare to:::if->return->value->StringSubstitutions->getValue->other->StringSubstitutions->getValue->return->ArrayCompareToNode->compareTo
AMD64StringUTF16CompressNode#getLocationIdentity()::: d64 string f16 compress node get location identity:::return->NamedLocationIdentity->getArrayLocation
AMD64StringUTF16CompressNode#getLocationIdentities()::: d64 string f16 compress node get location identities:::return->new->LocationIdentityArr->NamedLocationIdentity->getArrayLocation
AMD64StringUTF16CompressNode#generate(NodeLIRBuilderTool)::: d64 string f16 compress node generate:::lgt->gen->getLIRGeneratorTool->res->lgt->gen->operand->gen->operand->gen->operand->emitStringUTF16Compress->gen->setResult
AMD64StringUTF16CompressNode#getLastLocationAccess()::: d64 string f16 compress node get last location access:::return
AMD64StringUTF16CompressNode#setLastLocationAccess(MemoryNode)::: d64 string f16 compress node set last location access:::ValueNodeUtil->asNode->ValueNodeUtil->asNode->updateUsages
AMD64StringUTF16CompressNode#compress(Pointer, Pointer, int, JavaKind)::: d64 string f16 compress node compress:::
AMD64StringUTF16Substitutions#byteArrayBaseOffset(MetaAccessProvider)::: d64 string f16 substitutions byte array base offset:::return->metaAccess->getArrayBaseOffset
AMD64StringUTF16Substitutions#byteArrayIndexScale(MetaAccessProvider)::: d64 string f16 substitutions byte array index scale:::return->metaAccess->getArrayIndexScale
AMD64StringUTF16Substitutions#charArrayBaseOffset(MetaAccessProvider)::: d64 string f16 substitutions char array base offset:::return->metaAccess->getArrayBaseOffset
AMD64StringUTF16Substitutions#charArrayIndexScale(MetaAccessProvider)::: d64 string f16 substitutions char array index scale:::return->metaAccess->getArrayIndexScale
AMD64StringUTF16Substitutions#length(byte[])::: d64 string f16 substitutions length:::return
AMD64StringUTF16Substitutions#compareTo(byte[], byte[])::: d64 string f16 substitutions compare to:::return->ArrayCompareToNode->compareTo
AMD64StringUTF16Substitutions#compareToLatin1(byte[], byte[])::: d64 string f16 substitutions compare to latin1:::return->ArrayCompareToNode->compareTo
AMD64StringUTF16Substitutions#indexOfCharUnsafe(byte[], int, int, int)::: d64 string f16 substitutions index of char unsafe:::return->AMD64ArrayIndexOf->indexOf1Char
AMD64StringUTF16Substitutions#pointer(byte[])::: d64 string f16 substitutions pointer:::return->Word->objectToTrackedPointer->byteArrayBaseOffset->add
AMD64StringUTF16Substitutions#charOffsetPointer(byte[], int)::: d64 string f16 substitutions char offset pointer:::return->pointer->charArrayIndexScale->add
AMD64StringUTF16Substitutions#indexOfUnsafe(byte[], int, byte[], int, int)::: d64 string f16 substitutions index of unsafe:::ReplacementsUtil->runtimeAssert->ReplacementsUtil->runtimeAssert->ReplacementsUtil->length->runtimeAssert->ReplacementsUtil->runtimeAssert->if->return->AMD64ArrayIndexOf->StringUTF16Substitutions->getChar->indexOf1Char->else->if->return->AMD64ArrayIndexOf->StringUTF16Substitutions->getChar->StringUTF16Substitutions->getChar->indexOfTwoConsecutiveChars->else->haystackLength->offset->while->indexOfResult->AMD64ArrayIndexOf->StringUTF16Substitutions->getChar->StringUTF16Substitutions->getChar->indexOfTwoConsecutiveChars->if->return->cmpSourcePointer->charOffsetPointer->targetPointer->pointer->if->ArrayRegionEqualsNode->regionEquals->return->return
AMD64StringUTF16Substitutions#indexOfLatin1Unsafe(byte[], int, byte[], int, int)::: d64 string f16 substitutions index of latin1 unsafe:::ReplacementsUtil->runtimeAssert->ReplacementsUtil->runtimeAssert->ReplacementsUtil->runtimeAssert->ReplacementsUtil->runtimeAssert->if->return->AMD64ArrayIndexOf->Byte->toUnsignedInt->indexOf1Char->else->if->return->AMD64ArrayIndexOf->Byte->toUnsignedInt->Byte->toUnsignedInt->indexOfTwoConsecutiveChars->else->haystackLength->offset->while->indexOfResult->AMD64ArrayIndexOf->Byte->toUnsignedInt->Byte->toUnsignedInt->indexOfTwoConsecutiveChars->if->return->cmpSourcePointer->charOffsetPointer->targetPointer->pointer->if->ArrayRegionEqualsNode->regionEquals->return->return
AMD64StringUTF16Substitutions#compress(char[], int, byte[], int, int):::Intrinsic for java.lang.StringUTF16.compress([CI[BII)I:::if->DeoptimizeNode->deopt->srcPointer->Word->objectToTrackedPointer->charArrayBaseOffset->add->charArrayIndexScale->add->destPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->return->AMD64StringUTF16CompressNode->compress
AMD64StringUTF16Substitutions#compress(byte[], int, byte[], int, int):::Intrinsic for java.lang.StringUTF16.compress([BI[BII)I}:::if->DeoptimizeNode->deopt->srcPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->destPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->return->AMD64StringUTF16CompressNode->compress

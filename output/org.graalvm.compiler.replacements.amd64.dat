AMD64ConvertSnippets#f2i(float, int):::Converts a float to an int:::if->probability->if->Float->isNaN->return->else->if->return->return
AMD64ConvertSnippets#f2l(float, long):::Converts a float to a long:::if->probability->if->Float->isNaN->return->else->if->return->return
AMD64ConvertSnippets#d2i(double, int):::Converts a double to an int:::if->probability->if->Double->isNaN->return->else->if->return->return
AMD64ConvertSnippets#d2l(double, long):::Converts a double to a long:::if->probability->if->Double->isNaN->return->else->if->return->return
AMD64StringLatin1Substitutions#inflate(byte[], int, char[], int, int):::Intrinsic for java.lang.StringLatin1.inflate([BI[CII)V:::if->DeoptimizeNode->deopt->srcPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->destPointer->Word->objectToTrackedPointer->charArrayBaseOffset->add->charArrayIndexScale->add->AMD64StringLatin1InflateNode->inflate
AMD64StringLatin1Substitutions#inflate(byte[], int, byte[], int, int):::Intrinsic for java.lang.StringLatin1.inflate([BI[BII)V}:::if->DeoptimizeNode->deopt->srcPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->destPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->AMD64StringLatin1InflateNode->inflate
AMD64StringUTF16Substitutions#compress(char[], int, byte[], int, int):::Intrinsic for java.lang.StringUTF16.compress([CI[BII)I:::if->DeoptimizeNode->deopt->srcPointer->Word->objectToTrackedPointer->charArrayBaseOffset->add->charArrayIndexScale->add->destPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->return->AMD64StringUTF16CompressNode->compress
AMD64StringUTF16Substitutions#compress(byte[], int, byte[], int, int):::Intrinsic for java.lang.StringUTF16.compress([BI[BII)I}:::if->DeoptimizeNode->deopt->srcPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->destPointer->Word->objectToTrackedPointer->byteArrayBaseOffset->add->byteArrayIndexScale->add->return->AMD64StringUTF16CompressNode->compress

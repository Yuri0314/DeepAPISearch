Diagnostic#getKind():::Returns the kind of this diagnostic, for example, error or warning.:::
Diagnostic#getSource():::Returns the source object associated with this diagnostic.:::
Diagnostic#getPosition():::Returns a character offset from the beginning of the source object associated with this diagnostic that indicates the location of the problem:::
Diagnostic#getStartPosition():::Returns the character offset from the beginning of the file associated with this diagnostic that indicates the start of the problem.:::
Diagnostic#getEndPosition():::Returns the character offset from the beginning of the file associated with this diagnostic that indicates the end of the problem.:::
Diagnostic#getLineNumber():::Returns the line number of the character offset returned by #getPosition().:::
Diagnostic#getColumnNumber():::Returns the column number of the character offset returned by #getPosition().:::
Diagnostic#getCode():::Returns a diagnostic code indicating the type of diagnostic:::
Diagnostic#getMessage(Locale):::Returns a localized message for the given locale:::
DiagnosticCollector#report(Diagnostic)::: diagnostic collector report:::Objects->requireNonNull->diagnostics->add
DiagnosticCollector#getDiagnostics():::Returns a list view of diagnostics collected by this object.:::return->Collections->unmodifiableList
DiagnosticListener#report(Diagnostic):::Invoked when a problem is found.:::
DocumentationTool#getTask(Writer, JavaFileManager, DiagnosticListener, Class, Iterable, Iterable):::Creates a future for a documentation task with the given components and arguments:::
DocumentationTool#getStandardFileManager(DiagnosticListener, Locale, Charset):::Returns a new instance of the standard file manager implementation for this tool:::
DocumentationTool.DocumentationTask#addModules(Iterable):::Adds root modules to be taken into account during module resolution:::
DocumentationTool.DocumentationTask#setLocale(Locale):::Sets the locale to be applied when formatting diagnostics and other localized data.:::
DocumentationTool.DocumentationTask#call():::Performs this documentation task:::
FileObject#toUri():::Returns a URI identifying this file object.:::
FileObject#getName():::Returns a user-friendly name for this file object:::
FileObject#openInputStream():::Returns an InputStream for this file object.:::
FileObject#openOutputStream():::Returns an OutputStream for this file object.:::
FileObject#openReader(boolean):::Returns a reader for this object:::
FileObject#getCharContent(boolean):::Returns the character content of this file object, if available:::
FileObject#openWriter():::Returns a Writer for this file object.:::
FileObject#getLastModified():::Returns the time this file object was last modified:::
FileObject#delete():::Deletes this file object:::
ForwardingFileObject#toUri()::: forwarding file object to uri:::return->fileObject->toUri
ForwardingFileObject#getName()::: forwarding file object get name:::return->fileObject->getName
ForwardingFileObject#openInputStream()::: forwarding file object open input stream:::return->fileObject->openInputStream
ForwardingFileObject#openOutputStream()::: forwarding file object open output stream:::return->fileObject->openOutputStream
ForwardingFileObject#openReader(boolean)::: forwarding file object open reader:::return->fileObject->openReader
ForwardingFileObject#getCharContent(boolean)::: forwarding file object get char content:::return->fileObject->getCharContent
ForwardingFileObject#openWriter()::: forwarding file object open writer:::return->fileObject->openWriter
ForwardingFileObject#getLastModified()::: forwarding file object get last modified:::return->fileObject->getLastModified
ForwardingFileObject#delete()::: forwarding file object delete:::return->fileObject->delete
ForwardingJavaFileManager#getClassLoader(Location)::: forwarding java file manager get class loader:::return->fileManager->getClassLoader
ForwardingJavaFileManager#list(Location, String, Set, boolean)::: forwarding java file manager list:::return->fileManager->list
ForwardingJavaFileManager#inferBinaryName(Location, JavaFileObject)::: forwarding java file manager infer binary name:::return->fileManager->inferBinaryName
ForwardingJavaFileManager#isSameFile(FileObject, FileObject)::: forwarding java file manager is same file:::return->fileManager->isSameFile
ForwardingJavaFileManager#handleOption(String, Iterator)::: forwarding java file manager handle option:::return->fileManager->handleOption
ForwardingJavaFileManager#hasLocation(Location)::: forwarding java file manager has location:::return->fileManager->hasLocation
ForwardingJavaFileManager#isSupportedOption(String)::: forwarding java file manager is supported option:::return->fileManager->isSupportedOption
ForwardingJavaFileManager#getJavaFileForInput(Location, String, Kind)::: forwarding java file manager get java file for input:::return->fileManager->getJavaFileForInput
ForwardingJavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)::: forwarding java file manager get java file for output:::return->fileManager->getJavaFileForOutput
ForwardingJavaFileManager#getFileForInput(Location, String, String)::: forwarding java file manager get file for input:::return->fileManager->getFileForInput
ForwardingJavaFileManager#getFileForOutput(Location, String, String, FileObject)::: forwarding java file manager get file for output:::return->fileManager->getFileForOutput
ForwardingJavaFileManager#flush()::: forwarding java file manager flush:::fileManager->flush
ForwardingJavaFileManager#close()::: forwarding java file manager close:::fileManager->close
ForwardingJavaFileManager#getLocationForModule(Location, String)::: forwarding java file manager get location for module:::return->fileManager->getLocationForModule
ForwardingJavaFileManager#getLocationForModule(Location, JavaFileObject)::: forwarding java file manager get location for module:::return->fileManager->getLocationForModule
ForwardingJavaFileManager#getServiceLoader(Location, Class)::: forwarding java file manager get service loader:::return->fileManager->getServiceLoader
ForwardingJavaFileManager#inferModuleName(Location)::: forwarding java file manager infer module name:::return->fileManager->inferModuleName
ForwardingJavaFileManager#listLocationsForModules(Location)::: forwarding java file manager list locations for modules:::return->fileManager->listLocationsForModules
ForwardingJavaFileManager#contains(Location, FileObject)::: forwarding java file manager contains:::return->fileManager->contains
ForwardingJavaFileObject#getKind()::: forwarding java file object get kind:::return->fileObject->getKind
ForwardingJavaFileObject#isNameCompatible(String, Kind)::: forwarding java file object is name compatible:::return->fileObject->isNameCompatible
ForwardingJavaFileObject#getNestingKind()::: forwarding java file object get nesting kind:::return->fileObject->getNestingKind
ForwardingJavaFileObject#getAccessLevel()::: forwarding java file object get access level:::return->fileObject->getAccessLevel
JavaCompiler#getTask(Writer, JavaFileManager, DiagnosticListener, Iterable, Iterable, Iterable):::Creates a future for a compilation task with the given components and arguments:::
JavaCompiler#getStandardFileManager(DiagnosticListener, Locale, Charset):::Returns a new instance of the standard file manager implementation for this tool:::
JavaCompiler.CompilationTask#addModules(Iterable):::Adds root modules to be taken into account during module resolution:::
JavaCompiler.CompilationTask#setProcessors(Iterable):::Sets processors (for annotation processing):::
JavaCompiler.CompilationTask#setLocale(Locale):::Sets the locale to be applied when formatting diagnostics and other localized data.:::
JavaCompiler.CompilationTask#call():::Performs this compilation task:::
JavaFileManager.Location#getName():::Returns the name of this location.:::
JavaFileManager.Location#isOutputLocation():::Determines if this is an output location:::
JavaFileManager.Location#isModuleOrientedLocation():::Indicates if this location is module-oriented location, and therefore expected to contain classes in a module/package/class hierarchy, as compared to a package-oriented location, which is expected to contain classes in a package/class hierarchy:::return->getName->matches
JavaFileManager#getClassLoader(Location):::Returns a class loader for loading plug-ins from the given package-oriented location:::
JavaFileManager#list(Location, String, Set, boolean):::Lists all file objects matching the given criteria in the given package-oriented location:::
JavaFileManager#inferBinaryName(Location, JavaFileObject):::Infers a binary name of a file object based on a package-oriented location:::
JavaFileManager#isSameFile(FileObject, FileObject):::Compares two file objects and return true if they represent the same underlying object.:::
JavaFileManager#handleOption(String, Iterator):::Handles one option:::
JavaFileManager#hasLocation(Location):::Determines if a location is known to this file manager.:::
JavaFileManager#getJavaFileForInput(Location, String, Kind):::Returns a JavaFileObject file object for input representing the specified class of the specified kind in the given package-oriented location.:::
JavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject):::Returns a JavaFileObject file object for output representing the specified class of the specified kind in the given package-oriented location:::
JavaFileManager#getFileForInput(Location, String, String):::Returns a FileObject file object for input representing the specified relative name in the specified package in the given package-oriented location:::
JavaFileManager#getFileForOutput(Location, String, String, FileObject):::Returns a FileObject file object for output representing the specified relative name in the specified package in the given location:::
JavaFileManager#flush():::Flushes any resources opened for output by this file manager directly or indirectly:::
JavaFileManager#close():::Releases any resources opened by this file manager directly or indirectly:::
JavaFileManager#getLocationForModule(Location, String)::: java file manager get location for module:::throw->new->UnsupportedOperationException
JavaFileManager#getLocationForModule(Location, JavaFileObject):::Gets a location for the module containing a specific file to be found within a location, which may be either a module-oriented location or an output location:::throw->new->UnsupportedOperationException
JavaFileManager#getServiceLoader(Location, Class)::: java file manager get service loader:::throw->new->UnsupportedOperationException
JavaFileManager#inferModuleName(Location)::: java file manager infer module name:::throw->new->UnsupportedOperationException
JavaFileManager#listLocationsForModules(Location)::: java file manager list locations for modules:::throw->new->UnsupportedOperationException
JavaFileManager#contains(Location, FileObject)::: java file manager contains:::throw->new->UnsupportedOperationException
JavaFileObject#getKind():::Returns the kind of this file object.:::
JavaFileObject#isNameCompatible(String, Kind):::Checks if this file object is compatible with the specified simple name and kind:::
JavaFileObject#getNestingKind():::Provides a hint about the nesting level of the class represented by this file object:::
JavaFileObject#getAccessLevel():::Provides a hint about the access level of the class represented by this file object:::
OptionChecker#isSupportedOption(String):::Determines if the given option is supported and if so, the number of arguments the option takes.:::
SimpleJavaFileObject#toUri()::: simple java file object to uri:::return
SimpleJavaFileObject#getName()::: simple java file object get name:::return->toUri->getPath
SimpleJavaFileObject#openInputStream():::This implementation always throws UnsupportedOperationException:::throw->new->UnsupportedOperationException
SimpleJavaFileObject#openOutputStream():::This implementation always throws UnsupportedOperationException:::throw->new->UnsupportedOperationException
SimpleJavaFileObject#openReader(boolean):::Wraps the result of #getCharContent in a Reader:::charContent->getCharContent->if->throw->new->UnsupportedOperationException->if->buffer->if->buffer->hasArray->return->buffer->array->new->CharArrayReader->return->charContent->toString->new->StringReader
SimpleJavaFileObject#getCharContent(boolean):::This implementation always throws UnsupportedOperationException:::throw->new->UnsupportedOperationException
SimpleJavaFileObject#openWriter():::Wraps the result of openOutputStream in a Writer:::return->openOutputStream->new->OutputStreamWriter
SimpleJavaFileObject#getLastModified():::This implementation returns 0L:::return
SimpleJavaFileObject#delete():::This implementation does nothing:::return
SimpleJavaFileObject#getKind()::: simple java file object get kind:::return
SimpleJavaFileObject#isNameCompatible(String, Kind):::This implementation compares the path of its URI to the given simple name:::baseName->return->kind->getKind->equals->baseName->toUri->getPath->equals->toUri->getPath->endsWith
SimpleJavaFileObject#getNestingKind():::This implementation returns null:::return
SimpleJavaFileObject#getAccessLevel():::This implementation returns null:::return
SimpleJavaFileObject#toString()::: simple java file object to string:::return->getClass->getName->toUri
StandardJavaFileManager#isSameFile(FileObject, FileObject):::Compares two file objects and return true if they represent the same canonical file, zip file entry, or entry in any file system based container.:::
StandardJavaFileManager#getJavaFileObjectsFromFiles(Iterable):::Returns file objects representing the given files.:::
StandardJavaFileManager#getJavaFileObjectsFromPaths(Iterable):::Returns file objects representing the given paths.:::return->asFiles->getJavaFileObjectsFromFiles
StandardJavaFileManager#getJavaFileObjects(File...):::Returns file objects representing the given files:::
StandardJavaFileManager#getJavaFileObjects(Path...):::Returns file objects representing the given paths:::return->Arrays->asList->getJavaFileObjectsFromPaths
StandardJavaFileManager#getJavaFileObjectsFromStrings(Iterable):::Returns file objects representing the given file names.:::
StandardJavaFileManager#getJavaFileObjects(String...):::Returns file objects representing the given file names:::
StandardJavaFileManager#setLocation(Location, Iterable):::Associates the given search path with the given location:::
StandardJavaFileManager#setLocationFromPaths(Location, Collection):::Associates the given search path with the given location:::asFiles->setLocation
StandardJavaFileManager#setLocationForModule(Location, String, Collection):::Associates the given search path with the given module and location, which must be a module-oriented or output location:::throw->new->UnsupportedOperationException
StandardJavaFileManager#getLocation(Location):::Returns the search path associated with the given location.:::
StandardJavaFileManager#getLocationAsPaths(Location):::Returns the search path associated with the given location.:::return->getLocation->asPaths
StandardJavaFileManager#asPath(FileObject):::Returns the path, if any, underlying this file object (optional operation):::throw->new->UnsupportedOperationException
StandardJavaFileManager.PathFactory#getPath(String, String...):::Converts a path string, or a sequence of strings that when joined form a path string, to a Path.:::
StandardJavaFileManager#setPathFactory(PathFactory):::Specify a factory that can be used to generate a path from a string, or series of strings:::
StandardJavaFileManager#asPaths(Iterable)::: standard java file manager as paths:::return->new->Iterator<Path>
StandardJavaFileManager#asFiles(Iterable)::: standard java file manager as files:::return->new->Iterator<File>
Tool#name():::Returns the name of this tool, or an empty string if no name is provided.:::return
Tool#run(InputStream, OutputStream, OutputStream, String...):::Run the tool with the given I/O channels and arguments:::
Tool#getSourceVersions():::Returns the source versions of the Java™ programming language supported by this tool.:::
ToolProvider#getSystemJavaCompiler():::Returns the Java™ programming language compiler provided with this platform:::return->getSystemTool
ToolProvider#getSystemDocumentationTool():::Returns the Java™ programming language documentation tool provided with this platform:::return->getSystemTool
ToolProvider#getSystemToolClassLoader():::Returns a class loader that may be used to load system tools, or null if no such special loader is provided.:::return
ToolProvider#getSystemTool(Class, String, String):::Get an instance of a system tool using the service loader.:::try->sl->ServiceLoader->ClassLoader->getSystemClassLoader->load->for->iter->sl->iterator->iter->hasNext->catch->throw->new->Error->finally->return
ToolProvider#matches(T, String):::Determine if this is the desired tool instance.:::pa->toolModule->tool->getClass->getModule->toolModuleName->toolModule->getName->return->toolModuleName->equals->return->AccessController->doPrivileged

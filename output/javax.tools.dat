javax.tools.Diagnostic#getKind()->Kind:::Returns the kind of this diagnostic, for example, error or warning.
javax.tools.Diagnostic#getSource()->S:::Returns the source object associated with this diagnostic.
javax.tools.Diagnostic#getPosition()->long:::Returns a character offset from the beginning of the source object associated with this diagnostic that indicates the location of the problem
javax.tools.Diagnostic#getStartPosition()->long:::Returns the character offset from the beginning of the file associated with this diagnostic that indicates the start of the problem.
javax.tools.Diagnostic#getEndPosition()->long:::Returns the character offset from the beginning of the file associated with this diagnostic that indicates the end of the problem.
javax.tools.Diagnostic#getLineNumber()->long:::Returns the line number of the character offset returned by #getPosition().
javax.tools.Diagnostic#getColumnNumber()->long:::Returns the column number of the character offset returned by #getPosition().
javax.tools.Diagnostic#getCode()->String:::Returns a diagnostic code indicating the type of diagnostic
javax.tools.Diagnostic#getMessage(Locale)->String:::Returns a localized message for the given locale
javax.tools.DiagnosticCollector#report(Diagnostic)->void::: diagnostic collector report
javax.tools.DiagnosticCollector#getDiagnostics()->List>:::Returns a list view of diagnostics collected by this object.
javax.tools.DiagnosticListener#report(Diagnostic)->void:::Invoked when a problem is found.
javax.tools.DocumentationTool#getTask(Writer, JavaFileManager, DiagnosticListener, Class, Iterable, Iterable)->DocumentationTask:::Creates a future for a documentation task with the given components and arguments
javax.tools.DocumentationTool#getStandardFileManager(DiagnosticListener, Locale, Charset)->StandardJavaFileManager:::Returns a new instance of the standard file manager implementation for this tool
javax.tools.DocumentationTool.DocumentationTask#addModules(Iterable)->void:::Adds root modules to be taken into account during module resolution
javax.tools.DocumentationTool.DocumentationTask#setLocale(Locale)->void:::Sets the locale to be applied when formatting diagnostics and other localized data.
javax.tools.DocumentationTool.DocumentationTask#call()->Boolean:::Performs this documentation task
javax.tools.FileObject#toUri()->URI:::Returns a URI identifying this file object.
javax.tools.FileObject#getName()->String:::Returns a user-friendly name for this file object
javax.tools.FileObject#openInputStream()->InputStream:::Returns an InputStream for this file object.
javax.tools.FileObject#openOutputStream()->OutputStream:::Returns an OutputStream for this file object.
javax.tools.FileObject#openReader(boolean)->Reader:::Returns a reader for this object
javax.tools.FileObject#getCharContent(boolean)->CharSequence:::Returns the character content of this file object, if available
javax.tools.FileObject#openWriter()->Writer:::Returns a Writer for this file object.
javax.tools.FileObject#getLastModified()->long:::Returns the time this file object was last modified
javax.tools.FileObject#delete()->boolean:::Deletes this file object
javax.tools.ForwardingFileObject#toUri()->URI::: forwarding file object to uri
javax.tools.ForwardingFileObject#getName()->String::: forwarding file object get name
javax.tools.ForwardingFileObject#openInputStream()->InputStream::: forwarding file object open input stream
javax.tools.ForwardingFileObject#openOutputStream()->OutputStream::: forwarding file object open output stream
javax.tools.ForwardingFileObject#openReader(boolean)->Reader::: forwarding file object open reader
javax.tools.ForwardingFileObject#getCharContent(boolean)->CharSequence::: forwarding file object get char content
javax.tools.ForwardingFileObject#openWriter()->Writer::: forwarding file object open writer
javax.tools.ForwardingFileObject#getLastModified()->long::: forwarding file object get last modified
javax.tools.ForwardingFileObject#delete()->boolean::: forwarding file object delete
javax.tools.ForwardingJavaFileManager#getClassLoader(Location)->ClassLoader::: forwarding java file manager get class loader
javax.tools.ForwardingJavaFileManager#list(Location, String, Set, boolean)->Iterable::: forwarding java file manager list
javax.tools.ForwardingJavaFileManager#inferBinaryName(Location, JavaFileObject)->String::: forwarding java file manager infer binary name
javax.tools.ForwardingJavaFileManager#isSameFile(FileObject, FileObject)->boolean::: forwarding java file manager is same file
javax.tools.ForwardingJavaFileManager#handleOption(String, Iterator)->boolean::: forwarding java file manager handle option
javax.tools.ForwardingJavaFileManager#hasLocation(Location)->boolean::: forwarding java file manager has location
javax.tools.ForwardingJavaFileManager#isSupportedOption(String)->int::: forwarding java file manager is supported option
javax.tools.ForwardingJavaFileManager#getJavaFileForInput(Location, String, Kind)->JavaFileObject::: forwarding java file manager get java file for input
javax.tools.ForwardingJavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)->JavaFileObject::: forwarding java file manager get java file for output
javax.tools.ForwardingJavaFileManager#getFileForInput(Location, String, String)->FileObject::: forwarding java file manager get file for input
javax.tools.ForwardingJavaFileManager#getFileForOutput(Location, String, String, FileObject)->FileObject::: forwarding java file manager get file for output
javax.tools.ForwardingJavaFileManager#flush()->void::: forwarding java file manager flush
javax.tools.ForwardingJavaFileManager#close()->void::: forwarding java file manager close
javax.tools.ForwardingJavaFileManager#getLocationForModule(Location, String)->Location::: forwarding java file manager get location for module
javax.tools.ForwardingJavaFileManager#getLocationForModule(Location, JavaFileObject)->Location::: forwarding java file manager get location for module
javax.tools.ForwardingJavaFileManager#getServiceLoader(Location, Class)->ServiceLoader::: forwarding java file manager get service loader
javax.tools.ForwardingJavaFileManager#inferModuleName(Location)->String::: forwarding java file manager infer module name
javax.tools.ForwardingJavaFileManager#listLocationsForModules(Location)->Iterable>::: forwarding java file manager list locations for modules
javax.tools.ForwardingJavaFileManager#contains(Location, FileObject)->boolean::: forwarding java file manager contains
javax.tools.ForwardingJavaFileObject#getKind()->Kind::: forwarding java file object get kind
javax.tools.ForwardingJavaFileObject#isNameCompatible(String, Kind)->boolean::: forwarding java file object is name compatible
javax.tools.ForwardingJavaFileObject#getNestingKind()->NestingKind::: forwarding java file object get nesting kind
javax.tools.ForwardingJavaFileObject#getAccessLevel()->Modifier::: forwarding java file object get access level
javax.tools.JavaCompiler#getTask(Writer, JavaFileManager, DiagnosticListener, Iterable, Iterable, Iterable)->CompilationTask:::Creates a future for a compilation task with the given components and arguments
javax.tools.JavaCompiler#getStandardFileManager(DiagnosticListener, Locale, Charset)->StandardJavaFileManager:::Returns a new instance of the standard file manager implementation for this tool
javax.tools.JavaCompiler.CompilationTask#addModules(Iterable)->void:::Adds root modules to be taken into account during module resolution
javax.tools.JavaCompiler.CompilationTask#setProcessors(Iterable)->void:::Sets processors (for annotation processing)
javax.tools.JavaCompiler.CompilationTask#setLocale(Locale)->void:::Sets the locale to be applied when formatting diagnostics and other localized data.
javax.tools.JavaCompiler.CompilationTask#call()->Boolean:::Performs this compilation task
javax.tools.JavaFileManager.Location#getName()->String:::Returns the name of this location.
javax.tools.JavaFileManager.Location#isOutputLocation()->boolean:::Determines if this is an output location
javax.tools.JavaFileManager.Location#isModuleOrientedLocation()->boolean:::Indicates if this location is module-oriented location, and therefore expected to contain classes in a module/package/class hierarchy, as compared to a package-oriented location, which is expected to contain classes in a package/class hierarchy
javax.tools.JavaFileManager#getClassLoader(Location)->ClassLoader:::Returns a class loader for loading plug-ins from the given package-oriented location
javax.tools.JavaFileManager#list(Location, String, Set, boolean)->Iterable:::Lists all file objects matching the given criteria in the given package-oriented location
javax.tools.JavaFileManager#inferBinaryName(Location, JavaFileObject)->String:::Infers a binary name of a file object based on a package-oriented location
javax.tools.JavaFileManager#isSameFile(FileObject, FileObject)->boolean:::Compares two file objects and return true if they represent the same underlying object.
javax.tools.JavaFileManager#handleOption(String, Iterator)->boolean:::Handles one option
javax.tools.JavaFileManager#hasLocation(Location)->boolean:::Determines if a location is known to this file manager.
javax.tools.JavaFileManager#getJavaFileForInput(Location, String, Kind)->JavaFileObject:::Returns a JavaFileObject file object for input representing the specified class of the specified kind in the given package-oriented location.
javax.tools.JavaFileManager#getJavaFileForOutput(Location, String, Kind, FileObject)->JavaFileObject:::Returns a JavaFileObject file object for output representing the specified class of the specified kind in the given package-oriented location
javax.tools.JavaFileManager#getFileForInput(Location, String, String)->FileObject:::Returns a FileObject file object for input representing the specified relative name in the specified package in the given package-oriented location
javax.tools.JavaFileManager#getFileForOutput(Location, String, String, FileObject)->FileObject:::Returns a FileObject file object for output representing the specified relative name in the specified package in the given location
javax.tools.JavaFileManager#flush()->void:::Flushes any resources opened for output by this file manager directly or indirectly
javax.tools.JavaFileManager#close()->void:::Releases any resources opened by this file manager directly or indirectly
javax.tools.JavaFileManager#getLocationForModule(Location, String)->Location::: java file manager get location for module
javax.tools.JavaFileManager#getLocationForModule(Location, JavaFileObject)->Location:::Gets a location for the module containing a specific file to be found within a location, which may be either a module-oriented location or an output location
javax.tools.JavaFileManager#getServiceLoader(Location, Class)->ServiceLoader::: java file manager get service loader
javax.tools.JavaFileManager#inferModuleName(Location)->String::: java file manager infer module name
javax.tools.JavaFileManager#listLocationsForModules(Location)->Iterable>::: java file manager list locations for modules
javax.tools.JavaFileManager#contains(Location, FileObject)->boolean::: java file manager contains
javax.tools.JavaFileObject#getKind()->Kind:::Returns the kind of this file object.
javax.tools.JavaFileObject#isNameCompatible(String, Kind)->boolean:::Checks if this file object is compatible with the specified simple name and kind
javax.tools.JavaFileObject#getNestingKind()->NestingKind:::Provides a hint about the nesting level of the class represented by this file object
javax.tools.JavaFileObject#getAccessLevel()->Modifier:::Provides a hint about the access level of the class represented by this file object
javax.tools.OptionChecker#isSupportedOption(String)->int:::Determines if the given option is supported and if so, the number of arguments the option takes.
javax.tools.SimpleJavaFileObject#toUri()->URI::: simple java file object to uri
javax.tools.SimpleJavaFileObject#getName()->String::: simple java file object get name
javax.tools.SimpleJavaFileObject#openInputStream()->InputStream:::This implementation always throws UnsupportedOperationException
javax.tools.SimpleJavaFileObject#openOutputStream()->OutputStream:::This implementation always throws UnsupportedOperationException
javax.tools.SimpleJavaFileObject#openReader(boolean)->Reader:::Wraps the result of #getCharContent in a Reader
javax.tools.SimpleJavaFileObject#getCharContent(boolean)->CharSequence:::This implementation always throws UnsupportedOperationException
javax.tools.SimpleJavaFileObject#openWriter()->Writer:::Wraps the result of openOutputStream in a Writer
javax.tools.SimpleJavaFileObject#getLastModified()->long:::This implementation returns 0L
javax.tools.SimpleJavaFileObject#delete()->boolean:::This implementation does nothing
javax.tools.SimpleJavaFileObject#getKind()->Kind::: simple java file object get kind
javax.tools.SimpleJavaFileObject#isNameCompatible(String, Kind)->boolean:::This implementation compares the path of its URI to the given simple name
javax.tools.SimpleJavaFileObject#getNestingKind()->NestingKind:::This implementation returns null
javax.tools.SimpleJavaFileObject#getAccessLevel()->Modifier:::This implementation returns null
javax.tools.SimpleJavaFileObject#toString()->String::: simple java file object to string
javax.tools.StandardJavaFileManager#isSameFile(FileObject, FileObject)->boolean:::Compares two file objects and return true if they represent the same canonical file, zip file entry, or entry in any file system based container.
javax.tools.StandardJavaFileManager#getJavaFileObjectsFromFiles(Iterable)->Iterable:::Returns file objects representing the given files.
javax.tools.StandardJavaFileManager#getJavaFileObjectsFromPaths(Iterable)->Iterable:::Returns file objects representing the given paths.
javax.tools.StandardJavaFileManager#getJavaFileObjects(File...)->Iterable:::Returns file objects representing the given files
javax.tools.StandardJavaFileManager#getJavaFileObjects(Path...)->Iterable:::Returns file objects representing the given paths
javax.tools.StandardJavaFileManager#getJavaFileObjectsFromStrings(Iterable)->Iterable:::Returns file objects representing the given file names.
javax.tools.StandardJavaFileManager#getJavaFileObjects(String...)->Iterable:::Returns file objects representing the given file names
javax.tools.StandardJavaFileManager#setLocation(Location, Iterable)->void:::Associates the given search path with the given location
javax.tools.StandardJavaFileManager#setLocationFromPaths(Location, Collection)->void:::Associates the given search path with the given location
javax.tools.StandardJavaFileManager#setLocationForModule(Location, String, Collection)->void:::Associates the given search path with the given module and location, which must be a module-oriented or output location
javax.tools.StandardJavaFileManager#getLocation(Location)->Iterable:::Returns the search path associated with the given location.
javax.tools.StandardJavaFileManager#getLocationAsPaths(Location)->Iterable:::Returns the search path associated with the given location.
javax.tools.StandardJavaFileManager#asPath(FileObject)->Path:::Returns the path, if any, underlying this file object (optional operation)
javax.tools.StandardJavaFileManager.PathFactory#getPath(String, String...)->Path:::Converts a path string, or a sequence of strings that when joined form a path string, to a Path.
javax.tools.StandardJavaFileManager#setPathFactory(PathFactory)->void:::Specify a factory that can be used to generate a path from a string, or series of strings
javax.tools.Tool#name()->String:::Returns the name of this tool, or an empty string if no name is provided.
javax.tools.Tool#run(InputStream, OutputStream, OutputStream, String...)->int:::Run the tool with the given I/O channels and arguments
javax.tools.Tool#getSourceVersions()->Set:::Returns the source versions of the Java&trade; programming language supported by this tool.
javax.tools.ToolProvider#getSystemJavaCompiler()->JavaCompiler:::Returns the Java&trade; programming language compiler provided with this platform
javax.tools.ToolProvider#getSystemDocumentationTool()->DocumentationTool:::Returns the Java&trade; programming language documentation tool provided with this platform
javax.tools.ToolProvider#getSystemToolClassLoader()->ClassLoader:::Returns a class loader that may be used to load system tools, or null if no such special loader is provided.

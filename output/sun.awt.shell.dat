DefaultShellFolder#writeReplace():::This method is implemented to make sure that no instances of ShellFolder are ever serialized:::return->getPath->new->File
ShellFolder#writeReplace():::This method must be implemented to make sure that no instances of ShellFolder are ever serialized:::
ShellFolder#getParent():::Returns the path for this object's parent, or null if this object does not name a parent folder.:::if->isFileSystem->return->super->getParent->if->return->parent->getPath->else->return
ShellFolder#getParentFile():::Returns a File object representing this object's parent, or null if this object does not name a parent folder.:::if->return->else->if->isFileSystem->return->super->getParentFile->else->return
ShellFolder#compareTo(File):::Compares this ShellFolder with the specified ShellFolder for order.:::if->isFileSystem->if->isFileSystem->return->super->compareTo->else->return->else->if->isFileSystem->return->else->return->getName->file2->getName->compareTo
ShellFolder#getShellFolder(File):::Return a shell folder from a file object:::if->return->if->Files->Paths->file->getPath->get->exists->throw->new->FileNotFoundException->return->shellFolderManager->createShellFolder
ShellFolder#isComputerNode(File):::Does dir represent a "computer" such as a node on the network, or "My Computer" on the desktop.:::return->shellFolderManager->isComputerNode
ShellFolder#getNormalizedFile(File):::Canonicalizes files that don't have symbolic links in their path:::canonical->f->getCanonicalFile->if->f->equals->return->return->f->toURI->normalize->new->File
ShellFolder#canWrite():::Returns true if folder allows creation of children:::return->isFileSystem->super->canWrite
ShellFolder#invoke(Callable):::Invokes the task which doesn't throw checked exceptions from its call method:::try->return->invoke->catch->return->finally
ShellFolder#invoke(Callable, Class):::Invokes the task which throws checked exceptions from its call method:::try->return->invoker->invoke->catch->if->throw->if->Thread->currentThread->interrupt->throw->if->exceptionClass->isInstance->throw->exceptionClass->cast->throw->new->RuntimeException->finally
ShellFolder.Invoker#invoke(Callable):::Invokes a callable task.:::
ShellFolderManager#createShellFolder(File):::Create a shell folder from a file:::return->new->DefaultShellFolder
ShellFolderManager#isComputerNode(File):::Does dir represent a "computer" such as a node on the network, or "My Computer" on the desktop.:::return
Win32ShellFolder2#createShellFolder(Win32ShellFolder2, long):::Creates a shell folder with a parent and relative PIDL:::path->new->Callable<String>->invoke->libPath->resolveLibrary->if->return->new->Win32ShellFolder2->else->return->new->Win32ShellFolder2
Win32ShellFolder2#setIsPersonal():::Marks this folder as being the My Documents (Personal) folder:::
Win32ShellFolder2#writeReplace():::This method is implemented to make sure that no instances of ShellFolder are ever serialized:::return->new->Callable<File>->invoke
Win32ShellFolder2#dispose():::Finalizer to clean up any COM objects or PIDLs used by this object.:::disposer->dispose
Win32ShellFolder2#getParentIShellFolder():::Get the parent ShellFolder's IShellFolder interface:::parent->getParentFile->if->return->getIShellFolder->return->parent->getIShellFolder
Win32ShellFolder2#getRelativePIDL():::Accessor for relative PIDL:::if->throw->new->InternalError->return
Win32ShellFolder2#getDesktop():::Helper function to return the desktop:::return->Win32ShellFolderManager2->getDesktop
Win32ShellFolder2#getDesktopIShellFolder():::Helper function to return the desktop IShellFolder interface:::return->getDesktop->getIShellFolder
Win32ShellFolder2#equals(Object):::Check to see if two ShellFolder objects are the same:::if->if->return->super->equals->return->getPath->getPath->pathsEqual->rhs->if->return->if->isFileSystem->rhs->isFileSystem->return->getPath->rhs->getPath->pathsEqual->parent->equals->if->parent->equals->try->return->getParentIShellFolder->pidlsEqual->catch->return->finally->return
Win32ShellFolder2#hasAttribute(int):::Return whether the given attribute flag is set for this object:::result->new->Callable<Boolean>->invoke->return
Win32ShellFolder2#getChildByPath(String):::Look for (possibly special) child folder by it's path:::return->new->Callable<Win32ShellFolder2>->invoke
Win32ShellFolder2#getSystemIcon(SystemIcon):::Gets an icon from the Windows system icon list as an Image:::hIcon->iconType->getIconID->getSystemIcon->icon->makeIcon->disposeIcon->return
Win32ShellFolder2#getShell32Icon(int, boolean):::Gets an icon from the Windows system icon list as an Image:::useVGAColors->size->toolkit->Toolkit->getDefaultToolkit->shellIconBPP->toolkit->getDesktopProperty->if->shellIconBPP->equals->hIcon->getIconResource->if->icon->makeIcon->disposeIcon->return->return
Win32ShellFolder2#getCanonicalFile():::Returns the canonical form of this abstract pathname:::return
Win32ShellFolder2#compareTo(File):::Compares this object with the specified object for order.:::if->if->isFileSystem->isSpecial->return->super->compareTo->else->return->return->Win32ShellFolderManager2->compareShellFolders
Win32ShellFolderManager2#isComputerNode(File):::Does dir represent a "computer" such as a node on the network, or "My Computer" on the desktop.:::if->getDrives->return->else->path->AccessController->new->PrivilegedAction<String>->doPrivileged->return->path->startsWith->path->indexOf

DefaultShellFolder#writeReplace():::This method is implemented to make sure that no instances of ShellFolder are ever serialized:::return->getPath->new->File
DefaultShellFolder#listFiles()::: default shell folder list files:::files->super->listFiles->if->for->i->return
DefaultShellFolder#isLink()::: default shell folder is link:::return
DefaultShellFolder#isHidden()::: default shell folder is hidden:::fileName->getName->if->fileName->length->return->fileName->charAt->return
DefaultShellFolder#getLinkLocation()::: default shell folder get link location:::return
DefaultShellFolder#getDisplayName()::: default shell folder get display name:::return->getName
DefaultShellFolder#getFolderType()::: default shell folder get folder type:::if->isDirectory->return->else->return
DefaultShellFolder#getExecutableType()::: default shell folder get executable type:::return
ShellFolder#isFileSystem()::: shell folder is file system:::return->getPath->startsWith
ShellFolder#writeReplace():::This method must be implemented to make sure that no instances of ShellFolder are ever serialized:::
ShellFolder#getParent():::Returns the path for this object's parent, or null if this object does not name a parent folder.:::if->isFileSystem->return->super->getParent->if->return->parent->getPath->else->return
ShellFolder#getParentFile():::Returns a File object representing this object's parent, or null if this object does not name a parent folder.:::if->return->else->if->isFileSystem->return->super->getParentFile->else->return
ShellFolder#listFiles()::: shell folder list files:::return->listFiles
ShellFolder#listFiles(boolean)::: shell folder list files:::files->super->listFiles->if->v->new->Vector<>->nameCount->for->i->v->v->size->new->FileArr->toArray->return
ShellFolder#isLink()::: shell folder is link:::
ShellFolder#getLinkLocation()::: shell folder get link location:::
ShellFolder#getDisplayName()::: shell folder get display name:::
ShellFolder#getFolderType()::: shell folder get folder type:::
ShellFolder#getExecutableType()::: shell folder get executable type:::
ShellFolder#compareTo(File):::Compares this ShellFolder with the specified ShellFolder for order.:::if->isFileSystem->if->isFileSystem->return->super->compareTo->else->return->else->if->isFileSystem->return->else->return->getName->file2->getName->compareTo
ShellFolder#getIcon(boolean)::: shell folder get icon:::return
ShellFolder#getShellFolder(File):::Return a shell folder from a file object:::if->return->if->Files->Paths->file->getPath->get->exists->throw->new->FileNotFoundException->return->shellFolderManager->createShellFolder
ShellFolder#get(String)::: shell folder get:::return->shellFolderManager->get
ShellFolder#isComputerNode(File):::Does dir represent a "computer" such as a node on the network, or "My Computer" on the desktop.:::return->shellFolderManager->isComputerNode
ShellFolder#isFileSystemRoot(File)::: shell folder is file system root:::return->shellFolderManager->isFileSystemRoot
ShellFolder#getNormalizedFile(File):::Canonicalizes files that don't have symbolic links in their path:::canonical->f->getCanonicalFile->if->f->equals->return->return->f->toURI->normalize->new->File
ShellFolder#sort(List)::: shell folder sort:::if->files->size->return->new->Callable<Void>->invoke
ShellFolder#sortChildren(List)::: shell folder sort children:::new->Callable<Void>->invoke
ShellFolder#isAbsolute()::: shell folder is absolute:::return->isFileSystem->super->isAbsolute
ShellFolder#getAbsoluteFile()::: shell folder get absolute file:::return->isFileSystem->super->getAbsoluteFile
ShellFolder#canRead()::: shell folder can read:::return->isFileSystem->super->canRead
ShellFolder#canWrite():::Returns true if folder allows creation of children:::return->isFileSystem->super->canWrite
ShellFolder#exists()::: shell folder exists:::return->isFileSystem->isFileSystemRoot->super->exists
ShellFolder#isDirectory()::: shell folder is directory:::return->isFileSystem->super->isDirectory
ShellFolder#isFile()::: shell folder is file:::return->isFileSystem->super->isFile->isDirectory
ShellFolder#lastModified()::: shell folder last modified:::return->isFileSystem->super->lastModified
ShellFolder#length()::: shell folder length:::return->isFileSystem->super->length
ShellFolder#createNewFile()::: shell folder create new file:::return->isFileSystem->super->createNewFile
ShellFolder#delete()::: shell folder delete:::return->isFileSystem->super->delete
ShellFolder#deleteOnExit()::: shell folder delete on exit:::if->isFileSystem->super->deleteOnExit->else
ShellFolder#mkdir()::: shell folder mkdir:::return->isFileSystem->super->mkdir
ShellFolder#mkdirs()::: shell folder mkdirs:::return->isFileSystem->super->mkdirs
ShellFolder#renameTo(File)::: shell folder rename to:::return->isFileSystem->super->renameTo
ShellFolder#setLastModified(long)::: shell folder set last modified:::return->isFileSystem->super->setLastModified
ShellFolder#setReadOnly()::: shell folder set read only:::return->isFileSystem->super->setReadOnly
ShellFolder#toString()::: shell folder to string:::return->isFileSystem->super->toString->getDisplayName
ShellFolder#getFolderColumns(File)::: shell folder get folder columns:::columns->if->getFolderColumns->if->new->ShellFolderColumnInfoArr->new->ShellFolderColumnInfo->new->ShellFolderColumnInfo->new->ShellFolderColumnInfo->return
ShellFolder#getFolderColumns()::: shell folder get folder columns:::return
ShellFolder#getFolderColumnValue(File, int)::: shell folder get folder column value:::if->value->getFolderColumnValue->if->return->if->file->exists->return->switch->return->return->file->isDirectory->Long->file->length->valueOf->if->isFileSystemRoot->return->time->file->lastModified->return->new->Date->return
ShellFolder#getFolderColumnValue(int)::: shell folder get folder column value:::return
ShellFolder#invoke(Callable):::Invokes the task which doesn't throw checked exceptions from its call method:::try->return->invoke->catch->return->finally
ShellFolder#invoke(Callable, Class):::Invokes the task which throws checked exceptions from its call method:::try->return->invoker->invoke->catch->if->throw->if->Thread->currentThread->interrupt->throw->if->exceptionClass->isInstance->throw->exceptionClass->cast->throw->new->RuntimeException->finally
ShellFolder.Invoker#invoke(Callable):::Invokes a callable task.:::
ShellFolderColumnInfo#getTitle()::: shell folder column info get title:::return
ShellFolderColumnInfo#setTitle(String)::: shell folder column info set title:::
ShellFolderColumnInfo#getWidth()::: shell folder column info get width:::return
ShellFolderColumnInfo#setWidth(Integer)::: shell folder column info set width:::
ShellFolderColumnInfo#getAlignment()::: shell folder column info get alignment:::return
ShellFolderColumnInfo#setAlignment(Integer)::: shell folder column info set alignment:::
ShellFolderColumnInfo#isVisible()::: shell folder column info is visible:::return
ShellFolderColumnInfo#setVisible(boolean)::: shell folder column info set visible:::
ShellFolderColumnInfo#getSortOrder()::: shell folder column info get sort order:::return
ShellFolderColumnInfo#setSortOrder(SortOrder)::: shell folder column info set sort order:::
ShellFolderColumnInfo#getComparator()::: shell folder column info get comparator:::return
ShellFolderColumnInfo#setComparator(Comparator)::: shell folder column info set comparator:::
ShellFolderColumnInfo#isCompareByColumn()::: shell folder column info is compare by column:::return
ShellFolderColumnInfo#setCompareByColumn(boolean)::: shell folder column info set compare by column:::
ShellFolderManager#createShellFolder(File):::Create a shell folder from a file:::return->new->DefaultShellFolder
ShellFolderManager#get(String)::: shell folder manager get:::if->key->equals->homeDir->System->getProperty->new->File->try->return->createShellFolder->catch->return->finally->else->if->key->equals->return->File->listRoots->else->if->key->equals->return->get->else->if->key->equals->return->new->FileArr->get->return
ShellFolderManager#isComputerNode(File):::Does dir represent a "computer" such as a node on the network, or "My Computer" on the desktop.:::return
ShellFolderManager#isFileSystemRoot(File)::: shell folder manager is file system root:::if->isFileSystem->return->return->dir->getParentFile
ShellFolderManager#createInvoker()::: shell folder manager create invoker:::return->new->DirectInvoker
ShellFolderManager.DirectInvoker#invoke(Callable)::: direct invoker invoke:::return->task->call
Win32ShellFolder2#initIDs()::: win32 shell folder2 init ds:::
Win32ShellFolder2.FolderDisposer#dispose()::: folder disposer dispose:::if->return->new->Callable<Void>->invoke
Win32ShellFolder2#setIShellFolder(long)::: win32 shell folder2 set shell folder:::
Win32ShellFolder2#setRelativePIDL(long)::: win32 shell folder2 set relative l:::
Win32ShellFolder2#composePathForCsidl(int)::: win32 shell folder2 compose path for csidl:::path->getFileSystemPath->return->Integer->toHexString
Win32ShellFolder2#createShellFolder(Win32ShellFolder2, long):::Creates a shell folder with a parent and relative PIDL:::path->new->Callable<String>->invoke->libPath->resolveLibrary->if->return->new->Win32ShellFolder2->else->return->new->Win32ShellFolder2
Win32ShellFolder2#initDesktop()::: win32 shell folder2 init desktop:::
Win32ShellFolder2#initSpecial(long, int)::: win32 shell folder2 init special:::
Win32ShellFolder2#setIsPersonal():::Marks this folder as being the My Documents (Personal) folder:::
Win32ShellFolder2#writeReplace():::This method is implemented to make sure that no instances of ShellFolder are ever serialized:::return->new->Callable<File>->invoke
Win32ShellFolder2#dispose():::Finalizer to clean up any COM objects or PIDLs used by this object.:::disposer->dispose
Win32ShellFolder2#getNextPIDLEntry(long)::: win32 shell folder2 get next entry:::
Win32ShellFolder2#copyFirstPIDLEntry(long)::: win32 shell folder2 copy first entry:::
Win32ShellFolder2#combinePIDLs(long, long)::: win32 shell folder2 combine ls:::
Win32ShellFolder2#releasePIDL(long)::: win32 shell folder2 release l:::
Win32ShellFolder2#releaseIShellFolder(long)::: win32 shell folder2 release shell folder:::
Win32ShellFolder2#getIShellFolder():::Accessor for IShellFolder:::if->try->new->Callable<Long>->invoke->catch->finally->return
Win32ShellFolder2#getParentIShellFolder():::Get the parent ShellFolder's IShellFolder interface:::parent->getParentFile->if->return->getIShellFolder->return->parent->getIShellFolder
Win32ShellFolder2#getRelativePIDL():::Accessor for relative PIDL:::if->throw->new->InternalError->return
Win32ShellFolder2#getAbsolutePIDL()::: win32 shell folder2 get absolute l:::if->return->getRelativePIDL->else->if->getAbsolutePIDL->getRelativePIDL->combinePIDLs->return
Win32ShellFolder2#getDesktop():::Helper function to return the desktop:::return->Win32ShellFolderManager2->getDesktop
Win32ShellFolder2#getDesktopIShellFolder():::Helper function to return the desktop IShellFolder interface:::return->getDesktop->getIShellFolder
Win32ShellFolder2#pathsEqual(String, String)::: win32 shell folder2 paths equal:::return->path1->equalsIgnoreCase
Win32ShellFolder2#equals(Object):::Check to see if two ShellFolder objects are the same:::if->if->return->super->equals->return->getPath->getPath->pathsEqual->rhs->if->return->if->isFileSystem->rhs->isFileSystem->return->getPath->rhs->getPath->pathsEqual->parent->equals->if->parent->equals->try->return->getParentIShellFolder->pidlsEqual->catch->return->finally->return
Win32ShellFolder2#pidlsEqual(long, long, long)::: win32 shell folder2 pidls equal:::return->new->Callable<Boolean>->invoke
Win32ShellFolder2#compareIDs(long, long, long)::: win32 shell folder2 compare ds:::
Win32ShellFolder2#isFileSystem()::: win32 shell folder2 is file system:::if->hasAttribute->return
Win32ShellFolder2#hasAttribute(int):::Return whether the given attribute flag is set for this object:::result->new->Callable<Boolean>->invoke->return
Win32ShellFolder2#getAttributes0(long, long, int)::: win32 shell folder2 get attributes0:::
Win32ShellFolder2#getFileSystemPath(long, long)::: win32 shell folder2 get file system path:::linkedFolder->if->Win32ShellFolderManager2->getNetwork->getIShellFolder->getAttributes0->s->Win32ShellFolderManager2->getDesktop->getIShellFolder->getLinkLocation->getFileSystemPath->if->s->startsWith->return->path->getDisplayNameOf->return
Win32ShellFolder2#resolveLibrary(String)::: win32 shell folder2 resolve library:::if->path->startsWith->path->toLowerCase->endsWith->foreach->if->path->toLowerCase->toLowerCase->endsWith->path->toUpperCase->substring->toUpperCase->startsWith->return->return
Win32ShellFolder2#getFileSystemPath(int)::: win32 shell folder2 get file system path:::path->new->Callable<String>->invoke->if->security->System->getSecurityManager->if->security->checkRead->return
Win32ShellFolder2#getFileSystemPath0(int)::: win32 shell folder2 get file system path0:::
Win32ShellFolder2#isNetworkRoot(String)::: win32 shell folder2 is network root:::return->path->equals->path->equals->path->equals->path->equals
Win32ShellFolder2#getParentFile()::: win32 shell folder2 get parent file:::return
Win32ShellFolder2#isDirectory()::: win32 shell folder2 is directory:::if->if->hasAttribute->hasAttribute->else->if->isLink->linkLocation->getLinkLocation->Boolean->linkLocation->isDirectory->valueOf->else->return->isDir->booleanValue
Win32ShellFolder2#getEnumObjects(boolean)::: win32 shell folder2 get enum objects:::return->new->Callable<Long>->invoke
Win32ShellFolder2#getEnumObjects(long, boolean, boolean)::: win32 shell folder2 get enum objects:::
Win32ShellFolder2#getNextChild(long)::: win32 shell folder2 get next child:::
Win32ShellFolder2#releaseEnumObjects(long)::: win32 shell folder2 release enum objects:::
Win32ShellFolder2#bindToObject(long, long)::: win32 shell folder2 bind to object:::
Win32ShellFolder2#listFiles(boolean)::: win32 shell folder2 list files:::security->System->getSecurityManager->if->security->getPath->checkRead->try->files->new->Callable<File[]>->invoke->return->Win32ShellFolderManager2->checkFiles->catch->return->new->FileArr->finally
Win32ShellFolder2#getChildByPath(String):::Look for (possibly special) child folder by it's path:::return->new->Callable<Win32ShellFolder2>->invoke
Win32ShellFolder2#isLink()::: win32 shell folder2 is link:::if->hasAttribute->return
Win32ShellFolder2#isHidden()::: win32 shell folder2 is hidden:::return->hasAttribute
Win32ShellFolder2#getLinkLocation(long, long, boolean)::: win32 shell folder2 get link location:::
Win32ShellFolder2#getLinkLocation()::: win32 shell folder2 get link location:::return->getLinkLocation
Win32ShellFolder2#getLinkLocation(boolean)::: win32 shell folder2 get link location:::return->new->Callable<Win32ShellFolder2>->invoke
Win32ShellFolder2#parseDisplayName(String)::: win32 shell folder2 parse display name:::return->new->Callable<Long>->invoke
Win32ShellFolder2#parseDisplayName0(long, String)::: win32 shell folder2 parse display name0:::
Win32ShellFolder2#getDisplayNameOf(long, long, int)::: win32 shell folder2 get display name of:::
Win32ShellFolder2#loadKnownFolders()::: win32 shell folder2 load known folders:::
Win32ShellFolder2#getDisplayName()::: win32 shell folder2 get display name:::if->new->Callable<String>->invoke->return
Win32ShellFolder2#getFolderType(long)::: win32 shell folder2 get folder type:::
Win32ShellFolder2#getFolderType()::: win32 shell folder2 get folder type:::if->absolutePIDL->getAbsolutePIDL->new->Callable<String>->invoke->return
Win32ShellFolder2#getExecutableType(String)::: win32 shell folder2 get executable type:::
Win32ShellFolder2#getExecutableType()::: win32 shell folder2 get executable type:::if->isFileSystem->return->return->getAbsolutePath->getExecutableType
Win32ShellFolder2#getIShellIcon(long)::: win32 shell folder2 get shell icon:::
Win32ShellFolder2#getIconIndex(long, long)::: win32 shell folder2 get icon index:::
Win32ShellFolder2#getIcon(String, boolean)::: win32 shell folder2 get icon:::
Win32ShellFolder2#extractIcon(long, long, boolean, boolean)::: win32 shell folder2 extract icon:::
Win32ShellFolder2#getSystemIcon(int)::: win32 shell folder2 get system icon:::
Win32ShellFolder2#getIconResource(String, int, int, int, boolean)::: win32 shell folder2 get icon resource:::
Win32ShellFolder2#getIconBits(long)::: win32 shell folder2 get icon bits:::
Win32ShellFolder2#disposeIcon(long)::: win32 shell folder2 dispose icon:::
Win32ShellFolder2#getStandardViewButton0(int, boolean)::: win32 shell folder2 get standard view button0:::
Win32ShellFolder2#getIShellIcon()::: win32 shell folder2 get shell icon:::if->getIShellFolder->getIShellIcon->return
Win32ShellFolder2#makeIcon(long, boolean)::: win32 shell folder2 make icon:::if->iconBits->getIconBits->if->size->Math->sqrt->baseSize->img->new->BufferedImage->img->setRGB->return->new->MultiResolutionIconImage->return
Win32ShellFolder2#getIcon(boolean)::: win32 shell folder2 get icon:::icon->if->new->Callable<Image>->invoke->if->else->return
Win32ShellFolder2#getSystemIcon(SystemIcon):::Gets an icon from the Windows system icon list as an Image:::hIcon->iconType->getIconID->getSystemIcon->icon->makeIcon->disposeIcon->return
Win32ShellFolder2#getShell32Icon(int, boolean):::Gets an icon from the Windows system icon list as an Image:::useVGAColors->size->toolkit->Toolkit->getDefaultToolkit->shellIconBPP->toolkit->getDesktopProperty->if->shellIconBPP->equals->hIcon->getIconResource->if->icon->makeIcon->disposeIcon->return->return
Win32ShellFolder2#getCanonicalFile():::Returns the canonical form of this abstract pathname:::return
Win32ShellFolder2#isSpecial()::: win32 shell folder2 is special:::return->isFileSystem->getDesktop
Win32ShellFolder2#compareTo(File):::Compares this object with the specified object for order.:::if->if->isFileSystem->isSpecial->return->super->compareTo->else->return->return->Win32ShellFolderManager2->compareShellFolders
Win32ShellFolder2#getFolderColumns()::: win32 shell folder2 get folder columns:::library->resolveLibrary->if->return->library->getFolderColumns->return->new->Callable<ShellFolderColumnInfo[]>->invoke
Win32ShellFolder2#getFolderColumnValue(int)::: win32 shell folder2 get folder column value:::if->isLibrary->library->resolveLibrary->if->return->library->getFolderColumnValue->return->new->Callable<Object>->invoke
Win32ShellFolder2#isLibrary()::: win32 shell folder2 is library:::return
Win32ShellFolder2#resolveLibrary()::: win32 shell folder2 resolve library:::for->f->return
Win32ShellFolder2#doGetColumnInfo(long)::: win32 shell folder2 do get column info:::
Win32ShellFolder2#doGetColumnValue(long, long, int)::: win32 shell folder2 do get column value:::
Win32ShellFolder2#compareIDsByColumn(long, long, long, int)::: win32 shell folder2 compare ds by column:::
Win32ShellFolder2#sortChildren(List)::: win32 shell folder2 sort children:::new->Callable<Void>->invoke
Win32ShellFolder2.ColumnComparator#compare(File, File)::: column comparator compare:::result->new->Callable<Integer>->invoke->return
Win32ShellFolder2#getLibraries()::: win32 shell folder2 get libraries:::return->new->Callable<List<KnownFolderDefinition>>->invoke
Win32ShellFolder2.MultiResolutionIconImage#getWidth(ImageObserver)::: multi resolution icon image get width:::return
Win32ShellFolder2.MultiResolutionIconImage#getHeight(ImageObserver)::: multi resolution icon image get height:::return
Win32ShellFolder2.MultiResolutionIconImage#getBaseImage()::: multi resolution icon image get base image:::return
Win32ShellFolder2.MultiResolutionIconImage#getResolutionVariant(double, double)::: multi resolution icon image get resolution variant:::return
Win32ShellFolder2.MultiResolutionIconImage#getResolutionVariants()::: multi resolution icon image get resolution variants:::return->Arrays->asList
Win32ShellFolderManager2#createShellFolder(File)::: win32 shell folder manager2 create shell folder:::try->return->getDesktop->createShellFolder->catch->throw->new->FileNotFoundException->finally
Win32ShellFolderManager2#createShellFolder(Win32ShellFolder2, File)::: win32 shell folder manager2 create shell folder:::pIDL->try->parent->file->getCanonicalPath->parseDisplayName->catch->finally->if->throw->file->getAbsolutePath->new->FileNotFoundException->try->return->createShellFolderFromRelativePIDL->catch->finally->Win32ShellFolder2->releasePIDL
Win32ShellFolderManager2#createShellFolderFromRelativePIDL(Win32ShellFolder2, long)::: win32 shell folder manager2 create shell folder from relative l:::while->curPIDL->Win32ShellFolder2->copyFirstPIDLEntry->if->Win32ShellFolder2->createShellFolder->Win32ShellFolder2->getNextPIDLEntry->else->break->return
Win32ShellFolderManager2#getStandardViewButton(int)::: win32 shell folder manager2 get standard view button:::result->if->return->iconBits->Win32ShellFolder2->getStandardViewButton0->if->size->Math->sqrt->img->new->BufferedImage->img->setRGB->new->MultiResolutionIconImage->return
Win32ShellFolderManager2#getDesktop()::: win32 shell folder manager2 get desktop:::if->try->new->Win32ShellFolder2->catch->if->log->isLoggable->log->warning->finally->return
Win32ShellFolderManager2#getDrives()::: win32 shell folder manager2 get drives:::if->try->new->Win32ShellFolder2->catch->if->log->isLoggable->log->warning->finally->return
Win32ShellFolderManager2#getRecent()::: win32 shell folder manager2 get recent:::if->try->path->Win32ShellFolder2->getFileSystemPath->if->getDesktop->new->File->createShellFolder->catch->if->log->isLoggable->log->warning->finally->return
Win32ShellFolderManager2#getNetwork()::: win32 shell folder manager2 get network:::if->try->new->Win32ShellFolder2->catch->if->log->isLoggable->log->warning->finally->return
Win32ShellFolderManager2#getPersonal()::: win32 shell folder manager2 get personal:::if->try->path->Win32ShellFolder2->getFileSystemPath->if->desktop->getDesktop->desktop->getChildByPath->if->getDesktop->new->File->createShellFolder->if->personal->setIsPersonal->catch->if->log->isLoggable->log->warning->finally->return
Win32ShellFolderManager2#get(String)::: win32 shell folder manager2 get:::if->key->equals->file->getPersonal->if->getDesktop->return->checkFile->else->if->key->equals->if->desktop->getDesktop->if->new->FileArr->else->super->get->return->checkFiles->else->if->key->equals->desktop->getDesktop->if->checkFile->folders->new->ArrayList<File>->drives->getDrives->recentFolder->getRecent->if->OSInfo->getWindowsVersion->compareTo->folders->add->folders->add->secondLevelFolders->desktop->listFiles->checkFiles->Arrays->sort->foreach->folder->if->folder->isFileSystem->folder->isDirectory->folder->isLink->folders->add->if->folder->equals->thirdLevelFolders->folder->listFiles->checkFiles->if->thirdLevelFoldersList->Arrays->asList->folder->sortChildren->folders->addAll->return->checkFiles->else->return->super->get->else->if->key->equals->toolkit->Toolkit->getDefaultToolkit->folders->new->ArrayList<File>->i->value->do->toolkit->getDesktopProperty->try->if->folders->new->Win32ShellFolder2->add->else->if->folders->new->File->createShellFolder->add->catch->if->log->isLoggable->log->warning->if->log->isLoggable->log->warning->return->new->FileArr->finally->while->if->folders->size->foreach->new->FileArr->getRecent->getDesktop->getPersonal->getDrives->getNetwork->if->folders->add->return->checkFiles->else->if->key->startsWith->name->key->key->indexOf->substring->iconIndex->if->name->equals->name->equals->else->if->name->equals->else->if->name->equals->else->if->name->equals->else->return->return->getStandardViewButton->else->if->key->startsWith->iconType->if->else->if->else->if->else->if->else->return->return->Win32ShellFolder2->getSystemIcon->else->if->key->startsWith->key->startsWith->name->key->key->indexOf->substring->try->i->Integer->parseInt->if->return->Win32ShellFolder2->key->startsWith->getShell32Icon->catch->finally->return
Win32ShellFolderManager2#checkFile(File)::: win32 shell folder manager2 check file:::sm->System->getSecurityManager->return->checkFile
Win32ShellFolderManager2#checkFile(File, SecurityManager)::: win32 shell folder manager2 check file:::try->sm->file->getPath->checkRead->if->f->if->f->isLink->link->f->getLinkLocation->if->sm->link->getPath->checkRead->return->catch->return->finally
Win32ShellFolderManager2#checkFiles(File[])::: win32 shell folder manager2 check files:::sm->System->getSecurityManager->if->return->return->Arrays->stream->checkFiles
Win32ShellFolderManager2#checkFiles(List)::: win32 shell folder manager2 check files:::sm->System->getSecurityManager->if->files->isEmpty->return->files->files->size->new->FileArr->toArray->return->files->stream->checkFiles
Win32ShellFolderManager2#checkFiles(Stream, SecurityManager)::: win32 shell folder manager2 check files:::return->filesStream->checkFile->filter->File[]->new->toArray
Win32ShellFolderManager2#isComputerNode(File):::Does dir represent a "computer" such as a node on the network, or "My Computer" on the desktop.:::if->getDrives->return->else->path->AccessController->new->PrivilegedAction<String>->doPrivileged->return->path->startsWith->path->indexOf
Win32ShellFolderManager2#isFileSystemRoot(File)::: win32 shell folder manager2 is file system root:::if->if->sf->return->sf->isFileSystem->getDrives->equals->getDesktop->equals->isDrive->return->isDrive->return
Win32ShellFolderManager2#isDrive(File)::: win32 shell folder manager2 is drive:::path->dir->getPath->if->path->length->path->charAt->return->roots->Win32ShellFolder2->listRoots->return->Arrays->asList->contains
Win32ShellFolderManager2#compareShellFolders(Win32ShellFolder2, Win32ShellFolder2)::: win32 shell folder manager2 compare shell folders:::special1->sf1->isSpecial->special2->sf2->isSpecial->if->if->tmpTopFolderList->new->ArrayList<>->tmpTopFolderList->Win32ShellFolderManager2->getPersonal->add->tmpTopFolderList->Win32ShellFolderManager2->getDesktop->add->tmpTopFolderList->Win32ShellFolderManager2->getDrives->add->tmpTopFolderList->Win32ShellFolderManager2->getNetwork->add->i1->topFolderList->indexOf->i2->topFolderList->indexOf->if->return->else->if->return->else->if->return->if->return->else->if->return->return->sf1->getAbsolutePath->sf2->getAbsolutePath->compareNames
Win32ShellFolderManager2#compareNames(String, String)::: win32 shell folder manager2 compare names:::diff->name1->compareToIgnoreCase->if->return->else->return->name1->compareTo
Win32ShellFolderManager2#createInvoker()::: win32 shell folder manager2 create invoker:::return->new->ComInvoker
Win32ShellFolderManager2.ComInvoker#newThread(Runnable)::: com invoker new thread:::comRun->new->Runnable->AccessController->name->thread->ThreadGroupUtils->getRootThreadGroup->new->Thread->thread->setDaemon->thread->setPriority->return->doPrivileged->return
Win32ShellFolderManager2.ComInvoker#invoke(Callable)::: com invoker invoke:::if->Thread->currentThread->return->task->call->else->future->try->submit->catch->throw->e->getMessage->new->InterruptedException->finally->try->return->future->get->catch->AccessController->new->PrivilegedAction<Void>->doPrivileged->throw->cause->e->getCause->if->throw->if->throw->throw->new->RuntimeException->finally
Win32ShellFolderManager2#initializeCom()::: win32 shell folder manager2 initialize com:::
Win32ShellFolderManager2#uninitializeCom()::: win32 shell folder manager2 uninitialize com:::

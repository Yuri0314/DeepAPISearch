sun.awt.shell.DefaultShellFolder#writeReplace()->Object:::This method is implemented to make sure that no instances of ShellFolder are ever serialized
sun.awt.shell.DefaultShellFolder#listFiles()->File[]::: default shell folder list files
sun.awt.shell.DefaultShellFolder#isLink()->boolean::: default shell folder is link
sun.awt.shell.DefaultShellFolder#isHidden()->boolean::: default shell folder is hidden
sun.awt.shell.DefaultShellFolder#getLinkLocation()->ShellFolder::: default shell folder get link location
sun.awt.shell.DefaultShellFolder#getDisplayName()->String::: default shell folder get display name
sun.awt.shell.DefaultShellFolder#getFolderType()->String::: default shell folder get folder type
sun.awt.shell.DefaultShellFolder#getExecutableType()->String::: default shell folder get executable type
sun.awt.shell.ShellFolder#isFileSystem()->boolean::: shell folder is file system
sun.awt.shell.ShellFolder#writeReplace()->Object:::This method must be implemented to make sure that no instances of ShellFolder are ever serialized
sun.awt.shell.ShellFolder#getParent()->String:::Returns the path for this object's parent, or null if this object does not name a parent folder.
sun.awt.shell.ShellFolder#getParentFile()->File:::Returns a File object representing this object's parent, or null if this object does not name a parent folder.
sun.awt.shell.ShellFolder#listFiles()->File[]::: shell folder list files
sun.awt.shell.ShellFolder#listFiles(boolean)->File[]::: shell folder list files
sun.awt.shell.ShellFolder#isLink()->boolean::: shell folder is link
sun.awt.shell.ShellFolder#getLinkLocation()->ShellFolder::: shell folder get link location
sun.awt.shell.ShellFolder#getDisplayName()->String::: shell folder get display name
sun.awt.shell.ShellFolder#getFolderType()->String::: shell folder get folder type
sun.awt.shell.ShellFolder#getExecutableType()->String::: shell folder get executable type
sun.awt.shell.ShellFolder#compareTo(File)->int:::Compares this ShellFolder with the specified ShellFolder for order.
sun.awt.shell.ShellFolder#getIcon(boolean)->Image::: shell folder get icon
sun.awt.shell.ShellFolder#getShellFolder(File)->ShellFolder:::Return a shell folder from a file object
sun.awt.shell.ShellFolder#get(String)->Object::: shell folder get
sun.awt.shell.ShellFolder#isComputerNode(File)->boolean:::Does dir represent a "computer" such as a node on the network, or "My Computer" on the desktop.
sun.awt.shell.ShellFolder#isFileSystemRoot(File)->boolean::: shell folder is file system root
sun.awt.shell.ShellFolder#getNormalizedFile(File)->File:::Canonicalizes files that don't have symbolic links in their path
sun.awt.shell.ShellFolder#sort(List)->void::: shell folder sort
sun.awt.shell.ShellFolder#sortChildren(List)->void::: shell folder sort children
sun.awt.shell.ShellFolder#isAbsolute()->boolean::: shell folder is absolute
sun.awt.shell.ShellFolder#getAbsoluteFile()->File::: shell folder get absolute file
sun.awt.shell.ShellFolder#canRead()->boolean::: shell folder can read
sun.awt.shell.ShellFolder#canWrite()->boolean:::Returns true if folder allows creation of children
sun.awt.shell.ShellFolder#exists()->boolean::: shell folder exists
sun.awt.shell.ShellFolder#isDirectory()->boolean::: shell folder is directory
sun.awt.shell.ShellFolder#isFile()->boolean::: shell folder is file
sun.awt.shell.ShellFolder#lastModified()->long::: shell folder last modified
sun.awt.shell.ShellFolder#length()->long::: shell folder length
sun.awt.shell.ShellFolder#createNewFile()->boolean::: shell folder create new file
sun.awt.shell.ShellFolder#delete()->boolean::: shell folder delete
sun.awt.shell.ShellFolder#deleteOnExit()->void::: shell folder delete on exit
sun.awt.shell.ShellFolder#mkdir()->boolean::: shell folder mkdir
sun.awt.shell.ShellFolder#mkdirs()->boolean::: shell folder mkdirs
sun.awt.shell.ShellFolder#renameTo(File)->boolean::: shell folder rename to
sun.awt.shell.ShellFolder#setLastModified(long)->boolean::: shell folder set last modified
sun.awt.shell.ShellFolder#setReadOnly()->boolean::: shell folder set read only
sun.awt.shell.ShellFolder#toString()->String::: shell folder to string
sun.awt.shell.ShellFolder#getFolderColumns(File)->ShellFolderColumnInfo[]::: shell folder get folder columns
sun.awt.shell.ShellFolder#getFolderColumns()->ShellFolderColumnInfo[]::: shell folder get folder columns
sun.awt.shell.ShellFolder#getFolderColumnValue(File, int)->Object::: shell folder get folder column value
sun.awt.shell.ShellFolder#getFolderColumnValue(int)->Object::: shell folder get folder column value
sun.awt.shell.ShellFolder#invoke(Callable)->T:::Invokes the task which doesn't throw checked exceptions from its call method
sun.awt.shell.ShellFolder#invoke(Callable, Class)->T:::Invokes the task which throws checked exceptions from its call method
sun.awt.shell.ShellFolder.Invoker#invoke(Callable)->T:::Invokes a callable task.
sun.awt.shell.ShellFolderColumnInfo#getTitle()->String::: shell folder column info get title
sun.awt.shell.ShellFolderColumnInfo#setTitle(String)->void::: shell folder column info set title
sun.awt.shell.ShellFolderColumnInfo#getWidth()->Integer::: shell folder column info get width
sun.awt.shell.ShellFolderColumnInfo#setWidth(Integer)->void::: shell folder column info set width
sun.awt.shell.ShellFolderColumnInfo#getAlignment()->Integer::: shell folder column info get alignment
sun.awt.shell.ShellFolderColumnInfo#setAlignment(Integer)->void::: shell folder column info set alignment
sun.awt.shell.ShellFolderColumnInfo#isVisible()->boolean::: shell folder column info is visible
sun.awt.shell.ShellFolderColumnInfo#setVisible(boolean)->void::: shell folder column info set visible
sun.awt.shell.ShellFolderColumnInfo#getSortOrder()->SortOrder::: shell folder column info get sort order
sun.awt.shell.ShellFolderColumnInfo#setSortOrder(SortOrder)->void::: shell folder column info set sort order
sun.awt.shell.ShellFolderColumnInfo#getComparator()->Comparator::: shell folder column info get comparator
sun.awt.shell.ShellFolderColumnInfo#setComparator(Comparator)->void::: shell folder column info set comparator
sun.awt.shell.ShellFolderColumnInfo#isCompareByColumn()->boolean::: shell folder column info is compare by column
sun.awt.shell.ShellFolderColumnInfo#setCompareByColumn(boolean)->void::: shell folder column info set compare by column
sun.awt.shell.ShellFolderManager#createShellFolder(File)->ShellFolder:::Create a shell folder from a file
sun.awt.shell.ShellFolderManager#get(String)->Object::: shell folder manager get
sun.awt.shell.ShellFolderManager#isComputerNode(File)->boolean:::Does dir represent a "computer" such as a node on the network, or "My Computer" on the desktop.
sun.awt.shell.ShellFolderManager#isFileSystemRoot(File)->boolean::: shell folder manager is file system root
sun.awt.shell.ShellFolderManager#createInvoker()->ShellFolder.Invoker::: shell folder manager create invoker
sun.awt.shell.Win32ShellFolder2.FolderDisposer#dispose()->void::: folder disposer dispose
sun.awt.shell.Win32ShellFolder2#createShellFolder(Win32ShellFolder2, long)->Win32ShellFolder2:::Creates a shell folder with a parent and relative PIDL
sun.awt.shell.Win32ShellFolder2#setIsPersonal()->void:::Marks this folder as being the My Documents (Personal) folder
sun.awt.shell.Win32ShellFolder2#writeReplace()->Object:::This method is implemented to make sure that no instances of ShellFolder are ever serialized
sun.awt.shell.Win32ShellFolder2#dispose()->void:::Finalizer to clean up any COM objects or PIDLs used by this object.
sun.awt.shell.Win32ShellFolder2#getNextPIDLEntry(long)->long::: win32 shell folder2 get next entry
sun.awt.shell.Win32ShellFolder2#copyFirstPIDLEntry(long)->long::: win32 shell folder2 copy first entry
sun.awt.shell.Win32ShellFolder2#releasePIDL(long)->void::: win32 shell folder2 release l
sun.awt.shell.Win32ShellFolder2#getParentIShellFolder()->long:::Get the parent ShellFolder's IShellFolder interface
sun.awt.shell.Win32ShellFolder2#getRelativePIDL()->long:::Accessor for relative PIDL
sun.awt.shell.Win32ShellFolder2#getDesktop()->Win32ShellFolder2:::Helper function to return the desktop
sun.awt.shell.Win32ShellFolder2#getDesktopIShellFolder()->long:::Helper function to return the desktop IShellFolder interface
sun.awt.shell.Win32ShellFolder2#equals(Object)->boolean:::Check to see if two ShellFolder objects are the same
sun.awt.shell.Win32ShellFolder2#isFileSystem()->boolean::: win32 shell folder2 is file system
sun.awt.shell.Win32ShellFolder2#hasAttribute(int)->boolean:::Return whether the given attribute flag is set for this object
sun.awt.shell.Win32ShellFolder2#getFileSystemPath(int)->String::: win32 shell folder2 get file system path
sun.awt.shell.Win32ShellFolder2#getParentFile()->File::: win32 shell folder2 get parent file
sun.awt.shell.Win32ShellFolder2#isDirectory()->boolean::: win32 shell folder2 is directory
sun.awt.shell.Win32ShellFolder2#listFiles(boolean)->File[]::: win32 shell folder2 list files
sun.awt.shell.Win32ShellFolder2#getChildByPath(String)->Win32ShellFolder2:::Look for (possibly special) child folder by it's path
sun.awt.shell.Win32ShellFolder2#isLink()->boolean::: win32 shell folder2 is link
sun.awt.shell.Win32ShellFolder2#isHidden()->boolean::: win32 shell folder2 is hidden
sun.awt.shell.Win32ShellFolder2#getLinkLocation()->ShellFolder::: win32 shell folder2 get link location
sun.awt.shell.Win32ShellFolder2#parseDisplayName(String)->long::: win32 shell folder2 parse display name
sun.awt.shell.Win32ShellFolder2#getDisplayName()->String::: win32 shell folder2 get display name
sun.awt.shell.Win32ShellFolder2#getFolderType()->String::: win32 shell folder2 get folder type
sun.awt.shell.Win32ShellFolder2#getExecutableType()->String::: win32 shell folder2 get executable type
sun.awt.shell.Win32ShellFolder2#getStandardViewButton0(int, boolean)->int[]::: win32 shell folder2 get standard view button0
sun.awt.shell.Win32ShellFolder2#getIcon(boolean)->Image::: win32 shell folder2 get icon
sun.awt.shell.Win32ShellFolder2#getSystemIcon(SystemIcon)->Image:::Gets an icon from the Windows system icon list as an Image
sun.awt.shell.Win32ShellFolder2#getShell32Icon(int, boolean)->Image:::Gets an icon from the Windows system icon list as an Image
sun.awt.shell.Win32ShellFolder2#getCanonicalFile()->File:::Returns the canonical form of this abstract pathname
sun.awt.shell.Win32ShellFolder2#isSpecial()->boolean::: win32 shell folder2 is special
sun.awt.shell.Win32ShellFolder2#compareTo(File)->int:::Compares this object with the specified object for order.
sun.awt.shell.Win32ShellFolder2#getFolderColumns()->ShellFolderColumnInfo[]::: win32 shell folder2 get folder columns
sun.awt.shell.Win32ShellFolder2#getFolderColumnValue(int)->Object::: win32 shell folder2 get folder column value
sun.awt.shell.Win32ShellFolder2#isLibrary()->boolean::: win32 shell folder2 is library
sun.awt.shell.Win32ShellFolder2#sortChildren(List)->void::: win32 shell folder2 sort children
sun.awt.shell.Win32ShellFolder2.MultiResolutionIconImage#getWidth(ImageObserver)->int::: multi resolution icon image get width
sun.awt.shell.Win32ShellFolder2.MultiResolutionIconImage#getHeight(ImageObserver)->int::: multi resolution icon image get height
sun.awt.shell.Win32ShellFolder2.MultiResolutionIconImage#getBaseImage()->Image::: multi resolution icon image get base image
sun.awt.shell.Win32ShellFolder2.MultiResolutionIconImage#getResolutionVariant(double, double)->Image::: multi resolution icon image get resolution variant
sun.awt.shell.Win32ShellFolder2.MultiResolutionIconImage#getResolutionVariants()->List::: multi resolution icon image get resolution variants
sun.awt.shell.Win32ShellFolderManager2#createShellFolder(File)->ShellFolder::: win32 shell folder manager2 create shell folder
sun.awt.shell.Win32ShellFolderManager2#createShellFolder(Win32ShellFolder2, File)->Win32ShellFolder2::: win32 shell folder manager2 create shell folder
sun.awt.shell.Win32ShellFolderManager2#createShellFolderFromRelativePIDL(Win32ShellFolder2, long)->Win32ShellFolder2::: win32 shell folder manager2 create shell folder from relative l
sun.awt.shell.Win32ShellFolderManager2#getDesktop()->Win32ShellFolder2::: win32 shell folder manager2 get desktop
sun.awt.shell.Win32ShellFolderManager2#getDrives()->Win32ShellFolder2::: win32 shell folder manager2 get drives
sun.awt.shell.Win32ShellFolderManager2#getRecent()->Win32ShellFolder2::: win32 shell folder manager2 get recent
sun.awt.shell.Win32ShellFolderManager2#getNetwork()->Win32ShellFolder2::: win32 shell folder manager2 get network
sun.awt.shell.Win32ShellFolderManager2#getPersonal()->Win32ShellFolder2::: win32 shell folder manager2 get personal
sun.awt.shell.Win32ShellFolderManager2#get(String)->Object::: win32 shell folder manager2 get
sun.awt.shell.Win32ShellFolderManager2#checkFiles(File[])->File[]::: win32 shell folder manager2 check files
sun.awt.shell.Win32ShellFolderManager2#isComputerNode(File)->boolean:::Does dir represent a "computer" such as a node on the network, or "My Computer" on the desktop.
sun.awt.shell.Win32ShellFolderManager2#isFileSystemRoot(File)->boolean::: win32 shell folder manager2 is file system root
sun.awt.shell.Win32ShellFolderManager2#compareShellFolders(Win32ShellFolder2, Win32ShellFolder2)->int::: win32 shell folder manager2 compare shell folders
sun.awt.shell.Win32ShellFolderManager2#compareNames(String, String)->int::: win32 shell folder manager2 compare names
sun.awt.shell.Win32ShellFolderManager2#createInvoker()->Invoker::: win32 shell folder manager2 create invoker
sun.awt.shell.Win32ShellFolderManager2#initializeCom()->void::: win32 shell folder manager2 initialize com
sun.awt.shell.Win32ShellFolderManager2#uninitializeCom()->void::: win32 shell folder manager2 uninitialize com

Augmentations#putItem(String, Object):::Add additional information identified by a key to the Augmentations structure.:::
Augmentations#getItem(String):::Get information identified by a key from the Augmentations structure:::
Augmentations#removeItem(String):::Remove additional info from the Augmentations structure:::
Augmentations#keys():::Returns an enumeration of the keys in the Augmentations structure:::
Augmentations#removeAllItems():::Remove all objects from the Augmentations structure.:::
NamespaceContext#pushContext():::Start a new Namespace context:::
NamespaceContext#popContext():::Revert to the previous Namespace context:::
NamespaceContext#declarePrefix(String, String):::Declare a Namespace prefix:::
NamespaceContext#getURI(String):::Look up a prefix and get the currently-mapped Namespace URI:::
NamespaceContext#getPrefix(String):::Look up a namespace URI and get one of the mapped prefix:::
NamespaceContext#getDeclaredPrefixCount():::Return a count of locally declared prefixes, including the default prefix if bound.:::
NamespaceContext#getDeclaredPrefixAt(int):::Returns the prefix at the specified index in the current context.:::
NamespaceContext#getAllPrefixes():::Return an enumeration of all prefixes whose declarations are active in the current context:::
NamespaceContext#reset():::Reset this Namespace support object for reuse:::
QName#setValues(QName):::Convenience method to set the values of the qname components.:::
QName#setValues(String, String, String, String):::Convenience method to set the values of the qname components.:::
QName#clear():::Clears the values of the qname components.:::
QName#clone():::Returns a clone of this object.:::return->new->QName
QName#hashCode():::Returns the hashcode for this object.:::if->return->uri->hashCode->localpart->hashCode->return->rawname->hashCode
QName#equals(Object):::Returns true if the two objects are equal.:::if->return->if->qname->if->return->equals->equals->else->if->return->rawname->equals->return
QName#toString():::Returns a string representation of this object.:::str->new->StringBuffer->comma->if->str->append->if->if->str->append->str->append->if->if->str->append->str->append->if->if->str->append->str->append->return->str->toString
XMLAttributes#addAttribute(QName, String, String):::Adds an attribute:::
XMLAttributes#removeAllAttributes():::Removes all of the attributes:::
XMLAttributes#removeAttributeAt(int):::Removes the attribute at the specified index:::
XMLAttributes#getLength():::Returns the number of attributes in the list:::
XMLAttributes#getIndex(String):::Look up the index of an attribute by XML 1.0 qualified name.:::
XMLAttributes#getIndex(String, String):::Look up the index of an attribute by Namespace name.:::
XMLAttributes#setName(int, QName):::Sets the name of the attribute at the specified index.:::
XMLAttributes#getName(int, QName):::Sets the fields in the given QName structure with the values of the attribute name at the specified index.:::
XMLAttributes#getPrefix(int):::Returns the prefix of the attribute at the specified index.:::
XMLAttributes#getURI(int):::Look up an attribute's Namespace URI by index.:::
XMLAttributes#getLocalName(int):::Look up an attribute's local name by index.:::
XMLAttributes#getQName(int):::Look up an attribute's XML 1.0 qualified name by index.:::
XMLAttributes#setType(int, String):::Sets the type of the attribute at the specified index.:::
XMLAttributes#getType(int):::Look up an attribute's type by index:::
XMLAttributes#getType(String):::Look up an attribute's type by XML 1.0 qualified name:::
XMLAttributes#getType(String, String):::Look up an attribute's type by Namespace name:::
XMLAttributes#setValue(int, String):::Sets the value of the attribute at the specified index:::
XMLAttributes#getValue(int):::Look up an attribute's value by index:::
XMLAttributes#getValue(String):::Look up an attribute's value by XML 1.0 qualified name:::
XMLAttributes#getValue(String, String):::Look up an attribute's value by Namespace name:::
XMLAttributes#setNonNormalizedValue(int, String):::Sets the non-normalized value of the attribute at the specified index.:::
XMLAttributes#getNonNormalizedValue(int):::Returns the non-normalized value of the attribute at the specified index:::
XMLAttributes#setSpecified(int, boolean):::Sets whether an attribute is specified in the instance document or not.:::
XMLAttributes#isSpecified(int):::Returns true if the attribute is specified in the instance document.:::
XMLAttributes#getAugmentations(int):::Look up an augmentation by attribute's index.:::
XMLAttributes#getAugmentations(String, String):::Look up an augmentation by namespace name.:::
XMLAttributes#getAugmentations(String):::Look up an augmentation by XML 1.0 qualified name:::
XMLAttributes#setAugmentations(int, Augmentations):::Sets the augmentations of the attribute at the specified index.:::
XMLDocumentFragmentHandler#startDocumentFragment(XMLLocator, NamespaceContext, Augmentations):::The start of the document fragment.:::
XMLDocumentFragmentHandler#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies the start of a general entity:::
XMLDocumentFragmentHandler#textDecl(String, String, Augmentations):::Notifies of the presence of a TextDecl line in an entity:::
XMLDocumentFragmentHandler#endGeneralEntity(String, Augmentations):::This method notifies the end of a general entity:::
XMLDocumentFragmentHandler#comment(XMLString, Augmentations):::A comment.:::
XMLDocumentFragmentHandler#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::
XMLDocumentFragmentHandler#startElement(QName, XMLAttributes, Augmentations):::The start of an element.:::
XMLDocumentFragmentHandler#emptyElement(QName, XMLAttributes, Augmentations):::An empty element.:::
XMLDocumentFragmentHandler#characters(XMLString, Augmentations):::Character content.:::
XMLDocumentFragmentHandler#ignorableWhitespace(XMLString, Augmentations):::Ignorable whitespace:::
XMLDocumentFragmentHandler#endElement(QName, Augmentations):::The end of an element.:::
XMLDocumentFragmentHandler#startCDATA(Augmentations):::The start of a CDATA section.:::
XMLDocumentFragmentHandler#endCDATA(Augmentations):::The end of a CDATA section.:::
XMLDocumentFragmentHandler#endDocumentFragment(Augmentations):::The end of the document fragment.:::
XMLDocumentHandler#startDocument(XMLLocator, String, NamespaceContext, Augmentations):::The start of the document.:::
XMLDocumentHandler#xmlDecl(String, String, String, Augmentations):::Notifies of the presence of an XMLDecl line in the document:::
XMLDocumentHandler#doctypeDecl(String, String, String, Augmentations):::Notifies of the presence of the DOCTYPE line in the document.:::
XMLDocumentHandler#comment(XMLString, Augmentations):::A comment.:::
XMLDocumentHandler#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::
XMLDocumentHandler#startElement(QName, XMLAttributes, Augmentations):::The start of an element.:::
XMLDocumentHandler#emptyElement(QName, XMLAttributes, Augmentations):::An empty element.:::
XMLDocumentHandler#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies the start of a general entity:::
XMLDocumentHandler#textDecl(String, String, Augmentations):::Notifies of the presence of a TextDecl line in an entity:::
XMLDocumentHandler#endGeneralEntity(String, Augmentations):::This method notifies the end of a general entity:::
XMLDocumentHandler#characters(XMLString, Augmentations):::Character content.:::
XMLDocumentHandler#ignorableWhitespace(XMLString, Augmentations):::Ignorable whitespace:::
XMLDocumentHandler#endElement(QName, Augmentations):::The end of an element.:::
XMLDocumentHandler#startCDATA(Augmentations):::The start of a CDATA section.:::
XMLDocumentHandler#endCDATA(Augmentations):::The end of a CDATA section.:::
XMLDocumentHandler#endDocument(Augmentations):::The end of the document.:::
XMLDocumentHandler#setDocumentSource(XMLDocumentSource):::Sets the document source.:::
XMLDocumentHandler#getDocumentSource():::Returns the document source.:::
XMLDTDContentModelHandler#startContentModel(String, Augmentations):::The start of a content model:::
XMLDTDContentModelHandler#any(Augmentations):::A content model of ANY.:::
XMLDTDContentModelHandler#empty(Augmentations):::A content model of EMPTY.:::
XMLDTDContentModelHandler#startGroup(Augmentations):::A start of either a mixed or children content model:::
XMLDTDContentModelHandler#pcdata(Augmentations):::The appearance of "#PCDATA" within a group signifying a mixed content model:::
XMLDTDContentModelHandler#element(String, Augmentations):::A referenced element in a mixed or children content model.:::
XMLDTDContentModelHandler#separator(short, Augmentations):::The separator between choices or sequences of a mixed or children content model.:::
XMLDTDContentModelHandler#occurrence(short, Augmentations):::The occurrence count for a child in a children content model or for the mixed content model group.:::
XMLDTDContentModelHandler#endGroup(Augmentations):::The end of a group for mixed or children content models.:::
XMLDTDContentModelHandler#endContentModel(Augmentations):::The end of a content model.:::
XMLDTDHandler#startDTD(XMLLocator, Augmentations):::The start of the DTD.:::
XMLDTDHandler#startParameterEntity(String, XMLResourceIdentifier, String, Augmentations):::This method notifies of the start of a parameter entity:::
XMLDTDHandler#textDecl(String, String, Augmentations):::Notifies of the presence of a TextDecl line in an entity:::
XMLDTDHandler#endParameterEntity(String, Augmentations):::This method notifies the end of a parameter entity:::
XMLDTDHandler#startExternalSubset(XMLResourceIdentifier, Augmentations):::The start of the DTD external subset.:::
XMLDTDHandler#endExternalSubset(Augmentations):::The end of the DTD external subset.:::
XMLDTDHandler#comment(XMLString, Augmentations):::A comment.:::
XMLDTDHandler#processingInstruction(String, XMLString, Augmentations):::A processing instruction:::
XMLDTDHandler#elementDecl(String, String, Augmentations):::An element declaration.:::
XMLDTDHandler#startAttlist(String, Augmentations):::The start of an attribute list.:::
XMLDTDHandler#attributeDecl(String, String, String, String[], String, XMLString, XMLString, Augmentations):::An attribute declaration.:::
XMLDTDHandler#endAttlist(Augmentations):::The end of an attribute list.:::
XMLDTDHandler#internalEntityDecl(String, XMLString, XMLString, Augmentations):::An internal entity declaration.:::
XMLDTDHandler#externalEntityDecl(String, XMLResourceIdentifier, Augmentations):::An external entity declaration.:::
XMLDTDHandler#unparsedEntityDecl(String, XMLResourceIdentifier, String, Augmentations):::An unparsed entity declaration.:::
XMLDTDHandler#notationDecl(String, XMLResourceIdentifier, Augmentations):::A notation declaration:::
XMLDTDHandler#startConditional(short, Augmentations):::The start of a conditional section.:::
XMLDTDHandler#ignoredCharacters(XMLString, Augmentations):::Characters within an IGNORE conditional section.:::
XMLDTDHandler#endConditional(Augmentations):::The end of a conditional section.:::
XMLDTDHandler#endDTD(Augmentations):::The end of the DTD.:::
XMLLocator#getPublicId():::Returns the public identifier.:::
XMLLocator#getLiteralSystemId():::Returns the literal system identifier.:::
XMLLocator#getBaseSystemId():::Returns the base system identifier.:::
XMLLocator#getExpandedSystemId():::Returns the expanded system identifier.:::
XMLLocator#getLineNumber():::Returns the line number, or -1 if no line number is available.:::
XMLLocator#getColumnNumber():::Returns the column number, or -1 if no column number is available.:::
XMLLocator#getCharacterOffset():::Returns the character offset, or -1 if no character offset is available.:::
XMLLocator#getEncoding():::Returns the encoding of the current entity:::
XMLLocator#getXMLVersion():::Returns the XML version of the current entity:::
XMLResourceIdentifier#setPublicId(String):::Sets the public identifier.:::
XMLResourceIdentifier#getPublicId():::Returns the public identifier.:::
XMLResourceIdentifier#setExpandedSystemId(String):::Sets the expanded system identifier.:::
XMLResourceIdentifier#getExpandedSystemId():::Returns the expanded system identifier.:::
XMLResourceIdentifier#setLiteralSystemId(String):::Sets the literal system identifier.:::
XMLResourceIdentifier#getLiteralSystemId():::Returns the literal system identifier.:::
XMLResourceIdentifier#setBaseSystemId(String):::Setsthe base URI against which the literal SystemId is to be         resolved.:::
XMLResourceIdentifier#getBaseSystemId()::: Returns the base URI against which the literal SystemId is to be         resolved:::
XMLResourceIdentifier#setNamespace(String):::Sets the namespace of the resource.:::
XMLResourceIdentifier#getNamespace():::Returns the namespace of the resource.:::
XMLString#setValues(char[], int, int):::Initializes the contents of the XMLString structure with the specified values.:::
XMLString#setValues(XMLString):::Initializes the contents of the XMLString structure with copies of the given string structure:::setValues
XMLString#clear():::Resets all of the values to their defaults.:::
XMLString#equals(char[], int, int):::Returns true if the contents of this XMLString structure and the specified array are equal.:::if->return->if->return->for->i->return
XMLString#equals(String):::Returns true if the contents of this XMLString structure and the specified string are equal.:::if->return->if->s->length->return->for->i->return
XMLString#toString():::Returns a string representation of this object.:::return->new->String
XNIException#getException():::Returns the wrapped exception.:::return

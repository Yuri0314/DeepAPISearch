org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactNode#inferStamp()->boolean::: integer add exact node infer stamp
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactNode#foldStamp(Stamp, Stamp)->Stamp::: integer add exact node fold stamp
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->ValueNode::: integer add exact node canonical
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactNode#getGuard()->GuardingNode::: integer add exact node get guard
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactNode#setGuard(GuardingNode)->void::: integer add exact node set guard
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactOverflowNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->ValueNode::: integer add exact overflow node canonical
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactOverflowNode#createSplit(Stamp, AbstractBeginNode, AbstractBeginNode)->IntegerExactArithmeticSplitNode::: integer add exact overflow node create split
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactOverflowNode#getCoupledType()->Class::: integer add exact overflow node get coupled type
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactSplitNode#generateArithmetic(NodeLIRBuilderTool)->Value::: integer add exact split node generate arithmetic
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerAddExactSplitNode#simplify(SimplifierTool)->void::: integer add exact split node simplify
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#getPrimarySuccessor()->AbstractBeginNode::: integer exact arithmetic split node get primary successor
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#probability(AbstractBeginNode)->double::: integer exact arithmetic split node probability
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#setProbability(AbstractBeginNode, double)->boolean::: integer exact arithmetic split node set probability
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#getNext()->AbstractBeginNode::: integer exact arithmetic split node get next
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#getOverflowSuccessor()->AbstractBeginNode::: integer exact arithmetic split node get overflow successor
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#setNext(AbstractBeginNode)->void::: integer exact arithmetic split node set next
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#setOverflowSuccessor(AbstractBeginNode)->void::: integer exact arithmetic split node set overflow successor
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#getX()->ValueNode::: integer exact arithmetic split node get x
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#getY()->ValueNode::: integer exact arithmetic split node get y
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#generate(NodeLIRBuilderTool)->void::: integer exact arithmetic split node generate
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#generateArithmetic(NodeLIRBuilderTool)->Value::: integer exact arithmetic split node generate arithmetic
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactArithmeticSplitNode#getSuccessorCount()->int::: integer exact arithmetic split node get successor count
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactOverflowNode#getX()->ValueNode::: integer exact overflow node get x
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactOverflowNode#getY()->ValueNode::: integer exact overflow node get y
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactOverflowNode#maybeCommuteInputs()->LogicNode:::Make sure the overflow detection nodes have the same order of inputs as the exact arithmetic nodes.
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactOverflowNode#createSplit(Stamp, AbstractBeginNode, AbstractBeginNode)->IntegerExactArithmeticSplitNode::: integer exact overflow node create split
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactOverflowNode#getCoupledType()->Class::: integer exact overflow node get coupled type
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerExactOverflowNode#simplify(SimplifierTool)->void::: integer exact overflow node simplify
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerMulExactNode#inferStamp()->boolean::: integer mul exact node infer stamp
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerMulExactNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->ValueNode::: integer mul exact node canonical
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerMulExactNode#getGuard()->GuardingNode::: integer mul exact node get guard
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerMulExactNode#setGuard(GuardingNode)->void::: integer mul exact node set guard
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerMulExactOverflowNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->ValueNode::: integer mul exact overflow node canonical
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerMulExactOverflowNode#createSplit(Stamp, AbstractBeginNode, AbstractBeginNode)->IntegerExactArithmeticSplitNode::: integer mul exact overflow node create split
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerMulExactOverflowNode#getCoupledType()->Class::: integer mul exact overflow node get coupled type
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerMulExactSplitNode#generateArithmetic(NodeLIRBuilderTool)->Value::: integer mul exact split node generate arithmetic
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerMulExactSplitNode#simplify(SimplifierTool)->void::: integer mul exact split node simplify
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerSubExactNode#inferStamp()->boolean::: integer sub exact node infer stamp
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerSubExactNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->ValueNode::: integer sub exact node canonical
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerSubExactNode#getGuard()->GuardingNode::: integer sub exact node get guard
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerSubExactNode#setGuard(GuardingNode)->void::: integer sub exact node set guard
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerSubExactOverflowNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->ValueNode::: integer sub exact overflow node canonical
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerSubExactOverflowNode#createSplit(Stamp, AbstractBeginNode, AbstractBeginNode)->IntegerExactArithmeticSplitNode::: integer sub exact overflow node create split
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerSubExactOverflowNode#getCoupledType()->Class::: integer sub exact overflow node get coupled type
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerSubExactSplitNode#generateArithmetic(NodeLIRBuilderTool)->Value::: integer sub exact split node generate arithmetic
org.graalvm.compiler.replacements.nodes.arithmetic.IntegerSubExactSplitNode#simplify(SimplifierTool)->void::: integer sub exact split node simplify
org.graalvm.compiler.replacements.nodes.arithmetic.UnsignedMulHighNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)->void::: unsigned mul high node generate
org.graalvm.compiler.replacements.nodes.arithmetic.UnsignedMulHighNode#canonical(CanonicalizerTool, ValueNode, ValueNode)->ValueNode::: unsigned mul high node canonical

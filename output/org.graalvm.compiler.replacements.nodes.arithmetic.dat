IntegerAddExactNode#inferStamp()::: integer add exact node infer stamp:::return
IntegerAddExactNode#foldStamp(Stamp, Stamp)::: integer add exact node fold stamp:::a->b->bits->a->getBits->defaultMask->CodeUtil->mask->variableBits->a->downMask->a->upMask->b->downMask->b->upMask->variableBitsWithCarry->a->downMask->b->downMask->carryBits->a->upMask->b->upMask->carryBits->newDownMask->a->downMask->b->downMask->newUpMask->a->downMask->b->downMask->newLowerBound->newUpperBound->lowerOverflowsPositively->a->lowerBound->b->lowerBound->addOverflowsPositively->upperOverflowsPositively->a->upperBound->b->upperBound->addOverflowsPositively->lowerOverflowsNegatively->a->lowerBound->b->lowerBound->addOverflowsNegatively->upperOverflowsNegatively->a->upperBound->b->upperBound->addOverflowsNegatively->if->CodeUtil->maxValue->else->if->CodeUtil->minValue->else->CodeUtil->a->lowerBound->b->lowerBound->signExtend->if->CodeUtil->maxValue->else->if->CodeUtil->minValue->else->CodeUtil->a->upperBound->b->upperBound->signExtend->limit->StampFactory->forInteger->limit->upMask->CodeUtil->signExtend->limit->downMask->return->IntegerStamp->create
IntegerAddExactNode#canonical(CanonicalizerTool, ValueNode, ValueNode)::: integer add exact node canonical:::if->forX->isConstant->forY->isConstant->return->new->IntegerAddExactNode->canonical->if->forX->isConstant->forY->isConstant->return->canonicalXYconstant->else->if->forY->isConstant->c->forY->asJavaConstant->asLong->if->return->if->IntegerStamp->forX->stamp->forY->stamp->addCanOverflow->return->new->AddNode->canonical->return
IntegerAddExactNode#canonicalXYconstant(ValueNode, ValueNode)::: integer add exact node canonical yconstant:::xConst->forX->asJavaConstant->yConst->forY->asJavaConstant->try->if->xConst->getJavaKind->return->ConstantNode->Math->xConst->asInt->yConst->asInt->addExact->forInt->else->return->ConstantNode->Math->xConst->asLong->yConst->asLong->addExact->forLong->catch->finally->return
IntegerAddExactNode#getGuard()::: integer add exact node get guard:::return
IntegerAddExactNode#setGuard(GuardingNode)::: integer add exact node set guard:::updateUsagesInterface
IntegerAddExactOverflowNode#canonical(CanonicalizerTool, ValueNode, ValueNode)::: integer add exact overflow node canonical:::if->forX->isConstant->forY->isConstant->return->new->IntegerAddExactOverflowNode->canonical->if->forX->isConstant->forY->isConstant->return->canonicalXYconstant->else->if->forY->isConstant->c->forY->asJavaConstant->asLong->if->return->LogicConstantNode->forBoolean->if->IntegerStamp->forX->stamp->forY->stamp->addCanOverflow->return->LogicConstantNode->forBoolean->return
IntegerAddExactOverflowNode#canonicalXYconstant(ValueNode, ValueNode)::: integer add exact overflow node canonical yconstant:::xConst->forX->asJavaConstant->yConst->forY->asJavaConstant->try->if->xConst->getJavaKind->Math->xConst->asInt->yConst->asInt->addExact->else->Math->xConst->asLong->yConst->asLong->addExact->catch->return->LogicConstantNode->forBoolean->finally->return->LogicConstantNode->forBoolean
IntegerAddExactOverflowNode#createSplit(Stamp, AbstractBeginNode, AbstractBeginNode)::: integer add exact overflow node create split:::return->new->IntegerAddExactSplitNode
IntegerAddExactOverflowNode#getCoupledType()::: integer add exact overflow node get coupled type:::return
IntegerAddExactSplitNode#generateArithmetic(NodeLIRBuilderTool)::: integer add exact split node generate arithmetic:::return->gen->getLIRGeneratorTool->getArithmetic->gen->getX->operand->gen->getY->operand->emitAdd
IntegerAddExactSplitNode#simplify(SimplifierTool)::: integer add exact split node simplify:::view->NodeView->from->if->IntegerStamp->x->stamp->y->stamp->addCanOverflow->tool->deleteBranch->tool->addToWorkList->replacement->graph->new->AddNode->unique->graph->replaceSplitWithFloating->tool->addToWorkList
IntegerExactArithmeticSplitNode#getPrimarySuccessor()::: integer exact arithmetic split node get primary successor:::return
IntegerExactArithmeticSplitNode#probability(AbstractBeginNode)::: integer exact arithmetic split node probability:::return
IntegerExactArithmeticSplitNode#setProbability(AbstractBeginNode, double)::: integer exact arithmetic split node set probability:::return
IntegerExactArithmeticSplitNode#getNext()::: integer exact arithmetic split node get next:::return
IntegerExactArithmeticSplitNode#getOverflowSuccessor()::: integer exact arithmetic split node get overflow successor:::return
IntegerExactArithmeticSplitNode#setNext(AbstractBeginNode)::: integer exact arithmetic split node set next:::updatePredecessor
IntegerExactArithmeticSplitNode#setOverflowSuccessor(AbstractBeginNode)::: integer exact arithmetic split node set overflow successor:::updatePredecessor
IntegerExactArithmeticSplitNode#getX()::: integer exact arithmetic split node get x:::return
IntegerExactArithmeticSplitNode#getY()::: integer exact arithmetic split node get y:::return
IntegerExactArithmeticSplitNode#generate(NodeLIRBuilderTool)::: integer exact arithmetic split node generate:::generator->generateArithmetic->setResult->generator->getOverflowSuccessor->getNext->getOverflowSuccessor->probability->emitOverflowCheckBranch
IntegerExactArithmeticSplitNode#generateArithmetic(NodeLIRBuilderTool)::: integer exact arithmetic split node generate arithmetic:::
IntegerExactArithmeticSplitNode#getSuccessorCount()::: integer exact arithmetic split node get successor count:::return
IntegerExactOverflowNode#getX()::: integer exact overflow node get x:::return
IntegerExactOverflowNode#getY()::: integer exact overflow node get y:::return
IntegerExactOverflowNode#maybeCommuteInputs():::Make sure the overflow detection nodes have the same order of inputs as the exact arithmetic nodes.:::if->y->isConstant->x->isConstant->x->getId->y->getId->tmp->if->graph->duplicate->graph->findDuplicate->if->return->return
IntegerExactOverflowNode#createSplit(Stamp, AbstractBeginNode, AbstractBeginNode)::: integer exact overflow node create split:::
IntegerExactOverflowNode#getCoupledType()::: integer exact overflow node get coupled type:::
IntegerExactOverflowNode#simplify(SimplifierTool)::: integer exact overflow node simplify:::foreach->usages->filter->snapshot->next->ifNode->falseSuccessor->overflow->ifNode->trueSuccessor->ifNode->clearSuccessors->coupledNodes->next->usages->getCoupledType->filter->exact->return->exact->getX->getX->exact->getY->getY->filter->snapshot->splitStamp->x->stamp->unrestricted->if->coupledNodes->isEmpty->coupledNodes->iterator->next->stamp->split->graph->createSplit->add->ifNode->replaceAndDelete->coupledNodes->n->replaceAndDelete->forEach
IntegerMulExactNode#inferStamp()::: integer mul exact node infer stamp:::return
IntegerMulExactNode#canonical(CanonicalizerTool, ValueNode, ValueNode)::: integer mul exact node canonical:::if->forX->isConstant->forY->isConstant->return->new->IntegerMulExactNode->canonical->if->forX->isConstant->forY->isConstant->return->canonicalXYconstant->else->if->forY->isConstant->c->forY->asJavaConstant->asLong->if->return->if->return->ConstantNode->stamp->forIntegerStamp->if->IntegerStamp->x->stamp->y->stamp->multiplicationCanOverflow->return->new->MulNode->canonical->return
IntegerMulExactNode#canonicalXYconstant(ValueNode, ValueNode)::: integer mul exact node canonical yconstant:::xConst->forX->asJavaConstant->yConst->forY->asJavaConstant->try->if->xConst->getJavaKind->return->ConstantNode->Math->xConst->asInt->yConst->asInt->multiplyExact->forInt->else->return->ConstantNode->Math->xConst->asLong->yConst->asLong->multiplyExact->forLong->catch->finally->return
IntegerMulExactNode#getGuard()::: integer mul exact node get guard:::return
IntegerMulExactNode#setGuard(GuardingNode)::: integer mul exact node set guard:::updateUsagesInterface
IntegerMulExactOverflowNode#canonical(CanonicalizerTool, ValueNode, ValueNode)::: integer mul exact overflow node canonical:::if->forX->isConstant->forY->isConstant->return->new->IntegerMulExactOverflowNode->canonical->if->forX->isConstant->forY->isConstant->return->canonicalXYconstant->else->if->forY->isConstant->c->forY->asJavaConstant->asLong->if->return->LogicConstantNode->forBoolean->if->IntegerStamp->x->stamp->y->stamp->multiplicationCanOverflow->return->LogicConstantNode->forBoolean->return
IntegerMulExactOverflowNode#canonicalXYconstant(ValueNode, ValueNode)::: integer mul exact overflow node canonical yconstant:::xConst->forX->asJavaConstant->yConst->forY->asJavaConstant->try->if->xConst->getJavaKind->Math->xConst->asInt->yConst->asInt->multiplyExact->else->Math->xConst->asLong->yConst->asLong->multiplyExact->catch->return->LogicConstantNode->forBoolean->finally->return->LogicConstantNode->forBoolean
IntegerMulExactOverflowNode#createSplit(Stamp, AbstractBeginNode, AbstractBeginNode)::: integer mul exact overflow node create split:::return->new->IntegerMulExactSplitNode
IntegerMulExactOverflowNode#getCoupledType()::: integer mul exact overflow node get coupled type:::return
IntegerMulExactSplitNode#generateArithmetic(NodeLIRBuilderTool)::: integer mul exact split node generate arithmetic:::return->gen->getLIRGeneratorTool->getArithmetic->gen->getX->operand->gen->getY->operand->emitMul
IntegerMulExactSplitNode#simplify(SimplifierTool)::: integer mul exact split node simplify:::view->NodeView->from->if->IntegerStamp->x->stamp->y->stamp->multiplicationCanOverflow->tool->deleteBranch->tool->addToWorkList->replacement->graph->new->MulNode->unique->graph->replaceSplitWithFloating->tool->addToWorkList
IntegerSubExactNode#inferStamp()::: integer sub exact node infer stamp:::return
IntegerSubExactNode#canonical(CanonicalizerTool, ValueNode, ValueNode)::: integer sub exact node canonical:::if->GraphUtil->unproxify->GraphUtil->unproxify->return->ConstantNode->stamp->forIntegerStamp->if->forX->isConstant->forY->isConstant->return->canonicalXYconstant->else->if->forY->isConstant->c->forY->asJavaConstant->asLong->if->return->if->IntegerStamp->x->stamp->y->stamp->subtractionCanOverflow->return->new->SubNode->canonical->return
IntegerSubExactNode#canonicalXYconstant(ValueNode, ValueNode)::: integer sub exact node canonical yconstant:::xConst->forX->asJavaConstant->yConst->forY->asJavaConstant->try->if->xConst->getJavaKind->return->ConstantNode->Math->xConst->asInt->yConst->asInt->subtractExact->forInt->else->return->ConstantNode->Math->xConst->asLong->yConst->asLong->subtractExact->forLong->catch->finally->return
IntegerSubExactNode#getGuard()::: integer sub exact node get guard:::return
IntegerSubExactNode#setGuard(GuardingNode)::: integer sub exact node set guard:::updateUsagesInterface
IntegerSubExactOverflowNode#canonical(CanonicalizerTool, ValueNode, ValueNode)::: integer sub exact overflow node canonical:::if->GraphUtil->unproxify->GraphUtil->unproxify->return->LogicConstantNode->forBoolean->if->forX->isConstant->forY->isConstant->return->canonicalXYconstant->else->if->forY->isConstant->c->forY->asJavaConstant->asLong->if->return->LogicConstantNode->forBoolean->if->IntegerStamp->x->stamp->y->stamp->subtractionCanOverflow->return->LogicConstantNode->forBoolean->return
IntegerSubExactOverflowNode#canonicalXYconstant(ValueNode, ValueNode)::: integer sub exact overflow node canonical yconstant:::xConst->forX->asJavaConstant->yConst->forY->asJavaConstant->try->if->xConst->getJavaKind->Math->xConst->asInt->yConst->asInt->subtractExact->else->Math->xConst->asLong->yConst->asLong->subtractExact->catch->return->LogicConstantNode->forBoolean->finally->return->LogicConstantNode->forBoolean
IntegerSubExactOverflowNode#createSplit(Stamp, AbstractBeginNode, AbstractBeginNode)::: integer sub exact overflow node create split:::return->new->IntegerSubExactSplitNode
IntegerSubExactOverflowNode#getCoupledType()::: integer sub exact overflow node get coupled type:::return
IntegerSubExactSplitNode#generateArithmetic(NodeLIRBuilderTool)::: integer sub exact split node generate arithmetic:::return->gen->getLIRGeneratorTool->getArithmetic->gen->getX->operand->gen->getY->operand->emitSub
IntegerSubExactSplitNode#simplify(SimplifierTool)::: integer sub exact split node simplify:::view->NodeView->from->if->IntegerStamp->x->stamp->y->stamp->subtractionCanOverflow->tool->deleteBranch->tool->addToWorkList->replacement->graph->new->SubNode->unique->graph->replaceSplitWithFloating->tool->addToWorkList
UnsignedMulHighNode#generate(NodeLIRBuilderTool, ArithmeticLIRGeneratorTool)::: unsigned mul high node generate:::a->nodeValueMap->getX->operand->b->nodeValueMap->getY->operand->nodeValueMap->gen->emitUMulHigh->setResult
UnsignedMulHighNode#canonical(CanonicalizerTool, ValueNode, ValueNode)::: unsigned mul high node canonical:::ret->super->canonical->if->return->if->forX->isConstant->forY->isConstant->improvement->canonical->if->return->return->new->UnsignedMulHighNode->return->canonical
UnsignedMulHighNode#canonical(UnsignedMulHighNode, ValueNode)::: unsigned mul high node canonical:::if->forY->isConstant->c->forY->asConstant->if->getJavaKind->isNumericInteger->i->asLong->if->return->ConstantNode->self->stamp->forIntegerStamp->return

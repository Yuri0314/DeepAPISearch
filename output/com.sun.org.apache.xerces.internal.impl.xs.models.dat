com.sun.org.apache.xerces.internal.impl.xs.models.CMBuilder#setDeclPool(XSDeclarationPool)->void::: builder set decl pool
com.sun.org.apache.xerces.internal.impl.xs.models.CMBuilder#getContentModel(XSComplexTypeDecl, boolean)->XSCMValidator:::Get content model for the a given type
com.sun.org.apache.xerces.internal.impl.xs.models.CMBuilder#createAllCM(XSParticleDecl)->XSCMValidator::: builder create all m
com.sun.org.apache.xerces.internal.impl.xs.models.CMBuilder#createDFACM(XSParticleDecl, boolean)->XSCMValidator::: builder create m
com.sun.org.apache.xerces.internal.impl.xs.models.CMNodeFactory#reset(XMLComponentManager)->void::: node factory reset
com.sun.org.apache.xerces.internal.impl.xs.models.CMNodeFactory#reset()->void::: node factory reset
com.sun.org.apache.xerces.internal.impl.xs.models.CMNodeFactory#getCMLeafNode(int, Object, int, int)->CMNode::: node factory get leaf node
com.sun.org.apache.xerces.internal.impl.xs.models.CMNodeFactory#getCMRepeatingLeafNode(int, Object, int, int, int, int)->CMNode::: node factory get repeating leaf node
com.sun.org.apache.xerces.internal.impl.xs.models.CMNodeFactory#getCMUniOpNode(int, CMNode)->CMNode::: node factory get uni op node
com.sun.org.apache.xerces.internal.impl.xs.models.CMNodeFactory#getCMBinOpNode(int, CMNode, CMNode)->CMNode::: node factory get bin op node
com.sun.org.apache.xerces.internal.impl.xs.models.CMNodeFactory#nodeCountCheck()->void::: node factory node count check
com.sun.org.apache.xerces.internal.impl.xs.models.CMNodeFactory#resetNodeCount()->void::: node factory reset node count
com.sun.org.apache.xerces.internal.impl.xs.models.CMNodeFactory#setProperty(String, Object)->void:::Sets the value of a property
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#addElement(XSElementDecl, boolean)->void::: all m add element
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#startContentModel()->int[]:::This methods to be called on entering a first element whose type has this content model
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#findMatchingDecl(QName, SubstitutionGroupHandler)->Object::: all m find matching decl
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#oneTransition(QName, int[], SubstitutionGroupHandler)->Object:::The method corresponds to one transition in the content model.
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#endContentModel(int[])->boolean:::The method indicates the end of list of children
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#checkUniqueParticleAttribution(SubstitutionGroupHandler)->boolean:::check whether this content violates UPA constraint.
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#whatCanGoHere(int[])->List:::Check which elements are valid to appear at this point
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#checkMinMaxBounds()->List::: all m check min max bounds
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#occurenceInfo(int[])->int[]::: all m occurence info
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#getTermName(int)->String::: all m get term name
com.sun.org.apache.xerces.internal.impl.xs.models.XSAllCM#isCompactedForUPA()->boolean::: all m is compacted for a
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMBinOp#getLeft()->CMNode::: bin op get left
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMBinOp#getRight()->CMNode::: bin op get right
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMBinOp#isNullable()->boolean::: bin op is nullable
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMBinOp#calcFirstPos(CMStateSet)->void::: bin op calc first pos
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMBinOp#calcLastPos(CMStateSet)->void::: bin op calc last pos
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMLeaf#getLeaf()->Object::: leaf get leaf
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMLeaf#getParticleId()->int::: leaf get particle id
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMLeaf#getPosition()->int::: leaf get position
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMLeaf#setPosition(int)->void::: leaf set position
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMLeaf#isNullable()->boolean::: leaf is nullable
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMLeaf#toString()->String::: leaf to string
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMLeaf#calcFirstPos(CMStateSet)->void::: leaf calc first pos
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMLeaf#calcLastPos(CMStateSet)->void::: leaf calc last pos
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMRepeatingLeaf#getMinOccurs()->int::: repeating leaf get min occurs
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMRepeatingLeaf#getMaxOccurs()->int::: repeating leaf get max occurs
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMUniOp#getChild()->CMNode::: uni op get child
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMUniOp#isNullable()->boolean::: uni op is nullable
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMUniOp#calcFirstPos(CMStateSet)->void::: uni op calc first pos
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMUniOp#calcLastPos(CMStateSet)->void::: uni op calc last pos
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMUniOp#setUserData(Object)->void:::Allows the user to set arbitrary data on this content model node
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMValidator#startContentModel()->int[]:::This methods to be called on entering a first element whose type has this content model
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMValidator#oneTransition(QName, int[], SubstitutionGroupHandler)->Object:::The method corresponds to one transaction in the content model.
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMValidator#endContentModel(int[])->boolean:::The method indicates the end of list of children
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMValidator#checkUniqueParticleAttribution(SubstitutionGroupHandler)->boolean:::check whether this content violates UPA constraint.
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMValidator#whatCanGoHere(int[])->List:::Check which elements are valid to appear at this point
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMValidator#checkMinMaxBounds()->List:::Used by constant space algorithm for a{n,m} for n > 1 and m <= unbounded
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMValidator#occurenceInfo(int[])->int[]:::Returns an array containing information about the current repeating term or null if no occurrence counting was being performed at the current state.  If an array is returned it will have a length == 4 and will contain:  <ul>   <li>a[0] :: min occurs</li>   <li>a[1] :: max occurs</li>   <li>a[2] :: current value of the counter</li>   <li>a[3] :: identifier for the repeating term</li>  </ul> 
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMValidator#getTermName(int)->String:::Returns the name of the term (element or wildcard) for the given identifier.
com.sun.org.apache.xerces.internal.impl.xs.models.XSCMValidator#isCompactedForUPA()->boolean:::Checks if this content model has had its min/maxOccurs values reduced for purposes of speeding up UPA
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM.Occurence#toString()->String::: occurence to string
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#isFinalState(int)->boolean:::check whether the given state is one of the final states
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#oneTransition(QName, int[], SubstitutionGroupHandler)->Object:::one transition only
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#findMatchingDecl(QName, SubstitutionGroupHandler)->Object::: m find matching decl
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#findMatchingDecl(QName, int[], SubstitutionGroupHandler, int)->Object::: m find matching decl
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#startContentModel()->int[]::: m start content model
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#endContentModel(int[])->boolean::: m end content model
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#checkUniqueParticleAttribution(SubstitutionGroupHandler)->boolean:::check whether this content violates UPA constraint.
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#whatCanGoHere(int[])->List:::Check which elements are valid to appear at this point
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#checkMinMaxBounds()->List:::Used by constant space algorithm for a{n,m} for n > 1 and m <= unbounded
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#occurenceInfo(int[])->int[]::: m occurence info
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#getTermName(int)->String::: m get term name
com.sun.org.apache.xerces.internal.impl.xs.models.XSDFACM#isCompactedForUPA()->boolean::: m is compacted for a
com.sun.org.apache.xerces.internal.impl.xs.models.XSEmptyCM#startContentModel()->int[]:::This methods to be called on entering a first element whose type has this content model
com.sun.org.apache.xerces.internal.impl.xs.models.XSEmptyCM#oneTransition(QName, int[], SubstitutionGroupHandler)->Object:::The method corresponds to one transaction in the content model.
com.sun.org.apache.xerces.internal.impl.xs.models.XSEmptyCM#endContentModel(int[])->boolean:::The method indicates the end of list of children
com.sun.org.apache.xerces.internal.impl.xs.models.XSEmptyCM#checkUniqueParticleAttribution(SubstitutionGroupHandler)->boolean:::check whether this content violates UPA constraint.
com.sun.org.apache.xerces.internal.impl.xs.models.XSEmptyCM#whatCanGoHere(int[])->List:::Check which elements are valid to appear at this point
com.sun.org.apache.xerces.internal.impl.xs.models.XSEmptyCM#checkMinMaxBounds()->List::: empty m check min max bounds
com.sun.org.apache.xerces.internal.impl.xs.models.XSEmptyCM#occurenceInfo(int[])->int[]::: empty m occurence info
com.sun.org.apache.xerces.internal.impl.xs.models.XSEmptyCM#getTermName(int)->String::: empty m get term name
com.sun.org.apache.xerces.internal.impl.xs.models.XSEmptyCM#isCompactedForUPA()->boolean::: empty m is compacted for a

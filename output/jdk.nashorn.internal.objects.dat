AbstractIterator#getIterator(Object):::25.1.2.1 %IteratorPrototype% [ @@iterator ] ( ):::return
AbstractIterator#next(Object):::ES6 25.1.1.2 The Iterator Interface:::
AbstractIterator#makeResult(Object, Boolean, Global):::ES6 25.1.1.3 The IteratorResult Interface:::return->new->IteratorResult
AbstractIterator#getNextInvoker(Global):::Get the invoker for the ES6 iterator next method.:::return->global->new->InvokeByName->getInvokeByName
AbstractIterator#getDoneInvoker(Global):::Get the invoker for the ES6 iterator result done property.:::return->global->Bootstrap->createDynamicInvoker->getDynamicInvoker
AbstractIterator#getValueInvoker(Global):::Get the invoker for the ES6 iterator result value property.:::return->global->Bootstrap->createDynamicInvoker->getDynamicInvoker
AbstractIterator#getIterator(Object, Global):::ES6 7.4.1 GetIterator abstract operation:::object->Global->toObject->if->getter->get->if->Bootstrap->isCallable->try->invoker->getIteratorInvoker->value->invoker->invokeExact->if->JSType->isPrimitive->throw->ScriptRuntime->safeToString->typeError->return->catch->throw->new->RuntimeException->finally->throw->ScriptRuntime->safeToString->typeError->throw->ScriptRuntime->safeToString->typeError
AbstractIterator#iterate(Object, Global, Consumer):::Iterate over an iterable object, passing every value to consumer.:::iterator->AbstractIterator->Global->toObject->getIterator->nextInvoker->getNextInvoker->doneInvoker->getDoneInvoker->valueInvoker->getValueInvoker->try->do->next->nextInvoker->getGetter->invokeExact->if->Bootstrap->isCallable->break->result->nextInvoker->getInvoker->invokeExact->if->break->done->doneInvoker->invokeExact->if->JSType->toBoolean->break->consumer->valueInvoker->invokeExact->accept->while->catch->throw->throw->new->RuntimeException->finally
ArrayBufferView#buffer(Object):::Buffer getter as per spec:::return
ArrayBufferView#byteOffset(Object):::Buffer offset getter as per spec:::return
ArrayBufferView#byteLength(Object):::Byte length getter as per spec:::view->return->view->getArray->getElementLength->view->bytesPerElement
ArrayBufferView#length(Object):::Length getter as per spec:::return->elementLength
ArrayBufferView.Factory#construct(int):::Factory method:::if->throw->JSType->toString->rangeError->return->new->NativeArrayBuffer->construct
ArrayBufferView.Factory#construct(NativeArrayBuffer, int, int):::Factory method:::
ArrayBufferView.Factory#createArrayData(ByteBuffer, int, int):::Factory method for array data:::
ArrayBufferView.Factory#getClassName():::Get the class name for this type of buffer:::
ArrayBufferView#factory():::Get the factor for this kind of buffer:::
ArrayBufferView#getPrototype(Global):::Get the prototype for this ArrayBufferView:::
ArrayBufferView#isFloatArray():::Check if this array contains floats:::return
ArrayBufferView#constructorImpl(boolean, Object[], Factory):::Inheritable constructor implementation:::arg0->dest->length->if->throw->factory->getClassName->typeError->if->buffer->byteOffset->JSType->toInt32->if->JSType->toInt32->else->if->buffer->getByteLength->throw->new->RuntimeException->buffer->getByteLength->return->factory->construct->else->if->elementLength->factory->construct->else->if->getArray->length->lengthToInt->factory->construct->else->dlen->JSType->toNumber->Double->isInfinite->JSType->toLong->lengthToInt->return->factory->construct->copyElements->return
ArrayBufferView#setImpl(Object, Object, Object):::Inheritable implementation of set, if no efficient implementation is available:::dest->length->if->elementLength->else->if->getArray->length->else->throw->new->RuntimeException->source->offset->JSType->toInt32->if->dest->elementLength->throw->new->RuntimeException->copyElements->return
ArrayBufferView#subarrayImpl(Object, Object, Object):::Implementation of subarray if no efficient override exists:::arrayView->byteOffset->bytesPerElement->arrayView->bytesPerElement->elementLength->arrayView->elementLength->begin->NativeArrayBuffer->JSType->toInt32->adjustIndex->end->NativeArrayBuffer->JSType->toInt32->adjustIndex->length->Math->max->return->arrayView->factory->construct
ArrayIterator#next(Object, Object):::22.1.5.2.1 %ArrayIteratorPrototype%.next():::if->throw->ScriptRuntime->safeToString->typeError->return->next
Global#getDate(Object):::Getter for ECMA 15.1.4.7 Date property:::global->Global->instanceFrom->if->global->getBuiltinDate->return
Global#setDate(Object, Object):::Setter for ECMA 15.1.4.7 Date property:::global->Global->instanceFrom
Global#getRegExp(Object):::Getter for ECMA 15.1.4.8 RegExp property:::global->Global->instanceFrom->if->global->getBuiltinRegExp->return
Global#setRegExp(Object, Object):::Setter for ECMA 15.1.4.8 RegExp property:::global->Global->instanceFrom
Global#getJSON(Object):::Getter for ECMA 15.12 - The JSON property:::global->Global->instanceFrom->if->global->getBuiltinJSON->return
Global#setJSON(Object, Object):::Setter for ECMA 15.12 - The JSON property:::global->Global->instanceFrom
Global#getJSAdapter(Object):::Getter for Nashorn extension: global.JSAdapter:::global->Global->instanceFrom->if->global->getBuiltinJSAdapter->return
Global#setJSAdapter(Object, Object):::Setter for Nashorn extension: global.JSAdapter:::global->Global->instanceFrom
Global#getEvalError(Object):::Getter for the EvalError property:::global->Global->instanceFrom->if->global->getBuiltinEvalError->return
Global#setEvalError(Object, Object):::Setter for the EvalError property:::global->Global->instanceFrom
Global#getRangeError(Object):::Getter for the RangeError property.:::global->Global->instanceFrom->if->global->getBuiltinRangeError->return
Global#setRangeError(Object, Object):::Setter for the RangeError property.:::global->Global->instanceFrom
Global#getURIError(Object):::Getter for the URIError property.:::global->Global->instanceFrom->if->global->getBuiltinURIError->return
Global#setURIError(Object, Object):::Setter for the URIError property.:::global->Global->instanceFrom
Global#getArrayBuffer(Object):::Getter for the ArrayBuffer property.:::global->Global->instanceFrom->if->global->getBuiltinArrayBuffer->return
Global#setArrayBuffer(Object, Object):::Setter for the ArrayBuffer property.:::global->Global->instanceFrom
Global#getDataView(Object):::Getter for the DataView property.:::global->Global->instanceFrom->if->global->getBuiltinDataView->return
Global#setDataView(Object, Object):::Setter for the DataView property.:::global->Global->instanceFrom
Global#getInt8Array(Object):::Getter for the Int8Array property.:::global->Global->instanceFrom->if->global->getBuiltinInt8Array->return
Global#setInt8Array(Object, Object):::Setter for the Int8Array property.:::global->Global->instanceFrom
Global#getUint8Array(Object):::Getter for the Uin8Array property.:::global->Global->instanceFrom->if->global->getBuiltinUint8Array->return
Global#setUint8Array(Object, Object):::Setter for the Uin8Array property.:::global->Global->instanceFrom
Global#getUint8ClampedArray(Object):::Getter for the Uint8ClampedArray property.:::global->Global->instanceFrom->if->global->getBuiltinUint8ClampedArray->return
Global#setUint8ClampedArray(Object, Object):::Setter for the Uint8ClampedArray property.:::global->Global->instanceFrom
Global#getInt16Array(Object):::Getter for the Int16Array property.:::global->Global->instanceFrom->if->global->getBuiltinInt16Array->return
Global#setInt16Array(Object, Object):::Setter for the Int16Array property.:::global->Global->instanceFrom
Global#getUint16Array(Object):::Getter for the Uint16Array property.:::global->Global->instanceFrom->if->global->getBuiltinUint16Array->return
Global#setUint16Array(Object, Object):::Setter for the Uint16Array property.:::global->Global->instanceFrom
Global#getInt32Array(Object):::Getter for the Int32Array property.:::global->Global->instanceFrom->if->global->getBuiltinInt32Array->return
Global#setInt32Array(Object, Object):::Setter for the Int32Array property.:::global->Global->instanceFrom
Global#getUint32Array(Object):::Getter of the Uint32Array property.:::global->Global->instanceFrom->if->global->getBuiltinUint32Array->return
Global#setUint32Array(Object, Object):::Setter of the Uint32Array property.:::global->Global->instanceFrom
Global#getFloat32Array(Object):::Getter for the Float32Array property.:::global->Global->instanceFrom->if->global->getBuiltinFloat32Array->return
Global#setFloat32Array(Object, Object):::Setter for the Float32Array property.:::global->Global->instanceFrom
Global#getFloat64Array(Object):::Getter for the Float64Array property.:::global->Global->instanceFrom->if->global->getBuiltinFloat64Array->return
Global#setFloat64Array(Object, Object):::Setter for the Float64Array property.:::global->Global->instanceFrom
Global#getSymbol(Object):::Getter for the Symbol property.:::global->Global->instanceFrom->if->global->getBuiltinSymbol->return
Global#setSymbol(Object, Object):::Setter for the Symbol property.:::Global->instanceFrom
Global#getMap(Object):::Getter for the Map property.:::global->Global->instanceFrom->if->global->getBuiltinMap->return
Global#setMap(Object, Object):::Setter for the Map property.:::Global->instanceFrom
Global#getWeakMap(Object):::Getter for the WeakMap property.:::global->Global->instanceFrom->if->global->getBuiltinWeakMap->return
Global#setWeakMap(Object, Object):::Setter for the WeakMap property.:::Global->instanceFrom
Global#getSet(Object):::Getter for the Set property.:::global->Global->instanceFrom->if->global->getBuiltinSet->return
Global#setSet(Object, Object):::Setter for the Set property.:::Global->instanceFrom
Global#getWeakSet(Object):::Getter for the WeakSet property.:::global->Global->instanceFrom->if->global->getBuiltinWeakSet->return
Global#setWeakSet(Object, Object):::Setter for the WeakSet property.:::Global->instanceFrom
Global#getJavaImporter(Object):::Getter for the Nashorn extension: Java access - global.JavaImporter.:::global->Global->instanceFrom->if->global->getBuiltinJavaImporter->return
Global#setJavaImporter(Object, Object):::Setter for the Nashorn extension: Java access - global.JavaImporter.:::global->Global->instanceFrom
Global#getJavaApi(Object):::Getter for the Nashorn extension: global.Java property.:::global->Global->instanceFrom->if->global->getBuiltinJavaApi->return
Global#setJavaApi(Object, Object):::Setter for the Nashorn extension: global.Java property.:::global->Global->instanceFrom
Global#getDefaultDate():::Used as Date.prototype's default value:::return
Global#getDefaultRegExp():::Used as RegExp.prototype's default value:::return
Global#setScriptContext(ScriptContext):::Set the current script context:::scontext->set
Global#getScriptContext():::Get the current script context:::return->scontext->get
Global#setInitScriptContext(ScriptContext):::Set the initial script context:::
Global#instance():::Script access to "current" Global instance:::return->Objects->Context->getGlobal->requireNonNull
Global#hasInstance():::Check if we have a Global instance:::return->Context->getGlobal
Global#getEnv():::Script access to ScriptEnvironment:::return->instance->getContext->getEnv
Global#getThisContext():::Script access to Context:::return->instance->getContext
Global#getClassFilter():::Is there a class filter in the current Context?:::return->context->getClassFilter
Global#isOfContext(Context):::Is this global of the given Context?:::return
Global#isStrictContext():::Does this global belong to a strict Context?:::return->context->getEnv
Global#initBuiltinObjects(ScriptEngine):::Initialize standard builtin objects like "Object", "Array", "Function" etc:::if->return->new->InvokeByName->new->InvokeByName->if->new->ThreadLocal<>->init
Global#wrapAsObject(Object):::Wrap a Java object as corresponding script object:::if->return->new->NativeBoolean->else->if->return->doubleValue->new->NativeNumber->else->if->isString->return->new->NativeString->else->if->return->ArrayData->allocate->new->NativeArray->else->if->return->ArrayData->allocate->new->NativeArray->else->if->return->ArrayData->allocate->new->NativeArray->else->if->return->new->NativeArray->else->if->return->new->NativeSymbol->else->return
Global#primitiveLookup(LinkRequest, Object):::Lookup helper for JS primitive types:::if->isString->return->NativeString->lookupPrimitive->else->if->return->NativeNumber->lookupPrimitive->else->if->return->NativeBoolean->lookupPrimitive->else->if->return->NativeSymbol->lookupPrimitive->throw->new->IllegalArgumentException
Global#getPrimitiveWrapFilter(Object):::Returns a method handle that creates a wrapper object for a JS primitive value.:::if->isString->return->else->if->return->else->if->return->throw->new->IllegalArgumentException
Global#newObject():::Create a new empty script object:::return->useDualFields->getObjectPrototype->new->JD->getObjectPrototype->new->JO
Global#getDefaultValue(ScriptObject, Class):::Default value of given type:::hint->if->try->if->toString->TO_STRING->getGetter->invokeExact->if->Bootstrap->isCallable->value->TO_STRING->getInvoker->invokeExact->if->JSType->isPrimitive->return->valueOf->VALUE_OF->getGetter->invokeExact->if->Bootstrap->isCallable->value->VALUE_OF->getInvoker->invokeExact->if->JSType->isPrimitive->return->throw->typeError->if->valueOf->VALUE_OF->getGetter->invokeExact->if->Bootstrap->isCallable->value->VALUE_OF->getInvoker->invokeExact->if->JSType->isPrimitive->return->toString->TO_STRING->getGetter->invokeExact->if->Bootstrap->isCallable->value->TO_STRING->getInvoker->invokeExact->if->JSType->isPrimitive->return->throw->typeError->catch->throw->throw->new->RuntimeException->finally->return
Global#isError(ScriptObject):::Is the given ScriptObject an ECMAScript Error object?:::errorProto->getErrorPrototype->proto->sobj->getProto->while->if->return->proto->getProto->return
Global#newError(String):::Create a new ECMAScript Error object.:::return->new->NativeError
Global#newEvalError(String):::Create a new ECMAScript EvalError object.:::return->new->NativeEvalError
Global#newRangeError(String):::Create a new ECMAScript RangeError object.:::return->new->NativeRangeError
Global#newReferenceError(String):::Create a new ECMAScript ReferenceError object.:::return->new->NativeReferenceError
Global#newSyntaxError(String):::Create a new ECMAScript SyntaxError object.:::return->new->NativeSyntaxError
Global#newTypeError(String):::Create a new ECMAScript TypeError object.:::return->new->NativeTypeError
Global#newURIError(String):::Create a new ECMAScript URIError object.:::return->new->NativeURIError
Global#newGenericDescriptor(boolean, boolean):::Create a new ECMAScript GenericDescriptor object.:::return->new->GenericPropertyDescriptor
Global#newDataDescriptor(Object, boolean, boolean, boolean):::Create a new ECMAScript DatePropertyDescriptor object.:::return->new->DataPropertyDescriptor
Global#newAccessorDescriptor(Object, Object, boolean, boolean):::Create a new ECMAScript AccessorPropertyDescriptor object.:::desc->new->AccessorPropertyDescriptor->if->desc->delete->if->desc->delete->return
Global#getInvokeByName(Object, Callable):::Get cached InvokeByName object for the given key:::return->getLazilyCreatedValue
Global#getDynamicInvoker(Object, Callable):::Get cached dynamic method handle for the given key:::return->getLazilyCreatedValue
Global#__noSuchProperty__(Object, Object):::Hook to search missing variables in ScriptContext if available:::global->Global->instance->sctxt->global->currentContext->nameStr->name->toString->if->scope->sctxt->getAttributesScope->if->return->ScriptObjectMirror->sctxt->getAttribute->unwrap->if->equals->return->else->if->equals->if->System->getSecurityManager->global->getClassFilter->return->if->throw->referenceError->return
Global#eval(Object, Object):::This is the eval used when 'indirect' eval call is made:::return->Global->instanceFrom->directEval
Global#directEval(Object, Object, Object, Object, boolean):::Direct eval:::if->isString->return->global->Global->instanceFrom->scope->isScope->return->global->getContext->str->toString->eval
Global#print(Object, Object...):::Global print implementation - Nashorn extension:::return->Global->instanceFrom->printImpl
Global#println(Object, Object...):::Global println implementation - Nashorn extension:::return->Global->instanceFrom->printImpl
Global#load(Object, Object):::Global load implementation - Nashorn extension:::global->Global->instanceFrom->return->global->getContext->load
Global#loadWithNewGlobal(Object, Object...):::Global loadWithNewGlobal implementation - Nashorn extension:::global->Global->instanceFrom->length->hasArgs->from->arguments->Arrays->copyOfRange->return->global->getContext->loadWithNewGlobal
Global#exit(Object, Object):::Global exit and quit implementation - Nashorn extension: perform a System.exit call from the script:::System->JSType->toInt32->exit->return
Global#getObjectPrototype():::Get the builtin Object prototype.:::return->ScriptFunction->getPrototype
Global#getFunctionPrototype():::Get the builtin Function prototype.:::return->ScriptFunction->getPrototype
Global#getArrayPrototype():::Get the builtin Array prototype.:::return->ScriptFunction->getPrototype
Global#getTypeErrorThrower():::Return the function that throws TypeError unconditionally:::return
Global#getBuiltinFunctionApplySwitchPoint():::Get the switchpoint used to check property changes for Function.prototype.apply:::return->ScriptFunction->Global->instance->getBuiltinFunction->getPrototype->getProperty->getBuiltinSwitchPoint
Global#isBuiltinFunctionPrototypeApply():::Check if the Function.prototype.apply has not been replaced:::return->isBuiltinFunctionProperty
Global#isBuiltinFunctionPrototypeCall():::Check if the Function.prototype.apply has not been replaced:::return->isBuiltinFunctionProperty
Global#isBuiltInJavaExtend(ScriptFunction):::Returns true if the passed function is the built-in "Java.extend".:::if->fn->getName->equals->return->return->Context->getGlobal
Global#isBuiltInJavaTo(ScriptFunction):::Returns true if the passed function is the built-in "Java.to".:::if->fn->getName->equals->return->return->Context->getGlobal
Global#regExpCopy(Object):::Copy function used to clone NativeRegExp objects.:::return->new->NativeRegExp
Global#toRegExp(Object):::Convert given object to NativeRegExp type.:::if->return->return->JSType->toString->new->NativeRegExp
Global#toObject(Object):::ECMA 9.9 ToObject implementation:::if->throw->ScriptRuntime->safeToString->typeError->if->return->return->instance->wrapAsObject
Global#allocate(Object[]):::Allocate a new object array.:::arrayData->ArrayData->allocate->for->index->return->new->NativeArray
Global#allocate(double[]):::Allocate a new number array.:::return->ArrayData->allocate->new->NativeArray
Global#allocate(int[]):::Allocate a new integer array.:::return->ArrayData->allocate->new->NativeArray
Global#allocateArguments(Object[], Object, int):::Allocate a new object array for arguments.:::return->NativeArguments->allocate
Global#isEval(Object):::Called from generated to check if given function is the builtin 'eval':::return->Global->instance
Global#replaceLocationPropertyPlaceholder(Object, Object):::Called from generated to replace a location property placeholder with the actual location property value.:::return->isLocationPropertyPlaceholder
Global#isLocationPropertyPlaceholder(Object):::Called from runtime internals to check if the passed value is a location property placeholder.:::return
Global#newRegExp(String, String):::Create a new RegExp object.:::if->return->new->NativeRegExp->return->new->NativeRegExp
Global#objectPrototype():::Get the object prototype:::return->Global->instance->getObjectPrototype
Global#newEmptyInstance():::Create a new empty object instance.:::return->Global->instance->newObject
Global#checkObject(Object):::Check if a given object is a ScriptObject, raises an exception if this is not the case:::if->throw->ScriptRuntime->safeToString->typeError->return
Global#checkObjectCoercible(Object):::ECMA 9.10 - implementation of CheckObjectCoercible, i.e:::if->throw->ScriptRuntime->safeToString->typeError
Global#getLexicalScope():::Return the ES6 global scope for lexically declared bindings.:::return
Global#addShellBuiltins():::Adds jjs shell interactive mode builtin functions to global scope.:::value->ScriptFunction->createBuiltin->addOwnProperty->ScriptFunction->createBuiltin->addOwnProperty
LinkedMap.Node#getKey():::Get the node's key.:::return
LinkedMap.Node#getValue():::Get the node's value.:::return
LinkedMap.Node#setValue(Object):::Set the node's value:::
LinkedMap.LinkedMapIterator#next():::Get the next node in this iteration:::if->while->if->return
LinkedMap#set(Object, Object):::Add a key-value pair to the map.:::node->data->get->if->node->setValue->else->new->Node->data->put->link
LinkedMap#get(Object):::Get the value associated with key.:::node->data->get->return->Undefined->getUndefined->node->getValue
LinkedMap#has(Object):::Returns true if key is contained in the map.:::return->data->containsKey
LinkedMap#delete(Object):::Delete the node associated with key from the map.:::node->data->remove->if->unlink->return->return
LinkedMap#clear():::Remove all key-value pairs from the map.:::data->clear->for->node
LinkedMap#size():::Return the current number of key-value pairs in the map.:::return->data->size
LinkedMap#getIterator():::Get an iterator over the key-value pairs in the map.:::return->new->LinkedMapIterator
MapIterator#next(Object, Object):::ES6 23.1.5.2.1 %MapIteratorPrototype%.next():::if->throw->ScriptRuntime->safeToString->typeError->return->next
NativeArguments#getArgument(int):::getArgument is used for named argument access.:::return->isMapped->getArray->getObject->getUnmappedArg
NativeArguments#setArgument(int, Object):::setArgument is used for named argument set.:::if->isMapped->getArray->set->setArray->else->setUnmappedArg
NativeArguments#defineOwnProperty(Object, Object, boolean):::ECMA 15.4.5.1 [[DefineOwnProperty]] ( P, Desc, Throw ) as specialized in ECMA 10.6 for Arguments object.:::index->ArrayIndex->getArrayIndex->if->isMapped->isMapped->oldValue->getArray->getObject->if->super->defineOwnProperty->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->if->desc->Global->instance->toPropertyDescriptor->if->desc->type->setDeleted->else->if->desc->has->desc->isWritable->desc->has->desc->getValue->setDeleted->else->if->desc->has->getArray->desc->getValue->set->setArray->return->return->super->defineOwnProperty
NativeArguments#allocate(Object[], ScriptFunction, int):::Factory to create correct Arguments object based on strict mode.:::isStrict->callee->isStrict->global->Global->instance->proto->global->getObjectPrototype->if->return->NativeStrictArguments->getInitialMap->new->NativeStrictArguments->return->NativeArguments->getInitialMap->new->NativeArguments
NativeArguments#G$length(Object):::Length getter:::if->return->getArgumentsLength->return
NativeArguments#S$length(Object, Object):::Length setter:::if->setArgumentsLength
NativeArguments#G$callee(Object):::Callee getter:::if->return->getCallee->return
NativeArguments#S$callee(Object, Object):::Callee setter:::if->setCallee
NativeArray#defineOwnProperty(Object, Object, boolean):::ECMA 15.4.5.1 [[DefineOwnProperty]] ( P, Desc, Throw ):::desc->Global->instance->toPropertyDescriptor->oldLenDesc->super->getOwnPropertyDescriptor->oldLen->JSType->oldLenDesc->getValue->toUint32->if->equals->result->defineLength->if->desc->has->desc->isWritable->setIsLengthNotWritable->return->index->ArrayIndex->getArrayIndex->if->ArrayIndex->isValidArrayIndex->longIndex->ArrayIndex->toLongIndex->if->oldLenDesc->isWritable->if->throw->Long->toString->ScriptRuntime->safeToString->typeError->return->succeeded->super->defineOwnProperty->if->if->throw->key->toString->ScriptRuntime->safeToString->typeError->return->if->oldLenDesc->setValue->super->defineOwnProperty->return->return->super->defineOwnProperty
NativeArray#defineOwnProperty(int, Object):::Spec:::longIndex->ArrayIndex->toLongIndex->if->getArray->length->getArray->ensure->setArray->getArray->set->setArray
NativeArray#asObjectArray():::Return the array contents upcasted as an ObjectArray, regardless of representation:::return->getArray->asObjectArray
NativeArray#isArray(Object, Object):::ECMA 15.4.3.2 Array.isArray ( arg ):::return->isArray->isArray
NativeArray#length(Object):::Length getter:::if->isArray->length->getArray->length->if->return->return->return
NativeArray#length(Object, Object):::Length setter:::if->isArray->validLength->setLength
NativeArray#getProtoLength(Object):::Prototype length getter:::return->length
NativeArray#setProtoLength(Object, Object):::Prototype length setter:::length
NativeArray#toString(Object):::ECMA 15.4.4.2 Array.prototype.toString ( ):::obj->Global->toObject->if->joinInvoker->getJOIN->sobj->try->join->joinInvoker->getGetter->invokeExact->if->Bootstrap->isCallable->return->joinInvoker->getInvoker->invokeExact->catch->throw->throw->new->RuntimeException->finally->return->ScriptRuntime->builtinObjectToString
NativeArray#assertNumeric(Object):::Assert that an array is numeric, if not throw type error:::if->getArray->getOptimisticType->isNumeric->throw->ScriptRuntime->safeToString->typeError->return
NativeArray#toLocaleString(Object):::ECMA 15.4.4.3 Array.prototype.toLocaleString ( ):::sb->new->StringBuilder->iter->arrayLikeIterator->while->iter->hasNext->obj->iter->next->if->val->JSType->toScriptObject->try->if->localeInvoker->getTO_LOCALE_STRING->sobj->toLocaleString->localeInvoker->getGetter->invokeExact->if->Bootstrap->isCallable->sb->localeInvoker->getInvoker->invokeExact->append->else->throw->typeError->catch->throw->throw->new->RuntimeException->finally->if->iter->hasNext->sb->append->return->sb->toString
NativeArray#construct(boolean, Object, Object...):::ECMA 15.4.2.2 new Array (len):::switch->return->new->NativeArray->len->if->length->if->longValue->if->return->new->NativeArray->JSType->toUint32->numberLength->doubleValue->if->throw->JSType->toString->rangeError->return->new->NativeArray->return->new->ObjectArr->new->NativeArray->return->new->NativeArray
NativeArray#construct(boolean, Object):::ECMA 15.4.2.2 new Array (len)  Specialized constructor for zero arguments - empty array:::return->new->NativeArray
NativeArray#construct(boolean, Object, boolean):::ECMA 15.4.2.2 new Array (len)  Specialized constructor for zero arguments - empty array:::return->new->ObjectArr->new->NativeArray
NativeArray#construct(boolean, Object, int):::ECMA 15.4.2.2 new Array (len)  Specialized constructor for one integer argument (length):::if->return->new->NativeArray->return->new->ObjectArr->construct
NativeArray#construct(boolean, Object, long):::ECMA 15.4.2.2 new Array (len)  Specialized constructor for one long argument (length):::if->return->new->NativeArray->return->new->ObjectArr->construct
NativeArray#construct(boolean, Object, double):::ECMA 15.4.2.2 new Array (len)  Specialized constructor for one double argument (length):::uint32length->JSType->toUint32->if->return->new->NativeArray->return->new->ObjectArr->construct
NativeArray#concat(Object, int):::ECMA 15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , ..:::newData->getContinuousArrayDataCCE->copy->newData->fastPush->return->new->NativeArray
NativeArray#concat(Object, double):::ECMA 15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , ..:::newData->getContinuousArrayDataCCE->copy->newData->fastPush->return->new->NativeArray
NativeArray#concat(Object, Object):::ECMA 15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , ..:::selfData->getContinuousArrayDataCCE->newData->if->argData->getArray->if->argData->isEmpty->selfData->copy->else->if->selfData->isEmpty->argData->copy->else->widestElementType->selfData->widest->getBoxedElementType->selfData->convert->argData->convert->fastConcat->else->getContinuousArrayDataCCE->copy->newData->fastPush->return->new->NativeArray
NativeArray#concat(Object, Object...):::ECMA 15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , ..:::list->new->ArrayList<>->Global->toObject->concatToList->foreach->concatToList->return->list->toArray->new->NativeArray
NativeArray#join(Object, Object):::ECMA 15.4.4.5 Array.prototype.join (separator):::sb->new->StringBuilder->iter->arrayLikeIterator->sep->JSType->toString->while->iter->hasNext->obj->iter->next->if->sb->JSType->toString->append->if->iter->hasNext->sb->append->return->sb->toString
NativeArray#popInt(Object):::Specialization of pop for ContinuousArrayData   The link guard checks that the array is continuous AND not empty:::return->getContinuousNonEmptyArrayDataCCE->fastPopInt
NativeArray#popDouble(Object):::Specialization of pop for ContinuousArrayData  Primitive specialization, LinkLogic:::return->getContinuousNonEmptyArrayDataCCE->fastPopDouble
NativeArray#popObject(Object):::Specialization of pop for ContinuousArrayData  Primitive specialization, LinkLogic:::return->getContinuousArrayDataCCE->fastPopObject
NativeArray#pop(Object):::ECMA 15.4.4.6 Array.prototype.pop ():::try->sobj->if->bulkable->return->sobj->getArray->pop->len->JSType->sobj->getLength->toUint32->if->sobj->set->return->index->element->sobj->get->sobj->delete->sobj->set->return->catch->throw->ScriptRuntime->safeToString->typeError->finally
NativeArray#push(Object, int):::ECMA 15.4.4.7 Array.prototype.push (args...)  Primitive specialization, LinkLogic:::return->getContinuousArrayDataCCE->fastPush
NativeArray#push(Object, double):::ECMA 15.4.4.7 Array.prototype.push (args...)  Primitive specialization, LinkLogic:::return->getContinuousArrayDataCCE->fastPush
NativeArray#pushObject(Object, Object):::ECMA 15.4.4.7 Array.prototype.push (args...)  Primitive specialization, LinkLogic:::return->getContinuousArrayDataCCE->fastPush
NativeArray#push(Object, Object...):::ECMA 15.4.4.7 Array.prototype.push (args...):::try->sobj->if->bulkable->sobj->getArray->length->newData->sobj->getArray->push->sobj->setArray->return->JSType->newData->length->toNarrowestNumber->len->JSType->sobj->getLength->toUint32->foreach->sobj->set->sobj->set->return->JSType->toNarrowestNumber->catch->throw->Context->getGlobal->ScriptRuntime->safeToString->typeError->finally
NativeArray#push(Object, Object):::ECMA 15.4.4.7 Array.prototype.push (args...) specialized for single object argument:::try->sobj->arrayData->sobj->getArray->length->arrayData->length->if->bulkable->sobj->arrayData->push->setArray->return->len->JSType->sobj->getLength->toUint32->sobj->set->sobj->set->return->catch->throw->ScriptRuntime->safeToString->typeError->finally
NativeArray#reverse(Object):::ECMA 15.4.4.8 Array.prototype.reverse ():::try->sobj->len->JSType->sobj->getLength->toUint32->middle->for->lower->return->catch->throw->ScriptRuntime->safeToString->typeError->finally
NativeArray#shift(Object):::ECMA 15.4.4.9 Array.prototype.shift ():::obj->Global->toObject->first->if->return->sobj->len->JSType->sobj->getLength->toUint32->if->sobj->get->if->bulkable->sobj->getArray->shiftLeft->else->hasPrevious->for->k->sobj->delete->else->sobj->set->return
NativeArray#slice(Object, Object, Object):::ECMA 15.4.4.10 Array.prototype.slice ( start [ , end ] ):::obj->Global->toObject->if->return->sobj->len->JSType->sobj->getLength->toUint32->relativeStart->JSType->toLong->relativeEnd->JSType->toLong->k->Math->max->Math->min->finale->Math->max->Math->min->if->return->new->NativeArray->if->bulkable->return->sobj->getArray->slice->new->NativeArray->copy->new->NativeArray->for->n->return
NativeArray#sort(Object, Object):::ECMA 15.4.4.11 Array.prototype.sort ( comparefn ):::try->sobj->len->JSType->sobj->getLength->toUint32->array->sobj->getArray->if->src->new->ArrayList<>->for->iter->array->indexIterator->iter->hasNext->sorted->src->toArray->sort->for->i->if->array->delete->sobj->setArray->return->catch->throw->ScriptRuntime->safeToString->typeError->finally
NativeArray#splice(Object, Object...):::ECMA 15.4.4.12 Array.prototype.splice ( start, deleteCount [ item1 [ , item2 [ , ..:::obj->Global->toObject->if->return->sobj->len->JSType->sobj->getLength->toUint32->relativeStart->JSType->toLong->actualStart->Math->max->Math->min->actualDeleteCount->items->if->else->if->else->Math->Math->JSType->toLong->max->min->if->new->ObjectArr->System->arraycopy->returnValue->if->bulkable->try->sobj->getArray->fastSplice->new->NativeArray->k->for->i->catch->slowSplice->finally->else->slowSplice->return
NativeArray#unshift(Object, Object...):::ECMA 15.4.4.13 Array.prototype.unshift ( [ item1 [ , item2 [ , ..:::obj->Global->toObject->if->return->sobj->len->JSType->sobj->getLength->toUint32->if->return->if->bulkable->sobj->getArray->shiftRight->for->j->else->for->k->for->j->newLength->sobj->set->return->JSType->toNarrowestNumber
NativeArray#indexOf(Object, Object, Object):::ECMA 15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] ):::try->sobj->Global->toObject->len->JSType->sobj->getLength->toUint32->if->return->n->JSType->toLong->if->return->for->k->Math->Math->abs->max->catch->finally->return
NativeArray#lastIndexOf(Object, Object...):::ECMA 15.4.4.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] ):::try->sobj->Global->toObject->len->JSType->sobj->getLength->toUint32->if->return->searchElement->n->JSType->toLong->for->k->Math->abs->Math->min->catch->throw->ScriptRuntime->safeToString->typeError->finally->return
NativeArray#every(Object, Object, Object):::ECMA 15.4.4.16 Array.prototype.every ( callbackfn [ , thisArg ] ):::return->Global->toObject->applyEvery
NativeArray#some(Object, Object, Object):::ECMA 15.4.4.17 Array.prototype.some ( callbackfn [ , thisArg ] ):::return->Global->toObject->new->IteratorAction<Boolean>->apply
NativeArray#forEach(Object, Object, Object):::ECMA 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] ):::return->Global->toObject->new->IteratorAction<Object>->apply
NativeArray#map(Object, Object, Object):::ECMA 15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] ):::return->Global->toObject->new->IteratorAction<NativeArray>->apply
NativeArray#filter(Object, Object, Object):::ECMA 15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] ):::return->Global->toObject->new->NativeArray->new->IteratorAction<NativeArray>->apply
NativeArray#reduce(Object, Object...):::ECMA 15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] ):::return->arrayLikeIterator->reduceInner
NativeArray#reduceRight(Object, Object...):::ECMA 15.4.4.22 Array.prototype.reduceRight ( callbackfn [ , initialValue ] ):::return->reverseArrayLikeIterator->reduceInner
NativeArray#entries(Object):::ECMA6 22.1.3.4 Array.prototype.entries ( ):::return->ArrayIterator->newArrayKeyValueIterator
NativeArray#keys(Object):::ECMA6 22.1.3.13 Array.prototype.keys ( ):::return->ArrayIterator->newArrayKeyIterator
NativeArray#values(Object):::ECMA6 22.1.3.29 Array.prototype.values ( ):::return->ArrayIterator->newArrayValueIterator
NativeArray#getIterator(Object):::22.1.3.30 Array.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeArrayBuffer#constructor(boolean, Object, Object...):::Constructor:::if->throw->typeError->if->return->new->NativeArrayBuffer->arg0->if->return->new->NativeArrayBuffer->else->return->JSType->toInt32->new->NativeArrayBuffer
NativeArrayBuffer#byteLength(Object):::Byte length for native array buffer:::return->getByteLength
NativeArrayBuffer#isView(Object, Object):::Returns true if an object is an ArrayBufferView:::return
NativeArrayBuffer#slice(Object, Object, Object):::Slice function:::arrayBuffer->byteLength->arrayBuffer->getByteLength->begin->JSType->toInt32->adjustIndex->end->JSType->toInt32->adjustIndex->return->Math->max->new->NativeArrayBuffer
NativeArrayBuffer#slice(Object, int, int):::Specialized slice function:::arrayBuffer->byteLength->arrayBuffer->getByteLength->return->adjustIndex->Math->adjustIndex->max->new->NativeArrayBuffer
NativeArrayBuffer#slice(Object, int):::Specialized slice function:::return->getByteLength->slice
NativeArrayBuffer#adjustIndex(int, int):::If index is negative, it refers to an index from the end of the array, as opposed to from the beginning:::return->clamp->clamp
NativeBoolean#getValue():::Get the value for this NativeBoolean:::return->booleanValue
NativeBoolean#booleanValue():::Get the value for this NativeBoolean:::return
NativeBoolean#toString(Object):::ECMA 15.6.4.2 Boolean.prototype.toString ( ):::return->getBoolean->toString
NativeBoolean#valueOf(Object):::ECMA 15.6.4.3 Boolean.prototype.valueOf ( ):::return->getBoolean
NativeBoolean#constructor(boolean, Object, Object):::ECMA 15.6.2.1 new Boolean (value):::flag->JSType->toBoolean->if->return->new->NativeBoolean->return
NativeBoolean#lookupPrimitive(LinkRequest, Object):::Lookup the appropriate method for an invoke dynamic call.:::return->PrimitiveLookup->new->NativeBoolean->lookupPrimitive
NativeDataView#constructor(boolean, Object, Object...):::Create a new DataView object using the passed ArrayBuffer for its storage:::if->throw->typeError->arrBuf->switch->return->new->NativeDataView->return->JSType->toInt32->new->NativeDataView->return->JSType->toInt32->JSType->toInt32->new->NativeDataView
NativeDataView#constructor(boolean, Object, Object, int):::Specialized version of DataView constructor:::if->throw->typeError->return->new->NativeDataView
NativeDataView#constructor(boolean, Object, Object, int, int):::Specialized version of DataView constructor:::if->throw->typeError->return->new->NativeDataView
NativeDataView#getInt8(Object, Object):::Get 8-bit signed int from given byteOffset:::try->return->getBuffer->JSType->toInt32->get->catch->throw->rangeError->finally
NativeDataView#getInt8(Object, int):::Get 8-bit signed int from given byteOffset:::try->return->getBuffer->get->catch->throw->rangeError->finally
NativeDataView#getUint8(Object, Object):::Get 8-bit unsigned int from given byteOffset:::try->return->getBuffer->JSType->toInt32->get->catch->throw->rangeError->finally
NativeDataView#getUint8(Object, int):::Get 8-bit unsigned int from given byteOffset:::try->return->getBuffer->get->catch->throw->rangeError->finally
NativeDataView#getInt16(Object, Object, Object):::Get 16-bit signed int from given byteOffset:::try->return->getBuffer->JSType->toInt32->getShort->catch->throw->rangeError->finally
NativeDataView#getInt16(Object, int):::Get 16-bit signed int from given byteOffset:::try->return->getBuffer->getShort->catch->throw->rangeError->finally
NativeDataView#getInt16(Object, int, boolean):::Get 16-bit signed int from given byteOffset:::try->return->getBuffer->getShort->catch->throw->rangeError->finally
NativeDataView#getUint16(Object, Object, Object):::Get 16-bit unsigned int from given byteOffset:::try->return->getBuffer->JSType->toInt32->getShort->catch->throw->rangeError->finally
NativeDataView#getUint16(Object, int):::Get 16-bit unsigned int from given byteOffset:::try->return->getBuffer->getShort->catch->throw->rangeError->finally
NativeDataView#getUint16(Object, int, boolean):::Get 16-bit unsigned int from given byteOffset:::try->return->getBuffer->getShort->catch->throw->rangeError->finally
NativeDataView#getInt32(Object, Object, Object):::Get 32-bit signed int from given byteOffset:::try->return->getBuffer->JSType->toInt32->getInt->catch->throw->rangeError->finally
NativeDataView#getInt32(Object, int):::Get 32-bit signed int from given byteOffset:::try->return->getBuffer->getInt->catch->throw->rangeError->finally
NativeDataView#getInt32(Object, int, boolean):::Get 32-bit signed int from given byteOffset:::try->return->getBuffer->getInt->catch->throw->rangeError->finally
NativeDataView#getUint32(Object, Object, Object):::Get 32-bit unsigned int from given byteOffset:::try->return->getBuffer->JSType->toInt32->getInt->catch->throw->rangeError->finally
NativeDataView#getUint32(Object, int):::Get 32-bit unsigned int from given byteOffset:::try->return->JSType->getBuffer->JSType->toInt32->getInt->toUint32->catch->throw->rangeError->finally
NativeDataView#getUint32(Object, int, boolean):::Get 32-bit unsigned int from given byteOffset:::try->return->JSType->getBuffer->JSType->toInt32->getInt->toUint32->catch->throw->rangeError->finally
NativeDataView#getFloat32(Object, Object, Object):::Get 32-bit float value from given byteOffset:::try->return->getBuffer->JSType->toInt32->getFloat->catch->throw->rangeError->finally
NativeDataView#getFloat32(Object, int):::Get 32-bit float value from given byteOffset:::try->return->getBuffer->getFloat->catch->throw->rangeError->finally
NativeDataView#getFloat32(Object, int, boolean):::Get 32-bit float value from given byteOffset:::try->return->getBuffer->getFloat->catch->throw->rangeError->finally
NativeDataView#getFloat64(Object, Object, Object):::Get 64-bit float value from given byteOffset:::try->return->getBuffer->JSType->toInt32->getDouble->catch->throw->rangeError->finally
NativeDataView#getFloat64(Object, int):::Get 64-bit float value from given byteOffset:::try->return->getBuffer->getDouble->catch->throw->rangeError->finally
NativeDataView#getFloat64(Object, int, boolean):::Get 64-bit float value from given byteOffset:::try->return->getBuffer->getDouble->catch->throw->rangeError->finally
NativeDataView#setInt8(Object, Object, Object):::Set 8-bit signed int at the given byteOffset:::try->getBuffer->JSType->toInt32->JSType->toInt32->put->return->catch->throw->rangeError->finally
NativeDataView#setInt8(Object, int, int):::Set 8-bit signed int at the given byteOffset:::try->getBuffer->put->return->catch->throw->rangeError->finally
NativeDataView#setUint8(Object, Object, Object):::Set 8-bit unsigned int at the given byteOffset:::try->getBuffer->JSType->toInt32->JSType->toInt32->put->return->catch->throw->rangeError->finally
NativeDataView#setUint8(Object, int, int):::Set 8-bit unsigned int at the given byteOffset:::try->getBuffer->put->return->catch->throw->rangeError->finally
NativeDataView#setInt16(Object, Object, Object, Object):::Set 16-bit signed int at the given byteOffset:::try->getBuffer->JSType->toInt32->JSType->toInt32->putShort->return->catch->throw->rangeError->finally
NativeDataView#setInt16(Object, int, int):::Set 16-bit signed int at the given byteOffset:::try->getBuffer->putShort->return->catch->throw->rangeError->finally
NativeDataView#setInt16(Object, int, int, boolean):::Set 16-bit signed int at the given byteOffset:::try->getBuffer->putShort->return->catch->throw->rangeError->finally
NativeDataView#setUint16(Object, Object, Object, Object):::Set 16-bit unsigned int at the given byteOffset:::try->getBuffer->JSType->toInt32->JSType->toInt32->putShort->return->catch->throw->rangeError->finally
NativeDataView#setUint16(Object, int, int):::Set 16-bit unsigned int at the given byteOffset:::try->getBuffer->putShort->return->catch->throw->rangeError->finally
NativeDataView#setUint16(Object, int, int, boolean):::Set 16-bit unsigned int at the given byteOffset:::try->getBuffer->putShort->return->catch->throw->rangeError->finally
NativeDataView#setInt32(Object, Object, Object, Object):::Set 32-bit signed int at the given byteOffset:::try->getBuffer->JSType->toInt32->JSType->toInt32->putInt->return->catch->throw->rangeError->finally
NativeDataView#setInt32(Object, int, int):::Set 32-bit signed int at the given byteOffset:::try->getBuffer->putInt->return->catch->throw->rangeError->finally
NativeDataView#setInt32(Object, int, int, boolean):::Set 32-bit signed int at the given byteOffset:::try->getBuffer->putInt->return->catch->throw->rangeError->finally
NativeDataView#setUint32(Object, Object, Object, Object):::Set 32-bit unsigned int at the given byteOffset:::try->getBuffer->JSType->toInt32->JSType->toUint32->putInt->return->catch->throw->rangeError->finally
NativeDataView#setUint32(Object, int, double):::Set 32-bit unsigned int at the given byteOffset:::try->getBuffer->JSType->toUint32->putInt->return->catch->throw->rangeError->finally
NativeDataView#setUint32(Object, int, double, boolean):::Set 32-bit unsigned int at the given byteOffset:::try->getBuffer->JSType->toUint32->putInt->return->catch->throw->rangeError->finally
NativeDataView#setFloat32(Object, Object, Object, Object):::Set 32-bit float at the given byteOffset:::try->getBuffer->JSType->toUint32->JSType->toNumber->putFloat->return->catch->throw->rangeError->finally
NativeDataView#setFloat32(Object, int, double):::Set 32-bit float at the given byteOffset:::try->getBuffer->putFloat->return->catch->throw->rangeError->finally
NativeDataView#setFloat32(Object, int, double, boolean):::Set 32-bit float at the given byteOffset:::try->getBuffer->putFloat->return->catch->throw->rangeError->finally
NativeDataView#setFloat64(Object, Object, Object, Object):::Set 64-bit float at the given byteOffset:::try->getBuffer->JSType->toUint32->JSType->toNumber->putDouble->return->catch->throw->rangeError->finally
NativeDataView#setFloat64(Object, int, double):::Set 64-bit float at the given byteOffset:::try->getBuffer->putDouble->return->catch->throw->rangeError->finally
NativeDataView#setFloat64(Object, int, double, boolean):::Set 64-bit float at the given byteOffset:::try->getBuffer->putDouble->return->catch->throw->rangeError->finally
NativeDate#construct(boolean, Object):::Constructor - ECMA 15.9.3.1 new Date:::result->new->NativeDate->return->toStringImpl
NativeDate#construct(boolean, Object, Object...):::Constructor - ECMA 15.9.3.1 new Date (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] ):::if->return->new->NativeDate->toStringImpl->result->switch->new->NativeDate->break->num->arg->JSType->toPrimitive->if->JSType->isString->arg->toString->parseDateString->else->JSType->toNumber->timeClip->new->NativeDate->break->new->NativeDate->d->convertCtorArgs->if->result->setTime->else->time->makeDate->result->getTimeZone->utc->timeClip->result->setTime->break->return
NativeDate#parse(Object, Object):::ECMA 15.9.4.2 Date.parse (string):::return->JSType->toString->parseDateString
NativeDate#UTC(Object, Object...):::ECMA 15.9.4.3 Date.UTC (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] ):::nd->new->NativeDate->d->convertCtorArgs->time->makeDate->timeClip->nd->setTime->return
NativeDate#now(Object):::ECMA 15.9.4.4 Date.now ( ):::return->System->currentTimeMillis
NativeDate#toString(Object):::ECMA 15.9.5.2 Date.prototype.toString ( ):::return->toStringImpl
NativeDate#toDateString(Object):::ECMA 15.9.5.3 Date.prototype.toDateString ( ):::return->toStringImpl
NativeDate#toTimeString(Object):::ECMA 15.9.5.4 Date.prototype.toTimeString ( ):::return->toStringImpl
NativeDate#toLocaleString(Object):::ECMA 15.9.5.5 Date.prototype.toLocaleString ( ):::return->toStringImpl
NativeDate#toLocaleDateString(Object):::ECMA 15.9.5.6 Date.prototype.toLocaleDateString ( ):::return->toStringImpl
NativeDate#toLocaleTimeString(Object):::ECMA 15.9.5.7 Date.prototype.toLocaleTimeString ( ):::return->toStringImpl
NativeDate#valueOf(Object):::ECMA 15.9.5.8 Date.prototype.valueOf ( ):::nd->getNativeDate->return->nd->getTime
NativeDate#getTime(Object):::ECMA 15.9.5.9 Date.prototype.getTime ( ):::nd->getNativeDate->return->nd->getTime
NativeDate#getFullYear(Object):::ECMA 15.9.5.10 Date.prototype.getFullYear ( ):::return->getField
NativeDate#getUTCFullYear(Object):::ECMA 15.9.5.11 Date.prototype.getUTCFullYear( ):::return->getUTCField
NativeDate#getYear(Object):::B.2.4 Date.prototype.getYear ( ):::nd->getNativeDate->return->nd->isValidDate->nd->getLocalTime->yearFromTime
NativeDate#getMonth(Object):::ECMA 15.9.5.12 Date.prototype.getMonth ( ):::return->getField
NativeDate#getUTCMonth(Object):::ECMA 15.9.5.13 Date.prototype.getUTCMonth ( ):::return->getUTCField
NativeDate#getDate(Object):::ECMA 15.9.5.14 Date.prototype.getDate ( ):::return->getField
NativeDate#getUTCDate(Object):::ECMA 15.9.5.15 Date.prototype.getUTCDate ( ):::return->getUTCField
NativeDate#getDay(Object):::ECMA 15.9.5.16 Date.prototype.getDay ( ):::nd->getNativeDate->return->nd->isValidDate->nd->getLocalTime->weekDay
NativeDate#getUTCDay(Object):::ECMA 15.9.5.17 Date.prototype.getUTCDay ( ):::nd->getNativeDate->return->nd->isValidDate->nd->getTime->weekDay
NativeDate#getHours(Object):::ECMA 15.9.5.18 Date.prototype.getHours ( ):::return->getField
NativeDate#getUTCHours(Object):::ECMA 15.9.5.19 Date.prototype.getUTCHours ( ):::return->getUTCField
NativeDate#getMinutes(Object):::ECMA 15.9.5.20 Date.prototype.getMinutes ( ):::return->getField
NativeDate#getUTCMinutes(Object):::ECMA 15.9.5.21 Date.prototype.getUTCMinutes ( ):::return->getUTCField
NativeDate#getSeconds(Object):::ECMA 15.9.5.22 Date.prototype.getSeconds ( ):::return->getField
NativeDate#getUTCSeconds(Object):::ECMA 15.9.5.23 Date.prototype.getUTCSeconds ( ):::return->getUTCField
NativeDate#getMilliseconds(Object):::ECMA 15.9.5.24 Date.prototype.getMilliseconds ( ):::return->getField
NativeDate#getUTCMilliseconds(Object):::ECMA 15.9.5.25 Date.prototype.getUTCMilliseconds ( ):::return->getUTCField
NativeDate#getTimezoneOffset(Object):::ECMA 15.9.5.26 Date.prototype.getTimezoneOffset ( ):::nd->getNativeDate->if->nd->isValidDate->msec->nd->getTime->return->nd->getTimeZone->getOffset->return
NativeDate#setTime(Object, Object):::ECMA 15.9.5.27 Date.prototype.setTime (time):::nd->getNativeDate->num->JSType->toNumber->timeClip->nd->setTime->return
NativeDate#setMilliseconds(Object, Object...):::ECMA 15.9.5.28 Date.prototype.setMilliseconds (ms):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setUTCMilliseconds(Object, Object...):::ECMA 15.9.5.29 Date.prototype.setUTCMilliseconds (ms):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setSeconds(Object, Object...):::ECMA 15.9.5.30 Date.prototype.setSeconds (sec [, ms ] ):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setUTCSeconds(Object, Object...):::ECMA 15.9.5.31 Date.prototype.setUTCSeconds (sec [, ms ] ):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setMinutes(Object, Object...):::ECMA 15.9.5.32 Date.prototype.setMinutes (min [, sec [, ms ] ] ):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setUTCMinutes(Object, Object...):::ECMA 15.9.5.33 Date.prototype.setUTCMinutes (min [, sec [, ms ] ] ):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setHours(Object, Object...):::ECMA 15.9.5.34 Date.prototype.setHours (hour [, min [, sec [, ms ] ] ] ):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setUTCHours(Object, Object...):::ECMA 15.9.5.35 Date.prototype.setUTCHours (hour [, min [, sec [, ms ] ] ] ):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setDate(Object, Object...):::ECMA 15.9.5.36 Date.prototype.setDate (date):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setUTCDate(Object, Object...):::ECMA 15.9.5.37 Date.prototype.setUTCDate (date):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setMonth(Object, Object...):::ECMA 15.9.5.38 Date.prototype.setMonth (month [, date ] ):::nd->getNativeDate->setFields->return->nd->getTime
NativeDate#setUTCMonth(Object, Object...):::ECMA 15.9.5.39 Date.prototype.setUTCMonth (month [, date ] ):::nd->ensureNativeDate->setFields->return->nd->getTime
NativeDate#setFullYear(Object, Object...):::ECMA 15.9.5.40 Date.prototype.setFullYear (year [, month [, date ] ] ):::nd->ensureNativeDate->if->nd->isValidDate->setFields->else->d->convertArgs->if->nd->makeDay->makeDate->nd->getTimeZone->utc->timeClip->setTime->else->nd->setTime->return->nd->getTime
NativeDate#setUTCFullYear(Object, Object...):::ECMA 15.9.5.41 Date.prototype.setUTCFullYear (year [, month [, date ] ] ):::nd->ensureNativeDate->if->nd->isValidDate->setFields->else->d->convertArgs->nd->makeDay->makeDate->timeClip->setTime->return->nd->getTime
NativeDate#setYear(Object, Object):::ECMA B.2.5 Date.prototype.setYear (year):::nd->getNativeDate->if->nd->getTime->isNaN->nd->nd->getTimeZone->utc->setTime->yearNum->JSType->toNumber->if->isNaN->nd->setTime->return->nd->getTime->yearInt->if->new->ObjectArr->setFields->return->nd->getTime
NativeDate#toUTCString(Object):::ECMA 15.9.5.42 Date.prototype.toUTCString ( ):::return->toGMTStringImpl
NativeDate#toGMTString(Object):::ECMA B.2.6 Date.prototype.toGMTString ( )  See NativeDate#toUTCString(Object):::return->toGMTStringImpl
NativeDate#toISOString(Object):::ECMA 15.9.5.43 Date.prototype.toISOString ( ):::return->toISOStringImpl
NativeDate#toJSON(Object, Object):::ECMA 15.9.5.44 Date.prototype.toJSON ( key )  Provides a string representation of this Date for use by NativeJSON#stringify(Object, Object, Object, Object):::selfObj->Global->toObject->if->return->sobj->value->sobj->getDefaultValue->if->num->doubleValue->if->isInfinite->isNaN->return->try->toIsoString->getTO_ISO_STRING->func->toIsoString->getGetter->invokeExact->if->Bootstrap->isCallable->return->toIsoString->getInvoker->invokeExact->throw->ScriptRuntime->safeToString->typeError->catch->throw->throw->new->RuntimeException->finally
NativeDebug#getArrayDataClass(Object, Object):::Return the ArrayData class for this ScriptObject:::try->return->getArray->getClass->catch->return->finally
NativeDebug#getArrayData(Object, Object):::Return the ArrayData for this ScriptObject:::try->return->getArray->catch->return->finally
NativeDebug#getContext(Object):::Nashorn extension: get context, context utility:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->return->Global->getThisContext
NativeDebug#map(Object, Object):::Nashorn extension: get map from ScriptObject:::if->return->getMap->return
NativeDebug#identical(Object, Object, Object):::Check object identity comparison regardless of type:::return
NativeDebug#equalWithoutType(Object, Object, Object):::Returns true if if the two objects are both property maps, and they have identical properties in the same order, but allows the properties to differ in their types.:::return->equalsWithoutType
NativeDebug#diffPropertyMaps(Object, Object, Object):::Returns a diagnostic string representing the difference of two property maps.:::return->PropertyMap->diff
NativeDebug#getClass(Object, Object):::Object util - getClass:::if->return->obj->getClass->return
NativeDebug#equals(Object, Object, Object):::Object util - equals:::return->Objects->equals
NativeDebug#toJavaString(Object, Object):::Object util - toJavaString:::return->Objects->toString
NativeDebug#toIdentString(Object, Object):::Do not call overridden toString -- use default toString impl:::if->return->hash->System->identityHashCode->return->obj->getClass->Integer->toHexString
NativeDebug#isDebuggableFunction(Object, Object):::Returns true if passed object is a function that is fully debuggable (has all vars in scope).:::return->hasAllVarsInScope
NativeDebug#getListenerCount(Object, Object):::Returns the property listener count for a script object:::return->PropertySwitchPoints->getSwitchPointCount
NativeDebug#dumpCounters(Object):::Dump all Nashorn debug mode counters:::out->Context->getCurrentErr->out->ScriptObject->getCount->println->out->Scope->getScopeCount->println->out->PropertySwitchPoints->getSwitchPointsAdded->println->out->PropertySwitchPoints->getSwitchPointsInvalidated->println->out->ScriptFunction->getConstructorCount->println->out->ScriptFunction->getInvokes->println->out->ScriptFunction->getAllocations->println->out->PropertyMap->getCount->println->out->PropertyMap->getClonedCount->println->out->PropertyMap->getHistoryHit->println->out->PropertyMap->getProtoInvalidations->println->out->PropertyMap->getProtoHistoryHit->println->out->PropertyMap->getSetProtoNewMapCount->println->out->LinkerCallSite->getCount->println->out->LinkerCallSite->getMissCount->println->out->LinkerCallSite->getMissSamplingPercentage->println->LinkerCallSite->getMissCounts->return
NativeDebug#getEventQueueCapacity(Object):::Get the capacity of the event queue:::sobj->cap->if->sobj->has->JSType->sobj->get->toInt32->else->setEventQueueCapacity->return
NativeDebug#setEventQueueCapacity(Object, Object):::Set the event queue capacity:::set
NativeDebug#addRuntimeEvent(Object, Object):::Add a runtime event to the runtime event queue:::q->getEventQueue->cap->getEventQueueCapacity->while->q->size->q->removeFirst->q->getEvent->addLast
NativeDebug#expandEventQueueCapacity(Object, Object):::Expands the event queue capacity, or truncates if capacity is lower than current capacity:::q->getEventQueue->nc->JSType->toInt32->while->q->size->q->removeFirst->setEventQueueCapacity
NativeDebug#clearRuntimeEvents(Object):::Clear the runtime event queue:::q->getEventQueue->q->clear
NativeDebug#removeRuntimeEvent(Object, Object):::Remove a specific runtime event from the event queue:::q->getEventQueue->re->getEvent->if->q->remove->throw->new->IllegalStateException
NativeDebug#getRuntimeEvents(Object):::Return all runtime events in the queue as an array:::q->getEventQueue->return->q->new->RuntimeEvent<?>Arr->toArray
NativeDebug#getLastRuntimeEvent(Object):::Return the last runtime event in the queue:::q->getEventQueue->return->q->isEmpty->q->getLast
NativeError#constructor(boolean, Object, Object):::ECMA 15.11.2 The Error Constructor:::return->new->NativeError
NativeError#captureStackTrace(Object, Object):::Nashorn extension: Error.captureStackTrace:::sobj->Global->checkObject->initException->sobj->delete->if->sobj->has->getStack->ScriptFunction->createBuiltin->setStack->ScriptFunction->createBuiltin->sobj->addOwnProperty->return
NativeError#dumpStack(Object):::Nashorn extension: Error.dumpStack dumps the stack of the current thread.:::Thread->dumpStack->return
NativeError#printStackTrace(Object):::Nashorn extension: Error.prototype.printStackTrace prints stack trace associated with the exception (if available):::return->ECMAException->Global->checkObject->printStackTrace
NativeError#getStackTrace(Object):::Nashorn extension: Error.prototype.getStackTrace() "stack" property is an array typed value containing StackTraceElement objects of JavaScript stack frames.:::sobj->Global->checkObject->exception->ECMAException->getException->res->if->NashornException->getScriptFrames->else->return->new->NativeArray
NativeError#getLineNumber(Object):::Nashorn extension: Error.prototype.lineNumber:::sobj->Global->checkObject->return->sobj->has->sobj->get->ECMAException->getLineNumber
NativeError#setLineNumber(Object, Object):::Nashorn extension: Error.prototype.lineNumber:::sobj->Global->checkObject->if->sobj->hasOwnProperty->sobj->put->else->sobj->addOwnProperty->return
NativeError#getColumnNumber(Object):::Nashorn extension: Error.prototype.columnNumber:::sobj->Global->checkObject->return->sobj->has->sobj->get->ECMAException->getColumnNumber
NativeError#setColumnNumber(Object, Object):::Nashorn extension: Error.prototype.columnNumber:::sobj->Global->checkObject->if->sobj->hasOwnProperty->sobj->put->else->sobj->addOwnProperty->return
NativeError#getFileName(Object):::Nashorn extension: Error.prototype.fileName:::sobj->Global->checkObject->return->sobj->has->sobj->get->ECMAException->getFileName
NativeError#setFileName(Object, Object):::Nashorn extension: Error.prototype.fileName:::sobj->Global->checkObject->if->sobj->hasOwnProperty->sobj->put->else->sobj->addOwnProperty->return
NativeError#getStack(Object):::Nashorn extension: Error.prototype.stack "stack" property is a string typed value containing JavaScript stack frames:::sobj->Global->checkObject->if->sobj->has->return->sobj->get->exception->ECMAException->getException->if->value->getScriptStackString->if->sobj->hasOwnProperty->sobj->put->else->sobj->addOwnProperty->return->return
NativeError#setStack(Object, Object):::Nashorn extension Accessed from Global while setting up the Error.prototype:::sobj->Global->checkObject->if->sobj->hasOwnProperty->sobj->put->else->sobj->addOwnProperty->return
NativeError#toString(Object):::ECMA 15.11.4.4 Error.prototype.toString ( ):::sobj->Global->checkObject->name->sobj->get->if->else->JSType->toString->msg->sobj->get->if->else->JSType->toString->if->isEmpty->return->if->isEmpty->return->return
NativeEvalError#constructor(boolean, Object, Object):::ECMA 15.11.6.1 EvalError  Constructor:::return->new->NativeEvalError
NativeFloat32Array#constructor(boolean, Object, Object...):::Constructor:::return->constructorImpl
NativeFloat32Array#set(Object, Object, Object):::Set values:::return->ArrayBufferView->setImpl
NativeFloat32Array#subarray(Object, Object, Object):::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive:::return->ArrayBufferView->subarrayImpl
NativeFloat32Array#getIterator(Object):::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeFloat64Array#constructor(boolean, Object, Object...):::Constructor:::return->constructorImpl
NativeFloat64Array#set(Object, Object, Object):::Set values:::return->ArrayBufferView->setImpl
NativeFloat64Array#subarray(Object, Object, Object):::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive:::return->ArrayBufferView->subarrayImpl
NativeFloat64Array#getIterator(Object):::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeFunction#toString(Object):::ECMA 15.3.4.2 Function.prototype.toString ( ):::if->throw->ScriptRuntime->safeToString->typeError->return->toSource
NativeFunction#apply(Object, Object, Object):::ECMA 15.3.4.3 Function.prototype.apply (thisArg, argArray):::checkCallable->args->toApplyArgs->if->return->ScriptRuntime->apply->else->if->return->call->else->if->global->Global->instance->result->ScriptObjectMirror->wrap->ScriptObjectMirror->wrapArray->call->return->ScriptObjectMirror->unwrap->throw->new->AssertionError
NativeFunction#toApplyArgs(Object):::Given an array-like object, converts it into a Java object array suitable for invocation of ScriptRuntime.apply or for direct invocation of the applied function.:::if->return->getArray->asObjectArray->else->if->sobj->n->sobj->getLength->lengthToInt->args->new->ObjectArr->for->i->return->else->if->return->else->if->list->return->list->new->ObjectArr->toArray->else->if->return->else->if->jsObj->len->jsObj->hasMember->jsObj->getMember->Integer->valueOf->n->lengthToInt->args->new->ObjectArr->for->i->return->else->throw->typeError
NativeFunction#call(Object, Object...):::ECMA 15.3.4.4 Function.prototype.call (thisArg [ , arg1 [ , arg2, ..:::checkCallable->thiz->arguments->if->new->ObjectArr->System->arraycopy->else->if->return->ScriptRuntime->apply->else->if->return->call->throw->new->AssertionError
NativeFunction#bind(Object, Object...):::ECMA 15.3.4.5 Function.prototype.bind (thisArg [, arg1 [, arg2, ...]]):::thiz->arguments->if->new->ObjectArr->System->arraycopy->else->return->Bootstrap->bindCallable
NativeFunction#toSource(Object):::Nashorn extension: Function.prototype.toSource:::if->throw->ScriptRuntime->safeToString->typeError->return->toSource
NativeFunction#function(boolean, Object, Object...):::ECMA 15.3.2.1 new Function (p1, p2, ..:::sb->new->StringBuilder->sb->append->funcBody->if->paramListBuf->new->StringBuilder->for->i->JSType->toString->paramList->paramListBuf->toString->if->paramList->isEmpty->checkFunctionParameters->sb->append->else->sb->append->if->checkFunctionBody->sb->append->sb->append->sb->append->global->Global->instance->context->global->getContext->return->context->sb->toString->eval
NativeInt16Array#constructor(boolean, Object, Object...):::Constructor:::return->constructorImpl
NativeInt16Array#set(Object, Object, Object):::Set values:::return->ArrayBufferView->setImpl
NativeInt16Array#subarray(Object, Object, Object):::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive:::return->ArrayBufferView->subarrayImpl
NativeInt16Array#getIterator(Object):::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeInt32Array#constructor(boolean, Object, Object...):::Constructor:::return->constructorImpl
NativeInt32Array#set(Object, Object, Object):::Set values:::return->ArrayBufferView->setImpl
NativeInt32Array#subarray(Object, Object, Object):::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive:::return->ArrayBufferView->subarrayImpl
NativeInt32Array#getIterator(Object):::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeInt8Array#constructor(boolean, Object, Object...):::Constructor:::return->constructorImpl
NativeInt8Array#set(Object, Object, Object):::Set values:::return->ArrayBufferView->setImpl
NativeInt8Array#subarray(Object, Object, Object):::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive:::return->ArrayBufferView->subarrayImpl
NativeInt8Array#getIterator(Object):::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeJava#isType(Object, Object):::Returns true if the specified object is a Java type object, that is an instance of StaticClass.:::return
NativeJava#synchronizedFunc(Object, Object, Object):::Returns synchronized wrapper version of the given ECMAScript function.:::if->return->createSynchronized->throw->ScriptRuntime->safeToString->typeError
NativeJava#isJavaMethod(Object, Object):::Returns true if the specified object is a Java method.:::return->Bootstrap->isDynamicMethod
NativeJava#isJavaFunction(Object, Object):::Returns true if the specified object is a java function (but not script function):::return->Bootstrap->isCallable
NativeJava#isJavaObject(Object, Object):::Returns true if the specified object is a Java object but not a script object:::return
NativeJava#isScriptObject(Object, Object):::Returns true if the specified object is a ECMAScript object, that is an instance of ScriptObject.:::return
NativeJava#isScriptFunction(Object, Object):::Returns true if the specified object is a ECMAScript function, that is an instance of ScriptFunction.:::return
NativeJava#type(Object, Object)::: Given a name of a Java type, returns an object representing that type in Nashorn:::return->type
NativeJava#typeName(Object, Object):::Returns name of a java type StaticClass.:::if->return->getRepresentedClass->getName->else->if->return->getName->else->return
NativeJava#to(Object, Object, Object):::Given a script object and a Java type, converts the script object into the desired Java type:::if->return->if->throw->ScriptRuntime->safeToString->typeError->targetClass->if->else->targetType->if->else->type->targetType->getRepresentedClass->if->targetClass->isArray->try->if->return->JSType->targetClass->getComponentType->toJavaArrayWithLookup->return->JSType->targetClass->getComponentType->toJavaArray->catch->throw->targetClass->getName->typeError->finally->if->return->ListAdapter->create->throw->targetClass->getName->typeError
NativeJava#from(Object, Object):::Given a Java array or Collection, returns a JavaScript array with a shallow copy of its contents:::if->return->else->if->return->ScriptUtils->toArray->unwrapArray->new->NativeArray->else->if->return->ScriptUtils->clone->unwrapArray->new->NativeArray->else->if->return->clone->new->NativeArray->else->if->return->clone->new->NativeArray->else->if->return->clone->new->NativeArray->else->if->return->copyArray->new->NativeArray->else->if->return->copyArray->new->NativeArray->else->if->return->copyArray->new->NativeArray->else->if->return->copyArray->new->NativeArray->else->if->return->copyArray->new->NativeArray->throw->objArray->getClass->getName->typeError
NativeJava#getProperties(Object):::Return properties of the given object:::if->clazz->getRepresentedClass->props->new->ArrayList<>->try->Bootstrap->checkReflectionAccess->props->BeansLinker->getReadableStaticPropertyNames->addAll->props->BeansLinker->getStaticMethodNames->addAll->catch->finally->return->else->if->jsObj->props->new->ArrayList<>->props->jsObj->keySet->addAll->return->else->if->clazz->object->getClass->props->new->ArrayList<>->try->Bootstrap->checkReflectionAccess->props->BeansLinker->getReadableInstancePropertyNames->addAll->props->BeansLinker->getInstanceMethodNames->addAll->catch->finally->return->return->Collections->emptyList
NativeJava#extend(Object, Object...):::Returns a type object for a subclass of the specified Java class (or implementation of the specified interface) that acts as a script-to-Java adapter for it:::if->throw->typeError->l->typesLen->classOverrides->if->if->throw->typeError->else->stypes->new->Class<?>Arr->try->for->i->catch->throw->typeError->finally->lookup->if->else->MethodHandles->publicLookup->return->JavaAdapterFactory->getAdapterClassFor
NativeJava#_super(Object, Object):::When given an object created using Java.extend() or equivalent mechanism (that is, any JavaScript-to-Java adapter), returns an object that can be used to invoke superclass methods on that object:::return->Bootstrap->createSuperAdapter
NativeJava#asJSONCompatible(Object, Object):::Returns an object that is compatible with Java JSON libraries expectations; namely, that if it itself, or any object transitively reachable through it is a JavaScript array, then such objects will be exposed as JSObject that also implements the List interface for exposing the array elements:::return->ScriptObjectMirror->Context->getGlobal->wrapAsJSONCompatible
NativeJavaImporter#constructor(boolean, Object, Object...):::Constructor:::return->new->NativeJavaImporter
NativeJSAdapter#construct(boolean, Object, Object...):::Constructor:::proto->overrides->adaptee->if->throw->typeError->switch->break->break->break->if->throw->ScriptRuntime->safeToString->typeError->global->Global->instance->if->global->getJSAdapterPrototype->return->new->NativeJSAdapter
NativeJSAdapter#getAdaptee():::Get the adaptee:::return
NativeJSON#parse(Object, Object, Object):::ECMA 15.12.2 parse ( text [ , reviver ] ):::return->JSONFunctions->parse
NativeJSON#stringify(Object, Object, Object, Object):::ECMA 15.12.3 stringify ( value [ , replacer [ , space ] ] ):::state->new->StringifyState->if->Bootstrap->isCallable->else->if->isArray->isJSObjectArray->replacer->getClass->isArray->new->ArrayList<>->iter->ArrayLikeIterator->arrayLikeIterator->while->iter->hasNext->item->v->iter->next->if->else->if->v->toString->else->if->JSType->toString->if->add->gap->modSpace->if->JSType->JSType->toPrimitive->toNumber->else->if->JSType->JSType->toPrimitive->toString->if->indent->Math->JSType->toInteger->min->if->else->sb->new->StringBuilder->for->i->sb->toString->else->if->JSType->isString->str->modSpace->toString->str->Math->str->length->min->substring->else->wrapper->Global->newEmptyInstance->wrapper->set->return->str
NativeMap#construct(boolean, Object, Object):::ECMA6 23.1.1 The Map Constructor:::if->throw->typeError->global->Global->instance->map->global->getMapPrototype->new->NativeMap->map->getJavaMap->populateMap->return
NativeMap#clear(Object):::ECMA6 23.1.3.1 Map.prototype.clear ( ):::getNativeMap->clear
NativeMap#delete(Object, Object):::ECMA6 23.1.3.3 Map.prototype.delete ( key ):::return->getNativeMap->convertKey->delete
NativeMap#has(Object, Object):::ECMA6 23.1.3.7 Map.prototype.has ( key ):::return->getNativeMap->convertKey->has
NativeMap#set(Object, Object, Object):::ECMA6 23.1.3.9 Map.prototype.set ( key , value ):::getNativeMap->convertKey->set->return
NativeMap#get(Object, Object):::ECMA6 23.1.3.6 Map.prototype.get ( key ):::return->getNativeMap->convertKey->get
NativeMap#size(Object):::ECMA6 23.1.3.10 get Map.prototype.size:::return->getNativeMap->size
NativeMap#entries(Object):::ECMA6 23.1.3.4 Map.prototype.entries ( ):::return->getNativeMap->Global->instance->new->MapIterator
NativeMap#keys(Object):::ECMA6 23.1.3.8 Map.prototype.keys ( ):::return->getNativeMap->Global->instance->new->MapIterator
NativeMap#values(Object):::ECMA6 23.1.3.11 Map.prototype.values ( ):::return->getNativeMap->Global->instance->new->MapIterator
NativeMap#getIterator(Object):::ECMA6 23.1.3.12 Map.prototype [ @@iterator ]( ):::return->getNativeMap->Global->instance->new->MapIterator
NativeMap#convertKey(Object):::Returns a canonicalized key object by converting numbers to their narrowest representation and ConsStrings to strings:::if->return->key->toString->if->d->if->JSType->d->doubleValue->isRepresentableAsInt->return->d->intValue->return
NativeMap#getJavaMap():::Get the underlying Java map.:::return
NativeMath#abs(Object, Object):::ECMA 15.8.2.1 abs(x):::return->Math->JSType->toNumber->abs
NativeMath#abs(Object, int):::ECMA 15.8.2.1 abs(x) - specialization for int values:::return->Math->abs->Math->abs
NativeMath#abs(Object, long):::ECMA 15.8.2.1 abs(x) - specialization for long values:::return->Math->abs
NativeMath#abs(Object, double):::ECMA 15.8.2.1 abs(x) - specialization for double values:::return->Math->abs
NativeMath#acos(Object, Object):::ECMA 15.8.2.2 acos(x):::return->Math->JSType->toNumber->acos
NativeMath#acos(Object, double):::ECMA 15.8.2.2 acos(x) - specialization for double values:::return->Math->acos
NativeMath#asin(Object, Object):::ECMA 15.8.2.3 asin(x):::return->Math->JSType->toNumber->asin
NativeMath#asin(Object, double):::ECMA 15.8.2.3 asin(x) - specialization for double values:::return->Math->asin
NativeMath#atan(Object, Object):::ECMA 15.8.2.4 atan(x):::return->Math->JSType->toNumber->atan
NativeMath#atan(Object, double):::ECMA 15.8.2.4 atan(x) - specialization for double values:::return->Math->atan
NativeMath#atan2(Object, Object, Object):::ECMA 15.8.2.5 atan2(x,y):::return->Math->JSType->toNumber->JSType->toNumber->atan2
NativeMath#atan2(Object, double, double):::ECMA 15.8.2.5 atan2(x,y) - specialization for double values:::return->Math->atan2
NativeMath#ceil(Object, Object):::ECMA 15.8.2.6 ceil(x):::return->Math->JSType->toNumber->ceil
NativeMath#ceil(Object, int):::ECMA 15.8.2.6 ceil(x) - specialized version for ints:::return
NativeMath#ceil(Object, long):::ECMA 15.8.2.6 ceil(x) - specialized version for longs:::return
NativeMath#ceil(Object, double):::ECMA 15.8.2.6 ceil(x) - specialized version for doubles:::return->Math->ceil
NativeMath#cos(Object, Object):::ECMA 15.8.2.7 cos(x):::return->Math->JSType->toNumber->cos
NativeMath#cos(Object, double):::ECMA 15.8.2.7 cos(x) - specialized version for doubles:::return->Math->cos
NativeMath#exp(Object, Object):::ECMA 15.8.2.8 exp(x):::return->Math->JSType->toNumber->exp
NativeMath#floor(Object, Object):::ECMA 15.8.2.9 floor(x):::return->Math->JSType->toNumber->floor
NativeMath#floor(Object, int):::ECMA 15.8.2.9 floor(x) - specialized version for ints:::return
NativeMath#floor(Object, long):::ECMA 15.8.2.9 floor(x) - specialized version for longs:::return
NativeMath#floor(Object, double):::ECMA 15.8.2.9 floor(x) - specialized version for doubles:::return->Math->floor
NativeMath#log(Object, Object):::ECMA 15.8.2.10 log(x):::return->Math->JSType->toNumber->log
NativeMath#log(Object, double):::ECMA 15.8.2.10 log(x) - specialized version for doubles:::return->Math->log
NativeMath#max(Object, Object...):::ECMA 15.8.2.11 max(x):::switch->return->return->JSType->toNumber->res->JSType->toNumber->for->i->return
NativeMath#max(Object):::ECMA 15.8.2.11 max(x) - specialized no args version:::return
NativeMath#max(Object, int, int):::ECMA 15.8.2.11 max(x) - specialized version for ints:::return->Math->max
NativeMath#max(Object, long, long):::ECMA 15.8.2.11 max(x) - specialized version for longs:::return->Math->max
NativeMath#max(Object, double, double):::ECMA 15.8.2.11 max(x) - specialized version for doubles:::return->Math->max
NativeMath#max(Object, Object, Object):::ECMA 15.8.2.11 max(x) - specialized version for two Object args:::return->Math->JSType->toNumber->JSType->toNumber->max
NativeMath#min(Object, Object...):::ECMA 15.8.2.12 min(x):::switch->return->return->JSType->toNumber->res->JSType->toNumber->for->i->return
NativeMath#min(Object):::ECMA 15.8.2.11 min(x) - specialized no args version:::return
NativeMath#min(Object, int, int):::ECMA 15.8.2.12 min(x) - specialized version for ints:::return->Math->min
NativeMath#min(Object, long, long):::ECMA 15.8.2.12 min(x) - specialized version for longs:::return->Math->min
NativeMath#min(Object, double, double):::ECMA 15.8.2.12 min(x) - specialized version for doubles:::return->Math->min
NativeMath#min(Object, Object, Object):::ECMA 15.8.2.12 min(x) - specialized version for two Object args:::return->Math->JSType->toNumber->JSType->toNumber->min
NativeMath#pow(Object, Object, Object):::ECMA 15.8.2.13 pow(x,y):::return->Math->JSType->toNumber->JSType->toNumber->pow
NativeMath#pow(Object, double, double):::ECMA 15.8.2.13 pow(x,y) - specialized version for doubles:::return->Math->pow
NativeMath#random(Object):::ECMA 15.8.2.14 random():::return->Math->random
NativeMath#round(Object, Object):::ECMA 15.8.2.15 round(x):::d->JSType->toNumber->if->Math->getExponent->return->return->Math->Math->floor->copySign
NativeMath#sin(Object, Object):::ECMA 15.8.2.16 sin(x):::return->Math->JSType->toNumber->sin
NativeMath#sin(Object, double):::ECMA 15.8.2.16 sin(x) - specialized version for doubles:::return->Math->sin
NativeMath#sqrt(Object, Object):::ECMA 15.8.2.17 sqrt(x):::return->Math->JSType->toNumber->sqrt
NativeMath#sqrt(Object, double):::ECMA 15.8.2.17 sqrt(x) - specialized version for doubles:::return->Math->sqrt
NativeMath#tan(Object, Object):::ECMA 15.8.2.18 tan(x):::return->Math->JSType->toNumber->tan
NativeMath#tan(Object, double):::ECMA 15.8.2.18 tan(x) - specialized version for doubles:::return->Math->tan
NativeNumber#getValue():::Get the value of this Number:::return->doubleValue
NativeNumber#doubleValue():::Get the value of this Number:::return
NativeNumber#constructor(boolean, Object, Object...):::ECMA 15.7.2 - The Number constructor:::num->JSType->toNumber->return->new->NativeNumber
NativeNumber#toFixed(Object, Object):::ECMA 15.7.4.5 Number.prototype.toFixed (fractionDigits):::return->JSType->toInteger->toFixed
NativeNumber#toFixed(Object, int):::ECMA 15.7.4.5 Number.prototype.toFixed (fractionDigits) specialized for int fractionDigits:::if->throw->rangeError->x->getNumberValue->if->Double->isNaN->return->if->Math->abs->return->JSType->toString->return->DoubleConversion->toFixed
NativeNumber#toExponential(Object, Object):::ECMA 15.7.4.6 Number.prototype.toExponential (fractionDigits):::x->getNumberValue->trimZeros->f->JSType->toInteger->if->Double->isNaN->return->else->if->Double->isInfinite->return->if->throw->rangeError->res->String->format->return->fixExponent
NativeNumber#toPrecision(Object, Object):::ECMA 15.7.4.7 Number.prototype.toPrecision (precision):::x->getNumberValue->if->return->JSType->toString->return->JSType->toInteger->toPrecision
NativeNumber#toPrecision(Object, int):::ECMA 15.7.4.7 Number.prototype.toPrecision (precision) specialized f:::return->getNumberValue->toPrecision
NativeNumber#toString(Object, Object):::ECMA 15.7.4.2 Number.prototype.toString ( [ radix ] ):::if->intRadix->JSType->toInteger->if->if->throw->rangeError->return->JSType->getNumberValue->toString->return->JSType->getNumberValue->toString
NativeNumber#toLocaleString(Object):::ECMA 15.7.4.3 Number.prototype.toLocaleString():::return->JSType->getNumberValue->toString
NativeNumber#valueOf(Object):::ECMA 15.7.4.4 Number.prototype.valueOf ( ):::return->getNumberValue
NativeNumber#lookupPrimitive(LinkRequest, Object):::Lookup the appropriate method for an invoke dynamic call.:::return->PrimitiveLookup->NashornGuards->getNumberGuard->doubleValue->new->NativeNumber->lookupPrimitive
NativeObject#setIndexedPropertiesToExternalArrayData(Object, Object, Object):::Nashorn extension: setIndexedPropertiesToExternalArrayData:::Global->checkObject->sobj->if->sobj->ArrayData->allocate->setArray->else->throw->typeError->return
NativeObject#getPrototypeOf(Object, Object):::ECMA 15.2.3.2 Object.getPrototypeOf ( O ):::if->return->getProto->else->if->return->getProto->else->type->JSType->of->if->return->throw->notAnObject
NativeObject#setPrototypeOf(Object, Object, Object):::Nashorn extension: Object.setPrototypeOf ( O, proto ) Also found in ES6 draft specification.:::if->setPrototypeOf->return->else->if->setProto->return->throw->notAnObject
NativeObject#getOwnPropertyDescriptor(Object, Object, Object):::ECMA 15.2.3.3 Object.getOwnPropertyDescriptor ( O, P ):::if->key->JSType->toString->sobj->return->sobj->getOwnPropertyDescriptor->else->if->key->JSType->toString->sobjMirror->return->sobjMirror->getOwnPropertyDescriptor->else->throw->notAnObject
NativeObject#getOwnPropertyNames(Object, Object):::ECMA 15.2.3.4 Object.getOwnPropertyNames ( O ):::if->return->getOwnKeys->new->NativeArray->else->if->return->getOwnKeys->new->NativeArray->else->throw->notAnObject
NativeObject#getOwnPropertySymbols(Object, Object):::ECMA 2 19.1.2.8 Object.getOwnPropertySymbols ( O ):::if->return->getOwnSymbols->new->NativeArray->else->throw->notAnObject
NativeObject#create(Object, Object, Object):::ECMA 15.2.3.5 Object.create ( O [, Properties] ):::if->Global->checkObject->newObj->Global->newEmptyInstance->newObj->setProto->if->NativeObject->defineProperties->return
NativeObject#defineProperty(Object, Object, Object, Object):::ECMA 15.2.3.6 Object.defineProperty ( O, P, Attributes ):::sobj->Global->checkObject->sobj->JSType->toPropertyKey->defineOwnProperty->return
NativeObject#defineProperties(Object, Object, Object):::ECMA 5.2.3.7 Object.defineProperties ( O, Properties ):::sobj->Global->checkObject->propsObj->Global->toObject->if->keys->getOwnKeys->foreach->prop->JSType->toString->sobj->get->defineOwnProperty->return
NativeObject#seal(Object, Object):::ECMA 15.2.3.8 Object.seal ( O ):::if->return->seal->else->if->return->seal->else->throw->notAnObject
NativeObject#freeze(Object, Object):::ECMA 15.2.3.9 Object.freeze ( O ):::if->return->freeze->else->if->return->freeze->else->throw->notAnObject
NativeObject#preventExtensions(Object, Object):::ECMA 15.2.3.10 Object.preventExtensions ( O ):::if->return->preventExtensions->else->if->return->preventExtensions->else->throw->notAnObject
NativeObject#isSealed(Object, Object):::ECMA 15.2.3.11 Object.isSealed ( O ):::if->return->isSealed->else->if->return->isSealed->else->throw->notAnObject
NativeObject#isFrozen(Object, Object):::ECMA 15.2.3.12 Object.isFrozen ( O ):::if->return->isFrozen->else->if->return->isFrozen->else->throw->notAnObject
NativeObject#isExtensible(Object, Object):::ECMA 15.2.3.13 Object.isExtensible ( O ):::if->return->isExtensible->else->if->return->isExtensible->else->throw->notAnObject
NativeObject#keys(Object, Object):::ECMA 15.2.3.14 Object.keys ( O ):::if->sobj->return->sobj->getOwnKeys->new->NativeArray->else->if->sobjMirror->return->sobjMirror->getOwnKeys->new->NativeArray->else->throw->notAnObject
NativeObject#construct(boolean, Object, Object):::ECMA 15.2.2.1 , 15.2.1.1 new Object([value]) and Object([value])  Constructor:::type->JSType->ofNoFunction->if->switch->return->Global->toObject->return->break->return->Global->newEmptyInstance->return->Global->toObject
NativeObject#toString(Object):::ECMA 15.2.4.2 Object.prototype.toString ( ):::return->ScriptRuntime->builtinObjectToString
NativeObject#toLocaleString(Object):::ECMA 15.2.4.3 Object.prototype.toLocaleString ( ):::obj->JSType->toScriptObject->if->toStringInvoker->getTO_STRING->sobj->try->toString->toStringInvoker->getGetter->invokeExact->if->Bootstrap->isCallable->return->toStringInvoker->getInvoker->invokeExact->catch->throw->throw->new->RuntimeException->finally->throw->typeError->return->ScriptRuntime->builtinObjectToString
NativeObject#valueOf(Object):::ECMA 15.2.4.4 Object.prototype.valueOf ( ):::return->Global->toObject
NativeObject#hasOwnProperty(Object, Object):::ECMA 15.2.4.5 Object.prototype.hasOwnProperty (V):::key->JSType->toPrimitive->obj->Global->toObject->return->hasOwnProperty
NativeObject#isPrototypeOf(Object, Object):::ECMA 15.2.4.6 Object.prototype.isPrototypeOf (V):::if->return->obj->Global->toObject->proto->do->proto->getProto->if->return->while->return
NativeObject#propertyIsEnumerable(Object, Object):::ECMA 15.2.4.7 Object.prototype.propertyIsEnumerable (V):::str->JSType->toString->obj->Global->toObject->if->sobj->property->sobj->getProperty->if->return->property->isEnumerable->else->return->sobj->getArray->ArrayIndex->getArrayIndex->has->return
NativeObject#bindProperties(Object, Object, Object):::Nashorn extension: Object.bindProperties  Binds the source object's properties to the target object:::targetObj->Global->checkObject->Global->checkObjectCoercible->if->sourceObj->sourceMap->sourceObj->getMap->properties->sourceMap->getProperties->propList->new->ArrayList<>->foreach->if->prop->isEnumerable->value->sourceObj->prop->getKey->get->prop->setType->prop->setValue->propList->add->if->propList->isEmpty->targetObj->propList->new->PropertyArr->toArray->addBoundProperties->else->if->mirror->keys->mirror->getOwnKeys->if->return->props->new->AccessorPropertyArr->for->idx->targetObj->addBoundProperties->else->if->clazz->getRepresentedClass->Bootstrap->checkReflectionAccess->BeansLinker->getReadableStaticPropertyNames->BeansLinker->getWritableStaticPropertyNames->BeansLinker->getStaticMethodNames->bindBeanProperties->else->clazz->source->getClass->Bootstrap->checkReflectionAccess->BeansLinker->getReadableInstancePropertyNames->BeansLinker->getWritableInstancePropertyNames->BeansLinker->getInstanceMethodNames->bindBeanProperties->return
NativeObject#bindAllProperties(ScriptObject, ScriptObjectMirror):::Binds the source mirror object's properties to the target object:::keys->source->keySet->props->keys->size->new->AccessorPropertyArr->idx->foreach->createAccessorProperty->target->addBoundProperties->return
NativeRangeError#constructor(boolean, Object, Object):::ECMA 15.11.6.2 RangeError  Constructor:::return->new->NativeRangeError
NativeReferenceError#constructor(boolean, Object, Object):::ECMA 15.11.6.3 ReferenceError  Constructor:::return->new->NativeReferenceError
NativeRegExp#constructor(boolean, Object, Object...):::ECMA 15.10.4  Constructor:::if->return->newRegExp->else->if->return->newRegExp->return->newRegExp
NativeRegExp#constructor(boolean, Object):::ECMA 15.10.4  Constructor - specialized version, no args, empty regexp:::return->new->NativeRegExp
NativeRegExp#constructor(boolean, Object, Object):::ECMA 15.10.4  Constructor - specialized version, pattern, no flags:::return->newRegExp
NativeRegExp#constructor(boolean, Object, Object, Object):::ECMA 15.10.4  Constructor - specialized version, pattern and flags:::return->newRegExp
NativeRegExp#newRegExp(Object, Object):::External constructor used in generated code, which explains the public access:::patternString->flagString->if->if->if->throw->typeError->return->JSType->toString->if->JSType->toString->return->new->NativeRegExp
NativeRegExp#flatRegExp(String):::Build a regexp that matches string as-is:::sb->length->string->length->for->i->return->sb->toString->new->NativeRegExp
NativeRegExp#compile(Object, Object, Object):::Nashorn extension: RegExp.prototype.compile - everybody implements this!:::regExp->checkRegExp->compiled->newRegExp->regExp->compiled->getRegExp->setRegExp->return
NativeRegExp#exec(Object, Object):::ECMA 15.10.6.2 RegExp.prototype.exec(string):::return->checkRegExp->JSType->toString->exec
NativeRegExp#test(Object, Object):::ECMA 15.10.6.3 RegExp.prototype.test(string):::return->checkRegExp->JSType->toString->test
NativeRegExp#toString(Object):::ECMA 15.10.6.4 RegExp.prototype.toString():::return->checkRegExp->toString
NativeRegExp#source(Object):::ECMA 15.10.7.1 source:::return->checkRegExp->getRegExp->getSource
NativeRegExp#global(Object):::ECMA 15.10.7.2 global:::return->checkRegExp->getRegExp->isGlobal
NativeRegExp#ignoreCase(Object):::ECMA 15.10.7.3 ignoreCase:::return->checkRegExp->getRegExp->isIgnoreCase
NativeRegExp#multiline(Object):::ECMA 15.10.7.4 multiline:::return->checkRegExp->getRegExp->isMultiline
NativeRegExp#getLastInput(Object):::Getter for non-standard RegExp.input property.:::match->Global->instance->getLastRegExpResult->return->match->getInput
NativeRegExp#getLastMultiline(Object):::Getter for non-standard RegExp.multiline property.:::return
NativeRegExp#getLastMatch(Object):::Getter for non-standard RegExp.lastMatch property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#getLastParen(Object):::Getter for non-standard RegExp.lastParen property.:::match->Global->instance->getLastRegExpResult->return->match->getLastParen
NativeRegExp#getLeftContext(Object):::Getter for non-standard RegExp.leftContext property.:::match->Global->instance->getLastRegExpResult->return->match->getInput->match->getIndex->substring
NativeRegExp#getRightContext(Object):::Getter for non-standard RegExp.rightContext property.:::match->Global->instance->getLastRegExpResult->return->match->getInput->match->getIndex->match->length->substring
NativeRegExp#getGroup1(Object):::Getter for non-standard RegExp.$1 property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#getGroup2(Object):::Getter for non-standard RegExp.$2 property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#getGroup3(Object):::Getter for non-standard RegExp.$3 property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#getGroup4(Object):::Getter for non-standard RegExp.$4 property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#getGroup5(Object):::Getter for non-standard RegExp.$5 property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#getGroup6(Object):::Getter for non-standard RegExp.$6 property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#getGroup7(Object):::Getter for non-standard RegExp.$7 property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#getGroup8(Object):::Getter for non-standard RegExp.$8 property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#getGroup9(Object):::Getter for non-standard RegExp.$9 property.:::match->Global->instance->getLastRegExpResult->return->match->getGroup
NativeRegExp#exec(String):::Executes a search for a match within a string based on a regular expression:::match->execInner->if->return->return->new->NativeRegExpExecResult
NativeRegExp#test(String):::Executes a search for a match within a string based on a regular expression.:::return->execInner
NativeRegExp#replace(String, String, Object):::Searches and replaces the regular expression portion (match) with the replaced text instead:::matcher->regexp->match->if->return->if->regexp->isGlobal->if->matcher->search->return->sb->new->StringBuilder->sb->matcher->start->append->if->self->Bootstrap->isStrictCallable->Global->instance->sb->getReplaceValueInvoker->callReplaceValue->append->else->appendReplacement->sb->matcher->end->string->length->append->return->sb->toString->setLastIndex->if->matcher->search->return->thisIndex->previousLastIndex->sb->new->StringBuilder->invoker->getReplaceValueInvoker->self->Bootstrap->isStrictCallable->Global->instance->do->sb->matcher->start->append->if->sb->callReplaceValue->append->else->appendReplacement->matcher->end->if->matcher->start->matcher->end->setLastIndex->else->while->string->length->matcher->search->sb->string->length->append->return->sb->toString
NativeRegExp#split(String, long):::Breaks up a string into an array of substrings based on a regular expression or fixed string.:::if->return->new->NativeArray->matches->new->ArrayList<>->match->inputLength->string->length->splitLastLength->splitLastIndex->splitLastLastIndex->while->execSplit->match->getIndex->match->length->if->matches->string->match->getIndex->substring->add->groups->match->getGroups->if->match->getIndex->for->index->matches->size->match->length->if->matches->size->break->if->else->if->matches->size->if->string->length->if->execSplit->matches->add->else->matches->string->substring->add->return->matches->toArray->new->NativeArray
NativeRegExp#search(String):::Tests for a match in a string:::match->execInner->if->return->return->match->getIndex
NativeRegExp#getLastIndex():::Fast lastIndex getter:::return->JSType->toInteger
NativeRegExp#getLastIndexObject():::Fast lastIndex getter:::return
NativeRegExp#setLastIndex(int):::Fast lastIndex setter:::JSType->toObject
NativeRegExpExecResult#length(Object):::Length getter:::if->return->JSType->getArray->length->toUint32->return
NativeRegExpExecResult#length(Object, Object):::Length setter:::if->NativeArray->validLength->setLength
NativeSet#construct(boolean, Object, Object):::ECMA6 23.1 Set constructor:::if->throw->typeError->global->Global->instance->set->global->getSetPrototype->new->NativeSet->set->getJavaMap->populateSet->return
NativeSet#add(Object, Object):::ECMA6 23.2.3.1 Set.prototype.add ( value ):::getNativeSet->convertKey->set->return
NativeSet#has(Object, Object):::ECMA6 23.2.3.7 Set.prototype.has ( value ):::return->getNativeSet->convertKey->has
NativeSet#clear(Object):::ECMA6 23.2.3.2 Set.prototype.clear ( ):::getNativeSet->clear
NativeSet#delete(Object, Object):::ECMA6 23.2.3.4 Set.prototype.delete ( value ):::return->getNativeSet->convertKey->delete
NativeSet#size(Object):::ECMA6 23.2.3.9 get Set.prototype.size:::return->getNativeSet->size
NativeSet#entries(Object):::ECMA6 23.2.3.5 Set.prototype.entries ( ):::return->getNativeSet->Global->instance->new->SetIterator
NativeSet#keys(Object):::ECMA6 23.2.3.8 Set.prototype.keys ( ):::return->getNativeSet->Global->instance->new->SetIterator
NativeSet#values(Object):::ECMA6 23.2.3.10 Set.prototype.values ( ):::return->getNativeSet->Global->instance->new->SetIterator
NativeSet#getIterator(Object):::ECMA6 23.2.3.11 Set.prototype [ @@iterator ] ( ):::return->getNativeSet->Global->instance->new->SetIterator
NativeSet#forEach(Object, Object, Object):::ECMA6 23.2.3.6 Set.prototype.forEach ( callbackfn [ , thisArg ] ):::set->getNativeSet->if->Bootstrap->isCallable->throw->ScriptRuntime->safeToString->typeError->invoker->Global->instance->Bootstrap->createDynamicCallInvoker->getDynamicInvoker->iterator->set->getJavaMap->getIterator->for
NativeStrictArguments#getArgument(int):::getArgument is used for named argument access.:::return
NativeStrictArguments#setArgument(int, Object):::setArgument is used for named argument set.:::if
NativeStrictArguments#G$length(Object):::Length getter:::if->return->getArgumentsLength->return
NativeStrictArguments#S$length(Object, Object):::Length setter:::if->setArgumentsLength
NativeString#getOwnKeys(Class, boolean, Set):::return a List of own keys associated with the object.:::if->return->super->getOwnKeys->keys->new->ArrayList<>->for->i->value->length->keys->Arrays->super->getOwnKeys->asList->addAll->return->keys->Array->keys->size->newInstance->toArray
NativeString#length(Object):::ECMA 15.5.3 String.length:::return->getCharSequence->length
NativeString#fromCharCode(Object, Object...):::ECMA 15.5.3.2 String.fromCharCode ( [ char0 [ , char1 [ , ..:::buf->new->charArr->index->foreach->JSType->toUint16->return->new->String
NativeString#fromCharCode(Object, Object):::ECMA 15.5.3.2 - specialization for one char:::if->return->fromCharCode->return->Character->JSType->toUint16->toString
NativeString#fromCharCode(Object, int):::ECMA 15.5.3.2 - specialization for one char of int type:::return->Character->toString
NativeString#fromCharCode(Object, int, int):::ECMA 15.5.3.2 - specialization for two chars of int type:::return->Character->toString->Character->toString
NativeString#fromCharCode(Object, int, int, int):::ECMA 15.5.3.2 - specialization for three chars of int type:::return->Character->toString->Character->toString->Character->toString
NativeString#fromCharCode(Object, int, int, int, int):::ECMA 15.5.3.2 - specialization for four chars of int type:::return->Character->toString->Character->toString->Character->toString->Character->toString
NativeString#fromCharCode(Object, double):::ECMA 15.5.3.2 - specialization for one char of double type:::return->Character->JSType->toUint16->toString
NativeString#toString(Object):::ECMA 15.5.4.2 String.prototype.toString ( ):::return->getString
NativeString#valueOf(Object):::ECMA 15.5.4.3 String.prototype.valueOf ( ):::return->getString
NativeString#charAt(Object, Object):::ECMA 15.5.4.4 String.prototype.charAt (pos):::return->checkObjectToString->JSType->toInteger->charAtImpl
NativeString#charAt(Object, double):::ECMA 15.5.4.4 String.prototype.charAt (pos) - specialized version for double position:::return->charAt
NativeString#charAt(Object, int):::ECMA 15.5.4.4 String.prototype.charAt (pos) - specialized version for int position:::return->checkObjectToString->charAtImpl
NativeString#charCodeAt(Object, Object):::ECMA 15.5.4.5 String.prototype.charCodeAt (pos):::str->checkObjectToString->idx->JSType->toInteger->return->str->length->str->charAt
NativeString#charCodeAt(Object, double):::ECMA 15.5.4.5 String.prototype.charCodeAt (pos) - specialized version for double position:::return->charCodeAt
NativeString#concat(Object, Object...):::ECMA 15.5.4.6 String.prototype.concat ( [ string1 [ , string2 [ , ..:::cs->checkObjectToString->if->foreach->JSType->toCharSequence->new->ConsString->return
NativeString#indexOf(Object, Object, Object):::ECMA 15.5.4.7 String.prototype.indexOf (searchString, position):::str->checkObjectToString->return->str->JSType->toString->JSType->toInteger->indexOf
NativeString#indexOf(Object, Object):::ECMA 15.5.4.7 String.prototype.indexOf (searchString, position) specialized for no position parameter:::return->indexOf
NativeString#indexOf(Object, Object, double):::ECMA 15.5.4.7 String.prototype.indexOf (searchString, position) specialized for double position parameter:::return->indexOf
NativeString#indexOf(Object, Object, int):::ECMA 15.5.4.7 String.prototype.indexOf (searchString, position) specialized for int position parameter:::return->checkObjectToString->JSType->toString->indexOf
NativeString#lastIndexOf(Object, Object, Object):::ECMA 15.5.4.8 String.prototype.lastIndexOf (searchString, position):::str->checkObjectToString->searchStr->JSType->toString->length->str->length->end->if->else->numPos->JSType->toNumber->Double->isNaN->if->else->if->return->str->lastIndexOf
NativeString#localeCompare(Object, Object):::ECMA 15.5.4.9 String.prototype.localeCompare (that):::str->checkObjectToString->collator->Collator->Global->getEnv->getInstance->collator->setStrength->collator->setDecomposition->return->collator->JSType->toString->compare
NativeString#match(Object, Object):::ECMA 15.5.4.10 String.prototype.match (regexp):::str->checkObjectToString->nativeRegExp->if->new->NativeRegExp->else->Global->toRegExp->if->nativeRegExp->getGlobal->return->nativeRegExp->exec->nativeRegExp->setLastIndex->matches->new->ArrayList<>->result->while->nativeRegExp->exec->matchStr->JSType->get->toString->if->matchStr->isEmpty->nativeRegExp->nativeRegExp->getLastIndex->setLastIndex->matches->add->if->matches->isEmpty->return->return->matches->toArray->new->NativeArray
NativeString#replace(Object, Object, Object):::ECMA 15.5.4.11 String.prototype.replace (searchValue, replaceValue):::str->checkObjectToString->nativeRegExp->if->else->NativeRegExp->JSType->toString->flatRegExp->if->Bootstrap->isCallable->return->nativeRegExp->replace->return->nativeRegExp->JSType->toString->replace
NativeString#search(Object, Object):::ECMA 15.5.4.12 String.prototype.search (regexp):::str->checkObjectToString->nativeRegExp->Global->toRegExp->return->nativeRegExp->search
NativeString#slice(Object, Object, Object):::ECMA 15.5.4.13 String.prototype.slice (start, end):::str->checkObjectToString->if->return->JSType->toInteger->slice->return->JSType->toInteger->JSType->toInteger->slice
NativeString#slice(Object, int):::ECMA 15.5.4.13 String.prototype.slice (start, end) specialized for single int parameter:::str->checkObjectToString->from->Math->str->length->max->Math->str->length->min->return->str->substring
NativeString#slice(Object, double):::ECMA 15.5.4.13 String.prototype.slice (start, end) specialized for single double parameter:::return->slice
NativeString#slice(Object, int, int):::ECMA 15.5.4.13 String.prototype.slice (start, end) specialized for two int parameters:::str->checkObjectToString->len->str->length->from->Math->max->Math->min->to->Math->max->Math->min->return->str->Math->min->substring
NativeString#slice(Object, double, double):::ECMA 15.5.4.13 String.prototype.slice (start, end) specialized for two double parameters:::return->slice
NativeString#split(Object, Object, Object):::ECMA 15.5.4.14 String.prototype.split (separator, limit):::str->checkObjectToString->lim->JSType->toUint32->if->return->new->NativeArray->new->ObjectArr->new->NativeArray->if->return->split->return->JSType->toString->splitString
NativeString#substr(Object, Object, Object):::ECMA B.2.3 String.prototype.substr (start, length):::str->JSType->toString->strLength->str->length->intStart->JSType->toInteger->if->Math->max->intLen->Math->Math->JSType->toInteger->max->min->return->str->substring
NativeString#substring(Object, Object, Object):::ECMA 15.5.4.15 String.prototype.substring (start, end):::str->checkObjectToString->if->return->JSType->toInteger->substring->return->JSType->toInteger->JSType->toInteger->substring
NativeString#substring(Object, int):::ECMA 15.5.4.15 String.prototype.substring (start, end) specialized for int start parameter:::str->checkObjectToString->if->return->else->if->str->length->return->else->return->str->substring
NativeString#substring(Object, double):::ECMA 15.5.4.15 String.prototype.substring (start, end) specialized for double start parameter:::return->substring
NativeString#substring(Object, int, int):::ECMA 15.5.4.15 String.prototype.substring (start, end) specialized for int start and end parameters:::str->checkObjectToString->len->str->length->validStart->validEnd->if->return->str->substring->return->str->substring
NativeString#substring(Object, double, double):::ECMA 15.5.4.15 String.prototype.substring (start, end) specialized for double start and end parameters:::return->substring
NativeString#toLowerCase(Object):::ECMA 15.5.4.16 String.prototype.toLowerCase ( ):::return->checkObjectToString->toLowerCase
NativeString#toLocaleLowerCase(Object):::ECMA 15.5.4.17 String.prototype.toLocaleLowerCase ( ):::return->checkObjectToString->Global->getEnv->toLowerCase
NativeString#toUpperCase(Object):::ECMA 15.5.4.18 String.prototype.toUpperCase ( ):::return->checkObjectToString->toUpperCase
NativeString#toLocaleUpperCase(Object):::ECMA 15.5.4.19 String.prototype.toLocaleUpperCase ( ):::return->checkObjectToString->Global->getEnv->toUpperCase
NativeString#trim(Object):::ECMA 15.5.4.20 String.prototype.trim ( ):::str->checkObjectToString->start->end->str->length->while->ScriptRuntime->str->charAt->isJSWhitespace->while->ScriptRuntime->str->charAt->isJSWhitespace->return->str->substring
NativeString#trimLeft(Object):::Nashorn extension: String.prototype.trimLeft ( ):::str->checkObjectToString->start->end->str->length->while->ScriptRuntime->str->charAt->isJSWhitespace->return->str->substring
NativeString#trimRight(Object):::Nashorn extension: String.prototype.trimRight ( ):::str->checkObjectToString->start->end->str->length->while->ScriptRuntime->str->charAt->isJSWhitespace->return->str->substring
NativeString#constructor(boolean, Object, Object...):::ECMA 15.5.2.1 new String ( [ value ] )  Constructor:::str->JSType->toCharSequence->return->newObj->str->toString
NativeString#constructor(boolean, Object):::ECMA 15.5.2.1 new String ( [ value ] ) - special version with no args  Constructor:::return->newObj
NativeString#constructor(boolean, Object, Object):::ECMA 15.5.2.1 new String ( [ value ] ) - special version with one arg  Constructor:::str->JSType->toCharSequence->return->newObj->str->toString
NativeString#constructor(boolean, Object, int):::ECMA 15.5.2.1 new String ( [ value ] ) - special version with exactly one int arg  Constructor:::str->Integer->toString->return->newObj
NativeString#constructor(boolean, Object, double):::ECMA 15.5.2.1 new String ( [ value ] ) - special version with exactly one double arg  Constructor:::str->JSType->toString->return->newObj
NativeString#constructor(boolean, Object, boolean):::ECMA 15.5.2.1 new String ( [ value ] ) - special version with exactly one boolean arg  Constructor:::str->Boolean->toString->return->newObj
NativeString#getIterator(Object):::ECMA 6 21.1.3.27 String.prototype [ @@iterator ]( ):::return->checkObjectToString->Global->instance->new->StringIterator
NativeString#lookupPrimitive(LinkRequest, Object):::Lookup the appropriate method for an invoke dynamic call.:::return->PrimitiveLookup->NashornGuards->getStringGuard->new->NativeString->lookupPrimitive
NativeSymbol#lookupPrimitive(LinkRequest, Object):::Lookup the appropriate method for an invoke dynamic call.:::return->PrimitiveLookup->new->NativeSymbol->lookupPrimitive
NativeSymbol#toString(Object):::ECMA 6 19.4.3.2 Symbol.prototype.toString ( ):::return->getSymbolValue->toString
NativeSymbol#valueOf(Object):::ECMA 6 19.4.3.3  Symbol.prototype.valueOf ( ):::return->getSymbolValue
NativeSymbol#constructor(boolean, Object, Object...):::ECMA 6 19.4.1.1 Symbol ( [ description ] ):::if->throw->typeError->description->Undefined->getUndefined->JSType->toString->return->new->Symbol
NativeSymbol#_for(Object, Object):::ES6 19.4.2.1 Symbol.for ( key ):::name->JSType->toString->return->globalSymbolRegistry->Symbol->new->getOrCreate
NativeSymbol#keyFor(Object, Object):::ES6 19.4.2.5 Symbol.keyFor ( sym ):::if->throw->ScriptRuntime->safeToString->typeError->name->getName->return->globalSymbolRegistry->get->Undefined->getUndefined
NativeSyntaxError#constructor(boolean, Object, Object):::ECMA 15.11.6.4 SyntaxError  Constructor:::return->new->NativeSyntaxError
NativeTypeError#constructor(boolean, Object, Object):::ECMA 15.11.6.5 TypeError  Constructor:::return->new->NativeTypeError
NativeUint16Array#constructor(boolean, Object, Object...):::Constructor:::return->constructorImpl
NativeUint16Array#set(Object, Object, Object):::Set values:::return->ArrayBufferView->setImpl
NativeUint16Array#subarray(Object, Object, Object):::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive:::return->ArrayBufferView->subarrayImpl
NativeUint16Array#getIterator(Object):::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeUint32Array#constructor(boolean, Object, Object...):::Constructor:::return->constructorImpl
NativeUint32Array#set(Object, Object, Object):::Set values:::return->ArrayBufferView->setImpl
NativeUint32Array#subarray(Object, Object, Object):::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive:::return->ArrayBufferView->subarrayImpl
NativeUint32Array#getIterator(Object):::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeUint8Array#constructor(boolean, Object, Object...):::Constructor:::return->constructorImpl
NativeUint8Array#set(Object, Object, Object):::Set values:::return->ArrayBufferView->setImpl
NativeUint8Array#subarray(Object, Object, Object):::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive:::return->ArrayBufferView->subarrayImpl
NativeUint8Array#getIterator(Object):::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeUint8ClampedArray#constructor(boolean, Object, Object...):::Constructor:::return->constructorImpl
NativeUint8ClampedArray#set(Object, Object, Object):::Set values:::return->ArrayBufferView->setImpl
NativeUint8ClampedArray#subarray(Object, Object, Object):::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive:::return->ArrayBufferView->subarrayImpl
NativeUint8ClampedArray#getIterator(Object):::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( ):::return->ArrayIterator->newArrayValueIterator
NativeURIError#constructor(boolean, Object, Object):::ECMA 15.11.6.6 URIError  Constructor:::return->new->NativeURIError
NativeWeakMap#construct(boolean, Object, Object):::ECMA6 23.3.1 The WeakMap Constructor:::if->throw->typeError->global->Global->instance->weakMap->global->getWeakMapPrototype->new->NativeWeakMap->populateMap->return
NativeWeakMap#set(Object, Object, Object):::ECMA6 23.3.3.5 WeakMap.prototype.set ( key , value ):::map->getMap->checkKey->put->return
NativeWeakMap#get(Object, Object):::ECMA6 23.3.3.3 WeakMap.prototype.get ( key ):::map->getMap->if->isPrimitive->return->Undefined->getUndefined->return->get
NativeWeakMap#delete(Object, Object):::ECMA6 23.3.3.2 WeakMap.prototype.delete ( key ):::map->getMap->if->isPrimitive->return->returnValue->map->containsKey->map->remove->return
NativeWeakMap#has(Object, Object):::ECMA6 23.3.3.4 WeakMap.prototype.has ( key ):::map->getMap->return->isPrimitive->containsKey
NativeWeakMap#checkKey(Object):::Make sure key is not a JavaScript primitive value.:::if->isPrimitive->throw->ScriptRuntime->safeToString->typeError->return
NativeWeakSet#construct(boolean, Object, Object):::ECMA6 23.3.1 The WeakSet Constructor:::if->throw->typeError->global->Global->instance->weakSet->global->getWeakSetPrototype->new->NativeWeakSet->populateWeakSet->return
NativeWeakSet#add(Object, Object):::ECMA6 23.4.3.1 WeakSet.prototype.add ( value ):::set->getSet->checkKey->put->return
NativeWeakSet#has(Object, Object):::ECMA6 23.4.3.4 WeakSet.prototype.has ( value ):::set->getSet->return->isPrimitive->containsKey
NativeWeakSet#delete(Object, Object):::ECMA6 23.4.3.3 WeakSet.prototype.delete ( value ):::map->getSet->if->isPrimitive->return->returnValue->map->containsKey->map->remove->return
SetIterator#next(Object, Object):::ES6 23.2.5.2.1 %SetIteratorPrototype%.next():::if->throw->ScriptRuntime->safeToString->typeError->return->next
StringIterator#next(Object, Object):::ES6 21.1.5.2.1 %StringIteratorPrototype%.next():::if->throw->ScriptRuntime->safeToString->typeError->return->next

jdk.nashorn.internal.objects.AbstractIterator#getIterator(Object)->Object:::25.1.2.1 %IteratorPrototype% [ @@iterator ] ( )
jdk.nashorn.internal.objects.AbstractIterator#getClassName()->String::: abstract iterator get class name
jdk.nashorn.internal.objects.AbstractIterator#next(Object)->IteratorResult:::ES6 25.1.1.2 The Iterator Interface
jdk.nashorn.internal.objects.AbstractIterator#makeResult(Object, Boolean, Global)->IteratorResult:::ES6 25.1.1.3 The IteratorResult Interface
jdk.nashorn.internal.objects.AbstractIterator#getIteratorInvoker(Global)->MethodHandle::: abstract iterator get iterator invoker
jdk.nashorn.internal.objects.AbstractIterator#getNextInvoker(Global)->InvokeByName:::Get the invoker for the ES6 iterator next method.
jdk.nashorn.internal.objects.AbstractIterator#getDoneInvoker(Global)->MethodHandle:::Get the invoker for the ES6 iterator result done property.
jdk.nashorn.internal.objects.AbstractIterator#getValueInvoker(Global)->MethodHandle:::Get the invoker for the ES6 iterator result value property.
jdk.nashorn.internal.objects.AbstractIterator#getIterator(Object, Global)->Object:::ES6 7.4.1 GetIterator abstract operation
jdk.nashorn.internal.objects.AbstractIterator#iterate(Object, Global, Consumer)->void:::Iterate over an iterable object, passing every value to consumer.
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#isConfigurable()->boolean::: accessor property descriptor is configurable
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#isEnumerable()->boolean::: accessor property descriptor is enumerable
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#isWritable()->boolean::: accessor property descriptor is writable
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#getValue()->Object::: accessor property descriptor get value
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#getGetter()->ScriptFunction::: accessor property descriptor get getter
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#getSetter()->ScriptFunction::: accessor property descriptor get setter
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#setConfigurable(boolean)->void::: accessor property descriptor set configurable
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#setEnumerable(boolean)->void::: accessor property descriptor set enumerable
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#setWritable(boolean)->void::: accessor property descriptor set writable
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#setValue(Object)->void::: accessor property descriptor set value
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#setGetter(Object)->void::: accessor property descriptor set getter
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#setSetter(Object)->void::: accessor property descriptor set setter
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#fillFrom(ScriptObject)->PropertyDescriptor::: accessor property descriptor fill from
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#type()->int::: accessor property descriptor type
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#hasAndEquals(PropertyDescriptor)->boolean::: accessor property descriptor has and equals
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#equals(Object)->boolean::: accessor property descriptor equals
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#toString()->String::: accessor property descriptor to string
jdk.nashorn.internal.objects.AccessorPropertyDescriptor#hashCode()->int::: accessor property descriptor hash code
jdk.nashorn.internal.objects.ArrayBufferView#buffer(Object)->Object:::Buffer getter as per spec
jdk.nashorn.internal.objects.ArrayBufferView#byteOffset(Object)->int:::Buffer offset getter as per spec
jdk.nashorn.internal.objects.ArrayBufferView#byteLength(Object)->int:::Byte length getter as per spec
jdk.nashorn.internal.objects.ArrayBufferView#length(Object)->int:::Length getter as per spec
jdk.nashorn.internal.objects.ArrayBufferView#getLength()->Object::: array buffer view get length
jdk.nashorn.internal.objects.ArrayBufferView.Factory#construct(int)->ArrayBufferView:::Factory method
jdk.nashorn.internal.objects.ArrayBufferView.Factory#construct(NativeArrayBuffer, int, int)->ArrayBufferView:::Factory method
jdk.nashorn.internal.objects.ArrayBufferView.Factory#createArrayData(ByteBuffer, int, int)->TypedArrayData:::Factory method for array data
jdk.nashorn.internal.objects.ArrayBufferView.Factory#getClassName()->String:::Get the class name for this type of buffer
jdk.nashorn.internal.objects.ArrayBufferView#factory()->Factory:::Get the factor for this kind of buffer
jdk.nashorn.internal.objects.ArrayBufferView#getPrototype(Global)->ScriptObject:::Get the prototype for this ArrayBufferView
jdk.nashorn.internal.objects.ArrayBufferView#getClassName()->String::: array buffer view get class name
jdk.nashorn.internal.objects.ArrayBufferView#isFloatArray()->boolean:::Check if this array contains floats
jdk.nashorn.internal.objects.ArrayBufferView#constructorImpl(boolean, Object[], Factory)->ArrayBufferView:::Inheritable constructor implementation
jdk.nashorn.internal.objects.ArrayBufferView#setImpl(Object, Object, Object)->Object:::Inheritable implementation of set, if no efficient implementation is available
jdk.nashorn.internal.objects.ArrayBufferView#subarrayImpl(Object, Object, Object)->ScriptObject:::Implementation of subarray if no efficient override exists
jdk.nashorn.internal.objects.ArrayBufferView#findGetIndexMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: array buffer view find get index method
jdk.nashorn.internal.objects.ArrayBufferView#findSetIndexMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: array buffer view find set index method
jdk.nashorn.internal.objects.ArrayIterator#newArrayValueIterator(Object)->ArrayIterator::: array iterator new array value iterator
jdk.nashorn.internal.objects.ArrayIterator#newArrayKeyIterator(Object)->ArrayIterator::: array iterator new array key iterator
jdk.nashorn.internal.objects.ArrayIterator#newArrayKeyValueIterator(Object)->ArrayIterator::: array iterator new array key value iterator
jdk.nashorn.internal.objects.ArrayIterator#next(Object, Object)->Object:::22.1.5.2.1 %ArrayIteratorPrototype%.next()
jdk.nashorn.internal.objects.ArrayIterator#getClassName()->String::: array iterator get class name
jdk.nashorn.internal.objects.ArrayIterator#next(Object)->IteratorResult::: array iterator next
jdk.nashorn.internal.objects.DataPropertyDescriptor#isConfigurable()->boolean::: data property descriptor is configurable
jdk.nashorn.internal.objects.DataPropertyDescriptor#isEnumerable()->boolean::: data property descriptor is enumerable
jdk.nashorn.internal.objects.DataPropertyDescriptor#isWritable()->boolean::: data property descriptor is writable
jdk.nashorn.internal.objects.DataPropertyDescriptor#getValue()->Object::: data property descriptor get value
jdk.nashorn.internal.objects.DataPropertyDescriptor#getGetter()->ScriptFunction::: data property descriptor get getter
jdk.nashorn.internal.objects.DataPropertyDescriptor#getSetter()->ScriptFunction::: data property descriptor get setter
jdk.nashorn.internal.objects.DataPropertyDescriptor#setConfigurable(boolean)->void::: data property descriptor set configurable
jdk.nashorn.internal.objects.DataPropertyDescriptor#setEnumerable(boolean)->void::: data property descriptor set enumerable
jdk.nashorn.internal.objects.DataPropertyDescriptor#setWritable(boolean)->void::: data property descriptor set writable
jdk.nashorn.internal.objects.DataPropertyDescriptor#setValue(Object)->void::: data property descriptor set value
jdk.nashorn.internal.objects.DataPropertyDescriptor#setGetter(Object)->void::: data property descriptor set getter
jdk.nashorn.internal.objects.DataPropertyDescriptor#setSetter(Object)->void::: data property descriptor set setter
jdk.nashorn.internal.objects.DataPropertyDescriptor#fillFrom(ScriptObject)->PropertyDescriptor::: data property descriptor fill from
jdk.nashorn.internal.objects.DataPropertyDescriptor#type()->int::: data property descriptor type
jdk.nashorn.internal.objects.DataPropertyDescriptor#hasAndEquals(PropertyDescriptor)->boolean::: data property descriptor has and equals
jdk.nashorn.internal.objects.DataPropertyDescriptor#equals(Object)->boolean::: data property descriptor equals
jdk.nashorn.internal.objects.DataPropertyDescriptor#toString()->String::: data property descriptor to string
jdk.nashorn.internal.objects.DataPropertyDescriptor#hashCode()->int::: data property descriptor hash code
jdk.nashorn.internal.objects.GenericPropertyDescriptor#isConfigurable()->boolean::: generic property descriptor is configurable
jdk.nashorn.internal.objects.GenericPropertyDescriptor#isEnumerable()->boolean::: generic property descriptor is enumerable
jdk.nashorn.internal.objects.GenericPropertyDescriptor#isWritable()->boolean::: generic property descriptor is writable
jdk.nashorn.internal.objects.GenericPropertyDescriptor#getValue()->Object::: generic property descriptor get value
jdk.nashorn.internal.objects.GenericPropertyDescriptor#getGetter()->ScriptFunction::: generic property descriptor get getter
jdk.nashorn.internal.objects.GenericPropertyDescriptor#getSetter()->ScriptFunction::: generic property descriptor get setter
jdk.nashorn.internal.objects.GenericPropertyDescriptor#setConfigurable(boolean)->void::: generic property descriptor set configurable
jdk.nashorn.internal.objects.GenericPropertyDescriptor#setEnumerable(boolean)->void::: generic property descriptor set enumerable
jdk.nashorn.internal.objects.GenericPropertyDescriptor#setWritable(boolean)->void::: generic property descriptor set writable
jdk.nashorn.internal.objects.GenericPropertyDescriptor#setValue(Object)->void::: generic property descriptor set value
jdk.nashorn.internal.objects.GenericPropertyDescriptor#setGetter(Object)->void::: generic property descriptor set getter
jdk.nashorn.internal.objects.GenericPropertyDescriptor#setSetter(Object)->void::: generic property descriptor set setter
jdk.nashorn.internal.objects.GenericPropertyDescriptor#fillFrom(ScriptObject)->PropertyDescriptor::: generic property descriptor fill from
jdk.nashorn.internal.objects.GenericPropertyDescriptor#type()->int::: generic property descriptor type
jdk.nashorn.internal.objects.GenericPropertyDescriptor#hasAndEquals(PropertyDescriptor)->boolean::: generic property descriptor has and equals
jdk.nashorn.internal.objects.GenericPropertyDescriptor#equals(Object)->boolean::: generic property descriptor equals
jdk.nashorn.internal.objects.GenericPropertyDescriptor#toString()->String::: generic property descriptor to string
jdk.nashorn.internal.objects.GenericPropertyDescriptor#hashCode()->int::: generic property descriptor hash code
jdk.nashorn.internal.objects.Global#getDate(Object)->Object:::Getter for ECMA 15.1.4.7 Date property
jdk.nashorn.internal.objects.Global#setDate(Object, Object)->void:::Setter for ECMA 15.1.4.7 Date property
jdk.nashorn.internal.objects.Global#getRegExp(Object)->Object:::Getter for ECMA 15.1.4.8 RegExp property
jdk.nashorn.internal.objects.Global#setRegExp(Object, Object)->void:::Setter for ECMA 15.1.4.8 RegExp property
jdk.nashorn.internal.objects.Global#getJSON(Object)->Object:::Getter for ECMA 15.12 - The JSON property
jdk.nashorn.internal.objects.Global#setJSON(Object, Object)->void:::Setter for ECMA 15.12 - The JSON property
jdk.nashorn.internal.objects.Global#getJSAdapter(Object)->Object:::Getter for Nashorn extension: global.JSAdapter
jdk.nashorn.internal.objects.Global#setJSAdapter(Object, Object)->void:::Setter for Nashorn extension: global.JSAdapter
jdk.nashorn.internal.objects.Global#getEvalError(Object)->Object:::Getter for the EvalError property
jdk.nashorn.internal.objects.Global#setEvalError(Object, Object)->void:::Setter for the EvalError property
jdk.nashorn.internal.objects.Global#getRangeError(Object)->Object:::Getter for the RangeError property.
jdk.nashorn.internal.objects.Global#setRangeError(Object, Object)->void:::Setter for the RangeError property.
jdk.nashorn.internal.objects.Global#getURIError(Object)->Object:::Getter for the URIError property.
jdk.nashorn.internal.objects.Global#setURIError(Object, Object)->void:::Setter for the URIError property.
jdk.nashorn.internal.objects.Global#getArrayBuffer(Object)->Object:::Getter for the ArrayBuffer property.
jdk.nashorn.internal.objects.Global#setArrayBuffer(Object, Object)->void:::Setter for the ArrayBuffer property.
jdk.nashorn.internal.objects.Global#getDataView(Object)->Object:::Getter for the DataView property.
jdk.nashorn.internal.objects.Global#setDataView(Object, Object)->void:::Setter for the DataView property.
jdk.nashorn.internal.objects.Global#getInt8Array(Object)->Object:::Getter for the Int8Array property.
jdk.nashorn.internal.objects.Global#setInt8Array(Object, Object)->void:::Setter for the Int8Array property.
jdk.nashorn.internal.objects.Global#getUint8Array(Object)->Object:::Getter for the Uin8Array property.
jdk.nashorn.internal.objects.Global#setUint8Array(Object, Object)->void:::Setter for the Uin8Array property.
jdk.nashorn.internal.objects.Global#getUint8ClampedArray(Object)->Object:::Getter for the Uint8ClampedArray property.
jdk.nashorn.internal.objects.Global#setUint8ClampedArray(Object, Object)->void:::Setter for the Uint8ClampedArray property.
jdk.nashorn.internal.objects.Global#getInt16Array(Object)->Object:::Getter for the Int16Array property.
jdk.nashorn.internal.objects.Global#setInt16Array(Object, Object)->void:::Setter for the Int16Array property.
jdk.nashorn.internal.objects.Global#getUint16Array(Object)->Object:::Getter for the Uint16Array property.
jdk.nashorn.internal.objects.Global#setUint16Array(Object, Object)->void:::Setter for the Uint16Array property.
jdk.nashorn.internal.objects.Global#getInt32Array(Object)->Object:::Getter for the Int32Array property.
jdk.nashorn.internal.objects.Global#setInt32Array(Object, Object)->void:::Setter for the Int32Array property.
jdk.nashorn.internal.objects.Global#getUint32Array(Object)->Object:::Getter of the Uint32Array property.
jdk.nashorn.internal.objects.Global#setUint32Array(Object, Object)->void:::Setter of the Uint32Array property.
jdk.nashorn.internal.objects.Global#getFloat32Array(Object)->Object:::Getter for the Float32Array property.
jdk.nashorn.internal.objects.Global#setFloat32Array(Object, Object)->void:::Setter for the Float32Array property.
jdk.nashorn.internal.objects.Global#getFloat64Array(Object)->Object:::Getter for the Float64Array property.
jdk.nashorn.internal.objects.Global#setFloat64Array(Object, Object)->void:::Setter for the Float64Array property.
jdk.nashorn.internal.objects.Global#getSymbol(Object)->Object:::Getter for the Symbol property.
jdk.nashorn.internal.objects.Global#setSymbol(Object, Object)->void:::Setter for the Symbol property.
jdk.nashorn.internal.objects.Global#getMap(Object)->Object:::Getter for the Map property.
jdk.nashorn.internal.objects.Global#setMap(Object, Object)->void:::Setter for the Map property.
jdk.nashorn.internal.objects.Global#getWeakMap(Object)->Object:::Getter for the WeakMap property.
jdk.nashorn.internal.objects.Global#setWeakMap(Object, Object)->void:::Setter for the WeakMap property.
jdk.nashorn.internal.objects.Global#getSet(Object)->Object:::Getter for the Set property.
jdk.nashorn.internal.objects.Global#setSet(Object, Object)->void:::Setter for the Set property.
jdk.nashorn.internal.objects.Global#getWeakSet(Object)->Object:::Getter for the WeakSet property.
jdk.nashorn.internal.objects.Global#setWeakSet(Object, Object)->void:::Setter for the WeakSet property.
jdk.nashorn.internal.objects.Global#getJavaImporter(Object)->Object:::Getter for the Nashorn extension: Java access - global.JavaImporter.
jdk.nashorn.internal.objects.Global#setJavaImporter(Object, Object)->void:::Setter for the Nashorn extension: Java access - global.JavaImporter.
jdk.nashorn.internal.objects.Global#getJavaApi(Object)->Object:::Getter for the Nashorn extension: global.Java property.
jdk.nashorn.internal.objects.Global#setJavaApi(Object, Object)->void:::Setter for the Nashorn extension: global.Java property.
jdk.nashorn.internal.objects.Global#getDefaultDate()->NativeDate:::Used as Date.prototype's default value
jdk.nashorn.internal.objects.Global#getDefaultRegExp()->NativeRegExp:::Used as RegExp.prototype's default value
jdk.nashorn.internal.objects.Global#setScriptContext(ScriptContext)->void:::Set the current script context
jdk.nashorn.internal.objects.Global#getScriptContext()->ScriptContext:::Get the current script context
jdk.nashorn.internal.objects.Global#setInitScriptContext(ScriptContext)->void:::Set the initial script context
jdk.nashorn.internal.objects.Global#getContext()->Context::: global get context
jdk.nashorn.internal.objects.Global#useDualFields()->boolean::: global use dual fields
jdk.nashorn.internal.objects.Global#instance()->Global:::Script access to "current" Global instance
jdk.nashorn.internal.objects.Global#hasInstance()->boolean:::Check if we have a Global instance
jdk.nashorn.internal.objects.Global#getEnv()->ScriptEnvironment:::Script access to ScriptEnvironment
jdk.nashorn.internal.objects.Global#getThisContext()->Context:::Script access to Context
jdk.nashorn.internal.objects.Global#getClassFilter()->ClassFilter:::Is there a class filter in the current Context?
jdk.nashorn.internal.objects.Global#isOfContext(Context)->boolean:::Is this global of the given Context?
jdk.nashorn.internal.objects.Global#isStrictContext()->boolean:::Does this global belong to a strict Context?
jdk.nashorn.internal.objects.Global#initBuiltinObjects(ScriptEngine)->void:::Initialize standard builtin objects like "Object", "Array", "Function" etc
jdk.nashorn.internal.objects.Global#wrapAsObject(Object)->Object:::Wrap a Java object as corresponding script object
jdk.nashorn.internal.objects.Global#primitiveLookup(LinkRequest, Object)->GuardedInvocation:::Lookup helper for JS primitive types
jdk.nashorn.internal.objects.Global#getPrimitiveWrapFilter(Object)->MethodHandle:::Returns a method handle that creates a wrapper object for a JS primitive value.
jdk.nashorn.internal.objects.Global#newObject()->ScriptObject:::Create a new empty script object
jdk.nashorn.internal.objects.Global#getDefaultValue(ScriptObject, Class)->Object:::Default value of given type
jdk.nashorn.internal.objects.Global#isError(ScriptObject)->boolean:::Is the given ScriptObject an ECMAScript Error object?
jdk.nashorn.internal.objects.Global#newError(String)->ScriptObject:::Create a new ECMAScript Error object.
jdk.nashorn.internal.objects.Global#newEvalError(String)->ScriptObject:::Create a new ECMAScript EvalError object.
jdk.nashorn.internal.objects.Global#newRangeError(String)->ScriptObject:::Create a new ECMAScript RangeError object.
jdk.nashorn.internal.objects.Global#newReferenceError(String)->ScriptObject:::Create a new ECMAScript ReferenceError object.
jdk.nashorn.internal.objects.Global#newSyntaxError(String)->ScriptObject:::Create a new ECMAScript SyntaxError object.
jdk.nashorn.internal.objects.Global#newTypeError(String)->ScriptObject:::Create a new ECMAScript TypeError object.
jdk.nashorn.internal.objects.Global#newURIError(String)->ScriptObject:::Create a new ECMAScript URIError object.
jdk.nashorn.internal.objects.Global#newGenericDescriptor(boolean, boolean)->PropertyDescriptor:::Create a new ECMAScript GenericDescriptor object.
jdk.nashorn.internal.objects.Global#newDataDescriptor(Object, boolean, boolean, boolean)->PropertyDescriptor:::Create a new ECMAScript DatePropertyDescriptor object.
jdk.nashorn.internal.objects.Global#newAccessorDescriptor(Object, Object, boolean, boolean)->PropertyDescriptor:::Create a new ECMAScript AccessorPropertyDescriptor object.
jdk.nashorn.internal.objects.Global#getInvokeByName(Object, Callable)->InvokeByName:::Get cached InvokeByName object for the given key
jdk.nashorn.internal.objects.Global#getDynamicInvoker(Object, Callable)->MethodHandle:::Get cached dynamic method handle for the given key
jdk.nashorn.internal.objects.Global#__noSuchProperty__(Object, Object)->Object:::Hook to search missing variables in ScriptContext if available
jdk.nashorn.internal.objects.Global#eval(Object, Object)->Object:::This is the eval used when 'indirect' eval call is made
jdk.nashorn.internal.objects.Global#directEval(Object, Object, Object, Object, boolean)->Object:::Direct eval
jdk.nashorn.internal.objects.Global#print(Object, Object...)->Object:::Global print implementation - Nashorn extension
jdk.nashorn.internal.objects.Global#println(Object, Object...)->Object:::Global println implementation - Nashorn extension
jdk.nashorn.internal.objects.Global#load(Object, Object)->Object:::Global load implementation - Nashorn extension
jdk.nashorn.internal.objects.Global#loadWithNewGlobal(Object, Object...)->Object:::Global loadWithNewGlobal implementation - Nashorn extension
jdk.nashorn.internal.objects.Global#exit(Object, Object)->Object:::Global exit and quit implementation - Nashorn extension: perform a System.exit call from the script
jdk.nashorn.internal.objects.Global#getObjectPrototype()->ScriptObject:::Get the builtin Object prototype.
jdk.nashorn.internal.objects.Global#getFunctionPrototype()->ScriptObject:::Get the builtin Function prototype.
jdk.nashorn.internal.objects.Global#getArrayPrototype()->ScriptObject:::Get the builtin Array prototype.
jdk.nashorn.internal.objects.Global#getBooleanPrototype()->ScriptObject::: global get boolean prototype
jdk.nashorn.internal.objects.Global#getNumberPrototype()->ScriptObject::: global get number prototype
jdk.nashorn.internal.objects.Global#getDatePrototype()->ScriptObject::: global get date prototype
jdk.nashorn.internal.objects.Global#getRegExpPrototype()->ScriptObject::: global get reg exp prototype
jdk.nashorn.internal.objects.Global#getStringPrototype()->ScriptObject::: global get string prototype
jdk.nashorn.internal.objects.Global#getErrorPrototype()->ScriptObject::: global get error prototype
jdk.nashorn.internal.objects.Global#getEvalErrorPrototype()->ScriptObject::: global get eval error prototype
jdk.nashorn.internal.objects.Global#getRangeErrorPrototype()->ScriptObject::: global get range error prototype
jdk.nashorn.internal.objects.Global#getReferenceErrorPrototype()->ScriptObject::: global get reference error prototype
jdk.nashorn.internal.objects.Global#getSyntaxErrorPrototype()->ScriptObject::: global get syntax error prototype
jdk.nashorn.internal.objects.Global#getTypeErrorPrototype()->ScriptObject::: global get type error prototype
jdk.nashorn.internal.objects.Global#getURIErrorPrototype()->ScriptObject::: global get error prototype
jdk.nashorn.internal.objects.Global#getJavaImporterPrototype()->ScriptObject::: global get java importer prototype
jdk.nashorn.internal.objects.Global#getJSAdapterPrototype()->ScriptObject::: global get adapter prototype
jdk.nashorn.internal.objects.Global#getSymbolPrototype()->ScriptObject::: global get symbol prototype
jdk.nashorn.internal.objects.Global#getMapPrototype()->ScriptObject::: global get map prototype
jdk.nashorn.internal.objects.Global#getWeakMapPrototype()->ScriptObject::: global get weak map prototype
jdk.nashorn.internal.objects.Global#getSetPrototype()->ScriptObject::: global get set prototype
jdk.nashorn.internal.objects.Global#getWeakSetPrototype()->ScriptObject::: global get weak set prototype
jdk.nashorn.internal.objects.Global#getIteratorPrototype()->ScriptObject::: global get iterator prototype
jdk.nashorn.internal.objects.Global#getMapIteratorPrototype()->ScriptObject::: global get map iterator prototype
jdk.nashorn.internal.objects.Global#getSetIteratorPrototype()->ScriptObject::: global get set iterator prototype
jdk.nashorn.internal.objects.Global#getArrayIteratorPrototype()->ScriptObject::: global get array iterator prototype
jdk.nashorn.internal.objects.Global#getStringIteratorPrototype()->ScriptObject::: global get string iterator prototype
jdk.nashorn.internal.objects.Global#getArrayBufferPrototype()->ScriptObject::: global get array buffer prototype
jdk.nashorn.internal.objects.Global#getDataViewPrototype()->ScriptObject::: global get data view prototype
jdk.nashorn.internal.objects.Global#getInt8ArrayPrototype()->ScriptObject::: global get int8 array prototype
jdk.nashorn.internal.objects.Global#getUint8ArrayPrototype()->ScriptObject::: global get uint8 array prototype
jdk.nashorn.internal.objects.Global#getUint8ClampedArrayPrototype()->ScriptObject::: global get uint8 clamped array prototype
jdk.nashorn.internal.objects.Global#getInt16ArrayPrototype()->ScriptObject::: global get int16 array prototype
jdk.nashorn.internal.objects.Global#getUint16ArrayPrototype()->ScriptObject::: global get uint16 array prototype
jdk.nashorn.internal.objects.Global#getInt32ArrayPrototype()->ScriptObject::: global get int32 array prototype
jdk.nashorn.internal.objects.Global#getUint32ArrayPrototype()->ScriptObject::: global get uint32 array prototype
jdk.nashorn.internal.objects.Global#getFloat32ArrayPrototype()->ScriptObject::: global get float32 array prototype
jdk.nashorn.internal.objects.Global#getFloat64ArrayPrototype()->ScriptObject::: global get float64 array prototype
jdk.nashorn.internal.objects.Global#getTypeErrorThrower()->ScriptFunction:::Return the function that throws TypeError unconditionally
jdk.nashorn.internal.objects.Global#getBuiltinFunctionApplySwitchPoint()->SwitchPoint:::Get the switchpoint used to check property changes for Function.prototype.apply
jdk.nashorn.internal.objects.Global#isBuiltinFunctionPrototypeApply()->boolean:::Check if the Function.prototype.apply has not been replaced
jdk.nashorn.internal.objects.Global#isBuiltinFunctionPrototypeCall()->boolean:::Check if the Function.prototype.apply has not been replaced
jdk.nashorn.internal.objects.Global#isBuiltInJavaExtend(ScriptFunction)->boolean:::Returns true if the passed function is the built-in "Java.extend".
jdk.nashorn.internal.objects.Global#isBuiltInJavaTo(ScriptFunction)->boolean:::Returns true if the passed function is the built-in "Java.to".
jdk.nashorn.internal.objects.Global#getClassName()->String::: global get class name
jdk.nashorn.internal.objects.Global#regExpCopy(Object)->Object:::Copy function used to clone NativeRegExp objects.
jdk.nashorn.internal.objects.Global#toRegExp(Object)->NativeRegExp:::Convert given object to NativeRegExp type.
jdk.nashorn.internal.objects.Global#toObject(Object)->Object:::ECMA 9.9 ToObject implementation
jdk.nashorn.internal.objects.Global#allocate(Object[])->NativeArray:::Allocate a new object array.
jdk.nashorn.internal.objects.Global#allocate(double[])->NativeArray:::Allocate a new number array.
jdk.nashorn.internal.objects.Global#allocate(int[])->NativeArray:::Allocate a new integer array.
jdk.nashorn.internal.objects.Global#allocateArguments(Object[], Object, int)->ScriptObject:::Allocate a new object array for arguments.
jdk.nashorn.internal.objects.Global#isEval(Object)->boolean:::Called from generated to check if given function is the builtin 'eval'
jdk.nashorn.internal.objects.Global#replaceLocationPropertyPlaceholder(Object, Object)->Object:::Called from generated to replace a location property placeholder with the actual location property value.
jdk.nashorn.internal.objects.Global#isLocationPropertyPlaceholder(Object)->boolean:::Called from runtime internals to check if the passed value is a location property placeholder.
jdk.nashorn.internal.objects.Global#newRegExp(String, String)->Object:::Create a new RegExp object.
jdk.nashorn.internal.objects.Global#objectPrototype()->ScriptObject:::Get the object prototype
jdk.nashorn.internal.objects.Global#newEmptyInstance()->ScriptObject:::Create a new empty object instance.
jdk.nashorn.internal.objects.Global#checkObject(Object)->ScriptObject:::Check if a given object is a ScriptObject, raises an exception if this is not the case
jdk.nashorn.internal.objects.Global#checkObjectCoercible(Object)->void:::ECMA 9.10 - implementation of CheckObjectCoercible, i.e
jdk.nashorn.internal.objects.Global#getLexicalScope()->ScriptObject:::Return the ES6 global scope for lexically declared bindings.
jdk.nashorn.internal.objects.Global#addBoundProperties(ScriptObject, jdk.nashorn.internal.runtime.Property[])->void::: global add bound properties
jdk.nashorn.internal.objects.Global#findGetMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: global find get method
jdk.nashorn.internal.objects.Global#findProperty(Object, boolean, boolean, ScriptObject)->FindProperty::: global find property
jdk.nashorn.internal.objects.Global#findSetMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: global find set method
jdk.nashorn.internal.objects.Global#addShellBuiltins()->void:::Adds jjs shell interactive mode builtin functions to global scope.
jdk.nashorn.internal.objects.Global#getLastRegExpResult()->RegExpResult::: global get last reg exp result
jdk.nashorn.internal.objects.Global#setLastRegExpResult(RegExpResult)->void::: global set last reg exp result
jdk.nashorn.internal.objects.Global#isGlobal()->boolean::: global is global
jdk.nashorn.internal.objects.LinkedMap.Node#getKey()->Object:::Get the node's key.
jdk.nashorn.internal.objects.LinkedMap.Node#getValue()->Object:::Get the node's value.
jdk.nashorn.internal.objects.LinkedMap.Node#setValue(Object)->void:::Set the node's value
jdk.nashorn.internal.objects.LinkedMap.LinkedMapIterator#next()->Node:::Get the next node in this iteration
jdk.nashorn.internal.objects.LinkedMap#set(Object, Object)->void:::Add a key-value pair to the map.
jdk.nashorn.internal.objects.LinkedMap#get(Object)->Object:::Get the value associated with key.
jdk.nashorn.internal.objects.LinkedMap#has(Object)->boolean:::Returns true if key is contained in the map.
jdk.nashorn.internal.objects.LinkedMap#delete(Object)->boolean:::Delete the node associated with key from the map.
jdk.nashorn.internal.objects.LinkedMap#clear()->void:::Remove all key-value pairs from the map.
jdk.nashorn.internal.objects.LinkedMap#size()->int:::Return the current number of key-value pairs in the map.
jdk.nashorn.internal.objects.LinkedMap#getIterator()->LinkedMapIterator:::Get an iterator over the key-value pairs in the map.
jdk.nashorn.internal.objects.MapIterator#next(Object, Object)->Object:::ES6 23.1.5.2.1 %MapIteratorPrototype%.next()
jdk.nashorn.internal.objects.MapIterator#getClassName()->String::: map iterator get class name
jdk.nashorn.internal.objects.MapIterator#next(Object)->IteratorResult::: map iterator next
jdk.nashorn.internal.objects.NativeArguments#getInitialMap()->PropertyMap::: native arguments get initial map
jdk.nashorn.internal.objects.NativeArguments#getClassName()->String::: native arguments get class name
jdk.nashorn.internal.objects.NativeArguments#getArgument(int)->Object:::getArgument is used for named argument access.
jdk.nashorn.internal.objects.NativeArguments#setArgument(int, Object)->void:::setArgument is used for named argument set.
jdk.nashorn.internal.objects.NativeArguments#delete(int, boolean)->boolean::: native arguments delete
jdk.nashorn.internal.objects.NativeArguments#delete(double, boolean)->boolean::: native arguments delete
jdk.nashorn.internal.objects.NativeArguments#delete(Object, boolean)->boolean::: native arguments delete
jdk.nashorn.internal.objects.NativeArguments#defineOwnProperty(Object, Object, boolean)->boolean:::ECMA 15.4.5.1 [[DefineOwnProperty]] ( P, Desc, Throw ) as specialized in ECMA 10.6 for Arguments object.
jdk.nashorn.internal.objects.NativeArguments#allocate(Object[], ScriptFunction, int)->ScriptObject:::Factory to create correct Arguments object based on strict mode.
jdk.nashorn.internal.objects.NativeArguments#G$length(Object)->Object:::Length getter
jdk.nashorn.internal.objects.NativeArguments#S$length(Object, Object)->void:::Length setter
jdk.nashorn.internal.objects.NativeArguments#G$callee(Object)->Object:::Callee getter
jdk.nashorn.internal.objects.NativeArguments#S$callee(Object, Object)->void:::Callee setter
jdk.nashorn.internal.objects.NativeArguments#getLength()->Object::: native arguments get length
jdk.nashorn.internal.objects.NativeArray#findGetIndexMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native array find get index method
jdk.nashorn.internal.objects.NativeArray#findSetIndexMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native array find set index method
jdk.nashorn.internal.objects.NativeArray#getClassName()->String::: native array get class name
jdk.nashorn.internal.objects.NativeArray#getLength()->Object::: native array get length
jdk.nashorn.internal.objects.NativeArray#defineOwnProperty(Object, Object, boolean)->boolean:::ECMA 15.4.5.1 [[DefineOwnProperty]] ( P, Desc, Throw )
jdk.nashorn.internal.objects.NativeArray#defineOwnProperty(int, Object)->void:::Spec
jdk.nashorn.internal.objects.NativeArray#asObjectArray()->Object[]:::Return the array contents upcasted as an ObjectArray, regardless of representation
jdk.nashorn.internal.objects.NativeArray#setIsLengthNotWritable()->void::: native array set is length not writable
jdk.nashorn.internal.objects.NativeArray#isArray(Object, Object)->boolean:::ECMA 15.4.3.2 Array.isArray ( arg )
jdk.nashorn.internal.objects.NativeArray#length(Object)->Object:::Length getter
jdk.nashorn.internal.objects.NativeArray#length(Object, Object)->void:::Length setter
jdk.nashorn.internal.objects.NativeArray#getProtoLength(Object)->Object:::Prototype length getter
jdk.nashorn.internal.objects.NativeArray#setProtoLength(Object, Object)->void:::Prototype length setter
jdk.nashorn.internal.objects.NativeArray#validLength(Object)->long::: native array valid length
jdk.nashorn.internal.objects.NativeArray#toString(Object)->Object:::ECMA 15.4.4.2 Array.prototype.toString ( )
jdk.nashorn.internal.objects.NativeArray#assertNumeric(Object)->Object:::Assert that an array is numeric, if not throw type error
jdk.nashorn.internal.objects.NativeArray#toLocaleString(Object)->String:::ECMA 15.4.4.3 Array.prototype.toLocaleString ( )
jdk.nashorn.internal.objects.NativeArray#construct(boolean, Object, Object...)->NativeArray:::ECMA 15.4.2.2 new Array (len)
jdk.nashorn.internal.objects.NativeArray#construct(boolean, Object)->NativeArray:::ECMA 15.4.2.2 new Array (len)  Specialized constructor for zero arguments - empty array
jdk.nashorn.internal.objects.NativeArray#construct(boolean, Object, boolean)->Object:::ECMA 15.4.2.2 new Array (len)  Specialized constructor for zero arguments - empty array
jdk.nashorn.internal.objects.NativeArray#construct(boolean, Object, int)->NativeArray:::ECMA 15.4.2.2 new Array (len)  Specialized constructor for one integer argument (length)
jdk.nashorn.internal.objects.NativeArray#construct(boolean, Object, long)->NativeArray:::ECMA 15.4.2.2 new Array (len)  Specialized constructor for one long argument (length)
jdk.nashorn.internal.objects.NativeArray#construct(boolean, Object, double)->NativeArray:::ECMA 15.4.2.2 new Array (len)  Specialized constructor for one double argument (length)
jdk.nashorn.internal.objects.NativeArray#concat(Object, int)->NativeArray:::ECMA 15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , ..
jdk.nashorn.internal.objects.NativeArray#concat(Object, double)->NativeArray:::ECMA 15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , ..
jdk.nashorn.internal.objects.NativeArray#concat(Object, Object)->NativeArray:::ECMA 15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , ..
jdk.nashorn.internal.objects.NativeArray#concat(Object, Object...)->NativeArray:::ECMA 15.4.4.4 Array.prototype.concat ( [ item1 [ , item2 [ , ..
jdk.nashorn.internal.objects.NativeArray#join(Object, Object)->String:::ECMA 15.4.4.5 Array.prototype.join (separator)
jdk.nashorn.internal.objects.NativeArray#popInt(Object)->int:::Specialization of pop for ContinuousArrayData   The link guard checks that the array is continuous AND not empty
jdk.nashorn.internal.objects.NativeArray#popDouble(Object)->double:::Specialization of pop for ContinuousArrayData  Primitive specialization, LinkLogic
jdk.nashorn.internal.objects.NativeArray#popObject(Object)->Object:::Specialization of pop for ContinuousArrayData  Primitive specialization, LinkLogic
jdk.nashorn.internal.objects.NativeArray#pop(Object)->Object:::ECMA 15.4.4.6 Array.prototype.pop ()
jdk.nashorn.internal.objects.NativeArray#push(Object, int)->double:::ECMA 15.4.4.7 Array.prototype.push (args...)  Primitive specialization, LinkLogic
jdk.nashorn.internal.objects.NativeArray#push(Object, double)->double:::ECMA 15.4.4.7 Array.prototype.push (args...)  Primitive specialization, LinkLogic
jdk.nashorn.internal.objects.NativeArray#pushObject(Object, Object)->double:::ECMA 15.4.4.7 Array.prototype.push (args...)  Primitive specialization, LinkLogic
jdk.nashorn.internal.objects.NativeArray#push(Object, Object...)->Object:::ECMA 15.4.4.7 Array.prototype.push (args...)
jdk.nashorn.internal.objects.NativeArray#push(Object, Object)->double:::ECMA 15.4.4.7 Array.prototype.push (args...) specialized for single object argument
jdk.nashorn.internal.objects.NativeArray#reverse(Object)->Object:::ECMA 15.4.4.8 Array.prototype.reverse ()
jdk.nashorn.internal.objects.NativeArray#shift(Object)->Object:::ECMA 15.4.4.9 Array.prototype.shift ()
jdk.nashorn.internal.objects.NativeArray#slice(Object, Object, Object)->Object:::ECMA 15.4.4.10 Array.prototype.slice ( start [ , end ] )
jdk.nashorn.internal.objects.NativeArray#sort(Object, Object)->ScriptObject:::ECMA 15.4.4.11 Array.prototype.sort ( comparefn )
jdk.nashorn.internal.objects.NativeArray#splice(Object, Object...)->Object:::ECMA 15.4.4.12 Array.prototype.splice ( start, deleteCount [ item1 [ , item2 [ , ..
jdk.nashorn.internal.objects.NativeArray#unshift(Object, Object...)->Object:::ECMA 15.4.4.13 Array.prototype.unshift ( [ item1 [ , item2 [ , ..
jdk.nashorn.internal.objects.NativeArray#indexOf(Object, Object, Object)->double:::ECMA 15.4.4.14 Array.prototype.indexOf ( searchElement [ , fromIndex ] )
jdk.nashorn.internal.objects.NativeArray#lastIndexOf(Object, Object...)->double:::ECMA 15.4.4.15 Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )
jdk.nashorn.internal.objects.NativeArray#every(Object, Object, Object)->boolean:::ECMA 15.4.4.16 Array.prototype.every ( callbackfn [ , thisArg ] )
jdk.nashorn.internal.objects.NativeArray#some(Object, Object, Object)->boolean:::ECMA 15.4.4.17 Array.prototype.some ( callbackfn [ , thisArg ] )
jdk.nashorn.internal.objects.NativeArray#forEach(Object, Object, Object)->Object:::ECMA 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )
jdk.nashorn.internal.objects.NativeArray#map(Object, Object, Object)->NativeArray:::ECMA 15.4.4.19 Array.prototype.map ( callbackfn [ , thisArg ] )
jdk.nashorn.internal.objects.NativeArray#filter(Object, Object, Object)->NativeArray:::ECMA 15.4.4.20 Array.prototype.filter ( callbackfn [ , thisArg ] )
jdk.nashorn.internal.objects.NativeArray#reduce(Object, Object...)->Object:::ECMA 15.4.4.21 Array.prototype.reduce ( callbackfn [ , initialValue ] )
jdk.nashorn.internal.objects.NativeArray#reduceRight(Object, Object...)->Object:::ECMA 15.4.4.22 Array.prototype.reduceRight ( callbackfn [ , initialValue ] )
jdk.nashorn.internal.objects.NativeArray#entries(Object)->Object:::ECMA6 22.1.3.4 Array.prototype.entries ( )
jdk.nashorn.internal.objects.NativeArray#keys(Object)->Object:::ECMA6 22.1.3.13 Array.prototype.keys ( )
jdk.nashorn.internal.objects.NativeArray#values(Object)->Object:::ECMA6 22.1.3.29 Array.prototype.values ( )
jdk.nashorn.internal.objects.NativeArray#getIterator(Object)->Object:::22.1.3.30 Array.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeArray#toString()->String::: native array to string
jdk.nashorn.internal.objects.NativeArray#getLinkLogic(Class)->SpecializedFunction.LinkLogic::: native array get link logic
jdk.nashorn.internal.objects.NativeArray#hasPerInstanceAssumptions()->boolean::: native array has per instance assumptions
jdk.nashorn.internal.objects.NativeArrayBuffer#constructor(boolean, Object, Object...)->NativeArrayBuffer:::Constructor
jdk.nashorn.internal.objects.NativeArrayBuffer#getNioBuffer()->ByteBuffer::: native array buffer get nio buffer
jdk.nashorn.internal.objects.NativeArrayBuffer#getClassName()->String::: native array buffer get class name
jdk.nashorn.internal.objects.NativeArrayBuffer#byteLength(Object)->int:::Byte length for native array buffer
jdk.nashorn.internal.objects.NativeArrayBuffer#isView(Object, Object)->boolean:::Returns true if an object is an ArrayBufferView
jdk.nashorn.internal.objects.NativeArrayBuffer#slice(Object, Object, Object)->NativeArrayBuffer:::Slice function
jdk.nashorn.internal.objects.NativeArrayBuffer#slice(Object, int, int)->Object:::Specialized slice function
jdk.nashorn.internal.objects.NativeArrayBuffer#slice(Object, int)->Object:::Specialized slice function
jdk.nashorn.internal.objects.NativeArrayBuffer#adjustIndex(int, int)->int:::If index is negative, it refers to an index from the end of the array, as opposed to from the beginning
jdk.nashorn.internal.objects.NativeArrayBuffer#getByteLength()->int::: native array buffer get byte length
jdk.nashorn.internal.objects.NativeArrayBuffer#getBuffer()->ByteBuffer::: native array buffer get buffer
jdk.nashorn.internal.objects.NativeArrayBuffer#getBuffer(int)->ByteBuffer::: native array buffer get buffer
jdk.nashorn.internal.objects.NativeArrayBuffer#getBuffer(int, int)->ByteBuffer::: native array buffer get buffer
jdk.nashorn.internal.objects.NativeBoolean#safeToString()->String::: native boolean safe to string
jdk.nashorn.internal.objects.NativeBoolean#toString()->String::: native boolean to string
jdk.nashorn.internal.objects.NativeBoolean#getValue()->boolean:::Get the value for this NativeBoolean
jdk.nashorn.internal.objects.NativeBoolean#booleanValue()->boolean:::Get the value for this NativeBoolean
jdk.nashorn.internal.objects.NativeBoolean#getClassName()->String::: native boolean get class name
jdk.nashorn.internal.objects.NativeBoolean#toString(Object)->String:::ECMA 15.6.4.2 Boolean.prototype.toString ( )
jdk.nashorn.internal.objects.NativeBoolean#valueOf(Object)->boolean:::ECMA 15.6.4.3 Boolean.prototype.valueOf ( )
jdk.nashorn.internal.objects.NativeBoolean#constructor(boolean, Object, Object)->Object:::ECMA 15.6.2.1 new Boolean (value)
jdk.nashorn.internal.objects.NativeBoolean#lookupPrimitive(LinkRequest, Object)->GuardedInvocation:::Lookup the appropriate method for an invoke dynamic call.
jdk.nashorn.internal.objects.NativeDataView#constructor(boolean, Object, Object...)->NativeDataView:::Create a new DataView object using the passed ArrayBuffer for its storage
jdk.nashorn.internal.objects.NativeDataView#constructor(boolean, Object, Object, int)->NativeDataView:::Specialized version of DataView constructor
jdk.nashorn.internal.objects.NativeDataView#constructor(boolean, Object, Object, int, int)->NativeDataView:::Specialized version of DataView constructor
jdk.nashorn.internal.objects.NativeDataView#getInt8(Object, Object)->int:::Get 8-bit signed int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getInt8(Object, int)->int:::Get 8-bit signed int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getUint8(Object, Object)->int:::Get 8-bit unsigned int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getUint8(Object, int)->int:::Get 8-bit unsigned int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getInt16(Object, Object, Object)->int:::Get 16-bit signed int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getInt16(Object, int)->int:::Get 16-bit signed int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getInt16(Object, int, boolean)->int:::Get 16-bit signed int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getUint16(Object, Object, Object)->int:::Get 16-bit unsigned int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getUint16(Object, int)->int:::Get 16-bit unsigned int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getUint16(Object, int, boolean)->int:::Get 16-bit unsigned int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getInt32(Object, Object, Object)->int:::Get 32-bit signed int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getInt32(Object, int)->int:::Get 32-bit signed int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getInt32(Object, int, boolean)->int:::Get 32-bit signed int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getUint32(Object, Object, Object)->double:::Get 32-bit unsigned int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getUint32(Object, int)->double:::Get 32-bit unsigned int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getUint32(Object, int, boolean)->double:::Get 32-bit unsigned int from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getFloat32(Object, Object, Object)->double:::Get 32-bit float value from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getFloat32(Object, int)->double:::Get 32-bit float value from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getFloat32(Object, int, boolean)->double:::Get 32-bit float value from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getFloat64(Object, Object, Object)->double:::Get 64-bit float value from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getFloat64(Object, int)->double:::Get 64-bit float value from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#getFloat64(Object, int, boolean)->double:::Get 64-bit float value from given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setInt8(Object, Object, Object)->Object:::Set 8-bit signed int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setInt8(Object, int, int)->Object:::Set 8-bit signed int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setUint8(Object, Object, Object)->Object:::Set 8-bit unsigned int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setUint8(Object, int, int)->Object:::Set 8-bit unsigned int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setInt16(Object, Object, Object, Object)->Object:::Set 16-bit signed int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setInt16(Object, int, int)->Object:::Set 16-bit signed int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setInt16(Object, int, int, boolean)->Object:::Set 16-bit signed int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setUint16(Object, Object, Object, Object)->Object:::Set 16-bit unsigned int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setUint16(Object, int, int)->Object:::Set 16-bit unsigned int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setUint16(Object, int, int, boolean)->Object:::Set 16-bit unsigned int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setInt32(Object, Object, Object, Object)->Object:::Set 32-bit signed int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setInt32(Object, int, int)->Object:::Set 32-bit signed int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setInt32(Object, int, int, boolean)->Object:::Set 32-bit signed int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setUint32(Object, Object, Object, Object)->Object:::Set 32-bit unsigned int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setUint32(Object, int, double)->Object:::Set 32-bit unsigned int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setUint32(Object, int, double, boolean)->Object:::Set 32-bit unsigned int at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setFloat32(Object, Object, Object, Object)->Object:::Set 32-bit float at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setFloat32(Object, int, double)->Object:::Set 32-bit float at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setFloat32(Object, int, double, boolean)->Object:::Set 32-bit float at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setFloat64(Object, Object, Object, Object)->Object:::Set 64-bit float at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setFloat64(Object, int, double)->Object:::Set 64-bit float at the given byteOffset
jdk.nashorn.internal.objects.NativeDataView#setFloat64(Object, int, double, boolean)->Object:::Set 64-bit float at the given byteOffset
jdk.nashorn.internal.objects.NativeDate#getClassName()->String::: native date get class name
jdk.nashorn.internal.objects.NativeDate#getDefaultValue(Class)->Object::: native date get default value
jdk.nashorn.internal.objects.NativeDate#construct(boolean, Object)->Object:::Constructor - ECMA 15.9.3.1 new Date
jdk.nashorn.internal.objects.NativeDate#construct(boolean, Object, Object...)->Object:::Constructor - ECMA 15.9.3.1 new Date (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )
jdk.nashorn.internal.objects.NativeDate#safeToString()->String::: native date safe to string
jdk.nashorn.internal.objects.NativeDate#toString()->String::: native date to string
jdk.nashorn.internal.objects.NativeDate#parse(Object, Object)->double:::ECMA 15.9.4.2 Date.parse (string)
jdk.nashorn.internal.objects.NativeDate#UTC(Object, Object...)->double:::ECMA 15.9.4.3 Date.UTC (year, month [, date [, hours [, minutes [, seconds [, ms ] ] ] ] ] )
jdk.nashorn.internal.objects.NativeDate#now(Object)->double:::ECMA 15.9.4.4 Date.now ( )
jdk.nashorn.internal.objects.NativeDate#toString(Object)->String:::ECMA 15.9.5.2 Date.prototype.toString ( )
jdk.nashorn.internal.objects.NativeDate#toDateString(Object)->String:::ECMA 15.9.5.3 Date.prototype.toDateString ( )
jdk.nashorn.internal.objects.NativeDate#toTimeString(Object)->String:::ECMA 15.9.5.4 Date.prototype.toTimeString ( )
jdk.nashorn.internal.objects.NativeDate#toLocaleString(Object)->String:::ECMA 15.9.5.5 Date.prototype.toLocaleString ( )
jdk.nashorn.internal.objects.NativeDate#toLocaleDateString(Object)->String:::ECMA 15.9.5.6 Date.prototype.toLocaleDateString ( )
jdk.nashorn.internal.objects.NativeDate#toLocaleTimeString(Object)->String:::ECMA 15.9.5.7 Date.prototype.toLocaleTimeString ( )
jdk.nashorn.internal.objects.NativeDate#valueOf(Object)->double:::ECMA 15.9.5.8 Date.prototype.valueOf ( )
jdk.nashorn.internal.objects.NativeDate#getTime(Object)->double:::ECMA 15.9.5.9 Date.prototype.getTime ( )
jdk.nashorn.internal.objects.NativeDate#getFullYear(Object)->Object:::ECMA 15.9.5.10 Date.prototype.getFullYear ( )
jdk.nashorn.internal.objects.NativeDate#getUTCFullYear(Object)->double:::ECMA 15.9.5.11 Date.prototype.getUTCFullYear( )
jdk.nashorn.internal.objects.NativeDate#getYear(Object)->double:::B.2.4 Date.prototype.getYear ( )
jdk.nashorn.internal.objects.NativeDate#getMonth(Object)->double:::ECMA 15.9.5.12 Date.prototype.getMonth ( )
jdk.nashorn.internal.objects.NativeDate#getUTCMonth(Object)->double:::ECMA 15.9.5.13 Date.prototype.getUTCMonth ( )
jdk.nashorn.internal.objects.NativeDate#getDate(Object)->double:::ECMA 15.9.5.14 Date.prototype.getDate ( )
jdk.nashorn.internal.objects.NativeDate#getUTCDate(Object)->double:::ECMA 15.9.5.15 Date.prototype.getUTCDate ( )
jdk.nashorn.internal.objects.NativeDate#getDay(Object)->double:::ECMA 15.9.5.16 Date.prototype.getDay ( )
jdk.nashorn.internal.objects.NativeDate#getUTCDay(Object)->double:::ECMA 15.9.5.17 Date.prototype.getUTCDay ( )
jdk.nashorn.internal.objects.NativeDate#getHours(Object)->double:::ECMA 15.9.5.18 Date.prototype.getHours ( )
jdk.nashorn.internal.objects.NativeDate#getUTCHours(Object)->double:::ECMA 15.9.5.19 Date.prototype.getUTCHours ( )
jdk.nashorn.internal.objects.NativeDate#getMinutes(Object)->double:::ECMA 15.9.5.20 Date.prototype.getMinutes ( )
jdk.nashorn.internal.objects.NativeDate#getUTCMinutes(Object)->double:::ECMA 15.9.5.21 Date.prototype.getUTCMinutes ( )
jdk.nashorn.internal.objects.NativeDate#getSeconds(Object)->double:::ECMA 15.9.5.22 Date.prototype.getSeconds ( )
jdk.nashorn.internal.objects.NativeDate#getUTCSeconds(Object)->double:::ECMA 15.9.5.23 Date.prototype.getUTCSeconds ( )
jdk.nashorn.internal.objects.NativeDate#getMilliseconds(Object)->double:::ECMA 15.9.5.24 Date.prototype.getMilliseconds ( )
jdk.nashorn.internal.objects.NativeDate#getUTCMilliseconds(Object)->double:::ECMA 15.9.5.25 Date.prototype.getUTCMilliseconds ( )
jdk.nashorn.internal.objects.NativeDate#getTimezoneOffset(Object)->double:::ECMA 15.9.5.26 Date.prototype.getTimezoneOffset ( )
jdk.nashorn.internal.objects.NativeDate#setTime(Object, Object)->double:::ECMA 15.9.5.27 Date.prototype.setTime (time)
jdk.nashorn.internal.objects.NativeDate#setMilliseconds(Object, Object...)->double:::ECMA 15.9.5.28 Date.prototype.setMilliseconds (ms)
jdk.nashorn.internal.objects.NativeDate#setUTCMilliseconds(Object, Object...)->double:::ECMA 15.9.5.29 Date.prototype.setUTCMilliseconds (ms)
jdk.nashorn.internal.objects.NativeDate#setSeconds(Object, Object...)->double:::ECMA 15.9.5.30 Date.prototype.setSeconds (sec [, ms ] )
jdk.nashorn.internal.objects.NativeDate#setUTCSeconds(Object, Object...)->double:::ECMA 15.9.5.31 Date.prototype.setUTCSeconds (sec [, ms ] )
jdk.nashorn.internal.objects.NativeDate#setMinutes(Object, Object...)->double:::ECMA 15.9.5.32 Date.prototype.setMinutes (min [, sec [, ms ] ] )
jdk.nashorn.internal.objects.NativeDate#setUTCMinutes(Object, Object...)->double:::ECMA 15.9.5.33 Date.prototype.setUTCMinutes (min [, sec [, ms ] ] )
jdk.nashorn.internal.objects.NativeDate#setHours(Object, Object...)->double:::ECMA 15.9.5.34 Date.prototype.setHours (hour [, min [, sec [, ms ] ] ] )
jdk.nashorn.internal.objects.NativeDate#setUTCHours(Object, Object...)->double:::ECMA 15.9.5.35 Date.prototype.setUTCHours (hour [, min [, sec [, ms ] ] ] )
jdk.nashorn.internal.objects.NativeDate#setDate(Object, Object...)->double:::ECMA 15.9.5.36 Date.prototype.setDate (date)
jdk.nashorn.internal.objects.NativeDate#setUTCDate(Object, Object...)->double:::ECMA 15.9.5.37 Date.prototype.setUTCDate (date)
jdk.nashorn.internal.objects.NativeDate#setMonth(Object, Object...)->double:::ECMA 15.9.5.38 Date.prototype.setMonth (month [, date ] )
jdk.nashorn.internal.objects.NativeDate#setUTCMonth(Object, Object...)->double:::ECMA 15.9.5.39 Date.prototype.setUTCMonth (month [, date ] )
jdk.nashorn.internal.objects.NativeDate#setFullYear(Object, Object...)->double:::ECMA 15.9.5.40 Date.prototype.setFullYear (year [, month [, date ] ] )
jdk.nashorn.internal.objects.NativeDate#setUTCFullYear(Object, Object...)->double:::ECMA 15.9.5.41 Date.prototype.setUTCFullYear (year [, month [, date ] ] )
jdk.nashorn.internal.objects.NativeDate#setYear(Object, Object)->double:::ECMA B.2.5 Date.prototype.setYear (year)
jdk.nashorn.internal.objects.NativeDate#toUTCString(Object)->String:::ECMA 15.9.5.42 Date.prototype.toUTCString ( )
jdk.nashorn.internal.objects.NativeDate#toGMTString(Object)->String:::ECMA B.2.6 Date.prototype.toGMTString ( )  See NativeDate#toUTCString(Object)
jdk.nashorn.internal.objects.NativeDate#toISOString(Object)->String:::ECMA 15.9.5.43 Date.prototype.toISOString ( )
jdk.nashorn.internal.objects.NativeDate#toJSON(Object, Object)->Object:::ECMA 15.9.5.44 Date.prototype.toJSON ( key )  Provides a string representation of this Date for use by NativeJSON#stringify(Object, Object, Object, Object)
jdk.nashorn.internal.objects.NativeDebug#getClassName()->String::: native debug get class name
jdk.nashorn.internal.objects.NativeDebug#getArrayDataClass(Object, Object)->Object:::Return the ArrayData class for this ScriptObject
jdk.nashorn.internal.objects.NativeDebug#getArrayData(Object, Object)->Object:::Return the ArrayData for this ScriptObject
jdk.nashorn.internal.objects.NativeDebug#getContext(Object)->Object:::Nashorn extension: get context, context utility
jdk.nashorn.internal.objects.NativeDebug#map(Object, Object)->Object:::Nashorn extension: get map from ScriptObject
jdk.nashorn.internal.objects.NativeDebug#identical(Object, Object, Object)->boolean:::Check object identity comparison regardless of type
jdk.nashorn.internal.objects.NativeDebug#equalWithoutType(Object, Object, Object)->Object:::Returns true if if the two objects are both property maps, and they have identical properties in the same order, but allows the properties to differ in their types.
jdk.nashorn.internal.objects.NativeDebug#diffPropertyMaps(Object, Object, Object)->Object:::Returns a diagnostic string representing the difference of two property maps.
jdk.nashorn.internal.objects.NativeDebug#getClass(Object, Object)->Object:::Object util - getClass
jdk.nashorn.internal.objects.NativeDebug#equals(Object, Object, Object)->boolean:::Object util - equals
jdk.nashorn.internal.objects.NativeDebug#toJavaString(Object, Object)->String:::Object util - toJavaString
jdk.nashorn.internal.objects.NativeDebug#toIdentString(Object, Object)->String:::Do not call overridden toString -- use default toString impl
jdk.nashorn.internal.objects.NativeDebug#isDebuggableFunction(Object, Object)->Object:::Returns true if passed object is a function that is fully debuggable (has all vars in scope).
jdk.nashorn.internal.objects.NativeDebug#getListenerCount(Object, Object)->int:::Returns the property listener count for a script object
jdk.nashorn.internal.objects.NativeDebug#dumpCounters(Object)->Object:::Dump all Nashorn debug mode counters
jdk.nashorn.internal.objects.NativeDebug#getEventQueueCapacity(Object)->Object:::Get the capacity of the event queue
jdk.nashorn.internal.objects.NativeDebug#setEventQueueCapacity(Object, Object)->void:::Set the event queue capacity
jdk.nashorn.internal.objects.NativeDebug#addRuntimeEvent(Object, Object)->void:::Add a runtime event to the runtime event queue
jdk.nashorn.internal.objects.NativeDebug#expandEventQueueCapacity(Object, Object)->void:::Expands the event queue capacity, or truncates if capacity is lower than current capacity
jdk.nashorn.internal.objects.NativeDebug#clearRuntimeEvents(Object)->void:::Clear the runtime event queue
jdk.nashorn.internal.objects.NativeDebug#removeRuntimeEvent(Object, Object)->void:::Remove a specific runtime event from the event queue
jdk.nashorn.internal.objects.NativeDebug#getRuntimeEvents(Object)->Object:::Return all runtime events in the queue as an array
jdk.nashorn.internal.objects.NativeDebug#getLastRuntimeEvent(Object)->Object:::Return the last runtime event in the queue
jdk.nashorn.internal.objects.NativeError#getClassName()->String::: native error get class name
jdk.nashorn.internal.objects.NativeError#constructor(boolean, Object, Object)->NativeError:::ECMA 15.11.2 The Error Constructor
jdk.nashorn.internal.objects.NativeError#initException(ScriptObject)->void::: native error init exception
jdk.nashorn.internal.objects.NativeError#captureStackTrace(Object, Object)->Object:::Nashorn extension: Error.captureStackTrace
jdk.nashorn.internal.objects.NativeError#dumpStack(Object)->Object:::Nashorn extension: Error.dumpStack dumps the stack of the current thread.
jdk.nashorn.internal.objects.NativeError#printStackTrace(Object)->Object:::Nashorn extension: Error.prototype.printStackTrace prints stack trace associated with the exception (if available)
jdk.nashorn.internal.objects.NativeError#getStackTrace(Object)->Object:::Nashorn extension: Error.prototype.getStackTrace() "stack" property is an array typed value containing StackTraceElement objects of JavaScript stack frames.
jdk.nashorn.internal.objects.NativeError#getLineNumber(Object)->Object:::Nashorn extension: Error.prototype.lineNumber
jdk.nashorn.internal.objects.NativeError#setLineNumber(Object, Object)->Object:::Nashorn extension: Error.prototype.lineNumber
jdk.nashorn.internal.objects.NativeError#getColumnNumber(Object)->Object:::Nashorn extension: Error.prototype.columnNumber
jdk.nashorn.internal.objects.NativeError#setColumnNumber(Object, Object)->Object:::Nashorn extension: Error.prototype.columnNumber
jdk.nashorn.internal.objects.NativeError#getFileName(Object)->Object:::Nashorn extension: Error.prototype.fileName
jdk.nashorn.internal.objects.NativeError#setFileName(Object, Object)->Object:::Nashorn extension: Error.prototype.fileName
jdk.nashorn.internal.objects.NativeError#getStack(Object)->Object:::Nashorn extension: Error.prototype.stack "stack" property is a string typed value containing JavaScript stack frames
jdk.nashorn.internal.objects.NativeError#setStack(Object, Object)->Object:::Nashorn extension Accessed from Global while setting up the Error.prototype
jdk.nashorn.internal.objects.NativeError#toString(Object)->Object:::ECMA 15.11.4.4 Error.prototype.toString ( )
jdk.nashorn.internal.objects.NativeEvalError#getClassName()->String::: native eval error get class name
jdk.nashorn.internal.objects.NativeEvalError#constructor(boolean, Object, Object)->NativeEvalError:::ECMA 15.11.6.1 EvalError  Constructor
jdk.nashorn.internal.objects.NativeFloat32Array#constructor(boolean, Object, Object...)->NativeFloat32Array:::Constructor
jdk.nashorn.internal.objects.NativeFloat32Array#factory()->Factory::: native float32 array factory
jdk.nashorn.internal.objects.NativeFloat32Array#isFloatArray()->boolean::: native float32 array is float array
jdk.nashorn.internal.objects.NativeFloat32Array#set(Object, Object, Object)->Object:::Set values
jdk.nashorn.internal.objects.NativeFloat32Array#subarray(Object, Object, Object)->NativeFloat32Array:::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive
jdk.nashorn.internal.objects.NativeFloat32Array#getIterator(Object)->Object:::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeFloat32Array#getPrototype(Global)->ScriptObject::: native float32 array get prototype
jdk.nashorn.internal.objects.NativeFloat64Array#constructor(boolean, Object, Object...)->NativeFloat64Array:::Constructor
jdk.nashorn.internal.objects.NativeFloat64Array#factory()->Factory::: native float64 array factory
jdk.nashorn.internal.objects.NativeFloat64Array#isFloatArray()->boolean::: native float64 array is float array
jdk.nashorn.internal.objects.NativeFloat64Array#set(Object, Object, Object)->Object:::Set values
jdk.nashorn.internal.objects.NativeFloat64Array#subarray(Object, Object, Object)->NativeFloat64Array:::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive
jdk.nashorn.internal.objects.NativeFloat64Array#getIterator(Object)->Object:::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeFloat64Array#getPrototype(Global)->ScriptObject::: native float64 array get prototype
jdk.nashorn.internal.objects.NativeFunction#toString(Object)->String:::ECMA 15.3.4.2 Function.prototype.toString ( )
jdk.nashorn.internal.objects.NativeFunction#apply(Object, Object, Object)->Object:::ECMA 15.3.4.3 Function.prototype.apply (thisArg, argArray)
jdk.nashorn.internal.objects.NativeFunction#toApplyArgs(Object)->Object[]:::Given an array-like object, converts it into a Java object array suitable for invocation of ScriptRuntime.apply or for direct invocation of the applied function.
jdk.nashorn.internal.objects.NativeFunction#call(Object, Object...)->Object:::ECMA 15.3.4.4 Function.prototype.call (thisArg [ , arg1 [ , arg2, ..
jdk.nashorn.internal.objects.NativeFunction#bind(Object, Object...)->Object:::ECMA 15.3.4.5 Function.prototype.bind (thisArg [, arg1 [, arg2, ...]])
jdk.nashorn.internal.objects.NativeFunction#toSource(Object)->String:::Nashorn extension: Function.prototype.toSource
jdk.nashorn.internal.objects.NativeFunction#function(boolean, Object, Object...)->ScriptFunction:::ECMA 15.3.2.1 new Function (p1, p2, ..
jdk.nashorn.internal.objects.NativeInt16Array#constructor(boolean, Object, Object...)->NativeInt16Array:::Constructor
jdk.nashorn.internal.objects.NativeInt16Array#factory()->Factory::: native int16 array factory
jdk.nashorn.internal.objects.NativeInt16Array#set(Object, Object, Object)->Object:::Set values
jdk.nashorn.internal.objects.NativeInt16Array#subarray(Object, Object, Object)->NativeInt16Array:::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive
jdk.nashorn.internal.objects.NativeInt16Array#getIterator(Object)->Object:::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeInt16Array#getPrototype(Global)->ScriptObject::: native int16 array get prototype
jdk.nashorn.internal.objects.NativeInt32Array#constructor(boolean, Object, Object...)->NativeInt32Array:::Constructor
jdk.nashorn.internal.objects.NativeInt32Array#factory()->Factory::: native int32 array factory
jdk.nashorn.internal.objects.NativeInt32Array#set(Object, Object, Object)->Object:::Set values
jdk.nashorn.internal.objects.NativeInt32Array#subarray(Object, Object, Object)->NativeInt32Array:::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive
jdk.nashorn.internal.objects.NativeInt32Array#getIterator(Object)->Object:::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeInt32Array#getPrototype(Global)->ScriptObject::: native int32 array get prototype
jdk.nashorn.internal.objects.NativeInt8Array#constructor(boolean, Object, Object...)->NativeInt8Array:::Constructor
jdk.nashorn.internal.objects.NativeInt8Array#factory()->Factory::: native int8 array factory
jdk.nashorn.internal.objects.NativeInt8Array#set(Object, Object, Object)->Object:::Set values
jdk.nashorn.internal.objects.NativeInt8Array#subarray(Object, Object, Object)->NativeInt8Array:::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive
jdk.nashorn.internal.objects.NativeInt8Array#getIterator(Object)->Object:::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeInt8Array#getPrototype(Global)->ScriptObject::: native int8 array get prototype
jdk.nashorn.internal.objects.NativeJava#isType(Object, Object)->boolean:::Returns true if the specified object is a Java type object, that is an instance of StaticClass.
jdk.nashorn.internal.objects.NativeJava#synchronizedFunc(Object, Object, Object)->Object:::Returns synchronized wrapper version of the given ECMAScript function.
jdk.nashorn.internal.objects.NativeJava#isJavaMethod(Object, Object)->boolean:::Returns true if the specified object is a Java method.
jdk.nashorn.internal.objects.NativeJava#isJavaFunction(Object, Object)->boolean:::Returns true if the specified object is a java function (but not script function)
jdk.nashorn.internal.objects.NativeJava#isJavaObject(Object, Object)->boolean:::Returns true if the specified object is a Java object but not a script object
jdk.nashorn.internal.objects.NativeJava#isScriptObject(Object, Object)->boolean:::Returns true if the specified object is a ECMAScript object, that is an instance of ScriptObject.
jdk.nashorn.internal.objects.NativeJava#isScriptFunction(Object, Object)->boolean:::Returns true if the specified object is a ECMAScript function, that is an instance of ScriptFunction.
jdk.nashorn.internal.objects.NativeJava#type(Object, Object)->Object::: Given a name of a Java type, returns an object representing that type in Nashorn
jdk.nashorn.internal.objects.NativeJava#typeName(Object, Object)->Object:::Returns name of a java type StaticClass.
jdk.nashorn.internal.objects.NativeJava#to(Object, Object, Object)->Object:::Given a script object and a Java type, converts the script object into the desired Java type
jdk.nashorn.internal.objects.NativeJava#from(Object, Object)->NativeArray:::Given a Java array or Collection, returns a JavaScript array with a shallow copy of its contents
jdk.nashorn.internal.objects.NativeJava#getProperties(Object)->List:::Return properties of the given object
jdk.nashorn.internal.objects.NativeJava#extend(Object, Object...)->Object:::Returns a type object for a subclass of the specified Java class (or implementation of the specified interface) that acts as a script-to-Java adapter for it
jdk.nashorn.internal.objects.NativeJava#_super(Object, Object)->Object:::When given an object created using Java.extend() or equivalent mechanism (that is, any JavaScript-to-Java adapter), returns an object that can be used to invoke superclass methods on that object
jdk.nashorn.internal.objects.NativeJava#asJSONCompatible(Object, Object)->Object:::Returns an object that is compatible with Java JSON libraries expectations; namely, that if it itself, or any object transitively reachable through it is a JavaScript array, then such objects will be exposed as JSObject that also implements the List interface for exposing the array elements
jdk.nashorn.internal.objects.NativeJavaImporter#getClassName()->String::: native java importer get class name
jdk.nashorn.internal.objects.NativeJavaImporter#constructor(boolean, Object, Object...)->NativeJavaImporter:::Constructor
jdk.nashorn.internal.objects.NativeJavaImporter#findProperty(Object, boolean, boolean, ScriptObject)->FindProperty::: native java importer find property
jdk.nashorn.internal.objects.NativeJSAdapter#getClassName()->String::: native adapter get class name
jdk.nashorn.internal.objects.NativeJSAdapter#getInt(Object, int)->int::: native adapter get int
jdk.nashorn.internal.objects.NativeJSAdapter#getInt(double, int)->int::: native adapter get int
jdk.nashorn.internal.objects.NativeJSAdapter#getInt(int, int)->int::: native adapter get int
jdk.nashorn.internal.objects.NativeJSAdapter#getDouble(Object, int)->double::: native adapter get double
jdk.nashorn.internal.objects.NativeJSAdapter#getDouble(double, int)->double::: native adapter get double
jdk.nashorn.internal.objects.NativeJSAdapter#getDouble(int, int)->double::: native adapter get double
jdk.nashorn.internal.objects.NativeJSAdapter#get(Object)->Object::: native adapter get
jdk.nashorn.internal.objects.NativeJSAdapter#get(double)->Object::: native adapter get
jdk.nashorn.internal.objects.NativeJSAdapter#get(int)->Object::: native adapter get
jdk.nashorn.internal.objects.NativeJSAdapter#set(Object, int, int)->void::: native adapter set
jdk.nashorn.internal.objects.NativeJSAdapter#set(Object, double, int)->void::: native adapter set
jdk.nashorn.internal.objects.NativeJSAdapter#set(Object, Object, int)->void::: native adapter set
jdk.nashorn.internal.objects.NativeJSAdapter#set(double, int, int)->void::: native adapter set
jdk.nashorn.internal.objects.NativeJSAdapter#set(double, double, int)->void::: native adapter set
jdk.nashorn.internal.objects.NativeJSAdapter#set(double, Object, int)->void::: native adapter set
jdk.nashorn.internal.objects.NativeJSAdapter#set(int, int, int)->void::: native adapter set
jdk.nashorn.internal.objects.NativeJSAdapter#set(int, double, int)->void::: native adapter set
jdk.nashorn.internal.objects.NativeJSAdapter#set(int, Object, int)->void::: native adapter set
jdk.nashorn.internal.objects.NativeJSAdapter#has(Object)->boolean::: native adapter has
jdk.nashorn.internal.objects.NativeJSAdapter#has(int)->boolean::: native adapter has
jdk.nashorn.internal.objects.NativeJSAdapter#has(double)->boolean::: native adapter has
jdk.nashorn.internal.objects.NativeJSAdapter#delete(int, boolean)->boolean::: native adapter delete
jdk.nashorn.internal.objects.NativeJSAdapter#delete(double, boolean)->boolean::: native adapter delete
jdk.nashorn.internal.objects.NativeJSAdapter#delete(Object, boolean)->boolean::: native adapter delete
jdk.nashorn.internal.objects.NativeJSAdapter#propertyIterator()->Iterator::: native adapter property iterator
jdk.nashorn.internal.objects.NativeJSAdapter#valueIterator()->Iterator::: native adapter value iterator
jdk.nashorn.internal.objects.NativeJSAdapter#preventExtensions()->ScriptObject::: native adapter prevent extensions
jdk.nashorn.internal.objects.NativeJSAdapter#isExtensible()->boolean::: native adapter is extensible
jdk.nashorn.internal.objects.NativeJSAdapter#seal()->ScriptObject::: native adapter seal
jdk.nashorn.internal.objects.NativeJSAdapter#isSealed()->boolean::: native adapter is sealed
jdk.nashorn.internal.objects.NativeJSAdapter#freeze()->ScriptObject::: native adapter freeze
jdk.nashorn.internal.objects.NativeJSAdapter#isFrozen()->boolean::: native adapter is frozen
jdk.nashorn.internal.objects.NativeJSAdapter#construct(boolean, Object, Object...)->NativeJSAdapter:::Constructor
jdk.nashorn.internal.objects.NativeJSAdapter#findNewMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native adapter find new method
jdk.nashorn.internal.objects.NativeJSAdapter#findGetMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native adapter find get method
jdk.nashorn.internal.objects.NativeJSAdapter#findSetMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native adapter find set method
jdk.nashorn.internal.objects.NativeJSAdapter#getAdaptee()->ScriptObject:::Get the adaptee
jdk.nashorn.internal.objects.NativeJSON#parse(Object, Object, Object)->Object:::ECMA 15.12.2 parse ( text [ , reviver ] )
jdk.nashorn.internal.objects.NativeJSON#stringify(Object, Object, Object, Object)->Object:::ECMA 15.12.3 stringify ( value [ , replacer [ , space ] ] )
jdk.nashorn.internal.objects.NativeMap#construct(boolean, Object, Object)->Object:::ECMA6 23.1.1 The Map Constructor
jdk.nashorn.internal.objects.NativeMap#clear(Object)->void:::ECMA6 23.1.3.1 Map.prototype.clear ( )
jdk.nashorn.internal.objects.NativeMap#delete(Object, Object)->boolean:::ECMA6 23.1.3.3 Map.prototype.delete ( key )
jdk.nashorn.internal.objects.NativeMap#has(Object, Object)->boolean:::ECMA6 23.1.3.7 Map.prototype.has ( key )
jdk.nashorn.internal.objects.NativeMap#set(Object, Object, Object)->Object:::ECMA6 23.1.3.9 Map.prototype.set ( key , value )
jdk.nashorn.internal.objects.NativeMap#get(Object, Object)->Object:::ECMA6 23.1.3.6 Map.prototype.get ( key )
jdk.nashorn.internal.objects.NativeMap#size(Object)->int:::ECMA6 23.1.3.10 get Map.prototype.size
jdk.nashorn.internal.objects.NativeMap#entries(Object)->Object:::ECMA6 23.1.3.4 Map.prototype.entries ( )
jdk.nashorn.internal.objects.NativeMap#keys(Object)->Object:::ECMA6 23.1.3.8 Map.prototype.keys ( )
jdk.nashorn.internal.objects.NativeMap#values(Object)->Object:::ECMA6 23.1.3.11 Map.prototype.values ( )
jdk.nashorn.internal.objects.NativeMap#getIterator(Object)->Object:::ECMA6 23.1.3.12 Map.prototype [ @@iterator ]( )
jdk.nashorn.internal.objects.NativeMap#forEach(Object, Object, Object)->void::: native map for each
jdk.nashorn.internal.objects.NativeMap#getClassName()->String::: native map get class name
jdk.nashorn.internal.objects.NativeMap#populateMap(LinkedMap, Object, Global)->void::: native map populate map
jdk.nashorn.internal.objects.NativeMap#convertKey(Object)->Object:::Returns a canonicalized key object by converting numbers to their narrowest representation and ConsStrings to strings
jdk.nashorn.internal.objects.NativeMap#getJavaMap()->LinkedMap:::Get the underlying Java map.
jdk.nashorn.internal.objects.NativeMath#abs(Object, Object)->double:::ECMA 15.8.2.1 abs(x)
jdk.nashorn.internal.objects.NativeMath#abs(Object, int)->double:::ECMA 15.8.2.1 abs(x) - specialization for int values
jdk.nashorn.internal.objects.NativeMath#abs(Object, long)->long:::ECMA 15.8.2.1 abs(x) - specialization for long values
jdk.nashorn.internal.objects.NativeMath#abs(Object, double)->double:::ECMA 15.8.2.1 abs(x) - specialization for double values
jdk.nashorn.internal.objects.NativeMath#acos(Object, Object)->double:::ECMA 15.8.2.2 acos(x)
jdk.nashorn.internal.objects.NativeMath#acos(Object, double)->double:::ECMA 15.8.2.2 acos(x) - specialization for double values
jdk.nashorn.internal.objects.NativeMath#asin(Object, Object)->double:::ECMA 15.8.2.3 asin(x)
jdk.nashorn.internal.objects.NativeMath#asin(Object, double)->double:::ECMA 15.8.2.3 asin(x) - specialization for double values
jdk.nashorn.internal.objects.NativeMath#atan(Object, Object)->double:::ECMA 15.8.2.4 atan(x)
jdk.nashorn.internal.objects.NativeMath#atan(Object, double)->double:::ECMA 15.8.2.4 atan(x) - specialization for double values
jdk.nashorn.internal.objects.NativeMath#atan2(Object, Object, Object)->double:::ECMA 15.8.2.5 atan2(x,y)
jdk.nashorn.internal.objects.NativeMath#atan2(Object, double, double)->double:::ECMA 15.8.2.5 atan2(x,y) - specialization for double values
jdk.nashorn.internal.objects.NativeMath#ceil(Object, Object)->double:::ECMA 15.8.2.6 ceil(x)
jdk.nashorn.internal.objects.NativeMath#ceil(Object, int)->int:::ECMA 15.8.2.6 ceil(x) - specialized version for ints
jdk.nashorn.internal.objects.NativeMath#ceil(Object, long)->long:::ECMA 15.8.2.6 ceil(x) - specialized version for longs
jdk.nashorn.internal.objects.NativeMath#ceil(Object, double)->double:::ECMA 15.8.2.6 ceil(x) - specialized version for doubles
jdk.nashorn.internal.objects.NativeMath#cos(Object, Object)->double:::ECMA 15.8.2.7 cos(x)
jdk.nashorn.internal.objects.NativeMath#cos(Object, double)->double:::ECMA 15.8.2.7 cos(x) - specialized version for doubles
jdk.nashorn.internal.objects.NativeMath#exp(Object, Object)->double:::ECMA 15.8.2.8 exp(x)
jdk.nashorn.internal.objects.NativeMath#floor(Object, Object)->double:::ECMA 15.8.2.9 floor(x)
jdk.nashorn.internal.objects.NativeMath#floor(Object, int)->int:::ECMA 15.8.2.9 floor(x) - specialized version for ints
jdk.nashorn.internal.objects.NativeMath#floor(Object, long)->long:::ECMA 15.8.2.9 floor(x) - specialized version for longs
jdk.nashorn.internal.objects.NativeMath#floor(Object, double)->double:::ECMA 15.8.2.9 floor(x) - specialized version for doubles
jdk.nashorn.internal.objects.NativeMath#log(Object, Object)->double:::ECMA 15.8.2.10 log(x)
jdk.nashorn.internal.objects.NativeMath#log(Object, double)->double:::ECMA 15.8.2.10 log(x) - specialized version for doubles
jdk.nashorn.internal.objects.NativeMath#max(Object, Object...)->double:::ECMA 15.8.2.11 max(x)
jdk.nashorn.internal.objects.NativeMath#max(Object)->double:::ECMA 15.8.2.11 max(x) - specialized no args version
jdk.nashorn.internal.objects.NativeMath#max(Object, int, int)->int:::ECMA 15.8.2.11 max(x) - specialized version for ints
jdk.nashorn.internal.objects.NativeMath#max(Object, long, long)->long:::ECMA 15.8.2.11 max(x) - specialized version for longs
jdk.nashorn.internal.objects.NativeMath#max(Object, double, double)->double:::ECMA 15.8.2.11 max(x) - specialized version for doubles
jdk.nashorn.internal.objects.NativeMath#max(Object, Object, Object)->double:::ECMA 15.8.2.11 max(x) - specialized version for two Object args
jdk.nashorn.internal.objects.NativeMath#min(Object, Object...)->double:::ECMA 15.8.2.12 min(x)
jdk.nashorn.internal.objects.NativeMath#min(Object)->double:::ECMA 15.8.2.11 min(x) - specialized no args version
jdk.nashorn.internal.objects.NativeMath#min(Object, int, int)->int:::ECMA 15.8.2.12 min(x) - specialized version for ints
jdk.nashorn.internal.objects.NativeMath#min(Object, long, long)->long:::ECMA 15.8.2.12 min(x) - specialized version for longs
jdk.nashorn.internal.objects.NativeMath#min(Object, double, double)->double:::ECMA 15.8.2.12 min(x) - specialized version for doubles
jdk.nashorn.internal.objects.NativeMath#min(Object, Object, Object)->double:::ECMA 15.8.2.12 min(x) - specialized version for two Object args
jdk.nashorn.internal.objects.NativeMath#pow(Object, Object, Object)->double:::ECMA 15.8.2.13 pow(x,y)
jdk.nashorn.internal.objects.NativeMath#pow(Object, double, double)->double:::ECMA 15.8.2.13 pow(x,y) - specialized version for doubles
jdk.nashorn.internal.objects.NativeMath#random(Object)->double:::ECMA 15.8.2.14 random()
jdk.nashorn.internal.objects.NativeMath#round(Object, Object)->double:::ECMA 15.8.2.15 round(x)
jdk.nashorn.internal.objects.NativeMath#sin(Object, Object)->double:::ECMA 15.8.2.16 sin(x)
jdk.nashorn.internal.objects.NativeMath#sin(Object, double)->double:::ECMA 15.8.2.16 sin(x) - specialized version for doubles
jdk.nashorn.internal.objects.NativeMath#sqrt(Object, Object)->double:::ECMA 15.8.2.17 sqrt(x)
jdk.nashorn.internal.objects.NativeMath#sqrt(Object, double)->double:::ECMA 15.8.2.17 sqrt(x) - specialized version for doubles
jdk.nashorn.internal.objects.NativeMath#tan(Object, Object)->double:::ECMA 15.8.2.18 tan(x)
jdk.nashorn.internal.objects.NativeMath#tan(Object, double)->double:::ECMA 15.8.2.18 tan(x) - specialized version for doubles
jdk.nashorn.internal.objects.NativeNumber#safeToString()->String::: native number safe to string
jdk.nashorn.internal.objects.NativeNumber#toString()->String::: native number to string
jdk.nashorn.internal.objects.NativeNumber#getValue()->double:::Get the value of this Number
jdk.nashorn.internal.objects.NativeNumber#doubleValue()->double:::Get the value of this Number
jdk.nashorn.internal.objects.NativeNumber#getClassName()->String::: native number get class name
jdk.nashorn.internal.objects.NativeNumber#constructor(boolean, Object, Object...)->Object:::ECMA 15.7.2 - The Number constructor
jdk.nashorn.internal.objects.NativeNumber#toFixed(Object, Object)->String:::ECMA 15.7.4.5 Number.prototype.toFixed (fractionDigits)
jdk.nashorn.internal.objects.NativeNumber#toFixed(Object, int)->String:::ECMA 15.7.4.5 Number.prototype.toFixed (fractionDigits) specialized for int fractionDigits
jdk.nashorn.internal.objects.NativeNumber#toExponential(Object, Object)->String:::ECMA 15.7.4.6 Number.prototype.toExponential (fractionDigits)
jdk.nashorn.internal.objects.NativeNumber#toPrecision(Object, Object)->String:::ECMA 15.7.4.7 Number.prototype.toPrecision (precision)
jdk.nashorn.internal.objects.NativeNumber#toPrecision(Object, int)->String:::ECMA 15.7.4.7 Number.prototype.toPrecision (precision) specialized f
jdk.nashorn.internal.objects.NativeNumber#toString(Object, Object)->String:::ECMA 15.7.4.2 Number.prototype.toString ( [ radix ] )
jdk.nashorn.internal.objects.NativeNumber#toLocaleString(Object)->String:::ECMA 15.7.4.3 Number.prototype.toLocaleString()
jdk.nashorn.internal.objects.NativeNumber#valueOf(Object)->double:::ECMA 15.7.4.4 Number.prototype.valueOf ( )
jdk.nashorn.internal.objects.NativeNumber#lookupPrimitive(LinkRequest, Object)->GuardedInvocation:::Lookup the appropriate method for an invoke dynamic call.
jdk.nashorn.internal.objects.NativeObject#setIndexedPropertiesToExternalArrayData(Object, Object, Object)->ScriptObject:::Nashorn extension: setIndexedPropertiesToExternalArrayData
jdk.nashorn.internal.objects.NativeObject#getPrototypeOf(Object, Object)->Object:::ECMA 15.2.3.2 Object.getPrototypeOf ( O )
jdk.nashorn.internal.objects.NativeObject#setPrototypeOf(Object, Object, Object)->Object:::Nashorn extension: Object.setPrototypeOf ( O, proto ) Also found in ES6 draft specification.
jdk.nashorn.internal.objects.NativeObject#getOwnPropertyDescriptor(Object, Object, Object)->Object:::ECMA 15.2.3.3 Object.getOwnPropertyDescriptor ( O, P )
jdk.nashorn.internal.objects.NativeObject#getOwnPropertyNames(Object, Object)->ScriptObject:::ECMA 15.2.3.4 Object.getOwnPropertyNames ( O )
jdk.nashorn.internal.objects.NativeObject#getOwnPropertySymbols(Object, Object)->ScriptObject:::ECMA 2 19.1.2.8 Object.getOwnPropertySymbols ( O )
jdk.nashorn.internal.objects.NativeObject#create(Object, Object, Object)->ScriptObject:::ECMA 15.2.3.5 Object.create ( O [, Properties] )
jdk.nashorn.internal.objects.NativeObject#defineProperty(Object, Object, Object, Object)->ScriptObject:::ECMA 15.2.3.6 Object.defineProperty ( O, P, Attributes )
jdk.nashorn.internal.objects.NativeObject#defineProperties(Object, Object, Object)->ScriptObject:::ECMA 5.2.3.7 Object.defineProperties ( O, Properties )
jdk.nashorn.internal.objects.NativeObject#seal(Object, Object)->Object:::ECMA 15.2.3.8 Object.seal ( O )
jdk.nashorn.internal.objects.NativeObject#freeze(Object, Object)->Object:::ECMA 15.2.3.9 Object.freeze ( O )
jdk.nashorn.internal.objects.NativeObject#preventExtensions(Object, Object)->Object:::ECMA 15.2.3.10 Object.preventExtensions ( O )
jdk.nashorn.internal.objects.NativeObject#isSealed(Object, Object)->boolean:::ECMA 15.2.3.11 Object.isSealed ( O )
jdk.nashorn.internal.objects.NativeObject#isFrozen(Object, Object)->boolean:::ECMA 15.2.3.12 Object.isFrozen ( O )
jdk.nashorn.internal.objects.NativeObject#isExtensible(Object, Object)->boolean:::ECMA 15.2.3.13 Object.isExtensible ( O )
jdk.nashorn.internal.objects.NativeObject#keys(Object, Object)->ScriptObject:::ECMA 15.2.3.14 Object.keys ( O )
jdk.nashorn.internal.objects.NativeObject#construct(boolean, Object, Object)->Object:::ECMA 15.2.2.1 , 15.2.1.1 new Object([value]) and Object([value])  Constructor
jdk.nashorn.internal.objects.NativeObject#toString(Object)->String:::ECMA 15.2.4.2 Object.prototype.toString ( )
jdk.nashorn.internal.objects.NativeObject#toLocaleString(Object)->Object:::ECMA 15.2.4.3 Object.prototype.toLocaleString ( )
jdk.nashorn.internal.objects.NativeObject#valueOf(Object)->Object:::ECMA 15.2.4.4 Object.prototype.valueOf ( )
jdk.nashorn.internal.objects.NativeObject#hasOwnProperty(Object, Object)->boolean:::ECMA 15.2.4.5 Object.prototype.hasOwnProperty (V)
jdk.nashorn.internal.objects.NativeObject#isPrototypeOf(Object, Object)->boolean:::ECMA 15.2.4.6 Object.prototype.isPrototypeOf (V)
jdk.nashorn.internal.objects.NativeObject#propertyIsEnumerable(Object, Object)->boolean:::ECMA 15.2.4.7 Object.prototype.propertyIsEnumerable (V)
jdk.nashorn.internal.objects.NativeObject#bindProperties(Object, Object, Object)->Object:::Nashorn extension: Object.bindProperties  Binds the source object's properties to the target object
jdk.nashorn.internal.objects.NativeObject#bindAllProperties(ScriptObject, ScriptObjectMirror)->Object:::Binds the source mirror object's properties to the target object
jdk.nashorn.internal.objects.NativeRangeError#getClassName()->String::: native range error get class name
jdk.nashorn.internal.objects.NativeRangeError#constructor(boolean, Object, Object)->NativeRangeError:::ECMA 15.11.6.2 RangeError  Constructor
jdk.nashorn.internal.objects.NativeReferenceError#getClassName()->String::: native reference error get class name
jdk.nashorn.internal.objects.NativeReferenceError#constructor(boolean, Object, Object)->NativeReferenceError:::ECMA 15.11.6.3 ReferenceError  Constructor
jdk.nashorn.internal.objects.NativeRegExp#getClassName()->String::: native reg exp get class name
jdk.nashorn.internal.objects.NativeRegExp#constructor(boolean, Object, Object...)->NativeRegExp:::ECMA 15.10.4  Constructor
jdk.nashorn.internal.objects.NativeRegExp#constructor(boolean, Object)->NativeRegExp:::ECMA 15.10.4  Constructor - specialized version, no args, empty regexp
jdk.nashorn.internal.objects.NativeRegExp#constructor(boolean, Object, Object)->NativeRegExp:::ECMA 15.10.4  Constructor - specialized version, pattern, no flags
jdk.nashorn.internal.objects.NativeRegExp#constructor(boolean, Object, Object, Object)->NativeRegExp:::ECMA 15.10.4  Constructor - specialized version, pattern and flags
jdk.nashorn.internal.objects.NativeRegExp#newRegExp(Object, Object)->NativeRegExp:::External constructor used in generated code, which explains the public access
jdk.nashorn.internal.objects.NativeRegExp#flatRegExp(String)->NativeRegExp:::Build a regexp that matches string as-is
jdk.nashorn.internal.objects.NativeRegExp#safeToString()->String::: native reg exp safe to string
jdk.nashorn.internal.objects.NativeRegExp#toString()->String::: native reg exp to string
jdk.nashorn.internal.objects.NativeRegExp#compile(Object, Object, Object)->ScriptObject:::Nashorn extension: RegExp.prototype.compile - everybody implements this!
jdk.nashorn.internal.objects.NativeRegExp#exec(Object, Object)->ScriptObject:::ECMA 15.10.6.2 RegExp.prototype.exec(string)
jdk.nashorn.internal.objects.NativeRegExp#test(Object, Object)->boolean:::ECMA 15.10.6.3 RegExp.prototype.test(string)
jdk.nashorn.internal.objects.NativeRegExp#toString(Object)->String:::ECMA 15.10.6.4 RegExp.prototype.toString()
jdk.nashorn.internal.objects.NativeRegExp#source(Object)->Object:::ECMA 15.10.7.1 source
jdk.nashorn.internal.objects.NativeRegExp#global(Object)->Object:::ECMA 15.10.7.2 global
jdk.nashorn.internal.objects.NativeRegExp#ignoreCase(Object)->Object:::ECMA 15.10.7.3 ignoreCase
jdk.nashorn.internal.objects.NativeRegExp#multiline(Object)->Object:::ECMA 15.10.7.4 multiline
jdk.nashorn.internal.objects.NativeRegExp#getLastInput(Object)->Object:::Getter for non-standard RegExp.input property.
jdk.nashorn.internal.objects.NativeRegExp#getLastMultiline(Object)->Object:::Getter for non-standard RegExp.multiline property.
jdk.nashorn.internal.objects.NativeRegExp#getLastMatch(Object)->Object:::Getter for non-standard RegExp.lastMatch property.
jdk.nashorn.internal.objects.NativeRegExp#getLastParen(Object)->Object:::Getter for non-standard RegExp.lastParen property.
jdk.nashorn.internal.objects.NativeRegExp#getLeftContext(Object)->Object:::Getter for non-standard RegExp.leftContext property.
jdk.nashorn.internal.objects.NativeRegExp#getRightContext(Object)->Object:::Getter for non-standard RegExp.rightContext property.
jdk.nashorn.internal.objects.NativeRegExp#getGroup1(Object)->Object:::Getter for non-standard RegExp.$1 property.
jdk.nashorn.internal.objects.NativeRegExp#getGroup2(Object)->Object:::Getter for non-standard RegExp.$2 property.
jdk.nashorn.internal.objects.NativeRegExp#getGroup3(Object)->Object:::Getter for non-standard RegExp.$3 property.
jdk.nashorn.internal.objects.NativeRegExp#getGroup4(Object)->Object:::Getter for non-standard RegExp.$4 property.
jdk.nashorn.internal.objects.NativeRegExp#getGroup5(Object)->Object:::Getter for non-standard RegExp.$5 property.
jdk.nashorn.internal.objects.NativeRegExp#getGroup6(Object)->Object:::Getter for non-standard RegExp.$6 property.
jdk.nashorn.internal.objects.NativeRegExp#getGroup7(Object)->Object:::Getter for non-standard RegExp.$7 property.
jdk.nashorn.internal.objects.NativeRegExp#getGroup8(Object)->Object:::Getter for non-standard RegExp.$8 property.
jdk.nashorn.internal.objects.NativeRegExp#getGroup9(Object)->Object:::Getter for non-standard RegExp.$9 property.
jdk.nashorn.internal.objects.NativeRegExp#exec(String)->NativeRegExpExecResult:::Executes a search for a match within a string based on a regular expression
jdk.nashorn.internal.objects.NativeRegExp#test(String)->boolean:::Executes a search for a match within a string based on a regular expression.
jdk.nashorn.internal.objects.NativeRegExp#replace(String, String, Object)->String:::Searches and replaces the regular expression portion (match) with the replaced text instead
jdk.nashorn.internal.objects.NativeRegExp#split(String, long)->NativeArray:::Breaks up a string into an array of substrings based on a regular expression or fixed string.
jdk.nashorn.internal.objects.NativeRegExp#search(String)->int:::Tests for a match in a string
jdk.nashorn.internal.objects.NativeRegExp#getLastIndex()->int:::Fast lastIndex getter
jdk.nashorn.internal.objects.NativeRegExp#getLastIndexObject()->Object:::Fast lastIndex getter
jdk.nashorn.internal.objects.NativeRegExp#setLastIndex(int)->void:::Fast lastIndex setter
jdk.nashorn.internal.objects.NativeRegExp#getGlobal()->boolean::: native reg exp get global
jdk.nashorn.internal.objects.NativeRegExpExecResult#getClassName()->String::: native reg exp exec result get class name
jdk.nashorn.internal.objects.NativeRegExpExecResult#length(Object)->Object:::Length getter
jdk.nashorn.internal.objects.NativeRegExpExecResult#length(Object, Object)->void:::Length setter
jdk.nashorn.internal.objects.NativeSet#construct(boolean, Object, Object)->Object:::ECMA6 23.1 Set constructor
jdk.nashorn.internal.objects.NativeSet#add(Object, Object)->Object:::ECMA6 23.2.3.1 Set.prototype.add ( value )
jdk.nashorn.internal.objects.NativeSet#has(Object, Object)->boolean:::ECMA6 23.2.3.7 Set.prototype.has ( value )
jdk.nashorn.internal.objects.NativeSet#clear(Object)->void:::ECMA6 23.2.3.2 Set.prototype.clear ( )
jdk.nashorn.internal.objects.NativeSet#delete(Object, Object)->boolean:::ECMA6 23.2.3.4 Set.prototype.delete ( value )
jdk.nashorn.internal.objects.NativeSet#size(Object)->int:::ECMA6 23.2.3.9 get Set.prototype.size
jdk.nashorn.internal.objects.NativeSet#entries(Object)->Object:::ECMA6 23.2.3.5 Set.prototype.entries ( )
jdk.nashorn.internal.objects.NativeSet#keys(Object)->Object:::ECMA6 23.2.3.8 Set.prototype.keys ( )
jdk.nashorn.internal.objects.NativeSet#values(Object)->Object:::ECMA6 23.2.3.10 Set.prototype.values ( )
jdk.nashorn.internal.objects.NativeSet#getIterator(Object)->Object:::ECMA6 23.2.3.11 Set.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeSet#forEach(Object, Object, Object)->void:::ECMA6 23.2.3.6 Set.prototype.forEach ( callbackfn [ , thisArg ] )
jdk.nashorn.internal.objects.NativeSet#getClassName()->String::: native set get class name
jdk.nashorn.internal.objects.NativeSet#populateSet(LinkedMap, Object, Global)->void::: native set populate set
jdk.nashorn.internal.objects.NativeSet#getJavaMap()->LinkedMap::: native set get java map
jdk.nashorn.internal.objects.NativeStrictArguments#getInitialMap()->PropertyMap::: native strict arguments get initial map
jdk.nashorn.internal.objects.NativeStrictArguments#getClassName()->String::: native strict arguments get class name
jdk.nashorn.internal.objects.NativeStrictArguments#getArgument(int)->Object:::getArgument is used for named argument access.
jdk.nashorn.internal.objects.NativeStrictArguments#setArgument(int, Object)->void:::setArgument is used for named argument set.
jdk.nashorn.internal.objects.NativeStrictArguments#G$length(Object)->Object:::Length getter
jdk.nashorn.internal.objects.NativeStrictArguments#S$length(Object, Object)->void:::Length setter
jdk.nashorn.internal.objects.NativeString#safeToString()->String::: native string safe to string
jdk.nashorn.internal.objects.NativeString#toString()->String::: native string to string
jdk.nashorn.internal.objects.NativeString#getClassName()->String::: native string get class name
jdk.nashorn.internal.objects.NativeString#getLength()->Object::: native string get length
jdk.nashorn.internal.objects.NativeString#findGetMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native string find get method
jdk.nashorn.internal.objects.NativeString#findGetIndexMethod(CallSiteDescriptor, LinkRequest)->GuardedInvocation::: native string find get index method
jdk.nashorn.internal.objects.NativeString#get(Object)->Object::: native string get
jdk.nashorn.internal.objects.NativeString#get(double)->Object::: native string get
jdk.nashorn.internal.objects.NativeString#get(int)->Object::: native string get
jdk.nashorn.internal.objects.NativeString#getInt(Object, int)->int::: native string get int
jdk.nashorn.internal.objects.NativeString#getInt(double, int)->int::: native string get int
jdk.nashorn.internal.objects.NativeString#getInt(int, int)->int::: native string get int
jdk.nashorn.internal.objects.NativeString#getDouble(Object, int)->double::: native string get double
jdk.nashorn.internal.objects.NativeString#getDouble(double, int)->double::: native string get double
jdk.nashorn.internal.objects.NativeString#getDouble(int, int)->double::: native string get double
jdk.nashorn.internal.objects.NativeString#has(Object)->boolean::: native string has
jdk.nashorn.internal.objects.NativeString#has(int)->boolean::: native string has
jdk.nashorn.internal.objects.NativeString#has(double)->boolean::: native string has
jdk.nashorn.internal.objects.NativeString#hasOwnProperty(Object)->boolean::: native string has own property
jdk.nashorn.internal.objects.NativeString#hasOwnProperty(int)->boolean::: native string has own property
jdk.nashorn.internal.objects.NativeString#hasOwnProperty(double)->boolean::: native string has own property
jdk.nashorn.internal.objects.NativeString#delete(int, boolean)->boolean::: native string delete
jdk.nashorn.internal.objects.NativeString#delete(double, boolean)->boolean::: native string delete
jdk.nashorn.internal.objects.NativeString#delete(Object, boolean)->boolean::: native string delete
jdk.nashorn.internal.objects.NativeString#getOwnPropertyDescriptor(Object)->Object::: native string get own property descriptor
jdk.nashorn.internal.objects.NativeString#getOwnKeys(Class, boolean, Set)->T[]:::return a List of own keys associated with the object.
jdk.nashorn.internal.objects.NativeString#length(Object)->Object:::ECMA 15.5.3 String.length
jdk.nashorn.internal.objects.NativeString#fromCharCode(Object, Object...)->String:::ECMA 15.5.3.2 String.fromCharCode ( [ char0 [ , char1 [ , ..
jdk.nashorn.internal.objects.NativeString#fromCharCode(Object, Object)->Object:::ECMA 15.5.3.2 - specialization for one char
jdk.nashorn.internal.objects.NativeString#fromCharCode(Object, int)->String:::ECMA 15.5.3.2 - specialization for one char of int type
jdk.nashorn.internal.objects.NativeString#fromCharCode(Object, int, int)->Object:::ECMA 15.5.3.2 - specialization for two chars of int type
jdk.nashorn.internal.objects.NativeString#fromCharCode(Object, int, int, int)->Object:::ECMA 15.5.3.2 - specialization for three chars of int type
jdk.nashorn.internal.objects.NativeString#fromCharCode(Object, int, int, int, int)->String:::ECMA 15.5.3.2 - specialization for four chars of int type
jdk.nashorn.internal.objects.NativeString#fromCharCode(Object, double)->String:::ECMA 15.5.3.2 - specialization for one char of double type
jdk.nashorn.internal.objects.NativeString#toString(Object)->String:::ECMA 15.5.4.2 String.prototype.toString ( )
jdk.nashorn.internal.objects.NativeString#valueOf(Object)->String:::ECMA 15.5.4.3 String.prototype.valueOf ( )
jdk.nashorn.internal.objects.NativeString#charAt(Object, Object)->String:::ECMA 15.5.4.4 String.prototype.charAt (pos)
jdk.nashorn.internal.objects.NativeString#charAt(Object, double)->String:::ECMA 15.5.4.4 String.prototype.charAt (pos) - specialized version for double position
jdk.nashorn.internal.objects.NativeString#charAt(Object, int)->String:::ECMA 15.5.4.4 String.prototype.charAt (pos) - specialized version for int position
jdk.nashorn.internal.objects.NativeString#charCodeAt(Object, Object)->double:::ECMA 15.5.4.5 String.prototype.charCodeAt (pos)
jdk.nashorn.internal.objects.NativeString#charCodeAt(Object, double)->int:::ECMA 15.5.4.5 String.prototype.charCodeAt (pos) - specialized version for double position
jdk.nashorn.internal.objects.NativeString#charCodeAt(Object, int)->int::: native string char code at
jdk.nashorn.internal.objects.NativeString#concat(Object, Object...)->Object:::ECMA 15.5.4.6 String.prototype.concat ( [ string1 [ , string2 [ , ..
jdk.nashorn.internal.objects.NativeString#indexOf(Object, Object, Object)->int:::ECMA 15.5.4.7 String.prototype.indexOf (searchString, position)
jdk.nashorn.internal.objects.NativeString#indexOf(Object, Object)->int:::ECMA 15.5.4.7 String.prototype.indexOf (searchString, position) specialized for no position parameter
jdk.nashorn.internal.objects.NativeString#indexOf(Object, Object, double)->int:::ECMA 15.5.4.7 String.prototype.indexOf (searchString, position) specialized for double position parameter
jdk.nashorn.internal.objects.NativeString#indexOf(Object, Object, int)->int:::ECMA 15.5.4.7 String.prototype.indexOf (searchString, position) specialized for int position parameter
jdk.nashorn.internal.objects.NativeString#lastIndexOf(Object, Object, Object)->int:::ECMA 15.5.4.8 String.prototype.lastIndexOf (searchString, position)
jdk.nashorn.internal.objects.NativeString#localeCompare(Object, Object)->double:::ECMA 15.5.4.9 String.prototype.localeCompare (that)
jdk.nashorn.internal.objects.NativeString#match(Object, Object)->ScriptObject:::ECMA 15.5.4.10 String.prototype.match (regexp)
jdk.nashorn.internal.objects.NativeString#replace(Object, Object, Object)->String:::ECMA 15.5.4.11 String.prototype.replace (searchValue, replaceValue)
jdk.nashorn.internal.objects.NativeString#search(Object, Object)->int:::ECMA 15.5.4.12 String.prototype.search (regexp)
jdk.nashorn.internal.objects.NativeString#slice(Object, Object, Object)->String:::ECMA 15.5.4.13 String.prototype.slice (start, end)
jdk.nashorn.internal.objects.NativeString#slice(Object, int)->String:::ECMA 15.5.4.13 String.prototype.slice (start, end) specialized for single int parameter
jdk.nashorn.internal.objects.NativeString#slice(Object, double)->String:::ECMA 15.5.4.13 String.prototype.slice (start, end) specialized for single double parameter
jdk.nashorn.internal.objects.NativeString#slice(Object, int, int)->String:::ECMA 15.5.4.13 String.prototype.slice (start, end) specialized for two int parameters
jdk.nashorn.internal.objects.NativeString#slice(Object, double, double)->String:::ECMA 15.5.4.13 String.prototype.slice (start, end) specialized for two double parameters
jdk.nashorn.internal.objects.NativeString#split(Object, Object, Object)->ScriptObject:::ECMA 15.5.4.14 String.prototype.split (separator, limit)
jdk.nashorn.internal.objects.NativeString#substr(Object, Object, Object)->String:::ECMA B.2.3 String.prototype.substr (start, length)
jdk.nashorn.internal.objects.NativeString#substring(Object, Object, Object)->String:::ECMA 15.5.4.15 String.prototype.substring (start, end)
jdk.nashorn.internal.objects.NativeString#substring(Object, int)->String:::ECMA 15.5.4.15 String.prototype.substring (start, end) specialized for int start parameter
jdk.nashorn.internal.objects.NativeString#substring(Object, double)->String:::ECMA 15.5.4.15 String.prototype.substring (start, end) specialized for double start parameter
jdk.nashorn.internal.objects.NativeString#substring(Object, int, int)->String:::ECMA 15.5.4.15 String.prototype.substring (start, end) specialized for int start and end parameters
jdk.nashorn.internal.objects.NativeString#substring(Object, double, double)->String:::ECMA 15.5.4.15 String.prototype.substring (start, end) specialized for double start and end parameters
jdk.nashorn.internal.objects.NativeString#toLowerCase(Object)->String:::ECMA 15.5.4.16 String.prototype.toLowerCase ( )
jdk.nashorn.internal.objects.NativeString#toLocaleLowerCase(Object)->String:::ECMA 15.5.4.17 String.prototype.toLocaleLowerCase ( )
jdk.nashorn.internal.objects.NativeString#toUpperCase(Object)->String:::ECMA 15.5.4.18 String.prototype.toUpperCase ( )
jdk.nashorn.internal.objects.NativeString#toLocaleUpperCase(Object)->String:::ECMA 15.5.4.19 String.prototype.toLocaleUpperCase ( )
jdk.nashorn.internal.objects.NativeString#trim(Object)->String:::ECMA 15.5.4.20 String.prototype.trim ( )
jdk.nashorn.internal.objects.NativeString#trimLeft(Object)->String:::Nashorn extension: String.prototype.trimLeft ( )
jdk.nashorn.internal.objects.NativeString#trimRight(Object)->String:::Nashorn extension: String.prototype.trimRight ( )
jdk.nashorn.internal.objects.NativeString#constructor(boolean, Object, Object...)->Object:::ECMA 15.5.2.1 new String ( [ value ] )  Constructor
jdk.nashorn.internal.objects.NativeString#constructor(boolean, Object)->Object:::ECMA 15.5.2.1 new String ( [ value ] ) - special version with no args  Constructor
jdk.nashorn.internal.objects.NativeString#constructor(boolean, Object, Object)->Object:::ECMA 15.5.2.1 new String ( [ value ] ) - special version with one arg  Constructor
jdk.nashorn.internal.objects.NativeString#constructor(boolean, Object, int)->Object:::ECMA 15.5.2.1 new String ( [ value ] ) - special version with exactly one int arg  Constructor
jdk.nashorn.internal.objects.NativeString#constructor(boolean, Object, double)->Object:::ECMA 15.5.2.1 new String ( [ value ] ) - special version with exactly one double arg  Constructor
jdk.nashorn.internal.objects.NativeString#constructor(boolean, Object, boolean)->Object:::ECMA 15.5.2.1 new String ( [ value ] ) - special version with exactly one boolean arg  Constructor
jdk.nashorn.internal.objects.NativeString#getIterator(Object)->Object:::ECMA 6 21.1.3.27 String.prototype [ @@iterator ]( )
jdk.nashorn.internal.objects.NativeString#lookupPrimitive(LinkRequest, Object)->GuardedInvocation:::Lookup the appropriate method for an invoke dynamic call.
jdk.nashorn.internal.objects.NativeString#getLinkLogic(Class)->LinkLogic::: native string get link logic
jdk.nashorn.internal.objects.NativeString#hasPerInstanceAssumptions()->boolean::: native string has per instance assumptions
jdk.nashorn.internal.objects.NativeSymbol#lookupPrimitive(LinkRequest, Object)->GuardedInvocation:::Lookup the appropriate method for an invoke dynamic call.
jdk.nashorn.internal.objects.NativeSymbol#getDefaultValue(Class)->Object::: native symbol get default value
jdk.nashorn.internal.objects.NativeSymbol#toString(Object)->String:::ECMA 6 19.4.3.2 Symbol.prototype.toString ( )
jdk.nashorn.internal.objects.NativeSymbol#valueOf(Object)->Object:::ECMA 6 19.4.3.3  Symbol.prototype.valueOf ( )
jdk.nashorn.internal.objects.NativeSymbol#constructor(boolean, Object, Object...)->Object:::ECMA 6 19.4.1.1 Symbol ( [ description ] )
jdk.nashorn.internal.objects.NativeSymbol#_for(Object, Object)->Object:::ES6 19.4.2.1 Symbol.for ( key )
jdk.nashorn.internal.objects.NativeSymbol#keyFor(Object, Object)->Object:::ES6 19.4.2.5 Symbol.keyFor ( sym )
jdk.nashorn.internal.objects.NativeSyntaxError#getClassName()->String::: native syntax error get class name
jdk.nashorn.internal.objects.NativeSyntaxError#constructor(boolean, Object, Object)->NativeSyntaxError:::ECMA 15.11.6.4 SyntaxError  Constructor
jdk.nashorn.internal.objects.NativeTypeError#getClassName()->String::: native type error get class name
jdk.nashorn.internal.objects.NativeTypeError#constructor(boolean, Object, Object)->NativeTypeError:::ECMA 15.11.6.5 TypeError  Constructor
jdk.nashorn.internal.objects.NativeUint16Array#constructor(boolean, Object, Object...)->NativeUint16Array:::Constructor
jdk.nashorn.internal.objects.NativeUint16Array#factory()->Factory::: native uint16 array factory
jdk.nashorn.internal.objects.NativeUint16Array#set(Object, Object, Object)->Object:::Set values
jdk.nashorn.internal.objects.NativeUint16Array#subarray(Object, Object, Object)->NativeUint16Array:::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive
jdk.nashorn.internal.objects.NativeUint16Array#getIterator(Object)->Object:::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeUint16Array#getPrototype(Global)->ScriptObject::: native uint16 array get prototype
jdk.nashorn.internal.objects.NativeUint32Array#constructor(boolean, Object, Object...)->NativeUint32Array:::Constructor
jdk.nashorn.internal.objects.NativeUint32Array#factory()->Factory::: native uint32 array factory
jdk.nashorn.internal.objects.NativeUint32Array#set(Object, Object, Object)->Object:::Set values
jdk.nashorn.internal.objects.NativeUint32Array#subarray(Object, Object, Object)->NativeUint32Array:::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive
jdk.nashorn.internal.objects.NativeUint32Array#getIterator(Object)->Object:::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeUint32Array#getPrototype(Global)->ScriptObject::: native uint32 array get prototype
jdk.nashorn.internal.objects.NativeUint8Array#constructor(boolean, Object, Object...)->NativeUint8Array:::Constructor
jdk.nashorn.internal.objects.NativeUint8Array#factory()->Factory::: native uint8 array factory
jdk.nashorn.internal.objects.NativeUint8Array#set(Object, Object, Object)->Object:::Set values
jdk.nashorn.internal.objects.NativeUint8Array#subarray(Object, Object, Object)->NativeUint8Array:::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive
jdk.nashorn.internal.objects.NativeUint8Array#getIterator(Object)->Object:::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeUint8Array#getPrototype(Global)->ScriptObject::: native uint8 array get prototype
jdk.nashorn.internal.objects.NativeUint8ClampedArray#constructor(boolean, Object, Object...)->NativeUint8ClampedArray:::Constructor
jdk.nashorn.internal.objects.NativeUint8ClampedArray#factory()->Factory::: native uint8 clamped array factory
jdk.nashorn.internal.objects.NativeUint8ClampedArray#set(Object, Object, Object)->Object:::Set values
jdk.nashorn.internal.objects.NativeUint8ClampedArray#subarray(Object, Object, Object)->NativeUint8ClampedArray:::Returns a new TypedArray view of the ArrayBuffer store for this TypedArray, referencing the elements at begin, inclusive, up to end, exclusive
jdk.nashorn.internal.objects.NativeUint8ClampedArray#getIterator(Object)->Object:::ECMA 6 22.2.3.30 %TypedArray%.prototype [ @@iterator ] ( )
jdk.nashorn.internal.objects.NativeUint8ClampedArray#getPrototype(Global)->ScriptObject::: native uint8 clamped array get prototype
jdk.nashorn.internal.objects.NativeURIError#getClassName()->String::: native error get class name
jdk.nashorn.internal.objects.NativeURIError#constructor(boolean, Object, Object)->NativeURIError:::ECMA 15.11.6.6 URIError  Constructor
jdk.nashorn.internal.objects.NativeWeakMap#construct(boolean, Object, Object)->Object:::ECMA6 23.3.1 The WeakMap Constructor
jdk.nashorn.internal.objects.NativeWeakMap#set(Object, Object, Object)->Object:::ECMA6 23.3.3.5 WeakMap.prototype.set ( key , value )
jdk.nashorn.internal.objects.NativeWeakMap#get(Object, Object)->Object:::ECMA6 23.3.3.3 WeakMap.prototype.get ( key )
jdk.nashorn.internal.objects.NativeWeakMap#delete(Object, Object)->boolean:::ECMA6 23.3.3.2 WeakMap.prototype.delete ( key )
jdk.nashorn.internal.objects.NativeWeakMap#has(Object, Object)->boolean:::ECMA6 23.3.3.4 WeakMap.prototype.has ( key )
jdk.nashorn.internal.objects.NativeWeakMap#getClassName()->String::: native weak map get class name
jdk.nashorn.internal.objects.NativeWeakMap#checkKey(Object)->Object:::Make sure key is not a JavaScript primitive value.
jdk.nashorn.internal.objects.NativeWeakMap#populateMap(Map, Object, Global)->void::: native weak map populate map
jdk.nashorn.internal.objects.NativeWeakSet#construct(boolean, Object, Object)->Object:::ECMA6 23.3.1 The WeakSet Constructor
jdk.nashorn.internal.objects.NativeWeakSet#add(Object, Object)->Object:::ECMA6 23.4.3.1 WeakSet.prototype.add ( value )
jdk.nashorn.internal.objects.NativeWeakSet#has(Object, Object)->boolean:::ECMA6 23.4.3.4 WeakSet.prototype.has ( value )
jdk.nashorn.internal.objects.NativeWeakSet#delete(Object, Object)->boolean:::ECMA6 23.4.3.3 WeakSet.prototype.delete ( value )
jdk.nashorn.internal.objects.NativeWeakSet#getClassName()->String::: native weak set get class name
jdk.nashorn.internal.objects.NativeWeakSet#populateWeakSet(Map, Object, Global)->void::: native weak set populate weak set
jdk.nashorn.internal.objects.SetIterator#next(Object, Object)->Object:::ES6 23.2.5.2.1 %SetIteratorPrototype%.next()
jdk.nashorn.internal.objects.SetIterator#getClassName()->String::: set iterator get class name
jdk.nashorn.internal.objects.SetIterator#next(Object)->IteratorResult::: set iterator next
jdk.nashorn.internal.objects.StringIterator#next(Object, Object)->Object:::ES6 21.1.5.2.1 %StringIteratorPrototype%.next()
jdk.nashorn.internal.objects.StringIterator#getClassName()->String::: string iterator get class name
jdk.nashorn.internal.objects.StringIterator#next(Object)->IteratorResult::: string iterator next

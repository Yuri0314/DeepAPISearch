AbstractTypeImpl#typeName()::: abstract type impl type name:::return->toString
AbstractTypeImpl#qualifiedTypeName()::: abstract type impl qualified type name:::return->getQualifiedName->toString
AbstractTypeImpl#getElementType()::: abstract type impl get element type:::return
AbstractTypeImpl#simpleTypeName()::: abstract type impl simple type name:::return->toString
AbstractTypeImpl#name()::: abstract type impl name:::return->typeName
AbstractTypeImpl#qualifiedName()::: abstract type impl qualified name:::return->qualifiedTypeName
AbstractTypeImpl#toString()::: abstract type impl to string:::return->qualifiedTypeName
AbstractTypeImpl#dimension()::: abstract type impl dimension:::return
AbstractTypeImpl#isPrimitive()::: abstract type impl is primitive:::return
AbstractTypeImpl#asClassDoc()::: abstract type impl as class doc:::return
AbstractTypeImpl#asTypeVariable()::: abstract type impl as type variable:::return
AbstractTypeImpl#asWildcardType()::: abstract type impl as wildcard type:::return
AbstractTypeImpl#asParameterizedType()::: abstract type impl as parameterized type:::return
AbstractTypeImpl#asAnnotationTypeDoc()::: abstract type impl as annotation type doc:::return
AbstractTypeImpl#asAnnotatedType()::: abstract type impl as annotated type:::return
AnnotatedTypeImpl#annotations():::Get the annotations of this program element:::tas->type->getAnnotationMirrors->if->tas->isEmpty->return->new->AnnotationDescArr->res->tas->length->new->AnnotationDescArr->i->foreach->new->AnnotationDescImpl->return
AnnotatedTypeImpl#underlyingType()::: annotated type impl underlying type:::return->TypeMaker->getType
AnnotatedTypeImpl#asAnnotatedType()::: annotated type impl as annotated type:::return
AnnotatedTypeImpl#toString()::: annotated type impl to string:::return->typeName
AnnotatedTypeImpl#typeName()::: annotated type impl type name:::return->this->underlyingType->typeName
AnnotatedTypeImpl#qualifiedTypeName()::: annotated type impl qualified type name:::return->this->underlyingType->qualifiedTypeName
AnnotatedTypeImpl#simpleTypeName()::: annotated type impl simple type name:::return->this->underlyingType->simpleTypeName
AnnotatedTypeImpl#dimension()::: annotated type impl dimension:::return->this->underlyingType->dimension
AnnotatedTypeImpl#isPrimitive()::: annotated type impl is primitive:::return->this->underlyingType->isPrimitive
AnnotatedTypeImpl#asClassDoc()::: annotated type impl as class doc:::return->this->underlyingType->asClassDoc
AnnotatedTypeImpl#asTypeVariable()::: annotated type impl as type variable:::return->this->underlyingType->asTypeVariable
AnnotatedTypeImpl#asWildcardType()::: annotated type impl as wildcard type:::return->this->underlyingType->asWildcardType
AnnotatedTypeImpl#asParameterizedType()::: annotated type impl as parameterized type:::return->this->underlyingType->asParameterizedType
AnnotationDescImpl#annotationType():::Returns the annotation type of this annotation.:::atsym->if->isErroneous->env->toString->warning->return->new->AnnotationTypeDocImpl->else->return->env->getClassDoc
AnnotationDescImpl#elementValues():::Returns this annotation's elements and their values:::vals->res->vals->length->new->ElementValuePairArr->i->foreach->new->ElementValuePairImpl->return
AnnotationDescImpl#isSynthesized():::Check for the synthesized bit on the annotation.:::return->annotation->isSynthesized
AnnotationDescImpl#toString():::Returns a string representation of this annotation:::sb->new->StringBuilder->sb->append->vals->elementValues->if->sb->append->first->foreach->if->sb->append->name->val->element->name->if->name->equals->sb->val->value->append->else->sb->append->sb->append->return->sb->toString
AnnotationDescImpl.ElementValuePairImpl#element():::Returns the annotation type element.:::return->env->getAnnotationTypeElementDoc
AnnotationDescImpl.ElementValuePairImpl#value():::Returns the value associated with the annotation type element.:::return->new->AnnotationValueImpl
AnnotationDescImpl.ElementValuePairImpl#toString():::Returns a string representation of this pair of the form "name=value".:::return->value
AnnotationTypeDocImpl#isAnnotationType():::Returns true, as this is an annotation type:::return->isInterface
AnnotationTypeDocImpl#isInterface():::Returns false:::return
AnnotationTypeDocImpl#methods(boolean):::Returns an empty array, as all methods are annotation type elements:::return->elements->new->MethodDocArr
AnnotationTypeDocImpl#elements():::Returns the elements of this annotation type:::elements->List->nil->foreach->tsym->members->getSymbols->if->s->elements->env->getAnnotationTypeElementDoc->prepend->return->elements->elements->length->new->AnnotationTypeElementDocArr->toArray
AnnotationTypeElementDocImpl#isAnnotationTypeElement():::Returns true, as this is an annotation type element:::return->isMethod
AnnotationTypeElementDocImpl#isMethod():::Returns false:::return
AnnotationTypeElementDocImpl#isAbstract():::Returns false, even though this is indeed abstract:::return
AnnotationTypeElementDocImpl#defaultValue():::Returns the default value of this element:::return->new->AnnotationValueImpl
AnnotationValueImpl#value():::Returns the value:::vv->new->ValueVisitor->attr->accept->return
AnnotationValueImpl.ValueVisitor#visitConstant(Attribute.Constant)::: value visitor visit constant:::if->hasTag->Boolean->intValue->valueOf->else
AnnotationValueImpl.ValueVisitor#visitClass(Attribute.Class)::: value visitor visit class:::TypeMaker->erasure->getType
AnnotationValueImpl.ValueVisitor#visitEnum(Attribute.Enum)::: value visitor visit enum:::env->getFieldDoc
AnnotationValueImpl.ValueVisitor#visitCompound(Attribute.Compound)::: value visitor visit compound:::new->AnnotationDescImpl
AnnotationValueImpl.ValueVisitor#visitArray(Attribute.Array)::: value visitor visit array:::vals->new->AnnotationValueArr->for->i
AnnotationValueImpl.ValueVisitor#visitError(Attribute.Error)::: value visitor visit error:::
AnnotationValueImpl#toString():::Returns a string representation of the value.:::tv->new->ToStringVisitor->attr->accept->return->tv->toString
AnnotationValueImpl.ToStringVisitor#toString()::: to string visitor to string:::return->sb->toString
AnnotationValueImpl.ToStringVisitor#visitConstant(Attribute.Constant)::: to string visitor visit constant:::if->hasTag->sb->intValue->append->else->sb->FieldDocImpl->constantValueExpression->append
AnnotationValueImpl.ToStringVisitor#visitClass(Attribute.Class)::: to string visitor visit class:::sb->append
AnnotationValueImpl.ToStringVisitor#visitEnum(Attribute.Enum)::: to string visitor visit enum:::sb->append
AnnotationValueImpl.ToStringVisitor#visitCompound(Attribute.Compound)::: to string visitor visit compound:::sb->new->AnnotationDescImpl->append
AnnotationValueImpl.ToStringVisitor#visitArray(Attribute.Array)::: to string visitor visit array:::if->sb->append->first->foreach->if->else->sb->append->elem->accept->if->sb->append
AnnotationValueImpl.ToStringVisitor#visitError(Attribute.Error)::: to string visitor visit error:::sb->append
ClassDocImpl#getElementType()::: class doc impl get element type:::return
ClassDocImpl#getFlags():::Returns the flags in terms of javac's flags:::return->getFlags
ClassDocImpl#getFlags(ClassSymbol):::Returns the flags of a ClassSymbol in terms of javac's flags:::try->return->clazz->flags->catch->return->getFlags->finally
ClassDocImpl#isAnnotationType(ClassSymbol):::Is a ClassSymbol an annotation type?:::return->getFlags
ClassDocImpl#getContainingClass():::Identify the containing class:::return->enclClass
ClassDocImpl#isClass():::Return true if this is a class, not an interface.:::return->Modifier->getModifiers->isInterface
ClassDocImpl#isOrdinaryClass():::Return true if this is a ordinary class, not an enumeration, exception, an error, or an interface.:::if->isEnum->isInterface->isAnnotationType->return->for->t->t->hasTag->supertype->return
ClassDocImpl#isEnum():::Return true if this is an enumeration:::return->getFlags
ClassDocImpl#isInterface():::Return true if this is an interface, but not an annotation type:::return->Modifier->getModifiers->isInterface
ClassDocImpl#isException():::Return true if this is an exception class:::if->isEnum->isInterface->isAnnotationType->return->for->t->t->hasTag->supertype->return
ClassDocImpl#isError():::Return true if this is an error class:::if->isEnum->isInterface->isAnnotationType->return->for->t->t->hasTag->supertype->return
ClassDocImpl#isThrowable():::Return true if this is a throwable class:::if->isEnum->isInterface->isAnnotationType->return->for->t->t->hasTag->supertype->return
ClassDocImpl#isAbstract():::Return true if this class is abstract:::return->Modifier->getModifiers->isAbstract
ClassDocImpl#isSynthetic():::Returns true if this class was synthesized by the compiler.:::return->getFlags
ClassDocImpl#isIncluded()::: class doc impl is included:::if->return->if->env->shouldDocument->if->containingPackage->isIncluded->return->outer->containingClass->if->outer->isIncluded->return->return
ClassDocImpl#containingPackage():::Return the package that this class is contained in.:::p->env->tsym->packge->getPackageDoc->if->docPath->try->location->hasLocation->p->qualifiedName->getFileForInput->catch->finally->if->po->position->if->uri->toUri->if->uri->getScheme->equals->f->new->File->dir->f->getParentFile->if->pf->new->File->if->pf->exists->sfm->sfm->getJavaFileObjects->iterator->next->p->setDocPath->return
ClassDocImpl#name():::Return the class name without package qualifier - but with enclosing class qualifier - as a String:::if->getClassName->return
ClassDocImpl#qualifiedName():::Return the qualified class name as a String:::if->getClassName->return
ClassDocImpl#typeName():::Return unqualified name of type excluding any dimension information:::return->name
ClassDocImpl#qualifiedTypeName():::Return qualified name of type excluding any dimension information:::return->qualifiedName
ClassDocImpl#simpleTypeName():::Return the simple name of this type.:::if->toString->return
ClassDocImpl#toString():::Return the qualified name and any type parameters:::return->classToString
ClassDocImpl#getClassName(ClassSymbol, boolean):::Return the class name as a string:::if->return->c->getQualifiedName->toString->else->n->for->enclClass->return
ClassDocImpl#classToString(DocEnv, ClassSymbol, boolean):::Return the class name with any type parameters as a string:::s->new->StringBuilder->if->c->isInner->s->getClassName->append->else->encl->enclClass->s->classToString->append->append->append->s->TypeMaker->typeParametersString->append->return->s->toString
ClassDocImpl#isGeneric(ClassSymbol):::Is this class (or any enclosing class) generic?  That is, does it have type parameters?:::return->allparams->nonEmpty
ClassDocImpl#typeParameters():::Return the formal type parameters of this class or interface:::if->return->new->TypeVariableArr->res->type->getTypeArguments->length->new->TypeVariableArr->TypeMaker->type->getTypeArguments->getTypes->return
ClassDocImpl#typeParamTags():::Return the type parameter tags of this class or interface.:::return->new->ParamTagArr->comment->typeParamTags
ClassDocImpl#modifiers():::Return the modifier string for this class:::return->Modifier->modifierSpecifier->toString
ClassDocImpl#modifierSpecifier()::: class doc impl modifier specifier:::modifiers->getModifiers->return->isInterface->isAnnotationType
ClassDocImpl#superclass():::Return the superclass of this class:::if->isInterface->isAnnotationType->return->if->return->c->supertype->if->return->env->getClassDoc
ClassDocImpl#superclassType():::Return the superclass of this class:::if->isInterface->isAnnotationType->return->sup->supertype->return->TypeMaker->sup->hasTag->getType
ClassDocImpl#subclassOf(ClassDoc):::Test whether this class is a subclass of the specified class.:::return->tsym->isSubClass
ClassDocImpl#interfaces():::Return interfaces implemented by this class or interfaces extended by this interface.:::ta->new->ListBuffer<>->foreach->interfaces->ta->env->getClassDoc->append->return->ta->ta->length->new->ClassDocImplArr->toArray
ClassDocImpl#interfaceTypes():::Return interfaces implemented by this class or interfaces extended by this interface:::return->TypeMaker->interfaces->getTypes
ClassDocImpl#fields(boolean):::Return fields in class.:::return->fields
ClassDocImpl#fields():::Return included fields in class.:::return->fields
ClassDocImpl#enumConstants():::Return the enum constants if this is an enum type.:::return->fields
ClassDocImpl#fields(boolean, boolean):::Return fields in class.:::fields->List->nil->foreach->tsym->members->getSymbols->if->s->isEnum->s->flags->if->env->shouldDocument->fields->env->getFieldDoc->prepend->return->fields->fields->length->new->FieldDocImplArr->toArray
ClassDocImpl#methods(boolean):::Return methods in class:::names->methods->List->nil->foreach->tsym->members->getSymbols->if->s->if->env->shouldDocument->methods->env->getMethodDoc->prepend->return->methods->methods->length->new->MethodDocImplArr->toArray
ClassDocImpl#methods():::Return included methods in class.:::return->methods
ClassDocImpl#constructors(boolean):::Return constructors in class.:::names->constructors->List->nil->foreach->tsym->members->getSymbols->if->s->if->env->shouldDocument->constructors->env->getConstructorDoc->prepend->return->constructors->constructors->length->new->ConstructorDocImplArr->toArray
ClassDocImpl#constructors():::Return included constructors in class.:::return->constructors
ClassDocImpl#addAllClasses(ListBuffer, boolean):::Adds all inner classes of this class, and their inner classes recursively, to the list l.:::try->if->isSynthetic->return->if->JavadocTool->toString->isValidClassName->return->if->env->shouldDocument->return->if->l->contains->return->l->append->more->List->nil->foreach->tsym->members->getSymbols->if->s->c->env->getClassDoc->if->c->isSynthetic->continue->if->more->prepend->for->more->nonEmpty->catch->finally
ClassDocImpl#innerClasses(boolean):::Return inner classes within this class.:::innerClasses->new->ListBuffer<>->foreach->tsym->members->getSymbols->if->s->if->continue->if->env->isVisible->innerClasses->env->getClassDoc->prepend->return->innerClasses->innerClasses->length->new->ClassDocImplArr->toArray
ClassDocImpl#innerClasses():::Return included inner classes within this class.:::return->innerClasses
ClassDocImpl#findClass(String)::: class doc impl find class:::searchResult->searchClass->if->enclosingClass->containingClass->while->enclosingClass->containingClass->enclosingClass->containingClass->enclosingClass->searchClass->return
ClassDocImpl#searchClass(String)::: class doc impl search class:::names->cd->env->lookupClass->if->return->foreach->innerClasses->if->icd->name->equals->icd->name->endsWith->return->else->innercd->searchClass->if->return->containingPackage->findClass->if->return->tsym->complete->if->compenv->getEnv->if->return->s->foreach->s->names->fromString->getSymbolsByName->if->c->env->getClassDoc->return->foreach->s->names->fromString->getSymbolsByName->if->c->env->getClassDoc->return->return
ClassDocImpl#hasParameterTypes(MethodSymbol, String[])::: class doc impl has parameter types:::if->return->i->types->getParameterTypes->if->types->length->return->foreach->argType->if->argType->replace->if->erasure->hasTypeName->return->return
ClassDocImpl#hasTypeName(Type, String)::: class doc impl has type name:::return->name->TypeMaker->getTypeName->equals->name->TypeMaker->getTypeName->equals->qualifiedName->TypeMaker->getTypeName->equals
ClassDocImpl#findMethod(String, String[]):::Find a method in this class scope:::return->new->HashSet<ClassDocImpl>->searchMethod
ClassDocImpl#searchMethod(String, String[], Set)::: class doc impl search method:::names->if->contentEquals->return->cdi->mdi->if->searched->contains->return->searched->add->if->lastFound->foreach->tsym->members->names->fromString->getSymbolsByName->if->if->toString->equals->if->return->env->getMethodDoc->else->foreach->tsym->members->names->fromString->getSymbolsByName->if->if->hasParameterTypes->return->env->getMethodDoc->superclass->if->cdi->searchMethod->if->return->foreach->interfaces->cdi->searchMethod->if->return->containingClass->if->cdi->searchMethod->if->return->return
ClassDocImpl#findConstructor(String, String[]):::Find constructor in this class.:::names->foreach->tsym->members->names->fromString->getSymbolsByName->if->if->hasParameterTypes->return->env->getConstructorDoc->return
ClassDocImpl#findField(String):::Find a field in this class scope:::return->new->HashSet<ClassDocImpl>->searchField
ClassDocImpl#searchField(String, Set)::: class doc impl search field:::names->if->searched->contains->return->searched->add->foreach->tsym->members->names->fromString->getSymbolsByName->if->return->env->getFieldDoc->cdi->containingClass->if->fdi->cdi->searchField->if->return->superclass->if->fdi->cdi->searchField->if->return->foreach->interfaces->fdi->cdi->searchField->if->return->return
ClassDocImpl#importedClasses():::Get the list of classes declared as imported:::if->return->new->ClassDocArr->importedClasses->new->ListBuffer<>->compenv->getEnv->if->return->new->ClassDocImplArr->asterisk->foreach->if->t->hasTag->imp->if->TreeInfo->name->matches->importedClasses->env->getClassDoc->append->return->importedClasses->importedClasses->length->new->ClassDocImplArr->toArray
ClassDocImpl#importedPackages():::Get the list of packages declared as imported:::if->return->new->PackageDocArr->importedPackages->new->ListBuffer<>->names->importedPackages->env->enterPackage->getPackageDoc->append->compenv->getEnv->if->return->new->PackageDocImplArr->foreach->if->t->hasTag->imp->if->TreeInfo->name->sel->s->pdoc->env->s->packge->getPackageDoc->if->importedPackages->contains->importedPackages->append->return->importedPackages->importedPackages->length->new->PackageDocImplArr->toArray
ClassDocImpl#dimension():::Return the type's dimension information:::return
ClassDocImpl#asClassDoc():::Return this type as a class, which it already is.:::return
ClassDocImpl#asAnnotationTypeDoc():::Return null (unless overridden), as this is not an annotation type.:::return
ClassDocImpl#asParameterizedType():::Return null, as this is not a class instantiation.:::return
ClassDocImpl#asTypeVariable():::Return null, as this is not a type variable.:::return
ClassDocImpl#asWildcardType():::Return null, as this is not a wildcard type.:::return
ClassDocImpl#asAnnotatedType():::Returns null, as this is not an annotated type.:::return
ClassDocImpl#isPrimitive():::Return false, as this is not a primitive type.:::return
ClassDocImpl#isSerializable():::Return true if this class implements java.io.Serializable:::try->return->isSubtype->catch->return->finally
ClassDocImpl#isExternalizable():::Return true if this class implements java.io.Externalizable.:::try->return->isSubtype->catch->return->finally
ClassDocImpl#serializationMethods():::Return the serialization methods for this class.:::if->new->SerializedForm->return->serializedForm->methods
ClassDocImpl#serializableFields():::Return the Serializable fields of class.  Return either a list of default fields documented by serial tag<br> or return a single FieldDoc for serialPersistentField member:::if->new->SerializedForm->return->serializedForm->fields
ClassDocImpl#definesSerializableFields():::Return true if Serializable fields are explicitly defined with the special class member serialPersistentFields.:::if->isSerializable->isExternalizable->return->else->if->new->SerializedForm->return->serializedForm->definesSerializableFields
ClassDocImpl#isRuntimeException():::Determine if a class is a RuntimeException:::return->tsym->isSubClass
ClassDocImpl#position():::Return the source position of the entity, or null if no position is available.:::if->return->return->SourcePositionImpl->make
Comment#commentText():::Return the text of the comment.:::return
Comment#tags():::Return all tags in this comment.:::return->tagList->tagList->length->new->TagArr->toArray
Comment#tags(String):::Return tags of the specified kind in this comment.:::found->new->ListBuffer<>->target->if->target->charAt->foreach->if->tag->kind->equals->found->append->return->found->found->length->new->TagArr->toArray
Comment#throwsTags():::Return throws tags in this comment.:::found->new->ListBuffer<>->foreach->if->found->append->return->found->found->length->new->ThrowsTagArr->toArray
Comment#paramTags():::Return param tags (excluding type param tags) in this comment.:::return->paramTags
Comment#typeParamTags():::Return type param tags in this comment.:::return->paramTags
Comment#paramTags(boolean):::Return param tags in this comment:::found->new->ListBuffer<>->foreach->if->p->if->p->isTypeParameter->found->append->return->found->found->length->new->ParamTagArr->toArray
Comment#seeTags():::Return see also tags in this comment.:::found->new->ListBuffer<>->foreach->if->found->append->return->found->found->length->new->SeeTagArr->toArray
Comment#serialFieldTags():::Return serialField tags in this comment.:::found->new->ListBuffer<>->foreach->if->found->append->return->found->found->length->new->SerialFieldTagArr->toArray
Comment#getInlineTags(DocImpl, String):::Return array of tags with text and inline See Tags for a Doc comment.:::taglist->new->ListBuffer<>->delimend->textstart->len->inlinetext->length->inPre->docenv->if->return->taglist->taglist->length->new->TagArr->toArray->while->linkstart->if->inlineTagFound->taglist->inlinetext->substring->new->TagImpl->append->break->else->scanForPre->seetextstart->for->i->inlinetext->length->linkName->inlinetext->substring->if->linkName->equals->linkName->equals->while->Character->inlinetext->charAt->isWhitespace->if->inlinetext->length->taglist->inlinetext->substring->new->TagImpl->append->docenv->warning->return->taglist->taglist->length->new->TagArr->toArray->else->taglist->inlinetext->substring->new->TagImpl->append->if->findInlineTagDelim->taglist->inlinetext->substring->new->TagImpl->append->docenv->warning->return->taglist->taglist->length->new->TagArr->toArray->else->if->linkName->equals->linkName->equals->linkName->equals->taglist->inlinetext->substring->new->SeeTagImpl->append->else->taglist->inlinetext->substring->new->TagImpl->append->if->inlinetext->length->break->return->taglist->taglist->length->new->TagArr->toArray
Comment#scanForPre(String, int, int, boolean)::: comment scan for pre:::m->prePat->matcher->region->while->m->find->m->group->isEmpty->return
Comment#findInlineTagDelim(String, int):::Recursively find the index of the closing '}' character for an inline tag and return it:::delimEnd->nestedOpenBrace->if->inlineText->indexOf->return->else->if->inlineText->indexOf->nestedCloseBrace->findInlineTagDelim->return->findInlineTagDelim->else->return
Comment#inlineTagFound(DocImpl, String, int):::Recursively search for the characters '{', '@', followed by name of inline tag and white space, if found    return the index of the text following the white space:::docenv->linkstart->inlinetext->indexOf->if->inlinetext->length->return->else->if->inlinetext->indexOf->docenv->inlinetext->inlinetext->length->substring->warning->return->else->return
Comment#firstSentenceTags(DocImpl, String):::Return array of tags for the locale specific first sentence in the text.:::doclocale->return->doclocale->localeSpecificFirstSentence->getInlineTags
Comment#toString():::Return text for this Doc comment.:::return
ConstructorDocImpl#isConstructor():::Return true if it is a constructor, which it is.:::return
ConstructorDocImpl#name():::Get the name.:::c->sym->enclClass->return->toString
ConstructorDocImpl#qualifiedName():::Get the name.:::return->sym->enclClass->getQualifiedName->toString
ConstructorDocImpl#toString():::Returns a string representation of this constructor:::return->typeParametersString->qualifiedName->signature
DocEnv#instance(Context)::: doc env instance:::instance->context->get->if->new->DocEnv->return
DocEnv#setSilent(boolean)::: doc env set silent:::
DocEnv#lookupClass(String):::Look up ClassDoc by qualified name.:::c->getClassSymbol->if->return->getClassDoc->else->return
DocEnv#loadClass(String):::Load ClassDoc by qualified name.:::try->nameImpl->names->fromString->mod->syms->Convert->packagePart->inferModule->c->finder->loadClass->return->getClassDoc->catch->chk->completionError->return->finally
DocEnv#lookupPackage(String):::Look up PackageDoc by qualified name.:::nameImpl->names->fromString->mod->syms->inferModule->p->syms->getPackage->c->getClassSymbol->if->return->getPackageDoc->else->return
DocEnv#getClassSymbol(String):::Retrieve class symbol by fully-qualified name.:::nameLen->name->length->nameChars->name->toCharArray->idx->name->length->for->return
DocEnv#setLocale(String):::Set the locale.:::new->DocLocale->messager->setLocale
DocEnv#shouldDocument(VarSymbol):::Check whether this member should be documented.:::mod->sym->flags->if->return->return->showAccess->translateModifiers->checkModifier
DocEnv#shouldDocument(MethodSymbol):::Check whether this member should be documented.:::mod->sym->flags->if->return->return->showAccess->translateModifiers->checkModifier
DocEnv#shouldDocument(ClassSymbol):::check whether this class should be documented.:::return->getClassDoc->isVisible
DocEnv#isVisible(ClassSymbol):::Check the visibility if this is an nested class:::mod->if->showAccess->translateModifiers->checkModifier->return->encl->enclClass->return->isVisible
DocEnv#printError(String):::Print error message, increment error count.:::if->return->messager->printError
DocEnv#error(DocImpl, String):::Print error message, increment error count.:::if->return->messager->doc->position->error
DocEnv#error(SourcePosition, String):::Print error message, increment error count.:::if->return->messager->error
DocEnv#printError(SourcePosition, String):::Print error message, increment error count.:::if->return->messager->printError
DocEnv#error(DocImpl, String, String):::Print error message, increment error count.:::if->return->messager->doc->position->error
DocEnv#error(DocImpl, String, String, String):::Print error message, increment error count.:::if->return->messager->doc->position->error
DocEnv#error(DocImpl, String, String, String, String):::Print error message, increment error count.:::if->return->messager->doc->position->error
DocEnv#printWarning(String):::Print warning message, increment warning count.:::if->return->messager->printWarning
DocEnv#warning(DocImpl, String):::Print warning message, increment warning count.:::if->return->messager->doc->position->warning
DocEnv#printWarning(SourcePosition, String):::Print warning message, increment warning count.:::if->return->messager->printWarning
DocEnv#warning(DocImpl, String, String):::Print warning message, increment warning count.:::if->return->if->key->startsWith->return->messager->doc->position->warning
DocEnv#warning(DocImpl, String, String, String):::Print warning message, increment warning count.:::if->return->messager->doc->position->warning
DocEnv#warning(DocImpl, String, String, String, String):::Print warning message, increment warning count.:::if->return->messager->doc->position->warning
DocEnv#warning(DocImpl, String, String, String, String, String):::Print warning message, increment warning count.:::if->return->messager->doc->position->warning
DocEnv#printNotice(String):::Print a message.:::if->return->messager->printNotice
DocEnv#notice(String):::Print a message.:::if->return->messager->notice
DocEnv#printNotice(SourcePosition, String):::Print a message.:::if->return->messager->printNotice
DocEnv#notice(String, String):::Print a message.:::if->return->messager->notice
DocEnv#notice(String, String, String):::Print a message.:::if->return->messager->notice
DocEnv#notice(String, String, String, String):::Print a message.:::if->return->messager->notice
DocEnv#exit():::Exit, reporting errors and warnings.:::messager->exit
DocEnv#getPackageDoc(PackageSymbol):::Return the PackageDoc of this package symbol.:::result->packageMap->get->if->return->new->PackageDocImpl->packageMap->put->return
DocEnv#makePackageDoc(PackageSymbol, TreePath):::Create the PackageDoc (or a subtype) for a package symbol.:::result->packageMap->get->if->if->result->setTreePath->else->new->PackageDocImpl->packageMap->put
DocEnv#getClassDoc(ClassSymbol):::Return the ClassDoc (or a subtype) of this class symbol.:::result->classMap->get->if->return->if->isAnnotationType->new->AnnotationTypeDocImpl->else->new->ClassDocImpl->classMap->put->return
DocEnv#makeClassDoc(ClassSymbol, TreePath):::Create the ClassDoc (or a subtype) for a class symbol.:::result->classMap->get->if->if->result->setTreePath->return->if->treePath->getLeaf->isAnnotationType->new->AnnotationTypeDocImpl->else->new->ClassDocImpl->classMap->put
DocEnv#isAnnotationType(ClassSymbol)::: doc env is annotation type:::return->ClassDocImpl->isAnnotationType
DocEnv#isAnnotationType(JCClassDecl)::: doc env is annotation type:::return
DocEnv#getFieldDoc(VarSymbol):::Return the FieldDoc of this var symbol.:::result->fieldMap->get->if->return->new->FieldDocImpl->fieldMap->put->return
DocEnv#makeFieldDoc(VarSymbol, TreePath):::Create a FieldDoc for a var symbol.:::result->fieldMap->get->if->if->result->setTreePath->else->new->FieldDocImpl->fieldMap->put
DocEnv#makeMethodDoc(MethodSymbol, TreePath):::Create a MethodDoc for this MethodSymbol:::result->methodMap->get->if->if->result->setTreePath->else->new->MethodDocImpl->methodMap->put
DocEnv#getMethodDoc(MethodSymbol):::Return the MethodDoc for a MethodSymbol:::result->methodMap->get->if->return->new->MethodDocImpl->methodMap->put->return
DocEnv#makeConstructorDoc(MethodSymbol, TreePath):::Create the ConstructorDoc for a MethodSymbol:::result->methodMap->get->if->if->result->setTreePath->else->new->ConstructorDocImpl->methodMap->put
DocEnv#getConstructorDoc(MethodSymbol):::Return the ConstructorDoc for a MethodSymbol:::result->methodMap->get->if->return->new->ConstructorDocImpl->methodMap->put->return
DocEnv#makeAnnotationTypeElementDoc(MethodSymbol, TreePath):::Create the AnnotationTypeElementDoc for a MethodSymbol:::result->methodMap->get->if->if->result->setTreePath->else->new->AnnotationTypeElementDocImpl->methodMap->put
DocEnv#getAnnotationTypeElementDoc(MethodSymbol):::Return the AnnotationTypeElementDoc for a MethodSymbol:::result->methodMap->get->if->return->new->AnnotationTypeElementDocImpl->methodMap->put->return
DocEnv#getParameterizedType(ClassType):::Return the ParameterizedType of this instantiation:::return->new->ParameterizedTypeImpl
DocEnv#getTreePath(JCCompilationUnit)::: doc env get tree path:::p->treePaths->get->if->treePaths->new->TreePath->put->return
DocEnv#getTreePath(JCCompilationUnit, JCPackageDecl)::: doc env get tree path:::p->treePaths->get->if->treePaths->getTreePath->new->TreePath->put->return
DocEnv#getTreePath(JCCompilationUnit, JCClassDecl)::: doc env get tree path:::p->treePaths->get->if->treePaths->getTreePath->new->TreePath->put->return
DocEnv#getTreePath(JCCompilationUnit, JCClassDecl, JCTree)::: doc env get tree path:::return->getTreePath->new->TreePath
DocEnv#setEncoding(String):::Set the encoding.:::
DocEnv#getEncoding():::Get the encoding.:::return
DocEnv#translateModifiers(long):::Convert modifier bits from private coding used by the compiler to that of java.lang.reflect.Modifier.:::result->if->if->if->if->if->if->if->if->if->if->if->return
DocEnv#initDoclint(Collection, Collection, String)::: doc env init doclint:::doclintOpts->new->ArrayList<>->msgOptionSeen->foreach->if->opt->startsWith->if->opt->equals->return->doclintOpts->add->if->doclintOpts->add->sep->customTags->new->StringBuilder->foreach->customTags->append->customTags->append->doclintOpts->customTags->toString->add->doclintOpts->add->t->BasicJavacTask->instance->new->DocLint->doclintOpts->add->doclint->doclintOpts->doclintOpts->size->new->StringArr->toArray->init
DocEnv#initJavaScriptScanner(boolean)::: doc env init java script scanner:::if->else->new->JavaScriptScanner->return
DocEnv#showTagMessages()::: doc env show tag messages:::return
DocEnv#shouldCheck(CompilationUnitTree)::: doc env should check:::return->shouldCheck->doclint->shouldCheck->computeIfAbsent
DocImpl#getCommentText(TreePath)::: doc impl get comment text:::if->return->topLevel->p->getCompilationUnit->tree->p->getLeaf->return->getCommentText
DocImpl#documentation():::So subclasses have the option to do lazy initialization of "documentation" string.:::if->return
DocImpl#comment():::For lazy initialization of comment.:::if->d->documentation->if->new->JavaScriptScanner.Reporter->parse->if->env->treePath->getCompilationUnit->shouldCheck->d->getCommentText->equals->scan->new->Comment->return
DocImpl#commentText():::Return the text of the comment for this doc item:::return->comment->commentText
DocImpl#tags():::Return all tags in this Doc item.:::return->comment->tags
DocImpl#tags(String):::Return tags of the specified kind in this Doc item.:::return->comment->tags
DocImpl#seeTags():::Return the see also tags in this Doc item.:::return->comment->seeTags
DocImpl#inlineTags()::: doc impl inline tags:::if->Comment->commentText->getInlineTags->return
DocImpl#firstSentenceTags()::: doc impl first sentence tags:::if->inlineTags->try->env->setSilent->Comment->commentText->firstSentenceTags->catch->finally->env->setSilent->return
DocImpl#readHTMLDocumentation(InputStream, FileObject):::Utility for subclasses which read HTML documentation files.:::filecontents->input->available->new->byteArr->try->dataIn->new->DataInputStream->dataIn->readFully->catch->finally->input->close->encoding->env->getEncoding->rawDoc->new->String->new->String->bodyPat->Pattern->compile->m->bodyPat->matcher->if->m->matches->return->m->group->else->key->rawDoc->matches->env->SourcePositionImpl->make->error->return
DocImpl#getRawCommentText():::Return the full unprocessed text of the comment:::return->documentation
DocImpl#setRawCommentText(String):::Set the full unprocessed text of the comment:::
DocImpl#setTreePath(TreePath):::Set the full unprocessed text of the comment and tree path.:::getCommentText
DocImpl#key():::return a key for sorting.:::if->generateKey->return
DocImpl#generateKey():::Generate a key for sorting:::k->name->return->getCollationKey
DocImpl#toString():::Returns a string representation of this Doc item.:::return->qualifiedName
DocImpl#name():::Returns the name of this Doc item.:::
DocImpl#qualifiedName():::Returns the qualified name of this Doc item.:::
DocImpl#compareTo(Object):::Compares this Object with the specified Object for order:::return->key->key->compareTo
DocImpl#isField():::Is this Doc item a field?  False until overridden.:::return
DocImpl#isEnumConstant():::Is this Doc item an enum constant?  False until overridden.:::return
DocImpl#isConstructor():::Is this Doc item a constructor?  False until overridden.:::return
DocImpl#isMethod():::Is this Doc item a method (but not a constructor or annotation type element)? False until overridden.:::return
DocImpl#isAnnotationTypeElement():::Is this Doc item an annotation type element? False until overridden.:::return
DocImpl#isInterface():::Is this Doc item a interface (but not an annotation type)? False until overridden.:::return
DocImpl#isException():::Is this Doc item a exception class?  False until overridden.:::return
DocImpl#isError():::Is this Doc item a error class?  False until overridden.:::return
DocImpl#isEnum():::Is this Doc item an enum type?  False until overridden.:::return
DocImpl#isAnnotationType():::Is this Doc item an annotation type?  False until overridden.:::return
DocImpl#isOrdinaryClass():::Is this Doc item an ordinary class (i.e:::return
DocImpl#isClass():::Is this Doc item a class (and not an interface or annotation type)? This includes ordinary classes, enums, errors and exceptions:::return
DocImpl#isIncluded():::return true if this Doc is include in the active set.:::
DocImpl#position():::Return the source position of the entity, or null if no position is available.:::return
DocletInvoker#appendPath(String, String)::: doclet invoker append path:::if->path1->length->return->else->if->path2->length->return->else->return
DocletInvoker#getDelegationClassLoader(String)::: doclet invoker get delegation class loader:::ctxCL->Thread->currentThread->getContextClassLoader->sysCL->ClassLoader->getSystemClassLoader->if->return->if->return->try->sysCL->loadClass->try->ctxCL->loadClass->catch->return->finally->catch->finally->try->if->getClass->sysCL->getClass->getName->loadClass->try->if->getClass->ctxCL->getClass->getName->loadClass->return->catch->return->finally->catch->finally->return
DocletInvoker#start(RootDoc):::Generate documentation here:::retVal->methodName->paramTypes->params->try->invoke->catch->return->finally->if->return->else->messager->error->return
DocletInvoker#optionLength(String):::Check for doclet added options here:::retVal->methodName->paramTypes->params->try->invoke->catch->return->finally->if->return->else->messager->error->return
DocletInvoker#validOptions(List):::Let doclet check that all options are OK:::retVal->options->optlist->optlist->length->new->StringArrs->toArray->methodName->reporter->paramTypes->params->try->invoke->catch->return->finally->if->return->else->messager->error->return
DocletInvoker#languageVersion():::Return the language version supported by this doclet:::try->retVal->methodName->paramTypes->new->Class<?>Arr->params->new->ObjectArr->try->invoke->catch->return->finally->if->return->else->messager->error->return->catch->return->finally
DocletInvoker#invoke(String, Object, Class[], Object[]):::Utility method for calling doclet functionality:::meth->try->docletClass->getMethod->catch->if->messager->error->throw->new->DocletInvokeException->else->return->messager->error->throw->new->DocletInvokeException->finally->if->Modifier->meth->getModifiers->isStatic->messager->error->throw->new->DocletInvokeException->savedCCL->Thread->currentThread->getContextClassLoader->try->if->Thread->currentThread->setContextClassLoader->return->meth->invoke->catch->messager->exc->toString->error->throw->new->DocletInvokeException->messager->error->throw->new->DocletInvokeException->err->exc->getTargetException->if->throw->new->ClientCodeException->if->messager->error->else->messager->exc->toString->error->exc->getTargetException->printStackTrace->throw->new->DocletInvokeException->finally->Thread->currentThread->setContextClassLoader
DocletInvoker#exportInternalAPI(ClassLoader):::Export javadoc internal API to the unnamed module for a classloader:::packages->try->getModuleMethod->getDeclaredMethod->thisModule->getModuleMethod->getClass->invoke->moduleClass->Class->forName->addExportsMethod->moduleClass->getDeclaredMethod->getUnnamedModuleMethod->getDeclaredMethod->target->getUnnamedModuleMethod->invoke->foreach->addExportsMethod->invoke->catch->finally
DocletInvoker#pathToURLs(String):::Utility method for converting a search path string to an array of directory and JAR file URLs:::urls->new->ArrayList<>->foreach->path->Pattern->quote->split->if->s->isEmpty->url->Paths->get->fileToURL->if->urls->add->return->urls->urls->size->new->URLArr->toArray
DocletInvoker#fileToURL(Path):::Returns the directory or JAR file URL corresponding to the specified local file name.:::p->try->file->toRealPath->catch->file->toAbsolutePath->finally->try->return->p->normalize->toUri->toURL->catch->return->finally
DocLocale#getLocale():::Get the locale if specified on the command line else return null and if locale option is not used then return default locale.:::userlocale->if->localeName->length->firstuscore->localeName->indexOf->seconduscore->language->country->variant->if->localeName->substring->localeName->indexOf->if->if->localeName->length->docenv->error->return->localeName->substring->localeName->substring->else->if->localeName->length->localeName->substring->else->docenv->error->return->else->if->localeName->length->else->docenv->error->return->searchLocale->if->docenv->error->return->else->return->else->return->Locale->getDefault
DocLocale#searchLocale(String, String, String):::Search the locale for specified language, specified country and specified variant.:::foreach->Locale->getAvailableLocales->if->loc->getLanguage->equals->loc->getCountry->equals->loc->getVariant->equals->return->return
DocLocale#localeSpecificFirstSentence(DocImpl, String)::: doc locale locale specific first sentence:::if->s->length->return->index->s->indexOf->if->s->trim->startsWith->return->s->s->length->substring->localeSpecificFirstSentence->if->locale->getLanguage->equals->sentenceBreaker->s->replace->setText->start->sentenceBreaker->first->end->sentenceBreaker->next->return->s->substring->trim->else->return->englishLanguageFirstSentence->trim
DocLocale#englishLanguageFirstSentence(String):::Return the first sentence of a string, where a sentence ends with a period followed be white space.:::if->return->len->s->length->period->for->i->return
DocLocale#htmlSentenceTerminatorFound(String, int):::Find out if there is any HTML tag in the given string:::foreach->if->str->terminator->length->regionMatches->return->return
ExecutableMemberDocImpl#getFlags():::Returns the flags in terms of javac's flags:::return->sym->flags
ExecutableMemberDocImpl#getContainingClass():::Identify the containing class:::return->sym->enclClass
ExecutableMemberDocImpl#isNative():::Return true if this method is native:::return->Modifier->getModifiers->isNative
ExecutableMemberDocImpl#isSynchronized():::Return true if this method is synchronized:::return->Modifier->getModifiers->isSynchronized
ExecutableMemberDocImpl#isVarArgs():::Return true if this method was declared to take a variable number of arguments.:::return->sym->flags
ExecutableMemberDocImpl#isSynthetic():::Returns true if this field was synthesized by the compiler.:::return->sym->flags
ExecutableMemberDocImpl#isIncluded()::: executable member doc impl is included:::return->containingClass->isIncluded->env->shouldDocument
ExecutableMemberDocImpl#throwsTags():::Return the throws tags in this method.:::return->comment->throwsTags
ExecutableMemberDocImpl#paramTags():::Return the param tags in this method, excluding the type parameter tags.:::return->comment->paramTags
ExecutableMemberDocImpl#typeParamTags():::Return the type parameter tags in this method.:::return->new->ParamTagArr->comment->typeParamTags
ExecutableMemberDocImpl#thrownExceptions():::Return exceptions this method or constructor throws.:::l->new->ListBuffer<>->foreach->getThrownTypes->erasure->cdi->env->getClassDoc->if->l->append->return->l->l->length->new->ClassDocImplArr->toArray
ExecutableMemberDocImpl#thrownExceptionTypes():::Return exceptions this method or constructor throws:::return->TypeMaker->getThrownTypes->getTypes
ExecutableMemberDocImpl#parameters():::Get argument information.:::params->sym->params->result->params->length->new->ParameterArr->i->foreach->new->ParameterImpl->return
ExecutableMemberDocImpl#receiverType():::Get the receiver type of this executable element.:::recvtype->asMethodType->return->TypeMaker->getType
ExecutableMemberDocImpl#typeParameters():::Return the formal type parameters of this method or constructor:::if->return->new->TypeVariableArr->res->getTypeArguments->length->new->TypeVariableArr->TypeMaker->getTypeArguments->getTypes->return
ExecutableMemberDocImpl#signature():::Get the signature:::return->makeSignature
ExecutableMemberDocImpl#flatSignature():::Get flat signature:::return->makeSignature
ExecutableMemberDocImpl#makeSignature(boolean)::: executable member doc impl make signature:::result->new->StringBuilder->result->append->for->types->getParameterTypes->types->nonEmpty->if->isVarArgs->len->result->length->result->replace->result->append->return->result->toString
ExecutableMemberDocImpl#typeParametersString()::: executable member doc impl type parameters string:::return->TypeMaker->typeParametersString
ExecutableMemberDocImpl#generateKey():::Generate a key for sorting.:::k->name->flatSignature->typeParametersString->k->replace->replace->return->getCollationKey
ExecutableMemberDocImpl#position():::Return the source position of the entity, or null if no position is available.:::if->sym->enclClass->return->return->SourcePositionImpl->sym->enclClass->make
FieldDocImpl#getFlags():::Returns the flags in terms of javac's flags:::return->sym->flags
FieldDocImpl#getContainingClass():::Identify the containing class:::return->sym->enclClass
FieldDocImpl#type():::Get type of this field.:::return->TypeMaker->getType
FieldDocImpl#constantValue():::Get the value of a constant field.:::result->sym->getConstValue->if->hasTag->Boolean->intValue->valueOf->return
FieldDocImpl#constantValueExpression():::Get the value of a constant field.:::return->constantValue->constantValueExpression
FieldDocImpl#constantValueExpression(Object):::A static version of the above.:::if->return->if->return->charValue->sourceForm->if->return->byteValue->sourceForm->if->return->sourceForm->if->return->doubleValue->sourceForm->if->return->doubleValue->sourceForm->if->return->return->cb->toString
FieldDocImpl#sourceForm(double, char)::: field doc impl source form:::if->Double->isNaN->return->if->return->if->return->return
FieldDocImpl#sourceForm(char)::: field doc impl source form:::buf->new->StringBuilder->buf->append->sourceChar->buf->append->return->buf->toString
FieldDocImpl#sourceForm(byte)::: field doc impl source form:::return->Integer->toString
FieldDocImpl#sourceForm(String)::: field doc impl source form:::buf->s->length->new->StringBuilder->buf->append->for->i->s->length->buf->append->return->buf->toString
FieldDocImpl#sourceChar(char, StringBuilder)::: field doc impl source char:::switch->buf->append->return->buf->append->return->buf->append->return->buf->append->return->buf->append->return->buf->append->return->buf->append->return->buf->append->return->if->isPrintableAscii->buf->append->return->unicodeEscape->return
FieldDocImpl#unicodeEscape(char, StringBuilder)::: field doc impl unicode escape:::chars->buf->append->buf->chars->charAt->append->buf->chars->charAt->append->buf->chars->charAt->append->buf->chars->charAt->append
FieldDocImpl#isPrintableAscii(char)::: field doc impl is printable ascii:::return
FieldDocImpl#isIncluded():::Return true if this field is included in the active set.:::return->containingClass->isIncluded->env->shouldDocument
FieldDocImpl#isField():::Is this Doc item a field (but not an enum constant?:::return->isEnumConstant
FieldDocImpl#isEnumConstant():::Is this Doc item an enum constant? (For legacy doclets, return false.):::return->getFlags
FieldDocImpl#isTransient():::Return true if this field is transient:::return->Modifier->getModifiers->isTransient
FieldDocImpl#isVolatile():::Return true if this field is volatile:::return->Modifier->getModifiers->isVolatile
FieldDocImpl#isSynthetic():::Returns true if this field was synthesized by the compiler.:::return->getFlags
FieldDocImpl#serialFieldTags():::Return the serialField tags in this FieldDocImpl item.:::return->comment->serialFieldTags
FieldDocImpl#name()::: field doc impl name:::if->toString->return
FieldDocImpl#qualifiedName()::: field doc impl qualified name:::if->sym->enclClass->getQualifiedName->name->return
FieldDocImpl#position():::Return the source position of the entity, or null if no position is available.:::if->sym->enclClass->return->return->SourcePositionImpl->sym->enclClass->make
JavadocClassFinder#instance(Context)::: javadoc class finder instance:::instance->context->get->if->new->JavadocClassFinder->return
JavadocClassFinder#preRegister(Context)::: javadoc class finder pre register:::context->JavadocClassFinder->new->put
JavadocClassFinder#getPackageFileKinds():::Override getPackageFileKinds to include search for package.html:::return
JavadocClassFinder#extraFileActions(PackageSymbol, JavaFileObject):::Override extraFileActions to check for package documentation:::if->fo->isNameCompatible->docenv->getPackageDoc->setDocPath
JavadocEnter#instance(Context)::: javadoc enter instance:::instance->context->get->if->new->JavadocEnter->return
JavadocEnter#preRegister(Context)::: javadoc enter pre register:::context->JavadocEnter->new->put
JavadocEnter#main(List)::: javadoc enter main:::nerrors->super->main->compiler->enterDone
JavadocEnter#visitTopLevel(JCCompilationUnit)::: javadoc enter visit top level:::super->visitTopLevel->if->isNameCompatible->pd->tree->getPackage->tp->docenv->getTreePath->docenv->getTreePath->docenv->makePackageDoc
JavadocEnter#visitClassDef(JCClassDecl)::: javadoc enter visit class def:::super->visitClassDef->if->return->if->c->docenv->docenv->getTreePath->makeClassDoc
JavadocEnter#duplicateClass(DiagnosticPosition, ClassSymbol):::Don't complain about a duplicate class.:::
JavadocMemberEnter#instance0(Context)::: javadoc member enter instance0:::instance->context->get->if->new->JavadocMemberEnter->return
JavadocMemberEnter#preRegister(Context)::: javadoc member enter pre register:::context->JavadocMemberEnter->new->put
JavadocMemberEnter#visitMethodDef(JCMethodDecl)::: javadoc member enter visit method def:::super->visitMethodDef->meth->if->return->treePath->docenv->getTreePath->if->meth->isConstructor->docenv->makeConstructorDoc->else->if->isAnnotationTypeElement->docenv->makeAnnotationTypeElementDoc->else->docenv->makeMethodDoc
JavadocMemberEnter#visitVarDef(JCVariableDecl)::: javadoc member enter visit var def:::if->isFinal->if->containsNonConstantExpression->super->visitVarDef->if->isParameter->docenv->docenv->getTreePath->makeFieldDoc
JavadocMemberEnter#isAnnotationTypeElement(MethodSymbol)::: javadoc member enter is annotation type element:::return->ClassDocImpl->meth->enclClass->isAnnotationType
JavadocMemberEnter#isParameter(VarSymbol)::: javadoc member enter is parameter:::return->var->flags
JavadocMemberEnter#containsNonConstantExpression(JCExpression):::Simple analysis of an expression tree to see if it contains tree nodes for any non-constant expression:::return->new->MaybeConstantExpressionScanner->containsNonConstantExpression
JavadocMemberEnter.MaybeConstantExpressionScanner#containsNonConstantExpression(JCExpression)::: maybe constant expression scanner contains non constant expression:::scan->return
JavadocMemberEnter.MaybeConstantExpressionScanner#scan(JCTree)::: maybe constant expression scanner scan:::if->tree->accept
JavadocMemberEnter.MaybeConstantExpressionScanner#visitTree(JCTree)::: maybe constant expression scanner visit tree:::
JavadocMemberEnter.MaybeConstantExpressionScanner#visitBinary(JCBinary)::: maybe constant expression scanner visit binary:::switch->tree->getTag->break
JavadocMemberEnter.MaybeConstantExpressionScanner#visitConditional(JCConditional)::: maybe constant expression scanner visit conditional:::scan->scan->scan
JavadocMemberEnter.MaybeConstantExpressionScanner#visitIdent(JCIdent)::: maybe constant expression scanner visit ident:::
JavadocMemberEnter.MaybeConstantExpressionScanner#visitLiteral(JCLiteral)::: maybe constant expression scanner visit literal:::
JavadocMemberEnter.MaybeConstantExpressionScanner#visitParens(JCParens)::: maybe constant expression scanner visit parens:::scan
JavadocMemberEnter.MaybeConstantExpressionScanner#visitSelect(JCTree.JCFieldAccess)::: maybe constant expression scanner visit select:::scan
JavadocMemberEnter.MaybeConstantExpressionScanner#visitTypeCast(JCTypeCast)::: maybe constant expression scanner visit type cast:::scan->scan
JavadocMemberEnter.MaybeConstantExpressionScanner#visitTypeIdent(JCPrimitiveTypeTree)::: maybe constant expression scanner visit type ident:::
JavadocMemberEnter.MaybeConstantExpressionScanner#visitUnary(JCUnary)::: maybe constant expression scanner visit unary:::switch->tree->getTag->break
JavadocTodo#preRegister(Context)::: javadoc todo pre register:::context->JavadocTodo->new->put
JavadocTodo#append(Env)::: javadoc todo append:::
JavadocTodo#offer(Env)::: javadoc todo offer:::return
JavadocTool#keepComments():::For javadoc, the parser needs to keep comments:::return
JavadocTool#make0(Context)::: Construct a new javadoc tool.:::JavadocClassFinder->preRegister->JavadocEnter->preRegister->JavadocMemberEnter->preRegister->JavadocTodo->preRegister->Messager->instance0->return->new->JavadocTool
JavadocTool#getRootDocImpl(String, String, ModifierFilter, List, List, Iterable, boolean, List, List, boolean, boolean, boolean)::: javadoc tool get root doc impl:::DocEnv->instance->docenv->setLocale->docenv->setEncoding->if->foreach->if->isValidPackageName->docenv->error->if->messager->nerrors->return->return->new->RootDocImpl->classTrees->new->ListBuffer<>->includedPackages->new->LinkedHashSet<>->try->fm->packageNames->new->LinkedHashSet<>->foreach->if->arg->endsWith->new->File->exists->if->new->File->getName->equals->docenv->warning->else->fm->getJavaFileObjects->parse->else->if->isValidPackageName->packageNames->add->else->if->arg->endsWith->if->throw->new->IllegalArgumentException->else->docenv->error->else->docenv->error->parse->modules->classTrees->toList->initModules->location->hasLocation->t->new->PackageTable->packages->subpackages->t->getIncludedPackages->packageTrees->new->ListBuffer<>->foreach->files->t->getFiles->docenv->notice->if->files->isEmpty->messager->warning->parse->modules->packageTrees->toList->enter->if->messager->nerrors->return->docenv->notice->javadocEnter->classTrees->toList->packageTrees->toList->appendList->main->catch->finally->if->messager->nerrors->return->return->classTrees->toList->listClasses->List->from->new->RootDocImpl
JavadocTool#isValidPackageName(String):::Is the given string a valid package name?:::index->while->s->indexOf->if->s->substring->isValidClassName->return->s->substring->return->isValidClassName
JavadocTool#parse(Iterable, ListBuffer, boolean)::: javadoc tool parse:::foreach->if->uniquefiles->add->if->docenv->fo->getName->notice->trees->parse->append
JavadocTool#surrogatesSupported()::: javadoc tool surrogates supported:::try->b->Character->isHighSurrogate->return->catch->return->finally
JavadocTool#isValidClassName(String):::Return true if given file name is a valid class name (including "package-info").:::if->s->length->return->if->s->equals->return->if->cp->s->codePointAt->if->Character->isJavaIdentifierStart->return->for->j->Character->charCount->s->length->Character->charCount->else->if->Character->s->charAt->isJavaIdentifierStart->return->for->j->s->length->return
JavadocTool#listClasses(List):::From a list of top level trees, return the list of contained class definitions:::result->new->ListBuffer<>->foreach->foreach->if->def->hasTag->result->append->return->result->toList
JavadocTool.PackageTable#packages(Collection)::: package table packages:::includedPackages->addAll->return
JavadocTool.PackageTable#subpackages(Collection, Collection)::: package table subpackages:::foreach->getEntry->foreach->packageLocn->getLocation->foreach->fm->list->binaryName->fm->inferBinaryName->pn->getPackageName->simpleName->getSimpleName->e->getEntry->if->e->isExcluded->isValidClassName->includedPackages->add->List->of->prepend->return
JavadocTool.PackageTable#getIncludedPackages():::Returns the aggregate set of included packages.:::return
JavadocTool.PackageTable#getFiles(String):::Returns the set of source files for a package.:::e->getEntry->if->return->lb->new->ListBuffer<>->packageLocn->getLocation->foreach->fm->list->binaryName->fm->inferBinaryName->simpleName->getSimpleName->if->isValidClassName->lb->append->return->lb->toList
JavadocTool.PackageTable#getLocation(String)::: package table get location:::if->pack->names->fromString->foreach->modules->allModules->p->syms->getPackage->if->p->members->isEmpty->return->fm->toString->getLocationForModule->return->else->return
JavadocTool.PackageTable#getEntry(String)::: package table get entry:::e->entries->get->if->entries->new->Entry->put->return
JavadocTool.PackageTable#getPackageName(String)::: package table get package name:::lastDot->name->lastIndexOf->return->name->substring
JavadocTool.PackageTable#getSimpleName(String)::: package table get simple name:::lastDot->name->lastIndexOf->return->name->substring
JavadocTool.PackageTable.Entry#isExcluded()::: entry is excluded:::if->getPackageName->getEntry->isExcluded->return
JavaScriptScanner.Reporter#report()::: reporter report:::
JavaScriptScanner#parse(String, Reporter)::: java script scanner parse:::c->c->length->new->charArr->c->c->length->getChars->nextChar->blockContent->blockTags
JavaScriptScanner#checkHtmlTag(String)::: java script scanner check html tag:::if->tag->equalsIgnoreCase->reporter->report
JavaScriptScanner#checkHtmlAttr(String, String)::: java script scanner check html attr:::n->name->toLowerCase->if->eventAttrs->contains->uriAttrs->contains->value->toLowerCase->trim->startsWith->reporter->report
JavaScriptScanner#nextChar()::: java script scanner next char:::switch
JavaScriptScanner#blockContent():::Read block content, consisting of text, html and inline tags:::while->switch->nextChar->break->entity->break->html->break->nextChar->break->inlineTag->break->if->break->nextChar
JavaScriptScanner#blockTags():::Read a series of block tags, including their content:::while->blockTag
JavaScriptScanner#blockTag():::Read a single block tag, including its content:::p->try->nextChar->if->isIdentifierStart->name->readTagName->tp->tagParsers->get->if->blockContent->else->switch->tp->getKind->tp->parse->return->return->blockContent->catch->blockContent->finally
JavaScriptScanner#inlineTag(Void)::: java script scanner inline tag:::nextChar->if->inlineTag
JavaScriptScanner#inlineTag():::Read a single inline tag, including its content:::p->try->nextChar->if->isIdentifierStart->name->readTagName->tp->tagParsers->get->if->skipWhitespace->inlineText->nextChar->else->skipWhitespace->if->tp->getKind->tp->parse->else->inlineText->nextChar->catch->finally
JavaScriptScanner#inlineText(WhitespaceRetentionPolicy):::Read plain text content of an inline tag:::switch->skipWhitespace->break->if->nextChar->break->break->pos->depth->while->switch->break->break->break->if->return->break->if->break->break->break->nextChar->throw->new->ParseException
JavaScriptScanner#reference(boolean)::: java script scanner reference:::pos->depth->while->switch->if->break->break->break->break->if->return->break->if->break->nextChar->if->throw->new->ParseException
JavaScriptScanner#identifier():::Read Java identifier Matching pairs of { } are skipped; the text is terminated by the first unmatched }:::skipWhitespace->pos->if->isJavaIdentifierStart->readJavaIdentifier->return->throw->new->ParseException
JavaScriptScanner#quotedString():::Read a quoted string:::pos->nextChar->while->switch->break->break->nextChar->return->if->break->nextChar
JavaScriptScanner#inlineWord():::Read a term ie:::pos->depth->while->switch->return->if->break->break->if->return->break->nextChar
JavaScriptScanner#inlineContent():::Read general text content of an inline tag, including HTML entities and elements:::skipWhitespace->pos->depth->while->switch->nextChar->break->entity->break->html->break->nextChar->break->if->nextChar->return->nextChar->break->if->break->nextChar->break
JavaScriptScanner#entity(Void)::: java script scanner entity:::entity
JavaScriptScanner#entity():::Read an HTML entity:::nextChar->name->if->namep->nextChar->if->isDecimalDigit->nextChar->while->isDecimalDigit->nextChar->new->String->else->if->nextChar->if->isHexDigit->nextChar->while->isHexDigit->nextChar->new->String->else->if->isIdentifierStart->readIdentifier->if->if->return->nextChar
JavaScriptScanner#html():::Read the start or end of an HTML tag, or an HTML comment <identifier attrs>  or </identifier> :::p->nextChar->if->isIdentifierStart->name->readIdentifier->checkHtmlTag->htmlAttrs->if->nextChar->if->nextChar->return->else->if->nextChar->if->isIdentifierStart->readIdentifier->skipWhitespace->if->nextChar->return->else->if->nextChar->if->nextChar->if->nextChar->while->dash->while->nextChar->if->nextChar->return->nextChar
JavaScriptScanner#htmlAttrs():::Read a series of HTML attributes, terminated by > :::skipWhitespace->while->isIdentifierStart->namePos->name->readAttributeName->skipWhitespace->value->new->StringBuilder->if->nextChar->skipWhitespace->if->quote->nextChar->while->if->break->value->append->nextChar->nextChar->else->while->isUnquotedAttrValueTerminator->value->append->nextChar->skipWhitespace->value->toString->checkHtmlAttr
JavaScriptScanner#attrValueChar(Void)::: java script scanner attr value char:::switch->entity->break->inlineTag->break->nextChar
JavaScriptScanner#isIdentifierStart(char)::: java script scanner is identifier start:::return->Character->isUnicodeIdentifierStart
JavaScriptScanner#readIdentifier()::: java script scanner read identifier:::start->nextChar->while->Character->isUnicodeIdentifierPart->nextChar->return->new->String
JavaScriptScanner#readAttributeName()::: java script scanner read attribute name:::start->nextChar->while->Character->isUnicodeIdentifierPart->nextChar->return->new->String
JavaScriptScanner#readTagName()::: java script scanner read tag name:::start->nextChar->while->Character->isUnicodeIdentifierPart->nextChar->return->new->String
JavaScriptScanner#isJavaIdentifierStart(char)::: java script scanner is java identifier start:::return->Character->isJavaIdentifierStart
JavaScriptScanner#readJavaIdentifier()::: java script scanner read java identifier:::start->nextChar->while->Character->isJavaIdentifierPart->nextChar->return->new->String
JavaScriptScanner#isDecimalDigit(char)::: java script scanner is decimal digit:::return
JavaScriptScanner#isHexDigit(char)::: java script scanner is hex digit:::return
JavaScriptScanner#isUnquotedAttrValueTerminator(char)::: java script scanner is unquoted attr value terminator:::switch->return->return
JavaScriptScanner#isWhitespace(char)::: java script scanner is whitespace:::return->Character->isWhitespace
JavaScriptScanner#skipWhitespace()::: java script scanner skip whitespace:::while->isWhitespace->nextChar
JavaScriptScanner#newString(int, int)::: java script scanner new string:::return->new->String
JavaScriptScanner.TagParser#getKind()::: tag parser get kind:::return
JavaScriptScanner.TagParser#getName()::: tag parser get name:::return
JavaScriptScanner.TagParser#parse(int)::: tag parser parse:::
JavaScriptScanner#initTagParsers()::: java script scanner init tag parsers:::parsers->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->TagParser->new->HashMap<>->foreach->tagParsers->p->getName->put
JavaScriptScanner#initEventAttrs()::: java script scanner init event attrs:::Arrays->asList->new->HashSet<>
JavaScriptScanner#initURIAttrs()::: java script scanner init attrs:::Arrays->asList->new->HashSet<>
MemberDocImpl#isSynthetic():::Returns true if this field was synthesized by the compiler.:::
Messager#instance0(Context):::Get the current messager, which is also the compiler log.:::instance->context->get->if->throw->new->InternalError->return
Messager#preRegister(Context, String)::: messager pre register:::context->new->Messager->put
Messager#preRegister(Context, String, PrintWriter, PrintWriter, PrintWriter)::: messager pre register:::context->new->Messager->put
Messager#setLocale(Locale)::: messager set locale:::
Messager#getText(String, Object...):::get and format message string from resource:::return->messages->getLocalizedString
Messager#printError(String):::Print error message, increment error count:::printError
Messager#printError(SourcePosition, String):::Print error message, increment error count:::if->report->return->if->prefix->pos->toString->errWriter->getWriter->errWriter->getText->println->errWriter->flush->prompt
Messager#printWarning(String):::Print warning message, increment warning count:::printWarning
Messager#printWarning(SourcePosition, String):::Print warning message, increment warning count:::if->report->return->if->prefix->pos->toString->warnWriter->getWriter->warnWriter->getText->println->warnWriter->flush
Messager#printNotice(String):::Print a message:::printNotice
Messager#printNotice(SourcePosition, String):::Print a message:::if->report->return->noticeWriter->getWriter->if->noticeWriter->println->else->noticeWriter->println->noticeWriter->flush
Messager#error(SourcePosition, String, Object...):::Print error message, increment error count.:::getText->printError
Messager#warning(SourcePosition, String, Object...):::Print warning message, increment warning count.:::getText->printWarning
Messager#notice(String, Object...):::Print a message.:::getText->printNotice
Messager#nerrors():::Return total number of errors, including those recorded in the compilation log.:::return
Messager#nwarnings():::Return total number of warnings, including those recorded in the compilation log.:::return
Messager#exitNotice():::Print exit message.:::if->notice->if->notice
Messager#exit():::Force program exit, e.g., from a fatal error:::throw->new->ExitJavadoc
Messager#report(DiagnosticType, SourcePosition, String)::: messager report:::switch->prefix->javadocDiags->create->report->break->key->javadocDiags->create->report->break->throw->type->toString->new->IllegalArgumentException
MethodDocImpl#isMethod():::Return true if it is a method, which it is:::return
MethodDocImpl#isDefault():::Return true if this method is default:::return->sym->flags
MethodDocImpl#isAbstract():::Return true if this method is abstract:::return->Modifier->getModifiers->isAbstract->isDefault
MethodDocImpl#returnType():::Get return type.:::return->TypeMaker->getReturnType->getType
MethodDocImpl#overriddenClass():::Return the class that originally defined the method that is overridden by the current definition, or null if no such class exists.:::t->overriddenType->return->t->asClassDoc
MethodDocImpl#overriddenType():::Return the type containing the method that this method overrides:::if->sym->flags->return->origin->for->t->supertype->t->hasTag->supertype->return
MethodDocImpl#overriddenMethod():::Return the method that this method overrides.:::if->sym->flags->return->origin->for->t->supertype->t->hasTag->supertype->return
MethodDocImpl#membersOf(ClassSymbol):::Retrieve members of c, ignoring any CompletionFailures that occur.:::try->return->c->members->catch->return->membersOf->finally
MethodDocImpl#overrides(MethodDoc):::Tests whether this method overrides another:::overridee->origin->return->sym->isStatic->asSuper->sym->overrides
MethodDocImpl#name()::: method doc impl name:::if->toString->return
MethodDocImpl#qualifiedName()::: method doc impl qualified name:::if->sym->enclClass->getQualifiedName->return
MethodDocImpl#toString():::Returns a string representation of this method:::return->sym->enclClass->getQualifiedName->typeParametersString->name->signature
ModifierFilter#checkModifier(int):::Filter on modifier bits.:::fmod->return
PackageDocImpl#setTree(JCTree)::: package doc impl set tree:::
PackageDocImpl#setTreePath(TreePath)::: package doc impl set tree path:::super->setTreePath->checkDoc
PackageDocImpl#documentation():::Do lazy initialization of "documentation" string.:::if->return->if->try->s->docPath->openInputStream->readHTMLDocumentation->catch->env->docPath->getName->error->finally->else->return
PackageDocImpl#getClasses(boolean):::Return a list of all classes contained in this package, including member classes of those classes, and their member classes, etc.:::if->return->if->return->classes->new->ListBuffer<>->foreach->sym->members->getSymbols->if->s->c->env->getClassDoc->if->c->isSynthetic->c->addAllClasses->if->return->classes->toList->else->return->classes->toList
PackageDocImpl#addAllClassesTo(ListBuffer):::Add all included classes (including Exceptions and Errors) and interfaces.:::list->getClasses->appendList
PackageDocImpl#allClasses(boolean):::Get all classes (including Exceptions and Errors) and interfaces.:::classes->getClasses->return->classes->classes->length->new->ClassDocImplArr->toArray
PackageDocImpl#allClasses():::Get all included classes (including Exceptions and Errors) and interfaces:::return->allClasses
PackageDocImpl#ordinaryClasses():::Get ordinary classes (that is, exclude exceptions, errors, enums, interfaces, and annotation types) in this package.:::ret->new->ListBuffer<>->foreach->getClasses->if->c->isOrdinaryClass->ret->append->return->ret->ret->length->new->ClassDocImplArr->toArray
PackageDocImpl#exceptions():::Get Exception classes in this package.:::ret->new->ListBuffer<>->foreach->getClasses->if->c->isException->ret->append->return->ret->ret->length->new->ClassDocImplArr->toArray
PackageDocImpl#errors():::Get Error classes in this package.:::ret->new->ListBuffer<>->foreach->getClasses->if->c->isError->ret->append->return->ret->ret->length->new->ClassDocImplArr->toArray
PackageDocImpl#enums():::Get included enum types in this package.:::ret->new->ListBuffer<>->foreach->getClasses->if->c->isEnum->ret->append->return->ret->ret->length->new->ClassDocImplArr->toArray
PackageDocImpl#interfaces():::Get included interfaces in this package, omitting annotation types.:::ret->new->ListBuffer<>->foreach->getClasses->if->c->isInterface->ret->append->return->ret->ret->length->new->ClassDocImplArr->toArray
PackageDocImpl#annotationTypes():::Get included annotation types in this package.:::ret->new->ListBuffer<>->foreach->getClasses->if->c->isAnnotationType->ret->append->return->ret->ret->length->new->AnnotationTypeDocImplArr->toArray
PackageDocImpl#annotations():::Get the annotations of this package:::res->sym->getRawAttributes->length->new->AnnotationDescArr->i->foreach->sym->getRawAttributes->new->AnnotationDescImpl->return
PackageDocImpl#findClass(String):::Lookup for a class within this package.:::filtered->foreach->getClasses->if->c->name->equals->return->return
PackageDocImpl#isIncluded():::Return true if this package is included in the active set.:::return
PackageDocImpl#name():::Get package name:::return->qualifiedName
PackageDocImpl#qualifiedName():::Get package name.:::if->fullname->sym->getQualifiedName->fullname->isEmpty->fullname->toString->return
PackageDocImpl#setDocPath(FileObject):::set doc path for an unzipped directory:::if->return->if->path->equals->checkDoc
PackageDocImpl#checkDoc():::Invoked when a source of package doc comments is located:::if->if->env->name->warning->else
PackageDocImpl#position():::Return the source position of the entity, or null if no position is available.:::return->SourcePositionImpl->make->SourcePositionImpl->make
ParameterImpl#type():::Get the type of this parameter.:::return
ParameterImpl#name():::Get local name of this parameter:::return->sym->toString
ParameterImpl#typeName():::Get type name of this parameter:::return->type->typeName->type->toString
ParameterImpl#toString():::Returns a string representation of the parameter:::return->typeName
ParameterImpl#annotations():::Get the annotations of this parameter:::res->sym->getRawAttributes->length->new->AnnotationDescArr->i->foreach->sym->getRawAttributes->new->AnnotationDescImpl->return
ParameterizedTypeImpl#asClassDoc():::Return the generic class or interface that declared this type.:::return->env->getClassDoc
ParameterizedTypeImpl#typeArguments():::Return the actual type arguments of this type.:::return->TypeMaker->type->getTypeArguments->getTypes
ParameterizedTypeImpl#superclassType():::Return the class type that is a direct supertype of this one:::if->asClassDoc->isInterface->return->sup->supertype->return->TypeMaker->getType
ParameterizedTypeImpl#interfaceTypes():::Return the interface types directly implemented by or extended by this parameterized type:::return->TypeMaker->interfaces->getTypes
ParameterizedTypeImpl#containingType():::Return the type that contains this type as a member:::if->type->getEnclosingType->hasTag->return->TypeMaker->type->getEnclosingType->getType->enclosing->enclClass->if->return->env->getClassDoc->return
ParameterizedTypeImpl#typeName()::: parameterized type impl type name:::return->TypeMaker->getTypeName
ParameterizedTypeImpl#asParameterizedType()::: parameterized type impl as parameterized type:::return
ParameterizedTypeImpl#toString()::: parameterized type impl to string:::return->parameterizedTypeToString
ParameterizedTypeImpl#parameterizedTypeToString(DocEnv, ClassType, boolean)::: parameterized type impl parameterized type to string:::if->return->TypeMaker->getTypeName->s->new->StringBuilder->if->cl->getEnclosingType->hasTag->s->TypeMaker->getTypeName->append->else->encl->cl->getEnclosingType->s->parameterizedTypeToString->append->append->toString->append->s->TypeMaker->typeArgumentsString->append->return->s->toString
ParamTagImpl#parameterName():::Return the parameter name.:::return
ParamTagImpl#parameterComment():::Return the parameter comment.:::return
ParamTagImpl#kind():::Return the kind of this tag.:::return
ParamTagImpl#isTypeParameter():::Return true if this ParamTag corresponds to a type parameter.:::return
ParamTagImpl#toString():::convert this object to a string.:::return
ParamTagImpl#inlineTags():::For the parameter comment with embedded @link tags return the array of TagImpls consisting of SeeTagImpl(s) and text containing TagImpl(s).:::if->Comment->getInlineTags->return
PrimitiveType#typeName():::Return unqualified name of type excluding any dimension information:::return
PrimitiveType#getElementType()::: primitive type get element type:::return
PrimitiveType#qualifiedTypeName():::Return qualified name of type excluding any dimension information:::return
PrimitiveType#simpleTypeName():::Return the simple name of this type.:::return
PrimitiveType#dimension():::Return the type's dimension information, as a string:::return
PrimitiveType#asClassDoc():::Return this type as a class:::return
PrimitiveType#asAnnotationTypeDoc():::Return null, as this is not an annotation type.:::return
PrimitiveType#asParameterizedType():::Return null, as this is not an instantiation.:::return
PrimitiveType#asTypeVariable():::Return null, as this is not a type variable.:::return
PrimitiveType#asWildcardType():::Return null, as this is not a wildcard type.:::return
PrimitiveType#asAnnotatedType():::Return null, as this is not an annotated type.:::return
PrimitiveType#toString():::Returns a string representation of the type:::return->qualifiedTypeName
PrimitiveType#isPrimitive():::Return true if this is a primitive type.:::return
ProgramElementDocImpl#setTreePath(TreePath)::: program element doc impl set tree path:::super->setTreePath->treePath->getLeaf->treePath->getCompilationUnit
ProgramElementDocImpl#getContainingClass():::Subclasses override to identify the containing class:::
ProgramElementDocImpl#getFlags():::Returns the flags in terms of javac's flags:::
ProgramElementDocImpl#getModifiers():::Returns the modifier flags in terms of java.lang.reflect.Modifier.:::if->DocEnv->getFlags->translateModifiers->return
ProgramElementDocImpl#containingClass():::Get the containing class of this program element.:::if->getContainingClass->return->return->env->getContainingClass->getClassDoc
ProgramElementDocImpl#containingPackage():::Return the package that this member is contained in:::return->env->getContainingClass->packge->getPackageDoc
ProgramElementDocImpl#modifierSpecifier():::Get the modifier specifier integer.:::modifiers->getModifiers->if->isMethod->containingClass->isInterface->return->return
ProgramElementDocImpl#modifiers():::Get modifiers string:::modifiers->getModifiers->if->isAnnotationTypeElement->isMethod->containingClass->isInterface->return->Modifier->toString->else->return->Modifier->toString
ProgramElementDocImpl#annotations():::Get the annotations of this program element:::res->sym->getRawAttributes->length->new->AnnotationDescArr->i->foreach->sym->getRawAttributes->new->AnnotationDescImpl->return
ProgramElementDocImpl#isPublic():::Return true if this program element is public:::modifiers->getModifiers->return->Modifier->isPublic
ProgramElementDocImpl#isProtected():::Return true if this program element is protected:::modifiers->getModifiers->return->Modifier->isProtected
ProgramElementDocImpl#isPrivate():::Return true if this program element is private:::modifiers->getModifiers->return->Modifier->isPrivate
ProgramElementDocImpl#isPackagePrivate():::Return true if this program element is package private:::return->isPublic->isPrivate->isProtected
ProgramElementDocImpl#isStatic():::Return true if this program element is static:::modifiers->getModifiers->return->Modifier->isStatic
ProgramElementDocImpl#isFinal():::Return true if this program element is final:::modifiers->getModifiers->return->Modifier->isFinal
ProgramElementDocImpl#generateKey():::Generate a key for sorting.:::k->name->return->getCollationKey
RootDocImpl#setClasses(DocEnv, List):::Initialize classes information:::result->new->ListBuffer<>->foreach->if->env->shouldDocument->cd->env->getClassDoc->if->result->append->result->toList
RootDocImpl#setPackages(DocEnv, List):::Initialize packages information.:::packlist->new->ListBuffer<>->foreach->pkg->env->lookupPackage->if->packlist->append->else->env->warning->packlist->toList
RootDocImpl#options():::Command line options:::return->options->options->length->new->StringArrs->toArray
RootDocImpl#specifiedPackages():::Packages specified on the command line.:::return->cmdLinePackages->cmdLinePackages->length->new->PackageDocImplArr->toArray
RootDocImpl#specifiedClasses():::Classes and interfaces specified on the command line.:::classesToDocument->new->ListBuffer<>->foreach->cd->addAllClasses->return->classesToDocument->classesToDocument->length->new->ClassDocImplArr->toArray
RootDocImpl#classes():::Return all classes and interfaces (including those inside packages) to be documented.:::classesToDocument->new->ListBuffer<>->foreach->cd->addAllClasses->foreach->pd->addAllClassesTo->return->classesToDocument->classesToDocument->length->new->ClassDocImplArr->toArray
RootDocImpl#classNamed(String):::Return a ClassDoc for the specified class/interface name:::return->env->lookupClass
RootDocImpl#packageNamed(String):::Return a PackageDoc for the specified package name:::return->env->lookupPackage
RootDocImpl#name():::Return the name of this Doc item.:::return
RootDocImpl#qualifiedName():::Return the name of this Doc item.:::return
RootDocImpl#isIncluded():::Return true if this Doc is include in the active set:::return
RootDocImpl#printError(String):::Print error message, increment error count.:::env->printError
RootDocImpl#printError(SourcePosition, String):::Print error message, increment error count.:::env->printError
RootDocImpl#printWarning(String):::Print warning message, increment warning count.:::env->printWarning
RootDocImpl#printWarning(SourcePosition, String):::Print warning message, increment warning count.:::env->printWarning
RootDocImpl#printNotice(String):::Print a message.:::env->printNotice
RootDocImpl#printNotice(SourcePosition, String):::Print a message.:::env->printNotice
RootDocImpl#getOverviewPath():::Return the path of the overview file and null if it does not exist.:::foreach->if->equals->if->fm->return->fm->getJavaFileObjects->iterator->next->return
RootDocImpl#documentation():::Do lazy initialization of "documentation" string.:::if->overviewPath->getOverviewPath->if->else->try->overviewPath->openInputStream->readHTMLDocumentation->catch->env->overviewPath->getName->error->finally->return
RootDocImpl#position():::Return the source position of the entity, or null if no position is available.:::path->return->getOverviewPath->SourcePositionImpl->make
RootDocImpl#getLocale():::Return the locale provided by the user or the default locale value.:::return
RootDocImpl#getFileManager():::Return the current file manager.:::return
RootDocImpl#initDocLint(Collection, Collection, String)::: root doc impl init doc lint:::env->initDoclint
RootDocImpl#initJavaScriptScanner(boolean)::: root doc impl init java script scanner:::return->env->initJavaScriptScanner
RootDocImpl#isFunctionalInterface(AnnotationDesc)::: root doc impl is functional interface:::return->allowedInSource->annotationDesc->annotationType->qualifiedName->toString->equals
RootDocImpl#showTagMessages()::: root doc impl show tag messages:::return->env->showTagMessages
SeeTagImpl#showRef()::: see tag impl show ref:::sym->if->if->else->if->else->else->if->else->if->else->return->messages->JavacMessages->docenv->instance->locale->Locale->getDefault->printer->new->Printer->s->text->replaceAll->sp->s->indexOf->lparen->s->indexOf->rparen->s->indexOf->seetext->s->substring->s->substring->file->holder->position->file->getAbsoluteFile->toURI->normalize->new->File->sb->new->StringBuilder->sb->append->append->append->name->append->append->append->append->sb->sym->getKind->append->append->if->sb->printer->visit->append->append->sb->printer->visit->append->println
SeeTagImpl#referencedClassName():::get the class name part of @see, For instance, if the comment is @see String#startsWith(java.lang.String) :::return
SeeTagImpl#referencedPackage():::get the package referenced by  @see:::return
SeeTagImpl#referencedClass():::get the class referenced by the class name part of @see, For instance, if the comment is @see String#startsWith(java.lang.String) :::return
SeeTagImpl#referencedMemberName():::get the name of the member referenced by the prototype part of @see, For instance, if the comment is @see String#startsWith(java.lang.String) :::return
SeeTagImpl#referencedMember():::get the member referenced by the prototype part of @see, For instance, if the comment is @see String#startsWith(java.lang.String) :::return
SeeTagImpl#parseSeeString():::parse @see part of comment:::len->text->length->if->return->switch->text->charAt->if->text->charAt->docenv->warning->return->if->text->charAt->docenv->warning->else->return->parens->commentstart->start->cp->for->i->Character->charCount->if->docenv->warning->return->seetext->labeltext->if->text->substring->text->substring->for->i->labeltext->length->else->sharp->seetext->indexOf->if->seetext->substring->seetext->substring->else->if->seetext->indexOf->docenv->warning->else
SeeTagImpl#findReferenced(ClassDocImpl):::Find what is referenced by the see also:::if->where->length->if->containingClass->findClass->else->docenv->lookupClass->if->holder->docenv->holder->containingPackage->name->lookupClass->if->docenv->lookupPackage->return->else->if->docenv->warning->return->else->referencedClass->qualifiedName->if->return->else->paren->what->indexOf->memName->what->substring->paramarr->if->what->what->length->substring->new->ParameterParseMachine->parseParameters->if->findExecutableMember->else->else->findExecutableMember->fd->findField->if->fd->containingClass->referencedMember->containingClass->subclassOf->if->docenv->warning
SeeTagImpl#findReferencedMethod(String, String[], ClassDoc)::: see tag impl find referenced method:::meth->findExecutableMember->if->foreach->referencedClass->innerClasses->findReferencedMethod->if->return->return
SeeTagImpl#findExecutableMember(String, String[], ClassDoc)::: see tag impl find executable member:::className->referencedClass->name->if->memName->className->className->lastIndexOf->substring->equals->return->findConstructor->else->return->findMethod
SeeTagImpl.ParameterParseMachine#parseParameters()::: parameter parse machine parse parameters:::if->parameters->equals->return->new->StringArr->state->prevstate->parameters->parameters->length->substring->cp->for->index->parameters->length->Character->charCount->if->docenv->warning->if->typeId->length->paramList->typeId->toString->append->return->paramList->paramList->length->new->StringArr->toArray
SeeTagImpl.ParameterParseMachine#addTypeToParamList()::: parameter parse machine add type to param list:::if->typeId->length->paramList->typeId->toString->append->typeId->setLength
SeeTagImpl#kind():::Return the kind of this tag.:::return
SeeTagImpl#label():::Return the label of the see tag.:::return
SerialFieldTagImpl#parseSerialFieldString()::: serial field tag impl parse serial field string:::len->text->length->if->return->inx->cp->for->Character->charCount->first->last->text->codePointAt->if->Character->isJavaIdentifierStart->docenv->Character->toChars->new->String->warning->return->for->Character->charCount->Character->charCount->if->Character->text->codePointAt->isWhitespace->docenv->Character->toChars->new->String->warning->return->text->substring->for->Character->charCount->for->Character->charCount->if->Character->text->codePointAt->isWhitespace->docenv->Character->toChars->new->String->warning->return->text->substring->for->Character->charCount->text->substring
SerialFieldTagImpl#key():::return a key for sorting.:::return
SerialFieldTagImpl#mapToFieldDocImpl(FieldDocImpl)::: serial field tag impl map to field doc impl:::
SerialFieldTagImpl#fieldName():::Return the serialziable field name.:::return
SerialFieldTagImpl#fieldType():::Return the field type string.:::return
SerialFieldTagImpl#fieldTypeDoc():::Return the ClassDocImpl for field type.:::if->containingClass->findClass->return
SerialFieldTagImpl#getMatchingField():::Return the corresponding FieldDocImpl for this SerialFieldTagImpl.:::return
SerialFieldTagImpl#description():::Return the field comment:::if->description->length->comment->matchingField->comment->if->return->comment->commentText->return
SerialFieldTagImpl#kind():::Return the kind of this tag.:::return
SerialFieldTagImpl#toString():::Convert this object to a string.:::return
SerialFieldTagImpl#compareTo(Object):::Compares this Object with the specified Object for order:::return->key->key->compareTo
SerializedForm#getDefinedSerializableFields(ClassSymbol)::: serialized form get defined serializable fields:::names->foreach->def->members->names->fromString->getSymbolsByName->if->f->if->f->flags->f->flags->return->return
SerializedForm#computeDefaultSerializableFields(DocEnv, ClassSymbol, ClassDocImpl)::: serialized form compute default serializable fields:::foreach->def->members->getSymbols->if->f->if->f->flags->f->flags->fd->env->getFieldDoc->fields->prepend
SerializedForm#addMethodIfExist(DocEnv, ClassSymbol, String)::: serialized form add method if exist:::names->foreach->def->members->names->fromString->getSymbolsByName->if->md->if->md->flags->methods->env->getMethodDoc->append
SerializedForm#mapSerialFieldTagImplsToFieldDocImpls(FieldDocImpl, DocEnv, ClassSymbol)::: serialized form map serial field tag impls to field doc impls:::names->foreach->spfDoc->serialFieldTags->if->tag->fieldName->tag->fieldType->continue->fieldName->names->tag->fieldName->fromString->foreach->def->members->getSymbolsByName->if->f->fdi->env->getFieldDoc->mapToFieldDocImpl->break
SerializedForm#fields():::Return serializable fields in class:::return->fields->fields->length->new->FieldDocImplArr->toArray
SerializedForm#methods():::Return serialization methods in class.:::return->methods->methods->length->new->MethodDocArr->toArray
SerializedForm#definesSerializableFields():::Returns true if Serializable fields are defined explicitly using member, serialPersistentFields.:::return
SourcePositionImpl#file():::The source file:::return->filename->getName->new->File
SourcePositionImpl#fileObject():::The source file:::return
SourcePositionImpl#line():::The line in the source file:::if->return->else->return->lineMap->getLineNumber
SourcePositionImpl#column():::The column in the source file:::if->return->else->return->lineMap->getColumnNumber
SourcePositionImpl#make(FileObject, int, Position.LineMap)::: source position impl make:::if->return->return->new->SourcePositionImpl
SourcePositionImpl#toString()::: source position impl to string:::fn->filename->getName->if->fn->endsWith->paren->fn->lastIndexOf->if->i->if->fn->charAt->fn->substring->fn->fn->length->substring->if->return->else->return->line
Start#usage():::Usage:::usage
Start#usage(boolean)::: start usage:::usage
Start#Xusage()::: start  xusage:::Xusage
Start#Xusage(boolean)::: start  xusage:::usage
Start#usage(String, String, String, boolean)::: start usage:::messager->notice->if->docletInvoker->optionLength->if->messager->notice->if->exit
Start#exit():::Exit:::messager->exit
Start#begin(String...):::Main program - external wrapper:::ok->Collections->emptySet->begin->return
Start#begin(Class, Iterable, Iterable)::: start begin:::opts->new->ArrayList<>->foreach->opts->add->return->opts->opts->size->new->StringArr->toArray->begin
Start#begin(Class, String[], Iterable)::: start begin:::failed->try->parseAndExecute->catch->messager->error->throw->ee->printStackTrace->messager->error->ee->printStackTrace->messager->error->finally->if->try->fileManager->close->catch->finally->messager->exitNotice->messager->flush->messager->nerrors->messager->nwarnings->return
Start#parseAndExecute(Class, String[], Iterable):::Main program - internal:::tm->System->currentTimeMillis->javaNames->new->ListBuffer<>->try->CommandLine->parse->catch->messager->e->getMessage->error->exit->e->printStackTrace->exit->finally->context->get->setDocletInvoker->Options->instance->compOpts->put->for->i->if->JavacFileManager->preRegister->context->get->if->if->handleOptions->arguments->Arguments->instance->arguments->init->arguments->allowEmpty->arguments->validate->platformString->compOpts->get->if->if->compOpts->isSet->usageError->if->fileManagerOpts->containsKey->getPrimaryName->usageError->platformDescription->PlatformUtils->lookupPlatformDescription->if->usageError->compOpts->platformDescription->getSourceVersion->put->context->put->platformFM->platformDescription->getFileManager->DelegatingJavaFileManager->installReleaseFileManager->compOpts->notifyListeners->if->javaNames->isEmpty->subPackages->isEmpty->isEmpty->usageError->if->docletInvoker->options->toList->validOptions->exit->comp->JavadocTool->make0->if->return->if->setFilter->languageVersion->docletInvoker->languageVersion->root->comp->javaNames->toList->options->toList->subPackages->toList->excludedPackages->toList->getRootDocImpl->ok->if->docletInvoker->start->if->compOpts->get->System->currentTimeMillis->messager->Long->toString->notice->return
Start#isEmpty(Iterable)::: start is empty:::return->iter->iterator->hasNext
Start#setDocletInvoker(Class, JavaFileManager, String[]):::Init the doclet invoker:::exportInternalAPI->docletClassName->docletPath->for->i->if->new->DocletInvoker->else->if->new->DocletInvoker
Start#oneArg(String[], int):::Set one arg option:::if->setOption->else->usageError
Start#usageError(String, Object...)::: start usage error:::messager->error->usage
Start#setOption(String):::indicate an option with no arguments was given.:::option->options->append
Start#setOption(String, String):::indicate an option with one argument was given.:::option->options->append
Start#setOption(String, List):::indicate an option with the specified list of arguments was given.:::args->arguments->length->new->StringArr->k->for->i->i->nonEmpty->options->append
Start#getOptionHelper()::: start get option helper:::return->new->GrumpyHelper
TagImpl#name():::Return the name of this tag.:::return
TagImpl#holder():::Return the containing Doc of this Tag element.:::return
TagImpl#kind():::Return the kind of this tag.:::return
TagImpl#text():::Return the text of this tag, that is, portion beyond tag name.:::return
TagImpl#docenv()::: tag impl docenv:::return
TagImpl#divideAtWhite():::for use by subclasses which have two part tag text.:::sa->new->StringArr->len->text->length->for->inx->return
TagImpl#toString():::convert this object to a string.:::return
TagImpl#inlineTags():::For documentation comment with embedded @link tags, return the array of TagImpls consisting of SeeTagImpl(s) and text containing TagImpl(s):::if->Comment->getInlineTags->return
TagImpl#firstSentenceTags():::Return array of tags for the first sentence in the doc comment text.:::if->inlineTags->try->docenv->setSilent->Comment->firstSentenceTags->catch->finally->docenv->setSilent->return
TagImpl#position():::Return the doc item to which this tag is attached.:::return->holder->position
ThrowsTagImpl#exceptionName():::Return the exception name.:::return
ThrowsTagImpl#exceptionComment():::Return the exception comment.:::return
ThrowsTagImpl#exception():::Return the exception as a ClassDocImpl.:::exceptionClass->if->else->emd->con->emd->containingClass->con->findClass->return
ThrowsTagImpl#exceptionType():::Return the type that represents the exception:::return->exception
ThrowsTagImpl#kind():::Return the kind of this tag:::return
ThrowsTagImpl#inlineTags():::For the exception comment with embedded @link tags return the array of TagImpls consisting of SeeTagImpl(s) and text containing TagImpl(s).:::if->Comment->exceptionComment->getInlineTags->return
TypeMaker#getType(DocEnv, Type)::: type maker get type:::return->getType
TypeMaker#getType(DocEnv, Type, boolean)::: type maker get type:::return->getType
TypeMaker#getType(DocEnv, Type, boolean, boolean)::: type maker get type:::try->return->getTypeImpl->catch->return->getType->finally
TypeMaker#getTypeImpl(DocEnv, Type, boolean, boolean)::: type maker get type impl:::if->erasure->if->t->isAnnotated->return->new->AnnotatedTypeImpl->switch->t->getTag->if->ClassDocImpl->isGeneric->return->env->getParameterizedType->else->return->env->getClassDoc->a->return->new->WildcardTypeImpl->return->new->TypeVariableImpl->return->new->ArrayTypeImpl->return->return->return->return->return->return->return->return->return->if->return->env->getClassDoc->return->getQualifiedName->toString->new->PrimitiveType
TypeMaker#getTypes(DocEnv, List):::Convert a list of javac types into an array of javadoc types.:::return->ts->length->new->com.sun.javadoc.TypeArr->getTypes
TypeMaker#getTypes(DocEnv, List, com.sun.javadoc.Type[]):::Like the above version, but use and return the array given.:::i->foreach->getType->return
TypeMaker#getTypeName(Type, boolean)::: type maker get type name:::switch->t->getTag->s->new->StringBuilder->while->t->hasTag->s->append->s->getTypeName->insert->return->s->toString->return->ClassDocImpl->getClassName->return->getQualifiedName->toString
TypeMaker#getTypeString(DocEnv, Type, boolean):::Return the string representation of a type use:::switch->t->getTag->s->new->StringBuilder->while->t->hasTag->s->append->elemtype->s->getTypeString->insert->return->s->toString->return->ParameterizedTypeImpl->parameterizedTypeToString->a->return->WildcardTypeImpl->wildcardTypeToString->return->getQualifiedName->toString
TypeMaker#typeParametersString(DocEnv, Symbol, boolean):::Return the formal type parameters of a class or method as an angle-bracketed string:::if->getTypeArguments->isEmpty->return->s->new->StringBuilder->foreach->getTypeArguments->s->s->length->append->s->TypeVariableImpl->typeVarToString->append->s->append->return->s->toString
TypeMaker#typeArgumentsString(DocEnv, ClassType, boolean):::Return the actual type arguments of a parameterized type as an angle-bracketed string:::if->cl->getTypeArguments->isEmpty->return->s->new->StringBuilder->foreach->cl->getTypeArguments->s->s->length->append->s->getTypeString->append->s->append->return->s->toString
TypeMaker.ArrayTypeImpl#getElementType()::: array type impl get element type:::return->TypeMaker->elemtype->getType
TypeMaker.ArrayTypeImpl#skipArrays()::: array type impl skip arrays:::if->t->for->t->hasTag->elemtype->TypeMaker->getType->return
TypeMaker.ArrayTypeImpl#dimension():::Return the type's dimension information, as a string:::dimension->new->StringBuilder->for->t->t->hasTag->elemtype->return->dimension->toString
TypeMaker.ArrayTypeImpl#typeName():::Return unqualified name of type excluding any dimension information:::return->skipArrays->typeName
TypeMaker.ArrayTypeImpl#qualifiedTypeName():::Return qualified name of type excluding any dimension information:::return->skipArrays->qualifiedTypeName
TypeMaker.ArrayTypeImpl#simpleTypeName():::Return the simple name of this type excluding any dimension information.:::return->skipArrays->simpleTypeName
TypeMaker.ArrayTypeImpl#asClassDoc():::Return this type as a class:::return->skipArrays->asClassDoc
TypeMaker.ArrayTypeImpl#asParameterizedType():::Return this type as a ParameterizedType if it represents a parameterized type:::return->skipArrays->asParameterizedType
TypeMaker.ArrayTypeImpl#asTypeVariable():::Return this type as a TypeVariable if it represents a type variable:::return->skipArrays->asTypeVariable
TypeMaker.ArrayTypeImpl#asWildcardType():::Return null, as there are no arrays of wildcard types.:::return
TypeMaker.ArrayTypeImpl#asAnnotatedType():::Return null, as there are no annotations of the type:::return
TypeMaker.ArrayTypeImpl#asAnnotationTypeDoc():::Return this type as an AnnotationTypeDoc if it represents an annotation type:::return->skipArrays->asAnnotationTypeDoc
TypeMaker.ArrayTypeImpl#isPrimitive():::Return true if this is an array of a primitive type.:::return->skipArrays->isPrimitive
TypeMaker.ArrayTypeImpl#toString():::Return a string representation of the type:::return->qualifiedTypeName->dimension
TypeVariableImpl#bounds():::Return the bounds of this type variable.:::return->TypeMaker->getBounds->getTypes
TypeVariableImpl#owner():::Return the class, interface, method, or constructor within which this type variable is declared.:::osym->if->matches->return->env->getClassDoc->names->if->return->env->getConstructorDoc->else->return->env->getMethodDoc
TypeVariableImpl#asClassDoc():::Return the ClassDoc of the erasure of this type variable.:::return->env->erasure->getClassDoc
TypeVariableImpl#asTypeVariable()::: type variable impl as type variable:::return
TypeVariableImpl#toString()::: type variable impl to string:::return->typeVarToString
TypeVariableImpl#typeVarToString(DocEnv, TypeVar, boolean):::Return the string form of a type variable along with any "extends" clause:::s->v->toString->new->StringBuilder->bounds->getBounds->if->bounds->nonEmpty->first->foreach->s->append->s->TypeMaker->getTypeString->append->return->s->toString
TypeVariableImpl#getBounds(TypeVar, DocEnv):::Get the bounds of a type variable as listed in the "extends" clause.:::upperBound->v->getUpperBound->boundname->getQualifiedName->if->upperBound->isAnnotated->return->List->nil->else->return->getBounds
TypeVariableImpl#annotations():::Get the annotations of this program element:::if->type->isAnnotated->return->new->AnnotationDescArr->tas->type->getAnnotationMirrors->res->tas->length->new->AnnotationDescArr->i->foreach->new->AnnotationDescImpl->return
WildcardTypeImpl#extendsBounds():::Return the upper bounds of this wildcard type argument as given by the extends clause:::return->TypeMaker->getExtendsBounds->getTypes
WildcardTypeImpl#superBounds():::Return the lower bounds of this wildcard type argument as given by the super clause:::return->TypeMaker->getSuperBounds->getTypes
WildcardTypeImpl#asClassDoc():::Return the ClassDoc of the erasure of this wildcard type.:::return->env->erasure->getClassDoc
WildcardTypeImpl#asWildcardType()::: wildcard type impl as wildcard type:::return
WildcardTypeImpl#typeName()::: wildcard type impl type name:::return
WildcardTypeImpl#qualifiedTypeName()::: wildcard type impl qualified type name:::return
WildcardTypeImpl#simpleTypeName()::: wildcard type impl simple type name:::return
WildcardTypeImpl#toString()::: wildcard type impl to string:::return->wildcardTypeToString
WildcardTypeImpl#wildcardTypeToString(DocEnv, Type.WildcardType, boolean):::Return the string form of a wildcard type ("?") along with any "extends" or "super" clause:::if->return->TypeMaker->erasure->getTypeName->s->new->StringBuilder->bounds->getExtendsBounds->if->bounds->nonEmpty->s->append->else->getSuperBounds->if->bounds->nonEmpty->s->append->first->foreach->if->s->append->s->TypeMaker->getTypeString->append->return->s->toString
WildcardTypeImpl#getExtendsBounds(Type.WildcardType)::: wildcard type impl get extends bounds:::return->wild->isSuperBound->List->nil->List->of
WildcardTypeImpl#getSuperBounds(Type.WildcardType)::: wildcard type impl get super bounds:::return->wild->isExtendsBound->List->nil->List->of

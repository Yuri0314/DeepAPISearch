CaseInsensitiveMap#get(int)::: Return a list of code point characters (not including the input value)  that can be substituted in a case insensitive match:::return->getMapping
Match#getNumberOfGroups():::Return the number of regular expression groups:::if->throw->new->IllegalStateException->return
Match#getBeginning(int):::Return a start position in the target text matched to specified regular expression group.:::if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->return
Match#getEnd(int):::Return an end position in the target text matched to specified regular expression group.:::if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->return
Match#getCapturedText(int):::Return an substring of the target text matched to specified regular expression group.:::if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->ret->begin->end->if->return->if->REUtil->substring->else->if->substring->else->new->String->return
ParserForXMLSchema#parseCharacterClass(boolean):::Parses a character-class-expression, not a character-class-escape:::this->setContext->this->next->nrange->wasDecoded->base->tok->if->this->read->this->next->Token->createRange->base->addRange->Token->createRange->else->Token->createRange->type->firstloop->while->this->read->if->if->base->subtractRanges->break->c->end->if->switch->tok->this->getTokenForShorthand->mergeRanges->break->this->processCIinCharacterClass->if->break->pstart->tok2->this->processBacksolidus_pP->if->throw->this->ex->tok->mergeRanges->break->this->decodeEscaped->break->this->decodeEscaped->else->if->if->base->subtractRanges->range2->this->parseCharacterClass->tok->subtractRanges->if->this->read->throw->this->ex->break->this->next->if->if->if->throw->this->ex->if->throw->this->ex->if->throw->this->ex->if->this->read->if->this->isSet->tok->addRange->else->addCaseInsensitiveChar->else->this->next->if->this->read->throw->this->ex->if->if->this->isSet->tok->addRange->else->addCaseInsensitiveChar->tok->addRange->else->if->throw->this->ex->else->rangeend->if->if->throw->this->ex->if->throw->this->ex->if->throw->this->ex->else->if->this->decodeEscaped->this->next->if->throw->this->ex->if->this->isSet->tok->addRange->else->addCaseInsensitiveCharRange->if->this->read->throw->this->ex->tok->sortRanges->tok->compactRanges->this->setContext->this->next->return
RangeToken#compactRanges():::this.ranges is sorted.:::DEBUG->if->return->if->this->isCompacted->return->base->target->while->if->else->baseend->while->if->break->if->if->println->else->if->if->println->else->if->if->println->else->throw->new->RuntimeException->if->result->new->intArr->System->arraycopy->this->setCompacted
RangeToken#complementRanges(Token):::for RANGE: Creates complement:::if->throw->new->IllegalArgumentException->tok->tok->sortRanges->tok->compactRanges->len->if->last->if->ret->Token->createRange->new->intArr->wp->if->for->i->if->ret->setCompacted->return
RegexParser#parseRegex():::regex ::= term (`|` term)* term ::= factor+ factor ::= ('^' | '$' | '\A' | '\Z' | '\z' | '\b' | '\B' | '\<' | '\>'            | atom (('*' | '+' | '?' | minmax ) '?'? )?)            | '(?=' regex ')'  | '(?!' regex ')'  | '(?&lt;=' regex ')'  | '(?&lt;!' regex ')' atom ::= char | '.' | range | '(' regex ')' | '(?:' regex ')' | '\' [0-9]          | '\w' | '\W' | '\d' | '\D' | '\s' | '\S' | category-block:::tok->this->parseTerm->parent->while->this->read->this->next->if->Token->createUnion->parent->addChild->tok->this->parseTerm->addChild->return
RegexParser#parseTerm():::term ::= factor+:::ch->this->read->if->return->Token->createEmpty->else->tok->this->parseFactor->concat->while->this->read->if->Token->createConcat->concat->addChild->concat->this->parseFactor->addChild->return
RegexParser#parseFactor():::factor ::= ('^' | '$' | '\A' | '\Z' | '\z' | '\b' | '\B' | '\<' | '\>'            | atom (('*' | '+' | '?' | minmax ) '?'? )?)            | '(?=' regex ')'  | '(?!' regex ')'  | '(?&lt;=' regex ')'  | '(?&lt;!' regex ')'            | '(?#' [^)]* ')' minmax ::= '{' min (',' max?)? '}' min ::= [0-9]+ max ::= [0-9]+:::ch->this->read->tok->switch->return->this->processCaret->return->this->processDollar->return->this->processLookahead->return->this->processNegativelookahead->return->this->processLookbehind->return->this->processNegativelookbehind->this->next->return->Token->createEmpty->switch->return->this->processBacksolidus_A->return->this->processBacksolidus_Z->return->this->processBacksolidus_z->return->this->processBacksolidus_b->return->this->processBacksolidus_B->return->this->processBacksolidus_lt->return->this->processBacksolidus_gt->this->parseAtom->this->read->switch->return->this->processStar->return->this->processPlus->return->this->processQuestion->if->off->min->max->if->charAt->while->charAt->if->throw->ex->else->throw->ex->if->if->throw->ex->else->if->charAt->while->charAt->if->throw->ex->if->throw->ex->else->if->throw->ex->if->this->checkQuestion->Token->createNGClosure->else->Token->createClosure->tok->setMin->tok->setMax->this->next->return
RegexParser#parseAtom():::atom ::= char | '.' | char-class | '(' regex ')' | '(?:' regex ')' | '\' [0-9]          | '\w' | '\W' | '\d' | '\D' | '\s' | '\S' | category-block          | '(?>' regex ')' char ::= '\\' | '\' [efnrt] | bmp-code | character-1:::ch->this->read->tok->switch->return->this->processParen->return->this->processParen2->return->this->processCondition->return->this->processModifiers->return->this->processIndependent->this->next->break->return->this->parseCharacterClass->return->this->parseSetOperations->switch->this->getTokenForShorthand->this->next->return->ch2->this->decodeEscaped->if->Token->createChar->else->Token->REUtil->decomposeToSurrogates->createString->break->return->this->processBacksolidus_c->return->this->processBacksolidus_C->return->this->processBacksolidus_i->return->this->processBacksolidus_I->return->this->processBacksolidus_g->return->this->processBacksolidus_X->return->this->processBackreference->pstart->processBacksolidus_pP->if->throw->this->ex->break->Token->createChar->this->next->break->if->throw->this->ex->Token->createChar->high->this->next->if->REUtil->isHighSurrogate->this->read->REUtil->isLowSurrogate->sur->new->charArr->Token->Token->new->String->createString->createParen->this->next->break->throw->this->ex->return
RegexParser#parseCharacterClass(boolean):::char-class ::= '[' ( '^'? range ','?)+ ']' range ::= '\d' | '\w' | '\s' | category-block | range-char           | range-char '-' range-char range-char ::= '\[' | '\]' | '\\' | '\' [,-efnrtv] | bmp-code | character-2 bmp-code ::= '\' 'u' [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F] [0-9a-fA-F]:::this->setContext->this->next->nrange->base->tok->if->this->read->this->next->if->Token->createNRange->else->Token->createRange->base->addRange->Token->createRange->else->Token->createRange->type->firstloop->while->this->read->if->break->c->end->if->switch->tok->this->getTokenForShorthand->mergeRanges->break->this->processCIinCharacterClass->if->break->pstart->tok2->this->processBacksolidus_pP->if->throw->this->ex->tok->mergeRanges->break->this->decodeEscaped->else->if->nameend->indexOf->if->throw->this->ex->positive->if->charAt->name->substring->range->Token->this->isSet->getRange->if->throw->this->ex->tok->mergeRanges->if->charAt->throw->this->ex->else->if->if->if->Token->complementRanges->else->base->subtractRanges->range2->this->parseCharacterClass->tok->subtractRanges->if->this->read->throw->this->ex->break->this->next->if->if->this->read->if->this->isSet->tok->addRange->else->addCaseInsensitiveChar->else->if->throw->this->ex->else->this->next->if->this->read->throw->this->ex->if->if->this->isSet->tok->addRange->else->addCaseInsensitiveChar->tok->addRange->else->rangeend->if->this->decodeEscaped->this->next->if->throw->this->ex->if->this->isSet->tok->addRange->else->addCaseInsensitiveCharRange->if->this->isSet->this->read->this->next->if->this->read->throw->this->ex->if->base->subtractRanges->tok->sortRanges->tok->compactRanges->this->setContext->this->next->return
RegexParser#parseSetOperations():::'(?[' ..:::tok->this->parseCharacterClass->type->while->this->read->ch->if->this->next->if->this->read->throw->ex->t2->this->parseCharacterClass->if->tok->mergeRanges->else->if->tok->subtractRanges->else->if->tok->intersectRanges->else->throw->new->RuntimeException->else->throw->ex->this->next->return
RegularExpression#matches(char[]):::Checks whether the <var>target</var> text contains this pattern or not.:::return->this->matches
RegularExpression#matches(char[], int, int):::Checks whether the <var>target</var> text contains this pattern in specified range or not.:::return->this->matches
RegularExpression#matches(char[], Match):::Checks whether the <var>target</var> text contains this pattern or not.:::return->this->matches
RegularExpression#matches(char[], int, int, Match):::Checks whether the <var>target</var> text contains this pattern in specified range or not.:::synchronized->if->this->prepare->if->new->Context->con->synchronized->new->Context->con->reset->if->match->setNumberOfGroups->match->setSource->else->if->new->Match->match->setNumberOfGroups->if->RegularExpression->isSet->matchEnd->this->match->if->if->setBeginning->setEnd->con->setInUse->return->return->if->o->matches->if->if->setBeginning->length->setEnd->con->setInUse->return->con->setInUse->return->if->o->matches->if->con->setInUse->return->limit->matchStart->matchEnd->if->getChild->if->isSet->this->match->else->previousIsEOL->for->else->if->range->for->else->for->if->if->setBeginning->setEnd->con->setInUse->return->else->con->setInUse->return
RegularExpression#matches(String):::Checks whether the <var>target</var> text contains this pattern or not.:::return->this->target->length->matches
RegularExpression#matches(String, int, int):::Checks whether the <var>target</var> text contains this pattern in specified range or not.:::return->this->matches
RegularExpression#matches(String, Match):::Checks whether the <var>target</var> text contains this pattern or not.:::return->this->target->length->matches
RegularExpression#matches(String, int, int, Match):::Checks whether the <var>target</var> text contains this pattern in specified range or not.:::synchronized->if->this->prepare->if->new->Context->con->synchronized->new->Context->con->reset->if->match->setNumberOfGroups->match->setSource->else->if->new->Match->match->setNumberOfGroups->if->RegularExpression->isSet->if->println->matchEnd->this->match->if->println->println->if->if->setBeginning->setEnd->con->setInUse->return->return->if->o->matches->if->if->setBeginning->length->setEnd->con->setInUse->return->con->setInUse->return->if->o->matches->if->con->setInUse->return->limit->matchStart->matchEnd->if->getChild->if->isSet->this->match->else->previousIsEOL->for->else->if->range->for->else->for->if->if->setBeginning->setEnd->con->setInUse->return->else->con->setInUse->return
RegularExpression#matches(CharacterIterator):::Checks whether the <var>target</var> text contains this pattern or not.:::return->this->matches
RegularExpression#matches(CharacterIterator, Match):::Checks whether the <var>target</var> text contains this pattern or not.:::start->target->getBeginIndex->end->target->getEndIndex->synchronized->if->this->prepare->if->new->Context->con->synchronized->new->Context->con->reset->if->match->setNumberOfGroups->match->setSource->else->if->new->Match->match->setNumberOfGroups->if->RegularExpression->isSet->matchEnd->this->match->if->if->setBeginning->setEnd->con->setInUse->return->return->if->o->matches->if->if->setBeginning->length->setEnd->con->setInUse->return->con->setInUse->return->if->o->matches->if->con->setInUse->return->limit->matchStart->matchEnd->if->getChild->if->isSet->this->match->else->previousIsEOL->for->else->if->range->for->else->for->if->if->setBeginning->setEnd->con->setInUse->return->else->con->setInUse->return
RegularExpression#prepare():::Prepares for matching:::if->this->compile->if->println->getMinLength->if->isSet->isSet->firstChar->Token->createRange->fresult->analyzeFirstCharacter->if->firstChar->compactRanges->if->println->if->if->print->if->getString->else->if->getData->REUtil->getData->decomposeToSurrogates->else->ac->new->charArr->getData->new->String->isSet->new->BMPattern->else->if->isSet->isSet->container->new->Token.FixedStringContainer->findFixedString->getString->if->length->if->isSet->new->BMPattern->if->length->REUtil->createOptionString->println->print->REUtil->dumpString
RegularExpression#toString():::Represents this instence in String.:::return->toString
RegularExpression#getOptions():::Returns a option string:::return->REUtil->createOptionString
RegularExpression#equals(Object)::: Return true if patterns are the same and the options are equivalent.:::if->return->if->return->r->return->equals
RegularExpression#getNumberOfGroups():::Return the number of regular expression groups:::return
REUtil#main(String[]):::Sample entry:::pattern->try->options->target->if->println->System->exit->for->i->reg->new->RegularExpression->println->match->new->Match->reg->matches->for->i->match->getNumberOfGroups->catch->if->pe->printStackTrace->else->pe->getMessage->println->indent->println->loc->pe->getLocation->if->print->for->i->println->e->printStackTrace->finally
REUtil#createRegex(String, String):::Creates a RegularExpression instance:::re->intOptions->REUtil->parseOptions->synchronized->i->for->if->if->System->arraycopy->else->new->RegularExpression->System->arraycopy->return
Token#size():::A number of children.:::return
Token#getMinLength():::How many characters are needed?:::switch->sum->for->i->this->size->return->if->this->size->return->ret->this->getChild->getMinLength->for->i->this->size->return->if->this->getMin->return->this->getMin->this->getChild->getMinLength->return->return->return->return->this->getChild->getMinLength->return->return->this->getString->length->return->throw->new->RuntimeException
Token#registerNonXS(String):::This method is called by only getRange():::add

Attrs#setLength(char):::Sets up the number of attributes and ensure the capacity of the attribute string array.:::if->new->StringArr
Attrs#getLength():::Return the number of attributes in the list:::return
Attrs#getURI(int):::Look up an attribute's Namespace URI by index.:::return
Attrs#getLocalName(int):::Look up an attribute's local name by index.:::return
Attrs#getQName(int):::Look up an attribute's XML 1.0 qualified name by index.:::if->return->return
Attrs#getType(int):::Look up an attribute's type by index:::return
Attrs#getValue(int):::Look up an attribute's value by index:::return
Attrs#getIndex(String, String):::Look up the index of an attribute by Namespace name.:::len->for->idx->return
Attrs#getIndex(String):::Look up the index of an attribute by XML 1.0 qualified name.:::len->for->idx->return
Attrs#getType(String, String):::Look up an attribute's type by Namespace name:::idx->getIndex->return
Attrs#getType(String):::Look up an attribute's type by XML 1.0 qualified name:::idx->getIndex->return
Attrs#getValue(String, String):::Look up an attribute's value by Namespace name:::idx->getIndex->return
Attrs#getValue(String):::Look up an attribute's value by XML 1.0 qualified name:::idx->getIndex->return
Attrs#isDeclared(int):::Returns false unless the attribute was declared in the DTD:::if->throw->new->ArrayIndexOutOfBoundsException->return
Attrs#isDeclared(String):::Returns false unless the attribute was declared in the DTD:::idx->getIndex->if->throw->new->IllegalArgumentException->return
Attrs#isDeclared(String, String):::Returns false unless the attribute was declared in the DTD:::idx->getIndex->if->throw->new->IllegalArgumentException->return
Attrs#isSpecified(int):::Returns true unless the attribute value was provided by DTD defaulting.:::if->throw->new->ArrayIndexOutOfBoundsException->str->return->str->charAt
Attrs#isSpecified(String, String):::Returns true unless the attribute value was provided by DTD defaulting:::idx->getIndex->if->throw->new->IllegalArgumentException->str->return->str->charAt
Attrs#isSpecified(String):::Returns true unless the attribute value was provided by DTD defaulting.:::idx->getIndex->if->throw->new->IllegalArgumentException->str->return->str->charAt
Pair#qname():::Creates a qualified name string from qualified name.:::return->new->String
Pair#local():::Creates a local name string from qualified name.:::if->return->new->String->return->new->String
Pair#pref():::Creates a prefix string from qualified name.:::if->return->new->String->return
Pair#eqpref(char[]):::Compares two qualified name prefixes.:::if->len->for->i->return->return
Pair#eqname(char[]):::Compares two qualified names.:::len->if->for->i->return->return
Parser#init():::Initializes parser's internals:::new->HashMap<>->new->HashMap<>
Parser#cleanup():::Cleans up parser internal resources.:::while->while->if->del->del->del->while->del->while->del->while->pop->if->try->close->catch->finally
Parser#step():::Processes a portion of document:::st->while->ch->getch->switch->if->bkch->break->switch->getch->if->panic->bname->chars->if->for->i->else->panic->if->wsskip->panic->getch->break->getch->bkch->switch->comm->break->cdat->break->dtd->break->break->pi->break->bkch->pair->qname->mElm->local->elm->find->att->pair->attr->del->rslv->switch->wsskip->getch->break->getch->if->getch->panic->break->panic->break->break->switch->bappend->break->if->getch->bkch->bappend->break->bkch->bflash_ws->break->bkch->break->break->switch->if->if->ent->bkch->setch->bflash->else->skippedEnt->break->bkch->bflash->break->if->getch->bkch->bappend->break->panic->bappend->break->break->panic->return
Parser#name(boolean):::Reads a xml name:::bname->return->new->String
Parser#qname(boolean):::Reads a qualified xml name:::bname->chars->new->charArr->System->arraycopy->return
Parser#eqstr(char):::Reads an attribute value:::if->wsskip->if->getch->panic->bqstr->return->new->String
Parser#wsskip():::Skips xml white space characters:::ch->while->getch->if->if->break->else->break->return
Parser#docType(String, String, String):::Reports document type.:::
Parser#startInternalSub():::Reports the start of DTD internal subset.:::
Parser#comm(char[], int):::Reports a comment.:::
Parser#pi(String, String):::Reports a processing instruction.:::
Parser#newPrefix():::Reports new namespace prefix:::
Parser#skippedEnt(String):::Reports skipped entity name.:::
Parser#resolveEnt(String, String, String):::Returns an InputSource for specified entity or null.:::
Parser#notDecl(String, String, String):::Reports notation declaration.:::
Parser#unparsedEntDecl(String, String, String, String):::Reports unparsed entity name.:::
Parser#panic(String):::Notifies the handler about fatal parsing error.:::
Parser#bflash():::Reports characters and empties the parser's buffer:::
Parser#bflash_ws():::Reports white space characters and empties the parser's buffer:::
Parser#setinp(InputSource):::Sets up a new input source on the top of the input stack:::reader->if->if->is->getCharacterStream->is->getCharacterStream->xml->else->if->is->getByteStream->expenc->if->is->getEncoding->is->getEncoding->toUpperCase->if->expenc->equals->is->getByteStream->bom->else->is->getByteStream->enc->xml->else->is->getByteStream->bom->if->is->getByteStream->utf16->if->is->getByteStream->enc->xml->if->expenc->equals->if->expenc->startsWith->panic->is->getByteStream->enc->else->xml->else->panic->is->getPublicId->is->getSystemId
Parser#push(Input):::Sets up current input on the top of the input stack.:::
Parser#pop():::Restores previous input on the top of the input stack.:::if->try->close->catch->finally->if->else
Parser#chtyp(char):::Maps a character to its type:::if->return->return
Parser#getch():::Retrives the next character in the document.:::if->if->pop->return->getch->Num->read->if->if->pop->return->getch->else->else->return
Parser#bkch():::Puts back the last read character:::if->panic
Parser#setch(char):::Sets the current character.:::
Parser#find(Pair, char[]):::Finds a pair in the pair chain by a qualified name.:::for->pair->return
Parser#pair(Pair):::Provedes an instance of a pair.:::pair->if->else->new->Pair->return
Parser#del(Pair):::Deletes an instance of a pair.:::next->return
ParserSAX#getContentHandler():::Return the current content handler.:::return
ParserSAX#setContentHandler(ContentHandler):::Allow an application to register a content event handler:::if->throw->new->NullPointerException
ParserSAX#getDTDHandler():::Return the current DTD handler.:::return
ParserSAX#setDTDHandler(DTDHandler):::Allow an application to register a DTD event handler:::if->throw->new->NullPointerException
ParserSAX#getErrorHandler():::Return the current error handler.:::return
ParserSAX#setErrorHandler(ErrorHandler):::Allow an application to register an error event handler:::if->throw->new->NullPointerException
ParserSAX#getEntityResolver():::Return the current entity resolver.:::return
ParserSAX#setEntityResolver(EntityResolver):::Allow an application to register an entity resolver:::if->throw->new->NullPointerException
ParserSAX#getPublicId():::Return the public identifier for the current document event:::return
ParserSAX#getSystemId():::Return the system identifier for the current document event:::return
ParserSAX#getLineNumber():::Return the line number where the current document event ends.:::return
ParserSAX#getColumnNumber():::Return the column number where the current document event ends.:::return
ParserSAX#parse(String):::Parse an XML document from a system identifier (URI):::new->InputSource->parse
ParserSAX#parse(InputSource):::Parse an XML document:::if->throw->new->IllegalArgumentException->new->Input->try->setinp->catch->throw->throw->throw->e->toString->panic->finally->parse
ParserSAX#parse(InputStream, DefaultHandler):::Parse the content of the given java.io.InputStream instance as XML using the specified org.xml.sax.helpers.DefaultHandler.:::if->throw->new->IllegalArgumentException->new->InputSource->parse
ParserSAX#parse(InputSource, DefaultHandler):::Parse the content given org.xml.sax.InputSource as XML using the specified org.xml.sax.helpers.DefaultHandler.:::if->throw->new->IllegalArgumentException->new->Input->try->setinp->catch->throw->e->toString->panic->finally->parse
ParserSAX#docType(String, String, String):::Reports document type.:::mHandDtd->startDTD
ParserSAX#startInternalSub():::Reports the start of DTD internal subset.:::mHandDtd->startInternalSub
ParserSAX#comm(char[], int):::Reports a comment.:::
ParserSAX#pi(String, String):::Reports a processing instruction.:::mHandCont->processingInstruction
ParserSAX#newPrefix():::Reports new namespace prefix:::mHandCont->startPrefixMapping
ParserSAX#skippedEnt(String):::Reports skipped entity name.:::mHandCont->skippedEntity
ParserSAX#resolveEnt(String, String, String):::Returns an InputSource for specified entity or null.:::return->mHandEnt->resolveEntity
ParserSAX#notDecl(String, String, String):::Reports notation declaration.:::mHandDtd->notationDecl
ParserSAX#unparsedEntDecl(String, String, String, String):::Reports unparsed entity name.:::mHandDtd->unparsedEntityDecl
ParserSAX#panic(String):::Notifies the handler about fatal parsing error.:::spe->new->SAXParseException->mHandErr->fatalError->throw
ParserSAX#bflash():::Reports characters and empties the parser's buffer:::if->mHandCont->characters
ParserSAX#bflash_ws():::Reports white space characters and empties the parser's buffer:::if->mHandCont->characters
ReaderUTF16#read(char[], int, int):::Reads characters into a portion of an array.:::num->val->if->while->if->is->read->return->is->read->else->while->if->is->read->return->is->read->return
ReaderUTF16#read():::Reads a single character.:::val->if->is->read->return->if->is->read->else->is->read->return
ReaderUTF16#close():::Closes the stream.:::is->close
ReaderUTF8#read(char[], int, int):::Reads characters into a portion of an array.:::num->val->while->if->is->read->return->switch->is->read->break->is->read->is->read->break->throw->new->UnsupportedEncodingException->break->return
ReaderUTF8#read():::Reads a single character.:::val->if->is->read->return->switch->is->read->break->is->read->is->read->break->throw->new->UnsupportedEncodingException->break->return
ReaderUTF8#close():::Closes the stream.:::is->close
SAXParserImpl#getXMLReader():::Returns the org.xml.sax.XMLReader that is encapsulated by the implementation of this class.:::return
SAXParserImpl#isNamespaceAware():::Indicates whether or not this parser is configured to understand namespaces.:::return
SAXParserImpl#isValidating():::Indicates whether or not this parser is configured to validate XML documents.:::return
SAXParserImpl#parse(InputStream, DefaultHandler):::Parse the content of the given java.io.InputStream instance as XML using the specified org.xml.sax.helpers.DefaultHandler.:::parser->parse
SAXParserImpl#parse(InputSource, DefaultHandler):::Parse the content given org.xml.sax.InputSource as XML using the specified org.xml.sax.helpers.DefaultHandler.:::parser->parse
XMLStreamWriterImpl#writeStartDocument():::Write the XML Declaration:::_charset->name->writeStartDocument
XMLStreamWriterImpl#writeStartDocument(String):::Write the XML Declaration:::_charset->name->writeStartDocument
XMLStreamWriterImpl#writeStartDocument(String, String):::Write the XML Declaration:::writeStartDocument
XMLStreamWriterImpl#writeStartDocument(String, String, String):::Write the XML Declaration:::if->throw->new->XMLStreamException->enc->if->_charset->name->else->try->getCharset->catch->throw->new->XMLStreamException->finally->if->_writer->write->_writer->write->_writer->write->if->_writer->write->_writer->write->_writer->write->if->_writer->write->_writer->write->_writer->write->_writer->write->writeLineSeparator
XMLStreamWriterImpl#writeDTD(String):::Write a DTD section:::if->_currentEle->getState->closeStartTag->_writer->write->writeLineSeparator
XMLStreamWriterImpl#writeStartElement(String):::Writes a start tag to the output.:::if->localName->length->throw->new->XMLStreamException->if->_currentEle->getState->closeStartTag->new->Element->openStartTag->_writer->write
XMLStreamWriterImpl#writeEmptyElement(String):::Writes an empty element tag to the output:::if->_currentEle->getState->closeStartTag->new->Element->openStartTag->_writer->write
XMLStreamWriterImpl#writeAttribute(String, String):::Writes an attribute to the output stream without a prefix.:::if->_currentEle->getState->throw->new->XMLStreamException->_writer->write->_writer->write->_writer->write->writeXMLContent->_writer->write
XMLStreamWriterImpl#close():::Close this XMLStreamWriter by closing underlying writer.:::if->_writer->close
XMLStreamWriterImpl#flush():::Flush this XMLStreamWriter by flushing underlying writer.:::if->_writer->flush
XMLStreamWriterImpl#setDoIndent(boolean):::Set the flag to indicate if the writer should add line separator:::
XMLStreamWriterImpl.Element#getState():::get the state of the element:::return
XMLStreamWriterImpl.Element#setState(int):::Set the state of the element:::

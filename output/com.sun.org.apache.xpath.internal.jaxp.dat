JAXPExtensionsProvider#elementAvailable(String, String):::Is the extension element available?:::return
JAXPExtensionsProvider#extFunction(String, String, List, Object):::Execute the extension function.:::try->if->fmsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->NullPointerException->myQName->new->QName->if->fmsg->XSLMessages->new->ObjectArr->myQName->toString->createXPATHMessage->throw->new->XPathFunctionException->arity->argVec->size->xpathFunction->resolver->resolveFunction->argList->new->ArrayList<>->for->i->return->xpathFunction->evaluate->catch->throw->new->com.sun.org.apache.xml.internal.utils.WrappedRuntimeException->throw->new->javax.xml.transform.TransformerException->finally
JAXPExtensionsProvider#extFunction(FuncExtFunction, List):::Execute the extension function.:::try->namespace->extFunction->getNamespace->functionName->extFunction->getFunctionName->arity->extFunction->getArgCount->myQName->new->javax.xml.namespace.QName->if->fmsg->XSLMessages->new->ObjectArr->myQName->toString->createXPATHMessage->throw->new->XPathFunctionException->xpathFunction->resolver->resolveFunction->argList->new->ArrayList<>->for->i->return->xpathFunction->evaluate->catch->throw->new->com.sun.org.apache.xml.internal.utils.WrappedRuntimeException->throw->new->javax.xml.transform.TransformerException->finally
JAXPPrefixResolver#getBaseIdentifier():::Return the base identifier.:::return
JAXPPrefixResolver#getNamespaceForPrefix(String, org.w3c.dom.Node):::Given a prefix and a Context Node, get the corresponding namespace:::parent->namespace->if->prefix->equals->else->type->while->parent->getNodeType->if->nnm->parent->getAttributes->for->i->nnm->getLength->parent->getParentNode->return
XPathFactoryImpl#isObjectModelSupported(String):::Is specified object model supported by this XPathFactory?:::if->fmsg->XSLMessages->new->ObjectArr->this->getClass->getName->createXPATHMessage->throw->new->NullPointerException->if->objectModel->length->fmsg->XSLMessages->new->ObjectArr->this->getClass->getName->createXPATHMessage->throw->new->IllegalArgumentException->if->objectModel->equals->return->return
XPathFactoryImpl#newXPath():::Returns a new XPath object using the underlying object model determined when the factory was instantiated.:::return->new->com.sun.org.apache.xpath.internal.jaxp.XPathImpl
XPathFactoryImpl#setFeature(String, boolean):::Set a feature for this XPathFactory and XPaths created by this factory.   Feature names are fully qualified java.net.URIs:::if->fmsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->NullPointerException->if->name->equals->if->fmsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->XPathFactoryConfigurationException->if->_featureManager->setFeature->return->if->name->equals->if->return->if->_featureManager->setFeature->return->fmsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->XPathFactoryConfigurationException
XPathFactoryImpl#getFeature(String):::Get the state of the named feature.   Feature names are fully qualified java.net.URIs:::if->fmsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->NullPointerException->if->name->equals->return->index->_featureManager->getIndex->if->return->_featureManager->getFeature->fmsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->XPathFactoryConfigurationException
XPathFactoryImpl#setXPathFunctionResolver(XPathFunctionResolver):::Establish a default function resolver.  Any XPath objects constructed from this factory will use the specified resolver by default.  A NullPointerException is thrown if resolver is null.:::if->fmsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->NullPointerException
XPathFactoryImpl#setXPathVariableResolver(XPathVariableResolver):::Establish a default variable resolver.  Any XPath objects constructed from this factory will use the specified resolver by default.  A NullPointerException is thrown if resolver is null.:::if->fmsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->NullPointerException
XPathImplUtil#eval(Object, com.sun.org.apache.xpath.internal.XPath):::Evaluate an XPath context using the internal XPath engine:::xpathSupport->if->xpath->getExpression->throw->XSLMessages->new->ObjectArr->createXPATHMessage->new->TransformerException->if->jep->new->JAXPExtensionsProvider->new->com.sun.org.apache.xpath.internal.XPathContext->else->new->com.sun.org.apache.xpath.internal.XPathContext->xpathSupport->new->JAXPVariableStack->setVarStack->xobj->contextNode->if->xpath->execute->else->xpath->execute->return
XPathImplUtil#getDocument(InputSource):::Parse the input source and return a Document.:::requireNonNull->try->dbf->JdkXmlUtils->getDOMFactory->return->dbf->newDocumentBuilder->parse->catch->throw->new->XPathExpressionException->finally
XPathImplUtil#getResultAsType(XObject, QName):::Get result depending on the QName type defined in XPathConstants:::if->returnType->equals->return->resultObject->str->if->returnType->equals->return->resultObject->num->if->returnType->equals->return->resultObject->bool->if->returnType->equals->return->resultObject->nodelist->if->returnType->equals->ni->resultObject->nodeset->return->ni->nextNode->fmsg->XSLMessages->new->ObjectArr->returnType->toString->createXPATHMessage->throw->new->IllegalArgumentException
XPathImplUtil#getXPathResult(XObject, Class):::Construct an XPathExpressionResult object based on the result of the evaluation and cast to the specified class type.:::resultType->resultObject->getType->switch->return->type->new->XPathResultImpl<>->cast->return->type->new->XPathResultImpl<>->cast->return->type->new->XPathResultImpl<>->cast->return->type->new->XPathResultImpl<>->cast->return->type->new->XPathResultImpl<>->cast->return
XPathImplUtil#isSupportedClassType(Class):::Check whether or not the specified type is supported:::requireNonNull->if->type->isAssignableFrom->type->isAssignableFrom->type->isAssignableFrom->type->isAssignableFrom->type->isAssignableFrom->type->isAssignableFrom->type->isAssignableFrom->type->isAssignableFrom->return->fmsg->XSLMessages->new->ObjectArr->type->toString->createXPATHMessage->throw->new->IllegalArgumentException
XPathImplUtil#isSupported(QName):::Check if the requested returnType is supported.:::requireNonNull->if->returnType->equals->returnType->equals->returnType->equals->returnType->equals->returnType->equals->return->fmsg->XSLMessages->new->ObjectArr->returnType->toString->createXPATHMessage->throw->new->IllegalArgumentException
XPathImplUtil#requireNonNull(T, String):::Checks that the specified parameter is not null.:::if->fmsg->XSLMessages->new->ObjectArr->createXPATHMessage->throw->new->NullPointerException
XPathResultImpl#type():::Return the result type as an enum specified by XPathResultType:::return
XPathResultImpl#value():::Returns the value of the result as the type &lt;T&gt; specified for the class.:::Objects->requireNonNull->try->return->getValue->catch->throw->new->RuntimeException->finally
XPathResultImpl#getValue(XObject, Class):::Read the internal result object and return the value in accordance with the type specified.:::Objects->requireNonNull->if->type->isAssignableFrom->return->type->new->XPathResultImpl<T>->cast->resultType->classToInternalType->switch->return->type->resultObject->bool->cast->if->isAssignableFrom->return->type->resultObject->num->cast->else->if->isAssignableFrom->return->type->resultObject->num->cast->else->if->isAssignableFrom->return->type->resultObject->num->cast->break->return->type->resultObject->str->cast->nodeSet->resultObject->nodelist->new->XPathNodesImpl->return->type->cast->ni->resultObject->nodeset->return->type->ni->nextNode->cast->return
XPathResultImpl#classToInternalType(Class):::Map the specified class type to the internal result type:::if->type->isAssignableFrom->return->else->if->isAssignableFrom->return->else->if->type->isAssignableFrom->return->else->if->type->isAssignableFrom->return->else->if->type->isAssignableFrom->return->return

jdk.tools.jaotc.collect.ClassSearch#addProvider(SourceProvider)->void::: class search add provider
jdk.tools.jaotc.collect.ClassSearch#search(List, SearchPath)->List::: class search search
jdk.tools.jaotc.collect.ClassSearch#search(List, SearchPath, BiConsumer)->List::: class search search
jdk.tools.jaotc.collect.ClassSearch#makeList(String, String)->List::: class search make list
jdk.tools.jaotc.collect.ClassSource#pathIsClassFile(Path)->boolean::: class source path is class file
jdk.tools.jaotc.collect.ClassSource#stripRoot(Path)->String::: class source strip root
jdk.tools.jaotc.collect.ClassSource#makeClassName(Path)->String::: class source make class name
jdk.tools.jaotc.collect.ClassSource#eachClass(BiConsumer)->void::: class source each class
jdk.tools.jaotc.collect.FileSupport#exists(Path)->boolean::: file support exists
jdk.tools.jaotc.collect.FileSupport#isDirectory(Path)->boolean::: file support is directory
jdk.tools.jaotc.collect.FileSupport#createClassLoader(Path, ClassLoader)->ClassLoader::: file support create class loader
jdk.tools.jaotc.collect.FileSupport#createClassLoader(Path)->ClassLoader::: file support create class loader
jdk.tools.jaotc.collect.FileSupport#getJarFileSystemRoot(Path)->Path::: file support get jar file system root
jdk.tools.jaotc.collect.FileSupport#isAbsolute(Path)->boolean::: file support is absolute
jdk.tools.jaotc.collect.FileSupport#getSubDirectory(FileSystem, Path, Path)->Path::: file support get sub directory
jdk.tools.jaotc.collect.FileSystemFinder#visitFile(Path, BasicFileAttributes)->FileVisitResult::: file system finder visit file
jdk.tools.jaotc.collect.FileSystemFinder#preVisitDirectory(Path, BasicFileAttributes)->FileVisitResult::: file system finder pre visit directory
jdk.tools.jaotc.collect.FileSystemFinder#iterator()->Iterator::: file system finder iterator
jdk.tools.jaotc.collect.SearchFor#isUnknown()->boolean::: search for is unknown
jdk.tools.jaotc.collect.SearchFor#getType()->String::: search for get type
jdk.tools.jaotc.collect.SearchFor#getName()->String::: search for get name
jdk.tools.jaotc.collect.SearchFor#toString()->String::: search for to string
jdk.tools.jaotc.collect.SearchPath#find(FileSystem, Path, String...)->Path::: search path find
jdk.tools.jaotc.collect.SearchPath#add(String...)->void::: search path add
jdk.tools.jaotc.collect.SourceProvider#findSource(String, SearchPath)->ClassSource::: source provider find source
jdk.tools.jaotc.collect.SourceProvider#supports(String)->boolean::: source provider supports

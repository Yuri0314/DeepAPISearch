ClassSearch#addProvider(SourceProvider)::: class search add provider:::providers->add
ClassSearch#search(List, SearchPath)::: class search search:::return->throw->new->InternalError->search
ClassSearch#search(List, SearchPath, BiConsumer)::: class search search:::loaded->new->ArrayList<>->sources->new->ArrayList<>->foreach->sources->findSource->add->foreach->if->source->x->loadClass->if->loaded->add->eachClass->return
ClassSearch#loadClass(String, ClassLoader, BiConsumer)::: class search load class:::try->clzz->loader->loadClass->return->new->LoadedClass->catch->classLoadingErrorsHandler->accept->return->finally
ClassSearch#findSource(SearchFor, SearchPath, BiConsumer)::: class search find source:::found->foreach->if->searchFor->isUnknown->provider->searchFor->getType->supports->continue->source->try->provider->searchFor->getName->findSource->catch->classLoadingErrorsHandler->searchFor->getName->accept->finally->if->if->throw->new->InternalError->if->classLoadingErrorsHandler->searchFor->getName->searchFor->getType->searchFor->getName->new->InternalError->accept->return
ClassSearch#makeList(String, String)::: class search make list:::list->new->ArrayList<>->elements->argument->split->foreach->list->new->SearchFor->add->return
ClassSource#pathIsClassFile(Path)::: class source path is class file:::fileName->entry->getFileName->toString->return->fileName->endsWith->fileName->endsWith
ClassSource#stripRoot(Path)::: class source strip root:::if->path->getRoot->root->path->getRoot->toString->filename->path->toString->root->length->substring->separator->path->getFileSystem->getSeparator->while->filename->startsWith->filename->separator->length->substring->return->return->path->toString
ClassSource#makeClassName(Path)::: class source make class name:::fileName->path->toString->if->fileName->endsWith->throw->new->IllegalArgumentException->stripRoot->className->fileName->fileName->length->length->substring->className->path->getFileSystem->getSeparator->replace->return
ClassSource#eachClass(BiConsumer)::: class source each class:::
FileSupport#exists(Path)::: file support exists:::return->Files->exists
FileSupport#isDirectory(Path)::: file support is directory:::return->Files->isDirectory
FileSupport#makeJarFileSystem(Path)::: file support make jar file system:::try->return->FileSystems->makeJarFileURI->new->HashMap<>->newFileSystem->catch->throw->new->InternalError->finally
FileSupport#makeJarFileURI(Path)::: file support make jar file i:::try->name->path->toAbsolutePath->toString->name->replace->return->new->URI->catch->throw->new->InternalError->finally
FileSupport#createClassLoader(Path, ClassLoader)::: file support create class loader:::try->return->URLClassLoader->buildUrls->newInstance->catch->throw->new->InternalError->finally
FileSupport#createClassLoader(Path)::: file support create class loader:::return->URLClassLoader->buildUrls->newInstance
FileSupport#buildUrls(Path)::: file support build urls:::return->new->URLArr->path->toUri->toURL
FileSupport#getJarFileSystemRoot(Path)::: file support get jar file system root:::fileSystem->makeJarFileSystem->return->fileSystem->getPath
FileSupport#isAbsolute(Path)::: file support is absolute:::return->entry->isAbsolute
FileSupport#getSubDirectory(FileSystem, Path, Path)::: file support get sub directory:::paths->fileSystem->provider->newDirectoryStream->foreach->relative->root->relativize->if->relative->equals->return->return
FileSystemFinder#find(Path):::Compares the glob pattern against the file name.:::name->file->getFileName->if->filter->matches->fileNames->add
FileSystemFinder#visitFile(Path, BasicFileAttributes)::: file system finder visit file:::find->return
FileSystemFinder#preVisitDirectory(Path, BasicFileAttributes)::: file system finder pre visit directory:::find->return
FileSystemFinder#iterator()::: file system finder iterator:::return->fileNames->iterator
SearchFor#isUnknown()::: search for is unknown:::return->equals
SearchFor#getType()::: search for get type:::return
SearchFor#getName()::: search for get name:::return
SearchFor#toString()::: search for to string:::return
SearchPath#find(FileSystem, Path, String...)::: search path find:::if->isAbsolute->if->exists->return->return->if->exists->return->foreach->newPath->fileSystem->entry->toString->getPath->if->exists->return->foreach->newPath->fileSystem->searchPath->toString->entry->toString->getPath->if->exists->return->return
SearchPath#isAbsolute(Path)::: search path is absolute:::return->fileSupport->isAbsolute
SearchPath#exists(Path)::: search path exists:::return->fileSupport->exists
SearchPath#add(String...)::: search path add:::foreach->path->Paths->get->searchPaths->add
SourceProvider#findSource(String, SearchPath)::: source provider find source:::
SourceProvider#supports(String)::: source provider supports:::

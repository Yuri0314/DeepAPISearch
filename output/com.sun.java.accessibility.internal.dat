AccessBridge#isSysWow()::: access bridge is sys wow:::
AccessBridge.dllRunner#run():::dll runner run:::runDLL
AccessBridge.shutdownHook#run():::shutdown hook run:::debugString->javaShutdown
AccessBridge#initAccessibleRoleMap()::: access bridge init accessible role map:::try->clAccessibleRole->Class->forName->if->roleUnknown->fields->clAccessibleRole->getFields->i->for->catch->finally->extendedVirtualNameSearchRoles->add->try->extendedVirtualNameSearchRoles->add->catch->finally->extendedVirtualNameSearchRoles->add->extendedVirtualNameSearchRoles->add->extendedVirtualNameSearchRoles->add->try->extendedVirtualNameSearchRoles->add->catch->finally->extendedVirtualNameSearchRoles->add->extendedVirtualNameSearchRoles->add->extendedVirtualNameSearchRoles->add->noExtendedVirtualNameSearchParentRoles->add->noExtendedVirtualNameSearchParentRoles->add
AccessBridge#runDLL():::start the AccessBridge DLL running in its own thread:::
AccessBridge#sendDebugString(String):::debugging output (goes to OutputDebugStr()):::
AccessBridge#debugString(String):::debugging output (goes to OutputDebugStr()):::sendDebugString
AccessBridge#decrementReference(Object):::decrement the reference to the object (called by native code):::references->decrement
AccessBridge#getJavaVersionProperty():::get the java.version property from the JVM:::s->System->getProperty->if->references->increment->return->return
AccessBridge#jawtGetNativeWindowHandleFromComponent(Component)::: access bridge jawt get native window handle from component:::
AccessBridge#jawtGetComponentFromNativeWindowHandle(int)::: access bridge jawt get component from native window handle:::
AccessBridge#initHWNDcalls():::map an HWND to an AWT Component:::integerParemter->new->Class<?>Arr->componentParemter->new->Class<?>Arr->try->Class->forName->catch->e->toString->debugString->finally->Toolkit->getDefaultToolkit->return
AccessBridge.NativeWindowHandler#getAccessibleFromNativeWindowHandle(int)::: native window handler get accessible from native window handle:::
AccessBridge#registerVirtualFrame(Accessible, Integer)::: access bridge register virtual frame:::if->ac->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->windowHandleToContextMap->put->contextToWindowHandleMap->put
AccessBridge#revokeVirtualFrame(Accessible, Integer)::: access bridge revoke virtual frame:::ac->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->windowHandleToContextMap->remove->contextToWindowHandleMap->remove
AccessBridge#addNativeWindowHandler(NativeWindowHandler)::: access bridge add native window handler:::if->throw->new->IllegalArgumentException->nativeWindowHandlers->addElement
AccessBridge#removeNativeWindowHandler(NativeWindowHandler)::: access bridge remove native window handler:::if->throw->new->IllegalArgumentException->return->nativeWindowHandlers->removeElement
AccessBridge#isJavaWindow(int):::verifies that a native window handle is a Java window:::ac->getContextFromNativeWindowHandle->if->saveContextToWindowHandleMapping->return->return
AccessBridge#saveContextToWindowHandleMapping(AccessibleContext, int)::: access bridge save context to window handle mapping:::debugString->if->return->if->contextToWindowHandleMap->containsKey->debugString->contextToWindowHandleMap->put
AccessBridge#getContextFromNativeWindowHandle(int):::maps a native window handle to an Accessible Context:::ac->windowHandleToContextMap->get->if->saveContextToWindowHandleMapping->return->numHandlers->nativeWindowHandlers->size->for->i->return
AccessBridge#getNativeWindowHandleFromContext(AccessibleContext):::maps an AccessibleContext to a native window handle     returns 0 on error:::debugString->try->return->contextToWindowHandleMap->get->catch->return->finally
AccessBridge.DefaultNativeWindowHandler#getAccessibleFromNativeWindowHandle(int)::: default native window handler get accessible from native window handle:::c->jawtGetComponentFromNativeWindowHandle->if->ac->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->saveContextToWindowHandleMapping->return->else->return
AccessBridge#getAccessibleContextAt(int, int, AccessibleContext)::: access bridge get accessible context at:::if->return->if->windowHandleToContextMap->getRootAccessibleContext->containsValue->return->getAccessibleContextAt_1->else->return->getAccessibleContextAt_2
AccessBridge#getRootAccessibleContext(AccessibleContext)::: access bridge get root accessible context:::if->return->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait
AccessBridge#getAccessibleContextAt_1(int, int, AccessibleContext)::: access bridge get accessible context at_1:::debugString->debugString->if->return->acmp->InvocationUtils->new->Callable<AccessibleComponent>->invokeAndWait->if->loc->InvocationUtils->new->Callable<Point>->invokeAndWait->a->InvocationUtils->new->Callable<Accessible>->invokeAndWait->if->foundAC->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->if->if->return->getAccessibleContextAt_1->else->return->return
AccessBridge#getAccessibleContextAt_2(int, int, AccessibleContext)::: access bridge get accessible context at_2:::debugString->debugString->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait
AccessBridge#getAccessibleContextWithFocus():::returns the Accessible that has focus:::c->AWTEventMonitor->getComponentWithFocus->if->a->Translator->getAccessible->if->ac->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->if->return->return
AccessBridge#getAccessibleNameFromContext(AccessibleContext):::returns the AccessibleName from an AccessibleContext:::ac->getClass->debugString->if->s->InvocationUtils->new->Callable<String>->invokeAndWait->if->references->increment->debugString->return->else->return->else->debugString->return
AccessBridge#getVirtualAccessibleNameFromContext(AccessibleContext):::Returns an AccessibleName for a component using an algorithm optimized for the JAWS screen reader:::if->nameString->InvocationUtils->new->Callable<String>->invokeAndWait->if->nameString->length->debugString->references->increment->return->descriptionString->InvocationUtils->new->Callable<String>->invokeAndWait->if->descriptionString->length->debugString->references->increment->return->debugString->bExtendedSearch->role->InvocationUtils->new->Callable<AccessibleRole>->invokeAndWait->parentContext->parentRole->if->extendedVirtualNameSearchRoles->contains->getAccessibleParentFromContext->if->parentContextInnerTemp->InvocationUtils->new->Callable<AccessibleRole>->invokeAndWait->if->if->noExtendedVirtualNameSearchParentRoles->contains->if->role->toDisplayString->debugString->if->at->InvocationUtils->new->Callable<AccessibleText>->invokeAndWait->if->charCount->InvocationUtils->new->Callable<Integer>->invokeAndWait->text->getAccessibleTextRangeFromContext->if->debugString->references->increment->return->debugString->ai->InvocationUtils->new->Callable<AccessibleIcon[]>->invokeAndWait->if->iconDescription->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->else->getAccessibleParentFromContext->if->parentContextInnerTemp->InvocationUtils->new->Callable<AccessibleRole>->invokeAndWait->if->indexInParent->InvocationUtils->new->Callable<Integer>->invokeAndWait->acTableCell->getAccessibleChildFromContext->debugString->if->aiRet->InvocationUtils->new->Callable<AccessibleIcon[]>->invokeAndWait->if->iconDescription->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->else->if->debugString->ai->InvocationUtils->new->Callable<AccessibleIcon[]>->invokeAndWait->if->iconDescription->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->else->if->av->InvocationUtils->new->Callable<AccessibleValue>->invokeAndWait->if->value->InvocationUtils->new->Callable<Number>->invokeAndWait->if->if->value->intValue->toString->else->if->value->intValue->toString->else->value->toString->if->references->increment->return->return->parentContextOuterTemp->parentName->InvocationUtils->new->Callable<String>->invokeAndWait->parentDescription->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->bIsEditCombo->testContext->if->if->debugString->references->increment->return->else->if->debugString->references->increment->return->getAccessibleParentFromContext->if->parentContextInnerTemp->InvocationUtils->new->Callable<AccessibleRole>->invokeAndWait->parentContextTempInner->ars->InvocationUtils->new->Callable<AccessibleRelationSet>->invokeAndWait->if->ars->size->ars->contains->labeledByRelation->ars->get->if->targets->labeledByRelation->getTarget->o->if->labelContext->getAccessibleContext->if->labelName->labelContext->getAccessibleName->labelDescription->labelContext->getAccessibleDescription->if->debugString->references->increment->return->else->if->debugString->references->increment->return->testIndexMax->testX->testY->testWidth->testHeight->targetX->targetY->tempContext->testIndex->InvocationUtils->new->Callable<Integer>->invokeAndWait->if->parentContextInnerTemp->InvocationUtils->new->Callable<Integer>->invokeAndWait->getAccessibleXcoordFromContext->getAccessibleYcoordFromContext->getAccessibleWidthFromContext->getAccessibleHeightFromContext->childIndex->childX->childY->childWidth->childHeight->childName->childDescription->while->childIndexTemp->parentContextInnerTemp->child->InvocationUtils->new->Callable<Accessible>->invokeAndWait->if->childContext->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->if->childRole->InvocationUtils->new->Callable<AccessibleRole>->invokeAndWait->if->getAccessibleXcoordFromContext->getAccessibleYcoordFromContext->getAccessibleWidthFromContext->getAccessibleHeightFromContext->if->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->else->if->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->while->childIndexTemp->parentContextInnerTemp->child->InvocationUtils->new->Callable<Accessible>->invokeAndWait->if->childContext->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->if->childRole->InvocationUtils->new->Callable<AccessibleRole>->invokeAndWait->if->getAccessibleXcoordFromContext->getAccessibleYcoordFromContext->getAccessibleWidthFromContext->getAccessibleHeightFromContext->if->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->else->if->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->if->while->childIndexTemp->parentContextInnerTemp->child->InvocationUtils->new->Callable<Accessible>->invokeAndWait->if->childContext->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->if->childRole->InvocationUtils->new->Callable<AccessibleRole>->invokeAndWait->if->getAccessibleXcoordFromContext->getAccessibleYcoordFromContext->getAccessibleWidthFromContext->getAccessibleHeightFromContext->if->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->while->childIndexTemp->parentContextInnerTemp->child->InvocationUtils->new->Callable<Accessible>->invokeAndWait->if->childContext->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->if->childRole->InvocationUtils->new->Callable<AccessibleRole>->invokeAndWait->if->getAccessibleXcoordFromContext->getAccessibleYcoordFromContext->getAccessibleWidthFromContext->getAccessibleHeightFromContext->if->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->InvocationUtils->new->Callable<String>->invokeAndWait->if->debugString->references->increment->return->return->else->debugString->return
AccessBridge#getAccessibleDescriptionFromContext(AccessibleContext):::returns the AccessibleDescription from an AccessibleContext:::if->s->InvocationUtils->new->Callable<String>->invokeAndWait->if->references->increment->debugString->return->else->debugString->return
AccessBridge#getAccessibleRoleStringFromContext(AccessibleContext):::returns the AccessibleRole from an AccessibleContext:::if->role->InvocationUtils->new->Callable<AccessibleRole>->invokeAndWait->if->s->role->toDisplayString->if->references->increment->debugString->return->else->debugString->return
AccessBridge#getAccessibleRoleStringFromContext_en_US(AccessibleContext):::return the AccessibleRole from an AccessibleContext in the en_US locale:::return->getAccessibleRoleStringFromContext
AccessBridge#getAccessibleStatesStringFromContext(AccessibleContext):::return the AccessibleStates from an AccessibleContext:::if->stateSet->InvocationUtils->new->Callable<AccessibleStateSet>->invokeAndWait->if->s->stateSet->toString->if->s->toDisplayString->indexOf->role->InvocationUtils->return->ac->getAccessibleRole->invokeAndWait->if->toDisplayString->references->increment->debugString->return->else->debugString->return
AccessBridge#getAccessibleStatesStringFromContext_en_US(AccessibleContext):::returns the AccessibleStates from an AccessibleContext in the en_US locale:::if->stateSet->InvocationUtils->new->Callable<AccessibleStateSet>->invokeAndWait->if->s->states->stateSet->toArray->if->toDisplayString->for->i->references->increment->debugString->return->debugString->return
AccessBridge#getAccessibleParentFromContext(AccessibleContext):::returns the AccessibleParent from an AccessibleContext:::if->return->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait
AccessBridge#getAccessibleIndexInParentFromContext(AccessibleContext):::returns the AccessibleIndexInParent from an AccessibleContext:::if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleChildrenCountFromContext(AccessibleContext):::returns the AccessibleChild count from an AccessibleContext:::if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleChildFromContext(AccessibleContext, int):::returns the AccessibleChild Context from an AccessibleContext:::if->return->table->InvocationUtils->new->Callable<JTable>->invokeAndWait->if->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->at->getAccessibleTableFromContext->row->getAccessibleTableRow->column->getAccessibleTableColumn->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait
AccessBridge#getAccessibleBoundsOnScreenFromContext(AccessibleContext):::returns the AccessibleComponent bounds on screen from an AccessibleContext:::if->return->return->InvocationUtils->new->Callable<Rectangle>->invokeAndWait
AccessBridge#getAccessibleXcoordFromContext(AccessibleContext):::returns the AccessibleComponent x-coord from an AccessibleContext:::if->r->getAccessibleBoundsOnScreenFromContext->if->debugString->return->else->debugString->return
AccessBridge#getAccessibleYcoordFromContext(AccessibleContext):::returns the AccessibleComponent y-coord from an AccessibleContext:::debugString->if->r->getAccessibleBoundsOnScreenFromContext->if->return->else->debugString->return
AccessBridge#getAccessibleHeightFromContext(AccessibleContext):::returns the AccessibleComponent height from an AccessibleContext:::if->r->getAccessibleBoundsOnScreenFromContext->if->return->else->debugString->return
AccessBridge#getAccessibleWidthFromContext(AccessibleContext):::returns the AccessibleComponent width from an AccessibleContext:::if->r->getAccessibleBoundsOnScreenFromContext->if->return->else->debugString->return
AccessBridge#getAccessibleComponentFromContext(AccessibleContext):::returns the AccessibleComponent from an AccessibleContext:::if->acmp->InvocationUtils->return->ac->getAccessibleComponent->invokeAndWait->if->debugString->return->else->debugString->return
AccessBridge#getAccessibleActionFromContext(AccessibleContext):::returns the AccessibleAction from an AccessibleContext:::debugString->return->InvocationUtils->new->Callable<AccessibleAction>->invokeAndWait
AccessBridge#getAccessibleSelectionFromContext(AccessibleContext):::returns the AccessibleSelection from an AccessibleContext:::return->InvocationUtils->new->Callable<AccessibleSelection>->invokeAndWait
AccessBridge#getAccessibleTextFromContext(AccessibleContext):::return the AccessibleText from an AccessibleContext:::return->InvocationUtils->new->Callable<AccessibleText>->invokeAndWait
AccessBridge#getAccessibleValueFromContext(AccessibleContext):::return the AccessibleComponent from an AccessibleContext:::return->InvocationUtils->new->Callable<AccessibleValue>->invokeAndWait
AccessBridge#getCaretLocation(AccessibleContext):::returns the bounding rectangle for the text cursor XXX:::debugString->if->return->return->InvocationUtils->new->Callable<Rectangle>->invokeAndWait
AccessBridge#getCaretLocationX(AccessibleContext):::returns the x-coordinate for the text cursor rectangle:::r->getCaretLocation->if->return->else->return
AccessBridge#getCaretLocationY(AccessibleContext):::returns the y-coordinate for the text cursor rectangle:::r->getCaretLocation->if->return->else->return
AccessBridge#getCaretLocationHeight(AccessibleContext):::returns the height for the text cursor rectangle:::r->getCaretLocation->if->return->else->return
AccessBridge#getCaretLocationWidth(AccessibleContext):::returns the width for the text cursor rectangle:::r->getCaretLocation->if->return->else->return
AccessBridge#getAccessibleCharCountFromContext(AccessibleContext):::returns the character count from an AccessibleContext:::if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleCaretPositionFromContext(AccessibleContext):::returns the caret position from an AccessibleContext:::if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleIndexAtPointFromContext(AccessibleContext, int, int):::Return the index at a specific point from an AccessibleContext Point(x, y) is in screen coordinates.:::debugString->if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleLetterAtIndexFromContext(AccessibleContext, int):::return the letter at a specific point from an AccessibleContext:::if->s->InvocationUtils->new->Callable<String>->invokeAndWait->if->references->increment->return->else->debugString->return
AccessBridge#getAccessibleWordAtIndexFromContext(AccessibleContext, int):::return the word at a specific point from an AccessibleContext:::if->s->InvocationUtils->new->Callable<String>->invokeAndWait->if->references->increment->return->else->debugString->return
AccessBridge#getAccessibleSentenceAtIndexFromContext(AccessibleContext, int):::return the sentence at a specific point from an AccessibleContext:::if->s->InvocationUtils->new->Callable<String>->invokeAndWait->if->references->increment->return->else->debugString->return
AccessBridge#getAccessibleTextSelectionStartFromContext(AccessibleContext):::return the text selection start from an AccessibleContext:::if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleTextSelectionEndFromContext(AccessibleContext):::return the text selection end from an AccessibleContext:::if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleTextSelectedTextFromContext(AccessibleContext):::return the selected text from an AccessibleContext:::if->s->InvocationUtils->new->Callable<String>->invokeAndWait->if->references->increment->return->else->debugString->return
AccessBridge#getAccessibleAttributesAtIndexFromContext(AccessibleContext, int):::return the attribute string at a given index from an AccessibleContext:::if->return->as->InvocationUtils->new->Callable<AttributeSet>->invokeAndWait->s->expandStyleConstants->if->references->increment->return->return
AccessBridge#getAccessibleTextLineLeftBoundsFromContext(AccessibleContext, int):::Get line info: left index of line  algorithm:  cast back, doubling each time,             'till find line boundaries  return -1 if we can't get the info (e.g:::if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleTextLineRightBoundsFromContext(AccessibleContext, int):::Get line info: right index of line  algorithm:  cast back, doubling each time,             'till find line boundaries  return -1 if we can't get the info (e.g:::if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleTextRangeFromContext(AccessibleContext, int, int):::Get a range of text; null if indicies are bogus:::s->InvocationUtils->new->Callable<String>->invokeAndWait->if->references->increment->return->else->return
AccessBridge#getAccessibleAttributeSetAtIndexFromContext(AccessibleContext, int):::return the AttributeSet object at a given index from an AccessibleContext:::return->InvocationUtils->new->Callable<AttributeSet>->invokeAndWait
AccessBridge#getAccessibleTextRectAtIndexFromContext(AccessibleContext, int):::return the bounding rectangle at index from an AccessibleContext:::r->InvocationUtils->new->Callable<Rectangle>->invokeAndWait->acRect->getAccessibleBoundsOnScreenFromContext->if->r->translate->return->return
AccessBridge#getAccessibleXcoordTextRectAtIndexFromContext(AccessibleContext, int):::return the AccessibleText character x-coord at index from an AccessibleContext:::if->r->getAccessibleTextRectAtIndexFromContext->if->return->else->debugString->return
AccessBridge#getAccessibleYcoordTextRectAtIndexFromContext(AccessibleContext, int):::return the AccessibleText character y-coord at index from an AccessibleContext:::if->r->getAccessibleTextRectAtIndexFromContext->if->return->else->debugString->return
AccessBridge#getAccessibleHeightTextRectAtIndexFromContext(AccessibleContext, int):::return the AccessibleText character height at index from an AccessibleContext:::if->r->getAccessibleTextRectAtIndexFromContext->if->return->else->debugString->return
AccessBridge#getAccessibleWidthTextRectAtIndexFromContext(AccessibleContext, int):::return the AccessibleText character width at index from an AccessibleContext:::if->r->getAccessibleTextRectAtIndexFromContext->if->return->else->debugString->return
AccessBridge#getBoldFromAttributeSet(AttributeSet):::return the bold setting from an AttributeSet:::if->return->StyleConstants->isBold->else->debugString->return
AccessBridge#getItalicFromAttributeSet(AttributeSet):::return the italic setting from an AttributeSet:::if->return->StyleConstants->isItalic->else->debugString->return
AccessBridge#getUnderlineFromAttributeSet(AttributeSet):::return the underline setting from an AttributeSet:::if->return->StyleConstants->isUnderline->else->debugString->return
AccessBridge#getStrikethroughFromAttributeSet(AttributeSet):::return the strikethrough setting from an AttributeSet:::if->return->StyleConstants->isStrikeThrough->else->debugString->return
AccessBridge#getSuperscriptFromAttributeSet(AttributeSet):::return the superscript setting from an AttributeSet:::if->return->StyleConstants->isSuperscript->else->debugString->return
AccessBridge#getSubscriptFromAttributeSet(AttributeSet):::return the subscript setting from an AttributeSet:::if->return->StyleConstants->isSubscript->else->debugString->return
AccessBridge#getBackgroundColorFromAttributeSet(AttributeSet):::return the background color from an AttributeSet:::if->s->StyleConstants->getBackground->toString->if->references->increment->return->else->debugString->return
AccessBridge#getForegroundColorFromAttributeSet(AttributeSet):::return the foreground color from an AttributeSet:::if->s->StyleConstants->getForeground->toString->if->references->increment->return->else->debugString->return
AccessBridge#getFontFamilyFromAttributeSet(AttributeSet):::return the font family from an AttributeSet:::if->s->StyleConstants->getFontFamily->toString->if->references->increment->return->else->debugString->return
AccessBridge#getFontSizeFromAttributeSet(AttributeSet):::return the font size from an AttributeSet:::if->return->StyleConstants->getFontSize->else->debugString->return
AccessBridge#getAlignmentFromAttributeSet(AttributeSet):::return the alignment from an AttributeSet:::if->return->StyleConstants->getAlignment->else->debugString->return
AccessBridge#getBidiLevelFromAttributeSet(AttributeSet):::return the BiDi level from an AttributeSet:::if->return->StyleConstants->getBidiLevel->else->debugString->return
AccessBridge#getFirstLineIndentFromAttributeSet(AttributeSet):::return the first line indent from an AttributeSet:::if->return->StyleConstants->getFirstLineIndent->else->debugString->return
AccessBridge#getLeftIndentFromAttributeSet(AttributeSet):::return the left indent from an AttributeSet:::if->return->StyleConstants->getLeftIndent->else->debugString->return
AccessBridge#getRightIndentFromAttributeSet(AttributeSet):::return the right indent from an AttributeSet:::if->return->StyleConstants->getRightIndent->else->debugString->return
AccessBridge#getLineSpacingFromAttributeSet(AttributeSet):::return the line spacing from an AttributeSet:::if->return->StyleConstants->getLineSpacing->else->debugString->return
AccessBridge#getSpaceAboveFromAttributeSet(AttributeSet):::return the space above from an AttributeSet:::if->return->StyleConstants->getSpaceAbove->else->debugString->return
AccessBridge#getSpaceBelowFromAttributeSet(AttributeSet):::return the space below from an AttributeSet:::if->return->StyleConstants->getSpaceBelow->else->debugString->return
AccessBridge#expandStyleConstants(AttributeSet):::Enumerate all StyleConstants in the AttributeSet  We need to check explicitly, 'cause of the HTML package conversion mechanism (they may not be stored as StyleConstants, just translated to them when asked):::c->o->attrString->StyleConstants->getBidiLevel->comp->StyleConstants->getComponent->if->if->ac->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->if->InvocationUtils->new->Callable<String>->invokeAndWait->else->else->i->StyleConstants->getIcon->if->if->getDescription->else->StyleConstants->getFontFamily->StyleConstants->getFontSize->if->StyleConstants->isBold->if->StyleConstants->isItalic->if->StyleConstants->isUnderline->if->StyleConstants->isStrikeThrough->if->StyleConstants->isSuperscript->if->StyleConstants->isSubscript->StyleConstants->getForeground->if->StyleConstants->getBackground->if->StyleConstants->getFirstLineIndent->StyleConstants->getRightIndent->StyleConstants->getLeftIndent->StyleConstants->getLineSpacing->StyleConstants->getSpaceAbove->StyleConstants->getSpaceBelow->StyleConstants->getAlignment->ts->StyleConstants->getTabSet->if->return
AccessBridge#getCurrentAccessibleValueFromContext(AccessibleContext):::return the AccessibleValue current value from an AccessibleContext returned using a String 'cause the value is a java Number:::if->value->InvocationUtils->new->Callable<Number>->invokeAndWait->if->s->value->toString->if->references->increment->return->else->debugString->return
AccessBridge#getMaximumAccessibleValueFromContext(AccessibleContext):::return the AccessibleValue maximum value from an AccessibleContext returned using a String 'cause the value is a java Number:::if->value->InvocationUtils->new->Callable<Number>->invokeAndWait->if->s->value->toString->if->references->increment->return->else->debugString->return
AccessBridge#getMinimumAccessibleValueFromContext(AccessibleContext):::return the AccessibleValue minimum value from an AccessibleContext returned using a String 'cause the value is a java Number:::if->value->InvocationUtils->new->Callable<Number>->invokeAndWait->if->s->value->toString->if->references->increment->return->else->debugString->return
AccessBridge#addAccessibleSelectionFromContext(AccessibleContext, int):::add to the AccessibleSelection of an AccessibleContext child i:::try->InvocationUtils->new->Callable<Object>->invokeAndWait->catch->finally
AccessBridge#clearAccessibleSelectionFromContext(AccessibleContext):::clear all of the AccessibleSelection of an AccessibleContex:::try->InvocationUtils->new->Callable<Object>->invokeAndWait->catch->finally
AccessBridge#getAccessibleSelectionFromContext(AccessibleContext, int):::get the AccessibleContext of the i-th AccessibleSelection of an AccessibleContext:::return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait
AccessBridge#getAccessibleSelectionCountFromContext(AccessibleContext):::get number of things selected in the AccessibleSelection of an AccessibleContext:::return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#isAccessibleChildSelectedFromContext(AccessibleContext, int):::return true if the i-th child of the AccessibleSelection of an AccessibleContext is selected:::return->InvocationUtils->new->Callable<Boolean>->invokeAndWait
AccessBridge#removeAccessibleSelectionFromContext(AccessibleContext, int):::remove the i-th child from the AccessibleSelection of an AccessibleContext:::InvocationUtils->new->Callable<Object>->invokeAndWait
AccessBridge#selectAllAccessibleSelectionFromContext(AccessibleContext):::select all (if possible) of the children of the AccessibleSelection of an AccessibleContext:::InvocationUtils->new->Callable<Object>->invokeAndWait
AccessBridge#getAccessibleTableFromContext(AccessibleContext):::returns the AccessibleTable for an AccessibleContext:::return->InvocationUtils->new->Callable<AccessibleTable>->invokeAndWait
AccessBridge#getContextFromAccessibleTable(AccessibleTable)::: access bridge get context from accessible table:::return->hashtab->get
AccessBridge#getAccessibleTableRowCount(AccessibleContext)::: access bridge get accessible table row count:::debugString->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleTableColumnCount(AccessibleContext)::: access bridge get accessible table column count:::debugString->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleTableCellAccessibleContext(AccessibleTable, int, int)::: access bridge get accessible table cell accessible context:::at->getClass->debugString->if->return->return->InvocationUtils->new->Callable<AccessibleContext>->getContextFromAccessibleTable->invokeAndWait
AccessBridge#getAccessibleTableCellIndex(AccessibleTable, int, int)::: access bridge get accessible table cell index:::debugString->if->cellIndex->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait->debugString->return->debugString->return
AccessBridge#getAccessibleTableCellRowExtent(AccessibleTable, int, int)::: access bridge get accessible table cell row extent:::debugString->if->rowExtent->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait->debugString->return->debugString->return
AccessBridge#getAccessibleTableCellColumnExtent(AccessibleTable, int, int)::: access bridge get accessible table cell column extent:::debugString->if->columnExtent->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait->debugString->return->debugString->return
AccessBridge#isAccessibleTableCellSelected(AccessibleTable, int, int)::: access bridge is accessible table cell selected:::debugString->if->return->return->InvocationUtils->new->Callable<Boolean>->getContextFromAccessibleTable->invokeAndWait
AccessBridge#getAccessibleTableRowHeader(AccessibleContext)::: access bridge get accessible table row header:::debugString->at->InvocationUtils->new->Callable<AccessibleTable>->invokeAndWait->if->hashtab->put->return
AccessBridge#getAccessibleTableColumnHeader(AccessibleContext)::: access bridge get accessible table column header:::debugString->if->return->at->InvocationUtils->new->Callable<AccessibleTable>->invokeAndWait->if->hashtab->put->return
AccessBridge#getAccessibleTableRowHeaderRowCount(AccessibleContext)::: access bridge get accessible table row header row count:::debugString->if->atRowHeader->getAccessibleTableRowHeader->if->return->InvocationUtils->new->Callable<Integer>->invokeAndWait->return
AccessBridge#getAccessibleTableRowHeaderColumnCount(AccessibleContext)::: access bridge get accessible table row header column count:::debugString->if->atRowHeader->getAccessibleTableRowHeader->if->return->InvocationUtils->new->Callable<Integer>->invokeAndWait->debugString->return
AccessBridge#getAccessibleTableColumnHeaderRowCount(AccessibleContext)::: access bridge get accessible table column header row count:::debugString->if->atColumnHeader->getAccessibleTableColumnHeader->if->return->InvocationUtils->new->Callable<Integer>->invokeAndWait->debugString->return
AccessBridge#getAccessibleTableColumnHeaderColumnCount(AccessibleContext)::: access bridge get accessible table column header column count:::debugString->if->atColumnHeader->getAccessibleTableColumnHeader->if->return->InvocationUtils->new->Callable<Integer>->invokeAndWait->debugString->return
AccessBridge#getAccessibleTableRowDescription(AccessibleTable, int)::: access bridge get accessible table row description:::return->InvocationUtils->new->Callable<AccessibleContext>->getContextFromAccessibleTable->invokeAndWait
AccessBridge#getAccessibleTableColumnDescription(AccessibleTable, int)::: access bridge get accessible table column description:::if->return->return->InvocationUtils->new->Callable<AccessibleContext>->getContextFromAccessibleTable->invokeAndWait
AccessBridge#getAccessibleTableRowSelectionCount(AccessibleTable)::: access bridge get accessible table row selection count:::if->return->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait->return
AccessBridge#getAccessibleTableRowSelections(AccessibleTable, int)::: access bridge get accessible table row selections:::if->return->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait->return
AccessBridge#isAccessibleTableRowSelected(AccessibleTable, int)::: access bridge is accessible table row selected:::if->return->return->InvocationUtils->new->Callable<Boolean>->getContextFromAccessibleTable->invokeAndWait
AccessBridge#isAccessibleTableColumnSelected(AccessibleTable, int)::: access bridge is accessible table column selected:::if->return->return->InvocationUtils->new->Callable<Boolean>->getContextFromAccessibleTable->invokeAndWait
AccessBridge#getAccessibleTableColumnSelectionCount(AccessibleTable)::: access bridge get accessible table column selection count:::if->return->return->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait
AccessBridge#getAccessibleTableColumnSelections(AccessibleTable, int)::: access bridge get accessible table column selections:::if->return->return->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait
AccessBridge#getAccessibleTableRow(AccessibleTable, int)::: access bridge get accessible table row:::if->return->colCount->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait->return
AccessBridge#getAccessibleTableColumn(AccessibleTable, int)::: access bridge get accessible table column:::if->return->colCount->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait->return
AccessBridge#getAccessibleTableIndex(AccessibleTable, int, int)::: access bridge get accessible table index:::if->return->colCount->InvocationUtils->new->Callable<Integer>->getContextFromAccessibleTable->invokeAndWait->return
AccessBridge#getAccessibleRelationCount(AccessibleContext)::: access bridge get accessible relation count:::if->ars->InvocationUtils->new->Callable<AccessibleRelationSet>->invokeAndWait->if->return->ars->size->return
AccessBridge#getAccessibleRelationKey(AccessibleContext, int)::: access bridge get accessible relation key:::return->InvocationUtils->new->Callable<String>->invokeAndWait
AccessBridge#getAccessibleRelationTargetCount(AccessibleContext, int)::: access bridge get accessible relation target count:::return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleRelationTarget(AccessibleContext, int, int)::: access bridge get accessible relation target:::debugString->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait
AccessBridge#getAccessibleHypertext(AccessibleContext)::: access bridge get accessible hypertext:::debugString->if->return->hypertext->InvocationUtils->new->Callable<AccessibleHypertext>->invokeAndWait->hyperTextContextMap->put->return
AccessBridge#getAccessibleHyperlinkCount(AccessibleContext)::: access bridge get accessible hyperlink count:::debugString->if->return->hypertext->getAccessibleHypertext->if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleHyperlink(AccessibleHypertext, int)::: access bridge get accessible hyperlink:::debugString->if->return->ac->hyperTextContextMap->get->if->InvocationUtils->new->Callable<Integer>->invokeAndWait->return->acLink->InvocationUtils->new->Callable<AccessibleHyperlink>->invokeAndWait->hyperLinkContextMap->put->return
AccessBridge#getAccessibleHyperlinkText(AccessibleHyperlink)::: access bridge get accessible hyperlink text:::debugString->if->return->return->InvocationUtils->new->Callable<String>->hyperLinkContextMap->get->invokeAndWait
AccessBridge#getAccessibleHyperlinkURL(AccessibleHyperlink)::: access bridge get accessible hyperlink l:::debugString->if->return->return->InvocationUtils->new->Callable<String>->hyperLinkContextMap->get->invokeAndWait
AccessBridge#getAccessibleHyperlinkStartIndex(AccessibleHyperlink)::: access bridge get accessible hyperlink start index:::debugString->if->return->return->InvocationUtils->new->Callable<Integer>->hyperLinkContextMap->get->invokeAndWait
AccessBridge#getAccessibleHyperlinkEndIndex(AccessibleHyperlink)::: access bridge get accessible hyperlink end index:::debugString->if->return->return->InvocationUtils->new->Callable<Integer>->hyperLinkContextMap->get->invokeAndWait
AccessBridge#getAccessibleHypertextLinkIndex(AccessibleHypertext, int)::: access bridge get accessible hypertext link index:::debugString->if->return->linkIndex->InvocationUtils->new->Callable<Integer>->hyperTextContextMap->get->invokeAndWait->debugString->return
AccessBridge#activateAccessibleHyperlink(AccessibleContext, AccessibleHyperlink)::: access bridge activate accessible hyperlink:::if->return->retval->InvocationUtils->new->Callable<Boolean>->invokeAndWait->debugString->return
AccessBridge#getMnemonic(AccessibleContext)::: access bridge get mnemonic:::if->return->return->InvocationUtils->new->Callable<KeyStroke>->invokeAndWait
AccessBridge#getAccelerator(AccessibleContext)::: access bridge get accelerator:::if->return->return->InvocationUtils->new->Callable<KeyStroke>->invokeAndWait
AccessBridge#fKeyNumber(KeyStroke)::: access bridge f key number:::if->return->fKey->keyText->KeyEvent->keyStroke->getKeyCode->getKeyText->if->keyText->length->keyText->length->prefix->keyText->substring->if->prefix->equals->try->suffix->Integer->keyText->substring->parseInt->if->catch->finally->return
AccessBridge#controlCode(KeyStroke)::: access bridge control code:::if->return->code->keyStroke->getKeyCode->switch->break->break->return
AccessBridge#getKeyChar(KeyStroke)::: access bridge get key char:::if->return->fKey->fKeyNumber->if->debugString->return->keyCode->controlCode->if->Integer->toHexString->debugString->return->keyText->KeyEvent->keyStroke->getKeyCode->getKeyText->debugString->if->keyText->length->seq->keyText->subSequence->if->seq->length->return->seq->charAt->return
AccessBridge#getModifiers(KeyStroke)::: access bridge get modifiers:::if->return->debugString->modifiers->if->fKeyNumber->if->controlCode->st->keyStroke->toString->new->StringTokenizer->while->st->hasMoreTokens->text->st->nextToken->if->text->startsWith->debugString->if->text->startsWith->debugString->if->text->startsWith->debugString->if->text->startsWith->debugString->Integer->toHexString->debugString->return
AccessBridge#getAccessibleKeyBindingsCount(AccessibleContext)::: access bridge get accessible key bindings count:::if->return->count->if->getMnemonic->if->getAccelerator->return
AccessBridge#getAccessibleKeyBindingChar(AccessibleContext, int)::: access bridge get accessible key binding char:::if->return->if->getMnemonic->keyStroke->getAccelerator->if->return->getKeyChar->if->keyStroke->getMnemonic->if->return->getKeyChar->else->if->keyStroke->getAccelerator->if->return->getKeyChar->return
AccessBridge#getAccessibleKeyBindingModifiers(AccessibleContext, int)::: access bridge get accessible key binding modifiers:::if->return->if->getMnemonic->keyStroke->getAccelerator->if->return->getModifiers->if->keyStroke->getMnemonic->if->return->getModifiers->else->if->keyStroke->getAccelerator->if->return->getModifiers->return
AccessBridge#getAccessibleIconsCount(AccessibleContext)::: access bridge get accessible icons count:::debugString->if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleIconDescription(AccessibleContext, int)::: access bridge get accessible icon description:::debugString->if->return->return->InvocationUtils->new->Callable<String>->invokeAndWait
AccessBridge#getAccessibleIconHeight(AccessibleContext, int)::: access bridge get accessible icon height:::debugString->if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleIconWidth(AccessibleContext, int)::: access bridge get accessible icon width:::debugString->if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleActionsCount(AccessibleContext)::: access bridge get accessible actions count:::debugString->if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getAccessibleActionName(AccessibleContext, int)::: access bridge get accessible action name:::debugString->if->return->return->InvocationUtils->new->Callable<String>->invokeAndWait
AccessBridge#doAccessibleActions(AccessibleContext, String)::: access bridge do accessible actions:::debugString->if->return->return->InvocationUtils->new->Callable<Boolean>->invokeAndWait
AccessBridge#setTextContents(AccessibleContext, String):::Sets the contents of an AccessibleContext that implements AccessibleEditableText with the specified text string:::debugString->if->debugString->return->if->debugString->return->return->InvocationUtils->new->Callable<Boolean>->invokeAndWait
AccessBridge#getInternalFrame(AccessibleContext):::Returns the Accessible Context of an Internal Frame object that is the ancestor of a given object:::return->toString->getParentWithRole
AccessBridge#getTopLevelObject(AccessibleContext):::Returns the Accessible Context for the top level object in a Java Window:::debugString->if->return->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait
AccessBridge#getParentWithRole(AccessibleContext, String):::Returns the parent AccessibleContext that has the specified AccessibleRole:::debugString->if->return->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait
AccessBridge#getParentWithRoleElseRoot(AccessibleContext, String):::Returns the parent AccessibleContext that has the specified AccessibleRole:::retval->getParentWithRole->if->getTopLevelObject->return
AccessBridge#getObjectDepth(AccessibleContext):::Returns how deep in the object hierarchy a given object is:::debugString->if->return->return->InvocationUtils->new->Callable<Integer>->invokeAndWait
AccessBridge#getActiveDescendent(AccessibleContext):::Returns the Accessible Context of the current ActiveDescendent of an object:::debugString->if->return->parent->InvocationUtils->new->Callable<Accessible>->invokeAndWait->if->child->InvocationUtils->new->Callable<Accessible>->invokeAndWait->if->tree->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait->return->InvocationUtils->new->Callable<AccessibleContext>->invokeAndWait
AccessBridge#getJAWSAccessibleName(AccessibleContext):::Gets the AccessibleName for a component based upon the JAWS algorithm:::debugString->if->return->return->InvocationUtils->new->Callable<String>->invokeAndWait
AccessBridge#requestFocus(AccessibleContext):::Request focus for a component:::debugString->if->return->return->InvocationUtils->new->Callable<Boolean>->invokeAndWait
AccessBridge#selectTextRange(AccessibleContext, int, int):::Selects text between two indices:::debugString->if->return->return->InvocationUtils->new->Callable<Boolean>->invokeAndWait
AccessBridge#setCaretPosition(AccessibleContext, int):::Set the caret to a text position:::debugString->if->return->return->InvocationUtils->new->Callable<Boolean>->invokeAndWait
AccessBridge#getVisibleChildrenCount(AccessibleContext)::: access bridge get visible children count:::debugString->if->return->_getVisibleChildrenCount->debugString->return
AccessBridge#_getVisibleChildrenCount(AccessibleContext)::: access bridge _get visible children count:::if->return->if->_getVisibleChildrenCount->return->numChildren->InvocationUtils->new->Callable<Integer>->invokeAndWait->for->i
AccessBridge#_getVisibleChildrenCount(AccessibleExtendedTable)::: access bridge _get visible children count:::if->return->lastVisibleRow->lastVisibleColumn->foundVisible->rowCount->InvocationUtils->new->Callable<Integer>->invokeAndWait->columnCount->InvocationUtils->new->Callable<Integer>->invokeAndWait->for->rowIdx
AccessBridge#getVisibleChild(AccessibleContext, int):::Gets the visible child of an AccessibleContext at the specified index  Bug ID 4944762- getVisibleChildren for list-like components needed:::debugString->if->return->_getVisibleChild->if->InvocationUtils->new->Callable<String>->invokeAndWait->debugString->return
AccessBridge#_getVisibleChild(AccessibleContext, int)::: access bridge _get visible child:::if->return->if->_getVisibleChild->return->numChildren->InvocationUtils->new->Callable<Integer>->invokeAndWait->for->i
AccessBridge#_getVisibleChild(AccessibleExtendedTable, int)::: access bridge _get visible child:::if->return->lastVisibleRow->lastVisibleColumn->foundVisible->rowCount->InvocationUtils->new->Callable<Integer>->invokeAndWait->columnCount->InvocationUtils->new->Callable<Integer>->invokeAndWait->for->rowIdx
AccessBridge.ObjectReferences.Reference#toString()::: reference to string:::return
AccessBridge.ObjectReferences#dump():::Debugging: dump the contents of ObjectReferences' refs Hashtable:::return->refs->toString
AccessBridge.ObjectReferences#increment(Object):::Increment ref count; set to 1 if we have no references for it:::if->debugString->return->if->refs->containsKey->refs->get->else->refs->new->Reference->put
AccessBridge.ObjectReferences#decrement(Object):::Decrement ref count; remove if count drops to 0:::aRef->refs->get->if->if->refs->remove->else->if->debugString->else->debugString
AccessBridge#propertyCaretChange(PropertyChangeEvent, AccessibleContext, int, int):::native method for handling property change events:::
AccessBridge#propertyDescriptionChange(PropertyChangeEvent, AccessibleContext, String, String)::: access bridge property description change:::
AccessBridge#propertyNameChange(PropertyChangeEvent, AccessibleContext, String, String)::: access bridge property name change:::
AccessBridge#propertySelectionChange(PropertyChangeEvent, AccessibleContext)::: access bridge property selection change:::
AccessBridge#propertyStateChange(PropertyChangeEvent, AccessibleContext, String, String)::: access bridge property state change:::
AccessBridge#propertyTextChange(PropertyChangeEvent, AccessibleContext)::: access bridge property text change:::
AccessBridge#propertyValueChange(PropertyChangeEvent, AccessibleContext, String, String)::: access bridge property value change:::
AccessBridge#propertyVisibleDataChange(PropertyChangeEvent, AccessibleContext)::: access bridge property visible data change:::
AccessBridge#propertyChildChange(PropertyChangeEvent, AccessibleContext, AccessibleContext, AccessibleContext)::: access bridge property child change:::
AccessBridge#propertyActiveDescendentChange(PropertyChangeEvent, AccessibleContext, AccessibleContext, AccessibleContext)::: access bridge property active descendent change:::
AccessBridge#javaShutdown()::: access bridge java shutdown:::
AccessBridge#focusGained(FocusEvent, AccessibleContext):::native methods for handling focus events:::
AccessBridge#focusLost(FocusEvent, AccessibleContext)::: access bridge focus lost:::
AccessBridge#caretUpdate(CaretEvent, AccessibleContext):::native method for handling caret events:::
AccessBridge#mouseClicked(MouseEvent, AccessibleContext):::native methods for handling mouse events:::
AccessBridge#mouseEntered(MouseEvent, AccessibleContext)::: access bridge mouse entered:::
AccessBridge#mouseExited(MouseEvent, AccessibleContext)::: access bridge mouse exited:::
AccessBridge#mousePressed(MouseEvent, AccessibleContext)::: access bridge mouse pressed:::
AccessBridge#mouseReleased(MouseEvent, AccessibleContext)::: access bridge mouse released:::
AccessBridge#menuCanceled(MenuEvent, AccessibleContext):::native methods for handling menu & popupMenu events:::
AccessBridge#menuDeselected(MenuEvent, AccessibleContext)::: access bridge menu deselected:::
AccessBridge#menuSelected(MenuEvent, AccessibleContext)::: access bridge menu selected:::
AccessBridge#popupMenuCanceled(PopupMenuEvent, AccessibleContext)::: access bridge popup menu canceled:::
AccessBridge#popupMenuWillBecomeInvisible(PopupMenuEvent, AccessibleContext)::: access bridge popup menu will become invisible:::
AccessBridge#popupMenuWillBecomeVisible(PopupMenuEvent, AccessibleContext)::: access bridge popup menu will become visible:::
AccessBridge.EventHandler#windowOpened(WindowEvent):::Invoked the first time a window is made visible.:::o->if->e->getSource->if->addNativeWindowHandler
AccessBridge.EventHandler#windowClosing(WindowEvent):::Invoked when the user attempts to close the window from the window's system menu:::
AccessBridge.EventHandler#windowClosed(WindowEvent):::Invoked when a window has been closed as the result of calling dispose on the window.:::o->if->e->getSource->if->removeNativeWindowHandler
AccessBridge.EventHandler#windowIconified(WindowEvent):::Invoked when a window is changed from a normal to a minimized state:::
AccessBridge.EventHandler#windowDeiconified(WindowEvent):::Invoked when a window is changed from a minimized to a normal state.:::
AccessBridge.EventHandler#windowActivated(WindowEvent):::Invoked when the Window is set to be the active Window:::
AccessBridge.EventHandler#windowDeactivated(WindowEvent):::Invoked when a Window is no longer the active Window:::
AccessBridge.EventHandler#addJavaEventNotification(long):::Turn on event monitoring for the event type passed in If necessary, add the appropriate event listener (if no other event of that type is being listened for):::newEventMask->if->SwingEventMonitor->addFocusListener->if->SwingEventMonitor->addCaretListener->if->SwingEventMonitor->addMouseListener->if->SwingEventMonitor->addMenuListener->SwingEventMonitor->addPopupMenuListener->if->SwingEventMonitor->addPopupMenuListener
AccessBridge.EventHandler#removeJavaEventNotification(long):::Turn off event monitoring for the event type passed in If necessary, remove the appropriate event listener (if no other event of that type is being listened for):::newEventMask->if->SwingEventMonitor->removeFocusListener->if->SwingEventMonitor->removeCaretListener->if->SwingEventMonitor->removeMouseListener->if->SwingEventMonitor->removeMenuListener->if->SwingEventMonitor->removePopupMenuListener
AccessBridge.EventHandler#addAccessibilityEventNotification(long):::Turn on event monitoring for the event type passed in If necessary, add the appropriate event listener (if no other event of that type is being listened for):::newEventMask->if->AccessibilityEventMonitor->addPropertyChangeListener
AccessBridge.EventHandler#removeAccessibilityEventNotification(long):::Turn off event monitoring for the event type passed in If necessary, remove the appropriate event listener (if no other event of that type is being listened for):::newEventMask->if->AccessibilityEventMonitor->removePropertyChangeListener
AccessBridge.EventHandler#propertyChange(PropertyChangeEvent)::: event handler property change:::accessBridge->e->toString->debugString->if->o->e->getSource->ac->if->else->a->Translator->e->getSource->getAccessible->if->return->else->a->getAccessibleContext->if->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->debugString->propertyName->e->getPropertyName->if->propertyName->compareTo->oldValue->newValue->if->e->getOldValue->e->getOldValue->intValue->if->e->getNewValue->e->getNewValue->intValue->accessBridge->debugString->accessBridge->propertyCaretChange->else->if->propertyName->compareTo->oldValue->newValue->if->e->getOldValue->e->getOldValue->toString->if->e->getNewValue->e->getNewValue->toString->accessBridge->debugString->accessBridge->propertyDescriptionChange->else->if->propertyName->compareTo->oldValue->newValue->if->e->getOldValue->e->getOldValue->toString->if->e->getNewValue->e->getNewValue->toString->accessBridge->debugString->accessBridge->propertyNameChange->else->if->propertyName->compareTo->accessBridge->Thread->currentThread->e->getSource->debugString->accessBridge->propertySelectionChange->else->if->propertyName->compareTo->oldValue->newValue->if->e->getOldValue->oldState->e->getOldValue->oldState->toDisplayString->if->e->getNewValue->newState->e->getNewValue->newState->toDisplayString->accessBridge->debugString->accessBridge->propertyStateChange->else->if->propertyName->compareTo->accessBridge->debugString->accessBridge->propertyTextChange->else->if->propertyName->compareTo->oldValue->newValue->if->e->getOldValue->e->getOldValue->toString->if->e->getNewValue->e->getNewValue->toString->accessBridge->debugString->accessBridge->propertyValueChange->else->if->propertyName->compareTo->accessBridge->propertyVisibleDataChange->else->if->propertyName->compareTo->oldAC->newAC->a->if->e->getOldValue->e->getOldValue->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->if->e->getNewValue->e->getNewValue->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->debugString->accessBridge->propertyChildChange->else->if->propertyName->compareTo->handleActiveDescendentEvent
AccessBridge.EventHandler#handleActiveDescendentEvent(PropertyChangeEvent, AccessibleContext)::: event handler handle active descendent event:::if->return->oldAC->newAC->a->if->e->getOldValue->e->getOldValue->getAccessibleContext->else->if->e->getOldValue->Translator->e->getOldValue->getAccessible->if->a->getAccessibleContext->if->parent->oldAC->getAccessibleParent->if->if->e->getNewValue->e->getNewValue->getAccessibleContext->else->if->e->getNewValue->Translator->e->getNewValue->getAccessible->if->a->getAccessibleContext->if->parent->newAC->getAccessibleParent->if->tree->tree->getSelectionPath->new->AccessibleJTreeNode->accessBridge->debugString->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->propertyActiveDescendentChange
AccessBridge.EventHandler#focusGained(FocusEvent)::: event handler focus gained:::processFocusGained
AccessBridge.EventHandler#stateChanged(ChangeEvent)::: event handler state changed:::processFocusGained
AccessBridge.EventHandler#processFocusGained()::: event handler process focus gained:::focusOwner->KeyboardFocusManager->getCurrentKeyboardFocusManager->getFocusOwner->if->return->if->path->MenuSelectionManager->defaultManager->getSelectedPath->if->penult->getComponent->last->getComponent->if->e->new->FocusEvent->context->penult->getAccessibleContext->InvocationUtils->SunToolkit->targetToAppContext->registerAccessibleContext->accessBridge->focusGained->else->if->e->new->FocusEvent->focusedAC->last->getAccessibleContext->InvocationUtils->SunToolkit->targetToAppContext->registerAccessibleContext->accessBridge->debugString->accessBridge->focusGained->else->if->e->new->FocusEvent->focusedAC->focusOwner->getAccessibleContext->InvocationUtils->SunToolkit->targetToAppContext->registerAccessibleContext->accessBridge->debugString->accessBridge->focusGained
AccessBridge.EventHandler#focusLost(FocusEvent)::: event handler focus lost:::if->a->Translator->e->getSource->getAccessible->if->accessBridge->a->getAccessibleContext->debugString->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->focusLost
AccessBridge.EventHandler#caretUpdate(CaretEvent)::: ------- caret event glue:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->caretUpdate
AccessBridge.EventHandler#mouseClicked(MouseEvent)::: event handler mouse clicked:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->mouseClicked
AccessBridge.EventHandler#mouseEntered(MouseEvent)::: event handler mouse entered:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->mouseEntered
AccessBridge.EventHandler#mouseExited(MouseEvent)::: event handler mouse exited:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->mouseExited
AccessBridge.EventHandler#mousePressed(MouseEvent)::: event handler mouse pressed:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->mousePressed
AccessBridge.EventHandler#mouseReleased(MouseEvent)::: event handler mouse released:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->mouseReleased
AccessBridge.EventHandler#menuCanceled(MenuEvent)::: ------- menu event glue:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->menuCanceled
AccessBridge.EventHandler#menuDeselected(MenuEvent)::: event handler menu deselected:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->menuDeselected
AccessBridge.EventHandler#menuSelected(MenuEvent)::: event handler menu selected:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->menuSelected
AccessBridge.EventHandler#popupMenuCanceled(PopupMenuEvent)::: event handler popup menu canceled:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->popupMenuCanceled
AccessBridge.EventHandler#popupMenuWillBecomeInvisible(PopupMenuEvent)::: event handler popup menu will become invisible:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->popupMenuWillBecomeInvisible
AccessBridge.EventHandler#popupMenuWillBecomeVisible(PopupMenuEvent)::: event handler popup menu will become visible:::if->a->Translator->e->getSource->getAccessible->if->context->a->getAccessibleContext->InvocationUtils->AppContext->getAppContext->registerAccessibleContext->accessBridge->popupMenuWillBecomeVisible
AccessBridge#addJavaEventNotification(long)::: Wrapper method around eventHandler.addJavaEventNotification():::EventQueue->new->Runnable->invokeLater
AccessBridge#removeJavaEventNotification(long)::: Wrapper method around eventHandler.removeJavaEventNotification():::EventQueue->new->Runnable->invokeLater
AccessBridge#addAccessibilityEventNotification(long)::: Wrapper method around eventHandler.addAccessibilityEventNotification():::EventQueue->new->Runnable->invokeLater
AccessBridge#removeAccessibilityEventNotification(long)::: Wrapper method around eventHandler.removeAccessibilityEventNotification():::EventQueue->new->Runnable->invokeLater
AccessBridge.AccessibleJTreeNode#getChildTreePath(int)::: accessible tree node get child tree path:::if->getAccessibleChildrenCount->return->else->childObj->treeModel->getChild->objPath->path->getPath->objChildPath->new->ObjectArr->arraycopy->return->new->TreePath
AccessBridge.AccessibleJTreeNode#getAccessibleContext():::Get the AccessibleContext associated with this tree node:::return
AccessBridge.AccessibleJTreeNode#getCurrentAccessibleContext()::: accessible tree node get current accessible context:::c->getCurrentComponent->if->return->c->getAccessibleContext->else->return
AccessBridge.AccessibleJTreeNode#getCurrentComponent()::: accessible tree node get current component:::debugString->if->tree->isVisible->r->tree->getCellRenderer->if->debugString->return->ui->tree->getUI->if->row->ui->getRowForPath->selected->tree->isPathSelected->expanded->tree->isExpanded->hasFocus->retval->r->getTreeCellRendererComponent->retval->getClass->debugString->return->debugString->return
AccessBridge.AccessibleJTreeNode#getAccessibleName():::Get the accessible name of this object.:::debugString->ac->getCurrentAccessibleContext->if->name->ac->getAccessibleName->if->name->isEmpty->retval->ac->getAccessibleName->debugString->return->else->return->if->accessibleName->isEmpty->return->else->return
AccessBridge.AccessibleJTreeNode#setAccessibleName(String):::Set the localized accessible name of this object.:::ac->getCurrentAccessibleContext->if->ac->setAccessibleName->else->super->setAccessibleName
AccessBridge.AccessibleJTreeNode#getAccessibleDescription():::Get the accessible description of this object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleDescription->else->return->super->getAccessibleDescription
AccessBridge.AccessibleJTreeNode#setAccessibleDescription(String):::Set the accessible description of this object.:::ac->getCurrentAccessibleContext->if->ac->setAccessibleDescription->else->super->setAccessibleDescription
AccessBridge.AccessibleJTreeNode#getAccessibleRole():::Get the role of this object.:::ac->getCurrentAccessibleContext->if->return->ac->getAccessibleRole->else->return
AccessBridge.AccessibleJTreeNode#getAccessibleStateSet():::Get the state set of this object.:::if->return->ac->getCurrentAccessibleContext->states->row->tree->getUI->getRowForPath->lsr->tree->getLeadSelectionRow->if->ac->getAccessibleStateSet->else->new->AccessibleStateSet->if->isShowing->states->add->else->if->states->contains->states->remove->if->isVisible->states->add->else->if->states->contains->states->remove->if->tree->isPathSelected->states->add->if->states->add->if->states->add->if->tree->isExpanded->states->add->else->states->add->if->tree->isEditable->states->add->return
AccessBridge.AccessibleJTreeNode#getAccessibleParent():::Get the Accessible parent of this object.:::if->objPath->path->getPath->if->objParent->if->treeModel->getIndexOfChild->objParentPath->new->ObjectArr->arraycopy->parentPath->new->TreePath->new->AccessibleJTreeNode->this->setAccessibleParent->else->if->this->setAccessibleParent->return
AccessBridge.AccessibleJTreeNode#getAccessibleIndexInParent():::Get the index of this object in its accessible parent.:::if->getAccessibleParent->if->objPath->path->getPath->if->objParent->if->treeModel->getIndexOfChild->return
AccessBridge.AccessibleJTreeNode#getAccessibleChildrenCount():::Returns the number of accessible children in the object.:::if->return->treeModel->getChildCount->return
AccessBridge.AccessibleJTreeNode#getAccessibleChild(int):::Return the specified Accessible child of the object.:::if->getAccessibleChildrenCount->return->else->childObj->treeModel->getChild->objPath->path->getPath->objChildPath->new->ObjectArr->arraycopy->childPath->new->TreePath->return->new->AccessibleJTreeNode
AccessBridge.AccessibleJTreeNode#getLocale():::Gets the locale of the component:::if->return->ac->getCurrentAccessibleContext->if->return->ac->getLocale->else->return->tree->getLocale
AccessBridge.AccessibleJTreeNode#addPropertyChangeListener(PropertyChangeListener):::Add a PropertyChangeListener to the listener list:::ac->getCurrentAccessibleContext->if->ac->addPropertyChangeListener->else->super->addPropertyChangeListener
AccessBridge.AccessibleJTreeNode#removePropertyChangeListener(PropertyChangeListener):::Remove a PropertyChangeListener from the listener list:::ac->getCurrentAccessibleContext->if->ac->removePropertyChangeListener->else->super->removePropertyChangeListener
AccessBridge.AccessibleJTreeNode#getAccessibleAction():::Get the AccessibleAction associated with this object:::return
AccessBridge.AccessibleJTreeNode#getAccessibleComponent():::Get the AccessibleComponent associated with this object:::return
AccessBridge.AccessibleJTreeNode#getAccessibleSelection():::Get the AccessibleSelection associated with this object if one exists:::ac->getCurrentAccessibleContext->if->return->getCurrentAccessibleContext->getAccessibleSelection->else->return
AccessBridge.AccessibleJTreeNode#getAccessibleText():::Get the AccessibleText associated with this object if one exists:::ac->getCurrentAccessibleContext->if->return->getCurrentAccessibleContext->getAccessibleText->else->return
AccessBridge.AccessibleJTreeNode#getAccessibleValue():::Get the AccessibleValue associated with this object if one exists:::ac->getCurrentAccessibleContext->if->return->getCurrentAccessibleContext->getAccessibleValue->else->return
AccessBridge.AccessibleJTreeNode#getBackground():::Get the background color of this object.:::ac->getCurrentAccessibleContext->if->return->getBackground->else->c->getCurrentComponent->if->return->c->getBackground->else->return
AccessBridge.AccessibleJTreeNode#setBackground(Color):::Set the background color of this object.:::ac->getCurrentAccessibleContext->if->setBackground->else->cp->getCurrentComponent->if->cp->setBackground
AccessBridge.AccessibleJTreeNode#getForeground():::Get the foreground color of this object.:::ac->getCurrentAccessibleContext->if->return->getForeground->else->c->getCurrentComponent->if->return->c->getForeground->else->return
AccessBridge.AccessibleJTreeNode#setForeground(Color)::: accessible tree node set foreground:::ac->getCurrentAccessibleContext->if->setForeground->else->cp->getCurrentComponent->if->cp->setForeground
AccessBridge.AccessibleJTreeNode#getCursor()::: accessible tree node get cursor:::ac->getCurrentAccessibleContext->if->return->getCursor->else->c->getCurrentComponent->if->return->c->getCursor->else->ap->getAccessibleParent->if->return->getCursor->else->return
AccessBridge.AccessibleJTreeNode#setCursor(Cursor)::: accessible tree node set cursor:::ac->getCurrentAccessibleContext->if->setCursor->else->cp->getCurrentComponent->if->cp->setCursor
AccessBridge.AccessibleJTreeNode#getFont()::: accessible tree node get font:::ac->getCurrentAccessibleContext->if->return->getFont->else->c->getCurrentComponent->if->return->c->getFont->else->return
AccessBridge.AccessibleJTreeNode#setFont(Font)::: accessible tree node set font:::ac->getCurrentAccessibleContext->if->setFont->else->c->getCurrentComponent->if->c->setFont
AccessBridge.AccessibleJTreeNode#getFontMetrics(Font)::: accessible tree node get font metrics:::ac->getCurrentAccessibleContext->if->return->getFontMetrics->else->c->getCurrentComponent->if->return->c->getFontMetrics->else->return
AccessBridge.AccessibleJTreeNode#isEnabled()::: accessible tree node is enabled:::ac->getCurrentAccessibleContext->if->return->isEnabled->else->c->getCurrentComponent->if->return->c->isEnabled->else->return
AccessBridge.AccessibleJTreeNode#setEnabled(boolean)::: accessible tree node set enabled:::ac->getCurrentAccessibleContext->if->setEnabled->else->c->getCurrentComponent->if->c->setEnabled
AccessBridge.AccessibleJTreeNode#isVisible()::: accessible tree node is visible:::if->return->pathBounds->tree->getPathBounds->parentBounds->tree->getVisibleRect->if->parentBounds->intersects->return->else->return
AccessBridge.AccessibleJTreeNode#setVisible(boolean)::: accessible tree node set visible:::
AccessBridge.AccessibleJTreeNode#isShowing()::: accessible tree node is showing:::return->tree->isShowing->isVisible
AccessBridge.AccessibleJTreeNode#contains(Point)::: accessible tree node contains:::ac->getCurrentAccessibleContext->if->r->getBounds->return->r->contains->else->c->getCurrentComponent->if->r->c->getBounds->return->r->contains->else->return->getBounds->contains
AccessBridge.AccessibleJTreeNode#getLocationOnScreen()::: accessible tree node get location on screen:::if->treeLocation->tree->getLocationOnScreen->pathBounds->tree->getPathBounds->if->nodeLocation->new->Point->nodeLocation->translate->return->else->return->else->return
AccessBridge.AccessibleJTreeNode#getLocationInJTree()::: accessible tree node get location in tree:::r->tree->getPathBounds->if->return->r->getLocation->else->return
AccessBridge.AccessibleJTreeNode#getLocation()::: accessible tree node get location:::r->getBounds->if->return->r->getLocation->else->return
AccessBridge.AccessibleJTreeNode#setLocation(Point)::: accessible tree node set location:::
AccessBridge.AccessibleJTreeNode#getBounds()::: accessible tree node get bounds:::if->return->r->tree->getPathBounds->parent->getAccessibleParent->if->parentLoc->getLocationInJTree->if->r->translate->else->return->return
AccessBridge.AccessibleJTreeNode#setBounds(Rectangle)::: accessible tree node set bounds:::ac->getCurrentAccessibleContext->if->setBounds->else->c->getCurrentComponent->if->c->setBounds
AccessBridge.AccessibleJTreeNode#getSize()::: accessible tree node get size:::return->getBounds->getSize
AccessBridge.AccessibleJTreeNode#setSize(Dimension)::: accessible tree node set size:::ac->getCurrentAccessibleContext->if->setSize->else->c->getCurrentComponent->if->c->setSize
AccessBridge.AccessibleJTreeNode#getAccessibleAt(Point):::Returns the Accessible child, if one exists, contained at the local coordinate Point:::ac->getCurrentAccessibleContext->if->return->getAccessibleAt->else->return
AccessBridge.AccessibleJTreeNode#isFocusTraversable()::: accessible tree node is focus traversable:::ac->getCurrentAccessibleContext->if->return->isFocusTraversable->else->c->getCurrentComponent->if->return->c->isFocusable->else->return
AccessBridge.AccessibleJTreeNode#requestFocus()::: accessible tree node request focus:::ac->getCurrentAccessibleContext->if->requestFocus->else->c->getCurrentComponent->if->c->requestFocus
AccessBridge.AccessibleJTreeNode#addFocusListener(FocusListener)::: accessible tree node add focus listener:::ac->getCurrentAccessibleContext->if->addFocusListener->else->c->getCurrentComponent->if->c->addFocusListener
AccessBridge.AccessibleJTreeNode#removeFocusListener(FocusListener)::: accessible tree node remove focus listener:::ac->getCurrentAccessibleContext->if->removeFocusListener->else->c->getCurrentComponent->if->c->removeFocusListener
AccessBridge.AccessibleJTreeNode#getAccessibleSelectionCount():::Returns the number of items currently selected:::count->childCount->getAccessibleChildrenCount->for->i->return
AccessBridge.AccessibleJTreeNode#getAccessibleSelection(int):::Returns an Accessible representing the specified selected item in the object:::childCount->getAccessibleChildrenCount->if->return->count->for->j->return
AccessBridge.AccessibleJTreeNode#isAccessibleChildSelected(int):::Returns true if the current child of this object is selected.:::childCount->getAccessibleChildrenCount->if->return->else->childPath->getChildTreePath->return->tree->isPathSelected
AccessBridge.AccessibleJTreeNode#addAccessibleSelection(int):::Adds the specified selected item in the object to the object's selection:::if->return->model->tree->getModel->if->if->getAccessibleChildrenCount->path->getChildTreePath->tree->addSelectionPath
AccessBridge.AccessibleJTreeNode#removeAccessibleSelection(int):::Removes the specified selected item in the object from the object's selection:::if->return->model->tree->getModel->if->if->getAccessibleChildrenCount->path->getChildTreePath->tree->removeSelectionPath
AccessBridge.AccessibleJTreeNode#clearAccessibleSelection():::Clears the selection in the object, so that nothing in the object is selected.:::childCount->getAccessibleChildrenCount->for->i
AccessBridge.AccessibleJTreeNode#selectAllAccessibleSelection():::Causes every selected item in the object to be selected if the object supports multiple selections.:::if->return->model->tree->getModel->if->childCount->getAccessibleChildrenCount->path->for->i
AccessBridge.AccessibleJTreeNode#getAccessibleActionCount():::Returns the number of accessible actions available in this tree node:::ac->getCurrentAccessibleContext->if->aa->ac->getAccessibleAction->if->return->aa->getAccessibleActionCount->return
AccessBridge.AccessibleJTreeNode#getAccessibleActionDescription(int):::Return a description of the specified action of the tree node:::if->getAccessibleActionCount->return->ac->getCurrentAccessibleContext->if->return->else->if->aa->ac->getAccessibleAction->if->return->aa->getAccessibleActionDescription->return
AccessBridge.AccessibleJTreeNode#doAccessibleAction(int):::Perform the specified Action on the tree node:::if->getAccessibleActionCount->return->ac->getCurrentAccessibleContext->if->if->tree->isExpanded->tree->collapsePath->else->tree->expandPath->return->else->if->aa->ac->getAccessibleAction->if->return->aa->doAccessibleAction->return
AccessBridge.InvocationUtils#invokeAndWait(Callable, AccessibleExtendedTable):::Invokes a Callable in the AppContext of the given Accessible and waits for it to finish blocking the caller thread.:::if->return->invokeAndWait->throw->new->RuntimeException
AccessBridge.InvocationUtils#invokeAndWait(Callable, Accessible):::Invokes a Callable in the AppContext of the given Accessible and waits for it to finish blocking the caller thread.:::if->return->invokeAndWait->if->return->invokeAndWait->throw->new->RuntimeException
AccessBridge.InvocationUtils#invokeAndWait(Callable, Component):::Invokes a Callable in the AppContext of the given Component and waits for it to finish blocking the caller thread.:::return->SunToolkit->targetToAppContext->invokeAndWait
AccessBridge.InvocationUtils#invokeAndWait(Callable, AccessibleContext):::Invokes a Callable in the AppContext mapped to the given AccessibleContext and waits for it to finish blocking the caller thread.:::targetContext->AWTAccessor->getAccessibleContextAccessor->getAppContext->if->return->invokeAndWait->else->if->source->getSource->if->return->invokeAndWait->throw->new->RuntimeException
AccessBridge.InvocationUtils#invokeAndWait(Callable, AppContext)::: invocation utils invoke and wait:::wrapper->new->CallableWrapper<T>->try->invokeAndWait->result->wrapper->getResult->updateAppContextMap->return->catch->throw->new->RuntimeException->finally
AccessBridge.InvocationUtils#invokeAndWait(Runnable, AppContext)::: invocation utils invoke and wait:::eq->SunToolkit->getSystemEventQueueImplPP->lock->new->Object->source->Toolkit->getDefaultToolkit->event->new->InvocationEvent->synchronized->eq->postEvent->lock->wait->eventThrowable->event->getThrowable->if->throw->new->InvocationTargetException
AccessBridge.InvocationUtils#registerAccessibleContext(AccessibleContext, AppContext):::Maps the AccessibleContext to the AppContext which should be used to dispatch events related to the AccessibleContext:::if->AWTAccessor->getAccessibleContextAccessor->setAppContext
AccessBridge.InvocationUtils#updateAppContextMap(T, AppContext)::: invocation utils update app context map:::if->registerAccessibleContext
AccessBridge.InvocationUtils.CallableWrapper#run()::: callable wrapper run:::try->if->callable->call->catch->finally
AccessBridge.InvocationUtils.CallableWrapper#getResult()::: callable wrapper get result:::if->throw->return
ProviderImpl#getName()::: provider impl get name:::return
ProviderImpl#activate()::: provider impl activate:::new->AccessBridge

sun.security.smartcardio.CardImpl#checkState()->void::: card impl check state
sun.security.smartcardio.CardImpl#isValid()->boolean::: card impl is valid
sun.security.smartcardio.CardImpl#handleError(PCSCException)->void::: card impl handle error
sun.security.smartcardio.CardImpl#getATR()->ATR::: card impl get r
sun.security.smartcardio.CardImpl#getProtocol()->String::: card impl get protocol
sun.security.smartcardio.CardImpl#getBasicChannel()->CardChannel::: card impl get basic channel
sun.security.smartcardio.CardImpl#openLogicalChannel()->CardChannel::: card impl open logical channel
sun.security.smartcardio.CardImpl#checkExclusive()->void::: card impl check exclusive
sun.security.smartcardio.CardImpl#beginExclusive()->void::: card impl begin exclusive
sun.security.smartcardio.CardImpl#endExclusive()->void::: card impl end exclusive
sun.security.smartcardio.CardImpl#transmitControlCommand(int, byte[])->byte[]::: card impl transmit control command
sun.security.smartcardio.CardImpl#disconnect(boolean)->void::: card impl disconnect
sun.security.smartcardio.CardImpl#toString()->String::: card impl to string
sun.security.smartcardio.CardImpl#finalize()->void::: card impl finalize
sun.security.smartcardio.ChannelImpl#checkClosed()->void::: channel impl check closed
sun.security.smartcardio.ChannelImpl#getCard()->Card::: channel impl get card
sun.security.smartcardio.ChannelImpl#getChannelNumber()->int::: channel impl get channel number
sun.security.smartcardio.ChannelImpl#transmit(CommandAPDU)->ResponseAPDU::: channel impl transmit
sun.security.smartcardio.ChannelImpl#transmit(ByteBuffer, ByteBuffer)->int::: channel impl transmit
sun.security.smartcardio.ChannelImpl#close()->void::: channel impl close
sun.security.smartcardio.ChannelImpl#toString()->String::: channel impl to string
sun.security.smartcardio.PCSC#checkAvailable()->void::: c check available
sun.security.smartcardio.PCSC#SCardEstablishContext(int)->long::: c  card establish context
sun.security.smartcardio.PCSC#SCardListReaders(long)->String[]::: c  card list readers
sun.security.smartcardio.PCSC#SCardConnect(long, String, int, int)->long::: c  card connect
sun.security.smartcardio.PCSC#SCardTransmit(long, int, byte[], int, int)->byte[]::: c  card transmit
sun.security.smartcardio.PCSC#SCardStatus(long, byte[])->byte[]::: c  card status
sun.security.smartcardio.PCSC#SCardDisconnect(long, int)->void::: c  card disconnect
sun.security.smartcardio.PCSC#SCardGetStatusChange(long, long, int[], String[])->int[]::: c  card get status change
sun.security.smartcardio.PCSC#SCardBeginTransaction(long)->void::: c  card begin transaction
sun.security.smartcardio.PCSC#SCardEndTransaction(long, int)->void::: c  card end transaction
sun.security.smartcardio.PCSC#SCardControl(long, int, byte[])->byte[]::: c  card control
sun.security.smartcardio.PCSC#toString(byte[])->String::: c to string
sun.security.smartcardio.PCSCTerminals#initContext()->void::: terminals init context
sun.security.smartcardio.PCSCTerminals#list(State)->List::: terminals list
sun.security.smartcardio.PCSCTerminals#waitForChange(long)->boolean::: terminals wait for change
sun.security.smartcardio.PCSCTerminals#waitForCards(List, long, boolean)->List::: terminals wait for cards
sun.security.smartcardio.SunPCSC.Factory#engineTerminals()->CardTerminals:::Returns the available readers
sun.security.smartcardio.TerminalImpl#getName()->String::: terminal impl get name
sun.security.smartcardio.TerminalImpl#connect(String)->Card::: terminal impl connect
sun.security.smartcardio.TerminalImpl#isCardPresent()->boolean::: terminal impl is card present
sun.security.smartcardio.TerminalImpl#waitForCardPresent(long)->boolean::: terminal impl wait for card present
sun.security.smartcardio.TerminalImpl#waitForCardAbsent(long)->boolean::: terminal impl wait for card absent
sun.security.smartcardio.TerminalImpl#toString()->String::: terminal impl to string

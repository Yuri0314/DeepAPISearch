DCTree#toString():::Convert a tree to a pretty-printed string.:::s->new->StringWriter->try->new->DocPretty->print->catch->throw->new->AssertionError->finally->return->s->toString
DocCommentTable#hasComment(JCTree):::Check if a tree node has a corresponding doc comment.:::
DocCommentTable#getComment(JCTree):::Get the Comment token containing the doc comment, if any, for a tree node.:::
DocCommentTable#getCommentText(JCTree):::Get the plain text of the doc comment, if any, for a tree node.:::
DocCommentTable#getCommentTree(JCTree):::Get the parsed form of the doc comment as a DocTree:::
DocCommentTable#putComment(JCTree, Comment):::Set the Comment to be associated with a tree node.:::
DocPretty#print(DocTree):::Visitor method: print expression tree.:::try->if->print->else->tree->accept->catch->throw->ex->getMessage->new->IOException->finally
DocPretty#print(Object):::Print string, replacing all non-ascii character with unicode escapes.:::out->Convert->s->toString->escapeUnicode->write
DocPretty#print(List):::Print list.:::foreach->print
DocPretty#print(List, String):::Print list., with separators:::if->list->isEmpty->return->first->foreach->if->print->print
DocPretty#println():::Print new line.:::out->write
DocTreeMaker#instance(Context):::Get the TreeMaker instance.:::instance->context->get->if->new->DocTreeMaker->return
DocTreeMaker#at(int):::Reassign current position.:::return
DocTreeMaker#at(DiagnosticPosition):::Reassign current position.:::pos->getStartPosition->return
EndPosTable#getEndPos(JCTree):::This method will return the end position of a given tree, otherwise a Positions.NOPOS will be returned.:::
EndPosTable#storeEnd(JCTree, int):::Store ending position for a tree, the value of which is the greater of last error position and the given ending position.:::
EndPosTable#replaceTree(JCTree, JCTree):::Give an old tree and a new tree, the old tree will be replaced with the new tree, the position of the new tree will be that of the old tree.:::
JCTree#toString():::Convert a tree to a pretty-printed string.:::s->new->StringWriter->try->new->Pretty->printExpr->catch->throw->new->AssertionError->finally->return->s->toString
JCTree#setPos(int):::Set position field and return this tree.:::return
JCTree#setType(Type):::Set type field and return this tree.:::return
JCTree#accept(Visitor):::Visit this tree with a given visitor.:::
JCTree#clone():::Return a shallow copy of this tree.:::try->return->super->clone->catch->throw->new->RuntimeException->finally
JCTree#pos():::Get a default position for this tree node.:::return
JCTree.JCExpressionStatement#toString():::Convert a expression-statement tree to a pretty-printed string.:::s->new->StringWriter->try->new->Pretty->printStat->catch->throw->new->AssertionError->finally->return->s->toString
Pretty#align():::Align code to be indented to left margin.:::for->i
Pretty#indent():::Increase left margin by indentation width.:::
Pretty#undent():::Decrease left margin by indentation width.:::
Pretty#open(int, int):::Enter a new precedence level:::if->out->write
Pretty#close(int, int):::Leave precedence level:::if->out->write
Pretty#print(Object):::Print string, replacing all non-ascii character with unicode escapes.:::out->Convert->s->toString->escapeUnicode->write
Pretty#println():::Print new line.:::out->write
Pretty#printExpr(JCTree, int):::Visitor method: print expression tree.:::prevPrec->try->if->print->else->tree->accept->catch->e->ex->getMessage->new->IOException->e->initCause->throw->finally
Pretty#printExpr(JCTree):::Derived visitor method: print expression tree at minimum precedence level  for expression.:::printExpr
Pretty#printStat(JCTree):::Derived visitor method: print statement tree.:::printExpr
Pretty#printExprs(List, String):::Derived visitor method: print list of expression trees, separated by given string.:::if->trees->nonEmpty->printExpr->for->l->l->nonEmpty
Pretty#printExprs(List):::Derived visitor method: print list of expression trees, separated by commas.:::printExprs
Pretty#printStats(List):::Derived visitor method: print list of statements, each on a separate line.:::for->l->l->nonEmpty
Pretty#printFlags(long):::Print a set of modifiers.:::if->print->TreeInfo->flagNames->print->if->print->if->print
Pretty#printDocComment(JCTree):::Print documentation comment, if it exists:::if->dc->docComments->getCommentText->if->print->println->pos->endpos->lineEndPos->while->dc->length->align->print->if->dc->length->dc->charAt->print->dc->substring->print->println->lineEndPos->align->print->println->align
Pretty#printTypeParameters(List):::If type parameter list is non-empty, print it enclosed in  "<...>" brackets.:::if->trees->nonEmpty->print->printExprs->print
Pretty#printBlock(List):::Print a block.:::print->println->indent->printStats->undent->align->print
Pretty#printEnumBody(List):::Print a block.:::print->println->indent->first->for->l->l->nonEmpty->print->println->for->l->l->nonEmpty->undent->align->print
Pretty#isEnumerator(JCTree):::Is the given tree an enumerator definition?:::return->t->hasTag
Pretty#printUnit(JCCompilationUnit, JCClassDecl):::Print unit consisting of package clause and import statements in toplevel,  followed by class definition:::printDocComment->firstImport->for->l->l->nonEmpty->hasTag->hasTag->if->printStat->println
TreeInfo#isConstructor(JCTree):::Is tree a constructor declaration?:::if->tree->hasTag->name->return->else->return
TreeInfo#hasConstructors(List):::Is there a constructor declaration in the given list of trees?:::for->l->l->nonEmpty->return
TreeInfo#isSyntheticInit(JCTree):::Is statement an initializer for a synthetic field?:::if->stat->hasTag->exec->if->hasTag->assign->if->hasTag->select->if->flags->selected->name->if->return->return
TreeInfo#calledMethodName(JCTree):::If the expression is a method call, return the method name, null  otherwise.:::if->tree->hasTag->exec->if->hasTag->mname->TreeInfo->name->return->return
TreeInfo#isSelfCall(JCTree):::Is this a call to this or super?:::name->calledMethodName->if->names->return->else->return
TreeInfo#isThisQualifier(JCTree):::Is this tree a 'this' identifier?:::switch->tree->getTag->return->skipParens->isThisQualifier->id->return->return
TreeInfo#isIdentOrThisDotIdent(JCTree):::Is this tree an identifier, possibly qualified by 'this'?:::switch->tree->getTag->return->skipParens->isIdentOrThisDotIdent->return->return->isThisQualifier->return
TreeInfo#isSuperCall(JCTree):::Is this a call to super?:::name->calledMethodName->if->names->return->else->return
TreeInfo#isInitialConstructor(JCTree):::Is this a constructor whose first (non-synthetic) statement is not  of the form this(...)?:::app->firstConstructorCall->if->return->meth->name->return
TreeInfo#firstConstructorCall(JCTree):::Return the first call in a constructor definition.:::if->tree->hasTag->return->md->names->if->return->if->return->stats->while->stats->nonEmpty->isSyntheticInit->if->stats->isEmpty->return->if->hasTag->return->exec->if->hasTag->return->return
TreeInfo#isDiamond(JCTree):::Return true if a tree represents a diamond new expr.:::switch->tree->getTag->return->getTypeArguments->isEmpty->return->isDiamond->return->isDiamond->return
TreeInfo#setPolyKind(JCTree, PolyKind):::set 'polyKind' on given tree:::switch->tree->getTag->break->break->break->throw->new->AssertionError
TreeInfo#setVarargsElement(JCTree, Type):::set 'varargsElement' on given tree:::switch->tree->getTag->break->break->break->throw->new->AssertionError
TreeInfo#isExpressionStatement(JCExpression):::Return true if the tree corresponds to an expression statement:::switch->tree->getTag->return->return
TreeInfo#isStatement(JCTree):::Return true if the tree corresponds to a statement:::return->tree->hasTag->tree->hasTag->tree->hasTag
TreeInfo#isStaticSelector(JCTree, Names):::Return true if the AST corresponds to a static select of the kind A.B:::if->return->switch->base->getTag->id->return->isStaticSym->return->isStaticSym->isStaticSelector->return->return->isStaticSelector->return
TreeInfo#isNull(JCTree):::Return true if a tree represents the null literal.:::if->tree->hasTag->return->lit->return
TreeInfo#isInAnnotation(Env, JCTree):::Return true iff this tree is a child of some annotation.:::tp->TreePath->getPath->if->foreach->if->t->getKind->return->return
TreeInfo#firstStatPos(JCTree):::The position of the first statement in a block, or the position of  the block itself if it is empty.:::if->tree->hasTag->nonEmpty->return->else->return
TreeInfo#endPos(JCTree):::The end position of given tree, if it is a block with  defined endpos.:::if->tree->hasTag->return->else->if->tree->hasTag->return->endPos->else->if->tree->hasTag->t->return->nonEmpty->last->endPos->else->return
TreeInfo#getStartPos(JCTree):::Get the start position for a tree node:::if->return->switch->tree->getTag->md->return->isEmpty->pd->return->isEmpty->return->getStartPos->return->getStartPos->return->getOperand->getStartPos->node->if->return->break->return->getStartPos->return->getStartPos->return->getStartPos->node->if->return->if->nonEmpty->return->getStartPos->return->getStartPos->return->getStartPos->return->getStartPos->return->getStartPos->return->getStartPos->node->if->nonEmpty->if->hasTag->hasTag->return->getStartPos->else->return->getStartPos->else->return->getStartPos->node->if->return->getStartPos->break->node->if->return->else->if->return->else->if->return->else->return->getStartPos->node->if->nonEmpty->return->getStartPos->return
TreeInfo#getEndPos(JCTree, EndPosTable):::The end position of given tree, given  a table of end positions generated by the parser:::if->return->if->return->endPos->mapPos->endPosTable->getEndPos->if->return->switch->tree->getTag->return->getOperand->getEndPos->return->last->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->node->if->return->getEndPos->else->return->getEndPos->return->getEndPos->return->last->getEndPos->return->getEndPos->return->last->getEndPos->node->if->return->getEndPos->else->if->isEmpty->return->last->getEndPos->else->return->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->node->if->nonEmpty->return->last->getEndPos->return
TreeInfo#diagEndPos(JCTree):::A DiagnosticPosition with the preferred position set to the  end position of given tree, if it is a block with  defined endpos.:::endPos->TreeInfo->endPos->return->new->DiagnosticPosition
TreeInfo#finalizerPos(JCTree, PosKind):::The position of the finalizer of given try/synchronized statement.:::if->tree->hasTag->t->Assert->checkNonNull->return->posKind->toPos->else->if->tree->hasTag->return->endPos->else->throw->new->AssertionError
TreeInfo#positionFor(Symbol, JCTree):::Find the position for reporting an error about a symbol, where  that symbol is defined somewhere in the given tree.:::decl->declarationFor->return
TreeInfo#diagnosticPositionFor(Symbol, JCTree):::Find the position for reporting an error about a symbol, where  that symbol is defined somewhere in the given tree.:::decl->declarationFor->return->pos
TreeInfo#declarationFor(Symbol, JCTree):::Find the declaration for a symbol, where  that symbol is defined somewhere in the given tree.:::s->new->DeclScanner->tree->accept->return
TreeInfo#referencedStatement(JCLabeledStatement):::Return the statement referenced by a label:::t->do->while->t->hasTag->switch->t->getTag->return->return
TreeInfo#skipParens(JCExpression):::Skip parens and return the enclosed expression:::while->tree->hasTag->return
TreeInfo#skipParens(JCTree):::Skip parens and return the enclosed expression:::if->tree->hasTag->return->skipParens->else->return
TreeInfo#types(List):::Return the types of a list of trees.:::ts->new->ListBuffer<>->for->l->l->nonEmpty->return->ts->toList
TreeInfo#name(JCTree):::If this tree is an identifier or a field or a parameterized type,  return its name, otherwise return null.:::switch->tree->getTag->return->return->return->name->return
TreeInfo#fullName(JCTree):::If this tree is a qualified identifier, its return fully qualified name,  otherwise return null.:::skipParens->switch->tree->getTag->return->sname->fullName->return->sname->name->append->return
TreeInfo#symbol(JCTree):::If this tree is an identifier or a field, return its symbol,  otherwise return null.:::skipParens->switch->tree->getTag->return->return->return->symbol->return->symbol->return->return
TreeInfo#nonstaticSelect(JCTree):::Return true if this is a nonstatic selection.:::skipParens->if->tree->hasTag->return->s->e->symbol->return
TreeInfo#setSymbol(JCTree, Symbol):::If this tree is an identifier or a field, set its symbol, otherwise skip.:::skipParens->switch->tree->getTag->break->break
TreeInfo#flags(JCTree):::If this tree is a declaration or a block, return its flags field,  otherwise return 0.:::switch->tree->getTag->return->return->return->return->return
TreeInfo#firstFlag(long):::Return first (smallest) flag in `flags':  pre: flags != 0:::flag->while->return
TreeInfo#flagNames(long):::Return flags as a string, separated by " ".:::return->Flags->toString->trim
TreeInfo#opPrec(JCTree.Tag):::Map operators to their precedence levels.:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->throw->new->AssertionError
TreeInfo#typeIn(JCExpression):::Returns the underlying type of the tree if it is an annotated type, or the tree itself otherwise.:::switch->tree->getTag->return->return->throw->new->AssertionError
TreeMaker#instance(Context):::Get the TreeMaker instance.:::instance->context->get->if->new->TreeMaker->return
TreeMaker#forToplevel(JCCompilationUnit):::Create a new tree maker for a given toplevel.:::return->new->TreeMaker
TreeMaker#at(int):::Reassign current position.:::return
TreeMaker#at(DiagnosticPosition):::Reassign current position.:::pos->getStartPosition->return
TreeMaker#TopLevel(List):::Create given tree node at current position.:::foreach->Assert->node->getClass->getSimpleName->check->tree->new->JCCompilationUnit->return
TreeMaker#Ident Ident(Symbol):::Create an identifier from a symbol.:::return->sym->flatName->new->JCIdent->setPos->setType
TreeMaker#Select(JCExpression, Symbol):::Create a selection node from a qualifier tree and a symbol.:::return->new->JCFieldAccess->setPos->setType
TreeMaker#QualIdent(Symbol):::Create a qualified identifier from a symbol, adding enough qualifications  to make the reference unique.:::return->isUnqualifiable->Ident->QualIdent->Select
TreeMaker#Ident(JCVariableDecl):::Create an identifier that refers to the variable declared in given variable  declaration.:::return->Ident
TreeMaker#Idents(List):::Create a list of identifiers referring to the variables declared  in given list of variable declarations.:::ids->new->ListBuffer<>->for->l->l->nonEmpty->return->ids->toList
TreeMaker#This(Type):::Create a tree representing `this', given its type.:::return->new->VarSymbol->Ident
TreeMaker#QualThis(Type):::Create a tree representing qualified `this' given its type:::return->Type->new->VarSymbol->Select
TreeMaker#ClassLiteral(ClassSymbol):::Create a tree representing a class literal.:::return->ClassLiteral
TreeMaker#ClassLiteral(Type):::Create a tree representing a class literal.:::lit->new->VarSymbol->return->Type->Select
TreeMaker#Super(Type, TypeSymbol):::Create a tree representing `super', given its type and owner.:::return->new->VarSymbol->Ident
TreeMaker#App(JCExpression, List):::Create a method invocation from a method tree and a list of argument trees.:::return->Apply->getReturnType->setType
TreeMaker#App(JCExpression):::Create a no-arg method invocation from a method tree:::return->List->nil->Apply->getReturnType->setType
TreeMaker#Create(Symbol, List):::Create a method invocation from a method tree and a list of argument trees.:::t->erasure->newclass->Type->NewClass->newclass->setType->return
TreeMaker#Type(Type):::Create a tree representing given type.:::if->return->tp->switch->t->getTag->t->getTag->TypeIdent->break->Ident->break->a->TypeBoundKind->Type->Wildcard->break->switch->t->getKind->tu->la->new->ListBuffer<>->foreach->tu->getAlternativeTypes->la->Type->add->la->toList->TypeUnion->break->it->la->new->ListBuffer<>->foreach->it->getExplicitComponents->la->Type->add->la->toList->TypeIntersection->break->outer->t->getEnclosingType->clazz->outer->hasTag->Type->Select->QualIdent->t->getTypeArguments->isEmpty->t->getTypeArguments->Types->TypeApply->break->break->types->elemtype->Type->TypeArray->break->TypeIdent->break->throw->new->AssertionError->return->tp->setType
TreeMaker#Types(List):::Create a list of trees representing given list of types.:::lb->new->ListBuffer<>->for->l->l->nonEmpty->return->lb->toList
TreeMaker#VarDef(VarSymbol, JCExpression):::Create a variable definition from a variable symbol and an initializer  expression.:::return->v->flags->v->getRawAttributes->Annotations->Modifiers->Type->new->JCVariableDecl->setPos->setType
TreeMaker#Annotations(List):::Create annotation trees from annotations.:::if->return->List->nil->result->new->ListBuffer<>->for->i->i->nonEmpty->return->result->toList
TreeMaker#Annotation Annotation(Attribute):::Create an annotation tree from an attribute.:::return->annotationBuilder->translate
TreeMaker#MethodDef(MethodSymbol, JCBlock):::Create a method definition from a method symbol and a method body.:::return->MethodDef
TreeMaker#MethodDef(MethodSymbol, Type, JCBlock):::Create a method definition from a method symbol, method type  and a method body.:::return->m->flags->m->getRawAttributes->Annotations->Modifiers->mtype->getReturnType->Type->mtype->getTypeArguments->TypeParams->mtype->getParameterTypes->Params->mtype->getThrownTypes->Types->new->JCMethodDecl->setPos->setType
TreeMaker#TypeParameter TypeParam(Name, TypeVar):::Create a type parameter tree from its name and type.:::return->types->getBounds->Types->TypeParameter->setPos->setType
TreeMaker#TypeParams(List):::Create a list of type parameter trees from a list of type variables.:::tparams->new->ListBuffer<>->for->l->l->nonEmpty->return->tparams->toList
TreeMaker#Param(Name, Type, Symbol):::Create a value parameter tree from its name, type, and owner.:::return->new->VarSymbol->VarDef
TreeMaker#Params(List, Symbol):::Create a a list of value parameter trees x0, ..., xn from a list of  their types and an their owner.:::params->new->ListBuffer<>->mth->if->argtypes->length->length->foreach->params->VarDef->append->else->i->for->l->l->nonEmpty->return->params->toList
TreeMaker#Call(JCExpression):::Wrap a method invocation in an expression statement or return statement,  depending on whether the method invocation expression's type is void.:::return->hasTag->Exec->Return
TreeMaker#Assignment(Symbol, JCExpression):::Construct an assignment from a variable symbol and a right hand side.:::return->Ident->Assign->setType->Exec
TreeMaker#Indexed(Symbol, JCExpression):::Construct an index expression from a variable and an expression.:::tree->QualIdent->new->JCArrayAccess->return
TreeMaker#TypeCast TypeCast(Type, JCExpression):::Make an attributed type cast expression.:::return->Type->TypeCast->setType
TreeMaker#isUnqualifiable(Symbol):::Can given symbol be referred to in unqualified form?:::if->return->else->if->it->getSymbolsByName->iterator->if->it->hasNext->s->it->next->return->it->hasNext->members->getSymbolsByName->iterator->if->it->hasNext->s->it->next->return->it->hasNext->getSymbolsByName->iterator->if->it->hasNext->s->it->next->return->it->hasNext->return
TreeMaker#paramName(int):::The name of synthetic parameter number `i'.:::return->names->fromString
TreeMaker#typaramName(int):::The name of synthetic type parameter number `i'.:::return->names->fromString
TreeScanner#scan(JCTree):::Visitor method: Scan a single node.:::if->tree->accept
TreeScanner#scan(List):::Visitor method: scan a list of nodes.:::if->for->l->l->nonEmpty
TreeTranslator#translate(T):::Visitor method: Translate a single node.:::if->return->else->tree->accept->tmpResult->return
TreeTranslator#translate(List):::Visitor method: translate a list of nodes.:::if->return->for->l->l->nonEmpty->return
TreeTranslator#translateVarDefs(List)::: Visitor method: translate a list of variable definitions.:::for->l->l->nonEmpty->return
TreeTranslator#translateTypeParams(List)::: Visitor method: translate a list of type parameters.:::for->l->l->nonEmpty->return
TreeTranslator#translateCases(List)::: Visitor method: translate a list of case parts of switch statements.:::for->l->l->nonEmpty->return
TreeTranslator#translateCatchers(List)::: Visitor method: translate a list of catch clauses in try statements.:::for->l->l->nonEmpty->return
TreeTranslator#translateAnnotations(List)::: Visitor method: translate a list of catch clauses in try statements.:::for->l->l->nonEmpty->return

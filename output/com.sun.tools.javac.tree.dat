com.sun.tools.javac.tree.DCTree#getSourcePosition(DCDocComment)->long::: tree get source position
com.sun.tools.javac.tree.DCTree#pos(DCDocComment)->JCDiagnostic.DiagnosticPosition::: tree pos
com.sun.tools.javac.tree.DCTree#toString()->String:::Convert a tree to a pretty-printed string.
com.sun.tools.javac.tree.DCTree.DCEndPosTree#getEndPos(DCDocComment)->int::: end pos tree get end pos
com.sun.tools.javac.tree.DCTree.DCEndPosTree#setEndPos(int)->T::: end pos tree set end pos
com.sun.tools.javac.tree.DCTree.DCDocComment#getKind()->Kind::: doc comment get kind
com.sun.tools.javac.tree.DCTree.DCDocComment#accept(DocTreeVisitor, D)->R::: doc comment accept
com.sun.tools.javac.tree.DCTree.DCDocComment#getFirstSentence()->List::: doc comment get first sentence
com.sun.tools.javac.tree.DCTree.DCDocComment#getFullBody()->List::: doc comment get full body
com.sun.tools.javac.tree.DCTree.DCDocComment#getBody()->List::: doc comment get body
com.sun.tools.javac.tree.DCTree.DCDocComment#getBlockTags()->List::: doc comment get block tags
com.sun.tools.javac.tree.DCTree.DCDocComment#getPreamble()->List::: doc comment get preamble
com.sun.tools.javac.tree.DCTree.DCDocComment#getPostamble()->List::: doc comment get postamble
com.sun.tools.javac.tree.DCTree.DCBlockTag#getTagName()->String::: block tag get tag name
com.sun.tools.javac.tree.DCTree.DCInlineTag#getTagName()->String::: inline tag get tag name
com.sun.tools.javac.tree.DCTree.DCAttribute#getKind()->Kind::: attribute get kind
com.sun.tools.javac.tree.DCTree.DCAttribute#accept(DocTreeVisitor, D)->R::: attribute accept
com.sun.tools.javac.tree.DCTree.DCAttribute#getName()->Name::: attribute get name
com.sun.tools.javac.tree.DCTree.DCAttribute#getValueKind()->ValueKind::: attribute get value kind
com.sun.tools.javac.tree.DCTree.DCAttribute#getValue()->List::: attribute get value
com.sun.tools.javac.tree.DCTree.DCAuthor#getKind()->Kind::: author get kind
com.sun.tools.javac.tree.DCTree.DCAuthor#accept(DocTreeVisitor, D)->R::: author accept
com.sun.tools.javac.tree.DCTree.DCAuthor#getName()->List::: author get name
com.sun.tools.javac.tree.DCTree.DCComment#getKind()->Kind::: comment get kind
com.sun.tools.javac.tree.DCTree.DCComment#accept(DocTreeVisitor, D)->R::: comment accept
com.sun.tools.javac.tree.DCTree.DCComment#getBody()->String::: comment get body
com.sun.tools.javac.tree.DCTree.DCDeprecated#getKind()->Kind::: deprecated get kind
com.sun.tools.javac.tree.DCTree.DCDeprecated#accept(DocTreeVisitor, D)->R::: deprecated accept
com.sun.tools.javac.tree.DCTree.DCDeprecated#getBody()->List::: deprecated get body
com.sun.tools.javac.tree.DCTree.DCDocRoot#getKind()->Kind::: doc root get kind
com.sun.tools.javac.tree.DCTree.DCDocRoot#accept(DocTreeVisitor, D)->R::: doc root accept
com.sun.tools.javac.tree.DCTree.DCDocType#getKind()->Kind::: doc type get kind
com.sun.tools.javac.tree.DCTree.DCDocType#accept(DocTreeVisitor, D)->R::: doc type accept
com.sun.tools.javac.tree.DCTree.DCDocType#getText()->String::: doc type get text
com.sun.tools.javac.tree.DCTree.DCEndElement#getKind()->Kind::: end element get kind
com.sun.tools.javac.tree.DCTree.DCEndElement#accept(DocTreeVisitor, D)->R::: end element accept
com.sun.tools.javac.tree.DCTree.DCEndElement#getName()->Name::: end element get name
com.sun.tools.javac.tree.DCTree.DCEntity#getKind()->Kind::: entity get kind
com.sun.tools.javac.tree.DCTree.DCEntity#accept(DocTreeVisitor, D)->R::: entity accept
com.sun.tools.javac.tree.DCTree.DCEntity#getName()->Name::: entity get name
com.sun.tools.javac.tree.DCTree.DCErroneous#getKind()->Kind::: erroneous get kind
com.sun.tools.javac.tree.DCTree.DCErroneous#accept(DocTreeVisitor, D)->R::: erroneous accept
com.sun.tools.javac.tree.DCTree.DCErroneous#getBody()->String::: erroneous get body
com.sun.tools.javac.tree.DCTree.DCErroneous#getDiagnostic()->Diagnostic::: erroneous get diagnostic
com.sun.tools.javac.tree.DCTree.DCErroneous#getTree()->JCTree::: erroneous get tree
com.sun.tools.javac.tree.DCTree.DCErroneous#getStartPosition()->int::: erroneous get start position
com.sun.tools.javac.tree.DCTree.DCErroneous#getPreferredPosition()->int::: erroneous get preferred position
com.sun.tools.javac.tree.DCTree.DCErroneous#getEndPosition(EndPosTable)->int::: erroneous get end position
com.sun.tools.javac.tree.DCTree.DCHidden#getKind()->Kind::: hidden get kind
com.sun.tools.javac.tree.DCTree.DCHidden#accept(DocTreeVisitor, D)->R::: hidden accept
com.sun.tools.javac.tree.DCTree.DCHidden#getBody()->List::: hidden get body
com.sun.tools.javac.tree.DCTree.DCIdentifier#getKind()->Kind::: identifier get kind
com.sun.tools.javac.tree.DCTree.DCIdentifier#accept(DocTreeVisitor, D)->R::: identifier accept
com.sun.tools.javac.tree.DCTree.DCIdentifier#getName()->Name::: identifier get name
com.sun.tools.javac.tree.DCTree.DCIndex#getKind()->Kind::: index get kind
com.sun.tools.javac.tree.DCTree.DCIndex#accept(DocTreeVisitor, D)->R::: index accept
com.sun.tools.javac.tree.DCTree.DCIndex#getSearchTerm()->DocTree::: index get search term
com.sun.tools.javac.tree.DCTree.DCIndex#getDescription()->java.util.List::: index get description
com.sun.tools.javac.tree.DCTree.DCInheritDoc#getKind()->Kind::: inherit doc get kind
com.sun.tools.javac.tree.DCTree.DCInheritDoc#accept(DocTreeVisitor, D)->R::: inherit doc accept
com.sun.tools.javac.tree.DCTree.DCLink#getKind()->Kind::: link get kind
com.sun.tools.javac.tree.DCTree.DCLink#accept(DocTreeVisitor, D)->R::: link accept
com.sun.tools.javac.tree.DCTree.DCLink#getReference()->ReferenceTree::: link get reference
com.sun.tools.javac.tree.DCTree.DCLink#getLabel()->List::: link get label
com.sun.tools.javac.tree.DCTree.DCLiteral#getKind()->Kind::: literal get kind
com.sun.tools.javac.tree.DCTree.DCLiteral#accept(DocTreeVisitor, D)->R::: literal accept
com.sun.tools.javac.tree.DCTree.DCLiteral#getBody()->DCText::: literal get body
com.sun.tools.javac.tree.DCTree.DCParam#getKind()->Kind::: param get kind
com.sun.tools.javac.tree.DCTree.DCParam#accept(DocTreeVisitor, D)->R::: param accept
com.sun.tools.javac.tree.DCTree.DCParam#isTypeParameter()->boolean::: param is type parameter
com.sun.tools.javac.tree.DCTree.DCParam#getName()->IdentifierTree::: param get name
com.sun.tools.javac.tree.DCTree.DCParam#getDescription()->List::: param get description
com.sun.tools.javac.tree.DCTree.DCProvides#getKind()->Kind::: provides get kind
com.sun.tools.javac.tree.DCTree.DCProvides#accept(DocTreeVisitor, D)->R::: provides accept
com.sun.tools.javac.tree.DCTree.DCProvides#getServiceType()->ReferenceTree::: provides get service type
com.sun.tools.javac.tree.DCTree.DCProvides#getDescription()->List::: provides get description
com.sun.tools.javac.tree.DCTree.DCReference#getKind()->Kind::: reference get kind
com.sun.tools.javac.tree.DCTree.DCReference#accept(DocTreeVisitor, D)->R::: reference accept
com.sun.tools.javac.tree.DCTree.DCReference#getSignature()->String::: reference get signature
com.sun.tools.javac.tree.DCTree.DCReturn#getKind()->Kind::: return get kind
com.sun.tools.javac.tree.DCTree.DCReturn#accept(DocTreeVisitor, D)->R::: return accept
com.sun.tools.javac.tree.DCTree.DCReturn#getDescription()->List::: return get description
com.sun.tools.javac.tree.DCTree.DCSee#getKind()->Kind::: see get kind
com.sun.tools.javac.tree.DCTree.DCSee#accept(DocTreeVisitor, D)->R::: see accept
com.sun.tools.javac.tree.DCTree.DCSee#getReference()->List::: see get reference
com.sun.tools.javac.tree.DCTree.DCSerial#getKind()->Kind::: serial get kind
com.sun.tools.javac.tree.DCTree.DCSerial#accept(DocTreeVisitor, D)->R::: serial accept
com.sun.tools.javac.tree.DCTree.DCSerial#getDescription()->List::: serial get description
com.sun.tools.javac.tree.DCTree.DCSerialData#getKind()->Kind::: serial data get kind
com.sun.tools.javac.tree.DCTree.DCSerialData#accept(DocTreeVisitor, D)->R::: serial data accept
com.sun.tools.javac.tree.DCTree.DCSerialData#getDescription()->List::: serial data get description
com.sun.tools.javac.tree.DCTree.DCSerialField#getKind()->Kind::: serial field get kind
com.sun.tools.javac.tree.DCTree.DCSerialField#accept(DocTreeVisitor, D)->R::: serial field accept
com.sun.tools.javac.tree.DCTree.DCSerialField#getDescription()->List::: serial field get description
com.sun.tools.javac.tree.DCTree.DCSerialField#getName()->IdentifierTree::: serial field get name
com.sun.tools.javac.tree.DCTree.DCSerialField#getType()->ReferenceTree::: serial field get type
com.sun.tools.javac.tree.DCTree.DCSince#getKind()->Kind::: since get kind
com.sun.tools.javac.tree.DCTree.DCSince#accept(DocTreeVisitor, D)->R::: since accept
com.sun.tools.javac.tree.DCTree.DCSince#getBody()->List::: since get body
com.sun.tools.javac.tree.DCTree.DCStartElement#getKind()->Kind::: start element get kind
com.sun.tools.javac.tree.DCTree.DCStartElement#accept(DocTreeVisitor, D)->R::: start element accept
com.sun.tools.javac.tree.DCTree.DCStartElement#getName()->Name::: start element get name
com.sun.tools.javac.tree.DCTree.DCStartElement#getAttributes()->List::: start element get attributes
com.sun.tools.javac.tree.DCTree.DCStartElement#isSelfClosing()->boolean::: start element is self closing
com.sun.tools.javac.tree.DCTree.DCSummary#getKind()->Kind::: summary get kind
com.sun.tools.javac.tree.DCTree.DCSummary#accept(DocTreeVisitor, D)->R::: summary accept
com.sun.tools.javac.tree.DCTree.DCSummary#getSummary()->List::: summary get summary
com.sun.tools.javac.tree.DCTree.DCText#getKind()->Kind::: text get kind
com.sun.tools.javac.tree.DCTree.DCText#accept(DocTreeVisitor, D)->R::: text accept
com.sun.tools.javac.tree.DCTree.DCText#getBody()->String::: text get body
com.sun.tools.javac.tree.DCTree.DCThrows#getKind()->Kind::: throws get kind
com.sun.tools.javac.tree.DCTree.DCThrows#accept(DocTreeVisitor, D)->R::: throws accept
com.sun.tools.javac.tree.DCTree.DCThrows#getExceptionName()->ReferenceTree::: throws get exception name
com.sun.tools.javac.tree.DCTree.DCThrows#getDescription()->List::: throws get description
com.sun.tools.javac.tree.DCTree.DCUnknownBlockTag#getKind()->Kind::: unknown block tag get kind
com.sun.tools.javac.tree.DCTree.DCUnknownBlockTag#accept(DocTreeVisitor, D)->R::: unknown block tag accept
com.sun.tools.javac.tree.DCTree.DCUnknownBlockTag#getTagName()->String::: unknown block tag get tag name
com.sun.tools.javac.tree.DCTree.DCUnknownBlockTag#getContent()->List::: unknown block tag get content
com.sun.tools.javac.tree.DCTree.DCUnknownInlineTag#getKind()->Kind::: unknown inline tag get kind
com.sun.tools.javac.tree.DCTree.DCUnknownInlineTag#accept(DocTreeVisitor, D)->R::: unknown inline tag accept
com.sun.tools.javac.tree.DCTree.DCUnknownInlineTag#getTagName()->String::: unknown inline tag get tag name
com.sun.tools.javac.tree.DCTree.DCUnknownInlineTag#getContent()->List::: unknown inline tag get content
com.sun.tools.javac.tree.DCTree.DCUses#getKind()->Kind::: uses get kind
com.sun.tools.javac.tree.DCTree.DCUses#accept(DocTreeVisitor, D)->R::: uses accept
com.sun.tools.javac.tree.DCTree.DCUses#getServiceType()->ReferenceTree::: uses get service type
com.sun.tools.javac.tree.DCTree.DCUses#getDescription()->List::: uses get description
com.sun.tools.javac.tree.DCTree.DCValue#getKind()->Kind::: value get kind
com.sun.tools.javac.tree.DCTree.DCValue#accept(DocTreeVisitor, D)->R::: value accept
com.sun.tools.javac.tree.DCTree.DCValue#getReference()->ReferenceTree::: value get reference
com.sun.tools.javac.tree.DCTree.DCVersion#getKind()->Kind::: version get kind
com.sun.tools.javac.tree.DCTree.DCVersion#accept(DocTreeVisitor, D)->R::: version accept
com.sun.tools.javac.tree.DCTree.DCVersion#getBody()->List::: version get body
com.sun.tools.javac.tree.DocCommentTable#hasComment(JCTree)->boolean:::Check if a tree node has a corresponding doc comment.
com.sun.tools.javac.tree.DocCommentTable#getComment(JCTree)->Comment:::Get the Comment token containing the doc comment, if any, for a tree node.
com.sun.tools.javac.tree.DocCommentTable#getCommentText(JCTree)->String:::Get the plain text of the doc comment, if any, for a tree node.
com.sun.tools.javac.tree.DocCommentTable#getCommentTree(JCTree)->DCDocComment:::Get the parsed form of the doc comment as a DocTree
com.sun.tools.javac.tree.DocCommentTable#putComment(JCTree, Comment)->void:::Set the Comment to be associated with a tree node.
com.sun.tools.javac.tree.DocPretty#print(DocTree)->void:::Visitor method: print expression tree.
com.sun.tools.javac.tree.DocPretty#print(Object)->void:::Print string, replacing all non-ascii character with unicode escapes.
com.sun.tools.javac.tree.DocPretty#print(List)->void:::Print list.
com.sun.tools.javac.tree.DocPretty#print(List, String)->void:::Print list., with separators
com.sun.tools.javac.tree.DocPretty#println()->void:::Print new line.
com.sun.tools.javac.tree.DocPretty#printTagName(DocTree)->void::: doc pretty print tag name
com.sun.tools.javac.tree.DocPretty#visitAttribute(AttributeTree, Void)->Void::: doc pretty visit attribute
com.sun.tools.javac.tree.DocPretty#visitAuthor(AuthorTree, Void)->Void::: doc pretty visit author
com.sun.tools.javac.tree.DocPretty#visitComment(CommentTree, Void)->Void::: doc pretty visit comment
com.sun.tools.javac.tree.DocPretty#visitDeprecated(DeprecatedTree, Void)->Void::: doc pretty visit deprecated
com.sun.tools.javac.tree.DocPretty#visitDocComment(DocCommentTree, Void)->Void::: doc pretty visit doc comment
com.sun.tools.javac.tree.DocPretty#visitDocRoot(DocRootTree, Void)->Void::: doc pretty visit doc root
com.sun.tools.javac.tree.DocPretty#visitDocType(DocTypeTree, Void)->Void::: doc pretty visit doc type
com.sun.tools.javac.tree.DocPretty#visitEndElement(EndElementTree, Void)->Void::: doc pretty visit end element
com.sun.tools.javac.tree.DocPretty#visitEntity(EntityTree, Void)->Void::: doc pretty visit entity
com.sun.tools.javac.tree.DocPretty#visitErroneous(ErroneousTree, Void)->Void::: doc pretty visit erroneous
com.sun.tools.javac.tree.DocPretty#visitHidden(HiddenTree, Void)->Void::: doc pretty visit hidden
com.sun.tools.javac.tree.DocPretty#visitIdentifier(IdentifierTree, Void)->Void::: doc pretty visit identifier
com.sun.tools.javac.tree.DocPretty#visitIndex(IndexTree, Void)->Void::: doc pretty visit index
com.sun.tools.javac.tree.DocPretty#visitInheritDoc(InheritDocTree, Void)->Void::: doc pretty visit inherit doc
com.sun.tools.javac.tree.DocPretty#visitLink(LinkTree, Void)->Void::: doc pretty visit link
com.sun.tools.javac.tree.DocPretty#visitLiteral(LiteralTree, Void)->Void::: doc pretty visit literal
com.sun.tools.javac.tree.DocPretty#visitParam(ParamTree, Void)->Void::: doc pretty visit param
com.sun.tools.javac.tree.DocPretty#visitProvides(ProvidesTree, Void)->Void::: doc pretty visit provides
com.sun.tools.javac.tree.DocPretty#visitReference(ReferenceTree, Void)->Void::: doc pretty visit reference
com.sun.tools.javac.tree.DocPretty#visitReturn(ReturnTree, Void)->Void::: doc pretty visit return
com.sun.tools.javac.tree.DocPretty#visitSee(SeeTree, Void)->Void::: doc pretty visit see
com.sun.tools.javac.tree.DocPretty#visitSerial(SerialTree, Void)->Void::: doc pretty visit serial
com.sun.tools.javac.tree.DocPretty#visitSerialData(SerialDataTree, Void)->Void::: doc pretty visit serial data
com.sun.tools.javac.tree.DocPretty#visitSerialField(SerialFieldTree, Void)->Void::: doc pretty visit serial field
com.sun.tools.javac.tree.DocPretty#visitSince(SinceTree, Void)->Void::: doc pretty visit since
com.sun.tools.javac.tree.DocPretty#visitStartElement(StartElementTree, Void)->Void::: doc pretty visit start element
com.sun.tools.javac.tree.DocPretty#visitSummary(SummaryTree, Void)->Void::: doc pretty visit summary
com.sun.tools.javac.tree.DocPretty#visitText(TextTree, Void)->Void::: doc pretty visit text
com.sun.tools.javac.tree.DocPretty#visitThrows(ThrowsTree, Void)->Void::: doc pretty visit throws
com.sun.tools.javac.tree.DocPretty#visitUnknownBlockTag(UnknownBlockTagTree, Void)->Void::: doc pretty visit unknown block tag
com.sun.tools.javac.tree.DocPretty#visitUnknownInlineTag(UnknownInlineTagTree, Void)->Void::: doc pretty visit unknown inline tag
com.sun.tools.javac.tree.DocPretty#visitUses(UsesTree, Void)->Void::: doc pretty visit uses
com.sun.tools.javac.tree.DocPretty#visitValue(ValueTree, Void)->Void::: doc pretty visit value
com.sun.tools.javac.tree.DocPretty#visitVersion(VersionTree, Void)->Void::: doc pretty visit version
com.sun.tools.javac.tree.DocPretty#visitOther(DocTree, Void)->Void::: doc pretty visit other
com.sun.tools.javac.tree.DocTreeMaker#instance(Context)->DocTreeMaker:::Get the TreeMaker instance.
com.sun.tools.javac.tree.DocTreeMaker#at(int)->DocTreeMaker:::Reassign current position.
com.sun.tools.javac.tree.DocTreeMaker#at(DiagnosticPosition)->DocTreeMaker:::Reassign current position.
com.sun.tools.javac.tree.DocTreeMaker#newAttributeTree(javax.lang.model.element.Name, ValueKind, java.util.List)->DCAttribute::: doc tree maker new attribute tree
com.sun.tools.javac.tree.DocTreeMaker#newAuthorTree(java.util.List)->DCAuthor::: doc tree maker new author tree
com.sun.tools.javac.tree.DocTreeMaker#newCodeTree(TextTree)->DCLiteral::: doc tree maker new code tree
com.sun.tools.javac.tree.DocTreeMaker#newCommentTree(String)->DCComment::: doc tree maker new comment tree
com.sun.tools.javac.tree.DocTreeMaker#newDeprecatedTree(List)->DCDeprecated::: doc tree maker new deprecated tree
com.sun.tools.javac.tree.DocTreeMaker#newDocCommentTree(List, List)->DCDocComment::: doc tree maker new doc comment tree
com.sun.tools.javac.tree.DocTreeMaker#newDocCommentTree(Comment, List, List, List, List)->DCDocComment::: doc tree maker new doc comment tree
com.sun.tools.javac.tree.DocTreeMaker#newDocCommentTree(List, List, List, List)->DCDocComment::: doc tree maker new doc comment tree
com.sun.tools.javac.tree.DocTreeMaker#newDocRootTree()->DCDocRoot::: doc tree maker new doc root tree
com.sun.tools.javac.tree.DocTreeMaker#newDocTypeTree(String)->DCDocType::: doc tree maker new doc type tree
com.sun.tools.javac.tree.DocTreeMaker#newEndElementTree(Name)->DCEndElement::: doc tree maker new end element tree
com.sun.tools.javac.tree.DocTreeMaker#newEntityTree(Name)->DCEntity::: doc tree maker new entity tree
com.sun.tools.javac.tree.DocTreeMaker#newErroneousTree(String, Diagnostic)->DCErroneous::: doc tree maker new erroneous tree
com.sun.tools.javac.tree.DocTreeMaker#newErroneousTree(String, DiagnosticSource, String, Object...)->DCErroneous::: doc tree maker new erroneous tree
com.sun.tools.javac.tree.DocTreeMaker#newExceptionTree(ReferenceTree, List)->DCThrows::: doc tree maker new exception tree
com.sun.tools.javac.tree.DocTreeMaker#newHiddenTree(List)->DCHidden::: doc tree maker new hidden tree
com.sun.tools.javac.tree.DocTreeMaker#newIdentifierTree(Name)->DCIdentifier::: doc tree maker new identifier tree
com.sun.tools.javac.tree.DocTreeMaker#newIndexTree(DocTree, List)->DCIndex::: doc tree maker new index tree
com.sun.tools.javac.tree.DocTreeMaker#newInheritDocTree()->DCInheritDoc::: doc tree maker new inherit doc tree
com.sun.tools.javac.tree.DocTreeMaker#newLinkTree(ReferenceTree, List)->DCLink::: doc tree maker new link tree
com.sun.tools.javac.tree.DocTreeMaker#newLinkPlainTree(ReferenceTree, List)->DCLink::: doc tree maker new link plain tree
com.sun.tools.javac.tree.DocTreeMaker#newLiteralTree(TextTree)->DCLiteral::: doc tree maker new literal tree
com.sun.tools.javac.tree.DocTreeMaker#newParamTree(boolean, IdentifierTree, List)->DCParam::: doc tree maker new param tree
com.sun.tools.javac.tree.DocTreeMaker#newProvidesTree(ReferenceTree, List)->DCProvides::: doc tree maker new provides tree
com.sun.tools.javac.tree.DocTreeMaker#newReferenceTree(String)->DCReference::: doc tree maker new reference tree
com.sun.tools.javac.tree.DocTreeMaker#newReferenceTree(String, JCTree, Name, List)->DCReference::: doc tree maker new reference tree
com.sun.tools.javac.tree.DocTreeMaker#newReturnTree(List)->DCReturn::: doc tree maker new return tree
com.sun.tools.javac.tree.DocTreeMaker#newSeeTree(List)->DCSee::: doc tree maker new see tree
com.sun.tools.javac.tree.DocTreeMaker#newSerialTree(List)->DCSerial::: doc tree maker new serial tree
com.sun.tools.javac.tree.DocTreeMaker#newSerialDataTree(List)->DCSerialData::: doc tree maker new serial data tree
com.sun.tools.javac.tree.DocTreeMaker#newSerialFieldTree(IdentifierTree, ReferenceTree, List)->DCSerialField::: doc tree maker new serial field tree
com.sun.tools.javac.tree.DocTreeMaker#newSinceTree(List)->DCSince::: doc tree maker new since tree
com.sun.tools.javac.tree.DocTreeMaker#newStartElementTree(Name, List, boolean)->DCStartElement::: doc tree maker new start element tree
com.sun.tools.javac.tree.DocTreeMaker#newSummaryTree(List)->DCSummary::: doc tree maker new summary tree
com.sun.tools.javac.tree.DocTreeMaker#newTextTree(String)->DCText::: doc tree maker new text tree
com.sun.tools.javac.tree.DocTreeMaker#newThrowsTree(ReferenceTree, List)->DCThrows::: doc tree maker new throws tree
com.sun.tools.javac.tree.DocTreeMaker#newUnknownBlockTagTree(Name, List)->DCUnknownBlockTag::: doc tree maker new unknown block tag tree
com.sun.tools.javac.tree.DocTreeMaker#newUnknownInlineTagTree(Name, List)->DCUnknownInlineTag::: doc tree maker new unknown inline tag tree
com.sun.tools.javac.tree.DocTreeMaker#newUsesTree(ReferenceTree, List)->DCUses::: doc tree maker new uses tree
com.sun.tools.javac.tree.DocTreeMaker#newValueTree(ReferenceTree)->DCValue::: doc tree maker new value tree
com.sun.tools.javac.tree.DocTreeMaker#newVersionTree(List)->DCVersion::: doc tree maker new version tree
com.sun.tools.javac.tree.DocTreeMaker#getFirstSentence(java.util.List)->java.util.List::: doc tree maker get first sentence
com.sun.tools.javac.tree.EndPosTable#getEndPos(JCTree)->int:::This method will return the end position of a given tree, otherwise a Positions.NOPOS will be returned.
com.sun.tools.javac.tree.EndPosTable#storeEnd(JCTree, int)->void:::Store ending position for a tree, the value of which is the greater of last error position and the given ending position.
com.sun.tools.javac.tree.EndPosTable#replaceTree(JCTree, JCTree)->int:::Give an old tree and a new tree, the old tree will be replaced with the new tree, the position of the new tree will be that of the old tree.
com.sun.tools.javac.tree.JCTree#getTag()->Tag::: tree get tag
com.sun.tools.javac.tree.JCTree#hasTag(Tag)->boolean::: tree has tag
com.sun.tools.javac.tree.JCTree#toString()->String:::Convert a tree to a pretty-printed string.
com.sun.tools.javac.tree.JCTree#setPos(int)->JCTree:::Set position field and return this tree.
com.sun.tools.javac.tree.JCTree#setType(Type)->JCTree:::Set type field and return this tree.
com.sun.tools.javac.tree.JCTree#accept(Visitor)->void:::Visit this tree with a given visitor.
com.sun.tools.javac.tree.JCTree#accept(TreeVisitor, D)->R::: tree accept
com.sun.tools.javac.tree.JCTree#clone()->Object:::Return a shallow copy of this tree.
com.sun.tools.javac.tree.JCTree#pos()->DiagnosticPosition:::Get a default position for this tree node.
com.sun.tools.javac.tree.JCTree#getTree()->JCTree::: tree get tree
com.sun.tools.javac.tree.JCTree#getStartPosition()->int::: tree get start position
com.sun.tools.javac.tree.JCTree#getPreferredPosition()->int::: tree get preferred position
com.sun.tools.javac.tree.JCTree#getEndPosition(EndPosTable)->int::: tree get end position
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#accept(Visitor)->void::: compilation unit accept
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getKind()->Kind::: compilation unit get kind
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getModuleDecl()->JCModuleDecl::: compilation unit get module decl
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getPackage()->JCPackageDecl::: compilation unit get package
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getPackageAnnotations()->List::: compilation unit get package annotations
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getPackageName()->ExpressionTree::: compilation unit get package name
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getImports()->List::: compilation unit get imports
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getSourceFile()->JavaFileObject::: compilation unit get source file
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getLineMap()->Position.LineMap::: compilation unit get line map
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getTypeDecls()->List::: compilation unit get type decls
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#accept(TreeVisitor, D)->R::: compilation unit accept
com.sun.tools.javac.tree.JCTree.JCCompilationUnit#getTag()->Tag::: compilation unit get tag
com.sun.tools.javac.tree.JCTree.JCPackageDecl#accept(Visitor)->void::: package decl accept
com.sun.tools.javac.tree.JCTree.JCPackageDecl#getKind()->Kind::: package decl get kind
com.sun.tools.javac.tree.JCTree.JCPackageDecl#getAnnotations()->List::: package decl get annotations
com.sun.tools.javac.tree.JCTree.JCPackageDecl#getPackageName()->JCExpression::: package decl get package name
com.sun.tools.javac.tree.JCTree.JCPackageDecl#accept(TreeVisitor, D)->R::: package decl accept
com.sun.tools.javac.tree.JCTree.JCPackageDecl#getTag()->Tag::: package decl get tag
com.sun.tools.javac.tree.JCTree.JCImport#accept(Visitor)->void::: import accept
com.sun.tools.javac.tree.JCTree.JCImport#isStatic()->boolean::: import is static
com.sun.tools.javac.tree.JCTree.JCImport#getQualifiedIdentifier()->JCTree::: import get qualified identifier
com.sun.tools.javac.tree.JCTree.JCImport#getKind()->Kind::: import get kind
com.sun.tools.javac.tree.JCTree.JCImport#accept(TreeVisitor, D)->R::: import accept
com.sun.tools.javac.tree.JCTree.JCImport#getTag()->Tag::: import get tag
com.sun.tools.javac.tree.JCTree.JCStatement#setType(Type)->JCStatement::: statement set type
com.sun.tools.javac.tree.JCTree.JCStatement#setPos(int)->JCStatement::: statement set pos
com.sun.tools.javac.tree.JCTree.JCExpression#setType(Type)->JCExpression::: expression set type
com.sun.tools.javac.tree.JCTree.JCExpression#setPos(int)->JCExpression::: expression set pos
com.sun.tools.javac.tree.JCTree.JCExpression#isPoly()->boolean::: expression is poly
com.sun.tools.javac.tree.JCTree.JCExpression#isStandalone()->boolean::: expression is standalone
com.sun.tools.javac.tree.JCTree.JCPolyExpression#isPoly()->boolean::: poly expression is poly
com.sun.tools.javac.tree.JCTree.JCPolyExpression#isStandalone()->boolean::: poly expression is standalone
com.sun.tools.javac.tree.JCTree.JCFunctionalExpression#getDescriptorType(Types)->Type::: functional expression get descriptor type
com.sun.tools.javac.tree.JCTree.JCClassDecl#accept(Visitor)->void::: class decl accept
com.sun.tools.javac.tree.JCTree.JCClassDecl#getKind()->Kind::: class decl get kind
com.sun.tools.javac.tree.JCTree.JCClassDecl#getModifiers()->JCModifiers::: class decl get modifiers
com.sun.tools.javac.tree.JCTree.JCClassDecl#getSimpleName()->Name::: class decl get simple name
com.sun.tools.javac.tree.JCTree.JCClassDecl#getTypeParameters()->List::: class decl get type parameters
com.sun.tools.javac.tree.JCTree.JCClassDecl#getExtendsClause()->JCExpression::: class decl get extends clause
com.sun.tools.javac.tree.JCTree.JCClassDecl#getImplementsClause()->List::: class decl get implements clause
com.sun.tools.javac.tree.JCTree.JCClassDecl#getMembers()->List::: class decl get members
com.sun.tools.javac.tree.JCTree.JCClassDecl#accept(TreeVisitor, D)->R::: class decl accept
com.sun.tools.javac.tree.JCTree.JCClassDecl#getTag()->Tag::: class decl get tag
com.sun.tools.javac.tree.JCTree.JCMethodDecl#accept(Visitor)->void::: method decl accept
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getKind()->Kind::: method decl get kind
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getModifiers()->JCModifiers::: method decl get modifiers
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getName()->Name::: method decl get name
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getReturnType()->JCTree::: method decl get return type
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getTypeParameters()->List::: method decl get type parameters
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getParameters()->List::: method decl get parameters
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getReceiverParameter()->JCVariableDecl::: method decl get receiver parameter
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getThrows()->List::: method decl get throws
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getBody()->JCBlock::: method decl get body
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getDefaultValue()->JCTree::: method decl get default value
com.sun.tools.javac.tree.JCTree.JCMethodDecl#accept(TreeVisitor, D)->R::: method decl accept
com.sun.tools.javac.tree.JCTree.JCMethodDecl#getTag()->Tag::: method decl get tag
com.sun.tools.javac.tree.JCTree.JCVariableDecl#isImplicitlyTyped()->boolean::: variable decl is implicitly typed
com.sun.tools.javac.tree.JCTree.JCVariableDecl#accept(Visitor)->void::: variable decl accept
com.sun.tools.javac.tree.JCTree.JCVariableDecl#getKind()->Kind::: variable decl get kind
com.sun.tools.javac.tree.JCTree.JCVariableDecl#getModifiers()->JCModifiers::: variable decl get modifiers
com.sun.tools.javac.tree.JCTree.JCVariableDecl#getName()->Name::: variable decl get name
com.sun.tools.javac.tree.JCTree.JCVariableDecl#getNameExpression()->JCExpression::: variable decl get name expression
com.sun.tools.javac.tree.JCTree.JCVariableDecl#getType()->JCTree::: variable decl get type
com.sun.tools.javac.tree.JCTree.JCVariableDecl#getInitializer()->JCExpression::: variable decl get initializer
com.sun.tools.javac.tree.JCTree.JCVariableDecl#accept(TreeVisitor, D)->R::: variable decl accept
com.sun.tools.javac.tree.JCTree.JCVariableDecl#getTag()->Tag::: variable decl get tag
com.sun.tools.javac.tree.JCTree.JCSkip#accept(Visitor)->void::: skip accept
com.sun.tools.javac.tree.JCTree.JCSkip#getKind()->Kind::: skip get kind
com.sun.tools.javac.tree.JCTree.JCSkip#accept(TreeVisitor, D)->R::: skip accept
com.sun.tools.javac.tree.JCTree.JCSkip#getTag()->Tag::: skip get tag
com.sun.tools.javac.tree.JCTree.JCBlock#accept(Visitor)->void::: block accept
com.sun.tools.javac.tree.JCTree.JCBlock#getKind()->Kind::: block get kind
com.sun.tools.javac.tree.JCTree.JCBlock#getStatements()->List::: block get statements
com.sun.tools.javac.tree.JCTree.JCBlock#isStatic()->boolean::: block is static
com.sun.tools.javac.tree.JCTree.JCBlock#accept(TreeVisitor, D)->R::: block accept
com.sun.tools.javac.tree.JCTree.JCBlock#getTag()->Tag::: block get tag
com.sun.tools.javac.tree.JCTree.JCDoWhileLoop#accept(Visitor)->void::: do while loop accept
com.sun.tools.javac.tree.JCTree.JCDoWhileLoop#getKind()->Kind::: do while loop get kind
com.sun.tools.javac.tree.JCTree.JCDoWhileLoop#getCondition()->JCExpression::: do while loop get condition
com.sun.tools.javac.tree.JCTree.JCDoWhileLoop#getStatement()->JCStatement::: do while loop get statement
com.sun.tools.javac.tree.JCTree.JCDoWhileLoop#accept(TreeVisitor, D)->R::: do while loop accept
com.sun.tools.javac.tree.JCTree.JCDoWhileLoop#getTag()->Tag::: do while loop get tag
com.sun.tools.javac.tree.JCTree.JCWhileLoop#accept(Visitor)->void::: while loop accept
com.sun.tools.javac.tree.JCTree.JCWhileLoop#getKind()->Kind::: while loop get kind
com.sun.tools.javac.tree.JCTree.JCWhileLoop#getCondition()->JCExpression::: while loop get condition
com.sun.tools.javac.tree.JCTree.JCWhileLoop#getStatement()->JCStatement::: while loop get statement
com.sun.tools.javac.tree.JCTree.JCWhileLoop#accept(TreeVisitor, D)->R::: while loop accept
com.sun.tools.javac.tree.JCTree.JCWhileLoop#getTag()->Tag::: while loop get tag
com.sun.tools.javac.tree.JCTree.JCForLoop#accept(Visitor)->void::: for loop accept
com.sun.tools.javac.tree.JCTree.JCForLoop#getKind()->Kind::: for loop get kind
com.sun.tools.javac.tree.JCTree.JCForLoop#getCondition()->JCExpression::: for loop get condition
com.sun.tools.javac.tree.JCTree.JCForLoop#getStatement()->JCStatement::: for loop get statement
com.sun.tools.javac.tree.JCTree.JCForLoop#getInitializer()->List::: for loop get initializer
com.sun.tools.javac.tree.JCTree.JCForLoop#getUpdate()->List::: for loop get update
com.sun.tools.javac.tree.JCTree.JCForLoop#accept(TreeVisitor, D)->R::: for loop accept
com.sun.tools.javac.tree.JCTree.JCForLoop#getTag()->Tag::: for loop get tag
com.sun.tools.javac.tree.JCTree.JCEnhancedForLoop#accept(Visitor)->void::: enhanced for loop accept
com.sun.tools.javac.tree.JCTree.JCEnhancedForLoop#getKind()->Kind::: enhanced for loop get kind
com.sun.tools.javac.tree.JCTree.JCEnhancedForLoop#getVariable()->JCVariableDecl::: enhanced for loop get variable
com.sun.tools.javac.tree.JCTree.JCEnhancedForLoop#getExpression()->JCExpression::: enhanced for loop get expression
com.sun.tools.javac.tree.JCTree.JCEnhancedForLoop#getStatement()->JCStatement::: enhanced for loop get statement
com.sun.tools.javac.tree.JCTree.JCEnhancedForLoop#accept(TreeVisitor, D)->R::: enhanced for loop accept
com.sun.tools.javac.tree.JCTree.JCEnhancedForLoop#getTag()->Tag::: enhanced for loop get tag
com.sun.tools.javac.tree.JCTree.JCLabeledStatement#accept(Visitor)->void::: labeled statement accept
com.sun.tools.javac.tree.JCTree.JCLabeledStatement#getKind()->Kind::: labeled statement get kind
com.sun.tools.javac.tree.JCTree.JCLabeledStatement#getLabel()->Name::: labeled statement get label
com.sun.tools.javac.tree.JCTree.JCLabeledStatement#getStatement()->JCStatement::: labeled statement get statement
com.sun.tools.javac.tree.JCTree.JCLabeledStatement#accept(TreeVisitor, D)->R::: labeled statement accept
com.sun.tools.javac.tree.JCTree.JCLabeledStatement#getTag()->Tag::: labeled statement get tag
com.sun.tools.javac.tree.JCTree.JCSwitch#accept(Visitor)->void::: switch accept
com.sun.tools.javac.tree.JCTree.JCSwitch#getKind()->Kind::: switch get kind
com.sun.tools.javac.tree.JCTree.JCSwitch#getExpression()->JCExpression::: switch get expression
com.sun.tools.javac.tree.JCTree.JCSwitch#getCases()->List::: switch get cases
com.sun.tools.javac.tree.JCTree.JCSwitch#accept(TreeVisitor, D)->R::: switch accept
com.sun.tools.javac.tree.JCTree.JCSwitch#getTag()->Tag::: switch get tag
com.sun.tools.javac.tree.JCTree.JCCase#accept(Visitor)->void::: case accept
com.sun.tools.javac.tree.JCTree.JCCase#getKind()->Kind::: case get kind
com.sun.tools.javac.tree.JCTree.JCCase#getExpression()->JCExpression::: case get expression
com.sun.tools.javac.tree.JCTree.JCCase#getStatements()->List::: case get statements
com.sun.tools.javac.tree.JCTree.JCCase#accept(TreeVisitor, D)->R::: case accept
com.sun.tools.javac.tree.JCTree.JCCase#getTag()->Tag::: case get tag
com.sun.tools.javac.tree.JCTree.JCSynchronized#accept(Visitor)->void::: synchronized accept
com.sun.tools.javac.tree.JCTree.JCSynchronized#getKind()->Kind::: synchronized get kind
com.sun.tools.javac.tree.JCTree.JCSynchronized#getExpression()->JCExpression::: synchronized get expression
com.sun.tools.javac.tree.JCTree.JCSynchronized#getBlock()->JCBlock::: synchronized get block
com.sun.tools.javac.tree.JCTree.JCSynchronized#accept(TreeVisitor, D)->R::: synchronized accept
com.sun.tools.javac.tree.JCTree.JCSynchronized#getTag()->Tag::: synchronized get tag
com.sun.tools.javac.tree.JCTree.JCTry#accept(Visitor)->void::: try accept
com.sun.tools.javac.tree.JCTree.JCTry#getKind()->Kind::: try get kind
com.sun.tools.javac.tree.JCTree.JCTry#getBlock()->JCBlock::: try get block
com.sun.tools.javac.tree.JCTree.JCTry#getCatches()->List::: try get catches
com.sun.tools.javac.tree.JCTree.JCTry#getFinallyBlock()->JCBlock::: try get finally block
com.sun.tools.javac.tree.JCTree.JCTry#accept(TreeVisitor, D)->R::: try accept
com.sun.tools.javac.tree.JCTree.JCTry#getResources()->List::: try get resources
com.sun.tools.javac.tree.JCTree.JCTry#getTag()->Tag::: try get tag
com.sun.tools.javac.tree.JCTree.JCCatch#accept(Visitor)->void::: catch accept
com.sun.tools.javac.tree.JCTree.JCCatch#getKind()->Kind::: catch get kind
com.sun.tools.javac.tree.JCTree.JCCatch#getParameter()->JCVariableDecl::: catch get parameter
com.sun.tools.javac.tree.JCTree.JCCatch#getBlock()->JCBlock::: catch get block
com.sun.tools.javac.tree.JCTree.JCCatch#accept(TreeVisitor, D)->R::: catch accept
com.sun.tools.javac.tree.JCTree.JCCatch#getTag()->Tag::: catch get tag
com.sun.tools.javac.tree.JCTree.JCConditional#accept(Visitor)->void::: conditional accept
com.sun.tools.javac.tree.JCTree.JCConditional#getKind()->Kind::: conditional get kind
com.sun.tools.javac.tree.JCTree.JCConditional#getCondition()->JCExpression::: conditional get condition
com.sun.tools.javac.tree.JCTree.JCConditional#getTrueExpression()->JCExpression::: conditional get true expression
com.sun.tools.javac.tree.JCTree.JCConditional#getFalseExpression()->JCExpression::: conditional get false expression
com.sun.tools.javac.tree.JCTree.JCConditional#accept(TreeVisitor, D)->R::: conditional accept
com.sun.tools.javac.tree.JCTree.JCConditional#getTag()->Tag::: conditional get tag
com.sun.tools.javac.tree.JCTree.JCIf#accept(Visitor)->void::: if accept
com.sun.tools.javac.tree.JCTree.JCIf#getKind()->Kind::: if get kind
com.sun.tools.javac.tree.JCTree.JCIf#getCondition()->JCExpression::: if get condition
com.sun.tools.javac.tree.JCTree.JCIf#getThenStatement()->JCStatement::: if get then statement
com.sun.tools.javac.tree.JCTree.JCIf#getElseStatement()->JCStatement::: if get else statement
com.sun.tools.javac.tree.JCTree.JCIf#accept(TreeVisitor, D)->R::: if accept
com.sun.tools.javac.tree.JCTree.JCIf#getTag()->Tag::: if get tag
com.sun.tools.javac.tree.JCTree.JCExpressionStatement#accept(Visitor)->void::: expression statement accept
com.sun.tools.javac.tree.JCTree.JCExpressionStatement#getKind()->Kind::: expression statement get kind
com.sun.tools.javac.tree.JCTree.JCExpressionStatement#getExpression()->JCExpression::: expression statement get expression
com.sun.tools.javac.tree.JCTree.JCExpressionStatement#accept(TreeVisitor, D)->R::: expression statement accept
com.sun.tools.javac.tree.JCTree.JCExpressionStatement#getTag()->Tag::: expression statement get tag
com.sun.tools.javac.tree.JCTree.JCExpressionStatement#toString()->String:::Convert a expression-statement tree to a pretty-printed string.
com.sun.tools.javac.tree.JCTree.JCBreak#accept(Visitor)->void::: break accept
com.sun.tools.javac.tree.JCTree.JCBreak#getKind()->Kind::: break get kind
com.sun.tools.javac.tree.JCTree.JCBreak#getLabel()->Name::: break get label
com.sun.tools.javac.tree.JCTree.JCBreak#accept(TreeVisitor, D)->R::: break accept
com.sun.tools.javac.tree.JCTree.JCBreak#getTag()->Tag::: break get tag
com.sun.tools.javac.tree.JCTree.JCContinue#accept(Visitor)->void::: continue accept
com.sun.tools.javac.tree.JCTree.JCContinue#getKind()->Kind::: continue get kind
com.sun.tools.javac.tree.JCTree.JCContinue#getLabel()->Name::: continue get label
com.sun.tools.javac.tree.JCTree.JCContinue#accept(TreeVisitor, D)->R::: continue accept
com.sun.tools.javac.tree.JCTree.JCContinue#getTag()->Tag::: continue get tag
com.sun.tools.javac.tree.JCTree.JCReturn#accept(Visitor)->void::: return accept
com.sun.tools.javac.tree.JCTree.JCReturn#getKind()->Kind::: return get kind
com.sun.tools.javac.tree.JCTree.JCReturn#getExpression()->JCExpression::: return get expression
com.sun.tools.javac.tree.JCTree.JCReturn#accept(TreeVisitor, D)->R::: return accept
com.sun.tools.javac.tree.JCTree.JCReturn#getTag()->Tag::: return get tag
com.sun.tools.javac.tree.JCTree.JCThrow#accept(Visitor)->void::: throw accept
com.sun.tools.javac.tree.JCTree.JCThrow#getKind()->Kind::: throw get kind
com.sun.tools.javac.tree.JCTree.JCThrow#getExpression()->JCExpression::: throw get expression
com.sun.tools.javac.tree.JCTree.JCThrow#accept(TreeVisitor, D)->R::: throw accept
com.sun.tools.javac.tree.JCTree.JCThrow#getTag()->Tag::: throw get tag
com.sun.tools.javac.tree.JCTree.JCAssert#accept(Visitor)->void::: assert accept
com.sun.tools.javac.tree.JCTree.JCAssert#getKind()->Kind::: assert get kind
com.sun.tools.javac.tree.JCTree.JCAssert#getCondition()->JCExpression::: assert get condition
com.sun.tools.javac.tree.JCTree.JCAssert#getDetail()->JCExpression::: assert get detail
com.sun.tools.javac.tree.JCTree.JCAssert#accept(TreeVisitor, D)->R::: assert accept
com.sun.tools.javac.tree.JCTree.JCAssert#getTag()->Tag::: assert get tag
com.sun.tools.javac.tree.JCTree.JCMethodInvocation#accept(Visitor)->void::: method invocation accept
com.sun.tools.javac.tree.JCTree.JCMethodInvocation#getKind()->Kind::: method invocation get kind
com.sun.tools.javac.tree.JCTree.JCMethodInvocation#getTypeArguments()->List::: method invocation get type arguments
com.sun.tools.javac.tree.JCTree.JCMethodInvocation#getMethodSelect()->JCExpression::: method invocation get method select
com.sun.tools.javac.tree.JCTree.JCMethodInvocation#getArguments()->List::: method invocation get arguments
com.sun.tools.javac.tree.JCTree.JCMethodInvocation#accept(TreeVisitor, D)->R::: method invocation accept
com.sun.tools.javac.tree.JCTree.JCMethodInvocation#setType(Type)->JCMethodInvocation::: method invocation set type
com.sun.tools.javac.tree.JCTree.JCMethodInvocation#getTag()->Tag::: method invocation get tag
com.sun.tools.javac.tree.JCTree.JCNewClass#accept(Visitor)->void::: new class accept
com.sun.tools.javac.tree.JCTree.JCNewClass#getKind()->Kind::: new class get kind
com.sun.tools.javac.tree.JCTree.JCNewClass#getEnclosingExpression()->JCExpression::: new class get enclosing expression
com.sun.tools.javac.tree.JCTree.JCNewClass#getTypeArguments()->List::: new class get type arguments
com.sun.tools.javac.tree.JCTree.JCNewClass#getIdentifier()->JCExpression::: new class get identifier
com.sun.tools.javac.tree.JCTree.JCNewClass#getArguments()->List::: new class get arguments
com.sun.tools.javac.tree.JCTree.JCNewClass#getClassBody()->JCClassDecl::: new class get class body
com.sun.tools.javac.tree.JCTree.JCNewClass#accept(TreeVisitor, D)->R::: new class accept
com.sun.tools.javac.tree.JCTree.JCNewClass#getTag()->Tag::: new class get tag
com.sun.tools.javac.tree.JCTree.JCNewArray#accept(Visitor)->void::: new array accept
com.sun.tools.javac.tree.JCTree.JCNewArray#getKind()->Kind::: new array get kind
com.sun.tools.javac.tree.JCTree.JCNewArray#getType()->JCExpression::: new array get type
com.sun.tools.javac.tree.JCTree.JCNewArray#getDimensions()->List::: new array get dimensions
com.sun.tools.javac.tree.JCTree.JCNewArray#getInitializers()->List::: new array get initializers
com.sun.tools.javac.tree.JCTree.JCNewArray#accept(TreeVisitor, D)->R::: new array accept
com.sun.tools.javac.tree.JCTree.JCNewArray#getTag()->Tag::: new array get tag
com.sun.tools.javac.tree.JCTree.JCNewArray#getAnnotations()->List::: new array get annotations
com.sun.tools.javac.tree.JCTree.JCNewArray#getDimAnnotations()->List>::: new array get dim annotations
com.sun.tools.javac.tree.JCTree.JCLambda#getTag()->Tag::: lambda get tag
com.sun.tools.javac.tree.JCTree.JCLambda#accept(Visitor)->void::: lambda accept
com.sun.tools.javac.tree.JCTree.JCLambda#accept(TreeVisitor, D)->R::: lambda accept
com.sun.tools.javac.tree.JCTree.JCLambda#getKind()->Kind::: lambda get kind
com.sun.tools.javac.tree.JCTree.JCLambda#getBody()->JCTree::: lambda get body
com.sun.tools.javac.tree.JCTree.JCLambda#getParameters()->java.util.List::: lambda get parameters
com.sun.tools.javac.tree.JCTree.JCLambda#setType(Type)->JCLambda::: lambda set type
com.sun.tools.javac.tree.JCTree.JCLambda#getBodyKind()->BodyKind::: lambda get body kind
com.sun.tools.javac.tree.JCTree.JCParens#accept(Visitor)->void::: parens accept
com.sun.tools.javac.tree.JCTree.JCParens#getKind()->Kind::: parens get kind
com.sun.tools.javac.tree.JCTree.JCParens#getExpression()->JCExpression::: parens get expression
com.sun.tools.javac.tree.JCTree.JCParens#accept(TreeVisitor, D)->R::: parens accept
com.sun.tools.javac.tree.JCTree.JCParens#getTag()->Tag::: parens get tag
com.sun.tools.javac.tree.JCTree.JCAssign#accept(Visitor)->void::: assign accept
com.sun.tools.javac.tree.JCTree.JCAssign#getKind()->Kind::: assign get kind
com.sun.tools.javac.tree.JCTree.JCAssign#getVariable()->JCExpression::: assign get variable
com.sun.tools.javac.tree.JCTree.JCAssign#getExpression()->JCExpression::: assign get expression
com.sun.tools.javac.tree.JCTree.JCAssign#accept(TreeVisitor, D)->R::: assign accept
com.sun.tools.javac.tree.JCTree.JCAssign#getTag()->Tag::: assign get tag
com.sun.tools.javac.tree.JCTree.JCOperatorExpression#getOperator()->OperatorSymbol::: operator expression get operator
com.sun.tools.javac.tree.JCTree.JCOperatorExpression#getTag()->Tag::: operator expression get tag
com.sun.tools.javac.tree.JCTree.JCOperatorExpression#getOperand(OperandPos)->JCExpression::: operator expression get operand
com.sun.tools.javac.tree.JCTree.JCAssignOp#accept(Visitor)->void::: assign op accept
com.sun.tools.javac.tree.JCTree.JCAssignOp#getKind()->Kind::: assign op get kind
com.sun.tools.javac.tree.JCTree.JCAssignOp#getVariable()->JCExpression::: assign op get variable
com.sun.tools.javac.tree.JCTree.JCAssignOp#getExpression()->JCExpression::: assign op get expression
com.sun.tools.javac.tree.JCTree.JCAssignOp#accept(TreeVisitor, D)->R::: assign op accept
com.sun.tools.javac.tree.JCTree.JCAssignOp#getOperand(OperandPos)->JCExpression::: assign op get operand
com.sun.tools.javac.tree.JCTree.JCUnary#accept(Visitor)->void::: unary accept
com.sun.tools.javac.tree.JCTree.JCUnary#getKind()->Kind::: unary get kind
com.sun.tools.javac.tree.JCTree.JCUnary#getExpression()->JCExpression::: unary get expression
com.sun.tools.javac.tree.JCTree.JCUnary#accept(TreeVisitor, D)->R::: unary accept
com.sun.tools.javac.tree.JCTree.JCUnary#setTag(Tag)->void::: unary set tag
com.sun.tools.javac.tree.JCTree.JCUnary#getOperand(OperandPos)->JCExpression::: unary get operand
com.sun.tools.javac.tree.JCTree.JCBinary#accept(Visitor)->void::: binary accept
com.sun.tools.javac.tree.JCTree.JCBinary#getKind()->Kind::: binary get kind
com.sun.tools.javac.tree.JCTree.JCBinary#getLeftOperand()->JCExpression::: binary get left operand
com.sun.tools.javac.tree.JCTree.JCBinary#getRightOperand()->JCExpression::: binary get right operand
com.sun.tools.javac.tree.JCTree.JCBinary#accept(TreeVisitor, D)->R::: binary accept
com.sun.tools.javac.tree.JCTree.JCBinary#getOperand(OperandPos)->JCExpression::: binary get operand
com.sun.tools.javac.tree.JCTree.JCTypeCast#accept(Visitor)->void::: type cast accept
com.sun.tools.javac.tree.JCTree.JCTypeCast#getKind()->Kind::: type cast get kind
com.sun.tools.javac.tree.JCTree.JCTypeCast#getType()->JCTree::: type cast get type
com.sun.tools.javac.tree.JCTree.JCTypeCast#getExpression()->JCExpression::: type cast get expression
com.sun.tools.javac.tree.JCTree.JCTypeCast#accept(TreeVisitor, D)->R::: type cast accept
com.sun.tools.javac.tree.JCTree.JCTypeCast#getTag()->Tag::: type cast get tag
com.sun.tools.javac.tree.JCTree.JCInstanceOf#accept(Visitor)->void::: instance of accept
com.sun.tools.javac.tree.JCTree.JCInstanceOf#getKind()->Kind::: instance of get kind
com.sun.tools.javac.tree.JCTree.JCInstanceOf#getType()->JCTree::: instance of get type
com.sun.tools.javac.tree.JCTree.JCInstanceOf#getExpression()->JCExpression::: instance of get expression
com.sun.tools.javac.tree.JCTree.JCInstanceOf#accept(TreeVisitor, D)->R::: instance of accept
com.sun.tools.javac.tree.JCTree.JCInstanceOf#getTag()->Tag::: instance of get tag
com.sun.tools.javac.tree.JCTree.JCArrayAccess#accept(Visitor)->void::: array access accept
com.sun.tools.javac.tree.JCTree.JCArrayAccess#getKind()->Kind::: array access get kind
com.sun.tools.javac.tree.JCTree.JCArrayAccess#getExpression()->JCExpression::: array access get expression
com.sun.tools.javac.tree.JCTree.JCArrayAccess#getIndex()->JCExpression::: array access get index
com.sun.tools.javac.tree.JCTree.JCArrayAccess#accept(TreeVisitor, D)->R::: array access accept
com.sun.tools.javac.tree.JCTree.JCArrayAccess#getTag()->Tag::: array access get tag
com.sun.tools.javac.tree.JCTree.JCFieldAccess#accept(Visitor)->void::: field access accept
com.sun.tools.javac.tree.JCTree.JCFieldAccess#getKind()->Kind::: field access get kind
com.sun.tools.javac.tree.JCTree.JCFieldAccess#getExpression()->JCExpression::: field access get expression
com.sun.tools.javac.tree.JCTree.JCFieldAccess#accept(TreeVisitor, D)->R::: field access accept
com.sun.tools.javac.tree.JCTree.JCFieldAccess#getIdentifier()->Name::: field access get identifier
com.sun.tools.javac.tree.JCTree.JCFieldAccess#getTag()->Tag::: field access get tag
com.sun.tools.javac.tree.JCTree.JCMemberReference#accept(Visitor)->void::: member reference accept
com.sun.tools.javac.tree.JCTree.JCMemberReference#getKind()->Kind::: member reference get kind
com.sun.tools.javac.tree.JCTree.JCMemberReference#getMode()->ReferenceMode::: member reference get mode
com.sun.tools.javac.tree.JCTree.JCMemberReference#getQualifierExpression()->JCExpression::: member reference get qualifier expression
com.sun.tools.javac.tree.JCTree.JCMemberReference#getName()->Name::: member reference get name
com.sun.tools.javac.tree.JCTree.JCMemberReference#getTypeArguments()->List::: member reference get type arguments
com.sun.tools.javac.tree.JCTree.JCMemberReference#accept(TreeVisitor, D)->R::: member reference accept
com.sun.tools.javac.tree.JCTree.JCMemberReference#getTag()->Tag::: member reference get tag
com.sun.tools.javac.tree.JCTree.JCMemberReference#hasKind(ReferenceKind)->boolean::: member reference has kind
com.sun.tools.javac.tree.JCTree.JCMemberReference#getOverloadKind()->OverloadKind::: member reference get overload kind
com.sun.tools.javac.tree.JCTree.JCMemberReference#setOverloadKind(OverloadKind)->void::: member reference set overload kind
com.sun.tools.javac.tree.JCTree.JCIdent#accept(Visitor)->void::: ident accept
com.sun.tools.javac.tree.JCTree.JCIdent#getKind()->Kind::: ident get kind
com.sun.tools.javac.tree.JCTree.JCIdent#getName()->Name::: ident get name
com.sun.tools.javac.tree.JCTree.JCIdent#accept(TreeVisitor, D)->R::: ident accept
com.sun.tools.javac.tree.JCTree.JCIdent#getTag()->Tag::: ident get tag
com.sun.tools.javac.tree.JCTree.JCLiteral#accept(Visitor)->void::: literal accept
com.sun.tools.javac.tree.JCTree.JCLiteral#getKind()->Kind::: literal get kind
com.sun.tools.javac.tree.JCTree.JCLiteral#getValue()->Object::: literal get value
com.sun.tools.javac.tree.JCTree.JCLiteral#accept(TreeVisitor, D)->R::: literal accept
com.sun.tools.javac.tree.JCTree.JCLiteral#setType(Type)->JCLiteral::: literal set type
com.sun.tools.javac.tree.JCTree.JCLiteral#getTag()->Tag::: literal get tag
com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree#accept(Visitor)->void::: primitive type tree accept
com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree#getKind()->Kind::: primitive type tree get kind
com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree#getPrimitiveTypeKind()->TypeKind::: primitive type tree get primitive type kind
com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree#accept(TreeVisitor, D)->R::: primitive type tree accept
com.sun.tools.javac.tree.JCTree.JCPrimitiveTypeTree#getTag()->Tag::: primitive type tree get tag
com.sun.tools.javac.tree.JCTree.JCArrayTypeTree#accept(Visitor)->void::: array type tree accept
com.sun.tools.javac.tree.JCTree.JCArrayTypeTree#getKind()->Kind::: array type tree get kind
com.sun.tools.javac.tree.JCTree.JCArrayTypeTree#getType()->JCTree::: array type tree get type
com.sun.tools.javac.tree.JCTree.JCArrayTypeTree#accept(TreeVisitor, D)->R::: array type tree accept
com.sun.tools.javac.tree.JCTree.JCArrayTypeTree#getTag()->Tag::: array type tree get tag
com.sun.tools.javac.tree.JCTree.JCTypeApply#accept(Visitor)->void::: type apply accept
com.sun.tools.javac.tree.JCTree.JCTypeApply#getKind()->Kind::: type apply get kind
com.sun.tools.javac.tree.JCTree.JCTypeApply#getType()->JCTree::: type apply get type
com.sun.tools.javac.tree.JCTree.JCTypeApply#getTypeArguments()->List::: type apply get type arguments
com.sun.tools.javac.tree.JCTree.JCTypeApply#accept(TreeVisitor, D)->R::: type apply accept
com.sun.tools.javac.tree.JCTree.JCTypeApply#getTag()->Tag::: type apply get tag
com.sun.tools.javac.tree.JCTree.JCTypeUnion#accept(Visitor)->void::: type union accept
com.sun.tools.javac.tree.JCTree.JCTypeUnion#getKind()->Kind::: type union get kind
com.sun.tools.javac.tree.JCTree.JCTypeUnion#getTypeAlternatives()->List::: type union get type alternatives
com.sun.tools.javac.tree.JCTree.JCTypeUnion#accept(TreeVisitor, D)->R::: type union accept
com.sun.tools.javac.tree.JCTree.JCTypeUnion#getTag()->Tag::: type union get tag
com.sun.tools.javac.tree.JCTree.JCTypeIntersection#accept(Visitor)->void::: type intersection accept
com.sun.tools.javac.tree.JCTree.JCTypeIntersection#getKind()->Kind::: type intersection get kind
com.sun.tools.javac.tree.JCTree.JCTypeIntersection#getBounds()->List::: type intersection get bounds
com.sun.tools.javac.tree.JCTree.JCTypeIntersection#accept(TreeVisitor, D)->R::: type intersection accept
com.sun.tools.javac.tree.JCTree.JCTypeIntersection#getTag()->Tag::: type intersection get tag
com.sun.tools.javac.tree.JCTree.JCTypeParameter#accept(Visitor)->void::: type parameter accept
com.sun.tools.javac.tree.JCTree.JCTypeParameter#getKind()->Kind::: type parameter get kind
com.sun.tools.javac.tree.JCTree.JCTypeParameter#getName()->Name::: type parameter get name
com.sun.tools.javac.tree.JCTree.JCTypeParameter#getBounds()->List::: type parameter get bounds
com.sun.tools.javac.tree.JCTree.JCTypeParameter#getAnnotations()->List::: type parameter get annotations
com.sun.tools.javac.tree.JCTree.JCTypeParameter#accept(TreeVisitor, D)->R::: type parameter accept
com.sun.tools.javac.tree.JCTree.JCTypeParameter#getTag()->Tag::: type parameter get tag
com.sun.tools.javac.tree.JCTree.JCWildcard#accept(Visitor)->void::: wildcard accept
com.sun.tools.javac.tree.JCTree.JCWildcard#getKind()->Kind::: wildcard get kind
com.sun.tools.javac.tree.JCTree.JCWildcard#getBound()->JCTree::: wildcard get bound
com.sun.tools.javac.tree.JCTree.JCWildcard#accept(TreeVisitor, D)->R::: wildcard accept
com.sun.tools.javac.tree.JCTree.JCWildcard#getTag()->Tag::: wildcard get tag
com.sun.tools.javac.tree.JCTree.TypeBoundKind#accept(Visitor)->void::: type bound kind accept
com.sun.tools.javac.tree.JCTree.TypeBoundKind#getKind()->Kind::: type bound kind get kind
com.sun.tools.javac.tree.JCTree.TypeBoundKind#accept(TreeVisitor, D)->R::: type bound kind accept
com.sun.tools.javac.tree.JCTree.TypeBoundKind#getTag()->Tag::: type bound kind get tag
com.sun.tools.javac.tree.JCTree.JCAnnotation#accept(Visitor)->void::: annotation accept
com.sun.tools.javac.tree.JCTree.JCAnnotation#getKind()->Kind::: annotation get kind
com.sun.tools.javac.tree.JCTree.JCAnnotation#getAnnotationType()->JCTree::: annotation get annotation type
com.sun.tools.javac.tree.JCTree.JCAnnotation#getArguments()->List::: annotation get arguments
com.sun.tools.javac.tree.JCTree.JCAnnotation#accept(TreeVisitor, D)->R::: annotation accept
com.sun.tools.javac.tree.JCTree.JCAnnotation#getTag()->Tag::: annotation get tag
com.sun.tools.javac.tree.JCTree.JCModifiers#accept(Visitor)->void::: modifiers accept
com.sun.tools.javac.tree.JCTree.JCModifiers#getKind()->Kind::: modifiers get kind
com.sun.tools.javac.tree.JCTree.JCModifiers#getFlags()->Set::: modifiers get flags
com.sun.tools.javac.tree.JCTree.JCModifiers#getAnnotations()->List::: modifiers get annotations
com.sun.tools.javac.tree.JCTree.JCModifiers#accept(TreeVisitor, D)->R::: modifiers accept
com.sun.tools.javac.tree.JCTree.JCModifiers#getTag()->Tag::: modifiers get tag
com.sun.tools.javac.tree.JCTree.JCAnnotatedType#accept(Visitor)->void::: annotated type accept
com.sun.tools.javac.tree.JCTree.JCAnnotatedType#getKind()->Kind::: annotated type get kind
com.sun.tools.javac.tree.JCTree.JCAnnotatedType#getAnnotations()->List::: annotated type get annotations
com.sun.tools.javac.tree.JCTree.JCAnnotatedType#getUnderlyingType()->JCExpression::: annotated type get underlying type
com.sun.tools.javac.tree.JCTree.JCAnnotatedType#accept(TreeVisitor, D)->R::: annotated type accept
com.sun.tools.javac.tree.JCTree.JCAnnotatedType#getTag()->Tag::: annotated type get tag
com.sun.tools.javac.tree.JCTree.JCModuleDecl#accept(Visitor)->void::: module decl accept
com.sun.tools.javac.tree.JCTree.JCModuleDecl#getKind()->Kind::: module decl get kind
com.sun.tools.javac.tree.JCTree.JCModuleDecl#getAnnotations()->List::: module decl get annotations
com.sun.tools.javac.tree.JCTree.JCModuleDecl#getModuleType()->ModuleKind::: module decl get module type
com.sun.tools.javac.tree.JCTree.JCModuleDecl#getName()->JCExpression::: module decl get name
com.sun.tools.javac.tree.JCTree.JCModuleDecl#getDirectives()->List::: module decl get directives
com.sun.tools.javac.tree.JCTree.JCModuleDecl#accept(TreeVisitor, D)->R::: module decl accept
com.sun.tools.javac.tree.JCTree.JCModuleDecl#getTag()->Tag::: module decl get tag
com.sun.tools.javac.tree.JCTree.JCExports#accept(Visitor)->void::: exports accept
com.sun.tools.javac.tree.JCTree.JCExports#getKind()->Kind::: exports get kind
com.sun.tools.javac.tree.JCTree.JCExports#getPackageName()->JCExpression::: exports get package name
com.sun.tools.javac.tree.JCTree.JCExports#getModuleNames()->List::: exports get module names
com.sun.tools.javac.tree.JCTree.JCExports#accept(TreeVisitor, D)->R::: exports accept
com.sun.tools.javac.tree.JCTree.JCExports#getTag()->Tag::: exports get tag
com.sun.tools.javac.tree.JCTree.JCOpens#accept(Visitor)->void::: opens accept
com.sun.tools.javac.tree.JCTree.JCOpens#getKind()->Kind::: opens get kind
com.sun.tools.javac.tree.JCTree.JCOpens#getPackageName()->JCExpression::: opens get package name
com.sun.tools.javac.tree.JCTree.JCOpens#getModuleNames()->List::: opens get module names
com.sun.tools.javac.tree.JCTree.JCOpens#accept(TreeVisitor, D)->R::: opens accept
com.sun.tools.javac.tree.JCTree.JCOpens#getTag()->Tag::: opens get tag
com.sun.tools.javac.tree.JCTree.JCProvides#accept(Visitor)->void::: provides accept
com.sun.tools.javac.tree.JCTree.JCProvides#getKind()->Kind::: provides get kind
com.sun.tools.javac.tree.JCTree.JCProvides#accept(TreeVisitor, D)->R::: provides accept
com.sun.tools.javac.tree.JCTree.JCProvides#getServiceName()->JCExpression::: provides get service name
com.sun.tools.javac.tree.JCTree.JCProvides#getImplementationNames()->List::: provides get implementation names
com.sun.tools.javac.tree.JCTree.JCProvides#getTag()->Tag::: provides get tag
com.sun.tools.javac.tree.JCTree.JCRequires#accept(Visitor)->void::: requires accept
com.sun.tools.javac.tree.JCTree.JCRequires#getKind()->Kind::: requires get kind
com.sun.tools.javac.tree.JCTree.JCRequires#accept(TreeVisitor, D)->R::: requires accept
com.sun.tools.javac.tree.JCTree.JCRequires#isTransitive()->boolean::: requires is transitive
com.sun.tools.javac.tree.JCTree.JCRequires#isStatic()->boolean::: requires is static
com.sun.tools.javac.tree.JCTree.JCRequires#getModuleName()->JCExpression::: requires get module name
com.sun.tools.javac.tree.JCTree.JCRequires#getTag()->Tag::: requires get tag
com.sun.tools.javac.tree.JCTree.JCUses#accept(Visitor)->void::: uses accept
com.sun.tools.javac.tree.JCTree.JCUses#getKind()->Kind::: uses get kind
com.sun.tools.javac.tree.JCTree.JCUses#getServiceName()->JCExpression::: uses get service name
com.sun.tools.javac.tree.JCTree.JCUses#accept(TreeVisitor, D)->R::: uses accept
com.sun.tools.javac.tree.JCTree.JCUses#getTag()->Tag::: uses get tag
com.sun.tools.javac.tree.JCTree.JCErroneous#accept(Visitor)->void::: erroneous accept
com.sun.tools.javac.tree.JCTree.JCErroneous#getKind()->Kind::: erroneous get kind
com.sun.tools.javac.tree.JCTree.JCErroneous#getErrorTrees()->List::: erroneous get error trees
com.sun.tools.javac.tree.JCTree.JCErroneous#accept(TreeVisitor, D)->R::: erroneous accept
com.sun.tools.javac.tree.JCTree.JCErroneous#getTag()->Tag::: erroneous get tag
com.sun.tools.javac.tree.JCTree.LetExpr#accept(Visitor)->void::: let expr accept
com.sun.tools.javac.tree.JCTree.LetExpr#getKind()->Kind::: let expr get kind
com.sun.tools.javac.tree.JCTree.LetExpr#accept(TreeVisitor, D)->R::: let expr accept
com.sun.tools.javac.tree.JCTree.LetExpr#getTag()->Tag::: let expr get tag
com.sun.tools.javac.tree.JCTree.Factory#TopLevel(List)->JCCompilationUnit::: factory  top level
com.sun.tools.javac.tree.JCTree.Factory#PackageDecl PackageDecl(List, JCExpression)->JC::: factory  package decl
com.sun.tools.javac.tree.JCTree.Factory#Import Import(JCTree, boolean)->JC::: factory  import
com.sun.tools.javac.tree.JCTree.Factory#ClassDef(JCModifiers, Name, List, JCExpression, List, List)->JCClassDecl::: factory  class def
com.sun.tools.javac.tree.JCTree.Factory#MethodDef(JCModifiers, Name, JCExpression, List, JCVariableDecl, List, List, JCBlock, JCExpression)->JCMethodDecl::: factory  method def
com.sun.tools.javac.tree.JCTree.Factory#VarDef(JCModifiers, Name, JCExpression, JCExpression)->JCVariableDecl::: factory  var def
com.sun.tools.javac.tree.JCTree.Factory#Skip Skip()->JC::: factory  skip
com.sun.tools.javac.tree.JCTree.Factory#Block Block(long, List)->JC::: factory  block
com.sun.tools.javac.tree.JCTree.Factory#DoLoop(JCStatement, JCExpression)->JCDoWhileLoop::: factory  do loop
com.sun.tools.javac.tree.JCTree.Factory#WhileLoop WhileLoop(JCExpression, JCStatement)->JC::: factory  while loop
com.sun.tools.javac.tree.JCTree.Factory#ForLoop ForLoop(List, JCExpression, List, JCStatement)->JC::: factory  for loop
com.sun.tools.javac.tree.JCTree.Factory#ForeachLoop(JCVariableDecl, JCExpression, JCStatement)->JCEnhancedForLoop::: factory  foreach loop
com.sun.tools.javac.tree.JCTree.Factory#Labelled(Name, JCStatement)->JCLabeledStatement::: factory  labelled
com.sun.tools.javac.tree.JCTree.Factory#Switch Switch(JCExpression, List)->JC::: factory  switch
com.sun.tools.javac.tree.JCTree.Factory#Case Case(JCExpression, List)->JC::: factory  case
com.sun.tools.javac.tree.JCTree.Factory#Synchronized Synchronized(JCExpression, JCBlock)->JC::: factory  synchronized
com.sun.tools.javac.tree.JCTree.Factory#Try Try(JCBlock, List, JCBlock)->JC::: factory  try
com.sun.tools.javac.tree.JCTree.Factory#Try Try(List, JCBlock, List, JCBlock)->JC::: factory  try
com.sun.tools.javac.tree.JCTree.Factory#Catch Catch(JCVariableDecl, JCBlock)->JC::: factory  catch
com.sun.tools.javac.tree.JCTree.Factory#Conditional Conditional(JCExpression, JCExpression, JCExpression)->JC::: factory  conditional
com.sun.tools.javac.tree.JCTree.Factory#If If(JCExpression, JCStatement, JCStatement)->JC::: factory  if
com.sun.tools.javac.tree.JCTree.Factory#Exec(JCExpression)->JCExpressionStatement::: factory  exec
com.sun.tools.javac.tree.JCTree.Factory#Break Break(Name)->JC::: factory  break
com.sun.tools.javac.tree.JCTree.Factory#Continue Continue(Name)->JC::: factory  continue
com.sun.tools.javac.tree.JCTree.Factory#Return Return(JCExpression)->JC::: factory  return
com.sun.tools.javac.tree.JCTree.Factory#Throw Throw(JCExpression)->JC::: factory  throw
com.sun.tools.javac.tree.JCTree.Factory#Assert Assert(JCExpression, JCExpression)->JC::: factory  assert
com.sun.tools.javac.tree.JCTree.Factory#Apply(List, JCExpression, List)->JCMethodInvocation::: factory  apply
com.sun.tools.javac.tree.JCTree.Factory#NewClass NewClass(JCExpression, List, JCExpression, List, JCClassDecl)->JC::: factory  new class
com.sun.tools.javac.tree.JCTree.Factory#NewArray NewArray(JCExpression, List, List)->JC::: factory  new array
com.sun.tools.javac.tree.JCTree.Factory#Parens Parens(JCExpression)->JC::: factory  parens
com.sun.tools.javac.tree.JCTree.Factory#Assign Assign(JCExpression, JCExpression)->JC::: factory  assign
com.sun.tools.javac.tree.JCTree.Factory#Assignop(Tag, JCTree, JCTree)->JCAssignOp::: factory  assignop
com.sun.tools.javac.tree.JCTree.Factory#Unary Unary(Tag, JCExpression)->JC::: factory  unary
com.sun.tools.javac.tree.JCTree.Factory#Binary Binary(Tag, JCExpression, JCExpression)->JC::: factory  binary
com.sun.tools.javac.tree.JCTree.Factory#TypeCast TypeCast(JCTree, JCExpression)->JC::: factory  type cast
com.sun.tools.javac.tree.JCTree.Factory#TypeTest(JCExpression, JCTree)->JCInstanceOf::: factory  type test
com.sun.tools.javac.tree.JCTree.Factory#Indexed(JCExpression, JCExpression)->JCArrayAccess::: factory  indexed
com.sun.tools.javac.tree.JCTree.Factory#Select(JCExpression, Name)->JCFieldAccess::: factory  select
com.sun.tools.javac.tree.JCTree.Factory#Ident Ident(Name)->JC::: factory  ident
com.sun.tools.javac.tree.JCTree.Factory#Literal Literal(TypeTag, Object)->JC::: factory  literal
com.sun.tools.javac.tree.JCTree.Factory#TypeIdent(TypeTag)->JCPrimitiveTypeTree::: factory  type ident
com.sun.tools.javac.tree.JCTree.Factory#TypeArray(JCExpression)->JCArrayTypeTree::: factory  type array
com.sun.tools.javac.tree.JCTree.Factory#TypeApply TypeApply(JCExpression, List)->JC::: factory  type apply
com.sun.tools.javac.tree.JCTree.Factory#TypeParameter TypeParameter(Name, List)->JC::: factory  type parameter
com.sun.tools.javac.tree.JCTree.Factory#Wildcard Wildcard(TypeBoundKind, JCTree)->JC::: factory  wildcard
com.sun.tools.javac.tree.JCTree.Factory#TypeBoundKind TypeBoundKind(BoundKind)->::: factory  type bound kind
com.sun.tools.javac.tree.JCTree.Factory#Annotation Annotation(JCTree, List)->JC::: factory  annotation
com.sun.tools.javac.tree.JCTree.Factory#Modifiers Modifiers(long, List)->JC::: factory  modifiers
com.sun.tools.javac.tree.JCTree.Factory#Erroneous Erroneous(List)->JC::: factory  erroneous
com.sun.tools.javac.tree.JCTree.Factory#ModuleDef(JCModifiers, ModuleKind, JCExpression, List)->JCModuleDecl::: factory  module def
com.sun.tools.javac.tree.JCTree.Factory#Exports Exports(JCExpression, List)->JC::: factory  exports
com.sun.tools.javac.tree.JCTree.Factory#Opens Opens(JCExpression, List)->JC::: factory  opens
com.sun.tools.javac.tree.JCTree.Factory#Provides Provides(JCExpression, List)->JC::: factory  provides
com.sun.tools.javac.tree.JCTree.Factory#Requires Requires(boolean, boolean, JCExpression)->JC::: factory  requires
com.sun.tools.javac.tree.JCTree.Factory#Uses Uses(JCExpression)->JC::: factory  uses
com.sun.tools.javac.tree.JCTree.Factory#LetExpr LetExpr(List, JCExpression)->::: factory  let expr
com.sun.tools.javac.tree.JCTree.Visitor#visitTopLevel(JCCompilationUnit)->void::: visitor visit top level
com.sun.tools.javac.tree.JCTree.Visitor#visitPackageDef(JCPackageDecl)->void::: visitor visit package def
com.sun.tools.javac.tree.JCTree.Visitor#visitImport(JCImport)->void::: visitor visit import
com.sun.tools.javac.tree.JCTree.Visitor#visitClassDef(JCClassDecl)->void::: visitor visit class def
com.sun.tools.javac.tree.JCTree.Visitor#visitMethodDef(JCMethodDecl)->void::: visitor visit method def
com.sun.tools.javac.tree.JCTree.Visitor#visitVarDef(JCVariableDecl)->void::: visitor visit var def
com.sun.tools.javac.tree.JCTree.Visitor#visitSkip(JCSkip)->void::: visitor visit skip
com.sun.tools.javac.tree.JCTree.Visitor#visitBlock(JCBlock)->void::: visitor visit block
com.sun.tools.javac.tree.JCTree.Visitor#visitDoLoop(JCDoWhileLoop)->void::: visitor visit do loop
com.sun.tools.javac.tree.JCTree.Visitor#visitWhileLoop(JCWhileLoop)->void::: visitor visit while loop
com.sun.tools.javac.tree.JCTree.Visitor#visitForLoop(JCForLoop)->void::: visitor visit for loop
com.sun.tools.javac.tree.JCTree.Visitor#visitForeachLoop(JCEnhancedForLoop)->void::: visitor visit foreach loop
com.sun.tools.javac.tree.JCTree.Visitor#visitLabelled(JCLabeledStatement)->void::: visitor visit labelled
com.sun.tools.javac.tree.JCTree.Visitor#visitSwitch(JCSwitch)->void::: visitor visit switch
com.sun.tools.javac.tree.JCTree.Visitor#visitCase(JCCase)->void::: visitor visit case
com.sun.tools.javac.tree.JCTree.Visitor#visitSynchronized(JCSynchronized)->void::: visitor visit synchronized
com.sun.tools.javac.tree.JCTree.Visitor#visitTry(JCTry)->void::: visitor visit try
com.sun.tools.javac.tree.JCTree.Visitor#visitCatch(JCCatch)->void::: visitor visit catch
com.sun.tools.javac.tree.JCTree.Visitor#visitConditional(JCConditional)->void::: visitor visit conditional
com.sun.tools.javac.tree.JCTree.Visitor#visitIf(JCIf)->void::: visitor visit if
com.sun.tools.javac.tree.JCTree.Visitor#visitExec(JCExpressionStatement)->void::: visitor visit exec
com.sun.tools.javac.tree.JCTree.Visitor#visitBreak(JCBreak)->void::: visitor visit break
com.sun.tools.javac.tree.JCTree.Visitor#visitContinue(JCContinue)->void::: visitor visit continue
com.sun.tools.javac.tree.JCTree.Visitor#visitReturn(JCReturn)->void::: visitor visit return
com.sun.tools.javac.tree.JCTree.Visitor#visitThrow(JCThrow)->void::: visitor visit throw
com.sun.tools.javac.tree.JCTree.Visitor#visitAssert(JCAssert)->void::: visitor visit assert
com.sun.tools.javac.tree.JCTree.Visitor#visitApply(JCMethodInvocation)->void::: visitor visit apply
com.sun.tools.javac.tree.JCTree.Visitor#visitNewClass(JCNewClass)->void::: visitor visit new class
com.sun.tools.javac.tree.JCTree.Visitor#visitNewArray(JCNewArray)->void::: visitor visit new array
com.sun.tools.javac.tree.JCTree.Visitor#visitLambda(JCLambda)->void::: visitor visit lambda
com.sun.tools.javac.tree.JCTree.Visitor#visitParens(JCParens)->void::: visitor visit parens
com.sun.tools.javac.tree.JCTree.Visitor#visitAssign(JCAssign)->void::: visitor visit assign
com.sun.tools.javac.tree.JCTree.Visitor#visitAssignop(JCAssignOp)->void::: visitor visit assignop
com.sun.tools.javac.tree.JCTree.Visitor#visitUnary(JCUnary)->void::: visitor visit unary
com.sun.tools.javac.tree.JCTree.Visitor#visitBinary(JCBinary)->void::: visitor visit binary
com.sun.tools.javac.tree.JCTree.Visitor#visitTypeCast(JCTypeCast)->void::: visitor visit type cast
com.sun.tools.javac.tree.JCTree.Visitor#visitTypeTest(JCInstanceOf)->void::: visitor visit type test
com.sun.tools.javac.tree.JCTree.Visitor#visitIndexed(JCArrayAccess)->void::: visitor visit indexed
com.sun.tools.javac.tree.JCTree.Visitor#visitSelect(JCFieldAccess)->void::: visitor visit select
com.sun.tools.javac.tree.JCTree.Visitor#visitReference(JCMemberReference)->void::: visitor visit reference
com.sun.tools.javac.tree.JCTree.Visitor#visitIdent(JCIdent)->void::: visitor visit ident
com.sun.tools.javac.tree.JCTree.Visitor#visitLiteral(JCLiteral)->void::: visitor visit literal
com.sun.tools.javac.tree.JCTree.Visitor#visitTypeIdent(JCPrimitiveTypeTree)->void::: visitor visit type ident
com.sun.tools.javac.tree.JCTree.Visitor#visitTypeArray(JCArrayTypeTree)->void::: visitor visit type array
com.sun.tools.javac.tree.JCTree.Visitor#visitTypeApply(JCTypeApply)->void::: visitor visit type apply
com.sun.tools.javac.tree.JCTree.Visitor#visitTypeUnion(JCTypeUnion)->void::: visitor visit type union
com.sun.tools.javac.tree.JCTree.Visitor#visitTypeIntersection(JCTypeIntersection)->void::: visitor visit type intersection
com.sun.tools.javac.tree.JCTree.Visitor#visitTypeParameter(JCTypeParameter)->void::: visitor visit type parameter
com.sun.tools.javac.tree.JCTree.Visitor#visitWildcard(JCWildcard)->void::: visitor visit wildcard
com.sun.tools.javac.tree.JCTree.Visitor#visitTypeBoundKind(TypeBoundKind)->void::: visitor visit type bound kind
com.sun.tools.javac.tree.JCTree.Visitor#visitAnnotation(JCAnnotation)->void::: visitor visit annotation
com.sun.tools.javac.tree.JCTree.Visitor#visitModifiers(JCModifiers)->void::: visitor visit modifiers
com.sun.tools.javac.tree.JCTree.Visitor#visitAnnotatedType(JCAnnotatedType)->void::: visitor visit annotated type
com.sun.tools.javac.tree.JCTree.Visitor#visitErroneous(JCErroneous)->void::: visitor visit erroneous
com.sun.tools.javac.tree.JCTree.Visitor#visitModuleDef(JCModuleDecl)->void::: visitor visit module def
com.sun.tools.javac.tree.JCTree.Visitor#visitExports(JCExports)->void::: visitor visit exports
com.sun.tools.javac.tree.JCTree.Visitor#visitOpens(JCOpens)->void::: visitor visit opens
com.sun.tools.javac.tree.JCTree.Visitor#visitProvides(JCProvides)->void::: visitor visit provides
com.sun.tools.javac.tree.JCTree.Visitor#visitRequires(JCRequires)->void::: visitor visit requires
com.sun.tools.javac.tree.JCTree.Visitor#visitUses(JCUses)->void::: visitor visit uses
com.sun.tools.javac.tree.JCTree.Visitor#visitLetExpr(LetExpr)->void::: visitor visit let expr
com.sun.tools.javac.tree.JCTree.Visitor#visitTree(JCTree)->void::: visitor visit tree
com.sun.tools.javac.tree.Pretty#align()->void:::Align code to be indented to left margin.
com.sun.tools.javac.tree.Pretty#indent()->void:::Increase left margin by indentation width.
com.sun.tools.javac.tree.Pretty#undent()->void:::Decrease left margin by indentation width.
com.sun.tools.javac.tree.Pretty#open(int, int)->void:::Enter a new precedence level
com.sun.tools.javac.tree.Pretty#close(int, int)->void:::Leave precedence level
com.sun.tools.javac.tree.Pretty#print(Object)->void:::Print string, replacing all non-ascii character with unicode escapes.
com.sun.tools.javac.tree.Pretty#println()->void:::Print new line.
com.sun.tools.javac.tree.Pretty#toSimpleString(JCTree)->String::: pretty to simple string
com.sun.tools.javac.tree.Pretty#toSimpleString(JCTree, int)->String::: pretty to simple string
com.sun.tools.javac.tree.Pretty#printExpr(JCTree, int)->void:::Visitor method: print expression tree.
com.sun.tools.javac.tree.Pretty#printExpr(JCTree)->void:::Derived visitor method: print expression tree at minimum precedence level  for expression.
com.sun.tools.javac.tree.Pretty#printStat(JCTree)->void:::Derived visitor method: print statement tree.
com.sun.tools.javac.tree.Pretty#printExprs(List, String)->void:::Derived visitor method: print list of expression trees, separated by given string.
com.sun.tools.javac.tree.Pretty#printExprs(List)->void:::Derived visitor method: print list of expression trees, separated by commas.
com.sun.tools.javac.tree.Pretty#printStats(List)->void:::Derived visitor method: print list of statements, each on a separate line.
com.sun.tools.javac.tree.Pretty#printFlags(long)->void:::Print a set of modifiers.
com.sun.tools.javac.tree.Pretty#printAnnotations(List)->void::: pretty print annotations
com.sun.tools.javac.tree.Pretty#printTypeAnnotations(List)->void::: pretty print type annotations
com.sun.tools.javac.tree.Pretty#printDocComment(JCTree)->void:::Print documentation comment, if it exists
com.sun.tools.javac.tree.Pretty#lineEndPos(String, int)->int::: pretty line end pos
com.sun.tools.javac.tree.Pretty#printTypeParameters(List)->void:::If type parameter list is non-empty, print it enclosed in  "<...>" brackets.
com.sun.tools.javac.tree.Pretty#printBlock(List)->void:::Print a block.
com.sun.tools.javac.tree.Pretty#printEnumBody(List)->void:::Print a block.
com.sun.tools.javac.tree.Pretty#isEnumerator(JCTree)->boolean:::Is the given tree an enumerator definition?
com.sun.tools.javac.tree.Pretty#printUnit(JCCompilationUnit, JCClassDecl)->void:::Print unit consisting of package clause and import statements in toplevel,  followed by class definition
com.sun.tools.javac.tree.Pretty#isUsed(Symbol, JCTree)->boolean::: pretty is used
com.sun.tools.javac.tree.Pretty#visitTopLevel(JCCompilationUnit)->void::: pretty visit top level
com.sun.tools.javac.tree.Pretty#visitPackageDef(JCPackageDecl)->void::: pretty visit package def
com.sun.tools.javac.tree.Pretty#visitModuleDef(JCModuleDecl)->void::: pretty visit module def
com.sun.tools.javac.tree.Pretty#visitExports(JCExports)->void::: pretty visit exports
com.sun.tools.javac.tree.Pretty#visitOpens(JCOpens)->void::: pretty visit opens
com.sun.tools.javac.tree.Pretty#visitProvides(JCProvides)->void::: pretty visit provides
com.sun.tools.javac.tree.Pretty#visitRequires(JCRequires)->void::: pretty visit requires
com.sun.tools.javac.tree.Pretty#visitUses(JCUses)->void::: pretty visit uses
com.sun.tools.javac.tree.Pretty#visitImport(JCImport)->void::: pretty visit import
com.sun.tools.javac.tree.Pretty#visitClassDef(JCClassDecl)->void::: pretty visit class def
com.sun.tools.javac.tree.Pretty#visitMethodDef(JCMethodDecl)->void::: pretty visit method def
com.sun.tools.javac.tree.Pretty#visitVarDef(JCVariableDecl)->void::: pretty visit var def
com.sun.tools.javac.tree.Pretty#visitSkip(JCSkip)->void::: pretty visit skip
com.sun.tools.javac.tree.Pretty#visitBlock(JCBlock)->void::: pretty visit block
com.sun.tools.javac.tree.Pretty#visitDoLoop(JCDoWhileLoop)->void::: pretty visit do loop
com.sun.tools.javac.tree.Pretty#visitWhileLoop(JCWhileLoop)->void::: pretty visit while loop
com.sun.tools.javac.tree.Pretty#visitForLoop(JCForLoop)->void::: pretty visit for loop
com.sun.tools.javac.tree.Pretty#visitForeachLoop(JCEnhancedForLoop)->void::: pretty visit foreach loop
com.sun.tools.javac.tree.Pretty#visitLabelled(JCLabeledStatement)->void::: pretty visit labelled
com.sun.tools.javac.tree.Pretty#visitSwitch(JCSwitch)->void::: pretty visit switch
com.sun.tools.javac.tree.Pretty#visitCase(JCCase)->void::: pretty visit case
com.sun.tools.javac.tree.Pretty#visitSynchronized(JCSynchronized)->void::: pretty visit synchronized
com.sun.tools.javac.tree.Pretty#visitTry(JCTry)->void::: pretty visit try
com.sun.tools.javac.tree.Pretty#visitCatch(JCCatch)->void::: pretty visit catch
com.sun.tools.javac.tree.Pretty#visitConditional(JCConditional)->void::: pretty visit conditional
com.sun.tools.javac.tree.Pretty#visitIf(JCIf)->void::: pretty visit if
com.sun.tools.javac.tree.Pretty#visitExec(JCExpressionStatement)->void::: pretty visit exec
com.sun.tools.javac.tree.Pretty#visitBreak(JCBreak)->void::: pretty visit break
com.sun.tools.javac.tree.Pretty#visitContinue(JCContinue)->void::: pretty visit continue
com.sun.tools.javac.tree.Pretty#visitReturn(JCReturn)->void::: pretty visit return
com.sun.tools.javac.tree.Pretty#visitThrow(JCThrow)->void::: pretty visit throw
com.sun.tools.javac.tree.Pretty#visitAssert(JCAssert)->void::: pretty visit assert
com.sun.tools.javac.tree.Pretty#visitApply(JCMethodInvocation)->void::: pretty visit apply
com.sun.tools.javac.tree.Pretty#visitNewClass(JCNewClass)->void::: pretty visit new class
com.sun.tools.javac.tree.Pretty#visitNewArray(JCNewArray)->void::: pretty visit new array
com.sun.tools.javac.tree.Pretty#visitLambda(JCLambda)->void::: pretty visit lambda
com.sun.tools.javac.tree.Pretty#visitParens(JCParens)->void::: pretty visit parens
com.sun.tools.javac.tree.Pretty#visitAssign(JCAssign)->void::: pretty visit assign
com.sun.tools.javac.tree.Pretty#operatorName(JCTree.Tag)->String::: pretty operator name
com.sun.tools.javac.tree.Pretty#visitAssignop(JCAssignOp)->void::: pretty visit assignop
com.sun.tools.javac.tree.Pretty#visitUnary(JCUnary)->void::: pretty visit unary
com.sun.tools.javac.tree.Pretty#visitBinary(JCBinary)->void::: pretty visit binary
com.sun.tools.javac.tree.Pretty#visitTypeCast(JCTypeCast)->void::: pretty visit type cast
com.sun.tools.javac.tree.Pretty#visitTypeTest(JCInstanceOf)->void::: pretty visit type test
com.sun.tools.javac.tree.Pretty#visitIndexed(JCArrayAccess)->void::: pretty visit indexed
com.sun.tools.javac.tree.Pretty#visitSelect(JCFieldAccess)->void::: pretty visit select
com.sun.tools.javac.tree.Pretty#visitReference(JCMemberReference)->void::: pretty visit reference
com.sun.tools.javac.tree.Pretty#visitIdent(JCIdent)->void::: pretty visit ident
com.sun.tools.javac.tree.Pretty#visitLiteral(JCLiteral)->void::: pretty visit literal
com.sun.tools.javac.tree.Pretty#visitTypeIdent(JCPrimitiveTypeTree)->void::: pretty visit type ident
com.sun.tools.javac.tree.Pretty#visitTypeArray(JCArrayTypeTree)->void::: pretty visit type array
com.sun.tools.javac.tree.Pretty#visitTypeApply(JCTypeApply)->void::: pretty visit type apply
com.sun.tools.javac.tree.Pretty#visitTypeUnion(JCTypeUnion)->void::: pretty visit type union
com.sun.tools.javac.tree.Pretty#visitTypeIntersection(JCTypeIntersection)->void::: pretty visit type intersection
com.sun.tools.javac.tree.Pretty#visitTypeParameter(JCTypeParameter)->void::: pretty visit type parameter
com.sun.tools.javac.tree.Pretty#visitWildcard(JCWildcard)->void::: pretty visit wildcard
com.sun.tools.javac.tree.Pretty#visitTypeBoundKind(TypeBoundKind)->void::: pretty visit type bound kind
com.sun.tools.javac.tree.Pretty#visitErroneous(JCErroneous)->void::: pretty visit erroneous
com.sun.tools.javac.tree.Pretty#visitLetExpr(LetExpr)->void::: pretty visit let expr
com.sun.tools.javac.tree.Pretty#visitModifiers(JCModifiers)->void::: pretty visit modifiers
com.sun.tools.javac.tree.Pretty#visitAnnotation(JCAnnotation)->void::: pretty visit annotation
com.sun.tools.javac.tree.Pretty#visitAnnotatedType(JCAnnotatedType)->void::: pretty visit annotated type
com.sun.tools.javac.tree.Pretty#visitTree(JCTree)->void::: pretty visit tree
com.sun.tools.javac.tree.TreeCopier#copy(T)->T::: tree copier copy
com.sun.tools.javac.tree.TreeCopier#copy(T, P)->T::: tree copier copy
com.sun.tools.javac.tree.TreeCopier#copy(List)->List::: tree copier copy
com.sun.tools.javac.tree.TreeCopier#copy(List, P)->List::: tree copier copy
com.sun.tools.javac.tree.TreeCopier#visitAnnotatedType(AnnotatedTypeTree, P)->JCTree::: tree copier visit annotated type
com.sun.tools.javac.tree.TreeCopier#visitAnnotation(AnnotationTree, P)->JCTree::: tree copier visit annotation
com.sun.tools.javac.tree.TreeCopier#visitAssert(AssertTree, P)->JCTree::: tree copier visit assert
com.sun.tools.javac.tree.TreeCopier#visitAssignment(AssignmentTree, P)->JCTree::: tree copier visit assignment
com.sun.tools.javac.tree.TreeCopier#visitCompoundAssignment(CompoundAssignmentTree, P)->JCTree::: tree copier visit compound assignment
com.sun.tools.javac.tree.TreeCopier#visitBinary(BinaryTree, P)->JCTree::: tree copier visit binary
com.sun.tools.javac.tree.TreeCopier#visitBlock(BlockTree, P)->JCTree::: tree copier visit block
com.sun.tools.javac.tree.TreeCopier#visitBreak(BreakTree, P)->JCTree::: tree copier visit break
com.sun.tools.javac.tree.TreeCopier#visitCase(CaseTree, P)->JCTree::: tree copier visit case
com.sun.tools.javac.tree.TreeCopier#visitCatch(CatchTree, P)->JCTree::: tree copier visit catch
com.sun.tools.javac.tree.TreeCopier#visitClass(ClassTree, P)->JCTree::: tree copier visit class
com.sun.tools.javac.tree.TreeCopier#visitConditionalExpression(ConditionalExpressionTree, P)->JCTree::: tree copier visit conditional expression
com.sun.tools.javac.tree.TreeCopier#visitContinue(ContinueTree, P)->JCTree::: tree copier visit continue
com.sun.tools.javac.tree.TreeCopier#visitDoWhileLoop(DoWhileLoopTree, P)->JCTree::: tree copier visit do while loop
com.sun.tools.javac.tree.TreeCopier#visitErroneous(ErroneousTree, P)->JCTree::: tree copier visit erroneous
com.sun.tools.javac.tree.TreeCopier#visitExpressionStatement(ExpressionStatementTree, P)->JCTree::: tree copier visit expression statement
com.sun.tools.javac.tree.TreeCopier#visitEnhancedForLoop(EnhancedForLoopTree, P)->JCTree::: tree copier visit enhanced for loop
com.sun.tools.javac.tree.TreeCopier#visitForLoop(ForLoopTree, P)->JCTree::: tree copier visit for loop
com.sun.tools.javac.tree.TreeCopier#visitIdentifier(IdentifierTree, P)->JCTree::: tree copier visit identifier
com.sun.tools.javac.tree.TreeCopier#visitIf(IfTree, P)->JCTree::: tree copier visit if
com.sun.tools.javac.tree.TreeCopier#visitImport(ImportTree, P)->JCTree::: tree copier visit import
com.sun.tools.javac.tree.TreeCopier#visitArrayAccess(ArrayAccessTree, P)->JCTree::: tree copier visit array access
com.sun.tools.javac.tree.TreeCopier#visitLabeledStatement(LabeledStatementTree, P)->JCTree::: tree copier visit labeled statement
com.sun.tools.javac.tree.TreeCopier#visitLiteral(LiteralTree, P)->JCTree::: tree copier visit literal
com.sun.tools.javac.tree.TreeCopier#visitMethod(MethodTree, P)->JCTree::: tree copier visit method
com.sun.tools.javac.tree.TreeCopier#visitMethodInvocation(MethodInvocationTree, P)->JCTree::: tree copier visit method invocation
com.sun.tools.javac.tree.TreeCopier#visitModifiers(ModifiersTree, P)->JCTree::: tree copier visit modifiers
com.sun.tools.javac.tree.TreeCopier#visitNewArray(NewArrayTree, P)->JCTree::: tree copier visit new array
com.sun.tools.javac.tree.TreeCopier#visitNewClass(NewClassTree, P)->JCTree::: tree copier visit new class
com.sun.tools.javac.tree.TreeCopier#visitLambdaExpression(LambdaExpressionTree, P)->JCTree::: tree copier visit lambda expression
com.sun.tools.javac.tree.TreeCopier#visitParenthesized(ParenthesizedTree, P)->JCTree::: tree copier visit parenthesized
com.sun.tools.javac.tree.TreeCopier#visitReturn(ReturnTree, P)->JCTree::: tree copier visit return
com.sun.tools.javac.tree.TreeCopier#visitMemberSelect(MemberSelectTree, P)->JCTree::: tree copier visit member select
com.sun.tools.javac.tree.TreeCopier#visitMemberReference(MemberReferenceTree, P)->JCTree::: tree copier visit member reference
com.sun.tools.javac.tree.TreeCopier#visitEmptyStatement(EmptyStatementTree, P)->JCTree::: tree copier visit empty statement
com.sun.tools.javac.tree.TreeCopier#visitSwitch(SwitchTree, P)->JCTree::: tree copier visit switch
com.sun.tools.javac.tree.TreeCopier#visitSynchronized(SynchronizedTree, P)->JCTree::: tree copier visit synchronized
com.sun.tools.javac.tree.TreeCopier#visitThrow(ThrowTree, P)->JCTree::: tree copier visit throw
com.sun.tools.javac.tree.TreeCopier#visitCompilationUnit(CompilationUnitTree, P)->JCTree::: tree copier visit compilation unit
com.sun.tools.javac.tree.TreeCopier#visitPackage(PackageTree, P)->JCTree::: tree copier visit package
com.sun.tools.javac.tree.TreeCopier#visitTry(TryTree, P)->JCTree::: tree copier visit try
com.sun.tools.javac.tree.TreeCopier#visitParameterizedType(ParameterizedTypeTree, P)->JCTree::: tree copier visit parameterized type
com.sun.tools.javac.tree.TreeCopier#visitUnionType(UnionTypeTree, P)->JCTree::: tree copier visit union type
com.sun.tools.javac.tree.TreeCopier#visitIntersectionType(IntersectionTypeTree, P)->JCTree::: tree copier visit intersection type
com.sun.tools.javac.tree.TreeCopier#visitArrayType(ArrayTypeTree, P)->JCTree::: tree copier visit array type
com.sun.tools.javac.tree.TreeCopier#visitTypeCast(TypeCastTree, P)->JCTree::: tree copier visit type cast
com.sun.tools.javac.tree.TreeCopier#visitPrimitiveType(PrimitiveTypeTree, P)->JCTree::: tree copier visit primitive type
com.sun.tools.javac.tree.TreeCopier#visitTypeParameter(TypeParameterTree, P)->JCTree::: tree copier visit type parameter
com.sun.tools.javac.tree.TreeCopier#visitInstanceOf(InstanceOfTree, P)->JCTree::: tree copier visit instance of
com.sun.tools.javac.tree.TreeCopier#visitUnary(UnaryTree, P)->JCTree::: tree copier visit unary
com.sun.tools.javac.tree.TreeCopier#visitVariable(VariableTree, P)->JCTree::: tree copier visit variable
com.sun.tools.javac.tree.TreeCopier#visitWhileLoop(WhileLoopTree, P)->JCTree::: tree copier visit while loop
com.sun.tools.javac.tree.TreeCopier#visitWildcard(WildcardTree, P)->JCTree::: tree copier visit wildcard
com.sun.tools.javac.tree.TreeCopier#visitModule(ModuleTree, P)->JCTree::: tree copier visit module
com.sun.tools.javac.tree.TreeCopier#visitExports(ExportsTree, P)->JCExports::: tree copier visit exports
com.sun.tools.javac.tree.TreeCopier#visitOpens(OpensTree, P)->JCOpens::: tree copier visit opens
com.sun.tools.javac.tree.TreeCopier#visitProvides(ProvidesTree, P)->JCProvides::: tree copier visit provides
com.sun.tools.javac.tree.TreeCopier#visitRequires(RequiresTree, P)->JCRequires::: tree copier visit requires
com.sun.tools.javac.tree.TreeCopier#visitUses(UsesTree, P)->JCUses::: tree copier visit uses
com.sun.tools.javac.tree.TreeCopier#visitOther(Tree, P)->JCTree::: tree copier visit other
com.sun.tools.javac.tree.TreeInfo#args(JCTree)->List::: tree info args
com.sun.tools.javac.tree.TreeInfo#isConstructor(JCTree)->boolean:::Is tree a constructor declaration?
com.sun.tools.javac.tree.TreeInfo#isReceiverParam(JCTree)->boolean::: tree info is receiver param
com.sun.tools.javac.tree.TreeInfo#hasConstructors(List)->boolean:::Is there a constructor declaration in the given list of trees?
com.sun.tools.javac.tree.TreeInfo#isMultiCatch(JCCatch)->boolean::: tree info is multi catch
com.sun.tools.javac.tree.TreeInfo#isSyntheticInit(JCTree)->boolean:::Is statement an initializer for a synthetic field?
com.sun.tools.javac.tree.TreeInfo#calledMethodName(JCTree)->Name:::If the expression is a method call, return the method name, null  otherwise.
com.sun.tools.javac.tree.TreeInfo#isSelfCall(JCTree)->boolean:::Is this a call to this or super?
com.sun.tools.javac.tree.TreeInfo#isThisQualifier(JCTree)->boolean:::Is this tree a 'this' identifier?
com.sun.tools.javac.tree.TreeInfo#isIdentOrThisDotIdent(JCTree)->boolean:::Is this tree an identifier, possibly qualified by 'this'?
com.sun.tools.javac.tree.TreeInfo#isSuperCall(JCTree)->boolean:::Is this a call to super?
com.sun.tools.javac.tree.TreeInfo#isInitialConstructor(JCTree)->boolean:::Is this a constructor whose first (non-synthetic) statement is not  of the form this(...)?
com.sun.tools.javac.tree.TreeInfo#firstConstructorCall(JCTree)->JCMethodInvocation:::Return the first call in a constructor definition.
com.sun.tools.javac.tree.TreeInfo#isDiamond(JCTree)->boolean:::Return true if a tree represents a diamond new expr.
com.sun.tools.javac.tree.TreeInfo#isEnumInit(JCTree)->boolean::: tree info is enum init
com.sun.tools.javac.tree.TreeInfo#setPolyKind(JCTree, PolyKind)->void:::set 'polyKind' on given tree
com.sun.tools.javac.tree.TreeInfo#setVarargsElement(JCTree, Type)->void:::set 'varargsElement' on given tree
com.sun.tools.javac.tree.TreeInfo#isExpressionStatement(JCExpression)->boolean:::Return true if the tree corresponds to an expression statement
com.sun.tools.javac.tree.TreeInfo#isStatement(JCTree)->boolean:::Return true if the tree corresponds to a statement
com.sun.tools.javac.tree.TreeInfo#isStaticSelector(JCTree, Names)->boolean:::Return true if the AST corresponds to a static select of the kind A.B
com.sun.tools.javac.tree.TreeInfo#isNull(JCTree)->boolean:::Return true if a tree represents the null literal.
com.sun.tools.javac.tree.TreeInfo#isInAnnotation(Env, JCTree)->boolean:::Return true iff this tree is a child of some annotation.
com.sun.tools.javac.tree.TreeInfo#getCommentText(Env, JCTree)->String::: tree info get comment text
com.sun.tools.javac.tree.TreeInfo#getCommentTree(Env, JCTree)->DCTree.DCDocComment::: tree info get comment tree
com.sun.tools.javac.tree.TreeInfo#firstStatPos(JCTree)->int:::The position of the first statement in a block, or the position of  the block itself if it is empty.
com.sun.tools.javac.tree.TreeInfo#endPos(JCTree)->int:::The end position of given tree, if it is a block with  defined endpos.
com.sun.tools.javac.tree.TreeInfo#getStartPos(JCTree)->int:::Get the start position for a tree node
com.sun.tools.javac.tree.TreeInfo#getEndPos(JCTree, EndPosTable)->int:::The end position of given tree, given  a table of end positions generated by the parser
com.sun.tools.javac.tree.TreeInfo#diagEndPos(JCTree)->DiagnosticPosition:::A DiagnosticPosition with the preferred position set to the  end position of given tree, if it is a block with  defined endpos.
com.sun.tools.javac.tree.TreeInfo#finalizerPos(JCTree, PosKind)->int:::The position of the finalizer of given try/synchronized statement.
com.sun.tools.javac.tree.TreeInfo#positionFor(Symbol, JCTree)->int:::Find the position for reporting an error about a symbol, where  that symbol is defined somewhere in the given tree.
com.sun.tools.javac.tree.TreeInfo#diagnosticPositionFor(Symbol, JCTree)->DiagnosticPosition:::Find the position for reporting an error about a symbol, where  that symbol is defined somewhere in the given tree.
com.sun.tools.javac.tree.TreeInfo#declarationFor(Symbol, JCTree)->JCTree:::Find the declaration for a symbol, where  that symbol is defined somewhere in the given tree.
com.sun.tools.javac.tree.TreeInfo#scopeFor(JCTree, JCCompilationUnit)->Env::: tree info scope for
com.sun.tools.javac.tree.TreeInfo#scopeFor(List)->Env::: tree info scope for
com.sun.tools.javac.tree.TreeInfo#pathFor(JCTree, JCCompilationUnit)->List::: tree info path for
com.sun.tools.javac.tree.TreeInfo#referencedStatement(JCLabeledStatement)->JCTree:::Return the statement referenced by a label
com.sun.tools.javac.tree.TreeInfo#skipParens(JCExpression)->JCExpression:::Skip parens and return the enclosed expression
com.sun.tools.javac.tree.TreeInfo#skipParens(JCTree)->JCTree:::Skip parens and return the enclosed expression
com.sun.tools.javac.tree.TreeInfo#types(List)->List:::Return the types of a list of trees.
com.sun.tools.javac.tree.TreeInfo#name(JCTree)->Name:::If this tree is an identifier or a field or a parameterized type,  return its name, otherwise return null.
com.sun.tools.javac.tree.TreeInfo#fullName(JCTree)->Name:::If this tree is a qualified identifier, its return fully qualified name,  otherwise return null.
com.sun.tools.javac.tree.TreeInfo#symbolFor(JCTree)->Symbol::: tree info symbol for
com.sun.tools.javac.tree.TreeInfo#isDeclaration(JCTree)->boolean::: tree info is declaration
com.sun.tools.javac.tree.TreeInfo#symbol(JCTree)->Symbol:::If this tree is an identifier or a field, return its symbol,  otherwise return null.
com.sun.tools.javac.tree.TreeInfo#nonstaticSelect(JCTree)->boolean:::Return true if this is a nonstatic selection.
com.sun.tools.javac.tree.TreeInfo#setSymbol(JCTree, Symbol)->void:::If this tree is an identifier or a field, set its symbol, otherwise skip.
com.sun.tools.javac.tree.TreeInfo#flags(JCTree)->long:::If this tree is a declaration or a block, return its flags field,  otherwise return 0.
com.sun.tools.javac.tree.TreeInfo#firstFlag(long)->long:::Return first (smallest) flag in `flags':  pre: flags != 0
com.sun.tools.javac.tree.TreeInfo#flagNames(long)->String:::Return flags as a string, separated by " ".
com.sun.tools.javac.tree.TreeInfo#opPrec(JCTree.Tag)->int:::Map operators to their precedence levels.
com.sun.tools.javac.tree.TreeInfo#tagToKind(JCTree.Tag)->Tree.Kind::: tree info tag to kind
com.sun.tools.javac.tree.TreeInfo#typeIn(JCExpression)->JCExpression:::Returns the underlying type of the tree if it is an annotated type, or the tree itself otherwise.
com.sun.tools.javac.tree.TreeInfo#innermostType(JCTree, boolean)->JCTree::: tree info innermost type
com.sun.tools.javac.tree.TreeInfo#containsTypeAnnotation(JCTree)->boolean::: tree info contains type annotation
com.sun.tools.javac.tree.TreeInfo#isModuleInfo(JCCompilationUnit)->boolean::: tree info is module info
com.sun.tools.javac.tree.TreeInfo#getModule(JCCompilationUnit)->JCModuleDecl::: tree info get module
com.sun.tools.javac.tree.TreeInfo#isPackageInfo(JCCompilationUnit)->boolean::: tree info is package info
com.sun.tools.javac.tree.TreeMaker#instance(Context)->TreeMaker:::Get the TreeMaker instance.
com.sun.tools.javac.tree.TreeMaker#forToplevel(JCCompilationUnit)->TreeMaker:::Create a new tree maker for a given toplevel.
com.sun.tools.javac.tree.TreeMaker#at(int)->TreeMaker:::Reassign current position.
com.sun.tools.javac.tree.TreeMaker#at(DiagnosticPosition)->TreeMaker:::Reassign current position.
com.sun.tools.javac.tree.TreeMaker#TopLevel(List)->JCCompilationUnit:::Create given tree node at current position.
com.sun.tools.javac.tree.TreeMaker#PackageDecl PackageDecl(List, JCExpression)->JC::: tree maker  package decl
com.sun.tools.javac.tree.TreeMaker#Import Import(JCTree, boolean)->JC::: tree maker  import
com.sun.tools.javac.tree.TreeMaker#ClassDef(JCModifiers, Name, List, JCExpression, List, List)->JCClassDecl::: tree maker  class def
com.sun.tools.javac.tree.TreeMaker#MethodDef(JCModifiers, Name, JCExpression, List, List, List, JCBlock, JCExpression)->JCMethodDecl::: tree maker  method def
com.sun.tools.javac.tree.TreeMaker#MethodDef(JCModifiers, Name, JCExpression, List, JCVariableDecl, List, List, JCBlock, JCExpression)->JCMethodDecl::: tree maker  method def
com.sun.tools.javac.tree.TreeMaker#VarDef(JCModifiers, Name, JCExpression, JCExpression)->JCVariableDecl::: tree maker  var def
com.sun.tools.javac.tree.TreeMaker#ReceiverVarDef(JCModifiers, JCExpression, JCExpression)->JCVariableDecl::: tree maker  receiver var def
com.sun.tools.javac.tree.TreeMaker#Skip Skip()->JC::: tree maker  skip
com.sun.tools.javac.tree.TreeMaker#Block Block(long, List)->JC::: tree maker  block
com.sun.tools.javac.tree.TreeMaker#DoLoop(JCStatement, JCExpression)->JCDoWhileLoop::: tree maker  do loop
com.sun.tools.javac.tree.TreeMaker#WhileLoop WhileLoop(JCExpression, JCStatement)->JC::: tree maker  while loop
com.sun.tools.javac.tree.TreeMaker#ForLoop ForLoop(List, JCExpression, List, JCStatement)->JC::: tree maker  for loop
com.sun.tools.javac.tree.TreeMaker#ForeachLoop(JCVariableDecl, JCExpression, JCStatement)->JCEnhancedForLoop::: tree maker  foreach loop
com.sun.tools.javac.tree.TreeMaker#Labelled(Name, JCStatement)->JCLabeledStatement::: tree maker  labelled
com.sun.tools.javac.tree.TreeMaker#Switch Switch(JCExpression, List)->JC::: tree maker  switch
com.sun.tools.javac.tree.TreeMaker#Case Case(JCExpression, List)->JC::: tree maker  case
com.sun.tools.javac.tree.TreeMaker#Synchronized Synchronized(JCExpression, JCBlock)->JC::: tree maker  synchronized
com.sun.tools.javac.tree.TreeMaker#Try Try(JCBlock, List, JCBlock)->JC::: tree maker  try
com.sun.tools.javac.tree.TreeMaker#Try Try(List, JCBlock, List, JCBlock)->JC::: tree maker  try
com.sun.tools.javac.tree.TreeMaker#Catch Catch(JCVariableDecl, JCBlock)->JC::: tree maker  catch
com.sun.tools.javac.tree.TreeMaker#Conditional Conditional(JCExpression, JCExpression, JCExpression)->JC::: tree maker  conditional
com.sun.tools.javac.tree.TreeMaker#If If(JCExpression, JCStatement, JCStatement)->JC::: tree maker  if
com.sun.tools.javac.tree.TreeMaker#Exec(JCExpression)->JCExpressionStatement::: tree maker  exec
com.sun.tools.javac.tree.TreeMaker#Break Break(Name)->JC::: tree maker  break
com.sun.tools.javac.tree.TreeMaker#Continue Continue(Name)->JC::: tree maker  continue
com.sun.tools.javac.tree.TreeMaker#Return Return(JCExpression)->JC::: tree maker  return
com.sun.tools.javac.tree.TreeMaker#Throw Throw(JCExpression)->JC::: tree maker  throw
com.sun.tools.javac.tree.TreeMaker#Assert Assert(JCExpression, JCExpression)->JC::: tree maker  assert
com.sun.tools.javac.tree.TreeMaker#Apply(List, JCExpression, List)->JCMethodInvocation::: tree maker  apply
com.sun.tools.javac.tree.TreeMaker#NewClass NewClass(JCExpression, List, JCExpression, List, JCClassDecl)->JC::: tree maker  new class
com.sun.tools.javac.tree.TreeMaker#NewArray NewArray(JCExpression, List, List)->JC::: tree maker  new array
com.sun.tools.javac.tree.TreeMaker#Lambda Lambda(List, JCTree)->JC::: tree maker  lambda
com.sun.tools.javac.tree.TreeMaker#Parens Parens(JCExpression)->JC::: tree maker  parens
com.sun.tools.javac.tree.TreeMaker#Assign Assign(JCExpression, JCExpression)->JC::: tree maker  assign
com.sun.tools.javac.tree.TreeMaker#Assignop(JCTree.Tag, JCTree, JCTree)->JCAssignOp::: tree maker  assignop
com.sun.tools.javac.tree.TreeMaker#Unary Unary(JCTree.Tag, JCExpression)->JC::: tree maker  unary
com.sun.tools.javac.tree.TreeMaker#Binary Binary(JCTree.Tag, JCExpression, JCExpression)->JC::: tree maker  binary
com.sun.tools.javac.tree.TreeMaker#TypeCast TypeCast(JCTree, JCExpression)->JC::: tree maker  type cast
com.sun.tools.javac.tree.TreeMaker#TypeTest(JCExpression, JCTree)->JCInstanceOf::: tree maker  type test
com.sun.tools.javac.tree.TreeMaker#Indexed(JCExpression, JCExpression)->JCArrayAccess::: tree maker  indexed
com.sun.tools.javac.tree.TreeMaker#Select(JCExpression, Name)->JCFieldAccess::: tree maker  select
com.sun.tools.javac.tree.TreeMaker#Reference Reference(JCMemberReference.ReferenceMode, Name, JCExpression, List)->JCMember::: tree maker  reference
com.sun.tools.javac.tree.TreeMaker#Ident Ident(Name)->JC::: tree maker  ident
com.sun.tools.javac.tree.TreeMaker#Literal Literal(TypeTag, Object)->JC::: tree maker  literal
com.sun.tools.javac.tree.TreeMaker#TypeIdent(TypeTag)->JCPrimitiveTypeTree::: tree maker  type ident
com.sun.tools.javac.tree.TreeMaker#TypeArray(JCExpression)->JCArrayTypeTree::: tree maker  type array
com.sun.tools.javac.tree.TreeMaker#TypeApply TypeApply(JCExpression, List)->JC::: tree maker  type apply
com.sun.tools.javac.tree.TreeMaker#TypeUnion TypeUnion(List)->JC::: tree maker  type union
com.sun.tools.javac.tree.TreeMaker#TypeIntersection TypeIntersection(List)->JC::: tree maker  type intersection
com.sun.tools.javac.tree.TreeMaker#TypeParameter TypeParameter(Name, List)->JC::: tree maker  type parameter
com.sun.tools.javac.tree.TreeMaker#TypeParameter TypeParameter(Name, List, List)->JC::: tree maker  type parameter
com.sun.tools.javac.tree.TreeMaker#Wildcard Wildcard(TypeBoundKind, JCTree)->JC::: tree maker  wildcard
com.sun.tools.javac.tree.TreeMaker#TypeBoundKind TypeBoundKind(BoundKind)->::: tree maker  type bound kind
com.sun.tools.javac.tree.TreeMaker#Annotation Annotation(JCTree, List)->JC::: tree maker  annotation
com.sun.tools.javac.tree.TreeMaker#TypeAnnotation(JCTree, List)->JCAnnotation::: tree maker  type annotation
com.sun.tools.javac.tree.TreeMaker#Modifiers Modifiers(long, List)->JC::: tree maker  modifiers
com.sun.tools.javac.tree.TreeMaker#Modifiers Modifiers(long)->JC::: tree maker  modifiers
com.sun.tools.javac.tree.TreeMaker#ModuleDef(JCModifiers, ModuleKind, JCExpression, List)->JCModuleDecl::: tree maker  module def
com.sun.tools.javac.tree.TreeMaker#Exports Exports(JCExpression, List)->JC::: tree maker  exports
com.sun.tools.javac.tree.TreeMaker#Opens Opens(JCExpression, List)->JC::: tree maker  opens
com.sun.tools.javac.tree.TreeMaker#Provides Provides(JCExpression, List)->JC::: tree maker  provides
com.sun.tools.javac.tree.TreeMaker#Requires Requires(boolean, boolean, JCExpression)->JC::: tree maker  requires
com.sun.tools.javac.tree.TreeMaker#Uses Uses(JCExpression)->JC::: tree maker  uses
com.sun.tools.javac.tree.TreeMaker#AnnotatedType AnnotatedType(List, JCExpression)->JC::: tree maker  annotated type
com.sun.tools.javac.tree.TreeMaker#Erroneous Erroneous()->JC::: tree maker  erroneous
com.sun.tools.javac.tree.TreeMaker#Erroneous Erroneous(List)->JC::: tree maker  erroneous
com.sun.tools.javac.tree.TreeMaker#LetExpr LetExpr(List, JCExpression)->::: tree maker  let expr
com.sun.tools.javac.tree.TreeMaker#AnonymousClassDef(JCModifiers, List)->JCClassDecl::: tree maker  anonymous class def
com.sun.tools.javac.tree.TreeMaker#LetExpr LetExpr(JCVariableDecl, JCExpression)->::: tree maker  let expr
com.sun.tools.javac.tree.TreeMaker#Ident Ident(Symbol)->JC:::Create an identifier from a symbol.
com.sun.tools.javac.tree.TreeMaker#Select(JCExpression, Symbol)->JCExpression:::Create a selection node from a qualifier tree and a symbol.
com.sun.tools.javac.tree.TreeMaker#QualIdent(Symbol)->JCExpression:::Create a qualified identifier from a symbol, adding enough qualifications  to make the reference unique.
com.sun.tools.javac.tree.TreeMaker#Ident(JCVariableDecl)->JCExpression:::Create an identifier that refers to the variable declared in given variable  declaration.
com.sun.tools.javac.tree.TreeMaker#Idents(List)->List:::Create a list of identifiers referring to the variables declared  in given list of variable declarations.
com.sun.tools.javac.tree.TreeMaker#This(Type)->JCExpression:::Create a tree representing `this', given its type.
com.sun.tools.javac.tree.TreeMaker#QualThis(Type)->JCExpression:::Create a tree representing qualified `this' given its type
com.sun.tools.javac.tree.TreeMaker#ClassLiteral(ClassSymbol)->JCExpression:::Create a tree representing a class literal.
com.sun.tools.javac.tree.TreeMaker#ClassLiteral(Type)->JCExpression:::Create a tree representing a class literal.
com.sun.tools.javac.tree.TreeMaker#Super(Type, TypeSymbol)->JCIdent:::Create a tree representing `super', given its type and owner.
com.sun.tools.javac.tree.TreeMaker#App(JCExpression, List)->JCMethodInvocation:::Create a method invocation from a method tree and a list of argument trees.
com.sun.tools.javac.tree.TreeMaker#App(JCExpression)->JCMethodInvocation:::Create a no-arg method invocation from a method tree
com.sun.tools.javac.tree.TreeMaker#Create(Symbol, List)->JCExpression:::Create a method invocation from a method tree and a list of argument trees.
com.sun.tools.javac.tree.TreeMaker#Type(Type)->JCExpression:::Create a tree representing given type.
com.sun.tools.javac.tree.TreeMaker#Types(List)->List:::Create a list of trees representing given list of types.
com.sun.tools.javac.tree.TreeMaker#VarDef(VarSymbol, JCExpression)->JCVariableDecl:::Create a variable definition from a variable symbol and an initializer  expression.
com.sun.tools.javac.tree.TreeMaker#Annotations(List)->List:::Create annotation trees from annotations.
com.sun.tools.javac.tree.TreeMaker#Literal Literal(Object)->JC::: tree maker  literal
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#visitConstant(Attribute.Constant)->void::: annotation builder visit constant
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#visitClass(Attribute.Class)->void::: annotation builder visit class
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#visitEnum(Attribute.Enum)->void::: annotation builder visit enum
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#visitError(Attribute.Error)->void::: annotation builder visit error
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#visitCompound(Attribute.Compound)->void::: annotation builder visit compound
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#visitCompoundInternal(Attribute.Compound)->JCAnnotation::: annotation builder visit compound internal
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#visitTypeCompoundInternal(Attribute.TypeCompound)->JCAnnotation::: annotation builder visit type compound internal
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#visitArray(Attribute.Array)->void::: annotation builder visit array
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#translate(Attribute)->JCExpression::: annotation builder translate
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#translate(Attribute.Compound)->JCAnnotation::: annotation builder translate
com.sun.tools.javac.tree.TreeMaker.AnnotationBuilder#translate(Attribute.TypeCompound)->JCAnnotation::: annotation builder translate
com.sun.tools.javac.tree.TreeMaker#Annotation Annotation(Attribute)->JC:::Create an annotation tree from an attribute.
com.sun.tools.javac.tree.TreeMaker#TypeAnnotation(Attribute)->JCAnnotation::: tree maker  type annotation
com.sun.tools.javac.tree.TreeMaker#MethodDef(MethodSymbol, JCBlock)->JCMethodDecl:::Create a method definition from a method symbol and a method body.
com.sun.tools.javac.tree.TreeMaker#MethodDef(MethodSymbol, Type, JCBlock)->JCMethodDecl:::Create a method definition from a method symbol, method type  and a method body.
com.sun.tools.javac.tree.TreeMaker#TypeParameter TypeParam(Name, TypeVar)->JC:::Create a type parameter tree from its name and type.
com.sun.tools.javac.tree.TreeMaker#TypeParams(List)->List:::Create a list of type parameter trees from a list of type variables.
com.sun.tools.javac.tree.TreeMaker#Param(Name, Type, Symbol)->JCVariableDecl:::Create a value parameter tree from its name, type, and owner.
com.sun.tools.javac.tree.TreeMaker#Params(List, Symbol)->List:::Create a a list of value parameter trees x0, ..., xn from a list of  their types and an their owner.
com.sun.tools.javac.tree.TreeMaker#Call(JCExpression)->JCStatement:::Wrap a method invocation in an expression statement or return statement,  depending on whether the method invocation expression's type is void.
com.sun.tools.javac.tree.TreeMaker#Assignment(Symbol, JCExpression)->JCStatement:::Construct an assignment from a variable symbol and a right hand side.
com.sun.tools.javac.tree.TreeMaker#Indexed(Symbol, JCExpression)->JCArrayAccess:::Construct an index expression from a variable and an expression.
com.sun.tools.javac.tree.TreeMaker#TypeCast TypeCast(Type, JCExpression)->JC:::Make an attributed type cast expression.
com.sun.tools.javac.tree.TreeMaker#isUnqualifiable(Symbol)->boolean:::Can given symbol be referred to in unqualified form?
com.sun.tools.javac.tree.TreeMaker#paramName(int)->Name:::The name of synthetic parameter number `i'.
com.sun.tools.javac.tree.TreeMaker#typaramName(int)->Name:::The name of synthetic type parameter number `i'.
com.sun.tools.javac.tree.TreeScanner#scan(JCTree)->void:::Visitor method: Scan a single node.
com.sun.tools.javac.tree.TreeScanner#scan(List)->void:::Visitor method: scan a list of nodes.
com.sun.tools.javac.tree.TreeScanner#visitTopLevel(JCCompilationUnit)->void::: tree scanner visit top level
com.sun.tools.javac.tree.TreeScanner#visitPackageDef(JCPackageDecl)->void::: tree scanner visit package def
com.sun.tools.javac.tree.TreeScanner#visitModuleDef(JCModuleDecl)->void::: tree scanner visit module def
com.sun.tools.javac.tree.TreeScanner#visitExports(JCExports)->void::: tree scanner visit exports
com.sun.tools.javac.tree.TreeScanner#visitOpens(JCOpens)->void::: tree scanner visit opens
com.sun.tools.javac.tree.TreeScanner#visitProvides(JCProvides)->void::: tree scanner visit provides
com.sun.tools.javac.tree.TreeScanner#visitRequires(JCRequires)->void::: tree scanner visit requires
com.sun.tools.javac.tree.TreeScanner#visitUses(JCUses)->void::: tree scanner visit uses
com.sun.tools.javac.tree.TreeScanner#visitImport(JCImport)->void::: tree scanner visit import
com.sun.tools.javac.tree.TreeScanner#visitClassDef(JCClassDecl)->void::: tree scanner visit class def
com.sun.tools.javac.tree.TreeScanner#visitMethodDef(JCMethodDecl)->void::: tree scanner visit method def
com.sun.tools.javac.tree.TreeScanner#visitVarDef(JCVariableDecl)->void::: tree scanner visit var def
com.sun.tools.javac.tree.TreeScanner#visitSkip(JCSkip)->void::: tree scanner visit skip
com.sun.tools.javac.tree.TreeScanner#visitBlock(JCBlock)->void::: tree scanner visit block
com.sun.tools.javac.tree.TreeScanner#visitDoLoop(JCDoWhileLoop)->void::: tree scanner visit do loop
com.sun.tools.javac.tree.TreeScanner#visitWhileLoop(JCWhileLoop)->void::: tree scanner visit while loop
com.sun.tools.javac.tree.TreeScanner#visitForLoop(JCForLoop)->void::: tree scanner visit for loop
com.sun.tools.javac.tree.TreeScanner#visitForeachLoop(JCEnhancedForLoop)->void::: tree scanner visit foreach loop
com.sun.tools.javac.tree.TreeScanner#visitLabelled(JCLabeledStatement)->void::: tree scanner visit labelled
com.sun.tools.javac.tree.TreeScanner#visitSwitch(JCSwitch)->void::: tree scanner visit switch
com.sun.tools.javac.tree.TreeScanner#visitCase(JCCase)->void::: tree scanner visit case
com.sun.tools.javac.tree.TreeScanner#visitSynchronized(JCSynchronized)->void::: tree scanner visit synchronized
com.sun.tools.javac.tree.TreeScanner#visitTry(JCTry)->void::: tree scanner visit try
com.sun.tools.javac.tree.TreeScanner#visitCatch(JCCatch)->void::: tree scanner visit catch
com.sun.tools.javac.tree.TreeScanner#visitConditional(JCConditional)->void::: tree scanner visit conditional
com.sun.tools.javac.tree.TreeScanner#visitIf(JCIf)->void::: tree scanner visit if
com.sun.tools.javac.tree.TreeScanner#visitExec(JCExpressionStatement)->void::: tree scanner visit exec
com.sun.tools.javac.tree.TreeScanner#visitBreak(JCBreak)->void::: tree scanner visit break
com.sun.tools.javac.tree.TreeScanner#visitContinue(JCContinue)->void::: tree scanner visit continue
com.sun.tools.javac.tree.TreeScanner#visitReturn(JCReturn)->void::: tree scanner visit return
com.sun.tools.javac.tree.TreeScanner#visitThrow(JCThrow)->void::: tree scanner visit throw
com.sun.tools.javac.tree.TreeScanner#visitAssert(JCAssert)->void::: tree scanner visit assert
com.sun.tools.javac.tree.TreeScanner#visitApply(JCMethodInvocation)->void::: tree scanner visit apply
com.sun.tools.javac.tree.TreeScanner#visitNewClass(JCNewClass)->void::: tree scanner visit new class
com.sun.tools.javac.tree.TreeScanner#visitNewArray(JCNewArray)->void::: tree scanner visit new array
com.sun.tools.javac.tree.TreeScanner#visitLambda(JCLambda)->void::: tree scanner visit lambda
com.sun.tools.javac.tree.TreeScanner#visitParens(JCParens)->void::: tree scanner visit parens
com.sun.tools.javac.tree.TreeScanner#visitAssign(JCAssign)->void::: tree scanner visit assign
com.sun.tools.javac.tree.TreeScanner#visitAssignop(JCAssignOp)->void::: tree scanner visit assignop
com.sun.tools.javac.tree.TreeScanner#visitUnary(JCUnary)->void::: tree scanner visit unary
com.sun.tools.javac.tree.TreeScanner#visitBinary(JCBinary)->void::: tree scanner visit binary
com.sun.tools.javac.tree.TreeScanner#visitTypeCast(JCTypeCast)->void::: tree scanner visit type cast
com.sun.tools.javac.tree.TreeScanner#visitTypeTest(JCInstanceOf)->void::: tree scanner visit type test
com.sun.tools.javac.tree.TreeScanner#visitIndexed(JCArrayAccess)->void::: tree scanner visit indexed
com.sun.tools.javac.tree.TreeScanner#visitSelect(JCFieldAccess)->void::: tree scanner visit select
com.sun.tools.javac.tree.TreeScanner#visitReference(JCMemberReference)->void::: tree scanner visit reference
com.sun.tools.javac.tree.TreeScanner#visitIdent(JCIdent)->void::: tree scanner visit ident
com.sun.tools.javac.tree.TreeScanner#visitLiteral(JCLiteral)->void::: tree scanner visit literal
com.sun.tools.javac.tree.TreeScanner#visitTypeIdent(JCPrimitiveTypeTree)->void::: tree scanner visit type ident
com.sun.tools.javac.tree.TreeScanner#visitTypeArray(JCArrayTypeTree)->void::: tree scanner visit type array
com.sun.tools.javac.tree.TreeScanner#visitTypeApply(JCTypeApply)->void::: tree scanner visit type apply
com.sun.tools.javac.tree.TreeScanner#visitTypeUnion(JCTypeUnion)->void::: tree scanner visit type union
com.sun.tools.javac.tree.TreeScanner#visitTypeIntersection(JCTypeIntersection)->void::: tree scanner visit type intersection
com.sun.tools.javac.tree.TreeScanner#visitTypeParameter(JCTypeParameter)->void::: tree scanner visit type parameter
com.sun.tools.javac.tree.TreeScanner#visitWildcard(JCWildcard)->void::: tree scanner visit wildcard
com.sun.tools.javac.tree.TreeScanner#visitTypeBoundKind(TypeBoundKind)->void::: tree scanner visit type bound kind
com.sun.tools.javac.tree.TreeScanner#visitModifiers(JCModifiers)->void::: tree scanner visit modifiers
com.sun.tools.javac.tree.TreeScanner#visitAnnotation(JCAnnotation)->void::: tree scanner visit annotation
com.sun.tools.javac.tree.TreeScanner#visitAnnotatedType(JCAnnotatedType)->void::: tree scanner visit annotated type
com.sun.tools.javac.tree.TreeScanner#visitErroneous(JCErroneous)->void::: tree scanner visit erroneous
com.sun.tools.javac.tree.TreeScanner#visitLetExpr(LetExpr)->void::: tree scanner visit let expr
com.sun.tools.javac.tree.TreeScanner#visitTree(JCTree)->void::: tree scanner visit tree
com.sun.tools.javac.tree.TreeTranslator#translate(T)->T:::Visitor method: Translate a single node.
com.sun.tools.javac.tree.TreeTranslator#translate(List)->List:::Visitor method: translate a list of nodes.
com.sun.tools.javac.tree.TreeTranslator#translateVarDefs(List)->List::: Visitor method: translate a list of variable definitions.
com.sun.tools.javac.tree.TreeTranslator#translateTypeParams(List)->List::: Visitor method: translate a list of type parameters.
com.sun.tools.javac.tree.TreeTranslator#translateCases(List)->List::: Visitor method: translate a list of case parts of switch statements.
com.sun.tools.javac.tree.TreeTranslator#translateCatchers(List)->List::: Visitor method: translate a list of catch clauses in try statements.
com.sun.tools.javac.tree.TreeTranslator#translateAnnotations(List)->List::: Visitor method: translate a list of catch clauses in try statements.
com.sun.tools.javac.tree.TreeTranslator#visitTopLevel(JCCompilationUnit)->void::: tree translator visit top level
com.sun.tools.javac.tree.TreeTranslator#visitPackageDef(JCPackageDecl)->void::: tree translator visit package def
com.sun.tools.javac.tree.TreeTranslator#visitImport(JCImport)->void::: tree translator visit import
com.sun.tools.javac.tree.TreeTranslator#visitClassDef(JCClassDecl)->void::: tree translator visit class def
com.sun.tools.javac.tree.TreeTranslator#visitMethodDef(JCMethodDecl)->void::: tree translator visit method def
com.sun.tools.javac.tree.TreeTranslator#visitVarDef(JCVariableDecl)->void::: tree translator visit var def
com.sun.tools.javac.tree.TreeTranslator#visitSkip(JCSkip)->void::: tree translator visit skip
com.sun.tools.javac.tree.TreeTranslator#visitBlock(JCBlock)->void::: tree translator visit block
com.sun.tools.javac.tree.TreeTranslator#visitDoLoop(JCDoWhileLoop)->void::: tree translator visit do loop
com.sun.tools.javac.tree.TreeTranslator#visitWhileLoop(JCWhileLoop)->void::: tree translator visit while loop
com.sun.tools.javac.tree.TreeTranslator#visitForLoop(JCForLoop)->void::: tree translator visit for loop
com.sun.tools.javac.tree.TreeTranslator#visitForeachLoop(JCEnhancedForLoop)->void::: tree translator visit foreach loop
com.sun.tools.javac.tree.TreeTranslator#visitLabelled(JCLabeledStatement)->void::: tree translator visit labelled
com.sun.tools.javac.tree.TreeTranslator#visitSwitch(JCSwitch)->void::: tree translator visit switch
com.sun.tools.javac.tree.TreeTranslator#visitCase(JCCase)->void::: tree translator visit case
com.sun.tools.javac.tree.TreeTranslator#visitSynchronized(JCSynchronized)->void::: tree translator visit synchronized
com.sun.tools.javac.tree.TreeTranslator#visitTry(JCTry)->void::: tree translator visit try
com.sun.tools.javac.tree.TreeTranslator#visitCatch(JCCatch)->void::: tree translator visit catch
com.sun.tools.javac.tree.TreeTranslator#visitConditional(JCConditional)->void::: tree translator visit conditional
com.sun.tools.javac.tree.TreeTranslator#visitIf(JCIf)->void::: tree translator visit if
com.sun.tools.javac.tree.TreeTranslator#visitExec(JCExpressionStatement)->void::: tree translator visit exec
com.sun.tools.javac.tree.TreeTranslator#visitBreak(JCBreak)->void::: tree translator visit break
com.sun.tools.javac.tree.TreeTranslator#visitContinue(JCContinue)->void::: tree translator visit continue
com.sun.tools.javac.tree.TreeTranslator#visitReturn(JCReturn)->void::: tree translator visit return
com.sun.tools.javac.tree.TreeTranslator#visitThrow(JCThrow)->void::: tree translator visit throw
com.sun.tools.javac.tree.TreeTranslator#visitAssert(JCAssert)->void::: tree translator visit assert
com.sun.tools.javac.tree.TreeTranslator#visitApply(JCMethodInvocation)->void::: tree translator visit apply
com.sun.tools.javac.tree.TreeTranslator#visitNewClass(JCNewClass)->void::: tree translator visit new class
com.sun.tools.javac.tree.TreeTranslator#visitLambda(JCLambda)->void::: tree translator visit lambda
com.sun.tools.javac.tree.TreeTranslator#visitNewArray(JCNewArray)->void::: tree translator visit new array
com.sun.tools.javac.tree.TreeTranslator#visitParens(JCParens)->void::: tree translator visit parens
com.sun.tools.javac.tree.TreeTranslator#visitAssign(JCAssign)->void::: tree translator visit assign
com.sun.tools.javac.tree.TreeTranslator#visitAssignop(JCAssignOp)->void::: tree translator visit assignop
com.sun.tools.javac.tree.TreeTranslator#visitUnary(JCUnary)->void::: tree translator visit unary
com.sun.tools.javac.tree.TreeTranslator#visitBinary(JCBinary)->void::: tree translator visit binary
com.sun.tools.javac.tree.TreeTranslator#visitTypeCast(JCTypeCast)->void::: tree translator visit type cast
com.sun.tools.javac.tree.TreeTranslator#visitTypeTest(JCInstanceOf)->void::: tree translator visit type test
com.sun.tools.javac.tree.TreeTranslator#visitIndexed(JCArrayAccess)->void::: tree translator visit indexed
com.sun.tools.javac.tree.TreeTranslator#visitSelect(JCFieldAccess)->void::: tree translator visit select
com.sun.tools.javac.tree.TreeTranslator#visitReference(JCMemberReference)->void::: tree translator visit reference
com.sun.tools.javac.tree.TreeTranslator#visitIdent(JCIdent)->void::: tree translator visit ident
com.sun.tools.javac.tree.TreeTranslator#visitLiteral(JCLiteral)->void::: tree translator visit literal
com.sun.tools.javac.tree.TreeTranslator#visitTypeIdent(JCPrimitiveTypeTree)->void::: tree translator visit type ident
com.sun.tools.javac.tree.TreeTranslator#visitTypeArray(JCArrayTypeTree)->void::: tree translator visit type array
com.sun.tools.javac.tree.TreeTranslator#visitTypeApply(JCTypeApply)->void::: tree translator visit type apply
com.sun.tools.javac.tree.TreeTranslator#visitTypeUnion(JCTypeUnion)->void::: tree translator visit type union
com.sun.tools.javac.tree.TreeTranslator#visitTypeIntersection(JCTypeIntersection)->void::: tree translator visit type intersection
com.sun.tools.javac.tree.TreeTranslator#visitTypeParameter(JCTypeParameter)->void::: tree translator visit type parameter
com.sun.tools.javac.tree.TreeTranslator#visitWildcard(JCWildcard)->void::: tree translator visit wildcard
com.sun.tools.javac.tree.TreeTranslator#visitTypeBoundKind(TypeBoundKind)->void::: tree translator visit type bound kind
com.sun.tools.javac.tree.TreeTranslator#visitErroneous(JCErroneous)->void::: tree translator visit erroneous
com.sun.tools.javac.tree.TreeTranslator#visitLetExpr(LetExpr)->void::: tree translator visit let expr
com.sun.tools.javac.tree.TreeTranslator#visitModifiers(JCModifiers)->void::: tree translator visit modifiers
com.sun.tools.javac.tree.TreeTranslator#visitAnnotation(JCAnnotation)->void::: tree translator visit annotation
com.sun.tools.javac.tree.TreeTranslator#visitAnnotatedType(JCAnnotatedType)->void::: tree translator visit annotated type
com.sun.tools.javac.tree.TreeTranslator#visitTree(JCTree)->void::: tree translator visit tree

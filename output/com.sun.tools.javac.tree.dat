DCTree#getSourcePosition(DCDocComment)::: tree get source position:::return->getSourcePos
DCTree#pos(DCDocComment)::: tree pos:::return->getSourcePos->new->SimpleDiagnosticPosition
DCTree#toString():::Convert a tree to a pretty-printed string.:::s->new->StringWriter->try->new->DocPretty->print->catch->throw->new->AssertionError->finally->return->s->toString
DCTree.DCEndPosTree#getEndPos(DCDocComment)::: end pos tree get end pos:::return->getSourcePos
DCTree.DCEndPosTree#setEndPos(int)::: end pos tree set end pos:::return
DCTree.DCDocComment#getKind()::: doc comment get kind:::return
DCTree.DCDocComment#accept(DocTreeVisitor, D)::: doc comment accept:::return->v->visitDocComment
DCTree.DCDocComment#getFirstSentence()::: doc comment get first sentence:::return
DCTree.DCDocComment#getFullBody()::: doc comment get full body:::return
DCTree.DCDocComment#getBody()::: doc comment get body:::return
DCTree.DCDocComment#getBlockTags()::: doc comment get block tags:::return
DCTree.DCDocComment#getPreamble()::: doc comment get preamble:::return
DCTree.DCDocComment#getPostamble()::: doc comment get postamble:::return
DCTree.DCBlockTag#getTagName()::: block tag get tag name:::return->getKind
DCTree.DCInlineTag#getTagName()::: inline tag get tag name:::return->getKind
DCTree.DCAttribute#getKind()::: attribute get kind:::return
DCTree.DCAttribute#accept(DocTreeVisitor, D)::: attribute accept:::return->v->visitAttribute
DCTree.DCAttribute#getName()::: attribute get name:::return
DCTree.DCAttribute#getValueKind()::: attribute get value kind:::return
DCTree.DCAttribute#getValue()::: attribute get value:::return
DCTree.DCAuthor#getKind()::: author get kind:::return
DCTree.DCAuthor#accept(DocTreeVisitor, D)::: author accept:::return->v->visitAuthor
DCTree.DCAuthor#getName()::: author get name:::return
DCTree.DCComment#getKind()::: comment get kind:::return
DCTree.DCComment#accept(DocTreeVisitor, D)::: comment accept:::return->v->visitComment
DCTree.DCComment#getBody()::: comment get body:::return
DCTree.DCDeprecated#getKind()::: deprecated get kind:::return
DCTree.DCDeprecated#accept(DocTreeVisitor, D)::: deprecated accept:::return->v->visitDeprecated
DCTree.DCDeprecated#getBody()::: deprecated get body:::return
DCTree.DCDocRoot#getKind()::: doc root get kind:::return
DCTree.DCDocRoot#accept(DocTreeVisitor, D)::: doc root accept:::return->v->visitDocRoot
DCTree.DCDocType#getKind()::: doc type get kind:::return
DCTree.DCDocType#accept(DocTreeVisitor, D)::: doc type accept:::return->v->visitDocType
DCTree.DCDocType#getText()::: doc type get text:::return
DCTree.DCEndElement#getKind()::: end element get kind:::return
DCTree.DCEndElement#accept(DocTreeVisitor, D)::: end element accept:::return->v->visitEndElement
DCTree.DCEndElement#getName()::: end element get name:::return
DCTree.DCEntity#getKind()::: entity get kind:::return
DCTree.DCEntity#accept(DocTreeVisitor, D)::: entity accept:::return->v->visitEntity
DCTree.DCEntity#getName()::: entity get name:::return
DCTree.DCErroneous#getKind()::: erroneous get kind:::return
DCTree.DCErroneous#accept(DocTreeVisitor, D)::: erroneous accept:::return->v->visitErroneous
DCTree.DCErroneous#getBody()::: erroneous get body:::return
DCTree.DCErroneous#getDiagnostic()::: erroneous get diagnostic:::return
DCTree.DCErroneous#getTree()::: erroneous get tree:::return
DCTree.DCErroneous#getStartPosition()::: erroneous get start position:::return
DCTree.DCErroneous#getPreferredPosition()::: erroneous get preferred position:::return->body->length
DCTree.DCErroneous#getEndPosition(EndPosTable)::: erroneous get end position:::return->body->length
DCTree.DCHidden#getKind()::: hidden get kind:::return
DCTree.DCHidden#accept(DocTreeVisitor, D)::: hidden accept:::return->v->visitHidden
DCTree.DCHidden#getBody()::: hidden get body:::return
DCTree.DCIdentifier#getKind()::: identifier get kind:::return
DCTree.DCIdentifier#accept(DocTreeVisitor, D)::: identifier accept:::return->v->visitIdentifier
DCTree.DCIdentifier#getName()::: identifier get name:::return
DCTree.DCIndex#getKind()::: index get kind:::return
DCTree.DCIndex#accept(DocTreeVisitor, D)::: index accept:::return->v->visitIndex
DCTree.DCIndex#getSearchTerm()::: index get search term:::return
DCTree.DCIndex#getDescription()::: index get description:::return
DCTree.DCInheritDoc#getKind()::: inherit doc get kind:::return
DCTree.DCInheritDoc#accept(DocTreeVisitor, D)::: inherit doc accept:::return->v->visitInheritDoc
DCTree.DCLink#getKind()::: link get kind:::return
DCTree.DCLink#accept(DocTreeVisitor, D)::: link accept:::return->v->visitLink
DCTree.DCLink#getReference()::: link get reference:::return
DCTree.DCLink#getLabel()::: link get label:::return
DCTree.DCLiteral#getKind()::: literal get kind:::return
DCTree.DCLiteral#accept(DocTreeVisitor, D)::: literal accept:::return->v->visitLiteral
DCTree.DCLiteral#getBody()::: literal get body:::return
DCTree.DCParam#getKind()::: param get kind:::return
DCTree.DCParam#accept(DocTreeVisitor, D)::: param accept:::return->v->visitParam
DCTree.DCParam#isTypeParameter()::: param is type parameter:::return
DCTree.DCParam#getName()::: param get name:::return
DCTree.DCParam#getDescription()::: param get description:::return
DCTree.DCProvides#getKind()::: provides get kind:::return
DCTree.DCProvides#accept(DocTreeVisitor, D)::: provides accept:::return->v->visitProvides
DCTree.DCProvides#getServiceType()::: provides get service type:::return
DCTree.DCProvides#getDescription()::: provides get description:::return
DCTree.DCReference#getKind()::: reference get kind:::return
DCTree.DCReference#accept(DocTreeVisitor, D)::: reference accept:::return->v->visitReference
DCTree.DCReference#getSignature()::: reference get signature:::return
DCTree.DCReturn#getKind()::: return get kind:::return
DCTree.DCReturn#accept(DocTreeVisitor, D)::: return accept:::return->v->visitReturn
DCTree.DCReturn#getDescription()::: return get description:::return
DCTree.DCSee#getKind()::: see get kind:::return
DCTree.DCSee#accept(DocTreeVisitor, D)::: see accept:::return->v->visitSee
DCTree.DCSee#getReference()::: see get reference:::return
DCTree.DCSerial#getKind()::: serial get kind:::return
DCTree.DCSerial#accept(DocTreeVisitor, D)::: serial accept:::return->v->visitSerial
DCTree.DCSerial#getDescription()::: serial get description:::return
DCTree.DCSerialData#getKind()::: serial data get kind:::return
DCTree.DCSerialData#accept(DocTreeVisitor, D)::: serial data accept:::return->v->visitSerialData
DCTree.DCSerialData#getDescription()::: serial data get description:::return
DCTree.DCSerialField#getKind()::: serial field get kind:::return
DCTree.DCSerialField#accept(DocTreeVisitor, D)::: serial field accept:::return->v->visitSerialField
DCTree.DCSerialField#getDescription()::: serial field get description:::return
DCTree.DCSerialField#getName()::: serial field get name:::return
DCTree.DCSerialField#getType()::: serial field get type:::return
DCTree.DCSince#getKind()::: since get kind:::return
DCTree.DCSince#accept(DocTreeVisitor, D)::: since accept:::return->v->visitSince
DCTree.DCSince#getBody()::: since get body:::return
DCTree.DCStartElement#getKind()::: start element get kind:::return
DCTree.DCStartElement#accept(DocTreeVisitor, D)::: start element accept:::return->v->visitStartElement
DCTree.DCStartElement#getName()::: start element get name:::return
DCTree.DCStartElement#getAttributes()::: start element get attributes:::return
DCTree.DCStartElement#isSelfClosing()::: start element is self closing:::return
DCTree.DCSummary#getKind()::: summary get kind:::return
DCTree.DCSummary#accept(DocTreeVisitor, D)::: summary accept:::return->v->visitSummary
DCTree.DCSummary#getSummary()::: summary get summary:::return
DCTree.DCText#getKind()::: text get kind:::return
DCTree.DCText#accept(DocTreeVisitor, D)::: text accept:::return->v->visitText
DCTree.DCText#getBody()::: text get body:::return
DCTree.DCThrows#getKind()::: throws get kind:::return
DCTree.DCThrows#accept(DocTreeVisitor, D)::: throws accept:::return->v->visitThrows
DCTree.DCThrows#getExceptionName()::: throws get exception name:::return
DCTree.DCThrows#getDescription()::: throws get description:::return
DCTree.DCUnknownBlockTag#getKind()::: unknown block tag get kind:::return
DCTree.DCUnknownBlockTag#accept(DocTreeVisitor, D)::: unknown block tag accept:::return->v->visitUnknownBlockTag
DCTree.DCUnknownBlockTag#getTagName()::: unknown block tag get tag name:::return->name->toString
DCTree.DCUnknownBlockTag#getContent()::: unknown block tag get content:::return
DCTree.DCUnknownInlineTag#getKind()::: unknown inline tag get kind:::return
DCTree.DCUnknownInlineTag#accept(DocTreeVisitor, D)::: unknown inline tag accept:::return->v->visitUnknownInlineTag
DCTree.DCUnknownInlineTag#getTagName()::: unknown inline tag get tag name:::return->name->toString
DCTree.DCUnknownInlineTag#getContent()::: unknown inline tag get content:::return
DCTree.DCUses#getKind()::: uses get kind:::return
DCTree.DCUses#accept(DocTreeVisitor, D)::: uses accept:::return->v->visitUses
DCTree.DCUses#getServiceType()::: uses get service type:::return
DCTree.DCUses#getDescription()::: uses get description:::return
DCTree.DCValue#getKind()::: value get kind:::return
DCTree.DCValue#accept(DocTreeVisitor, D)::: value accept:::return->v->visitValue
DCTree.DCValue#getReference()::: value get reference:::return
DCTree.DCVersion#getKind()::: version get kind:::return
DCTree.DCVersion#accept(DocTreeVisitor, D)::: version accept:::return->v->visitVersion
DCTree.DCVersion#getBody()::: version get body:::return
DocCommentTable#hasComment(JCTree):::Check if a tree node has a corresponding doc comment.:::
DocCommentTable#getComment(JCTree):::Get the Comment token containing the doc comment, if any, for a tree node.:::
DocCommentTable#getCommentText(JCTree):::Get the plain text of the doc comment, if any, for a tree node.:::
DocCommentTable#getCommentTree(JCTree):::Get the parsed form of the doc comment as a DocTree:::
DocCommentTable#putComment(JCTree, Comment):::Set the Comment to be associated with a tree node.:::
DocPretty#print(DocTree):::Visitor method: print expression tree.:::try->if->print->else->tree->accept->catch->throw->ex->getMessage->new->IOException->finally
DocPretty#print(Object):::Print string, replacing all non-ascii character with unicode escapes.:::out->Convert->s->toString->escapeUnicode->write
DocPretty#print(List):::Print list.:::foreach->print
DocPretty#print(List, String):::Print list., with separators:::if->list->isEmpty->return->first->foreach->if->print->print
DocPretty#println():::Print new line.:::out->write
DocPretty#printTagName(DocTree)::: doc pretty print tag name:::out->write->out->node->getKind->write
DocPretty#visitAttribute(AttributeTree, Void)::: doc pretty visit attribute:::try->node->getName->print->quote->switch->node->getValueKind->break->break->break->break->throw->new->AssertionError->if->print->node->getValue->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitAuthor(AuthorTree, Void)::: doc pretty visit author:::try->printTagName->print->node->getName->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitComment(CommentTree, Void)::: doc pretty visit comment:::try->node->getBody->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitDeprecated(DeprecatedTree, Void)::: doc pretty visit deprecated:::try->printTagName->if->node->getBody->isEmpty->print->node->getBody->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitDocComment(DocCommentTree, Void)::: doc pretty visit doc comment:::try->b->node->getFullBody->t->node->getBlockTags->print->if->b->isEmpty->t->isEmpty->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitDocRoot(DocRootTree, Void)::: doc pretty visit doc root:::try->print->printTagName->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitDocType(DocTypeTree, Void)::: doc pretty visit doc type:::try->node->getText->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitEndElement(EndElementTree, Void)::: doc pretty visit end element:::try->print->node->getName->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitEntity(EntityTree, Void)::: doc pretty visit entity:::try->print->node->getName->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitErroneous(ErroneousTree, Void)::: doc pretty visit erroneous:::try->node->getBody->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitHidden(HiddenTree, Void)::: doc pretty visit hidden:::try->printTagName->if->node->getBody->isEmpty->print->node->getBody->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitIdentifier(IdentifierTree, Void)::: doc pretty visit identifier:::try->node->getName->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitIndex(IndexTree, Void)::: doc pretty visit index:::try->print->printTagName->print->node->getSearchTerm->print->if->node->getDescription->isEmpty->print->node->getDescription->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitInheritDoc(InheritDocTree, Void)::: doc pretty visit inherit doc:::try->print->printTagName->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitLink(LinkTree, Void)::: doc pretty visit link:::try->print->printTagName->print->node->getReference->print->if->node->getLabel->isEmpty->print->node->getLabel->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitLiteral(LiteralTree, Void)::: doc pretty visit literal:::try->print->printTagName->body->node->getBody->getBody->if->body->isEmpty->Character->body->charAt->isWhitespace->print->node->getBody->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitParam(ParamTree, Void)::: doc pretty visit param:::try->printTagName->print->if->node->isTypeParameter->print->node->getName->print->if->node->isTypeParameter->print->if->node->getDescription->isEmpty->print->node->getDescription->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitProvides(ProvidesTree, Void)::: doc pretty visit provides:::try->printTagName->print->node->getServiceType->print->if->node->getDescription->isEmpty->print->node->getDescription->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitReference(ReferenceTree, Void)::: doc pretty visit reference:::try->node->getSignature->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitReturn(ReturnTree, Void)::: doc pretty visit return:::try->printTagName->print->node->getDescription->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitSee(SeeTree, Void)::: doc pretty visit see:::try->printTagName->first->needSep->foreach->node->getReference->if->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitSerial(SerialTree, Void)::: doc pretty visit serial:::try->printTagName->if->node->getDescription->isEmpty->print->node->getDescription->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitSerialData(SerialDataTree, Void)::: doc pretty visit serial data:::try->printTagName->if->node->getDescription->isEmpty->print->node->getDescription->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitSerialField(SerialFieldTree, Void)::: doc pretty visit serial field:::try->printTagName->print->node->getName->print->print->node->getType->print->if->node->getDescription->isEmpty->print->node->getDescription->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitSince(SinceTree, Void)::: doc pretty visit since:::try->printTagName->print->node->getBody->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitStartElement(StartElementTree, Void)::: doc pretty visit start element:::try->print->node->getName->print->attrs->node->getAttributes->if->attrs->isEmpty->print->print->last->node->getAttributes->attrs->size->get->if->node->isSelfClosing->getValueKind->print->if->node->isSelfClosing->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitSummary(SummaryTree, Void)::: doc pretty visit summary:::try->print->printTagName->if->node->getSummary->isEmpty->print->node->getSummary->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitText(TextTree, Void)::: doc pretty visit text:::try->node->getBody->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitThrows(ThrowsTree, Void)::: doc pretty visit throws:::try->printTagName->print->node->getExceptionName->print->if->node->getDescription->isEmpty->print->node->getDescription->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitUnknownBlockTag(UnknownBlockTagTree, Void)::: doc pretty visit unknown block tag:::try->print->node->getTagName->print->print->node->getContent->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitUnknownInlineTag(UnknownInlineTagTree, Void)::: doc pretty visit unknown inline tag:::try->print->print->node->getTagName->print->print->node->getContent->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitUses(UsesTree, Void)::: doc pretty visit uses:::try->printTagName->print->node->getServiceType->print->if->node->getDescription->isEmpty->print->node->getDescription->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitValue(ValueTree, Void)::: doc pretty visit value:::try->print->printTagName->if->node->getReference->print->node->getReference->print->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitVersion(VersionTree, Void)::: doc pretty visit version:::try->printTagName->print->node->getBody->print->catch->throw->new->UncheckedIOException->finally->return
DocPretty#visitOther(DocTree, Void)::: doc pretty visit other:::try->print->println->catch->throw->new->UncheckedIOException->finally->return
DocTreeMaker#instance(Context):::Get the TreeMaker instance.:::instance->context->get->if->new->DocTreeMaker->return
DocTreeMaker#at(int):::Reassign current position.:::return
DocTreeMaker#at(DiagnosticPosition):::Reassign current position.:::pos->getStartPosition->return
DocTreeMaker#newAttributeTree(javax.lang.model.element.Name, ValueKind, java.util.List)::: doc tree maker new attribute tree:::tree->cast->new->DCAttribute->return
DocTreeMaker#newAuthorTree(java.util.List)::: doc tree maker new author tree:::tree->cast->new->DCAuthor->return
DocTreeMaker#newCodeTree(TextTree)::: doc tree maker new code tree:::tree->new->DCLiteral->return
DocTreeMaker#newCommentTree(String)::: doc tree maker new comment tree:::tree->new->DCComment->return
DocTreeMaker#newDeprecatedTree(List)::: doc tree maker new deprecated tree:::tree->cast->new->DCDeprecated->return
DocTreeMaker#newDocCommentTree(List, List)::: doc tree maker new doc comment tree:::pair->splitBody->preamble->Collections->emptyList->postamble->Collections->emptyList->return->newDocCommentTree
DocTreeMaker#newDocCommentTree(Comment, List, List, List, List)::: doc tree maker new doc comment tree:::pair->splitBody->tree->cast->cast->cast->cast->new->DCDocComment->return
DocTreeMaker#newDocCommentTree(List, List, List, List)::: doc tree maker new doc comment tree:::lb->new->ListBuffer<>->lb->cast->addAll->fBody->lb->toList->c->new->Comment->pair->splitBody->tree->cast->cast->cast->new->DCDocComment->return
DocTreeMaker#newDocRootTree()::: doc tree maker new doc root tree:::tree->new->DCDocRoot->return
DocTreeMaker#newDocTypeTree(String)::: doc tree maker new doc type tree:::tree->new->DCDocType->return
DocTreeMaker#newEndElementTree(Name)::: doc tree maker new end element tree:::tree->new->DCEndElement->return
DocTreeMaker#newEntityTree(Name)::: doc tree maker new entity tree:::tree->new->DCEntity->return
DocTreeMaker#newErroneousTree(String, Diagnostic)::: doc tree maker new erroneous tree:::tree->new->DCErroneous->return
DocTreeMaker#newErroneousTree(String, DiagnosticSource, String, Object...)::: doc tree maker new erroneous tree:::tree->new->DCErroneous->return
DocTreeMaker#newExceptionTree(ReferenceTree, List)::: doc tree maker new exception tree:::tree->cast->new->DCThrows->return
DocTreeMaker#newHiddenTree(List)::: doc tree maker new hidden tree:::tree->cast->new->DCHidden->return
DocTreeMaker#newIdentifierTree(Name)::: doc tree maker new identifier tree:::tree->new->DCIdentifier->return
DocTreeMaker#newIndexTree(DocTree, List)::: doc tree maker new index tree:::tree->cast->new->DCIndex->return
DocTreeMaker#newInheritDocTree()::: doc tree maker new inherit doc tree:::tree->new->DCInheritDoc->return
DocTreeMaker#newLinkTree(ReferenceTree, List)::: doc tree maker new link tree:::tree->cast->new->DCLink->return
DocTreeMaker#newLinkPlainTree(ReferenceTree, List)::: doc tree maker new link plain tree:::tree->cast->new->DCLink->return
DocTreeMaker#newLiteralTree(TextTree)::: doc tree maker new literal tree:::tree->new->DCLiteral->return
DocTreeMaker#newParamTree(boolean, IdentifierTree, List)::: doc tree maker new param tree:::tree->cast->new->DCParam->return
DocTreeMaker#newProvidesTree(ReferenceTree, List)::: doc tree maker new provides tree:::tree->cast->new->DCProvides->return
DocTreeMaker#newReferenceTree(String)::: doc tree maker new reference tree:::try->ref->referenceParser->parse->tree->new->DCReference->return->catch->throw->new->IllegalArgumentException->finally
DocTreeMaker#newReferenceTree(String, JCTree, Name, List)::: doc tree maker new reference tree:::tree->new->DCReference->return
DocTreeMaker#newReturnTree(List)::: doc tree maker new return tree:::tree->cast->new->DCReturn->return
DocTreeMaker#newSeeTree(List)::: doc tree maker new see tree:::tree->cast->new->DCSee->return
DocTreeMaker#newSerialTree(List)::: doc tree maker new serial tree:::tree->cast->new->DCSerial->return
DocTreeMaker#newSerialDataTree(List)::: doc tree maker new serial data tree:::tree->cast->new->DCSerialData->return
DocTreeMaker#newSerialFieldTree(IdentifierTree, ReferenceTree, List)::: doc tree maker new serial field tree:::tree->cast->new->DCSerialField->return
DocTreeMaker#newSinceTree(List)::: doc tree maker new since tree:::tree->cast->new->DCSince->return
DocTreeMaker#newStartElementTree(Name, List, boolean)::: doc tree maker new start element tree:::tree->cast->new->DCStartElement->return
DocTreeMaker#newSummaryTree(List)::: doc tree maker new summary tree:::tree->cast->new->DCSummary->return
DocTreeMaker#newTextTree(String)::: doc tree maker new text tree:::tree->new->DCText->return
DocTreeMaker#newThrowsTree(ReferenceTree, List)::: doc tree maker new throws tree:::tree->cast->new->DCThrows->return
DocTreeMaker#newUnknownBlockTagTree(Name, List)::: doc tree maker new unknown block tag tree:::tree->cast->new->DCUnknownBlockTag->return
DocTreeMaker#newUnknownInlineTagTree(Name, List)::: doc tree maker new unknown inline tag tree:::tree->cast->new->DCUnknownInlineTag->return
DocTreeMaker#newUsesTree(ReferenceTree, List)::: doc tree maker new uses tree:::tree->cast->new->DCUses->return
DocTreeMaker#newValueTree(ReferenceTree)::: doc tree maker new value tree:::tree->new->DCValue->return
DocTreeMaker#newVersionTree(List)::: doc tree maker new version tree:::tree->cast->new->DCVersion->return
DocTreeMaker#getFirstSentence(java.util.List)::: doc tree maker get first sentence:::pair->splitBody->return->new->ArrayList<>
DocTreeMaker#splitBody(Collection)::: doc tree maker split body:::savedpos->try->body->new->ListBuffer<>->fs->new->ListBuffer<>->if->list->isEmpty->return->fs->toList->body->toList->new->Pair<>->foundFirstSentence->alist->new->ArrayList<>->itr->alist->listIterator->while->itr->hasNext->isFirst->itr->hasPrevious->dt->itr->next->spos->if->body->add->continue->switch->dt->getKind->break->tt->s->tt->getBody->peekedNext->itr->hasNext->alist->itr->nextIndex->get->sbreak->getSentenceBreak->if->s->substring->removeTrailingWhitespace->text->this->at->newTextTree->fs->add->nwPos->tt->getBody->skipWhiteSpace->if->text2->this->at->tt->getBody->substring->newTextTree->body->add->continue->else->if->itr->hasNext->alist->itr->nextIndex->get->sbrk->isSentenceBreak->if->next->itr->next->removeTrailingWhitespace->text->this->at->newTextTree->fs->add->body->add->continue->break->if->isSentenceBreak->body->add->continue->break->fs->add->return->fs->toList->body->toList->new->Pair<>->catch->finally
DocTreeMaker#isTextTree(DocTree)::: doc tree maker is text tree:::return->tree->getKind
DocTreeMaker#defaultSentenceBreak(String)::: doc tree maker default sentence break:::period->for->i->s->length->return
DocTreeMaker#getSentenceBreak(String, DocTree)::: doc tree maker get sentence break:::breakIterator->trees->getBreakIterator->if->return->defaultSentenceBreak->breakIterator->setText->sbrk->breakIterator->next->if->return->if->s->length->return->if->isTextTree->ttnext->combined->ttnext->getBody->breakIterator->setText->sbrk2->breakIterator->next->if->return->if->isSentenceBreak->return->combined->breakIterator->setText->sbrk2->breakIterator->next->if->return->return
DocTreeMaker#isSentenceBreak(javax.lang.model.element.Name)::: doc tree maker is sentence break:::return->sentenceBreakTags->get->contains
DocTreeMaker#isSentenceBreak(DocTree, boolean)::: doc tree maker is sentence break:::switch->dt->getKind->set->return->set->getName->isSentenceBreak->eet->return->eet->getName->isSentenceBreak->return
DocTreeMaker#skipWhiteSpace(String, int)::: doc tree maker skip white space:::for->i->s->length->return
DocTreeMaker#removeTrailingWhitespace(String)::: doc tree maker remove trailing whitespace:::for->i->s->length->return
DocTreeMaker#cast(List)::: doc tree maker cast:::return
EndPosTable#getEndPos(JCTree):::This method will return the end position of a given tree, otherwise a Positions.NOPOS will be returned.:::
EndPosTable#storeEnd(JCTree, int):::Store ending position for a tree, the value of which is the greater of last error position and the given ending position.:::
EndPosTable#replaceTree(JCTree, JCTree):::Give an old tree and a new tree, the old tree will be replaced with the new tree, the position of the new tree will be that of the old tree.:::
JCTree#getTag()::: tree get tag:::
JCTree#hasTag(Tag)::: tree has tag:::return->getTag
JCTree#toString():::Convert a tree to a pretty-printed string.:::s->new->StringWriter->try->new->Pretty->printExpr->catch->throw->new->AssertionError->finally->return->s->toString
JCTree#setPos(int):::Set position field and return this tree.:::return
JCTree#setType(Type):::Set type field and return this tree.:::return
JCTree#accept(Visitor):::Visit this tree with a given visitor.:::
JCTree#accept(TreeVisitor, D)::: tree accept:::
JCTree#clone():::Return a shallow copy of this tree.:::try->return->super->clone->catch->throw->new->RuntimeException->finally
JCTree#pos():::Get a default position for this tree node.:::return
JCTree#getTree()::: tree get tree:::return
JCTree#getStartPosition()::: tree get start position:::return->TreeInfo->getStartPos
JCTree#getPreferredPosition()::: tree get preferred position:::return
JCTree#getEndPosition(EndPosTable)::: tree get end position:::return->TreeInfo->getEndPos
JCTree.JCCompilationUnit#accept(Visitor)::: compilation unit accept:::v->visitTopLevel
JCTree.JCCompilationUnit#getKind()::: compilation unit get kind:::return
JCTree.JCCompilationUnit#getModuleDecl()::: compilation unit get module decl:::foreach->if->tree->hasTag->return->return
JCTree.JCCompilationUnit#getPackage()::: compilation unit get package:::if->defs->isEmpty->hasTag->return->return
JCTree.JCCompilationUnit#getPackageAnnotations()::: compilation unit get package annotations:::pd->getPackage->return->pd->getAnnotations->List->nil
JCTree.JCCompilationUnit#getPackageName()::: compilation unit get package name:::pd->getPackage->return->pd->getPackageName
JCTree.JCCompilationUnit#getImports()::: compilation unit get imports:::imports->new->ListBuffer<>->foreach->if->tree->hasTag->imports->append->else->if->tree->hasTag->tree->hasTag->break->return->imports->toList
JCTree.JCCompilationUnit#getSourceFile()::: compilation unit get source file:::return
JCTree.JCCompilationUnit#getLineMap()::: compilation unit get line map:::return
JCTree.JCCompilationUnit#getTypeDecls()::: compilation unit get type decls:::typeDefs->for->typeDefs->isEmpty->return
JCTree.JCCompilationUnit#accept(TreeVisitor, D)::: compilation unit accept:::return->v->visitCompilationUnit
JCTree.JCCompilationUnit#getTag()::: compilation unit get tag:::return
JCTree.JCPackageDecl#accept(Visitor)::: package decl accept:::v->visitPackageDef
JCTree.JCPackageDecl#getKind()::: package decl get kind:::return
JCTree.JCPackageDecl#getAnnotations()::: package decl get annotations:::return
JCTree.JCPackageDecl#getPackageName()::: package decl get package name:::return
JCTree.JCPackageDecl#accept(TreeVisitor, D)::: package decl accept:::return->v->visitPackage
JCTree.JCPackageDecl#getTag()::: package decl get tag:::return
JCTree.JCImport#accept(Visitor)::: import accept:::v->visitImport
JCTree.JCImport#isStatic()::: import is static:::return
JCTree.JCImport#getQualifiedIdentifier()::: import get qualified identifier:::return
JCTree.JCImport#getKind()::: import get kind:::return
JCTree.JCImport#accept(TreeVisitor, D)::: import accept:::return->v->visitImport
JCTree.JCImport#getTag()::: import get tag:::return
JCTree.JCStatement#setType(Type)::: statement set type:::super->setType->return
JCTree.JCStatement#setPos(int)::: statement set pos:::super->setPos->return
JCTree.JCExpression#setType(Type)::: expression set type:::super->setType->return
JCTree.JCExpression#setPos(int)::: expression set pos:::super->setPos->return
JCTree.JCExpression#isPoly()::: expression is poly:::return
JCTree.JCExpression#isStandalone()::: expression is standalone:::return
JCTree.JCPolyExpression#isPoly()::: poly expression is poly:::return
JCTree.JCPolyExpression#isStandalone()::: poly expression is standalone:::return
JCTree.JCFunctionalExpression#getDescriptorType(Types)::: functional expression get descriptor type:::return->types->findDescriptorType->types->createErrorType
JCTree.JCClassDecl#accept(Visitor)::: class decl accept:::v->visitClassDef
JCTree.JCClassDecl#getKind()::: class decl get kind:::if->return->else->if->return->else->if->return->else->return
JCTree.JCClassDecl#getModifiers()::: class decl get modifiers:::return
JCTree.JCClassDecl#getSimpleName()::: class decl get simple name:::return
JCTree.JCClassDecl#getTypeParameters()::: class decl get type parameters:::return
JCTree.JCClassDecl#getExtendsClause()::: class decl get extends clause:::return
JCTree.JCClassDecl#getImplementsClause()::: class decl get implements clause:::return
JCTree.JCClassDecl#getMembers()::: class decl get members:::return
JCTree.JCClassDecl#accept(TreeVisitor, D)::: class decl accept:::return->v->visitClass
JCTree.JCClassDecl#getTag()::: class decl get tag:::return
JCTree.JCMethodDecl#accept(Visitor)::: method decl accept:::v->visitMethodDef
JCTree.JCMethodDecl#getKind()::: method decl get kind:::return
JCTree.JCMethodDecl#getModifiers()::: method decl get modifiers:::return
JCTree.JCMethodDecl#getName()::: method decl get name:::return
JCTree.JCMethodDecl#getReturnType()::: method decl get return type:::return
JCTree.JCMethodDecl#getTypeParameters()::: method decl get type parameters:::return
JCTree.JCMethodDecl#getParameters()::: method decl get parameters:::return
JCTree.JCMethodDecl#getReceiverParameter()::: method decl get receiver parameter:::return
JCTree.JCMethodDecl#getThrows()::: method decl get throws:::return
JCTree.JCMethodDecl#getBody()::: method decl get body:::return
JCTree.JCMethodDecl#getDefaultValue()::: method decl get default value:::return
JCTree.JCMethodDecl#accept(TreeVisitor, D)::: method decl accept:::return->v->visitMethod
JCTree.JCMethodDecl#getTag()::: method decl get tag:::return
JCTree.JCVariableDecl#isImplicitlyTyped()::: variable decl is implicitly typed:::return
JCTree.JCVariableDecl#accept(Visitor)::: variable decl accept:::v->visitVarDef
JCTree.JCVariableDecl#getKind()::: variable decl get kind:::return
JCTree.JCVariableDecl#getModifiers()::: variable decl get modifiers:::return
JCTree.JCVariableDecl#getName()::: variable decl get name:::return
JCTree.JCVariableDecl#getNameExpression()::: variable decl get name expression:::return
JCTree.JCVariableDecl#getType()::: variable decl get type:::return
JCTree.JCVariableDecl#getInitializer()::: variable decl get initializer:::return
JCTree.JCVariableDecl#accept(TreeVisitor, D)::: variable decl accept:::return->v->visitVariable
JCTree.JCVariableDecl#getTag()::: variable decl get tag:::return
JCTree.JCSkip#accept(Visitor)::: skip accept:::v->visitSkip
JCTree.JCSkip#getKind()::: skip get kind:::return
JCTree.JCSkip#accept(TreeVisitor, D)::: skip accept:::return->v->visitEmptyStatement
JCTree.JCSkip#getTag()::: skip get tag:::return
JCTree.JCBlock#accept(Visitor)::: block accept:::v->visitBlock
JCTree.JCBlock#getKind()::: block get kind:::return
JCTree.JCBlock#getStatements()::: block get statements:::return
JCTree.JCBlock#isStatic()::: block is static:::return
JCTree.JCBlock#accept(TreeVisitor, D)::: block accept:::return->v->visitBlock
JCTree.JCBlock#getTag()::: block get tag:::return
JCTree.JCDoWhileLoop#accept(Visitor)::: do while loop accept:::v->visitDoLoop
JCTree.JCDoWhileLoop#getKind()::: do while loop get kind:::return
JCTree.JCDoWhileLoop#getCondition()::: do while loop get condition:::return
JCTree.JCDoWhileLoop#getStatement()::: do while loop get statement:::return
JCTree.JCDoWhileLoop#accept(TreeVisitor, D)::: do while loop accept:::return->v->visitDoWhileLoop
JCTree.JCDoWhileLoop#getTag()::: do while loop get tag:::return
JCTree.JCWhileLoop#accept(Visitor)::: while loop accept:::v->visitWhileLoop
JCTree.JCWhileLoop#getKind()::: while loop get kind:::return
JCTree.JCWhileLoop#getCondition()::: while loop get condition:::return
JCTree.JCWhileLoop#getStatement()::: while loop get statement:::return
JCTree.JCWhileLoop#accept(TreeVisitor, D)::: while loop accept:::return->v->visitWhileLoop
JCTree.JCWhileLoop#getTag()::: while loop get tag:::return
JCTree.JCForLoop#accept(Visitor)::: for loop accept:::v->visitForLoop
JCTree.JCForLoop#getKind()::: for loop get kind:::return
JCTree.JCForLoop#getCondition()::: for loop get condition:::return
JCTree.JCForLoop#getStatement()::: for loop get statement:::return
JCTree.JCForLoop#getInitializer()::: for loop get initializer:::return
JCTree.JCForLoop#getUpdate()::: for loop get update:::return
JCTree.JCForLoop#accept(TreeVisitor, D)::: for loop accept:::return->v->visitForLoop
JCTree.JCForLoop#getTag()::: for loop get tag:::return
JCTree.JCEnhancedForLoop#accept(Visitor)::: enhanced for loop accept:::v->visitForeachLoop
JCTree.JCEnhancedForLoop#getKind()::: enhanced for loop get kind:::return
JCTree.JCEnhancedForLoop#getVariable()::: enhanced for loop get variable:::return
JCTree.JCEnhancedForLoop#getExpression()::: enhanced for loop get expression:::return
JCTree.JCEnhancedForLoop#getStatement()::: enhanced for loop get statement:::return
JCTree.JCEnhancedForLoop#accept(TreeVisitor, D)::: enhanced for loop accept:::return->v->visitEnhancedForLoop
JCTree.JCEnhancedForLoop#getTag()::: enhanced for loop get tag:::return
JCTree.JCLabeledStatement#accept(Visitor)::: labeled statement accept:::v->visitLabelled
JCTree.JCLabeledStatement#getKind()::: labeled statement get kind:::return
JCTree.JCLabeledStatement#getLabel()::: labeled statement get label:::return
JCTree.JCLabeledStatement#getStatement()::: labeled statement get statement:::return
JCTree.JCLabeledStatement#accept(TreeVisitor, D)::: labeled statement accept:::return->v->visitLabeledStatement
JCTree.JCLabeledStatement#getTag()::: labeled statement get tag:::return
JCTree.JCSwitch#accept(Visitor)::: switch accept:::v->visitSwitch
JCTree.JCSwitch#getKind()::: switch get kind:::return
JCTree.JCSwitch#getExpression()::: switch get expression:::return
JCTree.JCSwitch#getCases()::: switch get cases:::return
JCTree.JCSwitch#accept(TreeVisitor, D)::: switch accept:::return->v->visitSwitch
JCTree.JCSwitch#getTag()::: switch get tag:::return
JCTree.JCCase#accept(Visitor)::: case accept:::v->visitCase
JCTree.JCCase#getKind()::: case get kind:::return
JCTree.JCCase#getExpression()::: case get expression:::return
JCTree.JCCase#getStatements()::: case get statements:::return
JCTree.JCCase#accept(TreeVisitor, D)::: case accept:::return->v->visitCase
JCTree.JCCase#getTag()::: case get tag:::return
JCTree.JCSynchronized#accept(Visitor)::: synchronized accept:::v->visitSynchronized
JCTree.JCSynchronized#getKind()::: synchronized get kind:::return
JCTree.JCSynchronized#getExpression()::: synchronized get expression:::return
JCTree.JCSynchronized#getBlock()::: synchronized get block:::return
JCTree.JCSynchronized#accept(TreeVisitor, D)::: synchronized accept:::return->v->visitSynchronized
JCTree.JCSynchronized#getTag()::: synchronized get tag:::return
JCTree.JCTry#accept(Visitor)::: try accept:::v->visitTry
JCTree.JCTry#getKind()::: try get kind:::return
JCTree.JCTry#getBlock()::: try get block:::return
JCTree.JCTry#getCatches()::: try get catches:::return
JCTree.JCTry#getFinallyBlock()::: try get finally block:::return
JCTree.JCTry#accept(TreeVisitor, D)::: try accept:::return->v->visitTry
JCTree.JCTry#getResources()::: try get resources:::return
JCTree.JCTry#getTag()::: try get tag:::return
JCTree.JCCatch#accept(Visitor)::: catch accept:::v->visitCatch
JCTree.JCCatch#getKind()::: catch get kind:::return
JCTree.JCCatch#getParameter()::: catch get parameter:::return
JCTree.JCCatch#getBlock()::: catch get block:::return
JCTree.JCCatch#accept(TreeVisitor, D)::: catch accept:::return->v->visitCatch
JCTree.JCCatch#getTag()::: catch get tag:::return
JCTree.JCConditional#accept(Visitor)::: conditional accept:::v->visitConditional
JCTree.JCConditional#getKind()::: conditional get kind:::return
JCTree.JCConditional#getCondition()::: conditional get condition:::return
JCTree.JCConditional#getTrueExpression()::: conditional get true expression:::return
JCTree.JCConditional#getFalseExpression()::: conditional get false expression:::return
JCTree.JCConditional#accept(TreeVisitor, D)::: conditional accept:::return->v->visitConditionalExpression
JCTree.JCConditional#getTag()::: conditional get tag:::return
JCTree.JCIf#accept(Visitor)::: if accept:::v->visitIf
JCTree.JCIf#getKind()::: if get kind:::return
JCTree.JCIf#getCondition()::: if get condition:::return
JCTree.JCIf#getThenStatement()::: if get then statement:::return
JCTree.JCIf#getElseStatement()::: if get else statement:::return
JCTree.JCIf#accept(TreeVisitor, D)::: if accept:::return->v->visitIf
JCTree.JCIf#getTag()::: if get tag:::return
JCTree.JCExpressionStatement#accept(Visitor)::: expression statement accept:::v->visitExec
JCTree.JCExpressionStatement#getKind()::: expression statement get kind:::return
JCTree.JCExpressionStatement#getExpression()::: expression statement get expression:::return
JCTree.JCExpressionStatement#accept(TreeVisitor, D)::: expression statement accept:::return->v->visitExpressionStatement
JCTree.JCExpressionStatement#getTag()::: expression statement get tag:::return
JCTree.JCExpressionStatement#toString():::Convert a expression-statement tree to a pretty-printed string.:::s->new->StringWriter->try->new->Pretty->printStat->catch->throw->new->AssertionError->finally->return->s->toString
JCTree.JCBreak#accept(Visitor)::: break accept:::v->visitBreak
JCTree.JCBreak#getKind()::: break get kind:::return
JCTree.JCBreak#getLabel()::: break get label:::return
JCTree.JCBreak#accept(TreeVisitor, D)::: break accept:::return->v->visitBreak
JCTree.JCBreak#getTag()::: break get tag:::return
JCTree.JCContinue#accept(Visitor)::: continue accept:::v->visitContinue
JCTree.JCContinue#getKind()::: continue get kind:::return
JCTree.JCContinue#getLabel()::: continue get label:::return
JCTree.JCContinue#accept(TreeVisitor, D)::: continue accept:::return->v->visitContinue
JCTree.JCContinue#getTag()::: continue get tag:::return
JCTree.JCReturn#accept(Visitor)::: return accept:::v->visitReturn
JCTree.JCReturn#getKind()::: return get kind:::return
JCTree.JCReturn#getExpression()::: return get expression:::return
JCTree.JCReturn#accept(TreeVisitor, D)::: return accept:::return->v->visitReturn
JCTree.JCReturn#getTag()::: return get tag:::return
JCTree.JCThrow#accept(Visitor)::: throw accept:::v->visitThrow
JCTree.JCThrow#getKind()::: throw get kind:::return
JCTree.JCThrow#getExpression()::: throw get expression:::return
JCTree.JCThrow#accept(TreeVisitor, D)::: throw accept:::return->v->visitThrow
JCTree.JCThrow#getTag()::: throw get tag:::return
JCTree.JCAssert#accept(Visitor)::: assert accept:::v->visitAssert
JCTree.JCAssert#getKind()::: assert get kind:::return
JCTree.JCAssert#getCondition()::: assert get condition:::return
JCTree.JCAssert#getDetail()::: assert get detail:::return
JCTree.JCAssert#accept(TreeVisitor, D)::: assert accept:::return->v->visitAssert
JCTree.JCAssert#getTag()::: assert get tag:::return
JCTree.JCMethodInvocation#accept(Visitor)::: method invocation accept:::v->visitApply
JCTree.JCMethodInvocation#getKind()::: method invocation get kind:::return
JCTree.JCMethodInvocation#getTypeArguments()::: method invocation get type arguments:::return
JCTree.JCMethodInvocation#getMethodSelect()::: method invocation get method select:::return
JCTree.JCMethodInvocation#getArguments()::: method invocation get arguments:::return
JCTree.JCMethodInvocation#accept(TreeVisitor, D)::: method invocation accept:::return->v->visitMethodInvocation
JCTree.JCMethodInvocation#setType(Type)::: method invocation set type:::super->setType->return
JCTree.JCMethodInvocation#getTag()::: method invocation get tag:::return
JCTree.JCNewClass#accept(Visitor)::: new class accept:::v->visitNewClass
JCTree.JCNewClass#getKind()::: new class get kind:::return
JCTree.JCNewClass#getEnclosingExpression()::: new class get enclosing expression:::return
JCTree.JCNewClass#getTypeArguments()::: new class get type arguments:::return
JCTree.JCNewClass#getIdentifier()::: new class get identifier:::return
JCTree.JCNewClass#getArguments()::: new class get arguments:::return
JCTree.JCNewClass#getClassBody()::: new class get class body:::return
JCTree.JCNewClass#accept(TreeVisitor, D)::: new class accept:::return->v->visitNewClass
JCTree.JCNewClass#getTag()::: new class get tag:::return
JCTree.JCNewArray#accept(Visitor)::: new array accept:::v->visitNewArray
JCTree.JCNewArray#getKind()::: new array get kind:::return
JCTree.JCNewArray#getType()::: new array get type:::return
JCTree.JCNewArray#getDimensions()::: new array get dimensions:::return
JCTree.JCNewArray#getInitializers()::: new array get initializers:::return
JCTree.JCNewArray#accept(TreeVisitor, D)::: new array accept:::return->v->visitNewArray
JCTree.JCNewArray#getTag()::: new array get tag:::return
JCTree.JCNewArray#getAnnotations()::: new array get annotations:::return
JCTree.JCNewArray#getDimAnnotations()::: new array get dim annotations:::return
JCTree.JCLambda#getTag()::: lambda get tag:::return
JCTree.JCLambda#accept(Visitor)::: lambda accept:::v->visitLambda
JCTree.JCLambda#accept(TreeVisitor, D)::: lambda accept:::return->v->visitLambdaExpression
JCTree.JCLambda#getKind()::: lambda get kind:::return
JCTree.JCLambda#getBody()::: lambda get body:::return
JCTree.JCLambda#getParameters()::: lambda get parameters:::return
JCTree.JCLambda#setType(Type)::: lambda set type:::super->setType->return
JCTree.JCLambda#getBodyKind()::: lambda get body kind:::return->body->hasTag
JCTree.JCParens#accept(Visitor)::: parens accept:::v->visitParens
JCTree.JCParens#getKind()::: parens get kind:::return
JCTree.JCParens#getExpression()::: parens get expression:::return
JCTree.JCParens#accept(TreeVisitor, D)::: parens accept:::return->v->visitParenthesized
JCTree.JCParens#getTag()::: parens get tag:::return
JCTree.JCAssign#accept(Visitor)::: assign accept:::v->visitAssign
JCTree.JCAssign#getKind()::: assign get kind:::return
JCTree.JCAssign#getVariable()::: assign get variable:::return
JCTree.JCAssign#getExpression()::: assign get expression:::return
JCTree.JCAssign#accept(TreeVisitor, D)::: assign accept:::return->v->visitAssignment
JCTree.JCAssign#getTag()::: assign get tag:::return
JCTree.JCOperatorExpression#getOperator()::: operator expression get operator:::return
JCTree.JCOperatorExpression#getTag()::: operator expression get tag:::return
JCTree.JCOperatorExpression#getOperand(OperandPos)::: operator expression get operand:::
JCTree.JCAssignOp#accept(Visitor)::: assign op accept:::v->visitAssignop
JCTree.JCAssignOp#getKind()::: assign op get kind:::return->TreeInfo->getTag->tagToKind
JCTree.JCAssignOp#getVariable()::: assign op get variable:::return
JCTree.JCAssignOp#getExpression()::: assign op get expression:::return
JCTree.JCAssignOp#accept(TreeVisitor, D)::: assign op accept:::return->v->visitCompoundAssignment
JCTree.JCAssignOp#getOperand(OperandPos)::: assign op get operand:::return
JCTree.JCUnary#accept(Visitor)::: unary accept:::v->visitUnary
JCTree.JCUnary#getKind()::: unary get kind:::return->TreeInfo->getTag->tagToKind
JCTree.JCUnary#getExpression()::: unary get expression:::return
JCTree.JCUnary#accept(TreeVisitor, D)::: unary accept:::return->v->visitUnary
JCTree.JCUnary#setTag(Tag)::: unary set tag:::
JCTree.JCUnary#getOperand(OperandPos)::: unary get operand:::return
JCTree.JCBinary#accept(Visitor)::: binary accept:::v->visitBinary
JCTree.JCBinary#getKind()::: binary get kind:::return->TreeInfo->getTag->tagToKind
JCTree.JCBinary#getLeftOperand()::: binary get left operand:::return
JCTree.JCBinary#getRightOperand()::: binary get right operand:::return
JCTree.JCBinary#accept(TreeVisitor, D)::: binary accept:::return->v->visitBinary
JCTree.JCBinary#getOperand(OperandPos)::: binary get operand:::return
JCTree.JCTypeCast#accept(Visitor)::: type cast accept:::v->visitTypeCast
JCTree.JCTypeCast#getKind()::: type cast get kind:::return
JCTree.JCTypeCast#getType()::: type cast get type:::return
JCTree.JCTypeCast#getExpression()::: type cast get expression:::return
JCTree.JCTypeCast#accept(TreeVisitor, D)::: type cast accept:::return->v->visitTypeCast
JCTree.JCTypeCast#getTag()::: type cast get tag:::return
JCTree.JCInstanceOf#accept(Visitor)::: instance of accept:::v->visitTypeTest
JCTree.JCInstanceOf#getKind()::: instance of get kind:::return
JCTree.JCInstanceOf#getType()::: instance of get type:::return
JCTree.JCInstanceOf#getExpression()::: instance of get expression:::return
JCTree.JCInstanceOf#accept(TreeVisitor, D)::: instance of accept:::return->v->visitInstanceOf
JCTree.JCInstanceOf#getTag()::: instance of get tag:::return
JCTree.JCArrayAccess#accept(Visitor)::: array access accept:::v->visitIndexed
JCTree.JCArrayAccess#getKind()::: array access get kind:::return
JCTree.JCArrayAccess#getExpression()::: array access get expression:::return
JCTree.JCArrayAccess#getIndex()::: array access get index:::return
JCTree.JCArrayAccess#accept(TreeVisitor, D)::: array access accept:::return->v->visitArrayAccess
JCTree.JCArrayAccess#getTag()::: array access get tag:::return
JCTree.JCFieldAccess#accept(Visitor)::: field access accept:::v->visitSelect
JCTree.JCFieldAccess#getKind()::: field access get kind:::return
JCTree.JCFieldAccess#getExpression()::: field access get expression:::return
JCTree.JCFieldAccess#accept(TreeVisitor, D)::: field access accept:::return->v->visitMemberSelect
JCTree.JCFieldAccess#getIdentifier()::: field access get identifier:::return
JCTree.JCFieldAccess#getTag()::: field access get tag:::return
JCTree.JCMemberReference#accept(Visitor)::: member reference accept:::v->visitReference
JCTree.JCMemberReference#getKind()::: member reference get kind:::return
JCTree.JCMemberReference#getMode()::: member reference get mode:::return
JCTree.JCMemberReference#getQualifierExpression()::: member reference get qualifier expression:::return
JCTree.JCMemberReference#getName()::: member reference get name:::return
JCTree.JCMemberReference#getTypeArguments()::: member reference get type arguments:::return
JCTree.JCMemberReference#accept(TreeVisitor, D)::: member reference accept:::return->v->visitMemberReference
JCTree.JCMemberReference#getTag()::: member reference get tag:::return
JCTree.JCMemberReference#hasKind(ReferenceKind)::: member reference has kind:::return
JCTree.JCMemberReference#getOverloadKind()::: member reference get overload kind:::return
JCTree.JCMemberReference#setOverloadKind(OverloadKind)::: member reference set overload kind:::
JCTree.JCIdent#accept(Visitor)::: ident accept:::v->visitIdent
JCTree.JCIdent#getKind()::: ident get kind:::return
JCTree.JCIdent#getName()::: ident get name:::return
JCTree.JCIdent#accept(TreeVisitor, D)::: ident accept:::return->v->visitIdentifier
JCTree.JCIdent#getTag()::: ident get tag:::return
JCTree.JCLiteral#accept(Visitor)::: literal accept:::v->visitLiteral
JCTree.JCLiteral#getKind()::: literal get kind:::return->typetag->getKindLiteral
JCTree.JCLiteral#getValue()::: literal get value:::switch->bi->return->ci->c->if->throw->new->AssertionError->return->return
JCTree.JCLiteral#accept(TreeVisitor, D)::: literal accept:::return->v->visitLiteral
JCTree.JCLiteral#setType(Type)::: literal set type:::super->setType->return
JCTree.JCLiteral#getTag()::: literal get tag:::return
JCTree.JCPrimitiveTypeTree#accept(Visitor)::: primitive type tree accept:::v->visitTypeIdent
JCTree.JCPrimitiveTypeTree#getKind()::: primitive type tree get kind:::return
JCTree.JCPrimitiveTypeTree#getPrimitiveTypeKind()::: primitive type tree get primitive type kind:::return->typetag->getPrimitiveTypeKind
JCTree.JCPrimitiveTypeTree#accept(TreeVisitor, D)::: primitive type tree accept:::return->v->visitPrimitiveType
JCTree.JCPrimitiveTypeTree#getTag()::: primitive type tree get tag:::return
JCTree.JCArrayTypeTree#accept(Visitor)::: array type tree accept:::v->visitTypeArray
JCTree.JCArrayTypeTree#getKind()::: array type tree get kind:::return
JCTree.JCArrayTypeTree#getType()::: array type tree get type:::return
JCTree.JCArrayTypeTree#accept(TreeVisitor, D)::: array type tree accept:::return->v->visitArrayType
JCTree.JCArrayTypeTree#getTag()::: array type tree get tag:::return
JCTree.JCTypeApply#accept(Visitor)::: type apply accept:::v->visitTypeApply
JCTree.JCTypeApply#getKind()::: type apply get kind:::return
JCTree.JCTypeApply#getType()::: type apply get type:::return
JCTree.JCTypeApply#getTypeArguments()::: type apply get type arguments:::return
JCTree.JCTypeApply#accept(TreeVisitor, D)::: type apply accept:::return->v->visitParameterizedType
JCTree.JCTypeApply#getTag()::: type apply get tag:::return
JCTree.JCTypeUnion#accept(Visitor)::: type union accept:::v->visitTypeUnion
JCTree.JCTypeUnion#getKind()::: type union get kind:::return
JCTree.JCTypeUnion#getTypeAlternatives()::: type union get type alternatives:::return
JCTree.JCTypeUnion#accept(TreeVisitor, D)::: type union accept:::return->v->visitUnionType
JCTree.JCTypeUnion#getTag()::: type union get tag:::return
JCTree.JCTypeIntersection#accept(Visitor)::: type intersection accept:::v->visitTypeIntersection
JCTree.JCTypeIntersection#getKind()::: type intersection get kind:::return
JCTree.JCTypeIntersection#getBounds()::: type intersection get bounds:::return
JCTree.JCTypeIntersection#accept(TreeVisitor, D)::: type intersection accept:::return->v->visitIntersectionType
JCTree.JCTypeIntersection#getTag()::: type intersection get tag:::return
JCTree.JCTypeParameter#accept(Visitor)::: type parameter accept:::v->visitTypeParameter
JCTree.JCTypeParameter#getKind()::: type parameter get kind:::return
JCTree.JCTypeParameter#getName()::: type parameter get name:::return
JCTree.JCTypeParameter#getBounds()::: type parameter get bounds:::return
JCTree.JCTypeParameter#getAnnotations()::: type parameter get annotations:::return
JCTree.JCTypeParameter#accept(TreeVisitor, D)::: type parameter accept:::return->v->visitTypeParameter
JCTree.JCTypeParameter#getTag()::: type parameter get tag:::return
JCTree.JCWildcard#accept(Visitor)::: wildcard accept:::v->visitWildcard
JCTree.JCWildcard#getKind()::: wildcard get kind:::switch->return->return->return->throw->new->AssertionError
JCTree.JCWildcard#getBound()::: wildcard get bound:::return
JCTree.JCWildcard#accept(TreeVisitor, D)::: wildcard accept:::return->v->visitWildcard
JCTree.JCWildcard#getTag()::: wildcard get tag:::return
JCTree.TypeBoundKind#accept(Visitor)::: type bound kind accept:::v->visitTypeBoundKind
JCTree.TypeBoundKind#getKind()::: type bound kind get kind:::throw->new->AssertionError
JCTree.TypeBoundKind#accept(TreeVisitor, D)::: type bound kind accept:::throw->new->AssertionError
JCTree.TypeBoundKind#getTag()::: type bound kind get tag:::return
JCTree.JCAnnotation#accept(Visitor)::: annotation accept:::v->visitAnnotation
JCTree.JCAnnotation#getKind()::: annotation get kind:::return->TreeInfo->getTag->tagToKind
JCTree.JCAnnotation#getAnnotationType()::: annotation get annotation type:::return
JCTree.JCAnnotation#getArguments()::: annotation get arguments:::return
JCTree.JCAnnotation#accept(TreeVisitor, D)::: annotation accept:::return->v->visitAnnotation
JCTree.JCAnnotation#getTag()::: annotation get tag:::return
JCTree.JCModifiers#accept(Visitor)::: modifiers accept:::v->visitModifiers
JCTree.JCModifiers#getKind()::: modifiers get kind:::return
JCTree.JCModifiers#getFlags()::: modifiers get flags:::return->Flags->asModifierSet
JCTree.JCModifiers#getAnnotations()::: modifiers get annotations:::return
JCTree.JCModifiers#accept(TreeVisitor, D)::: modifiers accept:::return->v->visitModifiers
JCTree.JCModifiers#getTag()::: modifiers get tag:::return
JCTree.JCAnnotatedType#accept(Visitor)::: annotated type accept:::v->visitAnnotatedType
JCTree.JCAnnotatedType#getKind()::: annotated type get kind:::return
JCTree.JCAnnotatedType#getAnnotations()::: annotated type get annotations:::return
JCTree.JCAnnotatedType#getUnderlyingType()::: annotated type get underlying type:::return
JCTree.JCAnnotatedType#accept(TreeVisitor, D)::: annotated type accept:::return->v->visitAnnotatedType
JCTree.JCAnnotatedType#getTag()::: annotated type get tag:::return
JCTree.JCModuleDecl#accept(Visitor)::: module decl accept:::v->visitModuleDef
JCTree.JCModuleDecl#getKind()::: module decl get kind:::return
JCTree.JCModuleDecl#getAnnotations()::: module decl get annotations:::return
JCTree.JCModuleDecl#getModuleType()::: module decl get module type:::return
JCTree.JCModuleDecl#getName()::: module decl get name:::return
JCTree.JCModuleDecl#getDirectives()::: module decl get directives:::return
JCTree.JCModuleDecl#accept(TreeVisitor, D)::: module decl accept:::return->v->visitModule
JCTree.JCModuleDecl#getTag()::: module decl get tag:::return
JCTree.JCExports#accept(Visitor)::: exports accept:::v->visitExports
JCTree.JCExports#getKind()::: exports get kind:::return
JCTree.JCExports#getPackageName()::: exports get package name:::return
JCTree.JCExports#getModuleNames()::: exports get module names:::return
JCTree.JCExports#accept(TreeVisitor, D)::: exports accept:::return->v->visitExports
JCTree.JCExports#getTag()::: exports get tag:::return
JCTree.JCOpens#accept(Visitor)::: opens accept:::v->visitOpens
JCTree.JCOpens#getKind()::: opens get kind:::return
JCTree.JCOpens#getPackageName()::: opens get package name:::return
JCTree.JCOpens#getModuleNames()::: opens get module names:::return
JCTree.JCOpens#accept(TreeVisitor, D)::: opens accept:::return->v->visitOpens
JCTree.JCOpens#getTag()::: opens get tag:::return
JCTree.JCProvides#accept(Visitor)::: provides accept:::v->visitProvides
JCTree.JCProvides#getKind()::: provides get kind:::return
JCTree.JCProvides#accept(TreeVisitor, D)::: provides accept:::return->v->visitProvides
JCTree.JCProvides#getServiceName()::: provides get service name:::return
JCTree.JCProvides#getImplementationNames()::: provides get implementation names:::return
JCTree.JCProvides#getTag()::: provides get tag:::return
JCTree.JCRequires#accept(Visitor)::: requires accept:::v->visitRequires
JCTree.JCRequires#getKind()::: requires get kind:::return
JCTree.JCRequires#accept(TreeVisitor, D)::: requires accept:::return->v->visitRequires
JCTree.JCRequires#isTransitive()::: requires is transitive:::return
JCTree.JCRequires#isStatic()::: requires is static:::return
JCTree.JCRequires#getModuleName()::: requires get module name:::return
JCTree.JCRequires#getTag()::: requires get tag:::return
JCTree.JCUses#accept(Visitor)::: uses accept:::v->visitUses
JCTree.JCUses#getKind()::: uses get kind:::return
JCTree.JCUses#getServiceName()::: uses get service name:::return
JCTree.JCUses#accept(TreeVisitor, D)::: uses accept:::return->v->visitUses
JCTree.JCUses#getTag()::: uses get tag:::return
JCTree.JCErroneous#accept(Visitor)::: erroneous accept:::v->visitErroneous
JCTree.JCErroneous#getKind()::: erroneous get kind:::return
JCTree.JCErroneous#getErrorTrees()::: erroneous get error trees:::return
JCTree.JCErroneous#accept(TreeVisitor, D)::: erroneous accept:::return->v->visitErroneous
JCTree.JCErroneous#getTag()::: erroneous get tag:::return
JCTree.LetExpr#accept(Visitor)::: let expr accept:::v->visitLetExpr
JCTree.LetExpr#getKind()::: let expr get kind:::throw->new->AssertionError
JCTree.LetExpr#accept(TreeVisitor, D)::: let expr accept:::throw->new->AssertionError
JCTree.LetExpr#getTag()::: let expr get tag:::return
JCTree.Factory#TopLevel(List)::: factory  top level:::
JCTree.Factory#PackageDecl PackageDecl(List, JCExpression)::: factory  package decl:::
JCTree.Factory#Import Import(JCTree, boolean)::: factory  import:::
JCTree.Factory#ClassDef(JCModifiers, Name, List, JCExpression, List, List)::: factory  class def:::
JCTree.Factory#MethodDef(JCModifiers, Name, JCExpression, List, JCVariableDecl, List, List, JCBlock, JCExpression)::: factory  method def:::
JCTree.Factory#VarDef(JCModifiers, Name, JCExpression, JCExpression)::: factory  var def:::
JCTree.Factory#Skip Skip()::: factory  skip:::
JCTree.Factory#Block Block(long, List)::: factory  block:::
JCTree.Factory#DoLoop(JCStatement, JCExpression)::: factory  do loop:::
JCTree.Factory#WhileLoop WhileLoop(JCExpression, JCStatement)::: factory  while loop:::
JCTree.Factory#ForLoop ForLoop(List, JCExpression, List, JCStatement)::: factory  for loop:::
JCTree.Factory#ForeachLoop(JCVariableDecl, JCExpression, JCStatement)::: factory  foreach loop:::
JCTree.Factory#Labelled(Name, JCStatement)::: factory  labelled:::
JCTree.Factory#Switch Switch(JCExpression, List)::: factory  switch:::
JCTree.Factory#Case Case(JCExpression, List)::: factory  case:::
JCTree.Factory#Synchronized Synchronized(JCExpression, JCBlock)::: factory  synchronized:::
JCTree.Factory#Try Try(JCBlock, List, JCBlock)::: factory  try:::
JCTree.Factory#Try Try(List, JCBlock, List, JCBlock)::: factory  try:::
JCTree.Factory#Catch Catch(JCVariableDecl, JCBlock)::: factory  catch:::
JCTree.Factory#Conditional Conditional(JCExpression, JCExpression, JCExpression)::: factory  conditional:::
JCTree.Factory#If If(JCExpression, JCStatement, JCStatement)::: factory  if:::
JCTree.Factory#Exec(JCExpression)::: factory  exec:::
JCTree.Factory#Break Break(Name)::: factory  break:::
JCTree.Factory#Continue Continue(Name)::: factory  continue:::
JCTree.Factory#Return Return(JCExpression)::: factory  return:::
JCTree.Factory#Throw Throw(JCExpression)::: factory  throw:::
JCTree.Factory#Assert Assert(JCExpression, JCExpression)::: factory  assert:::
JCTree.Factory#Apply(List, JCExpression, List)::: factory  apply:::
JCTree.Factory#NewClass NewClass(JCExpression, List, JCExpression, List, JCClassDecl)::: factory  new class:::
JCTree.Factory#NewArray NewArray(JCExpression, List, List)::: factory  new array:::
JCTree.Factory#Parens Parens(JCExpression)::: factory  parens:::
JCTree.Factory#Assign Assign(JCExpression, JCExpression)::: factory  assign:::
JCTree.Factory#Assignop(Tag, JCTree, JCTree)::: factory  assignop:::
JCTree.Factory#Unary Unary(Tag, JCExpression)::: factory  unary:::
JCTree.Factory#Binary Binary(Tag, JCExpression, JCExpression)::: factory  binary:::
JCTree.Factory#TypeCast TypeCast(JCTree, JCExpression)::: factory  type cast:::
JCTree.Factory#TypeTest(JCExpression, JCTree)::: factory  type test:::
JCTree.Factory#Indexed(JCExpression, JCExpression)::: factory  indexed:::
JCTree.Factory#Select(JCExpression, Name)::: factory  select:::
JCTree.Factory#Ident Ident(Name)::: factory  ident:::
JCTree.Factory#Literal Literal(TypeTag, Object)::: factory  literal:::
JCTree.Factory#TypeIdent(TypeTag)::: factory  type ident:::
JCTree.Factory#TypeArray(JCExpression)::: factory  type array:::
JCTree.Factory#TypeApply TypeApply(JCExpression, List)::: factory  type apply:::
JCTree.Factory#TypeParameter TypeParameter(Name, List)::: factory  type parameter:::
JCTree.Factory#Wildcard Wildcard(TypeBoundKind, JCTree)::: factory  wildcard:::
JCTree.Factory#TypeBoundKind TypeBoundKind(BoundKind)::: factory  type bound kind:::
JCTree.Factory#Annotation Annotation(JCTree, List)::: factory  annotation:::
JCTree.Factory#Modifiers Modifiers(long, List)::: factory  modifiers:::
JCTree.Factory#Erroneous Erroneous(List)::: factory  erroneous:::
JCTree.Factory#ModuleDef(JCModifiers, ModuleKind, JCExpression, List)::: factory  module def:::
JCTree.Factory#Exports Exports(JCExpression, List)::: factory  exports:::
JCTree.Factory#Opens Opens(JCExpression, List)::: factory  opens:::
JCTree.Factory#Provides Provides(JCExpression, List)::: factory  provides:::
JCTree.Factory#Requires Requires(boolean, boolean, JCExpression)::: factory  requires:::
JCTree.Factory#Uses Uses(JCExpression)::: factory  uses:::
JCTree.Factory#LetExpr LetExpr(List, JCExpression)::: factory  let expr:::
JCTree.Visitor#visitTopLevel(JCCompilationUnit)::: visitor visit top level:::visitTree
JCTree.Visitor#visitPackageDef(JCPackageDecl)::: visitor visit package def:::visitTree
JCTree.Visitor#visitImport(JCImport)::: visitor visit import:::visitTree
JCTree.Visitor#visitClassDef(JCClassDecl)::: visitor visit class def:::visitTree
JCTree.Visitor#visitMethodDef(JCMethodDecl)::: visitor visit method def:::visitTree
JCTree.Visitor#visitVarDef(JCVariableDecl)::: visitor visit var def:::visitTree
JCTree.Visitor#visitSkip(JCSkip)::: visitor visit skip:::visitTree
JCTree.Visitor#visitBlock(JCBlock)::: visitor visit block:::visitTree
JCTree.Visitor#visitDoLoop(JCDoWhileLoop)::: visitor visit do loop:::visitTree
JCTree.Visitor#visitWhileLoop(JCWhileLoop)::: visitor visit while loop:::visitTree
JCTree.Visitor#visitForLoop(JCForLoop)::: visitor visit for loop:::visitTree
JCTree.Visitor#visitForeachLoop(JCEnhancedForLoop)::: visitor visit foreach loop:::visitTree
JCTree.Visitor#visitLabelled(JCLabeledStatement)::: visitor visit labelled:::visitTree
JCTree.Visitor#visitSwitch(JCSwitch)::: visitor visit switch:::visitTree
JCTree.Visitor#visitCase(JCCase)::: visitor visit case:::visitTree
JCTree.Visitor#visitSynchronized(JCSynchronized)::: visitor visit synchronized:::visitTree
JCTree.Visitor#visitTry(JCTry)::: visitor visit try:::visitTree
JCTree.Visitor#visitCatch(JCCatch)::: visitor visit catch:::visitTree
JCTree.Visitor#visitConditional(JCConditional)::: visitor visit conditional:::visitTree
JCTree.Visitor#visitIf(JCIf)::: visitor visit if:::visitTree
JCTree.Visitor#visitExec(JCExpressionStatement)::: visitor visit exec:::visitTree
JCTree.Visitor#visitBreak(JCBreak)::: visitor visit break:::visitTree
JCTree.Visitor#visitContinue(JCContinue)::: visitor visit continue:::visitTree
JCTree.Visitor#visitReturn(JCReturn)::: visitor visit return:::visitTree
JCTree.Visitor#visitThrow(JCThrow)::: visitor visit throw:::visitTree
JCTree.Visitor#visitAssert(JCAssert)::: visitor visit assert:::visitTree
JCTree.Visitor#visitApply(JCMethodInvocation)::: visitor visit apply:::visitTree
JCTree.Visitor#visitNewClass(JCNewClass)::: visitor visit new class:::visitTree
JCTree.Visitor#visitNewArray(JCNewArray)::: visitor visit new array:::visitTree
JCTree.Visitor#visitLambda(JCLambda)::: visitor visit lambda:::visitTree
JCTree.Visitor#visitParens(JCParens)::: visitor visit parens:::visitTree
JCTree.Visitor#visitAssign(JCAssign)::: visitor visit assign:::visitTree
JCTree.Visitor#visitAssignop(JCAssignOp)::: visitor visit assignop:::visitTree
JCTree.Visitor#visitUnary(JCUnary)::: visitor visit unary:::visitTree
JCTree.Visitor#visitBinary(JCBinary)::: visitor visit binary:::visitTree
JCTree.Visitor#visitTypeCast(JCTypeCast)::: visitor visit type cast:::visitTree
JCTree.Visitor#visitTypeTest(JCInstanceOf)::: visitor visit type test:::visitTree
JCTree.Visitor#visitIndexed(JCArrayAccess)::: visitor visit indexed:::visitTree
JCTree.Visitor#visitSelect(JCFieldAccess)::: visitor visit select:::visitTree
JCTree.Visitor#visitReference(JCMemberReference)::: visitor visit reference:::visitTree
JCTree.Visitor#visitIdent(JCIdent)::: visitor visit ident:::visitTree
JCTree.Visitor#visitLiteral(JCLiteral)::: visitor visit literal:::visitTree
JCTree.Visitor#visitTypeIdent(JCPrimitiveTypeTree)::: visitor visit type ident:::visitTree
JCTree.Visitor#visitTypeArray(JCArrayTypeTree)::: visitor visit type array:::visitTree
JCTree.Visitor#visitTypeApply(JCTypeApply)::: visitor visit type apply:::visitTree
JCTree.Visitor#visitTypeUnion(JCTypeUnion)::: visitor visit type union:::visitTree
JCTree.Visitor#visitTypeIntersection(JCTypeIntersection)::: visitor visit type intersection:::visitTree
JCTree.Visitor#visitTypeParameter(JCTypeParameter)::: visitor visit type parameter:::visitTree
JCTree.Visitor#visitWildcard(JCWildcard)::: visitor visit wildcard:::visitTree
JCTree.Visitor#visitTypeBoundKind(TypeBoundKind)::: visitor visit type bound kind:::visitTree
JCTree.Visitor#visitAnnotation(JCAnnotation)::: visitor visit annotation:::visitTree
JCTree.Visitor#visitModifiers(JCModifiers)::: visitor visit modifiers:::visitTree
JCTree.Visitor#visitAnnotatedType(JCAnnotatedType)::: visitor visit annotated type:::visitTree
JCTree.Visitor#visitErroneous(JCErroneous)::: visitor visit erroneous:::visitTree
JCTree.Visitor#visitModuleDef(JCModuleDecl)::: visitor visit module def:::visitTree
JCTree.Visitor#visitExports(JCExports)::: visitor visit exports:::visitTree
JCTree.Visitor#visitOpens(JCOpens)::: visitor visit opens:::visitTree
JCTree.Visitor#visitProvides(JCProvides)::: visitor visit provides:::visitTree
JCTree.Visitor#visitRequires(JCRequires)::: visitor visit requires:::visitTree
JCTree.Visitor#visitUses(JCUses)::: visitor visit uses:::visitTree
JCTree.Visitor#visitLetExpr(LetExpr)::: visitor visit let expr:::visitTree
JCTree.Visitor#visitTree(JCTree)::: visitor visit tree:::Assert->error
Pretty#align():::Align code to be indented to left margin.:::for->i
Pretty#indent():::Increase left margin by indentation width.:::
Pretty#undent():::Decrease left margin by indentation width.:::
Pretty#open(int, int):::Enter a new precedence level:::if->out->write
Pretty#close(int, int):::Leave precedence level:::if->out->write
Pretty#print(Object):::Print string, replacing all non-ascii character with unicode escapes.:::out->Convert->s->toString->escapeUnicode->write
Pretty#println():::Print new line.:::out->write
Pretty#toSimpleString(JCTree)::: pretty to simple string:::return->toSimpleString
Pretty#toSimpleString(JCTree, int)::: pretty to simple string:::s->new->StringWriter->try->new->Pretty->printExpr->catch->throw->new->AssertionError->finally->res->s->toString->trim->replaceAll->replaceAll->if->res->length->return->else->head->trimSequence->length->tail->trimSequence->length->return->res->substring->res->res->length->substring
Pretty#printExpr(JCTree, int):::Visitor method: print expression tree.:::prevPrec->try->if->print->else->tree->accept->catch->e->ex->getMessage->new->IOException->e->initCause->throw->finally
Pretty#printExpr(JCTree):::Derived visitor method: print expression tree at minimum precedence level  for expression.:::printExpr
Pretty#printStat(JCTree):::Derived visitor method: print statement tree.:::printExpr
Pretty#printExprs(List, String):::Derived visitor method: print list of expression trees, separated by given string.:::if->trees->nonEmpty->printExpr->for->l->l->nonEmpty
Pretty#printExprs(List):::Derived visitor method: print list of expression trees, separated by commas.:::printExprs
Pretty#printStats(List):::Derived visitor method: print list of statements, each on a separate line.:::for->l->l->nonEmpty
Pretty#printFlags(long):::Print a set of modifiers.:::if->print->TreeInfo->flagNames->print->if->print->if->print
Pretty#printAnnotations(List)::: pretty print annotations:::for->l->l->nonEmpty
Pretty#printTypeAnnotations(List)::: pretty print type annotations:::for->l->l->nonEmpty
Pretty#printDocComment(JCTree):::Print documentation comment, if it exists:::if->dc->docComments->getCommentText->if->print->println->pos->endpos->lineEndPos->while->dc->length->align->print->if->dc->length->dc->charAt->print->dc->substring->print->println->lineEndPos->align->print->println->align
Pretty#lineEndPos(String, int)::: pretty line end pos:::pos->s->indexOf->if->s->length->return
Pretty#printTypeParameters(List):::If type parameter list is non-empty, print it enclosed in  "<...>" brackets.:::if->trees->nonEmpty->print->printExprs->print
Pretty#printBlock(List):::Print a block.:::print->println->indent->printStats->undent->align->print
Pretty#printEnumBody(List):::Print a block.:::print->println->indent->first->for->l->l->nonEmpty->print->println->for->l->l->nonEmpty->undent->align->print
Pretty#isEnumerator(JCTree):::Is the given tree an enumerator definition?:::return->t->hasTag
Pretty#printUnit(JCCompilationUnit, JCClassDecl):::Print unit consisting of package clause and import statements in toplevel,  followed by class definition:::printDocComment->firstImport->for->l->l->nonEmpty->hasTag->hasTag->if->printStat->println
Pretty#isUsed(Symbol, JCTree)::: pretty is used:::v->new->UsedVisitor->v->scan->return
Pretty#visitTopLevel(JCCompilationUnit)::: pretty visit top level:::try->printUnit->catch->throw->new->UncheckedIOException->finally
Pretty#visitPackageDef(JCPackageDecl)::: pretty visit package def:::try->printDocComment->printAnnotations->if->print->printExpr->print->println->catch->throw->new->UncheckedIOException->finally
Pretty#visitModuleDef(JCModuleDecl)::: pretty visit module def:::try->printDocComment->printAnnotations->if->tree->getModuleType->print->print->printExpr->if->print->else->printBlock->println->catch->throw->new->UncheckedIOException->finally
Pretty#visitExports(JCExports)::: pretty visit exports:::try->print->printExpr->if->print->printExprs->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitOpens(JCOpens)::: pretty visit opens:::try->print->printExpr->if->print->printExprs->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitProvides(JCProvides)::: pretty visit provides:::try->print->printExpr->print->printExprs->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitRequires(JCRequires)::: pretty visit requires:::try->print->if->print->if->print->printExpr->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitUses(JCUses)::: pretty visit uses:::try->print->printExpr->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitImport(JCImport)::: pretty visit import:::try->print->if->print->printExpr->print->println->catch->throw->new->UncheckedIOException->finally
Pretty#visitClassDef(JCClassDecl)::: pretty visit class def:::try->println->align->printDocComment->printAnnotations->printFlags->enclClassNamePrev->if->print->printTypeParameters->if->nonEmpty->print->printExprs->else->if->print->else->print->printTypeParameters->if->print->printExpr->if->nonEmpty->print->printExprs->print->if->printEnumBody->else->printBlock->catch->throw->new->UncheckedIOException->finally
Pretty#visitMethodDef(JCMethodDecl)::: pretty visit method def:::try->if->return->println->align->printDocComment->printExpr->printTypeParameters->if->print->else->printExpr->print->print->if->printExpr->if->size->print->printExprs->print->if->nonEmpty->print->printExprs->if->print->printExpr->if->print->printStat->else->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitVarDef(JCVariableDecl)::: pretty visit var def:::try->if->docComments->hasComment->println->align->printDocComment->if->print->print->if->if->hasTag->init->if->print->if->nonEmpty->print->print->print->if->print->printBlock->return->else->print->print->if->nonEmpty->printTypeAnnotations->printExpr->print->printExprs->print->print->print->if->nonEmpty->print->printExprs->print->if->print->printBlock->return->print->printExpr->print->else->printExpr->if->vartype->tas->if->printExpr->if->print->printTypeAnnotations->print->else->printExpr->print->if->print->printExpr->if->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitSkip(JCSkip)::: pretty visit skip:::try->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitBlock(JCBlock)::: pretty visit block:::try->printFlags->printBlock->catch->throw->new->UncheckedIOException->finally
Pretty#visitDoLoop(JCDoWhileLoop)::: pretty visit do loop:::try->print->printStat->align->print->if->hasTag->printExpr->else->print->printExpr->print->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitWhileLoop(JCWhileLoop)::: pretty visit while loop:::try->print->if->hasTag->printExpr->else->print->printExpr->print->print->printStat->catch->throw->new->UncheckedIOException->finally
Pretty#visitForLoop(JCForLoop)::: pretty visit for loop:::try->print->if->nonEmpty->if->hasTag->printExpr->for->l->l->nonEmpty->else->printExprs->print->if->printExpr->print->printExprs->print->printStat->catch->throw->new->UncheckedIOException->finally
Pretty#visitForeachLoop(JCEnhancedForLoop)::: pretty visit foreach loop:::try->print->printExpr->print->printExpr->print->printStat->catch->throw->new->UncheckedIOException->finally
Pretty#visitLabelled(JCLabeledStatement)::: pretty visit labelled:::try->print->printStat->catch->throw->new->UncheckedIOException->finally
Pretty#visitSwitch(JCSwitch)::: pretty visit switch:::try->print->if->hasTag->printExpr->else->print->printExpr->print->print->println->printStats->align->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitCase(JCCase)::: pretty visit case:::try->if->print->else->print->printExpr->print->println->indent->printStats->undent->align->catch->throw->new->UncheckedIOException->finally
Pretty#visitSynchronized(JCSynchronized)::: pretty visit synchronized:::try->print->if->hasTag->printExpr->else->print->printExpr->print->print->printStat->catch->throw->new->UncheckedIOException->finally
Pretty#visitTry(JCTry)::: pretty visit try:::try->print->if->nonEmpty->print->first->foreach->if->println->indent->printStat->print->printStat->for->l->l->nonEmpty->if->print->printStat->catch->throw->new->UncheckedIOException->finally
Pretty#visitCatch(JCCatch)::: pretty visit catch:::try->print->printExpr->print->printStat->catch->throw->new->UncheckedIOException->finally
Pretty#visitConditional(JCConditional)::: pretty visit conditional:::try->open->printExpr->print->printExpr->print->printExpr->close->catch->throw->new->UncheckedIOException->finally
Pretty#visitIf(JCIf)::: pretty visit if:::try->print->if->hasTag->printExpr->else->print->printExpr->print->print->printStat->if->print->printStat->catch->throw->new->UncheckedIOException->finally
Pretty#visitExec(JCExpressionStatement)::: pretty visit exec:::try->printExpr->if->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitBreak(JCBreak)::: pretty visit break:::try->print->if->print->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitContinue(JCContinue)::: pretty visit continue:::try->print->if->print->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitReturn(JCReturn)::: pretty visit return:::try->print->if->print->printExpr->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitThrow(JCThrow)::: pretty visit throw:::try->print->printExpr->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitAssert(JCAssert)::: pretty visit assert:::try->print->printExpr->if->print->printExpr->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitApply(JCMethodInvocation)::: pretty visit apply:::try->if->isEmpty->if->hasTag->left->printExpr->print->printExprs->print->else->print->printExprs->print->printExpr->else->printExpr->print->printExprs->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitNewClass(JCNewClass)::: pretty visit new class:::try->if->printExpr->print->print->if->isEmpty->print->printExprs->print->if->nonEmpty->printTypeAnnotations->printExpr->print->printExprs->print->if->enclClassNamePrev->if->print->printBlock->catch->throw->new->UncheckedIOException->finally
Pretty#visitNewArray(JCNewArray)::: pretty visit new array:::try->if->print->elem->printBaseElementType->if->isEmpty->print->printTypeAnnotations->if->print->i->da->for->l->l->nonEmpty->printBrackets->if->print->printExprs->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitLambda(JCLambda)::: pretty visit lambda:::try->print->if->printExprs->else->sep->foreach->print->print->print->printExpr->catch->throw->new->UncheckedIOException->finally
Pretty#visitParens(JCParens)::: pretty visit parens:::try->print->printExpr->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitAssign(JCAssign)::: pretty visit assign:::try->open->printExpr->print->printExpr->close->catch->throw->new->UncheckedIOException->finally
Pretty#operatorName(JCTree.Tag)::: pretty operator name:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->throw->new->Error
Pretty#visitAssignop(JCAssignOp)::: pretty visit assignop:::try->open->printExpr->tree->getTag->noAssignOp->operatorName->print->printExpr->close->catch->throw->new->UncheckedIOException->finally
Pretty#visitUnary(JCUnary)::: pretty visit unary:::try->ownprec->TreeInfo->tree->getTag->opPrec->opname->tree->getTag->operatorName->open->if->tree->getTag->isPostUnaryOp->print->printExpr->else->printExpr->print->close->catch->throw->new->UncheckedIOException->finally
Pretty#visitBinary(JCBinary)::: pretty visit binary:::try->ownprec->TreeInfo->tree->getTag->opPrec->opname->tree->getTag->operatorName->open->printExpr->print->printExpr->close->catch->throw->new->UncheckedIOException->finally
Pretty#visitTypeCast(JCTypeCast)::: pretty visit type cast:::try->open->print->printExpr->print->printExpr->close->catch->throw->new->UncheckedIOException->finally
Pretty#visitTypeTest(JCInstanceOf)::: pretty visit type test:::try->open->printExpr->print->printExpr->close->catch->throw->new->UncheckedIOException->finally
Pretty#visitIndexed(JCArrayAccess)::: pretty visit indexed:::try->printExpr->print->printExpr->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitSelect(JCFieldAccess)::: pretty visit select:::try->printExpr->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitReference(JCMemberReference)::: pretty visit reference:::try->printExpr->print->if->print->printExprs->print->tree->getMode->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitIdent(JCIdent)::: pretty visit ident:::try->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitLiteral(JCLiteral)::: pretty visit literal:::try->switch->toString->print->break->print->break->print->break->toString->print->break->Convert->String->intValue->valueOf->quote->print->break->intValue->print->break->print->break->Convert->toString->quote->print->break->catch->throw->new->UncheckedIOException->finally
Pretty#visitTypeIdent(JCPrimitiveTypeTree)::: pretty visit type ident:::try->switch->print->break->print->break->print->break->print->break->print->break->print->break->print->break->print->break->print->break->print->break->catch->throw->new->UncheckedIOException->finally
Pretty#visitTypeArray(JCArrayTypeTree)::: pretty visit type array:::try->printBaseElementType->printBrackets->catch->throw->new->UncheckedIOException->finally
Pretty#printBaseElementType(JCTree)::: pretty print base element type:::TreeInfo->innermostType->printExpr
Pretty#printBrackets(JCTree)::: pretty print brackets:::elem->while->if->elem->hasTag->atype->if->elem->hasTag->print->printTypeAnnotations->if->elem->hasTag->print->else->break
Pretty#visitTypeApply(JCTypeApply)::: pretty visit type apply:::try->printExpr->print->printExprs->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitTypeUnion(JCTypeUnion)::: pretty visit type union:::try->printExprs->catch->throw->new->UncheckedIOException->finally
Pretty#visitTypeIntersection(JCTypeIntersection)::: pretty visit type intersection:::try->printExprs->catch->throw->new->UncheckedIOException->finally
Pretty#visitTypeParameter(JCTypeParameter)::: pretty visit type parameter:::try->if->nonEmpty->this->printTypeAnnotations->print->if->nonEmpty->print->printExprs->catch->throw->new->UncheckedIOException->finally
Pretty#visitWildcard(JCWildcard)::: pretty visit wildcard:::try->print->if->printExpr->catch->throw->new->UncheckedIOException->finally
Pretty#visitTypeBoundKind(TypeBoundKind)::: pretty visit type bound kind:::try->String->valueOf->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitErroneous(JCErroneous)::: pretty visit erroneous:::try->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitLetExpr(LetExpr)::: pretty visit let expr:::try->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitModifiers(JCModifiers)::: pretty visit modifiers:::try->printAnnotations->printFlags->catch->throw->new->UncheckedIOException->finally
Pretty#visitAnnotation(JCAnnotation)::: pretty visit annotation:::try->print->printExpr->print->printExprs->print->catch->throw->new->UncheckedIOException->finally
Pretty#visitAnnotatedType(JCAnnotatedType)::: pretty visit annotated type:::try->if->hasTag->access->printExpr->print->printTypeAnnotations->print->else->if->hasTag->printBaseElementType->printBrackets->else->printTypeAnnotations->printExpr->catch->throw->new->UncheckedIOException->finally
Pretty#visitTree(JCTree)::: pretty visit tree:::try->tree->getTag->print->println->catch->throw->new->UncheckedIOException->finally
TreeCopier#copy(T)::: tree copier copy:::return->copy
TreeCopier#copy(T, P)::: tree copier copy:::if->return->return->tree->accept
TreeCopier#copy(List)::: tree copier copy:::return->copy
TreeCopier#copy(List, P)::: tree copier copy:::if->return->lb->new->ListBuffer<>->foreach->lb->copy->append->return->lb->toList
TreeCopier#visitAnnotatedType(AnnotatedTypeTree, P)::: tree copier visit annotated type:::t->annotations->copy->underlyingType->copy->return->M->at->AnnotatedType
TreeCopier#visitAnnotation(AnnotationTree, P)::: tree copier visit annotation:::t->annotationType->copy->args->copy->if->t->getKind->newTA->M->at->TypeAnnotation->return->else->newT->M->at->Annotation->return
TreeCopier#visitAssert(AssertTree, P)::: tree copier visit assert:::t->cond->copy->detail->copy->return->M->at->Assert
TreeCopier#visitAssignment(AssignmentTree, P)::: tree copier visit assignment:::t->lhs->copy->rhs->copy->return->M->at->Assign
TreeCopier#visitCompoundAssignment(CompoundAssignmentTree, P)::: tree copier visit compound assignment:::t->lhs->copy->rhs->copy->return->M->at->t->getTag->Assignop
TreeCopier#visitBinary(BinaryTree, P)::: tree copier visit binary:::t->lhs->copy->rhs->copy->return->M->at->t->getTag->Binary
TreeCopier#visitBlock(BlockTree, P)::: tree copier visit block:::t->stats->copy->return->M->at->Block
TreeCopier#visitBreak(BreakTree, P)::: tree copier visit break:::t->return->M->at->Break
TreeCopier#visitCase(CaseTree, P)::: tree copier visit case:::t->pat->copy->stats->copy->return->M->at->Case
TreeCopier#visitCatch(CatchTree, P)::: tree copier visit catch:::t->param->copy->body->copy->return->M->at->Catch
TreeCopier#visitClass(ClassTree, P)::: tree copier visit class:::t->mods->copy->typarams->copy->extending->copy->implementing->copy->defs->copy->return->M->at->ClassDef
TreeCopier#visitConditionalExpression(ConditionalExpressionTree, P)::: tree copier visit conditional expression:::t->cond->copy->truepart->copy->falsepart->copy->return->M->at->Conditional
TreeCopier#visitContinue(ContinueTree, P)::: tree copier visit continue:::t->return->M->at->Continue
TreeCopier#visitDoWhileLoop(DoWhileLoopTree, P)::: tree copier visit do while loop:::t->body->copy->cond->copy->return->M->at->DoLoop
TreeCopier#visitErroneous(ErroneousTree, P)::: tree copier visit erroneous:::t->errs->copy->return->M->at->Erroneous
TreeCopier#visitExpressionStatement(ExpressionStatementTree, P)::: tree copier visit expression statement:::t->expr->copy->return->M->at->Exec
TreeCopier#visitEnhancedForLoop(EnhancedForLoopTree, P)::: tree copier visit enhanced for loop:::t->var->copy->expr->copy->body->copy->return->M->at->ForeachLoop
TreeCopier#visitForLoop(ForLoopTree, P)::: tree copier visit for loop:::t->init->copy->cond->copy->step->copy->body->copy->return->M->at->ForLoop
TreeCopier#visitIdentifier(IdentifierTree, P)::: tree copier visit identifier:::t->return->M->at->Ident
TreeCopier#visitIf(IfTree, P)::: tree copier visit if:::t->cond->copy->thenpart->copy->elsepart->copy->return->M->at->If
TreeCopier#visitImport(ImportTree, P)::: tree copier visit import:::t->qualid->copy->return->M->at->Import
TreeCopier#visitArrayAccess(ArrayAccessTree, P)::: tree copier visit array access:::t->indexed->copy->index->copy->return->M->at->Indexed
TreeCopier#visitLabeledStatement(LabeledStatementTree, P)::: tree copier visit labeled statement:::t->body->copy->return->M->at->Labelled
TreeCopier#visitLiteral(LiteralTree, P)::: tree copier visit literal:::t->return->M->at->Literal
TreeCopier#visitMethod(MethodTree, P)::: tree copier visit method:::t->mods->copy->restype->copy->typarams->copy->params->copy->recvparam->copy->thrown->copy->body->copy->defaultValue->copy->return->M->at->MethodDef
TreeCopier#visitMethodInvocation(MethodInvocationTree, P)::: tree copier visit method invocation:::t->typeargs->copy->meth->copy->args->copy->return->M->at->Apply
TreeCopier#visitModifiers(ModifiersTree, P)::: tree copier visit modifiers:::t->annotations->copy->return->M->at->Modifiers
TreeCopier#visitNewArray(NewArrayTree, P)::: tree copier visit new array:::t->elemtype->copy->dims->copy->elems->copy->return->M->at->NewArray
TreeCopier#visitNewClass(NewClassTree, P)::: tree copier visit new class:::t->encl->copy->typeargs->copy->clazz->copy->args->copy->def->copy->return->M->at->NewClass
TreeCopier#visitLambdaExpression(LambdaExpressionTree, P)::: tree copier visit lambda expression:::t->params->copy->body->copy->return->M->at->Lambda
TreeCopier#visitParenthesized(ParenthesizedTree, P)::: tree copier visit parenthesized:::t->expr->copy->return->M->at->Parens
TreeCopier#visitReturn(ReturnTree, P)::: tree copier visit return:::t->expr->copy->return->M->at->Return
TreeCopier#visitMemberSelect(MemberSelectTree, P)::: tree copier visit member select:::t->selected->copy->return->M->at->Select
TreeCopier#visitMemberReference(MemberReferenceTree, P)::: tree copier visit member reference:::t->expr->copy->typeargs->copy->return->M->at->Reference
TreeCopier#visitEmptyStatement(EmptyStatementTree, P)::: tree copier visit empty statement:::t->return->M->at->Skip
TreeCopier#visitSwitch(SwitchTree, P)::: tree copier visit switch:::t->selector->copy->cases->copy->return->M->at->Switch
TreeCopier#visitSynchronized(SynchronizedTree, P)::: tree copier visit synchronized:::t->lock->copy->body->copy->return->M->at->Synchronized
TreeCopier#visitThrow(ThrowTree, P)::: tree copier visit throw:::t->expr->copy->return->M->at->Throw
TreeCopier#visitCompilationUnit(CompilationUnitTree, P)::: tree copier visit compilation unit:::t->defs->copy->return->M->at->TopLevel
TreeCopier#visitPackage(PackageTree, P)::: tree copier visit package:::t->annotations->copy->pid->copy->return->M->at->PackageDecl
TreeCopier#visitTry(TryTree, P)::: tree copier visit try:::t->resources->copy->body->copy->catchers->copy->finalizer->copy->return->M->at->Try
TreeCopier#visitParameterizedType(ParameterizedTypeTree, P)::: tree copier visit parameterized type:::t->clazz->copy->arguments->copy->return->M->at->TypeApply
TreeCopier#visitUnionType(UnionTypeTree, P)::: tree copier visit union type:::t->components->copy->return->M->at->TypeUnion
TreeCopier#visitIntersectionType(IntersectionTypeTree, P)::: tree copier visit intersection type:::t->bounds->copy->return->M->at->TypeIntersection
TreeCopier#visitArrayType(ArrayTypeTree, P)::: tree copier visit array type:::t->elemtype->copy->return->M->at->TypeArray
TreeCopier#visitTypeCast(TypeCastTree, P)::: tree copier visit type cast:::t->clazz->copy->expr->copy->return->M->at->TypeCast
TreeCopier#visitPrimitiveType(PrimitiveTypeTree, P)::: tree copier visit primitive type:::t->return->M->at->TypeIdent
TreeCopier#visitTypeParameter(TypeParameterTree, P)::: tree copier visit type parameter:::t->annos->copy->bounds->copy->return->M->at->TypeParameter
TreeCopier#visitInstanceOf(InstanceOfTree, P)::: tree copier visit instance of:::t->expr->copy->clazz->copy->return->M->at->TypeTest
TreeCopier#visitUnary(UnaryTree, P)::: tree copier visit unary:::t->arg->copy->return->M->at->t->getTag->Unary
TreeCopier#visitVariable(VariableTree, P)::: tree copier visit variable:::t->mods->copy->vartype->copy->if->init->copy->return->M->at->VarDef->else->nameexpr->copy->return->M->at->ReceiverVarDef
TreeCopier#visitWhileLoop(WhileLoopTree, P)::: tree copier visit while loop:::t->body->copy->cond->copy->return->M->at->WhileLoop
TreeCopier#visitWildcard(WildcardTree, P)::: tree copier visit wildcard:::t->kind->M->at->TypeBoundKind->inner->copy->return->M->at->Wildcard
TreeCopier#visitModule(ModuleTree, P)::: tree copier visit module:::t->mods->copy->qualId->copy->directives->copy->return->M->at->t->getModuleType->ModuleDef
TreeCopier#visitExports(ExportsTree, P)::: tree copier visit exports:::t->qualId->copy->moduleNames->copy->return->M->at->Exports
TreeCopier#visitOpens(OpensTree, P)::: tree copier visit opens:::t->qualId->copy->moduleNames->copy->return->M->at->Opens
TreeCopier#visitProvides(ProvidesTree, P)::: tree copier visit provides:::t->serviceName->copy->implNames->copy->return->M->at->Provides
TreeCopier#visitRequires(RequiresTree, P)::: tree copier visit requires:::t->moduleName->copy->return->M->at->Requires
TreeCopier#visitUses(UsesTree, P)::: tree copier visit uses:::t->serviceName->copy->return->M->at->Uses
TreeCopier#visitOther(Tree, P)::: tree copier visit other:::tree->switch->tree->getTag->t->defs->copy->expr->copy->return->M->at->LetExpr->throw->tree->getTag->new->AssertionError
TreeInfo#args(JCTree)::: tree info args:::switch->t->getTag->return->return->return
TreeInfo#isConstructor(JCTree):::Is tree a constructor declaration?:::if->tree->hasTag->name->return->else->return
TreeInfo#isReceiverParam(JCTree)::: tree info is receiver param:::if->tree->hasTag->return->else->return
TreeInfo#hasConstructors(List):::Is there a constructor declaration in the given list of trees?:::for->l->l->nonEmpty->return
TreeInfo#isMultiCatch(JCCatch)::: tree info is multi catch:::return->hasTag
TreeInfo#isSyntheticInit(JCTree):::Is statement an initializer for a synthetic field?:::if->stat->hasTag->exec->if->hasTag->assign->if->hasTag->select->if->flags->selected->name->if->return->return
TreeInfo#calledMethodName(JCTree):::If the expression is a method call, return the method name, null  otherwise.:::if->tree->hasTag->exec->if->hasTag->mname->TreeInfo->name->return->return
TreeInfo#isSelfCall(JCTree):::Is this a call to this or super?:::name->calledMethodName->if->names->return->else->return
TreeInfo#isThisQualifier(JCTree):::Is this tree a 'this' identifier?:::switch->tree->getTag->return->skipParens->isThisQualifier->id->return->return
TreeInfo#isIdentOrThisDotIdent(JCTree):::Is this tree an identifier, possibly qualified by 'this'?:::switch->tree->getTag->return->skipParens->isIdentOrThisDotIdent->return->return->isThisQualifier->return
TreeInfo#isSuperCall(JCTree):::Is this a call to super?:::name->calledMethodName->if->names->return->else->return
TreeInfo#isInitialConstructor(JCTree):::Is this a constructor whose first (non-synthetic) statement is not  of the form this(...)?:::app->firstConstructorCall->if->return->meth->name->return
TreeInfo#firstConstructorCall(JCTree):::Return the first call in a constructor definition.:::if->tree->hasTag->return->md->names->if->return->if->return->stats->while->stats->nonEmpty->isSyntheticInit->if->stats->isEmpty->return->if->hasTag->return->exec->if->hasTag->return->return
TreeInfo#isDiamond(JCTree):::Return true if a tree represents a diamond new expr.:::switch->tree->getTag->return->getTypeArguments->isEmpty->return->isDiamond->return->isDiamond->return
TreeInfo#isEnumInit(JCTree)::: tree info is enum init:::switch->tree->getTag->return->return
TreeInfo#setPolyKind(JCTree, PolyKind):::set 'polyKind' on given tree:::switch->tree->getTag->break->break->break->throw->new->AssertionError
TreeInfo#setVarargsElement(JCTree, Type):::set 'varargsElement' on given tree:::switch->tree->getTag->break->break->break->throw->new->AssertionError
TreeInfo#isExpressionStatement(JCExpression):::Return true if the tree corresponds to an expression statement:::switch->tree->getTag->return->return
TreeInfo#isStatement(JCTree):::Return true if the tree corresponds to a statement:::return->tree->hasTag->tree->hasTag->tree->hasTag
TreeInfo#isStaticSelector(JCTree, Names):::Return true if the AST corresponds to a static select of the kind A.B:::if->return->switch->base->getTag->id->return->isStaticSym->return->isStaticSym->isStaticSelector->return->return->isStaticSelector->return
TreeInfo#isStaticSym(JCTree)::: tree info is static sym:::sym->symbol->return
TreeInfo#isNull(JCTree):::Return true if a tree represents the null literal.:::if->tree->hasTag->return->lit->return
TreeInfo#isInAnnotation(Env, JCTree):::Return true iff this tree is a child of some annotation.:::tp->TreePath->getPath->if->foreach->if->t->getKind->return->return
TreeInfo#getCommentText(Env, JCTree)::: tree info get comment text:::docComments->tree->hasTag->return->docComments->getCommentText
TreeInfo#getCommentTree(Env, JCTree)::: tree info get comment tree:::docComments->tree->hasTag->return->docComments->getCommentTree
TreeInfo#firstStatPos(JCTree):::The position of the first statement in a block, or the position of  the block itself if it is empty.:::if->tree->hasTag->nonEmpty->return->else->return
TreeInfo#endPos(JCTree):::The end position of given tree, if it is a block with  defined endpos.:::if->tree->hasTag->return->else->if->tree->hasTag->return->endPos->else->if->tree->hasTag->t->return->nonEmpty->last->endPos->else->return
TreeInfo#getStartPos(JCTree):::Get the start position for a tree node:::if->return->switch->tree->getTag->md->return->isEmpty->pd->return->isEmpty->return->getStartPos->return->getStartPos->return->getOperand->getStartPos->node->if->return->break->return->getStartPos->return->getStartPos->return->getStartPos->node->if->return->if->nonEmpty->return->getStartPos->return->getStartPos->return->getStartPos->return->getStartPos->return->getStartPos->return->getStartPos->node->if->nonEmpty->if->hasTag->hasTag->return->getStartPos->else->return->getStartPos->else->return->getStartPos->node->if->return->getStartPos->break->node->if->return->else->if->return->else->if->return->else->return->getStartPos->node->if->nonEmpty->return->getStartPos->return
TreeInfo#getEndPos(JCTree, EndPosTable):::The end position of given tree, given  a table of end positions generated by the parser:::if->return->if->return->endPos->mapPos->endPosTable->getEndPos->if->return->switch->tree->getTag->return->getOperand->getEndPos->return->last->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->node->if->return->getEndPos->else->return->getEndPos->return->getEndPos->return->last->getEndPos->return->getEndPos->return->last->getEndPos->node->if->return->getEndPos->else->if->isEmpty->return->last->getEndPos->else->return->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->return->getEndPos->node->if->nonEmpty->return->last->getEndPos->return
TreeInfo#diagEndPos(JCTree):::A DiagnosticPosition with the preferred position set to the  end position of given tree, if it is a block with  defined endpos.:::endPos->TreeInfo->endPos->return->new->DiagnosticPosition
TreeInfo#finalizerPos(JCTree, PosKind):::The position of the finalizer of given try/synchronized statement.:::if->tree->hasTag->t->Assert->checkNonNull->return->posKind->toPos->else->if->tree->hasTag->return->endPos->else->throw->new->AssertionError
TreeInfo#positionFor(Symbol, JCTree):::Find the position for reporting an error about a symbol, where  that symbol is defined somewhere in the given tree.:::decl->declarationFor->return
TreeInfo#diagnosticPositionFor(Symbol, JCTree):::Find the position for reporting an error about a symbol, where  that symbol is defined somewhere in the given tree.:::decl->declarationFor->return->pos
TreeInfo#declarationFor(Symbol, JCTree):::Find the declaration for a symbol, where  that symbol is defined somewhere in the given tree.:::s->new->DeclScanner->tree->accept->return
TreeInfo#scopeFor(JCTree, JCCompilationUnit)::: tree info scope for:::return->pathFor->scopeFor
TreeInfo#scopeFor(List)::: tree info scope for:::throw->new->UnsupportedOperationException
TreeInfo#pathFor(JCTree, JCCompilationUnit)::: tree info path for:::try->new->PathFinder->scan->catch->return->finally->return->List->nil
TreeInfo#referencedStatement(JCLabeledStatement):::Return the statement referenced by a label:::t->do->while->t->hasTag->switch->t->getTag->return->return
TreeInfo#skipParens(JCExpression):::Skip parens and return the enclosed expression:::while->tree->hasTag->return
TreeInfo#skipParens(JCTree):::Skip parens and return the enclosed expression:::if->tree->hasTag->return->skipParens->else->return
TreeInfo#types(List):::Return the types of a list of trees.:::ts->new->ListBuffer<>->for->l->l->nonEmpty->return->ts->toList
TreeInfo#name(JCTree):::If this tree is an identifier or a field or a parameterized type,  return its name, otherwise return null.:::switch->tree->getTag->return->return->return->name->return
TreeInfo#fullName(JCTree):::If this tree is a qualified identifier, its return fully qualified name,  otherwise return null.:::skipParens->switch->tree->getTag->return->sname->fullName->return->sname->name->append->return
TreeInfo#symbolFor(JCTree)::: tree info symbol for:::sym->symbolForImpl->return->sym->baseSymbol
TreeInfo#symbolForImpl(JCTree)::: tree info symbol for impl:::skipParens->switch->node->getTag->cut->moduleDecl->cut->getModuleDecl->if->isModuleInfo->return->symbolFor->return->return->return->return->return->return->return->return->return->return->return->symbolFor->return->symbolFor->if->return->return->return
TreeInfo#isDeclaration(JCTree)::: tree info is declaration:::skipParens->switch->node->getTag->return->return
TreeInfo#symbol(JCTree):::If this tree is an identifier or a field, return its symbol,  otherwise return null.:::skipParens->switch->tree->getTag->return->return->return->symbol->return->symbol->return->return
TreeInfo#nonstaticSelect(JCTree):::Return true if this is a nonstatic selection.:::skipParens->if->tree->hasTag->return->s->e->symbol->return
TreeInfo#setSymbol(JCTree, Symbol):::If this tree is an identifier or a field, set its symbol, otherwise skip.:::skipParens->switch->tree->getTag->break->break
TreeInfo#flags(JCTree):::If this tree is a declaration or a block, return its flags field,  otherwise return 0.:::switch->tree->getTag->return->return->return->return->return
TreeInfo#firstFlag(long):::Return first (smallest) flag in `flags':  pre: flags != 0:::flag->while->return
TreeInfo#flagNames(long):::Return flags as a string, separated by " ".:::return->Flags->toString->trim
TreeInfo#opPrec(JCTree.Tag):::Map operators to their precedence levels.:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->throw->new->AssertionError
TreeInfo#tagToKind(JCTree.Tag)::: tree info tag to kind:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return
TreeInfo#typeIn(JCExpression):::Returns the underlying type of the tree if it is an annotated type, or the tree itself otherwise.:::switch->tree->getTag->return->return->throw->new->AssertionError
TreeInfo#innermostType(JCTree, boolean)::: tree info innermost type:::lastAnnotatedType->cur->while->switch->cur->getTag->break->break->break->break->if->return->else->return
TreeInfo.TypeAnnotationFinder#scan(JCTree)::: type annotation finder scan:::if->return->super->scan
TreeInfo.TypeAnnotationFinder#visitAnnotation(JCAnnotation)::: type annotation finder visit annotation:::tree->hasTag
TreeInfo#containsTypeAnnotation(JCTree)::: tree info contains type annotation:::finder->new->TypeAnnotationFinder->finder->scan->return
TreeInfo#isModuleInfo(JCCompilationUnit)::: tree info is module info:::return->isNameCompatible->tree->getModuleDecl
TreeInfo#getModule(JCCompilationUnit)::: tree info get module:::if->nonEmpty->def->if->def->hasTag->return->return
TreeInfo#isPackageInfo(JCCompilationUnit)::: tree info is package info:::return->isNameCompatible
TreeMaker#instance(Context):::Get the TreeMaker instance.:::instance->context->get->if->new->TreeMaker->return
TreeMaker#forToplevel(JCCompilationUnit):::Create a new tree maker for a given toplevel.:::return->new->TreeMaker
TreeMaker#at(int):::Reassign current position.:::return
TreeMaker#at(DiagnosticPosition):::Reassign current position.:::pos->getStartPosition->return
TreeMaker#TopLevel(List):::Create given tree node at current position.:::foreach->Assert->node->getClass->getSimpleName->check->tree->new->JCCompilationUnit->return
TreeMaker#PackageDecl PackageDecl(List, JCExpression)::: tree maker  package decl:::Assert->checkNonNull->Assert->checkNonNull->tree->new->JCPackageDecl->return
TreeMaker#Import Import(JCTree, boolean)::: tree maker  import:::tree->new->JCImport->return
TreeMaker#ClassDef(JCModifiers, Name, List, JCExpression, List, List)::: tree maker  class def:::tree->new->JCClassDecl->return
TreeMaker#MethodDef(JCModifiers, Name, JCExpression, List, List, List, JCBlock, JCExpression)::: tree maker  method def:::return->MethodDef
TreeMaker#MethodDef(JCModifiers, Name, JCExpression, List, JCVariableDecl, List, List, JCBlock, JCExpression)::: tree maker  method def:::tree->new->JCMethodDecl->return
TreeMaker#VarDef(JCModifiers, Name, JCExpression, JCExpression)::: tree maker  var def:::tree->new->JCVariableDecl->return
TreeMaker#ReceiverVarDef(JCModifiers, JCExpression, JCExpression)::: tree maker  receiver var def:::tree->new->JCVariableDecl->return
TreeMaker#Skip Skip()::: tree maker  skip:::tree->new->JCSkip->return
TreeMaker#Block Block(long, List)::: tree maker  block:::tree->new->JCBlock->return
TreeMaker#DoLoop(JCStatement, JCExpression)::: tree maker  do loop:::tree->new->JCDoWhileLoop->return
TreeMaker#WhileLoop WhileLoop(JCExpression, JCStatement)::: tree maker  while loop:::tree->new->JCWhileLoop->return
TreeMaker#ForLoop ForLoop(List, JCExpression, List, JCStatement)::: tree maker  for loop:::tree->new->JCForLoop->return
TreeMaker#ForeachLoop(JCVariableDecl, JCExpression, JCStatement)::: tree maker  foreach loop:::tree->new->JCEnhancedForLoop->return
TreeMaker#Labelled(Name, JCStatement)::: tree maker  labelled:::tree->new->JCLabeledStatement->return
TreeMaker#Switch Switch(JCExpression, List)::: tree maker  switch:::tree->new->JCSwitch->return
TreeMaker#Case Case(JCExpression, List)::: tree maker  case:::tree->new->JCCase->return
TreeMaker#Synchronized Synchronized(JCExpression, JCBlock)::: tree maker  synchronized:::tree->new->JCSynchronized->return
TreeMaker#Try Try(JCBlock, List, JCBlock)::: tree maker  try:::return->List->nil->Try
TreeMaker#Try Try(List, JCBlock, List, JCBlock)::: tree maker  try:::tree->new->JCTry->return
TreeMaker#Catch Catch(JCVariableDecl, JCBlock)::: tree maker  catch:::tree->new->JCCatch->return
TreeMaker#Conditional Conditional(JCExpression, JCExpression, JCExpression)::: tree maker  conditional:::tree->new->JCConditional->return
TreeMaker#If If(JCExpression, JCStatement, JCStatement)::: tree maker  if:::tree->new->JCIf->return
TreeMaker#Exec(JCExpression)::: tree maker  exec:::tree->new->JCExpressionStatement->return
TreeMaker#Break Break(Name)::: tree maker  break:::tree->new->JCBreak->return
TreeMaker#Continue Continue(Name)::: tree maker  continue:::tree->new->JCContinue->return
TreeMaker#Return Return(JCExpression)::: tree maker  return:::tree->new->JCReturn->return
TreeMaker#Throw Throw(JCExpression)::: tree maker  throw:::tree->new->JCThrow->return
TreeMaker#Assert Assert(JCExpression, JCExpression)::: tree maker  assert:::tree->new->JCAssert->return
TreeMaker#Apply(List, JCExpression, List)::: tree maker  apply:::tree->new->JCMethodInvocation->return
TreeMaker#NewClass NewClass(JCExpression, List, JCExpression, List, JCClassDecl)::: tree maker  new class:::tree->new->JCNewClass->return
TreeMaker#NewArray NewArray(JCExpression, List, List)::: tree maker  new array:::tree->new->JCNewArray->return
TreeMaker#Lambda Lambda(List, JCTree)::: tree maker  lambda:::tree->new->JCLambda->return
TreeMaker#Parens Parens(JCExpression)::: tree maker  parens:::tree->new->JCParens->return
TreeMaker#Assign Assign(JCExpression, JCExpression)::: tree maker  assign:::tree->new->JCAssign->return
TreeMaker#Assignop(JCTree.Tag, JCTree, JCTree)::: tree maker  assignop:::tree->new->JCAssignOp->return
TreeMaker#Unary Unary(JCTree.Tag, JCExpression)::: tree maker  unary:::tree->new->JCUnary->return
TreeMaker#Binary Binary(JCTree.Tag, JCExpression, JCExpression)::: tree maker  binary:::tree->new->JCBinary->return
TreeMaker#TypeCast TypeCast(JCTree, JCExpression)::: tree maker  type cast:::tree->new->JCTypeCast->return
TreeMaker#TypeTest(JCExpression, JCTree)::: tree maker  type test:::tree->new->JCInstanceOf->return
TreeMaker#Indexed(JCExpression, JCExpression)::: tree maker  indexed:::tree->new->JCArrayAccess->return
TreeMaker#Select(JCExpression, Name)::: tree maker  select:::tree->new->JCFieldAccess->return
TreeMaker#Reference Reference(JCMemberReference.ReferenceMode, Name, JCExpression, List)::: tree maker  reference:::tree->new->JCMemberReference->return
TreeMaker#Ident Ident(Name)::: tree maker  ident:::tree->new->JCIdent->return
TreeMaker#Literal Literal(TypeTag, Object)::: tree maker  literal:::tree->new->JCLiteral->return
TreeMaker#TypeIdent(TypeTag)::: tree maker  type ident:::tree->new->JCPrimitiveTypeTree->return
TreeMaker#TypeArray(JCExpression)::: tree maker  type array:::tree->new->JCArrayTypeTree->return
TreeMaker#TypeApply TypeApply(JCExpression, List)::: tree maker  type apply:::tree->new->JCTypeApply->return
TreeMaker#TypeUnion TypeUnion(List)::: tree maker  type union:::tree->new->JCTypeUnion->return
TreeMaker#TypeIntersection TypeIntersection(List)::: tree maker  type intersection:::tree->new->JCTypeIntersection->return
TreeMaker#TypeParameter TypeParameter(Name, List)::: tree maker  type parameter:::return->List->nil->TypeParameter
TreeMaker#TypeParameter TypeParameter(Name, List, List)::: tree maker  type parameter:::tree->new->JCTypeParameter->return
TreeMaker#Wildcard Wildcard(TypeBoundKind, JCTree)::: tree maker  wildcard:::tree->new->JCWildcard->return
TreeMaker#TypeBoundKind TypeBoundKind(BoundKind)::: tree maker  type bound kind:::tree->new->TypeBoundKind->return
TreeMaker#Annotation Annotation(JCTree, List)::: tree maker  annotation:::tree->new->JCAnnotation->return
TreeMaker#TypeAnnotation(JCTree, List)::: tree maker  type annotation:::tree->new->JCAnnotation->return
TreeMaker#Modifiers Modifiers(long, List)::: tree maker  modifiers:::tree->new->JCModifiers->noFlags->annotations->isEmpty->return
TreeMaker#Modifiers Modifiers(long)::: tree maker  modifiers:::return->List->nil->Modifiers
TreeMaker#ModuleDef(JCModifiers, ModuleKind, JCExpression, List)::: tree maker  module def:::tree->new->JCModuleDecl->return
TreeMaker#Exports Exports(JCExpression, List)::: tree maker  exports:::tree->new->JCExports->return
TreeMaker#Opens Opens(JCExpression, List)::: tree maker  opens:::tree->new->JCOpens->return
TreeMaker#Provides Provides(JCExpression, List)::: tree maker  provides:::tree->new->JCProvides->return
TreeMaker#Requires Requires(boolean, boolean, JCExpression)::: tree maker  requires:::tree->new->JCRequires->return
TreeMaker#Uses Uses(JCExpression)::: tree maker  uses:::tree->new->JCUses->return
TreeMaker#AnnotatedType AnnotatedType(List, JCExpression)::: tree maker  annotated type:::tree->new->JCAnnotatedType->return
TreeMaker#Erroneous Erroneous()::: tree maker  erroneous:::return->List->nil->Erroneous
TreeMaker#Erroneous Erroneous(List)::: tree maker  erroneous:::tree->new->JCErroneous->return
TreeMaker#LetExpr LetExpr(List, JCExpression)::: tree maker  let expr:::tree->new->LetExpr->return
TreeMaker#AnonymousClassDef(JCModifiers, List)::: tree maker  anonymous class def:::return->List->nil->List->nil->ClassDef
TreeMaker#LetExpr LetExpr(JCVariableDecl, JCExpression)::: tree maker  let expr:::tree->List->of->new->LetExpr->return
TreeMaker#Ident Ident(Symbol):::Create an identifier from a symbol.:::return->sym->flatName->new->JCIdent->setPos->setType
TreeMaker#Select(JCExpression, Symbol):::Create a selection node from a qualifier tree and a symbol.:::return->new->JCFieldAccess->setPos->setType
TreeMaker#QualIdent(Symbol):::Create a qualified identifier from a symbol, adding enough qualifications  to make the reference unique.:::return->isUnqualifiable->Ident->QualIdent->Select
TreeMaker#Ident(JCVariableDecl):::Create an identifier that refers to the variable declared in given variable  declaration.:::return->Ident
TreeMaker#Idents(List):::Create a list of identifiers referring to the variables declared  in given list of variable declarations.:::ids->new->ListBuffer<>->for->l->l->nonEmpty->return->ids->toList
TreeMaker#This(Type):::Create a tree representing `this', given its type.:::return->new->VarSymbol->Ident
TreeMaker#QualThis(Type):::Create a tree representing qualified `this' given its type:::return->Type->new->VarSymbol->Select
TreeMaker#ClassLiteral(ClassSymbol):::Create a tree representing a class literal.:::return->ClassLiteral
TreeMaker#ClassLiteral(Type):::Create a tree representing a class literal.:::lit->new->VarSymbol->return->Type->Select
TreeMaker#Super(Type, TypeSymbol):::Create a tree representing `super', given its type and owner.:::return->new->VarSymbol->Ident
TreeMaker#App(JCExpression, List):::Create a method invocation from a method tree and a list of argument trees.:::return->Apply->getReturnType->setType
TreeMaker#App(JCExpression):::Create a no-arg method invocation from a method tree:::return->List->nil->Apply->getReturnType->setType
TreeMaker#Create(Symbol, List):::Create a method invocation from a method tree and a list of argument trees.:::t->erasure->newclass->Type->NewClass->newclass->setType->return
TreeMaker#Type(Type):::Create a tree representing given type.:::if->return->tp->switch->t->getTag->t->getTag->TypeIdent->break->Ident->break->a->TypeBoundKind->Type->Wildcard->break->switch->t->getKind->tu->la->new->ListBuffer<>->foreach->tu->getAlternativeTypes->la->Type->add->la->toList->TypeUnion->break->it->la->new->ListBuffer<>->foreach->it->getExplicitComponents->la->Type->add->la->toList->TypeIntersection->break->outer->t->getEnclosingType->clazz->outer->hasTag->Type->Select->QualIdent->t->getTypeArguments->isEmpty->t->getTypeArguments->Types->TypeApply->break->break->types->elemtype->Type->TypeArray->break->TypeIdent->break->throw->new->AssertionError->return->tp->setType
TreeMaker#Types(List):::Create a list of trees representing given list of types.:::lb->new->ListBuffer<>->for->l->l->nonEmpty->return->lb->toList
TreeMaker#VarDef(VarSymbol, JCExpression):::Create a variable definition from a variable symbol and an initializer  expression.:::return->v->flags->v->getRawAttributes->Annotations->Modifiers->Type->new->JCVariableDecl->setPos->setType
TreeMaker#Annotations(List):::Create annotation trees from annotations.:::if->return->List->nil->result->new->ListBuffer<>->for->i->i->nonEmpty->return->result->toList
TreeMaker#Literal Literal(Object)::: tree maker  literal:::result->if->Literal->constType->setType->else->if->Literal->constType->setType->else->if->Literal->constType->setType->else->if->Literal->constType->setType->else->if->v->toString->charAt->Literal->constType->setType->else->if->Literal->constType->setType->else->if->Literal->constType->setType->else->if->Literal->constType->setType->else->if->v->Literal->constType->setType->else->throw->new->AssertionError->return
TreeMaker.AnnotationBuilder#visitConstant(Attribute.Constant)::: annotation builder visit constant:::getTag->Literal
TreeMaker.AnnotationBuilder#visitClass(Attribute.Class)::: annotation builder visit class:::ClassLiteral->setType
TreeMaker.AnnotationBuilder#visitEnum(Attribute.Enum)::: annotation builder visit enum:::QualIdent
TreeMaker.AnnotationBuilder#visitError(Attribute.Error)::: annotation builder visit error:::if->ClassLiteral->setType->else->Erroneous
TreeMaker.AnnotationBuilder#visitCompound(Attribute.Compound)::: annotation builder visit compound:::if->visitTypeCompoundInternal->else->visitCompoundInternal
TreeMaker.AnnotationBuilder#visitCompoundInternal(Attribute.Compound)::: annotation builder visit compound internal:::args->new->ListBuffer<>->for->values->values->nonEmpty->return->Type->args->toList->Annotation
TreeMaker.AnnotationBuilder#visitTypeCompoundInternal(Attribute.TypeCompound)::: annotation builder visit type compound internal:::args->new->ListBuffer<>->for->values->values->nonEmpty->return->Type->args->toList->TypeAnnotation
TreeMaker.AnnotationBuilder#visitArray(Attribute.Array)::: annotation builder visit array:::elems->new->ListBuffer<>->for->i->List->nil->elems->toList->NewArray->setType
TreeMaker.AnnotationBuilder#translate(Attribute)::: annotation builder translate:::a->accept->return
TreeMaker.AnnotationBuilder#translate(Attribute.Compound)::: annotation builder translate:::return->visitCompoundInternal
TreeMaker.AnnotationBuilder#translate(Attribute.TypeCompound)::: annotation builder translate:::return->visitTypeCompoundInternal
TreeMaker#Annotation Annotation(Attribute):::Create an annotation tree from an attribute.:::return->annotationBuilder->translate
TreeMaker#TypeAnnotation(Attribute)::: tree maker  type annotation:::return->annotationBuilder->translate
TreeMaker#MethodDef(MethodSymbol, JCBlock):::Create a method definition from a method symbol and a method body.:::return->MethodDef
TreeMaker#MethodDef(MethodSymbol, Type, JCBlock):::Create a method definition from a method symbol, method type  and a method body.:::return->m->flags->m->getRawAttributes->Annotations->Modifiers->mtype->getReturnType->Type->mtype->getTypeArguments->TypeParams->mtype->getParameterTypes->Params->mtype->getThrownTypes->Types->new->JCMethodDecl->setPos->setType
TreeMaker#TypeParameter TypeParam(Name, TypeVar):::Create a type parameter tree from its name and type.:::return->types->getBounds->Types->TypeParameter->setPos->setType
TreeMaker#TypeParams(List):::Create a list of type parameter trees from a list of type variables.:::tparams->new->ListBuffer<>->for->l->l->nonEmpty->return->tparams->toList
TreeMaker#Param(Name, Type, Symbol):::Create a value parameter tree from its name, type, and owner.:::return->new->VarSymbol->VarDef
TreeMaker#Params(List, Symbol):::Create a a list of value parameter trees x0, ..., xn from a list of  their types and an their owner.:::params->new->ListBuffer<>->mth->if->argtypes->length->length->foreach->params->VarDef->append->else->i->for->l->l->nonEmpty->return->params->toList
TreeMaker#Call(JCExpression):::Wrap a method invocation in an expression statement or return statement,  depending on whether the method invocation expression's type is void.:::return->hasTag->Exec->Return
TreeMaker#Assignment(Symbol, JCExpression):::Construct an assignment from a variable symbol and a right hand side.:::return->Ident->Assign->setType->Exec
TreeMaker#Indexed(Symbol, JCExpression):::Construct an index expression from a variable and an expression.:::tree->QualIdent->new->JCArrayAccess->return
TreeMaker#TypeCast TypeCast(Type, JCExpression):::Make an attributed type cast expression.:::return->Type->TypeCast->setType
TreeMaker#isUnqualifiable(Symbol):::Can given symbol be referred to in unqualified form?:::if->return->else->if->it->getSymbolsByName->iterator->if->it->hasNext->s->it->next->return->it->hasNext->members->getSymbolsByName->iterator->if->it->hasNext->s->it->next->return->it->hasNext->getSymbolsByName->iterator->if->it->hasNext->s->it->next->return->it->hasNext->return
TreeMaker#paramName(int):::The name of synthetic parameter number `i'.:::return->names->fromString
TreeMaker#typaramName(int):::The name of synthetic type parameter number `i'.:::return->names->fromString
TreeScanner#scan(JCTree):::Visitor method: Scan a single node.:::if->tree->accept
TreeScanner#scan(List):::Visitor method: scan a list of nodes.:::if->for->l->l->nonEmpty
TreeScanner#visitTopLevel(JCCompilationUnit)::: tree scanner visit top level:::scan
TreeScanner#visitPackageDef(JCPackageDecl)::: tree scanner visit package def:::scan->scan
TreeScanner#visitModuleDef(JCModuleDecl)::: tree scanner visit module def:::scan->scan->scan
TreeScanner#visitExports(JCExports)::: tree scanner visit exports:::scan->scan
TreeScanner#visitOpens(JCOpens)::: tree scanner visit opens:::scan->scan
TreeScanner#visitProvides(JCProvides)::: tree scanner visit provides:::scan->scan
TreeScanner#visitRequires(JCRequires)::: tree scanner visit requires:::scan
TreeScanner#visitUses(JCUses)::: tree scanner visit uses:::scan
TreeScanner#visitImport(JCImport)::: tree scanner visit import:::scan
TreeScanner#visitClassDef(JCClassDecl)::: tree scanner visit class def:::scan->scan->scan->scan->scan
TreeScanner#visitMethodDef(JCMethodDecl)::: tree scanner visit method def:::scan->scan->scan->scan->scan->scan->scan->scan
TreeScanner#visitVarDef(JCVariableDecl)::: tree scanner visit var def:::scan->scan->scan->scan
TreeScanner#visitSkip(JCSkip)::: tree scanner visit skip:::
TreeScanner#visitBlock(JCBlock)::: tree scanner visit block:::scan
TreeScanner#visitDoLoop(JCDoWhileLoop)::: tree scanner visit do loop:::scan->scan
TreeScanner#visitWhileLoop(JCWhileLoop)::: tree scanner visit while loop:::scan->scan
TreeScanner#visitForLoop(JCForLoop)::: tree scanner visit for loop:::scan->scan->scan->scan
TreeScanner#visitForeachLoop(JCEnhancedForLoop)::: tree scanner visit foreach loop:::scan->scan->scan
TreeScanner#visitLabelled(JCLabeledStatement)::: tree scanner visit labelled:::scan
TreeScanner#visitSwitch(JCSwitch)::: tree scanner visit switch:::scan->scan
TreeScanner#visitCase(JCCase)::: tree scanner visit case:::scan->scan
TreeScanner#visitSynchronized(JCSynchronized)::: tree scanner visit synchronized:::scan->scan
TreeScanner#visitTry(JCTry)::: tree scanner visit try:::scan->scan->scan->scan
TreeScanner#visitCatch(JCCatch)::: tree scanner visit catch:::scan->scan
TreeScanner#visitConditional(JCConditional)::: tree scanner visit conditional:::scan->scan->scan
TreeScanner#visitIf(JCIf)::: tree scanner visit if:::scan->scan->scan
TreeScanner#visitExec(JCExpressionStatement)::: tree scanner visit exec:::scan
TreeScanner#visitBreak(JCBreak)::: tree scanner visit break:::
TreeScanner#visitContinue(JCContinue)::: tree scanner visit continue:::
TreeScanner#visitReturn(JCReturn)::: tree scanner visit return:::scan
TreeScanner#visitThrow(JCThrow)::: tree scanner visit throw:::scan
TreeScanner#visitAssert(JCAssert)::: tree scanner visit assert:::scan->scan
TreeScanner#visitApply(JCMethodInvocation)::: tree scanner visit apply:::scan->scan->scan
TreeScanner#visitNewClass(JCNewClass)::: tree scanner visit new class:::scan->scan->scan->scan->scan
TreeScanner#visitNewArray(JCNewArray)::: tree scanner visit new array:::scan->scan->scan->foreach->scan->scan
TreeScanner#visitLambda(JCLambda)::: tree scanner visit lambda:::scan->scan
TreeScanner#visitParens(JCParens)::: tree scanner visit parens:::scan
TreeScanner#visitAssign(JCAssign)::: tree scanner visit assign:::scan->scan
TreeScanner#visitAssignop(JCAssignOp)::: tree scanner visit assignop:::scan->scan
TreeScanner#visitUnary(JCUnary)::: tree scanner visit unary:::scan
TreeScanner#visitBinary(JCBinary)::: tree scanner visit binary:::scan->scan
TreeScanner#visitTypeCast(JCTypeCast)::: tree scanner visit type cast:::scan->scan
TreeScanner#visitTypeTest(JCInstanceOf)::: tree scanner visit type test:::scan->scan
TreeScanner#visitIndexed(JCArrayAccess)::: tree scanner visit indexed:::scan->scan
TreeScanner#visitSelect(JCFieldAccess)::: tree scanner visit select:::scan
TreeScanner#visitReference(JCMemberReference)::: tree scanner visit reference:::scan->scan
TreeScanner#visitIdent(JCIdent)::: tree scanner visit ident:::
TreeScanner#visitLiteral(JCLiteral)::: tree scanner visit literal:::
TreeScanner#visitTypeIdent(JCPrimitiveTypeTree)::: tree scanner visit type ident:::
TreeScanner#visitTypeArray(JCArrayTypeTree)::: tree scanner visit type array:::scan
TreeScanner#visitTypeApply(JCTypeApply)::: tree scanner visit type apply:::scan->scan
TreeScanner#visitTypeUnion(JCTypeUnion)::: tree scanner visit type union:::scan
TreeScanner#visitTypeIntersection(JCTypeIntersection)::: tree scanner visit type intersection:::scan
TreeScanner#visitTypeParameter(JCTypeParameter)::: tree scanner visit type parameter:::scan->scan
TreeScanner#visitWildcard(JCWildcard)::: tree scanner visit wildcard:::scan->if->scan
TreeScanner#visitTypeBoundKind(TypeBoundKind)::: tree scanner visit type bound kind:::
TreeScanner#visitModifiers(JCModifiers)::: tree scanner visit modifiers:::scan
TreeScanner#visitAnnotation(JCAnnotation)::: tree scanner visit annotation:::scan->scan
TreeScanner#visitAnnotatedType(JCAnnotatedType)::: tree scanner visit annotated type:::scan->scan
TreeScanner#visitErroneous(JCErroneous)::: tree scanner visit erroneous:::
TreeScanner#visitLetExpr(LetExpr)::: tree scanner visit let expr:::scan->scan
TreeScanner#visitTree(JCTree)::: tree scanner visit tree:::Assert->error
TreeTranslator#translate(T):::Visitor method: Translate a single node.:::if->return->else->tree->accept->tmpResult->return
TreeTranslator#translate(List):::Visitor method: translate a list of nodes.:::if->return->for->l->l->nonEmpty->return
TreeTranslator#translateVarDefs(List)::: Visitor method: translate a list of variable definitions.:::for->l->l->nonEmpty->return
TreeTranslator#translateTypeParams(List)::: Visitor method: translate a list of type parameters.:::for->l->l->nonEmpty->return
TreeTranslator#translateCases(List)::: Visitor method: translate a list of case parts of switch statements.:::for->l->l->nonEmpty->return
TreeTranslator#translateCatchers(List)::: Visitor method: translate a list of catch clauses in try statements.:::for->l->l->nonEmpty->return
TreeTranslator#translateAnnotations(List)::: Visitor method: translate a list of catch clauses in try statements.:::for->l->l->nonEmpty->return
TreeTranslator#visitTopLevel(JCCompilationUnit)::: tree translator visit top level:::translate
TreeTranslator#visitPackageDef(JCPackageDecl)::: tree translator visit package def:::translate->translate
TreeTranslator#visitImport(JCImport)::: tree translator visit import:::translate
TreeTranslator#visitClassDef(JCClassDecl)::: tree translator visit class def:::translate->translateTypeParams->translate->translate->translate
TreeTranslator#visitMethodDef(JCMethodDecl)::: tree translator visit method def:::translate->translate->translateTypeParams->translate->translateVarDefs->translate->translate
TreeTranslator#visitVarDef(JCVariableDecl)::: tree translator visit var def:::translate->translate->translate->translate
TreeTranslator#visitSkip(JCSkip)::: tree translator visit skip:::
TreeTranslator#visitBlock(JCBlock)::: tree translator visit block:::translate
TreeTranslator#visitDoLoop(JCDoWhileLoop)::: tree translator visit do loop:::translate->translate
TreeTranslator#visitWhileLoop(JCWhileLoop)::: tree translator visit while loop:::translate->translate
TreeTranslator#visitForLoop(JCForLoop)::: tree translator visit for loop:::translate->translate->translate->translate
TreeTranslator#visitForeachLoop(JCEnhancedForLoop)::: tree translator visit foreach loop:::translate->translate->translate
TreeTranslator#visitLabelled(JCLabeledStatement)::: tree translator visit labelled:::translate
TreeTranslator#visitSwitch(JCSwitch)::: tree translator visit switch:::translate->translateCases
TreeTranslator#visitCase(JCCase)::: tree translator visit case:::translate->translate
TreeTranslator#visitSynchronized(JCSynchronized)::: tree translator visit synchronized:::translate->translate
TreeTranslator#visitTry(JCTry)::: tree translator visit try:::translate->translate->translateCatchers->translate
TreeTranslator#visitCatch(JCCatch)::: tree translator visit catch:::translate->translate
TreeTranslator#visitConditional(JCConditional)::: tree translator visit conditional:::translate->translate->translate
TreeTranslator#visitIf(JCIf)::: tree translator visit if:::translate->translate->translate
TreeTranslator#visitExec(JCExpressionStatement)::: tree translator visit exec:::translate
TreeTranslator#visitBreak(JCBreak)::: tree translator visit break:::
TreeTranslator#visitContinue(JCContinue)::: tree translator visit continue:::
TreeTranslator#visitReturn(JCReturn)::: tree translator visit return:::translate
TreeTranslator#visitThrow(JCThrow)::: tree translator visit throw:::translate
TreeTranslator#visitAssert(JCAssert)::: tree translator visit assert:::translate->translate
TreeTranslator#visitApply(JCMethodInvocation)::: tree translator visit apply:::translate->translate
TreeTranslator#visitNewClass(JCNewClass)::: tree translator visit new class:::translate->translate->translate->translate
TreeTranslator#visitLambda(JCLambda)::: tree translator visit lambda:::translate->translate
TreeTranslator#visitNewArray(JCNewArray)::: tree translator visit new array:::translate->dimAnnos->List->nil->foreach->dimAnnos->translate->append->translate->translate->translate
TreeTranslator#visitParens(JCParens)::: tree translator visit parens:::translate
TreeTranslator#visitAssign(JCAssign)::: tree translator visit assign:::translate->translate
TreeTranslator#visitAssignop(JCAssignOp)::: tree translator visit assignop:::translate->translate
TreeTranslator#visitUnary(JCUnary)::: tree translator visit unary:::translate
TreeTranslator#visitBinary(JCBinary)::: tree translator visit binary:::translate->translate
TreeTranslator#visitTypeCast(JCTypeCast)::: tree translator visit type cast:::translate->translate
TreeTranslator#visitTypeTest(JCInstanceOf)::: tree translator visit type test:::translate->translate
TreeTranslator#visitIndexed(JCArrayAccess)::: tree translator visit indexed:::translate->translate
TreeTranslator#visitSelect(JCFieldAccess)::: tree translator visit select:::translate
TreeTranslator#visitReference(JCMemberReference)::: tree translator visit reference:::translate
TreeTranslator#visitIdent(JCIdent)::: tree translator visit ident:::
TreeTranslator#visitLiteral(JCLiteral)::: tree translator visit literal:::
TreeTranslator#visitTypeIdent(JCPrimitiveTypeTree)::: tree translator visit type ident:::
TreeTranslator#visitTypeArray(JCArrayTypeTree)::: tree translator visit type array:::translate
TreeTranslator#visitTypeApply(JCTypeApply)::: tree translator visit type apply:::translate->translate
TreeTranslator#visitTypeUnion(JCTypeUnion)::: tree translator visit type union:::translate
TreeTranslator#visitTypeIntersection(JCTypeIntersection)::: tree translator visit type intersection:::translate
TreeTranslator#visitTypeParameter(JCTypeParameter)::: tree translator visit type parameter:::translate->translate
TreeTranslator#visitWildcard(JCWildcard)::: tree translator visit wildcard:::translate->translate
TreeTranslator#visitTypeBoundKind(TypeBoundKind)::: tree translator visit type bound kind:::
TreeTranslator#visitErroneous(JCErroneous)::: tree translator visit erroneous:::
TreeTranslator#visitLetExpr(LetExpr)::: tree translator visit let expr:::translateVarDefs->translate
TreeTranslator#visitModifiers(JCModifiers)::: tree translator visit modifiers:::translateAnnotations
TreeTranslator#visitAnnotation(JCAnnotation)::: tree translator visit annotation:::translate->translate
TreeTranslator#visitAnnotatedType(JCAnnotatedType)::: tree translator visit annotated type:::translate->translate
TreeTranslator#visitTree(JCTree)::: tree translator visit tree:::throw->new->AssertionError

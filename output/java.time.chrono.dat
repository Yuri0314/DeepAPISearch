AbstractChronology#registerChrono(Chronology):::Register a Chronology by its ID and type for lookup by #of(String):::chrono.getId->this.registerChrono
AbstractChronology#registerChrono(Chronology, String):::Register a Chronology by ID and type for lookup by #of(String):::CHRONOS_BY_ID.putIfAbsent->chrono.getCalendarType->CHRONOS_BY_TYPE.putIfAbsent
AbstractChronology#ofLocale(Locale):::Obtains an instance of Chronology from a locale:::Objects.requireNonNull->locale.getUnicodeLocaleType->"iso".equals->"iso8601".equals->CHRONOS_BY_TYPE.get->this.initCache->ServiceLoader.load->chrono.getCalendarType->type.equals
AbstractChronology#of(String):::Obtains an instance of Chronology from a chronology ID or calendar system type:::Objects.requireNonNull->this.of0->this.initCache->ServiceLoader.load->chrono.getId->id.equals->chrono.getCalendarType->id.equals
AbstractChronology#getAvailableChronologies():::Returns the available chronologies:::this.initCache->CHRONOS_BY_ID.values->ServiceLoader.load->chronos.add
AbstractChronology#resolveDate(Map, ResolverStyle):::Resolves parsed ChronoField values into a date during parsing:::fieldValues.containsKey->fieldValues.remove->this.dateEpochDay->this.resolveProlepticMonth->this.resolveYearOfEra->fieldValues.containsKey->fieldValues.containsKey->fieldValues.containsKey->this.resolveYMD->fieldValues.containsKey->fieldValues.containsKey->this.resolveYMAA->fieldValues.containsKey->this.resolveYMAD->fieldValues.containsKey->this.resolveYD->fieldValues.containsKey->fieldValues.containsKey->this.resolveYAA->fieldValues.containsKey->this.resolveYAD
AbstractChronology#addFieldValue(Map, ChronoField, long):::Adds a field-value pair to the map, checking for conflicts:::fieldValues.get->old.longValue->fieldValues.put
AbstractChronology#compareTo(Chronology):::Compares this chronology to another chronology:::other.getId->getId().compareTo
AbstractChronology#equals(Object):::Checks if this chronology is equal to another chronology:::this.compareTo
AbstractChronology#hashCode():::A hash code for this chronology:::getClass().hashCode->getId().hashCode
AbstractChronology#toString():::Outputs this chronology as a String, using the chronology ID.:::this.getId
AbstractChronology#writeReplace():::Writes the Chronology using a dedicated serialized form:::
ChronoLocalDate#timeLineOrder():::Gets a comparator that compares ChronoLocalDate in time-line order ignoring the chronology:::date1.toEpochDay->date2.toEpochDay->Long.compare
ChronoLocalDate#from(TemporalAccessor):::Obtains an instance of ChronoLocalDate from a temporal object:::Objects.requireNonNull->TemporalQueries.chronology->temporal.query->temporal.getClass->chrono.date
ChronoLocalDate#getChronology():::Gets the chronology of this date:::
ChronoLocalDate#getEra():::Gets the era, as defined by the chronology:::this.get->getChronology().eraOf
ChronoLocalDate#isLeapYear():::Checks if the year is a leap year, as defined by the calendar system:::this.getLong->getChronology().isLeapYear
ChronoLocalDate#lengthOfMonth():::Returns the length of the month represented by this date, as defined by the calendar system:::
ChronoLocalDate#lengthOfYear():::Returns the length of the year represented by this date, as defined by the calendar system:::this.isLeapYear
ChronoLocalDate#isSupported(TemporalField):::Checks if the specified field is supported:::field.isDateBased->field.isSupportedBy
ChronoLocalDate#isSupported(TemporalUnit):::Checks if the specified unit is supported:::unit.isDateBased->unit.isSupportedBy
ChronoLocalDate#query(TemporalQuery):::Queries this date using the specified query:::TemporalQueries.zoneId->TemporalQueries.zone->TemporalQueries.offset->TemporalQueries.localTime->TemporalQueries.chronology->TemporalQueries.precision->this.getChronology->query.queryFrom
ChronoLocalDate#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date as this object:::this.toEpochDay->temporal.with
ChronoLocalDate#until(Temporal, TemporalUnit):::Calculates the amount of time until another date in terms of the specified unit:::
ChronoLocalDate#until(ChronoLocalDate):::Calculates the period between this date and another date as a ChronoPeriod:::
ChronoLocalDate#format(DateTimeFormatter):::Formats this date using the specified formatter:::Objects.requireNonNull->formatter.format
ChronoLocalDate#atTime(LocalTime):::Combines this date with a time to create a ChronoLocalDateTime:::ChronoLocalDateTimeImpl.of
ChronoLocalDate#toEpochDay():::Converts this date to the Epoch Day:::this.getLong
ChronoLocalDate#compareTo(ChronoLocalDate):::Compares this date to another date, including the chronology:::this.toEpochDay->other.toEpochDay->Long.compare->other.getChronology->getChronology().compareTo
ChronoLocalDate#isAfter(ChronoLocalDate):::Checks if this date is after the specified date ignoring the chronology:::this.toEpochDay->other.toEpochDay
ChronoLocalDate#isBefore(ChronoLocalDate):::Checks if this date is before the specified date ignoring the chronology:::this.toEpochDay->other.toEpochDay
ChronoLocalDate#isEqual(ChronoLocalDate):::Checks if this date is equal to the specified date ignoring the chronology:::this.toEpochDay->other.toEpochDay
ChronoLocalDate#equals(Object):::Checks if this date is equal to another date, including the chronology:::
ChronoLocalDate#hashCode():::A hash code for this date.:::
ChronoLocalDate#toString():::Outputs this date as a String:::
ChronoLocalDateImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoLocalDate ensuring it bas the specified chronology.:::other.getChronology->chrono.equals->chrono.getId->other.getChronology().getId
ChronoLocalDateImpl#plusYears(long):::Returns a copy of this date with the specified number of years added:::
ChronoLocalDateImpl#plusMonths(long):::Returns a copy of this date with the specified number of months added:::
ChronoLocalDateImpl#plusWeeks(long):::Returns a copy of this date with the specified number of weeks added:::Math.multiplyExact->this.plusDays
ChronoLocalDateImpl#plusDays(long):::Returns a copy of this date with the specified number of days added:::
ChronoLocalDateImpl#minusYears(long):::Returns a copy of this date with the specified number of years subtracted:::this.plusYears->((ChronoLocalDateImpl<D>) plusYears(Long.MAX_VALUE)).plusYears
ChronoLocalDateImpl#minusMonths(long):::Returns a copy of this date with the specified number of months subtracted:::this.plusMonths->((ChronoLocalDateImpl<D>) plusMonths(Long.MAX_VALUE)).plusMonths
ChronoLocalDateImpl#minusWeeks(long):::Returns a copy of this date with the specified number of weeks subtracted:::this.plusWeeks->((ChronoLocalDateImpl<D>) plusWeeks(Long.MAX_VALUE)).plusWeeks
ChronoLocalDateImpl#minusDays(long):::Returns a copy of this date with the specified number of days subtracted:::this.plusDays->((ChronoLocalDateImpl<D>) plusDays(Long.MAX_VALUE)).plusDays
ChronoLocalDateTime#timeLineOrder():::Gets a comparator that compares ChronoLocalDateTime in time-line order ignoring the chronology:::dateTime1.toLocalDate().toEpochDay->dateTime2.toLocalDate().toEpochDay->Long.compare->dateTime1.toLocalTime().toNanoOfDay->dateTime2.toLocalTime().toNanoOfDay->Long.compare
ChronoLocalDateTime#from(TemporalAccessor):::Obtains an instance of ChronoLocalDateTime from a temporal object:::Objects.requireNonNull->TemporalQueries.chronology->temporal.query->temporal.getClass->chrono.localDateTime
ChronoLocalDateTime#getChronology():::Gets the chronology of this date-time:::toLocalDate().getChronology
ChronoLocalDateTime#toLocalDate():::Gets the local date part of this date-time:::
ChronoLocalDateTime#toLocalTime():::Gets the local time part of this date-time:::
ChronoLocalDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::
ChronoLocalDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::unit.isSupportedBy
ChronoLocalDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::TemporalQueries.zoneId->TemporalQueries.zone->TemporalQueries.offset->TemporalQueries.localTime->TemporalQueries.chronology->TemporalQueries.precision->this.getChronology->this.toLocalTime->query.queryFrom
ChronoLocalDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date and time as this object:::toLocalTime().toNanoOfDay->temporal.with(EPOCH_DAY, toLocalDate().toEpochDay()).with
ChronoLocalDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects.requireNonNull->formatter.format
ChronoLocalDateTime#atZone(ZoneId):::Combines this time with a time-zone to create a ChronoZonedDateTime:::
ChronoLocalDateTime#toInstant(ZoneOffset):::Converts this date-time to an Instant:::this.toEpochSecond->toLocalTime().getNano->Instant.ofEpochSecond
ChronoLocalDateTime#toEpochSecond(ZoneOffset):::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z:::Objects.requireNonNull->toLocalDate().toEpochDay->toLocalTime().toSecondOfDay->offset.getTotalSeconds
ChronoLocalDateTime#compareTo(ChronoLocalDateTime):::Compares this date-time to another date-time, including the chronology:::other.toLocalDate->toLocalDate().compareTo->other.toLocalTime->toLocalTime().compareTo->other.getChronology->getChronology().compareTo
ChronoLocalDateTime#isAfter(ChronoLocalDateTime):::Checks if this date-time is after the specified date-time ignoring the chronology:::this.toLocalDate().toEpochDay->other.toLocalDate().toEpochDay->this.toLocalTime().toNanoOfDay->other.toLocalTime().toNanoOfDay
ChronoLocalDateTime#isBefore(ChronoLocalDateTime):::Checks if this date-time is before the specified date-time ignoring the chronology:::this.toLocalDate().toEpochDay->other.toLocalDate().toEpochDay->this.toLocalTime().toNanoOfDay->other.toLocalTime().toNanoOfDay
ChronoLocalDateTime#isEqual(ChronoLocalDateTime):::Checks if this date-time is equal to the specified date-time ignoring the chronology:::this.toLocalTime().toNanoOfDay->other.toLocalTime().toNanoOfDay->this.toLocalDate().toEpochDay->other.toLocalDate().toEpochDay
ChronoLocalDateTime#equals(Object):::Checks if this date-time is equal to another date-time, including the chronology:::
ChronoLocalDateTime#hashCode():::A hash code for this date-time.:::
ChronoLocalDateTime#toString():::Outputs this date-time as a String:::
ChronoLocalDateTimeImpl#of(R, LocalTime):::Obtains an instance of ChronoLocalDateTime from a date and time.:::
ChronoLocalDateTimeImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoLocalDateTime ensuring it bas the specified chronology.:::other.getChronology->chrono.equals->chrono.getId->other.getChronology().getId
Chronology#from(TemporalAccessor):::Obtains an instance of Chronology from a temporal object:::Objects.requireNonNull->TemporalQueries.chronology->temporal.query->Objects.requireNonNullElse
Chronology#ofLocale(Locale):::Obtains an instance of Chronology from a locale:::AbstractChronology.ofLocale
Chronology#of(String):::Obtains an instance of Chronology from a chronology ID or calendar system type:::AbstractChronology.of
Chronology#getAvailableChronologies():::Returns the available chronologies:::AbstractChronology.getAvailableChronologies
Chronology#getId():::Gets the ID of the chronology:::
Chronology#getCalendarType():::Gets the calendar type of the calendar system:::
Chronology#date(Era, int, int, int):::Obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields.:::this.prolepticYear->this.date
Chronology#date(int, int, int):::Obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields.:::
Chronology#dateYearDay(Era, int, int):::Obtains a local date in this chronology from the era, year-of-era and day-of-year fields.:::this.prolepticYear->this.dateYearDay
Chronology#dateYearDay(int, int):::Obtains a local date in this chronology from the proleptic-year and day-of-year fields.:::
Chronology#dateEpochDay(long):::Obtains a local date in this chronology from the epoch-day:::
Chronology#dateNow():::Obtains the current local date in this chronology from the system clock in the default time-zone:::Clock.systemDefaultZone->this.dateNow
Chronology#dateNow(ZoneId):::Obtains the current local date in this chronology from the system clock in the specified time-zone:::Clock.system->this.dateNow
Chronology#dateNow(Clock):::Obtains the current local date in this chronology from the specified clock:::Objects.requireNonNull->LocalDate.now->this.date
Chronology#date(TemporalAccessor):::Obtains a local date in this chronology from another temporal object:::
Chronology#localDateTime(TemporalAccessor):::Obtains a local date-time in this chronology from another temporal object:::temporal.getClass->LocalTime.from->date(temporal).atTime
Chronology#zonedDateTime(TemporalAccessor):::Obtains a ChronoZonedDateTime in this chronology from another temporal object:::temporal.getClass->ZoneId.from->this.localDateTime->ChronoLocalDateTimeImpl.ensureValid->ChronoZonedDateTimeImpl.ofBest->Instant.from->this.zonedDateTime
Chronology#zonedDateTime(Instant, ZoneId):::Obtains a ChronoZonedDateTime in this chronology from an Instant:::ChronoZonedDateTimeImpl.ofInstant
Chronology#isLeapYear(long):::Checks if the specified year is a leap year:::
Chronology#prolepticYear(Era, int):::Calculates the proleptic-year given the era and year-of-era:::
Chronology#eraOf(int):::Creates the chronology era object from the numeric value:::
Chronology#eras():::Gets the list of eras for the chronology:::
Chronology#range(ChronoField):::Gets the range of valid values for the specified field:::
Chronology#getDisplayName(TextStyle, Locale):::Gets the textual representation of this chronology:::TemporalQueries.chronology->TemporalAccessor.super.query->new DateTimeFormatterBuilder().appendChronologyText(style).toFormatter(locale).format
Chronology#resolveDate(Map, ResolverStyle):::Resolves parsed ChronoField values into a date during parsing:::
Chronology#period(int, int, int):::Obtains a period for this chronology based on years, months and days:::
Chronology#epochSecond(int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z:::Objects.requireNonNull->HOUR_OF_DAY.checkValidValue->MINUTE_OF_HOUR.checkValidValue->SECOND_OF_MINUTE.checkValidValue->date(prolepticYear, month, dayOfMonth).toEpochDay->Math.multiplyExact->zoneOffset.getTotalSeconds->Math.addExact
Chronology#epochSecond(Era, int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z:::Objects.requireNonNull->this.prolepticYear->this.epochSecond
Chronology#compareTo(Chronology):::Compares this chronology to another chronology:::
Chronology#equals(Object):::Checks if this chronology is equal to another chronology:::
Chronology#hashCode():::A hash code for this chronology:::
Chronology#toString():::Outputs this chronology as a String:::
ChronoPeriod#between(ChronoLocalDate, ChronoLocalDate):::Obtains a ChronoPeriod consisting of amount of time between two dates:::Objects.requireNonNull->Objects.requireNonNull->startDateInclusive.until
ChronoPeriod#get(TemporalUnit):::Gets the value of the requested unit:::
ChronoPeriod#getUnits():::Gets the set of units supported by this period:::
ChronoPeriod#getChronology():::Gets the chronology that defines the meaning of the supported units:::
ChronoPeriod#isZero():::Checks if all the supported units of this period are zero.:::this.get->this.getUnits
ChronoPeriod#isNegative():::Checks if any of the supported units of this period are negative.:::this.get->this.getUnits
ChronoPeriod#plus(TemporalAmount):::Returns a copy of this period with the specified period added:::
ChronoPeriod#minus(TemporalAmount):::Returns a copy of this period with the specified period subtracted:::
ChronoPeriod#multipliedBy(int):::Returns a new instance with each amount in this period in this period multiplied by the specified scalar:::
ChronoPeriod#negated():::Returns a new instance with each amount in this period negated:::this.multipliedBy
ChronoPeriod#normalized():::Returns a copy of this period with the amounts of each unit normalized:::
ChronoPeriod#addTo(Temporal):::Adds this period to the specified temporal object:::
ChronoPeriod#subtractFrom(Temporal):::Subtracts this period from the specified temporal object:::
ChronoPeriod#equals(Object):::Checks if this period is equal to another period, including the chronology:::
ChronoPeriod#hashCode():::A hash code for this period.:::
ChronoPeriod#toString():::Outputs this period as a String:::
ChronoPeriodImpl#writeReplace():::Writes the Chronology using a dedicated serialized form:::
ChronoZonedDateTime#timeLineOrder():::Gets a comparator that compares ChronoZonedDateTime in time-line order ignoring the chronology:::dateTime1.toEpochSecond->dateTime2.toEpochSecond->Long.compare->dateTime1.toLocalTime().getNano->dateTime2.toLocalTime().getNano->Long.compare
ChronoZonedDateTime#from(TemporalAccessor):::Obtains an instance of ChronoZonedDateTime from a temporal object:::Objects.requireNonNull->TemporalQueries.chronology->temporal.query->temporal.getClass->chrono.zonedDateTime
ChronoZonedDateTime#toLocalDate():::Gets the local date part of this date-time:::toLocalDateTime().toLocalDate
ChronoZonedDateTime#toLocalTime():::Gets the local time part of this date-time:::toLocalDateTime().toLocalTime
ChronoZonedDateTime#toLocalDateTime():::Gets the local date-time part of this date-time:::
ChronoZonedDateTime#getChronology():::Gets the chronology of this date-time:::toLocalDate().getChronology
ChronoZonedDateTime#getOffset():::Gets the zone offset, such as '+01:00':::
ChronoZonedDateTime#getZone():::Gets the zone ID, such as 'Europe/Paris':::
ChronoZonedDateTime#withEarlierOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap:::
ChronoZonedDateTime#withLaterOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap:::
ChronoZonedDateTime#withZoneSameLocal(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible:::
ChronoZonedDateTime#withZoneSameInstant(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the instant:::
ChronoZonedDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::
ChronoZonedDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::unit.isSupportedBy
ChronoZonedDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::TemporalQueries.zone->TemporalQueries.zoneId->TemporalQueries.offset->TemporalQueries.localTime->TemporalQueries.chronology->TemporalQueries.precision->this.getChronology->this.toLocalTime->this.getOffset->this.getZone->query.queryFrom
ChronoZonedDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects.requireNonNull->formatter.format
ChronoZonedDateTime#toInstant():::Converts this date-time to an Instant:::this.toEpochSecond->toLocalTime().getNano->Instant.ofEpochSecond
ChronoZonedDateTime#toEpochSecond():::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z:::toLocalDate().toEpochDay->toLocalTime().toSecondOfDay->getOffset().getTotalSeconds
ChronoZonedDateTime#compareTo(ChronoZonedDateTime):::Compares this date-time to another date-time, including the chronology:::this.toEpochSecond->other.toEpochSecond->Long.compare->toLocalTime().getNano->other.toLocalTime().getNano->other.toLocalDateTime->toLocalDateTime().compareTo->other.getZone().getId->getZone().getId().compareTo->other.getChronology->getChronology().compareTo
ChronoZonedDateTime#isBefore(ChronoZonedDateTime):::Checks if the instant of this date-time is before that of the specified date-time:::this.toEpochSecond->other.toEpochSecond->toLocalTime().getNano->other.toLocalTime().getNano
ChronoZonedDateTime#isAfter(ChronoZonedDateTime):::Checks if the instant of this date-time is after that of the specified date-time:::this.toEpochSecond->other.toEpochSecond->toLocalTime().getNano->other.toLocalTime().getNano
ChronoZonedDateTime#isEqual(ChronoZonedDateTime):::Checks if the instant of this date-time is equal to that of the specified date-time:::this.toEpochSecond->other.toEpochSecond->toLocalTime().getNano->other.toLocalTime().getNano
ChronoZonedDateTime#equals(Object):::Checks if this date-time is equal to another date-time:::
ChronoZonedDateTime#hashCode():::A hash code for this date-time.:::
ChronoZonedDateTime#toString():::Outputs this date-time as a String:::
ChronoZonedDateTimeImpl#ofBest(ChronoLocalDateTimeImpl, ZoneId, ZoneOffset):::Obtains an instance from a local date-time using the preferred offset if possible.:::Objects.requireNonNull->Objects.requireNonNull->zone.getRules->LocalDateTime.from->rules.getValidOffsets->validOffsets.size->validOffsets.size->validOffsets.contains->validOffsets.get->rules.getTransition->trans.getDuration().getSeconds->localDateTime.plusSeconds->trans.getOffsetAfter->validOffsets.get->Objects.requireNonNull
ChronoZonedDateTimeImpl#ofInstant(Chronology, Instant, ZoneId):::Obtains an instance from an instant using the specified time-zone.:::zone.getRules->rules.getOffset->Objects.requireNonNull->instant.getEpochSecond->instant.getNano->LocalDateTime.ofEpochSecond->chrono.localDateTime
ChronoZonedDateTimeImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoZonedDateTimeImpl ensuring it bas the specified chronology.:::other.getChronology->chrono.equals->chrono.getId->other.getChronology().getId
Era#getValue():::Gets the numeric value associated with the era as defined by the chronology:::
Era#isSupported(TemporalField):::Checks if the specified field is supported:::field.isSupportedBy
Era#range(TemporalField):::Gets the range of valid values for the specified field:::TemporalAccessor.super.range
Era#get(TemporalField):::Gets the value of the specified field from this era as an int:::this.getValue->TemporalAccessor.super.get
Era#getLong(TemporalField):::Gets the value of the specified field from this era as a long:::this.getValue->field.getFrom
Era#query(TemporalQuery):::Queries this era using the specified query:::TemporalQueries.precision->TemporalAccessor.super.query
Era#adjustInto(Temporal):::Adjusts the specified temporal object to have the same era as this object:::this.getValue->temporal.with
Era#getDisplayName(TextStyle, Locale):::Gets the textual representation of this era:::new DateTimeFormatterBuilder().appendText(ERA, style).toFormatter(locale).format
HijrahChronology#getId():::Gets the ID of the chronology:::
HijrahChronology#getCalendarType():::Gets the calendar type of the Islamic calendar:::
HijrahChronology#date(Era, int, int, int):::Obtains a local date in Hijrah calendar system from the era, year-of-era, month-of-year and day-of-month fields.:::this.prolepticYear->this.date
HijrahChronology#date(int, int, int):::Obtains a local date in Hijrah calendar system from the proleptic-year, month-of-year and day-of-month fields.:::HijrahDate.of
HijrahChronology#dateYearDay(Era, int, int):::Obtains a local date in Hijrah calendar system from the era, year-of-era and day-of-year fields.:::this.prolepticYear->this.dateYearDay
HijrahChronology#dateYearDay(int, int):::Obtains a local date in Hijrah calendar system from the proleptic-year and day-of-year fields.:::HijrahDate.of->date.lengthOfYear->date.plusDays
HijrahChronology#dateEpochDay(long):::Obtains a local date in the Hijrah calendar system from the epoch-day.:::HijrahDate.ofEpochDay
HijrahChronology#eraOf(int):::Creates the HijrahEra object from the numeric value:::
HijrahChronology#checkValidYear(long):::Check the validity of a year.:::this.getMinimumYear->this.getMaximumYear
HijrahChronology#getHijrahDateInfo(int):::Returns an array containing the Hijrah year, month and day computed from the epoch day.:::this.checkCalendarInit->this.epochDayToEpochMonth->this.epochMonthToYear->this.epochMonthToMonth->this.epochMonthToEpochDay
HijrahChronology#getEpochDay(int, int, int):::Return the epoch day computed from Hijrah year, month, and day.:::this.checkCalendarInit->this.checkValidMonth->this.yearToEpochMonth->this.getMonthLength->this.epochMonthToEpochDay
HijrahChronology#getDayOfYear(int, int):::Returns day of year for the year and month.:::this.yearMonthToDayOfYear
HijrahChronology#getMonthLength(int, int):::Returns month length for the year and month.:::this.yearToEpochMonth->this.epochMonthLength
HijrahChronology#getYearLength(int):::Returns year length:::this.yearMonthToDayOfYear
HijrahChronology#getMinimumYear():::Return the minimum supported Hijrah year.:::this.epochMonthToYear
HijrahChronology#getMaximumYear():::Return the maximum supported Hijrah year.:::this.epochMonthToYear
HijrahChronology#getMaximumMonthLength():::Returns maximum day-of-month.:::
HijrahChronology#getMinimumMonthLength():::Returns smallest maximum day-of-month.:::
HijrahChronology#getMaximumDayOfYear():::Returns maximum day-of-year.:::
HijrahChronology#getSmallestMaximumDayOfYear():::Returns smallest maximum day-of-year.:::
HijrahChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::super.writeReplace
HijrahDate#of(HijrahChronology, int, int, int):::Obtains an instance of HijrahDate from the Hijrah proleptic year, month-of-year and day-of-month.:::
HijrahDate#ofEpochDay(HijrahChronology, long):::Returns a HijrahDate for the chronology and epochDay.:::
HijrahDate#now():::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the default time-zone:::Clock.systemDefaultZone->this.now
HijrahDate#now(ZoneId):::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the specified time-zone:::Clock.system->this.now
HijrahDate#now(Clock):::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar from the specified clock:::LocalDate.now(clock).toEpochDay->HijrahDate.ofEpochDay
HijrahDate#of(int, int, int):::Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from the proleptic-year, month-of-year and day-of-month fields:::HijrahChronology.INSTANCE.date
HijrahDate#from(TemporalAccessor):::Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from a temporal object:::HijrahChronology.INSTANCE.date
HijrahDate#getChronology():::Gets the chronology of this date, which is the Hijrah calendar system:::
HijrahDate#getEra():::Gets the era applicable at this date:::
HijrahDate#lengthOfMonth():::Returns the length of the month represented by this date:::chrono.getMonthLength
HijrahDate#lengthOfYear():::Returns the length of the year represented by this date:::chrono.getYearLength
HijrahDate#withVariant(HijrahChronology):::Returns a HijrahDate with the Chronology requested:::chronology.getDayOfYear->HijrahDate.of
HijrahDate#isLeapYear():::Checks if the year is a leap year, according to the Hijrah calendar system rules.:::chrono.isLeapYear
HijrahDate#equals(Object):::Compares this date to another date, including the chronology:::otherDate.getChronology->getChronology().equals
HijrahDate#hashCode():::A hash code for this date.:::getChronology().getId().hashCode
IsoChronology#getId():::Gets the ID of the chronology - 'ISO':::
IsoChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'iso8601':::
IsoChronology#date(Era, int, int, int):::Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields.:::this.prolepticYear->this.date
IsoChronology#date(int, int, int):::Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields:::LocalDate.of
IsoChronology#dateYearDay(Era, int, int):::Obtains an ISO local date from the era, year-of-era and day-of-year fields.:::this.prolepticYear->this.dateYearDay
IsoChronology#dateYearDay(int, int):::Obtains an ISO local date from the proleptic-year and day-of-year fields:::LocalDate.ofYearDay
IsoChronology#dateEpochDay(long):::Obtains an ISO local date from the epoch-day:::LocalDate.ofEpochDay
IsoChronology#date(TemporalAccessor):::Obtains an ISO local date from another date-time object:::LocalDate.from
IsoChronology#epochSecond(int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z:::YEAR.checkValidValue->MONTH_OF_YEAR.checkValidValue->DAY_OF_MONTH.checkValidValue->HOUR_OF_DAY.checkValidValue->MINUTE_OF_HOUR.checkValidValue->SECOND_OF_MINUTE.checkValidValue->Objects.requireNonNull->this.numberOfDaysOfMonth->Month.of(month).name->IsoChronology.INSTANCE.isLeapYear->Math.multiplyExact->zoneOffset.getTotalSeconds->Math.addExact
IsoChronology#localDateTime(TemporalAccessor):::Obtains an ISO local date-time from another date-time object:::LocalDateTime.from
IsoChronology#zonedDateTime(TemporalAccessor):::Obtains an ISO zoned date-time from another date-time object:::ZonedDateTime.from
IsoChronology#zonedDateTime(Instant, ZoneId):::Obtains an ISO zoned date-time in this chronology from an Instant:::ZonedDateTime.ofInstant
IsoChronology#dateNow():::Obtains the current ISO local date from the system clock in the default time-zone:::Clock.systemDefaultZone->this.dateNow
IsoChronology#dateNow(ZoneId):::Obtains the current ISO local date from the system clock in the specified time-zone:::Clock.system->this.dateNow
IsoChronology#dateNow(Clock):::Obtains the current ISO local date from the specified clock:::Objects.requireNonNull->LocalDate.now->this.date
IsoChronology#isLeapYear(long):::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::
IsoChronology#resolveDate(Map, ResolverStyle):::Resolves parsed ChronoField values into a date during parsing:::super.resolveDate
IsoChronology#period(int, int, int):::Obtains a period for this chronology based on years, months and days:::Period.of
IsoChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::super.writeReplace
JapaneseChronology#getId():::Gets the ID of the chronology - 'Japanese':::
JapaneseChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'japanese':::
JapaneseChronology#date(Era, int, int, int):::Obtains a local date in Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields:::JapaneseDate.of
JapaneseChronology#date(int, int, int):::Obtains a local date in Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields:::LocalDate.of
JapaneseChronology#dateYearDay(Era, int, int):::Obtains a local date in Japanese calendar system from the era, year-of-era and day-of-year fields:::JapaneseDate.ofYearDay
JapaneseChronology#dateYearDay(int, int):::Obtains a local date in Japanese calendar system from the proleptic-year and day-of-year fields:::LocalDate.ofYearDay
JapaneseChronology#dateEpochDay(long):::Obtains a local date in the Japanese calendar system from the epoch-day.:::LocalDate.ofEpochDay
JapaneseChronology#isLeapYear(long):::Checks if the specified year is a leap year:::IsoChronology.INSTANCE.isLeapYear
JapaneseChronology#eraOf(int):::Returns the calendar system era object from the given numeric value:::JapaneseEra.of
JapaneseChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::super.writeReplace
JapaneseDate#now():::Obtains the current JapaneseDate from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
JapaneseDate#now(ZoneId):::Obtains the current JapaneseDate from the system clock in the specified time-zone:::Clock.system->this.now
JapaneseDate#now(Clock):::Obtains the current JapaneseDate from the specified clock:::LocalDate.now
JapaneseDate#of(JapaneseEra, int, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields:::Objects.requireNonNull->JapaneseChronology.JCAL.newCalendarDate->jdate.setEra(era.getPrivateEra()).setDate->JapaneseChronology.JCAL.validate->jdate.getNormalizedYear->LocalDate.of
JapaneseDate#of(int, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields:::LocalDate.of
JapaneseDate#ofYearDay(JapaneseEra, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the era, year-of-era and day-of-year fields:::Objects.requireNonNull->era.getPrivateEra().getSinceDate->JapaneseChronology.JCAL.newCalendarDate->era.getPrivateEra->jdate.setEra->jdate.setDate->firstDay.getMonth->firstDay.getDayOfMonth->jdate.setDate->JapaneseChronology.JCAL.normalize->era.getPrivateEra->jdate.getEra->jdate.getYear->jdate.getNormalizedYear->jdate.getMonth->jdate.getDayOfMonth->LocalDate.of
JapaneseDate#from(TemporalAccessor):::Obtains a JapaneseDate from a temporal object:::JapaneseChronology.INSTANCE.date
JapaneseDate#getChronology():::Gets the chronology of this date, which is the Japanese calendar system:::
JapaneseDate#getEra():::Gets the era applicable at this date:::
JapaneseDate#lengthOfMonth():::Returns the length of the month represented by this date:::isoDate.lengthOfMonth
JapaneseDate#isSupported(TemporalField):::Checks if the specified field is supported:::super.isSupported
JapaneseDate#equals(Object):::Compares this date to another date, including the chronology:::this.isoDate.equals
JapaneseDate#hashCode():::A hash code for this date.:::getChronology().getId().hashCode->isoDate.hashCode
JapaneseEra#getPrivateEra():::Returns the Sun private Era instance corresponding to this JapaneseEra.:::this.ordinal
JapaneseEra#of(int):::Obtains an instance of JapaneseEra from an int value:::this.ordinal
JapaneseEra#valueOf(String):::Returns the JapaneseEra with the name:::Objects.requireNonNull->era.getName().equals
JapaneseEra#values():::Returns an array of JapaneseEras:::Arrays.copyOf
JapaneseEra#from(LocalDate):::Obtains an instance of JapaneseEra from a date.:::date.isBefore->date.compareTo
JapaneseEra#getValue():::Gets the numeric era int value:::
JapaneseEra#range(TemporalField):::Gets the range of valid values for the specified field:::JapaneseChronology.INSTANCE.range->Era.super.range
MinguoChronology#getId():::Gets the ID of the chronology - 'Minguo':::
MinguoChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'roc':::
MinguoChronology#date(Era, int, int, int):::Obtains a local date in Minguo calendar system from the era, year-of-era, month-of-year and day-of-month fields.:::this.prolepticYear->this.date
MinguoChronology#date(int, int, int):::Obtains a local date in Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields.:::LocalDate.of
MinguoChronology#dateYearDay(Era, int, int):::Obtains a local date in Minguo calendar system from the era, year-of-era and day-of-year fields.:::this.prolepticYear->this.dateYearDay
MinguoChronology#dateYearDay(int, int):::Obtains a local date in Minguo calendar system from the proleptic-year and day-of-year fields.:::LocalDate.ofYearDay
MinguoChronology#dateEpochDay(long):::Obtains a local date in the Minguo calendar system from the epoch-day.:::LocalDate.ofEpochDay
MinguoChronology#isLeapYear(long):::Checks if the specified year is a leap year:::IsoChronology.INSTANCE.isLeapYear
MinguoChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::super.writeReplace
MinguoDate#now():::Obtains the current MinguoDate from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
MinguoDate#now(ZoneId):::Obtains the current MinguoDate from the system clock in the specified time-zone:::Clock.system->this.now
MinguoDate#now(Clock):::Obtains the current MinguoDate from the specified clock:::LocalDate.now
MinguoDate#of(int, int, int):::Obtains a MinguoDate representing a date in the Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields:::LocalDate.of
MinguoDate#from(TemporalAccessor):::Obtains a MinguoDate from a temporal object:::MinguoChronology.INSTANCE.date
MinguoDate#getChronology():::Gets the chronology of this date, which is the Minguo calendar system:::
MinguoDate#getEra():::Gets the era applicable at this date:::this.getProlepticYear
MinguoDate#lengthOfMonth():::Returns the length of the month represented by this date:::isoDate.lengthOfMonth
MinguoDate#equals(Object):::Compares this date to another date, including the chronology:::this.isoDate.equals
MinguoDate#hashCode():::A hash code for this date.:::getChronology().getId().hashCode->isoDate.hashCode
Ser#writeExternal(ObjectOutput):::Implements the Externalizable interface to write the object.:::this.writeInternal
Ser#readExternal(ObjectInput):::Implements the Externalizable interface to read the object.:::in.readByte->this.readInternal
ThaiBuddhistChronology#getId():::Gets the ID of the chronology - 'ThaiBuddhist':::
ThaiBuddhistChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'buddhist':::
ThaiBuddhistChronology#date(Era, int, int, int):::Obtains a local date in Thai Buddhist calendar system from the era, year-of-era, month-of-year and day-of-month fields.:::this.prolepticYear->this.date
ThaiBuddhistChronology#date(int, int, int):::Obtains a local date in Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields.:::LocalDate.of
ThaiBuddhistChronology#dateYearDay(Era, int, int):::Obtains a local date in Thai Buddhist calendar system from the era, year-of-era and day-of-year fields.:::this.prolepticYear->this.dateYearDay
ThaiBuddhistChronology#dateYearDay(int, int):::Obtains a local date in Thai Buddhist calendar system from the proleptic-year and day-of-year fields.:::LocalDate.ofYearDay
ThaiBuddhistChronology#dateEpochDay(long):::Obtains a local date in the Thai Buddhist calendar system from the epoch-day.:::LocalDate.ofEpochDay
ThaiBuddhistChronology#isLeapYear(long):::Checks if the specified year is a leap year:::IsoChronology.INSTANCE.isLeapYear
ThaiBuddhistChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::super.writeReplace
ThaiBuddhistDate#now():::Obtains the current ThaiBuddhistDate from the system clock in the default time-zone:::Clock.systemDefaultZone->this.now
ThaiBuddhistDate#now(ZoneId):::Obtains the current ThaiBuddhistDate from the system clock in the specified time-zone:::Clock.system->this.now
ThaiBuddhistDate#now(Clock):::Obtains the current ThaiBuddhistDate from the specified clock:::LocalDate.now
ThaiBuddhistDate#of(int, int, int):::Obtains a ThaiBuddhistDate representing a date in the Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields:::LocalDate.of
ThaiBuddhistDate#from(TemporalAccessor):::Obtains a ThaiBuddhistDate from a temporal object:::ThaiBuddhistChronology.INSTANCE.date
ThaiBuddhistDate#getChronology():::Gets the chronology of this date, which is the Thai Buddhist calendar system:::
ThaiBuddhistDate#getEra():::Gets the era applicable at this date:::this.getProlepticYear
ThaiBuddhistDate#lengthOfMonth():::Returns the length of the month represented by this date:::isoDate.lengthOfMonth
ThaiBuddhistDate#equals(Object):::Compares this date to another date, including the chronology:::this.isoDate.equals
ThaiBuddhistDate#hashCode():::A hash code for this date.:::getChronology().getId().hashCode->isoDate.hashCode

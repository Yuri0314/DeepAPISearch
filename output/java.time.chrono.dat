java.time.chrono.AbstractChronology#registerChrono(Chronology)->Chronology:::Register a Chronology by its ID and type for lookup by {@link #of(String)}
java.time.chrono.AbstractChronology#registerChrono(Chronology, String)->Chronology:::Register a Chronology by ID and type for lookup by {@link #of(String)}
java.time.chrono.AbstractChronology#ofLocale(Locale)->Chronology:::Obtains an instance of {@code Chronology} from a locale
java.time.chrono.AbstractChronology#of(String)->Chronology:::Obtains an instance of {@code Chronology} from a chronology ID or  calendar system type
java.time.chrono.AbstractChronology#getAvailableChronologies()->Set<Chronology>:::Returns the available chronologies
java.time.chrono.AbstractChronology#resolveDate(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::Resolves parsed {@code ChronoField} values into a date during parsing
java.time.chrono.AbstractChronology#resolveProlepticMonth(Map<TemporalField, Long>, ResolverStyle)->void:::
java.time.chrono.AbstractChronology#resolveYearOfEra(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::
java.time.chrono.AbstractChronology#resolveYMD(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::
java.time.chrono.AbstractChronology#resolveYD(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::
java.time.chrono.AbstractChronology#resolveYMAA(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::
java.time.chrono.AbstractChronology#resolveYMAD(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::
java.time.chrono.AbstractChronology#resolveYAA(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::
java.time.chrono.AbstractChronology#resolveYAD(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::
java.time.chrono.AbstractChronology#resolveAligned(ChronoLocalDate, long, long, long)->ChronoLocalDate:::
java.time.chrono.AbstractChronology#addFieldValue(Map<TemporalField, Long>, ChronoField, long)->void:::Adds a field-value pair to the map, checking for conflicts
java.time.chrono.AbstractChronology#compareTo(Chronology)->int:::Compares this chronology to another chronology
java.time.chrono.AbstractChronology#equals(Object)->boolean:::Checks if this chronology is equal to another chronology
java.time.chrono.AbstractChronology#hashCode()->int:::A hash code for this chronology
java.time.chrono.AbstractChronology#toString()->String:::Outputs this chronology as a {@code String}, using the chronology ID.
java.time.chrono.AbstractChronology#writeReplace()->Object:::Writes the Chronology using a  <a href="../../../serialized-form.html#java.time.chrono.Ser">dedicated serialized form</a>
java.time.chrono.AbstractChronology#writeExternal(DataOutput)->void:::
java.time.chrono.AbstractChronology#readExternal(DataInput)->Chronology:::
java.time.chrono.ChronoLocalDate#timeLineOrder()->Comparator<ChronoLocalDate>:::Gets a comparator that compares {@code ChronoLocalDate} in  time-line order ignoring the chronology
java.time.chrono.ChronoLocalDate#from(TemporalAccessor)->ChronoLocalDate:::Obtains an instance of {@code ChronoLocalDate} from a temporal object
java.time.chrono.ChronoLocalDate#getChronology()->Chronology:::Gets the chronology of this date
java.time.chrono.ChronoLocalDate#getEra()->Era:::Gets the era, as defined by the chronology
java.time.chrono.ChronoLocalDate#isLeapYear()->boolean:::Checks if the year is a leap year, as defined by the calendar system
java.time.chrono.ChronoLocalDate#lengthOfMonth()->int:::Returns the length of the month represented by this date, as defined by the calendar system
java.time.chrono.ChronoLocalDate#lengthOfYear()->int:::Returns the length of the year represented by this date, as defined by the calendar system
java.time.chrono.ChronoLocalDate#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.ChronoLocalDate#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.chrono.ChronoLocalDate#with(TemporalAdjuster)->ChronoLocalDate:::{@inheritDoc}
java.time.chrono.ChronoLocalDate#with(TemporalField, long)->ChronoLocalDate:::{@inheritDoc}
java.time.chrono.ChronoLocalDate#plus(TemporalAmount)->ChronoLocalDate:::{@inheritDoc}
java.time.chrono.ChronoLocalDate#plus(long, TemporalUnit)->ChronoLocalDate:::{@inheritDoc}
java.time.chrono.ChronoLocalDate#minus(TemporalAmount)->ChronoLocalDate:::{@inheritDoc}
java.time.chrono.ChronoLocalDate#minus(long, TemporalUnit)->ChronoLocalDate:::{@inheritDoc}
java.time.chrono.ChronoLocalDate#query(TemporalQuery<R>)->R:::Queries this date using the specified query
java.time.chrono.ChronoLocalDate#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same date as this object
java.time.chrono.ChronoLocalDate#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another date in terms of the specified unit
java.time.chrono.ChronoLocalDate#until(ChronoLocalDate)->ChronoPeriod:::Calculates the period between this date and another date as a {@code ChronoPeriod}
java.time.chrono.ChronoLocalDate#format(DateTimeFormatter)->String:::Formats this date using the specified formatter
java.time.chrono.ChronoLocalDate#atTime(LocalTime)->ChronoLocalDateTime<?>:::Combines this date with a time to create a {@code ChronoLocalDateTime}
java.time.chrono.ChronoLocalDate#toEpochDay()->long:::Converts this date to the Epoch Day
java.time.chrono.ChronoLocalDate#compareTo(ChronoLocalDate)->int:::Compares this date to another date, including the chronology
java.time.chrono.ChronoLocalDate#isAfter(ChronoLocalDate)->boolean:::Checks if this date is after the specified date ignoring the chronology
java.time.chrono.ChronoLocalDate#isBefore(ChronoLocalDate)->boolean:::Checks if this date is before the specified date ignoring the chronology
java.time.chrono.ChronoLocalDate#isEqual(ChronoLocalDate)->boolean:::Checks if this date is equal to the specified date ignoring the chronology
java.time.chrono.ChronoLocalDate#equals(Object)->boolean:::Checks if this date is equal to another date, including the chronology
java.time.chrono.ChronoLocalDate#hashCode()->int:::A hash code for this date.
java.time.chrono.ChronoLocalDate#toString()->String:::Outputs this date as a {@code String}
java.time.chrono.ChronoLocalDateImpl#ensureValid(Chronology, Temporal)->D:::Casts the {@code Temporal} to {@code ChronoLocalDate} ensuring it bas the specified chronology.
java.time.chrono.ChronoLocalDateImpl#with(TemporalAdjuster)->D:::
java.time.chrono.ChronoLocalDateImpl#with(TemporalField, long)->D:::
java.time.chrono.ChronoLocalDateImpl#plus(TemporalAmount)->D:::
java.time.chrono.ChronoLocalDateImpl#plus(long, TemporalUnit)->D:::
java.time.chrono.ChronoLocalDateImpl#minus(TemporalAmount)->D:::
java.time.chrono.ChronoLocalDateImpl#minus(long, TemporalUnit)->D:::
java.time.chrono.ChronoLocalDateImpl#plusYears(long)->D:::Returns a copy of this date with the specified number of years added
java.time.chrono.ChronoLocalDateImpl#plusMonths(long)->D:::Returns a copy of this date with the specified number of months added
java.time.chrono.ChronoLocalDateImpl#plusWeeks(long)->D:::Returns a copy of this date with the specified number of weeks added
java.time.chrono.ChronoLocalDateImpl#plusDays(long)->D:::Returns a copy of this date with the specified number of days added
java.time.chrono.ChronoLocalDateImpl#minusYears(long)->D:::Returns a copy of this date with the specified number of years subtracted
java.time.chrono.ChronoLocalDateImpl#minusMonths(long)->D:::Returns a copy of this date with the specified number of months subtracted
java.time.chrono.ChronoLocalDateImpl#minusWeeks(long)->D:::Returns a copy of this date with the specified number of weeks subtracted
java.time.chrono.ChronoLocalDateImpl#minusDays(long)->D:::Returns a copy of this date with the specified number of days subtracted
java.time.chrono.ChronoLocalDateImpl#until(Temporal, TemporalUnit)->long:::
java.time.chrono.ChronoLocalDateImpl#equals(Object)->boolean:::
java.time.chrono.ChronoLocalDateImpl#hashCode()->int:::
java.time.chrono.ChronoLocalDateImpl#toString()->String:::
java.time.chrono.ChronoLocalDateTime#timeLineOrder()->Comparator<ChronoLocalDateTime<?>>:::Gets a comparator that compares {@code ChronoLocalDateTime} in  time-line order ignoring the chronology
java.time.chrono.ChronoLocalDateTime#from(TemporalAccessor)->ChronoLocalDateTime<?>:::Obtains an instance of {@code ChronoLocalDateTime} from a temporal object
java.time.chrono.ChronoLocalDateTime#getChronology()->Chronology:::Gets the chronology of this date-time
java.time.chrono.ChronoLocalDateTime#toLocalDate()->D:::Gets the local date part of this date-time
java.time.chrono.ChronoLocalDateTime#toLocalTime()->LocalTime:::Gets the local time part of this date-time
java.time.chrono.ChronoLocalDateTime#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.ChronoLocalDateTime#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.chrono.ChronoLocalDateTime#with(TemporalAdjuster)->ChronoLocalDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoLocalDateTime#with(TemporalField, long)->ChronoLocalDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoLocalDateTime#plus(TemporalAmount)->ChronoLocalDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoLocalDateTime#plus(long, TemporalUnit)->ChronoLocalDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoLocalDateTime#minus(TemporalAmount)->ChronoLocalDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoLocalDateTime#minus(long, TemporalUnit)->ChronoLocalDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoLocalDateTime#query(TemporalQuery<R>)->R:::Queries this date-time using the specified query
java.time.chrono.ChronoLocalDateTime#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same date and time as this object
java.time.chrono.ChronoLocalDateTime#format(DateTimeFormatter)->String:::Formats this date-time using the specified formatter
java.time.chrono.ChronoLocalDateTime#atZone(ZoneId)->ChronoZonedDateTime<D>:::Combines this time with a time-zone to create a {@code ChronoZonedDateTime}
java.time.chrono.ChronoLocalDateTime#toInstant(ZoneOffset)->Instant:::Converts this date-time to an {@code Instant}
java.time.chrono.ChronoLocalDateTime#toEpochSecond(ZoneOffset)->long:::Converts this date-time to the number of seconds from the epoch  of 1970-01-01T00:00:00Z
java.time.chrono.ChronoLocalDateTime#compareTo(ChronoLocalDateTime<?>)->int:::Compares this date-time to another date-time, including the chronology
java.time.chrono.ChronoLocalDateTime#isAfter(ChronoLocalDateTime<?>)->boolean:::Checks if this date-time is after the specified date-time ignoring the chronology
java.time.chrono.ChronoLocalDateTime#isBefore(ChronoLocalDateTime<?>)->boolean:::Checks if this date-time is before the specified date-time ignoring the chronology
java.time.chrono.ChronoLocalDateTime#isEqual(ChronoLocalDateTime<?>)->boolean:::Checks if this date-time is equal to the specified date-time ignoring the chronology
java.time.chrono.ChronoLocalDateTime#equals(Object)->boolean:::Checks if this date-time is equal to another date-time, including the chronology
java.time.chrono.ChronoLocalDateTime#hashCode()->int:::A hash code for this date-time.
java.time.chrono.ChronoLocalDateTime#toString()->String:::Outputs this date-time as a {@code String}
java.time.chrono.ChronoLocalDateTimeImpl#of(R, LocalTime)->ChronoLocalDateTimeImpl<R>:::Obtains an instance of {@code ChronoLocalDateTime} from a date and time.
java.time.chrono.ChronoLocalDateTimeImpl#ensureValid(Chronology, Temporal)->ChronoLocalDateTimeImpl<R>:::Casts the {@code Temporal} to {@code ChronoLocalDateTime} ensuring it bas the specified chronology.
java.time.chrono.ChronoLocalDateTimeImpl#toLocalDate()->D:::
java.time.chrono.ChronoLocalDateTimeImpl#toLocalTime()->LocalTime:::
java.time.chrono.ChronoLocalDateTimeImpl#isSupported(TemporalField)->boolean:::
java.time.chrono.ChronoLocalDateTimeImpl#range(TemporalField)->ValueRange:::
java.time.chrono.ChronoLocalDateTimeImpl#get(TemporalField)->int:::
java.time.chrono.ChronoLocalDateTimeImpl#getLong(TemporalField)->long:::
java.time.chrono.ChronoLocalDateTimeImpl#with(TemporalAdjuster)->ChronoLocalDateTimeImpl<D>:::
java.time.chrono.ChronoLocalDateTimeImpl#with(TemporalField, long)->ChronoLocalDateTimeImpl<D>:::
java.time.chrono.ChronoLocalDateTimeImpl#plus(long, TemporalUnit)->ChronoLocalDateTimeImpl<D>:::
java.time.chrono.ChronoLocalDateTimeImpl#plusSeconds(long)->ChronoLocalDateTimeImpl<D>:::
java.time.chrono.ChronoLocalDateTimeImpl#atZone(ZoneId)->ChronoZonedDateTime<D>:::
java.time.chrono.ChronoLocalDateTimeImpl#until(Temporal, TemporalUnit)->long:::
java.time.chrono.ChronoLocalDateTimeImpl#writeExternal(ObjectOutput)->void:::
java.time.chrono.ChronoLocalDateTimeImpl#readExternal(ObjectInput)->ChronoLocalDateTime<?>:::
java.time.chrono.ChronoLocalDateTimeImpl#equals(Object)->boolean:::
java.time.chrono.ChronoLocalDateTimeImpl#hashCode()->int:::
java.time.chrono.ChronoLocalDateTimeImpl#toString()->String:::
java.time.chrono.Chronology#from(TemporalAccessor)->Chronology:::Obtains an instance of {@code Chronology} from a temporal object
java.time.chrono.Chronology#ofLocale(Locale)->Chronology:::Obtains an instance of {@code Chronology} from a locale
java.time.chrono.Chronology#of(String)->Chronology:::Obtains an instance of {@code Chronology} from a chronology ID or  calendar system type
java.time.chrono.Chronology#getAvailableChronologies()->Set<Chronology>:::Returns the available chronologies
java.time.chrono.Chronology#getId()->String:::Gets the ID of the chronology
java.time.chrono.Chronology#getCalendarType()->String:::Gets the calendar type of the calendar system
java.time.chrono.Chronology#date(Era, int, int, int)->ChronoLocalDate:::Obtains a local date in this chronology from the era, year-of-era,  month-of-year and day-of-month fields.
java.time.chrono.Chronology#date(int, int, int)->ChronoLocalDate:::Obtains a local date in this chronology from the proleptic-year,  month-of-year and day-of-month fields.
java.time.chrono.Chronology#dateYearDay(Era, int, int)->ChronoLocalDate:::Obtains a local date in this chronology from the era, year-of-era and  day-of-year fields.
java.time.chrono.Chronology#dateYearDay(int, int)->ChronoLocalDate:::Obtains a local date in this chronology from the proleptic-year and  day-of-year fields.
java.time.chrono.Chronology#dateEpochDay(long)->ChronoLocalDate:::Obtains a local date in this chronology from the epoch-day
java.time.chrono.Chronology#dateNow()->ChronoLocalDate:::Obtains the current local date in this chronology from the system clock in the default time-zone
java.time.chrono.Chronology#dateNow(ZoneId)->ChronoLocalDate:::Obtains the current local date in this chronology from the system clock in the specified time-zone
java.time.chrono.Chronology#dateNow(Clock)->ChronoLocalDate:::Obtains the current local date in this chronology from the specified clock
java.time.chrono.Chronology#date(TemporalAccessor)->ChronoLocalDate:::Obtains a local date in this chronology from another temporal object
java.time.chrono.Chronology#extends ChronoLocalDate> localDateTime(TemporalAccessor)->ChronoLocalDateTime<?:::Obtains a local date-time in this chronology from another temporal object
java.time.chrono.Chronology#extends ChronoLocalDate> zonedDateTime(TemporalAccessor)->ChronoZonedDateTime<?:::Obtains a {@code ChronoZonedDateTime} in this chronology from another temporal object
java.time.chrono.Chronology#extends ChronoLocalDate> zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime<?:::Obtains a {@code ChronoZonedDateTime} in this chronology from an {@code Instant}
java.time.chrono.Chronology#isLeapYear(long)->boolean:::Checks if the specified year is a leap year
java.time.chrono.Chronology#prolepticYear(Era, int)->int:::Calculates the proleptic-year given the era and year-of-era
java.time.chrono.Chronology#eraOf(int)->Era:::Creates the chronology era object from the numeric value
java.time.chrono.Chronology#eras()->List<Era>:::Gets the list of eras for the chronology
java.time.chrono.Chronology#range(ChronoField)->ValueRange:::Gets the range of valid values for the specified field
java.time.chrono.Chronology#getDisplayName(TextStyle, Locale)->String:::Gets the textual representation of this chronology
java.time.chrono.Chronology#resolveDate(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::Resolves parsed {@code ChronoField} values into a date during parsing
java.time.chrono.Chronology#period(int, int, int)->ChronoPeriod:::Obtains a period for this chronology based on years, months and days
java.time.chrono.Chronology#epochSecond(int, int, int, int, int, int, ZoneOffset)->long:::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.chrono.Chronology#epochSecond(Era, int, int, int, int, int, int, ZoneOffset)->long:::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.chrono.Chronology#compareTo(Chronology)->int:::Compares this chronology to another chronology
java.time.chrono.Chronology#equals(Object)->boolean:::Checks if this chronology is equal to another chronology
java.time.chrono.Chronology#hashCode()->int:::A hash code for this chronology
java.time.chrono.Chronology#toString()->String:::Outputs this chronology as a {@code String}
java.time.chrono.ChronoPeriod#between(ChronoLocalDate, ChronoLocalDate)->ChronoPeriod:::Obtains a {@code ChronoPeriod} consisting of amount of time between two dates
java.time.chrono.ChronoPeriod#get(TemporalUnit)->long:::Gets the value of the requested unit
java.time.chrono.ChronoPeriod#getUnits()->List<TemporalUnit>:::Gets the set of units supported by this period
java.time.chrono.ChronoPeriod#getChronology()->Chronology:::Gets the chronology that defines the meaning of the supported units
java.time.chrono.ChronoPeriod#isZero()->boolean:::Checks if all the supported units of this period are zero.
java.time.chrono.ChronoPeriod#isNegative()->boolean:::Checks if any of the supported units of this period are negative.
java.time.chrono.ChronoPeriod#plus(TemporalAmount)->ChronoPeriod:::Returns a copy of this period with the specified period added
java.time.chrono.ChronoPeriod#minus(TemporalAmount)->ChronoPeriod:::Returns a copy of this period with the specified period subtracted
java.time.chrono.ChronoPeriod#multipliedBy(int)->ChronoPeriod:::Returns a new instance with each amount in this period in this period  multiplied by the specified scalar
java.time.chrono.ChronoPeriod#negated()->ChronoPeriod:::Returns a new instance with each amount in this period negated
java.time.chrono.ChronoPeriod#normalized()->ChronoPeriod:::Returns a copy of this period with the amounts of each unit normalized
java.time.chrono.ChronoPeriod#addTo(Temporal)->Temporal:::Adds this period to the specified temporal object
java.time.chrono.ChronoPeriod#subtractFrom(Temporal)->Temporal:::Subtracts this period from the specified temporal object
java.time.chrono.ChronoPeriod#equals(Object)->boolean:::Checks if this period is equal to another period, including the chronology
java.time.chrono.ChronoPeriod#hashCode()->int:::A hash code for this period.
java.time.chrono.ChronoPeriod#toString()->String:::Outputs this period as a {@code String}
java.time.chrono.ChronoPeriodImpl#get(TemporalUnit)->long:::
java.time.chrono.ChronoPeriodImpl#getUnits()->List<TemporalUnit>:::
java.time.chrono.ChronoPeriodImpl#getChronology()->Chronology:::
java.time.chrono.ChronoPeriodImpl#isZero()->boolean:::
java.time.chrono.ChronoPeriodImpl#isNegative()->boolean:::
java.time.chrono.ChronoPeriodImpl#plus(TemporalAmount)->ChronoPeriod:::
java.time.chrono.ChronoPeriodImpl#minus(TemporalAmount)->ChronoPeriod:::
java.time.chrono.ChronoPeriodImpl#multipliedBy(int)->ChronoPeriod:::
java.time.chrono.ChronoPeriodImpl#normalized()->ChronoPeriod:::
java.time.chrono.ChronoPeriodImpl#addTo(Temporal)->Temporal:::
java.time.chrono.ChronoPeriodImpl#subtractFrom(Temporal)->Temporal:::
java.time.chrono.ChronoPeriodImpl#equals(Object)->boolean:::
java.time.chrono.ChronoPeriodImpl#hashCode()->int:::
java.time.chrono.ChronoPeriodImpl#toString()->String:::
java.time.chrono.ChronoPeriodImpl#writeReplace()->Object:::Writes the Chronology using a  <a href="../../../serialized-form.html#java.time.chrono.Ser">dedicated serialized form</a>
java.time.chrono.ChronoPeriodImpl#writeExternal(DataOutput)->void:::
java.time.chrono.ChronoPeriodImpl#readExternal(DataInput)->ChronoPeriodImpl:::
java.time.chrono.ChronoZonedDateTime#timeLineOrder()->Comparator<ChronoZonedDateTime<?>>:::Gets a comparator that compares {@code ChronoZonedDateTime} in  time-line order ignoring the chronology
java.time.chrono.ChronoZonedDateTime#from(TemporalAccessor)->ChronoZonedDateTime<?>:::Obtains an instance of {@code ChronoZonedDateTime} from a temporal object
java.time.chrono.ChronoZonedDateTime#range(TemporalField)->ValueRange:::
java.time.chrono.ChronoZonedDateTime#get(TemporalField)->int:::
java.time.chrono.ChronoZonedDateTime#getLong(TemporalField)->long:::
java.time.chrono.ChronoZonedDateTime#toLocalDate()->D:::Gets the local date part of this date-time
java.time.chrono.ChronoZonedDateTime#toLocalTime()->LocalTime:::Gets the local time part of this date-time
java.time.chrono.ChronoZonedDateTime#toLocalDateTime()->ChronoLocalDateTime<D>:::Gets the local date-time part of this date-time
java.time.chrono.ChronoZonedDateTime#getChronology()->Chronology:::Gets the chronology of this date-time
java.time.chrono.ChronoZonedDateTime#getOffset()->ZoneOffset:::Gets the zone offset, such as '+01:00'
java.time.chrono.ChronoZonedDateTime#getZone()->ZoneId:::Gets the zone ID, such as 'Europe/Paris'
java.time.chrono.ChronoZonedDateTime#withEarlierOffsetAtOverlap()->ChronoZonedDateTime<D>:::Returns a copy of this date-time changing the zone offset to the  earlier of the two valid offsets at a local time-line overlap
java.time.chrono.ChronoZonedDateTime#withLaterOffsetAtOverlap()->ChronoZonedDateTime<D>:::Returns a copy of this date-time changing the zone offset to the  later of the two valid offsets at a local time-line overlap
java.time.chrono.ChronoZonedDateTime#withZoneSameLocal(ZoneId)->ChronoZonedDateTime<D>:::Returns a copy of this date-time with a different time-zone,  retaining the local date-time if possible
java.time.chrono.ChronoZonedDateTime#withZoneSameInstant(ZoneId)->ChronoZonedDateTime<D>:::Returns a copy of this date-time with a different time-zone,  retaining the instant
java.time.chrono.ChronoZonedDateTime#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.ChronoZonedDateTime#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.chrono.ChronoZonedDateTime#with(TemporalAdjuster)->ChronoZonedDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoZonedDateTime#with(TemporalField, long)->ChronoZonedDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoZonedDateTime#plus(TemporalAmount)->ChronoZonedDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoZonedDateTime#plus(long, TemporalUnit)->ChronoZonedDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoZonedDateTime#minus(TemporalAmount)->ChronoZonedDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoZonedDateTime#minus(long, TemporalUnit)->ChronoZonedDateTime<D>:::{@inheritDoc}
java.time.chrono.ChronoZonedDateTime#query(TemporalQuery<R>)->R:::Queries this date-time using the specified query
java.time.chrono.ChronoZonedDateTime#format(DateTimeFormatter)->String:::Formats this date-time using the specified formatter
java.time.chrono.ChronoZonedDateTime#toInstant()->Instant:::Converts this date-time to an {@code Instant}
java.time.chrono.ChronoZonedDateTime#toEpochSecond()->long:::Converts this date-time to the number of seconds from the epoch  of 1970-01-01T00:00:00Z
java.time.chrono.ChronoZonedDateTime#compareTo(ChronoZonedDateTime<?>)->int:::Compares this date-time to another date-time, including the chronology
java.time.chrono.ChronoZonedDateTime#isBefore(ChronoZonedDateTime<?>)->boolean:::Checks if the instant of this date-time is before that of the specified date-time
java.time.chrono.ChronoZonedDateTime#isAfter(ChronoZonedDateTime<?>)->boolean:::Checks if the instant of this date-time is after that of the specified date-time
java.time.chrono.ChronoZonedDateTime#isEqual(ChronoZonedDateTime<?>)->boolean:::Checks if the instant of this date-time is equal to that of the specified date-time
java.time.chrono.ChronoZonedDateTime#equals(Object)->boolean:::Checks if this date-time is equal to another date-time
java.time.chrono.ChronoZonedDateTime#hashCode()->int:::A hash code for this date-time.
java.time.chrono.ChronoZonedDateTime#toString()->String:::Outputs this date-time as a {@code String}
java.time.chrono.ChronoZonedDateTimeImpl#ofBest(ChronoLocalDateTimeImpl<R>, ZoneId, ZoneOffset)->ChronoZonedDateTime<R>:::Obtains an instance from a local date-time using the preferred offset if possible.
java.time.chrono.ChronoZonedDateTimeImpl#ofInstant(Chronology, Instant, ZoneId)->ChronoZonedDateTimeImpl<?>:::Obtains an instance from an instant using the specified time-zone.
java.time.chrono.ChronoZonedDateTimeImpl#ensureValid(Chronology, Temporal)->ChronoZonedDateTimeImpl<R>:::Casts the {@code Temporal} to {@code ChronoZonedDateTimeImpl} ensuring it bas the specified chronology.
java.time.chrono.ChronoZonedDateTimeImpl#getOffset()->ZoneOffset:::
java.time.chrono.ChronoZonedDateTimeImpl#withEarlierOffsetAtOverlap()->ChronoZonedDateTime<D>:::
java.time.chrono.ChronoZonedDateTimeImpl#withLaterOffsetAtOverlap()->ChronoZonedDateTime<D>:::
java.time.chrono.ChronoZonedDateTimeImpl#toLocalDateTime()->ChronoLocalDateTime<D>:::
java.time.chrono.ChronoZonedDateTimeImpl#getZone()->ZoneId:::
java.time.chrono.ChronoZonedDateTimeImpl#withZoneSameLocal(ZoneId)->ChronoZonedDateTime<D>:::
java.time.chrono.ChronoZonedDateTimeImpl#withZoneSameInstant(ZoneId)->ChronoZonedDateTime<D>:::
java.time.chrono.ChronoZonedDateTimeImpl#isSupported(TemporalField)->boolean:::
java.time.chrono.ChronoZonedDateTimeImpl#with(TemporalField, long)->ChronoZonedDateTime<D>:::
java.time.chrono.ChronoZonedDateTimeImpl#plus(long, TemporalUnit)->ChronoZonedDateTime<D>:::
java.time.chrono.ChronoZonedDateTimeImpl#until(Temporal, TemporalUnit)->long:::
java.time.chrono.ChronoZonedDateTimeImpl#writeExternal(ObjectOutput)->void:::
java.time.chrono.ChronoZonedDateTimeImpl#readExternal(ObjectInput)->ChronoZonedDateTime<?>:::
java.time.chrono.ChronoZonedDateTimeImpl#equals(Object)->boolean:::
java.time.chrono.ChronoZonedDateTimeImpl#hashCode()->int:::
java.time.chrono.ChronoZonedDateTimeImpl#toString()->String:::
java.time.chrono.Era#getValue()->int:::Gets the numeric value associated with the era as defined by the chronology
java.time.chrono.Era#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.Era#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.chrono.Era#get(TemporalField)->int:::Gets the value of the specified field from this era as an {@code int}
java.time.chrono.Era#getLong(TemporalField)->long:::Gets the value of the specified field from this era as a {@code long}
java.time.chrono.Era#query(TemporalQuery<R>)->R:::Queries this era using the specified query
java.time.chrono.Era#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same era as this object
java.time.chrono.Era#getDisplayName(TextStyle, Locale)->String:::Gets the textual representation of this era
java.time.chrono.HijrahChronology#getId()->String:::Gets the ID of the chronology
java.time.chrono.HijrahChronology#getCalendarType()->String:::Gets the calendar type of the Islamic calendar
java.time.chrono.HijrahChronology#date(Era, int, int, int)->HijrahDate:::Obtains a local date in Hijrah calendar system from the  era, year-of-era, month-of-year and day-of-month fields.
java.time.chrono.HijrahChronology#date(int, int, int)->HijrahDate:::Obtains a local date in Hijrah calendar system from the  proleptic-year, month-of-year and day-of-month fields.
java.time.chrono.HijrahChronology#dateYearDay(Era, int, int)->HijrahDate:::Obtains a local date in Hijrah calendar system from the  era, year-of-era and day-of-year fields.
java.time.chrono.HijrahChronology#dateYearDay(int, int)->HijrahDate:::Obtains a local date in Hijrah calendar system from the  proleptic-year and day-of-year fields.
java.time.chrono.HijrahChronology#dateEpochDay(long)->HijrahDate:::Obtains a local date in the Hijrah calendar system from the epoch-day.
java.time.chrono.HijrahChronology#dateNow()->HijrahDate:::
java.time.chrono.HijrahChronology#dateNow(ZoneId)->HijrahDate:::
java.time.chrono.HijrahChronology#dateNow(Clock)->HijrahDate:::
java.time.chrono.HijrahChronology#date(TemporalAccessor)->HijrahDate:::
java.time.chrono.HijrahChronology#localDateTime(TemporalAccessor)->ChronoLocalDateTime<HijrahDate>:::
java.time.chrono.HijrahChronology#zonedDateTime(TemporalAccessor)->ChronoZonedDateTime<HijrahDate>:::
java.time.chrono.HijrahChronology#zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime<HijrahDate>:::
java.time.chrono.HijrahChronology#isLeapYear(long)->boolean:::
java.time.chrono.HijrahChronology#prolepticYear(Era, int)->int:::
java.time.chrono.HijrahChronology#eraOf(int)->HijrahEra:::Creates the HijrahEra object from the numeric value
java.time.chrono.HijrahChronology#eras()->List<Era>:::
java.time.chrono.HijrahChronology#range(ChronoField)->ValueRange:::
java.time.chrono.HijrahChronology#resolveDate(Map<TemporalField, Long>, ResolverStyle)->HijrahDate:::
java.time.chrono.HijrahChronology#checkValidYear(long)->int:::Check the validity of a year.
java.time.chrono.HijrahChronology#checkValidDayOfYear(int)->void:::
java.time.chrono.HijrahChronology#checkValidMonth(int)->void:::
java.time.chrono.HijrahChronology#getHijrahDateInfo(int)->int[]:::Returns an array containing the Hijrah year, month and day  computed from the epoch day.
java.time.chrono.HijrahChronology#getEpochDay(int, int, int)->long:::Return the epoch day computed from Hijrah year, month, and day.
java.time.chrono.HijrahChronology#getDayOfYear(int, int)->int:::Returns day of year for the year and month.
java.time.chrono.HijrahChronology#getMonthLength(int, int)->int:::Returns month length for the year and month.
java.time.chrono.HijrahChronology#getYearLength(int)->int:::Returns year length
java.time.chrono.HijrahChronology#getMinimumYear()->int:::Return the minimum supported Hijrah year.
java.time.chrono.HijrahChronology#getMaximumYear()->int:::Return the maximum supported Hijrah year.
java.time.chrono.HijrahChronology#getMaximumMonthLength()->int:::Returns maximum day-of-month.
java.time.chrono.HijrahChronology#getMinimumMonthLength()->int:::Returns smallest maximum day-of-month.
java.time.chrono.HijrahChronology#getMaximumDayOfYear()->int:::Returns maximum day-of-year.
java.time.chrono.HijrahChronology#getSmallestMaximumDayOfYear()->int:::Returns smallest maximum day-of-year.
java.time.chrono.HijrahChronology#writeReplace()->Object:::Writes the Chronology using a  <a href="../../../serialized-form.html#java.time.chrono.Ser">dedicated serialized form</a>.
java.time.chrono.HijrahDate#of(HijrahChronology, int, int, int)->HijrahDate:::Obtains an instance of {@code HijrahDate} from the Hijrah proleptic year,  month-of-year and day-of-month.
java.time.chrono.HijrahDate#ofEpochDay(HijrahChronology, long)->HijrahDate:::Returns a HijrahDate for the chronology and epochDay.
java.time.chrono.HijrahDate#now()->HijrahDate:::Obtains the current {@code HijrahDate} of the Islamic Umm Al-Qura calendar  in the default time-zone
java.time.chrono.HijrahDate#now(ZoneId)->HijrahDate:::Obtains the current {@code HijrahDate} of the Islamic Umm Al-Qura calendar  in the specified time-zone
java.time.chrono.HijrahDate#now(Clock)->HijrahDate:::Obtains the current {@code HijrahDate} of the Islamic Umm Al-Qura calendar  from the specified clock
java.time.chrono.HijrahDate#of(int, int, int)->HijrahDate:::Obtains a {@code HijrahDate} of the Islamic Umm Al-Qura calendar  from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.HijrahDate#from(TemporalAccessor)->HijrahDate:::Obtains a {@code HijrahDate} of the Islamic Umm Al-Qura calendar from a temporal object
java.time.chrono.HijrahDate#getChronology()->HijrahChronology:::Gets the chronology of this date, which is the Hijrah calendar system
java.time.chrono.HijrahDate#getEra()->HijrahEra:::Gets the era applicable at this date
java.time.chrono.HijrahDate#lengthOfMonth()->int:::Returns the length of the month represented by this date
java.time.chrono.HijrahDate#lengthOfYear()->int:::Returns the length of the year represented by this date
java.time.chrono.HijrahDate#range(TemporalField)->ValueRange:::
java.time.chrono.HijrahDate#getLong(TemporalField)->long:::
java.time.chrono.HijrahDate#with(TemporalField, long)->HijrahDate:::
java.time.chrono.HijrahDate#with(TemporalAdjuster)->HijrahDate:::{@inheritDoc}
java.time.chrono.HijrahDate#withVariant(HijrahChronology)->HijrahDate:::Returns a {@code HijrahDate} with the Chronology requested
java.time.chrono.HijrahDate#plus(TemporalAmount)->HijrahDate:::{@inheritDoc}
java.time.chrono.HijrahDate#minus(TemporalAmount)->HijrahDate:::{@inheritDoc}
java.time.chrono.HijrahDate#toEpochDay()->long:::
java.time.chrono.HijrahDate#isLeapYear()->boolean:::Checks if the year is a leap year, according to the Hijrah calendar system rules.
java.time.chrono.HijrahDate#plusYears(long)->HijrahDate:::
java.time.chrono.HijrahDate#plusMonths(long)->HijrahDate:::
java.time.chrono.HijrahDate#plusWeeks(long)->HijrahDate:::
java.time.chrono.HijrahDate#plusDays(long)->HijrahDate:::
java.time.chrono.HijrahDate#plus(long, TemporalUnit)->HijrahDate:::
java.time.chrono.HijrahDate#minus(long, TemporalUnit)->HijrahDate:::
java.time.chrono.HijrahDate#minusYears(long)->HijrahDate:::
java.time.chrono.HijrahDate#minusMonths(long)->HijrahDate:::
java.time.chrono.HijrahDate#minusWeeks(long)->HijrahDate:::
java.time.chrono.HijrahDate#minusDays(long)->HijrahDate:::
java.time.chrono.HijrahDate#atTime(LocalTime)->ChronoLocalDateTime<HijrahDate>:::
java.time.chrono.HijrahDate#until(ChronoLocalDate)->ChronoPeriod:::
java.time.chrono.HijrahDate#equals(Object)->boolean:::Compares this date to another date, including the chronology
java.time.chrono.HijrahDate#hashCode()->int:::A hash code for this date.
java.time.chrono.HijrahDate#writeExternal(ObjectOutput)->void:::
java.time.chrono.HijrahDate#readExternal(ObjectInput)->HijrahDate:::
java.time.chrono.IsoChronology#getId()->String:::Gets the ID of the chronology - 'ISO'
java.time.chrono.IsoChronology#getCalendarType()->String:::Gets the calendar type of the underlying calendar system - 'iso8601'
java.time.chrono.IsoChronology#date(Era, int, int, int)->LocalDate:::Obtains an ISO local date from the era, year-of-era, month-of-year  and day-of-month fields.
java.time.chrono.IsoChronology#date(int, int, int)->LocalDate:::Obtains an ISO local date from the proleptic-year, month-of-year  and day-of-month fields
java.time.chrono.IsoChronology#dateYearDay(Era, int, int)->LocalDate:::Obtains an ISO local date from the era, year-of-era and day-of-year fields.
java.time.chrono.IsoChronology#dateYearDay(int, int)->LocalDate:::Obtains an ISO local date from the proleptic-year and day-of-year fields
java.time.chrono.IsoChronology#dateEpochDay(long)->LocalDate:::Obtains an ISO local date from the epoch-day
java.time.chrono.IsoChronology#date(TemporalAccessor)->LocalDate:::Obtains an ISO local date from another date-time object
java.time.chrono.IsoChronology#epochSecond(int, int, int, int, int, int, ZoneOffset)->long:::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.chrono.IsoChronology#localDateTime(TemporalAccessor)->LocalDateTime:::Obtains an ISO local date-time from another date-time object
java.time.chrono.IsoChronology#zonedDateTime(TemporalAccessor)->ZonedDateTime:::Obtains an ISO zoned date-time from another date-time object
java.time.chrono.IsoChronology#zonedDateTime(Instant, ZoneId)->ZonedDateTime:::Obtains an ISO zoned date-time in this chronology from an {@code Instant}
java.time.chrono.IsoChronology#dateNow()->LocalDate:::Obtains the current ISO local date from the system clock in the default time-zone
java.time.chrono.IsoChronology#dateNow(ZoneId)->LocalDate:::Obtains the current ISO local date from the system clock in the specified time-zone
java.time.chrono.IsoChronology#dateNow(Clock)->LocalDate:::Obtains the current ISO local date from the specified clock
java.time.chrono.IsoChronology#isLeapYear(long)->boolean:::Checks if the year is a leap year, according to the ISO proleptic  calendar system rules
java.time.chrono.IsoChronology#prolepticYear(Era, int)->int:::
java.time.chrono.IsoChronology#eraOf(int)->IsoEra:::
java.time.chrono.IsoChronology#eras()->List<Era>:::
java.time.chrono.IsoChronology#resolveDate(Map<TemporalField, Long>, ResolverStyle)->LocalDate:::Resolves parsed {@code ChronoField} values into a date during parsing
java.time.chrono.IsoChronology#resolveProlepticMonth(Map<TemporalField, Long>, ResolverStyle)->void:::
java.time.chrono.IsoChronology#resolveYearOfEra(Map<TemporalField, Long>, ResolverStyle)->LocalDate:::
java.time.chrono.IsoChronology#resolveYMD(Map<TemporalField, Long>, ResolverStyle)->LocalDate:::
java.time.chrono.IsoChronology#range(ChronoField)->ValueRange:::
java.time.chrono.IsoChronology#period(int, int, int)->Period:::Obtains a period for this chronology based on years, months and days
java.time.chrono.IsoChronology#writeReplace()->Object:::Writes the Chronology using a  <a href="../../../serialized-form.html#java.time.chrono.Ser">dedicated serialized form</a>.
java.time.chrono.JapaneseChronology#getId()->String:::Gets the ID of the chronology - 'Japanese'
java.time.chrono.JapaneseChronology#getCalendarType()->String:::Gets the calendar type of the underlying calendar system - 'japanese'
java.time.chrono.JapaneseChronology#date(Era, int, int, int)->JapaneseDate:::Obtains a local date in Japanese calendar system from the  era, year-of-era, month-of-year and day-of-month fields
java.time.chrono.JapaneseChronology#date(int, int, int)->JapaneseDate:::Obtains a local date in Japanese calendar system from the  proleptic-year, month-of-year and day-of-month fields
java.time.chrono.JapaneseChronology#dateYearDay(Era, int, int)->JapaneseDate:::Obtains a local date in Japanese calendar system from the  era, year-of-era and day-of-year fields
java.time.chrono.JapaneseChronology#dateYearDay(int, int)->JapaneseDate:::Obtains a local date in Japanese calendar system from the  proleptic-year and day-of-year fields
java.time.chrono.JapaneseChronology#dateEpochDay(long)->JapaneseDate:::Obtains a local date in the Japanese calendar system from the epoch-day.
java.time.chrono.JapaneseChronology#dateNow()->JapaneseDate:::
java.time.chrono.JapaneseChronology#dateNow(ZoneId)->JapaneseDate:::
java.time.chrono.JapaneseChronology#dateNow(Clock)->JapaneseDate:::
java.time.chrono.JapaneseChronology#date(TemporalAccessor)->JapaneseDate:::
java.time.chrono.JapaneseChronology#localDateTime(TemporalAccessor)->ChronoLocalDateTime<JapaneseDate>:::
java.time.chrono.JapaneseChronology#zonedDateTime(TemporalAccessor)->ChronoZonedDateTime<JapaneseDate>:::
java.time.chrono.JapaneseChronology#zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime<JapaneseDate>:::
java.time.chrono.JapaneseChronology#isLeapYear(long)->boolean:::Checks if the specified year is a leap year
java.time.chrono.JapaneseChronology#prolepticYear(Era, int)->int:::
java.time.chrono.JapaneseChronology#eraOf(int)->JapaneseEra:::Returns the calendar system era object from the given numeric value
java.time.chrono.JapaneseChronology#eras()->List<Era>:::
java.time.chrono.JapaneseChronology#getCurrentEra()->JapaneseEra:::
java.time.chrono.JapaneseChronology#range(ChronoField)->ValueRange:::
java.time.chrono.JapaneseChronology#resolveDate(Map<TemporalField, Long>, ResolverStyle)->JapaneseDate:::
java.time.chrono.JapaneseChronology#resolveYearOfEra(Map<TemporalField, Long>, ResolverStyle)->ChronoLocalDate:::
java.time.chrono.JapaneseChronology#writeReplace()->Object:::Writes the Chronology using a  <a href="../../../serialized-form.html#java.time.chrono.Ser">dedicated serialized form</a>.
java.time.chrono.JapaneseDate#now()->JapaneseDate:::Obtains the current {@code JapaneseDate} from the system clock in the default time-zone
java.time.chrono.JapaneseDate#now(ZoneId)->JapaneseDate:::Obtains the current {@code JapaneseDate} from the system clock in the specified time-zone
java.time.chrono.JapaneseDate#now(Clock)->JapaneseDate:::Obtains the current {@code JapaneseDate} from the specified clock
java.time.chrono.JapaneseDate#of(JapaneseEra, int, int, int)->JapaneseDate:::Obtains a {@code JapaneseDate} representing a date in the Japanese calendar  system from the era, year-of-era, month-of-year and day-of-month fields
java.time.chrono.JapaneseDate#of(int, int, int)->JapaneseDate:::Obtains a {@code JapaneseDate} representing a date in the Japanese calendar  system from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.JapaneseDate#ofYearDay(JapaneseEra, int, int)->JapaneseDate:::Obtains a {@code JapaneseDate} representing a date in the Japanese calendar  system from the era, year-of-era and day-of-year fields
java.time.chrono.JapaneseDate#from(TemporalAccessor)->JapaneseDate:::Obtains a {@code JapaneseDate} from a temporal object
java.time.chrono.JapaneseDate#getChronology()->JapaneseChronology:::Gets the chronology of this date, which is the Japanese calendar system
java.time.chrono.JapaneseDate#getEra()->JapaneseEra:::Gets the era applicable at this date
java.time.chrono.JapaneseDate#lengthOfMonth()->int:::Returns the length of the month represented by this date
java.time.chrono.JapaneseDate#lengthOfYear()->int:::
java.time.chrono.JapaneseDate#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.JapaneseDate#range(TemporalField)->ValueRange:::
java.time.chrono.JapaneseDate#getLong(TemporalField)->long:::
java.time.chrono.JapaneseDate#with(TemporalField, long)->JapaneseDate:::
java.time.chrono.JapaneseDate#with(TemporalAdjuster)->JapaneseDate:::{@inheritDoc}
java.time.chrono.JapaneseDate#plus(TemporalAmount)->JapaneseDate:::{@inheritDoc}
java.time.chrono.JapaneseDate#minus(TemporalAmount)->JapaneseDate:::{@inheritDoc}
java.time.chrono.JapaneseDate#plusYears(long)->JapaneseDate:::
java.time.chrono.JapaneseDate#plusMonths(long)->JapaneseDate:::
java.time.chrono.JapaneseDate#plusWeeks(long)->JapaneseDate:::
java.time.chrono.JapaneseDate#plusDays(long)->JapaneseDate:::
java.time.chrono.JapaneseDate#plus(long, TemporalUnit)->JapaneseDate:::
java.time.chrono.JapaneseDate#minus(long, TemporalUnit)->JapaneseDate:::
java.time.chrono.JapaneseDate#minusYears(long)->JapaneseDate:::
java.time.chrono.JapaneseDate#minusMonths(long)->JapaneseDate:::
java.time.chrono.JapaneseDate#minusWeeks(long)->JapaneseDate:::
java.time.chrono.JapaneseDate#minusDays(long)->JapaneseDate:::
java.time.chrono.JapaneseDate#atTime(LocalTime)->ChronoLocalDateTime<JapaneseDate>:::
java.time.chrono.JapaneseDate#until(ChronoLocalDate)->ChronoPeriod:::
java.time.chrono.JapaneseDate#toEpochDay()->long:::
java.time.chrono.JapaneseDate#equals(Object)->boolean:::Compares this date to another date, including the chronology
java.time.chrono.JapaneseDate#hashCode()->int:::A hash code for this date.
java.time.chrono.JapaneseDate#writeExternal(DataOutput)->void:::
java.time.chrono.JapaneseDate#readExternal(DataInput)->JapaneseDate:::
java.time.chrono.JapaneseEra#getPrivateEra()->sun.util.calendar.Era:::Returns the Sun private Era instance corresponding to this {@code JapaneseEra}.
java.time.chrono.JapaneseEra#of(int)->JapaneseEra:::Obtains an instance of {@code JapaneseEra} from an {@code int} value
java.time.chrono.JapaneseEra#valueOf(String)->JapaneseEra:::Returns the {@code JapaneseEra} with the name
java.time.chrono.JapaneseEra#values()->JapaneseEra[]:::Returns an array of JapaneseEras
java.time.chrono.JapaneseEra#getDisplayName(TextStyle, Locale)->String:::{@inheritDoc}
java.time.chrono.JapaneseEra#from(LocalDate)->JapaneseEra:::Obtains an instance of {@code JapaneseEra} from a date.
java.time.chrono.JapaneseEra#toJapaneseEra(sun.util.calendar.Era)->JapaneseEra:::
java.time.chrono.JapaneseEra#privateEraFrom(LocalDate)->sun.util.calendar.Era:::
java.time.chrono.JapaneseEra#getValue()->int:::Gets the numeric era {@code int} value
java.time.chrono.JapaneseEra#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.chrono.JapaneseEra#getAbbreviation()->String:::
java.time.chrono.JapaneseEra#getName()->String:::
java.time.chrono.JapaneseEra#toString()->String:::
java.time.chrono.JapaneseEra#writeExternal(DataOutput)->void:::
java.time.chrono.JapaneseEra#readExternal(DataInput)->JapaneseEra:::
java.time.chrono.MinguoChronology#getId()->String:::Gets the ID of the chronology - 'Minguo'
java.time.chrono.MinguoChronology#getCalendarType()->String:::Gets the calendar type of the underlying calendar system - 'roc'
java.time.chrono.MinguoChronology#date(Era, int, int, int)->MinguoDate:::Obtains a local date in Minguo calendar system from the  era, year-of-era, month-of-year and day-of-month fields.
java.time.chrono.MinguoChronology#date(int, int, int)->MinguoDate:::Obtains a local date in Minguo calendar system from the  proleptic-year, month-of-year and day-of-month fields.
java.time.chrono.MinguoChronology#dateYearDay(Era, int, int)->MinguoDate:::Obtains a local date in Minguo calendar system from the  era, year-of-era and day-of-year fields.
java.time.chrono.MinguoChronology#dateYearDay(int, int)->MinguoDate:::Obtains a local date in Minguo calendar system from the  proleptic-year and day-of-year fields.
java.time.chrono.MinguoChronology#dateEpochDay(long)->MinguoDate:::Obtains a local date in the Minguo calendar system from the epoch-day.
java.time.chrono.MinguoChronology#dateNow()->MinguoDate:::
java.time.chrono.MinguoChronology#dateNow(ZoneId)->MinguoDate:::
java.time.chrono.MinguoChronology#dateNow(Clock)->MinguoDate:::
java.time.chrono.MinguoChronology#date(TemporalAccessor)->MinguoDate:::
java.time.chrono.MinguoChronology#localDateTime(TemporalAccessor)->ChronoLocalDateTime<MinguoDate>:::
java.time.chrono.MinguoChronology#zonedDateTime(TemporalAccessor)->ChronoZonedDateTime<MinguoDate>:::
java.time.chrono.MinguoChronology#zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime<MinguoDate>:::
java.time.chrono.MinguoChronology#isLeapYear(long)->boolean:::Checks if the specified year is a leap year
java.time.chrono.MinguoChronology#prolepticYear(Era, int)->int:::
java.time.chrono.MinguoChronology#eraOf(int)->MinguoEra:::
java.time.chrono.MinguoChronology#eras()->List<Era>:::
java.time.chrono.MinguoChronology#range(ChronoField)->ValueRange:::
java.time.chrono.MinguoChronology#resolveDate(Map<TemporalField, Long>, ResolverStyle)->MinguoDate:::
java.time.chrono.MinguoChronology#writeReplace()->Object:::Writes the Chronology using a  <a href="../../../serialized-form.html#java.time.chrono.Ser">dedicated serialized form</a>.
java.time.chrono.MinguoDate#now()->MinguoDate:::Obtains the current {@code MinguoDate} from the system clock in the default time-zone
java.time.chrono.MinguoDate#now(ZoneId)->MinguoDate:::Obtains the current {@code MinguoDate} from the system clock in the specified time-zone
java.time.chrono.MinguoDate#now(Clock)->MinguoDate:::Obtains the current {@code MinguoDate} from the specified clock
java.time.chrono.MinguoDate#of(int, int, int)->MinguoDate:::Obtains a {@code MinguoDate} representing a date in the Minguo calendar  system from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.MinguoDate#from(TemporalAccessor)->MinguoDate:::Obtains a {@code MinguoDate} from a temporal object
java.time.chrono.MinguoDate#getChronology()->MinguoChronology:::Gets the chronology of this date, which is the Minguo calendar system
java.time.chrono.MinguoDate#getEra()->MinguoEra:::Gets the era applicable at this date
java.time.chrono.MinguoDate#lengthOfMonth()->int:::Returns the length of the month represented by this date
java.time.chrono.MinguoDate#range(TemporalField)->ValueRange:::
java.time.chrono.MinguoDate#getLong(TemporalField)->long:::
java.time.chrono.MinguoDate#with(TemporalField, long)->MinguoDate:::
java.time.chrono.MinguoDate#with(TemporalAdjuster)->MinguoDate:::{@inheritDoc}
java.time.chrono.MinguoDate#plus(TemporalAmount)->MinguoDate:::{@inheritDoc}
java.time.chrono.MinguoDate#minus(TemporalAmount)->MinguoDate:::{@inheritDoc}
java.time.chrono.MinguoDate#plusYears(long)->MinguoDate:::
java.time.chrono.MinguoDate#plusMonths(long)->MinguoDate:::
java.time.chrono.MinguoDate#plusWeeks(long)->MinguoDate:::
java.time.chrono.MinguoDate#plusDays(long)->MinguoDate:::
java.time.chrono.MinguoDate#plus(long, TemporalUnit)->MinguoDate:::
java.time.chrono.MinguoDate#minus(long, TemporalUnit)->MinguoDate:::
java.time.chrono.MinguoDate#minusYears(long)->MinguoDate:::
java.time.chrono.MinguoDate#minusMonths(long)->MinguoDate:::
java.time.chrono.MinguoDate#minusWeeks(long)->MinguoDate:::
java.time.chrono.MinguoDate#minusDays(long)->MinguoDate:::
java.time.chrono.MinguoDate#atTime(LocalTime)->ChronoLocalDateTime<MinguoDate>:::
java.time.chrono.MinguoDate#until(ChronoLocalDate)->ChronoPeriod:::
java.time.chrono.MinguoDate#toEpochDay()->long:::
java.time.chrono.MinguoDate#equals(Object)->boolean:::Compares this date to another date, including the chronology
java.time.chrono.MinguoDate#hashCode()->int:::A hash code for this date.
java.time.chrono.MinguoDate#writeExternal(DataOutput)->void:::
java.time.chrono.MinguoDate#readExternal(DataInput)->MinguoDate:::
java.time.chrono.Ser#writeExternal(ObjectOutput)->void:::Implements the {@code Externalizable} interface to write the object.
java.time.chrono.Ser#readExternal(ObjectInput)->void:::Implements the {@code Externalizable} interface to read the object.
java.time.chrono.Ser#read(ObjectInput)->Object:::
java.time.chrono.ThaiBuddhistChronology#getId()->String:::Gets the ID of the chronology - 'ThaiBuddhist'
java.time.chrono.ThaiBuddhistChronology#getCalendarType()->String:::Gets the calendar type of the underlying calendar system - 'buddhist'
java.time.chrono.ThaiBuddhistChronology#date(Era, int, int, int)->ThaiBuddhistDate:::Obtains a local date in Thai Buddhist calendar system from the  era, year-of-era, month-of-year and day-of-month fields.
java.time.chrono.ThaiBuddhistChronology#date(int, int, int)->ThaiBuddhistDate:::Obtains a local date in Thai Buddhist calendar system from the  proleptic-year, month-of-year and day-of-month fields.
java.time.chrono.ThaiBuddhistChronology#dateYearDay(Era, int, int)->ThaiBuddhistDate:::Obtains a local date in Thai Buddhist calendar system from the  era, year-of-era and day-of-year fields.
java.time.chrono.ThaiBuddhistChronology#dateYearDay(int, int)->ThaiBuddhistDate:::Obtains a local date in Thai Buddhist calendar system from the  proleptic-year and day-of-year fields.
java.time.chrono.ThaiBuddhistChronology#dateEpochDay(long)->ThaiBuddhistDate:::Obtains a local date in the Thai Buddhist calendar system from the epoch-day.
java.time.chrono.ThaiBuddhistChronology#dateNow()->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistChronology#dateNow(ZoneId)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistChronology#dateNow(Clock)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistChronology#date(TemporalAccessor)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistChronology#localDateTime(TemporalAccessor)->ChronoLocalDateTime<ThaiBuddhistDate>:::
java.time.chrono.ThaiBuddhistChronology#zonedDateTime(TemporalAccessor)->ChronoZonedDateTime<ThaiBuddhistDate>:::
java.time.chrono.ThaiBuddhistChronology#zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime<ThaiBuddhistDate>:::
java.time.chrono.ThaiBuddhistChronology#isLeapYear(long)->boolean:::Checks if the specified year is a leap year
java.time.chrono.ThaiBuddhistChronology#prolepticYear(Era, int)->int:::
java.time.chrono.ThaiBuddhistChronology#eraOf(int)->ThaiBuddhistEra:::
java.time.chrono.ThaiBuddhistChronology#eras()->List<Era>:::
java.time.chrono.ThaiBuddhistChronology#range(ChronoField)->ValueRange:::
java.time.chrono.ThaiBuddhistChronology#resolveDate(Map<TemporalField, Long>, ResolverStyle)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistChronology#writeReplace()->Object:::Writes the Chronology using a  <a href="../../../serialized-form.html#java.time.chrono.Ser">dedicated serialized form</a>.
java.time.chrono.ThaiBuddhistDate#now()->ThaiBuddhistDate:::Obtains the current {@code ThaiBuddhistDate} from the system clock in the default time-zone
java.time.chrono.ThaiBuddhistDate#now(ZoneId)->ThaiBuddhistDate:::Obtains the current {@code ThaiBuddhistDate} from the system clock in the specified time-zone
java.time.chrono.ThaiBuddhistDate#now(Clock)->ThaiBuddhistDate:::Obtains the current {@code ThaiBuddhistDate} from the specified clock
java.time.chrono.ThaiBuddhistDate#of(int, int, int)->ThaiBuddhistDate:::Obtains a {@code ThaiBuddhistDate} representing a date in the Thai Buddhist calendar  system from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.ThaiBuddhistDate#from(TemporalAccessor)->ThaiBuddhistDate:::Obtains a {@code ThaiBuddhistDate} from a temporal object
java.time.chrono.ThaiBuddhistDate#getChronology()->ThaiBuddhistChronology:::Gets the chronology of this date, which is the Thai Buddhist calendar system
java.time.chrono.ThaiBuddhistDate#getEra()->ThaiBuddhistEra:::Gets the era applicable at this date
java.time.chrono.ThaiBuddhistDate#lengthOfMonth()->int:::Returns the length of the month represented by this date
java.time.chrono.ThaiBuddhistDate#range(TemporalField)->ValueRange:::
java.time.chrono.ThaiBuddhistDate#getLong(TemporalField)->long:::
java.time.chrono.ThaiBuddhistDate#with(TemporalField, long)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#with(TemporalAdjuster)->ThaiBuddhistDate:::{@inheritDoc}
java.time.chrono.ThaiBuddhistDate#plus(TemporalAmount)->ThaiBuddhistDate:::{@inheritDoc}
java.time.chrono.ThaiBuddhistDate#minus(TemporalAmount)->ThaiBuddhistDate:::{@inheritDoc}
java.time.chrono.ThaiBuddhistDate#plusYears(long)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#plusMonths(long)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#plusWeeks(long)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#plusDays(long)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#plus(long, TemporalUnit)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#minus(long, TemporalUnit)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#minusYears(long)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#minusMonths(long)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#minusWeeks(long)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#minusDays(long)->ThaiBuddhistDate:::
java.time.chrono.ThaiBuddhistDate#atTime(LocalTime)->ChronoLocalDateTime<ThaiBuddhistDate>:::
java.time.chrono.ThaiBuddhistDate#until(ChronoLocalDate)->ChronoPeriod:::
java.time.chrono.ThaiBuddhistDate#toEpochDay()->long:::
java.time.chrono.ThaiBuddhistDate#equals(Object)->boolean:::Compares this date to another date, including the chronology
java.time.chrono.ThaiBuddhistDate#hashCode()->int:::A hash code for this date.
java.time.chrono.ThaiBuddhistDate#writeExternal(DataOutput)->void:::
java.time.chrono.ThaiBuddhistDate#readExternal(DataInput)->ThaiBuddhistDate:::

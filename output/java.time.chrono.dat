java.time.chrono.AbstractChronology#registerChrono(Chronology)->Chronology:::Register a Chronology by its ID and type for lookup by #of(String)
java.time.chrono.AbstractChronology#registerChrono(Chronology, String)->Chronology:::Register a Chronology by ID and type for lookup by #of(String)
java.time.chrono.AbstractChronology#ofLocale(Locale)->Chronology:::Obtains an instance of Chronology from a locale
java.time.chrono.AbstractChronology#of(String)->Chronology:::Obtains an instance of Chronology from a chronology ID or calendar system type
java.time.chrono.AbstractChronology#getAvailableChronologies()->Set:::Returns the available chronologies
java.time.chrono.AbstractChronology#resolveDate(Map, ResolverStyle)->ChronoLocalDate:::Resolves parsed ChronoField values into a date during parsing
java.time.chrono.AbstractChronology#resolveProlepticMonth(Map, ResolverStyle)->void::: abstract chronology resolve proleptic month
java.time.chrono.AbstractChronology#resolveYearOfEra(Map, ResolverStyle)->ChronoLocalDate::: abstract chronology resolve year of era
java.time.chrono.AbstractChronology#resolveYMD(Map, ResolverStyle)->ChronoLocalDate::: abstract chronology resolve d
java.time.chrono.AbstractChronology#resolveYD(Map, ResolverStyle)->ChronoLocalDate::: abstract chronology resolve d
java.time.chrono.AbstractChronology#resolveYMAA(Map, ResolverStyle)->ChronoLocalDate::: abstract chronology resolve a
java.time.chrono.AbstractChronology#resolveYMAD(Map, ResolverStyle)->ChronoLocalDate::: abstract chronology resolve d
java.time.chrono.AbstractChronology#resolveYAA(Map, ResolverStyle)->ChronoLocalDate::: abstract chronology resolve a
java.time.chrono.AbstractChronology#resolveYAD(Map, ResolverStyle)->ChronoLocalDate::: abstract chronology resolve d
java.time.chrono.AbstractChronology#resolveAligned(ChronoLocalDate, long, long, long)->ChronoLocalDate::: abstract chronology resolve aligned
java.time.chrono.AbstractChronology#addFieldValue(Map, ChronoField, long)->void:::Adds a field-value pair to the map, checking for conflicts
java.time.chrono.AbstractChronology#compareTo(Chronology)->int:::Compares this chronology to another chronology
java.time.chrono.AbstractChronology#equals(Object)->boolean:::Checks if this chronology is equal to another chronology
java.time.chrono.AbstractChronology#hashCode()->int:::A hash code for this chronology
java.time.chrono.AbstractChronology#toString()->String:::Outputs this chronology as a String, using the chronology ID.
java.time.chrono.AbstractChronology#writeReplace()->Object:::Writes the Chronology using a dedicated serialized form
java.time.chrono.AbstractChronology#writeExternal(DataOutput)->void::: abstract chronology write external
java.time.chrono.AbstractChronology#readExternal(DataInput)->Chronology::: abstract chronology read external
java.time.chrono.ChronoLocalDate#timeLineOrder()->Comparator:::Gets a comparator that compares ChronoLocalDate in time-line order ignoring the chronology
java.time.chrono.ChronoLocalDate#from(TemporalAccessor)->ChronoLocalDate:::Obtains an instance of ChronoLocalDate from a temporal object
java.time.chrono.ChronoLocalDate#getChronology()->Chronology:::Gets the chronology of this date
java.time.chrono.ChronoLocalDate#getEra()->Era:::Gets the era, as defined by the chronology
java.time.chrono.ChronoLocalDate#isLeapYear()->boolean:::Checks if the year is a leap year, as defined by the calendar system
java.time.chrono.ChronoLocalDate#lengthOfMonth()->int:::Returns the length of the month represented by this date, as defined by the calendar system
java.time.chrono.ChronoLocalDate#lengthOfYear()->int:::Returns the length of the year represented by this date, as defined by the calendar system
java.time.chrono.ChronoLocalDate#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.ChronoLocalDate#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.chrono.ChronoLocalDate#with(TemporalAdjuster)->ChronoLocalDate::: chrono local date with
java.time.chrono.ChronoLocalDate#with(TemporalField, long)->ChronoLocalDate::: chrono local date with
java.time.chrono.ChronoLocalDate#plus(TemporalAmount)->ChronoLocalDate::: chrono local date plus
java.time.chrono.ChronoLocalDate#plus(long, TemporalUnit)->ChronoLocalDate::: chrono local date plus
java.time.chrono.ChronoLocalDate#minus(TemporalAmount)->ChronoLocalDate::: chrono local date minus
java.time.chrono.ChronoLocalDate#minus(long, TemporalUnit)->ChronoLocalDate::: chrono local date minus
java.time.chrono.ChronoLocalDate#query(TemporalQuery)->R:::Queries this date using the specified query
java.time.chrono.ChronoLocalDate#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same date as this object
java.time.chrono.ChronoLocalDate#until(Temporal, TemporalUnit)->long:::Calculates the amount of time until another date in terms of the specified unit
java.time.chrono.ChronoLocalDate#until(ChronoLocalDate)->ChronoPeriod:::Calculates the period between this date and another date as a ChronoPeriod
java.time.chrono.ChronoLocalDate#format(DateTimeFormatter)->String:::Formats this date using the specified formatter
java.time.chrono.ChronoLocalDate#atTime(LocalTime)->ChronoLocalDateTime:::Combines this date with a time to create a ChronoLocalDateTime
java.time.chrono.ChronoLocalDate#toEpochDay()->long:::Converts this date to the Epoch Day
java.time.chrono.ChronoLocalDate#compareTo(ChronoLocalDate)->int:::Compares this date to another date, including the chronology
java.time.chrono.ChronoLocalDate#isAfter(ChronoLocalDate)->boolean:::Checks if this date is after the specified date ignoring the chronology
java.time.chrono.ChronoLocalDate#isBefore(ChronoLocalDate)->boolean:::Checks if this date is before the specified date ignoring the chronology
java.time.chrono.ChronoLocalDate#isEqual(ChronoLocalDate)->boolean:::Checks if this date is equal to the specified date ignoring the chronology
java.time.chrono.ChronoLocalDate#equals(Object)->boolean:::Checks if this date is equal to another date, including the chronology
java.time.chrono.ChronoLocalDate#hashCode()->int:::A hash code for this date.
java.time.chrono.ChronoLocalDate#toString()->String:::Outputs this date as a String
java.time.chrono.ChronoLocalDateImpl#ensureValid(Chronology, Temporal)->D:::Casts the Temporal to ChronoLocalDate ensuring it bas the specified chronology.
java.time.chrono.ChronoLocalDateImpl#with(TemporalAdjuster)->D::: chrono local date impl with
java.time.chrono.ChronoLocalDateImpl#with(TemporalField, long)->D::: chrono local date impl with
java.time.chrono.ChronoLocalDateImpl#plus(TemporalAmount)->D::: chrono local date impl plus
java.time.chrono.ChronoLocalDateImpl#plus(long, TemporalUnit)->D::: chrono local date impl plus
java.time.chrono.ChronoLocalDateImpl#minus(TemporalAmount)->D::: chrono local date impl minus
java.time.chrono.ChronoLocalDateImpl#minus(long, TemporalUnit)->D::: chrono local date impl minus
java.time.chrono.ChronoLocalDateImpl#plusYears(long)->D:::Returns a copy of this date with the specified number of years added
java.time.chrono.ChronoLocalDateImpl#plusMonths(long)->D:::Returns a copy of this date with the specified number of months added
java.time.chrono.ChronoLocalDateImpl#plusWeeks(long)->D:::Returns a copy of this date with the specified number of weeks added
java.time.chrono.ChronoLocalDateImpl#plusDays(long)->D:::Returns a copy of this date with the specified number of days added
java.time.chrono.ChronoLocalDateImpl#minusYears(long)->D:::Returns a copy of this date with the specified number of years subtracted
java.time.chrono.ChronoLocalDateImpl#minusMonths(long)->D:::Returns a copy of this date with the specified number of months subtracted
java.time.chrono.ChronoLocalDateImpl#minusWeeks(long)->D:::Returns a copy of this date with the specified number of weeks subtracted
java.time.chrono.ChronoLocalDateImpl#minusDays(long)->D:::Returns a copy of this date with the specified number of days subtracted
java.time.chrono.ChronoLocalDateImpl#until(Temporal, TemporalUnit)->long::: chrono local date impl until
java.time.chrono.ChronoLocalDateImpl#equals(Object)->boolean::: chrono local date impl equals
java.time.chrono.ChronoLocalDateImpl#hashCode()->int::: chrono local date impl hash code
java.time.chrono.ChronoLocalDateImpl#toString()->String::: chrono local date impl to string
java.time.chrono.ChronoLocalDateTime#timeLineOrder()->Comparator>:::Gets a comparator that compares ChronoLocalDateTime in time-line order ignoring the chronology
java.time.chrono.ChronoLocalDateTime#from(TemporalAccessor)->ChronoLocalDateTime:::Obtains an instance of ChronoLocalDateTime from a temporal object
java.time.chrono.ChronoLocalDateTime#getChronology()->Chronology:::Gets the chronology of this date-time
java.time.chrono.ChronoLocalDateTime#toLocalDate()->D:::Gets the local date part of this date-time
java.time.chrono.ChronoLocalDateTime#toLocalTime()->LocalTime:::Gets the local time part of this date-time
java.time.chrono.ChronoLocalDateTime#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.ChronoLocalDateTime#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.chrono.ChronoLocalDateTime#with(TemporalAdjuster)->ChronoLocalDateTime::: chrono local date time with
java.time.chrono.ChronoLocalDateTime#with(TemporalField, long)->ChronoLocalDateTime::: chrono local date time with
java.time.chrono.ChronoLocalDateTime#plus(TemporalAmount)->ChronoLocalDateTime::: chrono local date time plus
java.time.chrono.ChronoLocalDateTime#plus(long, TemporalUnit)->ChronoLocalDateTime::: chrono local date time plus
java.time.chrono.ChronoLocalDateTime#minus(TemporalAmount)->ChronoLocalDateTime::: chrono local date time minus
java.time.chrono.ChronoLocalDateTime#minus(long, TemporalUnit)->ChronoLocalDateTime::: chrono local date time minus
java.time.chrono.ChronoLocalDateTime#query(TemporalQuery)->R:::Queries this date-time using the specified query
java.time.chrono.ChronoLocalDateTime#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same date and time as this object
java.time.chrono.ChronoLocalDateTime#format(DateTimeFormatter)->String:::Formats this date-time using the specified formatter
java.time.chrono.ChronoLocalDateTime#atZone(ZoneId)->ChronoZonedDateTime:::Combines this time with a time-zone to create a ChronoZonedDateTime
java.time.chrono.ChronoLocalDateTime#toInstant(ZoneOffset)->Instant:::Converts this date-time to an Instant
java.time.chrono.ChronoLocalDateTime#toEpochSecond(ZoneOffset)->long:::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.chrono.ChronoLocalDateTime#compareTo(ChronoLocalDateTime)->int:::Compares this date-time to another date-time, including the chronology
java.time.chrono.ChronoLocalDateTime#isAfter(ChronoLocalDateTime)->boolean:::Checks if this date-time is after the specified date-time ignoring the chronology
java.time.chrono.ChronoLocalDateTime#isBefore(ChronoLocalDateTime)->boolean:::Checks if this date-time is before the specified date-time ignoring the chronology
java.time.chrono.ChronoLocalDateTime#isEqual(ChronoLocalDateTime)->boolean:::Checks if this date-time is equal to the specified date-time ignoring the chronology
java.time.chrono.ChronoLocalDateTime#equals(Object)->boolean:::Checks if this date-time is equal to another date-time, including the chronology
java.time.chrono.ChronoLocalDateTime#hashCode()->int:::A hash code for this date-time.
java.time.chrono.ChronoLocalDateTime#toString()->String:::Outputs this date-time as a String
java.time.chrono.ChronoLocalDateTimeImpl#of(R, LocalTime)->ChronoLocalDateTimeImpl:::Obtains an instance of ChronoLocalDateTime from a date and time.
java.time.chrono.ChronoLocalDateTimeImpl#ensureValid(Chronology, Temporal)->ChronoLocalDateTimeImpl:::Casts the Temporal to ChronoLocalDateTime ensuring it bas the specified chronology.
java.time.chrono.ChronoLocalDateTimeImpl#toLocalDate()->D::: chrono local date time impl to local date
java.time.chrono.ChronoLocalDateTimeImpl#toLocalTime()->LocalTime::: chrono local date time impl to local time
java.time.chrono.ChronoLocalDateTimeImpl#isSupported(TemporalField)->boolean::: chrono local date time impl is supported
java.time.chrono.ChronoLocalDateTimeImpl#range(TemporalField)->ValueRange::: chrono local date time impl range
java.time.chrono.ChronoLocalDateTimeImpl#get(TemporalField)->int::: chrono local date time impl get
java.time.chrono.ChronoLocalDateTimeImpl#getLong(TemporalField)->long::: chrono local date time impl get long
java.time.chrono.ChronoLocalDateTimeImpl#with(TemporalAdjuster)->ChronoLocalDateTimeImpl::: chrono local date time impl with
java.time.chrono.ChronoLocalDateTimeImpl#with(TemporalField, long)->ChronoLocalDateTimeImpl::: chrono local date time impl with
java.time.chrono.ChronoLocalDateTimeImpl#plus(long, TemporalUnit)->ChronoLocalDateTimeImpl::: chrono local date time impl plus
java.time.chrono.ChronoLocalDateTimeImpl#plusSeconds(long)->ChronoLocalDateTimeImpl::: chrono local date time impl plus seconds
java.time.chrono.ChronoLocalDateTimeImpl#atZone(ZoneId)->ChronoZonedDateTime::: chrono local date time impl at zone
java.time.chrono.ChronoLocalDateTimeImpl#until(Temporal, TemporalUnit)->long::: chrono local date time impl until
java.time.chrono.ChronoLocalDateTimeImpl#writeExternal(ObjectOutput)->void::: chrono local date time impl write external
java.time.chrono.ChronoLocalDateTimeImpl#readExternal(ObjectInput)->ChronoLocalDateTime::: chrono local date time impl read external
java.time.chrono.ChronoLocalDateTimeImpl#equals(Object)->boolean::: chrono local date time impl equals
java.time.chrono.ChronoLocalDateTimeImpl#hashCode()->int::: chrono local date time impl hash code
java.time.chrono.ChronoLocalDateTimeImpl#toString()->String::: chrono local date time impl to string
java.time.chrono.Chronology#from(TemporalAccessor)->Chronology:::Obtains an instance of Chronology from a temporal object
java.time.chrono.Chronology#ofLocale(Locale)->Chronology:::Obtains an instance of Chronology from a locale
java.time.chrono.Chronology#of(String)->Chronology:::Obtains an instance of Chronology from a chronology ID or calendar system type
java.time.chrono.Chronology#getAvailableChronologies()->Set:::Returns the available chronologies
java.time.chrono.Chronology#getId()->String:::Gets the ID of the chronology
java.time.chrono.Chronology#getCalendarType()->String:::Gets the calendar type of the calendar system
java.time.chrono.Chronology#date(Era, int, int, int)->ChronoLocalDate:::Obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields.
java.time.chrono.Chronology#date(int, int, int)->ChronoLocalDate:::Obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields.
java.time.chrono.Chronology#dateYearDay(Era, int, int)->ChronoLocalDate:::Obtains a local date in this chronology from the era, year-of-era and day-of-year fields.
java.time.chrono.Chronology#dateYearDay(int, int)->ChronoLocalDate:::Obtains a local date in this chronology from the proleptic-year and day-of-year fields.
java.time.chrono.Chronology#dateEpochDay(long)->ChronoLocalDate:::Obtains a local date in this chronology from the epoch-day
java.time.chrono.Chronology#dateNow()->ChronoLocalDate:::Obtains the current local date in this chronology from the system clock in the default time-zone
java.time.chrono.Chronology#dateNow(ZoneId)->ChronoLocalDate:::Obtains the current local date in this chronology from the system clock in the specified time-zone
java.time.chrono.Chronology#dateNow(Clock)->ChronoLocalDate:::Obtains the current local date in this chronology from the specified clock
java.time.chrono.Chronology#date(TemporalAccessor)->ChronoLocalDate:::Obtains a local date in this chronology from another temporal object
java.time.chrono.Chronology#localDateTime(TemporalAccessor)->ChronoLocalDateTime:::Obtains a local date-time in this chronology from another temporal object
java.time.chrono.Chronology#zonedDateTime(TemporalAccessor)->ChronoZonedDateTime:::Obtains a ChronoZonedDateTime in this chronology from another temporal object
java.time.chrono.Chronology#zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime:::Obtains a ChronoZonedDateTime in this chronology from an Instant
java.time.chrono.Chronology#isLeapYear(long)->boolean:::Checks if the specified year is a leap year
java.time.chrono.Chronology#prolepticYear(Era, int)->int:::Calculates the proleptic-year given the era and year-of-era
java.time.chrono.Chronology#eraOf(int)->Era:::Creates the chronology era object from the numeric value
java.time.chrono.Chronology#eras()->List:::Gets the list of eras for the chronology
java.time.chrono.Chronology#range(ChronoField)->ValueRange:::Gets the range of valid values for the specified field
java.time.chrono.Chronology#getDisplayName(TextStyle, Locale)->String:::Gets the textual representation of this chronology
java.time.chrono.Chronology#resolveDate(Map, ResolverStyle)->ChronoLocalDate:::Resolves parsed ChronoField values into a date during parsing
java.time.chrono.Chronology#period(int, int, int)->ChronoPeriod:::Obtains a period for this chronology based on years, months and days
java.time.chrono.Chronology#epochSecond(int, int, int, int, int, int, ZoneOffset)->long:::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.chrono.Chronology#epochSecond(Era, int, int, int, int, int, int, ZoneOffset)->long:::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.chrono.Chronology#compareTo(Chronology)->int:::Compares this chronology to another chronology
java.time.chrono.Chronology#equals(Object)->boolean:::Checks if this chronology is equal to another chronology
java.time.chrono.Chronology#hashCode()->int:::A hash code for this chronology
java.time.chrono.Chronology#toString()->String:::Outputs this chronology as a String
java.time.chrono.ChronoPeriod#between(ChronoLocalDate, ChronoLocalDate)->ChronoPeriod:::Obtains a ChronoPeriod consisting of amount of time between two dates
java.time.chrono.ChronoPeriod#get(TemporalUnit)->long:::Gets the value of the requested unit
java.time.chrono.ChronoPeriod#getUnits()->List:::Gets the set of units supported by this period
java.time.chrono.ChronoPeriod#getChronology()->Chronology:::Gets the chronology that defines the meaning of the supported units
java.time.chrono.ChronoPeriod#isZero()->boolean:::Checks if all the supported units of this period are zero.
java.time.chrono.ChronoPeriod#isNegative()->boolean:::Checks if any of the supported units of this period are negative.
java.time.chrono.ChronoPeriod#plus(TemporalAmount)->ChronoPeriod:::Returns a copy of this period with the specified period added
java.time.chrono.ChronoPeriod#minus(TemporalAmount)->ChronoPeriod:::Returns a copy of this period with the specified period subtracted
java.time.chrono.ChronoPeriod#multipliedBy(int)->ChronoPeriod:::Returns a new instance with each amount in this period in this period multiplied by the specified scalar
java.time.chrono.ChronoPeriod#negated()->ChronoPeriod:::Returns a new instance with each amount in this period negated
java.time.chrono.ChronoPeriod#normalized()->ChronoPeriod:::Returns a copy of this period with the amounts of each unit normalized
java.time.chrono.ChronoPeriod#addTo(Temporal)->Temporal:::Adds this period to the specified temporal object
java.time.chrono.ChronoPeriod#subtractFrom(Temporal)->Temporal:::Subtracts this period from the specified temporal object
java.time.chrono.ChronoPeriod#equals(Object)->boolean:::Checks if this period is equal to another period, including the chronology
java.time.chrono.ChronoPeriod#hashCode()->int:::A hash code for this period.
java.time.chrono.ChronoPeriod#toString()->String:::Outputs this period as a String
java.time.chrono.ChronoPeriodImpl#get(TemporalUnit)->long::: chrono period impl get
java.time.chrono.ChronoPeriodImpl#getUnits()->List::: chrono period impl get units
java.time.chrono.ChronoPeriodImpl#getChronology()->Chronology::: chrono period impl get chronology
java.time.chrono.ChronoPeriodImpl#isZero()->boolean::: chrono period impl is zero
java.time.chrono.ChronoPeriodImpl#isNegative()->boolean::: chrono period impl is negative
java.time.chrono.ChronoPeriodImpl#plus(TemporalAmount)->ChronoPeriod::: chrono period impl plus
java.time.chrono.ChronoPeriodImpl#minus(TemporalAmount)->ChronoPeriod::: chrono period impl minus
java.time.chrono.ChronoPeriodImpl#multipliedBy(int)->ChronoPeriod::: chrono period impl multiplied by
java.time.chrono.ChronoPeriodImpl#normalized()->ChronoPeriod::: chrono period impl normalized
java.time.chrono.ChronoPeriodImpl#addTo(Temporal)->Temporal::: chrono period impl add to
java.time.chrono.ChronoPeriodImpl#subtractFrom(Temporal)->Temporal::: chrono period impl subtract from
java.time.chrono.ChronoPeriodImpl#equals(Object)->boolean::: chrono period impl equals
java.time.chrono.ChronoPeriodImpl#hashCode()->int::: chrono period impl hash code
java.time.chrono.ChronoPeriodImpl#toString()->String::: chrono period impl to string
java.time.chrono.ChronoPeriodImpl#writeReplace()->Object:::Writes the Chronology using a dedicated serialized form
java.time.chrono.ChronoPeriodImpl#writeExternal(DataOutput)->void::: chrono period impl write external
java.time.chrono.ChronoPeriodImpl#readExternal(DataInput)->ChronoPeriodImpl::: chrono period impl read external
java.time.chrono.ChronoZonedDateTime#timeLineOrder()->Comparator>:::Gets a comparator that compares ChronoZonedDateTime in time-line order ignoring the chronology
java.time.chrono.ChronoZonedDateTime#from(TemporalAccessor)->ChronoZonedDateTime:::Obtains an instance of ChronoZonedDateTime from a temporal object
java.time.chrono.ChronoZonedDateTime#range(TemporalField)->ValueRange::: chrono zoned date time range
java.time.chrono.ChronoZonedDateTime#get(TemporalField)->int::: chrono zoned date time get
java.time.chrono.ChronoZonedDateTime#getLong(TemporalField)->long::: chrono zoned date time get long
java.time.chrono.ChronoZonedDateTime#toLocalDate()->D:::Gets the local date part of this date-time
java.time.chrono.ChronoZonedDateTime#toLocalTime()->LocalTime:::Gets the local time part of this date-time
java.time.chrono.ChronoZonedDateTime#toLocalDateTime()->ChronoLocalDateTime:::Gets the local date-time part of this date-time
java.time.chrono.ChronoZonedDateTime#getChronology()->Chronology:::Gets the chronology of this date-time
java.time.chrono.ChronoZonedDateTime#getOffset()->ZoneOffset:::Gets the zone offset, such as '+01:00'
java.time.chrono.ChronoZonedDateTime#getZone()->ZoneId:::Gets the zone ID, such as 'Europe/Paris'
java.time.chrono.ChronoZonedDateTime#withEarlierOffsetAtOverlap()->ChronoZonedDateTime:::Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap
java.time.chrono.ChronoZonedDateTime#withLaterOffsetAtOverlap()->ChronoZonedDateTime:::Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap
java.time.chrono.ChronoZonedDateTime#withZoneSameLocal(ZoneId)->ChronoZonedDateTime:::Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible
java.time.chrono.ChronoZonedDateTime#withZoneSameInstant(ZoneId)->ChronoZonedDateTime:::Returns a copy of this date-time with a different time-zone, retaining the instant
java.time.chrono.ChronoZonedDateTime#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.ChronoZonedDateTime#isSupported(TemporalUnit)->boolean:::Checks if the specified unit is supported
java.time.chrono.ChronoZonedDateTime#with(TemporalAdjuster)->ChronoZonedDateTime::: chrono zoned date time with
java.time.chrono.ChronoZonedDateTime#with(TemporalField, long)->ChronoZonedDateTime::: chrono zoned date time with
java.time.chrono.ChronoZonedDateTime#plus(TemporalAmount)->ChronoZonedDateTime::: chrono zoned date time plus
java.time.chrono.ChronoZonedDateTime#plus(long, TemporalUnit)->ChronoZonedDateTime::: chrono zoned date time plus
java.time.chrono.ChronoZonedDateTime#minus(TemporalAmount)->ChronoZonedDateTime::: chrono zoned date time minus
java.time.chrono.ChronoZonedDateTime#minus(long, TemporalUnit)->ChronoZonedDateTime::: chrono zoned date time minus
java.time.chrono.ChronoZonedDateTime#query(TemporalQuery)->R:::Queries this date-time using the specified query
java.time.chrono.ChronoZonedDateTime#format(DateTimeFormatter)->String:::Formats this date-time using the specified formatter
java.time.chrono.ChronoZonedDateTime#toInstant()->Instant:::Converts this date-time to an Instant
java.time.chrono.ChronoZonedDateTime#toEpochSecond()->long:::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.chrono.ChronoZonedDateTime#compareTo(ChronoZonedDateTime)->int:::Compares this date-time to another date-time, including the chronology
java.time.chrono.ChronoZonedDateTime#isBefore(ChronoZonedDateTime)->boolean:::Checks if the instant of this date-time is before that of the specified date-time
java.time.chrono.ChronoZonedDateTime#isAfter(ChronoZonedDateTime)->boolean:::Checks if the instant of this date-time is after that of the specified date-time
java.time.chrono.ChronoZonedDateTime#isEqual(ChronoZonedDateTime)->boolean:::Checks if the instant of this date-time is equal to that of the specified date-time
java.time.chrono.ChronoZonedDateTime#equals(Object)->boolean:::Checks if this date-time is equal to another date-time
java.time.chrono.ChronoZonedDateTime#hashCode()->int:::A hash code for this date-time.
java.time.chrono.ChronoZonedDateTime#toString()->String:::Outputs this date-time as a String
java.time.chrono.ChronoZonedDateTimeImpl#ofBest(ChronoLocalDateTimeImpl, ZoneId, ZoneOffset)->ChronoZonedDateTime:::Obtains an instance from a local date-time using the preferred offset if possible.
java.time.chrono.ChronoZonedDateTimeImpl#ofInstant(Chronology, Instant, ZoneId)->ChronoZonedDateTimeImpl:::Obtains an instance from an instant using the specified time-zone.
java.time.chrono.ChronoZonedDateTimeImpl#ensureValid(Chronology, Temporal)->ChronoZonedDateTimeImpl:::Casts the Temporal to ChronoZonedDateTimeImpl ensuring it bas the specified chronology.
java.time.chrono.ChronoZonedDateTimeImpl#getOffset()->ZoneOffset::: chrono zoned date time impl get offset
java.time.chrono.ChronoZonedDateTimeImpl#withEarlierOffsetAtOverlap()->ChronoZonedDateTime::: chrono zoned date time impl with earlier offset at overlap
java.time.chrono.ChronoZonedDateTimeImpl#withLaterOffsetAtOverlap()->ChronoZonedDateTime::: chrono zoned date time impl with later offset at overlap
java.time.chrono.ChronoZonedDateTimeImpl#toLocalDateTime()->ChronoLocalDateTime::: chrono zoned date time impl to local date time
java.time.chrono.ChronoZonedDateTimeImpl#getZone()->ZoneId::: chrono zoned date time impl get zone
java.time.chrono.ChronoZonedDateTimeImpl#withZoneSameLocal(ZoneId)->ChronoZonedDateTime::: chrono zoned date time impl with zone same local
java.time.chrono.ChronoZonedDateTimeImpl#withZoneSameInstant(ZoneId)->ChronoZonedDateTime::: chrono zoned date time impl with zone same instant
java.time.chrono.ChronoZonedDateTimeImpl#isSupported(TemporalField)->boolean::: chrono zoned date time impl is supported
java.time.chrono.ChronoZonedDateTimeImpl#with(TemporalField, long)->ChronoZonedDateTime::: chrono zoned date time impl with
java.time.chrono.ChronoZonedDateTimeImpl#plus(long, TemporalUnit)->ChronoZonedDateTime::: chrono zoned date time impl plus
java.time.chrono.ChronoZonedDateTimeImpl#until(Temporal, TemporalUnit)->long::: chrono zoned date time impl until
java.time.chrono.ChronoZonedDateTimeImpl#writeExternal(ObjectOutput)->void::: chrono zoned date time impl write external
java.time.chrono.ChronoZonedDateTimeImpl#readExternal(ObjectInput)->ChronoZonedDateTime::: chrono zoned date time impl read external
java.time.chrono.ChronoZonedDateTimeImpl#equals(Object)->boolean::: chrono zoned date time impl equals
java.time.chrono.ChronoZonedDateTimeImpl#hashCode()->int::: chrono zoned date time impl hash code
java.time.chrono.ChronoZonedDateTimeImpl#toString()->String::: chrono zoned date time impl to string
java.time.chrono.Era#getValue()->int:::Gets the numeric value associated with the era as defined by the chronology
java.time.chrono.Era#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.Era#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.chrono.Era#get(TemporalField)->int:::Gets the value of the specified field from this era as an int
java.time.chrono.Era#getLong(TemporalField)->long:::Gets the value of the specified field from this era as a long
java.time.chrono.Era#query(TemporalQuery)->R:::Queries this era using the specified query
java.time.chrono.Era#adjustInto(Temporal)->Temporal:::Adjusts the specified temporal object to have the same era as this object
java.time.chrono.Era#getDisplayName(TextStyle, Locale)->String:::Gets the textual representation of this era
java.time.chrono.HijrahChronology#getId()->String:::Gets the ID of the chronology
java.time.chrono.HijrahChronology#getCalendarType()->String:::Gets the calendar type of the Islamic calendar
java.time.chrono.HijrahChronology#date(Era, int, int, int)->HijrahDate:::Obtains a local date in Hijrah calendar system from the era, year-of-era, month-of-year and day-of-month fields.
java.time.chrono.HijrahChronology#date(int, int, int)->HijrahDate:::Obtains a local date in Hijrah calendar system from the proleptic-year, month-of-year and day-of-month fields.
java.time.chrono.HijrahChronology#dateYearDay(Era, int, int)->HijrahDate:::Obtains a local date in Hijrah calendar system from the era, year-of-era and day-of-year fields.
java.time.chrono.HijrahChronology#dateYearDay(int, int)->HijrahDate:::Obtains a local date in Hijrah calendar system from the proleptic-year and day-of-year fields.
java.time.chrono.HijrahChronology#dateEpochDay(long)->HijrahDate:::Obtains a local date in the Hijrah calendar system from the epoch-day.
java.time.chrono.HijrahChronology#dateNow()->HijrahDate::: hijrah chronology date now
java.time.chrono.HijrahChronology#dateNow(ZoneId)->HijrahDate::: hijrah chronology date now
java.time.chrono.HijrahChronology#dateNow(Clock)->HijrahDate::: hijrah chronology date now
java.time.chrono.HijrahChronology#date(TemporalAccessor)->HijrahDate::: hijrah chronology date
java.time.chrono.HijrahChronology#localDateTime(TemporalAccessor)->ChronoLocalDateTime::: hijrah chronology local date time
java.time.chrono.HijrahChronology#zonedDateTime(TemporalAccessor)->ChronoZonedDateTime::: hijrah chronology zoned date time
java.time.chrono.HijrahChronology#zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime::: hijrah chronology zoned date time
java.time.chrono.HijrahChronology#isLeapYear(long)->boolean::: hijrah chronology is leap year
java.time.chrono.HijrahChronology#prolepticYear(Era, int)->int::: hijrah chronology proleptic year
java.time.chrono.HijrahChronology#eraOf(int)->HijrahEra:::Creates the HijrahEra object from the numeric value
java.time.chrono.HijrahChronology#eras()->List::: hijrah chronology eras
java.time.chrono.HijrahChronology#range(ChronoField)->ValueRange::: hijrah chronology range
java.time.chrono.HijrahChronology#resolveDate(Map, ResolverStyle)->HijrahDate::: hijrah chronology resolve date
java.time.chrono.HijrahChronology#checkValidYear(long)->int:::Check the validity of a year.
java.time.chrono.HijrahChronology#checkValidDayOfYear(int)->void::: hijrah chronology check valid day of year
java.time.chrono.HijrahChronology#checkValidMonth(int)->void::: hijrah chronology check valid month
java.time.chrono.HijrahChronology#getHijrahDateInfo(int)->int[]:::Returns an array containing the Hijrah year, month and day computed from the epoch day.
java.time.chrono.HijrahChronology#getEpochDay(int, int, int)->long:::Return the epoch day computed from Hijrah year, month, and day.
java.time.chrono.HijrahChronology#getDayOfYear(int, int)->int:::Returns day of year for the year and month.
java.time.chrono.HijrahChronology#getMonthLength(int, int)->int:::Returns month length for the year and month.
java.time.chrono.HijrahChronology#getYearLength(int)->int:::Returns year length
java.time.chrono.HijrahChronology#getMinimumYear()->int:::Return the minimum supported Hijrah year.
java.time.chrono.HijrahChronology#getMaximumYear()->int:::Return the maximum supported Hijrah year.
java.time.chrono.HijrahChronology#getMaximumMonthLength()->int:::Returns maximum day-of-month.
java.time.chrono.HijrahChronology#getMinimumMonthLength()->int:::Returns smallest maximum day-of-month.
java.time.chrono.HijrahChronology#getMaximumDayOfYear()->int:::Returns maximum day-of-year.
java.time.chrono.HijrahChronology#getSmallestMaximumDayOfYear()->int:::Returns smallest maximum day-of-year.
java.time.chrono.HijrahChronology#writeReplace()->Object:::Writes the Chronology using a dedicated serialized form.
java.time.chrono.HijrahDate#of(HijrahChronology, int, int, int)->HijrahDate:::Obtains an instance of HijrahDate from the Hijrah proleptic year, month-of-year and day-of-month.
java.time.chrono.HijrahDate#ofEpochDay(HijrahChronology, long)->HijrahDate:::Returns a HijrahDate for the chronology and epochDay.
java.time.chrono.HijrahDate#now()->HijrahDate:::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the default time-zone
java.time.chrono.HijrahDate#now(ZoneId)->HijrahDate:::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the specified time-zone
java.time.chrono.HijrahDate#now(Clock)->HijrahDate:::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar from the specified clock
java.time.chrono.HijrahDate#of(int, int, int)->HijrahDate:::Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.HijrahDate#from(TemporalAccessor)->HijrahDate:::Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from a temporal object
java.time.chrono.HijrahDate#getChronology()->HijrahChronology:::Gets the chronology of this date, which is the Hijrah calendar system
java.time.chrono.HijrahDate#getEra()->HijrahEra:::Gets the era applicable at this date
java.time.chrono.HijrahDate#lengthOfMonth()->int:::Returns the length of the month represented by this date
java.time.chrono.HijrahDate#lengthOfYear()->int:::Returns the length of the year represented by this date
java.time.chrono.HijrahDate#range(TemporalField)->ValueRange::: hijrah date range
java.time.chrono.HijrahDate#getLong(TemporalField)->long::: hijrah date get long
java.time.chrono.HijrahDate#with(TemporalField, long)->HijrahDate::: hijrah date with
java.time.chrono.HijrahDate#with(TemporalAdjuster)->HijrahDate::: hijrah date with
java.time.chrono.HijrahDate#withVariant(HijrahChronology)->HijrahDate:::Returns a HijrahDate with the Chronology requested
java.time.chrono.HijrahDate#plus(TemporalAmount)->HijrahDate::: hijrah date plus
java.time.chrono.HijrahDate#minus(TemporalAmount)->HijrahDate::: hijrah date minus
java.time.chrono.HijrahDate#toEpochDay()->long::: hijrah date to epoch day
java.time.chrono.HijrahDate#isLeapYear()->boolean:::Checks if the year is a leap year, according to the Hijrah calendar system rules.
java.time.chrono.HijrahDate#plusYears(long)->HijrahDate::: hijrah date plus years
java.time.chrono.HijrahDate#plusMonths(long)->HijrahDate::: hijrah date plus months
java.time.chrono.HijrahDate#plusWeeks(long)->HijrahDate::: hijrah date plus weeks
java.time.chrono.HijrahDate#plusDays(long)->HijrahDate::: hijrah date plus days
java.time.chrono.HijrahDate#plus(long, TemporalUnit)->HijrahDate::: hijrah date plus
java.time.chrono.HijrahDate#minus(long, TemporalUnit)->HijrahDate::: hijrah date minus
java.time.chrono.HijrahDate#minusYears(long)->HijrahDate::: hijrah date minus years
java.time.chrono.HijrahDate#minusMonths(long)->HijrahDate::: hijrah date minus months
java.time.chrono.HijrahDate#minusWeeks(long)->HijrahDate::: hijrah date minus weeks
java.time.chrono.HijrahDate#minusDays(long)->HijrahDate::: hijrah date minus days
java.time.chrono.HijrahDate#atTime(LocalTime)->ChronoLocalDateTime::: hijrah date at time
java.time.chrono.HijrahDate#until(ChronoLocalDate)->ChronoPeriod::: hijrah date until
java.time.chrono.HijrahDate#equals(Object)->boolean:::Compares this date to another date, including the chronology
java.time.chrono.HijrahDate#hashCode()->int:::A hash code for this date.
java.time.chrono.HijrahDate#writeExternal(ObjectOutput)->void::: hijrah date write external
java.time.chrono.HijrahDate#readExternal(ObjectInput)->HijrahDate::: hijrah date read external
java.time.chrono.IsoChronology#getId()->String:::Gets the ID of the chronology - 'ISO'
java.time.chrono.IsoChronology#getCalendarType()->String:::Gets the calendar type of the underlying calendar system - 'iso8601'
java.time.chrono.IsoChronology#date(Era, int, int, int)->LocalDate:::Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields.
java.time.chrono.IsoChronology#date(int, int, int)->LocalDate:::Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.IsoChronology#dateYearDay(Era, int, int)->LocalDate:::Obtains an ISO local date from the era, year-of-era and day-of-year fields.
java.time.chrono.IsoChronology#dateYearDay(int, int)->LocalDate:::Obtains an ISO local date from the proleptic-year and day-of-year fields
java.time.chrono.IsoChronology#dateEpochDay(long)->LocalDate:::Obtains an ISO local date from the epoch-day
java.time.chrono.IsoChronology#date(TemporalAccessor)->LocalDate:::Obtains an ISO local date from another date-time object
java.time.chrono.IsoChronology#epochSecond(int, int, int, int, int, int, ZoneOffset)->long:::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z
java.time.chrono.IsoChronology#localDateTime(TemporalAccessor)->LocalDateTime:::Obtains an ISO local date-time from another date-time object
java.time.chrono.IsoChronology#zonedDateTime(TemporalAccessor)->ZonedDateTime:::Obtains an ISO zoned date-time from another date-time object
java.time.chrono.IsoChronology#zonedDateTime(Instant, ZoneId)->ZonedDateTime:::Obtains an ISO zoned date-time in this chronology from an Instant
java.time.chrono.IsoChronology#dateNow()->LocalDate:::Obtains the current ISO local date from the system clock in the default time-zone
java.time.chrono.IsoChronology#dateNow(ZoneId)->LocalDate:::Obtains the current ISO local date from the system clock in the specified time-zone
java.time.chrono.IsoChronology#dateNow(Clock)->LocalDate:::Obtains the current ISO local date from the specified clock
java.time.chrono.IsoChronology#isLeapYear(long)->boolean:::Checks if the year is a leap year, according to the ISO proleptic calendar system rules
java.time.chrono.IsoChronology#prolepticYear(Era, int)->int::: iso chronology proleptic year
java.time.chrono.IsoChronology#eraOf(int)->IsoEra::: iso chronology era of
java.time.chrono.IsoChronology#eras()->List::: iso chronology eras
java.time.chrono.IsoChronology#resolveDate(Map, ResolverStyle)->LocalDate:::Resolves parsed ChronoField values into a date during parsing
java.time.chrono.IsoChronology#resolveProlepticMonth(Map, ResolverStyle)->void::: iso chronology resolve proleptic month
java.time.chrono.IsoChronology#resolveYearOfEra(Map, ResolverStyle)->LocalDate::: iso chronology resolve year of era
java.time.chrono.IsoChronology#resolveYMD(Map, ResolverStyle)->LocalDate::: iso chronology resolve d
java.time.chrono.IsoChronology#range(ChronoField)->ValueRange::: iso chronology range
java.time.chrono.IsoChronology#period(int, int, int)->Period:::Obtains a period for this chronology based on years, months and days
java.time.chrono.IsoChronology#writeReplace()->Object:::Writes the Chronology using a dedicated serialized form.
java.time.chrono.JapaneseChronology#getId()->String:::Gets the ID of the chronology - 'Japanese'
java.time.chrono.JapaneseChronology#getCalendarType()->String:::Gets the calendar type of the underlying calendar system - 'japanese'
java.time.chrono.JapaneseChronology#date(Era, int, int, int)->JapaneseDate:::Obtains a local date in Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields
java.time.chrono.JapaneseChronology#date(int, int, int)->JapaneseDate:::Obtains a local date in Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.JapaneseChronology#dateYearDay(Era, int, int)->JapaneseDate:::Obtains a local date in Japanese calendar system from the era, year-of-era and day-of-year fields
java.time.chrono.JapaneseChronology#dateYearDay(int, int)->JapaneseDate:::Obtains a local date in Japanese calendar system from the proleptic-year and day-of-year fields
java.time.chrono.JapaneseChronology#dateEpochDay(long)->JapaneseDate:::Obtains a local date in the Japanese calendar system from the epoch-day.
java.time.chrono.JapaneseChronology#dateNow()->JapaneseDate::: japanese chronology date now
java.time.chrono.JapaneseChronology#dateNow(ZoneId)->JapaneseDate::: japanese chronology date now
java.time.chrono.JapaneseChronology#dateNow(Clock)->JapaneseDate::: japanese chronology date now
java.time.chrono.JapaneseChronology#date(TemporalAccessor)->JapaneseDate::: japanese chronology date
java.time.chrono.JapaneseChronology#localDateTime(TemporalAccessor)->ChronoLocalDateTime::: japanese chronology local date time
java.time.chrono.JapaneseChronology#zonedDateTime(TemporalAccessor)->ChronoZonedDateTime::: japanese chronology zoned date time
java.time.chrono.JapaneseChronology#zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime::: japanese chronology zoned date time
java.time.chrono.JapaneseChronology#isLeapYear(long)->boolean:::Checks if the specified year is a leap year
java.time.chrono.JapaneseChronology#prolepticYear(Era, int)->int::: japanese chronology proleptic year
java.time.chrono.JapaneseChronology#eraOf(int)->JapaneseEra:::Returns the calendar system era object from the given numeric value
java.time.chrono.JapaneseChronology#eras()->List::: japanese chronology eras
java.time.chrono.JapaneseChronology#getCurrentEra()->JapaneseEra::: japanese chronology get current era
java.time.chrono.JapaneseChronology#range(ChronoField)->ValueRange::: japanese chronology range
java.time.chrono.JapaneseChronology#resolveDate(Map, ResolverStyle)->JapaneseDate::: japanese chronology resolve date
java.time.chrono.JapaneseChronology#resolveYearOfEra(Map, ResolverStyle)->ChronoLocalDate::: japanese chronology resolve year of era
java.time.chrono.JapaneseChronology#writeReplace()->Object:::Writes the Chronology using a dedicated serialized form.
java.time.chrono.JapaneseDate#now()->JapaneseDate:::Obtains the current JapaneseDate from the system clock in the default time-zone
java.time.chrono.JapaneseDate#now(ZoneId)->JapaneseDate:::Obtains the current JapaneseDate from the system clock in the specified time-zone
java.time.chrono.JapaneseDate#now(Clock)->JapaneseDate:::Obtains the current JapaneseDate from the specified clock
java.time.chrono.JapaneseDate#of(JapaneseEra, int, int, int)->JapaneseDate:::Obtains a JapaneseDate representing a date in the Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields
java.time.chrono.JapaneseDate#of(int, int, int)->JapaneseDate:::Obtains a JapaneseDate representing a date in the Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.JapaneseDate#ofYearDay(JapaneseEra, int, int)->JapaneseDate:::Obtains a JapaneseDate representing a date in the Japanese calendar system from the era, year-of-era and day-of-year fields
java.time.chrono.JapaneseDate#from(TemporalAccessor)->JapaneseDate:::Obtains a JapaneseDate from a temporal object
java.time.chrono.JapaneseDate#getChronology()->JapaneseChronology:::Gets the chronology of this date, which is the Japanese calendar system
java.time.chrono.JapaneseDate#getEra()->JapaneseEra:::Gets the era applicable at this date
java.time.chrono.JapaneseDate#lengthOfMonth()->int:::Returns the length of the month represented by this date
java.time.chrono.JapaneseDate#lengthOfYear()->int::: japanese date length of year
java.time.chrono.JapaneseDate#isSupported(TemporalField)->boolean:::Checks if the specified field is supported
java.time.chrono.JapaneseDate#range(TemporalField)->ValueRange::: japanese date range
java.time.chrono.JapaneseDate#getLong(TemporalField)->long::: japanese date get long
java.time.chrono.JapaneseDate#with(TemporalField, long)->JapaneseDate::: japanese date with
java.time.chrono.JapaneseDate#with(TemporalAdjuster)->JapaneseDate::: japanese date with
java.time.chrono.JapaneseDate#plus(TemporalAmount)->JapaneseDate::: japanese date plus
java.time.chrono.JapaneseDate#minus(TemporalAmount)->JapaneseDate::: japanese date minus
java.time.chrono.JapaneseDate#plusYears(long)->JapaneseDate::: japanese date plus years
java.time.chrono.JapaneseDate#plusMonths(long)->JapaneseDate::: japanese date plus months
java.time.chrono.JapaneseDate#plusWeeks(long)->JapaneseDate::: japanese date plus weeks
java.time.chrono.JapaneseDate#plusDays(long)->JapaneseDate::: japanese date plus days
java.time.chrono.JapaneseDate#plus(long, TemporalUnit)->JapaneseDate::: japanese date plus
java.time.chrono.JapaneseDate#minus(long, TemporalUnit)->JapaneseDate::: japanese date minus
java.time.chrono.JapaneseDate#minusYears(long)->JapaneseDate::: japanese date minus years
java.time.chrono.JapaneseDate#minusMonths(long)->JapaneseDate::: japanese date minus months
java.time.chrono.JapaneseDate#minusWeeks(long)->JapaneseDate::: japanese date minus weeks
java.time.chrono.JapaneseDate#minusDays(long)->JapaneseDate::: japanese date minus days
java.time.chrono.JapaneseDate#atTime(LocalTime)->ChronoLocalDateTime::: japanese date at time
java.time.chrono.JapaneseDate#until(ChronoLocalDate)->ChronoPeriod::: japanese date until
java.time.chrono.JapaneseDate#toEpochDay()->long::: japanese date to epoch day
java.time.chrono.JapaneseDate#equals(Object)->boolean:::Compares this date to another date, including the chronology
java.time.chrono.JapaneseDate#hashCode()->int:::A hash code for this date.
java.time.chrono.JapaneseDate#writeExternal(DataOutput)->void::: japanese date write external
java.time.chrono.JapaneseDate#readExternal(DataInput)->JapaneseDate::: japanese date read external
java.time.chrono.JapaneseEra#getPrivateEra()->sun.util.calendar.Era:::Returns the Sun private Era instance corresponding to this JapaneseEra.
java.time.chrono.JapaneseEra#of(int)->JapaneseEra:::Obtains an instance of JapaneseEra from an int value
java.time.chrono.JapaneseEra#valueOf(String)->JapaneseEra:::Returns the JapaneseEra with the name
java.time.chrono.JapaneseEra#values()->JapaneseEra[]:::Returns an array of JapaneseEras
java.time.chrono.JapaneseEra#getDisplayName(TextStyle, Locale)->String::: japanese era get display name
java.time.chrono.JapaneseEra#from(LocalDate)->JapaneseEra:::Obtains an instance of JapaneseEra from a date.
java.time.chrono.JapaneseEra#toJapaneseEra(sun.util.calendar.Era)->JapaneseEra::: japanese era to japanese era
java.time.chrono.JapaneseEra#privateEraFrom(LocalDate)->sun.util.calendar.Era::: japanese era private era from
java.time.chrono.JapaneseEra#getValue()->int:::Gets the numeric era int value
java.time.chrono.JapaneseEra#range(TemporalField)->ValueRange:::Gets the range of valid values for the specified field
java.time.chrono.JapaneseEra#getAbbreviation()->String::: japanese era get abbreviation
java.time.chrono.JapaneseEra#getName()->String::: japanese era get name
java.time.chrono.JapaneseEra#toString()->String::: japanese era to string
java.time.chrono.JapaneseEra#writeExternal(DataOutput)->void::: japanese era write external
java.time.chrono.JapaneseEra#readExternal(DataInput)->JapaneseEra::: japanese era read external
java.time.chrono.MinguoChronology#getId()->String:::Gets the ID of the chronology - 'Minguo'
java.time.chrono.MinguoChronology#getCalendarType()->String:::Gets the calendar type of the underlying calendar system - 'roc'
java.time.chrono.MinguoChronology#date(Era, int, int, int)->MinguoDate:::Obtains a local date in Minguo calendar system from the era, year-of-era, month-of-year and day-of-month fields.
java.time.chrono.MinguoChronology#date(int, int, int)->MinguoDate:::Obtains a local date in Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields.
java.time.chrono.MinguoChronology#dateYearDay(Era, int, int)->MinguoDate:::Obtains a local date in Minguo calendar system from the era, year-of-era and day-of-year fields.
java.time.chrono.MinguoChronology#dateYearDay(int, int)->MinguoDate:::Obtains a local date in Minguo calendar system from the proleptic-year and day-of-year fields.
java.time.chrono.MinguoChronology#dateEpochDay(long)->MinguoDate:::Obtains a local date in the Minguo calendar system from the epoch-day.
java.time.chrono.MinguoChronology#dateNow()->MinguoDate::: minguo chronology date now
java.time.chrono.MinguoChronology#dateNow(ZoneId)->MinguoDate::: minguo chronology date now
java.time.chrono.MinguoChronology#dateNow(Clock)->MinguoDate::: minguo chronology date now
java.time.chrono.MinguoChronology#date(TemporalAccessor)->MinguoDate::: minguo chronology date
java.time.chrono.MinguoChronology#localDateTime(TemporalAccessor)->ChronoLocalDateTime::: minguo chronology local date time
java.time.chrono.MinguoChronology#zonedDateTime(TemporalAccessor)->ChronoZonedDateTime::: minguo chronology zoned date time
java.time.chrono.MinguoChronology#zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime::: minguo chronology zoned date time
java.time.chrono.MinguoChronology#isLeapYear(long)->boolean:::Checks if the specified year is a leap year
java.time.chrono.MinguoChronology#prolepticYear(Era, int)->int::: minguo chronology proleptic year
java.time.chrono.MinguoChronology#eraOf(int)->MinguoEra::: minguo chronology era of
java.time.chrono.MinguoChronology#eras()->List::: minguo chronology eras
java.time.chrono.MinguoChronology#range(ChronoField)->ValueRange::: minguo chronology range
java.time.chrono.MinguoChronology#resolveDate(Map, ResolverStyle)->MinguoDate::: minguo chronology resolve date
java.time.chrono.MinguoChronology#writeReplace()->Object:::Writes the Chronology using a dedicated serialized form.
java.time.chrono.MinguoDate#now()->MinguoDate:::Obtains the current MinguoDate from the system clock in the default time-zone
java.time.chrono.MinguoDate#now(ZoneId)->MinguoDate:::Obtains the current MinguoDate from the system clock in the specified time-zone
java.time.chrono.MinguoDate#now(Clock)->MinguoDate:::Obtains the current MinguoDate from the specified clock
java.time.chrono.MinguoDate#of(int, int, int)->MinguoDate:::Obtains a MinguoDate representing a date in the Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.MinguoDate#from(TemporalAccessor)->MinguoDate:::Obtains a MinguoDate from a temporal object
java.time.chrono.MinguoDate#getChronology()->MinguoChronology:::Gets the chronology of this date, which is the Minguo calendar system
java.time.chrono.MinguoDate#getEra()->MinguoEra:::Gets the era applicable at this date
java.time.chrono.MinguoDate#lengthOfMonth()->int:::Returns the length of the month represented by this date
java.time.chrono.MinguoDate#range(TemporalField)->ValueRange::: minguo date range
java.time.chrono.MinguoDate#getLong(TemporalField)->long::: minguo date get long
java.time.chrono.MinguoDate#with(TemporalField, long)->MinguoDate::: minguo date with
java.time.chrono.MinguoDate#with(TemporalAdjuster)->MinguoDate::: minguo date with
java.time.chrono.MinguoDate#plus(TemporalAmount)->MinguoDate::: minguo date plus
java.time.chrono.MinguoDate#minus(TemporalAmount)->MinguoDate::: minguo date minus
java.time.chrono.MinguoDate#plusYears(long)->MinguoDate::: minguo date plus years
java.time.chrono.MinguoDate#plusMonths(long)->MinguoDate::: minguo date plus months
java.time.chrono.MinguoDate#plusWeeks(long)->MinguoDate::: minguo date plus weeks
java.time.chrono.MinguoDate#plusDays(long)->MinguoDate::: minguo date plus days
java.time.chrono.MinguoDate#plus(long, TemporalUnit)->MinguoDate::: minguo date plus
java.time.chrono.MinguoDate#minus(long, TemporalUnit)->MinguoDate::: minguo date minus
java.time.chrono.MinguoDate#minusYears(long)->MinguoDate::: minguo date minus years
java.time.chrono.MinguoDate#minusMonths(long)->MinguoDate::: minguo date minus months
java.time.chrono.MinguoDate#minusWeeks(long)->MinguoDate::: minguo date minus weeks
java.time.chrono.MinguoDate#minusDays(long)->MinguoDate::: minguo date minus days
java.time.chrono.MinguoDate#atTime(LocalTime)->ChronoLocalDateTime::: minguo date at time
java.time.chrono.MinguoDate#until(ChronoLocalDate)->ChronoPeriod::: minguo date until
java.time.chrono.MinguoDate#toEpochDay()->long::: minguo date to epoch day
java.time.chrono.MinguoDate#equals(Object)->boolean:::Compares this date to another date, including the chronology
java.time.chrono.MinguoDate#hashCode()->int:::A hash code for this date.
java.time.chrono.MinguoDate#writeExternal(DataOutput)->void::: minguo date write external
java.time.chrono.MinguoDate#readExternal(DataInput)->MinguoDate::: minguo date read external
java.time.chrono.Ser#writeExternal(ObjectOutput)->void:::Implements the Externalizable interface to write the object.
java.time.chrono.Ser#readExternal(ObjectInput)->void:::Implements the Externalizable interface to read the object.
java.time.chrono.Ser#read(ObjectInput)->Object::: ser read
java.time.chrono.ThaiBuddhistChronology#getId()->String:::Gets the ID of the chronology - 'ThaiBuddhist'
java.time.chrono.ThaiBuddhistChronology#getCalendarType()->String:::Gets the calendar type of the underlying calendar system - 'buddhist'
java.time.chrono.ThaiBuddhistChronology#date(Era, int, int, int)->ThaiBuddhistDate:::Obtains a local date in Thai Buddhist calendar system from the era, year-of-era, month-of-year and day-of-month fields.
java.time.chrono.ThaiBuddhistChronology#date(int, int, int)->ThaiBuddhistDate:::Obtains a local date in Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields.
java.time.chrono.ThaiBuddhistChronology#dateYearDay(Era, int, int)->ThaiBuddhistDate:::Obtains a local date in Thai Buddhist calendar system from the era, year-of-era and day-of-year fields.
java.time.chrono.ThaiBuddhistChronology#dateYearDay(int, int)->ThaiBuddhistDate:::Obtains a local date in Thai Buddhist calendar system from the proleptic-year and day-of-year fields.
java.time.chrono.ThaiBuddhistChronology#dateEpochDay(long)->ThaiBuddhistDate:::Obtains a local date in the Thai Buddhist calendar system from the epoch-day.
java.time.chrono.ThaiBuddhistChronology#dateNow()->ThaiBuddhistDate::: thai buddhist chronology date now
java.time.chrono.ThaiBuddhistChronology#dateNow(ZoneId)->ThaiBuddhistDate::: thai buddhist chronology date now
java.time.chrono.ThaiBuddhistChronology#dateNow(Clock)->ThaiBuddhistDate::: thai buddhist chronology date now
java.time.chrono.ThaiBuddhistChronology#date(TemporalAccessor)->ThaiBuddhistDate::: thai buddhist chronology date
java.time.chrono.ThaiBuddhistChronology#localDateTime(TemporalAccessor)->ChronoLocalDateTime::: thai buddhist chronology local date time
java.time.chrono.ThaiBuddhistChronology#zonedDateTime(TemporalAccessor)->ChronoZonedDateTime::: thai buddhist chronology zoned date time
java.time.chrono.ThaiBuddhistChronology#zonedDateTime(Instant, ZoneId)->ChronoZonedDateTime::: thai buddhist chronology zoned date time
java.time.chrono.ThaiBuddhistChronology#isLeapYear(long)->boolean:::Checks if the specified year is a leap year
java.time.chrono.ThaiBuddhistChronology#prolepticYear(Era, int)->int::: thai buddhist chronology proleptic year
java.time.chrono.ThaiBuddhistChronology#eraOf(int)->ThaiBuddhistEra::: thai buddhist chronology era of
java.time.chrono.ThaiBuddhistChronology#eras()->List::: thai buddhist chronology eras
java.time.chrono.ThaiBuddhistChronology#range(ChronoField)->ValueRange::: thai buddhist chronology range
java.time.chrono.ThaiBuddhistChronology#resolveDate(Map, ResolverStyle)->ThaiBuddhistDate::: thai buddhist chronology resolve date
java.time.chrono.ThaiBuddhistChronology#writeReplace()->Object:::Writes the Chronology using a dedicated serialized form.
java.time.chrono.ThaiBuddhistDate#now()->ThaiBuddhistDate:::Obtains the current ThaiBuddhistDate from the system clock in the default time-zone
java.time.chrono.ThaiBuddhistDate#now(ZoneId)->ThaiBuddhistDate:::Obtains the current ThaiBuddhistDate from the system clock in the specified time-zone
java.time.chrono.ThaiBuddhistDate#now(Clock)->ThaiBuddhistDate:::Obtains the current ThaiBuddhistDate from the specified clock
java.time.chrono.ThaiBuddhistDate#of(int, int, int)->ThaiBuddhistDate:::Obtains a ThaiBuddhistDate representing a date in the Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields
java.time.chrono.ThaiBuddhistDate#from(TemporalAccessor)->ThaiBuddhistDate:::Obtains a ThaiBuddhistDate from a temporal object
java.time.chrono.ThaiBuddhistDate#getChronology()->ThaiBuddhistChronology:::Gets the chronology of this date, which is the Thai Buddhist calendar system
java.time.chrono.ThaiBuddhistDate#getEra()->ThaiBuddhistEra:::Gets the era applicable at this date
java.time.chrono.ThaiBuddhistDate#lengthOfMonth()->int:::Returns the length of the month represented by this date
java.time.chrono.ThaiBuddhistDate#range(TemporalField)->ValueRange::: thai buddhist date range
java.time.chrono.ThaiBuddhistDate#getLong(TemporalField)->long::: thai buddhist date get long
java.time.chrono.ThaiBuddhistDate#with(TemporalField, long)->ThaiBuddhistDate::: thai buddhist date with
java.time.chrono.ThaiBuddhistDate#with(TemporalAdjuster)->ThaiBuddhistDate::: thai buddhist date with
java.time.chrono.ThaiBuddhistDate#plus(TemporalAmount)->ThaiBuddhistDate::: thai buddhist date plus
java.time.chrono.ThaiBuddhistDate#minus(TemporalAmount)->ThaiBuddhistDate::: thai buddhist date minus
java.time.chrono.ThaiBuddhistDate#plusYears(long)->ThaiBuddhistDate::: thai buddhist date plus years
java.time.chrono.ThaiBuddhistDate#plusMonths(long)->ThaiBuddhistDate::: thai buddhist date plus months
java.time.chrono.ThaiBuddhistDate#plusWeeks(long)->ThaiBuddhistDate::: thai buddhist date plus weeks
java.time.chrono.ThaiBuddhistDate#plusDays(long)->ThaiBuddhistDate::: thai buddhist date plus days
java.time.chrono.ThaiBuddhistDate#plus(long, TemporalUnit)->ThaiBuddhistDate::: thai buddhist date plus
java.time.chrono.ThaiBuddhistDate#minus(long, TemporalUnit)->ThaiBuddhistDate::: thai buddhist date minus
java.time.chrono.ThaiBuddhistDate#minusYears(long)->ThaiBuddhistDate::: thai buddhist date minus years
java.time.chrono.ThaiBuddhistDate#minusMonths(long)->ThaiBuddhistDate::: thai buddhist date minus months
java.time.chrono.ThaiBuddhistDate#minusWeeks(long)->ThaiBuddhistDate::: thai buddhist date minus weeks
java.time.chrono.ThaiBuddhistDate#minusDays(long)->ThaiBuddhistDate::: thai buddhist date minus days
java.time.chrono.ThaiBuddhistDate#atTime(LocalTime)->ChronoLocalDateTime::: thai buddhist date at time
java.time.chrono.ThaiBuddhistDate#until(ChronoLocalDate)->ChronoPeriod::: thai buddhist date until
java.time.chrono.ThaiBuddhistDate#toEpochDay()->long::: thai buddhist date to epoch day
java.time.chrono.ThaiBuddhistDate#equals(Object)->boolean:::Compares this date to another date, including the chronology
java.time.chrono.ThaiBuddhistDate#hashCode()->int:::A hash code for this date.
java.time.chrono.ThaiBuddhistDate#writeExternal(DataOutput)->void::: thai buddhist date write external
java.time.chrono.ThaiBuddhistDate#readExternal(DataInput)->ThaiBuddhistDate::: thai buddhist date read external

AbstractChronology#registerChrono(Chronology):::Register a Chronology by its ID and type for lookup by #of(String):::return->chrono->getId->registerChrono
AbstractChronology#registerChrono(Chronology, String):::Register a Chronology by ID and type for lookup by #of(String):::prev->CHRONOS_BY_ID->putIfAbsent->if->type->chrono->getCalendarType->if->CHRONOS_BY_TYPE->putIfAbsent->return
AbstractChronology#ofLocale(Locale):::Obtains an instance of Chronology from a locale:::Objects->requireNonNull->type->locale->getUnicodeLocaleType->if->equals->equals->return->do->chrono->CHRONOS_BY_TYPE->get->if->return->while->initCache->loader->ServiceLoader->load->foreach->if->type->chrono->getCalendarType->equals->return->throw->new->DateTimeException
AbstractChronology#of(String):::Obtains an instance of Chronology from a chronology ID or calendar system type:::Objects->requireNonNull->do->chrono->of0->if->return->while->initCache->loader->ServiceLoader->load->foreach->if->id->chrono->getId->equals->id->chrono->getCalendarType->equals->return->throw->new->DateTimeException
AbstractChronology#getAvailableChronologies():::Returns the available chronologies:::initCache->chronos->CHRONOS_BY_ID->values->new->HashSet<>->loader->ServiceLoader->load->foreach->chronos->add->return
AbstractChronology#resolveDate(Map, ResolverStyle):::Resolves parsed ChronoField values into a date during parsing:::if->fieldValues->containsKey->return->fieldValues->remove->dateEpochDay->resolveProlepticMonth->resolved->resolveYearOfEra->if->return->if->fieldValues->containsKey->if->fieldValues->containsKey->if->fieldValues->containsKey->return->resolveYMD->if->fieldValues->containsKey->if->fieldValues->containsKey->return->resolveYMAA->if->fieldValues->containsKey->return->resolveYMAD->if->fieldValues->containsKey->return->resolveYD->if->fieldValues->containsKey->if->fieldValues->containsKey->return->resolveYAA->if->fieldValues->containsKey->return->resolveYAD->return
AbstractChronology#addFieldValue(Map, ChronoField, long):::Adds a field-value pair to the map, checking for conflicts:::old->fieldValues->get->if->old->longValue->throw->new->DateTimeException->fieldValues->put
AbstractChronology#compareTo(Chronology):::Compares this chronology to another chronology:::return->getId->other->getId->compareTo
AbstractChronology#equals(Object):::Checks if this chronology is equal to another chronology:::if->return->if->return->compareTo->return
AbstractChronology#hashCode():::A hash code for this chronology:::return->getClass->hashCode->getId->hashCode
AbstractChronology#toString():::Outputs this chronology as a String, using the chronology ID.:::return->getId
AbstractChronology#writeReplace():::Writes the Chronology using a dedicated serialized form:::return->new->Ser
ChronoLocalDate#timeLineOrder():::Gets a comparator that compares ChronoLocalDate in time-line order ignoring the chronology:::return->return->Long->date1->toEpochDay->date2->toEpochDay->compare
ChronoLocalDate#from(TemporalAccessor):::Obtains an instance of ChronoLocalDate from a temporal object:::if->return->Objects->requireNonNull->chrono->temporal->TemporalQueries->chronology->query->if->throw->temporal->getClass->new->DateTimeException->return->chrono->date
ChronoLocalDate#getChronology():::Gets the chronology of this date:::
ChronoLocalDate#getEra():::Gets the era, as defined by the chronology:::return->getChronology->get->eraOf
ChronoLocalDate#isLeapYear():::Checks if the year is a leap year, as defined by the calendar system:::return->getChronology->getLong->isLeapYear
ChronoLocalDate#lengthOfMonth():::Returns the length of the month represented by this date, as defined by the calendar system:::
ChronoLocalDate#lengthOfYear():::Returns the length of the year represented by this date, as defined by the calendar system:::return->isLeapYear
ChronoLocalDate#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->field->isDateBased->return->field->isSupportedBy
ChronoLocalDate#isSupported(TemporalUnit):::Checks if the specified unit is supported:::if->return->unit->isDateBased->return->unit->isSupportedBy
ChronoLocalDate#query(TemporalQuery):::Queries this date using the specified query:::if->TemporalQueries->zoneId->TemporalQueries->zone->TemporalQueries->offset->return->else->if->TemporalQueries->localTime->return->else->if->TemporalQueries->chronology->return->getChronology->else->if->TemporalQueries->precision->return->return->query->queryFrom
ChronoLocalDate#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date as this object:::return->temporal->toEpochDay->with
ChronoLocalDate#until(Temporal, TemporalUnit):::Calculates the amount of time until another date in terms of the specified unit:::
ChronoLocalDate#until(ChronoLocalDate):::Calculates the period between this date and another date as a ChronoPeriod:::
ChronoLocalDate#format(DateTimeFormatter):::Formats this date using the specified formatter:::Objects->requireNonNull->return->formatter->format
ChronoLocalDate#atTime(LocalTime):::Combines this date with a time to create a ChronoLocalDateTime:::return->ChronoLocalDateTimeImpl->of
ChronoLocalDate#toEpochDay():::Converts this date to the Epoch Day:::return->getLong
ChronoLocalDate#compareTo(ChronoLocalDate):::Compares this date to another date, including the chronology:::cmp->Long->toEpochDay->other->toEpochDay->compare->if->getChronology->other->getChronology->compareTo->return
ChronoLocalDate#isAfter(ChronoLocalDate):::Checks if this date is after the specified date ignoring the chronology:::return->this->toEpochDay->other->toEpochDay
ChronoLocalDate#isBefore(ChronoLocalDate):::Checks if this date is before the specified date ignoring the chronology:::return->this->toEpochDay->other->toEpochDay
ChronoLocalDate#isEqual(ChronoLocalDate):::Checks if this date is equal to the specified date ignoring the chronology:::return->this->toEpochDay->other->toEpochDay
ChronoLocalDate#equals(Object):::Checks if this date is equal to another date, including the chronology:::
ChronoLocalDate#hashCode():::A hash code for this date.:::
ChronoLocalDate#toString():::Outputs this date as a String:::
ChronoLocalDateImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoLocalDate ensuring it bas the specified chronology.:::other->if->chrono->other->getChronology->equals->throw->chrono->getId->other->getChronology->getId->new->ClassCastException->return
ChronoLocalDateImpl#plusYears(long):::Returns a copy of this date with the specified number of years added:::
ChronoLocalDateImpl#plusMonths(long):::Returns a copy of this date with the specified number of months added:::
ChronoLocalDateImpl#plusWeeks(long):::Returns a copy of this date with the specified number of weeks added:::return->Math->multiplyExact->plusDays
ChronoLocalDateImpl#plusDays(long):::Returns a copy of this date with the specified number of days added:::
ChronoLocalDateImpl#minusYears(long):::Returns a copy of this date with the specified number of years subtracted:::return->plusYears->plusYears->plusYears
ChronoLocalDateImpl#minusMonths(long):::Returns a copy of this date with the specified number of months subtracted:::return->plusMonths->plusMonths->plusMonths
ChronoLocalDateImpl#minusWeeks(long):::Returns a copy of this date with the specified number of weeks subtracted:::return->plusWeeks->plusWeeks->plusWeeks
ChronoLocalDateImpl#minusDays(long):::Returns a copy of this date with the specified number of days subtracted:::return->plusDays->plusDays->plusDays
ChronoLocalDateTime#timeLineOrder():::Gets a comparator that compares ChronoLocalDateTime in time-line order ignoring the chronology:::return->cmp->Long->dateTime1->toLocalDate->toEpochDay->dateTime2->toLocalDate->toEpochDay->compare->if->Long->dateTime1->toLocalTime->toNanoOfDay->dateTime2->toLocalTime->toNanoOfDay->compare->return
ChronoLocalDateTime#from(TemporalAccessor):::Obtains an instance of ChronoLocalDateTime from a temporal object:::if->return->Objects->requireNonNull->chrono->temporal->TemporalQueries->chronology->query->if->throw->temporal->getClass->new->DateTimeException->return->chrono->localDateTime
ChronoLocalDateTime#getChronology():::Gets the chronology of this date-time:::return->toLocalDate->getChronology
ChronoLocalDateTime#toLocalDate():::Gets the local date part of this date-time:::
ChronoLocalDateTime#toLocalTime():::Gets the local time part of this date-time:::
ChronoLocalDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::
ChronoLocalDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::if->return->return->unit->isSupportedBy
ChronoLocalDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::if->TemporalQueries->zoneId->TemporalQueries->zone->TemporalQueries->offset->return->else->if->TemporalQueries->localTime->return->toLocalTime->else->if->TemporalQueries->chronology->return->getChronology->else->if->TemporalQueries->precision->return->return->query->queryFrom
ChronoLocalDateTime#adjustInto(Temporal):::Adjusts the specified temporal object to have the same date and time as this object:::return->temporal->toLocalDate->toEpochDay->with->toLocalTime->toNanoOfDay->with
ChronoLocalDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects->requireNonNull->return->formatter->format
ChronoLocalDateTime#atZone(ZoneId):::Combines this time with a time-zone to create a ChronoZonedDateTime:::
ChronoLocalDateTime#toInstant(ZoneOffset):::Converts this date-time to an Instant:::return->Instant->toEpochSecond->toLocalTime->getNano->ofEpochSecond
ChronoLocalDateTime#toEpochSecond(ZoneOffset):::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z:::Objects->requireNonNull->epochDay->toLocalDate->toEpochDay->secs->toLocalTime->toSecondOfDay->offset->getTotalSeconds->return
ChronoLocalDateTime#compareTo(ChronoLocalDateTime):::Compares this date-time to another date-time, including the chronology:::cmp->toLocalDate->other->toLocalDate->compareTo->if->toLocalTime->other->toLocalTime->compareTo->if->getChronology->other->getChronology->compareTo->return
ChronoLocalDateTime#isAfter(ChronoLocalDateTime):::Checks if this date-time is after the specified date-time ignoring the chronology:::thisEpDay->this->toLocalDate->toEpochDay->otherEpDay->other->toLocalDate->toEpochDay->return->this->toLocalTime->toNanoOfDay->other->toLocalTime->toNanoOfDay
ChronoLocalDateTime#isBefore(ChronoLocalDateTime):::Checks if this date-time is before the specified date-time ignoring the chronology:::thisEpDay->this->toLocalDate->toEpochDay->otherEpDay->other->toLocalDate->toEpochDay->return->this->toLocalTime->toNanoOfDay->other->toLocalTime->toNanoOfDay
ChronoLocalDateTime#isEqual(ChronoLocalDateTime):::Checks if this date-time is equal to the specified date-time ignoring the chronology:::return->this->toLocalTime->toNanoOfDay->other->toLocalTime->toNanoOfDay->this->toLocalDate->toEpochDay->other->toLocalDate->toEpochDay
ChronoLocalDateTime#equals(Object):::Checks if this date-time is equal to another date-time, including the chronology:::
ChronoLocalDateTime#hashCode():::A hash code for this date-time.:::
ChronoLocalDateTime#toString():::Outputs this date-time as a String:::
ChronoLocalDateTimeImpl#of(R, LocalTime):::Obtains an instance of ChronoLocalDateTime from a date and time.:::return->new->ChronoLocalDateTimeImpl<>
ChronoLocalDateTimeImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoLocalDateTime ensuring it bas the specified chronology.:::other->if->chrono->other->getChronology->equals->throw->chrono->getId->other->getChronology->getId->new->ClassCastException->return
Chronology#from(TemporalAccessor):::Obtains an instance of Chronology from a temporal object:::Objects->requireNonNull->obj->temporal->TemporalQueries->chronology->query->return->Objects->requireNonNullElse
Chronology#ofLocale(Locale):::Obtains an instance of Chronology from a locale:::return->AbstractChronology->ofLocale
Chronology#of(String):::Obtains an instance of Chronology from a chronology ID or calendar system type:::return->AbstractChronology->of
Chronology#getAvailableChronologies():::Returns the available chronologies:::return->AbstractChronology->getAvailableChronologies
Chronology#getId():::Gets the ID of the chronology:::
Chronology#getCalendarType():::Gets the calendar type of the calendar system:::
Chronology#date(Era, int, int, int):::Obtains a local date in this chronology from the era, year-of-era, month-of-year and day-of-month fields.:::return->prolepticYear->date
Chronology#date(int, int, int):::Obtains a local date in this chronology from the proleptic-year, month-of-year and day-of-month fields.:::
Chronology#dateYearDay(Era, int, int):::Obtains a local date in this chronology from the era, year-of-era and day-of-year fields.:::return->prolepticYear->dateYearDay
Chronology#dateYearDay(int, int):::Obtains a local date in this chronology from the proleptic-year and day-of-year fields.:::
Chronology#dateEpochDay(long):::Obtains a local date in this chronology from the epoch-day:::
Chronology#dateNow():::Obtains the current local date in this chronology from the system clock in the default time-zone:::return->Clock->systemDefaultZone->dateNow
Chronology#dateNow(ZoneId):::Obtains the current local date in this chronology from the system clock in the specified time-zone:::return->Clock->system->dateNow
Chronology#dateNow(Clock):::Obtains the current local date in this chronology from the specified clock:::Objects->requireNonNull->return->LocalDate->now->date
Chronology#date(TemporalAccessor):::Obtains a local date in this chronology from another temporal object:::
Chronology#localDateTime(TemporalAccessor):::Obtains a local date-time in this chronology from another temporal object:::try->return->date->LocalTime->from->atTime->catch->throw->temporal->getClass->new->DateTimeException->finally
Chronology#zonedDateTime(TemporalAccessor):::Obtains a ChronoZonedDateTime in this chronology from another temporal object:::try->zone->ZoneId->from->try->instant->Instant->from->return->zonedDateTime->catch->cldt->ChronoLocalDateTimeImpl->localDateTime->ensureValid->return->ChronoZonedDateTimeImpl->ofBest->finally->catch->throw->temporal->getClass->new->DateTimeException->finally
Chronology#zonedDateTime(Instant, ZoneId):::Obtains a ChronoZonedDateTime in this chronology from an Instant:::return->ChronoZonedDateTimeImpl->ofInstant
Chronology#isLeapYear(long):::Checks if the specified year is a leap year:::
Chronology#prolepticYear(Era, int):::Calculates the proleptic-year given the era and year-of-era:::
Chronology#eraOf(int):::Creates the chronology era object from the numeric value:::
Chronology#eras():::Gets the list of eras for the chronology:::
Chronology#range(ChronoField):::Gets the range of valid values for the specified field:::
Chronology#getDisplayName(TextStyle, Locale):::Gets the textual representation of this chronology:::temporal->new->TemporalAccessor->return->new->DateTimeFormatterBuilder->appendChronologyText->toFormatter->format
Chronology#resolveDate(Map, ResolverStyle):::Resolves parsed ChronoField values into a date during parsing:::
Chronology#period(int, int, int):::Obtains a period for this chronology based on years, months and days:::return->new->ChronoPeriodImpl
Chronology#epochSecond(int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z:::Objects->requireNonNull->HOUR_OF_DAY->checkValidValue->MINUTE_OF_HOUR->checkValidValue->SECOND_OF_MINUTE->checkValidValue->daysInSec->Math->date->toEpochDay->multiplyExact->timeinSec->return->Math->zoneOffset->getTotalSeconds->addExact
Chronology#epochSecond(Era, int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z:::Objects->requireNonNull->return->prolepticYear->epochSecond
Chronology#compareTo(Chronology):::Compares this chronology to another chronology:::
Chronology#equals(Object):::Checks if this chronology is equal to another chronology:::
Chronology#hashCode():::A hash code for this chronology:::
Chronology#toString():::Outputs this chronology as a String:::
ChronoPeriod#between(ChronoLocalDate, ChronoLocalDate):::Obtains a ChronoPeriod consisting of amount of time between two dates:::Objects->requireNonNull->Objects->requireNonNull->return->startDateInclusive->until
ChronoPeriod#get(TemporalUnit):::Gets the value of the requested unit:::
ChronoPeriod#getUnits():::Gets the set of units supported by this period:::
ChronoPeriod#getChronology():::Gets the chronology that defines the meaning of the supported units:::
ChronoPeriod#isZero():::Checks if all the supported units of this period are zero.:::foreach->getUnits->if->get->return->return
ChronoPeriod#isNegative():::Checks if any of the supported units of this period are negative.:::foreach->getUnits->if->get->return->return
ChronoPeriod#plus(TemporalAmount):::Returns a copy of this period with the specified period added:::
ChronoPeriod#minus(TemporalAmount):::Returns a copy of this period with the specified period subtracted:::
ChronoPeriod#multipliedBy(int):::Returns a new instance with each amount in this period in this period multiplied by the specified scalar:::
ChronoPeriod#negated():::Returns a new instance with each amount in this period negated:::return->multipliedBy
ChronoPeriod#normalized():::Returns a copy of this period with the amounts of each unit normalized:::
ChronoPeriod#addTo(Temporal):::Adds this period to the specified temporal object:::
ChronoPeriod#subtractFrom(Temporal):::Subtracts this period from the specified temporal object:::
ChronoPeriod#equals(Object):::Checks if this period is equal to another period, including the chronology:::
ChronoPeriod#hashCode():::A hash code for this period.:::
ChronoPeriod#toString():::Outputs this period as a String:::
ChronoPeriodImpl#writeReplace():::Writes the Chronology using a dedicated serialized form:::return->new->Ser
ChronoZonedDateTime#timeLineOrder():::Gets a comparator that compares ChronoZonedDateTime in time-line order ignoring the chronology:::return->cmp->Long->dateTime1->toEpochSecond->dateTime2->toEpochSecond->compare->if->Long->dateTime1->toLocalTime->getNano->dateTime2->toLocalTime->getNano->compare->return
ChronoZonedDateTime#from(TemporalAccessor):::Obtains an instance of ChronoZonedDateTime from a temporal object:::if->return->Objects->requireNonNull->chrono->temporal->TemporalQueries->chronology->query->if->throw->temporal->getClass->new->DateTimeException->return->chrono->zonedDateTime
ChronoZonedDateTime#toLocalDate():::Gets the local date part of this date-time:::return->toLocalDateTime->toLocalDate
ChronoZonedDateTime#toLocalTime():::Gets the local time part of this date-time:::return->toLocalDateTime->toLocalTime
ChronoZonedDateTime#toLocalDateTime():::Gets the local date-time part of this date-time:::
ChronoZonedDateTime#getChronology():::Gets the chronology of this date-time:::return->toLocalDate->getChronology
ChronoZonedDateTime#getOffset():::Gets the zone offset, such as '+01:00':::
ChronoZonedDateTime#getZone():::Gets the zone ID, such as 'Europe/Paris':::
ChronoZonedDateTime#withEarlierOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the earlier of the two valid offsets at a local time-line overlap:::
ChronoZonedDateTime#withLaterOffsetAtOverlap():::Returns a copy of this date-time changing the zone offset to the later of the two valid offsets at a local time-line overlap:::
ChronoZonedDateTime#withZoneSameLocal(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the local date-time if possible:::
ChronoZonedDateTime#withZoneSameInstant(ZoneId):::Returns a copy of this date-time with a different time-zone, retaining the instant:::
ChronoZonedDateTime#isSupported(TemporalField):::Checks if the specified field is supported:::
ChronoZonedDateTime#isSupported(TemporalUnit):::Checks if the specified unit is supported:::if->return->return->unit->isSupportedBy
ChronoZonedDateTime#query(TemporalQuery):::Queries this date-time using the specified query:::if->TemporalQueries->zone->TemporalQueries->zoneId->return->getZone->else->if->TemporalQueries->offset->return->getOffset->else->if->TemporalQueries->localTime->return->toLocalTime->else->if->TemporalQueries->chronology->return->getChronology->else->if->TemporalQueries->precision->return->return->query->queryFrom
ChronoZonedDateTime#format(DateTimeFormatter):::Formats this date-time using the specified formatter:::Objects->requireNonNull->return->formatter->format
ChronoZonedDateTime#toInstant():::Converts this date-time to an Instant:::return->Instant->toEpochSecond->toLocalTime->getNano->ofEpochSecond
ChronoZonedDateTime#toEpochSecond():::Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z:::epochDay->toLocalDate->toEpochDay->secs->toLocalTime->toSecondOfDay->getOffset->getTotalSeconds->return
ChronoZonedDateTime#compareTo(ChronoZonedDateTime):::Compares this date-time to another date-time, including the chronology:::cmp->Long->toEpochSecond->other->toEpochSecond->compare->if->toLocalTime->getNano->other->toLocalTime->getNano->if->toLocalDateTime->other->toLocalDateTime->compareTo->if->getZone->getId->other->getZone->getId->compareTo->if->getChronology->other->getChronology->compareTo->return
ChronoZonedDateTime#isBefore(ChronoZonedDateTime):::Checks if the instant of this date-time is before that of the specified date-time:::thisEpochSec->toEpochSecond->otherEpochSec->other->toEpochSecond->return->toLocalTime->getNano->other->toLocalTime->getNano
ChronoZonedDateTime#isAfter(ChronoZonedDateTime):::Checks if the instant of this date-time is after that of the specified date-time:::thisEpochSec->toEpochSecond->otherEpochSec->other->toEpochSecond->return->toLocalTime->getNano->other->toLocalTime->getNano
ChronoZonedDateTime#isEqual(ChronoZonedDateTime):::Checks if the instant of this date-time is equal to that of the specified date-time:::return->toEpochSecond->other->toEpochSecond->toLocalTime->getNano->other->toLocalTime->getNano
ChronoZonedDateTime#equals(Object):::Checks if this date-time is equal to another date-time:::
ChronoZonedDateTime#hashCode():::A hash code for this date-time.:::
ChronoZonedDateTime#toString():::Outputs this date-time as a String:::
ChronoZonedDateTimeImpl#ofBest(ChronoLocalDateTimeImpl, ZoneId, ZoneOffset):::Obtains an instance from a local date-time using the preferred offset if possible.:::Objects->requireNonNull->Objects->requireNonNull->if->return->new->ChronoZonedDateTimeImpl<>->rules->zone->getRules->isoLDT->LocalDateTime->from->validOffsets->rules->getValidOffsets->offset->if->validOffsets->size->validOffsets->get->else->if->validOffsets->size->trans->rules->getTransition->localDateTime->trans->getDuration->getSeconds->plusSeconds->trans->getOffsetAfter->else->if->validOffsets->contains->else->validOffsets->get->Objects->requireNonNull->return->new->ChronoZonedDateTimeImpl<>
ChronoZonedDateTimeImpl#ofInstant(Chronology, Instant, ZoneId):::Obtains an instance from an instant using the specified time-zone.:::rules->zone->getRules->offset->rules->getOffset->Objects->requireNonNull->ldt->LocalDateTime->instant->getEpochSecond->instant->getNano->ofEpochSecond->cldt->chrono->localDateTime->return->new->ChronoZonedDateTimeImpl<>
ChronoZonedDateTimeImpl#ensureValid(Chronology, Temporal):::Casts the Temporal to ChronoZonedDateTimeImpl ensuring it bas the specified chronology.:::other->if->chrono->other->getChronology->equals->throw->chrono->getId->other->getChronology->getId->new->ClassCastException->return
Era#getValue():::Gets the numeric value associated with the era as defined by the chronology:::
Era#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->return->field->isSupportedBy
Era#range(TemporalField):::Gets the range of valid values for the specified field:::return->TemporalAccessor.super->range
Era#get(TemporalField):::Gets the value of the specified field from this era as an int:::if->return->getValue->return->TemporalAccessor.super->get
Era#getLong(TemporalField):::Gets the value of the specified field from this era as a long:::if->return->getValue->else->if->throw->new->UnsupportedTemporalTypeException->return->field->getFrom
Era#query(TemporalQuery):::Queries this era using the specified query:::if->TemporalQueries->precision->return->return->TemporalAccessor.super->query
Era#adjustInto(Temporal):::Adjusts the specified temporal object to have the same era as this object:::return->temporal->getValue->with
Era#getDisplayName(TextStyle, Locale):::Gets the textual representation of this era:::return->new->DateTimeFormatterBuilder->appendText->toFormatter->format
HijrahChronology#getId():::Gets the ID of the chronology:::return
HijrahChronology#getCalendarType():::Gets the calendar type of the Islamic calendar:::return
HijrahChronology#date(Era, int, int, int):::Obtains a local date in Hijrah calendar system from the era, year-of-era, month-of-year and day-of-month fields.:::return->prolepticYear->date
HijrahChronology#date(int, int, int):::Obtains a local date in Hijrah calendar system from the proleptic-year, month-of-year and day-of-month fields.:::return->HijrahDate->of
HijrahChronology#dateYearDay(Era, int, int):::Obtains a local date in Hijrah calendar system from the era, year-of-era and day-of-year fields.:::return->prolepticYear->dateYearDay
HijrahChronology#dateYearDay(int, int):::Obtains a local date in Hijrah calendar system from the proleptic-year and day-of-year fields.:::date->HijrahDate->of->if->date->lengthOfYear->throw->new->DateTimeException->return->date->plusDays
HijrahChronology#dateEpochDay(long):::Obtains a local date in the Hijrah calendar system from the epoch-day.:::return->HijrahDate->ofEpochDay
HijrahChronology#eraOf(int):::Creates the HijrahEra object from the numeric value:::switch->return->throw->new->DateTimeException
HijrahChronology#checkValidYear(long):::Check the validity of a year.:::if->getMinimumYear->getMaximumYear->throw->new->DateTimeException->return
HijrahChronology#getHijrahDateInfo(int):::Returns an array containing the Hijrah year, month and day computed from the epoch day.:::checkCalendarInit->if->throw->new->DateTimeException->epochMonth->epochDayToEpochMonth->year->epochMonthToYear->month->epochMonthToMonth->day1->epochMonthToEpochDay->date->dateInfo->new->intArr->return
HijrahChronology#getEpochDay(int, int, int):::Return the epoch day computed from Hijrah year, month, and day.:::checkCalendarInit->checkValidMonth->epochMonth->yearToEpochMonth->if->throw->new->DateTimeException->if->getMonthLength->throw->new->DateTimeException->return->epochMonthToEpochDay
HijrahChronology#getDayOfYear(int, int):::Returns day of year for the year and month.:::return->yearMonthToDayOfYear
HijrahChronology#getMonthLength(int, int):::Returns month length for the year and month.:::epochMonth->yearToEpochMonth->if->throw->new->DateTimeException->return->epochMonthLength
HijrahChronology#getYearLength(int):::Returns year length:::return->yearMonthToDayOfYear
HijrahChronology#getMinimumYear():::Return the minimum supported Hijrah year.:::return->epochMonthToYear
HijrahChronology#getMaximumYear():::Return the maximum supported Hijrah year.:::return->epochMonthToYear
HijrahChronology#getMaximumMonthLength():::Returns maximum day-of-month.:::return
HijrahChronology#getMinimumMonthLength():::Returns smallest maximum day-of-month.:::return
HijrahChronology#getMaximumDayOfYear():::Returns maximum day-of-year.:::return
HijrahChronology#getSmallestMaximumDayOfYear():::Returns smallest maximum day-of-year.:::return
HijrahChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::return->super->writeReplace
HijrahDate#of(HijrahChronology, int, int, int):::Obtains an instance of HijrahDate from the Hijrah proleptic year, month-of-year and day-of-month.:::return->new->HijrahDate
HijrahDate#ofEpochDay(HijrahChronology, long):::Returns a HijrahDate for the chronology and epochDay.:::return->new->HijrahDate
HijrahDate#now():::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the default time-zone:::return->Clock->systemDefaultZone->now
HijrahDate#now(ZoneId):::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar in the specified time-zone:::return->Clock->system->now
HijrahDate#now(Clock):::Obtains the current HijrahDate of the Islamic Umm Al-Qura calendar from the specified clock:::return->HijrahDate->LocalDate->now->toEpochDay->ofEpochDay
HijrahDate#of(int, int, int):::Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from the proleptic-year, month-of-year and day-of-month fields:::return->date
HijrahDate#from(TemporalAccessor):::Obtains a HijrahDate of the Islamic Umm Al-Qura calendar from a temporal object:::return->date
HijrahDate#getChronology():::Gets the chronology of this date, which is the Hijrah calendar system:::return
HijrahDate#getEra():::Gets the era applicable at this date:::return
HijrahDate#lengthOfMonth():::Returns the length of the month represented by this date:::return->chrono->getMonthLength
HijrahDate#lengthOfYear():::Returns the length of the year represented by this date:::return->chrono->getYearLength
HijrahDate#withVariant(HijrahChronology):::Returns a HijrahDate with the Chronology requested:::if->return->monthDays->chronology->getDayOfYear->return->HijrahDate->of
HijrahDate#isLeapYear():::Checks if the year is a leap year, according to the Hijrah calendar system rules.:::return->chrono->isLeapYear
HijrahDate#equals(Object):::Compares this date to another date, including the chronology:::if->return->if->otherDate->return->getChronology->otherDate->getChronology->equals->return
HijrahDate#hashCode():::A hash code for this date.:::yearValue->monthValue->dayValue->return->getChronology->getId->hashCode
IsoChronology#getId():::Gets the ID of the chronology - 'ISO':::return
IsoChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'iso8601':::return
IsoChronology#date(Era, int, int, int):::Obtains an ISO local date from the era, year-of-era, month-of-year and day-of-month fields.:::return->prolepticYear->date
IsoChronology#date(int, int, int):::Obtains an ISO local date from the proleptic-year, month-of-year and day-of-month fields:::return->LocalDate->of
IsoChronology#dateYearDay(Era, int, int):::Obtains an ISO local date from the era, year-of-era and day-of-year fields.:::return->prolepticYear->dateYearDay
IsoChronology#dateYearDay(int, int):::Obtains an ISO local date from the proleptic-year and day-of-year fields:::return->LocalDate->ofYearDay
IsoChronology#dateEpochDay(long):::Obtains an ISO local date from the epoch-day:::return->LocalDate->ofEpochDay
IsoChronology#date(TemporalAccessor):::Obtains an ISO local date from another date-time object:::return->LocalDate->from
IsoChronology#epochSecond(int, int, int, int, int, int, ZoneOffset):::Gets the number of seconds from the epoch of 1970-01-01T00:00:00Z:::YEAR->checkValidValue->MONTH_OF_YEAR->checkValidValue->DAY_OF_MONTH->checkValidValue->HOUR_OF_DAY->checkValidValue->MINUTE_OF_HOUR->checkValidValue->SECOND_OF_MINUTE->checkValidValue->Objects->requireNonNull->if->dom->numberOfDaysOfMonth->if->if->throw->new->DateTimeException->else->throw->Month->of->name->new->DateTimeException->totalDays->timeinSec->if->else->if->if->isLeapYear->return->Math->Math->multiplyExact->zoneOffset->getTotalSeconds->addExact
IsoChronology#localDateTime(TemporalAccessor):::Obtains an ISO local date-time from another date-time object:::return->LocalDateTime->from
IsoChronology#zonedDateTime(TemporalAccessor):::Obtains an ISO zoned date-time from another date-time object:::return->ZonedDateTime->from
IsoChronology#zonedDateTime(Instant, ZoneId):::Obtains an ISO zoned date-time in this chronology from an Instant:::return->ZonedDateTime->ofInstant
IsoChronology#dateNow():::Obtains the current ISO local date from the system clock in the default time-zone:::return->Clock->systemDefaultZone->dateNow
IsoChronology#dateNow(ZoneId):::Obtains the current ISO local date from the system clock in the specified time-zone:::return->Clock->system->dateNow
IsoChronology#dateNow(Clock):::Obtains the current ISO local date from the specified clock:::Objects->requireNonNull->return->LocalDate->now->date
IsoChronology#isLeapYear(long):::Checks if the year is a leap year, according to the ISO proleptic calendar system rules:::return
IsoChronology#resolveDate(Map, ResolverStyle):::Resolves parsed ChronoField values into a date during parsing:::return->super->resolveDate
IsoChronology#period(int, int, int):::Obtains a period for this chronology based on years, months and days:::return->Period->of
IsoChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::return->super->writeReplace
JapaneseChronology#getId():::Gets the ID of the chronology - 'Japanese':::return
JapaneseChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'japanese':::return
JapaneseChronology#date(Era, int, int, int):::Obtains a local date in Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields:::if->throw->new->ClassCastException->return->JapaneseDate->of
JapaneseChronology#date(int, int, int):::Obtains a local date in Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields:::return->LocalDate->of->new->JapaneseDate
JapaneseChronology#dateYearDay(Era, int, int):::Obtains a local date in Japanese calendar system from the era, year-of-era and day-of-year fields:::return->JapaneseDate->ofYearDay
JapaneseChronology#dateYearDay(int, int):::Obtains a local date in Japanese calendar system from the proleptic-year and day-of-year fields:::return->LocalDate->ofYearDay->new->JapaneseDate
JapaneseChronology#dateEpochDay(long):::Obtains a local date in the Japanese calendar system from the epoch-day.:::return->LocalDate->ofEpochDay->new->JapaneseDate
JapaneseChronology#isLeapYear(long):::Checks if the specified year is a leap year:::return->isLeapYear
JapaneseChronology#eraOf(int):::Returns the calendar system era object from the given numeric value:::return->JapaneseEra->of
JapaneseChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::return->super->writeReplace
JapaneseDate#now():::Obtains the current JapaneseDate from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
JapaneseDate#now(ZoneId):::Obtains the current JapaneseDate from the system clock in the specified time-zone:::return->Clock->system->now
JapaneseDate#now(Clock):::Obtains the current JapaneseDate from the specified clock:::return->LocalDate->now->new->JapaneseDate
JapaneseDate#of(JapaneseEra, int, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the era, year-of-era, month-of-year and day-of-month fields:::Objects->requireNonNull->jdate->newCalendarDate->jdate->era->getPrivateEra->setEra->setDate->if->validate->throw->new->DateTimeException->date->LocalDate->jdate->getNormalizedYear->of->return->new->JapaneseDate
JapaneseDate#of(int, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the proleptic-year, month-of-year and day-of-month fields:::return->LocalDate->of->new->JapaneseDate
JapaneseDate#ofYearDay(JapaneseEra, int, int):::Obtains a JapaneseDate representing a date in the Japanese calendar system from the era, year-of-era and day-of-year fields:::Objects->requireNonNull->firstDay->era->getPrivateEra->getSinceDate->jdate->newCalendarDate->jdate->era->getPrivateEra->setEra->if->jdate->firstDay->getMonth->firstDay->getDayOfMonth->setDate->else->jdate->setDate->normalize->if->era->getPrivateEra->jdate->getEra->jdate->getYear->throw->new->DateTimeException->localdate->LocalDate->jdate->getNormalizedYear->jdate->getMonth->jdate->getDayOfMonth->of->return->new->JapaneseDate
JapaneseDate#from(TemporalAccessor):::Obtains a JapaneseDate from a temporal object:::return->date
JapaneseDate#getChronology():::Gets the chronology of this date, which is the Japanese calendar system:::return
JapaneseDate#getEra():::Gets the era applicable at this date:::return
JapaneseDate#lengthOfMonth():::Returns the length of the month represented by this date:::return->isoDate->lengthOfMonth
JapaneseDate#isSupported(TemporalField):::Checks if the specified field is supported:::if->return->return->super->isSupported
JapaneseDate#equals(Object):::Compares this date to another date, including the chronology:::if->return->if->otherDate->return->equals->return
JapaneseDate#hashCode():::A hash code for this date.:::return->getChronology->getId->hashCode->isoDate->hashCode
JapaneseEra#getPrivateEra():::Returns the Sun private Era instance corresponding to this JapaneseEra.:::return->ordinal
JapaneseEra#of(int):::Obtains an instance of JapaneseEra from an int value:::i->ordinal->if->throw->new->DateTimeException->return
JapaneseEra#valueOf(String):::Returns the JapaneseEra with the name:::Objects->requireNonNull->foreach->if->era->getName->equals->return->throw->new->IllegalArgumentException
JapaneseEra#values():::Returns an array of JapaneseEras:::return->Arrays->copyOf
JapaneseEra#from(LocalDate):::Obtains an instance of JapaneseEra from a date.:::if->date->isBefore->throw->new->DateTimeException->for->i->return
JapaneseEra#getValue():::Gets the numeric era int value:::return
JapaneseEra#range(TemporalField):::Gets the range of valid values for the specified field:::if->return->range->return->Era.super->range
MinguoChronology#getId():::Gets the ID of the chronology - 'Minguo':::return
MinguoChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'roc':::return
MinguoChronology#date(Era, int, int, int):::Obtains a local date in Minguo calendar system from the era, year-of-era, month-of-year and day-of-month fields.:::return->prolepticYear->date
MinguoChronology#date(int, int, int):::Obtains a local date in Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields.:::return->LocalDate->of->new->MinguoDate
MinguoChronology#dateYearDay(Era, int, int):::Obtains a local date in Minguo calendar system from the era, year-of-era and day-of-year fields.:::return->prolepticYear->dateYearDay
MinguoChronology#dateYearDay(int, int):::Obtains a local date in Minguo calendar system from the proleptic-year and day-of-year fields.:::return->LocalDate->ofYearDay->new->MinguoDate
MinguoChronology#dateEpochDay(long):::Obtains a local date in the Minguo calendar system from the epoch-day.:::return->LocalDate->ofEpochDay->new->MinguoDate
MinguoChronology#isLeapYear(long):::Checks if the specified year is a leap year:::return->isLeapYear
MinguoChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::return->super->writeReplace
MinguoDate#now():::Obtains the current MinguoDate from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
MinguoDate#now(ZoneId):::Obtains the current MinguoDate from the system clock in the specified time-zone:::return->Clock->system->now
MinguoDate#now(Clock):::Obtains the current MinguoDate from the specified clock:::return->LocalDate->now->new->MinguoDate
MinguoDate#of(int, int, int):::Obtains a MinguoDate representing a date in the Minguo calendar system from the proleptic-year, month-of-year and day-of-month fields:::return->LocalDate->of->new->MinguoDate
MinguoDate#from(TemporalAccessor):::Obtains a MinguoDate from a temporal object:::return->date
MinguoDate#getChronology():::Gets the chronology of this date, which is the Minguo calendar system:::return
MinguoDate#getEra():::Gets the era applicable at this date:::return->getProlepticYear
MinguoDate#lengthOfMonth():::Returns the length of the month represented by this date:::return->isoDate->lengthOfMonth
MinguoDate#equals(Object):::Compares this date to another date, including the chronology:::if->return->if->otherDate->return->equals->return
MinguoDate#hashCode():::A hash code for this date.:::return->getChronology->getId->hashCode->isoDate->hashCode
Ser#writeExternal(ObjectOutput):::Implements the Externalizable interface to write the object.:::writeInternal
Ser#readExternal(ObjectInput):::Implements the Externalizable interface to read the object.:::in->readByte->readInternal
ThaiBuddhistChronology#getId():::Gets the ID of the chronology - 'ThaiBuddhist':::return
ThaiBuddhistChronology#getCalendarType():::Gets the calendar type of the underlying calendar system - 'buddhist':::return
ThaiBuddhistChronology#date(Era, int, int, int):::Obtains a local date in Thai Buddhist calendar system from the era, year-of-era, month-of-year and day-of-month fields.:::return->prolepticYear->date
ThaiBuddhistChronology#date(int, int, int):::Obtains a local date in Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields.:::return->LocalDate->of->new->ThaiBuddhistDate
ThaiBuddhistChronology#dateYearDay(Era, int, int):::Obtains a local date in Thai Buddhist calendar system from the era, year-of-era and day-of-year fields.:::return->prolepticYear->dateYearDay
ThaiBuddhistChronology#dateYearDay(int, int):::Obtains a local date in Thai Buddhist calendar system from the proleptic-year and day-of-year fields.:::return->LocalDate->ofYearDay->new->ThaiBuddhistDate
ThaiBuddhistChronology#dateEpochDay(long):::Obtains a local date in the Thai Buddhist calendar system from the epoch-day.:::return->LocalDate->ofEpochDay->new->ThaiBuddhistDate
ThaiBuddhistChronology#isLeapYear(long):::Checks if the specified year is a leap year:::return->isLeapYear
ThaiBuddhistChronology#writeReplace():::Writes the Chronology using a dedicated serialized form.:::return->super->writeReplace
ThaiBuddhistDate#now():::Obtains the current ThaiBuddhistDate from the system clock in the default time-zone:::return->Clock->systemDefaultZone->now
ThaiBuddhistDate#now(ZoneId):::Obtains the current ThaiBuddhistDate from the system clock in the specified time-zone:::return->Clock->system->now
ThaiBuddhistDate#now(Clock):::Obtains the current ThaiBuddhistDate from the specified clock:::return->LocalDate->now->new->ThaiBuddhistDate
ThaiBuddhistDate#of(int, int, int):::Obtains a ThaiBuddhistDate representing a date in the Thai Buddhist calendar system from the proleptic-year, month-of-year and day-of-month fields:::return->LocalDate->of->new->ThaiBuddhistDate
ThaiBuddhistDate#from(TemporalAccessor):::Obtains a ThaiBuddhistDate from a temporal object:::return->date
ThaiBuddhistDate#getChronology():::Gets the chronology of this date, which is the Thai Buddhist calendar system:::return
ThaiBuddhistDate#getEra():::Gets the era applicable at this date:::return->getProlepticYear
ThaiBuddhistDate#lengthOfMonth():::Returns the length of the month represented by this date:::return->isoDate->lengthOfMonth
ThaiBuddhistDate#equals(Object):::Compares this date to another date, including the chronology:::if->return->if->otherDate->return->equals->return
ThaiBuddhistDate#hashCode():::A hash code for this date.:::return->getChronology->getId->hashCode->isoDate->hashCode

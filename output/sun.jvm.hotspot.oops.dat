CompressedLineNumberReadStream#readPair():::Read (bci, line number) pair from stream:::next->readByte->if->return->if->readSignedInt->readSignedInt->else->return
ConstantPool#getNameRefIndexAt(int):::Lookup for entries consisting of (name_index, signature_index):::refIndex->getNameAndTypeAt->if->println->i->if->println->return
ConstantPool#getSignatureRefIndexAt(int):::Lookup for entries consisting of (name_index, signature_index):::refIndex->getNameAndTypeAt->if->println->i->if->println->return
ConstantPool#getMethodHandleIndexAt(int):::Lookup for MethodHandle entries.:::if->Assert->getTagAt->isMethodHandle->that->res->getIntAt->extractHighShortFromInt->if->println->return
ConstantPool#getMethodHandleRefKindAt(int):::Lookup for MethodHandle entries.:::if->Assert->getTagAt->isMethodHandle->that->res->getIntAt->extractLowShortFromInt->if->println->return
ConstantPool#getMethodTypeIndexAt(int):::Lookup for MethodType entries.:::if->Assert->getTagAt->isMethodType->that->res->getIntAt->if->println->return
ConstantPool#getBootstrapSpecifierAt(int):::Lookup for multi-operand (InvokeDynamic, Dynamic) entries.:::if->Assert->getTagAt->isInvokeDynamic->getTagAt->isDynamicConstant->that->bsmSpec->this->getIntAt->extractLowShortFromInt->operands->getOperands->if->return->basePos->VM->getVM->operands->at->operands->at->buildIntFromShorts->argv->argc->operands->at->endPos->values->new->shortArr->for->j->return
ConstMethod#getBytecodeOrBPAt(int):::Get a bytecode or breakpoint at the given bci:::return->getAddress->getJByteAt
ConstMethod#getBytecodeShortArg(int):::Fetches a 16-bit big-endian ("Java ordered") value from the       bytecode stream:::hi->getBytecodeOrBPAt->lo->getBytecodeOrBPAt->return
ConstMethod#getNativeShortArg(int):::Fetches a 16-bit native ordered value from the       bytecode stream:::hi->getBytecodeOrBPAt->lo->getBytecodeOrBPAt->if->VM->getVM->isBigEndian->return->else->return
ConstMethod#getBytecodeIntArg(int):::Fetches a 32-bit big-endian ("Java ordered") value from the       bytecode stream:::b4->getBytecodeOrBPAt->b3->getBytecodeOrBPAt->b2->getBytecodeOrBPAt->b1->getBytecodeOrBPAt->return
ConstMethod#getNativeIntArg(int):::Fetches a 32-bit native ordered value from the       bytecode stream:::b4->getBytecodeOrBPAt->b3->getBytecodeOrBPAt->b2->getBytecodeOrBPAt->b1->getBytecodeOrBPAt->if->VM->getVM->isBigEndian->return->else->return
ConstMethod#getLocalVariableTable():::Should only be called if table is present:::if->Assert->hasLocalVariableTable->that->ret->getLocalVariableTableLength->new->LocalVariableTableElementArr->offset->offsetOfLocalVariableTable->for->i->return
Field#getOffset():::Returns the byte offset of the field within the object or klass:::return
Field#getID():::Returns the identifier of the field:::return
Field#isVMField():::Indicates whether this is a VM field:::return
Field#isNamedField():::Indicates whether this is a named field:::return
Field#getFieldHolder():::(Named, non-VM fields only) Returns the InstanceKlass containing       this (static or non-static) field.:::return
Field#getFieldIndex():::(Named, non-VM fields only) Returns the index in the fields       TypeArray for this field:::return
Field#getAccessFlags():::(Named, non-VM fields only) Retrieves the access flags.:::return->accessFlags->getValue
Field#getFieldType():::(Named, non-VM fields only) Returns the type of this field.:::return
Field#getSignature():::(Named, non-VM fields only) Returns the signature of this       field.:::return
FieldType.ArrayInfo#elementBasicType():::See BasicType.java:::return
FieldType#getArrayInfo():::Only valid for T_ARRAY; throws unspecified exception otherwise:::index->dim->skipOptionalSize->while->signature->getByteAt->skipOptionalSize->elementType->BasicType->signature->getByteAt->charToType->return->new->ArrayInfo
GenerateOopMap#interp1(BytecodeStream):::Sets the current state to be the state after executing the       current instruction, starting in the current state.:::if->itr->bci->itr->code->println->printCurrentState->if->switch->itr->code->break->vars->stack->fillStackmapForOpcodes->break->switch->itr->code->break->break->break->break->doReturnMonitorCheck->break->CellTypeState->itr->bci->makeLineRef->ppush1->break->ppush1->break->ppush->break->ppush->break->itr->bci->doLdc->break->itr->bci->doLdc->break->itr->getIndex->ppload->break->itr->getIndex->ppload->break->itr->getIndex->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->pp->break->pp->break->pp->break->itr->bci->ppNewRef->break->itr->getIndex->ppstore->break->itr->getIndex->ppstore->break->itr->getIndex->doAstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->doAstore->break->doAstore->break->doAstore->break->doAstore->break->ppop->break->ppop->break->ppop->break->ppopAny->break->ppopAny->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->pp->break->pp->break->pp->break->pp->break->pp->break->pp->break->pp->break->pp->break->ppop1->break->doReturnMonitorCheck->ppop1->break->ppop->break->doReturnMonitorCheck->ppop->break->doReturnMonitorCheck->ppop->break->ppop->break->itr->dest->doJsr->break->itr->dest_w->doJsr->break->itr->getIndexU2Cpcache->itr->bci->doField->break->itr->getIndexU2Cpcache->itr->bci->doField->break->itr->getIndexU2Cpcache->itr->bci->doField->break->itr->getIndexU2Cpcache->itr->bci->doField->break->itr->getIndexU2Cpcache->itr->bci->doMethod->break->itr->getIndexU2Cpcache->itr->bci->doMethod->break->itr->getIndexU4->itr->bci->doMethod->break->itr->getIndexU2Cpcache->itr->bci->doMethod->break->itr->bci->ppNewRef->break->doCheckcast->break->pp->break->itr->bci->doMonitorenter->break->itr->bci->doMonitorexit->break->if->break->doReturnMonitorCheck->ppop1->break->ppop1->break->itr->itr->bci->codeAt->itr->bci->doMultianewarray->break->throw->new->RuntimeException->break->itr->bci->ppNewRef->break->ppush1->break->pp->break->itr->bci->ppNewRef->break->ppload->break->ppop1->break->throw->itr->code->new->RuntimeException
GenerateOopMap#jumpTargetsDo(BytecodeStream, JumpClosure, int[]):::If the current instruction in "c" has no effect on control flow,       returns "true":::bci->bcs->bci->switch->bcs->code->closure->bcs->dest->process->closure->process->break->closure->bcs->dest->process->break->closure->bcs->dest_w->process->break->tableswitch->BytecodeTableswitch->at->len->tableswitch->length->closure->tableswitch->defaultOffset->process->while->closure->tableswitch->destOffsetAt->process->break->lookupswitch->BytecodeLookupswitch->at->npairs->lookupswitch->numberOfPairs->closure->lookupswitch->defaultOffset->process->while->pair->lookupswitch->pairAt->closure->pair->offset->process->break->Assert->bcs->isWide->that->closure->bcs->dest->process->break->closure->bcs->dest_w->process->break->throw->new->RuntimeException->break->return->return
InstanceKlass#findLocalField(Symbol, Symbol):::Field access by name.:::length->getJavaFieldsCount->for->i->return
InstanceKlass#findInterfaceField(Symbol, Symbol):::Find field in direct superinterfaces.:::interfaces->getLocalInterfaces->n->interfaces->length->for->i->return
InstanceKlass#findField(Symbol, Symbol):::Find field according to JVM spec 5.4.3.2, returns the klass in       which the field is defined.:::f->findLocalField->if->return->findInterfaceField->if->return->supr->getSuper->if->return->supr->findField->return
InstanceKlass#findField(String, String):::Find field according to JVM spec 5.4.3.2, returns the klass in       which the field is defined (convenience routine):::symbols->VM->getVM->getSymbolTable->nameSym->symbols->probe->sigSym->symbols->probe->if->return->return->findField
InstanceKlass#findFieldDbg(String, String):::Find field according to JVM spec 5.4.3.2, returns the klass in       which the field is defined (retained only for backward       compatibility with jdbx):::return->findField
InstanceKlass#getFieldByIndex(int):::Get field by its index in the fields array:::return->newField
InstanceKlass#getImmediateFields():::Return a List of SA Fields for the fields declared in this class:::length->getJavaFieldsCount->immediateFields->new->ArrayList->for->index->return
InstanceKlass#getAllFields():::Return a List of SA Fields for all the java fields in this class,         including all inherited fields:::allFields->getImmediateFields->interfaces->getTransitiveInterfaces->n->interfaces->length->for->i->if->isInterface->supr->if->getSuper->allFields->supr->getImmediateFields->addAll->return
InstanceKlass#getImmediateMethods():::Return a List of SA Methods declared directly in this class/interface:::methods->getMethods->length->methods->length->tmp->new->ObjectArr->methodOrdering->getMethodOrdering->if->methodOrdering->length->for->index->else->for->index->return->Arrays->asList
InstanceKlass#getDirectImplementedInterfaces():::Return a List containing an SA InstanceKlass for each         interface named in this class's 'implements' clause.:::interfaces->getLocalInterfaces->length->interfaces->length->directImplementedInterfaces->new->ArrayList->for->index->return
InstanceKlass#findMethod(String, String):::Convenience routine taking Strings; lookup is done in       SymbolTable.:::syms->VM->getVM->getSymbolTable->nameSym->syms->probe->sigSym->syms->probe->if->return->return->findMethod
InstanceKlass#findMethod(Symbol, Symbol):::Find method in vtable.:::return->getMethods->findMethod
InstanceKlass#getBreakpoints():::Breakpoint support (see methods on Method* for details):::if->VM->getVM->isJvmtiSupported->return->addr->getAddress->breakpoints->getOffset->getAddressAt->return->VMObjectFactory->newObject
java_lang_Class#asKlass(Oop):::get Klass* field at offset hc_klass_offset from a java.lang.Class object:::return->Metadata->aClass->getHandle->getAddressAt->instantiateWrapperFor
java_lang_Class#getOopSize(Oop):::get oop_size field at offset oop_size_offset from a java.lang.Class object:::return->getValue
java_lang_Class#asExternalName(Oop):::Returns the Java name for this Java mirror:::k->java_lang_Class->asKlass->if->type->ak->Metadata->aClass->getHandle->getAddressAt->instantiateWrapperFor->if->BasicType->ak->getElementType->intToBasicType->return->type->getName->else->return->k->getName->asString
Klass#arrayKlass(int):::Array class with specific rank:::return->arrayKlassImpl
Klass#arrayKlass():::Array class with this klass as element type:::return->arrayKlassImpl
Klass#arrayKlassOrNull(int):::These will return null instead of allocating on the heap:::return->arrayKlassImpl
Method#getMaxStack():::WARNING: this is in words, not useful in this system; use getObjectSize() instead:::return->getConstMethod->getMaxStack
Method#getBytecodeOrBPAt(int):::Get a bytecode or breakpoint at the given bci:::return->getConstMethod->getBytecodeOrBPAt
Method#getOrigBytecodeAt(int):::Fetch the original non-breakpoint bytecode at the specified       bci:::bp->getMethodHolder->getBreakpoints->for->bp->getNext->println->for->bp->getNext->Assert->that->return
Method#getBytecodeShortArg(int):::Fetches a 16-bit big-endian ("Java ordered") value from the       bytecode stream:::return->getConstMethod->getBytecodeShortArg
Method#getNativeShortArg(int):::Fetches a 16-bit native ordered value from the       bytecode stream:::return->getConstMethod->getNativeShortArg
Method#getBytecodeIntArg(int):::Fetches a 32-bit big-endian ("Java ordered") value from the       bytecode stream:::return->getConstMethod->getBytecodeIntArg
Method#getNativeIntArg(int):::Fetches a 32-bit native ordered value from the       bytecode stream:::return->getConstMethod->getNativeIntArg
Method#getLocalVariableTable():::Should only be called if table is present:::return->getConstMethod->getLocalVariableTable
Method#getCheckedExceptions():::Should only be called if table is present:::return->getConstMethod->getCheckedExceptions
Method#externalNameAndSignature():::Returns name and signature in external form for debugging       purposes:::buf->new->StringBuffer->buf->getMethodHolder->getName->asString->append->buf->append->buf->getName->asString->append->buf->append->getSignature->new->SignatureConverter->iterateParameters->buf->append->return->buf->toString->replace
NarrowOopField#getValueAsOopHandle(Oop):::Debugging support:::return->obj->getHandle->getOffset->getCompOopHandleAt
ObjectHeap#equal(Oop, Oop):::Comparison operation for oops, either or both of which may be null:::if->return->o1->equals->return
ObjectHeap#typeArrayKlassObj(int):::Takes a BasicType and returns the corresponding primitive array       klass:::if->BasicType->getTBoolean->return->getBoolArrayKlassObj->if->BasicType->getTChar->return->getCharArrayKlassObj->if->BasicType->getTFloat->return->getSingleArrayKlassObj->if->BasicType->getTDouble->return->getDoubleArrayKlassObj->if->BasicType->getTByte->return->getByteArrayKlassObj->if->BasicType->getTShort->return->getShortArrayKlassObj->if->BasicType->getTInt->return->getIntArrayKlassObj->if->BasicType->getTLong->return->getLongArrayKlassObj->throw->new->RuntimeException
ObjectHeap#iterate(HeapVisitor):::The base heap iteration mechanism:::collectLiveRegions->iterateLiveRegions
ObjectHeap#iterate(HeapVisitor, ObjectFilter):::iterate objects satisfying a specified ObjectFilter:::collectLiveRegions->iterateLiveRegions
ObjectHeap#iterateObjectsOfKlass(HeapVisitor, Klass, boolean):::iterate objects of given Klass:::if->if->k->isFinal->iterateExact->else->iterateSubtypes->else->if->k->isAbstract->k->isInterface->iterateExact
ObjectHeap#iterateObjectsOfKlass(HeapVisitor, Klass):::iterate objects of given Klass (objects of subtypes included):::iterateObjectsOfKlass
ObjectHeap#iterateRaw(RawHeapVisitor):::This routine can be used to iterate through the heap at an       extremely low level (stepping word-by-word) to provide the       ability to do very low-level debugging:::liveRegions->collectLiveRegions->totalSize->for->i->liveRegions->size->visitor->prologue->for->i->liveRegions->size->visitor->epilogue
ObjectHistogram#getElements():::Call this after the iteration is complete to obtain the       ObjectHistogramElements in descending order of total heap size       consumed in the form of a List<ObjectHistogramElement>.:::list->new->ArrayList->list->map->values->addAll->Collections->new->Comparator->sort->return
ObjectHistogramElement#getKlass():::Klass for this ObjectHistogramElement:::return
ObjectHistogramElement#getCount():::Number of instances of klass:::return
ObjectHistogramElement#getSize():::Total size of all these instances:::return
ObjectHistogramElement#getDescription():::Human readable description *:::k->getKlass->if->return->k->getName->asString->replace->else->if->ak->if->tak->return->tak->getElementTypeName->else->if->oak->bottom->oak->getBottomKlass->dim->oak->getDimension->buf->new->StringBuffer->if->buf->getElementTypeName->append->else->if->buf->bottom->getName->asString->replace->append->else->throw->new->RuntimeException->for->i->return->buf->toString->return->getInternalName
Oop#getHandle():::Should not be used or needed by most clients outside this       package; is needed, however, by sun.jvm.hotspot.utilities.MarkBits.:::return
Oop#identityHash():::Identity hash in the target VM:::mark->getMark->if->mark->isUnlocked->mark->hasNoHash->return->mark->hash->else->if->mark->isMarked->return->mark->hash->else->return->slowIdentityHash
OopField#getValueAsOopHandle(Oop):::Debugging support:::if->isVMField->obj->isInstance->obj->isArray->throw->obj->toString->new->InternalError->return->VM->getVM->getUniverse->heap->obj->getHandle->getOffset->oop_load_at
OopField#getValueAsOopHandle(VMObject):::Debugging support:::return->obj->getAddress->getOffset->getOopHandleAt
OopUtilities#threadOopGetJavaThread(Oop):::May return null if, e.g., thread was not started:::initThreadFields->addr->threadOop->getHandle->threadEETopField->getOffset->getAddressAt->if->return->return->VM->getVM->getThreads->createJavaThreadWrapper
OopUtilities#threadOopGetThreadStatus(Oop):::returns value of java.lang.Thread.threadStatus field:::initThreadFields->if->return->threadStatusField->getValue->else->thr->threadOopGetJavaThread->if->return->else->return
OopUtilities#threadOopGetParkBlocker(Oop):::returns value of java.lang.Thread.parkBlocker field:::initThreadFields->if->return->threadParkBlockerField->getValue->return
RawHeapVisitor#prologue(long):::This is called at the beginning of the iteration to provide the       RawHeapVisitor with information about the amount of memory which       will be traversed (for example, for displaying a progress bar):::
RawHeapVisitor#epilogue():::This is called after the traversal is complete:::
Symbol#fastCompare(Symbol):::Note: this comparison is used for vtable sorting only; it       doesn't matter what order it defines, as long as it is a total,       time-invariant order Since Symbol* are in C_HEAP, their       relative order in memory never changes, so use address       comparison for speed.:::return->addr->minus

AccessFlags#isPublic()::: access flags is public:::return
AccessFlags#isPrivate()::: access flags is private:::return
AccessFlags#isProtected()::: access flags is protected:::return
AccessFlags#isStatic()::: access flags is static:::return
AccessFlags#isFinal()::: access flags is final:::return
AccessFlags#isSynchronized()::: access flags is synchronized:::return
AccessFlags#isSuper()::: access flags is super:::return
AccessFlags#isVolatile()::: access flags is volatile:::return
AccessFlags#isBridge()::: access flags is bridge:::return
AccessFlags#isTransient()::: access flags is transient:::return
AccessFlags#isVarArgs()::: access flags is var args:::return
AccessFlags#isNative()::: access flags is native:::return
AccessFlags#isEnum()::: access flags is enum:::return
AccessFlags#isAnnotation()::: access flags is annotation:::return
AccessFlags#isInterface()::: access flags is interface:::return
AccessFlags#isAbstract()::: access flags is abstract:::return
AccessFlags#isStrict()::: access flags is strict:::return
AccessFlags#isSynthetic()::: access flags is synthetic:::return
AccessFlags#getValue()::: access flags get value:::return
AccessFlags#isMonitorMatching()::: access flags is monitor matching:::return
AccessFlags#hasMonitorBytecodes()::: access flags has monitor bytecodes:::return
AccessFlags#hasLoops()::: access flags has loops:::return
AccessFlags#loopsFlagInit()::: access flags loops flag init:::return
AccessFlags#queuedForCompilation()::: access flags queued for compilation:::return
AccessFlags#isNotOsrCompilable()::: access flags is not osr compilable:::return
AccessFlags#hasLineNumberTable()::: access flags has line number table:::return
AccessFlags#hasCheckedExceptions()::: access flags has checked exceptions:::return
AccessFlags#hasJsrs()::: access flags has jsrs:::return
AccessFlags#isObsolete()::: access flags is obsolete:::return
AccessFlags#hasMirandaMethods()::: access flags has miranda methods:::return
AccessFlags#hasVanillaConstructor()::: access flags has vanilla constructor:::return
AccessFlags#hasFinalizer()::: access flags has finalizer:::return
AccessFlags#isCloneable()::: access flags is cloneable:::return
AccessFlags#hasLocalVariableTable()::: access flags has local variable table:::return
AccessFlags#fieldAccessWatched()::: access flags field access watched:::return
AccessFlags#fieldModificationWatched()::: access flags field modification watched:::return
AccessFlags#fieldHasGenericSignature()::: access flags field has generic signature:::return
AccessFlags#printOn(PrintStream)::: access flags print on:::if->isPublic->tty->print->if->isPrivate->tty->print->if->isProtected->tty->print->if->isStatic->tty->print->if->isFinal->tty->print->if->isSynchronized->tty->print->if->isVolatile->tty->print->if->isBridge->tty->print->if->isTransient->tty->print->if->isVarArgs->tty->print->if->isNative->tty->print->if->isEnum->tty->print->if->isInterface->tty->print->if->isAbstract->tty->print->if->isStrict->tty->print->if->isSynthetic->tty->print
AccessFlags#getStandardFlags()::: access flags get standard flags:::return
ArgInfoData#numberOfArgs()::: arg info data number of args:::return->arrayLen
ArgInfoData#argModified(int)::: arg info data arg modified:::return->arrayUintAt
ArgInfoData#printDataOn(PrintStream)::: arg info data print data on:::printShared->nargs->numberOfArgs->for->i->st->println
Array#initialize(TypeDataBase)::: array initialize:::type->db->lookupType->type->getSize
Array#headerSizeInBytes()::: array header size in bytes:::if->return->if->VM->getVM->isCompressedKlassPointersEnabled->else->VM->getVM->VM->getVM->getIntSize->VM->getVM->getHeapWordSize->alignUp->return
Array#headerSize(BasicType)::: array header size:::if->Universe->elementTypeShouldBeAligned->return->headerSizeInBytes->alignObjectSize->VM->getVM->getHeapWordSize->else->return->headerSizeInBytes->VM->getVM->getHeapWordSize
Array#lengthOffsetInBytes()::: array length offset in bytes:::if->return->if->VM->getVM->isCompressedKlassPointersEnabled->VM->getVM->getIntSize->else->return
Array#getLength()::: array get length:::isUnsigned->return->this->getHandle->lengthOffsetInBytes->VM->getVM->getIntSize->getCIntegerAt
Array#getObjectSize()::: array get object size:::klass->getKlass->s->getLength->klass->getLog2ElementSize->klass->getArrayHeaderInBytes->Oop->alignObjectSize->return
Array#baseOffsetInBytes(BasicType)::: array base offset in bytes:::return->headerSize->VM->getVM->getHeapWordSize
Array#isArray()::: array is array:::return
Array#iterateFields(OopVisitor, boolean)::: array iterate fields:::super->iterateFields
ArrayData#arrayUintAt(int)::: array data array uint at:::aindex->return->uintAt
ArrayData#arrayIntAt(int)::: array data array int at:::aindex->return->intAt
ArrayData#arrayElementOffset(int)::: array data array element offset:::return->cellOffset
ArrayData#staticCellCount()::: array data static cell count:::return
ArrayData#arrayLen()::: array data array len:::return->intAt
ArrayData#cellCount()::: array data cell count:::return->arrayLen
ArrayData#arrayLenOffset()::: array data array len offset:::return->cellOffset
ArrayData#arrayStartOffset()::: array data array start offset:::return->cellOffset
ArrayKlass#initialize(TypeDataBase)::: array klass initialize:::type->db->lookupType->type->getCIntegerField->new->CIntField->type->getAddressField->new->MetadataField->type->getAddressField->new->MetadataField
ArrayKlass#isArrayKlass()::: array klass is array klass:::return
ArrayKlass#getJavaSuper()::: array klass get java super:::sysDict->VM->getVM->getSystemDictionary->return->sysDict->getObjectKlass
ArrayKlass#getDimension()::: array klass get dimension:::return->dimension->getValue
ArrayKlass#getHigherDimension()::: array klass get higher dimension:::return->higherDimension->getValue
ArrayKlass#getLowerDimension()::: array klass get lower dimension:::return->lowerDimension->getValue
ArrayKlass#javaLangCloneableName()::: array klass java lang cloneable name:::if->VM->getVM->getSymbolTable->probe->return
ArrayKlass#javaLangObjectName()::: array klass java lang object name:::if->VM->getVM->getSymbolTable->probe->return
ArrayKlass#javaIoSerializableName()::: array klass java io serializable name:::if->VM->getVM->getSymbolTable->probe->return
ArrayKlass#getClassStatus()::: array klass get class status:::return
ArrayKlass#computeModifierFlags()::: array klass compute modifier flags:::return
ArrayKlass#getArrayHeaderInBytes()::: array klass get array header in bytes:::return->Bits->getLayoutHelper->maskBits
ArrayKlass#getLog2ElementSize()::: array klass get log2 element size:::return->Bits->getLayoutHelper->maskBits
ArrayKlass#getElementType()::: array klass get element type:::return->Bits->getLayoutHelper->maskBits
ArrayKlass#computeSubtypeOf(Klass)::: array klass compute subtype of:::name->k->getName->if->name->javaIoSerializableName->equals->name->javaLangCloneableName->equals->name->javaLangObjectName->equals->return->else->return
ArrayKlass#printValueOn(PrintStream)::: array klass print value on:::tty->print
ArrayKlass#iterateFields(MetadataVisitor)::: array klass iterate fields:::super->iterateFields->visitor->doCInt->visitor->doMetadata->visitor->doMetadata
BitData#staticCellCount()::: bit data static cell count:::return
BitData#cellCount()::: bit data cell count:::return->staticCellCount
BitData#nullSeen()::: bit data null seen:::return->flagAt
BitData#bitDataSize()::: bit data bit data size:::return->cellOffset
BitData#printDataOn(PrintStream)::: bit data print data on:::printShared
BooleanField#getValue(Oop)::: boolean field get value:::return->obj->getHandle->getOffset->getJBooleanAt
BooleanField#getValue(VMObject)::: boolean field get value:::return->obj->getAddress->getOffset->getJBooleanAt
BooleanField#setValue(Oop, boolean)::: boolean field set value:::
BranchData#staticCellCount()::: branch data static cell count:::return
BranchData#cellCount()::: branch data cell count:::return->staticCellCount
BranchData#notTaken()::: branch data not taken:::return->uintAt
BranchData#notTakenOffset()::: branch data not taken offset:::return->cellOffset
BranchData#branchDataSize()::: branch data branch data size:::return->cellOffset
BranchData#printDataOn(PrintStream)::: branch data print data on:::printShared->st->taken->displacement->println->tab->st->notTaken->println
BreakpointInfo#initialize(TypeDataBase)::: breakpoint info initialize:::if->VM->getVM->isJvmtiSupported->return->type->db->lookupType->type->getCIntegerField->type->getCIntegerField->type->getCIntegerField->type->getCIntegerField->type->getAddressField
BreakpointInfo#getOrigBytecode()::: breakpoint info get orig bytecode:::return->origBytecodeField->getValue
BreakpointInfo#getBCI()::: breakpoint info get i:::return->bciField->getValue
BreakpointInfo#getNameIndex()::: breakpoint info get name index:::return->nameIndexField->getValue
BreakpointInfo#getSignatureIndex()::: breakpoint info get signature index:::return->signatureIndexField->getValue
BreakpointInfo#getNext()::: breakpoint info get next:::return->VMObjectFactory->nextField->getValue->newObject
BreakpointInfo#match(Method, int)::: breakpoint info match:::return->getBCI->match
BreakpointInfo#match(Method)::: breakpoint info match:::return->getNameIndex->m->getNameIndex->getSignatureIndex->m->getSignatureIndex
ByteField#getValue(Oop)::: byte field get value:::return->obj->getHandle->getOffset->getJByteAt
ByteField#getValue(VMObject)::: byte field get value:::return->obj->getAddress->getOffset->getJByteAt
ByteField#setValue(Oop, char)::: byte field set value:::
CallTypeData#cellCountGlobalOffset()::: call type data cell count global offset:::return->CounterData->staticCellCount->TypeEntriesAtCall->cellCountLocalOffset
CallTypeData#cellCountNoHeader()::: call type data cell count no header:::return->cellCountGlobalOffset->uintAt
CallTypeData#staticCellCount()::: call type data static cell count:::return
CallTypeData#cellCount()::: call type data cell count:::return->CounterData->staticCellCount->TypeEntriesAtCall->headerCellCount->cellCountGlobalOffset->intAt
CallTypeData#numberOfArguments()::: call type data number of arguments:::return->cellCountNoHeader->TypeStackSlotEntries->perArgCount
CallTypeData#hasArguments()::: call type data has arguments:::return->cellCountNoHeader->TypeStackSlotEntries->perArgCount
CallTypeData#argumentType(int)::: call type data argument type:::return->args->type
CallTypeData#hasReturn()::: call type data has return:::return->cellCountNoHeader->TypeStackSlotEntries->perArgCount
CallTypeData#returnType()::: call type data return type:::return->ret->type
CallTypeData#argumentTypeIndex(int)::: call type data argument type index:::return->args->typeIndex
CallTypeData#returnTypeIndex()::: call type data return type index:::return->ret->typeIndex
CallTypeData#printDataOn(PrintStream)::: call type data print data on:::super->printDataOn->if->hasArguments->tab->st->print->args->printDataOn->if->hasReturn->tab->st->print->ret->printDataOn
CallTypeDataInterface#numberOfArguments()::: call type data interface number of arguments:::
CallTypeDataInterface#hasArguments()::: call type data interface has arguments:::
CallTypeDataInterface#argumentType(int)::: call type data interface argument type:::
CallTypeDataInterface#hasReturn()::: call type data interface has return:::
CallTypeDataInterface#returnType()::: call type data interface return type:::
CallTypeDataInterface#argumentTypeIndex(int)::: call type data interface argument type index:::
CallTypeDataInterface#returnTypeIndex()::: call type data interface return type index:::
CellTypeState#copy()::: cell type state copy:::return->new->CellTypeState
CellTypeState#makeAny(int)::: cell type state make any:::s->new->CellTypeState->if->Assert->s->isValidState->that->return
CellTypeState#makeBottom()::: cell type state make bottom:::return->makeAny
CellTypeState#makeTop()::: cell type state make top:::return->makeAny
CellTypeState#makeAddr(int)::: cell type state make addr:::if->Assert->that->return->makeAny
CellTypeState#makeSlotRef(int)::: cell type state make slot ref:::if->Assert->that->return->makeAny
CellTypeState#makeLineRef(int)::: cell type state make line ref:::if->Assert->that->return->makeAny
CellTypeState#makeLockRef(int)::: cell type state make lock ref:::if->Assert->that->return->makeAny
CellTypeState#isBottom()::: cell type state is bottom:::return
CellTypeState#isLive()::: cell type state is live:::return
CellTypeState#isValidState()::: cell type state is valid state:::if->canBeUninit->canBeValue->isInfoTop->return->if->isInfoTop->return->if->isInfoBottom->return->return
CellTypeState#isAddress()::: cell type state is address:::return
CellTypeState#isReference()::: cell type state is reference:::return
CellTypeState#isValue()::: cell type state is value:::return
CellTypeState#isUninit()::: cell type state is uninit:::return
CellTypeState#canBeAddress()::: cell type state can be address:::return
CellTypeState#canBeReference()::: cell type state can be reference:::return
CellTypeState#canBeValue()::: cell type state can be value:::return
CellTypeState#canBeUninit()::: cell type state can be uninit:::return
CellTypeState#isInfoBottom()::: cell type state is info bottom:::return
CellTypeState#isInfoTop()::: cell type state is info top:::return
CellTypeState#getInfo()::: cell type state get info:::if->Assert->isInfoTop->isInfoBottom->that->return
CellTypeState#getMonitorSource()::: cell type state get monitor source:::if->Assert->isLockReference->that->return->getInfo
CellTypeState#isGoodAddress()::: cell type state is good address:::return->isAddress->isInfoTop
CellTypeState#isLockReference()::: cell type state is lock reference:::return
CellTypeState#isNonlockReference()::: cell type state is nonlock reference:::return
CellTypeState#equal(CellTypeState)::: cell type state equal:::return
CellTypeState#equalKind(CellTypeState)::: cell type state equal kind:::return
CellTypeState#toChar()::: cell type state to char:::if->canBeReference->if->canBeValue->canBeAddress->return->else->return->else->if->canBeValue->return->else->if->canBeAddress->return->else->if->canBeUninit->return->else->return
CellTypeState#set(CellTypeState)::: cell type state set:::
CellTypeState#merge(CellTypeState, int)::: cell type state merge:::result->new->CellTypeState->if->Assert->isBottom->cts->isBottom->that->if->result->isInfoTop->Assert->result->canBeAddress->result->canBeReference->that->if->equal->if->result->isReference->CellTypeState->makeSlotRef->else->if->Assert->result->isValidState->that->return
CellTypeState#print(PrintStream)::: cell type state print:::if->canBeAddress->tty->print->else->tty->print->if->canBeReference->tty->print->else->tty->print->if->canBeValue->tty->print->else->tty->print->if->canBeUninit->tty->print->else->tty->print->if->isInfoTop->tty->print->else->if->isInfoBottom->tty->print->else->if->isReference->info->getInfo->data->if->if->tty->print->else->tty->print->else->tty->print->else->tty->getInfo->print
CellTypeStateList#size()::: cell type state list size:::return->list->size
CellTypeStateList#get(int)::: cell type state list get:::return->list->get
CellTypeStateList#subList(int, int)::: cell type state list sub list:::return->list->subList->new->CellTypeStateList
CharField#getValue(Oop)::: char field get value:::return->obj->getHandle->getOffset->getJCharAt
CharField#getValue(VMObject)::: char field get value:::return->obj->getAddress->getOffset->getJCharAt
CharField#setValue(Oop, char)::: char field set value:::
CheckedExceptionElement#initialize(TypeDataBase)::: checked exception element initialize:::type->db->lookupType->type->getCIntegerField->getOffset
CheckedExceptionElement#getClassCPIndex()::: checked exception element get class index:::return->handle->getCIntegerAt
CIntField#getValue(Oop)::: int field get value:::return->obj->getHandle->getValue
CIntField#getValue(VMObject)::: int field get value:::return->obj->getAddress->getValue
CIntField#getValue(Address)::: int field get value:::return->addr->getOffset->getCIntegerAt
CIntField#setValue(Oop, long)::: int field set value:::
CompiledICHolder#initialize(TypeDataBase)::: compiled holder initialize:::type->db->lookupType->type->getAddressField->new->MetadataField->type->getAddressField->new->MetadataField->type->getSize
CompiledICHolder#isCompiledICHolder()::: compiled holder is compiled holder:::return
CompiledICHolder#getHolderMetadata()::: compiled holder get holder metadata:::return->holderMetadata->getValue
CompiledICHolder#getHolderKlass()::: compiled holder get holder klass:::return->holderKlass->getValue
CompiledICHolder#printValueOn(PrintStream)::: compiled holder print value on:::tty->print
CompressedLineNumberReadStream#readPair():::Read (bci, line number) pair from stream:::next->readByte->if->return->if->readSignedInt->readSignedInt->else->return
CompressedLineNumberReadStream#bci()::: compressed line number read stream bci:::return
CompressedLineNumberReadStream#line()::: compressed line number read stream line:::return
ConstantPool.CPSlot#getSymbol()::: slot get symbol:::return->Symbol->ptr->andWithMask->create
ConstantPool.CPKlassSlot#getNameIndex()::: klass slot get name index:::return
ConstantPool.CPKlassSlot#getResolvedKlassIndex()::: klass slot get resolved klass index:::if->Assert->that->return
ConstantPool#debugMessage(String)::: constant pool debug message:::println
ConstantPool#initialize(TypeDataBase)::: constant pool initialize:::type->db->lookupType->type->getAddressField->type->getAddressField->type->getAddressField->type->getAddressField->new->MetadataField->type->getCIntegerField->new->CIntField->type->getAddressField->type->getSize->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue
ConstantPool#isConstantPool()::: constant pool is constant pool:::return
ConstantPool#getTags()::: constant pool get tags:::return->tags->getAddress->getValue->new->U1Array
ConstantPool#getOperands()::: constant pool get operands:::return->operands->getAddress->getValue->new->U2Array
ConstantPool#getCache()::: constant pool get cache:::addr->cache->getAddress->getValue->return->VMObjectFactory->newObject
ConstantPool#getPoolHolder()::: constant pool get pool holder:::return->poolHolder->getValue
ConstantPool#getLength()::: constant pool get length:::return->length->getAddress->getValue
ConstantPool#getResolvedReferences()::: constant pool get resolved references:::return->getCache->getResolvedReferences
ConstantPool#getResolvedKlasses()::: constant pool get resolved klasses:::return->resolved_klasses->getAddress->getValue->new->KlassArray
ConstantPool#referenceMap()::: constant pool reference map:::return->getCache->referenceMap
ConstantPool#objectToCPIndex(int)::: constant pool object to index:::return->referenceMap->at
ConstantPool#getElementSize()::: constant pool get element size:::if->return->else->VM->getVM->getOopSize->return
ConstantPool#indexOffset(long)::: constant pool index offset:::if->Assert->getLength->getLength->that->return->getElementSize
ConstantPool#getTagAt(long)::: constant pool get tag at:::return->getTags->at->new->ConstantTag
ConstantPool#getSlotAt(long)::: constant pool get slot at:::return->getAddressAtRaw->new->CPSlot
ConstantPool#getKlassSlotAt(long)::: constant pool get klass slot at:::if->Assert->getTagAt->isUnresolvedKlass->getTagAt->isKlass->that->value->getIntAt->name_index->extractHighShortFromInt->resolved_klass_index->extractLowShortFromInt->return->new->CPKlassSlot
ConstantPool#getAddressAtRaw(long)::: constant pool get address at raw:::return->getAddress->indexOffset->getAddressAt
ConstantPool#getSymbolAt(long)::: constant pool get symbol at:::return->Symbol->getAddressAtRaw->create
ConstantPool#getIntAt(long)::: constant pool get int at:::return->getAddress->indexOffset->getJIntAt
ConstantPool#getFloatAt(long)::: constant pool get float at:::return->getAddress->indexOffset->getJFloatAt
ConstantPool#getLongAt(long)::: constant pool get long at:::oneHalf->getAddress->indexOffset->getJIntAt->otherHalf->getAddress->indexOffset->getJIntAt->return->VM->getVM->buildLongFromIntsPD
ConstantPool#getDoubleAt(long)::: constant pool get double at:::return->Double->getLongAt->longBitsToDouble
ConstantPool#getFieldOrMethodAt(int)::: constant pool get field or method at:::if->print->i->cache->getCache->if->else->cache->getEntryAt->getConstantPoolIndex->if->Assert->getTagAt->isFieldOrMethod->that->if->println->res->getIntAt->if->println->return
ConstantPool#getNameAndTypeAt(int)::: constant pool get name and type at:::if->Assert->getTagAt->isNameAndType->getTagAt->that->i->getIntAt->if->println->return->new->intArr->extractLowShortFromInt->extractHighShortFromInt
ConstantPool#getNameRefAt(int)::: constant pool get name ref at:::return->implGetNameRefAt
ConstantPool#uncachedGetNameRefAt(int)::: constant pool uncached get name ref at:::return->implGetNameRefAt
ConstantPool#implGetNameRefAt(int, boolean)::: constant pool impl get name ref at:::signatureIndex->implNameAndTypeRefIndexAt->getNameRefIndexAt->return->getSymbolAt
ConstantPool#getSignatureRefAt(int)::: constant pool get signature ref at:::return->implGetSignatureRefAt
ConstantPool#uncachedGetSignatureRefAt(int)::: constant pool uncached get signature ref at:::return->implGetSignatureRefAt
ConstantPool#implGetSignatureRefAt(int, boolean)::: constant pool impl get signature ref at:::signatureIndex->implNameAndTypeRefIndexAt->getSignatureRefIndexAt->return->getSymbolAt
ConstantPool#isInvokedynamicIndex(int)::: constant pool is invokedynamic index:::return
ConstantPool#decodeInvokedynamicIndex(int)::: constant pool decode invokedynamic index:::Assert->isInvokedynamicIndex->that->return
ConstantPool#invokedynamicCPCacheIndex(int)::: constant pool invokedynamic cache index:::Assert->isInvokedynamicIndex->that->return->decodeInvokedynamicIndex
ConstantPool#invokedynamicCPCacheEntryAt(int)::: constant pool invokedynamic cache entry at:::cpCacheIndex->invokedynamicCPCacheIndex->return->getCache->getEntryAt
ConstantPool#implNameAndTypeRefIndexAt(int, boolean)::: constant pool impl name and type ref index at:::i->if->getCache->if->isInvokedynamicIndex->poolIndex->invokedynamicCPCacheEntryAt->getConstantPoolIndex->invokeDynamicNameAndTypeRefIndexAt->Assert->getTagAt->isNameAndType->that->return->remapInstructionOperandFromCache->else->if->getTagAt->isInvokeDynamic->getTagAt->isDynamicConstant->poolIndex->invokeDynamicNameAndTypeRefIndexAt->Assert->getTagAt->isNameAndType->that->return->refIndex->getIntAt->return->extractHighShortFromInt
ConstantPool#remapInstructionOperandFromCache(int)::: constant pool remap instruction operand from cache:::cpc_index->member_index->getCache->getEntryAt->getConstantPoolIndex->return
ConstantPool#invokeDynamicNameAndTypeRefIndexAt(int)::: constant pool invoke dynamic name and type ref index at:::return->getIntAt->extractHighShortFromInt
ConstantPool#getKlassAt(int)::: constant pool get klass at:::if->getTagAt->isKlass->return->resolved_klass_index->getKlassSlotAt->getResolvedKlassIndex->resolved_klasses->getResolvedKlasses->return->resolved_klasses->getAt
ConstantPool#getKlassNameAt(int)::: constant pool get klass name at:::name_index->getKlassSlotAt->getNameIndex->return->getSymbolAt
ConstantPool#getUnresolvedStringAt(int)::: constant pool get unresolved string at:::return->getSlotAt->getSymbol
ConstantPool#getFieldOrMethodKlassRefAt(int)::: constant pool get field or method klass ref at:::refIndex->getFieldOrMethodAt->klassIndex->extractLowShortFromInt->return->getKlassAt
ConstantPool#getMethodRefAt(int)::: constant pool get method ref at:::klass->getFieldOrMethodKlassRefAt->if->return->name->getNameRefAt->sig->getSignatureRefAt->if->klass->isArrayKlass->klass->getJavaSuper->return->findMethod
ConstantPool#getFieldRefAt(int)::: constant pool get field ref at:::klass->getFieldOrMethodKlassRefAt->if->return->name->getNameRefAt->sig->getSignatureRefAt->return->klass->findField
ConstantPool#getNameAndTypeRefIndexAt(int)::: constant pool get name and type ref index at:::return->implNameAndTypeRefIndexAt
ConstantPool#getNameRefIndexAt(int):::Lookup for entries consisting of (name_index, signature_index):::refIndex->getNameAndTypeAt->if->println->i->if->println->return
ConstantPool#getSignatureRefIndexAt(int):::Lookup for entries consisting of (name_index, signature_index):::refIndex->getNameAndTypeAt->if->println->i->if->println->return
ConstantPool#getMethodHandleIndexAt(int):::Lookup for MethodHandle entries.:::if->Assert->getTagAt->isMethodHandle->that->res->getIntAt->extractHighShortFromInt->if->println->return
ConstantPool#getMethodHandleRefKindAt(int):::Lookup for MethodHandle entries.:::if->Assert->getTagAt->isMethodHandle->that->res->getIntAt->extractLowShortFromInt->if->println->return
ConstantPool#getMethodTypeIndexAt(int):::Lookup for MethodType entries.:::if->Assert->getTagAt->isMethodType->that->res->getIntAt->if->println->return
ConstantPool#getBootstrapSpecifierAt(int):::Lookup for multi-operand (InvokeDynamic, Dynamic) entries.:::if->Assert->getTagAt->isInvokeDynamic->getTagAt->isDynamicConstant->that->bsmSpec->this->getIntAt->extractLowShortFromInt->operands->getOperands->if->return->basePos->VM->getVM->operands->at->operands->at->buildIntFromShorts->argv->argc->operands->at->endPos->values->new->shortArr->for->j->return
ConstantPool#nameForTag(int)::: constant pool name for tag:::switch->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->return->throw->new->InternalError
ConstantPool#iterateFields(MetadataVisitor)::: constant pool iterate fields:::super->iterateFields->visitor->doMetadata->length->getLength->for->index
ConstantPool#writeBytes(OutputStream)::: constant pool write bytes:::utf8ToIndex->new->HashMap->dos->new->DataOutputStream->tags->getTags->len->getLength->ci->for->for->dos->flush->return
ConstantPool#printValueOn(PrintStream)::: constant pool print value on:::tty->getPoolHolder->getName->asString->print
ConstantPool#getSize()::: constant pool get size:::return->getLength->alignSize
ConstantPool#extractHighShortFromInt(int)::: constant pool extract high short from int:::return
ConstantPool#extractLowShortFromInt(int)::: constant pool extract low short from int:::return
ConstantPoolCache#initialize(TypeDataBase)::: constant pool cache initialize:::type->db->lookupType->type->getAddressField->new->MetadataField->type->getSize->elType->db->lookupType->elType->getSize->type->getCIntegerField->new->CIntField->VM->getVM->getObjectHeap->getIntSize->type->getAddressField->type->getAddressField
ConstantPoolCache#isConstantPoolCache()::: constant pool cache is constant pool cache:::return
ConstantPoolCache#getConstants()::: constant pool cache get constants:::return->constants->getValue
ConstantPoolCache#getSize()::: constant pool cache get size:::return->getLength->alignSize
ConstantPoolCache#getEntryAt(int)::: constant pool cache get entry at:::if->getLength->throw->getLength->new->IndexOutOfBoundsException->return->new->ConstantPoolCacheEntry
ConstantPoolCache#getIntAt(int, int)::: constant pool cache get int at:::offset->return->getAddress->getCIntegerAt
ConstantPoolCache#printValueOn(PrintStream)::: constant pool cache print value on:::tty->getConstants->getPoolHolder->getName->asString->getAddress->print
ConstantPoolCache#getLength()::: constant pool cache get length:::return->length->getAddress->getValue
ConstantPoolCache#iterateFields(MetadataVisitor)::: constant pool cache iterate fields:::super->iterateFields->visitor->doMetadata->for->i->getLength
ConstantPoolCache#getResolvedReferences()::: constant pool cache get resolved references:::handle->resolvedReferences->getAddress->getValue->if->refs->handle->getOopHandleAt->return->VM->getVM->getObjectHeap->newOop->return
ConstantPoolCache#referenceMap()::: constant pool cache reference map:::return->referenceMap->getAddress->getValue->new->U2Array
ConstantPoolCacheEntry#initialize(TypeDataBase)::: constant pool cache entry initialize:::type->db->lookupType->type->getSize->type->getCIntegerField->type->getAddressField->type->getCIntegerField->type->getCIntegerField->db->lookupType->type->getSize
ConstantPoolCacheEntry#getConstantPoolIndex()::: constant pool cache entry get constant pool index:::if->Assert->getIndices->that->return->getIndices
ConstantPoolCacheEntry#getIndices()::: constant pool cache entry get indices:::return->cp->getAddress->indices->getOffset->indices->getSize->indices->isUnsigned->getCIntegerAt
ConstantPoolCacheEntry#getF1()::: constant pool cache entry get f1:::return->Metadata->cp->getAddress->f1->getOffset->getAddressAt->instantiateWrapperFor
ConstantPoolCacheEntry#getF2()::: constant pool cache entry get f2:::return->cp->getAddress->f1->getOffset->getJIntAt
ConstantPoolCacheEntry#getFlags()::: constant pool cache entry get flags:::return->cp->getAddress->flags->getOffset->getJIntAt
ConstantPoolCacheEntry#iterateFields(MetadataVisitor)::: constant pool cache entry iterate fields:::visitor->f1->getOffset->new->OopField->doOop->visitor->f2->getOffset->new->IntField->doInt->visitor->flags->getOffset->new->IntField->doInt
ConstMethod#initialize(TypeDataBase)::: const method initialize:::type->db->lookupType->type->getAddressField->new->MetadataField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getSize->db->lookupType->type->getSize->db->lookupType->type->getSize->db->lookupType->type->getSize->db->lookupType->type->getSize
ConstMethod#getMethod()::: const method get method:::ik->getConstants->getPoolHolder->methods->ik->getMethods->return->methods->getIdNum->at
ConstMethod#getConstants()::: const method get constants:::return->constants->getValue
ConstMethod#getConstMethodSize()::: const method get const method size:::return->constMethodSize->getValue
ConstMethod#getFlags()::: const method get flags:::return->flags->getValue
ConstMethod#getCodeSize()::: const method get code size:::return->codeSize->getValue
ConstMethod#getNameIndex()::: const method get name index:::return->nameIndex->getValue
ConstMethod#getSignatureIndex()::: const method get signature index:::return->signatureIndex->getValue
ConstMethod#getGenericSignatureIndex()::: const method get generic signature index:::if->hasGenericSignature->return->getAddress->offsetOfGenericSignatureIndex->getCIntegerAt->else->return
ConstMethod#getIdNum()::: const method get id num:::return->idnum->getValue
ConstMethod#getMaxStack()::: const method get max stack:::return->maxStack->getValue
ConstMethod#getMaxLocals()::: const method get max locals:::return->maxLocals->getValue
ConstMethod#getSizeOfParameters()::: const method get size of parameters:::return->sizeOfParameters->getValue
ConstMethod#getName()::: const method get name:::return->getMethod->getName
ConstMethod#getSignature()::: const method get signature:::return->getMethod->getSignature
ConstMethod#getGenericSignature()::: const method get generic signature:::return->getMethod->getGenericSignature
ConstMethod#getBytecodeOrBPAt(int):::Get a bytecode or breakpoint at the given bci:::return->getAddress->getJByteAt
ConstMethod#getBytecodeByteArg(int)::: const method get bytecode byte arg:::return->getBytecodeOrBPAt
ConstMethod#getBytecodeShortArg(int):::Fetches a 16-bit big-endian ("Java ordered") value from the       bytecode stream:::hi->getBytecodeOrBPAt->lo->getBytecodeOrBPAt->return
ConstMethod#getNativeShortArg(int):::Fetches a 16-bit native ordered value from the       bytecode stream:::hi->getBytecodeOrBPAt->lo->getBytecodeOrBPAt->if->VM->getVM->isBigEndian->return->else->return
ConstMethod#getBytecodeIntArg(int):::Fetches a 32-bit big-endian ("Java ordered") value from the       bytecode stream:::b4->getBytecodeOrBPAt->b3->getBytecodeOrBPAt->b2->getBytecodeOrBPAt->b1->getBytecodeOrBPAt->return
ConstMethod#getNativeIntArg(int):::Fetches a 32-bit native ordered value from the       bytecode stream:::b4->getBytecodeOrBPAt->b3->getBytecodeOrBPAt->b2->getBytecodeOrBPAt->b1->getBytecodeOrBPAt->if->VM->getVM->isBigEndian->return->else->return
ConstMethod#getByteCode()::: const method get byte code:::bc->getCodeSize->new->byteArr->for->i->return
ConstMethod#getSize()::: const method get size:::return->getConstMethodSize
ConstMethod#printValueOn(PrintStream)::: const method print value on:::tty->getName->asString->getSignature->asString->getAddress->print
ConstMethod#iterateFields(MetadataVisitor)::: const method iterate fields:::visitor->doMetadata->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt
ConstMethod#hasLineNumberTable()::: const method has line number table:::return->getFlags
ConstMethod#getLineNumberFromBCI(int)::: const method get line number from i:::if->VM->getVM->isCore->if->if->isNative->return->if->Assert->getCodeSize->that->bestBCI->bestLine->if->hasLineNumberTable->stream->getAddress->offsetOfCompressedLineNumberTable->new->CompressedLineNumberReadStream->while->stream->readPair->if->stream->bci->return->stream->line->else->if->stream->bci->stream->bci->stream->bci->stream->line->return
ConstMethod#getLineNumberTable()::: const method get line number table:::if->Assert->hasLineNumberTable->that->len->getLineNumberTableLength->stream->getAddress->offsetOfCompressedLineNumberTable->new->CompressedLineNumberReadStream->ret->new->LineNumberTableElementArr->for->idx->return
ConstMethod#hasLocalVariableTable()::: const method has local variable table:::return->getFlags
ConstMethod#getLocalVariableName(int, int)::: const method get local variable name:::return->getMethod->getLocalVariableName
ConstMethod#getLocalVariableTable():::Should only be called if table is present:::if->Assert->hasLocalVariableTable->that->ret->getLocalVariableTableLength->new->LocalVariableTableElementArr->offset->offsetOfLocalVariableTable->for->i->return
ConstMethod#hasExceptionTable()::: const method has exception table:::return->getFlags
ConstMethod#getExceptionTable()::: const method get exception table:::if->Assert->hasExceptionTable->that->ret->getExceptionTableLength->new->ExceptionTableElementArr->offset->offsetOfExceptionTable->for->i->return
ConstMethod#hasCheckedExceptions()::: const method has checked exceptions:::return->getFlags
ConstMethod#getCheckedExceptions()::: const method get checked exceptions:::if->Assert->hasCheckedExceptions->that->ret->getCheckedExceptionsLength->new->CheckedExceptionElementArr->offset->offsetOfCheckedExceptions->for->i->return
ConstMethod#hasMethodParameters()::: const method has method parameters:::return->getFlags
ConstMethod#hasGenericSignature()::: const method has generic signature:::return->getFlags
ConstMethod#hasMethodAnnotations()::: const method has method annotations:::return->getFlags
ConstMethod#hasParameterAnnotations()::: const method has parameter annotations:::return->getFlags
ConstMethod#hasDefaultAnnotations()::: const method has default annotations:::return->getFlags
ConstMethod#hasTypeAnnotations()::: const method has type annotations:::return->getFlags
ConstMethod#isNative()::: const method is native:::return->getMethod->isNative
ConstMethod#offsetOfCodeEnd()::: const method offset of code end:::return->getCodeSize
ConstMethod#offsetOfCompressedLineNumberTable()::: const method offset of compressed line number table:::return->offsetOfCodeEnd->isNative->VM->getVM->getAddressSize
ConstMethod#offsetOfLastU2Element()::: const method offset of last u2 element:::offset->if->hasMethodAnnotations->if->hasParameterAnnotations->if->hasTypeAnnotations->if->hasDefaultAnnotations->wordSize->VM->getVM->getObjectHeap->getOopSize->return->getSize
ConstMethod#offsetOfGenericSignatureIndex()::: const method offset of generic signature index:::return->offsetOfLastU2Element
ConstMethod#offsetOfMethodParametersLength()::: const method offset of method parameters length:::if->Assert->hasMethodParameters->that->return->hasGenericSignature->offsetOfLastU2Element->offsetOfLastU2Element
ConstMethod#getMethodParametersLength()::: const method get method parameters length:::if->hasMethodParameters->return->getAddress->offsetOfMethodParametersLength->getCIntegerAt->else->return
ConstMethod#offsetOfMethodParameters()::: const method offset of method parameters:::offset->offsetOfMethodParametersLength->length->getMethodParametersLength->if->Assert->that->return
ConstMethod#offsetOfCheckedExceptionsLength()::: const method offset of checked exceptions length:::if->hasMethodParameters->return->offsetOfMethodParameters->else->return->hasGenericSignature->offsetOfLastU2Element->offsetOfLastU2Element
ConstMethod#getCheckedExceptionsLength()::: const method get checked exceptions length:::if->hasCheckedExceptions->return->getAddress->offsetOfCheckedExceptionsLength->getCIntegerAt->else->return
ConstMethod#offsetOfCheckedExceptions()::: const method offset of checked exceptions:::offset->offsetOfCheckedExceptionsLength->length->getCheckedExceptionsLength->if->Assert->that->return
ConstMethod#getLineNumberTableLength()::: const method get line number table length:::len->if->hasLineNumberTable->stream->getAddress->offsetOfCompressedLineNumberTable->new->CompressedLineNumberReadStream->while->stream->readPair->return
ConstMethod#getLocalVariableTableLength()::: const method get local variable table length:::if->hasLocalVariableTable->return->getAddress->offsetOfLocalVariableTableLength->getCIntegerAt->else->return
ConstMethod#offsetOfLocalVariableTableLength()::: const method offset of local variable table length:::if->Assert->hasLocalVariableTable->that->if->hasExceptionTable->return->offsetOfExceptionTable->else->if->hasCheckedExceptions->return->offsetOfCheckedExceptions->else->if->hasMethodParameters->return->offsetOfMethodParameters->else->return->hasGenericSignature->offsetOfLastU2Element->offsetOfLastU2Element
ConstMethod#offsetOfLocalVariableTable()::: const method offset of local variable table:::offset->offsetOfLocalVariableTableLength->length->getLocalVariableTableLength->if->Assert->that->return
ConstMethod#getExceptionTableLength()::: const method get exception table length:::if->hasExceptionTable->return->getAddress->offsetOfExceptionTableLength->getCIntegerAt->else->return
ConstMethod#offsetOfExceptionTableLength()::: const method offset of exception table length:::if->Assert->hasExceptionTable->that->if->hasCheckedExceptions->return->offsetOfCheckedExceptions->else->if->hasMethodParameters->return->offsetOfMethodParameters->else->return->hasGenericSignature->offsetOfLastU2Element->offsetOfLastU2Element
ConstMethod#offsetOfExceptionTable()::: const method offset of exception table:::offset->offsetOfExceptionTableLength->length->getExceptionTableLength->if->Assert->that->return
CounterData#staticCellCount()::: counter data static cell count:::return
CounterData#cellCount()::: counter data cell count:::return->staticCellCount
CounterData#count()::: counter data count:::return->uintAt
CounterData#countOffset()::: counter data count offset:::return->cellOffset
CounterData#counterDataSize()::: counter data counter data size:::return->cellOffset
CounterData#printDataOn(PrintStream)::: counter data print data on:::printShared->st->count->println
DataLayout#dp()::: data layout dp:::return
DataLayout#getU11(int)::: data layout get u11:::return->data->getJByteAt
DataLayout#getU22(int)::: data layout get u22:::return->data->getJShortAt
DataLayout#cellAt(int)::: data layout cell at:::return->data->cellOffset->getCIntegerAt
DataLayout#addressAt(int)::: data layout address at:::return->data->cellOffset->getAddressAt
DataLayout#needsArrayLen(int)::: data layout needs array len:::return
DataLayout#headerSizeInBytes()::: data layout header size in bytes:::return->headerSizeInCells
DataLayout#headerSizeInCells()::: data layout header size in cells:::return->VM->getVM->isLP64
DataLayout#computeSizeInBytes(int)::: data layout compute size in bytes:::return->headerSizeInBytes
DataLayout#tag()::: data layout tag:::return->getU11
DataLayout#trapState()::: data layout trap state:::return->data->getJIntAt
DataLayout#flags()::: data layout flags:::return->getU11
DataLayout#bci()::: data layout bci:::return->getU22
DataLayout#flagAt(int)::: data layout flag at:::return->flags
DataLayout#headerOffset()::: data layout header offset:::return
DataLayout#tagOffset()::: data layout tag offset:::return
DataLayout#flagsOffset()::: data layout flags offset:::return
DataLayout#bciOffset()::: data layout bci offset:::return
DataLayout#cellOffset(int)::: data layout cell offset:::return
DefaultHeapVisitor#prologue(long)::: default heap visitor prologue:::
DefaultHeapVisitor#doObj(Oop)::: default heap visitor do obj:::return
DefaultHeapVisitor#epilogue()::: default heap visitor epilogue:::
DefaultMetadataVisitor#prologue()::: default metadata visitor prologue:::
DefaultMetadataVisitor#epilogue()::: default metadata visitor epilogue:::
DefaultMetadataVisitor#setObj(Metadata)::: default metadata visitor set obj:::
DefaultMetadataVisitor#getObj()::: default metadata visitor get obj:::return
DefaultMetadataVisitor#doMetadata(MetadataField, boolean)::: default metadata visitor do metadata:::
DefaultMetadataVisitor#doOop(OopField, boolean)::: default metadata visitor do oop:::
DefaultMetadataVisitor#doOop(NarrowOopField, boolean)::: default metadata visitor do oop:::
DefaultMetadataVisitor#doByte(ByteField, boolean)::: default metadata visitor do byte:::
DefaultMetadataVisitor#doChar(CharField, boolean)::: default metadata visitor do char:::
DefaultMetadataVisitor#doBoolean(BooleanField, boolean)::: default metadata visitor do boolean:::
DefaultMetadataVisitor#doShort(ShortField, boolean)::: default metadata visitor do short:::
DefaultMetadataVisitor#doInt(IntField, boolean)::: default metadata visitor do int:::
DefaultMetadataVisitor#doLong(LongField, boolean)::: default metadata visitor do long:::
DefaultMetadataVisitor#doFloat(FloatField, boolean)::: default metadata visitor do float:::
DefaultMetadataVisitor#doDouble(DoubleField, boolean)::: default metadata visitor do double:::
DefaultMetadataVisitor#doCInt(CIntField, boolean)::: default metadata visitor do int:::
DefaultOopVisitor#prologue()::: default oop visitor prologue:::
DefaultOopVisitor#epilogue()::: default oop visitor epilogue:::
DefaultOopVisitor#setObj(Oop)::: default oop visitor set obj:::
DefaultOopVisitor#getObj()::: default oop visitor get obj:::return
DefaultOopVisitor#doMetadata(MetadataField, boolean)::: default oop visitor do metadata:::
DefaultOopVisitor#doOop(OopField, boolean)::: default oop visitor do oop:::
DefaultOopVisitor#doOop(NarrowOopField, boolean)::: default oop visitor do oop:::
DefaultOopVisitor#doByte(ByteField, boolean)::: default oop visitor do byte:::
DefaultOopVisitor#doChar(CharField, boolean)::: default oop visitor do char:::
DefaultOopVisitor#doBoolean(BooleanField, boolean)::: default oop visitor do boolean:::
DefaultOopVisitor#doShort(ShortField, boolean)::: default oop visitor do short:::
DefaultOopVisitor#doInt(IntField, boolean)::: default oop visitor do int:::
DefaultOopVisitor#doLong(LongField, boolean)::: default oop visitor do long:::
DefaultOopVisitor#doFloat(FloatField, boolean)::: default oop visitor do float:::
DefaultOopVisitor#doDouble(DoubleField, boolean)::: default oop visitor do double:::
DefaultOopVisitor#doCInt(CIntField, boolean)::: default oop visitor do int:::
DoubleField#getValue(Oop)::: double field get value:::return->obj->getHandle->getOffset->getJDoubleAt
DoubleField#getValue(VMObject)::: double field get value:::return->obj->getAddress->getOffset->getJDoubleAt
DoubleField#setValue(Oop, double)::: double field set value:::
ExceptionTableElement#initialize(TypeDataBase)::: exception table element initialize:::type->db->lookupType->type->getCIntegerField->getOffset->type->getCIntegerField->getOffset->type->getCIntegerField->getOffset->type->getCIntegerField->getOffset
ExceptionTableElement#getStartPC()::: exception table element get start c:::return->handle->getCIntegerAt
ExceptionTableElement#getEndPC()::: exception table element get end c:::return->handle->getCIntegerAt
ExceptionTableElement#getHandlerPC()::: exception table element get handler c:::return->handle->getCIntegerAt
ExceptionTableElement#getCatchTypeIndex()::: exception table element get catch type index:::return->handle->getCIntegerAt
Field#getOffset():::Returns the byte offset of the field within the object or klass:::return
Field#getID():::Returns the identifier of the field:::return
Field#isVMField():::Indicates whether this is a VM field:::return
Field#isNamedField():::Indicates whether this is a named field:::return
Field#printOn(PrintStream)::: field print on:::getID->printOn->tty->getOffset->print
Field#getFieldHolder():::(Named, non-VM fields only) Returns the InstanceKlass containing       this (static or non-static) field.:::return
Field#getFieldIndex():::(Named, non-VM fields only) Returns the index in the fields       TypeArray for this field:::return
Field#getAccessFlags():::(Named, non-VM fields only) Retrieves the access flags.:::return->accessFlags->getValue
Field#getAccessFlagsObj()::: field get access flags obj:::return
Field#getFieldType():::(Named, non-VM fields only) Returns the type of this field.:::return
Field#getSignature():::(Named, non-VM fields only) Returns the signature of this       field.:::return
Field#getGenericSignature()::: field get generic signature:::return
Field#hasInitialValue()::: field has initial value:::return->holder->getFieldInitialValueIndex
Field#isPublic()::: field is public:::return->accessFlags->isPublic
Field#isPrivate()::: field is private:::return->accessFlags->isPrivate
Field#isProtected()::: field is protected:::return->accessFlags->isProtected
Field#isPackagePrivate()::: field is package private:::return->isPublic->isPrivate->isProtected
Field#isStatic()::: field is static:::return->accessFlags->isStatic
Field#isFinal()::: field is final:::return->accessFlags->isFinal
Field#isVolatile()::: field is volatile:::return->accessFlags->isVolatile
Field#isTransient()::: field is transient:::return->accessFlags->isTransient
Field#isSynthetic()::: field is synthetic:::return->accessFlags->isSynthetic
Field#isEnumConstant()::: field is enum constant:::return->accessFlags->isEnum
Field#equals(Object)::: field equals:::if->return->if->return->other->return->this->getFieldHolder->other->getFieldHolder->equals->this->getID->other->getID->equals
Field#hashCode()::: field hash code:::return->getFieldHolder->hashCode->getID->hashCode
FieldIdentifier#getName()::: field identifier get name:::return
FieldIdentifier#printOn(PrintStream)::: field identifier print on:::tty->getName->print
FieldType#isOop()::: field type is oop:::return->isObject->isArray
FieldType#isByte()::: field type is byte:::return
FieldType#isChar()::: field type is char:::return
FieldType#isDouble()::: field type is double:::return
FieldType#isFloat()::: field type is float:::return
FieldType#isInt()::: field type is int:::return
FieldType#isLong()::: field type is long:::return
FieldType#isShort()::: field type is short:::return
FieldType#isBoolean()::: field type is boolean:::return
FieldType#isObject()::: field type is object:::return
FieldType#isArray()::: field type is array:::return
FieldType#getSignature()::: field type get signature:::return
FieldType.ArrayInfo#dimension()::: array info dimension:::return
FieldType.ArrayInfo#elementBasicType():::See BasicType.java:::return
FieldType#getArrayInfo():::Only valid for T_ARRAY; throws unspecified exception otherwise:::index->dim->skipOptionalSize->while->signature->getByteAt->skipOptionalSize->elementType->BasicType->signature->getByteAt->charToType->return->new->ArrayInfo
FieldType#skipOptionalSize(Symbol, int)::: field type skip optional size:::c->sig->getByteAt->while->sig->getByteAt->return
FieldVisitor#doMetadata(MetadataField, boolean)::: field visitor do metadata:::
FieldVisitor#doOop(OopField, boolean)::: field visitor do oop:::
FieldVisitor#doOop(NarrowOopField, boolean)::: field visitor do oop:::
FieldVisitor#doByte(ByteField, boolean)::: field visitor do byte:::
FieldVisitor#doChar(CharField, boolean)::: field visitor do char:::
FieldVisitor#doBoolean(BooleanField, boolean)::: field visitor do boolean:::
FieldVisitor#doShort(ShortField, boolean)::: field visitor do short:::
FieldVisitor#doInt(IntField, boolean)::: field visitor do int:::
FieldVisitor#doLong(LongField, boolean)::: field visitor do long:::
FieldVisitor#doFloat(FloatField, boolean)::: field visitor do float:::
FieldVisitor#doDouble(DoubleField, boolean)::: field visitor do double:::
FieldVisitor#doCInt(CIntField, boolean)::: field visitor do int:::
FloatField#getValue(Oop)::: float field get value:::return->obj->getHandle->getOffset->getJFloatAt
FloatField#getValue(VMObject)::: float field get value:::return->obj->getAddress->getOffset->getJFloatAt
FloatField#setValue(Oop, float)::: float field set value:::
GenerateOopMap.JumpClosure#process(GenerateOopMap, int, int[])::: jump closure process:::
GenerateOopMap.ComputeCallStack#set(CellTypeState)::: compute call stack set:::_effect->get->set
GenerateOopMap.ComputeCallStack#length()::: compute call stack length:::return
GenerateOopMap.ComputeCallStack#doBool()::: compute call stack do bool:::set
GenerateOopMap.ComputeCallStack#doChar()::: compute call stack do char:::set
GenerateOopMap.ComputeCallStack#doFloat()::: compute call stack do float:::set
GenerateOopMap.ComputeCallStack#doByte()::: compute call stack do byte:::set
GenerateOopMap.ComputeCallStack#doShort()::: compute call stack do short:::set
GenerateOopMap.ComputeCallStack#doInt()::: compute call stack do int:::set
GenerateOopMap.ComputeCallStack#doVoid()::: compute call stack do void:::set
GenerateOopMap.ComputeCallStack#doObject(int, int)::: compute call stack do object:::set
GenerateOopMap.ComputeCallStack#doArray(int, int)::: compute call stack do array:::set
GenerateOopMap.ComputeCallStack#doDouble()::: compute call stack do double:::set->set
GenerateOopMap.ComputeCallStack#doLong()::: compute call stack do long:::set->set
GenerateOopMap.ComputeCallStack#computeForParameters(boolean, CellTypeStateList)::: compute call stack compute for parameters:::if->effect->get->set->iterateParameters->return->length
GenerateOopMap.ComputeCallStack#computeForReturntype(CellTypeStateList)::: compute call stack compute for returntype:::iterateReturntype->set->return->length
GenerateOopMap.ComputeEntryStack#set(CellTypeState)::: compute entry stack set:::_effect->get->set
GenerateOopMap.ComputeEntryStack#length()::: compute entry stack length:::return
GenerateOopMap.ComputeEntryStack#doBool()::: compute entry stack do bool:::set
GenerateOopMap.ComputeEntryStack#doChar()::: compute entry stack do char:::set
GenerateOopMap.ComputeEntryStack#doFloat()::: compute entry stack do float:::set
GenerateOopMap.ComputeEntryStack#doByte()::: compute entry stack do byte:::set
GenerateOopMap.ComputeEntryStack#doShort()::: compute entry stack do short:::set
GenerateOopMap.ComputeEntryStack#doInt()::: compute entry stack do int:::set
GenerateOopMap.ComputeEntryStack#doVoid()::: compute entry stack do void:::set
GenerateOopMap.ComputeEntryStack#doObject(int, int)::: compute entry stack do object:::CellTypeState->makeSlotRef->set
GenerateOopMap.ComputeEntryStack#doArray(int, int)::: compute entry stack do array:::CellTypeState->makeSlotRef->set
GenerateOopMap.ComputeEntryStack#doDouble()::: compute entry stack do double:::set->set
GenerateOopMap.ComputeEntryStack#doLong()::: compute entry stack do long:::set->set
GenerateOopMap.ComputeEntryStack#computeForParameters(boolean, CellTypeStateList)::: compute entry stack compute for parameters:::if->effect->get->CellTypeState->makeSlotRef->set->iterateParameters->return->length
GenerateOopMap.ComputeEntryStack#computeForReturntype(CellTypeStateList)::: compute entry stack compute for returntype:::iterateReturntype->set->return->length
GenerateOopMap.RetTableEntry#targetBci()::: ret table entry target bci:::return
GenerateOopMap.RetTableEntry#nofJsrs()::: ret table entry nof jsrs:::return->_jsrs->size
GenerateOopMap.RetTableEntry#jsrs(int)::: ret table entry jsrs:::return->_jsrs->get->intValue
GenerateOopMap.RetTableEntry#addJsr(int)::: ret table entry add jsr:::_jsrs->new->Integer->add
GenerateOopMap.RetTableEntry#addDelta(int, int)::: ret table entry add delta:::if->for->k->nofJsrs
GenerateOopMap.RetTableEntry#next()::: ret table entry next:::return
GenerateOopMap.RetTable#addJsr(int, int)::: ret table add jsr:::entry->for->entry->targetBci->entry->next->if->new->RetTableEntry->entry->addJsr
GenerateOopMap.RetTable#computeRetTable(Method)::: ret table compute ret table:::i->new->BytecodeStream->bytecode->while->i->next->switch->i->nextBCI->i->dest->addJsr->break->i->nextBCI->i->dest_w->addJsr->break
GenerateOopMap.RetTable#updateRetTable(int, int)::: ret table update ret table:::cur->while->cur->addDelta->cur->next
GenerateOopMap.RetTable#findJsrsForTarget(int)::: ret table find jsrs for target:::cur->while->if->Assert->cur->targetBci->that->if->cur->targetBci->return->cur->next->throw->new->RuntimeException
GenerateOopMap.BasicBlock#vars()::: basic block vars:::return
GenerateOopMap.BasicBlock#stack()::: basic block stack:::return->_state->_state->size->subList
GenerateOopMap.BasicBlock#changed()::: basic block changed:::return
GenerateOopMap.BasicBlock#setChanged(boolean)::: basic block set changed:::
GenerateOopMap.BasicBlock#isReachable()::: basic block is reachable:::return
GenerateOopMap.BasicBlock#isDead()::: basic block is dead:::return
GenerateOopMap.BasicBlock#isAlive()::: basic block is alive:::return
GenerateOopMap.BasicBlock#markAsAlive()::: basic block mark as alive:::if->Assert->isDead->that
GenerateOopMap#initState()::: generate oop map init state:::new->CellTypeStateList->Math->Math->Math->max->max->max->new->charArr
GenerateOopMap#makeContextUninitialized()::: generate oop map make context uninitialized:::vs->vars->for->i
GenerateOopMap#methodsigToEffect(Symbol, boolean, CellTypeStateList)::: generate oop map methodsig to effect:::ces->new->ComputeEntryStack->return->ces->computeForParameters
GenerateOopMap#mergeStateVectors(CellTypeStateList, CellTypeStateList)::: generate oop map merge state vectors:::i->len->change->for->if->base->for->return
GenerateOopMap#copyState(CellTypeStateList, CellTypeStateList)::: generate oop map copy state:::len->for->i->if->base->for->i
GenerateOopMap#mergeStateIntoBB(BasicBlock)::: generate oop map merge state into b:::if->Assert->bb->isAlive->that->if->if->if->mergeStateVectors->bb->setChanged->else->if->reportMonitorMismatch->bb->setChanged->else->if->bb->isReachable->copyState->bb->setChanged->else->throw->new->RuntimeException
GenerateOopMap#mergeState(int, int[])::: generate oop map merge state:::getBasicBlockAt->mergeStateIntoBB
GenerateOopMap#setVar(int, CellTypeState)::: generate oop map set var:::if->Assert->cts->isReference->cts->isValue->cts->isAddress->that->if->throw->new->RuntimeException->vars->get->set
GenerateOopMap#getVar(int)::: generate oop map get var:::if->Assert->that->if->throw->new->RuntimeException->return->vars->get->copy
GenerateOopMap#pop()::: generate oop map pop:::if->throw->new->RuntimeException->return->stack->get->copy
GenerateOopMap#push(CellTypeState)::: generate oop map push:::if->if->method->getName->asString->method->getSignature->asString->println->throw->new->RuntimeException->stack->get->set->if->cts->toChar->println
GenerateOopMap#monitorPop()::: generate oop map monitor pop:::if->Assert->that->if->if->reportMonitorMismatch->return->return->monitors->get->copy
GenerateOopMap#monitorPush(CellTypeState)::: generate oop map monitor push:::if->Assert->that->if->if->reportMonitorMismatch->return->monitors->get->set
GenerateOopMap#vars()::: generate oop map vars:::return
GenerateOopMap#stack()::: generate oop map stack:::return->_state->_state->size->subList
GenerateOopMap#monitors()::: generate oop map monitors:::return->_state->_state->size->subList
GenerateOopMap#replaceAllCTSMatches(CellTypeState, CellTypeState)::: generate oop map replace all matches:::i->len->change->for->if->base->for
GenerateOopMap#printStates(PrintStream, CellTypeStateList, int)::: generate oop map print states:::for->i
GenerateOopMap#printCurrentState(PrintStream, BytecodeStream, boolean)::: generate oop map print current state:::if->tty->currentBC->bci->print->vars->printStates->tty->Bytecodes->currentBC->code->name->print->switch->currentBC->code->idx->currentBC->hasIndexU4->currentBC->getIndexU4->currentBC->getIndexU2->tty->print->tty->println->tty->print->stack->printStates->tty->println->if->tty->print->monitors->printStates->else->tty->print->tty->println->else->tty->currentBC->bci->vars->stateVecToString->print->tty->stack->stateVecToString->print->if->tty->monitors->stateVecToString->Bytecodes->currentBC->code->name->print->else->tty->print->switch->currentBC->code->idx->currentBC->hasIndexU4->currentBC->getIndexU4->currentBC->getIndexU2->tty->print->tty->println
GenerateOopMap#reportMonitorMismatch(String)::: generate oop map report monitor mismatch:::if->print->method->printValueOn->println
GenerateOopMap#initializeBB()::: generate oop map initialize b:::_method->getCodeSize->new->BitMap
GenerateOopMap#markBBHeadersAndCountGCPoints()::: generate oop map mark headers and count points:::initializeBB->fellThrough->if->method->hasExceptionTable->excps->method->getExceptionTable->for->i->bcs->new->BytecodeStream->bytecode->while->bcs->next->bci->bcs->bci->if->markBB->new->JumpClosure->jumpTargetsDo->switch->if->Assert->that->Bytecodes->lengthFor->markBB->break->if->Assert->that->Bytecodes->lengthFor->markBB->break->if->possibleGCPoint
GenerateOopMap#isBBHeader(int)::: generate oop map is header:::return->_bb_hdr_bits->at
GenerateOopMap#gcPoints()::: generate oop map gc points:::return
GenerateOopMap#bbCount()::: generate oop map bb count:::return
GenerateOopMap#setBBMarkBit(int)::: generate oop map set mark bit:::_bb_hdr_bits->atPut
GenerateOopMap#clear_bbmark_bit(int)::: generate oop map clear_bbmark_bit:::_bb_hdr_bits->atPut
GenerateOopMap#getBasicBlockAt(int)::: generate oop map get basic block at:::bb->getBasicBlockContaining->if->Assert->that->return
GenerateOopMap#getBasicBlockContaining(int)::: generate oop map get basic block containing:::bbs->lo->hi->while->m->mbci->nbci->if->if->Assert->method->getCodeSize->that->return->else->if->return->else->if->else->if->Assert->that->throw->new->RuntimeException
GenerateOopMap#interpBB(BasicBlock)::: generate oop map interp b:::if->Assert->bb->isReachable->that->restoreState->itr->new->BytecodeStream->lim_bci->nextBBStartPC->itr->setInterval->if->method->getName->asString->method->getSignature->asString->println->print->for->i->println->if->Assert->that->itr->next->while->itr->nextBCI->if->doExceptionEdge->interp1->itr->next->if->if->Assert->itr->nextBCI->that->if->doExceptionEdge->interp1->fall_through->new->JumpClosure->jumpTargetsDo->if->return->if->itr->code->if->Assert->that->new->JumpClosure->itr->getIndex->retJumpTargetsDo->else->if->if->Assert->bbIndex->that->bbIndex->mergeStateIntoBB
GenerateOopMap#restoreState(BasicBlock)::: generate oop map restore state:::for->i
GenerateOopMap#nextBBStartPC(BasicBlock)::: generate oop map next start c:::bbNum->bbIndex->if->return->method->getCodeSize->return
GenerateOopMap#updateBasicBlocks(int, int)::: generate oop map update basic blocks:::bbBits->_method->getCodeSize->new->BitMap->for->k
GenerateOopMap#markBB(int, int[])::: generate oop map mark b:::if->Assert->method->getCodeSize->that->if->isBBHeader->return->setBBMarkBit
GenerateOopMap#markReachableCode()::: generate oop map mark reachable code:::change->new->intArr->markAsAlive->if->method->hasExceptionTable->excps->method->getExceptionTable->for->i->bcs->new->BytecodeStream->while->for->i
GenerateOopMap#reachableBasicblock(int, int[])::: generate oop map reachable basicblock:::if->Assert->method->getCodeSize->that->bb->getBasicBlockAt->if->bb->isDead->bb->markAsAlive
GenerateOopMap#doInterpretation()::: generate oop map do interpretation:::i->do->if->initBasicBlocks->if->setupMethodEntryState->if->interpAll->if->rewriteRefvalConflicts->while
GenerateOopMap#initBasicBlocks()::: generate oop map init basic blocks:::new->BasicBlockArr->for->i->j->new->BytecodeStream->bytecode->bbNo->monitor_count->prev_bci->while->j->next->if->j->code->bci->j->bci->if->isBBHeader->bb->bb->setChanged->if->initState->basicBlockState->new->CellTypeStateList->for->blockNum->if->bb->bc_len->Bytecodes->javaLengthAt->Assert->_method->getCodeSize->that->if->if->throw->new->RuntimeException->else->throw->new->RuntimeException->markReachableCode
GenerateOopMap#setupMethodEntryState()::: generate oop map setup method entry state:::makeContextUninitialized->method->getSignature->method->isStatic->vars->methodsigToEffect->initializeVars->mergeStateIntoBB->if->Assert->changed->that
GenerateOopMap#interpAll()::: generate oop map interp all:::change->while->for->i
GenerateOopMap#interp1(BytecodeStream):::Sets the current state to be the state after executing the       current instruction, starting in the current state.:::if->itr->bci->itr->code->println->printCurrentState->if->switch->itr->code->break->vars->stack->fillStackmapForOpcodes->break->switch->itr->code->break->break->break->break->doReturnMonitorCheck->break->CellTypeState->itr->bci->makeLineRef->ppush1->break->ppush1->break->ppush->break->ppush->break->itr->bci->doLdc->break->itr->bci->doLdc->break->itr->getIndex->ppload->break->itr->getIndex->ppload->break->itr->getIndex->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->ppload->break->pp->break->pp->break->pp->break->itr->bci->ppNewRef->break->itr->getIndex->ppstore->break->itr->getIndex->ppstore->break->itr->getIndex->doAstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->ppstore->break->doAstore->break->doAstore->break->doAstore->break->doAstore->break->ppop->break->ppop->break->ppop->break->ppopAny->break->ppopAny->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->ppdupswap->break->pp->break->pp->break->pp->break->pp->break->pp->break->pp->break->pp->break->pp->break->ppop1->break->doReturnMonitorCheck->ppop1->break->ppop->break->doReturnMonitorCheck->ppop->break->doReturnMonitorCheck->ppop->break->ppop->break->itr->dest->doJsr->break->itr->dest_w->doJsr->break->itr->getIndexU2Cpcache->itr->bci->doField->break->itr->getIndexU2Cpcache->itr->bci->doField->break->itr->getIndexU2Cpcache->itr->bci->doField->break->itr->getIndexU2Cpcache->itr->bci->doField->break->itr->getIndexU2Cpcache->itr->bci->doMethod->break->itr->getIndexU2Cpcache->itr->bci->doMethod->break->itr->getIndexU4->itr->bci->doMethod->break->itr->getIndexU2Cpcache->itr->bci->doMethod->break->itr->bci->ppNewRef->break->doCheckcast->break->pp->break->itr->bci->doMonitorenter->break->itr->bci->doMonitorexit->break->if->break->doReturnMonitorCheck->ppop1->break->ppop1->break->itr->itr->bci->codeAt->itr->bci->doMultianewarray->break->throw->new->RuntimeException->break->itr->bci->ppNewRef->break->ppush1->break->pp->break->itr->bci->ppNewRef->break->ppload->break->ppop1->break->throw->itr->code->new->RuntimeException
GenerateOopMap#doExceptionEdge(BytecodeStream)::: generate oop map do exception edge:::if->Bytecodes->itr->code->canTrap->return->switch->itr->code->return->if->return->break->if->return->break->if->bci->itr->bci->exct->method->getExceptionTable->for->i->if->return->if->reportMonitorMismatch
GenerateOopMap#checkType(CellTypeState, CellTypeState)::: generate oop map check type:::if->expected->equalKind->throw->actual->toChar->expected->toChar->new->RuntimeException
GenerateOopMap#ppstore(CellTypeState[], int)::: generate oop map ppstore:::for->i->equal
GenerateOopMap#ppload(CellTypeState[], int)::: generate oop map ppload:::for->i->equal
GenerateOopMap#ppush1(CellTypeState)::: generate oop map ppush1:::if->Assert->in->isReference->in->isValue->that->if->in->toChar->println->push
GenerateOopMap#ppush(CellTypeState[])::: generate oop map ppush:::for->i->equal
GenerateOopMap#ppush(CellTypeStateList)::: generate oop map ppush:::for->i->in->size->in->get->equal
GenerateOopMap#ppop1(CellTypeState)::: generate oop map ppop1:::actual->pop->if->actual->toChar->out->toChar->println->checkType
GenerateOopMap#ppop(CellTypeState[])::: generate oop map ppop:::for->i->equal
GenerateOopMap#ppopAny(int)::: generate oop map ppop any:::if->else->throw->new->RuntimeException
GenerateOopMap#pp(CellTypeState[], CellTypeState[])::: generate oop map pp:::ppop->ppush
GenerateOopMap#ppNewRef(CellTypeState[], int)::: generate oop map pp new ref:::ppop->CellTypeState->makeLineRef->ppush1
GenerateOopMap#ppdupswap(int, String)::: generate oop map ppdupswap:::actual->new->CellTypeStateArr->Assert->that->for->i->for->i->out->length
GenerateOopMap#doLdc(int)::: generate oop map do ldc:::ldc->BytecodeLoadConstant->at->cp->method->getConstants->bt->ldc->resultType->cts->CellTypeState->makeLineRef->ppush1
GenerateOopMap#doAstore(int)::: generate oop map do astore:::r_or_p->pop->if->r_or_p->isAddress->r_or_p->isReference->throw->r_or_p->toChar->new->RuntimeException->setVar
GenerateOopMap#doJsr(int)::: generate oop map do jsr:::CellTypeState->makeAddr->push
GenerateOopMap#doField(boolean, boolean, int, int)::: generate oop map do field:::cp->method->getConstants->nameAndTypeIdx->cp->getNameAndTypeRefIndexAt->signatureIdx->cp->getSignatureRefIndexAt->signature->cp->getSymbolAt->if->signature->asString->println->sigch->signature->getByteAt->temp->new->CellTypeStateArr->eff->sigcharToEffect->in->new->CellTypeStateArr->out->i->if->else->copyCTS->if->if->Assert->that->pp
GenerateOopMap#doMethod(boolean, boolean, int, int)::: generate oop map do method:::cp->_method->getConstants->signature->cp->getSignatureRefAt->out->new->CellTypeStateList->in->new->CellTypeStateList->cse->new->ComputeCallStack->res_length->cse->computeForReturntype->if->out->get->equal->out->get->equal->out->get->CellTypeState->makeLineRef->set->if->Assert->that->arg_length->cse->computeForParameters->if->Assert->that->for->i->if->vars->stack->fillStackmapForOpcodes->ppush
GenerateOopMap#doMultianewarray(int, int)::: generate oop map do multianewarray:::if->Assert->that->for->i->CellTypeState->makeLineRef->ppush1
GenerateOopMap#doMonitorenter(int)::: generate oop map do monitorenter:::actual->pop->if->return->if->actual->isLockReference->if->reportMonitorMismatch->return->lock->CellTypeState->makeLockRef->checkType->if->actual->isInfoTop->replaceAllCTSMatches->monitorPush
GenerateOopMap#doMonitorexit(int)::: generate oop map do monitorexit:::actual->pop->if->return->checkType->expected->monitorPop->if->actual->isLockReference->expected->equal->bb->getBasicBlockContaining->bb->setChanged->if->reportMonitorMismatch->else->CellTypeState->makeLineRef->replaceAllCTSMatches->if->expected->getMonitorSource
GenerateOopMap#doReturnMonitorCheck()::: generate oop map do return monitor check:::if->if->reportMonitorMismatch
GenerateOopMap#doCheckcast()::: generate oop map do checkcast:::actual->pop->checkType->push
GenerateOopMap#sigcharToEffect(char, int, CellTypeState[])::: generate oop map sigchar to effect:::if->CellTypeState->makeLineRef->return->if->return->if->return->return
GenerateOopMap#copyCTS(CellTypeState[], CellTypeState[])::: generate oop map copy s:::idx->for->isBottom->return
GenerateOopMap#reportResult()::: generate oop map report result:::fillStackmapProlog->for->i->fillStackmapEpilog->fillInitVars
GenerateOopMap#initializeVars()::: generate oop map initialize vars:::for->k->_init_vars->size
GenerateOopMap#addToRefInitSet(int)::: generate oop map add to ref init set:::local->new->Integer->if->_init_vars->contains->return->_init_vars->add
GenerateOopMap#recordRefvalConflict(int)::: generate oop map record refval conflict:::if->Assert->that->if->println->if->new->intArr->for->k->if->if->throw->new->RuntimeException
GenerateOopMap#rewriteRefvalConflicts()::: generate oop map rewrite refval conflicts:::if->if->VM->getVM->isDebugging->throw->new->RuntimeException->else->throw->new->RuntimeException
GenerateOopMap#stateVecToString(CellTypeStateList, int)::: generate oop map state vec to string:::for->i->return->new->String
GenerateOopMap#retJumpTargetsDo(BytecodeStream, JumpClosure, int, int[])::: generate oop map ret jump targets do:::ra->vars->get->if->ra->isGoodAddress->throw->new->RuntimeException->target->ra->getInfo->rtEnt->_rt->findJsrsForTarget->bci->bcs->bci->for->i->rtEnt->nofJsrs
GenerateOopMap#jumpTargetsDo(BytecodeStream, JumpClosure, int[]):::If the current instruction in "c" has no effect on control flow,       returns "true":::bci->bcs->bci->switch->bcs->code->closure->bcs->dest->process->closure->process->break->closure->bcs->dest->process->break->closure->bcs->dest_w->process->break->tableswitch->BytecodeTableswitch->at->len->tableswitch->length->closure->tableswitch->defaultOffset->process->while->closure->tableswitch->destOffsetAt->process->break->lookupswitch->BytecodeLookupswitch->at->npairs->lookupswitch->numberOfPairs->closure->lookupswitch->defaultOffset->process->while->pair->lookupswitch->pairAt->closure->pair->offset->process->break->Assert->bcs->isWide->that->closure->bcs->dest->process->break->closure->bcs->dest_w->process->break->throw->new->RuntimeException->break->return->return
GenerateOopMap#computeMap()::: generate oop map compute map:::if->method->getMethodHolder->getName->asString->method->getName->asString->method->getSignature->asString->println->method->getMaxLocals->method->getMaxStack->method->hasExceptionTable->new->ArrayList->if->method->getCodeSize->method->getMaxStack->fillStackmapProlog->fillStackmapEpilog->return->if->_rt->computeRetTable->if->markBBHeadersAndCountGCPoints->if->doInterpretation->if->reportResults->reportResult->if->throw->new->RuntimeException
GenerateOopMap#resultForBasicblock(int)::: generate oop map result for basicblock:::bb->getBasicBlockContaining->if->Assert->bb->isReachable->that->bb->setChanged->interpBB
GenerateOopMap#maxLocals()::: generate oop map max locals:::return
GenerateOopMap#method()::: generate oop map method:::return
GenerateOopMap#monitorSafe()::: generate oop map monitor safe:::return
GenerateOopMap#getMonitorMatch(int)::: generate oop map get monitor match:::if->Assert->that->bb->getBasicBlockContaining->if->bb->isReachable->bb->setChanged->interpBB->if->Assert->that->return
GenerateOopMap#bbIndex(BasicBlock)::: generate oop map bb index:::for->i->throw->new->RuntimeException
GenerateOopMap#allowRewrites()::: generate oop map allow rewrites:::return
GenerateOopMap#reportResults()::: generate oop map report results:::return
GenerateOopMap#reportInitVars()::: generate oop map report init vars:::return
GenerateOopMap#possibleGCPoint(BytecodeStream)::: generate oop map possible point:::throw->new->RuntimeException
GenerateOopMap#fillStackmapProlog(int)::: generate oop map fill stackmap prolog:::throw->new->RuntimeException
GenerateOopMap#fillStackmapEpilog()::: generate oop map fill stackmap epilog:::throw->new->RuntimeException
GenerateOopMap#fillStackmapForOpcodes(BytecodeStream, CellTypeStateList, CellTypeStateList, int)::: generate oop map fill stackmap for opcodes:::throw->new->RuntimeException
GenerateOopMap#fillInitVars(List)::: generate oop map fill init vars:::throw->new->RuntimeException
HeapPrinter#prologue(long)::: heap printer prologue:::
HeapPrinter#doObj(Oop)::: heap printer do obj:::obj->iterate->return
HeapPrinter#epilogue()::: heap printer epilogue:::
HeapVisitor#prologue(long)::: heap visitor prologue:::
HeapVisitor#doObj(Oop)::: heap visitor do obj:::
HeapVisitor#epilogue()::: heap visitor epilogue:::
IndexableFieldIdentifier#getIndex()::: indexable field identifier get index:::return
IndexableFieldIdentifier#getName()::: indexable field identifier get name:::return->Integer->getIndex->toString
IndexableFieldIdentifier#printOn(PrintStream)::: indexable field identifier print on:::tty->getIndex->print
IndexableFieldIdentifier#equals(Object)::: indexable field identifier equals:::if->return->if->return->return->getIndex
IndexableFieldIdentifier#hashCode()::: indexable field identifier hash code:::return
Instance#initialize(TypeDataBase)::: instance initialize:::type->db->lookupType->type->getSize
Instance#getHeaderSize()::: instance get header size:::if->VM->getVM->isCompressedKlassPointersEnabled->return->VM->getVM->getIntSize->else->return
Instance#isInstance()::: instance is instance:::return
Instance#iterateFields(OopVisitor, boolean)::: instance iterate fields:::super->iterateFields->getKlass->iterateNonStaticFields
Instance#printValueOn(PrintStream)::: instance print value on:::if->getKlass->getName->asString->equals->tty->OopUtilities->stringOopToString->print->else->super->printValueOn
InstanceClassLoaderKlass#initialize(TypeDataBase)::: instance class loader klass initialize:::type->db->lookupType
InstanceKlass#initialize(TypeDataBase)::: instance klass initialize:::type->db->lookupType->type->getAddressField->new->MetadataField->type->getAddressField->type->getAddressField->type->getAddressField->type->getAddressField->type->getAddressField->type->getAddressField->type->getCIntegerField->new->CIntField->type->getAddressField->new->MetadataField->type->getAddressField->type->getAddressField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->if->VM->getVM->isJvmtiSupported->type->getAddressField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->type->getSize->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->shortValue->db->lookupIntConstant->shortValue->db->lookupIntConstant->shortValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue
InstanceKlass.ClassState#toString()::: class state to string:::return
InstanceKlass#getInitStateAsInt()::: instance klass get init state as int:::return->initState->getValue
InstanceKlass#getInitState()::: instance klass get init state:::state->getInitStateAsInt->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->throw->new->RuntimeException
InstanceKlass#isLoaded()::: instance klass is loaded:::return->getInitStateAsInt
InstanceKlass#isLinked()::: instance klass is linked:::return->getInitStateAsInt
InstanceKlass#isInitialized()::: instance klass is initialized:::return->getInitStateAsInt
InstanceKlass#isNotInitialized()::: instance klass is not initialized:::return->getInitStateAsInt
InstanceKlass#isBeingInitialized()::: instance klass is being initialized:::return->getInitStateAsInt
InstanceKlass#isInErrorState()::: instance klass is in error state:::return->getInitStateAsInt
InstanceKlass#getClassStatus()::: instance klass get class status:::result->if->isLinked->if->isInitialized->if->Assert->isLinked->that->if->isInErrorState->return
InstanceKlass#getObjectSize(Oop)::: instance klass get object size:::return->getSizeHelper->VM->getVM->getAddressSize
InstanceKlass#getSize()::: instance klass get size:::wordLength->VM->getVM->getBytesPerWord->size->getHeaderSize->getVtableLen->getItableLen->getNonstaticOopMapSize->if->isInterface->if->isAnonymous->if->hasStoredFingerprint->return->alignSize
InstanceKlass#getMiscFlags()::: instance klass get misc flags:::return->miscFlags->getValue
InstanceKlass#isAnonymous()::: instance klass is anonymous:::return->getMiscFlags
InstanceKlass#shouldStoreFingerprint()::: instance klass should store fingerprint:::vm->VM->getVM->if->vm->getCommandLineBooleanFlag->vm->getCommandLineBooleanFlag->return->if->vm->getCommandLineBooleanFlag->return->return
InstanceKlass#hasStoredFingerprint()::: instance klass has stored fingerprint:::return->shouldStoreFingerprint->isShared
InstanceKlass#isShared()::: instance klass is shared:::vm->VM->getVM->if->vm->isSharingEnabled->sharedDictionary->vm->getSystemDictionary->sharedDictionary->if->if->sharedDictionary->contains->return->return
InstanceKlass#getHeaderSize()::: instance klass get header size:::return
InstanceKlass#getFieldAccessFlags(int)::: instance klass get field access flags:::return->getFields->at
InstanceKlass#getFieldNameIndex(int)::: instance klass get field name index:::if->getJavaFieldsCount->throw->new->IndexOutOfBoundsException->return->getFields->at
InstanceKlass#getFieldName(int)::: instance klass get field name:::nameIndex->getFields->at->if->getJavaFieldsCount->return->getConstants->getSymbolAt->else->return->vmSymbols->symbolAt
InstanceKlass#getFieldSignatureIndex(int)::: instance klass get field signature index:::if->getJavaFieldsCount->throw->new->IndexOutOfBoundsException->return->getFields->at
InstanceKlass#getFieldSignature(int)::: instance klass get field signature:::signatureIndex->getFields->at->if->getJavaFieldsCount->return->getConstants->getSymbolAt->else->return->vmSymbols->symbolAt
InstanceKlass#getFieldGenericSignatureIndex(int)::: instance klass get field generic signature index:::allFieldsCount->getAllFieldsCount->generic_signature_slot->for->i->return
InstanceKlass#getFieldGenericSignature(int)::: instance klass get field generic signature:::genericSignatureIndex->getFieldGenericSignatureIndex->if->return->getConstants->getSymbolAt->return
InstanceKlass#getFieldInitialValueIndex(int)::: instance klass get field initial value index:::if->getJavaFieldsCount->throw->new->IndexOutOfBoundsException->return->getFields->at
InstanceKlass#getFieldOffset(int)::: instance klass get field offset:::fields->getFields->lo->fields->at->hi->fields->at->if->return->VM->getVM->buildIntFromShorts->throw->new->RuntimeException
InstanceKlass#getArrayKlasses()::: instance klass get array klasses:::return->arrayKlasses->getValue
InstanceKlass#getMethods()::: instance klass get methods:::return->methods->getAddress->getValue->new->MethodArray
InstanceKlass#getDefaultMethods()::: instance klass get default methods:::if->addr->defaultMethods->getAddress->getValue->if->addr->getAddressAt->return->new->MethodArray->else->return->else->return
InstanceKlass#getLocalInterfaces()::: instance klass get local interfaces:::return->localInterfaces->getAddress->getValue->new->KlassArray
InstanceKlass#getTransitiveInterfaces()::: instance klass get transitive interfaces:::return->transitiveInterfaces->getAddress->getValue->new->KlassArray
InstanceKlass#getJavaFieldsCount()::: instance klass get java fields count:::return->javaFieldsCount->getValue
InstanceKlass#getAllFieldsCount()::: instance klass get all fields count:::len->getFields->length->allFieldsCount->for->return
InstanceKlass#getConstants()::: instance klass get constants:::return->constants->getValue
InstanceKlass#getSourceFileName()::: instance klass get source file name:::return->getConstants->sourceFileNameIndex->getValue->getSymbolAt
InstanceKlass#getSourceDebugExtension()::: instance klass get source debug extension:::return->CStringUtilities->sourceDebugExtension->getAddress->getValue->getString
InstanceKlass#getNonstaticFieldSize()::: instance klass get nonstatic field size:::return->nonstaticFieldSize->getValue
InstanceKlass#getStaticOopFieldCount()::: instance klass get static oop field count:::return->staticOopFieldCount->getValue
InstanceKlass#getNonstaticOopMapSize()::: instance klass get nonstatic oop map size:::return->nonstaticOopMapSize->getValue
InstanceKlass#getIsMarkedDependent()::: instance klass get is marked dependent:::return->isMarkedDependent->getValue
InstanceKlass#getItableLen()::: instance klass get itable len:::return->itableLen->getValue
InstanceKlass#majorVersion()::: instance klass major version:::return->majorVersion->getValue
InstanceKlass#minorVersion()::: instance klass minor version:::return->minorVersion->getValue
InstanceKlass#getGenericSignature()::: instance klass get generic signature:::index->genericSignatureIndex->getValue->if->return->getConstants->getSymbolAt->else->return
InstanceKlass#getSizeHelper()::: instance klass get size helper:::lh->getLayoutHelper->if->Assert->that->return->VM->getVM->getAddressSize
InstanceKlass.InnerClassAttributeOffset#initialize(TypeDataBase)::: inner class attribute offset initialize:::db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue
InstanceKlass.EnclosingMethodAttributeOffset#initialize(TypeDataBase)::: enclosing method attribute offset initialize:::db->lookupIntConstant->intValue
InstanceKlass#computeModifierFlags()::: instance klass compute modifier flags:::access->getAccessFlags->innerClassList->getInnerClasses->length->innerClassList->length->if->if->Assert->that->for->i->return
InstanceKlass#isInnerClassName(Symbol)::: instance klass is inner class name:::return->isInInnerClasses
InstanceKlass#isInnerOrLocalClassName(Symbol)::: instance klass is inner or local class name:::return->isInInnerClasses
InstanceKlass#isInInnerClasses(Symbol, boolean)::: instance klass is in inner classes:::innerClassList->getInnerClasses->length->innerClassList->length->if->if->Assert->that->for->i->return->else->return
InstanceKlass#implementsInterface(Klass)::: instance klass implements interface:::if->Assert->k->isInterface->that->interfaces->getTransitiveInterfaces->len->interfaces->length->for->i->return
InstanceKlass#computeSubtypeOf(Klass)::: instance klass compute subtype of:::if->k->isInterface->return->implementsInterface->else->return->super->computeSubtypeOf
InstanceKlass#printValueOn(PrintStream)::: instance klass print value on:::tty->getName->asString->print
InstanceKlass#iterateFields(MetadataVisitor)::: instance klass iterate fields:::super->iterateFields->visitor->doMetadata->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt->visitor->doCInt
InstanceKlass#iterateStaticFields(OopVisitor)::: instance klass iterate static fields:::visitor->getJavaMirror->setObj->visitor->prologue->iterateStaticFieldsInternal->visitor->epilogue
InstanceKlass#iterateStaticFieldsInternal(OopVisitor)::: instance klass iterate static fields internal:::length->getJavaFieldsCount->for->index
InstanceKlass#getJavaSuper()::: instance klass get java super:::return->getSuper
InstanceKlass#getStaticFields()::: instance klass get static fields:::fields->getFields->length->getJavaFieldsCount->result->new->ArrayList->for->index->return->result->result->size->new->FieldArr->toArray
InstanceKlass#iterateNonStaticFields(OopVisitor, Oop)::: instance klass iterate non static fields:::if->getSuper->getSuper->iterateNonStaticFields->length->getJavaFieldsCount->for->index
InstanceKlass#findLocalField(Symbol, Symbol):::Field access by name.:::length->getJavaFieldsCount->for->i->return
InstanceKlass#findInterfaceField(Symbol, Symbol):::Find field in direct superinterfaces.:::interfaces->getLocalInterfaces->n->interfaces->length->for->i->return
InstanceKlass#findField(Symbol, Symbol):::Find field according to JVM spec 5.4.3.2, returns the klass in       which the field is defined.:::f->findLocalField->if->return->findInterfaceField->if->return->supr->getSuper->if->return->supr->findField->return
InstanceKlass#findField(String, String):::Find field according to JVM spec 5.4.3.2, returns the klass in       which the field is defined (convenience routine):::symbols->VM->getVM->getSymbolTable->nameSym->symbols->probe->sigSym->symbols->probe->if->return->return->findField
InstanceKlass#findFieldDbg(String, String):::Find field according to JVM spec 5.4.3.2, returns the klass in       which the field is defined (retained only for backward       compatibility with jdbx):::return->findField
InstanceKlass#getFieldByIndex(int):::Get field by its index in the fields array:::return->newField
InstanceKlass#getImmediateFields():::Return a List of SA Fields for the fields declared in this class:::length->getJavaFieldsCount->immediateFields->new->ArrayList->for->index->return
InstanceKlass#getAllFields():::Return a List of SA Fields for all the java fields in this class,         including all inherited fields:::allFields->getImmediateFields->interfaces->getTransitiveInterfaces->n->interfaces->length->for->i->if->isInterface->supr->if->getSuper->allFields->supr->getImmediateFields->addAll->return
InstanceKlass#getImmediateMethods():::Return a List of SA Methods declared directly in this class/interface:::methods->getMethods->length->methods->length->tmp->new->ObjectArr->methodOrdering->getMethodOrdering->if->methodOrdering->length->for->index->else->for->index->return->Arrays->asList
InstanceKlass#getDirectImplementedInterfaces():::Return a List containing an SA InstanceKlass for each         interface named in this class's 'implements' clause.:::interfaces->getLocalInterfaces->length->interfaces->length->directImplementedInterfaces->new->ArrayList->for->index->return
InstanceKlass#arrayKlassImpl(boolean, int)::: instance klass array klass impl:::if->getArrayKlasses->return->oak->getArrayKlasses->if->return->oak->arrayKlassOrNull->return->oak->arrayKlass
InstanceKlass#arrayKlassImpl(boolean)::: instance klass array klass impl:::return->arrayKlassImpl
InstanceKlass#signature()::: instance klass signature:::return->super->signature
InstanceKlass#findMethod(String, String):::Convenience routine taking Strings; lookup is done in       SymbolTable.:::syms->VM->getVM->getSymbolTable->nameSym->syms->probe->sigSym->syms->probe->if->return->return->findMethod
InstanceKlass#findMethod(Symbol, Symbol):::Find method in vtable.:::return->getMethods->findMethod
InstanceKlass#getBreakpoints():::Breakpoint support (see methods on Method* for details):::if->VM->getVM->isJvmtiSupported->return->addr->getAddress->breakpoints->getOffset->getAddressAt->return->VMObjectFactory->newObject
InstanceKlass#getMethodOrdering()::: instance klass get method ordering:::addr->getAddress->methodOrdering->getOffset->getAddressAt->return->VMObjectFactory->newObject
InstanceKlass#getFields()::: instance klass get fields:::addr->getAddress->fields->getOffset->getAddressAt->return->VMObjectFactory->newObject
InstanceKlass#getInnerClasses()::: instance klass get inner classes:::addr->getAddress->innerClasses->getOffset->getAddressAt->return->VMObjectFactory->newObject
InstanceKlass#visitField(OopVisitor, FieldType, int)::: instance klass visit field:::f->newField->if->type->isOop->visitor->doOop->return->if->type->isByte->visitor->doByte->return->if->type->isChar->visitor->doChar->return->if->type->isDouble->visitor->doDouble->return->if->type->isFloat->visitor->doFloat->return->if->type->isInt->visitor->doInt->return->if->type->isLong->visitor->doLong->return->if->type->isShort->visitor->doShort->return->if->type->isBoolean->visitor->doBoolean->return
InstanceKlass#newField(int)::: instance klass new field:::type->getFieldSignature->new->FieldType->if->type->isOop->if->VM->getVM->isCompressedOopsEnabled->return->new->NarrowOopField->else->return->new->OopField->if->type->isByte->return->new->ByteField->if->type->isChar->return->new->CharField->if->type->isDouble->return->new->DoubleField->if->type->isFloat->return->new->FloatField->if->type->isInt->return->new->IntField->if->type->isLong->return->new->LongField->if->type->isShort->return->new->ShortField->if->type->isBoolean->return->new->BooleanField->throw->new->RuntimeException
InstanceKlass#findMethod(MethodArray, Symbol, Symbol)::: instance klass find method:::len->methods->length->l->h->while->mid->m->methods->at->res->m->getName->fastCompare->if->if->m->getSignature->equals->return->i->for->for->if->index->linearSearch->if->throw->new->DebuggerException->return->else->if->else->if->index->linearSearch->if->throw->new->DebuggerException->return
InstanceKlass#linearSearch(MethodArray, Symbol, Symbol)::: instance klass linear search:::len->methods->length->for->index->return
InstanceKlass#dumpReplayData(PrintStream)::: instance klass dump replay data:::cp->getConstants->sub->getSubklassKlass->while->if->out->sub->getName->asString->println->sub->getNextSiblingKlass->length->cp->getLength->out->getName->asString->isLinked->isInitialized->print->for->index->out->println->if->isInitialized->staticFields->getStaticFields->for->i
InstanceMirrorKlass#initialize(TypeDataBase)::: instance mirror klass initialize:::type->db->lookupType
InstanceMirrorKlass#getObjectSize(Oop)::: instance mirror klass get object size:::return->java_lang_Class->getOopSize->VM->getVM->getAddressSize
InstanceMirrorKlass#iterateNonStaticFields(OopVisitor, Oop)::: instance mirror klass iterate non static fields:::super->iterateNonStaticFields->klass->java_lang_Class->asKlass->if->iterateStaticFields
InstanceRefKlass#initialize(TypeDataBase)::: instance ref klass initialize:::type->db->lookupType
IntField#getValue(Oop)::: int field get value:::if->isVMField->obj->isInstance->obj->isArray->throw->obj->toString->new->InternalError->return->obj->getHandle->getOffset->getJIntAt
IntField#getValue(VMObject)::: int field get value:::return->obj->getAddress->getOffset->getJIntAt
IntField#setValue(Oop, int)::: int field set value:::
java_lang_Class#initialize(TypeDataBase):::java_lang_ class initialize:::jlc->db->lookupType->jlc->getCIntegerField->getValue->jlc->getCIntegerField->getValue->oopSizeOffset->jlc->getCIntegerField->getValue->new->NamedFieldIdentifier->new->IntField
java_lang_Class#asKlass(Oop):::get Klass* field at offset hc_klass_offset from a java.lang.Class object:::return->Metadata->aClass->getHandle->getAddressAt->instantiateWrapperFor
java_lang_Class#getOopSize(Oop):::get oop_size field at offset oop_size_offset from a java.lang.Class object:::return->getValue
java_lang_Class#asExternalName(Oop):::Returns the Java name for this Java mirror:::k->java_lang_Class->asKlass->if->type->ak->Metadata->aClass->getHandle->getAddressAt->instantiateWrapperFor->if->BasicType->ak->getElementType->intToBasicType->return->type->getName->else->return->k->getName->asString
JumpData#staticCellCount()::: jump data static cell count:::return
JumpData#cellCount()::: jump data cell count:::return->staticCellCount
JumpData#taken()::: jump data taken:::return->uintAt
JumpData#displacement()::: jump data displacement:::return->intAt
JumpData#takenOffset()::: jump data taken offset:::return->cellOffset
JumpData#displacementOffset()::: jump data displacement offset:::return->cellOffset
JumpData#printDataOn(PrintStream)::: jump data print data on:::printShared->st->taken->displacement->println
Klass#initialize(TypeDataBase)::: klass initialize:::type->db->lookupType->type->getAddressField->type->getAddressField->new->MetadataField->type->getJIntField->new->IntField->type->getAddressField->type->getCIntegerField->new->CIntField->try->type->getField->catch->finally->type->getAddressField->new->MetadataField->type->getAddressField->new->MetadataField->type->getAddressField->new->MetadataField->type->getCIntegerField->new->CIntField->type->getAddressField->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue
Klass#getClassStatus()::: klass get class status:::return
Klass#isKlass()::: klass is klass:::return
Klass#isArrayKlass()::: klass is array klass:::return
Klass#getValue(AddressField)::: klass get value:::return->addr->field->getOffset->getAddressAt
Klass#getSymbol(AddressField)::: klass get symbol:::return->Symbol->addr->field->getOffset->getAddressAt->create
Klass#getJavaMirror()::: klass get java mirror:::handle->javaMirror->getAddress->getValue->if->refs->handle->getOopHandleAt->return->VM->getVM->getObjectHeap->newOop->return
Klass#getSuper()::: klass get super:::return->superField->getValue
Klass#getJavaSuper()::: klass get java super:::return
Klass#getLayoutHelper()::: klass get layout helper:::return->layoutHelper->getValue
Klass#getName()::: klass get name:::return->getSymbol
Klass#getAccessFlags()::: klass get access flags:::return->accessFlags->getValue
Klass#getAccessFlagsObj()::: klass get access flags obj:::return->getAccessFlags->new->AccessFlags
Klass#getSubklassKlass()::: klass get subklass klass:::return->subklass->getValue
Klass#getNextSiblingKlass()::: klass get next sibling klass:::return->nextSibling->getValue
Klass#getNextLinkKlass()::: klass get next link klass:::return->nextLink->getValue
Klass#getVtableLen()::: klass get vtable len:::return->vtableLen->getValue
Klass#getClassLoaderData()::: klass get class loader data:::return->ClassLoaderData->classLoaderData->getAddress->getValue->instantiateWrapperFor
Klass#getClassLoader()::: klass get class loader:::return->getClassLoaderData->getClassLoader
Klass#traceID()::: klass trace d:::if->return->return->traceIDField->getJLong
Klass#computeModifierFlags()::: klass compute modifier flags:::return
Klass#getClassModifiers()::: klass get class modifiers:::flags->computeModifierFlags->if->isSuper->return
Klass#isSubclassOf(Klass)::: klass is subclass of:::if->t->while->if->t->equals->return->t->getSuper->return
Klass#isSubtypeOf(Klass)::: klass is subtype of:::return->computeSubtypeOf
Klass#computeSubtypeOf(Klass)::: klass compute subtype of:::return->isSubclassOf
Klass#lca(Klass)::: klass lca:::k1->while->if->k1->isSubtypeOf->return->if->k2->isSubtypeOf->return->k1->getSuper->k2->getSuper
Klass#printValueOn(PrintStream)::: klass print value on:::tty->print
Klass#iterateFields(MetadataVisitor)::: klass iterate fields:::visitor->doMetadata->visitor->doInt->visitor->doCInt->visitor->doMetadata->visitor->doMetadata->visitor->doCInt
Klass#getObjectSize()::: klass get object size:::throw->new->RuntimeException
Klass#arrayKlass(int):::Array class with specific rank:::return->arrayKlassImpl
Klass#arrayKlass():::Array class with this klass as element type:::return->arrayKlassImpl
Klass#arrayKlassOrNull(int):::These will return null instead of allocating on the heap:::return->arrayKlassImpl
Klass#arrayKlassOrNull()::: klass array klass or null:::return->arrayKlassImpl
Klass#arrayKlassImpl(boolean, int)::: klass array klass impl:::throw->new->RuntimeException
Klass#arrayKlassImpl(boolean)::: klass array klass impl:::throw->new->RuntimeException
Klass#signature()::: klass signature:::return->getName->asString
Klass#isPublic()::: klass is public:::return->getAccessFlagsObj->isPublic
Klass#isFinal()::: klass is final:::return->getAccessFlagsObj->isFinal
Klass#isInterface()::: klass is interface:::return->getAccessFlagsObj->isInterface
Klass#isAbstract()::: klass is abstract:::return->getAccessFlagsObj->isAbstract
Klass#isSuper()::: klass is super:::return->getAccessFlagsObj->isSuper
Klass#isSynthetic()::: klass is synthetic:::return->getAccessFlagsObj->isSynthetic
Klass#hasFinalizer()::: klass has finalizer:::return->getAccessFlagsObj->hasFinalizer
Klass#isCloneable()::: klass is cloneable:::return->getAccessFlagsObj->isCloneable
Klass#hasVanillaConstructor()::: klass has vanilla constructor:::return->getAccessFlagsObj->hasVanillaConstructor
Klass#hasMirandaMethods()::: klass has miranda methods:::return->getAccessFlagsObj->hasMirandaMethods
LineNumberTableElement#getStartBCI()::: line number table element get start i:::return
LineNumberTableElement#getLineNumber()::: line number table element get line number:::return
LocalVariableTableElement#initialize(TypeDataBase)::: local variable table element initialize:::type->db->lookupType->type->getCIntegerField->getOffset->type->getCIntegerField->getOffset->type->getCIntegerField->getOffset->type->getCIntegerField->getOffset->type->getCIntegerField->getOffset->type->getCIntegerField->getOffset
LocalVariableTableElement#getStartBCI()::: local variable table element get start i:::return->handle->getCIntegerAt
LocalVariableTableElement#getLength()::: local variable table element get length:::return->handle->getCIntegerAt
LocalVariableTableElement#getNameCPIndex()::: local variable table element get name index:::return->handle->getCIntegerAt
LocalVariableTableElement#getDescriptorCPIndex()::: local variable table element get descriptor index:::return->handle->getCIntegerAt
LocalVariableTableElement#getSignatureCPIndex()::: local variable table element get signature index:::return->handle->getCIntegerAt
LocalVariableTableElement#getSlot()::: local variable table element get slot:::return->handle->getCIntegerAt
LongField#getValue(Oop)::: long field get value:::return->obj->getHandle->getOffset->getJLongAt
LongField#getValue(VMObject)::: long field get value:::return->obj->getAddress->getOffset->getJLongAt
LongField#setValue(Oop, long)::: long field set value:::
Mark#initialize(TypeDataBase)::: mark initialize:::type->db->lookupType->type->getCIntegerField->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue->db->lookupLongConstant->longValue
Mark#value()::: mark value:::return->markField->getValue
Mark#valueAsAddress()::: mark value as address:::return->addr->markField->getOffset->getAddressAt
Mark#hasBiasPattern()::: mark has bias pattern:::return->Bits->value->maskBitsLong
Mark#biasedLocker()::: mark biased locker:::threads->VM->getVM->getThreads->addr->valueAsAddress->andWithMask->return->threads->createJavaThreadWrapper
Mark#isBiasedAnonymously()::: mark is biased anonymously:::return->hasBiasPattern->biasedLocker
Mark#isLocked()::: mark is locked:::return->Bits->value->maskBitsLong
Mark#isUnlocked()::: mark is unlocked:::return->Bits->value->maskBitsLong
Mark#isMarked()::: mark is marked:::return->Bits->value->maskBitsLong
Mark#isBeingInflated()::: mark is being inflated:::return->value
Mark#mustBePreserved()::: mark must be preserved:::return->isUnlocked->hasNoHash
Mark#hasLocker()::: mark has locker:::return->value
Mark#locker()::: mark locker:::if->Assert->hasLocker->that->return->valueAsAddress->new->BasicLock
Mark#hasMonitor()::: mark has monitor:::return->value
Mark#monitor()::: mark monitor:::if->Assert->hasMonitor->that->monAddr->valueAsAddress->xorWithMask->return->new->ObjectMonitor
Mark#hasDisplacedMarkHelper()::: mark has displaced mark helper:::return->value
Mark#displacedMarkHelper()::: mark displaced mark helper:::if->Assert->hasDisplacedMarkHelper->that->addr->valueAsAddress->andWithMask->return->addr->getAddressAt->new->Mark
Mark#age()::: mark age:::return->Bits->value->maskBitsLong
Mark#hash()::: mark hash:::return->Bits->value->maskBitsLong
Mark#hasNoHash()::: mark has no hash:::return->hash
Mark#printOn(PrintStream)::: mark print on:::if->isLocked->tty->Long->value->toHexString->print->displacedMarkHelper->printOn->else->if->Assert->isUnlocked->that->tty->print->tty->Long->hash->toHexString->print->tty->age->print
Mark#isCmsFreeChunk()::: mark is cms free chunk:::return->isUnlocked->Bits->value->maskBitsLong
Mark#getSize()::: mark get size:::return->value
Metadata#alignSize(long)::: metadata align size:::return->VM->getVM->VM->getVM->getBytesPerWord->alignUp
Metadata#initialize(TypeDataBase)::: metadata initialize:::db->lookupType->new->VirtualBaseConstructor<Metadata>->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping->metadataConstructor->addMapping
Metadata#instantiateWrapperFor(Address)::: metadata instantiate wrapper for:::return->metadataConstructor->instantiateWrapperFor
Metadata#iterate(MetadataVisitor)::: metadata iterate:::visitor->setObj->visitor->prologue->iterateFields->visitor->epilogue
Metadata#iterateFields(MetadataVisitor)::: metadata iterate fields:::
Metadata#printValueOn(PrintStream)::: metadata print value on:::
Metadata#dumpReplayData(PrintStream)::: metadata dump replay data:::out->println
MetadataField#getValue(Oop)::: metadata field get value:::return->obj->getHandle->getValue
MetadataField#getValue(VMObject)::: metadata field get value:::return->obj->getAddress->getValue
MetadataField#getValue(Address)::: metadata field get value:::return->Metadata->addr->getOffset->getAddressAt->instantiateWrapperFor
MetadataField#setValue(Oop, long)::: metadata field set value:::
MetadataVisitor#prologue()::: metadata visitor prologue:::
MetadataVisitor#epilogue()::: metadata visitor epilogue:::
MetadataVisitor#setObj(Metadata)::: metadata visitor set obj:::
MetadataVisitor#getObj()::: metadata visitor get obj:::
Method#initialize(TypeDataBase)::: method initialize:::db->lookupType->type->getAddressField->type->getAddressField->type->getAddressField->type->getCIntegerField->new->CIntField->type->getAddressField->type->getCIntegerField->new->CIntField
Method#isMethod()::: method is method:::return
Method#objectInitializerName()::: method object initializer name:::if->VM->getVM->getSymbolTable->probe->return
Method#classInitializerName()::: method class initializer name:::if->VM->getVM->getSymbolTable->probe->return
Method#getConstMethod()::: method get const method:::addr->constMethod->getAddress->getValue->return->VMObjectFactory->newObject
Method#getConstants()::: method get constants:::return->getConstMethod->getConstants
Method#getMethodData()::: method get method data:::addr->methodData->getAddress->getValue->return->VMObjectFactory->newObject
Method#getMethodCounters()::: method get method counters:::addr->methodCounters->getAddress->getValue->return->VMObjectFactory->newObject
Method#getMaxStack():::WARNING: this is in words, not useful in this system; use getObjectSize() instead:::return->getConstMethod->getMaxStack
Method#getMaxLocals()::: method get max locals:::return->getConstMethod->getMaxLocals
Method#getSizeOfParameters()::: method get size of parameters:::return->getConstMethod->getSizeOfParameters
Method#getNameIndex()::: method get name index:::return->getConstMethod->getNameIndex
Method#getSignatureIndex()::: method get signature index:::return->getConstMethod->getSignatureIndex
Method#getGenericSignatureIndex()::: method get generic signature index:::return->getConstMethod->getGenericSignatureIndex
Method#getAccessFlags()::: method get access flags:::return->accessFlags->getValue
Method#getCodeSize()::: method get code size:::return->getConstMethod->getCodeSize
Method#getVtableIndex()::: method get vtable index:::return->vtableIndex->getValue
Method#getInvocationCount()::: method get invocation count:::mc->getMethodCounters->return->mc->getInvocationCounter
Method#getBackedgeCount()::: method get backedge count:::mc->getMethodCounters->return->mc->getBackedgeCounter
Method#getNativeMethod()::: method get native method:::addr->code->getAddress->getValue->return->VMObjectFactory->newObject
Method#getAccessFlagsObj()::: method get access flags obj:::return->getAccessFlags->new->AccessFlags
Method#getBytecodeOrBPAt(int):::Get a bytecode or breakpoint at the given bci:::return->getConstMethod->getBytecodeOrBPAt
Method#getOrigBytecodeAt(int):::Fetch the original non-breakpoint bytecode at the specified       bci:::bp->getMethodHolder->getBreakpoints->for->bp->getNext->println->for->bp->getNext->Assert->that->return
Method#getBytecodeByteArg(int)::: method get bytecode byte arg:::return->getConstMethod->getBytecodeByteArg
Method#getBytecodeShortArg(int):::Fetches a 16-bit big-endian ("Java ordered") value from the       bytecode stream:::return->getConstMethod->getBytecodeShortArg
Method#getNativeShortArg(int):::Fetches a 16-bit native ordered value from the       bytecode stream:::return->getConstMethod->getNativeShortArg
Method#getBytecodeIntArg(int):::Fetches a 32-bit big-endian ("Java ordered") value from the       bytecode stream:::return->getConstMethod->getBytecodeIntArg
Method#getNativeIntArg(int):::Fetches a 32-bit native ordered value from the       bytecode stream:::return->getConstMethod->getNativeIntArg
Method#getByteCode()::: method get byte code:::return->getConstMethod->getByteCode
Method#getName()::: method get name:::return->getConstants->getNameIndex->getSymbolAt
Method#getSignature()::: method get signature:::return->getConstants->getSignatureIndex->getSymbolAt
Method#getGenericSignature()::: method get generic signature:::index->getGenericSignatureIndex->return->getConstants->getSymbolAt
Method#getMethodHolder()::: method get method holder:::return->getConstants->getPoolHolder
Method#isPublic()::: method is public:::return->getAccessFlagsObj->isPublic
Method#isPrivate()::: method is private:::return->getAccessFlagsObj->isPrivate
Method#isProtected()::: method is protected:::return->getAccessFlagsObj->isProtected
Method#isPackagePrivate()::: method is package private:::af->getAccessFlagsObj->return->af->isPublic->af->isPrivate->af->isProtected
Method#isStatic()::: method is static:::return->getAccessFlagsObj->isStatic
Method#isFinal()::: method is final:::return->getAccessFlagsObj->isFinal
Method#isSynchronized()::: method is synchronized:::return->getAccessFlagsObj->isSynchronized
Method#isBridge()::: method is bridge:::return->getAccessFlagsObj->isBridge
Method#isVarArgs()::: method is var args:::return->getAccessFlagsObj->isVarArgs
Method#isNative()::: method is native:::return->getAccessFlagsObj->isNative
Method#isAbstract()::: method is abstract:::return->getAccessFlagsObj->isAbstract
Method#isStrict()::: method is strict:::return->getAccessFlagsObj->isStrict
Method#isSynthetic()::: method is synthetic:::return->getAccessFlagsObj->isSynthetic
Method#isConstructor()::: method is constructor:::return->isStatic->getName->objectInitializerName->equals
Method#isStaticInitializer()::: method is static initializer:::return->isStatic->getName->classInitializerName->equals
Method#isObsolete()::: method is obsolete:::return->getAccessFlagsObj->isObsolete
Method#getMaskFor(int)::: method get mask for:::entry->new->OopMapCacheEntry->entry->fill->return
Method#getSize()::: method get size:::return->type->getSize->isNative
Method#printValueOn(PrintStream)::: method print value on:::tty->getName->asString->getSignature->asString->getAddress->print
Method#iterateFields(MetadataVisitor)::: method iterate fields:::visitor->doCInt
Method#hasLineNumberTable()::: method has line number table:::return->getConstMethod->hasLineNumberTable
Method#getLineNumberFromBCI(int)::: method get line number from i:::return->getConstMethod->getLineNumberFromBCI
Method#getLineNumberTable()::: method get line number table:::return->getConstMethod->getLineNumberTable
Method#hasLocalVariableTable()::: method has local variable table:::return->getConstMethod->hasLocalVariableTable
Method#getLocalVariableTable():::Should only be called if table is present:::return->getConstMethod->getLocalVariableTable
Method#getLocalVariableName(int, int)::: method get local variable name:::if->hasLocalVariableTable->return->locals->getLocalVariableTable->for->l->return
Method#hasExceptionTable()::: method has exception table:::return->getConstMethod->hasExceptionTable
Method#getExceptionTable()::: method get exception table:::return->getConstMethod->getExceptionTable
Method#hasCheckedExceptions()::: method has checked exceptions:::return->getConstMethod->hasCheckedExceptions
Method#getCheckedExceptions():::Should only be called if table is present:::return->getConstMethod->getCheckedExceptions
Method#externalNameAndSignature():::Returns name and signature in external form for debugging       purposes:::buf->new->StringBuffer->buf->getMethodHolder->getName->asString->append->buf->append->buf->getName->asString->append->buf->append->getSignature->new->SignatureConverter->iterateParameters->buf->append->return->buf->toString->replace
Method#dumpReplayData(PrintStream)::: method dump replay data:::nm->getNativeMethod->code_size->if->nm->codeEnd->nm->getVerifiedEntryPoint->minus->holder->getMethodHolder->out->nameAsAscii->getInvocationCount->getBackedgeCount->interpreterInvocationCount->interpreterThrowoutCount->println
Method#interpreterThrowoutCount()::: method interpreter throwout count:::return->getMethodCounters->interpreterThrowoutCount
Method#interpreterInvocationCount()::: method interpreter invocation count:::return->getMethodCounters->interpreterInvocationCount
Method#nameAsAscii()::: method name as ascii:::return->getMethodHolder->getName->asString->OopUtilities->getName->asString->escapeString->getSignature->asString
MethodCounters#initialize(TypeDataBase)::: method counters initialize:::type->db->lookupType->if->VM->getVM->isServerCompiler->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField->if->VM->getVM->isCore->type->getCIntegerField->new->CIntField->type->getCIntegerField->new->CIntField
MethodCounters#interpreterInvocationCount()::: method counters interpreter invocation count:::if->return->interpreterInvocationCountField->getValue->else->return
MethodCounters#interpreterThrowoutCount()::: method counters interpreter throwout count:::if->return->interpreterThrowoutCountField->getValue->else->return
MethodCounters#getInvocationCounter()::: method counters get invocation counter:::if->Assert->VM->getVM->isCore->that->return->invocationCounter->getValue
MethodCounters#getBackedgeCounter()::: method counters get backedge counter:::if->Assert->VM->getVM->isCore->that->return->backedgeCounter->getValue
MethodCounters#printValueOn(PrintStream)::: method counters print value on:::
MethodData#trapReasonName(int)::: method data trap reason name:::if->return->if->return->return
MethodData#trapStateReason(int)::: method data trap state reason:::recompileBit->if->return->else->return
MethodData#trapStateIsRecompiled(int)::: method data trap state is recompiled:::return
MethodData#reasonIsRecordedPerBytecode(int)::: method data reason is recorded per bytecode:::return
MethodData#trapStateAddReason(int, int)::: method data trap state add reason:::recompileBit->if->return->else->if->return->else->if->return->else->return
MethodData#trapStateSetRecompiled(int, boolean)::: method data trap state set recompiled:::if->return->else->return
MethodData#formatTrapState(int)::: method data format trap state:::reason->trapStateReason->recompFlag->trapStateIsRecompiled->decodedState->if->reasonIsRecordedPerBytecode->trapStateAddReason->if->trapStateSetRecompiled->if->return->else->return->trapReasonName
MethodData#initialize(TypeDataBase)::: method data initialize:::type->db->lookupType->type->getSize->type->getCIntegerField->new->CIntField->type->getAddressField->new->MetadataField->flags->VM->getVM->getCommandLineFlags->for->f->VM->getVM->getAddressSize->type->getCIntegerField->new->CIntField->type->getAddressField->type->getCIntegerField->new->CIntField->type->getSize->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->new->StringArr->i->db->getIntConstants->prefix->while->i->hasNext->name->i->next->if->name->startsWith->if->name->endsWith->name->endsWith->name->endsWith->trimmed->name->prefix->length->substring->value->db->lookupIntConstant->intValue->if->throw->new->InternalError->for->index
MethodData#getKlassAtAddress(Address)::: method data get klass at address:::return->Metadata->instantiateWrapperFor
MethodData#getMethodAtAddress(Address)::: method data get method at address:::return->Metadata->instantiateWrapperFor
MethodData#printKlassValueOn(Klass, PrintStream)::: method data print klass value on:::klass->printValueOn
MethodData#printMethodValueOn(Method, PrintStream)::: method data print method value on:::method->printValueOn
MethodData#isMethodData()::: method data is method data:::return
MethodData#getMethod()::: method data get method:::return->method->getValue
MethodData#printValueOn(PrintStream)::: method data print value on:::m->getMethod->tty->m->getName->asString->m->getSignature->asString->print
MethodData#iterateFields(MetadataVisitor)::: method data iterate fields:::super->iterateFields->visitor->doMetadata->visitor->doCInt
MethodData#dataSize()::: method data data size:::if->return->else->return->dataSize->getAddress->getValue
MethodData#sizeInBytes()::: method data size in bytes:::if->return->else->return->size->getAddress->getValue
MethodData#size()::: method data size:::return->VM->getVM->sizeInBytes->VM->getVM->getBytesPerWord->alignUp->VM->getVM->getBytesPerWord->alignSize
MethodData#parametersTypeData()::: method data parameters type data:::di->parametersTypeDataDi->getAddress->getValue->if->return->dataLayout->data->getOffset->new->DataLayout->return->new->ParametersTypeData<Klass,Method>
MethodData#outOfBounds(int)::: method data out of bounds:::return->dataSize
MethodData#dataAt(int)::: method data data at:::if->outOfBounds->return->dataLayout->data->getOffset->new->DataLayout->switch->dataLayout->tag->throw->dataSize->dataLayout->tag->new->InternalError->return->new->BitData->return->new->CounterData->return->new->JumpData->return->new->ReceiverTypeData<Klass,Method>->return->new->VirtualCallData<Klass,Method>->return->new->RetData->return->new->BranchData->return->new->MultiBranchData->return->new->CallTypeData<Klass,Method>->return->new->VirtualCallTypeData<Klass,Method>->return->new->ParametersTypeData<Klass,Method>
MethodData#dpToDi(int)::: method data dp to di:::return->data->getOffset
MethodData#firstDi()::: method data first di:::return
MethodData#firstData()::: method data first data:::return->firstDi->dataAt
MethodData#nextData(ProfileData)::: method data next data:::currentIndex->current->dp->dpToDi->nextIndex->current->sizeInBytes->return->dataAt
MethodData#isValid(ProfileData)::: method data is valid:::return
MethodData#limitDataPosition()::: method data limit data position:::return->dataSize->data->getOffset->new->DataLayout
MethodData#extraDataBase()::: method data extra data base:::return->limitDataPosition
MethodData#extraDataLimit()::: method data extra data limit:::return->sizeInBytes->new->DataLayout
MethodData#extraNbCells(DataLayout)::: method data extra nb cells:::nbCells->switch->dataLayout->tag->BitData->staticCellCount->break->SpeculativeTrapData->staticCellCount->break->throw->dataLayout->tag->new->InternalError->return
MethodData#nextExtra(DataLayout)::: method data next extra:::return->dataLayout->dp->DataLayout->extraNbCells->computeSizeInBytes->new->DataLayout
MethodData#printDataOn(PrintStream)::: method data print data on:::if->parametersTypeData->parametersTypeData->printDataOn->data->firstData->for->isValid->nextData->st->println->dp->extraDataBase->end->extraDataLimit->for->nextExtra
MethodData#fetchDataAt(Address, long, long)::: method data fetch data at:::result->new->byteArr->for->i->return
MethodData#orig()::: method data orig:::return->getAddress->fetchDataAt
MethodData#data()::: method data data:::base->getAddress->offset->data->getOffset->elements->dataSize->result->new->longArr->for->i->return
MethodData#mileageOf(Method)::: method data mileage of:::mileage->iic->method->interpreterInvocationCount->if->ic->method->getInvocationCount->bc->method->getBackedgeCount->icval->if->if->bcval->if->if->return
MethodData#currentMileage()::: method data current mileage:::return
MethodData#dumpReplayDataTypeHelper(PrintStream, int, int, int, ProfileData, Klass)::: method data dump replay data type helper:::if->if->else->out->pdata->dp->pdata->cellOffset->dpToDi->k->getName->asString->print->return
MethodData#dumpReplayDataReceiverTypeHelper(PrintStream, int, int, ReceiverTypeData)::: method data dump replay data receiver type helper:::for->i->vdata->rowLimit->return
MethodData#dumpReplayDataCallTypeHelper(PrintStream, int, int, CallTypeDataInterface)::: method data dump replay data call type helper:::if->callTypeData->hasArguments->for->i->callTypeData->numberOfArguments->if->callTypeData->hasReturn->callTypeData->returnTypeIndex->callTypeData->returnType->dumpReplayDataTypeHelper->return
MethodData#dumpReplayDataExtraDataHelper(PrintStream, int, int)::: method data dump replay data extra data helper:::dp->extraDataBase->end->extraDataLimit->for->nextExtra->return
MethodData#dumpReplayData(PrintStream)::: method data dump replay data:::method->getMethod->out->method->nameAsAscii->currentMileage->print->orig->orig->out->print->for->i->data->data->out->print->for->i->count->parameters->parametersTypeData->for->round->for->round->out->println
MethodDataInterface#getKlassAtAddress(Address)::: method data interface get klass at address:::
MethodDataInterface#getMethodAtAddress(Address)::: method data interface get method at address:::
MethodDataInterface#printKlassValueOn(K, PrintStream)::: method data interface print klass value on:::
MethodDataInterface#printMethodValueOn(M, PrintStream)::: method data interface print method value on:::
MultiBranchData#numberOfCases()::: multi branch data number of cases:::alen->arrayLen->return
MultiBranchData#defaultCount()::: multi branch data default count:::return->arrayUintAt
MultiBranchData#defaultDisplacement()::: multi branch data default displacement:::return->arrayIntAt
MultiBranchData#countAt(int)::: multi branch data count at:::return->arrayUintAt
MultiBranchData#displacementAt(int)::: multi branch data displacement at:::return->arrayIntAt
MultiBranchData#defaultCountOffset()::: multi branch data default count offset:::return->arrayElementOffset
MultiBranchData#defaultDisplacementOffset()::: multi branch data default displacement offset:::return->arrayElementOffset
MultiBranchData#caseCountOffset(int)::: multi branch data case count offset:::return->caseArrayOffset->perCaseSize->relativeCountOffset
MultiBranchData#caseArrayOffset()::: multi branch data case array offset:::return->arrayElementOffset
MultiBranchData#perCaseSize()::: multi branch data per case size:::return
MultiBranchData#relativeCountOffset()::: multi branch data relative count offset:::return
MultiBranchData#relativeDisplacementOffset()::: multi branch data relative displacement offset:::return
MultiBranchData#printDataOn(PrintStream)::: multi branch data print data on:::printShared->st->defaultCount->defaultDisplacement->println->cases->numberOfCases->for->i
NamedFieldIdentifier#getName()::: named field identifier get name:::return
NamedFieldIdentifier#printOn(PrintStream)::: named field identifier print on:::tty->getName->print
NamedFieldIdentifier#equals(Object)::: named field identifier equals:::if->return->if->return->return->getName->equals
NamedFieldIdentifier#hashCode()::: named field identifier hash code:::return->name->hashCode
NarrowKlassField#getValue(Address)::: narrow klass field get value:::return->Metadata->addr->getOffset->getCompKlassAddressAt->instantiateWrapperFor
NarrowKlassField#setValue(Oop, long)::: narrow klass field set value:::
NarrowOopField#getValue(Oop)::: narrow oop field get value:::return->obj->getHeap->getValueAsOopHandle->newOop
NarrowOopField#getValueAsOopHandle(Oop):::Debugging support:::return->obj->getHandle->getOffset->getCompOopHandleAt
NarrowOopField#setValue(Oop)::: narrow oop field set value:::
ObjArray#initialize(TypeDataBase)::: obj array initialize:::type->db->lookupType->VM->getVM->getHeapOopSize
ObjArray#isObjArray()::: obj array is obj array:::return
ObjArray#getOopHandleAt(long)::: obj array get oop handle at:::offset->baseOffsetInBytes->if->VM->getVM->isCompressedOopsEnabled->return->getHandle->getCompOopHandleAt->else->return->getHandle->getOopHandleAt
ObjArray#getObjAt(long)::: obj array get obj at:::return->getHeap->getOopHandleAt->newOop
ObjArray#printValueOn(PrintStream)::: obj array print value on:::tty->print
ObjArray#iterateFields(OopVisitor, boolean)::: obj array iterate fields:::super->iterateFields->length->getLength->baseOffset->baseOffsetInBytes->for->index
ObjArrayKlass#initialize(TypeDataBase)::: obj array klass initialize:::type->db->lookupType->type->getAddressField->new->MetadataField->type->getAddressField->new->MetadataField
ObjArrayKlass#getElementKlass()::: obj array klass get element klass:::return->elementKlass->getValue
ObjArrayKlass#getBottomKlass()::: obj array klass get bottom klass:::return->bottomKlass->getValue
ObjArrayKlass#computeModifierFlags()::: obj array klass compute modifier flags:::elementFlags->getElementKlass->computeModifierFlags->arrayFlags->if->else->return
ObjArrayKlass#iterateFields(MetadataVisitor)::: obj array klass iterate fields:::super->iterateFields->visitor->doMetadata->visitor->doMetadata
ObjArrayKlass#arrayKlassImpl(boolean, int)::: obj array klass array klass impl:::if->Assert->getDimension->that->dimension->getDimension->if->return->ak->getHigherDimension->if->if->return->throw->new->RuntimeException->if->return->ak->arrayKlassOrNull->return->ak->arrayKlass
ObjArrayKlass#arrayKlassImpl(boolean)::: obj array klass array klass impl:::return->getDimension->arrayKlassImpl
ObjArrayKlass#printValueOn(PrintStream)::: obj array klass print value on:::tty->print->getElementKlass->printValueOn
ObjectHeap#initialize(TypeDataBase)::: object heap initialize:::universeType->db->lookupType->universeType->getAddressField->getValue->new->TypeArrayKlass->universeType->getAddressField->getValue->new->TypeArrayKlass->universeType->getAddressField->getValue->new->TypeArrayKlass->universeType->getAddressField->getValue->new->TypeArrayKlass->universeType->getAddressField->getValue->new->TypeArrayKlass->universeType->getAddressField->getValue->new->TypeArrayKlass->universeType->getAddressField->getValue->new->TypeArrayKlass->universeType->getAddressField->getValue->new->TypeArrayKlass
ObjectHeap#equal(Oop, Oop):::Comparison operation for oops, either or both of which may be null:::if->return->o1->equals->return
ObjectHeap#getOopSize()::: object heap get oop size:::return
ObjectHeap#getByteSize()::: object heap get byte size:::return
ObjectHeap#getCharSize()::: object heap get char size:::return
ObjectHeap#getBooleanSize()::: object heap get boolean size:::return
ObjectHeap#getIntSize()::: object heap get int size:::return
ObjectHeap#getShortSize()::: object heap get short size:::return
ObjectHeap#getLongSize()::: object heap get long size:::return
ObjectHeap#getFloatSize()::: object heap get float size:::return
ObjectHeap#getDoubleSize()::: object heap get double size:::return
ObjectHeap#getBoolArrayKlassObj()::: object heap get bool array klass obj:::return
ObjectHeap#getByteArrayKlassObj()::: object heap get byte array klass obj:::return
ObjectHeap#getCharArrayKlassObj()::: object heap get char array klass obj:::return
ObjectHeap#getIntArrayKlassObj()::: object heap get int array klass obj:::return
ObjectHeap#getShortArrayKlassObj()::: object heap get short array klass obj:::return
ObjectHeap#getLongArrayKlassObj()::: object heap get long array klass obj:::return
ObjectHeap#getSingleArrayKlassObj()::: object heap get single array klass obj:::return
ObjectHeap#getDoubleArrayKlassObj()::: object heap get double array klass obj:::return
ObjectHeap#typeArrayKlassObj(int):::Takes a BasicType and returns the corresponding primitive array       klass:::if->BasicType->getTBoolean->return->getBoolArrayKlassObj->if->BasicType->getTChar->return->getCharArrayKlassObj->if->BasicType->getTFloat->return->getSingleArrayKlassObj->if->BasicType->getTDouble->return->getDoubleArrayKlassObj->if->BasicType->getTByte->return->getByteArrayKlassObj->if->BasicType->getTShort->return->getShortArrayKlassObj->if->BasicType->getTInt->return->getIntArrayKlassObj->if->BasicType->getTLong->return->getLongArrayKlassObj->throw->new->RuntimeException
ObjectHeap.ObjectFilter#canInclude(Oop)::: object filter can include:::
ObjectHeap#iterate(HeapVisitor):::The base heap iteration mechanism:::collectLiveRegions->iterateLiveRegions
ObjectHeap#iterate(HeapVisitor, ObjectFilter):::iterate objects satisfying a specified ObjectFilter:::collectLiveRegions->iterateLiveRegions
ObjectHeap#iterateObjectsOfKlass(HeapVisitor, Klass, boolean):::iterate objects of given Klass:::if->if->k->isFinal->iterateExact->else->iterateSubtypes->else->if->k->isAbstract->k->isInterface->iterateExact
ObjectHeap#iterateObjectsOfKlass(HeapVisitor, Klass):::iterate objects of given Klass (objects of subtypes included):::iterateObjectsOfKlass
ObjectHeap#iterateRaw(RawHeapVisitor):::This routine can be used to iterate through the heap at an       extremely low level (stepping word-by-word) to provide the       ability to do very low-level debugging:::liveRegions->collectLiveRegions->totalSize->for->i->liveRegions->size->visitor->prologue->for->i->liveRegions->size->visitor->epilogue
ObjectHeap#isValidMethod(Address)::: object heap is valid method:::try->m->Metadata->instantiateWrapperFor->return->catch->return->finally
ObjectHeap#newOop(OopHandle)::: object heap new oop:::if->return->klass->Oop->getKlassForOopHandle->if->if->return->new->TypeArray->if->return->new->ObjArray->if->return->new->Instance->if->println->println->throw->new->UnknownOopException
ObjectHeap#print()::: object heap print:::printer->new->HeapPrinter->iterate
ObjectHeap#iterateExact(HeapVisitor, Klass)::: object heap iterate exact:::collectLiveRegions->new->ObjectFilter->iterateLiveRegions
ObjectHeap#iterateSubtypes(HeapVisitor, Klass)::: object heap iterate subtypes:::collectLiveRegions->new->ObjectFilter->iterateLiveRegions
ObjectHeap#iterateLiveRegions(List, HeapVisitor, ObjectFilter)::: object heap iterate live regions:::totalSize->for->i->liveRegions->size->visitor->prologue->cmsSpaceOld->heap->VM->getVM->getUniverse->heap->if->genHeap->genOld->genHeap->getGen->if->concGen->concGen->cmsSpace->for->i->liveRegions->size->visitor->epilogue
ObjectHeap#addLiveRegions(String, List, List)::: object heap add live regions:::for->itr->input->iterator->itr->hasNext
ObjectHeap.LiveRegionsCollector#doSpace(Space)::: live regions collector do space:::s->toString->s->getLiveRegions->addLiveRegions
ObjectHeap#collectLiveRegions()::: object heap collect live regions:::liveRegions->new->ArrayList->lrc->new->LiveRegionsCollector->heap->VM->getVM->getUniverse->heap->if->genHeap->for->i->genHeap->nGens->else->if->psh->youngGen->psh->youngGen->youngGen->edenSpace->getLiveRegions->addLiveRegions->youngGen->fromSpace->getLiveRegions->addLiveRegions->oldGen->psh->oldGen->oldGen->objectSpace->getLiveRegions->addLiveRegions->else->if->g1h->g1h->heapRegionIterate->else->if->eh->liveRegions->eh->space->top->add->liveRegions->eh->space->bottom->add->else->if->Assert->heap->getClass->getName->that->if->VM->getVM->getUseTLAB->for->thread->VM->getVM->getThreads->first->thread->next->sortLiveRegions->if->Assert->liveRegions->size->that->if->println->for->i->liveRegions->size->return
ObjectHeap#sortLiveRegions(List)::: object heap sort live regions:::Collections->new->Comparator->sort
ObjectHistogram#prologue(long)::: object histogram prologue:::
ObjectHistogram#doObj(Oop)::: object histogram do obj:::klass->obj->getKlass->if->map->containsKey->map->new->ObjectHistogramElement->put->map->get->updateWith->return
ObjectHistogram#epilogue()::: object histogram epilogue:::
ObjectHistogram#getElements():::Call this after the iteration is complete to obtain the       ObjectHistogramElements in descending order of total heap size       consumed in the form of a List<ObjectHistogramElement>.:::list->new->ArrayList->list->map->values->addAll->Collections->new->Comparator->sort->return
ObjectHistogram#print()::: object histogram print:::printOn
ObjectHistogram#printOn(PrintStream)::: object histogram print on:::list->getElements->ObjectHistogramElement->titleOn->iterator->list->listIterator->num->totalCount->totalSize->while->iterator->hasNext->el->iterator->next->el->getCount->el->getSize->tty->print->el->printOn->tty->println
ObjectHistogramElement#updateWith(Oop)::: object histogram element update with:::obj->getObjectSize
ObjectHistogramElement#compare(ObjectHistogramElement)::: object histogram element compare:::return
ObjectHistogramElement#getKlass():::Klass for this ObjectHistogramElement:::return
ObjectHistogramElement#getCount():::Number of instances of klass:::return
ObjectHistogramElement#getSize():::Total size of all these instances:::return
ObjectHistogramElement#getInternalName(Klass)::: object histogram element get internal name:::bos->new->ByteArrayOutputStream->getKlass->new->PrintStream->printValueOn->return->bos->toString
ObjectHistogramElement#getDescription():::Human readable description *:::k->getKlass->if->return->k->getName->asString->replace->else->if->ak->if->tak->return->tak->getElementTypeName->else->if->oak->bottom->oak->getBottomKlass->dim->oak->getDimension->buf->new->StringBuffer->if->buf->getElementTypeName->append->else->if->buf->bottom->getName->asString->replace->append->else->throw->new->RuntimeException->for->i->return->buf->toString->return->getInternalName
ObjectHistogramElement#titleOn(PrintStream)::: object histogram element title on:::tty->println->tty->println->tty->println->tty->println
ObjectHistogramElement#printOn(PrintStream)::: object histogram element print on:::tty->print->tty->getDescription->print->tty->println
Oop#initialize(TypeDataBase)::: oop initialize:::type->db->lookupType->type->getCIntegerField->new->CIntField->type->getAddressField->new->MetadataField->type->getAddressField->new->NarrowKlassField->type->getSize
Oop#getHeap()::: oop get heap:::return
Oop#getHandle():::Should not be used or needed by most clients outside this       package; is needed, however, by sun.jvm.hotspot.utilities.MarkBits.:::return
Oop#getHeaderSize()::: oop get header size:::return
Oop#getMark()::: oop get mark:::return->getHandle->new->Mark
Oop#getKlass()::: oop get klass:::if->VM->getVM->isCompressedKlassPointersEnabled->return->compressedKlass->getHandle->getValue->else->return->klass->getHandle->getValue
Oop#isA(Klass)::: oop is a:::return->getKlass->isSubtypeOf
Oop#getObjectSize()::: oop get object size:::k->getKlass->return->getObjectSize
Oop#isInstance()::: oop is instance:::return
Oop#isInstanceRef()::: oop is instance ref:::return
Oop#isArray()::: oop is array:::return
Oop#isObjArray()::: oop is obj array:::return
Oop#isTypeArray()::: oop is type array:::return
Oop#isThread()::: oop is thread:::return
Oop#alignObjectSize(long)::: oop align object size:::return->VM->getVM->VM->getVM->getMinObjAlignmentInBytes->alignUp
Oop#alignObjectOffset(long)::: oop align object offset:::return->VM->getVM->VM->getVM->getBytesPerLong->alignUp
Oop#equals(Object)::: oop equals:::if->return->getHandle->getHandle->equals->return
Oop#hashCode()::: oop hash code:::return->getHandle->hashCode
Oop#identityHash():::Identity hash in the target VM:::mark->getMark->if->mark->isUnlocked->mark->hasNoHash->return->mark->hash->else->if->mark->isMarked->return->mark->hash->else->return->slowIdentityHash
Oop#slowIdentityHash()::: oop slow identity hash:::return->VM->getVM->getObjectSynchronizer->identityHashValueFor
Oop#iterate(OopVisitor, boolean)::: oop iterate:::visitor->setObj->visitor->prologue->iterateFields->visitor->epilogue
Oop#iterateFields(OopVisitor, boolean)::: oop iterate fields:::if->visitor->doCInt->if->VM->getVM->isCompressedKlassPointersEnabled->visitor->doMetadata->else->visitor->doMetadata
Oop#print()::: oop print:::printOn
Oop#printValue()::: oop print value:::printValueOn
Oop#printRaw()::: oop print raw:::printRawOn
Oop#printOopValueOn(Oop, PrintStream)::: oop print oop value on:::if->tty->print->else->obj->printValueOn->tty->VM->getVM->getUniverse->heap->obj->getHandle->oopAddressDescription->print
Oop#printOopAddressOn(Oop, PrintStream)::: oop print oop address on:::if->tty->print->else->tty->obj->getHandle->toString->print
Oop#printOn(PrintStream)::: oop print on:::printer->new->OopPrinter->iterate
Oop#printValueOn(PrintStream)::: oop print value on:::try->tty->getKlass->getName->asString->print->catch->tty->print->finally
Oop#printRawOn(PrintStream)::: oop print raw on:::tty->print->printValueOn->tty->println->size->getObjectSize->for->i
Oop#verify()::: oop verify:::return
Oop#getKlassForOopHandle(OopHandle)::: oop get klass for oop handle:::if->return->if->VM->getVM->isCompressedKlassPointersEnabled->return->Metadata->handle->compressedKlass->getOffset->getCompKlassAddressAt->instantiateWrapperFor->else->return->Metadata->handle->klass->getOffset->getAddressAt->instantiateWrapperFor
OopField#getValue(Oop)::: oop field get value:::if->isVMField->obj->isInstance->obj->isArray->throw->new->InternalError->return->obj->getHeap->getValueAsOopHandle->newOop
OopField#getValueAsOopHandle(Oop):::Debugging support:::if->isVMField->obj->isInstance->obj->isArray->throw->obj->toString->new->InternalError->return->VM->getVM->getUniverse->heap->obj->getHandle->getOffset->oop_load_at
OopField#getValue(VMObject)::: oop field get value:::return->VM->getVM->getObjectHeap->getValueAsOopHandle->newOop
OopField#getValueAsOopHandle(VMObject):::Debugging support:::return->obj->getAddress->getOffset->getOopHandleAt
OopField#setValue(Oop)::: oop field set value:::
OopPrinter#prologue()::: oop printer prologue:::Oop->getObj->printOopValueOn->tty->getObj->getObjectSize->println
OopPrinter#epilogue()::: oop printer epilogue:::tty->println
OopPrinter#setObj(Oop)::: oop printer set obj:::
OopPrinter#getObj()::: oop printer get obj:::return
OopPrinter#printField(Field)::: oop printer print field:::field->printOn
OopPrinter#doMetadata(MetadataField, boolean)::: oop printer do metadata:::printField->field->getObj->getValue->printValueOn->tty->println
OopPrinter#doOop(OopField, boolean)::: oop printer do oop:::printField->Oop->field->getObj->getValue->printOopValueOn->tty->println
OopPrinter#doOop(NarrowOopField, boolean)::: oop printer do oop:::printField->Oop->field->getObj->getValue->printOopValueOn->tty->println
OopPrinter#doChar(CharField, boolean)::: oop printer do char:::printField->c->field->getObj->getValue->if->Character->isLetterOrDigit->tty->println->else->tty->println
OopPrinter#doByte(ByteField, boolean)::: oop printer do byte:::printField->tty->field->getObj->getValue->println
OopPrinter#doBoolean(BooleanField, boolean)::: oop printer do boolean:::printField->tty->field->getObj->getValue->println
OopPrinter#doShort(ShortField, boolean)::: oop printer do short:::printField->tty->field->getObj->getValue->println
OopPrinter#doInt(IntField, boolean)::: oop printer do int:::printField->tty->field->getObj->getValue->println
OopPrinter#doLong(LongField, boolean)::: oop printer do long:::printField->tty->field->getObj->getValue->println
OopPrinter#doFloat(FloatField, boolean)::: oop printer do float:::printField->tty->field->getObj->getValue->println
OopPrinter#doDouble(DoubleField, boolean)::: oop printer do double:::printField->tty->field->getObj->getValue->println
OopPrinter#doCInt(CIntField, boolean)::: oop printer do int:::printField->tty->field->getObj->getValue->println
OopUtilities#initialize(TypeDataBase)::: oop utilities initialize:::
OopUtilities#charArrayToString(TypeArray)::: oop utilities char array to string:::if->return->length->charArray->getLength->buf->new->StringBuffer->for->i->return->buf->toString
OopUtilities#byteArrayToString(TypeArray, byte)::: oop utilities byte array to string:::if->return->length->byteArray->getLength->buf->new->StringBuffer->if->for->i->else->for->i->return->buf->toString
OopUtilities#escapeString(String)::: oop utilities escape string:::sb->for->index->s->length->if->return->sb->toString->return
OopUtilities#stringOopToString(Oop)::: oop utilities string oop to string:::k->stringOop->getKlass->k->findField->k->findField->if->Assert->that->Assert->that->return->valueField->getValue->coderField->getValue->byteArrayToString
OopUtilities#stringOopToEscapedString(Oop)::: oop utilities string oop to escaped string:::return->stringOopToString->escapeString
OopUtilities#initThreadGroupFields()::: oop utilities init thread group fields:::if->sysDict->VM->getVM->getSystemDictionary->k->sysDict->getThreadGroupKlass->k->findField->k->findField->k->findField->k->findField->k->findField->k->findField->if->Assert->that
OopUtilities#threadGroupOopGetParent(Oop)::: oop utilities thread group oop get parent:::initThreadGroupFields->return->threadGroupParentField->getValue
OopUtilities#threadGroupOopGetName(Oop)::: oop utilities thread group oop get name:::initThreadGroupFields->return->threadGroupNameField->getValue->stringOopToString
OopUtilities#threadGroupOopGetThreads(Oop)::: oop utilities thread group oop get threads:::initThreadGroupFields->nthreads->threadGroupNThreadsField->getValue->result->new->OopArr->threads->threadGroupThreadsField->getValue->for->i->return
OopUtilities#threadGroupOopGetGroups(Oop)::: oop utilities thread group oop get groups:::initThreadGroupFields->ngroups->threadGroupNGroupsField->getValue->result->new->OopArr->groups->threadGroupGroupsField->getValue->for->i->return
OopUtilities#initThreadFields()::: oop utilities init thread fields:::if->sysDict->VM->getVM->getSystemDictionary->k->sysDict->getThreadKlass->k->findField->k->findField->k->findField->k->findField->k->findField->k->findField->k->findField->k->findField->db->VM->getVM->getTypeDataBase->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->db->lookupIntConstant->intValue->if->Assert->that
OopUtilities#threadOopGetThreadGroup(Oop)::: oop utilities thread oop get thread group:::initThreadFields->return->threadGroupField->getValue
OopUtilities#threadOopGetName(Oop)::: oop utilities thread oop get name:::initThreadFields->return->threadNameField->getValue->stringOopToString
OopUtilities#threadOopGetJavaThread(Oop):::May return null if, e.g., thread was not started:::initThreadFields->addr->threadOop->getHandle->threadEETopField->getOffset->getAddressAt->if->return->return->VM->getVM->getThreads->createJavaThreadWrapper
OopUtilities#threadOopGetTID(Oop)::: oop utilities thread oop get d:::initThreadFields->if->return->threadTIDField->getValue->else->return
OopUtilities#threadOopGetThreadStatus(Oop):::returns value of java.lang.Thread.threadStatus field:::initThreadFields->if->return->threadStatusField->getValue->else->thr->threadOopGetJavaThread->if->return->else->return
OopUtilities#threadOopGetParkBlocker(Oop):::returns value of java.lang.Thread.parkBlocker field:::initThreadFields->if->return->threadParkBlockerField->getValue->return
OopUtilities#initAbsOwnSyncFields()::: oop utilities init abs own sync fields:::if->sysDict->VM->getVM->getSystemDictionary->k->sysDict->getAbstractOwnableSynchronizerKlass->k->findField
OopUtilities#abstractOwnableSynchronizerGetOwnerThread(Oop)::: oop utilities abstract ownable synchronizer get owner thread:::initAbsOwnSyncFields->if->return->else->return->absOwnSyncOwnerThreadField->getValue
OopUtilities#threadOopGetPriority(Oop)::: oop utilities thread oop get priority:::initThreadFields->if->return->threadPriorityField->getValue->else->return
OopUtilities#threadOopGetDaemon(Oop)::: oop utilities thread oop get daemon:::initThreadFields->if->return->threadDaemonField->getValue->else->return
OopUtilities#threadOopGetThreadStatusName(Oop)::: oop utilities thread oop get thread status name:::status->OopUtilities->threadOopGetThreadStatus->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->else->if->return->return
OopVisitor#prologue()::: oop visitor prologue:::
OopVisitor#epilogue()::: oop visitor epilogue:::
OopVisitor#setObj(Oop)::: oop visitor set obj:::
OopVisitor#getObj()::: oop visitor get obj:::
ParametersTypeData#stackSlotLocalOffset(int)::: parameters type data stack slot local offset:::return->TypeStackSlotEntries->stackSlotLocalOffset
ParametersTypeData#typeLocalOffset(int)::: parameters type data type local offset:::return->TypeStackSlotEntries->typeLocalOffset
ParametersTypeData#numberOfParameters()::: parameters type data number of parameters:::return->arrayLen->TypeStackSlotEntries->perArgCount
ParametersTypeData#stackSlot(int)::: parameters type data stack slot:::return->parameters->stackSlot
ParametersTypeData#type(int)::: parameters type data type:::return->parameters->type
ParametersTypeData#typeIndex(int)::: parameters type data type index:::return->typeLocalOffset
ParametersTypeData#printDataOn(PrintStream)::: parameters type data print data on:::st->print->parameters->printDataOn
ProfileData#data()::: profile data data:::return
ProfileData#cellCount()::: profile data cell count:::
ProfileData#sizeInBytes()::: profile data size in bytes:::return->DataLayout->cellCount->computeSizeInBytes
ProfileData#dp()::: profile data dp:::return->data->dp
ProfileData#intptrAt(int)::: profile data intptr at:::return->data->cellAt
ProfileData#intAt(int)::: profile data int at:::return->intptrAt
ProfileData#uintAt(int)::: profile data uint at:::return->intptrAt
ProfileData#addressAt(int)::: profile data address at:::return->data->addressAt
ProfileData#flagAt(int)::: profile data flag at:::return->data->flagAt
ProfileData#cellOffset(int)::: profile data cell offset:::return->DataLayout->cellOffset
ProfileData#bci()::: profile data bci:::return->data->bci
ProfileData#trapState()::: profile data trap state:::return->data->trapState
ProfileData#printDataOn(PrintStream)::: profile data print data on:::
ProfileData#tab(PrintStream)::: profile data tab:::st->print
ProfileData#printShared(PrintStream, String)::: profile data print shared:::st->bci->print->st->print->tab->trap->trapState->if->st->MethodData->formatTrapState->print->flags->data->flags->if->st->print
ProfileData#toString()::: profile data to string:::baos->new->ByteArrayOutputStream->ps->new->PrintStream->try->printDataOn->catch->finally->ps->close->return->baos->toString
RawHeapVisitor#prologue(long):::This is called at the beginning of the iteration to provide the       RawHeapVisitor with information about the amount of memory which       will be traversed (for example, for displaying a progress bar):::
RawHeapVisitor#epilogue():::This is called after the traversal is complete:::
ReceiverTypeData#isReceivertypedata()::: receiver type data is receivertypedata:::return
ReceiverTypeData#staticCellCount()::: receiver type data static cell count:::cellCount->if->return
ReceiverTypeData#cellCount()::: receiver type data cell count:::return->staticCellCount
ReceiverTypeData#rowLimit()::: receiver type data row limit:::return
ReceiverTypeData#receiverCellIndex(int)::: receiver type data receiver cell index:::return
ReceiverTypeData#receiverCountCellIndex(int)::: receiver type data receiver count cell index:::return
ReceiverTypeData#receiverUnchecked(int)::: receiver type data receiver unchecked:::recv->receiverCellIndex->addressAt->return->methodData->getKlassAtAddress
ReceiverTypeData#receiver(int)::: receiver type data receiver:::recv->receiverUnchecked->return
ReceiverTypeData#receiverCount(int)::: receiver type data receiver count:::return->receiverCountCellIndex->uintAt
ReceiverTypeData#receiverOffset(int)::: receiver type data receiver offset:::return->receiverCellIndex->cellOffset
ReceiverTypeData#receiverCountOffset(int)::: receiver type data receiver count offset:::return->receiverCountCellIndex->cellOffset
ReceiverTypeData#receiverTypeDataSize()::: receiver type data receiver type data size:::return->staticCellCount->cellOffset
ReceiverTypeData#printReceiverDataOn(PrintStream)::: receiver type data print receiver data on:::row->entries->for->rowLimit->st->count->println->for->rowLimit
ReceiverTypeData#printDataOn(PrintStream)::: receiver type data print data on:::printShared->printReceiverDataOn
RetData#staticCellCount()::: ret data static cell count:::return
RetData#cellCount()::: ret data cell count:::return->staticCellCount
RetData#rowLimit()::: ret data row limit:::return
RetData#bciCellIndex(int)::: ret data bci cell index:::return
RetData#bciCountCellIndex(int)::: ret data bci count cell index:::return
RetData#bciDisplacementCellIndex(int)::: ret data bci displacement cell index:::return
RetData#bci(int)::: ret data bci:::return->bciCellIndex->intAt
RetData#bciCount(int)::: ret data bci count:::return->bciCountCellIndex->uintAt
RetData#bciDisplacement(int)::: ret data bci displacement:::return->bciDisplacementCellIndex->intAt
RetData#bciOffset(int)::: ret data bci offset:::return->bciCellIndex->cellOffset
RetData#bciCountOffset(int)::: ret data bci count offset:::return->bciCountCellIndex->cellOffset
RetData#bciDisplacementOffset(int)::: ret data bci displacement offset:::return->bciDisplacementCellIndex->cellOffset
RetData#printDataOn(PrintStream)::: ret data print data on:::printShared->row->entries->for->rowLimit->st->count->println->for->rowLimit
ReturnTypeEntry#type()::: return type entry type:::return->validKlass
ReturnTypeEntry#staticCellCount()::: return type entry static cell count:::return
ReturnTypeEntry#typeIndex()::: return type entry type index:::return
ReturnTypeEntry#printDataOn(PrintStream)::: return type entry print data on:::pd->tab->printKlass->st->println
ShortField#getValue(Oop)::: short field get value:::return->obj->getHandle->getOffset->getJShortAt
ShortField#getValue(VMObject)::: short field get value:::return->obj->getAddress->getOffset->getJShortAt
ShortField#setValue(Oop, short)::: short field set value:::
SpeculativeTrapData#staticCellCount()::: speculative trap data static cell count:::return
SpeculativeTrapData#cellCount()::: speculative trap data cell count:::return->staticCellCount
SpeculativeTrapData#method()::: speculative trap data method:::return->methodData->addressAt->getMethodAtAddress
SpeculativeTrapData#methodIndex()::: speculative trap data method index:::return
SpeculativeTrapData#printDataOn(PrintStream)::: speculative trap data print data on:::printShared->tab->methodData->method->printMethodValueOn->st->println
Symbol#initialize(TypeDataBase)::: symbol initialize:::type->db->lookupType->type->getCIntegerField->type->getField->getOffset->type->getCIntegerField
Symbol#create(Address)::: symbol create:::if->return->return->new->Symbol
Symbol#isSymbol()::: symbol is symbol:::return
Symbol#getLength()::: symbol get length:::return->length->getValue
Symbol#getByteAt(long)::: symbol get byte at:::return->addr->getJByteAt
Symbol#identityHash()::: symbol identity hash:::addr_value->getAddress->asLongValue->addr_bits->VM->getVM->getLogMinObjAlignmentInBytes->length->getLength->byte0->getByteAt->byte1->getByteAt->id_hash->idHash->getValue->return
Symbol#equals(byte[])::: symbol equals:::l->getLength->if->return->while->if->getByteAt->return->if->Assert->that->return
Symbol#asByteArray()::: symbol as byte array:::length->getLength->result->new->byteArr->for->index->return
Symbol#asString()::: symbol as string:::try->return->asByteArray->readModifiedUTF8->catch->println->e->printStackTrace->return->finally
Symbol#startsWith(String)::: symbol starts with:::return->asString->startsWith
Symbol#printValueOn(PrintStream)::: symbol print value on:::tty->asString->print
Symbol#fastCompare(Symbol):::Note: this comparison is used for vtable sorting only; it       doesn't matter what order it defines, as long as it is a total,       time-invariant order Since Symbol* are in C_HEAP, their       relative order in memory never changes, so use address       comparison for speed.:::return->addr->minus
Symbol#readModifiedUTF8(byte[])::: symbol read modified f8:::len->tmp->new->byteArr->System->arraycopy->dis->new->ByteArrayInputStream->new->DataInputStream->return->dis->readUTF
TypeArray#initialize(TypeDataBase)::: type array initialize:::type->db->lookupType
TypeArray#isTypeArray()::: type array is type array:::return
TypeArray#getByteAt(long)::: type array get byte at:::if->getLength->throw->getLength->new->ArrayIndexOutOfBoundsException->offset->baseOffsetInBytes->getHeap->getByteSize->return->getHandle->getJByteAt
TypeArray#getBooleanAt(long)::: type array get boolean at:::offset->baseOffsetInBytes->getHeap->getBooleanSize->return->getHandle->getJBooleanAt
TypeArray#getCharAt(long)::: type array get char at:::offset->baseOffsetInBytes->getHeap->getCharSize->return->getHandle->getJCharAt
TypeArray#getIntAt(long)::: type array get int at:::offset->baseOffsetInBytes->getHeap->getIntSize->return->getHandle->getJIntAt
TypeArray#getShortAt(long)::: type array get short at:::offset->baseOffsetInBytes->getHeap->getShortSize->return->getHandle->getJShortAt
TypeArray#getLongAt(long)::: type array get long at:::offset->baseOffsetInBytes->getHeap->getLongSize->return->getHandle->getJLongAt
TypeArray#getFloatAt(long)::: type array get float at:::offset->baseOffsetInBytes->getHeap->getFloatSize->return->getHandle->getJFloatAt
TypeArray#getDoubleAt(long)::: type array get double at:::offset->baseOffsetInBytes->getHeap->getDoubleSize->return->getHandle->getJDoubleAt
TypeArray#printValueOn(PrintStream)::: type array print value on:::klass->getKlass->tty->klass->getTypeName->print
TypeArray#iterateFields(OopVisitor, boolean)::: type array iterate fields:::super->iterateFields->klass->getKlass->length->getLength->type->klass->getElementType->for->index
TypeArrayKlass#initialize(TypeDataBase)::: type array klass initialize:::t->db->lookupType->t->getJIntField->new->IntField
TypeArrayKlass#getMaxLength()::: type array klass get max length:::return->maxLength->getValue
TypeArrayKlass#getTypeName()::: type array klass get type name:::switch->getElementType->return->return->return->return->return->return->return->return->return
TypeArrayKlass#getElementTypeName()::: type array klass get element type name:::switch->getElementType->return->return->return->return->return->return->return->return->throw->new->RuntimeException
TypeArrayKlass#printValueOn(PrintStream)::: type array klass print value on:::tty->getTypeName->print
TypeArrayKlass#iterateFields(MetadataVisitor)::: type array klass iterate fields:::super->iterateFields->visitor->doInt
TypeArrayKlass#arrayKlassImpl(boolean, int)::: type array klass array klass impl:::dimension->getDimension->if->Assert->that->if->return->ak->getHigherDimension->if->if->return->throw->new->RuntimeException->if->return->ak->arrayKlassOrNull->return->ak->arrayKlass
TypeArrayKlass#arrayKlassImpl(boolean)::: type array klass array klass impl:::return->getDimension->arrayKlassImpl
TypeEntries#wasNullSeen(int)::: type entries was null seen:::v->pd->intptrAt->return
TypeEntries#isTypeUnknown(int)::: type entries is type unknown:::v->pd->intptrAt->return
TypeEntries#isTypeNone(int)::: type entries is type none:::v->pd->intptrAt->return
TypeEntries#validKlass(int)::: type entries valid klass:::if->isTypeNone->isTypeUnknown->return->methodData->pd->addressAt->andWithMask->getKlassAtAddress->else->return
TypeEntries#printKlass(PrintStream, int)::: type entries print klass:::if->isTypeNone->st->print->else->if->isTypeUnknown->st->print->else->methodData->validKlass->printKlassValueOn->if->wasNullSeen->st->print
TypeEntries#intptrAt(int)::: type entries intptr at:::return->pd->intptrAt
TypeEntriesAtCall#stackSlotLocalOffset(int)::: type entries at call stack slot local offset:::return->headerCellCount->TypeStackSlotEntries->stackSlotLocalOffset
TypeEntriesAtCall#argumentTypeLocalOffset(int)::: type entries at call argument type local offset:::return->headerCellCount->TypeStackSlotEntries->typeLocalOffset
TypeEntriesAtCall#headerCellCount()::: type entries at call header cell count:::return
TypeEntriesAtCall#cellCountLocalOffset()::: type entries at call cell count local offset:::return
TypeStackSlotEntries#stackSlotOffset(int)::: type stack slot entries stack slot offset:::return->stackSlotLocalOffset
TypeStackSlotEntries#typeOffsetInCells(int)::: type stack slot entries type offset in cells:::return->typeLocalOffset
TypeStackSlotEntries#stackSlotLocalOffset(int)::: type stack slot entries stack slot local offset:::return
TypeStackSlotEntries#typeLocalOffset(int)::: type stack slot entries type local offset:::return
TypeStackSlotEntries#stackSlot(int)::: type stack slot entries stack slot:::return->pd->stackSlotOffset->uintAt
TypeStackSlotEntries#type(int)::: type stack slot entries type:::return->typeOffsetInCells->validKlass
TypeStackSlotEntries#perArgCount()::: type stack slot entries per arg count:::return
TypeStackSlotEntries#typeIndex(int)::: type stack slot entries type index:::return->typeOffsetInCells
TypeStackSlotEntries#printDataOn(PrintStream)::: type stack slot entries print data on:::for->i
VirtualCallData#staticCellCount()::: virtual call data static cell count:::cellCount->ReceiverTypeData->staticCellCount->if->return
VirtualCallData#cellCount()::: virtual call data cell count:::return->staticCellCount
VirtualCallData#virtualCallDataSize()::: virtual call data virtual call data size:::return->staticCellCount->cellOffset
VirtualCallData#printDataOn(PrintStream)::: virtual call data print data on:::printShared->printReceiverDataOn
VirtualCallTypeData#cellCountGlobalOffset()::: virtual call type data cell count global offset:::return->VirtualCallData->staticCellCount->TypeEntriesAtCall->cellCountLocalOffset
VirtualCallTypeData#cellCountNoHeader()::: virtual call type data cell count no header:::return->cellCountGlobalOffset->uintAt
VirtualCallTypeData#staticCellCount()::: virtual call type data static cell count:::return
VirtualCallTypeData#cellCount()::: virtual call type data cell count:::return->VirtualCallData->staticCellCount->TypeEntriesAtCall->headerCellCount->cellCountGlobalOffset->intAt
VirtualCallTypeData#numberOfArguments()::: virtual call type data number of arguments:::return->cellCountNoHeader->TypeStackSlotEntries->perArgCount
VirtualCallTypeData#hasArguments()::: virtual call type data has arguments:::return->cellCountNoHeader->TypeStackSlotEntries->perArgCount
VirtualCallTypeData#argumentType(int)::: virtual call type data argument type:::return->args->type
VirtualCallTypeData#hasReturn()::: virtual call type data has return:::return->cellCountNoHeader->TypeStackSlotEntries->perArgCount
VirtualCallTypeData#returnType()::: virtual call type data return type:::return->ret->type
VirtualCallTypeData#argumentTypeIndex(int)::: virtual call type data argument type index:::return->args->typeIndex
VirtualCallTypeData#returnTypeIndex()::: virtual call type data return type index:::return->ret->typeIndex
VirtualCallTypeData#printDataOn(PrintStream)::: virtual call type data print data on:::super->printDataOn->if->hasArguments->tab->st->print->args->printDataOn->if->hasReturn->tab->st->print->ret->printDataOn

sun.jvm.hotspot.oops.AccessFlags#isPublic()->boolean::: access flags is public
sun.jvm.hotspot.oops.AccessFlags#isPrivate()->boolean::: access flags is private
sun.jvm.hotspot.oops.AccessFlags#isProtected()->boolean::: access flags is protected
sun.jvm.hotspot.oops.AccessFlags#isStatic()->boolean::: access flags is static
sun.jvm.hotspot.oops.AccessFlags#isFinal()->boolean::: access flags is final
sun.jvm.hotspot.oops.AccessFlags#isSynchronized()->boolean::: access flags is synchronized
sun.jvm.hotspot.oops.AccessFlags#isSuper()->boolean::: access flags is super
sun.jvm.hotspot.oops.AccessFlags#isVolatile()->boolean::: access flags is volatile
sun.jvm.hotspot.oops.AccessFlags#isBridge()->boolean::: access flags is bridge
sun.jvm.hotspot.oops.AccessFlags#isTransient()->boolean::: access flags is transient
sun.jvm.hotspot.oops.AccessFlags#isVarArgs()->boolean::: access flags is var args
sun.jvm.hotspot.oops.AccessFlags#isNative()->boolean::: access flags is native
sun.jvm.hotspot.oops.AccessFlags#isEnum()->boolean::: access flags is enum
sun.jvm.hotspot.oops.AccessFlags#isAnnotation()->boolean::: access flags is annotation
sun.jvm.hotspot.oops.AccessFlags#isInterface()->boolean::: access flags is interface
sun.jvm.hotspot.oops.AccessFlags#isAbstract()->boolean::: access flags is abstract
sun.jvm.hotspot.oops.AccessFlags#isStrict()->boolean::: access flags is strict
sun.jvm.hotspot.oops.AccessFlags#isSynthetic()->boolean::: access flags is synthetic
sun.jvm.hotspot.oops.AccessFlags#getValue()->long::: access flags get value
sun.jvm.hotspot.oops.AccessFlags#isMonitorMatching()->boolean::: access flags is monitor matching
sun.jvm.hotspot.oops.AccessFlags#hasMonitorBytecodes()->boolean::: access flags has monitor bytecodes
sun.jvm.hotspot.oops.AccessFlags#hasLoops()->boolean::: access flags has loops
sun.jvm.hotspot.oops.AccessFlags#loopsFlagInit()->boolean::: access flags loops flag init
sun.jvm.hotspot.oops.AccessFlags#queuedForCompilation()->boolean::: access flags queued for compilation
sun.jvm.hotspot.oops.AccessFlags#isNotOsrCompilable()->boolean::: access flags is not osr compilable
sun.jvm.hotspot.oops.AccessFlags#hasLineNumberTable()->boolean::: access flags has line number table
sun.jvm.hotspot.oops.AccessFlags#hasCheckedExceptions()->boolean::: access flags has checked exceptions
sun.jvm.hotspot.oops.AccessFlags#hasJsrs()->boolean::: access flags has jsrs
sun.jvm.hotspot.oops.AccessFlags#isObsolete()->boolean::: access flags is obsolete
sun.jvm.hotspot.oops.AccessFlags#hasMirandaMethods()->boolean::: access flags has miranda methods
sun.jvm.hotspot.oops.AccessFlags#hasVanillaConstructor()->boolean::: access flags has vanilla constructor
sun.jvm.hotspot.oops.AccessFlags#hasFinalizer()->boolean::: access flags has finalizer
sun.jvm.hotspot.oops.AccessFlags#isCloneable()->boolean::: access flags is cloneable
sun.jvm.hotspot.oops.AccessFlags#hasLocalVariableTable()->boolean::: access flags has local variable table
sun.jvm.hotspot.oops.AccessFlags#fieldAccessWatched()->boolean::: access flags field access watched
sun.jvm.hotspot.oops.AccessFlags#fieldModificationWatched()->boolean::: access flags field modification watched
sun.jvm.hotspot.oops.AccessFlags#fieldHasGenericSignature()->boolean::: access flags field has generic signature
sun.jvm.hotspot.oops.AccessFlags#printOn(PrintStream)->void::: access flags print on
sun.jvm.hotspot.oops.AccessFlags#getStandardFlags()->int::: access flags get standard flags
sun.jvm.hotspot.oops.ArgInfoData#numberOfArgs()->int::: arg info data number of args
sun.jvm.hotspot.oops.ArgInfoData#argModified(int)->int::: arg info data arg modified
sun.jvm.hotspot.oops.ArgInfoData#printDataOn(PrintStream)->void::: arg info data print data on
sun.jvm.hotspot.oops.Array#getLength()->long::: array get length
sun.jvm.hotspot.oops.Array#getObjectSize()->long::: array get object size
sun.jvm.hotspot.oops.Array#baseOffsetInBytes(BasicType)->long::: array base offset in bytes
sun.jvm.hotspot.oops.Array#isArray()->boolean::: array is array
sun.jvm.hotspot.oops.Array#iterateFields(OopVisitor, boolean)->void::: array iterate fields
sun.jvm.hotspot.oops.ArrayData#arrayUintAt(int)->int::: array data array uint at
sun.jvm.hotspot.oops.ArrayData#arrayIntAt(int)->int::: array data array int at
sun.jvm.hotspot.oops.ArrayData#arrayElementOffset(int)->int::: array data array element offset
sun.jvm.hotspot.oops.ArrayData#staticCellCount()->int::: array data static cell count
sun.jvm.hotspot.oops.ArrayData#arrayLen()->int::: array data array len
sun.jvm.hotspot.oops.ArrayData#cellCount()->int::: array data cell count
sun.jvm.hotspot.oops.ArrayData#arrayLenOffset()->int::: array data array len offset
sun.jvm.hotspot.oops.ArrayData#arrayStartOffset()->int::: array data array start offset
sun.jvm.hotspot.oops.ArrayKlass#isArrayKlass()->boolean::: array klass is array klass
sun.jvm.hotspot.oops.ArrayKlass#getJavaSuper()->Klass::: array klass get java super
sun.jvm.hotspot.oops.ArrayKlass#getDimension()->long::: array klass get dimension
sun.jvm.hotspot.oops.ArrayKlass#getHigherDimension()->Klass::: array klass get higher dimension
sun.jvm.hotspot.oops.ArrayKlass#getLowerDimension()->Klass::: array klass get lower dimension
sun.jvm.hotspot.oops.ArrayKlass#getClassStatus()->int::: array klass get class status
sun.jvm.hotspot.oops.ArrayKlass#computeModifierFlags()->long::: array klass compute modifier flags
sun.jvm.hotspot.oops.ArrayKlass#getArrayHeaderInBytes()->long::: array klass get array header in bytes
sun.jvm.hotspot.oops.ArrayKlass#getLog2ElementSize()->int::: array klass get log2 element size
sun.jvm.hotspot.oops.ArrayKlass#getElementType()->int::: array klass get element type
sun.jvm.hotspot.oops.ArrayKlass#computeSubtypeOf(Klass)->boolean::: array klass compute subtype of
sun.jvm.hotspot.oops.ArrayKlass#printValueOn(PrintStream)->void::: array klass print value on
sun.jvm.hotspot.oops.ArrayKlass#iterateFields(MetadataVisitor)->void::: array klass iterate fields
sun.jvm.hotspot.oops.BitData#staticCellCount()->int::: bit data static cell count
sun.jvm.hotspot.oops.BitData#cellCount()->int::: bit data cell count
sun.jvm.hotspot.oops.BitData#nullSeen()->boolean::: bit data null seen
sun.jvm.hotspot.oops.BitData#bitDataSize()->int::: bit data bit data size
sun.jvm.hotspot.oops.BitData#printDataOn(PrintStream)->void::: bit data print data on
sun.jvm.hotspot.oops.BooleanField#getValue(Oop)->boolean::: boolean field get value
sun.jvm.hotspot.oops.BooleanField#getValue(VMObject)->boolean::: boolean field get value
sun.jvm.hotspot.oops.BooleanField#setValue(Oop, boolean)->void::: boolean field set value
sun.jvm.hotspot.oops.BranchData#staticCellCount()->int::: branch data static cell count
sun.jvm.hotspot.oops.BranchData#cellCount()->int::: branch data cell count
sun.jvm.hotspot.oops.BranchData#notTaken()->int::: branch data not taken
sun.jvm.hotspot.oops.BranchData#notTakenOffset()->int::: branch data not taken offset
sun.jvm.hotspot.oops.BranchData#branchDataSize()->int::: branch data branch data size
sun.jvm.hotspot.oops.BranchData#printDataOn(PrintStream)->void::: branch data print data on
sun.jvm.hotspot.oops.BreakpointInfo#getOrigBytecode()->int::: breakpoint info get orig bytecode
sun.jvm.hotspot.oops.BreakpointInfo#getBCI()->int::: breakpoint info get i
sun.jvm.hotspot.oops.BreakpointInfo#getNameIndex()->long::: breakpoint info get name index
sun.jvm.hotspot.oops.BreakpointInfo#getSignatureIndex()->long::: breakpoint info get signature index
sun.jvm.hotspot.oops.BreakpointInfo#getNext()->BreakpointInfo::: breakpoint info get next
sun.jvm.hotspot.oops.BreakpointInfo#match(Method, int)->boolean::: breakpoint info match
sun.jvm.hotspot.oops.BreakpointInfo#match(Method)->boolean::: breakpoint info match
sun.jvm.hotspot.oops.ByteField#getValue(Oop)->byte::: byte field get value
sun.jvm.hotspot.oops.ByteField#getValue(VMObject)->byte::: byte field get value
sun.jvm.hotspot.oops.ByteField#setValue(Oop, char)->void::: byte field set value
sun.jvm.hotspot.oops.CallTypeData#cellCountGlobalOffset()->int::: call type data cell count global offset
sun.jvm.hotspot.oops.CallTypeData#cellCountNoHeader()->int::: call type data cell count no header
sun.jvm.hotspot.oops.CallTypeData#staticCellCount()->int::: call type data static cell count
sun.jvm.hotspot.oops.CallTypeData#cellCount()->int::: call type data cell count
sun.jvm.hotspot.oops.CallTypeData#numberOfArguments()->int::: call type data number of arguments
sun.jvm.hotspot.oops.CallTypeData#hasArguments()->boolean::: call type data has arguments
sun.jvm.hotspot.oops.CallTypeData#argumentType(int)->K::: call type data argument type
sun.jvm.hotspot.oops.CallTypeData#hasReturn()->boolean::: call type data has return
sun.jvm.hotspot.oops.CallTypeData#returnType()->K::: call type data return type
sun.jvm.hotspot.oops.CallTypeData#argumentTypeIndex(int)->int::: call type data argument type index
sun.jvm.hotspot.oops.CallTypeData#returnTypeIndex()->int::: call type data return type index
sun.jvm.hotspot.oops.CallTypeData#printDataOn(PrintStream)->void::: call type data print data on
sun.jvm.hotspot.oops.CallTypeDataInterface#numberOfArguments()->int::: call type data interface number of arguments
sun.jvm.hotspot.oops.CallTypeDataInterface#hasArguments()->boolean::: call type data interface has arguments
sun.jvm.hotspot.oops.CallTypeDataInterface#argumentType(int)->K::: call type data interface argument type
sun.jvm.hotspot.oops.CallTypeDataInterface#hasReturn()->boolean::: call type data interface has return
sun.jvm.hotspot.oops.CallTypeDataInterface#returnType()->K::: call type data interface return type
sun.jvm.hotspot.oops.CallTypeDataInterface#argumentTypeIndex(int)->int::: call type data interface argument type index
sun.jvm.hotspot.oops.CallTypeDataInterface#returnTypeIndex()->int::: call type data interface return type index
sun.jvm.hotspot.oops.CellTypeState#copy()->CellTypeState::: cell type state copy
sun.jvm.hotspot.oops.CellTypeState#makeAny(int)->CellTypeState::: cell type state make any
sun.jvm.hotspot.oops.CellTypeState#makeBottom()->CellTypeState::: cell type state make bottom
sun.jvm.hotspot.oops.CellTypeState#makeTop()->CellTypeState::: cell type state make top
sun.jvm.hotspot.oops.CellTypeState#makeAddr(int)->CellTypeState::: cell type state make addr
sun.jvm.hotspot.oops.CellTypeState#makeSlotRef(int)->CellTypeState::: cell type state make slot ref
sun.jvm.hotspot.oops.CellTypeState#makeLineRef(int)->CellTypeState::: cell type state make line ref
sun.jvm.hotspot.oops.CellTypeState#makeLockRef(int)->CellTypeState::: cell type state make lock ref
sun.jvm.hotspot.oops.CellTypeState#isBottom()->boolean::: cell type state is bottom
sun.jvm.hotspot.oops.CellTypeState#isLive()->boolean::: cell type state is live
sun.jvm.hotspot.oops.CellTypeState#isValidState()->boolean::: cell type state is valid state
sun.jvm.hotspot.oops.CellTypeState#isAddress()->boolean::: cell type state is address
sun.jvm.hotspot.oops.CellTypeState#isReference()->boolean::: cell type state is reference
sun.jvm.hotspot.oops.CellTypeState#isValue()->boolean::: cell type state is value
sun.jvm.hotspot.oops.CellTypeState#isUninit()->boolean::: cell type state is uninit
sun.jvm.hotspot.oops.CellTypeState#canBeAddress()->boolean::: cell type state can be address
sun.jvm.hotspot.oops.CellTypeState#canBeReference()->boolean::: cell type state can be reference
sun.jvm.hotspot.oops.CellTypeState#canBeValue()->boolean::: cell type state can be value
sun.jvm.hotspot.oops.CellTypeState#canBeUninit()->boolean::: cell type state can be uninit
sun.jvm.hotspot.oops.CellTypeState#isInfoBottom()->boolean::: cell type state is info bottom
sun.jvm.hotspot.oops.CellTypeState#isInfoTop()->boolean::: cell type state is info top
sun.jvm.hotspot.oops.CellTypeState#getInfo()->int::: cell type state get info
sun.jvm.hotspot.oops.CellTypeState#getMonitorSource()->int::: cell type state get monitor source
sun.jvm.hotspot.oops.CellTypeState#isGoodAddress()->boolean::: cell type state is good address
sun.jvm.hotspot.oops.CellTypeState#isLockReference()->boolean::: cell type state is lock reference
sun.jvm.hotspot.oops.CellTypeState#isNonlockReference()->boolean::: cell type state is nonlock reference
sun.jvm.hotspot.oops.CellTypeState#equal(CellTypeState)->boolean::: cell type state equal
sun.jvm.hotspot.oops.CellTypeState#equalKind(CellTypeState)->boolean::: cell type state equal kind
sun.jvm.hotspot.oops.CellTypeState#toChar()->char::: cell type state to char
sun.jvm.hotspot.oops.CellTypeState#set(CellTypeState)->void::: cell type state set
sun.jvm.hotspot.oops.CellTypeState#merge(CellTypeState, int)->CellTypeState::: cell type state merge
sun.jvm.hotspot.oops.CellTypeState#print(PrintStream)->void::: cell type state print
sun.jvm.hotspot.oops.CellTypeStateList#size()->int::: cell type state list size
sun.jvm.hotspot.oops.CellTypeStateList#get(int)->CellTypeState::: cell type state list get
sun.jvm.hotspot.oops.CellTypeStateList#subList(int, int)->CellTypeStateList::: cell type state list sub list
sun.jvm.hotspot.oops.CharField#getValue(Oop)->char::: char field get value
sun.jvm.hotspot.oops.CharField#getValue(VMObject)->char::: char field get value
sun.jvm.hotspot.oops.CharField#setValue(Oop, char)->void::: char field set value
sun.jvm.hotspot.oops.CheckedExceptionElement#getClassCPIndex()->int::: checked exception element get class index
sun.jvm.hotspot.oops.CIntField#getValue(Oop)->long::: int field get value
sun.jvm.hotspot.oops.CIntField#getValue(VMObject)->long::: int field get value
sun.jvm.hotspot.oops.CIntField#getValue(Address)->long::: int field get value
sun.jvm.hotspot.oops.CIntField#setValue(Oop, long)->void::: int field set value
sun.jvm.hotspot.oops.CompiledICHolder#isCompiledICHolder()->boolean::: compiled holder is compiled holder
sun.jvm.hotspot.oops.CompiledICHolder#getHolderMetadata()->Metadata::: compiled holder get holder metadata
sun.jvm.hotspot.oops.CompiledICHolder#getHolderKlass()->Klass::: compiled holder get holder klass
sun.jvm.hotspot.oops.CompiledICHolder#printValueOn(PrintStream)->void::: compiled holder print value on
sun.jvm.hotspot.oops.CompressedLineNumberReadStream#readPair()->boolean:::Read (bci, line number) pair from stream
sun.jvm.hotspot.oops.CompressedLineNumberReadStream#bci()->int::: compressed line number read stream bci
sun.jvm.hotspot.oops.CompressedLineNumberReadStream#line()->int::: compressed line number read stream line
sun.jvm.hotspot.oops.ConstantPool#debugMessage(String)->void::: constant pool debug message
sun.jvm.hotspot.oops.ConstantPool#isConstantPool()->boolean::: constant pool is constant pool
sun.jvm.hotspot.oops.ConstantPool#getTags()->U1Array::: constant pool get tags
sun.jvm.hotspot.oops.ConstantPool#getOperands()->U2Array::: constant pool get operands
sun.jvm.hotspot.oops.ConstantPool#getCache()->ConstantPoolCache::: constant pool get cache
sun.jvm.hotspot.oops.ConstantPool#getPoolHolder()->InstanceKlass::: constant pool get pool holder
sun.jvm.hotspot.oops.ConstantPool#getLength()->int::: constant pool get length
sun.jvm.hotspot.oops.ConstantPool#getResolvedReferences()->Oop::: constant pool get resolved references
sun.jvm.hotspot.oops.ConstantPool#getResolvedKlasses()->KlassArray::: constant pool get resolved klasses
sun.jvm.hotspot.oops.ConstantPool#referenceMap()->U2Array::: constant pool reference map
sun.jvm.hotspot.oops.ConstantPool#objectToCPIndex(int)->int::: constant pool object to index
sun.jvm.hotspot.oops.ConstantPool#getTagAt(long)->ConstantTag::: constant pool get tag at
sun.jvm.hotspot.oops.ConstantPool#getSlotAt(long)->CPSlot::: constant pool get slot at
sun.jvm.hotspot.oops.ConstantPool#getKlassSlotAt(long)->CPKlassSlot::: constant pool get klass slot at
sun.jvm.hotspot.oops.ConstantPool#getAddressAtRaw(long)->Address::: constant pool get address at raw
sun.jvm.hotspot.oops.ConstantPool#getSymbolAt(long)->Symbol::: constant pool get symbol at
sun.jvm.hotspot.oops.ConstantPool#getIntAt(long)->int::: constant pool get int at
sun.jvm.hotspot.oops.ConstantPool#getFloatAt(long)->float::: constant pool get float at
sun.jvm.hotspot.oops.ConstantPool#getLongAt(long)->long::: constant pool get long at
sun.jvm.hotspot.oops.ConstantPool#getDoubleAt(long)->double::: constant pool get double at
sun.jvm.hotspot.oops.ConstantPool#getFieldOrMethodAt(int)->int::: constant pool get field or method at
sun.jvm.hotspot.oops.ConstantPool#getNameAndTypeAt(int)->int[]::: constant pool get name and type at
sun.jvm.hotspot.oops.ConstantPool#getNameRefAt(int)->Symbol::: constant pool get name ref at
sun.jvm.hotspot.oops.ConstantPool#uncachedGetNameRefAt(int)->Symbol::: constant pool uncached get name ref at
sun.jvm.hotspot.oops.ConstantPool#getSignatureRefAt(int)->Symbol::: constant pool get signature ref at
sun.jvm.hotspot.oops.ConstantPool#uncachedGetSignatureRefAt(int)->Symbol::: constant pool uncached get signature ref at
sun.jvm.hotspot.oops.ConstantPool#isInvokedynamicIndex(int)->boolean::: constant pool is invokedynamic index
sun.jvm.hotspot.oops.ConstantPool#decodeInvokedynamicIndex(int)->int::: constant pool decode invokedynamic index
sun.jvm.hotspot.oops.ConstantPool#invokedynamicCPCacheIndex(int)->int::: constant pool invokedynamic cache index
sun.jvm.hotspot.oops.ConstantPool#invokedynamicCPCacheEntryAt(int)->ConstantPoolCacheEntry::: constant pool invokedynamic cache entry at
sun.jvm.hotspot.oops.ConstantPool#invokeDynamicNameAndTypeRefIndexAt(int)->int::: constant pool invoke dynamic name and type ref index at
sun.jvm.hotspot.oops.ConstantPool#getKlassAt(int)->Klass::: constant pool get klass at
sun.jvm.hotspot.oops.ConstantPool#getKlassNameAt(int)->Symbol::: constant pool get klass name at
sun.jvm.hotspot.oops.ConstantPool#getUnresolvedStringAt(int)->Symbol::: constant pool get unresolved string at
sun.jvm.hotspot.oops.ConstantPool#getFieldOrMethodKlassRefAt(int)->Klass::: constant pool get field or method klass ref at
sun.jvm.hotspot.oops.ConstantPool#getMethodRefAt(int)->Method::: constant pool get method ref at
sun.jvm.hotspot.oops.ConstantPool#getFieldRefAt(int)->Field::: constant pool get field ref at
sun.jvm.hotspot.oops.ConstantPool#getNameAndTypeRefIndexAt(int)->int::: constant pool get name and type ref index at
sun.jvm.hotspot.oops.ConstantPool#getNameRefIndexAt(int)->int:::Lookup for entries consisting of (name_index, signature_index)
sun.jvm.hotspot.oops.ConstantPool#getSignatureRefIndexAt(int)->int:::Lookup for entries consisting of (name_index, signature_index)
sun.jvm.hotspot.oops.ConstantPool#getMethodHandleIndexAt(int)->int:::Lookup for MethodHandle entries.
sun.jvm.hotspot.oops.ConstantPool#getMethodHandleRefKindAt(int)->int:::Lookup for MethodHandle entries.
sun.jvm.hotspot.oops.ConstantPool#getMethodTypeIndexAt(int)->int:::Lookup for MethodType entries.
sun.jvm.hotspot.oops.ConstantPool#getBootstrapSpecifierAt(int)->short[]:::Lookup for multi-operand (InvokeDynamic, Dynamic) entries.
sun.jvm.hotspot.oops.ConstantPool#iterateFields(MetadataVisitor)->void::: constant pool iterate fields
sun.jvm.hotspot.oops.ConstantPool#writeBytes(OutputStream)->void::: constant pool write bytes
sun.jvm.hotspot.oops.ConstantPool#printValueOn(PrintStream)->void::: constant pool print value on
sun.jvm.hotspot.oops.ConstantPool#getSize()->long::: constant pool get size
sun.jvm.hotspot.oops.ConstantPoolCache#isConstantPoolCache()->boolean::: constant pool cache is constant pool cache
sun.jvm.hotspot.oops.ConstantPoolCache#getConstants()->ConstantPool::: constant pool cache get constants
sun.jvm.hotspot.oops.ConstantPoolCache#getSize()->long::: constant pool cache get size
sun.jvm.hotspot.oops.ConstantPoolCache#getEntryAt(int)->ConstantPoolCacheEntry::: constant pool cache get entry at
sun.jvm.hotspot.oops.ConstantPoolCache#getIntAt(int, int)->int::: constant pool cache get int at
sun.jvm.hotspot.oops.ConstantPoolCache#printValueOn(PrintStream)->void::: constant pool cache print value on
sun.jvm.hotspot.oops.ConstantPoolCache#getLength()->int::: constant pool cache get length
sun.jvm.hotspot.oops.ConstantPoolCache#iterateFields(MetadataVisitor)->void::: constant pool cache iterate fields
sun.jvm.hotspot.oops.ConstantPoolCache#getResolvedReferences()->Oop::: constant pool cache get resolved references
sun.jvm.hotspot.oops.ConstantPoolCache#referenceMap()->U2Array::: constant pool cache reference map
sun.jvm.hotspot.oops.ConstantPoolCacheEntry#getConstantPoolIndex()->int::: constant pool cache entry get constant pool index
sun.jvm.hotspot.oops.ConstantPoolCacheEntry#getF1()->Metadata::: constant pool cache entry get f1
sun.jvm.hotspot.oops.ConstantPoolCacheEntry#getF2()->int::: constant pool cache entry get f2
sun.jvm.hotspot.oops.ConstantPoolCacheEntry#getFlags()->int::: constant pool cache entry get flags
sun.jvm.hotspot.oops.ConstantPoolCacheEntry#iterateFields(MetadataVisitor)->void::: constant pool cache entry iterate fields
sun.jvm.hotspot.oops.ConstMethod#getMethod()->Method::: const method get method
sun.jvm.hotspot.oops.ConstMethod#getConstants()->ConstantPool::: const method get constants
sun.jvm.hotspot.oops.ConstMethod#getConstMethodSize()->long::: const method get const method size
sun.jvm.hotspot.oops.ConstMethod#getFlags()->long::: const method get flags
sun.jvm.hotspot.oops.ConstMethod#getCodeSize()->long::: const method get code size
sun.jvm.hotspot.oops.ConstMethod#getNameIndex()->long::: const method get name index
sun.jvm.hotspot.oops.ConstMethod#getSignatureIndex()->long::: const method get signature index
sun.jvm.hotspot.oops.ConstMethod#getGenericSignatureIndex()->long::: const method get generic signature index
sun.jvm.hotspot.oops.ConstMethod#getIdNum()->long::: const method get id num
sun.jvm.hotspot.oops.ConstMethod#getMaxStack()->long::: const method get max stack
sun.jvm.hotspot.oops.ConstMethod#getMaxLocals()->long::: const method get max locals
sun.jvm.hotspot.oops.ConstMethod#getSizeOfParameters()->long::: const method get size of parameters
sun.jvm.hotspot.oops.ConstMethod#getName()->Symbol::: const method get name
sun.jvm.hotspot.oops.ConstMethod#getSignature()->Symbol::: const method get signature
sun.jvm.hotspot.oops.ConstMethod#getGenericSignature()->Symbol::: const method get generic signature
sun.jvm.hotspot.oops.ConstMethod#getBytecodeOrBPAt(int)->int:::Get a bytecode or breakpoint at the given bci
sun.jvm.hotspot.oops.ConstMethod#getBytecodeByteArg(int)->byte::: const method get bytecode byte arg
sun.jvm.hotspot.oops.ConstMethod#getBytecodeShortArg(int)->short:::Fetches a 16-bit big-endian ("Java ordered") value from the       bytecode stream
sun.jvm.hotspot.oops.ConstMethod#getNativeShortArg(int)->short:::Fetches a 16-bit native ordered value from the       bytecode stream
sun.jvm.hotspot.oops.ConstMethod#getBytecodeIntArg(int)->int:::Fetches a 32-bit big-endian ("Java ordered") value from the       bytecode stream
sun.jvm.hotspot.oops.ConstMethod#getNativeIntArg(int)->int:::Fetches a 32-bit native ordered value from the       bytecode stream
sun.jvm.hotspot.oops.ConstMethod#getByteCode()->byte[]::: const method get byte code
sun.jvm.hotspot.oops.ConstMethod#getSize()->long::: const method get size
sun.jvm.hotspot.oops.ConstMethod#printValueOn(PrintStream)->void::: const method print value on
sun.jvm.hotspot.oops.ConstMethod#iterateFields(MetadataVisitor)->void::: const method iterate fields
sun.jvm.hotspot.oops.ConstMethod#hasLineNumberTable()->boolean::: const method has line number table
sun.jvm.hotspot.oops.ConstMethod#getLineNumberFromBCI(int)->int::: const method get line number from i
sun.jvm.hotspot.oops.ConstMethod#getLineNumberTable()->LineNumberTableElement[]::: const method get line number table
sun.jvm.hotspot.oops.ConstMethod#hasLocalVariableTable()->boolean::: const method has local variable table
sun.jvm.hotspot.oops.ConstMethod#getLocalVariableName(int, int)->Symbol::: const method get local variable name
sun.jvm.hotspot.oops.ConstMethod#getLocalVariableTable()->LocalVariableTableElement[]:::Should only be called if table is present
sun.jvm.hotspot.oops.ConstMethod#hasExceptionTable()->boolean::: const method has exception table
sun.jvm.hotspot.oops.ConstMethod#getExceptionTable()->ExceptionTableElement[]::: const method get exception table
sun.jvm.hotspot.oops.ConstMethod#hasCheckedExceptions()->boolean::: const method has checked exceptions
sun.jvm.hotspot.oops.ConstMethod#getCheckedExceptions()->CheckedExceptionElement[]::: const method get checked exceptions
sun.jvm.hotspot.oops.CounterData#staticCellCount()->int::: counter data static cell count
sun.jvm.hotspot.oops.CounterData#cellCount()->int::: counter data cell count
sun.jvm.hotspot.oops.CounterData#count()->int::: counter data count
sun.jvm.hotspot.oops.CounterData#countOffset()->int::: counter data count offset
sun.jvm.hotspot.oops.CounterData#counterDataSize()->int::: counter data counter data size
sun.jvm.hotspot.oops.CounterData#printDataOn(PrintStream)->void::: counter data print data on
sun.jvm.hotspot.oops.DataLayout#dp()->int::: data layout dp
sun.jvm.hotspot.oops.DataLayout#cellAt(int)->int::: data layout cell at
sun.jvm.hotspot.oops.DataLayout#addressAt(int)->Address::: data layout address at
sun.jvm.hotspot.oops.DataLayout#needsArrayLen(int)->boolean::: data layout needs array len
sun.jvm.hotspot.oops.DataLayout#headerSizeInBytes()->int::: data layout header size in bytes
sun.jvm.hotspot.oops.DataLayout#headerSizeInCells()->int::: data layout header size in cells
sun.jvm.hotspot.oops.DataLayout#computeSizeInBytes(int)->int::: data layout compute size in bytes
sun.jvm.hotspot.oops.DataLayout#tag()->int::: data layout tag
sun.jvm.hotspot.oops.DataLayout#trapState()->int::: data layout trap state
sun.jvm.hotspot.oops.DataLayout#flags()->int::: data layout flags
sun.jvm.hotspot.oops.DataLayout#bci()->int::: data layout bci
sun.jvm.hotspot.oops.DataLayout#flagAt(int)->boolean::: data layout flag at
sun.jvm.hotspot.oops.DataLayout#headerOffset()->int::: data layout header offset
sun.jvm.hotspot.oops.DataLayout#tagOffset()->int::: data layout tag offset
sun.jvm.hotspot.oops.DataLayout#flagsOffset()->int::: data layout flags offset
sun.jvm.hotspot.oops.DataLayout#bciOffset()->int::: data layout bci offset
sun.jvm.hotspot.oops.DataLayout#cellOffset(int)->int::: data layout cell offset
sun.jvm.hotspot.oops.DefaultHeapVisitor#prologue(long)->void::: default heap visitor prologue
sun.jvm.hotspot.oops.DefaultHeapVisitor#doObj(Oop)->boolean::: default heap visitor do obj
sun.jvm.hotspot.oops.DefaultHeapVisitor#epilogue()->void::: default heap visitor epilogue
sun.jvm.hotspot.oops.DefaultMetadataVisitor#prologue()->void::: default metadata visitor prologue
sun.jvm.hotspot.oops.DefaultMetadataVisitor#epilogue()->void::: default metadata visitor epilogue
sun.jvm.hotspot.oops.DefaultMetadataVisitor#setObj(Metadata)->void::: default metadata visitor set obj
sun.jvm.hotspot.oops.DefaultMetadataVisitor#getObj()->Metadata::: default metadata visitor get obj
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doMetadata(MetadataField, boolean)->void::: default metadata visitor do metadata
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doOop(OopField, boolean)->void::: default metadata visitor do oop
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doOop(NarrowOopField, boolean)->void::: default metadata visitor do oop
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doByte(ByteField, boolean)->void::: default metadata visitor do byte
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doChar(CharField, boolean)->void::: default metadata visitor do char
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doBoolean(BooleanField, boolean)->void::: default metadata visitor do boolean
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doShort(ShortField, boolean)->void::: default metadata visitor do short
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doInt(IntField, boolean)->void::: default metadata visitor do int
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doLong(LongField, boolean)->void::: default metadata visitor do long
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doFloat(FloatField, boolean)->void::: default metadata visitor do float
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doDouble(DoubleField, boolean)->void::: default metadata visitor do double
sun.jvm.hotspot.oops.DefaultMetadataVisitor#doCInt(CIntField, boolean)->void::: default metadata visitor do int
sun.jvm.hotspot.oops.DefaultOopVisitor#prologue()->void::: default oop visitor prologue
sun.jvm.hotspot.oops.DefaultOopVisitor#epilogue()->void::: default oop visitor epilogue
sun.jvm.hotspot.oops.DefaultOopVisitor#setObj(Oop)->void::: default oop visitor set obj
sun.jvm.hotspot.oops.DefaultOopVisitor#getObj()->Oop::: default oop visitor get obj
sun.jvm.hotspot.oops.DefaultOopVisitor#doMetadata(MetadataField, boolean)->void::: default oop visitor do metadata
sun.jvm.hotspot.oops.DefaultOopVisitor#doOop(OopField, boolean)->void::: default oop visitor do oop
sun.jvm.hotspot.oops.DefaultOopVisitor#doOop(NarrowOopField, boolean)->void::: default oop visitor do oop
sun.jvm.hotspot.oops.DefaultOopVisitor#doByte(ByteField, boolean)->void::: default oop visitor do byte
sun.jvm.hotspot.oops.DefaultOopVisitor#doChar(CharField, boolean)->void::: default oop visitor do char
sun.jvm.hotspot.oops.DefaultOopVisitor#doBoolean(BooleanField, boolean)->void::: default oop visitor do boolean
sun.jvm.hotspot.oops.DefaultOopVisitor#doShort(ShortField, boolean)->void::: default oop visitor do short
sun.jvm.hotspot.oops.DefaultOopVisitor#doInt(IntField, boolean)->void::: default oop visitor do int
sun.jvm.hotspot.oops.DefaultOopVisitor#doLong(LongField, boolean)->void::: default oop visitor do long
sun.jvm.hotspot.oops.DefaultOopVisitor#doFloat(FloatField, boolean)->void::: default oop visitor do float
sun.jvm.hotspot.oops.DefaultOopVisitor#doDouble(DoubleField, boolean)->void::: default oop visitor do double
sun.jvm.hotspot.oops.DefaultOopVisitor#doCInt(CIntField, boolean)->void::: default oop visitor do int
sun.jvm.hotspot.oops.DoubleField#getValue(Oop)->double::: double field get value
sun.jvm.hotspot.oops.DoubleField#getValue(VMObject)->double::: double field get value
sun.jvm.hotspot.oops.DoubleField#setValue(Oop, double)->void::: double field set value
sun.jvm.hotspot.oops.ExceptionTableElement#getStartPC()->int::: exception table element get start c
sun.jvm.hotspot.oops.ExceptionTableElement#getEndPC()->int::: exception table element get end c
sun.jvm.hotspot.oops.ExceptionTableElement#getHandlerPC()->int::: exception table element get handler c
sun.jvm.hotspot.oops.ExceptionTableElement#getCatchTypeIndex()->int::: exception table element get catch type index
sun.jvm.hotspot.oops.Field#getOffset()->long:::Returns the byte offset of the field within the object or klass
sun.jvm.hotspot.oops.Field#getID()->FieldIdentifier:::Returns the identifier of the field
sun.jvm.hotspot.oops.Field#isVMField()->boolean:::Indicates whether this is a VM field
sun.jvm.hotspot.oops.Field#isNamedField()->boolean:::Indicates whether this is a named field
sun.jvm.hotspot.oops.Field#printOn(PrintStream)->void::: field print on
sun.jvm.hotspot.oops.Field#getFieldHolder()->InstanceKlass:::(Named, non-VM fields only) Returns the InstanceKlass containing       this (static or non-static) field.
sun.jvm.hotspot.oops.Field#getFieldIndex()->int:::(Named, non-VM fields only) Returns the index in the fields       TypeArray for this field
sun.jvm.hotspot.oops.Field#getAccessFlags()->long:::(Named, non-VM fields only) Retrieves the access flags.
sun.jvm.hotspot.oops.Field#getAccessFlagsObj()->AccessFlags::: field get access flags obj
sun.jvm.hotspot.oops.Field#getFieldType()->FieldType:::(Named, non-VM fields only) Returns the type of this field.
sun.jvm.hotspot.oops.Field#getSignature()->Symbol:::(Named, non-VM fields only) Returns the signature of this       field.
sun.jvm.hotspot.oops.Field#getGenericSignature()->Symbol::: field get generic signature
sun.jvm.hotspot.oops.Field#hasInitialValue()->boolean::: field has initial value
sun.jvm.hotspot.oops.Field#isPublic()->boolean::: field is public
sun.jvm.hotspot.oops.Field#isPrivate()->boolean::: field is private
sun.jvm.hotspot.oops.Field#isProtected()->boolean::: field is protected
sun.jvm.hotspot.oops.Field#isPackagePrivate()->boolean::: field is package private
sun.jvm.hotspot.oops.Field#isStatic()->boolean::: field is static
sun.jvm.hotspot.oops.Field#isFinal()->boolean::: field is final
sun.jvm.hotspot.oops.Field#isVolatile()->boolean::: field is volatile
sun.jvm.hotspot.oops.Field#isTransient()->boolean::: field is transient
sun.jvm.hotspot.oops.Field#isSynthetic()->boolean::: field is synthetic
sun.jvm.hotspot.oops.Field#isEnumConstant()->boolean::: field is enum constant
sun.jvm.hotspot.oops.Field#equals(Object)->boolean::: field equals
sun.jvm.hotspot.oops.Field#hashCode()->int::: field hash code
sun.jvm.hotspot.oops.FieldIdentifier#getName()->String::: field identifier get name
sun.jvm.hotspot.oops.FieldIdentifier#printOn(PrintStream)->void::: field identifier print on
sun.jvm.hotspot.oops.FieldType#isOop()->boolean::: field type is oop
sun.jvm.hotspot.oops.FieldType#isByte()->boolean::: field type is byte
sun.jvm.hotspot.oops.FieldType#isChar()->boolean::: field type is char
sun.jvm.hotspot.oops.FieldType#isDouble()->boolean::: field type is double
sun.jvm.hotspot.oops.FieldType#isFloat()->boolean::: field type is float
sun.jvm.hotspot.oops.FieldType#isInt()->boolean::: field type is int
sun.jvm.hotspot.oops.FieldType#isLong()->boolean::: field type is long
sun.jvm.hotspot.oops.FieldType#isShort()->boolean::: field type is short
sun.jvm.hotspot.oops.FieldType#isBoolean()->boolean::: field type is boolean
sun.jvm.hotspot.oops.FieldType#isObject()->boolean::: field type is object
sun.jvm.hotspot.oops.FieldType#isArray()->boolean::: field type is array
sun.jvm.hotspot.oops.FieldType#getSignature()->Symbol::: field type get signature
sun.jvm.hotspot.oops.FieldType.ArrayInfo#dimension()->int::: array info dimension
sun.jvm.hotspot.oops.FieldType.ArrayInfo#elementBasicType()->int:::See BasicType.java
sun.jvm.hotspot.oops.FieldType#getArrayInfo()->ArrayInfo:::Only valid for T_ARRAY; throws unspecified exception otherwise
sun.jvm.hotspot.oops.FieldVisitor#doMetadata(MetadataField, boolean)->void::: field visitor do metadata
sun.jvm.hotspot.oops.FieldVisitor#doOop(OopField, boolean)->void::: field visitor do oop
sun.jvm.hotspot.oops.FieldVisitor#doOop(NarrowOopField, boolean)->void::: field visitor do oop
sun.jvm.hotspot.oops.FieldVisitor#doByte(ByteField, boolean)->void::: field visitor do byte
sun.jvm.hotspot.oops.FieldVisitor#doChar(CharField, boolean)->void::: field visitor do char
sun.jvm.hotspot.oops.FieldVisitor#doBoolean(BooleanField, boolean)->void::: field visitor do boolean
sun.jvm.hotspot.oops.FieldVisitor#doShort(ShortField, boolean)->void::: field visitor do short
sun.jvm.hotspot.oops.FieldVisitor#doInt(IntField, boolean)->void::: field visitor do int
sun.jvm.hotspot.oops.FieldVisitor#doLong(LongField, boolean)->void::: field visitor do long
sun.jvm.hotspot.oops.FieldVisitor#doFloat(FloatField, boolean)->void::: field visitor do float
sun.jvm.hotspot.oops.FieldVisitor#doDouble(DoubleField, boolean)->void::: field visitor do double
sun.jvm.hotspot.oops.FieldVisitor#doCInt(CIntField, boolean)->void::: field visitor do int
sun.jvm.hotspot.oops.FloatField#getValue(Oop)->float::: float field get value
sun.jvm.hotspot.oops.FloatField#getValue(VMObject)->float::: float field get value
sun.jvm.hotspot.oops.FloatField#setValue(Oop, float)->void::: float field set value
sun.jvm.hotspot.oops.GenerateOopMap.JumpClosure#process(GenerateOopMap, int, int[])->void::: jump closure process
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#set(CellTypeState)->void::: compute call stack set
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#length()->int::: compute call stack length
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doBool()->void::: compute call stack do bool
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doChar()->void::: compute call stack do char
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doFloat()->void::: compute call stack do float
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doByte()->void::: compute call stack do byte
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doShort()->void::: compute call stack do short
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doInt()->void::: compute call stack do int
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doVoid()->void::: compute call stack do void
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doObject(int, int)->void::: compute call stack do object
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doArray(int, int)->void::: compute call stack do array
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doDouble()->void::: compute call stack do double
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#doLong()->void::: compute call stack do long
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#computeForParameters(boolean, CellTypeStateList)->int::: compute call stack compute for parameters
sun.jvm.hotspot.oops.GenerateOopMap.ComputeCallStack#computeForReturntype(CellTypeStateList)->int::: compute call stack compute for returntype
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#set(CellTypeState)->void::: compute entry stack set
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#length()->int::: compute entry stack length
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doBool()->void::: compute entry stack do bool
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doChar()->void::: compute entry stack do char
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doFloat()->void::: compute entry stack do float
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doByte()->void::: compute entry stack do byte
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doShort()->void::: compute entry stack do short
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doInt()->void::: compute entry stack do int
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doVoid()->void::: compute entry stack do void
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doObject(int, int)->void::: compute entry stack do object
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doArray(int, int)->void::: compute entry stack do array
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doDouble()->void::: compute entry stack do double
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#doLong()->void::: compute entry stack do long
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#computeForParameters(boolean, CellTypeStateList)->int::: compute entry stack compute for parameters
sun.jvm.hotspot.oops.GenerateOopMap.ComputeEntryStack#computeForReturntype(CellTypeStateList)->int::: compute entry stack compute for returntype
sun.jvm.hotspot.oops.GenerateOopMap.RetTableEntry#targetBci()->int::: ret table entry target bci
sun.jvm.hotspot.oops.GenerateOopMap.RetTableEntry#nofJsrs()->int::: ret table entry nof jsrs
sun.jvm.hotspot.oops.GenerateOopMap.RetTableEntry#jsrs(int)->int::: ret table entry jsrs
sun.jvm.hotspot.oops.GenerateOopMap.RetTableEntry#addJsr(int)->void::: ret table entry add jsr
sun.jvm.hotspot.oops.GenerateOopMap.RetTableEntry#addDelta(int, int)->void::: ret table entry add delta
sun.jvm.hotspot.oops.GenerateOopMap.RetTableEntry#next()->RetTableEntry::: ret table entry next
sun.jvm.hotspot.oops.GenerateOopMap.RetTable#computeRetTable(Method)->void::: ret table compute ret table
sun.jvm.hotspot.oops.GenerateOopMap.RetTable#updateRetTable(int, int)->void::: ret table update ret table
sun.jvm.hotspot.oops.GenerateOopMap.RetTable#findJsrsForTarget(int)->RetTableEntry::: ret table find jsrs for target
sun.jvm.hotspot.oops.GenerateOopMap.BasicBlock#vars()->CellTypeStateList::: basic block vars
sun.jvm.hotspot.oops.GenerateOopMap.BasicBlock#stack()->CellTypeStateList::: basic block stack
sun.jvm.hotspot.oops.GenerateOopMap.BasicBlock#changed()->boolean::: basic block changed
sun.jvm.hotspot.oops.GenerateOopMap.BasicBlock#setChanged(boolean)->void::: basic block set changed
sun.jvm.hotspot.oops.GenerateOopMap.BasicBlock#isReachable()->boolean::: basic block is reachable
sun.jvm.hotspot.oops.GenerateOopMap.BasicBlock#isDead()->boolean::: basic block is dead
sun.jvm.hotspot.oops.GenerateOopMap.BasicBlock#isAlive()->boolean::: basic block is alive
sun.jvm.hotspot.oops.GenerateOopMap.BasicBlock#markAsAlive()->void::: basic block mark as alive
sun.jvm.hotspot.oops.GenerateOopMap#initState()->void::: generate oop map init state
sun.jvm.hotspot.oops.GenerateOopMap#makeContextUninitialized()->void::: generate oop map make context uninitialized
sun.jvm.hotspot.oops.GenerateOopMap#methodsigToEffect(Symbol, boolean, CellTypeStateList)->int::: generate oop map methodsig to effect
sun.jvm.hotspot.oops.GenerateOopMap#mergeStateVectors(CellTypeStateList, CellTypeStateList)->boolean::: generate oop map merge state vectors
sun.jvm.hotspot.oops.GenerateOopMap#copyState(CellTypeStateList, CellTypeStateList)->void::: generate oop map copy state
sun.jvm.hotspot.oops.GenerateOopMap#mergeStateIntoBB(BasicBlock)->void::: generate oop map merge state into b
sun.jvm.hotspot.oops.GenerateOopMap#mergeState(int, int[])->void::: generate oop map merge state
sun.jvm.hotspot.oops.GenerateOopMap#setVar(int, CellTypeState)->void::: generate oop map set var
sun.jvm.hotspot.oops.GenerateOopMap#getVar(int)->CellTypeState::: generate oop map get var
sun.jvm.hotspot.oops.GenerateOopMap#pop()->CellTypeState::: generate oop map pop
sun.jvm.hotspot.oops.GenerateOopMap#push(CellTypeState)->void::: generate oop map push
sun.jvm.hotspot.oops.GenerateOopMap#monitorPop()->CellTypeState::: generate oop map monitor pop
sun.jvm.hotspot.oops.GenerateOopMap#monitorPush(CellTypeState)->void::: generate oop map monitor push
sun.jvm.hotspot.oops.GenerateOopMap#vars()->CellTypeStateList::: generate oop map vars
sun.jvm.hotspot.oops.GenerateOopMap#stack()->CellTypeStateList::: generate oop map stack
sun.jvm.hotspot.oops.GenerateOopMap#monitors()->CellTypeStateList::: generate oop map monitors
sun.jvm.hotspot.oops.GenerateOopMap#replaceAllCTSMatches(CellTypeState, CellTypeState)->void::: generate oop map replace all matches
sun.jvm.hotspot.oops.GenerateOopMap#printStates(PrintStream, CellTypeStateList, int)->void::: generate oop map print states
sun.jvm.hotspot.oops.GenerateOopMap#printCurrentState(PrintStream, BytecodeStream, boolean)->void::: generate oop map print current state
sun.jvm.hotspot.oops.GenerateOopMap#reportMonitorMismatch(String)->void::: generate oop map report monitor mismatch
sun.jvm.hotspot.oops.GenerateOopMap#initializeBB()->void::: generate oop map initialize b
sun.jvm.hotspot.oops.GenerateOopMap#markBBHeadersAndCountGCPoints()->void::: generate oop map mark headers and count points
sun.jvm.hotspot.oops.GenerateOopMap#isBBHeader(int)->boolean::: generate oop map is header
sun.jvm.hotspot.oops.GenerateOopMap#gcPoints()->int::: generate oop map gc points
sun.jvm.hotspot.oops.GenerateOopMap#bbCount()->int::: generate oop map bb count
sun.jvm.hotspot.oops.GenerateOopMap#setBBMarkBit(int)->void::: generate oop map set mark bit
sun.jvm.hotspot.oops.GenerateOopMap#clear_bbmark_bit(int)->void::: generate oop map clear_bbmark_bit
sun.jvm.hotspot.oops.GenerateOopMap#getBasicBlockAt(int)->BasicBlock::: generate oop map get basic block at
sun.jvm.hotspot.oops.GenerateOopMap#getBasicBlockContaining(int)->BasicBlock::: generate oop map get basic block containing
sun.jvm.hotspot.oops.GenerateOopMap#interpBB(BasicBlock)->void::: generate oop map interp b
sun.jvm.hotspot.oops.GenerateOopMap#restoreState(BasicBlock)->void::: generate oop map restore state
sun.jvm.hotspot.oops.GenerateOopMap#nextBBStartPC(BasicBlock)->int::: generate oop map next start c
sun.jvm.hotspot.oops.GenerateOopMap#updateBasicBlocks(int, int)->void::: generate oop map update basic blocks
sun.jvm.hotspot.oops.GenerateOopMap#markBB(int, int[])->void::: generate oop map mark b
sun.jvm.hotspot.oops.GenerateOopMap#markReachableCode()->void::: generate oop map mark reachable code
sun.jvm.hotspot.oops.GenerateOopMap#reachableBasicblock(int, int[])->void::: generate oop map reachable basicblock
sun.jvm.hotspot.oops.GenerateOopMap#doInterpretation()->void::: generate oop map do interpretation
sun.jvm.hotspot.oops.GenerateOopMap#initBasicBlocks()->void::: generate oop map init basic blocks
sun.jvm.hotspot.oops.GenerateOopMap#setupMethodEntryState()->void::: generate oop map setup method entry state
sun.jvm.hotspot.oops.GenerateOopMap#interpAll()->void::: generate oop map interp all
sun.jvm.hotspot.oops.GenerateOopMap#interp1(BytecodeStream)->void:::Sets the current state to be the state after executing the       current instruction, starting in the current state.
sun.jvm.hotspot.oops.GenerateOopMap#doExceptionEdge(BytecodeStream)->void::: generate oop map do exception edge
sun.jvm.hotspot.oops.GenerateOopMap#checkType(CellTypeState, CellTypeState)->void::: generate oop map check type
sun.jvm.hotspot.oops.GenerateOopMap#ppstore(CellTypeState[], int)->void::: generate oop map ppstore
sun.jvm.hotspot.oops.GenerateOopMap#ppload(CellTypeState[], int)->void::: generate oop map ppload
sun.jvm.hotspot.oops.GenerateOopMap#ppush1(CellTypeState)->void::: generate oop map ppush1
sun.jvm.hotspot.oops.GenerateOopMap#ppush(CellTypeState[])->void::: generate oop map ppush
sun.jvm.hotspot.oops.GenerateOopMap#ppush(CellTypeStateList)->void::: generate oop map ppush
sun.jvm.hotspot.oops.GenerateOopMap#ppop1(CellTypeState)->void::: generate oop map ppop1
sun.jvm.hotspot.oops.GenerateOopMap#ppop(CellTypeState[])->void::: generate oop map ppop
sun.jvm.hotspot.oops.GenerateOopMap#ppopAny(int)->void::: generate oop map ppop any
sun.jvm.hotspot.oops.GenerateOopMap#pp(CellTypeState[], CellTypeState[])->void::: generate oop map pp
sun.jvm.hotspot.oops.GenerateOopMap#ppNewRef(CellTypeState[], int)->void::: generate oop map pp new ref
sun.jvm.hotspot.oops.GenerateOopMap#ppdupswap(int, String)->void::: generate oop map ppdupswap
sun.jvm.hotspot.oops.GenerateOopMap#doLdc(int)->void::: generate oop map do ldc
sun.jvm.hotspot.oops.GenerateOopMap#doAstore(int)->void::: generate oop map do astore
sun.jvm.hotspot.oops.GenerateOopMap#doJsr(int)->void::: generate oop map do jsr
sun.jvm.hotspot.oops.GenerateOopMap#doField(boolean, boolean, int, int)->void::: generate oop map do field
sun.jvm.hotspot.oops.GenerateOopMap#doMethod(boolean, boolean, int, int)->void::: generate oop map do method
sun.jvm.hotspot.oops.GenerateOopMap#doMultianewarray(int, int)->void::: generate oop map do multianewarray
sun.jvm.hotspot.oops.GenerateOopMap#doMonitorenter(int)->void::: generate oop map do monitorenter
sun.jvm.hotspot.oops.GenerateOopMap#doMonitorexit(int)->void::: generate oop map do monitorexit
sun.jvm.hotspot.oops.GenerateOopMap#doReturnMonitorCheck()->void::: generate oop map do return monitor check
sun.jvm.hotspot.oops.GenerateOopMap#doCheckcast()->void::: generate oop map do checkcast
sun.jvm.hotspot.oops.GenerateOopMap#sigcharToEffect(char, int, CellTypeState[])->CellTypeState[]::: generate oop map sigchar to effect
sun.jvm.hotspot.oops.GenerateOopMap#copyCTS(CellTypeState[], CellTypeState[])->int::: generate oop map copy s
sun.jvm.hotspot.oops.GenerateOopMap#reportResult()->void::: generate oop map report result
sun.jvm.hotspot.oops.GenerateOopMap#initializeVars()->void::: generate oop map initialize vars
sun.jvm.hotspot.oops.GenerateOopMap#addToRefInitSet(int)->void::: generate oop map add to ref init set
sun.jvm.hotspot.oops.GenerateOopMap#recordRefvalConflict(int)->void::: generate oop map record refval conflict
sun.jvm.hotspot.oops.GenerateOopMap#rewriteRefvalConflicts()->void::: generate oop map rewrite refval conflicts
sun.jvm.hotspot.oops.GenerateOopMap#stateVecToString(CellTypeStateList, int)->String::: generate oop map state vec to string
sun.jvm.hotspot.oops.GenerateOopMap#retJumpTargetsDo(BytecodeStream, JumpClosure, int, int[])->void::: generate oop map ret jump targets do
sun.jvm.hotspot.oops.GenerateOopMap#jumpTargetsDo(BytecodeStream, JumpClosure, int[])->boolean:::If the current instruction in "c" has no effect on control flow,       returns "true"
sun.jvm.hotspot.oops.GenerateOopMap#computeMap()->void::: generate oop map compute map
sun.jvm.hotspot.oops.GenerateOopMap#resultForBasicblock(int)->void::: generate oop map result for basicblock
sun.jvm.hotspot.oops.GenerateOopMap#maxLocals()->int::: generate oop map max locals
sun.jvm.hotspot.oops.GenerateOopMap#method()->Method::: generate oop map method
sun.jvm.hotspot.oops.GenerateOopMap#monitorSafe()->boolean::: generate oop map monitor safe
sun.jvm.hotspot.oops.GenerateOopMap#getMonitorMatch(int)->int::: generate oop map get monitor match
sun.jvm.hotspot.oops.GenerateOopMap#allowRewrites()->boolean::: generate oop map allow rewrites
sun.jvm.hotspot.oops.GenerateOopMap#reportResults()->boolean::: generate oop map report results
sun.jvm.hotspot.oops.GenerateOopMap#reportInitVars()->boolean::: generate oop map report init vars
sun.jvm.hotspot.oops.GenerateOopMap#possibleGCPoint(BytecodeStream)->boolean::: generate oop map possible point
sun.jvm.hotspot.oops.GenerateOopMap#fillStackmapProlog(int)->void::: generate oop map fill stackmap prolog
sun.jvm.hotspot.oops.GenerateOopMap#fillStackmapEpilog()->void::: generate oop map fill stackmap epilog
sun.jvm.hotspot.oops.GenerateOopMap#fillStackmapForOpcodes(BytecodeStream, CellTypeStateList, CellTypeStateList, int)->void::: generate oop map fill stackmap for opcodes
sun.jvm.hotspot.oops.GenerateOopMap#fillInitVars(List)->void::: generate oop map fill init vars
sun.jvm.hotspot.oops.HeapPrinter#prologue(long)->void::: heap printer prologue
sun.jvm.hotspot.oops.HeapPrinter#doObj(Oop)->boolean::: heap printer do obj
sun.jvm.hotspot.oops.HeapPrinter#epilogue()->void::: heap printer epilogue
sun.jvm.hotspot.oops.HeapVisitor#prologue(long)->void::: heap visitor prologue
sun.jvm.hotspot.oops.HeapVisitor#doObj(Oop)->boolean::: heap visitor do obj
sun.jvm.hotspot.oops.HeapVisitor#epilogue()->void::: heap visitor epilogue
sun.jvm.hotspot.oops.IndexableFieldIdentifier#getIndex()->int::: indexable field identifier get index
sun.jvm.hotspot.oops.IndexableFieldIdentifier#getName()->String::: indexable field identifier get name
sun.jvm.hotspot.oops.IndexableFieldIdentifier#printOn(PrintStream)->void::: indexable field identifier print on
sun.jvm.hotspot.oops.IndexableFieldIdentifier#equals(Object)->boolean::: indexable field identifier equals
sun.jvm.hotspot.oops.IndexableFieldIdentifier#hashCode()->int::: indexable field identifier hash code
sun.jvm.hotspot.oops.Instance#getHeaderSize()->long::: instance get header size
sun.jvm.hotspot.oops.Instance#isInstance()->boolean::: instance is instance
sun.jvm.hotspot.oops.Instance#iterateFields(OopVisitor, boolean)->void::: instance iterate fields
sun.jvm.hotspot.oops.Instance#printValueOn(PrintStream)->void::: instance print value on
sun.jvm.hotspot.oops.InstanceKlass.ClassState#toString()->String::: class state to string
sun.jvm.hotspot.oops.InstanceKlass#getInitStateAsInt()->int::: instance klass get init state as int
sun.jvm.hotspot.oops.InstanceKlass#getInitState()->ClassState::: instance klass get init state
sun.jvm.hotspot.oops.InstanceKlass#isLoaded()->boolean::: instance klass is loaded
sun.jvm.hotspot.oops.InstanceKlass#isLinked()->boolean::: instance klass is linked
sun.jvm.hotspot.oops.InstanceKlass#isInitialized()->boolean::: instance klass is initialized
sun.jvm.hotspot.oops.InstanceKlass#isNotInitialized()->boolean::: instance klass is not initialized
sun.jvm.hotspot.oops.InstanceKlass#isBeingInitialized()->boolean::: instance klass is being initialized
sun.jvm.hotspot.oops.InstanceKlass#isInErrorState()->boolean::: instance klass is in error state
sun.jvm.hotspot.oops.InstanceKlass#getClassStatus()->int::: instance klass get class status
sun.jvm.hotspot.oops.InstanceKlass#getObjectSize(Oop)->long::: instance klass get object size
sun.jvm.hotspot.oops.InstanceKlass#getSize()->long::: instance klass get size
sun.jvm.hotspot.oops.InstanceKlass#isAnonymous()->boolean::: instance klass is anonymous
sun.jvm.hotspot.oops.InstanceKlass#shouldStoreFingerprint()->boolean::: instance klass should store fingerprint
sun.jvm.hotspot.oops.InstanceKlass#hasStoredFingerprint()->boolean::: instance klass has stored fingerprint
sun.jvm.hotspot.oops.InstanceKlass#isShared()->boolean::: instance klass is shared
sun.jvm.hotspot.oops.InstanceKlass#getHeaderSize()->long::: instance klass get header size
sun.jvm.hotspot.oops.InstanceKlass#getFieldAccessFlags(int)->short::: instance klass get field access flags
sun.jvm.hotspot.oops.InstanceKlass#getFieldNameIndex(int)->short::: instance klass get field name index
sun.jvm.hotspot.oops.InstanceKlass#getFieldName(int)->Symbol::: instance klass get field name
sun.jvm.hotspot.oops.InstanceKlass#getFieldSignatureIndex(int)->short::: instance klass get field signature index
sun.jvm.hotspot.oops.InstanceKlass#getFieldSignature(int)->Symbol::: instance klass get field signature
sun.jvm.hotspot.oops.InstanceKlass#getFieldGenericSignatureIndex(int)->short::: instance klass get field generic signature index
sun.jvm.hotspot.oops.InstanceKlass#getFieldGenericSignature(int)->Symbol::: instance klass get field generic signature
sun.jvm.hotspot.oops.InstanceKlass#getFieldInitialValueIndex(int)->short::: instance klass get field initial value index
sun.jvm.hotspot.oops.InstanceKlass#getFieldOffset(int)->int::: instance klass get field offset
sun.jvm.hotspot.oops.InstanceKlass#getArrayKlasses()->Klass::: instance klass get array klasses
sun.jvm.hotspot.oops.InstanceKlass#getMethods()->MethodArray::: instance klass get methods
sun.jvm.hotspot.oops.InstanceKlass#getDefaultMethods()->MethodArray::: instance klass get default methods
sun.jvm.hotspot.oops.InstanceKlass#getLocalInterfaces()->KlassArray::: instance klass get local interfaces
sun.jvm.hotspot.oops.InstanceKlass#getTransitiveInterfaces()->KlassArray::: instance klass get transitive interfaces
sun.jvm.hotspot.oops.InstanceKlass#getJavaFieldsCount()->int::: instance klass get java fields count
sun.jvm.hotspot.oops.InstanceKlass#getAllFieldsCount()->int::: instance klass get all fields count
sun.jvm.hotspot.oops.InstanceKlass#getConstants()->ConstantPool::: instance klass get constants
sun.jvm.hotspot.oops.InstanceKlass#getSourceFileName()->Symbol::: instance klass get source file name
sun.jvm.hotspot.oops.InstanceKlass#getSourceDebugExtension()->String::: instance klass get source debug extension
sun.jvm.hotspot.oops.InstanceKlass#getNonstaticFieldSize()->long::: instance klass get nonstatic field size
sun.jvm.hotspot.oops.InstanceKlass#getStaticOopFieldCount()->long::: instance klass get static oop field count
sun.jvm.hotspot.oops.InstanceKlass#getNonstaticOopMapSize()->long::: instance klass get nonstatic oop map size
sun.jvm.hotspot.oops.InstanceKlass#getIsMarkedDependent()->boolean::: instance klass get is marked dependent
sun.jvm.hotspot.oops.InstanceKlass#getItableLen()->long::: instance klass get itable len
sun.jvm.hotspot.oops.InstanceKlass#majorVersion()->long::: instance klass major version
sun.jvm.hotspot.oops.InstanceKlass#minorVersion()->long::: instance klass minor version
sun.jvm.hotspot.oops.InstanceKlass#getGenericSignature()->Symbol::: instance klass get generic signature
sun.jvm.hotspot.oops.InstanceKlass#getSizeHelper()->long::: instance klass get size helper
sun.jvm.hotspot.oops.InstanceKlass#computeModifierFlags()->long::: instance klass compute modifier flags
sun.jvm.hotspot.oops.InstanceKlass#isInnerClassName(Symbol)->boolean::: instance klass is inner class name
sun.jvm.hotspot.oops.InstanceKlass#isInnerOrLocalClassName(Symbol)->boolean::: instance klass is inner or local class name
sun.jvm.hotspot.oops.InstanceKlass#implementsInterface(Klass)->boolean::: instance klass implements interface
sun.jvm.hotspot.oops.InstanceKlass#computeSubtypeOf(Klass)->boolean::: instance klass compute subtype of
sun.jvm.hotspot.oops.InstanceKlass#printValueOn(PrintStream)->void::: instance klass print value on
sun.jvm.hotspot.oops.InstanceKlass#iterateFields(MetadataVisitor)->void::: instance klass iterate fields
sun.jvm.hotspot.oops.InstanceKlass#iterateStaticFields(OopVisitor)->void::: instance klass iterate static fields
sun.jvm.hotspot.oops.InstanceKlass#iterateStaticFieldsInternal(OopVisitor)->void::: instance klass iterate static fields internal
sun.jvm.hotspot.oops.InstanceKlass#getJavaSuper()->Klass::: instance klass get java super
sun.jvm.hotspot.oops.InstanceKlass#getStaticFields()->Field[]::: instance klass get static fields
sun.jvm.hotspot.oops.InstanceKlass#iterateNonStaticFields(OopVisitor, Oop)->void::: instance klass iterate non static fields
sun.jvm.hotspot.oops.InstanceKlass#findLocalField(Symbol, Symbol)->Field:::Field access by name.
sun.jvm.hotspot.oops.InstanceKlass#findInterfaceField(Symbol, Symbol)->Field:::Find field in direct superinterfaces.
sun.jvm.hotspot.oops.InstanceKlass#findField(Symbol, Symbol)->Field:::Find field according to JVM spec 5.4.3.2, returns the klass in       which the field is defined.
sun.jvm.hotspot.oops.InstanceKlass#findField(String, String)->Field:::Find field according to JVM spec 5.4.3.2, returns the klass in       which the field is defined (convenience routine)
sun.jvm.hotspot.oops.InstanceKlass#findFieldDbg(String, String)->Field:::Find field according to JVM spec 5.4.3.2, returns the klass in       which the field is defined (retained only for backward       compatibility with jdbx)
sun.jvm.hotspot.oops.InstanceKlass#getFieldByIndex(int)->Field:::Get field by its index in the fields array
sun.jvm.hotspot.oops.InstanceKlass#getImmediateFields()->List:::Return a List of SA Fields for the fields declared in this class
sun.jvm.hotspot.oops.InstanceKlass#getAllFields()->List:::Return a List of SA Fields for all the java fields in this class,         including all inherited fields
sun.jvm.hotspot.oops.InstanceKlass#getImmediateMethods()->List:::Return a List of SA Methods declared directly in this class/interface
sun.jvm.hotspot.oops.InstanceKlass#getDirectImplementedInterfaces()->List:::Return a List containing an SA InstanceKlass for each         interface named in this class's 'implements' clause.
sun.jvm.hotspot.oops.InstanceKlass#arrayKlassImpl(boolean, int)->Klass::: instance klass array klass impl
sun.jvm.hotspot.oops.InstanceKlass#arrayKlassImpl(boolean)->Klass::: instance klass array klass impl
sun.jvm.hotspot.oops.InstanceKlass#signature()->String::: instance klass signature
sun.jvm.hotspot.oops.InstanceKlass#findMethod(String, String)->Method:::Convenience routine taking Strings; lookup is done in       SymbolTable.
sun.jvm.hotspot.oops.InstanceKlass#findMethod(Symbol, Symbol)->Method:::Find method in vtable.
sun.jvm.hotspot.oops.InstanceKlass#getBreakpoints()->BreakpointInfo:::Breakpoint support (see methods on Method* for details)
sun.jvm.hotspot.oops.InstanceKlass#getMethodOrdering()->IntArray::: instance klass get method ordering
sun.jvm.hotspot.oops.InstanceKlass#getFields()->U2Array::: instance klass get fields
sun.jvm.hotspot.oops.InstanceKlass#getInnerClasses()->U2Array::: instance klass get inner classes
sun.jvm.hotspot.oops.InstanceKlass#dumpReplayData(PrintStream)->void::: instance klass dump replay data
sun.jvm.hotspot.oops.InstanceMirrorKlass#getObjectSize(Oop)->long::: instance mirror klass get object size
sun.jvm.hotspot.oops.InstanceMirrorKlass#iterateNonStaticFields(OopVisitor, Oop)->void::: instance mirror klass iterate non static fields
sun.jvm.hotspot.oops.IntField#getValue(Oop)->int::: int field get value
sun.jvm.hotspot.oops.IntField#getValue(VMObject)->int::: int field get value
sun.jvm.hotspot.oops.IntField#setValue(Oop, int)->void::: int field set value
sun.jvm.hotspot.oops.java_lang_Class#asKlass(Oop)->Klass:::get Klass* field at offset hc_klass_offset from a java.lang.Class object
sun.jvm.hotspot.oops.java_lang_Class#getOopSize(Oop)->long:::get oop_size field at offset oop_size_offset from a java.lang.Class object
sun.jvm.hotspot.oops.java_lang_Class#asExternalName(Oop)->String:::Returns the Java name for this Java mirror
sun.jvm.hotspot.oops.JumpData#staticCellCount()->int::: jump data static cell count
sun.jvm.hotspot.oops.JumpData#cellCount()->int::: jump data cell count
sun.jvm.hotspot.oops.JumpData#taken()->int::: jump data taken
sun.jvm.hotspot.oops.JumpData#displacement()->int::: jump data displacement
sun.jvm.hotspot.oops.JumpData#takenOffset()->int::: jump data taken offset
sun.jvm.hotspot.oops.JumpData#displacementOffset()->int::: jump data displacement offset
sun.jvm.hotspot.oops.JumpData#printDataOn(PrintStream)->void::: jump data print data on
sun.jvm.hotspot.oops.Klass#getClassStatus()->int::: klass get class status
sun.jvm.hotspot.oops.Klass#isKlass()->boolean::: klass is klass
sun.jvm.hotspot.oops.Klass#isArrayKlass()->boolean::: klass is array klass
sun.jvm.hotspot.oops.Klass#getSymbol(AddressField)->Symbol::: klass get symbol
sun.jvm.hotspot.oops.Klass#getJavaMirror()->Instance::: klass get java mirror
sun.jvm.hotspot.oops.Klass#getSuper()->Klass::: klass get super
sun.jvm.hotspot.oops.Klass#getJavaSuper()->Klass::: klass get java super
sun.jvm.hotspot.oops.Klass#getLayoutHelper()->int::: klass get layout helper
sun.jvm.hotspot.oops.Klass#getName()->Symbol::: klass get name
sun.jvm.hotspot.oops.Klass#getAccessFlags()->long::: klass get access flags
sun.jvm.hotspot.oops.Klass#getAccessFlagsObj()->AccessFlags::: klass get access flags obj
sun.jvm.hotspot.oops.Klass#getSubklassKlass()->Klass::: klass get subklass klass
sun.jvm.hotspot.oops.Klass#getNextSiblingKlass()->Klass::: klass get next sibling klass
sun.jvm.hotspot.oops.Klass#getNextLinkKlass()->Klass::: klass get next link klass
sun.jvm.hotspot.oops.Klass#getVtableLen()->long::: klass get vtable len
sun.jvm.hotspot.oops.Klass#getClassLoaderData()->ClassLoaderData::: klass get class loader data
sun.jvm.hotspot.oops.Klass#getClassLoader()->Oop::: klass get class loader
sun.jvm.hotspot.oops.Klass#traceID()->long::: klass trace d
sun.jvm.hotspot.oops.Klass#computeModifierFlags()->long::: klass compute modifier flags
sun.jvm.hotspot.oops.Klass#getClassModifiers()->long::: klass get class modifiers
sun.jvm.hotspot.oops.Klass#isSubclassOf(Klass)->boolean::: klass is subclass of
sun.jvm.hotspot.oops.Klass#isSubtypeOf(Klass)->boolean::: klass is subtype of
sun.jvm.hotspot.oops.Klass#computeSubtypeOf(Klass)->boolean::: klass compute subtype of
sun.jvm.hotspot.oops.Klass#lca(Klass)->Klass::: klass lca
sun.jvm.hotspot.oops.Klass#printValueOn(PrintStream)->void::: klass print value on
sun.jvm.hotspot.oops.Klass#iterateFields(MetadataVisitor)->void::: klass iterate fields
sun.jvm.hotspot.oops.Klass#getObjectSize()->long::: klass get object size
sun.jvm.hotspot.oops.Klass#arrayKlass(int)->Klass:::Array class with specific rank
sun.jvm.hotspot.oops.Klass#arrayKlass()->Klass:::Array class with this klass as element type
sun.jvm.hotspot.oops.Klass#arrayKlassOrNull(int)->Klass:::These will return null instead of allocating on the heap
sun.jvm.hotspot.oops.Klass#arrayKlassOrNull()->Klass::: klass array klass or null
sun.jvm.hotspot.oops.Klass#arrayKlassImpl(boolean, int)->Klass::: klass array klass impl
sun.jvm.hotspot.oops.Klass#arrayKlassImpl(boolean)->Klass::: klass array klass impl
sun.jvm.hotspot.oops.Klass#signature()->String::: klass signature
sun.jvm.hotspot.oops.Klass#isPublic()->boolean::: klass is public
sun.jvm.hotspot.oops.Klass#isFinal()->boolean::: klass is final
sun.jvm.hotspot.oops.Klass#isInterface()->boolean::: klass is interface
sun.jvm.hotspot.oops.Klass#isAbstract()->boolean::: klass is abstract
sun.jvm.hotspot.oops.Klass#isSuper()->boolean::: klass is super
sun.jvm.hotspot.oops.Klass#isSynthetic()->boolean::: klass is synthetic
sun.jvm.hotspot.oops.Klass#hasFinalizer()->boolean::: klass has finalizer
sun.jvm.hotspot.oops.Klass#isCloneable()->boolean::: klass is cloneable
sun.jvm.hotspot.oops.Klass#hasVanillaConstructor()->boolean::: klass has vanilla constructor
sun.jvm.hotspot.oops.Klass#hasMirandaMethods()->boolean::: klass has miranda methods
sun.jvm.hotspot.oops.LineNumberTableElement#getStartBCI()->int::: line number table element get start i
sun.jvm.hotspot.oops.LineNumberTableElement#getLineNumber()->int::: line number table element get line number
sun.jvm.hotspot.oops.LocalVariableTableElement#getStartBCI()->int::: local variable table element get start i
sun.jvm.hotspot.oops.LocalVariableTableElement#getLength()->int::: local variable table element get length
sun.jvm.hotspot.oops.LocalVariableTableElement#getNameCPIndex()->int::: local variable table element get name index
sun.jvm.hotspot.oops.LocalVariableTableElement#getDescriptorCPIndex()->int::: local variable table element get descriptor index
sun.jvm.hotspot.oops.LocalVariableTableElement#getSignatureCPIndex()->int::: local variable table element get signature index
sun.jvm.hotspot.oops.LocalVariableTableElement#getSlot()->int::: local variable table element get slot
sun.jvm.hotspot.oops.LongField#getValue(Oop)->long::: long field get value
sun.jvm.hotspot.oops.LongField#getValue(VMObject)->long::: long field get value
sun.jvm.hotspot.oops.LongField#setValue(Oop, long)->void::: long field set value
sun.jvm.hotspot.oops.Mark#value()->long::: mark value
sun.jvm.hotspot.oops.Mark#valueAsAddress()->Address::: mark value as address
sun.jvm.hotspot.oops.Mark#hasBiasPattern()->boolean::: mark has bias pattern
sun.jvm.hotspot.oops.Mark#biasedLocker()->JavaThread::: mark biased locker
sun.jvm.hotspot.oops.Mark#isBiasedAnonymously()->boolean::: mark is biased anonymously
sun.jvm.hotspot.oops.Mark#isLocked()->boolean::: mark is locked
sun.jvm.hotspot.oops.Mark#isUnlocked()->boolean::: mark is unlocked
sun.jvm.hotspot.oops.Mark#isMarked()->boolean::: mark is marked
sun.jvm.hotspot.oops.Mark#isBeingInflated()->boolean::: mark is being inflated
sun.jvm.hotspot.oops.Mark#mustBePreserved()->boolean::: mark must be preserved
sun.jvm.hotspot.oops.Mark#hasLocker()->boolean::: mark has locker
sun.jvm.hotspot.oops.Mark#locker()->BasicLock::: mark locker
sun.jvm.hotspot.oops.Mark#hasMonitor()->boolean::: mark has monitor
sun.jvm.hotspot.oops.Mark#monitor()->ObjectMonitor::: mark monitor
sun.jvm.hotspot.oops.Mark#hasDisplacedMarkHelper()->boolean::: mark has displaced mark helper
sun.jvm.hotspot.oops.Mark#displacedMarkHelper()->Mark::: mark displaced mark helper
sun.jvm.hotspot.oops.Mark#age()->int::: mark age
sun.jvm.hotspot.oops.Mark#hash()->long::: mark hash
sun.jvm.hotspot.oops.Mark#hasNoHash()->boolean::: mark has no hash
sun.jvm.hotspot.oops.Mark#printOn(PrintStream)->void::: mark print on
sun.jvm.hotspot.oops.Mark#isCmsFreeChunk()->boolean::: mark is cms free chunk
sun.jvm.hotspot.oops.Mark#getSize()->long::: mark get size
sun.jvm.hotspot.oops.Metadata#alignSize(long)->long::: metadata align size
sun.jvm.hotspot.oops.Metadata#instantiateWrapperFor(Address)->Metadata::: metadata instantiate wrapper for
sun.jvm.hotspot.oops.Metadata#iterate(MetadataVisitor)->void::: metadata iterate
sun.jvm.hotspot.oops.Metadata#iterateFields(MetadataVisitor)->void::: metadata iterate fields
sun.jvm.hotspot.oops.Metadata#printValueOn(PrintStream)->void::: metadata print value on
sun.jvm.hotspot.oops.Metadata#dumpReplayData(PrintStream)->void::: metadata dump replay data
sun.jvm.hotspot.oops.MetadataField#getValue(Oop)->Metadata::: metadata field get value
sun.jvm.hotspot.oops.MetadataField#getValue(VMObject)->Metadata::: metadata field get value
sun.jvm.hotspot.oops.MetadataField#getValue(Address)->Metadata::: metadata field get value
sun.jvm.hotspot.oops.MetadataField#setValue(Oop, long)->void::: metadata field set value
sun.jvm.hotspot.oops.MetadataVisitor#prologue()->void::: metadata visitor prologue
sun.jvm.hotspot.oops.MetadataVisitor#epilogue()->void::: metadata visitor epilogue
sun.jvm.hotspot.oops.MetadataVisitor#setObj(Metadata)->void::: metadata visitor set obj
sun.jvm.hotspot.oops.MetadataVisitor#getObj()->Metadata::: metadata visitor get obj
sun.jvm.hotspot.oops.Method#isMethod()->boolean::: method is method
sun.jvm.hotspot.oops.Method#getConstMethod()->ConstMethod::: method get const method
sun.jvm.hotspot.oops.Method#getConstants()->ConstantPool::: method get constants
sun.jvm.hotspot.oops.Method#getMethodData()->MethodData::: method get method data
sun.jvm.hotspot.oops.Method#getMethodCounters()->MethodCounters::: method get method counters
sun.jvm.hotspot.oops.Method#getMaxStack()->long:::WARNING: this is in words, not useful in this system; use getObjectSize() instead
sun.jvm.hotspot.oops.Method#getMaxLocals()->long::: method get max locals
sun.jvm.hotspot.oops.Method#getSizeOfParameters()->long::: method get size of parameters
sun.jvm.hotspot.oops.Method#getNameIndex()->long::: method get name index
sun.jvm.hotspot.oops.Method#getSignatureIndex()->long::: method get signature index
sun.jvm.hotspot.oops.Method#getGenericSignatureIndex()->long::: method get generic signature index
sun.jvm.hotspot.oops.Method#getAccessFlags()->long::: method get access flags
sun.jvm.hotspot.oops.Method#getCodeSize()->long::: method get code size
sun.jvm.hotspot.oops.Method#getVtableIndex()->long::: method get vtable index
sun.jvm.hotspot.oops.Method#getInvocationCount()->long::: method get invocation count
sun.jvm.hotspot.oops.Method#getBackedgeCount()->long::: method get backedge count
sun.jvm.hotspot.oops.Method#getNativeMethod()->NMethod::: method get native method
sun.jvm.hotspot.oops.Method#getAccessFlagsObj()->AccessFlags::: method get access flags obj
sun.jvm.hotspot.oops.Method#getBytecodeOrBPAt(int)->int:::Get a bytecode or breakpoint at the given bci
sun.jvm.hotspot.oops.Method#getOrigBytecodeAt(int)->int:::Fetch the original non-breakpoint bytecode at the specified       bci
sun.jvm.hotspot.oops.Method#getBytecodeByteArg(int)->byte::: method get bytecode byte arg
sun.jvm.hotspot.oops.Method#getBytecodeShortArg(int)->short:::Fetches a 16-bit big-endian ("Java ordered") value from the       bytecode stream
sun.jvm.hotspot.oops.Method#getNativeShortArg(int)->short:::Fetches a 16-bit native ordered value from the       bytecode stream
sun.jvm.hotspot.oops.Method#getBytecodeIntArg(int)->int:::Fetches a 32-bit big-endian ("Java ordered") value from the       bytecode stream
sun.jvm.hotspot.oops.Method#getNativeIntArg(int)->int:::Fetches a 32-bit native ordered value from the       bytecode stream
sun.jvm.hotspot.oops.Method#getByteCode()->byte[]::: method get byte code
sun.jvm.hotspot.oops.Method#getName()->Symbol::: method get name
sun.jvm.hotspot.oops.Method#getSignature()->Symbol::: method get signature
sun.jvm.hotspot.oops.Method#getGenericSignature()->Symbol::: method get generic signature
sun.jvm.hotspot.oops.Method#getMethodHolder()->InstanceKlass::: method get method holder
sun.jvm.hotspot.oops.Method#isPublic()->boolean::: method is public
sun.jvm.hotspot.oops.Method#isPrivate()->boolean::: method is private
sun.jvm.hotspot.oops.Method#isProtected()->boolean::: method is protected
sun.jvm.hotspot.oops.Method#isPackagePrivate()->boolean::: method is package private
sun.jvm.hotspot.oops.Method#isStatic()->boolean::: method is static
sun.jvm.hotspot.oops.Method#isFinal()->boolean::: method is final
sun.jvm.hotspot.oops.Method#isSynchronized()->boolean::: method is synchronized
sun.jvm.hotspot.oops.Method#isBridge()->boolean::: method is bridge
sun.jvm.hotspot.oops.Method#isVarArgs()->boolean::: method is var args
sun.jvm.hotspot.oops.Method#isNative()->boolean::: method is native
sun.jvm.hotspot.oops.Method#isAbstract()->boolean::: method is abstract
sun.jvm.hotspot.oops.Method#isStrict()->boolean::: method is strict
sun.jvm.hotspot.oops.Method#isSynthetic()->boolean::: method is synthetic
sun.jvm.hotspot.oops.Method#isConstructor()->boolean::: method is constructor
sun.jvm.hotspot.oops.Method#isStaticInitializer()->boolean::: method is static initializer
sun.jvm.hotspot.oops.Method#isObsolete()->boolean::: method is obsolete
sun.jvm.hotspot.oops.Method#getMaskFor(int)->OopMapCacheEntry::: method get mask for
sun.jvm.hotspot.oops.Method#getSize()->long::: method get size
sun.jvm.hotspot.oops.Method#printValueOn(PrintStream)->void::: method print value on
sun.jvm.hotspot.oops.Method#iterateFields(MetadataVisitor)->void::: method iterate fields
sun.jvm.hotspot.oops.Method#hasLineNumberTable()->boolean::: method has line number table
sun.jvm.hotspot.oops.Method#getLineNumberFromBCI(int)->int::: method get line number from i
sun.jvm.hotspot.oops.Method#getLineNumberTable()->LineNumberTableElement[]::: method get line number table
sun.jvm.hotspot.oops.Method#hasLocalVariableTable()->boolean::: method has local variable table
sun.jvm.hotspot.oops.Method#getLocalVariableTable()->LocalVariableTableElement[]:::Should only be called if table is present
sun.jvm.hotspot.oops.Method#getLocalVariableName(int, int)->Symbol::: method get local variable name
sun.jvm.hotspot.oops.Method#hasExceptionTable()->boolean::: method has exception table
sun.jvm.hotspot.oops.Method#getExceptionTable()->ExceptionTableElement[]::: method get exception table
sun.jvm.hotspot.oops.Method#hasCheckedExceptions()->boolean::: method has checked exceptions
sun.jvm.hotspot.oops.Method#getCheckedExceptions()->CheckedExceptionElement[]:::Should only be called if table is present
sun.jvm.hotspot.oops.Method#externalNameAndSignature()->String:::Returns name and signature in external form for debugging       purposes
sun.jvm.hotspot.oops.Method#dumpReplayData(PrintStream)->void::: method dump replay data
sun.jvm.hotspot.oops.Method#interpreterThrowoutCount()->int::: method interpreter throwout count
sun.jvm.hotspot.oops.Method#interpreterInvocationCount()->int::: method interpreter invocation count
sun.jvm.hotspot.oops.Method#nameAsAscii()->String::: method name as ascii
sun.jvm.hotspot.oops.MethodCounters#interpreterInvocationCount()->int::: method counters interpreter invocation count
sun.jvm.hotspot.oops.MethodCounters#interpreterThrowoutCount()->int::: method counters interpreter throwout count
sun.jvm.hotspot.oops.MethodCounters#getInvocationCounter()->long::: method counters get invocation counter
sun.jvm.hotspot.oops.MethodCounters#getBackedgeCounter()->long::: method counters get backedge counter
sun.jvm.hotspot.oops.MethodCounters#printValueOn(PrintStream)->void::: method counters print value on
sun.jvm.hotspot.oops.MethodData#trapReasonName(int)->String::: method data trap reason name
sun.jvm.hotspot.oops.MethodData#trapStateReason(int)->int::: method data trap state reason
sun.jvm.hotspot.oops.MethodData#trapStateIsRecompiled(int)->boolean::: method data trap state is recompiled
sun.jvm.hotspot.oops.MethodData#reasonIsRecordedPerBytecode(int)->boolean::: method data reason is recorded per bytecode
sun.jvm.hotspot.oops.MethodData#trapStateAddReason(int, int)->int::: method data trap state add reason
sun.jvm.hotspot.oops.MethodData#trapStateSetRecompiled(int, boolean)->int::: method data trap state set recompiled
sun.jvm.hotspot.oops.MethodData#formatTrapState(int)->String::: method data format trap state
sun.jvm.hotspot.oops.MethodData#getKlassAtAddress(Address)->Klass::: method data get klass at address
sun.jvm.hotspot.oops.MethodData#getMethodAtAddress(Address)->Method::: method data get method at address
sun.jvm.hotspot.oops.MethodData#printKlassValueOn(Klass, PrintStream)->void::: method data print klass value on
sun.jvm.hotspot.oops.MethodData#printMethodValueOn(Method, PrintStream)->void::: method data print method value on
sun.jvm.hotspot.oops.MethodData#isMethodData()->boolean::: method data is method data
sun.jvm.hotspot.oops.MethodData#getMethod()->Method::: method data get method
sun.jvm.hotspot.oops.MethodData#printValueOn(PrintStream)->void::: method data print value on
sun.jvm.hotspot.oops.MethodData#iterateFields(MetadataVisitor)->void::: method data iterate fields
sun.jvm.hotspot.oops.MethodData#dataSize()->int::: method data data size
sun.jvm.hotspot.oops.MethodData#sizeInBytes()->int::: method data size in bytes
sun.jvm.hotspot.oops.MethodData#size()->int::: method data size
sun.jvm.hotspot.oops.MethodData#parametersTypeData()->ParametersTypeData::: method data parameters type data
sun.jvm.hotspot.oops.MethodData#outOfBounds(int)->boolean::: method data out of bounds
sun.jvm.hotspot.oops.MethodData#dataAt(int)->ProfileData::: method data data at
sun.jvm.hotspot.oops.MethodData#dpToDi(int)->int::: method data dp to di
sun.jvm.hotspot.oops.MethodData#firstDi()->int::: method data first di
sun.jvm.hotspot.oops.MethodData#firstData()->ProfileData::: method data first data
sun.jvm.hotspot.oops.MethodData#nextData(ProfileData)->ProfileData::: method data next data
sun.jvm.hotspot.oops.MethodData#isValid(ProfileData)->boolean::: method data is valid
sun.jvm.hotspot.oops.MethodData#limitDataPosition()->DataLayout::: method data limit data position
sun.jvm.hotspot.oops.MethodData#extraDataBase()->DataLayout::: method data extra data base
sun.jvm.hotspot.oops.MethodData#extraDataLimit()->DataLayout::: method data extra data limit
sun.jvm.hotspot.oops.MethodData#extraNbCells(DataLayout)->int::: method data extra nb cells
sun.jvm.hotspot.oops.MethodData#nextExtra(DataLayout)->DataLayout::: method data next extra
sun.jvm.hotspot.oops.MethodData#printDataOn(PrintStream)->void::: method data print data on
sun.jvm.hotspot.oops.MethodData#orig()->byte[]::: method data orig
sun.jvm.hotspot.oops.MethodData#data()->long[]::: method data data
sun.jvm.hotspot.oops.MethodData#mileageOf(Method)->int::: method data mileage of
sun.jvm.hotspot.oops.MethodData#currentMileage()->int::: method data current mileage
sun.jvm.hotspot.oops.MethodData#dumpReplayDataTypeHelper(PrintStream, int, int, int, ProfileData, Klass)->int::: method data dump replay data type helper
sun.jvm.hotspot.oops.MethodData#dumpReplayDataReceiverTypeHelper(PrintStream, int, int, ReceiverTypeData)->int::: method data dump replay data receiver type helper
sun.jvm.hotspot.oops.MethodData#dumpReplayDataCallTypeHelper(PrintStream, int, int, CallTypeDataInterface)->int::: method data dump replay data call type helper
sun.jvm.hotspot.oops.MethodData#dumpReplayDataExtraDataHelper(PrintStream, int, int)->int::: method data dump replay data extra data helper
sun.jvm.hotspot.oops.MethodData#dumpReplayData(PrintStream)->void::: method data dump replay data
sun.jvm.hotspot.oops.MethodDataInterface#getKlassAtAddress(Address)->K::: method data interface get klass at address
sun.jvm.hotspot.oops.MethodDataInterface#getMethodAtAddress(Address)->M::: method data interface get method at address
sun.jvm.hotspot.oops.MethodDataInterface#printKlassValueOn(K, PrintStream)->void::: method data interface print klass value on
sun.jvm.hotspot.oops.MethodDataInterface#printMethodValueOn(M, PrintStream)->void::: method data interface print method value on
sun.jvm.hotspot.oops.MultiBranchData#numberOfCases()->int::: multi branch data number of cases
sun.jvm.hotspot.oops.MultiBranchData#defaultCount()->int::: multi branch data default count
sun.jvm.hotspot.oops.MultiBranchData#defaultDisplacement()->int::: multi branch data default displacement
sun.jvm.hotspot.oops.MultiBranchData#countAt(int)->int::: multi branch data count at
sun.jvm.hotspot.oops.MultiBranchData#displacementAt(int)->int::: multi branch data displacement at
sun.jvm.hotspot.oops.MultiBranchData#defaultCountOffset()->int::: multi branch data default count offset
sun.jvm.hotspot.oops.MultiBranchData#defaultDisplacementOffset()->int::: multi branch data default displacement offset
sun.jvm.hotspot.oops.MultiBranchData#caseCountOffset(int)->int::: multi branch data case count offset
sun.jvm.hotspot.oops.MultiBranchData#caseArrayOffset()->int::: multi branch data case array offset
sun.jvm.hotspot.oops.MultiBranchData#perCaseSize()->int::: multi branch data per case size
sun.jvm.hotspot.oops.MultiBranchData#relativeCountOffset()->int::: multi branch data relative count offset
sun.jvm.hotspot.oops.MultiBranchData#relativeDisplacementOffset()->int::: multi branch data relative displacement offset
sun.jvm.hotspot.oops.MultiBranchData#printDataOn(PrintStream)->void::: multi branch data print data on
sun.jvm.hotspot.oops.NamedFieldIdentifier#getName()->String::: named field identifier get name
sun.jvm.hotspot.oops.NamedFieldIdentifier#printOn(PrintStream)->void::: named field identifier print on
sun.jvm.hotspot.oops.NamedFieldIdentifier#equals(Object)->boolean::: named field identifier equals
sun.jvm.hotspot.oops.NamedFieldIdentifier#hashCode()->int::: named field identifier hash code
sun.jvm.hotspot.oops.NarrowKlassField#getValue(Address)->Metadata::: narrow klass field get value
sun.jvm.hotspot.oops.NarrowKlassField#setValue(Oop, long)->void::: narrow klass field set value
sun.jvm.hotspot.oops.NarrowOopField#getValue(Oop)->Oop::: narrow oop field get value
sun.jvm.hotspot.oops.NarrowOopField#getValueAsOopHandle(Oop)->OopHandle:::Debugging support
sun.jvm.hotspot.oops.NarrowOopField#setValue(Oop)->void::: narrow oop field set value
sun.jvm.hotspot.oops.ObjArray#isObjArray()->boolean::: obj array is obj array
sun.jvm.hotspot.oops.ObjArray#getOopHandleAt(long)->OopHandle::: obj array get oop handle at
sun.jvm.hotspot.oops.ObjArray#getObjAt(long)->Oop::: obj array get obj at
sun.jvm.hotspot.oops.ObjArray#printValueOn(PrintStream)->void::: obj array print value on
sun.jvm.hotspot.oops.ObjArray#iterateFields(OopVisitor, boolean)->void::: obj array iterate fields
sun.jvm.hotspot.oops.ObjArrayKlass#getElementKlass()->Klass::: obj array klass get element klass
sun.jvm.hotspot.oops.ObjArrayKlass#getBottomKlass()->Klass::: obj array klass get bottom klass
sun.jvm.hotspot.oops.ObjArrayKlass#computeModifierFlags()->long::: obj array klass compute modifier flags
sun.jvm.hotspot.oops.ObjArrayKlass#iterateFields(MetadataVisitor)->void::: obj array klass iterate fields
sun.jvm.hotspot.oops.ObjArrayKlass#arrayKlassImpl(boolean, int)->Klass::: obj array klass array klass impl
sun.jvm.hotspot.oops.ObjArrayKlass#arrayKlassImpl(boolean)->Klass::: obj array klass array klass impl
sun.jvm.hotspot.oops.ObjArrayKlass#printValueOn(PrintStream)->void::: obj array klass print value on
sun.jvm.hotspot.oops.ObjectHeap#initialize(TypeDataBase)->void::: object heap initialize
sun.jvm.hotspot.oops.ObjectHeap#equal(Oop, Oop)->boolean:::Comparison operation for oops, either or both of which may be null
sun.jvm.hotspot.oops.ObjectHeap#getOopSize()->long::: object heap get oop size
sun.jvm.hotspot.oops.ObjectHeap#getByteSize()->long::: object heap get byte size
sun.jvm.hotspot.oops.ObjectHeap#getCharSize()->long::: object heap get char size
sun.jvm.hotspot.oops.ObjectHeap#getBooleanSize()->long::: object heap get boolean size
sun.jvm.hotspot.oops.ObjectHeap#getIntSize()->long::: object heap get int size
sun.jvm.hotspot.oops.ObjectHeap#getShortSize()->long::: object heap get short size
sun.jvm.hotspot.oops.ObjectHeap#getLongSize()->long::: object heap get long size
sun.jvm.hotspot.oops.ObjectHeap#getFloatSize()->long::: object heap get float size
sun.jvm.hotspot.oops.ObjectHeap#getDoubleSize()->long::: object heap get double size
sun.jvm.hotspot.oops.ObjectHeap#getBoolArrayKlassObj()->TypeArrayKlass::: object heap get bool array klass obj
sun.jvm.hotspot.oops.ObjectHeap#getByteArrayKlassObj()->TypeArrayKlass::: object heap get byte array klass obj
sun.jvm.hotspot.oops.ObjectHeap#getCharArrayKlassObj()->TypeArrayKlass::: object heap get char array klass obj
sun.jvm.hotspot.oops.ObjectHeap#getIntArrayKlassObj()->TypeArrayKlass::: object heap get int array klass obj
sun.jvm.hotspot.oops.ObjectHeap#getShortArrayKlassObj()->TypeArrayKlass::: object heap get short array klass obj
sun.jvm.hotspot.oops.ObjectHeap#getLongArrayKlassObj()->TypeArrayKlass::: object heap get long array klass obj
sun.jvm.hotspot.oops.ObjectHeap#getSingleArrayKlassObj()->TypeArrayKlass::: object heap get single array klass obj
sun.jvm.hotspot.oops.ObjectHeap#getDoubleArrayKlassObj()->TypeArrayKlass::: object heap get double array klass obj
sun.jvm.hotspot.oops.ObjectHeap#typeArrayKlassObj(int)->Klass:::Takes a BasicType and returns the corresponding primitive array       klass
sun.jvm.hotspot.oops.ObjectHeap.ObjectFilter#canInclude(Oop)->boolean::: object filter can include
sun.jvm.hotspot.oops.ObjectHeap#iterate(HeapVisitor)->void:::The base heap iteration mechanism
sun.jvm.hotspot.oops.ObjectHeap#iterate(HeapVisitor, ObjectFilter)->void:::iterate objects satisfying a specified ObjectFilter
sun.jvm.hotspot.oops.ObjectHeap#iterateObjectsOfKlass(HeapVisitor, Klass, boolean)->void:::iterate objects of given Klass
sun.jvm.hotspot.oops.ObjectHeap#iterateObjectsOfKlass(HeapVisitor, Klass)->void:::iterate objects of given Klass (objects of subtypes included)
sun.jvm.hotspot.oops.ObjectHeap#iterateRaw(RawHeapVisitor)->void:::This routine can be used to iterate through the heap at an       extremely low level (stepping word-by-word) to provide the       ability to do very low-level debugging
sun.jvm.hotspot.oops.ObjectHeap#isValidMethod(Address)->boolean::: object heap is valid method
sun.jvm.hotspot.oops.ObjectHeap#newOop(OopHandle)->Oop::: object heap new oop
sun.jvm.hotspot.oops.ObjectHeap#print()->void::: object heap print
sun.jvm.hotspot.oops.ObjectHistogram#prologue(long)->void::: object histogram prologue
sun.jvm.hotspot.oops.ObjectHistogram#doObj(Oop)->boolean::: object histogram do obj
sun.jvm.hotspot.oops.ObjectHistogram#epilogue()->void::: object histogram epilogue
sun.jvm.hotspot.oops.ObjectHistogram#getElements()->List:::Call this after the iteration is complete to obtain the       ObjectHistogramElements in descending order of total heap size       consumed in the form of a List<ObjectHistogramElement>.
sun.jvm.hotspot.oops.ObjectHistogram#print()->void::: object histogram print
sun.jvm.hotspot.oops.ObjectHistogram#printOn(PrintStream)->void::: object histogram print on
sun.jvm.hotspot.oops.ObjectHistogramElement#updateWith(Oop)->void::: object histogram element update with
sun.jvm.hotspot.oops.ObjectHistogramElement#compare(ObjectHistogramElement)->int::: object histogram element compare
sun.jvm.hotspot.oops.ObjectHistogramElement#getKlass()->Klass:::Klass for this ObjectHistogramElement
sun.jvm.hotspot.oops.ObjectHistogramElement#getCount()->long:::Number of instances of klass
sun.jvm.hotspot.oops.ObjectHistogramElement#getSize()->long:::Total size of all these instances
sun.jvm.hotspot.oops.ObjectHistogramElement#getDescription()->String:::Human readable description *
sun.jvm.hotspot.oops.ObjectHistogramElement#titleOn(PrintStream)->void::: object histogram element title on
sun.jvm.hotspot.oops.ObjectHistogramElement#printOn(PrintStream)->void::: object histogram element print on
sun.jvm.hotspot.oops.Oop#getHeap()->ObjectHeap::: oop get heap
sun.jvm.hotspot.oops.Oop#getHandle()->OopHandle:::Should not be used or needed by most clients outside this       package; is needed, however, by sun.jvm.hotspot.utilities.MarkBits.
sun.jvm.hotspot.oops.Oop#getHeaderSize()->long::: oop get header size
sun.jvm.hotspot.oops.Oop#getMark()->Mark::: oop get mark
sun.jvm.hotspot.oops.Oop#getKlass()->Klass::: oop get klass
sun.jvm.hotspot.oops.Oop#isA(Klass)->boolean::: oop is a
sun.jvm.hotspot.oops.Oop#getObjectSize()->long::: oop get object size
sun.jvm.hotspot.oops.Oop#isInstance()->boolean::: oop is instance
sun.jvm.hotspot.oops.Oop#isInstanceRef()->boolean::: oop is instance ref
sun.jvm.hotspot.oops.Oop#isArray()->boolean::: oop is array
sun.jvm.hotspot.oops.Oop#isObjArray()->boolean::: oop is obj array
sun.jvm.hotspot.oops.Oop#isTypeArray()->boolean::: oop is type array
sun.jvm.hotspot.oops.Oop#isThread()->boolean::: oop is thread
sun.jvm.hotspot.oops.Oop#alignObjectSize(long)->long::: oop align object size
sun.jvm.hotspot.oops.Oop#alignObjectOffset(long)->long::: oop align object offset
sun.jvm.hotspot.oops.Oop#equals(Object)->boolean::: oop equals
sun.jvm.hotspot.oops.Oop#hashCode()->int::: oop hash code
sun.jvm.hotspot.oops.Oop#identityHash()->long:::Identity hash in the target VM
sun.jvm.hotspot.oops.Oop#slowIdentityHash()->long::: oop slow identity hash
sun.jvm.hotspot.oops.Oop#iterate(OopVisitor, boolean)->void::: oop iterate
sun.jvm.hotspot.oops.Oop#iterateFields(OopVisitor, boolean)->void::: oop iterate fields
sun.jvm.hotspot.oops.Oop#print()->void::: oop print
sun.jvm.hotspot.oops.Oop#printValue()->void::: oop print value
sun.jvm.hotspot.oops.Oop#printRaw()->void::: oop print raw
sun.jvm.hotspot.oops.Oop#printOopValueOn(Oop, PrintStream)->void::: oop print oop value on
sun.jvm.hotspot.oops.Oop#printOopAddressOn(Oop, PrintStream)->void::: oop print oop address on
sun.jvm.hotspot.oops.Oop#printOn(PrintStream)->void::: oop print on
sun.jvm.hotspot.oops.Oop#printValueOn(PrintStream)->void::: oop print value on
sun.jvm.hotspot.oops.Oop#printRawOn(PrintStream)->void::: oop print raw on
sun.jvm.hotspot.oops.Oop#verify()->boolean::: oop verify
sun.jvm.hotspot.oops.Oop#getKlassForOopHandle(OopHandle)->Klass::: oop get klass for oop handle
sun.jvm.hotspot.oops.OopField#getValue(Oop)->Oop::: oop field get value
sun.jvm.hotspot.oops.OopField#getValueAsOopHandle(Oop)->OopHandle:::Debugging support
sun.jvm.hotspot.oops.OopField#getValue(VMObject)->Oop::: oop field get value
sun.jvm.hotspot.oops.OopField#getValueAsOopHandle(VMObject)->OopHandle:::Debugging support
sun.jvm.hotspot.oops.OopField#setValue(Oop)->void::: oop field set value
sun.jvm.hotspot.oops.OopPrinter#prologue()->void::: oop printer prologue
sun.jvm.hotspot.oops.OopPrinter#epilogue()->void::: oop printer epilogue
sun.jvm.hotspot.oops.OopPrinter#setObj(Oop)->void::: oop printer set obj
sun.jvm.hotspot.oops.OopPrinter#getObj()->Oop::: oop printer get obj
sun.jvm.hotspot.oops.OopPrinter#doMetadata(MetadataField, boolean)->void::: oop printer do metadata
sun.jvm.hotspot.oops.OopPrinter#doOop(OopField, boolean)->void::: oop printer do oop
sun.jvm.hotspot.oops.OopPrinter#doOop(NarrowOopField, boolean)->void::: oop printer do oop
sun.jvm.hotspot.oops.OopPrinter#doChar(CharField, boolean)->void::: oop printer do char
sun.jvm.hotspot.oops.OopPrinter#doByte(ByteField, boolean)->void::: oop printer do byte
sun.jvm.hotspot.oops.OopPrinter#doBoolean(BooleanField, boolean)->void::: oop printer do boolean
sun.jvm.hotspot.oops.OopPrinter#doShort(ShortField, boolean)->void::: oop printer do short
sun.jvm.hotspot.oops.OopPrinter#doInt(IntField, boolean)->void::: oop printer do int
sun.jvm.hotspot.oops.OopPrinter#doLong(LongField, boolean)->void::: oop printer do long
sun.jvm.hotspot.oops.OopPrinter#doFloat(FloatField, boolean)->void::: oop printer do float
sun.jvm.hotspot.oops.OopPrinter#doDouble(DoubleField, boolean)->void::: oop printer do double
sun.jvm.hotspot.oops.OopPrinter#doCInt(CIntField, boolean)->void::: oop printer do int
sun.jvm.hotspot.oops.OopUtilities#charArrayToString(TypeArray)->String::: oop utilities char array to string
sun.jvm.hotspot.oops.OopUtilities#byteArrayToString(TypeArray, byte)->String::: oop utilities byte array to string
sun.jvm.hotspot.oops.OopUtilities#escapeString(String)->String::: oop utilities escape string
sun.jvm.hotspot.oops.OopUtilities#stringOopToString(Oop)->String::: oop utilities string oop to string
sun.jvm.hotspot.oops.OopUtilities#stringOopToEscapedString(Oop)->String::: oop utilities string oop to escaped string
sun.jvm.hotspot.oops.OopUtilities#threadGroupOopGetParent(Oop)->Oop::: oop utilities thread group oop get parent
sun.jvm.hotspot.oops.OopUtilities#threadGroupOopGetName(Oop)->String::: oop utilities thread group oop get name
sun.jvm.hotspot.oops.OopUtilities#threadGroupOopGetThreads(Oop)->Oop[]::: oop utilities thread group oop get threads
sun.jvm.hotspot.oops.OopUtilities#threadGroupOopGetGroups(Oop)->Oop[]::: oop utilities thread group oop get groups
sun.jvm.hotspot.oops.OopUtilities#threadOopGetThreadGroup(Oop)->Oop::: oop utilities thread oop get thread group
sun.jvm.hotspot.oops.OopUtilities#threadOopGetName(Oop)->String::: oop utilities thread oop get name
sun.jvm.hotspot.oops.OopUtilities#threadOopGetJavaThread(Oop)->JavaThread:::May return null if, e.g., thread was not started
sun.jvm.hotspot.oops.OopUtilities#threadOopGetTID(Oop)->long::: oop utilities thread oop get d
sun.jvm.hotspot.oops.OopUtilities#threadOopGetThreadStatus(Oop)->int:::returns value of java.lang.Thread.threadStatus field
sun.jvm.hotspot.oops.OopUtilities#threadOopGetParkBlocker(Oop)->Oop:::returns value of java.lang.Thread.parkBlocker field
sun.jvm.hotspot.oops.OopUtilities#abstractOwnableSynchronizerGetOwnerThread(Oop)->Oop::: oop utilities abstract ownable synchronizer get owner thread
sun.jvm.hotspot.oops.OopUtilities#threadOopGetPriority(Oop)->int::: oop utilities thread oop get priority
sun.jvm.hotspot.oops.OopUtilities#threadOopGetDaemon(Oop)->boolean::: oop utilities thread oop get daemon
sun.jvm.hotspot.oops.OopUtilities#threadOopGetThreadStatusName(Oop)->String::: oop utilities thread oop get thread status name
sun.jvm.hotspot.oops.OopVisitor#prologue()->void::: oop visitor prologue
sun.jvm.hotspot.oops.OopVisitor#epilogue()->void::: oop visitor epilogue
sun.jvm.hotspot.oops.OopVisitor#setObj(Oop)->void::: oop visitor set obj
sun.jvm.hotspot.oops.OopVisitor#getObj()->Oop::: oop visitor get obj
sun.jvm.hotspot.oops.ParametersTypeData#stackSlotLocalOffset(int)->int::: parameters type data stack slot local offset
sun.jvm.hotspot.oops.ParametersTypeData#typeLocalOffset(int)->int::: parameters type data type local offset
sun.jvm.hotspot.oops.ParametersTypeData#numberOfParameters()->int::: parameters type data number of parameters
sun.jvm.hotspot.oops.ParametersTypeData#stackSlot(int)->int::: parameters type data stack slot
sun.jvm.hotspot.oops.ParametersTypeData#type(int)->K::: parameters type data type
sun.jvm.hotspot.oops.ParametersTypeData#typeIndex(int)->int::: parameters type data type index
sun.jvm.hotspot.oops.ParametersTypeData#printDataOn(PrintStream)->void::: parameters type data print data on
sun.jvm.hotspot.oops.ProfileData#data()->DataLayout::: profile data data
sun.jvm.hotspot.oops.ProfileData#cellCount()->int::: profile data cell count
sun.jvm.hotspot.oops.ProfileData#sizeInBytes()->int::: profile data size in bytes
sun.jvm.hotspot.oops.ProfileData#dp()->int::: profile data dp
sun.jvm.hotspot.oops.ProfileData#intptrAt(int)->int::: profile data intptr at
sun.jvm.hotspot.oops.ProfileData#intAt(int)->int::: profile data int at
sun.jvm.hotspot.oops.ProfileData#uintAt(int)->int::: profile data uint at
sun.jvm.hotspot.oops.ProfileData#addressAt(int)->Address::: profile data address at
sun.jvm.hotspot.oops.ProfileData#flagAt(int)->boolean::: profile data flag at
sun.jvm.hotspot.oops.ProfileData#cellOffset(int)->int::: profile data cell offset
sun.jvm.hotspot.oops.ProfileData#bci()->int::: profile data bci
sun.jvm.hotspot.oops.ProfileData#trapState()->int::: profile data trap state
sun.jvm.hotspot.oops.ProfileData#printDataOn(PrintStream)->void::: profile data print data on
sun.jvm.hotspot.oops.ProfileData#tab(PrintStream)->void::: profile data tab
sun.jvm.hotspot.oops.ProfileData#printShared(PrintStream, String)->void::: profile data print shared
sun.jvm.hotspot.oops.ProfileData#toString()->String::: profile data to string
sun.jvm.hotspot.oops.RawHeapVisitor#prologue(long)->void:::This is called at the beginning of the iteration to provide the       RawHeapVisitor with information about the amount of memory which       will be traversed (for example, for displaying a progress bar)
sun.jvm.hotspot.oops.RawHeapVisitor#epilogue()->void:::This is called after the traversal is complete
sun.jvm.hotspot.oops.ReceiverTypeData#isReceivertypedata()->boolean::: receiver type data is receivertypedata
sun.jvm.hotspot.oops.ReceiverTypeData#staticCellCount()->int::: receiver type data static cell count
sun.jvm.hotspot.oops.ReceiverTypeData#cellCount()->int::: receiver type data cell count
sun.jvm.hotspot.oops.ReceiverTypeData#rowLimit()->int::: receiver type data row limit
sun.jvm.hotspot.oops.ReceiverTypeData#receiverCellIndex(int)->int::: receiver type data receiver cell index
sun.jvm.hotspot.oops.ReceiverTypeData#receiverCountCellIndex(int)->int::: receiver type data receiver count cell index
sun.jvm.hotspot.oops.ReceiverTypeData#receiverUnchecked(int)->K::: receiver type data receiver unchecked
sun.jvm.hotspot.oops.ReceiverTypeData#receiver(int)->K::: receiver type data receiver
sun.jvm.hotspot.oops.ReceiverTypeData#receiverCount(int)->int::: receiver type data receiver count
sun.jvm.hotspot.oops.ReceiverTypeData#receiverOffset(int)->int::: receiver type data receiver offset
sun.jvm.hotspot.oops.ReceiverTypeData#receiverCountOffset(int)->int::: receiver type data receiver count offset
sun.jvm.hotspot.oops.ReceiverTypeData#receiverTypeDataSize()->int::: receiver type data receiver type data size
sun.jvm.hotspot.oops.ReceiverTypeData#printReceiverDataOn(PrintStream)->void::: receiver type data print receiver data on
sun.jvm.hotspot.oops.ReceiverTypeData#printDataOn(PrintStream)->void::: receiver type data print data on
sun.jvm.hotspot.oops.RetData#staticCellCount()->int::: ret data static cell count
sun.jvm.hotspot.oops.RetData#cellCount()->int::: ret data cell count
sun.jvm.hotspot.oops.RetData#rowLimit()->int::: ret data row limit
sun.jvm.hotspot.oops.RetData#bciCellIndex(int)->int::: ret data bci cell index
sun.jvm.hotspot.oops.RetData#bciCountCellIndex(int)->int::: ret data bci count cell index
sun.jvm.hotspot.oops.RetData#bciDisplacementCellIndex(int)->int::: ret data bci displacement cell index
sun.jvm.hotspot.oops.RetData#bci(int)->int::: ret data bci
sun.jvm.hotspot.oops.RetData#bciCount(int)->int::: ret data bci count
sun.jvm.hotspot.oops.RetData#bciDisplacement(int)->int::: ret data bci displacement
sun.jvm.hotspot.oops.RetData#bciOffset(int)->int::: ret data bci offset
sun.jvm.hotspot.oops.RetData#bciCountOffset(int)->int::: ret data bci count offset
sun.jvm.hotspot.oops.RetData#bciDisplacementOffset(int)->int::: ret data bci displacement offset
sun.jvm.hotspot.oops.RetData#printDataOn(PrintStream)->void::: ret data print data on
sun.jvm.hotspot.oops.ReturnTypeEntry#type()->K::: return type entry type
sun.jvm.hotspot.oops.ReturnTypeEntry#staticCellCount()->int::: return type entry static cell count
sun.jvm.hotspot.oops.ReturnTypeEntry#typeIndex()->int::: return type entry type index
sun.jvm.hotspot.oops.ReturnTypeEntry#printDataOn(PrintStream)->void::: return type entry print data on
sun.jvm.hotspot.oops.ShortField#getValue(Oop)->short::: short field get value
sun.jvm.hotspot.oops.ShortField#getValue(VMObject)->short::: short field get value
sun.jvm.hotspot.oops.ShortField#setValue(Oop, short)->void::: short field set value
sun.jvm.hotspot.oops.SpeculativeTrapData#staticCellCount()->int::: speculative trap data static cell count
sun.jvm.hotspot.oops.SpeculativeTrapData#cellCount()->int::: speculative trap data cell count
sun.jvm.hotspot.oops.SpeculativeTrapData#method()->M::: speculative trap data method
sun.jvm.hotspot.oops.SpeculativeTrapData#methodIndex()->int::: speculative trap data method index
sun.jvm.hotspot.oops.SpeculativeTrapData#printDataOn(PrintStream)->void::: speculative trap data print data on
sun.jvm.hotspot.oops.Symbol#create(Address)->Symbol::: symbol create
sun.jvm.hotspot.oops.Symbol#isSymbol()->boolean::: symbol is symbol
sun.jvm.hotspot.oops.Symbol#getLength()->long::: symbol get length
sun.jvm.hotspot.oops.Symbol#getByteAt(long)->byte::: symbol get byte at
sun.jvm.hotspot.oops.Symbol#identityHash()->long::: symbol identity hash
sun.jvm.hotspot.oops.Symbol#equals(byte[])->boolean::: symbol equals
sun.jvm.hotspot.oops.Symbol#asByteArray()->byte[]::: symbol as byte array
sun.jvm.hotspot.oops.Symbol#asString()->String::: symbol as string
sun.jvm.hotspot.oops.Symbol#startsWith(String)->boolean::: symbol starts with
sun.jvm.hotspot.oops.Symbol#printValueOn(PrintStream)->void::: symbol print value on
sun.jvm.hotspot.oops.Symbol#fastCompare(Symbol)->long:::Note: this comparison is used for vtable sorting only; it       doesn't matter what order it defines, as long as it is a total,       time-invariant order Since Symbol* are in C_HEAP, their       relative order in memory never changes, so use address       comparison for speed.
sun.jvm.hotspot.oops.TypeArray#isTypeArray()->boolean::: type array is type array
sun.jvm.hotspot.oops.TypeArray#getByteAt(long)->byte::: type array get byte at
sun.jvm.hotspot.oops.TypeArray#getBooleanAt(long)->boolean::: type array get boolean at
sun.jvm.hotspot.oops.TypeArray#getCharAt(long)->char::: type array get char at
sun.jvm.hotspot.oops.TypeArray#getIntAt(long)->int::: type array get int at
sun.jvm.hotspot.oops.TypeArray#getShortAt(long)->short::: type array get short at
sun.jvm.hotspot.oops.TypeArray#getLongAt(long)->long::: type array get long at
sun.jvm.hotspot.oops.TypeArray#getFloatAt(long)->float::: type array get float at
sun.jvm.hotspot.oops.TypeArray#getDoubleAt(long)->double::: type array get double at
sun.jvm.hotspot.oops.TypeArray#printValueOn(PrintStream)->void::: type array print value on
sun.jvm.hotspot.oops.TypeArray#iterateFields(OopVisitor, boolean)->void::: type array iterate fields
sun.jvm.hotspot.oops.TypeArrayKlass#getMaxLength()->long::: type array klass get max length
sun.jvm.hotspot.oops.TypeArrayKlass#getTypeName()->String::: type array klass get type name
sun.jvm.hotspot.oops.TypeArrayKlass#getElementTypeName()->String::: type array klass get element type name
sun.jvm.hotspot.oops.TypeArrayKlass#printValueOn(PrintStream)->void::: type array klass print value on
sun.jvm.hotspot.oops.TypeArrayKlass#iterateFields(MetadataVisitor)->void::: type array klass iterate fields
sun.jvm.hotspot.oops.TypeArrayKlass#arrayKlassImpl(boolean, int)->Klass::: type array klass array klass impl
sun.jvm.hotspot.oops.TypeArrayKlass#arrayKlassImpl(boolean)->Klass::: type array klass array klass impl
sun.jvm.hotspot.oops.TypeEntries#wasNullSeen(int)->boolean::: type entries was null seen
sun.jvm.hotspot.oops.TypeEntries#isTypeUnknown(int)->boolean::: type entries is type unknown
sun.jvm.hotspot.oops.TypeEntries#isTypeNone(int)->boolean::: type entries is type none
sun.jvm.hotspot.oops.TypeEntries#validKlass(int)->K::: type entries valid klass
sun.jvm.hotspot.oops.TypeEntries#printKlass(PrintStream, int)->void::: type entries print klass
sun.jvm.hotspot.oops.TypeEntries#intptrAt(int)->long::: type entries intptr at
sun.jvm.hotspot.oops.TypeEntriesAtCall#stackSlotLocalOffset(int)->int::: type entries at call stack slot local offset
sun.jvm.hotspot.oops.TypeEntriesAtCall#argumentTypeLocalOffset(int)->int::: type entries at call argument type local offset
sun.jvm.hotspot.oops.TypeEntriesAtCall#headerCellCount()->int::: type entries at call header cell count
sun.jvm.hotspot.oops.TypeEntriesAtCall#cellCountLocalOffset()->int::: type entries at call cell count local offset
sun.jvm.hotspot.oops.TypeStackSlotEntries#stackSlotOffset(int)->int::: type stack slot entries stack slot offset
sun.jvm.hotspot.oops.TypeStackSlotEntries#typeOffsetInCells(int)->int::: type stack slot entries type offset in cells
sun.jvm.hotspot.oops.TypeStackSlotEntries#stackSlotLocalOffset(int)->int::: type stack slot entries stack slot local offset
sun.jvm.hotspot.oops.TypeStackSlotEntries#typeLocalOffset(int)->int::: type stack slot entries type local offset
sun.jvm.hotspot.oops.TypeStackSlotEntries#stackSlot(int)->int::: type stack slot entries stack slot
sun.jvm.hotspot.oops.TypeStackSlotEntries#type(int)->K::: type stack slot entries type
sun.jvm.hotspot.oops.TypeStackSlotEntries#perArgCount()->int::: type stack slot entries per arg count
sun.jvm.hotspot.oops.TypeStackSlotEntries#typeIndex(int)->int::: type stack slot entries type index
sun.jvm.hotspot.oops.TypeStackSlotEntries#printDataOn(PrintStream)->void::: type stack slot entries print data on
sun.jvm.hotspot.oops.VirtualCallData#staticCellCount()->int::: virtual call data static cell count
sun.jvm.hotspot.oops.VirtualCallData#cellCount()->int::: virtual call data cell count
sun.jvm.hotspot.oops.VirtualCallData#virtualCallDataSize()->int::: virtual call data virtual call data size
sun.jvm.hotspot.oops.VirtualCallData#printDataOn(PrintStream)->void::: virtual call data print data on
sun.jvm.hotspot.oops.VirtualCallTypeData#cellCountGlobalOffset()->int::: virtual call type data cell count global offset
sun.jvm.hotspot.oops.VirtualCallTypeData#cellCountNoHeader()->int::: virtual call type data cell count no header
sun.jvm.hotspot.oops.VirtualCallTypeData#staticCellCount()->int::: virtual call type data static cell count
sun.jvm.hotspot.oops.VirtualCallTypeData#cellCount()->int::: virtual call type data cell count
sun.jvm.hotspot.oops.VirtualCallTypeData#numberOfArguments()->int::: virtual call type data number of arguments
sun.jvm.hotspot.oops.VirtualCallTypeData#hasArguments()->boolean::: virtual call type data has arguments
sun.jvm.hotspot.oops.VirtualCallTypeData#argumentType(int)->K::: virtual call type data argument type
sun.jvm.hotspot.oops.VirtualCallTypeData#hasReturn()->boolean::: virtual call type data has return
sun.jvm.hotspot.oops.VirtualCallTypeData#returnType()->K::: virtual call type data return type
sun.jvm.hotspot.oops.VirtualCallTypeData#argumentTypeIndex(int)->int::: virtual call type data argument type index
sun.jvm.hotspot.oops.VirtualCallTypeData#returnTypeIndex()->int::: virtual call type data return type index
sun.jvm.hotspot.oops.VirtualCallTypeData#printDataOn(PrintStream)->void::: virtual call type data print data on

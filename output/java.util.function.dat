BiConsumer#accept(T, U):::Performs this operation on the given arguments.:::
BiConsumer#andThen(BiConsumer):::Returns a composed BiConsumer that performs, in sequence, this operation followed by the after operation:::Objects.requireNonNull->this.accept->after.accept
BiFunction#apply(T, U):::Applies this function to the given arguments.:::
BiFunction#andThen(Function):::Returns a composed function that first applies this function to its input, and then applies the after function to the result:::Objects.requireNonNull->this.apply->after.apply
BinaryOperator#minBy(Comparator):::Returns a BinaryOperator which returns the lesser of two elements according to the specified Comparator.:::Objects.requireNonNull->comparator.compare
BinaryOperator#maxBy(Comparator):::Returns a BinaryOperator which returns the greater of two elements according to the specified Comparator.:::Objects.requireNonNull->comparator.compare
BiPredicate#test(T, U):::Evaluates this predicate on the given arguments.:::
BiPredicate#and(BiPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another:::Objects.requireNonNull->this.test->other.test
BiPredicate#negate():::Returns a predicate that represents the logical negation of this predicate.:::this.test
BiPredicate#or(BiPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another:::Objects.requireNonNull->this.test->other.test
BooleanSupplier#getAsBoolean():::Gets a result.:::
Consumer#accept(T):::Performs this operation on the given argument.:::
Consumer#andThen(Consumer):::Returns a composed Consumer that performs, in sequence, this operation followed by the after operation:::Objects.requireNonNull->this.accept->after.accept
DoubleBinaryOperator#applyAsDouble(double, double):::Applies this operator to the given operands.:::
DoubleConsumer#accept(double):::Performs this operation on the given argument.:::
DoubleConsumer#andThen(DoubleConsumer):::Returns a composed DoubleConsumer that performs, in sequence, this operation followed by the after operation:::Objects.requireNonNull->this.accept->after.accept
DoubleFunction#apply(double):::Applies this function to the given argument.:::
DoublePredicate#test(double):::Evaluates this predicate on the given argument.:::
DoublePredicate#and(DoublePredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another:::Objects.requireNonNull->this.test->other.test
DoublePredicate#negate():::Returns a predicate that represents the logical negation of this predicate.:::this.test
DoublePredicate#or(DoublePredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another:::Objects.requireNonNull->this.test->other.test
DoubleSupplier#getAsDouble():::Gets a result.:::
DoubleToIntFunction#applyAsInt(double):::Applies this function to the given argument.:::
DoubleToLongFunction#applyAsLong(double):::Applies this function to the given argument.:::
DoubleUnaryOperator#applyAsDouble(double):::Applies this operator to the given operand.:::
DoubleUnaryOperator#compose(DoubleUnaryOperator):::Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result:::Objects.requireNonNull->before.applyAsDouble->this.applyAsDouble
DoubleUnaryOperator#andThen(DoubleUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result:::Objects.requireNonNull->this.applyAsDouble->after.applyAsDouble
DoubleUnaryOperator#identity():::Returns a unary operator that always returns its input argument.:::
Function#apply(T):::Applies this function to the given argument.:::
Function#compose(Function):::Returns a composed function that first applies the before function to its input, and then applies this function to the result:::Objects.requireNonNull->before.apply->this.apply
Function#andThen(Function):::Returns a composed function that first applies this function to its input, and then applies the after function to the result:::Objects.requireNonNull->this.apply->after.apply
Function#identity():::Returns a function that always returns its input argument.:::
IntBinaryOperator#applyAsInt(int, int):::Applies this operator to the given operands.:::
IntConsumer#accept(int):::Performs this operation on the given argument.:::
IntConsumer#andThen(IntConsumer):::Returns a composed IntConsumer that performs, in sequence, this operation followed by the after operation:::Objects.requireNonNull->this.accept->after.accept
IntFunction#apply(int):::Applies this function to the given argument.:::
IntPredicate#test(int):::Evaluates this predicate on the given argument.:::
IntPredicate#and(IntPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another:::Objects.requireNonNull->this.test->other.test
IntPredicate#negate():::Returns a predicate that represents the logical negation of this predicate.:::this.test
IntPredicate#or(IntPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another:::Objects.requireNonNull->this.test->other.test
IntSupplier#getAsInt():::Gets a result.:::
IntToDoubleFunction#applyAsDouble(int):::Applies this function to the given argument.:::
IntToLongFunction#applyAsLong(int):::Applies this function to the given argument.:::
IntUnaryOperator#applyAsInt(int):::Applies this operator to the given operand.:::
IntUnaryOperator#compose(IntUnaryOperator):::Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result:::Objects.requireNonNull->before.applyAsInt->this.applyAsInt
IntUnaryOperator#andThen(IntUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result:::Objects.requireNonNull->this.applyAsInt->after.applyAsInt
IntUnaryOperator#identity():::Returns a unary operator that always returns its input argument.:::
LongBinaryOperator#applyAsLong(long, long):::Applies this operator to the given operands.:::
LongConsumer#accept(long):::Performs this operation on the given argument.:::
LongConsumer#andThen(LongConsumer):::Returns a composed LongConsumer that performs, in sequence, this operation followed by the after operation:::Objects.requireNonNull->this.accept->after.accept
LongFunction#apply(long):::Applies this function to the given argument.:::
LongPredicate#test(long):::Evaluates this predicate on the given argument.:::
LongPredicate#and(LongPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another:::Objects.requireNonNull->this.test->other.test
LongPredicate#negate():::Returns a predicate that represents the logical negation of this predicate.:::this.test
LongPredicate#or(LongPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another:::Objects.requireNonNull->this.test->other.test
LongSupplier#getAsLong():::Gets a result.:::
LongToDoubleFunction#applyAsDouble(long):::Applies this function to the given argument.:::
LongToIntFunction#applyAsInt(long):::Applies this function to the given argument.:::
LongUnaryOperator#applyAsLong(long):::Applies this operator to the given operand.:::
LongUnaryOperator#compose(LongUnaryOperator):::Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result:::Objects.requireNonNull->before.applyAsLong->this.applyAsLong
LongUnaryOperator#andThen(LongUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result:::Objects.requireNonNull->this.applyAsLong->after.applyAsLong
LongUnaryOperator#identity():::Returns a unary operator that always returns its input argument.:::
ObjDoubleConsumer#accept(T, double):::Performs this operation on the given arguments.:::
ObjIntConsumer#accept(T, int):::Performs this operation on the given arguments.:::
ObjLongConsumer#accept(T, long):::Performs this operation on the given arguments.:::
Predicate#test(T):::Evaluates this predicate on the given argument.:::
Predicate#and(Predicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another:::Objects.requireNonNull->this.test->other.test
Predicate#negate():::Returns a predicate that represents the logical negation of this predicate.:::this.test
Predicate#or(Predicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another:::Objects.requireNonNull->this.test->other.test
Predicate#isEqual(Object):::Returns a predicate that tests if two arguments are equal according to Objects#equals(Object, Object).:::targetRef.equals
Predicate#not(Predicate):::Returns a predicate that is the negation of the supplied predicate:::Objects.requireNonNull->target.negate
Supplier#get():::Gets a result.:::
ToDoubleBiFunction#applyAsDouble(T, U):::Applies this function to the given arguments.:::
ToDoubleFunction#applyAsDouble(T):::Applies this function to the given argument.:::
ToIntBiFunction#applyAsInt(T, U):::Applies this function to the given arguments.:::
ToIntFunction#applyAsInt(T):::Applies this function to the given argument.:::
ToLongBiFunction#applyAsLong(T, U):::Applies this function to the given arguments.:::
ToLongFunction#applyAsLong(T):::Applies this function to the given argument.:::
UnaryOperator#identity():::Returns a unary operator that always returns its input argument.:::

BiConsumer#accept(T, U):::Performs this operation on the given arguments.
BiConsumer#andThen(BiConsumer):::Returns a composed BiConsumer that performs, in sequence, this operation followed by the after operation
BiFunction#apply(T, U):::Applies this function to the given arguments.
BiFunction#andThen(Function):::Returns a composed function that first applies this function to its input, and then applies the after function to the result
BinaryOperator#minBy(Comparator):::Returns a BinaryOperator which returns the lesser of two elements according to the specified Comparator.
BinaryOperator#maxBy(Comparator):::Returns a BinaryOperator which returns the greater of two elements according to the specified Comparator.
BiPredicate#test(T, U):::Evaluates this predicate on the given arguments.
BiPredicate#and(BiPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
BiPredicate#negate():::Returns a predicate that represents the logical negation of this predicate.
BiPredicate#or(BiPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
BooleanSupplier#getAsBoolean():::Gets a result.
Consumer#accept(T):::Performs this operation on the given argument.
Consumer#andThen(Consumer):::Returns a composed Consumer that performs, in sequence, this operation followed by the after operation
DoubleBinaryOperator#applyAsDouble(double, double):::Applies this operator to the given operands.
DoubleConsumer#accept(double):::Performs this operation on the given argument.
DoubleConsumer#andThen(DoubleConsumer):::Returns a composed DoubleConsumer that performs, in sequence, this operation followed by the after operation
DoubleFunction#apply(double):::Applies this function to the given argument.
DoublePredicate#test(double):::Evaluates this predicate on the given argument.
DoublePredicate#and(DoublePredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
DoublePredicate#negate():::Returns a predicate that represents the logical negation of this predicate.
DoublePredicate#or(DoublePredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
DoubleSupplier#getAsDouble():::Gets a result.
DoubleToIntFunction#applyAsInt(double):::Applies this function to the given argument.
DoubleToLongFunction#applyAsLong(double):::Applies this function to the given argument.
DoubleUnaryOperator#applyAsDouble(double):::Applies this operator to the given operand.
DoubleUnaryOperator#compose(DoubleUnaryOperator):::Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result
DoubleUnaryOperator#andThen(DoubleUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result
DoubleUnaryOperator#identity():::Returns a unary operator that always returns its input argument.
Function#apply(T):::Applies this function to the given argument.
Function#compose(Function):::Returns a composed function that first applies the before function to its input, and then applies this function to the result
Function#andThen(Function):::Returns a composed function that first applies this function to its input, and then applies the after function to the result
Function#identity():::Returns a function that always returns its input argument.
IntBinaryOperator#applyAsInt(int, int):::Applies this operator to the given operands.
IntConsumer#accept(int):::Performs this operation on the given argument.
IntConsumer#andThen(IntConsumer):::Returns a composed IntConsumer that performs, in sequence, this operation followed by the after operation
IntFunction#apply(int):::Applies this function to the given argument.
IntPredicate#test(int):::Evaluates this predicate on the given argument.
IntPredicate#and(IntPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
IntPredicate#negate():::Returns a predicate that represents the logical negation of this predicate.
IntPredicate#or(IntPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
IntSupplier#getAsInt():::Gets a result.
IntToDoubleFunction#applyAsDouble(int):::Applies this function to the given argument.
IntToLongFunction#applyAsLong(int):::Applies this function to the given argument.
IntUnaryOperator#applyAsInt(int):::Applies this operator to the given operand.
IntUnaryOperator#compose(IntUnaryOperator):::Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result
IntUnaryOperator#andThen(IntUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result
IntUnaryOperator#identity():::Returns a unary operator that always returns its input argument.
LongBinaryOperator#applyAsLong(long, long):::Applies this operator to the given operands.
LongConsumer#accept(long):::Performs this operation on the given argument.
LongConsumer#andThen(LongConsumer):::Returns a composed LongConsumer that performs, in sequence, this operation followed by the after operation
LongFunction#apply(long):::Applies this function to the given argument.
LongPredicate#test(long):::Evaluates this predicate on the given argument.
LongPredicate#and(LongPredicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
LongPredicate#negate():::Returns a predicate that represents the logical negation of this predicate.
LongPredicate#or(LongPredicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
LongSupplier#getAsLong():::Gets a result.
LongToDoubleFunction#applyAsDouble(long):::Applies this function to the given argument.
LongToIntFunction#applyAsInt(long):::Applies this function to the given argument.
LongUnaryOperator#applyAsLong(long):::Applies this operator to the given operand.
LongUnaryOperator#compose(LongUnaryOperator):::Returns a composed operator that first applies the before operator to its input, and then applies this operator to the result
LongUnaryOperator#andThen(LongUnaryOperator):::Returns a composed operator that first applies this operator to its input, and then applies the after operator to the result
LongUnaryOperator#identity():::Returns a unary operator that always returns its input argument.
ObjDoubleConsumer#accept(T, double):::Performs this operation on the given arguments.
ObjIntConsumer#accept(T, int):::Performs this operation on the given arguments.
ObjLongConsumer#accept(T, long):::Performs this operation on the given arguments.
Predicate#test(T):::Evaluates this predicate on the given argument.
Predicate#and(Predicate):::Returns a composed predicate that represents a short-circuiting logical AND of this predicate and another
Predicate#negate():::Returns a predicate that represents the logical negation of this predicate.
Predicate#or(Predicate):::Returns a composed predicate that represents a short-circuiting logical OR of this predicate and another
Predicate#isEqual(Object):::Returns a predicate that tests if two arguments are equal according to Objects#equals(Object, Object).
Predicate#not(Predicate):::Returns a predicate that is the negation of the supplied predicate
Supplier#get():::Gets a result.
ToDoubleBiFunction#applyAsDouble(T, U):::Applies this function to the given arguments.
ToDoubleFunction#applyAsDouble(T):::Applies this function to the given argument.
ToIntBiFunction#applyAsInt(T, U):::Applies this function to the given arguments.
ToIntFunction#applyAsInt(T):::Applies this function to the given argument.
ToLongBiFunction#applyAsLong(T, U):::Applies this function to the given arguments.
ToLongFunction#applyAsLong(T):::Applies this function to the given argument.
UnaryOperator#identity():::Returns a unary operator that always returns its input argument.

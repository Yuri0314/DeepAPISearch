java.util.function.BiConsumer#accept(T, U)->void:::Performs this operation on the given arguments.
java.util.function.BiConsumer#U> andThen(BiConsumer<? super T, ? super U>)->BiConsumer<T,:::Returns a composed {@code BiConsumer} that performs, in sequence, this  operation followed by the {@code after} operation
java.util.function.BiFunction#apply(T, U)->R:::Applies this function to the given arguments.
java.util.function.BiFunction#U, V> andThen(Function<? super R, ? extends V>)->BiFunction<T,:::Returns a composed function that first applies this function to  its input, and then applies the {@code after} function to the result
java.util.function.BinaryOperator#minBy(Comparator<? super T>)->BinaryOperator<T>:::Returns a {@link BinaryOperator} which returns the lesser of two elements  according to the specified {@code Comparator}.
java.util.function.BinaryOperator#maxBy(Comparator<? super T>)->BinaryOperator<T>:::Returns a {@link BinaryOperator} which returns the greater of two elements  according to the specified {@code Comparator}.
java.util.function.BiPredicate#test(T, U)->boolean:::Evaluates this predicate on the given arguments.
java.util.function.BiPredicate#U> and(BiPredicate<? super T, ? super U>)->BiPredicate<T,:::Returns a composed predicate that represents a short-circuiting logical  AND of this predicate and another
java.util.function.BiPredicate#U> negate()->BiPredicate<T,:::Returns a predicate that represents the logical negation of this  predicate.
java.util.function.BiPredicate#U> or(BiPredicate<? super T, ? super U>)->BiPredicate<T,:::Returns a composed predicate that represents a short-circuiting logical  OR of this predicate and another
java.util.function.BooleanSupplier#getAsBoolean()->boolean:::Gets a result.
java.util.function.Consumer#accept(T)->void:::Performs this operation on the given argument.
java.util.function.Consumer#andThen(Consumer<? super T>)->Consumer<T>:::Returns a composed {@code Consumer} that performs, in sequence, this  operation followed by the {@code after} operation
java.util.function.DoubleBinaryOperator#applyAsDouble(double, double)->double:::Applies this operator to the given operands.
java.util.function.DoubleConsumer#accept(double)->void:::Performs this operation on the given argument.
java.util.function.DoubleConsumer#andThen(DoubleConsumer)->DoubleConsumer:::Returns a composed {@code DoubleConsumer} that performs, in sequence, this  operation followed by the {@code after} operation
java.util.function.DoubleFunction#apply(double)->R:::Applies this function to the given argument.
java.util.function.DoublePredicate#test(double)->boolean:::Evaluates this predicate on the given argument.
java.util.function.DoublePredicate#and(DoublePredicate)->DoublePredicate:::Returns a composed predicate that represents a short-circuiting logical  AND of this predicate and another
java.util.function.DoublePredicate#negate()->DoublePredicate:::Returns a predicate that represents the logical negation of this  predicate.
java.util.function.DoublePredicate#or(DoublePredicate)->DoublePredicate:::Returns a composed predicate that represents a short-circuiting logical  OR of this predicate and another
java.util.function.DoubleSupplier#getAsDouble()->double:::Gets a result.
java.util.function.DoubleToIntFunction#applyAsInt(double)->int:::Applies this function to the given argument.
java.util.function.DoubleToLongFunction#applyAsLong(double)->long:::Applies this function to the given argument.
java.util.function.DoubleUnaryOperator#applyAsDouble(double)->double:::Applies this operator to the given operand.
java.util.function.DoubleUnaryOperator#compose(DoubleUnaryOperator)->DoubleUnaryOperator:::Returns a composed operator that first applies the {@code before}  operator to its input, and then applies this operator to the result
java.util.function.DoubleUnaryOperator#andThen(DoubleUnaryOperator)->DoubleUnaryOperator:::Returns a composed operator that first applies this operator to  its input, and then applies the {@code after} operator to the result
java.util.function.DoubleUnaryOperator#identity()->DoubleUnaryOperator:::Returns a unary operator that always returns its input argument.
java.util.function.Function#apply(T)->R:::Applies this function to the given argument.
java.util.function.Function#R> compose(Function<? super V, ? extends T>)->Function<V,:::Returns a composed function that first applies the {@code before}  function to its input, and then applies this function to the result
java.util.function.Function#V> andThen(Function<? super R, ? extends V>)->Function<T,:::Returns a composed function that first applies this function to  its input, and then applies the {@code after} function to the result
java.util.function.Function#T> identity()->Function<T,:::Returns a function that always returns its input argument.
java.util.function.IntBinaryOperator#applyAsInt(int, int)->int:::Applies this operator to the given operands.
java.util.function.IntConsumer#accept(int)->void:::Performs this operation on the given argument.
java.util.function.IntConsumer#andThen(IntConsumer)->IntConsumer:::Returns a composed {@code IntConsumer} that performs, in sequence, this  operation followed by the {@code after} operation
java.util.function.IntFunction#apply(int)->R:::Applies this function to the given argument.
java.util.function.IntPredicate#test(int)->boolean:::Evaluates this predicate on the given argument.
java.util.function.IntPredicate#and(IntPredicate)->IntPredicate:::Returns a composed predicate that represents a short-circuiting logical  AND of this predicate and another
java.util.function.IntPredicate#negate()->IntPredicate:::Returns a predicate that represents the logical negation of this  predicate.
java.util.function.IntPredicate#or(IntPredicate)->IntPredicate:::Returns a composed predicate that represents a short-circuiting logical  OR of this predicate and another
java.util.function.IntSupplier#getAsInt()->int:::Gets a result.
java.util.function.IntToDoubleFunction#applyAsDouble(int)->double:::Applies this function to the given argument.
java.util.function.IntToLongFunction#applyAsLong(int)->long:::Applies this function to the given argument.
java.util.function.IntUnaryOperator#applyAsInt(int)->int:::Applies this operator to the given operand.
java.util.function.IntUnaryOperator#compose(IntUnaryOperator)->IntUnaryOperator:::Returns a composed operator that first applies the {@code before}  operator to its input, and then applies this operator to the result
java.util.function.IntUnaryOperator#andThen(IntUnaryOperator)->IntUnaryOperator:::Returns a composed operator that first applies this operator to  its input, and then applies the {@code after} operator to the result
java.util.function.IntUnaryOperator#identity()->IntUnaryOperator:::Returns a unary operator that always returns its input argument.
java.util.function.LongBinaryOperator#applyAsLong(long, long)->long:::Applies this operator to the given operands.
java.util.function.LongConsumer#accept(long)->void:::Performs this operation on the given argument.
java.util.function.LongConsumer#andThen(LongConsumer)->LongConsumer:::Returns a composed {@code LongConsumer} that performs, in sequence, this  operation followed by the {@code after} operation
java.util.function.LongFunction#apply(long)->R:::Applies this function to the given argument.
java.util.function.LongPredicate#test(long)->boolean:::Evaluates this predicate on the given argument.
java.util.function.LongPredicate#and(LongPredicate)->LongPredicate:::Returns a composed predicate that represents a short-circuiting logical  AND of this predicate and another
java.util.function.LongPredicate#negate()->LongPredicate:::Returns a predicate that represents the logical negation of this  predicate.
java.util.function.LongPredicate#or(LongPredicate)->LongPredicate:::Returns a composed predicate that represents a short-circuiting logical  OR of this predicate and another
java.util.function.LongSupplier#getAsLong()->long:::Gets a result.
java.util.function.LongToDoubleFunction#applyAsDouble(long)->double:::Applies this function to the given argument.
java.util.function.LongToIntFunction#applyAsInt(long)->int:::Applies this function to the given argument.
java.util.function.LongUnaryOperator#applyAsLong(long)->long:::Applies this operator to the given operand.
java.util.function.LongUnaryOperator#compose(LongUnaryOperator)->LongUnaryOperator:::Returns a composed operator that first applies the {@code before}  operator to its input, and then applies this operator to the result
java.util.function.LongUnaryOperator#andThen(LongUnaryOperator)->LongUnaryOperator:::Returns a composed operator that first applies this operator to  its input, and then applies the {@code after} operator to the result
java.util.function.LongUnaryOperator#identity()->LongUnaryOperator:::Returns a unary operator that always returns its input argument.
java.util.function.ObjDoubleConsumer#accept(T, double)->void:::Performs this operation on the given arguments.
java.util.function.ObjIntConsumer#accept(T, int)->void:::Performs this operation on the given arguments.
java.util.function.ObjLongConsumer#accept(T, long)->void:::Performs this operation on the given arguments.
java.util.function.Predicate#test(T)->boolean:::Evaluates this predicate on the given argument.
java.util.function.Predicate#and(Predicate<? super T>)->Predicate<T>:::Returns a composed predicate that represents a short-circuiting logical  AND of this predicate and another
java.util.function.Predicate#negate()->Predicate<T>:::Returns a predicate that represents the logical negation of this  predicate.
java.util.function.Predicate#or(Predicate<? super T>)->Predicate<T>:::Returns a composed predicate that represents a short-circuiting logical  OR of this predicate and another
java.util.function.Predicate#isEqual(Object)->Predicate<T>:::Returns a predicate that tests if two arguments are equal according  to {@link Objects#equals(Object, Object)}.
java.util.function.Predicate#not(Predicate<? super T>)->Predicate<T>:::Returns a predicate that is the negation of the supplied predicate
java.util.function.Supplier#get()->T:::Gets a result.
java.util.function.ToDoubleBiFunction#applyAsDouble(T, U)->double:::Applies this function to the given arguments.
java.util.function.ToDoubleFunction#applyAsDouble(T)->double:::Applies this function to the given argument.
java.util.function.ToIntBiFunction#applyAsInt(T, U)->int:::Applies this function to the given arguments.
java.util.function.ToIntFunction#applyAsInt(T)->int:::Applies this function to the given argument.
java.util.function.ToLongBiFunction#applyAsLong(T, U)->long:::Applies this function to the given arguments.
java.util.function.ToLongFunction#applyAsLong(T)->long:::Applies this function to the given argument.
java.util.function.UnaryOperator#identity()->UnaryOperator<T>:::Returns a unary operator that always returns its input argument.

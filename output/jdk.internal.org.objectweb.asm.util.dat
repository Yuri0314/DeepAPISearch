ASMifiable#asmify(StringBuffer, String, Map):::Prints the ASM code to create an attribute equal to this attribute.:::
ASMifier#main(String[]):::Prints the ASM source code to generate the given class to the standard output:::i->flags->ok->if->if->equals->if->if->println->println->return->cr->if->endsWith->indexOf->indexOf->new->FileInputStream->new->ClassReader->else->new->ClassReader->cr->new->ASMifier->new->PrintWriter->new->TraceClassVisitor->accept
ASMifier#visit(int, int, String, String, String, String[])::: mifier visit:::simpleName->if->else->n->name->lastIndexOf->if->else->text->name->substring->replace->add->name->substring->replace->text->add->text->add->text->add->text->add->text->add->text->add->text->add->text->add->buf->setLength->buf->append->switch->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->appendAccess->buf->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->if->buf->append->for->i->buf->append->else->buf->append->buf->append->text->buf->toString->add
ASMifier#visitSource(String, String)::: mifier visit source:::buf->setLength->buf->append->appendConstant->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitModule(String, int, String)::: mifier visit module:::buf->setLength->buf->append->appendConstant->buf->append->appendAccess->buf->append->appendConstant->buf->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitOuterClass(String, String, String)::: mifier visit outer class:::buf->setLength->buf->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitClassAnnotation(String, boolean)::: mifier visit class annotation:::return->visitAnnotation
ASMifier#visitClassTypeAnnotation(int, TypePath, String, boolean)::: mifier visit class type annotation:::return->visitTypeAnnotation
ASMifier#visitClassAttribute(Attribute)::: mifier visit class attribute:::visitAttribute
ASMifier#visitInnerClass(String, String, String, int)::: mifier visit inner class:::buf->setLength->buf->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->appendAccess->buf->append->text->buf->toString->add
ASMifier#visitField(int, String, String, String, Object)::: mifier visit field:::buf->setLength->buf->append->buf->append->appendAccess->buf->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitMethod(int, String, String, String, String[])::: mifier visit method:::buf->setLength->buf->append->buf->append->appendAccess->buf->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->if->buf->append->for->i->buf->append->else->buf->append->buf->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitClassEnd()::: mifier visit class end:::text->add->text->add->text->add->text->add
ASMifier#visitMainClass(String)::: mifier visit main class:::buf->setLength->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitPackage(String)::: mifier visit package:::buf->setLength->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitRequire(String, int, String)::: mifier visit require:::buf->setLength->buf->append->appendConstant->buf->append->appendAccess->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitExport(String, int, String...)::: mifier visit export:::buf->setLength->buf->append->appendConstant->buf->append->appendAccess->if->buf->append->for->i->buf->append->buf->append->text->buf->toString->add
ASMifier#visitOpen(String, int, String...)::: mifier visit open:::buf->setLength->buf->append->appendConstant->buf->append->appendAccess->if->buf->append->for->i->buf->append->buf->append->text->buf->toString->add
ASMifier#visitUse(String)::: mifier visit use:::buf->setLength->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitProvide(String, String...)::: mifier visit provide:::buf->setLength->buf->append->appendConstant->buf->append->for->i->buf->append->text->buf->toString->add
ASMifier#visitModuleEnd()::: mifier visit module end:::text->add
ASMifier#visit(String, Object)::: mifier visit:::buf->setLength->buf->append->append->append->appendConstant->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitEnum(String, String, String)::: mifier visit enum:::buf->setLength->buf->append->append->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitAnnotation(String, String)::: mifier visit annotation:::buf->setLength->buf->append->buf->append->append->append->buf->append->append->appendConstant->buf->append->appendConstant->buf->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitArray(String)::: mifier visit array:::buf->setLength->buf->append->buf->append->append->append->buf->append->append->appendConstant->buf->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitAnnotationEnd()::: mifier visit annotation end:::buf->setLength->buf->append->append->append->text->buf->toString->add
ASMifier#visitFieldAnnotation(String, boolean)::: mifier visit field annotation:::return->visitAnnotation
ASMifier#visitFieldTypeAnnotation(int, TypePath, String, boolean)::: mifier visit field type annotation:::return->visitTypeAnnotation
ASMifier#visitFieldAttribute(Attribute)::: mifier visit field attribute:::visitAttribute
ASMifier#visitFieldEnd()::: mifier visit field end:::buf->setLength->buf->append->append->text->buf->toString->add
ASMifier#visitParameter(String, int)::: mifier visit parameter:::buf->setLength->buf->append->append->appendString->buf->append->appendAccess->text->buf->append->toString->add
ASMifier#visitAnnotationDefault()::: mifier visit annotation default:::buf->setLength->buf->append->append->append->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitMethodAnnotation(String, boolean)::: mifier visit method annotation:::return->visitAnnotation
ASMifier#visitMethodTypeAnnotation(int, TypePath, String, boolean)::: mifier visit method type annotation:::return->visitTypeAnnotation
ASMifier#visitParameterAnnotation(int, String, boolean)::: mifier visit parameter annotation:::buf->setLength->buf->append->append->append->append->append->append->appendConstant->buf->append->append->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitMethodAttribute(Attribute)::: mifier visit method attribute:::visitAttribute
ASMifier#visitCode()::: mifier visit code:::text->add
ASMifier#visitFrame(int, int, Object[], int, Object[])::: mifier visit frame:::buf->setLength->switch->declareFrameTypes->declareFrameTypes->if->buf->append->append->else->buf->append->append->buf->append->append->appendFrameTypes->buf->append->append->append->appendFrameTypes->buf->append->break->declareFrameTypes->buf->append->append->append->append->appendFrameTypes->buf->append->break->buf->append->append->append->append->break->buf->append->append->break->declareFrameTypes->buf->append->append->appendFrameTypes->buf->append->break->buf->append->text->buf->toString->add
ASMifier#visitInsn(int)::: mifier visit insn:::buf->setLength->buf->append->append->append->append->text->buf->toString->add
ASMifier#visitIntInsn(int, int)::: mifier visit int insn:::buf->setLength->buf->append->append->append->append->Integer->toString->append->append->text->buf->toString->add
ASMifier#visitVarInsn(int, int)::: mifier visit var insn:::buf->setLength->buf->append->append->append->append->append->append->text->buf->toString->add
ASMifier#visitTypeInsn(int, String)::: mifier visit type insn:::buf->setLength->buf->append->append->append->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitFieldInsn(int, String, String, String)::: mifier visit field insn:::buf->setLength->buf->append->append->append->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitMethodInsn(int, String, String, String)::: mifier visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
ASMifier#visitMethodInsn(int, String, String, String, boolean)::: mifier visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
ASMifier#doVisitMethodInsn(int, String, String, String, boolean)::: mifier do visit method insn:::buf->setLength->buf->append->append->append->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->buf->append->buf->append->text->buf->toString->add
ASMifier#visitInvokeDynamicInsn(String, String, Handle, Object...)::: mifier visit invoke dynamic insn:::buf->setLength->buf->append->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->for->i->buf->append->text->buf->toString->add
ASMifier#visitJumpInsn(int, Label)::: mifier visit jump insn:::buf->setLength->declareLabel->buf->append->append->append->append->appendLabel->buf->append->text->buf->toString->add
ASMifier#visitLabel(Label)::: mifier visit label:::buf->setLength->declareLabel->buf->append->append->appendLabel->buf->append->text->buf->toString->add
ASMifier#visitLdcInsn(Object)::: mifier visit ldc insn:::buf->setLength->buf->append->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitIincInsn(int, int)::: mifier visit iinc insn:::buf->setLength->buf->append->append->append->append->append->append->text->buf->toString->add
ASMifier#visitTableSwitchInsn(int, int, Label, Label...)::: mifier visit table switch insn:::buf->setLength->for->i->declareLabel->buf->append->append->append->append->append->append->appendLabel->buf->append->for->i->buf->append->text->buf->toString->add
ASMifier#visitLookupSwitchInsn(Label, int[], Label[])::: mifier visit lookup switch insn:::buf->setLength->for->i->declareLabel->buf->append->append->appendLabel->buf->append->for->i->buf->append->for->i->buf->append->text->buf->toString->add
ASMifier#visitMultiANewArrayInsn(String, int)::: mifier visit multi new array insn:::buf->setLength->buf->append->append->appendConstant->buf->append->append->append->text->buf->toString->add
ASMifier#visitInsnAnnotation(int, TypePath, String, boolean)::: mifier visit insn annotation:::return->visitTypeAnnotation
ASMifier#visitTryCatchBlock(Label, Label, Label, String)::: mifier visit try catch block:::buf->setLength->declareLabel->declareLabel->declareLabel->buf->append->append->appendLabel->buf->append->appendLabel->buf->append->appendLabel->buf->append->appendConstant->buf->append->text->buf->toString->add
ASMifier#visitTryCatchAnnotation(int, TypePath, String, boolean)::: mifier visit try catch annotation:::return->visitTypeAnnotation
ASMifier#visitLocalVariable(String, String, String, Label, Label, int)::: mifier visit local variable:::buf->setLength->buf->append->append->appendConstant->buf->append->appendConstant->buf->append->appendConstant->buf->append->appendLabel->buf->append->appendLabel->buf->append->append->append->text->buf->toString->add
ASMifier#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean)::: mifier visit local variable annotation:::buf->setLength->buf->append->append->append->append->buf->append->if->buf->append->else->buf->append->append->append->buf->append->for->i->buf->append->for->i->buf->append->for->i->buf->append->appendConstant->buf->append->append->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitLineNumber(int, Label)::: mifier visit line number:::buf->setLength->buf->append->append->append->append->appendLabel->buf->append->text->buf->toString->add
ASMifier#visitMaxs(int, int)::: mifier visit maxs:::buf->setLength->buf->append->append->append->append->append->append->text->buf->toString->add
ASMifier#visitMethodEnd()::: mifier visit method end:::buf->setLength->buf->append->append->text->buf->toString->add
ASMifier#visitAnnotation(String, boolean)::: mifier visit annotation:::buf->setLength->buf->append->append->append->append->appendConstant->buf->append->append->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitTypeAnnotation(int, TypePath, String, boolean)::: mifier visit type annotation:::return->visitTypeAnnotation
ASMifier#visitTypeAnnotation(String, int, TypePath, String, boolean)::: mifier visit type annotation:::buf->setLength->buf->append->append->append->append->append->append->buf->append->if->buf->append->else->buf->append->append->append->appendConstant->buf->append->append->append->text->buf->toString->add->a->createASMifier->text->a->getText->add->text->add->return
ASMifier#visitAttribute(Attribute)::: mifier visit attribute:::buf->setLength->buf->append->append->append->if->if->new->HashMap<Label,String>->buf->append->asmify->buf->append->append->buf->append->text->buf->toString->add
ASMifier#createASMifier(String, int)::: mifier create mifier:::return->new->ASMifier
ASMifier#appendAccess(int):::Appends a string representation of the given access modifiers to #buf buf.:::first->if->buf->append->if->buf->append->if->buf->append->if->if->buf->append->if->buf->append->else->buf->append->if->if->buf->append->buf->append->if->if->buf->append->if->if->buf->append->else->buf->append->else->buf->append->if->if->buf->append->if->if->buf->append->else->buf->append->else->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->if->buf->append->else->buf->append->if->buf->append
ASMifier#appendConstant(Object):::Appends a string representation of the given constant to the given buffer.:::appendConstant
ASMifier#appendConstant(StringBuffer, Object):::Appends a string representation of the given constant to the given buffer.:::if->buf->append->else->if->appendString->else->if->buf->append->buf->getDescriptor->append->buf->append->else->if->buf->append->h->buf->append->h->getTag->append->append->buf->h->getOwner->append->append->buf->h->getName->append->append->buf->h->getDesc->append->append->buf->h->isInterface->append->append->else->if->buf->append->append->append->else->if->buf->booleanValue->append->else->if->buf->append->append->append->else->if->c->charValue->buf->append->append->append->else->if->buf->append->append->append->else->if->buf->append->append->append->else->if->buf->append->append->append->else->if->buf->append->append->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append
ASMifier#declareFrameTypes(int, Object[])::: mifier declare frame types:::for->i
ASMifier#appendFrameTypes(int, Object[])::: mifier append frame types:::for->i
ASMifier#declareLabel(Label):::Appends a declaration of the given label to #buf buf:::if->new->HashMap<Label,String>->name->labelNames->get->if->labelNames->size->labelNames->put->buf->append->append->append
ASMifier#appendLabel(Label):::Appends the name of the given label to #buf buf:::buf->labelNames->get->append
CheckAnnotationAdapter#visit(String, Object)::: check annotation adapter visit:::checkEnd->checkName->if->throw->new->IllegalArgumentException->if->sort->getSort->if->throw->new->IllegalArgumentException->if->av->visit
CheckAnnotationAdapter#visitEnum(String, String, String)::: check annotation adapter visit enum:::checkEnd->checkName->CheckMethodAdapter->checkDesc->if->throw->new->IllegalArgumentException->if->av->visitEnum
CheckAnnotationAdapter#visitAnnotation(String, String)::: check annotation adapter visit annotation:::checkEnd->checkName->CheckMethodAdapter->checkDesc->return->av->visitAnnotation->new->CheckAnnotationAdapter
CheckAnnotationAdapter#visitArray(String)::: check annotation adapter visit array:::checkEnd->checkName->return->av->visitArray->new->CheckAnnotationAdapter
CheckAnnotationAdapter#visitEnd()::: check annotation adapter visit end:::checkEnd->if->av->visitEnd
CheckAnnotationAdapter#checkEnd()::: check annotation adapter check end:::if->throw->new->IllegalStateException
CheckAnnotationAdapter#checkName(String)::: check annotation adapter check name:::if->throw->new->IllegalArgumentException
CheckClassAdapter#main(String[]):::Checks a given class:::if->println->println->return->cr->if->endsWith->new->FileInputStream->new->ClassReader->else->new->ClassReader->new->PrintWriter->verify
CheckClassAdapter#verify(ClassReader, ClassLoader, boolean, PrintWriter):::Checks a given class.:::cn->new->ClassNode->cr->new->CheckClassAdapter->accept->syperType->Type->getObjectType->methods->interfaces->new->ArrayList<Type>->for->i->iterator->i->hasNext->for->i->methods->size->pw->flush
CheckClassAdapter#verify(ClassReader, boolean, PrintWriter):::Checks a given class:::verify
CheckClassAdapter#printAnalyzerResult(MethodNode, Analyzer, PrintWriter)::: check class adapter print analyzer result:::frames->a->getFrames->t->new->Textifier->mv->new->TraceMethodVisitor->pw->println->for->j->size->for->j->size->pw->println
CheckClassAdapter#getShortName(String)::: check class adapter get short name:::n->name->lastIndexOf->k->name->length->if->name->charAt->return->name->substring
CheckClassAdapter#visit(int, int, String, String, String, String[])::: check class adapter visit:::if->throw->new->IllegalStateException->checkState->checkAccess->if->throw->new->IllegalArgumentException->if->name->endsWith->CheckMethodAdapter->checkInternalName->if->equals->if->throw->new->IllegalArgumentException->else->CheckMethodAdapter->checkInternalName->if->checkClassSignature->if->if->equals->throw->new->IllegalArgumentException->if->for->i->super->visit
CheckClassAdapter#visitSource(String, String)::: check class adapter visit source:::checkState->if->throw->new->IllegalStateException->super->visitSource
CheckClassAdapter#visitModule(String, int, String)::: check class adapter visit module:::checkState->if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->checkAccess->return->super->visitModule->new->CheckModuleAdapter
CheckClassAdapter#visitOuterClass(String, String, String)::: check class adapter visit outer class:::checkState->if->throw->new->IllegalStateException->if->throw->new->IllegalArgumentException->if->CheckMethodAdapter->checkMethodDesc->super->visitOuterClass
CheckClassAdapter#visitInnerClass(String, String, String, int)::: check class adapter visit inner class:::checkState->CheckMethodAdapter->checkInternalName->if->CheckMethodAdapter->checkInternalName->if->start->while->innerName->length->Character->innerName->charAt->isDigit->if->innerName->length->CheckMethodAdapter->checkIdentifier->checkAccess->super->visitInnerClass
CheckClassAdapter#visitField(int, String, String, String, Object)::: check class adapter visit field:::checkState->checkAccess->CheckMethodAdapter->checkUnqualifiedName->CheckMethodAdapter->checkDesc->if->checkFieldSignature->if->CheckMethodAdapter->checkConstant->av->super->visitField->return->new->CheckFieldAdapter
CheckClassAdapter#visitMethod(int, String, String, String, String[])::: check class adapter visit method:::checkState->checkAccess->if->equals->equals->CheckMethodAdapter->checkMethodIdentifier->CheckMethodAdapter->checkMethodDesc->if->checkMethodSignature->if->for->i->cma->if->super->visitMethod->new->CheckMethodAdapter->else->super->visitMethod->new->CheckMethodAdapter->return
CheckClassAdapter#visitAnnotation(String, boolean)::: check class adapter visit annotation:::checkState->CheckMethodAdapter->checkDesc->return->super->visitAnnotation->new->CheckAnnotationAdapter
CheckClassAdapter#visitTypeAnnotation(int, TypePath, String, boolean)::: check class adapter visit type annotation:::checkState->sort->if->throw->Integer->toHexString->new->IllegalArgumentException->checkTypeRefAndPath->CheckMethodAdapter->checkDesc->return->super->visitTypeAnnotation->new->CheckAnnotationAdapter
CheckClassAdapter#visitAttribute(Attribute)::: check class adapter visit attribute:::checkState->if->throw->new->IllegalArgumentException->super->visitAttribute
CheckClassAdapter#visitEnd()::: check class adapter visit end:::checkState->super->visitEnd
CheckClassAdapter#checkState():::Checks that the visit method has been called and that visitEnd has not been called.:::if->throw->new->IllegalStateException->if->throw->new->IllegalStateException
CheckClassAdapter#checkAccess(int, int):::Checks that the given access flags do not contain invalid flags:::if->throw->new->IllegalArgumentException->pub->pri->pro->if->throw->new->IllegalArgumentException->fin->abs->if->throw->new->IllegalArgumentException
CheckClassAdapter#checkClassSignature(String):::Checks a class signature.:::pos->if->getChar->checkFormalTypeParameters->checkClassTypeSignature->while->getChar->checkClassTypeSignature->if->signature->length->throw->new->IllegalArgumentException
CheckClassAdapter#checkMethodSignature(String):::Checks a method signature.:::pos->if->getChar->checkFormalTypeParameters->checkChar->while->getChar->indexOf->checkTypeSignature->checkChar->if->getChar->else->checkTypeSignature->while->getChar->if->getChar->checkClassTypeSignature->else->checkTypeVariableSignature->if->signature->length->throw->new->IllegalArgumentException
CheckClassAdapter#checkFieldSignature(String):::Checks a field signature.:::pos->checkFieldTypeSignature->if->signature->length->throw->new->IllegalArgumentException
CheckClassAdapter#checkTypeRefAndPath(int, TypePath):::Checks the reference to a type in a type annotation.:::mask->switch->break->break->break->break->throw->Integer->toHexString->new->IllegalArgumentException->if->throw->Integer->toHexString->new->IllegalArgumentException->if->for->i->typePath->getLength
CheckClassAdapter#checkFormalTypeParameters(String, int):::Checks the formal type parameters of a class or method signature.:::checkChar->checkFormalTypeParameter->while->getChar->checkFormalTypeParameter->return
CheckClassAdapter#checkFormalTypeParameter(String, int):::Checks a formal type parameter of a class or method signature.:::checkIdentifier->checkChar->if->getChar->indexOf->checkFieldTypeSignature->while->getChar->checkFieldTypeSignature->return
CheckClassAdapter#checkFieldTypeSignature(String, int):::Checks a field type signature.:::switch->getChar->return->checkClassTypeSignature->return->checkTypeSignature->return->checkTypeVariableSignature
CheckClassAdapter#checkClassTypeSignature(String, int):::Checks a class type signature.:::checkChar->checkIdentifier->while->getChar->checkIdentifier->if->getChar->checkTypeArguments->while->getChar->checkIdentifier->if->getChar->checkTypeArguments->return->checkChar
CheckClassAdapter#checkTypeArguments(String, int):::Checks the type arguments in a class type signature.:::checkChar->checkTypeArgument->while->getChar->checkTypeArgument->return
CheckClassAdapter#checkTypeArgument(String, int):::Checks a type argument in a class type signature.:::c->getChar->if->return->else->if->return->checkFieldTypeSignature
CheckClassAdapter#checkTypeVariableSignature(String, int):::Checks a type variable signature.:::checkChar->checkIdentifier->return->checkChar
CheckClassAdapter#checkTypeSignature(String, int):::Checks a type signature.:::switch->getChar->return->return->checkFieldTypeSignature
CheckClassAdapter#checkIdentifier(String, int):::Checks an identifier.:::if->Character->getChar->isJavaIdentifierStart->throw->new->IllegalArgumentException->while->Character->getChar->isJavaIdentifierPart->return
CheckClassAdapter#checkChar(char, String, int):::Checks a single character.:::if->getChar->return->throw->new->IllegalArgumentException
CheckClassAdapter#getChar(String, int):::Returns the signature car at the given index.:::return->signature->length->signature->charAt
CheckFieldAdapter#visitAnnotation(String, boolean)::: check field adapter visit annotation:::checkEnd->CheckMethodAdapter->checkDesc->return->super->visitAnnotation->new->CheckAnnotationAdapter
CheckFieldAdapter#visitTypeAnnotation(int, TypePath, String, boolean)::: check field adapter visit type annotation:::checkEnd->sort->if->throw->Integer->toHexString->new->IllegalArgumentException->CheckClassAdapter->checkTypeRefAndPath->CheckMethodAdapter->checkDesc->return->super->visitTypeAnnotation->new->CheckAnnotationAdapter
CheckFieldAdapter#visitAttribute(Attribute)::: check field adapter visit attribute:::checkEnd->if->throw->new->IllegalArgumentException->super->visitAttribute
CheckFieldAdapter#visitEnd()::: check field adapter visit end:::checkEnd->super->visitEnd
CheckFieldAdapter#checkEnd()::: check field adapter check end:::if->throw->new->IllegalStateException
CheckMethodAdapter#visitParameter(String, int)::: check method adapter visit parameter:::if->checkUnqualifiedName->CheckClassAdapter->checkAccess->super->visitParameter
CheckMethodAdapter#visitAnnotation(String, boolean)::: check method adapter visit annotation:::checkEndMethod->checkDesc->return->super->visitAnnotation->new->CheckAnnotationAdapter
CheckMethodAdapter#visitTypeAnnotation(int, TypePath, String, boolean)::: check method adapter visit type annotation:::checkEndMethod->sort->if->throw->Integer->toHexString->new->IllegalArgumentException->CheckClassAdapter->checkTypeRefAndPath->CheckMethodAdapter->checkDesc->return->super->visitTypeAnnotation->new->CheckAnnotationAdapter
CheckMethodAdapter#visitAnnotationDefault()::: check method adapter visit annotation default:::checkEndMethod->return->super->visitAnnotationDefault->new->CheckAnnotationAdapter
CheckMethodAdapter#visitParameterAnnotation(int, String, boolean)::: check method adapter visit parameter annotation:::checkEndMethod->checkDesc->return->super->visitParameterAnnotation->new->CheckAnnotationAdapter
CheckMethodAdapter#visitAttribute(Attribute)::: check method adapter visit attribute:::checkEndMethod->if->throw->new->IllegalArgumentException->super->visitAttribute
CheckMethodAdapter#visitCode()::: check method adapter visit code:::if->throw->new->RuntimeException->super->visitCode
CheckMethodAdapter#visitFrame(int, int, Object[], int, Object[])::: check method adapter visit frame:::if->throw->new->IllegalStateException->mLocal->mStack->switch->break->break->break->break->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->if->throw->new->IllegalArgumentException->for->i->if->throw->new->IllegalArgumentException->for->i->if->else->if->throw->new->RuntimeException->super->visitFrame
CheckMethodAdapter#visitInsn(int)::: check method adapter visit insn:::checkStartCode->checkEndCode->checkOpcode->super->visitInsn
CheckMethodAdapter#visitIntInsn(int, int)::: check method adapter visit int insn:::checkStartCode->checkEndCode->checkOpcode->switch->checkSignedByte->break->checkSignedShort->break->if->throw->new->IllegalArgumentException->super->visitIntInsn
CheckMethodAdapter#visitVarInsn(int, int)::: check method adapter visit var insn:::checkStartCode->checkEndCode->checkOpcode->checkUnsignedShort->super->visitVarInsn
CheckMethodAdapter#visitTypeInsn(int, String)::: check method adapter visit type insn:::checkStartCode->checkEndCode->checkOpcode->checkInternalName->if->type->charAt->throw->new->IllegalArgumentException->super->visitTypeInsn
CheckMethodAdapter#visitFieldInsn(int, String, String, String)::: check method adapter visit field insn:::checkStartCode->checkEndCode->checkOpcode->checkInternalName->checkUnqualifiedName->checkDesc->super->visitFieldInsn
CheckMethodAdapter#visitMethodInsn(int, String, String, String)::: check method adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
CheckMethodAdapter#visitMethodInsn(int, String, String, String, boolean)::: check method adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
CheckMethodAdapter#doVisitMethodInsn(int, String, String, String, boolean)::: check method adapter do visit method insn:::checkStartCode->checkEndCode->checkOpcode->if->equals->checkMethodIdentifier->checkInternalName->checkMethodDesc->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->mv->visitMethodInsn
CheckMethodAdapter#visitInvokeDynamicInsn(String, String, Handle, Object...)::: check method adapter visit invoke dynamic insn:::checkStartCode->checkEndCode->checkMethodIdentifier->checkMethodDesc->if->bsm->getTag->bsm->getTag->throw->bsm->getTag->new->IllegalArgumentException->for->i->super->visitInvokeDynamicInsn
CheckMethodAdapter#visitJumpInsn(int, Label)::: check method adapter visit jump insn:::checkStartCode->checkEndCode->checkOpcode->checkLabel->checkNonDebugLabel->super->visitJumpInsn->usedLabels->add
CheckMethodAdapter#visitLabel(Label)::: check method adapter visit label:::checkStartCode->checkEndCode->checkLabel->if->labels->get->throw->new->IllegalArgumentException->labels->put->super->visitLabel
CheckMethodAdapter#visitLdcInsn(Object)::: check method adapter visit ldc insn:::checkStartCode->checkEndCode->checkLDCConstant->super->visitLdcInsn
CheckMethodAdapter#visitIincInsn(int, int)::: check method adapter visit iinc insn:::checkStartCode->checkEndCode->checkUnsignedShort->checkSignedShort->super->visitIincInsn
CheckMethodAdapter#visitTableSwitchInsn(int, int, Label, Label...)::: check method adapter visit table switch insn:::checkStartCode->checkEndCode->if->throw->new->IllegalArgumentException->checkLabel->checkNonDebugLabel->if->throw->new->IllegalArgumentException->for->i->super->visitTableSwitchInsn->for->i
CheckMethodAdapter#visitLookupSwitchInsn(Label, int[], Label[])::: check method adapter visit lookup switch insn:::checkEndCode->checkStartCode->checkLabel->checkNonDebugLabel->if->throw->new->IllegalArgumentException->for->i->super->visitLookupSwitchInsn->usedLabels->add->for->i
CheckMethodAdapter#visitMultiANewArrayInsn(String, int)::: check method adapter visit multi new array insn:::checkStartCode->checkEndCode->checkDesc->if->desc->charAt->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->desc->lastIndexOf->throw->new->IllegalArgumentException->super->visitMultiANewArrayInsn
CheckMethodAdapter#visitInsnAnnotation(int, TypePath, String, boolean)::: check method adapter visit insn annotation:::checkStartCode->checkEndCode->sort->if->throw->Integer->toHexString->new->IllegalArgumentException->CheckClassAdapter->checkTypeRefAndPath->CheckMethodAdapter->checkDesc->return->super->visitInsnAnnotation->new->CheckAnnotationAdapter
CheckMethodAdapter#visitTryCatchBlock(Label, Label, Label, String)::: check method adapter visit try catch block:::checkStartCode->checkEndCode->checkLabel->checkLabel->checkLabel->checkNonDebugLabel->checkNonDebugLabel->checkNonDebugLabel->if->labels->get->labels->get->labels->get->throw->new->IllegalStateException->if->checkInternalName->super->visitTryCatchBlock->handlers->add->handlers->add
CheckMethodAdapter#visitTryCatchAnnotation(int, TypePath, String, boolean)::: check method adapter visit try catch annotation:::checkStartCode->checkEndCode->sort->if->throw->Integer->toHexString->new->IllegalArgumentException->CheckClassAdapter->checkTypeRefAndPath->CheckMethodAdapter->checkDesc->return->super->visitTryCatchAnnotation->new->CheckAnnotationAdapter
CheckMethodAdapter#visitLocalVariable(String, String, String, Label, Label, int)::: check method adapter visit local variable:::checkStartCode->checkEndCode->checkUnqualifiedName->checkDesc->checkLabel->checkLabel->checkUnsignedShort->s->labels->get->intValue->e->labels->get->intValue->if->throw->new->IllegalArgumentException->super->visitLocalVariable
CheckMethodAdapter#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean)::: check method adapter visit local variable annotation:::checkStartCode->checkEndCode->sort->if->throw->Integer->toHexString->new->IllegalArgumentException->CheckClassAdapter->checkTypeRefAndPath->checkDesc->if->throw->new->IllegalArgumentException->for->i->return->super->visitLocalVariableAnnotation
CheckMethodAdapter#visitLineNumber(int, Label)::: check method adapter visit line number:::checkStartCode->checkEndCode->checkUnsignedShort->checkLabel->super->visitLineNumber
CheckMethodAdapter#visitMaxs(int, int)::: check method adapter visit maxs:::checkStartCode->checkEndCode->foreach->if->labels->get->throw->new->IllegalStateException->for->i->handlers->size->checkUnsignedShort->checkUnsignedShort->super->visitMaxs
CheckMethodAdapter#visitEnd()::: check method adapter visit end:::checkEndMethod->super->visitEnd
CheckMethodAdapter#checkStartCode():::Checks that the visitCode method has been called.:::if->throw->new->IllegalStateException
CheckMethodAdapter#checkEndCode():::Checks that the visitMaxs method has not been called.:::if->throw->new->IllegalStateException
CheckMethodAdapter#checkEndMethod():::Checks that the visitEnd method has not been called.:::if->throw->new->IllegalStateException
CheckMethodAdapter#checkFrameValue(Object):::Checks a stack frame value.:::if->return->if->checkInternalName->return->if->throw->new->IllegalArgumentException->else->usedLabels->add
CheckMethodAdapter#checkOpcode(int, int):::Checks that the type of the given opcode is equal to the given type.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkSignedByte(int, String):::Checks that the given value is a signed byte.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkSignedShort(int, String):::Checks that the given value is a signed short.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkUnsignedShort(int, String):::Checks that the given value is an unsigned short.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkConstant(Object):::Checks that the given value is an Integer, aFloat, a Long, a Double or a String.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkLDCConstant(Object)::: check method adapter check constant:::if->s->getSort->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->else->if->if->throw->new->IllegalArgumentException->tag->getTag->if->throw->new->IllegalArgumentException->else->checkConstant
CheckMethodAdapter#checkUnqualifiedName(int, String, String):::Checks that the given string is a valid unqualified name.:::if->checkIdentifier->else->for->i->name->length
CheckMethodAdapter#checkIdentifier(String, String):::Checks that the given string is a valid Java identifier.:::checkIdentifier
CheckMethodAdapter#checkIdentifier(String, int, int, String):::Checks that the given substring is a valid Java identifier.:::if->name->length->throw->new->IllegalArgumentException->if->Character->name->charAt->isJavaIdentifierStart->throw->new->IllegalArgumentException->max->name->length->for->i
CheckMethodAdapter#checkMethodIdentifier(int, String, String):::Checks that the given string is a valid Java identifier.:::if->name->length->throw->new->IllegalArgumentException->if->for->i->name->length->return->if->Character->name->charAt->isJavaIdentifierStart->throw->new->IllegalArgumentException->for->i->name->length
CheckMethodAdapter#checkInternalName(String, String):::Checks that the given string is a valid internal class name.:::if->name->length->throw->new->IllegalArgumentException->if->name->charAt->checkDesc->else->checkInternalName
CheckMethodAdapter#checkInternalName(String, int, int, String):::Checks that the given substring is a valid internal class name.:::max->name->length->try->begin->slash->do->name->indexOf->if->checkIdentifier->while->catch->throw->new->IllegalArgumentException->finally
CheckMethodAdapter#checkDesc(String, boolean):::Checks that the given string is a valid type descriptor.:::end->checkDesc->if->desc->length->throw->new->IllegalArgumentException
CheckMethodAdapter#checkDesc(String, int, boolean):::Checks that a the given substring is a valid type descriptor.:::if->desc->length->throw->new->IllegalArgumentException->index->switch->desc->charAt->if->return->else->throw->new->IllegalArgumentException->return->while->desc->length->desc->charAt->if->desc->length->return->checkDesc->else->throw->new->IllegalArgumentException->desc->indexOf->if->throw->new->IllegalArgumentException->try->checkInternalName->catch->throw->new->IllegalArgumentException->finally->return->throw->new->IllegalArgumentException
CheckMethodAdapter#checkMethodDesc(String):::Checks that the given string is a valid method descriptor.:::if->desc->length->throw->new->IllegalArgumentException->if->desc->charAt->desc->length->throw->new->IllegalArgumentException->start->if->desc->charAt->do->if->desc->charAt->throw->new->IllegalArgumentException->checkDesc->while->desc->length->desc->charAt->checkDesc->if->desc->length->throw->new->IllegalArgumentException
CheckMethodAdapter#checkLabel(Label, boolean, String):::Checks that the given label is not null:::if->throw->new->IllegalArgumentException->if->labels->get->throw->new->IllegalArgumentException
CheckMethodAdapter#checkNonDebugLabel(Label):::Checks that the given label is not a label used only for debug purposes.:::f->getLabelStatusField->status->try->f->get->intValue->catch->throw->new->Error->finally->if->throw->new->IllegalArgumentException
CheckMethodAdapter#getLabelStatusField():::Returns the Field object corresponding to the Label.status field.:::if->getLabelField->if->getLabelField->return
CheckMethodAdapter#getLabelField(String):::Returns the field of the Label class whose name is given.:::try->f->getDeclaredField->f->setAccessible->return->catch->return->finally
CheckModuleAdapter#visitRequire(String, int, String)::: check module adapter visit require:::checkEnd->if->throw->new->IllegalArgumentException->checkDeclared->CheckClassAdapter->checkAccess->super->visitRequire
CheckModuleAdapter#visitExport(String, int, String...)::: check module adapter visit export:::checkEnd->if->throw->new->IllegalArgumentException->CheckMethodAdapter->checkInternalName->checkDeclared->CheckClassAdapter->checkAccess->if->for->i->super->visitExport
CheckModuleAdapter#visitOpen(String, int, String...)::: check module adapter visit open:::checkEnd->if->throw->new->IllegalArgumentException->if->throw->new->IllegalArgumentException->CheckMethodAdapter->checkInternalName->checkDeclared->CheckClassAdapter->checkAccess->if->for->i->super->visitOpen
CheckModuleAdapter#visitUse(String)::: check module adapter visit use:::checkEnd->CheckMethodAdapter->checkInternalName->checkDeclared->super->visitUse
CheckModuleAdapter#visitProvide(String, String...)::: check module adapter visit provide:::checkEnd->CheckMethodAdapter->checkInternalName->checkDeclared->if->throw->new->IllegalArgumentException->for->i->super->visitProvide
CheckModuleAdapter#visitEnd()::: check module adapter visit end:::checkEnd->super->visitEnd
CheckModuleAdapter#checkEnd()::: check module adapter check end:::if->throw->new->IllegalStateException
CheckModuleAdapter#checkDeclared(String, HashSet, String)::: check module adapter check declared:::if->names->add->throw->new->IllegalArgumentException
CheckSignatureAdapter#visitFormalTypeParameter(String)::: check signature adapter visit formal type parameter:::if->throw->new->IllegalStateException->checkIdentifier->if->sv->visitFormalTypeParameter
CheckSignatureAdapter#visitClassBound()::: check signature adapter visit class bound:::if->throw->new->IllegalStateException->v->sv->visitClassBound->return->new->CheckSignatureAdapter
CheckSignatureAdapter#visitInterfaceBound()::: check signature adapter visit interface bound:::if->throw->new->IllegalArgumentException->v->sv->visitInterfaceBound->return->new->CheckSignatureAdapter
CheckSignatureAdapter#visitSuperclass()::: check signature adapter visit superclass:::if->throw->new->IllegalArgumentException->v->sv->visitSuperclass->return->new->CheckSignatureAdapter
CheckSignatureAdapter#visitInterface()::: check signature adapter visit interface:::if->throw->new->IllegalStateException->v->sv->visitInterface->return->new->CheckSignatureAdapter
CheckSignatureAdapter#visitParameterType()::: check signature adapter visit parameter type:::if->throw->new->IllegalArgumentException->v->sv->visitParameterType->return->new->CheckSignatureAdapter
CheckSignatureAdapter#visitReturnType()::: check signature adapter visit return type:::if->throw->new->IllegalArgumentException->v->sv->visitReturnType->cv->new->CheckSignatureAdapter->return
CheckSignatureAdapter#visitExceptionType()::: check signature adapter visit exception type:::if->throw->new->IllegalStateException->v->sv->visitExceptionType->return->new->CheckSignatureAdapter
CheckSignatureAdapter#visitBaseType(char)::: check signature adapter visit base type:::if->throw->new->IllegalStateException->if->if->throw->new->IllegalArgumentException->else->if->indexOf->throw->new->IllegalArgumentException->if->sv->visitBaseType
CheckSignatureAdapter#visitTypeVariable(String)::: check signature adapter visit type variable:::if->throw->new->IllegalStateException->checkIdentifier->if->sv->visitTypeVariable
CheckSignatureAdapter#visitArrayType()::: check signature adapter visit array type:::if->throw->new->IllegalStateException->v->sv->visitArrayType->return->new->CheckSignatureAdapter
CheckSignatureAdapter#visitClassType(String)::: check signature adapter visit class type:::if->throw->new->IllegalStateException->checkClassName->if->sv->visitClassType
CheckSignatureAdapter#visitInnerClassType(String)::: check signature adapter visit inner class type:::if->throw->new->IllegalStateException->checkIdentifier->if->sv->visitInnerClassType
CheckSignatureAdapter#visitTypeArgument()::: check signature adapter visit type argument:::if->throw->new->IllegalStateException->if->sv->visitTypeArgument
CheckSignatureAdapter#visitTypeArgument(char)::: check signature adapter visit type argument:::if->throw->new->IllegalStateException->if->indexOf->throw->new->IllegalArgumentException->v->sv->visitTypeArgument->return->new->CheckSignatureAdapter
CheckSignatureAdapter#visitEnd()::: check signature adapter visit end:::if->throw->new->IllegalStateException->if->sv->visitEnd
CheckSignatureAdapter#checkClassName(String, String)::: check signature adapter check class name:::if->name->length->throw->new->IllegalArgumentException->for->i->name->length
CheckSignatureAdapter#checkIdentifier(String, String)::: check signature adapter check identifier:::if->name->length->throw->new->IllegalArgumentException->for->i->name->length
Printer#visit(int, int, String, String, String, String[]):::Class header:::
Printer#visitSource(String, String):::Class source:::
Printer#visitModule(String, int, String):::Module:::throw->new->RuntimeException
Printer#visitOuterClass(String, String, String):::Class outer class:::
Printer#visitClassAnnotation(String, boolean):::Class annotation:::
Printer#visitClassTypeAnnotation(int, TypePath, String, boolean):::Class type annotation:::throw->new->RuntimeException
Printer#visitClassAttribute(Attribute):::Class attribute:::
Printer#visitInnerClass(String, String, String, int):::Class inner name:::
Printer#visitField(int, String, String, String, Object):::Class field:::
Printer#visitMethod(int, String, String, String, String[]):::Class method:::
Printer#visitClassEnd():::Class end:::
Printer#visitMainClass(String)::: printer visit main class:::throw->new->RuntimeException
Printer#visitPackage(String)::: printer visit package:::throw->new->RuntimeException
Printer#visitRequire(String, int, String)::: printer visit require:::throw->new->RuntimeException
Printer#visitExport(String, int, String...)::: printer visit export:::throw->new->RuntimeException
Printer#visitOpen(String, int, String...)::: printer visit open:::throw->new->RuntimeException
Printer#visitUse(String)::: printer visit use:::throw->new->RuntimeException
Printer#visitProvide(String, String...)::: printer visit provide:::throw->new->RuntimeException
Printer#visitModuleEnd():::Module end:::throw->new->RuntimeException
Printer#visit(String, Object):::Annotation value:::
Printer#visitEnum(String, String, String):::Annotation enum value:::
Printer#visitAnnotation(String, String):::Nested annotation value:::
Printer#visitArray(String):::Annotation array value:::
Printer#visitAnnotationEnd():::Annotation end:::
Printer#visitFieldAnnotation(String, boolean):::Field annotation:::
Printer#visitFieldTypeAnnotation(int, TypePath, String, boolean):::Field type annotation:::throw->new->RuntimeException
Printer#visitFieldAttribute(Attribute):::Field attribute:::
Printer#visitFieldEnd():::Field end:::
Printer#visitParameter(String, int):::Method parameter:::throw->new->RuntimeException
Printer#visitAnnotationDefault():::Method default annotation:::
Printer#visitMethodAnnotation(String, boolean):::Method annotation:::
Printer#visitMethodTypeAnnotation(int, TypePath, String, boolean):::Method type annotation:::throw->new->RuntimeException
Printer#visitParameterAnnotation(int, String, boolean):::Method parameter annotation:::
Printer#visitMethodAttribute(Attribute):::Method attribute:::
Printer#visitCode():::Method start:::
Printer#visitFrame(int, int, Object[], int, Object[]):::Method stack frame:::
Printer#visitInsn(int):::Method instruction:::
Printer#visitIntInsn(int, int):::Method instruction:::
Printer#visitVarInsn(int, int):::Method instruction:::
Printer#visitTypeInsn(int, String):::Method instruction:::
Printer#visitFieldInsn(int, String, String, String):::Method instruction:::
Printer#visitMethodInsn(int, String, String, String):::Method instruction:::if->itf->visitMethodInsn->return->throw->new->RuntimeException
Printer#visitMethodInsn(int, String, String, String, boolean):::Method instruction:::if->if->throw->new->IllegalArgumentException->visitMethodInsn->return->throw->new->RuntimeException
Printer#visitInvokeDynamicInsn(String, String, Handle, Object...):::Method instruction:::
Printer#visitJumpInsn(int, Label):::Method jump instruction:::
Printer#visitLabel(Label):::Method label:::
Printer#visitLdcInsn(Object):::Method instruction:::
Printer#visitIincInsn(int, int):::Method instruction:::
Printer#visitTableSwitchInsn(int, int, Label, Label...):::Method instruction:::
Printer#visitLookupSwitchInsn(Label, int[], Label[]):::Method instruction:::
Printer#visitMultiANewArrayInsn(String, int):::Method instruction:::
Printer#visitInsnAnnotation(int, TypePath, String, boolean):::Instruction type annotation:::throw->new->RuntimeException
Printer#visitTryCatchBlock(Label, Label, Label, String):::Method exception handler:::
Printer#visitTryCatchAnnotation(int, TypePath, String, boolean):::Try catch block type annotation:::throw->new->RuntimeException
Printer#visitLocalVariable(String, String, String, Label, Label, int):::Method debug info:::
Printer#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean):::Local variable type annotation:::throw->new->RuntimeException
Printer#visitLineNumber(int, Label):::Method debug info:::
Printer#visitMaxs(int, int):::Method max stack and max locals:::
Printer#visitMethodEnd():::Method end:::
Printer#getText():::Returns the text constructed by this visitor.:::return
Printer#print(PrintWriter):::Prints the text constructed by this visitor.:::printList
Printer#appendString(StringBuffer, String):::Appends a quoted string to a given buffer.:::buf->append->for->i->s->length->buf->append
Printer#printList(PrintWriter, List):::Prints the given string tree.:::for->i->l->size
Textifiable#textify(StringBuffer, Map):::Build a human readable representation of this attribute.:::
Textifier#main(String[]):::Prints a disassembled view of the given class to the standard output:::i->flags->ok->if->if->equals->if->if->println->println->return->cr->if->endsWith->indexOf->indexOf->new->FileInputStream->new->ClassReader->else->new->ClassReader->cr->new->PrintWriter->new->TraceClassVisitor->accept
Textifier#visit(int, int, String, String, String, String[])::: textifier visit:::if->return->major->minor->buf->setLength->buf->append->append->append->append->append->append->append->if->buf->append->buf->append->Integer->toHexString->toUpperCase->append->append->appendDescriptor->if->sv->new->TraceSignatureVisitor->r->new->SignatureReader->r->accept->buf->append->append->sv->getDeclaration->append->append->appendAccess->if->buf->append->else->if->buf->append->else->if->buf->append->appendDescriptor->if->equals->buf->append->appendDescriptor->buf->append->if->buf->append->for->i->buf->append->text->buf->toString->add
Textifier#visitSource(String, String)::: textifier visit source:::buf->setLength->if->buf->append->append->append->append->if->buf->append->append->append->append->if->buf->length->text->buf->toString->add
Textifier#visitModule(String, int, String)::: textifier visit module:::buf->setLength->if->buf->append->buf->append->append->append->append->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->return
Textifier#visitOuterClass(String, String, String)::: textifier visit outer class:::buf->setLength->buf->append->append->appendDescriptor->buf->append->if->buf->append->append->appendDescriptor->buf->append->text->buf->toString->add
Textifier#visitClassAnnotation(String, boolean)::: textifier visit class annotation:::text->add->return->visitAnnotation
Textifier#visitClassTypeAnnotation(int, TypePath, String, boolean)::: textifier visit class type annotation:::text->add->return->visitTypeAnnotation
Textifier#visitClassAttribute(Attribute)::: textifier visit class attribute:::text->add->visitAttribute
Textifier#visitInnerClass(String, String, String, int)::: textifier visit inner class:::buf->setLength->buf->append->append->buf->Integer->toHexString->toUpperCase->append->append->buf->append->appendAccess->buf->append->appendDescriptor->buf->append->appendDescriptor->buf->append->appendDescriptor->buf->append->text->buf->toString->add
Textifier#visitField(int, String, String, String, Object)::: textifier visit field:::buf->setLength->buf->append->if->buf->append->append->buf->append->append->Integer->toHexString->toUpperCase->append->append->if->buf->append->appendDescriptor->sv->new->TraceSignatureVisitor->r->new->SignatureReader->r->acceptType->buf->append->append->sv->getDeclaration->append->append->buf->append->appendAccess->appendDescriptor->buf->append->append->if->buf->append->if->buf->append->append->append->else->buf->append->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->return
Textifier#visitMethod(int, String, String, String, String[])::: textifier visit method:::buf->setLength->buf->append->if->buf->append->append->buf->append->append->Integer->toHexString->toUpperCase->append->append->if->buf->append->appendDescriptor->v->new->TraceSignatureVisitor->r->new->SignatureReader->r->accept->genericDecl->v->getDeclaration->genericReturn->v->getReturnType->genericExceptions->v->getExceptions->buf->append->append->append->append->append->append->if->buf->append->append->buf->append->buf->append->appendAccess->if->buf->append->if->buf->append->if->buf->append->if->buf->append->buf->append->appendDescriptor->if->buf->append->for->i->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->return
Textifier#visitClassEnd()::: textifier visit class end:::text->add
Textifier#visitMainClass(String)::: textifier visit main class:::buf->setLength->buf->append->append->append->text->buf->toString->add
Textifier#visitPackage(String)::: textifier visit package:::buf->setLength->buf->append->append->append->text->buf->toString->add
Textifier#visitRequire(String, int, String)::: textifier visit require:::buf->setLength->buf->append->append->if->buf->append->if->buf->append->buf->append->append->Integer->toHexString->toUpperCase->append->append->if->buf->append->append->append->text->buf->toString->add
Textifier#visitExport(String, int, String...)::: textifier visit export:::buf->setLength->buf->append->append->buf->append->if->buf->append->else->buf->append->buf->append->Integer->toHexString->toUpperCase->append->append->if->for->i->text->buf->toString->add
Textifier#visitOpen(String, int, String...)::: textifier visit open:::buf->setLength->buf->append->append->buf->append->if->buf->append->else->buf->append->buf->append->Integer->toHexString->toUpperCase->append->append->if->for->i->text->buf->toString->add
Textifier#visitUse(String)::: textifier visit use:::buf->setLength->buf->append->append->appendDescriptor->buf->append->text->buf->toString->add
Textifier#visitProvide(String, String...)::: textifier visit provide:::buf->setLength->buf->append->append->appendDescriptor->buf->append->for->i->text->buf->toString->add
Textifier#visitModuleEnd()::: textifier visit module end:::
Textifier#visit(String, Object)::: textifier visit:::buf->setLength->appendComa->if->buf->append->append->if->visitString->else->if->visitType->else->if->byteValue->visitByte->else->if->booleanValue->visitBoolean->else->if->shortValue->visitShort->else->if->charValue->visitChar->else->if->intValue->visitInt->else->if->floatValue->visitFloat->else->if->longValue->visitLong->else->if->doubleValue->visitDouble->else->if->value->getClass->isArray->buf->append->if->v->for->i->else->if->v->for->i->else->if->v->for->i->else->if->v->for->i->else->if->v->for->i->else->if->v->for->i->else->if->v->for->i->else->if->v->for->i->buf->append->text->buf->toString->add
Textifier#visitInt(int)::: textifier visit int:::buf->append
Textifier#visitLong(long)::: textifier visit long:::buf->append->append
Textifier#visitFloat(float)::: textifier visit float:::buf->append->append
Textifier#visitDouble(double)::: textifier visit double:::buf->append->append
Textifier#visitChar(char)::: textifier visit char:::buf->append->append
Textifier#visitShort(short)::: textifier visit short:::buf->append->append
Textifier#visitByte(byte)::: textifier visit byte:::buf->append->append
Textifier#visitBoolean(boolean)::: textifier visit boolean:::buf->append
Textifier#visitString(String)::: textifier visit string:::appendString
Textifier#visitType(Type)::: textifier visit type:::buf->value->getClassName->append->append
Textifier#visitEnum(String, String, String)::: textifier visit enum:::buf->setLength->appendComa->if->buf->append->append->appendDescriptor->buf->append->append->text->buf->toString->add
Textifier#visitAnnotation(String, String)::: textifier visit annotation:::buf->setLength->appendComa->if->buf->append->append->buf->append->appendDescriptor->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->text->add->return
Textifier#visitArray(String)::: textifier visit array:::buf->setLength->appendComa->if->buf->append->append->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->text->add->return
Textifier#visitAnnotationEnd()::: textifier visit annotation end:::
Textifier#visitFieldAnnotation(String, boolean)::: textifier visit field annotation:::return->visitAnnotation
Textifier#visitFieldTypeAnnotation(int, TypePath, String, boolean)::: textifier visit field type annotation:::return->visitTypeAnnotation
Textifier#visitFieldAttribute(Attribute)::: textifier visit field attribute:::visitAttribute
Textifier#visitFieldEnd()::: textifier visit field end:::
Textifier#visitParameter(String, int)::: textifier visit parameter:::buf->setLength->buf->append->append->appendAccess->buf->append->append->append->text->buf->toString->add
Textifier#visitAnnotationDefault()::: textifier visit annotation default:::text->add->t->createTextifier->text->t->getText->add->text->add->return
Textifier#visitMethodAnnotation(String, boolean)::: textifier visit method annotation:::return->visitAnnotation
Textifier#visitMethodTypeAnnotation(int, TypePath, String, boolean)::: textifier visit method type annotation:::return->visitTypeAnnotation
Textifier#visitParameterAnnotation(int, String, boolean)::: textifier visit parameter annotation:::buf->setLength->buf->append->append->appendDescriptor->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->text->add->text->add->text->add->return
Textifier#visitMethodAttribute(Attribute)::: textifier visit method attribute:::buf->setLength->buf->append->append->appendDescriptor->if->textify->else->buf->append->text->buf->toString->add
Textifier#visitCode()::: textifier visit code:::
Textifier#visitFrame(int, int, Object[], int, Object[])::: textifier visit frame:::buf->setLength->buf->append->buf->append->switch->buf->append->appendFrameTypes->buf->append->appendFrameTypes->buf->append->break->buf->append->appendFrameTypes->buf->append->break->buf->append->append->break->buf->append->break->buf->append->appendFrameTypes->break->buf->append->text->buf->toString->add
Textifier#visitInsn(int)::: textifier visit insn:::buf->setLength->buf->append->append->append->text->buf->toString->add
Textifier#visitIntInsn(int, int)::: textifier visit int insn:::buf->setLength->buf->append->append->append->Integer->toString->append->append->text->buf->toString->add
Textifier#visitVarInsn(int, int)::: textifier visit var insn:::buf->setLength->buf->append->append->append->append->append->text->buf->toString->add
Textifier#visitTypeInsn(int, String)::: textifier visit type insn:::buf->setLength->buf->append->append->append->appendDescriptor->buf->append->text->buf->toString->add
Textifier#visitFieldInsn(int, String, String, String)::: textifier visit field insn:::buf->setLength->buf->append->append->append->appendDescriptor->buf->append->append->append->appendDescriptor->buf->append->text->buf->toString->add
Textifier#visitMethodInsn(int, String, String, String)::: textifier visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
Textifier#visitMethodInsn(int, String, String, String, boolean)::: textifier visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
Textifier#doVisitMethodInsn(int, String, String, String, boolean)::: textifier do visit method insn:::buf->setLength->buf->append->append->append->appendDescriptor->buf->append->append->append->appendDescriptor->buf->append->text->buf->toString->add
Textifier#visitInvokeDynamicInsn(String, String, Handle, Object...)::: textifier visit invoke dynamic insn:::buf->setLength->buf->append->append->append->buf->append->appendDescriptor->buf->append->buf->append->buf->append->appendHandle->buf->append->buf->append->append->if->buf->append->else->buf->append->for->i->buf->buf->length->setLength->buf->append->buf->append->append->text->buf->toString->add
Textifier#visitJumpInsn(int, Label)::: textifier visit jump insn:::buf->setLength->buf->append->append->append->appendLabel->buf->append->text->buf->toString->add
Textifier#visitLabel(Label)::: textifier visit label:::buf->setLength->buf->append->appendLabel->buf->append->text->buf->toString->add
Textifier#visitLdcInsn(Object)::: textifier visit ldc insn:::buf->setLength->buf->append->append->if->Printer->appendString->else->if->buf->getDescriptor->append->append->else->buf->append->buf->append->text->buf->toString->add
Textifier#visitIincInsn(int, int)::: textifier visit iinc insn:::buf->setLength->buf->append->append->append->append->append->append->text->buf->toString->add
Textifier#visitTableSwitchInsn(int, int, Label, Label...)::: textifier visit table switch insn:::buf->setLength->buf->append->append->for->i->buf->append->append->appendLabel->buf->append->text->buf->toString->add
Textifier#visitLookupSwitchInsn(Label, int[], Label[])::: textifier visit lookup switch insn:::buf->setLength->buf->append->append->for->i->buf->append->append->appendLabel->buf->append->text->buf->toString->add
Textifier#visitMultiANewArrayInsn(String, int)::: textifier visit multi new array insn:::buf->setLength->buf->append->append->appendDescriptor->buf->append->append->append->text->buf->toString->add
Textifier#visitInsnAnnotation(int, TypePath, String, boolean)::: textifier visit insn annotation:::return->visitTypeAnnotation
Textifier#visitTryCatchBlock(Label, Label, Label, String)::: textifier visit try catch block:::buf->setLength->buf->append->append->appendLabel->buf->append->appendLabel->buf->append->appendLabel->buf->append->appendDescriptor->buf->append->text->buf->toString->add
Textifier#visitTryCatchAnnotation(int, TypePath, String, boolean)::: textifier visit try catch annotation:::buf->setLength->buf->append->append->appendDescriptor->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->buf->setLength->buf->append->appendTypeReference->buf->append->append->buf->append->text->buf->toString->add->return
Textifier#visitLocalVariable(String, String, String, Label, Label, int)::: textifier visit local variable:::buf->setLength->buf->append->append->append->append->appendDescriptor->buf->append->appendLabel->buf->append->appendLabel->buf->append->append->append->if->buf->append->appendDescriptor->sv->new->TraceSignatureVisitor->r->new->SignatureReader->r->acceptType->buf->append->append->sv->getDeclaration->append->append->text->buf->toString->add
Textifier#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean)::: textifier visit local variable annotation:::buf->setLength->buf->append->append->appendDescriptor->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->buf->setLength->buf->append->appendTypeReference->buf->append->append->for->i->buf->append->text->buf->toString->add->return
Textifier#visitLineNumber(int, Label)::: textifier visit line number:::buf->setLength->buf->append->append->append->append->appendLabel->buf->append->text->buf->toString->add
Textifier#visitMaxs(int, int)::: textifier visit maxs:::buf->setLength->buf->append->append->append->append->text->buf->toString->add->buf->setLength->buf->append->append->append->append->text->buf->toString->add
Textifier#visitMethodEnd()::: textifier visit method end:::
Textifier#visitAnnotation(String, boolean):::Prints a disassembled view of the given annotation.:::buf->setLength->buf->append->append->appendDescriptor->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->text->add->return
Textifier#visitTypeAnnotation(int, TypePath, String, boolean):::Prints a disassembled view of the given type annotation.:::buf->setLength->buf->append->append->appendDescriptor->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->buf->setLength->buf->append->appendTypeReference->buf->append->append->buf->append->text->buf->toString->add->return
Textifier#visitAttribute(Attribute):::Prints a disassembled view of the given attribute.:::buf->setLength->buf->append->append->appendDescriptor->if->textify->else->buf->append->text->buf->toString->add
Textifier#createTextifier():::Creates a new TraceVisitor instance.:::return->new->Textifier
Textifier#appendDescriptor(int, String):::Appends an internal name, a type descriptor or a type signature to #buf buf.:::if->if->buf->append->append->append->else->buf->append
Textifier#appendLabel(Label):::Appends the name of the given label to #buf buf:::if->new->HashMap<Label,String>->name->labelNames->get->if->labelNames->size->labelNames->put->buf->append
Textifier#appendHandle(Handle):::Appends the information about the given handle to #buf buf.:::tag->h->getTag->buf->append->Integer->toHexString->append->append->isMethodHandle->switch->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->buf->append->h->getOwner->appendDescriptor->buf->append->buf->h->getName->append->if->buf->append->h->getDesc->appendDescriptor->if->buf->append->if->h->isInterface->buf->append
Textifier#appendAccess(int):::Appends a string representation of the given access modifiers to #buf buf.:::if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append->if->buf->append
Textifier#appendComa(int)::: textifier append coma:::if->buf->append
Textifier#appendTypeReference(int)::: textifier append type reference:::ref->new->TypeReference->switch->ref->getSort->buf->append->ref->getTypeParameterIndex->append->break->buf->append->ref->getTypeParameterIndex->append->break->buf->append->ref->getSuperTypeIndex->append->break->buf->append->ref->getTypeParameterIndex->append->append->ref->getTypeParameterBoundIndex->append->break->buf->append->ref->getTypeParameterIndex->append->append->ref->getTypeParameterBoundIndex->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->ref->getFormalParameterIndex->append->break->buf->append->ref->getExceptionIndex->append->break->buf->append->break->buf->append->break->buf->append->ref->getTryCatchBlockIndex->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->ref->getTypeArgumentIndex->append->break->buf->append->ref->getTypeArgumentIndex->append->break->buf->append->ref->getTypeArgumentIndex->append->break->buf->append->ref->getTypeArgumentIndex->append->break->buf->append->ref->getTypeArgumentIndex->append->break
Textifier#appendFrameTypes(int, Object[])::: textifier append frame types:::for->i
TraceAnnotationVisitor#visit(String, Object)::: trace annotation visitor visit:::p->visit->super->visit
TraceAnnotationVisitor#visitEnum(String, String, String)::: trace annotation visitor visit enum:::p->visitEnum->super->visitEnum
TraceAnnotationVisitor#visitAnnotation(String, String)::: trace annotation visitor visit annotation:::p->visitAnnotation->av->visitAnnotation->return->new->TraceAnnotationVisitor
TraceAnnotationVisitor#visitArray(String)::: trace annotation visitor visit array:::p->visitArray->av->visitArray->return->new->TraceAnnotationVisitor
TraceAnnotationVisitor#visitEnd()::: trace annotation visitor visit end:::p->visitAnnotationEnd->super->visitEnd
TraceClassVisitor#visit(int, int, String, String, String, String[])::: trace class visitor visit:::p->visit->super->visit
TraceClassVisitor#visitSource(String, String)::: trace class visitor visit source:::p->visitSource->super->visitSource
TraceClassVisitor#visitModule(String, int, String)::: trace class visitor visit module:::p->visitModule->mv->super->visitModule->return->new->TraceModuleVisitor
TraceClassVisitor#visitOuterClass(String, String, String)::: trace class visitor visit outer class:::p->visitOuterClass->super->visitOuterClass
TraceClassVisitor#visitAnnotation(String, boolean)::: trace class visitor visit annotation:::p->visitClassAnnotation->av->cv->visitAnnotation->return->new->TraceAnnotationVisitor
TraceClassVisitor#visitTypeAnnotation(int, TypePath, String, boolean)::: trace class visitor visit type annotation:::p->visitClassTypeAnnotation->av->cv->visitTypeAnnotation->return->new->TraceAnnotationVisitor
TraceClassVisitor#visitAttribute(Attribute)::: trace class visitor visit attribute:::p->visitClassAttribute->super->visitAttribute
TraceClassVisitor#visitInnerClass(String, String, String, int)::: trace class visitor visit inner class:::p->visitInnerClass->super->visitInnerClass
TraceClassVisitor#visitField(int, String, String, String, Object)::: trace class visitor visit field:::p->visitField->fv->cv->visitField->return->new->TraceFieldVisitor
TraceClassVisitor#visitMethod(int, String, String, String, String[])::: trace class visitor visit method:::p->visitMethod->mv->cv->visitMethod->return->new->TraceMethodVisitor
TraceClassVisitor#visitEnd()::: trace class visitor visit end:::p->visitClassEnd->if->p->print->pw->flush->super->visitEnd
TraceFieldVisitor#visitAnnotation(String, boolean)::: trace field visitor visit annotation:::p->visitFieldAnnotation->av->fv->visitAnnotation->return->new->TraceAnnotationVisitor
TraceFieldVisitor#visitTypeAnnotation(int, TypePath, String, boolean)::: trace field visitor visit type annotation:::p->visitFieldTypeAnnotation->av->fv->visitTypeAnnotation->return->new->TraceAnnotationVisitor
TraceFieldVisitor#visitAttribute(Attribute)::: trace field visitor visit attribute:::p->visitFieldAttribute->super->visitAttribute
TraceFieldVisitor#visitEnd()::: trace field visitor visit end:::p->visitFieldEnd->super->visitEnd
TraceMethodVisitor#visitParameter(String, int)::: trace method visitor visit parameter:::p->visitParameter->super->visitParameter
TraceMethodVisitor#visitAnnotation(String, boolean)::: trace method visitor visit annotation:::p->visitMethodAnnotation->av->mv->visitAnnotation->return->new->TraceAnnotationVisitor
TraceMethodVisitor#visitTypeAnnotation(int, TypePath, String, boolean)::: trace method visitor visit type annotation:::p->visitMethodTypeAnnotation->av->mv->visitTypeAnnotation->return->new->TraceAnnotationVisitor
TraceMethodVisitor#visitAttribute(Attribute)::: trace method visitor visit attribute:::p->visitMethodAttribute->super->visitAttribute
TraceMethodVisitor#visitAnnotationDefault()::: trace method visitor visit annotation default:::p->visitAnnotationDefault->av->mv->visitAnnotationDefault->return->new->TraceAnnotationVisitor
TraceMethodVisitor#visitParameterAnnotation(int, String, boolean)::: trace method visitor visit parameter annotation:::p->visitParameterAnnotation->av->mv->visitParameterAnnotation->return->new->TraceAnnotationVisitor
TraceMethodVisitor#visitCode()::: trace method visitor visit code:::p->visitCode->super->visitCode
TraceMethodVisitor#visitFrame(int, int, Object[], int, Object[])::: trace method visitor visit frame:::p->visitFrame->super->visitFrame
TraceMethodVisitor#visitInsn(int)::: trace method visitor visit insn:::p->visitInsn->super->visitInsn
TraceMethodVisitor#visitIntInsn(int, int)::: trace method visitor visit int insn:::p->visitIntInsn->super->visitIntInsn
TraceMethodVisitor#visitVarInsn(int, int)::: trace method visitor visit var insn:::p->visitVarInsn->super->visitVarInsn
TraceMethodVisitor#visitTypeInsn(int, String)::: trace method visitor visit type insn:::p->visitTypeInsn->super->visitTypeInsn
TraceMethodVisitor#visitFieldInsn(int, String, String, String)::: trace method visitor visit field insn:::p->visitFieldInsn->super->visitFieldInsn
TraceMethodVisitor#visitMethodInsn(int, String, String, String)::: trace method visitor visit method insn:::if->super->visitMethodInsn->return->p->visitMethodInsn->if->mv->visitMethodInsn
TraceMethodVisitor#visitMethodInsn(int, String, String, String, boolean)::: trace method visitor visit method insn:::if->super->visitMethodInsn->return->p->visitMethodInsn->if->mv->visitMethodInsn
TraceMethodVisitor#visitInvokeDynamicInsn(String, String, Handle, Object...)::: trace method visitor visit invoke dynamic insn:::p->visitInvokeDynamicInsn->super->visitInvokeDynamicInsn
TraceMethodVisitor#visitJumpInsn(int, Label)::: trace method visitor visit jump insn:::p->visitJumpInsn->super->visitJumpInsn
TraceMethodVisitor#visitLabel(Label)::: trace method visitor visit label:::p->visitLabel->super->visitLabel
TraceMethodVisitor#visitLdcInsn(Object)::: trace method visitor visit ldc insn:::p->visitLdcInsn->super->visitLdcInsn
TraceMethodVisitor#visitIincInsn(int, int)::: trace method visitor visit iinc insn:::p->visitIincInsn->super->visitIincInsn
TraceMethodVisitor#visitTableSwitchInsn(int, int, Label, Label...)::: trace method visitor visit table switch insn:::p->visitTableSwitchInsn->super->visitTableSwitchInsn
TraceMethodVisitor#visitLookupSwitchInsn(Label, int[], Label[])::: trace method visitor visit lookup switch insn:::p->visitLookupSwitchInsn->super->visitLookupSwitchInsn
TraceMethodVisitor#visitMultiANewArrayInsn(String, int)::: trace method visitor visit multi new array insn:::p->visitMultiANewArrayInsn->super->visitMultiANewArrayInsn
TraceMethodVisitor#visitInsnAnnotation(int, TypePath, String, boolean)::: trace method visitor visit insn annotation:::p->visitInsnAnnotation->av->mv->visitInsnAnnotation->return->new->TraceAnnotationVisitor
TraceMethodVisitor#visitTryCatchBlock(Label, Label, Label, String)::: trace method visitor visit try catch block:::p->visitTryCatchBlock->super->visitTryCatchBlock
TraceMethodVisitor#visitTryCatchAnnotation(int, TypePath, String, boolean)::: trace method visitor visit try catch annotation:::p->visitTryCatchAnnotation->av->mv->visitTryCatchAnnotation->return->new->TraceAnnotationVisitor
TraceMethodVisitor#visitLocalVariable(String, String, String, Label, Label, int)::: trace method visitor visit local variable:::p->visitLocalVariable->super->visitLocalVariable
TraceMethodVisitor#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean)::: trace method visitor visit local variable annotation:::p->visitLocalVariableAnnotation->av->mv->visitLocalVariableAnnotation->return->new->TraceAnnotationVisitor
TraceMethodVisitor#visitLineNumber(int, Label)::: trace method visitor visit line number:::p->visitLineNumber->super->visitLineNumber
TraceMethodVisitor#visitMaxs(int, int)::: trace method visitor visit maxs:::p->visitMaxs->super->visitMaxs
TraceMethodVisitor#visitEnd()::: trace method visitor visit end:::p->visitMethodEnd->super->visitEnd
TraceModuleVisitor#visitMainClass(String)::: trace module visitor visit main class:::p->visitMainClass->super->visitMainClass
TraceModuleVisitor#visitPackage(String)::: trace module visitor visit package:::p->visitPackage->super->visitPackage
TraceModuleVisitor#visitRequire(String, int, String)::: trace module visitor visit require:::p->visitRequire->super->visitRequire
TraceModuleVisitor#visitExport(String, int, String...)::: trace module visitor visit export:::p->visitExport->super->visitExport
TraceModuleVisitor#visitOpen(String, int, String...)::: trace module visitor visit open:::p->visitOpen->super->visitOpen
TraceModuleVisitor#visitUse(String)::: trace module visitor visit use:::p->visitUse->super->visitUse
TraceModuleVisitor#visitProvide(String, String...)::: trace module visitor visit provide:::p->visitProvide->super->visitProvide
TraceModuleVisitor#visitEnd()::: trace module visitor visit end:::p->visitModuleEnd->super->visitEnd
TraceSignatureVisitor#visitFormalTypeParameter(String)::: trace signature visitor visit formal type parameter:::declaration->append->append
TraceSignatureVisitor#visitClassBound()::: trace signature visitor visit class bound:::startType->return
TraceSignatureVisitor#visitInterfaceBound()::: trace signature visitor visit interface bound:::startType->return
TraceSignatureVisitor#visitSuperclass()::: trace signature visitor visit superclass:::endFormals->startType->return
TraceSignatureVisitor#visitInterface()::: trace signature visitor visit interface:::startType->return
TraceSignatureVisitor#visitParameterType()::: trace signature visitor visit parameter type:::endFormals->if->declaration->append->else->declaration->append->startType->return
TraceSignatureVisitor#visitReturnType()::: trace signature visitor visit return type:::endFormals->if->else->declaration->append->declaration->append->new->StringBuilder->return->new->TraceSignatureVisitor
TraceSignatureVisitor#visitExceptionType()::: trace signature visitor visit exception type:::if->new->StringBuilder->else->exceptions->append->return->new->TraceSignatureVisitor
TraceSignatureVisitor#visitBaseType(char)::: trace signature visitor visit base type:::switch->declaration->append->break->declaration->append->break->declaration->append->break->declaration->append->break->declaration->append->break->declaration->append->break->declaration->append->break->declaration->append->break->declaration->append->break->endType
TraceSignatureVisitor#visitTypeVariable(String)::: trace signature visitor visit type variable:::declaration->append->endType
TraceSignatureVisitor#visitArrayType()::: trace signature visitor visit array type:::startType->return
TraceSignatureVisitor#visitClassType(String)::: trace signature visitor visit class type:::if->equals->needObjectClass->if->declaration->append->name->replace->append->else->declaration->append->name->replace->append
TraceSignatureVisitor#visitInnerClassType(String)::: trace signature visitor visit inner class type:::if->declaration->append->declaration->append->declaration->append->name->replace->append
TraceSignatureVisitor#visitTypeArgument()::: trace signature visitor visit type argument:::if->declaration->append->else->declaration->append->declaration->append
TraceSignatureVisitor#visitTypeArgument(char)::: trace signature visitor visit type argument:::if->declaration->append->else->declaration->append->if->declaration->append->else->if->declaration->append->startType->return
TraceSignatureVisitor#visitEnd()::: trace signature visitor visit end:::if->declaration->append->endType
TraceSignatureVisitor#getDeclaration()::: trace signature visitor get declaration:::return->declaration->toString
TraceSignatureVisitor#getReturnType()::: trace signature visitor get return type:::return->returnType->toString
TraceSignatureVisitor#getExceptions()::: trace signature visitor get exceptions:::return->exceptions->toString
TraceSignatureVisitor#endFormals()::: trace signature visitor end formals:::if->declaration->append
TraceSignatureVisitor#startType()::: trace signature visitor start type:::
TraceSignatureVisitor#endType()::: trace signature visitor end type:::if->else->while->declaration->append

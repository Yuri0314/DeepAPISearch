ASMifiable#asmify(StringBuffer, String, Map):::Prints the ASM code to create an attribute equal to this attribute.:::
ASMifier#main(String[]):::Prints the ASM source code to generate the given class to the standard output:::i->flags->ok->if->if->equals->if->if->println->println->return->cr->if->endsWith->indexOf->indexOf->new->FileInputStream->new->ClassReader->else->new->ClassReader->cr->new->ASMifier->new->PrintWriter->new->TraceClassVisitor->accept
ASMifier#appendAccess(int):::Appends a string representation of the given access modifiers to #buf buf.:::first->if->buf->append->if->buf->append->if->buf->append->if->if->buf->append->if->buf->append->else->buf->append->if->if->buf->append->buf->append->if->if->buf->append->if->if->buf->append->else->buf->append->else->buf->append->if->if->buf->append->if->if->buf->append->else->buf->append->else->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->buf->append->if->if->buf->append->if->buf->append->else->buf->append->if->buf->append
ASMifier#appendConstant(Object):::Appends a string representation of the given constant to the given buffer.:::appendConstant
ASMifier#appendConstant(StringBuffer, Object):::Appends a string representation of the given constant to the given buffer.:::if->buf->append->else->if->appendString->else->if->buf->append->buf->getDescriptor->append->buf->append->else->if->buf->append->h->buf->append->h->getTag->append->append->buf->h->getOwner->append->append->buf->h->getName->append->append->buf->h->getDesc->append->append->buf->h->isInterface->append->append->else->if->buf->append->append->append->else->if->buf->booleanValue->append->else->if->buf->append->append->append->else->if->c->charValue->buf->append->append->append->else->if->buf->append->append->append->else->if->buf->append->append->append->else->if->buf->append->append->append->else->if->buf->append->append->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append->else->if->v->buf->append->for->i->buf->append
ASMifier#declareLabel(Label):::Appends a declaration of the given label to #buf buf:::if->new->HashMap<Label,String>->name->labelNames->get->if->labelNames->size->labelNames->put->buf->append->append->append
ASMifier#appendLabel(Label):::Appends the name of the given label to #buf buf:::buf->labelNames->get->append
CheckClassAdapter#main(String[]):::Checks a given class:::if->println->println->return->cr->if->endsWith->new->FileInputStream->new->ClassReader->else->new->ClassReader->new->PrintWriter->verify
CheckClassAdapter#verify(ClassReader, ClassLoader, boolean, PrintWriter):::Checks a given class.:::cn->new->ClassNode->cr->new->CheckClassAdapter->accept->syperType->Type->getObjectType->methods->interfaces->new->ArrayList<Type>->for->i->iterator->i->hasNext->for->i->methods->size->pw->flush
CheckClassAdapter#verify(ClassReader, boolean, PrintWriter):::Checks a given class:::verify
CheckClassAdapter#checkAccess(int, int):::Checks that the given access flags do not contain invalid flags:::if->throw->new->IllegalArgumentException->pub->pri->pro->if->throw->new->IllegalArgumentException->fin->abs->if->throw->new->IllegalArgumentException
CheckClassAdapter#checkClassSignature(String):::Checks a class signature.:::pos->if->getChar->checkFormalTypeParameters->checkClassTypeSignature->while->getChar->checkClassTypeSignature->if->signature->length->throw->new->IllegalArgumentException
CheckClassAdapter#checkMethodSignature(String):::Checks a method signature.:::pos->if->getChar->checkFormalTypeParameters->checkChar->while->getChar->indexOf->checkTypeSignature->checkChar->if->getChar->else->checkTypeSignature->while->getChar->if->getChar->checkClassTypeSignature->else->checkTypeVariableSignature->if->signature->length->throw->new->IllegalArgumentException
CheckClassAdapter#checkFieldSignature(String):::Checks a field signature.:::pos->checkFieldTypeSignature->if->signature->length->throw->new->IllegalArgumentException
CheckClassAdapter#checkTypeRefAndPath(int, TypePath):::Checks the reference to a type in a type annotation.:::mask->switch->break->break->break->break->throw->Integer->toHexString->new->IllegalArgumentException->if->throw->Integer->toHexString->new->IllegalArgumentException->if->for->i->typePath->getLength
CheckMethodAdapter#checkStartCode():::Checks that the visitCode method has been called.:::if->throw->new->IllegalStateException
CheckMethodAdapter#checkEndCode():::Checks that the visitMaxs method has not been called.:::if->throw->new->IllegalStateException
CheckMethodAdapter#checkEndMethod():::Checks that the visitEnd method has not been called.:::if->throw->new->IllegalStateException
CheckMethodAdapter#checkFrameValue(Object):::Checks a stack frame value.:::if->return->if->checkInternalName->return->if->throw->new->IllegalArgumentException->else->usedLabels->add
CheckMethodAdapter#checkOpcode(int, int):::Checks that the type of the given opcode is equal to the given type.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkSignedByte(int, String):::Checks that the given value is a signed byte.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkSignedShort(int, String):::Checks that the given value is a signed short.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkUnsignedShort(int, String):::Checks that the given value is an unsigned short.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkConstant(Object):::Checks that the given value is an Integer, aFloat, a Long, a Double or a String.:::if->throw->new->IllegalArgumentException
CheckMethodAdapter#checkUnqualifiedName(int, String, String):::Checks that the given string is a valid unqualified name.:::if->checkIdentifier->else->for->i->name->length
CheckMethodAdapter#checkIdentifier(String, String):::Checks that the given string is a valid Java identifier.:::checkIdentifier
CheckMethodAdapter#checkIdentifier(String, int, int, String):::Checks that the given substring is a valid Java identifier.:::if->name->length->throw->new->IllegalArgumentException->if->Character->name->charAt->isJavaIdentifierStart->throw->new->IllegalArgumentException->max->name->length->for->i
CheckMethodAdapter#checkMethodIdentifier(int, String, String):::Checks that the given string is a valid Java identifier.:::if->name->length->throw->new->IllegalArgumentException->if->for->i->name->length->return->if->Character->name->charAt->isJavaIdentifierStart->throw->new->IllegalArgumentException->for->i->name->length
CheckMethodAdapter#checkInternalName(String, String):::Checks that the given string is a valid internal class name.:::if->name->length->throw->new->IllegalArgumentException->if->name->charAt->checkDesc->else->checkInternalName
CheckMethodAdapter#checkInternalName(String, int, int, String):::Checks that the given substring is a valid internal class name.:::max->name->length->try->begin->slash->do->name->indexOf->if->checkIdentifier->while->catch->throw->new->IllegalArgumentException->finally
CheckMethodAdapter#checkDesc(String, boolean):::Checks that the given string is a valid type descriptor.:::end->checkDesc->if->desc->length->throw->new->IllegalArgumentException
CheckMethodAdapter#checkDesc(String, int, boolean):::Checks that a the given substring is a valid type descriptor.:::if->desc->length->throw->new->IllegalArgumentException->index->switch->desc->charAt->if->return->else->throw->new->IllegalArgumentException->return->while->desc->length->desc->charAt->if->desc->length->return->checkDesc->else->throw->new->IllegalArgumentException->desc->indexOf->if->throw->new->IllegalArgumentException->try->checkInternalName->catch->throw->new->IllegalArgumentException->finally->return->throw->new->IllegalArgumentException
CheckMethodAdapter#checkMethodDesc(String):::Checks that the given string is a valid method descriptor.:::if->desc->length->throw->new->IllegalArgumentException->if->desc->charAt->desc->length->throw->new->IllegalArgumentException->start->if->desc->charAt->do->if->desc->charAt->throw->new->IllegalArgumentException->checkDesc->while->desc->length->desc->charAt->checkDesc->if->desc->length->throw->new->IllegalArgumentException
CheckMethodAdapter#checkLabel(Label, boolean, String):::Checks that the given label is not null:::if->throw->new->IllegalArgumentException->if->labels->get->throw->new->IllegalArgumentException
Printer#visit(int, int, String, String, String, String[]):::Class header:::
Printer#visitSource(String, String):::Class source:::
Printer#visitModule(String, int, String):::Module:::throw->new->RuntimeException
Printer#visitOuterClass(String, String, String):::Class outer class:::
Printer#visitClassAnnotation(String, boolean):::Class annotation:::
Printer#visitClassTypeAnnotation(int, TypePath, String, boolean):::Class type annotation:::throw->new->RuntimeException
Printer#visitClassAttribute(Attribute):::Class attribute:::
Printer#visitInnerClass(String, String, String, int):::Class inner name:::
Printer#visitField(int, String, String, String, Object):::Class field:::
Printer#visitMethod(int, String, String, String, String[]):::Class method:::
Printer#visitClassEnd():::Class end:::
Printer#visitModuleEnd():::Module end:::throw->new->RuntimeException
Printer#visit(String, Object):::Annotation value:::
Printer#visitEnum(String, String, String):::Annotation enum value:::
Printer#visitAnnotation(String, String):::Nested annotation value:::
Printer#visitArray(String):::Annotation array value:::
Printer#visitAnnotationEnd():::Annotation end:::
Printer#visitFieldAnnotation(String, boolean):::Field annotation:::
Printer#visitFieldTypeAnnotation(int, TypePath, String, boolean):::Field type annotation:::throw->new->RuntimeException
Printer#visitFieldAttribute(Attribute):::Field attribute:::
Printer#visitFieldEnd():::Field end:::
Printer#visitParameter(String, int):::Method parameter:::throw->new->RuntimeException
Printer#visitAnnotationDefault():::Method default annotation:::
Printer#visitMethodAnnotation(String, boolean):::Method annotation:::
Printer#visitMethodTypeAnnotation(int, TypePath, String, boolean):::Method type annotation:::throw->new->RuntimeException
Printer#visitParameterAnnotation(int, String, boolean):::Method parameter annotation:::
Printer#visitMethodAttribute(Attribute):::Method attribute:::
Printer#visitCode():::Method start:::
Printer#visitFrame(int, int, Object[], int, Object[]):::Method stack frame:::
Printer#visitInsn(int):::Method instruction:::
Printer#visitIntInsn(int, int):::Method instruction:::
Printer#visitVarInsn(int, int):::Method instruction:::
Printer#visitTypeInsn(int, String):::Method instruction:::
Printer#visitFieldInsn(int, String, String, String):::Method instruction:::
Printer#visitMethodInsn(int, String, String, String):::Method instruction:::if->itf->visitMethodInsn->return->throw->new->RuntimeException
Printer#visitMethodInsn(int, String, String, String, boolean):::Method instruction:::if->if->throw->new->IllegalArgumentException->visitMethodInsn->return->throw->new->RuntimeException
Printer#visitInvokeDynamicInsn(String, String, Handle, Object...):::Method instruction:::
Printer#visitJumpInsn(int, Label):::Method jump instruction:::
Printer#visitLabel(Label):::Method label:::
Printer#visitLdcInsn(Object):::Method instruction:::
Printer#visitIincInsn(int, int):::Method instruction:::
Printer#visitTableSwitchInsn(int, int, Label, Label...):::Method instruction:::
Printer#visitLookupSwitchInsn(Label, int[], Label[]):::Method instruction:::
Printer#visitMultiANewArrayInsn(String, int):::Method instruction:::
Printer#visitInsnAnnotation(int, TypePath, String, boolean):::Instruction type annotation:::throw->new->RuntimeException
Printer#visitTryCatchBlock(Label, Label, Label, String):::Method exception handler:::
Printer#visitTryCatchAnnotation(int, TypePath, String, boolean):::Try catch block type annotation:::throw->new->RuntimeException
Printer#visitLocalVariable(String, String, String, Label, Label, int):::Method debug info:::
Printer#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean):::Local variable type annotation:::throw->new->RuntimeException
Printer#visitLineNumber(int, Label):::Method debug info:::
Printer#visitMaxs(int, int):::Method max stack and max locals:::
Printer#visitMethodEnd():::Method end:::
Printer#getText():::Returns the text constructed by this visitor.:::return
Printer#print(PrintWriter):::Prints the text constructed by this visitor.:::printList
Printer#appendString(StringBuffer, String):::Appends a quoted string to a given buffer.:::buf->append->for->i->s->length->buf->append
Printer#printList(PrintWriter, List):::Prints the given string tree.:::for->i->l->size
Textifiable#textify(StringBuffer, Map):::Build a human readable representation of this attribute.:::
Textifier#main(String[]):::Prints a disassembled view of the given class to the standard output:::i->flags->ok->if->if->equals->if->if->println->println->return->cr->if->endsWith->indexOf->indexOf->new->FileInputStream->new->ClassReader->else->new->ClassReader->cr->new->PrintWriter->new->TraceClassVisitor->accept
Textifier#visitAnnotation(String, boolean):::Prints a disassembled view of the given annotation.:::buf->setLength->buf->append->append->appendDescriptor->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->text->add->return
Textifier#visitTypeAnnotation(int, TypePath, String, boolean):::Prints a disassembled view of the given type annotation.:::buf->setLength->buf->append->append->appendDescriptor->buf->append->text->buf->toString->add->t->createTextifier->text->t->getText->add->buf->setLength->buf->append->appendTypeReference->buf->append->append->buf->append->text->buf->toString->add->return
Textifier#visitAttribute(Attribute):::Prints a disassembled view of the given attribute.:::buf->setLength->buf->append->append->appendDescriptor->if->textify->else->buf->append->text->buf->toString->add
Textifier#createTextifier():::Creates a new TraceVisitor instance.:::return->new->Textifier
Textifier#appendDescriptor(int, String):::Appends an internal name, a type descriptor or a type signature to #buf buf.:::if->if->buf->append->append->append->else->buf->append
Textifier#appendLabel(Label):::Appends the name of the given label to #buf buf:::if->new->HashMap<Label,String>->name->labelNames->get->if->labelNames->size->labelNames->put->buf->append
Textifier#appendHandle(Handle):::Appends the information about the given handle to #buf buf.:::tag->h->getTag->buf->append->Integer->toHexString->append->append->isMethodHandle->switch->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->break->buf->append->buf->append->h->getOwner->appendDescriptor->buf->append->buf->h->getName->append->if->buf->append->h->getDesc->appendDescriptor->if->buf->append->if->h->isInterface->buf->append

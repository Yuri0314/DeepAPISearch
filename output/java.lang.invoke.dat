AbstractConstantGroup#toString():::Produce a string using the non-resolving list view, where unresolved elements are presented as asterisks.:::return->asList->toString
AbstractConstantGroup.WithCache#fillCache(int):::hook for local subclasses:::throw->new->NoSuchElementException
AbstractValidatingLambdaMetafactory#buildCallSite():::Build the CallSite.:::
AbstractValidatingLambdaMetafactory#validateMetafactoryArgs():::Check the meta-factory arguments for errors:::implArity->implMethodType->parameterCount->capturedArity->invokedType->parameterCount->samArity->samMethodType->parameterCount->instantiatedArity->instantiatedMethodType->parameterCount->if->throw->String->format->new->LambdaConversionException->if->throw->String->format->new->LambdaConversionException->foreach->if->bridgeMT->parameterCount->throw->String->format->new->LambdaConversionException->capturedStart->samStart->if->receiverClass->if->instantiatedMethodType->parameterType->else->invokedType->parameterType->if->implClass->isAssignableFrom->throw->String->format->new->LambdaConversionException->else->for->i->for->i->expectedType->instantiatedMethodType->returnType->actualReturnType->implMethodType->returnType->if->isAdaptableToAsReturn->throw->String->format->new->LambdaConversionException->checkDescriptor->foreach->checkDescriptor
BootstrapCallInfo#bootstrapMethod():::Returns the bootstrap method for this call.:::
BootstrapCallInfo#invocationName():::Returns the method name or constant name for this call.:::
BootstrapCallInfo#invocationType():::Returns the method type or constant type for this call.:::
BootstrapCallInfo#makeBootstrapCallInfo(MethodHandle, String, T, ConstantGroup):::Make a new bootstrap call descriptor with the given components.:::bsci->constants->size->new->AbstractConstantGroup.BSCIWithCache<>->NP->bsci->constants->asList->initializeCache->return
BootstrapMethodInvoker#invoke(Class, MethodHandle, String, Object, Object, Class):::Factored code for invoking a bootstrap method for invokedynamic or a dynamic constant.:::caller->IMPL_LOOKUP->in->result->pullMode->isPullModeBSM->vmIsPushing->staticArgumentsPulled->pullModeBSM->if->if->pushMePullYou->else->pushMePullYou->try->maybeReBox->if->invoke->else->if->info->getClass->isArray->if->bootstrapMethod->type->isStringConcatFactoryBSM->bootstrapMethod->new->ObjectArr->invokeExact->else->invoke->else->if->info->getClass->bsci->new->VM_BSCI<>->pullModeBSM->invoke->else->argv->maybeReBoxElements->bsmType->bootstrapMethod->type->if->isLambdaMetafactoryIndyBSM->bootstrapMethod->invokeExact->else->if->isLambdaMetafactoryCondyBSM->bootstrapMethod->invokeExact->else->if->isStringConcatFactoryBSM->recipe->shiftedArgs->Arrays->copyOfRange->bootstrapMethod->invokeExact->else->if->isLambdaMetafactoryAltMetafactoryBSM->bootstrapMethod->invokeExact->else->switch->invoke->break->invoke->break->invoke->break->invoke->break->invoke->break->invoke->break->invoke->break->invokeWithManyArguments->if->resultType->isPrimitive->funnel->MethodHandles->identity->funnel->invoke->Wrapper->asWrapperType->return->resultType->cast->catch->throw->throw->new->BootstrapMethodError->finally
BootstrapMethodInvoker#pushMePullYou(MethodHandle, boolean):::Given a push-mode BSM (taking one argument) convert it to a  pull-mode BSM (taking N pre-resolved arguments):::if->bsm->type->println->if->return->bindTo->withVarargs->else->return->bindTo->withVarargs
BoundMethodHandle#makeReinvoker(MethodHandle):::A reinvoker MH has this form: lambda (bmh, arg*) { thismh = bmh[0]; invokeBasic(thismh, arg*) }:::form->DelegatingMethodHandle->getterFunction->makeReinvokerForm->return->Species_L->target->type->make
CallSite#type():::Returns the type of this call site's target:::return->target->type
CallSite#getTarget():::Returns the target method of the call site, according to the behavior defined by this call site's specific class:::
CallSite#setTarget(MethodHandle):::Updates the target method of this call site, according to the behavior defined by this call site's specific class:::
CallSite#dynamicInvoker():::Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site:::
ClassSpecializer#topClass():::Return the top type mirror, for type T:::return
ClassSpecializer#keyType():::Return the key type mirror, for type K:::return
ClassSpecializer#metaType():::Return the species metadata type mirror, for type S:::return
ClassSpecializer#baseConstructorType():::Report the leading arguments (if any) required by every species factory:::return
ClassSpecializer#topSpecies():::Return the trivial species for the null sequence of arguments.:::return
ClassSpecializer#transformMethods():::Return the list of transform methods originally given at creation of this specializer.:::return
ClassSpecializer#factory():::Return the factory object used to build and load concrete species code.:::return
ClassSpecializer.SpeciesData#speciesCode():::Throws NPE if this species is not yet resolved.:::return->Objects->requireNonNull
ClassSpecializer.SpeciesData#getter(int):::Return a MethodHandle which can get the indexed field of this species:::return->getters->get
ClassSpecializer.SpeciesData#getterFunction(int):::Return a LambdaForm.Name containing a LambdaForm.NamedFunction that represents a MH bound to a generic invoker, which in turn forwards to the corresponding getter.:::nf->nominalGetters->get->return
ClassSpecializer.SpeciesData#deriveFieldTypes(K):::Given a key, derive the list of field types, which all instances of this species must store.:::
ClassSpecializer.SpeciesData#deriveTransformHelper(MemberName, int):::Given the index of a method in the transforms list, supply a factory method that takes the arguments of the transform, plus the local fields, and produce a value of the required type:::
ClassSpecializer.SpeciesData#deriveTransformHelperArguments(MemberName, int, List, List):::During code generation, this method is called once per transform to determine what is the mix of arguments to hand to the transform-helper:::
ClassSpecializer.SpeciesData#deriveClassName():::Given a key, generate the name of the class which implements the species for that key:::return->outer->topClass->getName->deriveTypeString
ClassSpecializer.SpeciesData#deriveTypeString():::Default implementation collects basic type characters, plus possibly type names, if some types don't correspond to basic types.:::types->fieldTypes->buf->new->StringBuilder->end->new->StringBuilder->foreach->basicType->BasicType->basicType->if->basicType->basicTypeClass->buf->basicType->basicTypeChar->append->else->buf->append->end->classSig->append->typeString->if->end->length->BytecodeName->buf->append->append->toString->toBytecodeName->else->buf->toString->return->LambdaForm->shortenSignature
ClassSpecializer.SpeciesData#deriveSuperClass():::Report what immediate super-class to use for the concrete class of this species:::topc->topClass->if->try->con->baseConstructorType->parameterArray->reflectConstructor->if->topc->isInterface->Modifier->con->getModifiers->isPrivate->catch->finally->if->throw->newInternalError->return
ClassSpecializer.Factory#loadSpecies(S):::Get a concrete subclass of the top class for a given combination of bound types.:::className->speciesData->deriveClassName->salvage->try->BootLoader->loadClassOrNull->if->println->catch->if->ex->getMessage->println->finally->speciesCode->if->salvage->topClass->asSubclass->linkSpeciesDataToCode->linkCodeToSpeciesData->else->try->generateConcreteSpeciesCode->if->println->linkSpeciesDataToCode->linkCodeToSpeciesData->catch->if->println->throw->finally->if->speciesData->isResolved->throw->newInternalError->return
ClassSpecializer.Factory#generateConcreteSpeciesCode(String, ClassSpecializer.SpeciesData):::Generate a concrete subclass of the top class for a given combination of bound types:::classFile->generateConcreteSpeciesCodeFile->InvokerBytecodeGenerator->classBCName->maybeDump->speciesCode->cl->topClass->getClassLoader->pd->if->AccessController->new->PrivilegedAction<>->doPrivileged->try->UNSAFE->defineClass->catch->throw->newInternalError->finally->return->speciesCode->topClass->asSubclass
ClassSpecializer.Factory#chooseFieldName(Class, int):::Field names in concrete species classes adhere to this pattern: type + index, where type is a single character (L, I, J, F, D):::bt->BasicType->basicType->return->bt->basicTypeChar
ClassSpecializer#makeFactory():::Hook that virtualizes the Factory class, allowing subclasses to extend it.:::return->new->Factory
ConstantBootstraps#nullConstant(MethodHandles.Lookup, String, Class):::Returns a null object reference for the reference type specified by type.:::if->requireNonNull->isPrimitive->throw->String->format->new->IllegalArgumentException->return
ConstantBootstraps#primitiveClass(MethodHandles.Lookup, String, Class):::Returns a Class mirror for the primitive type whose type descriptor is specified by name.:::requireNonNull->requireNonNull->if->throw->new->IllegalArgumentException->if->name->length->name->length->throw->String->format->new->IllegalArgumentException->return->Wrapper->name->charAt->forPrimitiveType->primitiveType
ConstantBootstraps#enumConstant(MethodHandles.Lookup, String, Class):::Returns an enum constant of the type specified by type with the name specified by name.:::requireNonNull->requireNonNull->requireNonNull->validateClassAccess->return->Enum->valueOf
ConstantBootstraps#getStaticFinal(MethodHandles.Lookup, String, Class, Class):::Returns the value of a static final field.:::requireNonNull->requireNonNull->requireNonNull->requireNonNull->mh->try->lookup->findStaticGetter->member->mh->internalMemberName->if->member->isFinal->throw->new->IncompatibleClassChangeError->catch->throw->mapLookupExceptionToError->finally->try->return->mh->invoke->catch->throw->throw->new->LinkageError->finally
ConstantBootstraps#getStaticFinal(MethodHandles.Lookup, String, Class):::Returns the value of a static final field declared in the class which is the same as the field's type (or, for primitive-valued fields, declared in the wrapper class.)  This is a simplified form of #getStaticFinal(MethodHandles.Lookup, String, Class, Class) for the case where a class declares distinguished constant instances of itself.:::requireNonNull->declaring->type->isPrimitive->Wrapper->forPrimitiveType->wrapperType->return->getStaticFinal
ConstantBootstraps#invoke(MethodHandles.Lookup, String, Class, MethodHandle, Object...):::Returns the result of invoking a method handle with the provided arguments:::requireNonNull->requireNonNull->requireNonNull->if->handle->type->returnType->handle->handle->type->changeReturnType->asType->handle->isVarargsCollector->withVarargs->return->handle->invokeWithArguments
ConstantBootstraps#fieldVarHandle(MethodHandles.Lookup, String, Class, Class, Class):::Finds a VarHandle for an instance field.:::requireNonNull->requireNonNull->requireNonNull->requireNonNull->requireNonNull->if->throw->new->IllegalArgumentException->try->return->lookup->findVarHandle->catch->throw->mapLookupExceptionToError->finally
ConstantBootstraps#staticFieldVarHandle(MethodHandles.Lookup, String, Class, Class, Class):::Finds a VarHandle for a static field.:::requireNonNull->requireNonNull->requireNonNull->requireNonNull->requireNonNull->if->throw->new->IllegalArgumentException->try->return->lookup->findStaticVarHandle->catch->throw->mapLookupExceptionToError->finally
ConstantBootstraps#arrayVarHandle(MethodHandles.Lookup, String, Class, Class):::Finds a VarHandle for an array type.:::requireNonNull->requireNonNull->requireNonNull->if->throw->new->IllegalArgumentException->return->MethodHandles->validateClassAccess->arrayElementVarHandle
ConstantCallSite#getTarget():::Returns the target method of the call site, which behaves like a final field of the ConstantCallSite:::if->throw->new->IllegalStateException->return
ConstantCallSite#setTarget(MethodHandle):::Always throws an UnsupportedOperationException:::throw->new->UnsupportedOperationException
ConstantCallSite#dynamicInvoker():::Returns this call site's permanent target:::return->getTarget
ConstantGroup#size():::Returns the number of constants in this group:::
ConstantGroup#get(int):::Returns the selected constant, resolving it if necessary:::
ConstantGroup#get(int, Object):::Returns the selected constant, or the given sentinel value if there is none available:::
ConstantGroup#isPresent(int):::Returns an indication of whether a constant may be available:::
ConstantGroup#asList():::Create a view on this group as a List view:::return->size->new->AbstractConstantGroup.AsList
ConstantGroup#asList(Object):::Create a view on this group as a List view:::return->size->new->AbstractConstantGroup.AsList
ConstantGroup#subGroup(int, int):::Create a view on a sub-sequence of this group.:::return->new->AbstractConstantGroup.SubGroup
ConstantGroup#copyConstants(int, int, Object[], int):::Copy a sequence of constant values into a given buffer:::bufBase->for->i->return
ConstantGroup#copyConstants(int, int, Object[], int, Object):::Copy a sequence of constant values into a given buffer:::bufBase->for->i->return
ConstantGroup#makeConstantGroup(List, Object, IntFunction):::Make a new constant group with the given constants:::return->new->Impl
ConstantGroup#makeConstantGroup(List):::Make a new constant group with the given constant values:::NP->return->makeConstantGroup
DelegatingMethodHandle#getTarget():::Define this to extract the delegated target which supplies the invocation behavior.:::
DelegatingMethodHandle#makeReinvokerForm(MethodHandle, int, Object, boolean, NamedFunction, NamedFunction):::Create a LF which simply reinvokes a target of the given basic type.:::mtype->target->type->basicType->kind->whichKind->customized->mtype->parameterSlotCount->hasPreAction->form->if->mtype->form->cachedLambdaForm->if->return->THIS_DMH->ARG_BASE->ARG_LIMIT->mtype->parameterCount->nameCursor->PRE_ACTION->NEXT_MH->REINVOKE->names->LambdaForm->mtype->invokerType->arguments->withConstraint->targetArgs->if->new->LambdaForm.Name->if->Arrays->copyOfRange->new->LambdaForm.Name->else->new->LambdaForm.Name->Arrays->copyOfRange->new->LambdaForm.Name->new->LambdaForm->if->mtype->form->setCachedLambdaForm->return
DirectMethodHandle#internalMemberName(Object):::Static wrapper for DirectMethodHandle.internalMemberName.:::return
DirectMethodHandle#checkReceiver(Object):::Used for interface receiver type checks, by Interface and Special modes.:::throw->new->InternalError
InnerClassLambdaMetafactory#buildCallSite():::Build the CallSite:::innerClass->spinInnerClass->if->invokedType->parameterCount->ctrs->AccessController->new->PrivilegedAction<>->doPrivileged->if->throw->innerClass->getCanonicalName->new->LambdaConversionException->try->inst->newInstance->return->MethodHandles->constant->new->ConstantCallSite->catch->throw->new->LambdaConversionException->finally->else->try->if->UNSAFE->ensureClassInitialized->return->findStatic->new->ConstantCallSite->catch->throw->new->LambdaConversionException->finally
InvokerBytecodeGenerator#generateCustomizedCode(LambdaForm, MethodType):::Generate customized bytecode for a given LambdaForm.:::pregenerated->lookupPregenerated->if->return->g->new->InvokerBytecodeGenerator->return->g->g->generateCustomizedCodeBytes->loadMethod
InvokerBytecodeGenerator#emitInvoke(Name):::Emit an invoke for the given name.:::if->target->resolvedHandle->mv->constantPlaceholder->visitLdcInsn->emitReferenceCast->else->emitAloadInsn->emitReferenceCast->mv->visitFieldInsn->mv->visitFieldInsn->emitPushArguments->type->methodType->mv->type->basicType->toMethodDescriptorString->visitMethodInsn
InvokerBytecodeGenerator#emitStaticInvoke(MemberName, Name):::Emit an invoke for the given name, using the MemberName directly.:::defc->member->getDeclaringClass->cname->getInternalName->mname->member->getName->mtype->refKind->member->getReferenceKind->if->emitPushArguments->if->member->isMethod->member->getMethodType->toMethodDescriptorString->mv->refKindOpcode->member->getDeclaringClass->isInterface->visitMethodInsn->else->MethodType->member->getFieldType->toFieldDescriptorString->mv->refKindOpcode->visitFieldInsn->if->rtype->member->getInvocationType->returnType->if->rtype->isInterface->assertStaticType
InvokerBytecodeGenerator#generateLambdaFormInterpreterEntryPoint(MethodType):::Generate bytecode for a LambdaForm.vmentry which calls interpretWithArguments.:::name->mt->returnType->basicTypeChar->type->type->changeParameterType->g->new->InvokerBytecodeGenerator->return->g->g->generateLambdaFormInterpreterEntryPointBytes->loadMethod
InvokerBytecodeGenerator#generateNamedFunctionInvoker(MethodTypeForm):::Generate bytecode for a NamedFunction invoker.:::invokerType->invokerName->typeForm->erasedType->basicTypeSignature->shortenSignature->g->new->InvokerBytecodeGenerator->return->g->g->generateNamedFunctionInvokerImpl->loadMethod
Invokers#invokeHandleForm(MethodType, boolean, int):::Returns an adapter for invokeExact or generic invoke, as a MH or constant pool linker:::isCached->if->mtype->basicType->else->isLinker->isGeneric->kind->switch->break->break->break->break->throw->new->InternalError->lform->if->mtype->form->cachedLambdaForm->if->return->THIS_MH->CALL_MH->ARG_BASE->OUTARG_LIMIT->mtype->parameterCount->INARG_LIMIT->nameCursor->MTYPE_ARG->CHECK_TYPE->CHECK_CUSTOM->LINKER_CALL->invokerFormType->mtype->invokerType->if->if->invokerFormType->appendParameterTypes->else->invokerFormType->invokerType->names->arguments->if->speciesData->BoundMethodHandle->speciesData_L->withConstraint->getter->speciesData->getterFunction->new->Name->outCallType->mtype->basicType->outArgs->Arrays->copyOfRange->mtypeArg->if->getFunction->new->Name->else->getFunction->new->Name->if->getFunction->new->Name->new->Name->if->new->LambdaForm->else->new->LambdaForm->if->lform->compileToBytecode->if->mtype->form->setCachedLambdaForm->return
LambdaForm#customize(MethodHandle):::Customize LambdaForm for a particular MethodHandle:::customForm->new->LambdaForm->if->customForm->compileToBytecode->return
LambdaForm#uncustomize():::Get uncustomized flavor of the LambdaForm:::if->return->uncustomizedForm->if->uncustomizedForm->compileToBytecode->return
LambdaForm#nameRefsAreLegal():::Check that all embedded Name references are localizable to this lambda, and are properly ordered after their corresponding definitions:::for->i->for->i->return
LambdaForm#returnType():::Report the return type.:::if->return->n->return
LambdaForm#parameterType(int):::Report the N-th argument type.:::return->parameter
LambdaForm#parameter(int):::Report the N-th argument name.:::param->return
LambdaForm#parameterConstraint(int):::Report the N-th argument type constraint.:::return->parameter
LambdaForm#arity():::Report the arity.:::return
LambdaForm#expressionCount():::Report the number of expressions (non-parameter names).:::return
LambdaForm#methodType():::Return the method type corresponding to my basic type signature.:::ptypes->new->Class<?>Arr->for->i->return->MethodType->returnType->makeImpl
LambdaForm#basicTypeSignature():::Return ABC_Z, where the ABC are parameter type characters, and Z is the return type character.:::buf->arity->new->StringBuilder->for->i->a->arity->return->buf->append->returnType->basicTypeChar->append->toString
LambdaForm#isSelectAlternative(int):::Check if i-th name is a call to MethodHandleImpl.selectAlternative.:::if->return->name0->name1->return->name0->refersTo->name1->isInvokeBasic->name1->lastUseIndex->lastUseIndex
LambdaForm#isGuardWithCatch(int):::Check if i-th name is a start of GuardWithCatch idiom.:::return->isMatchingIdiom
LambdaForm#isTryFinally(int):::Check if i-th name is a start of the tryFinally idiom.:::return->isMatchingIdiom
LambdaForm#isLoop(int):::Check if i-th name is a start of the loop idiom.:::return->isMatchingIdiom
LambdaForm#prepare():::Make this LF directly executable, as part of a MethodHandle:::if->forceInterpretation->compileToBytecode->if->return->mtype->methodType->prep->mtype->form->cachedLambdaForm->if->new->LambdaForm->InvokerBytecodeGenerator->generateLambdaFormInterpreterEntryPoint->mtype->form->setCachedLambdaForm
LambdaForm#compileToBytecode():::Generate optimizable bytecode for this form.:::if->forceInterpretation->return->if->return->invokerType->methodType->try->InvokerBytecodeGenerator->generateCustomizedCode->if->traceInterpreter->catch->failedCompilationCounter->increment->if->println->bge->printStackTrace->throw->throw->this->toString->newInternalError->finally
LambdaForm#shortenSignature(String):::Hack to make signatures more readable when they show up in method names:::NO_CHAR->MIN_RUN->c0->c1->c1reps->buf->len->signature->length->if->return->for->i->return->buf->toString
LambdaForm.Name#replaceNames(Name[], Name[], int, int):::In the arguments of this Name, replace oldNames[i] pairwise by newNames[i]:::if->return->arguments->replaced->for->j->if->return->return->new->Name
LambdaForm.Name#isInvokeBasic():::Check if MemberName is a call to MethodHandle.invokeBasic.:::if->return->if->return->member->function->member->return->member->refersTo->member->isPublic->member->isStatic
LambdaForm.Name#isLinkerMethodInvoke():::Check if MemberName is a call to MethodHandle.linkToStatic, etc.:::if->return->if->return->member->function->member->return->member->getDeclaringClass->member->isPublic->member->isStatic->member->getName->startsWith
LambdaForm.Name#lastUseIndex(Name):::Return the index of the last occurrence of n in the argument array:::if->return->for->i->return
LambdaForm.Name#useCount(Name):::Return the number of occurrences of n in the argument array:::if->return->count->for->i->return
LambdaForm#lastUseIndex(Name):::Return the index of the last name which contains n as an argument:::ni->nmax->if->return->for->i->return
LambdaForm#useCount(Name):::Return the number of times n is used as an argument or return value.:::nmax->end->lastUseIndex->if->return->count->if->beg->n->index->if->for->i->return
LambdaFormBuffer#startEdit():::Create a private, writable copy of names:::oc->ownedCount->oldNames->ownBuffer->if->copyNamesInto->else->SLOP->Arrays->Math->max->copyOf->if
LambdaFormBuffer#setResult(Name):::Change the result name:::
LambdaFormBuffer#endEdit():::Finish a transaction.:::for->i->Math->max->clearDuplicatesAndNulls->if->exprs->new->NameArr->argp->exprp->for->i->System->arraycopy->return->lambdaForm
LambdaFormBuffer#replaceFunctions(List, List, Object...):::Replace any Name whose function is in oldFns with a copy  whose function is in the corresponding position in newFns:::if->oldFns->isEmpty->return->for->i->return
LambdaFormBuffer#renameParameter(int, Name):::Replace a parameter by a fresh parameter.:::replaceName->return
LambdaFormBuffer#replaceParameterByNewExpression(int, Name):::Replace a parameter by a fresh expression.:::replaceName->return
LambdaFormBuffer#replaceParameterByCopy(int, int):::Replace a parameter by another parameter or expression already in the form.:::replaceName->noteDuplicate->return
LambdaFormBuffer#insertExpression(int, Name):::Insert a fresh expression.:::insertName->return
LambdaFormBuffer#insertParameter(int, Name):::Insert a fresh parameter.:::insertName->return
LambdaMetafactory#metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType):::Facilitates the creation of simple "function objects" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments:::mf->new->InnerClassLambdaMetafactory->mf->validateMetafactoryArgs->return->mf->buildCallSite
LambdaMetafactory#altMetafactory(MethodHandles.Lookup, String, MethodType, Object...):::Facilitates the creation of simple "function objects" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments:::samMethodType->implMethod->instantiatedMethodType->flags->markerInterfaces->bridges->argIndex->if->markerCount->new->Class<?>Arr->System->arraycopy->else->if->bridgeCount->new->MethodTypeArr->System->arraycopy->else->isSerializable->if->foundSerializableSupertype->invokedType->returnType->isAssignableFrom->foreach->isAssignableFrom->if->Arrays->copyOf->mf->new->InnerClassLambdaMetafactory->mf->validateMetafactoryArgs->return->mf->buildCallSite
MemberName#getDeclaringClass():::Return the declaring class of this member:::return
MemberName#getClassLoader():::Utility method producing the class loader of the declaring class.:::return->clazz->getClassLoader
MemberName#getName():::Return the simple name of this member:::if->expandFromVM->if->return->return
MemberName#getMethodType():::Return the declared type of this member, which  must be a method or constructor.:::if->expandFromVM->if->return->if->isInvocable->throw->newIllegalArgumentException->type->if->return->synchronized->if->sig->res->MethodType->getClassLoader->fromDescriptor->else->if->typeInfo->ptypes->rtype->res->MethodType->makeImpl->return
MemberName#getMethodDescriptor():::Return the descriptor of this member, which  must be a method or constructor.:::if->expandFromVM->if->return->if->isInvocable->throw->newIllegalArgumentException->type->if->return->else->return->getMethodType->toMethodDescriptorString
MemberName#getInvocationType():::Return the actual type under which this method or constructor must be invoked:::itype->getMethodOrFieldType->if->isConstructor->getReferenceKind->return->itype->changeReturnType->if->isStatic->return->itype->insertParameterTypes->return
MemberName#getParameterTypes():::Utility method producing the parameter types of the method type.:::return->getMethodType->parameterArray
MemberName#getReturnType():::Utility method producing the return type of the method type.:::return->getMethodType->returnType
MemberName#getFieldType():::Return the declared type of this member, which  must be a field or type:::if->expandFromVM->if->return->if->isInvocable->throw->newIllegalArgumentException->type->if->return->synchronized->if->sig->mtype->MethodType->getClassLoader->fromDescriptor->res->mtype->returnType->return
MemberName#getType():::Utility method to produce either the method type or field type of this member.:::return->isInvocable->getMethodType->getFieldType
MemberName#getSignature():::Utility method to produce the signature of this member,  used within the class file format to describe its type.:::if->expandFromVM->if->return->if->isInvocable->return->BytecodeDescriptor->getMethodType->unparse->else->return->BytecodeDescriptor->getFieldType->unparse
MemberName#getModifiers():::Return the modifier flags of this member.:::return
MemberName#getReferenceKind():::Return the reference kind of this member, or zero if none.:::return
MemberName#isMethodHandleInvoke():::Utility method to query if this member is a method handle invocation (invoke or invokeExact).:::bits->negs->if->testFlags->return->isMethodHandleInvokeName->return
MemberName#isStatic():::Utility method to query the modifier flags of this member.:::return->Modifier->isStatic
MemberName#isPublic():::Utility method to query the modifier flags of this member.:::return->Modifier->isPublic
MemberName#isPrivate():::Utility method to query the modifier flags of this member.:::return->Modifier->isPrivate
MemberName#isProtected():::Utility method to query the modifier flags of this member.:::return->Modifier->isProtected
MemberName#isFinal():::Utility method to query the modifier flags of this member.:::return->Modifier->isFinal
MemberName#canBeStaticallyBound():::Utility method to query whether this member or its defining class is final.:::return->Modifier->clazz->getModifiers->isFinal
MemberName#isVolatile():::Utility method to query the modifier flags of this member.:::return->Modifier->isVolatile
MemberName#isAbstract():::Utility method to query the modifier flags of this member.:::return->Modifier->isAbstract
MemberName#isNative():::Utility method to query the modifier flags of this member.:::return->Modifier->isNative
MemberName#isBridge():::Utility method to query the modifier flags of this member; returns false if the member is not a method.:::return->testAllFlags
MemberName#isVarargs():::Utility method to query the modifier flags of this member; returns false if the member is not a method.:::return->testAllFlags->isInvocable
MemberName#isSynthetic():::Utility method to query the modifier flags of this member; returns false if the member is not a method.:::return->testAllFlags
MemberName#isInvocable():::Utility method to query whether this member is a method or constructor.:::return->testAnyFlags
MemberName#isFieldOrMethod():::Utility method to query whether this member is a method, constructor, or field.:::return->testAnyFlags
MemberName#isMethod():::Query whether this member is a method.:::return->testAllFlags
MemberName#isConstructor():::Query whether this member is a constructor.:::return->testAllFlags
MemberName#isField():::Query whether this member is a field.:::return->testAllFlags
MemberName#isType():::Query whether this member is a type.:::return->testAllFlags
MemberName#isPackage():::Utility method to query whether this member is neither public, private, nor protected.:::return->testAnyFlags
MemberName#isCallerSensitive():::Query whether this member has a CallerSensitive annotation.:::return->testAllFlags
MemberName#isAccessibleFrom(Class):::Utility method to query whether this member is accessible from a given lookup class.:::mode->return->VerifyAccess->this->getDeclaringClass->this->getDeclaringClass->isMemberAccessible
MemberName#refersTo(Class, String):::Check if MemberName is a call to a method named name in class declaredClass.:::return->getName->equals
MemberName#asConstructor():::If this MN is not REF_newInvokeSpecial, return a clone with that ref:::switch->getReferenceKind->return->clone->changeReferenceKind->return->throw->this->toString->new->IllegalArgumentException
MemberName#asNormalOriginal():::If this MN is a REF_invokeSpecial, return a clone with the "normal" kind  REF_invokeVirtual; also switch either to REF_invokeInterface if clazz.isInterface:::normalVirtual->clazz->isInterface->refKind->getReferenceKind->newRefKind->result->switch->break->if->return->clone->changeReferenceKind->return
MemberName#makeMethodHandleInvoke(String, MethodType):::Create a name for a signature-polymorphic invoker:::return->makeMethodHandleInvoke
MemberName#getDefinition():::Get the definition of this member name:::if->isResolved->throw->new->IllegalStateException->if->isType->return->res->this->clone->res->expandFromVM->return
MemberName#equals(MemberName):::Decide if two member names have exactly the same symbolic content:::if->return->if->return->return->this->getReferenceKind->that->getReferenceKind->Objects->equals->Objects->this->getType->that->getType->equals
MemberName#hasReceiverTypeDispatch():::Query whether this member name is resolved to a non-static, non-final method.:::return->MethodHandleNatives->getReferenceKind->refKindDoesDispatch
MemberName#isResolved():::Query whether this member name is resolved:::return
MemberName#toString():::Produce a string form of this member name:::if->isType->return->type->toString->buf->new->StringBuilder->if->getDeclaringClass->buf->getName->append->buf->append->name->buf->append->type->if->isInvocable->buf->append->buf->getName->append->else->buf->getName->append->refKind->getReferenceKind->if->buf->append->buf->MethodHandleNatives->refKindName->append->return->buf->toString
MemberName.Factory#resolveOrFail(byte, MemberName, Class, Class):::Produce a resolved version of the given member:::result->resolve->if->result->isResolved->return->ex->result->makeAccessException->if->throw->throw->nsmClass->cast
MemberName.Factory#resolveOrNull(byte, MemberName, Class):::Produce a resolved version of the given member:::result->resolve->if->result->isResolved->return->return
MemberName.Factory#getMethods(Class, boolean, Class):::Return a list of all methods defined by the given class:::return->getMethods
MemberName.Factory#getMethods(Class, boolean, String, MethodType, Class):::Return a list of matching methods defined by the given class:::matchFlags->return->getMembers
MemberName.Factory#getConstructors(Class, Class):::Return a list of all constructors defined by the given class:::return->getMembers
MemberName.Factory#getFields(Class, boolean, Class):::Return a list of all fields defined by the given class:::return->getFields
MemberName.Factory#getFields(Class, boolean, String, Class, Class):::Return a list of all fields defined by the given class:::matchFlags->return->getMembers
MemberName.Factory#getNestedTypes(Class, boolean, Class):::Return a list of all nested types defined by the given class:::matchFlags->return->getMembers
MethodHandle#type():::Reports the type of this method handle:::return
MethodHandle#invokeExact(Object...):::Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match:::
MethodHandle#invoke(Object...):::Invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values:::
MethodHandle#invokeBasic(Object...):::Private method for trusted invocation of a method handle respecting simplified signatures:::
MethodHandle#linkToVirtual(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeVirtual:::
MethodHandle#linkToStatic(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeStatic:::
MethodHandle#linkToSpecial(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeSpecial:::
MethodHandle#linkToInterface(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeInterface:::
MethodHandle#invokeWithArguments(Object...):::Performs a variable arity invocation, passing the arguments in the given array to the method handle, as if via an inexact #invoke invoke from a call site which mentions only the type Object, and whose actual argument count is the length of the argument array:::invocationType->MethodType->genericMethodType->return->invocationType->invokers->spreadInvoker->asType->invokeExact
MethodHandle#invokeWithArguments(java.util.List):::Performs a variable arity invocation, passing the arguments in the given list to the method handle, as if via an inexact #invoke invoke from a call site which mentions only the type Object, and whose actual argument count is the length of the argument list:::return->arguments->toArray->invokeWithArguments
MethodHandle#asType(MethodType):::Produces an adapter method handle which adapts the type of the current method handle to a new type:::if->return->atc->asTypeCached->if->return->return->asTypeUncached
MethodHandle#asSpreader(Class, int):::Makes an array-spreading method handle, which accepts a trailing array argument and spreads its elements as positional arguments:::return->type->parameterCount->asSpreader
MethodHandle#asSpreader(int, Class, int):::Makes an array-spreading method handle, which accepts an array argument at a given position and spreads its elements as positional arguments in place of the array:::postSpreadType->asSpreaderChecks->afterSpread->this->asType->mh->afterSpread->rebind->lform->mh->editor->spreadArgumentsForm->preSpreadType->postSpreadType->replaceParameterTypes->return->mh->copyWith
MethodHandle#withVarargs(boolean):::Adapts this method handle to be #asVarargsCollector variable arity if the boolean flag is true, else #asFixedArity fixed arity:::if->return->type->lastParameterType->asVarargsCollector->else->return
MethodHandle#asCollector(Class, int):::Makes an array-collecting method handle, which accepts a given number of trailing positional arguments and collects them into an array argument:::return->type->parameterCount->asCollector
MethodHandle#asCollector(int, Class, int):::Makes an array-collecting method handle, which accepts a given number of positional arguments starting at a given position, and collects them into an array argument:::asCollectorChecks->mh->rebind->resultType->type->asCollectorType->newArray->MethodHandleImpl->varargsArray->lform->mh->editor->collectArgumentArrayForm->if->return->mh->copyWith->mh->editor->newArray->type->basicType->collectArgumentsForm->return->mh->copyWithExtendL
MethodHandle#asVarargsCollector(Class):::Makes a variable arity adapter which is able to accept any number of trailing positional arguments and collect them into an array argument:::Objects->requireNonNull->lastMatch->type->parameterCount->asCollectorChecks->if->isVarargsCollector->return->return->MethodHandleImpl->makeVarargsCollector
MethodHandle#isVarargsCollector():::Determines if this method handle supports #asVarargsCollector variable arity calls:::return
MethodHandle#asFixedArity():::Makes a fixed arity method handle which is otherwise equivalent to the current method handle:::return
MethodHandle#bindTo(Object):::Binds a value x to the first argument of a method handle, without invoking it:::type->leadingReferenceParameter->cast->return->bindArgumentL
MethodHandle#toString():::Returns a string representation of the method handle, starting with the string "MethodHandle" and ending with the string representation of the method handle's type:::if->return->debugString->return->standardString
MethodHandle#debugString():::Return a string with a several lines describing the method handle structure:::return->internalForm->internalProperties
MethodHandle#rebind():::Require this method handle to be a BMH, or else replace it with a "wrapper" BMH:::
MethodHandleImpl#makePairwiseConvert(MethodHandle, MethodType, boolean, boolean):::Create a JVM-level adapter method handle to conform the given method handle to the similar newType, using only pairwise argument conversions:::dstType->target->type->if->return->return->makePairwiseConvertByEditor
MethodHandleImpl#valueConversion(Class, Class, boolean, boolean):::Find a conversion function from the given source to the given destination:::if->return->fn->if->src->isPrimitive->if->return->else->if->dst->isPrimitive->ValueConversions->convertPrimitive->else->wsrc->Wrapper->forPrimitiveType->ValueConversions->boxExact->if->VerifyType->wsrc->wrapperType->isNullConversion->mt->MethodType->methodType->if->fn->asType->else->MethodHandleImpl->makePairwiseConvert->else->if->dst->isPrimitive->wdst->Wrapper->forPrimitiveType->if->wdst->wrapperType->ValueConversions->unboxExact->else->ValueConversions->unboxWiden->ValueConversions->unboxCast->else->return->return
MethodHandleImpl#makeSpreadArguments(MethodHandle, Class, int, int):::Factory method:  Spread selected argument.:::targetType->target->type->for->i->target->asType->srcType->targetType->replaceParameterTypes->lambdaType->srcType->invokerType->names->arguments->nameCursor->lambdaType->parameterCount->indexes->targetType->parameterCount->new->intArr->for->i->argIndex->targetType->parameterCount->targetArgs->targetType->parameterCount->new->NameArr->for->i->targetType->parameterCount->new->Name->form->lambdaType->parameterCount->new->LambdaForm->return->SimpleMethodHandle->make
MethodHandleImpl#makeCollectArguments(MethodHandle, MethodHandle, int, boolean):::Factory method:  Collect or filter selected argument(s).:::targetType->target->type->collectorType->collector->type->collectArgCount->collectorType->parameterCount->collectValType->collectorType->returnType->collectValCount->srcType->targetType->dropParameterTypes->if->srcType->collectorType->parameterArray->insertParameterTypes->lambdaType->srcType->invokerType->names->arguments->collectNamePos->targetNamePos->collectorArgs->Arrays->copyOfRange->new->Name->targetArgs->targetType->parameterCount->new->NameArr->inputArgPos->targetArgPos->chunk->System->arraycopy->if->if->System->arraycopy->System->arraycopy->new->Name->form->lambdaType->parameterCount->new->LambdaForm->return->SimpleMethodHandle->make
MethodHandleImpl#makeBlockInliningWrapper(MethodHandle):::Block inlining during JIT-compilation of a target method handle if it hasn't been invoked enough times:::lform->if->apply->else->apply->return->new->CountingWrapper
MethodHandleImpl#guardWithCatch(MethodHandle, Class, MethodHandle, Object...):::Intrinsified during LambdaForm compilation (see InvokerBytecodeGenerator#emitGuardWithCatch emitGuardWithCatch).:::try->return->target->asFixedArity->invokeWithArguments->catch->if->exType->isInstance->throw->return->catcher->asFixedArity->prepend->invokeWithArguments->finally
MethodHandleImpl#bindCaller(MethodHandle, Class):::Create an alias for the method handle which, when called, appears to be called from the same class loader and protection domain as hostClass:::return->BindCaller->bindCaller
MethodHandleImpl#varargsArray(int):::Return a method handle that takes the indicated number of Object  arguments and returns an Object array of them, as if for varargs.:::mh->if->return->if->findCollector->else->getConstantHandle->getConstantHandle->buildVarargsArray->makeIntrinsic->return
MethodHandleImpl#varargsArray(Class, int):::Return a method handle that takes the indicated number of  typed arguments and returns an array of them:::elemType->arrayType->getComponentType->if->throw->new->IllegalArgumentException->if->slots->MAX_ARRAY_SLOTS->if->elemType->isPrimitive->Wrapper->forPrimitiveType->stackSlots->if->throw->arrayType->getSimpleName->new->IllegalArgumentException->if->return->varargsArray->cache->get->mh->if->return->if->example->arrayType->getComponentType->newInstance->MethodHandles->constant->else->if->elemType->isPrimitive->builder->getConstantHandle->producer->buildArrayProducer->buildVarargsArray->else->objArrayType->arrayType->asSubclass->example->Arrays->copyOf->builder->getConstantHandle->bindTo->producer->getConstantHandle->buildVarargsArray->mh->MethodType->Collections->nCopies->methodType->asType->makeIntrinsic->if->return
MethodHandleImpl#makeLoop(Class, List>, List, List, List, List):::Assembles a loop method handle from the given handles and type information.:::type->MethodType->methodType->initClauseTypes->init->stream->h->type->returnType->map->BasicType->basicType->map->BasicType[]->new->toArray->form->type->basicType->makeLoopForm->varargsType->type->changeReturnType->collectArgs->type->parameterCount->varargsArray->asType->unboxResult->unboxResultHandle->clauseData->new->MethodHandleArrs->toArray->toArray->toArray->toArray->new->LoopClauses->data->BoundMethodHandle->speciesData_LLL->mh->try->data->factory->invokeBasic->catch->throw->uncaughtException->finally->return
MethodHandleImpl#loop(BasicType[], LoopClauses, Object...):::Intrinsified during LambdaForm compilation (see InvokerBytecodeGenerator#emitLoop(int)).:::init->step->pred->fini->varSize->Stream->of->h->type->returnType->filter->count->nArgs->type->parameterCount->varsAndArgs->new->ObjectArr->for->i->v->System->arraycopy->nSteps->for
MethodHandleImpl#countedLoopPredicate(int, int):::This method is bound as the predicate in MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle) counting loops.:::return
MethodHandleImpl#countedLoopStep(int, int):::This method is bound as the step function in MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle) counting loops to increment the counter.:::return
MethodHandleImpl#initIterator(Iterable):::This is bound to initialize the loop-local iterator in MethodHandles#iteratedLoop iterating loops.:::return->it->iterator
MethodHandleImpl#iteratePredicate(Iterator):::This method is bound as the predicate in MethodHandles#iteratedLoop iterating loops.:::return->it->hasNext
MethodHandleImpl#iterateNext(Iterator):::This method is bound as the step for retrieving the current value from the iterator in MethodHandles#iteratedLoop iterating loops.:::return->it->next
MethodHandleImpl#makeTryFinally(MethodHandle, MethodHandle, Class, List>):::Makes a try-finally handle that conforms to the type constraints.:::type->MethodType->methodType->form->type->basicType->makeTryFinallyForm->varargsType->type->changeReturnType->collectArgs->type->parameterCount->varargsArray->asType->unboxResult->unboxResultHandle->data->BoundMethodHandle->speciesData_LLLL->mh->try->data->factory->invokeBasic->catch->throw->uncaughtException->finally->return
MethodHandleImpl#tryFinally(MethodHandle, MethodHandle, Object...):::Intrinsified during LambdaForm compilation (see InvokerBytecodeGenerator#emitTryFinally emitTryFinally).:::t->r->try->target->invokeWithArguments->catch->throw->finally->args->target->type->returnType->prepend->prepend->cleanup->invokeWithArguments->return
MethodHandleInfo#getReferenceKind():::Returns the reference kind of the cracked method handle, which in turn determines whether the method handle's underlying member was a constructor, method, or field:::
MethodHandleInfo#getDeclaringClass():::Returns the class in which the cracked method handle's underlying member was defined.:::
MethodHandleInfo#getName():::Returns the name of the cracked method handle's underlying member:::
MethodHandleInfo#getMethodType():::Returns the nominal type of the cracked symbolic reference, expressed as a method type:::
MethodHandleInfo#reflectAs(Class, Lookup):::Reflects the underlying member as a method, constructor, or field object:::
MethodHandleInfo#getModifiers():::Returns the access modifiers of the underlying member.:::
MethodHandleInfo#referenceKindToString(int):::Returns the descriptive name of the given reference kind, as defined in the table above:::if->MethodHandleNatives->refKindIsValid->throw->newIllegalArgumentException->return->MethodHandleNatives->refKindName
MethodHandleInfo#toString(int, Class, String, MethodType):::Returns a string representation for a MethodHandleInfo, given the four parts of its symbolic reference:::Objects->requireNonNull->Objects->requireNonNull->return->String->referenceKindToString->defc->getName->format
MethodHandleNatives#setCallSiteTargetNormal(CallSite, MethodHandle):::Tell the JVM that we need to change the target of a CallSite.:::
MethodHandleNatives#linkCallSite(Object, int, Object, Object, Object, Object, Object[]):::The JVM is linking an invokedynamic instruction:::bootstrapMethod->caller->name->nameObj->toString->intern->type->if->return->linkCallSiteImpl->return->linkCallSiteTracing
MethodHandleNatives#staticArgumentsPulled(Object):::The JVM is requesting pull-mode bootstrap when it provides  a tuple of the form int[]{ argc, vmindex }:::return
MethodHandleNatives#isPullModeBSM(MethodHandle):::A BSM runs in pull-mode if and only if its sole arguments are (Lookup, BootstrapCallInfo), or can be converted pairwise to those types, and it is not of variable arity:::return
MethodHandleNatives#findMethodHandleType(Class, Class[]):::The JVM wants a pointer to a MethodType:::return->MethodType->makeImpl
MethodHandleNatives#linkMethod(Class, int, Class, String, Object, Object[]):::The JVM wants to link a call site that requires a dynamic type check:::if->return->linkMethodImpl->return->linkMethodTracing
MethodHandleNatives#linkMethodHandleConstant(Class, int, Class, String, Object):::The JVM is resolving a CONSTANT_MethodHandle CP entry:::try->lookup->IMPL_LOOKUP->in->return->lookup->linkMethodHandleConstant->catch->throw->mapLookupExceptionToError->finally
MethodHandleNatives#mapLookupExceptionToError(ReflectiveOperationException):::Map a reflective exception to a linkage error.:::err->if->cause->ex->getCause->if->return->else->ex->getMessage->new->IllegalAccessError->else->if->ex->getMessage->new->NoSuchMethodError->else->if->ex->getMessage->new->NoSuchFieldError->else->new->IncompatibleClassChangeError->return->initCauseFrom
MethodHandleNatives#initCauseFrom(E, Exception):::Use best possible cause for err.initCause(), substituting the cause for err itself if the cause has the same (or better) type.:::th->ex->getCause->Eclass->err->getClass->if->Eclass->isInstance->return->Eclass->cast->err->initCause->return
MethodHandleNatives#isCallerSensitive(MemberName):::Is this method a caller-sensitive method? I.e., does it call Reflection.getCallerClass or a similar method to ask about the identity of its caller?:::if->mem->isInvocable->return->return->mem->isCallerSensitive->canBeCalledVirtual
MethodHandleProxies#isWrapperInstance(Object):::Determines if the given object was produced by a call to #asInterfaceInstance asInterfaceInstance.:::return
MethodHandleProxies#wrapperInstanceTarget(Object):::Produces or recovers a target method handle which is behaviorally equivalent to the unique method of this wrapper instance:::return->asWrapperInstance->getWrapperInstanceTarget
MethodHandleProxies#wrapperInstanceType(Object):::Recovers the unique single-method interface type for which this wrapper instance was created:::return->asWrapperInstance->getWrapperInstanceType
MethodHandles#lookup():::Returns a Lookup lookup object with full capabilities to emulate all supported bytecode behaviors of the caller:::return->Reflection->getCallerClass->new->Lookup
MethodHandles#publicLookup():::Returns a Lookup lookup object which is trusted minimally:::return
MethodHandles#privateLookupIn(Class, Lookup):::Returns a Lookup lookup object with full capabilities to emulate all supported bytecode behaviors, including  private access, on a target class:::sm->System->getSecurityManager->if->sm->checkPermission->if->targetClass->isPrimitive->throw->new->IllegalArgumentException->if->targetClass->isArray->throw->new->IllegalArgumentException->targetModule->targetClass->getModule->callerModule->lookup->lookupClass->getModule->if->callerModule->canRead->throw->new->IllegalAccessException->if->targetModule->isNamed->pn->targetClass->getPackageName->if->targetModule->isOpen->throw->new->IllegalAccessException->if->lookup->lookupModes->throw->new->IllegalAccessException->if->callerModule->isNamed->targetModule->isNamed->logger->IllegalAccessLogger->illegalAccessLogger->if->logger->logIfOpenedForIllegalAccess->return->new->Lookup
MethodHandles#reflectAs(Class, MethodHandle):::Performs an unchecked "crack" of a direct method handle:::smgr->System->getSecurityManager->if->smgr->checkPermission->lookup->return->lookup->revealDirect->reflectAs
MethodHandles.Lookup#lookupClass():::Tells which class is performing the lookup:::return
MethodHandles.Lookup#lookupModes():::Tells which access-protection classes of members this lookup object can produce:::return
MethodHandles.Lookup#in(Class):::Creates a lookup on the specified new lookup class:::Objects->requireNonNull->if->return->new->Lookup->if->return->newModes->if->VerifyAccess->isSameModule->if->getModule->isNamed->else->if->VerifyAccess->isSamePackage->if->VerifyAccess->isSamePackageMember->if->VerifyAccess->isClassAccessible->checkUnprivilegedlookupClass->return->new->Lookup
MethodHandles.Lookup#dropLookupMode(int):::Creates a lookup on the same lookup class which this lookup object finds members, but with a lookup mode that has lost the given lookup mode:::oldModes->lookupModes->newModes->switch->break->break->break->break->throw->new->IllegalArgumentException->if->return->return->lookupClass->new->Lookup
MethodHandles.Lookup#defineClass(byte[]):::Defines a class to the same class loader and in the same runtime package and java.security.ProtectionDomain protection domain as this lookup's #lookupClass() lookup class:::sm->System->getSecurityManager->if->sm->new->RuntimePermission->checkPermission->if->lookupModes->throw->new->IllegalAccessException->bytes->clone->name->try->reader->new->ClassReader->reader->getClassName->catch->cfe->new->ClassFormatError->cfe->initCause->throw->finally->cn->pn->index->name->lastIndexOf->if->else->name->replace->cn->substring->if->pn->lookupClass->getPackageName->equals->throw->new->IllegalArgumentException->loader->lookupClass->getClassLoader->pd->lookupClassProtectionDomain->source->clazz->SharedSecrets->getJavaLangAccess->defineClass->return
MethodHandles.Lookup#toString():::Displays the name of the class from which lookups are to be made:::cname->lookupClass->getName->switch->return->return->return->return->return->return->return->return->Integer->toHexString->return
MethodHandles.Lookup#findStatic(Class, String, MethodType):::Produces a method handle for a static method:::method->resolveOrFail->return->findBoundCallerClass->getDirectMethod
MethodHandles.Lookup#findVirtual(Class, String, MethodType):::Produces a method handle for a virtual method:::if->mh->findVirtualForMH->if->return->else->if->mh->findVirtualForVH->if->return->refKind->refc->isInterface->method->resolveOrFail->return->findBoundCallerClass->getDirectMethod
MethodHandles.Lookup#findConstructor(Class, MethodType):::Produces a method handle which creates an object and initializes it, using the constructor of the specified type:::if->refc->isArray->throw->refc->getName->new->NoSuchMethodException->name->ctor->resolveOrFail->return->getDirectConstructor
MethodHandles.Lookup#findClass(String):::Looks up a class by name from the lookup context defined by this Lookup object:::targetClass->Class->lookupClass->getClassLoader->forName->return->accessClass
MethodHandles.Lookup#accessClass(Class):::Determines if a class can be accessed from the lookup context defined by this Lookup object:::if->VerifyAccess->isClassAccessible->throw->new->MemberName->makeAccessException->checkSecurityManager->return
MethodHandles.Lookup#findSpecial(Class, String, MethodType, Class):::Produces an early-bound method handle for a virtual method:::checkSpecialCaller->specialLookup->this->in->method->specialLookup->resolveOrFail->return->specialLookup->findBoundCallerClass->getDirectMethod
MethodHandles.Lookup#findGetter(Class, String, Class):::Produces a method handle giving read access to a non-static field:::field->resolveOrFail->return->getDirectField
MethodHandles.Lookup#findSetter(Class, String, Class):::Produces a method handle giving write access to a non-static field:::field->resolveOrFail->return->getDirectField
MethodHandles.Lookup#findVarHandle(Class, String, Class):::Produces a VarHandle giving access to a non-static field name of type type declared in a class of type recv:::getField->resolveOrFail->putField->resolveOrFail->return->getFieldVarHandle
MethodHandles.Lookup#findStaticGetter(Class, String, Class):::Produces a method handle giving read access to a static field:::field->resolveOrFail->return->getDirectField
MethodHandles.Lookup#findStaticSetter(Class, String, Class):::Produces a method handle giving write access to a static field:::field->resolveOrFail->return->getDirectField
MethodHandles.Lookup#findStaticVarHandle(Class, String, Class):::Produces a VarHandle giving access to a static field name of type type declared in a class of type decl:::getField->resolveOrFail->putField->resolveOrFail->return->getFieldVarHandle
MethodHandles.Lookup#bind(Object, String, MethodType):::Produces an early-bound method handle for a non-static method:::refc->receiver->getClass->method->resolveOrFail->mh->findBoundCallerClass->getDirectMethodNoRestrictInvokeSpecial->if->mh->type->leadingReferenceParameter->receiver->getClass->isAssignableFrom->throw->mh->type->leadingReferenceParameter->getName->receiver->getClass->getName->new->IllegalAccessException->return->mh->bindArgumentL->setVarargs
MethodHandles.Lookup#unreflect(Method):::Makes a direct method handle to m, if the lookup class has permission:::if->m->getDeclaringClass->mh->unreflectForMH->if->return->if->m->getDeclaringClass->mh->unreflectForVH->if->return->method->new->MemberName->refKind->method->getReferenceKind->if->lookup->m->isAccessible->return->lookup->method->getDeclaringClass->findBoundCallerClass->getDirectMethodNoSecurityManager
MethodHandles.Lookup#unreflectSpecial(Method, Class):::Produces a method handle for a reflected method:::checkSpecialCaller->specialLookup->this->in->method->new->MemberName->return->specialLookup->method->getDeclaringClass->findBoundCallerClass->getDirectMethodNoSecurityManager
MethodHandles.Lookup#unreflectConstructor(Constructor):::Produces a method handle for a reflected constructor:::ctor->new->MemberName->lookup->c->isAccessible->return->lookup->ctor->getDeclaringClass->getDirectConstructorNoSecurityManager
MethodHandles.Lookup#unreflectGetter(Field):::Produces a method handle giving read access to a reflected field:::return->unreflectField
MethodHandles.Lookup#unreflectSetter(Field):::Produces a method handle giving write access to a reflected field:::return->unreflectField
MethodHandles.Lookup#unreflectVarHandle(Field):::Produces a VarHandle giving access to a reflected field f of type T declared in a class of type R:::getField->new->MemberName->putField->new->MemberName->return->getField->getReferenceKind->putField->getReferenceKind->f->getDeclaringClass->getFieldVarHandleNoSecurityManager
MethodHandles.Lookup#revealDirect(MethodHandle):::Cracks a direct method handle created by this lookup object or a similar one:::member->target->internalMemberName->if->member->isResolved->member->isMethodHandleInvoke->member->isVarHandleMethodInvoke->throw->newIllegalArgumentException->defc->member->getDeclaringClass->refKind->member->getReferenceKind->if->target->isInvokeSpecial->if->defc->isInterface->try->checkAccess->checkSecurityManager->catch->throw->new->IllegalArgumentException->finally->if->member->isCallerSensitive->callerClass->target->internalCallerClass->if->hasPrivateAccess->lookupClass->throw->new->IllegalArgumentException->return->new->InfoFromMemberName
MethodHandles.Lookup#checkMethodName(byte, String):::Check name for an illegal leading "&lt;" character.:::if->name->startsWith->throw->new->NoSuchMethodException
MethodHandles.Lookup#findBoundCallerClass(MemberName):::Find my trustable caller class if m is a caller sensitive method:::callerClass->if->MethodHandleNatives->isCallerSensitive->if->hasPrivateAccess->else->throw->new->IllegalAccessException->return
MethodHandles.Lookup#hasPrivateAccess():::Returns true if this lookup has PRIVATE access.:::return
MethodHandles.Lookup#checkSecurityManager(Class, MemberName):::Perform necessary access checks:::smgr->System->getSecurityManager->if->return->if->return->fullPowerLookup->hasPrivateAccess->if->VerifyAccess->classLoaderIsAncestor->ReflectUtil->checkPackageAccess->if->if->smgr->checkPermission->return->if->m->isPublic->return->if->smgr->checkPermission->defc->m->getDeclaringClass->if->ReflectUtil->checkPackageAccess
MethodHandles.Lookup#checkAccess(byte, Class, MemberName):::Check public/protected/private bits on the symbolic reference class and its member.:::allowedModes->if->return->mods->m->getModifiers->if->Modifier->isProtected->m->getDeclaringClass->m->getName->equals->refc->isArray->if->Modifier->isProtected->if->Modifier->isFinal->MethodHandleNatives->refKindIsSetter->throw->m->makeAccessException->requestedModes->fixmods->if->if->VerifyAccess->m->getDeclaringClass->lookupClass->isMemberAccessible->return->else->if->VerifyAccess->m->getDeclaringClass->lookupClass->isSamePackage->return->throw->m->accessFailedMessage->makeAccessException
MethodHandles#arrayConstructor(Class):::Produces a method handle constructing arrays of a desired type, as if by the anewarray bytecode:::if->arrayClass->isArray->throw->arrayClass->getName->newIllegalArgumentException->ani->MethodHandleImpl->getConstantHandle->arrayClass->getComponentType->bindTo->return->ani->ani->type->changeReturnType->asType
MethodHandles#arrayLength(Class):::Produces a method handle returning the length of an array, as if by the arraylength bytecode:::return->MethodHandleImpl->makeArrayElementAccessor
MethodHandles#arrayElementGetter(Class):::Produces a method handle giving read access to elements of an array, as if by the aaload bytecode:::return->MethodHandleImpl->makeArrayElementAccessor
MethodHandles#arrayElementSetter(Class):::Produces a method handle giving write access to elements of an array, as if by the astore bytecode:::return->MethodHandleImpl->makeArrayElementAccessor
MethodHandles#arrayElementVarHandle(Class):::Produces a VarHandle giving access to elements of an array of type arrayClass:::return->VarHandles->makeArrayElementHandle
MethodHandles#byteArrayViewVarHandle(Class, ByteOrder):::Produces a VarHandle giving access to elements of a byte[] array viewed as if it were a different primitive array type, such as int[] or long[]:::Objects->requireNonNull->return->VarHandles->byteArrayViewHandle
MethodHandles#byteBufferViewVarHandle(Class, ByteOrder):::Produces a VarHandle giving access to elements of a ByteBuffer viewed as if it were an array of elements of a different primitive component type to that of byte, such as int[] or long[]:::Objects->requireNonNull->return->VarHandles->makeByteBufferViewHandle
MethodHandles#spreadInvoker(MethodType, int):::Produces a method handle which will invoke any method handle of the given type, with a given number of trailing arguments replaced by a single trailing Object[] array:::if->type->parameterCount->throw->newIllegalArgumentException->type->type->parameterCount->asSpreaderType->return->type->invokers->spreadInvoker
MethodHandles#exactInvoker(MethodType):::Produces a special invoker method handle which can be used to invoke any method handle of the given type, as if by MethodHandle#invokeExact invokeExact:::return->type->invokers->exactInvoker
MethodHandles#invoker(MethodType):::Produces a special invoker method handle which can be used to invoke any method handle compatible with the given type, as if by MethodHandle#invoke invoke:::return->type->invokers->genericInvoker
MethodHandles#varHandleExactInvoker(VarHandle.AccessMode, MethodType):::Produces a special invoker method handle which can be used to invoke a signature-polymorphic access mode method on any VarHandle whose associated access mode type is compatible with the given type:::return->type->invokers->varHandleMethodExactInvoker
MethodHandles#varHandleInvoker(VarHandle.AccessMode, MethodType):::Produces a special invoker method handle which can be used to invoke a signature-polymorphic access mode method on any VarHandle whose associated access mode type is compatible with the given type:::return->type->invokers->varHandleMethodInvoker
MethodHandles#explicitCastArguments(MethodHandle, MethodType):::Produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion:::explicitCastArgumentsChecks->oldType->target->type->if->return->if->oldType->explicitCastEquivalentToAsType->return->target->asFixedArity->asType->return->MethodHandleImpl->makePairwiseConvert
MethodHandles#permuteArguments(MethodHandle, MethodType, int...):::Produces a method handle which adapts the calling sequence of the given method handle to a new type, by reordering the arguments:::reorder->clone->oldType->target->type->permuteArgumentChecks->originalReorder->result->target->rebind->form->newArity->newType->parameterCount->for->ddIdx->findFirstDupOrDrop->form->editor->permuteArgumentsForm->if->result->type->result->internalForm->return->return->result->copyWith
MethodHandles#constant(Class, Object):::Produces a method handle of the requested return type which returns the given constant value every time it is invoked:::if->type->isPrimitive->if->throw->newIllegalArgumentException->w->Wrapper->forPrimitiveType->w->convert->if->w->zero->equals->return->zero->return->identity->insertArguments->else->if->return->zero->return->identity->bindTo
MethodHandles#identity(Class):::Produces a method handle which returns its sole argument when invoked.:::btw->type->isPrimitive->Wrapper->forPrimitiveType->pos->btw->ordinal->ident->if->btw->primitiveType->makeIdentity->setCachedMethodHandle->if->ident->type->returnType->return->return->makeIdentity
MethodHandles#zero(Class):::Produces a constant method handle of the requested return type which returns the default value for that type every time it is invoked:::Objects->requireNonNull->return->type->isPrimitive->Wrapper->forPrimitiveType->zero->zero
MethodHandles#empty(MethodType):::Produces a method handle of the requested type which ignores any arguments, does nothing, and returns a suitable default depending on the return type:::Objects->requireNonNull->return->type->returnType->zero->type->parameterList->dropArguments
MethodHandles#insertArguments(MethodHandle, int, Object...):::Provides a target method handle with one or more bound arguments in advance of the method handle's invocation:::insCount->ptypes->insertArgumentsChecks->if->return->result->target->rebind->for->i->return
MethodHandles#dropArguments(MethodHandle, int, List>):::Produces a method handle which will discard some dummy arguments before calling some other specified target method handle:::return->valueTypes->toArray->copyTypes->dropArguments0
MethodHandles#dropArguments(MethodHandle, int, Class...):::Produces a method handle which will discard some dummy arguments before calling some other specified target method handle:::return->copyTypes->dropArguments0
MethodHandles#dropArgumentsToMatch(MethodHandle, int, List>, int):::Adapts a target method handle to match the given parameter type list:::Objects->requireNonNull->Objects->requireNonNull->return->dropArgumentsToMatch
MethodHandles#filterArguments(MethodHandle, int, MethodHandle...):::Adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function:::filterArgumentsCheckArity->adapter->for->i->return
MethodHandles#collectArguments(MethodHandle, int, MethodHandle):::Adapts a target method handle by pre-processing a sub-sequence of its arguments with a filter (another method handle):::newType->collectArgumentsChecks->collectorType->filter->type->result->target->rebind->lform->if->collectorType->returnType->isArray->filter->intrinsicName->result->editor->collectArgumentArrayForm->if->return->result->copyWith->result->editor->collectorType->basicType->collectArgumentsForm->return->result->copyWithExtendL
MethodHandles#filterReturnValue(MethodHandle, MethodHandle):::Adapts a target method handle by post-processing its return value (if any) with a filter (another method handle):::targetType->target->type->filterType->filter->type->filterReturnValueChecks->result->target->rebind->rtype->BasicType->filterType->returnType->basicType->lform->result->editor->filterReturnForm->newType->targetType->filterType->returnType->changeReturnType->result->copyWithExtendL->return
MethodHandles#foldArguments(MethodHandle, MethodHandle):::Adapts a target method handle by pre-processing some of its arguments, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments:::return->foldArguments
MethodHandles#foldArguments(MethodHandle, int, MethodHandle):::Adapts a target method handle by pre-processing some of its arguments, starting at a given position, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments just before the folded arguments:::targetType->target->type->combinerType->combiner->type->rtype->foldArgumentChecks->result->target->rebind->dropResult->lform->result->editor->combinerType->basicType->foldArgumentsForm->newType->if->newType->dropParameterTypes->result->copyWithExtendL->return
MethodHandles#foldArguments(MethodHandle, int, MethodHandle, int...):::As foldArguments(MethodHandle, int, MethodHandle), but with the added capability of selecting the arguments from the targets parameters to call the combiner with:::targetType->target->type->combinerType->combiner->type->rtype->foldArgumentChecks->result->target->rebind->dropResult->lform->result->editor->combinerType->basicType->foldArgumentsForm->newType->if->newType->dropParameterTypes->result->copyWithExtendL->return
MethodHandles#guardWithTest(MethodHandle, MethodHandle, MethodHandle):::Makes a method handle which adapts a target method handle, by guarding it with a test, a boolean-valued method handle:::gtype->test->type->ttype->target->type->ftype->fallback->type->if->ttype->equals->throw->misMatchedTypes->if->gtype->returnType->throw->newIllegalArgumentException->targs->ttype->parameterList->dropArgumentsToMatch->if->throw->misMatchedTypes->return->MethodHandleImpl->makeGuardWithTest
MethodHandles#catchException(MethodHandle, Class, MethodHandle):::Makes a method handle which adapts a target method handle, by running it inside an exception handler:::ttype->target->type->htype->handler->type->if->isAssignableFrom->throw->exType->getName->new->ClassCastException->if->htype->parameterCount->htype->parameterType->isAssignableFrom->throw->newIllegalArgumentException->if->htype->returnType->ttype->returnType->throw->misMatchedTypes->ttype->parameterList->dropArgumentsToMatch->if->throw->misMatchedTypes->return->MethodHandleImpl->makeGuardWithCatch
MethodHandles#throwException(Class, Class):::Produces a method handle which will throw exceptions of the given exType:::if->isAssignableFrom->throw->exType->getName->new->ClassCastException->return->MethodHandleImpl->methodType->throwException
MethodHandles#loop(MethodHandle[]...):::Constructs a method handle representing a loop with several loop variables that are updated and checked upon each iteration:::loopChecks0->init->new->ArrayList<>->step->new->ArrayList<>->pred->new->ArrayList<>->fini->new->ArrayList<>->Stream->of->Stream->of->Objects->nonNull->anyMatch->filter->init->add->step->add->pred->add->fini->add->forEach->nclauses->init->size->iterationVariableTypes->new->ArrayList<>->for->i->commonPrefix->iterationVariableTypes->stream->filter->Collectors->toList->collect->commonSuffix->commonPrefix->size->buildCommonSuffix->loopChecks1b->loopReturnType->fini->stream->Objects->nonNull->filter->MethodHandle->type->map->MethodType->returnType->map->findFirst->orElse->loopChecks1cd->commonParameterSequence->new->ArrayList<>->commonParameterSequence->addAll->loopChecks2->for->i->finit->fillParameterTypes->fixArities->fstep->fillParameterTypes->fixArities->fpred->fillParameterTypes->fixArities->ffini->fillParameterTypes->fixArities->return->MethodHandleImpl->makeLoop
MethodHandles#whileLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a while loop from an initializer, a body, and a predicate:::whileLoopChecks->fini->body->type->returnType->identityOrVoid->checkExit->varBody->return->loop
MethodHandles#doWhileLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a do-while loop from an initializer, a body, and a predicate:::whileLoopChecks->fini->body->type->returnType->identityOrVoid->clause->return->loop
MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a loop that runs a given number of iterations:::return->iterations->type->empty->countedLoop
MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle, MethodHandle):::Constructs a loop that counts over a range of numbers:::countedLoopChecks->counterType->start->type->returnType->limitType->end->type->returnType->returnType->body->type->returnType->incr->MethodHandleImpl->getConstantHandle->pred->MethodHandleImpl->getConstantHandle->retv->if->dropArguments->dropArguments->identity->dropArguments->dropArguments->loopLimit->bodyClause->indexVar->return->loop
MethodHandles#iteratedLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a loop that ranges over the values produced by an Iterator<T>:::iterableType->iteratedLoopChecks->returnType->body->type->returnType->hasNext->MethodHandleImpl->getConstantHandle->nextRaw->MethodHandleImpl->getConstantHandle->startIter->nextVal->iteratorType->if->MethodHandleImpl->getConstantHandle->startIter->type->changeParameterType->else->iterator->type->changeReturnType->ttype->body->type->parameterType->nextValType->nextRaw->type->changeReturnType->try->startIter->asType->nextRaw->asType->catch->throw->new->IllegalArgumentException->finally->retv->step->if->identity->dropArguments->swapArguments->iterVar->bodyClause->filterArgument->return->loop
MethodHandles#tryFinally(MethodHandle, MethodHandle):::Makes a method handle that adapts a target method handle by wrapping it in a try-finally block:::targetParamTypes->target->type->parameterList->rtype->target->type->returnType->tryFinallyChecks->dropArgumentsToMatch->cleanup->cleanup->type->changeParameterType->asType->return->MethodHandleImpl->target->asFixedArity->cleanup->asFixedArity->makeTryFinally
MethodType#methodType(Class, Class[]):::Finds or creates an instance of the given method type.:::return->makeImpl
MethodType#methodType(Class, List>):::Finds or creates a method type with the given components:::notrust->return->listToArray->makeImpl
MethodType#methodType(Class, Class, Class...):::Finds or creates a method type with the given components:::ptypes1->new->Class<?>Arr->System->arraycopy->return->makeImpl
MethodType#methodType(Class):::Finds or creates a method type with the given components:::return->makeImpl
MethodType#methodType(Class, Class):::Finds or creates a method type with the given components:::return->new->Class<?>Arr->makeImpl
MethodType#methodType(Class, MethodType):::Finds or creates a method type with the given components:::return->makeImpl
MethodType#genericMethodType(int, boolean):::Finds or creates a method type whose components are Object with an optional trailing Object[] array:::mt->checkSlotCount->ivarargs->ootIndex->if->if->return->ptypes->new->Class<?>Arr->Arrays->fill->if->makeImpl->if->return
MethodType#genericMethodType(int):::Finds or creates a method type whose components are all Object:::return->genericMethodType
MethodType#changeParameterType(int, Class):::Finds or creates a method type with a single different parameter type:::if->parameterType->return->checkPtype->nptypes->ptypes->clone->return->makeImpl
MethodType#insertParameterTypes(int, Class...):::Finds or creates a method type with additional parameter types:::len->if->throw->newIndexOutOfBoundsException->ins->checkPtypes->parameterSlotCount->checkSlotCount->ilen->if->return->nptypes->new->Class<?>Arr->if->System->arraycopy->System->arraycopy->if->System->arraycopy->return->makeImpl
MethodType#appendParameterTypes(Class...):::Finds or creates a method type with additional parameter types:::return->parameterCount->insertParameterTypes
MethodType#insertParameterTypes(int, List>):::Finds or creates a method type with additional parameter types:::return->listToArray->insertParameterTypes
MethodType#appendParameterTypes(List>):::Finds or creates a method type with additional parameter types:::return->parameterCount->insertParameterTypes
MethodType#dropParameterTypes(int, int):::Finds or creates a method type with some parameter types omitted:::len->if->throw->newIndexOutOfBoundsException->if->return->nptypes->if->if->else->Arrays->copyOfRange->else->if->Arrays->copyOfRange->else->tail->Arrays->copyOfRange->System->arraycopy->return->makeImpl
MethodType#changeReturnType(Class):::Finds or creates a method type with a different return type:::if->returnType->return->return->makeImpl
MethodType#hasPrimitives():::Reports if this type contains a primitive argument or return value:::return->form->hasPrimitives
MethodType#hasWrappers():::Reports if this type contains a wrapper argument or return value:::return->unwrap
MethodType#erase():::Erases all reference types to Object:::return->form->erasedType
MethodType#generic():::Converts all types, both reference and primitive, to Object:::return->parameterCount->genericMethodType
MethodType#wrap():::Converts all primitive types to their corresponding wrapper types:::return->hasPrimitives->wrapWithPrims
MethodType#unwrap():::Converts all wrapper types to their corresponding primitive types:::noprims->hasPrimitives->wrapWithPrims->return->unwrapWithNoPrims
MethodType#parameterType(int):::Returns the parameter type at the specified index, within this method type.:::return
MethodType#parameterCount():::Returns the number of parameter types in this method type.:::return
MethodType#returnType():::Returns the return type of this method type.:::return
MethodType#parameterList():::Presents the parameter types as a list (a convenience method):::return->Collections->Arrays->ptypes->clone->asList->unmodifiableList
MethodType#lastParameterType():::Returns the last parameter type of this method type:::len->return
MethodType#parameterArray():::Presents the parameter types as an array (a convenience method):::return->ptypes->clone
MethodType#equals(Object):::Compares the specified object with this type for equality:::return->equals
MethodType#hashCode():::Returns the hash code value for this method type:::hashCode->rtype->hashCode->foreach->ptype->hashCode->return
MethodType#toString():::Returns a string representation of the method type, of the form "(PT0,PT1...)RT":::sj->rtype->getSimpleName->new->StringJoiner->for->i->return->sj->toString
MethodType#fromMethodDescriptorString(String, ClassLoader):::Finds or creates an instance of a method type, given the spelling of its bytecode descriptor:::return->ClassLoader->getSystemClassLoader->fromDescriptor
MethodType#fromDescriptor(String, ClassLoader):::Same as #fromMethodDescriptorString(String, ClassLoader), but null ClassLoader means the bootstrap loader is used here:::if->descriptor->startsWith->descriptor->indexOf->descriptor->indexOf->throw->newIllegalArgumentException->types->BytecodeDescriptor->parseMethod->rtype->types->types->size->remove->ptypes->listToArray->return->makeImpl
MethodType#toMethodDescriptorString():::Produces a bytecode descriptor representation of the method type:::desc->if->BytecodeDescriptor->unparseMethod->return
MethodTypeForm#erasedType():::Return the type corresponding uniquely (1-1) to this MT-form:::return
MethodTypeForm#basicType():::Return the basic type derived from the erased type of this MT-form:::return
MethodTypeForm#canonicalize(MethodType, int, int):::Canonicalize the types in the given method type:::ptypes->mt->ptypes->ptc->MethodTypeForm->canonicalizeAll->rtype->mt->returnType->rtc->MethodTypeForm->canonicalize->if->return->if->if->return->MethodType->makeImpl
MethodTypeForm#canonicalize(Class, int):::Canonicalize the given return or param type:::ct->if->else->if->t->isPrimitive->switch->Wrapper->asPrimitiveType->if->return->break->return->else->if->switch->return->return->else->switch->return->Wrapper->asWrapperType->if->return->if->return->return->if->return->return->if->return->return->return
MethodTypeForm#canonicalizeAll(Class[], int):::Canonicalize each param type in the given array:::cs->for->imax->i->return
MutableCallSite#getTarget():::Returns the target method of the call site, which behaves like a normal field of the MutableCallSite:::return
MutableCallSite#setTarget(MethodHandle):::Updates the target method of this call site, as a normal variable:::checkTargetChange->setTargetNormal
MutableCallSite#syncAll(MutableCallSite[]):::Performs a synchronization operation on each call site in the given array, forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites:::if->return->STORE_BARRIER->lazySet->foreach->Objects->requireNonNull
SerializedLambda#getCapturingClass():::Get the name of the class that captured this lambda.:::return->capturingClass->getName->replace
SerializedLambda#getFunctionalInterfaceClass():::Get the name of the invoked type to which this lambda has been converted:::return
SerializedLambda#getFunctionalInterfaceMethodName():::Get the name of the primary method for the functional interface to which this lambda has been converted.:::return
SerializedLambda#getFunctionalInterfaceMethodSignature():::Get the signature of the primary method for the functional interface to which this lambda has been converted.:::return
SerializedLambda#getImplClass():::Get the name of the class containing the implementation method.:::return
SerializedLambda#getImplMethodName():::Get the name of the implementation method.:::return
SerializedLambda#getImplMethodSignature():::Get the signature of the implementation method.:::return
SerializedLambda#getImplMethodKind():::Get the method handle kind (see MethodHandleInfo) of the implementation method.:::return
SerializedLambda#getInstantiatedMethodType():::Get the signature of the primary functional interface method after type variables are substituted with their instantiation from the capture site.:::return
SerializedLambda#getCapturedArgCount():::Get the count of dynamic arguments to the lambda capture site.:::return
SerializedLambda#getCapturedArg(int):::Get a dynamic argument to the lambda capture site.:::return
StringConcatFactory#makeConcat(MethodHandles.Lookup, String, MethodType):::Facilitates the creation of optimized String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments:::if->println->return->doStringConcat
StringConcatFactory#makeConcatWithConstants(MethodHandles.Lookup, String, MethodType, String, Object...):::Facilitates the creation of optimized String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments:::if->Arrays->toString->println->return->doStringConcat
SwitchPoint#hasBeenInvalidated():::Determines if this switch point has been invalidated yet:::return->mcs->getTarget
SwitchPoint#guardWithTest(MethodHandle, MethodHandle):::Returns a method handle which always delegates either to the target or the fallback:::if->mcs->getTarget->return->return->MethodHandles->guardWithTest
SwitchPoint#invalidateAll(SwitchPoint[]):::Sets all of the given switch points into the invalid state:::if->return->sites->new->MutableCallSiteArr->for->i->MutableCallSite->syncAll
TypeConvertingMethodAdapter#unbox(String, Wrapper):::Convert types by unboxing:::unboxMethod->unboxingDescriptor->visitMethodInsn
TypeConvertingMethodAdapter#convertType(Class, Class, Class):::Convert an argument of type 'arg' to be passed to 'target' assuring that it is 'functional':::if->arg->equals->arg->equals->return->if->return->if->arg->isPrimitive->wArg->Wrapper->forPrimitiveType->if->target->isPrimitive->Wrapper->forPrimitiveType->widen->else->dTarget->BytecodeDescriptor->unparse->wPrimTarget->wrapperOrNullFromDescriptor->if->widen->box->else->box->wrapperName->cast->else->dArg->BytecodeDescriptor->unparse->dSrc->if->functional->isPrimitive->else->BytecodeDescriptor->unparse->cast->dTarget->BytecodeDescriptor->unparse->if->target->isPrimitive->wTarget->toWrapper->wps->wrapperOrNullFromDescriptor->if->if->wps->isSigned->wps->isFloating->wrapperName->unbox->else->wrapperName->unbox->widen->else->intermediate->if->wTarget->isSigned->wTarget->isFloating->else->wrapperName->cast->unbox->else->cast
TypeConvertingMethodAdapter#iconst(int):::The following method is copied from org.objectweb.asm.commons.InstructionAdapter:::if->mv->visitInsn->else->if->mv->visitIntInsn->else->if->mv->visitIntInsn->else->mv->visitLdcInsn
VarHandle#get(Object...):::Returns the value of a variable, with memory semantics of reading as if the variable was declared non-volatile:::
VarHandle#set(Object...):::Sets the value of a variable to the newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final:::
VarHandle#getVolatile(Object...):::Returns the value of a variable, with memory semantics of reading as if the variable was declared volatile:::
VarHandle#setVolatile(Object...):::Sets the value of a variable to the newValue, with memory semantics of setting as if the variable was declared volatile:::
VarHandle#getOpaque(Object...):::Returns the value of a variable, accessed in program order, but with no assurance of memory ordering effects with respect to other threads:::
VarHandle#setOpaque(Object...):::Sets the value of a variable to the newValue, in program order, but with no assurance of memory ordering effects with respect to other threads:::
VarHandle#getAcquire(Object...):::Returns the value of a variable, and ensures that subsequent loads and stores are not reordered before this access:::
VarHandle#setRelease(Object...):::Sets the value of a variable to the newValue, and ensures that prior loads and stores are not reordered after this access:::
VarHandle#compareAndSet(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getVolatile:::
VarHandle#compareAndExchange(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getVolatile:::
VarHandle#compareAndExchangeAcquire(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #set if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getAcquire:::
VarHandle#compareAndExchangeRelease(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setRelease if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #get:::
VarHandle#weakCompareAndSetPlain(Object...):::Possibly atomically sets the value of a variable to the newValue with the semantics of #set if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #get:::
VarHandle#weakCompareAndSet(Object...):::Possibly atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getVolatile:::
VarHandle#weakCompareAndSetAcquire(Object...):::Possibly atomically sets the value of a variable to the newValue with the semantics of #set if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getAcquire:::
VarHandle#weakCompareAndSetRelease(Object...):::Possibly atomically sets the value of a variable to the newValue with the semantics of #setRelease if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #get:::
VarHandle#getAndSet(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile:::
VarHandle#getAndSetAcquire(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire:::
VarHandle#getAndSetRelease(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get:::
VarHandle#getAndAdd(Object...):::Atomically adds the value to the current value of a variable with the memory semantics of #setVolatile, and returns the variable's previous value, as accessed with the memory semantics of #getVolatile:::
VarHandle#getAndAddAcquire(Object...):::Atomically adds the value to the current value of a variable with the memory semantics of #set, and returns the variable's previous value, as accessed with the memory semantics of #getAcquire:::
VarHandle#getAndAddRelease(Object...):::Atomically adds the value to the current value of a variable with the memory semantics of #setRelease, and returns the variable's previous value, as accessed with the memory semantics of #get:::
VarHandle#getAndBitwiseOr(Object...):::Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile:::
VarHandle#getAndBitwiseOrAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire:::
VarHandle#getAndBitwiseOrRelease(Object...):::Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get:::
VarHandle#getAndBitwiseAnd(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile:::
VarHandle#getAndBitwiseAndAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire:::
VarHandle#getAndBitwiseAndRelease(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get:::
VarHandle#getAndBitwiseXor(Object...):::Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile:::
VarHandle#getAndBitwiseXorAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire:::
VarHandle#getAndBitwiseXorRelease(Object...):::Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get:::
VarHandle#varType():::Returns the variable type of variables referenced by this VarHandle.:::typeSet->accessModeType->return->typeSet->typeSet->parameterCount->parameterType
VarHandle#coordinateTypes():::Returns the coordinate types for this VarHandle.:::typeGet->accessModeType->return->typeGet->parameterList
VarHandle#accessModeType(AccessMode):::Obtains the access mode type for this VarHandle and a given access mode:::tis->getTypesAndInvokers->mt->ordinal->if->accessModeTypeUncached->ordinal->return
VarHandle#isAccessModeSupported(AccessMode):::Returns true if the given access mode is supported, otherwise false:::return->AccessMode->accessMode->ordinal->getMemberName
VarHandle#toMethodHandle(AccessMode):::Obtains a method handle bound to this VarHandle and the given access mode.:::mn->AccessMode->accessMode->ordinal->getMemberName->if->mh->accessMode->ordinal->getMethodHandle->return->mh->bindTo->else->return->MethodHandles->accessModeType->varHandleInvoker->bindTo
VarHandle#fullFence():::Ensures that loads and stores before the fence will not be reordered with loads and stores after the fence.:::UNSAFE->fullFence
VarHandle#acquireFence():::Ensures that loads before the fence will not be reordered with loads and stores after the fence.:::UNSAFE->loadFence
VarHandle#releaseFence():::Ensures that loads and stores before the fence will not be reordered with stores after the fence.:::UNSAFE->storeFence
VarHandle#loadLoadFence():::Ensures that loads before the fence will not be reordered with loads after the fence.:::UNSAFE->loadLoadFence
VarHandle#storeStoreFence():::Ensures that stores before the fence will not be reordered with stores after the fence.:::UNSAFE->storeStoreFence
VolatileCallSite#getTarget():::Returns the target method of the call site, which behaves like a volatile field of the VolatileCallSite:::return->getTargetVolatile
VolatileCallSite#setTarget(MethodHandle):::Updates the target method of this call site, as a volatile variable:::getTargetVolatile->checkTargetChange->setTargetVolatile

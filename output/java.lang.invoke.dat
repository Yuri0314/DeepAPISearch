AbstractConstantGroup#toString():::Produce a string using the non-resolving list view, where unresolved elements are presented as asterisks.
AbstractConstantGroup.WithCache#fillCache(int):::hook for local subclasses
AbstractValidatingLambdaMetafactory#buildCallSite():::Build the CallSite.
AbstractValidatingLambdaMetafactory#validateMetafactoryArgs():::Check the meta-factory arguments for errors
BootstrapCallInfo#bootstrapMethod():::Returns the bootstrap method for this call.
BootstrapCallInfo#invocationName():::Returns the method name or constant name for this call.
BootstrapCallInfo#invocationType():::Returns the method type or constant type for this call.
BootstrapCallInfo#makeBootstrapCallInfo(MethodHandle, String, T, ConstantGroup):::Make a new bootstrap call descriptor with the given components.
BootstrapMethodInvoker#invoke(Class, MethodHandle, String, Object, Object, Class):::Factored code for invoking a bootstrap method for invokedynamic or a dynamic constant.
BootstrapMethodInvoker#pushMePullYou(MethodHandle, boolean):::Given a push-mode BSM (taking one argument) convert it to a  pull-mode BSM (taking N pre-resolved arguments)
BoundMethodHandle#makeReinvoker(MethodHandle):::A reinvoker MH has this form: lambda (bmh, arg*) { thismh = bmh[0]; invokeBasic(thismh, arg*) }
CallSite#type():::Returns the type of this call site's target
CallSite#getTarget():::Returns the target method of the call site, according to the behavior defined by this call site's specific class
CallSite#setTarget(MethodHandle):::Updates the target method of this call site, according to the behavior defined by this call site's specific class
CallSite#dynamicInvoker():::Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site
ClassSpecializer#topClass():::Return the top type mirror, for type T
ClassSpecializer#keyType():::Return the key type mirror, for type K
ClassSpecializer#metaType():::Return the species metadata type mirror, for type S
ClassSpecializer#baseConstructorType():::Report the leading arguments (if any) required by every species factory
ClassSpecializer#topSpecies():::Return the trivial species for the null sequence of arguments.
ClassSpecializer#transformMethods():::Return the list of transform methods originally given at creation of this specializer.
ClassSpecializer#factory():::Return the factory object used to build and load concrete species code.
ClassSpecializer.SpeciesData#speciesCode():::Throws NPE if this species is not yet resolved.
ClassSpecializer.SpeciesData#getter(int):::Return a MethodHandle which can get the indexed field of this species
ClassSpecializer.SpeciesData#getterFunction(int):::Return a LambdaForm.Name containing a LambdaForm.NamedFunction that represents a MH bound to a generic invoker, which in turn forwards to the corresponding getter.
ClassSpecializer.SpeciesData#deriveFieldTypes(K):::Given a key, derive the list of field types, which all instances of this species must store.
ClassSpecializer.SpeciesData#deriveTransformHelper(MemberName, int):::Given the index of a method in the transforms list, supply a factory method that takes the arguments of the transform, plus the local fields, and produce a value of the required type
ClassSpecializer.SpeciesData#deriveTransformHelperArguments(MemberName, int, List, List):::During code generation, this method is called once per transform to determine what is the mix of arguments to hand to the transform-helper
ClassSpecializer.SpeciesData#deriveClassName():::Given a key, generate the name of the class which implements the species for that key
ClassSpecializer.SpeciesData#deriveTypeString():::Default implementation collects basic type characters, plus possibly type names, if some types don't correspond to basic types.
ClassSpecializer.SpeciesData#deriveSuperClass():::Report what immediate super-class to use for the concrete class of this species
ClassSpecializer.Factory#loadSpecies(S):::Get a concrete subclass of the top class for a given combination of bound types.
ClassSpecializer.Factory#generateConcreteSpeciesCode(String, ClassSpecializer.SpeciesData):::Generate a concrete subclass of the top class for a given combination of bound types
ClassSpecializer.Factory#chooseFieldName(Class, int):::Field names in concrete species classes adhere to this pattern: type + index, where type is a single character (L, I, J, F, D)
ClassSpecializer#makeFactory():::Hook that virtualizes the Factory class, allowing subclasses to extend it.
ConstantBootstraps#nullConstant(MethodHandles.Lookup, String, Class):::Returns a null object reference for the reference type specified by type.
ConstantBootstraps#primitiveClass(MethodHandles.Lookup, String, Class):::Returns a Class mirror for the primitive type whose type descriptor is specified by name.
ConstantBootstraps#enumConstant(MethodHandles.Lookup, String, Class):::Returns an enum constant of the type specified by type with the name specified by name.
ConstantBootstraps#getStaticFinal(MethodHandles.Lookup, String, Class, Class):::Returns the value of a static final field.
ConstantBootstraps#getStaticFinal(MethodHandles.Lookup, String, Class):::Returns the value of a static final field declared in the class which is the same as the field's type (or, for primitive-valued fields, declared in the wrapper class.)  This is a simplified form of #getStaticFinal(MethodHandles.Lookup, String, Class, Class) for the case where a class declares distinguished constant instances of itself.
ConstantBootstraps#invoke(MethodHandles.Lookup, String, Class, MethodHandle, Object...):::Returns the result of invoking a method handle with the provided arguments
ConstantBootstraps#fieldVarHandle(MethodHandles.Lookup, String, Class, Class, Class):::Finds a VarHandle for an instance field.
ConstantBootstraps#staticFieldVarHandle(MethodHandles.Lookup, String, Class, Class, Class):::Finds a VarHandle for a static field.
ConstantBootstraps#arrayVarHandle(MethodHandles.Lookup, String, Class, Class):::Finds a VarHandle for an array type.
ConstantCallSite#getTarget():::Returns the target method of the call site, which behaves like a final field of the ConstantCallSite
ConstantCallSite#setTarget(MethodHandle):::Always throws an UnsupportedOperationException
ConstantCallSite#dynamicInvoker():::Returns this call site's permanent target
ConstantGroup#size():::Returns the number of constants in this group
ConstantGroup#get(int):::Returns the selected constant, resolving it if necessary
ConstantGroup#get(int, Object):::Returns the selected constant, or the given sentinel value if there is none available
ConstantGroup#isPresent(int):::Returns an indication of whether a constant may be available
ConstantGroup#asList():::Create a view on this group as a List view
ConstantGroup#asList(Object):::Create a view on this group as a List view
ConstantGroup#subGroup(int, int):::Create a view on a sub-sequence of this group.
ConstantGroup#copyConstants(int, int, Object[], int):::Copy a sequence of constant values into a given buffer
ConstantGroup#copyConstants(int, int, Object[], int, Object):::Copy a sequence of constant values into a given buffer
ConstantGroup#makeConstantGroup(List, Object, IntFunction):::Make a new constant group with the given constants
ConstantGroup#makeConstantGroup(List):::Make a new constant group with the given constant values
DelegatingMethodHandle#getTarget():::Define this to extract the delegated target which supplies the invocation behavior.
DelegatingMethodHandle#makeReinvokerForm(MethodHandle, int, Object, boolean, NamedFunction, NamedFunction):::Create a LF which simply reinvokes a target of the given basic type.
DirectMethodHandle#internalMemberName(Object):::Static wrapper for DirectMethodHandle.internalMemberName.
DirectMethodHandle#checkReceiver(Object):::Used for interface receiver type checks, by Interface and Special modes.
InnerClassLambdaMetafactory#buildCallSite():::Build the CallSite
InvokerBytecodeGenerator#generateCustomizedCode(LambdaForm, MethodType):::Generate customized bytecode for a given LambdaForm.
InvokerBytecodeGenerator#emitInvoke(Name):::Emit an invoke for the given name.
InvokerBytecodeGenerator#emitStaticInvoke(MemberName, Name):::Emit an invoke for the given name, using the MemberName directly.
InvokerBytecodeGenerator#generateLambdaFormInterpreterEntryPoint(MethodType):::Generate bytecode for a LambdaForm.vmentry which calls interpretWithArguments.
InvokerBytecodeGenerator#generateNamedFunctionInvoker(MethodTypeForm):::Generate bytecode for a NamedFunction invoker.
Invokers#invokeHandleForm(MethodType, boolean, int):::Returns an adapter for invokeExact or generic invoke, as a MH or constant pool linker
LambdaForm#customize(MethodHandle):::Customize LambdaForm for a particular MethodHandle
LambdaForm#uncustomize():::Get uncustomized flavor of the LambdaForm
LambdaForm#nameRefsAreLegal():::Check that all embedded Name references are localizable to this lambda, and are properly ordered after their corresponding definitions
LambdaForm#returnType():::Report the return type.
LambdaForm#parameterType(int):::Report the N-th argument type.
LambdaForm#parameter(int):::Report the N-th argument name.
LambdaForm#parameterConstraint(int):::Report the N-th argument type constraint.
LambdaForm#arity():::Report the arity.
LambdaForm#expressionCount():::Report the number of expressions (non-parameter names).
LambdaForm#methodType():::Return the method type corresponding to my basic type signature.
LambdaForm#basicTypeSignature():::Return ABC_Z, where the ABC are parameter type characters, and Z is the return type character.
LambdaForm#isSelectAlternative(int):::Check if i-th name is a call to MethodHandleImpl.selectAlternative.
LambdaForm#isGuardWithCatch(int):::Check if i-th name is a start of GuardWithCatch idiom.
LambdaForm#isTryFinally(int):::Check if i-th name is a start of the tryFinally idiom.
LambdaForm#isLoop(int):::Check if i-th name is a start of the loop idiom.
LambdaForm#prepare():::Make this LF directly executable, as part of a MethodHandle
LambdaForm#compileToBytecode():::Generate optimizable bytecode for this form.
LambdaForm#shortenSignature(String):::Hack to make signatures more readable when they show up in method names
LambdaForm.Name#replaceNames(Name[], Name[], int, int):::In the arguments of this Name, replace oldNames[i] pairwise by newNames[i]
LambdaForm.Name#isInvokeBasic():::Check if MemberName is a call to MethodHandle.invokeBasic.
LambdaForm.Name#isLinkerMethodInvoke():::Check if MemberName is a call to MethodHandle.linkToStatic, etc.
LambdaForm.Name#lastUseIndex(Name):::Return the index of the last occurrence of n in the argument array
LambdaForm.Name#useCount(Name):::Return the number of occurrences of n in the argument array
LambdaForm#lastUseIndex(Name):::Return the index of the last name which contains n as an argument
LambdaForm#useCount(Name):::Return the number of times n is used as an argument or return value.
LambdaFormBuffer#startEdit():::Create a private, writable copy of names
LambdaFormBuffer#setResult(Name):::Change the result name
LambdaFormBuffer#endEdit():::Finish a transaction.
LambdaFormBuffer#replaceFunctions(List, List, Object...):::Replace any Name whose function is in oldFns with a copy  whose function is in the corresponding position in newFns
LambdaFormBuffer#renameParameter(int, Name):::Replace a parameter by a fresh parameter.
LambdaFormBuffer#replaceParameterByNewExpression(int, Name):::Replace a parameter by a fresh expression.
LambdaFormBuffer#replaceParameterByCopy(int, int):::Replace a parameter by another parameter or expression already in the form.
LambdaFormBuffer#insertExpression(int, Name):::Insert a fresh expression.
LambdaFormBuffer#insertParameter(int, Name):::Insert a fresh parameter.
LambdaMetafactory#metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType):::Facilitates the creation of simple "function objects" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments
LambdaMetafactory#altMetafactory(MethodHandles.Lookup, String, MethodType, Object...):::Facilitates the creation of simple "function objects" that implement one or more interfaces by delegation to a provided MethodHandle, after appropriate type adaptation and partial evaluation of arguments
MemberName#getDeclaringClass():::Return the declaring class of this member
MemberName#getClassLoader():::Utility method producing the class loader of the declaring class.
MemberName#getName():::Return the simple name of this member
MemberName#getMethodType():::Return the declared type of this member, which  must be a method or constructor.
MemberName#getMethodDescriptor():::Return the descriptor of this member, which  must be a method or constructor.
MemberName#getInvocationType():::Return the actual type under which this method or constructor must be invoked
MemberName#getParameterTypes():::Utility method producing the parameter types of the method type.
MemberName#getReturnType():::Utility method producing the return type of the method type.
MemberName#getFieldType():::Return the declared type of this member, which  must be a field or type
MemberName#getType():::Utility method to produce either the method type or field type of this member.
MemberName#getSignature():::Utility method to produce the signature of this member,  used within the class file format to describe its type.
MemberName#getModifiers():::Return the modifier flags of this member.
MemberName#getReferenceKind():::Return the reference kind of this member, or zero if none.
MemberName#isMethodHandleInvoke():::Utility method to query if this member is a method handle invocation (invoke or invokeExact).
MemberName#isStatic():::Utility method to query the modifier flags of this member.
MemberName#isPublic():::Utility method to query the modifier flags of this member.
MemberName#isPrivate():::Utility method to query the modifier flags of this member.
MemberName#isProtected():::Utility method to query the modifier flags of this member.
MemberName#isFinal():::Utility method to query the modifier flags of this member.
MemberName#canBeStaticallyBound():::Utility method to query whether this member or its defining class is final.
MemberName#isVolatile():::Utility method to query the modifier flags of this member.
MemberName#isAbstract():::Utility method to query the modifier flags of this member.
MemberName#isNative():::Utility method to query the modifier flags of this member.
MemberName#isBridge():::Utility method to query the modifier flags of this member; returns false if the member is not a method.
MemberName#isVarargs():::Utility method to query the modifier flags of this member; returns false if the member is not a method.
MemberName#isSynthetic():::Utility method to query the modifier flags of this member; returns false if the member is not a method.
MemberName#isInvocable():::Utility method to query whether this member is a method or constructor.
MemberName#isFieldOrMethod():::Utility method to query whether this member is a method, constructor, or field.
MemberName#isMethod():::Query whether this member is a method.
MemberName#isConstructor():::Query whether this member is a constructor.
MemberName#isField():::Query whether this member is a field.
MemberName#isType():::Query whether this member is a type.
MemberName#isPackage():::Utility method to query whether this member is neither public, private, nor protected.
MemberName#isCallerSensitive():::Query whether this member has a CallerSensitive annotation.
MemberName#isAccessibleFrom(Class):::Utility method to query whether this member is accessible from a given lookup class.
MemberName#refersTo(Class, String):::Check if MemberName is a call to a method named name in class declaredClass.
MemberName#asConstructor():::If this MN is not REF_newInvokeSpecial, return a clone with that ref
MemberName#asNormalOriginal():::If this MN is a REF_invokeSpecial, return a clone with the "normal" kind  REF_invokeVirtual; also switch either to REF_invokeInterface if clazz.isInterface
MemberName#makeMethodHandleInvoke(String, MethodType):::Create a name for a signature-polymorphic invoker
MemberName#getDefinition():::Get the definition of this member name
MemberName#equals(MemberName):::Decide if two member names have exactly the same symbolic content
MemberName#hasReceiverTypeDispatch():::Query whether this member name is resolved to a non-static, non-final method.
MemberName#isResolved():::Query whether this member name is resolved
MemberName#toString():::Produce a string form of this member name
MemberName.Factory#resolveOrFail(byte, MemberName, Class, Class):::Produce a resolved version of the given member
MemberName.Factory#resolveOrNull(byte, MemberName, Class):::Produce a resolved version of the given member
MemberName.Factory#getMethods(Class, boolean, Class):::Return a list of all methods defined by the given class
MemberName.Factory#getMethods(Class, boolean, String, MethodType, Class):::Return a list of matching methods defined by the given class
MemberName.Factory#getConstructors(Class, Class):::Return a list of all constructors defined by the given class
MemberName.Factory#getFields(Class, boolean, Class):::Return a list of all fields defined by the given class
MemberName.Factory#getFields(Class, boolean, String, Class, Class):::Return a list of all fields defined by the given class
MemberName.Factory#getNestedTypes(Class, boolean, Class):::Return a list of all nested types defined by the given class
MethodHandle#type():::Reports the type of this method handle
MethodHandle#invokeExact(Object...):::Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match
MethodHandle#invoke(Object...):::Invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values
MethodHandle#invokeBasic(Object...):::Private method for trusted invocation of a method handle respecting simplified signatures
MethodHandle#linkToVirtual(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeVirtual
MethodHandle#linkToStatic(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeStatic
MethodHandle#linkToSpecial(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeSpecial
MethodHandle#linkToInterface(Object...):::Private method for trusted invocation of a MemberName of kind REF_invokeInterface
MethodHandle#invokeWithArguments(Object...):::Performs a variable arity invocation, passing the arguments in the given array to the method handle, as if via an inexact #invoke invoke from a call site which mentions only the type Object, and whose actual argument count is the length of the argument array
MethodHandle#invokeWithArguments(java.util.List):::Performs a variable arity invocation, passing the arguments in the given list to the method handle, as if via an inexact #invoke invoke from a call site which mentions only the type Object, and whose actual argument count is the length of the argument list
MethodHandle#asType(MethodType):::Produces an adapter method handle which adapts the type of the current method handle to a new type
MethodHandle#asSpreader(Class, int):::Makes an array-spreading method handle, which accepts a trailing array argument and spreads its elements as positional arguments
MethodHandle#asSpreader(int, Class, int):::Makes an array-spreading method handle, which accepts an array argument at a given position and spreads its elements as positional arguments in place of the array
MethodHandle#withVarargs(boolean):::Adapts this method handle to be #asVarargsCollector variable arity if the boolean flag is true, else #asFixedArity fixed arity
MethodHandle#asCollector(Class, int):::Makes an array-collecting method handle, which accepts a given number of trailing positional arguments and collects them into an array argument
MethodHandle#asCollector(int, Class, int):::Makes an array-collecting method handle, which accepts a given number of positional arguments starting at a given position, and collects them into an array argument
MethodHandle#asVarargsCollector(Class):::Makes a variable arity adapter which is able to accept any number of trailing positional arguments and collect them into an array argument
MethodHandle#isVarargsCollector():::Determines if this method handle supports #asVarargsCollector variable arity calls
MethodHandle#asFixedArity():::Makes a fixed arity method handle which is otherwise equivalent to the current method handle
MethodHandle#bindTo(Object):::Binds a value x to the first argument of a method handle, without invoking it
MethodHandle#toString():::Returns a string representation of the method handle, starting with the string "MethodHandle" and ending with the string representation of the method handle's type
MethodHandle#debugString():::Return a string with a several lines describing the method handle structure
MethodHandle#rebind():::Require this method handle to be a BMH, or else replace it with a "wrapper" BMH
MethodHandleImpl#makePairwiseConvert(MethodHandle, MethodType, boolean, boolean):::Create a JVM-level adapter method handle to conform the given method handle to the similar newType, using only pairwise argument conversions
MethodHandleImpl#valueConversion(Class, Class, boolean, boolean):::Find a conversion function from the given source to the given destination
MethodHandleImpl#makeSpreadArguments(MethodHandle, Class, int, int):::Factory method:  Spread selected argument.
MethodHandleImpl#makeCollectArguments(MethodHandle, MethodHandle, int, boolean):::Factory method:  Collect or filter selected argument(s).
MethodHandleImpl#makeBlockInliningWrapper(MethodHandle):::Block inlining during JIT-compilation of a target method handle if it hasn't been invoked enough times
MethodHandleImpl#guardWithCatch(MethodHandle, Class, MethodHandle, Object...):::Intrinsified during LambdaForm compilation (see InvokerBytecodeGenerator#emitGuardWithCatch emitGuardWithCatch).
MethodHandleImpl#bindCaller(MethodHandle, Class):::Create an alias for the method handle which, when called, appears to be called from the same class loader and protection domain as hostClass
MethodHandleImpl#varargsArray(int):::Return a method handle that takes the indicated number of Object  arguments and returns an Object array of them, as if for varargs.
MethodHandleImpl#varargsArray(Class, int):::Return a method handle that takes the indicated number of  typed arguments and returns an array of them
MethodHandleImpl#makeLoop(Class, List>, List, List, List, List):::Assembles a loop method handle from the given handles and type information.
MethodHandleImpl#loop(BasicType[], LoopClauses, Object...):::Intrinsified during LambdaForm compilation (see InvokerBytecodeGenerator#emitLoop(int)).
MethodHandleImpl#countedLoopPredicate(int, int):::This method is bound as the predicate in MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle) counting loops.
MethodHandleImpl#countedLoopStep(int, int):::This method is bound as the step function in MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle) counting loops to increment the counter.
MethodHandleImpl#initIterator(Iterable):::This is bound to initialize the loop-local iterator in MethodHandles#iteratedLoop iterating loops.
MethodHandleImpl#iteratePredicate(Iterator):::This method is bound as the predicate in MethodHandles#iteratedLoop iterating loops.
MethodHandleImpl#iterateNext(Iterator):::This method is bound as the step for retrieving the current value from the iterator in MethodHandles#iteratedLoop iterating loops.
MethodHandleImpl#makeTryFinally(MethodHandle, MethodHandle, Class, List>):::Makes a try-finally handle that conforms to the type constraints.
MethodHandleImpl#tryFinally(MethodHandle, MethodHandle, Object...):::Intrinsified during LambdaForm compilation (see InvokerBytecodeGenerator#emitTryFinally emitTryFinally).
MethodHandleInfo#getReferenceKind():::Returns the reference kind of the cracked method handle, which in turn determines whether the method handle's underlying member was a constructor, method, or field
MethodHandleInfo#getDeclaringClass():::Returns the class in which the cracked method handle's underlying member was defined.
MethodHandleInfo#getName():::Returns the name of the cracked method handle's underlying member
MethodHandleInfo#getMethodType():::Returns the nominal type of the cracked symbolic reference, expressed as a method type
MethodHandleInfo#reflectAs(Class, Lookup):::Reflects the underlying member as a method, constructor, or field object
MethodHandleInfo#getModifiers():::Returns the access modifiers of the underlying member.
MethodHandleInfo#referenceKindToString(int):::Returns the descriptive name of the given reference kind, as defined in the table above
MethodHandleInfo#toString(int, Class, String, MethodType):::Returns a string representation for a MethodHandleInfo, given the four parts of its symbolic reference
MethodHandleNatives#setCallSiteTargetNormal(CallSite, MethodHandle):::Tell the JVM that we need to change the target of a CallSite.
MethodHandleNatives#linkCallSite(Object, int, Object, Object, Object, Object, Object[]):::The JVM is linking an invokedynamic instruction
MethodHandleNatives#staticArgumentsPulled(Object):::The JVM is requesting pull-mode bootstrap when it provides  a tuple of the form int[]{ argc, vmindex }
MethodHandleNatives#isPullModeBSM(MethodHandle):::A BSM runs in pull-mode if and only if its sole arguments are (Lookup, BootstrapCallInfo), or can be converted pairwise to those types, and it is not of variable arity
MethodHandleNatives#findMethodHandleType(Class, Class[]):::The JVM wants a pointer to a MethodType
MethodHandleNatives#linkMethod(Class, int, Class, String, Object, Object[]):::The JVM wants to link a call site that requires a dynamic type check
MethodHandleNatives#linkMethodHandleConstant(Class, int, Class, String, Object):::The JVM is resolving a CONSTANT_MethodHandle CP entry
MethodHandleNatives#mapLookupExceptionToError(ReflectiveOperationException):::Map a reflective exception to a linkage error.
MethodHandleNatives#initCauseFrom(E, Exception):::Use best possible cause for err.initCause(), substituting the cause for err itself if the cause has the same (or better) type.
MethodHandleNatives#isCallerSensitive(MemberName):::Is this method a caller-sensitive method? I.e., does it call Reflection.getCallerClass or a similar method to ask about the identity of its caller?
MethodHandleProxies#isWrapperInstance(Object):::Determines if the given object was produced by a call to #asInterfaceInstance asInterfaceInstance.
MethodHandleProxies#wrapperInstanceTarget(Object):::Produces or recovers a target method handle which is behaviorally equivalent to the unique method of this wrapper instance
MethodHandleProxies#wrapperInstanceType(Object):::Recovers the unique single-method interface type for which this wrapper instance was created
MethodHandles#lookup():::Returns a Lookup lookup object with full capabilities to emulate all supported bytecode behaviors of the caller
MethodHandles#publicLookup():::Returns a Lookup lookup object which is trusted minimally
MethodHandles#privateLookupIn(Class, Lookup):::Returns a Lookup lookup object with full capabilities to emulate all supported bytecode behaviors, including  private access, on a target class
MethodHandles#reflectAs(Class, MethodHandle):::Performs an unchecked "crack" of a direct method handle
MethodHandles.Lookup#lookupClass():::Tells which class is performing the lookup
MethodHandles.Lookup#lookupModes():::Tells which access-protection classes of members this lookup object can produce
MethodHandles.Lookup#in(Class):::Creates a lookup on the specified new lookup class
MethodHandles.Lookup#dropLookupMode(int):::Creates a lookup on the same lookup class which this lookup object finds members, but with a lookup mode that has lost the given lookup mode
MethodHandles.Lookup#defineClass(byte[]):::Defines a class to the same class loader and in the same runtime package and java.security.ProtectionDomain protection domain as this lookup's #lookupClass() lookup class
MethodHandles.Lookup#toString():::Displays the name of the class from which lookups are to be made
MethodHandles.Lookup#findStatic(Class, String, MethodType):::Produces a method handle for a static method
MethodHandles.Lookup#findVirtual(Class, String, MethodType):::Produces a method handle for a virtual method
MethodHandles.Lookup#findConstructor(Class, MethodType):::Produces a method handle which creates an object and initializes it, using the constructor of the specified type
MethodHandles.Lookup#findClass(String):::Looks up a class by name from the lookup context defined by this Lookup object
MethodHandles.Lookup#accessClass(Class):::Determines if a class can be accessed from the lookup context defined by this Lookup object
MethodHandles.Lookup#findSpecial(Class, String, MethodType, Class):::Produces an early-bound method handle for a virtual method
MethodHandles.Lookup#findGetter(Class, String, Class):::Produces a method handle giving read access to a non-static field
MethodHandles.Lookup#findSetter(Class, String, Class):::Produces a method handle giving write access to a non-static field
MethodHandles.Lookup#findVarHandle(Class, String, Class):::Produces a VarHandle giving access to a non-static field name of type type declared in a class of type recv
MethodHandles.Lookup#findStaticGetter(Class, String, Class):::Produces a method handle giving read access to a static field
MethodHandles.Lookup#findStaticSetter(Class, String, Class):::Produces a method handle giving write access to a static field
MethodHandles.Lookup#findStaticVarHandle(Class, String, Class):::Produces a VarHandle giving access to a static field name of type type declared in a class of type decl
MethodHandles.Lookup#bind(Object, String, MethodType):::Produces an early-bound method handle for a non-static method
MethodHandles.Lookup#unreflect(Method):::Makes a direct method handle to m, if the lookup class has permission
MethodHandles.Lookup#unreflectSpecial(Method, Class):::Produces a method handle for a reflected method
MethodHandles.Lookup#unreflectConstructor(Constructor):::Produces a method handle for a reflected constructor
MethodHandles.Lookup#unreflectGetter(Field):::Produces a method handle giving read access to a reflected field
MethodHandles.Lookup#unreflectSetter(Field):::Produces a method handle giving write access to a reflected field
MethodHandles.Lookup#unreflectVarHandle(Field):::Produces a VarHandle giving access to a reflected field f of type T declared in a class of type R
MethodHandles.Lookup#revealDirect(MethodHandle):::Cracks a direct method handle created by this lookup object or a similar one
MethodHandles.Lookup#checkMethodName(byte, String):::Check name for an illegal leading "&lt;" character.
MethodHandles.Lookup#findBoundCallerClass(MemberName):::Find my trustable caller class if m is a caller sensitive method
MethodHandles.Lookup#hasPrivateAccess():::Returns true if this lookup has PRIVATE access.
MethodHandles.Lookup#checkSecurityManager(Class, MemberName):::Perform necessary access checks
MethodHandles.Lookup#checkAccess(byte, Class, MemberName):::Check public/protected/private bits on the symbolic reference class and its member.
MethodHandles#arrayConstructor(Class):::Produces a method handle constructing arrays of a desired type, as if by the anewarray bytecode
MethodHandles#arrayLength(Class):::Produces a method handle returning the length of an array, as if by the arraylength bytecode
MethodHandles#arrayElementGetter(Class):::Produces a method handle giving read access to elements of an array, as if by the aaload bytecode
MethodHandles#arrayElementSetter(Class):::Produces a method handle giving write access to elements of an array, as if by the astore bytecode
MethodHandles#arrayElementVarHandle(Class):::Produces a VarHandle giving access to elements of an array of type arrayClass
MethodHandles#byteArrayViewVarHandle(Class, ByteOrder):::Produces a VarHandle giving access to elements of a byte[] array viewed as if it were a different primitive array type, such as int[] or long[]
MethodHandles#byteBufferViewVarHandle(Class, ByteOrder):::Produces a VarHandle giving access to elements of a ByteBuffer viewed as if it were an array of elements of a different primitive component type to that of byte, such as int[] or long[]
MethodHandles#spreadInvoker(MethodType, int):::Produces a method handle which will invoke any method handle of the given type, with a given number of trailing arguments replaced by a single trailing Object[] array
MethodHandles#exactInvoker(MethodType):::Produces a special invoker method handle which can be used to invoke any method handle of the given type, as if by MethodHandle#invokeExact invokeExact
MethodHandles#invoker(MethodType):::Produces a special invoker method handle which can be used to invoke any method handle compatible with the given type, as if by MethodHandle#invoke invoke
MethodHandles#varHandleExactInvoker(VarHandle.AccessMode, MethodType):::Produces a special invoker method handle which can be used to invoke a signature-polymorphic access mode method on any VarHandle whose associated access mode type is compatible with the given type
MethodHandles#varHandleInvoker(VarHandle.AccessMode, MethodType):::Produces a special invoker method handle which can be used to invoke a signature-polymorphic access mode method on any VarHandle whose associated access mode type is compatible with the given type
MethodHandles#explicitCastArguments(MethodHandle, MethodType):::Produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion
MethodHandles#permuteArguments(MethodHandle, MethodType, int...):::Produces a method handle which adapts the calling sequence of the given method handle to a new type, by reordering the arguments
MethodHandles#constant(Class, Object):::Produces a method handle of the requested return type which returns the given constant value every time it is invoked
MethodHandles#identity(Class):::Produces a method handle which returns its sole argument when invoked.
MethodHandles#zero(Class):::Produces a constant method handle of the requested return type which returns the default value for that type every time it is invoked
MethodHandles#empty(MethodType):::Produces a method handle of the requested type which ignores any arguments, does nothing, and returns a suitable default depending on the return type
MethodHandles#insertArguments(MethodHandle, int, Object...):::Provides a target method handle with one or more bound arguments in advance of the method handle's invocation
MethodHandles#dropArguments(MethodHandle, int, List>):::Produces a method handle which will discard some dummy arguments before calling some other specified target method handle
MethodHandles#dropArguments(MethodHandle, int, Class...):::Produces a method handle which will discard some dummy arguments before calling some other specified target method handle
MethodHandles#dropArgumentsToMatch(MethodHandle, int, List>, int):::Adapts a target method handle to match the given parameter type list
MethodHandles#filterArguments(MethodHandle, int, MethodHandle...):::Adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function
MethodHandles#collectArguments(MethodHandle, int, MethodHandle):::Adapts a target method handle by pre-processing a sub-sequence of its arguments with a filter (another method handle)
MethodHandles#filterReturnValue(MethodHandle, MethodHandle):::Adapts a target method handle by post-processing its return value (if any) with a filter (another method handle)
MethodHandles#foldArguments(MethodHandle, MethodHandle):::Adapts a target method handle by pre-processing some of its arguments, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments
MethodHandles#foldArguments(MethodHandle, int, MethodHandle):::Adapts a target method handle by pre-processing some of its arguments, starting at a given position, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments just before the folded arguments
MethodHandles#foldArguments(MethodHandle, int, MethodHandle, int...):::As foldArguments(MethodHandle, int, MethodHandle), but with the added capability of selecting the arguments from the targets parameters to call the combiner with
MethodHandles#guardWithTest(MethodHandle, MethodHandle, MethodHandle):::Makes a method handle which adapts a target method handle, by guarding it with a test, a boolean-valued method handle
MethodHandles#catchException(MethodHandle, Class, MethodHandle):::Makes a method handle which adapts a target method handle, by running it inside an exception handler
MethodHandles#throwException(Class, Class):::Produces a method handle which will throw exceptions of the given exType
MethodHandles#loop(MethodHandle[]...):::Constructs a method handle representing a loop with several loop variables that are updated and checked upon each iteration
MethodHandles#whileLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a while loop from an initializer, a body, and a predicate
MethodHandles#doWhileLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a do-while loop from an initializer, a body, and a predicate
MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a loop that runs a given number of iterations
MethodHandles#countedLoop(MethodHandle, MethodHandle, MethodHandle, MethodHandle):::Constructs a loop that counts over a range of numbers
MethodHandles#iteratedLoop(MethodHandle, MethodHandle, MethodHandle):::Constructs a loop that ranges over the values produced by an Iterator<T>
MethodHandles#tryFinally(MethodHandle, MethodHandle):::Makes a method handle that adapts a target method handle by wrapping it in a try-finally block
MethodType#methodType(Class, Class[]):::Finds or creates an instance of the given method type.
MethodType#methodType(Class, List>):::Finds or creates a method type with the given components
MethodType#methodType(Class, Class, Class...):::Finds or creates a method type with the given components
MethodType#methodType(Class):::Finds or creates a method type with the given components
MethodType#methodType(Class, Class):::Finds or creates a method type with the given components
MethodType#methodType(Class, MethodType):::Finds or creates a method type with the given components
MethodType#genericMethodType(int, boolean):::Finds or creates a method type whose components are Object with an optional trailing Object[] array
MethodType#genericMethodType(int):::Finds or creates a method type whose components are all Object
MethodType#changeParameterType(int, Class):::Finds or creates a method type with a single different parameter type
MethodType#insertParameterTypes(int, Class...):::Finds or creates a method type with additional parameter types
MethodType#appendParameterTypes(Class...):::Finds or creates a method type with additional parameter types
MethodType#insertParameterTypes(int, List>):::Finds or creates a method type with additional parameter types
MethodType#appendParameterTypes(List>):::Finds or creates a method type with additional parameter types
MethodType#dropParameterTypes(int, int):::Finds or creates a method type with some parameter types omitted
MethodType#changeReturnType(Class):::Finds or creates a method type with a different return type
MethodType#hasPrimitives():::Reports if this type contains a primitive argument or return value
MethodType#hasWrappers():::Reports if this type contains a wrapper argument or return value
MethodType#erase():::Erases all reference types to Object
MethodType#generic():::Converts all types, both reference and primitive, to Object
MethodType#wrap():::Converts all primitive types to their corresponding wrapper types
MethodType#unwrap():::Converts all wrapper types to their corresponding primitive types
MethodType#parameterType(int):::Returns the parameter type at the specified index, within this method type.
MethodType#parameterCount():::Returns the number of parameter types in this method type.
MethodType#returnType():::Returns the return type of this method type.
MethodType#parameterList():::Presents the parameter types as a list (a convenience method)
MethodType#lastParameterType():::Returns the last parameter type of this method type
MethodType#parameterArray():::Presents the parameter types as an array (a convenience method)
MethodType#equals(Object):::Compares the specified object with this type for equality
MethodType#hashCode():::Returns the hash code value for this method type
MethodType#toString():::Returns a string representation of the method type, of the form "(PT0,PT1...)RT"
MethodType#fromMethodDescriptorString(String, ClassLoader):::Finds or creates an instance of a method type, given the spelling of its bytecode descriptor
MethodType#fromDescriptor(String, ClassLoader):::Same as #fromMethodDescriptorString(String, ClassLoader), but null ClassLoader means the bootstrap loader is used here
MethodType#toMethodDescriptorString():::Produces a bytecode descriptor representation of the method type
MethodTypeForm#erasedType():::Return the type corresponding uniquely (1-1) to this MT-form
MethodTypeForm#basicType():::Return the basic type derived from the erased type of this MT-form
MethodTypeForm#canonicalize(MethodType, int, int):::Canonicalize the types in the given method type
MethodTypeForm#canonicalize(Class, int):::Canonicalize the given return or param type
MethodTypeForm#canonicalizeAll(Class[], int):::Canonicalize each param type in the given array
MutableCallSite#getTarget():::Returns the target method of the call site, which behaves like a normal field of the MutableCallSite
MutableCallSite#setTarget(MethodHandle):::Updates the target method of this call site, as a normal variable
MutableCallSite#syncAll(MutableCallSite[]):::Performs a synchronization operation on each call site in the given array, forcing all other threads to throw away any cached values previously loaded from the target of any of the call sites
SerializedLambda#getCapturingClass():::Get the name of the class that captured this lambda.
SerializedLambda#getFunctionalInterfaceClass():::Get the name of the invoked type to which this lambda has been converted
SerializedLambda#getFunctionalInterfaceMethodName():::Get the name of the primary method for the functional interface to which this lambda has been converted.
SerializedLambda#getFunctionalInterfaceMethodSignature():::Get the signature of the primary method for the functional interface to which this lambda has been converted.
SerializedLambda#getImplClass():::Get the name of the class containing the implementation method.
SerializedLambda#getImplMethodName():::Get the name of the implementation method.
SerializedLambda#getImplMethodSignature():::Get the signature of the implementation method.
SerializedLambda#getImplMethodKind():::Get the method handle kind (see MethodHandleInfo) of the implementation method.
SerializedLambda#getInstantiatedMethodType():::Get the signature of the primary functional interface method after type variables are substituted with their instantiation from the capture site.
SerializedLambda#getCapturedArgCount():::Get the count of dynamic arguments to the lambda capture site.
SerializedLambda#getCapturedArg(int):::Get a dynamic argument to the lambda capture site.
StringConcatFactory#makeConcat(MethodHandles.Lookup, String, MethodType):::Facilitates the creation of optimized String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments
StringConcatFactory#makeConcatWithConstants(MethodHandles.Lookup, String, MethodType, String, Object...):::Facilitates the creation of optimized String concatenation methods, that can be used to efficiently concatenate a known number of arguments of known types, possibly after type adaptation and partial evaluation of arguments
SwitchPoint#hasBeenInvalidated():::Determines if this switch point has been invalidated yet
SwitchPoint#guardWithTest(MethodHandle, MethodHandle):::Returns a method handle which always delegates either to the target or the fallback
SwitchPoint#invalidateAll(SwitchPoint[]):::Sets all of the given switch points into the invalid state
TypeConvertingMethodAdapter#unbox(String, Wrapper):::Convert types by unboxing
TypeConvertingMethodAdapter#convertType(Class, Class, Class):::Convert an argument of type 'arg' to be passed to 'target' assuring that it is 'functional'
TypeConvertingMethodAdapter#iconst(int):::The following method is copied from org.objectweb.asm.commons.InstructionAdapter
VarHandle#get(Object...):::Returns the value of a variable, with memory semantics of reading as if the variable was declared non-volatile
VarHandle#set(Object...):::Sets the value of a variable to the newValue, with memory semantics of setting as if the variable was declared non-volatile and non-final
VarHandle#getVolatile(Object...):::Returns the value of a variable, with memory semantics of reading as if the variable was declared volatile
VarHandle#setVolatile(Object...):::Sets the value of a variable to the newValue, with memory semantics of setting as if the variable was declared volatile
VarHandle#getOpaque(Object...):::Returns the value of a variable, accessed in program order, but with no assurance of memory ordering effects with respect to other threads
VarHandle#setOpaque(Object...):::Sets the value of a variable to the newValue, in program order, but with no assurance of memory ordering effects with respect to other threads
VarHandle#getAcquire(Object...):::Returns the value of a variable, and ensures that subsequent loads and stores are not reordered before this access
VarHandle#setRelease(Object...):::Sets the value of a variable to the newValue, and ensures that prior loads and stores are not reordered after this access
VarHandle#compareAndSet(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getVolatile
VarHandle#compareAndExchange(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getVolatile
VarHandle#compareAndExchangeAcquire(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #set if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getAcquire
VarHandle#compareAndExchangeRelease(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setRelease if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #get
VarHandle#weakCompareAndSetPlain(Object...):::Possibly atomically sets the value of a variable to the newValue with the semantics of #set if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #get
VarHandle#weakCompareAndSet(Object...):::Possibly atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getVolatile
VarHandle#weakCompareAndSetAcquire(Object...):::Possibly atomically sets the value of a variable to the newValue with the semantics of #set if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #getAcquire
VarHandle#weakCompareAndSetRelease(Object...):::Possibly atomically sets the value of a variable to the newValue with the semantics of #setRelease if the variable's current value, referred to as the witness value, == the expectedValue, as accessed with the memory semantics of #get
VarHandle#getAndSet(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndSetAcquire(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndSetRelease(Object...):::Atomically sets the value of a variable to the newValue with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#getAndAdd(Object...):::Atomically adds the value to the current value of a variable with the memory semantics of #setVolatile, and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndAddAcquire(Object...):::Atomically adds the value to the current value of a variable with the memory semantics of #set, and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndAddRelease(Object...):::Atomically adds the value to the current value of a variable with the memory semantics of #setRelease, and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#getAndBitwiseOr(Object...):::Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndBitwiseOrAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndBitwiseOrRelease(Object...):::Atomically sets the value of a variable to the result of bitwise OR between the variable's current value and the mask with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#getAndBitwiseAnd(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndBitwiseAndAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndBitwiseAndRelease(Object...):::Atomically sets the value of a variable to the result of bitwise AND between the variable's current value and the mask with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#getAndBitwiseXor(Object...):::Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of #setVolatile and returns the variable's previous value, as accessed with the memory semantics of #getVolatile
VarHandle#getAndBitwiseXorAcquire(Object...):::Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of #set and returns the variable's previous value, as accessed with the memory semantics of #getAcquire
VarHandle#getAndBitwiseXorRelease(Object...):::Atomically sets the value of a variable to the result of bitwise XOR between the variable's current value and the mask with the memory semantics of #setRelease and returns the variable's previous value, as accessed with the memory semantics of #get
VarHandle#varType():::Returns the variable type of variables referenced by this VarHandle.
VarHandle#coordinateTypes():::Returns the coordinate types for this VarHandle.
VarHandle#accessModeType(AccessMode):::Obtains the access mode type for this VarHandle and a given access mode
VarHandle#isAccessModeSupported(AccessMode):::Returns true if the given access mode is supported, otherwise false
VarHandle#toMethodHandle(AccessMode):::Obtains a method handle bound to this VarHandle and the given access mode.
VarHandle#fullFence():::Ensures that loads and stores before the fence will not be reordered with loads and stores after the fence.
VarHandle#acquireFence():::Ensures that loads before the fence will not be reordered with loads and stores after the fence.
VarHandle#releaseFence():::Ensures that loads and stores before the fence will not be reordered with stores after the fence.
VarHandle#loadLoadFence():::Ensures that loads before the fence will not be reordered with loads after the fence.
VarHandle#storeStoreFence():::Ensures that stores before the fence will not be reordered with stores after the fence.
VolatileCallSite#getTarget():::Returns the target method of the call site, which behaves like a volatile field of the VolatileCallSite
VolatileCallSite#setTarget(MethodHandle):::Updates the target method of this call site, as a volatile variable

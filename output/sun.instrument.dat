InstrumentationImpl#addTransformer(ClassFileTransformer)::: instrumentation impl add transformer:::addTransformer
InstrumentationImpl#addTransformer(ClassFileTransformer, boolean)::: instrumentation impl add transformer:::if->throw->new->NullPointerException->if->if->isRetransformClassesSupported->throw->new->UnsupportedOperationException->if->new->TransformerManager->mRetransfomableTransformerManager->addTransformer->if->mRetransfomableTransformerManager->getTransformerCount->setHasRetransformableTransformers->else->mTransformerManager->addTransformer->if->mTransformerManager->getTransformerCount->setHasTransformers
InstrumentationImpl#removeTransformer(ClassFileTransformer)::: instrumentation impl remove transformer:::if->throw->new->NullPointerException->mgr->findTransformerManager->if->mgr->removeTransformer->if->mgr->getTransformerCount->if->mgr->isRetransformable->setHasRetransformableTransformers->else->setHasTransformers->return->return
InstrumentationImpl#isModifiableClass(Class)::: instrumentation impl is modifiable class:::if->throw->new->NullPointerException->return->isModifiableClass0
InstrumentationImpl#isModifiableModule(Module)::: instrumentation impl is modifiable module:::if->throw->new->NullPointerException->return
InstrumentationImpl#isRetransformClassesSupported()::: instrumentation impl is retransform classes supported:::if->isRetransformClassesSupported0->return
InstrumentationImpl#retransformClasses(Class...)::: instrumentation impl retransform classes:::if->isRetransformClassesSupported->throw->new->UnsupportedOperationException->if->return->retransformClasses0
InstrumentationImpl#isRedefineClassesSupported()::: instrumentation impl is redefine classes supported:::return
InstrumentationImpl#redefineClasses(ClassDefinition...)::: instrumentation impl redefine classes:::if->isRedefineClassesSupported->throw->new->UnsupportedOperationException->if->throw->new->NullPointerException->for->i->if->return->redefineClasses0
InstrumentationImpl#getAllLoadedClasses()::: instrumentation impl get all loaded classes:::return->getAllLoadedClasses0
InstrumentationImpl#getInitiatedClasses(ClassLoader)::: instrumentation impl get initiated classes:::return->getInitiatedClasses0
InstrumentationImpl#getObjectSize(Object)::: instrumentation impl get object size:::if->throw->new->NullPointerException->return->getObjectSize0
InstrumentationImpl#appendToBootstrapClassLoaderSearch(JarFile)::: instrumentation impl append to bootstrap class loader search:::jarfile->getName->appendToClassLoaderSearch0
InstrumentationImpl#appendToSystemClassLoaderSearch(JarFile)::: instrumentation impl append to system class loader search:::jarfile->getName->appendToClassLoaderSearch0
InstrumentationImpl#isNativeMethodPrefixSupported()::: instrumentation impl is native method prefix supported:::return
InstrumentationImpl#setNativeMethodPrefix(ClassFileTransformer, String)::: instrumentation impl set native method prefix:::if->isNativeMethodPrefixSupported->throw->new->UnsupportedOperationException->if->throw->new->NullPointerException->mgr->findTransformerManager->if->throw->new->IllegalArgumentException->mgr->setNativeMethodPrefix->prefixes->mgr->getNativeMethodPrefixes->mgr->isRetransformable->setNativeMethodPrefixes
InstrumentationImpl#redefineModule(Module, Set, Map>, Map>, Set>, Map, List>>)::: instrumentation impl redefine module:::if->module->isNamed->return->if->isModifiableModule->throw->module->getName->new->UnmodifiableModuleException->new->HashSet<>->if->extraReads->contains->throw->new->NullPointerException->cloneAndCheckMap->cloneAndCheckMap->new->HashSet<>->if->extraUses->contains->throw->new->NullPointerException->tmpProvides->new->HashMap<>->foreach->extraProvides->entrySet->service->e->getKey->if->throw->new->NullPointerException->providers->e->getValue->new->ArrayList<>->if->providers->isEmpty->throw->new->IllegalArgumentException->providers->if->p->getModule->throw->new->IllegalArgumentException->if->service->isAssignableFrom->throw->new->IllegalArgumentException->forEach->tmpProvides->put->extraReads->Modules->addReads->forEach->foreach->extraExports->entrySet->pkg->e->getKey->targets->e->getValue->targets->Modules->addExports->forEach->foreach->extraOpens->entrySet->pkg->e->getKey->targets->e->getValue->targets->Modules->addOpens->forEach->extraUses->Modules->addUses->forEach->foreach->extraProvides->entrySet->service->e->getKey->providers->e->getValue->providers->Modules->addProvides->forEach
InstrumentationImpl#cloneAndCheckMap(Module, Map>)::: instrumentation impl clone and check map:::if->map->isEmpty->return->Collections->emptyMap->result->new->HashMap<>->packages->module->getPackages->foreach->map->entrySet->pkg->e->getKey->if->throw->new->NullPointerException->if->packages->contains->throw->new->IllegalArgumentException->targets->e->getValue->new->HashSet<>->if->targets->isEmpty->throw->new->IllegalArgumentException->if->targets->contains->throw->new->NullPointerException->result->put->return
InstrumentationImpl#findTransformerManager(ClassFileTransformer)::: instrumentation impl find transformer manager:::if->mTransformerManager->includesTransformer->return->if->mRetransfomableTransformerManager->includesTransformer->return->return
InstrumentationImpl#isModifiableClass0(long, Class)::: instrumentation impl is modifiable class0:::
InstrumentationImpl#isRetransformClassesSupported0(long)::: instrumentation impl is retransform classes supported0:::
InstrumentationImpl#setHasTransformers(long, boolean)::: instrumentation impl set has transformers:::
InstrumentationImpl#setHasRetransformableTransformers(long, boolean)::: instrumentation impl set has retransformable transformers:::
InstrumentationImpl#retransformClasses0(long, Class[])::: instrumentation impl retransform classes0:::
InstrumentationImpl#redefineClasses0(long, ClassDefinition[])::: instrumentation impl redefine classes0:::
InstrumentationImpl#getAllLoadedClasses0(long)::: instrumentation impl get all loaded classes0:::
InstrumentationImpl#getInitiatedClasses0(long, ClassLoader)::: instrumentation impl get initiated classes0:::
InstrumentationImpl#getObjectSize0(long, Object)::: instrumentation impl get object size0:::
InstrumentationImpl#appendToClassLoaderSearch0(long, String, boolean)::: instrumentation impl append to class loader search0:::
InstrumentationImpl#setNativeMethodPrefixes(long, String[], boolean)::: instrumentation impl set native method prefixes:::
InstrumentationImpl#setAccessible(AccessibleObject, boolean)::: instrumentation impl set accessible:::AccessController->new->PrivilegedAction<Object>->doPrivileged
InstrumentationImpl#loadClassAndStartAgent(String, String, String)::: instrumentation impl load class and start agent:::mainAppLoader->ClassLoader->getSystemClassLoader->javaAgentClass->mainAppLoader->loadClass->m->firstExc->twoArgAgent->try->javaAgentClass->new->Class<?>Arr->getDeclaredMethod->catch->finally->if->try->javaAgentClass->new->Class<?>Arr->getDeclaredMethod->catch->finally->if->try->javaAgentClass->new->Class<?>Arr->getMethod->catch->finally->if->try->javaAgentClass->new->Class<?>Arr->getMethod->catch->throw->finally->setAccessible->if->m->new->ObjectArr->invoke->else->m->new->ObjectArr->invoke
InstrumentationImpl#loadClassAndCallPremain(String, String)::: instrumentation impl load class and call premain:::loadClassAndStartAgent
InstrumentationImpl#loadClassAndCallAgentmain(String, String)::: instrumentation impl load class and call agentmain:::loadClassAndStartAgent
InstrumentationImpl#transform(Module, ClassLoader, String, Class, ProtectionDomain, byte[], boolean)::: instrumentation impl transform:::mgr->if->if->classBeingRedefined->getModule->else->getUnnamedModule->loader->getUnnamedModule->if->return->else->return->mgr->transform
InstrumentationImpl#loadAgent(String):::Invoked by the java launcher to load a java agent that is packaged with the main application in an executable JAR file.:::loadAgent0
InstrumentationImpl#loadAgent0(String)::: instrumentation impl load agent0:::
TransformerManager.TransformerInfo#transformer()::: transformer info transformer:::return
TransformerManager.TransformerInfo#getPrefix()::: transformer info get prefix:::return
TransformerManager.TransformerInfo#setPrefix(String)::: transformer info set prefix:::
TransformerManager#isRetransformable()::: transformer manager is retransformable:::return
TransformerManager#addTransformer(ClassFileTransformer)::: transformer manager add transformer:::oldList->newList->new->TransformerInfoArr->System->arraycopy->new->TransformerInfo
TransformerManager#removeTransformer(ClassFileTransformer)::: transformer manager remove transformer:::found->oldList->oldLength->newLength->matchingIndex->for->x->if->newList->new->TransformerInfoArr->if->System->arraycopy->if->System->arraycopy->return
TransformerManager#includesTransformer(ClassFileTransformer)::: transformer manager includes transformer:::foreach->if->info->transformer->return->return
TransformerManager#getSnapshotTransformerList()::: transformer manager get snapshot transformer list:::return
TransformerManager#transform(Module, ClassLoader, String, Class, ProtectionDomain, byte[])::: transformer manager transform:::someoneTouchedTheBytecode->transformerList->getSnapshotTransformerList->bufferToUse->for->x->result->if->else->return
TransformerManager#getTransformerCount()::: transformer manager get transformer count:::transformerList->getSnapshotTransformerList->return
TransformerManager#setNativeMethodPrefix(ClassFileTransformer, String)::: transformer manager set native method prefix:::transformerList->getSnapshotTransformerList->for->x->return
TransformerManager#getNativeMethodPrefixes()::: transformer manager get native method prefixes:::transformerList->getSnapshotTransformerList->prefixes->new->StringArr->for->x->return

GraphBlocks#blocks(G):::All blocks in the graph.:::
GraphBlocks#blockId(B):::Unique id of a block.:::
GraphElements#method(Object):::Recognize method:::
GraphElements#methodCode(M):::Bytecode for a method.:::
GraphElements#methodModifiers(M):::Method modifiers.:::
GraphElements#methodSignature(M):::Method's signature.:::
GraphElements#methodName(M):::Method name.:::
GraphElements#methodDeclaringClass(M):::Method's declaring class:::
GraphElements#field(Object):::Recognizes a field:::
GraphElements#fieldModifiers(F):::Field modifiers.:::
GraphElements#fieldTypeName(F):::Type name of the field.:::
GraphElements#fieldName(F):::Name of a field.:::
GraphElements#fieldDeclaringClass(F):::Field's declaring class:::
GraphElements#signature(Object):::Recognizes signature:::
GraphElements#signatureParameterCount(S):::Number of parameters of a signature.:::
GraphElements#signatureParameterTypeName(S, int):::Type name of a signature parameter.:::
GraphElements#signatureReturnTypeName(S):::Type name of a return type.:::
GraphElements#nodeSourcePosition(Object):::Recognize a source position:::
GraphElements#nodeSourcePositionMethod(P):::Method for a position.:::
GraphElements#nodeSourcePositionCaller(P):::Caller of a position.:::
GraphElements#nodeSourcePositionBCI(P):::Byte code index of a position.:::
GraphElements#methodStackTraceElement(M, int, P):::Stack trace element for a method, index and position:::
GraphLocations#methodLocation(M, int, P):::Stack trace element for a method, index and position:::
GraphLocations#locationLanguage(L):::Identification of the language:::
GraphLocations#locationURI(L):::The universal resource identification that contains the location.If the location can be found in an assummably accessible resource, then use such resource identification:::
GraphLocations#locationLineNumber(L):::Line number of a location:::
GraphLocations#locationOffsetStart(L):::Offset of the location:::
GraphLocations#locationOffsetEnd(L):::Offset of the location:::
GraphOutput#newBuilder(GraphStructure):::Creates new builder to configure a future instance of GraphOutput.:::return->new->Builder<>
GraphOutput#beginGroup(G, String, String, M, int, Map):::Begins a compilation group.:::printer->beginGroup
GraphOutput#print(G, Map, int, String, Object...):::Prints a single graph.:::printer->print
GraphOutput#endGroup():::Ends compilation group.:::printer->endGroup
GraphOutput#close():::Closes the output:::printer->close
GraphOutput#isOpen():::Checks if the GraphOutput is open.:::return->printer->isOpen
GraphOutput#write(ByteBuffer):::Writes raw bytes into GraphOutput.:::return->printer->write
GraphOutput.Builder#protocolVersion(int, int):::Chooses which version of the protocol to use:::return
GraphOutput.Builder#embedded(boolean):::Sets GraphOutput as embedded:::return
GraphOutput.Builder#types(GraphTypes):::Associates different implementation of types.:::return
GraphOutput.Builder#blocks(GraphBlocks):::Associates implementation of blocks.:::return
GraphOutput.Builder#elements(GraphElements):::Associates implementation of graph elements.:::loc->new->StackLocations<>->return->elementsAndLocations
GraphOutput.Builder#elementsAndLocations(GraphElements, GraphLocations):::Associates implementation of graph elements and an advanced way to interpret their locations.:::both->new->ElementsAndLocations<>->return
GraphOutput.Builder#build(WritableByteChannel):::Creates new GraphOutput to output to provided channel:::return->buildImpl
GraphOutput.Builder#build(GraphOutput):::Support for nesting heterogenous graphs:::return->buildImpl
GraphProtocol#findNode(Object):::Attempts to recognize the provided object as a node:::
GraphProtocol#findNodeClass(Object):::Determines whether the provided object is node class or not.:::
GraphProtocol#findClassForNode(Node):::Returns the NodeClass for a given Node obj.:::
GraphProtocol#findJavaClass(NodeClass):::Find a Java class:::
GraphStructure#graph(G, Object):::Casts obj to graph, if possible:::
GraphStructure#nodes(G):::Nodes of a graph:::
GraphStructure#nodesCount(G):::Number of nodes in a graph:::
GraphStructure#nodeId(N):::Id of node:::
GraphStructure#nodeHasPredecessor(N):::Checks if there is a predecessor for a node.:::
GraphStructure#nodeProperties(G, N, Map):::Collects node properties:::
GraphStructure#node(Object):::Finds a node for obj, if possible:::
GraphStructure#nodeClass(Object):::Finds a node class for obj, if possible:::
GraphStructure#classForNode(N):::Finds a node class for node.:::
GraphStructure#nameTemplate(C):::The template used to build the name of nodes of this class:::
GraphStructure#nodeClassType(C):::Java class for a node class.:::
GraphStructure#portInputs(C):::Input ports of a node class:::
GraphStructure#portOutputs(C):::Output ports of a node class:::
GraphStructure#portSize(P):::The number of edges in a port:::
GraphStructure#edgeDirect(P, int):::Checks whether an edge is direct:::
GraphStructure#edgeName(P, int):::The name of an edge.:::
GraphStructure#edgeType(P, int):::Type of an edge:::
GraphStructure#edgeNodes(G, N, P, int):::Nodes where the edges for a port lead to/from:::
GraphTypes#enumClass(Object):::Recognizes an <q>enum</q> object:::
GraphTypes#enumOrdinal(Object):::Ordinal of an enum:::
GraphTypes#enumTypeValues(Object):::All possible values of an enum:::
GraphTypes#typeName(Object):::Finds Java type name for a given class.:::

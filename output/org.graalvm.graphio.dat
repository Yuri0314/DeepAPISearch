org.graalvm.graphio.DefaultGraphBlocks#empty()->GraphBlocks::: default graph blocks empty
org.graalvm.graphio.DefaultGraphBlocks#blocks(Object)->Collection::: default graph blocks blocks
org.graalvm.graphio.DefaultGraphBlocks#blockId(Object)->int::: default graph blocks block id
org.graalvm.graphio.DefaultGraphBlocks#blockNodes(Object, Object)->Collection::: default graph blocks block nodes
org.graalvm.graphio.DefaultGraphBlocks#blockSuccessors(Object)->Collection::: default graph blocks block successors
org.graalvm.graphio.DefaultGraphTypes#enumClass(Object)->Class::: default graph types enum class
org.graalvm.graphio.DefaultGraphTypes#enumOrdinal(Object)->int::: default graph types enum ordinal
org.graalvm.graphio.DefaultGraphTypes#enumTypeValues(Object)->String[]::: default graph types enum type values
org.graalvm.graphio.DefaultGraphTypes#typeName(Object)->String::: default graph types type name
org.graalvm.graphio.GraphBlocks#blocks(G)->Collection:::All blocks in the graph.
org.graalvm.graphio.GraphBlocks#blockId(B)->int:::Unique id of a block.
org.graalvm.graphio.GraphBlocks#blockNodes(G, B)->Collection::: graph blocks block nodes
org.graalvm.graphio.GraphBlocks#blockSuccessors(B)->Collection::: graph blocks block successors
org.graalvm.graphio.GraphElements#method(Object)->M:::Recognize method
org.graalvm.graphio.GraphElements#methodCode(M)->byte[]:::Bytecode for a method.
org.graalvm.graphio.GraphElements#methodModifiers(M)->int:::Method modifiers.
org.graalvm.graphio.GraphElements#methodSignature(M)->S:::Method's signature.
org.graalvm.graphio.GraphElements#methodName(M)->String:::Method name.
org.graalvm.graphio.GraphElements#methodDeclaringClass(M)->Object:::Method's declaring class
org.graalvm.graphio.GraphElements#field(Object)->F:::Recognizes a field
org.graalvm.graphio.GraphElements#fieldModifiers(F)->int:::Field modifiers.
org.graalvm.graphio.GraphElements#fieldTypeName(F)->String:::Type name of the field.
org.graalvm.graphio.GraphElements#fieldName(F)->String:::Name of a field.
org.graalvm.graphio.GraphElements#fieldDeclaringClass(F)->Object:::Field's declaring class
org.graalvm.graphio.GraphElements#signature(Object)->S:::Recognizes signature
org.graalvm.graphio.GraphElements#signatureParameterCount(S)->int:::Number of parameters of a signature.
org.graalvm.graphio.GraphElements#signatureParameterTypeName(S, int)->String:::Type name of a signature parameter.
org.graalvm.graphio.GraphElements#signatureReturnTypeName(S)->String:::Type name of a return type.
org.graalvm.graphio.GraphElements#nodeSourcePosition(Object)->P:::Recognize a source position
org.graalvm.graphio.GraphElements#nodeSourcePositionMethod(P)->M:::Method for a position.
org.graalvm.graphio.GraphElements#nodeSourcePositionCaller(P)->P:::Caller of a position.
org.graalvm.graphio.GraphElements#nodeSourcePositionBCI(P)->int:::Byte code index of a position.
org.graalvm.graphio.GraphElements#methodStackTraceElement(M, int, P)->StackTraceElement:::Stack trace element for a method, index and position
org.graalvm.graphio.GraphJavadocSnippets#acmeGraphStructure()->GraphStructure::: graph javadoc snippets acme graph structure
org.graalvm.graphio.GraphJavadocSnippets#buildOutput(WritableByteChannel)->GraphOutput::: graph javadoc snippets build output
org.graalvm.graphio.GraphJavadocSnippets#buildAll(WritableByteChannel)->GraphOutput::: graph javadoc snippets build all
org.graalvm.graphio.GraphJavadocSnippets#dump(File)->void::: graph javadoc snippets dump
org.graalvm.graphio.GraphLocations#methodLocation(M, int, P)->Iterable:::Stack trace element for a method, index and position
org.graalvm.graphio.GraphLocations#locationLanguage(L)->String:::Identification of the language
org.graalvm.graphio.GraphLocations#locationURI(L)->URI:::The universal resource identification that contains the location.If the location can be found in an assummably accessible resource, then use such resource identification
org.graalvm.graphio.GraphLocations#locationLineNumber(L)->int:::Line number of a location
org.graalvm.graphio.GraphLocations#locationOffsetStart(L)->int:::Offset of the location
org.graalvm.graphio.GraphLocations#locationOffsetEnd(L)->int:::Offset of the location
org.graalvm.graphio.GraphOutput#newBuilder(GraphStructure)->Builder:::Creates new builder to configure a future instance of GraphOutput.
org.graalvm.graphio.GraphOutput#beginGroup(G, String, String, M, int, Map)->void:::Begins a compilation group.
org.graalvm.graphio.GraphOutput#print(G, Map, int, String, Object...)->void:::Prints a single graph.
org.graalvm.graphio.GraphOutput#endGroup()->void:::Ends compilation group.
org.graalvm.graphio.GraphOutput#close()->void:::Closes the output
org.graalvm.graphio.GraphOutput#isOpen()->boolean:::Checks if the GraphOutput is open.
org.graalvm.graphio.GraphOutput#write(ByteBuffer)->int:::Writes raw bytes into GraphOutput.
org.graalvm.graphio.GraphOutput.Builder#protocolVersion(int, int)->Builder:::Chooses which version of the protocol to use
org.graalvm.graphio.GraphOutput.Builder#embedded(boolean)->Builder:::Sets GraphOutput as embedded
org.graalvm.graphio.GraphOutput.Builder#types(GraphTypes)->Builder:::Associates different implementation of types.
org.graalvm.graphio.GraphOutput.Builder#blocks(GraphBlocks)->Builder:::Associates implementation of blocks.
org.graalvm.graphio.GraphOutput.Builder#elements(GraphElements)->Builder:::Associates implementation of graph elements.
org.graalvm.graphio.GraphOutput.Builder#elementsAndLocations(GraphElements, GraphLocations)->Builder:::Associates implementation of graph elements and an advanced way to interpret their locations.
org.graalvm.graphio.GraphOutput.Builder#build(WritableByteChannel)->GraphOutput:::Creates new GraphOutput to output to provided channel
org.graalvm.graphio.GraphOutput.Builder#build(GraphOutput)->GraphOutput:::Support for nesting heterogenous graphs
org.graalvm.graphio.GraphProtocol#print(Graph, Map, int, String, Object...)->void::: graph protocol print
org.graalvm.graphio.GraphProtocol#beginGroup(Graph, String, String, ResolvedJavaMethod, int, Map)->void::: graph protocol begin group
org.graalvm.graphio.GraphProtocol#endGroup()->void::: graph protocol end group
org.graalvm.graphio.GraphProtocol#write(ByteBuffer)->int::: graph protocol write
org.graalvm.graphio.GraphProtocol#isOpen()->boolean::: graph protocol is open
org.graalvm.graphio.GraphProtocol#close()->void::: graph protocol close
org.graalvm.graphio.GraphProtocol#findGraph(Graph, Object)->Graph::: graph protocol find graph
org.graalvm.graphio.GraphProtocol#findMethod(Object)->ResolvedJavaMethod::: graph protocol find method
org.graalvm.graphio.GraphProtocol#findNode(Object)->Node:::Attempts to recognize the provided object as a node
org.graalvm.graphio.GraphProtocol#findNodeClass(Object)->NodeClass:::Determines whether the provided object is node class or not.
org.graalvm.graphio.GraphProtocol#findClassForNode(Node)->NodeClass:::Returns the NodeClass for a given Node obj.
org.graalvm.graphio.GraphProtocol#findJavaClass(NodeClass)->Object:::Find a Java class
org.graalvm.graphio.GraphProtocol#findEnumClass(Object)->Object::: graph protocol find enum class
org.graalvm.graphio.GraphProtocol#findNameTemplate(NodeClass)->String::: graph protocol find name template
org.graalvm.graphio.GraphProtocol#findClassEdges(NodeClass, boolean)->Edges::: graph protocol find class edges
org.graalvm.graphio.GraphProtocol#findNodeId(Node)->int::: graph protocol find node id
org.graalvm.graphio.GraphProtocol#findExtraNodes(Node, Collection)->void::: graph protocol find extra nodes
org.graalvm.graphio.GraphProtocol#hasPredecessor(Node)->boolean::: graph protocol has predecessor
org.graalvm.graphio.GraphProtocol#findNodesCount(Graph)->int::: graph protocol find nodes count
org.graalvm.graphio.GraphProtocol#findNodes(Graph)->Iterable::: graph protocol find nodes
org.graalvm.graphio.GraphProtocol#findNodeProperties(Node, Map, Graph)->void::: graph protocol find node properties
org.graalvm.graphio.GraphProtocol#findBlockNodes(Graph, Block)->Collection::: graph protocol find block nodes
org.graalvm.graphio.GraphProtocol#findBlockId(Block)->int::: graph protocol find block id
org.graalvm.graphio.GraphProtocol#findBlocks(Graph)->Collection::: graph protocol find blocks
org.graalvm.graphio.GraphProtocol#findBlockSuccessors(Block)->Collection::: graph protocol find block successors
org.graalvm.graphio.GraphProtocol#formatTitle(Graph, int, String, Object...)->String::: graph protocol format title
org.graalvm.graphio.GraphProtocol#findSize(Edges)->int::: graph protocol find size
org.graalvm.graphio.GraphProtocol#isDirect(Edges, int)->boolean::: graph protocol is direct
org.graalvm.graphio.GraphProtocol#findName(Edges, int)->String::: graph protocol find name
org.graalvm.graphio.GraphProtocol#findType(Edges, int)->Object::: graph protocol find type
org.graalvm.graphio.GraphProtocol#findNodes(Graph, Node, Edges, int)->Collection::: graph protocol find nodes
org.graalvm.graphio.GraphProtocol#findEnumOrdinal(Object)->int::: graph protocol find enum ordinal
org.graalvm.graphio.GraphProtocol#findEnumTypeValues(Object)->String[]::: graph protocol find enum type values
org.graalvm.graphio.GraphProtocol#findJavaTypeName(Object)->String::: graph protocol find java type name
org.graalvm.graphio.GraphProtocol#findMethodCode(ResolvedJavaMethod)->byte[]::: graph protocol find method code
org.graalvm.graphio.GraphProtocol#findMethodModifiers(ResolvedJavaMethod)->int::: graph protocol find method modifiers
org.graalvm.graphio.GraphProtocol#findMethodSignature(ResolvedJavaMethod)->Signature::: graph protocol find method signature
org.graalvm.graphio.GraphProtocol#findMethodName(ResolvedJavaMethod)->String::: graph protocol find method name
org.graalvm.graphio.GraphProtocol#findMethodDeclaringClass(ResolvedJavaMethod)->Object::: graph protocol find method declaring class
org.graalvm.graphio.GraphProtocol#findFieldModifiers(ResolvedJavaField)->int::: graph protocol find field modifiers
org.graalvm.graphio.GraphProtocol#findFieldTypeName(ResolvedJavaField)->String::: graph protocol find field type name
org.graalvm.graphio.GraphProtocol#findFieldName(ResolvedJavaField)->String::: graph protocol find field name
org.graalvm.graphio.GraphProtocol#findFieldDeclaringClass(ResolvedJavaField)->Object::: graph protocol find field declaring class
org.graalvm.graphio.GraphProtocol#findJavaField(Object)->ResolvedJavaField::: graph protocol find java field
org.graalvm.graphio.GraphProtocol#findSignature(Object)->Signature::: graph protocol find signature
org.graalvm.graphio.GraphProtocol#findSignatureParameterCount(Signature)->int::: graph protocol find signature parameter count
org.graalvm.graphio.GraphProtocol#findSignatureParameterTypeName(Signature, int)->String::: graph protocol find signature parameter type name
org.graalvm.graphio.GraphProtocol#findSignatureReturnTypeName(Signature)->String::: graph protocol find signature return type name
org.graalvm.graphio.GraphProtocol#findNodeSourcePosition(Object)->NodeSourcePosition::: graph protocol find node source position
org.graalvm.graphio.GraphProtocol#findNodeSourcePositionMethod(NodeSourcePosition)->ResolvedJavaMethod::: graph protocol find node source position method
org.graalvm.graphio.GraphProtocol#findNodeSourcePositionCaller(NodeSourcePosition)->NodeSourcePosition::: graph protocol find node source position caller
org.graalvm.graphio.GraphProtocol#findNodeSourcePositionBCI(NodeSourcePosition)->int::: graph protocol find node source position i
org.graalvm.graphio.GraphProtocol#findLocation(ResolvedJavaMethod, int, NodeSourcePosition)->Iterable::: graph protocol find location
org.graalvm.graphio.GraphProtocol#findLocationFile(Location)->String::: graph protocol find location file
org.graalvm.graphio.GraphProtocol#findLocationLine(Location)->int::: graph protocol find location line
org.graalvm.graphio.GraphProtocol#findLocationURI(Location)->URI::: graph protocol find location i
org.graalvm.graphio.GraphProtocol#findLocationLanguage(Location)->String::: graph protocol find location language
org.graalvm.graphio.GraphProtocol#findLocationStart(Location)->int::: graph protocol find location start
org.graalvm.graphio.GraphProtocol#findLocationEnd(Location)->int::: graph protocol find location end
org.graalvm.graphio.GraphStructure#graph(G, Object)->G:::Casts obj to graph, if possible
org.graalvm.graphio.GraphStructure#nodes(G)->Iterable:::Nodes of a graph
org.graalvm.graphio.GraphStructure#nodesCount(G)->int:::Number of nodes in a graph
org.graalvm.graphio.GraphStructure#nodeId(N)->int:::Id of node
org.graalvm.graphio.GraphStructure#nodeHasPredecessor(N)->boolean:::Checks if there is a predecessor for a node.
org.graalvm.graphio.GraphStructure#nodeProperties(G, N, Map)->void:::Collects node properties
org.graalvm.graphio.GraphStructure#node(Object)->N:::Finds a node for obj, if possible
org.graalvm.graphio.GraphStructure#nodeClass(Object)->C:::Finds a node class for obj, if possible
org.graalvm.graphio.GraphStructure#classForNode(N)->C:::Finds a node class for node.
org.graalvm.graphio.GraphStructure#nameTemplate(C)->String:::The template used to build the name of nodes of this class
org.graalvm.graphio.GraphStructure#nodeClassType(C)->Object:::Java class for a node class.
org.graalvm.graphio.GraphStructure#portInputs(C)->P:::Input ports of a node class
org.graalvm.graphio.GraphStructure#portOutputs(C)->P:::Output ports of a node class
org.graalvm.graphio.GraphStructure#portSize(P)->int:::The number of edges in a port
org.graalvm.graphio.GraphStructure#edgeDirect(P, int)->boolean:::Checks whether an edge is direct
org.graalvm.graphio.GraphStructure#edgeName(P, int)->String:::The name of an edge.
org.graalvm.graphio.GraphStructure#edgeType(P, int)->Object:::Type of an edge
org.graalvm.graphio.GraphStructure#edgeNodes(G, N, P, int)->Collection:::Nodes where the edges for a port lead to/from
org.graalvm.graphio.GraphTypes#enumClass(Object)->Object:::Recognizes an <q>enum</q> object
org.graalvm.graphio.GraphTypes#enumOrdinal(Object)->int:::Ordinal of an enum
org.graalvm.graphio.GraphTypes#enumTypeValues(Object)->String[]:::All possible values of an enum
org.graalvm.graphio.GraphTypes#typeName(Object)->String:::Finds Java type name for a given class.
org.graalvm.graphio.ProtocolImpl#findGraph(Graph, Object)->Graph::: protocol impl find graph
org.graalvm.graphio.ProtocolImpl#findNode(Object)->Node::: protocol impl find node
org.graalvm.graphio.ProtocolImpl#findNodeClass(Object)->NodeClass::: protocol impl find node class
org.graalvm.graphio.ProtocolImpl#findClassForNode(Node)->NodeClass::: protocol impl find class for node
org.graalvm.graphio.ProtocolImpl#findNameTemplate(NodeClass)->String::: protocol impl find name template
org.graalvm.graphio.ProtocolImpl#findNodeId(Node)->int::: protocol impl find node id
org.graalvm.graphio.ProtocolImpl#hasPredecessor(Node)->boolean::: protocol impl has predecessor
org.graalvm.graphio.ProtocolImpl#findNodesCount(Graph)->int::: protocol impl find nodes count
org.graalvm.graphio.ProtocolImpl#findNodes(Graph)->Iterable::: protocol impl find nodes
org.graalvm.graphio.ProtocolImpl#findNodeProperties(Node, Map, Graph)->void::: protocol impl find node properties
org.graalvm.graphio.ProtocolImpl#findClassEdges(NodeClass, boolean)->Port::: protocol impl find class edges
org.graalvm.graphio.ProtocolImpl#findSize(Port)->int::: protocol impl find size
org.graalvm.graphio.ProtocolImpl#isDirect(Port, int)->boolean::: protocol impl is direct
org.graalvm.graphio.ProtocolImpl#findName(Port, int)->String::: protocol impl find name
org.graalvm.graphio.ProtocolImpl#findType(Port, int)->Object::: protocol impl find type
org.graalvm.graphio.ProtocolImpl#findNodes(Graph, Node, Port, int)->Collection::: protocol impl find nodes
org.graalvm.graphio.ProtocolImpl#findJavaClass(NodeClass)->Object::: protocol impl find java class
org.graalvm.graphio.ProtocolImpl#findEnumClass(Object)->Object::: protocol impl find enum class
org.graalvm.graphio.ProtocolImpl#findEnumOrdinal(Object)->int::: protocol impl find enum ordinal
org.graalvm.graphio.ProtocolImpl#findEnumTypeValues(Object)->String[]::: protocol impl find enum type values
org.graalvm.graphio.ProtocolImpl#findJavaTypeName(Object)->String::: protocol impl find java type name
org.graalvm.graphio.ProtocolImpl#findBlockNodes(Graph, Block)->Collection::: protocol impl find block nodes
org.graalvm.graphio.ProtocolImpl#findBlockId(Block)->int::: protocol impl find block id
org.graalvm.graphio.ProtocolImpl#findBlocks(Graph)->Collection::: protocol impl find blocks
org.graalvm.graphio.ProtocolImpl#findBlockSuccessors(Block)->Collection::: protocol impl find block successors
org.graalvm.graphio.ProtocolImpl#findMethod(Object)->ResolvedJavaMethod::: protocol impl find method
org.graalvm.graphio.ProtocolImpl#findMethodCode(ResolvedJavaMethod)->byte[]::: protocol impl find method code
org.graalvm.graphio.ProtocolImpl#findMethodModifiers(ResolvedJavaMethod)->int::: protocol impl find method modifiers
org.graalvm.graphio.ProtocolImpl#findMethodSignature(ResolvedJavaMethod)->Signature::: protocol impl find method signature
org.graalvm.graphio.ProtocolImpl#findMethodName(ResolvedJavaMethod)->String::: protocol impl find method name
org.graalvm.graphio.ProtocolImpl#findMethodDeclaringClass(ResolvedJavaMethod)->Object::: protocol impl find method declaring class
org.graalvm.graphio.ProtocolImpl#findFieldModifiers(ResolvedJavaField)->int::: protocol impl find field modifiers
org.graalvm.graphio.ProtocolImpl#findFieldTypeName(ResolvedJavaField)->String::: protocol impl find field type name
org.graalvm.graphio.ProtocolImpl#findFieldName(ResolvedJavaField)->String::: protocol impl find field name
org.graalvm.graphio.ProtocolImpl#findFieldDeclaringClass(ResolvedJavaField)->Object::: protocol impl find field declaring class
org.graalvm.graphio.ProtocolImpl#findJavaField(Object)->ResolvedJavaField::: protocol impl find java field
org.graalvm.graphio.ProtocolImpl#findSignature(Object)->Signature::: protocol impl find signature
org.graalvm.graphio.ProtocolImpl#findSignatureParameterCount(Signature)->int::: protocol impl find signature parameter count
org.graalvm.graphio.ProtocolImpl#findSignatureParameterTypeName(Signature, int)->String::: protocol impl find signature parameter type name
org.graalvm.graphio.ProtocolImpl#findSignatureReturnTypeName(Signature)->String::: protocol impl find signature return type name
org.graalvm.graphio.ProtocolImpl#findNodeSourcePosition(Object)->NodeSourcePosition::: protocol impl find node source position
org.graalvm.graphio.ProtocolImpl#findNodeSourcePositionMethod(NodeSourcePosition)->ResolvedJavaMethod::: protocol impl find node source position method
org.graalvm.graphio.ProtocolImpl#findNodeSourcePositionCaller(NodeSourcePosition)->NodeSourcePosition::: protocol impl find node source position caller
org.graalvm.graphio.ProtocolImpl#findNodeSourcePositionBCI(NodeSourcePosition)->int::: protocol impl find node source position i
org.graalvm.graphio.ProtocolImpl#findLocation(ResolvedJavaMethod, int, NodeSourcePosition)->Iterable::: protocol impl find location
org.graalvm.graphio.ProtocolImpl#findLocationFile(Location)->String::: protocol impl find location file
org.graalvm.graphio.ProtocolImpl#findLocationLine(Location)->int::: protocol impl find location line
org.graalvm.graphio.ProtocolImpl#findLocationURI(Location)->URI::: protocol impl find location i
org.graalvm.graphio.ProtocolImpl#findLocationLanguage(Location)->String::: protocol impl find location language
org.graalvm.graphio.ProtocolImpl#findLocationStart(Location)->int::: protocol impl find location start
org.graalvm.graphio.ProtocolImpl#findLocationEnd(Location)->int::: protocol impl find location end
org.graalvm.graphio.ProtocolImpl#findExtraNodes(Node, Collection)->void::: protocol impl find extra nodes
org.graalvm.graphio.ProtocolImpl#formatTitle(Graph, int, String, Object...)->String::: protocol impl format title

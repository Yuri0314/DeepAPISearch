Buffer#createSameBufferException():::Returns an IllegalArgumentException indicating that the source and target are the same Buffer:::
Buffer#createCapacityException(int):::Verify that the capacity is nonnegative.:::
Buffer#capacity():::Returns this buffer's capacity.:::
Buffer#position():::Returns this buffer's position.:::
Buffer#position(int):::Sets this buffer's position:::this.createPositionException
Buffer#limit():::Returns this buffer's limit.:::
Buffer#limit(int):::Sets this buffer's limit:::this.createLimitException
Buffer#mark():::Sets this buffer's mark at its position.:::
Buffer#reset():::Resets this buffer's position to the previously-marked position:::
Buffer#clear():::Clears this buffer:::
Buffer#flip():::Flips this buffer:::
Buffer#rewind():::Rewinds this buffer:::
Buffer#remaining():::Returns the number of elements between the current position and the limit.:::
Buffer#hasRemaining():::Tells whether there are any elements between the current position and the limit.:::
Buffer#isReadOnly():::Tells whether or not this buffer is read-only.:::
Buffer#hasArray():::Tells whether or not this buffer is backed by an accessible array:::
Buffer#array():::Returns the array that backs this buffer&nbsp;&nbsp;(optional operation):::
Buffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation):::
Buffer#isDirect():::Tells whether or not this buffer is direct.:::
Buffer#slice():::Creates a new buffer whose content is a shared subsequence of this buffer's content:::
Buffer#duplicate():::Creates a new buffer that shares this buffer's content:::
Buffer#nextGetIndex():::Checks the current position against the limit, throwing a BufferUnderflowException if it is not smaller than the limit, and then increments the position.:::
Buffer#nextPutIndex():::Checks the current position against the limit, throwing a BufferOverflowException if it is not smaller than the limit, and then increments the position.:::
Buffer#checkIndex(int):::Checks the given index against the limit, throwing an IndexOutOfBoundsException if it is not smaller than the limit or is smaller than zero.:::
ByteBuffer#allocateDirect(int):::Allocates a new direct byte buffer:::
ByteBuffer#allocate(int):::Allocates a new byte buffer:::this.createCapacityException
ByteBuffer#wrap(byte[], int, int):::Wraps a byte array into a buffer:::
ByteBuffer#wrap(byte[]):::Wraps a byte array into a buffer:::this.wrap
ByteBuffer#slice():::Creates a new byte buffer whose content is a shared subsequence of this buffer's content:::
ByteBuffer#duplicate():::Creates a new byte buffer that shares this buffer's content:::
ByteBuffer#asReadOnlyBuffer():::Creates a new, read-only byte buffer that shares this buffer's content:::
ByteBuffer#get():::Relative get method:::
ByteBuffer#put(byte):::Relative put method&nbsp;&nbsp;(optional operation):::
ByteBuffer#get(int):::Absolute get method:::
ByteBuffer#put(int, byte):::Absolute put method&nbsp;&nbsp;(optional operation):::
ByteBuffer#get(byte[], int, int):::Relative bulk get method:::this.checkBounds->this.remaining->this.get
ByteBuffer#get(byte[]):::Relative bulk get method:::this.get
ByteBuffer#put(ByteBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.createSameBufferException->this.isReadOnly->src.remaining->this.remaining->src.get->this.put
ByteBuffer#put(byte[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.checkBounds->this.remaining->this.put
ByteBuffer#put(byte[]):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.put
ByteBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible byte array:::
ByteBuffer#array():::Returns the byte array that backs this buffer&nbsp;&nbsp;(optional operation):::
ByteBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation):::
ByteBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation):::
ByteBuffer#isDirect():::Tells whether or not this byte buffer is direct.:::
ByteBuffer#toString():::Returns a string summarizing the state of this buffer.:::getClass().getName->sb.append->sb.append->this.position->sb.append->sb.append->this.limit->sb.append->sb.append->this.capacity->sb.append->sb.append->sb.toString
ByteBuffer#hashCode():::Returns the current hash code of this buffer:::this.position->this.get->this.limit
ByteBuffer#equals(Object):::Tells whether or not this buffer is equal to another object:::this.remaining->that.remaining->this.position->that.position->this.remaining->BufferMismatch.mismatch
ByteBuffer#compareTo(ByteBuffer):::Compares this buffer to another:::this.position->that.position->this.remaining->that.remaining->Math.min->BufferMismatch.mismatch->this.position->this.get->that.position->that.get->this.compare->this.remaining->that.remaining
ByteBuffer#mismatch(ByteBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer:::this.remaining->that.remaining->Math.min->this.position->that.position->BufferMismatch.mismatch->this.remaining->that.remaining
ByteBuffer#order():::Retrieves this buffer's byte order:::
ByteBuffer#order(ByteOrder):::Modifies this buffer's byte order.:::ByteOrder.nativeOrder
ByteBuffer#alignmentOffset(int, int):::Returns the memory address, pointing to the byte at the given index, modulus the given unit size:::this.isDirect
ByteBuffer#alignedSlice(int):::Creates a new byte buffer whose content is a shared and aligned subsequence of this buffer's content:::this.position->this.limit->this.alignmentOffset->this.alignmentOffset->this.slice
ByteBuffer#getChar():::Relative get method for reading a char value:::
ByteBuffer#putChar(char):::Relative put method for writing a char value&nbsp;&nbsp;(optional operation):::
ByteBuffer#getChar(int):::Absolute get method for reading a char value:::
ByteBuffer#putChar(int, char):::Absolute put method for writing a char value&nbsp;&nbsp;(optional operation):::
ByteBuffer#asCharBuffer():::Creates a view of this byte buffer as a char buffer:::
ByteBuffer#getShort():::Relative get method for reading a short value:::
ByteBuffer#putShort(short):::Relative put method for writing a short value&nbsp;&nbsp;(optional operation):::
ByteBuffer#getShort(int):::Absolute get method for reading a short value:::
ByteBuffer#putShort(int, short):::Absolute put method for writing a short value&nbsp;&nbsp;(optional operation):::
ByteBuffer#asShortBuffer():::Creates a view of this byte buffer as a short buffer:::
ByteBuffer#getInt():::Relative get method for reading an int value:::
ByteBuffer#putInt(int):::Relative put method for writing an int value&nbsp;&nbsp;(optional operation):::
ByteBuffer#getInt(int):::Absolute get method for reading an int value:::
ByteBuffer#putInt(int, int):::Absolute put method for writing an int value&nbsp;&nbsp;(optional operation):::
ByteBuffer#asIntBuffer():::Creates a view of this byte buffer as an int buffer:::
ByteBuffer#getLong():::Relative get method for reading a long value:::
ByteBuffer#putLong(long):::Relative put method for writing a long value&nbsp;&nbsp;(optional operation):::
ByteBuffer#getLong(int):::Absolute get method for reading a long value:::
ByteBuffer#putLong(int, long):::Absolute put method for writing a long value&nbsp;&nbsp;(optional operation):::
ByteBuffer#asLongBuffer():::Creates a view of this byte buffer as a long buffer:::
ByteBuffer#getFloat():::Relative get method for reading a float value:::
ByteBuffer#putFloat(float):::Relative put method for writing a float value&nbsp;&nbsp;(optional operation):::
ByteBuffer#getFloat(int):::Absolute get method for reading a float value:::
ByteBuffer#putFloat(int, float):::Absolute put method for writing a float value&nbsp;&nbsp;(optional operation):::
ByteBuffer#asFloatBuffer():::Creates a view of this byte buffer as a float buffer:::
ByteBuffer#getDouble():::Relative get method for reading a double value:::
ByteBuffer#putDouble(double):::Relative put method for writing a double value&nbsp;&nbsp;(optional operation):::
ByteBuffer#getDouble(int):::Absolute get method for reading a double value:::
ByteBuffer#putDouble(int, double):::Absolute put method for writing a double value&nbsp;&nbsp;(optional operation):::
ByteBuffer#asDoubleBuffer():::Creates a view of this byte buffer as a double buffer:::
ByteOrder#nativeOrder():::Retrieves the native byte order of the underlying platform:::
ByteOrder#toString():::Constructs a string describing this object:::
CharBuffer#allocate(int):::Allocates a new char buffer:::this.createCapacityException
CharBuffer#wrap(char[], int, int):::Wraps a char array into a buffer:::
CharBuffer#wrap(char[]):::Wraps a char array into a buffer:::this.wrap
CharBuffer#read(CharBuffer):::Attempts to read characters into the specified character buffer:::target.remaining->this.remaining->Math.min->this.limit->this.position->this.limit->this.limit->target.put
CharBuffer#wrap(CharSequence, int, int):::Wraps a character sequence into a buffer:::
CharBuffer#wrap(CharSequence):::Wraps a character sequence into a buffer:::csq.length->this.wrap
CharBuffer#slice():::Creates a new char buffer whose content is a shared subsequence of this buffer's content:::
CharBuffer#duplicate():::Creates a new char buffer that shares this buffer's content:::
CharBuffer#asReadOnlyBuffer():::Creates a new, read-only char buffer that shares this buffer's content:::
CharBuffer#get():::Relative get method:::
CharBuffer#put(char):::Relative put method&nbsp;&nbsp;(optional operation):::
CharBuffer#get(int):::Absolute get method:::
CharBuffer#put(int, char):::Absolute put method&nbsp;&nbsp;(optional operation):::
CharBuffer#get(char[], int, int):::Relative bulk get method:::this.checkBounds->this.remaining->this.get
CharBuffer#get(char[]):::Relative bulk get method:::this.get
CharBuffer#put(CharBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.createSameBufferException->this.isReadOnly->src.remaining->this.remaining->src.get->this.put
CharBuffer#put(char[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.checkBounds->this.remaining->this.put
CharBuffer#put(char[]):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.put
CharBuffer#put(String, int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation):::src.length->this.checkBounds->this.isReadOnly->this.remaining->src.charAt->this.put
CharBuffer#put(String):::Relative bulk put method&nbsp;&nbsp;(optional operation):::src.length->this.put
CharBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible char array:::
CharBuffer#array():::Returns the char array that backs this buffer&nbsp;&nbsp;(optional operation):::
CharBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation):::
CharBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation):::
CharBuffer#isDirect():::Tells whether or not this char buffer is direct.:::
CharBuffer#hashCode():::Returns the current hash code of this buffer:::this.position->this.get->this.limit
CharBuffer#equals(Object):::Tells whether or not this buffer is equal to another object:::this.remaining->that.remaining->this.position->that.position->this.remaining->BufferMismatch.mismatch
CharBuffer#compareTo(CharBuffer):::Compares this buffer to another:::this.position->that.position->this.remaining->that.remaining->Math.min->BufferMismatch.mismatch->this.position->this.get->that.position->that.get->this.compare->this.remaining->that.remaining
CharBuffer#mismatch(CharBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer:::this.remaining->that.remaining->Math.min->this.position->that.position->BufferMismatch.mismatch->this.remaining->that.remaining
CharBuffer#toString():::Returns a string containing the characters in this buffer:::this.position->this.limit->this.toString
CharBuffer#length():::Returns the length of this character buffer:::this.remaining
CharBuffer#charAt(int):::Reads the character at the given index relative to the current position.:::this.position->this.checkIndex->this.get
CharBuffer#subSequence(int, int):::Creates a new character buffer that represents the specified subsequence of this buffer, relative to the current position:::
CharBuffer#append(CharSequence):::Appends the specified character sequence  to this buffer&nbsp;&nbsp;(optional operation):::csq.toString->this.put->this.put
CharBuffer#append(CharSequence, int, int):::Appends a subsequence of the  specified character sequence  to this buffer&nbsp;&nbsp;(optional operation):::cs.subSequence(start, end).toString->this.put
CharBuffer#append(char):::Appends the specified char  to this buffer&nbsp;&nbsp;(optional operation):::this.put
CharBuffer#order():::Retrieves this buffer's byte order:::
DoubleBuffer#allocate(int):::Allocates a new double buffer:::this.createCapacityException
DoubleBuffer#wrap(double[], int, int):::Wraps a double array into a buffer:::
DoubleBuffer#wrap(double[]):::Wraps a double array into a buffer:::this.wrap
DoubleBuffer#slice():::Creates a new double buffer whose content is a shared subsequence of this buffer's content:::
DoubleBuffer#duplicate():::Creates a new double buffer that shares this buffer's content:::
DoubleBuffer#asReadOnlyBuffer():::Creates a new, read-only double buffer that shares this buffer's content:::
DoubleBuffer#get():::Relative get method:::
DoubleBuffer#put(double):::Relative put method&nbsp;&nbsp;(optional operation):::
DoubleBuffer#get(int):::Absolute get method:::
DoubleBuffer#put(int, double):::Absolute put method&nbsp;&nbsp;(optional operation):::
DoubleBuffer#get(double[], int, int):::Relative bulk get method:::this.checkBounds->this.remaining->this.get
DoubleBuffer#get(double[]):::Relative bulk get method:::this.get
DoubleBuffer#put(DoubleBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.createSameBufferException->this.isReadOnly->src.remaining->this.remaining->src.get->this.put
DoubleBuffer#put(double[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.checkBounds->this.remaining->this.put
DoubleBuffer#put(double[]):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.put
DoubleBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible double array:::
DoubleBuffer#array():::Returns the double array that backs this buffer&nbsp;&nbsp;(optional operation):::
DoubleBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation):::
DoubleBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation):::
DoubleBuffer#isDirect():::Tells whether or not this double buffer is direct.:::
DoubleBuffer#toString():::Returns a string summarizing the state of this buffer.:::getClass().getName->sb.append->sb.append->this.position->sb.append->sb.append->this.limit->sb.append->sb.append->this.capacity->sb.append->sb.append->sb.toString
DoubleBuffer#hashCode():::Returns the current hash code of this buffer:::this.position->this.get->this.limit
DoubleBuffer#equals(Object):::Tells whether or not this buffer is equal to another object:::this.remaining->that.remaining->this.position->that.position->this.remaining->BufferMismatch.mismatch
DoubleBuffer#compareTo(DoubleBuffer):::Compares this buffer to another:::this.position->that.position->this.remaining->that.remaining->Math.min->BufferMismatch.mismatch->this.position->this.get->that.position->that.get->this.compare->this.remaining->that.remaining
DoubleBuffer#mismatch(DoubleBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer:::this.remaining->that.remaining->Math.min->this.position->that.position->BufferMismatch.mismatch->this.remaining->that.remaining
DoubleBuffer#order():::Retrieves this buffer's byte order:::
FloatBuffer#allocate(int):::Allocates a new float buffer:::this.createCapacityException
FloatBuffer#wrap(float[], int, int):::Wraps a float array into a buffer:::
FloatBuffer#wrap(float[]):::Wraps a float array into a buffer:::this.wrap
FloatBuffer#slice():::Creates a new float buffer whose content is a shared subsequence of this buffer's content:::
FloatBuffer#duplicate():::Creates a new float buffer that shares this buffer's content:::
FloatBuffer#asReadOnlyBuffer():::Creates a new, read-only float buffer that shares this buffer's content:::
FloatBuffer#get():::Relative get method:::
FloatBuffer#put(float):::Relative put method&nbsp;&nbsp;(optional operation):::
FloatBuffer#get(int):::Absolute get method:::
FloatBuffer#put(int, float):::Absolute put method&nbsp;&nbsp;(optional operation):::
FloatBuffer#get(float[], int, int):::Relative bulk get method:::this.checkBounds->this.remaining->this.get
FloatBuffer#get(float[]):::Relative bulk get method:::this.get
FloatBuffer#put(FloatBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.createSameBufferException->this.isReadOnly->src.remaining->this.remaining->src.get->this.put
FloatBuffer#put(float[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.checkBounds->this.remaining->this.put
FloatBuffer#put(float[]):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.put
FloatBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible float array:::
FloatBuffer#array():::Returns the float array that backs this buffer&nbsp;&nbsp;(optional operation):::
FloatBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation):::
FloatBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation):::
FloatBuffer#isDirect():::Tells whether or not this float buffer is direct.:::
FloatBuffer#toString():::Returns a string summarizing the state of this buffer.:::getClass().getName->sb.append->sb.append->this.position->sb.append->sb.append->this.limit->sb.append->sb.append->this.capacity->sb.append->sb.append->sb.toString
FloatBuffer#hashCode():::Returns the current hash code of this buffer:::this.position->this.get->this.limit
FloatBuffer#equals(Object):::Tells whether or not this buffer is equal to another object:::this.remaining->that.remaining->this.position->that.position->this.remaining->BufferMismatch.mismatch
FloatBuffer#compareTo(FloatBuffer):::Compares this buffer to another:::this.position->that.position->this.remaining->that.remaining->Math.min->BufferMismatch.mismatch->this.position->this.get->that.position->that.get->this.compare->this.remaining->that.remaining
FloatBuffer#mismatch(FloatBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer:::this.remaining->that.remaining->Math.min->this.position->that.position->BufferMismatch.mismatch->this.remaining->that.remaining
FloatBuffer#order():::Retrieves this buffer's byte order:::
IntBuffer#allocate(int):::Allocates a new int buffer:::this.createCapacityException
IntBuffer#wrap(int[], int, int):::Wraps an int array into a buffer:::
IntBuffer#wrap(int[]):::Wraps an int array into a buffer:::this.wrap
IntBuffer#slice():::Creates a new int buffer whose content is a shared subsequence of this buffer's content:::
IntBuffer#duplicate():::Creates a new int buffer that shares this buffer's content:::
IntBuffer#asReadOnlyBuffer():::Creates a new, read-only int buffer that shares this buffer's content:::
IntBuffer#get():::Relative get method:::
IntBuffer#put(int):::Relative put method&nbsp;&nbsp;(optional operation):::
IntBuffer#get(int):::Absolute get method:::
IntBuffer#put(int, int):::Absolute put method&nbsp;&nbsp;(optional operation):::
IntBuffer#get(int[], int, int):::Relative bulk get method:::this.checkBounds->this.remaining->this.get
IntBuffer#get(int[]):::Relative bulk get method:::this.get
IntBuffer#put(IntBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.createSameBufferException->this.isReadOnly->src.remaining->this.remaining->src.get->this.put
IntBuffer#put(int[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.checkBounds->this.remaining->this.put
IntBuffer#put(int[]):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.put
IntBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible int array:::
IntBuffer#array():::Returns the int array that backs this buffer&nbsp;&nbsp;(optional operation):::
IntBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation):::
IntBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation):::
IntBuffer#isDirect():::Tells whether or not this int buffer is direct.:::
IntBuffer#toString():::Returns a string summarizing the state of this buffer.:::getClass().getName->sb.append->sb.append->this.position->sb.append->sb.append->this.limit->sb.append->sb.append->this.capacity->sb.append->sb.append->sb.toString
IntBuffer#hashCode():::Returns the current hash code of this buffer:::this.position->this.get->this.limit
IntBuffer#equals(Object):::Tells whether or not this buffer is equal to another object:::this.remaining->that.remaining->this.position->that.position->this.remaining->BufferMismatch.mismatch
IntBuffer#compareTo(IntBuffer):::Compares this buffer to another:::this.position->that.position->this.remaining->that.remaining->Math.min->BufferMismatch.mismatch->this.position->this.get->that.position->that.get->this.compare->this.remaining->that.remaining
IntBuffer#mismatch(IntBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer:::this.remaining->that.remaining->Math.min->this.position->that.position->BufferMismatch.mismatch->this.remaining->that.remaining
IntBuffer#order():::Retrieves this buffer's byte order:::
LongBuffer#allocate(int):::Allocates a new long buffer:::this.createCapacityException
LongBuffer#wrap(long[], int, int):::Wraps a long array into a buffer:::
LongBuffer#wrap(long[]):::Wraps a long array into a buffer:::this.wrap
LongBuffer#slice():::Creates a new long buffer whose content is a shared subsequence of this buffer's content:::
LongBuffer#duplicate():::Creates a new long buffer that shares this buffer's content:::
LongBuffer#asReadOnlyBuffer():::Creates a new, read-only long buffer that shares this buffer's content:::
LongBuffer#get():::Relative get method:::
LongBuffer#put(long):::Relative put method&nbsp;&nbsp;(optional operation):::
LongBuffer#get(int):::Absolute get method:::
LongBuffer#put(int, long):::Absolute put method&nbsp;&nbsp;(optional operation):::
LongBuffer#get(long[], int, int):::Relative bulk get method:::this.checkBounds->this.remaining->this.get
LongBuffer#get(long[]):::Relative bulk get method:::this.get
LongBuffer#put(LongBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.createSameBufferException->this.isReadOnly->src.remaining->this.remaining->src.get->this.put
LongBuffer#put(long[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.checkBounds->this.remaining->this.put
LongBuffer#put(long[]):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.put
LongBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible long array:::
LongBuffer#array():::Returns the long array that backs this buffer&nbsp;&nbsp;(optional operation):::
LongBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation):::
LongBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation):::
LongBuffer#isDirect():::Tells whether or not this long buffer is direct.:::
LongBuffer#toString():::Returns a string summarizing the state of this buffer.:::getClass().getName->sb.append->sb.append->this.position->sb.append->sb.append->this.limit->sb.append->sb.append->this.capacity->sb.append->sb.append->sb.toString
LongBuffer#hashCode():::Returns the current hash code of this buffer:::this.position->this.get->this.limit
LongBuffer#equals(Object):::Tells whether or not this buffer is equal to another object:::this.remaining->that.remaining->this.position->that.position->this.remaining->BufferMismatch.mismatch
LongBuffer#compareTo(LongBuffer):::Compares this buffer to another:::this.position->that.position->this.remaining->that.remaining->Math.min->BufferMismatch.mismatch->this.position->this.get->that.position->that.get->this.compare->this.remaining->that.remaining
LongBuffer#mismatch(LongBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer:::this.remaining->that.remaining->Math.min->this.position->that.position->BufferMismatch.mismatch->this.remaining->that.remaining
LongBuffer#order():::Retrieves this buffer's byte order:::
MappedByteBuffer#isLoaded():::Tells whether or not this buffer's content is resident in physical memory:::this.capacity->this.mappingOffset->this.mappingLength->this.mappingAddress->Bits.pageCount->this.isLoaded0
MappedByteBuffer#load():::Loads this buffer's content into physical memory:::this.capacity->this.mappingOffset->this.mappingLength->this.mappingAddress->this.load0->Unsafe.getUnsafe->Bits.pageSize->Bits.pageCount->this.mappingAddress->Reference.reachabilityFence->unsafe.getByte
MappedByteBuffer#force():::Forces any changes made to this buffer's content to be written to the storage device containing the mapped file:::this.capacity->this.mappingOffset->this.mappingAddress->this.mappingLength->this.force0
ShortBuffer#allocate(int):::Allocates a new short buffer:::this.createCapacityException
ShortBuffer#wrap(short[], int, int):::Wraps a short array into a buffer:::
ShortBuffer#wrap(short[]):::Wraps a short array into a buffer:::this.wrap
ShortBuffer#slice():::Creates a new short buffer whose content is a shared subsequence of this buffer's content:::
ShortBuffer#duplicate():::Creates a new short buffer that shares this buffer's content:::
ShortBuffer#asReadOnlyBuffer():::Creates a new, read-only short buffer that shares this buffer's content:::
ShortBuffer#get():::Relative get method:::
ShortBuffer#put(short):::Relative put method&nbsp;&nbsp;(optional operation):::
ShortBuffer#get(int):::Absolute get method:::
ShortBuffer#put(int, short):::Absolute put method&nbsp;&nbsp;(optional operation):::
ShortBuffer#get(short[], int, int):::Relative bulk get method:::this.checkBounds->this.remaining->this.get
ShortBuffer#get(short[]):::Relative bulk get method:::this.get
ShortBuffer#put(ShortBuffer):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.createSameBufferException->this.isReadOnly->src.remaining->this.remaining->src.get->this.put
ShortBuffer#put(short[], int, int):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.checkBounds->this.remaining->this.put
ShortBuffer#put(short[]):::Relative bulk put method&nbsp;&nbsp;(optional operation):::this.put
ShortBuffer#hasArray():::Tells whether or not this buffer is backed by an accessible short array:::
ShortBuffer#array():::Returns the short array that backs this buffer&nbsp;&nbsp;(optional operation):::
ShortBuffer#arrayOffset():::Returns the offset within this buffer's backing array of the first element of the buffer&nbsp;&nbsp;(optional operation):::
ShortBuffer#compact():::Compacts this buffer&nbsp;&nbsp;(optional operation):::
ShortBuffer#isDirect():::Tells whether or not this short buffer is direct.:::
ShortBuffer#toString():::Returns a string summarizing the state of this buffer.:::getClass().getName->sb.append->sb.append->this.position->sb.append->sb.append->this.limit->sb.append->sb.append->this.capacity->sb.append->sb.append->sb.toString
ShortBuffer#hashCode():::Returns the current hash code of this buffer:::this.position->this.get->this.limit
ShortBuffer#equals(Object):::Tells whether or not this buffer is equal to another object:::this.remaining->that.remaining->this.position->that.position->this.remaining->BufferMismatch.mismatch
ShortBuffer#compareTo(ShortBuffer):::Compares this buffer to another:::this.position->that.position->this.remaining->that.remaining->Math.min->BufferMismatch.mismatch->this.position->this.get->that.position->that.get->this.compare->this.remaining->that.remaining
ShortBuffer#mismatch(ShortBuffer):::Finds and returns the relative index of the first mismatch between this buffer and a given buffer:::this.remaining->that.remaining->Math.min->this.position->that.position->BufferMismatch.mismatch->this.remaining->that.remaining
ShortBuffer#order():::Retrieves this buffer's byte order:::

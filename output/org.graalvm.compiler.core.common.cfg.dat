AbstractBlockBase#getDominatorDepth():::Level in the dominator tree starting with 0 for the start block.:::return
AbstractControlFlowGraph#getBlocks():::Returns the list blocks contained in this control flow graph:::
AbstractControlFlowGraph#isDominatedBy(AbstractBlockBase, AbstractBlockBase):::True if block a is dominated by block b.:::domNumberA->a->getDominatorNumber->domNumberB->b->getDominatorNumber->return->b->getMaxChildDominatorNumber
AbstractControlFlowGraph#strictlyDominates(AbstractBlockBase, AbstractBlockBase):::True if block a dominates block b and a is not identical block to b.:::return->dominates
AbstractControlFlowGraph#dominates(AbstractBlockBase, AbstractBlockBase):::True if block a dominates block b.:::return->isDominatedBy
AbstractControlFlowGraph#commonDominator(AbstractBlockBase, AbstractBlockBase):::Calculates the common dominator of two blocks:::if->return->else->if->return->else->if->return->else->aDomDepth->a->getDominatorDepth->bDomDepth->b->getDominatorDepth->aTemp->bTemp->if->else->return->commonDominatorHelper
DominatorOptimizationProblem#set(E, AbstractBlockBase):::Sets a flag for a block.:::bitSet->flags->get->if->new->BitSet->flags->put->bitSet->block->getId->set
DominatorOptimizationProblem#get(E, AbstractBlockBase):::Checks whether a flag is set for a block.:::bitSet->flags->get->return->bitSet->block->getId->get
DominatorOptimizationProblem#stream(E):::Returns a Stream of blocks for which flag is set.:::return->Arrays->getBlocks->asList->stream->get->filter
DominatorOptimizationProblem#getCost(AbstractBlockBase):::Returns the cost object associated with block:::cost->costs->get->return
DominatorOptimizationProblem#setCost(AbstractBlockBase, C):::Sets the cost for a block.:::costs->put
DominatorOptimizationProblem#setDominatorPath(E, AbstractBlockBase):::Sets flag for all blocks along the dominator path from block to the root until a block it finds a block where flag is already set.:::bitSet->flags->get->if->new->BitSet->flags->put->for->b->bitSet->b->getId->get->b->getDominator
DominatorOptimizationProblem#getFlagsForBlock(AbstractBlockBase):::Returns a Stream of flags associated with block.:::return->getFlags->stream->get->filter
DominatorOptimizationProblem#getFlags():::Returns the Set of flags that can be set for this DominatorOptimizationProblem problem.:::return->flags->keySet
DominatorOptimizationProblem#getName(E):::Returns the name of a flag.:::return->flag->toString
Loop#getLoopExits():::Returns the loop exits:::return
Loop#getNaturalExits():::Returns the natural exit points: these are the earliest block that are guaranteed to never reach a back-edge:::return
Loop#transitiveParentLoop(Loop, Loop):::Determines if one loop is a transitive parent of another loop.:::curr->while->if->return->curr->getParent->return
PrintableCFG#forEachPropertyPair(AbstractBlockBase, BiConsumer):::Applies action to all extra property pairs (name, value) of block.:::

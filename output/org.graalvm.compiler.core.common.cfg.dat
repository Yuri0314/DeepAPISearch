org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setDominatorNumber(int)->void::: abstract block base set dominator number
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setMaxChildDomNumber(int)->void::: abstract block base set max child dom number
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getDominatorNumber()->int::: abstract block base get dominator number
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getMaxChildDominatorNumber()->int::: abstract block base get max child dominator number
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getId()->int::: abstract block base get id
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setId(int)->void::: abstract block base set id
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getPredecessors()->T[]::: abstract block base get predecessors
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setPredecessors(T[])->void::: abstract block base set predecessors
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getSuccessors()->T[]::: abstract block base get successors
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setSuccessors(T[])->void::: abstract block base set successors
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getDominator()->T::: abstract block base get dominator
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setDominator(T)->void::: abstract block base set dominator
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getDominatorDepth()->int:::Level in the dominator tree starting with 0 for the start block.
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getFirstDominated()->T::: abstract block base get first dominated
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setFirstDominated(T)->void::: abstract block base set first dominated
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getDominatedSibling()->T::: abstract block base get dominated sibling
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setDominatedSibling(T)->void::: abstract block base set dominated sibling
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#toString()->String::: abstract block base to string
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getPredecessorCount()->int::: abstract block base get predecessor count
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getSuccessorCount()->int::: abstract block base get successor count
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getLinearScanNumber()->int::: abstract block base get linear scan number
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setLinearScanNumber(int)->void::: abstract block base set linear scan number
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#isAligned()->boolean::: abstract block base is aligned
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#setAlign(boolean)->void::: abstract block base set align
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#isExceptionEntry()->boolean::: abstract block base is exception entry
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getLoop()->Loop::: abstract block base get loop
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getLoopDepth()->int::: abstract block base get loop depth
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#delete()->void::: abstract block base delete
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#isLoopEnd()->boolean::: abstract block base is loop end
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#isLoopHeader()->boolean::: abstract block base is loop header
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getPostdominator()->T::: abstract block base get postdominator
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getRelativeFrequency()->double::: abstract block base get relative frequency
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#getDominator(int)->T::: abstract block base get dominator
org.graalvm.compiler.core.common.cfg.AbstractBlockBase#hashCode()->int::: abstract block base hash code
org.graalvm.compiler.core.common.cfg.AbstractBlockBase.BlockIdComparator#compare(AbstractBlockBase, AbstractBlockBase)->int::: block id comparator compare
org.graalvm.compiler.core.common.cfg.AbstractControlFlowGraph#getBlocks()->T[]:::Returns the list blocks contained in this control flow graph
org.graalvm.compiler.core.common.cfg.AbstractControlFlowGraph#getLoops()->Collection>::: abstract control flow graph get loops
org.graalvm.compiler.core.common.cfg.AbstractControlFlowGraph#getStartBlock()->T::: abstract control flow graph get start block
org.graalvm.compiler.core.common.cfg.AbstractControlFlowGraph#isDominatedBy(AbstractBlockBase, AbstractBlockBase)->boolean:::True if block a is dominated by block b.
org.graalvm.compiler.core.common.cfg.AbstractControlFlowGraph#strictlyDominates(AbstractBlockBase, AbstractBlockBase)->boolean:::True if block a dominates block b and a is not identical block to b.
org.graalvm.compiler.core.common.cfg.AbstractControlFlowGraph#dominates(AbstractBlockBase, AbstractBlockBase)->boolean:::True if block a dominates block b.
org.graalvm.compiler.core.common.cfg.AbstractControlFlowGraph#commonDominator(AbstractBlockBase, AbstractBlockBase)->AbstractBlockBase:::Calculates the common dominator of two blocks
org.graalvm.compiler.core.common.cfg.AbstractControlFlowGraph#commonDominatorHelper(AbstractBlockBase, AbstractBlockBase)->AbstractBlockBase::: abstract control flow graph common dominator helper
org.graalvm.compiler.core.common.cfg.AbstractControlFlowGraph#commonDominatorTyped(T, T)->T::: abstract control flow graph common dominator typed
org.graalvm.compiler.core.common.cfg.BlockMap#get(AbstractBlockBase)->T::: block map get
org.graalvm.compiler.core.common.cfg.BlockMap#put(AbstractBlockBase, T)->void::: block map put
org.graalvm.compiler.core.common.cfg.CFGVerifier#verify(C)->boolean::: verifier verify
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#getBlocks()->AbstractBlockBase[]::: dominator optimization problem get blocks
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#getBlockForId(int)->AbstractBlockBase::: dominator optimization problem get block for id
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#set(E, AbstractBlockBase)->void:::Sets a flag for a block.
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#get(E, AbstractBlockBase)->boolean:::Checks whether a flag is set for a block.
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#stream(E)->Stream>:::Returns a Stream of blocks for which flag is set.
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#getCost(AbstractBlockBase)->C:::Returns the cost object associated with block
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#setCost(AbstractBlockBase, C)->void:::Sets the cost for a block.
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#setDominatorPath(E, AbstractBlockBase)->void:::Sets flag for all blocks along the dominator path from block to the root until a block it finds a block where flag is already set.
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#getFlagsForBlock(AbstractBlockBase)->Stream:::Returns a Stream of flags associated with block.
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#getFlags()->Set:::Returns the Set of flags that can be set for this DominatorOptimizationProblem problem.
org.graalvm.compiler.core.common.cfg.DominatorOptimizationProblem#getName(E)->String:::Returns the name of a flag.
org.graalvm.compiler.core.common.cfg.Loop#numBackedges()->long::: loop num backedges
org.graalvm.compiler.core.common.cfg.Loop#toString()->String::: loop to string
org.graalvm.compiler.core.common.cfg.Loop#getParent()->Loop::: loop get parent
org.graalvm.compiler.core.common.cfg.Loop#getChildren()->List>::: loop get children
org.graalvm.compiler.core.common.cfg.Loop#getDepth()->int::: loop get depth
org.graalvm.compiler.core.common.cfg.Loop#getIndex()->int::: loop get index
org.graalvm.compiler.core.common.cfg.Loop#getHeader()->T::: loop get header
org.graalvm.compiler.core.common.cfg.Loop#getBlocks()->List::: loop get blocks
org.graalvm.compiler.core.common.cfg.Loop#getLoopExits()->List:::Returns the loop exits
org.graalvm.compiler.core.common.cfg.Loop#isLoopExit(T)->boolean::: loop is loop exit
org.graalvm.compiler.core.common.cfg.Loop#getNaturalExits()->ArrayList:::Returns the natural exit points: these are the earliest block that are guaranteed to never reach a back-edge
org.graalvm.compiler.core.common.cfg.Loop#isNaturalExit(T)->boolean::: loop is natural exit
org.graalvm.compiler.core.common.cfg.Loop#transitiveParentLoop(Loop, Loop)->boolean:::Determines if one loop is a transitive parent of another loop.
org.graalvm.compiler.core.common.cfg.Loop#hashCode()->int::: loop hash code
org.graalvm.compiler.core.common.cfg.Loop#equals(Object)->boolean::: loop equals
org.graalvm.compiler.core.common.cfg.PrintableCFG#getBlocks()->AbstractBlockBase[]::: printable g get blocks
org.graalvm.compiler.core.common.cfg.PrintableCFG#forEachPropertyPair(AbstractBlockBase, BiConsumer)->void:::Applies action to all extra property pairs (name, value) of block.
org.graalvm.compiler.core.common.cfg.PrintableDominatorOptimizationProblem#forEachPropertyPair(AbstractBlockBase, BiConsumer)->void::: printable dominator optimization problem for each property pair
org.graalvm.compiler.core.common.cfg.PropertyConsumable#forEachProperty(BiConsumer)->void::: property consumable for each property

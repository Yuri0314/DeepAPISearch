HotSpotNarrowOopStamp#copyWith(ResolvedJavaType, boolean, boolean, boolean)::: hot spot narrow oop stamp copy with:::return->getEncoding->new->HotSpotNarrowOopStamp
HotSpotNarrowOopStamp#compressed(AbstractObjectStamp, CompressEncoding)::: hot spot narrow oop stamp compressed:::return->stamp->type->stamp->isExactType->stamp->nonNull->stamp->alwaysNull->new->HotSpotNarrowOopStamp
HotSpotNarrowOopStamp#readConstant(MemoryAccessProvider, Constant, long)::: hot spot narrow oop stamp read constant:::try->hsProvider->return->hsProvider->readNarrowOopConstant->catch->return->finally
HotSpotNarrowOopStamp#nullConstant()::: hot spot narrow oop stamp null constant:::return
HotSpotNarrowOopStamp#isCompatible(Constant)::: hot spot narrow oop stamp is compatible:::if->return->isCompressed->return
HotSpotNarrowOopStamp#mkStamp(CompressionOp, Stamp, CompressEncoding)::: hot spot narrow oop stamp mk stamp:::switch->if->return->HotSpotNarrowOopStamp->compressed->else->if->return->compressed->break->if->return->uncompressed->else->if->return->uncompressed->break->throw->GraalError->String->format->shouldNotReachHere
KlassPointerStamp#klass()::: klass pointer stamp klass:::return
KlassPointerStamp#klassNonNull()::: klass pointer stamp klass non null:::return
KlassPointerStamp#klassAlwaysNull()::: klass pointer stamp klass always null:::return
KlassPointerStamp#accept(Visitor)::: klass pointer stamp accept:::super->accept->v->encoding->getBase->visitLong->v->encoding->getShift->visitInt
KlassPointerStamp#copyWith(boolean, boolean)::: klass pointer stamp copy with:::return->new->KlassPointerStamp
KlassPointerStamp#isCompatible(Stamp)::: klass pointer stamp is compatible:::if->return->if->other->return->Objects->equals->return
KlassPointerStamp#isCompatible(Constant)::: klass pointer stamp is compatible:::if->return->asResolvedJavaType->else->return->super->isCompatible
KlassPointerStamp#constant(Constant, MetaAccessProvider)::: klass pointer stamp constant:::if->isCompressed->if->equals->return->new->KlassPointerStamp->else->if->equals->return->if->nonNull->return->if->isCompressed->return->new->KlassPointerStamp->else->return
KlassPointerStamp#nullConstant()::: klass pointer stamp null constant:::if->isCompressed->return->else->return->super->nullConstant
KlassPointerStamp#getLIRKind(LIRKindTool)::: klass pointer stamp get kind:::if->isCompressed->return->tool->getNarrowPointerKind->else->return->super->getLIRKind
KlassPointerStamp#isCompressed()::: klass pointer stamp is compressed:::return
KlassPointerStamp#getEncoding()::: klass pointer stamp get encoding:::return
KlassPointerStamp#compressed(CompressEncoding)::: klass pointer stamp compressed:::return->nonNull->alwaysNull->new->KlassPointerStamp
KlassPointerStamp#uncompressed()::: klass pointer stamp uncompressed:::return->nonNull->alwaysNull->new->KlassPointerStamp
KlassPointerStamp#readConstant(MemoryAccessProvider, Constant, long)::: klass pointer stamp read constant:::hsProvider->if->isCompressed->return->hsProvider->readNarrowKlassPointerConstant->else->return->hsProvider->readKlassPointerConstant
KlassPointerStamp#hashCode()::: klass pointer stamp hash code:::prime->result->super->hashCode->encoding->hashCode->return
KlassPointerStamp#equals(Object)::: klass pointer stamp equals:::if->return->if->super->equals->return->if->return->other->return->Objects->equals
KlassPointerStamp#toString()::: klass pointer stamp to string:::ret->new->StringBuilder->appendString->if->isCompressed->ret->append->append->append->return->ret->toString
MetaspacePointerStamp#getLIRKind(LIRKindTool)::: metaspace pointer stamp get kind:::return->tool->getWordKind
MetaspacePointerStamp#empty()::: metaspace pointer stamp empty:::return
MetaspacePointerStamp#isCompatible(Constant)::: metaspace pointer stamp is compatible:::return->constant->isDefaultForKind
MetaspacePointerStamp#hasValues()::: metaspace pointer stamp has values:::return
MetaspacePointerStamp#join(Stamp)::: metaspace pointer stamp join:::return->defaultPointerJoin
MetaspacePointerStamp#javaType(MetaAccessProvider)::: metaspace pointer stamp java type:::throw->GraalError->shouldNotReachHere
MetaspacePointerStamp#appendString(StringBuilder)::: metaspace pointer stamp append string:::str->nonNull->append->alwaysNull->append
MethodCountersPointerStamp#methodCounters()::: method counters pointer stamp method counters:::return
MethodCountersPointerStamp#methodCountersNonNull()::: method counters pointer stamp method counters non null:::return
MethodCountersPointerStamp#copyWith(boolean, boolean)::: method counters pointer stamp copy with:::if->return->else->if->return->else->return
MethodCountersPointerStamp#isCompatible(Stamp)::: method counters pointer stamp is compatible:::if->return->return
MethodCountersPointerStamp#constant(Constant, MetaAccessProvider)::: method counters pointer stamp constant:::if->equals->return->else->return
MethodCountersPointerStamp#readConstant(MemoryAccessProvider, Constant, long)::: method counters pointer stamp read constant:::return
MethodCountersPointerStamp#toString()::: method counters pointer stamp to string:::ret->new->StringBuilder->appendString->return->ret->toString
MethodPointerStamp#method()::: method pointer stamp method:::return
MethodPointerStamp#methodNonNull()::: method pointer stamp method non null:::return
MethodPointerStamp#copyWith(boolean, boolean)::: method pointer stamp copy with:::if->return->else->if->return->else->return
MethodPointerStamp#isCompatible(Stamp)::: method pointer stamp is compatible:::if->return->return
MethodPointerStamp#isCompatible(Constant)::: method pointer stamp is compatible:::if->return->asResolvedJavaMethod->else->return->super->isCompatible
MethodPointerStamp#constant(Constant, MetaAccessProvider)::: method pointer stamp constant:::if->equals->return->else->return
MethodPointerStamp#readConstant(MemoryAccessProvider, Constant, long)::: method pointer stamp read constant:::hsProvider->return->hsProvider->readMethodPointerConstant
MethodPointerStamp#toString()::: method pointer stamp to string:::ret->new->StringBuilder->appendString->return->ret->toString

Destroyable#destroy():::Destroy this Object:::throw->new->DestroyFailedException
Destroyable#isDestroyed():::Determine if this Object has been destroyed.:::return
PrivateCredentialPermission#getCredentialClass():::Returns the Class name of the Credential associated with this PrivateCredentialPermission.:::return
PrivateCredentialPermission#getPrincipals():::Returns the Principal classes and names associated with this PrivateCredentialPermission:::if->return->new->StringArrs->pArray->new->StringArrs->for->i->return
PrivateCredentialPermission#implies(Permission):::Checks if this PrivateCredentialPermission implies the specified Permission:::if->return->that->if->impliesCredentialClass->return->return->impliesPrincipalSet
PrivateCredentialPermission#equals(Object):::Checks two PrivateCredentialPermission objects for equality:::if->return->if->return->that->return->this->implies->that->implies
PrivateCredentialPermission#hashCode():::Returns the hash code value for this object.:::return->hashCode
PrivateCredentialPermission#getActions():::Returns the "canonical string representation" of the actions:::return
PrivateCredentialPermission#newPermissionCollection():::Return a homogeneous collection of PrivateCredentialPermissions in a PermissionCollection:::return
Refreshable#isCurrent():::Determine if this Object is current.:::
Refreshable#refresh():::Update or extend the validity period for this Object.:::
Subject#setReadOnly():::Set this Subject to be read-only:::sm->System->getSecurityManager->if->sm->checkPermission
Subject#isReadOnly():::Query whether this Subject is read-only.:::return
Subject#getSubject(AccessControlContext):::Get the Subject associated with the provided AccessControlContext:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->return->AccessController->new->java.security.PrivilegedAction<>->doPrivileged
Subject#doAs(Subject, java.security.PrivilegedAction):::Perform work as a particular Subject:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->currentAcc->AccessController->getContext->return->createContext->doPrivileged
Subject#doAs(Subject, java.security.PrivilegedExceptionAction):::Perform work as a particular Subject:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->currentAcc->AccessController->getContext->return->createContext->doPrivileged
Subject#doAsPrivileged(Subject, java.security.PrivilegedAction, java.security.AccessControlContext):::Perform privileged work as a particular Subject:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->callerAcc->new->AccessControlContext->return->createContext->doPrivileged
Subject#doAsPrivileged(Subject, java.security.PrivilegedExceptionAction, java.security.AccessControlContext):::Perform privileged work as a particular Subject:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->callerAcc->new->AccessControlContext->return->createContext->doPrivileged
Subject#getPrincipals():::Return the Set of Principals associated with this Subject:::return
Subject#getPrincipals(Class):::Return a Set of Principals associated with this Subject that are instances or subclasses of the specified Class:::Objects->ResourcesMgr->getString->requireNonNull->return->new->ClassSet<T>
Subject#getPublicCredentials():::Return the Set of public credentials held by this Subject:::return
Subject#getPrivateCredentials():::Return the Set of private credentials held by this Subject:::return
Subject#getPublicCredentials(Class):::Return a Set of public credentials associated with this Subject that are instances or subclasses of the specified Class:::Objects->ResourcesMgr->getString->requireNonNull->return->new->ClassSet<T>
Subject#getPrivateCredentials(Class):::Return a Set of private credentials associated with this Subject that are instances or subclasses of the specified Class:::Objects->ResourcesMgr->getString->requireNonNull->return->new->ClassSet<T>
Subject#equals(Object):::Compares the specified Object with this Subject for equality:::if->return->if->return->if->that->thatPrincipals->synchronized->new->HashSet<>->if->principals->equals->return->thatPubCredentials->synchronized->new->HashSet<>->if->pubCredentials->equals->return->thatPrivCredentials->synchronized->new->HashSet<>->if->privCredentials->equals->return->return->return
Subject#toString():::Return the String representation of this Subject.:::return->toString
Subject#toString(boolean):::package private convenience method to print out the Subject without firing off a security check when trying to access the Private Credentials:::s->ResourcesMgr->getString->suffix->synchronized->pI->principals->iterator->while->pI->hasNext->p->pI->next->ResourcesMgr->getString->p->toString->ResourcesMgr->getString->synchronized->pI->pubCredentials->iterator->while->pI->hasNext->o->pI->next->ResourcesMgr->getString->o->toString->ResourcesMgr->getString->if->synchronized->pI->privCredentials->iterator->while->pI->hasNext->try->o->pI->next->ResourcesMgr->getString->o->toString->ResourcesMgr->getString->catch->ResourcesMgr->getString->break->finally->return
Subject#hashCode():::Returns a hashcode for this Subject.:::hashCode->synchronized->pIterator->principals->iterator->while->pIterator->hasNext->p->pIterator->next->p->hashCode->synchronized->pubCIterator->pubCredentials->iterator->while->pubCIterator->hasNext->pubCIterator->next->getCredHashCode->return
SubjectDomainCombiner#getSubject():::Get the Subject associated with this SubjectDomainCombiner.:::sm->System->getSecurityManager->if->sm->new->AuthPermission->checkPermission->return
SubjectDomainCombiner#combine(ProtectionDomain[], ProtectionDomain[]):::Update the relevant ProtectionDomains with the Principals from the Subject associated with this SubjectDomainCombiner:::if->if->debug->println->else->s->AccessController->new->java.security.PrivilegedAction<Void>->doPrivileged->printInputDomains->if->return->optimize->if->debug->println->printInputDomains->if->return->cLen->aLen->newDomains->new->ProtectionDomainArr->allNew->synchronized->if->subject->isReadOnly->subject->getPrincipals->equals->newSet->subject->getPrincipals->synchronized->new->java.util.HashSet<Principal>->principalSet->principalSet->size->new->PrincipalArr->toArray->cachedPDs->clear->if->debug->println->subjectPd->for->i->if->debug->println->for->i->if->System->arraycopy->if->optimize->if->if->debug->println->else->debug->println->for->i->if->return->else->return

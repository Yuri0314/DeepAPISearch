Destroyable#destroy():::Destroy this Object:::throw->new->DestroyFailedException
Destroyable#isDestroyed():::Determine if this Object has been destroyed.:::return
PrivateCredentialPermission#getCredentialClass():::Returns the Class name of the Credential associated with this PrivateCredentialPermission.:::return
PrivateCredentialPermission#getPrincipals():::Returns the Principal classes and names associated with this PrivateCredentialPermission:::if->return->new->StringArrs->pArray->new->StringArrs->for->i->return
PrivateCredentialPermission#implies(Permission):::Checks if this PrivateCredentialPermission implies the specified Permission:::if->return->that->if->impliesCredentialClass->return->return->impliesPrincipalSet
PrivateCredentialPermission#equals(Object):::Checks two PrivateCredentialPermission objects for equality:::if->return->if->return->that->return->this->implies->that->implies
PrivateCredentialPermission#hashCode():::Returns the hash code value for this object.:::return->hashCode
PrivateCredentialPermission#getActions():::Returns the "canonical string representation" of the actions:::return
PrivateCredentialPermission#newPermissionCollection():::Return a homogeneous collection of PrivateCredentialPermissions in a PermissionCollection:::return
PrivateCredentialPermission#init(String)::: private credential permission init:::if->name->trim->length->throw->new->IllegalArgumentException->pList->new->ArrayList<>->tokenizer->new->StringTokenizer->principalClass->principalName->if->println->tokenizer->nextToken->if->println->if->tokenizer->hasMoreTokens->form->ResourcesMgr->getString->new->MessageFormat->source->throw->form->format->ResourcesMgr->getString->new->IllegalArgumentException->while->tokenizer->hasMoreTokens->tokenizer->nextToken->tokenizer->nextToken->if->println->if->tokenizer->hasMoreTokens->form->ResourcesMgr->getString->new->MessageFormat->source->throw->form->format->ResourcesMgr->getString->new->IllegalArgumentException->tokenizer->nextToken->tokenizer->nextToken->if->principalName->startsWith->form->ResourcesMgr->getString->new->MessageFormat->source->throw->form->format->ResourcesMgr->getString->new->IllegalArgumentException->if->principalName->endsWith->while->tokenizer->hasMoreTokens->tokenizer->nextToken->if->principalName->endsWith->break->if->principalName->endsWith->form->ResourcesMgr->getString->new->MessageFormat->source->throw->form->format->ResourcesMgr->getString->new->IllegalArgumentException->if->println->principalName->principalName->length->substring->if->principalClass->equals->principalName->equals->throw->ResourcesMgr->getString->new->IllegalArgumentException->if->println->pList->new->CredOwner->add->pList->size->new->CredOwnerArr->pList->toArray
PrivateCredentialPermission#impliesCredentialClass(String, String)::: private credential permission implies credential class:::if->return->if->println->if->thisC->equals->return->return->thisC->equals
PrivateCredentialPermission#impliesPrincipalSet(CredOwner[], CredOwner[])::: private credential permission implies principal set:::if->return->if->return->if->return->for->i->return
PrivateCredentialPermission#readObject(java.io.ObjectInputStream):::Reads this object from a stream (i.e., deserializes it):::s->defaultReadObject->if->getName->indexOf->getName->indexOf->getName->else->getName->init
PrivateCredentialPermission.CredOwner#implies(Object)::: cred owner implies:::if->return->that->if->principalClass->equals->principalClass->equals->if->principalName->equals->principalName->equals->return->return
PrivateCredentialPermission.CredOwner#toString()::: cred owner to string:::form->ResourcesMgr->getString->new->MessageFormat->source->return->form->format
Refreshable#isCurrent():::Determine if this Object is current.:::
Refreshable#refresh():::Update or extend the validity period for this Object.:::
Subject#setReadOnly():::Set this Subject to be read-only:::sm->System->getSecurityManager->if->sm->checkPermission
Subject#isReadOnly():::Query whether this Subject is read-only.:::return
Subject#getSubject(AccessControlContext):::Get the Subject associated with the provided AccessControlContext:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->return->AccessController->new->java.security.PrivilegedAction<>->doPrivileged
Subject#doAs(Subject, java.security.PrivilegedAction):::Perform work as a particular Subject:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->currentAcc->AccessController->getContext->return->createContext->doPrivileged
Subject#doAs(Subject, java.security.PrivilegedExceptionAction):::Perform work as a particular Subject:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->currentAcc->AccessController->getContext->return->createContext->doPrivileged
Subject#doAsPrivileged(Subject, java.security.PrivilegedAction, java.security.AccessControlContext):::Perform privileged work as a particular Subject:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->callerAcc->new->AccessControlContext->return->createContext->doPrivileged
Subject#doAsPrivileged(Subject, java.security.PrivilegedExceptionAction, java.security.AccessControlContext):::Perform privileged work as a particular Subject:::sm->System->getSecurityManager->if->sm->checkPermission->Objects->ResourcesMgr->getString->requireNonNull->callerAcc->new->AccessControlContext->return->createContext->doPrivileged
Subject#createContext(Subject, AccessControlContext)::: subject create context:::return->new->java.security.PrivilegedAction<>->doPrivileged
Subject#getPrincipals():::Return the Set of Principals associated with this Subject:::return
Subject#getPrincipals(Class):::Return a Set of Principals associated with this Subject that are instances or subclasses of the specified Class:::Objects->ResourcesMgr->getString->requireNonNull->return->new->ClassSet<T>
Subject#getPublicCredentials():::Return the Set of public credentials held by this Subject:::return
Subject#getPrivateCredentials():::Return the Set of private credentials held by this Subject:::return
Subject#getPublicCredentials(Class):::Return a Set of public credentials associated with this Subject that are instances or subclasses of the specified Class:::Objects->ResourcesMgr->getString->requireNonNull->return->new->ClassSet<T>
Subject#getPrivateCredentials(Class):::Return a Set of private credentials associated with this Subject that are instances or subclasses of the specified Class:::Objects->ResourcesMgr->getString->requireNonNull->return->new->ClassSet<T>
Subject#equals(Object):::Compares the specified Object with this Subject for equality:::if->return->if->return->if->that->thatPrincipals->synchronized->new->HashSet<>->if->principals->equals->return->thatPubCredentials->synchronized->new->HashSet<>->if->pubCredentials->equals->return->thatPrivCredentials->synchronized->new->HashSet<>->if->privCredentials->equals->return->return->return
Subject#toString():::Return the String representation of this Subject.:::return->toString
Subject#toString(boolean):::package private convenience method to print out the Subject without firing off a security check when trying to access the Private Credentials:::s->ResourcesMgr->getString->suffix->synchronized->pI->principals->iterator->while->pI->hasNext->p->pI->next->ResourcesMgr->getString->p->toString->ResourcesMgr->getString->synchronized->pI->pubCredentials->iterator->while->pI->hasNext->o->pI->next->ResourcesMgr->getString->o->toString->ResourcesMgr->getString->if->synchronized->pI->privCredentials->iterator->while->pI->hasNext->try->o->pI->next->ResourcesMgr->getString->o->toString->ResourcesMgr->getString->catch->ResourcesMgr->getString->break->finally->return
Subject#hashCode():::Returns a hashcode for this Subject.:::hashCode->synchronized->pIterator->principals->iterator->while->pIterator->hasNext->p->pIterator->next->p->hashCode->synchronized->pubCIterator->pubCredentials->iterator->while->pubCIterator->hasNext->pubCIterator->next->getCredHashCode->return
Subject#getCredHashCode(Object):::get a credential's hashcode:::try->return->o->hashCode->catch->return->o->getClass->toString->hashCode->finally
Subject#writeObject(java.io.ObjectOutputStream):::Writes this object out to a stream (i.e., serializes it).:::synchronized->oos->defaultWriteObject
Subject#readObject(java.io.ObjectInputStream):::Reads this object from a stream (i.e., deserializes it):::gf->s->readFields->gf->get->inputPrincs->gf->get->Objects->ResourcesMgr->getString->requireNonNull->try->Collections->new->SecureSet<>->synchronizedSet->catch->Collections->new->SecureSet<>->synchronizedSet->finally->Collections->new->SecureSet<>->synchronizedSet->Collections->new->SecureSet<>->synchronizedSet
Subject#collectionNullClean(Collection):::Tests for null-clean collections (both non-null reference and no null elements):::hasNullElements->Objects->ResourcesMgr->getString->requireNonNull->try->coll->contains->catch->finally->if->throw->ResourcesMgr->getString->new->NullPointerException
Subject.SecureSet#size()::: secure set size:::return->elements->size
Subject.SecureSet#iterator()::: secure set iterator:::list->return->new->Iterator<E>
Subject.SecureSet#add(E)::: secure set add:::Objects->ResourcesMgr->getString->requireNonNull->if->subject->isReadOnly->throw->ResourcesMgr->getString->new->IllegalStateException->sm->System->getSecurityManager->if->switch->sm->checkPermission->break->sm->checkPermission->break->sm->checkPermission->break->switch->if->throw->ResourcesMgr->getString->new->SecurityException->break->break->if->elements->contains->return->elements->add->else->return
Subject.SecureSet#remove(Object)::: secure set remove:::Objects->ResourcesMgr->getString->requireNonNull->e->iterator->while->e->hasNext->next->if->e->next->else->new->java.security.PrivilegedAction<E>->doPrivileged->if->next->equals->e->remove->return->return
Subject.SecureSet#contains(Object)::: secure set contains:::Objects->ResourcesMgr->getString->requireNonNull->e->iterator->while->e->hasNext->next->if->e->next->else->sm->System->getSecurityManager->if->sm->o->getClass->getName->subject->getPrincipals->new->PrivateCredentialPermission->checkPermission->new->java.security.PrivilegedAction<E>->doPrivileged->if->next->equals->return->return
Subject.SecureSet#addAll(Collection)::: secure set add all:::result->collectionNullClean->foreach->this->add->return
Subject.SecureSet#removeAll(Collection)::: secure set remove all:::collectionNullClean->modified->e->iterator->while->e->hasNext->next->if->e->next->else->new->java.security.PrivilegedAction<E>->doPrivileged->ce->c->iterator->while->ce->hasNext->if->next->ce->next->equals->e->remove->break->return
Subject.SecureSet#containsAll(Collection)::: secure set contains all:::collectionNullClean->foreach->if->this->contains->return->return
Subject.SecureSet#retainAll(Collection)::: secure set retain all:::collectionNullClean->modified->e->iterator->while->e->hasNext->next->if->e->next->else->new->java.security.PrivilegedAction<E>->doPrivileged->if->c->contains->e->remove->return
Subject.SecureSet#clear()::: secure set clear:::e->iterator->while->e->hasNext->next->if->e->next->else->new->java.security.PrivilegedAction<E>->doPrivileged->e->remove
Subject.SecureSet#isEmpty()::: secure set is empty:::return->elements->isEmpty
Subject.SecureSet#toArray()::: secure set to array:::e->iterator->while->e->hasNext->e->next->return->elements->toArray
Subject.SecureSet#toArray(T[])::: secure set to array:::e->iterator->while->e->hasNext->e->next->return->elements->toArray
Subject.SecureSet#equals(Object)::: secure set equals:::if->return->if->return->c->if->c->size->size->return->try->return->containsAll->catch->return->return->finally
Subject.SecureSet#hashCode()::: secure set hash code:::h->i->iterator->while->i->hasNext->obj->i->next->if->obj->hashCode->return
Subject.SecureSet#writeObject(java.io.ObjectOutputStream):::Writes this object out to a stream (i.e., serializes it).:::if->i->iterator->while->i->hasNext->i->next->fields->oos->putFields->fields->put->fields->put->fields->put->oos->writeFields
Subject.SecureSet#readObject(ObjectInputStream)::: secure set read object:::fields->ois->readFields->fields->get->fields->get->tmp->fields->get->Subject->collectionNullClean->if->tmp->getClass->new->LinkedList<E>->else
Subject.ClassSet#populateSet()::: class set populate set:::iterator->switch->iterator->break->iterator->break->iterator->break->while->iterator->hasNext->next->if->new->java.security.PrivilegedAction<>->doPrivileged->else->iterator->next->if->c->next->getClass->isAssignableFrom->if->set->add->else->sm->System->getSecurityManager->if->sm->next->getClass->getName->Subject.this->getPrincipals->new->PrivateCredentialPermission->checkPermission->set->add
Subject.ClassSet#size()::: class set size:::return->set->size
Subject.ClassSet#iterator()::: class set iterator:::return->set->iterator
Subject.ClassSet#add(T)::: class set add:::if->c->o->getClass->isAssignableFrom->form->ResourcesMgr->getString->new->MessageFormat->source->c->toString->throw->form->format->new->SecurityException->return->set->add
SubjectDomainCombiner#getSubject():::Get the Subject associated with this SubjectDomainCombiner.:::sm->System->getSecurityManager->if->sm->new->AuthPermission->checkPermission->return
SubjectDomainCombiner#combine(ProtectionDomain[], ProtectionDomain[]):::Update the relevant ProtectionDomains with the Principals from the Subject associated with this SubjectDomainCombiner:::if->if->debug->println->else->s->AccessController->new->java.security.PrivilegedAction<Void>->doPrivileged->printInputDomains->if->return->optimize->if->debug->println->printInputDomains->if->return->cLen->aLen->newDomains->new->ProtectionDomainArr->allNew->synchronized->if->subject->isReadOnly->subject->getPrincipals->equals->newSet->subject->getPrincipals->synchronized->new->java.util.HashSet<Principal>->principalSet->principalSet->size->new->PrincipalArr->toArray->cachedPDs->clear->if->debug->println->subjectPd->for->i->if->debug->println->for->i->if->System->arraycopy->if->optimize->if->if->debug->println->else->debug->println->for->i->if->return->else->return
SubjectDomainCombiner#optimize(ProtectionDomain[])::: subject domain combiner optimize:::if->return->optimized->new->ProtectionDomainArr->pd->num->for->i->if->downSize->new->ProtectionDomainArr->System->arraycopy->return
SubjectDomainCombiner#printInputDomains(ProtectionDomain[], ProtectionDomain[])::: subject domain combiner print input domains:::if->debug->println->else->for->i->if->debug->println->else->debug->println->for->i
SubjectDomainCombiner#printDomain(ProtectionDomain)::: subject domain combiner print domain:::if->return->return->AccessController->new->PrivilegedAction<String>->doPrivileged
SubjectDomainCombiner.WeakKeyValueMap#getValue(K)::: weak key value map get value:::wr->super->get->if->return->wr->get->return
SubjectDomainCombiner.WeakKeyValueMap#putValue(K, V)::: weak key value map put value:::wr->super->new->WeakReference<V>->put->if->return->wr->get->return

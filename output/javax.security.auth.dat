javax.security.auth.Destroyable#destroy()->void:::Destroy this Object
javax.security.auth.Destroyable#isDestroyed()->boolean:::Determine if this Object has been destroyed.
javax.security.auth.PrivateCredentialPermission#getCredentialClass()->String:::Returns the Class name of the Credential associated with this PrivateCredentialPermission.
javax.security.auth.PrivateCredentialPermission#getPrincipals()->String[][]:::Returns the Principal classes and names associated with this PrivateCredentialPermission
javax.security.auth.PrivateCredentialPermission#implies(Permission)->boolean:::Checks if this PrivateCredentialPermission implies the specified Permission
javax.security.auth.PrivateCredentialPermission#equals(Object)->boolean:::Checks two PrivateCredentialPermission objects for equality
javax.security.auth.PrivateCredentialPermission#hashCode()->int:::Returns the hash code value for this object.
javax.security.auth.PrivateCredentialPermission#getActions()->String:::Returns the "canonical string representation" of the actions
javax.security.auth.PrivateCredentialPermission#newPermissionCollection()->PermissionCollection:::Return a homogeneous collection of PrivateCredentialPermissions in a PermissionCollection
javax.security.auth.PrivateCredentialPermission.CredOwner#implies(Object)->boolean::: cred owner implies
javax.security.auth.PrivateCredentialPermission.CredOwner#toString()->String::: cred owner to string
javax.security.auth.Refreshable#isCurrent()->boolean:::Determine if this Object is current.
javax.security.auth.Refreshable#refresh()->void:::Update or extend the validity period for this Object.
javax.security.auth.Subject#setReadOnly()->void:::Set this Subject to be read-only
javax.security.auth.Subject#isReadOnly()->boolean:::Query whether this Subject is read-only.
javax.security.auth.Subject#getSubject(AccessControlContext)->Subject:::Get the Subject associated with the provided AccessControlContext
javax.security.auth.Subject#doAs(Subject, java.security.PrivilegedAction)->T:::Perform work as a particular Subject
javax.security.auth.Subject#doAs(Subject, java.security.PrivilegedExceptionAction)->T:::Perform work as a particular Subject
javax.security.auth.Subject#doAsPrivileged(Subject, java.security.PrivilegedAction, java.security.AccessControlContext)->T:::Perform privileged work as a particular Subject
javax.security.auth.Subject#doAsPrivileged(Subject, java.security.PrivilegedExceptionAction, java.security.AccessControlContext)->T:::Perform privileged work as a particular Subject
javax.security.auth.Subject#getPrincipals()->Set:::Return the Set of Principals associated with this Subject
javax.security.auth.Subject#getPrincipals(Class)->Set:::Return a Set of Principals associated with this Subject that are instances or subclasses of the specified Class
javax.security.auth.Subject#getPublicCredentials()->Set:::Return the Set of public credentials held by this Subject
javax.security.auth.Subject#getPrivateCredentials()->Set:::Return the Set of private credentials held by this Subject
javax.security.auth.Subject#getPublicCredentials(Class)->Set:::Return a Set of public credentials associated with this Subject that are instances or subclasses of the specified Class
javax.security.auth.Subject#getPrivateCredentials(Class)->Set:::Return a Set of private credentials associated with this Subject that are instances or subclasses of the specified Class
javax.security.auth.Subject#equals(Object)->boolean:::Compares the specified Object with this Subject for equality
javax.security.auth.Subject#toString()->String:::Return the String representation of this Subject.
javax.security.auth.Subject#toString(boolean)->String:::package private convenience method to print out the Subject without firing off a security check when trying to access the Private Credentials
javax.security.auth.Subject#hashCode()->int:::Returns a hashcode for this Subject.
javax.security.auth.SubjectDomainCombiner#getSubject()->Subject:::Get the Subject associated with this SubjectDomainCombiner.
javax.security.auth.SubjectDomainCombiner#combine(ProtectionDomain[], ProtectionDomain[])->ProtectionDomain[]:::Update the relevant ProtectionDomains with the Principals from the Subject associated with this SubjectDomainCombiner

AuthorizeCallback#getAuthenticationID():::Returns the authentication id to check.:::return
AuthorizeCallback#getAuthorizationID():::Returns the authorization id to check.:::return
AuthorizeCallback#isAuthorized():::Determines whether the authentication id is allowed to act on behalf of the authorization id.:::return
AuthorizeCallback#setAuthorized(boolean):::Sets whether the authorization is allowed.:::
AuthorizeCallback#getAuthorizedID():::Returns the id of the authorized user.:::if->return->return
AuthorizeCallback#setAuthorizedID(String):::Sets the id of the authorized entity:::
Sasl#createSaslClient(String[], String, String, String, Map, CallbackHandler):::Creates a SaslClient using the parameters supplied:::mech->fac->service->mechName->for->i->return
Sasl#createSaslServer(String, String, String, Map, javax.security.auth.callback.CallbackHandler):::Creates a SaslServer for the specified mechanism:::mech->fac->service->if->throw->new->NullPointerException->else->if->mechanism->length->return->else->if->isDisabled->logger->log->return->type->provs->Security->getProviders->if->foreach->p->getService->if->throw->new->SaslException->loadFactory->if->fac->createSaslServer->if->return->return
Sasl#getSaslClientFactories():::Gets an enumeration of known factories for producing SaslClient:::facs->getFactories->iter->facs->iterator->return->new->Enumeration<SaslClientFactory>
Sasl#getSaslServerFactories():::Gets an enumeration of known factories for producing SaslServer:::facs->getFactories->iter->facs->iterator->return->new->Enumeration<SaslServerFactory>
SaslClient#getMechanismName():::Returns the IANA-registered mechanism name of this SASL client:::
SaslClient#hasInitialResponse():::Determines whether this mechanism has an optional initial response:::
SaslClient#evaluateChallenge(byte[]):::Evaluates the challenge data and generates a response:::
SaslClient#isComplete():::Determines whether the authentication exchange has completed:::
SaslClient#unwrap(byte[], int, int):::Unwraps a byte array received from the server:::
SaslClient#wrap(byte[], int, int):::Wraps a byte array to be sent to the server:::
SaslClient#dispose():::Disposes of any system resources or security-sensitive information the SaslClient might be using:::
SaslClientFactory#createSaslClient(String[], String, String, String, Map, CallbackHandler):::Creates a SaslClient using the parameters supplied.:::
SaslClientFactory#getMechanismNames(Map):::Returns an array of names of mechanisms that match the specified mechanism selection policies.:::
SaslServer#getMechanismName():::Returns the IANA-registered mechanism name of this SASL server:::
SaslServer#evaluateResponse(byte[]):::Evaluates the response data and generates a challenge:::
SaslServer#isComplete():::Determines whether the authentication exchange has completed:::
SaslServer#getAuthorizationID():::Reports the authorization ID in effect for the client of this session:::
SaslServer#unwrap(byte[], int, int):::Unwraps a byte array received from the client:::
SaslServer#wrap(byte[], int, int):::Wraps a byte array to be sent to the client:::
SaslServer#dispose():::Disposes of any system resources or security-sensitive information the SaslServer might be using:::
SaslServerFactory#createSaslServer(String, String, String, Map, CallbackHandler):::Creates a SaslServer using the parameters supplied:::
SaslServerFactory#getMechanismNames(Map):::Returns an array of names of mechanisms that match the specified mechanism selection policies.:::

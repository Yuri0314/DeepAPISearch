javax.security.sasl.AuthorizeCallback#getAuthenticationID()->String:::Returns the authentication id to check.
javax.security.sasl.AuthorizeCallback#getAuthorizationID()->String:::Returns the authorization id to check.
javax.security.sasl.AuthorizeCallback#isAuthorized()->boolean:::Determines whether the authentication id is allowed to act on behalf of the authorization id.
javax.security.sasl.AuthorizeCallback#setAuthorized(boolean)->void:::Sets whether the authorization is allowed.
javax.security.sasl.AuthorizeCallback#getAuthorizedID()->String:::Returns the id of the authorized user.
javax.security.sasl.AuthorizeCallback#setAuthorizedID(String)->void:::Sets the id of the authorized entity
javax.security.sasl.Sasl#createSaslClient(String[], String, String, String, Map, CallbackHandler)->SaslClient:::Creates a SaslClient using the parameters supplied
javax.security.sasl.Sasl#createSaslServer(String, String, String, Map, javax.security.auth.callback.CallbackHandler)->SaslServer:::Creates a SaslServer for the specified mechanism
javax.security.sasl.Sasl#getSaslClientFactories()->Enumeration:::Gets an enumeration of known factories for producing SaslClient
javax.security.sasl.Sasl#getSaslServerFactories()->Enumeration:::Gets an enumeration of known factories for producing SaslServer
javax.security.sasl.SaslClient#getMechanismName()->String:::Returns the IANA-registered mechanism name of this SASL client
javax.security.sasl.SaslClient#hasInitialResponse()->boolean:::Determines whether this mechanism has an optional initial response
javax.security.sasl.SaslClient#evaluateChallenge(byte[])->byte[]:::Evaluates the challenge data and generates a response
javax.security.sasl.SaslClient#isComplete()->boolean:::Determines whether the authentication exchange has completed
javax.security.sasl.SaslClient#unwrap(byte[], int, int)->byte[]:::Unwraps a byte array received from the server
javax.security.sasl.SaslClient#wrap(byte[], int, int)->byte[]:::Wraps a byte array to be sent to the server
javax.security.sasl.SaslClient#getNegotiatedProperty(String)->Object::: sasl client get negotiated property
javax.security.sasl.SaslClient#dispose()->void:::Disposes of any system resources or security-sensitive information the SaslClient might be using
javax.security.sasl.SaslClientFactory#createSaslClient(String[], String, String, String, Map, CallbackHandler)->SaslClient:::Creates a SaslClient using the parameters supplied.
javax.security.sasl.SaslClientFactory#getMechanismNames(Map)->String[]:::Returns an array of names of mechanisms that match the specified mechanism selection policies.
javax.security.sasl.SaslException#getCause()->Throwable::: sasl exception get cause
javax.security.sasl.SaslException#initCause(Throwable)->Throwable::: sasl exception init cause
javax.security.sasl.SaslException#toString()->String::: sasl exception to string
javax.security.sasl.SaslServer#getMechanismName()->String:::Returns the IANA-registered mechanism name of this SASL server
javax.security.sasl.SaslServer#evaluateResponse(byte[])->byte[]:::Evaluates the response data and generates a challenge
javax.security.sasl.SaslServer#isComplete()->boolean:::Determines whether the authentication exchange has completed
javax.security.sasl.SaslServer#getAuthorizationID()->String:::Reports the authorization ID in effect for the client of this session
javax.security.sasl.SaslServer#unwrap(byte[], int, int)->byte[]:::Unwraps a byte array received from the client
javax.security.sasl.SaslServer#wrap(byte[], int, int)->byte[]:::Wraps a byte array to be sent to the client
javax.security.sasl.SaslServer#getNegotiatedProperty(String)->Object::: sasl server get negotiated property
javax.security.sasl.SaslServer#dispose()->void:::Disposes of any system resources or security-sensitive information the SaslServer might be using
javax.security.sasl.SaslServerFactory#createSaslServer(String, String, String, Map, CallbackHandler)->SaslServer:::Creates a SaslServer using the parameters supplied
javax.security.sasl.SaslServerFactory#getMechanismNames(Map)->String[]:::Returns an array of names of mechanisms that match the specified mechanism selection policies.

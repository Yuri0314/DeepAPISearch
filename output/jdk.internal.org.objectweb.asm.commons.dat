AdviceAdapter#onMethodEnter():::Called at the beginning of the method or after super class call in the constructor:::
AdviceAdapter#onMethodExit(int):::Called before explicit exit from the method using either return or throw:::
GeneratorAdapter#push(boolean):::Generates the instruction to push the given value on the stack.:::push
GeneratorAdapter#push(int):::Generates the instruction to push the given value on the stack.:::if->mv->visitInsn->else->if->mv->visitIntInsn->else->if->mv->visitIntInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(long):::Generates the instruction to push the given value on the stack.:::if->mv->visitInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(float):::Generates the instruction to push the given value on the stack.:::bits->Float->floatToIntBits->if->mv->visitInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(double):::Generates the instruction to push the given value on the stack.:::bits->Double->doubleToLongBits->if->mv->visitInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(String):::Generates the instruction to push the given value on the stack.:::if->mv->visitInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(Type):::Generates the instruction to push the given value on the stack.:::if->mv->visitInsn->else->switch->value->getSort->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitLdcInsn
GeneratorAdapter#push(Handle):::Generates the instruction to push a handle on the stack.:::mv->visitLdcInsn
GeneratorAdapter#loadThis():::Generates the instruction to load 'this' on the stack.:::if->throw->new->IllegalStateException->mv->visitVarInsn
GeneratorAdapter#loadArg(int):::Generates the instruction to load the given method argument on the stack.:::getArgIndex->loadInsn
GeneratorAdapter#loadArgs(int, int):::Generates the instructions to load the given method arguments on the stack.:::index->getArgIndex->for->i
GeneratorAdapter#loadArgs():::Generates the instructions to load all the method arguments on the stack.:::loadArgs
GeneratorAdapter#loadArgArray():::Generates the instructions to load all the method arguments on the stack, as a single object array.:::push->newArray->for->i
GeneratorAdapter#storeArg(int):::Generates the instruction to store the top stack value in the given method argument.:::getArgIndex->storeInsn
GeneratorAdapter#getLocalType(int):::Returns the type of the given local variable.:::return->localTypes->get
GeneratorAdapter#loadLocal(int):::Generates the instruction to load the given local variable on the stack.:::getLocalType->loadInsn
GeneratorAdapter#loadLocal(int, Type):::Generates the instruction to load the given local variable on the stack.:::setLocalType->loadInsn
GeneratorAdapter#storeLocal(int):::Generates the instruction to store the top stack value in the given local variable.:::getLocalType->storeInsn
GeneratorAdapter#storeLocal(int, Type):::Generates the instruction to store the top stack value in the given local variable.:::setLocalType->storeInsn
GeneratorAdapter#arrayLoad(Type):::Generates the instruction to load an element from an array.:::mv->type->getOpcode->visitInsn
GeneratorAdapter#arrayStore(Type):::Generates the instruction to store an element in an array.:::mv->type->getOpcode->visitInsn
GeneratorAdapter#pop():::Generates a POP instruction.:::mv->visitInsn
GeneratorAdapter#pop2():::Generates a POP2 instruction.:::mv->visitInsn
GeneratorAdapter#dup():::Generates a DUP instruction.:::mv->visitInsn
GeneratorAdapter#dup2():::Generates a DUP2 instruction.:::mv->visitInsn
GeneratorAdapter#dupX1():::Generates a DUP_X1 instruction.:::mv->visitInsn
GeneratorAdapter#dupX2():::Generates a DUP_X2 instruction.:::mv->visitInsn
GeneratorAdapter#dup2X1():::Generates a DUP2_X1 instruction.:::mv->visitInsn
GeneratorAdapter#dup2X2():::Generates a DUP2_X2 instruction.:::mv->visitInsn
GeneratorAdapter#swap():::Generates a SWAP instruction.:::mv->visitInsn
GeneratorAdapter#swap(Type, Type):::Generates the instructions to swap the top two stack values.:::if->type->getSize->if->prev->getSize->swap->else->dupX2->pop->else->if->prev->getSize->dup2X1->pop2->else->dup2X2->pop2
GeneratorAdapter#math(int, Type):::Generates the instruction to do the specified mathematical or logical operation.:::mv->type->getOpcode->visitInsn
GeneratorAdapter#not():::Generates the instructions to compute the bitwise negation of the top stack value.:::mv->visitInsn->mv->visitInsn
GeneratorAdapter#iinc(int, int):::Generates the instruction to increment the given local variable.:::mv->visitIincInsn
GeneratorAdapter#cast(Type, Type):::Generates the instructions to cast a numerical value from one type to another.:::if->if->if->mv->visitInsn->else->if->mv->visitInsn->else->mv->visitInsn->cast->else->if->if->mv->visitInsn->else->if->mv->visitInsn->else->mv->visitInsn->cast->else->if->if->mv->visitInsn->else->if->mv->visitInsn->else->mv->visitInsn->cast->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn
GeneratorAdapter#box(Type):::Generates the instructions to box the top stack value:::if->type->getSort->type->getSort->return->if->push->else->boxed->getBoxedType->newInstance->if->type->getSize->dupX2->dupX2->pop->else->dupX1->swap->new->TypeArr->new->Method->invokeConstructor
GeneratorAdapter#valueOf(Type):::Generates the instructions to box the top stack value using Java 5's valueOf() method:::if->type->getSort->type->getSort->return->if->push->else->boxed->getBoxedType->new->TypeArr->new->Method->invokeStatic
GeneratorAdapter#unbox(Type):::Generates the instructions to unbox the top stack value:::t->sig->switch->type->getSort->return->break->break->break->break->break->if->checkCast->else->checkCast->invokeVirtual
GeneratorAdapter#newLabel():::Creates a new Label.:::return->new->Label
GeneratorAdapter#mark(Label):::Marks the current code position with the given label.:::mv->visitLabel
GeneratorAdapter#mark():::Marks the current code position with a new label.:::label->new->Label->mv->visitLabel->return
GeneratorAdapter#ifCmp(Type, int, Label):::Generates the instructions to jump to a label based on the comparison of the top two stack values.:::switch->type->getSort->mv->visitInsn->break->mv->visitInsn->break->mv->visitInsn->break->switch->mv->visitJumpInsn->return->mv->visitJumpInsn->return->throw->new->IllegalArgumentException->intOp->switch->break->break->break->break->break->break->mv->visitJumpInsn->return->mv->visitJumpInsn
GeneratorAdapter#ifICmp(int, Label):::Generates the instructions to jump to a label based on the comparison of the top two integer stack values.:::ifCmp
GeneratorAdapter#ifZCmp(int, Label):::Generates the instructions to jump to a label based on the comparison of the top integer stack value with zero.:::mv->visitJumpInsn
GeneratorAdapter#ifNull(Label):::Generates the instruction to jump to the given label if the top stack value is null.:::mv->visitJumpInsn
GeneratorAdapter#ifNonNull(Label):::Generates the instruction to jump to the given label if the top stack value is not null.:::mv->visitJumpInsn
GeneratorAdapter#goTo(Label):::Generates the instruction to jump to the given label.:::mv->visitJumpInsn
GeneratorAdapter#ret(int):::Generates a RET instruction.:::mv->visitVarInsn
GeneratorAdapter#tableSwitch(int[], TableSwitchGenerator):::Generates the instructions for a switch statement.:::density->if->else->tableSwitch
GeneratorAdapter#tableSwitch(int[], TableSwitchGenerator, boolean):::Generates the instructions for a switch statement.:::for->i->def->newLabel->end->newLabel->if->len->min->max->range->if->labels->new->LabelArr->Arrays->fill->for->i->mv->visitTableSwitchInsn->for->i->else->labels->new->LabelArr->for->i->mv->visitLookupSwitchInsn->for->i->mark->generator->generateDefault->mark
GeneratorAdapter#returnValue():::Generates the instruction to return the top stack value to the caller.:::mv->returnType->getOpcode->visitInsn
GeneratorAdapter#getStatic(Type, String, Type):::Generates the instruction to push the value of a static field on the stack.:::fieldInsn
GeneratorAdapter#putStatic(Type, String, Type):::Generates the instruction to store the top stack value in a static field.:::fieldInsn
GeneratorAdapter#getField(Type, String, Type):::Generates the instruction to push the value of a non static field on the stack.:::fieldInsn
GeneratorAdapter#putField(Type, String, Type):::Generates the instruction to store the top stack value in a non static field.:::fieldInsn
GeneratorAdapter#invokeVirtual(Type, Method):::Generates the instruction to invoke a normal method.:::invokeInsn
GeneratorAdapter#invokeConstructor(Type, Method):::Generates the instruction to invoke a constructor.:::invokeInsn
GeneratorAdapter#invokeStatic(Type, Method):::Generates the instruction to invoke a static method.:::invokeInsn
GeneratorAdapter#invokeInterface(Type, Method):::Generates the instruction to invoke an interface method.:::invokeInsn
GeneratorAdapter#invokeDynamic(String, String, Handle, Object...):::Generates an invokedynamic instruction.:::mv->visitInvokeDynamicInsn
GeneratorAdapter#newInstance(Type):::Generates the instruction to create a new object.:::typeInsn
GeneratorAdapter#newArray(Type):::Generates the instruction to create a new array.:::typ->switch->type->getSort->break->break->break->break->break->break->break->break->typeInsn->return->mv->visitIntInsn
GeneratorAdapter#arrayLength():::Generates the instruction to compute the length of an array.:::mv->visitInsn
GeneratorAdapter#throwException():::Generates the instruction to throw an exception.:::mv->visitInsn
GeneratorAdapter#throwException(Type, String):::Generates the instructions to create and throw an exception:::newInstance->dup->push->Method->getMethod->invokeConstructor->throwException
GeneratorAdapter#checkCast(Type):::Generates the instruction to check that the top stack value is of the given type.:::if->type->equals->typeInsn
GeneratorAdapter#instanceOf(Type):::Generates the instruction to test if the top stack value is of the given type.:::typeInsn
GeneratorAdapter#monitorEnter():::Generates the instruction to get the monitor of the top stack value.:::mv->visitInsn
GeneratorAdapter#monitorExit():::Generates the instruction to release the monitor of the top stack value.:::mv->visitInsn
GeneratorAdapter#endMethod():::Marks the end of the visited method.:::if->mv->visitMaxs->mv->visitEnd
GeneratorAdapter#catchException(Label, Label, Type):::Marks the start of an exception handler.:::doCatch->new->Label->if->mv->visitTryCatchBlock->else->mv->exception->getInternalName->visitTryCatchBlock->mark
JSRInlinerAdapter#visitJumpInsn(int, Label):::Detects a JSR instruction and sets a flag to indicate we will need to do inlining.:::super->visitJumpInsn->ln->instructions->getLast->if->subroutineHeads->containsKey->subroutineHeads->new->BitSet->put
JSRInlinerAdapter#visitEnd():::If any JSRs were seen, triggers the inlining process:::if->subroutineHeads->isEmpty->markSubroutines->if->mainSubroutine->toString->log->it->subroutineHeads->values->iterator->while->it->hasNext->sub->it->next->sub->toString->log->emitCode->if->accept
LocalVariablesSorter#newLocal(Type):::Creates a new local variable of the given type.:::t->switch->type->getSort->break->break->break->break->type->getDescriptor->break->type->getInternalName->break->local->newLocalMapping->setLocalType->setFrameLocal->return
LocalVariablesSorter#updateNewLocals(Object[]):::Notifies subclasses that a new stack map frame is being visited:::
LocalVariablesSorter#setLocalType(int, Type):::Notifies subclasses that a local variable has been added or remapped:::
Method#getMethod(java.lang.reflect.Method):::Creates a new Method.:::return->m->getName->Type->getMethodDescriptor->new->Method
Method#getMethod(java.lang.reflect.Constructor):::Creates a new Method.:::return->Type->getConstructorDescriptor->new->Method
Method#getMethod(String):::Returns a Method corresponding to the given Java method declaration.:::return->getMethod
Method#getMethod(String, boolean):::Returns a Method corresponding to the given Java method declaration.:::space->method->indexOf->start->method->indexOf->end->method->indexOf->if->throw->new->IllegalArgumentException->returnType->method->substring->methodName->method->substring->trim->sb->new->StringBuilder->sb->append->p->do->s->method->indexOf->if->method->substring->trim->map->else->method->substring->trim->map->sb->append->while->sb->append->sb->map->append->return->sb->toString->new->Method
Method#getName():::Returns the name of the method described by this object.:::return
Method#getDescriptor():::Returns the descriptor of the method described by this object.:::return
Method#getReturnType():::Returns the return type of the method described by this object.:::return->Type->getReturnType
Method#getArgumentTypes():::Returns the argument types of the method described by this object.:::return->Type->getArgumentTypes
Remapper#mapMethodName(String, String, String):::Map method name to the new name:::return
Remapper#mapInvokeDynamicMethodName(String, String):::Map invokedynamic method name to the new name:::return
Remapper#mapFieldName(String, String, String):::Map field name to the new name:::return
Remapper#mapPackageName(String):::Map package name to the new name:::fakeName->map->index->return->fakeName->lastIndexOf->fakeName->substring
Remapper#mapModuleName(String):::Map module name to the new name:::return
Remapper#map(String):::Map type name to the new name:::return
SerialVersionUIDAdder#visitInnerClass(String, String, String, int):::Handle a bizarre special case:::if->name->equals->super->visitInnerClass
SerialVersionUIDAdder#hasSVUID():::Returns true if the class already has a SVUID field:::return
SerialVersionUIDAdder#computeSVUID():::Computes and returns the value of SVUID.:::bos->dos->svuid->try->new->ByteArrayOutputStream->new->DataOutputStream->dos->name->replace->writeUTF->access->if->svuidMethods->size->dos->writeInt->Arrays->sort->for->i->writeItems->if->dos->writeUTF->dos->writeInt->dos->writeUTF->writeItems->writeItems->dos->flush->hashBytes->bos->toByteArray->computeSHAdigest->for->i->Math->min->catch->finally->if->dos->close->return
SerialVersionUIDAdder#computeSHAdigest(byte[]):::Returns the SHA-1 message digest of the given value.:::try->return->MessageDigest->getInstance->digest->catch->throw->e->toString->new->UnsupportedOperationException->finally
TableSwitchGenerator#generateCase(int, Label):::Generates the code for a switch case.:::
TableSwitchGenerator#generateDefault():::Generates the code for the default switch case.:::

AdviceAdapter#visitCode()::: advice adapter visit code:::mv->visitCode->if->new->ArrayList<Object>->new->HashMap<Label,List<Object>>->else->onMethodEnter
AdviceAdapter#visitLabel(Label)::: advice adapter visit label:::mv->visitLabel->if->frame->branches->get->if->branches->remove
AdviceAdapter#visitInsn(int)::: advice adapter visit insn:::if->s->switch->onMethodExit->break->popValue->onMethodExit->break->popValue->popValue->onMethodExit->break->break->pushValue->break->pushValue->pushValue->break->popValue->break->popValue->popValue->break->popValue->popValue->popValue->break->popValue->popValue->popValue->popValue->break->peekValue->pushValue->break->stackFrame->size->stackFrame->stackFrame->get->add->break->stackFrame->size->stackFrame->stackFrame->get->add->break->stackFrame->size->stackFrame->stackFrame->get->add->stackFrame->stackFrame->get->add->break->stackFrame->size->stackFrame->stackFrame->get->add->stackFrame->stackFrame->get->add->break->stackFrame->size->stackFrame->stackFrame->get->add->stackFrame->stackFrame->get->add->break->stackFrame->size->stackFrame->stackFrame->get->add->stackFrame->remove->break->else->switch->onMethodExit->break->mv->visitInsn
AdviceAdapter#visitVarInsn(int, int)::: advice adapter visit var insn:::super->visitVarInsn->if->switch->pushValue->break->pushValue->pushValue->break->pushValue->break->popValue->break->popValue->popValue->break
AdviceAdapter#visitFieldInsn(int, String, String, String)::: advice adapter visit field insn:::mv->visitFieldInsn->if->c->desc->charAt->longOrDouble->switch->pushValue->if->pushValue->break->popValue->if->popValue->break->popValue->popValue->if->popValue->break->if->pushValue
AdviceAdapter#visitIntInsn(int, int)::: advice adapter visit int insn:::mv->visitIntInsn->if->pushValue
AdviceAdapter#visitLdcInsn(Object)::: advice adapter visit ldc insn:::mv->visitLdcInsn->if->pushValue->if->pushValue
AdviceAdapter#visitMultiANewArrayInsn(String, int)::: advice adapter visit multi new array insn:::mv->visitMultiANewArrayInsn->if->for->i->pushValue
AdviceAdapter#visitTypeInsn(int, String)::: advice adapter visit type insn:::mv->visitTypeInsn->if->pushValue
AdviceAdapter#visitMethodInsn(int, String, String, String)::: advice adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
AdviceAdapter#visitMethodInsn(int, String, String, String, boolean)::: advice adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
AdviceAdapter#doVisitMethodInsn(int, String, String, String, boolean)::: advice adapter do visit method insn:::mv->visitMethodInsn->if->types->Type->getArgumentTypes->for->i->switch->popValue->break->type->popValue->if->onMethodEnter->break->returnType->Type->getReturnType->if->pushValue->if->returnType->getSize->pushValue
AdviceAdapter#visitInvokeDynamicInsn(String, String, Handle, Object...)::: advice adapter visit invoke dynamic insn:::mv->visitInvokeDynamicInsn->if->types->Type->getArgumentTypes->for->i->returnType->Type->getReturnType->if->pushValue->if->returnType->getSize->pushValue
AdviceAdapter#visitJumpInsn(int, Label)::: advice adapter visit jump insn:::mv->visitJumpInsn->if->switch->popValue->break->popValue->popValue->break->pushValue->break->addBranch
AdviceAdapter#visitLookupSwitchInsn(Label, int[], Label[])::: advice adapter visit lookup switch insn:::mv->visitLookupSwitchInsn->if->popValue->addBranches
AdviceAdapter#visitTableSwitchInsn(int, int, Label, Label...)::: advice adapter visit table switch insn:::mv->visitTableSwitchInsn->if->popValue->addBranches
AdviceAdapter#visitTryCatchBlock(Label, Label, Label, String)::: advice adapter visit try catch block:::super->visitTryCatchBlock->if->branches->containsKey->stackFrame->new->ArrayList<Object>->stackFrame->add->branches->put
AdviceAdapter#addBranches(Label, Label[])::: advice adapter add branches:::addBranch->for->i
AdviceAdapter#addBranch(Label)::: advice adapter add branch:::if->branches->containsKey->return->branches->new->ArrayList<Object>->put
AdviceAdapter#popValue()::: advice adapter pop value:::return->stackFrame->stackFrame->size->remove
AdviceAdapter#peekValue()::: advice adapter peek value:::return->stackFrame->stackFrame->size->get
AdviceAdapter#pushValue(Object)::: advice adapter push value:::stackFrame->add
AdviceAdapter#onMethodEnter():::Called at the beginning of the method or after super class call in the constructor:::
AdviceAdapter#onMethodExit(int):::Called before explicit exit from the method using either return or throw:::
AnalyzerAdapter#visitFrame(int, int, Object[], int, Object[])::: analyzer adapter visit frame:::if->throw->new->IllegalStateException->if->mv->visitFrame->if->clear->clear->else->new->ArrayList<Object>->new->ArrayList<Object>->visitFrameTypes->visitFrameTypes->Math->size->max
AnalyzerAdapter#visitFrameTypes(int, Object[], List)::: analyzer adapter visit frame types:::for->i
AnalyzerAdapter#visitInsn(int)::: analyzer adapter visit insn:::if->mv->visitInsn->execute->if
AnalyzerAdapter#visitIntInsn(int, int)::: analyzer adapter visit int insn:::if->mv->visitIntInsn->execute
AnalyzerAdapter#visitVarInsn(int, int)::: analyzer adapter visit var insn:::if->mv->visitVarInsn->execute
AnalyzerAdapter#visitTypeInsn(int, String)::: analyzer adapter visit type insn:::if->if->l->new->Label->new->ArrayList<Label>->labels->add->if->mv->visitLabel->for->i->labels->size->if->mv->visitTypeInsn->execute
AnalyzerAdapter#visitFieldInsn(int, String, String, String)::: analyzer adapter visit field insn:::if->mv->visitFieldInsn->execute
AnalyzerAdapter#visitMethodInsn(int, String, String, String)::: analyzer adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
AnalyzerAdapter#visitMethodInsn(int, String, String, String, boolean)::: analyzer adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
AnalyzerAdapter#doVisitMethodInsn(int, String, String, String, boolean)::: analyzer adapter do visit method insn:::if->mv->visitMethodInsn->if->return->pop->if->t->pop->if->name->charAt->u->if->else->uninitializedTypes->get->for->i->locals->size->for->i->stack->size->pushDesc
AnalyzerAdapter#visitInvokeDynamicInsn(String, String, Handle, Object...)::: analyzer adapter visit invoke dynamic insn:::if->mv->visitInvokeDynamicInsn->if->return->pop->pushDesc
AnalyzerAdapter#visitJumpInsn(int, Label)::: analyzer adapter visit jump insn:::if->mv->visitJumpInsn->execute->if
AnalyzerAdapter#visitLabel(Label)::: analyzer adapter visit label:::if->mv->visitLabel->if->new->ArrayList<Label>->labels->add
AnalyzerAdapter#visitLdcInsn(Object)::: analyzer adapter visit ldc insn:::if->mv->visitLdcInsn->if->return->if->push->else->if->push->push->else->if->push->else->if->push->push->else->if->push->else->if->sort->getSort->if->push->else->if->push->else->throw->new->IllegalArgumentException->else->if->push->else->throw->new->IllegalArgumentException
AnalyzerAdapter#visitIincInsn(int, int)::: analyzer adapter visit iinc insn:::if->mv->visitIincInsn->execute
AnalyzerAdapter#visitTableSwitchInsn(int, int, Label, Label...)::: analyzer adapter visit table switch insn:::if->mv->visitTableSwitchInsn->execute
AnalyzerAdapter#visitLookupSwitchInsn(Label, int[], Label[])::: analyzer adapter visit lookup switch insn:::if->mv->visitLookupSwitchInsn->execute
AnalyzerAdapter#visitMultiANewArrayInsn(String, int)::: analyzer adapter visit multi new array insn:::if->mv->visitMultiANewArrayInsn->execute
AnalyzerAdapter#visitMaxs(int, int)::: analyzer adapter visit maxs:::if->Math->max->Math->max->mv->visitMaxs
AnalyzerAdapter#get(int)::: analyzer adapter get:::Math->max->return->locals->size->locals->get
AnalyzerAdapter#set(int, Object)::: analyzer adapter set:::Math->max->while->locals->size->locals->add->locals->set
AnalyzerAdapter#push(Object)::: analyzer adapter push:::stack->add->Math->stack->size->max
AnalyzerAdapter#pushDesc(String)::: analyzer adapter push desc:::index->desc->charAt->desc->indexOf->switch->desc->charAt->return->push->return->push->return->push->push->return->push->push->return->if->push->else->desc->desc->length->substring->push->break->if->desc->desc->length->substring->push->else->desc->desc->length->substring->push
AnalyzerAdapter#pop()::: analyzer adapter pop:::return->stack->stack->size->remove
AnalyzerAdapter#pop(int)::: analyzer adapter pop:::size->stack->size->end->for->i
AnalyzerAdapter#pop(String)::: analyzer adapter pop:::c->desc->charAt->if->n->types->Type->getArgumentTypes->for->i->pop->else->if->pop->else->pop
AnalyzerAdapter#execute(int, int, String)::: analyzer adapter execute:::if->return->t1->t2->t3->t4->switch->break->push->break->push->break->push->push->break->push->break->push->push->break->get->push->break->get->push->push->break->pop->push->break->pop->push->push->break->pop->push->break->pop->push->push->break->pop->pop->if->substring->pushDesc->else->if->push->else->push->break->pop->set->if->get->if->set->break->pop->pop->set->set->if->get->if->set->break->pop->break->pop->break->pop->break->pop->break->pop->push->push->break->pop->pop->push->push->push->break->pop->pop->pop->push->push->push->push->break->pop->pop->push->push->push->push->break->pop->pop->pop->push->push->push->push->push->break->pop->pop->pop->pop->push->push->push->push->push->push->break->pop->pop->push->push->break->pop->push->break->pop->push->push->break->pop->push->break->pop->push->push->break->pop->push->push->break->set->break->pop->push->push->break->pop->push->break->pop->push->push->break->pop->push->break->pop->push->break->throw->new->RuntimeException->pushDesc->break->pop->break->pop->pushDesc->break->pop->pop->break->labels->get->push->break->pop->switch->pushDesc->break->pushDesc->break->pushDesc->break->pushDesc->break->pushDesc->break->pushDesc->break->pushDesc->break->pushDesc->break->break->pop->Type->getObjectType->pushDesc->break->pop->Type->getObjectType->getDescriptor->pushDesc->break->pop->pushDesc->break
AnnotationRemapper#visit(String, Object)::: annotation remapper visit:::av->remapper->mapValue->visit
AnnotationRemapper#visitEnum(String, String, String)::: annotation remapper visit enum:::av->remapper->mapDesc->visitEnum
AnnotationRemapper#visitAnnotation(String, String)::: annotation remapper visit annotation:::v->av->remapper->mapDesc->visitAnnotation->return->new->AnnotationRemapper
AnnotationRemapper#visitArray(String)::: annotation remapper visit array:::v->av->visitArray->return->new->AnnotationRemapper
ClassRemapper#visit(int, int, String, String, String, String[])::: class remapper visit:::super->remapper->mapType->remapper->mapSignature->remapper->mapType->remapper->mapTypes->visit
ClassRemapper#visitModule(String, int, String)::: class remapper visit module:::mv->super->remapper->mapModuleName->visitModule->return->createModuleRemapper
ClassRemapper#visitAnnotation(String, boolean)::: class remapper visit annotation:::av->super->remapper->mapDesc->visitAnnotation->return->createAnnotationRemapper
ClassRemapper#visitTypeAnnotation(int, TypePath, String, boolean)::: class remapper visit type annotation:::av->super->remapper->mapDesc->visitTypeAnnotation->return->createAnnotationRemapper
ClassRemapper#visitAttribute(Attribute)::: class remapper visit attribute:::if->hashesAttr->new->ModuleHashesAttribute->modules->for->i->modules->size->super->visitAttribute
ClassRemapper#visitField(int, String, String, String, Object)::: class remapper visit field:::fv->super->remapper->mapFieldName->remapper->mapDesc->remapper->mapSignature->remapper->mapValue->visitField->return->createFieldRemapper
ClassRemapper#visitMethod(int, String, String, String, String[])::: class remapper visit method:::newDesc->remapper->mapMethodDesc->mv->super->remapper->mapMethodName->remapper->mapSignature->remapper->mapTypes->visitMethod->return->createMethodRemapper
ClassRemapper#visitInnerClass(String, String, String, int)::: class remapper visit inner class:::super->remapper->mapType->remapper->mapType->visitInnerClass
ClassRemapper#visitOuterClass(String, String, String)::: class remapper visit outer class:::super->remapper->mapType->remapper->mapMethodName->remapper->mapMethodDesc->visitOuterClass
ClassRemapper#createFieldRemapper(FieldVisitor)::: class remapper create field remapper:::return->new->FieldRemapper
ClassRemapper#createMethodRemapper(MethodVisitor)::: class remapper create method remapper:::return->new->MethodRemapper
ClassRemapper#createAnnotationRemapper(AnnotationVisitor)::: class remapper create annotation remapper:::return->new->AnnotationRemapper
ClassRemapper#createModuleRemapper(ModuleVisitor)::: class remapper create module remapper:::return->new->ModuleRemapper
CodeSizeEvaluator#getMinSize()::: code size evaluator get min size:::return
CodeSizeEvaluator#getMaxSize()::: code size evaluator get max size:::return
CodeSizeEvaluator#visitInsn(int)::: code size evaluator visit insn:::if->mv->visitInsn
CodeSizeEvaluator#visitIntInsn(int, int)::: code size evaluator visit int insn:::if->else->if->mv->visitIntInsn
CodeSizeEvaluator#visitVarInsn(int, int)::: code size evaluator visit var insn:::if->else->if->else->if->mv->visitVarInsn
CodeSizeEvaluator#visitTypeInsn(int, String)::: code size evaluator visit type insn:::if->mv->visitTypeInsn
CodeSizeEvaluator#visitFieldInsn(int, String, String, String)::: code size evaluator visit field insn:::if->mv->visitFieldInsn
CodeSizeEvaluator#visitMethodInsn(int, String, String, String)::: code size evaluator visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
CodeSizeEvaluator#visitMethodInsn(int, String, String, String, boolean)::: code size evaluator visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
CodeSizeEvaluator#doVisitMethodInsn(int, String, String, String, boolean)::: code size evaluator do visit method insn:::if->else->if->mv->visitMethodInsn
CodeSizeEvaluator#visitInvokeDynamicInsn(String, String, Handle, Object...)::: code size evaluator visit invoke dynamic insn:::if->mv->visitInvokeDynamicInsn
CodeSizeEvaluator#visitJumpInsn(int, Label)::: code size evaluator visit jump insn:::if->else->if->mv->visitJumpInsn
CodeSizeEvaluator#visitLdcInsn(Object)::: code size evaluator visit ldc insn:::if->else->if->mv->visitLdcInsn
CodeSizeEvaluator#visitIincInsn(int, int)::: code size evaluator visit iinc insn:::if->else->if->mv->visitIincInsn
CodeSizeEvaluator#visitTableSwitchInsn(int, int, Label, Label...)::: code size evaluator visit table switch insn:::if->mv->visitTableSwitchInsn
CodeSizeEvaluator#visitLookupSwitchInsn(Label, int[], Label[])::: code size evaluator visit lookup switch insn:::if->mv->visitLookupSwitchInsn
CodeSizeEvaluator#visitMultiANewArrayInsn(String, int)::: code size evaluator visit multi new array insn:::if->mv->visitMultiANewArrayInsn
FieldRemapper#visitAnnotation(String, boolean)::: field remapper visit annotation:::av->fv->remapper->mapDesc->visitAnnotation->return->new->AnnotationRemapper
FieldRemapper#visitTypeAnnotation(int, TypePath, String, boolean)::: field remapper visit type annotation:::av->super->remapper->mapDesc->visitTypeAnnotation->return->new->AnnotationRemapper
GeneratorAdapter#getInternalNames(Type[]):::Returns the internal names of the given types.:::if->return->names->new->StringArr->for->i->return
GeneratorAdapter#push(boolean):::Generates the instruction to push the given value on the stack.:::push
GeneratorAdapter#push(int):::Generates the instruction to push the given value on the stack.:::if->mv->visitInsn->else->if->mv->visitIntInsn->else->if->mv->visitIntInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(long):::Generates the instruction to push the given value on the stack.:::if->mv->visitInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(float):::Generates the instruction to push the given value on the stack.:::bits->Float->floatToIntBits->if->mv->visitInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(double):::Generates the instruction to push the given value on the stack.:::bits->Double->doubleToLongBits->if->mv->visitInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(String):::Generates the instruction to push the given value on the stack.:::if->mv->visitInsn->else->mv->visitLdcInsn
GeneratorAdapter#push(Type):::Generates the instruction to push the given value on the stack.:::if->mv->visitInsn->else->switch->value->getSort->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitFieldInsn->break->mv->visitLdcInsn
GeneratorAdapter#push(Handle):::Generates the instruction to push a handle on the stack.:::mv->visitLdcInsn
GeneratorAdapter#getArgIndex(int):::Returns the index of the given method argument in the frame's local variables array.:::index->for->i->return
GeneratorAdapter#loadInsn(Type, int):::Generates the instruction to push a local variable on the stack.:::mv->type->getOpcode->visitVarInsn
GeneratorAdapter#storeInsn(Type, int):::Generates the instruction to store the top stack value in a local variable.:::mv->type->getOpcode->visitVarInsn
GeneratorAdapter#loadThis():::Generates the instruction to load 'this' on the stack.:::if->throw->new->IllegalStateException->mv->visitVarInsn
GeneratorAdapter#loadArg(int):::Generates the instruction to load the given method argument on the stack.:::getArgIndex->loadInsn
GeneratorAdapter#loadArgs(int, int):::Generates the instructions to load the given method arguments on the stack.:::index->getArgIndex->for->i
GeneratorAdapter#loadArgs():::Generates the instructions to load all the method arguments on the stack.:::loadArgs
GeneratorAdapter#loadArgArray():::Generates the instructions to load all the method arguments on the stack, as a single object array.:::push->newArray->for->i
GeneratorAdapter#storeArg(int):::Generates the instruction to store the top stack value in the given method argument.:::getArgIndex->storeInsn
GeneratorAdapter#getLocalType(int):::Returns the type of the given local variable.:::return->localTypes->get
GeneratorAdapter#setLocalType(int, Type)::: generator adapter set local type:::index->while->localTypes->size->localTypes->add->localTypes->set
GeneratorAdapter#loadLocal(int):::Generates the instruction to load the given local variable on the stack.:::getLocalType->loadInsn
GeneratorAdapter#loadLocal(int, Type):::Generates the instruction to load the given local variable on the stack.:::setLocalType->loadInsn
GeneratorAdapter#storeLocal(int):::Generates the instruction to store the top stack value in the given local variable.:::getLocalType->storeInsn
GeneratorAdapter#storeLocal(int, Type):::Generates the instruction to store the top stack value in the given local variable.:::setLocalType->storeInsn
GeneratorAdapter#arrayLoad(Type):::Generates the instruction to load an element from an array.:::mv->type->getOpcode->visitInsn
GeneratorAdapter#arrayStore(Type):::Generates the instruction to store an element in an array.:::mv->type->getOpcode->visitInsn
GeneratorAdapter#pop():::Generates a POP instruction.:::mv->visitInsn
GeneratorAdapter#pop2():::Generates a POP2 instruction.:::mv->visitInsn
GeneratorAdapter#dup():::Generates a DUP instruction.:::mv->visitInsn
GeneratorAdapter#dup2():::Generates a DUP2 instruction.:::mv->visitInsn
GeneratorAdapter#dupX1():::Generates a DUP_X1 instruction.:::mv->visitInsn
GeneratorAdapter#dupX2():::Generates a DUP_X2 instruction.:::mv->visitInsn
GeneratorAdapter#dup2X1():::Generates a DUP2_X1 instruction.:::mv->visitInsn
GeneratorAdapter#dup2X2():::Generates a DUP2_X2 instruction.:::mv->visitInsn
GeneratorAdapter#swap():::Generates a SWAP instruction.:::mv->visitInsn
GeneratorAdapter#swap(Type, Type):::Generates the instructions to swap the top two stack values.:::if->type->getSize->if->prev->getSize->swap->else->dupX2->pop->else->if->prev->getSize->dup2X1->pop2->else->dup2X2->pop2
GeneratorAdapter#math(int, Type):::Generates the instruction to do the specified mathematical or logical operation.:::mv->type->getOpcode->visitInsn
GeneratorAdapter#not():::Generates the instructions to compute the bitwise negation of the top stack value.:::mv->visitInsn->mv->visitInsn
GeneratorAdapter#iinc(int, int):::Generates the instruction to increment the given local variable.:::mv->visitIincInsn
GeneratorAdapter#cast(Type, Type):::Generates the instructions to cast a numerical value from one type to another.:::if->if->if->mv->visitInsn->else->if->mv->visitInsn->else->mv->visitInsn->cast->else->if->if->mv->visitInsn->else->if->mv->visitInsn->else->mv->visitInsn->cast->else->if->if->mv->visitInsn->else->if->mv->visitInsn->else->mv->visitInsn->cast->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn
GeneratorAdapter#getBoxedType(Type)::: generator adapter get boxed type:::switch->type->getSort->return->return->return->return->return->return->return->return->return
GeneratorAdapter#box(Type):::Generates the instructions to box the top stack value:::if->type->getSort->type->getSort->return->if->push->else->boxed->getBoxedType->newInstance->if->type->getSize->dupX2->dupX2->pop->else->dupX1->swap->new->TypeArr->new->Method->invokeConstructor
GeneratorAdapter#valueOf(Type):::Generates the instructions to box the top stack value using Java 5's valueOf() method:::if->type->getSort->type->getSort->return->if->push->else->boxed->getBoxedType->new->TypeArr->new->Method->invokeStatic
GeneratorAdapter#unbox(Type):::Generates the instructions to unbox the top stack value:::t->sig->switch->type->getSort->return->break->break->break->break->break->if->checkCast->else->checkCast->invokeVirtual
GeneratorAdapter#newLabel():::Creates a new Label.:::return->new->Label
GeneratorAdapter#mark(Label):::Marks the current code position with the given label.:::mv->visitLabel
GeneratorAdapter#mark():::Marks the current code position with a new label.:::label->new->Label->mv->visitLabel->return
GeneratorAdapter#ifCmp(Type, int, Label):::Generates the instructions to jump to a label based on the comparison of the top two stack values.:::switch->type->getSort->mv->visitInsn->break->mv->visitInsn->break->mv->visitInsn->break->switch->mv->visitJumpInsn->return->mv->visitJumpInsn->return->throw->new->IllegalArgumentException->intOp->switch->break->break->break->break->break->break->mv->visitJumpInsn->return->mv->visitJumpInsn
GeneratorAdapter#ifICmp(int, Label):::Generates the instructions to jump to a label based on the comparison of the top two integer stack values.:::ifCmp
GeneratorAdapter#ifZCmp(int, Label):::Generates the instructions to jump to a label based on the comparison of the top integer stack value with zero.:::mv->visitJumpInsn
GeneratorAdapter#ifNull(Label):::Generates the instruction to jump to the given label if the top stack value is null.:::mv->visitJumpInsn
GeneratorAdapter#ifNonNull(Label):::Generates the instruction to jump to the given label if the top stack value is not null.:::mv->visitJumpInsn
GeneratorAdapter#goTo(Label):::Generates the instruction to jump to the given label.:::mv->visitJumpInsn
GeneratorAdapter#ret(int):::Generates a RET instruction.:::mv->visitVarInsn
GeneratorAdapter#tableSwitch(int[], TableSwitchGenerator):::Generates the instructions for a switch statement.:::density->if->else->tableSwitch
GeneratorAdapter#tableSwitch(int[], TableSwitchGenerator, boolean):::Generates the instructions for a switch statement.:::for->i->def->newLabel->end->newLabel->if->len->min->max->range->if->labels->new->LabelArr->Arrays->fill->for->i->mv->visitTableSwitchInsn->for->i->else->labels->new->LabelArr->for->i->mv->visitLookupSwitchInsn->for->i->mark->generator->generateDefault->mark
GeneratorAdapter#returnValue():::Generates the instruction to return the top stack value to the caller.:::mv->returnType->getOpcode->visitInsn
GeneratorAdapter#fieldInsn(int, Type, String, Type):::Generates a get field or set field instruction.:::mv->ownerType->getInternalName->fieldType->getDescriptor->visitFieldInsn
GeneratorAdapter#getStatic(Type, String, Type):::Generates the instruction to push the value of a static field on the stack.:::fieldInsn
GeneratorAdapter#putStatic(Type, String, Type):::Generates the instruction to store the top stack value in a static field.:::fieldInsn
GeneratorAdapter#getField(Type, String, Type):::Generates the instruction to push the value of a non static field on the stack.:::fieldInsn
GeneratorAdapter#putField(Type, String, Type):::Generates the instruction to store the top stack value in a non static field.:::fieldInsn
GeneratorAdapter#invokeInsn(int, Type, Method, boolean):::Generates an invoke method instruction.:::owner->type->getSort->type->getDescriptor->type->getInternalName->mv->method->getName->method->getDescriptor->visitMethodInsn
GeneratorAdapter#invokeVirtual(Type, Method):::Generates the instruction to invoke a normal method.:::invokeInsn
GeneratorAdapter#invokeConstructor(Type, Method):::Generates the instruction to invoke a constructor.:::invokeInsn
GeneratorAdapter#invokeStatic(Type, Method):::Generates the instruction to invoke a static method.:::invokeInsn
GeneratorAdapter#invokeInterface(Type, Method):::Generates the instruction to invoke an interface method.:::invokeInsn
GeneratorAdapter#invokeDynamic(String, String, Handle, Object...):::Generates an invokedynamic instruction.:::mv->visitInvokeDynamicInsn
GeneratorAdapter#typeInsn(int, Type):::Generates a type dependent instruction.:::mv->type->getInternalName->visitTypeInsn
GeneratorAdapter#newInstance(Type):::Generates the instruction to create a new object.:::typeInsn
GeneratorAdapter#newArray(Type):::Generates the instruction to create a new array.:::typ->switch->type->getSort->break->break->break->break->break->break->break->break->typeInsn->return->mv->visitIntInsn
GeneratorAdapter#arrayLength():::Generates the instruction to compute the length of an array.:::mv->visitInsn
GeneratorAdapter#throwException():::Generates the instruction to throw an exception.:::mv->visitInsn
GeneratorAdapter#throwException(Type, String):::Generates the instructions to create and throw an exception:::newInstance->dup->push->Method->getMethod->invokeConstructor->throwException
GeneratorAdapter#checkCast(Type):::Generates the instruction to check that the top stack value is of the given type.:::if->type->equals->typeInsn
GeneratorAdapter#instanceOf(Type):::Generates the instruction to test if the top stack value is of the given type.:::typeInsn
GeneratorAdapter#monitorEnter():::Generates the instruction to get the monitor of the top stack value.:::mv->visitInsn
GeneratorAdapter#monitorExit():::Generates the instruction to release the monitor of the top stack value.:::mv->visitInsn
GeneratorAdapter#endMethod():::Marks the end of the visited method.:::if->mv->visitMaxs->mv->visitEnd
GeneratorAdapter#catchException(Label, Label, Type):::Marks the start of an exception handler.:::doCatch->new->Label->if->mv->visitTryCatchBlock->else->mv->exception->getInternalName->visitTryCatchBlock->mark
InstructionAdapter#visitInsn(int)::: instruction adapter visit insn:::switch->nop->break->aconst->break->iconst->break->lconst->break->fconst->break->dconst->break->aload->break->aload->break->aload->break->aload->break->aload->break->aload->break->aload->break->aload->break->astore->break->astore->break->astore->break->astore->break->astore->break->astore->break->astore->break->astore->break->pop->break->pop2->break->dup->break->dupX1->break->dupX2->break->dup2->break->dup2X1->break->dup2X2->break->swap->break->add->break->add->break->add->break->add->break->sub->break->sub->break->sub->break->sub->break->mul->break->mul->break->mul->break->mul->break->div->break->div->break->div->break->div->break->rem->break->rem->break->rem->break->rem->break->neg->break->neg->break->neg->break->neg->break->shl->break->shl->break->shr->break->shr->break->ushr->break->ushr->break->and->break->and->break->or->break->or->break->xor->break->xor->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->cast->break->lcmp->break->cmpl->break->cmpg->break->cmpl->break->cmpg->break->areturn->break->areturn->break->areturn->break->areturn->break->areturn->break->areturn->break->arraylength->break->athrow->break->monitorenter->break->monitorexit->break->throw->new->IllegalArgumentException
InstructionAdapter#visitIntInsn(int, int)::: instruction adapter visit int insn:::switch->iconst->break->iconst->break->switch->newarray->break->newarray->break->newarray->break->newarray->break->newarray->break->newarray->break->newarray->break->newarray->break->throw->new->IllegalArgumentException->break->throw->new->IllegalArgumentException
InstructionAdapter#visitVarInsn(int, int)::: instruction adapter visit var insn:::switch->load->break->load->break->load->break->load->break->load->break->store->break->store->break->store->break->store->break->store->break->ret->break->throw->new->IllegalArgumentException
InstructionAdapter#visitTypeInsn(int, String)::: instruction adapter visit type insn:::t->Type->getObjectType->switch->anew->break->newarray->break->checkcast->break->instanceOf->break->throw->new->IllegalArgumentException
InstructionAdapter#visitFieldInsn(int, String, String, String)::: instruction adapter visit field insn:::switch->getstatic->break->putstatic->break->getfield->break->putfield->break->throw->new->IllegalArgumentException
InstructionAdapter#visitMethodInsn(int, String, String, String)::: instruction adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
InstructionAdapter#visitMethodInsn(int, String, String, String, boolean)::: instruction adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
InstructionAdapter#doVisitMethodInsn(int, String, String, String, boolean)::: instruction adapter do visit method insn:::switch->invokespecial->break->invokevirtual->break->invokestatic->break->invokeinterface->break->throw->new->IllegalArgumentException
InstructionAdapter#visitInvokeDynamicInsn(String, String, Handle, Object...)::: instruction adapter visit invoke dynamic insn:::invokedynamic
InstructionAdapter#visitJumpInsn(int, Label)::: instruction adapter visit jump insn:::switch->ifeq->break->ifne->break->iflt->break->ifge->break->ifgt->break->ifle->break->ificmpeq->break->ificmpne->break->ificmplt->break->ificmpge->break->ificmpgt->break->ificmple->break->ifacmpeq->break->ifacmpne->break->goTo->break->jsr->break->ifnull->break->ifnonnull->break->throw->new->IllegalArgumentException
InstructionAdapter#visitLabel(Label)::: instruction adapter visit label:::mark
InstructionAdapter#visitLdcInsn(Object)::: instruction adapter visit ldc insn:::if->val->intValue->iconst->else->if->val->intValue->iconst->else->if->val->charValue->iconst->else->if->val->intValue->iconst->else->if->val->booleanValue->iconst->else->if->val->floatValue->fconst->else->if->val->longValue->lconst->else->if->val->doubleValue->dconst->else->if->aconst->else->if->tconst->else->if->hconst->else->throw->new->IllegalArgumentException
InstructionAdapter#visitIincInsn(int, int)::: instruction adapter visit iinc insn:::iinc
InstructionAdapter#visitTableSwitchInsn(int, int, Label, Label...)::: instruction adapter visit table switch insn:::tableswitch
InstructionAdapter#visitLookupSwitchInsn(Label, int[], Label[])::: instruction adapter visit lookup switch insn:::lookupswitch
InstructionAdapter#visitMultiANewArrayInsn(String, int)::: instruction adapter visit multi new array insn:::multianewarray
InstructionAdapter#nop()::: instruction adapter nop:::mv->visitInsn
InstructionAdapter#aconst(Object)::: instruction adapter aconst:::if->mv->visitInsn->else->mv->visitLdcInsn
InstructionAdapter#iconst(int)::: instruction adapter iconst:::if->mv->visitInsn->else->if->mv->visitIntInsn->else->if->mv->visitIntInsn->else->mv->visitLdcInsn
InstructionAdapter#lconst(long)::: instruction adapter lconst:::if->mv->visitInsn->else->mv->visitLdcInsn
InstructionAdapter#fconst(float)::: instruction adapter fconst:::bits->Float->floatToIntBits->if->mv->visitInsn->else->mv->visitLdcInsn
InstructionAdapter#dconst(double)::: instruction adapter dconst:::bits->Double->doubleToLongBits->if->mv->visitInsn->else->mv->visitLdcInsn
InstructionAdapter#tconst(Type)::: instruction adapter tconst:::mv->visitLdcInsn
InstructionAdapter#hconst(Handle)::: instruction adapter hconst:::mv->visitLdcInsn
InstructionAdapter#load(int, Type)::: instruction adapter load:::mv->type->getOpcode->visitVarInsn
InstructionAdapter#aload(Type)::: instruction adapter aload:::mv->type->getOpcode->visitInsn
InstructionAdapter#store(int, Type)::: instruction adapter store:::mv->type->getOpcode->visitVarInsn
InstructionAdapter#astore(Type)::: instruction adapter astore:::mv->type->getOpcode->visitInsn
InstructionAdapter#pop()::: instruction adapter pop:::mv->visitInsn
InstructionAdapter#pop2()::: instruction adapter pop2:::mv->visitInsn
InstructionAdapter#dup()::: instruction adapter dup:::mv->visitInsn
InstructionAdapter#dup2()::: instruction adapter dup2:::mv->visitInsn
InstructionAdapter#dupX1()::: instruction adapter dup x1:::mv->visitInsn
InstructionAdapter#dupX2()::: instruction adapter dup x2:::mv->visitInsn
InstructionAdapter#dup2X1()::: instruction adapter dup2 x1:::mv->visitInsn
InstructionAdapter#dup2X2()::: instruction adapter dup2 x2:::mv->visitInsn
InstructionAdapter#swap()::: instruction adapter swap:::mv->visitInsn
InstructionAdapter#add(Type)::: instruction adapter add:::mv->type->getOpcode->visitInsn
InstructionAdapter#sub(Type)::: instruction adapter sub:::mv->type->getOpcode->visitInsn
InstructionAdapter#mul(Type)::: instruction adapter mul:::mv->type->getOpcode->visitInsn
InstructionAdapter#div(Type)::: instruction adapter div:::mv->type->getOpcode->visitInsn
InstructionAdapter#rem(Type)::: instruction adapter rem:::mv->type->getOpcode->visitInsn
InstructionAdapter#neg(Type)::: instruction adapter neg:::mv->type->getOpcode->visitInsn
InstructionAdapter#shl(Type)::: instruction adapter shl:::mv->type->getOpcode->visitInsn
InstructionAdapter#shr(Type)::: instruction adapter shr:::mv->type->getOpcode->visitInsn
InstructionAdapter#ushr(Type)::: instruction adapter ushr:::mv->type->getOpcode->visitInsn
InstructionAdapter#and(Type)::: instruction adapter and:::mv->type->getOpcode->visitInsn
InstructionAdapter#or(Type)::: instruction adapter or:::mv->type->getOpcode->visitInsn
InstructionAdapter#xor(Type)::: instruction adapter xor:::mv->type->getOpcode->visitInsn
InstructionAdapter#iinc(int, int)::: instruction adapter iinc:::mv->visitIincInsn
InstructionAdapter#cast(Type, Type)::: instruction adapter cast:::if->if->if->mv->visitInsn->else->if->mv->visitInsn->else->mv->visitInsn->cast->else->if->if->mv->visitInsn->else->if->mv->visitInsn->else->mv->visitInsn->cast->else->if->if->mv->visitInsn->else->if->mv->visitInsn->else->mv->visitInsn->cast->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn->else->if->mv->visitInsn
InstructionAdapter#lcmp()::: instruction adapter lcmp:::mv->visitInsn
InstructionAdapter#cmpl(Type)::: instruction adapter cmpl:::mv->visitInsn
InstructionAdapter#cmpg(Type)::: instruction adapter cmpg:::mv->visitInsn
InstructionAdapter#ifeq(Label)::: instruction adapter ifeq:::mv->visitJumpInsn
InstructionAdapter#ifne(Label)::: instruction adapter ifne:::mv->visitJumpInsn
InstructionAdapter#iflt(Label)::: instruction adapter iflt:::mv->visitJumpInsn
InstructionAdapter#ifge(Label)::: instruction adapter ifge:::mv->visitJumpInsn
InstructionAdapter#ifgt(Label)::: instruction adapter ifgt:::mv->visitJumpInsn
InstructionAdapter#ifle(Label)::: instruction adapter ifle:::mv->visitJumpInsn
InstructionAdapter#ificmpeq(Label)::: instruction adapter ificmpeq:::mv->visitJumpInsn
InstructionAdapter#ificmpne(Label)::: instruction adapter ificmpne:::mv->visitJumpInsn
InstructionAdapter#ificmplt(Label)::: instruction adapter ificmplt:::mv->visitJumpInsn
InstructionAdapter#ificmpge(Label)::: instruction adapter ificmpge:::mv->visitJumpInsn
InstructionAdapter#ificmpgt(Label)::: instruction adapter ificmpgt:::mv->visitJumpInsn
InstructionAdapter#ificmple(Label)::: instruction adapter ificmple:::mv->visitJumpInsn
InstructionAdapter#ifacmpeq(Label)::: instruction adapter ifacmpeq:::mv->visitJumpInsn
InstructionAdapter#ifacmpne(Label)::: instruction adapter ifacmpne:::mv->visitJumpInsn
InstructionAdapter#goTo(Label)::: instruction adapter go to:::mv->visitJumpInsn
InstructionAdapter#jsr(Label)::: instruction adapter jsr:::mv->visitJumpInsn
InstructionAdapter#ret(int)::: instruction adapter ret:::mv->visitVarInsn
InstructionAdapter#tableswitch(int, int, Label, Label...)::: instruction adapter tableswitch:::mv->visitTableSwitchInsn
InstructionAdapter#lookupswitch(Label, int[], Label[])::: instruction adapter lookupswitch:::mv->visitLookupSwitchInsn
InstructionAdapter#areturn(Type)::: instruction adapter areturn:::mv->t->getOpcode->visitInsn
InstructionAdapter#getstatic(String, String, String)::: instruction adapter getstatic:::mv->visitFieldInsn
InstructionAdapter#putstatic(String, String, String)::: instruction adapter putstatic:::mv->visitFieldInsn
InstructionAdapter#getfield(String, String, String)::: instruction adapter getfield:::mv->visitFieldInsn
InstructionAdapter#putfield(String, String, String)::: instruction adapter putfield:::mv->visitFieldInsn
InstructionAdapter#invokevirtual(String, String, String)::: instruction adapter invokevirtual:::if->invokevirtual->return->mv->visitMethodInsn
InstructionAdapter#invokevirtual(String, String, String, boolean)::: instruction adapter invokevirtual:::if->if->throw->new->IllegalArgumentException->invokevirtual->return->mv->visitMethodInsn
InstructionAdapter#invokespecial(String, String, String)::: instruction adapter invokespecial:::if->invokespecial->return->mv->visitMethodInsn
InstructionAdapter#invokespecial(String, String, String, boolean)::: instruction adapter invokespecial:::if->if->throw->new->IllegalArgumentException->invokespecial->return->mv->visitMethodInsn
InstructionAdapter#invokestatic(String, String, String)::: instruction adapter invokestatic:::if->invokestatic->return->mv->visitMethodInsn
InstructionAdapter#invokestatic(String, String, String, boolean)::: instruction adapter invokestatic:::if->if->throw->new->IllegalArgumentException->invokestatic->return->mv->visitMethodInsn
InstructionAdapter#invokeinterface(String, String, String)::: instruction adapter invokeinterface:::mv->visitMethodInsn
InstructionAdapter#invokedynamic(String, String, Handle, Object[])::: instruction adapter invokedynamic:::mv->visitInvokeDynamicInsn
InstructionAdapter#anew(Type)::: instruction adapter anew:::mv->type->getInternalName->visitTypeInsn
InstructionAdapter#newarray(Type)::: instruction adapter newarray:::typ->switch->type->getSort->break->break->break->break->break->break->break->break->mv->type->getInternalName->visitTypeInsn->return->mv->visitIntInsn
InstructionAdapter#arraylength()::: instruction adapter arraylength:::mv->visitInsn
InstructionAdapter#athrow()::: instruction adapter athrow:::mv->visitInsn
InstructionAdapter#checkcast(Type)::: instruction adapter checkcast:::mv->type->getInternalName->visitTypeInsn
InstructionAdapter#instanceOf(Type)::: instruction adapter instance of:::mv->type->getInternalName->visitTypeInsn
InstructionAdapter#monitorenter()::: instruction adapter monitorenter:::mv->visitInsn
InstructionAdapter#monitorexit()::: instruction adapter monitorexit:::mv->visitInsn
InstructionAdapter#multianewarray(String, int)::: instruction adapter multianewarray:::mv->visitMultiANewArrayInsn
InstructionAdapter#ifnull(Label)::: instruction adapter ifnull:::mv->visitJumpInsn
InstructionAdapter#ifnonnull(Label)::: instruction adapter ifnonnull:::mv->visitJumpInsn
InstructionAdapter#mark(Label)::: instruction adapter mark:::mv->visitLabel
JSRInlinerAdapter#visitJumpInsn(int, Label):::Detects a JSR instruction and sets a flag to indicate we will need to do inlining.:::super->visitJumpInsn->ln->instructions->getLast->if->subroutineHeads->containsKey->subroutineHeads->new->BitSet->put
JSRInlinerAdapter#visitEnd():::If any JSRs were seen, triggers the inlining process:::if->subroutineHeads->isEmpty->markSubroutines->if->mainSubroutine->toString->log->it->subroutineHeads->values->iterator->while->it->hasNext->sub->it->next->sub->toString->log->emitCode->if->accept
JSRInlinerAdapter#markSubroutines():::Walks the method and determines which internal subroutine(s), if any, each instruction is a method of.:::anyvisited->new->BitSet->markSubroutineWalk->for->it->subroutineHeads->entrySet->iterator->it->hasNext
JSRInlinerAdapter#markSubroutineWalk(BitSet, int, BitSet):::Performs a depth first search walking the normal byte code path starting at index, and adding each instruction encountered into the subroutine sub:::if->log->markSubroutineWalkDFS->loop->while->for->it->tryCatchBlocks->iterator->it->hasNext
JSRInlinerAdapter#markSubroutineWalkDFS(BitSet, int, BitSet):::Performs a simple DFS of the instructions, assigning each to the subroutine sub:::while->node->instructions->get->if->sub->get->return->sub->set->if->anyvisited->get->dualCitizens->set->if->log->anyvisited->set->if->node->getType->node->getOpcode->jnode->destidx->instructions->indexOf->markSubroutineWalkDFS->if->node->getType->tsnode->destidx->instructions->indexOf->markSubroutineWalkDFS->for->i->size->if->node->getType->lsnode->destidx->instructions->indexOf->markSubroutineWalkDFS->for->i->size->switch->instructions->get->getOpcode->return->if->instructions->size->return
JSRInlinerAdapter#emitCode():::Creates the new instructions, inlining each instantiation of each subroutine until the code is fully elaborated.:::worklist->new->LinkedList<Instantiation>->worklist->new->Instantiation->add->newInstructions->new->InsnList->newTryCatchBlocks->new->ArrayList<TryCatchBlockNode>->newLocalVariables->new->ArrayList<LocalVariableNode>->while->worklist->isEmpty->inst->worklist->removeFirst->emitSubroutine
JSRInlinerAdapter#emitSubroutine(Instantiation, List, InsnList, List, List):::Emits one instantiation of one subroutine, specified by instant:::duplbl->if->log->log->for->i->c->instructions->size->for->it->tryCatchBlocks->iterator->it->hasNext->for->it->localVariables->iterator->it->hasNext
JSRInlinerAdapter#log(String)::: inliner adapter log:::println
JSRInlinerAdapter.Instantiation#findOwner(int):::Returns the "owner" of a particular instruction relative to this instantiation: the owner referes to the Instantiation which will emit the version of this instruction that we will execute:::if->subroutine->get->return->if->dualCitizens->get->return->own->for->p->return
JSRInlinerAdapter.Instantiation#gotoLabel(LabelNode):::Looks up the label l in the gotoTable, thus translating it from a Label in the original code, to a Label in the inlined code that is appropriate for use by an instruction that branched to the original label.:::owner->instructions->indexOf->findOwner->return->get
JSRInlinerAdapter.Instantiation#rangeLabel(LabelNode):::Looks up the label l in the rangeTable, thus translating it from a Label in the original code, to a Label in the inlined code that is appropriate for use by an try/catch or variable use annotation.:::return->rangeTable->get
JSRInlinerAdapter.Instantiation#entrySet()::: instantiation entry set:::return
JSRInlinerAdapter.Instantiation#get(Object)::: instantiation get:::return->gotoLabel
LocalVariablesSorter#visitVarInsn(int, int)::: local variables sorter visit var insn:::type->switch->break->break->break->break->break->mv->remap->visitVarInsn
LocalVariablesSorter#visitIincInsn(int, int)::: local variables sorter visit iinc insn:::mv->remap->visitIincInsn
LocalVariablesSorter#visitMaxs(int, int)::: local variables sorter visit maxs:::mv->visitMaxs
LocalVariablesSorter#visitLocalVariable(String, String, String, Label, Label, int)::: local variables sorter visit local variable:::newIndex->Type->getType->remap->mv->visitLocalVariable
LocalVariablesSorter#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean)::: local variables sorter visit local variable annotation:::t->Type->getType->newIndex->new->intArr->for->i->return->mv->visitLocalVariableAnnotation
LocalVariablesSorter#visitFrame(int, int, Object[], int, Object[])::: local variables sorter visit frame:::if->throw->new->IllegalStateException->oldLocals->new->ObjectArr->System->arraycopy->updateNewLocals->index->number->for->for->i->mv->visitFrame
LocalVariablesSorter#newLocal(Type):::Creates a new local variable of the given type.:::t->switch->type->getSort->break->break->break->break->type->getDescriptor->break->type->getInternalName->break->local->newLocalMapping->setLocalType->setFrameLocal->return
LocalVariablesSorter#updateNewLocals(Object[]):::Notifies subclasses that a new stack map frame is being visited:::
LocalVariablesSorter#setLocalType(int, Type):::Notifies subclasses that a local variable has been added or remapped:::
LocalVariablesSorter#setFrameLocal(int, Object)::: local variables sorter set frame local:::l->if->a->Math->max->new->ObjectArr->System->arraycopy
LocalVariablesSorter#remap(int, Type)::: local variables sorter remap:::if->type->getSize->return->key->type->getSize->size->if->newMapping->Math->max->new->intArr->System->arraycopy->value->if->newLocalMapping->setLocalType->else->return
LocalVariablesSorter#newLocalMapping(Type)::: local variables sorter new local mapping:::local->type->getSize->return
Method#getMethod(java.lang.reflect.Method):::Creates a new Method.:::return->m->getName->Type->getMethodDescriptor->new->Method
Method#getMethod(java.lang.reflect.Constructor):::Creates a new Method.:::return->Type->getConstructorDescriptor->new->Method
Method#getMethod(String):::Returns a Method corresponding to the given Java method declaration.:::return->getMethod
Method#getMethod(String, boolean):::Returns a Method corresponding to the given Java method declaration.:::space->method->indexOf->start->method->indexOf->end->method->indexOf->if->throw->new->IllegalArgumentException->returnType->method->substring->methodName->method->substring->trim->sb->new->StringBuilder->sb->append->p->do->s->method->indexOf->if->method->substring->trim->map->else->method->substring->trim->map->sb->append->while->sb->append->sb->map->append->return->sb->toString->new->Method
Method#map(String, boolean)::: method map:::if->equals->return->sb->new->StringBuilder->index->while->type->indexOf->sb->append->t->type->type->length->sb->length->substring->desc->DESCRIPTORS->get->if->sb->append->else->sb->append->if->t->indexOf->if->sb->append->sb->append->else->sb->t->replace->append->sb->append->return->sb->toString
Method#getName():::Returns the name of the method described by this object.:::return
Method#getDescriptor():::Returns the descriptor of the method described by this object.:::return
Method#getReturnType():::Returns the return type of the method described by this object.:::return->Type->getReturnType
Method#getArgumentTypes():::Returns the argument types of the method described by this object.:::return->Type->getArgumentTypes
Method#toString()::: method to string:::return
Method#equals(Object)::: method equals:::if->return->other->return->name->equals->desc->equals
Method#hashCode()::: method hash code:::return->name->hashCode->desc->hashCode
MethodRemapper#visitAnnotationDefault()::: method remapper visit annotation default:::av->super->visitAnnotationDefault->return->new->AnnotationRemapper
MethodRemapper#visitAnnotation(String, boolean)::: method remapper visit annotation:::av->super->remapper->mapDesc->visitAnnotation->return->new->AnnotationRemapper
MethodRemapper#visitTypeAnnotation(int, TypePath, String, boolean)::: method remapper visit type annotation:::av->super->remapper->mapDesc->visitTypeAnnotation->return->new->AnnotationRemapper
MethodRemapper#visitParameterAnnotation(int, String, boolean)::: method remapper visit parameter annotation:::av->super->remapper->mapDesc->visitParameterAnnotation->return->new->AnnotationRemapper
MethodRemapper#visitFrame(int, int, Object[], int, Object[])::: method remapper visit frame:::super->remapEntries->remapEntries->visitFrame
MethodRemapper#remapEntries(int, Object[])::: method remapper remap entries:::if->for->i->return
MethodRemapper#visitFieldInsn(int, String, String, String)::: method remapper visit field insn:::super->remapper->mapType->remapper->mapFieldName->remapper->mapDesc->visitFieldInsn
MethodRemapper#visitMethodInsn(int, String, String, String)::: method remapper visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
MethodRemapper#visitMethodInsn(int, String, String, String, boolean)::: method remapper visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
MethodRemapper#doVisitMethodInsn(int, String, String, String, boolean)::: method remapper do visit method insn:::if->mv->remapper->mapType->remapper->mapMethodName->remapper->mapMethodDesc->visitMethodInsn
MethodRemapper#visitInvokeDynamicInsn(String, String, Handle, Object...)::: method remapper visit invoke dynamic insn:::for->i->super->remapper->mapInvokeDynamicMethodName->remapper->mapMethodDesc->remapper->mapValue->visitInvokeDynamicInsn
MethodRemapper#visitTypeInsn(int, String)::: method remapper visit type insn:::super->remapper->mapType->visitTypeInsn
MethodRemapper#visitLdcInsn(Object)::: method remapper visit ldc insn:::super->remapper->mapValue->visitLdcInsn
MethodRemapper#visitMultiANewArrayInsn(String, int)::: method remapper visit multi new array insn:::super->remapper->mapDesc->visitMultiANewArrayInsn
MethodRemapper#visitInsnAnnotation(int, TypePath, String, boolean)::: method remapper visit insn annotation:::av->super->remapper->mapDesc->visitInsnAnnotation->return->new->AnnotationRemapper
MethodRemapper#visitTryCatchBlock(Label, Label, Label, String)::: method remapper visit try catch block:::super->remapper->mapType->visitTryCatchBlock
MethodRemapper#visitTryCatchAnnotation(int, TypePath, String, boolean)::: method remapper visit try catch annotation:::av->super->remapper->mapDesc->visitTryCatchAnnotation->return->new->AnnotationRemapper
MethodRemapper#visitLocalVariable(String, String, String, Label, Label, int)::: method remapper visit local variable:::super->remapper->mapDesc->remapper->mapSignature->visitLocalVariable
MethodRemapper#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean)::: method remapper visit local variable annotation:::av->super->remapper->mapDesc->visitLocalVariableAnnotation->return->new->AnnotationRemapper
ModuleHashesAttribute#read(ClassReader, int, int, char[], int, Label[])::: module hashes attribute read:::hashAlgorithm->cr->readUTF8->count->cr->readUnsignedShort->modules->new->ArrayList<String>->hashes->new->ArrayList<byte[]>->for->i->return->new->ModuleHashesAttribute
ModuleHashesAttribute#write(ClassWriter, byte[], int, int, int)::: module hashes attribute write:::v->new->ByteVector->index->cw->newUTF8->v->putShort->count->modules->size->v->putShort->for->i->return
ModuleRemapper#visitMainClass(String)::: module remapper visit main class:::super->remapper->mapType->visitMainClass
ModuleRemapper#visitPackage(String)::: module remapper visit package:::super->remapper->mapPackageName->visitPackage
ModuleRemapper#visitRequire(String, int, String)::: module remapper visit require:::super->remapper->mapModuleName->visitRequire
ModuleRemapper#visitExport(String, int, String...)::: module remapper visit export:::newModules->if->new->StringArr->for->i->super->remapper->mapPackageName->visitExport
ModuleRemapper#visitOpen(String, int, String...)::: module remapper visit open:::newModules->if->new->StringArr->for->i->super->remapper->mapPackageName->visitOpen
ModuleRemapper#visitUse(String)::: module remapper visit use:::super->remapper->mapType->visitUse
ModuleRemapper#visitProvide(String, String...)::: module remapper visit provide:::newProviders->new->StringArr->for->i->super->remapper->mapType->visitProvide
ModuleResolutionAttribute#read(ClassReader, int, int, char[], int, Label[])::: module resolution attribute read:::resolution->cr->readUnsignedShort->return->new->ModuleResolutionAttribute
ModuleResolutionAttribute#write(ClassWriter, byte[], int, int, int)::: module resolution attribute write:::v->new->ByteVector->v->putShort->return
ModuleTargetAttribute#read(ClassReader, int, int, char[], int, Label[])::: module target attribute read:::platform->cr->readUTF8->return->new->ModuleTargetAttribute
ModuleTargetAttribute#write(ClassWriter, byte[], int, int, int)::: module target attribute write:::v->new->ByteVector->index->cw->newUTF8->v->putShort->return
Remapper#mapDesc(String)::: remapper map desc:::t->Type->getType->switch->t->getSort->s->t->getElementType->getDescriptor->mapDesc->for->i->t->getDimensions->return->newType->t->getInternalName->map->if->return->return
Remapper#mapType(Type)::: remapper map type:::switch->t->getSort->s->t->getElementType->getDescriptor->mapDesc->for->i->t->getDimensions->return->Type->getType->t->getInternalName->map->return->Type->getObjectType->return->Type->t->getDescriptor->mapMethodDesc->getMethodType->return
Remapper#mapType(String)::: remapper map type:::if->return->return->Type->getObjectType->mapType->getInternalName
Remapper#mapTypes(String[])::: remapper map types:::newTypes->needMapping->for->i->return
Remapper#mapMethodDesc(String)::: remapper map method desc:::if->equals->return->args->Type->getArgumentTypes->sb->new->StringBuilder->for->i->returnType->Type->getReturnType->if->sb->append->return->sb->toString->sb->append->returnType->getDescriptor->mapDesc->append->return->sb->toString
Remapper#mapValue(Object)::: remapper map value:::if->return->mapType->if->h->return->h->getTag->h->getOwner->mapType->h->getOwner->h->getName->h->getDesc->mapMethodName->h->getDesc->mapMethodDesc->h->isInterface->new->Handle->return
Remapper#mapSignature(String, boolean)::: remapper map signature:::if->return->r->new->SignatureReader->w->new->SignatureWriter->a->createSignatureRemapper->if->r->acceptType->else->r->accept->return->w->toString
Remapper#createRemappingSignatureAdapter(SignatureVisitor)::: remapper create remapping signature adapter:::return->new->SignatureRemapper
Remapper#createSignatureRemapper(SignatureVisitor)::: remapper create signature remapper:::return->createRemappingSignatureAdapter
Remapper#mapMethodName(String, String, String):::Map method name to the new name:::return
Remapper#mapInvokeDynamicMethodName(String, String):::Map invokedynamic method name to the new name:::return
Remapper#mapFieldName(String, String, String):::Map field name to the new name:::return
Remapper#mapPackageName(String):::Map package name to the new name:::fakeName->map->index->return->fakeName->lastIndexOf->fakeName->substring
Remapper#mapModuleName(String):::Map module name to the new name:::return
Remapper#map(String):::Map type name to the new name:::return
RemappingAnnotationAdapter#visit(String, Object)::: remapping annotation adapter visit:::av->remapper->mapValue->visit
RemappingAnnotationAdapter#visitEnum(String, String, String)::: remapping annotation adapter visit enum:::av->remapper->mapDesc->visitEnum
RemappingAnnotationAdapter#visitAnnotation(String, String)::: remapping annotation adapter visit annotation:::v->av->remapper->mapDesc->visitAnnotation->return->new->RemappingAnnotationAdapter
RemappingAnnotationAdapter#visitArray(String)::: remapping annotation adapter visit array:::v->av->visitArray->return->new->RemappingAnnotationAdapter
RemappingClassAdapter#visit(int, int, String, String, String, String[])::: remapping class adapter visit:::super->remapper->mapType->remapper->mapSignature->remapper->mapType->remapper->mapTypes->visit
RemappingClassAdapter#visitModule(String, int, String)::: remapping class adapter visit module:::throw->new->RuntimeException
RemappingClassAdapter#visitAnnotation(String, boolean)::: remapping class adapter visit annotation:::av->super->remapper->mapDesc->visitAnnotation->return->createRemappingAnnotationAdapter
RemappingClassAdapter#visitTypeAnnotation(int, TypePath, String, boolean)::: remapping class adapter visit type annotation:::av->super->remapper->mapDesc->visitTypeAnnotation->return->createRemappingAnnotationAdapter
RemappingClassAdapter#visitField(int, String, String, String, Object)::: remapping class adapter visit field:::fv->super->remapper->mapFieldName->remapper->mapDesc->remapper->mapSignature->remapper->mapValue->visitField->return->createRemappingFieldAdapter
RemappingClassAdapter#visitMethod(int, String, String, String, String[])::: remapping class adapter visit method:::newDesc->remapper->mapMethodDesc->mv->super->remapper->mapMethodName->remapper->mapSignature->remapper->mapTypes->visitMethod->return->createRemappingMethodAdapter
RemappingClassAdapter#visitInnerClass(String, String, String, int)::: remapping class adapter visit inner class:::super->remapper->mapType->remapper->mapType->visitInnerClass
RemappingClassAdapter#visitOuterClass(String, String, String)::: remapping class adapter visit outer class:::super->remapper->mapType->remapper->mapMethodName->remapper->mapMethodDesc->visitOuterClass
RemappingClassAdapter#createRemappingFieldAdapter(FieldVisitor)::: remapping class adapter create remapping field adapter:::return->new->RemappingFieldAdapter
RemappingClassAdapter#createRemappingMethodAdapter(int, String, MethodVisitor)::: remapping class adapter create remapping method adapter:::return->new->RemappingMethodAdapter
RemappingClassAdapter#createRemappingAnnotationAdapter(AnnotationVisitor)::: remapping class adapter create remapping annotation adapter:::return->new->RemappingAnnotationAdapter
RemappingFieldAdapter#visitAnnotation(String, boolean)::: remapping field adapter visit annotation:::av->fv->remapper->mapDesc->visitAnnotation->return->new->RemappingAnnotationAdapter
RemappingFieldAdapter#visitTypeAnnotation(int, TypePath, String, boolean)::: remapping field adapter visit type annotation:::av->super->remapper->mapDesc->visitTypeAnnotation->return->new->RemappingAnnotationAdapter
RemappingMethodAdapter#visitAnnotationDefault()::: remapping method adapter visit annotation default:::av->super->visitAnnotationDefault->return->new->RemappingAnnotationAdapter
RemappingMethodAdapter#visitAnnotation(String, boolean)::: remapping method adapter visit annotation:::av->super->remapper->mapDesc->visitAnnotation->return->new->RemappingAnnotationAdapter
RemappingMethodAdapter#visitTypeAnnotation(int, TypePath, String, boolean)::: remapping method adapter visit type annotation:::av->super->remapper->mapDesc->visitTypeAnnotation->return->new->RemappingAnnotationAdapter
RemappingMethodAdapter#visitParameterAnnotation(int, String, boolean)::: remapping method adapter visit parameter annotation:::av->super->remapper->mapDesc->visitParameterAnnotation->return->new->RemappingAnnotationAdapter
RemappingMethodAdapter#visitFrame(int, int, Object[], int, Object[])::: remapping method adapter visit frame:::super->remapEntries->remapEntries->visitFrame
RemappingMethodAdapter#remapEntries(int, Object[])::: remapping method adapter remap entries:::if->for->i->return
RemappingMethodAdapter#visitFieldInsn(int, String, String, String)::: remapping method adapter visit field insn:::super->remapper->mapType->remapper->mapFieldName->remapper->mapDesc->visitFieldInsn
RemappingMethodAdapter#visitMethodInsn(int, String, String, String)::: remapping method adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
RemappingMethodAdapter#visitMethodInsn(int, String, String, String, boolean)::: remapping method adapter visit method insn:::if->super->visitMethodInsn->return->doVisitMethodInsn
RemappingMethodAdapter#doVisitMethodInsn(int, String, String, String, boolean)::: remapping method adapter do visit method insn:::if->mv->remapper->mapType->remapper->mapMethodName->remapper->mapMethodDesc->visitMethodInsn
RemappingMethodAdapter#visitInvokeDynamicInsn(String, String, Handle, Object...)::: remapping method adapter visit invoke dynamic insn:::for->i->super->remapper->mapInvokeDynamicMethodName->remapper->mapMethodDesc->remapper->mapValue->visitInvokeDynamicInsn
RemappingMethodAdapter#visitTypeInsn(int, String)::: remapping method adapter visit type insn:::super->remapper->mapType->visitTypeInsn
RemappingMethodAdapter#visitLdcInsn(Object)::: remapping method adapter visit ldc insn:::super->remapper->mapValue->visitLdcInsn
RemappingMethodAdapter#visitMultiANewArrayInsn(String, int)::: remapping method adapter visit multi new array insn:::super->remapper->mapDesc->visitMultiANewArrayInsn
RemappingMethodAdapter#visitInsnAnnotation(int, TypePath, String, boolean)::: remapping method adapter visit insn annotation:::av->super->remapper->mapDesc->visitInsnAnnotation->return->new->RemappingAnnotationAdapter
RemappingMethodAdapter#visitTryCatchBlock(Label, Label, Label, String)::: remapping method adapter visit try catch block:::super->remapper->mapType->visitTryCatchBlock
RemappingMethodAdapter#visitTryCatchAnnotation(int, TypePath, String, boolean)::: remapping method adapter visit try catch annotation:::av->super->remapper->mapDesc->visitTryCatchAnnotation->return->new->RemappingAnnotationAdapter
RemappingMethodAdapter#visitLocalVariable(String, String, String, Label, Label, int)::: remapping method adapter visit local variable:::super->remapper->mapDesc->remapper->mapSignature->visitLocalVariable
RemappingMethodAdapter#visitLocalVariableAnnotation(int, TypePath, Label[], Label[], int[], String, boolean)::: remapping method adapter visit local variable annotation:::av->super->remapper->mapDesc->visitLocalVariableAnnotation->return->new->RemappingAnnotationAdapter
RemappingSignatureAdapter#visitClassType(String)::: remapping signature adapter visit class type:::v->remapper->mapType->visitClassType
RemappingSignatureAdapter#visitInnerClassType(String)::: remapping signature adapter visit inner class type:::remappedOuter->remapper->mapType->remappedName->remapper->mapType->index->remappedName->startsWith->remappedOuter->length->remappedName->lastIndexOf->v->remappedName->substring->visitInnerClassType
RemappingSignatureAdapter#visitFormalTypeParameter(String)::: remapping signature adapter visit formal type parameter:::v->visitFormalTypeParameter
RemappingSignatureAdapter#visitTypeVariable(String)::: remapping signature adapter visit type variable:::v->visitTypeVariable
RemappingSignatureAdapter#visitArrayType()::: remapping signature adapter visit array type:::v->visitArrayType->return
RemappingSignatureAdapter#visitBaseType(char)::: remapping signature adapter visit base type:::v->visitBaseType
RemappingSignatureAdapter#visitClassBound()::: remapping signature adapter visit class bound:::v->visitClassBound->return
RemappingSignatureAdapter#visitExceptionType()::: remapping signature adapter visit exception type:::v->visitExceptionType->return
RemappingSignatureAdapter#visitInterface()::: remapping signature adapter visit interface:::v->visitInterface->return
RemappingSignatureAdapter#visitInterfaceBound()::: remapping signature adapter visit interface bound:::v->visitInterfaceBound->return
RemappingSignatureAdapter#visitParameterType()::: remapping signature adapter visit parameter type:::v->visitParameterType->return
RemappingSignatureAdapter#visitReturnType()::: remapping signature adapter visit return type:::v->visitReturnType->return
RemappingSignatureAdapter#visitSuperclass()::: remapping signature adapter visit superclass:::v->visitSuperclass->return
RemappingSignatureAdapter#visitTypeArgument()::: remapping signature adapter visit type argument:::v->visitTypeArgument
RemappingSignatureAdapter#visitTypeArgument(char)::: remapping signature adapter visit type argument:::v->visitTypeArgument->return
RemappingSignatureAdapter#visitEnd()::: remapping signature adapter visit end:::v->visitEnd
SerialVersionUIDAdder#visit(int, int, String, String, String, String[])::: serial version adder visit:::if->new->StringArr->System->arraycopy->super->visit
SerialVersionUIDAdder#visitMethod(int, String, String, String, String[])::: serial version adder visit method:::if->if->equals->mods->if->if->equals->svuidConstructors->new->Item->add->else->if->equals->svuidMethods->new->Item->add->return->super->visitMethod
SerialVersionUIDAdder#visitField(int, String, String, String, Object)::: serial version adder visit field:::if->if->equals->if->mods->svuidFields->new->Item->add->return->super->visitField
SerialVersionUIDAdder#visitInnerClass(String, String, String, int):::Handle a bizarre special case:::if->name->equals->super->visitInnerClass
SerialVersionUIDAdder#visitEnd()::: serial version adder visit end:::if->try->computeSVUID->addSVUID->catch->throw->new->RuntimeException->finally->super->visitEnd
SerialVersionUIDAdder#hasSVUID():::Returns true if the class already has a SVUID field:::return
SerialVersionUIDAdder#addSVUID(long)::: serial version adder add d:::fv->super->visitField->if->fv->visitEnd
SerialVersionUIDAdder#computeSVUID():::Computes and returns the value of SVUID.:::bos->dos->svuid->try->new->ByteArrayOutputStream->new->DataOutputStream->dos->name->replace->writeUTF->access->if->svuidMethods->size->dos->writeInt->Arrays->sort->for->i->writeItems->if->dos->writeUTF->dos->writeInt->dos->writeUTF->writeItems->writeItems->dos->flush->hashBytes->bos->toByteArray->computeSHAdigest->for->i->Math->min->catch->finally->if->dos->close->return
SerialVersionUIDAdder#computeSHAdigest(byte[]):::Returns the SHA-1 message digest of the given value.:::try->return->MessageDigest->getInstance->digest->catch->throw->e->toString->new->UnsupportedOperationException->finally
SerialVersionUIDAdder#writeItems(Collection, DataOutput, boolean):::Sorts the items in the collection and writes it to the data output stream:::size->itemCollection->size->items->itemCollection->new->ItemArr->toArray->Arrays->sort->for->i
SerialVersionUIDAdder.Item#compareTo(Item)::: item compare to:::retVal->name->compareTo->if->desc->compareTo->return
SerialVersionUIDAdder.Item#equals(Object)::: item equals:::if->return->compareTo->return
SerialVersionUIDAdder.Item#hashCode()::: item hash code:::return->hashCode
SignatureRemapper#visitClassType(String)::: signature remapper visit class type:::classNames->push->v->remapper->mapType->visitClassType
SignatureRemapper#visitInnerClassType(String)::: signature remapper visit inner class type:::outerClassName->classNames->pop->className->classNames->push->remappedOuter->remapper->mapType->remappedName->remapper->mapType->index->remappedName->startsWith->remappedOuter->length->remappedName->lastIndexOf->v->remappedName->substring->visitInnerClassType
SignatureRemapper#visitFormalTypeParameter(String)::: signature remapper visit formal type parameter:::v->visitFormalTypeParameter
SignatureRemapper#visitTypeVariable(String)::: signature remapper visit type variable:::v->visitTypeVariable
SignatureRemapper#visitArrayType()::: signature remapper visit array type:::v->visitArrayType->return
SignatureRemapper#visitBaseType(char)::: signature remapper visit base type:::v->visitBaseType
SignatureRemapper#visitClassBound()::: signature remapper visit class bound:::v->visitClassBound->return
SignatureRemapper#visitExceptionType()::: signature remapper visit exception type:::v->visitExceptionType->return
SignatureRemapper#visitInterface()::: signature remapper visit interface:::v->visitInterface->return
SignatureRemapper#visitInterfaceBound()::: signature remapper visit interface bound:::v->visitInterfaceBound->return
SignatureRemapper#visitParameterType()::: signature remapper visit parameter type:::v->visitParameterType->return
SignatureRemapper#visitReturnType()::: signature remapper visit return type:::v->visitReturnType->return
SignatureRemapper#visitSuperclass()::: signature remapper visit superclass:::v->visitSuperclass->return
SignatureRemapper#visitTypeArgument()::: signature remapper visit type argument:::v->visitTypeArgument
SignatureRemapper#visitTypeArgument(char)::: signature remapper visit type argument:::v->visitTypeArgument->return
SignatureRemapper#visitEnd()::: signature remapper visit end:::v->visitEnd->classNames->pop
SimpleRemapper#mapMethodName(String, String, String)::: simple remapper map method name:::s->map->return
SimpleRemapper#mapInvokeDynamicMethodName(String, String)::: simple remapper map invoke dynamic method name:::s->map->return
SimpleRemapper#mapFieldName(String, String, String)::: simple remapper map field name:::s->map->return
SimpleRemapper#map(String)::: simple remapper map:::return->mapping->get
StaticInitMerger#visit(int, int, String, String, String, String[])::: static init merger visit:::cv->visit
StaticInitMerger#visitMethod(int, String, String, String, String[])::: static init merger visit method:::mv->if->equals->a->n->cv->visitMethod->if->cv->visitMethod->clinit->visitMethodInsn->else->cv->visitMethod->return
StaticInitMerger#visitEnd()::: static init merger visit end:::if->clinit->visitInsn->clinit->visitMaxs->cv->visitEnd
TableSwitchGenerator#generateCase(int, Label):::Generates the code for a switch case.:::
TableSwitchGenerator#generateDefault():::Generates the code for the default switch case.:::
TryCatchBlockSorter#visitEnd()::: try catch block sorter visit end:::comp->new->Comparator<TryCatchBlockNode>->Collections->sort->for->i->tryCatchBlocks->size->if->accept

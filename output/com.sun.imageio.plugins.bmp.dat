com.sun.imageio.plugins.bmp.BMPCompressionTypes#getType(String)->int::: compression types get type
com.sun.imageio.plugins.bmp.BMPCompressionTypes#getName(int)->String::: compression types get name
com.sun.imageio.plugins.bmp.BMPCompressionTypes#getCompressionTypes()->String[]::: compression types get compression types
com.sun.imageio.plugins.bmp.BMPImageReader#setInput(Object, boolean, boolean)->void:::Overrides the method defined in the superclass.
com.sun.imageio.plugins.bmp.BMPImageReader#getNumImages(boolean)->int:::Overrides the method defined in the superclass.
com.sun.imageio.plugins.bmp.BMPImageReader#getWidth(int)->int::: image reader get width
com.sun.imageio.plugins.bmp.BMPImageReader#getHeight(int)->int::: image reader get height
com.sun.imageio.plugins.bmp.BMPImageReader#readHeader()->void:::Process the image header.
com.sun.imageio.plugins.bmp.BMPImageReader#getImageTypes(int)->Iterator::: image reader get image types
com.sun.imageio.plugins.bmp.BMPImageReader#getDefaultReadParam()->ImageReadParam::: image reader get default read param
com.sun.imageio.plugins.bmp.BMPImageReader#getImageMetadata(int)->IIOMetadata::: image reader get image metadata
com.sun.imageio.plugins.bmp.BMPImageReader#getStreamMetadata()->IIOMetadata::: image reader get stream metadata
com.sun.imageio.plugins.bmp.BMPImageReader#isRandomAccessEasy(int)->boolean::: image reader is random access easy
com.sun.imageio.plugins.bmp.BMPImageReader#read(int, ImageReadParam)->BufferedImage::: image reader read
com.sun.imageio.plugins.bmp.BMPImageReader#canReadRaster()->boolean::: image reader can read raster
com.sun.imageio.plugins.bmp.BMPImageReader#readRaster(int, ImageReadParam)->Raster::: image reader read raster
com.sun.imageio.plugins.bmp.BMPImageReader#reset()->void::: image reader reset
com.sun.imageio.plugins.bmp.BMPImageReaderSpi#onRegistration(ServiceRegistry, Class)->void::: image reader spi on registration
com.sun.imageio.plugins.bmp.BMPImageReaderSpi#getDescription(Locale)->String::: image reader spi get description
com.sun.imageio.plugins.bmp.BMPImageReaderSpi#canDecodeInput(Object)->boolean::: image reader spi can decode input
com.sun.imageio.plugins.bmp.BMPImageReaderSpi#createReaderInstance(Object)->ImageReader::: image reader spi create reader instance
com.sun.imageio.plugins.bmp.BMPImageWriter#setOutput(Object)->void::: image writer set output
com.sun.imageio.plugins.bmp.BMPImageWriter#getDefaultWriteParam()->ImageWriteParam::: image writer get default write param
com.sun.imageio.plugins.bmp.BMPImageWriter#getDefaultStreamMetadata(ImageWriteParam)->IIOMetadata::: image writer get default stream metadata
com.sun.imageio.plugins.bmp.BMPImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)->IIOMetadata::: image writer get default image metadata
com.sun.imageio.plugins.bmp.BMPImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)->IIOMetadata::: image writer convert stream metadata
com.sun.imageio.plugins.bmp.BMPImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)->IIOMetadata::: image writer convert image metadata
com.sun.imageio.plugins.bmp.BMPImageWriter#canWriteRasters()->boolean::: image writer can write rasters
com.sun.imageio.plugins.bmp.BMPImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)->void::: image writer write
com.sun.imageio.plugins.bmp.BMPImageWriter#reset()->void::: image writer reset
com.sun.imageio.plugins.bmp.BMPImageWriter#getPreferredCompressionType(ColorModel, SampleModel)->int::: image writer get preferred compression type
com.sun.imageio.plugins.bmp.BMPImageWriter#getPreferredCompressionType(ImageTypeSpecifier)->int::: image writer get preferred compression type
com.sun.imageio.plugins.bmp.BMPImageWriter#canEncodeImage(int, ColorModel, SampleModel)->boolean::: image writer can encode image
com.sun.imageio.plugins.bmp.BMPImageWriter#canEncodeImage(int, ImageTypeSpecifier)->boolean::: image writer can encode image
com.sun.imageio.plugins.bmp.BMPImageWriter#writeMaskToPalette(int, int, byte[], byte[], byte[], byte[])->void::: image writer write mask to palette
com.sun.imageio.plugins.bmp.BMPImageWriterSpi#getDescription(Locale)->String::: image writer spi get description
com.sun.imageio.plugins.bmp.BMPImageWriterSpi#onRegistration(ServiceRegistry, Class)->void::: image writer spi on registration
com.sun.imageio.plugins.bmp.BMPImageWriterSpi#canEncodeImage(ImageTypeSpecifier)->boolean::: image writer spi can encode image
com.sun.imageio.plugins.bmp.BMPImageWriterSpi#createWriterInstance(Object)->ImageWriter::: image writer spi create writer instance
com.sun.imageio.plugins.bmp.BMPMetadata#isReadOnly()->boolean::: metadata is read only
com.sun.imageio.plugins.bmp.BMPMetadata#getAsTree(String)->Node::: metadata get as tree
com.sun.imageio.plugins.bmp.BMPMetadata#getStandardChromaNode()->IIOMetadataNode::: metadata get standard chroma node
com.sun.imageio.plugins.bmp.BMPMetadata#getStandardCompressionNode()->IIOMetadataNode::: metadata get standard compression node
com.sun.imageio.plugins.bmp.BMPMetadata#getStandardDataNode()->IIOMetadataNode::: metadata get standard data node
com.sun.imageio.plugins.bmp.BMPMetadata#getStandardDimensionNode()->IIOMetadataNode::: metadata get standard dimension node
com.sun.imageio.plugins.bmp.BMPMetadata#setFromTree(String, Node)->void::: metadata set from tree
com.sun.imageio.plugins.bmp.BMPMetadata#mergeTree(String, Node)->void::: metadata merge tree
com.sun.imageio.plugins.bmp.BMPMetadata#reset()->void::: metadata reset
com.sun.imageio.plugins.bmp.BMPMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)->boolean::: metadata format can node appear
com.sun.imageio.plugins.bmp.BMPMetadataFormat#getInstance()->IIOMetadataFormat::: metadata format get instance
com.sun.imageio.plugins.bmp.BMPMetadataFormatResources#getContents()->Object[][]::: metadata format resources get contents

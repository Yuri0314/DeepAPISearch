BMPCompressionTypes#getType(String)::: compression types get type:::for->i->return
BMPCompressionTypes#getName(int)::: compression types get name:::return
BMPCompressionTypes#getCompressionTypes()::: compression types get compression types:::return->compressionTypeNames->clone
BMPImageReader#setInput(Object, boolean, boolean):::Overrides the method defined in the superclass.:::super->setInput->if->iis->setByteOrder->resetHeaderInfo
BMPImageReader#getNumImages(boolean):::Overrides the method defined in the superclass.:::if->throw->I18N->getString->new->IllegalStateException->if->throw->I18N->getString->new->IllegalStateException->return
BMPImageReader#getWidth(int)::: image reader get width:::checkIndex->try->readHeader->catch->throw->I18N->getString->new->IIOException->finally->return
BMPImageReader#getHeight(int)::: image reader get height:::checkIndex->try->readHeader->catch->throw->I18N->getString->new->IIOException->finally->return
BMPImageReader#checkIndex(int)::: image reader check index:::if->throw->I18N->getString->new->IndexOutOfBoundsException
BMPImageReader#readHeader():::Process the image header.:::if->return->if->throw->new->IllegalStateException->profileData->profileSize->new->BMPMetadata->iis->mark->marker->new->byteArr->iis->read->if->throw->I18N->getString->new->IllegalArgumentException->iis->readUnsignedInt->iis->skipBytes->iis->readUnsignedInt->size->iis->readUnsignedInt->if->iis->readShort->iis->readShort->else->iis->readInt->iis->readInt->planes->iis->readUnsignedShort->iis->readUnsignedShort->if->if->else->if->else->if->else->if->else->throw->I18N->getString->new->IIOException->numberOfEntries->sizeOfPalette->new->byteArr->iis->readFully->else->iis->readUnsignedInt->iis->readUnsignedInt->xPelsPerMeter->iis->readInt->yPelsPerMeter->iis->readInt->colorsUsed->iis->readUnsignedInt->colorsImportant->iis->readUnsignedInt->if->switch->break->if->throw->I18N->getString->new->IIOException->numberOfEntries->sizeOfPalette->new->byteArr->iis->readFully->if->else->if->else->if->else->if->else->if->else->if->else->throw->I18N->getString->new->IIOException->break->if->else->if->else->throw->I18N->getString->new->IIOException->iis->readUnsignedInt->iis->readUnsignedInt->iis->readUnsignedInt->if->new->byteArr->iis->readFully->break->throw->I18N->getString->new->IIOException->else->if->iis->readUnsignedInt->iis->readUnsignedInt->iis->readUnsignedInt->if->iis->readUnsignedInt->numberOfEntries->sizeOfPalette->new->byteArr->iis->readFully->switch->break->if->else->if->else->if->else->if->if->else->if->else->if->if->else->throw->I18N->getString->new->IIOException->else->if->if->else->if->iis->readUnsignedInt->iis->readUnsignedInt->iis->readUnsignedInt->iis->readUnsignedInt->csType->iis->readUnsignedInt->redX->iis->readInt->redY->iis->readInt->redZ->iis->readInt->greenX->iis->readInt->greenY->iis->readInt->greenZ->iis->readInt->blueX->iis->readInt->blueY->iis->readInt->blueZ->iis->readInt->gammaRed->iis->readUnsignedInt->gammaGreen->iis->readUnsignedInt->gammaBlue->iis->readUnsignedInt->if->iis->readInt->iis->readInt->iis->readInt->iis->skipBytes->if->numberOfEntries->sizeOfPalette->new->byteArr->iis->readFully->switch->if->else->if->break->if->else->if->else->if->else->if->if->else->if->else->if->if->else->throw->I18N->getString->new->IIOException->else->throw->I18N->getString->new->IIOException->if->else->Math->abs->colorSpace->ColorSpace->getInstance->if->iis->mark->iis->skipBytes->profile->new->byteArr->iis->readFully->iis->reset->try->if->isLinkedProfileAllowed->isUncOrDevicePath->path->new->String->ICC_Profile->getInstance->new->ICC_ColorSpace->else->ICC_Profile->getInstance->new->ICC_ColorSpace->catch->ColorSpace->getInstance->finally->if->else->if->if->bandOffsets->new->intArr->for->i->new->PixelInterleavedSampleModel->else->new->MultiPixelPackedSampleModel->r->g->b->if->if->off->new->byteArr->new->byteArr->new->byteArr->for->i->else->if->off->new->byteArr->new->byteArr->new->byteArr->for->i->if->ImageUtil->isIndicesForGrayscale->ImageUtil->createColorModel->else->new->IndexColorModel->else->if->new->intArr->new->SinglePixelPackedSampleModel->new->DirectColorModel->else->if->bitMasks->new->intArr->new->intArr->new->SinglePixelPackedSampleModel->new->DirectColorModel->else->bandOffsets->new->intArr->for->i->new->PixelInterleavedSampleModel->ImageUtil->createColorModel->iis->reset->iis->skipBytes->iis->getStreamPosition
BMPImageReader#getImageTypes(int)::: image reader get image types:::checkIndex->try->readHeader->catch->throw->I18N->getString->new->IIOException->finally->list->new->ArrayList<>->list->new->ImageTypeSpecifier->add->return->list->iterator
BMPImageReader#getDefaultReadParam()::: image reader get default read param:::return->new->ImageReadParam
BMPImageReader#getImageMetadata(int)::: image reader get image metadata:::checkIndex->if->try->readHeader->catch->throw->I18N->getString->new->IIOException->finally->return
BMPImageReader#getStreamMetadata()::: image reader get stream metadata:::return
BMPImageReader#isRandomAccessEasy(int)::: image reader is random access easy:::checkIndex->try->readHeader->catch->throw->I18N->getString->new->IIOException->finally->return
BMPImageReader#read(int, ImageReadParam)::: image reader read:::if->throw->I18N->getString->new->IllegalStateException->checkIndex->clearAbortRequest->processImageStarted->if->abortRequested->processReadAborted->return->if->getDefaultReadParam->try->readHeader->catch->throw->I18N->getString->new->IIOException->finally->new->Rectangle->new->Rectangle->param->getDestination->computeRegions->param->getSourceXSubsampling->param->getSourceYSubsampling->param->getSourceBands->param->getDestinationBands->destinationRegion->new->Rectangle->equals->if->new->intArr->new->intArr->for->i->param->getDestination->raster->if->if->sampleModel->createCompatibleSampleModel->if->sampleModel->createSubsetSampleModel->Raster->new->Point->createWritableRaster->new->BufferedImage->else->bi->getWritableTile->bi->getSampleModel->bi->getColorModel->destinationRegion->raster->getBounds->equals->bdata->sdata->idata->if->if->sampleModel->getDataType->raster->getDataBuffer->getData->else->if->sampleModel->getDataType->raster->getDataBuffer->getData->else->if->sampleModel->getDataType->raster->getDataBuffer->getData->iis->seek->switch->read1Bit->break->read4Bit->break->read8Bit->break->read24Bit->break->read1Bit->break->switch->read4Bit->break->readRLE4->break->throw->I18N->getString->new->IIOException->break->switch->read8Bit->break->readRLE8->break->throw->I18N->getString->new->IIOException->break->read24Bit->break->read16Bit->break->read32Bit->break->readEmbedded->break->read1Bit->break->switch->read4Bit->break->readRLE4->break->throw->I18N->getString->new->IIOException->break->switch->read8Bit->break->readRLE8->break->throw->I18N->getString->new->IIOException->break->read16Bit->break->read24Bit->break->read32Bit->break->if->abortRequested->processReadAborted->else->processImageComplete->return
BMPImageReader#canReadRaster()::: image reader can read raster:::return
BMPImageReader#readRaster(int, ImageReadParam)::: image reader read raster:::bi->read->return->bi->getData
BMPImageReader#resetHeaderInfo()::: image reader reset header info:::
BMPImageReader#reset()::: image reader reset:::super->reset->resetHeaderInfo
BMPImageReader#read1Bit(byte[])::: image reader read1 bit:::bytesPerScanline->padding->if->lineLength->if->j->for->i->else->buf->new->byteArr->lineStride->getScanlineStride->if->lastLine->iis->skipBytes->else->iis->skipBytes->skipLength->srcOff->new->intArr->destOff->new->intArr->srcPos->new->intArr->destPos->new->intArr->for->i->x->j->k->if->for->j->y
BMPImageReader#read4Bit(byte[])::: image reader read4 bit:::bytesPerScanline->padding->if->lineLength->if->j->for->i->else->buf->new->byteArr->lineStride->getScanlineStride->if->lastLine->iis->skipBytes->else->iis->skipBytes->skipLength->srcOff->new->intArr->destOff->new->intArr->srcPos->new->intArr->destPos->new->intArr->for->i->x->j->k->if->for->j->y
BMPImageReader#read8Bit(byte[])::: image reader read8 bit:::padding->if->lineLength->if->j->for->i->else->buf->new->byteArr->lineStride->getScanlineStride->if->lastLine->iis->skipBytes->else->iis->skipBytes->skipLength->k->if->for->j->y
BMPImageReader#read24Bit(byte[])::: image reader read24 bit:::padding->if->lineStride->lineLength->if->j->for->i->else->buf->new->byteArr->getScanlineStride->if->lastLine->iis->skipBytes->else->iis->skipBytes->skipLength->k->if->for->j->y
BMPImageReader#read16Bit(short[])::: image reader read16 bit:::padding->if->lineLength->if->j->for->i->else->buf->new->shortArr->lineStride->getScanlineStride->if->lastLine->iis->skipBytes->else->iis->skipBytes->skipLength->k->if->for->j->y
BMPImageReader#read32Bit(int[])::: image reader read32 bit:::if->j->for->i->else->buf->new->intArr->lineStride->getScanlineStride->if->lastLine->iis->skipBytes->else->iis->skipBytes->skipLength->k->if->for->j->y
BMPImageReader#readRLE8(byte[])::: image reader read e8:::imSize->if->padding->remainder->if->values->new->byteArr->bytesRead->iis->readFully->decodeRLE8
BMPImageReader#copyRLE8ScanlineToDst(int, byte[], byte[])::: image reader copy e8 scanline to dst:::isSuccess->if->if->pos->for->i->new->intArr->processImageUpdate->else->if->lineStride->getScanlineStride->currentLine->pos->for->i->new->intArr->processImageUpdate->for->scIndex->return
BMPImageReader#decodeRLE8(int, int, byte[], byte[])::: image reader decode e8:::val->new->byteArr->count->l->value->flag->lineNo->finished->while->if->switch->if->copyRLE8ScanlineToDst->processImageProgress->if->abortRequested->break->if->if->copyRLE8ScanlineToDst->processImageProgress->break->if->xoff->yoff->if->if->copyRLE8ScanlineToDst->processImageProgress->break->end->readByte->for->i->if->break->else->if->for->i->if->break
BMPImageReader#readRLE4(byte[])::: image reader read e4:::imSize->if->padding->remainder->if->values->new->byteArr->iis->readFully->decodeRLE4
BMPImageReader#copyRLE4ScanlineToDst(int, byte[], byte[])::: image reader copy e4 scanline to dst:::isSuccess->if->if->pos->for->i->j->if->new->intArr->processImageUpdate->else->if->lineStride->getScanlineStride->currentLine->pos->shift->for->i->new->intArr->processImageUpdate->for->scIndex->return
BMPImageReader#decodeRLE4(int, int, byte[], byte[])::: image reader decode e4:::val->new->byteArr->count->l->value->flag->lineNo->finished->while->if->switch->if->copyRLE4ScanlineToDst->processImageProgress->if->abortRequested->break->if->if->copyRLE4ScanlineToDst->processImageProgress->break->if->xoff->yoff->if->if->copyRLE4ScanlineToDst->processImageProgress->break->end->readByte->for->i->if->if->break->else->if->alternate->for->i->if->break
BMPImageReader#readEmbedded(int, BufferedImage, ImageReadParam)::: image reader read embedded:::format->switch->break->break->throw->new->IOException->reader->ImageIO->getImageReadersByFormatName->next->if->throw->I18N->getString->new->RuntimeException->buff->new->byteArr->iis->read->reader->ImageIO->new->ByteArrayInputStream->createImageInputStream->setInput->if->embType->reader->getImageTypes->next->embType->createBufferedImage->reader->new->EmbeddedProgressAdapter->addIIOReadProgressListener->reader->new->IIOReadUpdateListener->addIIOReadUpdateListener->reader->new->IIOReadWarningListener->addIIOReadWarningListener->param->reader->getDefaultReadParam->param->setDestination->param->bmpParam->getDestinationBands->setDestinationBands->param->bmpParam->getDestinationOffset->setDestinationOffset->param->bmpParam->getSourceBands->setSourceBands->param->bmpParam->getSourceRegion->setSourceRegion->param->bmpParam->getSourceXSubsampling->bmpParam->getSourceYSubsampling->bmpParam->getSubsamplingXOffset->bmpParam->getSubsamplingYOffset->setSourceSubsampling->reader->read->return
BMPImageReader.EmbeddedProgressAdapter#imageComplete(ImageReader)::: embedded progress adapter image complete:::
BMPImageReader.EmbeddedProgressAdapter#imageProgress(ImageReader, float)::: embedded progress adapter image progress:::
BMPImageReader.EmbeddedProgressAdapter#imageStarted(ImageReader, int)::: embedded progress adapter image started:::
BMPImageReader.EmbeddedProgressAdapter#thumbnailComplete(ImageReader)::: embedded progress adapter thumbnail complete:::
BMPImageReader.EmbeddedProgressAdapter#thumbnailProgress(ImageReader, float)::: embedded progress adapter thumbnail progress:::
BMPImageReader.EmbeddedProgressAdapter#thumbnailStarted(ImageReader, int, int)::: embedded progress adapter thumbnail started:::
BMPImageReader.EmbeddedProgressAdapter#sequenceComplete(ImageReader)::: embedded progress adapter sequence complete:::
BMPImageReader.EmbeddedProgressAdapter#sequenceStarted(ImageReader, int)::: embedded progress adapter sequence started:::
BMPImageReader.EmbeddedProgressAdapter#readAborted(ImageReader)::: embedded progress adapter read aborted:::
BMPImageReader#isLinkedProfileAllowed()::: image reader is linked profile allowed:::if->a->new->PrivilegedAction<Boolean>->AccessController->doPrivileged->return
BMPImageReader#isUncOrDevicePath(byte[]):::Verifies whether the byte array contans a unc path:::if->a->new->PrivilegedAction<Boolean>->AccessController->doPrivileged->if->return->if->if->if->if->if->return->else->return->else->return
BMPImageReaderSpi#onRegistration(ServiceRegistry, Class)::: image reader spi on registration:::if->return
BMPImageReaderSpi#getDescription(Locale)::: image reader spi get description:::return
BMPImageReaderSpi#canDecodeInput(Object)::: image reader spi can decode input:::if->return->stream->b->new->byteArr->stream->mark->stream->readFully->stream->reset->return
BMPImageReaderSpi#createReaderInstance(Object)::: image reader spi create reader instance:::return->new->BMPImageReader
BMPImageWriter#setOutput(Object)::: image writer set output:::super->setOutput->if->if->throw->I18N->getString->new->IllegalArgumentException->stream->setByteOrder->else
BMPImageWriter#getDefaultWriteParam()::: image writer get default write param:::return->new->BMPImageWriteParam
BMPImageWriter#getDefaultStreamMetadata(ImageWriteParam)::: image writer get default stream metadata:::return
BMPImageWriter#getDefaultImageMetadata(ImageTypeSpecifier, ImageWriteParam)::: image writer get default image metadata:::meta->new->BMPMetadata->getPreferredCompressionType->if->param->getCompressionMode->BMPCompressionTypes->param->getCompressionType->getType->imageType->getColorModel->getPixelSize->return
BMPImageWriter#convertStreamMetadata(IIOMetadata, ImageWriteParam)::: image writer convert stream metadata:::return
BMPImageWriter#convertImageMetadata(IIOMetadata, ImageTypeSpecifier, ImageWriteParam)::: image writer convert image metadata:::return
BMPImageWriter#canWriteRasters()::: image writer can write rasters:::return
BMPImageWriter#write(IIOMetadata, IIOImage, ImageWriteParam)::: image writer write:::if->throw->I18N->getString->new->IllegalStateException->if->throw->I18N->getString->new->IllegalArgumentException->clearAbortRequest->processImageStarted->if->abortRequested->processWriteAborted->return->if->getDefaultWriteParam->bmpParam->bitsPerPixel->isPalette->paletteEntries->icm->input->inputRaster->writeRaster->image->hasRaster->sourceRegion->param->getSourceRegion->sampleModel->colorModel->if->image->getRaster->inputRaster->getSampleModel->ImageUtil->createColorModel->if->inputRaster->getBounds->else->sourceRegion->inputRaster->getBounds->intersection->else->image->getRenderedImage->input->getSampleModel->input->getColorModel->rect->input->getMinX->input->getMinY->input->getWidth->input->getHeight->new->Rectangle->if->else->sourceRegion->intersection->imageMetadata->image->getMetadata->bmpImageMetadata->if->else->imageType->new->ImageTypeSpecifier->getDefaultImageMetadata->if->sourceRegion->isEmpty->throw->I18N->getString->new->RuntimeException->scaleX->param->getSourceXSubsampling->scaleY->param->getSourceYSubsampling->xOffset->param->getSubsamplingXOffset->yOffset->param->getSubsamplingYOffset->dataType->sampleModel->getDataType->sourceRegion->translate->minX->minY->destinationRegion->new->Rectangle->noTransform->destinationRegion->equals->sourceBands->param->getSourceBands->noSubband->numBands->sampleModel->getNumBands->if->sampleModel->createSubsetSampleModel->sampleModel->getNumBands->else->new->intArr->for->i->bandOffsets->bgrOrder->if->getBandOffsets->if->else->for->i->else->if->bitOffsets->getBitOffsets->for->i->if->new->intArr->for->i->sampleSize->sampleModel->getSampleSize->destScanlineBytes->switch->bmpParam->getCompressionMode->BMPCompressionTypes->bmpParam->getCompressionType->getType->break->break->getPreferredCompressionType->break->if->canEncodeImage->throw->BMPCompressionTypes->getName->new->IOException->r->g->b->a->if->DataBuffer->sampleModel->getDataType->getDataTypeSize->if->new->byteArr->new->byteArr->new->byteArr->new->byteArr->rmask->gmask->bmask->if->if->dcm->dcm->getRedMask->dcm->getGreenMask->dcm->getBlueMask->else->throw->BMPCompressionTypes->getName->new->IOException->writeMaskToPalette->writeMaskToPalette->writeMaskToPalette->if->new->intArr->new->intArr->firstLowBit->firstLowBit->firstLowBit->if->else->if->icm->getMapSize->if->else->if->else->if->else->if->new->byteArr->new->byteArr->new->byteArr->new->byteArr->icm->getAlphas->icm->getReds->icm->getGreens->icm->getBlues->else->if->new->byteArr->new->byteArr->new->byteArr->new->byteArr->for->i->else->if->sample_sizes->sampleModel->getSampleSize->foreach->roundBpp->if->DataBuffer->sampleModel->getDataType->getDataTypeSize->fileSize->offset->headerSize->imageSize->xPelsPerMeter->yPelsPerMeter->colorsUsed->colorsImportant->padding->if->headPos->stream->getStreamPosition->writeFileHeader->if->bmpParam->isTopDown->else->writeInfoHeader->stream->writeInt->stream->writeInt->stream->writeInt->stream->writeInt->stream->writeInt->stream->writeInt->if->if->for->i->else->for->i->scanlineBytes->pixels->new->intArr->new->byteArr->l->if->new->ByteArrayOutputStream->writeEmbedded->embedded_stream->flush->embedded_stream->size->endPos->stream->getStreamPosition->stream->seek->writeSize->stream->seek->writeSize->stream->seek->stream->embedded_stream->toByteArray->write->processImageComplete->stream->stream->getStreamPosition->flushBefore->return->maxBandOffset->for->i->pixel->new->intArr->destScanlineLength->if->DataBuffer->getDataTypeSize->for->i->if->stream->writeByte->stream->writeByte->incCompImageSize->endPos->stream->getStreamPosition->stream->seek->writeSize->stream->seek->writeSize->stream->seek->if->abortRequested->processWriteAborted->else->processImageComplete->stream->stream->getStreamPosition->flushBefore
BMPImageWriter#writePixels(int, int, int, int[], int, int, IndexColorModel)::: image writer write pixels:::pixel->k->switch->for->j->if->for->j->stream->write->break->if->bipixels->new->byteArr->for->h->encodeRLE4->else->for->j->if->stream->write->break->if->for->h->encodeRLE8->else->for->j->stream->write->break->if->new->shortArr->for->j->m->stream->writeShorts->break->if->for->j->stream->write->else->entries->icm->getMapSize->r->new->byteArr->g->new->byteArr->b->new->byteArr->icm->getReds->icm->getGreens->icm->getBlues->index->for->j->stream->write->break->if->new->intArr->if->for->j->m->else->for->j->stream->writeInts->break->if->for
BMPImageWriter#encodeRLE8(byte[], int)::: image writer encode e8:::runCount->absVal->j->runVal->nextVal->absBuf->new->byteArr->while->if->if->stream->writeByte->stream->writeByte->incCompImageSize->for->a->if->isEven->stream->writeByte->incCompImageSize->else->if->for->b->if->stream->writeByte->stream->writeByte->incCompImageSize->else->if->stream->writeByte->stream->writeByte->incCompImageSize->else->if->else->if->else->stream->writeByte->stream->writeByte->incCompImageSize->for->a->stream->writeByte->incCompImageSize->if->if->stream->writeByte->stream->writeByte->incCompImageSize->else->if->stream->writeByte->stream->writeByte->incCompImageSize->for->a->if->isEven->stream->writeByte->incCompImageSize->else->if->for->b->stream->writeByte->stream->writeByte->incCompImageSize
BMPImageWriter#encodeRLE4(byte[], int)::: image writer encode e4:::runCount->absVal->j->pixel->q->runVal1->runVal2->nextVal1->nextVal2->absBuf->new->byteArr->while->if->if->stream->writeByte->stream->writeByte->incCompImageSize->for->a->if->isEven->stream->writeByte->incCompImageSize->if->Math->ceil->isEven->stream->writeByte->incCompImageSize->else->if->stream->writeByte->stream->writeByte->incCompImageSize->if->if->stream->writeByte->stream->writeByte->incCompImageSize->if->else->stream->writeByte->r->stream->writeByte->incCompImageSize->else->stream->writeByte->stream->writeByte->incCompImageSize->if->else->stream->writeByte->r->stream->writeByte->incCompImageSize->else->if->stream->writeByte->stream->writeByte->incCompImageSize->else->if->else->if->else->stream->writeByte->stream->writeByte->incCompImageSize->for->a->stream->writeByte->incCompImageSize->if->if->if->if->stream->writeByte->stream->writeByte->incCompImageSize->else->stream->writeByte->stream->writeByte->stream->writeByte->stream->writeByte->n->incCompImageSize->else->stream->writeByte->stream->writeByte->incCompImageSize->else->if->if->if->stream->writeByte->stream->writeByte->incCompImageSize->for->a->if->isEven->stream->writeByte->incCompImageSize->if->Math->ceil->isEven->stream->writeByte->incCompImageSize->else->switch->stream->writeByte->n->stream->writeByte->incCompImageSize->break->stream->writeByte->stream->writeByte->incCompImageSize->break->stream->writeByte->stream->writeByte->incCompImageSize
BMPImageWriter#incCompImageSize(int)::: image writer inc comp image size:::
BMPImageWriter#isEven(int)::: image writer is even:::return
BMPImageWriter#writeFileHeader(int, int)::: image writer write file header:::stream->writeByte->stream->writeByte->stream->writeInt->stream->writeInt->stream->writeInt
BMPImageWriter#writeInfoHeader(int, int)::: image writer write info header:::stream->writeInt->stream->writeInt->stream->writeInt->stream->writeShort->stream->writeShort
BMPImageWriter#writeSize(int, int)::: image writer write size:::stream->skipBytes->stream->writeInt
BMPImageWriter#reset()::: image writer reset:::super->reset
BMPImageWriter#writeEmbedded(IIOImage, ImageWriteParam)::: image writer write embedded:::format->iterator->ImageIO->getImageWritersByFormatName->writer->if->iterator->hasNext->iterator->next->if->if->throw->new->RuntimeException->writer->new->IIOWriteProgressAdapter->addIIOWriteProgressListener->writer->new->IIOWriteWarningListener->addIIOWriteWarningListener->writer->ImageIO->createImageOutputStream->setOutput->param->writer->getDefaultWriteParam->param->bmpParam->getDestinationOffset->setDestinationOffset->param->bmpParam->getSourceBands->setSourceBands->param->bmpParam->getSourceRegion->setSourceRegion->param->bmpParam->getSourceXSubsampling->bmpParam->getSourceYSubsampling->bmpParam->getSubsamplingXOffset->bmpParam->getSubsamplingYOffset->setSourceSubsampling->writer->write->else->throw->I18N->getString->new->RuntimeException
BMPImageWriter#firstLowBit(int)::: image writer first low bit:::count->while->return
BMPImageWriter.IIOWriteProgressAdapter#imageComplete(ImageWriter)::: write progress adapter image complete:::
BMPImageWriter.IIOWriteProgressAdapter#imageProgress(ImageWriter, float)::: write progress adapter image progress:::
BMPImageWriter.IIOWriteProgressAdapter#imageStarted(ImageWriter, int)::: write progress adapter image started:::
BMPImageWriter.IIOWriteProgressAdapter#thumbnailComplete(ImageWriter)::: write progress adapter thumbnail complete:::
BMPImageWriter.IIOWriteProgressAdapter#thumbnailProgress(ImageWriter, float)::: write progress adapter thumbnail progress:::
BMPImageWriter.IIOWriteProgressAdapter#thumbnailStarted(ImageWriter, int, int)::: write progress adapter thumbnail started:::
BMPImageWriter.IIOWriteProgressAdapter#writeAborted(ImageWriter)::: write progress adapter write aborted:::
BMPImageWriter#getPreferredCompressionType(ColorModel, SampleModel)::: image writer get preferred compression type:::imageType->new->ImageTypeSpecifier->return->getPreferredCompressionType
BMPImageWriter#getPreferredCompressionType(ImageTypeSpecifier)::: image writer get preferred compression type:::if->imageType->getBufferedImageType->return->return
BMPImageWriter#canEncodeImage(int, ColorModel, SampleModel)::: image writer can encode image:::imgType->new->ImageTypeSpecifier->return->canEncodeImage
BMPImageWriter#canEncodeImage(int, ImageTypeSpecifier)::: image writer can encode image:::spi->this->getOriginatingProvider->if->spi->canEncodeImage->return->biType->imgType->getBufferedImageType->bpp->imgType->getColorModel->getPixelSize->if->return->if->return->if->canUseRGB->canUseBITFIELDS->sm->imgType->getSampleModel->if->sizes->getSampleSize->for->i->return->return
BMPImageWriter#writeMaskToPalette(int, int, byte[], byte[], byte[], byte[])::: image writer write mask to palette:::
BMPImageWriter#roundBpp(int)::: image writer round bpp:::if->return->else->if->return->if->return->else->return
BMPImageWriterSpi#getDescription(Locale)::: image writer spi get description:::return
BMPImageWriterSpi#onRegistration(ServiceRegistry, Class)::: image writer spi on registration:::if->return
BMPImageWriterSpi#canEncodeImage(ImageTypeSpecifier)::: image writer spi can encode image:::dataType->type->getSampleModel->getDataType->if->return->sm->type->getSampleModel->numBands->sm->getNumBands->if->return->if->return->if->return->return
BMPImageWriterSpi#createWriterInstance(Object)::: image writer spi create writer instance:::return->new->BMPImageWriter
BMPMetadata#isReadOnly()::: metadata is read only:::return
BMPMetadata#getAsTree(String)::: metadata get as tree:::if->formatName->equals->return->getNativeTree->else->if->formatName->equals->return->getStandardTree->else->throw->I18N->getString->new->IllegalArgumentException
BMPMetadata#toISO8859(byte[])::: metadata to o8859:::try->return->new->String->catch->return->finally
BMPMetadata#getNativeTree()::: metadata get native tree:::root->new->IIOMetadataNode->addChildNode->addChildNode->addChildNode->Short->valueOf->addChildNode->addChildNode->addChildNode->node->addChildNode->addChildNode->addChildNode->addChildNode->addChildNode->version->for->i->bmpVersion->length->if->addChildNode->addChildNode->addChildNode->addChildNode->addChildNode->addChildNode->addChildNode->addXYZPoints->addXYZPoints->addXYZPoints->addChildNode->if->addChildNode->numComps->for->i->j->return
BMPMetadata#getStandardChromaNode()::: metadata get standard chroma node:::if->node->new->IIOMetadataNode->subNode->new->IIOMetadataNode->numComps->subNode->setAttribute->for->i->j->node->appendChild->return->return
BMPMetadata#getStandardCompressionNode()::: metadata get standard compression node:::node->new->IIOMetadataNode->subNode->new->IIOMetadataNode->subNode->BMPCompressionTypes->getName->setAttribute->node->appendChild->return
BMPMetadata#getStandardDataNode()::: metadata get standard data node:::node->new->IIOMetadataNode->bits->if->else->if->countBits->countBits->countBits->countBits->subNode->new->IIOMetadataNode->subNode->setAttribute->node->appendChild->return
BMPMetadata#getStandardDimensionNode()::: metadata get standard dimension node:::if->node->new->IIOMetadataNode->ratio->subNode->new->IIOMetadataNode->subNode->setAttribute->node->appendChild->new->IIOMetadataNode->subNode->setAttribute->node->appendChild->new->IIOMetadataNode->subNode->setAttribute->node->appendChild->return->return
BMPMetadata#setFromTree(String, Node)::: metadata set from tree:::throw->I18N->getString->new->IllegalStateException
BMPMetadata#mergeTree(String, Node)::: metadata merge tree:::throw->I18N->getString->new->IllegalStateException
BMPMetadata#reset()::: metadata reset:::throw->I18N->getString->new->IllegalStateException
BMPMetadata#countBits(int)::: metadata count bits:::count->while->if->return
BMPMetadata#addXYZPoints(IIOMetadataNode, String, double, double, double)::: metadata add points:::node->addChildNode->Double->valueOf->addChildNode->Double->valueOf->addChildNode->Double->valueOf->addChildNode
BMPMetadata#addChildNode(IIOMetadataNode, String, Object)::: metadata add child node:::child->new->IIOMetadataNode->if->child->setUserObject->child->ImageUtil->convertObjectToString->setNodeValue->root->appendChild->return
BMPMetadataFormat#canNodeAppear(String, ImageTypeSpecifier)::: metadata format can node appear:::return
BMPMetadataFormat#getInstance()::: metadata format get instance:::if->new->BMPMetadataFormat->return
BMPMetadataFormatResources#getContents()::: metadata format resources get contents:::return->new->ObjectArrs

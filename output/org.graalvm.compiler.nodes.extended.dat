org.graalvm.compiler.nodes.extended.Plugin_BranchProbabilityNode_probability#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ branch probability node_probability execute
org.graalvm.compiler.nodes.extended.Plugin_BranchProbabilityNode_probability#getSource()->Class::: plugin_ branch probability node_probability get source
org.graalvm.compiler.nodes.extended.PluginFactory_BranchProbabilityNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ branch probability node register plugins
org.graalvm.compiler.nodes.extended.Plugin_FixedValueAnchorNode_getObject#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ fixed value anchor node_get object execute
org.graalvm.compiler.nodes.extended.Plugin_FixedValueAnchorNode_getObject#getSource()->Class::: plugin_ fixed value anchor node_get object get source
org.graalvm.compiler.nodes.extended.PluginFactory_FixedValueAnchorNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ fixed value anchor node register plugins
org.graalvm.compiler.nodes.extended.Plugin_GuardedUnsafeLoadNode_guardedLoad#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ guarded unsafe load node_guarded load execute
org.graalvm.compiler.nodes.extended.Plugin_GuardedUnsafeLoadNode_guardedLoad#getSource()->Class::: plugin_ guarded unsafe load node_guarded load get source
org.graalvm.compiler.nodes.extended.PluginFactory_GuardedUnsafeLoadNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ guarded unsafe load node register plugins
org.graalvm.compiler.nodes.extended.Plugin_MembarNode_memoryBarrier__0#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ membar node_memory barrier__0 execute
org.graalvm.compiler.nodes.extended.Plugin_MembarNode_memoryBarrier__0#getSource()->Class::: plugin_ membar node_memory barrier__0 get source
org.graalvm.compiler.nodes.extended.Plugin_MembarNode_memoryBarrier__1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ membar node_memory barrier__1 execute
org.graalvm.compiler.nodes.extended.Plugin_MembarNode_memoryBarrier__1#getSource()->Class::: plugin_ membar node_memory barrier__1 get source
org.graalvm.compiler.nodes.extended.PluginFactory_MembarNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ membar node register plugins
org.graalvm.compiler.nodes.extended.Plugin_NullCheckNode_nullCheck#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ null check node_null check execute
org.graalvm.compiler.nodes.extended.Plugin_NullCheckNode_nullCheck#getSource()->Class::: plugin_ null check node_null check get source
org.graalvm.compiler.nodes.extended.PluginFactory_NullCheckNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ null check node register plugins
org.graalvm.compiler.nodes.extended.Plugin_RawLoadNode_load#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ raw load node_load execute
org.graalvm.compiler.nodes.extended.Plugin_RawLoadNode_load#getSource()->Class::: plugin_ raw load node_load get source
org.graalvm.compiler.nodes.extended.PluginFactory_RawLoadNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ raw load node register plugins
org.graalvm.compiler.nodes.extended.Plugin_RawStoreNode_storeByte#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ raw store node_store byte execute
org.graalvm.compiler.nodes.extended.Plugin_RawStoreNode_storeByte#getSource()->Class::: plugin_ raw store node_store byte get source
org.graalvm.compiler.nodes.extended.Plugin_RawStoreNode_storeChar#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ raw store node_store char execute
org.graalvm.compiler.nodes.extended.Plugin_RawStoreNode_storeChar#getSource()->Class::: plugin_ raw store node_store char get source
org.graalvm.compiler.nodes.extended.Plugin_RawStoreNode_storeObject#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ raw store node_store object execute
org.graalvm.compiler.nodes.extended.Plugin_RawStoreNode_storeObject#getSource()->Class::: plugin_ raw store node_store object get source
org.graalvm.compiler.nodes.extended.PluginFactory_RawStoreNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ raw store node register plugins
org.graalvm.compiler.nodes.extended.Plugin_StoreHubNode_write#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ store hub node_write execute
org.graalvm.compiler.nodes.extended.Plugin_StoreHubNode_write#getSource()->Class::: plugin_ store hub node_write get source
org.graalvm.compiler.nodes.extended.PluginFactory_StoreHubNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ store hub node register plugins
org.graalvm.compiler.nodes.extended.Plugin_UnsafeCopyNode_copy#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ unsafe copy node_copy execute
org.graalvm.compiler.nodes.extended.Plugin_UnsafeCopyNode_copy#getSource()->Class::: plugin_ unsafe copy node_copy get source
org.graalvm.compiler.nodes.extended.PluginFactory_UnsafeCopyNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ unsafe copy node register plugins
org.graalvm.compiler.nodes.extended.ArrayRangeWrite#getAddress()->AddressNode::: array range write get address
org.graalvm.compiler.nodes.extended.ArrayRangeWrite#getLength()->ValueNode:::The length of the modified range.
org.graalvm.compiler.nodes.extended.ArrayRangeWrite#writesObjectArray()->boolean:::Return true if the written array is an object array, false if it is a primitive array.
org.graalvm.compiler.nodes.extended.ArrayRangeWrite#isInitialization()->boolean:::Returns whether this write is the initialization of the written location
org.graalvm.compiler.nodes.extended.ArrayRangeWrite#getElementStride()->int::: array range write get element stride
org.graalvm.compiler.nodes.extended.ArrayRangeWrite#asNode()->FixedAccessNode::: array range write as node
org.graalvm.compiler.nodes.extended.BoxNode#getBoxingKind()->JavaKind::: box node get boxing kind
org.graalvm.compiler.nodes.extended.BoxNode#getValue()->ValueNode::: box node get value
org.graalvm.compiler.nodes.extended.BoxNode#lower(LoweringTool)->void::: box node lower
org.graalvm.compiler.nodes.extended.BoxNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: box node canonical
org.graalvm.compiler.nodes.extended.BoxNode#createVirtualBoxingNode()->VirtualBoxingNode::: box node create virtual boxing node
org.graalvm.compiler.nodes.extended.BoxNode#virtualize(VirtualizerTool)->void::: box node virtualize
org.graalvm.compiler.nodes.extended.BranchProbabilityNode#getProbability()->ValueNode::: branch probability node get probability
org.graalvm.compiler.nodes.extended.BranchProbabilityNode#getCondition()->ValueNode::: branch probability node get condition
org.graalvm.compiler.nodes.extended.BranchProbabilityNode#canonical(CanonicalizerTool)->Node::: branch probability node canonical
org.graalvm.compiler.nodes.extended.BranchProbabilityNode#simplify(SimplifierTool)->void::: branch probability node simplify
org.graalvm.compiler.nodes.extended.BranchProbabilityNode#probability(double, boolean)->boolean:::This intrinsic should only be used for the condition of an if statement
org.graalvm.compiler.nodes.extended.BranchProbabilityNode#lower(LoweringTool)->void::: branch probability node lower
org.graalvm.compiler.nodes.extended.BytecodeExceptionNode#getExceptionKind()->BytecodeExceptionKind::: bytecode exception node get exception kind
org.graalvm.compiler.nodes.extended.BytecodeExceptionNode#toString(Verbosity)->String::: bytecode exception node to string
org.graalvm.compiler.nodes.extended.BytecodeExceptionNode#getLocationIdentity()->LocationIdentity::: bytecode exception node get location identity
org.graalvm.compiler.nodes.extended.BytecodeExceptionNode#canonical(CanonicalizerTool)->Node::: bytecode exception node canonical
org.graalvm.compiler.nodes.extended.BytecodeExceptionNode#lower(LoweringTool)->void::: bytecode exception node lower
org.graalvm.compiler.nodes.extended.BytecodeExceptionNode#getArguments()->NodeInputList::: bytecode exception node get arguments
org.graalvm.compiler.nodes.extended.FixedValueAnchorNode#object()->ValueNode::: fixed value anchor node object
org.graalvm.compiler.nodes.extended.FixedValueAnchorNode#inferStamp()->boolean::: fixed value anchor node infer stamp
org.graalvm.compiler.nodes.extended.FixedValueAnchorNode#getObject(Object)->Object::: fixed value anchor node get object
org.graalvm.compiler.nodes.extended.FixedValueAnchorNode#generate(NodeLIRBuilderTool)->void::: fixed value anchor node generate
org.graalvm.compiler.nodes.extended.FixedValueAnchorNode#getOriginalNode()->ValueNode::: fixed value anchor node get original node
org.graalvm.compiler.nodes.extended.FixedValueAnchorNode#getGuard()->GuardingNode::: fixed value anchor node get guard
org.graalvm.compiler.nodes.extended.ForeignCallNode#intrinsify(GraphBuilderContext, ResolvedJavaMethod, Stamp, ForeignCallsProvider, ForeignCallDescriptor, ValueNode...)->boolean::: foreign call node intrinsify
org.graalvm.compiler.nodes.extended.ForeignCallNode#verifyDescriptor(GraphBuilderContext, ResolvedJavaMethod, ForeignCallDescriptor)->boolean::: foreign call node verify descriptor
org.graalvm.compiler.nodes.extended.ForeignCallNode#hasSideEffect()->boolean::: foreign call node has side effect
org.graalvm.compiler.nodes.extended.ForeignCallNode#getDescriptor()->ForeignCallDescriptor::: foreign call node get descriptor
org.graalvm.compiler.nodes.extended.ForeignCallNode#getLocationIdentities()->LocationIdentity[]::: foreign call node get location identities
org.graalvm.compiler.nodes.extended.ForeignCallNode#operands(NodeLIRBuilderTool)->Value[]::: foreign call node operands
org.graalvm.compiler.nodes.extended.ForeignCallNode#generate(NodeLIRBuilderTool)->void::: foreign call node generate
org.graalvm.compiler.nodes.extended.ForeignCallNode#setStateAfter(FrameState)->void::: foreign call node set state after
org.graalvm.compiler.nodes.extended.ForeignCallNode#stateDuring()->FrameState::: foreign call node state during
org.graalvm.compiler.nodes.extended.ForeignCallNode#setStateDuring(FrameState)->void::: foreign call node set state during
org.graalvm.compiler.nodes.extended.ForeignCallNode#getBci()->int::: foreign call node get bci
org.graalvm.compiler.nodes.extended.ForeignCallNode#setBci(int)->void:::Set the bci of the invoke bytecode for use when converting a stateAfter into a stateDuring.
org.graalvm.compiler.nodes.extended.ForeignCallNode#computeStateDuring(FrameState)->void::: foreign call node compute state during
org.graalvm.compiler.nodes.extended.ForeignCallNode#toString(Verbosity)->String::: foreign call node to string
org.graalvm.compiler.nodes.extended.ForeignCallNode#canDeoptimize()->boolean::: foreign call node can deoptimize
org.graalvm.compiler.nodes.extended.ForeignCallNode#isGuaranteedSafepoint()->boolean::: foreign call node is guaranteed safepoint
org.graalvm.compiler.nodes.extended.ForeignCallNode#getArguments()->NodeInputList::: foreign call node get arguments
org.graalvm.compiler.nodes.extended.GetClassNode#getObject()->ValueNode::: get class node get object
org.graalvm.compiler.nodes.extended.GetClassNode#lower(LoweringTool)->void::: get class node lower
org.graalvm.compiler.nodes.extended.GetClassNode#tryFold(MetaAccessProvider, ConstantReflectionProvider, NodeView, ValueNode)->ValueNode::: get class node try fold
org.graalvm.compiler.nodes.extended.GetClassNode#canonical(CanonicalizerTool)->ValueNode::: get class node canonical
org.graalvm.compiler.nodes.extended.GetClassNode#virtualize(VirtualizerTool)->void::: get class node virtualize
org.graalvm.compiler.nodes.extended.GuardedNode#getGuard()->GuardingNode::: guarded node get guard
org.graalvm.compiler.nodes.extended.GuardedNode#setGuard(GuardingNode)->void::: guarded node set guard
org.graalvm.compiler.nodes.extended.GuardedUnsafeLoadNode#getGuard()->GuardingNode::: guarded unsafe load node get guard
org.graalvm.compiler.nodes.extended.GuardedUnsafeLoadNode#setGuard(GuardingNode)->void::: guarded unsafe load node set guard
org.graalvm.compiler.nodes.extended.GuardedUnsafeLoadNode#guardedLoad(Object, long, JavaKind, LocationIdentity, GuardingNode)->Object::: guarded unsafe load node guarded load
org.graalvm.compiler.nodes.extended.HubGetClassNodeInterface#getHub()->ValueNode::: hub get class node interface get hub
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#isSorted()->boolean::: integer switch node is sorted
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#keyAt(int)->JavaConstant:::Gets the key at the specified index.
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#intKeyAt(int)->int:::Gets the key at the specified index, as a java int.
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#keyCount()->int::: integer switch node key count
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#equalKeys(SwitchNode)->boolean::: integer switch node equal keys
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#generate(NodeLIRBuilderTool)->void::: integer switch node generate
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#successorAtKey(int)->AbstractBeginNode::: integer switch node successor at key
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#successorIndexAtKey(int)->int::: integer switch node successor index at key
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#simplify(SimplifierTool)->void::: integer switch node simplify
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#getNextSwitchFoldableBranch()->Node::: integer switch node get next switch foldable branch
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#isInSwitch(ValueNode)->boolean::: integer switch node is in switch
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#cutOffCascadeNode()->void::: integer switch node cut off cascade node
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#cutOffLowestCascadeNode()->void::: integer switch node cut off lowest cascade node
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#getDefault()->AbstractBeginNode::: integer switch node get default
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#switchValue()->ValueNode::: integer switch node switch value
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#isNonInitializedProfile()->boolean::: integer switch node is non initialized profile
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#tryRemoveUnreachableKeys(SimplifierTool, Stamp)->boolean:::Remove unreachable keys from the switch based on the stamp of the value, i.e., based on the known range of the switch value.
org.graalvm.compiler.nodes.extended.IntegerSwitchNode#getValueStampForSuccessor(AbstractBeginNode)->Stamp::: integer switch node get value stamp for successor
org.graalvm.compiler.nodes.extended.JavaReadNode#lower(LoweringTool)->void::: java read node lower
org.graalvm.compiler.nodes.extended.JavaReadNode#canNullCheck()->boolean::: java read node can null check
org.graalvm.compiler.nodes.extended.JavaReadNode#getReadKind()->JavaKind::: java read node get read kind
org.graalvm.compiler.nodes.extended.JavaReadNode#isCompressible()->boolean::: java read node is compressible
org.graalvm.compiler.nodes.extended.JavaReadNode#canonical(CanonicalizerTool)->Node::: java read node canonical
org.graalvm.compiler.nodes.extended.JavaWriteNode#lower(LoweringTool)->void::: java write node lower
org.graalvm.compiler.nodes.extended.JavaWriteNode#canNullCheck()->boolean::: java write node can null check
org.graalvm.compiler.nodes.extended.JavaWriteNode#getWriteKind()->JavaKind::: java write node get write kind
org.graalvm.compiler.nodes.extended.JavaWriteNode#isCompressible()->boolean::: java write node is compressible
org.graalvm.compiler.nodes.extended.JavaWriteNode#getAccessStamp()->Stamp::: java write node get access stamp
org.graalvm.compiler.nodes.extended.LoadArrayComponentHubNode#create(ValueNode, StampProvider, MetaAccessProvider, ConstantReflectionProvider)->ValueNode::: load array component hub node create
org.graalvm.compiler.nodes.extended.LoadArrayComponentHubNode#getValue()->ValueNode::: load array component hub node get value
org.graalvm.compiler.nodes.extended.LoadArrayComponentHubNode#lower(LoweringTool)->void::: load array component hub node lower
org.graalvm.compiler.nodes.extended.LoadArrayComponentHubNode#canonical(CanonicalizerTool, ValueNode)->Node::: load array component hub node canonical
org.graalvm.compiler.nodes.extended.LoadHubNode#getValue()->ValueNode::: load hub node get value
org.graalvm.compiler.nodes.extended.LoadHubNode#create(ValueNode, StampProvider, MetaAccessProvider, ConstantReflectionProvider)->ValueNode::: load hub node create
org.graalvm.compiler.nodes.extended.LoadHubNode#lower(LoweringTool)->void::: load hub node lower
org.graalvm.compiler.nodes.extended.LoadHubNode#canonical(CanonicalizerTool)->ValueNode::: load hub node canonical
org.graalvm.compiler.nodes.extended.LoadHubNode#findSynonym(ValueNode, Stamp, MetaAccessProvider, ConstantReflectionProvider)->ValueNode::: load hub node find synonym
org.graalvm.compiler.nodes.extended.LoadHubNode#virtualize(VirtualizerTool)->void::: load hub node virtualize
org.graalvm.compiler.nodes.extended.LoadMethodNode#getHub()->ValueNode::: load method node get hub
org.graalvm.compiler.nodes.extended.LoadMethodNode#lower(LoweringTool)->void::: load method node lower
org.graalvm.compiler.nodes.extended.LoadMethodNode#canonical(CanonicalizerTool)->Node::: load method node canonical
org.graalvm.compiler.nodes.extended.LoadMethodNode#getMethod()->ResolvedJavaMethod::: load method node get method
org.graalvm.compiler.nodes.extended.LoadMethodNode#getReceiverType()->ResolvedJavaType::: load method node get receiver type
org.graalvm.compiler.nodes.extended.LoadMethodNode#getCallerType()->ResolvedJavaType::: load method node get caller type
org.graalvm.compiler.nodes.extended.MembarNode#getLocationIdentity()->LocationIdentity::: membar node get location identity
org.graalvm.compiler.nodes.extended.MembarNode#generate(NodeLIRBuilderTool)->void::: membar node generate
org.graalvm.compiler.nodes.extended.MembarNode#memoryBarrier(int)->void::: membar node memory barrier
org.graalvm.compiler.nodes.extended.MembarNode#memoryBarrier(int, LocationIdentity)->void::: membar node memory barrier
org.graalvm.compiler.nodes.extended.MultiGuardNode#generate(NodeLIRBuilderTool)->void::: multi guard node generate
org.graalvm.compiler.nodes.extended.MultiGuardNode#simplify(SimplifierTool)->void::: multi guard node simplify
org.graalvm.compiler.nodes.extended.MultiGuardNode#addGuard(GuardingNode)->void::: multi guard node add guard
org.graalvm.compiler.nodes.extended.MultiGuardNode#combine(GuardingNode, GuardingNode)->GuardingNode::: multi guard node combine
org.graalvm.compiler.nodes.extended.MultiGuardNode#addGuard(GuardingNode, GuardingNode)->GuardingNode::: multi guard node add guard
org.graalvm.compiler.nodes.extended.NullCheckNode#getObject()->ValueNode::: null check node get object
org.graalvm.compiler.nodes.extended.NullCheckNode#generate(NodeLIRBuilderTool)->void::: null check node generate
org.graalvm.compiler.nodes.extended.NullCheckNode#canDeoptimize()->boolean::: null check node can deoptimize
org.graalvm.compiler.nodes.extended.NullCheckNode#nullCheck(Object)->void::: null check node null check
org.graalvm.compiler.nodes.extended.OpaqueNode#getValue()->ValueNode::: opaque node get value
org.graalvm.compiler.nodes.extended.OpaqueNode#setValue(ValueNode)->void::: opaque node set value
org.graalvm.compiler.nodes.extended.OpaqueNode#remove()->void::: opaque node remove
org.graalvm.compiler.nodes.extended.OpaqueNode#generate(NodeLIRBuilderTool)->void::: opaque node generate
org.graalvm.compiler.nodes.extended.OSRMonitorEnterNode#virtualize(VirtualizerTool)->void::: monitor enter node virtualize
org.graalvm.compiler.nodes.extended.OSRMonitorEnterNode#generate(NodeLIRBuilderTool)->void::: monitor enter node generate
org.graalvm.compiler.nodes.extended.OSRMonitorEnterNode#lower(LoweringTool)->void::: monitor enter node lower
org.graalvm.compiler.nodes.extended.OSRStartNode#lower(LoweringTool)->void::: start node lower
org.graalvm.compiler.nodes.extended.OSRStartNode#getOSRLocals()->NodeIterable::: start node get locals
org.graalvm.compiler.nodes.extended.RawLoadNode#lower(LoweringTool)->void::: raw load node lower
org.graalvm.compiler.nodes.extended.RawLoadNode#virtualize(VirtualizerTool)->void::: raw load node virtualize
org.graalvm.compiler.nodes.extended.RawLoadNode#canonical(CanonicalizerTool)->Node::: raw load node canonical
org.graalvm.compiler.nodes.extended.RawLoadNode#cloneAsFieldAccess(Assumptions, ResolvedJavaField, boolean)->ValueNode::: raw load node clone as field access
org.graalvm.compiler.nodes.extended.RawLoadNode#cloneAsArrayAccess(ValueNode, LocationIdentity)->ValueNode::: raw load node clone as array access
org.graalvm.compiler.nodes.extended.RawLoadNode#load(Object, long, JavaKind, LocationIdentity)->Object::: raw load node load
org.graalvm.compiler.nodes.extended.RawStoreNode#storeObject(Object, long, Object, JavaKind, LocationIdentity, boolean)->Object::: raw store node store object
org.graalvm.compiler.nodes.extended.RawStoreNode#storeChar(Object, long, char, JavaKind, LocationIdentity)->Object::: raw store node store char
org.graalvm.compiler.nodes.extended.RawStoreNode#storeByte(Object, long, byte, JavaKind, LocationIdentity)->Object::: raw store node store byte
org.graalvm.compiler.nodes.extended.RawStoreNode#needsBarrier()->boolean::: raw store node needs barrier
org.graalvm.compiler.nodes.extended.RawStoreNode#stateAfter()->FrameState::: raw store node state after
org.graalvm.compiler.nodes.extended.RawStoreNode#setStateAfter(FrameState)->void::: raw store node set state after
org.graalvm.compiler.nodes.extended.RawStoreNode#hasSideEffect()->boolean::: raw store node has side effect
org.graalvm.compiler.nodes.extended.RawStoreNode#value()->ValueNode::: raw store node value
org.graalvm.compiler.nodes.extended.RawStoreNode#lower(LoweringTool)->void::: raw store node lower
org.graalvm.compiler.nodes.extended.RawStoreNode#virtualize(VirtualizerTool)->void::: raw store node virtualize
org.graalvm.compiler.nodes.extended.RawStoreNode#cloneAsFieldAccess(Assumptions, ResolvedJavaField, boolean)->ValueNode::: raw store node clone as field access
org.graalvm.compiler.nodes.extended.RawStoreNode#cloneAsArrayAccess(ValueNode, LocationIdentity)->ValueNode::: raw store node clone as array access
org.graalvm.compiler.nodes.extended.RawStoreNode#getState()->FrameState::: raw store node get state
org.graalvm.compiler.nodes.extended.StateSplitProxyNode#stateAfter()->FrameState::: state split proxy node state after
org.graalvm.compiler.nodes.extended.StateSplitProxyNode#setStateAfter(FrameState)->void::: state split proxy node set state after
org.graalvm.compiler.nodes.extended.StateSplitProxyNode#hasSideEffect()->boolean::: state split proxy node has side effect
org.graalvm.compiler.nodes.extended.StateSplitProxyNode#canonical(CanonicalizerTool)->Node::: state split proxy node canonical
org.graalvm.compiler.nodes.extended.StoreHubNode#getValue()->ValueNode::: store hub node get value
org.graalvm.compiler.nodes.extended.StoreHubNode#getObject()->ValueNode::: store hub node get object
org.graalvm.compiler.nodes.extended.StoreHubNode#lower(LoweringTool)->void::: store hub node lower
org.graalvm.compiler.nodes.extended.StoreHubNode#write(Object, Object)->void::: store hub node write
org.graalvm.compiler.nodes.extended.SwitchNode#getSuccessorCount()->int::: switch node get successor count
org.graalvm.compiler.nodes.extended.SwitchNode#probability(AbstractBeginNode)->double::: switch node probability
org.graalvm.compiler.nodes.extended.SwitchNode#setProbability(AbstractBeginNode, double)->boolean::: switch node set probability
org.graalvm.compiler.nodes.extended.SwitchNode#value()->ValueNode::: switch node value
org.graalvm.compiler.nodes.extended.SwitchNode#isSorted()->boolean::: switch node is sorted
org.graalvm.compiler.nodes.extended.SwitchNode#keyCount()->int:::The number of distinct keys in this switch.
org.graalvm.compiler.nodes.extended.SwitchNode#keyAt(int)->Constant:::The key at the specified position, encoded in a Constant.
org.graalvm.compiler.nodes.extended.SwitchNode#structureEquals(SwitchNode)->boolean::: switch node structure equals
org.graalvm.compiler.nodes.extended.SwitchNode#equalKeys(SwitchNode)->boolean:::Returns true if the switch has the same keys in the same order as this switch.
org.graalvm.compiler.nodes.extended.SwitchNode#keySuccessorIndex(int)->int:::Returns the index of the successor belonging to the key at the specified index.
org.graalvm.compiler.nodes.extended.SwitchNode#keySuccessor(int)->AbstractBeginNode:::Returns the successor for the key at the given index.
org.graalvm.compiler.nodes.extended.SwitchNode#keyProbability(int)->double:::Returns the probability of the key at the given index.
org.graalvm.compiler.nodes.extended.SwitchNode#defaultProbability()->double:::Returns the probability of taking the default branch.
org.graalvm.compiler.nodes.extended.SwitchNode#defaultSuccessorIndex()->int:::Returns the index of the default (fall through) successor of this switch.
org.graalvm.compiler.nodes.extended.SwitchNode#blockSuccessor(int)->AbstractBeginNode::: switch node block successor
org.graalvm.compiler.nodes.extended.SwitchNode#setBlockSuccessor(int, AbstractBeginNode)->void::: switch node set block successor
org.graalvm.compiler.nodes.extended.SwitchNode#blockSuccessorCount()->int::: switch node block successor count
org.graalvm.compiler.nodes.extended.SwitchNode#defaultSuccessor()->AbstractBeginNode:::Gets the successor corresponding to the default (fall through) case.
org.graalvm.compiler.nodes.extended.SwitchNode#getPrimarySuccessor()->AbstractBeginNode::: switch node get primary successor
org.graalvm.compiler.nodes.extended.SwitchNode#killOtherSuccessors(SimplifierTool, int)->void:::Delete all other successors except for the one reached by survivingEdge.
org.graalvm.compiler.nodes.extended.SwitchNode#getValueStampForSuccessor(AbstractBeginNode)->Stamp::: switch node get value stamp for successor
org.graalvm.compiler.nodes.extended.SwitchNode#estimatedNodeCycles()->NodeCycles::: switch node estimated node cycles
org.graalvm.compiler.nodes.extended.SwitchNode#estimatedNodeSize()->NodeSize::: switch node estimated node size
org.graalvm.compiler.nodes.extended.UnboxNode#getValue()->ValueNode::: unbox node get value
org.graalvm.compiler.nodes.extended.UnboxNode#create(MetaAccessProvider, ConstantReflectionProvider, ValueNode, JavaKind)->ValueNode::: unbox node create
org.graalvm.compiler.nodes.extended.UnboxNode#getBoxingKind()->JavaKind::: unbox node get boxing kind
org.graalvm.compiler.nodes.extended.UnboxNode#lower(LoweringTool)->void::: unbox node lower
org.graalvm.compiler.nodes.extended.UnboxNode#virtualize(VirtualizerTool)->void::: unbox node virtualize
org.graalvm.compiler.nodes.extended.UnboxNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: unbox node canonical
org.graalvm.compiler.nodes.extended.UnsafeAccessNode#getLocationIdentity()->LocationIdentity::: unsafe access node get location identity
org.graalvm.compiler.nodes.extended.UnsafeAccessNode#isAnyLocationForced()->boolean::: unsafe access node is any location forced
org.graalvm.compiler.nodes.extended.UnsafeAccessNode#object()->ValueNode::: unsafe access node object
org.graalvm.compiler.nodes.extended.UnsafeAccessNode#offset()->ValueNode::: unsafe access node offset
org.graalvm.compiler.nodes.extended.UnsafeAccessNode#accessKind()->JavaKind::: unsafe access node access kind
org.graalvm.compiler.nodes.extended.UnsafeAccessNode#canonical(CanonicalizerTool)->Node::: unsafe access node canonical
org.graalvm.compiler.nodes.extended.UnsafeAccessNode#cloneAsFieldAccess(Assumptions, ResolvedJavaField)->ValueNode::: unsafe access node clone as field access
org.graalvm.compiler.nodes.extended.UnsafeAccessNode#cloneAsFieldAccess(Assumptions, ResolvedJavaField, boolean)->ValueNode::: unsafe access node clone as field access
org.graalvm.compiler.nodes.extended.UnsafeAccessNode#cloneAsArrayAccess(ValueNode, LocationIdentity)->ValueNode::: unsafe access node clone as array access
org.graalvm.compiler.nodes.extended.UnsafeCopyNode#intrinsify(GraphBuilderContext, ResolvedJavaMethod, ValueNode, ValueNode, ValueNode, ValueNode, JavaKind, LocationIdentity)->boolean::: unsafe copy node intrinsify
org.graalvm.compiler.nodes.extended.UnsafeCopyNode#copy(Object, long, Object, long, JavaKind, LocationIdentity)->void::: unsafe copy node copy
org.graalvm.compiler.nodes.extended.UnsafeMemoryLoadNode#getAddress()->ValueNode::: unsafe memory load node get address
org.graalvm.compiler.nodes.extended.UnsafeMemoryLoadNode#getKind()->JavaKind::: unsafe memory load node get kind
org.graalvm.compiler.nodes.extended.UnsafeMemoryLoadNode#lower(LoweringTool)->void::: unsafe memory load node lower
org.graalvm.compiler.nodes.extended.UnsafeMemoryLoadNode#getLocationIdentity()->LocationIdentity::: unsafe memory load node get location identity
org.graalvm.compiler.nodes.extended.UnsafeMemoryStoreNode#getValue()->ValueNode::: unsafe memory store node get value
org.graalvm.compiler.nodes.extended.UnsafeMemoryStoreNode#getAddress()->ValueNode::: unsafe memory store node get address
org.graalvm.compiler.nodes.extended.UnsafeMemoryStoreNode#getKind()->JavaKind::: unsafe memory store node get kind
org.graalvm.compiler.nodes.extended.UnsafeMemoryStoreNode#lower(LoweringTool)->void::: unsafe memory store node lower
org.graalvm.compiler.nodes.extended.UnsafeMemoryStoreNode#getLocationIdentity()->LocationIdentity::: unsafe memory store node get location identity
org.graalvm.compiler.nodes.extended.ValueAnchorNode#generate(NodeLIRBuilderTool)->void::: value anchor node generate
org.graalvm.compiler.nodes.extended.ValueAnchorNode#getAnchoredNode()->ValueNode::: value anchor node get anchored node
org.graalvm.compiler.nodes.extended.ValueAnchorNode#simplify(SimplifierTool)->void::: value anchor node simplify
org.graalvm.compiler.nodes.extended.ValueAnchorNode#virtualize(VirtualizerTool)->void::: value anchor node virtualize
org.graalvm.compiler.nodes.extended.ValueAnchorNode#removeAnchoredNode()->void::: value anchor node remove anchored node

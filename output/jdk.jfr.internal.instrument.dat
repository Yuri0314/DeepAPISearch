ConstructorTracerWriter#generateBytes(Class, byte[])::: constructor tracer writer generate bytes:::in->new->ByteArrayInputStream->cr->new->ClassReader->cw->new->ClassWriter->ctw->new->ConstructorTracerWriter->cr->accept->return->cw->toByteArray
ConstructorTracerWriter#isConstructor(String)::: constructor tracer writer is constructor:::return->name->equals
ConstructorTracerWriter#takesStringParameter(String)::: constructor tracer writer takes string parameter:::types->Type->getArgumentTypes->if->getClassName->getName->equals->return->return
ConstructorTracerWriter#visitMethod(int, String, String, String, String[])::: constructor tracer writer visit method:::mv->super->visitMethod->if->isConstructor->if->takesStringParameter->useInputParameter->setMethodVisitor->return->noUseInputParameter->setMethodVisitor->return->return
ConstructorWriter#visitInsn(int)::: constructor writer visit insn:::if->if->useInput->else->noInput->mv->visitInsn
ConstructorWriter#useInput()::: constructor writer use input:::mv->visitVarInsn->mv->visitVarInsn->mv->visitMethodInsn
ConstructorWriter#noInput()::: constructor writer no input:::mv->visitVarInsn->mv->visitInsn->mv->visitMethodInsn
ConstructorWriter#setMethodVisitor(MethodVisitor)::: constructor writer set method visitor:::
FileChannelImplInstrumentor#force(boolean)::: file channel impl instrumentor force:::event->get->if->event->isEnabled->force->return->try->event->begin->force->catch->finally->event->commit->event->reset
FileChannelImplInstrumentor#read(ByteBuffer)::: file channel impl instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->if->else->event->commit->event->reset->return
FileChannelImplInstrumentor#read(ByteBuffer, long)::: file channel impl instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->if->else->event->commit->event->reset->return
FileChannelImplInstrumentor#read(ByteBuffer[], int, int)::: file channel impl instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->if->else->event->commit->event->reset->return
FileChannelImplInstrumentor#write(ByteBuffer)::: file channel impl instrumentor write:::event->get->if->event->isEnabled->return->write->bytesWritten->try->event->begin->write->catch->finally->event->commit->event->reset->return
FileChannelImplInstrumentor#write(ByteBuffer, long)::: file channel impl instrumentor write:::event->get->if->event->isEnabled->return->write->bytesWritten->try->event->begin->write->catch->finally->event->commit->event->reset->return
FileChannelImplInstrumentor#write(ByteBuffer[], int, int)::: file channel impl instrumentor write:::event->get->if->event->isEnabled->return->write->bytesWritten->try->event->begin->write->catch->finally->event->commit->event->reset->return
FileInputStreamInstrumentor#read()::: file input stream instrumentor read:::event->get->if->event->isEnabled->return->read->result->try->event->begin->read->if->else->catch->finally->event->commit->event->reset->return
FileInputStreamInstrumentor#read(byte[])::: file input stream instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->if->else->event->commit->event->reset->return
FileInputStreamInstrumentor#read(byte[], int, int)::: file input stream instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->if->else->event->commit->event->reset->return
FileOutputStreamInstrumentor#write(int)::: file output stream instrumentor write:::event->get->if->event->isEnabled->write->return->try->event->begin->write->catch->finally->event->commit->event->reset
FileOutputStreamInstrumentor#write(byte[])::: file output stream instrumentor write:::event->get->if->event->isEnabled->write->return->try->event->begin->write->catch->finally->event->commit->event->reset
FileOutputStreamInstrumentor#write(byte[], int, int)::: file output stream instrumentor write:::event->get->if->event->isEnabled->write->return->try->event->begin->write->catch->finally->event->commit->event->reset
JDKEvents#initialize()::: events initialize:::try->if->foreach->SecuritySupport->registerMirror->foreach->SecuritySupport->registerEvent->RequestEngine->addTrustedJDKHook->catch->Logger->e->getMessage->log->finally
JDKEvents#addInstrumentation()::: events add instrumentation:::try->list->new->ArrayList<>->for->i->list->add->list->add->Logger->log->jvm->list->list->size->new->Class<?>Arr->toArray->retransformClasses->catch->Logger->e->getMessage->log->finally
JDKEvents#emitExceptionStatistics()::: events emit exception statistics:::t->new->ExceptionStatisticsEvent->ThrowableTracer->numThrowables->t->commit
JDKEvents#retransformCallback(Class, byte[])::: events retransform callback:::if->Logger->log->return->ConstructorTracerWriter->generateBytes->if->Logger->log->return->ConstructorTracerWriter->generateBytes->for->i->return
JDKEvents#remove()::: events remove:::RequestEngine->JDKEvents->emitExceptionStatistics->removeHook
JIClassInstrumentation#getOriginalClassBytes(Class)::: class instrumentation get original class bytes:::baos->new->ByteArrayOutputStream->name->clazz->getName->replace->is->SecuritySupport->getResourceAsStream->bytesRead->buffer->new->byteArr->while->is->read->baos->write->baos->flush->is->close->return->baos->toByteArray
JIClassInstrumentation#makeBytecode()::: class instrumentation make bytecode:::instrumentationMethods->new->ArrayList<>->foreach->instrumentor->getDeclaredMethods->im->m->getAnnotation->if->instrumentationMethods->add->temporary->new->ClassNode->inliner->new->JIInliner->instrClassReader->accept->cw->new->ClassWriter->ma->instrumentor->getAnnotationsByType->new->JIMethodMergeAdapter->targetClassReader->accept->return->cw->toByteArray
JIClassInstrumentation#getNewBytes():::Get the instrumented byte codes that can be used to retransform the class.:::return->newBytes->clone
JIInliner#visitMethod(int, String, String, String, String[])::: inliner visit method:::mv->super->visitMethod->if->isInstrumentationMethod->methodToInline->findTargetMethodNode->if->throw->new->IllegalArgumentException->if->Modifier->isNative->throw->new->IllegalArgumentException->Logger->log->mci->new->JIMethodCallInliner->return->return
JIInliner#isInstrumentationMethod(String, String)::: inliner is instrumentation method:::foreach->if->m->getName->equals->Type->getMethodDescriptor->equals->return->return
JIInliner#findTargetMethodNode(String, String)::: inliner find target method node:::foreach->if->equals->equals->return->throw->new->IllegalArgumentException
JIMethodCallInliner#visitMethodInsn(int, String, String, String, boolean)::: method call inliner visit method insn:::if->shouldBeInlined->mv->visitMethodInsn->return->Logger->log->remapper->new->SimpleRemapper->end->new->Label->resetLabels->mia->new->JIMethodInliningAdapter->inlineTarget->accept->super->visitLabel
JIMethodCallInliner#shouldBeInlined(String, String, String):::Determine if the method should be inlined or not.:::return->equals->equals->owner->newClass->replace->equals
JIMethodCallInliner#visitTryCatchBlock(Label, Label, Label, String)::: method call inliner visit try catch block:::if->blocks->new->CatchBlock->add->else->super->visitTryCatchBlock
JIMethodCallInliner#visitMaxs(int, int)::: method call inliner visit maxs:::foreach->super->visitTryCatchBlock->super->visitMaxs
JIMethodInliningAdapter#isStatic(int)::: method inlining adapter is static:::return
JIMethodInliningAdapter#visitInsn(int)::: method inlining adapter visit insn:::if->super->visitJumpInsn->else->super->visitInsn
JIMethodInliningAdapter#visitMaxs(int, int)::: method inlining adapter visit maxs:::
JIMethodInliningAdapter#newLocalMapping(Type)::: method inlining adapter new local mapping:::return->lvs->newLocal
JIMethodMergeAdapter#visit(int, int, String, String, String, String[])::: method merge adapter visit:::super->visit->typeMap->put
JIMethodMergeAdapter#visitMethod(int, String, String, String, String[])::: method merge adapter visit method:::if->methodInFilter->Logger->log->return->return->super->visitMethod
JIMethodMergeAdapter#visitEnd()::: method merge adapter visit end:::remapper->new->SimpleRemapper->foreach->if->methodInFilter->Logger->log->Logger->log->exceptions->size->new->StringArr->toArray->mv->cv->visitMethod->resetLabels->mn->new->RemappingMethodAdapter->accept->super->visitEnd
JIMethodMergeAdapter#methodInFilter(String, String)::: method merge adapter method in filter:::foreach->if->m->getName->equals->Type->getMethodDescriptor->equals->return->return
RandomAccessFileInstrumentor#read()::: random access file instrumentor read:::event->get->if->event->isEnabled->return->read->result->try->event->begin->read->if->else->catch->finally->event->commit->event->reset->return
RandomAccessFileInstrumentor#read(byte[])::: random access file instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->if->else->event->commit->event->reset->return
RandomAccessFileInstrumentor#read(byte[], int, int)::: random access file instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->if->else->event->commit->event->reset->return
RandomAccessFileInstrumentor#write(int)::: random access file instrumentor write:::event->get->if->event->isEnabled->write->return->try->event->begin->write->catch->finally->event->commit->event->reset
RandomAccessFileInstrumentor#write(byte[])::: random access file instrumentor write:::event->get->if->event->isEnabled->write->return->try->event->begin->write->catch->finally->event->commit->event->reset
RandomAccessFileInstrumentor#write(byte[], int, int)::: random access file instrumentor write:::event->get->if->event->isEnabled->write->return->try->event->begin->write->catch->finally->event->commit->event->reset
SocketChannelImplInstrumentor#read(ByteBuffer)::: socket channel impl instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->event->end->if->event->shouldCommit->hostString->remoteAddress->getAddress->toString->delimiterIndex->hostString->lastIndexOf->hostString->substring->hostString->substring->remoteAddress->getPort->if->else->event->commit->event->reset->return
SocketChannelImplInstrumentor#read(ByteBuffer[], int, int)::: socket channel impl instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->event->end->if->event->shouldCommit->hostString->remoteAddress->getAddress->toString->delimiterIndex->hostString->lastIndexOf->hostString->substring->hostString->substring->remoteAddress->getPort->if->else->event->commit->event->reset->return
SocketChannelImplInstrumentor#write(ByteBuffer)::: socket channel impl instrumentor write:::event->get->if->event->isEnabled->return->write->bytesWritten->try->event->begin->write->catch->finally->event->end->if->event->shouldCommit->hostString->remoteAddress->getAddress->toString->delimiterIndex->hostString->lastIndexOf->hostString->substring->hostString->substring->remoteAddress->getPort->event->commit->event->reset->return
SocketChannelImplInstrumentor#write(ByteBuffer[], int, int)::: socket channel impl instrumentor write:::event->get->if->event->isEnabled->return->write->bytesWritten->try->event->begin->write->catch->finally->event->end->if->event->shouldCommit->hostString->remoteAddress->getAddress->toString->delimiterIndex->hostString->lastIndexOf->hostString->substring->hostString->substring->remoteAddress->getPort->event->commit->event->reset->return
SocketInputStreamInstrumentor#read(byte[], int, int, int)::: socket input stream instrumentor read:::event->get->if->event->isEnabled->return->read->bytesRead->try->event->begin->read->catch->finally->event->end->if->event->shouldCommit->hostString->toString->delimiterIndex->hostString->lastIndexOf->hostString->substring->hostString->substring->if->else->event->commit->event->reset->return
SocketInputStreamInstrumentor#silenceFindBugsUnwrittenField(InetAddress)::: socket input stream instrumentor silence find bugs unwritten field:::
SocketOutputStreamInstrumentor#socketWrite(byte[], int, int)::: socket output stream instrumentor socket write:::event->get->if->event->isEnabled->socketWrite->return->bytesWritten->try->event->begin->socketWrite->catch->finally->event->end->if->event->shouldCommit->hostString->toString->delimiterIndex->hostString->lastIndexOf->hostString->substring->hostString->substring->event->commit->event->reset
SocketOutputStreamInstrumentor#silenceFindBugsUnwrittenField(InetAddress)::: socket output stream instrumentor silence find bugs unwritten field:::
ThrowableTracer#traceError(Error, String)::: throwable tracer trace error:::if->return->errorEvent->new->ErrorThrownEvent->e->getClass->errorEvent->commit->exceptionEvent->new->ExceptionThrownEvent->e->getClass->exceptionEvent->commit->numThrowables->incrementAndGet
ThrowableTracer#traceThrowable(Throwable, String)::: throwable tracer trace throwable:::event->new->ExceptionThrownEvent->t->getClass->event->commit->numThrowables->incrementAndGet
ThrowableTracer#numThrowables()::: throwable tracer num throwables:::return->numThrowables->get

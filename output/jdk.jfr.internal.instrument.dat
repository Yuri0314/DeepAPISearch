jdk.jfr.internal.instrument.ConstructorTracerWriter#generateBytes(Class, byte[])->byte[]::: constructor tracer writer generate bytes
jdk.jfr.internal.instrument.ConstructorTracerWriter#visitMethod(int, String, String, String, String[])->MethodVisitor::: constructor tracer writer visit method
jdk.jfr.internal.instrument.ConstructorWriter#visitInsn(int)->void::: constructor writer visit insn
jdk.jfr.internal.instrument.ConstructorWriter#setMethodVisitor(MethodVisitor)->void::: constructor writer set method visitor
jdk.jfr.internal.instrument.FileChannelImplInstrumentor#force(boolean)->void::: file channel impl instrumentor force
jdk.jfr.internal.instrument.FileChannelImplInstrumentor#read(ByteBuffer)->int::: file channel impl instrumentor read
jdk.jfr.internal.instrument.FileChannelImplInstrumentor#read(ByteBuffer, long)->int::: file channel impl instrumentor read
jdk.jfr.internal.instrument.FileChannelImplInstrumentor#read(ByteBuffer[], int, int)->long::: file channel impl instrumentor read
jdk.jfr.internal.instrument.FileChannelImplInstrumentor#write(ByteBuffer)->int::: file channel impl instrumentor write
jdk.jfr.internal.instrument.FileChannelImplInstrumentor#write(ByteBuffer, long)->int::: file channel impl instrumentor write
jdk.jfr.internal.instrument.FileChannelImplInstrumentor#write(ByteBuffer[], int, int)->long::: file channel impl instrumentor write
jdk.jfr.internal.instrument.FileInputStreamInstrumentor#read()->int::: file input stream instrumentor read
jdk.jfr.internal.instrument.FileInputStreamInstrumentor#read(byte[])->int::: file input stream instrumentor read
jdk.jfr.internal.instrument.FileInputStreamInstrumentor#read(byte[], int, int)->int::: file input stream instrumentor read
jdk.jfr.internal.instrument.FileOutputStreamInstrumentor#write(int)->void::: file output stream instrumentor write
jdk.jfr.internal.instrument.FileOutputStreamInstrumentor#write(byte[])->void::: file output stream instrumentor write
jdk.jfr.internal.instrument.FileOutputStreamInstrumentor#write(byte[], int, int)->void::: file output stream instrumentor write
jdk.jfr.internal.instrument.JDKEvents#initialize()->void::: events initialize
jdk.jfr.internal.instrument.JDKEvents#addInstrumentation()->void::: events add instrumentation
jdk.jfr.internal.instrument.JDKEvents#retransformCallback(Class, byte[])->byte[]::: events retransform callback
jdk.jfr.internal.instrument.JDKEvents#remove()->void::: events remove
jdk.jfr.internal.instrument.JIClassInstrumentation#getNewBytes()->byte[]:::Get the instrumented byte codes that can be used to retransform the class.
jdk.jfr.internal.instrument.JIInliner#visitMethod(int, String, String, String, String[])->MethodVisitor::: inliner visit method
jdk.jfr.internal.instrument.JIMethodCallInliner#visitMethodInsn(int, String, String, String, boolean)->void::: method call inliner visit method insn
jdk.jfr.internal.instrument.JIMethodCallInliner#visitTryCatchBlock(Label, Label, Label, String)->void::: method call inliner visit try catch block
jdk.jfr.internal.instrument.JIMethodCallInliner#visitMaxs(int, int)->void::: method call inliner visit maxs
jdk.jfr.internal.instrument.JIMethodInliningAdapter#visitInsn(int)->void::: method inlining adapter visit insn
jdk.jfr.internal.instrument.JIMethodInliningAdapter#visitMaxs(int, int)->void::: method inlining adapter visit maxs
jdk.jfr.internal.instrument.JIMethodInliningAdapter#newLocalMapping(Type)->int::: method inlining adapter new local mapping
jdk.jfr.internal.instrument.JIMethodMergeAdapter#visit(int, int, String, String, String, String[])->void::: method merge adapter visit
jdk.jfr.internal.instrument.JIMethodMergeAdapter#visitMethod(int, String, String, String, String[])->MethodVisitor::: method merge adapter visit method
jdk.jfr.internal.instrument.JIMethodMergeAdapter#visitEnd()->void::: method merge adapter visit end
jdk.jfr.internal.instrument.RandomAccessFileInstrumentor#read()->int::: random access file instrumentor read
jdk.jfr.internal.instrument.RandomAccessFileInstrumentor#read(byte[])->int::: random access file instrumentor read
jdk.jfr.internal.instrument.RandomAccessFileInstrumentor#read(byte[], int, int)->int::: random access file instrumentor read
jdk.jfr.internal.instrument.RandomAccessFileInstrumentor#write(int)->void::: random access file instrumentor write
jdk.jfr.internal.instrument.RandomAccessFileInstrumentor#write(byte[])->void::: random access file instrumentor write
jdk.jfr.internal.instrument.RandomAccessFileInstrumentor#write(byte[], int, int)->void::: random access file instrumentor write
jdk.jfr.internal.instrument.SocketChannelImplInstrumentor#read(ByteBuffer)->int::: socket channel impl instrumentor read
jdk.jfr.internal.instrument.SocketChannelImplInstrumentor#read(ByteBuffer[], int, int)->long::: socket channel impl instrumentor read
jdk.jfr.internal.instrument.SocketChannelImplInstrumentor#write(ByteBuffer)->int::: socket channel impl instrumentor write
jdk.jfr.internal.instrument.SocketChannelImplInstrumentor#write(ByteBuffer[], int, int)->long::: socket channel impl instrumentor write
jdk.jfr.internal.instrument.SocketInputStreamInstrumentor#read(byte[], int, int, int)->int::: socket input stream instrumentor read
jdk.jfr.internal.instrument.SocketInputStreamInstrumentor#silenceFindBugsUnwrittenField(InetAddress)->void::: socket input stream instrumentor silence find bugs unwritten field
jdk.jfr.internal.instrument.SocketOutputStreamInstrumentor#silenceFindBugsUnwrittenField(InetAddress)->void::: socket output stream instrumentor silence find bugs unwritten field
jdk.jfr.internal.instrument.ThrowableTracer#traceError(Error, String)->void::: throwable tracer trace error
jdk.jfr.internal.instrument.ThrowableTracer#traceThrowable(Throwable, String)->void::: throwable tracer trace throwable
jdk.jfr.internal.instrument.ThrowableTracer#numThrowables()->long::: throwable tracer num throwables

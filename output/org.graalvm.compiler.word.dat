org.graalvm.compiler.word.BarrieredAccess#readByte(Object, WordBase, LocationIdentity)->byte:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readChar(Object, WordBase, LocationIdentity)->char:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readShort(Object, WordBase, LocationIdentity)->short:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readInt(Object, WordBase, LocationIdentity)->int:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readLong(Object, WordBase, LocationIdentity)->long:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readFloat(Object, WordBase, LocationIdentity)->float:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readDouble(Object, WordBase, LocationIdentity)->double:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readWord(Object, WordBase, LocationIdentity)->T:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readObject(Object, WordBase, LocationIdentity)->Object:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readByte(Object, int, LocationIdentity)->byte:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readChar(Object, int, LocationIdentity)->char:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readShort(Object, int, LocationIdentity)->short:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readInt(Object, int, LocationIdentity)->int:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readLong(Object, int, LocationIdentity)->long:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readFloat(Object, int, LocationIdentity)->float:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readDouble(Object, int, LocationIdentity)->double:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readWord(Object, int, LocationIdentity)->T:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readObject(Object, int, LocationIdentity)->Object:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeByte(Object, WordBase, byte, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeChar(Object, WordBase, char, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeShort(Object, WordBase, short, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeInt(Object, WordBase, int, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeLong(Object, WordBase, long, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeFloat(Object, WordBase, float, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeDouble(Object, WordBase, double, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeWord(Object, WordBase, WordBase, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeObject(Object, WordBase, Object, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeByte(Object, int, byte, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeChar(Object, int, char, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeShort(Object, int, short, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeInt(Object, int, int, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeLong(Object, int, long, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeFloat(Object, int, float, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeDouble(Object, int, double, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeWord(Object, int, WordBase, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeObject(Object, int, Object, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readByte(Object, WordBase)->byte:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readChar(Object, WordBase)->char:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readShort(Object, WordBase)->short:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readInt(Object, WordBase)->int:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readLong(Object, WordBase)->long:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readFloat(Object, WordBase)->float:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readDouble(Object, WordBase)->double:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readWord(Object, WordBase)->T:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readObject(Object, WordBase)->Object:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readByte(Object, int)->byte:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readChar(Object, int)->char:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readShort(Object, int)->short:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readInt(Object, int)->int:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readLong(Object, int)->long:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readFloat(Object, int)->float:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readDouble(Object, int)->double:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readWord(Object, int)->T:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#readObject(Object, int)->Object:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeByte(Object, WordBase, byte)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeChar(Object, WordBase, char)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeShort(Object, WordBase, short)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeInt(Object, WordBase, int)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeLong(Object, WordBase, long)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeFloat(Object, WordBase, float)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeDouble(Object, WordBase, double)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeWord(Object, WordBase, WordBase)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeObject(Object, WordBase, Object)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeByte(Object, int, byte)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeChar(Object, int, char)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeShort(Object, int, short)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeInt(Object, int, int)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeLong(Object, int, long)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeFloat(Object, int, float)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeDouble(Object, int, double)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeWord(Object, int, WordBase)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.BarrieredAccess#writeObject(Object, int, Object)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readByte(Object, WordBase, LocationIdentity)->byte:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readChar(Object, WordBase, LocationIdentity)->char:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readShort(Object, WordBase, LocationIdentity)->short:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readInt(Object, WordBase, LocationIdentity)->int:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readLong(Object, WordBase, LocationIdentity)->long:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readFloat(Object, WordBase, LocationIdentity)->float:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readDouble(Object, WordBase, LocationIdentity)->double:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readWord(Object, WordBase, LocationIdentity)->T:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readObject(Object, WordBase, LocationIdentity)->Object:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readByte(Object, int, LocationIdentity)->byte:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readChar(Object, int, LocationIdentity)->char:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readShort(Object, int, LocationIdentity)->short:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readInt(Object, int, LocationIdentity)->int:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readLong(Object, int, LocationIdentity)->long:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readFloat(Object, int, LocationIdentity)->float:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readDouble(Object, int, LocationIdentity)->double:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readWord(Object, int, LocationIdentity)->T:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readObject(Object, int, LocationIdentity)->Object:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeByte(Object, WordBase, byte, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeChar(Object, WordBase, char, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeShort(Object, WordBase, short, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeInt(Object, WordBase, int, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeLong(Object, WordBase, long, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeFloat(Object, WordBase, float, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeDouble(Object, WordBase, double, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeWord(Object, WordBase, WordBase, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeObject(Object, WordBase, Object, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeByte(Object, int, byte, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeChar(Object, int, char, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeShort(Object, int, short, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeInt(Object, int, int, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeLong(Object, int, long, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeFloat(Object, int, float, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeDouble(Object, int, double, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeWord(Object, int, WordBase, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeObject(Object, int, Object, LocationIdentity)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readByte(Object, WordBase)->byte:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readChar(Object, WordBase)->char:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readShort(Object, WordBase)->short:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readInt(Object, WordBase)->int:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readLong(Object, WordBase)->long:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readFloat(Object, WordBase)->float:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readDouble(Object, WordBase)->double:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readWord(Object, WordBase)->T:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readObject(Object, WordBase)->Object:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readByte(Object, int)->byte:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readChar(Object, int)->char:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readShort(Object, int)->short:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readInt(Object, int)->int:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readLong(Object, int)->long:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readFloat(Object, int)->float:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readDouble(Object, int)->double:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readWord(Object, int)->T:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#readObject(Object, int)->Object:::Reads the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeByte(Object, WordBase, byte)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeChar(Object, WordBase, char)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeShort(Object, WordBase, short)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeInt(Object, WordBase, int)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeLong(Object, WordBase, long)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeFloat(Object, WordBase, float)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeDouble(Object, WordBase, double)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeWord(Object, WordBase, WordBase)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeObject(Object, WordBase, Object)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeByte(Object, int, byte)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeChar(Object, int, char)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeShort(Object, int, short)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeInt(Object, int, int)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeLong(Object, int, long)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeFloat(Object, int, float)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeDouble(Object, int, double)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeWord(Object, int, WordBase)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.ObjectAccess#writeObject(Object, int, Object)->void:::Writes the memory at address (object + offset)
org.graalvm.compiler.word.Word#ensureInitialized()->void::: word ensure initialized
org.graalvm.compiler.word.Word.BoxFactoryImpl#initialize()->void::: box factory impl initialize
org.graalvm.compiler.word.Word.BoxFactoryImpl#boxImpl(long)->T::: box factory impl box impl
org.graalvm.compiler.word.Word#unbox()->long::: word unbox
org.graalvm.compiler.word.Word#rawValue()->long::: word raw value
org.graalvm.compiler.word.Word#objectToTrackedPointer(Object)->Word:::Convert an Object to a Pointer, keeping the reference information
org.graalvm.compiler.word.Word#objectToUntrackedPointer(Object)->Word:::Convert an Object to a Pointer, dropping the reference information
org.graalvm.compiler.word.Word#fromAddress(Address)->Word::: word from address
org.graalvm.compiler.word.Word#toObject()->Object::: word to object
org.graalvm.compiler.word.Word#toObjectNonNull()->Object::: word to object non null
org.graalvm.compiler.word.Word#add(SignedWord)->Word::: word add
org.graalvm.compiler.word.Word#add(UnsignedWord)->Word::: word add
org.graalvm.compiler.word.Word#add(int)->Word::: word add
org.graalvm.compiler.word.Word#add(Word)->Word::: word add
org.graalvm.compiler.word.Word#subtract(SignedWord)->Word::: word subtract
org.graalvm.compiler.word.Word#subtract(UnsignedWord)->Word::: word subtract
org.graalvm.compiler.word.Word#subtract(int)->Word::: word subtract
org.graalvm.compiler.word.Word#subtract(Word)->Word::: word subtract
org.graalvm.compiler.word.Word#multiply(SignedWord)->Word::: word multiply
org.graalvm.compiler.word.Word#multiply(UnsignedWord)->Word::: word multiply
org.graalvm.compiler.word.Word#multiply(int)->Word::: word multiply
org.graalvm.compiler.word.Word#multiply(Word)->Word::: word multiply
org.graalvm.compiler.word.Word#signedDivide(SignedWord)->Word::: word signed divide
org.graalvm.compiler.word.Word#signedDivide(int)->Word::: word signed divide
org.graalvm.compiler.word.Word#signedDivide(Word)->Word::: word signed divide
org.graalvm.compiler.word.Word#unsignedDivide(UnsignedWord)->Word::: word unsigned divide
org.graalvm.compiler.word.Word#unsignedDivide(int)->Word::: word unsigned divide
org.graalvm.compiler.word.Word#unsignedDivide(Word)->Word::: word unsigned divide
org.graalvm.compiler.word.Word#signedRemainder(SignedWord)->Word::: word signed remainder
org.graalvm.compiler.word.Word#signedRemainder(int)->Word::: word signed remainder
org.graalvm.compiler.word.Word#signedRemainder(Word)->Word::: word signed remainder
org.graalvm.compiler.word.Word#unsignedRemainder(UnsignedWord)->Word::: word unsigned remainder
org.graalvm.compiler.word.Word#unsignedRemainder(int)->Word::: word unsigned remainder
org.graalvm.compiler.word.Word#unsignedRemainder(Word)->Word::: word unsigned remainder
org.graalvm.compiler.word.Word#shiftLeft(UnsignedWord)->Word::: word shift left
org.graalvm.compiler.word.Word#shiftLeft(int)->Word::: word shift left
org.graalvm.compiler.word.Word#shiftLeft(Word)->Word::: word shift left
org.graalvm.compiler.word.Word#signedShiftRight(UnsignedWord)->Word::: word signed shift right
org.graalvm.compiler.word.Word#signedShiftRight(int)->Word::: word signed shift right
org.graalvm.compiler.word.Word#signedShiftRight(Word)->Word::: word signed shift right
org.graalvm.compiler.word.Word#unsignedShiftRight(UnsignedWord)->Word::: word unsigned shift right
org.graalvm.compiler.word.Word#unsignedShiftRight(int)->Word::: word unsigned shift right
org.graalvm.compiler.word.Word#unsignedShiftRight(Word)->Word::: word unsigned shift right
org.graalvm.compiler.word.Word#and(SignedWord)->Word::: word and
org.graalvm.compiler.word.Word#and(UnsignedWord)->Word::: word and
org.graalvm.compiler.word.Word#and(int)->Word::: word and
org.graalvm.compiler.word.Word#and(Word)->Word::: word and
org.graalvm.compiler.word.Word#ord or(SignedWord)->W::: word or
org.graalvm.compiler.word.Word#ord or(UnsignedWord)->W::: word or
org.graalvm.compiler.word.Word#ord or(int)->W::: word or
org.graalvm.compiler.word.Word#ord or(Word)->W::: word or
org.graalvm.compiler.word.Word#xor(SignedWord)->Word::: word xor
org.graalvm.compiler.word.Word#xor(UnsignedWord)->Word::: word xor
org.graalvm.compiler.word.Word#xor(int)->Word::: word xor
org.graalvm.compiler.word.Word#xor(Word)->Word::: word xor
org.graalvm.compiler.word.Word#not()->Word::: word not
org.graalvm.compiler.word.Word#isNull()->boolean::: word is null
org.graalvm.compiler.word.Word#isNonNull()->boolean::: word is non null
org.graalvm.compiler.word.Word#equal(ComparableWord)->boolean::: word equal
org.graalvm.compiler.word.Word#equal(SignedWord)->boolean::: word equal
org.graalvm.compiler.word.Word#equal(UnsignedWord)->boolean::: word equal
org.graalvm.compiler.word.Word#equal(int)->boolean::: word equal
org.graalvm.compiler.word.Word#equal(Word)->boolean::: word equal
org.graalvm.compiler.word.Word#notEqual(ComparableWord)->boolean::: word not equal
org.graalvm.compiler.word.Word#notEqual(SignedWord)->boolean::: word not equal
org.graalvm.compiler.word.Word#notEqual(UnsignedWord)->boolean::: word not equal
org.graalvm.compiler.word.Word#notEqual(int)->boolean::: word not equal
org.graalvm.compiler.word.Word#notEqual(Word)->boolean::: word not equal
org.graalvm.compiler.word.Word#lessThan(SignedWord)->boolean::: word less than
org.graalvm.compiler.word.Word#lessThan(int)->boolean::: word less than
org.graalvm.compiler.word.Word#lessThan(Word)->boolean::: word less than
org.graalvm.compiler.word.Word#lessOrEqual(SignedWord)->boolean::: word less or equal
org.graalvm.compiler.word.Word#lessOrEqual(int)->boolean::: word less or equal
org.graalvm.compiler.word.Word#lessOrEqual(Word)->boolean::: word less or equal
org.graalvm.compiler.word.Word#greaterThan(SignedWord)->boolean::: word greater than
org.graalvm.compiler.word.Word#greaterThan(int)->boolean::: word greater than
org.graalvm.compiler.word.Word#greaterThan(Word)->boolean::: word greater than
org.graalvm.compiler.word.Word#greaterOrEqual(SignedWord)->boolean::: word greater or equal
org.graalvm.compiler.word.Word#greaterOrEqual(int)->boolean::: word greater or equal
org.graalvm.compiler.word.Word#greaterOrEqual(Word)->boolean::: word greater or equal
org.graalvm.compiler.word.Word#belowThan(UnsignedWord)->boolean::: word below than
org.graalvm.compiler.word.Word#belowThan(int)->boolean::: word below than
org.graalvm.compiler.word.Word#belowThan(Word)->boolean::: word below than
org.graalvm.compiler.word.Word#belowOrEqual(UnsignedWord)->boolean::: word below or equal
org.graalvm.compiler.word.Word#belowOrEqual(int)->boolean::: word below or equal
org.graalvm.compiler.word.Word#belowOrEqual(Word)->boolean::: word below or equal
org.graalvm.compiler.word.Word#aboveThan(UnsignedWord)->boolean::: word above than
org.graalvm.compiler.word.Word#aboveThan(int)->boolean::: word above than
org.graalvm.compiler.word.Word#aboveThan(Word)->boolean::: word above than
org.graalvm.compiler.word.Word#aboveOrEqual(UnsignedWord)->boolean::: word above or equal
org.graalvm.compiler.word.Word#aboveOrEqual(int)->boolean::: word above or equal
org.graalvm.compiler.word.Word#aboveOrEqual(Word)->boolean::: word above or equal
org.graalvm.compiler.word.Word#readByte(WordBase, LocationIdentity)->byte::: word read byte
org.graalvm.compiler.word.Word#readChar(WordBase, LocationIdentity)->char::: word read char
org.graalvm.compiler.word.Word#readShort(WordBase, LocationIdentity)->short::: word read short
org.graalvm.compiler.word.Word#readInt(WordBase, LocationIdentity)->int::: word read int
org.graalvm.compiler.word.Word#readLong(WordBase, LocationIdentity)->long::: word read long
org.graalvm.compiler.word.Word#readFloat(WordBase, LocationIdentity)->float::: word read float
org.graalvm.compiler.word.Word#readDouble(WordBase, LocationIdentity)->double::: word read double
org.graalvm.compiler.word.Word#readWord(WordBase, LocationIdentity)->T::: word read word
org.graalvm.compiler.word.Word#readObject(WordBase, LocationIdentity)->Object::: word read object
org.graalvm.compiler.word.Word#readByte(int, LocationIdentity)->byte::: word read byte
org.graalvm.compiler.word.Word#readChar(int, LocationIdentity)->char::: word read char
org.graalvm.compiler.word.Word#readShort(int, LocationIdentity)->short::: word read short
org.graalvm.compiler.word.Word#readInt(int, LocationIdentity)->int::: word read int
org.graalvm.compiler.word.Word#readLong(int, LocationIdentity)->long::: word read long
org.graalvm.compiler.word.Word#readFloat(int, LocationIdentity)->float::: word read float
org.graalvm.compiler.word.Word#readDouble(int, LocationIdentity)->double::: word read double
org.graalvm.compiler.word.Word#readWord(int, LocationIdentity)->T::: word read word
org.graalvm.compiler.word.Word#readObject(int, LocationIdentity)->Object::: word read object
org.graalvm.compiler.word.Word#writeByte(WordBase, byte, LocationIdentity)->void::: word write byte
org.graalvm.compiler.word.Word#writeChar(WordBase, char, LocationIdentity)->void::: word write char
org.graalvm.compiler.word.Word#writeShort(WordBase, short, LocationIdentity)->void::: word write short
org.graalvm.compiler.word.Word#writeInt(WordBase, int, LocationIdentity)->void::: word write int
org.graalvm.compiler.word.Word#writeLong(WordBase, long, LocationIdentity)->void::: word write long
org.graalvm.compiler.word.Word#writeFloat(WordBase, float, LocationIdentity)->void::: word write float
org.graalvm.compiler.word.Word#writeDouble(WordBase, double, LocationIdentity)->void::: word write double
org.graalvm.compiler.word.Word#writeWord(WordBase, WordBase, LocationIdentity)->void::: word write word
org.graalvm.compiler.word.Word#initializeLong(WordBase, long, LocationIdentity)->void::: word initialize long
org.graalvm.compiler.word.Word#writeObject(WordBase, Object, LocationIdentity)->void::: word write object
org.graalvm.compiler.word.Word#writeByte(int, byte, LocationIdentity)->void::: word write byte
org.graalvm.compiler.word.Word#writeChar(int, char, LocationIdentity)->void::: word write char
org.graalvm.compiler.word.Word#writeShort(int, short, LocationIdentity)->void::: word write short
org.graalvm.compiler.word.Word#writeInt(int, int, LocationIdentity)->void::: word write int
org.graalvm.compiler.word.Word#writeLong(int, long, LocationIdentity)->void::: word write long
org.graalvm.compiler.word.Word#writeFloat(int, float, LocationIdentity)->void::: word write float
org.graalvm.compiler.word.Word#writeDouble(int, double, LocationIdentity)->void::: word write double
org.graalvm.compiler.word.Word#writeWord(int, WordBase, LocationIdentity)->void::: word write word
org.graalvm.compiler.word.Word#initializeLong(int, long, LocationIdentity)->void::: word initialize long
org.graalvm.compiler.word.Word#writeObject(int, Object, LocationIdentity)->void::: word write object
org.graalvm.compiler.word.Word#readByte(WordBase)->byte::: word read byte
org.graalvm.compiler.word.Word#readChar(WordBase)->char::: word read char
org.graalvm.compiler.word.Word#readShort(WordBase)->short::: word read short
org.graalvm.compiler.word.Word#readInt(WordBase)->int::: word read int
org.graalvm.compiler.word.Word#readLong(WordBase)->long::: word read long
org.graalvm.compiler.word.Word#readFloat(WordBase)->float::: word read float
org.graalvm.compiler.word.Word#readDouble(WordBase)->double::: word read double
org.graalvm.compiler.word.Word#readWord(WordBase)->T::: word read word
org.graalvm.compiler.word.Word#readObject(WordBase)->Object::: word read object
org.graalvm.compiler.word.Word#readObject(WordBase, BarrierType)->Object::: word read object
org.graalvm.compiler.word.Word#readByte(int)->byte::: word read byte
org.graalvm.compiler.word.Word#readChar(int)->char::: word read char
org.graalvm.compiler.word.Word#readShort(int)->short::: word read short
org.graalvm.compiler.word.Word#readInt(int)->int::: word read int
org.graalvm.compiler.word.Word#readLong(int)->long::: word read long
org.graalvm.compiler.word.Word#readFloat(int)->float::: word read float
org.graalvm.compiler.word.Word#readDouble(int)->double::: word read double
org.graalvm.compiler.word.Word#readWord(int)->T::: word read word
org.graalvm.compiler.word.Word#readObject(int)->Object::: word read object
org.graalvm.compiler.word.Word#readObject(int, BarrierType)->Object::: word read object
org.graalvm.compiler.word.Word#writeByte(WordBase, byte)->void::: word write byte
org.graalvm.compiler.word.Word#writeChar(WordBase, char)->void::: word write char
org.graalvm.compiler.word.Word#writeShort(WordBase, short)->void::: word write short
org.graalvm.compiler.word.Word#writeInt(WordBase, int)->void::: word write int
org.graalvm.compiler.word.Word#writeLong(WordBase, long)->void::: word write long
org.graalvm.compiler.word.Word#writeFloat(WordBase, float)->void::: word write float
org.graalvm.compiler.word.Word#writeDouble(WordBase, double)->void::: word write double
org.graalvm.compiler.word.Word#compareAndSwapInt(WordBase, int, int, LocationIdentity)->int::: word compare and swap int
org.graalvm.compiler.word.Word#compareAndSwapLong(WordBase, long, long, LocationIdentity)->long::: word compare and swap long
org.graalvm.compiler.word.Word#compareAndSwapWord(WordBase, T, T, LocationIdentity)->T::: word compare and swap word
org.graalvm.compiler.word.Word#compareAndSwapObject(WordBase, Object, Object, LocationIdentity)->Object::: word compare and swap object
org.graalvm.compiler.word.Word#logicCompareAndSwapInt(WordBase, int, int, LocationIdentity)->boolean::: word logic compare and swap int
org.graalvm.compiler.word.Word#logicCompareAndSwapLong(WordBase, long, long, LocationIdentity)->boolean::: word logic compare and swap long
org.graalvm.compiler.word.Word#logicCompareAndSwapWord(WordBase, WordBase, WordBase, LocationIdentity)->boolean::: word logic compare and swap word
org.graalvm.compiler.word.Word#logicCompareAndSwapObject(WordBase, Object, Object, LocationIdentity)->boolean::: word logic compare and swap object
org.graalvm.compiler.word.Word#writeWord(WordBase, WordBase)->void::: word write word
org.graalvm.compiler.word.Word#writeObject(WordBase, Object)->void::: word write object
org.graalvm.compiler.word.Word#writeByte(int, byte)->void::: word write byte
org.graalvm.compiler.word.Word#writeChar(int, char)->void::: word write char
org.graalvm.compiler.word.Word#writeShort(int, short)->void::: word write short
org.graalvm.compiler.word.Word#writeInt(int, int)->void::: word write int
org.graalvm.compiler.word.Word#writeLong(int, long)->void::: word write long
org.graalvm.compiler.word.Word#writeFloat(int, float)->void::: word write float
org.graalvm.compiler.word.Word#writeDouble(int, double)->void::: word write double
org.graalvm.compiler.word.Word#writeWord(int, WordBase)->void::: word write word
org.graalvm.compiler.word.Word#writeObject(int, Object)->void::: word write object
org.graalvm.compiler.word.Word#compareAndSwapInt(int, int, int, LocationIdentity)->int::: word compare and swap int
org.graalvm.compiler.word.Word#compareAndSwapLong(int, long, long, LocationIdentity)->long::: word compare and swap long
org.graalvm.compiler.word.Word#compareAndSwapWord(int, T, T, LocationIdentity)->T::: word compare and swap word
org.graalvm.compiler.word.Word#compareAndSwapObject(int, Object, Object, LocationIdentity)->Object::: word compare and swap object
org.graalvm.compiler.word.Word#logicCompareAndSwapInt(int, int, int, LocationIdentity)->boolean::: word logic compare and swap int
org.graalvm.compiler.word.Word#logicCompareAndSwapLong(int, long, long, LocationIdentity)->boolean::: word logic compare and swap long
org.graalvm.compiler.word.Word#logicCompareAndSwapWord(int, WordBase, WordBase, LocationIdentity)->boolean::: word logic compare and swap word
org.graalvm.compiler.word.Word#logicCompareAndSwapObject(int, Object, Object, LocationIdentity)->boolean::: word logic compare and swap object
org.graalvm.compiler.word.Word#equals(Object)->boolean:::This is deprecated because of the easy to mistype name collision between #equals and the other equals routines like #equal(Word)
org.graalvm.compiler.word.Word#hashCode()->int::: word hash code
org.graalvm.compiler.word.Word#toString()->String::: word to string
org.graalvm.compiler.word.HostedWord#boxLong(long)->Word::: hosted word box long
org.graalvm.compiler.word.HostedWord#unbox()->long::: hosted word unbox
org.graalvm.compiler.word.HostedWord#toString()->String::: hosted word to string
org.graalvm.compiler.word.WordCastNode#wordToObject(ValueNode, JavaKind)->WordCastNode::: word cast node word to object
org.graalvm.compiler.word.WordCastNode#wordToObjectNonNull(ValueNode, JavaKind)->WordCastNode::: word cast node word to object non null
org.graalvm.compiler.word.WordCastNode#wordToNarrowObject(ValueNode, NarrowOopStamp)->WordCastNode::: word cast node word to narrow object
org.graalvm.compiler.word.WordCastNode#addressToWord(ValueNode, JavaKind)->WordCastNode::: word cast node address to word
org.graalvm.compiler.word.WordCastNode#objectToTrackedPointer(ValueNode, JavaKind)->WordCastNode::: word cast node object to tracked pointer
org.graalvm.compiler.word.WordCastNode#objectToUntrackedPointer(ValueNode, JavaKind)->WordCastNode::: word cast node object to untracked pointer
org.graalvm.compiler.word.WordCastNode#narrowOopToUntrackedWord(ValueNode, JavaKind)->WordCastNode::: word cast node narrow oop to untracked word
org.graalvm.compiler.word.WordCastNode#getInput()->ValueNode::: word cast node get input
org.graalvm.compiler.word.WordCastNode#inferStamp()->boolean::: word cast node infer stamp
org.graalvm.compiler.word.WordCastNode#canonical(CanonicalizerTool)->Node::: word cast node canonical
org.graalvm.compiler.word.WordCastNode#generate(NodeLIRBuilderTool)->void::: word cast node generate
org.graalvm.compiler.word.WordOperationPlugin#canChangeStackKind(GraphBuilderContext)->boolean::: word operation plugin can change stack kind
org.graalvm.compiler.word.WordOperationPlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[])->boolean:::Processes a call to a method if it is annotated as a word operation by adding nodes to the graph being built that implement the denoted operation.
org.graalvm.compiler.word.WordOperationPlugin#interceptType(GraphBuilderTool, JavaType, boolean)->StampPair::: word operation plugin intercept type
org.graalvm.compiler.word.WordOperationPlugin#notifyNotInlined(GraphBuilderContext, ResolvedJavaMethod, Invoke)->void::: word operation plugin notify not inlined
org.graalvm.compiler.word.WordOperationPlugin#handleLoadField(GraphBuilderContext, ValueNode, ResolvedJavaField)->boolean::: word operation plugin handle load field
org.graalvm.compiler.word.WordOperationPlugin#handleLoadStaticField(GraphBuilderContext, ResolvedJavaField)->boolean::: word operation plugin handle load static field
org.graalvm.compiler.word.WordOperationPlugin#handleLoadIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, JavaKind)->boolean::: word operation plugin handle load indexed
org.graalvm.compiler.word.WordOperationPlugin#createLoadIndexedNode(ValueNode, ValueNode, GuardingNode)->LoadIndexedNode::: word operation plugin create load indexed node
org.graalvm.compiler.word.WordOperationPlugin#handleStoreField(GraphBuilderContext, ValueNode, ResolvedJavaField, ValueNode)->boolean::: word operation plugin handle store field
org.graalvm.compiler.word.WordOperationPlugin#handleStoreStaticField(GraphBuilderContext, ResolvedJavaField, ValueNode)->boolean::: word operation plugin handle store static field
org.graalvm.compiler.word.WordOperationPlugin#handleStoreIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, GuardingNode, JavaKind, ValueNode)->boolean::: word operation plugin handle store indexed
org.graalvm.compiler.word.WordOperationPlugin#createStoreIndexedNode(ValueNode, ValueNode, GuardingNode, ValueNode)->StoreIndexedNode::: word operation plugin create store indexed node
org.graalvm.compiler.word.WordOperationPlugin#handleCheckCast(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)->boolean::: word operation plugin handle check cast
org.graalvm.compiler.word.WordOperationPlugin#handleInstanceOf(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)->boolean::: word operation plugin handle instance of
org.graalvm.compiler.word.WordOperationPlugin#processWordOperation(GraphBuilderContext, ValueNode[], ResolvedJavaMethod)->void::: word operation plugin process word operation
org.graalvm.compiler.word.WordOperationPlugin#readOp(GraphBuilderContext, JavaKind, AddressNode, LocationIdentity, Opcode)->ValueNode::: word operation plugin read op
org.graalvm.compiler.word.WordOperationPlugin#readOp(GraphBuilderContext, JavaKind, AddressNode, LocationIdentity, BarrierType, boolean)->ValueNode::: word operation plugin read op
org.graalvm.compiler.word.WordOperationPlugin#writeOp(GraphBuilderContext, JavaKind, AddressNode, LocationIdentity, ValueNode, Opcode)->void::: word operation plugin write op
org.graalvm.compiler.word.WordOperationPlugin#casOp(JavaKind, JavaKind, AddressNode, LocationIdentity, ValueNode, ValueNode)->AbstractCompareAndSwapNode::: word operation plugin cas op
org.graalvm.compiler.word.WordOperationPlugin#makeAddress(GraphBuilderContext, ValueNode, ValueNode)->AddressNode::: word operation plugin make address
org.graalvm.compiler.word.WordOperationPlugin#fromUnsigned(GraphBuilderContext, ValueNode)->ValueNode::: word operation plugin from unsigned
org.graalvm.compiler.word.WordOperationPlugin#fromSigned(GraphBuilderContext, ValueNode)->ValueNode::: word operation plugin from signed
org.graalvm.compiler.word.WordOperationPlugin#toUnsigned(GraphBuilderContext, ValueNode, JavaKind)->ValueNode::: word operation plugin to unsigned
org.graalvm.compiler.word.WordOperationPlugin#convert(GraphBuilderContext, ValueNode, JavaKind, boolean)->ValueNode::: word operation plugin convert
org.graalvm.compiler.word.WordTypes#isWordOperation(ResolvedJavaMethod)->boolean:::Determines if a given method denotes a word operation.
org.graalvm.compiler.word.WordTypes#getWordOperation(ResolvedJavaMethod, ResolvedJavaType)->ResolvedJavaMethod:::Gets the method annotated with Operation based on a given method that represents a word operation (but may not necessarily have the annotation).
org.graalvm.compiler.word.WordTypes#isWord(ValueNode)->boolean:::Determines if a given node has a word type.
org.graalvm.compiler.word.WordTypes#isWord(JavaType)->boolean:::Determines if a given type is a word type.
org.graalvm.compiler.word.WordTypes#asKind(JavaType)->JavaKind:::Gets the kind for a given type, returning the #getWordKind() word kind if type is a #isWord(JavaType) word type.
org.graalvm.compiler.word.WordTypes#getWordKind()->JavaKind::: word types get word kind
org.graalvm.compiler.word.WordTypes#getWordStamp(ResolvedJavaType)->Stamp:::Gets the stamp for a given #isWord(JavaType) word type.
org.graalvm.compiler.word.WordTypes#getWordImplType()->ResolvedJavaType::: word types get word impl type

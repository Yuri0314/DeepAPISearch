BarrieredAccess#readByte(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readChar(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readShort(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readInt(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readLong(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readFloat(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readDouble(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readWord(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readObject(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readByte(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readChar(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readShort(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readInt(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readLong(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readFloat(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readDouble(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readWord(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#readObject(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
BarrieredAccess#writeByte(Object, WordBase, byte, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeChar(Object, WordBase, char, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeShort(Object, WordBase, short, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeInt(Object, WordBase, int, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeLong(Object, WordBase, long, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeFloat(Object, WordBase, float, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeDouble(Object, WordBase, double, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeWord(Object, WordBase, WordBase, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeObject(Object, WordBase, Object, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeByte(Object, int, byte, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeChar(Object, int, char, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeShort(Object, int, short, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeInt(Object, int, int, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeLong(Object, int, long, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeFloat(Object, int, float, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeDouble(Object, int, double, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeWord(Object, int, WordBase, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#writeObject(Object, int, Object, LocationIdentity):::Writes the memory at address (object + offset):::
BarrieredAccess#readByte(Object, WordBase):::Reads the memory at address (object + offset):::
BarrieredAccess#readChar(Object, WordBase):::Reads the memory at address (object + offset):::
BarrieredAccess#readShort(Object, WordBase):::Reads the memory at address (object + offset):::
BarrieredAccess#readInt(Object, WordBase):::Reads the memory at address (object + offset):::
BarrieredAccess#readLong(Object, WordBase):::Reads the memory at address (object + offset):::
BarrieredAccess#readFloat(Object, WordBase):::Reads the memory at address (object + offset):::
BarrieredAccess#readDouble(Object, WordBase):::Reads the memory at address (object + offset):::
BarrieredAccess#readWord(Object, WordBase):::Reads the memory at address (object + offset):::
BarrieredAccess#readObject(Object, WordBase):::Reads the memory at address (object + offset):::
BarrieredAccess#readByte(Object, int):::Reads the memory at address (object + offset):::
BarrieredAccess#readChar(Object, int):::Reads the memory at address (object + offset):::
BarrieredAccess#readShort(Object, int):::Reads the memory at address (object + offset):::
BarrieredAccess#readInt(Object, int):::Reads the memory at address (object + offset):::
BarrieredAccess#readLong(Object, int):::Reads the memory at address (object + offset):::
BarrieredAccess#readFloat(Object, int):::Reads the memory at address (object + offset):::
BarrieredAccess#readDouble(Object, int):::Reads the memory at address (object + offset):::
BarrieredAccess#readWord(Object, int):::Reads the memory at address (object + offset):::
BarrieredAccess#readObject(Object, int):::Reads the memory at address (object + offset):::
BarrieredAccess#writeByte(Object, WordBase, byte):::Writes the memory at address (object + offset):::
BarrieredAccess#writeChar(Object, WordBase, char):::Writes the memory at address (object + offset):::
BarrieredAccess#writeShort(Object, WordBase, short):::Writes the memory at address (object + offset):::
BarrieredAccess#writeInt(Object, WordBase, int):::Writes the memory at address (object + offset):::
BarrieredAccess#writeLong(Object, WordBase, long):::Writes the memory at address (object + offset):::
BarrieredAccess#writeFloat(Object, WordBase, float):::Writes the memory at address (object + offset):::
BarrieredAccess#writeDouble(Object, WordBase, double):::Writes the memory at address (object + offset):::
BarrieredAccess#writeWord(Object, WordBase, WordBase):::Writes the memory at address (object + offset):::
BarrieredAccess#writeObject(Object, WordBase, Object):::Writes the memory at address (object + offset):::
BarrieredAccess#writeByte(Object, int, byte):::Writes the memory at address (object + offset):::
BarrieredAccess#writeChar(Object, int, char):::Writes the memory at address (object + offset):::
BarrieredAccess#writeShort(Object, int, short):::Writes the memory at address (object + offset):::
BarrieredAccess#writeInt(Object, int, int):::Writes the memory at address (object + offset):::
BarrieredAccess#writeLong(Object, int, long):::Writes the memory at address (object + offset):::
BarrieredAccess#writeFloat(Object, int, float):::Writes the memory at address (object + offset):::
BarrieredAccess#writeDouble(Object, int, double):::Writes the memory at address (object + offset):::
BarrieredAccess#writeWord(Object, int, WordBase):::Writes the memory at address (object + offset):::
BarrieredAccess#writeObject(Object, int, Object):::Writes the memory at address (object + offset):::
ObjectAccess#readByte(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readChar(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readShort(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readInt(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readLong(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readFloat(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readDouble(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readWord(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readObject(Object, WordBase, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readByte(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readChar(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readShort(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readInt(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readLong(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readFloat(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readDouble(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readWord(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#readObject(Object, int, LocationIdentity):::Reads the memory at address (object + offset):::
ObjectAccess#writeByte(Object, WordBase, byte, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeChar(Object, WordBase, char, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeShort(Object, WordBase, short, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeInt(Object, WordBase, int, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeLong(Object, WordBase, long, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeFloat(Object, WordBase, float, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeDouble(Object, WordBase, double, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeWord(Object, WordBase, WordBase, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeObject(Object, WordBase, Object, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeByte(Object, int, byte, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeChar(Object, int, char, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeShort(Object, int, short, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeInt(Object, int, int, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeLong(Object, int, long, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeFloat(Object, int, float, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeDouble(Object, int, double, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeWord(Object, int, WordBase, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#writeObject(Object, int, Object, LocationIdentity):::Writes the memory at address (object + offset):::
ObjectAccess#readByte(Object, WordBase):::Reads the memory at address (object + offset):::
ObjectAccess#readChar(Object, WordBase):::Reads the memory at address (object + offset):::
ObjectAccess#readShort(Object, WordBase):::Reads the memory at address (object + offset):::
ObjectAccess#readInt(Object, WordBase):::Reads the memory at address (object + offset):::
ObjectAccess#readLong(Object, WordBase):::Reads the memory at address (object + offset):::
ObjectAccess#readFloat(Object, WordBase):::Reads the memory at address (object + offset):::
ObjectAccess#readDouble(Object, WordBase):::Reads the memory at address (object + offset):::
ObjectAccess#readWord(Object, WordBase):::Reads the memory at address (object + offset):::
ObjectAccess#readObject(Object, WordBase):::Reads the memory at address (object + offset):::
ObjectAccess#readByte(Object, int):::Reads the memory at address (object + offset):::
ObjectAccess#readChar(Object, int):::Reads the memory at address (object + offset):::
ObjectAccess#readShort(Object, int):::Reads the memory at address (object + offset):::
ObjectAccess#readInt(Object, int):::Reads the memory at address (object + offset):::
ObjectAccess#readLong(Object, int):::Reads the memory at address (object + offset):::
ObjectAccess#readFloat(Object, int):::Reads the memory at address (object + offset):::
ObjectAccess#readDouble(Object, int):::Reads the memory at address (object + offset):::
ObjectAccess#readWord(Object, int):::Reads the memory at address (object + offset):::
ObjectAccess#readObject(Object, int):::Reads the memory at address (object + offset):::
ObjectAccess#writeByte(Object, WordBase, byte):::Writes the memory at address (object + offset):::
ObjectAccess#writeChar(Object, WordBase, char):::Writes the memory at address (object + offset):::
ObjectAccess#writeShort(Object, WordBase, short):::Writes the memory at address (object + offset):::
ObjectAccess#writeInt(Object, WordBase, int):::Writes the memory at address (object + offset):::
ObjectAccess#writeLong(Object, WordBase, long):::Writes the memory at address (object + offset):::
ObjectAccess#writeFloat(Object, WordBase, float):::Writes the memory at address (object + offset):::
ObjectAccess#writeDouble(Object, WordBase, double):::Writes the memory at address (object + offset):::
ObjectAccess#writeWord(Object, WordBase, WordBase):::Writes the memory at address (object + offset):::
ObjectAccess#writeObject(Object, WordBase, Object):::Writes the memory at address (object + offset):::
ObjectAccess#writeByte(Object, int, byte):::Writes the memory at address (object + offset):::
ObjectAccess#writeChar(Object, int, char):::Writes the memory at address (object + offset):::
ObjectAccess#writeShort(Object, int, short):::Writes the memory at address (object + offset):::
ObjectAccess#writeInt(Object, int, int):::Writes the memory at address (object + offset):::
ObjectAccess#writeLong(Object, int, long):::Writes the memory at address (object + offset):::
ObjectAccess#writeFloat(Object, int, float):::Writes the memory at address (object + offset):::
ObjectAccess#writeDouble(Object, int, double):::Writes the memory at address (object + offset):::
ObjectAccess#writeWord(Object, int, WordBase):::Writes the memory at address (object + offset):::
ObjectAccess#writeObject(Object, int, Object):::Writes the memory at address (object + offset):::
Word#ensureInitialized()::: word ensure initialized:::
Word.BoxFactoryImpl#initialize()::: box factory impl initialize:::new->BoxFactoryImpl
Word.BoxFactoryImpl#boxImpl(long)::: box factory impl box impl:::return->HostedWord->boxLong
Word#box(long)::: word box:::return->HostedWord->boxLong
Word#unbox()::: word unbox:::
Word#intParam(int)::: word int param:::return->box
Word#rawValue()::: word raw value:::return->unbox
Word#objectToTrackedPointer(Object):::Convert an Object to a Pointer, keeping the reference information:::
Word#objectToUntrackedPointer(Object):::Convert an Object to a Pointer, dropping the reference information:::
Word#fromAddress(Address)::: word from address:::
Word#toObject()::: word to object:::
Word#toObjectNonNull()::: word to object non null:::
Word#add(SignedWord)::: word add:::return->add
Word#add(UnsignedWord)::: word add:::return->add
Word#add(int)::: word add:::return->intParam->add
Word#add(Word)::: word add:::return->unbox->val->unbox->box
Word#subtract(SignedWord)::: word subtract:::return->subtract
Word#subtract(UnsignedWord)::: word subtract:::return->subtract
Word#subtract(int)::: word subtract:::return->intParam->subtract
Word#subtract(Word)::: word subtract:::return->unbox->val->unbox->box
Word#multiply(SignedWord)::: word multiply:::return->multiply
Word#multiply(UnsignedWord)::: word multiply:::return->multiply
Word#multiply(int)::: word multiply:::return->intParam->multiply
Word#multiply(Word)::: word multiply:::return->unbox->val->unbox->box
Word#signedDivide(SignedWord)::: word signed divide:::return->signedDivide
Word#signedDivide(int)::: word signed divide:::return->intParam->signedDivide
Word#signedDivide(Word)::: word signed divide:::return->unbox->val->unbox->box
Word#unsignedDivide(UnsignedWord)::: word unsigned divide:::return->unsignedDivide
Word#unsignedDivide(int)::: word unsigned divide:::return->intParam->signedDivide
Word#unsignedDivide(Word)::: word unsigned divide:::return->Long->unbox->val->unbox->divideUnsigned->box
Word#signedRemainder(SignedWord)::: word signed remainder:::return->signedRemainder
Word#signedRemainder(int)::: word signed remainder:::return->intParam->signedRemainder
Word#signedRemainder(Word)::: word signed remainder:::return->unbox->val->unbox->box
Word#unsignedRemainder(UnsignedWord)::: word unsigned remainder:::return->unsignedRemainder
Word#unsignedRemainder(int)::: word unsigned remainder:::return->intParam->signedRemainder
Word#unsignedRemainder(Word)::: word unsigned remainder:::return->Long->unbox->val->unbox->remainderUnsigned->box
Word#shiftLeft(UnsignedWord)::: word shift left:::return->shiftLeft
Word#shiftLeft(int)::: word shift left:::return->intParam->shiftLeft
Word#shiftLeft(Word)::: word shift left:::return->unbox->val->unbox->box
Word#signedShiftRight(UnsignedWord)::: word signed shift right:::return->signedShiftRight
Word#signedShiftRight(int)::: word signed shift right:::return->intParam->signedShiftRight
Word#signedShiftRight(Word)::: word signed shift right:::return->unbox->val->unbox->box
Word#unsignedShiftRight(UnsignedWord)::: word unsigned shift right:::return->unsignedShiftRight
Word#unsignedShiftRight(int)::: word unsigned shift right:::return->intParam->unsignedShiftRight
Word#unsignedShiftRight(Word)::: word unsigned shift right:::return->unbox->val->unbox->box
Word#and(SignedWord)::: word and:::return->and
Word#and(UnsignedWord)::: word and:::return->and
Word#and(int)::: word and:::return->intParam->and
Word#and(Word)::: word and:::return->unbox->val->unbox->box
Word#ord or(SignedWord)::: word or:::return->or
Word#ord or(UnsignedWord)::: word or:::return->or
Word#ord or(int)::: word or:::return->intParam->or
Word#ord or(Word)::: word or:::return->unbox->val->unbox->box
Word#xor(SignedWord)::: word xor:::return->xor
Word#xor(UnsignedWord)::: word xor:::return->xor
Word#xor(int)::: word xor:::return->intParam->xor
Word#xor(Word)::: word xor:::return->unbox->val->unbox->box
Word#not()::: word not:::return->unbox->box
Word#isNull()::: word is null:::return->WordFactory->zero->equal
Word#isNonNull()::: word is non null:::return->WordFactory->zero->notEqual
Word#equal(ComparableWord)::: word equal:::return->equal
Word#equal(SignedWord)::: word equal:::return->equal
Word#equal(UnsignedWord)::: word equal:::return->equal
Word#equal(int)::: word equal:::return->intParam->equal
Word#equal(Word)::: word equal:::return->unbox->val->unbox
Word#notEqual(ComparableWord)::: word not equal:::return->notEqual
Word#notEqual(SignedWord)::: word not equal:::return->notEqual
Word#notEqual(UnsignedWord)::: word not equal:::return->notEqual
Word#notEqual(int)::: word not equal:::return->intParam->notEqual
Word#notEqual(Word)::: word not equal:::return->unbox->val->unbox
Word#lessThan(SignedWord)::: word less than:::return->lessThan
Word#lessThan(int)::: word less than:::return->intParam->lessThan
Word#lessThan(Word)::: word less than:::return->unbox->val->unbox
Word#lessOrEqual(SignedWord)::: word less or equal:::return->lessOrEqual
Word#lessOrEqual(int)::: word less or equal:::return->intParam->lessOrEqual
Word#lessOrEqual(Word)::: word less or equal:::return->unbox->val->unbox
Word#greaterThan(SignedWord)::: word greater than:::return->greaterThan
Word#greaterThan(int)::: word greater than:::return->intParam->greaterThan
Word#greaterThan(Word)::: word greater than:::return->unbox->val->unbox
Word#greaterOrEqual(SignedWord)::: word greater or equal:::return->greaterOrEqual
Word#greaterOrEqual(int)::: word greater or equal:::return->intParam->greaterOrEqual
Word#greaterOrEqual(Word)::: word greater or equal:::return->unbox->val->unbox
Word#belowThan(UnsignedWord)::: word below than:::return->belowThan
Word#belowThan(int)::: word below than:::return->intParam->belowThan
Word#belowThan(Word)::: word below than:::return->UnsignedMath->unbox->val->unbox->belowThan
Word#belowOrEqual(UnsignedWord)::: word below or equal:::return->belowOrEqual
Word#belowOrEqual(int)::: word below or equal:::return->intParam->belowOrEqual
Word#belowOrEqual(Word)::: word below or equal:::return->UnsignedMath->unbox->val->unbox->belowOrEqual
Word#aboveThan(UnsignedWord)::: word above than:::return->aboveThan
Word#aboveThan(int)::: word above than:::return->intParam->aboveThan
Word#aboveThan(Word)::: word above than:::return->UnsignedMath->unbox->val->unbox->aboveThan
Word#aboveOrEqual(UnsignedWord)::: word above or equal:::return->aboveOrEqual
Word#aboveOrEqual(int)::: word above or equal:::return->intParam->aboveOrEqual
Word#aboveOrEqual(Word)::: word above or equal:::return->UnsignedMath->unbox->val->unbox->aboveOrEqual
Word#readByte(WordBase, LocationIdentity)::: word read byte:::return->UNSAFE->add->unbox->getByte
Word#readChar(WordBase, LocationIdentity)::: word read char:::return->UNSAFE->add->unbox->getChar
Word#readShort(WordBase, LocationIdentity)::: word read short:::return->UNSAFE->add->unbox->getShort
Word#readInt(WordBase, LocationIdentity)::: word read int:::return->UNSAFE->add->unbox->getInt
Word#readLong(WordBase, LocationIdentity)::: word read long:::return->UNSAFE->add->unbox->getLong
Word#readFloat(WordBase, LocationIdentity)::: word read float:::return->UNSAFE->add->unbox->getFloat
Word#readDouble(WordBase, LocationIdentity)::: word read double:::return->UNSAFE->add->unbox->getDouble
Word#readWord(WordBase, LocationIdentity)::: word read word:::return->UNSAFE->add->unbox->getAddress->box
Word#readObject(WordBase, LocationIdentity)::: word read object:::
Word#readByte(int, LocationIdentity)::: word read byte:::return->WordFactory->signed->readByte
Word#readChar(int, LocationIdentity)::: word read char:::return->WordFactory->signed->readChar
Word#readShort(int, LocationIdentity)::: word read short:::return->WordFactory->signed->readShort
Word#readInt(int, LocationIdentity)::: word read int:::return->WordFactory->signed->readInt
Word#readLong(int, LocationIdentity)::: word read long:::return->WordFactory->signed->readLong
Word#readFloat(int, LocationIdentity)::: word read float:::return->WordFactory->signed->readFloat
Word#readDouble(int, LocationIdentity)::: word read double:::return->WordFactory->signed->readDouble
Word#readWord(int, LocationIdentity)::: word read word:::return->WordFactory->signed->readWord
Word#readObject(int, LocationIdentity)::: word read object:::return->WordFactory->signed->readObject
Word#writeByte(WordBase, byte, LocationIdentity)::: word write byte:::UNSAFE->add->unbox->putByte
Word#writeChar(WordBase, char, LocationIdentity)::: word write char:::UNSAFE->add->unbox->putChar
Word#writeShort(WordBase, short, LocationIdentity)::: word write short:::UNSAFE->add->unbox->putShort
Word#writeInt(WordBase, int, LocationIdentity)::: word write int:::UNSAFE->add->unbox->putInt
Word#writeLong(WordBase, long, LocationIdentity)::: word write long:::UNSAFE->add->unbox->putLong
Word#writeFloat(WordBase, float, LocationIdentity)::: word write float:::UNSAFE->add->unbox->putFloat
Word#writeDouble(WordBase, double, LocationIdentity)::: word write double:::UNSAFE->add->unbox->putDouble
Word#writeWord(WordBase, WordBase, LocationIdentity)::: word write word:::UNSAFE->add->unbox->unbox->putAddress
Word#initializeLong(WordBase, long, LocationIdentity)::: word initialize long:::UNSAFE->add->unbox->putLong
Word#writeObject(WordBase, Object, LocationIdentity)::: word write object:::
Word#writeByte(int, byte, LocationIdentity)::: word write byte:::WordFactory->signed->writeByte
Word#writeChar(int, char, LocationIdentity)::: word write char:::WordFactory->signed->writeChar
Word#writeShort(int, short, LocationIdentity)::: word write short:::WordFactory->signed->writeShort
Word#writeInt(int, int, LocationIdentity)::: word write int:::WordFactory->signed->writeInt
Word#writeLong(int, long, LocationIdentity)::: word write long:::WordFactory->signed->writeLong
Word#writeFloat(int, float, LocationIdentity)::: word write float:::WordFactory->signed->writeFloat
Word#writeDouble(int, double, LocationIdentity)::: word write double:::WordFactory->signed->writeDouble
Word#writeWord(int, WordBase, LocationIdentity)::: word write word:::WordFactory->signed->writeWord
Word#initializeLong(int, long, LocationIdentity)::: word initialize long:::WordFactory->signed->initializeLong
Word#writeObject(int, Object, LocationIdentity)::: word write object:::WordFactory->signed->writeObject
Word#readByte(WordBase)::: word read byte:::return->UNSAFE->add->unbox->getByte
Word#readChar(WordBase)::: word read char:::return->UNSAFE->add->unbox->getChar
Word#readShort(WordBase)::: word read short:::return->UNSAFE->add->unbox->getShort
Word#readInt(WordBase)::: word read int:::return->UNSAFE->add->unbox->getInt
Word#readLong(WordBase)::: word read long:::return->UNSAFE->add->unbox->getLong
Word#readFloat(WordBase)::: word read float:::return->UNSAFE->add->unbox->getFloat
Word#readDouble(WordBase)::: word read double:::return->UNSAFE->add->unbox->getDouble
Word#readWord(WordBase)::: word read word:::return->UNSAFE->add->unbox->getAddress->box
Word#readObject(WordBase)::: word read object:::
Word#readObject(WordBase, BarrierType)::: word read object:::
Word#readByte(int)::: word read byte:::return->WordFactory->signed->readByte
Word#readChar(int)::: word read char:::return->WordFactory->signed->readChar
Word#readShort(int)::: word read short:::return->WordFactory->signed->readShort
Word#readInt(int)::: word read int:::return->WordFactory->signed->readInt
Word#readLong(int)::: word read long:::return->WordFactory->signed->readLong
Word#readFloat(int)::: word read float:::return->WordFactory->signed->readFloat
Word#readDouble(int)::: word read double:::return->WordFactory->signed->readDouble
Word#readWord(int)::: word read word:::return->WordFactory->signed->readWord
Word#readObject(int)::: word read object:::return->WordFactory->signed->readObject
Word#readObject(int, BarrierType)::: word read object:::return->WordFactory->signed->readObject
Word#writeByte(WordBase, byte)::: word write byte:::UNSAFE->add->unbox->putByte
Word#writeChar(WordBase, char)::: word write char:::UNSAFE->add->unbox->putChar
Word#writeShort(WordBase, short)::: word write short:::UNSAFE->add->unbox->putShort
Word#writeInt(WordBase, int)::: word write int:::UNSAFE->add->unbox->putInt
Word#writeLong(WordBase, long)::: word write long:::UNSAFE->add->unbox->putLong
Word#writeFloat(WordBase, float)::: word write float:::UNSAFE->add->unbox->putFloat
Word#writeDouble(WordBase, double)::: word write double:::UNSAFE->add->unbox->putDouble
Word#compareAndSwapInt(WordBase, int, int, LocationIdentity)::: word compare and swap int:::
Word#compareAndSwapLong(WordBase, long, long, LocationIdentity)::: word compare and swap long:::
Word#compareAndSwapWord(WordBase, T, T, LocationIdentity)::: word compare and swap word:::
Word#compareAndSwapObject(WordBase, Object, Object, LocationIdentity)::: word compare and swap object:::
Word#logicCompareAndSwapInt(WordBase, int, int, LocationIdentity)::: word logic compare and swap int:::return->UNSAFE->this->toObject->unbox->compareAndSwapInt
Word#logicCompareAndSwapLong(WordBase, long, long, LocationIdentity)::: word logic compare and swap long:::return->UNSAFE->this->toObject->unbox->compareAndSwapLong
Word#logicCompareAndSwapWord(WordBase, WordBase, WordBase, LocationIdentity)::: word logic compare and swap word:::
Word#logicCompareAndSwapObject(WordBase, Object, Object, LocationIdentity)::: word logic compare and swap object:::return->UNSAFE->this->toObject->unbox->compareAndSwapObject
Word#writeWord(WordBase, WordBase)::: word write word:::UNSAFE->add->unbox->unbox->putAddress
Word#writeObject(WordBase, Object)::: word write object:::
Word#writeByte(int, byte)::: word write byte:::WordFactory->signed->writeByte
Word#writeChar(int, char)::: word write char:::WordFactory->signed->writeChar
Word#writeShort(int, short)::: word write short:::WordFactory->signed->writeShort
Word#writeInt(int, int)::: word write int:::WordFactory->signed->writeInt
Word#writeLong(int, long)::: word write long:::WordFactory->signed->writeLong
Word#writeFloat(int, float)::: word write float:::WordFactory->signed->writeFloat
Word#writeDouble(int, double)::: word write double:::WordFactory->signed->writeDouble
Word#writeWord(int, WordBase)::: word write word:::WordFactory->signed->writeWord
Word#writeObject(int, Object)::: word write object:::WordFactory->signed->writeObject
Word#compareAndSwapInt(int, int, int, LocationIdentity)::: word compare and swap int:::return->WordFactory->signed->compareAndSwapInt
Word#compareAndSwapLong(int, long, long, LocationIdentity)::: word compare and swap long:::return->WordFactory->signed->compareAndSwapLong
Word#compareAndSwapWord(int, T, T, LocationIdentity)::: word compare and swap word:::return->WordFactory->signed->compareAndSwapWord
Word#compareAndSwapObject(int, Object, Object, LocationIdentity)::: word compare and swap object:::return->WordFactory->signed->compareAndSwapObject
Word#logicCompareAndSwapInt(int, int, int, LocationIdentity)::: word logic compare and swap int:::return->WordFactory->signed->logicCompareAndSwapInt
Word#logicCompareAndSwapLong(int, long, long, LocationIdentity)::: word logic compare and swap long:::return->WordFactory->signed->logicCompareAndSwapLong
Word#logicCompareAndSwapWord(int, WordBase, WordBase, LocationIdentity)::: word logic compare and swap word:::return->WordFactory->signed->logicCompareAndSwapWord
Word#logicCompareAndSwapObject(int, Object, Object, LocationIdentity)::: word logic compare and swap object:::return->WordFactory->signed->logicCompareAndSwapObject
Word#equals(Object):::This is deprecated because of the easy to mistype name collision between #equals and the other equals routines like #equal(Word):::throw->GraalError->shouldNotReachHere
Word#hashCode()::: word hash code:::throw->GraalError->shouldNotReachHere
Word#toString()::: word to string:::throw->GraalError->shouldNotReachHere
HostedWord#boxLong(long)::: hosted word box long:::if->return->return->new->HostedWord
HostedWord#unbox()::: hosted word unbox:::return
HostedWord#toString()::: hosted word to string:::return
WordCastNode#wordToObject(ValueNode, JavaKind)::: word cast node word to object:::return->objectStampFor->new->WordCastNode
WordCastNode#wordToObjectNonNull(ValueNode, JavaKind)::: word cast node word to object non null:::return->StampFactory->objectNonNull->new->WordCastNode
WordCastNode#wordToNarrowObject(ValueNode, NarrowOopStamp)::: word cast node word to narrow object:::return->new->WordCastNode
WordCastNode#addressToWord(ValueNode, JavaKind)::: word cast node address to word:::return->StampFactory->forKind->new->WordCastNode
WordCastNode#objectToTrackedPointer(ValueNode, JavaKind)::: word cast node object to tracked pointer:::return->StampFactory->forKind->new->WordCastNode
WordCastNode#objectToUntrackedPointer(ValueNode, JavaKind)::: word cast node object to untracked pointer:::return->StampFactory->forKind->new->WordCastNode
WordCastNode#narrowOopToUntrackedWord(ValueNode, JavaKind)::: word cast node narrow oop to untracked word:::return->StampFactory->forKind->new->WordCastNode
WordCastNode#getInput()::: word cast node get input:::return
WordCastNode#isZeroConstant(ValueNode)::: word cast node is zero constant:::constant->value->asJavaConstant->return->constant->getJavaKind->isNumericInteger->constant->asLong
WordCastNode#objectStampFor(ValueNode)::: word cast node object stamp for:::inputStamp->input->stamp->if->pointerStamp->if->pointerStamp->alwaysNull->return->StampFactory->alwaysNull->else->if->pointerStamp->nonNull->return->StampFactory->objectNonNull->else->if->contains->return->StampFactory->objectNonNull->else->if->input->isConstant->isZeroConstant->return->StampFactory->alwaysNull->return->StampFactory->object
WordCastNode#inferStamp()::: word cast node infer stamp:::if->objectStamp->if->objectStamp->alwaysNull->objectStamp->nonNull->newStamp->inputStamp->input->stamp->if->pointerStamp->if->pointerStamp->alwaysNull->objectStamp->asAlwaysNull->else->if->pointerStamp->nonNull->objectStamp->asNonNull->else->if->contains->objectStamp->asNonNull->else->if->input->isConstant->isZeroConstant->objectStamp->asAlwaysNull->return->updateStamp->return
WordCastNode#canonical(CanonicalizerTool)::: word cast node canonical:::if->tool->allUsagesAvailable->hasNoUsages->return->if->input->isConstant->if->input->asJavaConstant->isNull->return->ConstantNode->forIntegerStamp->else->if->isZeroConstant->return->ConstantNode->nullConstant->tool->getMetaAccess->forConstant->return
WordCastNode#generate(NodeLIRBuilderTool)::: word cast node generate:::value->generator->operand->kind->generator->getLIRGeneratorTool->stamp->getLIRKind->if->LIRKind->isValue->LIRKind->isValue->value->getValueKind->kind->getPlatformKind->changeType->if->kind->value->getValueKind->equals->generator->setResult->else->result->generator->getLIRGeneratorTool->newVariable->if->stamp->StampFactory->object->equals->generator->getLIRGeneratorTool->emitConvertZeroToNull->else->if->input->stamp->nonNull->generator->getLIRGeneratorTool->emitConvertNullToZero->else->generator->getLIRGeneratorTool->emitMove->generator->setResult
WordOperationPlugin#canChangeStackKind(GraphBuilderContext)::: word operation plugin can change stack kind:::return
WordOperationPlugin#handleInvoke(GraphBuilderContext, ResolvedJavaMethod, ValueNode[]):::Processes a call to a method if it is annotated as a word operation by adding nodes to the graph being built that implement the denoted operation.:::if->wordTypes->isWordOperation->return->wordTypes->b->getMethod->getDeclaringClass->getWordOperation->processWordOperation->return
WordOperationPlugin#interceptType(GraphBuilderTool, JavaType, boolean)::: word operation plugin intercept type:::wordStamp->if->resolved->if->wordTypes->isWord->wordTypes->getWordStamp->else->if->resolved->isArray->wordTypes->resolved->getElementalType->isWord->trusted->TypeReference->createTrustedWithoutAssumptions->StampFactory->object->if->return->StampPair->createSingle->else->return
WordOperationPlugin#notifyNotInlined(GraphBuilderContext, ResolvedJavaMethod, Invoke)::: word operation plugin notify not inlined:::if->wordTypes->invoke->asNode->isWord->invoke->asNode->wordTypes->StampTool->invoke->asNode->typeOrNull->getWordStamp->setStamp
WordOperationPlugin#handleLoadField(GraphBuilderContext, ValueNode, ResolvedJavaField)::: word operation plugin handle load field:::wordStamp->field->getType->interceptType->if->loadFieldNode->LoadFieldNode->createOverrideStamp->b->field->getJavaKind->addPush->return->return
WordOperationPlugin#handleLoadStaticField(GraphBuilderContext, ResolvedJavaField)::: word operation plugin handle load static field:::return->handleLoadField
WordOperationPlugin#handleLoadIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, JavaKind)::: word operation plugin handle load indexed:::arrayType->StampTool->typeOrNull->if->wordTypes->arrayType->getComponentType->isWord->b->createLoadIndexedNode->addPush->return->return
WordOperationPlugin#createLoadIndexedNode(ValueNode, ValueNode, GuardingNode)::: word operation plugin create load indexed node:::return->new->LoadIndexedNode
WordOperationPlugin#handleStoreField(GraphBuilderContext, ValueNode, ResolvedJavaField, ValueNode)::: word operation plugin handle store field:::if->field->getJavaKind->isWordField->wordTypes->field->getType->isWord->isWordValue->value->getStackKind->if->throw->field->format->bailout->else->if->throw->field->format->bailout->return
WordOperationPlugin#handleStoreStaticField(GraphBuilderContext, ResolvedJavaField, ValueNode)::: word operation plugin handle store static field:::return->handleStoreField
WordOperationPlugin#handleStoreIndexed(GraphBuilderContext, ValueNode, ValueNode, GuardingNode, GuardingNode, JavaKind, ValueNode)::: word operation plugin handle store indexed:::arrayType->StampTool->typeOrNull->if->wordTypes->arrayType->getComponentType->isWord->if->value->getStackKind->throw->arrayType->toJavaName->bailout->GraalError->guarantee->b->createStoreIndexedNode->add->return->if->value->getStackKind->throw->arrayType->toJavaName->bailout->return
WordOperationPlugin#createStoreIndexedNode(ValueNode, ValueNode, GuardingNode, ValueNode)::: word operation plugin create store indexed node:::return->new->StoreIndexedNode
WordOperationPlugin#handleCheckCast(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)::: word operation plugin handle check cast:::if->wordTypes->isWord->if->object->getStackKind->throw->type->toJavaName->bailout->return->if->object->getStackKind->throw->type->toJavaName->bailout->b->push->return
WordOperationPlugin#handleInstanceOf(GraphBuilderContext, ValueNode, ResolvedJavaType, JavaTypeProfile)::: word operation plugin handle instance of:::if->wordTypes->isWord->throw->type->toJavaName->bailout->else->if->object->getStackKind->throw->type->toJavaName->bailout->return
WordOperationPlugin#processWordOperation(GraphBuilderContext, ValueNode[], ResolvedJavaMethod)::: word operation plugin process word operation:::returnKind->wordMethod->getSignature->getReturnKind->factoryOperation->BridgeMethodUtils->getAnnotation->if->switch->factoryOperation->opcode->b->forIntegerKind->addPush->return->b->fromUnsigned->push->return->b->fromSigned->push->return->operation->BridgeMethodUtils->getAnnotation->if->throw->wordMethod->format->bailout->switch->operation->opcode->left->right->operation->rightOperandIsInt->toUnsigned->fromSigned->b->operation->node->operation->opcode->createBinaryNodeInstance->addPush->break->b->operation->condition->fromSigned->comparisonOp->push->break->b->ConstantNode->forIntegerKind->comparisonOp->push->break->b->ConstantNode->forIntegerKind->comparisonOp->push->break->b->b->forIntegerKind->add->new->XorNode->addPush->break->readKind->wordTypes->wordMethod->getSignature->wordMethod->getDeclaringClass->getReturnType->asKind->address->makeAddress->location->if->any->else->snippetReflection->asJavaConstant->asObject->b->operation->opcode->readOp->push->break->readKind->wordTypes->wordMethod->getSignature->wordMethod->getDeclaringClass->getReturnType->asKind->address->makeAddress->barrierType->snippetReflection->asJavaConstant->asObject->b->any->readOp->push->break->writeKind->wordTypes->wordMethod->getSignature->wordMethod->isStatic->wordMethod->getDeclaringClass->getParameterType->asKind->address->makeAddress->location->if->any->else->snippetReflection->asJavaConstant->asObject->operation->opcode->writeOp->break->b->toUnsigned->push->break->objectToTracked->b->WordCastNode->objectToTrackedPointer->add->b->push->break->objectToUntracked->b->WordCastNode->objectToUntrackedPointer->add->b->push->break->addressToWord->b->WordCastNode->addressToWord->add->b->push->break->wordToObject->b->WordCastNode->wordToObject->add->b->push->break->wordToObjectNonNull->b->WordCastNode->wordToObjectNonNull->add->b->push->break->address->makeAddress->valueKind->wordTypes->wordMethod->getSignature->wordMethod->getDeclaringClass->getParameterType->asKind->location->snippetReflection->asJavaConstant->asObject->returnType->wordMethod->getSignature->wordMethod->getDeclaringClass->getReturnType->b->wordTypes->asKind->casOp->addPush->break->throw->operation->opcode->new->GraalError
WordOperationPlugin#createBinaryNodeInstance(Class, ValueNode, ValueNode, boolean):::Create an instance of a binary node which is used to lower Word operations:::try->parameterTypes->new->Class<?>Arr->new->Class<?>Arr->cons->nodeClass->getDeclaredConstructor->initargs->new->ObjectArr->new->ObjectArr->return->cons->newInstance->catch->throw->new->GraalError->nodeClass->getName->addContext->finally
WordOperationPlugin#comparisonOp(GraphBuilderContext, Condition, ValueNode, ValueNode)::: word operation plugin comparison op:::canonical->condition->canonicalize->a->canonical->mustMirror->b->canonical->mustMirror->comparison->if->canonical->getCanonicalCondition->new->IntegerEqualsNode->else->if->canonical->getCanonicalCondition->new->IntegerBelowNode->else->new->IntegerLessThanNode->trueValue->graph->forInt->add->falseValue->graph->forInt->add->if->canonical->mustNegate->temp->return->graph->graph->add->new->ConditionalNode->add
WordOperationPlugin#readOp(GraphBuilderContext, JavaKind, AddressNode, LocationIdentity, Opcode)::: word operation plugin read op:::barrier->compressible->return->readOp
WordOperationPlugin#readOp(GraphBuilderContext, JavaKind, AddressNode, LocationIdentity, BarrierType, boolean)::: word operation plugin read op:::read->b->new->JavaReadNode->add->return
WordOperationPlugin#writeOp(GraphBuilderContext, JavaKind, AddressNode, LocationIdentity, ValueNode, Opcode)::: word operation plugin write op:::barrier->compressible->b->new->JavaWriteNode->add
WordOperationPlugin#casOp(JavaKind, JavaKind, AddressNode, LocationIdentity, ValueNode, ValueNode)::: word operation plugin cas op:::isLogic->cas->if->new->LogicCompareAndSwapNode->else->new->ValueCompareAndSwapNode->return
WordOperationPlugin#makeAddress(GraphBuilderContext, ValueNode, ValueNode)::: word operation plugin make address:::return->b->fromSigned->new->OffsetAddressNode->add
WordOperationPlugin#fromUnsigned(GraphBuilderContext, ValueNode)::: word operation plugin from unsigned:::return->convert
WordOperationPlugin#fromSigned(GraphBuilderContext, ValueNode)::: word operation plugin from signed:::return->convert
WordOperationPlugin#toUnsigned(GraphBuilderContext, ValueNode, JavaKind)::: word operation plugin to unsigned:::return->convert
WordOperationPlugin#convert(GraphBuilderContext, ValueNode, JavaKind, boolean)::: word operation plugin convert:::if->value->getStackKind->return->if->return->b->new->NarrowNode->add->else->if->return->b->new->ZeroExtendNode->add->else->return->b->new->SignExtendNode->add
WordOperationPlugin#bailout(GraphBuilderContext, String)::: word operation plugin bailout:::throw->b->b->getCode->b->bci->asStackTraceElement->bailout
WordTypes#isWordOperation(ResolvedJavaMethod):::Determines if a given method denotes a word operation.:::isWordFactory->wordFactoryType->targetMethod->getDeclaringClass->equals->if->return->targetMethod->isConstructor->isObjectAccess->objectAccessType->targetMethod->getDeclaringClass->equals->isBarrieredAccess->barrieredAccessType->targetMethod->getDeclaringClass->equals->if->return->return->targetMethod->getDeclaringClass->isWord
WordTypes#getWordOperation(ResolvedJavaMethod, ResolvedJavaType):::Gets the method annotated with Operation based on a given method that represents a word operation (but may not necessarily have the annotation).:::isWordBase->wordBaseType->targetMethod->getDeclaringClass->isAssignableFrom->wordMethod->if->targetMethod->isStatic->wordImplType->resolveConcreteMethod->return
WordTypes#isWord(ValueNode):::Determines if a given node has a word type.:::return->StampTool->typeOrNull->isWord
WordTypes#isWord(JavaType):::Determines if a given type is a word type.:::return->wordBaseType->isAssignableFrom
WordTypes#asKind(JavaType):::Gets the kind for a given type, returning the #getWordKind() word kind if type is a #isWord(JavaType) word type.:::if->isWord->return->else->return->type->getJavaKind
WordTypes#getWordKind()::: word types get word kind:::return
WordTypes#getWordStamp(ResolvedJavaType):::Gets the stamp for a given #isWord(JavaType) word type.:::return->StampFactory->forKind
WordTypes#getWordImplType()::: word types get word impl type:::return

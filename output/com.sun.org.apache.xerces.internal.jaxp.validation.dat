AbstractXMLSchema#newValidator()::: abstract schema new validator:::return->new->ValidatorImpl
AbstractXMLSchema#newValidatorHandler()::: abstract schema new validator handler:::return->new->ValidatorHandlerImpl
AbstractXMLSchema#getFeature(String):::Returns the initial value of a feature for validators created using this grammar pool container or null if the validators should use the default value.:::return->fFeatures->get
AbstractXMLSchema#setFeature(String, boolean)::: abstract schema set feature:::fFeatures->put
AbstractXMLSchema#getProperty(String):::Returns the initial value of a property for validators created using this grammar pool container or null if the validators should use the default value.:::return->fProperties->get
AbstractXMLSchema#setProperty(String, Object)::: abstract schema set property:::fProperties->put
DOMDocumentHandler#setDOMResult(DOMResult):::Sets the DOMResult object which receives the constructed DOM nodes.:::
DOMDocumentHandler#doctypeDecl(DocumentType):::A document type declaration.:::
DOMDocumentHandler#characters(Text)::: document handler characters:::
DOMDocumentHandler#cdata(CDATASection)::: document handler cdata:::
DOMDocumentHandler#comment(Comment):::A comment.:::
DOMDocumentHandler#processingInstruction(ProcessingInstruction):::A processing instruction:::
DOMDocumentHandler#setIgnoringCharacters(boolean)::: document handler set ignoring characters:::
DOMResultAugmentor#setDOMResult(DOMResult)::: result augmentor set result:::if->target->result->getNode->target->getNodeType->target->getOwnerDocument->return
DOMResultAugmentor#doctypeDecl(DocumentType)::: result augmentor doctype decl:::
DOMResultAugmentor#characters(Text)::: result augmentor characters:::
DOMResultAugmentor#cdata(CDATASection)::: result augmentor cdata:::
DOMResultAugmentor#comment(Comment)::: result augmentor comment:::
DOMResultAugmentor#processingInstruction(ProcessingInstruction)::: result augmentor processing instruction:::
DOMResultAugmentor#setIgnoringCharacters(boolean)::: result augmentor set ignoring characters:::
DOMResultAugmentor#startDocument(XMLLocator, String, NamespaceContext, Augmentations)::: result augmentor start document:::
DOMResultAugmentor#xmlDecl(String, String, String, Augmentations)::: result augmentor xml decl:::
DOMResultAugmentor#doctypeDecl(String, String, String, Augmentations)::: result augmentor doctype decl:::
DOMResultAugmentor#comment(XMLString, Augmentations)::: result augmentor comment:::
DOMResultAugmentor#processingInstruction(String, XMLString, Augmentations)::: result augmentor processing instruction:::
DOMResultAugmentor#startElement(QName, XMLAttributes, Augmentations)::: result augmentor start element:::currentElement->fDOMValidatorHelper->getCurrentElement->attrMap->currentElement->getAttributes->oldLength->attrMap->getLength->if->attr->for->i->newLength->attributes->getLength->if->if->for->i->else->for->i
DOMResultAugmentor#emptyElement(QName, XMLAttributes, Augmentations)::: result augmentor empty element:::startElement->endElement
DOMResultAugmentor#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations)::: result augmentor start general entity:::
DOMResultAugmentor#textDecl(String, String, Augmentations)::: result augmentor text decl:::
DOMResultAugmentor#endGeneralEntity(String, Augmentations)::: result augmentor end general entity:::
DOMResultAugmentor#characters(XMLString, Augmentations)::: result augmentor characters:::if->currentElement->fDOMValidatorHelper->getCurrentElement->currentElement->fDocument->text->toString->createTextNode->appendChild
DOMResultAugmentor#ignorableWhitespace(XMLString, Augmentations)::: result augmentor ignorable whitespace:::characters
DOMResultAugmentor#endElement(QName, Augmentations)::: result augmentor end element:::currentElement->fDOMValidatorHelper->getCurrentElement->if->elementPSVI->augs->getItem->if->if->setPSVI->type->elementPSVI->getMemberTypeDefinition->if->elementPSVI->getTypeDefinition->setType
DOMResultAugmentor#startCDATA(Augmentations)::: result augmentor start a:::
DOMResultAugmentor#endCDATA(Augmentations)::: result augmentor end a:::
DOMResultAugmentor#endDocument(Augmentations)::: result augmentor end document:::
DOMResultAugmentor#setDocumentSource(XMLDocumentSource)::: result augmentor set document source:::
DOMResultAugmentor#getDocumentSource()::: result augmentor get document source:::return
DOMResultAugmentor#processAttributePSVI(AttrImpl, AttributePSVI):::Returns whether the given attribute is an ID type:::if->setPSVI->type->attrPSVI->getMemberTypeDefinition->if->attrPSVI->getTypeDefinition->if->attr->setType->return->isIDType->else->attr->setType->return->isIDType->return
DOMResultBuilder#setDOMResult(DOMResult)::: result builder set result:::fTargetChildren->clear->if->result->getNode->result->getNextSibling->fTarget->getNodeType->fTarget->getOwnerDocument->return
DOMResultBuilder#doctypeDecl(DocumentType)::: result builder doctype decl:::if->docType->fDocumentImpl->node->getName->node->getPublicId->node->getSystemId->createDocumentType->internalSubset->node->getInternalSubset->if->setInternalSubset->oldMap->node->getEntities->newMap->docType->getEntities->length->oldMap->getLength->for->i->node->getNotations->docType->getNotations->oldMap->getLength->for->i->append
DOMResultBuilder#characters(Text)::: result builder characters:::fDocument->node->getNodeValue->createTextNode->append
DOMResultBuilder#cdata(CDATASection)::: result builder cdata:::fDocument->node->getNodeValue->createCDATASection->append
DOMResultBuilder#comment(Comment)::: result builder comment:::fDocument->node->getNodeValue->createComment->append
DOMResultBuilder#processingInstruction(ProcessingInstruction)::: result builder processing instruction:::fDocument->node->getTarget->node->getData->createProcessingInstruction->append
DOMResultBuilder#setIgnoringCharacters(boolean)::: result builder set ignoring characters:::
DOMResultBuilder#startDocument(XMLLocator, String, NamespaceContext, Augmentations)::: result builder start document:::
DOMResultBuilder#xmlDecl(String, String, String, Augmentations)::: result builder xml decl:::
DOMResultBuilder#doctypeDecl(String, String, String, Augmentations)::: result builder doctype decl:::
DOMResultBuilder#comment(XMLString, Augmentations)::: result builder comment:::
DOMResultBuilder#processingInstruction(String, XMLString, Augmentations)::: result builder processing instruction:::
DOMResultBuilder#startElement(QName, XMLAttributes, Augmentations)::: result builder start element:::elem->attrCount->attributes->getLength->if->fDocument->createElementNS->for->i->else->fDocumentImpl->createElementNS->for->i->append->if
DOMResultBuilder#emptyElement(QName, XMLAttributes, Augmentations)::: result builder empty element:::startElement->endElement
DOMResultBuilder#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations)::: result builder start general entity:::
DOMResultBuilder#textDecl(String, String, Augmentations)::: result builder text decl:::
DOMResultBuilder#endGeneralEntity(String, Augmentations)::: result builder end general entity:::
DOMResultBuilder#characters(XMLString, Augmentations)::: result builder characters:::if->fDocument->text->toString->createTextNode->append
DOMResultBuilder#ignorableWhitespace(XMLString, Augmentations)::: result builder ignorable whitespace:::characters
DOMResultBuilder#endElement(QName, Augmentations)::: result builder end element:::if->elementPSVI->augs->getItem->if->if->setPSVI->type->elementPSVI->getMemberTypeDefinition->if->elementPSVI->getTypeDefinition->setType->if->return->fCurrentNode->getParentNode
DOMResultBuilder#startCDATA(Augmentations)::: result builder start a:::
DOMResultBuilder#endCDATA(Augmentations)::: result builder end a:::
DOMResultBuilder#endDocument(Augmentations)::: result builder end document:::if->foreach->fTarget->appendChild->else->foreach->fTarget->insertBefore
DOMResultBuilder#setDocumentSource(XMLDocumentSource)::: result builder set document source:::
DOMResultBuilder#getDocumentSource()::: result builder get document source:::return
DOMResultBuilder#append(Node)::: result builder append:::if->fCurrentNode->appendChild->else->if->fTarget->getNodeType->node->getNodeType->msg->DOMMessageFormatter->formatMessage->throw->new->XNIException->fTargetChildren->add
DOMValidatorHelper#validate(Source, Result)::: validator helper validate:::if->domSource->domResult->node->domSource->getNode->if->fComponentManager->reset->fValidationManager->setEntityState->fDOMNamespaceContext->reset->systemId->domSource->getSystemId->fXMLLocator->setLiteralSystemId->fXMLLocator->setExpandedSystemId->fErrorReporter->setDocumentLocator->try->node->getNodeType->node->getOwnerDocument->setupEntityMap->setupDOMResultHandler->fSchemaValidator->startDocument->validate->fSchemaValidator->endDocument->catch->throw->Util->toSAXParseException->throw->Util->toSAXException->finally->if->fDOMValidatorHandler->setDOMResult->return->throw->JAXPValidationMessageFormatter->fComponentManager->getLocale->new->ObjectArr->source->getClass->getName->result->getClass->getName->formatMessage->new->IllegalArgumentException
DOMValidatorHelper#isEntityDeclared(String)::: validator helper is entity declared:::return
DOMValidatorHelper#isEntityUnparsed(String)::: validator helper is entity unparsed:::if->entity->fEntities->getNamedItem->if->return->entity->getNotationName->return
DOMValidatorHelper#validate(Node):::Traverse the DOM and fire events to the schema validator.:::top->while->beginNode->next->node->getFirstChild->while->finishNode->if->break->node->getNextSibling->if->node->getParentNode->if->if->finishNode->break
DOMValidatorHelper#beginNode(Node):::Do processing for the start of a node.:::switch->node->getNodeType->fNamespaceContext->pushContext->fillQName->node->getAttributes->processAttributes->fSchemaValidator->startElement->break->if->fDOMValidatorHandler->setIgnoringCharacters->node->getNodeValue->sendCharactersToValidator->fDOMValidatorHandler->setIgnoringCharacters->fDOMValidatorHandler->characters->else->node->getNodeValue->sendCharactersToValidator->break->if->fDOMValidatorHandler->setIgnoringCharacters->fSchemaValidator->startCDATA->node->getNodeValue->sendCharactersToValidator->fSchemaValidator->endCDATA->fDOMValidatorHandler->setIgnoringCharacters->fDOMValidatorHandler->cdata->else->fSchemaValidator->startCDATA->node->getNodeValue->sendCharactersToValidator->fSchemaValidator->endCDATA->break->if->fDOMValidatorHandler->processingInstruction->break->if->fDOMValidatorHandler->comment->break->if->fDOMValidatorHandler->doctypeDecl->break->break
DOMValidatorHelper#finishNode(Node):::Do processing for the end of a node.:::if->node->getNodeType->fillQName->fSchemaValidator->endElement->fNamespaceContext->popContext
DOMValidatorHelper#setupEntityMap(Document):::Extracts NamedNodeMap of entities:::if->docType->doc->getDoctype->if->docType->getEntities->return
DOMValidatorHelper#setupDOMResultHandler(DOMSource, DOMResult):::Sets up handler for DOMResult.:::if->fSchemaValidator->setDocumentHandler->return->nodeResult->result->getNode->if->source->getNode->fDOMResultAugmentor->setDOMResult->fSchemaValidator->setDocumentHandler->return->if->result->getNode->try->factory->JdkXmlUtils->fComponentManager->getFeature->getDOMFactory->builder->factory->newDocumentBuilder->result->builder->newDocument->setNode->catch->throw->new->SAXException->finally->fDOMResultBuilder->setDOMResult->fSchemaValidator->setDocumentHandler
DOMValidatorHelper#fillQName(QName, Node)::: validator helper fill name:::prefix->node->getPrefix->localName->node->getLocalName->rawName->node->getNodeName->namespace->node->getNamespaceURI->namespace->length->fSymbolTable->addSymbol->fSymbolTable->addSymbol->if->k->rawName->indexOf->if->fSymbolTable->rawName->substring->addSymbol->fSymbolTable->rawName->substring->addSymbol->else->else->fSymbolTable->addSymbol->fSymbolTable->addSymbol
DOMValidatorHelper#processAttributes(NamedNodeMap)::: validator helper process attributes:::attrCount->attrMap->getLength->fAttributes->removeAllAttributes->for->i
DOMValidatorHelper#sendCharactersToValidator(String)::: validator helper send characters to validator:::if->length->str->length->remainder->if->str->getChars->fTempString->setValues->fSchemaValidator->characters->i->while->str->getChars->fTempString->setValues->fSchemaValidator->characters
DOMValidatorHelper#getCurrentElement()::: validator helper get current element:::return
DOMValidatorHelper.DOMNamespaceContext#pushContext()::: namespace context push context:::fNamespaceContext->pushContext
DOMValidatorHelper.DOMNamespaceContext#popContext()::: namespace context pop context:::fNamespaceContext->popContext
DOMValidatorHelper.DOMNamespaceContext#declarePrefix(String, String)::: namespace context declare prefix:::return->fNamespaceContext->declarePrefix
DOMValidatorHelper.DOMNamespaceContext#getURI(String)::: namespace context get i:::uri->fNamespaceContext->getURI->if->if->fillNamespaceContext->if->fNamespaceContext->containsPrefix->getURI0->return
DOMValidatorHelper.DOMNamespaceContext#getPrefix(String)::: namespace context get prefix:::return->fNamespaceContext->getPrefix
DOMValidatorHelper.DOMNamespaceContext#getDeclaredPrefixCount()::: namespace context get declared prefix count:::return->fNamespaceContext->getDeclaredPrefixCount
DOMValidatorHelper.DOMNamespaceContext#getDeclaredPrefixAt(int)::: namespace context get declared prefix at:::return->fNamespaceContext->getDeclaredPrefixAt
DOMValidatorHelper.DOMNamespaceContext#getAllPrefixes()::: namespace context get all prefixes:::return->fNamespaceContext->getAllPrefixes
DOMValidatorHelper.DOMNamespaceContext#reset()::: namespace context reset:::
DOMValidatorHelper.DOMNamespaceContext#fillNamespaceContext()::: namespace context fill namespace context:::if->currentNode->fRoot->getParentNode->while->if->currentNode->getNodeType->attributes->currentNode->getAttributes->attrCount->attributes->getLength->for->i->currentNode->getParentNode
DOMValidatorHelper.DOMNamespaceContext#declarePrefix0(String, String)::: namespace context declare prefix0:::if->namespacearray->new->StringArr->System->arraycopy
DOMValidatorHelper.DOMNamespaceContext#getURI0(String)::: namespace context get i0:::for->i->return
DraconianErrorHandler#getInstance():::Returns the one and only instance of this error handler.:::return
DraconianErrorHandler#warning(SAXParseException):::Warning: Ignore.:::
DraconianErrorHandler#error(SAXParseException):::Error: Throws back SAXParseException.:::throw
DraconianErrorHandler#fatalError(SAXParseException):::Fatal Error: Throws back SAXParseException.:::throw
EmptyXMLSchema#retrieveInitialGrammarSet(String)::: empty schema retrieve initial grammar set:::return
EmptyXMLSchema#cacheGrammars(String, Grammar[])::: empty schema cache grammars:::
EmptyXMLSchema#retrieveGrammar(XMLGrammarDescription)::: empty schema retrieve grammar:::return
EmptyXMLSchema#lockPool()::: empty schema lock pool:::
EmptyXMLSchema#unlockPool()::: empty schema unlock pool:::
EmptyXMLSchema#clear()::: empty schema clear:::
EmptyXMLSchema#getGrammarPool()::: empty schema get grammar pool:::return
EmptyXMLSchema#isFullyComposed()::: empty schema is fully composed:::return
ErrorHandlerAdaptor#hadError():::returns if there was an error since the last invocation of the resetError method.:::return
ErrorHandlerAdaptor#reset():::resets the error flag.:::
ErrorHandlerAdaptor#getErrorHandler():::Implemented by the derived class to return the actual ErrorHandler to which errors are sent.:::
ErrorHandlerAdaptor#fatalError(String, String, XMLParseException)::: error handler adaptor fatal error:::try->getErrorHandler->Util->toSAXParseException->fatalError->catch->throw->new->WrappedSAXException->finally
ErrorHandlerAdaptor#error(String, String, XMLParseException)::: error handler adaptor error:::try->getErrorHandler->Util->toSAXParseException->error->catch->throw->new->WrappedSAXException->finally
ErrorHandlerAdaptor#warning(String, String, XMLParseException)::: error handler adaptor warning:::try->getErrorHandler->Util->toSAXParseException->warning->catch->throw->new->WrappedSAXException->finally
JAXPValidationMessageFormatter#formatMessage(Locale, String, Object[]):::Formats a message with the specified arguments using the given locale information.:::resourceBundle->if->SecuritySupport->getResourceBundle->else->SecuritySupport->getResourceBundle->msg->try->resourceBundle->getString->if->try->format->catch->resourceBundle->getString->resourceBundle->getString->finally->catch->resourceBundle->getString->throw->new->MissingResourceException->finally->if->if->str->new->StringBuffer->str->append->for->i->return
ReadOnlyGrammarPool#cacheGrammars(String, Grammar[])::: read only grammar pool cache grammars:::
ReadOnlyGrammarPool#clear()::: read only grammar pool clear:::
ReadOnlyGrammarPool#lockPool()::: read only grammar pool lock pool:::
ReadOnlyGrammarPool#retrieveGrammar(XMLGrammarDescription)::: read only grammar pool retrieve grammar:::return->core->retrieveGrammar
ReadOnlyGrammarPool#retrieveInitialGrammarSet(String)::: read only grammar pool retrieve initial grammar set:::return->core->retrieveInitialGrammarSet
ReadOnlyGrammarPool#unlockPool()::: read only grammar pool unlock pool:::
SimpleXMLSchema#retrieveInitialGrammarSet(String)::: simple schema retrieve initial grammar set:::return->equals->fGrammars->clone
SimpleXMLSchema#cacheGrammars(String, Grammar[])::: simple schema cache grammars:::
SimpleXMLSchema#retrieveGrammar(XMLGrammarDescription)::: simple schema retrieve grammar:::return->fGrammarDescription->equals
SimpleXMLSchema#lockPool()::: simple schema lock pool:::
SimpleXMLSchema#unlockPool()::: simple schema unlock pool:::
SimpleXMLSchema#clear()::: simple schema clear:::
SimpleXMLSchema#getGrammarPool()::: simple schema get grammar pool:::return
SimpleXMLSchema#isFullyComposed()::: simple schema is fully composed:::return
SoftReferenceGrammarPool#retrieveInitialGrammarSet(String)::: soft reference grammar pool retrieve initial grammar set:::synchronized->clean->return
SoftReferenceGrammarPool#cacheGrammars(String, Grammar[])::: soft reference grammar pool cache grammars:::if->for->i
SoftReferenceGrammarPool#retrieveGrammar(XMLGrammarDescription)::: soft reference grammar pool retrieve grammar:::return->getGrammar
SoftReferenceGrammarPool#putGrammar(Grammar):::Puts the specified grammar into the grammar pool and associates it to its root element name or its target namespace.:::if->synchronized->clean->desc->grammar->getGrammarDescription->hash->hashCode->index->for->entry->entry->new->Entry
SoftReferenceGrammarPool#getGrammar(XMLGrammarDescription):::Returns the grammar associated to the specified grammar description:::synchronized->clean->hash->hashCode->index->for->entry->return
SoftReferenceGrammarPool#removeGrammar(XMLGrammarDescription):::Removes the grammar associated to the specified grammar description from the grammar pool and returns the removed grammar:::synchronized->clean->hash->hashCode->index->for->entry->return
SoftReferenceGrammarPool#containsGrammar(XMLGrammarDescription):::Returns true if the grammar pool contains a grammar associated to the specified grammar description:::synchronized->clean->hash->hashCode->index->for->entry->return
SoftReferenceGrammarPool#lockPool()::: soft reference grammar pool lock pool:::
SoftReferenceGrammarPool#unlockPool()::: soft reference grammar pool unlock pool:::
SoftReferenceGrammarPool#clear()::: soft reference grammar pool clear:::for->i
SoftReferenceGrammarPool#equals(XMLGrammarDescription, XMLGrammarDescription):::This method checks whether two grammars are the same:::if->if->return->sd1->sd2->targetNamespace->sd1->getTargetNamespace->if->if->targetNamespace->sd2->getTargetNamespace->equals->return->else->if->sd2->getTargetNamespace->return->expandedSystemId->sd1->getExpandedSystemId->if->if->expandedSystemId->sd2->getExpandedSystemId->equals->return->else->if->sd2->getExpandedSystemId->return->return->return->desc1->equals
SoftReferenceGrammarPool#hashCode(XMLGrammarDescription):::Returns the hash code value for the given grammar description.:::if->sd->targetNamespace->sd->getTargetNamespace->expandedSystemId->sd->getExpandedSystemId->hash->targetNamespace->hashCode->expandedSystemId->hashCode->return->return->desc->hashCode
SoftReferenceGrammarPool#removeEntry(Entry):::Removes the given entry from the pool:::if->else->if->return->get
SoftReferenceGrammarPool#clean():::Removes stale entries from the pool.:::ref->fReferenceQueue->poll->while->entry->if->removeEntry->fReferenceQueue->poll
SoftReferenceGrammarPool.Entry#clear()::: entry clear:::if->next->clear
StAXValidatorHelper#validate(Source, Result)::: st validator helper validate:::if->if->try->tf->JdkXmlUtils->fComponentManager->getFeature->getSAXTransformFactory->securityManager->fComponentManager->getProperty->if->foreach->values->if->securityManager->limit->ordinal->isSet->tf->limit->apiProperty->securityManager->getLimitValueAsString->setAttribute->if->securityManager->printEntityCountInfo->tf->setAttribute->tf->newTransformer->tf->newTransformerHandler->catch->throw->new->TransformerFactoryConfigurationError->finally->new->ValidatorHandlerImpl->if->handler->setContentHandler->identityTransformer2->setResult->try->identityTransformer1->new->SAXResult->transform->catch->if->e->getException->throw->e->getException->throw->new->SAXException->finally->handler->setContentHandler->return->throw->JAXPValidationMessageFormatter->fComponentManager->getLocale->new->ObjectArr->source->getClass->getName->result->getClass->getName->formatMessage->new->IllegalArgumentException
StreamValidatorHelper#validate(Source, Result)::: stream validator helper validate:::if->streamSource->identityTransformerHandler->if->try->tf->JdkXmlUtils->fComponentManager->getFeature->getSAXTransformFactory->tf->newTransformerHandler->catch->throw->new->TransformerFactoryConfigurationError->finally->new->ValidatorHandlerImpl->handler->setContentHandler->identityTransformerHandler->setResult->input->streamSource->getPublicId->streamSource->getSystemId->new->XMLInputSource->input->streamSource->getInputStream->setByteStream->input->streamSource->getReader->setCharacterStream->config->fConfiguration->get->if->initialize->else->if->fComponentManager->getFeature->config->fComponentManager->getProperty->setProperty->config->fComponentManager->getProperty->setProperty->fComponentManager->reset->fSchemaValidator->setDocumentHandler->try->config->parse->catch->throw->Util->toSAXParseException->throw->Util->toSAXException->finally->return->throw->JAXPValidationMessageFormatter->fComponentManager->getLocale->new->ObjectArr->source->getClass->getName->result->getClass->getName->formatMessage->new->IllegalArgumentException
StreamValidatorHelper#initialize()::: stream validator helper initialize:::config->new->XML11Configuration->if->fComponentManager->getFeature->config->new->XMLSecurityManager->setProperty->config->fComponentManager->getProperty->setProperty->config->fComponentManager->getProperty->setProperty->errorReporter->fComponentManager->getProperty->config->setProperty->if->errorReporter->getMessageFormatter->xmft->new->XMLMessageFormatter->errorReporter->putMessageFormatter->errorReporter->putMessageFormatter->config->fComponentManager->getProperty->setProperty->config->fComponentManager->getProperty->setProperty->config->setDocumentHandler->config->setDTDHandler->config->setDTDContentModelHandler->config->fComponentManager->getProperty->setProperty->config->fComponentManager->getProperty->setProperty->JdkXmlUtils->catalogFeaturesConfig2Config->config->fComponentManager->getProperty->setProperty->new->SoftReference<>->return
Util#toXMLInputSource(StreamSource):::Creates a proper XMLInputSource from a StreamSource.:::if->in->getReader->return->in->getPublicId->in->getSystemId->in->getSystemId->in->getReader->new->XMLInputSource->if->in->getInputStream->return->in->getPublicId->in->getSystemId->in->getSystemId->in->getInputStream->new->XMLInputSource->return->in->getPublicId->in->getSystemId->in->getSystemId->new->XMLInputSource
Util#toSAXException(XNIException):::Reconstructs SAXException from XNIException.:::if->return->toSAXParseException->if->e->getException->return->e->getException->return->e->getMessage->e->getException->new->SAXException
Util#toSAXParseException(XMLParseException)::: util to parse exception:::if->e->getException->return->e->getException->return->e->getMessage->e->getPublicId->e->getExpandedSystemId->e->getLineNumber->e->getColumnNumber->e->getException->new->SAXParseException
ValidatorHandlerImpl#setContentHandler(ContentHandler)::: validator handler impl set content handler:::
ValidatorHandlerImpl#getContentHandler()::: validator handler impl get content handler:::return
ValidatorHandlerImpl#setErrorHandler(ErrorHandler)::: validator handler impl set error handler:::fComponentManager->setErrorHandler
ValidatorHandlerImpl#getErrorHandler()::: validator handler impl get error handler:::return->fComponentManager->getErrorHandler
ValidatorHandlerImpl#setResourceResolver(LSResourceResolver)::: validator handler impl set resource resolver:::fComponentManager->setResourceResolver
ValidatorHandlerImpl#getResourceResolver()::: validator handler impl get resource resolver:::return->fComponentManager->getResourceResolver
ValidatorHandlerImpl#getTypeInfoProvider()::: validator handler impl get type info provider:::return
ValidatorHandlerImpl#getFeature(String)::: validator handler impl get feature:::if->throw->new->NullPointerException->try->return->fComponentManager->getFeature->catch->identifier->e->getIdentifier->key->e->getType->throw->SAXMessageFormatter->fComponentManager->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->finally
ValidatorHandlerImpl#setFeature(String, boolean)::: validator handler impl set feature:::if->throw->new->NullPointerException->try->fComponentManager->setFeature->catch->identifier->e->getIdentifier->key->if->e->getType->throw->SAXMessageFormatter->fComponentManager->getLocale->formatMessage->new->SAXNotSupportedException->else->if->e->getType->else->throw->SAXMessageFormatter->fComponentManager->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->finally
ValidatorHandlerImpl#getProperty(String)::: validator handler impl get property:::if->throw->new->NullPointerException->try->return->fComponentManager->getProperty->catch->identifier->e->getIdentifier->key->e->getType->throw->SAXMessageFormatter->fComponentManager->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->finally
ValidatorHandlerImpl#setProperty(String, Object)::: validator handler impl set property:::if->throw->new->NullPointerException->try->fComponentManager->setProperty->catch->identifier->e->getIdentifier->key->e->getType->throw->SAXMessageFormatter->fComponentManager->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->finally
ValidatorHandlerImpl#isEntityDeclared(String)::: validator handler impl is entity declared:::return
ValidatorHandlerImpl#isEntityUnparsed(String)::: validator handler impl is entity unparsed:::if->return->fUnparsedEntities->containsKey->return
ValidatorHandlerImpl#startDocument(XMLLocator, String, NamespaceContext, Augmentations)::: validator handler impl start document:::if->try->fContentHandler->startDocument->catch->throw->new->XNIException->finally
ValidatorHandlerImpl#xmlDecl(String, String, String, Augmentations)::: validator handler impl xml decl:::
ValidatorHandlerImpl#doctypeDecl(String, String, String, Augmentations)::: validator handler impl doctype decl:::
ValidatorHandlerImpl#comment(XMLString, Augmentations)::: validator handler impl comment:::
ValidatorHandlerImpl#processingInstruction(String, XMLString, Augmentations)::: validator handler impl processing instruction:::if->try->fContentHandler->data->toString->processingInstruction->catch->throw->new->XNIException->finally
ValidatorHandlerImpl#startElement(QName, XMLAttributes, Augmentations)::: validator handler impl start element:::if->try->fTypeInfoProvider->beginStartElement->fContentHandler->startElement->catch->throw->new->XNIException->finally->fTypeInfoProvider->finishStartElement
ValidatorHandlerImpl#emptyElement(QName, XMLAttributes, Augmentations)::: validator handler impl empty element:::startElement->endElement
ValidatorHandlerImpl#startGeneralEntity(String, XMLResourceIdentifier, String, Augmentations)::: validator handler impl start general entity:::
ValidatorHandlerImpl#textDecl(String, String, Augmentations)::: validator handler impl text decl:::
ValidatorHandlerImpl#endGeneralEntity(String, Augmentations)::: validator handler impl end general entity:::
ValidatorHandlerImpl#characters(XMLString, Augmentations)::: validator handler impl characters:::if->if->return->try->fContentHandler->characters->catch->throw->new->XNIException->finally
ValidatorHandlerImpl#ignorableWhitespace(XMLString, Augmentations)::: validator handler impl ignorable whitespace:::if->try->fContentHandler->ignorableWhitespace->catch->throw->new->XNIException->finally
ValidatorHandlerImpl#endElement(QName, Augmentations)::: validator handler impl end element:::if->try->fTypeInfoProvider->beginEndElement->fContentHandler->endElement->catch->throw->new->XNIException->finally->fTypeInfoProvider->finishEndElement
ValidatorHandlerImpl#startCDATA(Augmentations)::: validator handler impl start a:::
ValidatorHandlerImpl#endCDATA(Augmentations)::: validator handler impl end a:::
ValidatorHandlerImpl#endDocument(Augmentations)::: validator handler impl end document:::if->try->fContentHandler->endDocument->catch->throw->new->XNIException->finally
ValidatorHandlerImpl#setDocumentSource(XMLDocumentSource)::: validator handler impl set document source:::
ValidatorHandlerImpl#getDocumentSource()::: validator handler impl get document source:::return
ValidatorHandlerImpl#setDocumentLocator(Locator)::: validator handler impl set document locator:::fSAXLocatorWrapper->setLocator->if->fContentHandler->setDocumentLocator
ValidatorHandlerImpl#startDocument()::: validator handler impl start document:::fComponentManager->reset->fSchemaValidator->setDocumentHandler->fValidationManager->setEntityState->fTypeInfoProvider->finishStartElement->if->fUnparsedEntities->isEmpty->fUnparsedEntities->clear->fErrorReporter->setDocumentLocator->try->fSchemaValidator->fSAXLocatorWrapper->getEncoding->startDocument->catch->throw->Util->toSAXParseException->throw->Util->toSAXException->finally
ValidatorHandlerImpl#endDocument()::: validator handler impl end document:::fSAXLocatorWrapper->setLocator->try->fSchemaValidator->endDocument->catch->throw->Util->toSAXParseException->throw->Util->toSAXException->finally
ValidatorHandlerImpl#startPrefixMapping(String, String)::: validator handler impl start prefix mapping:::prefixSymbol->uriSymbol->if->fSymbolTable->addSymbol->uri->length->fSymbolTable->addSymbol->else->uri->length->if->fNamespaceContext->pushContext->fNamespaceContext->declarePrefix->if->fContentHandler->startPrefixMapping
ValidatorHandlerImpl#endPrefixMapping(String)::: validator handler impl end prefix mapping:::if->fContentHandler->endPrefixMapping
ValidatorHandlerImpl#startElement(String, String, String, Attributes)::: validator handler impl start element:::if->fNamespaceContext->pushContext->fillQName->if->fillXMLAttributes2->else->fillXMLAttributes->try->fSchemaValidator->startElement->catch->throw->Util->toSAXParseException->throw->Util->toSAXException->finally
ValidatorHandlerImpl#endElement(String, String, String)::: validator handler impl end element:::fillQName->try->fSchemaValidator->endElement->catch->throw->Util->toSAXParseException->throw->Util->toSAXException->finally->fNamespaceContext->popContext
ValidatorHandlerImpl#characters(char[], int, int)::: validator handler impl characters:::try->fTempString->setValues->fSchemaValidator->characters->catch->throw->Util->toSAXParseException->throw->Util->toSAXException->finally
ValidatorHandlerImpl#ignorableWhitespace(char[], int, int)::: validator handler impl ignorable whitespace:::try->fTempString->setValues->fSchemaValidator->ignorableWhitespace->catch->throw->Util->toSAXParseException->throw->Util->toSAXException->finally
ValidatorHandlerImpl#processingInstruction(String, String)::: validator handler impl processing instruction:::if->fContentHandler->processingInstruction
ValidatorHandlerImpl#skippedEntity(String)::: validator handler impl skipped entity:::if->fContentHandler->skippedEntity
ValidatorHandlerImpl#notationDecl(String, String, String)::: validator handler impl notation decl:::
ValidatorHandlerImpl#unparsedEntityDecl(String, String, String, String)::: validator handler impl unparsed entity decl:::if->new->HashMap<>->fUnparsedEntities->put
ValidatorHandlerImpl#validate(Source, Result)::: validator handler impl validate:::if->saxSource->saxResult->if->saxResult->getHandler->setContentHandler->try->reader->saxSource->getXMLReader->if->JdkXmlUtils->fComponentManager->getFeature->fComponentManager->getFeature->getXMLReader->try->if->securityManager->fComponentManager->getProperty->if->try->reader->setProperty->catch->finally->try->spm->fComponentManager->getProperty->reader->spm->getValue->setProperty->catch->XMLSecurityManager->reader->getClass->getName->printWarning->finally->JdkXmlUtils->catalogFeaturesConfig2Reader->catch->throw->new->FactoryConfigurationError->finally->try->reader->getFeature->catch->finally->errorHandler->fComponentManager->getErrorHandler->reader->DraconianErrorHandler->getInstance->setErrorHandler->reader->setEntityResolver->fResolutionForwarder->fComponentManager->getResourceResolver->setEntityResolver->reader->setContentHandler->reader->setDTDHandler->is->saxSource->getInputSource->reader->parse->catch->finally->setContentHandler->return->throw->JAXPValidationMessageFormatter->fComponentManager->getLocale->new->ObjectArr->source->getClass->getName->result->getClass->getName->formatMessage->new->IllegalArgumentException
ValidatorHandlerImpl#getElementPSVI()::: validator handler impl get element i:::return->fTypeInfoProvider->getElementPSVI
ValidatorHandlerImpl#getAttributePSVI(int)::: validator handler impl get attribute i:::return->fTypeInfoProvider->getAttributePSVI
ValidatorHandlerImpl#getAttributePSVIByName(String, String)::: validator handler impl get attribute by name:::return->fTypeInfoProvider->getAttributePSVIByName
ValidatorHandlerImpl#fillQName(QName, String, String, String):::Fills in a QName object.:::if->uri->length->fSymbolTable->addSymbol->fSymbolTable->addSymbol->fSymbolTable->addSymbol->else->if->uri->length->if->if->prefix->prefixIdx->raw->indexOf->if->fSymbolTable->raw->substring->addSymbol->toFill->setValues
ValidatorHandlerImpl#fillXMLAttributes(Attributes):::Fills in the XMLAttributes object.:::fAttributes->removeAllAttributes->len->att->getLength->for->i
ValidatorHandlerImpl#fillXMLAttributes2(Attributes2):::Fills in the XMLAttributes object.:::fAttributes->removeAllAttributes->len->att->getLength->for->i
ValidatorHandlerImpl#fillXMLAttribute(Attributes, int):::Adds an attribute to the XMLAttributes object.:::att->getURI->att->getLocalName->att->getQName->fillQName->type->att->getType->fAttributes->att->getValue->addAttributeNS
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#beginStartElement(Augmentations, XMLAttributes):::Initializes the TypeInfoProvider with type information for the current element:::
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#finishStartElement():::Cleanup at the end of start element:::
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#beginEndElement(Augmentations):::Initializes the TypeInfoProvider with type information for the current element:::
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#finishEndElement():::Cleanup at the end of end element:::
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#checkState(boolean):::Throws a IllegalStateException if we are not in the startElement callback:::if->throw->JAXPValidationMessageFormatter->fComponentManager->getLocale->formatMessage->new->IllegalStateException
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#getAttributeTypeInfo(int)::: schema type info provider get attribute type info:::checkState->return->getAttributeType
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#getAttributeType(int)::: schema type info provider get attribute type:::checkState->if->fAttributes->getLength->throw->Integer->toString->new->IndexOutOfBoundsException->augs->fAttributes->getAugmentations->if->return->psvi->augs->getItem->return->getTypeInfoFromPSVI
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#getAttributeTypeInfo(String, String)::: schema type info provider get attribute type info:::checkState->return->fAttributes->getIndex->getAttributeTypeInfo
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#getAttributeTypeInfo(String)::: schema type info provider get attribute type info:::checkState->return->fAttributes->getIndex->getAttributeTypeInfo
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#getElementTypeInfo()::: schema type info provider get element type info:::checkState->if->return->psvi->fElementAugs->getItem->return->getTypeInfoFromPSVI
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#getTypeInfoFromPSVI(ItemPSVI)::: schema type info provider get type info from i:::if->return->if->psvi->getValidity->t->psvi->getMemberTypeDefinition->if->return->t->psvi->getTypeDefinition->if->return->return
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#isIdAttribute(int)::: schema type info provider is id attribute:::checkState->type->getAttributeType->if->return->return->type->isIDType
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#isSpecified(int)::: schema type info provider is specified:::checkState->return->fAttributes->isSpecified
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#getElementPSVI()::: schema type info provider get element i:::return->fElementAugs->getItem
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#getAttributePSVI(int)::: schema type info provider get attribute i:::if->augs->fAttributes->getAugmentations->if->return->augs->getItem->return
ValidatorHandlerImpl.XMLSchemaTypeInfoProvider#getAttributePSVIByName(String, String)::: schema type info provider get attribute by name:::if->augs->fAttributes->getAugmentations->if->return->augs->getItem->return
ValidatorHandlerImpl.ResolutionForwarder#setEntityResolver(LSResourceResolver):::Sets the DOM entity resolver.:::
ValidatorHandlerImpl.ResolutionForwarder#getEntityResolver():::Returns the DOM entity resolver.:::return
ValidatorHandlerImpl.ResolutionForwarder#getExternalSubset(String, String):::Always returns null:::return
ValidatorHandlerImpl.ResolutionForwarder#resolveEntity(String, String, String, String):::Resolves the given resource and adapts the LSInput returned into an InputSource.:::if->lsInput->fEntityResolver->resolveResource->if->pubId->lsInput->getPublicId->sysId->lsInput->getSystemId->baseSystemId->lsInput->getBaseURI->charStream->lsInput->getCharacterStream->byteStream->lsInput->getByteStream->data->lsInput->getStringData->encoding->lsInput->getEncoding->inputSource->new->InputSource->inputSource->setPublicId->inputSource->resolveSystemId->setSystemId->if->inputSource->setCharacterStream->else->if->inputSource->setByteStream->else->if->data->length->inputSource->new->StringReader->setCharacterStream->inputSource->setEncoding->return->return
ValidatorHandlerImpl.ResolutionForwarder#resolveEntity(String, String):::Delegates to EntityResolver2.resolveEntity(String, String, String, String).:::return->resolveEntity
ValidatorHandlerImpl.ResolutionForwarder#resolveSystemId(String, String):::Resolves a system identifier against a base URI.:::try->return->XMLEntityManager->expandSystemId->catch->return->finally
ValidatorHelper#validate(Source, Result)::: validator helper validate:::
ValidatorImpl#validate(Source, Result)::: validator impl validate:::if->if->new->ValidatorHandlerImpl->fSAXValidatorHelper->validate->else->if->if->new->DOMValidatorHelper->fDOMValidatorHelper->validate->else->if->if->new->StreamValidatorHelper->fStreamValidatorHelper->validate->else->if->if->new->StAXValidatorHelper->fStaxValidatorHelper->validate->else->if->throw->JAXPValidationMessageFormatter->fComponentManager->getLocale->formatMessage->new->NullPointerException->else->throw->JAXPValidationMessageFormatter->fComponentManager->getLocale->new->ObjectArr->source->getClass->getName->formatMessage->new->IllegalArgumentException
ValidatorImpl#setErrorHandler(ErrorHandler)::: validator impl set error handler:::fComponentManager->setErrorHandler
ValidatorImpl#getErrorHandler()::: validator impl get error handler:::return->fComponentManager->getErrorHandler
ValidatorImpl#setResourceResolver(LSResourceResolver)::: validator impl set resource resolver:::fComponentManager->setResourceResolver
ValidatorImpl#getResourceResolver()::: validator impl get resource resolver:::return->fComponentManager->getResourceResolver
ValidatorImpl#getFeature(String)::: validator impl get feature:::if->throw->new->NullPointerException->try->return->fComponentManager->getFeature->catch->identifier->e->getIdentifier->key->e->getType->throw->SAXMessageFormatter->fComponentManager->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->finally
ValidatorImpl#setFeature(String, boolean)::: validator impl set feature:::if->throw->new->NullPointerException->try->fComponentManager->setFeature->catch->identifier->e->getIdentifier->key->if->e->getType->throw->SAXMessageFormatter->fComponentManager->getLocale->formatMessage->new->SAXNotSupportedException->else->if->e->getType->else->throw->SAXMessageFormatter->fComponentManager->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->finally
ValidatorImpl#getProperty(String)::: validator impl get property:::if->throw->new->NullPointerException->if->CURRENT_ELEMENT_NODE->equals->return->fDOMValidatorHelper->getCurrentElement->try->return->fComponentManager->getProperty->catch->identifier->e->getIdentifier->key->e->getType->throw->SAXMessageFormatter->fComponentManager->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->finally
ValidatorImpl#setProperty(String, Object)::: validator impl set property:::if->throw->new->NullPointerException->try->fComponentManager->setProperty->catch->identifier->e->getIdentifier->key->e->getType->throw->SAXMessageFormatter->fComponentManager->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->finally
ValidatorImpl#reset()::: validator impl reset:::if->fComponentManager->restoreInitialState->setErrorHandler->setResourceResolver->else->if->setErrorHandler->if->setResourceResolver
ValidatorImpl#getElementPSVI()::: validator impl get element i:::return->fSAXValidatorHelper->getElementPSVI
ValidatorImpl#getAttributePSVI(int)::: validator impl get attribute i:::return->fSAXValidatorHelper->getAttributePSVI
ValidatorImpl#getAttributePSVIByName(String, String)::: validator impl get attribute by name:::return->fSAXValidatorHelper->getAttributePSVIByName
WeakReferenceXMLSchema#getGrammarPool()::: weak reference schema get grammar pool:::grammarPool->fGrammarPool->get->if->new->SoftReferenceGrammarPool->new->WeakReference<>->return
WeakReferenceXMLSchema#isFullyComposed()::: weak reference schema is fully composed:::return
XMLSchema#getGrammarPool():::Returns the grammar pool contained inside the container.:::return
XMLSchema#isFullyComposed():::Returns whether the schema components contained in this object can be considered to be a fully composed schema and should be used to exclusion of other schema components which may be present elsewhere.:::return
XMLSchemaFactory#isSchemaLanguageSupported(String):::Is specified schema supported by this SchemaFactory?:::if->throw->JAXPValidationMessageFormatter->fXMLSchemaLoader->getLocale->formatMessage->new->NullPointerException->if->schemaLanguage->length->throw->JAXPValidationMessageFormatter->fXMLSchemaLoader->getLocale->formatMessage->new->IllegalArgumentException->return->schemaLanguage->equals->schemaLanguage->equals
XMLSchemaFactory#getResourceResolver()::: schema factory get resource resolver:::return
XMLSchemaFactory#setResourceResolver(LSResourceResolver)::: schema factory set resource resolver:::fDOMEntityResolverWrapper->setEntityResolver->fXMLSchemaLoader->setEntityResolver
XMLSchemaFactory#getErrorHandler()::: schema factory get error handler:::return
XMLSchemaFactory#setErrorHandler(ErrorHandler)::: schema factory set error handler:::fErrorHandlerWrapper->DraconianErrorHandler->getInstance->setErrorHandler->fXMLSchemaLoader->setErrorHandler
XMLSchemaFactory#newSchema(Source[])::: schema factory new schema:::pool->new->XMLGrammarPoolImplExtension->fXMLGrammarPoolWrapper->setGrammarPool->xmlInputSources->new->XMLInputSourceArr->inputStream->reader->for->i->try->fXMLSchemaLoader->loadGrammar->catch->throw->Util->toSAXException->se->e->getMessage->new->SAXParseException->if->fErrorHandler->error->throw->finally->fXMLGrammarPoolWrapper->setGrammarPool->grammarCount->pool->getGrammarCount->schema->if->if->new->ReadOnlyGrammarPool->new->XMLSchema->else->if->grammars->pool->retrieveInitialGrammarSet->new->SimpleXMLSchema->else->new->EmptyXMLSchema->else->new->ReadOnlyGrammarPool->new->XMLSchema->propagateFeatures->propagateProperties->return
XMLSchemaFactory#newSchema()::: schema factory new schema:::schema->new->WeakReferenceXMLSchema->propagateFeatures->propagateProperties->return
XMLSchemaFactory#newSchema(XMLGrammarPool)::: schema factory new schema:::schema->new->ReadOnlyGrammarPool->new->XMLSchema->new->XMLSchema->propagateFeatures->return
XMLSchemaFactory#getFeature(String)::: schema factory get feature:::if->throw->JAXPValidationMessageFormatter->fXMLSchemaLoader->getLocale->formatMessage->new->NullPointerException->if->name->startsWith->if->name->equals->name->equals->name->equals->name->equals->return->if->name->equals->return->fSecurityManager->isSecureProcessing->else->if->name->equals->return->index->fXmlFeatures->getIndex->if->return->fXmlFeatures->getFeature->try->return->fXMLSchemaLoader->getFeature->catch->identifier->e->getIdentifier->if->e->getType->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->else->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotSupportedException->finally
XMLSchemaFactory#getProperty(String)::: schema factory get property:::if->throw->JAXPValidationMessageFormatter->fXMLSchemaLoader->getLocale->formatMessage->new->NullPointerException->if->name->equals->return->else->if->name->equals->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotSupportedException->try->return->fXMLSchemaLoader->getProperty->catch->identifier->e->getIdentifier->if->e->getType->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->else->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotSupportedException->finally
XMLSchemaFactory#setFeature(String, boolean)::: schema factory set feature:::if->throw->JAXPValidationMessageFormatter->fXMLSchemaLoader->getLocale->formatMessage->new->NullPointerException->if->name->startsWith->if->name->equals->name->equals->name->equals->name->equals->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotSupportedException->if->name->equals->if->System->getSecurityManager->throw->SAXMessageFormatter->formatMessage->new->SAXNotSupportedException->fSecurityManager->setSecureProcessing->if->fSecurityPropertyMgr->setValue->fSecurityPropertyMgr->setValue->fXMLSchemaLoader->setProperty->return->else->if->name->equals->return->else->if->name->equals->if->System->getSecurityManager->return->if->fXmlFeatures->setFeature->if->name->equals->name->equals->name->equals->fXMLSchemaLoader->setFeature->return->try->fXMLSchemaLoader->setFeature->catch->identifier->e->getIdentifier->if->e->getType->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->else->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotSupportedException->finally
XMLSchemaFactory#setProperty(String, Object)::: schema factory set property:::if->throw->JAXPValidationMessageFormatter->fXMLSchemaLoader->getLocale->formatMessage->new->NullPointerException->if->name->equals->XMLSecurityManager->convert->fXMLSchemaLoader->setProperty->return->else->if->name->equals->if->new->XMLSecurityPropertyManager->else->fXMLSchemaLoader->setProperty->return->else->if->name->equals->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotSupportedException->try->if->fSecurityManager->setLimit->if->fSecurityPropertyMgr->setValue->fXMLSchemaLoader->setProperty->catch->identifier->e->getIdentifier->if->e->getType->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotRecognizedException->else->throw->SAXMessageFormatter->fXMLSchemaLoader->getLocale->new->ObjectArr->formatMessage->new->SAXNotSupportedException->finally
XMLSchemaFactory#propagateFeatures(AbstractXMLSchema)::: schema factory propagate features:::schema->fSecurityManager->isSecureProcessing->setFeature->schema->setFeature->features->fXMLSchemaLoader->getRecognizedFeatures->for->i
XMLSchemaFactory#propagateProperties(AbstractXMLSchema)::: schema factory propagate properties:::properties->fXMLSchemaLoader->getRecognizedProperties->for->i
XMLSchemaFactory.XMLGrammarPoolImplExtension#getGrammarCount():::Returns the number of grammars contained in this pool.:::return
XMLSchemaFactory.XMLGrammarPoolWrapper#retrieveInitialGrammarSet(String)::: grammar pool wrapper retrieve initial grammar set:::return->fGrammarPool->retrieveInitialGrammarSet
XMLSchemaFactory.XMLGrammarPoolWrapper#cacheGrammars(String, Grammar[])::: grammar pool wrapper cache grammars:::fGrammarPool->cacheGrammars
XMLSchemaFactory.XMLGrammarPoolWrapper#retrieveGrammar(XMLGrammarDescription)::: grammar pool wrapper retrieve grammar:::return->fGrammarPool->retrieveGrammar
XMLSchemaFactory.XMLGrammarPoolWrapper#lockPool()::: grammar pool wrapper lock pool:::fGrammarPool->lockPool
XMLSchemaFactory.XMLGrammarPoolWrapper#unlockPool()::: grammar pool wrapper unlock pool:::fGrammarPool->unlockPool
XMLSchemaFactory.XMLGrammarPoolWrapper#clear()::: grammar pool wrapper clear:::fGrammarPool->clear
XMLSchemaFactory.XMLGrammarPoolWrapper#setGrammarPool(XMLGrammarPool)::: grammar pool wrapper set grammar pool:::
XMLSchemaFactory.XMLGrammarPoolWrapper#getGrammarPool()::: grammar pool wrapper get grammar pool:::return
XMLSchemaValidatorComponentManager#getFeatureState(String):::Returns the state of a feature.:::if->PARSER_SETTINGS->equals->return->FeatureState->is->else->if->VALIDATION->equals->SCHEMA_VALIDATION->equals->return->FeatureState->is->else->if->USE_GRAMMAR_POOL_ONLY->equals->return->FeatureState->is->else->if->equals->return->FeatureState->fInitSecurityManager->isSecureProcessing->is->else->if->SCHEMA_ELEMENT_DEFAULT->equals->return->FeatureState->is->return->super->getFeatureState
XMLSchemaValidatorComponentManager#setFeature(String, boolean):::Set the state of a feature.:::if->PARSER_SETTINGS->equals->throw->new->XMLConfigurationException->else->if->VALIDATION->equals->SCHEMA_VALIDATION->equals->throw->new->XMLConfigurationException->else->if->USE_GRAMMAR_POOL_ONLY->equals->throw->new->XMLConfigurationException->if->equals->if->throw->new->XMLConfigurationException->fInitSecurityManager->setSecureProcessing->setProperty->if->fSecurityPropertyMgr->setValue->fSecurityPropertyMgr->setValue->setProperty->return->fEntityManager->setFeature->fErrorReporter->setFeature->fSchemaValidator->setFeature->if->fInitFeatures->containsKey->current->super->getFeature->fInitFeatures->put->super->setFeature
XMLSchemaValidatorComponentManager#getPropertyState(String):::Returns the value of a property.:::if->LOCALE->equals->return->PropertyState->getLocale->is->component->fComponents->get->if->return->PropertyState->is->else->if->fComponents->containsKey->return->PropertyState->is->return->super->getPropertyState
XMLSchemaValidatorComponentManager#setProperty(String, Object):::Sets the state of a property.:::if->ENTITY_MANAGER->equals->ERROR_REPORTER->equals->NAMESPACE_CONTEXT->equals->SCHEMA_VALIDATOR->equals->SYMBOL_TABLE->equals->VALIDATION_MANAGER->equals->XMLGRAMMAR_POOL->equals->throw->new->XMLConfigurationException->fEntityManager->setProperty->fErrorReporter->setProperty->fSchemaValidator->setProperty->if->ENTITY_RESOLVER->equals->ERROR_HANDLER->equals->SECURITY_MANAGER->equals->fComponents->put->return->else->if->LOCALE->equals->setLocale->fComponents->put->return->if->fInitSecurityManager->setLimit->if->fSecurityPropertyMgr->setValue->if->fInitProperties->containsKey->fInitProperties->super->getProperty->put->super->setProperty
XMLSchemaValidatorComponentManager#addRecognizedParamsAndSetDefaults(XMLComponent, XSGrammarPoolContainer):::Adds all of the component's recognized features and properties to the list of default recognized features and properties, and sets default values on the configuration for features and properties which were previously absent from the configuration.:::recognizedFeatures->component->getRecognizedFeatures->addRecognizedFeatures->recognizedProperties->component->getRecognizedProperties->addRecognizedProperties->setFeatureDefaults->setPropertyDefaults
XMLSchemaValidatorComponentManager#reset():::Calls reset on each of the components owned by this component manager:::fNamespaceContext->reset->fValidationManager->reset->fEntityManager->reset->fErrorReporter->reset->fSchemaValidator->reset
XMLSchemaValidatorComponentManager#setErrorHandler(ErrorHandler)::: schema validator component manager set error handler:::new->ErrorHandlerWrapper->DraconianErrorHandler->getInstance->new->ErrorHandlerWrapper->setProperty
XMLSchemaValidatorComponentManager#getErrorHandler()::: schema validator component manager get error handler:::return
XMLSchemaValidatorComponentManager#setResourceResolver(LSResourceResolver)::: schema validator component manager set resource resolver:::new->DOMEntityResolverWrapper->setProperty
XMLSchemaValidatorComponentManager#getResourceResolver()::: schema validator component manager get resource resolver:::return
XMLSchemaValidatorComponentManager#setLocale(Locale)::: schema validator component manager set locale:::fErrorReporter->setLocale
XMLSchemaValidatorComponentManager#getLocale()::: schema validator component manager get locale:::return
XMLSchemaValidatorComponentManager#restoreInitialState():::Cleans out configuration, restoring it to its initial state.:::fComponents->put->fComponents->put->setLocale->fComponents->put->fInitSecurityManager->setSecureProcessing->fComponents->put->setLocale->fComponents->put->if->fInitFeatures->isEmpty->foreach->fInitFeatures->entrySet->name->entry->getKey->value->entry->getValue->super->setFeature->fInitFeatures->clear->if->fInitProperties->isEmpty->foreach->fInitProperties->entrySet->name->entry->getKey->value->entry->getValue->super->setProperty->fInitProperties->clear
XMLSchemaValidatorComponentManager#setFeatureDefaults(XMLComponent, String[], XSGrammarPoolContainer):::Sets feature defaults for the given component on this configuration.:::if->for->i
XMLSchemaValidatorComponentManager#setPropertyDefaults(XMLComponent, String[]):::Sets property defaults for the given component on this configuration.:::if->for->i
XSGrammarPoolContainer#getGrammarPool():::Returns the grammar pool contained inside the container.:::
XSGrammarPoolContainer#isFullyComposed():::Returns whether the schema components contained in this object can be considered to be a fully composed schema and should be used to the exclusion of other schema components which may be present elsewhere.:::
XSGrammarPoolContainer#getFeature(String):::Returns the initial value of a feature for validators created using this grammar pool container or null if the validators should use the default value.:::
XSGrammarPoolContainer#setFeature(String, boolean)::: grammar pool container set feature:::
XSGrammarPoolContainer#getProperty(String):::Returns the initial value of a property for validators created using this grammar pool container or null if the validators should use the default value.:::
XSGrammarPoolContainer#setProperty(String, Object)::: grammar pool container set property:::

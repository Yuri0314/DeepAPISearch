Axis#isReverse(int)::: axis is reverse:::return
Axis#getNames(int)::: axis get names:::return
Axis#getNamesLength()::: axis get names length:::return
DTM#setFeature(String, boolean):::Set an implementation dependent feature:::
DTM#setProperty(String, Object):::Set a run time property for this DTM instance.:::
DTM#getAxisTraverser(int):::This returns a stateless "traverser", that can navigate over an XPath axis, though not in document order.:::
DTM#getAxisIterator(int):::This is a shortcut to the iterators that implement XPath axes:::
DTM#getTypedAxisIterator(int, int):::Get an iterator that can navigate over an XPath Axis, predicated by the extended type ID.:::
DTM#hasChildNodes(int):::Given a node handle, test if it has child nodes:::
DTM#getFirstChild(int):::Given a node handle, get the handle of the node's first child.:::
DTM#getLastChild(int):::Given a node handle, get the handle of the node's last child.:::
DTM#getAttributeNode(int, String, String):::Retrieves an attribute node by local name and namespace URI  %TBD% Note that we currently have no way to support the DOM's old getAttribute() call, which accesses only the qname.:::
DTM#getFirstAttribute(int):::Given a node handle, get the index of the node's first attribute.:::
DTM#getFirstNamespaceNode(int, boolean):::Given a node handle, get the index of the node's first namespace node.:::
DTM#getNextSibling(int):::Given a node handle, advance to its next sibling.:::
DTM#getPreviousSibling(int):::Given a node handle, find its preceeding sibling:::
DTM#getNextAttribute(int):::Given a node handle, advance to the next attribute:::
DTM#getNextNamespaceNode(int, int, boolean):::Given a namespace handle, advance to the next namespace in the same scope (local or local-plus-inherited, as selected by getFirstNamespaceNode):::
DTM#getParent(int):::Given a node handle, find its parent node.:::
DTM#getDocument():::Given a DTM which contains only a single document, find the Node Handle of the  Document node:::
DTM#getOwnerDocument(int):::Given a node handle, find the owning document node:::
DTM#getDocumentRoot(int):::Given a node handle, find the owning document node.:::
DTM#getStringValue(int):::Get the string-value of a node as a String object (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value).:::
DTM#getStringValueChunkCount(int):::Get number of character array chunks in the string-value of a node:::
DTM#getStringValueChunk(int, int, int[]):::Get a character array chunk in the string-value of a node:::
DTM#getExpandedTypeID(int):::Given a node handle, return an ID that represents the node's expanded name.:::
DTM#getExpandedTypeID(String, String, int):::Given an expanded name, return an ID:::
DTM#getLocalNameFromExpandedNameID(int):::Given an expanded-name ID, return the local name part.:::
DTM#getNamespaceFromExpandedNameID(int):::Given an expanded-name ID, return the namespace URI part.:::
DTM#getNodeName(int):::Given a node handle, return its DOM-style node name:::
DTM#getNodeNameX(int):::Given a node handle, return the XPath node name:::
DTM#getLocalName(int):::Given a node handle, return its DOM-style localname:::
DTM#getPrefix(int):::Given a namespace handle, return the prefix that the namespace decl is mapping:::
DTM#getNamespaceURI(int):::Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to.):::
DTM#getNodeValue(int):::Given a node handle, return its node value:::
DTM#getNodeType(int):::Given a node handle, return its DOM-style node type:::
DTM#getLevel(int):::Get the depth level of this node in the tree (equals 1 for a parentless node).:::
DTM#isSupported(String, String):::Tests whether DTM DOM implementation implements a specific feature and that feature is supported by this node.:::
DTM#getDocumentBaseURI():::Return the base URI of the document entity:::
DTM#setDocumentBaseURI(String):::Set the base URI of the document entity.:::
DTM#getDocumentSystemIdentifier(int):::Return the system identifier of the document entity:::
DTM#getDocumentEncoding(int):::Return the name of the character encoding scheme        in which the document entity is expressed.:::
DTM#getDocumentStandalone(int):::Return an indication of the standalone status of the document,        either "yes" or "no":::
DTM#getDocumentVersion(int):::Return a string representing the XML version of the document:::
DTM#getDocumentAllDeclarationsProcessed():::Return an indication of whether the processor has read the complete DTD:::
DTM#getDocumentTypeDeclarationSystemIdentifier():::  A document type declaration information item has the following properties:      1:::
DTM#getDocumentTypeDeclarationPublicIdentifier():::Return the public identifier of the external subset, normalized as described in 4.2.2 External Entities [XML]:::
DTM#getElementById(String):::Returns the Element whose ID is given by elementId:::
DTM#getUnparsedEntityURI(String):::The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3.3 Unparsed Entities]):::
DTM#supportsPreStripping():::Return true if the xsl:strip-space or xsl:preserve-space was processed during construction of the document contained in this DTM:::
DTM#isNodeAfter(int, int):::Figure out whether nodeHandle2 should be considered as being later in the document than nodeHandle1, in Document Order as defined by the XPath model:::
DTM#isCharacterElementContentWhitespace(int):::2:::
DTM#isDocumentAllDeclarationsProcessed(int):::   10:::
DTM#isAttributeSpecified(int):::    5:::
DTM#dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean):::Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value):::
DTM#dispatchToEvents(int, org.xml.sax.ContentHandler):::Directly create SAX parser events representing the XML content of a DTM subtree:::
DTM#getNode(int):::Return an DOM node for the given node.:::
DTM#needsTwoThreads()::: m needs two threads:::
DTM#getContentHandler():::Return this DTM's content handler, if it has one.:::
DTM#getLexicalHandler():::Return this DTM's lexical handler, if it has one:::
DTM#getEntityResolver():::Return this DTM's EntityResolver, if it has one.:::
DTM#getDTDHandler():::Return this DTM's DTDHandler, if it has one.:::
DTM#getErrorHandler():::Return this DTM's ErrorHandler, if it has one.:::
DTM#getDeclHandler():::Return this DTM's DeclHandler, if it has one.:::
DTM#appendChild(int, boolean, boolean):::Append a child to "the end of the document":::
DTM#appendTextChild(String):::Append a text node child that will be constructed from a string, to the end of the document:::
DTM#getSourceLocatorFor(int):::Get the location of a node in the source document.:::
DTM#documentRegistration():::As the DTM is registered with the DTMManager, this method will be called:::
DTM#documentRelease()::: m document release:::
DTM#migrateTo(DTMManager):::Migrate a DTM built with an old DTMManager to a new DTMManager:::
DTMAxisIterator#next():::Get the next node in the iteration.:::
DTMAxisIterator#reset():::Resets the iterator to the last start node.:::
DTMAxisIterator#getLast()::: axis iterator get last:::
DTMAxisIterator#getPosition()::: axis iterator get position:::
DTMAxisIterator#setMark():::Remembers the current node for the next call to gotoMark().:::
DTMAxisIterator#gotoMark():::Restores the current node remembered by setMark().:::
DTMAxisIterator#setStartNode(int):::Set start to END should 'close' the iterator, i.e:::
DTMAxisIterator#getStartNode():::Get start to END should 'close' the iterator, i.e:::
DTMAxisIterator#isReverse()::: axis iterator is reverse:::
DTMAxisIterator#cloneIterator()::: axis iterator clone iterator:::
DTMAxisIterator#setRestartable(boolean):::Set if restartable.:::
DTMAxisIterator#getNodeByPosition(int):::Return the node at the given position.:::
DTMAxisTraverser#first(int):::By the nature of the stateless traversal, the context node can not be returned or the iteration will go into an infinate loop:::return->next
DTMAxisTraverser#first(int, int):::By the nature of the stateless traversal, the context node can not be returned or the iteration will go into an infinate loop:::return->next
DTMAxisTraverser#next(int, int):::Traverse to the next node after the current node.:::
DTMAxisTraverser#next(int, int, int):::Traverse to the next node after the current node that is matched by the extended type ID.:::
DTMFilter#acceptNode(int, int):::Test whether a specified node is visible in the logical view of a DTMIterator:::
DTMFilter#acceptNode(int, int, int):::Test whether a specified node is visible in the logical view of a DTMIterator:::
DTMIterator#getDTM(int):::Get an instance of a DTM that "owns" a node handle:::
DTMIterator#getDTMManager():::Get an instance of the DTMManager:::
DTMIterator#getRoot():::The root node of the DTMIterator, as specified when it was created:::
DTMIterator#setRoot(int, Object):::Reset the root node of the DTMIterator, overriding the value specified when it was created:::
DTMIterator#reset():::Reset the iterator to the start:::
DTMIterator#getWhatToShow():::This attribute determines which node types are presented via the iterator:::
DTMIterator#getExpandEntityReferences():::The value of this flag determines whether the children of entity reference nodes are visible to the iterator:::
DTMIterator#nextNode():::Returns the next node in the set and advances the position of the iterator in the set:::
DTMIterator#previousNode():::Returns the previous node in the set and moves the position of the DTMIterator backwards in the set.:::
DTMIterator#detach():::Detaches the DTMIterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state:::
DTMIterator#allowDetachToRelease(boolean):::Specify if it's OK for detach to release the iterator for reuse.:::
DTMIterator#getCurrentNode():::Get the current node in the iterator:::
DTMIterator#isFresh():::Tells if this NodeSetDTM is "fresh", in other words, if the first nextNode() that is called will return the first node in the set.:::
DTMIterator#setShouldCacheNodes(boolean):::If setShouldCacheNodes(true) is called, then nodes will be cached, enabling random access, and giving the ability to do sorts and the like:::
DTMIterator#isMutable():::Tells if this iterator can have nodes added to it or set via the setItem(int node, int index) method.:::
DTMIterator#getCurrentPos():::Get the current position within the cached list, which is one less than the next nextNode() call will retrieve:::
DTMIterator#runTo(int):::If an index is requested, NodeSetDTM will call this method to run the iterator to the index:::
DTMIterator#setCurrentPos(int):::Set the current position in the node set.:::
DTMIterator#item(int):::Returns the node handle of an item in the collection:::
DTMIterator#setItem(int, int):::Sets the node at the specified index of this vector to be the specified node:::
DTMIterator#getLength():::The number of nodes in the list:::
DTMIterator#cloneWithReset():::Get a cloned Iterator that is reset to the start of the iteration.:::
DTMIterator#clone():::Get a clone of this iterator, but don't reset the iteration in the process, so that it may be used from the current position.:::
DTMIterator#isDocOrdered():::Returns true if all the nodes in the iteration well be returned in document order.:::
DTMIterator#getAxis():::Returns the axis being iterated, if it is known.:::
DTMManager#getXMLStringFactory():::Get the XMLStringFactory used for the DTMs.:::return
DTMManager#setXMLStringFactory(XMLStringFactory):::Set the XMLStringFactory used for the DTMs.:::
DTMManager#newInstance(XMLStringFactory):::Obtain a new instance of a DTMManager:::factoryImpl->new->com.sun.org.apache.xml.internal.dtm.ref.DTMManagerDefault->factoryImpl->setXMLStringFactory->return
DTMManager#getDTM(javax.xml.transform.Source, boolean, DTMWSFilter, boolean, boolean):::Get an instance of a DTM, loaded with the content from the specified source:::
DTMManager#getDTM(int):::Get the instance of DTM that "owns" a node handle.:::
DTMManager#getDTMHandleFromNode(org.w3c.dom.Node):::Given a W3C DOM node, try and return a DTM handle:::
DTMManager#createDocumentFragment():::Creates a DTM representing an empty DocumentFragment object.:::
DTMManager#release(DTM, boolean):::Release a DTM either to a lru pool, or completely remove reference:::
DTMManager#createDTMIterator(Object, int):::Create a new DTMIterator based on an XPath LocationPath or a UnionExpr.:::
DTMManager#createDTMIterator(String, PrefixResolver):::Create a new DTMIterator based on an XPath LocationPath or a UnionExpr.:::
DTMManager#createDTMIterator(int, DTMFilter, boolean):::Create a new DTMIterator based only on a whatToShow and a DTMFilter:::
DTMManager#createDTMIterator(int):::Create a new DTMIterator that holds exactly one node.:::
DTMManager#getIncremental():::Get a flag indicating whether an incremental transform is desired:::return
DTMManager#setIncremental(boolean):::Set a flag indicating whether an incremental transform is desired This flag should have the same value as the FEATURE_INCREMENTAL feature which is set by the TransformerFactory.setAttribut() method before a DTMManager is created:::
DTMManager#getSource_location():::Get a flag indicating whether the transformation phase should keep track of line and column numbers for the input source document.:::return
DTMManager#setSource_location(boolean):::Set a flag indicating whether the transformation phase should keep track of line and column numbers for the input source document:::
DTMManager#overrideDefaultParser():::Return the state of the services mechanism feature.:::return
DTMManager#setOverrideDefaultParser(boolean):::Set the state of the services mechanism feature.:::
DTMManager#getDTMIdentity(DTM):::%TBD% Doc  NEEDSDOC @param dtm  NEEDSDOC ($objectName$) @return:::
DTMManager#getDTMIdentityMask():::%TBD% Doc  NEEDSDOC ($objectName$) @return:::return
DTMManager#getNodeIdentityMask():::%TBD% Doc  NEEDSDOC ($objectName$) @return:::return
DTMWSFilter#getShouldStripSpace(int, DTM):::Test whether whitespace-only text nodes are visible in the logical view of DTM:::

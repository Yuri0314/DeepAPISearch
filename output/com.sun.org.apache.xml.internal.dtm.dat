com.sun.org.apache.xml.internal.dtm.Axis#isReverse(int)->boolean::: axis is reverse
com.sun.org.apache.xml.internal.dtm.Axis#getNames(int)->String::: axis get names
com.sun.org.apache.xml.internal.dtm.Axis#getNamesLength()->int::: axis get names length
com.sun.org.apache.xml.internal.dtm.DTM#setFeature(String, boolean)->void:::Set an implementation dependent feature
com.sun.org.apache.xml.internal.dtm.DTM#setProperty(String, Object)->void:::Set a run time property for this DTM instance.
com.sun.org.apache.xml.internal.dtm.DTM#getAxisTraverser(int)->DTMAxisTraverser:::This returns a stateless "traverser", that can navigate over an XPath axis, though not in document order.
com.sun.org.apache.xml.internal.dtm.DTM#getAxisIterator(int)->DTMAxisIterator:::This is a shortcut to the iterators that implement XPath axes
com.sun.org.apache.xml.internal.dtm.DTM#getTypedAxisIterator(int, int)->DTMAxisIterator:::Get an iterator that can navigate over an XPath Axis, predicated by the extended type ID.
com.sun.org.apache.xml.internal.dtm.DTM#hasChildNodes(int)->boolean:::Given a node handle, test if it has child nodes
com.sun.org.apache.xml.internal.dtm.DTM#getFirstChild(int)->int:::Given a node handle, get the handle of the node's first child.
com.sun.org.apache.xml.internal.dtm.DTM#getLastChild(int)->int:::Given a node handle, get the handle of the node's last child.
com.sun.org.apache.xml.internal.dtm.DTM#getAttributeNode(int, String, String)->int:::Retrieves an attribute node by local name and namespace URI  %TBD% Note that we currently have no way to support the DOM's old getAttribute() call, which accesses only the qname.
com.sun.org.apache.xml.internal.dtm.DTM#getFirstAttribute(int)->int:::Given a node handle, get the index of the node's first attribute.
com.sun.org.apache.xml.internal.dtm.DTM#getFirstNamespaceNode(int, boolean)->int:::Given a node handle, get the index of the node's first namespace node.
com.sun.org.apache.xml.internal.dtm.DTM#getNextSibling(int)->int:::Given a node handle, advance to its next sibling.
com.sun.org.apache.xml.internal.dtm.DTM#getPreviousSibling(int)->int:::Given a node handle, find its preceeding sibling
com.sun.org.apache.xml.internal.dtm.DTM#getNextAttribute(int)->int:::Given a node handle, advance to the next attribute
com.sun.org.apache.xml.internal.dtm.DTM#getNextNamespaceNode(int, int, boolean)->int:::Given a namespace handle, advance to the next namespace in the same scope (local or local-plus-inherited, as selected by getFirstNamespaceNode)
com.sun.org.apache.xml.internal.dtm.DTM#getParent(int)->int:::Given a node handle, find its parent node.
com.sun.org.apache.xml.internal.dtm.DTM#getDocument()->int:::Given a DTM which contains only a single document, find the Node Handle of the  Document node
com.sun.org.apache.xml.internal.dtm.DTM#getOwnerDocument(int)->int:::Given a node handle, find the owning document node
com.sun.org.apache.xml.internal.dtm.DTM#getDocumentRoot(int)->int:::Given a node handle, find the owning document node.
com.sun.org.apache.xml.internal.dtm.DTM#getStringValue(int)->XMLString:::Get the string-value of a node as a String object (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value).
com.sun.org.apache.xml.internal.dtm.DTM#getStringValueChunkCount(int)->int:::Get number of character array chunks in the string-value of a node
com.sun.org.apache.xml.internal.dtm.DTM#getStringValueChunk(int, int, int[])->char[]:::Get a character array chunk in the string-value of a node
com.sun.org.apache.xml.internal.dtm.DTM#getExpandedTypeID(int)->int:::Given a node handle, return an ID that represents the node's expanded name.
com.sun.org.apache.xml.internal.dtm.DTM#getExpandedTypeID(String, String, int)->int:::Given an expanded name, return an ID
com.sun.org.apache.xml.internal.dtm.DTM#getLocalNameFromExpandedNameID(int)->String:::Given an expanded-name ID, return the local name part.
com.sun.org.apache.xml.internal.dtm.DTM#getNamespaceFromExpandedNameID(int)->String:::Given an expanded-name ID, return the namespace URI part.
com.sun.org.apache.xml.internal.dtm.DTM#getNodeName(int)->String:::Given a node handle, return its DOM-style node name
com.sun.org.apache.xml.internal.dtm.DTM#getNodeNameX(int)->String:::Given a node handle, return the XPath node name
com.sun.org.apache.xml.internal.dtm.DTM#getLocalName(int)->String:::Given a node handle, return its DOM-style localname
com.sun.org.apache.xml.internal.dtm.DTM#getPrefix(int)->String:::Given a namespace handle, return the prefix that the namespace decl is mapping
com.sun.org.apache.xml.internal.dtm.DTM#getNamespaceURI(int)->String:::Given a node handle, return its DOM-style namespace URI (As defined in Namespaces, this is the declared URI which this node's prefix -- or default in lieu thereof -- was mapped to.)
com.sun.org.apache.xml.internal.dtm.DTM#getNodeValue(int)->String:::Given a node handle, return its node value
com.sun.org.apache.xml.internal.dtm.DTM#getNodeType(int)->short:::Given a node handle, return its DOM-style node type
com.sun.org.apache.xml.internal.dtm.DTM#getLevel(int)->short:::Get the depth level of this node in the tree (equals 1 for a parentless node).
com.sun.org.apache.xml.internal.dtm.DTM#isSupported(String, String)->boolean:::Tests whether DTM DOM implementation implements a specific feature and that feature is supported by this node.
com.sun.org.apache.xml.internal.dtm.DTM#getDocumentBaseURI()->String:::Return the base URI of the document entity
com.sun.org.apache.xml.internal.dtm.DTM#setDocumentBaseURI(String)->void:::Set the base URI of the document entity.
com.sun.org.apache.xml.internal.dtm.DTM#getDocumentSystemIdentifier(int)->String:::Return the system identifier of the document entity
com.sun.org.apache.xml.internal.dtm.DTM#getDocumentEncoding(int)->String:::Return the name of the character encoding scheme        in which the document entity is expressed.
com.sun.org.apache.xml.internal.dtm.DTM#getDocumentStandalone(int)->String:::Return an indication of the standalone status of the document,        either "yes" or "no"
com.sun.org.apache.xml.internal.dtm.DTM#getDocumentVersion(int)->String:::Return a string representing the XML version of the document
com.sun.org.apache.xml.internal.dtm.DTM#getDocumentAllDeclarationsProcessed()->boolean:::Return an indication of whether the processor has read the complete DTD
com.sun.org.apache.xml.internal.dtm.DTM#getDocumentTypeDeclarationSystemIdentifier()->String:::  A document type declaration information item has the following properties:      1
com.sun.org.apache.xml.internal.dtm.DTM#getDocumentTypeDeclarationPublicIdentifier()->String:::Return the public identifier of the external subset, normalized as described in 4.2.2 External Entities [XML]
com.sun.org.apache.xml.internal.dtm.DTM#getElementById(String)->int:::Returns the Element whose ID is given by elementId
com.sun.org.apache.xml.internal.dtm.DTM#getUnparsedEntityURI(String)->String:::The getUnparsedEntityURI function returns the URI of the unparsed entity with the specified name in the same document as the context node (see [3.3 Unparsed Entities])
com.sun.org.apache.xml.internal.dtm.DTM#supportsPreStripping()->boolean:::Return true if the xsl:strip-space or xsl:preserve-space was processed during construction of the document contained in this DTM
com.sun.org.apache.xml.internal.dtm.DTM#isNodeAfter(int, int)->boolean:::Figure out whether nodeHandle2 should be considered as being later in the document than nodeHandle1, in Document Order as defined by the XPath model
com.sun.org.apache.xml.internal.dtm.DTM#isCharacterElementContentWhitespace(int)->boolean:::2
com.sun.org.apache.xml.internal.dtm.DTM#isDocumentAllDeclarationsProcessed(int)->boolean:::   10
com.sun.org.apache.xml.internal.dtm.DTM#isAttributeSpecified(int)->boolean:::    5
com.sun.org.apache.xml.internal.dtm.DTM#dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean)->void:::Directly call the characters method on the passed ContentHandler for the string-value of the given node (see http://www.w3.org/TR/xpath#data-model for the definition of a node's string-value)
com.sun.org.apache.xml.internal.dtm.DTM#dispatchToEvents(int, org.xml.sax.ContentHandler)->void:::Directly create SAX parser events representing the XML content of a DTM subtree
com.sun.org.apache.xml.internal.dtm.DTM#getNode(int)->org.w3c.dom.Node:::Return an DOM node for the given node.
com.sun.org.apache.xml.internal.dtm.DTM#needsTwoThreads()->boolean::: m needs two threads
com.sun.org.apache.xml.internal.dtm.DTM#getContentHandler()->org.xml.sax.ContentHandler:::Return this DTM's content handler, if it has one.
com.sun.org.apache.xml.internal.dtm.DTM#getLexicalHandler()->org.xml.sax.ext.LexicalHandler:::Return this DTM's lexical handler, if it has one
com.sun.org.apache.xml.internal.dtm.DTM#getEntityResolver()->org.xml.sax.EntityResolver:::Return this DTM's EntityResolver, if it has one.
com.sun.org.apache.xml.internal.dtm.DTM#getDTDHandler()->org.xml.sax.DTDHandler:::Return this DTM's DTDHandler, if it has one.
com.sun.org.apache.xml.internal.dtm.DTM#getErrorHandler()->org.xml.sax.ErrorHandler:::Return this DTM's ErrorHandler, if it has one.
com.sun.org.apache.xml.internal.dtm.DTM#getDeclHandler()->org.xml.sax.ext.DeclHandler:::Return this DTM's DeclHandler, if it has one.
com.sun.org.apache.xml.internal.dtm.DTM#appendChild(int, boolean, boolean)->void:::Append a child to "the end of the document"
com.sun.org.apache.xml.internal.dtm.DTM#appendTextChild(String)->void:::Append a text node child that will be constructed from a string, to the end of the document
com.sun.org.apache.xml.internal.dtm.DTM#getSourceLocatorFor(int)->SourceLocator:::Get the location of a node in the source document.
com.sun.org.apache.xml.internal.dtm.DTM#documentRegistration()->void:::As the DTM is registered with the DTMManager, this method will be called
com.sun.org.apache.xml.internal.dtm.DTM#documentRelease()->void::: m document release
com.sun.org.apache.xml.internal.dtm.DTM#migrateTo(DTMManager)->void:::Migrate a DTM built with an old DTMManager to a new DTMManager
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#next()->int:::Get the next node in the iteration.
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#reset()->DTMAxisIterator:::Resets the iterator to the last start node.
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#getLast()->int::: axis iterator get last
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#getPosition()->int::: axis iterator get position
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#setMark()->void:::Remembers the current node for the next call to gotoMark().
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#gotoMark()->void:::Restores the current node remembered by setMark().
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#setStartNode(int)->DTMAxisIterator:::Set start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#getStartNode()->int:::Get start to END should 'close' the iterator, i.e
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#isReverse()->boolean::: axis iterator is reverse
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#cloneIterator()->DTMAxisIterator::: axis iterator clone iterator
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#setRestartable(boolean)->void:::Set if restartable.
com.sun.org.apache.xml.internal.dtm.DTMAxisIterator#getNodeByPosition(int)->int:::Return the node at the given position.
com.sun.org.apache.xml.internal.dtm.DTMAxisTraverser#first(int)->int:::By the nature of the stateless traversal, the context node can not be returned or the iteration will go into an infinate loop
com.sun.org.apache.xml.internal.dtm.DTMAxisTraverser#first(int, int)->int:::By the nature of the stateless traversal, the context node can not be returned or the iteration will go into an infinate loop
com.sun.org.apache.xml.internal.dtm.DTMAxisTraverser#next(int, int)->int:::Traverse to the next node after the current node.
com.sun.org.apache.xml.internal.dtm.DTMAxisTraverser#next(int, int, int)->int:::Traverse to the next node after the current node that is matched by the extended type ID.
com.sun.org.apache.xml.internal.dtm.DTMFilter#acceptNode(int, int)->short:::Test whether a specified node is visible in the logical view of a DTMIterator
com.sun.org.apache.xml.internal.dtm.DTMFilter#acceptNode(int, int, int)->short:::Test whether a specified node is visible in the logical view of a DTMIterator
com.sun.org.apache.xml.internal.dtm.DTMIterator#getDTM(int)->DTM:::Get an instance of a DTM that "owns" a node handle
com.sun.org.apache.xml.internal.dtm.DTMIterator#getDTMManager()->DTMManager:::Get an instance of the DTMManager
com.sun.org.apache.xml.internal.dtm.DTMIterator#getRoot()->int:::The root node of the DTMIterator, as specified when it was created
com.sun.org.apache.xml.internal.dtm.DTMIterator#setRoot(int, Object)->void:::Reset the root node of the DTMIterator, overriding the value specified when it was created
com.sun.org.apache.xml.internal.dtm.DTMIterator#reset()->void:::Reset the iterator to the start
com.sun.org.apache.xml.internal.dtm.DTMIterator#getWhatToShow()->int:::This attribute determines which node types are presented via the iterator
com.sun.org.apache.xml.internal.dtm.DTMIterator#getExpandEntityReferences()->boolean:::The value of this flag determines whether the children of entity reference nodes are visible to the iterator
com.sun.org.apache.xml.internal.dtm.DTMIterator#nextNode()->int:::Returns the next node in the set and advances the position of the iterator in the set
com.sun.org.apache.xml.internal.dtm.DTMIterator#previousNode()->int:::Returns the previous node in the set and moves the position of the DTMIterator backwards in the set.
com.sun.org.apache.xml.internal.dtm.DTMIterator#detach()->void:::Detaches the DTMIterator from the set which it iterated over, releasing any computational resources and placing the iterator in the INVALID state
com.sun.org.apache.xml.internal.dtm.DTMIterator#allowDetachToRelease(boolean)->void:::Specify if it's OK for detach to release the iterator for reuse.
com.sun.org.apache.xml.internal.dtm.DTMIterator#getCurrentNode()->int:::Get the current node in the iterator
com.sun.org.apache.xml.internal.dtm.DTMIterator#isFresh()->boolean:::Tells if this NodeSetDTM is "fresh", in other words, if the first nextNode() that is called will return the first node in the set.
com.sun.org.apache.xml.internal.dtm.DTMIterator#setShouldCacheNodes(boolean)->void:::If setShouldCacheNodes(true) is called, then nodes will be cached, enabling random access, and giving the ability to do sorts and the like
com.sun.org.apache.xml.internal.dtm.DTMIterator#isMutable()->boolean:::Tells if this iterator can have nodes added to it or set via the setItem(int node, int index) method.
com.sun.org.apache.xml.internal.dtm.DTMIterator#getCurrentPos()->int:::Get the current position within the cached list, which is one less than the next nextNode() call will retrieve
com.sun.org.apache.xml.internal.dtm.DTMIterator#runTo(int)->void:::If an index is requested, NodeSetDTM will call this method to run the iterator to the index
com.sun.org.apache.xml.internal.dtm.DTMIterator#setCurrentPos(int)->void:::Set the current position in the node set.
com.sun.org.apache.xml.internal.dtm.DTMIterator#item(int)->int:::Returns the node handle of an item in the collection
com.sun.org.apache.xml.internal.dtm.DTMIterator#setItem(int, int)->void:::Sets the node at the specified index of this vector to be the specified node
com.sun.org.apache.xml.internal.dtm.DTMIterator#getLength()->int:::The number of nodes in the list
com.sun.org.apache.xml.internal.dtm.DTMIterator#cloneWithReset()->DTMIterator:::Get a cloned Iterator that is reset to the start of the iteration.
com.sun.org.apache.xml.internal.dtm.DTMIterator#clone()->Object:::Get a clone of this iterator, but don't reset the iteration in the process, so that it may be used from the current position.
com.sun.org.apache.xml.internal.dtm.DTMIterator#isDocOrdered()->boolean:::Returns true if all the nodes in the iteration well be returned in document order.
com.sun.org.apache.xml.internal.dtm.DTMIterator#getAxis()->int:::Returns the axis being iterated, if it is known.
com.sun.org.apache.xml.internal.dtm.DTMManager#getXMLStringFactory()->XMLStringFactory:::Get the XMLStringFactory used for the DTMs.
com.sun.org.apache.xml.internal.dtm.DTMManager#setXMLStringFactory(XMLStringFactory)->void:::Set the XMLStringFactory used for the DTMs.
com.sun.org.apache.xml.internal.dtm.DTMManager#newInstance(XMLStringFactory)->DTMManager:::Obtain a new instance of a DTMManager
com.sun.org.apache.xml.internal.dtm.DTMManager#getDTM(javax.xml.transform.Source, boolean, DTMWSFilter, boolean, boolean)->DTM:::Get an instance of a DTM, loaded with the content from the specified source
com.sun.org.apache.xml.internal.dtm.DTMManager#getDTM(int)->DTM:::Get the instance of DTM that "owns" a node handle.
com.sun.org.apache.xml.internal.dtm.DTMManager#getDTMHandleFromNode(org.w3c.dom.Node)->int:::Given a W3C DOM node, try and return a DTM handle
com.sun.org.apache.xml.internal.dtm.DTMManager#createDocumentFragment()->DTM:::Creates a DTM representing an empty DocumentFragment object.
com.sun.org.apache.xml.internal.dtm.DTMManager#release(DTM, boolean)->boolean:::Release a DTM either to a lru pool, or completely remove reference
com.sun.org.apache.xml.internal.dtm.DTMManager#createDTMIterator(Object, int)->DTMIterator:::Create a new DTMIterator based on an XPath LocationPath or a UnionExpr.
com.sun.org.apache.xml.internal.dtm.DTMManager#createDTMIterator(String, PrefixResolver)->DTMIterator:::Create a new DTMIterator based on an XPath LocationPath or a UnionExpr.
com.sun.org.apache.xml.internal.dtm.DTMManager#createDTMIterator(int, DTMFilter, boolean)->DTMIterator:::Create a new DTMIterator based only on a whatToShow and a DTMFilter
com.sun.org.apache.xml.internal.dtm.DTMManager#createDTMIterator(int)->DTMIterator:::Create a new DTMIterator that holds exactly one node.
com.sun.org.apache.xml.internal.dtm.DTMManager#getIncremental()->boolean:::Get a flag indicating whether an incremental transform is desired
com.sun.org.apache.xml.internal.dtm.DTMManager#setIncremental(boolean)->void:::Set a flag indicating whether an incremental transform is desired This flag should have the same value as the FEATURE_INCREMENTAL feature which is set by the TransformerFactory.setAttribut() method before a DTMManager is created
com.sun.org.apache.xml.internal.dtm.DTMManager#getSource_location()->boolean:::Get a flag indicating whether the transformation phase should keep track of line and column numbers for the input source document.
com.sun.org.apache.xml.internal.dtm.DTMManager#setSource_location(boolean)->void:::Set a flag indicating whether the transformation phase should keep track of line and column numbers for the input source document
com.sun.org.apache.xml.internal.dtm.DTMManager#overrideDefaultParser()->boolean:::Return the state of the services mechanism feature.
com.sun.org.apache.xml.internal.dtm.DTMManager#setOverrideDefaultParser(boolean)->void:::Set the state of the services mechanism feature.
com.sun.org.apache.xml.internal.dtm.DTMManager#getDTMIdentity(DTM)->int:::%TBD% Doc  NEEDSDOC @param dtm  NEEDSDOC ($objectName$) @return
com.sun.org.apache.xml.internal.dtm.DTMManager#getDTMIdentityMask()->int:::%TBD% Doc  NEEDSDOC ($objectName$) @return
com.sun.org.apache.xml.internal.dtm.DTMManager#getNodeIdentityMask()->int:::%TBD% Doc  NEEDSDOC ($objectName$) @return
com.sun.org.apache.xml.internal.dtm.DTMWSFilter#getShouldStripSpace(int, DTM)->short:::Test whether whitespace-only text nodes are visible in the logical view of DTM

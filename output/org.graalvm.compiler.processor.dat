AbstractProcessor#env():::Gets the processing environment available to this processor.:::return
AbstractProcessor#process(Set, RoundEnvironment)::: abstract processor process:::types->clear->return->doProcess
AbstractProcessor#doProcess(Set, RoundEnvironment)::: abstract processor do process:::
AbstractProcessor#getType(String):::Gets the TypeMirror for a given class name.:::return->getTypeElement->asType
AbstractProcessor#getTypeOrNull(String):::Gets the TypeMirror for a given class name.:::element->getTypeElementOrNull->if->return->return->element->asType
AbstractProcessor#getTypeElement(String):::Gets the TypeElement for a given class name.:::type->getTypeElementOrNull->if->throw->new->NoClassDefFoundError->return
AbstractProcessor#getTypeElementOrNull(String):::Gets the TypeElement for a given class name.:::type->types->get->if->processingEnv->getElementUtils->getTypeElement->if->return->types->put->return
AbstractProcessor#asTypeElement(TypeMirror):::Converts a given TypeMirror to a TypeElement.:::element->processingEnv->getTypeUtils->asElement->if->throw->getName->new->ClassCastException->return
AbstractProcessor#getSimpleName(String):::Gets the non-package component of a qualified class name.:::m->QUALIFIED_CLASS_NAME_RE->matcher->if->m->matches->return->m->group->throw->new->IllegalArgumentException
AbstractProcessor#getPackageName(String):::Gets the package component of a qualified class name.:::simpleName->getSimpleName->return->className->className->length->simpleName->length->substring
AbstractProcessor#getAnnotation(Element, TypeMirror):::Gets the annotation of type annotationType directly present on element.:::mirrors->getAnnotations->return->mirrors->isEmpty->mirrors->get
AbstractProcessor#getAnnotations(Element, TypeMirror):::Gets all annotations directly present on element.:::result->new->ArrayList<>->foreach->element->getAnnotationMirrors->if->processingEnv->getTypeUtils->mirror->getAnnotationType->isSameType->result->add->return
AbstractProcessor#getAnnotationValue(AnnotationMirror, String, Class):::Gets the value of the name element of annotation and converts it to a value of type type.:::valueMethod->foreach->ElementFilter->annotation->getAnnotationType->asElement->getEnclosedElements->methodsIn->if->method->getSimpleName->toString->equals->break->if->return->value->annotation->getElementValues->get->if->valueMethod->getDefaultValue->return->type->value->getValue->cast
AbstractProcessor#getAnnotationValueList(AnnotationMirror, String, Class):::Gets the value of the name array-typed element of annotation and converts it to list of values of type type.:::values->getAnnotationValue->result->new->ArrayList<>->if->foreach->result->componentType->value->getValue->cast->add->return
AbstractProcessor#createProviderFile(String, String, Element...):::Creates a META-INF/providers/<providerClassName> file whose contents are a single line containing serviceClassName.:::filename->try->file->processingEnv->getFiler->createResource->writer->file->openOutputStream->new->OutputStreamWriter->new->PrintWriter->writer->println->writer->close->catch->processingEnv->getMessager->isBug367599->e->getMessage->printMessage->finally
AbstractProcessor#isBug367599(Throwable):::Determines if a given exception is (most likely) caused by Bug 367599.:::if->foreach->t->getStackTrace->if->ste->toString->contains->return->return->t->getCause->t->getCause->isBug367599

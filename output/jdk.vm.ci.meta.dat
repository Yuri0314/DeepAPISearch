AbstractJavaProfile#totalProbablility()::: abstract java profile total probablility:::total->foreach->return
AbstractJavaProfile#isSorted():::Determines if an array of profiled items are sorted in descending order of their probabilities.:::for->i->return
AbstractJavaProfile#getNotRecordedProbability():::Returns the estimated probability of all types that could not be recorded due to profiling limitations.:::return
AbstractJavaProfile#getItems()::: abstract java profile get items:::return
AbstractJavaProfile#findEntry(ResolvedJavaType):::Searches for an entry of a given resolved Java type.:::if->foreach->if->pt->getItem->equals->return->return
AbstractJavaProfile#toString()::: abstract java profile to string:::builder->new->StringBuilder->builder->this->getClass->getName->append->builder->append->if->foreach->builder->pt->toString->append->builder->append->builder->append->builder->append->return->builder->toString
AbstractJavaProfile#isIncluded(U)::: abstract java profile is included:::if->this->getNotRecordedProbability->return->else->for->i->getItems->return
AbstractJavaProfile#equals(Object)::: abstract java profile equals:::if->return->if->return->that->if->return->if->return->for->i->return
AbstractJavaProfile#hashCode()::: abstract java profile hash code:::return->Double->doubleToLongBits
AbstractProfiledItem#getItem()::: abstract profiled item get item:::return
AbstractProfiledItem#getProbability():::Returns the estimated probability of #getItem().:::return
AbstractProfiledItem#compareTo(AbstractProfiledItem):::Returns -1 if the #getProbability() probability of this item is greater than o's probability, 0 if there are equal otherwise 1.:::return->Double->o->getProbability->getProbability->compare
AbstractProfiledItem#hashCode()::: abstract profiled item hash code:::prime->result->temp->Double->doubleToLongBits->item->hashCode->return
AbstractProfiledItem#equals(Object)::: abstract profiled item equals:::if->return->if->return->if->getClass->obj->getClass->return->other->if->Double->doubleToLongBits->Double->doubleToLongBits->return->return->item->equals
AbstractProfiledItem#toString()::: abstract profiled item to string:::
Assumptions.AssumptionResult#getResult()::: assumption result get result:::return
Assumptions.AssumptionResult#isAssumptionFree()::: assumption result is assumption free:::return
Assumptions.AssumptionResult#add(AssumptionResult)::: assumption result add:::newAssumptions->Arrays->copyOf->System->arraycopy
Assumptions.AssumptionResult#canRecordTo(Assumptions)::: assumption result can record to:::return
Assumptions.AssumptionResult#recordTo(Assumptions)::: assumption result record to:::if->foreach->target->record
Assumptions.NoFinalizableSubclass#hashCode()::: no finalizable subclass hash code:::return->receiverType->hashCode
Assumptions.NoFinalizableSubclass#equals(Object)::: no finalizable subclass equals:::if->other->return->equals->return
Assumptions.NoFinalizableSubclass#toString()::: no finalizable subclass to string:::return->receiverType->toJavaName
Assumptions.ConcreteSubtype#hashCode()::: concrete subtype hash code:::prime->result->context->hashCode->subtype->hashCode->return
Assumptions.ConcreteSubtype#equals(Object)::: concrete subtype equals:::if->other->return->equals->equals->return
Assumptions.ConcreteSubtype#toString()::: concrete subtype to string:::return->context->toJavaName->subtype->toJavaName
Assumptions.LeafType#hashCode()::: leaf type hash code:::prime->result->context->hashCode->return
Assumptions.LeafType#equals(Object)::: leaf type equals:::if->other->return->equals->return
Assumptions.LeafType#toString()::: leaf type to string:::return->context->toJavaName
Assumptions.ConcreteMethod#hashCode()::: concrete method hash code:::prime->result->method->hashCode->context->hashCode->impl->hashCode->return
Assumptions.ConcreteMethod#equals(Object)::: concrete method equals:::if->other->return->equals->equals->equals->return
Assumptions.ConcreteMethod#toString()::: concrete method to string:::return->method->format->context->toJavaName->impl->format
Assumptions.CallSiteTargetValue#hashCode()::: call site target value hash code:::prime->result->callSite->hashCode->methodHandle->hashCode->return
Assumptions.CallSiteTargetValue#equals(Object)::: call site target value equals:::if->other->return->callSite->equals->methodHandle->equals->return
Assumptions.CallSiteTargetValue#toString()::: call site target value to string:::return
Assumptions#isEmpty():::Returns whether any assumptions have been registered.:::return->assumptions->isEmpty
Assumptions#hashCode()::: assumptions hash code:::throw->new->UnsupportedOperationException
Assumptions#equals(Object)::: assumptions equals:::if->return->if->that->if->equals->return->return->return
Assumptions#iterator()::: assumptions iterator:::return->assumptions->iterator
Assumptions#recordNoFinalizableSubclassAssumption(ResolvedJavaType):::Records an assumption that the specified type has no finalizable subclasses.:::new->NoFinalizableSubclass->record
Assumptions#recordConcreteSubtype(ResolvedJavaType, ResolvedJavaType):::Records that subtype is the only concrete subtype in the class hierarchy below context.:::new->ConcreteSubtype->record
Assumptions#recordConcreteMethod(ResolvedJavaMethod, ResolvedJavaType, ResolvedJavaMethod):::Records that impl is the only possible concrete target for a virtual call to method with a receiver of type context.:::new->ConcreteMethod->record
Assumptions#record(Assumption)::: assumptions record:::assumptions->add
Assumptions#toArray():::Gets a copy of the assumptions recorded in this object as an array.:::return->assumptions->assumptions->size->new->AssumptionArr->toArray
Assumptions#record(Assumptions):::Copies assumptions recorded by another Assumptions object into this object.:::assumptions->addAll
Assumptions#toString()::: assumptions to string:::return
Constant#isDefaultForKind()::: constant is default for kind:::
Constant#toValueString()::: constant to value string:::
ConstantPool#length():::Returns the number of entries the constant pool.:::
ConstantPool#loadReferencedType(int, int):::Ensures that the type referenced by the specified constant pool entry is loaded and initialized:::
ConstantPool#lookupField(int, ResolvedJavaMethod, int):::Looks up a reference to a field:::
ConstantPool#lookupMethod(int, int):::Looks up a reference to a method:::
ConstantPool#lookupType(int, int):::Looks up a reference to a type:::
ConstantPool#lookupUtf8(int):::Looks up an Utf8 string.:::
ConstantPool#lookupSignature(int):::Looks up a method signature.:::
ConstantPool#lookupConstant(int):::Looks up a constant at the specified index.:::
ConstantPool#lookupAppendix(int, int):::Looks up the appendix at the specified index.:::
ConstantReflectionProvider#constantEquals(Constant, Constant):::Compares two constants for equality:::
ConstantReflectionProvider#readArrayLength(JavaConstant):::Returns the length of the array constant:::
ConstantReflectionProvider#readArrayElement(JavaConstant, int):::Reads a value from the given array at the given index:::
ConstantReflectionProvider#readFieldValue(ResolvedJavaField, JavaConstant):::Gets the current value of this field for a given object, if available:::
ConstantReflectionProvider#boxPrimitive(JavaConstant):::Converts the given JavaKind#isPrimitive() primitive constant to a boxed JavaKind#Object object constant, according to the Java boxing rules:::
ConstantReflectionProvider#unboxPrimitive(JavaConstant):::Converts the given JavaKind#Object object constant to a JavaKind#isPrimitive() primitive constant, according to the Java unboxing rules:::
ConstantReflectionProvider#forString(String):::Gets a string as a JavaConstant.:::
ConstantReflectionProvider#asJavaType(Constant):::Returns the ResolvedJavaType for a Class object (or any other object regarded as a class by the VM) encapsulated in the given constant:::
ConstantReflectionProvider#getMethodHandleAccess():::Gets access to the internals of MethodHandle.:::
ConstantReflectionProvider#getMemoryAccessProvider():::Gets raw memory access.:::
ConstantReflectionProvider#asJavaClass(ResolvedJavaType):::Gets the runtime representation of the Class object of this type.:::
ConstantReflectionProvider#asObjectHub(ResolvedJavaType):::Gets the runtime representation of the "hub" of this type--that is, the closest part of the type representation which is typically stored in the object header.:::
DefaultProfilingInfo#getCodeSize()::: default profiling info get code size:::return
DefaultProfilingInfo#getTypeProfile(int)::: default profiling info get type profile:::return
DefaultProfilingInfo#getMethodProfile(int)::: default profiling info get method profile:::return
DefaultProfilingInfo#getBranchTakenProbability(int)::: default profiling info get branch taken probability:::return
DefaultProfilingInfo#getSwitchProbabilities(int)::: default profiling info get switch probabilities:::return
DefaultProfilingInfo#getExceptionSeen(int)::: default profiling info get exception seen:::return
DefaultProfilingInfo#getNullSeen(int)::: default profiling info get null seen:::return
DefaultProfilingInfo#getExecutionCount(int)::: default profiling info get execution count:::return
DefaultProfilingInfo#get(TriState)::: default profiling info get:::return->exceptionSeen->ordinal
DefaultProfilingInfo#getDeoptimizationCount(DeoptimizationReason)::: default profiling info get deoptimization count:::return
DefaultProfilingInfo#isMature()::: default profiling info is mature:::return
DefaultProfilingInfo#toString()::: default profiling info to string:::return->this->toString
DefaultProfilingInfo#setMature()::: default profiling info set mature:::
DefaultProfilingInfo#setCompilerIRSize(Class, int)::: default profiling info set compiler size:::return
DefaultProfilingInfo#getCompilerIRSize(Class)::: default profiling info get compiler size:::return
EncodedSpeculationReason#equals(Object)::: encoded speculation reason equals:::if->if->that->return->Arrays->equals->return->return
EncodedSpeculationReason#encode(Supplier)::: encoded speculation reason encode:::if->encodingSupplier->get->encoding->addInt->foreach->if->encoding->addInt->else->addNonNullObject->return
EncodedSpeculationReason#addNonNullObject(SpeculationLog.SpeculationReasonEncoding, Object)::: encoded speculation reason add non null object:::c->o->getClass->if->encoding->addString->else->if->encoding->addByte->else->if->encoding->addShort->else->if->encoding->addShort->else->if->encoding->addInt->else->if->encoding->addLong->else->if->encoding->Float->floatToRawIntBits->addInt->else->if->encoding->Double->doubleToRawLongBits->addLong->else->if->encoding->ordinal->addInt->else->if->encoding->addMethod->else->if->encoding->addType->else->if->encoding->addField->else->throw->c->getName->new->IllegalArgumentException
EncodedSpeculationReason#hashCode()::: encoded speculation reason hash code:::return->Arrays->hashCode
EncodedSpeculationReason#toString()::: encoded speculation reason to string:::return->String->Arrays->toString->format
ExceptionHandler#getStartBCI():::Returns the start bytecode index of the protected range of this handler.:::return
ExceptionHandler#getEndBCI():::Returns the end bytecode index of the protected range of this handler.:::return
ExceptionHandler#getHandlerBCI():::Returns the bytecode index of the handler block of this handler.:::return
ExceptionHandler#catchTypeCPI():::Returns the index into the constant pool representing the type of exception caught by this handler.:::return
ExceptionHandler#isCatchAll():::Checks whether this handler catches all exceptions.:::return
ExceptionHandler#getCatchType():::Returns the type of exception caught by this exception handler.:::return
ExceptionHandler#equals(Object)::: exception handler equals:::if->return->that->if->return->return->Objects->equals
ExceptionHandler#toString()::: exception handler to string:::return
ExceptionHandler#hashCode()::: exception handler hash code:::return
JavaConstant#getJavaKind():::Returns the Java kind of this constant.:::
JavaConstant#isNull():::Checks whether this constant is null.:::
JavaConstant#isNull(Constant)::: java constant is null:::if->return->isNull->else->return
JavaConstant#isNonNull():::Checks whether this constant is non-null.:::return->isNull
JavaConstant#isDefaultForKind():::Checks whether this constant is the default value for its kind (null, 0, 0.0, false).:::
JavaConstant#asBoxedPrimitive():::Returns the value of this constant as a boxed Java value.:::
JavaConstant#asInt():::Returns the primitive int value this constant represents:::
JavaConstant#asBoolean():::Returns the primitive boolean value this constant represents:::
JavaConstant#asLong():::Returns the primitive long value this constant represents:::
JavaConstant#asFloat():::Returns the primitive float value this constant represents:::
JavaConstant#asDouble():::Returns the primitive double value this constant represents:::
JavaConstant#toValueString()::: java constant to value string:::if->getJavaKind->return->else->return->getJavaKind->asBoxedPrimitive->format
JavaConstant#toString(JavaConstant)::: java constant to string:::if->constant->getJavaKind->return->else->return->constant->getJavaKind->getJavaName->constant->toValueString
JavaConstant#forDouble(double):::Creates a boxed double constant.:::if->Double->compare->return->if->Double->compare->return->return->Double->doubleToRawLongBits->new->PrimitiveConstant
JavaConstant#forFloat(float):::Creates a boxed float constant.:::if->Float->compare->return->if->Float->compare->return->return->Float->floatToRawIntBits->new->PrimitiveConstant
JavaConstant#forLong(long):::Creates a boxed long constant.:::if->return->else->if->return->else->return->new->PrimitiveConstant
JavaConstant#forInt(int):::Creates a boxed integer constant.:::switch->return->return->return->return->return->new->PrimitiveConstant
JavaConstant#forByte(byte):::Creates a boxed byte constant.:::return->new->PrimitiveConstant
JavaConstant#forBoolean(boolean):::Creates a boxed boolean constant.:::return
JavaConstant#forChar(char):::Creates a boxed char constant.:::return->new->PrimitiveConstant
JavaConstant#forShort(short):::Creates a boxed short constant.:::return->new->PrimitiveConstant
JavaConstant#forIntegerKind(JavaKind, long):::Creates a JavaConstant from a primitive integer of a certain kind.:::switch->return->forBoolean->return->forByte->return->forShort->return->forChar->return->forInt->return->forLong->throw->new->IllegalArgumentException
JavaConstant#forPrimitiveInt(int, long):::Creates a JavaConstant from a primitive integer of a certain width.:::switch->return->forBoolean->return->forByte->return->forShort->return->forInt->return->forLong->throw->new->IllegalArgumentException
JavaConstant#forBoxedPrimitive(Object):::Creates a boxed constant for the given boxed primitive value.:::if->return->forBoolean->else->if->return->forByte->else->if->return->forChar->else->if->return->forShort->else->if->return->forInt->else->if->return->forLong->else->if->return->forFloat->else->if->return->forDouble->else->return
JavaConstant#forIllegal()::: java constant for illegal:::return->new->PrimitiveConstant
JavaConstant#defaultForKind(JavaKind):::Returns a constant with the default value for the given kind.:::switch->return->return->forByte->return->forChar->return->forShort->return->return->return->return->return->throw->kind->toString->new->IllegalArgumentException
JavaField#getName():::Returns the name of this field.:::
JavaField#getType():::Returns a JavaType object that identifies the declared type for this field.:::
JavaField#getJavaKind():::Returns the kind of this field:::return->getType->getJavaKind
JavaField#getDeclaringClass():::Returns the JavaType object representing the class or interface that declares this field.:::
JavaField#format(String):::Gets a string for this field formatted according to a given format specification:::sb->new->StringBuilder->index->type->getType->while->format->length->ch->format->charAt->if->if->format->length->throw->new->UnknownFormatConversionException->specifier->format->charAt->switch->sb->type->toJavaName->append->break->sb->getDeclaringClass->toJavaName->append->break->sb->getName->append->break->sb->isStatic->append->break->sb->append->break->throw->String->valueOf->new->UnknownFormatConversionException->else->sb->append->return->sb->toString
JavaMethod#getName():::Returns the name of this method.:::
JavaMethod#getDeclaringClass():::Returns the JavaType object representing the class or interface that declares this method.:::
JavaMethod#getSignature():::Returns the signature of this method.:::
JavaMethod#format(String):::Gets a string for this method formatted according to a given format specification:::sb->new->StringBuilder->index->sig->while->format->length->ch->format->charAt->if->if->format->length->throw->new->UnknownFormatConversionException->specifier->format->charAt->switch->if->getSignature->sb->sig->getReturnType->toJavaName->append->break->sb->getDeclaringClass->toJavaName->append->break->sb->getName->append->break->if->getSignature->for->i->sig->getParameterCount->break->sb->isStatic->append->break->sb->append->break->throw->String->valueOf->new->UnknownFormatConversionException->else->sb->append->return->sb->toString
JavaMethodProfile#getMethods()::: java method profile get methods:::return->super->getItems
JavaMethodProfile.ProfiledMethod#getMethod():::Returns the type for this profile entry.:::return->getItem
JavaMethodProfile.ProfiledMethod#toString()::: profiled method to string:::return->item->getName
JavaType#getName():::Returns the name of this type in internal form:::
JavaType#getUnqualifiedName():::Returns an unqualified name of this type:::name->getName->if->name->indexOf->name->name->lastIndexOf->substring->if->name->endsWith->name->name->length->substring->return
JavaType#isArray():::Checks whether this type is an array class.:::return->getComponentType
JavaType#getComponentType():::For array types, gets the type of the components, or null if this is not an array type:::
JavaType#getElementalType():::Gets the elemental type for this given type:::t->while->t->getComponentType->t->getComponentType->return
JavaType#getArrayClass():::Gets the array class type representing an array with elements of this type.:::
JavaType#getJavaKind():::Gets the JavaKind of this type.:::
JavaType#resolve(ResolvedJavaType):::Resolves this type to a ResolvedJavaType.:::
JavaType#toJavaName():::Gets the Java programming language name for this type:::return->getName->internalNameToJava
JavaType#toJavaName(boolean):::Gets the Java programming language name for this type:::kind->getJavaKind->if->return->getName->internalNameToJava->return->getJavaKind->getJavaName
JavaType#toClassName():::Returns this type's name in the same format as Class#getName().:::return->getName->internalNameToJava
JavaTypeProfile#getNullSeen():::Returns whether a null value was at the type check.:::return
JavaTypeProfile#getTypes():::A list of types for which the runtime has recorded probability information:::return->getItems
JavaTypeProfile#restrict(JavaTypeProfile)::: java type profile restrict:::if->otherProfile->getNotRecordedProbability->return->if->this->getNotRecordedProbability->return->result->new->ArrayList<>->for->i->getItems->newNullSeen->otherProfile->getNullSeen->getNullSeen->newNotRecorded->getNotRecordedProbability->return->createAdjustedProfile
JavaTypeProfile#restrict(ResolvedJavaType, boolean)::: java type profile restrict:::result->new->ArrayList<>->for->i->getItems->newNullSeen->getNullSeen->newNotRecorded->this->getNotRecordedProbability->if->getItems->result->size->getItems->return->createAdjustedProfile
JavaTypeProfile#createAdjustedProfile(ArrayList, TriState, double)::: java type profile create adjusted profile:::if->result->size->this->getItems->getNotRecordedProbability->getNullSeen->if->result->size->return->new->JavaTypeProfile->factor->if->result->size->this->getItems->else->probabilitySum->for->i->result->size->newResult->result->size->new->ProfiledTypeArr->for->i->newNotRecordedTypeProbability->Math->min->return->new->JavaTypeProfile->return
JavaTypeProfile#equals(Object)::: java type profile equals:::return->super->equals->nullSeen->equals
JavaTypeProfile#hashCode()::: java type profile hash code:::return->nullSeen->hashCode->super->hashCode
JavaTypeProfile.ProfiledType#getType():::Returns the type for this profile entry.:::return->getItem
JavaTypeProfile.ProfiledType#toString()::: profiled type to string:::return->String->format
JavaTypeProfile#toString()::: java type profile to string:::buf->new->StringBuilder->getNullSeen->append->append->for->j->getTypes->return->buf->String->getNotRecordedProbability->format->append->toString
JavaTypeProfile#allTypesRecorded():::Returns true if all types seen at this location have been recorded in the profile.:::return->this->getNotRecordedProbability
JavaTypeProfile#asSingleType():::Returns the single monormorphic type representing this profile or null if no such type exists.:::if->allTypesRecorded->this->getTypes->return->getTypes->getType->return
LineNumberTable#getLineNumber(int):::Gets a source line number for bytecode index atBci.:::for->i->return
LineNumberTable#getLineNumbers():::Gets a copy of the array of line numbers that was passed to this object's constructor.:::return->lineNumbers->clone
LineNumberTable#getBcis():::Gets a copy of the array of bytecode indexes that was passed to this object's constructor.:::return->bcis->clone
Local#getStartBCI()::: local get start i:::return
Local#getEndBCI()::: local get end i:::return
Local#getName()::: local get name:::return
Local#getType()::: local get type:::return
Local#getSlot()::: local get slot:::return
Local#equals(Object)::: local equals:::if->return->that->return->equals->equals
Local#hashCode()::: local hash code:::return->super->hashCode
Local#toString()::: local to string:::return
LocalVariableTable#getLocal(int, int):::Gets a description of a local variable that occupies the bytecode frame slot indexed by slot and is live at the bytecode index bci.:::result->foreach->if->local->getSlot->local->getStartBCI->local->getEndBCI->if->else->throw->new->IllegalStateException->return
LocalVariableTable#getLocals():::Gets a copy of the array of Locals that was passed to this object's constructor.:::return->locals->clone
LocalVariableTable#getLocalsAt(int):::Gets a description of all the local variables live at the bytecode index bci.:::result->new->ArrayList<>->foreach->if->l->getStartBCI->l->getEndBCI->result->add->return->result->result->size->new->LocalArr->toArray
MemoryAccessProvider#readPrimitiveConstant(JavaKind, Constant, long, int):::Reads a primitive value using a base address and a displacement.:::
MemoryAccessProvider#readObjectConstant(Constant, long):::Reads a Java Object value using a base address and a displacement.:::
MetaAccessProvider#lookupJavaType(Class):::Returns the resolved Java type representing a given Java class.:::
MetaAccessProvider#lookupJavaTypes(Class[]):::Returns the resolved Java types representing some given Java classes.:::result->new->ResolvedJavaTypeArr->for->i->return
MetaAccessProvider#lookupJavaMethod(Executable):::Provides the ResolvedJavaMethod for a Method or Constructor obtained via reflection.:::
MetaAccessProvider#lookupJavaField(Field):::Provides the ResolvedJavaField for a Field obtained via reflection.:::
MetaAccessProvider#lookupJavaType(JavaConstant):::Returns the resolved Java type of the given JavaConstant object.:::
MetaAccessProvider#getMemorySize(JavaConstant):::Returns the number of bytes occupied by this constant value or constant object.:::
MetaAccessProvider#parseMethodDescriptor(String):::Parses a method descriptor into a Signature.:::
MetaAccessProvider#encodeDeoptActionAndReason(DeoptimizationAction, DeoptimizationReason, int):::Encodes a deoptimization action and a deoptimization reason in an integer value.:::
MetaAccessProvider#encodeSpeculation(Speculation):::Gets a constant that denotes speculation:::
MetaAccessProvider#decodeSpeculation(JavaConstant, SpeculationLog):::Decodes constant back to a Speculation object.:::
MetaAccessProvider#decodeDeoptReason(JavaConstant)::: meta access provider decode deopt reason:::
MetaAccessProvider#decodeDeoptAction(JavaConstant)::: meta access provider decode deopt action:::
MetaAccessProvider#decodeDebugId(JavaConstant)::: meta access provider decode debug id:::
MetaAccessProvider#getArrayBaseOffset(JavaKind)::: meta access provider get array base offset:::
MetaAccessProvider#getArrayIndexScale(JavaKind)::: meta access provider get array index scale:::
MetaUtil#getSimpleName(Class, boolean):::Extends the functionality of Class#getSimpleName() to include a non-empty string for anonymous and local classes.:::simpleName->safeSimpleName->if->simpleName->length->if->prefix->enclosingClass->while->enclosingClass->getEnclosingClass->safeSimpleName->return->return->name->clazz->getName->index->name->indexOf->if->return->name->lastIndexOf->if->return->return->name->substring
MetaUtil#safeSimpleName(Class)::: meta util safe simple name:::try->return->clazz->getSimpleName->catch->enclosingClass->clazz->getEnclosingClass->fqn->clazz->getName->if->return->enclosingFQN->enclosingClass->getName->length->fqn->length->if->enclosingFQN->length->return->return->fqn->enclosingFQN->length->substring->finally
MetaUtil#replacePackageSeparatorsWithDot(String):::Classes for lambdas can have / characters that are not package separators:::length->name->length->i->buf->new->StringBuilder->while->ch->name->charAt->if->Character->name->charAt->isJavaIdentifierStart->buf->append->else->buf->append->buf->name->charAt->append->return->buf->toString
MetaUtil#internalNameToJava(String, boolean, boolean):::Converts a type name in internal form to an external form.:::switch->name->charAt->result->name->name->length->substring->replacePackageSeparatorsWithDot->if->lastDot->result->lastIndexOf->if->result->substring->return->return->replacePackageSeparatorsWithDot->name->substring->internalNameToJava->if->name->length->throw->new->IllegalArgumentException->return->JavaKind->name->charAt->fromPrimitiveOrVoidTypeChar->getJavaName
MetaUtil#toLocation(ResolvedJavaMethod, int):::Convenient shortcut for calling #appendLocation(StringBuilder, ResolvedJavaMethod, int) without having to supply a StringBuilder instance and convert the result to a string.:::return->new->StringBuilder->appendLocation->toString
MetaUtil#appendLocation(StringBuilder, ResolvedJavaMethod, int):::Appends a string representation of a location specified by a given method and bci to a given StringBuilder:::if->ste->method->asStackTraceElement->if->ste->getFileName->ste->getLineNumber->sb->append->else->sb->method->format->append->else->sb->append->return->sb->append->append->append
MetaUtil#appendProfile(StringBuilder, AbstractJavaProfile, int, String, String)::: meta util append profile:::if->pitems->profile->getItems->if->buf->String->format->append->for->j->if->profile->getNotRecordedProbability->buf->String->profile->getNotRecordedProbability->format->append->else->buf->String->format->append
MetaUtil#toInternalName(String):::Converts a Java source-language class name into the internal form.:::if->className->startsWith->return->className->replace->result->new->StringBuilder->base->while->base->endsWith->result->append->base->base->length->substring->switch->result->append->break->result->append->break->result->append->break->result->append->break->result->append->break->result->append->break->result->append->break->result->append->break->result->append->break->result->append->base->replace->append->append->break->return->result->toString
MetaUtil#identityHashCodeString(Object):::Gets a string representation of an object based soley on its class and its System#identityHashCode(Object) identity hash code:::if->return->return->obj->getClass->getName->System->identityHashCode
MethodHandleAccessProvider#lookupMethodHandleIntrinsic(ResolvedJavaMethod):::Returns the method handle method intrinsic identifier for the provided method, or null if the method is not an intrinsic processed by this interface.:::
MethodHandleAccessProvider#resolveInvokeBasicTarget(JavaConstant, boolean):::Resolves the invocation target for an invocation of IntrinsicMethod#INVOKE_BASIC MethodHandle.invokeBasic with the given constant receiver MethodHandle:::
MethodHandleAccessProvider#resolveLinkToTarget(JavaConstant):::Resolves the invocation target for an invocation of a MethodHandle.linkTo* method with the given constant member name:::
ModifiersProvider#getModifiers():::Returns the modifiers for this element.:::
ModifiersProvider#isInterface()::: modifiers provider is interface:::return->Modifier->getModifiers->isInterface
ModifiersProvider#isSynchronized()::: modifiers provider is synchronized:::return->Modifier->getModifiers->isSynchronized
ModifiersProvider#isStatic()::: modifiers provider is static:::return->Modifier->getModifiers->isStatic
ModifiersProvider#isFinalFlagSet():::The setting of the final modifier bit for types is somewhat confusing, so don't export isFinal by default:::return->Modifier->getModifiers->isFinal
ModifiersProvider#isPublic()::: modifiers provider is public:::return->Modifier->getModifiers->isPublic
ModifiersProvider#isPackagePrivate():::Determines if this element is neither #isPublic() public, #isProtected() protected nor #isPrivate() private.:::return->getModifiers
ModifiersProvider#isPrivate()::: modifiers provider is private:::return->Modifier->getModifiers->isPrivate
ModifiersProvider#isProtected()::: modifiers provider is protected:::return->Modifier->getModifiers->isProtected
ModifiersProvider#isTransient()::: modifiers provider is transient:::return->Modifier->getModifiers->isTransient
ModifiersProvider#isStrict()::: modifiers provider is strict:::return->Modifier->getModifiers->isStrict
ModifiersProvider#isVolatile()::: modifiers provider is volatile:::return->Modifier->getModifiers->isVolatile
ModifiersProvider#isNative()::: modifiers provider is native:::return->Modifier->getModifiers->isNative
ModifiersProvider#isAbstract()::: modifiers provider is abstract:::return->Modifier->getModifiers->isAbstract
ModifiersProvider#isConcrete():::Checks that the method is concrete and not abstract.:::return->isAbstract
NullConstant#getJavaKind()::: null constant get java kind:::return
NullConstant#isNull()::: null constant is null:::return
NullConstant#isDefaultForKind()::: null constant is default for kind:::return
NullConstant#asBoxedPrimitive()::: null constant as boxed primitive:::throw->new->IllegalArgumentException
NullConstant#asInt()::: null constant as int:::throw->new->IllegalArgumentException
NullConstant#asBoolean()::: null constant as boolean:::throw->new->IllegalArgumentException
NullConstant#asLong()::: null constant as long:::throw->new->IllegalArgumentException
NullConstant#asFloat()::: null constant as float:::throw->new->IllegalArgumentException
NullConstant#asDouble()::: null constant as double:::throw->new->IllegalArgumentException
NullConstant#toString()::: null constant to string:::return->JavaConstant->toString
NullConstant#toValueString()::: null constant to value string:::return
NullConstant#hashCode()::: null constant hash code:::return
NullConstant#equals(Object)::: null constant equals:::return
PlatformKind#name()::: platform kind name:::
PlatformKind.EnumKey#hashCode()::: enum key hash code:::return->e->ordinal
PlatformKind.EnumKey#equals(Object)::: enum key equals:::if->return->if->that->return->return
PlatformKind#getKey():::Gets a value associated with this object that can be used as a stable key in a map:::
PlatformKind#getSizeInBytes():::Get the size in bytes of this PlatformKind.:::
PlatformKind#getVectorLength():::Returns how many primitive values fit in this PlatformKind:::
PlatformKind#getTypeChar():::Gets a single type char that identifies this type for use in debug output.:::
PrimitiveConstant#forTypeChar(char, long)::: primitive constant for type char:::return->JavaConstant->JavaKind->fromPrimitiveOrVoidTypeChar->forIntegerKind
PrimitiveConstant#getJavaKind()::: primitive constant get java kind:::return
PrimitiveConstant#isNull()::: primitive constant is null:::return
PrimitiveConstant#isDefaultForKind()::: primitive constant is default for kind:::return
PrimitiveConstant#asBoolean()::: primitive constant as boolean:::return
PrimitiveConstant#asInt()::: primitive constant as int:::return
PrimitiveConstant#asLong()::: primitive constant as long:::return
PrimitiveConstant#asFloat()::: primitive constant as float:::return->Float->intBitsToFloat
PrimitiveConstant#asDouble()::: primitive constant as double:::return->Double->longBitsToDouble
PrimitiveConstant#asBoxedPrimitive()::: primitive constant as boxed primitive:::switch->getJavaKind->return->Byte->valueOf->return->Boolean->asBoolean->valueOf->return->Short->valueOf->return->Character->valueOf->return->Integer->asInt->valueOf->return->Long->asLong->valueOf->return->Float->asFloat->valueOf->return->Double->asDouble->valueOf->throw->getJavaKind->new->IllegalArgumentException
PrimitiveConstant#getSerializedSize()::: primitive constant get serialized size:::return->getJavaKind->getByteCount
PrimitiveConstant#serialize(ByteBuffer)::: primitive constant serialize:::switch->getJavaKind->buffer->put->break->buffer->putShort->break->buffer->putChar->break->buffer->asInt->putInt->break->buffer->asLong->putLong->break->buffer->asFloat->putFloat->break->buffer->asDouble->putDouble->break->throw->getJavaKind->new->IllegalArgumentException
PrimitiveConstant#hashCode()::: primitive constant hash code:::return->getJavaKind->ordinal
PrimitiveConstant#equals(Object)::: primitive constant equals:::if->return->if->return->other->return->equals
PrimitiveConstant#toString()::: primitive constant to string:::if->getJavaKind->return->else->return->getJavaKind->getJavaName->asBoxedPrimitive->Long->toHexString
ProfilingInfo#getCodeSize():::Returns the length of the bytecodes associated with this profile.:::
ProfilingInfo#getBranchTakenProbability(int):::Returns an estimate of how often the branch at the given byte code was taken.:::
ProfilingInfo#getSwitchProbabilities(int):::Returns an estimate of how often the switch cases are taken at the given BCI:::
ProfilingInfo#getTypeProfile(int):::Returns the TypeProfile for the given BCI.:::
ProfilingInfo#getMethodProfile(int):::Returns the MethodProfile for the given BCI.:::
ProfilingInfo#getExceptionSeen(int):::Returns information if the given BCI did ever throw an exception.:::
ProfilingInfo#getNullSeen(int):::Returns information if null was ever seen for the given BCI:::
ProfilingInfo#getExecutionCount(int):::Returns an estimate how often the current BCI was executed:::
ProfilingInfo#getDeoptimizationCount(DeoptimizationReason):::Returns how frequently a method was deoptimized for the given deoptimization reason:::
ProfilingInfo#setCompilerIRSize(Class, int):::Records the size of the compiler intermediate representation (IR) associated with this method.:::
ProfilingInfo#getCompilerIRSize(Class):::Gets the size of the compiler intermediate representation (IR) associated with this method last recorded by #setCompilerIRSize(Class, int).:::
ProfilingInfo#isMature():::Returns true if the profiling information can be assumed as sufficiently accurate.:::
ProfilingInfo#setMature():::Force data to be treated as mature if possible.:::
ProfilingInfo#toString(ResolvedJavaMethod, String):::Formats this profiling information to a string.:::buf->new->StringBuilder->if->buf->String->method->canBeStaticallyBound->format->append->for->i->getCodeSize->firstDeoptReason->foreach->DeoptimizationReason->values->count->getDeoptimizationCount->if->if->buf->append->append->buf->String->reason->name->format->append->if->buf->length->return->s->buf->toString->return->s->s->length->sep->length->substring
ResolvedJavaField#getModifiers():::Only the {@linkplain Modifier#fieldModifiers() field flags specified in the JVM specification will be included in the returned mask.:::
ResolvedJavaField#getOffset()::: resolved java field get offset:::
ResolvedJavaField#isFinal()::: resolved java field is final:::return->ModifiersProvider.super->isFinalFlagSet
ResolvedJavaField#isInternal():::Determines if this field was injected by the VM:::
ResolvedJavaField#isSynthetic():::Determines if this field is a synthetic field as defined by the Java Language Specification.:::
ResolvedJavaField#getDeclaringClass():::Returns the ResolvedJavaType object representing the class or interface that declares this field.:::
ResolvedJavaMethod#getCode():::Returns the bytecode of this method, if the method has code:::
ResolvedJavaMethod#getCodeSize():::Returns the size of the bytecode of this method, if the method has code:::
ResolvedJavaMethod#getDeclaringClass():::Returns the ResolvedJavaType object representing the class or interface that declares this method.:::
ResolvedJavaMethod#getMaxLocals():::Returns the maximum number of locals used in this method's bytecodes.:::
ResolvedJavaMethod#getMaxStackSize():::Returns the maximum number of stack slots used in this method's bytecodes.:::
ResolvedJavaMethod#isFinal()::: resolved java method is final:::return->ModifiersProvider.super->isFinalFlagSet
ResolvedJavaMethod#isSynthetic():::Determines if this method is a synthetic method as defined by the Java Language Specification.:::
ResolvedJavaMethod#isVarArgs():::Checks that the method is a varargs method.:::
ResolvedJavaMethod#isBridge():::Checks that the method is a bridge method.:::
ResolvedJavaMethod#isDefault():::Returns true if this method is a default method; returns false otherwise:::
ResolvedJavaMethod#isClassInitializer():::Checks whether this method is a class initializer.:::
ResolvedJavaMethod#isConstructor():::Checks whether this method is a constructor.:::
ResolvedJavaMethod#canBeStaticallyBound():::Checks whether this method can be statically bound (usually, that means it is final or private or static, but not abstract, or the declaring class is final).:::
ResolvedJavaMethod#getExceptionHandlers():::Returns the list of exception handlers for this method.:::
ResolvedJavaMethod#asStackTraceElement(int):::Returns a stack trace element for this method and a given bytecode index.:::
ResolvedJavaMethod#getProfilingInfo():::Returns an object that provides access to the profiling information recorded for this method.:::return->getProfilingInfo
ResolvedJavaMethod#getProfilingInfo(boolean, boolean):::Returns an object that provides access to the profiling information recorded for this method.:::
ResolvedJavaMethod#reprofile():::Invalidates the profiling information and restarts profiling upon the next invocation.:::
ResolvedJavaMethod#getConstantPool():::Returns the constant pool of this method.:::
ResolvedJavaMethod.Parameter#getName():::Gets the name of the parameter:::if->return->else->return
ResolvedJavaMethod.Parameter#getDeclaringMethod():::Gets the method declaring the parameter.:::return
ResolvedJavaMethod.Parameter#getModifiers():::Get the modifier flags for the parameter.:::return
ResolvedJavaMethod.Parameter#getKind():::Gets the kind of the parameter.:::return->method->getSignature->getParameterKind
ResolvedJavaMethod.Parameter#getParameterizedType():::Gets the formal type of the parameter.:::return->method->getGenericParameterTypes
ResolvedJavaMethod.Parameter#getType():::Gets the type of the parameter.:::return->method->getSignature->method->getDeclaringClass->getParameterType
ResolvedJavaMethod.Parameter#isNamePresent():::Determines if the parameter has a name according to a MethodParameters class file attribute.:::return
ResolvedJavaMethod.Parameter#isVarArgs():::Determines if the parameter represents a variable argument list.:::return->method->isVarArgs->method->getSignature->getParameterCount
ResolvedJavaMethod.Parameter#getAnnotation(Class)::: parameter get annotation:::return->method->getParameterAnnotations
ResolvedJavaMethod.Parameter#getAnnotations()::: parameter get annotations:::return->method->getParameterAnnotations
ResolvedJavaMethod.Parameter#getDeclaredAnnotations()::: parameter get declared annotations:::return->getAnnotations
ResolvedJavaMethod.Parameter#toString()::: parameter to string:::type->getParameterizedType->typename->type->getTypeName->if->isVarArgs->typename->replaceFirst->sb->Modifier->getModifiers->toString->new->StringBuilder->if->sb->length->sb->append->return->sb->append->append->getName->append->toString
ResolvedJavaMethod.Parameter#equals(Object)::: parameter equals:::if->other->return->equals->return
ResolvedJavaMethod.Parameter#hashCode()::: parameter hash code:::return->method->hashCode
ResolvedJavaMethod#getParameters():::Returns an array of Parameter objects that represent all the parameters to this method:::return
ResolvedJavaMethod#getParameterAnnotations():::Returns an array of arrays that represent the annotations on the formal parameters, in declaration order, of this method.:::
ResolvedJavaMethod#getGenericParameterTypes():::Returns an array of Type objects that represent the formal parameter types, in declaration order, of this method.:::
ResolvedJavaMethod#canBeInlined():::Returns true if this method is not excluded from inlining and has associated Java bytecodes (@see ResolvedJavaMethod#hasBytecodes()).:::
ResolvedJavaMethod#hasNeverInlineDirective():::Determines if this method is targeted by a VM directive (e.g., -XX:CompileCommand=dontinline,<pattern>) or VM recognized annotation (e.g., jdk.internal.vm.annotation.DontInline) that specifies it should not be inlined.:::
ResolvedJavaMethod#shouldBeInlined():::Returns true if the inlining of this method should be forced.:::
ResolvedJavaMethod#getLineNumberTable():::Returns the LineNumberTable of this method or null if this method does not have a line numbers table.:::
ResolvedJavaMethod#getLocalVariableTable():::Returns the local variable table of this method or null if this method does not have a local variable table.:::
ResolvedJavaMethod#getEncoding():::Gets the encoding of (that is, a constant representing the value of) this method.:::
ResolvedJavaMethod#isInVirtualMethodTable(ResolvedJavaType):::Checks if this method is present in the virtual table for subtypes of the specified ResolvedJavaType type.:::
ResolvedJavaMethod#getParameterAnnotation(Class, int):::Gets the annotation of a particular type for a formal parameter of this method.:::if->parameterAnnotations->getParameterAnnotations->foreach->if->a->annotationType->return->annotationClass->cast->return
ResolvedJavaMethod#toParameterTypes()::: resolved java method to parameter types:::receiver->isStatic->isConstructor->getDeclaringClass->return->getSignature->toParameterTypes
ResolvedJavaMethod#getParameterAnnotations(Class):::Gets the annotations of a particular type for the formal parameters of this method.:::parameterAnnotations->getParameterAnnotations->result->Array->newInstance->for->i->return
ResolvedJavaMethod#hasBytecodes():::Checks whether the method has bytecodes associated with it:::return->getCodeSize
ResolvedJavaMethod#hasReceiver():::Checks whether the method has a receiver parameter - i.e., whether it is not static.:::return->isStatic
ResolvedJavaMethod#isJavaLangObjectInit():::Determines if this method is java.lang.Object#Object().:::return->getDeclaringClass->isJavaLangObject->getName->equals
ResolvedJavaMethod#getSpeculationLog():::Gets a speculation log that can be used when compiling this method to make new speculations and query previously failed speculations:::
ResolvedJavaType#hasFinalizer():::Checks whether this type has a finalizer method.:::
ResolvedJavaType#hasFinalizableSubclass():::Checks whether this type has any finalizable subclasses so far:::
ResolvedJavaType#isInterface():::Checks whether this type is an interface.:::
ResolvedJavaType#isInstanceClass():::Checks whether this type is an instance class.:::
ResolvedJavaType#isPrimitive():::Checks whether this type is primitive.:::
ResolvedJavaType#isLeaf()::: resolved java type is leaf:::return->getElementalType->isFinalFlagSet
ResolvedJavaType#isEnum():::Checks whether this type is an enum.:::
ResolvedJavaType#isInitialized():::Checks whether this type is initialized:::
ResolvedJavaType#initialize():::Initializes this type.:::
ResolvedJavaType#isLinked():::Checks whether this type is linked and verified:::
ResolvedJavaType#isAssignableFrom(ResolvedJavaType):::Determines if this type is either the same as, or is a superclass or superinterface of, the type represented by the specified parameter:::
ResolvedJavaType#getHostClass():::Returns the ResolvedJavaType object representing the host class of this VM anonymous class (as opposed to the unrelated concept specified by Class#isAnonymousClass()) or null if this object does not represent a VM anonymous class.:::
ResolvedJavaType#isJavaLangObject():::Returns true if this type is exactly the type java.lang.Object.:::return->getSuperclass->isInterface->getJavaKind
ResolvedJavaType#isInstance(JavaConstant):::Checks whether the specified object is an instance of this type.:::
ResolvedJavaType#getSuperclass():::Gets the super class of this type:::
ResolvedJavaType#getInterfaces():::Gets the interfaces implemented or extended by this type:::
ResolvedJavaType#getSingleImplementor():::Gets the single implementor of this type:::
ResolvedJavaType#findLeastCommonAncestor(ResolvedJavaType):::Walks the class hierarchy upwards and returns the least common class that is a superclass of both the current and the given type.:::
ResolvedJavaType#findLeafConcreteSubtype():::Attempts to get a leaf concrete subclass of this type:::
ResolvedJavaType#getComponentType()::: resolved java type get component type:::
ResolvedJavaType#getElementalType()::: resolved java type get elemental type:::t->while->t->isArray->t->getComponentType->return
ResolvedJavaType#getArrayClass()::: resolved java type get array class:::
ResolvedJavaType#resolveMethod(ResolvedJavaMethod, ResolvedJavaType):::Resolves the method implementation for virtual dispatches on objects of this dynamic type:::
ResolvedJavaType#resolveConcreteMethod(ResolvedJavaMethod, ResolvedJavaType):::A convenience wrapper for #resolveMethod(ResolvedJavaMethod, ResolvedJavaType) that only returns non-abstract methods.:::resolvedMethod->resolveMethod->if->resolvedMethod->isAbstract->return->return
ResolvedJavaType#findUniqueConcreteMethod(ResolvedJavaMethod):::Given a ResolvedJavaMethod A, returns a concrete ResolvedJavaMethod B that is the only possible unique target for a virtual call on A():::
ResolvedJavaType#getInstanceFields(boolean):::Returns the instance fields of this class, including ResolvedJavaField#isInternal() internal fields:::
ResolvedJavaType#getStaticFields():::Returns the static fields of this class, including ResolvedJavaField#isInternal() internal fields:::
ResolvedJavaType#findInstanceFieldWithOffset(long, JavaKind):::Returns the instance field of this class (or one of its super classes) at the given offset, or null if there is no such field.:::
ResolvedJavaType#getSourceFileName():::Returns name of source file of this type.:::
ResolvedJavaType#isLocal():::Returns true if the type is a local type.:::
ResolvedJavaType#isMember():::Returns true if the type is a member type.:::
ResolvedJavaType#getEnclosingType():::Returns the enclosing type of this type, if it exists, or null.:::
ResolvedJavaType#getDeclaredConstructors():::Returns an array reflecting all the constructors declared by this type:::
ResolvedJavaType#getDeclaredMethods():::Returns an array reflecting all the methods declared by this type:::
ResolvedJavaType#getClassInitializer():::Returns the <clinit> method for this class if there is one.:::
ResolvedJavaType#findMethod(String, Signature)::: resolved java type find method:::foreach->getDeclaredMethods->if->method->getName->equals->method->getSignature->equals->return->return
ResolvedJavaType#isCloneableWithAllocation():::Returns true if this type is Cloneable and can be safely cloned by creating a normal Java allocation and populating it from the fields returned by #getInstanceFields(boolean):::
ResolvedJavaType#lookupType(UnresolvedJavaType, boolean):::Lookup an unresolved type relative to an existing resolved type.:::return
ResolvedJavaType#resolveField(UnresolvedJavaField, ResolvedJavaType)::: resolved java type resolve field:::return
SerializableConstant#getSerializedSize():::Return the size in bytes of the serialized representation of this constant.:::
SerializableConstant#serialize(ByteBuffer):::Serialize the constant into the ByteBuffer:::
Signature#getParameterCount(boolean):::Returns the number of parameters in this signature, adding 1 for a receiver if requested.:::
Signature#getParameterType(int, ResolvedJavaType):::Gets the parameter type at the specified position.:::
Signature#getParameterKind(int):::Gets the parameter kind at the specified position:::return->getParameterType->getJavaKind
Signature#getReturnType(ResolvedJavaType):::Gets the return type of this signature.:::
Signature#getReturnKind():::Gets the return kind of this signature:::return->getReturnType->getJavaKind
Signature#toMethodDescriptor():::Gets the method descriptor corresponding to this signature:::sb->new->StringBuilder->for->i->getParameterCount->sb->append->getReturnType->getName->append->return->sb->toString
Signature#toParameterTypes(JavaType)::: signature to parameter types:::args->getParameterCount->result->i->if->new->JavaTypeArr->else->new->JavaTypeArr->for->j->return
Signature#toParameterKinds(boolean)::: signature to parameter kinds:::args->getParameterCount->result->i->if->new->JavaKindArr->else->new->JavaKindArr->for->j->return
SpeculationLog.SpeculationReason#encode(Supplier):::Encodes the attributes of this reason using a SpeculationReasonEncoding:::return
SpeculationLog.SpeculationReasonEncoding#addByte(int)::: speculation reason encoding add byte:::
SpeculationLog.SpeculationReasonEncoding#addShort(int)::: speculation reason encoding add short:::
SpeculationLog.SpeculationReasonEncoding#addInt(int)::: speculation reason encoding add int:::
SpeculationLog.SpeculationReasonEncoding#addLong(long)::: speculation reason encoding add long:::
SpeculationLog.SpeculationReasonEncoding#addMethod(ResolvedJavaMethod)::: speculation reason encoding add method:::
SpeculationLog.SpeculationReasonEncoding#addType(ResolvedJavaType)::: speculation reason encoding add type:::
SpeculationLog.SpeculationReasonEncoding#addString(String)::: speculation reason encoding add string:::
SpeculationLog.SpeculationReasonEncoding#addField(ResolvedJavaField)::: speculation reason encoding add field:::field->getDeclaringClass->addType->field->getModifiers->addInt->field->getOffset->addInt
SpeculationLog.Speculation#getReason()::: speculation get reason:::return
SpeculationLog.Speculation#toString()::: speculation to string:::return->reason->toString
SpeculationLog.Speculation#equals(Object)::: speculation equals:::if->other->return->reason->equals->return
SpeculationLog.Speculation#hashCode()::: speculation hash code:::return->getReason->hashCode
SpeculationLog#collectFailedSpeculations():::Updates the set of failed speculations recorded in this log:::
SpeculationLog#maySpeculate(SpeculationReason):::If this method returns true, the compiler is allowed to #speculate with the given reason.:::
SpeculationLog#speculate(SpeculationReason):::Registers a speculation performed by the compiler:::
SpeculationLog#hasSpeculations():::Returns if this log has speculations.:::
SpeculationLog#lookupSpeculation(JavaConstant):::Given a JavaConstant previously returned from MetaAccessProvider#encodeSpeculation(Speculation) return the original Speculation object.:::
UnresolvedJavaField#getName()::: unresolved java field get name:::return
UnresolvedJavaField#getType()::: unresolved java field get type:::return
UnresolvedJavaField#getDeclaringClass()::: unresolved java field get declaring class:::return
UnresolvedJavaField#hashCode()::: unresolved java field hash code:::return->super->hashCode
UnresolvedJavaField#equals(Object)::: unresolved java field equals:::if->return->if->return->that->return->equals->equals->equals
UnresolvedJavaField#toString():::Converts this compiler interface field to a string.:::return->format
UnresolvedJavaField#resolve(ResolvedJavaType)::: unresolved java field resolve:::resolvedHolder->holder->resolve->return->resolvedHolder->resolveField
UnresolvedJavaMethod#getName()::: unresolved java method get name:::return
UnresolvedJavaMethod#getSignature()::: unresolved java method get signature:::return
UnresolvedJavaMethod#getDeclaringClass()::: unresolved java method get declaring class:::return
UnresolvedJavaMethod#hashCode()::: unresolved java method hash code:::return->super->hashCode
UnresolvedJavaMethod#equals(Object)::: unresolved java method equals:::if->return->if->return->that->return->equals->equals->equals
UnresolvedJavaType#getName()::: unresolved java type get name:::return
UnresolvedJavaType#create(String):::Creates an unresolved type for a valid JavaType#getName() type name.:::return->new->UnresolvedJavaType
UnresolvedJavaType#getComponentType()::: unresolved java type get component type:::if->getName->charAt->return->getName->substring->new->UnresolvedJavaType->return
UnresolvedJavaType#getArrayClass()::: unresolved java type get array class:::return->getName->new->UnresolvedJavaType
UnresolvedJavaType#getJavaKind()::: unresolved java type get java kind:::return
UnresolvedJavaType#hashCode()::: unresolved java type hash code:::return->getName->hashCode
UnresolvedJavaType#equals(Object)::: unresolved java type equals:::if->return->if->return->that->return->this->getName->that->getName->equals
UnresolvedJavaType#toString()::: unresolved java type to string:::return->getName
UnresolvedJavaType#resolve(ResolvedJavaType)::: unresolved java type resolve:::return->accessingClass->lookupType
Value.IllegalValue#toString()::: illegal value to string:::return
Value.IllegalValue#equals(Object)::: illegal value equals:::return
Value#getKindSuffix():::Returns a String representation of the kind, which should be the end of all #toString() implementation of subclasses.:::return->valueKind->getKindSuffix
Value#getValueKind()::: value get value kind:::return
Value#getValueKind(Class)::: value get value kind:::return->cls->cast
Value#getPlatformKind():::Returns the platform specific kind used to store this value.:::return->valueKind->getPlatformKind
Value#hashCode()::: value hash code:::return->valueKind->hashCode
Value#equals(Object)::: value equals:::if->that->return->valueKind->equals->return
Value#identityEquals(Value):::Checks if this value is identical to other:::return
ValueKind.IllegalValueKind#changeType(PlatformKind)::: illegal value kind change type:::return
ValueKind.IllegalValueKind#toString()::: illegal value kind to string:::return
ValueKind#getPlatformKind()::: value kind get platform kind:::return
ValueKind#changeType(PlatformKind):::Create a new ValueKind with a different PlatformKind:::
ValueKind#getKindSuffix():::Returns a String representation of the kind, which will be included at the end of Value#toString() implementation:::return->toString

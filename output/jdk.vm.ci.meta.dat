jdk.vm.ci.meta.AbstractJavaProfile#getNotRecordedProbability()->double:::Returns the estimated probability of all types that could not be recorded due to profiling limitations.
jdk.vm.ci.meta.AbstractJavaProfile#getItems()->T[]::: abstract java profile get items
jdk.vm.ci.meta.AbstractJavaProfile#findEntry(ResolvedJavaType)->T:::Searches for an entry of a given resolved Java type.
jdk.vm.ci.meta.AbstractJavaProfile#toString()->String::: abstract java profile to string
jdk.vm.ci.meta.AbstractJavaProfile#isIncluded(U)->boolean::: abstract java profile is included
jdk.vm.ci.meta.AbstractJavaProfile#equals(Object)->boolean::: abstract java profile equals
jdk.vm.ci.meta.AbstractJavaProfile#hashCode()->int::: abstract java profile hash code
jdk.vm.ci.meta.AbstractProfiledItem#getItem()->T::: abstract profiled item get item
jdk.vm.ci.meta.AbstractProfiledItem#getProbability()->double:::Returns the estimated probability of #getItem().
jdk.vm.ci.meta.AbstractProfiledItem#compareTo(AbstractProfiledItem)->int:::Returns -1 if the #getProbability() probability of this item is greater than o's probability, 0 if there are equal otherwise 1.
jdk.vm.ci.meta.AbstractProfiledItem#hashCode()->int::: abstract profiled item hash code
jdk.vm.ci.meta.AbstractProfiledItem#equals(Object)->boolean::: abstract profiled item equals
jdk.vm.ci.meta.AbstractProfiledItem#toString()->String::: abstract profiled item to string
jdk.vm.ci.meta.Assumptions.AssumptionResult#getResult()->T::: assumption result get result
jdk.vm.ci.meta.Assumptions.AssumptionResult#isAssumptionFree()->boolean::: assumption result is assumption free
jdk.vm.ci.meta.Assumptions.AssumptionResult#add(AssumptionResult)->void::: assumption result add
jdk.vm.ci.meta.Assumptions.AssumptionResult#canRecordTo(Assumptions)->boolean::: assumption result can record to
jdk.vm.ci.meta.Assumptions.AssumptionResult#recordTo(Assumptions)->void::: assumption result record to
jdk.vm.ci.meta.Assumptions.NoFinalizableSubclass#hashCode()->int::: no finalizable subclass hash code
jdk.vm.ci.meta.Assumptions.NoFinalizableSubclass#equals(Object)->boolean::: no finalizable subclass equals
jdk.vm.ci.meta.Assumptions.NoFinalizableSubclass#toString()->String::: no finalizable subclass to string
jdk.vm.ci.meta.Assumptions.ConcreteSubtype#hashCode()->int::: concrete subtype hash code
jdk.vm.ci.meta.Assumptions.ConcreteSubtype#equals(Object)->boolean::: concrete subtype equals
jdk.vm.ci.meta.Assumptions.ConcreteSubtype#toString()->String::: concrete subtype to string
jdk.vm.ci.meta.Assumptions.LeafType#hashCode()->int::: leaf type hash code
jdk.vm.ci.meta.Assumptions.LeafType#equals(Object)->boolean::: leaf type equals
jdk.vm.ci.meta.Assumptions.LeafType#toString()->String::: leaf type to string
jdk.vm.ci.meta.Assumptions.ConcreteMethod#hashCode()->int::: concrete method hash code
jdk.vm.ci.meta.Assumptions.ConcreteMethod#equals(Object)->boolean::: concrete method equals
jdk.vm.ci.meta.Assumptions.ConcreteMethod#toString()->String::: concrete method to string
jdk.vm.ci.meta.Assumptions.CallSiteTargetValue#hashCode()->int::: call site target value hash code
jdk.vm.ci.meta.Assumptions.CallSiteTargetValue#equals(Object)->boolean::: call site target value equals
jdk.vm.ci.meta.Assumptions.CallSiteTargetValue#toString()->String::: call site target value to string
jdk.vm.ci.meta.Assumptions#isEmpty()->boolean:::Returns whether any assumptions have been registered.
jdk.vm.ci.meta.Assumptions#hashCode()->int::: assumptions hash code
jdk.vm.ci.meta.Assumptions#equals(Object)->boolean::: assumptions equals
jdk.vm.ci.meta.Assumptions#iterator()->Iterator::: assumptions iterator
jdk.vm.ci.meta.Assumptions#recordNoFinalizableSubclassAssumption(ResolvedJavaType)->void:::Records an assumption that the specified type has no finalizable subclasses.
jdk.vm.ci.meta.Assumptions#recordConcreteSubtype(ResolvedJavaType, ResolvedJavaType)->void:::Records that subtype is the only concrete subtype in the class hierarchy below context.
jdk.vm.ci.meta.Assumptions#recordConcreteMethod(ResolvedJavaMethod, ResolvedJavaType, ResolvedJavaMethod)->void:::Records that impl is the only possible concrete target for a virtual call to method with a receiver of type context.
jdk.vm.ci.meta.Assumptions#record(Assumption)->void::: assumptions record
jdk.vm.ci.meta.Assumptions#toArray()->Assumption[]:::Gets a copy of the assumptions recorded in this object as an array.
jdk.vm.ci.meta.Assumptions#record(Assumptions)->void:::Copies assumptions recorded by another Assumptions object into this object.
jdk.vm.ci.meta.Assumptions#toString()->String::: assumptions to string
jdk.vm.ci.meta.Constant#isDefaultForKind()->boolean::: constant is default for kind
jdk.vm.ci.meta.Constant#toValueString()->String::: constant to value string
jdk.vm.ci.meta.ConstantPool#length()->int:::Returns the number of entries the constant pool.
jdk.vm.ci.meta.ConstantPool#loadReferencedType(int, int)->void:::Ensures that the type referenced by the specified constant pool entry is loaded and initialized
jdk.vm.ci.meta.ConstantPool#lookupField(int, ResolvedJavaMethod, int)->JavaField:::Looks up a reference to a field
jdk.vm.ci.meta.ConstantPool#lookupMethod(int, int)->JavaMethod:::Looks up a reference to a method
jdk.vm.ci.meta.ConstantPool#lookupType(int, int)->JavaType:::Looks up a reference to a type
jdk.vm.ci.meta.ConstantPool#lookupUtf8(int)->String:::Looks up an Utf8 string.
jdk.vm.ci.meta.ConstantPool#lookupSignature(int)->Signature:::Looks up a method signature.
jdk.vm.ci.meta.ConstantPool#lookupConstant(int)->Object:::Looks up a constant at the specified index.
jdk.vm.ci.meta.ConstantPool#lookupAppendix(int, int)->JavaConstant:::Looks up the appendix at the specified index.
jdk.vm.ci.meta.ConstantReflectionProvider#constantEquals(Constant, Constant)->Boolean:::Compares two constants for equality
jdk.vm.ci.meta.ConstantReflectionProvider#readArrayLength(JavaConstant)->Integer:::Returns the length of the array constant
jdk.vm.ci.meta.ConstantReflectionProvider#readArrayElement(JavaConstant, int)->JavaConstant:::Reads a value from the given array at the given index
jdk.vm.ci.meta.ConstantReflectionProvider#readFieldValue(ResolvedJavaField, JavaConstant)->JavaConstant:::Gets the current value of this field for a given object, if available
jdk.vm.ci.meta.ConstantReflectionProvider#boxPrimitive(JavaConstant)->JavaConstant:::Converts the given JavaKind#isPrimitive() primitive constant to a boxed JavaKind#Object object constant, according to the Java boxing rules
jdk.vm.ci.meta.ConstantReflectionProvider#unboxPrimitive(JavaConstant)->JavaConstant:::Converts the given JavaKind#Object object constant to a JavaKind#isPrimitive() primitive constant, according to the Java unboxing rules
jdk.vm.ci.meta.ConstantReflectionProvider#forString(String)->JavaConstant:::Gets a string as a JavaConstant.
jdk.vm.ci.meta.ConstantReflectionProvider#asJavaType(Constant)->ResolvedJavaType:::Returns the ResolvedJavaType for a Class object (or any other object regarded as a class by the VM) encapsulated in the given constant
jdk.vm.ci.meta.ConstantReflectionProvider#getMethodHandleAccess()->MethodHandleAccessProvider:::Gets access to the internals of MethodHandle.
jdk.vm.ci.meta.ConstantReflectionProvider#getMemoryAccessProvider()->MemoryAccessProvider:::Gets raw memory access.
jdk.vm.ci.meta.ConstantReflectionProvider#asJavaClass(ResolvedJavaType)->JavaConstant:::Gets the runtime representation of the Class object of this type.
jdk.vm.ci.meta.ConstantReflectionProvider#asObjectHub(ResolvedJavaType)->Constant:::Gets the runtime representation of the "hub" of this type--that is, the closest part of the type representation which is typically stored in the object header.
jdk.vm.ci.meta.DefaultProfilingInfo#getCodeSize()->int::: default profiling info get code size
jdk.vm.ci.meta.DefaultProfilingInfo#getTypeProfile(int)->JavaTypeProfile::: default profiling info get type profile
jdk.vm.ci.meta.DefaultProfilingInfo#getMethodProfile(int)->JavaMethodProfile::: default profiling info get method profile
jdk.vm.ci.meta.DefaultProfilingInfo#getBranchTakenProbability(int)->double::: default profiling info get branch taken probability
jdk.vm.ci.meta.DefaultProfilingInfo#getSwitchProbabilities(int)->double[]::: default profiling info get switch probabilities
jdk.vm.ci.meta.DefaultProfilingInfo#getExceptionSeen(int)->TriState::: default profiling info get exception seen
jdk.vm.ci.meta.DefaultProfilingInfo#getNullSeen(int)->TriState::: default profiling info get null seen
jdk.vm.ci.meta.DefaultProfilingInfo#getExecutionCount(int)->int::: default profiling info get execution count
jdk.vm.ci.meta.DefaultProfilingInfo#get(TriState)->ProfilingInfo::: default profiling info get
jdk.vm.ci.meta.DefaultProfilingInfo#getDeoptimizationCount(DeoptimizationReason)->int::: default profiling info get deoptimization count
jdk.vm.ci.meta.DefaultProfilingInfo#isMature()->boolean::: default profiling info is mature
jdk.vm.ci.meta.DefaultProfilingInfo#toString()->String::: default profiling info to string
jdk.vm.ci.meta.DefaultProfilingInfo#setMature()->void::: default profiling info set mature
jdk.vm.ci.meta.DefaultProfilingInfo#setCompilerIRSize(Class, int)->boolean::: default profiling info set compiler size
jdk.vm.ci.meta.DefaultProfilingInfo#getCompilerIRSize(Class)->int::: default profiling info get compiler size
jdk.vm.ci.meta.EncodedSpeculationReason#equals(Object)->boolean::: encoded speculation reason equals
jdk.vm.ci.meta.EncodedSpeculationReason#encode(Supplier)->SpeculationLog.SpeculationReasonEncoding::: encoded speculation reason encode
jdk.vm.ci.meta.EncodedSpeculationReason#addNonNullObject(SpeculationLog.SpeculationReasonEncoding, Object)->void::: encoded speculation reason add non null object
jdk.vm.ci.meta.EncodedSpeculationReason#hashCode()->int::: encoded speculation reason hash code
jdk.vm.ci.meta.EncodedSpeculationReason#toString()->String::: encoded speculation reason to string
jdk.vm.ci.meta.ExceptionHandler#getStartBCI()->int:::Returns the start bytecode index of the protected range of this handler.
jdk.vm.ci.meta.ExceptionHandler#getEndBCI()->int:::Returns the end bytecode index of the protected range of this handler.
jdk.vm.ci.meta.ExceptionHandler#getHandlerBCI()->int:::Returns the bytecode index of the handler block of this handler.
jdk.vm.ci.meta.ExceptionHandler#catchTypeCPI()->int:::Returns the index into the constant pool representing the type of exception caught by this handler.
jdk.vm.ci.meta.ExceptionHandler#isCatchAll()->boolean:::Checks whether this handler catches all exceptions.
jdk.vm.ci.meta.ExceptionHandler#getCatchType()->JavaType:::Returns the type of exception caught by this exception handler.
jdk.vm.ci.meta.ExceptionHandler#equals(Object)->boolean::: exception handler equals
jdk.vm.ci.meta.ExceptionHandler#toString()->String::: exception handler to string
jdk.vm.ci.meta.ExceptionHandler#hashCode()->int::: exception handler hash code
jdk.vm.ci.meta.JavaConstant#getJavaKind()->JavaKind:::Returns the Java kind of this constant.
jdk.vm.ci.meta.JavaConstant#isNull()->boolean:::Checks whether this constant is null.
jdk.vm.ci.meta.JavaConstant#isNull(Constant)->boolean::: java constant is null
jdk.vm.ci.meta.JavaConstant#isNonNull()->boolean:::Checks whether this constant is non-null.
jdk.vm.ci.meta.JavaConstant#isDefaultForKind()->boolean:::Checks whether this constant is the default value for its kind (null, 0, 0.0, false).
jdk.vm.ci.meta.JavaConstant#asBoxedPrimitive()->Object:::Returns the value of this constant as a boxed Java value.
jdk.vm.ci.meta.JavaConstant#asInt()->int:::Returns the primitive int value this constant represents
jdk.vm.ci.meta.JavaConstant#asBoolean()->boolean:::Returns the primitive boolean value this constant represents
jdk.vm.ci.meta.JavaConstant#asLong()->long:::Returns the primitive long value this constant represents
jdk.vm.ci.meta.JavaConstant#asFloat()->float:::Returns the primitive float value this constant represents
jdk.vm.ci.meta.JavaConstant#asDouble()->double:::Returns the primitive double value this constant represents
jdk.vm.ci.meta.JavaConstant#toValueString()->String::: java constant to value string
jdk.vm.ci.meta.JavaConstant#toString(JavaConstant)->String::: java constant to string
jdk.vm.ci.meta.JavaConstant#forDouble(double)->PrimitiveConstant:::Creates a boxed double constant.
jdk.vm.ci.meta.JavaConstant#forFloat(float)->PrimitiveConstant:::Creates a boxed float constant.
jdk.vm.ci.meta.JavaConstant#forLong(long)->PrimitiveConstant:::Creates a boxed long constant.
jdk.vm.ci.meta.JavaConstant#forInt(int)->PrimitiveConstant:::Creates a boxed integer constant.
jdk.vm.ci.meta.JavaConstant#forByte(byte)->PrimitiveConstant:::Creates a boxed byte constant.
jdk.vm.ci.meta.JavaConstant#forBoolean(boolean)->PrimitiveConstant:::Creates a boxed boolean constant.
jdk.vm.ci.meta.JavaConstant#forChar(char)->PrimitiveConstant:::Creates a boxed char constant.
jdk.vm.ci.meta.JavaConstant#forShort(short)->PrimitiveConstant:::Creates a boxed short constant.
jdk.vm.ci.meta.JavaConstant#forIntegerKind(JavaKind, long)->PrimitiveConstant:::Creates a JavaConstant from a primitive integer of a certain kind.
jdk.vm.ci.meta.JavaConstant#forPrimitiveInt(int, long)->PrimitiveConstant:::Creates a JavaConstant from a primitive integer of a certain width.
jdk.vm.ci.meta.JavaConstant#forBoxedPrimitive(Object)->PrimitiveConstant:::Creates a boxed constant for the given boxed primitive value.
jdk.vm.ci.meta.JavaConstant#forIllegal()->PrimitiveConstant::: java constant for illegal
jdk.vm.ci.meta.JavaConstant#defaultForKind(JavaKind)->JavaConstant:::Returns a constant with the default value for the given kind.
jdk.vm.ci.meta.JavaField#getName()->String:::Returns the name of this field.
jdk.vm.ci.meta.JavaField#getType()->JavaType:::Returns a JavaType object that identifies the declared type for this field.
jdk.vm.ci.meta.JavaField#getJavaKind()->JavaKind:::Returns the kind of this field
jdk.vm.ci.meta.JavaField#getDeclaringClass()->JavaType:::Returns the JavaType object representing the class or interface that declares this field.
jdk.vm.ci.meta.JavaField#format(String)->String:::Gets a string for this field formatted according to a given format specification
jdk.vm.ci.meta.JavaMethod#getName()->String:::Returns the name of this method.
jdk.vm.ci.meta.JavaMethod#getDeclaringClass()->JavaType:::Returns the JavaType object representing the class or interface that declares this method.
jdk.vm.ci.meta.JavaMethod#getSignature()->Signature:::Returns the signature of this method.
jdk.vm.ci.meta.JavaMethod#format(String)->String:::Gets a string for this method formatted according to a given format specification
jdk.vm.ci.meta.JavaMethodProfile#getMethods()->ProfiledMethod[]::: java method profile get methods
jdk.vm.ci.meta.JavaMethodProfile.ProfiledMethod#getMethod()->ResolvedJavaMethod:::Returns the type for this profile entry.
jdk.vm.ci.meta.JavaMethodProfile.ProfiledMethod#toString()->String::: profiled method to string
jdk.vm.ci.meta.JavaType#getName()->String:::Returns the name of this type in internal form
jdk.vm.ci.meta.JavaType#getUnqualifiedName()->String:::Returns an unqualified name of this type
jdk.vm.ci.meta.JavaType#isArray()->boolean:::Checks whether this type is an array class.
jdk.vm.ci.meta.JavaType#getComponentType()->JavaType:::For array types, gets the type of the components, or null if this is not an array type
jdk.vm.ci.meta.JavaType#getElementalType()->JavaType:::Gets the elemental type for this given type
jdk.vm.ci.meta.JavaType#getArrayClass()->JavaType:::Gets the array class type representing an array with elements of this type.
jdk.vm.ci.meta.JavaType#getJavaKind()->JavaKind:::Gets the JavaKind of this type.
jdk.vm.ci.meta.JavaType#resolve(ResolvedJavaType)->ResolvedJavaType:::Resolves this type to a ResolvedJavaType.
jdk.vm.ci.meta.JavaType#toJavaName()->String:::Gets the Java programming language name for this type
jdk.vm.ci.meta.JavaType#toJavaName(boolean)->String:::Gets the Java programming language name for this type
jdk.vm.ci.meta.JavaType#toClassName()->String:::Returns this type's name in the same format as Class#getName().
jdk.vm.ci.meta.JavaTypeProfile#getNullSeen()->TriState:::Returns whether a null value was at the type check.
jdk.vm.ci.meta.JavaTypeProfile#getTypes()->ProfiledType[]:::A list of types for which the runtime has recorded probability information
jdk.vm.ci.meta.JavaTypeProfile#restrict(JavaTypeProfile)->JavaTypeProfile::: java type profile restrict
jdk.vm.ci.meta.JavaTypeProfile#restrict(ResolvedJavaType, boolean)->JavaTypeProfile::: java type profile restrict
jdk.vm.ci.meta.JavaTypeProfile#equals(Object)->boolean::: java type profile equals
jdk.vm.ci.meta.JavaTypeProfile#hashCode()->int::: java type profile hash code
jdk.vm.ci.meta.JavaTypeProfile.ProfiledType#getType()->ResolvedJavaType:::Returns the type for this profile entry.
jdk.vm.ci.meta.JavaTypeProfile.ProfiledType#toString()->String::: profiled type to string
jdk.vm.ci.meta.JavaTypeProfile#toString()->String::: java type profile to string
jdk.vm.ci.meta.JavaTypeProfile#allTypesRecorded()->boolean:::Returns true if all types seen at this location have been recorded in the profile.
jdk.vm.ci.meta.JavaTypeProfile#asSingleType()->ResolvedJavaType:::Returns the single monormorphic type representing this profile or null if no such type exists.
jdk.vm.ci.meta.LineNumberTable#getLineNumber(int)->int:::Gets a source line number for bytecode index atBci.
jdk.vm.ci.meta.LineNumberTable#getLineNumbers()->int[]:::Gets a copy of the array of line numbers that was passed to this object's constructor.
jdk.vm.ci.meta.LineNumberTable#getBcis()->int[]:::Gets a copy of the array of bytecode indexes that was passed to this object's constructor.
jdk.vm.ci.meta.Local#getStartBCI()->int::: local get start i
jdk.vm.ci.meta.Local#getEndBCI()->int::: local get end i
jdk.vm.ci.meta.Local#getName()->String::: local get name
jdk.vm.ci.meta.Local#getType()->JavaType::: local get type
jdk.vm.ci.meta.Local#getSlot()->int::: local get slot
jdk.vm.ci.meta.Local#equals(Object)->boolean::: local equals
jdk.vm.ci.meta.Local#hashCode()->int::: local hash code
jdk.vm.ci.meta.Local#toString()->String::: local to string
jdk.vm.ci.meta.LocalVariableTable#getLocal(int, int)->Local:::Gets a description of a local variable that occupies the bytecode frame slot indexed by slot and is live at the bytecode index bci.
jdk.vm.ci.meta.LocalVariableTable#getLocals()->Local[]:::Gets a copy of the array of Locals that was passed to this object's constructor.
jdk.vm.ci.meta.LocalVariableTable#getLocalsAt(int)->Local[]:::Gets a description of all the local variables live at the bytecode index bci.
jdk.vm.ci.meta.MemoryAccessProvider#readPrimitiveConstant(JavaKind, Constant, long, int)->JavaConstant:::Reads a primitive value using a base address and a displacement.
jdk.vm.ci.meta.MemoryAccessProvider#readObjectConstant(Constant, long)->JavaConstant:::Reads a Java Object value using a base address and a displacement.
jdk.vm.ci.meta.MetaAccessProvider#lookupJavaType(Class)->ResolvedJavaType:::Returns the resolved Java type representing a given Java class.
jdk.vm.ci.meta.MetaAccessProvider#lookupJavaTypes(Class[])->ResolvedJavaType[]:::Returns the resolved Java types representing some given Java classes.
jdk.vm.ci.meta.MetaAccessProvider#lookupJavaMethod(Executable)->ResolvedJavaMethod:::Provides the ResolvedJavaMethod for a Method or Constructor obtained via reflection.
jdk.vm.ci.meta.MetaAccessProvider#lookupJavaField(Field)->ResolvedJavaField:::Provides the ResolvedJavaField for a Field obtained via reflection.
jdk.vm.ci.meta.MetaAccessProvider#lookupJavaType(JavaConstant)->ResolvedJavaType:::Returns the resolved Java type of the given JavaConstant object.
jdk.vm.ci.meta.MetaAccessProvider#getMemorySize(JavaConstant)->long:::Returns the number of bytes occupied by this constant value or constant object.
jdk.vm.ci.meta.MetaAccessProvider#parseMethodDescriptor(String)->Signature:::Parses a method descriptor into a Signature.
jdk.vm.ci.meta.MetaAccessProvider#encodeDeoptActionAndReason(DeoptimizationAction, DeoptimizationReason, int)->JavaConstant:::Encodes a deoptimization action and a deoptimization reason in an integer value.
jdk.vm.ci.meta.MetaAccessProvider#encodeSpeculation(Speculation)->JavaConstant:::Gets a constant that denotes speculation
jdk.vm.ci.meta.MetaAccessProvider#decodeSpeculation(JavaConstant, SpeculationLog)->Speculation:::Decodes constant back to a Speculation object.
jdk.vm.ci.meta.MetaAccessProvider#decodeDeoptReason(JavaConstant)->DeoptimizationReason::: meta access provider decode deopt reason
jdk.vm.ci.meta.MetaAccessProvider#decodeDeoptAction(JavaConstant)->DeoptimizationAction::: meta access provider decode deopt action
jdk.vm.ci.meta.MetaAccessProvider#decodeDebugId(JavaConstant)->int::: meta access provider decode debug id
jdk.vm.ci.meta.MetaAccessProvider#getArrayBaseOffset(JavaKind)->int::: meta access provider get array base offset
jdk.vm.ci.meta.MetaAccessProvider#getArrayIndexScale(JavaKind)->int::: meta access provider get array index scale
jdk.vm.ci.meta.MetaUtil#getSimpleName(Class, boolean)->String:::Extends the functionality of Class#getSimpleName() to include a non-empty string for anonymous and local classes.
jdk.vm.ci.meta.MetaUtil#internalNameToJava(String, boolean, boolean)->String:::Converts a type name in internal form to an external form.
jdk.vm.ci.meta.MetaUtil#toLocation(ResolvedJavaMethod, int)->String:::Convenient shortcut for calling #appendLocation(StringBuilder, ResolvedJavaMethod, int) without having to supply a StringBuilder instance and convert the result to a string.
jdk.vm.ci.meta.MetaUtil#appendLocation(StringBuilder, ResolvedJavaMethod, int)->StringBuilder:::Appends a string representation of a location specified by a given method and bci to a given StringBuilder
jdk.vm.ci.meta.MetaUtil#appendProfile(StringBuilder, AbstractJavaProfile, int, String, String)->void::: meta util append profile
jdk.vm.ci.meta.MetaUtil#toInternalName(String)->String:::Converts a Java source-language class name into the internal form.
jdk.vm.ci.meta.MetaUtil#identityHashCodeString(Object)->String:::Gets a string representation of an object based soley on its class and its System#identityHashCode(Object) identity hash code
jdk.vm.ci.meta.MethodHandleAccessProvider#lookupMethodHandleIntrinsic(ResolvedJavaMethod)->IntrinsicMethod:::Returns the method handle method intrinsic identifier for the provided method, or null if the method is not an intrinsic processed by this interface.
jdk.vm.ci.meta.MethodHandleAccessProvider#resolveInvokeBasicTarget(JavaConstant, boolean)->ResolvedJavaMethod:::Resolves the invocation target for an invocation of IntrinsicMethod#INVOKE_BASIC MethodHandle.invokeBasic with the given constant receiver MethodHandle
jdk.vm.ci.meta.MethodHandleAccessProvider#resolveLinkToTarget(JavaConstant)->ResolvedJavaMethod:::Resolves the invocation target for an invocation of a MethodHandle.linkTo* method with the given constant member name
jdk.vm.ci.meta.ModifiersProvider#getModifiers()->int:::Returns the modifiers for this element.
jdk.vm.ci.meta.ModifiersProvider#isInterface()->boolean::: modifiers provider is interface
jdk.vm.ci.meta.ModifiersProvider#isSynchronized()->boolean::: modifiers provider is synchronized
jdk.vm.ci.meta.ModifiersProvider#isStatic()->boolean::: modifiers provider is static
jdk.vm.ci.meta.ModifiersProvider#isFinalFlagSet()->boolean:::The setting of the final modifier bit for types is somewhat confusing, so don't export isFinal by default
jdk.vm.ci.meta.ModifiersProvider#isPublic()->boolean::: modifiers provider is public
jdk.vm.ci.meta.ModifiersProvider#isPackagePrivate()->boolean:::Determines if this element is neither #isPublic() public, #isProtected() protected nor #isPrivate() private.
jdk.vm.ci.meta.ModifiersProvider#isPrivate()->boolean::: modifiers provider is private
jdk.vm.ci.meta.ModifiersProvider#isProtected()->boolean::: modifiers provider is protected
jdk.vm.ci.meta.ModifiersProvider#isTransient()->boolean::: modifiers provider is transient
jdk.vm.ci.meta.ModifiersProvider#isStrict()->boolean::: modifiers provider is strict
jdk.vm.ci.meta.ModifiersProvider#isVolatile()->boolean::: modifiers provider is volatile
jdk.vm.ci.meta.ModifiersProvider#isNative()->boolean::: modifiers provider is native
jdk.vm.ci.meta.ModifiersProvider#isAbstract()->boolean::: modifiers provider is abstract
jdk.vm.ci.meta.ModifiersProvider#isConcrete()->boolean:::Checks that the method is concrete and not abstract.
jdk.vm.ci.meta.NullConstant#getJavaKind()->JavaKind::: null constant get java kind
jdk.vm.ci.meta.NullConstant#isNull()->boolean::: null constant is null
jdk.vm.ci.meta.NullConstant#isDefaultForKind()->boolean::: null constant is default for kind
jdk.vm.ci.meta.NullConstant#asBoxedPrimitive()->Object::: null constant as boxed primitive
jdk.vm.ci.meta.NullConstant#asInt()->int::: null constant as int
jdk.vm.ci.meta.NullConstant#asBoolean()->boolean::: null constant as boolean
jdk.vm.ci.meta.NullConstant#asLong()->long::: null constant as long
jdk.vm.ci.meta.NullConstant#asFloat()->float::: null constant as float
jdk.vm.ci.meta.NullConstant#asDouble()->double::: null constant as double
jdk.vm.ci.meta.NullConstant#toString()->String::: null constant to string
jdk.vm.ci.meta.NullConstant#toValueString()->String::: null constant to value string
jdk.vm.ci.meta.NullConstant#hashCode()->int::: null constant hash code
jdk.vm.ci.meta.NullConstant#equals(Object)->boolean::: null constant equals
jdk.vm.ci.meta.PlatformKind#name()->String::: platform kind name
jdk.vm.ci.meta.PlatformKind.EnumKey#hashCode()->int::: enum key hash code
jdk.vm.ci.meta.PlatformKind.EnumKey#equals(Object)->boolean::: enum key equals
jdk.vm.ci.meta.PlatformKind#getKey()->Key:::Gets a value associated with this object that can be used as a stable key in a map
jdk.vm.ci.meta.PlatformKind#getSizeInBytes()->int:::Get the size in bytes of this PlatformKind.
jdk.vm.ci.meta.PlatformKind#getVectorLength()->int:::Returns how many primitive values fit in this PlatformKind
jdk.vm.ci.meta.PlatformKind#getTypeChar()->char:::Gets a single type char that identifies this type for use in debug output.
jdk.vm.ci.meta.PrimitiveConstant#forTypeChar(char, long)->PrimitiveConstant::: primitive constant for type char
jdk.vm.ci.meta.PrimitiveConstant#getJavaKind()->JavaKind::: primitive constant get java kind
jdk.vm.ci.meta.PrimitiveConstant#isNull()->boolean::: primitive constant is null
jdk.vm.ci.meta.PrimitiveConstant#isDefaultForKind()->boolean::: primitive constant is default for kind
jdk.vm.ci.meta.PrimitiveConstant#asBoolean()->boolean::: primitive constant as boolean
jdk.vm.ci.meta.PrimitiveConstant#asInt()->int::: primitive constant as int
jdk.vm.ci.meta.PrimitiveConstant#asLong()->long::: primitive constant as long
jdk.vm.ci.meta.PrimitiveConstant#asFloat()->float::: primitive constant as float
jdk.vm.ci.meta.PrimitiveConstant#asDouble()->double::: primitive constant as double
jdk.vm.ci.meta.PrimitiveConstant#asBoxedPrimitive()->Object::: primitive constant as boxed primitive
jdk.vm.ci.meta.PrimitiveConstant#getSerializedSize()->int::: primitive constant get serialized size
jdk.vm.ci.meta.PrimitiveConstant#serialize(ByteBuffer)->void::: primitive constant serialize
jdk.vm.ci.meta.PrimitiveConstant#hashCode()->int::: primitive constant hash code
jdk.vm.ci.meta.PrimitiveConstant#equals(Object)->boolean::: primitive constant equals
jdk.vm.ci.meta.PrimitiveConstant#toString()->String::: primitive constant to string
jdk.vm.ci.meta.ProfilingInfo#getCodeSize()->int:::Returns the length of the bytecodes associated with this profile.
jdk.vm.ci.meta.ProfilingInfo#getBranchTakenProbability(int)->double:::Returns an estimate of how often the branch at the given byte code was taken.
jdk.vm.ci.meta.ProfilingInfo#getSwitchProbabilities(int)->double[]:::Returns an estimate of how often the switch cases are taken at the given BCI
jdk.vm.ci.meta.ProfilingInfo#getTypeProfile(int)->JavaTypeProfile:::Returns the TypeProfile for the given BCI.
jdk.vm.ci.meta.ProfilingInfo#getMethodProfile(int)->JavaMethodProfile:::Returns the MethodProfile for the given BCI.
jdk.vm.ci.meta.ProfilingInfo#getExceptionSeen(int)->TriState:::Returns information if the given BCI did ever throw an exception.
jdk.vm.ci.meta.ProfilingInfo#getNullSeen(int)->TriState:::Returns information if null was ever seen for the given BCI
jdk.vm.ci.meta.ProfilingInfo#getExecutionCount(int)->int:::Returns an estimate how often the current BCI was executed
jdk.vm.ci.meta.ProfilingInfo#getDeoptimizationCount(DeoptimizationReason)->int:::Returns how frequently a method was deoptimized for the given deoptimization reason
jdk.vm.ci.meta.ProfilingInfo#setCompilerIRSize(Class, int)->boolean:::Records the size of the compiler intermediate representation (IR) associated with this method.
jdk.vm.ci.meta.ProfilingInfo#getCompilerIRSize(Class)->int:::Gets the size of the compiler intermediate representation (IR) associated with this method last recorded by #setCompilerIRSize(Class, int).
jdk.vm.ci.meta.ProfilingInfo#isMature()->boolean:::Returns true if the profiling information can be assumed as sufficiently accurate.
jdk.vm.ci.meta.ProfilingInfo#setMature()->void:::Force data to be treated as mature if possible.
jdk.vm.ci.meta.ProfilingInfo#toString(ResolvedJavaMethod, String)->String:::Formats this profiling information to a string.
jdk.vm.ci.meta.ResolvedJavaField#getModifiers()->int:::Only the {@linkplain Modifier#fieldModifiers() field flags specified in the JVM specification will be included in the returned mask.
jdk.vm.ci.meta.ResolvedJavaField#getOffset()->int::: resolved java field get offset
jdk.vm.ci.meta.ResolvedJavaField#isFinal()->boolean::: resolved java field is final
jdk.vm.ci.meta.ResolvedJavaField#isInternal()->boolean:::Determines if this field was injected by the VM
jdk.vm.ci.meta.ResolvedJavaField#isSynthetic()->boolean:::Determines if this field is a synthetic field as defined by the Java Language Specification.
jdk.vm.ci.meta.ResolvedJavaField#getDeclaringClass()->ResolvedJavaType:::Returns the ResolvedJavaType object representing the class or interface that declares this field.
jdk.vm.ci.meta.ResolvedJavaMethod#getCode()->byte[]:::Returns the bytecode of this method, if the method has code
jdk.vm.ci.meta.ResolvedJavaMethod#getCodeSize()->int:::Returns the size of the bytecode of this method, if the method has code
jdk.vm.ci.meta.ResolvedJavaMethod#getDeclaringClass()->ResolvedJavaType:::Returns the ResolvedJavaType object representing the class or interface that declares this method.
jdk.vm.ci.meta.ResolvedJavaMethod#getMaxLocals()->int:::Returns the maximum number of locals used in this method's bytecodes.
jdk.vm.ci.meta.ResolvedJavaMethod#getMaxStackSize()->int:::Returns the maximum number of stack slots used in this method's bytecodes.
jdk.vm.ci.meta.ResolvedJavaMethod#isFinal()->boolean::: resolved java method is final
jdk.vm.ci.meta.ResolvedJavaMethod#isSynthetic()->boolean:::Determines if this method is a synthetic method as defined by the Java Language Specification.
jdk.vm.ci.meta.ResolvedJavaMethod#isVarArgs()->boolean:::Checks that the method is a varargs method.
jdk.vm.ci.meta.ResolvedJavaMethod#isBridge()->boolean:::Checks that the method is a bridge method.
jdk.vm.ci.meta.ResolvedJavaMethod#isDefault()->boolean:::Returns true if this method is a default method; returns false otherwise
jdk.vm.ci.meta.ResolvedJavaMethod#isClassInitializer()->boolean:::Checks whether this method is a class initializer.
jdk.vm.ci.meta.ResolvedJavaMethod#isConstructor()->boolean:::Checks whether this method is a constructor.
jdk.vm.ci.meta.ResolvedJavaMethod#canBeStaticallyBound()->boolean:::Checks whether this method can be statically bound (usually, that means it is final or private or static, but not abstract, or the declaring class is final).
jdk.vm.ci.meta.ResolvedJavaMethod#getExceptionHandlers()->ExceptionHandler[]:::Returns the list of exception handlers for this method.
jdk.vm.ci.meta.ResolvedJavaMethod#asStackTraceElement(int)->StackTraceElement:::Returns a stack trace element for this method and a given bytecode index.
jdk.vm.ci.meta.ResolvedJavaMethod#getProfilingInfo()->ProfilingInfo:::Returns an object that provides access to the profiling information recorded for this method.
jdk.vm.ci.meta.ResolvedJavaMethod#getProfilingInfo(boolean, boolean)->ProfilingInfo:::Returns an object that provides access to the profiling information recorded for this method.
jdk.vm.ci.meta.ResolvedJavaMethod#reprofile()->void:::Invalidates the profiling information and restarts profiling upon the next invocation.
jdk.vm.ci.meta.ResolvedJavaMethod#getConstantPool()->ConstantPool:::Returns the constant pool of this method.
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#getName()->String:::Gets the name of the parameter
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#getDeclaringMethod()->ResolvedJavaMethod:::Gets the method declaring the parameter.
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#getModifiers()->int:::Get the modifier flags for the parameter.
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#getKind()->JavaKind:::Gets the kind of the parameter.
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#getParameterizedType()->Type:::Gets the formal type of the parameter.
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#getType()->JavaType:::Gets the type of the parameter.
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#isNamePresent()->boolean:::Determines if the parameter has a name according to a MethodParameters class file attribute.
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#isVarArgs()->boolean:::Determines if the parameter represents a variable argument list.
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#getAnnotation(Class)->T::: parameter get annotation
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#getAnnotations()->Annotation[]::: parameter get annotations
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#getDeclaredAnnotations()->Annotation[]::: parameter get declared annotations
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#toString()->String::: parameter to string
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#equals(Object)->boolean::: parameter equals
jdk.vm.ci.meta.ResolvedJavaMethod.Parameter#hashCode()->int::: parameter hash code
jdk.vm.ci.meta.ResolvedJavaMethod#getParameters()->Parameter[]:::Returns an array of Parameter objects that represent all the parameters to this method
jdk.vm.ci.meta.ResolvedJavaMethod#getParameterAnnotations()->Annotation[][]:::Returns an array of arrays that represent the annotations on the formal parameters, in declaration order, of this method.
jdk.vm.ci.meta.ResolvedJavaMethod#getGenericParameterTypes()->Type[]:::Returns an array of Type objects that represent the formal parameter types, in declaration order, of this method.
jdk.vm.ci.meta.ResolvedJavaMethod#canBeInlined()->boolean:::Returns true if this method is not excluded from inlining and has associated Java bytecodes (@see ResolvedJavaMethod#hasBytecodes()).
jdk.vm.ci.meta.ResolvedJavaMethod#hasNeverInlineDirective()->boolean:::Determines if this method is targeted by a VM directive (e.g., -XX:CompileCommand=dontinline,<pattern>) or VM recognized annotation (e.g., jdk.internal.vm.annotation.DontInline) that specifies it should not be inlined.
jdk.vm.ci.meta.ResolvedJavaMethod#shouldBeInlined()->boolean:::Returns true if the inlining of this method should be forced.
jdk.vm.ci.meta.ResolvedJavaMethod#getLineNumberTable()->LineNumberTable:::Returns the LineNumberTable of this method or null if this method does not have a line numbers table.
jdk.vm.ci.meta.ResolvedJavaMethod#getLocalVariableTable()->LocalVariableTable:::Returns the local variable table of this method or null if this method does not have a local variable table.
jdk.vm.ci.meta.ResolvedJavaMethod#getEncoding()->Constant:::Gets the encoding of (that is, a constant representing the value of) this method.
jdk.vm.ci.meta.ResolvedJavaMethod#isInVirtualMethodTable(ResolvedJavaType)->boolean:::Checks if this method is present in the virtual table for subtypes of the specified ResolvedJavaType type.
jdk.vm.ci.meta.ResolvedJavaMethod#getParameterAnnotation(Class, int)->T:::Gets the annotation of a particular type for a formal parameter of this method.
jdk.vm.ci.meta.ResolvedJavaMethod#toParameterTypes()->JavaType[]::: resolved java method to parameter types
jdk.vm.ci.meta.ResolvedJavaMethod#getParameterAnnotations(Class)->T[]:::Gets the annotations of a particular type for the formal parameters of this method.
jdk.vm.ci.meta.ResolvedJavaMethod#hasBytecodes()->boolean:::Checks whether the method has bytecodes associated with it
jdk.vm.ci.meta.ResolvedJavaMethod#hasReceiver()->boolean:::Checks whether the method has a receiver parameter - i.e., whether it is not static.
jdk.vm.ci.meta.ResolvedJavaMethod#isJavaLangObjectInit()->boolean:::Determines if this method is java.lang.Object#Object().
jdk.vm.ci.meta.ResolvedJavaMethod#getSpeculationLog()->SpeculationLog:::Gets a speculation log that can be used when compiling this method to make new speculations and query previously failed speculations
jdk.vm.ci.meta.ResolvedJavaType#hasFinalizer()->boolean:::Checks whether this type has a finalizer method.
jdk.vm.ci.meta.ResolvedJavaType#hasFinalizableSubclass()->AssumptionResult:::Checks whether this type has any finalizable subclasses so far
jdk.vm.ci.meta.ResolvedJavaType#isInterface()->boolean:::Checks whether this type is an interface.
jdk.vm.ci.meta.ResolvedJavaType#isInstanceClass()->boolean:::Checks whether this type is an instance class.
jdk.vm.ci.meta.ResolvedJavaType#isPrimitive()->boolean:::Checks whether this type is primitive.
jdk.vm.ci.meta.ResolvedJavaType#isLeaf()->boolean::: resolved java type is leaf
jdk.vm.ci.meta.ResolvedJavaType#isEnum()->boolean:::Checks whether this type is an enum.
jdk.vm.ci.meta.ResolvedJavaType#isInitialized()->boolean:::Checks whether this type is initialized
jdk.vm.ci.meta.ResolvedJavaType#initialize()->void:::Initializes this type.
jdk.vm.ci.meta.ResolvedJavaType#isLinked()->boolean:::Checks whether this type is linked and verified
jdk.vm.ci.meta.ResolvedJavaType#isAssignableFrom(ResolvedJavaType)->boolean:::Determines if this type is either the same as, or is a superclass or superinterface of, the type represented by the specified parameter
jdk.vm.ci.meta.ResolvedJavaType#getHostClass()->ResolvedJavaType:::Returns the ResolvedJavaType object representing the host class of this VM anonymous class (as opposed to the unrelated concept specified by Class#isAnonymousClass()) or null if this object does not represent a VM anonymous class.
jdk.vm.ci.meta.ResolvedJavaType#isJavaLangObject()->boolean:::Returns true if this type is exactly the type java.lang.Object.
jdk.vm.ci.meta.ResolvedJavaType#isInstance(JavaConstant)->boolean:::Checks whether the specified object is an instance of this type.
jdk.vm.ci.meta.ResolvedJavaType#getSuperclass()->ResolvedJavaType:::Gets the super class of this type
jdk.vm.ci.meta.ResolvedJavaType#getInterfaces()->ResolvedJavaType[]:::Gets the interfaces implemented or extended by this type
jdk.vm.ci.meta.ResolvedJavaType#getSingleImplementor()->ResolvedJavaType:::Gets the single implementor of this type
jdk.vm.ci.meta.ResolvedJavaType#findLeastCommonAncestor(ResolvedJavaType)->ResolvedJavaType:::Walks the class hierarchy upwards and returns the least common class that is a superclass of both the current and the given type.
jdk.vm.ci.meta.ResolvedJavaType#findLeafConcreteSubtype()->AssumptionResult:::Attempts to get a leaf concrete subclass of this type
jdk.vm.ci.meta.ResolvedJavaType#getComponentType()->ResolvedJavaType::: resolved java type get component type
jdk.vm.ci.meta.ResolvedJavaType#getElementalType()->ResolvedJavaType::: resolved java type get elemental type
jdk.vm.ci.meta.ResolvedJavaType#getArrayClass()->ResolvedJavaType::: resolved java type get array class
jdk.vm.ci.meta.ResolvedJavaType#resolveMethod(ResolvedJavaMethod, ResolvedJavaType)->ResolvedJavaMethod:::Resolves the method implementation for virtual dispatches on objects of this dynamic type
jdk.vm.ci.meta.ResolvedJavaType#resolveConcreteMethod(ResolvedJavaMethod, ResolvedJavaType)->ResolvedJavaMethod:::A convenience wrapper for #resolveMethod(ResolvedJavaMethod, ResolvedJavaType) that only returns non-abstract methods.
jdk.vm.ci.meta.ResolvedJavaType#findUniqueConcreteMethod(ResolvedJavaMethod)->AssumptionResult:::Given a ResolvedJavaMethod A, returns a concrete ResolvedJavaMethod B that is the only possible unique target for a virtual call on A()
jdk.vm.ci.meta.ResolvedJavaType#getInstanceFields(boolean)->ResolvedJavaField[]:::Returns the instance fields of this class, including ResolvedJavaField#isInternal() internal fields
jdk.vm.ci.meta.ResolvedJavaType#getStaticFields()->ResolvedJavaField[]:::Returns the static fields of this class, including ResolvedJavaField#isInternal() internal fields
jdk.vm.ci.meta.ResolvedJavaType#findInstanceFieldWithOffset(long, JavaKind)->ResolvedJavaField:::Returns the instance field of this class (or one of its super classes) at the given offset, or null if there is no such field.
jdk.vm.ci.meta.ResolvedJavaType#getSourceFileName()->String:::Returns name of source file of this type.
jdk.vm.ci.meta.ResolvedJavaType#isLocal()->boolean:::Returns true if the type is a local type.
jdk.vm.ci.meta.ResolvedJavaType#isMember()->boolean:::Returns true if the type is a member type.
jdk.vm.ci.meta.ResolvedJavaType#getEnclosingType()->ResolvedJavaType:::Returns the enclosing type of this type, if it exists, or null.
jdk.vm.ci.meta.ResolvedJavaType#getDeclaredConstructors()->ResolvedJavaMethod[]:::Returns an array reflecting all the constructors declared by this type
jdk.vm.ci.meta.ResolvedJavaType#getDeclaredMethods()->ResolvedJavaMethod[]:::Returns an array reflecting all the methods declared by this type
jdk.vm.ci.meta.ResolvedJavaType#getClassInitializer()->ResolvedJavaMethod:::Returns the <clinit> method for this class if there is one.
jdk.vm.ci.meta.ResolvedJavaType#findMethod(String, Signature)->ResolvedJavaMethod::: resolved java type find method
jdk.vm.ci.meta.ResolvedJavaType#isCloneableWithAllocation()->boolean:::Returns true if this type is Cloneable and can be safely cloned by creating a normal Java allocation and populating it from the fields returned by #getInstanceFields(boolean)
jdk.vm.ci.meta.ResolvedJavaType#lookupType(UnresolvedJavaType, boolean)->ResolvedJavaType:::Lookup an unresolved type relative to an existing resolved type.
jdk.vm.ci.meta.ResolvedJavaType#resolveField(UnresolvedJavaField, ResolvedJavaType)->ResolvedJavaField::: resolved java type resolve field
jdk.vm.ci.meta.SerializableConstant#getSerializedSize()->int:::Return the size in bytes of the serialized representation of this constant.
jdk.vm.ci.meta.SerializableConstant#serialize(ByteBuffer)->void:::Serialize the constant into the ByteBuffer
jdk.vm.ci.meta.Signature#getParameterCount(boolean)->int:::Returns the number of parameters in this signature, adding 1 for a receiver if requested.
jdk.vm.ci.meta.Signature#getParameterType(int, ResolvedJavaType)->JavaType:::Gets the parameter type at the specified position.
jdk.vm.ci.meta.Signature#getParameterKind(int)->JavaKind:::Gets the parameter kind at the specified position
jdk.vm.ci.meta.Signature#getReturnType(ResolvedJavaType)->JavaType:::Gets the return type of this signature.
jdk.vm.ci.meta.Signature#getReturnKind()->JavaKind:::Gets the return kind of this signature
jdk.vm.ci.meta.Signature#toMethodDescriptor()->String:::Gets the method descriptor corresponding to this signature
jdk.vm.ci.meta.Signature#toParameterTypes(JavaType)->JavaType[]::: signature to parameter types
jdk.vm.ci.meta.Signature#toParameterKinds(boolean)->JavaKind[]::: signature to parameter kinds
jdk.vm.ci.meta.SpeculationLog.SpeculationReason#encode(Supplier)->SpeculationReasonEncoding:::Encodes the attributes of this reason using a SpeculationReasonEncoding
jdk.vm.ci.meta.SpeculationLog.SpeculationReasonEncoding#addByte(int)->void::: speculation reason encoding add byte
jdk.vm.ci.meta.SpeculationLog.SpeculationReasonEncoding#addShort(int)->void::: speculation reason encoding add short
jdk.vm.ci.meta.SpeculationLog.SpeculationReasonEncoding#addInt(int)->void::: speculation reason encoding add int
jdk.vm.ci.meta.SpeculationLog.SpeculationReasonEncoding#addLong(long)->void::: speculation reason encoding add long
jdk.vm.ci.meta.SpeculationLog.SpeculationReasonEncoding#addMethod(ResolvedJavaMethod)->void::: speculation reason encoding add method
jdk.vm.ci.meta.SpeculationLog.SpeculationReasonEncoding#addType(ResolvedJavaType)->void::: speculation reason encoding add type
jdk.vm.ci.meta.SpeculationLog.SpeculationReasonEncoding#addString(String)->void::: speculation reason encoding add string
jdk.vm.ci.meta.SpeculationLog.SpeculationReasonEncoding#addField(ResolvedJavaField)->void::: speculation reason encoding add field
jdk.vm.ci.meta.SpeculationLog.Speculation#getReason()->SpeculationReason::: speculation get reason
jdk.vm.ci.meta.SpeculationLog.Speculation#toString()->String::: speculation to string
jdk.vm.ci.meta.SpeculationLog.Speculation#equals(Object)->boolean::: speculation equals
jdk.vm.ci.meta.SpeculationLog.Speculation#hashCode()->int::: speculation hash code
jdk.vm.ci.meta.SpeculationLog#collectFailedSpeculations()->void:::Updates the set of failed speculations recorded in this log
jdk.vm.ci.meta.SpeculationLog#maySpeculate(SpeculationReason)->boolean:::If this method returns true, the compiler is allowed to #speculate with the given reason.
jdk.vm.ci.meta.SpeculationLog#speculate(SpeculationReason)->Speculation:::Registers a speculation performed by the compiler
jdk.vm.ci.meta.SpeculationLog#hasSpeculations()->boolean:::Returns if this log has speculations.
jdk.vm.ci.meta.SpeculationLog#lookupSpeculation(JavaConstant)->Speculation:::Given a JavaConstant previously returned from MetaAccessProvider#encodeSpeculation(Speculation) return the original Speculation object.
jdk.vm.ci.meta.UnresolvedJavaField#getName()->String::: unresolved java field get name
jdk.vm.ci.meta.UnresolvedJavaField#getType()->JavaType::: unresolved java field get type
jdk.vm.ci.meta.UnresolvedJavaField#getDeclaringClass()->JavaType::: unresolved java field get declaring class
jdk.vm.ci.meta.UnresolvedJavaField#hashCode()->int::: unresolved java field hash code
jdk.vm.ci.meta.UnresolvedJavaField#equals(Object)->boolean::: unresolved java field equals
jdk.vm.ci.meta.UnresolvedJavaField#toString()->String:::Converts this compiler interface field to a string.
jdk.vm.ci.meta.UnresolvedJavaField#resolve(ResolvedJavaType)->ResolvedJavaField::: unresolved java field resolve
jdk.vm.ci.meta.UnresolvedJavaMethod#getName()->String::: unresolved java method get name
jdk.vm.ci.meta.UnresolvedJavaMethod#getSignature()->Signature::: unresolved java method get signature
jdk.vm.ci.meta.UnresolvedJavaMethod#getDeclaringClass()->JavaType::: unresolved java method get declaring class
jdk.vm.ci.meta.UnresolvedJavaMethod#hashCode()->int::: unresolved java method hash code
jdk.vm.ci.meta.UnresolvedJavaMethod#equals(Object)->boolean::: unresolved java method equals
jdk.vm.ci.meta.UnresolvedJavaType#getName()->String::: unresolved java type get name
jdk.vm.ci.meta.UnresolvedJavaType#create(String)->UnresolvedJavaType:::Creates an unresolved type for a valid JavaType#getName() type name.
jdk.vm.ci.meta.UnresolvedJavaType#getComponentType()->JavaType::: unresolved java type get component type
jdk.vm.ci.meta.UnresolvedJavaType#getArrayClass()->JavaType::: unresolved java type get array class
jdk.vm.ci.meta.UnresolvedJavaType#getJavaKind()->JavaKind::: unresolved java type get java kind
jdk.vm.ci.meta.UnresolvedJavaType#hashCode()->int::: unresolved java type hash code
jdk.vm.ci.meta.UnresolvedJavaType#equals(Object)->boolean::: unresolved java type equals
jdk.vm.ci.meta.UnresolvedJavaType#toString()->String::: unresolved java type to string
jdk.vm.ci.meta.UnresolvedJavaType#resolve(ResolvedJavaType)->ResolvedJavaType::: unresolved java type resolve
jdk.vm.ci.meta.Value#getKindSuffix()->String:::Returns a String representation of the kind, which should be the end of all #toString() implementation of subclasses.
jdk.vm.ci.meta.Value#getValueKind()->ValueKind::: value get value kind
jdk.vm.ci.meta.Value#getValueKind(Class)->K::: value get value kind
jdk.vm.ci.meta.Value#getPlatformKind()->PlatformKind:::Returns the platform specific kind used to store this value.
jdk.vm.ci.meta.Value#hashCode()->int::: value hash code
jdk.vm.ci.meta.Value#equals(Object)->boolean::: value equals
jdk.vm.ci.meta.Value#identityEquals(Value)->boolean:::Checks if this value is identical to other
jdk.vm.ci.meta.ValueKind#getPlatformKind()->PlatformKind::: value kind get platform kind
jdk.vm.ci.meta.ValueKind#changeType(PlatformKind)->K:::Create a new ValueKind with a different PlatformKind
jdk.vm.ci.meta.ValueKind#getKindSuffix()->String:::Returns a String representation of the kind, which will be included at the end of Value#toString() implementation

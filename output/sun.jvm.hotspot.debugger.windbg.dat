DLL#isDLL():::Indicates whether this is really a DLL or actually a .EXE       file.:::return->getFile->getHeader->hasCharacteristic
DLL#lookupSymbol(String):::Look up a symbol; returns absolute address or null if symbol was       not found.:::if->isDLL->return->exports->getExportDirectoryTable->return->exports->getNumberOfNamePointers->lookupSymbol
DLL#getName():::Returns the full path name of this DLL/EXE, or null if this DLL       object was created by parsing the target process's address       space.:::return
WindbgAddress#minus(Address):::(FIXME: any signed/unsigned issues? Should this work for       OopHandles?):::if->return->return
WindbgDebuggerLocal#hasProcessList():::From the Debugger interface via JVMDebugger:::return
WindbgDebuggerLocal#getProcessList():::From the Debugger interface via JVMDebugger:::return
WindbgDebuggerLocal#attach(int):::From the Debugger interface via JVMDebugger:::attachInit->attach0
WindbgDebuggerLocal#attach(String, String):::From the Debugger interface via JVMDebugger:::attachInit->attach0
WindbgDebuggerLocal#detach():::From the Debugger interface via JVMDebugger:::if->return->if->for->iter->nameToDllMap->values->iterator->iter->hasNext->clearCache->try->detach0->catch->finally->resetNativePointers->return
WindbgDebuggerLocal#parseAddress(String):::From the Debugger interface via JVMDebugger:::return->utils->scanAddress->newAddress
WindbgDebuggerLocal#getOS():::From the Debugger interface via JVMDebugger:::return->PlatformInfo->getOS
WindbgDebuggerLocal#getCPU():::From the Debugger interface via JVMDebugger:::return->PlatformInfo->getCPU
WindbgDebuggerLocal#lookup(String, String):::From the SymbolLookup interface via Debugger and JVMDebugger:::requireAttach->return->lookupByName->newAddress
WindbgDebuggerLocal#lookupOop(String, String):::From the SymbolLookup interface via Debugger and JVMDebugger:::addr->lookup->if->return->return->addr->addOffsetToAsOopHandle
WindbgDebuggerLocal#getMachineDescription():::From the Debugger interface:::return
WindbgDebuggerLocal#getThreadForIdentifierAddress(Address):::From the ThreadAccess interface via Debugger and JVMDebugger:::return->threadFactory->createThreadWrapper
WindbgDebuggerLocal#addressValueToString(long):::From the WindbgDebugger interface:::return->utils->addressValueToString
WindbgDebuggerLocal#readAddress(long):::From the WindbgDebugger interface:::return->readAddressValue->newAddress
WindbgDebuggerLocal#readOopHandle(long):::From the WindbgDebugger interface:::value->readAddressValue->return->new->WindbgOopHandle
WindbgDebuggerLocal#getAddressSize():::From the WindbgDebugger interface:::return->machDesc->getAddressSize
WindbgDebuggerLocal#getAddressValue(Address):::From the Debugger interface:::if->return->return->getValue
WindbgDebuggerLocal#newAddress(long):::From the WindbgDebugger interface:::if->return->return->new->WindbgAddress
WindbgDebuggerLocal#readBytesFromProcess(long, long):::This reads bytes from the remote process.:::requireAttach->res->readBytesFromProcess0->if->return->new->ReadResult->else->return->new->ReadResult

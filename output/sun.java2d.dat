sun.java2d.DefaultDisposerRecord#dispose()->void::: default disposer record dispose
sun.java2d.DefaultDisposerRecord#getDataPointer()->long::: default disposer record get data pointer
sun.java2d.DefaultDisposerRecord#getDisposerMethodPointer()->long::: default disposer record get disposer method pointer
sun.java2d.DefaultDisposerRecord#invokeNativeDispose(long, long)->void::: default disposer record invoke native dispose
sun.java2d.DestSurfaceProvider#getDestSurface()->Surface:::Returns a surface currently used as a destination surface for rendering.
sun.java2d.Disposer#addRecord(Object, long, long)->void:::Registers the object and the native data for later disposal.
sun.java2d.Disposer#addRecord(Object, DisposerRecord)->void:::Registers the object and the native data for later disposal.
sun.java2d.Disposer#add(Object, DisposerRecord)->void:::Performs the actual registration of the target object to be disposed.
sun.java2d.Disposer#run()->void::: disposer run
sun.java2d.Disposer#pollRemove()->void::: disposer poll remove
sun.java2d.Disposer#addReference(Reference, DisposerRecord)->void::: disposer add reference
sun.java2d.Disposer#addObjectRecord(Object, DisposerRecord)->void::: disposer add object record
sun.java2d.Disposer#getQueue()->ReferenceQueue::: disposer get queue
sun.java2d.DisposerRecord#dispose()->void::: disposer record dispose
sun.java2d.DisposerTarget#getDisposerReferent()->Object:::Returns an object which will be used as the referent in the ReferenceQueue
sun.java2d.FontSupport#getFontConfiguration()->FontConfiguration:::Returns the current font configuration.
sun.java2d.HeadlessGraphicsEnvironment#getScreenDevices()->GraphicsDevice[]::: headless graphics environment get screen devices
sun.java2d.HeadlessGraphicsEnvironment#getDefaultScreenDevice()->GraphicsDevice::: headless graphics environment get default screen device
sun.java2d.HeadlessGraphicsEnvironment#getCenterPoint()->Point::: headless graphics environment get center point
sun.java2d.HeadlessGraphicsEnvironment#getMaximumWindowBounds()->Rectangle::: headless graphics environment get maximum window bounds
sun.java2d.HeadlessGraphicsEnvironment#createGraphics(BufferedImage)->Graphics2D::: headless graphics environment create graphics
sun.java2d.HeadlessGraphicsEnvironment#getAllFonts()->Font[]::: headless graphics environment get all fonts
sun.java2d.HeadlessGraphicsEnvironment#getAvailableFontFamilyNames()->String[]::: headless graphics environment get available font family names
sun.java2d.HeadlessGraphicsEnvironment#getAvailableFontFamilyNames(Locale)->String[]::: headless graphics environment get available font family names
sun.java2d.HeadlessGraphicsEnvironment#getSunGraphicsEnvironment()->GraphicsEnvironment::: headless graphics environment get sun graphics environment
sun.java2d.NullSurfaceData#invalidate()->void:::Sets this SurfaceData object to the invalid state
sun.java2d.NullSurfaceData#getReplacement()->SurfaceData:::Return a new SurfaceData object that represents the current state of the destination that this SurfaceData object describes
sun.java2d.NullSurfaceData#validatePipe(SunGraphics2D)->void::: null surface data validate pipe
sun.java2d.NullSurfaceData#getDeviceConfiguration()->GraphicsConfiguration::: null surface data get device configuration
sun.java2d.NullSurfaceData#getRaster(int, int, int, int)->Raster:::Return a readable Raster which contains the pixels for the specified rectangular region of the destination surface
sun.java2d.NullSurfaceData#useTightBBoxes()->boolean:::Does the pixel accessibility of the destination surface suggest that rendering algorithms might want to take extra time to calculate a more accurate bounding box for the operation being performed? The typical case when this will be true is when a copy of the pixels has to be made when doing a getRaster
sun.java2d.NullSurfaceData#pixelFor(int)->int:::Returns the pixel data for the specified Argb value packed into an integer for easy storage and conveyance.
sun.java2d.NullSurfaceData#rgbFor(int)->int:::Returns the Argb representation for the specified integer value which is packed in the format of the associated ColorModel.
sun.java2d.NullSurfaceData#getBounds()->Rectangle:::Returns the bounds of the destination surface.
sun.java2d.NullSurfaceData#checkCustomComposite()->void:::Performs Security Permissions checks to see if a Custom Composite object should be allowed access to the pixels of this surface.
sun.java2d.NullSurfaceData#copyArea(SunGraphics2D, int, int, int, int, int, int)->boolean:::Performs a copyarea within this surface
sun.java2d.NullSurfaceData#getDestination()->Object:::Returns destination Image associated with this SurfaceData (null)
sun.java2d.ReentrantContextProvider#newContext()->K:::Create a new ReentrantContext instance
sun.java2d.ReentrantContextProvider#acquire()->K:::Give a ReentrantContext instance for the current thread
sun.java2d.ReentrantContextProvider#release(K)->void:::Restore the given ReentrantContext instance for reuse
sun.java2d.ReentrantContextProvider#getOrCreateReference(K)->Reference::: reentrant context provider get or create reference
sun.java2d.ReentrantContextProvider.HardReference#get()->V::: hard reference get
sun.java2d.ReentrantContextProviderCLQ#acquire()->K:::Give a ReentrantContext instance for the current thread
sun.java2d.ReentrantContextProviderCLQ#release(K)->void:::Restore the given ReentrantContext instance for reuse
sun.java2d.ReentrantContextProviderTL#acquire()->K:::Give a ReentrantContext instance for the current thread
sun.java2d.ReentrantContextProviderTL#release(K)->void:::Restore the given ReentrantContext instance for reuse
sun.java2d.ScreenUpdateManager#createGraphics(SurfaceData, WComponentPeer, Color, Color, Font)->Graphics2D:::Creates a SunGraphics2D object for the surface, given the parameters.
sun.java2d.ScreenUpdateManager#createScreenSurface(Win32GraphicsConfig, WComponentPeer, int, boolean)->SurfaceData:::Creates and returns the surface for the peer
sun.java2d.ScreenUpdateManager#dropScreenSurface(SurfaceData)->void:::Drops the passed surface from the list of managed surfaces
sun.java2d.ScreenUpdateManager#getReplacementScreenSurface(WComponentPeer, SurfaceData)->SurfaceData:::Returns a replacement SurfaceData for the invalid passed one
sun.java2d.ScreenUpdateManager#getInstance()->ScreenUpdateManager:::Returns an (singleton) instance of the screen surfaces manager class.
sun.java2d.Spans#add(float, float)->void:::Add a span covering the half open interval including start up to but not including end.
sun.java2d.Spans#addInfinite()->void:::Add a span which covers the entire range
sun.java2d.Spans#intersects(float, float)->boolean:::Returns true if the span defined by the half-open interval from start up to, but not including, end intersects any of the spans defined by this instance.
sun.java2d.Spans.Span#getStart()->float:::Return the start of the Span
sun.java2d.Spans.Span#getEnd()->float:::Return the end of the Span
sun.java2d.Spans.Span#setStart(float)->void:::Change the initial position of the Span.
sun.java2d.Spans.Span#setEnd(float)->void:::Change the terminal position of the Span.
sun.java2d.Spans.Span#subsume(Span)->boolean:::Attempt to alter this Span to include otherSpan without altering this span's starting position
sun.java2d.Spans.Span#contains(float)->boolean:::Return true if the passed in position lies in the half-open interval defined by this Span.
sun.java2d.Spans.Span#compareTo(Span)->int:::Rank spans according to their starting position
sun.java2d.Spans.Span#toString()->String::: span to string
sun.java2d.Spans.SpanIntersection#compare(Span, Span)->int::: span intersection compare
sun.java2d.StateTrackable#getState()->State:::Returns the general state of the complex data held by this object
sun.java2d.StateTrackable#getStateTracker()->StateTracker:::Returns an object which can track future changes to the complex data stored in this object
sun.java2d.StateTrackableDelegate#createInstance(State)->StateTrackableDelegate:::Returns a StateTrackableDelegate instance with the specified initial State State
sun.java2d.StateTrackableDelegate#getState()->State::: state trackable delegate get state
sun.java2d.StateTrackableDelegate#getStateTracker()->StateTracker::: state trackable delegate get state tracker
sun.java2d.StateTrackableDelegate#setImmutable()->void:::This method provides an easy way for delegating classes to change the overall State State of the delegate to State#IMMUTABLE IMMUTABLE.
sun.java2d.StateTrackableDelegate#setUntrackable()->void:::This method provides an easy way for delegating classes to change the overall State State of the delegate to State#UNTRACKABLE UNTRACKABLE
sun.java2d.StateTrackableDelegate#addDynamicAgent()->void:::This method provides an easy way for delegating classes to manage temporarily setting the overall State State of the delegate to State#DYNAMIC DYNAMIC during well-defined time frames of dynamic pixel updating
sun.java2d.StateTrackableDelegate#removeDynamicAgent()->void:::This method provides an easy way for delegating classes to manage restoring the overall State State of the delegate back to State#STABLE STABLE after a well-defined time frame of dynamic pixel updating
sun.java2d.StateTrackableDelegate#markDirty()->void:::This method provides an easy way for delegating classes to indicate that the contents have changed
sun.java2d.StateTracker#isCurrent()->boolean:::Returns true iff the contents of the complex data of the associated StateTrackable object have not changed since the time that this StateTracker was returned from its getStateTracker() method.
sun.java2d.SunCompositeContext#dispose()->void:::Release resources allocated for context.
sun.java2d.SunCompositeContext#compose(Raster, Raster, WritableRaster)->void:::This method composes the two source tiles and places the result in the destination tile
sun.java2d.SunGraphics2D#clone()->Object::: sun graphics2 d clone
sun.java2d.SunGraphics2D#create()->Graphics:::Create a new SunGraphics2D based on this one.
sun.java2d.SunGraphics2D#setDevClip(int, int, int, int)->void::: sun graphics2 d set dev clip
sun.java2d.SunGraphics2D#setDevClip(Rectangle)->void::: sun graphics2 d set dev clip
sun.java2d.SunGraphics2D#constrain(int, int, int, int, Region)->void:::Constrain rendering for lightweight objects.
sun.java2d.SunGraphics2D#constrain(int, int, int, int)->void:::Constrain rendering for lightweight objects
sun.java2d.SunGraphics2D#invalidatePipe()->void::: sun graphics2 d invalidate pipe
sun.java2d.SunGraphics2D#validatePipe()->void::: sun graphics2 d validate pipe
sun.java2d.SunGraphics2D#intersectShapes(Shape, Shape, boolean, boolean)->Shape::: sun graphics2 d intersect shapes
sun.java2d.SunGraphics2D#intersectRectShape(Rectangle2D, Shape, boolean, boolean)->Shape::: sun graphics2 d intersect rect shape
sun.java2d.SunGraphics2D#cloneShape(Shape)->Shape::: sun graphics2 d clone shape
sun.java2d.SunGraphics2D#intersectByArea(Shape, Shape, boolean, boolean)->Shape::: sun graphics2 d intersect by area
sun.java2d.SunGraphics2D#getCompClip()->Region::: sun graphics2 d get comp clip
sun.java2d.SunGraphics2D#getFont()->Font::: sun graphics2 d get font
sun.java2d.SunGraphics2D#checkFontInfo(FontInfo, Font, FontRenderContext)->FontInfo::: sun graphics2 d check font info
sun.java2d.SunGraphics2D#isRotated(double[])->boolean::: sun graphics2 d is rotated
sun.java2d.SunGraphics2D#setFont(Font)->void::: sun graphics2 d set font
sun.java2d.SunGraphics2D#getFontInfo()->FontInfo::: sun graphics2 d get font info
sun.java2d.SunGraphics2D#getGVFontInfo(Font, FontRenderContext)->FontInfo::: sun graphics2 d get font info
sun.java2d.SunGraphics2D#getFontMetrics()->FontMetrics::: sun graphics2 d get font metrics
sun.java2d.SunGraphics2D#getFontMetrics(Font)->FontMetrics::: sun graphics2 d get font metrics
sun.java2d.SunGraphics2D#hit(Rectangle, Shape, boolean)->boolean:::Checks to see if a Path intersects the specified Rectangle in device space
sun.java2d.SunGraphics2D#getDeviceColorModel()->ColorModel:::Return the ColorModel associated with this Graphics2D.
sun.java2d.SunGraphics2D#getDeviceConfiguration()->GraphicsConfiguration:::Return the device configuration associated with this Graphics2D.
sun.java2d.SunGraphics2D#getSurfaceData()->SurfaceData:::Return the SurfaceData object assigned to manage the destination drawable surface of this Graphics2D.
sun.java2d.SunGraphics2D#setComposite(Composite)->void:::Sets the Composite in the current graphics state
sun.java2d.SunGraphics2D#setPaint(Paint)->void:::Sets the Paint in the current graphics state.
sun.java2d.SunGraphics2D#setStroke(Stroke)->void::: sun graphics2 d set stroke
sun.java2d.SunGraphics2D#setRenderingHint(Key, Object)->void:::Sets the preferences for the rendering algorithms
sun.java2d.SunGraphics2D#getRenderingHint(Key)->Object:::Returns the preferences for the rendering algorithms.
sun.java2d.SunGraphics2D#setRenderingHints(Map)->void:::Sets the preferences for the rendering algorithms
sun.java2d.SunGraphics2D#addRenderingHints(Map)->void:::Adds a number of preferences for the rendering algorithms
sun.java2d.SunGraphics2D#getRenderingHints()->RenderingHints:::Gets the preferences for the rendering algorithms
sun.java2d.SunGraphics2D#makeHints(Map)->RenderingHints::: sun graphics2 d make hints
sun.java2d.SunGraphics2D#translate(double, double)->void:::Concatenates the current transform of this Graphics2D with a translation transformation
sun.java2d.SunGraphics2D#rotate(double)->void:::Concatenates the current transform of this Graphics2D with a rotation transformation
sun.java2d.SunGraphics2D#rotate(double, double, double)->void:::Concatenates the current transform of this Graphics2D with a translated rotation transformation
sun.java2d.SunGraphics2D#scale(double, double)->void:::Concatenates the current transform of this Graphics2D with a scaling transformation
sun.java2d.SunGraphics2D#shear(double, double)->void:::Concatenates the current transform of this Graphics2D with a shearing transformation
sun.java2d.SunGraphics2D#transform(AffineTransform)->void:::Composes a Transform object with the transform in this Graphics2D according to the rule last-specified-first-applied
sun.java2d.SunGraphics2D#translate(int, int)->void:::Translate
sun.java2d.SunGraphics2D#setTransform(AffineTransform)->void:::Sets the Transform in the current graphics state.
sun.java2d.SunGraphics2D#invalidateTransform()->void::: sun graphics2 d invalidate transform
sun.java2d.SunGraphics2D#getTransform()->AffineTransform:::Returns the current Transform in the Graphics2D state.
sun.java2d.SunGraphics2D#cloneTransform()->AffineTransform:::Returns the current Transform ignoring the "constrain" rectangle.
sun.java2d.SunGraphics2D#getPaint()->Paint:::Returns the current Paint in the Graphics2D state.
sun.java2d.SunGraphics2D#getComposite()->Composite:::Returns the current Composite in the Graphics2D state.
sun.java2d.SunGraphics2D#getColor()->Color::: sun graphics2 d get color
sun.java2d.SunGraphics2D#validateColor()->void::: sun graphics2 d validate color
sun.java2d.SunGraphics2D#setColor(Color)->void::: sun graphics2 d set color
sun.java2d.SunGraphics2D#setBackground(Color)->void:::Sets the background color in this context used for clearing a region
sun.java2d.SunGraphics2D#getBackground()->Color:::Returns the background color used for clearing a region.
sun.java2d.SunGraphics2D#getStroke()->Stroke:::Returns the current Stroke in the Graphics2D state.
sun.java2d.SunGraphics2D#getClipBounds()->Rectangle::: sun graphics2 d get clip bounds
sun.java2d.SunGraphics2D#getClipBounds(Rectangle)->Rectangle::: sun graphics2 d get clip bounds
sun.java2d.SunGraphics2D#hitClip(int, int, int, int)->boolean::: sun graphics2 d hit clip
sun.java2d.SunGraphics2D#validateCompClip()->void::: sun graphics2 d validate comp clip
sun.java2d.SunGraphics2D#transformShape(Shape)->Shape::: sun graphics2 d transform shape
sun.java2d.SunGraphics2D#untransformShape(Shape)->Shape::: sun graphics2 d untransform shape
sun.java2d.SunGraphics2D#transformShape(int, int, Shape)->Shape::: sun graphics2 d transform shape
sun.java2d.SunGraphics2D#transformShape(AffineTransform, Shape)->Shape::: sun graphics2 d transform shape
sun.java2d.SunGraphics2D#clipRect(int, int, int, int)->void::: sun graphics2 d clip rect
sun.java2d.SunGraphics2D#setClip(int, int, int, int)->void::: sun graphics2 d set clip
sun.java2d.SunGraphics2D#getClip()->Shape::: sun graphics2 d get clip
sun.java2d.SunGraphics2D#setClip(Shape)->void::: sun graphics2 d set clip
sun.java2d.SunGraphics2D#clip(Shape)->void:::Intersects the current clip with the specified Path and sets the current clip to the resulting intersection
sun.java2d.SunGraphics2D#setPaintMode()->void::: sun graphics2 d set paint mode
sun.java2d.SunGraphics2D#setXORMode(Color)->void::: sun graphics2 d set mode
sun.java2d.SunGraphics2D#copyArea(int, int, int, int, int, int)->void::: sun graphics2 d copy area
sun.java2d.SunGraphics2D#drawLine(int, int, int, int)->void::: sun graphics2 d draw line
sun.java2d.SunGraphics2D#drawRoundRect(int, int, int, int, int, int)->void::: sun graphics2 d draw round rect
sun.java2d.SunGraphics2D#fillRoundRect(int, int, int, int, int, int)->void::: sun graphics2 d fill round rect
sun.java2d.SunGraphics2D#drawOval(int, int, int, int)->void::: sun graphics2 d draw oval
sun.java2d.SunGraphics2D#fillOval(int, int, int, int)->void::: sun graphics2 d fill oval
sun.java2d.SunGraphics2D#drawArc(int, int, int, int, int, int)->void::: sun graphics2 d draw arc
sun.java2d.SunGraphics2D#fillArc(int, int, int, int, int, int)->void::: sun graphics2 d fill arc
sun.java2d.SunGraphics2D#drawPolyline(int[], int[], int)->void::: sun graphics2 d draw polyline
sun.java2d.SunGraphics2D#drawPolygon(int[], int[], int)->void::: sun graphics2 d draw polygon
sun.java2d.SunGraphics2D#fillPolygon(int[], int[], int)->void::: sun graphics2 d fill polygon
sun.java2d.SunGraphics2D#drawRect(int, int, int, int)->void::: sun graphics2 d draw rect
sun.java2d.SunGraphics2D#fillRect(int, int, int, int)->void::: sun graphics2 d fill rect
sun.java2d.SunGraphics2D#clearRect(int, int, int, int)->void::: sun graphics2 d clear rect
sun.java2d.SunGraphics2D#draw(Shape)->void:::Strokes the outline of a Path using the settings of the current graphics state
sun.java2d.SunGraphics2D#fill(Shape)->void:::Fills the interior of a Path using the settings of the current graphics state
sun.java2d.SunGraphics2D#drawRenderedImage(RenderedImage, AffineTransform)->void:::Draws an image, applying a transform from image space into user space before drawing
sun.java2d.SunGraphics2D#drawRenderableImage(RenderableImage, AffineTransform)->void::: sun graphics2 d draw renderable image
sun.java2d.SunGraphics2D#transformBounds(Rectangle, AffineTransform)->Rectangle::: sun graphics2 d transform bounds
sun.java2d.SunGraphics2D#drawString(String, int, int)->void::: sun graphics2 d draw string
sun.java2d.SunGraphics2D#drawString(String, float, float)->void::: sun graphics2 d draw string
sun.java2d.SunGraphics2D#drawString(AttributedCharacterIterator, int, int)->void::: sun graphics2 d draw string
sun.java2d.SunGraphics2D#drawString(AttributedCharacterIterator, float, float)->void::: sun graphics2 d draw string
sun.java2d.SunGraphics2D#drawGlyphVector(GlyphVector, float, float)->void::: sun graphics2 d draw glyph vector
sun.java2d.SunGraphics2D#drawChars(char[], int, int, int, int)->void::: sun graphics2 d draw chars
sun.java2d.SunGraphics2D#drawBytes(byte[], int, int, int, int)->void::: sun graphics2 d draw bytes
sun.java2d.SunGraphics2D#drawImage(Image, int, int, int, int, ImageObserver)->boolean:::Draws an image scaled to x,y,w,h in nonblocking mode with a callback object.
sun.java2d.SunGraphics2D#copyImage(Image, int, int, int, int, int, int, Color, ImageObserver)->boolean:::Not part of the advertised API but a useful utility method to call internally
sun.java2d.SunGraphics2D#drawImage(Image, int, int, int, int, Color, ImageObserver)->boolean:::Draws an image scaled to x,y,w,h in nonblocking mode with a solid background color and a callback object.
sun.java2d.SunGraphics2D#drawImage(Image, int, int, ImageObserver)->boolean:::Draws an image at x,y in nonblocking mode.
sun.java2d.SunGraphics2D#drawImage(Image, int, int, Color, ImageObserver)->boolean:::Draws an image at x,y in nonblocking mode with a solid background color and a callback object.
sun.java2d.SunGraphics2D#drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)->boolean:::Draws a subrectangle of an image scaled to a destination rectangle in nonblocking mode with a callback object.
sun.java2d.SunGraphics2D#drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)->boolean:::Draws a subrectangle of an image scaled to a destination rectangle in nonblocking mode with a solid background color and a callback object.
sun.java2d.SunGraphics2D#drawImage(Image, AffineTransform, ImageObserver)->boolean:::Draw an image, applying a transform from image space into user space before drawing
sun.java2d.SunGraphics2D#drawImage(BufferedImage, BufferedImageOp, int, int)->void::: sun graphics2 d draw image
sun.java2d.SunGraphics2D#getFontRenderContext()->FontRenderContext:::Get the rendering context of the font within this Graphics2D context.
sun.java2d.SunGraphics2D#dispose()->void:::This object has no resources to dispose of per se, but the doc comments for the base method in java.awt.Graphics imply that this object will not be useable after it is disposed
sun.java2d.SunGraphics2D#finalize()->void:::Graphics has a finalize method that automatically calls dispose() for subclasses
sun.java2d.SunGraphics2D#getDestination()->Object:::Returns destination that this Graphics renders to
sun.java2d.SunGraphics2D#getDestSurface()->Surface::: sun graphics2 d get dest surface
sun.java2d.SunGraphicsEnvironment#getScreenDevices()->GraphicsDevice[]:::Returns an array of all of the screen devices.
sun.java2d.SunGraphicsEnvironment#getNumScreens()->int:::Returns the number of screen devices of this graphics environment.
sun.java2d.SunGraphicsEnvironment#makeScreenDevice(int)->GraphicsDevice:::Create and return the screen device with the specified number
sun.java2d.SunGraphicsEnvironment#getDefaultScreenDevice()->GraphicsDevice:::Returns the default screen graphics device.
sun.java2d.SunGraphicsEnvironment#createGraphics(BufferedImage)->Graphics2D:::Returns a Graphics2D object for rendering into the given BufferedImage.
sun.java2d.SunGraphicsEnvironment#getFontManagerForSGE()->FontManagerForSGE::: sun graphics environment get font manager for e
sun.java2d.SunGraphicsEnvironment#useAlternateFontforJALocales()->void::: sun graphics environment use alternate fontfor locales
sun.java2d.SunGraphicsEnvironment#getAllFonts()->Font[]:::Returns all fonts available in this environment.
sun.java2d.SunGraphicsEnvironment#getAvailableFontFamilyNames(Locale)->String[]::: sun graphics environment get available font family names
sun.java2d.SunGraphicsEnvironment#getAvailableFontFamilyNames()->String[]::: sun graphics environment get available font family names
sun.java2d.SunGraphicsEnvironment#getUsableBounds(GraphicsDevice)->Rectangle:::Return the bounds of a GraphicsDevice, less its screen insets
sun.java2d.SunGraphicsEnvironment#displayChanged()->void:::From the DisplayChangedListener interface; called when the display mode has been changed.
sun.java2d.SunGraphicsEnvironment#paletteChanged()->void:::Part of the DisplayChangedListener interface: propagate this event to listeners
sun.java2d.SunGraphicsEnvironment#isDisplayLocal()->boolean:::Returns true when the display is local, false for remote displays.
sun.java2d.SunGraphicsEnvironment#addDisplayChangedListener(DisplayChangedListener)->void:::Add a DisplayChangeListener to be notified when the display settings are changed.
sun.java2d.SunGraphicsEnvironment#removeDisplayChangedListener(DisplayChangedListener)->void:::Remove a DisplayChangeListener from Win32GraphicsEnvironment
sun.java2d.SunGraphicsEnvironment#isFlipStrategyPreferred(ComponentPeer)->boolean:::Returns true if FlipBufferStrategy with COPIED buffer contents is preferred for this peer's GraphicsConfiguration over BlitBufferStrategy, false otherwise
sun.java2d.SunGraphicsEnvironment#isUIScaleEnabled()->boolean::: sun graphics environment is scale enabled
sun.java2d.SunGraphicsEnvironment#getDebugScale()->double::: sun graphics environment get debug scale
sun.java2d.SunGraphicsEnvironment#getScaleFactor(String)->double::: sun graphics environment get scale factor
sun.java2d.SunGraphicsEnvironment#getGraphicsConfigurationAtPoint(GraphicsConfiguration, double, double)->GraphicsConfiguration:::Returns the graphics configuration which bounds contain the given point.
sun.java2d.SunGraphicsEnvironment#convertToDeviceSpace(double, double)->Point:::Converts coordinates from the user's space to the device space using appropriate device transformation.
sun.java2d.SurfaceData#setBlitProxyKey(Object)->void:::Subclasses can set a "blit proxy key" which will be used along with the SurfaceManager.getCacheData() mechanism to store acceleration-compatible cached copies of source images
sun.java2d.SurfaceData#getSourceSurfaceData(Image, int, CompositeType, Color)->SurfaceData:::This method is called on a destination SurfaceData to choose the best SurfaceData from a source Image for an imaging operation, with help from its SurfaceManager
sun.java2d.SurfaceData#makeProxyFor(SurfaceData)->SurfaceDataProxy:::This method is called on a destination SurfaceData to choose a proper SurfaceDataProxy subclass for a source SurfaceData to use to control when and with what surface to override a given image operation
sun.java2d.SurfaceData#getPrimarySurfaceData(Image)->SurfaceData:::Extracts the SurfaceManager from the given Image, and then returns the SurfaceData object that would best be suited as the destination surface in some rendering operation.
sun.java2d.SurfaceData#restoreContents(Image)->SurfaceData:::Restores the contents of the given Image and then returns the new SurfaceData object in use by the Image's SurfaceManager.
sun.java2d.SurfaceData#getState()->State::: surface data get state
sun.java2d.SurfaceData#getStateTracker()->StateTracker::: surface data get state tracker
sun.java2d.SurfaceData#markDirty()->void:::Marks this surface as dirty.
sun.java2d.SurfaceData#setSurfaceLost(boolean)->void:::Sets the value of the surfaceLost variable, which indicates whether something has happened to the rendering surface such that it needs to be restored and re-rendered.
sun.java2d.SurfaceData#isSurfaceLost()->boolean::: surface data is surface lost
sun.java2d.SurfaceData#isValid()->boolean:::Returns a boolean indicating whether or not this SurfaceData is valid.
sun.java2d.SurfaceData#getDisposerReferent()->Object::: surface data get disposer referent
sun.java2d.SurfaceData#getNativeOps()->long::: surface data get native ops
sun.java2d.SurfaceData#invalidate()->void:::Sets this SurfaceData object to the invalid state
sun.java2d.SurfaceData#getReplacement()->SurfaceData:::Certain changes in the configuration of a surface require the invalidation of existing associated SurfaceData objects and the creation of brand new ones
sun.java2d.SurfaceData#canRenderLCDText(SunGraphics2D)->boolean::: surface data can render text
sun.java2d.SurfaceData#canRenderParallelograms(SunGraphics2D)->boolean::: surface data can render parallelograms
sun.java2d.SurfaceData#validatePipe(SunGraphics2D)->void::: surface data validate pipe
sun.java2d.SurfaceData#getMaskFill(SunGraphics2D)->MaskFill:::Returns a MaskFill object that can be used on this destination with the source (paint) and composite types determined by the given SunGraphics2D, or null if no such MaskFill object can be located
sun.java2d.SurfaceData#getRenderLoops(SunGraphics2D)->RenderLoops:::Return a RenderLoops object containing all of the basic GraphicsPrimitive objects for rendering to the destination surface with the current attributes of the given SunGraphics2D.
sun.java2d.SurfaceData#makeRenderLoops(SurfaceType, CompositeType, SurfaceType)->RenderLoops:::Construct and return a RenderLoops object containing all of the basic GraphicsPrimitive objects for rendering to the destination surface with the given source, destination, and composite types.
sun.java2d.SurfaceData#getDeviceConfiguration()->GraphicsConfiguration:::Return the GraphicsConfiguration object that describes this destination surface.
sun.java2d.SurfaceData#getSurfaceType()->SurfaceType:::Return the SurfaceType object that describes the destination surface.
sun.java2d.SurfaceData#getColorModel()->ColorModel:::Return the ColorModel for the destination surface.
sun.java2d.SurfaceData#getTransparency()->int:::Returns the type of this Transparency.
sun.java2d.SurfaceData#getRaster(int, int, int, int)->Raster:::Return a readable Raster which contains the pixels for the specified rectangular region of the destination surface
sun.java2d.SurfaceData#useTightBBoxes()->boolean:::Does the pixel accessibility of the destination surface suggest that rendering algorithms might want to take extra time to calculate a more accurate bounding box for the operation being performed? The typical case when this will be true is when a copy of the pixels has to be made when doing a getRaster
sun.java2d.SurfaceData#pixelFor(int)->int:::Returns the pixel data for the specified Argb value packed into an integer for easy storage and conveyance.
sun.java2d.SurfaceData#pixelFor(Color)->int:::Returns the pixel data for the specified color packed into an integer for easy storage and conveyance
sun.java2d.SurfaceData#rgbFor(int)->int:::Returns the Argb representation for the specified integer value which is packed in the format of the associated ColorModel.
sun.java2d.SurfaceData#getBounds()->Rectangle:::Returns the bounds of the destination surface.
sun.java2d.SurfaceData#checkCustomComposite()->void:::Performs Security Permissions checks to see if a Custom Composite object should be allowed access to the pixels of this surface.
sun.java2d.SurfaceData#isOpaqueGray(IndexColorModel)->boolean:::Fetches private field IndexColorModel.allgrayopaque which is true when all palette entries in the color model are gray and opaque.
sun.java2d.SurfaceData#isNull(SurfaceData)->boolean:::For our purposes null and NullSurfaceData are the same as they represent a disposed surface.
sun.java2d.SurfaceData#copyArea(SunGraphics2D, int, int, int, int, int, int)->boolean:::Performs a copyarea within this surface
sun.java2d.SurfaceData#flush()->void:::Synchronously releases resources associated with this surface.
sun.java2d.SurfaceData#getDestination()->Object:::Returns destination associated with this SurfaceData
sun.java2d.SurfaceData#getDefaultScaleX()->double:::Returns default horizontal scale factor of the destination surface
sun.java2d.SurfaceData#getDefaultScaleY()->double:::Returns default vertical scale factor of the destination surface
sun.java2d.SurfaceDataProxy#isCachingAllowed()->boolean::: surface data proxy is caching allowed
sun.java2d.SurfaceDataProxy#isSupportedOperation(SurfaceData, int, CompositeType, Color)->boolean:::Determine if an alternate form for the srcData is needed and appropriate from the given operational parameters.
sun.java2d.SurfaceDataProxy#validateSurfaceData(SurfaceData, SurfaceData, int, int)->SurfaceData:::Construct an alternate form of the given SurfaceData
sun.java2d.SurfaceDataProxy#getRetryTracker(SurfaceData)->StateTracker:::If the subclass is unable to validate or create a cached SurfaceData then this method will be used to get a StateTracker object that will indicate when to attempt to validate the surface again
sun.java2d.SurfaceDataProxy.CountdownTracker#isCurrent()->boolean::: countdown tracker is current
sun.java2d.SurfaceDataProxy#isValid()->boolean:::Returns true iff this SurfaceData proxy is still the best way to control caching of the given source on the given destination.
sun.java2d.SurfaceDataProxy#invalidate()->void:::Sets the valid state to false so that the next time this proxy is fetched to generate a replacement SurfaceData, the code in SurfaceData knows to replace the proxy first.
sun.java2d.SurfaceDataProxy#flush(boolean)->boolean:::Flush all cached resources as per the FlushableCacheData interface
sun.java2d.SurfaceDataProxy#flush()->void:::Actively flushes (drops and invalidates) the cached surface so that it can be reclaimed quickly.
sun.java2d.SurfaceDataProxy#isAccelerated()->boolean:::Returns true iff this SurfaceData proxy is still valid and if it has a currently cached replacement that is also valid and current.
sun.java2d.SurfaceDataProxy#activateDisplayListener()->void:::This method should be called from subclasses which create cached SurfaceData objects that depend on the current properties of the display.
sun.java2d.SurfaceDataProxy#displayChanged()->void:::Invoked when the display mode has changed
sun.java2d.SurfaceDataProxy#paletteChanged()->void:::Invoked when the palette has changed.
sun.java2d.SurfaceDataProxy#replaceData(SurfaceData, int, CompositeType, Color)->SurfaceData:::This method attempts to replace the srcData with a cached version
sun.java2d.SurfaceDataProxy#updateSurfaceData(SurfaceData, SurfaceData, int, int)->void:::This is the default implementation for updating the cached SurfaceData from the source (primary) SurfaceData
sun.java2d.SurfaceDataProxy#updateSurfaceDataBg(SurfaceData, SurfaceData, int, int, Color)->void:::This is an alternate implementation for updating the cached SurfaceData from the source (primary) SurfaceData using a background color for transparent pixels
sun.java2d.SurfaceManagerFactory#getInstance()->SurfaceManagerFactory:::Returns the surface manager factory instance
sun.java2d.SurfaceManagerFactory#setInstance(SurfaceManagerFactory)->void:::Sets the surface manager factory
sun.java2d.SurfaceManagerFactory#createVolatileManager(SunVolatileImage, Object)->VolatileSurfaceManager:::Creates a new instance of a VolatileSurfaceManager given any arbitrary SunVolatileImage
sun.java2d.WindowsSurfaceManagerFactory#createVolatileManager(SunVolatileImage, Object)->VolatileSurfaceManager:::Creates a new instance of a VolatileSurfaceManager given any arbitrary SunVolatileImage

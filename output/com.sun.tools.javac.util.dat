com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatKind(JCDiagnostic, Locale)->String::: abstract diagnostic formatter format kind
com.sun.tools.javac.util.AbstractDiagnosticFormatter#format(JCDiagnostic, Locale)->String::: abstract diagnostic formatter format
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatDiagnostic(JCDiagnostic, Locale)->String::: abstract diagnostic formatter format diagnostic
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatPosition(JCDiagnostic, PositionKind, Locale)->String::: abstract diagnostic formatter format position
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatSource(JCDiagnostic, boolean, Locale)->String::: abstract diagnostic formatter format source
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatArguments(JCDiagnostic, Locale)->Collection:::Format the arguments of a given diagnostic.
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatArgument(JCDiagnostic, Object, Locale)->String:::Format a single argument of a given diagnostic.
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatIterable(JCDiagnostic, Iterable, Locale)->String:::Format an iterable argument of a given diagnostic.
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatSubdiagnostics(JCDiagnostic, Locale)->List:::Format all the subdiagnostics attached to a given diagnostic.
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatSubdiagnostic(JCDiagnostic, JCDiagnostic, Locale)->String:::Format a subdiagnostics attached to a given diagnostic.
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatSourceLine(JCDiagnostic, int)->String:::Format the faulty source code line and point to the error.
com.sun.tools.javac.util.AbstractDiagnosticFormatter#formatLintCategory(JCDiagnostic, Locale)->String::: abstract diagnostic formatter format lint category
com.sun.tools.javac.util.AbstractDiagnosticFormatter#localize(Locale, String, Object...)->String:::Converts a String into a locale-dependent representation accordingly to a given locale.
com.sun.tools.javac.util.AbstractDiagnosticFormatter#displaySource(JCDiagnostic)->boolean::: abstract diagnostic formatter display source
com.sun.tools.javac.util.AbstractDiagnosticFormatter#isRaw()->boolean::: abstract diagnostic formatter is raw
com.sun.tools.javac.util.AbstractDiagnosticFormatter#indentString(int)->String:::Creates a string with a given amount of empty spaces
com.sun.tools.javac.util.AbstractDiagnosticFormatter#indent(String, int)->String:::Indent a string by prepending a given amount of empty spaces to each line of the string.
com.sun.tools.javac.util.AbstractDiagnosticFormatter#getConfiguration()->SimpleConfiguration::: abstract diagnostic formatter get configuration
com.sun.tools.javac.util.AbstractDiagnosticFormatter.SimpleConfiguration#getMultilineLimit(MultilineLimit)->int::: simple configuration get multiline limit
com.sun.tools.javac.util.AbstractDiagnosticFormatter.SimpleConfiguration#getVisible()->EnumSet::: simple configuration get visible
com.sun.tools.javac.util.AbstractDiagnosticFormatter.SimpleConfiguration#setMultilineLimit(MultilineLimit, int)->void::: simple configuration set multiline limit
com.sun.tools.javac.util.AbstractDiagnosticFormatter.SimpleConfiguration#setVisible(Set)->void::: simple configuration set visible
com.sun.tools.javac.util.AbstractDiagnosticFormatter.SimpleConfiguration#setVisiblePart(DiagnosticPart, boolean)->void::: simple configuration set visible part
com.sun.tools.javac.util.AbstractDiagnosticFormatter.SimpleConfiguration#setCaretEnabled(boolean)->void:::Shows a '^' sign under the source line displayed by the formatter (if applicable).
com.sun.tools.javac.util.AbstractDiagnosticFormatter.SimpleConfiguration#isCaretEnabled()->boolean:::Tells whether the caret display is active or not.
com.sun.tools.javac.util.AbstractDiagnosticFormatter#getPrinter()->Printer::: abstract diagnostic formatter get printer
com.sun.tools.javac.util.AbstractDiagnosticFormatter#setPrinter(Printer)->void::: abstract diagnostic formatter set printer
com.sun.tools.javac.util.AbstractLog#useSource(JavaFileObject)->JavaFileObject:::Re-assign source, returning previous setting.
com.sun.tools.javac.util.AbstractLog#getSource(JavaFileObject)->DiagnosticSource::: abstract log get source
com.sun.tools.javac.util.AbstractLog#currentSource()->DiagnosticSource:::Return the underlying diagnostic source
com.sun.tools.javac.util.AbstractLog#error(String, Object...)->void:::Report an error, unless another error was already reported at same  source position.
com.sun.tools.javac.util.AbstractLog#error(Error)->void:::Report an error, unless another error was already reported at same  source position.
com.sun.tools.javac.util.AbstractLog#error(DiagnosticPosition, Error)->void:::Report an error, unless another error was already reported at same  source position.
com.sun.tools.javac.util.AbstractLog#error(DiagnosticFlag, DiagnosticPosition, Error)->void:::Report an error, unless another error was already reported at same  source position.
com.sun.tools.javac.util.AbstractLog#error(int, String, Object...)->void:::Report an error, unless another error was already reported at same  source position.
com.sun.tools.javac.util.AbstractLog#error(int, Error)->void:::Report an error, unless another error was already reported at same  source position.
com.sun.tools.javac.util.AbstractLog#error(DiagnosticFlag, int, Error)->void:::Report an error, unless another error was already reported at same  source position.
com.sun.tools.javac.util.AbstractLog#warning(Warning)->void:::Report a warning, unless suppressed by the  -nowarn option or the  maximum number of warnings has been reached.
com.sun.tools.javac.util.AbstractLog#warning(LintCategory, Warning)->void:::Report a lint warning, unless suppressed by the  -nowarn option or the  maximum number of warnings has been reached.
com.sun.tools.javac.util.AbstractLog#warning(DiagnosticPosition, Warning)->void:::Report a warning, unless suppressed by the  -nowarn option or the  maximum number of warnings has been reached.
com.sun.tools.javac.util.AbstractLog#warning(LintCategory, DiagnosticPosition, Warning)->void:::Report a lint warning, unless suppressed by the  -nowarn option or the  maximum number of warnings has been reached.
com.sun.tools.javac.util.AbstractLog#warning(int, Warning)->void:::Report a warning, unless suppressed by the  -nowarn option or the  maximum number of warnings has been reached.
com.sun.tools.javac.util.AbstractLog#mandatoryWarning(DiagnosticPosition, Warning)->void:::Report a warning.
com.sun.tools.javac.util.AbstractLog#mandatoryWarning(LintCategory, DiagnosticPosition, Warning)->void:::Report a warning.
com.sun.tools.javac.util.AbstractLog#note(Note)->void:::Provide a non-fatal notification, unless suppressed by the -nowarn option.
com.sun.tools.javac.util.AbstractLog#note(DiagnosticPosition, Note)->void:::Provide a non-fatal notification, unless suppressed by the -nowarn option.
com.sun.tools.javac.util.AbstractLog#note(int, Note)->void:::Provide a non-fatal notification, unless suppressed by the -nowarn option.
com.sun.tools.javac.util.AbstractLog#note(JavaFileObject, Note)->void:::Provide a non-fatal notification, unless suppressed by the -nowarn option.
com.sun.tools.javac.util.AbstractLog#mandatoryNote(JavaFileObject, Note)->void:::Provide a non-fatal notification, unless suppressed by the -nowarn option.
com.sun.tools.javac.util.AbstractLog#report(JCDiagnostic)->void::: abstract log report
com.sun.tools.javac.util.AbstractLog#directError(String, Object...)->void::: abstract log direct error
com.sun.tools.javac.util.ArrayUtils#ensureCapacity(T[], int)->T[]::: array utils ensure capacity
com.sun.tools.javac.util.ArrayUtils#ensureCapacity(byte[], int)->byte[]::: array utils ensure capacity
com.sun.tools.javac.util.ArrayUtils#ensureCapacity(char[], int)->char[]::: array utils ensure capacity
com.sun.tools.javac.util.ArrayUtils#ensureCapacity(int[], int)->int[]::: array utils ensure capacity
com.sun.tools.javac.util.Assert#check(boolean)->void:::Equivalent to   assert cond;
com.sun.tools.javac.util.Assert#checkNull(Object)->void:::Equivalent to   assert (o == null);
com.sun.tools.javac.util.Assert#checkNonNull(T)->T:::Equivalent to   assert (t != null); return t;
com.sun.tools.javac.util.Assert#check(boolean, int)->void:::Equivalent to   assert cond : value;
com.sun.tools.javac.util.Assert#check(boolean, long)->void:::Equivalent to   assert cond : value;
com.sun.tools.javac.util.Assert#check(boolean, Object)->void:::Equivalent to   assert cond : value;
com.sun.tools.javac.util.Assert#check(boolean, String)->void:::Equivalent to   assert cond : msg;
com.sun.tools.javac.util.Assert#check(boolean, Supplier)->void:::Equivalent to   assert cond : msg.get();  Note: message string is computed lazily.
com.sun.tools.javac.util.Assert#checkNull(Object, Object)->void:::Equivalent to   assert (o == null) : value;
com.sun.tools.javac.util.Assert#checkNull(Object, String)->void:::Equivalent to   assert (o == null) : msg;
com.sun.tools.javac.util.Assert#checkNull(Object, Supplier)->void:::Equivalent to   assert (o == null) : msg.get();  Note: message string is computed lazily.
com.sun.tools.javac.util.Assert#checkNonNull(T, String)->T:::Equivalent to   assert (o != null) : msg;
com.sun.tools.javac.util.Assert#checkNonNull(T, Supplier)->T:::Equivalent to   assert (o != null) : msg.get();  Note: message string is computed lazily.
com.sun.tools.javac.util.Assert#error()->void:::Equivalent to   assert false;
com.sun.tools.javac.util.Assert#error(String)->void:::Equivalent to   assert false : msg;
com.sun.tools.javac.util.BasicDiagnosticFormatter#formatDiagnostic(JCDiagnostic, Locale)->String::: basic diagnostic formatter format diagnostic
com.sun.tools.javac.util.BasicDiagnosticFormatter#formatMessage(JCDiagnostic, Locale)->String::: basic diagnostic formatter format message
com.sun.tools.javac.util.BasicDiagnosticFormatter#addSourceLineIfNeeded(JCDiagnostic, String)->String::: basic diagnostic formatter add source line if needed
com.sun.tools.javac.util.BasicDiagnosticFormatter#formatMeta(char, JCDiagnostic, Locale)->String::: basic diagnostic formatter format meta
com.sun.tools.javac.util.BasicDiagnosticFormatter#getConfiguration()->BasicConfiguration::: basic diagnostic formatter get configuration
com.sun.tools.javac.util.BasicDiagnosticFormatter.BasicConfiguration#getIndentation(DiagnosticPart)->int:::Get the amount of spaces for a given indentation kind
com.sun.tools.javac.util.BasicDiagnosticFormatter.BasicConfiguration#setIndentation(DiagnosticPart, int)->void:::Set the indentation level for various element of a given diagnostic - this might lead to more readable diagnostics
com.sun.tools.javac.util.BasicDiagnosticFormatter.BasicConfiguration#setSourcePosition(SourcePosition)->void:::Set the source line positioning used by this formatter
com.sun.tools.javac.util.BasicDiagnosticFormatter.BasicConfiguration#getSourcePosition()->SourcePosition:::Get the source line positioning used by this formatter
com.sun.tools.javac.util.BasicDiagnosticFormatter.BasicConfiguration#setFormat(BasicFormatKind, String)->void:::Set a metachar string for a specific format
com.sun.tools.javac.util.BasicDiagnosticFormatter.BasicConfiguration#getFormat(BasicFormatKind)->String:::Get a metachar string for a specific format
com.sun.tools.javac.util.Bits#sizeTo(int)->void::: bits size to
com.sun.tools.javac.util.Bits#clear()->void:::This set = {}.
com.sun.tools.javac.util.Bits#reset()->void::: bits reset
com.sun.tools.javac.util.Bits#internalReset()->void::: bits internal reset
com.sun.tools.javac.util.Bits#isReset()->boolean::: bits is reset
com.sun.tools.javac.util.Bits#assign(Bits)->Bits::: bits assign
com.sun.tools.javac.util.Bits#dup()->Bits:::Return a copy of this set.
com.sun.tools.javac.util.Bits#dupBits()->int[]::: bits dup bits
com.sun.tools.javac.util.Bits#incl(int)->void:::Include x in this set.
com.sun.tools.javac.util.Bits#inclRange(int, int)->void:::Include [start..limit) in this set.
com.sun.tools.javac.util.Bits#excludeFrom(int)->void:::Exclude [start...end] from this set.
com.sun.tools.javac.util.Bits#excl(int)->void:::Exclude x from this set.
com.sun.tools.javac.util.Bits#isMember(int)->boolean:::Is x an element of this set?
com.sun.tools.javac.util.Bits#andSet(Bits)->Bits:::this set = this set & xs.
com.sun.tools.javac.util.Bits#internalAndSet(Bits)->void::: bits internal and set
com.sun.tools.javac.util.Bits#orSet(Bits)->Bits:::this set = this set | xs.
com.sun.tools.javac.util.Bits#diffSet(Bits)->Bits:::this set = this set \ xs.
com.sun.tools.javac.util.Bits#xorSet(Bits)->Bits:::this set = this set ^ xs.
com.sun.tools.javac.util.Bits#nextBit(int)->int:::Return the index of the least bit position &ge; x that is set
com.sun.tools.javac.util.Bits#toString()->String:::a string representation of this set.
com.sun.tools.javac.util.ByteBuffer#appendByte(int)->void:::Append byte to this buffer.
com.sun.tools.javac.util.ByteBuffer#appendBytes(byte[], int, int)->void:::Append `len' bytes from byte array,  starting at given `start' offset.
com.sun.tools.javac.util.ByteBuffer#appendBytes(byte[])->void:::Append all bytes from given byte array.
com.sun.tools.javac.util.ByteBuffer#appendChar(int)->void:::Append a character as a two byte number.
com.sun.tools.javac.util.ByteBuffer#appendInt(int)->void:::Append an integer as a four byte number.
com.sun.tools.javac.util.ByteBuffer#appendLong(long)->void:::Append a long as an eight byte number.
com.sun.tools.javac.util.ByteBuffer#appendFloat(float)->void:::Append a float as a four byte number.
com.sun.tools.javac.util.ByteBuffer#appendDouble(double)->void:::Append a double as a eight byte number.
com.sun.tools.javac.util.ByteBuffer#appendName(Name)->void:::Append a name.
com.sun.tools.javac.util.ByteBuffer#reset()->void:::Reset to zero length.
com.sun.tools.javac.util.ByteBuffer#toName(Names)->Name:::Convert contents to name.
com.sun.tools.javac.util.Constants#decode(Object, Type)->Object:::Converts a constant in internal representation (in which boolean, char, byte, short, and int are each represented by an Integer) into standard representation
com.sun.tools.javac.util.Constants#format(Object, Type)->String:::Returns a string representation of a constant value (given in internal representation), quoted and formatted as in Java source.
com.sun.tools.javac.util.Constants#format(Object)->String:::Returns a string representation of a constant value (given in standard wrapped representation), quoted and formatted as in Java source.
com.sun.tools.javac.util.Context.Factory#make(Context)->T::: factory make
com.sun.tools.javac.util.Context#put(Key, Factory)->void:::Set the factory for the key in this context.
com.sun.tools.javac.util.Context#put(Key, T)->void:::Set the value for the key in this context.
com.sun.tools.javac.util.Context#get(Key)->T:::Get the value for the key in this context.
com.sun.tools.javac.util.Context#key(Class)->Key::: context key
com.sun.tools.javac.util.Context#get(Class)->T::: context get
com.sun.tools.javac.util.Context#put(Class, T)->void::: context put
com.sun.tools.javac.util.Context#put(Class, Factory)->void::: context put
com.sun.tools.javac.util.Context#dump()->void::: context dump
com.sun.tools.javac.util.Convert#string2int(String, int)->int:::Convert string to integer.
com.sun.tools.javac.util.Convert#string2long(String, int)->long:::Convert string to long integer.
com.sun.tools.javac.util.Convert#utf2chars(byte[], int, char[], int, int)->int:::Convert `len' bytes from utf8 to characters
com.sun.tools.javac.util.Convert#utf2chars(byte[], int, int)->char[]:::Return bytes in Utf8 representation as an array of characters.
com.sun.tools.javac.util.Convert#utf2chars(byte[])->char[]:::Return all bytes of a given array in Utf8 representation  as an array of characters.
com.sun.tools.javac.util.Convert#utf2string(byte[], int, int)->String:::Return bytes in Utf8 representation as a string.
com.sun.tools.javac.util.Convert#utf2string(byte[])->String:::Return all bytes of a given array in Utf8 representation  as a string.
com.sun.tools.javac.util.Convert#chars2utf(char[], int, byte[], int, int)->int:::Copy characters in source array to bytes in target array,  converting them to Utf8 representation
com.sun.tools.javac.util.Convert#chars2utf(char[], int, int)->byte[]:::Return characters as an array of bytes in Utf8 representation.
com.sun.tools.javac.util.Convert#chars2utf(char[])->byte[]:::Return all characters in given array as an array of bytes  in Utf8 representation.
com.sun.tools.javac.util.Convert#string2utf(String)->byte[]:::Return string as an array of bytes in in Utf8 representation.
com.sun.tools.javac.util.Convert#quote(String)->String:::Escapes each character in a string that has an escape sequence or is non-printable ASCII
com.sun.tools.javac.util.Convert#quote(char)->String:::Escapes a character if it has an escape sequence or is non-printable ASCII
com.sun.tools.javac.util.Convert#escapeUnicode(String)->String:::Escape all unicode characters in string.
com.sun.tools.javac.util.Convert#shortName(Name)->Name:::Return the last part of a qualified name.
com.sun.tools.javac.util.Convert#shortName(String)->String:::Return the last part of a qualified name from its string representation
com.sun.tools.javac.util.Convert#packagePart(Name)->Name:::Return the package name of a class name, excluding the trailing '.',  "" if not existent.
com.sun.tools.javac.util.Convert#packagePart(String)->String::: convert package part
com.sun.tools.javac.util.Convert#enclosingCandidates(Name)->List::: convert enclosing candidates
com.sun.tools.javac.util.Convert#classCandidates(Name)->List::: convert class candidates
com.sun.tools.javac.util.Dependencies#instance(Context)->Dependencies::: dependencies instance
com.sun.tools.javac.util.Dependencies#push(ClassSymbol, CompletionCause)->void:::Push a new completion node on the stack.
com.sun.tools.javac.util.Dependencies#pop()->void:::Remove current dependency node from the stack.
com.sun.tools.javac.util.Dependencies.GraphDependencies#preRegister(Context)->void:::Register a Context.Factory to create a Dependencies.
com.sun.tools.javac.util.Dependencies.GraphDependencies.Node#addDependency(DependencyKind, Node)->void::: node add dependency
com.sun.tools.javac.util.Dependencies.GraphDependencies.Node#equals(Object)->boolean::: node equals
com.sun.tools.javac.util.Dependencies.GraphDependencies.Node#hashCode()->int::: node hash code
com.sun.tools.javac.util.Dependencies.GraphDependencies.Node#getSupportedDependencyKinds()->GraphUtils.DependencyKind[]::: node get supported dependency kinds
com.sun.tools.javac.util.Dependencies.GraphDependencies.Node#getDependenciesByKind(DependencyKind)->java.util.Collection::: node get dependencies by kind
com.sun.tools.javac.util.Dependencies.GraphDependencies.Node#nodeAttributes()->Properties::: node node attributes
com.sun.tools.javac.util.Dependencies.GraphDependencies.Node#dependencyAttributes(Node, GraphUtils.DependencyKind)->Properties::: node dependency attributes
com.sun.tools.javac.util.Dependencies.GraphDependencies.Node#toString()->String::: node to string
com.sun.tools.javac.util.Dependencies.GraphDependencies.CompletionNode#nodeAttributes()->Properties::: completion node node attributes
com.sun.tools.javac.util.Dependencies.GraphDependencies.CompletionNode#getClassSymbol()->ClassSymbol::: completion node get class symbol
com.sun.tools.javac.util.Dependencies.GraphDependencies#push(ClassSymbol, CompletionCause)->void::: graph dependencies push
com.sun.tools.javac.util.Dependencies.GraphDependencies#push(Node, CompletionCause)->Node:::Push a new dependency on the stack.
com.sun.tools.javac.util.Dependencies.GraphDependencies#pop()->void::: graph dependencies pop
com.sun.tools.javac.util.Dependencies.GraphDependencies#close()->void::: graph dependencies close
com.sun.tools.javac.util.Dependencies.GraphDependencies#complete(Symbol)->void::: graph dependencies complete
com.sun.tools.javac.util.Dependencies.GraphDependencies#isTerminal()->boolean::: graph dependencies is terminal
com.sun.tools.javac.util.Dependencies.GraphDependencies#getNodes()->Collection::: graph dependencies get nodes
com.sun.tools.javac.util.DiagnosticSource#getFile()->JavaFileObject:::Return the underlying file object handled by this  DiagnosticSource object.
com.sun.tools.javac.util.DiagnosticSource#getLineNumber(int)->int:::Return the one-based line number associated with a given pos for the current source file
com.sun.tools.javac.util.DiagnosticSource#getColumnNumber(int, boolean)->int:::Return the one-based column number associated with a given pos for the current source file
com.sun.tools.javac.util.DiagnosticSource#getLine(int)->String:::Return the content of the line containing a given pos.
com.sun.tools.javac.util.DiagnosticSource#getEndPosTable()->EndPosTable::: diagnostic source get end pos table
com.sun.tools.javac.util.DiagnosticSource#setEndPosTable(EndPosTable)->void::: diagnostic source set end pos table
com.sun.tools.javac.util.DiagnosticSource#findLine(int)->boolean:::Find the line in the buffer that contains the current position
com.sun.tools.javac.util.DiagnosticSource#initBuf(JavaFileObject)->char[]::: diagnostic source init buf
com.sun.tools.javac.util.Filter#accepts(T)->boolean:::Does this element match against the filter?
com.sun.tools.javac.util.ForwardingDiagnosticFormatter#getDelegatedFormatter()->F:::Returns the underlying delegated formatter
com.sun.tools.javac.util.ForwardingDiagnosticFormatter#getConfiguration()->Configuration::: forwarding diagnostic formatter get configuration
com.sun.tools.javac.util.ForwardingDiagnosticFormatter#displaySource(D)->boolean::: forwarding diagnostic formatter display source
com.sun.tools.javac.util.ForwardingDiagnosticFormatter#format(D, Locale)->String::: forwarding diagnostic formatter format
com.sun.tools.javac.util.ForwardingDiagnosticFormatter#formatKind(D, Locale)->String::: forwarding diagnostic formatter format kind
com.sun.tools.javac.util.ForwardingDiagnosticFormatter#formatMessage(D, Locale)->String::: forwarding diagnostic formatter format message
com.sun.tools.javac.util.ForwardingDiagnosticFormatter#formatPosition(D, PositionKind, Locale)->String::: forwarding diagnostic formatter format position
com.sun.tools.javac.util.ForwardingDiagnosticFormatter#formatSource(D, boolean, Locale)->String::: forwarding diagnostic formatter format source
com.sun.tools.javac.util.ForwardingDiagnosticFormatter.ForwardingConfiguration#getDelegatedConfiguration()->Configuration:::Returns the underlying delegated configuration.
com.sun.tools.javac.util.ForwardingDiagnosticFormatter.ForwardingConfiguration#getMultilineLimit(MultilineLimit)->int::: forwarding configuration get multiline limit
com.sun.tools.javac.util.ForwardingDiagnosticFormatter.ForwardingConfiguration#getVisible()->Set::: forwarding configuration get visible
com.sun.tools.javac.util.ForwardingDiagnosticFormatter.ForwardingConfiguration#setMultilineLimit(MultilineLimit, int)->void::: forwarding configuration set multiline limit
com.sun.tools.javac.util.ForwardingDiagnosticFormatter.ForwardingConfiguration#setVisible(Set)->void::: forwarding configuration set visible
com.sun.tools.javac.util.GraphUtils.Node#accept(NodeVisitor, A)->void:::visitor method.
com.sun.tools.javac.util.GraphUtils.NodeVisitor#visitNode(N, A)->void:::Visitor action for nodes.
com.sun.tools.javac.util.GraphUtils.NodeVisitor#visitDependency(DependencyKind, N, N, A)->void:::Visitor action for a dependency between 'from' and 'to' with given kind.
com.sun.tools.javac.util.GraphUtils.NodeVisitor#visit(Collection, A)->void:::Visitor entry point.
com.sun.tools.javac.util.GraphUtils.DottableNode#nodeAttributes()->Properties:::Retrieves the set of dot attributes associated with the node.
com.sun.tools.javac.util.GraphUtils.DottableNode#dependencyAttributes(N, DependencyKind)->Properties:::Retrieves the set of dot attributes associated with a given dependency.
com.sun.tools.javac.util.GraphUtils.AbstractNode#getSupportedDependencyKinds()->DependencyKind[]:::Get an array of the dependency kinds supported by this node.
com.sun.tools.javac.util.GraphUtils.AbstractNode#getDependenciesByKind(DependencyKind)->Collection:::Get all dependencies of a given kind
com.sun.tools.javac.util.GraphUtils.AbstractNode#toString()->String::: abstract node to string
com.sun.tools.javac.util.GraphUtils.AbstractNode#accept(NodeVisitor, A)->void::: abstract node accept
com.sun.tools.javac.util.GraphUtils.TarjanNode#getAllDependencies()->Iterable::: tarjan node get all dependencies
com.sun.tools.javac.util.GraphUtils.TarjanNode#compareTo(N)->int::: tarjan node compare to
com.sun.tools.javac.util.GraphUtils#tarjan(Iterable)->List>:::Tarjan's algorithm to determine strongly connected components of a directed graph in linear time
com.sun.tools.javac.util.GraphUtils#toDot(Collection, String, String)->String:::Debugging: dot representation of a set of connected nodes
com.sun.tools.javac.util.GraphUtils.DotVisitor#visitDependency(DependencyKind, N, N, StringBuilder)->void::: dot visitor visit dependency
com.sun.tools.javac.util.GraphUtils.DotVisitor#visitNode(N, StringBuilder)->void::: dot visitor visit node
com.sun.tools.javac.util.GraphUtils.DotVisitor#formatProperties(Properties)->String::: dot visitor format properties
com.sun.tools.javac.util.GraphUtils.DotVisitor#wrap(String)->String::: dot visitor wrap
com.sun.tools.javac.util.IntHashTable#hash(Object)->int:::Compute the hash code of a given object.
com.sun.tools.javac.util.IntHashTable#lookup(Object, int)->int:::Find either the index of a key's value, or the index of an available space.
com.sun.tools.javac.util.IntHashTable#lookup(Object)->int:::Lookup a given key's value in the hash table.
com.sun.tools.javac.util.IntHashTable#getFromIndex(int)->int:::Return the value stored at the specified index in the table.
com.sun.tools.javac.util.IntHashTable#putAtIndex(Object, int, int)->int:::Associates the specified key with the specified value in this map.
com.sun.tools.javac.util.IntHashTable#remove(Object)->int::: int hash table remove
com.sun.tools.javac.util.IntHashTable#rehash()->void:::Expand the hash table when it exceeds the load factor
com.sun.tools.javac.util.IntHashTable#clear()->void:::Removes all mappings from this map.
com.sun.tools.javac.util.Iterators#createCompoundIterator(Iterable, Function>)->Iterator::: iterators create compound iterator
com.sun.tools.javac.util.Iterators#createFilterIterator(Iterator, Predicate)->Iterator::: iterators create filter iterator
com.sun.tools.javac.util.JavacMessages#instance(Context)->JavacMessages:::Get the JavacMessages instance for this context.
com.sun.tools.javac.util.JavacMessages#getCurrentLocale()->Locale::: javac messages get current locale
com.sun.tools.javac.util.JavacMessages#setCurrentLocale(Locale)->void::: javac messages set current locale
com.sun.tools.javac.util.JavacMessages#add(String)->void::: javac messages add
com.sun.tools.javac.util.JavacMessages#add(ResourceBundleHelper)->void::: javac messages add
com.sun.tools.javac.util.JavacMessages#getBundles(Locale)->List::: javac messages get bundles
com.sun.tools.javac.util.JavacMessages#getLocalizedString(String, Object...)->String:::Gets the localized string corresponding to a key, formatted with a set of args.
com.sun.tools.javac.util.JavacMessages#getLocalizedString(JCDiagnostic.DiagnosticInfo)->String::: javac messages get localized string
com.sun.tools.javac.util.JavacMessages#getLocalizedString(Locale, String, Object...)->String::: javac messages get localized string
com.sun.tools.javac.util.JavacMessages#getLocalizedString(Locale, JCDiagnostic.DiagnosticInfo)->String::: javac messages get localized string
com.sun.tools.javac.util.JavacMessages#getDefaultLocalizedString(String, Object...)->String::: javac messages get default localized string
com.sun.tools.javac.util.JavacMessages#getDefaultMessages()->JavacMessages::: javac messages get default messages
com.sun.tools.javac.util.JavacMessages#getDefaultBundle()->ResourceBundle::: javac messages get default bundle
com.sun.tools.javac.util.JavacMessages#getDiagFactory()->JCDiagnostic.Factory::: javac messages get diag factory
com.sun.tools.javac.util.JavacMessages.ResourceBundleHelper#getResourceBundle(Locale)->ResourceBundle:::Gets the ResourceBundle.
com.sun.tools.javac.util.JCDiagnostic.Factory#instance(Context)->Factory:::Get the Factory instance for this context.
com.sun.tools.javac.util.JCDiagnostic.Factory#error(DiagnosticFlag, DiagnosticSource, DiagnosticPosition, String, Object...)->JCDiagnostic:::Create an error diagnostic
com.sun.tools.javac.util.JCDiagnostic.Factory#error(DiagnosticFlag, DiagnosticSource, DiagnosticPosition, Error)->JCDiagnostic:::Create an error diagnostic
com.sun.tools.javac.util.JCDiagnostic.Factory#mandatoryWarning(LintCategory, DiagnosticSource, DiagnosticPosition, String, Object...)->JCDiagnostic:::Create a warning diagnostic that will not be hidden by the -nowarn or -Xlint:none options.
com.sun.tools.javac.util.JCDiagnostic.Factory#mandatoryWarning(LintCategory, DiagnosticSource, DiagnosticPosition, Warning)->JCDiagnostic:::Create a warning diagnostic that will not be hidden by the -nowarn or -Xlint:none options.
com.sun.tools.javac.util.JCDiagnostic.Factory#warning(LintCategory, DiagnosticSource, DiagnosticPosition, String, Object...)->JCDiagnostic:::Create a warning diagnostic.
com.sun.tools.javac.util.JCDiagnostic.Factory#warning(LintCategory, DiagnosticSource, DiagnosticPosition, Warning)->JCDiagnostic:::Create a warning diagnostic.
com.sun.tools.javac.util.JCDiagnostic.Factory#mandatoryNote(DiagnosticSource, String, Object...)->JCDiagnostic:::Create a note diagnostic that will not be hidden by the -nowarn or -Xlint:none options.
com.sun.tools.javac.util.JCDiagnostic.Factory#mandatoryNote(DiagnosticSource, Note)->JCDiagnostic:::Create a note diagnostic that will not be hidden by the -nowarn or -Xlint:none options.
com.sun.tools.javac.util.JCDiagnostic.Factory#note(DiagnosticSource, DiagnosticPosition, String, Object...)->JCDiagnostic:::Create a note diagnostic.
com.sun.tools.javac.util.JCDiagnostic.Factory#note(DiagnosticSource, DiagnosticPosition, Note)->JCDiagnostic:::Create a note diagnostic.
com.sun.tools.javac.util.JCDiagnostic.Factory#fragment(String, Object...)->JCDiagnostic:::Create a fragment diagnostic, for use as an argument in other diagnostics
com.sun.tools.javac.util.JCDiagnostic.Factory#fragment(Fragment)->JCDiagnostic:::Create a fragment diagnostic, for use as an argument in other diagnostics
com.sun.tools.javac.util.JCDiagnostic.Factory#create(DiagnosticType, DiagnosticSource, DiagnosticPosition, String, Object...)->JCDiagnostic:::Create a new diagnostic of the given kind, which is not mandatory and which has no lint category.
com.sun.tools.javac.util.JCDiagnostic.Factory#create(DiagnosticSource, DiagnosticPosition, DiagnosticInfo)->JCDiagnostic:::Create a new diagnostic of the given kind, which is not mandatory and which has no lint category.
com.sun.tools.javac.util.JCDiagnostic.Factory#create(DiagnosticType, LintCategory, Set, DiagnosticSource, DiagnosticPosition, String, Object...)->JCDiagnostic:::Create a new diagnostic of the given kind.
com.sun.tools.javac.util.JCDiagnostic.Factory#create(LintCategory, Set, DiagnosticSource, DiagnosticPosition, DiagnosticInfo)->JCDiagnostic:::Create a new diagnostic with given key.
com.sun.tools.javac.util.JCDiagnostic.Factory#normalize(DiagnosticInfo)->DiagnosticInfo::: factory normalize
com.sun.tools.javac.util.JCDiagnostic.Factory#errorKey(String, Object...)->Error:::Create a new error key.
com.sun.tools.javac.util.JCDiagnostic.Factory#warningKey(String, Object...)->Warning:::Create a new warning key.
com.sun.tools.javac.util.JCDiagnostic.Factory#noteKey(String, Object...)->Note:::Create a new note key.
com.sun.tools.javac.util.JCDiagnostic.Factory#fragmentKey(String, Object...)->Fragment:::Create a new fragment key.
com.sun.tools.javac.util.JCDiagnostic#fragment(String, Object...)->JCDiagnostic:::Create a fragment diagnostic, for use as an argument in other diagnostics
com.sun.tools.javac.util.JCDiagnostic#getFragmentFormatter()->DiagnosticFormatter::: diagnostic get fragment formatter
com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition#getTree()->JCTree:::Gets the tree node, if any, to which the diagnostic applies.
com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition#getStartPosition()->int:::If there is a tree node, get the start position of the tree node
com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition#getPreferredPosition()->int:::Get the position within the file that most accurately defines the  location for the diagnostic.
com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition#getEndPosition(EndPosTable)->int:::If there is a tree node, and if endPositions are available, get  the end position of the tree node
com.sun.tools.javac.util.JCDiagnostic.SimpleDiagnosticPosition#getTree()->JCTree::: simple diagnostic position get tree
com.sun.tools.javac.util.JCDiagnostic.SimpleDiagnosticPosition#getStartPosition()->int::: simple diagnostic position get start position
com.sun.tools.javac.util.JCDiagnostic.SimpleDiagnosticPosition#getPreferredPosition()->int::: simple diagnostic position get preferred position
com.sun.tools.javac.util.JCDiagnostic.SimpleDiagnosticPosition#getEndPosition(EndPosTable)->int::: simple diagnostic position get end position
com.sun.tools.javac.util.JCDiagnostic.SourcePosition#getLineNumber()->int::: source position get line number
com.sun.tools.javac.util.JCDiagnostic.SourcePosition#getColumnNumber()->int::: source position get column number
com.sun.tools.javac.util.JCDiagnostic.DiagnosticInfo#key()->String:::Compute the resource key.
com.sun.tools.javac.util.JCDiagnostic.DiagnosticInfo#of(DiagnosticType, String, String, Object...)->DiagnosticInfo:::Static factory method; build a custom diagnostic key using given kind, prefix, code and args.
com.sun.tools.javac.util.JCDiagnostic.DiagnosticInfo#getCode()->String:::Returns the code for this diagnostic info, provided mainly for backward compatibility
com.sun.tools.javac.util.JCDiagnostic.DiagnosticInfo#getArgs()->Object[]:::Returns the arguments for this diagnostic info, provided mainly for backward compatibility
com.sun.tools.javac.util.JCDiagnostic.DiagnosticInfo#setArgs(Object[])->void::: diagnostic info set args
com.sun.tools.javac.util.JCDiagnostic#getType()->DiagnosticType:::Get the type of this diagnostic.
com.sun.tools.javac.util.JCDiagnostic#getSubdiagnostics()->List:::Get the subdiagnostic list
com.sun.tools.javac.util.JCDiagnostic#isMultiline()->boolean::: diagnostic is multiline
com.sun.tools.javac.util.JCDiagnostic#isMandatory()->boolean:::Check whether or not this diagnostic is required to be shown.
com.sun.tools.javac.util.JCDiagnostic#hasLintCategory()->boolean:::Check whether this diagnostic has an associated lint category.
com.sun.tools.javac.util.JCDiagnostic#getLintCategory()->LintCategory:::Get the associated lint category, or null if none.
com.sun.tools.javac.util.JCDiagnostic#getSource()->JavaFileObject:::Get the name of the source file referred to by this diagnostic.
com.sun.tools.javac.util.JCDiagnostic#getDiagnosticSource()->DiagnosticSource:::Get the source referred to by this diagnostic.
com.sun.tools.javac.util.JCDiagnostic#getIntStartPosition()->int::: diagnostic get int start position
com.sun.tools.javac.util.JCDiagnostic#getIntPosition()->int::: diagnostic get int position
com.sun.tools.javac.util.JCDiagnostic#getIntEndPosition()->int::: diagnostic get int end position
com.sun.tools.javac.util.JCDiagnostic#getStartPosition()->long::: diagnostic get start position
com.sun.tools.javac.util.JCDiagnostic#getPosition()->long::: diagnostic get position
com.sun.tools.javac.util.JCDiagnostic#getEndPosition()->long::: diagnostic get end position
com.sun.tools.javac.util.JCDiagnostic#getDiagnosticPosition()->DiagnosticPosition::: diagnostic get diagnostic position
com.sun.tools.javac.util.JCDiagnostic#getLineNumber()->long:::Get the line number within the source referred to by this diagnostic.
com.sun.tools.javac.util.JCDiagnostic#getColumnNumber()->long:::Get the column number within the line of source referred to by this diagnostic.
com.sun.tools.javac.util.JCDiagnostic#getArgs()->Object[]:::Get the arguments to be included in the text of the diagnostic.
com.sun.tools.javac.util.JCDiagnostic#getPrefix()->String:::Get the prefix string associated with this type of diagnostic.
com.sun.tools.javac.util.JCDiagnostic#getPrefix(DiagnosticType)->String:::Get the prefix string associated with a particular type of diagnostic.
com.sun.tools.javac.util.JCDiagnostic#toString()->String:::Return the standard presentation of this diagnostic.
com.sun.tools.javac.util.JCDiagnostic#getKind()->Diagnostic.Kind::: diagnostic get kind
com.sun.tools.javac.util.JCDiagnostic#getCode()->String::: diagnostic get code
com.sun.tools.javac.util.JCDiagnostic#getMessage(Locale)->String::: diagnostic get message
com.sun.tools.javac.util.JCDiagnostic#setFlag(DiagnosticFlag)->void::: diagnostic set flag
com.sun.tools.javac.util.JCDiagnostic#isFlagSet(DiagnosticFlag)->boolean::: diagnostic is flag set
com.sun.tools.javac.util.JCDiagnostic.MultilineDiagnostic#getSubdiagnostics()->List::: multiline diagnostic get subdiagnostics
com.sun.tools.javac.util.JCDiagnostic.MultilineDiagnostic#isMultiline()->boolean::: multiline diagnostic is multiline
com.sun.tools.javac.util.List#nil()->List:::Construct an empty list.
com.sun.tools.javac.util.List#filter(List, A)->List:::Returns the list obtained from 'l' after removing all elements 'elem'
com.sun.tools.javac.util.List#intersect(List)->List::: list intersect
com.sun.tools.javac.util.List#diff(List)->List::: list diff
com.sun.tools.javac.util.List#take(int)->List:::Create a new list from the first n elements of this list
com.sun.tools.javac.util.List#of(A)->List:::Construct a list consisting of given element.
com.sun.tools.javac.util.List#of(A, A)->List:::Construct a list consisting of given elements.
com.sun.tools.javac.util.List#of(A, A, A)->List:::Construct a list consisting of given elements.
com.sun.tools.javac.util.List#of(A, A, A, A...)->List:::Construct a list consisting of given elements.
com.sun.tools.javac.util.List#from(A[])->List:::Construct a list consisting all elements of given array.
com.sun.tools.javac.util.List#from(Iterable)->List::: list from
com.sun.tools.javac.util.List#fill(int, A)->List:::Construct a list consisting of a given number of identical elements.
com.sun.tools.javac.util.List#isEmpty()->boolean:::Does list have no elements?
com.sun.tools.javac.util.List#nonEmpty()->boolean::: list non empty
com.sun.tools.javac.util.List#length()->int::: list length
com.sun.tools.javac.util.List#size()->int::: list size
com.sun.tools.javac.util.List#setTail(List)->List::: list set tail
com.sun.tools.javac.util.List#prepend(A)->List:::Prepend given element to front of list, forming and returning  a new list.
com.sun.tools.javac.util.List#prependList(List)->List:::Prepend given list of elements to front of list, forming and returning  a new list.
com.sun.tools.javac.util.List#reverse()->List:::Reverse list
com.sun.tools.javac.util.List#append(A)->List:::Append given element at length, forming and returning  a new list.
com.sun.tools.javac.util.List#appendList(List)->List:::Append given list at length, forming and returning  a new list.
com.sun.tools.javac.util.List#appendList(ListBuffer)->List:::Append given list buffer at length, forming and returning a new list.
com.sun.tools.javac.util.List#toArray(T[])->T[]:::Copy successive elements of this list into given vector until  list is exhausted or end of vector is reached.
com.sun.tools.javac.util.List#toArray()->Object[]::: list to array
com.sun.tools.javac.util.List#toString(String)->String:::Form a string listing all elements with given separator character.
com.sun.tools.javac.util.List#toString()->String:::Form a string listing all elements with comma as the separator character.
com.sun.tools.javac.util.List#hashCode()->int:::Compute a hash code, overrides Object
com.sun.tools.javac.util.List#equals(Object)->boolean:::Is this list the same as other list?
com.sun.tools.javac.util.List#equals(List, List)->boolean:::Are the two lists the same?
com.sun.tools.javac.util.List#contains(Object)->boolean:::Does the list contain the specified element?
com.sun.tools.javac.util.List#last()->A:::The last element in the list, if any, or null.
com.sun.tools.javac.util.List#map(Function)->List::: list map
com.sun.tools.javac.util.List#convert(Class, List)->List::: list convert
com.sun.tools.javac.util.List#iterator()->Iterator::: list iterator
com.sun.tools.javac.util.List#get(int)->A::: list get
com.sun.tools.javac.util.List#addAll(int, Collection)->boolean::: list add all
com.sun.tools.javac.util.List#set(int, A)->A::: list set
com.sun.tools.javac.util.List#add(int, A)->void::: list add
com.sun.tools.javac.util.List#remove(int)->A::: list remove
com.sun.tools.javac.util.List#indexOf(Object)->int::: list index of
com.sun.tools.javac.util.List#lastIndexOf(Object)->int::: list last index of
com.sun.tools.javac.util.List#listIterator()->ListIterator::: list list iterator
com.sun.tools.javac.util.List#listIterator(int)->ListIterator::: list list iterator
com.sun.tools.javac.util.List#subList(int, int)->java.util.List::: list sub list
com.sun.tools.javac.util.List#collector()->Collector, List>:::Collect elements into a new list (using a @code{ListBuffer})
com.sun.tools.javac.util.ListBuffer#of(T)->ListBuffer::: list buffer of
com.sun.tools.javac.util.ListBuffer#clear()->void::: list buffer clear
com.sun.tools.javac.util.ListBuffer#length()->int:::Return the number of elements in this buffer.
com.sun.tools.javac.util.ListBuffer#size()->int::: list buffer size
com.sun.tools.javac.util.ListBuffer#isEmpty()->boolean:::Is buffer empty?
com.sun.tools.javac.util.ListBuffer#nonEmpty()->boolean:::Is buffer not empty?
com.sun.tools.javac.util.ListBuffer#prepend(A)->ListBuffer:::Prepend an element to buffer.
com.sun.tools.javac.util.ListBuffer#append(A)->ListBuffer:::Append an element to buffer.
com.sun.tools.javac.util.ListBuffer#appendList(List)->ListBuffer:::Append all elements in a list to buffer.
com.sun.tools.javac.util.ListBuffer#appendList(ListBuffer)->ListBuffer:::Append all elements in a list to buffer.
com.sun.tools.javac.util.ListBuffer#appendArray(A[])->ListBuffer:::Append all elements in an array to buffer.
com.sun.tools.javac.util.ListBuffer#toList()->List:::Convert buffer to a list of all its elements.
com.sun.tools.javac.util.ListBuffer#contains(Object)->boolean:::Does the list contain the specified element?
com.sun.tools.javac.util.ListBuffer#toArray(T[])->T[]:::Convert buffer to an array
com.sun.tools.javac.util.ListBuffer#toArray()->Object[]::: list buffer to array
com.sun.tools.javac.util.ListBuffer#first()->A:::The first element in this buffer.
com.sun.tools.javac.util.ListBuffer#next()->A:::Return first element in this buffer and remove
com.sun.tools.javac.util.ListBuffer#iterator()->Iterator:::An enumeration of all elements in this buffer.
com.sun.tools.javac.util.ListBuffer#add(A)->boolean::: list buffer add
com.sun.tools.javac.util.ListBuffer#remove(Object)->boolean::: list buffer remove
com.sun.tools.javac.util.ListBuffer#containsAll(Collection)->boolean::: list buffer contains all
com.sun.tools.javac.util.ListBuffer#addAll(Collection)->boolean::: list buffer add all
com.sun.tools.javac.util.ListBuffer#removeAll(Collection)->boolean::: list buffer remove all
com.sun.tools.javac.util.ListBuffer#retainAll(Collection)->boolean::: list buffer retain all
com.sun.tools.javac.util.ListBuffer#offer(A)->boolean::: list buffer offer
com.sun.tools.javac.util.ListBuffer#poll()->A::: list buffer poll
com.sun.tools.javac.util.ListBuffer#peek()->A::: list buffer peek
com.sun.tools.javac.util.ListBuffer#last()->A::: list buffer last
com.sun.tools.javac.util.Log.DiagnosticHandler#install(Log)->void:::Install this diagnostic handler as the current one, recording the previous one.
com.sun.tools.javac.util.Log.DiagnosticHandler#report(JCDiagnostic)->void:::Handle a diagnostic.
com.sun.tools.javac.util.Log.DiscardDiagnosticHandler#report(JCDiagnostic)->void::: discard diagnostic handler report
com.sun.tools.javac.util.Log.DeferredDiagnosticHandler#report(JCDiagnostic)->void::: deferred diagnostic handler report
com.sun.tools.javac.util.Log.DeferredDiagnosticHandler#getDiagnostics()->Queue::: deferred diagnostic handler get diagnostics
com.sun.tools.javac.util.Log.DeferredDiagnosticHandler#reportDeferredDiagnostics()->void:::Report all deferred diagnostics.
com.sun.tools.javac.util.Log.DeferredDiagnosticHandler#reportDeferredDiagnostics(Set)->void:::Report selected deferred diagnostics.
com.sun.tools.javac.util.Log#instance(Context)->Log:::Get the Log instance for this context.
com.sun.tools.javac.util.Log#preRegister(Context, PrintWriter)->void:::Register a Context.Factory to create a Log.
com.sun.tools.javac.util.Log#getDefaultMaxErrors()->int:::Default value for -Xmaxerrs.
com.sun.tools.javac.util.Log#getDefaultMaxWarnings()->int:::Default value for -Xmaxwarns.
com.sun.tools.javac.util.Log#hasDiagnosticListener()->boolean::: log has diagnostic listener
com.sun.tools.javac.util.Log#setEndPosTable(JavaFileObject, EndPosTable)->void::: log set end pos table
com.sun.tools.javac.util.Log#currentSourceFile()->JavaFileObject:::Return current sourcefile.
com.sun.tools.javac.util.Log#getDiagnosticFormatter()->DiagnosticFormatter:::Get the current diagnostic formatter.
com.sun.tools.javac.util.Log#setDiagnosticFormatter(DiagnosticFormatter)->void:::Set the current diagnostic formatter.
com.sun.tools.javac.util.Log#getWriter(WriterKind)->PrintWriter::: log get writer
com.sun.tools.javac.util.Log#setWriter(WriterKind, PrintWriter)->void::: log set writer
com.sun.tools.javac.util.Log#setWriters(PrintWriter)->void::: log set writers
com.sun.tools.javac.util.Log#popDiagnosticHandler(DiagnosticHandler)->void:::Replace the specified diagnostic handler with the handler that was current at the time this handler was created
com.sun.tools.javac.util.Log#flush()->void:::Flush the logs
com.sun.tools.javac.util.Log#flush(WriterKind)->void::: log flush
com.sun.tools.javac.util.Log#shouldReport(JavaFileObject, int)->boolean:::Returns true if an error needs to be reported for a given source name and pos.
com.sun.tools.javac.util.Log#prompt()->void:::Prompt user after an error.
com.sun.tools.javac.util.Log#printNewline()->void::: log print newline
com.sun.tools.javac.util.Log#printNewline(WriterKind)->void::: log print newline
com.sun.tools.javac.util.Log#printLines(String, Object...)->void::: log print lines
com.sun.tools.javac.util.Log#printLines(DiagnosticInfo)->void::: log print lines
com.sun.tools.javac.util.Log#printLines(PrefixKind, String, Object...)->void::: log print lines
com.sun.tools.javac.util.Log#printLines(WriterKind, String, Object...)->void::: log print lines
com.sun.tools.javac.util.Log#printLines(WriterKind, PrefixKind, String, Object...)->void::: log print lines
com.sun.tools.javac.util.Log#printRawLines(String)->void:::Print the text of a message, translating newlines appropriately  for the platform.
com.sun.tools.javac.util.Log#printRawLines(WriterKind, String)->void:::Print the text of a message, translating newlines appropriately  for the platform.
com.sun.tools.javac.util.Log#printRawLines(PrintWriter, String)->void:::Print the text of a message, translating newlines appropriately  for the platform.
com.sun.tools.javac.util.Log#printVerbose(String, Object...)->void:::Print the localized text of a "verbose" message to the noticeWriter stream.
com.sun.tools.javac.util.Log#directError(String, Object...)->void::: log direct error
com.sun.tools.javac.util.Log#strictWarning(DiagnosticPosition, String, Object...)->void:::Report a warning that cannot be suppressed.
com.sun.tools.javac.util.Log#report(JCDiagnostic)->void:::Primary method to report a diagnostic.
com.sun.tools.javac.util.Log#writeDiagnostic(JCDiagnostic)->void:::Write out a diagnostic.
com.sun.tools.javac.util.Log#getWriterForDiagnosticType(DiagnosticType)->PrintWriter::: log get writer for diagnostic type
com.sun.tools.javac.util.Log#getLocalizedString(String, Object...)->String:::Find a localized string in the resource bundle
com.sun.tools.javac.util.Log#localize(String, Object...)->String:::Find a localized string in the resource bundle.
com.sun.tools.javac.util.Log#localize(JCDiagnostic.DiagnosticInfo)->String::: log localize
com.sun.tools.javac.util.Log#localize(PrefixKind, String, Object...)->String:::Find a localized string in the resource bundle.
com.sun.tools.javac.util.Log#rawError(int, String)->void:::report an error:
com.sun.tools.javac.util.Log#rawWarning(int, String)->void:::report a warning:
com.sun.tools.javac.util.Log#format(String, Object...)->String::: log format
com.sun.tools.javac.util.MandatoryWarningHandler#report(DiagnosticPosition, Warning)->void:::Report a mandatory warning.
com.sun.tools.javac.util.MandatoryWarningHandler#reportDeferredDiagnostic()->void:::Report any diagnostic that might have been deferred by previous calls of report().
com.sun.tools.javac.util.MatchingUtils#isValidImportString(String)->boolean:::Return true if the argument string is a valid import-style string specifying claimed annotations; return false otherwise.
com.sun.tools.javac.util.MatchingUtils#validImportStringToPatternString(String)->String::: matching utils valid import string to pattern string
com.sun.tools.javac.util.MatchingUtils#validImportStringToPattern(String)->Pattern::: matching utils valid import string to pattern
com.sun.tools.javac.util.ModuleHelper#addExports(Module, Module)->void::: module helper add exports
com.sun.tools.javac.util.Name#contentEquals(CharSequence)->boolean::: name content equals
com.sun.tools.javac.util.Name#length()->int::: name length
com.sun.tools.javac.util.Name#charAt(int)->char::: name char at
com.sun.tools.javac.util.Name#subSequence(int, int)->CharSequence::: name sub sequence
com.sun.tools.javac.util.Name#append(Name)->Name:::Return the concatenation of this name and name `n'.
com.sun.tools.javac.util.Name#append(char, Name)->Name:::Return the concatenation of this name, the given ASCII  character, and name `n'.
com.sun.tools.javac.util.Name#compareTo(Name)->int:::An arbitrary but consistent complete order among all Names.
com.sun.tools.javac.util.Name#isEmpty()->boolean:::Return true if this is the empty name.
com.sun.tools.javac.util.Name#lastIndexOf(byte)->int:::Returns last occurrence of byte b in this name, -1 if not found.
com.sun.tools.javac.util.Name#startsWith(Name)->boolean:::Does this name start with prefix?
com.sun.tools.javac.util.Name#subName(int, int)->Name:::Returns the sub-name starting at position start, up to and  excluding position end.
com.sun.tools.javac.util.Name#toString()->String:::Return the string representation of this name.
com.sun.tools.javac.util.Name#toUtf()->byte[]:::Return the Utf8 representation of this name.
com.sun.tools.javac.util.Name#getIndex()->int::: name get index
com.sun.tools.javac.util.Name#getByteLength()->int:::Get the length (in bytes) of this name.
com.sun.tools.javac.util.Name#getByteAt(int)->byte:::Returns i'th byte of this name.
com.sun.tools.javac.util.Name#getBytes(byte[], int)->void:::Copy all bytes of this name to buffer cs, starting at start.
com.sun.tools.javac.util.Name#getByteArray()->byte[]:::Get the underlying byte array for this name
com.sun.tools.javac.util.Name#getByteOffset()->int:::Get the start offset of this name within its byte array.
com.sun.tools.javac.util.Name.Table#fromChars(char[], int, int)->Name:::Get the name from the characters in cs[start..start+len-1].
com.sun.tools.javac.util.Name.Table#fromString(String)->Name:::Get the name for the characters in string s.
com.sun.tools.javac.util.Name.Table#fromUtf(byte[])->Name:::Get the name for the bytes in array cs
com.sun.tools.javac.util.Name.Table#fromUtf(byte[], int, int)->Name:::get the name for the bytes in cs[start..start+len-1]
com.sun.tools.javac.util.Name.Table#dispose()->void:::Release any resources used by this table.
com.sun.tools.javac.util.Name.Table#hashValue(byte[], int, int)->int:::The hashcode of a name.
com.sun.tools.javac.util.Name.Table#equals(byte[], int, byte[], int, int)->boolean:::Compare two subarrays
com.sun.tools.javac.util.Names#instance(Context)->Names::: names instance
com.sun.tools.javac.util.Names#createTable(Options)->Name.Table::: names create table
com.sun.tools.javac.util.Names#dispose()->void::: names dispose
com.sun.tools.javac.util.Names#fromChars(char[], int, int)->Name::: names from chars
com.sun.tools.javac.util.Names#fromString(String)->Name::: names from string
com.sun.tools.javac.util.Names#fromUtf(byte[])->Name::: names from utf
com.sun.tools.javac.util.Names#fromUtf(byte[], int, int)->Name::: names from utf
com.sun.tools.javac.util.Options#instance(Context)->Options:::Get the Options instance for this context.
com.sun.tools.javac.util.Options#get(String)->String:::Get the value for an undocumented option.
com.sun.tools.javac.util.Options#get(Option)->String:::Get the value for an option.
com.sun.tools.javac.util.Options#getBoolean(String)->boolean:::Get the boolean value for an option, patterned after Boolean.getBoolean, essentially will return true, iff the value exists and is set to "true".
com.sun.tools.javac.util.Options#getBoolean(String, boolean)->boolean:::Get the boolean with a default value if the option is not set.
com.sun.tools.javac.util.Options#isSet(String)->boolean:::Check if the value for an undocumented option has been set.
com.sun.tools.javac.util.Options#isSet(Option)->boolean:::Check if the value for an option has been set.
com.sun.tools.javac.util.Options#isSet(Option, String)->boolean:::Check if the value for a choice option has been set to a specific value.
com.sun.tools.javac.util.Options#isLintSet(String)->boolean:::Check if the value for a lint option has been explicitly set, either with -Xlint:opt  or if all lint options have enabled and this one not disabled with -Xlint:-opt.
com.sun.tools.javac.util.Options#isUnset(String)->boolean:::Check if the value for an undocumented option has not been set.
com.sun.tools.javac.util.Options#isUnset(Option)->boolean:::Check if the value for an option has not been set.
com.sun.tools.javac.util.Options#isUnset(Option, String)->boolean:::Check if the value for a choice option has not been set to a specific value.
com.sun.tools.javac.util.Options#put(String, String)->void::: options put
com.sun.tools.javac.util.Options#put(Option, String)->void::: options put
com.sun.tools.javac.util.Options#putAll(Options)->void::: options put all
com.sun.tools.javac.util.Options#remove(String)->void::: options remove
com.sun.tools.javac.util.Options#keySet()->Set::: options key set
com.sun.tools.javac.util.Options#size()->int::: options size
com.sun.tools.javac.util.Options#addListener(Runnable)->void::: options add listener
com.sun.tools.javac.util.Options#notifyListeners()->void::: options notify listeners
com.sun.tools.javac.util.Pair#toString()->String::: pair to string
com.sun.tools.javac.util.Pair#equals(Object)->boolean::: pair equals
com.sun.tools.javac.util.Pair#hashCode()->int::: pair hash code
com.sun.tools.javac.util.Pair#of(A, B)->Pair::: pair of
com.sun.tools.javac.util.Position#makeLineMap(char[], int, boolean)->LineMap:::A two-way map between line/column numbers and positions,  derived from a scan done at creation time
com.sun.tools.javac.util.Position#encodePosition(int, int)->int:::Encode line and column numbers in an integer as:  line-number << LINESHIFT + column-number 
com.sun.tools.javac.util.Position.LineMap#getStartPosition(int)->int:::Find the start position of a line.
com.sun.tools.javac.util.Position.LineMap#getPosition(int, int)->int:::Find the position corresponding to a (line,column).
com.sun.tools.javac.util.Position.LineMap#getLineNumber(int)->int:::Find the line containing a position; a line termination character is on the line it terminates.
com.sun.tools.javac.util.Position.LineMap#getColumnNumber(int)->int:::Find the column for a character position
com.sun.tools.javac.util.Position.LineMapImpl#build(char[], int)->void::: line map impl build
com.sun.tools.javac.util.Position.LineMapImpl#getStartPosition(int)->int::: line map impl get start position
com.sun.tools.javac.util.Position.LineMapImpl#getStartPosition(long)->long::: line map impl get start position
com.sun.tools.javac.util.Position.LineMapImpl#getPosition(int, int)->int::: line map impl get position
com.sun.tools.javac.util.Position.LineMapImpl#getPosition(long, long)->long::: line map impl get position
com.sun.tools.javac.util.Position.LineMapImpl#getLineNumber(int)->int::: line map impl get line number
com.sun.tools.javac.util.Position.LineMapImpl#getLineNumber(long)->long::: line map impl get line number
com.sun.tools.javac.util.Position.LineMapImpl#getColumnNumber(int)->int::: line map impl get column number
com.sun.tools.javac.util.Position.LineMapImpl#getColumnNumber(long)->long::: line map impl get column number
com.sun.tools.javac.util.Position.LineMapImpl#setTabPosition(int)->void::: line map impl set tab position
com.sun.tools.javac.util.Position.LineTabMapImpl#setTabPosition(int)->void::: line tab map impl set tab position
com.sun.tools.javac.util.Position.LineTabMapImpl#getColumnNumber(int)->int::: line tab map impl get column number
com.sun.tools.javac.util.Position.LineTabMapImpl#getPosition(int, int)->int::: line tab map impl get position
com.sun.tools.javac.util.PropagatedException#getCause()->RuntimeException::: propagated exception get cause
com.sun.tools.javac.util.RawDiagnosticFormatter.RawDiagnosticPosHelper#getPosition(JCExpression)->String::: raw diagnostic pos helper get position
com.sun.tools.javac.util.RawDiagnosticFormatter#formatDiagnostic(JCDiagnostic, Locale)->String::: raw diagnostic formatter format diagnostic
com.sun.tools.javac.util.RawDiagnosticFormatter#formatMessage(JCDiagnostic, Locale)->String::: raw diagnostic formatter format message
com.sun.tools.javac.util.RawDiagnosticFormatter#formatArgument(JCDiagnostic, Object, Locale)->String::: raw diagnostic formatter format argument
com.sun.tools.javac.util.RawDiagnosticFormatter#localize(Locale, String, Object...)->String::: raw diagnostic formatter localize
com.sun.tools.javac.util.RawDiagnosticFormatter#isRaw()->boolean::: raw diagnostic formatter is raw
com.sun.tools.javac.util.RichDiagnosticFormatter#instance(Context)->RichDiagnosticFormatter:::Get the DiagnosticFormatter instance for this context.
com.sun.tools.javac.util.RichDiagnosticFormatter#format(JCDiagnostic, Locale)->String::: rich diagnostic formatter format
com.sun.tools.javac.util.RichDiagnosticFormatter#formatMessage(JCDiagnostic, Locale)->String::: rich diagnostic formatter format message
com.sun.tools.javac.util.RichDiagnosticFormatter#setRichPrinter(RichPrinter)->void:::Sets the type/symbol printer used by this formatter.
com.sun.tools.javac.util.RichDiagnosticFormatter#getRichPrinter()->RichPrinter:::Returns the type/symbol printer used by this formatter.
com.sun.tools.javac.util.RichDiagnosticFormatter#preprocessDiagnostic(JCDiagnostic)->void:::Preprocess a given diagnostic by looking both into its arguments and into its subdiagnostics (if any)
com.sun.tools.javac.util.RichDiagnosticFormatter#preprocessArgument(Object)->void:::Preprocess a diagnostic argument
com.sun.tools.javac.util.RichDiagnosticFormatter#getWhereClauses()->List:::Build a list of multiline diagnostics containing detailed info about type-variables, captured types, and intersection types
com.sun.tools.javac.util.RichDiagnosticFormatter.ClassNameSimplifier#addUsage(Symbol)->void:::Add a name usage to the simplifier's internal cache
com.sun.tools.javac.util.RichDiagnosticFormatter.ClassNameSimplifier#simplify(Symbol)->String::: class name simplifier simplify
com.sun.tools.javac.util.RichDiagnosticFormatter.RichPrinter#localize(Locale, String, Object...)->String::: rich printer localize
com.sun.tools.javac.util.RichDiagnosticFormatter.RichPrinter#capturedVarId(CapturedType, Locale)->String::: rich printer captured var id
com.sun.tools.javac.util.RichDiagnosticFormatter.RichPrinter#visitType(Type, Locale)->String::: rich printer visit type
com.sun.tools.javac.util.RichDiagnosticFormatter.RichPrinter#visitCapturedType(CapturedType, Locale)->String::: rich printer visit captured type
com.sun.tools.javac.util.RichDiagnosticFormatter.RichPrinter#visitClassType(ClassType, Locale)->String::: rich printer visit class type
com.sun.tools.javac.util.RichDiagnosticFormatter.RichPrinter#className(ClassType, boolean, Locale)->String::: rich printer class name
com.sun.tools.javac.util.RichDiagnosticFormatter.RichPrinter#visitTypeVar(TypeVar, Locale)->String::: rich printer visit type var
com.sun.tools.javac.util.RichDiagnosticFormatter.RichPrinter#visitClassSymbol(ClassSymbol, Locale)->String::: rich printer visit class symbol
com.sun.tools.javac.util.RichDiagnosticFormatter.RichPrinter#visitMethodSymbol(MethodSymbol, Locale)->String::: rich printer visit method symbol
com.sun.tools.javac.util.RichDiagnosticFormatter#preprocessType(Type)->void:::Preprocess a given type looking for (i) additional info (where clauses) to be added to the main diagnostic (ii) names to be compacted.
com.sun.tools.javac.util.RichDiagnosticFormatter#preprocessSymbol(Symbol)->void:::Preprocess a given symbol looking for (i) additional info (where clauses) to be added to the main diagnostic (ii) names to be compacted
com.sun.tools.javac.util.RichDiagnosticFormatter#getConfiguration()->RichConfiguration::: rich diagnostic formatter get configuration
com.sun.tools.javac.util.RichDiagnosticFormatter.RichConfiguration#getAvailableFeatures()->RichFormatterFeature[]:::Returns a list of all the features supported by the rich formatter.
com.sun.tools.javac.util.RichDiagnosticFormatter.RichConfiguration#enable(RichFormatterFeature)->void:::Enable a specific feature on this rich formatter.
com.sun.tools.javac.util.RichDiagnosticFormatter.RichConfiguration#disable(RichFormatterFeature)->void:::Disable a specific feature on this rich formatter.
com.sun.tools.javac.util.RichDiagnosticFormatter.RichConfiguration#isEnabled(RichFormatterFeature)->boolean:::Is a given feature enabled on this formatter?
com.sun.tools.javac.util.SharedNameTable#create(Names)->SharedNameTable::: shared name table create
com.sun.tools.javac.util.SharedNameTable#fromChars(char[], int, int)->Name::: shared name table from chars
com.sun.tools.javac.util.SharedNameTable#fromUtf(byte[], int, int)->Name::: shared name table from utf
com.sun.tools.javac.util.SharedNameTable#dispose()->void::: shared name table dispose
com.sun.tools.javac.util.SharedNameTable.NameImpl#getIndex()->int::: name impl get index
com.sun.tools.javac.util.SharedNameTable.NameImpl#getByteLength()->int::: name impl get byte length
com.sun.tools.javac.util.SharedNameTable.NameImpl#getByteAt(int)->byte::: name impl get byte at
com.sun.tools.javac.util.SharedNameTable.NameImpl#getByteArray()->byte[]::: name impl get byte array
com.sun.tools.javac.util.SharedNameTable.NameImpl#getByteOffset()->int::: name impl get byte offset
com.sun.tools.javac.util.SharedNameTable.NameImpl#hashCode()->int:::Return the hash value of this name.
com.sun.tools.javac.util.SharedNameTable.NameImpl#equals(Object)->boolean:::Is this name equal to other?
com.sun.tools.javac.util.StringUtils#toLowerCase(String)->String:::Converts the given String to lower case using the Locale#US US Locale
com.sun.tools.javac.util.StringUtils#toUpperCase(String)->String:::Converts the given String to upper case using the Locale#US US Locale
com.sun.tools.javac.util.StringUtils#indexOfIgnoreCase(String, String)->int:::Case insensitive version of String#indexOf(java.lang.String)
com.sun.tools.javac.util.StringUtils#indexOfIgnoreCase(String, String, int)->int:::Case insensitive version of String#indexOf(java.lang.String, int)
com.sun.tools.javac.util.UnsharedNameTable#create(Names)->Name.Table::: unshared name table create
com.sun.tools.javac.util.UnsharedNameTable#fromChars(char[], int, int)->Name::: unshared name table from chars
com.sun.tools.javac.util.UnsharedNameTable#fromUtf(byte[], int, int)->Name::: unshared name table from utf
com.sun.tools.javac.util.UnsharedNameTable#dispose()->void::: unshared name table dispose
com.sun.tools.javac.util.UnsharedNameTable.NameImpl#getIndex()->int::: name impl get index
com.sun.tools.javac.util.UnsharedNameTable.NameImpl#getByteLength()->int::: name impl get byte length
com.sun.tools.javac.util.UnsharedNameTable.NameImpl#getByteAt(int)->byte::: name impl get byte at
com.sun.tools.javac.util.UnsharedNameTable.NameImpl#getByteArray()->byte[]::: name impl get byte array
com.sun.tools.javac.util.UnsharedNameTable.NameImpl#getByteOffset()->int::: name impl get byte offset
com.sun.tools.javac.util.Warner#pos()->DiagnosticPosition::: warner pos
com.sun.tools.javac.util.Warner#warn(LintCategory)->void::: warner warn
com.sun.tools.javac.util.Warner#silentWarn(LintCategory)->void::: warner silent warn
com.sun.tools.javac.util.Warner#hasSilentLint(LintCategory)->boolean::: warner has silent lint
com.sun.tools.javac.util.Warner#hasNonSilentLint(LintCategory)->boolean::: warner has non silent lint
com.sun.tools.javac.util.Warner#hasLint(LintCategory)->boolean::: warner has lint
com.sun.tools.javac.util.Warner#clear()->void::: warner clear

org.w3c.dom.traversal.DocumentTraversal#createNodeIterator(Node, int, NodeFilter, boolean)->NodeIterator:::Create a new NodeIterator over the subtree rooted at the specified node.
org.w3c.dom.traversal.DocumentTraversal#createTreeWalker(Node, int, NodeFilter, boolean)->TreeWalker:::Create a new TreeWalker over the subtree rooted at the specified node.
org.w3c.dom.traversal.NodeFilter#acceptNode(Node)->short:::Test whether a specified node is visible in the logical view of a TreeWalker or NodeIterator
org.w3c.dom.traversal.NodeIterator#getRoot()->Node:::The root node of the NodeIterator, as specified when it was created.
org.w3c.dom.traversal.NodeIterator#getWhatToShow()->int:::This attribute determines which node types are presented via the NodeIterator
org.w3c.dom.traversal.NodeIterator#getFilter()->NodeFilter:::The NodeFilter used to screen nodes.
org.w3c.dom.traversal.NodeIterator#getExpandEntityReferences()->boolean::: The value of this flag determines whether the children of entity reference nodes are visible to the NodeIterator
org.w3c.dom.traversal.NodeIterator#nextNode()->Node:::Returns the next node in the set and advances the position of the NodeIterator in the set
org.w3c.dom.traversal.NodeIterator#previousNode()->Node:::Returns the previous node in the set and moves the position of the NodeIterator backwards in the set.
org.w3c.dom.traversal.NodeIterator#detach()->void:::Detaches the NodeIterator from the set which it iterated over, releasing any computational resources and placing the NodeIterator in the INVALID state
org.w3c.dom.traversal.TreeWalker#getRoot()->Node:::The root node of the TreeWalker, as specified when it was created.
org.w3c.dom.traversal.TreeWalker#getWhatToShow()->int:::This attribute determines which node types are presented via the TreeWalker
org.w3c.dom.traversal.TreeWalker#getFilter()->NodeFilter:::The filter used to screen nodes.
org.w3c.dom.traversal.TreeWalker#getExpandEntityReferences()->boolean:::The value of this flag determines whether the children of entity reference nodes are visible to the TreeWalker
org.w3c.dom.traversal.TreeWalker#getCurrentNode()->Node:::The node at which the TreeWalker is currently positioned
org.w3c.dom.traversal.TreeWalker#setCurrentNode(Node)->void:::The node at which the TreeWalker is currently positioned
org.w3c.dom.traversal.TreeWalker#parentNode()->Node:::Moves to and returns the closest visible ancestor node of the current node
org.w3c.dom.traversal.TreeWalker#firstChild()->Node:::Moves the TreeWalker to the first visible child of the current node, and returns the new node
org.w3c.dom.traversal.TreeWalker#lastChild()->Node:::Moves the TreeWalker to the last visible child of the current node, and returns the new node
org.w3c.dom.traversal.TreeWalker#previousSibling()->Node:::Moves the TreeWalker to the previous sibling of the current node, and returns the new node
org.w3c.dom.traversal.TreeWalker#nextSibling()->Node:::Moves the TreeWalker to the next sibling of the current node, and returns the new node
org.w3c.dom.traversal.TreeWalker#previousNode()->Node:::Moves the TreeWalker to the previous visible node in document order relative to the current node, and returns the new node
org.w3c.dom.traversal.TreeWalker#nextNode()->Node:::Moves the TreeWalker to the next visible node in document order relative to the current node, and returns the new node

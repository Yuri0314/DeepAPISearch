HttpClient#newHttpClient():::Returns a new HttpClient with default settings:::return->newBuilder->build
HttpClient#newBuilder():::Creates a new HttpClient builder.:::return->new->HttpClientBuilderImpl
HttpClient.Builder#cookieHandler(CookieHandler):::Sets a cookie handler.:::
HttpClient.Builder#connectTimeout(Duration):::Sets the connect timeout duration for this client:::
HttpClient.Builder#sslContext(SSLContext):::Sets an SSLContext:::
HttpClient.Builder#sslParameters(SSLParameters):::Sets an SSLParameters:::
HttpClient.Builder#executor(Executor):::Sets the executor to be used for asynchronous and dependent tasks:::
HttpClient.Builder#followRedirects(Redirect):::Specifies whether requests will automatically follow redirects issued by the server:::
HttpClient.Builder#version(HttpClient.Version):::Requests a specific HTTP protocol version where possible:::
HttpClient.Builder#priority(int):::Sets the default priority for any HTTP/2 requests sent from this client:::
HttpClient.Builder#proxy(ProxySelector):::Sets a java.net.ProxySelector.:::
HttpClient.Builder#authenticator(Authenticator):::Sets an authenticator to use for HTTP authentication.:::
HttpClient.Builder#build():::Returns a new HttpClient built from the current state of this builder.:::
HttpClient#cookieHandler():::Returns an Optional containing this client's CookieHandler:::
HttpClient#connectTimeout():::Returns an Optional containing the connect timeout duration for this client:::
HttpClient#followRedirects():::Returns the follow redirects policy for this client:::
HttpClient#proxy():::Returns an Optional containing the ProxySelector supplied to this client:::
HttpClient#sslContext():::Returns this client's SSLContext:::
HttpClient#sslParameters():::Returns a copy of this client's SSLParameters:::
HttpClient#authenticator():::Returns an Optional containing the Authenticator set on this client:::
HttpClient#version():::Returns the preferred HTTP protocol version for this client:::
HttpClient#executor():::Returns an Optional containing this client's Executor:::
HttpClient#send(HttpRequest, HttpResponse.BodyHandler):::Sends the given request using this client, blocking if necessary to get the response:::
HttpClient#sendAsync(HttpRequest, BodyHandler):::Sends the given request asynchronously using this client with the given response body handler:::
HttpClient#sendAsync(HttpRequest, BodyHandler, PushPromiseHandler):::Sends the given request asynchronously using this client with the given response body handler and push promise handler:::
HttpClient#newWebSocketBuilder():::Creates a new WebSocket builder (optional operation):::throw->new->UnsupportedOperationException
HttpHeaders#firstValue(String):::Returns an Optional containing the first header string value of the given named (and possibly multi-valued) header:::return->allValues->stream->findFirst
HttpHeaders#firstValueAsLong(String):::Returns an OptionalLong containing the first header string value of the named header field:::return->allValues->stream->Long->valueOf->mapToLong->findFirst
HttpHeaders#allValues(String):::Returns an unmodifiable List of all of the header string values of the given named header:::requireNonNull->values->map->get->return->List->of
HttpHeaders#map():::Returns an unmodifiable multi Map view of this HttpHeaders.:::return
HttpHeaders#equals(Object):::Tests this HTTP headers instance for equality with the given object:::if->return->that->return->this->map->that->map->equals
HttpHeaders#hashCode():::Computes a hash code for this HTTP headers instance:::h->foreach->map->entrySet->entryHash->return
HttpHeaders#toString():::Returns this HTTP headers as a string.:::sb->new->StringBuilder->sb->super->toString->append->append->sb->map->append->sb->append->return->sb->toString
HttpHeaders#of(Map>, BiPredicate):::Returns an HTTP headers from the given map:::requireNonNull->requireNonNull->return->headersOf
HttpHeaders#entryHash(Map.Entry>)::: http headers entry hash:::key->e->getKey->value->e->getValue->keyHash->key->toLowerCase->hashCode->valueHash->value->hashCode->return
HttpHeaders#headersOf(Map>, BiPredicate)::: http headers headers of:::other->new->TreeMap<>->notAdded->new->TreeSet<>->tempList->new->ArrayList<>->map->headerName->requireNonNull->trim->if->headerName->isEmpty->throw->new->IllegalArgumentException->headerValues->requireNonNull->headerValues->requireNonNull->trim->if->filter->test->tempList->add->forEach->if->tempList->isEmpty->if->other->containsKey->notAdded->headerName->toLowerCase->contains->throw->new->IllegalArgumentException->notAdded->headerName->toLowerCase->add->else->if->other->List->copyOf->put->throw->new->IllegalArgumentException->tempList->clear->forEach->return->other->isEmpty->unmodifiableMap->new->HttpHeaders
HttpRequest.Builder#uri(URI):::Sets this HttpRequest's request URI.:::
HttpRequest.Builder#expectContinue(boolean):::Requests the server to acknowledge the request before sending the body:::
HttpRequest.Builder#version(HttpClient.Version):::Sets the preferred HttpClient.Version for this request:::
HttpRequest.Builder#header(String, String):::Adds the given name value pair to the set of headers for this request:::
HttpRequest.Builder#headers(String...):::Adds the given name value pairs to the set of headers for this request:::
HttpRequest.Builder#timeout(Duration):::Sets a timeout for this request:::
HttpRequest.Builder#setHeader(String, String):::Sets the given name value pair to the set of headers for this request:::
HttpRequest.Builder#GET():::Sets the request method of this builder to GET:::
HttpRequest.Builder#POST(BodyPublisher):::Sets the request method of this builder to POST and sets its request body publisher to the given value.:::
HttpRequest.Builder#PUT(BodyPublisher):::Sets the request method of this builder to PUT and sets its request body publisher to the given value.:::
HttpRequest.Builder#DELETE():::Sets the request method of this builder to DELETE.:::
HttpRequest.Builder#method(String, BodyPublisher):::Sets the request method and request body of this builder to the given values.:::
HttpRequest.Builder#build():::Builds and returns an HttpRequest.:::
HttpRequest.Builder#copy():::Returns an exact duplicate copy of this Builder based on current state:::
HttpRequest#newBuilder(URI):::Creates an HttpRequest builder with the given URI.:::return->new->HttpRequestBuilderImpl
HttpRequest#newBuilder():::Creates an HttpRequest builder.:::return->new->HttpRequestBuilderImpl
HttpRequest#bodyPublisher():::Returns an Optional containing the BodyPublisher set on this request:::
HttpRequest#method():::Returns the request method for this request:::
HttpRequest#timeout():::Returns an Optional containing this request's timeout duration:::
HttpRequest#expectContinue():::Returns this request's HttpRequest.Builder#expectContinue(boolean) expect continue setting.:::
HttpRequest#uri():::Returns this request's URI.:::
HttpRequest#version():::Returns an Optional containing the HTTP protocol version that will be requested for this HttpRequest:::
HttpRequest#headers():::The (user-accessible) request headers that this request was (or will be) sent with.:::
HttpRequest#equals(Object):::Tests this HTTP request instance for equality with the given object:::if->return->that->if->that->method->this->method->equals->return->if->that->uri->this->uri->equals->return->if->that->headers->this->headers->equals->return->return
HttpRequest#hashCode():::Computes a hash code for this HTTP request instance:::return->method->hashCode->uri->hashCode->headers->hashCode
HttpRequest.BodyPublisher#contentLength():::Returns the content length for this request body:::
HttpRequest.BodyPublishers#fromPublisher(Flow.Publisher):::Returns a request body publisher whose body is retrieved from the given Flow.Publisher:::return->new->RequestPublishers.PublisherAdapter
HttpRequest.BodyPublishers#fromPublisher(Flow.Publisher, long):::Returns a request body publisher whose body is retrieved from the given Flow.Publisher:::if->throw->new->IllegalArgumentException->return->new->RequestPublishers.PublisherAdapter
HttpRequest.BodyPublishers#ofString(String):::Returns a request body publisher whose body is the given String, converted using the StandardCharsets#UTF_8 UTF_8 character set.:::return->ofString
HttpRequest.BodyPublishers#ofString(String, Charset):::Returns a request body publisher whose body is the given String, converted using the given character set.:::return->new->RequestPublishers.StringPublisher
HttpRequest.BodyPublishers#ofInputStream(Supplier)::: body publishers of input stream:::return->new->RequestPublishers.InputStreamPublisher
HttpRequest.BodyPublishers#ofByteArray(byte[]):::Returns a request body publisher whose body is the given byte array.:::return->new->RequestPublishers.ByteArrayPublisher
HttpRequest.BodyPublishers#ofByteArray(byte[], int, int):::Returns a request body publisher whose body is the content of the given byte array of length bytes starting from the specified offset.:::Objects->checkFromIndexSize->return->new->RequestPublishers.ByteArrayPublisher
HttpRequest.BodyPublishers#ofFile(Path):::A request body publisher that takes data from the contents of a File:::Objects->requireNonNull->return->create
HttpRequest.BodyPublishers#ofByteArrays(Iterable):::A request body publisher that takes data from an Iterable of byte arrays:::return->new->RequestPublishers.IterablePublisher
HttpRequest.BodyPublishers#noBody():::A request body publisher which sends no request body.:::return->new->RequestPublishers.EmptyPublisher
HttpResponse#statusCode():::Returns the status code for this response.:::
HttpResponse#request():::Returns the HttpRequest corresponding to this response:::
HttpResponse#previousResponse():::Returns an Optional containing the previous intermediate response if one was received:::
HttpResponse#headers():::Returns the received response headers.:::
HttpResponse#body():::Returns the body:::
HttpResponse#sslSession():::Returns an Optional containing the SSLSession in effect for this response:::
HttpResponse#uri():::Returns the URI that the response was received from:::
HttpResponse#version():::Returns the HTTP protocol version that was used for this response.:::
HttpResponse.ResponseInfo#statusCode():::Provides the response status code.:::
HttpResponse.ResponseInfo#headers():::Provides the response headers.:::
HttpResponse.ResponseInfo#version():::Provides the response protocol version.:::
HttpResponse.BodyHandler#apply(ResponseInfo):::Returns a BodySubscriber BodySubscriber considering the given response status code and headers:::
HttpResponse.BodyHandlers#fromSubscriber(Subscriber>):::Returns a response body handler that returns a BodySubscriber BodySubscriber<Void> obtained from BodySubscribers#fromSubscriber(Subscriber), with the given subscriber:::Objects->requireNonNull->return->BodySubscribers->fromSubscriber
HttpResponse.BodyHandlers#fromSubscriber(S, Function):::Returns a response body handler that returns a BodySubscriber BodySubscriber<T> obtained from BodySubscribers#fromSubscriber(Subscriber, Function), with the given subscriber and finisher function:::Objects->requireNonNull->Objects->requireNonNull->return->BodySubscribers->fromSubscriber
HttpResponse.BodyHandlers#fromLineSubscriber(Subscriber):::Returns a response body handler that returns a BodySubscriber BodySubscriber<Void> obtained from BodySubscribers#fromLineSubscriber(Subscriber, Function, Charset, String) BodySubscribers.fromLineSubscriber(subscriber, s -> null, charset, null), with the given subscriber:::Objects->requireNonNull->return->BodySubscribers->responseInfo->headers->charsetFrom->fromLineSubscriber
HttpResponse.BodyHandlers#fromLineSubscriber(S, Function, String):::Returns a response body handler that returns a BodySubscriber BodySubscriber<T> obtained from BodySubscribers#fromLineSubscriber(Subscriber, Function, Charset, String) BodySubscribers.fromLineSubscriber(subscriber, finisher, charset, lineSeparator), with the given subscriber, finisher function, and line separator:::Objects->requireNonNull->Objects->requireNonNull->if->lineSeparator->isEmpty->throw->new->IllegalArgumentException->return->BodySubscribers->responseInfo->headers->charsetFrom->fromLineSubscriber
HttpResponse.BodyHandlers#discarding():::Returns a response body handler that discards the response body.:::return->BodySubscribers->discarding
HttpResponse.BodyHandlers#replacing(U):::Returns a response body handler that returns the given replacement value, after discarding the response body.:::return->BodySubscribers->replacing
HttpResponse.BodyHandlers#ofString(Charset):::Returns a BodyHandler<String> that returns a BodySubscriber BodySubscriber<String> obtained from BodySubscribers#ofString(Charset) BodySubscribers.ofString(Charset):::Objects->requireNonNull->return->BodySubscribers->ofString
HttpResponse.BodyHandlers#ofFile(Path, OpenOption...):::Returns a BodyHandler<Path> that returns a BodySubscriber BodySubscriber<Path> obtained from BodySubscribers#ofFile(Path, OpenOption...) BodySubscribers.ofFile(Path,OpenOption...):::Objects->requireNonNull->opts->List->of->if->opts->contains->opts->contains->throw->new->IllegalArgumentException->return->PathBodyHandler->create
HttpResponse.BodyHandlers#ofFile(Path):::Returns a BodyHandler<Path> that returns a BodySubscriber BodySubscriber<Path>:::return->BodyHandlers->ofFile
HttpResponse.BodyHandlers#ofFileDownload(Path, OpenOption...):::Returns a BodyHandler<Path> that returns a BodySubscriber BodySubscriber<Path> where the download directory is specified, but the filename is obtained from the Content-Disposition response header:::Objects->requireNonNull->opts->List->of->if->opts->contains->throw->new->IllegalArgumentException->return->FileDownloadBodyHandler->create
HttpResponse.BodyHandlers#ofInputStream():::Returns a BodyHandler<InputStream> that returns a BodySubscriber BodySubscriber<InputStream> obtained from BodySubscribers#ofInputStream() BodySubscribers.ofInputStream:::return->BodySubscribers->ofInputStream
HttpResponse.BodyHandlers#ofLines():::Returns a BodyHandler<Stream<String>> that returns a BodySubscriber BodySubscriber<Stream<String>> obtained from BodySubscribers#ofLines(Charset) BodySubscribers.ofLines(charset):::return->BodySubscribers->responseInfo->headers->charsetFrom->ofLines
HttpResponse.BodyHandlers#ofByteArrayConsumer(Consumer>):::Returns a BodyHandler<Void> that returns a BodySubscriber BodySubscriber<Void> obtained from BodySubscribers#ofByteArrayConsumer(Consumer) BodySubscribers.ofByteArrayConsumer(Consumer):::Objects->requireNonNull->return->BodySubscribers->ofByteArrayConsumer
HttpResponse.BodyHandlers#ofByteArray():::Returns a BodyHandler<byte[]> that returns a BodySubscriber BodySubscriber<byte[]> obtained from BodySubscribers#ofByteArray() BodySubscribers.ofByteArray():::return->BodySubscribers->ofByteArray
HttpResponse.BodyHandlers#ofString():::Returns a BodyHandler<String> that returns a BodySubscriber BodySubscriber<String> obtained from BodySubscribers#ofString(Charset) BodySubscribers.ofString(Charset):::return->BodySubscribers->responseInfo->headers->charsetFrom->ofString
HttpResponse.BodyHandlers#ofPublisher():::Returns a BodyHandler<Publisher<List<ByteBuffer>>> that creates a BodySubscriber BodySubscriber<Publisher<List<ByteBuffer>>> obtained from BodySubscribers#ofPublisher() BodySubscribers.ofPublisher():::return->BodySubscribers->ofPublisher
HttpResponse.BodyHandlers#buffering(BodyHandler, int):::Returns a BodyHandler which, when invoked, returns a BodySubscribers#buffering(BodySubscriber,int) buffering BodySubscriber that buffers data before delivering it to the downstream subscriber:::Objects->requireNonNull->if->throw->new->IllegalArgumentException->return->BodySubscribers->downstreamHandler->apply->buffering
HttpResponse.PushPromiseHandler#applyPushPromise(HttpRequest, HttpRequest, Function, CompletableFuture>>):::Notification of an incoming push promise:::
HttpResponse.PushPromiseHandler#of(Function>, ConcurrentMap>>):::Returns a push promise handler that accumulates push promises, and their responses, into the given map:::return->new->PushPromisesHandlerWithMap<>
HttpResponse.BodySubscriber#getBody():::Returns a CompletionStage which when completed will return the response body object:::
HttpResponse.BodySubscribers#fromSubscriber(Subscriber>):::Returns a body subscriber that forwards all response body to the given Flow.Subscriber:::return->new->ResponseSubscribers.SubscriberAdapter<>
HttpResponse.BodySubscribers#fromSubscriber(S, Function):::Returns a body subscriber that forwards all response body to the given Flow.Subscriber:::return->new->ResponseSubscribers.SubscriberAdapter<>
HttpResponse.BodySubscribers#fromLineSubscriber(Subscriber):::Returns a body subscriber that forwards all response body to the given Flow.Subscriber, line by line:::return->fromLineSubscriber
HttpResponse.BodySubscribers#fromLineSubscriber(S, Function, Charset, String):::Returns a body subscriber that forwards all response body to the given Flow.Subscriber, line by line:::return->LineSubscriberAdapter->create
HttpResponse.BodySubscribers#ofString(Charset):::Returns a body subscriber which stores the response body as a String converted using the given Charset:::Objects->requireNonNull->return->new->String->new->ResponseSubscribers.ByteArraySubscriber<>
HttpResponse.BodySubscribers#ofByteArray():::Returns a BodySubscriber which stores the response body as a byte array:::return->Function->identity->new->ResponseSubscribers.ByteArraySubscriber<>
HttpResponse.BodySubscribers#ofFile(Path, OpenOption...):::Returns a BodySubscriber which stores the response body in a file opened with the given options and name:::Objects->requireNonNull->opts->List->of->if->opts->contains->opts->contains->throw->new->IllegalArgumentException->return->PathSubscriber->create
HttpResponse.BodySubscribers#ofFile(Path):::Returns a BodySubscriber which stores the response body in a file opened with the given name:::return->ofFile
HttpResponse.BodySubscribers#ofByteArrayConsumer(Consumer>):::Returns a BodySubscriber which provides the incoming body data to the provided Consumer of Optional<byte[]>:::return->new->ResponseSubscribers.ConsumerSubscriber
HttpResponse.BodySubscribers#ofInputStream():::Returns a BodySubscriber which streams the response body as an InputStream:::return->new->ResponseSubscribers.HttpResponseInputStream
HttpResponse.BodySubscribers#ofLines(Charset):::Returns a BodySubscriber which streams the response body as a Stream Stream<String>, where each string in the stream corresponds to a line as defined by BufferedReader#lines():::return->ResponseSubscribers->createLineStream
HttpResponse.BodySubscribers#ofPublisher():::Returns a response subscriber which publishes the response body through a Publisher<List<ByteBuffer>>:::return->ResponseSubscribers->createPublisher
HttpResponse.BodySubscribers#replacing(U):::Returns a response subscriber which discards the response body:::return->Optional->ofNullable->new->ResponseSubscribers.NullSubscriber<>
HttpResponse.BodySubscribers#discarding():::Returns a response subscriber which discards the response body.:::return->Optional->ofNullable->new->ResponseSubscribers.NullSubscriber<>
HttpResponse.BodySubscribers#buffering(BodySubscriber, int):::Returns a BodySubscriber which buffers data before delivering it to the given downstream subscriber:::if->throw->new->IllegalArgumentException->return->new->BufferingSubscriber<>
HttpResponse.BodySubscribers#mapping(BodySubscriber, Function):::Returns a BodySubscriber whose response body value is that of the result of applying the given function to the body object of the given upstream BodySubscriber:::return->new->ResponseSubscribers.MappingSubscriber<>
WebSocket.Builder#header(String, String):::Adds the given name-value pair to the list of additional HTTP headers sent during the opening handshake:::
WebSocket.Builder#connectTimeout(Duration):::Sets a timeout for establishing a WebSocket connection:::
WebSocket.Builder#subprotocols(String, String...):::Sets a request for the given subprotocols:::
WebSocket.Builder#buildAsync(URI, Listener):::Builds a WebSocket connected to the given URI and associated with the given Listener:::
WebSocket.Listener#onOpen(WebSocket):::A WebSocket has been connected:::webSocket->request
WebSocket.Listener#onText(WebSocket, CharSequence, boolean):::A textual data has been received:::webSocket->request->return
WebSocket.Listener#onBinary(WebSocket, ByteBuffer, boolean):::A binary data has been received:::webSocket->request->return
WebSocket.Listener#onPing(WebSocket, ByteBuffer):::A Ping message has been received:::webSocket->request->return
WebSocket.Listener#onPong(WebSocket, ByteBuffer):::A Pong message has been received:::webSocket->request->return
WebSocket.Listener#onClose(WebSocket, int, String):::Receives a Close message indicating the WebSocket's input has been closed:::return
WebSocket.Listener#onError(WebSocket, Throwable):::An error has occurred:::
WebSocket#sendText(CharSequence, boolean):::Sends textual data with characters from the given character sequence:::
WebSocket#sendBinary(ByteBuffer, boolean):::Sends binary data with bytes from the given buffer:::
WebSocket#sendPing(ByteBuffer):::Sends a Ping message with bytes from the given buffer:::
WebSocket#sendPong(ByteBuffer):::Sends a Pong message with bytes from the given buffer:::
WebSocket#sendClose(int, String):::Initiates an orderly closure of this WebSocket's output by sending a Close message with the given status code and the reason:::
WebSocket#request(long):::Increments the counter of invocations of receive methods:::
WebSocket#getSubprotocol():::Returns the subprotocol used by this WebSocket.:::
WebSocket#isOutputClosed():::Tells whether this WebSocket's output is closed:::
WebSocket#isInputClosed():::Tells whether this WebSocket's input is closed:::
WebSocket#abort():::Closes this WebSocket's input and output abruptly:::
WebSocketHandshakeException#getResponse():::Returns the server's counterpart of the opening handshake:::return
WebSocketHandshakeException#initCause(Throwable)::: web socket handshake exception init cause:::return->super->initCause

PKIXValidator#getCertPathLength():::Returns the length of the last certification path that is validated by CertPathValidator:::return
PKIXValidator#getParameters():::Return the PKIX parameters used by this instance:::return
SimpleValidator#engineValidate(X509Certificate[], Collection, List, AlgorithmConstraints, Object):::Perform simple validation of chain:::if->throw->new->CertificateException->buildTrustedChain->date->if->new->Date->untrustedChecker->new->UntrustedChecker->anchorCert->try->untrustedChecker->check->catch->throw->anchorCert->getSubjectX500Principal->new->ValidatorException->finally->anchor->new->TrustAnchor->defaultAlgChecker->new->AlgorithmChecker->appAlgChecker->if->new->AlgorithmChecker->maxPathLength->for->i->return
SimpleValidator#getNetscapeCertTypeBit(X509Certificate, String):::Get the value of the specified bit in the Netscape certificate type extension:::try->ext->if->certImpl->oid->certImpl->getExtension->if->return->else->extVal->cert->getExtensionValue->if->return->in->new->DerInputStream->encoded->in->getOctetString->new->DerValue->getUnalignedBitString->toByteArray->new->NetscapeCertTypeExtension->val->ext->get->return->val->booleanValue->catch->return->finally
SymantecTLSPolicy#checkDistrust(X509Certificate[]):::This method assumes the eeCert is a TLS Server Cert and chains back to the anchor.:::anchor->if->FINGERPRINTS->fingerprint->contains->notBefore->getNotBefore->ldNotBefore->LocalDate->notBefore->toInstant->ofInstant->if->subCA->distrustDate->EXEMPT_SUBCAS->fingerprint->get->if->checkNotBefore->return->checkNotBefore
TrustStoreUtil#getTrustedCerts(KeyStore):::Return an unmodifiable Set with all trusted X509Certificates contained in the specified KeyStore.:::set->new->HashSet<>->try->for->e->ks->aliases->e->hasMoreElements->catch->finally->return->Collections->unmodifiableSet
Validator#getInstance(String, String, KeyStore):::Get a new Validator instance using the trusted certificates from the specified KeyStore as trust anchors.:::return->TrustStoreUtil->getTrustedCerts->getInstance
Validator#getInstance(String, String, Collection):::Get a new Validator instance using the Set of X509Certificates as trust anchors.:::if->type->equals->return->new->SimpleValidator->else->if->type->equals->return->new->PKIXValidator->else->throw->new->IllegalArgumentException
Validator#getInstance(String, String, PKIXBuilderParameters):::Get a new Validator instance using the provided PKIXBuilderParameters:::if->type->equals->throw->new->IllegalArgumentException->return->new->PKIXValidator
Validator#validate(X509Certificate[]):::Validate the given certificate chain.:::return->validate
Validator#validate(X509Certificate[], Collection):::Validate the given certificate chain:::return->validate
Validator#validate(X509Certificate[], Collection, Object):::Validate the given certificate chain:::return->Collections->emptyList->validate
Validator#validate(X509Certificate[], Collection, List, AlgorithmConstraints, Object):::Validate the given certificate chain.:::engineValidate->if->checkUnresolvedCritExts->endEntityChecker->check->return
Validator#getTrustedCertificates():::Returns an immutable Collection of the X509Certificates this instance uses as trust anchors.:::
Validator#setValidationDate(Date):::Set the date to be used for subsequent validations:::
ValidatorException#getErrorType():::Get the type of the failure (one of the T_XXX constants), if available:::return
ValidatorException#getErrorCertificate():::Get the certificate causing the exception, if available.:::return

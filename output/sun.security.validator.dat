sun.security.validator.EndEntityChecker#getInstance(String, String)->EndEntityChecker::: end entity checker get instance
sun.security.validator.EndEntityChecker#check(X509Certificate[], Object, boolean)->void::: end entity checker check
sun.security.validator.PKIXValidator#getTrustedCertificates()->Collection::: validator get trusted certificates
sun.security.validator.PKIXValidator#getCertPathLength()->int:::Returns the length of the last certification path that is validated by CertPathValidator
sun.security.validator.PKIXValidator#getParameters()->PKIXBuilderParameters:::Return the PKIX parameters used by this instance
sun.security.validator.PKIXValidator#engineValidate(X509Certificate[], Collection, List, AlgorithmConstraints, Object)->X509Certificate[]::: validator engine validate
sun.security.validator.SimpleValidator#getTrustedCertificates()->Collection::: simple validator get trusted certificates
sun.security.validator.SimpleValidator#engineValidate(X509Certificate[], Collection, List, AlgorithmConstraints, Object)->X509Certificate[]:::Perform simple validation of chain
sun.security.validator.SimpleValidator#getNetscapeCertTypeBit(X509Certificate, String)->boolean:::Get the value of the specified bit in the Netscape certificate type extension
sun.security.validator.SymantecTLSPolicy#checkDistrust(X509Certificate[])->void:::This method assumes the eeCert is a TLS Server Cert and chains back to the anchor.
sun.security.validator.TrustStoreUtil#getTrustedCerts(KeyStore)->Set:::Return an unmodifiable Set with all trusted X509Certificates contained in the specified KeyStore.
sun.security.validator.Validator#getInstance(String, String, KeyStore)->Validator:::Get a new Validator instance using the trusted certificates from the specified KeyStore as trust anchors.
sun.security.validator.Validator#getInstance(String, String, Collection)->Validator:::Get a new Validator instance using the Set of X509Certificates as trust anchors.
sun.security.validator.Validator#getInstance(String, String, PKIXBuilderParameters)->Validator:::Get a new Validator instance using the provided PKIXBuilderParameters
sun.security.validator.Validator#validate(X509Certificate[])->X509Certificate[]:::Validate the given certificate chain.
sun.security.validator.Validator#validate(X509Certificate[], Collection)->X509Certificate[]:::Validate the given certificate chain
sun.security.validator.Validator#validate(X509Certificate[], Collection, Object)->X509Certificate[]:::Validate the given certificate chain
sun.security.validator.Validator#validate(X509Certificate[], Collection, List, AlgorithmConstraints, Object)->X509Certificate[]:::Validate the given certificate chain.
sun.security.validator.Validator#engineValidate(X509Certificate[], Collection, List, AlgorithmConstraints, Object)->X509Certificate[]::: validator engine validate
sun.security.validator.Validator#getTrustedCertificates()->Collection:::Returns an immutable Collection of the X509Certificates this instance uses as trust anchors.
sun.security.validator.Validator#setValidationDate(Date)->void:::Set the date to be used for subsequent validations
sun.security.validator.ValidatorException#getErrorType()->Object:::Get the type of the failure (one of the T_XXX constants), if available
sun.security.validator.ValidatorException#getErrorCertificate()->X509Certificate:::Get the certificate causing the exception, if available.

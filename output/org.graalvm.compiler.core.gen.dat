InstructionPrinter#printInstructionListingHeader():::Prints a header for the tabulated data printed by #printInstructionListing(ValueNode) .:::BCI->printLabel->USE->printLabel->VALUE->printLabel->INSTRUCTION->printLabel->END->printLabel->out->println
InstructionPrinter#printInstructionListing(ValueNode):::Prints an instruction listing on one line:::indentation->out->indentationLevel->out->fillTo->print->fillTo->print->fillTo->ValueNodeUtil->valueString->print->fillTo->printInstruction->if->out->stateAfter->print->out->println
LIRGenerationProvider#newCompilationResultBuilder(LIRGenerationResult, FrameMap, CompilationResult, CompilationResultBuilderFactory):::Creates the object used to fill in the details of a given compilation result.:::
LIRGenerationProvider#emitCode(CompilationResultBuilder, LIR, ResolvedJavaMethod):::Emits the code for a given graph.:::
NodeLIRBuilder#operand(Node):::Returns the operand that has been previously initialized by #setResult(ValueNode, Value) with the result of an instruction:::operand->getOperand->return
NodeLIRBuilder#setMatchResult(Node, Value):::Used by the MatchStatement machinery to override the generation LIR for some ValueNodes.:::nodeOperands->set
NodeLIRBuilder#visitLoopEnd(LoopEndNode):::Runtime specific classes can override this to insert a safepoint at the end of a loop.:::
NodeLIRBuilder#emitSwitch(SwitchNode):::This method tries to create a switch implementation that is optimal for the given switch:::defaultTarget->x->defaultSuccessor->getLIRBlock->keyCount->x->keyCount->if->gen->emitJump->else->value->gen->x->value->operand->load->if->probability->x->x->keySuccessor->probability->kind->gen->x->value->stamp->getLIRKind->key->gen->x->keyAt->emitConstant->gen->kind->getPlatformKind->gen->x->value->operand->load->x->keySuccessor->getLIRBlock->emitCompareBranch->else->if->x->isSorted->intSwitch->keyTargets->new->LabelRefArr->keyConstants->new->JavaConstantArr->keyProbabilities->new->doubleArr->keyKind->intSwitch->keyAt->getJavaKind->for->i->gen->emitStrategySwitch->else->keyTargets->new->LabelRefArr->keyConstants->new->ConstantArr->keyProbabilities->new->doubleArr->for->i->gen->new->SwitchStrategy.SequentialStrategy->emitStrategySwitch

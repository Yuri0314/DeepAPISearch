ClipboardTransferable.DataFactory#getTransferData(DataFlavor)::: data factory get transfer data:::return->DataTransferer->getInstance->translateBytes
ClipboardTransferable#fetchOneFlavor(SunClipboard, DataFlavor, long, Map)::: clipboard transferable fetch one flavor:::if->flavorsToData->containsKey->data->if->cached_data->containsKey->try->clipboard->getClipboardData->catch->e->printStackTrace->finally->cached_data->put->else->cached_data->get->if->flavorsToData->put->return->else->if->flavorsToData->new->DataFactory->put->return->return
ClipboardTransferable#getTransferDataFlavors()::: clipboard transferable get transfer data flavors:::return->flavors->clone
ClipboardTransferable#isDataFlavorSupported(DataFlavor)::: clipboard transferable is data flavor supported:::return->flavorsToData->containsKey
ClipboardTransferable#getTransferData(DataFlavor)::: clipboard transferable get transfer data:::if->isDataFlavorSupported->throw->new->UnsupportedFlavorException->ret->flavorsToData->get->if->throw->new->IOException->else->if->factory->factory->getTransferData->return
DataTransferer#getInstance():::The accessor method for the singleton DataTransferer instance:::return->Toolkit->getDefaultToolkit->getDataTransferer
DataTransferer#adaptFlavorMap(FlavorMap):::Converts a FlavorMap to a FlavorTable.:::if->return->return->new->FlavorTable
DataTransferer#getDefaultUnicodeEncoding():::Returns the default Unicode encoding for the platform:::
DataTransferer#registerTextFlavorProperties(String, String, String, String):::This method is called for text flavor mappings established while parsing the flavormap.properties file:::format->getFormatForNativeAsLong->textNatives->add->nativeCharsets->charset->length->Charset->defaultCharset->name->put->if->eoln->length->eoln->equals->nativeEOLNs->put->if->terminators->length->iTerminators->Integer->valueOf->if->nativeTerminators->put
DataTransferer#isTextFormat(long):::Determines whether the native corresponding to the specified long format was listed in the flavormap.properties file.:::return->textNatives->Long->valueOf->contains
DataTransferer#getCharsetForTextFormat(Long)::: data transferer get charset for text format:::return->nativeCharsets->get
DataTransferer#isLocaleDependentTextFormat(long):::Specifies whether text imported from the native system in the specified format is locale-dependent:::
DataTransferer#isFileFormat(long):::Determines whether the DataFlavor corresponding to the specified long format is DataFlavor.javaFileListFlavor.:::
DataTransferer#isImageFormat(long):::Determines whether the DataFlavor corresponding to the specified long format is DataFlavor.imageFlavor.:::
DataTransferer#isURIListFormat(long):::Determines whether the format is a URI list we can convert to a DataFlavor.javaFileListFlavor.:::return
DataTransferer#getFormatsForTransferable(Transferable, FlavorTable):::Returns a Map whose keys are all of the possible formats into which the Transferable's transfer data flavors can be translated:::flavors->contents->getTransferDataFlavors->if->return->Collections->emptySortedMap->return->getFormatsForFlavors
DataTransferer#getFormatsForFlavors(DataFlavor[], FlavorTable):::Returns a Map whose keys are all of the possible formats into which data in the specified DataFlavors can be translated:::formatMap->new->HashMap<>->textPlainMap->new->HashMap<>->indexMap->new->HashMap<>->textPlainIndexMap->new->HashMap<>->currentIndex->for->i->formatMap->putAll->indexMap->putAll->comparator->DataFlavorUtil->getIndexOrderComparator->reversed->sortedMap->new->TreeMap<>->sortedMap->putAll->return
DataTransferer#getFormatsForTransferableAsArray(Transferable, FlavorTable):::Reduces the Map output for the root function to an array of the Map's keys.:::return->getFormatsForTransferable->keysToLongArray
DataTransferer#getFlavorsForFormats(long[], FlavorTable):::Returns a Map whose keys are all of the possible DataFlavors into which data in the specified formats can be translated:::flavorMap->new->HashMap<>->mappingSet->new->HashSet<>->flavorSet->new->HashSet<>->foreach->nat->getNativeForFormat->flavors->map->getFlavorsForNative->foreach->if->flavor->isFlavorTextType->flavor->isFlavorJavaFileListType->equals->flavor->isRepresentationClassSerializable->flavor->isRepresentationClassInputStream->flavor->isRepresentationClassRemote->mapping->new->AbstractMap.SimpleEntry<>->flavorMap->put->mappingSet->add->flavorSet->add->foreach->natives->map->getNativesForFlavor->foreach->lFormat->getFormatForNativeAsLong->if->mappingSet->new->AbstractMap.SimpleEntry<>->contains->flavorMap->put->break->return
DataTransferer#getFlavorsForFormatsAsSet(long[], FlavorTable):::Returns a Set of all DataFlavors for which 1) a mapping from at least one of the specified formats exists in the specified map and 2) the data translation for this mapping can be performed by the data transfer subsystem.:::flavorSet->new->HashSet<>->foreach->flavors->map->getNativeForFormat->getFlavorsForNative->foreach->if->flavor->isFlavorTextType->flavor->isFlavorJavaFileListType->equals->flavor->isRepresentationClassSerializable->flavor->isRepresentationClassInputStream->flavor->isRepresentationClassRemote->flavorSet->add->return
DataTransferer#getFlavorsForFormatsAsArray(long[], FlavorTable):::Returns an array of all DataFlavors for which 1) a mapping from at least one of the specified formats exists in the specified map and 2) the data translation for this mapping can be performed by the data transfer subsystem:::return->getFlavorsForFormatsAsSet->setToSortedDataFlavorArray
DataTransferer#getFormatForNativeAsLong(String):::Looks-up or registers the String native with the native data transfer system and returns a long format corresponding to that native.:::
DataTransferer#getNativeForFormat(long):::Looks-up the String native corresponding to the specified long format in the native data transfer system.:::
DataTransferer#getBestCharsetForTextFormat(Long, Transferable)::: data transferer get best charset for text format:::charset->if->isLocaleDependentTextFormat->localeTransferable->isDataFlavorSupported->try->charsetNameBytes->localeTransferable->getTransferData->new->String->catch->finally->else->getCharsetForTextFormat->if->Charset->defaultCharset->name->return
DataTransferer#translateTransferableString(String, long)::: Translation function for converting string into  a byte array:::lFormat->charset->getBestCharsetForTextFormat->eoln->nativeEOLNs->get->if->length->str->length->buffer->new->StringBuilder->for->i->buffer->toString->bytes->str->getBytes->terminators->nativeTerminators->get->if->numTerminators->terminatedBytes->new->byteArr->System->arraycopy->for->i->return
DataTransferer#translateBytesToString(byte[], long, Transferable):::Translating either a byte array or an InputStream into an String:::lFormat->charset->getBestCharsetForTextFormat->eoln->nativeEOLNs->get->terminators->nativeTerminators->get->count->if->numTerminators->for->else->converted->new->String->if->buf->converted->toCharArray->eoln_arr->eoln->toCharArray->j->match->for->i->new->String->return
DataTransferer#translateTransferable(Transferable, DataFlavor, long):::Primary translation function for translating a Transferable into a byte array, given a source DataFlavor and target format.:::obj->stringSelectionHack->try->contents->getTransferData->if->return->if->flavor->equals->contents->getTransferData->if->return->else->catch->throw->e->getMessage->new->IOException->finally->if->flavor->getRepresentationClass->equals->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->str->removeSuspectedData->return->translateTransferableString->else->if->flavor->isRepresentationClassReader->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->buf->new->StringBuilder->try->r->c->while->r->read->buf->append->catch->finally->return->buf->toString->translateTransferableString->else->if->flavor->isRepresentationClassCharBuffer->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->buffer->size->buffer->remaining->chars->new->charArr->buffer->get->return->new->String->translateTransferableString->else->if->flavor->getRepresentationClass->equals->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->return->new->String->translateTransferableString->else->if->flavor->isRepresentationClassByteBuffer->buffer->size->buffer->remaining->bytes->new->byteArr->buffer->get->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->sourceEncoding->DataFlavorUtil->getTextCharset->return->new->String->translateTransferableString->else->return->else->if->flavor->getRepresentationClass->equals->bytes->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->sourceEncoding->DataFlavorUtil->getTextCharset->return->new->String->translateTransferableString->else->return->else->if->equals->if->isImageFormat->throw->new->IOException->image->bytes->imageToPlatformBytes->if->throw->new->IOException->return->theByteArray->if->isFileFormat->if->equals->throw->new->IOException->list->userProtectionDomain->getUserProtectionDomain->fileList->castToFiles->try->bos->convertFileListToBytes->bos->toByteArray->catch->finally->else->if->isURIListFormat->if->equals->throw->new->IOException->nat->getNativeForFormat->targetCharset->if->try->new->DataFlavor->getParameter->catch->throw->new->IOException->finally->if->list->userProtectionDomain->getUserProtectionDomain->fileList->castToFiles->uriList->fileList->size->new->ArrayList<>->foreach->uri->new->File->toURI->try->uriList->uri->getScheme->uri->getPath->uri->getFragment->new->URI->toString->add->catch->throw->new->IOException->finally->eoln->getBytes->try->bos->new->ByteArrayOutputStream->foreach->bytes->uri->getBytes->bos->write->bos->write->bos->toByteArray->catch->finally->else->if->flavor->isRepresentationClassInputStream->if->return->new->byteArr->try->bos->new->ByteArrayOutputStream->try->is->is->mark->is->transferTo->is->reset->catch->finally->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->bytes->bos->toByteArray->sourceEncoding->DataFlavorUtil->getTextCharset->return->new->String->translateTransferableString->bos->toByteArray->catch->finally->else->if->flavor->isRepresentationClassRemote->newMarshalledObject->convertObjectToBytes->else->if->flavor->isRepresentationClassSerializable->convertObjectToBytes->else->throw->new->IOException->return
DataTransferer#convertObjectToBytes(Object)::: data transferer convert object to bytes:::try->bos->new->ByteArrayOutputStream->oos->new->ObjectOutputStream->oos->writeObject->return->bos->toByteArray->catch->finally
DataTransferer#convertFileListToBytes(ArrayList)::: data transferer convert file list to bytes:::
DataTransferer#removeSuspectedData(DataFlavor, Transferable, String)::: data transferer remove suspected data:::if->System->getSecurityManager->flavor->isMimeTypeEqual->return->userProtectionDomain->getUserProtectionDomain->try->return->AccessController->allowedFiles->str->length->new->StringBuilder->uriArray->str->split->foreach->file->new->File->if->file->exists->isFileInWebstartedCache->isForbiddenToRead->if->allowedFiles->length->allowedFiles->append->allowedFiles->append->return->allowedFiles->toString->doPrivileged->catch->throw->pae->getMessage->new->IOException->finally
DataTransferer#getUserProtectionDomain(Transferable)::: data transferer get user protection domain:::return->contents->getClass->getProtectionDomain
DataTransferer#isForbiddenToRead(File, ProtectionDomain)::: data transferer is forbidden to read:::if->return->try->filePermission->file->getCanonicalPath->new->FilePermission->if->protectionDomain->implies->return->catch->finally->return
DataTransferer#castToFiles(List, ProtectionDomain)::: data transferer cast to files:::try->return->AccessController->fileList->new->ArrayList<>->foreach->file->castToFile->if->System->getSecurityManager->isFileInWebstartedCache->isForbiddenToRead->fileList->file->getCanonicalPath->add->return->doPrivileged->catch->throw->pae->getMessage->new->IOException->finally
DataTransferer#castToFile(Object)::: data transferer cast to file:::filePath->if->getCanonicalPath->else->if->else->return->return->new->File
DataTransferer#isFileInWebstartedCache(File)::: data transferer is file in webstarted cache:::if->deploymentCacheDirectoryList->isEmpty->foreach->cacheDirectoryPath->System->getProperty->if->try->cacheDirectory->new->File->getCanonicalFile->if->deploymentCacheDirectoryList->add->catch->finally->foreach->for->dir->dir->getParentFile->return
DataTransferer#translateBytes(byte[], DataFlavor, long, Transferable)::: data transferer translate bytes:::theObject->if->isFileFormat->if->equals->throw->new->IOException->filenames->dragQueryFile->if->return->files->new->FileArr->for->i->Arrays->asList->else->if->isURIListFormat->equals->try->str->new->ByteArrayInputStream->uris->dragQueryURIs->if->return->files->new->ArrayList<>->foreach->try->files->new->File->add->catch->finally->catch->finally->else->if->flavor->getRepresentationClass->equals->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->translateBytesToString->else->if->flavor->isRepresentationClassReader->try->bais->new->ByteArrayInputStream->translateStream->catch->finally->else->if->flavor->isRepresentationClassCharBuffer->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->buffer->CharBuffer->translateBytesToString->wrap->constructFlavoredObject->else->if->flavor->getRepresentationClass->equals->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->translateBytesToString->toCharArray->else->if->flavor->isRepresentationClassByteBuffer->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->translateBytesToString->DataFlavorUtil->getTextCharset->getBytes->buffer->ByteBuffer->wrap->constructFlavoredObject->else->if->flavor->getRepresentationClass->equals->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->translateBytesToString->DataFlavorUtil->getTextCharset->getBytes->else->else->if->flavor->isRepresentationClassInputStream->try->bais->new->ByteArrayInputStream->translateStream->catch->finally->else->if->flavor->isRepresentationClassRemote->try->bais->new->ByteArrayInputStream->ois->new->ObjectInputStream->ois->readObject->getMarshalledObject->catch->throw->e->getMessage->new->IOException->finally->else->if->flavor->isRepresentationClassSerializable->try->bais->new->ByteArrayInputStream->translateStream->catch->finally->else->if->equals->if->isImageFormat->throw->new->IOException->platformImageBytesToImage->if->throw->new->IOException->return
DataTransferer#translateStream(InputStream, DataFlavor, long, Transferable):::Primary translation function for translating an InputStream into an Object, given a source format and a target DataFlavor.:::theObject->if->isURIListFormat->equals->uris->dragQueryURIs->if->return->files->new->ArrayList<>->foreach->try->files->new->File->add->catch->finally->else->if->flavor->getRepresentationClass->equals->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->return->inputStreamToByteArray->translateBytesToString->else->if->equals->inputStreamToByteArray->translateBytesToString->new->StringReader->else->if->flavor->isRepresentationClassInputStream->translateStreamToInputStream->else->if->flavor->isRepresentationClassReader->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->is->translateStreamToInputStream->unicode->DataFlavorUtil->getTextCharset->reader->new->InputStreamReader->constructFlavoredObject->else->if->flavor->getRepresentationClass->equals->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->inputStreamToByteArray->translateBytesToString->DataFlavorUtil->getTextCharset->getBytes->else->inputStreamToByteArray->else->if->flavor->isRepresentationClassRemote->try->ois->new->ObjectInputStream->ois->readObject->getMarshalledObject->catch->throw->e->getMessage->new->IOException->finally->else->if->flavor->isRepresentationClassSerializable->try->ois->new->ObjectInputStream->ois->readObject->catch->throw->e->getMessage->new->IOException->finally->else->if->equals->if->isImageFormat->throw->new->IOException->inputStreamToByteArray->platformImageBytesToImage->if->throw->new->IOException->return
DataTransferer#translateStreamToInputStream(InputStream, DataFlavor, long, Transferable):::For arbitrary flavors, just use the raw InputStream:::if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->DataFlavorUtil->getTextCharset->new->ReencodingInputStream->return->constructFlavoredObject
DataTransferer#constructFlavoredObject(Object, DataFlavor, Class):::We support representations which are exactly of the specified Class, and also arbitrary Objects which have a constructor which takes an instance of the Class as its sole parameter.:::dfrc->flavor->getRepresentationClass->if->clazz->equals->return->else->constructors->try->AccessController->dfrc->getConstructors->doPrivileged->catch->throw->se->getMessage->new->IOException->finally->constructor->Stream->of->Modifier->c->getModifiers->isPublic->filter->ptypes->c->getParameterTypes->return->clazz->equals->filter->findFirst->dfrc->getName->new->IOException->orElseThrow->try->return->constructor->newInstance->catch->throw->e->getMessage->new->IOException->finally
DataTransferer.ReencodingInputStream#readChar()::: reencoding input stream read char:::c->wrapped->read->if->return->if->return->else->if->matchCharArray->return
DataTransferer.ReencodingInputStream#read()::: reencoding input stream read:::if->return->if->c->readChar->if->return->inBuf->limit->if->Character->isHighSurrogate->readChar->if->inBuf->limit->inBuf->rewind->outBuf->limit->rewind->encoder->encode->outBuf->flip->outBuf->limit->return->read->else->return
DataTransferer.ReencodingInputStream#available()::: reencoding input stream available:::return
DataTransferer.ReencodingInputStream#close()::: reencoding input stream close:::wrapped->close
DataTransferer.ReencodingInputStream#matchCharArray(char[], int):::Checks to see if the next array.length characters in wrapped match array:::wrapped->mark->count->if->for->if->return->else->wrapped->reset->return
DataTransferer#dragQueryFile(byte[]):::Decodes a byte array into a set of String filenames.:::
DataTransferer#dragQueryURIs(InputStream, long, Transferable):::Decodes URIs from either a byte array or a stream.:::throw->new->UnsupportedOperationException->new->IOException
DataTransferer#platformImageBytesToImage(byte[], long)::: data transferer platform image bytes to image:::
DataTransferer#standardImageBytesToImage(byte[], String):::Translates either a byte array or an input stream which contain an image data in the given standard format into an Image.:::readerIterator->ImageIO->getImageReadersByMIMEType->if->readerIterator->hasNext->throw->new->IOException->ioe->while->readerIterator->hasNext->imageReader->readerIterator->next->try->bais->new->ByteArrayInputStream->try->imageInputStream->ImageIO->createImageInputStream->param->imageReader->getDefaultReadParam->imageReader->setInput->bufferedImage->imageReader->imageReader->getMinIndex->read->if->return->catch->finally->imageReader->dispose->catch->continue->finally->if->new->IOException->throw
DataTransferer#imageToPlatformBytes(Image, long):::Translates a Java Image into a byte array which contains platform- specific image data in the given format.:::
DataTransferer#imageToStandardBytes(Image, String):::Translates a Java Image into a byte array which contains an image data in the given standard format.:::originalIOE->writerIterator->ImageIO->getImageWritersByMIMEType->if->writerIterator->hasNext->throw->new->IOException->if->try->return->imageToStandardBytesImpl->catch->finally->width->height->if->ir->getImageRep->ir->reconstruct->ir->getWidth->ir->getHeight->else->image->getWidth->image->getHeight->model->ColorModel->getRGBdefault->raster->model->createCompatibleWritableRaster->bufferedImage->model->isAlphaPremultiplied->new->BufferedImage->g->bufferedImage->getGraphics->try->g->drawImage->catch->finally->g->dispose->try->return->imageToStandardBytesImpl->catch->if->throw->else->throw->finally
DataTransferer#imageToStandardBytesImpl(RenderedImage, String)::: data transferer image to standard bytes impl:::writerIterator->ImageIO->getImageWritersByMIMEType->typeSpecifier->new->ImageTypeSpecifier->baos->new->ByteArrayOutputStream->ioe->while->writerIterator->hasNext->imageWriter->writerIterator->next->writerSpi->imageWriter->getOriginatingProvider->if->writerSpi->canEncodeImage->continue->try->try->imageOutputStream->ImageIO->createImageOutputStream->imageWriter->setOutput->imageWriter->write->imageOutputStream->flush->catch->finally->catch->imageWriter->dispose->baos->reset->continue->finally->imageWriter->dispose->baos->close->return->baos->toByteArray->baos->close->if->new->IOException->throw
DataTransferer#concatData(Object, Object):::Concatenates the data represented by two objects:::str1->str2->if->arr1->if->arr2->ret->new->byteArr->System->arraycopy->System->arraycopy->return->else->new->ByteArrayInputStream->else->if->new->ByteArrayInputStream->else->return->new->SequenceInputStream
DataTransferer#convertData(Object, Transferable, long, Map, boolean)::: data transferer convert data:::ret->if->try->stack->new->Stack<>->dataConverter->new->Runnable->appContext->SunToolkit->targetToAppContext->getToolkitThreadBlockedHandler->lock->if->appContext->put->SunToolkit->executeOnEventHandlerThread->while->stack->empty->getToolkitThreadBlockedHandler->enter->if->appContext->remove->stack->pop->catch->finally->getToolkitThreadBlockedHandler->unlock->else->flavor->formatMap->get->if->translateTransferable->return
DataTransferer#processDataConversionRequests()::: data transferer process data conversion requests:::if->EventQueue->isDispatchThread->appContext->AppContext->getAppContext->getToolkitThreadBlockedHandler->lock->try->dataConverter->appContext->get->if->dataConverter->run->appContext->remove->catch->finally->getToolkitThreadBlockedHandler->unlock
DataTransferer#getToolkitThreadBlockedHandler()::: data transferer get toolkit thread blocked handler:::
DataTransferer#keysToLongArray(SortedMap):::Helper function to reduce a Map with Long keys to a long array:::keySet->map->keySet->retval->keySet->size->new->longArr->i->for->iter->keySet->iterator->iter->hasNext->return
DataTransferer#setToSortedDataFlavorArray(Set):::Helper function to convert a Set of DataFlavors to a sorted array:::flavors->flavorsSet->size->new->DataFlavorArr->flavorsSet->toArray->comparator->DataFlavorUtil->getDataFlavorComparator->reversed->Arrays->sort->return
DataTransferer#inputStreamToByteArray(InputStream):::Helper function to convert an InputStream to a byte[] array.:::try->baos->new->ByteArrayOutputStream->len->buf->new->byteArr->while->str->read->baos->write->return->baos->toByteArray->catch->finally
DataTransferer#getPlatformMappingsForNative(String):::Returns platform-specific mappings for the specified native:::return->new->LinkedHashSet<>
DataTransferer#getPlatformMappingsForFlavor(DataFlavor):::Returns platform-specific mappings for the specified flavor:::return->new->LinkedHashSet<>
DesktopDatatransferServiceImpl#invokeOnEventThread(Runnable)::: desktop datatransfer service impl invoke on event thread:::EventQueue->invokeLater
DesktopDatatransferServiceImpl#getDefaultUnicodeEncoding()::: desktop datatransfer service impl get default unicode encoding:::dataTransferer->DataTransferer->getInstance->if->return->dataTransferer->getDefaultUnicodeEncoding->return
DesktopDatatransferServiceImpl#getFlavorMap(Supplier)::: desktop datatransfer service impl get flavor map:::context->AppContext->getAppContext->fm->context->get->if->supplier->get->context->put->return
DesktopDatatransferServiceImpl#isDesktopPresent()::: desktop datatransfer service impl is desktop present:::return
DesktopDatatransferServiceImpl#getPlatformMappingsForNative(String)::: desktop datatransfer service impl get platform mappings for native:::instance->DataTransferer->getInstance->return->instance->getPlatformMappingsForNative->new->LinkedHashSet<>
DesktopDatatransferServiceImpl#getPlatformMappingsForFlavor(DataFlavor)::: desktop datatransfer service impl get platform mappings for flavor:::instance->DataTransferer->getInstance->return->instance->getPlatformMappingsForFlavor->new->LinkedHashSet<>
DesktopDatatransferServiceImpl#registerTextFlavorProperties(String, String, String, String)::: desktop datatransfer service impl register text flavor properties:::instance->DataTransferer->getInstance->if->instance->registerTextFlavorProperties
SunClipboard#setContents(Transferable, ClipboardOwner)::: sun clipboard set contents:::if->throw->new->NullPointerException->initContext->oldOwner->oldContents->try->new->TransferableProxy->setContentsNative->catch->finally->if->EventQueue->oldOwner->lostOwnership->invokeLater
SunClipboard#initContext()::: sun clipboard init context:::context->AppContext->getAppContext->if->synchronized->if->context->isDisposed->throw->new->IllegalStateException->context->addPropertyChangeListener->if->contentsContext->removePropertyChangeListener
SunClipboard#getContents(Object)::: sun clipboard get contents:::if->return->return->new->ClipboardTransferable
SunClipboard#getContextContents()::: sun clipboard get context contents:::context->AppContext->getAppContext->return
SunClipboard#getAvailableDataFlavors()::: sun clipboard get available data flavors:::cntnts->getContextContents->if->return->cntnts->getTransferDataFlavors->formats->getClipboardFormatsOpenClose->return->DataTransferer->getInstance->getDefaultFlavorTable->getFlavorsForFormatsAsArray
SunClipboard#isDataFlavorAvailable(DataFlavor)::: sun clipboard is data flavor available:::if->throw->new->NullPointerException->cntnts->getContextContents->if->return->cntnts->isDataFlavorSupported->formats->getClipboardFormatsOpenClose->return->formatArrayAsDataFlavorSet->contains
SunClipboard#getData(DataFlavor)::: sun clipboard get data:::if->throw->new->NullPointerException->cntnts->getContextContents->if->return->cntnts->getTransferData->format->data->localeTransferable->try->openClipboard->formats->getClipboardFormats->lFormat->DataTransferer->getInstance->getDefaultFlavorTable->getFlavorsForFormats->get->if->throw->new->UnsupportedFlavorException->lFormat->longValue->getClipboardData->if->DataTransferer->getInstance->isLocaleDependentTextFormat->createLocaleTransferable->catch->finally->closeClipboard->return->DataTransferer->getInstance->translateBytes
SunClipboard#createLocaleTransferable(long[]):::The clipboard must be opened.:::return
SunClipboard#openClipboard(SunClipboard)::: sun clipboard open clipboard:::
SunClipboard#closeClipboard()::: sun clipboard close clipboard:::
SunClipboard#getID()::: sun clipboard get d:::
SunClipboard#propertyChange(PropertyChangeEvent)::: sun clipboard property change:::if->evt->getPropertyName->equals->evt->getNewValue->equals->disposedContext->evt->getSource->lostOwnershipLater
SunClipboard#lostOwnershipImpl()::: sun clipboard lost ownership impl:::lostOwnershipLater
SunClipboard#lostOwnershipLater(AppContext):::Clears the clipboard state (contents, owner and contents context) and notifies the current owner that ownership is lost:::context->if->return->SunToolkit->lostOwnershipNow->new->PeerEvent->postEvent
SunClipboard#lostOwnershipNow(AppContext)::: sun clipboard lost ownership now:::sunClipboard->owner->contents->synchronized->context->if->return->if->sunClipboard->clearNativeContext->context->removePropertyChangeListener->else->return->if->owner->lostOwnership
SunClipboard#clearNativeContext()::: sun clipboard clear native context:::
SunClipboard#setContentsNative(Transferable)::: sun clipboard set contents native:::
SunClipboard#getClipboardFormatsOpenClose()::: sun clipboard get clipboard formats open close:::try->openClipboard->return->getClipboardFormats->catch->finally->closeClipboard
SunClipboard#getClipboardFormats():::Returns zero-length array (not null) if the number of available formats is zero.:::
SunClipboard#getClipboardData(long)::: sun clipboard get clipboard data:::
SunClipboard#formatArrayAsDataFlavorSet(long[])::: sun clipboard format array as data flavor set:::return->DataTransferer->getInstance->getDefaultFlavorTable->getFlavorsForFormatsAsSet
SunClipboard#addFlavorListener(FlavorListener)::: sun clipboard add flavor listener:::if->return->appContext->AppContext->getAppContext->flavorListeners->getFlavorListeners->if->new->HashSet<>->appContext->put->flavorListeners->add->if->currentFormats->try->openClipboard->getClipboardFormats->catch->finally->closeClipboard->registerClipboardViewerChecked
SunClipboard#removeFlavorListener(FlavorListener)::: sun clipboard remove flavor listener:::if->return->flavorListeners->AppContext->getAppContext->getFlavorListeners->if->return->if->flavorListeners->remove->unregisterClipboardViewerChecked
SunClipboard#getFlavorListeners(AppContext)::: sun clipboard get flavor listeners:::return->appContext->get
SunClipboard#getFlavorListeners()::: sun clipboard get flavor listeners:::flavorListeners->AppContext->getAppContext->getFlavorListeners->return->new->FlavorListenerArr->flavorListeners->flavorListeners->size->new->FlavorListenerArr->toArray
SunClipboard#areFlavorListenersRegistered()::: sun clipboard are flavor listeners registered:::return
SunClipboard#registerClipboardViewerChecked()::: sun clipboard register clipboard viewer checked:::
SunClipboard#unregisterClipboardViewerChecked()::: sun clipboard unregister clipboard viewer checked:::
SunClipboard#checkChange(long[]):::Checks change of the DataFlavors and, if necessary, posts notifications on FlavorEvents to the AppContexts' EDTs:::if->Arrays->equals->return->foreach->AppContext->getAppContexts->if->appContext->isDisposed->continue->flavorListeners->getFlavorListeners->if->foreach->if->peerEvent->listener->new->FlavorEvent->flavorsChanged->new->PeerEvent->SunToolkit->postEvent
SunClipboard#getDefaultFlavorTable()::: sun clipboard get default flavor table:::return->SystemFlavorMap->getDefaultFlavorMap
ToolkitThreadBlockedHandler#lock()::: toolkit thread blocked handler lock:::
ToolkitThreadBlockedHandler#unlock()::: toolkit thread blocked handler unlock:::
ToolkitThreadBlockedHandler#enter()::: toolkit thread blocked handler enter:::
ToolkitThreadBlockedHandler#exit()::: toolkit thread blocked handler exit:::
TransferableProxy#getTransferDataFlavors()::: transferable proxy get transfer data flavors:::return->transferable->getTransferDataFlavors
TransferableProxy#isDataFlavorSupported(DataFlavor)::: transferable proxy is data flavor supported:::return->transferable->isDataFlavorSupported
TransferableProxy#getTransferData(DataFlavor)::: transferable proxy get transfer data:::data->transferable->getTransferData->if->df->isFlavorSerializedObjectType->baos->new->ByteArrayOutputStream->oos->new->ClassLoaderObjectOutputStream->oos->writeObject->bais->baos->toByteArray->new->ByteArrayInputStream->try->ois->oos->getClassLoaderMap->new->ClassLoaderObjectInputStream->ois->readObject->catch->throw->new->IOException->initCause->finally->return
ClassLoaderObjectOutputStream#annotateClass(Class)::: class loader object output stream annotate class:::classLoader->AccessController->new->PrivilegedAction<ClassLoader>->doPrivileged->s->new->HashSet<String>->s->cl->getName->add->map->put
ClassLoaderObjectOutputStream#annotateProxyClass(Class)::: class loader object output stream annotate proxy class:::classLoader->AccessController->new->PrivilegedAction<ClassLoader>->doPrivileged->interfaces->cl->getInterfaces->s->new->HashSet<String>->for->i->map->put
ClassLoaderObjectOutputStream#getClassLoaderMap()::: class loader object output stream get class loader map:::return->new->HashMap<>
ClassLoaderObjectInputStream#resolveClass(ObjectStreamClass)::: class loader object input stream resolve class:::className->classDesc->getName->s->new->HashSet<String>->s->add->classLoader->map->get->if->return->Class->forName->else->return->super->resolveClass
ClassLoaderObjectInputStream#resolveProxyClass(String[])::: class loader object input stream resolve proxy class:::s->new->HashSet<String>->for->i->classLoader->map->get->if->return->super->resolveProxyClass->nonPublicLoader->hasNonPublicInterface->classObjs->new->Class<?>Arr->for->i->try->proxyClass->Proxy->getProxyClass->return->catch->throw->new->ClassNotFoundException->finally

DataTransferer#getInstance():::The accessor method for the singleton DataTransferer instance:::return->Toolkit->getDefaultToolkit->getDataTransferer
DataTransferer#adaptFlavorMap(FlavorMap):::Converts a FlavorMap to a FlavorTable.:::if->return->return->new->FlavorTable
DataTransferer#getDefaultUnicodeEncoding():::Returns the default Unicode encoding for the platform:::
DataTransferer#registerTextFlavorProperties(String, String, String, String):::This method is called for text flavor mappings established while parsing the flavormap.properties file:::format->getFormatForNativeAsLong->textNatives->add->nativeCharsets->charset->length->Charset->defaultCharset->name->put->if->eoln->length->eoln->equals->nativeEOLNs->put->if->terminators->length->iTerminators->Integer->valueOf->if->nativeTerminators->put
DataTransferer#isTextFormat(long):::Determines whether the native corresponding to the specified long format was listed in the flavormap.properties file.:::return->textNatives->Long->valueOf->contains
DataTransferer#isLocaleDependentTextFormat(long):::Specifies whether text imported from the native system in the specified format is locale-dependent:::
DataTransferer#isFileFormat(long):::Determines whether the DataFlavor corresponding to the specified long format is DataFlavor.javaFileListFlavor.:::
DataTransferer#isImageFormat(long):::Determines whether the DataFlavor corresponding to the specified long format is DataFlavor.imageFlavor.:::
DataTransferer#isURIListFormat(long):::Determines whether the format is a URI list we can convert to a DataFlavor.javaFileListFlavor.:::return
DataTransferer#getFormatsForTransferable(Transferable, FlavorTable):::Returns a Map whose keys are all of the possible formats into which the Transferable's transfer data flavors can be translated:::flavors->contents->getTransferDataFlavors->if->return->Collections->emptySortedMap->return->getFormatsForFlavors
DataTransferer#getFormatsForFlavors(DataFlavor[], FlavorTable):::Returns a Map whose keys are all of the possible formats into which data in the specified DataFlavors can be translated:::formatMap->new->HashMap<>->textPlainMap->new->HashMap<>->indexMap->new->HashMap<>->textPlainIndexMap->new->HashMap<>->currentIndex->for->i->formatMap->putAll->indexMap->putAll->comparator->DataFlavorUtil->getIndexOrderComparator->reversed->sortedMap->new->TreeMap<>->sortedMap->putAll->return
DataTransferer#getFormatsForTransferableAsArray(Transferable, FlavorTable):::Reduces the Map output for the root function to an array of the Map's keys.:::return->getFormatsForTransferable->keysToLongArray
DataTransferer#getFlavorsForFormats(long[], FlavorTable):::Returns a Map whose keys are all of the possible DataFlavors into which data in the specified formats can be translated:::flavorMap->new->HashMap<>->mappingSet->new->HashSet<>->flavorSet->new->HashSet<>->foreach->nat->getNativeForFormat->flavors->map->getFlavorsForNative->foreach->if->flavor->isFlavorTextType->flavor->isFlavorJavaFileListType->equals->flavor->isRepresentationClassSerializable->flavor->isRepresentationClassInputStream->flavor->isRepresentationClassRemote->mapping->new->AbstractMap.SimpleEntry<>->flavorMap->put->mappingSet->add->flavorSet->add->foreach->natives->map->getNativesForFlavor->foreach->lFormat->getFormatForNativeAsLong->if->mappingSet->new->AbstractMap.SimpleEntry<>->contains->flavorMap->put->break->return
DataTransferer#getFlavorsForFormatsAsSet(long[], FlavorTable):::Returns a Set of all DataFlavors for which 1) a mapping from at least one of the specified formats exists in the specified map and 2) the data translation for this mapping can be performed by the data transfer subsystem.:::flavorSet->new->HashSet<>->foreach->flavors->map->getNativeForFormat->getFlavorsForNative->foreach->if->flavor->isFlavorTextType->flavor->isFlavorJavaFileListType->equals->flavor->isRepresentationClassSerializable->flavor->isRepresentationClassInputStream->flavor->isRepresentationClassRemote->flavorSet->add->return
DataTransferer#getFlavorsForFormatsAsArray(long[], FlavorTable):::Returns an array of all DataFlavors for which 1) a mapping from at least one of the specified formats exists in the specified map and 2) the data translation for this mapping can be performed by the data transfer subsystem:::return->getFlavorsForFormatsAsSet->setToSortedDataFlavorArray
DataTransferer#getFormatForNativeAsLong(String):::Looks-up or registers the String native with the native data transfer system and returns a long format corresponding to that native.:::
DataTransferer#getNativeForFormat(long):::Looks-up the String native corresponding to the specified long format in the native data transfer system.:::
DataTransferer#translateTransferable(Transferable, DataFlavor, long):::Primary translation function for translating a Transferable into a byte array, given a source DataFlavor and target format.:::obj->stringSelectionHack->try->contents->getTransferData->if->return->if->flavor->equals->contents->getTransferData->if->return->else->catch->throw->e->getMessage->new->IOException->finally->if->flavor->getRepresentationClass->equals->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->str->removeSuspectedData->return->translateTransferableString->else->if->flavor->isRepresentationClassReader->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->buf->new->StringBuilder->try->r->c->while->r->read->buf->append->catch->finally->return->buf->toString->translateTransferableString->else->if->flavor->isRepresentationClassCharBuffer->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->buffer->size->buffer->remaining->chars->new->charArr->buffer->get->return->new->String->translateTransferableString->else->if->flavor->getRepresentationClass->equals->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->return->new->String->translateTransferableString->else->if->flavor->isRepresentationClassByteBuffer->buffer->size->buffer->remaining->bytes->new->byteArr->buffer->get->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->sourceEncoding->DataFlavorUtil->getTextCharset->return->new->String->translateTransferableString->else->return->else->if->flavor->getRepresentationClass->equals->bytes->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->sourceEncoding->DataFlavorUtil->getTextCharset->return->new->String->translateTransferableString->else->return->else->if->equals->if->isImageFormat->throw->new->IOException->image->bytes->imageToPlatformBytes->if->throw->new->IOException->return->theByteArray->if->isFileFormat->if->equals->throw->new->IOException->list->userProtectionDomain->getUserProtectionDomain->fileList->castToFiles->try->bos->convertFileListToBytes->bos->toByteArray->catch->finally->else->if->isURIListFormat->if->equals->throw->new->IOException->nat->getNativeForFormat->targetCharset->if->try->new->DataFlavor->getParameter->catch->throw->new->IOException->finally->if->list->userProtectionDomain->getUserProtectionDomain->fileList->castToFiles->uriList->fileList->size->new->ArrayList<>->foreach->uri->new->File->toURI->try->uriList->uri->getScheme->uri->getPath->uri->getFragment->new->URI->toString->add->catch->throw->new->IOException->finally->eoln->getBytes->try->bos->new->ByteArrayOutputStream->foreach->bytes->uri->getBytes->bos->write->bos->write->bos->toByteArray->catch->finally->else->if->flavor->isRepresentationClassInputStream->if->return->new->byteArr->try->bos->new->ByteArrayOutputStream->try->is->is->mark->is->transferTo->is->reset->catch->finally->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->bytes->bos->toByteArray->sourceEncoding->DataFlavorUtil->getTextCharset->return->new->String->translateTransferableString->bos->toByteArray->catch->finally->else->if->flavor->isRepresentationClassRemote->newMarshalledObject->convertObjectToBytes->else->if->flavor->isRepresentationClassSerializable->convertObjectToBytes->else->throw->new->IOException->return
DataTransferer#translateStream(InputStream, DataFlavor, long, Transferable):::Primary translation function for translating an InputStream into an Object, given a source format and a target DataFlavor.:::theObject->if->isURIListFormat->equals->uris->dragQueryURIs->if->return->files->new->ArrayList<>->foreach->try->files->new->File->add->catch->finally->else->if->flavor->getRepresentationClass->equals->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->return->inputStreamToByteArray->translateBytesToString->else->if->equals->inputStreamToByteArray->translateBytesToString->new->StringReader->else->if->flavor->isRepresentationClassInputStream->translateStreamToInputStream->else->if->flavor->isRepresentationClassReader->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->throw->new->IOException->is->translateStreamToInputStream->unicode->DataFlavorUtil->getTextCharset->reader->new->InputStreamReader->constructFlavoredObject->else->if->flavor->getRepresentationClass->equals->if->DataFlavorUtil->isFlavorCharsetTextType->isTextFormat->inputStreamToByteArray->translateBytesToString->DataFlavorUtil->getTextCharset->getBytes->else->inputStreamToByteArray->else->if->flavor->isRepresentationClassRemote->try->ois->new->ObjectInputStream->ois->readObject->getMarshalledObject->catch->throw->e->getMessage->new->IOException->finally->else->if->flavor->isRepresentationClassSerializable->try->ois->new->ObjectInputStream->ois->readObject->catch->throw->e->getMessage->new->IOException->finally->else->if->equals->if->isImageFormat->throw->new->IOException->inputStreamToByteArray->platformImageBytesToImage->if->throw->new->IOException->return
DataTransferer#dragQueryFile(byte[]):::Decodes a byte array into a set of String filenames.:::
DataTransferer#dragQueryURIs(InputStream, long, Transferable):::Decodes URIs from either a byte array or a stream.:::throw->new->UnsupportedOperationException->new->IOException
DataTransferer#standardImageBytesToImage(byte[], String):::Translates either a byte array or an input stream which contain an image data in the given standard format into an Image.:::readerIterator->ImageIO->getImageReadersByMIMEType->if->readerIterator->hasNext->throw->new->IOException->ioe->while->readerIterator->hasNext->imageReader->readerIterator->next->try->bais->new->ByteArrayInputStream->try->imageInputStream->ImageIO->createImageInputStream->param->imageReader->getDefaultReadParam->imageReader->setInput->bufferedImage->imageReader->imageReader->getMinIndex->read->if->return->catch->finally->imageReader->dispose->catch->continue->finally->if->new->IOException->throw
DataTransferer#imageToPlatformBytes(Image, long):::Translates a Java Image into a byte array which contains platform- specific image data in the given format.:::
DataTransferer#imageToStandardBytes(Image, String):::Translates a Java Image into a byte array which contains an image data in the given standard format.:::originalIOE->writerIterator->ImageIO->getImageWritersByMIMEType->if->writerIterator->hasNext->throw->new->IOException->if->try->return->imageToStandardBytesImpl->catch->finally->width->height->if->ir->getImageRep->ir->reconstruct->ir->getWidth->ir->getHeight->else->image->getWidth->image->getHeight->model->ColorModel->getRGBdefault->raster->model->createCompatibleWritableRaster->bufferedImage->model->isAlphaPremultiplied->new->BufferedImage->g->bufferedImage->getGraphics->try->g->drawImage->catch->finally->g->dispose->try->return->imageToStandardBytesImpl->catch->if->throw->else->throw->finally
DataTransferer#keysToLongArray(SortedMap):::Helper function to reduce a Map with Long keys to a long array:::keySet->map->keySet->retval->keySet->size->new->longArr->i->for->iter->keySet->iterator->iter->hasNext->return
DataTransferer#setToSortedDataFlavorArray(Set):::Helper function to convert a Set of DataFlavors to a sorted array:::flavors->flavorsSet->size->new->DataFlavorArr->flavorsSet->toArray->comparator->DataFlavorUtil->getDataFlavorComparator->reversed->Arrays->sort->return
DataTransferer#inputStreamToByteArray(InputStream):::Helper function to convert an InputStream to a byte[] array.:::try->baos->new->ByteArrayOutputStream->len->buf->new->byteArr->while->str->read->baos->write->return->baos->toByteArray->catch->finally
DataTransferer#getPlatformMappingsForNative(String):::Returns platform-specific mappings for the specified native:::return->new->LinkedHashSet<>
DataTransferer#getPlatformMappingsForFlavor(DataFlavor):::Returns platform-specific mappings for the specified flavor:::return->new->LinkedHashSet<>
SunClipboard#createLocaleTransferable(long[]):::The clipboard must be opened.:::return
SunClipboard#lostOwnershipLater(AppContext):::Clears the clipboard state (contents, owner and contents context) and notifies the current owner that ownership is lost:::context->if->return->SunToolkit->lostOwnershipNow->new->PeerEvent->postEvent
SunClipboard#getClipboardFormats():::Returns zero-length array (not null) if the number of available formats is zero.:::
SunClipboard#checkChange(long[]):::Checks change of the DataFlavors and, if necessary, posts notifications on FlavorEvents to the AppContexts' EDTs:::if->Arrays->equals->return->foreach->AppContext->getAppContexts->if->appContext->isDisposed->continue->flavorListeners->getFlavorListeners->if->foreach->if->peerEvent->listener->new->FlavorEvent->flavorsChanged->new->PeerEvent->SunToolkit->postEvent

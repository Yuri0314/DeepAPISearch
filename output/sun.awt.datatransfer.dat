sun.awt.datatransfer.ClipboardTransferable#getTransferDataFlavors()->DataFlavor[]::: clipboard transferable get transfer data flavors
sun.awt.datatransfer.ClipboardTransferable#isDataFlavorSupported(DataFlavor)->boolean::: clipboard transferable is data flavor supported
sun.awt.datatransfer.ClipboardTransferable#getTransferData(DataFlavor)->Object::: clipboard transferable get transfer data
sun.awt.datatransfer.DataTransferer#getInstance()->DataTransferer:::The accessor method for the singleton DataTransferer instance
sun.awt.datatransfer.DataTransferer#adaptFlavorMap(FlavorMap)->FlavorTable:::Converts a FlavorMap to a FlavorTable.
sun.awt.datatransfer.DataTransferer#getDefaultUnicodeEncoding()->String:::Returns the default Unicode encoding for the platform
sun.awt.datatransfer.DataTransferer#registerTextFlavorProperties(String, String, String, String)->void:::This method is called for text flavor mappings established while parsing the flavormap.properties file
sun.awt.datatransfer.DataTransferer#isTextFormat(long)->boolean:::Determines whether the native corresponding to the specified long format was listed in the flavormap.properties file.
sun.awt.datatransfer.DataTransferer#getCharsetForTextFormat(Long)->String::: data transferer get charset for text format
sun.awt.datatransfer.DataTransferer#isLocaleDependentTextFormat(long)->boolean:::Specifies whether text imported from the native system in the specified format is locale-dependent
sun.awt.datatransfer.DataTransferer#isFileFormat(long)->boolean:::Determines whether the DataFlavor corresponding to the specified long format is DataFlavor.javaFileListFlavor.
sun.awt.datatransfer.DataTransferer#isImageFormat(long)->boolean:::Determines whether the DataFlavor corresponding to the specified long format is DataFlavor.imageFlavor.
sun.awt.datatransfer.DataTransferer#isURIListFormat(long)->boolean:::Determines whether the format is a URI list we can convert to a DataFlavor.javaFileListFlavor.
sun.awt.datatransfer.DataTransferer#getFormatsForTransferable(Transferable, FlavorTable)->SortedMap:::Returns a Map whose keys are all of the possible formats into which the Transferable's transfer data flavors can be translated
sun.awt.datatransfer.DataTransferer#getFormatsForFlavors(DataFlavor[], FlavorTable)->SortedMap:::Returns a Map whose keys are all of the possible formats into which data in the specified DataFlavors can be translated
sun.awt.datatransfer.DataTransferer#getFormatsForTransferableAsArray(Transferable, FlavorTable)->long[]:::Reduces the Map output for the root function to an array of the Map's keys.
sun.awt.datatransfer.DataTransferer#getFlavorsForFormats(long[], FlavorTable)->Map:::Returns a Map whose keys are all of the possible DataFlavors into which data in the specified formats can be translated
sun.awt.datatransfer.DataTransferer#getFlavorsForFormatsAsSet(long[], FlavorTable)->Set:::Returns a Set of all DataFlavors for which 1) a mapping from at least one of the specified formats exists in the specified map and 2) the data translation for this mapping can be performed by the data transfer subsystem.
sun.awt.datatransfer.DataTransferer#getFlavorsForFormatsAsArray(long[], FlavorTable)->DataFlavor[]:::Returns an array of all DataFlavors for which 1) a mapping from at least one of the specified formats exists in the specified map and 2) the data translation for this mapping can be performed by the data transfer subsystem
sun.awt.datatransfer.DataTransferer#getFormatForNativeAsLong(String)->Long:::Looks-up or registers the String native with the native data transfer system and returns a long format corresponding to that native.
sun.awt.datatransfer.DataTransferer#getNativeForFormat(long)->String:::Looks-up the String native corresponding to the specified long format in the native data transfer system.
sun.awt.datatransfer.DataTransferer#getBestCharsetForTextFormat(Long, Transferable)->String::: data transferer get best charset for text format
sun.awt.datatransfer.DataTransferer#translateTransferable(Transferable, DataFlavor, long)->byte[]:::Primary translation function for translating a Transferable into a byte array, given a source DataFlavor and target format.
sun.awt.datatransfer.DataTransferer#convertFileListToBytes(ArrayList)->ByteArrayOutputStream::: data transferer convert file list to bytes
sun.awt.datatransfer.DataTransferer#translateBytes(byte[], DataFlavor, long, Transferable)->Object::: data transferer translate bytes
sun.awt.datatransfer.DataTransferer#translateStream(InputStream, DataFlavor, long, Transferable)->Object:::Primary translation function for translating an InputStream into an Object, given a source format and a target DataFlavor.
sun.awt.datatransfer.DataTransferer.ReencodingInputStream#read()->int::: reencoding input stream read
sun.awt.datatransfer.DataTransferer.ReencodingInputStream#available()->int::: reencoding input stream available
sun.awt.datatransfer.DataTransferer.ReencodingInputStream#close()->void::: reencoding input stream close
sun.awt.datatransfer.DataTransferer#dragQueryFile(byte[])->String[]:::Decodes a byte array into a set of String filenames.
sun.awt.datatransfer.DataTransferer#dragQueryURIs(InputStream, long, Transferable)->URI[]:::Decodes URIs from either a byte array or a stream.
sun.awt.datatransfer.DataTransferer#platformImageBytesToImage(byte[], long)->Image::: data transferer platform image bytes to image
sun.awt.datatransfer.DataTransferer#standardImageBytesToImage(byte[], String)->Image:::Translates either a byte array or an input stream which contain an image data in the given standard format into an Image.
sun.awt.datatransfer.DataTransferer#imageToPlatformBytes(Image, long)->byte[]:::Translates a Java Image into a byte array which contains platform- specific image data in the given format.
sun.awt.datatransfer.DataTransferer#imageToStandardBytes(Image, String)->byte[]:::Translates a Java Image into a byte array which contains an image data in the given standard format.
sun.awt.datatransfer.DataTransferer#imageToStandardBytesImpl(RenderedImage, String)->byte[]::: data transferer image to standard bytes impl
sun.awt.datatransfer.DataTransferer#convertData(Object, Transferable, long, Map, boolean)->byte[]::: data transferer convert data
sun.awt.datatransfer.DataTransferer#processDataConversionRequests()->void::: data transferer process data conversion requests
sun.awt.datatransfer.DataTransferer#getToolkitThreadBlockedHandler()->ToolkitThreadBlockedHandler::: data transferer get toolkit thread blocked handler
sun.awt.datatransfer.DataTransferer#keysToLongArray(SortedMap)->long[]:::Helper function to reduce a Map with Long keys to a long array
sun.awt.datatransfer.DataTransferer#setToSortedDataFlavorArray(Set)->DataFlavor[]:::Helper function to convert a Set of DataFlavors to a sorted array
sun.awt.datatransfer.DataTransferer#inputStreamToByteArray(InputStream)->byte[]:::Helper function to convert an InputStream to a byte[] array.
sun.awt.datatransfer.DataTransferer#getPlatformMappingsForNative(String)->LinkedHashSet:::Returns platform-specific mappings for the specified native
sun.awt.datatransfer.DataTransferer#getPlatformMappingsForFlavor(DataFlavor)->LinkedHashSet:::Returns platform-specific mappings for the specified flavor
sun.awt.datatransfer.DesktopDatatransferServiceImpl#invokeOnEventThread(Runnable)->void::: desktop datatransfer service impl invoke on event thread
sun.awt.datatransfer.DesktopDatatransferServiceImpl#getDefaultUnicodeEncoding()->String::: desktop datatransfer service impl get default unicode encoding
sun.awt.datatransfer.DesktopDatatransferServiceImpl#getFlavorMap(Supplier)->FlavorMap::: desktop datatransfer service impl get flavor map
sun.awt.datatransfer.DesktopDatatransferServiceImpl#isDesktopPresent()->boolean::: desktop datatransfer service impl is desktop present
sun.awt.datatransfer.DesktopDatatransferServiceImpl#getPlatformMappingsForNative(String)->LinkedHashSet::: desktop datatransfer service impl get platform mappings for native
sun.awt.datatransfer.DesktopDatatransferServiceImpl#getPlatformMappingsForFlavor(DataFlavor)->LinkedHashSet::: desktop datatransfer service impl get platform mappings for flavor
sun.awt.datatransfer.DesktopDatatransferServiceImpl#registerTextFlavorProperties(String, String, String, String)->void::: desktop datatransfer service impl register text flavor properties
sun.awt.datatransfer.SunClipboard#setContents(Transferable, ClipboardOwner)->void::: sun clipboard set contents
sun.awt.datatransfer.SunClipboard#getContents(Object)->Transferable::: sun clipboard get contents
sun.awt.datatransfer.SunClipboard#getContextContents()->Transferable::: sun clipboard get context contents
sun.awt.datatransfer.SunClipboard#getAvailableDataFlavors()->DataFlavor[]::: sun clipboard get available data flavors
sun.awt.datatransfer.SunClipboard#isDataFlavorAvailable(DataFlavor)->boolean::: sun clipboard is data flavor available
sun.awt.datatransfer.SunClipboard#getData(DataFlavor)->Object::: sun clipboard get data
sun.awt.datatransfer.SunClipboard#createLocaleTransferable(long[])->Transferable:::The clipboard must be opened.
sun.awt.datatransfer.SunClipboard#openClipboard(SunClipboard)->void::: sun clipboard open clipboard
sun.awt.datatransfer.SunClipboard#closeClipboard()->void::: sun clipboard close clipboard
sun.awt.datatransfer.SunClipboard#getID()->long::: sun clipboard get d
sun.awt.datatransfer.SunClipboard#propertyChange(PropertyChangeEvent)->void::: sun clipboard property change
sun.awt.datatransfer.SunClipboard#lostOwnershipImpl()->void::: sun clipboard lost ownership impl
sun.awt.datatransfer.SunClipboard#lostOwnershipLater(AppContext)->void:::Clears the clipboard state (contents, owner and contents context) and notifies the current owner that ownership is lost
sun.awt.datatransfer.SunClipboard#lostOwnershipNow(AppContext)->void::: sun clipboard lost ownership now
sun.awt.datatransfer.SunClipboard#clearNativeContext()->void::: sun clipboard clear native context
sun.awt.datatransfer.SunClipboard#setContentsNative(Transferable)->void::: sun clipboard set contents native
sun.awt.datatransfer.SunClipboard#getClipboardFormatsOpenClose()->long[]::: sun clipboard get clipboard formats open close
sun.awt.datatransfer.SunClipboard#getClipboardFormats()->long[]:::Returns zero-length array (not null) if the number of available formats is zero.
sun.awt.datatransfer.SunClipboard#getClipboardData(long)->byte[]::: sun clipboard get clipboard data
sun.awt.datatransfer.SunClipboard#addFlavorListener(FlavorListener)->void::: sun clipboard add flavor listener
sun.awt.datatransfer.SunClipboard#removeFlavorListener(FlavorListener)->void::: sun clipboard remove flavor listener
sun.awt.datatransfer.SunClipboard#getFlavorListeners()->FlavorListener[]::: sun clipboard get flavor listeners
sun.awt.datatransfer.SunClipboard#areFlavorListenersRegistered()->boolean::: sun clipboard are flavor listeners registered
sun.awt.datatransfer.SunClipboard#registerClipboardViewerChecked()->void::: sun clipboard register clipboard viewer checked
sun.awt.datatransfer.SunClipboard#unregisterClipboardViewerChecked()->void::: sun clipboard unregister clipboard viewer checked
sun.awt.datatransfer.SunClipboard#checkChange(long[])->void:::Checks change of the DataFlavors and, if necessary, posts notifications on FlavorEvents to the AppContexts' EDTs
sun.awt.datatransfer.SunClipboard#getDefaultFlavorTable()->FlavorTable::: sun clipboard get default flavor table
sun.awt.datatransfer.ToolkitThreadBlockedHandler#lock()->void::: toolkit thread blocked handler lock
sun.awt.datatransfer.ToolkitThreadBlockedHandler#unlock()->void::: toolkit thread blocked handler unlock
sun.awt.datatransfer.ToolkitThreadBlockedHandler#enter()->void::: toolkit thread blocked handler enter
sun.awt.datatransfer.ToolkitThreadBlockedHandler#exit()->void::: toolkit thread blocked handler exit
sun.awt.datatransfer.TransferableProxy#getTransferDataFlavors()->DataFlavor[]::: transferable proxy get transfer data flavors
sun.awt.datatransfer.TransferableProxy#isDataFlavorSupported(DataFlavor)->boolean::: transferable proxy is data flavor supported
sun.awt.datatransfer.TransferableProxy#getTransferData(DataFlavor)->Object::: transferable proxy get transfer data
sun.awt.datatransfer.ClassLoaderObjectOutputStream#annotateClass(Class)->void::: class loader object output stream annotate class
sun.awt.datatransfer.ClassLoaderObjectOutputStream#annotateProxyClass(Class)->void::: class loader object output stream annotate proxy class
sun.awt.datatransfer.ClassLoaderObjectOutputStream#getClassLoaderMap()->Map, ClassLoader>::: class loader object output stream get class loader map
sun.awt.datatransfer.ClassLoaderObjectInputStream#resolveClass(ObjectStreamClass)->Class::: class loader object input stream resolve class
sun.awt.datatransfer.ClassLoaderObjectInputStream#resolveProxyClass(String[])->Class::: class loader object input stream resolve proxy class

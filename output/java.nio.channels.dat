java.nio.channels.AsynchronousByteChannel#read(ByteBuffer, A, CompletionHandler<Integer, ? super A>)->void:::Reads a sequence of bytes from this channel into the given buffer
java.nio.channels.AsynchronousByteChannel#read(ByteBuffer)->Future<Integer>:::Reads a sequence of bytes from this channel into the given buffer
java.nio.channels.AsynchronousByteChannel#write(ByteBuffer, A, CompletionHandler<Integer, ? super A>)->void:::Writes a sequence of bytes to this channel from the given buffer
java.nio.channels.AsynchronousByteChannel#write(ByteBuffer)->Future<Integer>:::Writes a sequence of bytes to this channel from the given buffer
java.nio.channels.AsynchronousChannel#close()->void:::Closes this channel
java.nio.channels.AsynchronousChannelGroup#provider()->AsynchronousChannelProvider:::Returns the provider that created this channel group.
java.nio.channels.AsynchronousChannelGroup#withFixedThreadPool(int, ThreadFactory)->AsynchronousChannelGroup:::Creates an asynchronous channel group with a fixed thread pool
java.nio.channels.AsynchronousChannelGroup#withCachedThreadPool(ExecutorService, int)->AsynchronousChannelGroup:::Creates an asynchronous channel group with a given thread pool that  creates new threads as needed
java.nio.channels.AsynchronousChannelGroup#withThreadPool(ExecutorService)->AsynchronousChannelGroup:::Creates an asynchronous channel group with a given thread pool
java.nio.channels.AsynchronousChannelGroup#isShutdown()->boolean:::Tells whether or not this asynchronous channel group is shutdown.
java.nio.channels.AsynchronousChannelGroup#isTerminated()->boolean:::Tells whether or not this group has terminated
java.nio.channels.AsynchronousChannelGroup#shutdown()->void:::Initiates an orderly shutdown of the group
java.nio.channels.AsynchronousChannelGroup#shutdownNow()->void:::Shuts down the group and closes all open channels in the group
java.nio.channels.AsynchronousChannelGroup#awaitTermination(long, TimeUnit)->boolean:::Awaits termination of the group
java.nio.channels.AsynchronousFileChannel#open(Path, Set<? extends OpenOption>, ExecutorService, FileAttribute<?>...)->AsynchronousFileChannel:::Opens or creates a file for reading and/or writing, returning an  asynchronous file channel to access the file
java.nio.channels.AsynchronousFileChannel#open(Path, OpenOption...)->AsynchronousFileChannel:::Opens or creates a file for reading and/or writing, returning an  asynchronous file channel to access the file
java.nio.channels.AsynchronousFileChannel#size()->long:::Returns the current size of this channel's file.
java.nio.channels.AsynchronousFileChannel#truncate(long)->AsynchronousFileChannel:::Truncates this channel's file to the given size
java.nio.channels.AsynchronousFileChannel#force(boolean)->void:::Forces any updates to this channel's file to be written to the storage  device that contains it
java.nio.channels.AsynchronousFileChannel#lock(long, long, boolean, A, CompletionHandler<FileLock, ? super A>)->void:::Acquires a lock on the given region of this channel's file
java.nio.channels.AsynchronousFileChannel#lock(A, CompletionHandler<FileLock, ? super A>)->void:::Acquires an exclusive lock on this channel's file
java.nio.channels.AsynchronousFileChannel#lock(long, long, boolean)->Future<FileLock>:::Acquires a lock on the given region of this channel's file
java.nio.channels.AsynchronousFileChannel#lock()->Future<FileLock>:::Acquires an exclusive lock on this channel's file
java.nio.channels.AsynchronousFileChannel#tryLock(long, long, boolean)->FileLock:::Attempts to acquire a lock on the given region of this channel's file
java.nio.channels.AsynchronousFileChannel#tryLock()->FileLock:::Attempts to acquire an exclusive lock on this channel's file
java.nio.channels.AsynchronousFileChannel#read(ByteBuffer, long, A, CompletionHandler<Integer, ? super A>)->void:::Reads a sequence of bytes from this channel into the given buffer,  starting at the given file position
java.nio.channels.AsynchronousFileChannel#read(ByteBuffer, long)->Future<Integer>:::Reads a sequence of bytes from this channel into the given buffer,  starting at the given file position
java.nio.channels.AsynchronousFileChannel#write(ByteBuffer, long, A, CompletionHandler<Integer, ? super A>)->void:::Writes a sequence of bytes to this channel from the given buffer, starting  at the given file position
java.nio.channels.AsynchronousFileChannel#write(ByteBuffer, long)->Future<Integer>:::Writes a sequence of bytes to this channel from the given buffer, starting  at the given file position
java.nio.channels.AsynchronousServerSocketChannel#provider()->AsynchronousChannelProvider:::Returns the provider that created this channel.
java.nio.channels.AsynchronousServerSocketChannel#open(AsynchronousChannelGroup)->AsynchronousServerSocketChannel:::Opens an asynchronous server-socket channel
java.nio.channels.AsynchronousServerSocketChannel#open()->AsynchronousServerSocketChannel:::Opens an asynchronous server-socket channel
java.nio.channels.AsynchronousServerSocketChannel#bind(SocketAddress)->AsynchronousServerSocketChannel:::Binds the channel's socket to a local address and configures the socket to  listen for connections
java.nio.channels.AsynchronousServerSocketChannel#bind(SocketAddress, int)->AsynchronousServerSocketChannel:::Binds the channel's socket to a local address and configures the socket to  listen for connections
java.nio.channels.AsynchronousServerSocketChannel#setOption(SocketOption<T>, T)->AsynchronousServerSocketChannel:::
java.nio.channels.AsynchronousServerSocketChannel#accept(A, CompletionHandler<AsynchronousSocketChannel, ? super A>)->void:::Accepts a connection
java.nio.channels.AsynchronousServerSocketChannel#accept()->Future<AsynchronousSocketChannel>:::Accepts a connection
java.nio.channels.AsynchronousServerSocketChannel#getLocalAddress()->SocketAddress:::{@inheritDoc}  <p>  If there is a security manager set, its {@code checkConnect} method is  called with the local address and {@code -1} as its arguments to see  if the operation is allowed
java.nio.channels.AsynchronousSocketChannel#provider()->AsynchronousChannelProvider:::Returns the provider that created this channel.
java.nio.channels.AsynchronousSocketChannel#open(AsynchronousChannelGroup)->AsynchronousSocketChannel:::Opens an asynchronous socket channel
java.nio.channels.AsynchronousSocketChannel#open()->AsynchronousSocketChannel:::Opens an asynchronous socket channel
java.nio.channels.AsynchronousSocketChannel#bind(SocketAddress)->AsynchronousSocketChannel:::
java.nio.channels.AsynchronousSocketChannel#setOption(SocketOption<T>, T)->AsynchronousSocketChannel:::
java.nio.channels.AsynchronousSocketChannel#shutdownInput()->AsynchronousSocketChannel:::Shutdown the connection for reading without closing the channel
java.nio.channels.AsynchronousSocketChannel#shutdownOutput()->AsynchronousSocketChannel:::Shutdown the connection for writing without closing the channel
java.nio.channels.AsynchronousSocketChannel#getRemoteAddress()->SocketAddress:::Returns the remote address to which this channel's socket is connected
java.nio.channels.AsynchronousSocketChannel#connect(SocketAddress, A, CompletionHandler<Void, ? super A>)->void:::Connects this channel
java.nio.channels.AsynchronousSocketChannel#connect(SocketAddress)->Future<Void>:::Connects this channel
java.nio.channels.AsynchronousSocketChannel#read(ByteBuffer, long, TimeUnit, A, CompletionHandler<Integer, ? super A>)->void:::Reads a sequence of bytes from this channel into the given buffer
java.nio.channels.AsynchronousSocketChannel#read(ByteBuffer, A, CompletionHandler<Integer, ? super A>)->void:::
java.nio.channels.AsynchronousSocketChannel#read(ByteBuffer)->Future<Integer>:::
java.nio.channels.AsynchronousSocketChannel#read(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler<Long, ? super A>)->void:::Reads a sequence of bytes from this channel into a subsequence of the  given buffers
java.nio.channels.AsynchronousSocketChannel#write(ByteBuffer, long, TimeUnit, A, CompletionHandler<Integer, ? super A>)->void:::Writes a sequence of bytes to this channel from the given buffer
java.nio.channels.AsynchronousSocketChannel#write(ByteBuffer, A, CompletionHandler<Integer, ? super A>)->void:::
java.nio.channels.AsynchronousSocketChannel#write(ByteBuffer)->Future<Integer>:::
java.nio.channels.AsynchronousSocketChannel#write(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler<Long, ? super A>)->void:::Writes a sequence of bytes to this channel from a subsequence of the given  buffers
java.nio.channels.AsynchronousSocketChannel#getLocalAddress()->SocketAddress:::{@inheritDoc}  <p>  If there is a security manager set, its {@code checkConnect} method is  called with the local address and {@code -1} as its arguments to see  if the operation is allowed
java.nio.channels.Channel#isOpen()->boolean:::Tells whether or not this channel is open.
java.nio.channels.Channel#close()->void:::Closes this channel
java.nio.channels.Channels#newInputStream(ReadableByteChannel)->InputStream:::Constructs a stream that reads bytes from the given channel
java.nio.channels.Channels#newOutputStream(WritableByteChannel)->OutputStream:::Constructs a stream that writes bytes to the given channel
java.nio.channels.Channels#newInputStream(AsynchronousByteChannel)->InputStream:::Constructs a stream that reads bytes from the given channel
java.nio.channels.Channels#newOutputStream(AsynchronousByteChannel)->OutputStream:::Constructs a stream that writes bytes to the given channel
java.nio.channels.Channels#newChannel(InputStream)->ReadableByteChannel:::Constructs a channel that reads bytes from the given stream
java.nio.channels.Channels.ReadableByteChannelImpl#read(ByteBuffer)->int:::
java.nio.channels.Channels.ReadableByteChannelImpl#implCloseChannel()->void:::
java.nio.channels.Channels#newChannel(OutputStream)->WritableByteChannel:::Constructs a channel that writes bytes to the given stream
java.nio.channels.Channels.WritableByteChannelImpl#write(ByteBuffer)->int:::
java.nio.channels.Channels.WritableByteChannelImpl#implCloseChannel()->void:::
java.nio.channels.Channels#newReader(ReadableByteChannel, CharsetDecoder, int)->Reader:::Constructs a reader that decodes bytes from the given channel using the  given decoder
java.nio.channels.Channels#newReader(ReadableByteChannel, String)->Reader:::Constructs a reader that decodes bytes from the given channel according  to the named charset
java.nio.channels.Channels#newReader(ReadableByteChannel, Charset)->Reader:::Constructs a reader that decodes bytes from the given channel according  to the given charset
java.nio.channels.Channels#newWriter(WritableByteChannel, CharsetEncoder, int)->Writer:::Constructs a writer that encodes characters using the given encoder and  writes the resulting bytes to the given channel
java.nio.channels.Channels#newWriter(WritableByteChannel, String)->Writer:::Constructs a writer that encodes characters according to the named  charset and writes the resulting bytes to the given channel
java.nio.channels.Channels#newWriter(WritableByteChannel, Charset)->Writer:::Constructs a writer that encodes characters according to the given  charset and writes the resulting bytes to the given channel
java.nio.channels.CompletionHandler#completed(V, A)->void:::Invoked when an operation has completed.
java.nio.channels.CompletionHandler#failed(Throwable, A)->void:::Invoked when an operation fails.
java.nio.channels.DatagramChannel#open()->DatagramChannel:::Opens a datagram channel
java.nio.channels.DatagramChannel#open(ProtocolFamily)->DatagramChannel:::Opens a datagram channel
java.nio.channels.DatagramChannel#validOps()->int:::Returns an operation set identifying this channel's supported  operations
java.nio.channels.DatagramChannel#bind(SocketAddress)->DatagramChannel:::
java.nio.channels.DatagramChannel#setOption(SocketOption<T>, T)->DatagramChannel:::
java.nio.channels.DatagramChannel#socket()->DatagramSocket:::Retrieves a datagram socket associated with this channel
java.nio.channels.DatagramChannel#isConnected()->boolean:::Tells whether or not this channel's socket is connected.
java.nio.channels.DatagramChannel#connect(SocketAddress)->DatagramChannel:::Connects this channel's socket
java.nio.channels.DatagramChannel#disconnect()->DatagramChannel:::Disconnects this channel's socket
java.nio.channels.DatagramChannel#getRemoteAddress()->SocketAddress:::Returns the remote address to which this channel's socket is connected.
java.nio.channels.DatagramChannel#receive(ByteBuffer)->SocketAddress:::Receives a datagram via this channel
java.nio.channels.DatagramChannel#send(ByteBuffer, SocketAddress)->int:::Sends a datagram via this channel
java.nio.channels.DatagramChannel#read(ByteBuffer)->int:::Reads a datagram from this channel
java.nio.channels.DatagramChannel#read(ByteBuffer[], int, int)->long:::Reads a datagram from this channel
java.nio.channels.DatagramChannel#read(ByteBuffer[])->long:::Reads a datagram from this channel
java.nio.channels.DatagramChannel#write(ByteBuffer)->int:::Writes a datagram to this channel
java.nio.channels.DatagramChannel#write(ByteBuffer[], int, int)->long:::Writes a datagram to this channel
java.nio.channels.DatagramChannel#write(ByteBuffer[])->long:::Writes a datagram to this channel
java.nio.channels.DatagramChannel#getLocalAddress()->SocketAddress:::{@inheritDoc}  <p>  If there is a security manager set, its {@code checkConnect} method is  called with the local address and {@code -1} as its arguments to see  if the operation is allowed
java.nio.channels.FileChannel#open(Path, Set<? extends OpenOption>, FileAttribute<?>...)->FileChannel:::Opens or creates a file, returning a file channel to access the file
java.nio.channels.FileChannel#open(Path, OpenOption...)->FileChannel:::Opens or creates a file, returning a file channel to access the file
java.nio.channels.FileChannel#read(ByteBuffer)->int:::Reads a sequence of bytes from this channel into the given buffer
java.nio.channels.FileChannel#read(ByteBuffer[], int, int)->long:::Reads a sequence of bytes from this channel into a subsequence of the  given buffers
java.nio.channels.FileChannel#read(ByteBuffer[])->long:::Reads a sequence of bytes from this channel into the given buffers
java.nio.channels.FileChannel#write(ByteBuffer)->int:::Writes a sequence of bytes to this channel from the given buffer
java.nio.channels.FileChannel#write(ByteBuffer[], int, int)->long:::Writes a sequence of bytes to this channel from a subsequence of the  given buffers
java.nio.channels.FileChannel#write(ByteBuffer[])->long:::Writes a sequence of bytes to this channel from the given buffers
java.nio.channels.FileChannel#position()->long:::Returns this channel's file position.
java.nio.channels.FileChannel#position(long)->FileChannel:::Sets this channel's file position
java.nio.channels.FileChannel#size()->long:::Returns the current size of this channel's file.
java.nio.channels.FileChannel#truncate(long)->FileChannel:::Truncates this channel's file to the given size
java.nio.channels.FileChannel#force(boolean)->void:::Forces any updates to this channel's file to be written to the storage  device that contains it
java.nio.channels.FileChannel#transferTo(long, long, WritableByteChannel)->long:::Transfers bytes from this channel's file to the given writable byte  channel
java.nio.channels.FileChannel#transferFrom(ReadableByteChannel, long, long)->long:::Transfers bytes into this channel's file from the given readable byte  channel
java.nio.channels.FileChannel#read(ByteBuffer, long)->int:::Reads a sequence of bytes from this channel into the given buffer,  starting at the given file position
java.nio.channels.FileChannel#write(ByteBuffer, long)->int:::Writes a sequence of bytes to this channel from the given buffer,  starting at the given file position
java.nio.channels.FileChannel.MapMode#toString()->String:::Returns a string describing this file-mapping mode.
java.nio.channels.FileChannel#map(MapMode, long, long)->MappedByteBuffer:::Maps a region of this channel's file directly into memory
java.nio.channels.FileChannel#lock(long, long, boolean)->FileLock:::Acquires a lock on the given region of this channel's file
java.nio.channels.FileChannel#lock()->FileLock:::Acquires an exclusive lock on this channel's file
java.nio.channels.FileChannel#tryLock(long, long, boolean)->FileLock:::Attempts to acquire a lock on the given region of this channel's file
java.nio.channels.FileChannel#tryLock()->FileLock:::Attempts to acquire an exclusive lock on this channel's file
java.nio.channels.FileLock#channel()->FileChannel:::Returns the file channel upon whose file this lock was acquired
java.nio.channels.FileLock#acquiredBy()->Channel:::Returns the channel upon whose file this lock was acquired.
java.nio.channels.FileLock#position()->long:::Returns the position within the file of the first byte of the locked  region
java.nio.channels.FileLock#size()->long:::Returns the size of the locked region in bytes
java.nio.channels.FileLock#isShared()->boolean:::Tells whether this lock is shared.
java.nio.channels.FileLock#overlaps(long, long)->boolean:::Tells whether or not this lock overlaps the given lock range.
java.nio.channels.FileLock#isValid()->boolean:::Tells whether or not this lock is valid
java.nio.channels.FileLock#release()->void:::Releases this lock
java.nio.channels.FileLock#close()->void:::This method invokes the {@link #release} method
java.nio.channels.FileLock#toString()->String:::Returns a string describing the range, type, and validity of this lock.
java.nio.channels.GatheringByteChannel#write(ByteBuffer[], int, int)->long:::Writes a sequence of bytes to this channel from a subsequence of the  given buffers
java.nio.channels.GatheringByteChannel#write(ByteBuffer[])->long:::Writes a sequence of bytes to this channel from the given buffers
java.nio.channels.InterruptibleChannel#close()->void:::Closes this channel
java.nio.channels.MembershipKey#isValid()->boolean:::Tells whether or not this membership is valid
java.nio.channels.MembershipKey#drop()->void:::Drop membership
java.nio.channels.MembershipKey#block(InetAddress)->MembershipKey:::Block multicast datagrams from the given source address
java.nio.channels.MembershipKey#unblock(InetAddress)->MembershipKey:::Unblock multicast datagrams from the given source address that was  previously blocked using the {@link #block(InetAddress) block} method.
java.nio.channels.MembershipKey#channel()->MulticastChannel:::Returns the channel for which this membership key was created
java.nio.channels.MembershipKey#group()->InetAddress:::Returns the multicast group for which this membership key was created
java.nio.channels.MembershipKey#networkInterface()->NetworkInterface:::Returns the network interface for which this membership key was created
java.nio.channels.MembershipKey#sourceAddress()->InetAddress:::Returns the source address if this membership key is source-specific,  or {@code null} if this membership is not source-specific.
java.nio.channels.MulticastChannel#close()->void:::Closes this channel
java.nio.channels.MulticastChannel#join(InetAddress, NetworkInterface)->MembershipKey:::Joins a multicast group to begin receiving all datagrams sent to the group,  returning a membership key
java.nio.channels.MulticastChannel#join(InetAddress, NetworkInterface, InetAddress)->MembershipKey:::Joins a multicast group to begin receiving datagrams sent to the group  from a given source address
java.nio.channels.NetworkChannel#bind(SocketAddress)->NetworkChannel:::Binds the channel's socket to a local address
java.nio.channels.NetworkChannel#getLocalAddress()->SocketAddress:::Returns the socket address that this channel's socket is bound to
java.nio.channels.NetworkChannel#setOption(SocketOption<T>, T)->NetworkChannel:::Sets the value of a socket option.
java.nio.channels.NetworkChannel#getOption(SocketOption<T>)->T:::Returns the value of a socket option.
java.nio.channels.NetworkChannel#supportedOptions()->Set<SocketOption<?>>:::Returns a set of the socket options supported by this channel
java.nio.channels.Pipe.SourceChannel#validOps()->int:::Returns an operation set identifying this channel's supported  operations
java.nio.channels.Pipe.SinkChannel#validOps()->int:::Returns an operation set identifying this channel's supported  operations
java.nio.channels.Pipe#source()->SourceChannel:::Returns this pipe's source channel.
java.nio.channels.Pipe#sink()->SinkChannel:::Returns this pipe's sink channel.
java.nio.channels.Pipe#open()->Pipe:::Opens a pipe
java.nio.channels.ReadableByteChannel#read(ByteBuffer)->int:::Reads a sequence of bytes from this channel into the given buffer
java.nio.channels.ScatteringByteChannel#read(ByteBuffer[], int, int)->long:::Reads a sequence of bytes from this channel into a subsequence of the  given buffers
java.nio.channels.ScatteringByteChannel#read(ByteBuffer[])->long:::Reads a sequence of bytes from this channel into the given buffers
java.nio.channels.SeekableByteChannel#read(ByteBuffer)->int:::Reads a sequence of bytes from this channel into the given buffer
java.nio.channels.SeekableByteChannel#write(ByteBuffer)->int:::Writes a sequence of bytes to this channel from the given buffer
java.nio.channels.SeekableByteChannel#position()->long:::Returns this channel's position.
java.nio.channels.SeekableByteChannel#position(long)->SeekableByteChannel:::Sets this channel's position
java.nio.channels.SeekableByteChannel#size()->long:::Returns the current size of entity to which this channel is connected.
java.nio.channels.SeekableByteChannel#truncate(long)->SeekableByteChannel:::Truncates the entity, to which this channel is connected, to the given  size
java.nio.channels.SelectableChannel#provider()->SelectorProvider:::Returns the provider that created this channel.
java.nio.channels.SelectableChannel#validOps()->int:::Returns an <a href="SelectionKey.html#opsets">operation set</a>  identifying this channel's supported operations
java.nio.channels.SelectableChannel#isRegistered()->boolean:::Tells whether or not this channel is currently registered with any  selectors
java.nio.channels.SelectableChannel#keyFor(Selector)->SelectionKey:::Retrieves the key representing the channel's registration with the given  selector.
java.nio.channels.SelectableChannel#register(Selector, int, Object)->SelectionKey:::Registers this channel with the given selector, returning a selection  key
java.nio.channels.SelectableChannel#register(Selector, int)->SelectionKey:::Registers this channel with the given selector, returning a selection  key
java.nio.channels.SelectableChannel#configureBlocking(boolean)->SelectableChannel:::Adjusts this channel's blocking mode
java.nio.channels.SelectableChannel#isBlocking()->boolean:::Tells whether or not every I/O operation on this channel will block  until it completes
java.nio.channels.SelectableChannel#blockingLock()->Object:::Retrieves the object upon which the {@link #configureBlocking  configureBlocking} and {@link #register register} methods synchronize
java.nio.channels.SelectionKey#channel()->SelectableChannel:::Returns the channel for which this key was created
java.nio.channels.SelectionKey#selector()->Selector:::Returns the selector for which this key was created
java.nio.channels.SelectionKey#isValid()->boolean:::Tells whether or not this key is valid
java.nio.channels.SelectionKey#cancel()->void:::Requests that the registration of this key's channel with its selector  be cancelled
java.nio.channels.SelectionKey#interestOps()->int:::Retrieves this key's interest set
java.nio.channels.SelectionKey#interestOps(int)->SelectionKey:::Sets this key's interest set to the given value
java.nio.channels.SelectionKey#interestOpsOr(int)->int:::Atomically sets this key's interest set to the bitwise union ("or") of  the existing interest set and the given value
java.nio.channels.SelectionKey#interestOpsAnd(int)->int:::Atomically sets this key's interest set to the bitwise intersection ("and")  of the existing interest set and the given value
java.nio.channels.SelectionKey#readyOps()->int:::Retrieves this key's ready-operation set
java.nio.channels.SelectionKey#isReadable()->boolean:::Tests whether this key's channel is ready for reading
java.nio.channels.SelectionKey#isWritable()->boolean:::Tests whether this key's channel is ready for writing
java.nio.channels.SelectionKey#isConnectable()->boolean:::Tests whether this key's channel has either finished, or failed to  finish, its socket-connection operation
java.nio.channels.SelectionKey#isAcceptable()->boolean:::Tests whether this key's channel is ready to accept a new socket  connection
java.nio.channels.SelectionKey#attach(Object)->Object:::Attaches the given object to this key
java.nio.channels.SelectionKey#attachment()->Object:::Retrieves the current attachment.
java.nio.channels.Selector#open()->Selector:::Opens a selector
java.nio.channels.Selector#isOpen()->boolean:::Tells whether or not this selector is open.
java.nio.channels.Selector#provider()->SelectorProvider:::Returns the provider that created this channel.
java.nio.channels.Selector#keys()->Set<SelectionKey>:::Returns this selector's key set
java.nio.channels.Selector#selectedKeys()->Set<SelectionKey>:::Returns this selector's selected-key set
java.nio.channels.Selector#selectNow()->int:::Selects a set of keys whose corresponding channels are ready for I/O  operations
java.nio.channels.Selector#select(long)->int:::Selects a set of keys whose corresponding channels are ready for I/O  operations
java.nio.channels.Selector#select()->int:::Selects a set of keys whose corresponding channels are ready for I/O  operations
java.nio.channels.Selector#select(Consumer<SelectionKey>, long)->int:::Selects and performs an action on the keys whose corresponding channels  are ready for I/O operations
java.nio.channels.Selector#select(Consumer<SelectionKey>)->int:::Selects and performs an action on the keys whose corresponding channels  are ready for I/O operations
java.nio.channels.Selector#selectNow(Consumer<SelectionKey>)->int:::Selects and performs an action on the keys whose corresponding channels  are ready for I/O operations
java.nio.channels.Selector#wakeup()->Selector:::Causes the first selection operation that has not yet returned to return  immediately
java.nio.channels.Selector#close()->void:::Closes this selector
java.nio.channels.ServerSocketChannel#open()->ServerSocketChannel:::Opens a server-socket channel
java.nio.channels.ServerSocketChannel#validOps()->int:::Returns an operation set identifying this channel's supported  operations
java.nio.channels.ServerSocketChannel#bind(SocketAddress)->ServerSocketChannel:::Binds the channel's socket to a local address and configures the socket  to listen for connections
java.nio.channels.ServerSocketChannel#bind(SocketAddress, int)->ServerSocketChannel:::Binds the channel's socket to a local address and configures the socket to  listen for connections
java.nio.channels.ServerSocketChannel#setOption(SocketOption<T>, T)->ServerSocketChannel:::
java.nio.channels.ServerSocketChannel#socket()->ServerSocket:::Retrieves a server socket associated with this channel
java.nio.channels.ServerSocketChannel#accept()->SocketChannel:::Accepts a connection made to this channel's socket
java.nio.channels.ServerSocketChannel#getLocalAddress()->SocketAddress:::{@inheritDoc}  <p>  If there is a security manager set, its {@code checkConnect} method is  called with the local address and {@code -1} as its arguments to see  if the operation is allowed
java.nio.channels.SocketChannel#open()->SocketChannel:::Opens a socket channel
java.nio.channels.SocketChannel#open(SocketAddress)->SocketChannel:::Opens a socket channel and connects it to a remote address
java.nio.channels.SocketChannel#validOps()->int:::Returns an operation set identifying this channel's supported  operations
java.nio.channels.SocketChannel#bind(SocketAddress)->SocketChannel:::
java.nio.channels.SocketChannel#setOption(SocketOption<T>, T)->SocketChannel:::
java.nio.channels.SocketChannel#shutdownInput()->SocketChannel:::Shutdown the connection for reading without closing the channel
java.nio.channels.SocketChannel#shutdownOutput()->SocketChannel:::Shutdown the connection for writing without closing the channel
java.nio.channels.SocketChannel#socket()->Socket:::Retrieves a socket associated with this channel
java.nio.channels.SocketChannel#isConnected()->boolean:::Tells whether or not this channel's network socket is connected.
java.nio.channels.SocketChannel#isConnectionPending()->boolean:::Tells whether or not a connection operation is in progress on this  channel.
java.nio.channels.SocketChannel#connect(SocketAddress)->boolean:::Connects this channel's socket
java.nio.channels.SocketChannel#finishConnect()->boolean:::Finishes the process of connecting a socket channel
java.nio.channels.SocketChannel#getRemoteAddress()->SocketAddress:::Returns the remote address to which this channel's socket is connected
java.nio.channels.SocketChannel#read(ByteBuffer)->int:::
java.nio.channels.SocketChannel#read(ByteBuffer[], int, int)->long:::
java.nio.channels.SocketChannel#read(ByteBuffer[])->long:::
java.nio.channels.SocketChannel#write(ByteBuffer)->int:::
java.nio.channels.SocketChannel#write(ByteBuffer[], int, int)->long:::
java.nio.channels.SocketChannel#write(ByteBuffer[])->long:::
java.nio.channels.SocketChannel#getLocalAddress()->SocketAddress:::{@inheritDoc}  <p>  If there is a security manager set, its {@code checkConnect} method is  called with the local address and {@code -1} as its arguments to see  if the operation is allowed
java.nio.channels.WritableByteChannel#write(ByteBuffer)->int:::Writes a sequence of bytes to this channel from the given buffer

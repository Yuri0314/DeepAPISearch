AsynchronousByteChannel#read(ByteBuffer, A, CompletionHandler):::Reads a sequence of bytes from this channel into the given buffer:::
AsynchronousByteChannel#read(ByteBuffer):::Reads a sequence of bytes from this channel into the given buffer:::
AsynchronousByteChannel#write(ByteBuffer, A, CompletionHandler):::Writes a sequence of bytes to this channel from the given buffer:::
AsynchronousByteChannel#write(ByteBuffer):::Writes a sequence of bytes to this channel from the given buffer:::
AsynchronousChannel#close():::Closes this channel:::
AsynchronousChannelGroup#provider():::Returns the provider that created this channel group.:::
AsynchronousChannelGroup#withFixedThreadPool(int, ThreadFactory):::Creates an asynchronous channel group with a fixed thread pool:::AsynchronousChannelProvider.provider().openAsynchronousChannelGroup
AsynchronousChannelGroup#withCachedThreadPool(ExecutorService, int):::Creates an asynchronous channel group with a given thread pool that creates new threads as needed:::AsynchronousChannelProvider.provider().openAsynchronousChannelGroup
AsynchronousChannelGroup#withThreadPool(ExecutorService):::Creates an asynchronous channel group with a given thread pool:::AsynchronousChannelProvider.provider().openAsynchronousChannelGroup
AsynchronousChannelGroup#isShutdown():::Tells whether or not this asynchronous channel group is shutdown.:::
AsynchronousChannelGroup#isTerminated():::Tells whether or not this group has terminated:::
AsynchronousChannelGroup#shutdown():::Initiates an orderly shutdown of the group:::
AsynchronousChannelGroup#shutdownNow():::Shuts down the group and closes all open channels in the group:::
AsynchronousChannelGroup#awaitTermination(long, TimeUnit):::Awaits termination of the group:::
AsynchronousFileChannel#open(Path, Set, ExecutorService, FileAttribute...):::Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file:::file.getFileSystem().provider->provider.newAsynchronousFileChannel
AsynchronousFileChannel#open(Path, OpenOption...):::Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file:::Collections.addAll->Collections.emptySet->this.open
AsynchronousFileChannel#size():::Returns the current size of this channel's file.:::
AsynchronousFileChannel#truncate(long):::Truncates this channel's file to the given size:::
AsynchronousFileChannel#force(boolean):::Forces any updates to this channel's file to be written to the storage device that contains it:::
AsynchronousFileChannel#lock(long, long, boolean, A, CompletionHandler):::Acquires a lock on the given region of this channel's file:::
AsynchronousFileChannel#lock(A, CompletionHandler):::Acquires an exclusive lock on this channel's file:::this.lock
AsynchronousFileChannel#lock(long, long, boolean):::Acquires a lock on the given region of this channel's file:::
AsynchronousFileChannel#lock():::Acquires an exclusive lock on this channel's file:::this.lock
AsynchronousFileChannel#tryLock(long, long, boolean):::Attempts to acquire a lock on the given region of this channel's file:::
AsynchronousFileChannel#tryLock():::Attempts to acquire an exclusive lock on this channel's file:::this.tryLock
AsynchronousFileChannel#read(ByteBuffer, long, A, CompletionHandler):::Reads a sequence of bytes from this channel into the given buffer, starting at the given file position:::
AsynchronousFileChannel#read(ByteBuffer, long):::Reads a sequence of bytes from this channel into the given buffer, starting at the given file position:::
AsynchronousFileChannel#write(ByteBuffer, long, A, CompletionHandler):::Writes a sequence of bytes to this channel from the given buffer, starting at the given file position:::
AsynchronousFileChannel#write(ByteBuffer, long):::Writes a sequence of bytes to this channel from the given buffer, starting at the given file position:::
AsynchronousServerSocketChannel#provider():::Returns the provider that created this channel.:::
AsynchronousServerSocketChannel#open(AsynchronousChannelGroup):::Opens an asynchronous server-socket channel:::group.provider->AsynchronousChannelProvider.provider->provider.openAsynchronousServerSocketChannel
AsynchronousServerSocketChannel#open():::Opens an asynchronous server-socket channel:::this.open
AsynchronousServerSocketChannel#bind(SocketAddress):::Binds the channel's socket to a local address and configures the socket to listen for connections:::this.bind
AsynchronousServerSocketChannel#bind(SocketAddress, int):::Binds the channel's socket to a local address and configures the socket to listen for connections:::
AsynchronousServerSocketChannel#accept(A, CompletionHandler):::Accepts a connection:::
AsynchronousServerSocketChannel#accept():::Accepts a connection:::
AsynchronousServerSocketChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed:::
AsynchronousSocketChannel#provider():::Returns the provider that created this channel.:::
AsynchronousSocketChannel#open(AsynchronousChannelGroup):::Opens an asynchronous socket channel:::group.provider->AsynchronousChannelProvider.provider->provider.openAsynchronousSocketChannel
AsynchronousSocketChannel#open():::Opens an asynchronous socket channel:::this.open
AsynchronousSocketChannel#shutdownInput():::Shutdown the connection for reading without closing the channel:::
AsynchronousSocketChannel#shutdownOutput():::Shutdown the connection for writing without closing the channel:::
AsynchronousSocketChannel#getRemoteAddress():::Returns the remote address to which this channel's socket is connected:::
AsynchronousSocketChannel#connect(SocketAddress, A, CompletionHandler):::Connects this channel:::
AsynchronousSocketChannel#connect(SocketAddress):::Connects this channel:::
AsynchronousSocketChannel#read(ByteBuffer, long, TimeUnit, A, CompletionHandler):::Reads a sequence of bytes from this channel into the given buffer:::
AsynchronousSocketChannel#read(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler):::Reads a sequence of bytes from this channel into a subsequence of the given buffers:::
AsynchronousSocketChannel#write(ByteBuffer, long, TimeUnit, A, CompletionHandler):::Writes a sequence of bytes to this channel from the given buffer:::
AsynchronousSocketChannel#write(ByteBuffer[], int, int, long, TimeUnit, A, CompletionHandler):::Writes a sequence of bytes to this channel from a subsequence of the given buffers:::
AsynchronousSocketChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed:::
Channel#isOpen():::Tells whether or not this channel is open.:::
Channel#close():::Closes this channel:::
Channels#newInputStream(ReadableByteChannel):::Constructs a stream that reads bytes from the given channel:::Objects.requireNonNull
Channels#newOutputStream(WritableByteChannel):::Constructs a stream that writes bytes to the given channel:::Objects.requireNonNull->this.write->ByteBuffer.wrap->bb.capacity->Math.min->bb.limit->bb.position->Channels.writeFully->ch.close
Channels#newInputStream(AsynchronousByteChannel):::Constructs a stream that reads bytes from the given channel:::Objects.requireNonNull->this.read->ByteBuffer.wrap->bb.position->bb.capacity->Math.min->bb.limit->Thread.currentThread().interrupt->ee.getCause->ch.read(bb).get->ch.close
Channels#newOutputStream(AsynchronousByteChannel):::Constructs a stream that writes bytes to the given channel:::Objects.requireNonNull->this.write->ByteBuffer.wrap->bb.capacity->Math.min->bb.limit->bb.position->Thread.currentThread().interrupt->ee.getCause->ch.write(bb).get->bb.remaining->ch.close
Channels#newChannel(InputStream):::Constructs a channel that reads bytes from the given stream:::Objects.requireNonNull->in.getClass->((FileInputStream) in).getChannel
Channels#newChannel(OutputStream):::Constructs a channel that writes bytes to the given stream:::Objects.requireNonNull->out.getClass->((FileOutputStream) out).getChannel
Channels#newReader(ReadableByteChannel, CharsetDecoder, int):::Constructs a reader that decodes bytes from the given channel using the given decoder:::Objects.requireNonNull->dec.reset->StreamDecoder.forDecoder
Channels#newReader(ReadableByteChannel, String):::Constructs a reader that decodes bytes from the given channel according to the named charset:::Objects.requireNonNull->Charset.forName(csName).newDecoder->this.newReader
Channels#newReader(ReadableByteChannel, Charset):::Constructs a reader that decodes bytes from the given channel according to the given charset:::Objects.requireNonNull->charset.newDecoder->this.newReader
Channels#newWriter(WritableByteChannel, CharsetEncoder, int):::Constructs a writer that encodes characters using the given encoder and writes the resulting bytes to the given channel:::Objects.requireNonNull->enc.reset->StreamEncoder.forEncoder
Channels#newWriter(WritableByteChannel, String):::Constructs a writer that encodes characters according to the named charset and writes the resulting bytes to the given channel:::Objects.requireNonNull->Charset.forName(csName).newEncoder->this.newWriter
Channels#newWriter(WritableByteChannel, Charset):::Constructs a writer that encodes characters according to the given charset and writes the resulting bytes to the given channel:::Objects.requireNonNull->charset.newEncoder->this.newWriter
CompletionHandler#completed(V, A):::Invoked when an operation has completed.:::
CompletionHandler#failed(Throwable, A):::Invoked when an operation fails.:::
DatagramChannel#open():::Opens a datagram channel:::SelectorProvider.provider().openDatagramChannel
DatagramChannel#open(ProtocolFamily):::Opens a datagram channel:::SelectorProvider.provider().openDatagramChannel
DatagramChannel#validOps():::Returns an operation set identifying this channel's supported operations:::
DatagramChannel#socket():::Retrieves a datagram socket associated with this channel:::
DatagramChannel#isConnected():::Tells whether or not this channel's socket is connected.:::
DatagramChannel#connect(SocketAddress):::Connects this channel's socket:::
DatagramChannel#disconnect():::Disconnects this channel's socket:::
DatagramChannel#getRemoteAddress():::Returns the remote address to which this channel's socket is connected.:::
DatagramChannel#receive(ByteBuffer):::Receives a datagram via this channel:::
DatagramChannel#send(ByteBuffer, SocketAddress):::Sends a datagram via this channel:::
DatagramChannel#read(ByteBuffer):::Reads a datagram from this channel:::
DatagramChannel#read(ByteBuffer[], int, int):::Reads a datagram from this channel:::
DatagramChannel#read(ByteBuffer[]):::Reads a datagram from this channel:::this.read
DatagramChannel#write(ByteBuffer):::Writes a datagram to this channel:::
DatagramChannel#write(ByteBuffer[], int, int):::Writes a datagram to this channel:::
DatagramChannel#write(ByteBuffer[]):::Writes a datagram to this channel:::this.write
DatagramChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed:::
FileChannel#open(Path, Set, FileAttribute...):::Opens or creates a file, returning a file channel to access the file:::path.getFileSystem().provider->provider.newFileChannel
FileChannel#open(Path, OpenOption...):::Opens or creates a file, returning a file channel to access the file:::Collections.addAll->Collections.emptySet->this.open
FileChannel#read(ByteBuffer):::Reads a sequence of bytes from this channel into the given buffer:::
FileChannel#read(ByteBuffer[], int, int):::Reads a sequence of bytes from this channel into a subsequence of the given buffers:::
FileChannel#read(ByteBuffer[]):::Reads a sequence of bytes from this channel into the given buffers:::this.read
FileChannel#write(ByteBuffer):::Writes a sequence of bytes to this channel from the given buffer:::
FileChannel#write(ByteBuffer[], int, int):::Writes a sequence of bytes to this channel from a subsequence of the given buffers:::
FileChannel#write(ByteBuffer[]):::Writes a sequence of bytes to this channel from the given buffers:::this.write
FileChannel#position():::Returns this channel's file position.:::
FileChannel#position(long):::Sets this channel's file position:::
FileChannel#size():::Returns the current size of this channel's file.:::
FileChannel#truncate(long):::Truncates this channel's file to the given size:::
FileChannel#force(boolean):::Forces any updates to this channel's file to be written to the storage device that contains it:::
FileChannel#transferTo(long, long, WritableByteChannel):::Transfers bytes from this channel's file to the given writable byte channel:::
FileChannel#transferFrom(ReadableByteChannel, long, long):::Transfers bytes into this channel's file from the given readable byte channel:::
FileChannel#read(ByteBuffer, long):::Reads a sequence of bytes from this channel into the given buffer, starting at the given file position:::
FileChannel#write(ByteBuffer, long):::Writes a sequence of bytes to this channel from the given buffer, starting at the given file position:::
FileChannel.MapMode#toString():::Returns a string describing this file-mapping mode.:::
FileChannel#map(MapMode, long, long):::Maps a region of this channel's file directly into memory:::
FileChannel#lock(long, long, boolean):::Acquires a lock on the given region of this channel's file:::
FileChannel#lock():::Acquires an exclusive lock on this channel's file:::this.lock
FileChannel#tryLock(long, long, boolean):::Attempts to acquire a lock on the given region of this channel's file:::
FileChannel#tryLock():::Attempts to acquire an exclusive lock on this channel's file:::this.tryLock
FileLock#channel():::Returns the file channel upon whose file this lock was acquired:::
FileLock#acquiredBy():::Returns the channel upon whose file this lock was acquired.:::
FileLock#position():::Returns the position within the file of the first byte of the locked region:::
FileLock#size():::Returns the size of the locked region in bytes:::
FileLock#isShared():::Tells whether this lock is shared.:::
FileLock#overlaps(long, long):::Tells whether or not this lock overlaps the given lock range.:::
FileLock#isValid():::Tells whether or not this lock is valid:::
FileLock#release():::Releases this lock:::
FileLock#close():::This method invokes the #release method:::this.release
FileLock#toString():::Returns a string describing the range, type, and validity of this lock.:::this.getClass().getName->this.isValid
GatheringByteChannel#write(ByteBuffer[], int, int):::Writes a sequence of bytes to this channel from a subsequence of the given buffers:::
GatheringByteChannel#write(ByteBuffer[]):::Writes a sequence of bytes to this channel from the given buffers:::
InterruptibleChannel#close():::Closes this channel:::
MembershipKey#isValid():::Tells whether or not this membership is valid:::
MembershipKey#drop():::Drop membership:::
MembershipKey#block(InetAddress):::Block multicast datagrams from the given source address:::
MembershipKey#unblock(InetAddress):::Unblock multicast datagrams from the given source address that was previously blocked using the #block(InetAddress) block method.:::
MembershipKey#channel():::Returns the channel for which this membership key was created:::
MembershipKey#group():::Returns the multicast group for which this membership key was created:::
MembershipKey#networkInterface():::Returns the network interface for which this membership key was created:::
MembershipKey#sourceAddress():::Returns the source address if this membership key is source-specific, or null if this membership is not source-specific.:::
MulticastChannel#close():::Closes this channel:::
MulticastChannel#join(InetAddress, NetworkInterface):::Joins a multicast group to begin receiving all datagrams sent to the group, returning a membership key:::
MulticastChannel#join(InetAddress, NetworkInterface, InetAddress):::Joins a multicast group to begin receiving datagrams sent to the group from a given source address:::
NetworkChannel#bind(SocketAddress):::Binds the channel's socket to a local address:::
NetworkChannel#getLocalAddress():::Returns the socket address that this channel's socket is bound to:::
NetworkChannel#setOption(SocketOption, T):::Sets the value of a socket option.:::
NetworkChannel#getOption(SocketOption):::Returns the value of a socket option.:::
NetworkChannel#supportedOptions():::Returns a set of the socket options supported by this channel:::
Pipe.SourceChannel#validOps():::Returns an operation set identifying this channel's supported operations:::
Pipe.SinkChannel#validOps():::Returns an operation set identifying this channel's supported operations:::
Pipe#source():::Returns this pipe's source channel.:::
Pipe#sink():::Returns this pipe's sink channel.:::
Pipe#open():::Opens a pipe:::SelectorProvider.provider().openPipe
ReadableByteChannel#read(ByteBuffer):::Reads a sequence of bytes from this channel into the given buffer:::
ScatteringByteChannel#read(ByteBuffer[], int, int):::Reads a sequence of bytes from this channel into a subsequence of the given buffers:::
ScatteringByteChannel#read(ByteBuffer[]):::Reads a sequence of bytes from this channel into the given buffers:::
SeekableByteChannel#read(ByteBuffer):::Reads a sequence of bytes from this channel into the given buffer:::
SeekableByteChannel#write(ByteBuffer):::Writes a sequence of bytes to this channel from the given buffer:::
SeekableByteChannel#position():::Returns this channel's position.:::
SeekableByteChannel#position(long):::Sets this channel's position:::
SeekableByteChannel#size():::Returns the current size of entity to which this channel is connected.:::
SeekableByteChannel#truncate(long):::Truncates the entity, to which this channel is connected, to the given size:::
SelectableChannel#provider():::Returns the provider that created this channel.:::
SelectableChannel#validOps():::Returns an operation set identifying this channel's supported operations:::
SelectableChannel#isRegistered():::Tells whether or not this channel is currently registered with any selectors:::
SelectableChannel#keyFor(Selector):::Retrieves the key representing the channel's registration with the given selector.:::
SelectableChannel#register(Selector, int, Object):::Registers this channel with the given selector, returning a selection key:::
SelectableChannel#register(Selector, int):::Registers this channel with the given selector, returning a selection key:::this.register
SelectableChannel#configureBlocking(boolean):::Adjusts this channel's blocking mode:::
SelectableChannel#isBlocking():::Tells whether or not every I/O operation on this channel will block until it completes:::
SelectableChannel#blockingLock():::Retrieves the object upon which the #configureBlocking configureBlocking and #register register methods synchronize:::
SelectionKey#channel():::Returns the channel for which this key was created:::
SelectionKey#selector():::Returns the selector for which this key was created:::
SelectionKey#isValid():::Tells whether or not this key is valid:::
SelectionKey#cancel():::Requests that the registration of this key's channel with its selector be cancelled:::
SelectionKey#interestOps():::Retrieves this key's interest set:::
SelectionKey#interestOps(int):::Sets this key's interest set to the given value:::
SelectionKey#interestOpsOr(int):::Atomically sets this key's interest set to the bitwise union ("or") of the existing interest set and the given value:::this.interestOps->this.interestOps
SelectionKey#interestOpsAnd(int):::Atomically sets this key's interest set to the bitwise intersection ("and") of the existing interest set and the given value:::this.interestOps->this.interestOps
SelectionKey#readyOps():::Retrieves this key's ready-operation set:::
SelectionKey#isReadable():::Tests whether this key's channel is ready for reading:::this.readyOps
SelectionKey#isWritable():::Tests whether this key's channel is ready for writing:::this.readyOps
SelectionKey#isConnectable():::Tests whether this key's channel has either finished, or failed to finish, its socket-connection operation:::this.readyOps
SelectionKey#isAcceptable():::Tests whether this key's channel is ready to accept a new socket connection:::this.readyOps
SelectionKey#attach(Object):::Attaches the given object to this key:::attachmentUpdater.getAndSet
SelectionKey#attachment():::Retrieves the current attachment.:::
Selector#open():::Opens a selector:::SelectorProvider.provider().openSelector
Selector#isOpen():::Tells whether or not this selector is open.:::
Selector#provider():::Returns the provider that created this channel.:::
Selector#keys():::Returns this selector's key set:::
Selector#selectedKeys():::Returns this selector's selected-key set:::
Selector#selectNow():::Selects a set of keys whose corresponding channels are ready for I/O operations:::
Selector#select(long):::Selects a set of keys whose corresponding channels are ready for I/O operations:::
Selector#select():::Selects a set of keys whose corresponding channels are ready for I/O operations:::
Selector#select(Consumer, long):::Selects and performs an action on the keys whose corresponding channels are ready for I/O operations:::Objects.requireNonNull->this.doSelect
Selector#select(Consumer):::Selects and performs an action on the keys whose corresponding channels are ready for I/O operations:::this.select
Selector#selectNow(Consumer):::Selects and performs an action on the keys whose corresponding channels are ready for I/O operations:::Objects.requireNonNull->this.doSelect
Selector#wakeup():::Causes the first selection operation that has not yet returned to return immediately:::
Selector#close():::Closes this selector:::
ServerSocketChannel#open():::Opens a server-socket channel:::SelectorProvider.provider().openServerSocketChannel
ServerSocketChannel#validOps():::Returns an operation set identifying this channel's supported operations:::
ServerSocketChannel#bind(SocketAddress):::Binds the channel's socket to a local address and configures the socket to listen for connections:::this.bind
ServerSocketChannel#bind(SocketAddress, int):::Binds the channel's socket to a local address and configures the socket to listen for connections:::
ServerSocketChannel#socket():::Retrieves a server socket associated with this channel:::
ServerSocketChannel#accept():::Accepts a connection made to this channel's socket:::
ServerSocketChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed:::
SocketChannel#open():::Opens a socket channel:::SelectorProvider.provider().openSocketChannel
SocketChannel#open(SocketAddress):::Opens a socket channel and connects it to a remote address:::this.open->x.addSuppressed->sc.close->sc.connect->sc.isConnected
SocketChannel#validOps():::Returns an operation set identifying this channel's supported operations:::
SocketChannel#shutdownInput():::Shutdown the connection for reading without closing the channel:::
SocketChannel#shutdownOutput():::Shutdown the connection for writing without closing the channel:::
SocketChannel#socket():::Retrieves a socket associated with this channel:::
SocketChannel#isConnected():::Tells whether or not this channel's network socket is connected.:::
SocketChannel#isConnectionPending():::Tells whether or not a connection operation is in progress on this channel.:::
SocketChannel#connect(SocketAddress):::Connects this channel's socket:::
SocketChannel#finishConnect():::Finishes the process of connecting a socket channel:::
SocketChannel#getRemoteAddress():::Returns the remote address to which this channel's socket is connected:::
SocketChannel#getLocalAddress():::If there is a security manager set, its {@code checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed:::
WritableByteChannel#write(ByteBuffer):::Writes a sequence of bytes to this channel from the given buffer:::

jdk.dynalink.beans.AbstractJavaLinker#createFacetIntrospector()->FacetIntrospector::: abstract java linker create facet introspector
jdk.dynalink.beans.AbstractJavaLinker#getReadablePropertyNames()->Set::: abstract java linker get readable property names
jdk.dynalink.beans.AbstractJavaLinker#getWritablePropertyNames()->Set::: abstract java linker get writable property names
jdk.dynalink.beans.AbstractJavaLinker#getMethodNames()->Set::: abstract java linker get method names
jdk.dynalink.beans.AbstractJavaLinker#setPropertyGetter(String, MethodHandle, ValidationType)->void:::Sets the specified method handle to be the property getter for the specified property
jdk.dynalink.beans.AbstractJavaLinker#createDynamicMethod(Iterable, Class, String)->DynamicMethod:::Given one or more reflective methods or constructors, creates a dynamic method that represents them all
jdk.dynalink.beans.AbstractJavaLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: abstract java linker get guarded invocation
jdk.dynalink.beans.AbstractJavaLinker.ComponentLinkRequest#getDescriptor()->CallSiteDescriptor::: component link request get descriptor
jdk.dynalink.beans.AbstractJavaLinker.ComponentLinkRequest#popNamespace()->ComponentLinkRequest::: component link request pop namespace
jdk.dynalink.beans.AbstractJavaLinker#getGuardedInvocationComponent(ComponentLinkRequest)->GuardedInvocationComponent::: abstract java linker get guarded invocation component
jdk.dynalink.beans.AbstractJavaLinker#getNextComponent(ComponentLinkRequest)->GuardedInvocationComponent::: abstract java linker get next component
jdk.dynalink.beans.AbstractJavaLinker#pop(List)->List::: abstract java linker pop
jdk.dynalink.beans.AbstractJavaLinker#getClassGuard(CallSiteDescriptor)->MethodHandle::: abstract java linker get class guard
jdk.dynalink.beans.AbstractJavaLinker#getClassGuard(MethodType)->MethodHandle::: abstract java linker get class guard
jdk.dynalink.beans.AbstractJavaLinker#getClassGuardedInvocationComponent(MethodHandle, MethodType)->GuardedInvocationComponent::: abstract java linker get class guarded invocation component
jdk.dynalink.beans.AbstractJavaLinker#getConstructorMethod(String)->SingleDynamicMethod::: abstract java linker get constructor method
jdk.dynalink.beans.AbstractJavaLinker.MethodPair#guardWithTest(MethodHandle)->MethodHandle::: method pair guard with test
jdk.dynalink.beans.AbstractJavaLinker#matchReturnTypes(MethodHandle, MethodHandle)->MethodPair::: abstract java linker match return types
jdk.dynalink.beans.AbstractJavaLinker#getDynamicMethod(String)->DynamicMethod:::Returns a dynamic method of the specified name.
jdk.dynalink.beans.AccessibleMembersLookup#getAccessibleMethod(Method)->Method:::Returns an accessible method equivalent of a method.
jdk.dynalink.beans.AccessibleMembersLookup#getMethods()->Collection::: accessible members lookup get methods
jdk.dynalink.beans.AccessibleMembersLookup#getInnerClasses()->Class[]::: accessible members lookup get inner classes
jdk.dynalink.beans.AccessibleMembersLookup.MethodSignature#equals(Object)->boolean:::Compares this object to another object
jdk.dynalink.beans.AccessibleMembersLookup.MethodSignature#hashCode()->int:::Returns a hash code, consistent with the overridden #equals(Object).
jdk.dynalink.beans.AccessibleMembersLookup.MethodSignature#toString()->String::: method signature to string
jdk.dynalink.beans.ApplicableOverloadedMethods#getMethods()->List:::Retrieves all the methods this object holds.
jdk.dynalink.beans.ApplicableOverloadedMethods#findMaximallySpecificMethods()->List:::Returns a list of all methods in this objects that are maximally specific.
jdk.dynalink.beans.ApplicableOverloadedMethods.ApplicabilityTest#isApplicable(MethodType, SingleDynamicMethod)->boolean::: applicability test is applicable
jdk.dynalink.beans.BeanIntrospector#getInnerClassGetters()->Map::: bean introspector get inner class getters
jdk.dynalink.beans.BeanIntrospector#editMethodHandle(MethodHandle)->MethodHandle::: bean introspector edit method handle
jdk.dynalink.beans.BeanLinker#canLinkType(Class)->boolean::: bean linker can link type
jdk.dynalink.beans.BeanLinker#createFacetIntrospector()->FacetIntrospector::: bean linker create facet introspector
jdk.dynalink.beans.BeanLinker#getGuardedInvocationComponent(ComponentLinkRequest)->GuardedInvocationComponent::: bean linker get guarded invocation component
jdk.dynalink.beans.BeanLinker#getConstructorMethod(String)->SingleDynamicMethod::: bean linker get constructor method
jdk.dynalink.beans.BeansLinker#getLinkerForClass(Class)->TypeBasedGuardingDynamicLinker:::Returns a bean linker for a particular single class
jdk.dynalink.beans.BeansLinker#getStaticLinkerForClass(Class)->TypeBasedGuardingDynamicLinker::: beans linker get static linker for class
jdk.dynalink.beans.BeansLinker#isDynamicMethod(Object)->boolean:::Returns true if the object is a Java dynamic method (e.g., one obtained through a GET:METHOD operation on a Java object or StaticClass or through #getConstructorMethod(Class, String).
jdk.dynalink.beans.BeansLinker#isDynamicConstructor(Object)->boolean:::Returns true if the object is a Java constructor (obtained through #getConstructorMethod(Class, String)}.
jdk.dynalink.beans.BeansLinker#getConstructorMethod(Class, String)->Object:::Return the dynamic method of constructor of the given class and the given signature
jdk.dynalink.beans.BeansLinker#getReadableInstancePropertyNames(Class)->Set:::Returns a set of names of all readable instance properties of a class.
jdk.dynalink.beans.BeansLinker#getWritableInstancePropertyNames(Class)->Set:::Returns a set of names of all writable instance properties of a class.
jdk.dynalink.beans.BeansLinker#getInstanceMethodNames(Class)->Set:::Returns a set of names of all instance methods of a class.
jdk.dynalink.beans.BeansLinker#getReadableStaticPropertyNames(Class)->Set:::Returns a set of names of all readable static properties of a class.
jdk.dynalink.beans.BeansLinker#getWritableStaticPropertyNames(Class)->Set:::Returns a set of names of all writable static properties of a class.
jdk.dynalink.beans.BeansLinker#getStaticMethodNames(Class)->Set:::Returns a set of names of all static methods of a class.
jdk.dynalink.beans.BeansLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: beans linker get guarded invocation
jdk.dynalink.beans.CallerSensitiveDynamicMethod#getMethodType()->MethodType::: caller sensitive dynamic method get method type
jdk.dynalink.beans.CallerSensitiveDynamicMethod#isVarArgs()->boolean::: caller sensitive dynamic method is var args
jdk.dynalink.beans.CallerSensitiveDynamicMethod#getTarget(CallSiteDescriptor)->MethodHandle::: caller sensitive dynamic method get target
jdk.dynalink.beans.CallerSensitiveDynamicMethod#isConstructor()->boolean::: caller sensitive dynamic method is constructor
jdk.dynalink.beans.CheckRestrictedPackage#isRestrictedClass(Class)->boolean:::Returns true if the class is either not public, or it resides in a package with restricted access.
jdk.dynalink.beans.ClassString#equals(Object)->boolean::: class string equals
jdk.dynalink.beans.ClassString#hashCode()->int::: class string hash code
jdk.dynalink.beans.ClassString#toString()->String::: class string to string
jdk.dynalink.beans.ClassString#isVisibleFrom(ClassLoader)->boolean::: class string is visible from
jdk.dynalink.beans.ClassString#getMaximallySpecifics(List, LinkerServices, boolean)->List::: class string get maximally specifics
jdk.dynalink.beans.ClassString#getApplicables(List, LinkerServices, boolean)->LinkedList:::Returns all methods that are applicable to actual parameter classes represented by this ClassString object.
jdk.dynalink.beans.DynamicMethod#getName()->String::: dynamic method get name
jdk.dynalink.beans.DynamicMethod#getInvocation(CallSiteDescriptor, LinkerServices)->MethodHandle:::Creates an invocation for the dynamic method
jdk.dynalink.beans.DynamicMethod#getMethodForExactParamTypes(String)->SingleDynamicMethod:::Returns a single dynamic method representing a single underlying Java method (possibly selected among several overloads) with formal parameter types exactly matching the passed signature.
jdk.dynalink.beans.DynamicMethod#contains(SingleDynamicMethod)->boolean:::True if this dynamic method already contains a method with an identical signature as the passed in method.
jdk.dynalink.beans.DynamicMethod#getClassAndMethodName(Class, String)->String::: dynamic method get class and method name
jdk.dynalink.beans.DynamicMethod#toString()->String::: dynamic method to string
jdk.dynalink.beans.DynamicMethod#isConstructor()->boolean:::True if this method happens to be a constructor method.
jdk.dynalink.beans.DynamicMethodLinker#canLinkType(Class)->boolean::: dynamic method linker can link type
jdk.dynalink.beans.DynamicMethodLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: dynamic method linker get guarded invocation
jdk.dynalink.beans.FacetIntrospector#getInnerClassGetters()->Map:::Returns getters for inner classes.
jdk.dynalink.beans.FacetIntrospector#getFields()->Collection:::Returns the fields for the class facet.
jdk.dynalink.beans.FacetIntrospector#isAccessible(Member)->boolean::: facet introspector is accessible
jdk.dynalink.beans.FacetIntrospector#getMethods()->Collection:::Returns all the methods in the facet.
jdk.dynalink.beans.FacetIntrospector#unreflectGetter(Field)->MethodHandle::: facet introspector unreflect getter
jdk.dynalink.beans.FacetIntrospector#unreflectSetter(Field)->MethodHandle::: facet introspector unreflect setter
jdk.dynalink.beans.FacetIntrospector#editMethodHandle(MethodHandle)->MethodHandle:::Returns an edited method handle
jdk.dynalink.beans.GuardedInvocationComponent#replaceInvocation(MethodHandle)->GuardedInvocationComponent::: guarded invocation component replace invocation
jdk.dynalink.beans.GuardedInvocationComponent#replaceInvocation(MethodHandle, MethodHandle)->GuardedInvocationComponent::: guarded invocation component replace invocation
jdk.dynalink.beans.GuardedInvocationComponent#getGuardedInvocation()->GuardedInvocation::: guarded invocation component get guarded invocation
jdk.dynalink.beans.GuardedInvocationComponent#getValidatorClass()->Class::: guarded invocation component get validator class
jdk.dynalink.beans.GuardedInvocationComponent#getValidationType()->ValidationType::: guarded invocation component get validation type
jdk.dynalink.beans.GuardedInvocationComponent#compose(MethodHandle, MethodHandle, Class, ValidationType)->GuardedInvocationComponent::: guarded invocation component compose
jdk.dynalink.beans.LinkerServicesWithMissingMemberHandlerFactory#get(LinkerServices, MissingMemberHandlerFactory)->LinkerServices::: linker services with missing member handler factory get
jdk.dynalink.beans.LinkerServicesWithMissingMemberHandlerFactory#asType(MethodHandle, MethodType)->MethodHandle::: linker services with missing member handler factory as type
jdk.dynalink.beans.LinkerServicesWithMissingMemberHandlerFactory#getTypeConverter(Class, Class)->MethodHandle::: linker services with missing member handler factory get type converter
jdk.dynalink.beans.LinkerServicesWithMissingMemberHandlerFactory#canConvert(Class, Class)->boolean::: linker services with missing member handler factory can convert
jdk.dynalink.beans.LinkerServicesWithMissingMemberHandlerFactory#getGuardedInvocation(LinkRequest)->GuardedInvocation::: linker services with missing member handler factory get guarded invocation
jdk.dynalink.beans.LinkerServicesWithMissingMemberHandlerFactory#compareConversion(Class, Class, Class)->Comparison::: linker services with missing member handler factory compare conversion
jdk.dynalink.beans.LinkerServicesWithMissingMemberHandlerFactory#filterInternalObjects(MethodHandle)->MethodHandle::: linker services with missing member handler factory filter internal objects
jdk.dynalink.beans.LinkerServicesWithMissingMemberHandlerFactory#getWithLookup(Supplier, SecureLookupSupplier)->T::: linker services with missing member handler factory get with lookup
jdk.dynalink.beans.MaximallySpecific#getMaximallySpecificMethods(List, boolean)->List:::Given a list of methods, returns a list of maximally specific methods.
jdk.dynalink.beans.MaximallySpecific#getMaximallySpecificMethodHandles(List, boolean, Class[], LinkerServices)->List:::Given a list of methods handles, returns a list of maximally specific methods, applying language-runtime specific conversion preferences.
jdk.dynalink.beans.MaximallySpecific#getMaximallySpecificSingleDynamicMethods(List, boolean, Class[], LinkerServices)->List:::Given a list of methods, returns a list of maximally specific methods, applying language-runtime specific conversion preferences.
jdk.dynalink.beans.MissingMemberHandlerFactory#createMissingMemberHandler(LinkRequest, LinkerServices)->MethodHandle:::Returns a method handle suitable for implementing missing member behavior for a particular link request
jdk.dynalink.beans.OverloadedDynamicMethod#getMethodForExactParamTypes(String)->SingleDynamicMethod::: overloaded dynamic method get method for exact param types
jdk.dynalink.beans.OverloadedDynamicMethod#getInvocation(CallSiteDescriptor, LinkerServices)->MethodHandle::: overloaded dynamic method get invocation
jdk.dynalink.beans.OverloadedDynamicMethod#contains(SingleDynamicMethod)->boolean::: overloaded dynamic method contains
jdk.dynalink.beans.OverloadedDynamicMethod#isConstructor()->boolean::: overloaded dynamic method is constructor
jdk.dynalink.beans.OverloadedDynamicMethod#toString()->String::: overloaded dynamic method to string
jdk.dynalink.beans.OverloadedDynamicMethod#addMethod(SingleDynamicMethod)->void:::Add a method to this overloaded method's set.
jdk.dynalink.beans.OverloadedMethod#getInvoker()->MethodHandle::: overloaded method get invoker
jdk.dynalink.beans.SimpleDynamicMethod#isVarArgs()->boolean::: simple dynamic method is var args
jdk.dynalink.beans.SimpleDynamicMethod#getMethodType()->MethodType::: simple dynamic method get method type
jdk.dynalink.beans.SimpleDynamicMethod#getTarget(CallSiteDescriptor)->MethodHandle::: simple dynamic method get target
jdk.dynalink.beans.SimpleDynamicMethod#isConstructor()->boolean::: simple dynamic method is constructor
jdk.dynalink.beans.SingleDynamicMethod#isVarArgs()->boolean:::Returns true if this method is variable arity.
jdk.dynalink.beans.SingleDynamicMethod#getMethodType()->MethodType:::Returns this method's native type.
jdk.dynalink.beans.SingleDynamicMethod#getTarget(CallSiteDescriptor)->MethodHandle:::Given a specified call site descriptor, returns a method handle to this method's target
jdk.dynalink.beans.SingleDynamicMethod#getInvocation(CallSiteDescriptor, LinkerServices)->MethodHandle::: single dynamic method get invocation
jdk.dynalink.beans.SingleDynamicMethod#getMethodForExactParamTypes(String)->SingleDynamicMethod::: single dynamic method get method for exact param types
jdk.dynalink.beans.SingleDynamicMethod#contains(SingleDynamicMethod)->boolean::: single dynamic method contains
jdk.dynalink.beans.SingleDynamicMethod#getMethodNameWithSignature(MethodType, String, boolean)->String::: single dynamic method get method name with signature
jdk.dynalink.beans.SingleDynamicMethod#getInvocation(MethodHandle, MethodType, LinkerServices)->MethodHandle:::Given a method handle and a call site type, adapts the method handle to the call site type
jdk.dynalink.beans.SingleDynamicMethod#collectArguments(MethodHandle, int)->MethodHandle:::Creates a method handle out of the original target that will collect the varargs for the exact component type of the varArg array
jdk.dynalink.beans.StaticClass#forClass(Class)->StaticClass:::Retrieves the StaticClass instance for the specified class.
jdk.dynalink.beans.StaticClass#getRepresentedClass()->Class:::Returns the represented Java class.
jdk.dynalink.beans.StaticClass#toString()->String::: static class to string
jdk.dynalink.beans.StaticClassIntrospector#getInnerClassGetters()->Map::: static class introspector get inner class getters
jdk.dynalink.beans.StaticClassIntrospector#editMethodHandle(MethodHandle)->MethodHandle::: static class introspector edit method handle
jdk.dynalink.beans.StaticClassIntrospector#editStaticMethodHandle(MethodHandle)->MethodHandle::: static class introspector edit static method handle
jdk.dynalink.beans.StaticClassIntrospector#editConstructorMethodHandle(MethodHandle)->MethodHandle::: static class introspector edit constructor method handle
jdk.dynalink.beans.StaticClassLinker#getConstructorMethod(Class, String)->Object::: static class linker get constructor method
jdk.dynalink.beans.StaticClassLinker#getReadableStaticPropertyNames(Class)->Set::: static class linker get readable static property names
jdk.dynalink.beans.StaticClassLinker#getWritableStaticPropertyNames(Class)->Set::: static class linker get writable static property names
jdk.dynalink.beans.StaticClassLinker#getStaticMethodNames(Class)->Set::: static class linker get static method names
jdk.dynalink.beans.StaticClassLinker#getGuardedInvocation(LinkRequest, LinkerServices)->GuardedInvocation::: static class linker get guarded invocation
jdk.dynalink.beans.StaticClassLinker#canLinkType(Class)->boolean::: static class linker can link type

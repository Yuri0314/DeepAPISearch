AbstractJavaLinker#setPropertyGetter(String, MethodHandle, ValidationType):::Sets the specified method handle to be the property getter for the specified property:::new->SimpleDynamicMethod->setPropertyGetter
AbstractJavaLinker#createDynamicMethod(Iterable, Class, String):::Given one or more reflective methods or constructors, creates a dynamic method that represents them all:::dynMethod->foreach->createDynamicMethod->mergeMethods->return
AbstractJavaLinker#getDynamicMethod(String):::Returns a dynamic method of the specified name.:::return->getDynamicMethod
AccessibleMembersLookup#getAccessibleMethod(Method):::Returns an accessible method equivalent of a method.:::return->methods->new->MethodSignature->get
AccessibleMembersLookup.MethodSignature#equals(Object):::Compares this object to another object:::if->ms->return->equals->Arrays->equals->return
AccessibleMembersLookup.MethodSignature#hashCode():::Returns a hash code, consistent with the overridden #equals(Object).:::return->name->hashCode->Arrays->hashCode
ApplicableOverloadedMethods#getMethods():::Retrieves all the methods this object holds.:::return
ApplicableOverloadedMethods#findMaximallySpecificMethods():::Returns a list of all methods in this objects that are maximally specific.:::return->MaximallySpecific->getMaximallySpecificMethods
BeansLinker#getLinkerForClass(Class):::Returns a bean linker for a particular single class:::staticLinker->getStaticLinkerForClass->if->return->return->new->NoSuchMemberHandlerBindingLinker
BeansLinker#isDynamicMethod(Object):::Returns true if the object is a Java dynamic method (e.g., one obtained through a GET:METHOD operation on a Java object or StaticClass or through #getConstructorMethod(Class, String).:::return
BeansLinker#isDynamicConstructor(Object):::Returns true if the object is a Java constructor (obtained through #getConstructorMethod(Class, String)}.:::return->isConstructor
BeansLinker#getConstructorMethod(Class, String):::Return the dynamic method of constructor of the given class and the given signature:::return->StaticClassLinker->getConstructorMethod
BeansLinker#getReadableInstancePropertyNames(Class):::Returns a set of names of all readable instance properties of a class.:::linker->getStaticLinkerForClass->if->return->getReadablePropertyNames->return->Collections->emptySet
BeansLinker#getWritableInstancePropertyNames(Class):::Returns a set of names of all writable instance properties of a class.:::linker->getStaticLinkerForClass->if->return->getWritablePropertyNames->return->Collections->emptySet
BeansLinker#getInstanceMethodNames(Class):::Returns a set of names of all instance methods of a class.:::linker->getStaticLinkerForClass->if->return->getMethodNames->return->Collections->emptySet
BeansLinker#getReadableStaticPropertyNames(Class):::Returns a set of names of all readable static properties of a class.:::return->StaticClassLinker->getReadableStaticPropertyNames
BeansLinker#getWritableStaticPropertyNames(Class):::Returns a set of names of all writable static properties of a class.:::return->StaticClassLinker->getWritableStaticPropertyNames
BeansLinker#getStaticMethodNames(Class):::Returns a set of names of all static methods of a class.:::return->StaticClassLinker->getStaticMethodNames
CheckRestrictedPackage#isRestrictedClass(Class):::Returns true if the class is either not public, or it resides in a package with restricted access.:::if->Modifier->clazz->getModifiers->isPublic->return->name->clazz->getName->i->name->lastIndexOf->if->return->pkgName->name->substring->module->clazz->getModule->if->module->isExported->return->sm->System->getSecurityManager->if->return->try->AccessController->new->PrivilegedAction<Void>->doPrivileged->catch->return->finally->return
ClassString#getApplicables(List, LinkerServices, boolean):::Returns all methods that are applicable to actual parameter classes represented by this ClassString object.:::list->new->LinkedList<>->foreach->if->isApplicable->list->add->return
DynamicMethod#getInvocation(CallSiteDescriptor, LinkerServices):::Creates an invocation for the dynamic method:::
DynamicMethod#getMethodForExactParamTypes(String):::Returns a single dynamic method representing a single underlying Java method (possibly selected among several overloads) with formal parameter types exactly matching the passed signature.:::
DynamicMethod#contains(SingleDynamicMethod):::True if this dynamic method already contains a method with an identical signature as the passed in method.:::
DynamicMethod#isConstructor():::True if this method happens to be a constructor method.:::return
FacetIntrospector#getInnerClassGetters():::Returns getters for inner classes.:::
FacetIntrospector#getFields():::Returns the fields for the class facet.:::if->return->Collections->emptySet->fields->clazz->getFields->cfields->new->ArrayList<>->foreach->isStatic->Modifier->field->getModifiers->isStatic->if->field->getDeclaringClass->continue->if->isAccessible->cfields->add->return
FacetIntrospector#getMethods():::Returns all the methods in the facet.:::return->membersLookup->getMethods
FacetIntrospector#editMethodHandle(MethodHandle):::Returns an edited method handle:::
MaximallySpecific#getMaximallySpecificMethods(List, boolean):::Given a list of methods, returns a list of maximally specific methods.:::return->getMaximallySpecificSingleDynamicMethods
MaximallySpecific#getMaximallySpecificMethodHandles(List, boolean, Class[], LinkerServices):::Given a list of methods handles, returns a list of maximally specific methods, applying language-runtime specific conversion preferences.:::return->getMaximallySpecificMethods
MaximallySpecific#getMaximallySpecificSingleDynamicMethods(List, boolean, Class[], LinkerServices):::Given a list of methods, returns a list of maximally specific methods, applying language-runtime specific conversion preferences.:::return->getMaximallySpecificMethods
MissingMemberHandlerFactory#createMissingMemberHandler(LinkRequest, LinkerServices):::Returns a method handle suitable for implementing missing member behavior for a particular link request:::
OverloadedDynamicMethod#addMethod(SingleDynamicMethod):::Add a method to this overloaded method's set.:::methods->add
SingleDynamicMethod#isVarArgs():::Returns true if this method is variable arity.:::
SingleDynamicMethod#getMethodType():::Returns this method's native type.:::
SingleDynamicMethod#getTarget(CallSiteDescriptor):::Given a specified call site descriptor, returns a method handle to this method's target:::
SingleDynamicMethod#getInvocation(MethodHandle, MethodType, LinkerServices):::Given a method handle and a call site type, adapts the method handle to the call site type:::filteredTarget->linkerServices->filterInternalObjects->methodType->filteredTarget->type->paramsLen->methodType->parameterCount->varArgs->target->isVarargsCollector->fixTarget->filteredTarget->asFixedArity->fixParamsLen->argsLen->callSiteType->parameterCount->if->return->if->matchedMethod->if->MethodHandles->Array->methodType->parameterType->getComponentType->newInstance->insertArguments->else->return->createConvertingInvocation->if->return->varArgType->methodType->parameterType->if->callSiteLastArgType->callSiteType->parameterType->if->varArgType->isAssignableFrom->return->createConvertingInvocation->asVarargsCollector->varArgCollectingInvocation->collectArguments->createConvertingInvocation->isAssignableFromArray->callSiteLastArgType->isAssignableFrom->isCustomConvertible->linkerServices->canConvert->if->return->arrayConvertingInvocation->MethodHandles->linkerServices->getTypeConverter->filterArguments->createConvertingInvocation->canConvertArgToArray->MethodHandles->insertArguments->canConvertLastArgToArray->MethodHandles->MethodType->genericMethodType->parameterList->dropArguments->callSiteType->changeReturnType->asType->convertToArrayWhenPossible->MethodHandles->guardWithTest->if->return->MethodHandles->Guards->isInstance->createConvertingInvocation->guardWithTest->return->return->collectArguments->createConvertingInvocation
SingleDynamicMethod#collectArguments(MethodHandle, int):::Creates a method handle out of the original target that will collect the varargs for the exact component type of the varArg array:::methodType->target->type->fixParamsLen->methodType->parameterCount->arrayType->methodType->parameterType->return->target->asCollector
StaticClass#forClass(Class):::Retrieves the StaticClass instance for the specified class.:::return->staticClasses->get
StaticClass#getRepresentedClass():::Returns the represented Java class.:::return

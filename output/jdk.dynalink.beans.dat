AbstractJavaLinker#decapitalize(String)::: abstract java linker decapitalize:::if->str->isEmpty->return->c0->str->charAt->if->Character->isLowerCase->return->if->str->length->Character->str->charAt->isUpperCase->return->c->str->toCharArray->Character->toLowerCase->return->new->String
AbstractJavaLinker#createFacetIntrospector()::: abstract java linker create facet introspector:::
AbstractJavaLinker#getReadablePropertyNames()::: abstract java linker get readable property names:::return->getUnmodifiableKeys
AbstractJavaLinker#getWritablePropertyNames()::: abstract java linker get writable property names:::return->getUnmodifiableKeys
AbstractJavaLinker#getMethodNames()::: abstract java linker get method names:::return->getUnmodifiableKeys
AbstractJavaLinker#getUnmodifiableKeys(Map)::: abstract java linker get unmodifiable keys:::return->Collections->m->keySet->unmodifiableSet
AbstractJavaLinker#setPropertyGetter(String, SingleDynamicMethod, ValidationType):::Sets the specified dynamic method to be the property getter for the specified property:::propertyGetters->new->AnnotatedDynamicMethod->put
AbstractJavaLinker#setPropertyGetter(Method, int):::Sets the specified reflective method to be the property getter for the specified property.:::getter->getName->substring->decapitalize->getMostGenericGetter->createDynamicMethod->setPropertyGetter
AbstractJavaLinker#setPropertyGetter(String, MethodHandle, ValidationType):::Sets the specified method handle to be the property getter for the specified property:::new->SimpleDynamicMethod->setPropertyGetter
AbstractJavaLinker#addMember(String, AccessibleObject, Map)::: abstract java linker add member:::createDynamicMethod->addMember
AbstractJavaLinker#addMember(String, SingleDynamicMethod, Map)::: abstract java linker add member:::existingMethod->methodMap->get->newMethod->mergeMethods->if->methodMap->put
AbstractJavaLinker#createDynamicMethod(Iterable, Class, String):::Given one or more reflective methods or constructors, creates a dynamic method that represents them all:::dynMethod->foreach->createDynamicMethod->mergeMethods->return
AbstractJavaLinker#createDynamicMethod(AccessibleObject):::Given a reflective method or a constructor, creates a dynamic method that represents it:::if->m->isAnnotationPresent->return->new->CallerSensitiveDynamicMethod->mh->try->unreflectSafely->catch->return->new->CallerSensitiveDynamicMethod->finally->member->return->member->getDeclaringClass->member->getName->new->SimpleDynamicMethod
AbstractJavaLinker#unreflectSafely(AccessibleObject):::Unreflects a method handle from a Method or a Constructor using safe (zero-privilege) unreflection:::if->reflMethod->handle->unreflect->if->Modifier->reflMethod->getModifiers->isStatic->return->StaticClassIntrospector->editStaticMethodHandle->return->return->StaticClassIntrospector->unreflectConstructor->editConstructorMethodHandle
AbstractJavaLinker#mergeMethods(SingleDynamicMethod, DynamicMethod, Class, String)::: abstract java linker merge methods:::if->return->else->if->existing->contains->return->else->if->odm->new->OverloadedDynamicMethod->odm->addMethod->odm->addMethod->return->else->if->addMethod->return->throw->new->AssertionError
AbstractJavaLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: abstract java linker get guarded invocation:::callSiteDescriptor->request->getCallSiteDescriptor->missingMemberHandlerFactory->directLinkerServices->if->lswmmhf->else->gic->new->ComponentLinkRequest->getGuardedInvocationComponent->return->gic->getGuardedInvocation
AbstractJavaLinker.ComponentLinkRequest#getDescriptor()::: component link request get descriptor:::return->linkRequest->getCallSiteDescriptor
AbstractJavaLinker.ComponentLinkRequest#popNamespace()::: component link request pop namespace:::return->namespaces->namespaces->size->subList->new->ComponentLinkRequest
AbstractJavaLinker#getGuardedInvocationComponent(ComponentLinkRequest)::: abstract java linker get guarded invocation component:::if->isEmpty->return->ns->get->op->if->if->return->req->popNamespace->getPropertyGetter->else->if->return->req->popNamespace->getMethodGetter->else->if->return->req->popNamespace->getPropertySetter->return->req->popNamespace->getNextComponent
AbstractJavaLinker#getNextComponent(ComponentLinkRequest)::: abstract java linker get next component:::if->isEmpty->return->createNoSuchMemberHandler->gic->getGuardedInvocationComponent->if->return->return->req->popNamespace->getNextComponent
AbstractJavaLinker#createNoSuchMemberHandler(MissingMemberHandlerFactory, LinkRequest, LinkerServices)::: abstract java linker create no such member handler:::if->return->handler->missingMemberHandlerFactory->createMissingMemberHandler->if->return->type->linkRequest->getCallSiteDescriptor->getMethodType->return->getClassGuardedInvocationComponent
AbstractJavaLinker#pop(List)::: abstract java linker pop:::return->l->l->size->subList
AbstractJavaLinker#getClassGuard(CallSiteDescriptor)::: abstract java linker get class guard:::return->desc->getMethodType->getClassGuard
AbstractJavaLinker#getClassGuard(MethodType)::: abstract java linker get class guard:::return->Guards->asType
AbstractJavaLinker#getClassGuardedInvocationComponent(MethodHandle, MethodType)::: abstract java linker get class guarded invocation component:::return->getClassGuard->new->GuardedInvocationComponent
AbstractJavaLinker#getConstructorMethod(String)::: abstract java linker get constructor method:::
AbstractJavaLinker#getAssignableGuard(MethodType)::: abstract java linker get assignable guard:::return->Guards->asType
AbstractJavaLinker#createGuardedDynamicMethodInvocation(CallSiteDescriptor, LinkerServices, String, Map)::: abstract java linker create guarded dynamic method invocation:::inv->getDynamicMethodInvocation->return->callSiteDescriptor->getMethodType->getClassGuard->new->GuardedInvocation
AbstractJavaLinker#getDynamicMethodInvocation(CallSiteDescriptor, LinkerServices, String, Map)::: abstract java linker get dynamic method invocation:::dynaMethod->getDynamicMethod->return->dynaMethod->getInvocation
AbstractJavaLinker#getDynamicMethod(String, Map)::: abstract java linker get dynamic method:::dynaMethod->methodMap->get->return->getExplicitSignatureDynamicMethod
AbstractJavaLinker#getExplicitSignatureDynamicMethod(String, Map)::: abstract java linker get explicit signature dynamic method:::lastChar->fullName->length->if->fullName->charAt->return->openBrace->fullName->indexOf->if->return->name->fullName->substring->signature->fullName->substring->simpleNamedMethod->methodsMap->get->if->if->name->isEmpty->return->getConstructorMethod->return->return->simpleNamedMethod->getMethodForExactParamTypes
AbstractJavaLinker#getPropertySetter(ComponentLinkRequest)::: abstract java linker get property setter:::if->return->getUnnamedPropertySetter->return->getNamedPropertySetter
AbstractJavaLinker#getUnnamedPropertySetter(ComponentLinkRequest)::: abstract java linker get unnamed property setter:::callSiteDescriptor->req->getDescriptor->assertParameterCount->origType->callSiteDescriptor->getMethodType->type->origType->returnType->origType->changeReturnType->linkerServices->setterType->type->dropParameterTypes->boundGetter->MethodHandles->callSiteDescriptor->changeMethodType->insertArguments->typedGetter->linkerServices->type->changeReturnType->asType->invokeHandle->MethodHandles->exactInvoker->invokeHandleFolded->MethodHandles->type->parameterType->dropArguments->nextComponent->getNextComponent->fallbackFolded->if->MethodHandles->type->parameterList->dropArguments->type->insertParameterTypes->asType->else->MethodHandles->nextComponent->getGuardedInvocation->getInvocation->dropArguments->compositeSetter->MethodHandles->MethodHandles->guardWithTest->foldArguments->if->return->getClassGuardedInvocationComponent->return->nextComponent->getClassGuard->compose
AbstractJavaLinker#getNamedPropertySetter(ComponentLinkRequest)::: abstract java linker get named property setter:::callSiteDescriptor->req->getDescriptor->assertParameterCount->gi->toString->createGuardedDynamicMethodInvocation->if->return->new->GuardedInvocationComponent->return->getNextComponent
AbstractJavaLinker#getPropertyGetter(ComponentLinkRequest)::: abstract java linker get property getter:::if->return->getUnnamedPropertyGetter->return->getNamedPropertyGetter
AbstractJavaLinker#getUnnamedPropertyGetter(ComponentLinkRequest)::: abstract java linker get unnamed property getter:::callSiteDescriptor->req->getDescriptor->type->callSiteDescriptor->getMethodType->changeReturnType->assertParameterCount->linkerServices->typedGetter->linkerServices->type->changeReturnType->asType->callSiteBoundMethodGetter->MethodHandles->insertArguments->callSiteBoundInvoker->MethodHandles->filterArguments->invokeHandleTyped->linkerServices->MethodType->type->returnType->type->parameterType->methodType->asType->invokeHandleFolded->MethodHandles->type->parameterType->dropArguments->nextComponent->getNextComponent->fallbackFolded->if->MethodHandles->type->parameterList->dropArguments->type->insertParameterTypes->asType->else->nextInvocation->nextComponent->getGuardedInvocation->getInvocation->nextType->nextInvocation->type->MethodHandles->nextInvocation->nextType->changeReturnType->asType->dropArguments->compositeGetter->MethodHandles->MethodHandles->guardWithTest->foldArguments->if->return->getClassGuardedInvocationComponent->return->nextComponent->getClassGuard->compose
AbstractJavaLinker#getNamedPropertyGetter(ComponentLinkRequest)::: abstract java linker get named property getter:::callSiteDescriptor->req->getDescriptor->assertParameterCount->annGetter->propertyGetters->toString->get->if->return->getNextComponent->getter->annGetter->getInvocation->validationType->return->callSiteDescriptor->getMethodType->getGuard->new->GuardedInvocationComponent
AbstractJavaLinker#getGuard(ValidationType, MethodType)::: abstract java linker get guard:::switch->return->getClassGuard->return->getAssignableGuard->return->Guards->isArray->return->throw->new->AssertionError
AbstractJavaLinker#getMethodGetter(ComponentLinkRequest)::: abstract java linker get method getter:::if->return->getUnnamedMethodGetter->return->getNamedMethodGetter
AbstractJavaLinker#getMethodGetterType(ComponentLinkRequest)::: abstract java linker get method getter type:::return->req->getDescriptor->getMethodType->changeReturnType
AbstractJavaLinker#getUnnamedMethodGetter(ComponentLinkRequest)::: abstract java linker get unnamed method getter:::req->getDescriptor->assertParameterCount->nextComponent->getNextComponent->linkerServices->type->getMethodGetterType->if->return->linkerServices->asType->getClassGuardedInvocationComponent->typedGetter->linkerServices->asType->returnMethodHandle->linkerServices->MethodHandles->type->parameterList->dropArguments->type->insertParameterTypes->asType->nextComponentInvocation->nextComponent->getGuardedInvocation->getInvocation->nextCombinedInvocation->MethodHandles->dropArguments->compositeGetter->MethodHandles->MethodHandles->nextCombinedInvocation->nextCombinedInvocation->type->changeReturnType->asType->guardWithTest->foldArguments->return->nextComponent->getClassGuard->compose
AbstractJavaLinker#getNamedMethodGetter(ComponentLinkRequest)::: abstract java linker get named method getter:::req->getDescriptor->assertParameterCount->method->toString->getDynamicMethod->if->return->getNextComponent->type->getMethodGetterType->return->MethodHandles->MethodHandles->constant->type->parameterType->dropArguments->asType->getClassGuardedInvocationComponent
AbstractJavaLinker.MethodPair#guardWithTest(MethodHandle)::: method pair guard with test:::return->MethodHandles->guardWithTest
AbstractJavaLinker#matchReturnTypes(MethodHandle, MethodHandle)::: abstract java linker match return types:::type1->m1->type->type2->m2->type->commonRetType->InternalTypeUtilities->type1->returnType->type2->returnType->getCommonLosslessConversionType->return->m1->type1->changeReturnType->asType->m2->type2->changeReturnType->asType->new->MethodPair
AbstractJavaLinker#assertParameterCount(CallSiteDescriptor, int)::: abstract java linker assert parameter count:::if->descriptor->getMethodType->parameterCount->throw->descriptor->getOperation->new->BootstrapMethodError
AbstractJavaLinker#getPropertyGetterHandle(Object)::: abstract java linker get property getter handle:::return->propertyGetters->String->valueOf->get
AbstractJavaLinker#getPropertySetterHandle(CallSiteDescriptor, LinkerServices, Object)::: abstract java linker get property setter handle:::return->String->valueOf->getDynamicMethodInvocation
AbstractJavaLinker#getDynamicMethod(Object)::: abstract java linker get dynamic method:::return->String->valueOf->getDynamicMethod
AbstractJavaLinker#getDynamicMethod(String):::Returns a dynamic method of the specified name.:::return->getDynamicMethod
AbstractJavaLinker#getMostGenericGetter(Method):::Find the most generic superclass that declares this getter:::return->getter->getName->getter->getReturnType->getter->getDeclaringClass->getMostGenericGetter
AbstractJavaLinker#getMostGenericGetter(String, Class, Class)::: abstract java linker get most generic getter:::if->return->foreach->declaringClass->getInterfaces->itfGetter->getMostGenericGetter->if->return->superGetter->declaringClass->getSuperclass->getMostGenericGetter->if->return->if->CheckRestrictedPackage->isRestrictedClass->try->return->declaringClass->getMethod->catch->finally->return
AbstractJavaLinker.AnnotatedDynamicMethod#getInvocation(ComponentLinkRequest)::: annotated dynamic method get invocation:::return->method->req->getDescriptor->getInvocation
AbstractJavaLinker.AnnotatedDynamicMethod#getTarget(CallSiteDescriptor, LinkerServices)::: annotated dynamic method get target:::inv->linkerServices->method->getTarget->filterInternalObjects->return
AccessibleMembersLookup#getAccessibleMethod(Method):::Returns an accessible method equivalent of a method.:::return->methods->new->MethodSignature->get
AccessibleMembersLookup#getMethods()::: accessible members lookup get methods:::return->methods->values
AccessibleMembersLookup#getInnerClasses()::: accessible members lookup get inner classes:::return->innerClasses->new->Class<?>Arr->toArray
AccessibleMembersLookup.MethodSignature#equals(Object):::Compares this object to another object:::if->ms->return->equals->Arrays->equals->return
AccessibleMembersLookup.MethodSignature#hashCode():::Returns a hash code, consistent with the overridden #equals(Object).:::return->name->hashCode->Arrays->hashCode
AccessibleMembersLookup.MethodSignature#toString()::: method signature to string:::b->new->StringBuilder->b->append->append->append->if->b->getCanonicalName->append->for->i->return->b->append->toString
AccessibleMembersLookup#lookupAccessibleMembers(Class)::: accessible members lookup lookup accessible members:::searchSuperTypes->if->CheckRestrictedPackage->isRestrictedClass->foreach->clazz->getMethods->isStatic->Modifier->method->getModifiers->isStatic->if->sig->new->MethodSignature->if->methods->containsKey->declaringClass->method->getDeclaringClass->if->CheckRestrictedPackage->isRestrictedClass->else->if->methods->put->foreach->clazz->getClasses->innerClasses->add->else->if->interfaces->clazz->getInterfaces->for->i->superclass->clazz->getSuperclass->if->lookupAccessibleMembers
ApplicableOverloadedMethods#getMethods():::Retrieves all the methods this object holds.:::return
ApplicableOverloadedMethods#findMaximallySpecificMethods():::Returns a list of all methods in this objects that are maximally specific.:::return->MaximallySpecific->getMaximallySpecificMethods
ApplicableOverloadedMethods.ApplicabilityTest#isApplicable(MethodType, SingleDynamicMethod)::: applicability test is applicable:::
BeanIntrospector#getInnerClassGetters()::: bean introspector get inner class getters:::return->Collections->emptyMap
BeanIntrospector#editMethodHandle(MethodHandle)::: bean introspector edit method handle:::return
BeanLinker#canLinkType(Class)::: bean linker can link type:::return
BeanLinker#createFacetIntrospector()::: bean linker create facet introspector:::return->new->BeanIntrospector
BeanLinker#getGuardedInvocationComponent(ComponentLinkRequest)::: bean linker get guarded invocation component:::if->isEmpty->return->ns->get->if->op->if->return->req->popNamespace->getElementGetter->else->if->return->req->popNamespace->getElementSetter->else->if->return->req->popNamespace->getElementRemover->return->super->getGuardedInvocationComponent
BeanLinker#getConstructorMethod(String)::: bean linker get constructor method:::return
BeanLinker#dropObjectArguments(MethodHandle, int)::: bean linker drop object arguments:::return->MethodHandles->Collections->nCopies->dropArguments
BeanLinker#getElementGetter(ComponentLinkRequest)::: bean linker get element getter:::callSiteDescriptor->req->getDescriptor->name->isFixedKey->assertParameterCount->linkerServices->callSiteType->callSiteDescriptor->getMethodType->nextComponent->getNextComponent->gicact->MethodHandles->arrayElementGetter->guardedInvocationComponentAndCollectionType->if->return->typedName->getTypedName->if->return->return->new->Binder->guardComponentWithRangeCheck
BeanLinker#guardedInvocationComponentAndCollectionType(MethodType, LinkerServices, Function, MethodHandle>, MethodHandle, MethodHandle)::: bean linker guarded invocation component and collection type:::declaredType->callSiteType->parameterType->if->declaredType->isArray->return->arrayMethod->apply->createInternalFilteredGuardedInvocationComponent->new->GuardedInvocationComponentAndCollectionType->else->if->isAssignableFrom->return->createInternalFilteredGuardedInvocationComponent->new->GuardedInvocationComponentAndCollectionType->else->if->isAssignableFrom->return->createInternalFilteredGuardedInvocationComponent->new->GuardedInvocationComponentAndCollectionType->else->if->clazz->isArray->return->linkerServices->arrayMethod->apply->filterInternalObjects->getClassGuardedInvocationComponent->new->GuardedInvocationComponentAndCollectionType->else->if->isAssignableFrom->return->Guards->asType->createInternalFilteredGuardedInvocationComponent->new->GuardedInvocationComponentAndCollectionType->else->if->isAssignableFrom->return->Guards->asType->createInternalFilteredGuardedInvocationComponent->new->GuardedInvocationComponentAndCollectionType->return
BeanLinker#getTypedName(Object, boolean, LinkerServices)::: bean linker get typed name:::if->integer->convertKeyToInteger->if->integer->intValue->return->return->return
BeanLinker#guardComponentWithRangeCheck(GuardedInvocationComponentAndCollectionType, MethodType, GuardedInvocationComponent, Binder, MethodHandle)::: bean linker guard component with range check:::checkGuard->switch->binder->convertArgToNumber->break->filterInternalObjects->break->binder->convertArgToNumber->break->throw->new->AssertionError->finalNextComponent->if->else->createGuardedInvocationComponentAsType->gic->gi->gic->getGuardedInvocation->matchedInvocations->binder->gi->getInvocation->bind->finalNextComponent->getGuardedInvocation->getInvocation->matchReturnTypes->return->finalNextComponent->matchedInvocations->binder->bindTest->guardWithTest->gi->getGuard->gic->getValidatorClass->gic->getValidationType->compose
BeanLinker#createInternalFilteredGuardedInvocationComponent(MethodHandle, LinkerServices)::: bean linker create internal filtered guarded invocation component:::return->linkerServices->filterInternalObjects->new->GuardedInvocationComponent
BeanLinker#createGuardedInvocationComponentAsType(MethodHandle, MethodType, LinkerServices)::: bean linker create guarded invocation component as type:::return->linkerServices->asType->new->GuardedInvocationComponent
BeanLinker#createInternalFilteredGuardedInvocationComponent(MethodHandle, MethodHandle, Class, ValidationType, LinkerServices)::: bean linker create internal filtered guarded invocation component:::return->linkerServices->filterInternalObjects->new->GuardedInvocationComponent
BeanLinker#convertKeyToInteger(Object, LinkerServices)::: bean linker convert key to integer:::if->return->n->if->else->keyClass->fixedKey->getClass->if->linkerServices->canConvert->val->try->linkerServices->getTypeConverter->invoke->catch->throw->throw->new->RuntimeException->finally->if->return->else->if->try->return->Integer->valueOf->catch->return->finally->else->return->if->return->intIndex->n->intValue->doubleValue->n->doubleValue->if->Double->isInfinite->return->return
BeanLinker.Binder#bind(MethodHandle)::: binder bind:::return->linkerServices->asTypeLosslessReturn->bindToFixedKey
BeanLinker.Binder#bindTest(MethodHandle)::: binder bind test:::return->Guards->asType->bindToFixedKey
BeanLinker.Binder#convertArgToNumber(MethodHandle)::: binder convert arg to number:::sourceType->methodType->parameterType->if->TypeUtilities->isMethodInvocationConvertible->return->else->if->linkerServices->canConvert->converter->linkerServices->getTypeConverter->return->MethodHandles->converter->converter->type->mh->type->parameterType->changeReturnType->asType->filterArguments->return
BeanLinker.Binder#bindToFixedKey(MethodHandle)::: binder bind to fixed key:::return->MethodHandles->insertArguments
BeanLinker#findRangeCheck(Class)::: bean linker find range check:::return->Lookup->MethodHandles->lookup->findOwnStatic
BeanLinker#rangeCheck(Object, Object)::: bean linker range check:::if->return->n->intIndex->n->intValue->if->n->doubleValue->return->return->Array->getLength
BeanLinker#rangeCheck(List, Object)::: bean linker range check:::if->return->n->intIndex->n->intValue->if->n->doubleValue->return->return->list->size
BeanLinker#noOp()::: bean linker no op:::
BeanLinker#getElementSetter(ComponentLinkRequest)::: bean linker get element setter:::callSiteDescriptor->req->getDescriptor->name->isFixedKey->assertParameterCount->linkerServices->callSiteType->callSiteDescriptor->getMethodType->gicact->MethodHandles->arrayElementSetter->guardedInvocationComponentAndCollectionType->if->return->getNextComponent->isMap->nextComponent->getNextComponent->typedName->getTypedName->if->return->gic->gi->gic->getGuardedInvocation->binder->new->Binder->invocation->gi->getInvocation->if->return->gic->binder->bind->replaceInvocation->return->guardComponentWithRangeCheck
BeanLinker#getElementRemover(ComponentLinkRequest)::: bean linker get element remover:::callSiteDescriptor->req->getDescriptor->name->isFixedKey->assertParameterCount->linkerServices->callSiteType->callSiteDescriptor->getMethodType->nextComponent->getNextComponent->gicact->guardedInvocationComponentAndCollectionType->if->return->typedName->getTypedName->if->return->return->new->Binder->guardComponentWithRangeCheck
BeanLinker#assertParameterCount(CallSiteDescriptor, int)::: bean linker assert parameter count:::if->descriptor->getMethodType->parameterCount->throw->descriptor->getOperation->new->BootstrapMethodError
BeansLinker#getLinkerForClass(Class):::Returns a bean linker for a particular single class:::staticLinker->getStaticLinkerForClass->if->return->return->new->NoSuchMemberHandlerBindingLinker
BeansLinker.NoSuchMemberHandlerBindingLinker#canLinkType(Class)::: no such member handler binding linker can link type:::return->linker->canLinkType
BeansLinker.NoSuchMemberHandlerBindingLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: no such member handler binding linker get guarded invocation:::return->linker->LinkerServicesWithMissingMemberHandlerFactory->get->getGuardedInvocation
BeansLinker#getStaticLinkerForClass(Class)::: beans linker get static linker for class:::return->linkers->get
BeansLinker#isDynamicMethod(Object):::Returns true if the object is a Java dynamic method (e.g., one obtained through a GET:METHOD operation on a Java object or StaticClass or through #getConstructorMethod(Class, String).:::return
BeansLinker#isDynamicConstructor(Object):::Returns true if the object is a Java constructor (obtained through #getConstructorMethod(Class, String)}.:::return->isConstructor
BeansLinker#getConstructorMethod(Class, String):::Return the dynamic method of constructor of the given class and the given signature:::return->StaticClassLinker->getConstructorMethod
BeansLinker#getReadableInstancePropertyNames(Class):::Returns a set of names of all readable instance properties of a class.:::linker->getStaticLinkerForClass->if->return->getReadablePropertyNames->return->Collections->emptySet
BeansLinker#getWritableInstancePropertyNames(Class):::Returns a set of names of all writable instance properties of a class.:::linker->getStaticLinkerForClass->if->return->getWritablePropertyNames->return->Collections->emptySet
BeansLinker#getInstanceMethodNames(Class):::Returns a set of names of all instance methods of a class.:::linker->getStaticLinkerForClass->if->return->getMethodNames->return->Collections->emptySet
BeansLinker#getReadableStaticPropertyNames(Class):::Returns a set of names of all readable static properties of a class.:::return->StaticClassLinker->getReadableStaticPropertyNames
BeansLinker#getWritableStaticPropertyNames(Class):::Returns a set of names of all writable static properties of a class.:::return->StaticClassLinker->getWritableStaticPropertyNames
BeansLinker#getStaticMethodNames(Class):::Returns a set of names of all static methods of a class.:::return->StaticClassLinker->getStaticMethodNames
BeansLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: beans linker get guarded invocation:::receiver->request->getReceiver->if->return->return->receiver->getClass->getLinkerForClass->LinkerServicesWithMissingMemberHandlerFactory->get->getGuardedInvocation
CallerSensitiveDynamicMethod#getName(AccessibleObject)::: caller sensitive dynamic method get name:::m->constructor->return->getMethodType->m->getName->m->getDeclaringClass->m->getName->getClassAndMethodName->getMethodNameWithSignature
CallerSensitiveDynamicMethod#getMethodType()::: caller sensitive dynamic method get method type:::return
CallerSensitiveDynamicMethod#getMethodType(AccessibleObject)::: caller sensitive dynamic method get method type:::isMethod->rtype->getReturnType->getDeclaringClass->ptypes->getParameterTypes->getParameterTypes->type->MethodType->methodType->m->return->type->Modifier->m->getModifiers->isStatic->m->getDeclaringClass->insertParameterTypes
CallerSensitiveDynamicMethod#isVarArgs()::: caller sensitive dynamic method is var args:::return->isVarArgs->isVarArgs
CallerSensitiveDynamicMethod#getTarget(CallSiteDescriptor)::: caller sensitive dynamic method get target:::lookup->AccessController->desc->getLookup->doPrivileged->if->mh->unreflect->if->Modifier->getModifiers->isStatic->return->StaticClassIntrospector->editStaticMethodHandle->return->return->StaticClassIntrospector->unreflectConstructor->editConstructorMethodHandle
CallerSensitiveDynamicMethod#isConstructor()::: caller sensitive dynamic method is constructor:::return
CallerSensitiveDynamicMethod#unreflect(MethodHandles.Lookup, Method)::: caller sensitive dynamic method unreflect:::return->Lookup->unreflect
CallerSensitiveDynamicMethod#unreflectConstructor(MethodHandles.Lookup, Constructor)::: caller sensitive dynamic method unreflect constructor:::return->Lookup->unreflectConstructor
CheckRestrictedPackage#isRestrictedClass(Class):::Returns true if the class is either not public, or it resides in a package with restricted access.:::if->Modifier->clazz->getModifiers->isPublic->return->name->clazz->getName->i->name->lastIndexOf->if->return->pkgName->name->substring->module->clazz->getModule->if->module->isExported->return->sm->System->getSecurityManager->if->return->try->AccessController->new->PrivilegedAction<Void>->doPrivileged->catch->return->finally->return
ClassString#equals(Object)::: class string equals:::if->return->otherClasses->if->return->for->i->return
ClassString#hashCode()::: class string hash code:::if->h->for->i->return
ClassString#toString()::: class string to string:::return->Arrays->toString
ClassString#isVisibleFrom(ClassLoader)::: class string is visible from:::return->AccessController->new->PrivilegedAction<Boolean>->doPrivileged
ClassString#getMaximallySpecifics(List, LinkerServices, boolean)::: class string get maximally specifics:::return->MaximallySpecific->getApplicables->getMaximallySpecificMethodHandles
ClassString#getApplicables(List, LinkerServices, boolean):::Returns all methods that are applicable to actual parameter classes represented by this ClassString object.:::list->new->LinkedList<>->foreach->if->isApplicable->list->add->return
ClassString#isApplicable(MethodHandle, LinkerServices, boolean):::Returns true if the supplied method is applicable to actual parameter classes represented by this ClassString object.:::formalTypes->method->type->parameterArray->cl->fl->if->if->return->else->if->return->for->i->if->varArgType->getComponentType->for->i->return
ClassString#canConvert(LinkerServices, Class, Class)::: class string can convert:::if->return->to->isPrimitive->return->TypeUtilities->isMethodInvocationConvertible->ls->canConvert
DynamicMethod#getName()::: dynamic method get name:::return
DynamicMethod#getInvocation(CallSiteDescriptor, LinkerServices):::Creates an invocation for the dynamic method:::
DynamicMethod#getMethodForExactParamTypes(String):::Returns a single dynamic method representing a single underlying Java method (possibly selected among several overloads) with formal parameter types exactly matching the passed signature.:::
DynamicMethod#contains(SingleDynamicMethod):::True if this dynamic method already contains a method with an identical signature as the passed in method.:::
DynamicMethod#getClassAndMethodName(Class, String)::: dynamic method get class and method name:::clazzName->clazz->getCanonicalName->return->clazz->getName
DynamicMethod#toString()::: dynamic method to string:::return->getClass->getName->getName
DynamicMethod#isConstructor():::True if this method happens to be a constructor method.:::return
DynamicMethodLinker#canLinkType(Class)::: dynamic method linker can link type:::return->isAssignableFrom
DynamicMethodLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: dynamic method linker get guarded invocation:::receiver->linkRequest->getReceiver->if->return->dynMethod->constructor->dynMethod->isConstructor->invocation->desc->linkRequest->getCallSiteDescriptor->op->NamedOperation->desc->getOperation->getBaseOperation->if->dynMethod->desc->desc->getMethodType->dropParameterTypes->changeMethodType->getInvocation->else->if->ctorInvocation->dynMethod->getInvocation->if->return->MethodHandles->insertArguments->else->return->if->return->MethodHandles->desc->getMethodType->parameterType->dropArguments->Guards->getIdentityGuard->new->GuardedInvocation->return
FacetIntrospector#getInnerClassGetters():::Returns getters for inner classes.:::
FacetIntrospector#getFields():::Returns the fields for the class facet.:::if->return->Collections->emptySet->fields->clazz->getFields->cfields->new->ArrayList<>->foreach->isStatic->Modifier->field->getModifiers->isStatic->if->field->getDeclaringClass->continue->if->isAccessible->cfields->add->return
FacetIntrospector#isAccessible(Member)::: facet introspector is accessible:::declaring->m->getDeclaringClass->return->CheckRestrictedPackage->isRestrictedClass
FacetIntrospector#getMethods():::Returns all the methods in the facet.:::return->membersLookup->getMethods
FacetIntrospector#unreflectGetter(Field)::: facet introspector unreflect getter:::return->unreflectGetter->editMethodHandle
FacetIntrospector#unreflectSetter(Field)::: facet introspector unreflect setter:::return->unreflectSetter->editMethodHandle
FacetIntrospector#editMethodHandle(MethodHandle):::Returns an edited method handle:::
GuardedInvocationComponent#replaceInvocation(MethodHandle)::: guarded invocation component replace invocation:::return->guardedInvocation->getGuard->replaceInvocation
GuardedInvocationComponent#replaceInvocation(MethodHandle, MethodHandle)::: guarded invocation component replace invocation:::return->guardedInvocation->replaceMethods->new->GuardedInvocationComponent
GuardedInvocationComponent#getGuardedInvocation()::: guarded invocation component get guarded invocation:::return
GuardedInvocationComponent#getValidatorClass()::: guarded invocation component get validator class:::return
GuardedInvocationComponent#getValidationType()::: guarded invocation component get validation type:::return
GuardedInvocationComponent#compose(MethodHandle, MethodHandle, Class, ValidationType)::: guarded invocation component compose:::compositeValidator->validator->new->Validator->compose->compositeGuard->guardedInvocation->getGuard->return->new->GuardedInvocationComponent
GuardedInvocationComponent.Validator#compose(Validator)::: validator compose:::if->return->switch->return->switch->if->isAssignableFrom->return->else->if->other->isAssignableFrom->return->break->if->isAssignableFrom->return->break->if->validatorClass->isArray->return->break->throw->new->AssertionError->break->switch->if->other->isAssignableFrom->return->break->if->return->break->if->validatorClass->isArray->return->break->throw->new->AssertionError->break->switch->if->isArray->return->break->return->throw->new->AssertionError->break->throw->new->AssertionError->throw->new->AssertionError
GuardedInvocationComponent.Validator#isAssignableFrom(Validator)::: validator is assignable from:::return->validatorClass->isAssignableFrom
GuardedInvocationComponent.Validator#toString()::: validator to string:::return->validatorClass->getName
LinkerServicesWithMissingMemberHandlerFactory#get(LinkerServices, MissingMemberHandlerFactory)::: linker services with missing member handler factory get:::if->return->return->new->LinkerServicesWithMissingMemberHandlerFactory
LinkerServicesWithMissingMemberHandlerFactory#asType(MethodHandle, MethodType)::: linker services with missing member handler factory as type:::return->linkerServices->asType
LinkerServicesWithMissingMemberHandlerFactory#getTypeConverter(Class, Class)::: linker services with missing member handler factory get type converter:::return->linkerServices->getTypeConverter
LinkerServicesWithMissingMemberHandlerFactory#canConvert(Class, Class)::: linker services with missing member handler factory can convert:::return->linkerServices->canConvert
LinkerServicesWithMissingMemberHandlerFactory#getGuardedInvocation(LinkRequest)::: linker services with missing member handler factory get guarded invocation:::return->linkerServices->getGuardedInvocation
LinkerServicesWithMissingMemberHandlerFactory#compareConversion(Class, Class, Class)::: linker services with missing member handler factory compare conversion:::return->linkerServices->compareConversion
LinkerServicesWithMissingMemberHandlerFactory#filterInternalObjects(MethodHandle)::: linker services with missing member handler factory filter internal objects:::return->linkerServices->filterInternalObjects
LinkerServicesWithMissingMemberHandlerFactory#getWithLookup(Supplier, SecureLookupSupplier)::: linker services with missing member handler factory get with lookup:::return->linkerServices->getWithLookup
MaximallySpecific#getMaximallySpecificMethods(List, boolean):::Given a list of methods, returns a list of maximally specific methods.:::return->getMaximallySpecificSingleDynamicMethods
MaximallySpecific.MethodTypeGetter#getMethodType(T)::: method type getter get method type:::
MaximallySpecific#getMaximallySpecificMethodHandles(List, boolean, Class[], LinkerServices):::Given a list of methods handles, returns a list of maximally specific methods, applying language-runtime specific conversion preferences.:::return->getMaximallySpecificMethods
MaximallySpecific#getMaximallySpecificSingleDynamicMethods(List, boolean, Class[], LinkerServices):::Given a list of methods, returns a list of maximally specific methods, applying language-runtime specific conversion preferences.:::return->getMaximallySpecificMethods
MaximallySpecific#getMaximallySpecificMethods(List, boolean, Class[], LinkerServices, MethodTypeGetter):::Given a list of methods, returns a list of maximally specific methods, applying language-runtime specific conversion preferences.:::if->methods->size->return->maximals->new->LinkedList<>->foreach->methodType->methodTypeGetter->getMethodType->lessSpecific->for->maximal->maximals->iterator->maximal->hasNext->if->maximals->addLast->return
MaximallySpecific#isMoreSpecific(MethodType, MethodType, boolean, Class[], LinkerServices)::: maximally specific is more specific:::pc1->t1->parameterCount->pc2->t2->parameterCount->maxPc->Math->Math->max->max->t1MoreSpecific->t2MoreSpecific->for->i->if->return->else->if->return->return
MaximallySpecific#compare(Class, Class, Class[], int, LinkerServices)::: maximally specific compare:::if->c->cmp->compareConversion->if->return->if->TypeUtilities->isSubtype->return->if->TypeUtilities->isSubtype->return->return
MaximallySpecific#getParameterClass(MethodType, int, int, boolean)::: maximally specific get parameter class:::return->t->parameterType->getComponentType->t->parameterType
MissingMemberHandlerFactory#createMissingMemberHandler(LinkRequest, LinkerServices):::Returns a method handle suitable for implementing missing member behavior for a particular link request:::
OverloadedDynamicMethod#getMethodForExactParamTypes(String)::: overloaded dynamic method get method for exact param types:::matchingMethods->new->LinkedList<>->foreach->matchingMethod->method->getMethodForExactParamTypes->if->matchingMethods->add->switch->matchingMethods->size->return->return->matchingMethods->getFirst->throw->getName->new->BootstrapMethodError
OverloadedDynamicMethod#getInvocation(CallSiteDescriptor, LinkerServices)::: overloaded dynamic method get invocation:::callSiteType->callSiteDescriptor->getMethodType->subtypingApplicables->getApplicables->methodInvocationApplicables->getApplicables->variableArityApplicables->getApplicables->maximallySpecifics->subtypingApplicables->findMaximallySpecificMethods->if->maximallySpecifics->isEmpty->methodInvocationApplicables->findMaximallySpecificMethods->if->maximallySpecifics->isEmpty->variableArityApplicables->findMaximallySpecificMethods->invokables->methods->clone->invokables->subtypingApplicables->getMethods->removeAll->invokables->methodInvocationApplicables->getMethods->removeAll->invokables->variableArityApplicables->getMethods->removeAll->for->it->invokables->iterator->it->hasNext->if->invokables->isEmpty->maximallySpecifics->size->throw->new->BootstrapMethodError->invokables->addAll->switch->invokables->size->return->return->invokables->iterator->next->getInvocation->methodHandles->invokables->size->new->ArrayList<>->foreach->methodHandles->method->getTarget->add->return->getCallSiteClassLoader->new->OverloadedMethod->getInvoker
OverloadedDynamicMethod#getCallSiteClassLoader(CallSiteDescriptor)::: overloaded dynamic method get call site class loader:::return->AccessController->new->PrivilegedAction<ClassLoader>->doPrivileged
OverloadedDynamicMethod#contains(SingleDynamicMethod)::: overloaded dynamic method contains:::foreach->if->method->contains->return->return
OverloadedDynamicMethod#isConstructor()::: overloaded dynamic method is constructor:::return->methods->getFirst->isConstructor
OverloadedDynamicMethod#toString()::: overloaded dynamic method to string:::names->methods->size->new->ArrayList<>->len->foreach->name->m->getName->name->length->names->add->collator->Collator->getInstance->collator->setStrength->Collections->sort->className->getClass->getName->totalLength->className->length->names->size->b->new->StringBuilder->b->append->append->append->foreach->b->append->append->append->b->append->return->b->toString
OverloadedDynamicMethod#isApplicableDynamically(LinkerServices, MethodType, SingleDynamicMethod)::: overloaded dynamic method is applicable dynamically:::methodType->m->getMethodType->varArgs->m->isVarArgs->fixedArgLen->methodType->parameterCount->callSiteArgLen->callSiteType->parameterCount->if->if->return->else->if->return->for->i->if->return->varArgArrayType->methodType->parameterType->varArgType->varArgArrayType->getComponentType->if->callSiteArgType->callSiteType->parameterType->return->isApplicableDynamically->isApplicableDynamically->for->i->return
OverloadedDynamicMethod#isApplicableDynamically(LinkerServices, Class, Class)::: overloaded dynamic method is applicable dynamically:::return->isPotentiallyConvertible->linkerServices->canConvert
OverloadedDynamicMethod#getApplicables(MethodType, ApplicabilityTest)::: overloaded dynamic method get applicables:::return->new->ApplicableOverloadedMethods
OverloadedDynamicMethod#addMethod(SingleDynamicMethod):::Add a method to this overloaded method's set.:::methods->add
OverloadedDynamicMethod#constructorFlagConsistent(SingleDynamicMethod)::: overloaded dynamic method constructor flag consistent:::return->methods->isEmpty->methods->getFirst->isConstructor->method->isConstructor
OverloadedDynamicMethod#isPotentiallyConvertible(Class, Class):::Determines whether one type can be potentially converted to another type at runtime:::if->InternalTypeUtilities->areAssignable->return->if->callSiteType->isPrimitive->return->methodType->isPrimitive->isAssignableFromBoxedPrimitive->if->methodType->isPrimitive->return->isAssignableFromBoxedPrimitive->return
OverloadedDynamicMethod#createPrimitiveWrapperTypes()::: overloaded dynamic method create primitive wrapper types:::classes->new->IdentityHashMap<>->addClassHierarchy->addClassHierarchy->addClassHierarchy->addClassHierarchy->addClassHierarchy->addClassHierarchy->addClassHierarchy->addClassHierarchy->return->classes->keySet
OverloadedDynamicMethod#addClassHierarchy(Map, Class>, Class)::: overloaded dynamic method add class hierarchy:::if->return->map->put->clazz->getSuperclass->addClassHierarchy->foreach->clazz->getInterfaces->addClassHierarchy
OverloadedDynamicMethod#isAssignableFromBoxedPrimitive(Class):::Returns true if the class can be assigned from any boxed primitive.:::return->PRIMITIVE_WRAPPER_TYPES->contains
OverloadedMethod#getInvoker()::: overloaded method get invoker:::return
OverloadedMethod#selectMethod(Object[])::: overloaded method select method:::argTypes->new->Class<?>Arr->for->i->classString->new->ClassString->method->argTypesToMethods->get->if->methods->classString->getMaximallySpecifics->if->methods->isEmpty->classString->getMaximallySpecifics->switch->methods->size->getNoSuchMethodThrower->break->fmethods->linkerServices->SingleDynamicMethod->fmethods->get->getInvocation->getWithLookup->break->getAmbiguousMethodThrower->break->if->classString->isVisibleFrom->argTypesToMethods->put->return
OverloadedMethod#getNoSuchMethodThrower(Class[])::: overloaded method get no such method thrower:::return->MethodHandles->insertArguments->adaptThrower
OverloadedMethod#throwNoSuchMethod(Class[])::: overloaded method throw no such method:::if->varArgMethods->isEmpty->throw->getSignatureList->parent->getName->argTypesString->new->NoSuchMethodException->throw->getSignatureList->getSignatureList->parent->getName->argTypesString->new->NoSuchMethodException
OverloadedMethod#getAmbiguousMethodThrower(Class[], List)::: overloaded method get ambiguous method thrower:::return->MethodHandles->insertArguments->adaptThrower
OverloadedMethod#adaptThrower(MethodHandle)::: overloaded method adapt thrower:::return->MethodHandles->callSiteType->parameterList->dropArguments->asType
OverloadedMethod#throwAmbiguousMethod(Class[], List)::: overloaded method throw ambiguous method:::arity->methods->get->isVarargsCollector->throw->getSignatureList->parent->getName->argTypesString->new->NoSuchMethodException
OverloadedMethod#argTypesString(Class[])::: overloaded method arg types string:::b->new->StringBuilder->append->appendTypes->return->b->append->toString
OverloadedMethod#getSignatureList(List)::: overloaded method get signature list:::b->new->StringBuilder->append->it->methods->iterator->if->it->hasNext->it->next->appendSig->while->it->hasNext->b->append->it->next->appendSig->return->b->append->toString
OverloadedMethod#appendSig(StringBuilder, MethodHandle)::: overloaded method append sig:::b->append->m->type->parameterArray->m->isVarargsCollector->appendTypes->b->append
OverloadedMethod#appendTypes(StringBuilder, Class[], boolean)::: overloaded method append types:::l->if->if->b->getCanonicalName->append->for->i->else->for->i->b->getComponentType->getCanonicalName->append->append
OverloadedMethod#getCommonReturnType(List)::: overloaded method get common return type:::it->methodHandles->iterator->retType->it->next->type->returnType->while->it->hasNext->InternalTypeUtilities->it->next->type->returnType->getCommonLosslessConversionType->return
SimpleDynamicMethod#getName(MethodHandle, Class, String, boolean)::: simple dynamic method get name:::return->target->type->getClassAndMethodName->getMethodNameWithSignature
SimpleDynamicMethod#isVarArgs()::: simple dynamic method is var args:::return->target->isVarargsCollector
SimpleDynamicMethod#getMethodType()::: simple dynamic method get method type:::return->target->type
SimpleDynamicMethod#getTarget(CallSiteDescriptor)::: simple dynamic method get target:::return
SimpleDynamicMethod#isConstructor()::: simple dynamic method is constructor:::return
SingleDynamicMethod#isVarArgs():::Returns true if this method is variable arity.:::
SingleDynamicMethod#getMethodType():::Returns this method's native type.:::
SingleDynamicMethod#getTarget(CallSiteDescriptor):::Given a specified call site descriptor, returns a method handle to this method's target:::
SingleDynamicMethod#getInvocation(CallSiteDescriptor, LinkerServices)::: single dynamic method get invocation:::return->linkerServices->getTarget->callSiteDescriptor->getMethodType->getInvocation->getWithLookup
SingleDynamicMethod#getMethodForExactParamTypes(String)::: single dynamic method get method for exact param types:::return->getMethodType->typeMatchesDescription
SingleDynamicMethod#contains(SingleDynamicMethod)::: single dynamic method contains:::return->getMethodType->parameterList->method->getMethodType->parameterList->equals
SingleDynamicMethod#getMethodNameWithSignature(MethodType, String, boolean)::: single dynamic method get method name with signature:::typeStr->type->toString->retTypeIndex->typeStr->lastIndexOf->secondParamIndex->typeStr->indexOf->if->b->new->StringBuilder->if->b->typeStr->length->append->append->return->b->append->append->append->toString
SingleDynamicMethod#getInvocation(MethodHandle, MethodType, LinkerServices):::Given a method handle and a call site type, adapts the method handle to the call site type:::filteredTarget->linkerServices->filterInternalObjects->methodType->filteredTarget->type->paramsLen->methodType->parameterCount->varArgs->target->isVarargsCollector->fixTarget->filteredTarget->asFixedArity->fixParamsLen->argsLen->callSiteType->parameterCount->if->return->if->matchedMethod->if->MethodHandles->Array->methodType->parameterType->getComponentType->newInstance->insertArguments->else->return->createConvertingInvocation->if->return->varArgType->methodType->parameterType->if->callSiteLastArgType->callSiteType->parameterType->if->varArgType->isAssignableFrom->return->createConvertingInvocation->asVarargsCollector->varArgCollectingInvocation->collectArguments->createConvertingInvocation->isAssignableFromArray->callSiteLastArgType->isAssignableFrom->isCustomConvertible->linkerServices->canConvert->if->return->arrayConvertingInvocation->MethodHandles->linkerServices->getTypeConverter->filterArguments->createConvertingInvocation->canConvertArgToArray->MethodHandles->insertArguments->canConvertLastArgToArray->MethodHandles->MethodType->genericMethodType->parameterList->dropArguments->callSiteType->changeReturnType->asType->convertToArrayWhenPossible->MethodHandles->guardWithTest->if->return->MethodHandles->Guards->isInstance->createConvertingInvocation->guardWithTest->return->return->collectArguments->createConvertingInvocation
SingleDynamicMethod#canConvertTo(LinkerServices, Class, Object)::: single dynamic method can convert to:::return->linkerServices->obj->getClass->canConvert
SingleDynamicMethod#collectArguments(MethodHandle, int):::Creates a method handle out of the original target that will collect the varargs for the exact component type of the varArg array:::methodType->target->type->fixParamsLen->methodType->parameterCount->arrayType->methodType->parameterType->return->target->asCollector
SingleDynamicMethod#createConvertingInvocation(MethodHandle, LinkerServices, MethodType)::: single dynamic method create converting invocation:::return->linkerServices->asTypeLosslessReturn
SingleDynamicMethod#typeMatchesDescription(String, MethodType)::: single dynamic method type matches description:::tok->new->StringTokenizer->for->i->type->parameterCount->return->tok->hasMoreTokens
SingleDynamicMethod#typeNameMatches(String, Class)::: single dynamic method type name matches:::return->typeName->typeName->indexOf->type->getSimpleName->type->getCanonicalName->equals
StaticClass#forClass(Class):::Retrieves the StaticClass instance for the specified class.:::return->staticClasses->get
StaticClass#getRepresentedClass():::Returns the represented Java class.:::return
StaticClass#toString()::: static class to string:::return->clazz->getName
StaticClass#readResolve():::Returns #forClass(Class) for the underlying clazz field ensuring that deserialization doesn't create non-canonical instances.:::return->forClass
StaticClassIntrospector#getInnerClassGetters()::: static class introspector get inner class getters:::map->new->HashMap<>->foreach->membersLookup->getInnerClasses->map->innerClass->getSimpleName->MethodHandles->StaticClass->forClass->constant->editMethodHandle->put->return
StaticClassIntrospector#editMethodHandle(MethodHandle)::: static class introspector edit method handle:::return->editStaticMethodHandle
StaticClassIntrospector#editStaticMethodHandle(MethodHandle)::: static class introspector edit static method handle:::return->dropReceiver
StaticClassIntrospector#editConstructorMethodHandle(MethodHandle)::: static class introspector edit constructor method handle:::return->dropReceiver
StaticClassIntrospector#dropReceiver(MethodHandle, Class)::: static class introspector drop receiver:::newHandle->MethodHandles->dropArguments->if->mh->isVarargsCollector->newHandle->isVarargsCollector->type->mh->type->newHandle->type->type->parameterCount->parameterType->asVarargsCollector->return
StaticClassLinker.SingleClassStaticsLinker#createConstructorMethod(Class):::Creates a dynamic method containing all overloads of a class' public constructor:::if->clazz->isArray->boundArrayCtor->ARRAY_CTOR->clazz->getComponentType->bindTo->return->StaticClassIntrospector->boundArrayCtor->boundArrayCtor->type->changeReturnType->asType->editConstructorMethodHandle->new->SimpleDynamicMethod->if->CheckRestrictedPackage->isRestrictedClass->return->return->Arrays->clazz->getConstructors->asList->createDynamicMethod
StaticClassLinker.SingleClassStaticsLinker#createFacetIntrospector()::: single class statics linker create facet introspector:::return->new->StaticClassIntrospector
StaticClassLinker.SingleClassStaticsLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: single class statics linker get guarded invocation:::gi->super->getGuardedInvocation->if->return->desc->request->getCallSiteDescriptor->if->NamedOperation->desc->getOperation->getBaseOperation->ctorInvocation->constructor->getInvocation->if->return->desc->getMethodType->getClassGuard->new->GuardedInvocation->return
StaticClassLinker.SingleClassStaticsLinker#getGuardedInvocationComponent(ComponentLinkRequest)::: single class statics linker get guarded invocation component:::superGic->super->getGuardedInvocationComponent->if->return->if->isEmpty->get->return->req->popNamespace->getNextComponent->return
StaticClassLinker.SingleClassStaticsLinker#getConstructorMethod(String)::: single class statics linker get constructor method:::return->constructor->getMethodForExactParamTypes
StaticClassLinker#getConstructorMethod(Class, String)::: static class linker get constructor method:::return->linkers->get->getConstructorMethod
StaticClassLinker#getReadableStaticPropertyNames(Class)::: static class linker get readable static property names:::return->linkers->get->getReadablePropertyNames
StaticClassLinker#getWritableStaticPropertyNames(Class)::: static class linker get writable static property names:::return->linkers->get->getWritablePropertyNames
StaticClassLinker#getStaticMethodNames(Class)::: static class linker get static method names:::return->linkers->get->getMethodNames
StaticClassLinker#getGuardedInvocation(LinkRequest, LinkerServices)::: static class linker get guarded invocation:::receiver->request->getReceiver->if->return->linkers->getRepresentedClass->get->getGuardedInvocation->return
StaticClassLinker#canLinkType(Class)::: static class linker can link type:::return
StaticClassLinker#isClass(Class, Object)::: static class linker is class:::return->getRepresentedClass

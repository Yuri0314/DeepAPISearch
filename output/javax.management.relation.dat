javax.management.relation.MBeanServerNotificationFilter#disableAllObjectNames()->void:::Disables any MBeanServerNotification (all ObjectNames are deselected).
javax.management.relation.MBeanServerNotificationFilter#disableObjectName(ObjectName)->void:::Disables MBeanServerNotifications concerning given ObjectName.
javax.management.relation.MBeanServerNotificationFilter#enableAllObjectNames()->void:::Enables all MBeanServerNotifications (all ObjectNames are selected).
javax.management.relation.MBeanServerNotificationFilter#enableObjectName(ObjectName)->void:::Enables MBeanServerNotifications concerning given ObjectName.
javax.management.relation.MBeanServerNotificationFilter#getEnabledObjectNames()->Vector:::Gets all the ObjectNames enabled.
javax.management.relation.MBeanServerNotificationFilter#getDisabledObjectNames()->Vector:::Gets all the ObjectNames disabled.
javax.management.relation.MBeanServerNotificationFilter#isNotificationEnabled(Notification)->boolean:::Invoked before sending the specified notification to the listener
javax.management.relation.Relation#getRole(String)->List:::Retrieves role value for given role name
javax.management.relation.Relation#getRoles(String[])->RoleResult:::Retrieves values of roles with given names
javax.management.relation.Relation#getRoleCardinality(String)->Integer:::Returns the number of MBeans currently referenced in the given role.
javax.management.relation.Relation#getAllRoles()->RoleResult:::Returns all roles present in the relation.
javax.management.relation.Relation#retrieveAllRoles()->RoleList:::Returns all roles in the relation without checking read mode.
javax.management.relation.Relation#setRole(Role)->void:::Sets the given role
javax.management.relation.Relation#setRoles(RoleList)->RoleResult:::Sets the given roles
javax.management.relation.Relation#handleMBeanUnregistration(ObjectName, String)->void:::Callback used by the Relation Service when a MBean referenced in a role is unregistered
javax.management.relation.Relation#getReferencedMBeans()->Map>:::Retrieves MBeans referenced in the various roles of the relation.
javax.management.relation.Relation#getRelationTypeName()->String:::Returns name of associated relation type.
javax.management.relation.Relation#getRelationServiceName()->ObjectName:::Returns ObjectName of the Relation Service handling the relation.
javax.management.relation.Relation#getRelationId()->String:::Returns relation identifier (used to uniquely identify the relation inside the Relation Service).
javax.management.relation.RelationNotification#getRelationId()->String:::Returns the relation identifier of created/removed/updated relation.
javax.management.relation.RelationNotification#getRelationTypeName()->String:::Returns the relation type name of created/removed/updated relation.
javax.management.relation.RelationNotification#getObjectName()->ObjectName:::Returns the ObjectName of the created/removed/updated relation.
javax.management.relation.RelationNotification#getMBeansToUnregister()->List:::Returns the list of ObjectNames of MBeans expected to be unregistered due to a relation removal (only for relation removal).
javax.management.relation.RelationNotification#getRoleName()->String:::Returns name of updated role of updated relation (only for role update).
javax.management.relation.RelationNotification#getOldRoleValue()->List:::Returns old value of updated role (only for role update).
javax.management.relation.RelationNotification#getNewRoleValue()->List:::Returns new value of updated role (only for role update).
javax.management.relation.RelationService#isActive()->void:::Checks if the Relation Service is active
javax.management.relation.RelationService#preRegister(MBeanServer, ObjectName)->ObjectName::: relation service pre register
javax.management.relation.RelationService#postRegister(Boolean)->void::: relation service post register
javax.management.relation.RelationService#preDeregister()->void::: relation service pre deregister
javax.management.relation.RelationService#postDeregister()->void::: relation service post deregister
javax.management.relation.RelationService#getPurgeFlag()->boolean:::Returns the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgeRelations method will be explicitly called
javax.management.relation.RelationService#setPurgeFlag(boolean)->void:::Sets the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgeRelations method will be explicitly called
javax.management.relation.RelationService#createRelationType(String, RoleInfo[])->void:::Creates a relation type (a RelationTypeSupport object) with given role infos (provided by the RoleInfo objects), and adds it in the Relation Service.
javax.management.relation.RelationService#addRelationType(RelationType)->void:::Adds given object as a relation type
javax.management.relation.RelationService#getAllRelationTypeNames()->List:::Retrieves names of all known relation types.
javax.management.relation.RelationService#getRoleInfos(String)->List:::Retrieves list of role infos (RoleInfo objects) of a given relation type.
javax.management.relation.RelationService#getRoleInfo(String, String)->RoleInfo:::Retrieves role info for given role name of a given relation type.
javax.management.relation.RelationService#removeRelationType(String)->void:::Removes given relation type from Relation Service
javax.management.relation.RelationService#createRelation(String, String, RoleList)->void:::Creates a simple relation (represented by a RelationSupport object) of given relation type, and adds it in the Relation Service
javax.management.relation.RelationService#addRelation(ObjectName)->void:::Adds an MBean created by the user (and registered by him in the MBean Server) as a relation in the Relation Service
javax.management.relation.RelationService#isRelationMBean(String)->ObjectName:::If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the ObjectName of the MBean.
javax.management.relation.RelationService#isRelation(ObjectName)->String:::Returns the relation id associated to the given ObjectName if the MBean has been added as a relation in the Relation Service.
javax.management.relation.RelationService#hasRelation(String)->Boolean:::Checks if there is a relation identified in Relation Service with given relation id.
javax.management.relation.RelationService#getAllRelationIds()->List:::Returns all the relation ids for all the relations handled by the Relation Service.
javax.management.relation.RelationService#checkRoleReading(String, String)->Integer:::Checks if given Role can be read in a relation of the given type.
javax.management.relation.RelationService#checkRoleWriting(Role, String, Boolean)->Integer:::Checks if given Role can be set in a relation of given type.
javax.management.relation.RelationService#sendRelationCreationNotification(String)->void:::Sends a notification (RelationNotification) for a relation creation
javax.management.relation.RelationService#sendRoleUpdateNotification(String, Role, List)->void:::Sends a notification (RelationNotification) for a role update in the given relation
javax.management.relation.RelationService#sendRelationRemovalNotification(String, List)->void:::Sends a notification (RelationNotification) for a relation removal
javax.management.relation.RelationService#updateRoleMap(String, Role, List)->void:::Handles update of the Relation Service role map for the update of given role in given relation
javax.management.relation.RelationService#removeRelation(String)->void:::Removes given relation from the Relation Service
javax.management.relation.RelationService#purgeRelations()->void:::Purges the relations
javax.management.relation.RelationService#findReferencingRelations(ObjectName, String, String)->Map>:::Retrieves the relations where a given MBean is referenced
javax.management.relation.RelationService#findAssociatedMBeans(ObjectName, String, String)->Map>:::Retrieves the MBeans associated to given one in a relation
javax.management.relation.RelationService#findRelationsOfType(String)->List:::Returns the relation ids for relations of the given type.
javax.management.relation.RelationService#getRole(String, String)->List:::Retrieves role value for given role name in given relation.
javax.management.relation.RelationService#getRoles(String, String[])->RoleResult:::Retrieves values of roles with given names in given relation.
javax.management.relation.RelationService#getAllRoles(String)->RoleResult:::Returns all roles present in the relation.
javax.management.relation.RelationService#getRoleCardinality(String, String)->Integer:::Retrieves the number of MBeans currently referenced in the given role.
javax.management.relation.RelationService#setRole(String, Role)->void:::Sets the given role in given relation
javax.management.relation.RelationService#setRoles(String, RoleList)->RoleResult:::Sets the given roles in given relation
javax.management.relation.RelationService#getReferencedMBeans(String)->Map>:::Retrieves MBeans referenced in the various roles of the relation.
javax.management.relation.RelationService#getRelationTypeName(String)->String:::Returns name of associated relation type for given relation.
javax.management.relation.RelationService#handleNotification(Notification, Object)->void:::Invoked when a JMX notification occurs
javax.management.relation.RelationService#getNotificationInfo()->MBeanNotificationInfo[]:::Returns a NotificationInfo object containing the name of the Java class of the notification and the notification types sent.
javax.management.relation.RelationService#getRelationType(String)->RelationType::: relation service get relation type
javax.management.relation.RelationService#getRelation(String)->Object::: relation service get relation
javax.management.relation.RelationService#throwRoleProblemException(int, String)->void::: relation service throw role problem exception
javax.management.relation.RelationServiceMBean#isActive()->void:::Checks if the Relation Service is active
javax.management.relation.RelationServiceMBean#getPurgeFlag()->boolean:::Returns the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgeRelations method is explicitly called
javax.management.relation.RelationServiceMBean#setPurgeFlag(boolean)->void:::Sets the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgeRelations method is explicitly called
javax.management.relation.RelationServiceMBean#createRelationType(String, RoleInfo[])->void:::Creates a relation type (RelationTypeSupport object) with given role infos (provided by the RoleInfo objects), and adds it in the Relation Service.
javax.management.relation.RelationServiceMBean#addRelationType(RelationType)->void:::Adds given object as a relation type
javax.management.relation.RelationServiceMBean#getAllRelationTypeNames()->List:::Retrieves names of all known relation types.
javax.management.relation.RelationServiceMBean#getRoleInfos(String)->List:::Retrieves list of role infos (RoleInfo objects) of a given relation type.
javax.management.relation.RelationServiceMBean#getRoleInfo(String, String)->RoleInfo:::Retrieves role info for given role of a given relation type.
javax.management.relation.RelationServiceMBean#removeRelationType(String)->void:::Removes given relation type from Relation Service
javax.management.relation.RelationServiceMBean#createRelation(String, String, RoleList)->void:::Creates a simple relation (represented by a RelationSupport object) of given relation type, and adds it in the Relation Service
javax.management.relation.RelationServiceMBean#addRelation(ObjectName)->void:::Adds an MBean created by the user (and registered by him in the MBean Server) as a relation in the Relation Service
javax.management.relation.RelationServiceMBean#isRelationMBean(String)->ObjectName:::If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the ObjectName of the MBean.
javax.management.relation.RelationServiceMBean#isRelation(ObjectName)->String:::Returns the relation id associated to the given ObjectName if the MBean has been added as a relation in the Relation Service.
javax.management.relation.RelationServiceMBean#hasRelation(String)->Boolean:::Checks if there is a relation identified in Relation Service with given relation id.
javax.management.relation.RelationServiceMBean#getAllRelationIds()->List:::Returns all the relation ids for all the relations handled by the Relation Service.
javax.management.relation.RelationServiceMBean#checkRoleReading(String, String)->Integer:::Checks if given Role can be read in a relation of the given type.
javax.management.relation.RelationServiceMBean#checkRoleWriting(Role, String, Boolean)->Integer:::Checks if given Role can be set in a relation of given type.
javax.management.relation.RelationServiceMBean#sendRelationCreationNotification(String)->void:::Sends a notification (RelationNotification) for a relation creation
javax.management.relation.RelationServiceMBean#sendRoleUpdateNotification(String, Role, List)->void:::Sends a notification (RelationNotification) for a role update in the given relation
javax.management.relation.RelationServiceMBean#sendRelationRemovalNotification(String, List)->void:::Sends a notification (RelationNotification) for a relation removal
javax.management.relation.RelationServiceMBean#updateRoleMap(String, Role, List)->void:::Handles update of the Relation Service role map for the update of given role in given relation
javax.management.relation.RelationServiceMBean#removeRelation(String)->void:::Removes given relation from the Relation Service
javax.management.relation.RelationServiceMBean#purgeRelations()->void:::Purges the relations
javax.management.relation.RelationServiceMBean#findReferencingRelations(ObjectName, String, String)->Map>:::Retrieves the relations where a given MBean is referenced
javax.management.relation.RelationServiceMBean#findAssociatedMBeans(ObjectName, String, String)->Map>:::Retrieves the MBeans associated to given one in a relation
javax.management.relation.RelationServiceMBean#findRelationsOfType(String)->List:::Returns the relation ids for relations of the given type.
javax.management.relation.RelationServiceMBean#getRole(String, String)->List:::Retrieves role value for given role name in given relation.
javax.management.relation.RelationServiceMBean#getRoles(String, String[])->RoleResult:::Retrieves values of roles with given names in given relation.
javax.management.relation.RelationServiceMBean#getAllRoles(String)->RoleResult:::Returns all roles present in the relation.
javax.management.relation.RelationServiceMBean#getRoleCardinality(String, String)->Integer:::Retrieves the number of MBeans currently referenced in the given role.
javax.management.relation.RelationServiceMBean#setRole(String, Role)->void:::Sets the given role in given relation
javax.management.relation.RelationServiceMBean#setRoles(String, RoleList)->RoleResult:::Sets the given roles in given relation
javax.management.relation.RelationServiceMBean#getReferencedMBeans(String)->Map>:::Retrieves MBeans referenced in the various roles of the relation.
javax.management.relation.RelationServiceMBean#getRelationTypeName(String)->String:::Returns name of associated relation type for given relation.
javax.management.relation.RelationSupport#getRole(String)->List:::Retrieves role value for given role name
javax.management.relation.RelationSupport#getRoles(String[])->RoleResult:::Retrieves values of roles with given names
javax.management.relation.RelationSupport#getAllRoles()->RoleResult:::Returns all roles present in the relation.
javax.management.relation.RelationSupport#retrieveAllRoles()->RoleList:::Returns all roles in the relation without checking read mode.
javax.management.relation.RelationSupport#getRoleCardinality(String)->Integer:::Returns the number of MBeans currently referenced in the given role.
javax.management.relation.RelationSupport#setRole(Role)->void:::Sets the given role
javax.management.relation.RelationSupport#setRoles(RoleList)->RoleResult:::Sets the given roles
javax.management.relation.RelationSupport#handleMBeanUnregistration(ObjectName, String)->void:::Callback used by the Relation Service when a MBean referenced in a role is unregistered
javax.management.relation.RelationSupport#getReferencedMBeans()->Map>:::Retrieves MBeans referenced in the various roles of the relation.
javax.management.relation.RelationSupport#getRelationTypeName()->String:::Returns name of associated relation type.
javax.management.relation.RelationSupport#getRelationServiceName()->ObjectName:::Returns ObjectName of the Relation Service handling the relation.
javax.management.relation.RelationSupport#getRelationId()->String:::Returns relation identifier (used to uniquely identify the relation inside the Relation Service).
javax.management.relation.RelationSupport#preRegister(MBeanServer, ObjectName)->ObjectName::: relation support pre register
javax.management.relation.RelationSupport#postRegister(Boolean)->void::: relation support post register
javax.management.relation.RelationSupport#preDeregister()->void::: relation support pre deregister
javax.management.relation.RelationSupport#postDeregister()->void::: relation support post deregister
javax.management.relation.RelationSupport#isInRelationService()->Boolean:::Returns an internal flag specifying if the object is still handled by the Relation Service.
javax.management.relation.RelationSupport#setRelationServiceManagementFlag(Boolean)->void::: relation support set relation service management flag
javax.management.relation.RelationSupport#getRoleInt(String, boolean, RelationService, boolean)->Object::: relation support get role int
javax.management.relation.RelationSupport#getRolesInt(String[], boolean, RelationService)->RoleResult::: relation support get roles int
javax.management.relation.RelationSupport#getAllRolesInt(boolean, RelationService)->RoleResult::: relation support get all roles int
javax.management.relation.RelationSupport#setRoleInt(Role, boolean, RelationService, boolean)->Object::: relation support set role int
javax.management.relation.RelationSupport#setRolesInt(RoleList, boolean, RelationService)->RoleResult::: relation support set roles int
javax.management.relation.RelationSupport#handleMBeanUnregistrationInt(ObjectName, String, boolean, RelationService)->void::: relation support handle bean unregistration int
javax.management.relation.RelationSupportMBean#isInRelationService()->Boolean:::Returns an internal flag specifying if the object is still handled by the Relation Service.
javax.management.relation.RelationSupportMBean#setRelationServiceManagementFlag(Boolean)->void:::Specifies whether this relation is handled by the Relation Service. <P>BEWARE, this method has to be exposed as the Relation Service will access the relation through its management interface
javax.management.relation.RelationType#getRelationTypeName()->String:::Returns the relation type name.
javax.management.relation.RelationType#getRoleInfos()->List:::Returns the list of role definitions (ArrayList of RoleInfo objects).
javax.management.relation.RelationType#getRoleInfo(String)->RoleInfo:::Returns the role info (RoleInfo object) for the given role info name (null if not found).
javax.management.relation.RelationTypeSupport#getRelationTypeName()->String:::Returns the relation type name.
javax.management.relation.RelationTypeSupport#getRoleInfos()->List:::Returns the list of role definitions (ArrayList of RoleInfo objects).
javax.management.relation.RelationTypeSupport#getRoleInfo(String)->RoleInfo:::Returns the role info (RoleInfo object) for the given role info name (null if not found).
javax.management.relation.RelationTypeSupport#addRoleInfo(RoleInfo)->void:::Add a role info
javax.management.relation.RelationTypeSupport#setRelationServiceFlag(boolean)->void::: relation type support set relation service flag
javax.management.relation.RelationTypeSupport#checkRoleInfos(RoleInfo[])->void::: relation type support check role infos
javax.management.relation.Role#getRoleName()->String:::Retrieves role name.
javax.management.relation.Role#getRoleValue()->List:::Retrieves role value.
javax.management.relation.Role#setRoleName(String)->void:::Sets role name.
javax.management.relation.Role#setRoleValue(List)->void:::Sets role value.
javax.management.relation.Role#toString()->String:::Returns a string describing the role.
javax.management.relation.Role#clone()->Object:::Clone the role object.
javax.management.relation.Role#roleValueToString(List)->String:::Returns a string for the given role value.
javax.management.relation.RoleInfo#getName()->String:::Returns the name of the role.
javax.management.relation.RoleInfo#isReadable()->boolean:::Returns read access mode for the role (true if it is readable).
javax.management.relation.RoleInfo#isWritable()->boolean:::Returns write access mode for the role (true if it is writable).
javax.management.relation.RoleInfo#getDescription()->String:::Returns description text for the role.
javax.management.relation.RoleInfo#getMinDegree()->int:::Returns minimum degree for corresponding role reference.
javax.management.relation.RoleInfo#getMaxDegree()->int:::Returns maximum degree for corresponding role reference.
javax.management.relation.RoleInfo#getRefMBeanClassName()->String:::Returns name of type of MBean expected to be referenced in corresponding role.
javax.management.relation.RoleInfo#checkMinDegree(int)->boolean:::Returns true if the value parameter is greater than or equal to the expected minimum degree, false otherwise.
javax.management.relation.RoleInfo#checkMaxDegree(int)->boolean:::Returns true if the value parameter is lower than or equal to the expected maximum degree, false otherwise.
javax.management.relation.RoleInfo#toString()->String:::Returns a string describing the role info.
javax.management.relation.RoleList#asList()->List:::Return a view of this list as a List<Role>
javax.management.relation.RoleList#add(Role)->void:::Adds the Role specified as the last element of the list.
javax.management.relation.RoleList#add(int, Role)->void:::Inserts the role specified as an element at the position specified
javax.management.relation.RoleList#set(int, Role)->void:::Sets the element at the position specified to be the role specified
javax.management.relation.RoleList#addAll(RoleList)->boolean:::Appends all the elements in the RoleList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleList specified.
javax.management.relation.RoleList#addAll(int, RoleList)->boolean:::Inserts all of the elements in the RoleList specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the RoleList specified.
javax.management.relation.RoleList#add(Object)->boolean::: role list add
javax.management.relation.RoleList#add(int, Object)->void::: role list add
javax.management.relation.RoleList#addAll(Collection)->boolean::: role list add all
javax.management.relation.RoleList#addAll(int, Collection)->boolean::: role list add all
javax.management.relation.RoleList#set(int, Object)->Object::: role list set
javax.management.relation.RoleResult#getRoles()->RoleList:::Retrieves list of roles successfully accessed.
javax.management.relation.RoleResult#getRolesUnresolved()->RoleUnresolvedList:::Retrieves list of roles unsuccessfully accessed.
javax.management.relation.RoleResult#setRoles(RoleList)->void:::Sets list of roles successfully accessed.
javax.management.relation.RoleResult#setRolesUnresolved(RoleUnresolvedList)->void:::Sets list of roles unsuccessfully accessed.
javax.management.relation.RoleStatus#isRoleStatus(int)->boolean:::Returns true if given value corresponds to a known role status, false otherwise.
javax.management.relation.RoleUnresolved#getRoleName()->String:::Retrieves role name.
javax.management.relation.RoleUnresolved#getRoleValue()->List:::Retrieves role value.
javax.management.relation.RoleUnresolved#getProblemType()->int:::Retrieves problem type.
javax.management.relation.RoleUnresolved#setRoleName(String)->void:::Sets role name.
javax.management.relation.RoleUnresolved#setRoleValue(List)->void:::Sets role value.
javax.management.relation.RoleUnresolved#setProblemType(int)->void:::Sets problem type.
javax.management.relation.RoleUnresolved#clone()->Object:::Clone this object.
javax.management.relation.RoleUnresolved#toString()->String:::Return a string describing this object.
javax.management.relation.RoleUnresolvedList#asList()->List:::Return a view of this list as a List<RoleUnresolved>
javax.management.relation.RoleUnresolvedList#add(RoleUnresolved)->void:::Adds the RoleUnresolved specified as the last element of the list.
javax.management.relation.RoleUnresolvedList#add(int, RoleUnresolved)->void:::Inserts the unresolved role specified as an element at the position specified
javax.management.relation.RoleUnresolvedList#set(int, RoleUnresolved)->void:::Sets the element at the position specified to be the unresolved role specified
javax.management.relation.RoleUnresolvedList#addAll(RoleUnresolvedList)->boolean:::Appends all the elements in the RoleUnresolvedList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleUnresolvedList specified.
javax.management.relation.RoleUnresolvedList#addAll(int, RoleUnresolvedList)->boolean:::Inserts all of the elements in the RoleUnresolvedList specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the RoleUnresolvedList specified.
javax.management.relation.RoleUnresolvedList#add(Object)->boolean::: role unresolved list add
javax.management.relation.RoleUnresolvedList#add(int, Object)->void::: role unresolved list add
javax.management.relation.RoleUnresolvedList#addAll(Collection)->boolean::: role unresolved list add all
javax.management.relation.RoleUnresolvedList#addAll(int, Collection)->boolean::: role unresolved list add all
javax.management.relation.RoleUnresolvedList#set(int, Object)->Object::: role unresolved list set

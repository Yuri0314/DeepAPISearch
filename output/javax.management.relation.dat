MBeanServerNotificationFilter#disableAllObjectNames():::Disables any MBeanServerNotification (all ObjectNames are deselected).:::RELATION_LOGGER->log->new->Vector<ObjectName>->RELATION_LOGGER->log->return
MBeanServerNotificationFilter#disableObjectName(ObjectName):::Disables MBeanServerNotifications concerning given ObjectName.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->if->if->selectedNames->size->selectedNames->remove->if->if->deselectedNames->contains->deselectedNames->add->RELATION_LOGGER->log->return
MBeanServerNotificationFilter#enableAllObjectNames():::Enables all MBeanServerNotifications (all ObjectNames are selected).:::RELATION_LOGGER->log->new->Vector<ObjectName>->RELATION_LOGGER->log->return
MBeanServerNotificationFilter#enableObjectName(ObjectName):::Enables MBeanServerNotifications concerning given ObjectName.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->if->if->deselectedNames->size->deselectedNames->remove->if->if->selectedNames->contains->selectedNames->add->RELATION_LOGGER->log->return
MBeanServerNotificationFilter#getEnabledObjectNames():::Gets all the ObjectNames enabled.:::if->return->new->Vector<ObjectName>->else->return
MBeanServerNotificationFilter#getDisabledObjectNames():::Gets all the ObjectNames disabled.:::if->return->new->Vector<ObjectName>->else->return
MBeanServerNotificationFilter#isNotificationEnabled(Notification):::Invoked before sending the specified notification to the listener:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->ntfType->notif->getType->enabledTypes->getEnabledTypes->if->enabledTypes->contains->RELATION_LOGGER->log->return->mbsNtf->objName->mbsNtf->getMBeanName->isSelectedFlg->if->if->selectedNames->size->RELATION_LOGGER->log->return->selectedNames->contains->if->RELATION_LOGGER->log->return->if->if->RELATION_LOGGER->log->return->else->if->deselectedNames->contains->RELATION_LOGGER->log->return->RELATION_LOGGER->log->return
Relation#getRole(String):::Retrieves role value for given role name:::
Relation#getRoles(String[]):::Retrieves values of roles with given names:::
Relation#getRoleCardinality(String):::Returns the number of MBeans currently referenced in the given role.:::
Relation#getAllRoles():::Returns all roles present in the relation.:::
Relation#retrieveAllRoles():::Returns all roles in the relation without checking read mode.:::
Relation#setRole(Role):::Sets the given role:::
Relation#setRoles(RoleList):::Sets the given roles:::
Relation#handleMBeanUnregistration(ObjectName, String):::Callback used by the Relation Service when a MBean referenced in a role is unregistered:::
Relation#getReferencedMBeans():::Retrieves MBeans referenced in the various roles of the relation.:::
Relation#getRelationTypeName():::Returns name of associated relation type.:::
Relation#getRelationServiceName():::Returns ObjectName of the Relation Service handling the relation.:::
Relation#getRelationId():::Returns relation identifier (used to uniquely identify the relation inside the Relation Service).:::
RelationNotification#getRelationId():::Returns the relation identifier of created/removed/updated relation.:::return
RelationNotification#getRelationTypeName():::Returns the relation type name of created/removed/updated relation.:::return
RelationNotification#getObjectName():::Returns the ObjectName of the created/removed/updated relation.:::return
RelationNotification#getMBeansToUnregister():::Returns the list of ObjectNames of MBeans expected to be unregistered due to a relation removal (only for relation removal).:::result->if->new->ArrayList<ObjectName>->else->Collections->emptyList->return
RelationNotification#getRoleName():::Returns name of updated role of updated relation (only for role update).:::result->if->return
RelationNotification#getOldRoleValue():::Returns old value of updated role (only for role update).:::result->if->new->ArrayList<ObjectName>->else->Collections->emptyList->return
RelationNotification#getNewRoleValue():::Returns new value of updated role (only for role update).:::result->if->new->ArrayList<ObjectName>->else->Collections->emptyList->return
RelationService#isActive():::Checks if the Relation Service is active:::if->excMsg->throw->new->RelationServiceNotRegisteredException->return
RelationService#getPurgeFlag():::Returns the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgeRelations method will be explicitly called:::return
RelationService#setPurgeFlag(boolean):::Sets the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed , or if that will be performed only when the purgeRelations method will be explicitly called:::return
RelationService#createRelationType(String, RoleInfo[]):::Creates a relation type (a RelationTypeSupport object) with given role infos (provided by the RoleInfo objects), and adds it in the Relation Service.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relType->new->RelationTypeSupport->addRelationTypeInt->RELATION_LOGGER->log->return
RelationService#addRelationType(RelationType):::Adds given object as a relation type:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->roleInfoList->relationTypeObj->getRoleInfos->if->excMsg->throw->new->InvalidRelationTypeException->roleInfoArray->roleInfoList->size->new->RoleInfoArr->i->foreach->RelationTypeSupport->checkRoleInfos->addRelationTypeInt->RELATION_LOGGER->log->return
RelationService#getAllRelationTypeNames():::Retrieves names of all known relation types.:::result->synchronized->myRelType2ObjMap->keySet->new->ArrayList<String>->return
RelationService#getRoleInfos(String):::Retrieves list of role infos (RoleInfo objects) of a given relation type.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relType->getRelationType->RELATION_LOGGER->log->return->relType->getRoleInfos
RelationService#getRoleInfo(String, String):::Retrieves role info for given role name of a given relation type.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relType->getRelationType->roleInfo->relType->getRoleInfo->RELATION_LOGGER->log->return
RelationService#removeRelationType(String):::Removes given relation type from Relation Service:::isActive->if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relType->getRelationType->relIdList->synchronized->relIdList1->myRelType2RelIdsMap->get->if->new->ArrayList<String>->synchronized->myRelType2ObjMap->remove->synchronized->myRelType2RelIdsMap->remove->if->foreach->try->removeRelation->catch->throw->exc1->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#createRelation(String, String, RoleList):::Creates a simple relation (represented by a RelationSupport object) of given relation type, and adds it in the Relation Service:::isActive->if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relObj->new->RelationSupport->addRelationInt->RELATION_LOGGER->log->return
RelationService#addRelation(ObjectName):::Adds an MBean created by the user (and registered by him in the MBean Server) as a relation in the Relation Service:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->isActive->if->myMBeanServer->isInstanceOf->excMsg->throw->new->NoSuchMethodException->relId->try->myMBeanServer->getAttribute->catch->throw->exc1->getTargetException->getMessage->new->RuntimeException->throw->exc2->getMessage->new->RuntimeException->throw->exc3->getMessage->new->RuntimeException->finally->if->excMsg->throw->new->InvalidRelationIdException->relServObjName->try->myMBeanServer->getAttribute->catch->throw->exc1->getTargetException->getMessage->new->RuntimeException->throw->exc2->getMessage->new->RuntimeException->throw->exc3->getMessage->new->RuntimeException->finally->badRelServFlag->if->else->if->relServObjName->equals->if->excMsg->throw->new->InvalidRelationServiceException->relTypeName->try->myMBeanServer->getAttribute->catch->throw->exc1->getTargetException->getMessage->new->RuntimeException->throw->exc2->getMessage->new->RuntimeException->throw->exc3->getMessage->new->RuntimeException->finally->if->excMsg->throw->new->RelationTypeNotFoundException->roleList->try->myMBeanServer->invoke->catch->throw->exc1->getTargetException->getMessage->new->RuntimeException->throw->exc2->getMessage->new->RuntimeException->finally->addRelationInt->synchronized->myRelMBeanObjName2RelIdMap->put->try->myMBeanServer->new->Attribute->setAttribute->catch->finally->newRefList->new->ArrayList<ObjectName>->newRefList->add->updateUnregistrationListener->RELATION_LOGGER->log->return
RelationService#isRelationMBean(String):::If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the ObjectName of the MBean.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->getRelation->if->return->else->return
RelationService#isRelation(ObjectName):::Returns the relation id associated to the given ObjectName if the MBean has been added as a relation in the Relation Service.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->synchronized->relId->myRelMBeanObjName2RelIdMap->get->if->return
RelationService#hasRelation(String):::Checks if there is a relation identified in Relation Service with given relation id.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->try->result->getRelation->return->catch->return->finally
RelationService#getAllRelationIds():::Returns all the relation ids for all the relations handled by the Relation Service.:::result->synchronized->myRelId2ObjMap->keySet->new->ArrayList<String>->return
RelationService#checkRoleReading(String, String):::Checks if given Role can be read in a relation of the given type.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->relType->getRelationType->try->roleInfo->relType->getRoleInfo->checkRoleInt->catch->Integer->valueOf->finally->RELATION_LOGGER->log->return
RelationService#checkRoleWriting(Role, String, Boolean):::Checks if given Role can be set in a relation of given type.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relType->getRelationType->roleName->role->getRoleName->roleValue->role->getRoleValue->writeChkFlag->if->initFlag->booleanValue->roleInfo->try->relType->getRoleInfo->catch->RELATION_LOGGER->log->return->Integer->valueOf->finally->result->checkRoleInt->RELATION_LOGGER->log->return
RelationService#sendRelationCreationNotification(String):::Sends a notification (RelationNotification) for a relation creation:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->ntfMsg->new->StringBuilder->ntfMsg->append->ntfMsg->toString->sendNotificationInt->RELATION_LOGGER->log->return
RelationService#sendRoleUpdateNotification(String, Role, List):::Sends a notification (RelationNotification) for a role update in the given relation:::if->excMsg->throw->new->IllegalArgumentException->if->new->ArrayList<ObjectName>->RELATION_LOGGER->log->roleName->newRole->getRoleName->newRoleVal->newRole->getRoleValue->newRoleValString->Role->roleValueToString->oldRoleValString->Role->roleValueToString->ntfMsg->new->StringBuilder->ntfMsg->append->ntfMsg->append->ntfMsg->append->ntfMsg->append->ntfMsg->append->ntfMsg->toString->sendNotificationInt->RELATION_LOGGER->log
RelationService#sendRelationRemovalNotification(String, List):::Sends a notification (RelationNotification) for a relation removal:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->sendNotificationInt->RELATION_LOGGER->log->return
RelationService#updateRoleMap(String, Role, List):::Handles update of the Relation Service role map for the update of given role in given relation:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->isActive->result->getRelation->roleName->newRole->getRoleName->newRoleValue->newRole->getRoleValue->oldRoleValue->new->ArrayList<ObjectName>->newRefList->new->ArrayList<ObjectName>->foreach->currObjNamePos->oldRoleValue->indexOf->if->isNewFlag->addNewMBeanReference->if->newRefList->add->else->oldRoleValue->remove->obsRefList->new->ArrayList<ObjectName>->foreach->noLongerRefFlag->removeMBeanReference->if->obsRefList->add->updateUnregistrationListener->RELATION_LOGGER->log->return
RelationService#removeRelation(String):::Removes given relation from the Relation Service:::isActive->if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->getRelation->if->obsRefList->new->ArrayList<ObjectName>->obsRefList->add->updateUnregistrationListener->sendRelationRemovalNotification->refMBeanList->new->ArrayList<ObjectName>->nonRefObjNameList->new->ArrayList<ObjectName>->synchronized->foreach->myRefedMBeanObjName2RelIdsMap->keySet->relIdMap->myRefedMBeanObjName2RelIdsMap->get->if->relIdMap->containsKey->relIdMap->remove->refMBeanList->add->if->relIdMap->isEmpty->nonRefObjNameList->add->foreach->myRefedMBeanObjName2RelIdsMap->remove->synchronized->myRelId2ObjMap->remove->if->synchronized->myRelMBeanObjName2RelIdMap->remove->relTypeName->synchronized->myRelId2RelTypeMap->get->myRelId2RelTypeMap->remove->synchronized->relIdList->myRelType2RelIdsMap->get->if->relIdList->remove->if->relIdList->isEmpty->myRelType2RelIdsMap->remove->RELATION_LOGGER->log->return
RelationService#purgeRelations():::Purges the relations:::RELATION_LOGGER->log->isActive->localUnregNtfList->synchronized->new->ArrayList<MBeanServerNotification>->new->ArrayList<MBeanServerNotification>->obsRefList->new->ArrayList<ObjectName>->localMBean2RelIdMap->new->HashMap<ObjectName,Map<String,List<String>>>->synchronized->foreach->unregMBeanName->currNtf->getMBeanName->obsRefList->add->relIdMap->myRefedMBeanObjName2RelIdsMap->get->localMBean2RelIdMap->put->myRefedMBeanObjName2RelIdsMap->remove->updateUnregistrationListener->foreach->unregMBeanName->currNtf->getMBeanName->localRelIdMap->localMBean2RelIdMap->get->foreach->localRelIdMap->entrySet->currRelId->currRel->getKey->localRoleNameList->currRel->getValue->try->handleReferenceUnregistration->catch->throw->exc1->getMessage->new->RuntimeException->throw->exc2->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#findReferencingRelations(ObjectName, String, String):::Retrieves the relations where a given MBean is referenced:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->new->HashMap<String,List<String>>->synchronized->relId2RoleNamesMap->myRefedMBeanObjName2RelIdsMap->get->if->allRelIdSet->relId2RoleNamesMap->keySet->relIdList->if->new->ArrayList<String>->else->new->ArrayList<String>->foreach->currRelTypeName->synchronized->myRelId2RelTypeMap->get->if->currRelTypeName->equals->relIdList->add->foreach->currRoleNameList->relId2RoleNamesMap->get->if->result->new->ArrayList<String>->put->else->if->currRoleNameList->contains->dummyList->new->ArrayList<String>->dummyList->add->result->put->RELATION_LOGGER->log->return
RelationService#findAssociatedMBeans(ObjectName, String, String):::Retrieves the MBeans associated to given one in a relation:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relId2RoleNamesMap->findReferencingRelations->result->new->HashMap<ObjectName,List<String>>->foreach->relId2RoleNamesMap->keySet->objName2RoleNamesMap->try->getReferencedMBeans->catch->throw->exc->getMessage->new->RuntimeException->finally->foreach->objName2RoleNamesMap->keySet->if->currObjName->equals->currRelIdList->result->get->if->new->ArrayList<String>->currRelIdList->add->result->put->else->currRelIdList->add->RELATION_LOGGER->log->return
RelationService#findRelationsOfType(String):::Returns the relation ids for relations of the given type.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relType->getRelationType->result->synchronized->result1->myRelType2RelIdsMap->get->if->new->ArrayList<String>->else->new->ArrayList<String>->RELATION_LOGGER->log->return
RelationService#getRole(String, String):::Retrieves role value for given role name in given relation.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->isActive->relObj->getRelation->result->if->getRoleInt->cast->else->params->new->ObjectArr->signature->new->StringArr->try->invokeResult->myMBeanServer->invoke->cast->if->else->new->ArrayList<ObjectName>->catch->throw->exc1->getMessage->new->RuntimeException->throw->exc2->getMessage->new->RuntimeException->wrappedExc->exc3->getTargetException->if->throw->else->throw->wrappedExc->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#getRoles(String, String[]):::Retrieves values of roles with given names in given relation.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->isActive->relObj->getRelation->result->if->getRolesInt->else->params->new->ObjectArr->signature->new->StringArr->try->roleNameArray->getClass->getName->catch->finally->try->myMBeanServer->invoke->catch->throw->exc1->getMessage->new->RuntimeException->throw->exc2->getMessage->new->RuntimeException->throw->exc3->getTargetException->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#getAllRoles(String):::Returns all roles present in the relation.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relObj->getRelation->result->if->getAllRolesInt->else->try->myMBeanServer->getAttribute->catch->throw->exc->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#getRoleCardinality(String, String):::Retrieves the number of MBeans currently referenced in the given role.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relObj->getRelation->result->if->getRoleCardinality->else->params->new->ObjectArr->signature->new->StringArr->try->myMBeanServer->invoke->catch->throw->exc1->getMessage->new->RuntimeException->throw->exc2->getMessage->new->RuntimeException->wrappedExc->exc3->getTargetException->if->throw->else->throw->wrappedExc->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#setRole(String, Role):::Sets the given role in given relation:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->isActive->relObj->getRelation->if->try->setRoleInt->catch->throw->exc->getMessage->new->RuntimeException->finally->else->params->new->ObjectArr->signature->new->StringArr->try->myMBeanServer->new->Attribute->setAttribute->catch->throw->exc1->getMessage->new->RuntimeException->throw->exc3->getMessage->new->RuntimeException->wrappedExc->exc2->getTargetException->if->throw->else->if->throw->else->throw->wrappedExc->getMessage->new->RuntimeException->throw->exc4->getMessage->new->RuntimeException->throw->exc5->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#setRoles(String, RoleList):::Sets the given roles in given relation:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->isActive->relObj->getRelation->result->if->try->setRolesInt->catch->throw->exc->getMessage->new->RuntimeException->finally->else->params->new->ObjectArr->signature->new->StringArr->try->myMBeanServer->invoke->catch->throw->exc1->getMessage->new->RuntimeException->throw->exc3->getMessage->new->RuntimeException->throw->exc2->getTargetException->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#getReferencedMBeans(String):::Retrieves MBeans referenced in the various roles of the relation.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relObj->getRelation->result->if->getReferencedMBeans->else->try->myMBeanServer->getAttribute->cast->catch->throw->exc->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#getRelationTypeName(String):::Returns name of associated relation type for given relation.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->relObj->getRelation->result->if->getRelationTypeName->else->try->myMBeanServer->getAttribute->catch->throw->exc->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#handleNotification(Notification, Object):::Invoked when a JMX notification occurs:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->if->mbsNtf->ntfType->notif->getType->if->ntfType->equals->mbeanName->getMBeanName->isRefedMBeanFlag->synchronized->if->myRefedMBeanObjName2RelIdsMap->containsKey->synchronized->myUnregNtfList->add->if->try->purgeRelations->catch->throw->exc->getMessage->new->RuntimeException->finally->relId->synchronized->myRelMBeanObjName2RelIdMap->get->if->try->removeRelation->catch->throw->exc->getMessage->new->RuntimeException->finally->RELATION_LOGGER->log->return
RelationService#getNotificationInfo():::Returns a NotificationInfo object containing the name of the Java class of the notification and the notification types sent.:::RELATION_LOGGER->log->ntfClass->ntfTypes->new->StringArr->ntfDesc->ntfInfo->new->MBeanNotificationInfo->RELATION_LOGGER->log->return->new->MBeanNotificationInfoArr
RelationServiceMBean#isActive():::Checks if the Relation Service is active:::
RelationServiceMBean#getPurgeFlag():::Returns the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgeRelations method is explicitly called:::
RelationServiceMBean#setPurgeFlag(boolean):::Sets the flag to indicate if when a notification is received for the unregistration of an MBean referenced in a relation, if an immediate "purge" of the relations (look for the relations no longer valid) has to be performed, or if that will be performed only when the purgeRelations method is explicitly called:::
RelationServiceMBean#createRelationType(String, RoleInfo[]):::Creates a relation type (RelationTypeSupport object) with given role infos (provided by the RoleInfo objects), and adds it in the Relation Service.:::
RelationServiceMBean#addRelationType(RelationType):::Adds given object as a relation type:::
RelationServiceMBean#getAllRelationTypeNames():::Retrieves names of all known relation types.:::
RelationServiceMBean#getRoleInfos(String):::Retrieves list of role infos (RoleInfo objects) of a given relation type.:::
RelationServiceMBean#getRoleInfo(String, String):::Retrieves role info for given role of a given relation type.:::
RelationServiceMBean#removeRelationType(String):::Removes given relation type from Relation Service:::
RelationServiceMBean#createRelation(String, String, RoleList):::Creates a simple relation (represented by a RelationSupport object) of given relation type, and adds it in the Relation Service:::
RelationServiceMBean#addRelation(ObjectName):::Adds an MBean created by the user (and registered by him in the MBean Server) as a relation in the Relation Service:::
RelationServiceMBean#isRelationMBean(String):::If the relation is represented by an MBean (created by the user and added as a relation in the Relation Service), returns the ObjectName of the MBean.:::
RelationServiceMBean#isRelation(ObjectName):::Returns the relation id associated to the given ObjectName if the MBean has been added as a relation in the Relation Service.:::
RelationServiceMBean#hasRelation(String):::Checks if there is a relation identified in Relation Service with given relation id.:::
RelationServiceMBean#getAllRelationIds():::Returns all the relation ids for all the relations handled by the Relation Service.:::
RelationServiceMBean#checkRoleReading(String, String):::Checks if given Role can be read in a relation of the given type.:::
RelationServiceMBean#checkRoleWriting(Role, String, Boolean):::Checks if given Role can be set in a relation of given type.:::
RelationServiceMBean#sendRelationCreationNotification(String):::Sends a notification (RelationNotification) for a relation creation:::
RelationServiceMBean#sendRoleUpdateNotification(String, Role, List):::Sends a notification (RelationNotification) for a role update in the given relation:::
RelationServiceMBean#sendRelationRemovalNotification(String, List):::Sends a notification (RelationNotification) for a relation removal:::
RelationServiceMBean#updateRoleMap(String, Role, List):::Handles update of the Relation Service role map for the update of given role in given relation:::
RelationServiceMBean#removeRelation(String):::Removes given relation from the Relation Service:::
RelationServiceMBean#purgeRelations():::Purges the relations:::
RelationServiceMBean#findReferencingRelations(ObjectName, String, String):::Retrieves the relations where a given MBean is referenced:::
RelationServiceMBean#findAssociatedMBeans(ObjectName, String, String):::Retrieves the MBeans associated to given one in a relation:::
RelationServiceMBean#findRelationsOfType(String):::Returns the relation ids for relations of the given type.:::
RelationServiceMBean#getRole(String, String):::Retrieves role value for given role name in given relation.:::
RelationServiceMBean#getRoles(String, String[]):::Retrieves values of roles with given names in given relation.:::
RelationServiceMBean#getAllRoles(String):::Returns all roles present in the relation.:::
RelationServiceMBean#getRoleCardinality(String, String):::Retrieves the number of MBeans currently referenced in the given role.:::
RelationServiceMBean#setRole(String, Role):::Sets the given role in given relation:::
RelationServiceMBean#setRoles(String, RoleList):::Sets the given roles in given relation:::
RelationServiceMBean#getReferencedMBeans(String):::Retrieves MBeans referenced in the various roles of the relation.:::
RelationServiceMBean#getRelationTypeName(String):::Returns name of associated relation type for given relation.:::
RelationSupport#getRole(String):::Retrieves role value for given role name:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->getRoleInt->cast->RELATION_LOGGER->log->return
RelationSupport#getRoles(String[]):::Retrieves values of roles with given names:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->getRolesInt->RELATION_LOGGER->log->return
RelationSupport#getAllRoles():::Returns all roles present in the relation.:::RELATION_LOGGER->log->result->try->getAllRolesInt->catch->finally->RELATION_LOGGER->log->return
RelationSupport#retrieveAllRoles():::Returns all roles in the relation without checking read mode.:::RELATION_LOGGER->log->result->synchronized->myRoleName2ValueMap->values->new->ArrayList<Role>->new->RoleList->RELATION_LOGGER->log->return
RelationSupport#getRoleCardinality(String):::Returns the number of MBeans currently referenced in the given role.:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->role->synchronized->myRoleName2ValueMap->get->if->pbType->try->RelationService->throwRoleProblemException->catch->finally->roleValue->role->getRoleValue->RELATION_LOGGER->log->return->roleValue->size
RelationSupport#setRole(Role):::Sets the given role:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->setRoleInt->RELATION_LOGGER->log->return
RelationSupport#setRoles(RoleList):::Sets the given roles:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->setRolesInt->RELATION_LOGGER->log->return
RelationSupport#handleMBeanUnregistration(ObjectName, String):::Callback used by the Relation Service when a MBean referenced in a role is unregistered:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->handleMBeanUnregistrationInt->RELATION_LOGGER->log->return
RelationSupport#getReferencedMBeans():::Retrieves MBeans referenced in the various roles of the relation.:::RELATION_LOGGER->log->refMBeanMap->new->HashMap<ObjectName,List<String>>->synchronized->foreach->myRoleName2ValueMap->values->currRoleName->currRole->getRoleName->currRefMBeanList->currRole->getRoleValue->foreach->mbeanRoleNameList->refMBeanMap->get->newRefFlg->if->new->ArrayList<String>->mbeanRoleNameList->add->if->refMBeanMap->put->RELATION_LOGGER->log->return
RelationSupport#getRelationTypeName():::Returns name of associated relation type.:::return
RelationSupport#getRelationServiceName():::Returns ObjectName of the Relation Service handling the relation.:::return
RelationSupport#getRelationId():::Returns relation identifier (used to uniquely identify the relation inside the Relation Service).:::return
RelationSupport#isInRelationService():::Returns an internal flag specifying if the object is still handled by the Relation Service.:::return->myInRelServFlg->get
RelationSupportMBean#isInRelationService():::Returns an internal flag specifying if the object is still handled by the Relation Service.:::
RelationSupportMBean#setRelationServiceManagementFlag(Boolean):::Specifies whether this relation is handled by the Relation Service. <P>BEWARE, this method has to be exposed as the Relation Service will access the relation through its management interface:::
RelationType#getRelationTypeName():::Returns the relation type name.:::
RelationType#getRoleInfos():::Returns the list of role definitions (ArrayList of RoleInfo objects).:::
RelationType#getRoleInfo(String):::Returns the role info (RoleInfo object) for the given role info name (null if not found).:::
RelationTypeSupport#getRelationTypeName():::Returns the relation type name.:::return
RelationTypeSupport#getRoleInfos():::Returns the list of role definitions (ArrayList of RoleInfo objects).:::return->roleName2InfoMap->values->new->ArrayList<RoleInfo>
RelationTypeSupport#getRoleInfo(String):::Returns the role info (RoleInfo object) for the given role info name (null if not found).:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->result->roleName2InfoMap->get->if->excMsgStrB->new->StringBuilder->excMsg->excMsgStrB->append->excMsgStrB->append->throw->excMsgStrB->toString->new->RoleInfoNotFoundException->RELATION_LOGGER->log->return
RelationTypeSupport#addRoleInfo(RoleInfo):::Add a role info:::if->excMsg->throw->new->IllegalArgumentException->RELATION_LOGGER->log->if->excMsg->throw->new->RuntimeException->roleName->roleInfo->getName->if->roleName2InfoMap->containsKey->excMsgStrB->new->StringBuilder->excMsg->excMsgStrB->append->excMsgStrB->append->throw->excMsgStrB->toString->new->InvalidRelationTypeException->roleName2InfoMap->new->RoleInfo->put->RELATION_LOGGER->log->return
Role#getRoleName():::Retrieves role name.:::return
Role#getRoleValue():::Retrieves role value.:::return
Role#setRoleName(String):::Sets role name.:::if->excMsg->throw->new->IllegalArgumentException->return
Role#setRoleValue(List):::Sets role value.:::if->excMsg->throw->new->IllegalArgumentException->new->ArrayList<ObjectName>->return
Role#toString():::Returns a string describing the role.:::result->new->StringBuilder->result->append->for->objNameIter->objectNameList->iterator->objNameIter->hasNext->return->result->toString
Role#clone():::Clone the role object.:::try->return->new->Role->catch->return->finally
Role#roleValueToString(List):::Returns a string for the given role value.:::if->excMsg->throw->new->IllegalArgumentException->result->new->StringBuilder->foreach->if->result->length->result->append->result->currObjName->toString->append->return->result->toString
RoleInfo#getName():::Returns the name of the role.:::return
RoleInfo#isReadable():::Returns read access mode for the role (true if it is readable).:::return
RoleInfo#isWritable():::Returns write access mode for the role (true if it is writable).:::return
RoleInfo#getDescription():::Returns description text for the role.:::return
RoleInfo#getMinDegree():::Returns minimum degree for corresponding role reference.:::return
RoleInfo#getMaxDegree():::Returns maximum degree for corresponding role reference.:::return
RoleInfo#getRefMBeanClassName():::Returns name of type of MBean expected to be referenced in corresponding role.:::return
RoleInfo#checkMinDegree(int):::Returns true if the value parameter is greater than or equal to the expected minimum degree, false otherwise.:::if->return->else->return
RoleInfo#checkMaxDegree(int):::Returns true if the value parameter is lower than or equal to the expected maximum degree, false otherwise.:::if->return->else->return
RoleInfo#toString():::Returns a string describing the role info.:::result->new->StringBuilder->result->append->result->append->result->append->result->append->result->append->result->append->result->append->return->result->toString
RoleList#asList():::Return a view of this list as a List<Role>:::if->if->checkTypeSafe->return->Util->cast
RoleList#add(Role):::Adds the Role specified as the last element of the list.:::if->excMsg->throw->new->IllegalArgumentException->super->add
RoleList#add(int, Role):::Inserts the role specified as an element at the position specified:::if->excMsg->throw->new->IllegalArgumentException->super->add
RoleList#set(int, Role):::Sets the element at the position specified to be the role specified:::if->excMsg->throw->new->IllegalArgumentException->super->set
RoleList#addAll(RoleList):::Appends all the elements in the RoleList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleList specified.:::if->return->return->super->addAll
RoleList#addAll(int, RoleList):::Inserts all of the elements in the RoleList specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the RoleList specified.:::if->excMsg->throw->new->IllegalArgumentException->return->super->addAll
RoleResult#getRoles():::Retrieves list of roles successfully accessed.:::return
RoleResult#getRolesUnresolved():::Retrieves list of roles unsuccessfully accessed.:::return
RoleResult#setRoles(RoleList):::Sets list of roles successfully accessed.:::if->new->RoleList->for->roleIter->list->iterator->roleIter->hasNext->else->return
RoleResult#setRolesUnresolved(RoleUnresolvedList):::Sets list of roles unsuccessfully accessed.:::if->new->RoleUnresolvedList->for->roleUnresIter->unresolvedList->iterator->roleUnresIter->hasNext->else->return
RoleStatus#isRoleStatus(int):::Returns true if given value corresponds to a known role status, false otherwise.:::if->return->return
RoleUnresolved#getRoleName():::Retrieves role name.:::return
RoleUnresolved#getRoleValue():::Retrieves role value.:::return
RoleUnresolved#getProblemType():::Retrieves problem type.:::return
RoleUnresolved#setRoleName(String):::Sets role name.:::if->excMsg->throw->new->IllegalArgumentException->return
RoleUnresolved#setRoleValue(List):::Sets role value.:::if->new->ArrayList<ObjectName>->else->return
RoleUnresolved#setProblemType(int):::Sets problem type.:::if->RoleStatus->isRoleStatus->excMsg->throw->new->IllegalArgumentException->return
RoleUnresolved#clone():::Clone this object.:::try->return->new->RoleUnresolved->catch->return->finally
RoleUnresolved#toString():::Return a string describing this object.:::result->new->StringBuilder->result->append->if->result->append->for->objNameIter->roleValue->iterator->objNameIter->hasNext->result->append->return->result->toString
RoleUnresolvedList#asList():::Return a view of this list as a List<RoleUnresolved>:::if->if->checkTypeSafe->return->Util->cast
RoleUnresolvedList#add(RoleUnresolved):::Adds the RoleUnresolved specified as the last element of the list.:::if->excMsg->throw->new->IllegalArgumentException->super->add
RoleUnresolvedList#add(int, RoleUnresolved):::Inserts the unresolved role specified as an element at the position specified:::if->excMsg->throw->new->IllegalArgumentException->super->add
RoleUnresolvedList#set(int, RoleUnresolved):::Sets the element at the position specified to be the unresolved role specified:::if->excMsg->throw->new->IllegalArgumentException->super->set
RoleUnresolvedList#addAll(RoleUnresolvedList):::Appends all the elements in the RoleUnresolvedList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleUnresolvedList specified.:::if->return->return->super->addAll
RoleUnresolvedList#addAll(int, RoleUnresolvedList):::Inserts all of the elements in the RoleUnresolvedList specified into this list, starting at the specified position, in the order in which they are returned by the Iterator of the RoleUnresolvedList specified.:::if->excMsg->throw->new->IllegalArgumentException->return->super->addAll

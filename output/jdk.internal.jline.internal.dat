Ansi#stripAnsi(String)::: ansi strip ansi:::if->return->return->ANSI_CODE_PATTERN->matcher->replaceAll
Configuration#initProperties()::: configuration init properties:::url->determineUrl->props->new->Properties->try->loadProperties->catch->Log->e->toString->debug->Log->warn->finally->return
Configuration#loadProperties(URL, Properties)::: configuration load properties:::Log->debug->input->url->openStream->try->props->new->BufferedInputStream->load->catch->finally->try->input->close->catch->finally->if->Log->debug->foreach->props->entrySet->Log->entry->getKey->entry->getValue->debug
Configuration#determineUrl()::: configuration determine url:::tmp->System->getProperty->if->return->Urls->create->else->file->getUserHome->new->File->return->Urls->create
Configuration#reset()::: configuration reset:::Log->debug->getProperties
Configuration#getProperties()::: configuration get properties:::if->initProperties->return
Configuration#getString(String, String)::: configuration get string:::checkNotNull->value->System->getProperty->if->getProperties->getProperty->if->return
Configuration#getString(String)::: configuration get string:::return->getString
Configuration#getBoolean(String)::: configuration get boolean:::return->getBoolean
Configuration#getBoolean(String, boolean)::: configuration get boolean:::value->getString->if->return->return->value->length->value->equalsIgnoreCase->value->equalsIgnoreCase->value->equalsIgnoreCase
Configuration#getInteger(String, int)::: configuration get integer:::str->getString->if->return->return->Integer->parseInt
Configuration#getLong(String, long)::: configuration get long:::str->getString->if->return->return->Long->parseLong
Configuration#getLineSeparator()::: configuration get line separator:::return->System->getProperty
Configuration#getUserHome()::: configuration get user home:::return->System->getProperty->new->File
Configuration#getOsName()::: configuration get os name:::return->System->getProperty->toLowerCase
Configuration#isWindows()::: configuration is windows:::return->getOsName->startsWith
Configuration#isHpux()::: configuration is hpux:::return->getOsName->startsWith
Configuration#getFileEncoding()::: configuration get file encoding:::return->System->getProperty
Configuration#getEncoding():::Get the default encoding:::foreach->new->StringArr->envEncoding->System->getenv->extractEncodingFromCtype->if->try->if->Charset->isSupported->return->catch->continue->finally->return->Charset->defaultCharset->name->getString
Configuration#extractEncodingFromCtype(String):::Parses the LC_CTYPE value to extract the encoding according to the POSIX standard, which says that the LC_CTYPE environment variable may be of the format [language[_territory][.codeset][@modifier]]:::if->ctype->indexOf->encodingAndModifier->ctype->ctype->indexOf->substring->if->encodingAndModifier->indexOf->return->encodingAndModifier->encodingAndModifier->indexOf->substring->else->return->return
Curses#tputs(Writer, String, Object...):::Print the given terminal capabilities:::index->length->str->length->ifte->exec->stack->new->Stack<Object>->while->ch->str->charAt->switch->str->charAt->if->throw->new->UnsupportedOperationException->else->switch->if->out->write->break->out->write->break->if->out->write->break->if->out->write->break->if->out->write->break->if->out->write->break->if->out->write->break->if->out->write->break->throw->new->IllegalArgumentException->break->str->charAt->if->out->write->break->str->charAt->switch->if->out->write->break->str->charAt->if->stack->push->break->str->charAt->if->if->stack->pop->else->if->if->stack->pop->else->throw->new->IllegalArgumentException->break->str->charAt->if->if->stack->push->else->if->if->stack->push->else->throw->new->IllegalArgumentException->break->str->charAt->if->stack->push->str->charAt->if->throw->new->IllegalArgumentException->break->start->while->str->charAt->if->v->Integer->str->substring->valueOf->stack->push->break->if->stack->stack->pop->toString->length->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v1->stack->pop->toInteger->stack->push->break->if->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->throw->new->IllegalArgumentException->else->break->if->throw->new->IllegalArgumentException->else->stack->pop->toInteger->break->if->throw->new->IllegalArgumentException->else->break->if->throw->new->IllegalArgumentException->else->break->if->toInteger->if->toInteger->break->out->Integer->stack->pop->toInteger->toString->write->break->throw->new->UnsupportedOperationException->break->if->out->write->break
Curses#toInteger(Object)::: curses to integer:::if->return->intValue->else->if->return->else->return->Integer->pop->toString->valueOf
InfoCmp#getInfoCmp(String)::: info cmp get info cmp:::caps->CAPS->get->if->p->new->ProcessBuilder->start->TerminalLineSettings->waitAndCapture->CAPS->put->return
InfoCmp#getAnsiCaps()::: info cmp get ansi caps:::return
InfoCmp#parseInfoCmp(String, Set, Map, Map)::: info cmp parse info cmp:::lines->capabilities->split->for->i
InfoCmp#getNames(String)::: info cmp get names:::names->NAMES->get->return->new->StringArr
InputStreamReader#close():::Closes this reader:::synchronized->if->in->close
InputStreamReader#getEncoding():::Returns the name of the encoding used to convert bytes into characters:::if->isOpen->return->return->decoder->charset->name
InputStreamReader#read():::Reads a single character from this reader and returns it as an integer with the two higher-order bytes set to 0:::synchronized->if->isOpen->throw->new->IOException->buf->new->charArr->return->read->Character->codePointAt
InputStreamReader#read(char[], int, int):::Reads at most length characters from this reader and stores them at position offset in the character array buf:::synchronized->if->isOpen->throw->new->IOException->if->throw->new->IndexOutOfBoundsException->if->return->out->CharBuffer->wrap->result->needInput->bytes->hasRemaining->while->out->hasRemaining->if->try->if->in->available->out->position->break->catch->finally->to_read->bytes->capacity->bytes->limit->off->bytes->arrayOffset->bytes->limit->was_red->in->bytes->array->read->if->break->else->if->break->bytes->bytes->limit->limit->decoder->decode->if->result->isUnderflow->if->bytes->limit->bytes->capacity->bytes->compact->bytes->bytes->position->limit->bytes->position->else->break->if->decoder->decode->decoder->flush->decoder->reset->if->result->isMalformed->throw->result->length->new->MalformedInputException->else->if->result->isUnmappable->throw->result->length->new->UnmappableCharacterException->return->out->position->out->position
InputStreamReader#isOpen()::: input stream reader is open:::return
InputStreamReader#ready():::Indicates whether this reader is ready to be read without blocking:::synchronized->if->throw->new->IOException->try->return->bytes->hasRemaining->in->available->catch->return->finally
Log#getOutput()::: log get output:::return
Log#setOutput(PrintStream)::: log set output:::checkNotNull
Log#render(PrintStream, Object):::Helper to support rendering messages.:::if->message->getClass->isArray->array->out->print->for->i->out->print->else->out->print
Log#log(Level, Object...)::: log log:::if->logWithJul->return->synchronized->output->format->for->i->output->println->output->flush
Log#logWithJul(Level, Object...)::: log log with jul:::
Log#trace(Object...)::: log trace:::if->log
Log#debug(Object...)::: log debug:::if->log
Log#info(Object...)::: log info:::log
Log#warn(Object...)::: log warn:::log
Log#error(Object...)::: log error:::log
NonBlockingInputStream#shutdown():::Shuts down the thread that is handling blocking I/O:::if->notify
NonBlockingInputStream#isNonBlockingEnabled():::Non-blocking is considered enabled if the feature is enabled and the I/O thread has not been shut down.:::return
NonBlockingInputStream#close()::: non blocking input stream close:::in->close->shutdown
NonBlockingInputStream#read()::: non blocking input stream read:::if->return->read->return->in->read
NonBlockingInputStream#peek(long):::Peeks to see if there is a byte waiting in the input stream without actually consuming the byte.:::if->throw->new->UnsupportedOperationException->return->read
NonBlockingInputStream#read(long):::Attempts to read a character from the input stream for a specific period of time.:::if->throw->new->UnsupportedOperationException->return->read
NonBlockingInputStream#read(long, boolean):::Attempts to read a character from the input stream for a specific period of time.:::if->toBeThrown->if->throw->if->else->if->in->read->else->if->notify->isInfinite->while->start->System->currentTimeMillis->try->wait->catch->finally->if->toBeThrown->if->throw->if->break->if->System->currentTimeMillis->ret->if->return
NonBlockingInputStream#read(byte[], int, int):::This version of read() is very specific to jline's purposes, it will always always return a single byte at a time, rather than filling the entire buffer.:::if->throw->new->NullPointerException->else->if->throw->new->IndexOutOfBoundsException->else->if->return->c->if->this->read->else->in->read->if->return->return
NonBlockingInputStream#run()::: non blocking input stream run:::Log->debug->needToShutdown->needToRead->while->synchronized->try->if->wait->catch->finally->if->charRead->failure->try->in->read->catch->finally->synchronized->notify->Log->debug
Preconditions#checkNotNull(T)::: preconditions check not null:::if->throw->new->NullPointerException->return
ShutdownHooks#add(T)::: shutdown hooks add:::checkNotNull->if->Log->debug->return->if->new->Thread->addHook->Log->debug->tasks->add->return
ShutdownHooks#runTasks()::: shutdown hooks run tasks:::Log->debug->foreach->tasks->tasks->size->new->TaskArr->toArray->Log->debug->try->task->run->catch->Log->warn->finally->tasks->clear
ShutdownHooks#addHook(Thread)::: shutdown hooks add hook:::Log->debug->try->Runtime->getRuntime->addShutdownHook->catch->Log->debug->finally->return
ShutdownHooks#remove(Task)::: shutdown hooks remove:::checkNotNull->if->return->tasks->remove->if->tasks->isEmpty->removeHook
ShutdownHooks#removeHook(Thread)::: shutdown hooks remove hook:::Log->debug->try->Runtime->getRuntime->removeShutdownHook->catch->Log->debug->finally
ShutdownHooks.Task#run()::: task run:::
TerminalLineSettings#getSettings(String)::: terminal line settings get settings:::settings->SETTINGS->get->if->new->TerminalLineSettings->SETTINGS->put->return
TerminalLineSettings#getTtyDevice()::: terminal line settings get tty device:::return
TerminalLineSettings#getConfig()::: terminal line settings get config:::return
TerminalLineSettings#restore()::: terminal line settings restore:::set
TerminalLineSettings#get(String)::: terminal line settings get:::checkNotNull->return->stty
TerminalLineSettings#set(String)::: terminal line settings set:::checkNotNull->args->split->stty
TerminalLineSettings#set(String...)::: terminal line settings set:::checkNotNull->stty
TerminalLineSettings#undef(String)::: terminal line settings undef:::checkNotNull->stty
TerminalLineSettings#getProperty(String)::: Get the value of a stty property, including the management of a cache:::checkNotNull->if->fetchConfig->return->return->getProperty
TerminalLineSettings#getPropertyAsString(String)::: terminal line settings get property as string:::checkNotNull->if->fetchConfig->return->return->getPropertyAsString
TerminalLineSettings#fetchConfig(String)::: terminal line settings fetch config:::currentTime->System->currentTimeMillis->try->if->get->catch->if->Thread->currentThread->interrupt->Log->debug->if->return->finally->if->return
TerminalLineSettings#getPropertyAsString(String, String)::: Parses a stty output (provided by stty -a) and return the value of a given property:::pattern->Pattern->compile->matcher->pattern->matcher->if->matcher->find->Pattern->compile->pattern->matcher->if->matcher->find->Pattern->compile->pattern->matcher->if->matcher->find->return->return->matcher->group
TerminalLineSettings#getProperty(String, String)::: terminal line settings get property:::str->getPropertyAsString->return->parseControlChar
TerminalLineSettings#parseControlChar(String)::: terminal line settings parse control char:::if->equals->return->if->str->charAt->return->Integer->parseInt->if->str->charAt->str->charAt->return->Integer->parseInt->if->str->charAt->if->str->charAt->return->else->return->str->charAt->else->if->str->charAt->str->charAt->if->str->charAt->if->str->charAt->return->else->return->str->charAt->else->return->str->charAt->else->return->str->charAt
TerminalLineSettings#stty(String...)::: terminal line settings stty:::s->new->StringArr->System->arraycopy->return->exec
TerminalLineSettings#exec(String...)::: terminal line settings exec:::checkNotNull->Log->trace->p->if->try->new->ProcessBuilder->inheritInput->start->catch->finally->if->sb->new->StringBuilder->for->i->sb->append->sb->append->sb->toString->new->ProcessBuilder->start->result->waitAndCapture->Log->trace->return
TerminalLineSettings#inheritInput(ProcessBuilder)::: terminal line settings inherit input:::REDIRECT_INPUT_METHOD->invoke->return
TerminalLineSettings#waitAndCapture(Process)::: terminal line settings wait and capture:::bout->new->ByteArrayOutputStream->in->err->out->try->c->p->getInputStream->while->in->read->bout->write->p->getErrorStream->while->err->read->bout->write->p->getOutputStream->p->waitFor->catch->finally->close->return->bout->toString
TerminalLineSettings#close(Closeable...)::: terminal line settings close:::foreach->if->try->c->close->catch->finally
Urls#create(String)::: urls create:::if->return->try->return->new->URL->catch->return->new->File->create->finally
Urls#create(File)::: urls create:::try->return->file->toURI->toURL->catch->throw->new->IllegalStateException->finally

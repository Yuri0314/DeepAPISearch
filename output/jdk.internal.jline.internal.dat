Configuration#getEncoding():::Get the default encoding:::foreach->new->StringArr->envEncoding->System->getenv->extractEncodingFromCtype->if->try->if->Charset->isSupported->return->catch->continue->finally->return->Charset->defaultCharset->name->getString
Configuration#extractEncodingFromCtype(String):::Parses the LC_CTYPE value to extract the encoding according to the POSIX standard, which says that the LC_CTYPE environment variable may be of the format [language[_territory][.codeset][@modifier]]:::if->ctype->indexOf->encodingAndModifier->ctype->ctype->indexOf->substring->if->encodingAndModifier->indexOf->return->encodingAndModifier->encodingAndModifier->indexOf->substring->else->return->return
Curses#tputs(Writer, String, Object...):::Print the given terminal capabilities:::index->length->str->length->ifte->exec->stack->new->Stack<Object>->while->ch->str->charAt->switch->str->charAt->if->throw->new->UnsupportedOperationException->else->switch->if->out->write->break->out->write->break->if->out->write->break->if->out->write->break->if->out->write->break->if->out->write->break->if->out->write->break->if->out->write->break->throw->new->IllegalArgumentException->break->str->charAt->if->out->write->break->str->charAt->switch->if->out->write->break->str->charAt->if->stack->push->break->str->charAt->if->if->stack->pop->else->if->if->stack->pop->else->throw->new->IllegalArgumentException->break->str->charAt->if->if->stack->push->else->if->if->stack->push->else->throw->new->IllegalArgumentException->break->str->charAt->if->stack->push->str->charAt->if->throw->new->IllegalArgumentException->break->start->while->str->charAt->if->v->Integer->str->substring->valueOf->stack->push->break->if->stack->stack->pop->toString->length->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->v1->stack->pop->toInteger->stack->push->break->if->v1->stack->pop->toInteger->stack->push->break->if->v2->stack->pop->toInteger->v1->stack->pop->toInteger->stack->push->break->if->throw->new->IllegalArgumentException->else->break->if->throw->new->IllegalArgumentException->else->stack->pop->toInteger->break->if->throw->new->IllegalArgumentException->else->break->if->throw->new->IllegalArgumentException->else->break->if->toInteger->if->toInteger->break->out->Integer->stack->pop->toInteger->toString->write->break->throw->new->UnsupportedOperationException->break->if->out->write->break
InputStreamReader#close():::Closes this reader:::synchronized->if->in->close
InputStreamReader#getEncoding():::Returns the name of the encoding used to convert bytes into characters:::if->isOpen->return->return->decoder->charset->name
InputStreamReader#read():::Reads a single character from this reader and returns it as an integer with the two higher-order bytes set to 0:::synchronized->if->isOpen->throw->new->IOException->buf->new->charArr->return->read->Character->codePointAt
InputStreamReader#read(char[], int, int):::Reads at most length characters from this reader and stores them at position offset in the character array buf:::synchronized->if->isOpen->throw->new->IOException->if->throw->new->IndexOutOfBoundsException->if->return->out->CharBuffer->wrap->result->needInput->bytes->hasRemaining->while->out->hasRemaining->if->try->if->in->available->out->position->break->catch->finally->to_read->bytes->capacity->bytes->limit->off->bytes->arrayOffset->bytes->limit->was_red->in->bytes->array->read->if->break->else->if->break->bytes->bytes->limit->limit->decoder->decode->if->result->isUnderflow->if->bytes->limit->bytes->capacity->bytes->compact->bytes->bytes->position->limit->bytes->position->else->break->if->decoder->decode->decoder->flush->decoder->reset->if->result->isMalformed->throw->result->length->new->MalformedInputException->else->if->result->isUnmappable->throw->result->length->new->UnmappableCharacterException->return->out->position->out->position
InputStreamReader#ready():::Indicates whether this reader is ready to be read without blocking:::synchronized->if->throw->new->IOException->try->return->bytes->hasRemaining->in->available->catch->return->finally
Log#render(PrintStream, Object):::Helper to support rendering messages.:::if->message->getClass->isArray->array->out->print->for->i->out->print->else->out->print
NonBlockingInputStream#shutdown():::Shuts down the thread that is handling blocking I/O:::if->notify
NonBlockingInputStream#isNonBlockingEnabled():::Non-blocking is considered enabled if the feature is enabled and the I/O thread has not been shut down.:::return
NonBlockingInputStream#peek(long):::Peeks to see if there is a byte waiting in the input stream without actually consuming the byte.:::if->throw->new->UnsupportedOperationException->return->read
NonBlockingInputStream#read(long):::Attempts to read a character from the input stream for a specific period of time.:::if->throw->new->UnsupportedOperationException->return->read
NonBlockingInputStream#read(byte[], int, int):::This version of read() is very specific to jline's purposes, it will always always return a single byte at a time, rather than filling the entire buffer.:::if->throw->new->NullPointerException->else->if->throw->new->IndexOutOfBoundsException->else->if->return->c->if->this->read->else->in->read->if->return->return
TerminalLineSettings#getProperty(String)::: Get the value of a stty property, including the management of a cache:::checkNotNull->if->fetchConfig->return->return->getProperty
TerminalLineSettings#getPropertyAsString(String, String)::: Parses a stty output (provided by stty -a) and return the value of a given property:::pattern->Pattern->compile->matcher->pattern->matcher->if->matcher->find->Pattern->compile->pattern->matcher->if->matcher->find->Pattern->compile->pattern->matcher->if->matcher->find->return->return->matcher->group

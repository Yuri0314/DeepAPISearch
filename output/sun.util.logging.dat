sun.util.logging.PlatformLogger.Bridge#getName()->String:::Gets the name for this platform logger.
sun.util.logging.PlatformLogger.Bridge#isLoggable(Level)->boolean:::Returns true if a message of the given level would actually be logged by this logger.
sun.util.logging.PlatformLogger.Bridge#isEnabled()->boolean::: bridge is enabled
sun.util.logging.PlatformLogger.Bridge#log(Level, String)->void::: bridge log
sun.util.logging.PlatformLogger.Bridge#log(Level, String, Throwable)->void::: bridge log
sun.util.logging.PlatformLogger.Bridge#log(Level, String, Object...)->void::: bridge log
sun.util.logging.PlatformLogger.Bridge#log(Level, Supplier)->void::: bridge log
sun.util.logging.PlatformLogger.Bridge#log(Level, Throwable, Supplier)->void::: bridge log
sun.util.logging.PlatformLogger.Bridge#logp(Level, String, String, String)->void::: bridge logp
sun.util.logging.PlatformLogger.Bridge#logp(Level, String, String, Supplier)->void::: bridge logp
sun.util.logging.PlatformLogger.Bridge#logp(Level, String, String, String, Object...)->void::: bridge logp
sun.util.logging.PlatformLogger.Bridge#logp(Level, String, String, String, Throwable)->void::: bridge logp
sun.util.logging.PlatformLogger.Bridge#logp(Level, String, String, Throwable, Supplier)->void::: bridge logp
sun.util.logging.PlatformLogger.Bridge#logrb(Level, String, String, ResourceBundle, String, Object...)->void::: bridge logrb
sun.util.logging.PlatformLogger.Bridge#logrb(Level, String, String, ResourceBundle, String, Throwable)->void::: bridge logrb
sun.util.logging.PlatformLogger.Bridge#logrb(Level, ResourceBundle, String, Object...)->void::: bridge logrb
sun.util.logging.PlatformLogger.Bridge#logrb(Level, ResourceBundle, String, Throwable)->void::: bridge logrb
sun.util.logging.PlatformLogger.Bridge#convert(System.Logger)->Bridge::: bridge convert
sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration#getPlatformLevel()->Level::: logger configuration get platform level
sun.util.logging.PlatformLogger.ConfigurableBridge.LoggerConfiguration#setPlatformLevel(Level)->void::: logger configuration set platform level
sun.util.logging.PlatformLogger.ConfigurableBridge#getLoggerConfiguration()->LoggerConfiguration::: configurable bridge get logger configuration
sun.util.logging.PlatformLogger.ConfigurableBridge#getLoggerConfiguration(PlatformLogger.Bridge)->LoggerConfiguration::: configurable bridge get logger configuration
sun.util.logging.PlatformLogger#getLogger(String)->PlatformLogger:::Returns a PlatformLogger of a given name.
sun.util.logging.PlatformLogger#isEnabled()->boolean:::A convenience method to test if the logger is turned off
sun.util.logging.PlatformLogger#getName()->String:::Gets the name for this platform logger.
sun.util.logging.PlatformLogger#isLoggable(Level)->boolean:::Returns true if a message of the given level would actually be logged by this logger.
sun.util.logging.PlatformLogger#level()->Level:::Get the log level that has been specified for this PlatformLogger
sun.util.logging.PlatformLogger#setLevel(Level)->void:::Set the log level specifying which message levels will be logged by this logger
sun.util.logging.PlatformLogger#severe(String)->void:::Logs a SEVERE message.
sun.util.logging.PlatformLogger#severe(String, Throwable)->void::: platform logger severe
sun.util.logging.PlatformLogger#severe(String, Object...)->void::: platform logger severe
sun.util.logging.PlatformLogger#warning(String)->void:::Logs a WARNING message.
sun.util.logging.PlatformLogger#warning(String, Throwable)->void::: platform logger warning
sun.util.logging.PlatformLogger#warning(String, Object...)->void::: platform logger warning
sun.util.logging.PlatformLogger#info(String)->void:::Logs an INFO message.
sun.util.logging.PlatformLogger#info(String, Throwable)->void::: platform logger info
sun.util.logging.PlatformLogger#info(String, Object...)->void::: platform logger info
sun.util.logging.PlatformLogger#config(String)->void:::Logs a CONFIG message.
sun.util.logging.PlatformLogger#config(String, Throwable)->void::: platform logger config
sun.util.logging.PlatformLogger#config(String, Object...)->void::: platform logger config
sun.util.logging.PlatformLogger#fine(String)->void:::Logs a FINE message.
sun.util.logging.PlatformLogger#fine(String, Throwable)->void::: platform logger fine
sun.util.logging.PlatformLogger#fine(String, Object...)->void::: platform logger fine
sun.util.logging.PlatformLogger#finer(String)->void:::Logs a FINER message.
sun.util.logging.PlatformLogger#finer(String, Throwable)->void::: platform logger finer
sun.util.logging.PlatformLogger#finer(String, Object...)->void::: platform logger finer
sun.util.logging.PlatformLogger#finest(String)->void:::Logs a FINEST message.
sun.util.logging.PlatformLogger#finest(String, Throwable)->void::: platform logger finest
sun.util.logging.PlatformLogger#finest(String, Object...)->void::: platform logger finest
sun.util.logging.PlatformLogger#toPlatformLevel(java.lang.System.Logger.Level)->Level::: platform logger to platform level

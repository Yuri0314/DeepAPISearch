PlatformLogger.Bridge#getName():::Gets the name for this platform logger.:::
PlatformLogger.Bridge#isLoggable(Level):::Returns true if a message of the given level would actually be logged by this logger.:::
PlatformLogger.Bridge#isEnabled()::: bridge is enabled:::
PlatformLogger.Bridge#log(Level, String)::: bridge log:::
PlatformLogger.Bridge#log(Level, String, Throwable)::: bridge log:::
PlatformLogger.Bridge#log(Level, String, Object...)::: bridge log:::
PlatformLogger.Bridge#log(Level, Supplier)::: bridge log:::
PlatformLogger.Bridge#log(Level, Throwable, Supplier)::: bridge log:::
PlatformLogger.Bridge#logp(Level, String, String, String)::: bridge logp:::
PlatformLogger.Bridge#logp(Level, String, String, Supplier)::: bridge logp:::
PlatformLogger.Bridge#logp(Level, String, String, String, Object...)::: bridge logp:::
PlatformLogger.Bridge#logp(Level, String, String, String, Throwable)::: bridge logp:::
PlatformLogger.Bridge#logp(Level, String, String, Throwable, Supplier)::: bridge logp:::
PlatformLogger.Bridge#logrb(Level, String, String, ResourceBundle, String, Object...)::: bridge logrb:::
PlatformLogger.Bridge#logrb(Level, String, String, ResourceBundle, String, Throwable)::: bridge logrb:::
PlatformLogger.Bridge#logrb(Level, ResourceBundle, String, Object...)::: bridge logrb:::
PlatformLogger.Bridge#logrb(Level, ResourceBundle, String, Throwable)::: bridge logrb:::
PlatformLogger.Bridge#convert(System.Logger)::: bridge convert:::if->return->else->return->new->LoggerWrapper<>
PlatformLogger.ConfigurableBridge.LoggerConfiguration#getPlatformLevel()::: logger configuration get platform level:::
PlatformLogger.ConfigurableBridge.LoggerConfiguration#setPlatformLevel(Level)::: logger configuration set platform level:::
PlatformLogger.ConfigurableBridge#getLoggerConfiguration()::: configurable bridge get logger configuration:::return
PlatformLogger.ConfigurableBridge#getLoggerConfiguration(PlatformLogger.Bridge)::: configurable bridge get logger configuration:::if->return->getLoggerConfiguration->else->return
PlatformLogger#getLogger(String):::Returns a PlatformLogger of a given name.:::log->ref->loggers->get->if->ref->get->if->LazyLoggers->getModule->getLazyLogger->convert->new->PlatformLogger->loggers->new->WeakReference<>->put->return
PlatformLogger#isEnabled():::A convenience method to test if the logger is turned off:::return->loggerProxy->isEnabled
PlatformLogger#getName():::Gets the name for this platform logger.:::return->loggerProxy->getName
PlatformLogger#isLoggable(Level):::Returns true if a message of the given level would actually be logged by this logger.:::if->throw->new->NullPointerException->return->loggerProxy->isLoggable
PlatformLogger#level():::Get the log level that has been specified for this PlatformLogger:::spi->getLoggerConfiguration->return->spi->getPlatformLevel
PlatformLogger#setLevel(Level):::Set the log level specifying which message levels will be logged by this logger:::spi->getLoggerConfiguration->if->spi->setPlatformLevel
PlatformLogger#severe(String):::Logs a SEVERE message.:::loggerProxy->log
PlatformLogger#severe(String, Throwable)::: platform logger severe:::loggerProxy->log
PlatformLogger#severe(String, Object...)::: platform logger severe:::loggerProxy->log
PlatformLogger#warning(String):::Logs a WARNING message.:::loggerProxy->log
PlatformLogger#warning(String, Throwable)::: platform logger warning:::loggerProxy->log
PlatformLogger#warning(String, Object...)::: platform logger warning:::loggerProxy->log
PlatformLogger#info(String):::Logs an INFO message.:::loggerProxy->log
PlatformLogger#info(String, Throwable)::: platform logger info:::loggerProxy->log
PlatformLogger#info(String, Object...)::: platform logger info:::loggerProxy->log
PlatformLogger#config(String):::Logs a CONFIG message.:::loggerProxy->log
PlatformLogger#config(String, Throwable)::: platform logger config:::loggerProxy->log
PlatformLogger#config(String, Object...)::: platform logger config:::loggerProxy->log
PlatformLogger#fine(String):::Logs a FINE message.:::loggerProxy->log
PlatformLogger#fine(String, Throwable)::: platform logger fine:::loggerProxy->log
PlatformLogger#fine(String, Object...)::: platform logger fine:::loggerProxy->log
PlatformLogger#finer(String):::Logs a FINER message.:::loggerProxy->log
PlatformLogger#finer(String, Throwable)::: platform logger finer:::loggerProxy->log
PlatformLogger#finer(String, Object...)::: platform logger finer:::loggerProxy->log
PlatformLogger#finest(String):::Logs a FINEST message.:::loggerProxy->log
PlatformLogger#finest(String, Throwable)::: platform logger finest:::loggerProxy->log
PlatformLogger#finest(String, Object...)::: platform logger finest:::loggerProxy->log
PlatformLogger#toPlatformLevel(java.lang.System.Logger.Level)::: platform logger to platform level:::if->return->return->level->ordinal

AMD64HotSpotBackend#emitCodePrefix(ResolvedJavaMethod, CompilationResultBuilder, AMD64MacroAssembler, RegisterConfig, Label):::Emits the code prior to the verified entry point.:::providers->getProviders->if->installedCodeOwner->isStatic->crb->recordMark->cc->regConfig->new->JavaTypeArr->providers->getMetaAccess->lookupJavaType->getCallingConvention->inlineCacheKlass->receiver->cc->getArgument->asRegister->src->new->AMD64Address->if->register->heapBase->providers->getRegisters->getHeapBaseRegister->AMD64HotSpotMove->decodeKlassPointer->if->GeneratePIC->crb->getOptions->getValue->asm->asm->getPlaceholder->movq->crb->recordMark->else->if->if->asm->xorq->else->asm->movq->asm->cmpq->else->asm->cmpq->AMD64Call->getForeignCalls->lookupForeignCall->directConditionalJmp->asm->align->crb->recordMark->asm->bind->crb->recordMark->if->GeneratePIC->crb->getOptions->getValue->frameContext->if->crb->LIRKind->value->new->HotSpotSentinelConstant->recordInlineDataInCodeWithNote->asm->asm->getPlaceholder->movq->asm->testq->AMD64Call->getForeignCalls->lookupForeignCall->directConditionalJmp
AMD64HotSpotBackend#emitCodeBody(ResolvedJavaMethod, CompilationResultBuilder, LIR):::Emits the code which starts at the verified entry point.:::crb->emit
AMD64HotSpotLIRGenerator.SaveRbp#finalize(boolean):::Replaces this operation with the appropriate move for saving rbp.:::dst->if->else->getResult->getFrameMapBuilder->freeRBPSpillSlot->LIRKind->value->newVariable->placeholder->getResult->getLIR->rbp->LIRKind->value->asValue->new->MoveFromRegOp->replace->return
AMD64HotSpotLIRGenerator#allocateSaveRegisterLocation(Register):::Allocate a stack slot for saving a register.:::kind->target->register->getRegisterCategory->getLargestStorableKind->if->kind->getVectorLength->return->getResult->getFrameMapBuilder->LIRKind->value->allocateSpillSlot
AMD64HotSpotLIRGenerator#getStub():::Gets the Stub this generator is generating code for or null if a stub is not being generated.:::return->getResult->getStub

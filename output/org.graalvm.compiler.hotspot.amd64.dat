Plugin_AMD64X87MathIntrinsicNode_compute#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 x87 math intrinsic node_compute execute:::arg0->arg1->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->node->new->org.graalvm.compiler.hotspot.amd64.AMD64X87MathIntrinsicNode->b->addPush->return
Plugin_AMD64X87MathIntrinsicNode_compute#getSource()::: plugin_ d64 x87 math intrinsic node_compute get source:::return
PluginFactory_AMD64X87MathIntrinsicNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ d64 x87 math intrinsic node register plugins:::plugins->new->Plugin_AMD64X87MathIntrinsicNode_compute->register
Plugin_AMD64X87MathSnippets_callDouble1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])::: plugin_ d64 x87 math snippets_call double1 execute:::arg0->arg1->arg2->if->isConstant->snippetReflection->asJavaConstant->asObject->else->return->arg3->return->intrinsify
Plugin_AMD64X87MathSnippets_callDouble1#getSource()::: plugin_ d64 x87 math snippets_call double1 get source:::return
PluginFactory_AMD64X87MathSnippets#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)::: plugin factory_ d64 x87 math snippets register plugins:::plugins->new->Plugin_AMD64X87MathSnippets_callDouble1->register
AMD64ArrayCompareToStub#byteArrayCompareToByteArray(Pointer, Pointer, int, int)::: d64 array compare to stub byte array compare to byte array:::return->ArrayCompareToNode->compareTo
AMD64ArrayCompareToStub#byteArrayCompareToCharArray(Pointer, Pointer, int, int)::: d64 array compare to stub byte array compare to char array:::return->ArrayCompareToNode->compareTo
AMD64ArrayCompareToStub#charArrayCompareToByteArray(Pointer, Pointer, int, int)::: d64 array compare to stub char array compare to byte array:::return->ArrayCompareToNode->compareTo
AMD64ArrayCompareToStub#charArrayCompareToCharArray(Pointer, Pointer, int, int)::: d64 array compare to stub char array compare to char array:::return->ArrayCompareToNode->compareTo
AMD64ArrayEqualsStub#booleanArraysEquals(Pointer, Pointer, int)::: d64 array equals stub boolean arrays equals:::return->ArrayEqualsNode->equals
AMD64ArrayEqualsStub#byteArraysEquals(Pointer, Pointer, int)::: d64 array equals stub byte arrays equals:::return->ArrayEqualsNode->equals
AMD64ArrayEqualsStub#charArraysEquals(Pointer, Pointer, int)::: d64 array equals stub char arrays equals:::return->ArrayEqualsNode->equals
AMD64ArrayEqualsStub#shortArraysEquals(Pointer, Pointer, int)::: d64 array equals stub short arrays equals:::return->ArrayEqualsNode->equals
AMD64ArrayEqualsStub#intArraysEquals(Pointer, Pointer, int)::: d64 array equals stub int arrays equals:::return->ArrayEqualsNode->equals
AMD64ArrayEqualsStub#longArraysEquals(Pointer, Pointer, int)::: d64 array equals stub long arrays equals:::return->ArrayEqualsNode->equals
AMD64ArrayEqualsStub#floatArraysEquals(Pointer, Pointer, int)::: d64 array equals stub float arrays equals:::return->ArrayEqualsNode->equals
AMD64ArrayEqualsStub#doubleArraysEquals(Pointer, Pointer, int)::: d64 array equals stub double arrays equals:::return->ArrayEqualsNode->equals
AMD64ArrayEqualsStub#byteArraysEqualsDirect(Pointer, Pointer, int)::: d64 array equals stub byte arrays equals direct:::return->ArrayRegionEqualsNode->regionEquals
AMD64ArrayEqualsStub#charArraysEqualsDirect(Pointer, Pointer, int)::: d64 array equals stub char arrays equals direct:::return->ArrayRegionEqualsNode->regionEquals
AMD64ArrayEqualsStub#charArrayEqualsByteArray(Pointer, Pointer, int)::: d64 array equals stub char array equals byte array:::return->ArrayRegionEqualsNode->regionEquals
AMD64ArrayIndexOfStub#indexOfTwoConsecutiveBytes(byte[], int, int, int)::: d64 array index of stub index of two consecutive bytes:::return->AMD64ArrayIndexOfNode->indexOf2ConsecutiveBytes
AMD64ArrayIndexOfStub#indexOfTwoConsecutiveChars(char[], int, int, int)::: d64 array index of stub index of two consecutive chars:::return->AMD64ArrayIndexOfNode->indexOf2ConsecutiveChars
AMD64ArrayIndexOfStub#indexOfTwoConsecutiveCharsCompact(byte[], int, int, int)::: d64 array index of stub index of two consecutive chars compact:::return->AMD64ArrayIndexOfNode->indexOf2ConsecutiveChars
AMD64ArrayIndexOfStub#indexOf1Byte(byte[], int, int, byte)::: d64 array index of stub index of1 byte:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf2Bytes(byte[], int, int, byte, byte)::: d64 array index of stub index of2 bytes:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf3Bytes(byte[], int, int, byte, byte, byte)::: d64 array index of stub index of3 bytes:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf4Bytes(byte[], int, int, byte, byte, byte, byte)::: d64 array index of stub index of4 bytes:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf1Char(char[], int, int, char)::: d64 array index of stub index of1 char:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf2Chars(char[], int, int, char, char)::: d64 array index of stub index of2 chars:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf3Chars(char[], int, int, char, char, char)::: d64 array index of stub index of3 chars:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf4Chars(char[], int, int, char, char, char, char)::: d64 array index of stub index of4 chars:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf1CharCompact(byte[], int, int, char)::: d64 array index of stub index of1 char compact:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf2CharsCompact(byte[], int, int, char, char)::: d64 array index of stub index of2 chars compact:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf3CharsCompact(byte[], int, int, char, char, char)::: d64 array index of stub index of3 chars compact:::return->AMD64ArrayIndexOfNode->indexOf
AMD64ArrayIndexOfStub#indexOf4CharsCompact(byte[], int, int, char, char, char, char)::: d64 array index of stub index of4 chars compact:::return->AMD64ArrayIndexOfNode->indexOf
AMD64DeoptimizeOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 deoptimize op emit code:::AMD64Call->lookupForeignCall->directCall
AMD64HotSpotAddressLowering#improveUncompression(AMD64AddressNode, CompressionNode, ValueNode)::: d64 hot spot address lowering improve uncompression:::encoding->compression->getEncoding->scale->Scale->encoding->getShift->fromShift->if->return->if->encoding->getBase->if->compression->stamp->base->compression->graph->new->HeapBaseNode->unique->addr->setBase->else->return->else->if->encoding->getBase->compression->stamp->if->if->base->compression->graph->new->GraalHotSpotVMConfigNode->unique->addr->setBase->else->return->else->if->encoding->getBase->updateDisplacement->addr->setBase->else->return->else->addr->setBase->addr->setScale->addr->compression->getValue->setIndex->return
AMD64HotSpotAddressLowering#preProcess(StructuredGraph)::: d64 hot spot address lowering pre process:::if->graph->hasLoops->loopsData->new->LoopsData->loopsData->detectedCountedLoops->foreach->loopsData->countedLoops->foreach->loop->whole->nodes->filter->tryOptimize
AMD64HotSpotAddressLowering#postProcess(AddressNode)::: d64 hot spot address lowering post process:::address->address->address->getBase->tryImplicitZeroExtend->setBase->address->address->getIndex->tryImplicitZeroExtend->setIndex
AMD64HotSpotAddressLowering#tryOptimize(OffsetAddressNode, LoopEx)::: d64 hot spot address lowering try optimize:::ivs->loop->getInductionVariables->currentIV->ivs->offsetAddress->getOffset->get->while->if->break->currentValue->currentIV->valueNode->if->currentValue->isDeleted->break->if->zeroExtendNode->if->applicableToImplicitZeroExtend->input->zeroExtendNode->getValue->if->add->if->add->getX->isConstant->add->getX->add->getY->optimizeAdd->else->if->add->getY->isConstant->add->getY->add->getX->optimizeAdd->getBase
AMD64HotSpotAddressLowering#optimizeAdd(ZeroExtendNode, ConstantNode, ValueNode, LoopEx):::Given that Add(a, cst) is always positive, performs the following: ZeroExtend(Add(a, cst)) -> Add(SignExtend(a), SignExtend(cst)).:::graph->zeroExtendNode->graph->addNode->graph->signExtend->ConstantNode->constant->asJavaConstant->asInt->forLong->new->AddNode->unique->zeroExtendNode->replaceAtUsages
AMD64HotSpotAddressLowering#signExtend(ValueNode, LoopEx):::Create a sign extend for input, or zero extend if input can be proven positive.:::graph->input->graph->if->ivs->loop->getInductionVariables->inductionVariable->ivs->get->if->countedLoopInfo->loop->counted->initStamp->inductionVariable->initNode->stamp->if->initStamp->isPositive->if->inductionVariable->isConstantExtremum->countedLoopInfo->counterNeverOverflows->init->inductionVariable->constantInit->stride->inductionVariable->constantStride->extremum->inductionVariable->constantExtremum->if->shortestTrip->if->countedLoopInfo->constantMaxTripCount->equals->return->graph->new->ZeroExtendNode->unique->if->countedLoopInfo->getCounter->inductionVariable->direction->countedLoopInfo->getOverFlowGuard->countedLoopInfo->counterNeverOverflows->return->graph->new->ZeroExtendNode->unique->return->input->graph->SignExtendNode->create->maybeAddOrUnique
AMD64HotSpotAddressLowering#applicableToImplicitZeroExtend(ZeroExtendNode)::: d64 hot spot address lowering applicable to implicit zero extend:::return->zeroExtendNode->isInputAlwaysPositive->zeroExtendNode->getInputBits->zeroExtendNode->getResultBits
AMD64HotSpotAddressLowering#tryImplicitZeroExtend(ValueNode)::: d64 hot spot address lowering try implicit zero extend:::if->zeroExtendNode->if->applicableToImplicitZeroExtend->return->zeroExtendNode->getValue->return
AMD64HotSpotBackend#newFrameMapBuilder(RegisterConfig)::: d64 hot spot backend new frame map builder:::registerConfigNonNull->getCodeCache->getRegisterConfig->frameMap->getCodeCache->new->AMD64FrameMap->return->getCodeCache->new->AMD64FrameMapBuilder
AMD64HotSpotBackend#newLIRGenerator(LIRGenerationResult)::: d64 hot spot backend new generator:::return->getProviders->new->AMD64HotSpotLIRGenerator
AMD64HotSpotBackend#newLIRGenerationResult(CompilationIdentifier, LIR, RegisterConfig, StructuredGraph, Object)::: d64 hot spot backend new generation result:::return->newFrameMapBuilder->makeCallingConvention->config->graph->getMethods->requiresReservedStackCheck->new->HotSpotLIRGenerationResult
AMD64HotSpotBackend#newNodeLIRBuilder(StructuredGraph, LIRGeneratorTool)::: d64 hot spot backend new node builder:::return->new->AMD64NodeMatchRules->new->AMD64HotSpotNodeLIRBuilder
AMD64HotSpotBackend#bangStackWithOffset(CompilationResultBuilder, int)::: d64 hot spot backend bang stack with offset:::asm->pos->asm->position->asm->new->AMD64Address->movl
AMD64HotSpotBackend.HotSpotFrameContext#hasFrame()::: hot spot frame context has frame:::return
AMD64HotSpotBackend.HotSpotFrameContext#enter(CompilationResultBuilder)::: hot spot frame context enter:::frameMap->frameSize->frameMap->frameSize->asm->if->if->asm->nop->else->verifiedEntryPointOffset->asm->position->if->emitStackOverflowCheck->if->asm->position->asm->subqWide->else->asm->decrementq->if->ZapStackOnMethodEntry->crb->getOptions->getValue->intSize->for->i
AMD64HotSpotBackend.HotSpotFrameContext#leave(CompilationResultBuilder)::: hot spot frame context leave:::if->asm->frameSize->frameSize->asm->incrementq
AMD64HotSpotBackend#newCompilationResultBuilder(LIRGenerationResult, FrameMap, CompilationResult, CompilationResultBuilderFactory)::: d64 hot spot backend new compilation result builder:::gen->lir->gen->getLIR->options->lir->getOptions->debug->lir->getDebug->omitFrame->CanOmitFrame->getValue->frameMap->frameNeedsAllocating->lir->hasArgInCallerFrame->gen->hasForeignCall->stub->gen->getStub->masm->getTarget->new->AMD64MacroAssembler->frameContext->new->HotSpotFrameContext->dataBuilder->getCodeCache->getTarget->new->HotSpotDataBuilder->crb->factory->getCodeCache->getForeignCalls->createBuilder->crb->frameMap->totalFrameSize->setTotalFrameSize->crb->gen->getMaxInterpreterFrameSize->setMaxInterpreterFrameSize->deoptimizationRescueSlot->gen->getDeoptimizationRescueSlot->if->setCustomStackAreaOffset->if->destroyedCallerRegisters->gatherDestroyedCallerRegisters->gen->getCalleeSaveInfo->updateStub->return
AMD64HotSpotBackend#emitCode(CompilationResultBuilder, LIR, ResolvedJavaMethod)::: d64 hot spot backend emit code:::asm->frameMap->regConfig->frameMap->getRegisterConfig->verifiedEntry->new->Label->emitCodePrefix->emitCodeBody->emitCodeSuffix->profileInstructions
AMD64HotSpotBackend#emitCodePrefix(ResolvedJavaMethod, CompilationResultBuilder, AMD64MacroAssembler, RegisterConfig, Label):::Emits the code prior to the verified entry point.:::providers->getProviders->if->installedCodeOwner->isStatic->crb->recordMark->cc->regConfig->new->JavaTypeArr->providers->getMetaAccess->lookupJavaType->getCallingConvention->inlineCacheKlass->receiver->cc->getArgument->asRegister->src->new->AMD64Address->if->register->heapBase->providers->getRegisters->getHeapBaseRegister->AMD64HotSpotMove->decodeKlassPointer->if->GeneratePIC->crb->getOptions->getValue->asm->asm->getPlaceholder->movq->crb->recordMark->else->if->if->asm->xorq->else->asm->movq->asm->cmpq->else->asm->cmpq->AMD64Call->getForeignCalls->lookupForeignCall->directConditionalJmp->asm->align->crb->recordMark->asm->bind->crb->recordMark->if->GeneratePIC->crb->getOptions->getValue->frameContext->if->crb->LIRKind->value->new->HotSpotSentinelConstant->recordInlineDataInCodeWithNote->asm->asm->getPlaceholder->movq->asm->testq->AMD64Call->getForeignCalls->lookupForeignCall->directConditionalJmp
AMD64HotSpotBackend#emitCodeBody(ResolvedJavaMethod, CompilationResultBuilder, LIR):::Emits the code which starts at the verified entry point.:::crb->emit
AMD64HotSpotBackend#emitCodeSuffix(ResolvedJavaMethod, CompilationResultBuilder, AMD64MacroAssembler, FrameMap)::: d64 hot spot backend emit code suffix:::providers->getProviders->frameContext->if->foreignCalls->providers->getForeignCalls->crb->recordMark->AMD64Call->foreignCalls->lookupForeignCall->directCall->crb->recordMark->AMD64Call->foreignCalls->lookupForeignCall->directCall->else->if
AMD64HotSpotBackend#newRegisterAllocationConfig(RegisterConfig, String[])::: d64 hot spot backend new register allocation config:::registerConfigNonNull->getCodeCache->getRegisterConfig->return->new->AMD64HotSpotRegisterAllocationConfig
AMD64HotSpotBackend#translateToCallerRegisters(EconomicSet)::: d64 hot spot backend translate to caller registers:::return
AMD64HotSpotBackendFactory#getName()::: d64 hot spot backend factory get name:::return
AMD64HotSpotBackendFactory#getArchitecture()::: d64 hot spot backend factory get architecture:::return
AMD64HotSpotBackendFactory#createBackend(HotSpotGraalRuntimeProvider, CompilerConfiguration, HotSpotJVMCIRuntime, HotSpotBackend)::: d64 hot spot backend factory create backend:::options->graalRuntime->getOptions->jvmci->jvmciRuntime->getHostJVMCIBackend->config->graalRuntime->getVMConfig->providers->registers->codeCache->jvmci->getCodeCache->target->codeCache->getTarget->foreignCalls->nativeABICallerSaveRegisters->metaAccess->jvmci->getMetaAccess->constantReflection->jvmci->getConstantReflection->constantFieldProvider->new->HotSpotGraalConstantFieldProvider->lowerer->stampProvider->gc->snippetReflection->replacements->suites->wordTypes->plugins->bytecodeProvider->try->t->timer->try->rt->timer->createRegisters->catch->finally->try->rt->timer->codeCache->getRegisterConfig->createNativeABICallerSaveRegisters->catch->finally->try->rt->timer->createWordTypes->catch->finally->try->rt->timer->createForeignCalls->catch->finally->try->rt->timer->createLowerer->catch->finally->try->rt->timer->createStampProvider->catch->finally->try->rt->timer->createGCProvider->catch->finally->p->new->Providers->try->rt->timer->createSnippetReflection->catch->finally->try->rt->timer->createBytecodeProvider->catch->finally->try->rt->timer->createReplacements->catch->finally->try->rt->timer->createGraphBuilderPlugins->replacements->setGraphBuilderPlugins->catch->finally->try->rt->timer->createSuites->catch->finally->new->HotSpotProviders->replacements->setProviders->catch->finally->try->rt->timer->return->createBackend->catch->finally
AMD64HotSpotBackendFactory#createGraphBuilderPlugins(CompilerConfiguration, GraalHotSpotVMConfig, TargetDescription, HotSpotConstantReflectionProvider, HotSpotHostForeignCallsProvider, HotSpotMetaAccessProvider, HotSpotSnippetReflectionProvider, HotSpotReplacementsImpl, HotSpotWordTypes, OptionValues)::: d64 hot spot backend factory create graph builder plugins:::plugins->HotSpotGraphBuilderPlugins->create->AMD64GraphBuilderPlugins->replacements->getDefaultReplacementBytecodeProvider->register->return
AMD64HotSpotBackendFactory#createBackend(GraalHotSpotVMConfig, HotSpotGraalRuntimeProvider, HotSpotProviders)::: d64 hot spot backend factory create backend:::return->new->AMD64HotSpotBackend
AMD64HotSpotBackendFactory#createRegisters()::: d64 hot spot backend factory create registers:::return->new->HotSpotRegisters
AMD64HotSpotBackendFactory#createForeignCalls(HotSpotJVMCIRuntime, HotSpotGraalRuntimeProvider, HotSpotMetaAccessProvider, HotSpotCodeCacheProvider, WordTypes, Value[])::: d64 hot spot backend factory create foreign calls:::return->new->AMD64HotSpotForeignCallsProvider
AMD64HotSpotBackendFactory#createSuites(GraalHotSpotVMConfig, HotSpotGraalRuntimeProvider, CompilerConfiguration, Plugins, HotSpotRegistersProvider, Replacements, OptionValues)::: d64 hot spot backend factory create suites:::return->new->AMD64HotSpotSuitesCreator->registers->getHeapBaseRegister->new->AMD64HotSpotAddressLowering->new->AddressLoweringPhase->new->AddressLoweringHotSpotSuitesProvider
AMD64HotSpotBackendFactory#createLowerer(HotSpotGraalRuntimeProvider, HotSpotMetaAccessProvider, HotSpotForeignCallsProvider, HotSpotRegistersProvider, HotSpotConstantReflectionProvider, TargetDescription)::: d64 hot spot backend factory create lowerer:::return->new->AMD64HotSpotLoweringProvider
AMD64HotSpotBackendFactory#createNativeABICallerSaveRegisters(GraalHotSpotVMConfig, RegisterConfig)::: d64 hot spot backend factory create native caller save registers:::callerSave->regConfig->getAllocatableRegisters->asList->new->ArrayList<>->if->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->else->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->callerSave->remove->nativeABICallerSaveRegisters->callerSave->size->new->ValueArr->for->i->callerSave->size->return
AMD64HotSpotBackendFactory#toString()::: d64 hot spot backend factory to string:::return
AMD64HotSpotConstantRetrievalOp.CollectTemporaries#asArray()::: collect temporaries as array:::copy->values->size->new->ValueArr->return->values->toArray
AMD64HotSpotConstantRetrievalOp.CollectTemporaries#doValue(Value, OperandMode, EnumSet)::: collect temporaries do value:::values->add->return
AMD64HotSpotConstantRetrievalOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot constant retrieval op emit code:::for->i->for->i->before->masm->position->masm->call->after->masm->position->crb->recordDirectCall
AMD64HotSpotCounterOp#emitCode(CompilationResultBuilder)::: d64 hot spot counter op emit code:::masm->target->scratch->if->contains->else->if->contains->else->throw->GraalError->unimplemented->countersArrayAddr->new->AMD64Address->countersArrayReg->masm->crb->asAddress->movq->masm->movptr->emitProcedure->emitIncrement->forEachCounter->masm->crb->asAddress->movq
AMD64HotSpotCounterOp#contains(Value[], Register):::Tests if the array contains the register.:::foreach->if->isRegister->asRegister->equals->return->return
AMD64HotSpotCounterOp#emitIncrement(CompilationResultBuilder, AMD64MacroAssembler, Register, Value, int)::: d64 hot spot counter op emit increment:::counterAddr->new->AMD64Address->if->isJavaConstant->increment->asJavaConstant->asInt->masm->incrementq->else->masm->asRegister->addq->if->crb->getOptions->getValue->target->new->Label->masm->jccb->crb->blockComment->masm->illegal->masm->bind
AMD64HotSpotCRuntimeCallEpilogueOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot runtime call epilogue op emit code:::masm->new->AMD64Address->movslq->masm->new->AMD64Address->movslq->masm->new->AMD64Address->movslq
AMD64HotSpotCRuntimeCallPrologueOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot runtime call prologue op emit code:::masm->new->AMD64Address->movq
AMD64HotSpotDeoptimizeCallerOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot deoptimize caller op emit code:::leaveFrameAndRestoreRbp->AMD64Call->lookupForeignCall->directJmp
AMD64HotSpotDirectStaticCallOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot direct static call op emit code:::crb->recordMark->super->emitCode
AMD64HotspotDirectVirtualCallOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hotspot direct virtual call op emit code:::crb->recordMark->masm->movq->offset->super->emitCall->crb->getPosition->recordInvokeVirtualOrInterfaceCallOp
AMD64HotSpotEpilogueBlockEndOp#leaveFrameAndRestoreRbp(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot epilogue block end op leave frame and restore rbp:::AMD64HotSpotEpilogueOp->leaveFrameAndRestoreRbp
AMD64HotSpotEpilogueBlockEndOp#setSavedRbp(AllocatableValue)::: d64 hot spot epilogue block end op set saved rbp:::
AMD64HotSpotEpilogueOp#leaveFrameAndRestoreRbp(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot epilogue op leave frame and restore rbp:::leaveFrameAndRestoreRbp
AMD64HotSpotEpilogueOp#leaveFrameAndRestoreRbp(AllocatableValue, CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot epilogue op leave frame and restore rbp:::if->isStackSlot->masm->crb->asAddress->movq->else->framePointer->asRegister->if->framePointer->equals->masm->movq->leave
AMD64HotSpotEpilogueOp#setSavedRbp(AllocatableValue)::: d64 hot spot epilogue op set saved rbp:::
AMD64HotSpotForeignCallsProvider#initialize(HotSpotProviders, OptionValues)::: d64 hot spot foreign calls provider initialize:::config->runtime->getVMConfig->target->providers->getCodeCache->getTarget->word->getWordKind->exception->rax->LIRKind->reference->asValue->exceptionPc->rdx->LIRKind->value->asValue->exceptionCc->new->CallingConvention->any->new->HotSpotForeignCallLinkageImpl->register->any->new->HotSpotForeignCallLinkageImpl->register->if->any->registerForeignCall->if->any->registerForeignCall->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayIndexOfStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayEqualsStub->link->registerStubCall->new->AMD64ArrayCompareToStub->link->registerStubCall->new->AMD64ArrayCompareToStub->link->registerStubCall->new->AMD64ArrayCompareToStub->link->registerStubCall->new->AMD64ArrayCompareToStub->link->super->initialize
AMD64HotSpotForeignCallsProvider#getNativeABICallerSaveRegisters()::: d64 hot spot foreign calls provider get native caller save registers:::return
AMD64HotSpotForeignCallsProvider#registerMathStubs(GraalHotSpotVMConfig, HotSpotProviders, OptionValues)::: d64 hot spot foreign calls provider register math stubs:::if->GraalArithmeticStubs->getValue->registerStubCall->new->AMD64MathStub->link->registerStubCall->new->AMD64MathStub->link->registerStubCall->new->AMD64MathStub->link->registerStubCall->new->AMD64MathStub->link->registerStubCall->new->AMD64MathStub->link->registerStubCall->new->AMD64MathStub->link->registerStubCall->new->AMD64MathStub->link->else->super->registerMathStubs
AMD64HotSpotJumpToExceptionHandlerInCallerOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot jump to exception handler in caller op emit code:::leaveFrameAndRestoreRbp->masm->incrementq->if->dst->new->AMD64Address->masm->cmpl->masm->cmovq->masm->asRegister->jmp
AMD64HotSpotLeaveCurrentStackFrameOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot leave current stack frame op emit code:::frameMap->registerConfig->frameMap->getRegisterConfig->registerSaveLayout->saveRegisterOp->getMap->stackPointer->registerConfig->getFrameRegister->stackSlotSize->frameMap->getTarget->integerResultRegister->registerConfig->getReturnRegister->masm->registerSaveLayout->registerToSlot->new->AMD64Address->movptr->masm->registerSaveLayout->registerToSlot->new->AMD64Address->movptr->floatResultRegister->registerConfig->getReturnRegister->masm->registerSaveLayout->registerToSlot->new->AMD64Address->movdbl->leaveFrameAndRestoreRbp->masm->getReturnAddressSize->addq
AMD64HotSpotLeaveDeoptimizedStackFrameOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot leave deoptimized stack frame op emit code:::stackPointer->getRegisterConfig->getFrameRegister->masm->asRegister->addq->masm->asRegister->movq
AMD64HotSpotLIRGenerator#getProviders()::: d64 hot spot generator get providers:::return->super->getProviders
AMD64HotSpotLIRGenerator#getMaxVectorSize()::: d64 hot spot generator get max vector size:::return
AMD64HotSpotLIRGenerator.SaveRbp#finalize(boolean):::Replaces this operation with the appropriate move for saving rbp.:::dst->if->else->getResult->getFrameMapBuilder->freeRBPSpillSlot->LIRKind->value->newVariable->placeholder->getResult->getLIR->rbp->LIRKind->value->asValue->new->MoveFromRegOp->replace->return
AMD64HotSpotLIRGenerator#emitSaveRbp()::: d64 hot spot generator emit save rbp:::placeholder->getCurrentBlock->getResult->getLIR->getCurrentBlock->getLIRforBlock->size->new->NoOp->append->new->SaveRbp
AMD64HotSpotLIRGenerator#getSaveRbp()::: d64 hot spot generator get save rbp:::return
AMD64HotSpotLIRGenerator.RescueSlotDummyOp#getSlot()::: rescue slot dummy op get slot:::return
AMD64HotSpotLIRGenerator.RescueSlotDummyOp#emitCode(CompilationResultBuilder)::: rescue slot dummy op emit code:::
AMD64HotSpotLIRGenerator#getOrInitRescueSlot()::: d64 hot spot generator get or init rescue slot:::op->getOrInitRescueSlotOp->return->op->getSlot
AMD64HotSpotLIRGenerator#getOrInitRescueSlotOp()::: d64 hot spot generator get or init rescue slot op:::if->getResult->getFrameMapBuilder->getLIRKindTool->getWordKind->new->RescueSlotDummyOp->return
AMD64HotSpotLIRGenerator#append(I)::: d64 hot spot generator append:::ret->super->append->if->epilogueOps->add->return
AMD64HotSpotLIRGenerator#getLockSlot(int)::: d64 hot spot generator get lock slot:::return->getLockStack->makeLockSlot
AMD64HotSpotLIRGenerator#getLockStack()::: d64 hot spot generator get lock stack:::return->debugInfoBuilder->lockStack
AMD64HotSpotLIRGenerator#findPollOnReturnScratchRegister()::: d64 hot spot generator find poll on return scratch register:::regConfig->getProviders->getCodeCache->getRegisterConfig->foreach->regConfig->getAllocatableRegisters->if->r->regConfig->getReturnRegister->equals->r->equals->return->throw->GraalError->shouldNotReachHere
AMD64HotSpotLIRGenerator#emitReturn(JavaKind, Value)::: d64 hot spot generator emit return:::operand->if->input->getValueKind->resultOperandFor->emitMove->if->findPollOnReturnScratchRegister->thread->getProviders->getRegisters->getThreadRegister->getStub->getResult->requiresReservedStackAccessCheck->new->AMD64HotSpotReturnOp->append
AMD64HotSpotLIRGenerator#needOnlyOopMaps()::: d64 hot spot generator need only oop maps:::return->getResult->getStub
AMD64HotSpotLIRGenerator#emitForeignCallOp(ForeignCallLinkage, Value, Value[], Value[], LIRFrameState)::: d64 hot spot generator emit foreign call op:::hsLinkage->arch->target->if->arch->getFeatures->contains->hsLinkage->mayContainFP->hsLinkage->isCompiledStub->new->AMD64VZeroUpper->append->super->emitForeignCallOp
AMD64HotSpotLIRGenerator#emitSaveRegisters(Register[], AllocatableValue[], boolean)::: d64 hot spot generator emit save registers:::save->new->AMD64SaveRegistersOp->append->return
AMD64HotSpotLIRGenerator#allocateSaveRegisterLocation(Register):::Allocate a stack slot for saving a register.:::kind->target->register->getRegisterCategory->getLargestStorableKind->if->kind->getVectorLength->return->getResult->getFrameMapBuilder->LIRKind->value->allocateSpillSlot
AMD64HotSpotLIRGenerator#emitSaveAllRegisters(Register[], boolean):::Adds a node to the graph that saves all allocatable registers to the stack.:::savedRegisterLocations->new->AllocatableValueArr->for->i->return->emitSaveRegisters
AMD64HotSpotLIRGenerator#emitRestoreRegisters(AMD64SaveRegistersOp)::: d64 hot spot generator emit restore registers:::save->getSlots->clone->new->AMD64RestoreRegistersOp->append
AMD64HotSpotLIRGenerator#getStub():::Gets the Stub this generator is generating code for or null if a stub is not being generated.:::return->getResult->getStub
AMD64HotSpotLIRGenerator#getResult()::: d64 hot spot generator get result:::return->super->getResult
AMD64HotSpotLIRGenerator#setDebugInfoBuilder(HotSpotDebugInfoBuilder)::: d64 hot spot generator set debug info builder:::
AMD64HotSpotLIRGenerator#emitForeignCall(ForeignCallLinkage, LIRFrameState, Value...)::: d64 hot spot generator emit foreign call:::hotspotLinkage->destroysRegisters->hotspotLinkage->destroysRegisters->save->stub->getStub->if->if->stub->preservesRegisters->savedRegisters->getRegisterConfig->getAllocatableRegisters->toArray->emitSaveAllRegisters->result->debugInfo->if->hotspotLinkage->needsDebugInfo->if->hotspotLinkage->needsJavaFrameAnchor->thread->getProviders->getRegisters->getThreadRegister->config->threadLastJavaSpOffset->new->AMD64HotSpotCRuntimeCallPrologueOp->append->super->emitForeignCall->config->threadLastJavaSpOffset->config->threadLastJavaFpOffset->config->threadLastJavaPcOffset->new->AMD64HotSpotCRuntimeCallEpilogueOp->append->else->super->emitForeignCall->if->if->if->stub->preservesRegisters->generationResult->getResult->key->if->generationResult->getCalleeSaveInfo->put->emitRestoreRegisters->return
AMD64HotSpotLIRGenerator#emitLoadObjectAddress(Constant)::: d64 hot spot generator emit load object address:::objectConstant->kind->objectConstant->isCompressed->getLIRKindTool->getNarrowOopKind->getLIRKindTool->getObjectKind->result->newVariable->new->AMD64HotSpotLoadAddressOp->append->return
AMD64HotSpotLIRGenerator#emitLoadMetaspaceAddress(Constant, HotSpotConstantLoadAction)::: d64 hot spot generator emit load metaspace address:::metaspaceConstant->kind->metaspaceConstant->isCompressed->getLIRKindTool->getNarrowPointerKind->getLIRKindTool->getWordKind->result->newVariable->new->AMD64HotSpotLoadAddressOp->append->return
AMD64HotSpotLIRGenerator#emitConstantRetrieval(ForeignCallDescriptor, Object[], Constant[], AllocatableValue[], LIRFrameState)::: d64 hot spot generator emit constant retrieval:::linkage->getForeignCalls->lookupForeignCall->new->AMD64HotSpotConstantRetrievalOp->append->result->linkage->getOutgoingCallingConvention->getReturn->return->emitMove
AMD64HotSpotLIRGenerator#emitConstantRetrieval(ForeignCallDescriptor, HotSpotConstantLoadAction, Constant, AllocatableValue[], LIRFrameState)::: d64 hot spot generator emit constant retrieval:::constants->new->ConstantArr->notes->new->ObjectArr->return->emitConstantRetrieval
AMD64HotSpotLIRGenerator#emitConstantRetrieval(ForeignCallDescriptor, HotSpotConstantLoadAction, Constant, Value, LIRFrameState)::: d64 hot spot generator emit constant retrieval:::constantDescriptions->new->AllocatableValueArr->asAllocatable->return->emitConstantRetrieval
AMD64HotSpotLIRGenerator#emitObjectConstantRetrieval(Constant, Value, LIRFrameState)::: d64 hot spot generator emit object constant retrieval:::return->emitConstantRetrieval
AMD64HotSpotLIRGenerator#emitMetaspaceConstantRetrieval(Constant, Value, LIRFrameState)::: d64 hot spot generator emit metaspace constant retrieval:::return->emitConstantRetrieval
AMD64HotSpotLIRGenerator#emitKlassInitializationAndRetrieval(Constant, Value, LIRFrameState)::: d64 hot spot generator emit klass initialization and retrieval:::return->emitConstantRetrieval
AMD64HotSpotLIRGenerator#emitResolveMethodAndLoadCounters(Constant, Value, Value, LIRFrameState)::: d64 hot spot generator emit resolve method and load counters:::constantDescriptions->new->AllocatableValueArr->asAllocatable->asAllocatable->return->emitConstantRetrieval
AMD64HotSpotLIRGenerator#emitResolveDynamicInvoke(Constant, LIRFrameState)::: d64 hot spot generator emit resolve dynamic invoke:::constantDescriptions->new->AllocatableValueArr->return->emitConstantRetrieval
AMD64HotSpotLIRGenerator#emitLoadConfigValue(int, LIRKind)::: d64 hot spot generator emit load config value:::result->newVariable->new->AMD64HotSpotLoadConfigValueOp->append->return
AMD64HotSpotLIRGenerator#emitRandomSeed()::: d64 hot spot generator emit random seed:::timestamp->new->AMD64ReadTimestampCounter->append->return->timestamp->getLowResult->emitMove
AMD64HotSpotLIRGenerator#emitTailcall(Value[], Value)::: d64 hot spot generator emit tailcall:::new->AMD64TailcallOp->append
AMD64HotSpotLIRGenerator#emitCCall(long, CallingConvention, Value[], int)::: d64 hot spot generator emit call:::argLocations->new->ValueArr->getResult->getFrameMapBuilder->callsMethod->intConst->JavaConstant->forInt->numberOfFloatingPointArgumentsRegister->LIRKind->value->asValue->emitMoveConstant->for->i->ptr->LIRKind->value->JavaConstant->forLong->emitLoadConstant->nativeCallingConvention->getReturn->new->AMD64CCall->append
AMD64HotSpotLIRGenerator#emitUnwind(Value)::: d64 hot spot generator emit unwind:::linkage->getForeignCalls->lookupForeignCall->outgoingCc->linkage->getOutgoingCallingConvention->exceptionParameter->outgoingCc->getArgument->emitMove->new->AMD64HotSpotUnwindOp->append
AMD64HotSpotLIRGenerator#moveDeoptValuesToThread(Value, Value)::: d64 hot spot generator move deopt values to thread:::moveValueToThread->moveValueToThread
AMD64HotSpotLIRGenerator#moveValueToThread(Value, int)::: d64 hot spot generator move value to thread:::wordKind->LIRKind->target->getWordKind->value->thread->getProviders->getRegisters->getThreadRegister->asValue->address->new->AMD64AddressValue->arithmeticLIRGen->v->getValueKind->emitStore
AMD64HotSpotLIRGenerator#emitDeoptimize(Value, Value, LIRFrameState)::: d64 hot spot generator emit deoptimize:::moveDeoptValuesToThread->new->AMD64DeoptimizeOp->append
AMD64HotSpotLIRGenerator#emitDeoptimizeCaller(DeoptimizationAction, DeoptimizationReason)::: d64 hot spot generator emit deoptimize caller:::actionAndReason->getMetaAccess->encodeDeoptActionAndReason->emitJavaConstant->speculation->getMetaAccess->encodeSpeculation->emitJavaConstant->moveDeoptValuesToThread->new->AMD64HotSpotDeoptimizeCallerOp->append
AMD64HotSpotLIRGenerator#beforeRegisterAllocation()::: d64 hot spot generator before register allocation:::super->beforeRegisterAllocation->hasDebugInfo->getResult->getLIR->hasDebugInfo->savedRbp->saveRbp->finalize->if->getResult->getResult->getFrameMapBuilder->allocateDeoptimizationRescueSlot->setDeoptimizationRescueSlot->getResult->debugInfoBuilder->maxInterpreterFrameSize->setMaxInterpreterFrameSize->foreach->op->setSavedRbp->if->op->getOrInitRescueSlotOp->lir->getResult->getLIR->instructions->lir->lir->getControlFlowGraph->getStartBlock->getLIRforBlock->instructions->add->lir->getDebug->dump
AMD64HotSpotLIRGenerator#emitCompress(Value, CompressEncoding, boolean)::: d64 hot spot generator emit compress:::inputKind->pointer->getValueKind->lirKindTool->getLIRKindTool->if->inputKind->isReference->result->lirKindTool->getNarrowOopKind->newVariable->asAllocatable->getProviders->getRegisters->getHeapBaseRegister->asValue->getLIRKindTool->new->AMD64Move.CompressPointerOp->append->return->else->result->lirKindTool->getNarrowPointerKind->newVariable->base->options->getResult->getLIR->getOptions->if->encoding->hasBase->GeneratePIC->getValue->if->GeneratePIC->getValue->baseAddress->lirKindTool->getWordKind->newVariable->move->new->AMD64HotSpotMove.BaseMove->append->else->lirKindTool->getWordKind->JavaConstant->encoding->getBase->forLong->emitLoadConstant->asAllocatable->getLIRKindTool->new->AMD64Move.CompressPointerOp->append->return
AMD64HotSpotLIRGenerator#emitUncompress(Value, CompressEncoding, boolean)::: d64 hot spot generator emit uncompress:::inputKind->pointer->getValueKind->lirKindTool->getLIRKindTool->if->inputKind->isReference->result->lirKindTool->getObjectKind->newVariable->asAllocatable->getProviders->getRegisters->getHeapBaseRegister->asValue->new->AMD64Move.UncompressPointerOp->append->return->else->uncompressedKind->lirKindTool->getWordKind->result->newVariable->base->options->getResult->getLIR->getOptions->if->encoding->hasBase->GeneratePIC->getValue->if->GeneratePIC->getValue->baseAddress->newVariable->move->new->AMD64HotSpotMove.BaseMove->append->else->JavaConstant->encoding->getBase->forLong->emitLoadConstant->asAllocatable->new->AMD64Move.UncompressPointerOp->append->return
AMD64HotSpotLIRGenerator#emitNullCheck(Value, LIRFrameState)::: d64 hot spot generator emit null check:::if->address->getValueKind->getPlatformKind->getLIRKindTool->getNarrowOopKind->getPlatformKind->encoding->config->getOopEncoding->uncompressed->if->encoding->getShift->wordKind->LIRKind->target->getWordKind->unknownReference->getProviders->getRegisters->getHeapBaseRegister->asValue->asAllocatable->Scale->encoding->getShift->fromInt->new->AMD64AddressValue->else->emitUncompress->asAddressValue->new->AMD64Move.NullCheckOp->append->return->super->emitNullCheck
AMD64HotSpotLIRGenerator#createBenchmarkCounter(String, String, Value)::: d64 hot spot generator create benchmark counter:::if->return->getProviders->getRegisters->getOrInitRescueSlot->new->AMD64HotSpotCounterOp->throw->GraalError->shouldNotReachHere
AMD64HotSpotLIRGenerator#createMultiBenchmarkCounter(String[], String[], Value[])::: d64 hot spot generator create multi benchmark counter:::if->return->getProviders->getRegisters->getOrInitRescueSlot->new->AMD64HotSpotCounterOp->throw->GraalError->shouldNotReachHere
AMD64HotSpotLIRGenerator#emitPrefetchAllocate(Value)::: d64 hot spot generator emit prefetch allocate:::asAddressValue->new->AMD64PrefetchOp->append
AMD64HotSpotLIRGenerator#createStrategySwitchOp(SwitchStrategy, LabelRef[], LabelRef, Variable, AllocatableValue)::: d64 hot spot generator create strategy switch op:::return->new->AMD64HotSpotStrategySwitchOp
AMD64HotSpotLIRKindTool#getNarrowOopKind()::: d64 hot spot kind tool get narrow oop kind:::return->LIRKind->compressedReference
AMD64HotSpotLIRKindTool#getNarrowPointerKind()::: d64 hot spot kind tool get narrow pointer kind:::return->LIRKind->value
AMD64HotSpotLoadAddressOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot load address op emit code:::crb->recordInlineDataInCodeWithNote->kind->result->getPlatformKind->switch->masm->asRegister->masm->getPlaceholder->movl->break->masm->asRegister->masm->getPlaceholder->movq->break->throw->GraalError->shouldNotReachHere
AMD64HotSpotLoadConfigValueOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot load config value op emit code:::if->GeneratePIC->crb->getOptions->getValue->kind->result->getPlatformKind->reg->asRegister->placeholder->masm->getPlaceholder->switch->masm->movsbl->break->masm->movswl->break->masm->movl->break->masm->movq->break->throw->GraalError->unimplemented->else->throw->GraalError->unimplemented->crb->recordMark
AMD64HotSpotLoweringProvider#initialize(OptionValues, Iterable, HotSpotProviders, GraalHotSpotVMConfig)::: d64 hot spot lowering provider initialize:::providers->getSnippetReflection->providers->getCodeCache->getTarget->new->AMD64ConvertSnippets.Templates->if->else->providers->getCodeCache->getTarget->new->ProbabilisticProfileSnippets.Templates->providers->getSnippetReflection->providers->getCodeCache->getTarget->new->AMD64X87MathSnippets.Templates->super->initialize
AMD64HotSpotLoweringProvider#lower(Node, LoweringTool)::: d64 hot spot lowering provider lower:::if->convertSnippets->lower->else->if->profileSnippets->lower->else->if->lowerUnaryMath->else->if->lowerArrayIndexOf->else->super->lower
AMD64HotSpotLoweringProvider#lowerUnaryMath(UnaryMathIntrinsicNode, LoweringTool)::: d64 hot spot lowering provider lower unary math:::if->tool->getLoweringStage->return->graph->math->graph->method->graph->method->if->if->method->getAnnotation->return->if->GraalArithmeticStubs->graph->getOptions->getValue->switch->math->getOperation->mathSnippets->lower->return->math->graph->math->getValue->new->AMD64X87MathIntrinsicNode->addOrUnique->replaceAtUsages->return->math->graph->math->getValue->new->AMD64X87MathIntrinsicNode->addOrUnique->replaceAtUsages->return->call->graph->math->getOperation->math->getValue->new->ForeignCallNode->add->graph->tool->lastFixedNode->addAfterFixed->math->replaceAtUsages
AMD64HotSpotLoweringProvider#lowerArrayIndexOf(AMD64ArrayIndexOfDispatchNode)::: d64 hot spot lowering provider lower array index of:::graph->dispatchNode->graph->call->graph->dispatchNode->getStubCallDescriptor->dispatchNode->getStubCallArgs->new->ForeignCallNode->add->graph->replaceFixed
AMD64HotSpotMathIntrinsicOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot math intrinsic op emit code:::switch->masm->asRegister->asRegister->flog->break->masm->asRegister->asRegister->flog->break->masm->asRegister->asRegister->fsin->break->masm->asRegister->asRegister->fcos->break->masm->asRegister->asRegister->ftan->break->throw->GraalError->shouldNotReachHere
AMD64HotSpotMove.HotSpotLoadObjectConstantOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: hot spot load object constant op emit code:::if->GeneratePIC->crb->getOptions->getValue->throw->GraalError->shouldNotReachHere->compressed->input->isCompressed->if->crb->recordInlineDataInCode->if->isRegister->if->masm->asRegister->movl->else->masm->asRegister->movq->else->if->masm->crb->asAddress->movl->else->throw->GraalError->shouldNotReachHere->else->if->isRegister->address->crb->recordDataReferenceInCode->if->masm->asRegister->movl->else->masm->asRegister->movq->else->throw->GraalError->shouldNotReachHere
AMD64HotSpotMove.HotSpotLoadObjectConstantOp#getConstant()::: hot spot load object constant op get constant:::return
AMD64HotSpotMove.HotSpotLoadObjectConstantOp#getResult()::: hot spot load object constant op get result:::return
AMD64HotSpotMove.BaseMove#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: base move emit code:::masm->asRegister->masm->getPlaceholder->movq->crb->recordMark
AMD64HotSpotMove.HotSpotLoadMetaspaceConstantOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: hot spot load metaspace constant op emit code:::if->GeneratePIC->crb->getOptions->getValue->throw->GraalError->shouldNotReachHere->compressed->input->isCompressed->if->isRegister->if->crb->recordInlineDataInCode->masm->asRegister->movl->else->crb->recordInlineDataInCode->masm->asRegister->movq->else->if->crb->recordInlineDataInCode->masm->crb->asAddress->movl->else->throw->GraalError->shouldNotReachHere
AMD64HotSpotMove.HotSpotLoadMetaspaceConstantOp#getConstant()::: hot spot load metaspace constant op get constant:::return
AMD64HotSpotMove.HotSpotLoadMetaspaceConstantOp#getResult()::: hot spot load metaspace constant op get result:::return
AMD64HotSpotMove#decodeKlassPointer(CompilationResultBuilder, AMD64MacroAssembler, Register, Register, AMD64Address, GraalHotSpotVMConfig)::: d64 hot spot move decode klass pointer:::encoding->config->getKlassEncoding->masm->movl->if->encoding->getShift->masm->encoding->getShift->shlq->pic->GeneratePIC->crb->getOptions->getValue->if->encoding->hasBase->if->masm->masm->getPlaceholder->movq->crb->recordMark->else->masm->encoding->getBase->movq->masm->addq
AMD64HotSpotMoveFactory#canInlineConstant(Constant)::: d64 hot spot move factory can inline constant:::if->equals->return->else->if->return->isCompressed->else->if->return->isCompressed->else->return->super->canInlineConstant
AMD64HotSpotMoveFactory#allowConstantToStackMove(Constant)::: d64 hot spot move factory allow constant to stack move:::if->return->isCompressed->return->super->allowConstantToStackMove
AMD64HotSpotMoveFactory#createLoad(AllocatableValue, Constant)::: d64 hot spot move factory create load:::if->equals->return->super->createLoad->else->if->return->new->AMD64HotSpotMove.HotSpotLoadObjectConstantOp->else->if->return->new->AMD64HotSpotMove.HotSpotLoadMetaspaceConstantOp->else->return->super->createLoad
AMD64HotSpotMoveFactory#createStackLoad(AllocatableValue, Constant)::: d64 hot spot move factory create stack load:::if->equals->return->super->createStackLoad->else->if->return->new->AMD64HotSpotMove.HotSpotLoadObjectConstantOp->else->if->return->new->AMD64HotSpotMove.HotSpotLoadMetaspaceConstantOp->else->return->super->createStackLoad
AMD64HotSpotNodeLIRBuilder#getGen()::: d64 hot spot node builder get gen:::return
AMD64HotSpotNodeLIRBuilder#createDebugInfoBuilder(StructuredGraph, NodeValueMap)::: d64 hot spot node builder create debug info builder:::lockStack->gen->getResult->getFrameMapBuilder->LIRKind->value->new->HotSpotLockStack->return->new->HotSpotDebugInfoBuilder
AMD64HotSpotNodeLIRBuilder#emitPrologue(StructuredGraph)::: d64 hot spot node builder emit prologue:::incomingArguments->gen->getResult->getCallingConvention->params->incomingArguments->getArgumentCount->new->ValueArr->for->i->rbp->LIRKind->value->asValue->gen->emitIncomingValues->getGen->emitSaveRbp->getGen->getDebugInfoBuilder->lockStack->append->foreach->graph->getNodes->paramValue->param->index->gen->emitMove->setResult
AMD64HotSpotNodeLIRBuilder#visitSafepointNode(SafepointNode)::: d64 hot spot node builder visit safepoint node:::info->state->thread->getGen->getProviders->getRegisters->getThreadRegister->getGen->new->AMD64HotSpotSafepointOp->append
AMD64HotSpotNodeLIRBuilder#emitDirectCall(DirectCallTargetNode, Value, Value[], Value[], LIRFrameState)::: d64 hot spot node builder emit direct call:::invokeKind->invokeKind->if->invokeKind->isIndirect->callTarget->targetMethod->getGen->new->AMD64HotspotDirectVirtualCallOp->append->else->resolvedMethod->callTarget->targetMethod->callTarget->targetMethod->getGen->new->AMD64HotSpotDirectStaticCallOp->append
AMD64HotSpotNodeLIRBuilder#emitIndirectCall(IndirectCallTargetNode, Value, Value[], Value[], LIRFrameState)::: d64 hot spot node builder emit indirect call:::if->metaspaceMethodSrc->metaspaceMethod->operand->targetAddressSrc->callTarget->computedAddress->operand->metaspaceMethodDst->metaspaceMethodSrc->getValueKind->asValue->targetAddressDst->targetAddressSrc->getValueKind->asValue->gen->emitMove->gen->emitMove->callTarget->targetMethod->getGen->new->AMD64IndirectCallOp->append->else->super->emitIndirectCall
AMD64HotSpotNodeLIRBuilder#emitPatchReturnAddress(ValueNode)::: d64 hot spot node builder emit patch return address:::gen->operand->load->new->AMD64HotSpotPatchReturnAddressOp->append
AMD64HotSpotNodeLIRBuilder#emitJumpToExceptionHandlerInCaller(ValueNode, ValueNode, ValueNode)::: d64 hot spot node builder emit jump to exception handler in caller:::handler->gen->operand->load->linkage->gen->getForeignCalls->lookupForeignCall->outgoingCc->linkage->getOutgoingCallingConvention->exceptionFixed->outgoingCc->getArgument->exceptionPcFixed->outgoingCc->getArgument->gen->operand->emitMove->gen->operand->emitMove->thread->getGen->getProviders->getRegisters->getThreadRegister->op->getGen->new->AMD64HotSpotJumpToExceptionHandlerInCallerOp->append
AMD64HotSpotNodeLIRBuilder#visitFullInfopointNode(FullInfopointNode)::: d64 hot spot node builder visit full infopoint node:::if->i->getState->i->getState->i->getDebug->log->else->super->visitFullInfopointNode
AMD64HotSpotNodeLIRBuilder#visitBreakpointNode(BreakpointNode)::: d64 hot spot node builder visit breakpoint node:::sig->node->arguments->size->new->JavaTypeArr->for->i->parameters->gen->getRegisterConfig->getCallingConvention->node->arguments->visitInvokeArguments->new->AMD64BreakpointOp->append
AMD64HotSpotNodeLIRBuilder#lookupForeignCall(ForeignCallDescriptor)::: d64 hot spot node builder lookup foreign call:::return->getGen->getForeignCalls->lookupForeignCall
AMD64HotSpotNodeLIRBuilder#lookupGraalStub(ValueNode)::: d64 hot spot node builder lookup graal stub:::method->valueNode->graph->method->if->method->getAnnotation->return->if->arrayEqualsNode->kind->arrayEqualsNode->getKind->length->arrayEqualsNode->getLength->if->length->isConstant->constantLength->length->asJavaConstant->asInt->if->kind->getByteCount->getGen->getMaxVectorSize->return->switch->return->lookupForeignCall->return->lookupForeignCall->return->lookupForeignCall->return->lookupForeignCall->return->lookupForeignCall->return->lookupForeignCall->return->lookupForeignCall->return->lookupForeignCall->return->else->if->arrayCompareToNode->kind1->arrayCompareToNode->getKind1->kind2->arrayCompareToNode->getKind2->if->if->return->lookupForeignCall->else->if->return->lookupForeignCall->else->if->if->return->lookupForeignCall->else->if->return->lookupForeignCall->else->if->arrayRegionEqualsNode->kind1->arrayRegionEqualsNode->getKind1->kind2->arrayRegionEqualsNode->getKind2->length->arrayRegionEqualsNode->getLength->if->length->isConstant->constantLength->length->asJavaConstant->asInt->if->Math->kind1->getByteCount->kind2->getByteCount->max->getGen->getMaxVectorSize->return->if->switch->return->lookupForeignCall->return->lookupForeignCall->return->else->if->return->lookupForeignCall->return
AMD64HotSpotPatchReturnAddressOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot patch return address op emit code:::frameSize->frameSize->masm->new->AMD64Address->asRegister->movq
AMD64HotSpotPushInterpreterFrameOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot push interpreter frame op emit code:::frameSizeRegister->asRegister->framePcRegister->asRegister->senderSpRegister->asRegister->initialInfoRegister->asRegister->wordSize->masm->subq->masm->push->masm->push->masm->movq->masm->subq->masm->new->AMD64Address->movptr->masm->new->AMD64Address->movq
AMD64HotSpotRegisterAllocationConfig#initAllocatable(RegisterArray)::: d64 hot spot register allocation config init allocatable:::regMap->registerConfig->getAllocatableRegisters->size->new->BitSet->foreach->regMap->set->allocatableRegisters->registers->size->new->ArrayList<>->foreach->if->regMap->get->allocatableRegisters->add->return->super->new->RegisterArray->initAllocatable
AMD64HotSpotRestoreRbpOp#setSavedRbp(AllocatableValue)::: d64 hot spot restore rbp op set saved rbp:::
AMD64HotSpotReturnOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot return op emit code:::leaveFrameAndRestoreRbp->if->if->foreignCalls->noReserved->new->Label->masm->new->AMD64Address->cmpptr->masm->jccb->stackAdjust->if->masm->subq->enableStackReservedZone->foreignCalls->lookupForeignCall->cc->enableStackReservedZone->getOutgoingCallingConvention->arg0->cc->getArgument->getRegister->masm->movq->AMD64Call->directCall->if->masm->addq->AMD64Call->foreignCalls->lookupForeignCall->directJmp->masm->bind->AMD64HotSpotSafepointOp->emitCode->if->masm->supports->masm->vzeroupper->masm->ret
AMD64HotSpotSafepointOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot safepoint op emit code:::getRegister->emitCode
AMD64HotSpotSafepointOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler, GraalHotSpotVMConfig, boolean, LIRFrameState, Register, Register)::: d64 hot spot safepoint op emit code:::if->emitThreadLocalPoll->else->emitGlobalPoll
AMD64HotSpotSafepointOp#isPollingPageFar(GraalHotSpotVMConfig):::Tests if the polling page address can be reached from the code cache with 32-bit displacements.:::pollingPageAddress->return->isInt->isInt
AMD64HotSpotSafepointOp#emitGlobalPoll(CompilationResultBuilder, AMD64MacroAssembler, GraalHotSpotVMConfig, boolean, LIRFrameState, Register)::: d64 hot spot safepoint op emit global poll:::if->ImmutableCode->crb->getOptions->getValue->hostWordKind->alignment->hostWordKind->getBitCount->pollingPageAddress->JavaConstant->forIntegerKind->if->GeneratePIC->crb->getOptions->getValue->asm->asm->getPlaceholder->movq->else->asm->crb->recordDataReferenceInCode->movq->pos->asm->position->crb->recordMark->if->crb->recordInfopoint->asm->new->AMD64Address->testl->else->if->isPollingPageFar->asm->movq->crb->recordMark->pos->asm->position->if->crb->recordInfopoint->asm->new->AMD64Address->testl->else->crb->recordMark->pos->asm->position->if->crb->recordInfopoint->asm->new->AMD64Address->testl
AMD64HotSpotSafepointOp#emitThreadLocalPoll(CompilationResultBuilder, AMD64MacroAssembler, GraalHotSpotVMConfig, boolean, LIRFrameState, Register, Register)::: d64 hot spot safepoint op emit thread local poll:::asm->new->AMD64Address->movptr->crb->recordMark->pos->asm->position->if->crb->recordInfopoint->asm->new->AMD64Address->testl
AMD64HotSpotStrategySwitchOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot strategy switch op emit code:::strategy->ValueUtil->asRegister->new->HotSpotSwitchClosure->run
AMD64HotSpotStrategySwitchOp.HotSpotSwitchClosure#emitComparison(Constant)::: hot spot switch closure emit comparison:::if->meta->if->meta->isCompressed->crb->recordInlineDataInCode->masm->cmpl->else->addr->crb->recordDataReferenceInCode->masm->cmpq->else->super->emitComparison
AMD64HotSpotSuitesCreator#createLIRSuites(OptionValues)::: d64 hot spot suites creator create suites:::lirSuites->super->createLIRSuites->if->Assertions->detailedAssertionsEnabled->lirSuites->getPostAllocationOptimizationStage->new->HotSpotZapRegistersPhase->appendPhase->return
AMD64HotSpotUnwindOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 hot spot unwind op emit code:::leaveFrameAndRestoreRbp->linkage->lookupForeignCall->cc->linkage->getOutgoingCallingConvention->returnAddress->cc->getArgument->asRegister->masm->new->AMD64Address->movq->AMD64Call->directJmp
AMD64IndirectCallOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 indirect call op emit code:::crb->recordMark->callReg->asRegister->pcOffset->AMD64Call->indirectCall->crb->getPosition->recordInlineInvokeCallOp
AMD64IndirectCallOp#verify()::: d64 indirect call op verify:::super->verify
AMD64MathStub#snippetName(UnaryOperation)::: d64 math stub snippet name:::switch->return->return->return->return->return->return->throw->GraalError->shouldNotReachHere
AMD64MathStub#snippetName(BinaryOperation)::: d64 math stub snippet name:::if->return->throw->GraalError->shouldNotReachHere
AMD64MathStub#log(double)::: d64 math stub log:::return->UnaryMathIntrinsicNode->compute
AMD64MathStub#log10(double)::: d64 math stub log10:::return->UnaryMathIntrinsicNode->compute
AMD64MathStub#sin(double)::: d64 math stub sin:::return->UnaryMathIntrinsicNode->compute
AMD64MathStub#cos(double)::: d64 math stub cos:::return->UnaryMathIntrinsicNode->compute
AMD64MathStub#tan(double)::: d64 math stub tan:::return->UnaryMathIntrinsicNode->compute
AMD64MathStub#exp(double)::: d64 math stub exp:::return->UnaryMathIntrinsicNode->compute
AMD64MathStub#pow(double, double)::: d64 math stub pow:::return->BinaryMathIntrinsicNode->compute
AMD64TailcallOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)::: d64 tailcall op emit code:::masm->leave->masm->asRegister->jmp->masm->ensureUniquePC
AMD64X87MathIntrinsicNode#foldStamp(Stamp)::: d64 x87 math intrinsic node fold stamp:::return->operation->computeStamp
AMD64X87MathIntrinsicNode#generate(NodeLIRBuilderTool)::: d64 x87 math intrinsic node generate:::gen->generator->getLIRGeneratorTool->input->generator->getValue->operand->result->gen->LIRKind->combine->newVariable->switch->gen->gen->asAllocatable->new->AMD64HotSpotMathIntrinsicOp->append->break->gen->gen->asAllocatable->new->AMD64HotSpotMathIntrinsicOp->append->break->gen->gen->asAllocatable->new->AMD64HotSpotMathIntrinsicOp->append->break->gen->gen->asAllocatable->new->AMD64HotSpotMathIntrinsicOp->append->break->gen->gen->asAllocatable->new->AMD64HotSpotMathIntrinsicOp->append->break->throw->GraalError->shouldNotReachHere->generator->setResult
AMD64X87MathIntrinsicNode#canonical(CanonicalizerTool, ValueNode)::: d64 x87 math intrinsic node canonical:::if->forValue->isConstant->return->ConstantNode->operation->forValue->asJavaConstant->asDouble->compute->forDouble->return
AMD64X87MathIntrinsicNode#compute(double, UnaryOperation)::: d64 x87 math intrinsic node compute:::
AMD64X87MathSnippets#sin(double)::: d64 x87 math snippets sin:::if->Math->abs->return->AMD64X87MathIntrinsicNode->compute->return->callDouble1
AMD64X87MathSnippets#cos(double)::: d64 x87 math snippets cos:::if->Math->abs->return->AMD64X87MathIntrinsicNode->compute->return->callDouble1
AMD64X87MathSnippets#tan(double)::: d64 x87 math snippets tan:::if->Math->abs->return->AMD64X87MathIntrinsicNode->compute->return->callDouble1
AMD64X87MathSnippets#callDouble1(ForeignCallDescriptor, double)::: d64 x87 math snippets call double1:::
AMD64X87MathSnippets.Templates#lower(UnaryMathIntrinsicNode, LoweringTool)::: templates lower:::info->switch->mathIntrinsicNode->getOperation->break->break->break->throw->GraalError->mathIntrinsicNode->getOperation->name->shouldNotReachHere->args->mathIntrinsicNode->graph->getGuardsStage->tool->getLoweringStage->new->Arguments->args->mathIntrinsicNode->getValue->add->template->providers->getMetaAccess->instantiate->mathIntrinsicNode->safeDelete

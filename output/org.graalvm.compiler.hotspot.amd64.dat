org.graalvm.compiler.hotspot.amd64.Plugin_AMD64X87MathIntrinsicNode_compute#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ d64 x87 math intrinsic node_compute execute
org.graalvm.compiler.hotspot.amd64.Plugin_AMD64X87MathIntrinsicNode_compute#getSource()->Class::: plugin_ d64 x87 math intrinsic node_compute get source
org.graalvm.compiler.hotspot.amd64.PluginFactory_AMD64X87MathIntrinsicNode#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ d64 x87 math intrinsic node register plugins
org.graalvm.compiler.hotspot.amd64.Plugin_AMD64X87MathSnippets_callDouble1#execute(GraphBuilderContext, ResolvedJavaMethod, InvocationPlugin.Receiver, ValueNode[])->boolean::: plugin_ d64 x87 math snippets_call double1 execute
org.graalvm.compiler.hotspot.amd64.Plugin_AMD64X87MathSnippets_callDouble1#getSource()->Class::: plugin_ d64 x87 math snippets_call double1 get source
org.graalvm.compiler.hotspot.amd64.PluginFactory_AMD64X87MathSnippets#registerPlugins(InvocationPlugins, NodeIntrinsicPluginFactory.InjectionProvider)->void::: plugin factory_ d64 x87 math snippets register plugins
org.graalvm.compiler.hotspot.amd64.AMD64DeoptimizeOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 deoptimize op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotAddressLowering#improveUncompression(AMD64AddressNode, CompressionNode, ValueNode)->boolean::: d64 hot spot address lowering improve uncompression
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotAddressLowering#preProcess(StructuredGraph)->void::: d64 hot spot address lowering pre process
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotAddressLowering#postProcess(AddressNode)->void::: d64 hot spot address lowering post process
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#newLIRGenerator(LIRGenerationResult)->LIRGeneratorTool::: d64 hot spot backend new generator
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#newLIRGenerationResult(CompilationIdentifier, LIR, RegisterConfig, StructuredGraph, Object)->LIRGenerationResult::: d64 hot spot backend new generation result
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#newNodeLIRBuilder(StructuredGraph, LIRGeneratorTool)->NodeLIRBuilderTool::: d64 hot spot backend new node builder
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#bangStackWithOffset(CompilationResultBuilder, int)->void::: d64 hot spot backend bang stack with offset
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend.HotSpotFrameContext#hasFrame()->boolean::: hot spot frame context has frame
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend.HotSpotFrameContext#enter(CompilationResultBuilder)->void::: hot spot frame context enter
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend.HotSpotFrameContext#leave(CompilationResultBuilder)->void::: hot spot frame context leave
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#newCompilationResultBuilder(LIRGenerationResult, FrameMap, CompilationResult, CompilationResultBuilderFactory)->CompilationResultBuilder::: d64 hot spot backend new compilation result builder
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#emitCode(CompilationResultBuilder, LIR, ResolvedJavaMethod)->void::: d64 hot spot backend emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#emitCodePrefix(ResolvedJavaMethod, CompilationResultBuilder, AMD64MacroAssembler, RegisterConfig, Label)->void:::Emits the code prior to the verified entry point.
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#emitCodeBody(ResolvedJavaMethod, CompilationResultBuilder, LIR)->void:::Emits the code which starts at the verified entry point.
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#emitCodeSuffix(ResolvedJavaMethod, CompilationResultBuilder, AMD64MacroAssembler, FrameMap)->void::: d64 hot spot backend emit code suffix
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#newRegisterAllocationConfig(RegisterConfig, String[])->RegisterAllocationConfig::: d64 hot spot backend new register allocation config
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackend#translateToCallerRegisters(EconomicSet)->EconomicSet::: d64 hot spot backend translate to caller registers
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#getName()->String::: d64 hot spot backend factory get name
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#getArchitecture()->Class::: d64 hot spot backend factory get architecture
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#createBackend(HotSpotGraalRuntimeProvider, CompilerConfiguration, HotSpotJVMCIRuntime, HotSpotBackend)->HotSpotBackend::: d64 hot spot backend factory create backend
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#createGraphBuilderPlugins(CompilerConfiguration, GraalHotSpotVMConfig, TargetDescription, HotSpotConstantReflectionProvider, HotSpotHostForeignCallsProvider, HotSpotMetaAccessProvider, HotSpotSnippetReflectionProvider, HotSpotReplacementsImpl, HotSpotWordTypes, OptionValues)->Plugins::: d64 hot spot backend factory create graph builder plugins
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#createBackend(GraalHotSpotVMConfig, HotSpotGraalRuntimeProvider, HotSpotProviders)->AMD64HotSpotBackend::: d64 hot spot backend factory create backend
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#createRegisters()->HotSpotRegistersProvider::: d64 hot spot backend factory create registers
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#createForeignCalls(HotSpotJVMCIRuntime, HotSpotGraalRuntimeProvider, HotSpotMetaAccessProvider, HotSpotCodeCacheProvider, WordTypes, Value[])->AMD64HotSpotForeignCallsProvider::: d64 hot spot backend factory create foreign calls
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#createSuites(GraalHotSpotVMConfig, HotSpotGraalRuntimeProvider, CompilerConfiguration, Plugins, HotSpotRegistersProvider, Replacements, OptionValues)->HotSpotSuitesProvider::: d64 hot spot backend factory create suites
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#createLowerer(HotSpotGraalRuntimeProvider, HotSpotMetaAccessProvider, HotSpotForeignCallsProvider, HotSpotRegistersProvider, HotSpotConstantReflectionProvider, TargetDescription)->HotSpotLoweringProvider::: d64 hot spot backend factory create lowerer
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#createNativeABICallerSaveRegisters(GraalHotSpotVMConfig, RegisterConfig)->Value[]::: d64 hot spot backend factory create native caller save registers
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotBackendFactory#toString()->String::: d64 hot spot backend factory to string
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotConstantRetrievalOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot constant retrieval op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotCounterOp#emitCode(CompilationResultBuilder)->void::: d64 hot spot counter op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotCRuntimeCallEpilogueOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot runtime call epilogue op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotCRuntimeCallPrologueOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot runtime call prologue op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotDeoptimizeCallerOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot deoptimize caller op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotDirectStaticCallOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot direct static call op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotspotDirectVirtualCallOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hotspot direct virtual call op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotEpilogueBlockEndOp#leaveFrameAndRestoreRbp(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot epilogue block end op leave frame and restore rbp
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotEpilogueBlockEndOp#setSavedRbp(AllocatableValue)->void::: d64 hot spot epilogue block end op set saved rbp
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotEpilogueOp#leaveFrameAndRestoreRbp(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot epilogue op leave frame and restore rbp
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotEpilogueOp#leaveFrameAndRestoreRbp(AllocatableValue, CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot epilogue op leave frame and restore rbp
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotEpilogueOp#setSavedRbp(AllocatableValue)->void::: d64 hot spot epilogue op set saved rbp
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotForeignCallsProvider#initialize(HotSpotProviders, OptionValues)->void::: d64 hot spot foreign calls provider initialize
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotForeignCallsProvider#getNativeABICallerSaveRegisters()->Value[]::: d64 hot spot foreign calls provider get native caller save registers
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotForeignCallsProvider#registerMathStubs(GraalHotSpotVMConfig, HotSpotProviders, OptionValues)->void::: d64 hot spot foreign calls provider register math stubs
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotJumpToExceptionHandlerInCallerOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot jump to exception handler in caller op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLeaveCurrentStackFrameOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot leave current stack frame op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLeaveDeoptimizedStackFrameOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot leave deoptimized stack frame op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#getProviders()->HotSpotProviders::: d64 hot spot generator get providers
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#getMaxVectorSize()->int::: d64 hot spot generator get max vector size
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator.SaveRbp#finalize(boolean)->AllocatableValue:::Replaces this operation with the appropriate move for saving rbp.
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitSaveRbp()->void::: d64 hot spot generator emit save rbp
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#getSaveRbp()->SaveRbp::: d64 hot spot generator get save rbp
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#append(I)->I::: d64 hot spot generator append
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#getLockSlot(int)->VirtualStackSlot::: d64 hot spot generator get lock slot
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitReturn(JavaKind, Value)->void::: d64 hot spot generator emit return
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#needOnlyOopMaps()->boolean::: d64 hot spot generator need only oop maps
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitForeignCallOp(ForeignCallLinkage, Value, Value[], Value[], LIRFrameState)->void::: d64 hot spot generator emit foreign call op
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitSaveRegisters(Register[], AllocatableValue[], boolean)->AMD64SaveRegistersOp::: d64 hot spot generator emit save registers
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#allocateSaveRegisterLocation(Register)->VirtualStackSlot:::Allocate a stack slot for saving a register.
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitRestoreRegisters(AMD64SaveRegistersOp)->void::: d64 hot spot generator emit restore registers
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#getStub()->Stub:::Gets the Stub this generator is generating code for or null if a stub is not being generated.
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#getResult()->HotSpotLIRGenerationResult::: d64 hot spot generator get result
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#setDebugInfoBuilder(HotSpotDebugInfoBuilder)->void::: d64 hot spot generator set debug info builder
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitForeignCall(ForeignCallLinkage, LIRFrameState, Value...)->Variable::: d64 hot spot generator emit foreign call
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitLoadObjectAddress(Constant)->Value::: d64 hot spot generator emit load object address
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitLoadMetaspaceAddress(Constant, HotSpotConstantLoadAction)->Value::: d64 hot spot generator emit load metaspace address
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitObjectConstantRetrieval(Constant, Value, LIRFrameState)->Value::: d64 hot spot generator emit object constant retrieval
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitMetaspaceConstantRetrieval(Constant, Value, LIRFrameState)->Value::: d64 hot spot generator emit metaspace constant retrieval
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitKlassInitializationAndRetrieval(Constant, Value, LIRFrameState)->Value::: d64 hot spot generator emit klass initialization and retrieval
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitResolveMethodAndLoadCounters(Constant, Value, Value, LIRFrameState)->Value::: d64 hot spot generator emit resolve method and load counters
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitResolveDynamicInvoke(Constant, LIRFrameState)->Value::: d64 hot spot generator emit resolve dynamic invoke
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitLoadConfigValue(int, LIRKind)->Value::: d64 hot spot generator emit load config value
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitRandomSeed()->Value::: d64 hot spot generator emit random seed
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitTailcall(Value[], Value)->void::: d64 hot spot generator emit tailcall
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitCCall(long, CallingConvention, Value[], int)->void::: d64 hot spot generator emit call
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitUnwind(Value)->void::: d64 hot spot generator emit unwind
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitDeoptimize(Value, Value, LIRFrameState)->void::: d64 hot spot generator emit deoptimize
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitDeoptimizeCaller(DeoptimizationAction, DeoptimizationReason)->void::: d64 hot spot generator emit deoptimize caller
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#beforeRegisterAllocation()->void::: d64 hot spot generator before register allocation
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitCompress(Value, CompressEncoding, boolean)->Value::: d64 hot spot generator emit compress
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitUncompress(Value, CompressEncoding, boolean)->Value::: d64 hot spot generator emit uncompress
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitNullCheck(Value, LIRFrameState)->void::: d64 hot spot generator emit null check
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#createBenchmarkCounter(String, String, Value)->LIRInstruction::: d64 hot spot generator create benchmark counter
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#createMultiBenchmarkCounter(String[], String[], Value[])->LIRInstruction::: d64 hot spot generator create multi benchmark counter
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#emitPrefetchAllocate(Value)->void::: d64 hot spot generator emit prefetch allocate
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRGenerator#createStrategySwitchOp(SwitchStrategy, LabelRef[], LabelRef, Variable, AllocatableValue)->StrategySwitchOp::: d64 hot spot generator create strategy switch op
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool#getNarrowOopKind()->LIRKind::: d64 hot spot kind tool get narrow oop kind
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLIRKindTool#getNarrowPointerKind()->LIRKind::: d64 hot spot kind tool get narrow pointer kind
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLoadAddressOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot load address op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLoadConfigValueOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot load config value op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLoweringProvider#initialize(OptionValues, Iterable, HotSpotProviders, GraalHotSpotVMConfig)->void::: d64 hot spot lowering provider initialize
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotLoweringProvider#lower(Node, LoweringTool)->void::: d64 hot spot lowering provider lower
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMathIntrinsicOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot math intrinsic op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMove.HotSpotLoadObjectConstantOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: hot spot load object constant op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMove.HotSpotLoadObjectConstantOp#getConstant()->Constant::: hot spot load object constant op get constant
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMove.HotSpotLoadObjectConstantOp#getResult()->AllocatableValue::: hot spot load object constant op get result
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMove.BaseMove#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: base move emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMove.HotSpotLoadMetaspaceConstantOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: hot spot load metaspace constant op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMove.HotSpotLoadMetaspaceConstantOp#getConstant()->Constant::: hot spot load metaspace constant op get constant
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMove.HotSpotLoadMetaspaceConstantOp#getResult()->AllocatableValue::: hot spot load metaspace constant op get result
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMove#decodeKlassPointer(CompilationResultBuilder, AMD64MacroAssembler, Register, Register, AMD64Address, GraalHotSpotVMConfig)->void::: d64 hot spot move decode klass pointer
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMoveFactory#canInlineConstant(Constant)->boolean::: d64 hot spot move factory can inline constant
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMoveFactory#allowConstantToStackMove(Constant)->boolean::: d64 hot spot move factory allow constant to stack move
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMoveFactory#createLoad(AllocatableValue, Constant)->AMD64LIRInstruction::: d64 hot spot move factory create load
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotMoveFactory#createStackLoad(AllocatableValue, Constant)->LIRInstruction::: d64 hot spot move factory create stack load
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#createDebugInfoBuilder(StructuredGraph, NodeValueMap)->DebugInfoBuilder::: d64 hot spot node builder create debug info builder
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#emitPrologue(StructuredGraph)->void::: d64 hot spot node builder emit prologue
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#visitSafepointNode(SafepointNode)->void::: d64 hot spot node builder visit safepoint node
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#emitDirectCall(DirectCallTargetNode, Value, Value[], Value[], LIRFrameState)->void::: d64 hot spot node builder emit direct call
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#emitIndirectCall(IndirectCallTargetNode, Value, Value[], Value[], LIRFrameState)->void::: d64 hot spot node builder emit indirect call
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#emitPatchReturnAddress(ValueNode)->void::: d64 hot spot node builder emit patch return address
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#emitJumpToExceptionHandlerInCaller(ValueNode, ValueNode, ValueNode)->void::: d64 hot spot node builder emit jump to exception handler in caller
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#visitFullInfopointNode(FullInfopointNode)->void::: d64 hot spot node builder visit full infopoint node
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#visitBreakpointNode(BreakpointNode)->void::: d64 hot spot node builder visit breakpoint node
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotNodeLIRBuilder#lookupGraalStub(ValueNode)->ForeignCallLinkage::: d64 hot spot node builder lookup graal stub
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotPatchReturnAddressOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot patch return address op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotPushInterpreterFrameOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot push interpreter frame op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotRegisterAllocationConfig#initAllocatable(RegisterArray)->RegisterArray::: d64 hot spot register allocation config init allocatable
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotRestoreRbpOp#setSavedRbp(AllocatableValue)->void::: d64 hot spot restore rbp op set saved rbp
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotReturnOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot return op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotSafepointOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot safepoint op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotSafepointOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler, GraalHotSpotVMConfig, boolean, LIRFrameState, Register, Register)->void::: d64 hot spot safepoint op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotStrategySwitchOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot strategy switch op emit code
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotStrategySwitchOp.HotSpotSwitchClosure#emitComparison(Constant)->void::: hot spot switch closure emit comparison
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotSuitesCreator#createLIRSuites(OptionValues)->LIRSuites::: d64 hot spot suites creator create suites
org.graalvm.compiler.hotspot.amd64.AMD64HotSpotUnwindOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 hot spot unwind op emit code
org.graalvm.compiler.hotspot.amd64.AMD64IndirectCallOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 indirect call op emit code
org.graalvm.compiler.hotspot.amd64.AMD64IndirectCallOp#verify()->void::: d64 indirect call op verify
org.graalvm.compiler.hotspot.amd64.AMD64TailcallOp#emitCode(CompilationResultBuilder, AMD64MacroAssembler)->void::: d64 tailcall op emit code
org.graalvm.compiler.hotspot.amd64.AMD64X87MathIntrinsicNode#foldStamp(Stamp)->Stamp::: d64 x87 math intrinsic node fold stamp
org.graalvm.compiler.hotspot.amd64.AMD64X87MathIntrinsicNode#generate(NodeLIRBuilderTool)->void::: d64 x87 math intrinsic node generate
org.graalvm.compiler.hotspot.amd64.AMD64X87MathIntrinsicNode#canonical(CanonicalizerTool, ValueNode)->ValueNode::: d64 x87 math intrinsic node canonical
org.graalvm.compiler.hotspot.amd64.AMD64X87MathIntrinsicNode#compute(double, UnaryOperation)->double::: d64 x87 math intrinsic node compute
org.graalvm.compiler.hotspot.amd64.AMD64X87MathSnippets#sin(double)->double::: d64 x87 math snippets sin
org.graalvm.compiler.hotspot.amd64.AMD64X87MathSnippets#cos(double)->double::: d64 x87 math snippets cos
org.graalvm.compiler.hotspot.amd64.AMD64X87MathSnippets#tan(double)->double::: d64 x87 math snippets tan
org.graalvm.compiler.hotspot.amd64.AMD64X87MathSnippets.Templates#lower(UnaryMathIntrinsicNode, LoweringTool)->void::: templates lower

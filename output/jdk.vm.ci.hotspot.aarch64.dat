AArch64HotSpotJVMCIBackendFactory#computeFeatures(AArch64HotSpotVMConfig)::: arch64 hot spot backend factory compute features:::features->EnumSet->noneOf->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->if->features->add->return
AArch64HotSpotJVMCIBackendFactory#computeFlags(AArch64HotSpotVMConfig)::: arch64 hot spot backend factory compute flags:::flags->EnumSet->noneOf->if->flags->add->if->flags->add->if->flags->add->if->flags->add->if->flags->add->if->flags->add->if->flags->add->return
AArch64HotSpotJVMCIBackendFactory#createTarget(AArch64HotSpotVMConfig)::: arch64 hot spot backend factory create target:::stackFrameAlignment->implicitNullCheckLimit->inlineObjects->arch->computeFeatures->computeFlags->new->AArch64->return->new->TargetDescription
AArch64HotSpotJVMCIBackendFactory#createConstantReflection(HotSpotJVMCIRuntime)::: arch64 hot spot backend factory create constant reflection:::return->new->HotSpotConstantReflectionProvider
AArch64HotSpotJVMCIBackendFactory#createRegisterConfig(TargetDescription)::: arch64 hot spot backend factory create register config:::return->new->AArch64HotSpotRegisterConfig
AArch64HotSpotJVMCIBackendFactory#createCodeCache(HotSpotJVMCIRuntime, TargetDescription, RegisterConfig)::: arch64 hot spot backend factory create code cache:::return->new->HotSpotCodeCacheProvider
AArch64HotSpotJVMCIBackendFactory#createMetaAccess(HotSpotJVMCIRuntime)::: arch64 hot spot backend factory create meta access:::return->new->HotSpotMetaAccessProvider
AArch64HotSpotJVMCIBackendFactory#getArchitecture()::: arch64 hot spot backend factory get architecture:::return
AArch64HotSpotJVMCIBackendFactory#toString()::: arch64 hot spot backend factory to string:::return->getArchitecture
AArch64HotSpotJVMCIBackendFactory#createJVMCIBackend(HotSpotJVMCIRuntime, JVMCIBackend)::: arch64 hot spot backend factory create backend:::config->runtime->getConfigStore->new->AArch64HotSpotVMConfig->target->createTarget->regConfig->codeCache->constantReflection->metaAccess->stackIntrospection->try->t->timer->try->rt->timer->createMetaAccess->catch->finally->try->rt->timer->createRegisterConfig->catch->finally->try->rt->timer->createCodeCache->catch->finally->try->rt->timer->createConstantReflection->catch->finally->try->rt->timer->new->HotSpotStackIntrospection->catch->finally->catch->finally->try->rt->timer->return->createBackend->catch->finally
AArch64HotSpotJVMCIBackendFactory#createBackend(HotSpotMetaAccessProvider, HotSpotCodeCacheProvider, ConstantReflectionProvider, StackIntrospection)::: arch64 hot spot backend factory create backend:::return->new->JVMCIBackend
AArch64HotSpotRegisterConfig#getAllocatableRegisters()::: arch64 hot spot register config get allocatable registers:::return
AArch64HotSpotRegisterConfig#filterAllocatableRegisters(PlatformKind, RegisterArray)::: arch64 hot spot register config filter allocatable registers:::list->new->ArrayList<>->foreach->if->reg->getRegisterCategory->canStoreValue->list->add->return->new->RegisterArray
AArch64HotSpotRegisterConfig#getAttributesMap()::: arch64 hot spot register config get attributes map:::return->attributesMap->clone
AArch64HotSpotRegisterConfig#initAllocatable(Architecture)::: arch64 hot spot register config init allocatable:::allRegisters->arch->getAvailableValueRegisters->registers->allRegisters->size->reservedRegisters->size->new->RegisterArr->reservedRegistersList->reservedRegisters->asList->idx->foreach->if->reservedRegistersList->contains->continue->return->new->RegisterArray
AArch64HotSpotRegisterConfig#getCallerSaveRegisters()::: arch64 hot spot register config get caller save registers:::return
AArch64HotSpotRegisterConfig#getCalleeSaveRegisters()::: arch64 hot spot register config get callee save registers:::return
AArch64HotSpotRegisterConfig#areAllAllocatableRegistersCallerSaved()::: arch64 hot spot register config are all allocatable registers caller saved:::return
AArch64HotSpotRegisterConfig#getCallingConvention(Type, JavaType, JavaType[], ValueKindFactory)::: arch64 hot spot register config get calling convention:::hotspotType->if->return->callingConvention->return->callingConvention
AArch64HotSpotRegisterConfig#getCallingConventionRegisters(Type, JavaKind)::: arch64 hot spot register config get calling convention registers:::hotspotType->switch->return->return->throw->JVMCIError->shouldNotReachHere
AArch64HotSpotRegisterConfig#callingConvention(RegisterArray, JavaType, JavaType[], HotSpotCallingConventionType, ValueKindFactory)::: arch64 hot spot register config calling convention:::locations->new->AllocatableValueArr->currentGeneral->currentSIMD->currentStackOffset->for->i->returnKind->returnType->getJavaKind->returnLocation->getReturnRegister->valueKindFactory->returnKind->getStackKind->getValueKind->asValue->return->new->CallingConvention
AArch64HotSpotRegisterConfig#getReturnRegister(JavaKind)::: arch64 hot spot register config get return register:::switch->return->return->return->throw->new->UnsupportedOperationException
AArch64HotSpotRegisterConfig#getFrameRegister()::: arch64 hot spot register config get frame register:::return
AArch64HotSpotRegisterConfig#toString()::: arch64 hot spot register config to string:::return->String->getAllocatableRegisters->getCallerSaveRegisters->format

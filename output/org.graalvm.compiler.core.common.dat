GraalOptions_OptionDescriptors#get(String)::: graal options_ option descriptors get:::switch->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->new->StringArr->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return->OptionDescriptor->create->return
GraalOptions_OptionDescriptors#iterator()::: graal options_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
SpeculativeExecutionAttacksMitigations_OptionDescriptors#get(String)::: speculative execution attacks mitigations_ option descriptors get:::switch->return->OptionDescriptor->new->StringArr->create->return->OptionDescriptor->create->return
SpeculativeExecutionAttacksMitigations_OptionDescriptors#iterator()::: speculative execution attacks mitigations_ option descriptors iterator:::return->new->Iterator<OptionDescriptor>
CancellationBailoutException#cancelCompilation()::: cancellation bailout exception cancel compilation:::throw->new->CancellationBailoutException
CompilationIdentifier#toString():::This method is a shortcut for #toString(Verbosity) with Verbosity#DETAILED.:::
CompilationIdentifier#toString(Verbosity):::Creates a String representation for this compilation identifier with a given Verbosity.:::
CompilationRequestIdentifier#getRequest()::: compilation request identifier get request:::
CompilationRequestIdentifier#asCompilationRequest(CompilationIdentifier):::Returns the CompilationRequestIdentifier#getRequest() request from a CompilationRequestIdentifier:::if->return->getRequest->return
CompressEncoding#hasBase()::: compress encoding has base:::return
CompressEncoding#hasShift()::: compress encoding has shift:::return
CompressEncoding#getBase()::: compress encoding get base:::return
CompressEncoding#getShift()::: compress encoding get shift:::return
CompressEncoding#toString()::: compress encoding to string:::return
CompressEncoding#hashCode()::: compress encoding hash code:::prime->result->return
CompressEncoding#equals(Object)::: compress encoding equals:::if->other->return->return
FieldIntrospection#getClazz()::: field introspection get clazz:::return
FieldIntrospection#getData():::Gets the fields in #getClazz() that do long belong to specific category.:::return
FieldIntrospection#getAllFields()::: field introspection get all fields:::
Fields#forClass(Class, Class, boolean, FieldsScanner.CalcOffset)::: fields for class:::scanner->new->FieldsScanner.DefaultCalcOffset->new->FieldsScanner->scanner->scan->return->new->Fields
Fields#getCount():::Gets the number of fields represented by this object.:::return
Fields#translateInto(Fields, ArrayList)::: fields translate into:::for->index->fields->getCount
Fields.ObjectTransformer#apply(int, Object)::: object transformer apply:::
Fields#copy(Object, Object):::Copies fields from from to to, both of which must be of the same type.:::copy
Fields#copy(Object, Object, ObjectTransformer):::Copies fields from from to to, both of which must be of the same type.:::for->index
Fields#get(Object, int):::Gets the value of a field for a given object.:::offset->type->value->if->type->isPrimitive->if->UNSAFE->getInt->else->if->UNSAFE->getLong->else->if->UNSAFE->getBoolean->else->if->UNSAFE->getFloat->else->if->UNSAFE->getDouble->else->if->UNSAFE->getShort->else->if->UNSAFE->getChar->else->if->UNSAFE->getByte->else->else->UNSAFE->getObject->return
Fields#getRawPrimitive(Object, int):::Gets the value of a field for a given object.:::offset->type->if->return->UNSAFE->getInt->else->if->return->UNSAFE->getLong->else->if->return->UNSAFE->getBoolean->else->if->return->Float->UNSAFE->getFloat->floatToRawIntBits->else->if->return->Double->UNSAFE->getDouble->doubleToRawLongBits->else->if->return->UNSAFE->getShort->else->if->return->UNSAFE->getChar->else->if->return->UNSAFE->getByte->else->throw->GraalError->shouldNotReachHere
Fields#isSame(Fields, int):::Determines if a field in the domain of this object is the same as the field denoted by the same index in another Fields object.:::return
Fields#getOffsets()::: fields get offsets:::return
Fields#getName(int):::Gets the name of a field.:::return
Fields#getType(int):::Gets the type of a field.:::return
Fields#getDeclaringClass(int)::: fields get declaring class:::return
Fields#checkAssignableFrom(Object, int, Object):::Checks that a given field is assignable from a given value.:::return
Fields#set(Object, int, Object)::: fields set:::offset->type->if->type->isPrimitive->if->UNSAFE->putInt->else->if->UNSAFE->putLong->else->if->UNSAFE->putBoolean->else->if->UNSAFE->putFloat->else->if->UNSAFE->putDouble->else->if->UNSAFE->putShort->else->if->UNSAFE->putChar->else->if->UNSAFE->putByte->else->else->UNSAFE->putObject
Fields#setRawPrimitive(Object, int, long)::: fields set raw primitive:::offset->type->if->UNSAFE->putInt->else->if->UNSAFE->putLong->else->if->UNSAFE->putBoolean->else->if->UNSAFE->Float->intBitsToFloat->putFloat->else->if->UNSAFE->Double->longBitsToDouble->putDouble->else->if->UNSAFE->putShort->else->if->UNSAFE->putChar->else->if->UNSAFE->putByte->else->throw->GraalError->shouldNotReachHere
Fields#toString()::: fields to string:::sb->getClass->getSimpleName->new->StringBuilder->append->appendFields->return->sb->append->toString
Fields#appendFields(StringBuilder)::: fields append fields:::for->i
Fields#getBoolean(Object, int)::: fields get boolean:::return->UNSAFE->getBoolean
Fields#getByte(Object, int)::: fields get byte:::return->UNSAFE->getByte
Fields#getShort(Object, int)::: fields get short:::return->UNSAFE->getShort
Fields#getChar(Object, int)::: fields get char:::return->UNSAFE->getChar
Fields#getInt(Object, int)::: fields get int:::return->UNSAFE->getInt
Fields#getLong(Object, int)::: fields get long:::return->UNSAFE->getLong
Fields#getFloat(Object, int)::: fields get float:::return->UNSAFE->getFloat
Fields#getDouble(Object, int)::: fields get double:::return->UNSAFE->getDouble
Fields#getObject(Object, int)::: fields get object:::return->UNSAFE->getObject
Fields#putObject(Object, int, Object)::: fields put object:::UNSAFE->putObject
FieldsScanner.CalcOffset#getOffset(Field)::: calc offset get offset:::
FieldsScanner.DefaultCalcOffset#getOffset(Field)::: default calc offset get offset:::return->UNSAFE->objectFieldOffset
FieldsScanner.FieldInfo#compareTo(FieldInfo):::Sorts fields in ascending order by their #offsets.:::return
FieldsScanner.FieldInfo#toString()::: field info to string:::return->type->getSimpleName
FieldsScanner#scan(Class, Class, boolean):::Scans the fields in a class hierarchy.:::currentClazz->while->foreach->currentClazz->getDeclaredFields->if->Modifier->field->getModifiers->isStatic->continue->if->Modifier->field->getModifiers->isTransient->continue->offset->calc->getOffset->scanField->currentClazz->getSuperclass
FieldsScanner#scanField(Field, long)::: fields scanner scan field:::data->field->getName->field->getType->field->getDeclaringClass->new->FieldsScanner.FieldInfo->add
GraalBailoutException#isCausedByCompilerAssert()::: graal bailout exception is caused by compiler assert:::return
LIRKind#value(PlatformKind):::Create a LIRKind of type platformKind that contains a primitive value:::return->new->LIRKind
LIRKind#reference(PlatformKind):::Create a LIRKind of type platformKind that contains a single, tracked, uncompressed oop reference.:::return->derivedReference
LIRKind#compressedReference(PlatformKind):::Create a LIRKind of type platformKind that contains a single, tracked, compressed oop reference.:::return->derivedReference
LIRKind#fromJavaKind(Architecture, JavaKind):::Create the correct LIRKind for a given Architecture and JavaKind.:::platformKind->arch->getPlatformKind->if->javaKind->isObject->return->LIRKind->reference->else->return->LIRKind->value
LIRKind#derivedReference(PlatformKind, AllocatableValue, boolean):::Create a LIRKind of type platformKind that contains a derived reference.:::length->platformKind->getVectorLength->referenceMask->referenceCompressionMask->return->new->LIRKind
LIRKind#unknownReference(PlatformKind):::Create a LIRKind of type platformKind that contains a value that is derived from a reference in a non-linear way:::return->new->LIRKind
LIRKind#makeDerivedReference(AllocatableValue):::Create a derived reference.:::if->equals->return->makeUnknownReference->else->if->isValue->return->getPlatformKind->derivedReference->else->return->getPlatformKind->new->LIRKind
LIRKind#combine(Value...):::Derive a new type from inputs:::foreach->kind->input->getValueKind->if->kind->isUnknownReference->return->else->if->kind->isValue->return->kind->makeUnknownReference->return->getValueKind
LIRKind#derivedBaseFromValue(AllocatableValue):::Helper method to construct derived reference kinds:::valueKind->value->getValueKind->if->kind->value->getValueKind->if->kind->isValue->return->else->if->kind->isDerivedReference->return->kind->getDerivedReferenceBase->else->if->kind->isUnknownReference->return->else->return->else->return
LIRKind#combineDerived(LIRKind, AllocatableValue, AllocatableValue):::Helper method to construct derived reference kinds:::if->return->else->if->return->kind->makeDerivedReference->else->if->return->kind->makeDerivedReference->else->return->kind->makeUnknownReference
LIRKind#mergeReferenceInformation(LIRKind, LIRKind):::Merges the reference information of the inputs:::if->mergeKind->isUnknownReference->return->if->mergeKind->isValue->if->inputKind->isValue->return->mergeKind->makeUnknownReference->return->if->return->mergeKind->makeUnknownReference->if->mergeKind->isDerivedReference->if->inputKind->isDerivedReference->mergeKind->getDerivedReferenceBase->inputKind->getDerivedReferenceBase->equals->return->return->mergeKind->makeUnknownReference->if->inputKind->isDerivedReference->return->mergeKind->makeUnknownReference->return
LIRKind#changeType(PlatformKind):::Create a new LIRKind with the same reference information and a new #getPlatformKind platform kind:::if->getPlatformKind->return->else->if->isUnknownReference->return->unknownReference->else->if->return->LIRKind->value->else->newLength->Math->newPlatformKind->getVectorLength->min->lengthMask->newReferenceMask->newReferenceCompressionMask->return->new->LIRKind
LIRKind#repeat(PlatformKind):::Create a new LIRKind with a new #getPlatformKind platform kind:::if->isUnknownReference->return->unknownReference->else->if->return->LIRKind->value->else->oldLength->getPlatformKind->getVectorLength->newLength->newPlatformKind->getVectorLength->newReferenceMask->newReferenceCompressionMask->for->i->getPlatformKind->getVectorLength->return->new->LIRKind
LIRKind#makeUnknownReference():::Create a new LIRKind with the same type, but marked as containing an LIRKind#unknownReference.:::return->getPlatformKind->new->LIRKind
LIRKind#isDerivedReference():::Check whether this value is a derived reference.:::return->getDerivedReferenceBase
LIRKind#getDerivedReferenceBase():::Get the base value of a derived reference.:::return
LIRKind#setDerivedReferenceBase(AllocatableValue):::Change the base value of a derived reference:::
LIRKind#isUnknownReference():::Check whether this value is derived from a reference in a non-linear way:::return
LIRKind#isUnknownReference(ValueKind)::: kind is unknown reference:::if->return->isUnknownReference->else->return
LIRKind#isUnknownReference(Value)::: kind is unknown reference:::return->value->getValueKind->isUnknownReference
LIRKind#getReferenceCount()::: kind get reference count:::return->Integer->bitCount
LIRKind#isReference(int):::Check whether the idxth part of this value is a reference that must be tracked at safepoints.:::return->isUnknownReference
LIRKind#isCompressedReference(int):::Check whether the idxth part of this value is a compressed reference.:::return->isUnknownReference
LIRKind#isValue():::Check whether this kind is a value type that doesn't need to be tracked at safepoints.:::return
LIRKind#isValue(ValueKind)::: kind is value:::if->return->isValue->else->return
LIRKind#isValue(Value)::: kind is value:::return->value->getValueKind->isValue
LIRKind#toString()::: kind to string:::if->isValue->return->getPlatformKind->name->else->if->isUnknownReference->return->getPlatformKind->name->else->ret->new->StringBuilder->ret->getPlatformKind->name->append->ret->append->for->i->getPlatformKind->getVectorLength->ret->append->return->ret->toString
LIRKind#hashCode()::: kind hash code:::prime->result->getPlatformKind->getPlatformKind->hashCode->getDerivedReferenceBase->getDerivedReferenceBase->hashCode->return
LIRKind#equals(Object)::: kind equals:::if->return->if->return->other->if->getPlatformKind->other->getPlatformKind->return->if->isDerivedReference->if->other->isDerivedReference->return->return->getDerivedReferenceBase->other->getDerivedReferenceBase->equals->if->other->isDerivedReference->return->return
LIRKind#verifyMoveKinds(ValueKind, ValueKind, RegisterAllocationConfig)::: kind verify move kinds:::if->src->equals->return->if->isUnknownReference->isValue->isValue->srcPlatformKind->src->getPlatformKind->dstPlatformKind->dst->getPlatformKind->if->srcPlatformKind->equals->return->return->config->getRegisterCategory->config->getRegisterCategory->equals->return
NumUtil#isShiftCount(int)::: num util is shift count:::return
NumUtil#isUByte(int):::Determines if a given int value is the range of unsigned byte values.:::return
NumUtil#isByte(int):::Determines if a given int value is the range of signed byte values.:::return
NumUtil#isUByte(long):::Determines if a given long value is the range of unsigned byte values.:::return
NumUtil#isByte(long):::Determines if a given long value is the range of signed byte values.:::return
NumUtil#isUInt(long):::Determines if a given long value is the range of unsigned int values.:::return
NumUtil#isInt(long):::Determines if a given long value is the range of signed int values.:::return
NumUtil#isShort(int):::Determines if a given int value is the range of signed short values.:::return
NumUtil#isShort(long):::Determines if a given long value is the range of signed short values.:::return
NumUtil#isUShort(int)::: num util is short:::return
NumUtil#isUShort(long)::: num util is short:::return
NumUtil#is32bit(long)::: num util is32bit:::return
NumUtil#safeToShort(int)::: num util safe to short:::return
NumUtil#safeToInt(long)::: num util safe to int:::return
NumUtil#roundUp(int, int)::: num util round up:::return
NumUtil#roundUp(long, long)::: num util round up:::return
NumUtil#roundDown(int, int)::: num util round down:::return
NumUtil#roundDown(long, long)::: num util round down:::return
NumUtil#log2Ceil(int)::: num util log2 ceil:::x->log2->while->return
NumUtil#isUnsignedNbit(int, int)::: num util is unsigned nbit:::return->Integer->numberOfLeadingZeros
NumUtil#isUnsignedNbit(int, long)::: num util is unsigned nbit:::return->Long->numberOfLeadingZeros
NumUtil#isSignedNbit(int, int)::: num util is signed nbit:::min->max->return
NumUtil#isSignedNbit(int, long)::: num util is signed nbit:::min->max->return
NumUtil#getNbitNumberInt(int)::: num util get nbit number int:::if->return->else->return
NumUtil#getNbitNumberLong(int)::: num util get nbit number long:::if->return->else->return
NumUtil#minValue(int):::Get the minimum value representable in a bits bit signed integer.:::return->CodeUtil->minValue
NumUtil#maxValue(int):::Get the maximum value representable in a bits bit signed integer.:::return->CodeUtil->maxValue
NumUtil#maxValueUnsigned(int):::Get the maximum value representable in a bits bit unsigned integer.:::return->getNbitNumberLong
NumUtil#maxUnsigned(long, long)::: num util max unsigned:::if->Long->compareUnsigned->return->return
NumUtil#minUnsigned(long, long)::: num util min unsigned:::if->Long->compareUnsigned->return->return
NumUtil#sameSign(long, long)::: num util same sign:::return

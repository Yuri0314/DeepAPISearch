org.graalvm.compiler.core.common.GraalOptions_OptionDescriptors#get(String)->OptionDescriptor::: graal options_ option descriptors get
org.graalvm.compiler.core.common.GraalOptions_OptionDescriptors#iterator()->Iterator::: graal options_ option descriptors iterator
org.graalvm.compiler.core.common.SpeculativeExecutionAttacksMitigations_OptionDescriptors#get(String)->OptionDescriptor::: speculative execution attacks mitigations_ option descriptors get
org.graalvm.compiler.core.common.SpeculativeExecutionAttacksMitigations_OptionDescriptors#iterator()->Iterator::: speculative execution attacks mitigations_ option descriptors iterator
org.graalvm.compiler.core.common.CancellationBailoutException#cancelCompilation()->void::: cancellation bailout exception cancel compilation
org.graalvm.compiler.core.common.CompilationIdentifier#toString()->String:::This method is a shortcut for #toString(Verbosity) with Verbosity#DETAILED.
org.graalvm.compiler.core.common.CompilationIdentifier#toString(Verbosity)->String:::Creates a String representation for this compilation identifier with a given Verbosity.
org.graalvm.compiler.core.common.CompilationRequestIdentifier#getRequest()->CompilationRequest::: compilation request identifier get request
org.graalvm.compiler.core.common.CompilationRequestIdentifier#asCompilationRequest(CompilationIdentifier)->CompilationRequest:::Returns the CompilationRequestIdentifier#getRequest() request from a CompilationRequestIdentifier
org.graalvm.compiler.core.common.CompressEncoding#hasBase()->boolean::: compress encoding has base
org.graalvm.compiler.core.common.CompressEncoding#hasShift()->boolean::: compress encoding has shift
org.graalvm.compiler.core.common.CompressEncoding#getBase()->long::: compress encoding get base
org.graalvm.compiler.core.common.CompressEncoding#getShift()->int::: compress encoding get shift
org.graalvm.compiler.core.common.CompressEncoding#toString()->String::: compress encoding to string
org.graalvm.compiler.core.common.CompressEncoding#hashCode()->int::: compress encoding hash code
org.graalvm.compiler.core.common.CompressEncoding#equals(Object)->boolean::: compress encoding equals
org.graalvm.compiler.core.common.FieldIntrospection#getClazz()->Class::: field introspection get clazz
org.graalvm.compiler.core.common.FieldIntrospection#getData()->Fields:::Gets the fields in #getClazz() that do long belong to specific category.
org.graalvm.compiler.core.common.FieldIntrospection#getAllFields()->Fields[]::: field introspection get all fields
org.graalvm.compiler.core.common.Fields#forClass(Class, Class, boolean, FieldsScanner.CalcOffset)->Fields::: fields for class
org.graalvm.compiler.core.common.Fields#getCount()->int:::Gets the number of fields represented by this object.
org.graalvm.compiler.core.common.Fields#translateInto(Fields, ArrayList)->void::: fields translate into
org.graalvm.compiler.core.common.Fields.ObjectTransformer#apply(int, Object)->Object::: object transformer apply
org.graalvm.compiler.core.common.Fields#copy(Object, Object)->void:::Copies fields from from to to, both of which must be of the same type.
org.graalvm.compiler.core.common.Fields#copy(Object, Object, ObjectTransformer)->void:::Copies fields from from to to, both of which must be of the same type.
org.graalvm.compiler.core.common.Fields#get(Object, int)->Object:::Gets the value of a field for a given object.
org.graalvm.compiler.core.common.Fields#getRawPrimitive(Object, int)->long:::Gets the value of a field for a given object.
org.graalvm.compiler.core.common.Fields#isSame(Fields, int)->boolean:::Determines if a field in the domain of this object is the same as the field denoted by the same index in another Fields object.
org.graalvm.compiler.core.common.Fields#getOffsets()->long[]::: fields get offsets
org.graalvm.compiler.core.common.Fields#getName(int)->String:::Gets the name of a field.
org.graalvm.compiler.core.common.Fields#getType(int)->Class:::Gets the type of a field.
org.graalvm.compiler.core.common.Fields#getDeclaringClass(int)->Class::: fields get declaring class
org.graalvm.compiler.core.common.Fields#set(Object, int, Object)->void::: fields set
org.graalvm.compiler.core.common.Fields#setRawPrimitive(Object, int, long)->void::: fields set raw primitive
org.graalvm.compiler.core.common.Fields#toString()->String::: fields to string
org.graalvm.compiler.core.common.Fields#appendFields(StringBuilder)->void::: fields append fields
org.graalvm.compiler.core.common.Fields#getBoolean(Object, int)->boolean::: fields get boolean
org.graalvm.compiler.core.common.Fields#getByte(Object, int)->byte::: fields get byte
org.graalvm.compiler.core.common.Fields#getShort(Object, int)->short::: fields get short
org.graalvm.compiler.core.common.Fields#getChar(Object, int)->char::: fields get char
org.graalvm.compiler.core.common.Fields#getInt(Object, int)->int::: fields get int
org.graalvm.compiler.core.common.Fields#getLong(Object, int)->long::: fields get long
org.graalvm.compiler.core.common.Fields#getFloat(Object, int)->float::: fields get float
org.graalvm.compiler.core.common.Fields#getDouble(Object, int)->double::: fields get double
org.graalvm.compiler.core.common.Fields#getObject(Object, int)->Object::: fields get object
org.graalvm.compiler.core.common.Fields#putObject(Object, int, Object)->void::: fields put object
org.graalvm.compiler.core.common.FieldsScanner.CalcOffset#getOffset(Field)->long::: calc offset get offset
org.graalvm.compiler.core.common.FieldsScanner.DefaultCalcOffset#getOffset(Field)->long::: default calc offset get offset
org.graalvm.compiler.core.common.FieldsScanner.FieldInfo#compareTo(FieldInfo)->int:::Sorts fields in ascending order by their #offsets.
org.graalvm.compiler.core.common.FieldsScanner.FieldInfo#toString()->String::: field info to string
org.graalvm.compiler.core.common.FieldsScanner#scan(Class, Class, boolean)->void:::Scans the fields in a class hierarchy.
org.graalvm.compiler.core.common.FieldsScanner#scanField(Field, long)->void::: fields scanner scan field
org.graalvm.compiler.core.common.GraalBailoutException#isCausedByCompilerAssert()->boolean::: graal bailout exception is caused by compiler assert
org.graalvm.compiler.core.common.LIRKind#value(PlatformKind)->LIRKind:::Create a LIRKind of type platformKind that contains a primitive value
org.graalvm.compiler.core.common.LIRKind#reference(PlatformKind)->LIRKind:::Create a LIRKind of type platformKind that contains a single, tracked, uncompressed oop reference.
org.graalvm.compiler.core.common.LIRKind#compressedReference(PlatformKind)->LIRKind:::Create a LIRKind of type platformKind that contains a single, tracked, compressed oop reference.
org.graalvm.compiler.core.common.LIRKind#fromJavaKind(Architecture, JavaKind)->LIRKind:::Create the correct LIRKind for a given Architecture and JavaKind.
org.graalvm.compiler.core.common.LIRKind#derivedReference(PlatformKind, AllocatableValue, boolean)->LIRKind:::Create a LIRKind of type platformKind that contains a derived reference.
org.graalvm.compiler.core.common.LIRKind#unknownReference(PlatformKind)->LIRKind:::Create a LIRKind of type platformKind that contains a value that is derived from a reference in a non-linear way
org.graalvm.compiler.core.common.LIRKind#makeDerivedReference(AllocatableValue)->LIRKind:::Create a derived reference.
org.graalvm.compiler.core.common.LIRKind#combine(Value...)->LIRKind:::Derive a new type from inputs
org.graalvm.compiler.core.common.LIRKind#derivedBaseFromValue(AllocatableValue)->AllocatableValue:::Helper method to construct derived reference kinds
org.graalvm.compiler.core.common.LIRKind#combineDerived(LIRKind, AllocatableValue, AllocatableValue)->LIRKind:::Helper method to construct derived reference kinds
org.graalvm.compiler.core.common.LIRKind#mergeReferenceInformation(LIRKind, LIRKind)->LIRKind:::Merges the reference information of the inputs
org.graalvm.compiler.core.common.LIRKind#changeType(PlatformKind)->LIRKind:::Create a new LIRKind with the same reference information and a new #getPlatformKind platform kind
org.graalvm.compiler.core.common.LIRKind#repeat(PlatformKind)->LIRKind:::Create a new LIRKind with a new #getPlatformKind platform kind
org.graalvm.compiler.core.common.LIRKind#makeUnknownReference()->LIRKind:::Create a new LIRKind with the same type, but marked as containing an LIRKind#unknownReference.
org.graalvm.compiler.core.common.LIRKind#isDerivedReference()->boolean:::Check whether this value is a derived reference.
org.graalvm.compiler.core.common.LIRKind#getDerivedReferenceBase()->AllocatableValue:::Get the base value of a derived reference.
org.graalvm.compiler.core.common.LIRKind#setDerivedReferenceBase(AllocatableValue)->void:::Change the base value of a derived reference
org.graalvm.compiler.core.common.LIRKind#isUnknownReference()->boolean:::Check whether this value is derived from a reference in a non-linear way
org.graalvm.compiler.core.common.LIRKind#isUnknownReference(ValueKind)->boolean::: kind is unknown reference
org.graalvm.compiler.core.common.LIRKind#isUnknownReference(Value)->boolean::: kind is unknown reference
org.graalvm.compiler.core.common.LIRKind#getReferenceCount()->int::: kind get reference count
org.graalvm.compiler.core.common.LIRKind#isReference(int)->boolean:::Check whether the idxth part of this value is a reference that must be tracked at safepoints.
org.graalvm.compiler.core.common.LIRKind#isCompressedReference(int)->boolean:::Check whether the idxth part of this value is a compressed reference.
org.graalvm.compiler.core.common.LIRKind#isValue()->boolean:::Check whether this kind is a value type that doesn't need to be tracked at safepoints.
org.graalvm.compiler.core.common.LIRKind#isValue(ValueKind)->boolean::: kind is value
org.graalvm.compiler.core.common.LIRKind#isValue(Value)->boolean::: kind is value
org.graalvm.compiler.core.common.LIRKind#toString()->String::: kind to string
org.graalvm.compiler.core.common.LIRKind#hashCode()->int::: kind hash code
org.graalvm.compiler.core.common.LIRKind#equals(Object)->boolean::: kind equals
org.graalvm.compiler.core.common.LIRKind#verifyMoveKinds(ValueKind, ValueKind, RegisterAllocationConfig)->boolean::: kind verify move kinds
org.graalvm.compiler.core.common.NumUtil#isShiftCount(int)->boolean::: num util is shift count
org.graalvm.compiler.core.common.NumUtil#isUByte(int)->boolean:::Determines if a given int value is the range of unsigned byte values.
org.graalvm.compiler.core.common.NumUtil#isByte(int)->boolean:::Determines if a given int value is the range of signed byte values.
org.graalvm.compiler.core.common.NumUtil#isUByte(long)->boolean:::Determines if a given long value is the range of unsigned byte values.
org.graalvm.compiler.core.common.NumUtil#isByte(long)->boolean:::Determines if a given long value is the range of signed byte values.
org.graalvm.compiler.core.common.NumUtil#isUInt(long)->boolean:::Determines if a given long value is the range of unsigned int values.
org.graalvm.compiler.core.common.NumUtil#isInt(long)->boolean:::Determines if a given long value is the range of signed int values.
org.graalvm.compiler.core.common.NumUtil#isShort(int)->boolean:::Determines if a given int value is the range of signed short values.
org.graalvm.compiler.core.common.NumUtil#isShort(long)->boolean:::Determines if a given long value is the range of signed short values.
org.graalvm.compiler.core.common.NumUtil#isUShort(int)->boolean::: num util is short
org.graalvm.compiler.core.common.NumUtil#isUShort(long)->boolean::: num util is short
org.graalvm.compiler.core.common.NumUtil#is32bit(long)->boolean::: num util is32bit
org.graalvm.compiler.core.common.NumUtil#safeToShort(int)->short::: num util safe to short
org.graalvm.compiler.core.common.NumUtil#safeToInt(long)->int::: num util safe to int
org.graalvm.compiler.core.common.NumUtil#roundUp(int, int)->int::: num util round up
org.graalvm.compiler.core.common.NumUtil#roundUp(long, long)->long::: num util round up
org.graalvm.compiler.core.common.NumUtil#roundDown(int, int)->int::: num util round down
org.graalvm.compiler.core.common.NumUtil#roundDown(long, long)->long::: num util round down
org.graalvm.compiler.core.common.NumUtil#log2Ceil(int)->int::: num util log2 ceil
org.graalvm.compiler.core.common.NumUtil#isUnsignedNbit(int, int)->boolean::: num util is unsigned nbit
org.graalvm.compiler.core.common.NumUtil#isUnsignedNbit(int, long)->boolean::: num util is unsigned nbit
org.graalvm.compiler.core.common.NumUtil#isSignedNbit(int, int)->boolean::: num util is signed nbit
org.graalvm.compiler.core.common.NumUtil#isSignedNbit(int, long)->boolean::: num util is signed nbit
org.graalvm.compiler.core.common.NumUtil#getNbitNumberInt(int)->int::: num util get nbit number int
org.graalvm.compiler.core.common.NumUtil#getNbitNumberLong(int)->long::: num util get nbit number long
org.graalvm.compiler.core.common.NumUtil#minValue(int)->long:::Get the minimum value representable in a bits bit signed integer.
org.graalvm.compiler.core.common.NumUtil#maxValue(int)->long:::Get the maximum value representable in a bits bit signed integer.
org.graalvm.compiler.core.common.NumUtil#maxValueUnsigned(int)->long:::Get the maximum value representable in a bits bit unsigned integer.
org.graalvm.compiler.core.common.NumUtil#maxUnsigned(long, long)->long::: num util max unsigned
org.graalvm.compiler.core.common.NumUtil#minUnsigned(long, long)->long::: num util min unsigned
org.graalvm.compiler.core.common.NumUtil#sameSign(long, long)->boolean::: num util same sign

org.graalvm.compiler.core.match.ComplexMatchResult#evaluate(NodeLIRBuilder)->Value::: complex match result evaluate
org.graalvm.compiler.core.match.ComplexMatchValue#evaluate(NodeLIRBuilder)->Value::: complex match value evaluate
org.graalvm.compiler.core.match.MatchContext.ConsumedNodes#add(Node, boolean)->void::: consumed nodes add
org.graalvm.compiler.core.match.MatchContext.ConsumedNodes#contains(Node)->boolean::: consumed nodes contains
org.graalvm.compiler.core.match.MatchContext.ConsumedNodes#find(Node)->ConsumedNode::: consumed nodes find
org.graalvm.compiler.core.match.MatchContext.ConsumedNodes#toString()->String::: consumed nodes to string
org.graalvm.compiler.core.match.MatchContext.ConsumedNodes#iterator()->Iterator::: consumed nodes iterator
org.graalvm.compiler.core.match.MatchContext#getRoot()->Node::: match context get root
org.graalvm.compiler.core.match.MatchContext#captureNamedValue(String, Class, Node)->Result::: match context capture named value
org.graalvm.compiler.core.match.MatchContext#validate()->Result::: match context validate
org.graalvm.compiler.core.match.MatchContext#setResult(ComplexMatchResult)->void:::Mark the interior nodes with INTERIOR_MATCH and set the Value of the root to be the result
org.graalvm.compiler.core.match.MatchContext#consume(Node, boolean, boolean)->Result:::Mark a node as consumed by the match
org.graalvm.compiler.core.match.MatchContext#namedNode(String)->Node:::Return the named node
org.graalvm.compiler.core.match.MatchContext#toString()->String::: match context to string
org.graalvm.compiler.core.match.MatchGenerator#match(NodeMatchRules, Object...)->ComplexMatchResult::: match generator match
org.graalvm.compiler.core.match.MatchGenerator#getName()->String::: match generator get name
org.graalvm.compiler.core.match.MatchPattern.Result#wrongClass(Node, MatchPattern)->Result::: result wrong class
org.graalvm.compiler.core.match.MatchPattern.Result#namedValueMismatch(Node, MatchPattern)->Result::: result named value mismatch
org.graalvm.compiler.core.match.MatchPattern.Result#tooManyUsers(Node, MatchPattern)->Result::: result too many users
org.graalvm.compiler.core.match.MatchPattern.Result#notInBlock(Node, MatchPattern)->Result::: result not in block
org.graalvm.compiler.core.match.MatchPattern.Result#notSafe(Node, MatchPattern)->Result::: result not safe
org.graalvm.compiler.core.match.MatchPattern.Result#alreadyUsed(Node, MatchPattern)->Result::: result already used
org.graalvm.compiler.core.match.MatchPattern.Result#tooLate(Node, MatchPattern)->Result::: result too late
org.graalvm.compiler.core.match.MatchPattern.Result#toString()->String::: result to string
org.graalvm.compiler.core.match.MatchPattern#nodeClass()->Class::: match pattern node class
org.graalvm.compiler.core.match.MatchPattern#matchUsage(Node, MatchContext)->Result:::Match any named nodes and ensure that the consumed nodes can be safely merged.
org.graalvm.compiler.core.match.MatchPattern#matchShape(Node, MatchStatement)->Result:::Recursively match the shape of the tree without worry about named values
org.graalvm.compiler.core.match.MatchPattern#isSingleValueUser(Node)->boolean::: match pattern is single value user
org.graalvm.compiler.core.match.MatchPattern#formatMatch(Node)->String:::For a node starting at root, produce a String showing the inputs that matched against this rule
org.graalvm.compiler.core.match.MatchPattern#toString()->String::: match pattern to string
org.graalvm.compiler.core.match.MatchRuleRegistry#findPositions(NodeClass, String[])->Position[]:::Convert a list of field names into org.graalvm.compiler.graph.Position objects that can be used to read them during a match
org.graalvm.compiler.core.match.MatchRuleRegistry#lookup(Class, OptionValues, DebugContext)->EconomicMap, List>:::Collect all the MatchStatements defined by the superclass chain of theClass.
org.graalvm.compiler.core.match.MatchRuleRegistry#createRules(Class)->EconomicMap, List>::: match rule registry create rules
org.graalvm.compiler.core.match.MatchStatement#generate(NodeLIRBuilder, int, Node, Block, StructuredGraph.ScheduleResult)->boolean:::Attempt to match the current statement against a Node.
org.graalvm.compiler.core.match.MatchStatement#formatMatch(Node)->String::: match statement format match
org.graalvm.compiler.core.match.MatchStatement#getPattern()->MatchPattern::: match statement get pattern
org.graalvm.compiler.core.match.MatchStatement#getName()->String::: match statement get name
org.graalvm.compiler.core.match.MatchStatement#toString()->String::: match statement to string
org.graalvm.compiler.core.match.MatchStatementSet#forClass()->Class::: match statement set for class
org.graalvm.compiler.core.match.MatchStatementSet#statements()->List::: match statement set statements

JdkLDAP.ProviderService#newInstance(Object)::: provider service new instance:::type->getType->algo->getAlgorithm->if->type->equals->algo->equals->if->throw->new->InvalidParameterException->try->return->new->LDAPCertStore->catch->throw->new->NoSuchAlgorithmException->finally->throw->new->ProviderException
LDAPCertStore.Key#equals(Object)::: key equals:::if->return->key->return->serverName->equalsIgnoreCase
LDAPCertStore.Key#hashCode()::: key hash code:::if->result->serverName->toLowerCase->hashCode->return
LDAPCertStore#getInstance(LDAPCertStoreParameters)::: cert store get instance:::serverName->params->getServerName->port->params->getPort->k->new->Key->lci->certStoreCache->get->if->new->LDAPCertStoreImpl->certStoreCache->put->else->if->debug->println->return
LDAPCertStore#engineGetCertificates(CertSelector):::Returns a Collection of Certificates that match the specified selector:::if->debug->String->valueOf->println->if->new->X509CertSelector->else->if->throw->selector->getClass->getName->new->CertStoreException->return->impl->getCertificates
LDAPCertStore#engineGetCRLs(CRLSelector):::Returns a Collection of CRLs that match the specified selector:::if->debug->println->if->new->X509CRLSelector->else->if->throw->selector->getClass->getName->new->CertStoreException->return->impl->getCRLs
LDAPCertStoreImpl#createInitialDirContext(String, int):::Create InitialDirContext.:::url->env->new->Hashtable<>->env->put->env->put->disableAppResourceFiles->AccessController->Boolean->getBoolean->doPrivileged->if->if->debug->println->env->put->try->new->InitialLdapContext->ctx->addToEnvironment->catch->if->debug->println->e->printStackTrace->ee->new->InvalidAlgorithmParameterException->ee->initCause->throw->finally
LDAPCertStoreImpl.LDAPRequest#checkName(String)::: request check name:::if->throw->new->CertStoreException->try->if->new->CompositeName->size->throw->new->CertStoreException->catch->throw->new->CertStoreException->finally->return
LDAPCertStoreImpl.LDAPRequest#getName()::: request get name:::return
LDAPCertStoreImpl.LDAPRequest#addRequestedAttribute(String)::: request add requested attribute:::if->throw->new->IllegalStateException->requestedAttributes->add
LDAPCertStoreImpl.LDAPRequest#getValues(String):::Gets one or more binary values from an attribute.:::if->println->cacheKey->values->valueCache->get->if->return->attrs->getValueMap->attrs->get->return
LDAPCertStoreImpl.LDAPRequest#getValueMap():::Get a map containing the values for this request:::if->return->if->println->if->println->new->HashMap<>->attrIds->requestedAttributes->toArray->attrs->if->ctx->reconnect->try->ctx->getAttributes->catch->while->try->newName->lre->getReferralInfo->newUri->new->URI->if->newUri->getScheme->equalsIgnoreCase->throw->new->IllegalArgumentException->newDn->newUri->getPath->if->newDn->charAt->newDn->substring->checkName->catch->throw->lre->getReferralInfo->new->NamingException->finally->refCtx->lre->getReferralContext->try->refCtx->getAttributes->break->catch->continue->finally->refCtx->close->throw->finally->foreach->attr->attrs->get->values->getAttributeValues->cacheAttribute->valueMap->put->return
LDAPCertStoreImpl.LDAPRequest#cacheAttribute(String, byte[][]):::Add the values to the cache.:::cacheKey->valueCache->put
LDAPCertStoreImpl.LDAPRequest#getAttributeValues(Attribute):::Get the values for the given attribute:::values->if->else->attr->size->new->byteArrs->i->enum_->attr->getAll->while->enum_->hasMore->obj->enum_->next->if->if->debug->println->value->return
LDAPCertStoreImpl#getCertificates(LDAPRequest, String, X509CertSelector)::: cert store impl get certificates:::encodedCert->try->request->getValues->catch->throw->new->CertStoreException->finally->n->if->return->Collections->emptySet->certs->new->ArrayList<>->for->i->return
LDAPCertStoreImpl#getCertPairs(LDAPRequest, String)::: cert store impl get cert pairs:::encodedCertPair->try->request->getValues->catch->throw->new->CertStoreException->finally->n->if->return->Collections->emptySet->certPairs->new->ArrayList<>->for->i->return
LDAPCertStoreImpl#getMatchingCrossCerts(LDAPRequest, X509CertSelector, X509CertSelector)::: cert store impl get matching cross certs:::certPairs->getCertPairs->matchingCerts->new->ArrayList<>->foreach->cert->if->certPair->getForward->if->forward->match->matchingCerts->add->if->certPair->getReverse->if->reverse->match->matchingCerts->add->return
LDAPCertStoreImpl#getCertificates(X509CertSelector, String):::Returns a Collection of X509Certificates that match the specified selector:::if->xsel->getSubjectAsString->basicConstraints->xsel->getBasicConstraints->issuer->xsel->getIssuerAsString->certs->new->HashSet<>->if->debug->println->if->if->debug->println->request->new->LDAPRequest->if->request->addRequestedAttribute->request->addRequestedAttribute->request->addRequestedAttribute->if->request->addRequestedAttribute->if->request->addRequestedAttribute->if->certs->getMatchingCrossCerts->addAll->if->debug->certs->size->println->certs->getCertificates->addAll->if->debug->certs->size->println->if->certs->getCertificates->addAll->if->debug->certs->size->println->else->if->debug->println->if->throw->new->CertStoreException->if->throw->new->CertStoreException->if->debug->println->if->request->new->LDAPRequest->request->addRequestedAttribute->request->addRequestedAttribute->request->addRequestedAttribute->if->request->addRequestedAttribute->certs->getMatchingCrossCerts->addAll->if->debug->certs->size->println->certs->getCertificates->addAll->if->debug->certs->size->println->if->debug->println->return
LDAPCertStoreImpl#getCRLs(LDAPRequest, String, X509CRLSelector)::: cert store impl get ls:::encodedCRL->try->request->getValues->catch->throw->new->CertStoreException->finally->n->if->return->Collections->emptySet->crls->new->ArrayList<>->for->i->return
LDAPCertStoreImpl#getCRLs(X509CRLSelector, String):::Returns a Collection of X509CRLs that match the specified selector:::crls->new->HashSet<>->issuerNames->certChecking->xsel->getCertificateChecking->if->new->HashSet<>->issuer->certChecking->getIssuerX500Principal->issuerNames->issuer->getName->add->else->if->new->HashSet<>->issuerNames->add->else->xsel->getIssuerNames->if->throw->new->CertStoreException->foreach->issuerName->if->try->issuer->new->X500Principal->issuer->getName->catch->continue->finally->else->entryCRLs->Collections->emptySet->if->certChecking->getBasicConstraints->request->new->LDAPRequest->request->addRequestedAttribute->request->addRequestedAttribute->request->addRequestedAttribute->if->request->addRequestedAttribute->try->getCRLs->if->entryCRLs->isEmpty->else->crls->addAll->catch->if->debug->println->e->printStackTrace->finally->if->entryCRLs->isEmpty->request->new->LDAPRequest->request->addRequestedAttribute->getCRLs->crls->addAll->return

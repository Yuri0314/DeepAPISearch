CollectionsUtil#concat(Iterable, Iterable):::Concatenates two iterables into a single iterable:::l->Arrays->asList->return->concat
CollectionsUtil#concat(List>):::Concatenates multiple iterables into a single iterable:::foreach->Objects->requireNonNull->return->new->Iterable<T>
CollectionsUtil#allMatch(T[], Predicate):::Returns whether all elements in inputs match predicate:::return->Arrays->asList->allMatch
CollectionsUtil#allMatch(Iterable, Predicate):::Returns whether all elements in inputs match predicate:::foreach->if->predicate->test->return->return
CollectionsUtil#anyMatch(T[], Predicate):::Returns whether any elements in inputs match predicate:::return->Arrays->asList->anyMatch
CollectionsUtil#anyMatch(Iterable, Predicate):::Returns whether any elements in inputs match predicate:::foreach->if->predicate->test->return->return
CollectionsUtil#filterToList(List, Predicate):::Returns a new list consisting of the elements in inputs that match predicate.:::return->ArrayList->new->filterToList
CollectionsUtil#filterToList(List, Predicate, Supplier>):::Appends elements of inputs that match predicate to the list generated by listGenerator.:::resultList->listGenerator->get->foreach->if->predicate->test->resultList->add->return
CollectionsUtil#filterAndMapToArray(T[], Predicate, Function, IntFunction):::Filters inputs with predicate, applies mapper and adds them in the array provided by arrayGenerator.:::resultList->new->ArrayList<>->foreach->if->predicate->test->resultList->mapper->apply->add->return->resultList->arrayGenerator->resultList->size->apply->toArray
CollectionsUtil#mapToArray(T[], Function, IntFunction):::Applies mapper on the elements in inputs and adds them in the array provided by arrayGenerator.:::return->Arrays->asList->mapToArray
CollectionsUtil#mapToArray(Collection, Function, IntFunction):::Applies mapper on the elements in inputs and adds them in the array provided by arrayGenerator.:::result->arrayGenerator->inputs->size->apply->idx->foreach->mapper->apply->return
CollectionsUtil#mapAndJoin(T[], Function, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter.:::return->Arrays->asList->mapAndJoin
CollectionsUtil#mapAndJoin(T[], Function, String, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix.:::return->Arrays->asList->mapAndJoin
CollectionsUtil#mapAndJoin(T[], Function, String, String, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix and ending with suffix.:::return->Arrays->asList->mapAndJoin
CollectionsUtil#mapAndJoin(Iterable, Function, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter.:::return->mapAndJoin
CollectionsUtil#mapAndJoin(Iterable, Function, String, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix.:::return->mapAndJoin
CollectionsUtil#mapAndJoin(Iterable, Function, String, String, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix and ending with suffix.:::strb->new->StringBuilder->sep->foreach->strb->append->append->mapper->apply->append->append->return->strb->toString
ObjectSizeEstimate#forObject(Object):::Collect the size occupied by the object graph reachable from the given root object.:::return->forObject
ObjectSizeEstimate#forObject(Object, int):::Collect the size occupied by the object graph reachable from the given root object.:::return->forObjectHelper

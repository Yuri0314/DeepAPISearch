CollectionsUtil#concat(Iterable, Iterable):::Concatenates two iterables into a single iterable:::l->Arrays->asList->return->concat
CollectionsUtil#concat(List>):::Concatenates multiple iterables into a single iterable:::foreach->Objects->requireNonNull->return->new->Iterable<T>
CollectionsUtil#allMatch(T[], Predicate):::Returns whether all elements in inputs match predicate:::return->Arrays->asList->allMatch
CollectionsUtil#allMatch(Iterable, Predicate):::Returns whether all elements in inputs match predicate:::foreach->if->predicate->test->return->return
CollectionsUtil#anyMatch(T[], Predicate):::Returns whether any elements in inputs match predicate:::return->Arrays->asList->anyMatch
CollectionsUtil#anyMatch(Iterable, Predicate):::Returns whether any elements in inputs match predicate:::foreach->if->predicate->test->return->return
CollectionsUtil#filterToList(List, Predicate):::Returns a new list consisting of the elements in inputs that match predicate.:::return->ArrayList->new->filterToList
CollectionsUtil#filterToList(List, Predicate, Supplier>):::Appends elements of inputs that match predicate to the list generated by listGenerator.:::resultList->listGenerator->get->foreach->if->predicate->test->resultList->add->return
CollectionsUtil#filterAndMapToArray(T[], Predicate, Function, IntFunction):::Filters inputs with predicate, applies mapper and adds them in the array provided by arrayGenerator.:::resultList->new->ArrayList<>->foreach->if->predicate->test->resultList->mapper->apply->add->return->resultList->arrayGenerator->resultList->size->apply->toArray
CollectionsUtil#mapToArray(T[], Function, IntFunction):::Applies mapper on the elements in inputs and adds them in the array provided by arrayGenerator.:::return->Arrays->asList->mapToArray
CollectionsUtil#mapToArray(Collection, Function, IntFunction):::Applies mapper on the elements in inputs and adds them in the array provided by arrayGenerator.:::result->arrayGenerator->inputs->size->apply->idx->foreach->mapper->apply->return
CollectionsUtil#mapAndJoin(T[], Function, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter.:::return->Arrays->asList->mapAndJoin
CollectionsUtil#mapAndJoin(T[], Function, String, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix.:::return->Arrays->asList->mapAndJoin
CollectionsUtil#mapAndJoin(T[], Function, String, String, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix and ending with suffix.:::return->Arrays->asList->mapAndJoin
CollectionsUtil#mapAndJoin(Iterable, Function, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter.:::return->mapAndJoin
CollectionsUtil#mapAndJoin(Iterable, Function, String, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix.:::return->mapAndJoin
CollectionsUtil#mapAndJoin(Iterable, Function, String, String, String):::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix and ending with suffix.:::strb->new->StringBuilder->sep->foreach->strb->append->append->mapper->apply->append->append->return->strb->toString
DirectAnnotationAccess#isAnnotationPresent(AnnotatedElement, Class)::: direct annotation access is annotation present:::return->element->getAnnotation
DirectAnnotationAccess#getAnnotation(AnnotatedElement, Class)::: direct annotation access get annotation:::return->element->getAnnotation
GuardedAnnotationAccess#isAnnotationPresent(AnnotatedElement, Class)::: guarded annotation access is annotation present:::return->getAnnotation
GuardedAnnotationAccess#getAnnotation(AnnotatedElement, Class)::: guarded annotation access get annotation:::try->return->element->getAnnotation->catch->return->finally
GuardedAnnotationAccess#getAnnotations(AnnotatedElement)::: guarded annotation access get annotations:::try->return->element->getAnnotations->catch->return->new->AnnotationArr->finally
GuardedAnnotationAccess#getDeclaredAnnotation(AnnotatedElement, Class)::: guarded annotation access get declared annotation:::try->return->element->getDeclaredAnnotation->catch->return->finally
GuardedAnnotationAccess#getDeclaredAnnotations(AnnotatedElement)::: guarded annotation access get declared annotations:::try->return->element->getDeclaredAnnotations->catch->return->new->AnnotationArr->finally
ObjectSizeEstimate#forObject(Object):::Collect the size occupied by the object graph reachable from the given root object.:::return->forObject
ObjectSizeEstimate#forObject(Object, int):::Collect the size occupied by the object graph reachable from the given root object.:::return->forObjectHelper
ObjectSizeEstimate#add(ObjectSizeEstimate)::: object size estimate add:::result->new->ObjectSizeEstimate->return
ObjectSizeEstimate#subtract(ObjectSizeEstimate)::: object size estimate subtract:::result->new->ObjectSizeEstimate->return
ObjectSizeEstimate#getHeaderCount()::: object size estimate get header count:::return
ObjectSizeEstimate#getPointerCount()::: object size estimate get pointer count:::return
ObjectSizeEstimate#getPrimitiveByteSize()::: object size estimate get primitive byte size:::return
ObjectSizeEstimate#toString()::: object size estimate to string:::return->String->getCompressedTotalBytes->getTotalBytes->format
ObjectSizeEstimate#getCompressedTotalBytes()::: object size estimate get compressed total bytes:::return
ObjectSizeEstimate#getTotalBytes()::: object size estimate get total bytes:::return
ObjectSizeEstimate#recordHeader()::: object size estimate record header:::
ObjectSizeEstimate#recordPointer()::: object size estimate record pointer:::
ObjectSizeEstimate#recordPrimitiveBytes(int)::: object size estimate record primitive bytes:::
ObjectSizeEstimate#forObjectHelper(Object, int)::: object size estimate for object helper:::identityHashMap->EconomicMap->create->size->new->ObjectSizeEstimate->stack->new->ArrayList<>->depthStack->new->ArrayList<>->stack->add->depthStack->add->identityHashMap->put->while->stack->isEmpty->o->stack->stack->size->remove->depth->depthStack->depthStack->size->remove->size->recordHeader->c->o->getClass->if->c->isArray->size->recordPrimitiveBytes->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->foreach->size->recordPointer->if->if->identityHashMap->containsKey->identityHashMap->put->stack->add->depthStack->add->else->while->fields->c->getDeclaredFields->foreach->if->Modifier->f->getModifiers->isStatic->type->f->getType->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->if->size->recordPrimitiveBytes->else->size->recordPointer->if->try->f->setAccessible->inner->f->get->if->if->identityHashMap->containsKey->identityHashMap->put->stack->add->depthStack->add->catch->throw->new->UnsupportedOperationException->if->e->getClass->getName->equals->throw->new->UnsupportedOperationException->else->throw->finally->c->getSuperclass->return
ObjectSizeEstimate#zero()::: object size estimate zero:::return->new->ObjectSizeEstimate
ObjectSizeEstimate#hashCode()::: object size estimate hash code:::prime->return
ObjectSizeEstimate#equals(Object)::: object size estimate equals:::if->return->else->if->other->return->return

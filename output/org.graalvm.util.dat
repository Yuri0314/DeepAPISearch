org.graalvm.util.CollectionsUtil#concat(Iterable, Iterable)->Iterable:::Concatenates two iterables into a single iterable
org.graalvm.util.CollectionsUtil#concat(List>)->Iterable:::Concatenates multiple iterables into a single iterable
org.graalvm.util.CollectionsUtil#allMatch(T[], Predicate)->boolean:::Returns whether all elements in inputs match predicate
org.graalvm.util.CollectionsUtil#allMatch(Iterable, Predicate)->boolean:::Returns whether all elements in inputs match predicate
org.graalvm.util.CollectionsUtil#anyMatch(T[], Predicate)->boolean:::Returns whether any elements in inputs match predicate
org.graalvm.util.CollectionsUtil#anyMatch(Iterable, Predicate)->boolean:::Returns whether any elements in inputs match predicate
org.graalvm.util.CollectionsUtil#filterToList(List, Predicate)->List:::Returns a new list consisting of the elements in inputs that match predicate.
org.graalvm.util.CollectionsUtil#filterToList(List, Predicate, Supplier>)->List:::Appends elements of inputs that match predicate to the list generated by listGenerator.
org.graalvm.util.CollectionsUtil#filterAndMapToArray(T[], Predicate, Function, IntFunction)->R[]:::Filters inputs with predicate, applies mapper and adds them in the array provided by arrayGenerator.
org.graalvm.util.CollectionsUtil#mapToArray(T[], Function, IntFunction)->R[]:::Applies mapper on the elements in inputs and adds them in the array provided by arrayGenerator.
org.graalvm.util.CollectionsUtil#mapToArray(Collection, Function, IntFunction)->R[]:::Applies mapper on the elements in inputs and adds them in the array provided by arrayGenerator.
org.graalvm.util.CollectionsUtil#mapAndJoin(T[], Function, String)->String:::Applies mapper on the elements in inputs, and joins them together separated by delimiter.
org.graalvm.util.CollectionsUtil#mapAndJoin(T[], Function, String, String)->String:::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix.
org.graalvm.util.CollectionsUtil#mapAndJoin(T[], Function, String, String, String)->String:::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix and ending with suffix.
org.graalvm.util.CollectionsUtil#mapAndJoin(Iterable, Function, String)->String:::Applies mapper on the elements in inputs, and joins them together separated by delimiter.
org.graalvm.util.CollectionsUtil#mapAndJoin(Iterable, Function, String, String)->String:::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix.
org.graalvm.util.CollectionsUtil#mapAndJoin(Iterable, Function, String, String, String)->String:::Applies mapper on the elements in inputs, and joins them together separated by delimiter and starting with prefix and ending with suffix.
org.graalvm.util.DirectAnnotationAccess#isAnnotationPresent(AnnotatedElement, Class)->boolean::: direct annotation access is annotation present
org.graalvm.util.DirectAnnotationAccess#getAnnotation(AnnotatedElement, Class)->T::: direct annotation access get annotation
org.graalvm.util.GuardedAnnotationAccess#isAnnotationPresent(AnnotatedElement, Class)->boolean::: guarded annotation access is annotation present
org.graalvm.util.GuardedAnnotationAccess#getAnnotation(AnnotatedElement, Class)->T::: guarded annotation access get annotation
org.graalvm.util.GuardedAnnotationAccess#getAnnotations(AnnotatedElement)->Annotation[]::: guarded annotation access get annotations
org.graalvm.util.GuardedAnnotationAccess#getDeclaredAnnotation(AnnotatedElement, Class)->T::: guarded annotation access get declared annotation
org.graalvm.util.GuardedAnnotationAccess#getDeclaredAnnotations(AnnotatedElement)->Annotation[]::: guarded annotation access get declared annotations
org.graalvm.util.ObjectSizeEstimate#forObject(Object)->ObjectSizeEstimate:::Collect the size occupied by the object graph reachable from the given root object.
org.graalvm.util.ObjectSizeEstimate#forObject(Object, int)->ObjectSizeEstimate:::Collect the size occupied by the object graph reachable from the given root object.
org.graalvm.util.ObjectSizeEstimate#add(ObjectSizeEstimate)->ObjectSizeEstimate::: object size estimate add
org.graalvm.util.ObjectSizeEstimate#subtract(ObjectSizeEstimate)->ObjectSizeEstimate::: object size estimate subtract
org.graalvm.util.ObjectSizeEstimate#getHeaderCount()->int::: object size estimate get header count
org.graalvm.util.ObjectSizeEstimate#getPointerCount()->int::: object size estimate get pointer count
org.graalvm.util.ObjectSizeEstimate#getPrimitiveByteSize()->int::: object size estimate get primitive byte size
org.graalvm.util.ObjectSizeEstimate#toString()->String::: object size estimate to string
org.graalvm.util.ObjectSizeEstimate#getCompressedTotalBytes()->int::: object size estimate get compressed total bytes
org.graalvm.util.ObjectSizeEstimate#getTotalBytes()->int::: object size estimate get total bytes
org.graalvm.util.ObjectSizeEstimate#zero()->ObjectSizeEstimate::: object size estimate zero
org.graalvm.util.ObjectSizeEstimate#hashCode()->int::: object size estimate hash code
org.graalvm.util.ObjectSizeEstimate#equals(Object)->boolean::: object size estimate equals

AArch64JELFRelocObject#createRelocation(Symbol, Relocation, ElfRelocTable)::: arch64 reloc object create relocation:::relocType->reloc->getType->elfRelocType->getELFRelocationType->sym->symbol->getNativeSymbol->symno->sym->getIndex->sectindex->reloc->getSection->getSectionId->offset->reloc->getOffset->addend->switch->break->elfRelocTable->createRelocationEntry->elfRelocTable->createRelocationEntry->return->break->elfRelocTable->createRelocationEntry->elfRelocTable->createRelocationEntry->return->break->break->throw->new->InternalError->elfRelocTable->createRelocationEntry
AArch64JELFRelocObject#getELFRelocationType(RelocType)::: arch64 reloc object get relocation type:::elfRelocType->switch->ElfTargetInfo->getElfArch->if->else->if->else->if->else->if->else->if->else->break->ElfTargetInfo->getElfArch->println->return
AMD64JELFRelocObject#createRelocation(Symbol, Relocation, ElfRelocTable)::: d64 reloc object create relocation:::relocType->reloc->getType->elfRelocType->getELFRelocationType->sym->symbol->getNativeSymbol->symno->sym->getIndex->sectindex->reloc->getSection->getSectionId->offset->reloc->getOffset->addend->switch->reloc->getSize->break->break->break->throw->new->InternalError->elfRelocTable->createRelocationEntry
AMD64JELFRelocObject#getELFRelocationType(RelocType)::: d64 reloc object get relocation type:::elfRelocType->switch->ElfTargetInfo->getElfArch->if->else->if->else->if->else->if->else->if->else->break->ElfTargetInfo->getElfArch->println->return
ElfByteBuffer#allocate(int)::: elf byte buffer allocate:::buf->ByteBuffer->allocate->if->ElfTargetInfo->getElfEndian->buf->order->else->buf->order->return
ElfContainer#close()::: elf container close:::try->outputStream->close->catch->println->finally
ElfContainer#writeBytes(byte[])::: elf container write bytes:::if->return->try->outputStream->write->catch->println->finally
ElfContainer#writeBytes(byte[], int)::: elf container write bytes:::if->return->try->while->outputStream->write->outputStream->write->catch->println->finally
ElfHeader#setSectionOff(int)::: elf header set section off:::header->putLong
ElfHeader#setSectionNum(int)::: elf header set section num:::header->putChar
ElfHeader#setSectionStrNdx(int)::: elf header set section str ndx:::header->putChar
ElfHeader#getArray()::: elf header get array:::return->header->array
ElfRelocEntry#getArray()::: elf reloc entry get array:::return->entry->array
ElfRelocTable#createRelocationEntry(int, int, int, int, int)::: elf reloc table create relocation entry:::entry->new->ElfRelocEntry->relocEntries->get->add
ElfRelocTable#getNumRelocs(int)::: elf reloc table get num relocs:::return->relocEntries->get->size
ElfRelocTable#getRelocData(int)::: elf reloc table get reloc data:::entryList->relocEntries->get->if->entryList->size->return->relocData->ElfByteBuffer->entryList->size->allocate->for->i->entryList->size->return->relocData->array
ElfSection#getName()::: elf section get name:::return
ElfSection#getSize()::: elf section get size:::return->section->getLong
ElfSection#getDataAlign()::: elf section get data align:::return->section->getLong
ElfSection#getShdrAlign()::: elf section get shdr align:::return
ElfSection#getArray()::: elf section get array:::return->section->array
ElfSection#getDataArray()::: elf section get data array:::return
ElfSection#setOffset(long)::: elf section set offset:::section->putLong
ElfSection#setLink(int)::: elf section set link:::section->putInt
ElfSection#setInfo(int)::: elf section set info:::section->putInt
ElfSection#getOffset()::: elf section get offset:::return->section->getLong
ElfSection#hasRelocations()::: elf section has relocations:::return
ElfSection#getSectionId()::: elf section get section id:::return
ElfSymbol#getArray()::: elf symbol get array:::return->sym->array
ElfSymtab#addSymbolEntry(String, byte, byte, byte, long, long)::: elf symtab add symbol entry:::index->sym->if->name->isEmpty->strTabContent->append->new->ElfSymbol->localSymbols->add->else->strTabContent->append->append->name->getBytes->new->ElfSymbol->if->globalSymbols->add->else->localSymbols->add->return
ElfSymtab#updateIndexes()::: elf symtab update indexes:::index->for->i->localSymbols->size->for->i->globalSymbols->size
ElfSymtab#getNumLocalSyms()::: elf symtab get num local syms:::return->localSymbols->size
ElfSymtab#getNumGlobalSyms()::: elf symtab get num global syms:::return->globalSymbols->size
ElfSymtab#getSymtabArray()::: elf symtab get symtab array:::symtabData->ElfByteBuffer->allocate->retarray->updateIndexes->for->i->localSymbols->size->for->i->globalSymbols->size->symtabData->array->return
ElfSymtab#getStrtabArray()::: elf symtab get strtab array:::strs->strTabContent->toString->getBytes->return
ElfTargetInfo#getElfArch()::: elf target info get elf arch:::return
ElfTargetInfo#getElfEndian()::: elf target info get elf endian:::return
ElfTargetInfo#getOsName()::: elf target info get os name:::return
JELFRelocObject#newInstance(BinaryContainer, String)::: reloc object new instance:::archStr->System->getProperty->toLowerCase->if->archStr->equals->archStr->equals->return->new->AMD64JELFRelocObject->else->if->archStr->equals->return->new->AArch64JELFRelocObject->throw->new->InternalError
JELFRelocObject#createByteSection(ArrayList, String, byte[], boolean, int, int, int)::: reloc object create byte section:::sect->sections->size->new->ElfSection->sections->add->return
JELFRelocObject#createByteSection(ArrayList, ByteContainer, int)::: reloc object create byte section:::sect->hasRelocs->c->hasRelocations->scnData->c->getByteArray->scnType->zeros->if->foreach->if->break->if->c->getContainerName->createByteSection->c->sect->getSectionId->setSectionId
JELFRelocObject#createCodeSection(ArrayList, CodeContainer)::: reloc object create code section:::createByteSection
JELFRelocObject#createReadOnlySection(ArrayList, ReadOnlyDataContainer)::: reloc object create read only section:::createByteSection
JELFRelocObject#createReadWriteSection(ArrayList, ByteContainer)::: reloc object create read write section:::createByteSection
JELFRelocObject#createELFRelocObject(Map>, Collection):::Creates an ELF relocatable object.:::eh->new->ElfHeader->sections->new->ArrayList<>->createByteSection->binContainer->getCodeContainer->createCodeSection->binContainer->getMetaspaceNamesContainer->createReadOnlySection->binContainer->getKlassesOffsetsContainer->createReadOnlySection->binContainer->getMethodsOffsetsContainer->createReadOnlySection->binContainer->getKlassesDependenciesContainer->createReadOnlySection->binContainer->getMethodMetadataContainer->createReadOnlySection->binContainer->getStubsOffsetsContainer->createReadOnlySection->binContainer->getHeaderContainer->getContainer->createReadOnlySection->binContainer->getCodeSegmentsContainer->createReadOnlySection->binContainer->getConstantDataContainer->createReadOnlySection->binContainer->getConfigContainer->createReadOnlySection->binContainer->getKlassesGotContainer->createReadWriteSection->binContainer->getCountersGotContainer->createReadWriteSection->binContainer->getMetadataGotContainer->createReadWriteSection->binContainer->getOopGotContainer->createReadWriteSection->binContainer->getMethodStateContainer->createReadWriteSection->binContainer->getExtLinkageGOTContainer->createReadWriteSection->symtab->createELFSymbolTables->strTabSection->symtab->getStrtabArray->createByteSection->symTabSection->symtab->getSymtabArray->createByteSection->symTabSection->strTabSection->getSectionId->setLink->symTabSection->symtab->getNumLocalSyms->setInfo->elfRelocTable->createElfRelocTable->symTabSection->getSectionId->createElfRelocSections->shStrTabSection->createByteSection->eh->shStrTabSection->getSectionId->setSectionStrNdx->fileOffset->sections->get->getDataAlign->sections->get->getDataAlign->for->i->sections->size->ElfSection->getShdrAlign->ElfSection->getShdrAlign->eh->setSectionOff->eh->sections->size->setSectionNum->elfContainer->eh->getArray->writeBytes->for->i->sections->size->for->i->sections->size->elfContainer->close
JELFRelocObject#createELFSymbolTables(Collection):::Construct ELF symbol data from BinaryContainer object's symbol tables:::symtab->new->ElfSymtab->symtab->addSymbolEntry->foreach->secHdrIndex->symbol->getSection->getSectionId->elfSymbol->symtab->symbol->getName->getELFTypeOf->getELFBindOf->symbol->getOffset->symbol->getSize->addSymbolEntry->symbol->setNativeSymbol->return
JELFRelocObject#getELFTypeOf(Symbol)::: reloc object get type of:::kind->sym->getKind->if->return->else->if->return->return
JELFRelocObject#getELFBindOf(Symbol)::: reloc object get bind of:::binding->sym->getBinding->if->return->return
JELFRelocObject#createElfRelocTable(ArrayList, Map>):::Construct a Elf relocation table from BinaryContainer object's relocation tables.:::elfRelocTable->sections->size->new->ElfRelocTable->foreach->relocationTable->entrySet->relocs->entry->getValue->symbol->entry->getKey->foreach->createRelocation->foreach->binContainer->getUniqueRelocationTable->entrySet->entry->getKey->entry->getValue->createRelocation->return
JELFRelocObject#createElfRelocSections(ArrayList, ElfRelocTable, int)::: reloc object create elf reloc sections:::count->sections->size->for->i
JELFRelocObject#createRelocation(Symbol, Relocation, ElfRelocTable)::: reloc object create relocation:::
